[
  {
    "owner": "microsoftdocs",
    "repo": "azure-docs-cli",
    "content": "TITLE: Creating Azure SQL Server using Azure CLI\nDESCRIPTION: This snippet demonstrates how to create an Azure SQL server using Azure CLI. It includes variable declarations for server name, resource group, location, admin user, and password.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/azure-cli-copilot.md#2025-04-23_snippet_0\n\nLANGUAGE: azurecli\nCODE:\n```\n# Variable block\nserverName=\"myServerName\"\nresourceGroup=\"myResourceGroup\"\nlocationName=\"eastus2\"\nadminUser=\"myAdminUser\"\nadminPassword=\"myPassword\"\n\naz sql server create --name $serverName --resource-group $resourceGroup --location $location --admin-user $adminUser --admin-password $adminPassword\n```\n\n----------------------------------------\n\nTITLE: Setting Default Location and Resource Group with az config\nDESCRIPTION: Sets the default location and resource group for all commands using the az config set command. This eliminates the need to specify these parameters in every command.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/azure-cli-configuration.md#2025-04-23_snippet_1\n\nLANGUAGE: azurecli-interactive\nCODE:\n```\naz config set defaults.location=westus2 defaults.group=MyResourceGroup\n```\n\n----------------------------------------\n\nTITLE: Creating Resource Group with PowerShell Variables in Azure CLI\nDESCRIPTION: Creates an Azure resource group using PowerShell variables. Sets variables for resource group name and location, then creates the group using az group create command.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/azure-cli-vm-tutorial-1.md#2025-04-23_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n# Create PowerShell variables\n$resourceGroup = \"VMTutorialResources\"\n$location = \"eastus\"\n\naz group create --name $resourceGroup --location $location\n```\n\n----------------------------------------\n\nTITLE: Creating a Service Principal with New Certificate in Azure CLI\nDESCRIPTION: This command creates a new service principal with a self-signed certificate. It assigns the specified role to the service principal within the scope of the specified resource group.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/azure-cli-sp-tutorial-3.md#2025-04-23_snippet_0\n\nLANGUAGE: azurecli\nCODE:\n```\naz ad sp create-for-rbac --name myServicePrincipalName \\\n                         --role roleName \\\n                         --scopes /subscriptions/mySubscriptionID/resourceGroups/myResourceGroupName \\\n                         --create-cert\n```\n\n----------------------------------------\n\nTITLE: Logging in with Service Principal using Client Secret in Azure CLI\nDESCRIPTION: This command demonstrates how to log in to Azure using a service principal with a client secret. It requires the application ID, client secret, and tenant ID.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/authenticate-azure-cli-service-principal.md#2025-04-23_snippet_0\n\nLANGUAGE: azurecli\nCODE:\n```\naz login --service-principal --username APP_ID --password CLIENT_SECRET --tenant TENANT_ID\n```\n\n----------------------------------------\n\nTITLE: Getting Help for VM Availability Sets in Azure CLI\nDESCRIPTION: Command to display help information for managing VM availability sets, showing all available commands and options for this subgroup.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/get-started-with-azure-cli.md#2025-04-23_snippet_3\n\nLANGUAGE: azurecli-interactive\nCODE:\n```\naz vm availability-set --help\n```\n\n----------------------------------------\n\nTITLE: Formatting Azure CLI Output as Table\nDESCRIPTION: This command demonstrates how to format the output of an Azure CLI command. It lists Azure accounts and displays the result in a table format using the '--output' parameter.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/what-is-azure-cli.md#2025-04-23_snippet_2\n\nLANGUAGE: azurecli\nCODE:\n```\naz account list --output table\n```\n\n----------------------------------------\n\nTITLE: Creating an Ubuntu VM with Azure CLI in Bash\nDESCRIPTION: Command to create a new Ubuntu 22.04 virtual machine with SSH authentication connected to a specific virtual network and subnet. The command uses Bash shell variables and outputs results in JSON format with verbose logging.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/azure-cli-vm-tutorial-3.md#2025-04-23_snippet_0\n\nLANGUAGE: azurecli-interactive\nCODE:\n```\n# create Bash shell variable\nvmName=TutorialVM1\n\naz vm create \\\n  --resource-group $resourceGroup \\\n  --name $vmName \\\n  --image Ubuntu2204 \\\n  --vnet-name $vnetName \\\n  --subnet $subnetName \\\n  --generate-ssh-keys \\\n  --output json \\\n  --verbose \n```\n\n----------------------------------------\n\nTITLE: Creating and Uploading Sample Files to Azure Storage in Azure CLI Bash Scripts\nDESCRIPTION: This snippet demonstrates how to create sample files using a for loop and then upload them to an Azure Storage Container using az storage blob upload-batch command. It also shows how to list the uploaded blobs and calculate their total size.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/use-azure-cli-successfully-bash.md#2025-04-23_snippet_20\n\nLANGUAGE: azurecli\nCODE:\n```\nfor i in `seq 1 3`; do\n    echo $randomIdentifier > container_size_sample_file_$i.txt\ndone\n\naz storage blob upload-batch \\\n    --pattern \"container_size_sample_file_*.txt\" \\\n    --source . \\\n    --destination $container \\\n    --account-key $accountKey \\\n    --account-name $storageAccount\n\naz storage blob list \\\n    --container-name $container \\\n    --account-key $accountKey \\\n    --account-name $storageAccount \\\n    --query \"[].name\"\n\nbytes=`az storage blob list \\\n    --container-name $container \\\n    --account-key $accountKey \\\n    --account-name $storageAccount \\\n    --query \"[*].[properties.contentLength]\" \\\n    --output tsv | paste -s -d+ | bc`\n\necho \"Total bytes in container: $bytes\"\necho $bytes\n```\n\n----------------------------------------\n\nTITLE: Managing Azure Cosmos DB for Various Data Models\nDESCRIPTION: This comprehensive snippet covers creating and managing Azure Cosmos DB accounts for Cassandra, Gremlin, and SQL APIs. It includes operations for autoscaling, serverless configuration, throughput management, and security settings like IP firewall and RBAC.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/samples-azure-cli-samples-repo.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\naz cosmosdb create\naz cosmosdb cassandra keyspace create\naz cosmosdb cassandra table create\naz lock create\naz lock delete\naz lock list\naz lock show\naz cosmosdb cassandra keyspace throughput migrate\naz cosmosdb cassandra keyspace throughput show\naz cosmosdb cassandra keyspace throughput update\naz cosmosdb cassandra table throughput migrate\naz cosmosdb cassandra table throughput show\naz cosmosdb cassandra table throughput update\naz account set\naz cosmosdb list\naz cosmosdb update\naz cosmosdb keys list\naz cosmosdb keys regenerate\naz cosmosdb sql role assignment create\naz cosmosdb failover-priority-change\naz network vnet create\naz network vnet subnet create\naz network vnet subnet show\naz cosmosdb network-rule add\naz cosmosdb gremlin database create\naz cosmosdb gremlin graph create\n```\n\n----------------------------------------\n\nTITLE: Using Shell Variables in Azure CLI (Bash)\nDESCRIPTION: This Bash script demonstrates how to use variables in Azure CLI commands. It assigns values to variables, retrieves a value from an existing VM, and uses that value to create a new disk. The script showcases variable assignment, command output capture, and variable usage in subsequent commands.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/azure-cli-variables.md#2025-04-23_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\n# Bash script\n# Assign values to variables\nMyResourceGroup=ContosoRGforVM\nMySubscription=\"Contoso subscription\"\nvmName=VM01\n\n# Get a value for a variable based on an existing virtual machine\nosType=$(az vm get-instance-view --resource-group $MyResourceGroup \\\n   --name $vmName --subscription \"$MySubscription\" \\\n   --query 'storageProfile.osDisk.osType' --output tsv)\n\n# Create a disk of the same type by using the variable value\naz disk create --resource-group $MyResourceGroup --name DestinationDisk --size-gb 20 --os-type $osType\n```\n\n----------------------------------------\n\nTITLE: Creating a Service Principal with Password Authentication in Azure CLI\nDESCRIPTION: Creates a new service principal with a random password, assigning it the 'reader' role at the specified scope. The command outputs credentials including the password that must be saved for future authentication.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/azure-cli-sp-tutorial-2.md#2025-04-23_snippet_0\n\nLANGUAGE: azurecli\nCODE:\n```\naz ad sp create-for-rbac --name myServicePrincipalName \\\n                         --role reader \\\n                         --scopes /subscriptions/mySubscriptionId/resourceGroups/myResourceGroupName\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables in Azure CLI\nDESCRIPTION: These commands demonstrate how to set default values for common parameters like resource group, location, and output format in the Azure CLI configuration.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/get-started-tutorial-1-prepare-environment.md#2025-04-23_snippet_4\n\nLANGUAGE: azurecli\nCODE:\n```\naz config set defaults.group=<msdocs-tutorial-rg-0000000>\n```\n\nLANGUAGE: azurecli\nCODE:\n```\naz config set defaults.location=westus2 defaults.group=<msdocs-tutorial-rg-0000000>\n```\n\nLANGUAGE: azurecli\nCODE:\n```\naz config set core.output=none\n```\n\nLANGUAGE: azurecli\nCODE:\n```\naz config set core.output=json\n```\n\nLANGUAGE: azurecli\nCODE:\n```\naz init\n```\n\n----------------------------------------\n\nTITLE: Finding VM-Related Commands in Azure CLI\nDESCRIPTION: Command to search for all Azure CLI commands that contain 'vm' in their name. This helps discover relevant commands for virtual machine management.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/get-started-with-azure-cli.md#2025-04-23_snippet_1\n\nLANGUAGE: azurecli-interactive\nCODE:\n```\naz find vm\n```\n\n----------------------------------------\n\nTITLE: Creating Service Fabric Cluster and Deploying Application\nDESCRIPTION: This script shows how to create a Service Fabric cluster, create a Key Vault, and deploy an application to the cluster using the Azure CLI.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/samples-azure-cli-samples-repo.md#2025-04-23_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\naz keyvault create\naz sf application create\naz sf application delete\naz sf application list\naz sf application update\naz sf application-type create\naz sf application-type list\naz sf application-type version create\naz sf cluster create\n```\n\n----------------------------------------\n\nTITLE: Troubleshooting Azure Subscription Issues with Azure CLI\nDESCRIPTION: This script provides a series of Azure CLI commands to troubleshoot subscription-related issues. It includes commands to view the current subscription, list available subscriptions, clear the account cache, and set a new subscription.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/manage-azure-subscriptions-azure-cli.md#2025-04-23_snippet_14\n\nLANGUAGE: azurecli\nCODE:\n```\n# See what subscription you are currently using.\naz account show\n\n# Get a list of available subscriptions.\naz account list --output table\n\n# If the subscription you are seeking is not in the list\n#   close and reopen your terminal window,\n#   or logout and then sign in again.\naz logout\naz login\n\n# You can also clear your cache to refresh the\n#    available subscription list\naz account clear\naz login\n\n# Did your available subscription list change?\naz account list --output table\n\n# If the subscription you are seeking is still not in the list,\n#    contact your system administrator. You cannot change your\n#    subscription to an ID that is not in the list.\n\n# If the subscription you are seeking is now in the list,\n#   change your subscription.\naz account set --subscription 00000000-0000-0000-0000-00000000000\n```\n\n----------------------------------------\n\nTITLE: Setting Azure Subscription in Azure CLI\nDESCRIPTION: This command changes the default subscription for Azure CLI operations. It requires specifying the subscription ID or name as a parameter.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/authenticate-azure-cli.md#2025-04-23_snippet_0\n\nLANGUAGE: azurecli\nCODE:\n```\naz account set --subscription \"<subscription ID or name>\"\n```\n\n----------------------------------------\n\nTITLE: Listing and Deleting Azure Resource Groups with Azure CLI\nDESCRIPTION: This snippet demonstrates how to list resource groups in the active subscription and delete a specific resource group without waiting for the operation to complete. It uses the 'az group list' and 'az group delete' commands.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/get-started-tutorial-4-delete-resources.md#2025-04-23_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\n# Get a list of resource groups in the active subscription\naz group list --output table\n\n# Delete a resource group and do not wait for the operation to finish\naz group delete --name <msdocs-tutorial-rg-0000000> --no-wait\n```\n\n----------------------------------------\n\nTITLE: Creating an Azure Resource Group\nDESCRIPTION: Creates a new resource group in Azure with a specified name and location. Resource groups are containers that hold related resources for Azure solutions.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/manage-azure-groups-azure-cli.md#2025-04-23_snippet_1\n\nLANGUAGE: azurecli\nCODE:\n```\naz group create --name MyResourceGroup --location eastus\n```\n\n----------------------------------------\n\nTITLE: Service Principal Creation Output Example in Azure CLI\nDESCRIPTION: Example output from creating a service principal, showing the critical information needed for authentication: appId, displayName, password, and tenant. The password is only shown once and must be saved.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/azure-cli-sp-tutorial-2.md#2025-04-23_snippet_1\n\nLANGUAGE: output\nCODE:\n```\n{\n  \"appId\": \"myServicePrincipalId\",\n  \"displayName\": \"myServicePrincipalName\",\n  \"password\": \"myServicePrincipalPassword\",\n  \"tenant\": \"myOrganizationTenantId\"\n}\n```\n\n----------------------------------------\n\nTITLE: Logging in with Service Principal using Certificate in Azure CLI\nDESCRIPTION: This command shows how to log in to Azure using a service principal with a certificate. It requires the application ID, path to the certificate PEM file, and tenant ID.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/authenticate-azure-cli-service-principal.md#2025-04-23_snippet_1\n\nLANGUAGE: azurecli\nCODE:\n```\naz login --service-principal --username APP_ID --certificate /path/to/cert.pem --tenant TENANT_ID\n```\n\n----------------------------------------\n\nTITLE: Creating an Azure Service Principal Using Variables (Bash)\nDESCRIPTION: This Bash script creates a service principal with a randomly generated name and specified role and scope using variables.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/azure-cli-sp-tutorial-1.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nlet \"randomIdentifier=$RANDOM*$RANDOM\"\nservicePrincipalName=\"msdocs-sp-$randomIdentifier\"\nroleName=\"azureRoleName\"\nsubscriptionID=$(az account show --query id --output tsv)\n# Verify the ID of the active subscription\necho \"Using subscription ID $subscriptionID\"\nresourceGroup=\"myResourceGroupName\"\n\necho \"Creating SP for RBAC with name $servicePrincipalName, with role $roleName and in scopes /subscriptions/$subscriptionID/resourceGroups/$resourceGroup\"\naz ad sp create-for-rbac --name $servicePrincipalName \\\n                         --role $roleName \\\n                         --scopes /subscriptions/$subscriptionID/resourceGroups/$resourceGroup\n```\n\n----------------------------------------\n\nTITLE: Listing Available Azure CLI Extensions\nDESCRIPTION: This command displays all Azure CLI extensions provided and maintained by Microsoft in a table format for easy viewing.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/azure-cli-extensions-overview.md#2025-04-23_snippet_0\n\nLANGUAGE: azurecli\nCODE:\n```\naz extension list-available --output table\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Media Services Account and Storage\nDESCRIPTION: This script shows how to create an Azure Media Services account, create a service principal, and create a storage account using the Azure CLI.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/samples-azure-cli-samples-repo.md#2025-04-23_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\naz ams account create\naz ams account sp create\naz storage account create\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Key Vault and Storing Output in Variables in Bash\nDESCRIPTION: This snippet demonstrates how to create an Azure Key Vault and a secret in Bash, storing the command outputs in variables. It uses the $RANDOM function to generate a unique Key Vault name and shows how to capture resource IDs using the --query and --output parameters.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/get-started-tutorial-3-use-variables.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# Set your variables.\nlet \"randomIdentifier=$RANDOM*$RANDOM\"\nrgName=\"<msdocs-tutorial-rg-00000000>\"\nkvName=\"msdocs-kv-$randomIdentifier\"\nlocation=\"eastus\"\n\n# Set your default output to none\naz config set core.output=none\n\n# Create a new Azure Key Vault returning the Key Vault ID\nmyNewKeyVaultID=$(az keyvault create --name $kvName --resource-group $rgName --location $location --query id --output tsv)\necho \"My new Azure Kev Vault ID is $myNewKeyVaultID\"\n\n# Wait about 1 minute for your Key Vault creation to complete.\n\n# Create a new secret returning the secret ID\nkvSecretName=\"<myKVSecretName>\"\nkvSecretValue=\"<myKVSecretValue>\"\nmyNewSecretID=$(az keyvault secret set --vault-name $kvName --name $kvSecretName --value $kvSecretValue --query id --output tsv)\necho \"My new secret ID is $myNewSecretID\"\n\n# Reset your default output to json\naz config set core.output=json\n```\n\n----------------------------------------\n\nTITLE: Creating an Azure Service Principal with Role and Scope (PowerShell)\nDESCRIPTION: This PowerShell script creates a service principal named 'myServicePrincipalName1' with reader permissions to all resources in resource group 'myRG1'.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/azure-cli-sp-tutorial-1.md#2025-04-23_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\naz ad sp create-for-rbac --name myServicePrincipalName1 --role reader --scopes /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myRG1\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Key Vault and Storing Output in Variables in PowerShell\nDESCRIPTION: This snippet shows how to create an Azure Key Vault and a secret in PowerShell, storing the command outputs in variables. It uses the New-Guid cmdlet to generate a unique Key Vault name and demonstrates PowerShell-specific syntax for capturing command outputs.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/get-started-tutorial-3-use-variables.md#2025-04-23_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\n# Set your variables.\n$randomIdentifier=(New-Guid).ToString().Substring(0,8)\n$rgName=\"<msdocs-tutorial-rg-00000000>\"\n$kvName=\"msdocs-kv-$randomIdentifier\"\n$location=\"eastus\"\n\n# Set your default output to none\naz config set core.output=none\n\n# Create a new Azure Key Vault returning the Key Vault ID\n$myNewKeyVaultID=$(az keyvault create --name $kvName --resource-group $rgName --location $location --query id --output tsv)\necho \"My new Azure Kev Vault ID is $myNewKeyVaultID\"\n\n# Wait about 1 minute for your Key Vault creation to complete.\n\n# Create a new secret returning the secret ID\n$kvSecretName=\"<myKVSecretName>\"\n$kvSecretValue=\"<myKVSecretValue>\"\n$myNewSecretID=$(az keyvault secret set --vault-name $kvName --name $kvSecretName --value $kvSecretValue --query id --output tsv)\necho \"My new secret ID is $myNewSecretID\"\n\n# Reset your default output to json\naz config set core.output=json\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Service Principal Password in Azure CLI\nDESCRIPTION: Signs into Azure using service principal credentials with password-based authentication. Requires the appId (as username), password, and tenant ID to authenticate.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/azure-cli-sp-tutorial-2.md#2025-04-23_snippet_2\n\nLANGUAGE: azurecli\nCODE:\n```\naz login --service-principal \\\n         --username myServicePrincipalId \\\n         --password myServicePrincipalPassword \\\n         --tenant myOrganizationTenantID\n```\n\n----------------------------------------\n\nTITLE: Signing in to Azure CLI\nDESCRIPTION: Command to authenticate with Azure using the CLI. This opens a browser window for authentication or provides a device code for headless environments.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/cheat-sheet-onboarding.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\naz login\n```\n\n----------------------------------------\n\nTITLE: Updating Application Redirect URIs using Microsoft Graph API\nDESCRIPTION: This snippet shows how to use 'az rest' to interact with the Microsoft Graph API. It first retrieves an application's details and then updates its redirect URIs using GET and PATCH methods respectively.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/use-azure-cli-rest-command.md#2025-04-23_snippet_14\n\nLANGUAGE: Bash\nCODE:\n```\n# Get the application\naz rest --method GET \\\n    --uri 'https://graph.microsoft.com/v1.0/applications/b4e4d2ab-e2cb-45d5-a31a-98eb3f364001'\n\n# Update `redirectUris` for `web` property\naz rest --method PATCH \\\n    --uri 'https://graph.microsoft.com/v1.0/applications/b4e4d2ab-e2cb-45d5-a31a-98eb3f364001' \\\n    --body '{\"web\":{\"redirectUris\":[\"https://myapp.com\"]}}'\n```\n\n----------------------------------------\n\nTITLE: Creating a Service Principal with Certificate in Azure Key Vault\nDESCRIPTION: These commands create a service principal with certificate stored in Azure Key Vault. The first example creates a new certificate, while the second example uses an existing certificate.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/azure-cli-sp-tutorial-3.md#2025-04-23_snippet_3\n\nLANGUAGE: azurecli\nCODE:\n```\n# Create a service principal storing the certificate in Azure Key Vault\naz ad sp create-for-rbac --name myServicePrincipalName \\\n                         --role roleName \\\n                         --scopes /subscriptions/mySubscriptionID/resourceGroups/myResourceGroupName \\\n                         --create-cert \\\n                         --cert myCertificateName \\\n                         --keyvault myVaultName\n```\n\nLANGUAGE: azurecli\nCODE:\n```\n# Create a service principal using an existing certificate in Azure Key Vault\naz ad sp create-for-rbac --name myServicePrincipalName \\\n                         --role roleName \\\n                         --scopes /subscriptions/mySubscriptionID/resourceGroups/myResourceGroupName \\\n                         --cert myCertificateName \\\n                         --keyvault myVaultName\n```\n\n----------------------------------------\n\nTITLE: Renaming Properties in Azure CLI Query Results\nDESCRIPTION: Commands demonstrating how to rename properties in query results using the multiselect hash operator, which returns a dictionary instead of an array and allows for custom property names.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/use-azure-cli-successfully-bash.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\naz account show --query \"{SubscriptionName: name, SubscriptionId: id, UserName: user.name}\" # Rename the values returned\naz account show --query \"{SubscriptionName: name, SubscriptionId: id, UserName: user.name}\" -o table # Rename the values returned in a table\n```\n\n----------------------------------------\n\nTITLE: Signing in with a Service Principal Using Certificate Authentication in Azure CLI\nDESCRIPTION: This command shows how to sign in to Azure using a service principal with certificate authentication. The certificate must be in PEM or DER format with both the private key and certificate appended together.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/azure-cli-sp-tutorial-3.md#2025-04-23_snippet_7\n\nLANGUAGE: azurecli\nCODE:\n```\naz login --service-principal --username APP_ID --certificate /path/to/cert.pem --tenant TENANT_ID\n```\n\n----------------------------------------\n\nTITLE: Resetting Service Principal Credentials with Default JSON Output\nDESCRIPTION: This snippet shows how to reset a service principal credential using the 'az ad sp credential reset' command with the default JSON output format, which displays the new password in the console.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/format-output-azure-cli.md#2025-04-23_snippet_12\n\nLANGUAGE: azurecli\nCODE:\n```\n# reset service principal credentials using default output format (json).\naz ad sp credential reset --id myServicePrincipalID --output json\n```\n\n----------------------------------------\n\nTITLE: Creating and Managing Azure Redis Cache\nDESCRIPTION: This script demonstrates how to create, manage, and delete an Azure Redis Cache instance using the Azure CLI.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/samples-azure-cli-samples-repo.md#2025-04-23_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\naz redis create\naz redis delete\naz redis list-keys\naz redis show\n```\n\n----------------------------------------\n\nTITLE: Managing Azure Blob Storage with Azure CLI\nDESCRIPTION: Commands for uploading, listing, and copying blobs, as well as updating blob service properties in Azure Storage.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/samples-reference-group.md#2025-04-23_snippet_43\n\nLANGUAGE: CLI\nCODE:\n```\naz storage blob list\n```\n\nLANGUAGE: CLI\nCODE:\n```\naz storage blob upload\n```\n\nLANGUAGE: CLI\nCODE:\n```\naz storage blob copy start\n```\n\nLANGUAGE: CLI\nCODE:\n```\naz storage blob service-properties update\n```\n\n----------------------------------------\n\nTITLE: Creating a Service Principal with Existing Certificate as String in Azure CLI\nDESCRIPTION: This command creates a service principal using an existing certificate provided as a string. The certificate can be provided with or without the BEGIN/END CERTIFICATE lines.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/azure-cli-sp-tutorial-3.md#2025-04-23_snippet_1\n\nLANGUAGE: azurecli\nCODE:\n```\n# create a service principal with the certificate as a string\naz ad sp create-for-rbac --name myServicePrincipalName \\\n                         --role roleName \\\n                         --scopes /subscriptions/mySubscriptionID/resourceGroups/myResourceGroupName \\\n                         --cert \"MIICoT...\"\n\n# or provide -----BEGIN CERTIFICATE----- and -----END CERTIFICATE----- lines\naz ad sp create-for-rbac --name myServicePrincipalName \\\n                         --role roleName \\\n                         --scopes /subscriptions/mySubscriptionID/resourceGroups/myResourceGroupName \\\n                         --cert \"-----BEGIN CERTIFICATE-----\nMIICoT...\n-----END CERTIFICATE-----\"\n```\n\n----------------------------------------\n\nTITLE: Checking Resource Group Availability and Creating a Resource Group in Azure CLI\nDESCRIPTION: This series of commands checks if a resource group name is available, lists supported regions for your subscription, and creates a new resource group in a specified location.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/get-started-tutorial-1-prepare-environment.md#2025-04-23_snippet_1\n\nLANGUAGE: azurecli\nCODE:\n```\naz group exists --name <myUniqueRGname>\n```\n\nLANGUAGE: azurecli\nCODE:\n```\naz account list-locations --query \"[].{Region:name}\" --output table\n```\n\nLANGUAGE: azurecli\nCODE:\n```\naz group create --location <myLocation> --name <myUniqueRGname>\n```\n\n----------------------------------------\n\nTITLE: Getting Subscription Information with Azure CLI\nDESCRIPTION: Commands to display information about the current subscription or list all available subscriptions with filtering options.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/manage-azure-subscriptions-azure-cli.md#2025-04-23_snippet_2\n\nLANGUAGE: azurecli-interactive\nCODE:\n```\n# get the current default subscription using show\naz account show --output table\n\n# get the current default subscription using list\naz account list --query \"[?isDefault]\"\n\n# get a subscription that contains search words or phrases\naz account list --query \"[?contains(name,'search phrase')].{SubscriptionName:name, SubscriptionID:id, TenantID:tenantId}\" --output table\n```\n\n----------------------------------------\n\nTITLE: Using Shell Variables in Azure CLI (PowerShell)\nDESCRIPTION: This PowerShell script demonstrates how to use variables in Azure CLI commands within PowerShell. It assigns values to variables, retrieves a value from an existing VM, and uses that value to create a new disk. The script showcases variable assignment, command output capture, and variable usage in subsequent commands.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/azure-cli-variables.md#2025-04-23_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\n# PowerShell script\n# Assign values to variables\n$MyResourceGroup = \"ContosoRGforVM\"\n$MySubscription = \"Contoso subscription\"\n$vmName = \"VM01\"\n\n# Get a value for a variable based on an existing virtual machine\n$osType=$(az vm get-instance-view --resource-group $MyResourceGroup `\n   --name $vmName --subscription $MySubscription `\n   --query 'storageProfile.osDisk.osType' --output tsv)\n\n# Create a disk of the same type by using the variable value\naz disk create --resource-group $MyResourceGroup --name DestinationDisk --size-gb 20 --os-type $osType\n```\n\n----------------------------------------\n\nTITLE: Creating an Azure Service Principal with Multiple Scopes (Bash)\nDESCRIPTION: This Bash script creates a service principal named 'myServicePrincipalName2' with reader permissions to all resources in resource group 'myRG1' and to a specific VM in 'myRG2'.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/azure-cli-sp-tutorial-1.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\naz ad sp create-for-rbac --name myServicePrincipalName2 \\\n                            --role reader \\\n                            --scopes /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myRG1 /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myRG2/providers/Microsoft.Compute/virtualMachines/myVM\n```\n\n----------------------------------------\n\nTITLE: Creating Azure CLI Alias Command with Arguments\nDESCRIPTION: Demonstrates creating an alias command that accepts positional arguments to get a VM's public IP address.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/azure-cli-extension-alias.md#2025-04-23_snippet_5\n\nLANGUAGE: azurecli\nCODE:\n```\naz alias create \\\n    --name \"get-vm-ip {{ resourceGroup }} {{ vmName }}\" \\\n    --command \"vm list-ip-addresses --resource-group {{ resourceGroup }} --name {{ vmName }}\n        --query [0].virtualMachine.network.publicIpAddresses[0].ipAddress\"\n```\n\n----------------------------------------\n\nTITLE: Secure Service Principal Login in Bash\nDESCRIPTION: This Bash script demonstrates a secure way to log in with a service principal by reading the password securely without displaying it on the console. It uses the 'read -s' command to capture the password.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/authenticate-azure-cli-service-principal.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nread -sp \"Azure password: \" AZ_PASS && echo && az login --service-principal --username <app-id> --password $AZ_PASS --tenant <tenant>\n```\n\n----------------------------------------\n\nTITLE: Creating Resource Group with Bash Variables in Azure CLI\nDESCRIPTION: Creates an Azure resource group using Bash shell variables. Sets variables for resource group name and location, then creates the group using az group create command.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/azure-cli-vm-tutorial-1.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# create Bash shell variables\nresourceGroup=VMTutorialResources\nlocation=eastus\n\naz group create --name $resourceGroup --location $location\n```\n\n----------------------------------------\n\nTITLE: Uploading a File to Azure Storage Blob\nDESCRIPTION: This script shows how to upload a file to an Azure Storage blob using the Azure CLI.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/samples-azure-cli-samples-repo.md#2025-04-23_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\naz storage blob upload\n```\n\n----------------------------------------\n\nTITLE: Azure Virtual Network Management Commands\nDESCRIPTION: Commands for managing Azure Virtual Networks, including VNet creation, subnet management, and network security configurations.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/samples-reference-group.md#2025-04-23_snippet_33\n\nLANGUAGE: azure-cli\nCODE:\n```\naz network vnet create\naz network vnet list-endpoint-services\naz network vnet subnet create\naz network vnet subnet show\naz network vnet subnet update\n```\n\n----------------------------------------\n\nTITLE: Storing Multiple Azure CLI Output Values in PowerShell Variables\nDESCRIPTION: PowerShell approach for capturing multiple values from Azure CLI output by splitting the TSV output into separate variables.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/azure-cli-vm-tutorial-5.md#2025-04-23_snippet_4\n\nLANGUAGE: azurecli\nCODE:\n```\n$output = az network nic show --ids $nicId --query \"[ipConfigurations[].publicIPAddress.id, ipConfigurations[].subnet.id]\" -o tsv\n\n# Split the output into two variables\n$ipId, $subnetId = $output -split \"`t\"\n```\n\n----------------------------------------\n\nTITLE: Authenticating with User-Assigned Managed Identity in Azure CLI\nDESCRIPTION: Signs into Azure using a specific user-assigned managed identity by providing its identifier. The identity can be specified using either the client ID, object ID, or resource ID of the managed identity.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/authenticate-azure-cli-managed-identity.md#2025-04-23_snippet_1\n\nLANGUAGE: azurecli\nCODE:\n```\naz login --identity --username <client_id|object_id|resource_id>\n```\n\n----------------------------------------\n\nTITLE: Conditional Resource Group Creation in Azure CLI Bash Scripts\nDESCRIPTION: This snippet shows how to use an If-Then statement to create a new resource group only if one with the specified name doesn't already exist. It uses the az group exists command to check for the existence of the resource group.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/use-azure-cli-successfully-bash.md#2025-04-23_snippet_13\n\nLANGUAGE: azurecli\nCODE:\n```\nif [ $(az group exists --name $resourceGroup) = false ]; then \n   az group create --name $resourceGroup --location \"$location\" \nelse\n   echo $resourceGroup\nfi\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Service Principal with RBAC using PowerShell and Azure CLI\nDESCRIPTION: This script creates an Azure service principal with role-based access control (RBAC) using a combination of PowerShell commands and Azure CLI. It generates a random identifier, sets up variables for the service principal name, role, subscription ID, and resource group, then uses the 'az ad sp create-for-rbac' command to create the service principal.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/azure-cli-sp-tutorial-1.md#2025-04-23_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\n# PowerShell script\n$randomIdentifier = (New-Guid).ToString().Substring(0,8)\n$servicePrincipalName=\"msdocs-sp-$randomIdentifier\"\n$roleName=\"azureRoleName\"\n$subscriptionID=$(az account show --query id --output tsv)\n$resourceGroup=\"myResourceGroupName\"\necho \"Creating SP for RBAC with name $servicePrincipalName, with role $roleName and in scopes /subscriptions/$subscriptionID/resourceGroups/$resourceGroup\"\n\naz ad sp create-for-rbac --name $servicePrincipalName --role $roleName --scopes /subscriptions/$subscriptionID/resourceGroups/$resourceGroup\n```\n\n----------------------------------------\n\nTITLE: Creating a Storage Account in a Resource Group\nDESCRIPTION: Creates an Azure Storage account within a specified resource group. This example includes parameters for the storage account name, location, and SKU type.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/manage-azure-groups-azure-cli.md#2025-04-23_snippet_4\n\nLANGUAGE: azurecli\nCODE:\n```\naz storage account create --resource-group MyResourceGroup --name storage134 --location eastus --sku Standard_LRS\n```\n\n----------------------------------------\n\nTITLE: Getting Help for VM Creation in Azure CLI\nDESCRIPTION: Command to display detailed help information for creating virtual machines, including required parameters, authentication options, and usage examples.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/get-started-with-azure-cli.md#2025-04-23_snippet_4\n\nLANGUAGE: azurecli-interactive\nCODE:\n```\naz vm create --help\n```\n\n----------------------------------------\n\nTITLE: Installing Azure CLI via Installation Script on Debian/Ubuntu\nDESCRIPTION: One-command installation of Azure CLI using a script maintained by the Azure CLI team. This script downloads and runs all installation commands in a single step.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/cli-install-linux-apt.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash\n```\n\n----------------------------------------\n\nTITLE: Using the --verbose Parameter with Azure CLI\nDESCRIPTION: Shows how to get more detailed information about command execution by adding the --verbose parameter, which provides additional context such as execution time for troubleshooting.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/azure-cli-global-parameters.md#2025-04-23_snippet_1\n\nLANGUAGE: azurecli\nCODE:\n```\naz group create --name myResourceGroup --location eastus --verbose\n```\n\n----------------------------------------\n\nTITLE: Formatting Azure CLI Output as Table in Bash\nDESCRIPTION: Command to format Azure CLI output as an ASCII table, which provides a more readable format for high-level information but excludes nested objects.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/use-azure-cli-successfully-bash.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\naz account show --output table\n```\n\n----------------------------------------\n\nTITLE: Listing Azure Storage Account Keys with Azure CLI\nDESCRIPTION: This command retrieves the access keys for an Azure Storage account. It requires the resource group name and the storage account name.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/azure-cli-sp-tutorial-6.md#2025-04-23_snippet_3\n\nLANGUAGE: azurecli\nCODE:\n```\naz storage account keys list --resource-group myResourceGroupName \\\n                                 --account-name myStorageAccountName\n```\n\n----------------------------------------\n\nTITLE: Managing MySQL Flexible Server with Azure CLI\nDESCRIPTION: Commands for managing Azure Database for MySQL Flexible Server instances including restore, show, start, stop, and update operations.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/samples-reference-group.md#2025-04-23_snippet_30\n\nLANGUAGE: azure-cli\nCODE:\n```\naz mysql flexible-server restore\naz mysql flexible-server show\naz mysql flexible-server start\naz mysql flexible-server stop\naz mysql flexible-server update\n```\n\n----------------------------------------\n\nTITLE: Deleting Multiple Azure Storage Accounts Using Bash Script\nDESCRIPTION: This Bash script lists all storage accounts in a specified resource group, then deletes those with names starting with 'msdocs' using a for-each loop. It demonstrates the use of Azure CLI commands within a Bash script for bulk resource management.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/get-started-tutorial-4-delete-resources.md#2025-04-23_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\n# Set your resource group variable\nrgName=\"<msdocs-tutorial-rg-0000000>\"\n\n# Get the name of all storage accounts in a resource group.\naz storage account list --resource-group $rgName \\\n    --query \"[].{Name:name}\" \\\n    --output table\n\n# Delete storage accounts without a confirmation prompt.\nfor saList in $(az storage account list --resource-group $rgName \\\n    --query \"[?starts_with(name, 'msdocs') == \\`true\\`].id\" \\\n    --output tsv); do\n    echo \"deleting storage account $saList\"\n    az storage account delete --ids $saList --yes\ndone\n\n# Verify the storage accounts are gone.\naz storage account list --resource-group $rgName \\\n    --query \"[?starts_with(name, 'msdocs') == \\`true\\`].name\"\n```\n\n----------------------------------------\n\nTITLE: Installing Azure CLI Extensions from External Source\nDESCRIPTION: This command installs an Azure CLI extension from an external URL or local path. The extension must be a compiled Python wheel file.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/azure-cli-extensions-overview.md#2025-04-23_snippet_2\n\nLANGUAGE: azurecli\nCODE:\n```\naz extension add --source <URL-or-path>\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Storage Account in Azure CLI Bash Scripts\nDESCRIPTION: This snippet shows how to create an Azure Storage Account using az storage account create command. It uses previously defined variables for the account name, location, and resource group.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/use-azure-cli-successfully-bash.md#2025-04-23_snippet_17\n\nLANGUAGE: azurecli\nCODE:\n```\nstorageAccount=\"learnbash$randomIdentifier\"\naz storage account create --name $storageAccount --location \"$location\" --resource-group $resourceGroup --sku Standard_LRS --encryption-services blob\n```\n\n----------------------------------------\n\nTITLE: Managing Azure Storage Account Keys with Azure CLI\nDESCRIPTION: Commands for listing and rotating Azure Storage account access keys, which are used to authenticate access to the storage account.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/samples-reference-group.md#2025-04-23_snippet_42\n\nLANGUAGE: CLI\nCODE:\n```\naz storage account keys list\n```\n\nLANGUAGE: CLI\nCODE:\n```\naz storage account keys renew\n```\n\n----------------------------------------\n\nTITLE: Querying VM Network Interface ID with Azure CLI (PowerShell)\nDESCRIPTION: This PowerShell command retrieves the network interface controller (NIC) object ID of a VM using a JMESPath query. It's the PowerShell equivalent of the Bash command, demonstrating cross-platform compatibility.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/azure-cli-vm-tutorial-4.md#2025-04-23_snippet_2\n\nLANGUAGE: azurecli\nCODE:\n```\naz vm show --name $vmName `\n    --resource-group $resourceGroup `\n    --query 'networkProfile.networkInterfaces[].id' `\n    --output tsv\n```\n\n----------------------------------------\n\nTITLE: Creating a Service Principal with Certificate File in Azure CLI\nDESCRIPTION: This command creates a service principal using an existing certificate file. The file path is specified using the @ symbol prefix.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/azure-cli-sp-tutorial-3.md#2025-04-23_snippet_2\n\nLANGUAGE: azurecli\nCODE:\n```\n# create a service principal with the certificate file location\naz ad sp create-for-rbac --name myServicePrincipalName \\\n                         --role roleName \\\n                         --scopes /subscriptions/mySubscriptionID/resourceGroups/myResourceGroupName \\\n                         --cert @/path/to/cert.pem\n```\n\n----------------------------------------\n\nTITLE: Assigning VM IDs to a Variable in Bash\nDESCRIPTION: This snippet demonstrates how to assign the list of running VM IDs to a variable using the az vm list command with query and output formatting.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/use-azure-cli-successfully-tips.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# assign the list of running VMs to a variable\nrunning_vm_ids=$(az vm list --resource-group MyResourceGroup --show-details \\\n    --query \"[?powerState=='VM running'].id\" --output tsv)\n\n# verify the value of the variable\necho $running_vm_ids\n```\n\n----------------------------------------\n\nTITLE: Configuring Behavior After Dynamic Installation\nDESCRIPTION: This command changes the default behavior to make commands exit without running after dynamic installation of extensions.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/azure-cli-extensions-overview.md#2025-04-23_snippet_7\n\nLANGUAGE: azurecli\nCODE:\n```\naz config set extension.run_after_dynamic_install=no\n```\n\n----------------------------------------\n\nTITLE: Creating a Virtual Network with Subnet using PowerShell in Azure CLI\nDESCRIPTION: Creates a virtual network named TutorialVNet1 with address prefix 10.0.0.0/16 and a subnet named TutorialSubnet1 with address prefix 10.0.0.0/24 using PowerShell variables and the az network vnet create command.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/azure-cli-vm-tutorial-2.md#2025-04-23_snippet_1\n\nLANGUAGE: azurecli-interactive\nCODE:\n```\n# create PowerShell variables\n$vnetName = \"TutorialVNet1\"\n$subnetName = \"TutorialSubnet1\"\n$vnetAddressPrefix = \"10.0.0.0/16\"\n$subnetAddressPrefix = \"10.0.0.0/24\"\n\n# Use the existing resource group\n$resourceGroup = \"VMTutorialResources\"\n\n# Create a virtual network and subnet\naz network vnet create `\n  --name $vnetName `\n  --resource-group $resourceGroup `\n  --address-prefixes $vnetAddressPrefix `\n  --subnet-name $subnetName `\n  --subnet-prefixes $subnetAddressPrefix\n```\n\n----------------------------------------\n\nTITLE: Managing Azure Batch Pools and Tasks with Azure CLI\nDESCRIPTION: This section covers Azure CLI commands for managing Batch pools, including creating, resizing, and showing pool details, as well as creating and managing tasks within pools.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/samples-reference-group.md#2025-04-23_snippet_1\n\nLANGUAGE: azure-cli\nCODE:\n```\naz batch node reboot\naz batch pool autoscale disable\naz batch pool autoscale enable\naz batch pool create\naz batch pool resize\naz batch pool set\naz batch pool show\naz batch pool supported-images list\naz batch task create\naz batch task show\n```\n\n----------------------------------------\n\nTITLE: Azure Front Door Configuration Commands\nDESCRIPTION: Commands for managing Azure Front Door resources including creation, frontend endpoint configuration, and routing rules.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/samples-reference-group.md#2025-04-23_snippet_32\n\nLANGUAGE: azure-cli\nCODE:\n```\naz network front-door create\naz network front-door frontend-endpoint create\naz network front-door frontend-endpoint enable-https\naz network front-door routing-rule create\naz network front-door routing-rule update\naz network front-door waf-policy create\n```\n\n----------------------------------------\n\nTITLE: Retrieving Azure Storage Account Keys in Azure CLI Bash Scripts\nDESCRIPTION: This snippet demonstrates how to retrieve Azure Storage Account keys using az storage account keys list command. It shows different ways to query the keys and store them in variables for later use.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/use-azure-cli-successfully-bash.md#2025-04-23_snippet_18\n\nLANGUAGE: azurecli\nCODE:\n```\naz storage account keys list --resource-group $resourceGroup --account-name $storageAccount --query \"[].value\" -o tsv # returns both storage account key values\n\naz storage account keys list --resource-group $resourceGroup --account-name $storageAccount --query \"[0].value\" -o tsv # returns a single storage account key value\n\naccountKey=$(az storage account keys list --resource-group $resourceGroup --account-name $storageAccount --query \"[0].value\" -o tsv)\n\necho $accountKey\n```\n\n----------------------------------------\n\nTITLE: Creating an Azure Storage Account with Azure CLI\nDESCRIPTION: This command creates a new Azure Storage account. It specifies the account name, resource group, storage kind, SKU, location, and uses the '--yes' flag to skip confirmation prompts.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/azure-cli-sp-tutorial-6.md#2025-04-23_snippet_2\n\nLANGUAGE: azurecli\nCODE:\n```\naz storage account create --name myStorageAccountName \\\n                              --resource-group myResourceGroupName \\\n                              --kind <KIND> \\\n                              --sku F0 \\\n                              --location westus \\\n                              --yes\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Storage Account in PowerShell\nDESCRIPTION: This PowerShell script creates an Azure storage account using variables, random identifiers, and demonstrates PowerShell-specific syntax for line continuation and variable usage.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/get-started-tutorial-2-environment-syntax.md#2025-04-23_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\n# Variable block\n$randomIdentifier = (New-Guid).ToString().Substring(0,8)\n$location=\"eastus\"\n$resourceGroup=\"<msdocs-tutorial-rg-00000000>\"\n$storageAccount=\"msdocssa$randomIdentifier\"\n\n# Create a storage account.\necho \"Creating storage account $storageAccount in resource group $resourceGroup\"\naz storage account create --name $storageAccount `\n                          --resource-group $resourceGroup `\n                          --location $location `\n                          --sku Standard_RAGRS `\n                          --kind StorageV2 `\n                          --output json\n```\n\n----------------------------------------\n\nTITLE: Deleting All Virtual Machines in a Resource Group Using Azure CLI\nDESCRIPTION: This script deletes all Virtual Machines in a specified resource group using the force-deletion-types parameter. It's a concise way to remove all VMs without deleting other resources in the group.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/delete-azure-resources-at-scale.md#2025-04-23_snippet_2\n\nLANGUAGE: azurecli\nCODE:\n```\n# Set your resource group variable\nrgName=<msdocs-rg-0000000>\n\naz group delete -n $rgName --force-deletion-types Microsoft.Compute/virtualMachines\n```\n\n----------------------------------------\n\nTITLE: Basic Azure CLI Login\nDESCRIPTION: Simple interactive login command for Azure CLI that uses WAM on Windows and browser-based login on Linux/macOS.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/authenticate-azure-cli-interactively.md#2025-04-23_snippet_0\n\nLANGUAGE: azurecli\nCODE:\n```\naz login\n```\n\n----------------------------------------\n\nTITLE: Creating and Managing Azure SQL Managed Instances with Azure CLI\nDESCRIPTION: Commands for creating, showing, and updating Azure SQL Managed Instances, which provide a fully managed SQL Server instance in the Azure cloud.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/samples-reference-group.md#2025-04-23_snippet_36\n\nLANGUAGE: CLI\nCODE:\n```\naz sql mi create\n```\n\nLANGUAGE: CLI\nCODE:\n```\naz sql mi show\n```\n\nLANGUAGE: CLI\nCODE:\n```\naz sql mi update\n```\n\n----------------------------------------\n\nTITLE: Using Azure CLI Query and Output Arguments\nDESCRIPTION: Demonstrates the use of --query and --output arguments in Azure CLI to capture data and store it in shell variables. These arguments are crucial for data manipulation and storage in CLI operations.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/azure-cli-vm-tutorial-7.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nYou learned how to create a VM that's connected to a VNet, used the `--query` and `--output` arguments\nto capture data to be stored in shell variables, and looked at some of the resources that get created for Azure VMs.\n```\n\n----------------------------------------\n\nTITLE: Getting a VM's Public IP Address in Bash\nDESCRIPTION: Extracts the VM's public IP address from the IP address ID and stores it in a Bash variable using TSV output format.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/azure-cli-vm-tutorial-5.md#2025-04-23_snippet_6\n\nLANGUAGE: azurecli\nCODE:\n```\nvmIpAddress=$(az network public-ip show --ids $ipId \\\n  --query ipAddress \\\n  -o tsv)\n```\n\n----------------------------------------\n\nTITLE: Looping Through VM List in PowerShell\nDESCRIPTION: This PowerShell script shows how to loop through a list of running VM IDs and stop each VM individually using the Azure CLI. It provides output for each VM being stopped.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/use-azure-cli-successfully-tips.md#2025-04-23_snippet_12\n\nLANGUAGE: powershell\nCODE:\n```\n$vm_ids=(az vm list --resource-group VMResources --show-details --query \"[?powerState=='VM running'].id\" --output tsv)\nforeach ($vm_id in $vm_ids) {\n    Write-Output \"Stopping $vm_id\"\n    az vm stop --ids $vm_id\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Simple Azure CLI Alias Commands\nDESCRIPTION: Demonstrates creating aliases for shortening existing command groups and commands.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/azure-cli-extension-alias.md#2025-04-23_snippet_3\n\nLANGUAGE: azurecli\nCODE:\n```\naz alias create --name rg --command group\naz alias create --name ls --command list\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Resources in PowerShell\nDESCRIPTION: A PowerShell script that creates an Azure resource group and storage account with randomized identifiers. Uses PowerShell-specific syntax with variable declaration and backtick for line continuation.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/use-azure-cli-successfully-powershell.md#2025-04-23_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n# PowerShell syntax example\n\n# Variable block\n$randomIdentifier = $(Get-Random)\n$location=\"eastus\"\n$resourceGroup=\"msdocs-test-rg-$randomIdentifier\"\n$storageAccount=\"msdocssa$randomIdentifier\"\n\n# Create a resource group.\naz group create --name $resourceGroup --location $location\n\n# Create a storage account.\necho \"Creating storage account $storageAccount in resource group $resourceGroup\"\naz storage account create --name $storageAccount `\n    --resource-group $resourceGroup `\n    --location $location `\n    --sku Standard_RAGRS `\n    --kind StorageV2 `\n    --output json\n```\n\n----------------------------------------\n\nTITLE: Managing Azure Communication Services Email Resources with Azure CLI\nDESCRIPTION: This snippet shows Azure CLI commands for creating and managing email resources in Azure Communication Services, including domain verification and sender management.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/samples-reference-group.md#2025-04-23_snippet_4\n\nLANGUAGE: azure-cli\nCODE:\n```\naz communication create\naz communication delete\naz communication email create\naz communication email delete\naz communication email domain cancel-verification\naz communication email domain create\naz communication email domain delete\naz communication email domain initiate-verification\naz communication email domain list\naz communication email domain sender-username create\n```\n\n----------------------------------------\n\nTITLE: Azure Network DNS Management Commands\nDESCRIPTION: Commands for managing Azure DNS records including A records, CNAME records, and TXT records.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/samples-reference-group.md#2025-04-23_snippet_31\n\nLANGUAGE: azure-cli\nCODE:\n```\naz network dns record-set a create\naz network dns record-set cname create\naz network dns record-set cname set-record\naz network dns record-set txt add-record\naz network dns record-set txt create\n```\n\n----------------------------------------\n\nTITLE: Creating an Azure Service Principal with Role and Scope (Bash)\nDESCRIPTION: This Bash script creates a service principal named 'myServicePrincipalName1' with reader permissions to all resources in resource group 'RG1'.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/azure-cli-sp-tutorial-1.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\naz ad sp create-for-rbac --name myServicePrincipalName1 \\\n                            --role reader \\\n                            --scopes /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myRG1\n```\n\n----------------------------------------\n\nTITLE: Azure Storage Management Scripts\nDESCRIPTION: Scripts for managing Azure Storage accounts including container operations, blob management, and key rotation\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/samples-azure-cli-samples-repo.md#2025-04-23_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\naz storage account create\naz storage account keys list\naz storage blob list\naz storage blob upload-batch\naz storage container create\n```\n\n----------------------------------------\n\nTITLE: Conditional Resource Group Deletion in Azure CLI Bash Scripts\nDESCRIPTION: This snippet demonstrates how to use an If-Then statement to delete an existing resource group if one with the specified name already exists. It uses the az group exists command to check for the existence of the resource group.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/use-azure-cli-successfully-bash.md#2025-04-23_snippet_14\n\nLANGUAGE: azurecli\nCODE:\n```\nif [ $(az group exists --name $resourceGroup) = true ]; then \n   az group delete --name $resourceGroup -y # --no-wait\nelse\n   echo The $resourceGroup resource group does not exist\nfi\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Container Registry with az rest in Bash\nDESCRIPTION: This snippet shows a complete example of using az rest with the PUT method in a Bash environment to create an Azure Container Registry. It includes variable initialization, resource group creation, and the REST API call with proper parameters.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/use-azure-cli-rest-command.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Variable block\nlet \"randomIdentifier=$RANDOM*$RANDOM\"\nsubscriptionId=\"00000000-0000-0000-0000-000000000000\"\nresourceGroup=\"msdocs-app-rg$randomIdentifier\"\ncontainerRegistryName=\"msdocscr$randomIdentifier\"\nlocationName=\"westus\"\nskuName=\"Standard\"\npropertyValue=\"true\"\n\n# Create resource group\naz group create --name $resourceGroup --location $locationName --output json\n\n# Invoke request\naz rest --method put \\\n    --url https://management.azure.com/subscriptions/$subscriptionId/resourceGroups/$resourceGroup/providers/Microsoft.ContainerRegistry/registries/$containerRegistryName?api-version=2023-01-01-preview \\\n    --body \"{'location': '$locationName', 'sku': {'name': '$skuName'}, 'properties': {'adminUserEnabled': '$propertyValue'}}\"\n```\n\n----------------------------------------\n\nTITLE: Managing Azure SQL Database Failover Groups with Azure CLI\nDESCRIPTION: Commands for configuring, updating, and managing failover groups for Azure SQL databases, which provide disaster recovery capabilities across regions.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/samples-reference-group.md#2025-04-23_snippet_35\n\nLANGUAGE: CLI\nCODE:\n```\naz sql failover-group update\n```\n\n----------------------------------------\n\nTITLE: Deleting Azure Resource Groups by Name Using Azure CLI\nDESCRIPTION: This script lists and deletes resource groups that start with a given word. It sets the subscription, defines a log file location, queries for resource groups, and then deletes them without confirmation. The progress is logged to a file.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/delete-azure-resources-at-scale.md#2025-04-23_snippet_0\n\nLANGUAGE: azurecli\nCODE:\n```\n# Set your subscription\nsubscriptionID=00000000-0000-0000-0000-00000000\naz account set --subscription $subscriptionID\n\n# Set your log file location\nlogFileLocation=\"myLogName.txt\"\n\n# Get the name of all resource groups that start with 'msdocs'\naz group list --query \"[?starts_with(name, 'msdocs') == \\`true\\`].name\" -o table\n\n# Delete resource groups without a confirmation prompt (--yes)\n# Do not wait for the operation to finish (--no-wait)\necho \"Deleting resource groups\">$logFileLocation\nfor rgList in $(az group list --query \"[?starts_with(name, 'msdocs') == \\`true\\`].name\" -o tsv); \ndo\n    echo \"deleting resource group $rgList\">>$logFileLocation\n    az group delete --name $rgList --yes --no-wait\ndone\n\n# read your log file with Linux \"cat\" command\nclear\ncat $logFileLocation\n```\n\n----------------------------------------\n\nTITLE: Deleting Azure Resource Group\nDESCRIPTION: Removes all resources in a specified resource group asynchronously. The --no-wait parameter allows the command to return immediately without waiting for deletion to complete.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/azure-cli-vm-tutorial-6.md#2025-04-23_snippet_0\n\nLANGUAGE: azurecli\nCODE:\n```\naz group delete --name $resourceGroup --no-wait\n```\n\n----------------------------------------\n\nTITLE: Assigning NIC ID to Shell Variable in Bash\nDESCRIPTION: This Bash script retrieves the network interface ID of a VM and assigns it to a shell variable. It demonstrates how to combine Azure CLI commands with shell scripting.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/azure-cli-vm-tutorial-4.md#2025-04-23_snippet_3\n\nLANGUAGE: azurecli\nCODE:\n```\nnicId=$(az vm show \\\n  -n $vmName \\\n  -g $resourceGroup \\\n  --query 'networkProfile.networkInterfaces[].id' \\\n  -o tsv)\n```\n\n----------------------------------------\n\nTITLE: Virtual Machine Management Scripts\nDESCRIPTION: Scripts for managing Azure VMs including disk operations, snapshots, and VM creation\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/samples-azure-cli-samples-repo.md#2025-04-23_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\naz account set\naz disk create\naz disk show\naz vm create\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Container Registry with az rest in PowerShell\nDESCRIPTION: This snippet demonstrates using az rest with the PUT method in a PowerShell environment to create an Azure Container Registry. It includes variable initialization, resource group creation, and the REST API call with proper PowerShell-specific syntax.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/use-azure-cli-rest-command.md#2025-04-23_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n# Variable block\n$randomIdentifier = (New-Guid).ToString().Substring(0,8)\n$subscriptionId=\"00000000-0000-0000-0000-000000000000\"\n$resourceGroup=\"msdocs-app-rg$randomIdentifier\"\n$containerRegistryName=\"msdocscr$randomIdentifier\"\n$locationName=\"westus\"\n$skuName=\"Standard\"\n$propertyValue=\"true\"\n\n# Create resource group\naz group create --name $resourceGroup --location $locationName --output json\n\n# Invoke request\naz rest --method put `\n     --url https://management.azure.com/subscriptions/$subscriptionId/resourceGroups/$resourceGroup/providers/Microsoft.ContainerRegistry/registries/${containerRegistryName}?api-version=2023-01-01-preview `\n     --body \"{'location': '$locationName', 'sku': {'name': '$skuName'}, 'properties': {'adminUserEnabled': '$propertyValue'}}\"\n```\n\n----------------------------------------\n\nTITLE: Displaying VM List in JSON Format (Azure CLI)\nDESCRIPTION: This command lists all virtual machines in a subscription using the default JSON output format. JSON is the default format for Azure CLI commands.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/format-output-azure-cli.md#2025-04-23_snippet_0\n\nLANGUAGE: azurecli\nCODE:\n```\naz vm list --output json\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Multiple Resource Groups\nDESCRIPTION: Removes multiple resource groups and all their contained resources. This example shows how to delete three different resource groups with separate commands.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/manage-azure-groups-azure-cli.md#2025-04-23_snippet_11\n\nLANGUAGE: azurecli\nCODE:\n```\naz group delete --name MyResourceGroup\naz group delete --name OtherResourceGroup\naz group delete --name StorageGroups\n```\n\n----------------------------------------\n\nTITLE: Creating a JSON Configuration File for Azure Environments\nDESCRIPTION: This JSON file contains configuration data for different Azure environments (dev, stg, prod) including IDs and Key Vault secret names.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/get-started-tutorial-3-use-variables.md#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"environments\": {\n    \"dev\": [\n      {\n        \"id\": \"1\",\n        \"kv-secretName\": \"dev1SecretName\",\n        \"status\": \"inactive\",\n      },\n      {\n        \"id\": \"2\",\n        \"kv-secretName\": \"dev2SecretName\",\n        \"status\": \"active\"\n      }\n    ],\n    \"stg\": {\n      \"id\": \"3\",\n      \"kv-secretName\": \"dev3SecretName\"\n    },\n    \"prod\": {\n      \"id\": \"4\",\n      \"kv-secretName\": \"dev4SecretName\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: SQL Database Management Scripts\nDESCRIPTION: Collection of scripts for managing Azure SQL databases including backup, restore, failover groups, and monitoring operations\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/samples-azure-cli-samples-repo.md#2025-04-23_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\naz sql db create\naz sql db export\naz sql server create\naz sql server firewall-rule create\naz storage account create\naz storage account keys list\naz storage container create\n```\n\n----------------------------------------\n\nTITLE: Deleting Azure Resource Group if Exists in Azure CLI\nDESCRIPTION: This snippet shows how to check if a resource group exists and delete it if it does. It uses the az group exists command to check existence and az group delete to remove the resource group asynchronously.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/use-azure-cli-successfully-bash.md#2025-04-23_snippet_29\n\nLANGUAGE: azurecli\nCODE:\n```\nif [ $(az group exists --name $resourceGroup) = true ]; then \n   az group delete --name $resourceGroup -y  --no-wait\nelse\n   echo The $resourceGroup resource group does not exist\nfi\n```\n\n----------------------------------------\n\nTITLE: Using az init for Interactive Configuration\nDESCRIPTION: The az init command provides an interactive way to set Azure CLI configurations. It offers common presets like \"interaction\" or \"automation\" and walks users through individual configuration options with explanations.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/azure-cli-configuration.md#2025-04-23_snippet_0\n\nLANGUAGE: azurecli-interactive\nCODE:\n```\naz init\n```\n\n----------------------------------------\n\nTITLE: Updating an Azure Container Registry using PATCH in Bash\nDESCRIPTION: This snippet demonstrates how to update an existing Azure Container Registry using the PATCH HTTP method in a Bash environment. It updates the SKU from Standard to Premium while maintaining other properties.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/use-azure-cli-rest-command.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n#Variable Block\n$skuName=\"Premium\"\n\naz rest --method patch \\\n    --url https://management.azure.com/subscriptions/$subscriptionId/resourceGroups/$resourceGroup/providers/Microsoft.ContainerRegistry/registries/$containerRegistryName?api-version=2023-01-01-preview \\\n    --body \"{'location': '$locationName', 'sku': {'name': '$skuName'}, 'properties': {'adminUserEnabled': '$propertyValue'}}\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Access Tokens with Azure CLI\nDESCRIPTION: This snippet demonstrates how to use the 'az account get-access-token' command to retrieve access tokens for the active subscription or a specific subscription in Azure CLI.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/refresh-token.md#2025-04-23_snippet_0\n\nLANGUAGE: azurecli\nCODE:\n```\n# get access token for the active subscription\naz account get-access-token\n\n# get access token for a specific subscription\naz account get-access-token --subscription \"<subscription ID or name>\"\n```\n\n----------------------------------------\n\nTITLE: Using Grep to Check and Create Resource Groups in Azure CLI Bash Scripts\nDESCRIPTION: This snippet shows how to use the grep command with Azure CLI to check if a resource group exists and create it if it doesn't. It pipes the output of az group list to grep and uses the || operator to execute the creation command if grep doesn't find a match.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/use-azure-cli-successfully-bash.md#2025-04-23_snippet_15\n\nLANGUAGE: azurecli\nCODE:\n```\naz group list --output tsv | grep $resourceGroup -q || az group create --name $resourceGroup --location \"$location\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Azure Container Registry Information with GET in Bash\nDESCRIPTION: This snippet demonstrates how to retrieve information about an Azure Container Registry using the GET HTTP method in a Bash environment. It uses variables set in previous steps to construct the request URL.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/use-azure-cli-rest-command.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\naz rest --method get \\\n    --url https://management.azure.com/subscriptions/$subscriptionId/resourceGroups/$resourceGroup/providers/Microsoft.ContainerRegistry/registries/$containerRegistryName?api-version=2023-01-01-preview \n```\n\n----------------------------------------\n\nTITLE: Traffic Manager Configuration Scripts\nDESCRIPTION: Scripts for configuring Azure Traffic Manager profiles and endpoints for application availability\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/samples-azure-cli-samples-repo.md#2025-04-23_snippet_27\n\nLANGUAGE: bash\nCODE:\n```\naz appservice plan create\naz network traffic-manager endpoint create\naz network traffic-manager profile create\naz webapp create\naz webapp deployment source config\naz webapp show\n```\n\n----------------------------------------\n\nTITLE: Listing Azure Subscription Locks with Azure CLI\nDESCRIPTION: This command lists all the locks on the current Azure subscription using the az account lock list command, with the output formatted as a table for easy reading.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/manage-azure-subscriptions-azure-cli.md#2025-04-23_snippet_11\n\nLANGUAGE: azurecli\nCODE:\n```\naz account lock list --output table\n```\n\n----------------------------------------\n\nTITLE: Filtering VMs by SSD Storage Type with JMESPath in Azure CLI\nDESCRIPTION: This command lists virtual machines that use SSD storage. It first projects the VM name and storage account type, then filters the results to only include VMs where the storage type contains 'SSD'.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/query-azure-cli-examples.md#2025-04-23_snippet_6\n\nLANGUAGE: azurecli\nCODE:\n```\naz vm list --resource-group QueryDemo --query \"[].{Name:name, Storage:storageProfile.osDisk.managedDisk.storageAccountType} | [? contains(Storage,'SSD')]\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Certificate from Azure Key Vault and Converting to PEM Format\nDESCRIPTION: This command sequence retrieves a certificate with its private key from Azure Key Vault and converts it to PEM format using OpenSSL.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/azure-cli-sp-tutorial-3.md#2025-04-23_snippet_4\n\nLANGUAGE: azurecli\nCODE:\n```\naz keyvault secret download --file /path/to/cert.pfx \\\n                            --vault-name VaultName \\\n                            --name CertName \\\n                            --encoding base64\nopenssl pkcs12 -in cert.pfx -passin pass: -passout pass: -out cert.pem -nodes\n```\n\n----------------------------------------\n\nTITLE: Creating a Virtual Network with Subnet using Bash in Azure CLI\nDESCRIPTION: Creates a virtual network named TutorialVNet1 with address prefix 10.0.0.0/16 and a subnet named TutorialSubnet1 with address prefix 10.0.0.0/24 using Bash variables and the az network vnet create command.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/azure-cli-vm-tutorial-2.md#2025-04-23_snippet_0\n\nLANGUAGE: azurecli-interactive\nCODE:\n```\n# create Bash shell variables\nvnetName=TutorialVNet1\nsubnetName=TutorialSubnet1\nvnetAddressPrefix=10.0.0.0/16\nsubnetAddressPrefix=10.0.0.0/24\n\n# Use the existing resource group\nresourceGroup=VMTutorialResources\n\naz network vnet create \\\n  --name $vnetName \\\n  --resource-group $resourceGroup \\\n  --address-prefixes $vnetAddressPrefix \\\n  --subnet-name $subnetName \\\n  --subnet-prefixes $subnetAddressPrefix\n```\n\n----------------------------------------\n\nTITLE: Creating DNS Zones and Records with Azure CLI\nDESCRIPTION: This snippet shows Azure CLI commands for creating DNS zones and adding DNS records using Azure DNS service.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/samples-azure-cli-samples-repo.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\naz network dns record-set a add-record\naz network dns record-set list\naz network dns zone create\n```\n\n----------------------------------------\n\nTITLE: Creating and Listing Azure Storage Containers in Azure CLI Bash Scripts\nDESCRIPTION: This snippet shows how to create an Azure Storage Container using az storage container create command and then list the containers using az storage container list command. It uses previously stored account key for authentication.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/use-azure-cli-successfully-bash.md#2025-04-23_snippet_19\n\nLANGUAGE: azurecli\nCODE:\n```\ncontainer=\"learningbash\"\naz storage container create --account-name $storageAccount --account-key $accountKey --name $container\n\naz storage container list --account-name $storageAccount --account-key $accountKey --query [].name\n```\n\n----------------------------------------\n\nTITLE: Deleting an Azure Resource Group\nDESCRIPTION: Removes a resource group and all resources it contains. This action cannot be undone and will permanently delete all associated resources.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/manage-azure-groups-azure-cli.md#2025-04-23_snippet_5\n\nLANGUAGE: azurecli\nCODE:\n```\naz group delete --name MyResourceGroup\n```\n\n----------------------------------------\n\nTITLE: Upgrading Azure CLI using the built-in command\nDESCRIPTION: Updates the Azure CLI to the latest version and updates all installed extensions by default. Available in Azure CLI version 2.11.0 and later.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/az-upgrade.md#2025-04-23_snippet_0\n\nLANGUAGE: azurecli\nCODE:\n```\naz upgrade\n```\n\n----------------------------------------\n\nTITLE: Filtering Azure VMs with SSD Storage using JMESPath Query in Azure CLI\nDESCRIPTION: This command lists VMs in the 'QueryDemo' resource group, filtering for those with SSD storage. It demonstrates the use of JMESPath query to select specific properties and filter results.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/query-azure-cli-concepts.md#2025-04-23_snippet_13\n\nLANGUAGE: azurecli\nCODE:\n```\naz vm list --resource-group QueryDemo --query \"[].{Name:name, Storage:storageProfile.osDisk.managedDisk.storageAccountType} | [? contains(Storage,'SSD')]\"\n```\n\n----------------------------------------\n\nTITLE: Securely Resetting Service Principal Password in Bash\nDESCRIPTION: Resets a service principal password and stores it in a variable to avoid writing credentials to log files. The echo command is only used for testing and should be removed in production.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/azure-cli-sp-tutorial-7.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Bash script\nmyNewPassword=$(az ad sp credential reset --id myServicePrincipalID --query password --output tsv)\n\n# the echo command writes to the log file\n# only use it when testing\necho $myNewPassword\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Azure Storage Containers Using Loops in Azure CLI Bash Scripts\nDESCRIPTION: This snippet shows different ways to use loops in Bash to create multiple Azure Storage Containers. It demonstrates the use of seq, range expansion, and C-style for loop syntax with az storage container create command.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/use-azure-cli-successfully-bash.md#2025-04-23_snippet_21\n\nLANGUAGE: azurecli\nCODE:\n```\nfor i in `seq 1 4`; do \naz storage container create --account-name $storageAccount --account-key $accountKey --name learnbash-$i\ndone\n\nfor value in {5..8}\nfor (( i=5; i<10; i++));\ndo\naz storage container create --account-name $storageAccount --account-key $accountKey --name learnbash-$i\ndone\n\naz storage container list --account-name $storageAccount --account-key $accountKey --query [].name\n```\n\n----------------------------------------\n\nTITLE: Reading and Parsing JSON File with Bash and jq\nDESCRIPTION: This Bash script demonstrates how to read a JSON file, display its contents, and extract specific values using jq. It requires jq to be installed in the environment.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/get-started-tutorial-3-use-variables.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n# Show the contents of a file in the console\nfileName=\"msdocs-tutorial.json\"\ncat $fileName | jq\n\n# Get a JSON dictionary object\nstgKV=$(jq -r '.environments.stg.\"kv-secretName\"' $fileName)\necho $stgKV\n\n# Filter a JSON array\ndevKV=$(jq -r '.environments.dev[] | select(.status==\"active\") | .\"kv-secretName\"' $fileName)\necho $devKV\n```\n\n----------------------------------------\n\nTITLE: Managing Event Grid with Azure CLI\nDESCRIPTION: This snippet demonstrates Azure CLI commands for working with Azure Event Grid, including creating topics, managing subscriptions, and listing keys.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/samples-azure-cli-samples-repo.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\naz account show\naz deployment group create\naz eventgrid event-subscription create\naz eventgrid topic create\naz eventgrid topic key list\naz eventgrid topic show\naz provider register\naz provider show\n```\n\n----------------------------------------\n\nTITLE: Setting Random Value for Azure CLI Bash Scripts\nDESCRIPTION: This snippet demonstrates how to set a random value for use in variables to avoid naming conflicts when running scripts multiple times. It uses the $RANDOM bash function and the let command to create a unique identifier.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/use-azure-cli-successfully-bash.md#2025-04-23_snippet_10\n\nLANGUAGE: azurecli-interactive\nCODE:\n```\nlet \"randomIdentifier=$RANDOM*$RANDOM\"\n```\n\n----------------------------------------\n\nTITLE: Deleting Azure Storage Accounts by Creation Date Using Azure CLI\nDESCRIPTION: This script lists and deletes storage accounts that were created within the last 30 days in a specified resource group. It sets a log file location, defines the resource group, queries for storage accounts, and then deletes them without confirmation. The progress is logged to a file.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/delete-azure-resources-at-scale.md#2025-04-23_snippet_1\n\nLANGUAGE: azurecli\nCODE:\n```\n# Set your log file location\nlogFileLocation=\"myLogName.txt\"\n\n# Set your resource group variable\nrgName=<msdocs-rg-0000000>\n\n# Get a list of Azure storage accounts that were created in the last 30 days. Return the results as a table.\nsaDate=$(date +%F -d \"-30days\")\naz storage account list --resource-group $rgName \\\n                        --query \"[?creationTime >='$saDate'].{saName:name, createdTimeStamp:creationTime}\" \\\n                        --output table\n\n# Delete storage accounts without a confirmation prompt (--yes).\n# Do not wait for the operation to finish (--no-wait)\necho \"Deleting storage accounts\">$logFileLocation\nfor saList in $(az storage account list --resource-group $rgName \\\n                        --query \"[?creationTime >='$saDate'].{saName:name, createdTimeStamp:creationTime}\" \\\n                        --output tsv);\ndo\n    echo \"deleting storage account $saList\">>$logFileLocation\n    az storage account delete --ids $saList --yes --no-wait\ndone\n\n# read your log file with Linux \"cat\" command\nclear\ncat $logFileLocation\n```\n\n----------------------------------------\n\nTITLE: VM Commands with Custom Scope in Interactive Mode\nDESCRIPTION: Examples of VM-related commands using a scoped context in Azure CLI interactive mode, which provides a more efficient way of inputting commands.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/interactive-azure-cli.md#2025-04-23_snippet_2\n\nLANGUAGE: azurecli-interactive\nCODE:\n```\naz>> %%vm\naz vm>> create -n <myVirtualMachine> -g <myResourceGroup> --image Ubuntu2204\naz vm>>list -o table\n```\n\n----------------------------------------\n\nTITLE: Managing Media Services with Azure CLI\nDESCRIPTION: This snippet demonstrates Azure CLI commands for working with Azure Media Services, including creating assets, managing jobs, and configuring event grid subscriptions.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/samples-azure-cli-samples-repo.md#2025-04-23_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\naz ams asset create\naz ams asset get-sas-urls\naz storage blob upload\naz eventgrid event-subscription create\naz ams job start\n```\n\n----------------------------------------\n\nTITLE: Configuring Load Balancers with Azure CLI\nDESCRIPTION: This snippet shows Azure CLI commands for creating and configuring Azure Load Balancers, including setting up rules, probes, and network interfaces.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/samples-azure-cli-samples-repo.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\naz network lb create\naz network lb inbound-nat-rule create\naz network lb probe create\naz network lb rule create\naz network nic create\naz network nsg create\naz network nsg rule create\naz network public-ip create\naz network vnet create\naz vm availability-set create\naz vm create\naz vm list\n```\n\n----------------------------------------\n\nTITLE: Adding Azure CLI Repository to APT Sources on Debian/Ubuntu\nDESCRIPTION: Configures the Azure CLI software repository in APT. Detects the current distribution codename and sets up appropriate repository information with architecture detection.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/cli-install-linux-apt.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nAZ_DIST=$(lsb_release -cs)\necho \"Types: deb\nURIs: https://packages.microsoft.com/repos/azure-cli/\nSuites: ${AZ_DIST}\nComponents: main\nArchitectures: $(dpkg --print-architecture)\nSigned-by: /etc/apt/keyrings/microsoft.gpg\" | sudo tee /etc/apt/sources.list.d/azure-cli.sources\n```\n\n----------------------------------------\n\nTITLE: Finding and Changing Active Subscription in Azure CLI\nDESCRIPTION: This snippet demonstrates how to view your current subscription, list all available subscriptions, and change your active subscription using either subscription name or ID.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/get-started-tutorial-1-prepare-environment.md#2025-04-23_snippet_0\n\nLANGUAGE: azurecli\nCODE:\n```\n# see your current/default subscription\naz account show\n\n# find the list of subscriptions available to you\naz account list --output table\n\n# change your current/default subscription\naz account set --subscription <mySubscriptionName>\n\n# you can also set your subscription using a subscription ID\naz account set --subscription <00000000-0000-0000-0000-000000000000>\n```\n\n----------------------------------------\n\nTITLE: Querying and Formatting Array Properties in Azure CLI\nDESCRIPTION: Command to extract specific properties from an array of Azure subscriptions and format them as a table with custom column names for better readability.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/use-azure-cli-successfully-bash.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\naz account list --query \"[].{subscription_id:id, name:name, isDefault:isDefault}\" -o table\n```\n\n----------------------------------------\n\nTITLE: Securely Resetting Service Principal Password in PowerShell\nDESCRIPTION: Resets a service principal password using PowerShell and stores it in a variable to avoid writing credentials to log files. The Write-Host command should be removed in production environments.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/azure-cli-sp-tutorial-7.md#2025-04-23_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\n# PowerShell script\n$myNewPassword = az ad sp credential reset --id myServicePrincipalID --query password --output tsv\n\n# The Write-Host cmdlet can be used for displaying the value when testing.\n# Comment it out or remove it in production if you don't want to display the password.\nWrite-Host $myNewPassword\n```\n\n----------------------------------------\n\nTITLE: Querying VM Details with Azure CLI\nDESCRIPTION: This command retrieves detailed information about a specific VM named TestVM, including its name, admin username, and SSH public keys.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/query-azure-cli-concepts.md#2025-04-23_snippet_8\n\nLANGUAGE: azurecli\nCODE:\n```\naz vm show --resource-group QueryDemo --name TestVM --query \"{VMName:name, admin:osProfile.adminUsername, sshKeys:osProfile.linuxConfiguration.ssh.publicKeys[].keyData }\"\n```\n\n----------------------------------------\n\nTITLE: Updating the Azure CLI Docker Image\nDESCRIPTION: This command pulls the latest version of the Azure CLI Docker image. This ensures you have the most recent version available locally.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/run-azure-cli-docker.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull mcr.microsoft.com/azure-cli:cbl-mariner2.0\n```\n\n----------------------------------------\n\nTITLE: Managing DevTest Labs VMs with Azure CLI\nDESCRIPTION: This snippet demonstrates Azure CLI commands for creating, verifying, starting, connecting, stopping, and deleting virtual machines in Azure DevTest Labs.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/samples-azure-cli-samples-repo.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\naz lab vm create\naz lab vm show\naz lab vm start\naz lab vm delete\naz lab vm stop\n```\n\n----------------------------------------\n\nTITLE: Filtering Command Output with JMESPath Query in Azure CLI\nDESCRIPTION: Demonstrates how to use the --query parameter with a JMESPath query to filter and retrieve specific data from the Azure CLI command output, in this case extracting SSH public keys from a VM.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/azure-cli-global-parameters.md#2025-04-23_snippet_7\n\nLANGUAGE: azurecli\nCODE:\n```\naz vm show --resource-group myResourceGroup --name myVm --query \"osProfile.linuxConfiguration.ssh.publicKeys\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving VM Information with Azure CLI\nDESCRIPTION: This command uses 'az vm show' to display detailed information about a specific virtual machine in a resource group.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/azure-cli-vm-tutorial-4.md#2025-04-23_snippet_0\n\nLANGUAGE: azurecli\nCODE:\n```\naz vm show --name $vmName --resource-group $resourceGroup\n```\n\n----------------------------------------\n\nTITLE: Updating Tags for Azure Storage Account using PowerShell\nDESCRIPTION: This snippet shows how to update tags for an Azure Storage Account using Azure CLI in a PowerShell environment. It demonstrates how to get the resource ID and merge new tags with existing ones.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/get-started-tutorial-2-environment-syntax.md#2025-04-23_snippet_7\n\nLANGUAGE: azurecli\nCODE:\n```\n# Get the resource ID of your storage account.\n$saID=$(az resource show --resource-group <msdocs-tutorial-rg-00000000> `\n                         --name <msdocssa00000000> `\n                         --resource-type Microsoft.Storage/storageAccounts `\n                         --query \"id\" `\n                         --output tsv)\n\necho My storage account ID is $saID\n\n# Append new tags.\naz tag update --resource-id $saID `\n              --operation merge `\n              --tags <tagName>=<tagValue>\n\n# Get a list of all tags.\naz tag list --resource-id $saID\n```\n\n----------------------------------------\n\nTITLE: Creating and Managing Azure Container Registry with Service Principal\nDESCRIPTION: This snippet demonstrates how to create an Azure Container Registry and assign a service principal with the appropriate role for access management.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/samples-azure-cli-samples-repo.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\naz acr create\naz acr show\naz ad sp create-for-rbac\naz ad sp list\naz role assignment create\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL Server and Firewall Rules\nDESCRIPTION: This script shows how to create a MySQL server, list and set configurations, and create firewall rules using the Azure CLI.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/samples-azure-cli-samples-repo.md#2025-04-23_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\naz mysql server configuration list\naz mysql server configuration set\naz mysql server configuration show\naz mysql server create\naz mysql server firewall-rule create\n```\n\n----------------------------------------\n\nTITLE: Using PUT to Create an Azure Container Registry with az rest (Command Format)\nDESCRIPTION: This snippet demonstrates the basic format for using the PUT method with az rest to create a new Azure Container Registry. It shows the required parameters including subscription ID, resource group, container registry name, and body content with location, SKU, and admin user configuration.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/use-azure-cli-rest-command.md#2025-04-23_snippet_0\n\nLANGUAGE: azurecli\nCODE:\n```\n# Command format example\naz rest --method put \\\n    --url https://management.azure.com/subscriptions/<subscriptionId>/resourceGroups/<resourceGroup>/providers/Microsoft.ContainerRegistry/registries/<containerRegistryName>?api-version=2023-01-01-preview \\\n    --body \"{'location': '<locationName>', 'sku': {'name': '<skuName>'}, 'properties': {'adminUserEnabled': '<propertyValue>'}}\"\n```\n\n----------------------------------------\n\nTITLE: Installing Azure CLI on macOS using Homebrew\nDESCRIPTION: This command updates the Homebrew package manager and installs the Azure CLI on macOS. It requires Homebrew to be pre-installed on the system.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/install-azure-cli-macos.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbrew update && brew install azure-cli\n```\n\n----------------------------------------\n\nTITLE: Installing Azure CLI Interactive Mode\nDESCRIPTION: Installs and launches the interactive mode for Azure CLI which provides AI-powered command suggestions and parameter hints.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/azure-cli-vm-tutorial-1.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# install interactive mode\naz interactive\n```\n\n----------------------------------------\n\nTITLE: Creating a Storage Account with Default Resource Group\nDESCRIPTION: Creates a storage account using the default resource group that was previously configured. This command demonstrates how the default resource group is used when not explicitly specified.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/manage-azure-groups-azure-cli.md#2025-04-23_snippet_8\n\nLANGUAGE: azurecli\nCODE:\n```\naz storage account create --name storage01 --location eastus --sku Standard_LRS\n```\n\n----------------------------------------\n\nTITLE: Displaying VM List in Table Format (Azure CLI)\nDESCRIPTION: This command displays virtual machines in a tabular format, which is easier to read for a quick overview. The table format excludes nested objects and some fields.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/format-output-azure-cli.md#2025-04-23_snippet_4\n\nLANGUAGE: azurecli\nCODE:\n```\naz vm list --output table\n```\n\n----------------------------------------\n\nTITLE: Filtering Azure Subscriptions with Boolean Expressions\nDESCRIPTION: These commands demonstrate how to filter Azure subscriptions based on the isDefault property using different boolean expressions.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/query-azure-cli-concepts.md#2025-04-23_snippet_9\n\nLANGUAGE: azurecli\nCODE:\n```\naz account list --query \"[?isDefault].name\"\n\naz account list --query '[?!isDefault].name'\naz account list --query \"[?isDefault == \\`false\\`].name\"\n```\n\n----------------------------------------\n\nTITLE: Installing Azure CLI Extensions by Name\nDESCRIPTION: This command installs an Azure CLI extension by its name after finding it in the available extensions list.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/azure-cli-extensions-overview.md#2025-04-23_snippet_1\n\nLANGUAGE: azurecli\nCODE:\n```\naz extension add --name <extension-name>\n```\n\n----------------------------------------\n\nTITLE: Configuring and Managing PostgreSQL Server\nDESCRIPTION: This script shows how to create a PostgreSQL server, configure settings, create firewall rules, and manage server logs using the Azure CLI.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/samples-azure-cli-samples-repo.md#2025-04-23_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\naz postgres server create\naz postgres server configuration list\naz postgres server configuration set\naz postgres server configuration show\naz postgres server firewall-rule create\naz postgres server-logs download\naz postgres server-logs list\n```\n\n----------------------------------------\n\nTITLE: Creating an Azure AD App in PowerShell\nDESCRIPTION: Shows how to create an Azure AD application using Azure CLI in PowerShell, demonstrating proper handling of file paths containing special characters.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/use-azure-cli-successfully-powershell.md#2025-04-23_snippet_11\n\nLANGUAGE: azurecli\nCODE:\n```\n# Script for a PowerShell scripting language\n\naz ad app create --display-name myTestAppName `\n    --is-fallback-public-client `\n    --required-resource-accesses \"@manifest.json\"\n```\n\n----------------------------------------\n\nTITLE: Listing Service Principals with Azure CLI\nDESCRIPTION: This snippet demonstrates how to list service principals using the Azure CLI, filtering for those created by the current user and formatting the output as a table.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/azure-cli-sp-tutorial-4.md#2025-04-23_snippet_0\n\nLANGUAGE: azurecli\nCODE:\n```\naz ad sp list --show-mine --query \"[].{SPname:displayName, SPid:appId, tenant:appOwnerOrganizationId}\" --output table\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Storage Account in Bash\nDESCRIPTION: This Bash script creates an Azure storage account using variables, random identifiers, and demonstrates Bash-specific syntax for line continuation and variable usage.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/get-started-tutorial-2-environment-syntax.md#2025-04-23_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\n# Variable block\nlet \"randomIdentifier=$RANDOM*$RANDOM\"\nlocation=\"eastus\"\nresourceGroup=\"<msdocs-tutorial-rg-00000000>\"\nstorageAccount=\"msdocssa$randomIdentifier\"\n\n# Create a storage account.\necho \"Creating storage account $storageAccount in resource group $resourceGroup\"\naz storage account create --name $storageAccount \\\n                          --resource-group $resourceGroup \\\n                          --location $location \\\n                          --sku Standard_RAGRS \\\n                          --kind StorageV2 \\\n                          --output json\n```\n\n----------------------------------------\n\nTITLE: Creating and Managing Azure SignalR Service\nDESCRIPTION: This snippet demonstrates how to create an Azure SignalR service, list its keys, and optionally integrate it with an App Service. It also shows how to set up GitHub OAuth for the web app.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/samples-azure-cli-samples-repo.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\naz signalr create\naz signalr key list\naz appservice plan create\naz webapp config appsettings set\naz webapp create\naz webapp deployment source config-local-git\naz webapp deployment user set\n```\n\n----------------------------------------\n\nTITLE: Creating and Managing Azure Media Services Transforms\nDESCRIPTION: This script demonstrates how to create and list transforms in Azure Media Services using the Azure CLI.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/samples-azure-cli-samples-repo.md#2025-04-23_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\naz ams transform create\naz ams transform list\n```\n\n----------------------------------------\n\nTITLE: Changing Active Subscription in Azure CLI\nDESCRIPTION: Commands to change the active subscription by specifying either the subscription name or ID.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/manage-azure-subscriptions-azure-cli.md#2025-04-23_snippet_5\n\nLANGUAGE: azurecli-interactive\nCODE:\n```\n# change the active subscription using the subscription name\naz account set --subscription \"My Demos\"\n\n# change the active subscription using the subscription ID\naz account set --subscription \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n```\n\n----------------------------------------\n\nTITLE: Authenticating with System-Assigned Managed Identity in Azure CLI\nDESCRIPTION: Signs into Azure using the system-assigned managed identity of the current resource. This command requires no additional parameters and uses the default managed identity.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/authenticate-azure-cli-managed-identity.md#2025-04-23_snippet_0\n\nLANGUAGE: azurecli\nCODE:\n```\naz login --identity\n```\n\n----------------------------------------\n\nTITLE: Running Azure CLI Interactive Mode\nDESCRIPTION: Command to start Azure CLI in interactive mode, which provides an interactive shell with autocompletion, command descriptions, and examples.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/interactive-azure-cli.md#2025-04-23_snippet_0\n\nLANGUAGE: azurecli-interactive\nCODE:\n```\naz interactive\n```\n\n----------------------------------------\n\nTITLE: Creating a Resource Group with Random ID in Bash\nDESCRIPTION: This Bash script generates a random identifier and creates a resource group with a name containing this random ID, allowing for repeatable testing without name conflicts.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/get-started-tutorial-1-prepare-environment.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nlet \"randomIdentifier=$RANDOM*$RANDOM\"\nlocation=\"eastus\"\nresourceGroup=\"msdocs-tutorial-rg-$randomIdentifier\"\naz group create --name $resourceGroup --location $location --output json\n```\n\n----------------------------------------\n\nTITLE: Looping Through VM IDs to Stop VMs in Bash\nDESCRIPTION: This script demonstrates how to use a for loop to iterate through VM IDs and stop each VM, with error handling.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/use-azure-cli-successfully-tips.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n#!/usr/bin/env bash\nfor vmList in $(az vm list --resource-group MyResourceGroup --show-details --query \"[?powerState=='VM running'].id\"   -output tsv); do\n    echo stopping $vmList\n    az vm stop --ids $vmList\n    if [ $? -ne 0 ]; then\n        echo \"Failed to stop $vmList\"\n        exit 1\n    fi\n    echo $vmList stopped\ndone\n```\n\n----------------------------------------\n\nTITLE: Converting PKCS12 Certificate to PEM Format using OpenSSL\nDESCRIPTION: This command converts an existing PKCS#12 (.p12/.pfx) certificate file to PEM format using OpenSSL. The passin argument can be modified if the certificate has a password.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/azure-cli-sp-tutorial-3.md#2025-04-23_snippet_5\n\nLANGUAGE: console\nCODE:\n```\nopenssl pkcs12 -in fileName.p12 -clcerts -nodes -out fileName.pem -passin pass: -passout pass:\n```\n\n----------------------------------------\n\nTITLE: Resetting Azure Media Services Account Credentials\nDESCRIPTION: This script demonstrates how to reset the credentials for an Azure Media Services account using the Azure CLI.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/samples-azure-cli-samples-repo.md#2025-04-23_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\naz ams account sp reset-credentials\n```\n\n----------------------------------------\n\nTITLE: Switching Active Azure Cloud with Azure CLI\nDESCRIPTION: This command sets the active Azure cloud to the specified cloud name. Note that re-authentication may be required after switching clouds.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/manage-clouds-azure-cli.md#2025-04-23_snippet_2\n\nLANGUAGE: azurecli\nCODE:\n```\naz cloud set --name AzureChinaCloud\n```\n\n----------------------------------------\n\nTITLE: Showing MongoDB Collection Throughput in Azure Cosmos DB\nDESCRIPTION: This command displays the throughput settings of a MongoDB collection in Azure Cosmos DB. It is used for reviewing current performance configurations.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/samples-reference-group.md#2025-04-23_snippet_12\n\nLANGUAGE: Azure CLI\nCODE:\n```\naz cosmosdb mongodb collection throughput show\n```\n\n----------------------------------------\n\nTITLE: Setting a Default Resource Group for Azure CLI\nDESCRIPTION: Sets a default resource group for all Azure CLI commands, eliminating the need to specify the --resource-group parameter in subsequent commands.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/manage-azure-groups-azure-cli.md#2025-04-23_snippet_7\n\nLANGUAGE: azurecli\nCODE:\n```\naz config set defaults.group=MyResourceGroup\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Content Delivery Network (CDN) using Azure CLI\nDESCRIPTION: This snippet demonstrates Azure CLI commands for creating and managing CDN profiles, endpoints, custom domains, and origins.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/samples-reference-group.md#2025-04-23_snippet_2\n\nLANGUAGE: azure-cli\nCODE:\n```\naz cdn custom-domain create\naz cdn custom-domain enable-https\naz cdn endpoint create\naz cdn endpoint update\naz cdn origin create\naz cdn origin-group create\naz cdn profile create\n```\n\n----------------------------------------\n\nTITLE: Migrating SQL Container Throughput in Azure Cosmos DB\nDESCRIPTION: This command migrates the throughput of a SQL container between standard and autoscale in Azure Cosmos DB. It is used for optimizing performance and cost.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/samples-reference-group.md#2025-04-23_snippet_23\n\nLANGUAGE: Azure CLI\nCODE:\n```\naz cosmosdb sql container throughput migrate\n```\n\n----------------------------------------\n\nTITLE: Creating VMs in Parallel and Waiting for Completion\nDESCRIPTION: This script shows how to create multiple VMs in parallel using --no-wait and then use az vm wait to pause until both VMs are created.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/use-azure-cli-successfully-tips.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\naz vm create --resource-group VMResources --name virtual-machine-01 --image centos --no-wait\naz vm create --resource-group VMResources --name virtual-machine-02 --image centos --no-wait\n\nsubscription=$(az account show --query \"id\" -o tsv)\nvm1_id=\"/subscriptions/$subscription/resourceGroups/VMResources/providers/Microsoft.Compute/virtualMachines/virtual-machine-01\"\nvm2_id=\"/subscriptions/$subscription/resourceGroups/VMResources/providers/Microsoft.Compute/virtualMachines/virtual-machine-02\"\naz vm wait --created --ids $vm1_id $vm2_id\n```\n\n----------------------------------------\n\nTITLE: Retrieving VM Information with Azure CLI\nDESCRIPTION: Command to display details about a specific virtual machine in the specified resource group. This returns all available properties for the VM in JSON format.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/query-azure-cli-concepts.md#2025-04-23_snippet_2\n\nLANGUAGE: azurecli-interactive\nCODE:\n```\naz vm show --resource-group QueryDemo --name TestVM\n```\n\n----------------------------------------\n\nTITLE: Creating an Ubuntu VM with Azure CLI in PowerShell\nDESCRIPTION: Command to create a new Ubuntu 22.04 virtual machine with SSH authentication connected to a specific virtual network and subnet. The command uses PowerShell variables and backtick continuation characters with JSON output and verbose logging.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/azure-cli-vm-tutorial-3.md#2025-04-23_snippet_1\n\nLANGUAGE: azurecli-interactive\nCODE:\n```\n# Create PowerShell variable\n$vmName = \"TutorialVM1\"\n\naz vm create `\n    --resource-group $resourceGroup `\n    --name $vmName `\n    --image Ubuntu2204 `\n    --vnet-name $vnetName `\n    --subnet $subnetName `\n    --generate-ssh-keys `\n    --output json `\n    --verbose\n```\n\n----------------------------------------\n\nTITLE: Retrieving Active Tenant Information in Azure CLI\nDESCRIPTION: Commands to retrieve the active tenant ID using either the tenant list command or the account show command.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/manage-azure-subscriptions-azure-cli.md#2025-04-23_snippet_0\n\nLANGUAGE: azurecli-interactive\nCODE:\n```\naz account tenant list\n\naz account show\n```\n\n----------------------------------------\n\nTITLE: Creating and Removing Role Assignments in Azure CLI\nDESCRIPTION: Commands for adding a Reader role and removing a Contributor role for a service principal. This demonstrates the principle of least privilege by restricting permissions to read-only access.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/azure-cli-sp-tutorial-5.md#2025-04-23_snippet_0\n\nLANGUAGE: azurecli\nCODE:\n```\naz role assignment create --assignee myServicePrincipalID \\\n                          --role Reader \\\n                          --scope /subscriptions/mySubscriptionID/resourceGroups/myResourceGroupName\n\naz role assignment delete --assignee myServicePrincipalID \\\n                          --role Contributor \\\n                          --scope /subscriptions/mySubscriptionID/resourceGroups/myResourceGroupName\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Resources at Scale (Bash)\nDESCRIPTION: Executes Azure CLI commands to create resources based on CSV input. Creates resource groups, VNets, and VMs with conditional logic and logs progress.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/create-azure-resources-at-scale.md#2025-04-23_snippet_6\n\nLANGUAGE: azurecli\nCODE:\n```\naz account set --subscription $subscriptionID\n\nIFS=','\nwhile read resourceNo location createRG existingRGName createVnet vnetAddressPrefix subnetAddressPrefix vmImage publicIpSku adminUsername\ndo\n  random=$(tr -dc A-Za-z0-9 </dev/urandom | head -c 8)\n  echo \"Starting creation of resourceNo $resourceNo at $(date +\"%Y-%m-%d %H:%M:%S\").\" | tee -a \"$logFileLocation\"\n  if [ \"$createRG\" = \"TRUE\" ]; then\n    newRGName=\"$rgPrefix$random\"\n    echo \"  Creating RG $newRGName at $(date +\"%Y-%m-%d %H:%M:%S\").\" >> \"$logFileLocation\"\n    az group create --name $newRGName --location $location >> \"$logFileLocation\"\n    echo \"  RG $newRGName creation complete\"\n    if [ \"$createVnet\" = \"TRUE\" ]; then\n      vnetName=\"$vnetPrefix$random\"\n      subnetName=\"$subnetPrefix$random\"\n      echo \"  Creating VNet $vnetName in RG $newRGName at $(date +\"%Y-%m-%d %H:%M:%S\").\" >> \"$logFileLocation\"\n      az network vnet create \\\n        --resource-group $newRGName \\\n        --name $vnetName \\\n        --address-prefix $vnetAddressPrefix \\\n        --subnet-name $subnetName \\\n        --subnet-prefix $subnetAddressPrefix >> \"$logFileLocation\"\n      echo \"  VNet $vnetName creation complete\"\n      vmName=\"$vmPrefix$random\"\n      echo \"  Creating VM $vmName in RG $newRGName at $(date +\"%Y-%m-%d %H:%M:%S\").\" >> \"$logFileLocation\"\n      if [ -z \"$adminUsername\" ]; then\n        az vm create \\\n          --resource-group $newRGName \\\n          --name $vmName \\\n          --image $vmImage \\\n          --vnet-name $vnetName \\\n          --subnet $subnetName \\\n          --public-ip-sku $publicIpSku \\\n          --generate-ssh-keys >> \"$logFileLocation\"\n      else\n        az vm create \\\n          --resource-group $newRGName \\\n          --name $vmName \\\n          --image $vmImage \\\n          --vnet-name $vnetName \\\n          --subnet $subnetName \\\n          --public-ip-sku $publicIpSku \\\n          --admin-username $adminUsername >> \"$logFileLocation\"\n      fi\n      echo \"  VM $vmName creation complete\"\n    else\n      vmName=\"$vmPrefix$random\"\n      echo \"  Creating VM $vmName in RG $newRGName at $(date +\"%Y-%m-%d %H:%M:%S\").\" >> \"$logFileLocation\"\n      if [ -z \"$adminUsername\" ]; then\n        az vm create \\\n          --resource-group $newRGName \\\n          --name $vmName \\\n          --image $vmImage \\\n          --public-ip-sku $publicIpSku \\\n          --generate-ssh-keys >> \"$logFileLocation\"\n      else\n        az vm create \\\n          --resource-group $newRGName \\\n          --name $vmName \\\n          --image $vmImage \\\n          --public-ip-sku $publicIpSku \\\n          --admin-username $adminUsername >> \"$logFileLocation\"\n      fi\n      echo \"  VM $vmName creation complete\"\n    fi\n  else\n    vmName=\"$vmPrefix$random\"\n    echo \"  Creating VM $vmName in RG $existingRGName at $(date +\"%Y-%m-%d %H:%M:%S\").\" >> \"$logFileLocation\"\n    if [ -z \"$adminUsername\" ]; then\n      az vm create \\\n        --resource-group $existingRGName \\\n        --name $vmName \\\n        --image $vmImage \\\n        --public-ip-sku $publicIpSku \\\n        --generate-ssh-keys >> \"$logFileLocation\"\n    else\n      az vm create \\\n        --resource-group $existingRGName \\\n        --name $vmName \\\n        --image $vmImage \\\n        --public-ip-sku $publicIpSku \\\n        --admin-username $adminUsername >> \"$logFileLocation\"\n    fi\n    echo \"  VM $vmName creation complete\"\n  fi\n  echo \"\" | tee -a \"$logFileLocation\"\ndone < \"$csvFileLocation\"\n\necho \"Log file contents:\"\ncat \"$logFileLocation\"\n```\n\n----------------------------------------\n\nTITLE: Setting Variables for Azure Resource Creation Script (Bash)\nDESCRIPTION: Defines variables for subscription ID, CSV file location, log file location, and resource naming prefixes. Uses values from CSV file for empty variables.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/create-azure-resources-at-scale.md#2025-04-23_snippet_0\n\nLANGUAGE: azurecli\nCODE:\n```\nsubscriptionID=\"<your-subscription-id>\"\ncsvFileLocation=\"~/CloudDrive/azure-resources.csv\"\nlogFileLocation=\"~/CloudDrive/azure-resources-log.txt\"\n\nrandom=$(tr -dc A-Za-z0-9 </dev/urandom | head -c 8)\nrgPrefix=\"msdocs-rg-\"\nvnetPrefix=\"msdocs-vnet-\"\nsubnetPrefix=\"msdocs-subnet-\"\nvmPrefix=\"msdocs-vm-\"\n\ncreateRG=\"\"\nexistingRGName=\"\"\ncreateVnet=\"\"\nvnetAddressPrefix=\"\"\nsubnetAddressPrefix=\"\"\nvmImage=\"\"\npublicIpSku=\"\"\nadminUsername=\"\"\n```\n\n----------------------------------------\n\nTITLE: Creating SQL Database in Azure Cosmos DB\nDESCRIPTION: This command creates a new SQL database in an Azure Cosmos DB account. It is used for setting up the database structure for SQL API.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/samples-reference-group.md#2025-04-23_snippet_26\n\nLANGUAGE: Azure CLI\nCODE:\n```\naz cosmosdb sql database create\n```\n\n----------------------------------------\n\nTITLE: Enabling Azure CLI Extension Dynamic Installation without Prompt\nDESCRIPTION: This command enables automatic installation of required extensions without asking for confirmation when running extension commands.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/azure-cli-extensions-overview.md#2025-04-23_snippet_5\n\nLANGUAGE: azurecli\nCODE:\n```\naz config set extension.use_dynamic_install=yes_without_prompt\n```\n\n----------------------------------------\n\nTITLE: Updating MongoDB Collection Throughput in Azure Cosmos DB\nDESCRIPTION: This command updates the throughput settings of a MongoDB collection in Azure Cosmos DB. It is used for adjusting performance based on application needs.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/samples-reference-group.md#2025-04-23_snippet_13\n\nLANGUAGE: Azure CLI\nCODE:\n```\naz cosmosdb mongodb collection throughput update\n```\n\n----------------------------------------\n\nTITLE: Listing All Resource Groups in Current Subscription\nDESCRIPTION: Displays all resource groups in the current Azure subscription in a table format. The output parameter formats the results in a user-friendly table view.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/manage-azure-groups-azure-cli.md#2025-04-23_snippet_3\n\nLANGUAGE: azurecli\nCODE:\n```\naz group list --output table\n```\n\n----------------------------------------\n\nTITLE: Filtering Service Principals with Azure CLI\nDESCRIPTION: These examples show various ways to filter service principals using the Azure CLI, including by display name, OData filter, and servicePrincipalNames property.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/azure-cli-sp-tutorial-4.md#2025-04-23_snippet_1\n\nLANGUAGE: azurecli\nCODE:\n```\n# get service principals containing a keyword\naz ad sp list --display-name mySearchWord --output table\n\n# get service principals using an OData filter\naz ad sp list --filter \"displayname eq 'myExactServicePrincipalName'\" --output json\n\n# get a service principal having a certain servicePrincipalNames property value\naz ad sp list --spn https://spURL.com\n```\n\n----------------------------------------\n\nTITLE: Listing MongoDB Databases in Azure Cosmos DB\nDESCRIPTION: This command lists all MongoDB databases in an Azure Cosmos DB account. It provides an overview of existing MongoDB databases.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/samples-reference-group.md#2025-04-23_snippet_15\n\nLANGUAGE: Azure CLI\nCODE:\n```\naz cosmosdb mongodb database list\n```\n\n----------------------------------------\n\nTITLE: Managing Role Assignments with Azure CLI\nDESCRIPTION: These commands show how to create and delete role assignments using Azure CLI. The first command creates a Reader role assignment for a service principal, while the second removes a Contributor role from a user.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/what-is-azure-cli.md#2025-04-23_snippet_1\n\nLANGUAGE: azurecli\nCODE:\n```\naz role assignment create --assignee servicePrincipalName --role Reader --scope /subscriptions/mySubscriptionID/resourceGroups/myResourceGroupName\naz role assignment delete --assignee userSign-inName --role Contributor\n```\n\n----------------------------------------\n\nTITLE: Changing Active Tenant in Azure CLI\nDESCRIPTION: Commands to sign in with different user credentials or specify a different tenant ID to change the active tenant.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/manage-azure-subscriptions-azure-cli.md#2025-04-23_snippet_1\n\nLANGUAGE: azurecli-interactive\nCODE:\n```\n# sign in as a different user\naz login --user <myAlias@myCompany.com> --password <myPassword>\n\n# sign in with a different tenant\naz login --tenant <myTenantID>\n```\n\n----------------------------------------\n\nTITLE: Enabling Azure CLI Extension Dynamic Installation with Prompt\nDESCRIPTION: This command enables the dynamic installation feature which automatically installs required extensions when their commands are run, with a confirmation prompt.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/azure-cli-extensions-overview.md#2025-04-23_snippet_4\n\nLANGUAGE: azurecli\nCODE:\n```\naz config set extension.use_dynamic_install=yes_prompt\n```\n\n----------------------------------------\n\nTITLE: Creating Tags for Azure Storage Account using Bash\nDESCRIPTION: This snippet demonstrates how to create tags for an Azure Storage Account using Azure CLI in a Bash environment. It shows various tag creation scenarios including tags with spaces and special characters.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/get-started-tutorial-2-environment-syntax.md#2025-04-23_snippet_4\n\nLANGUAGE: azurecli\nCODE:\n```\n# Create a tag from a variable.\nnewTag=\"tag1=tag value with spaces\"\naz storage account update --name <msdocssa00000000> \\\n                          --resource-group <msdocs-tutorial-rg-00000000> \\\n                          --tags \"$newTag\"\n```\n\n----------------------------------------\n\nTITLE: Using CASE Statement for Resource Group Management in Azure CLI Bash Scripts\nDESCRIPTION: This snippet demonstrates how to use a CASE statement to check if a resource group exists and create it if it doesn't. It uses az group list with a query to check for the existence of the resource group.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/use-azure-cli-successfully-bash.md#2025-04-23_snippet_16\n\nLANGUAGE: azurecli\nCODE:\n```\nvar=$(az group list --query \"[? contains(name, '$resourceGroup')].name\" --output tsv)\ncase $resourceGroup in\n$var)\necho The $resourceGroup resource group already exists.;;\n*)\naz group create --name $resourceGroup --location \"$location\";;\nesac\n```\n\n----------------------------------------\n\nTITLE: Creating and Managing Azure Management Groups\nDESCRIPTION: Series of commands to create, list, add subscriptions to, and remove subscriptions from Azure management groups.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/manage-azure-subscriptions-azure-cli.md#2025-04-23_snippet_9\n\nLANGUAGE: azurecli-interactive\nCODE:\n```\naz account management-group create --name Contoso01\n```\n\nLANGUAGE: azurecli-interactive\nCODE:\n```\naz account management-group list\n```\n\nLANGUAGE: azurecli-interactive\nCODE:\n```\naz account management-group subscription add --name Contoso01 --subscription \"My Demos\"\naz account management-group subscription add --name Contoso01 --subscription \"My Second Demos\"\n```\n\nLANGUAGE: azurecli-interactive\nCODE:\n```\naz account management-group subscription remove --name Contoso01 --subscription \"My Demos\"\n```\n\nLANGUAGE: azurecli-interactive\nCODE:\n```\naz account management-group delete --name Contoso01\n```\n\n----------------------------------------\n\nTITLE: Renaming Properties in Query Output\nDESCRIPTION: This example shows how to rename properties in the query output using curly brackets notation. It renames properties and displays the result in table format for better readability.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/get-started-tutorial-3-use-variables.md#2025-04-23_snippet_2\n\nLANGUAGE: azurecli\nCODE:\n```\naz storage account show --resource-group <msdocs-tutorial-rg-00000000> \\\n                        --name <msdocssa000000000> \\\n                        --query \"{saName:name, saKind:kind, saMinTLSVersion:minimumTlsVersion}\" \\\n                        --output table\n```\n\n----------------------------------------\n\nTITLE: Creating MongoDB Database in Azure Cosmos DB\nDESCRIPTION: This command creates a new MongoDB database in an Azure Cosmos DB account. It is used for setting up the database structure for MongoDB API.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/samples-reference-group.md#2025-04-23_snippet_14\n\nLANGUAGE: Azure CLI\nCODE:\n```\naz cosmosdb mongodb database create\n```\n\n----------------------------------------\n\nTITLE: Appending a Certificate to an Existing Service Principal in Azure CLI\nDESCRIPTION: This command appends a certificate to an existing service principal using the credential reset command with the --append parameter. Note that without --append, this would clear all existing credentials.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/azure-cli-sp-tutorial-3.md#2025-04-23_snippet_6\n\nLANGUAGE: azurecli\nCODE:\n```\naz ad sp credential reset --id myServicePrincipalID \\\n                          --append \\\n                          --cert @/path/to/cert.pem\n```\n\n----------------------------------------\n\nTITLE: Updating MongoDB Database Throughput in Azure Cosmos DB\nDESCRIPTION: This command updates the throughput settings of a MongoDB database in Azure Cosmos DB. It is used for adjusting performance based on application needs at the database level.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/samples-reference-group.md#2025-04-23_snippet_18\n\nLANGUAGE: Azure CLI\nCODE:\n```\naz cosmosdb mongodb database throughput update\n```\n\n----------------------------------------\n\nTITLE: Listing Azure Storage Containers with Prefix in Azure CLI\nDESCRIPTION: This snippet shows how to list Azure storage containers with a specific prefix and store the results in a variable using the az storage container list command with query and output options.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/use-azure-cli-successfully-bash.md#2025-04-23_snippet_25\n\nLANGUAGE: azurecli\nCODE:\n```\ncontainerPrefix=\"learnbash\"\ncontainerList=$(az storage container list \\\n    --query \"[].name\" \\\n    --prefix $containerPrefix \\\n    --output tsv)\n```\n\n----------------------------------------\n\nTITLE: Listing SQL Databases in Azure Cosmos DB\nDESCRIPTION: This command lists all SQL databases in an Azure Cosmos DB account. It provides an overview of existing SQL databases.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/samples-reference-group.md#2025-04-23_snippet_27\n\nLANGUAGE: Azure CLI\nCODE:\n```\naz cosmosdb sql database list\n```\n\n----------------------------------------\n\nTITLE: Try-Catch Error Handling for Azure CLI in PowerShell\nDESCRIPTION: This example shows how to use try-catch blocks for error handling with Azure CLI commands in PowerShell. It sets the $ErrorActionPreference to 'Stop' to catch non-terminating errors, attempts to create a resource group, and handles any errors that occur.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/use-azure-cli-successfully-powershell.md#2025-04-23_snippet_13\n\nLANGUAGE: PowerShell\nCODE:\n```\n# Script for a PowerShell scripting language\n\n$ErrorActionPreference = \"Stop\"\ntry {\n    az group create --name MyResourceGroup\n    if ($? -eq $false) {\n        throw 'Group create failed.'\n    }\n}\ncatch {\n    Write-Error \"Error creating the resource group.\"\n}\n$ErrorActionPreference = \"Continue\"\n```\n\n----------------------------------------\n\nTITLE: Querying Public IP and Subnet IDs with Custom JSON Keys in Bash\nDESCRIPTION: Extracts the public IP address and subnet object IDs from a network interface and formats them as a JSON object with custom keys for human readability.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/azure-cli-vm-tutorial-5.md#2025-04-23_snippet_1\n\nLANGUAGE: azurecli\nCODE:\n```\naz network nic show --ids $nicId \\\n  --query '{IP:ipConfigurations[].publicIPAddress.id, Subnet:ipConfigurations[].subnet.id}' \\\n  -o json\n```\n\n----------------------------------------\n\nTITLE: JSON Output Example\nDESCRIPTION: Example of the JSON output format from the az vm list command. This shows the structured format with nested properties for VM details like hardware profile and network configuration.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/format-output-azure-cli.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"availabilitySet\": null,\n    \"diagnosticsProfile\": null,\n    \"hardwareProfile\": {\n      \"vmSize\": \"Standard_DS1\"\n    },\n    \"id\": \"/subscriptions/.../resourceGroups/DEMORG1/providers/Microsoft.Compute/virtualMachines/DemoVM010\",\n    \"instanceView\": null,\n    \"licenseType\": null,\n    \"location\": \"westus\",\n    \"name\": \"DemoVM010\",\n    \"networkProfile\": {\n      \"networkInterfaces\": [\n        {\n          \"id\": \"/subscriptions/.../resourceGroups/demorg1/providers/Microsoft.Network/networkInterfaces/DemoVM010VMNic\",\n          \"primary\": null,\n          \"resourceGroup\": \"demorg1\"\n        }\n      ]\n    },\n          ...\n          ...\n          ...\n]\n```\n\n----------------------------------------\n\nTITLE: Updating Tags for Azure Storage Account using Bash\nDESCRIPTION: This snippet shows how to update tags for an Azure Storage Account using Azure CLI in a Bash environment. It demonstrates how to get the resource ID and merge new tags with existing ones.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/get-started-tutorial-2-environment-syntax.md#2025-04-23_snippet_5\n\nLANGUAGE: azurecli\nCODE:\n```\n# Get the resource ID of your storage account.\nsaID=$(az resource show --resource-group <msdocs-tutorial-rg-00000000> \\\n                        --name <msdocssa00000000> \\\n                        --resource-type Microsoft.Storage/storageAccounts \\\n                        --query \"id\" \\\n                        --output tsv)\n\necho My storage account ID is $saID\n\n# Append new tags.\naz tag update --resource-id $saID \\\n              --operation merge \\\n              --tags <tagName>=<tagValue>\n\n# Get a list of all tags.\naz tag list --resource-id $saID\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Container Instances with NAT Gateway and Firewall\nDESCRIPTION: This snippet shows how to create and configure Azure Container Instances with NAT Gateway and Azure Firewall. It includes setting up network rules, creating public IP addresses, and managing container logs.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/samples-azure-cli-samples-repo.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\naz container create\naz container logs\naz container show\naz network nat gateway create\naz network public-ip create\naz network public-ip show\naz network vnet subnet update\naz extension add\naz network firewall application-rule create\naz network firewall create\naz network firewall ip-config create\naz network firewall ip-config list\naz network firewall nat-rule create\naz network firewall update\naz network route-table create\naz network route-table route create\naz network vnet subnet create\n```\n\n----------------------------------------\n\nTITLE: Displaying Detailed Azure Cloud Information with Azure CLI\nDESCRIPTION: This command shows detailed information about a specific Azure cloud, including all the endpoints it uses for various Azure services.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/manage-clouds-azure-cli.md#2025-04-23_snippet_1\n\nLANGUAGE: azurecli\nCODE:\n```\naz cloud show --name AzureChinaCloud --output json\n```\n\n----------------------------------------\n\nTITLE: Filtering Running Web Apps with JMESPath in Azure CLI\nDESCRIPTION: This command lists all web apps in a resource group that are currently in the 'Running' state. It filters the results using a JMESPath query that checks the state property of each web app.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/query-azure-cli-examples.md#2025-04-23_snippet_11\n\nLANGUAGE: azurecli\nCODE:\n```\naz webapp list --resource-group DemoGroup --query \"[?state=='Running']\"\n```\n\n----------------------------------------\n\nTITLE: Filtering Azure Resources with Complex Queries using CMD\nDESCRIPTION: This snippet demonstrates how to use complex queries to filter Azure resources using Azure CLI in a CMD environment. It includes examples of filtering by numeric values, boolean values, and dates.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/get-started-tutorial-2-environment-syntax.md#2025-04-23_snippet_11\n\nLANGUAGE: azurecli\nCODE:\n```\naz storage account list --resource-group <msdocs-tutorial-rg-00000000> ^\n    --query \"[?allowBlobPublicAccess == `true`].id\"\n\n# include time\naz vm list --resource-group DevEx-Data-Analysis2 ^\n           --query \"[?storageProfile.osDisk.diskSizeGb >=`50`].{Name:name, admin:osProfile.adminUsername, DiskSize:storageProfile.osDisk.diskSizeGb }\" ^\n           --output table\n\naz storage account list --resource-group <msdocs-tutorial-rg-00000000> ^\n    --query \"[?creationTime >='2021-11-15T19:14:27.103127+00:00'].{saName:name, saID: id, sku: sku.name}\"\n\n# exclude time\naz storage account list --resource-group <msdocs-tutorial-rg-00000000> ^\n    --query \"[?creationTime >='2021-11-15'].{saName:name, saID: id, sku: sku.name}\"\n```\n\n----------------------------------------\n\nTITLE: Extracting SSH Public Keys from VM with JMESPath Query\nDESCRIPTION: Command that retrieves only the SSH public keys configured for a VM by using a JMESPath query to navigate through nested properties in the VM configuration.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/query-azure-cli-concepts.md#2025-04-23_snippet_3\n\nLANGUAGE: azurecli-interactive\nCODE:\n```\naz vm show --resource-group QueryDemo --name TestVM --query \"osProfile.linuxConfiguration.ssh.publicKeys\"\n```\n\n----------------------------------------\n\nTITLE: Migrating MongoDB Database Throughput in Azure Cosmos DB\nDESCRIPTION: This command migrates the throughput of a MongoDB database between standard and autoscale in Azure Cosmos DB. It is used for optimizing performance and cost at the database level.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/samples-reference-group.md#2025-04-23_snippet_16\n\nLANGUAGE: Azure CLI\nCODE:\n```\naz cosmosdb mongodb database throughput migrate\n```\n\n----------------------------------------\n\nTITLE: Deleting an Azure Subscription Lock with Azure CLI\nDESCRIPTION: This command demonstrates how to remove a subscription lock using the az account lock delete command.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/manage-azure-subscriptions-azure-cli.md#2025-04-23_snippet_13\n\nLANGUAGE: azurecli\nCODE:\n```\naz account lock delete --name \"Cannot delete subscription\"\n```\n\n----------------------------------------\n\nTITLE: Listing Azure VMs with Custom Properties using JMESPath Query and Table Output in Azure CLI\nDESCRIPTION: This command lists VMs in the 'QueryDemo' resource group, selecting custom properties (Name, OS, and Admin) using a JMESPath query, and outputs the result in a table format for easy reading.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/query-azure-cli-concepts.md#2025-04-23_snippet_16\n\nLANGUAGE: azurecli\nCODE:\n```\naz vm list --resource-group QueryDemo --query \"[].{Name:name, OS:storageProfile.osDisk.osType, Admin:osProfile.adminUsername}\" --output table\n```\n\n----------------------------------------\n\nTITLE: Querying VMs with Large Disk Sizes in CMD using Azure CLI\nDESCRIPTION: This command lists virtual machines with OS disks larger than or equal to 50GB in Command Prompt. It formats the output as a table with the VM name, admin username, and disk size in gigabytes.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/query-azure-cli-examples.md#2025-04-23_snippet_5\n\nLANGUAGE: azurecli\nCODE:\n```\naz vm list --resource-group QueryDemo --query \"[?storageProfile.osDisk.diskSizeGb >=`50`].{Name:name, admin:osProfile.adminUsername, DiskSize:storageProfile.osDisk.diskSizeGb }\" --output table\n```\n\n----------------------------------------\n\nTITLE: Querying Storage Account Properties in Azure CLI\nDESCRIPTION: This snippet shows how to use the az storage account show command with the --query parameter to retrieve the primaryEndpoints of a storage account. The command returns a JSON dictionary containing various endpoint URLs.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/get-started-tutorial-3-use-variables.md#2025-04-23_snippet_0\n\nLANGUAGE: azurecli\nCODE:\n```\naz storage account show --resource-group <msdocs-tutorial-rg-00000000> \\\n                        --name <msdocssa000000000> \\\n                        --query primaryEndpoints\n```\n\n----------------------------------------\n\nTITLE: Listing Available Azure Clouds with Azure CLI\nDESCRIPTION: This command lists all available Azure clouds, showing which one is currently active, its profile, and basic information about regional suffixes and host names.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/manage-clouds-azure-cli.md#2025-04-23_snippet_0\n\nLANGUAGE: azurecli\nCODE:\n```\naz cloud list --output table\n```\n\n----------------------------------------\n\nTITLE: Retrieving Multiple VM Properties using Array Query\nDESCRIPTION: Command that extracts multiple properties from a VM using a JMESPath query with a multiselect list, returning results as an array with the VM name, admin username, and SSH key.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/query-azure-cli-concepts.md#2025-04-23_snippet_4\n\nLANGUAGE: azurecli-interactive\nCODE:\n```\naz vm show --resource-group QueryDemo --name TestVM --query \"[name, osProfile.adminUsername, osProfile.linuxConfiguration.ssh.publicKeys[0].keyData]\"\n```\n\n----------------------------------------\n\nTITLE: Listing Available Azure Locations\nDESCRIPTION: Displays all Azure locations (regions) that are available in the current subscription. This information is useful when selecting where to deploy resources.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/manage-azure-groups-azure-cli.md#2025-04-23_snippet_2\n\nLANGUAGE: azurecli\nCODE:\n```\naz account list-locations\n```\n\n----------------------------------------\n\nTITLE: Managing Cosmos DB with Azure CLI\nDESCRIPTION: This snippet demonstrates various Azure CLI commands for managing Cosmos DB resources including databases, collections, and throughput settings for different APIs (Gremlin, MongoDB, SQL, Table).\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/samples-azure-cli-samples-repo.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\naz cosmosdb create\naz cosmosdb gremlin database create\naz cosmosdb gremlin database throughput migrate\naz cosmosdb gremlin database throughput show\naz cosmosdb gremlin database throughput update\naz cosmosdb gremlin graph create\naz cosmosdb gremlin graph throughput migrate\naz cosmosdb gremlin graph throughput show\naz cosmosdb gremlin graph throughput update\naz cosmosdb mongodb collection create\naz cosmosdb mongodb database create\naz cosmosdb sql container create\naz cosmosdb sql database create\naz cosmosdb table create\n```\n\n----------------------------------------\n\nTITLE: Sorting Azure VMs by OS Disk Size using JMESPath Query in Azure CLI\nDESCRIPTION: This command lists VMs in the 'QueryDemo' resource group, sorts them by OS disk size, and outputs the result in a table format. It demonstrates the use of the sort_by function in JMESPath queries.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/query-azure-cli-concepts.md#2025-04-23_snippet_14\n\nLANGUAGE: azurecli\nCODE:\n```\naz vm list --resource-group QueryDemo --query \"sort_by([].{Name:name, Size:storageProfile.osDisk.diskSizeGb}, &Size)\" --output table\n```\n\n----------------------------------------\n\nTITLE: Managing and Testing Azure CLI Output Formats\nDESCRIPTION: This script demonstrates how to set, override, and reset default output formats in Azure CLI using 'az config set' and the '--output' parameter on individual commands.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/format-output-azure-cli.md#2025-04-23_snippet_16\n\nLANGUAGE: azurecli\nCODE:\n```\n# set your default output to table\naz config set core.output=table\n\n# show your active subscription in table format\n# notice how only a subset of properties are returned in the table\naz account show\n\n# override your table default and show your active subscription in jsonc format\naz account show --output jsonc\n\n# reset your default output to json\naz config set core.output=json\n```\n\n----------------------------------------\n\nTITLE: Filtering Public IP Addresses with Variables in PowerShell using Azure CLI\nDESCRIPTION: This command lists the IDs of public IP addresses containing a specific substring stored in a PowerShell variable. It filters for non-null IP addresses, then filters those containing the substring, and returns just the ID field.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/query-azure-cli-examples.md#2025-04-23_snippet_9\n\nLANGUAGE: azurecli\nCODE:\n```\n$IP=\"20.127\"\naz network public-ip list --query \"[?ipAddress!=null]|[?contains(ipAddress, '$IP')].[id]\" --output tsv\n```\n\n----------------------------------------\n\nTITLE: Assigning NIC ID to Shell Variable in PowerShell\nDESCRIPTION: This PowerShell script retrieves the network interface ID of a VM and assigns it to a variable. It's the PowerShell equivalent of the Bash script, showing how to use Azure CLI in PowerShell environments.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/azure-cli-vm-tutorial-4.md#2025-04-23_snippet_4\n\nLANGUAGE: azurecli\nCODE:\n```\n$nicId = $(az vm show `\n   -n $vmName `\n   -g $resourceGroup `\n   --query 'networkProfile.networkInterfaces[].id' `\n   -o tsv)\n```\n\n----------------------------------------\n\nTITLE: Updating Gremlin Graph Throughput in Azure Cosmos DB\nDESCRIPTION: This command updates the throughput (RU/s) for a Gremlin graph in Azure Cosmos DB. It is used for managing performance of Gremlin API resources.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/samples-reference-group.md#2025-04-23_snippet_5\n\nLANGUAGE: Azure CLI\nCODE:\n```\naz cosmosdb gremlin graph throughput update\n```\n\n----------------------------------------\n\nTITLE: Upgrading the Interactive Mode Extension\nDESCRIPTION: Command to upgrade to the latest version of the Azure CLI interactive mode extension to access new AI-powered features.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/interactive-azure-cli.md#2025-04-23_snippet_10\n\nLANGUAGE: azurecli-interactive\nCODE:\n```\naz extension add --name interactive --upgrade\n```\n\n----------------------------------------\n\nTITLE: Filtering Web App Publishing Profiles with JMESPath in Azure CLI\nDESCRIPTION: This command retrieves publishing profiles for a web app and filters for profiles whose names end with 'FTP'. It projects only the profile name and publish URL properties from the resulting profiles.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/query-azure-cli-examples.md#2025-04-23_snippet_12\n\nLANGUAGE: azurecli\nCODE:\n```\naz webapp deployment list-publishing-profiles --resource-group DemoGroup --name DemoApp --query \"[?ends_with(profileName, 'FTP')].{profileName: profileName, publishUrl: publishUrl}\"\n```\n\n----------------------------------------\n\nTITLE: Filtering Public IP Addresses with Variables in CMD using Azure CLI\nDESCRIPTION: This command lists the IDs of public IP addresses containing a specific substring stored in a CMD environment variable. It uses CMD's variable syntax (%VAR%) within the JMESPath query to filter IP addresses.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/query-azure-cli-examples.md#2025-04-23_snippet_10\n\nLANGUAGE: azurecli\nCODE:\n```\nSet IP=\"20.127\"\naz network public-ip list --query \"[?ipAddress!=null]|[?contains(ipAddress, '%IP%')].[id]\" --output tsv\n```\n\n----------------------------------------\n\nTITLE: Querying Storage Accounts in PowerShell on Linux\nDESCRIPTION: Demonstrates how to list storage accounts and their properties using Azure CLI in PowerShell on Linux, with proper quoting for special characters.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/use-azure-cli-successfully-powershell.md#2025-04-23_snippet_5\n\nLANGUAGE: azurecli\nCODE:\n```\naz storage account list --query \"[].{`\"SA Name`\":name, `\"Primary endpoint`\":primaryEndpoints.blob}\" --output table\n```\n\nLANGUAGE: azurecli\nCODE:\n```\naz storage account list --query \"[?creationTime >='2024-02-01'].{`\"SA Name`\":name, `\"Primary endpoint`\":primaryEndpoints.blob}\" --output table\n```\n\n----------------------------------------\n\nTITLE: Customizing Table Output with Query (Azure CLI)\nDESCRIPTION: This command demonstrates how to use the --query parameter to select specific properties to display in table format. It shows only VM names and resource groups.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/format-output-azure-cli.md#2025-04-23_snippet_5\n\nLANGUAGE: azurecli\nCODE:\n```\naz vm list --query \"[].{resource:resourceGroup, name:name}\" --output table\n```\n\n----------------------------------------\n\nTITLE: Logging in with Service Principal using Azure CLI\nDESCRIPTION: This command logs in to Azure using a service principal's credentials. It requires the service principal's ID, password, and the organization's tenant ID.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/azure-cli-sp-tutorial-6.md#2025-04-23_snippet_0\n\nLANGUAGE: azurecli\nCODE:\n```\naz login --service-principal \\\n             --username myServicePrincipalID \\\n             --password myServicePrincipalPassword \\\n             --tenant myOrganizationTenantID\n```\n\n----------------------------------------\n\nTITLE: Displaying Network Interface Information Using Azure CLI\nDESCRIPTION: Retrieves and displays all information for a VM's network interface using the network interface ID stored in a variable.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/azure-cli-vm-tutorial-5.md#2025-04-23_snippet_0\n\nLANGUAGE: azurecli\nCODE:\n```\naz network nic show --ids $nicId\n```\n\n----------------------------------------\n\nTITLE: Setting Up and Managing Azure Batch Accounts and Pools\nDESCRIPTION: This snippet covers creating and managing Azure Batch accounts, including setting up pools for both Linux and Windows environments. It also demonstrates how to create and run jobs in a Batch account.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/samples-azure-cli-samples-repo.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\naz batch account create\naz batch account login\naz batch account keys list\naz batch account set\naz batch account show\naz storage account create\naz keyvault create\naz keyvault set-policy\naz role assignment create\naz batch pool create\naz batch pool resize\naz batch pool show\naz batch pool supported-images list\naz batch pool autoscale disable\naz batch pool autoscale enable\naz batch job create\naz batch task create\n```\n\n----------------------------------------\n\nTITLE: Retrieving Azure VM Admin Username using JMESPath Query and TSV Output in Azure CLI\nDESCRIPTION: This set of commands demonstrates how to retrieve the admin username of a VM using a JMESPath query and store it in a variable. It shows the difference between using default JSON output and TSV output.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/query-azure-cli-concepts.md#2025-04-23_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nUSER=$(az vm show --resource-group QueryDemo --name TestVM --query \"osProfile.adminUsername\")\necho $USER\n\nUSER=$(az vm show --resource-group QueryDemo --name TestVM --query \"osProfile.adminUsername\" --output tsv)\necho $USER\n```\n\n----------------------------------------\n\nTITLE: Setting Default Resource Group in Azure CLI\nDESCRIPTION: This command sets a default resource group using the 'az config set' command. After setting this default, you can omit the resource group parameter in subsequent commands that would normally require it.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/azure-cli-variables.md#2025-04-23_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\naz config set defaults.group=ContosoRGforVM\n```\n\n----------------------------------------\n\nTITLE: Creating a Resource Group with Random ID in PowerShell\nDESCRIPTION: This PowerShell script creates a resource group with a random identifier in the name, using GUID generation to ensure unique resource group names for testing purposes.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/get-started-tutorial-1-prepare-environment.md#2025-04-23_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\n$randomIdentifier = (New-Guid).ToString().Substring(0,8)\n$location=\"eastus\"\n$resourceGroup=\"msdocs-tutorial-rg-$randomIdentifier\"\naz group create --name $resourceGroup --location $location --output json\n```\n\n----------------------------------------\n\nTITLE: Resetting Service Principal Credentials and Storing Password in Bash Variable\nDESCRIPTION: This Bash script demonstrates how to reset a service principal credential and store the new password in a variable using the '--query' parameter and 'tsv' output format.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/format-output-azure-cli.md#2025-04-23_snippet_13\n\nLANGUAGE: azurecli\nCODE:\n```\n# Bash Script\n# reset service principal credentials returning results to a variable\nmyNewPassword=$(az ad sp credential reset --id myServicePrincipalID --query password --output tsv)\n\n# Display the new password (remove this line in production for security)\necho \"New password: $myNewPassword\"\n```\n\n----------------------------------------\n\nTITLE: Listing SQL Containers in Azure Cosmos DB\nDESCRIPTION: This command lists all SQL containers in a specified database of an Azure Cosmos DB account. It provides an overview of existing SQL containers.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/samples-reference-group.md#2025-04-23_snippet_22\n\nLANGUAGE: Azure CLI\nCODE:\n```\naz cosmosdb sql container list\n```\n\n----------------------------------------\n\nTITLE: Setting Azure CLI Output Values as Individual Variables\nDESCRIPTION: Alternative approach to store each value separately by running individual commands for each desired output value.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/azure-cli-vm-tutorial-5.md#2025-04-23_snippet_5\n\nLANGUAGE: azurecli\nCODE:\n```\n$ipId = az network nic show --ids $nicId --query '[ipConfigurations[].publicIPAddress.id]' -o tsv\n$subnetId = az network nic show --ids $nicId --query '[ipConfigurations[].subnet.id]' -o tsv\n```\n\n----------------------------------------\n\nTITLE: Verifying Role Assignment Changes with Azure CLI\nDESCRIPTION: Commands for listing role assignments to verify changes. Includes examples for listing all role assignments, filtering by user, and filtering by subscription.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/azure-cli-sp-tutorial-5.md#2025-04-23_snippet_1\n\nLANGUAGE: azurecli\nCODE:\n```\n# list all role assignments for the current subscription\naz role assignment list --output table\n\n# list role assignments for a user\naz role assignment list --assignee myUserName@contoso.com\n\n# list role assignments for a subscription\naz role assignment list --subscription mySubscriptionID\n```\n\n----------------------------------------\n\nTITLE: Debugging CIDR Notation in Azure CLI Bash Script\nDESCRIPTION: Script to troubleshoot CIDR notation issues by echoing the exact values being read from CSV file, helping identify hidden characters or formatting problems that may cause InvalidCIDRNotation errors.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/create-azure-resources-at-scale.md#2025-04-23_snippet_8\n\nLANGUAGE: azurecli\nCODE:\n```\nwhile IFS=, read -r resourceNo location createRG existingRgName createVnet vnetAddressPrefix subnetAddressPrefixes vmImage publicIpSku adminUser\ndo\n    echo \"resourceNo = $resourceNo\"\n\n    if [ \"$createVnet\" == \"TRUE\" ]; then\n      startTest=\"abc\"\n      endTest=\"xyz\"\n      echo $startTest$vnetAddressPrefix$endTest\n    fi\ndone < <(tail -n +2 $setupFileLocation)\n```\n\n----------------------------------------\n\nTITLE: Filtering Storage Accounts with JMESPath in PowerShell\nDESCRIPTION: This snippet shows how to filter Azure storage accounts using JMESPath queries in PowerShell. It demonstrates the same three filters as the Bash example but with PowerShell-specific syntax for date handling and command continuation.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/get-started-tutorial-3-use-variables.md#2025-04-23_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nrgName=\"<msdocs-tutorial-rg-00000000>\"\n\n# Get a list of all Azure storage accounts that allow blob public access.\naz storage account list --resource-group $rgName `\n                        --query \"[?allowBlobPublicAccess == ``true``].name\"\n\n# Get a list of Azure storage accounts that were created in the last 30 days. Return the results as a table.\n$saDate=Get-Date\n$saDate=$saDate.AddDays(-30).tostring(\"yyyy-mm-dd\")\naz storage account list --resource-group $rgName `\n                        --query \"[?creationTime >='$saDate'].{saName:name, createdTimeStamp:creationTime}\" `\n                        --output table\n\n# Get a list of Azure storage accounts created in this tutorial\naz storage account list --resource-group $rgName `\n                        --query \"[?contains(name, 'msdocs')].{saName:name, saKind:kind, saPrimaryLocation:primaryLocation, createdTimeStamp:creationTime}\" `\n                        --output table\n```\n\n----------------------------------------\n\nTITLE: Managing Databases in Azure SQL Managed Instances with Azure CLI\nDESCRIPTION: Commands for creating and managing databases within Azure SQL Managed Instances.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/samples-reference-group.md#2025-04-23_snippet_38\n\nLANGUAGE: CLI\nCODE:\n```\naz sql midb create\n```\n\n----------------------------------------\n\nTITLE: Querying VM Network Interface ID with Azure CLI (Bash)\nDESCRIPTION: This Bash command retrieves the network interface controller (NIC) object ID of a VM using a JMESPath query. It demonstrates how to extract specific information from the VM's JSON output.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/azure-cli-vm-tutorial-4.md#2025-04-23_snippet_1\n\nLANGUAGE: azurecli\nCODE:\n```\naz vm show --name $vmName \\\n  --resource-group $resourceGroup \\\n  --query 'networkProfile.networkInterfaces[].id' \\\n  --output tsv\n```\n\n----------------------------------------\n\nTITLE: Using the --debug Parameter with Azure CLI\nDESCRIPTION: Demonstrates how to view the complete execution log of an Azure CLI command for deep troubleshooting by using the --debug global parameter, which is useful for submitting bug reports.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/azure-cli-global-parameters.md#2025-04-23_snippet_2\n\nLANGUAGE: azurecli\nCODE:\n```\naz group create --name myrResourceGroup --location eastus --debug\n```\n\n----------------------------------------\n\nTITLE: Creating Tags for Azure Storage Account using PowerShell\nDESCRIPTION: This snippet demonstrates how to create tags for an Azure Storage Account using Azure CLI in a PowerShell environment. It covers various tag creation scenarios including tags with spaces, empty values, and special characters.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/get-started-tutorial-2-environment-syntax.md#2025-04-23_snippet_6\n\nLANGUAGE: azurecli\nCODE:\n```\n# Create new tags. This syntax works with or without quotes around each key-value pair.\naz storage account update --name <msdocssa00000000> `\n                          --resource-group <msdocs-tutorial-rg-00000000> `\n                          --tags Team=t1 Environment=e1\n\n\n# Create new tags containing spaces. You must use quotes.\naz storage account update --name <msdocssa00000000> `\n                          --resource-group <msdocs-tutorial-rg-00000000> `\n                          --tags \"Floor number=f1\" \"Cost center=cc1\"\n\n# Create a new tag with an empty value.\naz storage account update --name <msdocssa00000000> `\n                          --resource-group <msdocs-tutorial-rg-00000000> `\n                          --tags \"Floor number=\"''\"\"\n\n# Create a new tag containing special characters resulting in \"Path\": \"$G:\\myPath\".\n# Nate the backtick as both the line continuation and the PowerShell escape character.\naz storage account update --name <msdocssa00000000> `\n                          --resource-group <msdocs-tutorial-rg-00000000> `\n                          --tags \"Path=`$G:\\myPath\"\n\n# Create a tag from a variable.\n# In PowerShell, prefix your variable name with a dollar sign.\n$newTag=\"tag1=tag value with spaces\"\naz storage account update --name <msdocssa00000000> `\n                          --resource-group <msdocs-tutorial-rg-00000000> `\n                          --tags \"$newTag\"\n```\n\n----------------------------------------\n\nTITLE: Regenerating Azure Container Registry Credentials with POST in Bash\nDESCRIPTION: This snippet demonstrates how to regenerate login credentials for an Azure Container Registry using the POST HTTP method in a Bash environment. It uses the 'regenerateCredential' endpoint to reset the password.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/use-azure-cli-rest-command.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n# Variable block\n$passwordValue=\"password\"\n\naz rest --method post \\\n    --url https://management.azure.com/subscriptions/$subscriptionId/resourceGroups/$resourceGroup/providers/Microsoft.ContainerRegistry/registries/$containerRegistryName/regenerateCredential?api-version=2023-01-01-preview \\\n    --body \"{'name': '$passwordValue'}\"\n```\n\n----------------------------------------\n\nTITLE: Creating Azure SQL Database using Azure CLI\nDESCRIPTION: This snippet shows how to create an Azure SQL database using Azure CLI. It includes variable declarations for resource group, server name, database name, and service objective.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/azure-cli-copilot.md#2025-04-23_snippet_1\n\nLANGUAGE: azurecli\nCODE:\n```\n# Variable block\nresourceroup= \"myResourceGroup\"\nserverName=\"myServerName\"\ndatabaseName=\"myDatabaseName\"\nserviceObjective=\"basic\"\n\naz sql db create --resource-group $resourceGroup --server $serverName --name $databaseName --service-objective $serviceObjective\n```\n\n----------------------------------------\n\nTITLE: Logging in to Azure CLI with Explicit Tenant Specification\nDESCRIPTION: A command to authenticate with Azure CLI using a specific tenant. This is the recommended solution when cross-tenant authentication issues occur, as it explicitly targets the desired tenant.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/authenticate-azure-cli-mfa.md#2025-04-23_snippet_3\n\nLANGUAGE: azurecli\nCODE:\n```\naz login --tenant 00000000-0000-0000-0000-000000000000\n```\n\n----------------------------------------\n\nTITLE: Regenerating Azure Container Registry Credentials with PowerShell\nDESCRIPTION: This snippet demonstrates how to use 'az rest' to regenerate credentials for an Azure Container Registry. It sends a POST request to the Azure management API with a specified password value.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/use-azure-cli-rest-command.md#2025-04-23_snippet_10\n\nLANGUAGE: PowerShell\nCODE:\n```\n# Variable block\n$passwordValue=\"password\"\n\naz rest --method post `\n    --url https://management.azure.com/subscriptions/$subscriptionId/resourceGroups/$resourceGroup/providers/Microsoft.ContainerRegistry/registries/$containerRegistryName/regenerateCredential?api-version=2023-01-01-preview `\n    --body \"{'name': '$passwordValue'}\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Resource Group with Azure CLI\nDESCRIPTION: This command creates a new resource group in Azure. It specifies the location and name of the resource group.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/azure-cli-sp-tutorial-6.md#2025-04-23_snippet_1\n\nLANGUAGE: azurecli\nCODE:\n```\naz group create --location westus --name myResourceGroupName\n```\n\n----------------------------------------\n\nTITLE: Validating CSV File Values for Azure Resource Creation (Bash)\nDESCRIPTION: Reads values from a CSV file and validates them using conditional statements. Outputs resource group, VNet, and VM information for verification.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/create-azure-resources-at-scale.md#2025-04-23_snippet_2\n\nLANGUAGE: azurecli\nCODE:\n```\nIFS=','\nwhile read resourceNo location createRG existingRGName createVnet vnetAddressPrefix subnetAddressPrefix vmImage publicIpSku adminUsername\ndo\n  if [ \"$resourceNo\" = \"1\" ]; then\n    echo \"resourceNo = $resourceNo\"\n    echo \"location = $location\"\n    echo \"\"\n    echo \"RESOURCE GROUP INFORMATION:\"\n    echo \"createRG = $createRG\"\n    if [ \"$createRG\" = \"TRUE\" ]; then\n      newRGName=\"$rgPrefix$random\"\n      echo \"newRGName = $newRGName\"\n    else\n      echo \"existingRGName = $existingRGName\"\n    fi\n    echo \"\"\n    echo \"VNET INFORMATION:\"\n    echo \"createVnet = $createVnet\"\n    if [ \"$createVnet\" = \"TRUE\" ]; then\n      vnetName=\"$vnetPrefix$random\"\n      subnetName=\"$subnetPrefix$random\"\n      echo \"vnetName = $vnetName\"\n      echo \"subnetName = $subnetName\"\n      echo \"vnetAddressPrefix = $vnetAddressPrefix\"\n      echo \"subnetAddressPrefix = $subnetAddressPrefix\"\n    fi\n    echo \"\"\n    echo \"VM INFORMATION:\"\n    vmName=\"$vmPrefix$random\"\n    echo \"vmName = $vmName\"\n    echo \"vmImage = $vmImage\"\n    echo \"vmSku = $publicIpSku\"\n    if [ -z \"$adminUsername\" ]; then\n      echo \"SSH keys will be created\"\n    else\n      echo \"adminUsername = $adminUsername\"\n    fi\n  fi\ndone < \"$csvFileLocation\"\n```\n\n----------------------------------------\n\nTITLE: Creating Managed Applications with Azure CLI\nDESCRIPTION: This snippet demonstrates Azure CLI commands for creating and managing Azure Managed Applications, including defining applications and showing definitions.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/samples-azure-cli-samples-repo.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\naz account show\naz ad group show\naz managedapp create\naz managedapp definition create\naz managedapp definition show\naz role definition list\n```\n\n----------------------------------------\n\nTITLE: Viewing Azure CLI Version Information\nDESCRIPTION: This command displays the version information for Azure CLI, including the LTS release date if applicable.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/azure-cli-support-lifecycle.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\naz version\n```\n\n----------------------------------------\n\nTITLE: Setting Azure Storage Environment Variables in Azure CLI\nDESCRIPTION: This snippet demonstrates how to set environment variables for Azure storage account credentials and use them to list containers. It uses the EXPORT command to set AZURE_STORAGE_ACCOUNT and AZURE_STORAGE_KEY variables.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/use-azure-cli-successfully-bash.md#2025-04-23_snippet_22\n\nLANGUAGE: azurecli\nCODE:\n```\nexport AZURE_STORAGE_ACCOUNT=$storageAccount\nexport AZURE_STORAGE_KEY=$accountKey\naz storage container list # Uses the environment variables to display the list of containers.\n```\n\n----------------------------------------\n\nTITLE: Retrieving Service Principal Information and Logging In with Azure CLI\nDESCRIPTION: Script to retrieve a service principal's appId and tenant information using its display name, then use that information to authenticate. Helps when you don't have the appId or tenant ID readily available.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/azure-cli-sp-tutorial-2.md#2025-04-23_snippet_3\n\nLANGUAGE: azurecli\nCODE:\n```\nspID=$(az ad sp list --display-name myServicePrincipalName --query \"[].{spID:appId}\" --output tsv)\ntenantID=$(az ad sp list --display-name myServicePrincipalName --query \"[].{tenant:appOwnerOrganizationId}\" --output tsv)\necho \"Using appId $spID in tenant $tenantID\"\n\naz login --service-principal \\\n         --username $spID \\\n         --password {paste your password here} \\\n         --tenant $tenantID\n```\n\n----------------------------------------\n\nTITLE: Deleting Azure Container Registry using PowerShell\nDESCRIPTION: This snippet demonstrates how to delete an Azure Container Registry using 'az rest' command in a PowerShell environment. It uses curly braces around the containerRegistryName variable to handle special characters.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/use-azure-cli-rest-command.md#2025-04-23_snippet_13\n\nLANGUAGE: PowerShell\nCODE:\n```\naz rest --method delete `\n    --url https://management.azure.com/subscriptions/$subscriptionId/resourceGroups/$resourceGroup/providers/Microsoft.ContainerRegistry/registries/${containerRegistryName}?api-version=2023-01-01-preview\n```\n\n----------------------------------------\n\nTITLE: Debugging Azure CLI Command Execution\nDESCRIPTION: Demonstrates how to use the --debug parameter to troubleshoot Azure CLI commands, showing both error and success scenarios when creating a resource group.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/use-azure-cli-successfully-troubleshooting.md#2025-04-23_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\n# Error example: Create a resource group, but omit the quotes around the resource group name.\naz group create --location eastus2 --name msdocs-rg-test --debug\n```\n\nLANGUAGE: Bash\nCODE:\n```\n# Correct example: Because the resource group name contains special characters, enclose it in quotes\naz group create --location eastus2 --name \"msdocs-rg-test\" --debug\n```\n\n----------------------------------------\n\nTITLE: Storing Subscription Information in PowerShell Variables\nDESCRIPTION: PowerShell commands to store subscription IDs in variables for use in scripts, either the default subscription or a subscription with a specific name.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/manage-azure-subscriptions-azure-cli.md#2025-04-23_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\n# store the default subscription in a variable\n$subscriptionId = az account list --query \"[?isDefault].id\" --output tsv\nWrite-Host $subscriptionId\n\n# store a subscription of certain name in a variable\n$subscriptionId = az account list --query \"[?name=='my case sensitive subscription full name'].id\" --output tsv\nWrite-Host $subscriptionId\n```\n\n----------------------------------------\n\nTITLE: Using --no-wait for Asynchronous Resource Group Deletion\nDESCRIPTION: This command demonstrates the use of the --no-wait parameter to delete a resource group asynchronously, allowing the console to accept new commands immediately.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/use-azure-cli-successfully-tips.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\naz group delete --name MyResourceGroup --no-wait\n```\n\n----------------------------------------\n\nTITLE: Sample Azure CLI Version Output\nDESCRIPTION: This snippet shows an example output of the 'az version' command, including the LTS release date indicator.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/azure-cli-support-lifecycle.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{  \n  \"azure-cli\": \"2.48.0\",  \n  \"azure-cli-core\": \"2.48.0\",  \n  \"azure-cli-support\": \"LTS-20240521\",  \n  \"azure-cli-telemetry\": \"1.0.8\",  \n  \"extensions\": {  \n  }  \n}\n```\n\n----------------------------------------\n\nTITLE: Setting Default Resource Group and Location\nDESCRIPTION: Command to configure default values for resource group and location to avoid specifying them in every command.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/cheat-sheet-onboarding.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\naz config set defaults.location=westus2 defaults.group=MyResourceGroup\n```\n\n----------------------------------------\n\nTITLE: Deleting Resource Groups in Azure CLI\nDESCRIPTION: These commands demonstrate how to clean up resources by deleting resource groups. The 'az group delete' command removes the specified resource group and all resources it contains.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/azure-cli-variables.md#2025-04-23_snippet_4\n\nLANGUAGE: Bash\nCODE:\n```\naz group delete --name ContosoRGforVM\naz group delete --name ContosoStorageRG\n```\n\n----------------------------------------\n\nTITLE: Retrieving Azure Container Registry Information with GET in PowerShell\nDESCRIPTION: This snippet shows how to retrieve information about an Azure Container Registry using the GET HTTP method in a PowerShell environment. It demonstrates proper variable handling with curly braces for the container registry name.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/use-azure-cli-rest-command.md#2025-04-23_snippet_8\n\nLANGUAGE: powershell\nCODE:\n```\naz rest --method get `\n    --url https://management.azure.com/subscriptions/$subscriptionId/resourceGroups/$resourceGroup/providers/Microsoft.ContainerRegistry/registries/${containerRegistryName}?api-version=2023-01-01-preview \n```\n\n----------------------------------------\n\nTITLE: Configuring Silent Automatic Updates in Azure CLI\nDESCRIPTION: Configures the Azure CLI to perform automatic updates without user confirmation by setting auto-upgrade.prompt to no. This prevents update prompts from interrupting command output in automated workflows.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/update-azure-cli.md#2025-04-23_snippet_1\n\nLANGUAGE: azurecli\nCODE:\n```\naz config set auto-upgrade.prompt=no\n```\n\n----------------------------------------\n\nTITLE: Removing Microsoft Signing Key\nDESCRIPTION: Commands to identify and remove the Microsoft GPG signing key from the RPM database, which should be done if no other Microsoft packages are installed on the system.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/cli-install-linux-dnf.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nMSFT_KEY=`rpm -qa gpg-pubkey /* --qf \"%{version}-%{release} %{summary}\\n\" | grep Microsoft | awk '{print $1}'`\nsudo rpm -e --allmatches gpg-pubkey-$MSFT_KEY\n```\n\n----------------------------------------\n\nTITLE: Saving VM IDs to Variables in CMD\nDESCRIPTION: This CMD script uses a for loop to retrieve running VM IDs and save them to a variable. It then uses the collected IDs to stop all running VMs in parallel.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/use-azure-cli-successfully-tips.md#2025-04-23_snippet_9\n\nLANGUAGE: batch\nCODE:\n```\nECHO OFF\nSETLOCAL\nFOR /F \"tokens=* USEBACKQ\" %%F IN (\n   `az vm list --resource-group VMResources --show-details --query \"[?powerState=='VM running'].id\" --output tsv`\n) DO (\n    SET \"vm_ids=%%F %vm_ids%\"  :: construct the id list\n)\naz vm stop --ids %vm_ids% :: CLI stops all VMs in parallel\n```\n\n----------------------------------------\n\nTITLE: Storing Command Output in a Variable (Bash)\nDESCRIPTION: This Bash script shows how to capture the TSV output of an Azure CLI command into a variable. It stores the current subscription ID for later use in the script.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/format-output-azure-cli.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n# Bash Script\nsubscriptionID=$(az account show --query id --output tsv)\necho \"Using subscription ID $subscriptionID\"\n```\n\n----------------------------------------\n\nTITLE: Creating an Azure Subscription Lock using Azure CLI\nDESCRIPTION: This snippet demonstrates how to create a CanNotDelete lock on an Azure subscription using the az account lock create command. This prevents users from deleting the subscription.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/manage-azure-subscriptions-azure-cli.md#2025-04-23_snippet_10\n\nLANGUAGE: azurecli\nCODE:\n```\naz account lock create --name \"Cannot delete subscription\" --lock-type CanNotDelete\n```\n\n----------------------------------------\n\nTITLE: Saving VM IDs to Variables in PowerShell\nDESCRIPTION: This PowerShell script retrieves running VM IDs and saves them to a variable. It then uses the collected IDs to stop all running VMs in parallel using the Azure CLI.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/use-azure-cli-successfully-tips.md#2025-04-23_snippet_10\n\nLANGUAGE: powershell\nCODE:\n```\n$vm_ids=(az vm list --resource-group VMResources --show-details --query \"[?powerState=='VM running'].id\" --output tsv)\naz vm stop --ids $vm_ids # CLI stops all VMs in parallel\n```\n\n----------------------------------------\n\nTITLE: Passing JSON from a File to Azure CLI\nDESCRIPTION: Example showing how to use a JSON file as a parameter value for complex JSON structures in Azure CLI commands.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/use-azure-cli-successfully-shorthand.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\naz some-command --contact address.details=./address_details.JSON\n```\n\n----------------------------------------\n\nTITLE: Retrieving Access Tokens with Azure CLI\nDESCRIPTION: Demonstrates how to use Azure CLI commands to get access tokens for the active subscription or a specific subscription. This is an alternative to using the deprecated accessTokens.json file.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/msal-based-azure-cli.md#2025-04-23_snippet_0\n\nLANGUAGE: azurecli\nCODE:\n```\n# get the active subscription\naz account show --output table\n\n# get access token for the active subscription\naz account get-access-token\n\n# get access token for a specific subscription\naz account get-access-token --subscription \"<subscription ID or name>\"\n```\n\n----------------------------------------\n\nTITLE: Getting Help for VM Commands in Azure CLI\nDESCRIPTION: Command to display help information for the VM command group, showing all available subgroups related to virtual machine management.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/get-started-with-azure-cli.md#2025-04-23_snippet_2\n\nLANGUAGE: azurecli-interactive\nCODE:\n```\naz vm --help\n```\n\n----------------------------------------\n\nTITLE: Building Python 3 from Source for Azure CLI\nDESCRIPTION: Commands to download, configure, and install Python 3.6.9 from source with OpenSSL 1.1 support, which is necessary for Azure CLI on systems without native Python 3 packages.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/cli-install-linux-dnf.md#2025-04-23_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nPYTHON_VERSION=\"3.6.9\"\nPYTHON_SRC_DIR=$(mktemp -d)\nwget -qO- https://www.python.org/ftp/python/$PYTHON_VERSION/Python-$PYTHON_VERSION.tgz | tar -xz -C \"$PYTHON_SRC_DIR\"\ncd $PYTHON_SRC_DIR/Python-$PYTHON_VERSION\n./configure --prefix=/usr --with-openssl=/usr/local/ssl\nmake\nsudo make install\n```\n\n----------------------------------------\n\nTITLE: Querying VM Information with Azure CLI\nDESCRIPTION: This command retrieves a list of VMs in the QueryDemo resource group, selecting specific properties (Name, OS, and admin username) using a JMESPath query.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/query-azure-cli-concepts.md#2025-04-23_snippet_7\n\nLANGUAGE: azurecli\nCODE:\n```\naz vm list --resource-group QueryDemo --query \"[].{Name:name, OS:storageProfile.osDisk.osType, admin:osProfile.adminUsername}\"\n```\n\n----------------------------------------\n\nTITLE: Querying Storage Account Table Endpoint with JMESPath in Azure CLI\nDESCRIPTION: This command retrieves the primary endpoint URL for tables in a specific storage account. It uses the --query parameter to extract only the table endpoint from the storage account properties.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/query-azure-cli-examples.md#2025-04-23_snippet_2\n\nLANGUAGE: azurecli\nCODE:\n```\naz storage account show --resource-group QueryDemo --name mystorageaccount --query \"primaryEndpoints.table\"\n```\n\n----------------------------------------\n\nTITLE: Error Handling with $? Variable in PowerShell for Azure CLI\nDESCRIPTION: This snippet demonstrates how to use the $? automatic variable to check for errors after executing an Azure CLI command in PowerShell. It creates a resource group and checks if the operation was successful.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/use-azure-cli-successfully-powershell.md#2025-04-23_snippet_12\n\nLANGUAGE: PowerShell\nCODE:\n```\n# Script for a PowerShell scripting language\n\naz group create --name MyResourceGroup\nif ($? -eq $false) {\n    Write-Error \"Error creating resource group.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Available Azure CLI Extensions\nDESCRIPTION: Command to list all available extensions for the Azure CLI with output formatted as a table. This helps users discover available extensions they can install and use.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/azure-cli-extensions-list.md#2025-04-23_snippet_0\n\nLANGUAGE: azurecli\nCODE:\n```\naz extension list-available --output table\n```\n\n----------------------------------------\n\nTITLE: Installing Azure CLI Without Dependencies\nDESCRIPTION: Commands to download and install the Azure CLI RPM package without checking dependencies, which is useful when dependencies like Python 3 have been manually installed from source.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/cli-install-linux-dnf.md#2025-04-23_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nsudo dnf download azure-cli\nsudo rpm -ivh --nodeps azure-cli-*.rpm\n```\n\n----------------------------------------\n\nTITLE: Using Full Value Shorthand Syntax in Azure CLI\nDESCRIPTION: Example of how to pass a complete JSON structure as a flattened string in a single parameter using full value shorthand syntax.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/use-azure-cli-successfully-shorthand.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\naz some-command --contact \"{name:Bill,age:20,paid:true,emails:[Bill@microsoft.com,Bill@outlook.com],address:{country:USA,company:Microsoft,details:{line1:'15590 NE 31st St',line2:'Redmond, WA'}}}\"\n```\n\n----------------------------------------\n\nTITLE: Checking Active Azure Subscription\nDESCRIPTION: This Azure CLI command is used to display details of the currently active Azure subscription. It's commonly used after logging in to verify the account context.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/install-azure-cli-windows.md#2025-04-23_snippet_1\n\nLANGUAGE: Azure CLI\nCODE:\n```\naz account show\n```\n\n----------------------------------------\n\nTITLE: Subtracting Days and Using a Variable in Bash for Azure Storage Query\nDESCRIPTION: Creates a date variable representing 30 days ago and uses it in an Azure CLI query to list storage accounts created after that date. The query returns storage account name, ID, and SKU information.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/get-started-tutorial-2-environment-syntax.md#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nsaDate=$(date +%F -d \"-30days\")\naz storage account list --resource-group <msdocs-tutorial-rg-00000000> ^\n    --query \"[?creationTime >='$saDate'].{saName:name, saID: id, sku: sku.name}\"\n```\n\n----------------------------------------\n\nTITLE: Updating and Displaying Container Metadata in Azure CLI\nDESCRIPTION: This snippet shows how to update and display metadata for an Azure storage container. It uses the az storage container metadata update command to set metadata and az storage container metadata show to display it.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/use-azure-cli-successfully-bash.md#2025-04-23_snippet_23\n\nLANGUAGE: azurecli\nCODE:\n```\nmetadata=\"key=value pie=delicious\" # Define metadata\naz storage container metadata update \\\n    --name $container \\\n    --metadata $metadata # Update the metadata\naz storage container metadata show \\\n    --name $containerName # Show the metadata\n```\n\n----------------------------------------\n\nTITLE: Filtering Public IP Addresses with Variables in Bash using Azure CLI\nDESCRIPTION: This command lists the IDs of public IP addresses containing a specific substring stored in a Bash variable. It filters for non-null IP addresses, then filters those containing the substring, and returns just the ID field.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/query-azure-cli-examples.md#2025-04-23_snippet_8\n\nLANGUAGE: azurecli\nCODE:\n```\nIP=\"20.127\"\naz network public-ip list --query \"[?ipAddress!=null]|[?contains(ipAddress, '$IP')].[id]\" --output tsv\n```\n\n----------------------------------------\n\nTITLE: Managing Transparent Data Encryption for SQL Managed Instances with Azure CLI\nDESCRIPTION: Commands for implementing Bring Your Own Key (BYOK) encryption for Azure SQL Managed Instances, allowing customers to use their own encryption keys.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/samples-reference-group.md#2025-04-23_snippet_37\n\nLANGUAGE: CLI\nCODE:\n```\naz sql mi key create\n```\n\nLANGUAGE: CLI\nCODE:\n```\naz sql mi tde-key set\n```\n\n----------------------------------------\n\nTITLE: Querying Single and Nested Values from Azure CLI Output in Bash\nDESCRIPTION: Commands demonstrating how to query single values and nested values from JSON output, with options to remove quotation marks using TSV format for easier consumption by other commands.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/use-azure-cli-successfully-bash.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\naz account show --query name # Querying a single value\naz account show --query name -o tsv # Removes quotation marks from the output\n\naz account show --query user.name # Querying a nested value\naz account show --query user.name -o tsv # Removes quotation marks from the output\n```\n\n----------------------------------------\n\nTITLE: Removing Azure CLI Repository Configuration on Debian/Ubuntu\nDESCRIPTION: Removes the Azure CLI repository information file from APT sources. This prevents the system from finding Azure CLI packages in future updates.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/cli-install-linux-apt.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nsudo rm /etc/apt/sources.list.d/azure-cli.sources\n```\n\n----------------------------------------\n\nTITLE: Handling Variable Output Formats in Azure CLI\nDESCRIPTION: Illustrates the importance of specifying the correct output format when storing Azure resource IDs in variables, demonstrating the difference between JSON and TSV outputs.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/use-azure-cli-successfully-troubleshooting.md#2025-04-23_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\n# Get a subscription that contains a name or phrase\nsubscriptionID=$(az account list --query \"[?contains(name,'my case sensitive search phrase')].id\")\necho $subscriptionID\n\n# Try to set your subscription to the new ID\naz account set --subscription $subscriptionID\n```\n\nLANGUAGE: Bash\nCODE:\n```\n# Get the active subscription\nsubscriptionID=$(az account list --query \"[?contains(name,'my case sensitive search phrase')].id\" --output tsv)\necho $subscriptionID\n\n# Successfully set your subscription to the new ID\naz account set --subscription $subscriptionID\n```\n\n----------------------------------------\n\nTITLE: Querying Azure Account Information with JMESPath in Azure CLI\nDESCRIPTION: This command retrieves the tenant ID and subscription ID of the current Azure account. It formats the output as a JSON object with specific field names using the --query parameter.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/query-azure-cli-examples.md#2025-04-23_snippet_0\n\nLANGUAGE: azurecli\nCODE:\n```\naz account show --query \"{tenantId:tenantId,subscriptionid:id}\"\n```\n\n----------------------------------------\n\nTITLE: Listing Storage Accounts with Spaced Column Names in Bash\nDESCRIPTION: Azure CLI command to list storage accounts with custom column names containing spaces. This example uses Bash-specific quoting with single quotes around the entire query parameter.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/use-azure-cli-successfully-powershell.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\naz storage account list --query '[].{\"SA Name\":name, \"Primary endpoint\":primaryEndpoints.blob}' --output table\n```\n\n----------------------------------------\n\nTITLE: Running Azure CLI in Docker Container\nDESCRIPTION: Command to launch Azure CLI in a Docker container. This provides an isolated environment for running Azure CLI commands without installing it directly on your system.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/cheat-sheet-onboarding.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -it mcr.microsoft.com/azure-cli\n```\n\n----------------------------------------\n\nTITLE: Adding Azure CLI repository to zypper on SUSE\nDESCRIPTION: Creates a local repository configuration for Azure CLI in the zypper package manager. This makes the Azure CLI packages available for installation from Microsoft's repositories.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/cli-install-linux-zypper.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo zypper addrepo --name 'Azure CLI' --check https://packages.microsoft.com/yumrepos/azure-cli azure-cli\n```\n\n----------------------------------------\n\nTITLE: Deleting a Single Azure Storage Container in Azure CLI\nDESCRIPTION: This snippet demonstrates how to delete a single Azure storage container using the az storage container delete command.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/use-azure-cli-successfully-bash.md#2025-04-23_snippet_24\n\nLANGUAGE: azurecli\nCODE:\n```\naz storage container delete \\\n    --name $container\n```\n\n----------------------------------------\n\nTITLE: Filtering Linux VMs with Azure CLI\nDESCRIPTION: This command lists all Linux VMs in the QueryDemo resource group, displaying their names and admin usernames in a table format.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/query-azure-cli-concepts.md#2025-04-23_snippet_10\n\nLANGUAGE: azurecli\nCODE:\n```\naz vm list --resource-group QueryDemo --query \"[?storageProfile.osDisk.osType=='Linux'].{Name:name,  admin:osProfile.adminUsername}\" --output table\n```\n\n----------------------------------------\n\nTITLE: Managing MariaDB Servers with Azure CLI\nDESCRIPTION: This snippet shows Azure CLI commands for creating, configuring, and managing Azure Database for MariaDB servers, including backups, restores, and server logs.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/samples-azure-cli-samples-repo.md#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\naz mariadb server create\naz mariadb server restore\naz mariadb server configuration list\naz mariadb server configuration set\naz mariadb server configuration show\naz mariadb server firewall-rule create\naz mariadb server vnet-rule create\naz mariadb server update\naz mariadb server-logs download\naz mariadb server-logs list\n```\n\n----------------------------------------\n\nTITLE: Updating Azure CLI using Homebrew\nDESCRIPTION: This command updates the local Homebrew repository information and upgrades the Azure CLI package to the latest version available.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/install-azure-cli-macos.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nbrew update && brew upgrade azure-cli\n```\n\n----------------------------------------\n\nTITLE: Updating VM with JSON String in Azure CLI\nDESCRIPTION: This command shows how to use a JSON string to simplify the az vm update command when attaching a new data disk to a virtual machine.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/use-azure-cli-successfully-tips.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\naz vm update --resource-group VMResources --name virtual-machine-01 \\\n--add storageProfile.dataDisks \"{\\\"createOption\\\": \\\"Attach\\\", \\\"managedDisk\\\":\n   {\\\"id\\\":\n   \\\"/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/yg/providers/Microsoft.Compute/disks/yg-disk\\\"},\n   \\\"lun\\\": 1}\"\n```\n\n----------------------------------------\n\nTITLE: Filtering Azure Resources with Complex Queries using PowerShell\nDESCRIPTION: This snippet demonstrates how to use complex queries to filter Azure resources using Azure CLI in a PowerShell environment. It includes examples of filtering by numeric values, boolean values, and dates.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/get-started-tutorial-2-environment-syntax.md#2025-04-23_snippet_10\n\nLANGUAGE: azurecli\nCODE:\n```\naz storage account list --resource-group <msdocs-tutorial-rg-00000000> `\n                       --query \"[?allowBlobPublicAccess == ``true``].id\"\n\n# include time\naz storage account list --resource-group <msdocs-tutorial-rg-00000000> `\n    --query \"[?creationTime >='2021-11-15T19:14:27.103127+00:00'].{saName:name, saID: id, sku: sku.name}\"\n\n# exclude time\naz storage account list --resource-group <msdocs-tutorial-rg-00000000> `\n    --query \"[?creationTime >='2021-11-15'].{saName:name, saID: id, sku: sku.name}\"\n\n# subtract days and use a variable\n$saDate=$saDate.AddDays(-30).tostring(\"yyyy-mm-dd\")\naz storage account list --resource-group <msdocs-tutorial-rg-00000000> `\n    --query \"[?creationTime >='$saDate'].{saName:name, saID: id, sku: sku.name}\"\n```\n\n----------------------------------------\n\nTITLE: Setting Azure Subscription with Azure CLI\nDESCRIPTION: Demonstrates how to change the active subscription for Azure CLI commands using the --subscription parameter with a subscription ID.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/azure-cli-global-parameters.md#2025-04-23_snippet_5\n\nLANGUAGE: azurecli\nCODE:\n```\naz account set --subscription \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n```\n\n----------------------------------------\n\nTITLE: Refreshing the shell's command cache\nDESCRIPTION: Reloads the shell's command cache after uninstalling Azure CLI to ensure the az command is no longer found. This applies to bash and zsh shells.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/cli-install-linux-script.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nhash -r\n```\n\n----------------------------------------\n\nTITLE: Querying Public IP and Subnet IDs with Custom JSON Keys in PowerShell\nDESCRIPTION: PowerShell version of extracting the public IP address and subnet object IDs from a network interface and formatting them as a JSON object with custom keys.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/azure-cli-vm-tutorial-5.md#2025-04-23_snippet_2\n\nLANGUAGE: azurecli\nCODE:\n```\naz network nic show --ids $nicId `\n  --query '{IP:ipConfigurations[].publicIPAddress.id, Subnet:ipConfigurations[].subnet.id}' `\n  -o json\n```\n\n----------------------------------------\n\nTITLE: Querying Cognitive Services Endpoint with JMESPath in Azure CLI\nDESCRIPTION: This command retrieves the endpoint URL for a specific cognitive services account. It uses the --query parameter to extract only the endpoint property from the account properties.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/query-azure-cli-examples.md#2025-04-23_snippet_7\n\nLANGUAGE: azurecli\nCODE:\n```\naz cognitiveservices account show --resource-group QueryDemo --name DemoAccount --query \"properties.endpoint\"\n```\n\n----------------------------------------\n\nTITLE: Formatting Output as Table in Azure CLI\nDESCRIPTION: Shows how to format the output of an Azure CLI command as a table using the --output parameter, which makes the results more readable for certain data types.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/azure-cli-global-parameters.md#2025-04-23_snippet_6\n\nLANGUAGE: azurecli\nCODE:\n```\naz vm list --resource-group myResourceGroup --output table\n```\n\n----------------------------------------\n\nTITLE: Using Null to Reset Property in Update Command\nDESCRIPTION: Example of how to use null to unset a property in an update command using Azure CLI shorthand syntax.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/use-azure-cli-successfully-shorthand.md#2025-04-23_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\naz some-update-command --contact address=null\n```\n\n----------------------------------------\n\nTITLE: Deleting Multiple Azure Storage Containers in a Loop using Azure CLI\nDESCRIPTION: This snippet demonstrates how to delete multiple Azure storage containers in a loop. It iterates through a list of container names and uses the az storage container delete command for each container.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/use-azure-cli-successfully-bash.md#2025-04-23_snippet_26\n\nLANGUAGE: azurecli\nCODE:\n```\nfor row in $containerList\ndo\n    tmpName=$(echo $row | sed -e 's/\\r//g')\n    az storage container delete \\\n    --name $tmpName \ndone\n```\n\n----------------------------------------\n\nTITLE: Listing Resource Group Locks\nDESCRIPTION: Displays all locks applied to a resource group in a table format. This command helps administrators view the protection status of resource groups.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/manage-azure-groups-azure-cli.md#2025-04-23_snippet_10\n\nLANGUAGE: azurecli\nCODE:\n```\naz group lock list --output table\n```\n\n----------------------------------------\n\nTITLE: Creating MySQL Flexible Server with VNet Integration\nDESCRIPTION: This script demonstrates how to create a MySQL Flexible Server with VNet integration, including creating necessary network resources using the Azure CLI.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/samples-azure-cli-samples-repo.md#2025-04-23_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\naz mysql flexible-server create\naz mysql flexible-server list-skus\naz network private-dns zone create\naz network vnet create\naz network vnet list-endpoint-services\naz network vnet subnet create\naz network vnet subnet show\naz vm create\naz vm open-port\n```\n\n----------------------------------------\n\nTITLE: Manually Removing Azure CLI Extensions\nDESCRIPTION: This bash command manually removes an extension by deleting its directory from the extension installation location.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/azure-cli-extensions-overview.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nrm -rf $AZURE_EXTENSION_DIR/<extension-name>\n```\n\n----------------------------------------\n\nTITLE: Connecting to an Azure VM via SSH\nDESCRIPTION: Command to establish an SSH connection to the newly created virtual machine using its public IP address, which is provided in the output of the VM creation command.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/azure-cli-vm-tutorial-3.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nssh <PUBLIC_IP_ADDRESS>\n```\n\n----------------------------------------\n\nTITLE: Filtering Azure Resources with Complex Queries using Bash\nDESCRIPTION: This snippet demonstrates how to use complex queries to filter Azure resources using Azure CLI in a Bash environment. It includes examples of filtering by numeric values, boolean values, and dates.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/get-started-tutorial-2-environment-syntax.md#2025-04-23_snippet_9\n\nLANGUAGE: azurecli\nCODE:\n```\naz storage account list --resource-group <msdocs-tutorial-rg-00000000> \\\n    --query \"[?allowBlobPublicAccess == \\`true\\`].id\"\n\n# include time\naz storage account list --resource-group <msdocs-tutorial-rg-00000000> \\\n    --query \"[?creationTime >='2021-11-15T19:14:27.103127+00:00'].{saName:name, saID: id, sku: sku.name}\"\n\n# exclude time\naz storage account list --resource-group <msdocs-tutorial-rg-00000000> \\\n    --query \"[?creationTime >='2021-11-15'].{saName:name, saID: id, sku: sku.name}\"\n\n# subtract days and use a variable\nsaDate=$(date +%F -d \"-30days\")\naz storage account list --resource-group <msdocs-tutorial-rg-00000000> \\\n    --query \"[?creationTime >='$saDate'].{saName:name, saID: id, sku: sku.name}\"\n```\n\n----------------------------------------\n\nTITLE: Secure Password Entry for Service Principal in Bash\nDESCRIPTION: A more secure method to authenticate with a service principal in Bash by reading the password securely without displaying it on the console. Uses the read command with -s flag to hide input.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/azure-cli-sp-tutorial-2.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nread -sp \"Azure password: \" AZ_PASS && echo && az login --service-principal -u <app-id> -p $AZ_PASS --tenant <tenant>\n```\n\n----------------------------------------\n\nTITLE: Setting Azure Subscription with Azure CLI\nDESCRIPTION: This command demonstrates how to switch between Azure subscriptions using the Azure CLI. It uses the 'az account set' command with the '--subscription' parameter to specify the subscription name.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/what-is-azure-cli.md#2025-04-23_snippet_0\n\nLANGUAGE: azurecli\nCODE:\n```\naz account set --subscription \"my subscription name\"\n```\n\n----------------------------------------\n\nTITLE: Querying VMs with Large Disk Sizes in Bash using Azure CLI\nDESCRIPTION: This command lists virtual machines with OS disks larger than or equal to 50GB. It returns a formatted table with the VM name, admin username, and disk size in gigabytes. The backtick is used to escape the number in the JMESPath query.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/query-azure-cli-examples.md#2025-04-23_snippet_3\n\nLANGUAGE: azurecli\nCODE:\n```\naz vm list --resource-group QueryDemo --query \"[?storageProfile.osDisk.diskSizeGb >=\\`50\\`].{Name:name,  admin:osProfile.adminUsername, DiskSize:storageProfile.osDisk.diskSizeGb }\" --output table\n```\n\n----------------------------------------\n\nTITLE: Running Azure CLI Interactive With Error Suppression\nDESCRIPTION: Shows how to use the --only-show-errors parameter to suppress warnings when running Azure CLI in interactive mode, displaying only essential information.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/azure-cli-global-parameters.md#2025-04-23_snippet_4\n\nLANGUAGE: azurecli\nCODE:\n```\naz interactive --only-show-errors\n```\n\n----------------------------------------\n\nTITLE: Using Single Quotes in Full Value Format\nDESCRIPTION: Example of using single quotes within full value shorthand syntax to handle values containing special characters like spaces and brackets.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/use-azure-cli-successfully-shorthand.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\naz some-command --contact \"{name:'Bill RP',age:20,paid:true,data:'{a: [1, 2]}'}\"\n```\n\n----------------------------------------\n\nTITLE: Updating an Azure Container Registry using PATCH in PowerShell\nDESCRIPTION: This snippet shows how to update an existing Azure Container Registry using the PATCH HTTP method in a PowerShell environment. It demonstrates proper variable handling when question marks are present in URLs.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/use-azure-cli-rest-command.md#2025-04-23_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\n#Variable Block\n$skuName=\"Premium\"\n\naz rest --method patch `\n    --url https://management.azure.com/subscriptions/$subscriptionId/resourceGroups/$resourceGroup/providers/Microsoft.ContainerRegistry/registries/${containerRegistryName}?api-version=2023-01-01-preview `\n    --body \"{'location': '$locationName', 'sku': {'name': '$skuName'}, 'properties': {'adminUserEnabled': '$propertyValue'}}\"\n```\n\n----------------------------------------\n\nTITLE: Checking Azure CLI and PowerShell Versions\nDESCRIPTION: Commands to determine the installed versions of Azure CLI and PowerShell in your environment, which is important for understanding compatibility and available features.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/use-azure-cli-successfully-powershell.md#2025-04-23_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\naz version\n\n$PSVersionTable\n```\n\n----------------------------------------\n\nTITLE: Creating SQL Container in Azure Cosmos DB\nDESCRIPTION: This command creates a new SQL container in an Azure Cosmos DB account. It is used for setting up data storage for SQL API.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/samples-reference-group.md#2025-04-23_snippet_21\n\nLANGUAGE: Azure CLI\nCODE:\n```\naz cosmosdb sql container create\n```\n\n----------------------------------------\n\nTITLE: Using Previous Command Results in Queries\nDESCRIPTION: Examples showing how to use the results of previous commands as arguments for subsequent commands using JMESPath queries, including creating VMs and filtering resources.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/interactive-azure-cli.md#2025-04-23_snippet_6\n\nLANGUAGE: azurecli-interactive\nCODE:\n```\naz>> vm create --name <myVirtualMachine> --resource-group <myResourceGroup> --image Ubuntu2204 --no-wait -o json\naz>> group list -o json\n\n# List all the resources of type `virtualMachine`on the first group whose location is westeurope. \naz>> resource list -g \"?? [?location=='westeurope'].name | [0]\" --query \"[?type=='Microsoft.Compute/virtualMachines'].name\n```\n\n----------------------------------------\n\nTITLE: Validating Script Logic for Azure Resource Creation (PowerShell)\nDESCRIPTION: PowerShell version of script logic validation for Azure resource creation. Previews resource creation steps based on CSV input.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/create-azure-resources-at-scale.md#2025-04-23_snippet_5\n\nLANGUAGE: azurecli\nCODE:\n```\n$csv = Import-Csv $csvFileLocation\nforeach ($row in $csv) {\n    $random = -join ((65..90) + (97..122) | Get-Random -Count 8 | % {[char]$_})\n    Write-Host \"resourceNo = $($row.resourceNo)\"\n    Write-Host \"createRG = $($row.createRG)\"\n    Write-Host \"createVnet = $($row.createVnet)\"\n    if ($row.createRG -eq \"TRUE\") {\n        $newRGName = \"$rgPrefix$random\"\n        Write-Host \"Will create RG $newRGName\"\n        if ($row.createVnet -eq \"TRUE\") {\n            $vnetName = \"$vnetPrefix$random\"\n            Write-Host \"Will create VNet $vnetName in RG $newRGName\"\n            $vmName = \"$vmPrefix$random\"\n            Write-Host \"Will create VM $vmName within Vnet $vnetName in RG $newRGName\"\n        } else {\n            $vmName = \"$vmPrefix$random\"\n            Write-Host \"Will create VM $vmName without Vnet in RG $newRGName\"\n        }\n    } else {\n        $vmName = \"$vmPrefix$random\"\n        Write-Host \"Will create VM $vmName without Vnet in RG $($row.existingRGName)\"\n    }\n    Write-Host \"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Storage Accounts with Date in Bash\nDESCRIPTION: Azure CLI command in Bash that filters storage accounts by creation date and displays results with custom column names. Uses double quotes with backslash escapes for the query parameter.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/use-azure-cli-successfully-powershell.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\naz storage account list --query \"[?creationTime >='2024-02-01'].{\\\"SA Name\\\":name,\\\"Primary endpoint\\\":primaryEndpoints.blob}\" --output table\n```\n\n----------------------------------------\n\nTITLE: Setting Variables for Azure Resource Creation Script (PowerShell)\nDESCRIPTION: PowerShell version of variable setup for Azure resource creation script. Defines subscription ID, file locations, and resource naming variables.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/create-azure-resources-at-scale.md#2025-04-23_snippet_1\n\nLANGUAGE: azurecli\nCODE:\n```\n$subscriptionID = \"<your-subscription-id>\"\n$csvFileLocation = \"$env:USERPROFILE\\CloudDrive\\azure-resources.csv\"\n$logFileLocation = \"$env:USERPROFILE\\CloudDrive\\azure-resources-log.txt\"\n\n$random = -join ((65..90) + (97..122) | Get-Random -Count 8 | % {[char]$_})\n$rgPrefix = \"msdocs-rg-\"\n$vnetPrefix = \"msdocs-vnet-\"\n$subnetPrefix = \"msdocs-subnet-\"\n$vmPrefix = \"msdocs-vm-\"\n\n$createRG = \"\"\n$existingRGName = \"\"\n$createVnet = \"\"\n$vnetAddressPrefix = \"\"\n$subnetAddressPrefix = \"\"\n$vmImage = \"\"\n$publicIpSku = \"\"\n$adminUsername = \"\"\n```\n\n----------------------------------------\n\nTITLE: Using the --help Parameter with Azure CLI\nDESCRIPTION: Demonstrates how to get help information for an Azure CLI command by using the --help global parameter, which displays reference information including available subgroups and parameters.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/azure-cli-global-parameters.md#2025-04-23_snippet_0\n\nLANGUAGE: azurecli\nCODE:\n```\naz group create --name myResourceGroup --location eastus --help\n```\n\n----------------------------------------\n\nTITLE: Filtering VMs by Disk Size with Azure CLI\nDESCRIPTION: This command filters VMs based on their OS disk size, displaying VMs with a disk size of 50 GB or larger.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/query-azure-cli-concepts.md#2025-04-23_snippet_11\n\nLANGUAGE: azurecli\nCODE:\n```\naz vm list --resource-group QueryDemo --query \"[?storageProfile.osDisk.diskSizeGb >=\\`50\\`].{Name:name,  admin:osProfile.adminUsername, DiskSize:storageProfile.osDisk.diskSizeGb }\" --output table\n```\n\n----------------------------------------\n\nTITLE: Checking Azure CLI Version\nDESCRIPTION: Command to check the version of Azure CLI installed in your environment. Azure Cloud Shell always has the latest version pre-installed.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/get-started-with-azure-cli.md#2025-04-23_snippet_0\n\nLANGUAGE: azurecli-interactive\nCODE:\n```\naz version\n```\n\n----------------------------------------\n\nTITLE: Creating Tags for Azure Storage Account using CMD\nDESCRIPTION: This snippet demonstrates how to create tags for an Azure Storage Account using Azure CLI in a CMD environment. It covers various tag creation scenarios including tags with spaces and empty values.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/get-started-tutorial-2-environment-syntax.md#2025-04-23_snippet_8\n\nLANGUAGE: azurecli\nCODE:\n```\n:: Create new tags. This syntax works with or without quotes around each key-value pair.\naz storage account update --name <msdocssa00000000> ^\n                          --resource-group <msdocs-tutorial-rg-00000000> ^\n                          --tags Team=t1 Environment=e1\n\n:: Create new tags containing spaces. You must use quotes.\naz storage account update --name <msdocssa00000000> ^\n                          --resource-group <msdocs-tutorial-rg-00000000> ^\n                          --tags \"Floor number=f1\" \"Cost center=cc1\"\n\n:: Create a new tag with an empty value.\naz storage account update --name <msdocssa00000000> ^\n                          --resource-group <msdocs-tutorial-rg-00000000> ^\n                          --tags \"Floor number=\"''\"\"\n```\n\n----------------------------------------\n\nTITLE: Setting AZURE_CONFIG_DIR in Different Shells\nDESCRIPTION: These commands show how to set the AZURE_CONFIG_DIR environment variable in Bash, PowerShell, and CMD to isolate Azure CLI configuration folders for concurrent execution.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/use-azure-cli-successfully-tips.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nexport AZURE_CONFIG_DIR=/my/config/dir\n```\n\nLANGUAGE: powershell\nCODE:\n```\n$env:AZURE_CONFIG_DIR='D:\\my\\config\\dir'\n```\n\nLANGUAGE: cmd\nCODE:\n```\nset AZURE_CONFIG_DIR=D:\\my\\config\\dir\n```\n\n----------------------------------------\n\nTITLE: Showing Azure Cosmos DB Account Details\nDESCRIPTION: This command displays the details of a specific Azure Cosmos DB account. It provides comprehensive information about the account configuration and settings.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/samples-reference-group.md#2025-04-23_snippet_20\n\nLANGUAGE: Azure CLI\nCODE:\n```\naz cosmosdb show\n```\n\n----------------------------------------\n\nTITLE: Retrieving Azure Container Registry Info in Bash\nDESCRIPTION: Demonstrates how to use the Azure REST API to retrieve information about an Azure Container Registry using Azure CLI in a Bash environment.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/use-azure-cli-successfully-powershell.md#2025-04-23_snippet_8\n\nLANGUAGE: azurecli\nCODE:\n```\n# Script for a Bash scripting language\n\n# Variable block\nlet \"randomIdentifier=$RANDOM*$RANDOM\"\nsubscriptionId=\"00000000-0000-0000-0000-000000000000\"\nresourceGroup=\"msdocs-app-rg$randomIdentifier\"\ncontainerRegistryName=\"msdocscr$randomIdentifier\"\n\n# prior to this GET example, the resource group and container registry were created in the article.\n\naz rest --method get --url https://management.azure.com/subscriptions/$subscriptionId/resourceGroups/$resourceGroup/providers/Microsoft.ContainerRegistry/registries/$containerRegistryName?api-version=2023-01-01-preview\n```\n\n----------------------------------------\n\nTITLE: Creating and Managing Azure Storage Accounts with Azure CLI\nDESCRIPTION: Commands for creating, showing, and managing Azure Storage accounts, which are required for storing blobs, files, tables, and queues in Azure.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/samples-reference-group.md#2025-04-23_snippet_41\n\nLANGUAGE: CLI\nCODE:\n```\naz storage account create\n```\n\nLANGUAGE: CLI\nCODE:\n```\naz storage account show\n```\n\nLANGUAGE: CLI\nCODE:\n```\naz storage account show-connection-string\n```\n\n----------------------------------------\n\nTITLE: Listing Multiple VMs with Flattened Array Properties\nDESCRIPTION: Command that lists all VMs in a resource group and extracts specific properties using array flattening with the [] operator, returning the name, OS type, and admin username of each VM.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/query-azure-cli-concepts.md#2025-04-23_snippet_6\n\nLANGUAGE: azurecli-interactive\nCODE:\n```\naz vm list --resource-group QueryDemo --query \"[].{Name:name, OS:storageProfile.osDisk.osType, admin:osProfile.adminUsername}\"\n```\n\n----------------------------------------\n\nTITLE: Querying Boolean Values and Filtering Arrays in Azure CLI\nDESCRIPTION: Commands demonstrating how to query and filter arrays based on boolean values, extract specific properties, and store results in variables for further processing in Bash scripts.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/use-azure-cli-successfully-bash.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\naz account list\naz account list --query \"[?isDefault]\" # Returns the default subscription\naz account list --query \"[?isDefault]\" -o table # Returns the default subscription as a table\naz account list --query \"[?isDefault].[name,id]\" # Returns the name and id of the default subscription\naz account list --query \"[?isDefault].[name,id]\" -o table # Returns the name and id of the default subscription as a table\naz account list --query \"[?isDefault].{SubscriptionName: name, SubscriptionId: id}\" -o table # Returns the name and id of the default subscription as a table with friendly names\n\naz account list --query \"[?isDefault == \\`false\\`]\" # Returns all non-default subscriptions, if any\naz account list --query \"[?isDefault == \\`false\\`].name\" -o table # Returns all non-default subscriptions, if any, as a table\n\naz account list --query \"[?isDefault].id\" -o tsv # Returns the subscription id without quotation marks\nsubscriptionId=\"$(az account list --query \"[?isDefault].id\" -o tsv)\" # Captures the subscription id as a variable.\necho $subscriptionId # Returns the contents of the variable.\naz account list --query \"[? contains(name, 'Test')].id\" -o tsv # Returns the subscription id of a non-default subscription containing the substring 'Test'\nsubscriptionId=\"$(az account list --query \"[? contains(name, 'Test')].id\" -o tsv) # Captures the subscription id as a variable. \naz account set -s $subscriptionId # Sets the current active subscription\n```\n\n----------------------------------------\n\nTITLE: Querying Storage Accounts in PowerShell 5.1 on Windows\nDESCRIPTION: Illustrates how to list storage accounts and their properties using Azure CLI in PowerShell 5.1 on Windows, with proper quoting for this specific PowerShell version.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/use-azure-cli-successfully-powershell.md#2025-04-23_snippet_7\n\nLANGUAGE: azurecli\nCODE:\n```\naz storage account list --query '[].{\"\"SA Name\"\":name,\"\"Primary endpoint\"\":primaryEndpoints.blob}' --output table\n```\n\nLANGUAGE: azurecli\nCODE:\n```\naz storage account list --query '[?creationTime >=''2024-02-01''].{\"\"SA Name\"\":name,\"\"Primary endpoint\"\":primaryEndpoints.blob}' --output table\n```\n\n----------------------------------------\n\nTITLE: Creating Complex Azure CLI Alias Command\nDESCRIPTION: Creates an alias that lists available resource groups and their locations in table output.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/azure-cli-extension-alias.md#2025-04-23_snippet_4\n\nLANGUAGE: azurecli\nCODE:\n```\naz alias create --name ls-groups --command \"group list --query '[].{Name:name, Location:location}' --output table\"\n```\n\n----------------------------------------\n\nTITLE: Filtering VMs by Storage Type with Azure CLI\nDESCRIPTION: This command uses the contains() function to find all VMs using SSD storage for their OS disk.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/query-azure-cli-concepts.md#2025-04-23_snippet_12\n\nLANGUAGE: azurecli\nCODE:\n```\naz vm list --resource-group QueryDemo --query \"[?contains(storageProfile.osDisk.managedDisk.storageAccountType,'SSD')].{Name:name, Storage:storageProfile.osDisk.managedDisk.storageAccountType}\"\n```\n\n----------------------------------------\n\nTITLE: Updating Azure CLI on CBL-Mariner\nDESCRIPTION: This command updates the Azure CLI to the latest version available in the package repository using the tdnf package manager.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/cli-install-linux-tdnf.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsudo tdnf update azure-cli\n```\n\n----------------------------------------\n\nTITLE: Deleting Azure Container Registry using Bash\nDESCRIPTION: This snippet shows how to delete an Azure Container Registry using 'az rest' command in a Bash environment. It sends a DELETE request to the Azure management API.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/use-azure-cli-rest-command.md#2025-04-23_snippet_12\n\nLANGUAGE: Bash\nCODE:\n```\naz rest --method delete \\\n    --url https://management.azure.com/subscriptions/$subscriptionId/resourceGroups/$resourceGroup/providers/Microsoft.ContainerRegistry/registries/$containerRegistryName?api-version=2023-01-01-preview\n```\n\n----------------------------------------\n\nTITLE: Displaying VM List in TSV Format (Azure CLI)\nDESCRIPTION: This command outputs VM data in Tab-Separated Values format, which is useful for piping to other commands or importing into spreadsheets. TSV format doesn't include keys.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/format-output-azure-cli.md#2025-04-23_snippet_6\n\nLANGUAGE: azurecli\nCODE:\n```\naz vm list --output tsv\n```\n\n----------------------------------------\n\nTITLE: Creating MongoDB Collection in Azure Cosmos DB\nDESCRIPTION: This command creates a new MongoDB collection in an Azure Cosmos DB account. It is used for setting up data storage for MongoDB API.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/samples-reference-group.md#2025-04-23_snippet_9\n\nLANGUAGE: Azure CLI\nCODE:\n```\naz cosmosdb mongodb collection create\n```\n\n----------------------------------------\n\nTITLE: Displaying VM List in YAML Format (Azure CLI)\nDESCRIPTION: This command displays the list of virtual machines in YAML format. YAML is more human-readable than JSON and maps easily to the same data structure.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/format-output-azure-cli.md#2025-04-23_snippet_2\n\nLANGUAGE: azurecli\nCODE:\n```\naz vm list --output yaml\n```\n\n----------------------------------------\n\nTITLE: Retrieving Service Principal Properties in PowerShell\nDESCRIPTION: This PowerShell script shows how to retrieve specific properties of a service principal using Azure CLI commands and store them in variables.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/azure-cli-sp-tutorial-4.md#2025-04-23_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\n# PowerShell script\n$spID = (az ad sp list --display-name myServicePrincipalName --query \"[].{spID:appId}\" --output tsv)\n$tenantID = (az ad sp list --display-name myServicePrincipalName --query \"[].{tenant:appOwnerOrganizationId}\" --output tsv)\n$userConsentDescr = (az ad sp list --display-name myServicePrincipalName --query \"[].{ucs:oauth2PermissionScopes.userConsentDescription[0]}\" --output tsv)\nWrite-Host \"Using appId $spID in tenant $tenantID for $userConsentDescr\"\n```\n\n----------------------------------------\n\nTITLE: Querying Multiple Values from Azure CLI in Bash\nDESCRIPTION: Commands demonstrating how to query multiple values from JSON output using a multiselect list, with options to format the output as a table for improved readability.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/use-azure-cli-successfully-bash.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\naz account show --query [name,id,user.name] # return multiple values\naz account show --query [name,id,user.name] -o table # return multiple values as a table\n```\n\n----------------------------------------\n\nTITLE: Showing SQL Container Throughput in Azure Cosmos DB\nDESCRIPTION: This command displays the throughput settings of a SQL container in Azure Cosmos DB. It is used for reviewing current performance configurations.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/samples-reference-group.md#2025-04-23_snippet_24\n\nLANGUAGE: Azure CLI\nCODE:\n```\naz cosmosdb sql container throughput show\n```\n\n----------------------------------------\n\nTITLE: Changing Active Subscription Using a PowerShell Variable\nDESCRIPTION: PowerShell commands to store a subscription ID in a variable and then use it to change the active subscription.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/manage-azure-subscriptions-azure-cli.md#2025-04-23_snippet_7\n\nLANGUAGE: powershell\nCODE:\n```\n# change the active subscription using a variable\n$subscriptionId = az account list --query \"[?name=='my case sensitive subscription full name'].id\" -o tsv\naz account set --subscription $subscriptionId\n```\n\n----------------------------------------\n\nTITLE: Creating Azure CLI Alias with Jinja2 Template Processing\nDESCRIPTION: Demonstrates creating an alias that uses Jinja2 templates to process a storage URL and extract account and container names.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/azure-cli-extension-alias.md#2025-04-23_snippet_7\n\nLANGUAGE: azurecli\nCODE:\n```\naz alias create \\\n    --name 'storage-ls {{ url }}' \\\n    --command \"storage blob list\n        --account-name {{ url.replace('https://', '').split('.')[0] }}\n        --container-name {{ url.replace('https://', '').split('/')[1] }}\"\n```\n\n----------------------------------------\n\nTITLE: Updating the Azure CLI Alias Extension\nDESCRIPTION: Updates the alias extension to the latest version using the az extension update command.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/azure-cli-extension-alias.md#2025-04-23_snippet_2\n\nLANGUAGE: azurecli\nCODE:\n```\naz extension update --name alias\n```\n\n----------------------------------------\n\nTITLE: Querying Command Output\nDESCRIPTION: Example of using JMESPath query to filter and format the output of an Azure CLI command to show specific fields.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/cheat-sheet-onboarding.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\naz account show --query \"{tenantId:tenantId,subscriptionid:id}\"\n```\n\n----------------------------------------\n\nTITLE: Clearing Subscription Cache in Azure CLI\nDESCRIPTION: Commands to clear the subscription cache and sign in again to refresh subscription data.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/manage-azure-subscriptions-azure-cli.md#2025-04-23_snippet_8\n\nLANGUAGE: azurecli\nCODE:\n```\naz account clear\n\naz login\n```\n\n----------------------------------------\n\nTITLE: Listing MongoDB Collections in Azure Cosmos DB\nDESCRIPTION: This command lists all MongoDB collections in a specified database of an Azure Cosmos DB account. It provides an overview of existing MongoDB collections.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/samples-reference-group.md#2025-04-23_snippet_10\n\nLANGUAGE: Azure CLI\nCODE:\n```\naz cosmosdb mongodb collection list\n```\n\n----------------------------------------\n\nTITLE: Managing Firewall Rules for Azure SQL Servers with Azure CLI\nDESCRIPTION: Commands for creating and configuring firewall rules that control access to Azure SQL Servers.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/samples-reference-group.md#2025-04-23_snippet_40\n\nLANGUAGE: CLI\nCODE:\n```\naz sql server firewall-rule create\n```\n\n----------------------------------------\n\nTITLE: Azure CLI Logout\nDESCRIPTION: Command to remove access to Azure and sign out of the current session.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/authenticate-azure-cli-interactively.md#2025-04-23_snippet_4\n\nLANGUAGE: azurecli\nCODE:\n```\naz logout\n```\n\n----------------------------------------\n\nTITLE: Listing Available Azure CLI Versions on CBL-Mariner\nDESCRIPTION: This command lists all available versions of Azure CLI that can be installed on CBL-Mariner using the tdnf package manager.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/cli-install-linux-tdnf.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ntdnf list azure-cli\n```\n\n----------------------------------------\n\nTITLE: Using Space-Separated Values with Azure CLI\nDESCRIPTION: Demonstrates how to properly provide space-separated values to Azure CLI commands when key names or values contain spaces.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/use-azure-cli-successfully-quoting.md#2025-04-23_snippet_10\n\nLANGUAGE: azurecli\nCODE:\n```\naz web app config app settings set --resource-group myResourceGroup --name myWebAppName --settings \"client id=id1\" \"my name=john\"\n```\n\n----------------------------------------\n\nTITLE: Ordering TSV Output with Query (Azure CLI)\nDESCRIPTION: This command uses a query to enforce a specific ordering of fields in TSV output. It selects and orders the ID, location, resource group, and name fields.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/format-output-azure-cli.md#2025-04-23_snippet_7\n\nLANGUAGE: azurecli\nCODE:\n```\naz vm list --output tsv --query '[].[id, location, resourceGroup, name]'\n```\n\n----------------------------------------\n\nTITLE: Starting a Docker Container with Azure CLI Preinstalled\nDESCRIPTION: This command starts a Docker container with the Azure CLI preinstalled using the cbl-mariner2.0 image. The -it flag ensures the container runs in interactive mode with a terminal.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/run-azure-cli-docker.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -it mcr.microsoft.com/azure-cli:cbl-mariner2.0\n```\n\n----------------------------------------\n\nTITLE: Querying Azure CLI Account Information in Bash\nDESCRIPTION: Basic commands to display account information in the default JSON format. This demonstrates how to retrieve the current Azure account details using the az account show command.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/use-azure-cli-successfully-bash.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\naz account show\naz account show --output json # JSON is the default format\n```\n\n----------------------------------------\n\nTITLE: Retrieving Azure Container Registry Info in PowerShell\nDESCRIPTION: Shows how to use the Azure REST API to retrieve information about an Azure Container Registry using Azure CLI in a PowerShell environment, handling special characters in URLs.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/use-azure-cli-successfully-powershell.md#2025-04-23_snippet_9\n\nLANGUAGE: azurecli\nCODE:\n```\n# Script for a PowerShell scripting language\n\n# Variable block\n$randomIdentifier = (New-Guid).ToString().Substring(0,8)\n$subscriptionId=\"00000000-0000-0000-0000-000000000000\"\n$resourceGroup=\"msdocs-app-rg$randomIdentifier\"\n$containerRegistryName=\"msdocscr$randomIdentifier\"\n\n# prior to this GET example, the resource group and container registry were created in the article.\n\naz rest --method get --url https://management.azure.com/subscriptions/$subscriptionId/resourceGroups/$resourceGroup/providers/Microsoft.ContainerRegistry/registries/${containerRegistryName}?api-version=2023-01-01-preview\n```\n\n----------------------------------------\n\nTITLE: Handling Ampersand in Azure CLI Parameters\nDESCRIPTION: Demonstrates various methods to handle ampersand symbols in Azure CLI parameter values when using PowerShell, including quoting and escaping techniques.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/use-azure-cli-successfully-powershell.md#2025-04-23_snippet_10\n\nLANGUAGE: azurecli\nCODE:\n```\naz '\"a&b\"' --debug\n```\n\nLANGUAGE: azurecli\nCODE:\n```\naz \"`\"a&b`\"\" --debug\n```\n\nLANGUAGE: azurecli\nCODE:\n```\naz \"\"\"a&b\"\"\" --debug\n```\n\nLANGUAGE: azurecli\nCODE:\n```\naz \"a&b \" --debug\n```\n\nLANGUAGE: azurecli\nCODE:\n```\naz --% \"a&b\" --debug\n```\n\n----------------------------------------\n\nTITLE: Migrating SQL Database Throughput in Azure Cosmos DB\nDESCRIPTION: This command migrates the throughput of a SQL database between standard and autoscale in Azure Cosmos DB. It is used for optimizing performance and cost at the database level.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/samples-reference-group.md#2025-04-23_snippet_28\n\nLANGUAGE: Azure CLI\nCODE:\n```\naz cosmosdb sql database throughput migrate\n```\n\n----------------------------------------\n\nTITLE: Validating Script Logic for Azure Resource Creation (Bash)\nDESCRIPTION: Iterates through CSV file to validate script logic for Azure resource creation. Uses echo statements to preview resource creation steps.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/create-azure-resources-at-scale.md#2025-04-23_snippet_4\n\nLANGUAGE: azurecli\nCODE:\n```\nIFS=','\nwhile read resourceNo location createRG existingRGName createVnet vnetAddressPrefix subnetAddressPrefix vmImage publicIpSku adminUsername\ndo\n  random=$(tr -dc A-Za-z0-9 </dev/urandom | head -c 8)\n  echo \"resourceNo = $resourceNo\"\n  echo \"createRG = $createRG\"\n  echo \"createVnet = $createVnet\"\n  if [ \"$createRG\" = \"TRUE\" ]; then\n    newRGName=\"$rgPrefix$random\"\n    echo \"Will create RG $newRGName\"\n    if [ \"$createVnet\" = \"TRUE\" ]; then\n      vnetName=\"$vnetPrefix$random\"\n      echo \"Will create VNet $vnetName in RG $newRGName\"\n      vmName=\"$vmPrefix$random\"\n      echo \"Will create VM $vmName within Vnet $vnetName in RG $newRGName\"\n    else\n      vmName=\"$vmPrefix$random\"\n      echo \"Will create VM $vmName without Vnet in RG $newRGName\"\n    fi\n  else\n    vmName=\"$vmPrefix$random\"\n    echo \"Will create VM $vmName without Vnet in RG $existingRGName\"\n  fi\n  echo \"\"\ndone < \"$csvFileLocation\"\n```\n\n----------------------------------------\n\nTITLE: Creating and Configuring Azure SQL Servers with Azure CLI\nDESCRIPTION: Commands for creating Azure SQL logical servers, which host multiple databases and elastic pools.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/samples-reference-group.md#2025-04-23_snippet_39\n\nLANGUAGE: CLI\nCODE:\n```\naz sql server create\n```\n\n----------------------------------------\n\nTITLE: Reading and Parsing JSON File with PowerShell\nDESCRIPTION: This PowerShell script shows how to read a JSON file, convert its contents to a PowerShell object, and extract specific values using PowerShell cmdlets.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/get-started-tutorial-3-use-variables.md#2025-04-23_snippet_9\n\nLANGUAGE: powershell\nCODE:\n```\n# Show the contents of a file in the console\n$fileName=\"c:\\myPath\\msdocs-tutorial.json\"\n$fileContents = Get-Content -Path $fileName | ConvertFrom-Json\n\n# Get a JSON dictionary object\n$stgKV=$($fileContents.environments.stg.\"kv-secretName\")\necho $stgKV\n\n# Filter a JSON array\n$devKV=$($fileContents.environments.dev | \n    Where-Object status -eq 'active' | \n    Select-Object -ExpandProperty 'kv-secretName')\necho $devKV\n```\n\n----------------------------------------\n\nTITLE: Adding Microsoft Repository for RHEL 8\nDESCRIPTION: Command to add the Microsoft packages repository for RHEL 8, which configures the package manager to fetch Azure CLI from the correct source.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/cli-install-linux-dnf.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo dnf install -y https://packages.microsoft.com/config/rhel/8/packages-microsoft-prod.rpm\n```\n\n----------------------------------------\n\nTITLE: Using Null to Remove Array Element in Update Command\nDESCRIPTION: Example of how to use null to remove a specific array element in an update command using Azure CLI shorthand syntax.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/use-azure-cli-successfully-shorthand.md#2025-04-23_snippet_27\n\nLANGUAGE: bash\nCODE:\n```\naz some-update-command --emails [0]=null\n```\n\n----------------------------------------\n\nTITLE: Resetting Service Principal Credentials and Storing Password in PowerShell Variable\nDESCRIPTION: This PowerShell script shows how to reset a service principal credential and capture the new password in a variable using the '--query' parameter and 'tsv' output format.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/format-output-azure-cli.md#2025-04-23_snippet_14\n\nLANGUAGE: azurecli\nCODE:\n```\n# PowerShell script\n# Reset service principal credentials and capture the new password\n$myNewPassword = (az ad sp credential reset --id myServicePrincipalID --query password --output tsv)\n\n# Display the new password (remove this line in production for security)\necho \"New password: $myNewPassword\"\n```\n\n----------------------------------------\n\nTITLE: Starting Docker Container with SSH Keys Mounted\nDESCRIPTION: This command starts a Docker container with Azure CLI while mounting the host machine's SSH keys into the container. This allows the CLI to use existing SSH configurations for authentication.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/run-azure-cli-docker.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -it --mount type=bind,src=\"$HOME\"/.ssh,dst=/root/.ssh mcr.microsoft.com/azure-cli:cbl-mariner2.0\n```\n\n----------------------------------------\n\nTITLE: Updating Azure CLI using DNF Package Manager\nDESCRIPTION: Command to update the Azure CLI to the latest version available in the configured repositories using the DNF package manager.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/cli-install-linux-dnf.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nsudo dnf update azure-cli\n```\n\n----------------------------------------\n\nTITLE: Setting Default Output Format for Azure CLI\nDESCRIPTION: This command shows how to set the default output format for Azure CLI commands. It uses 'az config set' to change the core.output configuration to 'jsonc' (JSON with comments) format.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/what-is-azure-cli.md#2025-04-23_snippet_3\n\nLANGUAGE: azurecli\nCODE:\n```\naz config set core.output=jsonc\n```\n\n----------------------------------------\n\nTITLE: Configuring Zsh completion for Azure CLI\nDESCRIPTION: These lines enable command completion for Azure CLI in Zsh. They should be added to the .zshrc file to autoload bash completion and source the Azure CLI completion file.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/install-azure-cli-macos.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nautoload bashcompinit && bashcompinit\nsource $(brew --prefix)/etc/bash_completion.d/az\n```\n\n----------------------------------------\n\nTITLE: Retrieving Multiple Storage Account Properties as an Array\nDESCRIPTION: This snippet demonstrates how to query multiple specific properties from a storage account and return them as a JSON array. It retrieves the ID, primary location, blob endpoint, and encryption information.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/get-started-tutorial-3-use-variables.md#2025-04-23_snippet_1\n\nLANGUAGE: azurecli\nCODE:\n```\naz storage account show --resource-group <msdocs-tutorial-rg-00000000> \\\n                        --name <msdocssa000000000> \\\n                        --query \"[id, primaryLocation, primaryEndpoints.blob, encryption.services.blob.lastEnabledTime]\"\n```\n\n----------------------------------------\n\nTITLE: Validating CSV File Values for Azure Resource Creation (PowerShell)\nDESCRIPTION: PowerShell version of CSV file validation for Azure resource creation. Reads and validates CSV values, outputting resource information.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/create-azure-resources-at-scale.md#2025-04-23_snippet_3\n\nLANGUAGE: azurecli\nCODE:\n```\n$csv = Import-Csv $csvFileLocation\nforeach ($row in $csv) {\n    if ($row.resourceNo -eq \"1\") {\n        Write-Host \"resourceNo = $($row.resourceNo)\"\n        Write-Host \"location = $($row.location)\"\n        Write-Host \"\"\n        Write-Host \"RESOURCE GROUP INFORMATION:\"\n        Write-Host \"createRG = $($row.createRG)\"\n        if ($row.createRG -eq \"TRUE\") {\n            $newRGName = \"$rgPrefix$random\"\n            Write-Host \"newRGName = $newRGName\"\n        } else {\n            Write-Host \"existingRGName = $($row.existingRGName)\"\n        }\n        Write-Host \"\"\n        Write-Host \"VNET INFORMATION:\"\n        Write-Host \"createVnet = $($row.createVnet)\"\n        if ($row.createVnet -eq \"TRUE\") {\n            $vnetName = \"$vnetPrefix$random\"\n            $subnetName = \"$subnetPrefix$random\"\n            Write-Host \"vnetName = $vnetName\"\n            Write-Host \"subnetName = $subnetName\"\n            Write-Host \"vnetAddressPrefix = $($row.vnetAddressPrefix)\"\n            Write-Host \"subnetAddressPrefix = $($row.subnetAddressPrefix)\"\n        }\n        Write-Host \"\"\n        Write-Host \"VM INFORMATION:\"\n        $vmName = \"$vmPrefix$random\"\n        Write-Host \"vmName = $vmName\"\n        Write-Host \"vmImage = $($row.vmImage)\"\n        Write-Host \"vmSku = $($row.publicIpSku)\"\n        if ([string]::IsNullOrEmpty($row.adminUsername)) {\n            Write-Host \"SSH keys will be created\"\n        } else {\n            Write-Host \"adminUsername = $($row.adminUsername)\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Resource Lock on a Resource Group\nDESCRIPTION: Adds a CanNotDelete lock to a resource group, preventing users from deleting the group or its resources. This requires contributor permissions on the resource group.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/manage-azure-groups-azure-cli.md#2025-04-23_snippet_9\n\nLANGUAGE: azurecli\nCODE:\n```\naz group lock create --name \"Cannot delete resource group\" --lock-type CanNotDelete\n```\n\n----------------------------------------\n\nTITLE: Handling Quotation Marks in Windows Command Prompt Variables for Azure CLI\nDESCRIPTION: Examples of setting variables with quotes in Windows Command Prompt (cmd.exe) when using Azure CLI. Shows how Cmd.exe uniquely allows embedded quotes that match the string wrapper.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/use-azure-cli-successfully-quoting.md#2025-04-23_snippet_4\n\nLANGUAGE: cmd\nCODE:\n```\nset myVariable=\"my value with ' ' single quotes\"\nset myVariable='my value with \" \" double quotes'\n\nset myVariable=\"my second value with \" \" double quotes\"\nset myVariable='my second value with ' ' single quotes'\n\n# after each example ...\necho %myVariable%\n```\n\n----------------------------------------\n\nTITLE: Updating Only Azure CLI Package on Debian/Ubuntu\nDESCRIPTION: Updates repository information and upgrades only the Azure CLI package, leaving other system packages unchanged. Useful for focused updates.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/cli-install-linux-apt.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get update && sudo apt-get install --only-upgrade -y azure-cli\n```\n\n----------------------------------------\n\nTITLE: Using Partial Value Shorthand Syntax for Multiple Properties\nDESCRIPTION: Example of using partial value shorthand syntax to pass multiple key-value pairs to an Azure CLI command parameter.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/use-azure-cli-successfully-shorthand.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\naz some-command --contact age=20 paid=true\n```\n\n----------------------------------------\n\nTITLE: Secure Service Principal Login in PowerShell\nDESCRIPTION: This PowerShell script shows a secure method to log in with a service principal using the Get-Credential cmdlet to capture credentials securely. It then uses these credentials to log in via the Azure CLI.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/authenticate-azure-cli-service-principal.md#2025-04-23_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\n$AzCred = Get-Credential -UserName <app-id>\naz login --service-principal --username $AzCred.UserName --password $AzCred.GetNetworkCredential().Password --tenant <tenant>\n```\n\n----------------------------------------\n\nTITLE: JSON Structure Example for Azure CLI Parameters\nDESCRIPTION: Sample JSON structure that demonstrates various data types and nested objects that might need to be passed to Azure CLI commands.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/use-azure-cli-successfully-shorthand.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"Bill\",\n  \"age\": 20,\n  \"paid\": true,\n  \"emails\": [\n    \"Bill@microsoft.com\",\n    \"Bill@outlook.com\"\n  ],\n  \"address\": {\n    \"country\": \"USA\",\n    \"company\": \"Microsoft\",\n    \"details\": {\n      \"line1\": \"15590 NE 31st St\",\n      \"line2\": \"Redmond, WA\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting Command Output\nDESCRIPTION: Example of changing the output format of an Azure CLI command to display results in a tabular layout.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/cheat-sheet-onboarding.md#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\naz account list --output table\n```\n\n----------------------------------------\n\nTITLE: Using Scenario Guide for Learning\nDESCRIPTION: Command to access guided walkthroughs for specific Azure scenarios using the Azure CLI scenario guide feature.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/cheat-sheet-onboarding.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\naz scenario guide \"keywords of interest\"\naz scenario guide \"virtual machines\"\n```\n\n----------------------------------------\n\nTITLE: Starting Interactive Mode\nDESCRIPTION: Command to launch Azure CLI's interactive mode, which provides auto-completion and command suggestions as you type.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/cheat-sheet-onboarding.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\naz interactive\n```\n\n----------------------------------------\n\nTITLE: Querying Microsoft Graph Application Permissions with JMESPath in Azure CLI\nDESCRIPTION: This command lists Microsoft Graph service principals, filters for the first one, and returns the IDs of application roles with 'User.Read.All' permission that are allowed for Application member types. The output is formatted as tab-separated values.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/query-azure-cli-examples.md#2025-04-23_snippet_1\n\nLANGUAGE: azurecli\nCODE:\n```\naz ad sp list --display-name \"Microsoft Graph\" --query \"[0].appRoles[?value=='User.Read.All' && contains(allowedMemberTypes, 'Application')].id\" --output tsv\n```\n\n----------------------------------------\n\nTITLE: Formatting Azure CLI Output as YAML in Bash\nDESCRIPTION: Command to format Azure CLI output in YAML format, which is often easier to read than JSON and can be used for configuration inputs in some applications.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/use-azure-cli-successfully-bash.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\naz account show --output yaml\n```\n\n----------------------------------------\n\nTITLE: Updating Azure CLI Extensions\nDESCRIPTION: This command updates an installed extension to its latest version when the extension was installed by name.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/azure-cli-extensions-overview.md#2025-04-23_snippet_8\n\nLANGUAGE: azurecli\nCODE:\n```\naz extension update --name <extension-name>\n```\n\n----------------------------------------\n\nTITLE: Sample CLI Configuration File in INI Format\nDESCRIPTION: Example of an Azure CLI configuration file that disables confirmation prompts and configures logging to a specific directory. The file uses INI format with section headers and key-value pairs.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/azure-cli-configuration.md#2025-04-23_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\n[core]\ndisable_confirm_prompt=Yes\n\n[logging]\nenable_log_file=yes\nlog_dir=/var/log/azure\n```\n\n----------------------------------------\n\nTITLE: Updating Azure CLI using zypper on SUSE\nDESCRIPTION: Updates the Azure CLI package to the latest version available in the configured repositories. This refreshes the package index first and then performs the update.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/cli-install-linux-zypper.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nsudo zypper refresh\nsudo zypper update azure-cli\n```\n\n----------------------------------------\n\nTITLE: Using Partial Value Shorthand Syntax for Nested Properties\nDESCRIPTION: Example of using partial value shorthand syntax to set a nested property using dot notation in an Azure CLI command parameter.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/use-azure-cli-successfully-shorthand.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\naz some-command --contact address.details=\"{line1:'15590 NE 31st St',line2:'Redmond, WA'}\"\n```\n\n----------------------------------------\n\nTITLE: Querying Storage Accounts in PowerShell 7.4.1 on Windows\nDESCRIPTION: Shows how to list storage accounts and their properties using Azure CLI in PowerShell 7.4.1 on Windows, with appropriate quoting for the Windows environment.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/use-azure-cli-successfully-powershell.md#2025-04-23_snippet_6\n\nLANGUAGE: azurecli\nCODE:\n```\naz storage account list --query '[].{\\\"SA Name\\\":name,\\\"Primary endpoint\\\":primaryEndpoints.blob}' --output table\n```\n\nLANGUAGE: azurecli\nCODE:\n```\naz storage account list --query '[].{\"\"SA Name\"\":name,\"\"Primary endpoint\"\":primaryEndpoints.blob}' --output table\n```\n\nLANGUAGE: azurecli\nCODE:\n```\naz storage account list --query '[?creationTime >=''2024-02-01''].{\"\"SA Name\"\":name,\"\"Primary endpoint\"\":primaryEndpoints.blob}' --output table\n```\n\n----------------------------------------\n\nTITLE: Getting Help for a Parameter\nDESCRIPTION: Example of using the double question mark (??) syntax to get help information for a specific parameter in Azure CLI.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/use-azure-cli-successfully-shorthand.md#2025-04-23_snippet_28\n\nLANGUAGE: bash\nCODE:\n```\naz some-command --contact \"??\"\n```\n\n----------------------------------------\n\nTITLE: Showing MongoDB Database Throughput in Azure Cosmos DB\nDESCRIPTION: This command displays the throughput settings of a MongoDB database in Azure Cosmos DB. It is used for reviewing current performance configurations at the database level.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/samples-reference-group.md#2025-04-23_snippet_17\n\nLANGUAGE: Azure CLI\nCODE:\n```\naz cosmosdb mongodb database throughput show\n```\n\n----------------------------------------\n\nTITLE: Filtering Storage Accounts with JMESPath in Bash\nDESCRIPTION: This snippet demonstrates how to filter Azure storage accounts using JMESPath queries in Bash. It shows three different filters: accounts with blob public access enabled, accounts created in the last 30 days, and accounts with names containing 'msdocs'.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/get-started-tutorial-3-use-variables.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nrgName=\"<msdocs-tutorial-rg-00000000>\"\n\n# Get a list of all Azure storage accounts that allow blob public access.\n# Notice the backticks and escape characters needed for boolean values.\naz storage account list --resource-group $rgName \\\n                        --query \"[?allowBlobPublicAccess == \\`true\\`].name\"\n\n# Get a list of Azure storage accounts that were created in the last 30 days. Return the results as a table.\nsaDate=$(date +%F -d \"-30days\")\naz storage account list --resource-group $rgName \\\n                        --query \"[?creationTime >='$saDate'].{saName:name, createdTimeStamp:creationTime}\" \\\n                        --output table\n\n# Get a list of Azure storage accounts created in this tutorial\naz storage account list --resource-group $rgName \\\n                        --query \"[?contains(name, 'msdocs')].{saName:name, saKind:kind, saPrimaryLocation:primaryLocation, createdTimeStamp:creationTime}\" \\\n                        --output table\n```\n\n----------------------------------------\n\nTITLE: Using xargs to Start VMs in Parallel in Bash\nDESCRIPTION: This command uses xargs with the -P flag to start multiple stopped VMs in parallel for improved performance.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/use-azure-cli-successfully-tips.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\naz vm list --resource-group MyResourceGroup --show-details \\\n    --query \"[?powerState=='VM stopped'].id\" \\\n    --output tsv | xargs -I {} -P 10 az vm start --ids \"{}\"\n```\n\n----------------------------------------\n\nTITLE: Piping VM Names to grep in Bash\nDESCRIPTION: This snippet shows how to use piping to pass the output of az vm list directly to grep for filtering VM names.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/use-azure-cli-successfully-tips.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\naz vm list --query \"[?powerState=='VM running'].name\" --output tsv | grep my_vm\n```\n\n----------------------------------------\n\nTITLE: Using JMESPath Query after Command Execution\nDESCRIPTION: Example showing how to use the '??' syntax to execute a JMESPath query on the results of the last command, specifically to extract the ID after creating a resource group.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/interactive-azure-cli.md#2025-04-23_snippet_5\n\nLANGUAGE: azurecli-interactive\nCODE:\n```\naz>> group create -n <myResourceGroup> -l westEurope\naz>> \"?? id\"\n```\n\n----------------------------------------\n\nTITLE: Complex JSON Example for Update Commands\nDESCRIPTION: Sample complex JSON structure that might be used with update commands, containing nested objects and arrays.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/use-azure-cli-successfully-shorthand.md#2025-04-23_snippet_25\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"contact\": {\n    \"name\": \"Bill\",\n    \"age\": 20,\n    \"paid\": true,\n    \"emails\": [\n      \"Bill@microsoft.com\",\n      \"Bill@outlook.com\"\n    ],\n    \"address\": {\n      \"country\": \"USA\",\n      \"company\": \"Microsoft\",\n      \"details\": {\n        \"line1\": \"15590 NE 31st St\",\n        \"line2\": \"Redmond, WA\"\n      }\n    }\n  },\n\n  \"other_properties\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Regenerating Keys for Azure Cosmos DB Account\nDESCRIPTION: This command regenerates the specified keys for an Azure Cosmos DB account. It is used for security purposes to rotate access keys.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/samples-reference-group.md#2025-04-23_snippet_7\n\nLANGUAGE: Azure CLI\nCODE:\n```\naz cosmosdb keys regenerate\n```\n\n----------------------------------------\n\nTITLE: Escaping Apostrophes in Partial Value Format\nDESCRIPTION: Example of how to escape apostrophes within single-quoted strings using the forward slash escape character in partial value shorthand syntax.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/use-azure-cli-successfully-shorthand.md#2025-04-23_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\naz some-command --contact name=\"'bill'/s'\"\n```\n\n----------------------------------------\n\nTITLE: Handling Spaces and Quotation Marks in Azure CLI Bash Scripts\nDESCRIPTION: This snippet shows various examples of using single and double quotes to handle spaces and special characters in Azure CLI commands. It demonstrates the difference in variable evaluation and command execution based on quotation usage.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/use-azure-cli-successfully-bash.md#2025-04-23_snippet_11\n\nLANGUAGE: azurecli\nCODE:\n```\nresourceGroup='msdocs-learn-bash-$randomIdentifier'\necho $resourceGroup # The $ is ignored in the creation of the $resourceGroup variable\nresourceGroup=\"msdocs-learn-bash-$randomIdentifier\"\necho $resourceGroup # The $randomIdentifier is evaluated when defining the $resourceGroup variable\nlocation=\"East US\" # The space is ignored when defining the $location variable\necho The value of the location variable is $location # The value of the $location variable is evaluated\necho \"The value of the location variable is $location\" # The value of the $location variable is evaluated\necho \"The value of the location variable is \\$location\" # The value of the $location variable is not evaluated\necho 'The value of the location variable is $location' # The value of the $location variable is not evaluated\naz group create --name $resourceGroup --location $location # Notice that the space in the $location variable is not ignored and the command fails as it treats the value after the space as a new command \naz group create --name $resourceGroup --location \"$location\" # Notice that the space in the $location variable is ignored and the location argument accepts the entire string as the value \n```\n\n----------------------------------------\n\nTITLE: Getting Help for Deeply Nested Properties\nDESCRIPTION: Example of requesting help for a deeply nested property (country within address) while constructing a command with full value shorthand syntax.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/use-azure-cli-successfully-shorthand.md#2025-04-23_snippet_32\n\nLANGUAGE: bash\nCODE:\n```\naz some-command --contact \"{name:Bill,address:{country:??\"\n```\n\n----------------------------------------\n\nTITLE: Viewing Available Azure CLI Versions on Debian/Ubuntu\nDESCRIPTION: Lists all available versions of the Azure CLI package that can be installed from the configured repositories.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/cli-install-linux-apt.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\napt-cache policy azure-cli\n```\n\n----------------------------------------\n\nTITLE: Installing Specific Azure CLI Version using PowerShell MSI Installer\nDESCRIPTION: PowerShell command to install a specific version (2.51.0) of Azure CLI on Windows using MSI installer. The script downloads the specific version installer, executes it silently, and removes the installation file.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/cli-install-windows-msi-powershell.md#2025-04-23_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\n$ProgressPreference = 'SilentlyContinue'; Invoke-WebRequest -Uri https://azcliprod.blob.core.windows.net/msi/azure-cli-2.51.0.msi -OutFile .\\AzureCLI.msi; Start-Process msiexec.exe -Wait -ArgumentList '/I AzureCLI.msi /quiet'; Remove-Item .\\AzureCLI.msi\n```\n\n----------------------------------------\n\nTITLE: Looping Through VM List in CMD\nDESCRIPTION: This CMD script demonstrates how to loop through a list of running VM IDs and stop each VM individually using the Azure CLI. It provides output for each VM being stopped.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/use-azure-cli-successfully-tips.md#2025-04-23_snippet_11\n\nLANGUAGE: batch\nCODE:\n```\nECHO OFF\nSETLOCAL\nFOR /F \"tokens=* USEBACKQ\" %%F IN (\n    `az vm list --resource-group VMResources --show-details --query \"[?powerState=='VM running'].id\" --output tsv`\n) DO (\n    ECHO Stopping %%F\n    az vm stop --ids %%F\n)\n```\n\n----------------------------------------\n\nTITLE: Secure Password Entry for Service Principal in PowerShell\nDESCRIPTION: Method to securely authenticate with a service principal in PowerShell using the Get-Credential cmdlet to handle password input. Prevents password exposure in command history or console output.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/azure-cli-sp-tutorial-2.md#2025-04-23_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\n$AzCred = Get-Credential -UserName <app-id>\naz login --service-principal -u $AzCred.UserName -p $AzCred.GetNetworkCredential().Password --tenant <tenant>\n```\n\n----------------------------------------\n\nTITLE: Handling Quotation Marks in PowerShell Variables for Azure CLI\nDESCRIPTION: Examples of correct and incorrect ways to handle quotation marks in PowerShell variables when using Azure CLI. Shows how PowerShell treats escaped quotes differently than Bash.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/use-azure-cli-successfully-quoting.md#2025-04-23_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n# Correct\n$myVariable = \"my string ' ' wrapped in single quotes\"\n$myVariable = 'my string \" \" wrapped in double quotes'\n\n# Wrong\n$myVariable = \"my value with escaped `\" `\" double quotes\"\n$myVariable = 'my value with escaped `' `' single quotes'\n\n# after each example ...\necho $myVariable\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Key Vault Secret with None Output Format\nDESCRIPTION: This snippet demonstrates how to create an Azure Key Vault secret using the 'az keyvault secret set' command with the '--output none' option to prevent sensitive information from being displayed in the console.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/format-output-azure-cli.md#2025-04-23_snippet_11\n\nLANGUAGE: azurecli\nCODE:\n```\naz keyvault secret set --name MySecretName \\\n                       --vault-name MyKeyVaultName \\\n                       --value MySecretValue\\\n                       --output none\n```\n\n----------------------------------------\n\nTITLE: Enabling Automatic Updates in Azure CLI\nDESCRIPTION: Enables automatic updates for the Azure CLI by setting the auto-upgrade.enable configuration parameter to yes. This allows the CLI to check for updates regularly and prompt for upgrades.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/update-azure-cli.md#2025-04-23_snippet_0\n\nLANGUAGE: azurecli\nCODE:\n```\naz config set auto-upgrade.enable=yes\n```\n\n----------------------------------------\n\nTITLE: Adding Network Rule to Azure Cosmos DB Account\nDESCRIPTION: This command adds a network rule to an Azure Cosmos DB account. It is used for configuring network access and security settings.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/samples-reference-group.md#2025-04-23_snippet_19\n\nLANGUAGE: Azure CLI\nCODE:\n```\naz cosmosdb network-rule add\n```\n\n----------------------------------------\n\nTITLE: Storing Subscription Information in Bash Variables\nDESCRIPTION: Bash commands to store subscription IDs in variables for use in scripts, either the default subscription or a subscription with a specific name.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/manage-azure-subscriptions-azure-cli.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# store the default subscription in a variable\nsubscriptionId=\"$(az account list --query \"[?isDefault].id\" --output tsv)\"\necho $subscriptionId\n\n# store a subscription of certain name in a variable\nsubscriptionId=\"$(az account list --query \"[?name=='my case sensitive subscription full name'].id\" --output tsv)\"\necho $subscriptionId\n```\n\n----------------------------------------\n\nTITLE: JSON String Handling with Azure CLI in Windows Command Prompt\nDESCRIPTION: Demonstrates the correct way to pass JSON strings as parameters in Windows Command Prompt when using Azure CLI commands.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/use-azure-cli-successfully-quoting.md#2025-04-23_snippet_8\n\nLANGUAGE: cmd\nCODE:\n```\n# Correct in Windows Command \naz \"{\"key\":\"value\"}\" --debug\n>> Command arguments: ['{key:value}', '--debug']\n```\n\n----------------------------------------\n\nTITLE: Querying Help for Array Property in Azure CLI\nDESCRIPTION: Shows how to get help documentation for the --contact.emails property using the ?? syntax in partial value format.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/use-azure-cli-successfully-shorthand.md#2025-04-23_snippet_36\n\nLANGUAGE: bash\nCODE:\n```\naz some-command --contact emails=\"??\"\n```\n\n----------------------------------------\n\nTITLE: Updating SQL Container Throughput in Azure Cosmos DB\nDESCRIPTION: This command updates the throughput settings of a SQL container in Azure Cosmos DB. It is used for adjusting performance based on application needs.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/samples-reference-group.md#2025-04-23_snippet_25\n\nLANGUAGE: Azure CLI\nCODE:\n```\naz cosmosdb sql container throughput update\n```\n\n----------------------------------------\n\nTITLE: Configuring PowerShell Proxy Credentials\nDESCRIPTION: This PowerShell command sets up the default network credentials for the proxy. It's used when a proxy is blocking connections and needs to be properly configured for Azure CLI to work.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/install-azure-cli-windows.md#2025-04-23_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n(New-Object System.Net.WebClient).Proxy.Credentials = \\\n  [System.Net.CredentialCache]::DefaultNetworkCredentials\n```\n\n----------------------------------------\n\nTITLE: Retrieving Service Principal Properties in Bash\nDESCRIPTION: This Bash script demonstrates how to retrieve specific properties of a service principal using Azure CLI commands and store them in variables.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/azure-cli-sp-tutorial-4.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Bash script\nspID=$(az ad sp list --display-name myServicePrincipalName --query \"[].{spID:appId}\" --output tsv)\ntenantID=$(az ad sp list --display-name myServicePrincipalName --query \"[].{tenant:appOwnerOrganizationId}\" --output tsv)\nuserConsentDescr=$(az ad sp list --display-name myServicePrincipalName --query \"[].{ucs:oauth2PermissionScopes.userConsentDescription[0]}\" --output tsv)\necho \"Using appId $spID in tenant $tenantID for $userConsentDescr\"\n```\n\n----------------------------------------\n\nTITLE: Registering Azure CLI Tab Completion in PowerShell\nDESCRIPTION: This PowerShell script registers argument completion for the Azure CLI. It sets up environment variables to handle tab completion, captures completion suggestions, and returns them as PowerShell completion results. Add this to your PowerShell profile to enable tab completion for Azure CLI commands.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/tab-completion.md#2025-04-23_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nRegister-ArgumentCompleter -Native -CommandName az -ScriptBlock {\n    param($commandName, $wordToComplete, $cursorPosition)\n    $completion_file = New-TemporaryFile\n    $env:ARGCOMPLETE_USE_TEMPFILES = 1\n    $env:_ARGCOMPLETE_STDOUT_FILENAME = $completion_file\n    $env:COMP_LINE = $wordToComplete\n    $env:COMP_POINT = $cursorPosition\n    $env:_ARGCOMPLETE = 1\n    $env:_ARGCOMPLETE_SUPPRESS_SPACE = 0\n    $env:_ARGCOMPLETE_IFS = \"`n\"\n    $env:_ARGCOMPLETE_SHELL = 'powershell'\n    az 2>&1 | Out-Null\n    Get-Content $completion_file | Sort-Object | ForEach-Object {\n        [System.Management.Automation.CompletionResult]::new($_, $_, \"ParameterValue\", $_)\n    }\n    Remove-Item $completion_file, Env:\\_ARGCOMPLETE_STDOUT_FILENAME, Env:\\ARGCOMPLETE_USE_TEMPFILES, Env:\\COMP_LINE, Env:\\COMP_POINT, Env:\\_ARGCOMPLETE, Env:\\_ARGCOMPLETE_SUPPRESS_SPACE, Env:\\_ARGCOMPLETE_IFS, Env:\\_ARGCOMPLETE_SHELL\n}\n```\n\n----------------------------------------\n\nTITLE: Azure CLI Tenant-Specific Login\nDESCRIPTION: Login command that targets a specific Azure tenant using the tenant ID, with subscription selector disabled.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/authenticate-azure-cli-interactively.md#2025-04-23_snippet_2\n\nLANGUAGE: azurecli\nCODE:\n```\naz config set core.login_experience_v2=off\n\naz login --tenant 00000000-0000-0000-0000-000000000000\n```\n\n----------------------------------------\n\nTITLE: Disabling Automatic Updates in Azure CLI\nDESCRIPTION: Turns off the automatic update feature for Azure CLI by setting auto-upgrade.enable to no. This is useful when you need to maintain stable command script behavior without unexpected updates.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/update-azure-cli.md#2025-04-23_snippet_3\n\nLANGUAGE: azurecli\nCODE:\n```\naz config set auto-upgrade.enable=no\n```\n\n----------------------------------------\n\nTITLE: Managing Azure Communication Services Chat with Azure CLI\nDESCRIPTION: This section covers Azure CLI commands for managing chat functionality in Azure Communication Services, including creating threads, sending messages, and managing participants.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/samples-reference-group.md#2025-04-23_snippet_3\n\nLANGUAGE: azure-cli\nCODE:\n```\naz communication chat message get\naz communication chat message list\naz communication chat message receipt send\naz communication chat message send\naz communication chat participant add\naz communication chat participant list\naz communication chat participant remove\naz communication chat thread create\naz communication chat thread list\naz communication chat thread update-topic\n```\n\n----------------------------------------\n\nTITLE: Setting Up and Using Private Extension Index\nDESCRIPTION: These commands set up a private extension index for Azure CLI and then install an extension from that index by name.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/azure-cli-extensions-overview.md#2025-04-23_snippet_3\n\nLANGUAGE: azurecli\nCODE:\n```\naz config set extension.index_url=<URL>\naz extension add --name <extension-name>\n```\n\n----------------------------------------\n\nTITLE: Handling Empty Strings in Bash and PowerShell for Azure CLI\nDESCRIPTION: Shows the correct way to represent empty quoted strings in Bash and PowerShell variables for use with Azure CLI commands.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/use-azure-cli-successfully-quoting.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n# Correct in Bash\nmyVariable=\"''\"\n```\n\nLANGUAGE: powershell\nCODE:\n```\n# Correct in PowerShell\n$myVariable = \"''\"\n$myVariable = '\"\"'\n```\n\n----------------------------------------\n\nTITLE: Querying Help for Array Element in Azure CLI\nDESCRIPTION: Shows how to get help documentation for a specific array element within the --contact.emails property using the ?? syntax in partial value format.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/use-azure-cli-successfully-shorthand.md#2025-04-23_snippet_37\n\nLANGUAGE: bash\nCODE:\n```\naz some-command --contact emails[0]=\"??\"\n```\n\n----------------------------------------\n\nTITLE: Removing Azure CLI Data with Bash\nDESCRIPTION: This command removes the .azure directory from the user's home folder, which contains all Azure CLI configuration data, cached credentials, and extension information. It should only be executed if you don't plan to reinstall Azure CLI.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/remove-data-boilerplate.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrm -rf ~/.azure\n```\n\n----------------------------------------\n\nTITLE: Using the --query Parameter in Bash with Azure CLI\nDESCRIPTION: Demonstrates correct and incorrect ways to use the --query parameter with JMESPath expressions in Bash, showing how to properly escape characters.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/use-azure-cli-successfully-quoting.md#2025-04-23_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\naz version --query '\"azure-cli\"'\naz version --query \\\"azure-cli\\\"\naz version --query \"\\\"azure-cli\\\"\"\n```\n\nLANGUAGE: bash\nCODE:\n```\n# Wrong, as the dash needs to be quoted in a JMESPath query\naz version --query azure-cli\naz version: error: argument --query: invalid jmespath_type value: 'azure-cli'\n\n# Wrong, as the dash needs to be quoted in a JMESPath query, but quotes are interpreted by Bash\naz version --query \"azure-cli\"\naz version: error: argument --query: invalid jmespath_type value: 'azure-cli'\n```\n\n----------------------------------------\n\nTITLE: Displaying a Variable's Value in Bash\nDESCRIPTION: Simple command to display the value stored in a shell variable, used here to verify the stored IP address.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/azure-cli-vm-tutorial-5.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\necho $vmIpAddress\n```\n\n----------------------------------------\n\nTITLE: Creating an Azure Service Principal with Multiple Scopes (PowerShell)\nDESCRIPTION: This PowerShell script creates a service principal named 'myServicePrincipalName2' with reader permissions to all resources in resource group 'myRG1' and to a specific VM in 'myRG2'.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/azure-cli-sp-tutorial-1.md#2025-04-23_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\naz ad sp create-for-rbac --name myServicePrincipalName2 --role reader --scopes /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myRG1 /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myRG2/providers/Microsoft.Compute/virtualMachines/myVM\n```\n\n----------------------------------------\n\nTITLE: Getting Property-Specific Help in Full Value Format\nDESCRIPTION: Examples of how to get help for specific properties and nested objects while constructing a command with full value shorthand syntax.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/use-azure-cli-successfully-shorthand.md#2025-04-23_snippet_30\n\nLANGUAGE: bash\nCODE:\n```\naz some-command --contact \"{name:Bill,??\"\n```\n\n----------------------------------------\n\nTITLE: Signing into Azure using Azure CLI\nDESCRIPTION: This command is used to sign into Azure interactively using the Azure CLI. It's typically the first step after installation before executing any Azure CLI commands.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/install-azure-cli-windows.md#2025-04-23_snippet_0\n\nLANGUAGE: Azure CLI\nCODE:\n```\naz login\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Output from Azure CLI Account Show Command\nDESCRIPTION: Example of JSON dictionary output from az account show command with identifying information removed. This shows the structure of account information returned by the Azure CLI.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/use-azure-cli-successfully-bash.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\nbash-5.1# az account show\n{\n  \"environmentName\": \"AzureCloud\",\n  \"isDefault\": true,\n  \"managedByTenants\": [],\n  \"name\": \"My test subscription\",\n  \"state\": \"Enabled\",\n  \"user\": {\n    \"name\": \"user@contoso.com\",\n    \"type\": \"user\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Resources in Bash\nDESCRIPTION: A Bash script that creates an Azure resource group and storage account with randomized identifiers. Uses Bash-specific syntax with variable declaration and multiline commands.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/use-azure-cli-successfully-powershell.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Bash syntax example\n\n# Variable block\nlet \"randomIdentifier=$RANDOM*$RANDOM\"\nlocation=eastus\nresourceGroup=\"msdocs-test-rg-$randomIdentifier\"\nstorageAccount=\"msdocssa$randomIdentifier\"\n\n# Create a resource group.\naz group create --name $resourceGroup --location $location\n\n# Create a storage account.\necho \"Creating storage account $storageAccount in resource group $resourceGroup\"\naz storage account create --name $storageAccount \\\n    --resource-group $resourceGroup \\\n    --location $location \\\n    --sku Standard_RAGRS \\\n    --kind StorageV2 \\\n    --output json\n```\n\n----------------------------------------\n\nTITLE: Executing Azure CLI commands with quotes in PowerShell\nDESCRIPTION: These commands demonstrate different ways to properly quote Azure CLI commands in PowerShell, specifically for querying the azure-cli version.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/use-azure-cli-successfully-quoting.md#2025-04-23_snippet_14\n\nLANGUAGE: azurecli\nCODE:\n```\naz version --query '\\\"azure-cli\\\"'\naz version --query \"`\"azure-cli`\"\"\naz version --query \"\\\"azure-cli\\\"\"\naz --% version --query \"\\\"azure-cli\\\"\"\naz --% version --query \\\"azure-cli\\\"\n```\n\n----------------------------------------\n\nTITLE: Handling Apostrophes Without Single Quotes\nDESCRIPTION: Example showing that apostrophes in values don't need escaping when not using single quotes in partial value format.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/use-azure-cli-successfully-shorthand.md#2025-04-23_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\naz some-command --contact name=\"bill's\"\n```\n\n----------------------------------------\n\nTITLE: Handling Special Characters in PowerShell for Azure CLI\nDESCRIPTION: Shows how to escape special characters like @ in PowerShell when working with Azure CLI commands, using backtick or quotes.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/use-azure-cli-successfully-quoting.md#2025-04-23_snippet_11\n\nLANGUAGE: powershell\nCODE:\n```\n# The following three examples will work in PowerShell\n--parameterName `@parameters.json\n--parameterName '@parameters.json'\n--parameterName \"@parameters.json\"\n\n# This example will not work in PowerShell\n--parameterName @parameters.json\n```\n\n----------------------------------------\n\nTITLE: Viewing Azure CLI Configuration Settings\nDESCRIPTION: Displays the current configuration settings for the Azure CLI installation, including any default values that have been set.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/manage-azure-groups-azure-cli.md#2025-04-23_snippet_6\n\nLANGUAGE: azurecli\nCODE:\n```\naz config get\n```\n\n----------------------------------------\n\nTITLE: Resetting Service Principal Password with Azure CLI\nDESCRIPTION: Resets a service principal password using the az ad sp credential reset command, returning the new password to the console and log file. This approach should only be used in testing environments.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/azure-cli-sp-tutorial-7.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\naz ad sp credential reset --id myServicePrincipalID\n```\n\n----------------------------------------\n\nTITLE: Getting Help in Full Value Shorthand Syntax\nDESCRIPTION: Examples of how to use the double question mark (??) syntax to get help at various points when constructing a full value shorthand syntax command.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/use-azure-cli-successfully-shorthand.md#2025-04-23_snippet_29\n\nLANGUAGE: bash\nCODE:\n```\naz some-command --contact \"{??\"\n```\n\n----------------------------------------\n\nTITLE: Using Partial Value Shorthand Syntax for Single Property\nDESCRIPTION: Example of using partial value shorthand syntax to pass a single key-value pair to an Azure CLI command parameter.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/use-azure-cli-successfully-shorthand.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\naz some-command --contact name=Bill\n```\n\n----------------------------------------\n\nTITLE: Listing Available Extensions\nDESCRIPTION: Command to view all available extensions for the Azure CLI. Extensions provide additional functionality beyond the core CLI commands.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/cheat-sheet-onboarding.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\naz extension list-available --output table\n```\n\n----------------------------------------\n\nTITLE: Storing Command Output in a Variable (PowerShell)\nDESCRIPTION: This PowerShell script demonstrates how to capture TSV output into a variable. It retrieves the current subscription ID and echoes it back to the console.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/format-output-azure-cli.md#2025-04-23_snippet_10\n\nLANGUAGE: powershell\nCODE:\n```\n# PowerShell script\n$subscriptionID = az account show --query id --output tsv\necho \"Using subscription ID $subscriptionID\"\n```\n\n----------------------------------------\n\nTITLE: Executing Azure CLI commands with quotes in Windows Command Prompt\nDESCRIPTION: These commands show the correct ways to quote Azure CLI commands in Windows Command Prompt for querying the azure-cli version.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/use-azure-cli-successfully-quoting.md#2025-04-23_snippet_15\n\nLANGUAGE: azurecli\nCODE:\n```\naz version --query \"\\\"azure-cli\\\"\"\naz version --query \\\"azure-cli\\\"\n```\n\n----------------------------------------\n\nTITLE: PowerShell Output for Variable Quoting Examples\nDESCRIPTION: Displays the output of correctly quoted PowerShell variables used with Azure CLI commands.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/use-azure-cli-successfully-quoting.md#2025-04-23_snippet_3\n\nLANGUAGE: output\nCODE:\n```\nmy string ' ' wrapped in double quotes\nmy string \" \" wrapped in single quotes\n```\n\n----------------------------------------\n\nTITLE: Getting a VM's Public IP Address in PowerShell\nDESCRIPTION: PowerShell version of extracting the VM's public IP address from the IP address ID and storing it in a variable.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/azure-cli-vm-tutorial-5.md#2025-04-23_snippet_7\n\nLANGUAGE: azurecli\nCODE:\n```\n$vmIpAddress = $(az network public-ip show `\n    --ids $ipId `\n    --query ipAddress `\n    -o tsv)\n```\n\n----------------------------------------\n\nTITLE: Waiting for Resource Group Deletion\nDESCRIPTION: Waits for the resource group deletion to complete. This command blocks until the specified resource group is fully deleted, allowing for progress monitoring.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/azure-cli-vm-tutorial-6.md#2025-04-23_snippet_1\n\nLANGUAGE: azurecli\nCODE:\n```\naz group wait --name $resourceGroup --deleted\n```\n\n----------------------------------------\n\nTITLE: Verifying Azure CLI Alias Extension Installation\nDESCRIPTION: Lists installed extensions to verify the alias extension was properly installed.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/azure-cli-extension-alias.md#2025-04-23_snippet_1\n\nLANGUAGE: azurecli\nCODE:\n```\naz extension list --output table --query '[].{Name:name}'\n```\n\n----------------------------------------\n\nTITLE: Resetting Service Principal Credential with Self-Signed Certificate\nDESCRIPTION: Creates a new self-signed certificate for a service principal using the az ad sp credential reset command with the --create-cert flag. The output shows the location of the certificate file.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/azure-cli-sp-tutorial-7.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\naz ad sp credential reset --id myServicePrincipalID --create-cert\n```\n\n----------------------------------------\n\nTITLE: Querying Help for Object Property in Azure CLI\nDESCRIPTION: Shows how to get help documentation for the --contact.address property using the ?? syntax in partial value format.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/use-azure-cli-successfully-shorthand.md#2025-04-23_snippet_35\n\nLANGUAGE: bash\nCODE:\n```\naz some-command --contact address=\"??\"\n```\n\n----------------------------------------\n\nTITLE: Handling Quotation Marks in Bash Variables for Azure CLI\nDESCRIPTION: Examples of correct and incorrect ways to handle quotation marks in Bash variables when using Azure CLI. Shows how to properly escape double quotes and how single quotes are treated.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/use-azure-cli-successfully-quoting.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Correct\nmyVariable=\"my string ' ' wrapped in double quotes\"\nmyVariable='my string \" \" wrapped in single quotes'\nmyVariable=\"my string with escaped \\\" \\\" double quotes wrapped in double quotes\"\n\n# Wrong, escaped single quotes in Bash are not treated as part of the string\nmyVariable='my value with escaped \\' \\' single quotes wrapped in single quotes'\n\n# after each example ...\necho $myVariable\n```\n\n----------------------------------------\n\nTITLE: Setting Nested Scope in Interactive Mode\nDESCRIPTION: Example showing how to scope to a lower-level command group in Azure CLI interactive mode, specifically from vm to vm image.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/interactive-azure-cli.md#2025-04-23_snippet_3\n\nLANGUAGE: azurecli-interactive\nCODE:\n```\naz vm>> %%image\naz vm image>>\n```\n\n----------------------------------------\n\nTITLE: Deleting Azure Resource Group\nDESCRIPTION: This snippet demonstrates how to delete an Azure resource group using the 'az group delete' command. This operation will delete all resources within the specified resource group.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/use-azure-cli-rest-command.md#2025-04-23_snippet_15\n\nLANGUAGE: Bash\nCODE:\n```\naz group delete --resource-group <resourceGroupName>\n```\n\n----------------------------------------\n\nTITLE: Bash Output for Variable Quoting Examples\nDESCRIPTION: Shows the output of the correctly quoted Bash variables and how to include quotes in the output by escaping the variable.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/use-azure-cli-successfully-quoting.md#2025-04-23_snippet_1\n\nLANGUAGE: output\nCODE:\n```\nmy string ' ' wrapped in double quotes\nmy string \" \" wrapped in single quotes\nmy string with escaped \" \" double quotes wrapped in double quotes\n```\n\nLANGUAGE: bash\nCODE:\n```\necho \\\"$myVariable\\\"\n\"my string ' ' wrapped in double quotes\"\n\necho \\'$myVariable\\'\n'my string \" \" wrapped in single quotes'\n\necho \\\"$myVariable\\\"\n\"my string with escaped \" \" double quotes wrapped in double quotes\"\n```\n\n----------------------------------------\n\nTITLE: Using Partial Value Shorthand Syntax for Array Element\nDESCRIPTION: Example of using partial value shorthand syntax to access and set a specific element in an array in an Azure CLI command parameter.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/use-azure-cli-successfully-shorthand.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\naz some-command --contact emails[1]=\"Bill@outlook.com\"\n```\n\n----------------------------------------\n\nTITLE: JSON String Handling with Azure CLI in Bash\nDESCRIPTION: Demonstrates correct and incorrect ways to pass JSON strings as parameters in Bash when using Azure CLI commands. Shows how quotes and spaces are interpreted.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/use-azure-cli-successfully-quoting.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n# Correct in Bash\naz '{\"key\":\"value\"}' --debug\n>> Command arguments: ['{\"key\":\"value\"}', '--debug']\n\naz \"{\\\"key\\\":\\\"value\\\"}\" --debug\n>> Command arguments: ['{\"key\":\"value\"}', '--debug']\n```\n\n----------------------------------------\n\nTITLE: Installing Azure CLI using curl on Linux\nDESCRIPTION: Downloads and runs the Azure CLI installation script using curl. This command fetches the install script from the Microsoft shortlink and pipes it to bash for execution.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/cli-install-linux-script.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -L https://aka.ms/InstallAzureCli | bash\n```\n\n----------------------------------------\n\nTITLE: Using Echo in PowerShell to Verify Expression Values\nDESCRIPTION: Demonstrates how to use the echo command (alias for Write-Host) in PowerShell to verify the value of a string expression. Useful for troubleshooting variable content.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/get-started-tutorial-2-environment-syntax.md#2025-04-23_snippet_15\n\nLANGUAGE: powershell\nCODE:\n```\n$strExpression='{\"key\":\"value\"}'\necho $strExpression\n```\n\n----------------------------------------\n\nTITLE: Deleting Multiple Azure Storage Accounts Using PowerShell Script\nDESCRIPTION: This PowerShell script performs the same operation as the Bash script, listing and deleting storage accounts with names starting with 'msdocs' in a specified resource group. It showcases the use of Azure CLI commands within a PowerShell environment.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/get-started-tutorial-4-delete-resources.md#2025-04-23_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n# Set your resource group variable\n$rgName=\"<msdocs-tutorial-rg-0000000>\"\n\n# Get the name of all storage accounts in a resource group.\naz storage account list --resource-group $rgName `\n    --query \"[].{Name:name}\" `\n    --output table\n\n# Delete storage accounts without a confirmation prompt.\nForEach ($saList in $(az storage account list --resource-group $rgName `\n    --query \"[?starts_with(name, 'msdocs') == ``true``].id\" `\n    --output tsv)\n    )\n    {\n    echo \"deleting storage account $saList\"\n    az storage account delete --ids $saList --yes\n    }\n\n# Verify the storage accounts are gone.\naz storage account list --resource-group $rgName `\n    --query \"[?starts_with(name, 'msdocs') == ``true``].name\"\n```\n\n----------------------------------------\n\nTITLE: Running Bash Commands in Interactive Mode\nDESCRIPTION: Example showing how to run Bash commands without leaving Azure CLI interactive mode using the #[cmd] syntax.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/interactive-azure-cli.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\naz>> #dir\n```\n\n----------------------------------------\n\nTITLE: Installing Latest Azure CLI using PowerShell MSI Installer\nDESCRIPTION: PowerShell command to download and install the latest version of Azure CLI on Windows using MSI installer. The script downloads the installer, executes it silently, and cleans up the installation file afterward.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/cli-install-windows-msi-powershell.md#2025-04-23_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n$ProgressPreference = 'SilentlyContinue'; Invoke-WebRequest -Uri https://aka.ms/installazurecliwindows -OutFile .\\AzureCLI.msi; Start-Process msiexec.exe -Wait -ArgumentList '/I AzureCLI.msi /quiet'; Remove-Item .\\AzureCLI.msi\n```\n\n----------------------------------------\n\nTITLE: Querying VMs with Large Disk Sizes in PowerShell using Azure CLI\nDESCRIPTION: This command lists virtual machines with OS disks larger than or equal to 50GB in PowerShell. It requires double backticks to properly escape the number in the JMESPath query due to PowerShell's parsing rules.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/query-azure-cli-examples.md#2025-04-23_snippet_4\n\nLANGUAGE: azurecli\nCODE:\n```\naz vm list --resource-group QueryDemo --query \"[?storageProfile.osDisk.diskSizeGb >=``50``].{Name:name,  admin:osProfile.adminUsername, DiskSize:storageProfile.osDisk.diskSizeGb }\" --output table\n```\n\n----------------------------------------\n\nTITLE: VM Commands with Default Scope in Interactive Mode\nDESCRIPTION: Examples of VM-related commands using the default scope in Azure CLI interactive mode.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/interactive-azure-cli.md#2025-04-23_snippet_1\n\nLANGUAGE: azurecli-interactive\nCODE:\n```\naz>> vm create -n <myVirtualMachine> -g <myResourceGroup> --image Ubuntu2204\naz>> vm list -o table\n```\n\n----------------------------------------\n\nTITLE: Combining Full and Partial Value Shorthand Syntax\nDESCRIPTION: Example of how to combine full and partial value shorthand syntax in the same Azure CLI command, starting with full value followed by partial value additions.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/use-azure-cli-successfully-shorthand.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\naz some-command --contact \"{name:Bill,age:20,paid:true,emails:[Bill@microsoft.com,Bill@outlook.com]}\" motto=\"One man's bug is another man's lesson.\"\n```\n\n----------------------------------------\n\nTITLE: JSON String Handling with Azure CLI in PowerShell\nDESCRIPTION: Shows correct and incorrect ways to pass JSON strings as parameters in PowerShell when using Azure CLI commands. Includes proper escaping techniques for PowerShell.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/use-azure-cli-successfully-quoting.md#2025-04-23_snippet_7\n\nLANGUAGE: powershell\nCODE:\n```\n# Correct in PowerShell\naz '{\"key\": \"value\"}' --debug\n>> Command arguments: ['{key: value}', '--debug']\n\naz \"{`\"key`\": `\"value`\"}\" --debug\n>> Command arguments: ['{key: value}', '--debug']\n\naz \"{\"\"key\"\": \"\"value\"\"}\" --debug\n>> Command arguments: ['{key: value}', '--debug']\n```\n\n----------------------------------------\n\nTITLE: Getting Command Recommendations\nDESCRIPTION: Command to receive suggestions for the next Azure CLI command based on common usage patterns.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/cheat-sheet-onboarding.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\naz next\n```\n\n----------------------------------------\n\nTITLE: Sending Feedback Using Azure CLI Command\nDESCRIPTION: This snippet demonstrates how to use the built-in feedback command in Azure CLI. The command 'az feedback' opens an interactive interface that allows users to provide general feedback to help improve the Azure CLI.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/get-started-with-azure-cli.md#2025-04-23_snippet_6\n\nLANGUAGE: azurecli\nCODE:\n```\naz feedback\n```\n\n----------------------------------------\n\nTITLE: Setting Default Output Format to None in Azure CLI\nDESCRIPTION: This command sets the default output format for Azure CLI to 'none' using the 'az config set' command, which is useful when console output isn't needed.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/format-output-azure-cli.md#2025-04-23_snippet_15\n\nLANGUAGE: azurecli\nCODE:\n```\naz config set core.output=none\n```\n\n----------------------------------------\n\nTITLE: Filtering and Processing TSV Output (Azure CLI)\nDESCRIPTION: This command demonstrates how to pipe TSV output to other bash commands. It filters VMs containing 'RGD' and extracts only the name field using cut.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/format-output-azure-cli.md#2025-04-23_snippet_8\n\nLANGUAGE: azurecli\nCODE:\n```\naz vm list --output tsv --query '[].[id, location, resourceGroup, name]' | grep RGD | cut -f4\n```\n\n----------------------------------------\n\nTITLE: YAML Output Example\nDESCRIPTION: Example of the YAML output format from the az vm list command. YAML uses indentation to show nested properties instead of braces and is generally easier to read.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/format-output-azure-cli.md#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n- availabilitySet: null\n  diagnosticsProfile: null\n  hardwareProfile:\n    vmSize: Standard_DS1_v2\n  id: /subscriptions/.../resourceGroups/DEMORG1/providers/Microsoft.Compute/virtualMachines/DemoVM010\n  identity: null\n  instanceView: null\n  licenseType: null\n  location: westus\n  name: ExampleVM1\n  networkProfile:\n    networkInterfaces:\n    - id: /subscriptions/.../resourceGroups/DemoRG1/providers/Microsoft.Network/networkInterfaces/DemoVM010Nic\n      primary: null\n      resourceGroup: DemoRG1\n  ...\n...\n```\n\n----------------------------------------\n\nTITLE: Setting PowerShell Tab Key to Display Completion Menu\nDESCRIPTION: This PowerShell command configures the Tab key to display all available completion options in a menu format. Add this to your PowerShell profile alongside the tab completion script for an enhanced command-line experience.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/tab-completion.md#2025-04-23_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nSet-PSReadlineKeyHandler -Key Tab -Function MenuComplete\n```\n\n----------------------------------------\n\nTITLE: Installing Azure CLI using WinGet in PowerShell\nDESCRIPTION: This PowerShell command uses WinGet to install the latest version of Azure CLI. The --exact option ensures the official Azure CLI package is installed.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/cli-install-windows-winget.md#2025-04-23_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nwinget install --exact --id Microsoft.AzureCLI\n```\n\n----------------------------------------\n\nTITLE: JSON with Null String Value\nDESCRIPTION: Example JSON structure containing the literal string \"null\" that needs special handling to differentiate from an actual null value.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/use-azure-cli-successfully-shorthand.md#2025-04-23_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"null\",\n  \"age\": 20,\n  \"paid\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Changing Scope in Interactive Mode\nDESCRIPTION: Examples showing how to change the scope back up to a higher level or to the root in Azure CLI interactive mode.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/interactive-azure-cli.md#2025-04-23_snippet_4\n\nLANGUAGE: azurecli-interactive\nCODE:\n```\naz vm image>> %%\naz>>\n```\n\n----------------------------------------\n\nTITLE: Adding Array Elements with Combined Shorthand Syntax\nDESCRIPTION: Example of starting with a full value shorthand syntax and then adding a specific array element using partial value syntax.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/use-azure-cli-successfully-shorthand.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\naz some-command --contact \"{name:Bill,age:20,paid:true,emails:[Bill@microsoft.com]}\" emails[1]=\"Bill@outlook.com\" motto=\"One man's bug is another man's lesson.\"\n```\n\n----------------------------------------\n\nTITLE: Removing Azure CLI repository from zypper\nDESCRIPTION: Removes the Azure CLI repository configuration from the zypper package manager. This should be done after uninstalling Azure CLI if you don't plan to reinstall it.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/cli-install-linux-zypper.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nsudo zypper removerepo azure-cli\n```\n\n----------------------------------------\n\nTITLE: Installing curl dependency for Azure CLI on SUSE\nDESCRIPTION: Installs the curl package, which is required for downloading Microsoft repository keys and packages when installing Azure CLI from Microsoft repositories.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/cli-install-linux-zypper.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo zypper install -y curl\n```\n\n----------------------------------------\n\nTITLE: Handling Apostrophes in Partial Value Format\nDESCRIPTION: Example showing how apostrophes in text don't need escaping when using double quotes in partial value format.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/use-azure-cli-successfully-shorthand.md#2025-04-23_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\naz some-command --contact motto=\"One man's bug is another man's lesson.\"\n```\n\n----------------------------------------\n\nTITLE: Installing the Azure CLI Alias Extension\nDESCRIPTION: Installs the alias extension for Azure CLI using the az extension add command. Requires Azure CLI version 2.0.28 or higher.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/azure-cli-extension-alias.md#2025-04-23_snippet_0\n\nLANGUAGE: azurecli\nCODE:\n```\naz extension add --name alias\n```\n\n----------------------------------------\n\nTITLE: Installing Specific Azure CLI Version with Hard-coded Values on Debian/Ubuntu\nDESCRIPTION: Installs a specific version of Azure CLI using explicit version and distribution name, useful for scripting or when version consistency is required.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/cli-install-linux-apt.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install azure-cli=2.51.0-1~bullseye\n```\n\n----------------------------------------\n\nTITLE: Displaying Current Subscription\nDESCRIPTION: Command to show details about the currently active Azure subscription in a tabular format.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/cheat-sheet-onboarding.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\naz account show --output table\n```\n\n----------------------------------------\n\nTITLE: Installing Specific Version of Azure CLI using WinGet in PowerShell\nDESCRIPTION: This PowerShell command demonstrates how to install a specific version of Azure CLI using WinGet. It includes the --version parameter to specify the desired version number.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/cli-install-windows-winget.md#2025-04-23_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nwinget install --exact --id Microsoft.AzureCLI --version 2.67.0\n```\n\n----------------------------------------\n\nTITLE: JSON Example with Apostrophes\nDESCRIPTION: Sample JSON structure containing apostrophes in text that would need special handling in shorthand syntax.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/use-azure-cli-successfully-shorthand.md#2025-04-23_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"Bill\",\n  \"motto\": \"One man's bug is another man's lesson.\",\n  \"age\": 20,\n  \"paid\": true,\n  \"emails\": [\n    \"Bill@microsoft.com\",\n    \"Bill@outlook.com\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Running a Specific Version of Azure CLI in Docker\nDESCRIPTION: This command demonstrates how to run a specific version (2.62.0) of the Azure CLI in a Docker container using the cbl-mariner2.0 base image.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/run-azure-cli-docker.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -it mcr.microsoft.com/azure-cli:2.62.0-cbl-mariner2.0\n```\n\n----------------------------------------\n\nTITLE: JSON Example with Special Characters\nDESCRIPTION: Sample JSON structure that includes values with spaces and special characters that would need special handling in shorthand syntax.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/use-azure-cli-successfully-shorthand.md#2025-04-23_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"Bill RP\",\n  \"age\": 20,\n  \"paid\": true,\n  \"data\": \"{a: [1, 2]}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing Python dependency issues for Azure CLI\nDESCRIPTION: This command updates, installs, upgrades, and links the Python 3.10 dependency using Homebrew. It can help resolve issues related to Python or installed packages during Azure CLI installation.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/install-azure-cli-macos.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbrew update && brew install python@3.10 && brew upgrade python@3.10\nbrew link --overwrite python@3.10\n```\n\n----------------------------------------\n\nTITLE: ROPC Authentication Error Output with MFA Enabled\nDESCRIPTION: This code snippet shows the error message displayed when attempting to use ROPC flow with a user that has MFA enabled. The error indicates that multi-factor authentication is required and the authentication attempt fails.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/authenticate-azure-cli-mfa.md#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nAADSTS50076: Due to a configuration change made by your administrator, or because you moved to a new location, you must use multi-factor authentication to access ''. Trace ID Correlation ID: Timestamp:\n```\n\n----------------------------------------\n\nTITLE: Using Single Quotes in Partial Value Format\nDESCRIPTION: Example of using single quotes within partial value shorthand syntax to handle string values with special characters.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/use-azure-cli-successfully-shorthand.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\naz some-command --contact name=\"'Bill RP'\" data=\"'{a: [1, 2]}'\"\n```\n\n----------------------------------------\n\nTITLE: Adding Tags to Azure Storage Account in Bash\nDESCRIPTION: This Bash script demonstrates adding tags to an Azure storage account, showcasing different quoting scenarios including spaces, empty values, and special characters.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/get-started-tutorial-2-environment-syntax.md#2025-04-23_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\n# Create new tags. This syntax works with or without quotes around each key-value pair.\naz storage account update --name <msdocssa00000000> \\\n                          --resource-group <msdocs-tutorial-rg-00000000> \\\n                          --tags Team=t1 Environment=e1\n\n# Create new tags containing spaces. You must use quotes.\naz storage account update --name <msdocssa00000000> \\\n                          --resource-group <msdocs-tutorial-rg-00000000> \\\n                          --tags \"Floor number=f1\" \"Cost center=cc1\"\n\n# Create a new tag with an empty value.\naz storage account update --name <msdocssa00000000> \\\n                          --resource-group <msdocs-tutorial-rg-00000000> \\\n                          --tags \"Department=\"''\"\"\n\n# Create a new tag containing special characters resulting in \"Path\": \"$G:\\\\myPath\".\naz storage account update --name <msdocssa00000000> \\\n                          --resource-group <msdocs-tutorial-rg-00000000> \\\n                          --tags \"Path=\\$G:\\myPath\"\n```\n\n----------------------------------------\n\nTITLE: Using the Debug Parameter with Azure CLI Storage Account Creation\nDESCRIPTION: Sample debug output when creating a storage account using the --debug parameter. Shows command arguments, request URL, headers, and body details that are useful for troubleshooting.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/get-started-tutorial-2-environment-syntax.md#2025-04-23_snippet_13\n\nLANGUAGE: output\nCODE:\n```\n cli.knack.cli: Command arguments: ['storage', 'account', 'create', '--name', 'msdocssa00000000', '--resource-group', 'msdocs-rg-test', '--location', 'eastus', '--sku', 'Standard_RAGRS', '--kind', 'StorageV2', '--output', 'json', '--debug']\n ...\n cli.azure.cli.core.sdk.policies: Request URL: 'https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Storage/checkNameAvailability?api-version=2023-01-01'\ncli.azure.cli.core.sdk.policies: Request method: 'POST'\ncli.azure.cli.core.sdk.policies: Request headers:\ncli.azure.cli.core.sdk.policies:     'Content-Type': 'application/json'\ncli.azure.cli.core.sdk.policies:     'Content-Length': '73'\ncli.azure.cli.core.sdk.policies:     'Accept': 'application/json'\ncli.azure.cli.core.sdk.policies:     'x-ms-client-request-id': '00000000-0000-0000-0000-000000000000'\ncli.azure.cli.core.sdk.policies:     'CommandName': 'storage account create'\ncli.azure.cli.core.sdk.policies:     'ParameterSetName': '--name --resource-group --location --sku --kind --output --debug'\ncli.azure.cli.core.sdk.policies:     'User-Agent': 'AZURECLI/2.61.0 (DEB) azsdk-python-core/1.28.0 Python/3.11.8 (Linux-5.15.153.1-microsoft-standard-WSL2-x86_64-with-glibc2.35)'\ncli.azure.cli.core.sdk.policies:     'Authorization': '*****'\ncli.azure.cli.core.sdk.policies: Request body:\ncli.azure.cli.core.sdk.policies: {\"name\": \"msdocssa00000000\", \"type\": \"Microsoft.Storage/storageAccounts\"}\nurllib3.connectionpool: Starting new HTTPS connection (1): management.azure.com:443\nurllib3.connectionpool: https://management.azure.com:443 \"POST /subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Storage/checkNameAvailability?api-version=2023-01-01 HTTP/1.1\" 200 22\ncli.azure.cli.core.sdk.policies: Response status: 200\n...\n```\n\n----------------------------------------\n\nTITLE: Installing specific Azure CLI version on SUSE\nDESCRIPTION: Installs a specific version of Azure CLI from the Azure CLI repository. Replace <version> with the desired version number (for example, 2.38.2).\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/cli-install-linux-zypper.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsudo zypper install --from azure-cli azure-cli=<version>-1.el7\n```\n\n----------------------------------------\n\nTITLE: Removing Azure CLI Extensions\nDESCRIPTION: This command removes an installed extension that is no longer needed.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/azure-cli-extensions-overview.md#2025-04-23_snippet_9\n\nLANGUAGE: azurecli\nCODE:\n```\naz extension remove --name <extension-name>\n```\n\n----------------------------------------\n\nTITLE: Installing Azure CLI on SLES 12 with custom Python\nDESCRIPTION: Installs Azure CLI on SLES 12 or other systems without Python 3.6+ by using a script that installs Python 3.8 under /usr/local/azcli and configures Azure CLI to use it.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/cli-install-linux-zypper.md#2025-04-23_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ncurl -sL https://azurecliprod.blob.core.windows.net/sles12_install_v2.sh | sudo bash\n```\n\n----------------------------------------\n\nTITLE: Installing Microsoft Signing Key for Azure CLI on Debian/Ubuntu\nDESCRIPTION: Downloads and installs the Microsoft signing key required for package verification. Creates a keyring directory, downloads the key, and sets appropriate permissions.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/cli-install-linux-apt.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo mkdir -p /etc/apt/keyrings\ncurl -sLS https://packages.microsoft.com/keys/microsoft.asc |\n  gpg --dearmor | sudo tee /etc/apt/keyrings/microsoft.gpg > /dev/null\nsudo chmod go+r /etc/apt/keyrings/microsoft.gpg\n```\n\n----------------------------------------\n\nTITLE: Disabling Azure CLI Extension Dynamic Installation\nDESCRIPTION: This command turns off the dynamic installation feature, reverting to the default behavior that returns an error when an extension command is not found.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/azure-cli-extensions-overview.md#2025-04-23_snippet_6\n\nLANGUAGE: azurecli\nCODE:\n```\naz config set extension.use_dynamic_install=no\n```\n\n----------------------------------------\n\nTITLE: Simplified Handling of Spaces in Partial Value Format\nDESCRIPTION: Example showing how double quotes alone can handle spaces in partial value format without needing single quotes in some cases.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/use-azure-cli-successfully-shorthand.md#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\naz some-command --contact name=\"Bill RP\"\n```\n\n----------------------------------------\n\nTITLE: Running Azure CLI from Unzipped Folder in Windows Command Line\nDESCRIPTION: Command to run the Azure CLI from the unzipped folder location without adding it to PATH. This is useful for temporary usage without system configuration.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/cli-install-windows-zip.md#2025-04-23_snippet_0\n\nLANGUAGE: cmd\nCODE:\n```\n<unzipped folder path>\\bin\\az.cmd\n```\n\n----------------------------------------\n\nTITLE: Launching Azure CLI Interactive Mode\nDESCRIPTION: Command to start the interactive mode of Azure CLI, which provides an enhanced experience with automatic help information and easier subcommand selection.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/get-started-with-azure-cli.md#2025-04-23_snippet_5\n\nLANGUAGE: azurecli-interactive\nCODE:\n```\naz interactive\n```\n\n----------------------------------------\n\nTITLE: Handling Apostrophes in Full Value Format\nDESCRIPTION: Example of how to escape multiple apostrophes in a text string using the forward slash in full value shorthand syntax.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/use-azure-cli-successfully-shorthand.md#2025-04-23_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\naz some-command --contact \"{name:Bill,motto:'One man'/s bug is another man'/s lesson.',age:20,paid:true,emails:[Bill@microsoft.com,Bill@outlook.com]}\"\n```\n\n----------------------------------------\n\nTITLE: JSON with Actual Null Value\nDESCRIPTION: Example JSON structure containing an actual null value for a property.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/use-azure-cli-successfully-shorthand.md#2025-04-23_snippet_22\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"Bill\",\n  \"age\": 20,\n  \"paid\": true,\n  \"emails\": [\n    \"Bill@microsoft.com\",\n    \"Bill@outlook.com\"\n  ],\n  \"address\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Resource Group Using Azure CLI\nDESCRIPTION: Command to delete a resource group in Azure, which removes all resources used in the tutorial. The --no-wait parameter keeps the CLI from blocking while the deletion takes place.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/azure-cli-sp-tutorial-8.md#2025-04-23_snippet_0\n\nLANGUAGE: azurecli\nCODE:\n```\naz group delete --name myResourceGroup --no-wait\n```\n\n----------------------------------------\n\nTITLE: Importing Microsoft repository key on SUSE systems\nDESCRIPTION: Imports the Microsoft signing key to the RPM database to verify the authenticity of Microsoft packages. This is required before installing Azure CLI from Microsoft repositories.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/cli-install-linux-zypper.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo rpm --import https://packages.microsoft.com/keys/microsoft.asc\n```\n\n----------------------------------------\n\nTITLE: Displaying Azure Subscription Lock Details using Azure CLI\nDESCRIPTION: This snippet shows how to display detailed information about a specific subscription lock using the az account lock show command.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/manage-azure-subscriptions-azure-cli.md#2025-04-23_snippet_12\n\nLANGUAGE: azurecli\nCODE:\n```\naz account lock show --name \"Cannot delete subscription\"\n```\n\n----------------------------------------\n\nTITLE: Searching for available Azure CLI versions on SUSE\nDESCRIPTION: Lists all available versions of the Azure CLI package in the configured repositories. This is useful when you need to install a specific version of Azure CLI.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/cli-install-linux-zypper.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nzypper search --details --match-exact azure-cli\n```\n\n----------------------------------------\n\nTITLE: Removing Azure CLI Repository Configuration\nDESCRIPTION: Command to remove the Azure CLI repository configuration file, which should be executed after uninstalling if you don't plan to reinstall the CLI.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/cli-install-linux-dnf.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nsudo rm /etc/yum.repos.d/azure-cli.repo\n```\n\n----------------------------------------\n\nTITLE: Installing Azure CLI using DNF Package Manager\nDESCRIPTION: Command to install the Azure CLI package using the DNF package manager after the repository has been configured.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/cli-install-linux-dnf.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsudo dnf install azure-cli\n```\n\n----------------------------------------\n\nTITLE: Escaping Apostrophes in Full Value Format\nDESCRIPTION: Example of how to escape apostrophes within single-quoted strings using the forward slash escape character in full value shorthand syntax.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/use-azure-cli-successfully-shorthand.md#2025-04-23_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\naz some-command --contact \"{name:'bill'/s',age:20,paid:true}\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Azure CLI Version Output\nDESCRIPTION: Example output of the 'az version' command that shows the installed version of the Azure CLI and its core components.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/install-azure-cli.md#2025-04-23_snippet_0\n\nLANGUAGE: output\nCODE:\n```\n{\n  \"azure-cli\": \"x.xx.0x\",\n  \"azure-cli-core\": \"x.xx.x\",\n  \"azure-cli-telemetry\": \"x.x.x\",\n  \"extensions\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Azure Cosmos DB Accounts\nDESCRIPTION: This command lists all Azure Cosmos DB accounts in a subscription or resource group. It provides an overview of available Cosmos DB resources.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/samples-reference-group.md#2025-04-23_snippet_8\n\nLANGUAGE: Azure CLI\nCODE:\n```\naz cosmosdb list\n```\n\n----------------------------------------\n\nTITLE: Passing \"null\" as String in Partial Value Format\nDESCRIPTION: Example of how to pass the literal string \"null\" using single quotes in partial value shorthand syntax.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/use-azure-cli-successfully-shorthand.md#2025-04-23_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\naz some-command --contact name=\"'null'\"\n```\n\n----------------------------------------\n\nTITLE: Changing Active Subscription Using a Bash Variable\nDESCRIPTION: Bash commands to store a subscription ID in a variable and then use it to change the active subscription.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/manage-azure-subscriptions-azure-cli.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n# change the active subscription using a variable\nsubscriptionId=\"$(az account list --query \"[?name=='my case sensitive subscription full name'].id\" --output tsv)\"\naz account set --subscription $subscriptionId\n```\n\n----------------------------------------\n\nTITLE: Deleting Service Principal Using Azure CLI\nDESCRIPTION: Command to delete an individual service principal in Azure using the az ad sp delete command. Requires the service principal ID as a parameter.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/azure-cli-sp-tutorial-8.md#2025-04-23_snippet_1\n\nLANGUAGE: azurecli\nCODE:\n```\naz ad sp delete --id myServicePrincipalID\n```\n\n----------------------------------------\n\nTITLE: Adding Microsoft Repository for RHEL 9 or CentOS Stream\nDESCRIPTION: Command to add the Microsoft packages repository for RHEL 9 or CentOS Stream, which configures the package manager to fetch Azure CLI from the correct source.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/cli-install-linux-dnf.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo dnf install -y https://packages.microsoft.com/config/rhel/9.0/packages-microsoft-prod.rpm\n```\n\n----------------------------------------\n\nTITLE: Updating Azure CLI and All System Packages on Debian/Ubuntu\nDESCRIPTION: Updates the repository information and upgrades all installed packages on the system, including Azure CLI, that don't have dependency changes.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/cli-install-linux-apt.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get update && sudo apt-get upgrade\n```\n\n----------------------------------------\n\nTITLE: Updating SSL certificates on SUSE to resolve certificate problems\nDESCRIPTION: Updates the certificate authorities on the SUSE system to resolve SSL certificate verification issues that may occur when connecting to Microsoft repositories.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/cli-install-linux-zypper.md#2025-04-23_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nsudo zypper update-ca-certificates\n```\n\n----------------------------------------\n\nTITLE: Displaying Supported Linux Distributions Table in Markdown\nDESCRIPTION: This markdown table lists the supported Linux operating systems for Azure CLI, including Ubuntu, Debian, Alpine, RHEL, CentOS Stream, and Mariner. It provides version numbers and end of support dates where applicable.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/azure-cli-support-lifecycle.md#2025-04-23_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n|Operating system|Version|End of support|\n|-|-|-|\n| Ubuntu | 20.04 LTS | April 2025 |\n| | 22.04 LTS | April 2027 |\n| | 24.04 LTS | June 2029 |\n| Debian | 11 | |\n| | 12 | |\n| Alpine | 3.17 | November 22, 2024 |\n| RHEL | 8 | May 31, 2029 |\n| | 9 | May 31, 2032 |\n| CentOS Stream | 9 | Estimated 2027 |\n| Mariner | 2.0 | |\n```\n\n----------------------------------------\n\nTITLE: Installing Microsoft Trusted Root Certificates on CBL-Mariner\nDESCRIPTION: This command installs the official Microsoft curated set of trusted root certificates on CBL-Mariner using the tdnf package manager.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/cli-install-linux-tdnf.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo tdnf install ca-certificates\n```\n\n----------------------------------------\n\nTITLE: Passing \"null\" as String in Full Value Format\nDESCRIPTION: Example of how to pass the literal string \"null\" using single quotes in full value shorthand syntax.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/use-azure-cli-successfully-shorthand.md#2025-04-23_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\naz some-command --contact \"{name:'null',age:20,paid:true}\"\n```\n\n----------------------------------------\n\nTITLE: Disabling AI Features in Interactive Mode\nDESCRIPTION: Command to disable the AI-powered features in Azure CLI interactive mode by setting a configuration option.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/interactive-azure-cli.md#2025-04-23_snippet_11\n\nLANGUAGE: azurecli-interactive\nCODE:\n```\naz config set interactive.enable_recommender=False\n```\n\n----------------------------------------\n\nTITLE: Installing Specific Azure CLI Version\nDESCRIPTION: Command to install a specific version of Azure CLI, where <version> should be replaced with the desired version number. This allows pinning to a particular release.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/cli-install-linux-dnf.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsudo dnf install azure-cli-<version>-1.el7\n```\n\n----------------------------------------\n\nTITLE: Passing Null Value in Partial Value Format\nDESCRIPTION: Example of how to set properties to null using the 'null' keyword in partial value shorthand syntax.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/use-azure-cli-successfully-shorthand.md#2025-04-23_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\naz some-command --contact name=Bill address=null\n```\n\n----------------------------------------\n\nTITLE: Removing Azure CLI data from macOS\nDESCRIPTION: This command removes the Azure CLI data directory from the user's home folder. It should be used if you don't plan to reinstall Azure CLI and want to remove all associated data.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/install-azure-cli-macos.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nrm -rf ~/.azure\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Resources at Scale (PowerShell)\nDESCRIPTION: PowerShell version of Azure resource creation script. Uses Azure CLI commands to create resources based on CSV input with logging and conditional logic.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/create-azure-resources-at-scale.md#2025-04-23_snippet_7\n\nLANGUAGE: azurecli\nCODE:\n```\naz account set --subscription $subscriptionID\n\n$csv = Import-Csv $csvFileLocation\nforeach ($row in $csv) {\n    $random = -join ((65..90) + (97..122) | Get-Random -Count 8 | % {[char]$_})\n    \"Starting creation of resourceNo $($row.resourceNo) at $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss').\" | Tee-Object -Append $logFileLocation\n    if ($row.createRG -eq \"TRUE\") {\n        $newRGName = \"$rgPrefix$random\"\n        \"  Creating RG $newRGName at $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss').\" | Out-File -Append $logFileLocation\n        az group create --name $newRGName --location $row.location | Out-File -Append $logFileLocation\n        \"  RG $newRGName creation complete\"\n        if ($row.createVnet -eq \"TRUE\") {\n            $vnetName = \"$vnetPrefix$random\"\n            $subnetName = \"$subnetPrefix$random\"\n            \"  Creating VNet $vnetName in RG $newRGName at $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss').\" | Out-File -Append $logFileLocation\n            az network vnet create `\n                --resource-group $newRGName `\n                --name $vnetName `\n                --address-prefix $row.vnetAddressPrefix `\n                --subnet-name $subnetName `\n                --subnet-prefix $row.subnetAddressPrefix | Out-File -Append $logFileLocation\n            \"  VNet $vnetName creation complete\"\n            $vmName = \"$vmPrefix$random\"\n            \"  Creating VM $vmName in RG $newRGName at $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss').\" | Out-File -Append $logFileLocation\n            if ([string]::IsNullOrEmpty($row.adminUsername)) {\n                az vm create `\n                    --resource-group $newRGName `\n                    --name $vmName `\n                    --image $row.vmImage `\n                    --vnet-name $vnetName `\n                    --subnet $subnetName `\n                    --public-ip-sku $row.publicIpSku `\n                    --generate-ssh-keys | Out-File -Append $logFileLocation\n            } else {\n                az vm create `\n                    --resource-group $newRGName `\n                    --name $vmName `\n                    --image $row.vmImage `\n                    --vnet-name $vnetName `\n                    --subnet $subnetName `\n                    --public-ip-sku $row.publicIpSku `\n                    --admin-username $row.adminUsername | Out-File -Append $logFileLocation\n            }\n            \"  VM $vmName creation complete\"\n        } else {\n            $vmName = \"$vmPrefix$random\"\n            \"  Creating VM $vmName in RG $newRGName at $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss').\" | Out-File -Append $logFileLocation\n            if ([string]::IsNullOrEmpty($row.adminUsername)) {\n                az vm create `\n                    --resource-group $newRGName `\n                    --name $vmName `\n                    --image $row.vmImage `\n                    --public-ip-sku $row.publicIpSku `\n                    --generate-ssh-keys | Out-File -Append $logFileLocation\n            } else {\n                az vm create `\n                    --resource-group $newRGName `\n                    --name $vmName `\n                    --image $row.vmImage `\n                    --public-ip-sku $row.publicIpSku `\n                    --admin-username $row.adminUsername | Out-File -Append $logFileLocation\n            }\n            \"  VM $vmName creation complete\"\n        }\n    } else {\n        $vmName = \"$vmPrefix$random\"\n        \"  Creating VM $vmName in RG $($row.existingRGName) at $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss').\" | Out-File -Append $logFileLocation\n        if ([string]::IsNullOrEmpty($row.adminUsername)) {\n            az vm create `\n                --resource-group $row.existingRGName `\n                --name $vmName `\n                --image $row.vmImage `\n                --public-ip-sku $row.publicIpSku `\n                --generate-ssh-keys | Out-File -Append $logFileLocation\n        } else {\n            az vm create `\n                --resource-group $row.existingRGName `\n                --name $vmName `\n                --image $row.vmImage `\n                --public-ip-sku $row.publicIpSku `\n                --admin-username $row.adminUsername | Out-File -Append $logFileLocation\n        }\n        \"  VM $vmName creation complete\"\n    }\n    \"\" | Tee-Object -Append $logFileLocation\n}\n\nWrite-Host \"Log file contents:\"\nGet-Content $logFileLocation\n```\n\n----------------------------------------\n\nTITLE: Automated Azure CLI Installation for RHEL 7.6\nDESCRIPTION: Command to download and execute an installation script that builds Azure CLI with Python 3.6 from source, designed for RHEL 7.6 or systems without native Python 3 support.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/cli-install-linux-dnf.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ncurl -sL https://azurecliprod.blob.core.windows.net/rhel7_6_install.sh | sudo bash\n```\n\n----------------------------------------\n\nTITLE: Installing Azure CLI from Microsoft repository on SUSE\nDESCRIPTION: Installs the Azure CLI package from the previously added Microsoft repository. This command may prompt for confirmation to ignore some dependencies (select option 2).\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/cli-install-linux-zypper.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsudo zypper install --from azure-cli azure-cli\n```\n\n----------------------------------------\n\nTITLE: Reinstalling and removing outdated Azure CLI with dependencies\nDESCRIPTION: Reinstalls the old Azure CLI package to correctly link dependencies, then removes it along with all dependencies. This resolves issues when dependencies of an outdated version affect the latest version.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/cli-install-linux-zypper.md#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n# The package name may vary on different system version, run 'zypper --no-refresh info azure-cli' to check the source package format\nsudo zypper install --oldpackage azure-cli-2.0.45-4.22.noarch\n\nsudo zypper rm -y --clean-deps azure-cli\n```\n\n----------------------------------------\n\nTITLE: Displaying Python Version Support Table in Markdown\nDESCRIPTION: This markdown table shows the expected end of support dates for different Python versions that Azure CLI depends on. It includes versions 3.8 through 3.11 with their respective end of support dates.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/azure-cli-support-lifecycle.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n|Python version|End of support date|\n|-|-|\n|3.8|October 2024 |\n|3.9|October 2025 |\n|3.10|October 2026 |\n|3.11|October 2027 |\n```\n\n----------------------------------------\n\nTITLE: Activating Azure CLI alias after custom installation\nDESCRIPTION: Activates the Azure CLI alias in the current shell session after installing with the custom script. This is required for the first-time installation to use the custom Python environment.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/cli-install-linux-zypper.md#2025-04-23_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nsource ~/.bashrc\n```\n\n----------------------------------------\n\nTITLE: Passing Null Value in Full Value Format\nDESCRIPTION: Example of how to set a property to null using the 'null' keyword in full value shorthand syntax.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/use-azure-cli-successfully-shorthand.md#2025-04-23_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\naz some-command --contact \"{name:Bill,age:20,paid:true,emails:[Bill@microsoft.com,Bill@outlook.com],address:null}\"\n```\n\n----------------------------------------\n\nTITLE: Unregistering an Azure Cloud with Azure CLI\nDESCRIPTION: This command unregisters a previously created Azure cloud. It's useful for removing clouds that are no longer needed.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/manage-clouds-azure-cli.md#2025-04-23_snippet_3\n\nLANGUAGE: azurecli\nCODE:\n```\naz cloud unregister --name MyCloud\n```\n\n----------------------------------------\n\nTITLE: Using If-Then-Else to Check for Null Variables in Azure CLI Bash Scripts\nDESCRIPTION: This snippet demonstrates how to use an If-Then-Else statement to check if a variable is null or empty. It evaluates the $resourceGroup variable and sets it if it's not already defined.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/use-azure-cli-successfully-bash.md#2025-04-23_snippet_12\n\nLANGUAGE: azurecli\nCODE:\n```\nif [ $resourceGroup != '' ]; then\n   echo $resourceGroup\nelse\n   resourceGroup=\"msdocs-learn-bash-$randomIdentifier\"\nfi\n```\n\n----------------------------------------\n\nTITLE: Getting Help for Nested Properties in Full Value Format\nDESCRIPTION: Example of requesting help for a nested address property while constructing a command with full value shorthand syntax.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/use-azure-cli-successfully-shorthand.md#2025-04-23_snippet_31\n\nLANGUAGE: bash\nCODE:\n```\naz some-command --contact \"{name:Bill,address:??\"\n```\n\n----------------------------------------\n\nTITLE: Windows Command Prompt Output for Variable Quoting Examples\nDESCRIPTION: Shows how Windows Command Prompt returns the outer quotation marks in variable output, unlike Bash and PowerShell.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/use-azure-cli-successfully-quoting.md#2025-04-23_snippet_5\n\nLANGUAGE: output\nCODE:\n```\n\"my value with ' ' single quotes\"\n'my value with \" \" double quotes'\n\n\"my second value with \" \" double quotes\"\n'my second value with ' ' single quotes'\n```\n\n----------------------------------------\n\nTITLE: Running PowerShell Commands in Interactive Mode\nDESCRIPTION: Example showing how to run PowerShell commands without leaving Azure CLI interactive mode using standard PowerShell syntax.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/interactive-azure-cli.md#2025-04-23_snippet_8\n\nLANGUAGE: powershell\nCODE:\n```\naz>> $PSVersionTable\n```\n\n----------------------------------------\n\nTITLE: Installing Specific Azure CLI Version on CBL-Mariner\nDESCRIPTION: This command installs a specific version of Azure CLI on CBL-Mariner. Replace <version> with the desired version number.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/cli-install-linux-tdnf.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo tdnf install azure-cli-<version>-1\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Azure CLI from SUSE systems\nDESCRIPTION: Removes the Azure CLI package from the system. This is the first step in the complete uninstallation process.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/cli-install-linux-zypper.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nsudo zypper remove -y azure-cli\n```\n\n----------------------------------------\n\nTITLE: Azure CLI Login with Username and Password (ROPC flow)\nDESCRIPTION: This example shows the Azure CLI login command using Resource Owner Password Credential (ROPC) flow with a username and password. This method is not supported when MFA is enabled and will fail with authentication errors.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/authenticate-azure-cli-mfa.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\naz login --username $username –password $password\n```\n\n----------------------------------------\n\nTITLE: Checking Azure CLI Version with az command\nDESCRIPTION: Command to check the installed version of Azure CLI using the az version command. This allows users to verify if they need to update their CLI installation.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/current-version.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\naz version\n```\n\n----------------------------------------\n\nTITLE: Using Azure CLI Interactive Mode for Resource Group Creation\nDESCRIPTION: Demonstrates how to get parameter suggestions for the az group create command in interactive mode.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/azure-cli-vm-tutorial-1.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# get options for az group create\naz>> az group create\n```\n\n----------------------------------------\n\nTITLE: Azure CLI Command Reference Links\nDESCRIPTION: Mapping table showing relationships between Azure CLI commands and their documentation. Includes commands for CosmosDB, DevOps, Disk operations, Event Grid, Extensions, and Function Apps.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/samples-reference-group.md#2025-04-23_snippet_29\n\nLANGUAGE: markdown\nCODE:\n```\n| | [az cosmosdb sql database throughput show](/cli/azure/cosmosdb/sql/database/throughput#az-cosmosdb-sql-database-throughput-show) | [Convert every Azure Cosmos DB resource from standard to autoscale throughput](/azure/cosmos-db/scripts/cli/common/convert-to-autoscale) |\n| | [az cosmosdb table create](/cli/azure/cosmosdb/table#az-cosmosdb-table-create) | [Create an Azure Cosmos DB Table API account and table using Azure CLI](/azure/cosmos-db/scripts/cli/table/create) |\n```\n\n----------------------------------------\n\nTITLE: Migrating MongoDB Collection Throughput in Azure Cosmos DB\nDESCRIPTION: This command migrates the throughput of a MongoDB collection between standard and autoscale in Azure Cosmos DB. It is used for optimizing performance and cost.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/samples-reference-group.md#2025-04-23_snippet_11\n\nLANGUAGE: Azure CLI\nCODE:\n```\naz cosmosdb mongodb collection throughput migrate\n```\n\n----------------------------------------\n\nTITLE: Handling Hyphen Characters in Parameter Values with Azure CLI\nDESCRIPTION: Shows how to provide parameter values that begin with a hyphen by using the equals sign to prevent Azure CLI from parsing them as parameter names.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/use-azure-cli-successfully-quoting.md#2025-04-23_snippet_12\n\nLANGUAGE: azurecli\nCODE:\n```\n--password=\"-VerySecret\"\n```\n\n----------------------------------------\n\nTITLE: Disabling Survey Prompts in Azure CLI\nDESCRIPTION: This command disables the survey message in Azure CLI by setting the core.survey_message configuration value to false. This prevents the CLI from prompting users to participate in satisfaction surveys.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/command-line-tools-survey-guidance.md#2025-04-23_snippet_0\n\nLANGUAGE: azurecli\nCODE:\n```\naz config set core.survey_message=false\n```\n\n----------------------------------------\n\nTITLE: Viewing Specific Examples in Interactive Mode\nDESCRIPTION: Example showing how to view a specific numbered example for a command in Azure CLI interactive mode using the ::# syntax.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/interactive-azure-cli.md#2025-04-23_snippet_9\n\nLANGUAGE: azurecli-interactive\nCODE:\n```\naz>> webapp create ::2\n```\n\n----------------------------------------\n\nTITLE: Getting Help for Array Properties\nDESCRIPTION: Example of requesting help for an array property while constructing a command with full value shorthand syntax.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/use-azure-cli-successfully-shorthand.md#2025-04-23_snippet_33\n\nLANGUAGE: bash\nCODE:\n```\naz some-command --contact \"{name:Bill,address:{country:USA},emails:??\"\n```\n\n----------------------------------------\n\nTITLE: Removing Microsoft signing key from SUSE systems\nDESCRIPTION: Identifies and removes the Microsoft signing key from the RPM database. This should be done if you don't use other Microsoft packages after uninstalling Azure CLI.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/cli-install-linux-zypper.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nMSFT_KEY=`rpm -qa gpg-pubkey /* --qf \"%{version}-%{release} %{summary}\\n\" | grep Microsoft | awk '{print $1}'`\nsudo rpm -e --allmatches gpg-pubkey-$MSFT_KEY\n```\n\n----------------------------------------\n\nTITLE: Azure CLI Login with Credentials\nDESCRIPTION: Direct login using username and password. Not recommended for production use and doesn't work with MFA-enabled accounts.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/authenticate-azure-cli-interactively.md#2025-04-23_snippet_1\n\nLANGUAGE: azurecli\nCODE:\n```\naz login --user <username> --password <password>\n```\n\n----------------------------------------\n\nTITLE: Setting HTTP and HTTPS Proxy Environment Variables in Linux Shell\nDESCRIPTION: This snippet demonstrates how to configure proxy settings in a Linux shell environment to allow Azure CLI and other programs to connect through a proxy. It shows both unauthenticated proxy configuration and basic authentication with username/password.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/configure-proxy.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# No auth\nexport HTTP_PROXY=http://[proxy]:[port]\nexport HTTPS_PROXY=https://[proxy]:[port]\n\n# Basic auth\nexport HTTP_PROXY=http://[username]:[password]@[proxy]:[port]\nexport HTTPS_PROXY=https://[username]:[password]@[proxy]:[port]\n```\n\n----------------------------------------\n\nTITLE: Azure CLI Account Cache Clear\nDESCRIPTION: Commands to clear the subscription cache and refresh the login session.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/authenticate-azure-cli-interactively.md#2025-04-23_snippet_5\n\nLANGUAGE: azurecli\nCODE:\n```\naz account clear\n\naz login\n```\n\n----------------------------------------\n\nTITLE: Displaying Sample JSON Array in Azure CLI\nDESCRIPTION: Example of a simple JSON array structure used to illustrate array data types in Azure CLI command results.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/query-azure-cli-concepts.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[ \n  1,\n  2,\n  3\n]\n```\n\n----------------------------------------\n\nTITLE: Listing Keys for Azure Cosmos DB Account\nDESCRIPTION: This command retrieves the keys for an Azure Cosmos DB account. It is essential for obtaining connection information and managing access to the database.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/samples-reference-group.md#2025-04-23_snippet_6\n\nLANGUAGE: Azure CLI\nCODE:\n```\naz cosmosdb keys list\n```\n\n----------------------------------------\n\nTITLE: Disabling Survey Links in CLI Output\nDESCRIPTION: Configures the Azure CLI to not display survey links in command outputs by setting the output.show_survey_link configuration to no.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/azure-cli-configuration.md#2025-04-23_snippet_2\n\nLANGUAGE: azurecli-interactive\nCODE:\n```\naz config set output.show_survey_link=no\n```\n\n----------------------------------------\n\nTITLE: Removing outdated Azure CLI on OpenSUSE 15 VM\nDESCRIPTION: Removes the preinstalled outdated version of Azure CLI (2.0.45) on OpenSUSE 15 VMs, along with its dependencies, to prepare for installing the latest version.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/cli-install-linux-zypper.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nsudo zypper rm -y --clean-deps azure-cli\n```\n\n----------------------------------------\n\nTITLE: Installing Required Packages for Azure CLI on Debian/Ubuntu\nDESCRIPTION: Installs prerequisite packages needed for the Azure CLI installation process, including HTTPS transport capability, certificates, and package utilities.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/cli-install-linux-apt.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get update\nsudo apt-get install apt-transport-https ca-certificates curl gnupg lsb-release\n```\n\n----------------------------------------\n\nTITLE: Running Azure CLI Interactive Without Error Suppression\nDESCRIPTION: Example of running Azure CLI in interactive mode without suppressing warnings, showing the standard output with all warnings and notifications.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/azure-cli-global-parameters.md#2025-04-23_snippet_3\n\nLANGUAGE: azurecli\nCODE:\n```\naz interactive\n```\n\n----------------------------------------\n\nTITLE: Example JSON Output for Azure CLI Access Token Retrieval\nDESCRIPTION: This snippet shows the example JSON output returned by the 'az account get-access-token' command, including the access token, expiration times, subscription, tenant, and token type.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/refresh-token.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"accessToken\": \"...\",\n  \"expiresOn\": \"2023-10-31 21:59:10.000000\",\n  \"expires_on\": 1698760750,\n  \"subscription\": \"...\",\n  \"tenant\": \"...\",\n  \"tokenType\": \"Bearer\"\n}\n```\n\n----------------------------------------\n\nTITLE: Downloading Specific Version of Azure CLI ZIP Package\nDESCRIPTION: URL pattern for downloading a specific version of the Azure CLI ZIP package for Windows. The user needs to replace the version segment in the URL with their desired version number.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/cli-install-windows-zip.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nhttps://azcliprod.blob.core.windows.net/zip/azure-cli-<version>-x64.zip\n```\n\n----------------------------------------\n\nTITLE: JSON Response from Updating an Azure Container Registry\nDESCRIPTION: This JSON response shows the partial output returned after successfully updating an Azure Container Registry using the PATCH method. It highlights the SKU change from Standard to Premium.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/use-azure-cli-rest-command.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"/subscriptions/<subscriptionId>/resourceGroups/<resourceGroup>/providers/Microsoft.ContainerRegistry/registries/<containerRegistryName>\",\n  \"location\": \"westus\",\n  \"name\": \"<containerRegistryName>\",\n  \"properties\": {...},\n  \"sku\": {\n    \"name\": \"Premium\",\n    \"tier\": \"Premium\"\n  },\n  \"systemData\": {...},\n  \"type\": \"Microsoft.ContainerRegistry/registries\"\n}\n\n```\n\n----------------------------------------\n\nTITLE: Including Azure Command-Line Tools Comparison Content\nDESCRIPTION: Markdown include directive that pulls in content comparing Azure CLI and PowerShell tools from a shared documentation file.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/choose-the-right-azure-command-line-tool.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[!INCLUDE[Choose the right Azure command-line tool](~/azure-dev-docs-pr/articles/includes/choose-the-right-azure-command-line-tool.md)]\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Azure CLI Package on Debian/Ubuntu\nDESCRIPTION: Removes the Azure CLI package from the system using apt-get remove. This is the first step in completely uninstalling Azure CLI.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/cli-install-linux-apt.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get remove -y azure-cli\n```\n\n----------------------------------------\n\nTITLE: Alternative Azure CLI installation using direct URL\nDESCRIPTION: Alternative installation command that uses the direct Azure blob storage URL instead of the aka.ms shortlink. Useful when facing redirect issues with curl.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/cli-install-linux-script.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl https://azurecliprod.blob.core.windows.net/install | bash\n```\n\n----------------------------------------\n\nTITLE: Disabling Extension Updates During Azure CLI Upgrades\nDESCRIPTION: Configures the Azure CLI to skip updating extensions during automatic upgrades by setting auto-upgrade.all to no. This allows core CLI updates while maintaining current extension versions.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/update-azure-cli.md#2025-04-23_snippet_2\n\nLANGUAGE: azurecli\nCODE:\n```\naz config set auto-upgrade.all=no\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Azure Service Principal with Azure CLI\nDESCRIPTION: This command creates a service principal without specifying a name, role, or scope. The name is automatically generated with a timestamp.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/azure-cli-sp-tutorial-1.md#2025-04-23_snippet_0\n\nLANGUAGE: azurecli\nCODE:\n```\naz ad sp create-for-rbac\n```\n\n----------------------------------------\n\nTITLE: Installing Azure CLI Package on Debian/Ubuntu\nDESCRIPTION: Updates repository information and installs the azure-cli package using apt-get. This is the final step in the manual installation process.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/cli-install-linux-apt.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get update\nsudo apt-get install azure-cli\n```\n\n----------------------------------------\n\nTITLE: Setting Error Handling Option in Azure CLI Interactive Mode\nDESCRIPTION: This snippet shows how to set the error handling option to exit immediately if a command returns a non-zero status in Azure CLI interactive mode.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/use-azure-cli-successfully-bash.md#2025-04-23_snippet_27\n\nLANGUAGE: azurecli-interactive\nCODE:\n```\nset -e\n```\n\n----------------------------------------\n\nTITLE: Disabling Secrets Warning in Azure CLI\nDESCRIPTION: This command disables the sensitive information warning that appears when Azure CLI commands output secrets. The configuration setting clients.show_secrets_warning is set to 'no' to turn off these warnings.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/azure-cli-manage-secrets.md#2025-04-23_snippet_0\n\nLANGUAGE: azurecli\nCODE:\n```\naz config set clients.show_secrets_warning=no\n```\n\n----------------------------------------\n\nTITLE: URL Example for Downloading Azure CLI Version 2.57.0\nDESCRIPTION: Complete URL example for downloading Azure CLI version 2.57.0 ZIP package for Windows 64-bit systems.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/cli-install-windows-zip.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nhttps://azcliprod.blob.core.windows.net/zip/azure-cli-2.57.0-x64.zip\n```\n\n----------------------------------------\n\nTITLE: JSON Response from Creating an Azure Container Registry\nDESCRIPTION: This JSON response shows the output returned after successfully creating an Azure Container Registry using the PUT method. It includes the resource ID, location, properties, SKU, and system data.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/use-azure-cli-rest-command.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"/subscriptions/<subscriptionId>/resourceGroups/<resourceGroup>/providers/Microsoft.ContainerRegistry/registries/<containerRegistryName>\",\n  \"location\": \"<location>\",\n  \"name\": \"<containerRegistryName>\",\n  \"properties\": {\n    \"adminUserEnabled\": true,\n    \"anonymousPullEnabled\": false,\n    \"creationDate\": \"2024-01-03T18:38:36.7089583Z\",\n    \"dataEndpointEnabled\": false,\n    \"dataEndpointHostNames\": [],\n    \"encryption\": {\n      \"status\": \"disabled\"\n    },\n    \"loginServer\": \"<containerRegistryName>.azurecr.io\",\n    \"networkRuleBypassOptions\": \"AzureServices\",\n    \"policies\": {\n      \"azureADAuthenticationAsArmPolicy\": {\n        \"status\": \"enabled\"\n      },\n      \"exportPolicy\": {\n        \"status\": \"enabled\"\n      },\n      \"quarantinePolicy\": {\n        \"status\": \"disabled\"\n      },\n      \"retentionPolicy\": {\n        \"days\": 7,\n        \"lastUpdatedTime\": \"2024-01-03T19:44:53.9770581+00:00\",\n        \"status\": \"disabled\"\n      },\n      \"softDeletePolicy\": {\n        \"lastUpdatedTime\": \"2024-01-03T19:44:53.9771117+00:00\",\n        \"retentionDays\": 7,\n        \"status\": \"disabled\"\n      },\n      \"trustPolicy\": {\n        \"status\": \"disabled\",\n        \"type\": \"Notary\"\n      }\n    },\n    \"privateEndpointConnections\": [],\n    \"provisioningState\": \"Succeeded\",\n    \"publicNetworkAccess\": \"Enabled\",\n    \"zoneRedundancy\": \"Disabled\"\n  },\n  \"sku\": {\n    \"name\": \"Standard\",\n    \"tier\": \"Standard\"\n  },\n  \"systemData\": {\n    \"createdAt\": \"2024-01-03T18:38:36.7089583+00:00\",\n    \"createdBy\": \"<username>@microsoft.com\",\n    \"createdByType\": \"User\",\n    \"lastModifiedAt\": \"2024-01-03T19:44:53.684342+00:00\",\n    \"lastModifiedBy\": \"<username>@microsoft.com\",\n    \"lastModifiedByType\": \"User\"\n  },\n  \"tags\":{},\n  \"type\": \"Microsoft.ContainerRegistry/registries\"\n}\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Azure CLI from CBL-Mariner\nDESCRIPTION: This command removes the Azure CLI package from the CBL-Mariner system using the tdnf package manager.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/cli-install-linux-tdnf.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsudo tdnf remove azure-cli\n```\n\n----------------------------------------\n\nTITLE: Creating Storage Account with Default Resource Group\nDESCRIPTION: This command creates a storage account without specifying a resource group, utilizing the previously set default resource group. It demonstrates how default values can simplify command execution.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/azure-cli-variables.md#2025-04-23_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\naz storage account create --name storage135 --location eastus --sku Standard_LRS\n```\n\n----------------------------------------\n\nTITLE: Example of Azure CLI Cross-Tenant Authentication Failure Message\nDESCRIPTION: A sample error message shown when authentication fails against a tenant due to MFA requirements. The message includes tenant ID, error code, and timestamp details.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/authenticate-azure-cli-mfa.md#2025-04-23_snippet_2\n\nLANGUAGE: azurecli\nCODE:\n```\nAuthentication failed against tenant 00000000-0000-0000-0000-000000000000 'Tenant Name': AADSTSXXXXX: Due to a configuration change made by your administrator, or because you moved to a new location, you must use multi-factor authentication to access '00000000-0000-0000-0000-000000000000'. Trace ID: 00000000-0000-0000-0000-000000000000 Correlation ID: 00000000-0000-0000-0000-000000000000 Timestamp: yyyy-mm-dd hh:mm:ss.\n```\n\n----------------------------------------\n\nTITLE: Installing Specific Azure CLI Version with Variables on Debian/Ubuntu\nDESCRIPTION: Installs a specific version of Azure CLI by using variables to store the distribution name and desired version. This approach is more flexible across different environments.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/cli-install-linux-apt.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n# Obtain the currently installed distribution\nAZ_DIST=$(lsb_release -cs)\n\n# Store an Azure CLI version of choice\nAZ_VER=2.51.0\n\n# Install a specific version\nsudo apt-get install azure-cli=${AZ_VER}-1~${AZ_DIST}\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Output for Regenerated Azure Container Registry Credentials\nDESCRIPTION: This JSON snippet shows the structure of the output returned after regenerating Azure Container Registry credentials. It includes password and username information.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/use-azure-cli-rest-command.md#2025-04-23_snippet_11\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"passwords\": [\n    {\n      \"name\": \"password\",\n      \"value\": \"<passwordValue>\"\n    },\n    {\n      \"name\": \"password2\",\n      \"value\": \"<passwordValue2>\"\n    }\n  ],\n  \"username\": \"<containerRegistryName>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Azure DevOps Pipelines Management Commands\nDESCRIPTION: Commands for managing Azure DevOps pipelines including creation, deletion, and execution of pipelines.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/samples-reference-group.md#2025-04-23_snippet_34\n\nLANGUAGE: azure-cli\nCODE:\n```\naz pipelines create\naz pipelines delete\naz pipelines run\n```\n\n----------------------------------------\n\nTITLE: Removing the Azure CLI Docker Image\nDESCRIPTION: This command removes the Azure CLI Docker image from your local system after ensuring any containers using it have been stopped.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/run-azure-cli-docker.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker rmi mcr.microsoft.com/azure-cli\n```\n\n----------------------------------------\n\nTITLE: Sample Output from Azure Subscription Query\nDESCRIPTION: Example output from querying Azure subscriptions, formatted as a table showing subscription IDs, names, and default status with redacted information.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/use-azure-cli-successfully-bash.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\nSubscription_id                       Name                                               IsDefault\n------------------------------------  -------------------------------------------------  -----------\n11111111-3ddc-45ce-8334-c7b28a9e1c3a  C & L Azure developer experience content projects  False\n22222222-8f1c-409b-af1e-8e2e65d9b90a  DevCenter - Infrastructure - Dogfood               False\n33333333-c080-42a7-8973-1aa853ab4df3  Babel                                              False\n```\n\n----------------------------------------\n\nTITLE: Providing Feedback in Azure CLI\nDESCRIPTION: Shows how to use the built-in 'az feedback' command in Azure CLI to provide free-form feedback to the Azure team. This is a direct way for users to communicate with Azure CLI developers.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/azure-cli-vm-tutorial-7.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n`az feedback` is a built-in command for the CLI that allows providing free-form feedback to the team.\n```\n\n----------------------------------------\n\nTITLE: Displaying Help for Shell Options and Commands in Azure CLI Interactive Mode\nDESCRIPTION: This snippet demonstrates how to display help information for shell options and commands in Azure CLI interactive mode using the help command.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/use-azure-cli-successfully-bash.md#2025-04-23_snippet_28\n\nLANGUAGE: azurecli-interactive\nCODE:\n```\nhelp set\nhelp help\n```\n\n----------------------------------------\n\nTITLE: Removing Microsoft Signing Key from Debian/Ubuntu\nDESCRIPTION: Removes the Microsoft signing key used for package verification if no other Microsoft packages are needed on the system.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/cli-install-linux-apt.md#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nsudo rm /etc/apt/keyrings/microsoft.gpg\n```\n\n----------------------------------------\n\nTITLE: Displaying Sample JSON Dictionary in Azure CLI\nDESCRIPTION: Example of a simple JSON dictionary (object) structure used to illustrate dictionary data types in Azure CLI command results.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/query-azure-cli-concepts.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"isRunning\": false,\n  \"time\": \"12:00\",\n  \"number\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: Error Example: InvalidTemplateDeployment in Azure CLI\nDESCRIPTION: This snippet demonstrates an error message received when attempting to create an Azure resource in a location where it's not available. The error indicates that the requested VM size is not available in the specified location.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/use-azure-cli-successfully-troubleshooting.md#2025-04-23_snippet_2\n\nLANGUAGE: azurecli\nCODE:\n```\n{\"error\":{\"code\":\"InvalidTemplateDeployment\",\"message\":\"The template deployment 'vm_deploy_<32 character ID>'\nis not valid according to the validation procedure. The tracking id is '<36 character ID>'.\nSee inner errors for details.\",\"details\":[{\"code\":\"SkuNotAvailable\",\"message\":\"The requested VM size for resource\n'Following SKUs have failed for Capacity Restrictions: Standard_DS1_v2' is currently not available\nin location 'westus'. Please try another size or deploy to a different location\nor different zone. See https://aka.ms/azureskunotavailable for details.\"}]}}\n```\n\n----------------------------------------\n\nTITLE: Using the feedback command in Azure CLI\nDESCRIPTION: The az feedback command allows users to provide feedback about the Azure CLI before uninstalling it. This helps Microsoft improve the CLI experience.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/uninstall-boilerplate.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\naz feedback\n```\n\n----------------------------------------\n\nTITLE: Azure CLI Command Reference Table\nDESCRIPTION: A markdown table mapping Azure CLI commands to their sample implementations, organized by service groups like acr, afd, appconfig, appservice, and batch.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/samples-reference-group.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Reference group | Reference name | Sample name |\n|---|---|---|\n| **az acr**| [az acr create](/cli/azure/acr#az-acr-create) | [Create an ASP.NET Core app in a Docker container in App Service from Azure Container Registry](/azure/app-service/scripts/cli-linux-acr-aspnetcore) |\n| | [az acr credential show](/cli/azure/acr/credential#az-acr-credential-show) | [Create an ASP.NET Core app in a Docker container in App Service from Azure Container Registry](/azure/app-service/scripts/cli-linux-acr-aspnetcore) |\n```\n\n----------------------------------------\n\nTITLE: Configuring Proxy Certificate in Azure CLI\nDESCRIPTION: This code snippet shows how to append a proxy server's certificate to the CA bundle certificate file for use with Azure CLI. It demonstrates the format for including the proxy's certificate in the cacert.pem file.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/use-azure-cli-successfully-troubleshooting.md#2025-04-23_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n<Original cacert.pem>\n\n-----BEGIN CERTIFICATE-----\n<Your proxy's certificate here>\n-----END CERTIFICATE-----\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Unneeded Packages After Azure CLI Removal on Debian/Ubuntu\nDESCRIPTION: Removes any packages that were automatically installed as dependencies for Azure CLI but are no longer needed by any other software on the system.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/cli-install-linux-apt.md#2025-04-23_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt autoremove\n```\n\n----------------------------------------\n\nTITLE: Sample Azure Template Deployment Error\nDESCRIPTION: Example of an InvalidTemplateDeployment error message when attempting to create Azure resources in an unsupported location or with unavailable SKUs.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/create-azure-resources-at-scale.md#2025-04-23_snippet_9\n\nLANGUAGE: text\nCODE:\n```\n{\"error\":{\"code\":\"InvalidTemplateDeployment\",\"message\":\"The template deployment 'vm_deploy_<32 character ID>' is not valid according to the validation procedure. The tracking id is '<36 character ID>'. See inner errors for details.\",\"details\":[{\"code\":\"SkuNotAvailable\",\"message\":\"The requested VM size for resource 'Following SKUs have failed for Capacity Restrictions: Standard_DS1_v2' is currently not available in location '<your specified location>'. Please try another size or deploy to a different location or different zone. See https://aka.ms/azureskunotavailable for details.\"}]}}\n```\n\n----------------------------------------\n\nTITLE: Installing Azure CLI from SUSE repositories using zypper\nDESCRIPTION: Installs the Azure CLI package from official SUSE or OpenSUSE repositories. This method leverages the package that SUSE maintains and depends on the python3 package.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/cli-install-linux-zypper.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo zypper install -y azure-cli\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Azure CLI using Homebrew\nDESCRIPTION: This command uses Homebrew to uninstall the Azure CLI package from the macOS system.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/install-azure-cli-macos.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nbrew uninstall azure-cli\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Azure CLI by removing installation files\nDESCRIPTION: Removes the Azure CLI by deleting the installed files from the chosen installation location. This script removes both the library files and the executable.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/cli-install-linux-script.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nrm -r <install location>/lib/azure-cli\nrm <install location>/bin/az\n```\n\n----------------------------------------\n\nTITLE: Disabling Region Recommendation Messages in Azure CLI\nDESCRIPTION: Sets a configuration option to disable Azure region recommendation messages. This command turns off suggestions for nearby regions that may offer the same services at potentially lower costs.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/manage-azure-groups-azure-cli.md#2025-04-23_snippet_0\n\nLANGUAGE: azurecli\nCODE:\n```\naz config set core.display_region_identified=no\n```\n\n----------------------------------------\n\nTITLE: Importing Microsoft Repository Key for Azure CLI Installation on RHEL/CentOS\nDESCRIPTION: Command to import the Microsoft repository key, which is a prerequisite for installing Azure CLI on RHEL or CentOS systems using RPM package management.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/cli-install-linux-dnf.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo rpm --import https://packages.microsoft.com/keys/microsoft.asc\n```\n\n----------------------------------------\n\nTITLE: Adding Azure CLI Repository for RHEL 7\nDESCRIPTION: Commands to create a repository configuration file for Azure CLI on RHEL 7, which defines the repository source, enables GPG signature checking, and specifies the signing key location.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/cli-install-linux-dnf.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\necho -e \"[azure-cli]\nname=Azure CLI\nbaseurl=https://packages.microsoft.com/yumrepos/azure-cli\nenabled=1\ngpgcheck=1\ngpgkey=https://packages.microsoft.com/keys/microsoft.asc\" | sudo tee /etc/yum.repos.d/azure-cli.repo\n```\n\n----------------------------------------\n\nTITLE: Listing Available Azure CLI Versions\nDESCRIPTION: Command to display all available versions of Azure CLI packages in the configured repositories, including duplicates, which is useful for specific version installation.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/cli-install-linux-dnf.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndnf list --showduplicates azure-cli\n```\n\n----------------------------------------\n\nTITLE: Removing Azure CLI Package\nDESCRIPTION: Command to remove the Azure CLI package from the system using the DNF package manager, which is the first step in uninstalling Azure CLI.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/cli-install-linux-dnf.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nsudo dnf remove azure-cli\n```\n\n----------------------------------------\n\nTITLE: Building OpenSSL 1.1 from Source for Azure CLI Prerequisites\nDESCRIPTION: Commands to install dependencies, download, build, and configure OpenSSL 1.1 from source, which is required for Python 3 and Azure CLI on older RHEL systems.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/cli-install-linux-dnf.md#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nsudo dnf install gcc gcc-c++ make ncurses patch wget tar zlib zlib-devel -y\n# build openssl from source\ncd ~\nwget https://www.openssl.org/source/openssl-1.1.1d.tar.gz\ntar -xzf openssl-1.1.1d.tar.gz\ncd openssl-1.1.1d\n./config --prefix=/usr/local/ssl --openssldir=/usr/local/ssl\nmake\nsudo make install\n# configure shared object lookup directory so that libssl.so.1.1 can be found\necho \"/usr/local/ssl/lib\" | sudo tee /etc/ld.so.conf.d/openssl-1.1.1d.conf\n# reload config\nsudo ldconfig -v\n```\n\n----------------------------------------\n\nTITLE: Enabling Python 3 from Software Collections Library\nDESCRIPTION: Command to enable Python 3 from the Red Hat Software Collections Library, which provides an alternative way to use Python 3 on older RHEL systems.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/cli-install-linux-dnf.md#2025-04-23_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nscl enable rh-python36 bash\n```\n\n----------------------------------------\n\nTITLE: Installing Azure CLI on CBL-Mariner\nDESCRIPTION: This command installs the Azure CLI package on CBL-Mariner using the tdnf package manager.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/cli-install-linux-tdnf.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo tdnf install azure-cli\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Storage Account in Cmd\nDESCRIPTION: This Cmd script creates an Azure storage account using variables, random identifiers, and demonstrates Cmd-specific syntax for line continuation and variable usage.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/get-started-tutorial-2-environment-syntax.md#2025-04-23_snippet_2\n\nLANGUAGE: Cmd\nCODE:\n```\n:: Variable block\nset randomIdentifier=%RANDOM%\nset location=\"eastus\"\nset resourceGroup=\"<msdocs-tutorial-rg-00000000>\"\nset storageAccount=\"msdocssa%randomIdentifier%\"\n\n:: Create a storage account.\necho \"Creating storage account %storageAccount% in resource group %resourceGroup%\"\naz storage account create --name %storageAccount% ^\n                          --resource-group %resourceGroup% ^\n                          --location %location% ^\n                          --sku Standard_RAGRS ^\n                          --kind StorageV2 ^\n                          --output json\n```\n\n----------------------------------------\n\nTITLE: Logging into Azure using Azure CLI\nDESCRIPTION: This command initiates the login process for Azure CLI. If a browser is available, it will use authorization code flow; otherwise, it will use device code flow requiring manual code entry at https://aka.ms/devicelogin. You can force device code flow with the --use-device-code flag.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/interactive-login.md#2025-04-23_snippet_0\n\nLANGUAGE: azurecli\nCODE:\n```\naz login\n```\n\n----------------------------------------\n\nTITLE: Azure CLI Storage Account Local User Create Command Example\nDESCRIPTION: Demonstrates the syntax components of an Azure CLI command by breaking down the 'az storage account local-user create' command into its reference group, subgroups, command, and parameters.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/get-started-tutorial-0-before-you-begin.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\naz storage account local-user create --name --account-name --resource-group\n```\n\n----------------------------------------\n\nTITLE: Listing Azure CLI Command Groups and Extensions\nDESCRIPTION: Commands to display all available Azure CLI command groups and list available extensions in a tabular format. These commands help users explore the CLI's functionality and discover installable extensions.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/reference-types-and-status.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Get list of all command groups\naz\n\n# Get list of extensions\naz extension list-available --output table\n```\n\n----------------------------------------\n\nTITLE: Using Echo in Bash to Verify Expression Values\nDESCRIPTION: Demonstrates how to use the echo command in Bash to verify the value of a string expression. This is useful for troubleshooting variable content or query results.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/get-started-tutorial-2-environment-syntax.md#2025-04-23_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nstrExpression='{\"key\":\"value\"}'\necho $strExpression\n```\n\n----------------------------------------\n\nTITLE: Retrieving Multiple VM Properties using Dictionary Query\nDESCRIPTION: Command that extracts and renames multiple properties from a VM using a JMESPath query with a multiselect hash, returning results as a dictionary with custom property names.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/query-azure-cli-concepts.md#2025-04-23_snippet_5\n\nLANGUAGE: azurecli-interactive\nCODE:\n```\naz vm show --resource-group QueryDemo --name TestVM --query \"{VMName:name, admin:osProfile.adminUsername, sshKey:osProfile.linuxConfiguration.ssh.publicKeys[0].keyData}\"\n```\n\n----------------------------------------\n\nTITLE: Managing Azure Locks with Azure CLI\nDESCRIPTION: This snippet shows Azure CLI commands for creating, deleting, listing, and showing Azure locks, which are used to prevent accidental modification or deletion of resources.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/samples-azure-cli-samples-repo.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\naz lock create\naz lock delete\naz lock list\naz lock show\n```\n\n----------------------------------------\n\nTITLE: Storing Multiple Azure CLI Output Values in Bash Variables\nDESCRIPTION: Uses the Bash 'read' command to capture multiple values from Azure CLI output into separate variables by setting the output format to TSV.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/azure-cli-vm-tutorial-5.md#2025-04-23_snippet_3\n\nLANGUAGE: azurecli\nCODE:\n```\nread -d '' ipId subnetId <<< $(az network nic show \\\n  --ids $nicId \\\n  --query '[ipConfigurations[].publicIPAddress.id, ipConfigurations[].subnet.id]' \\\n  -o tsv)\n```\n\n----------------------------------------\n\nTITLE: Creating Azure CLI Alias with Environment Variables\nDESCRIPTION: Shows how to create an alias that uses environment variables, creating a resource group with an owner tag set to the current user.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/azure-cli-extension-alias.md#2025-04-23_snippet_6\n\nLANGUAGE: azurecli\nCODE:\n```\naz alias create \\\n    --name \"create-rg {{ groupName }}\" \\\n    --command \"group create --name {{ groupName }} --location eastus --tags owner=\\$USER\"\n```\n\n----------------------------------------\n\nTITLE: Using Built-in Parallel Processing with --ids in Azure CLI\nDESCRIPTION: This command demonstrates Azure CLI's built-in support for processing multiple --ids in parallel, using @- to get values from the pipe.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/use-azure-cli-successfully-tips.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\naz vm list --resource-group MyResourceGroup --show-details \\\n    --query \"[?powerState=='VM stopped'].id\" \\\n    --output tsv | az vm start --ids @-\n```\n\n----------------------------------------\n\nTITLE: Getting Help for Azure CLI Commands\nDESCRIPTION: Examples of using the --help parameter to get information about command groups and specific commands in the Azure CLI.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/cheat-sheet-onboarding.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\naz account --help\naz account subscription --help\naz vm create --help\n```\n\n----------------------------------------\n\nTITLE: Getting Help for Array Elements\nDESCRIPTION: Example of requesting help for elements within an array property while constructing a command with full value shorthand syntax.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/use-azure-cli-successfully-shorthand.md#2025-04-23_snippet_34\n\nLANGUAGE: bash\nCODE:\n```\naz some-command --contact \"{name:Bill,address:{country:USA},emails:[??\"\n```\n\n----------------------------------------\n\nTITLE: Creating and Restoring MySQL Server\nDESCRIPTION: This script demonstrates how to create a MySQL server and perform a restore operation using the Azure CLI.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/includes/samples-azure-cli-samples-repo.md#2025-04-23_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\naz mysql server create\naz mysql server restore\n```\n\n----------------------------------------\n\nTITLE: Changing Active Subscription\nDESCRIPTION: Command to switch between different Azure subscriptions when working with multiple accounts.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/cheat-sheet-onboarding.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\naz account set --subscription \"mySubscriptionName\"\n```\n\n----------------------------------------\n\nTITLE: Searching for Command Examples\nDESCRIPTION: Command to search for Azure CLI examples using keywords. This uses AI to find relevant command references.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/cheat-sheet-onboarding.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\naz find \"active subscription\"\n```\n\n----------------------------------------\n\nTITLE: Azure CLI Scoped Login\nDESCRIPTION: Login with a specific scope for Azure resource management.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/authenticate-azure-cli-interactively.md#2025-04-23_snippet_3\n\nLANGUAGE: azurecli\nCODE:\n```\naz login --scope https://management.core.windows.net//.default\n```\n\n----------------------------------------\n\nTITLE: Uninstalling the Azure CLI Alias Extension\nDESCRIPTION: Removes the alias extension using the az extension remove command.\nSOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/azure-cli-extension-alias.md#2025-04-23_snippet_8\n\nLANGUAGE: azurecli\nCODE:\n```\naz extension remove --name alias\n```"
  }
]