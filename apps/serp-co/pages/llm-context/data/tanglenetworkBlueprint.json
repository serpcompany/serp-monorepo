[
  {
    "owner": "tangle-network",
    "repo": "blueprint",
    "content": "TITLE: Executing Tangle Blueprint Test in Rust\nDESCRIPTION: This code snippet demonstrates how to use the Tangle Testing Framework to set up a test environment, initialize a blueprint context and event handler, setup a service, and execute a job with verification. It showcases the main steps in writing a test for a Tangle blueprint.\nSOURCE: https://github.com/tangle-network/blueprint/blob/main/crates/testing-utils/tangle/README.md#2025-04-23_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n#[tokio::test]\nasync fn test_my_blueprint() -> Result<()> {\n    // Initialize test harness (node, keys, deployment)\n    let harness = TangleTestHarness::setup().await?;\n\n    // Create your blueprint context\n    let blueprint_ctx = MyContext {\n        env: harness.env.clone(),\n        call_id: None,\n    };\n\n    // Initialize your event handler\n    let handler = MyEventHandler::new(&harness.env, blueprint_ctx).await?;\n\n    // Setup service and run test\n    let (_blueprint_id, service_id) = harness.setup_service(vec![handler]).await?;\n\n    // Execute jobs and verify results\n    let results = harness\n        .execute_job(\n            service_id,\n            JOB_ID,\n            inputs,\n            expected_outputs,\n        )\n        .await?;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Deploying Tangle Blueprint using Cargo\nDESCRIPTION: A series of commands to create a new blueprint project, build it, and deploy to the Tangle Network. Uses cargo tangle CLI tool to manage the blueprint lifecycle.\nSOURCE: https://github.com/tangle-network/blueprint/blob/main/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# Create a new blueprint named \"my_blueprint\"\ncargo tangle blueprint create --name my_blueprint\n\n# Navigate into the blueprint directory and build\ncd my_blueprint\ncargo build\n\n# Deploy your blueprint to the Tangle Network\ncargo tangle blueprint deploy --rpc-url wss://rpc.tangle.tools --package my_blueprint\n```\n\n----------------------------------------\n\nTITLE: Example of Deploying a Blueprint with Custom Parameters\nDESCRIPTION: Example command showing how to deploy a blueprint to a specific WebSocket URL with a custom keystore path and package name.\nSOURCE: https://github.com/tangle-network/blueprint/blob/main/cli/README.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncargo tangle blueprint deploy tangle --ws-rpc-url ws://localhost:9944 --keystore-path ./my-keystore --package my_blueprint\n```\n\n----------------------------------------\n\nTITLE: Deploying a Blueprint to a Local Tangle Node\nDESCRIPTION: Command to deploy a blueprint to a local Tangle node with the devnet flag, which automatically starts a local testnet and creates keystores.\nSOURCE: https://github.com/tangle-network/blueprint/blob/main/cli/README.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncargo tangle blueprint deploy tangle --devnet --package <package_name>\n```\n\n----------------------------------------\n\nTITLE: Deploying Blueprint to Tangle Network\nDESCRIPTION: Command to deploy the Incredible Squaring Blueprint to the Tangle Network using a TypeScript deployment script.\nSOURCE: https://github.com/tangle-network/blueprint/blob/main/examples/incredible-squaring/README.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nyarn tsx deploy.ts\n```\n\n----------------------------------------\n\nTITLE: Example of Creating a Blueprint\nDESCRIPTION: Example command showing how to create a new blueprint named 'my_blueprint' using the Tangle CLI.\nSOURCE: https://github.com/tangle-network/blueprint/blob/main/cli/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncargo tangle blueprint create --name my_blueprint\n```\n\n----------------------------------------\n\nTITLE: Running Incredible Squaring Gadget\nDESCRIPTION: Command to run the Incredible Squaring Gadget, connecting it to the local Tangle Network and setting up logging and network parameters.\nSOURCE: https://github.com/tangle-network/blueprint/blob/main/examples/incredible-squaring/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nRUST_LOG=incredible_squaring_gadget,gadget_sdk=trace,error cargo run -p incredible-squaring-blueprint -- run --url=ws://localhost:9944 --base-path=./target/keystore --blueprint-id=0 --service-id=0 --target-addr=0.0.0.0 --target-port=<bind-port>\n```\n\n----------------------------------------\n\nTITLE: Running AVS Test on Local Anvil Testnet\nDESCRIPTION: Command to run a test for the Incredible Squaring AVS Blueprint on a local Anvil testnet, with detailed logging enabled.\nSOURCE: https://github.com/tangle-network/blueprint/blob/main/examples/incredible-squaring-eigenlayer/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nRUST_LOG=gadget=trace cargo test --package incredible-squaring-blueprint-eigenlayer test_eigenlayer_incredible_squaring_blueprint -- --nocapture\n```\n\n----------------------------------------\n\nTITLE: Writing Rust Function Documentation with Examples\nDESCRIPTION: Example of properly documented Rust function with description, argument details, return value information, and usage examples.\nSOURCE: https://github.com/tangle-network/blueprint/blob/main/CONTRIBUTING.md#2025-04-23_snippet_8\n\nLANGUAGE: rust\nCODE:\n```\n/// Deploys a blueprint to the network\n///\n/// # Arguments\n///\n/// * `name` - Name of the blueprint\n/// * `config` - Blueprint configuration\n///\n/// # Returns\n///\n/// * `Result<DeploymentId>` - Deployment identifier on success\n///\n/// # Examples\n///\n/// ```\n/// let result = deploy_blueprint(\"my_blueprint\", config)?;\n/// ```\npub fn deploy_blueprint(name: &str, config: Config) -> Result<DeploymentId> {\n    // Implementation\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Tangle CLI with Cargo\nDESCRIPTION: Command to install the Tangle CLI tool from the GitHub repository using Cargo. The --force flag ensures the latest version is installed.\nSOURCE: https://github.com/tangle-network/blueprint/blob/main/cli/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo install cargo-tangle --git https://github.com/tangle-network/blueprint --force\n```\n\n----------------------------------------\n\nTITLE: Setting Up Rust Development Environment\nDESCRIPTION: Commands to install Rust, configure a specific nightly toolchain, and add required components for development.\nSOURCE: https://github.com/tangle-network/blueprint/blob/main/CONTRIBUTING.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Install Rust\ncurl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh\n\n# Install specific toolchain\nrustup install nightly-2024-10-13\nrustup default nightly-2024-10-13\n\n# Install required components\nrustup component add rustfmt clippy rust-src\n```\n\n----------------------------------------\n\nTITLE: Quote Signature Generation in Rust\nDESCRIPTION: Code snippet showing how to generate a signature for a quote using SHA256 hashing and ed25519 signing.\nSOURCE: https://github.com/tangle-network/blueprint/blob/main/crates/pricing-engine/README.md#2025-04-23_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nlet msg = sha256(encode(&QuotePayload));\nlet sig = keypair.sign(&msg);\n```\n\n----------------------------------------\n\nTITLE: Writing Rust Unit Tests with Tokio\nDESCRIPTION: Example structure for writing asynchronous tests using Tokio, including basic tests, error handling tests, and concurrent operation tests.\nSOURCE: https://github.com/tangle-network/blueprint/blob/main/CONTRIBUTING.md#2025-04-23_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[tokio::test]\n    async fn test_async_feature() {\n        // Async test implementation\n        let result = some_async_function().await;\n        assert!(result.is_ok());\n    }\n\n    #[tokio::test]\n    async fn test_error_handling() {\n        // Async error handling test\n        match failing_async_function().await {\n            Err(e) => assert_matches!(e, Error::Expected),\n            _ => panic!(\"Expected error\"),\n        }\n    }\n\n    #[tokio::test(flavor = \"multi_thread\", worker_threads = 2)]\n    async fn test_concurrent_operations() {\n        // Test concurrent operations\n        let (result1, result2) = tokio::join!(\n            async_operation1(),\n            async_operation2()\n        );\n        assert!(result1.is_ok() && result2.is_ok());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Building a Blueprint Project\nDESCRIPTION: Command to build the Tangle Blueprint project using Cargo, which compiles the Rust code into a deployable binary.\nSOURCE: https://github.com/tangle-network/blueprint/blob/main/cli/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncargo build\n```\n\n----------------------------------------\n\nTITLE: Installing Tangle CLI from Source\nDESCRIPTION: Command to install the latest git version of cargo-tangle directly from the source repository.\nSOURCE: https://github.com/tangle-network/blueprint/blob/main/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncargo install cargo-tangle --git https://github.com/tangle-network/gadget --force\n```\n\n----------------------------------------\n\nTITLE: Installing Tangle CLI using Installation Script\nDESCRIPTION: Command to install the latest stable version of cargo-tangle using the provided installation script.\nSOURCE: https://github.com/tangle-network/blueprint/blob/main/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl --proto '=https' --tlsv1.2 -LsSf https://github.com/tangle-network/gadget/releases/download/cargo-tangle/v0.1.1-beta.7/cargo-tangle-installer.sh | sh\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Deployment\nDESCRIPTION: Example of setting environment variables for the deployment process, including the Substrate and EVM signer accounts. These can be used as alternatives to supplying a keystore.\nSOURCE: https://github.com/tangle-network/blueprint/blob/main/cli/README.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nexport SIGNER=\"//Alice\" # Substrate Signer account\nexport EVM_SIGNER=\"0xcb6df9de1efca7a3998a8ead4e02159d5fa99c3e0d4fd6432667390bb4726854\" # EVM signer account\n```\n\n----------------------------------------\n\nTITLE: Installing Required Dependencies for Development Environment\nDESCRIPTION: Commands to install the necessary system dependencies for developing with the Tangle Network Gadget project on Ubuntu/Debian and macOS systems.\nSOURCE: https://github.com/tangle-network/blueprint/blob/main/CONTRIBUTING.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Ubuntu/Debian\napt install build-essential cmake libssl-dev pkg-config\n\n# macOS\nbrew install openssl cmake\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests for a Blueprint\nDESCRIPTION: Command to execute unit tests for the Tangle Blueprint project using Cargo's test functionality.\nSOURCE: https://github.com/tangle-network/blueprint/blob/main/cli/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncargo test\n```\n\n----------------------------------------\n\nTITLE: Generating Keys from the Command Line\nDESCRIPTION: Command to generate a keypair for a specified key type, with options for specifying path, seed, and whether to show the private key.\nSOURCE: https://github.com/tangle-network/blueprint/blob/main/cli/README.md#2025-04-23_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ncargo tangle blueprint generate-keys -k <KEY_TYPE> -p <PATH> -s <SURI/SEED> --show-secret\n```\n\n----------------------------------------\n\nTITLE: Compiling Contracts with Forge\nDESCRIPTION: Command to compile the contracts associated with the Incredible Squaring Blueprint using the Forge tool.\nSOURCE: https://github.com/tangle-network/blueprint/blob/main/examples/incredible-squaring/README.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nforge build --root ./contracts\n```\n\n----------------------------------------\n\nTITLE: Visualizing the Handshake Protocol Flow in Mermaid\nDESCRIPTION: A sequence diagram showing the four-step handshake process between two nodes. It illustrates how nodes exchange IDs and signatures to verify each other's identity before establishing a trusted connection.\nSOURCE: https://github.com/tangle-network/blueprint/blob/main/crates/networking/README.md#2025-04-23_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant A as Node A\n    participant B as Node B\n\n    Note over A,B: Step 1: Initial Connection\n\n    A->>B: Hi! Here's my ID and signature\n    Note right of B: Step 2: B checks A's identity\n    B->>A: Hi back! Here's my ID and signature\n    Note left of A: Step 3: A checks B's identity\n\n    Note over A,B: Step 4: Both nodes are now friends!\n```\n\n----------------------------------------\n\nTITLE: Adding Alice to Local Keystore\nDESCRIPTION: Command to add Alice's private key to the local keystore, enabling the gadget to sign transactions.\nSOURCE: https://github.com/tangle-network/blueprint/blob/main/examples/incredible-squaring/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\necho -n \"e5be9a5092b81bca64be81d212e7f2f9eba183bb7a90954f7b76361f6edb5c0a\" > target/keystore/0000d43593c715fdd31c61141abd04a99fd6822c8558854ccde39a5684e7a56da27d\n```\n\n----------------------------------------\n\nTITLE: System Flow Visualization with Mermaid\nDESCRIPTION: Mermaid diagram showing the flow of price request handling from blueprint registration through to on-chain submission.\nSOURCE: https://github.com/tangle-network/blueprint/blob/main/crates/pricing-engine/README.md#2025-04-23_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD\n  subgraph Operator\n    A1[\"Blueprint Registered or Price Updated\"] --> B1[\"Run Benchmark\"]\n    B1 --> C1[\"Compute Price for Blueprint\"]\n    C1 --> D1[\"Store Price in Cache (KV DB)\"]\n\n    E1[\"Incoming Price Request\"] --> F1[\"Lookup Price in Cache\"]\n    F1 --> G1[\"Sign Price with Expiry\"]\n    G1 --> H1[\"Send Price Response\"]\n  end\n\n  subgraph User\n    H1 --> I1[\"Verify Signature\"]\n    I1 --> J1[\"Submit Quote On-chain\"]\n  end\n```\n\n----------------------------------------\n\nTITLE: Quote Payload Structure in Rust\nDESCRIPTION: Rust struct definition for the quote payload containing blueprint hash, price, and timestamp information.\nSOURCE: https://github.com/tangle-network/blueprint/blob/main/crates/pricing-engine/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nstruct QuotePayload {\n    blueprint_hash: [u8; 32],\n    price_wei: u128,\n    timestamp_or_block: u64,\n}\n```\n\n----------------------------------------\n\nTITLE: Building the Incredible Squaring Blueprint\nDESCRIPTION: Command to build the Incredible Squaring Blueprint for Eigenlayer using Cargo, the Rust package manager.\nSOURCE: https://github.com/tangle-network/blueprint/blob/main/examples/incredible-squaring-eigenlayer/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncargo build --release -p incredible-squaring-blueprint-eigenlayer\n```\n\n----------------------------------------\n\nTITLE: Running Test Suite for Verification\nDESCRIPTION: Command to run the test suite to ensure code changes don't break existing functionality.\nSOURCE: https://github.com/tangle-network/blueprint/blob/main/CONTRIBUTING.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncargo test\n```\n\n----------------------------------------\n\nTITLE: Formatting and Linting Rust Code\nDESCRIPTION: Commands to format code with rustfmt and run clippy for linting to ensure code style compliance.\nSOURCE: https://github.com/tangle-network/blueprint/blob/main/CONTRIBUTING.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncargo fmt\ncargo clippy -- -D warnings\n```\n\n----------------------------------------\n\nTITLE: Visualizing Direct P2P Messaging in Mermaid\nDESCRIPTION: A sequence diagram illustrating the direct peer-to-peer messaging pattern between two nodes after they've completed the handshake. Shows a simple message exchange with guaranteed delivery attempts and response expectations.\nSOURCE: https://github.com/tangle-network/blueprint/blob/main/crates/networking/README.md#2025-04-23_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant A as Node A\n    participant B as Node B\n\n    A->>B: Direct message to B\n    B->>A: Got it! Here's my response\n```\n\n----------------------------------------\n\nTITLE: Running Local Tangle Network\nDESCRIPTION: Command to run a standalone local Tangle Network instance. The --clean flag ensures a fresh start.\nSOURCE: https://github.com/tangle-network/blueprint/blob/main/examples/incredible-squaring/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbash ./scripts/run-standalone-local.sh --clean\n```\n\n----------------------------------------\n\nTITLE: Installing OpenSSL Development Packages on Ubuntu/Debian\nDESCRIPTION: Command to install necessary development packages on Ubuntu or Debian systems for using the Blueprint SDK.\nSOURCE: https://github.com/tangle-network/blueprint/blob/main/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt update && sudo apt install build-essential cmake libssl-dev pkg-config\n```\n\n----------------------------------------\n\nTITLE: Installing OpenSSL Development Packages on macOS\nDESCRIPTION: Command to install OpenSSL and CMake on macOS using Homebrew for Blueprint SDK prerequisites.\nSOURCE: https://github.com/tangle-network/blueprint/blob/main/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbrew install openssl cmake\n```\n\n----------------------------------------\n\nTITLE: Creating a New Tangle Blueprint\nDESCRIPTION: Command to create a new Tangle Blueprint project with a specified name using the Tangle CLI.\nSOURCE: https://github.com/tangle-network/blueprint/blob/main/cli/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncargo tangle blueprint create --name <blueprint_name>\n```\n\n----------------------------------------\n\nTITLE: Basic Keystore Configuration with TOML\nDESCRIPTION: Example of enabling specific features in the blueprint-keystore dependency in Cargo.toml. This configuration enables standard library support, ECDSA support, remote signing capabilities, and AWS signer integration.\nSOURCE: https://github.com/tangle-network/blueprint/blob/main/crates/keystore/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\nblueprint-keystore = { version = \"0.1\", features = [\"std\", \"ecdsa\", \"remote\", \"aws-signer\"] }\n```\n\n----------------------------------------\n\nTITLE: Full Keystore Configuration with TOML\nDESCRIPTION: Example of enabling comprehensive feature sets in the blueprint-keystore dependency in Cargo.toml. This configuration includes standard library support, complete Tangle and EigenLayer functionality, and all remote signing capabilities.\nSOURCE: https://github.com/tangle-network/blueprint/blob/main/crates/keystore/README.md#2025-04-23_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\nblueprint-keystore = { version = \"0.1\", features = [\"std\", \"tangle-full\", \"eigenlayer-full\", \"all-remote-signers\"] }\n```\n\n----------------------------------------\n\nTITLE: Writing Time-Dependent Tests with Tokio\nDESCRIPTION: Example code for testing time-dependent functionality using Tokio's time utilities, including intervals and sleep functions.\nSOURCE: https://github.com/tangle-network/blueprint/blob/main/CONTRIBUTING.md#2025-04-23_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\nuse tokio::time::{self, Duration};\n\n#[tokio::test]\nasync fn test_with_time() {\n    let mut interval = time::interval(Duration::from_secs(1));\n    \n    // First tick completes immediately\n    interval.tick().await;\n    \n    // Use time::sleep for testing timeouts\n    tokio::time::sleep(Duration::from_secs(2)).await;\n    \n    // Test after delay\n    assert!(some_condition);\n}\n```\n\n----------------------------------------\n\nTITLE: Visualizing Broadcast Gossip Messaging in Mermaid\nDESCRIPTION: A sequence diagram demonstrating the broadcast messaging pattern where one node sends the same message to multiple nodes simultaneously. Illustrates the gossip protocol mechanism where messages are propagated across the network.\nSOURCE: https://github.com/tangle-network/blueprint/blob/main/crates/networking/README.md#2025-04-23_snippet_2\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant A as Node A\n    participant B as Node B\n    participant C as Node C\n    participant D as Node D\n\n    A->>B: Broadcast message\n    A->>C: Broadcast message\n    A->>D: Broadcast message\n```\n\n----------------------------------------\n\nTITLE: Server Build and Run Commands\nDESCRIPTION: Bash commands for building and running the operator RFQ server using Cargo.\nSOURCE: https://github.com/tangle-network/blueprint/blob/main/crates/pricing-engine/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Build the server\ncargo build --release\n\n# Run the gRPC server\ncargo run --bin operator_rfq\n```\n\n----------------------------------------\n\nTITLE: Building Incredible Squaring Blueprint in Rust\nDESCRIPTION: Command to build the Incredible Squaring Blueprint using Cargo, Rust's package manager and build system.\nSOURCE: https://github.com/tangle-network/blueprint/blob/main/examples/incredible-squaring/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo build -p incredible-squaring-blueprint\n```\n\n----------------------------------------\n\nTITLE: Installing Blueprint Dependencies\nDESCRIPTION: Command to install the required dependencies for the Incredible Squaring Blueprint using Yarn package manager.\nSOURCE: https://github.com/tangle-network/blueprint/blob/main/examples/incredible-squaring/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncd blueprints/incredible-squaring && yarn install\n```\n\n----------------------------------------\n\nTITLE: Cloning the Tangle Network Gadget Repository\nDESCRIPTION: Commands to clone the Tangle Network Gadget repository and navigate to the project directory.\nSOURCE: https://github.com/tangle-network/blueprint/blob/main/CONTRIBUTING.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/tangle-network/gadget.git\ncd gadget\n```\n\n----------------------------------------\n\nTITLE: Creating a Feature Branch for Contributions\nDESCRIPTION: Git command to create a new feature branch following the project's branch naming conventions.\nSOURCE: https://github.com/tangle-network/blueprint/blob/main/CONTRIBUTING.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b feature/your-feature-name\n```\n\n----------------------------------------\n\nTITLE: Cloning and Navigating to the Gadget Repository\nDESCRIPTION: Commands to clone the Gadget repository from GitHub and navigate to the project directory.\nSOURCE: https://github.com/tangle-network/blueprint/blob/main/examples/incredible-squaring-eigenlayer/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/tangle-network/gadget.git\ncd gadget\n```\n\n----------------------------------------\n\nTITLE: Installing Anvil using Foundry\nDESCRIPTION: Commands to install Anvil, a local Ethereum node, using the Foundry toolchain.\nSOURCE: https://github.com/tangle-network/blueprint/blob/main/examples/incredible-squaring-eigenlayer/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -L https://foundry.paradigm.xyz | bash\nfoundryup\n```\n\n----------------------------------------\n\nTITLE: Dependency Path Mappings for Solidity Project\nDESCRIPTION: Defines remapping rules for Solidity dependencies to map import statements to specific versioned package directories. Maps OpenZeppelin contracts v4.7.0, EigenLayer middleware v0.5.4, and Forge Standard Library v1.9.6 to their respective paths.\nSOURCE: https://github.com/tangle-network/blueprint/blob/main/examples/incredible-squaring-eigenlayer/remappings.txt#2025-04-23_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\n@openzeppelin-contracts/=dependencies/@openzeppelin-contracts-4.7.0/\neigenlayer-middleware/=dependencies/eigenlayer-middleware-0.5.4/\nforge-std/=dependencies/forge-std-1.9.6/\n```\n\n----------------------------------------\n\nTITLE: Directory Mapping for TNT Core Dependencies\nDESCRIPTION: Defines a directory mapping for the tnt-core dependency, pointing to version 0.3.0 located in the dependencies folder. This mapping helps the project reference the correct version of the TNT Core library.\nSOURCE: https://github.com/tangle-network/blueprint/blob/main/examples/incredible-squaring/remappings.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ntnt-core/=dependencies/tnt-core-0.3.0/src\n```\n\n----------------------------------------\n\nTITLE: Markdown Formatted Changelog\nDESCRIPTION: A structured changelog documenting version history from initial v0.1.0-alpha.1 release through v0.1.0-alpha.4, including added features, package updates and release links.\nSOURCE: https://github.com/tangle-network/blueprint/blob/main/crates/crypto/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Changelog\n\nAll notable changes to this project will be documented in this file.\n\nThe format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),\nand this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n\n## [Unreleased]\n\n## [0.1.0-alpha.4](https://github.com/tangle-network/blueprint/compare/blueprint-crypto-v0.1.0-alpha.3...blueprint-crypto-v0.1.0-alpha.4) - 2025-04-21\n\n### Added\n\n- impl pricing engine diff network updates (#890)\n\n### Other\n\n- Add network message for subscribe/unsubscribe for new topics (#845)\n\n## [0.1.0-alpha.3](https://github.com/tangle-network/blueprint/compare/blueprint-crypto-v0.1.0-alpha.2...blueprint-crypto-v0.1.0-alpha.3) - 2025-04-14\n\n### Other\n\n- updated the following local packages: blueprint-crypto-core, blueprint-crypto-bls, blueprint-crypto-bn254, blueprint-crypto-ed25519, blueprint-crypto-k256, blueprint-crypto-sp-core, blueprint-crypto-sr25519, blueprint-crypto-tangle-pair-signer\n\n## [0.1.0-alpha.2](https://github.com/tangle-network/blueprint/compare/blueprint-crypto-v0.1.0-alpha.1...blueprint-crypto-v0.1.0-alpha.2) - 2025-04-11\n\n### Other\n\n- updated the following local packages: blueprint-crypto-tangle-pair-signer\n\n## [0.1.0-alpha.1](https://github.com/tangle-network/blueprint/releases/tag/blueprint-crypto-v0.1.0-alpha.1) - 2025-04-08\n\n### Other\n\n- Initial release\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry in Markdown\nDESCRIPTION: Structured changelog entry documenting the initial alpha release of the Blueprint project, following standard formatting conventions.\nSOURCE: https://github.com/tangle-network/blueprint/blob/main/crates/std/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Changelog\n\nAll notable changes to this project will be documented in this file.\n\nThe format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),\nand this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n\n## [Unreleased]\n\n## [0.1.0-alpha.1](https://github.com/tangle-network/blueprint/releases/tag/blueprint-std-v0.1.0-alpha.1) - 2025-04-08\n\n### Other\n\n- Initial release\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Format\nDESCRIPTION: Structured changelog following Keep a Changelog format and Semantic Versioning, documenting changes from initial release through alpha versions.\nSOURCE: https://github.com/tangle-network/blueprint/blob/main/crates/chain-setup/common/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Changelog\n\nAll notable changes to this project will be documented in this file.\n\nThe format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),\nand this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n\n## [Unreleased]\n\n## [0.1.0-alpha.7] - 2025-04-21\n\n### Other\n\n- updated the following local packages: blueprint-crypto, blueprint-keystore, blueprint-networking, blueprint-tangle-extra, blueprint-contexts, blueprint-crypto-tangle-pair-signer, blueprint-clients\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry for Version 0.1.0\nDESCRIPTION: Initial release changelog entry documenting implementation of pricing engine network updates\nSOURCE: https://github.com/tangle-network/blueprint/blob/main/crates/pricing-engine/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## [0.1.0](https://github.com/tangle-network/blueprint/releases/tag/blueprint-pricing-engine-v0.1.0) - 2025-04-21\n\n### Added\n\n- impl pricing engine diff network updates (#890)\n```"
  }
]