[
  {
    "owner": "pyedifice",
    "repo": "pyedifice",
    "content": "TITLE: Defining a Component in Edifice (Python)\nDESCRIPTION: Demonstrates how to define a component in Edifice using the @component decorator. The component takes props as arguments and can have internal state managed by Hooks.\nSOURCE: https://github.com/pyedifice/pyedifice/blob/master/docs/source/edifice.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@component\ndef Foo(self, a:int, b:str, c:float): # a, b, c are the props\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Clock Hook in Python using Edifice\nDESCRIPTION: A custom hook implementation that creates a clock ticker using use_state and use_async hooks. The hook returns an incrementing integer value that updates every second, causing the component to re-render.\nSOURCE: https://github.com/pyedifice/pyedifice/blob/master/docs/source/hooks.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef use_clocktick() -> int:\n    tick, tick_set = use_state(0)\n\n    async def increment():\n        while True:\n            await asyncio.sleep(1)\n            tick_set(lambda t: t + 1)\n\n    use_async(increment)\n\n    return tick\n```\n\n----------------------------------------\n\nTITLE: Dynamic Rendering in Edifice Components (Python)\nDESCRIPTION: Demonstrates dynamic rendering in Edifice components using conditions based on props. This allows for conditional rendering of UI elements based on the component's props or state.\nSOURCE: https://github.com/pyedifice/pyedifice/blob/master/docs/source/edifice.rst#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@component\ndef MyApp(self, want_username:bool, want_email:bool):\n    with Window():\n        with VBoxView():\n            if want_username:\n                with HBoxView():\n                    Label(text=\"Username: \")\n                    TextInput()\n            if want_email:\n                with HBoxView():\n                    Label(text=\"Email: \")\n                    TextInput()\n```\n\n----------------------------------------\n\nTITLE: Using Layout Base Elements in Edifice\nDESCRIPTION: Demonstrates how to use Layout Base Elements with proper indentation in Edifice. The example shows nested VBoxView and HBoxView containers with Label components.\nSOURCE: https://github.com/pyedifice/pyedifice/blob/master/docs/source/base_components.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nwith VBoxView():\n    with HBoxView():\n        Label(\"Hello\")\n        Label(\"World\")\n```\n\n----------------------------------------\n\nTITLE: Basic Edifice Component Example\nDESCRIPTION: Sample code demonstrating Edifice's declarative approach with a button that increments a counter and displays the result. Shows state management and conditional rendering.\nSOURCE: https://github.com/pyedifice/pyedifice/blob/master/README.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n    number, set_number = use_state(0)\n\n    with VBoxView():\n        Button(\"Add 5\", on_click=lambda event: set_number(number+5))\n        Label(str(number))\n        if number > 30 and number < 70:\n            Label(\"Number is mid\")\n```\n\n----------------------------------------\n\nTITLE: Creating and Merging Style Dictionaries in Edifice\nDESCRIPTION: This snippet demonstrates how to create a common style dictionary for labels and merge it with specific styles using the Python dictionary merge operator.\nSOURCE: https://github.com/pyedifice/pyedifice/blob/master/docs/source/styling.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nLABEL_STYLE = {\n    \"color\": \"red\"\n    \"font-size\": 12,  # Default font size\n    \"background-color\": \"rgba(245, 245, 220, 100)\",\n}\n\nwith VBoxView():\n    Label(\"foo\", style=LABEL_STYLE | {\"font-size\": 16})\n    Label(\"foo\", style=LABEL_STYLE)\n    Label(\"foo\", style=LABEL_STYLE | {\"font-size\": 8})\n```\n\n----------------------------------------\n\nTITLE: Declarative RadioButton and CheckBox Props\nDESCRIPTION: Shows the usage of fully declarative 'checked' props for RadioButton and CheckBox components.\nSOURCE: https://github.com/pyedifice/pyedifice/blob/master/docs/source/versions.rst#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nRadioButton(checked=...)\nCheckBox(checked=...)\n```\n\n----------------------------------------\n\nTITLE: Hello World Application in Edifice\nDESCRIPTION: Basic example showing how to create a simple window with a label using Edifice's component system.\nSOURCE: https://github.com/pyedifice/pyedifice/blob/master/docs/source/index.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom edifice import App, Label, Window, component\n\n@component\ndef HelloWorld(self):\n    with Window():\n        Label(\"Hello World!\")\n\nif __name__ == \"__main__\":\n    App(HelloWorld()).start()\n```\n\n----------------------------------------\n\nTITLE: Example of New TableGridView API in Python\nDESCRIPTION: Shows the updated API for TableGridView where rows are created using the TableGridRow component instead of the row() method.\nSOURCE: https://github.com/pyedifice/pyedifice/blob/master/docs/source/versions.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nwith TableGridView():\n    with TableGridRow():\n        Label(\"row\")\n```\n\n----------------------------------------\n\nTITLE: Interactive Counter Component Example\nDESCRIPTION: Demonstrates state management and conditional rendering in Edifice using a number counter with a button.\nSOURCE: https://github.com/pyedifice/pyedifice/blob/master/docs/source/index.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nnumber, set_number = use_state(0)\n\nwith VBoxView():\n    Button(\"Add 5\", on_click=lambda event: set_number(number+5))\n    Label(str(number))\n    if number > 30 and number < 70:\n        Label(\"Number is mid\")\n```\n\n----------------------------------------\n\nTITLE: New TextInputMultiline Base Element\nDESCRIPTION: Introduces the new TextInputMultiline base element for multi-line text input.\nSOURCE: https://github.com/pyedifice/pyedifice/blob/master/docs/source/versions.rst#2025-04-22_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nTextInputMultiline()\n```\n\n----------------------------------------\n\nTITLE: Component Composition with Children Props\nDESCRIPTION: Illustrates the use of the 'component' function with 'children' props and the 'child_place' function for component composition.\nSOURCE: https://github.com/pyedifice/pyedifice/blob/master/docs/source/versions.rst#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ncomponent(children=..., child_place=...)\n```\n\n----------------------------------------\n\nTITLE: Running Edifice Application with Element Inspector\nDESCRIPTION: Command line syntax for launching an Edifice application with the Element Inspector enabled, which provides a visual tool for examining the Element Tree and component states.\nSOURCE: https://github.com/pyedifice/pyedifice/blob/master/docs/source/developer_tools.rst#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\npython -m edifice --inspect path/to/your/app.py RootElement\n```\n\n----------------------------------------\n\nTITLE: Declaring an Element Tree in Edifice (Python)\nDESCRIPTION: Illustrates how to declare an Element tree in an Edifice component render function using context managers. This creates a hierarchical structure of UI elements.\nSOURCE: https://github.com/pyedifice/pyedifice/blob/master/docs/source/edifice.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@component\ndef MyApp(self):\n    with Window():\n        with VBoxView():\n            with HBoxView():\n                Label(text=\"Username: \")\n                TextInput()\n            with HBoxView():\n                Label(text=\"Email: \")\n                TextInput()\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom Watch Directory for Edifice Hot-Reload\nDESCRIPTION: Command line syntax for running an Edifice application with hot-reload while explicitly specifying a custom directory to monitor for changes.\nSOURCE: https://github.com/pyedifice/pyedifice/blob/master/docs/source/developer_tools.rst#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npython -m edifice --dir directory/to/watch path/to/your/app.py RootElement\n```\n\n----------------------------------------\n\nTITLE: Rendering a Component with Props in Edifice (Python)\nDESCRIPTION: Shows how to render a component in Edifice by passing props as arguments. Props are owned by the external caller and should not be modified by the component.\nSOURCE: https://github.com/pyedifice/pyedifice/blob/master/docs/source/edifice.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nFoo(a=1, b=\"2\", c=3.0)\n```\n\n----------------------------------------\n\nTITLE: Running Calculator Example in Python Environment\nDESCRIPTION: Command to run the Calculator example using Python directly. The Calculator example imitates the MacOS Calculator app in 100 lines of code.\nSOURCE: https://github.com/pyedifice/pyedifice/blob/master/docs/source/examples.rst#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npython examples/calculator.py\n```\n\n----------------------------------------\n\nTITLE: Implementing Async Event Handlers in Edifice Components\nDESCRIPTION: Improved implementation using async event handlers with use_async_call Hook. This avoids blocking the UI thread during network operations and provides loading state feedback.\nSOURCE: https://github.com/pyedifice/pyedifice/blob/master/docs/source/base_components.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@component\ndef MyComponent(self):\n\n    results, set_results = use_state(\"\")\n    loading, set_loading = use_state(False)\n\n    async def on_click(event:QMouseEvent):\n        set_loading(True)\n        r = await fetch_from_network()\n        set_results(r)\n        set_loading(False)\n\n    on_click_handler, cancel_click_handler = use_async_call(on_click)\n\n    with VBoxView():\n        Button(\"Fetch\", on_click=on_click_handler)\n        if loading:\n            Label(\"Fetching...\")\n        elif results:\n            Label(results)\n```\n\n----------------------------------------\n\nTITLE: Running TodoMVC Example in Python Environment\nDESCRIPTION: Command to run the TodoMVC example using Python directly. This is an implementation of the TodoMVC specification in Edifice, allowing comparison with implementations in other frameworks.\nSOURCE: https://github.com/pyedifice/pyedifice/blob/master/docs/source/examples.rst#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\npython examples/todomvc.py\n```\n\n----------------------------------------\n\nTITLE: Correct Element Binding with Lambda in Python Edifice Components\nDESCRIPTION: Demonstrates the correct way to defer Element construction using lambda functions. This approach ensures that Elements are inserted into the tree at the intended location during rendering.\nSOURCE: https://github.com/pyedifice/pyedifice/blob/master/docs/source/edifice.rst#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n@component\ndef MySimpleComp(self, prop1, prop2, prop3):\n    label3 = lambda: Label(text=prop3)\n    with VBoxView():\n        Label(text=prop1)\n        Label(text=prop2)\n        label3()\n```\n\n----------------------------------------\n\nTITLE: Running TodoMVC Example with Edifice Runner\nDESCRIPTION: Command to run the TodoMVC example using the Edifice Runner tool with inspection mode enabled for additional debugging capabilities.\nSOURCE: https://github.com/pyedifice/pyedifice/blob/master/docs/source/examples.rst#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\npython -m edifice --inspect examples/todomvc.py Main\n```\n\n----------------------------------------\n\nTITLE: Styling a Label with Custom Properties in Edifice\nDESCRIPTION: This snippet demonstrates how to style a Label element with custom properties such as margin, color, font size, and background color using a dictionary in the style prop.\nSOURCE: https://github.com/pyedifice/pyedifice/blob/master/docs/source/styling.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nLabel(\n    \"Red text\",\n    style={\n        \"margin\": 10,\n        \"color\": \"red\",\n        \"font-size\": 16,\n        \"background-color\": \"rgba(245, 245, 220, 100)\"\n    })\n```\n\n----------------------------------------\n\nTITLE: Running Harmonic Oscillator Example with Edifice Runner\nDESCRIPTION: Command to run the Harmonic Oscillator example using the Edifice Runner tool with inspection mode enabled for additional debugging capabilities.\nSOURCE: https://github.com/pyedifice/pyedifice/blob/master/docs/source/examples.rst#2025-04-22_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\npython -m edifice --inspect examples/harmonic_oscillator.py Main\n```\n\n----------------------------------------\n\nTITLE: Applying Drop Shadow Effect in Edifice\nDESCRIPTION: This example shows how to apply a drop shadow effect to an element using the drop-shadow style property, which takes a tuple of blur radius, shadow color, and shadow offset.\nSOURCE: https://github.com/pyedifice/pyedifice/blob/master/docs/source/styling.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nstyle = {\n    \"drop-shadow\": (10.0, QColor(\"black\"), QPointF(-1.0, 5.0)),\n}\n```\n\n----------------------------------------\n\nTITLE: Running Financial Charting Example with Nix\nDESCRIPTION: Command to run the Financial Charting example using Nix package manager, which handles all dependencies automatically.\nSOURCE: https://github.com/pyedifice/pyedifice/blob/master/docs/source/examples.rst#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnix run github:pyedifice/pyedifice#example-financial-charting\n```\n\n----------------------------------------\n\nTITLE: Recommended Application Structure for Edifice Hot-Reload\nDESCRIPTION: Example Python code demonstrating the recommended application structure for effective hot-reload. Shows separation of the main Window component from child components to ensure proper hot-reload functionality.\nSOURCE: https://github.com/pyedifice/pyedifice/blob/master/docs/source/developer_tools.rst#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@component\ndef HelloWorld(self):\n    Label(\"Hello, World!\")\n\n@component\ndef Main(self):\n    with Window():\n        HelloWorld()\n\nif __name__ == \"__main__\":\n    App(Main()).start()\n```\n\n----------------------------------------\n\nTITLE: Setuptools Dependencies Configuration\nDESCRIPTION: Example pyproject.toml configuration showing how to specify Edifice and Qt backend dependencies.\nSOURCE: https://github.com/pyedifice/pyedifice/blob/master/docs/source/index.rst#2025-04-22_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\ndependencies = [\n    \"pyedifice\",\n    \"PySide6-Essentials\",\n]\n```\n\nLANGUAGE: toml\nCODE:\n```\ndependencies = [\n    \"pyedifice [PySide6-Essentials]\"\n]\n```\n\n----------------------------------------\n\nTITLE: Using Custom Clock Hook in Edifice Component\nDESCRIPTION: Example showing how to use the custom clock hook within an Edifice component. The component renders a Label that displays the current tick value from the hook.\nSOURCE: https://github.com/pyedifice/pyedifice/blob/master/docs/source/hooks.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@component\ndef Clock(self):\n    tick = use_clocktick()\n    Label(str(tick))\n```\n\n----------------------------------------\n\nTITLE: Installing PySide6 for Edifice\nDESCRIPTION: Command to install PySide6-Essentials, which is a required dependency for using Edifice framework.\nSOURCE: https://github.com/pyedifice/pyedifice/blob/master/README.md#2025-04-22_snippet_0\n\nLANGUAGE: console\nCODE:\n```\npip install PySide6-Essentials\n```\n\n----------------------------------------\n\nTITLE: Implementing Blocking Event Handlers in Edifice Components\nDESCRIPTION: Example of a component with a blocking event handler that fetches data from a network. This demonstrates the basic pattern but has limitations as it blocks the main event loop.\nSOURCE: https://github.com/pyedifice/pyedifice/blob/master/docs/source/base_components.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@component\ndef MyComponent(self):\n\n    results, set_results = use_state(\"\")\n\n    def on_click(event:QMouseEvent):\n        r = fetch_from_network()\n        set_results(r)\n\n    with VBoxView():\n        Button(\"Fetch\", on_click=on_click)\n        if results:\n            Label(results)\n```\n\n----------------------------------------\n\nTITLE: Creating uv Virtual Environment for Pyedifice Development\nDESCRIPTION: Commands to set up and activate a uv virtual environment for Pyedifice development. This includes creating the environment, activating it, and syncing dependencies.\nSOURCE: https://github.com/pyedifice/pyedifice/blob/master/DEVELOPMENT.md#2025-04-22_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nuv venv\n```\n\nLANGUAGE: console\nCODE:\n```\nsource .venv/bin/activate\n```\n\nLANGUAGE: console\nCODE:\n```\nuv sync --all-extras\n```\n\n----------------------------------------\n\nTITLE: Using VBoxView for Column Layout in ButtonView\nDESCRIPTION: Demonstrates how to create a column layout by nesting a VBoxView inside a ButtonView.\nSOURCE: https://github.com/pyedifice/pyedifice/blob/master/docs/source/versions.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nVBoxView(ButtonView())\n```\n\n----------------------------------------\n\nTITLE: Generating Requirements File\nDESCRIPTION: Command to generate requirements.txt file using uv package manager.\nSOURCE: https://github.com/pyedifice/pyedifice/blob/master/docs/source/index.rst#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nuv export --format requirements-txt --no-dev > requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Adding Padding to View Layout Elements\nDESCRIPTION: Demonstrates how to add padding to View layout elements using the 'padding' prop.\nSOURCE: https://github.com/pyedifice/pyedifice/blob/master/docs/source/versions.rst#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nView(padding=...)\n```\n\n----------------------------------------\n\nTITLE: Running PyEdifice Tests with Default Qt Version\nDESCRIPTION: Executes the test suite using Python's unittest discover command to find and run all tests in the tests directory.\nSOURCE: https://github.com/pyedifice/pyedifice/blob/master/tests/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython -m unittest discover -s tests\n```\n\n----------------------------------------\n\nTITLE: Setting Element Keys for Comparison in Python\nDESCRIPTION: Demonstrates how to set keys for Elements to ensure proper comparison during rendering. This is useful when conditional rendering is involved to help the diffing algorithm identify identical Elements.\nSOURCE: https://github.com/pyedifice/pyedifice/blob/master/docs/source/edifice.rst#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nwith HBoxView():\n    if some_condition:\n        MyElement(\"Hello\").set_key(\"hello\")\n    if other_condition:\n        MyElement(\"World\").set_key(\"world\")\n```\n\n----------------------------------------\n\nTITLE: Running PyEdifice Tests with PyQt6\nDESCRIPTION: Executes the test suite specifically using PyQt6 by setting the EDIFICE_QT_VERSION environment variable before running the tests.\nSOURCE: https://github.com/pyedifice/pyedifice/blob/master/tests/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nEDIFICE_QT_VERSION=PyQt6 python -m unittest discover -s tests\n```\n\n----------------------------------------\n\nTITLE: Importing MatplotlibFigure Element in PyEdifice\nDESCRIPTION: Example of importing an extra Element (MatplotlibFigure) from the edifice.extra module. This import requires additional matplotlib dependencies to be installed.\nSOURCE: https://github.com/pyedifice/pyedifice/blob/master/docs/source/extra.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom edifice.extra.matplotlib_figure import MatplotlibFigure\n```\n\n----------------------------------------\n\nTITLE: Defining Python Package Dependencies with Hashes\nDESCRIPTION: This snippet specifies the required Python packages with their versions and SHA256 hashes for integrity verification. It includes qasync version 0.27.1 and typing-extensions version 4.12.2.\nSOURCE: https://github.com/pyedifice/pyedifice/blob/master/requirements.txt#2025-04-22_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\nqasync==0.27.1 \\\n    --hash=sha256:5d57335723bc7d9b328dadd8cb2ed7978640e4bf2da184889ce50ee3ad2602c7 \\\n    --hash=sha256:8dc768fd1ee5de1044c7c305eccf2d39d24d87803ea71189d4024fb475f4985f\ntyping-extensions==4.12.2 \\\n    --hash=sha256:04e5ca0351e0f3f85c6853954072df659d0d13fac324d0072316b67d7794700d \\\n    --hash=sha256:1a7ead55c7e559dd4dee8856e3a88b41225abfe1ce8df57b7c13915fe121ffb8\n```\n\n----------------------------------------\n\nTITLE: SpinInput Value Setting\nDESCRIPTION: Illustrates the correct order of setting value after min/max for SpinInput component.\nSOURCE: https://github.com/pyedifice/pyedifice/blob/master/docs/source/versions.rst#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nSpinInput(min=..., max=..., value=...)\n```\n\n----------------------------------------\n\nTITLE: Initializing Development Environment with Nix\nDESCRIPTION: Enters the development environment using nix develop command.\nSOURCE: https://github.com/pyedifice/pyedifice/blob/master/docs/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnix develop\n```\n\n----------------------------------------\n\nTITLE: Setting View Layout to None\nDESCRIPTION: Shows how to set the layout of a View to 'none', which removes the minimum size constraint of 100x100.\nSOURCE: https://github.com/pyedifice/pyedifice/blob/master/docs/source/versions.rst#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nView(layout=\"none\")\n```\n\n----------------------------------------\n\nTITLE: Building Documentation from Root\nDESCRIPTION: Builds HTML documentation using Sphinx make command from the project root.\nSOURCE: https://github.com/pyedifice/pyedifice/blob/master/docs/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnix develop --command bash -c \"make html\"\n```\n\n----------------------------------------\n\nTITLE: Dropdown Selection Changes\nDESCRIPTION: Demonstrates the changes in Dropdown component where option selection is now index-based instead of text-based.\nSOURCE: https://github.com/pyedifice/pyedifice/blob/master/docs/source/versions.rst#2025-04-22_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nDropdown(options=[...], selected_index=...)\n```\n\n----------------------------------------\n\nTITLE: Documenting run_subprocess_with_callback Function in Python\nDESCRIPTION: This snippet uses Sphinx's automodule directive to automatically generate documentation for the run_subprocess_with_callback function from the edifice module. It includes all members of the function in the documentation.\nSOURCE: https://github.com/pyedifice/pyedifice/blob/master/docs/source/run_subprocess_with_callback.rst#2025-04-22_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: edifice\n   :members: run_subprocess_with_callback\n```\n\n----------------------------------------\n\nTITLE: Label Text Prop Type Constraint\nDESCRIPTION: Specifies that the 'text' prop for Label component must be of type str.\nSOURCE: https://github.com/pyedifice/pyedifice/blob/master/docs/source/versions.rst#2025-04-22_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nLabel(text: str)\n```\n\n----------------------------------------\n\nTITLE: Converting SVG to ICO using ImageMagick and Nix\nDESCRIPTION: This command uses Nix to run ImageMagick's convert tool. It resizes the EdificePyramid.svg to 32x32 pixels, sets a transparent background, and outputs an .ico file.\nSOURCE: https://github.com/pyedifice/pyedifice/blob/master/docs/source/image/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnix run nixpkgs#imagemagick -- convert -resize 32x32 -background none EdificePyramid.svg EdificePyramid.ico\n```\n\n----------------------------------------\n\nTITLE: Defining Model-View-Update Flowchart in Mermaid\nDESCRIPTION: This Mermaid flowchart illustrates the Model-View-Update architecture pattern used in PyEdifice. It shows how the Model (using state management) connects to the View (Qt Widgets) through a component render function, and how the View updates the Model through event handler functions.\nSOURCE: https://github.com/pyedifice/pyedifice/blob/master/docs/source/image/model-view-update-mermaid.txt#2025-04-22_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\nsubgraph Model-View-Update\n%% Nodes\n    A(\"<b>Model</b>\n    fa:fa-file-code use_state\")\n    B(\"<b>View</b>\n    fa:fa-diagram-project Qt Widgets\n    \")\n%% Edge connections between nodes\n    A -- <b>Render</b> \n    @component Function --> B\n    B -- <b>Update</b>\n    Event Handler Function --> A\nend\n```\n\n----------------------------------------\n\nTITLE: Simple Component Function Without Decorator in Python Edifice\nDESCRIPTION: Illustrates a simple component function without the @component decorator. This approach lacks the benefits of Element object creation and automatic render skipping based on prop changes.\nSOURCE: https://github.com/pyedifice/pyedifice/blob/master/docs/source/edifice.rst#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# No decorator\ndef MySimpleComp(prop1, prop2, prop3):\n    with VBoxView():\n        Label(text=prop1)\n        Label(text=prop2)\n        Label(text=prop3)\n```\n\n----------------------------------------\n\nTITLE: Installing Edifice with pip\nDESCRIPTION: Commands to install Edifice and its required PySide6 dependency from PyPI.\nSOURCE: https://github.com/pyedifice/pyedifice/blob/master/docs/source/index.rst#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip install PySide6-Essentials\npip install pyedifice\n```\n\n----------------------------------------\n\nTITLE: Incorrect Element Binding in Python Edifice Components\nDESCRIPTION: Shows an example of incorrect Element binding in a component. This approach doesn't work as intended because Elements insert themselves into the tree at initialization time.\nSOURCE: https://github.com/pyedifice/pyedifice/blob/master/docs/source/edifice.rst#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n@component\ndef MySimpleComp(self, prop1, prop2, prop3):\n    label3 = Label(text=prop3)\n    with VBoxView():\n        Label(text=prop1)\n        Label(text=prop2)\n        label3 # This will NOT render here as intended\n```\n\n----------------------------------------\n\nTITLE: Installing Edifice Package\nDESCRIPTION: Command to install the pyedifice package from PyPI.\nSOURCE: https://github.com/pyedifice/pyedifice/blob/master/README.md#2025-04-22_snippet_1\n\nLANGUAGE: console\nCODE:\n```\npip install pyedifice\n```\n\n----------------------------------------\n\nTITLE: Deprecated View and ScrollView Functions\nDESCRIPTION: Shows the usage of deprecated View and ScrollView functions, which are kept for backwards compatibility but will be removed in future versions.\nSOURCE: https://github.com/pyedifice/pyedifice/blob/master/docs/source/versions.rst#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nView()\nScrollView()\n```\n\n----------------------------------------\n\nTITLE: Adding Edifice Dependency in pyproject.toml\nDESCRIPTION: Example of how to specify Edifice and PySide6-Essentials as dependencies in a project's pyproject.toml file.\nSOURCE: https://github.com/pyedifice/pyedifice/blob/master/README.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndependencies = [\n  \"pyedifice\",\n  \"PySide6-Essentials\",\n]\n```\n\n----------------------------------------\n\nTITLE: Adding Edifice with Optional Dependencies\nDESCRIPTION: Example of how to specify Edifice with its optional dependency group for PySide6-Essentials in a project's pyproject.toml file.\nSOURCE: https://github.com/pyedifice/pyedifice/blob/master/README.md#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndependencies = [\n  \"pyedifice [PySide6-Essentials]\"\n]\n```\n\n----------------------------------------\n\nTITLE: Running Financial Charting Example in Python Environment\nDESCRIPTION: Command to run the Financial Charting example using Python directly. This example creates a reactive charting application that fetches stock data from Yahoo Finance.\nSOURCE: https://github.com/pyedifice/pyedifice/blob/master/docs/source/examples.rst#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npython examples/financial_charts.py\n```\n\n----------------------------------------\n\nTITLE: Running Harmonic Oscillator Example in Python Environment\nDESCRIPTION: Command to run the Harmonic Oscillator example using Python directly. This example demonstrates animation capabilities in Edifice.\nSOURCE: https://github.com/pyedifice/pyedifice/blob/master/docs/source/examples.rst#2025-04-22_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\npython examples/harmonic_oscillator.py\n```\n\n----------------------------------------\n\nTITLE: Running an Edifice Application with Hot-Reload\nDESCRIPTION: Command line syntax for running an Edifice application with dynamic hot-reload functionality, which monitors file changes and updates the application instantly.\nSOURCE: https://github.com/pyedifice/pyedifice/blob/master/docs/source/developer_tools.rst#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npython -m edifice path/to/your/app.py MyRootElement\n```\n\n----------------------------------------\n\nTITLE: Installing Watchdog Dependency for Edifice Runner\nDESCRIPTION: Command to install the watchdog package, which is required for using the Edifice Runner development tools.\nSOURCE: https://github.com/pyedifice/pyedifice/blob/master/docs/source/developer_tools.rst#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip install watchdog\n```\n\n----------------------------------------\n\nTITLE: Running Financial Charting Example with Edifice Runner\nDESCRIPTION: Command to run the Financial Charting example using the Edifice Runner tool with inspection mode enabled for additional debugging capabilities.\nSOURCE: https://github.com/pyedifice/pyedifice/blob/master/docs/source/examples.rst#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\npython -m edifice --inspect examples/financial_charts.py Main\n```\n\n----------------------------------------\n\nTITLE: Running Calculator Example with Edifice Runner\nDESCRIPTION: Command to run the Calculator example using the Edifice Runner tool with inspection mode enabled. This provides additional debugging capabilities.\nSOURCE: https://github.com/pyedifice/pyedifice/blob/master/docs/source/examples.rst#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npython -m edifice --inspect examples/calculator.py Main\n```\n\n----------------------------------------\n\nTITLE: Running Calculator Example with Nix\nDESCRIPTION: Command to run the Calculator example using Nix package manager, which handles all dependencies automatically.\nSOURCE: https://github.com/pyedifice/pyedifice/blob/master/docs/source/examples.rst#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnix run github:pyedifice/pyedifice#example-calculator\n```\n\n----------------------------------------\n\nTITLE: Running TodoMVC Example with Nix\nDESCRIPTION: Command to run the TodoMVC example using Nix package manager, which handles all dependencies automatically.\nSOURCE: https://github.com/pyedifice/pyedifice/blob/master/docs/source/examples.rst#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nnix run github:pyedifice/pyedifice#example-todomvc\n```\n\n----------------------------------------\n\nTITLE: Running Harmonic Oscillator Example with Nix\nDESCRIPTION: Command to run the Harmonic Oscillator example using Nix package manager, which handles all dependencies automatically.\nSOURCE: https://github.com/pyedifice/pyedifice/blob/master/docs/source/examples.rst#2025-04-22_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nnix run github:pyedifice/pyedifice#example-harmonic-oscillator\n```\n\n----------------------------------------\n\nTITLE: Documenting Utility Functions in Edifice Python Module\nDESCRIPTION: This code snippet uses Sphinx autodoc to generate documentation for specific members of the edifice module. It focuses on theme-related utility functions.\nSOURCE: https://github.com/pyedifice/pyedifice/blob/master/docs/source/utilities.rst#2025-04-22_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: edifice\n   :members: theme_is_light, palette_edifice_light, palette_edifice_dark\n```\n\n----------------------------------------\n\nTITLE: Specifying Pyedifice Dependency in Poetry Configuration\nDESCRIPTION: Example of how to specify Pyedifice as a git dependency in a Poetry pyproject.toml file. This allows using the latest version from GitHub instead of PyPI.\nSOURCE: https://github.com/pyedifice/pyedifice/blob/master/DEVELOPMENT.md#2025-04-22_snippet_5\n\nLANGUAGE: toml\nCODE:\n```\n[tool.poetry.dependencies]\npython = \">=3.10,<3.11\"\npyedifice = {git = \"https://github.com/pyedifice/pyedifice.git\"}\nPySide6-Essentials = \"6.6.2\"\n```\n\n----------------------------------------\n\nTITLE: Activating Nix uv2nix Development Environment for Pyedifice\nDESCRIPTION: Command to activate the Nix uv2nix development environment for Pyedifice. This environment includes editable source files and supports running tests and publishing to PyPI.\nSOURCE: https://github.com/pyedifice/pyedifice/blob/master/DEVELOPMENT.md#2025-04-22_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nnix develop .#uv2nix\n```\n\n----------------------------------------\n\nTITLE: Activating Nix Impure Development Environment for Pyedifice\nDESCRIPTION: Command to activate the Nix impure development environment for Pyedifice using a Nix Flake. This environment provides everything needed for the uv dev environment.\nSOURCE: https://github.com/pyedifice/pyedifice/blob/master/DEVELOPMENT.md#2025-04-22_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nnix develop .#impure\n```\n\n----------------------------------------\n\nTITLE: Generating requirements.txt for Edifice Project\nDESCRIPTION: Command to export dependencies to a requirements.txt file using the uv package manager.\nSOURCE: https://github.com/pyedifice/pyedifice/blob/master/README.md#2025-04-22_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nuv export --format requirements-txt --no-dev > requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Building Pyedifice Package Using uv\nDESCRIPTION: Command to build the Pyedifice package using uv in the uv2nix development environment.\nSOURCE: https://github.com/pyedifice/pyedifice/blob/master/DEVELOPMENT.md#2025-04-22_snippet_6\n\nLANGUAGE: console\nCODE:\n```\nuv build\n```\n\n----------------------------------------\n\nTITLE: Running Tests in Pyedifice Development Environment\nDESCRIPTION: Command to run tests in the Pyedifice development environment. This should be executed after setting up the uv virtual environment.\nSOURCE: https://github.com/pyedifice/pyedifice/blob/master/DEVELOPMENT.md#2025-04-22_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n./run_tests.sh\n```\n\n----------------------------------------\n\nTITLE: Publishing Pyedifice Package Using uv\nDESCRIPTION: Command to publish the Pyedifice package to PyPI using uv in the uv2nix development environment.\nSOURCE: https://github.com/pyedifice/pyedifice/blob/master/DEVELOPMENT.md#2025-04-22_snippet_7\n\nLANGUAGE: console\nCODE:\n```\nuv publish\n```\n\n----------------------------------------\n\nTITLE: Example of Old TableGridView API in Python\nDESCRIPTION: Demonstrates the deprecated API for TableGridView where rows are created using the tgv.row() method.\nSOURCE: https://github.com/pyedifice/pyedifice/blob/master/docs/source/versions.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nwith TableGridView() as tgv:\n    with tgv.row():\n        Label(\"row\")\n```\n\n----------------------------------------\n\nTITLE: Building Documentation from Docs Directory\nDESCRIPTION: Builds HTML documentation using Sphinx make command from within the docs directory.\nSOURCE: https://github.com/pyedifice/pyedifice/blob/master/docs/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnix develop --command bash -c \"cd docs && make html\"\n```\n\n----------------------------------------\n\nTITLE: Documentation Note for Subprocess Function in Edifice\nDESCRIPTION: This note informs readers that documentation for a specific subprocess function has been moved. It provides a reference to the new location of the documentation.\nSOURCE: https://github.com/pyedifice/pyedifice/blob/master/docs/source/utilities.rst#2025-04-22_snippet_1\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. note:: Documentation moved\n\n   See :func:`run_subprocess_with_callback`.\n```\n\n----------------------------------------\n\nTITLE: Displaying Nix Flake Information for Pyedifice\nDESCRIPTION: Command to show information about the Nix Flake for Pyedifice, including available apps for running tests and examples.\nSOURCE: https://github.com/pyedifice/pyedifice/blob/master/DEVELOPMENT.md#2025-04-22_snippet_4\n\nLANGUAGE: console\nCODE:\n```\nnix flake show github:pyedifice/pyedifice\n```\n\n----------------------------------------\n\nTITLE: Cleaning Build Directory\nDESCRIPTION: Removes all untracked files and directories forcefully using git clean command.\nSOURCE: https://github.com/pyedifice/pyedifice/blob/master/docs/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clean -xdff\n```\n\n----------------------------------------\n\nTITLE: Copying Built Documentation to GitHub Pages\nDESCRIPTION: Copies the generated HTML documentation to the GitHub Pages repository directory.\nSOURCE: https://github.com/pyedifice/pyedifice/blob/master/docs/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncp -r build/html/* ../../pyedifice.github.io/\n```\n\n----------------------------------------\n\nTITLE: Cleaning GitHub Pages Directory\nDESCRIPTION: Removes all existing content from the GitHub Pages repository directory.\nSOURCE: https://github.com/pyedifice/pyedifice/blob/master/docs/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nrm -r ../../pyedifice.github.io/*\n```\n\n----------------------------------------\n\nTITLE: Class Documentation Template in RST with Jinja2\nDESCRIPTION: Template file that generates reStructuredText documentation for a Python class. It creates sections for class definition, methods listing, and attributes listing using Sphinx directives and Jinja2 templating.\nSOURCE: https://github.com/pyedifice/pyedifice/blob/master/docs/source/_templates/custom-class.rst#2025-04-22_snippet_0\n\nLANGUAGE: jinja2\nCODE:\n```\n{{ fullname | escape | underline}}\n\n.. currentmodule:: {{ module }}\n\n.. autoclass:: {{ objname }}\n   :members:\n   :show-inheritance:\n\n\n   {% block methods %}\n\n   {% if methods %}\n   .. rubric:: {{ _('Methods') }}\n\n   .. autosummary::\n      :toctree: stubs\n   {% for item in methods %}\n      ~{{ name }}.{{ item }}\n   {%- endfor %}\n   {% endif %}\n   {% endblock %}\n\n   {% block attributes %}\n   {% if attributes %}\n   .. rubric:: {{ _('Attributes') }}\n\n   .. autosummary::\n   {% for item in attributes %}\n      ~{{ name }}.{{ item }}\n   {%- endfor %}\n   {% endif %}\n   {% endblock %}\n```"
  }
]