[
  {
    "owner": "revenuecat",
    "repo": "purchases-ios",
    "content": "TITLE: Configuring Trusted Entitlements Verification in RevenueCat SDK\nDESCRIPTION: This code demonstrates how to configure the RevenueCat SDK with the Trusted Entitlements feature, which prevents MitM attacks by verifying server responses. The example shows how to enable verification in informational mode and check if entitlements are verified.\nSOURCE: https://github.com/revenuecat/purchases-ios/blob/main/CHANGELOG.md#2025-04-23_snippet_5\n\nLANGUAGE: Swift\nCODE:\n```\nlet purchases = Purchases.configure(\n  with: Configuration\n    .builder(withAPIKey: \"\")\n    .with(entitlementVerificationMode: .informational)\n)\nlet customerInfo = try await purchases.customerInfo()\nif !customerInfo.entitlements.verification.isVerified {\n  print(\"Entitlements could not be verified\")\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing RevenueCatUI Paywall in SwiftUI\nDESCRIPTION: This code snippet demonstrates how to implement a RevenueCatUI paywall in a SwiftUI view. It uses the presentPaywallIfNeeded modifier to display the paywall when needed, with handlers for purchase and restore completion.\nSOURCE: https://github.com/revenuecat/purchases-ios/blob/main/CHANGELOG.md#2025-04-23_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nimport RevenueCatUI\nimport SwiftUI\n\nstruct YourApp: View {\n\n    var body: some View {\n        YourContent()\n            .presentPaywallIfNeeded(\n                requiredEntitlementIdentifier: \"pro\",\n                purchaseCompleted: { customerInfo in\n                    print(\"Purchase completed: \\(customerInfo)\")\n                },\n                restoreCompleted: { customerInfo in\n                    print(\"Purchases restored: \\(customerInfo)\")\n                }\n            )\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring RevenueCat SDK in Custom Mode - Swift\nDESCRIPTION: Initializes the RevenueCat SDK in Custom Entitlements Computation mode with an API key and user ID. Should only be called after user authentication.\nSOURCE: https://github.com/revenuecat/purchases-ios/blob/main/Examples/testCustomEntitlementsComputation/README.md#2025-04-23_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nPurchases.configureInCustomEntitlementsComputationMode(apiKey: \"your_api_key\", appUserID: appUserID)\n```\n\n----------------------------------------\n\nTITLE: Configuring RevenueCat SDK with Custom Purchase Completion in Swift\nDESCRIPTION: Example showing how to migrate from Observer Mode in version 4 to the new PurchasesAreCompletedBy configuration in version 5. This is used when your app has its own implementation of StoreKit to make purchases.\nSOURCE: https://github.com/revenuecat/purchases-ios/blob/main/Sources/DocCDocumentation/DocCDocumentation.docc/V5_API_Migration_guide.md#2025-04-23_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nPurchases.configure(with: .builder(withAPIKey: apiKey)\n  // Set only if your app has its own implementation of StoreKit to make purchases.\n   Select the version of StoreKit you're using.\n  .with(purchasesAreCompletedBy: .myApp, storeKitVersion: /* Select .storeKit1 or .storeKit2 */)\n  .build()\n```\n\n----------------------------------------\n\nTITLE: Implementing CustomerCenter Event Handling with Modifier\nDESCRIPTION: Demonstrates handling CustomerCenter events using the modifier approach with expanded event cases.\nSOURCE: https://github.com/revenuecat/purchases-ios/blob/main/CHANGELOG.md#2025-04-23_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\n.presentCustomerCenter(\n    isPresented: self.$presentingCustomerCenter,\n    customerCenterActionHandler: { action in\n        switch action {\n        case .restoreCompleted(let customerInfo):\n        case .restoreStarted:\n        case .restoreFailed(let error):\n        case .showingManageSubscriptions:\n        case .refundRequestStarted(let productId):\n        case .refundRequestCompleted(let status):\n        case .feedbackSurveyCompleted(let surveyOptionID):\n        }\n    }\n) {\n    self.presentingCustomerCenter = false\n}\n```\n\n----------------------------------------\n\nTITLE: Recording StoreKit 2 Purchases in RevenueCat on macOS in Swift\nDESCRIPTION: Code example demonstrating how to manually record purchases made with StoreKit 2 on macOS to ensure RevenueCat immediately detects the user's purchase, rather than waiting for the app to be foregrounded.\nSOURCE: https://github.com/revenuecat/purchases-ios/blob/main/Sources/DocCDocumentation/DocCDocumentation.docc/V5_API_Migration_guide.md#2025-04-23_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nlet product = try await StoreKit.Product.products(for: [\"my_product_id\"]).first\nlet result = try await product?.purchase()\n\n_ = try await Purchases.shared.recordPurchase(result)\n```\n\n----------------------------------------\n\nTITLE: Making Purchases - Swift Async/Await\nDESCRIPTION: Processes a purchase using async/await syntax with comprehensive error handling for common scenarios like duplicate receipts, pending payments, and user cancellations.\nSOURCE: https://github.com/revenuecat/purchases-ios/blob/main/Examples/testCustomEntitlementsComputation/README.md#2025-04-23_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\ndo {\n    let (transaction, customerInfo, _) = try await Purchases.shared.purchase(package: package)\n    print(\n        \"\"\"\n        Purchase finished:\n        Transaction: \\(transaction.debugDescription)\n        CustomerInfo: \\(customerInfo.debugDescription)\n        \"\"\"\n    )\n} catch ErrorCode.receiptAlreadyInUseError {\n    print(\"The receipt is already in use by another subscriber. \" +\n          \"Log in with the previous account or contact support to get your purchases transferred to \" +\n          \"regain access\")\n} catch ErrorCode.paymentPendingError {\n    print(\"The purchase is pending and may be completed at a later time.\" +\n          \"This can happen when awaiting parental approval or going through extra authentication flows \" +\n          \"for credit cards in some countries.\")\n} catch ErrorCode.purchaseCancelledError {\n    print(\"Purchase was cancelled by the user.\")\n} catch {\n    print(\"FAILED TO PURCHASE: \\(error.localizedDescription)\")\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing EntitlementInfos Methods in Swift\nDESCRIPTION: Code showing how to access the activeInCurrentEnvironment and activeInAnyEnvironment methods from EntitlementInfos through the customerInfo object. These methods allow detecting entitlements from sandbox and production environments.\nSOURCE: https://github.com/revenuecat/purchases-ios/blob/main/CHANGELOG.md#2025-04-23_snippet_12\n\nLANGUAGE: swift\nCODE:\n```\ncustomerInfo.entitlements.activeInCurrentEnvironment\ncustomerInfo.entitlements.activeInAnyEnvironment\n```\n\n----------------------------------------\n\nTITLE: Fetching RevenueCat Offerings - Swift Async/Await\nDESCRIPTION: Retrieves available offerings using async/await syntax.\nSOURCE: https://github.com/revenuecat/purchases-ios/blob/main/Examples/testCustomEntitlementsComputation/README.md#2025-04-23_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nlet offerings = try await Purchases.shared.offerings()\n```\n\n----------------------------------------\n\nTITLE: Fetching RevenueCat Offerings - Swift Completion Handler\nDESCRIPTION: Retrieves available offerings using completion block pattern.\nSOURCE: https://github.com/revenuecat/purchases-ios/blob/main/Examples/testCustomEntitlementsComputation/README.md#2025-04-23_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nPurchases.shared.getOfferings { (offerings, error) in\n    // code to handle here\n}\n```\n\n----------------------------------------\n\nTITLE: Monitoring Subscription Changes - Swift\nDESCRIPTION: Sets up a stream to monitor changes in customer subscription status using async/await syntax.\nSOURCE: https://github.com/revenuecat/purchases-ios/blob/main/Examples/testCustomEntitlementsComputation/README.md#2025-04-23_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\nfor await customerInfo in Purchases.shared.customerInfoStream {\n    // code to handle here\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Trial or Intro Discount Eligibility in RevenueCat iOS SDK\nDESCRIPTION: New method to check for intro or discount eligibility for a single StoreProduct.\nSOURCE: https://github.com/revenuecat/purchases-ios/blob/main/CHANGELOG.md#2025-04-23_snippet_15\n\nLANGUAGE: Swift\nCODE:\n```\ncheckTrialOrIntroDiscountEligibility(product:)\n```\n\n----------------------------------------\n\nTITLE: Making Purchases - Swift Completion Handler\nDESCRIPTION: Processes a purchase using completion block pattern with comprehensive error handling for various purchase scenarios.\nSOURCE: https://github.com/revenuecat/purchases-ios/blob/main/Examples/testCustomEntitlementsComputation/README.md#2025-04-23_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\nPurchases.shared.purchase(package: package) { (transaction, customerInfo, error, userCancelled) in\n    if let error = error as? ErrorCode {\n        switch error {\n        case .receiptAlreadyInUseError:\n            print(\"The receipt is already in use by another subscriber. \" +\n                  \"Log in with the previous account or contact support to get your purchases transferred to \" +\n                  \"regain access\")\n        case .paymentPendingError:\n            print(\"The purchase is pending and may be completed at a later time.\" +\n                  \"This can happen when awaiting parental approval or going through extra authentication flows \" +\n                  \"for credit cards in some countries.\")\n        case .purchaseCancelledError:\n            print(\"Purchase was cancelled by the user.\")\n        default:\n            print(\"FAILED TO PURCHASE: \\(error.localizedDescription)\")\n        }\n        return\n    } else if let error = error {\n        print(\"FAILED TO PURCHASE: \\(error.localizedDescription)\")\n        return\n    }\n\n    print(\n        \"\"\"\n        Purchase finished:\n        Transaction: \\(transaction.debugDescription)\n        CustomerInfo: \\(customerInfo.debugDescription)\n        \"\"\"\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing CustomerCenterView in SwiftUI\nDESCRIPTION: Shows how to implement the CustomerCenterView directly in a SwiftUI navigation stack with a button to present it as a sheet.\nSOURCE: https://github.com/revenuecat/purchases-ios/blob/main/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nvar body: some View {\n    Group {\n        NavigationStack {\n            HomeView()\n                .navigationTitle(\"Home\")\n                .navigationBarTitleDisplayMode(.inline)\n                .toolbar {\n                    ToolbarItem(placement: .topBarLeading) {\n                        Button {\n                        } label: {\n                            Image(systemName: \"line.3.horizontal\")\n                        }\n                    }\n                    ToolbarItem(placement: .topBarTrailing) {\n                        Button {\n                            self.isCustomerCenterPresented = true\n                        } label: {\n                            Image(systemName: \"person.crop.circle\")\n                        }\n                    }\n                }\n        }\n    }\n    .foregroundColor(.white)\n    .sheet(isPresented: $isCustomerCenterPresented) {\n        CustomerCenterView()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring StoreKit 2 Support in RevenueCat iOS SDK\nDESCRIPTION: Experimental configuration option to enable StoreKit 2 API usage for purchases on compatible devices. This is disabled by default and not recommended for production use in this build.\nSOURCE: https://github.com/revenuecat/purchases-ios/blob/main/CHANGELOG.md#2025-04-23_snippet_13\n\nLANGUAGE: Swift\nCODE:\n```\nuseStoreKit2IfAvailable: true\n```\n\n----------------------------------------\n\nTITLE: Using CustomerCenter Modifier in SwiftUI\nDESCRIPTION: Demonstrates using the CustomerCenter presentation modifier with a custom button implementation.\nSOURCE: https://github.com/revenuecat/purchases-ios/blob/main/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nVStack {\n    Button {\n        self.presentingCustomerCenter = true\n    } label: {\n        TemplateLabel(name: \"Customer Center\", icon: \"person.fill\")\n    }\n}\n.presentCustomerCenter(isPresented: self.$presentingCustomerCenter) {\n    self.presentingCustomerCenter = false\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring StoreKit Version in RevenueCat iOS SDK\nDESCRIPTION: Example shows how to configure RevenueCat SDK to use StoreKit 1 instead of the default StoreKit 2. This can be used to control the rollout of StoreKit 2 features using remote configuration.\nSOURCE: https://github.com/revenuecat/purchases-ios/blob/main/Sources/DocCDocumentation/DocCDocumentation.docc/CEC_V5_API_Migration_guide.md#2025-04-23_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nPurchases.configure(with: .builder(withAPIKey: apiKey)\n  .with(storeKitVersion: .storeKit1)\n  .build())\n```\n\n----------------------------------------\n\nTITLE: Switching RevenueCat Users - Swift\nDESCRIPTION: Changes the active user for purchase attribution and entitlements tracking.\nSOURCE: https://github.com/revenuecat/purchases-ios/blob/main/Examples/testCustomEntitlementsComputation/README.md#2025-04-23_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nPurchases.shared.switchUser(to: appUserID)\n```\n\n----------------------------------------\n\nTITLE: Implementing CustomerCenter Event Handling with View\nDESCRIPTION: Shows how to handle CustomerCenter events using the customerCenterActionHandler closure with CustomerCenterView.\nSOURCE: https://github.com/revenuecat/purchases-ios/blob/main/CHANGELOG.md#2025-04-23_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nCustomerCenterView { customerCenterAction in\n    switch customerCenterAction {\n    case .restoreStarted:\n    case .restoreFailed(_):\n    case .restoreCompleted(_):\n    case .showingManageSubscriptions:\n    case .refundRequestStarted(_):\n    case .refundRequestCompleted(_):\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Entitlements Computation Example\nDESCRIPTION: Reference to example code for custom entitlements computation implementation\nSOURCE: https://github.com/revenuecat/purchases-ios/blob/main/CHANGELOG.md#2025-04-23_snippet_7\n\nLANGUAGE: Swift\nCODE:\n```\n// See demo app at: github.com/RevenueCat/purchases-ios/tree/main/Examples/testCustomEntitlementsComputation\n```\n\n----------------------------------------\n\nTITLE: Setting Mixpanel Distinct ID in RevenueCat iOS SDK\nDESCRIPTION: New convenience method for setting the required attribute for Mixpanel integration.\nSOURCE: https://github.com/revenuecat/purchases-ios/blob/main/CHANGELOG.md#2025-04-23_snippet_14\n\nLANGUAGE: Swift\nCODE:\n```\nsetMixpanelDistinctID\n```\n\n----------------------------------------\n\nTITLE: Using SynchronizedUserDefaults for Thread-Safe UserDefaults Access in Swift\nDESCRIPTION: Shows how to use SynchronizedUserDefaults to safely read from and write to UserDefaults from multiple threads. This class is built on top of Atomic and provides thread-safe access to the underlying UserDefaults instance.\nSOURCE: https://github.com/revenuecat/purchases-ios/blob/main/Contributing/ThreadSafety.md#2025-04-23_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nclass Data {\n    private let userDefaults = SynchronizedUserDefaults(userDefaults: .main)\n\n    func threadSafeIncrement() {\n        self.userDefaults.write {\n            let calls = $0.integer(forKey: \"key\") + 1\n            $0.set(calls, forKey: \"key\")\n        }\n    }\n\n    var threadSafeValue: Int {\n        return self.userDefaults.read {\n            $0.integer(forKey: \"key\")\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring RevenueCat SDK to Force StoreKit 1 Usage in Swift\nDESCRIPTION: Example code showing how to configure the RevenueCat SDK to use StoreKit 1 instead of the default StoreKit 2 in version 5.0. This is not recommended but available if needed for compatibility reasons.\nSOURCE: https://github.com/revenuecat/purchases-ios/blob/main/Sources/DocCDocumentation/DocCDocumentation.docc/V5_API_Migration_guide.md#2025-04-23_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nPurchases.configure(with: .builder(withAPIKey: apiKey)\n  // Not recommended. Remove to use StoreKit 2 by default.\n  .with(storeKitVersion: .storeKit1)\n  .build()\n```\n\n----------------------------------------\n\nTITLE: Using Lock for Thread-Safe Method Access in Swift\nDESCRIPTION: Demonstrates how to use the Lock class to create thread-safe methods. The lock ensures that the internal counter is incremented without race conditions when accessed from multiple threads.\nSOURCE: https://github.com/revenuecat/purchases-ios/blob/main/Contributing/ThreadSafety.md#2025-04-23_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nclass Data {\n    private let lock = Lock()\n\n    private var calls = 0\n\n    func threadSafeMethod() -> Int {\n        return self.lock.perform {\n            self.calls += 1\n            return self.calls\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Error Handling in RevenueCat iOS SDK v4\nDESCRIPTION: Shows the simplified error handling approach in RevenueCat iOS SDK v4 using ErrorCode.\nSOURCE: https://github.com/revenuecat/purchases-ios/blob/main/Sources/DocCDocumentation/DocCDocumentation.docc/V4_API_Migration_guide.md#2025-04-23_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nif let error = error as? RevenueCat.ErrorCode {\n\tswitch error {\n\t\tcase .purchaseInvalidError: break\n\t\tdefault: break\n\t}\n} else {\n\t// Error is a different type\n}\n```\n\n----------------------------------------\n\nTITLE: Using Recursive Lock for Nested Thread-Safe Method Calls in Swift\nDESCRIPTION: Shows how to implement a recursive lock that prevents deadlocks when thread-safe methods call other thread-safe methods. The Lock(.recursive) allows the same thread to reacquire the lock without deadlocking.\nSOURCE: https://github.com/revenuecat/purchases-ios/blob/main/Contributing/ThreadSafety.md#2025-04-23_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nclass Data {\n    private let lock = Lock(.recursive)\n\n    private var calls = 0\n\n    func threadSafeMethod() -> Int {\n        return self.lock.perform {\n            self.threadSafeIncrement()\n            return self.calls\n        }\n    }\n\n    private func threadSafeIncrement() {\n        return self.lock.perform {\n            self.calls += 1\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Error Handling in RevenueCat iOS SDK v3\nDESCRIPTION: Demonstrates how to handle errors in RevenueCat iOS SDK v3 using NSError and ErrorDomain.\nSOURCE: https://github.com/revenuecat/purchases-ios/blob/main/Sources/DocCDocumentation/DocCDocumentation.docc/V4_API_Migration_guide.md#2025-04-23_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nif error.domain == Purchases.ErrorDomain {\n\tswitch Purchases.ErrorCode(_nsError: error).code {\n\t\tcase .purchaseInvalidError: break\n\t\tdefault: break\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Using Atomic for Thread-Safe Data Management in Swift\nDESCRIPTION: Demonstrates the Atomic wrapper class that provides an easier way to handle thread-safe data. It encapsulates a value and ensures all reads and modifications are performed safely without race conditions.\nSOURCE: https://github.com/revenuecat/purchases-ios/blob/main/Contributing/ThreadSafety.md#2025-04-23_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nclass Data {\n    private let calls = Atomic<Int>(0)\n\n    func threadSafeIncrement() -> Int {\n        return self.calls.modify { calls in\n            calls += 1\n            return calls\n        }\n    }\n\n    var threadSafeValue: Int {\n        return self.calls.value\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Import Statements in Objective-C for RevenueCat V4\nDESCRIPTION: Changes needed for import statements in Objective-C code when migrating from Purchases v3 to RevenueCat v4. Developers need to replace '@import Purchases;' with '@import RevenueCat;'.\nSOURCE: https://github.com/revenuecat/purchases-ios/blob/main/Sources/DocCDocumentation/DocCDocumentation.docc/V4_API_Migration_guide.md#2025-04-23_snippet_1\n\nLANGUAGE: Objective-C\nCODE:\n```\n@import Purchases;\n```\n\n----------------------------------------\n\nTITLE: Setting CleverTap ID in RevenueCat iOS SDK\nDESCRIPTION: New method for integration with CleverTap.\nSOURCE: https://github.com/revenuecat/purchases-ios/blob/main/CHANGELOG.md#2025-04-23_snippet_16\n\nLANGUAGE: Swift\nCODE:\n```\nsetCleverTapID\n```\n\n----------------------------------------\n\nTITLE: Accessing New Error Code in Swift\nDESCRIPTION: New error code for signature verification failure, part of an upcoming feature\nSOURCE: https://github.com/revenuecat/purchases-ios/blob/main/CHANGELOG.md#2025-04-23_snippet_6\n\nLANGUAGE: Swift\nCODE:\n```\nErrorCode.signatureVerificationFailed\n```\n\n----------------------------------------\n\nTITLE: Updating Import Statements in Swift for RevenueCat V4\nDESCRIPTION: Changes needed for import statements in Swift code when migrating from Purchases v3 to RevenueCat v4. Developers need to replace 'import Purchases' with 'import RevenueCat'.\nSOURCE: https://github.com/revenuecat/purchases-ios/blob/main/Sources/DocCDocumentation/DocCDocumentation.docc/V4_API_Migration_guide.md#2025-04-23_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\nimport Purchases\n```\n\n----------------------------------------\n\nTITLE: Required SDK Configuration Constants\nDESCRIPTION: Constants file that needs to be configured with RevenueCat API key and entitlement ID before running the sample app.\nSOURCE: https://github.com/revenuecat/purchases-ios/blob/main/Examples/MagicWeather/README.md#2025-04-23_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\napiKey = \"YOUR_REVENUECAT_API_KEY\"\\nentitlementID = \"YOUR_ENTITLEMENT_ID\"\n```\n\n----------------------------------------\n\nTITLE: Atomic Boolean Literal Expression in Swift\nDESCRIPTION: Added ExpressibleByBooleanLiteral conformance to Atomic type\nSOURCE: https://github.com/revenuecat/purchases-ios/blob/main/CHANGELOG.md#2025-04-23_snippet_10\n\nLANGUAGE: Swift\nCODE:\n```\nExpressibleByBooleanLiteral\n```\n\n----------------------------------------\n\nTITLE: Obsoleting a Renamed Method with @objc Annotation in Swift\nDESCRIPTION: Shows how to obsolete a method that has been renamed, while maintaining Objective-C compatibility. It uses @available to mark the method as obsoleted across platforms and @objc to specify the old Objective-C method name.\nSOURCE: https://github.com/revenuecat/purchases-ios/blob/main/Contributing/Deprecations.md#2025-04-23_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\n@available(iOS, obsoleted: 1, renamed: \"getProducts(_:completion:)\")\n@available(tvOS, obsoleted: 1, renamed: \"getProducts(_:completion:)\")\n@available(watchOS, obsoleted: 1, renamed: \"getProducts(_:completion:)\")\n@available(macOS, obsoleted: 1, renamed: \"getProducts(_:completion:)\")\n@objc(productsWithIdentifiers:completion:)\nfunc products(_ productIdentifiers: [String], completion: @escaping ([SKProduct]) -> Void) {\n    fatalError()\n}\n```\n\n----------------------------------------\n\nTITLE: Atomic Nil Literal Expression in Swift\nDESCRIPTION: Added ExpressibleByNilLiteral conformance to Atomic type\nSOURCE: https://github.com/revenuecat/purchases-ios/blob/main/CHANGELOG.md#2025-04-23_snippet_11\n\nLANGUAGE: Swift\nCODE:\n```\nExpressibleByNilLiteral\n```\n\n----------------------------------------\n\nTITLE: Obsoleting a Renamed Type in Swift for iOS Framework\nDESCRIPTION: Demonstrates how to obsolete a type that has been renamed across multiple platforms. It uses the @available attribute to mark the type as obsoleted and provides the new name for compiler messages.\nSOURCE: https://github.com/revenuecat/purchases-ios/blob/main/Contributing/Deprecations.md#2025-04-23_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\n@available(iOS, obsoleted: 1, renamed: \"CustomerInfo\")\n@available(tvOS, obsoleted: 1, renamed: \"CustomerInfo\")\n@available(watchOS, obsoleted: 1, renamed: \"CustomerInfo\")\n@available(macOS, obsoleted: 1, renamed: \"CustomerInfo\")\n@objc(RCPurchaserInfo) public class PurchaserInfo: NSObject { }\n```\n\n----------------------------------------\n\nTITLE: Logger Message Optimization in Swift\nDESCRIPTION: Optimization for wrapping logger messages in @autoclosure to avoid creating messages when LogLevel is disabled\nSOURCE: https://github.com/revenuecat/purchases-ios/blob/main/CHANGELOG.md#2025-04-23_snippet_8\n\nLANGUAGE: Swift\nCODE:\n```\n@autoclosure message\n```\n\n----------------------------------------\n\nTITLE: Parsing Base64 Encoded Apple Store Receipt\nDESCRIPTION: A base64-encoded Apple App Store receipt containing purchase validation data, certificates, and transaction details for subscription purchases.\nSOURCE: https://github.com/revenuecat/purchases-ios/blob/main/Tests/UnitTests/Resources/receipts/base64encoded_sandboxReceipt.txt#2025-04-23_snippet_0\n\nLANGUAGE: base64\nCODE:\n```\nMIIg5QYJKoZIhvcNAQcCoIIg1jCCINICAQExCzAJBgUrDgMCGgUAMIIQhgYJKoZIhvcNAQcBoIIQdwSCEHMxghBvMAoCAQgCAQEEAhYAMAo...\n```\n\n----------------------------------------\n\nTITLE: Obsoleting a Method with New API Types in Swift\nDESCRIPTION: Illustrates how to correctly obsolete a method that uses types not available in the minimum deployment target. It uses @available to specify both the introduction version and unavailability across platforms.\nSOURCE: https://github.com/revenuecat/purchases-ios/blob/main/Contributing/Deprecations.md#2025-04-23_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\n@available(iOS, introduced: 12.2, unavailable, renamed: \"purchase(product:discount:)\")\n@available(tvOS, introduced: 12.2, unavailable, renamed: \"purchase(product:discount:)\")\n@available(watchOS, introduced: 6.2, unavailable, renamed: \"purchase(product:discount:)\")\n@available(macOS, introduced: 10.14.4, unavailable, renamed: \"purchase(product:discount:)\")\n@available(macCatalyst, introduced: 13.0, unavailable, renamed: \"purchase(product:discount:)\")\nfunc purchaseProduct(_ product: SKProduct, discount: SKPaymentDiscount)\n```\n\n----------------------------------------\n\nTITLE: Base64 Encoded Apple Store Receipt\nDESCRIPTION: A base64 encoded receipt from Apple's App Store containing purchase and subscription validation data for an iOS app. The receipt includes details about transactions, product IDs, purchase dates and subscription periods.\nSOURCE: https://github.com/revenuecat/purchases-ios/blob/main/Tests/UnitTests/Resources/receipts/base64EncodedReceiptSampleForDataExtension.txt#2025-04-23_snippet_0\n\nLANGUAGE: base64\nCODE:\n```\nMIIg5QYJKoZIhvcNAQcCoIIg1jCCINICAQExCzAJBgUrDgMCGgUAMIIQhgYJKoZIhvcNAQcBoIIQdwSCEHMxghBvMAoCAQgCAQEEAhYAMAoCARQCAQEEAgwAMAsCAQECAQEEAwIBADALAgEDAgEBBAMMATQwCwIBCwIBAQQDAgEAMAsCAQ8CAQEEAwIBADALAgEQAgEBBAMCAQAwCwIBGQIBAQQDAgEDMAwCAQoCAQEEBBYCNCswDAIBDgIBAQQEAgIAojANAgENAgEBBAUCAwIi4DANAgETAgEBBAUMAzEuMDAOAgEJAgEBBAYCBFAyNTUwGAIBBAIBAgQQS5Yfx...\n```\n\n----------------------------------------\n\nTITLE: Collection Extension in Swift\nDESCRIPTION: Added onlyElement property to Collection type\nSOURCE: https://github.com/revenuecat/purchases-ios/blob/main/CHANGELOG.md#2025-04-23_snippet_9\n\nLANGUAGE: Swift\nCODE:\n```\nCollection.onlyElement\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation\nDESCRIPTION: This lane generates the documentation for the project.\nSOURCE: https://github.com/revenuecat/purchases-ios/blob/main/Tests/TestingApps/PurchaseTesterSwiftUI/fastlane/README.md#2025-04-23_snippet_25\n\nLANGUAGE: sh\nCODE:\n```\n[bundle exec] fastlane ios generate_docs\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation\nDESCRIPTION: This Fastlane lane generates documentation for the iOS project.\nSOURCE: https://github.com/revenuecat/purchases-ios/blob/main/Tests/InstallationTests/SPMInstallation/fastlane/README.md#2025-04-23_snippet_19\n\nLANGUAGE: ruby\nCODE:\n```\nfastlane ios generate_docs\n```\n\n----------------------------------------\n\nTITLE: Building for tvOS, watchOS, and macOS\nDESCRIPTION: This lane builds the project for tvOS, watchOS, and macOS platforms.\nSOURCE: https://github.com/revenuecat/purchases-ios/blob/main/Tests/TestingApps/PurchaseTesterSwiftUI/fastlane/README.md#2025-04-23_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\n[bundle exec] fastlane ios build_tv_watch_mac\n```\n\n----------------------------------------\n\nTITLE: Releasing iOS Project\nDESCRIPTION: This lane releases the project to CocoaPods, creates a Carthage archive, exports XCFramework, and creates a GitHub release.\nSOURCE: https://github.com/revenuecat/purchases-ios/blob/main/Tests/TestingApps/PurchaseTesterSwiftUI/fastlane/README.md#2025-04-23_snippet_18\n\nLANGUAGE: sh\nCODE:\n```\n[bundle exec] fastlane ios release\n```\n\n----------------------------------------\n\nTITLE: Building Swift API Tester\nDESCRIPTION: This lane builds the Swift API tester for the project.\nSOURCE: https://github.com/revenuecat/purchases-ios/blob/main/Tests/TestingApps/PurchaseTesterSwiftUI/fastlane/README.md#2025-04-23_snippet_15\n\nLANGUAGE: sh\nCODE:\n```\n[bundle exec] fastlane ios build_swift_api_tester\n```\n\n----------------------------------------\n\nTITLE: Building Objective-C API Tester\nDESCRIPTION: This lane builds the Objective-C API tester for the project.\nSOURCE: https://github.com/revenuecat/purchases-ios/blob/main/Tests/TestingApps/PurchaseTesterSwiftUI/fastlane/README.md#2025-04-23_snippet_16\n\nLANGUAGE: sh\nCODE:\n```\n[bundle exec] fastlane ios build_objc_api_tester\n```\n\n----------------------------------------\n\nTITLE: Running tvOS Tests\nDESCRIPTION: This lane runs all the tvOS tests for the project.\nSOURCE: https://github.com/revenuecat/purchases-ios/blob/main/Tests/TestingApps/PurchaseTesterSwiftUI/fastlane/README.md#2025-04-23_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\n[bundle exec] fastlane ios test_tvos\n```\n\n----------------------------------------\n\nTITLE: Performing Release Checks for iOS Project\nDESCRIPTION: This lane performs release checks for the iOS project.\nSOURCE: https://github.com/revenuecat/purchases-ios/blob/main/Tests/TestingApps/PurchaseTesterSwiftUI/fastlane/README.md#2025-04-23_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\n[bundle exec] fastlane ios release_checks\n```\n\n----------------------------------------\n\nTITLE: Building for macOS\nDESCRIPTION: This Fastlane lane builds the project specifically for macOS.\nSOURCE: https://github.com/revenuecat/purchases-ios/blob/main/Tests/InstallationTests/SPMInstallation/fastlane/README.md#2025-04-23_snippet_11\n\nLANGUAGE: ruby\nCODE:\n```\nfastlane ios build_mac\n```\n\n----------------------------------------\n\nTITLE: Installing Fastlane for iOS Development Automation\nDESCRIPTION: This command installs Fastlane, a tool used for automating iOS development tasks, including setting up the development environment for the RevenueCat SDK.\nSOURCE: https://github.com/revenuecat/purchases-ios/blob/main/Contributing/CONTRIBUTING.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$brew install fastlane\n```\n\n----------------------------------------\n\nTITLE: Archiving iOS Project\nDESCRIPTION: This lane archives the iOS project.\nSOURCE: https://github.com/revenuecat/purchases-ios/blob/main/Tests/TestingApps/PurchaseTesterSwiftUI/fastlane/README.md#2025-04-23_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\n[bundle exec] fastlane ios archive\n```\n\n----------------------------------------\n\nTITLE: Running Fastlane Setup for RevenueCat iOS SDK Development\nDESCRIPTION: This command runs the Fastlane setup lane, which installs necessary tools like Homebrew and SwiftLint, and sets up pre-commit hooks for the RevenueCat iOS SDK development environment.\nSOURCE: https://github.com/revenuecat/purchases-ios/blob/main/Contributing/CONTRIBUTING.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$fastlane setup_dev\n```\n\n----------------------------------------\n\nTITLE: Deploying iOS Project\nDESCRIPTION: This Fastlane lane deploys the iOS project.\nSOURCE: https://github.com/revenuecat/purchases-ios/blob/main/Tests/InstallationTests/SPMInstallation/fastlane/README.md#2025-04-23_snippet_15\n\nLANGUAGE: ruby\nCODE:\n```\nfastlane ios deploy\n```\n\n----------------------------------------\n\nTITLE: Listing Files to Update When Build Requirements Change\nDESCRIPTION: This snippet enumerates the various files and locations that need to be updated when build requirements change, including documentation, Xcode settings, and package specification files.\nSOURCE: https://github.com/revenuecat/purchases-ios/blob/main/Contributing/UpdatingRequirements.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nIf these requirements change, there are several places that need to be updated:\n- `README.md`\n- https://www.revenuecat.com/docs/getting-started\n- Xcode `Project` build settings (at the project level; targets inherit these settings)\n- `RevenueCat.podspec`\n- `RevenueCatUI.podspec`\n- `Package.swift`\n- `SwiftVersionCheck.swift`\n```\n\n----------------------------------------\n\nTITLE: Deploying Purchase Tester\nDESCRIPTION: This lane builds and deploys the PurchaseTesterSwiftUI application.\nSOURCE: https://github.com/revenuecat/purchases-ios/blob/main/Tests/TestingApps/PurchaseTesterSwiftUI/fastlane/README.md#2025-04-23_snippet_26\n\nLANGUAGE: sh\nCODE:\n```\n[bundle exec] fastlane ios deploy_purchase_tester\n```\n\n----------------------------------------\n\nTITLE: Running Standard Release Bump Script\nDESCRIPTION: Executes the fastlane bump script to create a new release version, update the changelog, and create a release branch and PR.\nSOURCE: https://github.com/revenuecat/purchases-ios/blob/main/Contributing/RELEASING.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbundle exec fastlane ios bump\n```\n\n----------------------------------------\n\nTITLE: Exporting XCFramework\nDESCRIPTION: This Fastlane lane exports the XCFramework for the iOS project.\nSOURCE: https://github.com/revenuecat/purchases-ios/blob/main/Tests/InstallationTests/SPMInstallation/fastlane/README.md#2025-04-23_snippet_17\n\nLANGUAGE: ruby\nCODE:\n```\nfastlane ios export_xcframework\n```\n\n----------------------------------------\n\nTITLE: Cherry-picking Commits for Hotfix Release\nDESCRIPTION: Cherry-picks a specific commit from main branch to incorporate a fix into a hotfix release branch.\nSOURCE: https://github.com/revenuecat/purchases-ios/blob/main/Contributing/RELEASING.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit cherry-pick <sha_of_the_squashed_commit_in_main>\n```\n\n----------------------------------------\n\nTITLE: Incrementing iOS Build Number\nDESCRIPTION: This Fastlane lane increments the build number for the iOS project.\nSOURCE: https://github.com/revenuecat/purchases-ios/blob/main/Tests/InstallationTests/SPMInstallation/fastlane/README.md#2025-04-23_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nfastlane ios bump\n```\n\n----------------------------------------\n\nTITLE: Managing Sandbox Testers\nDESCRIPTION: This lane creates or deletes sandbox testers for the project.\nSOURCE: https://github.com/revenuecat/purchases-ios/blob/main/Tests/TestingApps/PurchaseTesterSwiftUI/fastlane/README.md#2025-04-23_snippet_27\n\nLANGUAGE: sh\nCODE:\n```\n[bundle exec] fastlane ios sandbox_testers\n```\n\n----------------------------------------\n\nTITLE: Incrementing Build Number and Updating Changelog\nDESCRIPTION: This Fastlane lane increments the build number and updates the changelog for the iOS project.\nSOURCE: https://github.com/revenuecat/purchases-ios/blob/main/Tests/InstallationTests/SPMInstallation/fastlane/README.md#2025-04-23_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nfastlane ios bump_and_update_changelog\n```\n\n----------------------------------------\n\nTITLE: Creating GitHub Release\nDESCRIPTION: This Fastlane lane creates a GitHub release for the iOS project.\nSOURCE: https://github.com/revenuecat/purchases-ios/blob/main/Tests/InstallationTests/SPMInstallation/fastlane/README.md#2025-04-23_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\nfastlane ios github_release\n```\n\n----------------------------------------\n\nTITLE: Bumping iOS Version and Creating Pull Request\nDESCRIPTION: This lane bumps the version, updates the Swift header, edits the changelog, and creates a pull request for the iOS project.\nSOURCE: https://github.com/revenuecat/purchases-ios/blob/main/Tests/TestingApps/PurchaseTesterSwiftUI/fastlane/README.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n[bundle exec] fastlane ios bump\n```\n\n----------------------------------------\n\nTITLE: Automatically Bumping iOS Version\nDESCRIPTION: This lane automatically bumps the version, updates the Swift header, edits the changelog, and creates a pull request for the iOS project.\nSOURCE: https://github.com/revenuecat/purchases-ios/blob/main/Tests/TestingApps/PurchaseTesterSwiftUI/fastlane/README.md#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n[bundle exec] fastlane ios automatic_bump\n```\n\n----------------------------------------\n\nTITLE: Updating Swift Package Commit\nDESCRIPTION: This Fastlane action updates the Swift package commit. It can be run for both the root project and the iOS-specific lanes.\nSOURCE: https://github.com/revenuecat/purchases-ios/blob/main/Tests/InstallationTests/SPMInstallation/fastlane/README.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nfastlane update_swift_package_commit\n```\n\nLANGUAGE: ruby\nCODE:\n```\nfastlane ios update_swift_package_commit\n```\n\n----------------------------------------\n\nTITLE: Version Bump Automation\nDESCRIPTION: Commands for automated and manual version bumping, including updating swift headers and changelog.\nSOURCE: https://github.com/revenuecat/purchases-ios/blob/main/Tests/InstallationTests/SPMCustomEntitlementComputationInstallation/fastlane/README.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n[bundle exec] fastlane ios bump\n```\n\nLANGUAGE: sh\nCODE:\n```\n[bundle exec] fastlane ios automatic_bump\n```\n\n----------------------------------------\n\nTITLE: Release Management Actions\nDESCRIPTION: Collection of commands for managing releases including GitHub releases, version preparation, and CocoaPods deployment.\nSOURCE: https://github.com/revenuecat/purchases-ios/blob/main/Tests/InstallationTests/SPMCustomEntitlementComputationInstallation/fastlane/README.md#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n[bundle exec] fastlane ios github_release\n```\n\nLANGUAGE: sh\nCODE:\n```\n[bundle exec] fastlane ios prepare_next_version\n```\n\nLANGUAGE: sh\nCODE:\n```\n[bundle exec] fastlane ios release\n```\n\nLANGUAGE: sh\nCODE:\n```\n[bundle exec] fastlane ios push_pods\n```\n\n----------------------------------------\n\nTITLE: Running Manual Deployment Script\nDESCRIPTION: Executes the fastlane deploy script to manually perform the deployment process if the automated CircleCI process fails.\nSOURCE: https://github.com/revenuecat/purchases-ios/blob/main/Contributing/RELEASING.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbundle exec fastlane deploy\n```\n\n----------------------------------------\n\nTITLE: Creating Environment File for GitHub Authentication\nDESCRIPTION: Creates a fastlane environment file with your GitHub API token that will be used for creating pull requests during the release process.\nSOURCE: https://github.com/revenuecat/purchases-ios/blob/main/Contributing/RELEASING.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbundle exec fastlane ios bump github_rate_limit:10\n```\n\n----------------------------------------\n\nTITLE: Setting Up iOS Development Environment\nDESCRIPTION: This lane sets up the development environment for the iOS project.\nSOURCE: https://github.com/revenuecat/purchases-ios/blob/main/Tests/TestingApps/PurchaseTesterSwiftUI/fastlane/README.md#2025-04-23_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\n[bundle exec] fastlane ios setup_dev\n```\n\n----------------------------------------\n\nTITLE: Preparing Carthage Archive\nDESCRIPTION: This Fastlane lane runs the Carthage archive steps to prepare for Carthage distribution.\nSOURCE: https://github.com/revenuecat/purchases-ios/blob/main/Tests/InstallationTests/SPMInstallation/fastlane/README.md#2025-04-23_snippet_12\n\nLANGUAGE: ruby\nCODE:\n```\nfastlane ios carthage_archive\n```\n\n----------------------------------------\n\nTITLE: Creating Sandbox Account\nDESCRIPTION: This Fastlane lane creates a sandbox account for testing purposes.\nSOURCE: https://github.com/revenuecat/purchases-ios/blob/main/Tests/InstallationTests/SPMInstallation/fastlane/README.md#2025-04-23_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\nfastlane ios create_sandbox_account\n```\n\n----------------------------------------\n\nTITLE: Referencing Build Requirements in README.md\nDESCRIPTION: The README.md file contains the current list of build requirements, including the Xcode version and deployment targets. This snippet shows where to find this information.\nSOURCE: https://github.com/revenuecat/purchases-ios/blob/main/Contributing/UpdatingRequirements.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nThe current list of build requirements is listed in `README.md`:\n- Xcode version\n- Deployment targets\n```\n\n----------------------------------------\n\nTITLE: Installing Xcode Command Line Tools\nDESCRIPTION: This command installs the latest version of Xcode command line tools, which are required for using Fastlane.\nSOURCE: https://github.com/revenuecat/purchases-ios/blob/main/Tests/TestingApps/PurchaseTesterSwiftUI/fastlane/README.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nxcode-select --install\n```\n\n----------------------------------------\n\nTITLE: Installing Xcode Command Line Tools\nDESCRIPTION: This command installs the latest version of Xcode command line tools, which are required for using Fastlane.\nSOURCE: https://github.com/revenuecat/purchases-ios/blob/main/Tests/InstallationTests/SPMInstallation/fastlane/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nxcode-select --install\n```\n\n----------------------------------------\n\nTITLE: Updating Swift Package Commit\nDESCRIPTION: This lane updates the Swift package commit for the project.\nSOURCE: https://github.com/revenuecat/purchases-ios/blob/main/Tests/TestingApps/PurchaseTesterSwiftUI/fastlane/README.md#2025-04-23_snippet_23\n\nLANGUAGE: sh\nCODE:\n```\n[bundle exec] fastlane ios update_swift_package_commit\n```\n\n----------------------------------------\n\nTITLE: Running iOS Tests\nDESCRIPTION: This lane runs all the iOS tests for the project.\nSOURCE: https://github.com/revenuecat/purchases-ios/blob/main/Tests/TestingApps/PurchaseTesterSwiftUI/fastlane/README.md#2025-04-23_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\n[bundle exec] fastlane ios test_ios\n```\n\n----------------------------------------\n\nTITLE: Running Backend Integration Tests\nDESCRIPTION: This lane runs the BackendIntegrationTests for the project.\nSOURCE: https://github.com/revenuecat/purchases-ios/blob/main/Tests/TestingApps/PurchaseTesterSwiftUI/fastlane/README.md#2025-04-23_snippet_22\n\nLANGUAGE: sh\nCODE:\n```\n[bundle exec] fastlane ios backend_integration_tests\n```\n\n----------------------------------------\n\nTITLE: Running iOS Tests\nDESCRIPTION: This Fastlane lane runs all the tests for the iOS project.\nSOURCE: https://github.com/revenuecat/purchases-ios/blob/main/Tests/InstallationTests/SPMInstallation/fastlane/README.md#2025-04-23_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nfastlane ios test\n```\n\n----------------------------------------\n\nTITLE: Running Backend Integration Tests\nDESCRIPTION: This Fastlane lane runs the backend integration tests for the iOS project.\nSOURCE: https://github.com/revenuecat/purchases-ios/blob/main/Tests/InstallationTests/SPMInstallation/fastlane/README.md#2025-04-23_snippet_18\n\nLANGUAGE: ruby\nCODE:\n```\nfastlane ios backend_integration_tests\n```\n\n----------------------------------------\n\nTITLE: Creating GitHub Release for iOS Project\nDESCRIPTION: This lane creates a GitHub release for the iOS project.\nSOURCE: https://github.com/revenuecat/purchases-ios/blob/main/Tests/TestingApps/PurchaseTesterSwiftUI/fastlane/README.md#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n[bundle exec] fastlane ios github_release\n```\n\n----------------------------------------\n\nTITLE: Preparing Next Version for iOS Project\nDESCRIPTION: This lane creates a pull request changing the version to the next minor version and adding a -SNAPSHOT suffix.\nSOURCE: https://github.com/revenuecat/purchases-ios/blob/main/Tests/TestingApps/PurchaseTesterSwiftUI/fastlane/README.md#2025-04-23_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\n[bundle exec] fastlane ios prepare_next_version\n```\n\n----------------------------------------\n\nTITLE: Replacing API Key for Integration Tests\nDESCRIPTION: This Fastlane lane replaces the API key used in integration tests.\nSOURCE: https://github.com/revenuecat/purchases-ios/blob/main/Tests/InstallationTests/SPMInstallation/fastlane/README.md#2025-04-23_snippet_14\n\nLANGUAGE: ruby\nCODE:\n```\nfastlane ios replace_api_key_integration_tests\n```\n\n----------------------------------------\n\nTITLE: Replacing API Key for Integration Tests\nDESCRIPTION: This lane replaces the API key for installation and integration tests.\nSOURCE: https://github.com/revenuecat/purchases-ios/blob/main/Tests/TestingApps/PurchaseTesterSwiftUI/fastlane/README.md#2025-04-23_snippet_17\n\nLANGUAGE: sh\nCODE:\n```\n[bundle exec] fastlane ios replace_api_key_integration_tests\n```\n\n----------------------------------------\n\nTITLE: Building for tvOS, watchOS, and macOS\nDESCRIPTION: This Fastlane lane builds the project for tvOS, watchOS, and macOS platforms.\nSOURCE: https://github.com/revenuecat/purchases-ios/blob/main/Tests/InstallationTests/SPMInstallation/fastlane/README.md#2025-04-23_snippet_10\n\nLANGUAGE: ruby\nCODE:\n```\nfastlane ios build_tv_watch_mac\n```\n\n----------------------------------------\n\nTITLE: Archiving for All Platforms\nDESCRIPTION: This lane archives the project for all supported platforms.\nSOURCE: https://github.com/revenuecat/purchases-ios/blob/main/Tests/TestingApps/PurchaseTesterSwiftUI/fastlane/README.md#2025-04-23_snippet_14\n\nLANGUAGE: sh\nCODE:\n```\n[bundle exec] fastlane ios archive_all_platforms\n```\n\n----------------------------------------\n\nTITLE: Archiving iOS Project\nDESCRIPTION: This Fastlane lane archives the iOS project.\nSOURCE: https://github.com/revenuecat/purchases-ios/blob/main/Tests/InstallationTests/SPMInstallation/fastlane/README.md#2025-04-23_snippet_13\n\nLANGUAGE: ruby\nCODE:\n```\nfastlane ios archive\n```\n\n----------------------------------------\n\nTITLE: Building for macOS\nDESCRIPTION: This lane builds the project specifically for macOS.\nSOURCE: https://github.com/revenuecat/purchases-ios/blob/main/Tests/TestingApps/PurchaseTesterSwiftUI/fastlane/README.md#2025-04-23_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\n[bundle exec] fastlane ios build_mac\n```\n\n----------------------------------------\n\nTITLE: Testing Commands\nDESCRIPTION: Commands for running tests across different Apple platforms (iOS, tvOS, watchOS).\nSOURCE: https://github.com/revenuecat/purchases-ios/blob/main/Tests/InstallationTests/SPMCustomEntitlementComputationInstallation/fastlane/README.md#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n[bundle exec] fastlane ios test_ios\n```\n\nLANGUAGE: sh\nCODE:\n```\n[bundle exec] fastlane ios test_tvos\n```\n\nLANGUAGE: sh\nCODE:\n```\n[bundle exec] fastlane ios test_watchos\n```\n\n----------------------------------------\n\nTITLE: Build Commands\nDESCRIPTION: Commands for building the project for different platforms and configurations.\nSOURCE: https://github.com/revenuecat/purchases-ios/blob/main/Tests/InstallationTests/SPMCustomEntitlementComputationInstallation/fastlane/README.md#2025-04-23_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\n[bundle exec] fastlane ios build_tv_watch_mac\n```\n\nLANGUAGE: sh\nCODE:\n```\n[bundle exec] fastlane ios build_mac\n```\n\nLANGUAGE: sh\nCODE:\n```\n[bundle exec] fastlane ios build_swift_api_tester\n```\n\nLANGUAGE: sh\nCODE:\n```\n[bundle exec] fastlane ios build_objc_api_tester\n```\n\n----------------------------------------\n\nTITLE: Setting Up iOS Development Environment\nDESCRIPTION: This Fastlane lane sets up the development environment for iOS.\nSOURCE: https://github.com/revenuecat/purchases-ios/blob/main/Tests/InstallationTests/SPMInstallation/fastlane/README.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nfastlane ios setup_dev\n```\n\n----------------------------------------\n\nTITLE: Running Deployment Checks\nDESCRIPTION: This Fastlane lane performs deployment checks for the iOS project.\nSOURCE: https://github.com/revenuecat/purchases-ios/blob/main/Tests/InstallationTests/SPMInstallation/fastlane/README.md#2025-04-23_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\nfastlane ios deployment_checks\n```\n\n----------------------------------------\n\nTITLE: Preparing Carthage Archive\nDESCRIPTION: This lane runs the Carthage archive steps to prepare for Carthage distribution.\nSOURCE: https://github.com/revenuecat/purchases-ios/blob/main/Tests/TestingApps/PurchaseTesterSwiftUI/fastlane/README.md#2025-04-23_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\n[bundle exec] fastlane ios carthage_archive\n```\n\n----------------------------------------\n\nTITLE: Compiling Autogenerated Header\nDESCRIPTION: This lane creates the RevenueCat-Swift.h header for a new release.\nSOURCE: https://github.com/revenuecat/purchases-ios/blob/main/Tests/TestingApps/PurchaseTesterSwiftUI/fastlane/README.md#2025-04-23_snippet_20\n\nLANGUAGE: sh\nCODE:\n```\n[bundle exec] fastlane ios compile_autogenerated_header\n```\n\n----------------------------------------\n\nTITLE: Exporting XCFramework\nDESCRIPTION: This lane exports the XCFramework for the project.\nSOURCE: https://github.com/revenuecat/purchases-ios/blob/main/Tests/TestingApps/PurchaseTesterSwiftUI/fastlane/README.md#2025-04-23_snippet_21\n\nLANGUAGE: sh\nCODE:\n```\n[bundle exec] fastlane ios export_xcframework\n```\n\n----------------------------------------\n\nTITLE: Tagging Current Branch\nDESCRIPTION: This lane tags the current branch with the current version number.\nSOURCE: https://github.com/revenuecat/purchases-ios/blob/main/Tests/TestingApps/PurchaseTesterSwiftUI/fastlane/README.md#2025-04-23_snippet_19\n\nLANGUAGE: sh\nCODE:\n```\n[bundle exec] fastlane ios tag_current_branch\n```\n\n----------------------------------------\n\nTITLE: Preparing Next Version\nDESCRIPTION: This Fastlane lane prepares the project for the next version.\nSOURCE: https://github.com/revenuecat/purchases-ios/blob/main/Tests/InstallationTests/SPMInstallation/fastlane/README.md#2025-04-23_snippet_16\n\nLANGUAGE: ruby\nCODE:\n```\nfastlane ios prepare_next_version\n```\n\n----------------------------------------\n\nTITLE: Previewing Documentation\nDESCRIPTION: This lane previews the documentation for the project.\nSOURCE: https://github.com/revenuecat/purchases-ios/blob/main/Tests/TestingApps/PurchaseTesterSwiftUI/fastlane/README.md#2025-04-23_snippet_24\n\nLANGUAGE: sh\nCODE:\n```\n[bundle exec] fastlane ios preview_docs\n```\n\n----------------------------------------\n\nTITLE: Running Pod Check\nDESCRIPTION: Command to run the check_pods lane for verifying CocoaPods setup.\nSOURCE: https://github.com/revenuecat/purchases-ios/blob/main/Tests/InstallationTests/SPMCustomEntitlementComputationInstallation/fastlane/README.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n[bundle exec] fastlane check_pods\n```\n\n----------------------------------------\n\nTITLE: Installing Fastlane using Ruby Gem\nDESCRIPTION: This command installs Fastlane using the Ruby gem package manager. The -NV flag installs without documentation and displays the version installed.\nSOURCE: https://github.com/revenuecat/purchases-ios/blob/main/Tests/InstallationTests/SPMInstallation/fastlane/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n[sudo] gem install fastlane -NV\n```\n\n----------------------------------------\n\nTITLE: Running Fastlane Check Pods Action\nDESCRIPTION: This command runs the 'check_pods' Fastlane action, which likely verifies the project's CocoaPods dependencies.\nSOURCE: https://github.com/revenuecat/purchases-ios/blob/main/Tests/TestingApps/PurchaseTesterSwiftUI/fastlane/README.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n[bundle exec] fastlane check_pods\n```\n\n----------------------------------------\n\nTITLE: Installing Xcode Command Line Tools\nDESCRIPTION: Command to install the latest version of Xcode command line tools, which is a prerequisite for using fastlane.\nSOURCE: https://github.com/revenuecat/purchases-ios/blob/main/Tests/InstallationTests/SPMCustomEntitlementComputationInstallation/fastlane/README.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nxcode-select --install\n```"
  }
]