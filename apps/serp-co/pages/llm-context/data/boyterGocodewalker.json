[
  {
    "owner": "boyter",
    "repo": "gocodewalker",
    "content": "TITLE: Matching File against Repository - Go\nDESCRIPTION: This snippet illustrates how to match a directory path relative to a Git repository using the `NewRepository` function.  It creates a `gitignore` object representing the repository and then utilizes the `Relative` function to check for matches. The snippet handles potential errors during repository initialization and then demonstrates checking if a file is specifically included due to a pattern.\nSOURCE: https://github.com/boyter/gocodewalker/blob/master/go-gitignore/README.md#_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// or match against a repository\n//  - here we match a directory path relative to the repository\nignore, err := gitignore.NewRepository( \"/my/git/repository\" )\nif err != nil {\n    panic(err)\n}\nmatch := ignore.Relative(\"src/examples\", true)\nif match != nil {\n    if match.Include() {\n        fmt.Printf(\n            \"include src/examples/ because of pattern %q at %s\",\n\t\t\tmatch, match.Position(),\n\t\t)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking for Ignore/Include Status - Go\nDESCRIPTION: This snippet shows how to directly check if a file or directory is ignored or included within a repository context, without needing to get the detailed match object. It uses the `Ignore` and `Include` methods on the `gitignore` object to determine the status of the provided paths.\nSOURCE: https://github.com/boyter/gocodewalker/blob/master/go-gitignore/README.md#_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// if it's not important whether a path matches, but whether it is\n// ignored or included...\nif ignore.Ignore(\"src/test\") {\n    fmt.Println(\"ignore src/test\")\n} else if ignore.Include(\"src/github.com\") {\n    fmt.Println(\"include src/github.com\")\n}\n```\n\n----------------------------------------\n\nTITLE: Matching File against .gitignore - Go\nDESCRIPTION: This snippet demonstrates how to match a specific file path against the patterns defined in a single .gitignore file. It uses the `NewFromFile` function to create a `gitignore` object, then the `Match` function to check if the provided file path matches any of the ignore patterns. An error check is included to handle potential file reading errors.\nSOURCE: https://github.com/boyter/gocodewalker/blob/master/go-gitignore/README.md#_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/denormal/go-gitignore\"\n\n// match a file against a particular .gitignore\nignore, err := gitignore.NewFromFile(\"/my/.gitignore\")\nif err != nil {\n    panic(err)\n}\nmatch := ignore.Match(\"/my/file/to.check\")\nif match != nil {\n    if match.Ignore() {\n        return true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing File Walker and Processing Files in Go\nDESCRIPTION: This code snippet demonstrates how to initialize a `FileWalker` instance, configure it to only process files with the `.go` extension, set an error handler, start the file walking process, and then process the files found. The file list is populated into a channel that is processed within a for loop.\nSOURCE: https://github.com/boyter/gocodewalker/blob/master/README.md#_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nfileListQueue := make(chan *gocodewalker.File, 100)\n\nfileWalker := gocodewalker.NewFileWalker(\".\", fileListQueue)\n\n// restrict to only process files that have the .go extension\nfileWalker.AllowListExtensions = append(fileWalker.AllowListExtensions, \"go\")\n\n// handle the errors by printing them out and then ignore\nhandlerError := func(e error) bool {\n    fmt.Println(\"ERR\", e.Error())\n    return true\n}\nfileWalker.SetErrorHandler(handlerError)\n\ngo fileWalker.Start()\n\nfor f := range fileListQueue {\n    fmt.Println(f.Location)\n}\n```\n\n----------------------------------------\n\nTITLE: Running File Walker in Parallel in Go\nDESCRIPTION: This code snippet shows how to run the file walker in parallel across multiple directories using `NewParallelFileWalker`.  It initializes a channel to receive the files and starts the file walking process in a separate goroutine. The files are then processed in a loop, printing their locations.\nSOURCE: https://github.com/boyter/gocodewalker/blob/master/README.md#_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nfileListQueue := make(chan *gocodewalker.File, 100)\n\nfileWalker := gocodewalker.NewParallelFileWalker([]string{\".\", \"someotherdir\"}, fileListQueue)\ngo fileWalker.Start()\n\nfor f := range fileListQueue {\n    fmt.Println(f.Location)\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Error Handler to Return on Errors in Go\nDESCRIPTION: This code snippet shows how to set an error handler that causes the file walker to return on any error. The error handler function always returns `false`, indicating that the walker should terminate upon encountering an error.\nSOURCE: https://github.com/boyter/gocodewalker/blob/master/README.md#_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\nerrorHandler := func(e error) bool {\n    return false\n}\nfileWalker.SetErrorHandler(errorHandler)\n```\n\n----------------------------------------\n\nTITLE: Setting Error Handler to Swallow All Errors in Go\nDESCRIPTION: This code snippet demonstrates how to set an error handler that swallows all errors, allowing the file walker to continue processing as best it can. The error handler function always returns `true`, indicating that the walker should continue.\nSOURCE: https://github.com/boyter/gocodewalker/blob/master/README.md#_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\nerrorHandler := func(e error) bool {\n    return true\n}\nfileWalker.SetErrorHandler(errorHandler)\n```\n\n----------------------------------------\n\nTITLE: Installing go-gitignore Package - Go\nDESCRIPTION: This snippet provides the command to install the go-gitignore package using the standard Go `go get` command. This command fetches the package and its dependencies, making it available for use in Go projects.\nSOURCE: https://github.com/boyter/gocodewalker/blob/master/go-gitignore/README.md#_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ngo get github.com/denormal/go-gitignore\n```\n\n----------------------------------------\n\nTITLE: Setting Error Handler to Terminate Walking on Error in Go\nDESCRIPTION: This code snippet demonstrates how to set an error handler that terminates the file walking process completely upon encountering an error. The error handler function calls `fileWalker.Terminate()` to stop the walker and then returns `false` to propagate the error.\nSOURCE: https://github.com/boyter/gocodewalker/blob/master/README.md#_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\nerrorHandler := func(e error) bool {\n    fileWalker.Terminate()\n    return false\n}\nfileWalker.SetErrorHandler(errorHandler)\n```"
  }
]