[
  {
    "owner": "cytoscape",
    "repo": "cytoscape.js",
    "content": "TITLE: Initializing Cytoscape.js Graph Instance\nDESCRIPTION: Basic initialization of a Cytoscape.js graph instance with elements and container configuration. This is the minimal code required to create a new graph visualization.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/README.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar cy = cytoscape({ elements: myElements, container: myDiv });\n```\n\n----------------------------------------\n\nTITLE: Initializing Cytoscape.js Graph Instance\nDESCRIPTION: Creates a basic Cytoscape.js graph instance without any options. This is the simplest way to initialize a graph.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/core/init.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar cy = cytoscape({ /* options */ });\n```\n\n----------------------------------------\n\nTITLE: Importing Cytoscape.js as ES6 Module\nDESCRIPTION: Example of importing Cytoscape.js as an ES6 module in HTML using the type=\"module\" attribute. This approach uses the ESM (ECMAScript module) build of the library.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/getting-started.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"module\">\nimport cytoscape from \"./cytoscape.esm.min.js\";\n</script>\n```\n\n----------------------------------------\n\nTITLE: Performing Breadth-First Search in Cytoscape.js\nDESCRIPTION: This snippet demonstrates how to use the breadth-first search (BFS) function in Cytoscape.js. It shows setting up the BFS with roots, a visit function for custom logic during traversal, and handling the returned path and found node. The example includes logic for finding a node based on weight and early termination of the search.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/collection/breadthFirstSearch.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar bfs = cy.elements().bfs({\n  roots: '#e',\n  visit: function(v, e, u, i, depth){\n    console.log( 'visit ' + v.id() );\n\n    // example of finding desired node\n    if( v.data('weight') > 70 ){\n      return true;\n    }\n\n    // example of exiting search early\n    if( v.data('weight') < 0 ){\n      return false;\n    }\n  },\n  directed: false\n});\n\nvar path = bfs.path; // path to found node\nvar found = bfs.found; // found node\n\n// select the path\npath.select();\n```\n\n----------------------------------------\n\nTITLE: Comprehensive Cytoscape.js Initialization with Elements, Style, and Layout\nDESCRIPTION: Complete example of initializing Cytoscape.js with elements (nodes and edges), styles, and layout configuration. This demonstrates how to create a simple graph with visual styling.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/getting-started.md#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nvar cy = cytoscape({\n\n  container: document.getElementById('cy'), // container to render in\n\n  elements: [ // list of graph elements to start with\n    { // node a\n      data: { id: 'a' }\n    },\n    { // node b\n      data: { id: 'b' }\n    },\n    { // edge ab\n      data: { id: 'ab', source: 'a', target: 'b' }\n    }\n  ],\n\n  style: [ // the stylesheet for the graph\n    {\n      selector: 'node',\n      style: {\n        'background-color': '#666',\n        'label': 'data(id)'\n      }\n    },\n\n    {\n      selector: 'edge',\n      style: {\n        'width': 3,\n        'line-color': '#ccc',\n        'target-arrow-color': '#ccc',\n        'target-arrow-shape': 'triangle',\n        'curve-style': 'bezier'\n      }\n    }\n  ],\n\n  layout: {\n    name: 'grid',\n    rows: 1\n  }\n\n});\n```\n\n----------------------------------------\n\nTITLE: Using Dijkstra's Algorithm in Cytoscape.js\nDESCRIPTION: This example demonstrates how to use the dijkstra() function in Cytoscape.js. It shows how to initialize the algorithm with a source node and weight function, and how to use the returned object to find the shortest path and distance to a specific node.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/collection/dijkstra.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar dijkstra = cy.elements().dijkstra('#e', function(edge){\n  return edge.data('weight');\n});\n\nvar pathToJ = dijkstra.pathTo( cy.$('#j') );\nvar distToJ = dijkstra.distanceTo( cy.$('#j') );\n```\n\n----------------------------------------\n\nTITLE: Including Cytoscape.js with Script Tag in HTML\nDESCRIPTION: Example of how to include Cytoscape.js in a simple HTML environment using a script tag. This approach uses the minified UMD build of the library.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/getting-started.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"cytoscape.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Comprehensive Cytoscape.js Initialization Options\nDESCRIPTION: Demonstrates all available initialization options for a Cytoscape.js graph instance, including container, elements, style, layout, viewport state, interaction options, and rendering options.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/core/init.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar cy = cytoscape({\n  // very commonly used options\n  container: undefined,\n  elements: [ /* ... */ ],\n  style: [ /* ... */ ],\n  layout: { name: 'grid' /* , ... */ },\n  data: { /* ... */ },\n\n  // initial viewport state:\n  zoom: 1,\n  pan: { x: 0, y: 0 },\n\n  // interaction options:\n  minZoom: 1e-50,\n  maxZoom: 1e50,\n  zoomingEnabled: true,\n  userZoomingEnabled: true,\n  panningEnabled: true,\n  userPanningEnabled: true,\n  boxSelectionEnabled: true,\n  selectionType: 'single',\n  touchTapThreshold: 8,\n  desktopTapThreshold: 4,\n  autolock: false,\n  autoungrabify: false,\n  autounselectify: false,\n  multiClickDebounceTime: 250,\n\n  // rendering options:\n  headless: false,\n  styleEnabled: true,\n  hideEdgesOnViewport: false,\n  textureOnViewport: false,\n  motionBlur: false,\n  motionBlurOpacity: 0.2,\n  wheelSensitivity: 1,\n  pixelRatio: 'auto'\n});\n```\n\n----------------------------------------\n\nTITLE: Performing Depth-First Search in Cytoscape.js\nDESCRIPTION: This snippet demonstrates how to use the DFS function in Cytoscape.js. It shows setting up the search with custom visit functions, handling the return values, and selecting the resulting path. The example includes logic for finding a node with specific weight criteria and early termination of the search.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/collection/depthFirstSearch.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar dfs = cy.elements().dfs({\n  roots: '#e',\n  visit: function(v, e, u, i, depth){\n    console.log( 'visit ' + v.id() );\n\n    // example of finding desired node\n    if( v.data('weight') > 70 ){\n      return true;\n    }\n\n    // example of exiting search early\n    if( v.data('weight') < 0 ){\n      return false;\n    }\n  },\n  directed: false\n});\n\nvar path = dfs.path; // path to found node\nvar found = dfs.found; // found node\n\n// select the path\npath.select();\n```\n\n----------------------------------------\n\nTITLE: Using Bellman-Ford Algorithm in Cytoscape.js\nDESCRIPTION: This example demonstrates how to use the Bellman-Ford algorithm in Cytoscape.js. It applies the algorithm to all elements in the graph with a root node '#j', and then selects the path to node '#g'.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/collection/bellmanFord.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar bf = cy.elements().bellmanFord({ root: \"#j\" });\n\nbf.pathTo('#g').select();\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Elements in Cytoscape.js\nDESCRIPTION: Shows how to add multiple nodes and edges to a Cytoscape.js graph in a single operation. The example creates two nodes with specific IDs and positions, and one edge connecting them. The operation returns a reference to the added elements.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/core/add.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// can use reference to eles later\nvar eles = cy.add([\n  { group: 'nodes', data: { id: 'n0' }, position: { x: 100, y: 100 } },\n  { group: 'nodes', data: { id: 'n1' }, position: { x: 200, y: 200 } },\n  { group: 'edges', data: { id: 'e0', source: 'n0', target: 'n1' } }\n]);\n```\n\n----------------------------------------\n\nTITLE: Optimizing Element Selection in Cytoscape.js\nDESCRIPTION: Demonstrates the most efficient way to select an element by ID in Cytoscape.js. Using getElementById() or the $id() shorthand is faster than using selectors, as it utilizes a lookup table.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/performance.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncy.getElementById('foo')\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncy.$id('foo')\n```\n\n----------------------------------------\n\nTITLE: Performing Affinity Propagation Clustering in Cytoscape.js\nDESCRIPTION: Demonstrates how to apply affinity propagation clustering to graph elements in Cytoscape.js. The example shows clustering based on node weight attributes, with the function returning an array of collections where each collection represents a cluster.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/collection/affinityPropagation.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar clusters = cy.elements().ap({\n  attributes: [\n    function( node ){ return node.data('weight'); }\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Cytoscape.js with Plain JSON Style Format\nDESCRIPTION: Shows how to initialize Cytoscape.js using a plain JSON format for styling. This approach allows for more structured style definitions.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/style.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncytoscape({\n  container: document.getElementById('cy'),\n\n  // ...\n\n  style: [\n    {\n      selector: 'node',\n      style: {\n        'background-color': 'red'\n      }\n    }\n\n    // , ...\n  ]\n\n  // , ...\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Node Positions Programmatically in Cytoscape.js\nDESCRIPTION: Uses the positions() function to set positions for all nodes in a Cytoscape graph. The function receives each node and its index, returning an object with x and y coordinates. This example creates a horizontal line of nodes spaced 100 pixels apart.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/collection/positions.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncy.nodes().positions(function( node, i ){\n  return {\n    x: i * 100,\n    y: 100\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Adding a Single Node in Cytoscape.js\nDESCRIPTION: Demonstrates how to add a single node to a Cytoscape.js graph instance. This example creates a node with a weight property and positions it at coordinates (200, 200).\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/core/add.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncy.add({\n\tgroup: 'nodes',\n\tdata: { weight: 75 },\n\tposition: { x: 200, y: 200 }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Completely New Stylesheet in Cytoscape.js\nDESCRIPTION: Demonstrates how to create a stylesheet from scratch without the default styles as a base. Defines basic styles for nodes and edges using different syntax options.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/core/style.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ncy.style()\n  .clear() // start a fresh stylesheet without even the default stylesheet\n\n  // define all basic styles for node\n  .selector('node')\n    .style('background-color', 'magenta')\n\n  // define all basic styles for edge\n  .selector('edge')\n  \t.style({\n      'width': 3,\n      'line-color': 'yellow'\n    })\n\n  // ...\n\n  .update() // indicate the end of your new stylesheet so that it can be updated on elements\n;\n```\n\n----------------------------------------\n\nTITLE: Binding and Triggering Events in Cytoscape.js\nDESCRIPTION: This example demonstrates how to select a node by ID, bind a tap event handler to it, and manually trigger that event. It shows the core event handling functionality in Cytoscape.js.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/collection/emit.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar j = cy.$('#j');\n\nj.on('tap', function(){\n  console.log('tap!!');\n});\n\nj.emit('tap'); // tap!!\n```\n\n----------------------------------------\n\nTITLE: Fitting Cytoscape.js Graph to Specific Nodes\nDESCRIPTION: This code snippet demonstrates how to use the fit() function in Cytoscape.js to adjust the graph view to focus on specific nodes. In this example, the graph is fit to nodes with IDs 'j' and 'e'.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/core/fit.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncy.fit( cy.$('#j, #e') );\n```\n\n----------------------------------------\n\nTITLE: Moving an Edge in Cytoscape.js\nDESCRIPTION: This code snippet demonstrates how to move an edge in Cytoscape.js using the move function. It selects an edge with the ID 'ej' and moves it to target a node with the ID 'g'. The function returns the moved edge element.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/collection/move.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar ej = cy.$('#ej');\n\nej = ej.move({\n  target: 'g'\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Graph State with json() Method in Cytoscape.js\nDESCRIPTION: This snippet demonstrates how to retrieve the complete state of a Cytoscape.js graph as a JSON object. The returned object will contain all information about the graph's elements, style, zoom level, and other properties.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/core/json.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log( cy.json() );\n```\n\n----------------------------------------\n\nTITLE: Initializing Cytoscape.js with Flat Array of Elements\nDESCRIPTION: This snippet demonstrates how to initialize Cytoscape.js with a flat array of nodes and edges. It includes examples of node and edge definitions with various properties such as data, position, classes, and styles.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/notation.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncytoscape({\n\n  container: document.getElementById('cy'),\n\n  elements: [ // flat array of nodes and edges\n    { // node n1\n      group: 'nodes', // 'nodes' for a node, 'edges' for an edge\n      // NB the group field can be automatically inferred for you but specifying it\n      // gives you nice debug messages if you mis-init elements\n\n\n      data: { // element data (put json serialisable dev data here)\n        id: 'n1', // mandatory (string) id for each element, assigned automatically on undefined\n        parent: 'nparent', // indicates the compound node parent id; not defined => no parent\n        // (`parent` can be effectively changed by `eles.move()`)\n      },\n\n      // scratchpad data (usually temp or nonserialisable data)\n      scratch: {\n        _foo: 'bar' // app fields prefixed by underscore; extension fields unprefixed\n      },\n\n      position: { // the model position of the node (optional on init, mandatory after)\n        x: 100,\n        y: 100\n      },\n\n      selected: false, // whether the element is selected (default false)\n\n      selectable: true, // whether the selection state is mutable (default true)\n\n      locked: false, // when locked a node's position is immutable (default false)\n\n      grabbable: true, // whether the node can be grabbed and moved by the user\n\n      pannable: false, // whether dragging the node causes panning instead of grabbing\n\n      classes: ['foo', 'bar'], // an array (or a space separated string) of class names that the element has\n\n      // DO NOT USE THE `style` FIELD UNLESS ABSOLUTELY NECESSARY\n      // USE THE STYLESHEET INSTEAD\n      style: { // style property overrides \n        'background-color': 'red'\n      }\n    },\n\n    { // node n2\n      data: { id: 'n2' },\n      renderedPosition: { x: 200, y: 200 } // can alternatively specify position in rendered on-screen pixels\n    },\n\n    { // node n3\n      data: { id: 'n3', parent: 'nparent' },\n      position: { x: 123, y: 234 }\n    },\n\n    { // node nparent\n      data: { id: 'nparent' }\n    },\n\n    { // edge e1\n      data: {\n        id: 'e1',\n        // inferred as an edge because `source` and `target` are specified:\n        source: 'n1', // the source node id (edge comes from this node)\n        target: 'n2'  // the target node id (edge goes to this node)\n        // (`source` and `target` can be effectively changed by `eles.move()`)\n      },\n\n      pannable: true // whether dragging on the edge causes panning\n    }\n  ],\n\n  layout: {\n    name: 'preset'\n  },\n\n  // so we can see the ids\n  style: [\n    {\n      selector: 'node',\n      style: {\n        'label': 'data(id)'\n      }\n    }\n  ]\n\n});\n```\n\n----------------------------------------\n\nTITLE: A* Search Usage Example in Cytoscape.js\nDESCRIPTION: Shows how to use the A* search algorithm in Cytoscape.js to find a path between two nodes (#j and #e) and select the resulting path.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/collection/aStar.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar aStar = cy.elements().aStar({ root: \"#j\", goal: \"#e\" });\n\naStar.path.select();\n```\n\n----------------------------------------\n\nTITLE: A* Search Return Object Structure in JavaScript\nDESCRIPTION: Demonstrates the structure of the object returned by the A* search algorithm implementation. The object contains boolean found status, distance of shortest path, and path collection.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/collection/aStar.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  found, /* true or false */\n  distance, /* Distance of the shortest path, if found */\n  path /* Ordered collection of elements in the shortest path, if found */\n}\n```\n\n----------------------------------------\n\nTITLE: Dijkstra's Algorithm Return Object Structure in JavaScript\nDESCRIPTION: This snippet shows the structure of the object returned by the dijkstra() function. It includes two methods: distanceTo() to get the distance to a node, and pathTo() to get the shortest path to a node.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/collection/dijkstra.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  distanceTo: function( node ){ /* impl */ }\n  pathTo: function( node ){ /* impl */ }\n}\n```\n\n----------------------------------------\n\nTITLE: Binding One-time Click Event in Cytoscape.js\nDESCRIPTION: Demonstrates how to bind a one-time click event handler to all nodes in a Cytoscape.js graph. The handler will only trigger once per node and then automatically unbind itself.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/collection/once.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncy.nodes().once('click', function(e){\n  var ele = e.target;\n  console.log('clicked ' + ele.id());\n});\n```\n\n----------------------------------------\n\nTITLE: Loading Elements as an Array in Cytoscape.js\nDESCRIPTION: Demonstrates loading graph elements as an array where each element specifies its group (nodes or edges). Each element contains data with an ID, and edges must specify source and target nodes.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/core/load.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncy.load([\n  { data: { id: \"n1\" }, group: \"nodes\" },\n  { data: { id: \"n2\" }, group: \"nodes\" },\n  { data: { id: \"e1\", source: \"n1\", target: \"n2\" }, group: \"edges\" }\n]);\n```\n\n----------------------------------------\n\nTITLE: Using PageRank in Cytoscape.js\nDESCRIPTION: Example showing how to use the PageRank algorithm on all elements in a Cytoscape.js graph. It demonstrates calculating the PageRank for all elements and then accessing the rank of a specific node with the ID 'g'.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/collection/pageRank.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar pr = cy.elements().pageRank();\n\nconsole.log('g rank: ' + pr.rank('#g'));\n```\n\n----------------------------------------\n\nTITLE: Executing Fuzzy C-Means Clustering\nDESCRIPTION: Example showing how to execute fuzzy c-means clustering on Cytoscape.js elements. The code specifies 2 clusters and uses edge weight as the clustering attribute.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/collection/fuzzyCMeans.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar clusters = cy.elements().fuzzyCMeans({\n  k: 2,\n  attributes: [\n    function( node ){ return edge.data('weight'); }\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Rendered Element Styles in Cytoscape.js\nDESCRIPTION: Shows the two equivalent methods for accessing the computed/rendered style properties of a Cytoscape.js element. The methods ele.renderedStyle() and ele.renderedCss() can be used interchangeably to retrieve the actual computed styles applied to an element.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/collection/renderedCss.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nele.renderedStyle()\nele.renderedCss()\n```\n\n----------------------------------------\n\nTITLE: Loading Elements as a Group-Indexed Map in Cytoscape.js\nDESCRIPTION: Shows how to load graph elements using a group-indexed map format, where elements are organized into 'nodes' and 'edges' collections. This follows the same format used in initialization and element JSON format.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/core/load.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncy.load({\n  nodes: [\n    { data: { id: \"n1\" } },\n    { data: { id: \"n2\" } }\n  ],\n\n  edges: [\n    { data: { id: \"e1\", source: \"n1\", target: \"n2\" } }\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Animating Node Position and Style in Cytoscape.js\nDESCRIPTION: This code snippet demonstrates how to animate nodes in Cytoscape.js by changing their position and background color. It uses the animate() method with a specified duration of 1000ms, and includes a console log to indicate the animation has started.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/collection/animate.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncy.nodes().animate({\n  position: { x: 100, y: 100 },\n  style: { backgroundColor: 'red' }\n}, {\n  duration: 1000\n});\n\nconsole.log('Animating nodes...');\n```\n\n----------------------------------------\n\nTITLE: Selecting and Adding Class to Multiple Elements in Cytoscape.js\nDESCRIPTION: Demonstrates how to select multiple elements by their IDs and add a CSS class to them. The code uses the '$' selector method with a comma-separated list of element IDs and then applies the 'addClass' method to add the 'foo' class to all selected elements.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/collection/addClass.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncy.$('#j, #e').addClass('foo');\n```\n\n----------------------------------------\n\nTITLE: Finding Successors of a Node in Cytoscape.js\nDESCRIPTION: This snippet demonstrates how to get all successor nodes of a specific node in a Cytoscape.js graph. It uses the selector syntax with a node ID and chains the successors() method to retrieve all nodes that are reachable from the selected node.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/collection/successors.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncy.$('#j').successors();\n```\n\n----------------------------------------\n\nTITLE: Performing Hierarchical Clustering on Graph Elements in Cytoscape.js\nDESCRIPTION: This code snippet demonstrates how to use the hierarchical clustering algorithm (HCA) on a set of graph elements in Cytoscape.js. It applies the algorithm with a threshold mode, setting a specific threshold value and using a custom attribute function based on node weight.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/collection/hierarchicalClustering.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar clusters = cy.elements().hca({\n  mode: 'threshold',\n  threshold: 25,\n  attributes: [\n    function( node ){ return node.data('weight'); }\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Cytoscape.js using package managers\nDESCRIPTION: Commands for installing Cytoscape.js using various package managers including npm, yarn, bower, and jspm.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/intro.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* npm : `npm install cytoscape`\n* yarn : `yarn install cytoscape`\n* bower : `bower install cytoscape`\n* jspm : `jspm install npm:cytoscape`\n```\n\n----------------------------------------\n\nTITLE: Basic Cytoscape.js Initialization with DOM Container\nDESCRIPTION: Example of creating a basic Cytoscape.js instance with a DOM element as the container. This is the simplest way to initialize a graph with rendering capabilities.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/getting-started.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nvar cy = cytoscape({\n  container: document.getElementById('cy') // container to render in\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Style from Plain JSON in Cytoscape.js\nDESCRIPTION: Shows how to set styles using a JSON array format with selector and style objects. This method is useful when working with style data stored in JSON format.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/core/style.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ncy.style()\n  .fromJson([\n    {\n      selector: 'node',\n      style: {\n        'background-color': 'red'\n      }\n    }\n\n    // , ...\n  ])\n\n  .update() // indicate the end of your new stylesheet so that it can be updated on elements\n;\n```\n\n----------------------------------------\n\nTITLE: Removing Selected Elements in Cytoscape.js\nDESCRIPTION: Demonstrates how to remove elements that are currently selected in the graph using the remove() function. The elements are removed from the graph but remain in memory for potential restoration using eles.restore().\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/collection/remove.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncy.$(':selected').remove();\n```\n\n----------------------------------------\n\nTITLE: Selecting Elements and Checking Neighbors in Cytoscape.js\nDESCRIPTION: This code demonstrates how to select specific elements in a Cytoscape.js graph using the '$' selector, and then check if all selected elements are neighbors of another element using the 'allAreNeighbors' function. It selects element 'j' and elements 'g' and 'k', then checks if 'g' and 'k' are both neighbors of 'j'.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/collection/allAreNeighbors.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar j = cy.$('#j');\nvar gAndK = cy.$('#g, #k');\n\nconsole.log( 'all neighbours ? ' + j.allAreNeighbors(gAndK) );\n```\n\n----------------------------------------\n\nTITLE: Unselecting Elements in Cytoscape.js\nDESCRIPTION: This snippet demonstrates how to unselect a specific node or edge in a Cytoscape.js graph. The example uses the '$' function with a selector to reference an element with ID 'j', then calls the 'unselect()' method to remove it from the current selection.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/collection/unselect.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncy.$('#j').unselect();\n```\n\n----------------------------------------\n\nTITLE: Installing Cytoscape.js via npm\nDESCRIPTION: Command to install Cytoscape.js using the npm package manager. This is useful for projects using build systems or module bundlers.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/getting-started.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install cytoscape\n```\n\n----------------------------------------\n\nTITLE: Initializing Cytoscape.js Graph with Container\nDESCRIPTION: Creates a Cytoscape.js graph instance with a specified container DOM element. This is required when using Cytoscape as a visualization.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/core/init.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar cy = cytoscape({\n  container: document.getElementById('cy')\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing and Running a Random Layout in Cytoscape.js\nDESCRIPTION: This example demonstrates how to create a layout object with the 'random' layout algorithm and then run it to affect the graph. The layout is created using cy.layout() with the name option specified, and then activated using the layout.run() method.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/core/layout.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar layout = cy.layout({\n  name: 'random'\n});\n\nlayout.run();\n```\n\n----------------------------------------\n\nTITLE: Animating Node Colors with Delay in Cytoscape.js\nDESCRIPTION: This code demonstrates how to animate node colors in Cytoscape.js with a chained sequence. It first animates nodes to blue over 1000ms, delays for 1000ms, then animates to yellow. The console.log statement confirms the animation is running.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/collection/delay.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncy.nodes()\n  .animate({\n      style: { 'background-color': 'blue' }\n    }, {\n      duration: 1000\n    })\n\n  .delay( 1000 )\n\n  .animate({\n    style: { 'background-color': 'yellow' }\n  })\n;\n\nconsole.log('Animating nodes...');\n```\n\n----------------------------------------\n\nTITLE: Using Closeness Centrality Network Function in Cytoscape.js\nDESCRIPTION: Example demonstrating how to calculate and retrieve the closeness centrality of a specific node in a Cytoscape.js graph using the ccn() function.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/collection/closenessCentralityNormalized.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar ccn = cy.$().ccn();\nconsole.log( 'ccn of j: ' + ccn.closeness('#j') );\n```\n\n----------------------------------------\n\nTITLE: Filtering Cytoscape Nodes with Selector\nDESCRIPTION: Demonstrates how to filter nodes using a selector expression that checks the weight attribute. The selector filters nodes where the weight property is greater than 50.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/collection/filter.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncy.nodes().filter('[weight > 50]');\n```\n\n----------------------------------------\n\nTITLE: Unmerging Elements from a Collection using Element Reference in Cytoscape.js\nDESCRIPTION: This example demonstrates creating a new collection, populating it with nodes, and then removing a specific element using the unmerge() function with an element reference. It emphasizes proper collection modification practices.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/collection/unmerge.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar col = cy.collection(); // new, empty collection\nvar e = cy.$('#e');\n\ncol.merge( cy.nodes() );\n\ncol.unmerge( e );\n```\n\n----------------------------------------\n\nTITLE: Initializing Cytoscape.js with String Style Format\nDESCRIPTION: Demonstrates how to initialize Cytoscape.js using a string format for styling. This method is useful when loading styles from a server via AJAX.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/style.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncytoscape({\n  container: document.getElementById('cy'),\n\n  // ...\n\n  style: 'node { background-color: green; }' // probably previously loaded via ajax rather than hardcoded\n\n  // , ...\n});\n```\n\n----------------------------------------\n\nTITLE: Setting a New Style by Reference in Cytoscape.js\nDESCRIPTION: Demonstrates how to set a new visual style using a string stylesheet reference. This method replaces the entire current stylesheet with the provided one.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/core/style.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// here a string stylesheet is used, but you could also use json or a cytoscape.stylesheet() object\nvar stringStylesheet = 'node { background-color: cyan; }';\ncy.style( stringStylesheet );\n```\n\n----------------------------------------\n\nTITLE: Creating a Fresh Default Stylesheet in Cytoscape.js\nDESCRIPTION: Shows how to reset to a default stylesheet and then define new styles using the selector method. The update() method must be called to apply changes to elements.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/core/style.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncy.style()\n  .resetToDefault() // start a fresh default stylesheet\n\n  // and then define new styles\n  .selector('node')\n  \t.style('background-color', 'magenta')\n\n  // ...\n\n  .update() // indicate the end of your new stylesheet so that it can be updated on elements\n;\n```\n\n----------------------------------------\n\nTITLE: Defining Closeness Centrality Network Function Structure in JavaScript\nDESCRIPTION: Function structure that returns an object with a closeness method to calculate the normalized closeness centrality of a specified node in a graph.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/collection/closenessCentralityNormalized.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  /* returns the normalised closeness centrality of the specified node */\n  closeness: function( node ){ /* impl */ }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Node Dimensions with Cytoscape.js\nDESCRIPTION: Demonstrates how to get the width and height of a node's bounding box using the layoutDimensions() function. The function accepts an options object that can control whether label dimensions are included in the calculation. Returns an object with 'w' and 'h' properties representing width and height respectively.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/collection/layoutDimensions.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar options = {\n  nodeDimensionsIncludeLabels: true // boolean which changes whether label dimensions are included when calculating node dimensions, default true\n};\n\nvar dims = cy.nodes().first().layoutDimensions( options );\n```\n\n----------------------------------------\n\nTITLE: Using Cytoscape Extensions with ES6 Import\nDESCRIPTION: This snippet shows how to load a Cytoscape.js extension using ES6 import syntax, then register it with cytoscape.use(). This is the modern approach for module importing.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/extensions.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport ext from 'cy-ext';\n\ncytoscape.use( ext );\n```\n\n----------------------------------------\n\nTITLE: Initializing Cytoscape.js with jQuery Container\nDESCRIPTION: Example of creating a Cytoscape.js instance using a jQuery object as the container. This is a convenience option for projects already using jQuery.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/getting-started.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nvar cy = cytoscape({\n  container: $('#cy')\n});\n```\n\n----------------------------------------\n\nTITLE: Applying Random Layout to All Nodes in Cytoscape.js\nDESCRIPTION: This snippet demonstrates how to assign random positions to all nodes in a Cytoscape.js graph. It creates a layout object with the 'random' layout option and then runs the layout.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/collection/layout.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar layout = cy.elements().layout({\n  name: 'random'\n});\n\nlayout.run();\n```\n\n----------------------------------------\n\nTITLE: Registering a Cytoscape.js Collection Extension in JavaScript\nDESCRIPTION: This snippet demonstrates how to register a new collection function named 'fooBar' for Cytoscape.js. The function returns the string 'baz' when called.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/extensions.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ncytoscape('collection', 'fooBar', function(){\n  return 'baz';\n});\n```\n\n----------------------------------------\n\nTITLE: Degree Centrality Usage Example in JavaScript\nDESCRIPTION: Demonstrates how to calculate and log the degree centrality of a specific node (with ID 'j') in the graph.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/collection/degreeCentrality.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log( 'dc of j: ' + cy.$().dc({ root: '#j' }).degree );\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Element Positions in Cytoscape.js\nDESCRIPTION: This example demonstrates various ways to get and set positions of elements in Cytoscape.js. It shows how to retrieve specific coordinates (x or y), get the complete position object, and set positions using either single coordinates or a position object.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/collection/position.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// get x for j\nvar x = cy.$('#j').position('x');\n\n// get the whole position for e\nvar pos = cy.$('#e').position();\n\n// set y for j\ncy.$('#j').position('y', 100);\n\n// set multiple\ncy.$('#e').position({\n  x: 123,\n  y: 200\n});\n```\n\n----------------------------------------\n\nTITLE: Applying Temporary Class with FlashClass in Cytoscape.js\nDESCRIPTION: Demonstrates how to use the flashClass method to temporarily apply a CSS class to selected graph elements. This example selects nodes with IDs 'j' and 'e' and applies the 'foo' class for 1000 milliseconds before automatically removing it.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/collection/flashClass.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncy.$('#j, #e').flashClass('foo', 1000);\n```\n\n----------------------------------------\n\nTITLE: Using asynchronous batching in Cytoscape.js\nDESCRIPTION: This snippet shows how to use asynchronous batching in Cytoscape.js. It uses startBatch() and endBatch() methods to enclose multiple element modifications, optimizing style calculations and redraws.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/core/batch.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ncy.startBatch();\n\ncy.$('#j')\n  .data('weight', '70')\n  .addClass('funny')\n  .removeClass('serious')\n;\n\ncy.endBatch();\n```\n\n----------------------------------------\n\nTITLE: Registering and Triggering Events in Cytoscape.js\nDESCRIPTION: This snippet demonstrates two key event operations in Cytoscape.js: registering an event listener with the 'on' method and manually triggering an event with the 'emit' method. The example registers a 'tap' event handler that logs the event and its arguments, then triggers that event with custom parameters.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/core/emit.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncy.on('tap', function(evt, f, b){\n  console.log('tap', f, b);\n});\n\ncy.emit('tap', ['foo', 'bar']);\n```\n\n----------------------------------------\n\nTITLE: Removing Overridden Style Property in Cytoscape.js\nDESCRIPTION: Demonstrates how to remove a particular overridden style property using the ele.style() function in Cytoscape.js. This can be done by setting the property value to null or an empty string.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/collection/style.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nele.style(null)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nele.style('')\n```\n\n----------------------------------------\n\nTITLE: Directed Degree Centrality Return Object in JavaScript\nDESCRIPTION: Shows the structure of the return object when options.directed is set to true, returning both indegree and outdegree centrality of the root node.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/collection/degreeCentrality.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  indegree, /* the indegree centrality of the root node */\n  outdegree /* the outdegree centrality of the root node */\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Predecessors of a Node in Cytoscape.js\nDESCRIPTION: This code snippet demonstrates how to retrieve the predecessors of a specific node in a Cytoscape.js graph. It uses the 'predecessors()' method on a selected node to get all nodes that have edges pointing to it.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/collection/predecessors.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ncy.$('#j').predecessors();\n```\n\n----------------------------------------\n\nTITLE: Creating and Playing Element Animation in Cytoscape.js\nDESCRIPTION: This code demonstrates how to create an animation for a Cytoscape.js element with ID 'j', changing its background color to red and width to 75 pixels over a duration of 1000 milliseconds. The animation is stored in a variable and then played using the play() method.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/animation/play.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar jAni = cy.$('#j').animation({\n  style: {\n    'background-color': 'red',\n    'width': 75\n  },\n  duration: 1000\n});\n\njAni.play();\n```\n\n----------------------------------------\n\nTITLE: Restoring Removed Elements in Cytoscape.js\nDESCRIPTION: This example demonstrates how to remove selected elements from a Cytoscape.js graph and later restore them. The code first uses a selector to find all currently selected elements, removes them, and then restores them back to the graph using the restore() function.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/collection/restore.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// remove selected elements\nvar eles = cy.$(':selected').remove();\n\n// ... then some time later put them back\neles.restore();\n```\n\n----------------------------------------\n\nTITLE: Comparing Element Collections using diff() in Cytoscape.js\nDESCRIPTION: This example demonstrates how to use the diff() function to compare two collections of elements in Cytoscape.js. It shows how to log the differences and similarities between the collections, using a helper function to extract node IDs.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/collection/diff.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar diff = cy.$('#j, #e, #k').diff('#j, #g');\nvar getNodeId = function( n ){ return n.id() };\n\nconsole.log( 'left: ' + diff.left.map( getNodeId ).join(', ') );\nconsole.log( 'right: ' + diff.right.map( getNodeId ).join(', ') );\nconsole.log( 'both: ' + diff.both.map( getNodeId ).join(', ') );\n```\n\n----------------------------------------\n\nTITLE: Selecting Nodes with Weight Filter in Cytoscape.js\nDESCRIPTION: Demonstrates how to select nodes with a weight property greater than 50 using the cy.nodes() method with a selector string.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/core/elements.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncy.nodes('[weight > 50]');\n```\n\n----------------------------------------\n\nTITLE: Reading Data from a Cytoscape.js Collection in JavaScript\nDESCRIPTION: Demonstrates how to read data from a collection of nodes and compares accessing data from the first element directly versus using the collection's data method. This example retrieves the 'weight' property from nodes and shows that the collection's data method returns the value from the first element.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/collection/collection.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar weight = cy.nodes().data(\"weight\");\n\nconsole.log( cy.nodes()[0].data(\"weight\") + ' == ' + weight ); // weight is the first ele's weight\n```\n\n----------------------------------------\n\nTITLE: Stopping an Animation in Cytoscape.js\nDESCRIPTION: This example demonstrates how to create, play, and then stop an animation on a Cytoscape.js element. It creates an animation that changes the background color and width of an element, plays it, and then stops it after 500 milliseconds (halfway through the animation duration).\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/animation/stop.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar j = cy.$('#j');\nvar jAni = j.animation({\n  style: {\n    'background-color': 'red',\n    'width': 75\n  },\n  duration: 1000\n});\n\njAni.play();\n\n// stop about midway\nsetTimeout(function(){\n  jAni.stop();\n}, 500);\n```\n\n----------------------------------------\n\nTITLE: Animating Fit to Elements in Cytoscape.js\nDESCRIPTION: This code shows how to animate the viewport to fit around a specific element. It selects an element with ID 'j' and animates the view to fit that element with 20px padding over a duration of 1000 milliseconds.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/core/animate.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar j = cy.$('#j');\n\ncy.animate({\n  fit: {\n    eles: j,\n    padding: 20\n  }\n}, {\n  duration: 1000\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Visibility Properties in Cytoscape.js\nDESCRIPTION: Explains the 'display', 'visibility', 'opacity', and 'z-index' properties for controlling element visibility and drawing order in Cytoscape.js.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/style.md#2025-04-23_snippet_23\n\nLANGUAGE: markdown\nCODE:\n```\n* **`display`** : Whether to display the element; may be `element` for displayed or `none` for not displayed.\n* **`visibility`** : Whether the element is visible; may be `visible` or `hidden`.\n* **`opacity`** : The opacity of the element, ranging from 0 to 1.  Note that the opacity of a compound node parent affects the effective opacity of its children.\n* **`z-index`** : A numeric value that affects the relative draw order of elements.  In general, an element with a higher `z-index` will be drawn on top of an element with a lower `z-index`.  \n```\n\n----------------------------------------\n\nTITLE: Registering One-Time Tap Event Handler in Cytoscape.js\nDESCRIPTION: This example demonstrates how to register a one-time 'tap' event handler for all nodes in a Cytoscape.js graph. The handler logs the ID of the tapped element and is triggered exactly once per node.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/collection/one.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncy.$('node').one('tap', function(e){\n  var ele = e.target;\n  console.log('tapped ' + ele.id());\n});\n```\n\n----------------------------------------\n\nTITLE: Selecting Elements with Weight Filter in Cytoscape.js\nDESCRIPTION: Demonstrates two equivalent ways to select both nodes and edges with a weight property greater than 50 using cy.elements() and cy.filter() methods.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/core/elements.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ncy.elements('[weight > 50]');\ncy.filter('[weight > 50]'); // works the same as the above line\n```\n\n----------------------------------------\n\nTITLE: Printing Element JSON in Cytoscape.js\nDESCRIPTION: This snippet demonstrates how to use the `json()` function to retrieve and print the JSON representation of an element with the ID 'j' in Cytoscape.js.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/collection/json.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log( cy.$('#j').json() );\n```\n\n----------------------------------------\n\nTITLE: Setting and Retrieving Element Data in Cytoscape.js\nDESCRIPTION: This snippet demonstrates how to set and retrieve data for a Cytoscape.js element. It shows setting individual fields, multiple fields at once, and retrieving a specific data field. The 'data()' method is used for these operations.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/collection/data.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar j = cy.$('#j');\n\n// set the weight field in data\nj.data('weight', 60);\n\n// set several fields at once\nj.data({\n  name: 'Jerry Jerry Dingleberry',\n  height: 176\n});\n\nvar weight = j.data('weight');\n```\n\n----------------------------------------\n\nTITLE: Styling Edge Lines in Cytoscape.js\nDESCRIPTION: These properties affect the styling of an edge's line, including width, curve style, color, line style, cap style, outline, opacity, and gradient options.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/style.md#2025-04-23_snippet_12\n\nLANGUAGE: css\nCODE:\n```\nwidth: 2px;\ncurve-style: bezier;\nline-color: #000000;\nline-style: solid;\nline-cap: butt;\nline-outline-width: 1px;\nline-outline-color: #cccccc;\nline-opacity: 0.8;\nline-fill: solid;\nline-dash-pattern: [6, 3];\nline-dash-offset: 24;\nline-gradient-stop-colors: cyan magenta yellow;\nline-gradient-stop-positions: 0% 50% 100%;\n```\n\n----------------------------------------\n\nTITLE: Joining Node IDs with reduce() in Cytoscape.js\nDESCRIPTION: This snippet demonstrates how to use the reduce() method to concatenate all node IDs from a Cytoscape.js graph into a comma-separated string. It defines a callback function that accepts the previous value, current element, index, and the collection, then builds the string incrementally.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/collection/reduce.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar initialValue = null;\nvar fn = function( prevVal, ele, i, eles ){\n  if( prevVal ){\n    return prevVal + ',' + ele.id();\n  } else {\n    return ele.id();\n  }\n};\nvar ids = cy.nodes().reduce( fn, initialValue );\n\nconsole.log( ids );\n```\n\n----------------------------------------\n\nTITLE: Using removeData() Method in Cytoscape.js\nDESCRIPTION: Demonstrates the syntax for removing data from a Cytoscape.js element. The removeData() method sets specified fields to undefined rather than removing them completely, which allows for using meaningful null values in element data.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/collection/removeData.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nele.removeData()\n```\n\n----------------------------------------\n\nTITLE: Using Filter Function with Node Type Check in Cytoscape.js\nDESCRIPTION: Shows how to use a custom filter function with cy.filter() that combines a type check using isNode() and a data property condition to select nodes with weight greater than 50.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/core/elements.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ncy.filter(function(element, i){\n  return element.isNode() && element.data('weight') > 50;\n});\n```\n\n----------------------------------------\n\nTITLE: Binding Tap Event Handler in Cytoscape.js\nDESCRIPTION: Shows how to bind a tap event handler to a specific element with ID 'j' using the jQuery-style selector syntax. The handler logs the ID of the tapped element to the console when triggered.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/collection/on.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncy.$('#j').on('tap', function(evt){\n  console.log( 'tap ' + evt.target.id() );\n});\n```\n\n----------------------------------------\n\nTITLE: Finding Intersection of Node Neighborhoods in Cytoscape.js\nDESCRIPTION: This code retrieves the neighborhoods of two nodes with IDs 'j' and 'e', then finds their intersection. The neighborhood() method returns all nodes and edges connected to the selected node, and intersection() finds elements common to both collections.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/collection/intersection.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar jNhd = cy.$('#j').neighborhood();\nvar eNhd = cy.$('#e').neighborhood();\n\njNhd.intersection( eNhd );\n```\n\n----------------------------------------\n\nTITLE: Running a Random Layout in Cytoscape.js\nDESCRIPTION: This code snippet demonstrates how to create and run a random layout in Cytoscape.js. It initializes a layout object with the 'random' layout option and then calls the run method to execute the layout.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/layout/run.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar layout = cy.layout({ name: 'random' });\n\nlayout.run();\n```\n\n----------------------------------------\n\nTITLE: Performing K-Means Clustering on Graph Elements in Cytoscape.js\nDESCRIPTION: This snippet demonstrates how to use the kMeans function on a collection of graph elements in Cytoscape.js. It clusters the elements into 2 groups based on the 'weight' attribute of edges.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/collection/kMeans.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar clusters = cy.elements().kMeans({\n  k: 2,\n  attributes: [\n    function( node ){ return edge.data('weight'); }\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Selecting a Node and Finding Connected Edges in Cytoscape.js\nDESCRIPTION: This code demonstrates how to select a node with ID 'j' from a Cytoscape.js graph instance and then retrieve all edges connected to that node. The '$' selector function is used to query elements by ID, and the connectedEdges() method returns all edges incident to the selected node.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/collection/connectedEdges.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar j = cy.$('#j');\n\nj.connectedEdges();\n```\n\n----------------------------------------\n\nTITLE: Selecting Element by ID in Cytoscape.js using getElementById\nDESCRIPTION: This snippet demonstrates how to select an element with the ID 'j' using the full getElementById method in Cytoscape.js. It uses the 'cy' object, which represents the Cytoscape instance.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/core/getElementById.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ncy.getElementById('j');\n```\n\n----------------------------------------\n\nTITLE: CSS Units in Cytoscape.js\nDESCRIPTION: Documents the supported CSS measurement units including pixels, ems, percentages, radians, seconds and milliseconds that can be used for styling elements and animations in Cytoscape.js.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/collection/numericStyleUnits.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- `px` for pixels\n- `em` for ems\n- `%` for percent\n- `rad` for radians\n- `s` for seconds\n- `ms` for milliseconds\n```\n\n----------------------------------------\n\nTITLE: Getting Bounding Box Object in Cytoscape.js\nDESCRIPTION: This function returns a bounding box as a plain JavaScript object with the format { x1, y1, x2, y2, w, h }, where x1/y1 represent the top-left corner, x2/y2 represent the bottom-right corner, and w/h represent width and height.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/core/extent.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{ x1, y1, x2, y2, w, h }\n```\n\n----------------------------------------\n\nTITLE: Applying Circle Layout to Visible Elements in Cytoscape.js\nDESCRIPTION: This example shows how to apply a circle layout to only the visible and non-transparent elements in a Cytoscape.js graph. It filters out invisible and transparent elements before creating and running the circle layout.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/collection/layout.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar layout = cy.elements().not(':invisible, :transparent').layout({\n  name: 'circle'\n});\n\nlayout.run();\n```\n\n----------------------------------------\n\nTITLE: Using synchronous batching in Cytoscape.js\nDESCRIPTION: This example demonstrates how to use the synchronous batching method in Cytoscape.js. It wraps multiple element modifications in a single batch operation, reducing the number of style calculations and redraws.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/core/batch.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncy.batch(function(){\n  cy.$('#j')\n    .data('weight', '70')\n    .addClass('funny')\n    .removeClass('serious')\n  ;\n});\n```\n\n----------------------------------------\n\nTITLE: Removing CSS Class in Cytoscape.js\nDESCRIPTION: Demonstrates removing a CSS class named 'foo' from elements with IDs 'j' and 'e' using a jQuery-style selector. The operation is performed on the Cytoscape instance 'cy' using the removeClass() method.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/collection/removeClass.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncy.$('#j, #e').removeClass('foo');\n```\n\n----------------------------------------\n\nTITLE: Accessing Element Collection Size in Cytoscape.js\nDESCRIPTION: Shows two interchangeable ways to get the number of elements in a Cytoscape.js collection. Developers can either use the 'eles.size()' method or access the 'eles.length' property directly, as both provide the same result.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/collection/size.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\neles.length\n```\n\nLANGUAGE: javascript\nCODE:\n```\neles.size()\n```\n\n----------------------------------------\n\nTITLE: Creating and Controlling Element Animation in Cytoscape.js\nDESCRIPTION: Demonstrates creating an animation for a Cytoscape.js element with style changes, playing the animation, and using promises to chain animation sequences. Shows how to reverse and rewind animations after completion.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/animation/reverse.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar jAni = cy.$('#j').animation({\n  style: {\n    'background-color': 'red',\n    'width': 75\n  },\n  duration: 1000\n});\n\njAni\n  .play() // start\n  .promise('completed').then(function(){ // on next completed\n    jAni\n      .reverse() // switch animation direction\n      .rewind() // optional but makes intent clear\n      .play() // start again\n    ;\n  })\n;\n```\n\n----------------------------------------\n\nTITLE: Using Floyd-Warshall Algorithm in Cytoscape.js\nDESCRIPTION: Example of using the Floyd-Warshall algorithm in Cytoscape.js. The example shows how to compute and select the shortest path between two nodes identified by selectors '#k' and '#g'.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/collection/floydWarshall.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar fw = cy.elements().floydWarshall();\n\nfw.path('#k', '#g').select();\n```\n\n----------------------------------------\n\nTITLE: Using forEach to iterate over nodes in Cytoscape.js\nDESCRIPTION: This example demonstrates how to use the forEach method to iterate over all nodes in a Cytoscape.js graph and print their IDs to the console. The method is called on a collection of nodes returned by cy.nodes().\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/collection/forEach.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// print all the ids of the nodes in the graph\ncy.nodes().forEach(function( ele ){\n  console.log( ele.id() );\n});\n```\n\n----------------------------------------\n\nTITLE: Playing Animation and Handling Completion in Cytoscape.js\nDESCRIPTION: Example showing how to create an animation, play it through its full duration, and handle the completion event using promises. This demonstrates the basic animation flow from start to finish.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/animation/promise.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar jAni = cy.$('#j').animation({\n  style: {\n    height: 60\n  },\n  duration: 1000\n});\n\njAni.play().promise().then(function(){\n  console.log('animation done');\n});\n```\n\n----------------------------------------\n\nTITLE: Selecting and Filtering Nodes in Cytoscape.js (JavaScript)\nDESCRIPTION: This code selects nodes with IDs 'j' and 'e' from a Cytoscape.js graph instance, then checks if all selected nodes have a weight property greater than 50. It demonstrates the use of the '$' selector and the 'allAre' method for filtering elements.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/collection/allAre.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar jAndE = cy.$('#j, #e');\n\nconsole.log( 'j and e all have weight > 50 ? ' + jAndE.allAre('[weight > 50]') );\n```\n\n----------------------------------------\n\nTITLE: Using move() Method in Cytoscape.js\nDESCRIPTION: Shows how to modify the topology of a graph without adding or removing elements using the move() method. This is necessary for changing parent relationships since fields like id, source, target, and parent are normally immutable.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/collection/removeData.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nele.move()\n```\n\n----------------------------------------\n\nTITLE: Panning the Cytoscape.js Viewport in JavaScript\nDESCRIPTION: This example demonstrates how to use the pan() function to move the graph viewport to a specific position at coordinates (100, 100) in rendered pixels. It also shows how to retrieve the current pan position by calling the pan() function without arguments.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/core/pan.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncy.pan({\n  x: 100,\n  y: 100 \n});\n\nconsole.log( cy.pan() ); // prints { x: 100, y: 100 }\n```\n\n----------------------------------------\n\nTITLE: Finding Maximum Value in Cytoscape.js Graph Elements\nDESCRIPTION: Demonstrates how to find the node with the maximum weight value in a Cytoscape.js graph. The max() function returns an object containing both the maximum value and the corresponding element.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/collection/max.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar max = cy.nodes().max(function(){\n  return this.data('weight');\n});\n\nconsole.log( 'max val: ' + max.value + ' for element ' + max.ele.id() );\n```\n\n----------------------------------------\n\nTITLE: Extracting Node Weights with Cytoscape.js map() Function\nDESCRIPTION: This snippet demonstrates how to extract a specific data property ('weight') from all nodes in a Cytoscape.js graph. It uses the map() function on a collection of nodes to transform each element into its weight value, returning an array of all node weights.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/collection/map.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar weights = cy.nodes().map(function( ele ){\n  return ele.data('weight');\n});\n\nconsole.log(weights);\n```\n\n----------------------------------------\n\nTITLE: Exporting Graph as JPEG Image in Cytoscape.js\nDESCRIPTION: This snippet demonstrates how to export a Cytoscape.js graph as a JPEG image and display it in an HTML image tag. The function returns a base64-encoded string representation of the JPEG image that can be used as the src attribute for an img element.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/core/jpg.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar jpg64 = cy.jpg();\n\n// put the png data in an img tag\ndocument.querySelector('#jpg-eg').setAttribute('src', jpg64);\n```\n\n----------------------------------------\n\nTITLE: Using Quotation Marks for String Values in Cytoscape.js Selectors\nDESCRIPTION: Demonstrates the importance of enclosing string values in quotation marks when using selectors. The first line shows an incorrect usage, while the second line shows the correct way to filter nodes by name.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/selectors.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n//cy.filter('node[name = Jerry]'); // this doesn't work\ncy.filter('node[name = \"Jerry\"]'); // but this does\n```\n\n----------------------------------------\n\nTITLE: Selecting Edges Between Nodes in Cytoscape.js\nDESCRIPTION: This code demonstrates how to select edges between two specific nodes in a Cytoscape.js graph. It uses the $() method to select nodes by their IDs and then applies the edgesWith() method to find connecting edges.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/collection/edgesWith.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar j = cy.$('#j');\nvar e = cy.$('#e');\n\nj.edgesWith(e);\n```\n\n----------------------------------------\n\nTITLE: Panning the Graph Viewport in Cytoscape.js\nDESCRIPTION: This example demonstrates how to use the panBy() method to shift the viewport 100 pixels to the right. The method accepts an object with x and y coordinates that specify the translation distance in rendered pixels.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/core/panBy.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncy.panBy({\n  x: 100,\n  y: 0 \n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Edge Arrow Properties in Cytoscape.js\nDESCRIPTION: This snippet demonstrates how to style edge arrows in Cytoscape.js. It includes properties for arrow color, shape, fill, width, and scale.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/style.md#2025-04-23_snippet_21\n\nLANGUAGE: css\nCODE:\n```\n{\n  <pos>-arrow-color: <color>;\n  <pos>-arrow-shape: triangle | triangle-tee | circle-triangle | triangle-cross | triangle-backcurve | vee | tee | square | circle | diamond | chevron | none;\n  <pos>-arrow-fill: filled | hollow;\n  <pos>-arrow-width: match-line | <number>px | <number>% | <number>em;\n  arrow-scale: <number>;\n}\n```\n\n----------------------------------------\n\nTITLE: Finding Minimum Weight Node Using Cytoscape.js min() Function\nDESCRIPTION: This example demonstrates how to use the min() function to find the node with the minimum weight in a Cytoscape.js graph. The function iterates through all nodes and returns both the minimum value and the corresponding element.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/collection/min.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar min = cy.nodes().min(function(){\n  return this.data('weight');\n});\n\nconsole.log( 'min val: ' + min.value + ' for element ' + min.ele.id() );\n```\n\n----------------------------------------\n\nTITLE: Removing a Collection of Elements in Cytoscape.js\nDESCRIPTION: Shows how to remove multiple elements by first creating a collection with a selector and then removing the entire collection. This example removes nodes with weight greater than 50.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/core/remove.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar collection = cy.elements('node[weight > 50]');\ncy.remove( collection );\n```\n\n----------------------------------------\n\nTITLE: Getting Current Style as JSON in Cytoscape.js\nDESCRIPTION: Shows how to retrieve the current stylesheet as a JSON object and serialize it as a string. Useful for saving or transferring the current visual style.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/core/style.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar styleJson = cy.style().json();\nvar serializedJson = JSON.stringify( styleJson );\n```\n\n----------------------------------------\n\nTITLE: Combining Selectors with Logical OR in Cytoscape.js\nDESCRIPTION: Illustrates how to use commas to join selectors, creating a logical OR operation. This example selects node 'j' and all edges that have 'j' as their source.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/selectors.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ncy.elements('node#j, edge[source = \"j\"]');\n```\n\n----------------------------------------\n\nTITLE: Getting Incomers in Cytoscape.js Graph\nDESCRIPTION: Gets all incoming nodes and edges for a node with ID 'j' using the incomers() method. This returns a collection of elements that have edges pointing to the target node.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/collection/incomers.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncy.$('#j').incomers();\n```\n\n----------------------------------------\n\nTITLE: Shifting Element Position in Cytoscape.js\nDESCRIPTION: Demonstrates how to move a selected node/element with ID 'j' by shifting its position by x:10 and y:20 units relative to its current position. Uses the shift() method which is part of Cytoscape.js element manipulation API.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/collection/shift.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncy.$('#j').shift({ x: 10, y: 20 });\n```\n\n----------------------------------------\n\nTITLE: Using Hierholzer's Algorithm in Cytoscape.js\nDESCRIPTION: Example of how to use the hierholzer() function on a Cytoscape.js graph to find an Eulerian trail/cycle, specifying a root node and setting the graph as directed, then selecting the resulting trail.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/collection/hierholzer.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar hierholzer = cy.elements().hierholzer({ root: \"#k\", directed: true });\n\nhierholzer.trail.select();\n```\n\n----------------------------------------\n\nTITLE: Initializing Cytoscape.js with Function Style Format\nDESCRIPTION: Illustrates how to initialize Cytoscape.js using a function format for styling. This method provides the most flexibility and programmatic control over styles.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/style.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ncytoscape({\n  container: document.getElementById('cy'),\n\n  // ...\n\n  style: cytoscape.stylesheet()\n    .selector('node')\n      .style({\n        'background-color': 'blue'\n      })\n\n      // ...\n\n\n  // , ...\n});\n```\n\n----------------------------------------\n\nTITLE: Appending a String Style to Existing Stylesheet in Cytoscape.js\nDESCRIPTION: Demonstrates how to append a CSS-like string to the existing stylesheet. Useful for adding styles using CSS syntax rather than the JavaScript API.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/core/style.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ncy.style()\n  .append('node { background-color: yellow; }')\n  .update();\n```\n\n----------------------------------------\n\nTITLE: Setting Style from a Style String in Cytoscape.js\nDESCRIPTION: Demonstrates how to apply styles from a CSS-like string, typically retrieved from an external file. The update method applies the changes to elements.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/core/style.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ncy.style()\n  .fromString('node { background-color: blue; }')\n\n  .update() // update the elements in the graph with the new style\n;\n```\n\n----------------------------------------\n\nTITLE: Using Function Values for Cytoscape.js Style Properties\nDESCRIPTION: Demonstrates how to use functions as values for style properties in Cytoscape.js. This allows for dynamic, per-element styling based on element data or other factors.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/style.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ncytoscape({\n  container: document.getElementById('cy'),\n\n  // ...\n\n  style: cytoscape.stylesheet()\n    .selector('node')\n      .style({\n        'background-color': function( ele ){ return ele.data('bg') }\n\n        // which works the same as\n\n        // 'background-color': 'data(bg)'\n      })\n\n      // ...\n\n\n  // , ...\n});\n```\n\n----------------------------------------\n\nTITLE: Adding to Existing Stylesheet Using Selectors in Cytoscape.js\nDESCRIPTION: Shows how to add or modify styles in the existing stylesheet using selectors. This method preserves other styles while adding or updating the specified ones.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/core/style.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ncy.style()\n  .selector('node')\n    .style({\n      'background-color': 'yellow'\n    })\n\n  .update() // indicate the end of your new stylesheet so that it can be updated on elements\n;\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Node's Neighborhood in Cytoscape.js\nDESCRIPTION: This example demonstrates how to retrieve the neighborhood of a node with ID 'j'. The neighborhood function returns the elements connected to the selected node, including the connecting edges, providing an open neighborhood by default.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/collection/neighborhood.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncy.$('#j').neighborhood();\n```\n\n----------------------------------------\n\nTITLE: Return Object Structure for Floyd-Warshall Algorithm in JavaScript\nDESCRIPTION: The Floyd-Warshall algorithm returns an object containing two functions: 'path' to compute the shortest path between nodes, and 'distance' to compute the shortest distance between nodes. If no weight function is defined, a constant weight of 1 is used for each edge.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/collection/floydWarshall.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  /* function that computes the shortest path between 2 nodes \n  (either objects or selector strings) */\n  path: function( fromNode, toNode ){ /* impl */ }, \n\n  /* function that computes the shortest distance between 2 nodes \n  (either objects or selector strings) */\n  distance: function( fromNode, toNode ){ /* impl */ }\n}\n```\n\n----------------------------------------\n\nTITLE: Centering the Graph on a Specific Node in Cytoscape.js\nDESCRIPTION: This JavaScript snippet demonstrates how to center the graph viewport on a specific node in Cytoscape.js. It first selects a node with the ID 'j' using the jQuery-style selector syntax, then uses the center() method to center the graph viewport on that node.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/core/center.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar j = cy.$('#j');\ncy.center( j );\n```\n\n----------------------------------------\n\nTITLE: Manipulating Cytoscape.js Viewport with Pan, Zoom, and Reset\nDESCRIPTION: This example demonstrates manipulating the Cytoscape.js viewport through a sequence of operations. It first pans the viewport, then changes the zoom level, and finally resets the viewport to the origin (0, 0) at zoom level 1.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/core/reset.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsetTimeout( function(){\n  cy.pan({ x: 50, y: -100 });\n}, 1000 );\n\nsetTimeout( function(){\n  cy.zoom( 2 );\n}, 2000 );\n\nsetTimeout( function(){\n  cy.reset();\n}, 3000 );\n```\n\n----------------------------------------\n\nTITLE: Memoizing SVG Generation for Cytoscape.js Node Styling\nDESCRIPTION: Shows how to memoize a function that generates SVGs procedurally for node styling in Cytoscape.js. This approach allows for efficient reuse of generated SVGs and their dimensions.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/style.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nvar makeSvg = memoize(function(ele){\n    // impl...\n\n    return { svg: s, width: w, height: h };\n});\n//\n// ...\n//\n// init stylesheet\nvar options = {\n    style: [\n      {\n        selector: 'node',\n        style: {\n          'background-image': function(ele){ return makeSvg(ele).svg; },\n          'width': function(ele){ return makeSvg(ele).width; },\n          'height': function(ele){ return makeSvg(ele).height; }\n        }\n      }\n    ]\n};\n```\n\n----------------------------------------\n\nTITLE: Testing Collection Elements with every() Method in Cytoscape.js\nDESCRIPTION: This snippet demonstrates how to use the every() method to check if all elements in a Cytoscape.js collection satisfy a condition. It selects nodes with IDs 'j' and 'e', then tests if all these elements have a 'weight' data property greater than 50, and logs the result to the console.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/collection/every.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar jAndE = cy.$('#j, #e');\nvar everyHeavierThan50 = jAndE.every(function( ele ){\n  return ele.data('weight') > 50;\n});\n\nconsole.log( 'every heavier than 50 ? ' + everyHeavierThan50 );\n```\n\n----------------------------------------\n\nTITLE: Toggling a CSS Class in Cytoscape.js\nDESCRIPTION: This snippet demonstrates how to toggle a CSS class named 'foo' on multiple selected elements in Cytoscape.js. The method targets elements with IDs 'j' and 'e'.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/collection/toggleClass.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncy.$('#j, #e').toggleClass('foo');\n```\n\n----------------------------------------\n\nTITLE: Using htbc() Method to Find Biconnected Components in Cytoscape.js\nDESCRIPTION: Demonstrates how to use the htbc() method on a collection of elements in Cytoscape.js and then select the first identified biconnected component.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/collection/hopcroftTarjanBiconnected.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar ht = cy.elements().htbc();\n\nht.components[0].select();\n```\n\n----------------------------------------\n\nTITLE: Attaching Callback to onRender Event in Cytoscape.js\nDESCRIPTION: This snippet demonstrates how to use the onRender method in Cytoscape.js to execute a callback function when a frame is rendered. The callback function logs a message to the console each time a frame is rendered.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/core/onRender.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncy.onRender(function(){\n  console.log('frame rendered');\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Viewport in Cytoscape.js\nDESCRIPTION: This code snippet demonstrates how to use the viewport function in Cytoscape.js to set the zoom level and pan position of the graph view. The zoom is set to 2x magnification, and the pan position is set to 100 pixels on both the x and y axes.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/core/viewport.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncy.viewport({\n  zoom: 2,\n  pan: { x: 100, y: 100 }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating and Running a Random Layout in Cytoscape.js\nDESCRIPTION: This snippet shows how to create a random layout, set up a promise-based event listener for the 'layoutstop' event, and run the layout. It demonstrates the basic workflow for using layouts in Cytoscape.js.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/layout/promiseOn.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar layout = cy.layout({ name: 'random' });\n\nlayout.pon('layoutstop').then(function( event ){\n  console.log('layoutstop promise fulfilled');\n});\n\nlayout.run();\n```\n\n----------------------------------------\n\nTITLE: Performing Markov Clustering on Graph Elements in Cytoscape.js\nDESCRIPTION: This example demonstrates how to apply the Markov Clustering algorithm to all elements in a Cytoscape.js graph. The function uses the 'closeness' edge data attribute to influence the clustering behavior and returns an array of collections where each collection represents a cluster.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/collection/markovClustering.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar clusters = cy.elements().markovClustering({\n  attributes: [\n    function( edge ){ return edge.data('closeness'); }\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Forcing a CSS Class On in Cytoscape.js\nDESCRIPTION: This example shows how to force a CSS class to be added to elements, regardless of their current state. The second parameter 'true' ensures the class is added to the selected elements.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/collection/toggleClass.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncy.$('#j, #e').toggleClass('foo', true);\n```\n\n----------------------------------------\n\nTITLE: Calculating Closeness Centrality for a Node in Cytoscape.js\nDESCRIPTION: This snippet demonstrates how to calculate the closeness centrality for a specific node in a Cytoscape.js graph. The cc() function is called on the entire graph collection, with the root parameter specifying the target node by its selector.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/collection/closenessCentrality.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log( 'cc of j: ' + cy.$().cc({ root: '#j' }) );\n```\n\n----------------------------------------\n\nTITLE: Degree Centrality Function Return Format for Undirected Graphs in JavaScript\nDESCRIPTION: Object structure returned by degree centrality function when options.directed is false. Provides a degree function that calculates the normalized degree centrality of a specified node.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/collection/degreeCentralityNormalized.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  /* the normalised degree centrality of the specified node */\n  degree: function( node ){ /* impl */ }\n}\n```\n\n----------------------------------------\n\nTITLE: Performing Union Operation with Selectors in Cytoscape.js\nDESCRIPTION: This snippet demonstrates how to use the union method with selectors in Cytoscape.js. It selects a node by ID and then performs a union operation with another node specified by a selector.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/collection/union.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncy.$('#j').union('#e');\n```\n\n----------------------------------------\n\nTITLE: Zooming to a specific level about a rendered position in Cytoscape.js\nDESCRIPTION: This snippet demonstrates how to zoom to a specific level about a rendered position (on-screen coordinates). The zoom level is set to 2.0 and centered at the rendered position of x:100, y:100.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/core/zoom.md#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\ncy.zoom({\n  level: 2.0, // the zoom level\n  renderedPosition: { x: 100, y: 100 }\n});\n```\n\n----------------------------------------\n\nTITLE: Animating Viewport Transitions with Fit in Cytoscape.js\nDESCRIPTION: This code snippet demonstrates how to animate the viewport to fit specific elements in sequence. It first animates to fit the element with ID 'j', then after a 1000ms delay, it animates to fit the element with ID 'e'. The animation methods are chained for sequential execution.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/core/delay.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncy\n  .animate({\n    fit: { eles: '#j' }\n  })\n\n  .delay(1000)\n\n  .animate({\n    fit: { eles: '#e' }\n  })\n;\n```\n\n----------------------------------------\n\nTITLE: Querying and Comparing Node Collections in Cytoscape.js\nDESCRIPTION: This code snippet demonstrates how to select nodes in a Cytoscape.js graph based on weight criteria and specific IDs, and then compare the resulting collections using the 'same' method. It selects nodes with weight greater than 60 and nodes with IDs 'j', 'g', and 'k', then checks if the collections are the same.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/collection/same.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar heavies = cy.$('node[weight > 60]');\nvar guys = cy.$('#j, #g, #k');\n\nconsole.log( 'same ? ' + heavies.same(guys) );\n```\n\n----------------------------------------\n\nTITLE: Forcing a CSS Class Off in Cytoscape.js\nDESCRIPTION: This snippet demonstrates how to force a CSS class to be removed from elements. The second parameter 'false' ensures the class is removed from the selected elements.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/collection/toggleClass.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ncy.$('#j, #e').toggleClass('foo', false);\n```\n\n----------------------------------------\n\nTITLE: Hierholzer's Algorithm Return Structure in Cytoscape.js\nDESCRIPTION: Shows the structure of the object returned by the hierholzer() function, which includes a boolean indicating if an Eulerian trail/cycle was found and the trail itself as an ordered collection of elements.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/collection/hierholzer.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  found, /* true or false */\n  trail /* Ordered collection of elements in the Eulerian trail or cycle, if found */\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Node Properties with Selectors in Cytoscape.js\nDESCRIPTION: This code selects a node with ID 'j' from the Cytoscape graph instance and tests whether it has a weight attribute greater than 50. The is() method is used to check if the element matches the given selector expression.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/collection/is.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar j = cy.$('#j');\n\nconsole.log( 'j has weight > 50 ? ' + j.is('[weight > 50]') );\n```\n\n----------------------------------------\n\nTITLE: Zooming to a specific level about a model position in Cytoscape.js\nDESCRIPTION: This snippet shows how to zoom to a specific level about a model position (graph coordinates). The zoom level is set to 2.0 and centered at the model position of x:0, y:0.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/core/zoom.md#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\ncy.zoom({\n  level: 2.0, // the zoom level\n  position: { x: 0, y: 0 }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Bezier Edges in Cytoscape.js\nDESCRIPTION: Properties for automatic, bundled bezier edges. These control the curvature, spacing, and positioning of bezier edges.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/style.md#2025-04-23_snippet_13\n\nLANGUAGE: css\nCODE:\n```\ncurve-style: bezier;\ncontrol-point-step-size: 20;\ncontrol-point-distance: 100;\ncontrol-point-weight: 0.5;\nedge-distances: intersection;\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Layout in Cytoscape.js\nDESCRIPTION: This snippet demonstrates how to create a new, developer-accessible layout in Cytoscape.js using the cy.layout() function. This allows for more complex behavior than the primary run-one-layout-at-a-time use case.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/layout/manipulation.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncy.layout()\n```\n\n----------------------------------------\n\nTITLE: Animating Node Background Color with Cytoscape.js\nDESCRIPTION: Demonstrates how to animate node background color property over 5 seconds, handle animation completion, and stop the animation midway. The example includes logging animation states and using setTimeout to stop the animation after 2.5 seconds.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/collection/stop.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncy.nodes().animate({\n  style: { 'background-color': 'cyan' }\n}, {\n  duration: 5000,\n  complete: function(){\n    console.log('Animation complete');\n  }\n});\n\nconsole.log('Animating nodes...');\n\nsetTimeout(function(){\n  console.log('Stopping nodes animation');\n  cy.nodes().stop();\n}, 2500);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Outgoers of a Node in Cytoscape.js\nDESCRIPTION: This snippet demonstrates how to get the outgoing edges and nodes (outgoers) of a specific node in a Cytoscape.js graph. It uses the '$' selector to find the node with ID 'j' and then calls the 'outgoers()' method on it.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/collection/outgoers.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncy.$('#j').outgoers();\n```\n\n----------------------------------------\n\nTITLE: Return Structure of tarjanStronglyConnected()\nDESCRIPTION: Shows the object structure returned by the tarjanStronglyConnected() function, containing cut edges and component collections.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/collection/tarjanStronglyConnected.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  cut, /* Collection of edges which adjoin pairs of strongly connected components */\n  components /* Array of collections corresponding to each strongly connected component */\n}\n```\n\n----------------------------------------\n\nTITLE: Using some() Method with Cytoscape.js Collections\nDESCRIPTION: Demonstrates how to use the some() method to check if any elements in a collection have a weight property greater than 50. The example selects nodes with IDs 'j' and 'e' and tests their weight values.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/collection/some.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar jAndE = cy.$('#j, #e');\nvar someHeavierThan50 = jAndE.some(function( ele ){\n  return ele.data('weight') > 50;\n});\n\nconsole.log( 'some heavier than 50 ? ' + someHeavierThan50 );\n```\n\n----------------------------------------\n\nTITLE: Zooming about a node position in Cytoscape.js\nDESCRIPTION: This example shows how to zoom to a specific level centered on a node's position. The zoom level is set to 1.5 and uses the position of the node with ID 'j' as the focal point.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/core/zoom.md#2025-04-23_snippet_5\n\nLANGUAGE: js\nCODE:\n```\ncy.zoom({\n  level: 1.5,\n  position: cy.getElementById('j').position()\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Taxi Edge Properties in Cytoscape.js\nDESCRIPTION: This snippet outlines the CSS-like properties used to style taxi edges in Cytoscape.js. It includes options for direction, turn distance, and edge distances.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/style.md#2025-04-23_snippet_19\n\nLANGUAGE: css\nCODE:\n```\n{\n  curve-style: taxi;\n  taxi-direction: auto | vertical | downward | upward | horizontal | rightward | leftward;\n  taxi-turn: 20px | 50%;\n  taxi-turn-min-distance: 5px;\n  edge-distances: intersection | node-position;\n}\n```\n\n----------------------------------------\n\nTITLE: Using difference Method with Collection Objects in Cytoscape.js\nDESCRIPTION: This snippet demonstrates how to use the difference method with a collection object. It first obtains a reference to a node with ID 'j' and a collection of all nodes, then calculates the difference between the nodes collection and the single node.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/collection/difference.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar j = cy.$('#j');\nvar nodes = cy.nodes();\n\nnodes.difference(j);\n```\n\n----------------------------------------\n\nTITLE: Creating and Controlling Element Animation in Cytoscape.js\nDESCRIPTION: This snippet demonstrates how to create an animation for a Cytoscape.js element, play it, and pause it after a delay. It changes the background color and width of the element over a duration of 1000 milliseconds.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/animation/pause.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar j = cy.$('#j');\nvar jAni = j.animation({\n  style: {\n    'background-color': 'red',\n    'width': 75\n  },\n  duration: 1000\n});\n\njAni.play();\n\n// pause about midway\nsetTimeout(function(){\n  jAni.pause();\n}, 500);\n```\n\n----------------------------------------\n\nTITLE: Accessing Elements in Cytoscape.js Collections using JavaScript\nDESCRIPTION: This snippet demonstrates two methods for accessing elements in a Cytoscape.js collection: using square bracket notation and the 'eq' method. The square bracket notation (eles[i]) is highlighted as a more performant alternative to the 'eq' method (eles.eq(i)).\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/collection/eq.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\neles[i]\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\neles.eq(i)\n```\n\n----------------------------------------\n\nTITLE: Calling resize() function in Cytoscape.js\nDESCRIPTION: When a graph's dimensions or position changes, calling cy.resize() ensures the graph resizes and redraws itself correctly. This is necessary when modifying the container's style, changing its position in the DOM, or when tapping appears offset.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/core/resize.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncy.resize()\n```\n\n----------------------------------------\n\nTITLE: Configuring Haystack Edges in Cytoscape.js\nDESCRIPTION: Describes the properties and behavior of haystack edges, which are optimized for performance in graphs with many parallel edges. Includes the haystack-radius property for positioning edges on connected nodes.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/style.md#2025-04-23_snippet_16\n\nLANGUAGE: markdown\nCODE:\n```\n* **`haystack-radius`** : A value between 0 and 1 inclusive that indicates the relative radius used to position haystack edges on their connected nodes.  The outside of the node is at 1, and the centre of the node is at 0.  For simple graphs, a radius of 0 makes sense.\n```\n\n----------------------------------------\n\nTITLE: Using Degree Centrality Function in Cytoscape.js\nDESCRIPTION: Example demonstrating how to use the degree centrality network (dcn) function in Cytoscape.js. Shows how to get the dcn object and use it to calculate the degree centrality of a specific node.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/collection/degreeCentralityNormalized.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar dcn = cy.$().dcn();\nconsole.log( 'dcn of j: ' + dcn.degree('#j') );\n```\n\n----------------------------------------\n\nTITLE: Enabling Box Selection in Cytoscape.js\nDESCRIPTION: Enables the box selection functionality in a Cytoscape.js instance. When enabled, users can click and drag to create a selection box that selects multiple graph elements.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/core/boxSelectionEnabled.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncy.boxSelectionEnabled( true );\n```\n\n----------------------------------------\n\nTITLE: Selecting and Finding Connected Nodes in Cytoscape.js\nDESCRIPTION: Demonstrates selecting a node with ID 'je' using jQuery-style selector and then finding all nodes connected to it. This is a common operation when traversing graph structures in Cytoscape.js.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/collection/connectedNodes.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar je = cy.$('#je');\n\nje.connectedNodes();\n```\n\n----------------------------------------\n\nTITLE: Sorting and Animating Cytoscape.js Nodes by Weight\nDESCRIPTION: This code sorts a collection of Cytoscape.js nodes by their weight data attribute in ascending order. It then applies sequential animations to each node with a delay based on its position in the sorted collection, visually highlighting the nodes with a green border to demonstrate the sorting order.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/collection/sort.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar nodes = cy.nodes().sort(function( a, b ){\n  return a.data('weight') - b.data('weight');\n});\n\n// show order via animations\nvar duration = 1000;\nnodes.removeStyle().forEach(function( node, i ){\n  node.delay( i * duration ).animate({\n    style: {\n      'border-width': 4,\n      'border-color': 'green'\n    }\n  }, { duration: duration });\n});\n\nconsole.log('Animating nodes to show sorted order');\n```\n\n----------------------------------------\n\nTITLE: Listening to Node-Specific Events in Cytoscape.js\nDESCRIPTION: This snippet demonstrates how to listen for tap events on nodes in a Cytoscape.js graph. It uses the 'on' method to attach an event listener to nodes, logging the ID of the tapped node.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/core/on.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncy.on('tap', 'node', function(evt){\n  var node = evt.target;\n  console.log( 'tapped ' + node.id() );\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Layout Position Options in Cytoscape.js\nDESCRIPTION: Configuration object for the layoutPositions() function that defines animation, viewport, and transformation settings for graph layouts. Contains options for controlling animation duration, easing, filtering, viewport fitting, padding, panning, zooming, and node spacing.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/collection/layoutPositions.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar options = {\n  animate: false, // whether to animate changes to the layout\n  animationDuration: 500, // duration of animation in ms, if enabled\n  animationEasing: undefined, // easing of animation, if enabled\n  animateFilter: function ( node, i ){ return true; }, // a function that determines whether the node should be animated.\n    // All nodes animated by default for `animate:true`.  Non-animated nodes are positioned immediately when the layout starts.\n  eles: someCollection, // collection of elements involved in the layout; set by cy.layout() or eles.layout()\n  fit: true, // whether to fit the viewport to the graph\n  padding: 30, // padding to leave between graph and viewport\n  pan: undefined, // pan the graph to the provided position, given as { x, y }\n  ready: undefined, // callback for the layoutready event\n  stop: undefined, // callback for the layoutstop event\n  spacingFactor: 1, // a positive value which adjusts spacing between nodes (>1 means greater than usual spacing)\n  transform: function (node, position ){ return position; } // transform a given node position. Useful for changing flow direction in discrete layouts\n  zoom: undefined // zoom level as a positive number to set after animation\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Array Elements and Object Properties in Cytoscape.js Selectors\nDESCRIPTION: Demonstrates how to use dot-notation in selectors to access array elements and object properties. The first example selects nodes where the first element of the 'labels' array is 'Person', and the second selects nodes where the 'name' object has a 'first' property equal to 'Jerry'.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/selectors.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ncy.elements('node[labels.0 = \"Person\"]'); // labels: [\"Person\"]\ncy.elements('node[name.first = \"Jerry\"]'); // { name: { first: \"Jerry\", last: \"Foo\" } }\n```\n\n----------------------------------------\n\nTITLE: Enabling User Panning in Cytoscape.js\nDESCRIPTION: This snippet demonstrates how to enable user panning in Cytoscape.js. It uses the userPanningEnabled() method with a boolean parameter set to true.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/core/userPanningEnabled.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncy.userPanningEnabled( true );\n```\n\n----------------------------------------\n\nTITLE: Using Betweenness Centrality Function in Cytoscape.js\nDESCRIPTION: Example demonstrating how to calculate betweenness centrality for a graph and then retrieve the centrality value for a specific node. The function is called on a collection of elements and then the betweenness value is retrieved for node with ID 'j'.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/collection/betweennessCentrality.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar bc = cy.$().bc();\nconsole.log( 'bc of j: ' + bc.betweenness('#j') );\n```\n\n----------------------------------------\n\nTITLE: Handling Tap Events with Promises in Cytoscape.js\nDESCRIPTION: This code demonstrates how to use the promise-based event handler 'pon()' to register a callback for a tap event on a Cytoscape.js graph instance. When the tap event occurs, the promise is fulfilled and the callback logs a message to the console.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/core/promiseOn.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncy.pon('tap').then(function( event ){\n  console.log('tap promise fulfilled');\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Animation Progress in Cytoscape.js (JavaScript)\nDESCRIPTION: This snippet demonstrates how to create an animation for a Cytoscape.js element and set its progress to a specific point. It creates an animation that changes the background color and width of an element with ID 'j', then sets the animation progress to 50% before applying it.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/animation/apply.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar jAni = cy.$('#j').animation({\n  style: {\n    'background-color': 'red',\n    'width': 75\n  },\n  duration: 1000\n});\n\njAni.progress(0.5).apply();\n```\n\n----------------------------------------\n\nTITLE: Creating a Cytoscape.js Renderer Extension\nDESCRIPTION: This snippet illustrates how to create a renderer extension for Cytoscape.js. It shows the structure for defining a renderer, including methods for drawing nodes and edges, and handling various rendering scenarios.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/demos.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ncytoscape('renderer', 'fooRenderer', function( impl ){\n  return {\n    name: 'foo',\n    \n    drawNode: function( context, node, drawOverlayInstead ){\n      // do drawing...\n    },\n    \n    drawEdge: function( context, edge, drawOverlayInstead ){\n      // do drawing...\n    },\n    \n    // ...other lifecycle functions...\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling Autounselectify in Cytoscape.js\nDESCRIPTION: This code snippet demonstrates how to enable the autounselectify feature in Cytoscape.js. When enabled, it prevents elements from being unselected by the user.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/core/autounselectify.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncy.autounselectify( true );\n```\n\n----------------------------------------\n\nTITLE: Managing Temporary Data with scratch() in Cytoscape.js\nDESCRIPTION: Demonstrates three different approaches to using the scratch() function for storing temporary data: accessing the entire scratchpad directly (not recommended), setting namespaced data (recommended), and retrieving previously set namespaced data. Uses '_foo' as a namespaced example to avoid collisions with extensions.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/collection/scratch.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar j = cy.$('#j');\n\n// entire scratchpad:\n// be careful, since you could clobber over someone else's namespace or forget to use one at all!\nvar fooScratch = j.scratch()._foo = {}; \n// ... now you can modify fooScratch all you want\n\n// set namespaced scratchpad to ele:\n// safer, recommended\nvar fooScratch = j.scratch('_foo', {});\n// ... now you can modify fooScratch all you want\n\n// get namespaced scratchpad from ele (assumes set before)\nvar fooScratch = j.scratch('_foo');\n// ... now you can modify fooScratch all you want\n```\n\n----------------------------------------\n\nTITLE: Returned Object Structure from Betweenness Centrality Function in Cytoscape.js\nDESCRIPTION: Details the structure of the object returned by the betweenness centrality function in Cytoscape.js. It includes methods to retrieve both raw and normalized betweenness centrality values for specified nodes in the graph.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/collection/betweennessCentrality.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  /* returns the betweenness centrality of the specified node */\n  betweenness: function( node ){ /* impl */ },\n\n  /* returns the normalised betweenness centrality of the specified node */\n  betweennessNormalized: function( node ){ /* impl */ }\n  /* alias : betweennessNormalised() */\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Elements Using Selector in Cytoscape.js\nDESCRIPTION: Demonstrates direct element removal using a selector string. This method simplifies the process by combining selection and removal in one step, removing nodes with weight greater than 50.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/core/remove.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ncy.remove('node[weight > 50]'); // remove nodes with weight greater than 50\n```\n\n----------------------------------------\n\nTITLE: Using Karger-Stein Algorithm in Cytoscape.js\nDESCRIPTION: Example showing how to execute the Karger-Stein algorithm on a Cytoscape.js graph and select the resulting cut edges.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/collection/kargerStein.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar ks = cy.elements().kargerStein();\n\nks.cut.select();\n```\n\n----------------------------------------\n\nTITLE: Simple zoom to factor 2 in Cytoscape.js\nDESCRIPTION: This example demonstrates how to simply zoom in to a factor of 2 without specifying a focal point. The current viewport center will be maintained.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/core/zoom.md#2025-04-23_snippet_2\n\nLANGUAGE: js\nCODE:\n```\ncy.zoom(2);\n```\n\n----------------------------------------\n\nTITLE: Disabling Autounselectify in Cytoscape.js\nDESCRIPTION: This code snippet shows how to disable the autounselectify feature in Cytoscape.js. When disabled, it allows elements to be unselected by the user.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/core/autounselectify.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncy.autounselectify( false );\n```\n\n----------------------------------------\n\nTITLE: Executing Kruskal's Algorithm on Cytoscape.js Elements\nDESCRIPTION: This code snippet demonstrates how to run Kruskal's algorithm on a subset of graph elements in Cytoscape.js. The function operates on the calling collection, which represents a subset of the graph.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/collection/kruskal.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncy.elements().kruskal();\n```\n\n----------------------------------------\n\nTITLE: Batching Element Modifications in Cytoscape.js\nDESCRIPTION: Shows how to use the batch() method to efficiently modify multiple elements at once in Cytoscape.js, improving performance for bulk operations.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/performance.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncy.batch()\n```\n\n----------------------------------------\n\nTITLE: Merging Elements into a Collection in Cytoscape.js\nDESCRIPTION: Creates an empty collection using cy.collection() and then merges specific elements into it using element references. This demonstrates how to safely build a custom collection of nodes.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/collection/merge.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar col = cy.collection(); // new, empty collection\nvar j = cy.$('#j');\nvar e = cy.$('#e');\n\ncol.merge( j ).merge( e );\n```\n\n----------------------------------------\n\nTITLE: Defining Label Text Properties in Cytoscape.js\nDESCRIPTION: These properties define the text content for element labels, including main labels and edge-specific labels.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/style.md#2025-04-23_snippet_25\n\nLANGUAGE: markdown\nCODE:\n```\n * **`label`** : The text to display for an element's label ([demo](demos/labels)).\n * **`source-label`** : The text to display for an edge's source label.\n * **`target-label`** : The text to display for an edge's target label.\n```\n\n----------------------------------------\n\nTITLE: Using unselectify() Method in Cytoscape.js\nDESCRIPTION: This example demonstrates how to make a specific node non-selectable in Cytoscape.js. The code selects a node with the ID 'j' using the jQuery-style selector and then calls the unselectify() method to prevent it from being selected by the user.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/collection/unselectify.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncy.$('#j').unselectify();\n```\n\n----------------------------------------\n\nTITLE: Retrieving JSON Representation of Elements in Cytoscape.js\nDESCRIPTION: This example demonstrates how to retrieve the plain JSON representation of all elements in a Cytoscape.js graph using the jsons() function. The function is called on a collection of elements and returns the same format used at initialization.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/collection/jsons.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log( cy.elements().jsons() );\n```\n\n----------------------------------------\n\nTITLE: Return Object Structure for Fuzzy C-Means Clustering\nDESCRIPTION: Demonstrates the structure of the object returned by the fuzzy c-means clustering function. The object contains clusters array and a two-dimensional degreeOfMembership matrix showing the relationship between nodes and clusters.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/collection/fuzzyCMeans.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  // The resultant clusters\n  clusters: [ /* cluster0, cluster1, ... */ ],\n\n  // A two-dimensional array containing a partition matrix\n  // degreeOfMembership[i][j] indicates the degree to which nodes[i] belongs to clusters[j]\n  degreeOfMembership: [ /* row0, row1, ... */ ]\n}\n```\n\n----------------------------------------\n\nTITLE: Efficient Class Animation in Cytoscape.js\nDESCRIPTION: Demonstrates the use of flashClass() as a more performant alternative to smooth animations for temporarily applying styles to elements in Cytoscape.js.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/performance.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\neles.flashClass()\n```\n\n----------------------------------------\n\nTITLE: Using contains() Method in Cytoscape.js\nDESCRIPTION: This example demonstrates how to use the contains() method in Cytoscape.js to check if one collection contains another collection. In this case, it checks if a collection containing nodes with IDs 'j' and 'e' contains the collection with just the node with ID 'j'.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/collection/contains.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncy.$('#j, #e').contains( cy.$('#j') ); // true\n```\n\n----------------------------------------\n\nTITLE: Configuring Edge Endpoints in Cytoscape.js\nDESCRIPTION: Defines options for 'source-endpoint' and 'target-endpoint' properties, including special named values, numeric specifications, and angle values. Also covers distance properties for shifting endpoints.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/style.md#2025-04-23_snippet_22\n\nLANGUAGE: markdown\nCODE:\n```\n- `outside-to-node` (default) indicates that the edge should be placed automatically to point towards the node's position and be placed on the outside of the node's shape.\n- `outside-to-node-or-label` uses the same rules as `outside-to-node` with the added rule that if the node's label would intersect the edge before the node's body, then the edge points to that intersection point.  This avoids overlap of edges with node labels.\n- `inside-to-node` indicates the edge should go all the way inside the node and point directly on the node's position.  This is the same as specifying `0 0`.\n- `outside-to-line` indicates the edge endpoint should be placed outside the node's shape where it would intersect the imaginary line from the source position to the target position.  This value is useful for automatically  avoiding invalid cases for bezier edges, especially with compound nodes.\n- `outside-to-line-or-label` uses the same rules as `outside-to-line` with the added rule that if the node's label would intersect the imaginary line before the node's body, then the edge points to that intersection point.  This avoids overlap of edges with node labels.\n```\n\n----------------------------------------\n\nTITLE: Applying Grabify Extension to Cytoscape.js Element in JavaScript\nDESCRIPTION: This snippet demonstrates how to apply the 'grabify' extension to a specific element in a Cytoscape.js graph. The element is selected using its ID 'j' and then the 'grabify' method is called on it.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/collection/grabify.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncy.$('#j').grabify();\n```\n\n----------------------------------------\n\nTITLE: Using difference Method with a Selector in Cytoscape.js\nDESCRIPTION: This snippet shows a more concise approach to calculate the difference by directly passing a selector string to the difference method, removing the node with ID 'j' from the collection of all nodes.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/collection/difference.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncy.nodes().difference('#j');\n```\n\n----------------------------------------\n\nTITLE: Selecting an Element by ID in Cytoscape.js\nDESCRIPTION: This code snippet demonstrates how to select a specific element in a Cytoscape.js graph using its ID. The '$' function is used to query elements, and the 'select()' method is called to select the element.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/collection/select.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncy.$('#j').select();\n```\n\n----------------------------------------\n\nTITLE: PageRank Function Return Object Structure in Cytoscape.js\nDESCRIPTION: Describes the structure of the object returned by the PageRank function in Cytoscape.js. It contains a rank function that computes the PageRank value of a specified node, which can be passed as either an object or a selector string.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/collection/pageRank.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  /* function that computes the rank of a given node (either object or selector string) */\n  rank: function( node ){ /* impl */ } \n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Element Drawing Order in Cytoscape.js\nDESCRIPTION: Details the 'z-compound-depth' and 'z-index-compare' properties for fine-tuning the drawing order of elements in Cytoscape.js, especially in compound graphs.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/style.md#2025-04-23_snippet_24\n\nLANGUAGE: markdown\nCODE:\n```\n* **`z-compound-depth`** : May be `bottom`, `orphan`, `auto` (default), or `top`.  The first drawn is `bottom`, the second is `orphan`, which is the same depth as the root of the compound graph, followed by the default of `auto` which draws in depth order from root to leaves of the compound graph.  The last drawn is `top`.  It does not usually make sense to set this value for non-compound graphs.\n* **`z-index-compare`**: May be `auto` (default) or `manual`.  The `auto` setting draws edges under nodes, whereas `manual` ignores this convention and draws solely based on the `z-index` value.\n* **`z-index`** : An integer value that affects the relative draw order of elements.  In general, an element with a higher `z-index` will be drawn on top of an element with a lower `z-index` within the same depth.\n```\n\n----------------------------------------\n\nTITLE: Using unpanify() Method in Cytoscape.js\nDESCRIPTION: This snippet demonstrates how to use the unpanify() method to remove an element with ID 'j' from panning association in Cytoscape.js. The method is called on a selected element retrieved using the jQuery-style selector.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/collection/unpanify.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncy.$('#j').unpanify();\n```\n\n----------------------------------------\n\nTITLE: Performing Union Operation with Collections in Cytoscape.js\nDESCRIPTION: This snippet shows how to use the union method to combine two Cytoscape.js collections. It selects two nodes by their IDs and then performs a union operation on them.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/collection/union.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar j = cy.$('#j');\nvar e = cy.$('#e');\n\nj.union(e);\n```\n\n----------------------------------------\n\nTITLE: Using absoluteComplement Method with Cytoscape.js in JavaScript\nDESCRIPTION: This snippet demonstrates how to call the absoluteComplement() method on a selected element in a Cytoscape.js graph. The method is invoked on a node with ID 'j' selected using the '$' selector function.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/collection/absoluteComplement.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncy.$('#j').absoluteComplement();\n```\n\n----------------------------------------\n\nTITLE: Selecting Element by ID in Cytoscape.js using $id alias\nDESCRIPTION: This snippet shows a shorter alias for selecting an element with the ID 'j' in Cytoscape.js. The $id method is a more concise way to achieve the same result as getElementById.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/core/getElementById.md#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\ncy.$id('j');\n```\n\n----------------------------------------\n\nTITLE: Using tarjanStronglyConnected() in Cytoscape.js\nDESCRIPTION: Example demonstrating how to call the tarjanStronglyConnected() method on a collection of elements and select the first component.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/collection/tarjanStronglyConnected.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar tsc = cy.elements().tarjanStronglyConnected();\n\ntsc.components[0].select();\n```\n\n----------------------------------------\n\nTITLE: Configuring Label Alignment in Cytoscape.js\nDESCRIPTION: These properties control the alignment of labels for nodes and edges, including horizontal and vertical alignment, and offsets for edge labels.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/style.md#2025-04-23_snippet_28\n\nLANGUAGE: markdown\nCODE:\n```\n * **`text-halign`** : The vertical alignment of a node's label; may have value `left`, `center`, or `right`.\n * **`text-valign`** : The vertical alignment of a node's label; may have value `top`, `center`, or `bottom`.\n\n * **`source-text-offset`** : For the source label of an edge, how far from the source node the label should be placed.\n * **`target-text-offset`** : For the target label of an edge, how far from the target node the label should be placed.\n```\n\n----------------------------------------\n\nTITLE: Listening to All Tap Events in Cytoscape.js\nDESCRIPTION: This snippet shows how to listen for all tap events in a Cytoscape.js graph, including taps on the background and on elements. It distinguishes between taps on the core (background) and taps on graph elements.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/core/on.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncy.on('tap', function(event){\n  // target holds a reference to the originator\n  // of the event (core or element)\n  var evtTarget = event.target;\n\n  if( evtTarget === cy ){\n    console.log('tap on background');\n  } else {\n    console.log('tap on some element');\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Selecting and Accessing Element Target in Cytoscape.js (JavaScript)\nDESCRIPTION: This code demonstrates how to select a specific element in a Cytoscape.js graph using its ID and then access its target node. The '$' function is used for element selection, and the 'target()' method retrieves the target of an edge.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/collection/target.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar je = cy.$('#je');\n\nje.target();\n```\n\n----------------------------------------\n\nTITLE: Filtering Cytoscape Nodes with Function\nDESCRIPTION: Shows how to filter nodes using a callback function that evaluates each element. The function checks if the node's weight data property is greater than 50.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/collection/filter.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncy.nodes().filter(function( ele ){\n  return ele.data('weight') > 50;\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Text Wrapping in Cytoscape.js\nDESCRIPTION: These properties control how text is wrapped, including wrapping style, maximum width, overflow handling, justification, and line height.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/style.md#2025-04-23_snippet_27\n\nLANGUAGE: markdown\nCODE:\n```\n * **`text-wrap`** : A wrapping style to apply to the label text; may be `none` for no wrapping (including manual newlines: `\\n`), `wrap` for manual and/or autowrapping, or `ellipsis` to truncate the string and append '...' based on `text-max-width`.  Note that with `wrap`, text will always wrap on newlines (`\\n`) and text may wrap on any breakable whitespace character --- including [zero-width spaces](https://en.wikipedia.org/wiki/Zero-width_space) (`\\u200b`).\n * **`text-max-width`** : The maximum width for wrapped text, applied when `text-wrap` is set to `wrap` or `ellipsis`.  For only manual newlines (i.e. `\\n`), set a very large value like `1000px` such that only your newline characters would apply.\n * **`text-overflow-wrap`** : The characters that may be used for possible wrapping locations when a line overflows `text-max-width`; may be `whitespace` (default) or `anywhere`.  Note that `anywhere` is suited to [CJK](https://en.wikipedia.org/wiki/CJK_characters), where the characters are in a grid and no whitespace exists.  Using `anywhere` with text in the Latin alphabet, for example, will split words at arbitrary locations.\n * **`text-justification`** : The justification of multiline (wrapped) labels; may be `left`, `center`, `right`, or `auto` (default).  The `auto` value makes it so that a node's label is justified along the node --- e.g. a label on the right side of a node is left justified.\n * **`line-height`** : The line height of multiline text, as a relative, unitless value.  It specifies the vertical spacing between each line.  With value `1` (default), the lines are stacked directly on top of one another with no additional whitespace between them.  With value `2`, for example, there is whitespace between each line equal to the visible height of a line of text.\n```\n\n----------------------------------------\n\nTITLE: Configuring Text Rotation in Cytoscape.js\nDESCRIPTION: These properties control the rotation of label text for both nodes and edges, including special values for automatic rotation.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/style.md#2025-04-23_snippet_30\n\nLANGUAGE: markdown\nCODE:\n```\n * **`text-rotation`** : A rotation angle that is applied to the label.\n  * Rotations are clockwise.\n  * For edges, the special value `autorotate` can be used to align the label to the edge.\n  * For nodes, the label is rotated along its anchor point on the node, so a label margin may help for some usecases.\n  * The special value `none` can be used to denote `0deg`.\n  * Rotations works best with left-to-right text.\n * **`source-text-rotation`** : (For the source label of an edge.)\n * **`target-text-rotation`** : (For the target label of an edge.)\n```\n\n----------------------------------------\n\nTITLE: Registering and Unregistering Render Event Handlers in Cytoscape.js\nDESCRIPTION: This snippet demonstrates how to use onRender() to attach a callback function that runs whenever Cytoscape renders a frame, and how to remove that handler using offRender(). The handler logs 'frame rendered' to the console each time the graph is rendered.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/core/offRender.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar handler;\ncy.onRender(handler = function(){\n  console.log('frame rendered');\n});\n\ncy.offRender( handler );\n```\n\n----------------------------------------\n\nTITLE: Replacing Classes on Nodes in Cytoscape.js\nDESCRIPTION: This snippet shows how to replace existing classes on nodes with a new class in a Cytoscape.js graph. It demonstrates using both an array with a single element and a string to set the new class.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/collection/classes.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncy.nodes().classes(['foo']); // array\ncy.nodes().classes('foo'); // space-separated string\n```\n\n----------------------------------------\n\nTITLE: Binding and Triggering Tap Events in Cytoscape.js\nDESCRIPTION: This snippet demonstrates how to bind a one-time 'tap' event listener to nodes in a Cytoscape.js graph and how to programmatically trigger the event. It uses the 'one' method to bind the event and the 'trigger' method to simulate user interaction. The example shows that the event fires only once, as subsequent triggers on different nodes do not produce output.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/core/one.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncy.one('tap', 'node', function(){\n  console.log('tap!');\n});\n\ncy.$('node').eq(0).trigger('tap'); // tap!\ncy.$('node').eq(1).trigger('tap'); // nothing b/c already tapped\n```\n\n----------------------------------------\n\nTITLE: Updating Element State in Cytoscape.js\nDESCRIPTION: This example shows how to use the `json()` function to update the state of an element. In this case, it sets the 'selected' property of the element with ID 'j' to true.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/collection/json.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncy.$('#j').json({ selected: true });\n```\n\n----------------------------------------\n\nTITLE: Setting Label Margins in Cytoscape.js\nDESCRIPTION: These properties define margins for labels, allowing for fine-tuning of label positioning for both nodes and edges.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/style.md#2025-04-23_snippet_29\n\nLANGUAGE: markdown\nCODE:\n```\n * **`text-margin-x`** : A margin that shifts the label along the x-axis.\n * **`text-margin-y`** : A margin that shifts the label along the y-axis.\n * **`source-text-margin-x`** : (For the source label of an edge.)\n * **`source-text-margin-y`** : (For the source label of an edge.)\n * **`target-text-margin-x`** : (For the target label of an edge.)\n * **`target-text-margin-y`** : (For the target label of an edge.)\n```\n\n----------------------------------------\n\nTITLE: Checking Element Types in Cytoscape.js\nDESCRIPTION: This snippet demonstrates how to properly check element types in Cytoscape.js. It explains that while elements are grouped as 'nodes' or 'edges', the recommended approach is to use the isEdge() and isNode() methods instead of group().\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/collection/group.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nele.isEdge()\nele.isNode()\nele.group()\n```\n\n----------------------------------------\n\nTITLE: Loading Elements with Callbacks in Cytoscape.js\nDESCRIPTION: Demonstrates how to use callbacks with the cy.load() function. The first callback fires when elements are loaded, and the second fires when elements are laid out.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/core/load.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ncy.load([ { data: { id: \"n1\" }, group: \"nodes\" } ], function(e){\n  console.log(\"cy loaded elements\");\n}, function(e){\n  console.log(\"cy laid out elements\");\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Tap Event with Promise in Cytoscape.js\nDESCRIPTION: This snippet demonstrates how to use the 'pon' method to attach a promise-based event handler for a 'tap' event on a specific element in a Cytoscape.js graph. The handler logs a message to the console when the promise is fulfilled.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/collection/promiseOn.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncy.$('#j').pon('tap').then(function( event ){\n  console.log('tap promise fulfilled');\n});\n```\n\n----------------------------------------\n\nTITLE: Merging Elements by Selector in Cytoscape.js\nDESCRIPTION: Creates an empty collection and then merges elements using selectors instead of element references. This demonstrates the alternative approach of using string selectors to identify elements.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/collection/merge.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar col = cy.collection(); // new, empty collection\n\ncol.merge('#j').merge('#e');\n```\n\n----------------------------------------\n\nTITLE: Configuring Overlays in Cytoscape.js\nDESCRIPTION: These properties allow for the creation of overlays on top of nodes or edges, often used in the :active state, including color, padding, opacity, and shape.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/style.md#2025-04-23_snippet_36\n\nLANGUAGE: markdown\nCODE:\n```\n * **`overlay-color`** : The colour of the overlay.\n * **`overlay-padding`** : The area outside of the element within which the overlay is shown.\n * **`overlay-opacity`** : The opacity of the overlay.\n * **`overlay-shape`** : The shape of the node overlay; may be `round-rectangle` (default), `ellipse`. Doesn't apply to edges.\n```\n\n----------------------------------------\n\nTITLE: Configuring Event Handling in Cytoscape.js\nDESCRIPTION: These properties control event handling for elements, including enabling/disabling events and specific handling for label events.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/style.md#2025-04-23_snippet_35\n\nLANGUAGE: markdown\nCODE:\n```\n * **`events`** : Whether events should occur on an element (e.g. `tap`, `mouseover`, etc.); may be `yes` or `no`.  For `no`, the element receives no events and events simply pass through to the core/viewport.  The `events` property is per-element, so the value of a compound parent does not affect its children.\n * **`text-events`** : Whether events should occur on an element if the label receives an event; may be `yes` or `no`.  You may want a style applied to the text on `:active` so you know the text is activatable.\n * **`box-select-labels`** : Whether events should be triggered on an element when its label is partially or fully selected via box selection; may be `yes` or `no`.  You may want a style applied to the text on `:active` so you know the text is activatable. This setting takes effect only if `text-events=yes`.\n```\n\n----------------------------------------\n\nTITLE: Loading Elements with Event Handlers in Cytoscape.js\nDESCRIPTION: Shows an alternative approach to handling load events using the one() method to attach event handlers. This is equivalent to using callbacks with the load() function.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/core/load.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ncy.one(\"load\", function(e){\n  console.log(\"cy loaded elements\");\n}).one(\"done\", function(e){\n  console.log(\"cy laid out elements\");\n});\n\ncy.load([ { data: { id: \"n1\" }, group: \"nodes\" } ]);\n```\n\n----------------------------------------\n\nTITLE: Removing All Classes from Nodes in Cytoscape.js\nDESCRIPTION: This snippet demonstrates two methods to remove all classes from nodes in a Cytoscape.js graph. It shows how to use both an empty array and an empty string to achieve the same result.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/collection/classes.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncy.nodes().classes([]); // array\ncy.nodes().classes(''); // space-separated string\n```\n\n----------------------------------------\n\nTITLE: Adding and Removing All Event Handlers in Cytoscape.js\nDESCRIPTION: Shows how to add a tap event handler to a Cytoscape instance and then remove all tap event handlers. The cy.on() method registers the event handler, while cy.removeListener() without a second parameter removes all handlers for the specified event type.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/core/removeListener.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncy.on('tap', function(){ /* ... */ });\n\n// remove all tap listener handlers, including the one above\ncy.removeListener('tap');\n```\n\n----------------------------------------\n\nTITLE: Selecting Edges by Source Node in Cytoscape.js\nDESCRIPTION: Shows how to select edges based on their source node using the cy.edges() method with a selector string that specifies a source value.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/core/elements.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncy.edges('[source = \"j\"]');\n```\n\n----------------------------------------\n\nTITLE: Running Cytoscape.js Layout in JavaScript\nDESCRIPTION: Executes the layout. For discrete layouts, it sets final positions using eles.layoutPositions(). For continuous layouts, it starts an asynchronous process that may use Web Workers or requestAnimationFrame() for iterative calculations.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/extensions.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nrun()\n```\n\n----------------------------------------\n\nTITLE: Setting Padding for Nodes in Cytoscape.js\nDESCRIPTION: Explains how to set padding for nodes using either percentage or pixel values. The 'padding-relative-to' property determines how percentage padding is calculated based on node dimensions.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/style.md#2025-04-23_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n* **`padding`** : The amount of padding around all sides of the node. Either percentage or pixel value can be specified. For example, both `50%` and `50px` are acceptable values. By default, percentage padding is calculated as a percentage of node width.\n```\n\n----------------------------------------\n\nTITLE: Demonstrating multiple style updates without batching in Cytoscape.js\nDESCRIPTION: This snippet shows how multiple operations on a Cytoscape.js element can trigger multiple style calculations and redraws, which can be inefficient for large numbers of operations or elements.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/core/batch.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncy.$('#j')\n  .data('weight', '70')   // style update\n  .addClass('funny')      // style update AGAIN\n  .removeClass('serious') // style update YET AGAIN\n\n  // at least 1 redraw here\n  // possibly 3 total depending on speed of above operations\n  // (for one ele almost certainly 1 redraw, but consider many eles)\n;\n```\n\n----------------------------------------\n\nTITLE: Defining Shape Polygon Points in Cytoscape.js\nDESCRIPTION: Specifies how to define custom polygon shapes for nodes using the 'shape-polygon-points' property. Points are defined as alternating x and y coordinates ranging from -1 to 1, representing positions relative to the node's bounding box.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/style.md#2025-04-23_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n**`shape-polygon-points`** : An array (or a space-separated string) of numbers ranging on [-1, 1], representing alternating x and y values (i.e. `x1 y1   x2 y2,   x3 y3 ...`).  This represents the points in the polygon for the node's shape.  The bounding box of the node is given by (-1, -1), (1, -1), (1, 1), (-1, 1).  The node's position is the origin (0, 0).\n```\n\n----------------------------------------\n\nTITLE: Checking Element Class in Cytoscape.js\nDESCRIPTION: This code demonstrates how to check if a Cytoscape.js element has a specific CSS class using the hasClass() method. It selects an element with ID 'j' and checks if it has the class 'foo', then logs the result to the console.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/collection/hasClass.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log( 'j has class `foo` : '  + cy.$('#j').hasClass('foo') );\n```\n\n----------------------------------------\n\nTITLE: Animating and Stopping a Cytoscape.js Graph Fit Operation in JavaScript\nDESCRIPTION: This code snippet demonstrates how to animate a graph viewport to fit a specific element and then stop the animation midway. It uses the animate() method with a fit operation targeting an element with ID 'j', and sets a 2000ms duration. A setTimeout function is used to stop the animation halfway through.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/core/stop.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncy.animate({\n  fit: { eles: '#j' }\n}, { duration: 2000 });\n\n// stop in the middle\nsetTimeout(function(){\n  cy.stop();\n}, 1000);\n```\n\n----------------------------------------\n\nTITLE: Escaping Special Characters in Cytoscape.js Selectors\nDESCRIPTION: Shows how to escape special characters in IDs when using selectors. This example demonstrates escaping characters like $ and @ in an ID selector.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/selectors.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ncy.filter('#some\\\\$funky\\\\@id');\n```\n\n----------------------------------------\n\nTITLE: Setting Graph Properties with json() Method in Cytoscape.js\nDESCRIPTION: This snippet shows how to update graph properties declaratively using the json() method. In this example, the zoom level of the graph is set to 2. Any property that is included in the provided object will be updated in the graph.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/core/json.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncy.json({\n  zoom: 2\n});\n```\n\n----------------------------------------\n\nTITLE: Stopping a Running Layout in Cytoscape.js\nDESCRIPTION: This code snippet demonstrates how to initialize a CoSE layout in Cytoscape.js, run it, and then stop it after 100 milliseconds using setTimeout. It showcases the usage of layout.stop() to prematurely halt an asynchronous layout.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/layout/stop.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar layout = cy.layout({ name: 'cose' });\n\nlayout.run();\n\n// some time later...\nsetTimeout(function(){\n  layout.stop();\n}, 100);\n```\n\n----------------------------------------\n\nTITLE: Configuring Stripe Chart Background in Cytoscape.js\nDESCRIPTION: These properties allow creating stripe chart backgrounds on nodes. Up to 16 stripes are supported per node, with each stripe placed in order of i. Stripes can be vertical or horizontal.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/style.md#2025-04-23_snippet_11\n\nLANGUAGE: css\nCODE:\n```\nstripe-size: 100%;\nstripe-direction: vertical;\nstripe-i-background-color: #color;\nstripe-i-background-size: 25%;\nstripe-i-background-opacity: 0.5;\n```\n\n----------------------------------------\n\nTITLE: Retrieving Source Node in Cytoscape.js\nDESCRIPTION: Shows how to get the source node of an edge element in Cytoscape.js. First selects an edge with ID 'je' using the jQuery-style selector, then calls the source() method to get its source node.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/collection/source.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar je = cy.$('#je');\n\nje.source();\n```\n\n----------------------------------------\n\nTITLE: Locking Elements with Cytoscape.js Selector\nDESCRIPTION: Uses Cytoscape.js's jQuery-style selector to find and lock a specific element with ID 'j'. The lock() method prevents the element from being moved or modified.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/collection/lock.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncy.$('#j').lock();\n```\n\n----------------------------------------\n\nTITLE: Enabling Autolock in Cytoscape.js\nDESCRIPTION: This code snippet demonstrates how to enable the autolock feature in Cytoscape.js. When autolock is enabled, graph elements cannot be moved by the user interactions.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/core/autolock.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncy.autolock( true );\n```\n\n----------------------------------------\n\nTITLE: Exporting a Cytoscape.js Graph as PNG Image\nDESCRIPTION: This code snippet demonstrates how to export a Cytoscape.js graph as a PNG image and display it in an HTML img tag. The function returns base64-encoded PNG data which is then set as the source of an image element.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/core/png.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar png64 = cy.png();\n\n// put the png data in an img tag\ndocument.querySelector('#png-eg').setAttribute('src', png64);\n```\n\n----------------------------------------\n\nTITLE: Configuring Label Backgrounds in Cytoscape.js\nDESCRIPTION: These properties control the appearance of backgrounds behind label text, including color, opacity, shape, and padding.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/style.md#2025-04-23_snippet_32\n\nLANGUAGE: markdown\nCODE:\n```\n * **`text-background-color`** : A colour to apply on the text background.\n * **`text-background-opacity`** : The opacity of the label background; the background is disabled for `0` (default value).\n * **`text-background-shape`** : The shape to use for the label background, can be `rectangle` or `round-rectangle`.\n * **`text-background-padding`** : A padding on the background of the label (e.g `5px`); zero padding is used by default.\n```\n\n----------------------------------------\n\nTITLE: Selecting Edges and Getting Source Nodes in Cytoscape.js\nDESCRIPTION: Example shows how to select specific edges by their IDs (#je and #kg) and retrieve their source nodes using the sources() collection method. This returns a collection of nodes that are the source endpoints of the selected edges.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/collection/sources.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar edges = cy.$('#je, #kg');\n\nedges.sources();\n```\n\n----------------------------------------\n\nTITLE: Using ungrabify() Method in Cytoscape.js\nDESCRIPTION: This snippet demonstrates how to make an element with ID 'j' non-grabbable using the ungrabify() method. This prevents the user from being able to grab and move the element during interaction.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/collection/ungrabify.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncy.$('#j').ungrabify();\n```\n\n----------------------------------------\n\nTITLE: Enabling Autoungrabify in Cytoscape.js\nDESCRIPTION: Enables the autoungrabify feature in a Cytoscape.js graph instance, making nodes automatically ungrabifiable. This prevents users from being able to grab and move nodes in the graph.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/core/autoungrabify.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncy.autoungrabify( true );\n```\n\n----------------------------------------\n\nTITLE: Removing a Single Element in Cytoscape.js\nDESCRIPTION: Demonstrates how to remove a specific element by selecting it first then passing it to the remove method. The example selects an element with ID 'j' and removes it from the graph.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/core/remove.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar j = cy.$('#j');\ncy.remove( j );\n```\n\n----------------------------------------\n\nTITLE: Selecting Edges Between Nodes in Cytoscape.js\nDESCRIPTION: This code snippet demonstrates how to select edges between two specific nodes in a Cytoscape.js graph. It uses the '$' selector to find nodes by their IDs and then applies the 'edgesTo' method to find connecting edges.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/collection/edgesTo.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar j = cy.$('#j');\nvar e = cy.$('#e');\n\nj.edgesTo(e);\n```\n\n----------------------------------------\n\nTITLE: Configuring Label Interactivity in Cytoscape.js\nDESCRIPTION: These properties control how labels interact with zooming and events, including minimum font size for visibility and event handling.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/style.md#2025-04-23_snippet_34\n\nLANGUAGE: markdown\nCODE:\n```\n * **`min-zoomed-font-size`** : If zooming makes the effective font size of the label smaller than this, then no label is shown.  Note that because of performance optimisations, the label may be shown at font sizes slightly smaller than this value.  This effect is more pronounced at larger screen pixel ratios.  However, it is guaranteed that the label will be shown at sizes equal to or greater than the value specified.\n * **`text-events`** : Whether events should occur on an element if the label receives an event; may be `yes` or `no`.  You may want a style applied to the text on `:active` so you know the text is activatable.\n * **`box-select-labels`** : Whether events should be triggered on an element when its label is partially or fully selected via box selection; may be `yes` or `no`.  You may want a style applied to the text on `:active` so you know the text is activatable. This setting takes effect only if `text-events=yes`.\n```\n\n----------------------------------------\n\nTITLE: Configuring Unbundled Bezier Edges in Cytoscape.js\nDESCRIPTION: Defines properties for unbundled bezier edges, including control point distances, weights, and edge distances. These properties allow for manual control of bezier curve shapes relative to source and target nodes.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/style.md#2025-04-23_snippet_15\n\nLANGUAGE: markdown\nCODE:\n```\n* **`control-point-distances`** : A series of values that specify for each control point the distance perpendicular to a line formed from source to target, e.g. `-20 20 -20`.\n* **`control-point-weights`** : A series of values that weights control points along a line from source to target, e.g. `0.25 0.5 0.75`.  A value usually ranges on [0, 1], with 0 towards the source node and 1 towards the target node --- but larger or smaller values can also be used.\n* **`edge-distances`** : \n  * With value `intersection` (default), the line from source to target for `segment-weights` is from the outside of the source node's shape to the outside of the target node's shape.  \n  * With value `node-position`, the line is from the source position to the target position.  \n  * The `node-position` option makes calculating edge points easier --- but it should be used carefully because you can create invalid points that `intersection` would have automatically corrected.\n  * With value `endpoints`, the line is from the manually-specified source endpoint (via `source-endpoint`) to the manually-specified target endpoint (via `target-endpoint`).\n    * A manual endpoint may be specified with a position, e.g. `source-endpoint: 20 10`.\n    * A manual endpoint may be alternatively specified with an angle, e.g. `target-endpoint: 90deg`.\n```\n\n----------------------------------------\n\nTITLE: Using the panify() Method in Cytoscape.js\nDESCRIPTION: This snippet demonstrates how to center a specific element in the Cytoscape.js viewport using the panify method. It selects an element with ID 'j' from the Cytoscape instance and calls the panify method on it to center the view on that element.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/collection/panify.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncy.$('#j').panify();\n```\n\n----------------------------------------\n\nTITLE: Styling Label Borders in Cytoscape.js\nDESCRIPTION: These properties define the appearance of borders around label backgrounds, including opacity, width, style, and color.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/style.md#2025-04-23_snippet_33\n\nLANGUAGE: markdown\nCODE:\n```\n * **`text-border-opacity`** : The width of the border around the label; the border is disabled for `0` (default value).\n * **`text-border-width`** : The width of the border around the label.\n * **`text-border-style`** : The style of the border around the label; may be `solid`, `dotted`, `dashed`, or `double`.\n * **`text-border-color`** : The colour of the border around the label.\n```\n\n----------------------------------------\n\nTITLE: Using the destroy() Method in Cytoscape.js\nDESCRIPTION: The cy.destroy() function cleans up references and rendering loops to allow memory used by a Cytoscape.js instance to be garbage collected. It's not always necessary but can be useful in specific scenarios, especially when running headlessly with styles enabled.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/core/destroy.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncy.destroy()\n```\n\n----------------------------------------\n\nTITLE: Configuring Underlays in Cytoscape.js\nDESCRIPTION: These properties allow for the creation of underlays behind nodes or edges, often used in a highlighted state, including color, padding, opacity, and shape.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/style.md#2025-04-23_snippet_37\n\nLANGUAGE: markdown\nCODE:\n```\n * **`underlay-color`** : The colour of the underlay.\n * **`underlay-padding`** : The area outside of the element within which the underlay is shown.\n * **`underlay-opacity`** : The opacity of the underlay.\n * **`underlay-shape`** : The shape of the node underlay; may be `round-rectangle` (default), `ellipse`. Doesn't apply to edges.\n```\n\n----------------------------------------\n\nTITLE: Defining Background Image Styling for Cytoscape.js Nodes\nDESCRIPTION: Provides an example of JSON-based styling for background images on Cytoscape.js nodes. It demonstrates how to set multiple background images, their fit, and opacity.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/style.md#2025-04-23_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"background-image\": [\n    \"https://upload.wikimedia.org/wikipedia/commons/b/b4/High_above_the_Cloud_the_Sun_Stays_the_Same.jpg\",\n    \"https://upload.wikimedia.org/wikipedia/commons/thumb/f/fc/Pigeon_silhouette_4874.svg/1000px-Pigeon_silhouette_4874.svg.png\"\n  ],\n  \"background-fit\": \"cover cover\",\n  \"background-image-opacity\": 0.5\n}\n```\n\n----------------------------------------\n\nTITLE: Undirected Degree Centrality Return Object in JavaScript\nDESCRIPTION: Shows the structure of the return object when options.directed is set to false, returning the degree centrality of the root node.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/collection/degreeCentrality.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  degree /* the degree centrality of the root node */\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Label Outlines in Cytoscape.js\nDESCRIPTION: These properties define the appearance of outlines around label text, including color, opacity, and width.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/style.md#2025-04-23_snippet_31\n\nLANGUAGE: markdown\nCODE:\n```\n * **`text-outline-color`** : The colour of the outline around the element's label text.\n * **`text-outline-opacity`** : The opacity of the outline on label text.\n * **`text-outline-width`** : The size of the outline on label text.\n```\n\n----------------------------------------\n\nTITLE: Unmerging Elements from a Collection using Selector in Cytoscape.js\nDESCRIPTION: This example shows how to create a new collection, populate it with nodes, and then remove elements using the unmerge() function with a selector string. This approach allows for removing elements by query rather than direct reference.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/collection/unmerge.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar col = cy.collection(); // new, empty collection\n\ncol.merge( cy.nodes() );\n\ncol.unmerge('#e');\n```\n\n----------------------------------------\n\nTITLE: Retrieving Target Nodes from Edge Collection in Cytoscape.js\nDESCRIPTION: This example demonstrates how to select specific edges by their IDs and then retrieve their target nodes using the targets() method. The code first selects edges with IDs 'je' and 'kg' using the selector syntax, then calls the targets() method on the resulting collection to get the nodes at which these edges terminate.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/collection/targets.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar edges = cy.$('#je, #kg');\n\nedges.targets();\n```\n\n----------------------------------------\n\nTITLE: Configuring Ghost Effects in Cytoscape.js\nDESCRIPTION: These properties allow for creating a ghosting effect, a semitransparent duplicate of the element drawn at an offset, including enabling/disabling, offset, and opacity.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/style.md#2025-04-23_snippet_38\n\nLANGUAGE: markdown\nCODE:\n```\n * **`ghost`** : Whether to use the ghost effect; may be `yes` or `no`.\n * **`ghost-offset-x`** : The horizontal offset used to position the ghost effect.\n * **`ghost-offset-y`** : The vertical offset used to position the ghost effect.\n * **`ghost-opacity`** : The opacity of the ghost effect.\n```\n\n----------------------------------------\n\nTITLE: Defining SVG XML Header for Cytoscape.js Background Images\nDESCRIPTION: Specifies the XML header that should be included in each SVG image used as a background in Cytoscape.js. This header ensures proper rendering of SVG images across different browsers.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/style.md#2025-04-23_snippet_7\n\nLANGUAGE: svg\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?><!DOCTYPE svg>\n```\n\n----------------------------------------\n\nTITLE: Return Object Structure for Karger-Stein Algorithm\nDESCRIPTION: Defines the structure of the object returned by the Karger-Stein algorithm implementation. The object contains the cut edges and component node collections.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/collection/kargerStein.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  /* Collection of edges that are in the cut */\n  cut,\n\n  /* Array of collections corresponding to the components\n  containing each disjoint subset of nodes defined by the cut */\n  components\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Segments Edges in Cytoscape.js\nDESCRIPTION: Defines properties for segment edges, which consist of multiple straight lines. Includes segment distances, weights, and edge distances for precise control over edge positioning relative to source and target nodes.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/style.md#2025-04-23_snippet_17\n\nLANGUAGE: markdown\nCODE:\n```\n* **`segment-distances`** : A series of values that specify for each segment point the distance perpendicular to a line formed from source to target, e.g. `-20 20 -20`.\n* **`segment-weights`** : A series of values that weights segment points along a line from source to target, e.g. `0.25 0.5 0.75`.  A value usually ranges on [0, 1], with 0 towards the source node and 1 towards the target node --- but larger or smaller values can also be used.\n* **`edge-distances`** : \n  * With value `intersection` (default), the line from source to target for `segment-weights` is from the outside of the source node's shape to the outside of the target node's shape.  \n  * With value `node-position`, the line is from the source position to the target position.  \n  * The `node-position` option makes calculating edge points easier --- but it should be used carefully because you can create invalid points that `intersection` would have automatically corrected.\n  * With value `endpoints`, the line is from the manually-specified source endpoint (via `source-endpoint`) to the manually-specified target endpoint (via `target-endpoint`).\n    * A manual endpoint may be specified with a position, e.g. `source-endpoint: 20 10`.\n    * A manual endpoint may be alternatively specified with an angle, e.g. `target-endpoint: 90deg`.\n```\n\n----------------------------------------\n\nTITLE: Creating Removed Node Collection with Cytoscape.js in JavaScript\nDESCRIPTION: This example shows how to create a collection of new nodes that have not been added to the graph yet. It uses the 'removed' option when creating the collection and demonstrates checking the removed status of each element.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/core/collection.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar removedCollection = cy.collection([{ data: { id: 'a' } }, { data: { id: 'b' } }], { removed: true });\n\nremovedCollection.forEach(element => {\n  console.log(element.removed()); // true\n};\n```\n\n----------------------------------------\n\nTITLE: Accessing Concentric Value in Cytoscape.js\nDESCRIPTION: This snippet demonstrates how to access the concentric value set by the concentric layout using the ele.scratch() method in Cytoscape.js.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/layouts/concentric.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nele.scratch()\n```\n\n----------------------------------------\n\nTITLE: Enabling Zooming in Cytoscape.js\nDESCRIPTION: This snippet shows how to enable zooming functionality in a Cytoscape.js instance. It uses the zoomingEnabled() method with a boolean parameter set to true.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/core/zoomingEnabled.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ncy.zoomingEnabled( true );\n```\n\n----------------------------------------\n\nTITLE: Enabling User Zooming in Cytoscape.js\nDESCRIPTION: This snippet demonstrates how to enable user zooming functionality in Cytoscape.js. It uses the userZoomingEnabled method with a boolean parameter set to true.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/core/userZoomingEnabled.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ncy.userZoomingEnabled( true );\n```\n\n----------------------------------------\n\nTITLE: Zooming to minimum zoom factor in Cytoscape.js\nDESCRIPTION: This example shows how to zoom to the minimum zoom factor by passing a value outside the valid range. Zero is outside the valid range and will be adjusted to the minimum allowed zoom level.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/core/zoom.md#2025-04-23_snippet_3\n\nLANGUAGE: js\nCODE:\n```\ncy.zoom(0); // 0 is outside of the valid range and\n            // its closest valid level is the min\n```\n\n----------------------------------------\n\nTITLE: Querying Compound Node Neighborhood in Cytoscape.js\nDESCRIPTION: This snippet demonstrates how to query the neighborhood of a compound node in Cytoscape.js. It shows the difference between directly connected elements and elements connected to the compound node's descendants.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/notation.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar a = cy.$('#a'); // assume a compound node\n\n// the neighbourhood of `a` contains directly connected elements\nvar directlyConnected = a.neighborhood();\n\n// you may want everything connected to its descendants instead\n// because the descendants \"belong\" to `a`\nvar indirectlyConnected = a.add( a.descendants() ).neighborhood();\n```\n\n----------------------------------------\n\nTITLE: Unlocking a Node in Cytoscape.js\nDESCRIPTION: Demonstrates how to unlock a specific node in a Cytoscape.js graph using the node selector and unlock method. The example unlocks the node with ID 'j', allowing it to be moved or modified.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/collection/unlock.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncy.$('#j').unlock();\n```\n\n----------------------------------------\n\nTITLE: Filtering Elements with Custom Function in Cytoscape.js\nDESCRIPTION: Demonstrates how to use a custom filter function instead of a selector string to select elements in Cytoscape.js. This example selects the neighborhood of node 'j' that consists of edges.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/selectors.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncy.$('#j').neighborhood(function( ele ){\n  return ele.isEdge();\n});\n```\n\n----------------------------------------\n\nTITLE: Disabling Zooming in Cytoscape.js\nDESCRIPTION: This snippet demonstrates how to disable zooming functionality in a Cytoscape.js instance. It uses the zoomingEnabled() method with a boolean parameter set to false.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/core/zoomingEnabled.md#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\ncy.zoomingEnabled( false );\n```\n\n----------------------------------------\n\nTITLE: Disabling Panning in Cytoscape.js\nDESCRIPTION: Disables panning functionality in a Cytoscape.js graph instance. When disabled, users cannot pan the view by dragging the background of the graph.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/core/panningEnabled.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncy.panningEnabled( false );\n```\n\n----------------------------------------\n\nTITLE: Zooming to maximum zoom factor in Cytoscape.js\nDESCRIPTION: This example demonstrates how to zoom to the maximum zoom factor by passing infinity. This value is outside the valid range and will be adjusted to the maximum allowed zoom level.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/core/zoom.md#2025-04-23_snippet_4\n\nLANGUAGE: js\nCODE:\n```\ncy.zoom(1/0); // infinity is outside of the valid range and\n              // its closest valid level is the max\n```\n\n----------------------------------------\n\nTITLE: Initializing Cytoscape.js Layout Prototype in JavaScript\nDESCRIPTION: Creates a new layout instance with specified options. The options object must include the Cytoscape graph (cy) and the collection of elements (eles) to be laid out.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/extensions.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconstructor(options)\n```\n\n----------------------------------------\n\nTITLE: Enabling Panning in Cytoscape.js\nDESCRIPTION: Enables panning functionality in a Cytoscape.js graph instance. When enabled, users can pan the view by dragging the background of the graph.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/core/panningEnabled.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncy.panningEnabled( true );\n```\n\n----------------------------------------\n\nTITLE: Disabling Autoungrabify in Cytoscape.js\nDESCRIPTION: Disables the autoungrabify feature in a Cytoscape.js graph instance, allowing nodes to be grabbed by users. This enables the default interactive behavior where users can grab and move nodes.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/core/autoungrabify.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncy.autoungrabify( false );\n```\n\n----------------------------------------\n\nTITLE: Initializing Cytoscape.js Core Module in JavaScript\nDESCRIPTION: Defines the core Cytoscape.js module using a self-invoking function. It sets up the global namespace and core functionality.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/collection/removeCss.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n(function(window){\n\n  'use strict';\n\n  // the main ey.js module is defined here, with *all* of its code in 1 file...\n```\n\n----------------------------------------\n\nTITLE: Return Structure of Hierarchical Tree for Biconnected Components in Cytoscape.js\nDESCRIPTION: Shows the object structure returned by the htbc() function, which contains the cut vertices collection and an array of biconnected components.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/collection/hopcroftTarjanBiconnected.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  cut, /* Collection of nodes identified as cut vertices */\n  components /* An array of collections corresponding to each biconnected component */\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Cytoscape.js in ESM Environment\nDESCRIPTION: Example of importing Cytoscape.js in an ES module environment (e.g., with Webpack or Node.js with the esm package). Uses the default export.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/getting-started.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport cytoscape from 'cytoscape';\n```\n\n----------------------------------------\n\nTITLE: Disabling Autolock in Cytoscape.js\nDESCRIPTION: This code snippet demonstrates how to disable the autolock feature in Cytoscape.js. When autolock is disabled, graph elements can be freely moved by user interactions.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/core/autolock.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncy.autolock( false );\n```\n\n----------------------------------------\n\nTITLE: Disabling Box Selection in Cytoscape.js\nDESCRIPTION: Disables the box selection functionality in a Cytoscape.js instance. When disabled, users cannot use click-and-drag to create selection boxes.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/core/boxSelectionEnabled.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncy.boxSelectionEnabled( false );\n```\n\n----------------------------------------\n\nTITLE: Retrieving Numeric Style Value in JavaScript using Cytoscape.js\nDESCRIPTION: Demonstrates how to use the numericStyle() function to get the numeric value of a node's width property in Cytoscape.js. This example shows that even if the width is specified in a different unit (e.g., em), the function returns the value in pixels.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/collection/numericStyle.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nnode.numericStyle('width')\n```\n\n----------------------------------------\n\nTITLE: Implementing Array Unshift with Spread Operator in JavaScript\nDESCRIPTION: This function adds multiple elements to the beginning of an array using the spread operator. It's more efficient than using concat() for prepending elements.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/layout/removeListener.md#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst unshift = function( arr, ...args ){\n  for( let i = args.length - 1; i >= 0; i-- ){\n    let arg = args[i];\n\n    arr.unshift( arg );\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Requiring Cytoscape.js in CommonJS Environment\nDESCRIPTION: Example of requiring Cytoscape.js in a CommonJS environment like Node.js. This uses the CommonJS module system.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/getting-started.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar cytoscape = require('cytoscape');\n```\n\n----------------------------------------\n\nTITLE: Implementing Array Push with Spread Operator in JavaScript\nDESCRIPTION: This function provides a way to push multiple elements to an array using the spread operator. It's more efficient than using concat() for adding elements.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/layout/removeListener.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst push = function( arr, ...args ){\n  for( let i = 0; i < args.length; i++ ){\n    let arg = args[i];\n\n    arr.push( arg );\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Querying Nodes with Multiple Attributes in Cytoscape.js\nDESCRIPTION: Shows how to combine multiple attribute selectors to query nodes based on their properties. This example selects nodes with weight greater than or equal to 50 and height less than 180.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/selectors.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncy.elements(\"node[weight >= 50][height < 180]\");\n```\n\n----------------------------------------\n\nTITLE: Registering a Cytoscape.js Extension\nDESCRIPTION: This snippet demonstrates how to register a Cytoscape.js extension using the `cytoscape` function. It shows the basic structure for creating and registering an extension, including handling dependencies and providing extension code.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/demos.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncytoscape('collection', 'foo', function( fn1, fn2 ){\n  return function( arg1, arg2 ){\n    // `this` is the collection\n    // do stuff with args, using fn1() and fn2() from the factory\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Using Cytoscape.js with AMD/Require.js\nDESCRIPTION: Example of using Cytoscape.js with AMD (Asynchronous Module Definition) and Require.js. This approach is useful for projects using the Require.js module loader.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/getting-started.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nrequire(['cytoscape'], function(cytoscape){\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Encoding SVG Data URI for Cytoscape.js Background Images\nDESCRIPTION: Demonstrates how to properly encode SVG data URIs for use as background images in Cytoscape.js. This ensures that special characters in the SVG are properly handled.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/style.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvar data = 'data:image/svg+xml;utf8,' + encodeURIComponent(svgFile);\n```\n\n----------------------------------------\n\nTITLE: Build Commands Documentation\nDESCRIPTION: Command line instructions for building and testing the Cytoscape.js library, including commands for different build targets, testing suites, and development workflows.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nbuild\nbuild:min\nbuild:umd\nbuild:esm\nclean\ndocs\nrelease\nwatch\nwatch:babel\nwatch:umd\ndist\ntest\ntest:js\ntest:build\ntest:modules\nlint\nbenchmark\nbenchmark:single\n```\n\n----------------------------------------\n\nTITLE: Using Data Selectors for IDs with Special Characters in Cytoscape.js\nDESCRIPTION: Illustrates an alternative approach to selecting elements with IDs containing special characters by using a data selector instead of an ID selector.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/selectors.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ncy.filter('[id = \"some$funky@id\"]');\n```\n\n----------------------------------------\n\nTITLE: Running Cytoscape.js Tests via Node.js\nDESCRIPTION: Command for running Cytoscape.js tests using Node.js through npm scripts. This command executes JavaScript tests in a Node.js environment.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test:js\n```\n\n----------------------------------------\n\nTITLE: Accessing Nested Object Properties Safely in JavaScript\nDESCRIPTION: This function provides a safe way to access nested object properties. It returns undefined if any intermediate property is null or undefined, preventing errors when accessing properties of non-existent objects.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/layout/removeListener.md#2025-04-23_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst getPropsDefined = function( obj, ...props ){\n  let lastProp = props.length - 1;\n  for( let i = 0; i < lastProp; i++ ){\n    let prop = props[i];\n\n    if( obj == null ){\n      return undefined;\n    } else {\n      obj = obj[prop];\n    }\n  }\n\n  return obj != null ? obj[ props[lastProp] ] : undefined;\n};\n```\n\n----------------------------------------\n\nTITLE: Applying Selectify to a Cytoscape.js Element in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the selectify() method on a specific element in a Cytoscape.js graph. The method is called on an element with the ID 'j', making it selectable in the graph visualization.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/collection/selectify.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncy.$('#j').selectify();\n```\n\n----------------------------------------\n\nTITLE: Selecting and Comparing Elements in Cytoscape.js\nDESCRIPTION: This code demonstrates how to select specific elements by ID in a Cytoscape.js graph and then compare selections to check if they have any elements in common using the anySame() method. It selects a single element with ID 'j' and multiple elements with IDs 'j', 'g', and 'k', then checks if there's any overlap between the selections.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/collection/anySame.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar j = cy.$('#j');\nvar guys = cy.$('#j, #g, #k');\n\nconsole.log( 'any same ? ' + j.anySame(guys) );\n```\n\n----------------------------------------\n\nTITLE: Registering Style Key Invalidation Listener in Cytoscape.js\nDESCRIPTION: A listener is registered using r.onUpdateEleCalcs() to trigger style key invalidation for elements that may need garbage collection.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/webgl.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nr.onUpdateEleCalcs(function(elements) {\n  AtlasManager.invalidate(elements);\n});\n```\n\n----------------------------------------\n\nTITLE: Specifying Border Dash Pattern in Cytoscape.js\nDESCRIPTION: Demonstrates how to define a custom dashed border pattern for nodes using the 'border-dash-pattern' property. The pattern is specified as an array of alternating line and gap lengths.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/style.md#2025-04-23_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n**`border-dash-pattern`** : The `dashed` line pattern which specifies alternating lengths of lines and gaps. (e.g. `[6, 3]`).\n```\n\n----------------------------------------\n\nTITLE: Retrieving Closest Common Ancestor in Cytoscape.js\nDESCRIPTION: This code snippet demonstrates how to get the closest common ancestor of a set of nodes in Cytoscape.js. It uses the commonAncestors() method and selects the first element of the resulting collection.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/collection/commonAncestors.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nnodes.commonAncestors().first()\n```\n\n----------------------------------------\n\nTITLE: Texture Atlas Compaction in Cytoscape.js\nDESCRIPTION: If an Atlas contains marked keys for garbage collection, a new Atlas is created and valid textures are copied to compact the space.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/webgl.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nif (atlas.hasMarkedKeys() && atlas.offscreenCanvasAvailable()) {\n  let newAtlas = new Atlas();\n  atlas.copyValidTextures(newAtlas);\n  replaceOldAtlas(atlas, newAtlas);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Cytoscape.js Layout Extension\nDESCRIPTION: This code snippet shows how to define a layout extension for Cytoscape.js. It includes the structure for creating a layout function, setting default options, and implementing the `run` method for the layout algorithm.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/demos.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncytoscape('layout', 'fooLayout', function( impl ){\n  return {\n    // run: function( options ){ },\n    // stop: function(){},\n    \n    options: { // default options\n      // ...\n    },\n    \n    run: function(){\n      var options = this.options;\n      var cy = options.cy;\n      var eles = options.eles;\n      \n      // `this` references the layout object\n      // `cy` is the instance of Cytoscape\n      // `options` is the combined options from the default values and from calling the layout\n      // `eles` is the collection of elements to lay out\n      \n      // potentially use impl() here\n      // implement the layout algorithm...\n      \n      return this; // for chaining\n    }\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Cytoscape.js via Meteor/Atmosphere\nDESCRIPTION: Command to install Cytoscape.js in a Meteor application. Note that this uses npm for installation despite being for Meteor/Atmosphere.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/getting-started.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpm install cytoscape\n```\n\n----------------------------------------\n\nTITLE: Styling Loop Edges in Cytoscape.js\nDESCRIPTION: Properties for styling loop edges (edges with the same source and target). These control the direction and sweep of the loop.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/style.md#2025-04-23_snippet_14\n\nLANGUAGE: css\nCODE:\n```\ncurve-style: bezier;\nloop-direction: -45deg;\nloop-sweep: -90deg;\n```\n\n----------------------------------------\n\nTITLE: Implementing K-Mediods Clustering on Graph Elements in JavaScript\nDESCRIPTION: This code snippet demonstrates how to apply k-mediods clustering to elements in a Cytoscape.js graph. The function takes parameters including k (number of clusters) and attributes (functions that extract the data to be used for clustering). It returns an array of collections, where each collection represents a cluster.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/collection/kMedoids.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar clusters = cy.elements().kMediods({\n  k: 2,\n  attributes: [\n    function( node ){ return edge.data('weight'); }\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Degree Centrality Function Return Format for Directed Graphs in JavaScript\nDESCRIPTION: Object structure returned by degree centrality function when options.directed is true. Provides both indegree and outdegree functions that calculate the normalized centrality values for a specified node.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/collection/degreeCentralityNormalized.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  /* the normalised indegree centrality of the specified node */\n  indegree: function( node ){ /* impl */ },\n\n  /* the normalised outdegree centrality of the specified node */ \n  outdegree: function( node ){ /* impl */ }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Round Segments Edges in Cytoscape.js\nDESCRIPTION: Describes properties for round segment edges, which are similar to segment edges but with rounded corners. Includes segment distances, weights, radii, and radius types for controlling the shape and curvature of edge segments.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/style.md#2025-04-23_snippet_18\n\nLANGUAGE: markdown\nCODE:\n```\n* **`segment-distances`** : A series of values that specify for each segment point the distance perpendicular to a line formed from source to target, e.g. `-20 20 -20`.\n* **`segment-weights`** : A series of values that weights segment points along a line from source to target, e.g. `0.25 0.5 0.75`.  A value usually ranges on [0, 1], with 0 towards the source node and 1 towards the target node --- but larger or smaller values can also be used.\n* **`segment-radii`** : A series of values that provide the radii of the different points positioned by `segment-distances` and `segment-weights`, e.g. `15 0 5`.  If less radii are provided tha points have been defined, the last provided radius will be used for all the missing radius. If a single radius is provided, it will therefore be applied to all the segment's points.\n* **`radius-type`** : Defines where `segment-radii` are applied (see [demo](demos/radius-types)), which is particularly relevant when the corner angle is acute. You can provide multiple values to define the radius type for each provided radius. Values can be:\n     * `arc-radius`: **Default strategy**: The `radius` property is applied to the corner arc, which will be placed further away from the control point if the arc doesn't fit in an acute angle.\n     * `influence-radius`: The radius property is applied to the control point sphere of influence. The arcs for a given control point will all start and end at `radius` distance from the `control-points`.\n* **`edge-distances`** :\n    * With value `intersection` (default), the line from source to target for `segment-weights` is from the outside of the source node's shape to the outside of the target node's shape.\n    * With value `node-position`, the line is from the source position to the target position.\n    * The `node-position` option makes calculating edge points easier --- but it should be used carefully because you can create invalid points that `intersection` would have automatically corrected.\n    * With value `endpoints`, the line is from the manually-specified source endpoint (via `source-endpoint`) to the manually-specified target endpoint (via `target-endpoint`).\n        * A manual endpoint may be specified with a position, e.g. `source-endpoint: 20 10`.\n        * A manual endpoint may be alternatively specified with an angle, e.g. `target-endpoint: 90deg`.\n```\n\n----------------------------------------\n\nTITLE: Defining Bellman-Ford Algorithm Return Object Structure in JavaScript\nDESCRIPTION: This code snippet outlines the structure of the object returned by the Bellman-Ford algorithm function in Cytoscape.js. It includes methods for path and distance calculation, a flag for negative weight cycles, and an array of detected negative weight cycles.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/collection/bellmanFord.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  /* function that computes the shortest path from root node to the argument node\n  (either objects or selector string) */\n  pathTo: function(node){ /* impl */ }, \n\n  /* function that computes the shortest distance from root node to argument node\n  (either objects or selector string) */\n  distanceTo: function(node){ /* impl */ }, \n\n  /* true/false. If true, pathTo and distanceTo will be undefined */\n  hasNegativeWeightCycle,\n\n  /* Array of collections corresponding to the negative weight cycles found\n  (only populated if the findNegativeWeightCycles option is set to true) */\n  negativeWeightCycles\n}\n```\n\n----------------------------------------\n\nTITLE: Transforming Vertex Positions in WebGL Shader\nDESCRIPTION: This GLSL code snippet demonstrates how to transform a vertex position to its final location on the screen using pan-zoom and transform matrices in the WebGL vertex shader.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/webgl.md#2025-04-23_snippet_0\n\nLANGUAGE: GLSL\nCODE:\n```\ngl_Position = vec4(uPanZoomMatrix * aTransform * vec3(position, 1.0), 1.0);\n```\n\n----------------------------------------\n\nTITLE: Configuring Font Styles in Cytoscape.js\nDESCRIPTION: These properties control the basic font styling for labels, including color, opacity, font family, size, style, weight, and text transformation.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/style.md#2025-04-23_snippet_26\n\nLANGUAGE: markdown\nCODE:\n```\n * **`color`** :  The colour of the element's label.\n * **`text-opacity`** : The opacity of the label text, including its outline.\n * **`font-family`** : A [comma-separated list of font names](https://developer.mozilla.org/en-US/docs/Web/CSS/font-family) to use on the label text.\n * **`font-size`** : The size of the label text.\n * **`font-style`** : A [CSS font style](https://developer.mozilla.org/en-US/docs/Web/CSS/font-style) to be applied to the label text.\n * **`font-weight`** : A [CSS font weight](https://developer.mozilla.org/en-US/docs/Web/CSS/font-weight) to be applied to the label text.\n * **`text-transform`** : A transformation to apply to the label text; may be `none`,\n `uppercase`, or `lowercase`.\n```\n\n----------------------------------------\n\nTITLE: Texture Garbage Collection Timer in Cytoscape.js\nDESCRIPTION: A timer is set to trigger garbage collection on the next frame by setting a flag.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/webgl.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nsetInterval(function() {\n  gcFlag = true;\n}, gcInterval);\n\n// On next frame\nif (gcFlag) {\n  performGarbageCollection();\n  gcFlag = false;\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Publication Information in HTML\nDESCRIPTION: This HTML snippet provides information about the creation and publication of Cytoscape.js, including the institution, publication details, and authors.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/links.md#2025-04-23_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"pub\">\n\nCreated at the [University of Toronto](https://utoronto.ca) and published in [Oxford Bioinformatics](#introduction/citation) ([2016](https://academic.oup.com/bioinformatics/article/32/2/309/1744007), [2023](https://academic.oup.com/bioinformatics/article/39/1/btad031/6988031)).\n\nAuthored by: [Max Franz](https://github.com/maxkfranz), [Christian Lopes](https://github.com/chrtannus), [Dylan Fong](https://github.com/d2fong), [Mike Kucera](https://github.com/mikekucera), ..., [Gary Bader](https://baderlab.org)\n\n</div>\n```\n\n----------------------------------------\n\nTITLE: Configuring Transition Animations in Cytoscape.js\nDESCRIPTION: These properties control transition animations for style changes, including properties to animate, duration, delay, and timing functions.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/style.md#2025-04-23_snippet_39\n\nLANGUAGE: markdown\nCODE:\n```\n * **`transition-property`** : A space-separated list of style properties to animate in this state.\n * **`transition-duration`** : The length of the transition (e.g. `0.5s`).\n * **`transition-delay`** : The length of the delay before the transition occurs (e.g. `250ms`).\n * **`transition-timing-function`** : An easing function that controls the animation progress curve; may be one of the following values.  A [visualisation](http://easings.net/) of easings serves as a reference.\n   * `linear` (default),\n   * `spring( tension, friction )`\n   * `cubic-bezier( x1, y1, x2, y2 )` (a [demo](http://cubic-bezier.com) has details for parameter values),\n   * `ease`,\n   * `ease-in`,\n   * `ease-out`,\n   * `ease-in-out`,\n   * `ease-in-sine`,\n   * `ease-out-sine`,\n   * `ease-in-out-sine`,\n   * `ease-in-quad`,\n   * `ease-out-quad`,\n   * `ease-in-out-quad`,\n   * `ease-in-cubic`,\n   * `ease-out-cubic`,\n   * `ease-in-out-cubic`,\n   * `ease-in-quart`,\n   * `ease-out-quart`,\n   * `ease-in-out-quart`,\n   * `ease-in-quint`,\n   * `ease-out-quint`,\n   * `ease-in-out-quint`,\n   * `ease-in-expo`,\n   * `ease-out-expo`,\n   * `ease-in-out-expo`,\n   * `ease-in-circ`,\n   * `ease-out-circ`,\n   * `ease-in-out-circ`.\n```\n\n----------------------------------------\n\nTITLE: Disabling User Panning in Cytoscape.js\nDESCRIPTION: This snippet shows how to disable user panning in Cytoscape.js. It uses the userPanningEnabled() method with a boolean parameter set to false.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/core/userPanningEnabled.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncy.userPanningEnabled( false );\n```\n\n----------------------------------------\n\nTITLE: Disabling User Zooming in Cytoscape.js\nDESCRIPTION: This snippet shows how to disable user zooming functionality in Cytoscape.js. It uses the userZoomingEnabled method with a boolean parameter set to false.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/core/userZoomingEnabled.md#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\ncy.userZoomingEnabled( false );\n```\n\n----------------------------------------\n\nTITLE: Event Handling with Cytoscape.js\nDESCRIPTION: Demonstrates how to add event listeners, emit events, and remove listeners using Cytoscape.js. Shows binding multiple handlers to the same event type, triggering events programmatically, and both targeted and broad listener removal.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/collection/removeListener.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar j = cy.$('#j');\nvar handler = function(){ console.log('tap') };\n\n// listen\nj.on('tap', handler);\n\n// listen with some other handler\nj.on('tap', function(){\n  console.log('some other handler');\n});\n\nj.emit('tap'); // 'tap' & 'some other handler'\n\n// remove the renferenced listener handler\nj.removeListener('tap', handler);\n\nj.emit('tap'); // some other handler\n\n// remove all tap listener handlers (including unnamed handler)\nj.removeListener('tap');\n```\n\n----------------------------------------\n\nTITLE: Creating and Controlling Animations in Cytoscape.js\nDESCRIPTION: This snippet demonstrates how to create an animation for a Cytoscape.js element and control its playback. It sets up an animation that changes the background color and width of an element with the ID 'j', then sets the animation progress to 50% before playing it.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/animation/progress.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar jAni = cy.$('#j').animation({\n  style: {\n    'background-color': 'red',\n    'width': 75\n  },\n  duration: 1000\n});\n\n// set animation to 50% and then play\njAni.progress(0.5).play();\n```\n\n----------------------------------------\n\nTITLE: Applying Animation at Specific Progress Point in Cytoscape.js\nDESCRIPTION: Example demonstrating how to create an animation, set it to a specific progress point (50%), apply it immediately, and handle the frame event using promises. This shows how to update an element's style properties without playing the full animation.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/animation/promise.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar jAni = cy.$('#j').animation({\n  style: {\n    'background-color': 'red',\n    'width': 75\n  },\n  duration: 1000\n});\n\njAni.progress(0.5).apply().promise('frame').then(function(){\n  console.log('j has now has its style at 50% of the animation');\n});\n```\n\n----------------------------------------\n\nTITLE: Displaying Project Badges in HTML\nDESCRIPTION: This HTML snippet showcases various badges for the Cytoscape.js project, including links to the GitHub repo, documentation, license, npm package, and other relevant information.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/links.md#2025-04-23_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"links\">\n\n[![GitHub repo](https://img.shields.io/badge/Repo-GitHub-yellow.svg)](https://github.com/cytoscape/cytoscape.js)\n[![Ask a question with Phind](https://img.shields.io/badge/Get%20help-Phind-yellow.svg)](https://www.phind.com/search?q=I%27m%20using%20the%20Cytoscape.js%20graph%20theory%20JS%20library.%20How%20do%20I%20create%20a%20graph%20in%20my%20HTML%20page)\n[![News and tutorials](https://img.shields.io/badge/News%20%26%20tutorials-Blog-yellow.svg)](https://blog.js.cytoscape.org)\n[![License](https://img.shields.io/badge/License-MIT-blue.svg)](https://raw.githubusercontent.com/cytoscape/cytoscape.js/master/LICENSE)\n[![npm](https://img.shields.io/npm/v/cytoscape.svg)](https://www.npmjs.com/package/cytoscape)\n[![DOI](https://zenodo.org/badge/2255947.svg)](https://zenodo.org/badge/latestdoi/2255947)\n[![npm installs](https://img.shields.io/npm/dm/cytoscape.svg?label=npm%20installs)](https://www.npmjs.com/package/cytoscape)\n[![Automated tests](https://github.com/cytoscape/cytoscape.js/actions/workflows/tests.yml/badge.svg)](https://github.com/cytoscape/cytoscape.js/actions/workflows/tests.yml)\n[![Extensions](https://img.shields.io/badge/Extensions-70-brightgreen.svg)](#extensions)\n[![Cloudflare](https://img.shields.io/badge/Powered%20by-Cloudflare-orange.svg)](https://cloudflare.com)\n\n</div>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Farthest Common Ancestor in Cytoscape.js\nDESCRIPTION: This code snippet shows how to obtain the farthest common ancestor of a set of nodes in Cytoscape.js. It uses the commonAncestors() method and selects the last element of the resulting collection.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/collection/commonAncestors.md#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nnodes.commonAncestors().last()\n```\n\n----------------------------------------\n\nTITLE: Retrieving Parallel Edges in Cytoscape.js\nDESCRIPTION: This code snippet demonstrates how to retrieve all edges parallel to a reference edge in Cytoscape.js. The method parallelEdges() is called on a selected edge (with ID 'je') to return all edges that connect the same pair of nodes.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/collection/parallelEdges.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncy.$('#je').parallelEdges();\n```\n\n----------------------------------------\n\nTITLE: Configuring Round Taxi Edge Properties in Cytoscape.js\nDESCRIPTION: This snippet shows the CSS-like properties for styling round taxi edges in Cytoscape.js. It includes options for direction, radius, and turn distances.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/style.md#2025-04-23_snippet_20\n\nLANGUAGE: css\nCODE:\n```\n{\n  curve-style: round-taxi;\n  taxi-direction: auto | vertical | downward | upward | horizontal | rightward | leftward;\n  taxi-radius: <number>;\n  radius-type: arc-radius | influence-radius;\n  taxi-turn: 20px | 50%;\n  taxi-turn-min-distance: 5px;\n  edge-distances: intersection | node-position;\n}\n```\n\n----------------------------------------\n\nTITLE: Finding Codirected Edges in Cytoscape.js\nDESCRIPTION: Demonstrates how to use the codirectedEdges() function to find edges that share the same source and target nodes as the selected edge. In this example, it selects an edge with ID 'je' and finds all edges that connect the same nodes in the same direction.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/collection/codirectedEdges.md#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\ncy.$('#je').codirectedEdges(); // only self in this case\n```\n\n----------------------------------------\n\nTITLE: Animating Pan and Zoom in Cytoscape.js\nDESCRIPTION: This code demonstrates how to animate the viewport to a specific pan position and zoom level. It pans to coordinates (100, 100) and sets the zoom level to 2, with the animation lasting 1000 milliseconds.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/core/animate.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncy.animate({\n  pan: { x: 100, y: 100 },\n  zoom: 2\n}, {\n  duration: 1000\n});\n```\n\n----------------------------------------\n\nTITLE: Using symdiff() for Symmetric Difference in Cytoscape.js\nDESCRIPTION: Demonstrates the symmetric difference operation between two sets of nodes using their IDs. The operation returns elements that are in either the first set (#j, #e, #k) or the second set (#j, #g), but not in both sets.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/collection/symmetricDifference.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncy.$('#j, #e, #k').symdiff('#j, #g');\n```\n\n----------------------------------------\n\nTITLE: Tracking Clicked Nodes with Cytoscape.js Collection in JavaScript\nDESCRIPTION: This snippet demonstrates how to maintain a collection of nodes that have been clicked in a Cytoscape.js graph. It uses the 'union' method to add clicked nodes to the collection.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/core/collection.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar collection = cy.collection();\ncy.nodes().on('click', function(e){\n  var clickedNode = e.target;\n\n  collection = collection.union(clickedNode);\n});\n```\n\n----------------------------------------\n\nTITLE: Using Cytoscape Extensions with require()\nDESCRIPTION: This snippet demonstrates how to use a Cytoscape.js extension with CommonJS require() syntax. The cytoscape.use() method loads the extension for use in your project.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/extensions.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncytoscape.use( require('cy-ext') );\n```\n\n----------------------------------------\n\nTITLE: Exporting a Cytoscape.js Extension Registration Function in JavaScript\nDESCRIPTION: This code exports a default function that registers a new collection function named 'fooBar' with Cytoscape.js. It's designed to be used as the main export of an extension module.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/extensions.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function register(cytoscape){\n  cytoscape('collection', 'fooBar', fooBarFunction);\n}\n```\n\n----------------------------------------\n\nTITLE: Automatic Registration of Cytoscape.js Extension for Script Tags in JavaScript\nDESCRIPTION: This snippet checks if Cytoscape.js is available globally and automatically registers the extension if it is. This is useful for users who include the extension via a script tag.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/extensions.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nif(typeof window.cytoscape !== 'undefined'){\n  register(window.cytoscape);\n}\n```\n\n----------------------------------------\n\nTITLE: Stopping Continuous Cytoscape.js Layout in JavaScript\nDESCRIPTION: Halts the execution of a continuous layout. This method is only applicable to continuous layouts and is not implemented for discrete layouts.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/extensions.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nstop()\n```\n\n----------------------------------------\n\nTITLE: Creating HTML Anchor for Legacy Documentation Links in Cytoscape.js\nDESCRIPTION: This HTML snippet creates a div element with a specific ID that maintains backward compatibility for links to the 'collection/algorithms' section in the Cytoscape.js documentation.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/collection/algorithms.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- maintain the old algorithms link -->\n<div id=\"collection/algorithms\"></div>\n```\n\n----------------------------------------\n\nTITLE: Using removeScratch() Method in Cytoscape.js\nDESCRIPTION: The removeScratch() method sets the scratchpad object for the specified namespace to undefined rather than removing it completely. This design allows developers to use meaningful null values in their applications.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/collection/removeScratch.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nele.removeScratch()\n```\n\n----------------------------------------\n\nTITLE: Adding and Removing Specific Event Handlers in Cytoscape.js\nDESCRIPTION: Demonstrates how to register multiple tap event handlers and then remove a specific handler function. By passing the handler function reference as the second parameter to cy.removeListener(), only that specific handler is removed.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/core/removeListener.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar handler = function(){\n  console.log('called handler');\n};\ncy.on('tap', handler);\n\nvar otherHandler = function(){\n  console.log('called other handler');\n};\ncy.on('tap', otherHandler);\n\n// just remove handler\ncy.removeListener('tap', handler);\n```\n\n----------------------------------------\n\nTITLE: CSS Styling for Cytoscape.js Container\nDESCRIPTION: Example CSS styling for the HTML container element that will hold the Cytoscape.js graph. It's important to define dimensions for the container before initializing Cytoscape.js.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/getting-started.md#2025-04-23_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n#cy {\n  width: 300px;\n  height: 300px;\n  display: block;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Cytoscape.js via Bower\nDESCRIPTION: Command to install Cytoscape.js using the Bower package manager, which is an alternative to npm for front-end dependencies.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/getting-started.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nbower install cytoscape\n```\n\n----------------------------------------\n\nTITLE: Initializing Cytoscape.js with Grouped Elements\nDESCRIPTION: This snippet shows how to initialize Cytoscape.js with elements grouped by nodes and edges. It demonstrates a simpler structure for defining nodes and edges separately.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/notation.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncytoscape({\n  container: document.getElementById('cy'),\n\n  elements: {\n    nodes: [\n      {\n        data: { id: 'a' }\n      },\n\n      {\n        data: { id: 'b' }\n      }\n    ],\n    edges: [\n      {\n        data: { id: 'ab', source: 'a', target: 'b' }\n      }\n    ]\n  },\n\n  layout: {\n    name: 'grid',\n    rows: 1\n  },\n\n  // so we can see the ids\n  style: [\n    {\n      selector: 'node',\n      style: {\n        'label': 'data(id)'\n      }\n    }\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Creating HTML Search Form for Cytoscape.js Questions\nDESCRIPTION: This HTML snippet creates a search form specifically for querying about Cytoscape.js. It includes a hidden input field with a predefined context about using Cytoscape.js, a text input for the user's question, and a submit button with a search icon.\nSOURCE: https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/md/search-question.md#2025-04-23_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"question-search\">\n  <form action=\"https://phind.com/search\" method=\"GET\">\n    <input type=\"hidden\" name=\"c\" value=\"I am using the Cytoscape.js graph theory JS library.\">\n    <input id=\"question-search-input\" type=\"text\" placeholder=\"Get help by asking a question\" autocomplete=\"off\" name=\"q\"></input>\n    <input type=\"submit\" id=\"question-search-submit\" class=\"plain-link\" formtarget=\"_blank\"><span class=\"fa fa-search\"></span></input>\n  </form>\n</div>\n```"
  }
]