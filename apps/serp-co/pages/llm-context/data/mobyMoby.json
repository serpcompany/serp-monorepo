[
  {
    "owner": "moby",
    "repo": "moby",
    "content": "TITLE: Listing Docker Containers using Go Docker Client\nDESCRIPTION: Example code demonstrating how to list all Docker containers using the Docker Engine API client in Go. This is equivalent to running 'docker ps --all' from the command line. The code creates a new client, queries for all containers, and prints their ID, image name, and status.\nSOURCE: https://github.com/moby/moby/blob/master/client/README.md#2025-04-10_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\n\t\"github.com/docker/docker/api/types/container\"\n\t\"github.com/docker/docker/client\"\n)\n\nfunc main() {\n\tapiClient, err := client.NewClientWithOpts(client.FromEnv)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer apiClient.Close()\n\n\tcontainers, err := apiClient.ContainerList(context.Background(), container.ListOptions{All: true})\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tfor _, ctr := range containers {\n\t\tfmt.Printf(\"%s %s (status: %s)\\n\", ctr.ID, ctr.Image, ctr.Status)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Docker Image with HTTP DELETE Request\nDESCRIPTION: Sends a DELETE request to remove a Docker image from the filesystem. The response includes a list of untagged and deleted image layers.\nSOURCE: https://github.com/moby/moby/blob/master/docs/api/v1.24.md#2025-04-10_snippet_59\n\nLANGUAGE: http\nCODE:\n```\nDELETE /v1.24/images/test HTTP/1.1\n```\n\n----------------------------------------\n\nTITLE: Initializing a New Docker Swarm\nDESCRIPTION: POST request to /swarm/init endpoint to initialize a new swarm. Includes parameters for listen address, advertise address, and swarm specifications.\nSOURCE: https://github.com/moby/moby/blob/master/docs/api/v1.24.md#2025-04-10_snippet_96\n\nLANGUAGE: HTTP\nCODE:\n```\nPOST /v1.24/swarm/init HTTP/1.1\nContent-Type: application/json\nContent-Length: 12345\n\n{\n  \"ListenAddr\": \"0.0.0.0:2377\",\n  \"AdvertiseAddr\": \"192.168.1.1:2377\",\n  \"ForceNewCluster\": false,\n  \"Spec\": {\n    \"Orchestration\": {},\n    \"Raft\": {},\n    \"Dispatcher\": {},\n    \"CAConfig\": {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Driver API Interface Methods\nDESCRIPTION: Core API methods that must be implemented by libnetwork drivers for network and endpoint management. These methods handle creation, deletion, and management of networks and endpoints using unique identifiers.\nSOURCE: https://github.com/moby/moby/blob/master/libnetwork/docs/design.md#2025-04-10_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ndriver.Config\ndriver.CreateNetwork\ndriver.DeleteNetwork\ndriver.CreateEndpoint\ndriver.DeleteEndpoint\ndriver.Join\ndriver.Leave\n```\n\n----------------------------------------\n\nTITLE: Testing HTTP Handlers with Go's Testing Package\nDESCRIPTION: Unit test for the health check handler that verifies both the status code and response body. The test creates a request, records the response, and compares against expected values.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/gorilla/mux/README.md#2025-04-10_snippet_20\n\nLANGUAGE: go\nCODE:\n```\n// endpoints_test.go\npackage main\n\nimport (\n    \"net/http\"\n    \"net/http/httptest\"\n    \"testing\"\n)\n\nfunc TestHealthCheckHandler(t *testing.T) {\n    // Create a request to pass to our handler. We don't have any query parameters for now, so we'll\n    // pass 'nil' as the third parameter.\n    req, err := http.NewRequest(\"GET\", \"/health\", nil)\n    if err != nil {\n        t.Fatal(err)\n    }\n\n    // We create a ResponseRecorder (which satisfies http.ResponseWriter) to record the response.\n    rr := httptest.NewRecorder()\n    handler := http.HandlerFunc(HealthCheckHandler)\n\n    // Our handlers satisfy http.Handler, so we can call their ServeHTTP method\n    // directly and pass in our Request and ResponseRecorder.\n    handler.ServeHTTP(rr, req)\n\n    // Check the status code is what we expect.\n    if status := rr.Code; status != http.StatusOK {\n        t.Errorf(\"handler returned wrong status code: got %v want %v\",\n            status, http.StatusOK)\n    }\n\n    // Check the response body is what we expect.\n    expected := `{\"alive\": true}`\n    if rr.Body.String() != expected {\n        t.Errorf(\"handler returned unexpected body: got %v want %v\",\n            rr.Body.String(), expected)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Inspecting Container Details with Docker API\nDESCRIPTION: Makes an HTTP GET request to retrieve detailed information about a specific container by its ID or name. This endpoint provides comprehensive data about the container's configuration, state, network settings, and mounted volumes.\nSOURCE: https://github.com/moby/moby/blob/master/docs/api/v1.24.md#2025-04-10_snippet_12\n\nLANGUAGE: HTTP\nCODE:\n```\nGET /v1.24/containers/4fa6e0f0c678/json HTTP/1.1\n```\n\n----------------------------------------\n\nTITLE: Connect Container to Network API Request/Response\nDESCRIPTION: POST endpoint to connect a container to a network with optional endpoint configuration including IP address settings.\nSOURCE: https://github.com/moby/moby/blob/master/docs/api/v1.24.md#2025-04-10_snippet_85\n\nLANGUAGE: json\nCODE:\n```\nPOST /v1.24/networks/22be93d5babb089c5aab8dbc369042fad48ff791584ca2da2100db837a1c7c30/connect HTTP/1.1\nContent-Type: application/json\nContent-Length: 12345\n\n{\n  \"Container\":\"3613f73ba0e4\",\n  \"EndpointConfig\": {\n    \"IPAMConfig\": {\n        \"IPv4Address\":\"172.24.56.89\",\n        \"IPv6Address\":\"2001:db8::5689\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Routes with Variables in Go using Gorilla Mux\nDESCRIPTION: Shows how to define routes with variables, including regular expression patterns for more specific matching.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/gorilla/mux/README.md#2025-04-10_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nr := mux.NewRouter()\nr.HandleFunc(\"/products/{key}\", ProductHandler)\nr.HandleFunc(\"/articles/{category}/\", ArticlesCategoryHandler)\nr.HandleFunc(\"/articles/{category}/{id:[0-9]+}\", ArticleHandler)\n```\n\n----------------------------------------\n\nTITLE: Loading Images from Tarball via HTTP POST Request\nDESCRIPTION: This snippet shows how to load a set of images and tags into a Docker repository using a POST request to the /images/load endpoint. It includes the request format with Content-Type and an example of the chunked response for both verbose and quiet modes.\nSOURCE: https://github.com/moby/moby/blob/master/docs/api/v1.24.md#2025-04-10_snippet_71\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1.24/images/load\nContent-Type: application/x-tar\nContent-Length: 12345\n\nTarball in body\n```\n\n----------------------------------------\n\nTITLE: Building and Running Development Container\nDESCRIPTION: Use make to build a development environment image and run it in a container, binding the current directory.\nSOURCE: https://github.com/moby/moby/blob/master/docs/contributing/set-up-dev-env.md#2025-04-10_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ make BIND_DIR=. shell\n```\n\n----------------------------------------\n\nTITLE: Running Integration Tests with Debugger Support\nDESCRIPTION: Command to run specific integration tests with debugging enabled, allowing for debugger attachment before test execution begins.\nSOURCE: https://github.com/moby/moby/blob/master/docs/contributing/debug.md#2025-04-10_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ TEST_INTEGRATION_DIR=./integration/networking \\\n    TESTFLAGS='-test.run TestBridgeICC' \\\n    ./hack/make.sh dynbinary test-integration\n```\n\n----------------------------------------\n\nTITLE: Creating Docker Service API Request/Response\nDESCRIPTION: Example of creating a new Docker service using the POST /services/create endpoint. Shows the request body structure with service configuration and the response format.\nSOURCE: https://github.com/moby/moby/blob/master/docs/api/v1.24.md#2025-04-10_snippet_101\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1.24/services/create HTTP/1.1\nContent-Type: application/json\nContent-Length: 12345\n\n{\n  \"Name\": \"web\",\n  \"TaskTemplate\": {\n    \"ContainerSpec\": {\n      \"Image\": \"nginx:alpine\",\n      \"Mounts\": [\n        {\n          \"ReadOnly\": true,\n          \"Source\": \"web-data\",\n          \"Target\": \"/usr/share/nginx/html\",\n          \"Type\": \"volume\",\n          \"VolumeOptions\": {\n            \"DriverConfig\": {\n            },\n            \"Labels\": {\n              \"com.example.something\": \"something-value\"\n            }\n          }\n        }\n      ],\n      \"User\": \"33\"\n    },\n    \"Networks\": [\n        {\n          \"Target\": \"overlay1\"\n        }\n    ],\n    \"LogDriver\": {\n      \"Name\": \"json-file\",\n      \"Options\": {\n        \"max-file\": \"3\",\n        \"max-size\": \"10M\"\n      }\n    },\n    \"Placement\": {\n      \"Constraints\": [\n        \"node.role == worker\"\n      ]\n    },\n    \"Resources\": {\n      \"Limits\": {\n        \"MemoryBytes\": 104857600\n      },\n      \"Reservations\": {\n      }\n    },\n    \"RestartPolicy\": {\n      \"Condition\": \"on-failure\",\n      \"Delay\": 10000000000,\n      \"MaxAttempts\": 10\n    }\n  },\n  \"Mode\": {\n    \"Replicated\": {\n      \"Replicas\": 4\n    }\n  },\n  \"UpdateConfig\": {\n    \"Delay\": 30000000000,\n    \"Parallelism\": 2,\n    \"FailureAction\": \"pause\"\n  },\n  \"EndpointSpec\": {\n    \"Ports\": [\n      {\n        \"Protocol\": \"tcp\",\n        \"PublishedPort\": 8080,\n        \"TargetPort\": 80\n      }\n    ]\n  },\n  \"Labels\": {\n    \"foo\": \"bar\"\n  }\n}\n```\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 201 Created\nContent-Type: application/json\n\n{\n  \"ID\":\"ak7w3gjqoa3kuz8xcpnyy0pvl\"\n}\n```\n\n----------------------------------------\n\nTITLE: Rebuilding and Installing Modified Binary\nDESCRIPTION: Rebuild the Docker daemon binary with changes and install it in the development container.\nSOURCE: https://github.com/moby/moby/blob/master/docs/contributing/set-up-dev-env.md#2025-04-10_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nhack/make.sh binary install-binary\n```\n\n----------------------------------------\n\nTITLE: Get Docker System Information API\nDESCRIPTION: REST endpoint to retrieve system-wide Docker information including architecture, containers, resources, and configuration settings. Returns detailed JSON response with system metrics and settings.\nSOURCE: https://github.com/moby/moby/blob/master/docs/api/v1.24.md#2025-04-10_snippet_64\n\nLANGUAGE: http\nCODE:\n```\nGET /v1.24/info HTTP/1.1\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"Architecture\": \"x86_64\",\n    \"ClusterStore\": \"etcd://localhost:2379\",\n    \"CgroupDriver\": \"cgroupfs\",\n    \"Containers\": 11,\n    \"ContainersRunning\": 7,\n    \"ContainersStopped\": 3,\n    \"ContainersPaused\": 1,\n    \"CpuCfsPeriod\": true,\n    \"CpuCfsQuota\": true,\n    \"Debug\": false,\n    \"DockerRootDir\": \"/var/lib/docker\",\n    \"Driver\": \"btrfs\",\n    \"DriverStatus\": [[\"\"]],\n    \"ExperimentalBuild\": false,\n    \"HttpProxy\": \"http://test:test@localhost:8080\",\n    \"HttpsProxy\": \"https://test:test@localhost:8080\",\n    \"ID\": \"7TRN:IPZB:QYBB:VPBQ:UMPP:KARE:6ZNR:XE6T:7EWV:PKF4:ZOJD:TPYS\",\n    \"IPv4Forwarding\": true,\n    \"Images\": 16,\n    \"IndexServerAddress\": \"https://index.docker.io/v1/\",\n    \"InitPath\": \"/usr/bin/docker\",\n    \"InitSha1\": \"\",\n    \"KernelMemory\": true,\n    \"KernelVersion\": \"3.12.0-1-amd64\",\n    \"Labels\": [\"storage=ssd\"],\n    \"MemTotal\": 2099236864,\n    \"MemoryLimit\": true,\n    \"NCPU\": 1,\n    \"NEventsListener\": 0,\n    \"NFd\": 11,\n    \"NGoroutines\": 21,\n    \"Name\": \"prod-server-42\",\n    \"NoProxy\": \"9.81.1.160\",\n    \"OomKillDisable\": true,\n    \"OSType\": \"linux\",\n    \"OperatingSystem\": \"Boot2Docker\",\n    \"Plugins\": {\n        \"Volume\": [\"local\"],\n        \"Network\": [\"null\", \"host\", \"bridge\"]\n    },\n    \"RegistryConfig\": {\n        \"IndexConfigs\": {\n            \"docker.io\": {\n                \"Mirrors\": null,\n                \"Name\": \"docker.io\",\n                \"Official\": true,\n                \"Secure\": true\n            }\n        },\n        \"InsecureRegistryCIDRs\": [\"127.0.0.0/8\"]\n    },\n    \"SecurityOptions\": [\"apparmor\", \"seccomp\", \"selinux\"],\n    \"ServerVersion\": \"1.9.0\",\n    \"SwapLimit\": false,\n    \"SystemStatus\": [[\"State\", \"Healthy\"]],\n    \"SystemTime\": \"2015-03-10T11:11:23.730591467-07:00\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Docker Container via HTTP POST Request\nDESCRIPTION: This snippet demonstrates how to create a Docker container using an HTTP POST request to the Docker API. It includes a comprehensive JSON body with various container configuration options.\nSOURCE: https://github.com/moby/moby/blob/master/docs/api/v1.24.md#2025-04-10_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1.24/containers/create HTTP/1.1\nContent-Type: application/json\nContent-Length: 12345\n\n{\n       \"Hostname\": \"\",\n       \"Domainname\": \"\",\n       \"User\": \"\",\n       \"AttachStdin\": false,\n       \"AttachStdout\": true,\n       \"AttachStderr\": true,\n       \"Tty\": false,\n       \"OpenStdin\": false,\n       \"StdinOnce\": false,\n       \"Env\": [\n               \"FOO=bar\",\n               \"BAZ=quux\"\n       ],\n       \"Cmd\": [\n               \"date\"\n       ],\n       \"Entrypoint\": \"\",\n       \"Image\": \"ubuntu\",\n       \"Labels\": {\n               \"com.example.vendor\": \"Acme\",\n               \"com.example.license\": \"GPL\",\n               \"com.example.version\": \"1.0\"\n       },\n       \"Volumes\": {\n         \"/volumes/data\": {}\n       },\n       \"Healthcheck\":{\n          \"Test\": [\"CMD-SHELL\", \"curl localhost:3000\"],\n          \"Interval\": 1000000000,\n          \"Timeout\": 10000000000,\n          \"Retries\": 10,\n          \"StartPeriod\": 60000000000\n       },\n       \"WorkingDir\": \"\",\n       \"NetworkDisabled\": false,\n       \"MacAddress\": \"12:34:56:78:9a:bc\",\n       \"ExposedPorts\": {\n               \"22/tcp\": {}\n       },\n       \"StopSignal\": \"SIGTERM\",\n       \"HostConfig\": {\n         \"Binds\": [\"/tmp:/tmp\"],\n         \"Tmpfs\": { \"/run\": \"rw,noexec,nosuid,size=65536k\" },\n         \"Links\": [\"redis3:redis\"],\n         \"Memory\": 0,\n         \"MemorySwap\": 0,\n         \"MemoryReservation\": 0,\n         \"KernelMemory\": 0,\n         \"CpuPercent\": 80,\n         \"CpuShares\": 512,\n         \"CpuPeriod\": 100000,\n         \"CpuQuota\": 50000,\n         \"CpusetCpus\": \"0,1\",\n         \"CpusetMems\": \"0,1\",\n         \"IOMaximumBandwidth\": 0,\n         \"IOMaximumIOps\": 0,\n         \"BlkioWeight\": 300,\n         \"BlkioWeightDevice\": [{}],\n         \"BlkioDeviceReadBps\": [{}],\n         \"BlkioDeviceReadIOps\": [{}],\n         \"BlkioDeviceWriteBps\": [{}],\n         \"BlkioDeviceWriteIOps\": [{}],\n         \"MemorySwappiness\": 60,\n         \"OomKillDisable\": false,\n         \"OomScoreAdj\": 500,\n         \"PidMode\": \"\",\n         \"PidsLimit\": -1,\n         \"PortBindings\": { \"22/tcp\": [{ \"HostPort\": \"11022\" }] },\n         \"PublishAllPorts\": false,\n         \"Privileged\": false,\n         \"ReadonlyRootfs\": false,\n         \"Dns\": [\"8.8.8.8\"],\n         \"DnsOptions\": [\"\"],\n         \"DnsSearch\": [\"\"],\n         \"ExtraHosts\": null,\n         \"VolumesFrom\": [\"parent\", \"other:ro\"],\n         \"CapAdd\": [\"NET_ADMIN\"],\n         \"CapDrop\": [\"MKNOD\"],\n         \"GroupAdd\": [\"newgroup\"],\n         \"RestartPolicy\": { \"Name\": \"\", \"MaximumRetryCount\": 0 },\n         \"NetworkMode\": \"bridge\",\n         \"Devices\": [],\n         \"Sysctls\": { \"net.ipv4.ip_forward\": \"1\" },\n         \"Ulimits\": [{}],\n         \"LogConfig\": { \"Type\": \"json-file\", \"Config\": {} },\n         \"SecurityOpt\": [],\n         \"StorageOpt\": {},\n         \"CgroupParent\": \"\",\n         \"VolumeDriver\": \"\",\n         \"ShmSize\": 67108864\n      },\n      \"NetworkingConfig\": {\n          \"EndpointsConfig\": {\n              \"isolated_nw\" : {\n                  \"IPAMConfig\": {\n                      \"IPv4Address\":\"172.20.30.33\",\n                      \"IPv6Address\":\"2001:db8:abcd::3033\",\n                      \"LinkLocalIPs\":[\"169.254.34.68\", \"fe80::3468\"]\n                  },\n                  \"Links\":[\"container_1\", \"container_2\"],\n                  \"Aliases\":[\"server_x\", \"server_y\"]\n              }\n          }\n      }\n  }\n```\n\n----------------------------------------\n\nTITLE: Container JSON Response Structure in Docker API\nDESCRIPTION: Example of a JSON response from the container inspection endpoint. Contains detailed information including container configuration, host settings, network configuration, state, and mounted volumes.\nSOURCE: https://github.com/moby/moby/blob/master/docs/api/v1.24.md#2025-04-10_snippet_13\n\nLANGUAGE: JSON\nCODE:\n```\n{\n\t\"AppArmorProfile\": \"\",\n\t\"Args\": [\n\t\t\"-c\",\n\t\t\"exit 9\"\n\t],\n\t\"Config\": {\n\t\t\"AttachStderr\": true,\n\t\t\"AttachStdin\": false,\n\t\t\"AttachStdout\": true,\n\t\t\"Cmd\": [\n\t\t\t\"/bin/sh\",\n\t\t\t\"-c\",\n\t\t\t\"exit 9\"\n\t\t],\n\t\t\"Domainname\": \"\",\n\t\t\"Entrypoint\": null,\n\t\t\"Env\": [\n\t\t\t\"PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\"\n\t\t],\n\t\t\"ExposedPorts\": null,\n\t\t\"Hostname\": \"ba033ac44011\",\n\t\t\"Image\": \"ubuntu\",\n\t\t\"Labels\": {\n\t\t\t\"com.example.vendor\": \"Acme\",\n\t\t\t\"com.example.license\": \"GPL\",\n\t\t\t\"com.example.version\": \"1.0\"\n\t\t},\n\t\t\"MacAddress\": \"\",\n\t\t\"NetworkDisabled\": false,\n\t\t\"OnBuild\": null,\n\t\t\"OpenStdin\": false,\n\t\t\"StdinOnce\": false,\n\t\t\"Tty\": false,\n\t\t\"User\": \"\",\n\t\t\"Volumes\": {\n\t\t\t\"/volumes/data\": {}\n\t\t},\n\t\t\"WorkingDir\": \"\",\n\t\t\"StopSignal\": \"SIGTERM\"\n\t},\n\t\"Created\": \"2015-01-06T15:47:31.485331387Z\",\n\t\"Driver\": \"overlay2\",\n\t\"ExecIDs\": null,\n\t\"HostConfig\": {\n\t\t\"Binds\": null,\n\t\t\"IOMaximumBandwidth\": 0,\n\t\t\"IOMaximumIOps\": 0,\n\t\t\"BlkioWeight\": 0,\n\t\t\"BlkioWeightDevice\": [{}],\n\t\t\"BlkioDeviceReadBps\": [{}],\n\t\t\"BlkioDeviceWriteBps\": [{}],\n\t\t\"BlkioDeviceReadIOps\": [{}],\n\t\t\"BlkioDeviceWriteIOps\": [{}],\n\t\t\"CapAdd\": null,\n\t\t\"CapDrop\": null,\n\t\t\"ContainerIDFile\": \"\",\n\t\t\"CpusetCpus\": \"\",\n\t\t\"CpusetMems\": \"\",\n\t\t\"CpuPercent\": 80,\n\t\t\"CpuShares\": 0,\n\t\t\"CpuPeriod\": 100000,\n\t\t\"Devices\": [],\n\t\t\"Dns\": null,\n\t\t\"DnsOptions\": null,\n\t\t\"DnsSearch\": null,\n\t\t\"ExtraHosts\": null,\n\t\t\"IpcMode\": \"\",\n\t\t\"Links\": null,\n\t\t\"Memory\": 0,\n\t\t\"MemorySwap\": 0,\n\t\t\"MemoryReservation\": 0,\n\t\t\"KernelMemory\": 0,\n\t\t\"OomKillDisable\": false,\n\t\t\"OomScoreAdj\": 500,\n\t\t\"NetworkMode\": \"bridge\",\n\t\t\"PidMode\": \"\",\n\t\t\"PortBindings\": {},\n\t\t\"Privileged\": false,\n\t\t\"ReadonlyRootfs\": false,\n\t\t\"PublishAllPorts\": false,\n\t\t\"RestartPolicy\": {\n\t\t\t\"MaximumRetryCount\": 2,\n\t\t\t\"Name\": \"on-failure\"\n\t\t},\n\t\t\"LogConfig\": {\n\t\t\t\"Config\": null,\n\t\t\t\"Type\": \"json-file\"\n\t\t},\n\t\t\"SecurityOpt\": null,\n\t\t\"Sysctls\": {\n\t\t        \"net.ipv4.ip_forward\": \"1\"\n\t\t},\n\t\t\"StorageOpt\": null,\n\t\t\"VolumesFrom\": null,\n\t\t\"Ulimits\": [{}],\n\t\t\"VolumeDriver\": \"\",\n\t\t\"ShmSize\": 67108864\n\t},\n\t\"HostnamePath\": \"/var/lib/docker/containers/ba033ac4401106a3b513bc9d639eee123ad78ca3616b921167cd74b20e25ed39/hostname\",\n\t\"HostsPath\": \"/var/lib/docker/containers/ba033ac4401106a3b513bc9d639eee123ad78ca3616b921167cd74b20e25ed39/hosts\",\n\t\"LogPath\": \"/var/lib/docker/containers/1eb5fabf5a03807136561b3c00adcd2992b535d624d5e18b6cdc6a6844d9767b/1eb5fabf5a03807136561b3c00adcd2992b535d624d5e18b6cdc6a6844d9767b-json.log\",\n\t\"Id\": \"ba033ac4401106a3b513bc9d639eee123ad78ca3616b921167cd74b20e25ed39\",\n\t\"Image\": \"04c5d3b7b0656168630d3ba35d8889bd0e9caafcaeb3004d2bfbc47e7c5d35d2\",\n\t\"MountLabel\": \"\",\n\t\"Name\": \"/boring_euclid\",\n\t\"NetworkSettings\": {\n\t\t\"Bridge\": \"\",\n\t\t\"SandboxID\": \"\",\n\t\t\"HairpinMode\": false,\n\t\t\"LinkLocalIPv6Address\": \"\",\n\t\t\"LinkLocalIPv6PrefixLen\": 0,\n\t\t\"Ports\": null,\n\t\t\"SandboxKey\": \"\",\n\t\t\"SecondaryIPAddresses\": null,\n\t\t\"SecondaryIPv6Addresses\": null,\n\t\t\"EndpointID\": \"\",\n\t\t\"Gateway\": \"\",\n\t\t\"GlobalIPv6Address\": \"\",\n\t\t\"GlobalIPv6PrefixLen\": 0,\n\t\t\"IPAddress\": \"\",\n\t\t\"IPPrefixLen\": 0,\n\t\t\"IPv6Gateway\": \"\",\n\t\t\"MacAddress\": \"\",\n\t\t\"Networks\": {\n\t\t\t\"bridge\": {\n\t\t\t\t\"NetworkID\": \"7ea29fc1412292a2d7bba362f9253545fecdfa8ce9a6e37dd10ba8bee7129812\",\n\t\t\t\t\"EndpointID\": \"7587b82f0dada3656fda26588aee72630c6fab1536d36e394b2bfbcf898c971d\",\n\t\t\t\t\"Gateway\": \"172.17.0.1\",\n\t\t\t\t\"IPAddress\": \"172.17.0.2\",\n\t\t\t\t\"IPPrefixLen\": 16,\n\t\t\t\t\"IPv6Gateway\": \"\",\n\t\t\t\t\"GlobalIPv6Address\": \"\",\n\t\t\t\t\"GlobalIPv6PrefixLen\": 0,\n\t\t\t\t\"MacAddress\": \"02:42:ac:12:00:02\"\n\t\t\t}\n\t\t}\n\t},\n\t\"Path\": \"/bin/sh\",\n\t\"ProcessLabel\": \"\",\n\t\"ResolvConfPath\": \"/var/lib/docker/containers/ba033ac4401106a3b513bc9d639eee123ad78ca3616b921167cd74b20e25ed39/resolv.conf\",\n\t\"RestartCount\": 1,\n\t\"State\": {\n\t\t\"Error\": \"\",\n\t\t\"ExitCode\": 9,\n\t\t\"FinishedAt\": \"2015-01-06T15:47:32.080254511Z\",\n\t\t\"OOMKilled\": false,\n\t\t\"Dead\": false,\n\t\t\"Paused\": false,\n\t\t\"Pid\": 0,\n\t\t\"Restarting\": false,\n\t\t\"Running\": true,\n\t\t\"StartedAt\": \"2015-01-06T15:47:32.072697474Z\",\n\t\t\"Status\": \"running\"\n\t},\n\t\"Mounts\": [\n\t\t{\n\t\t\t\"Name\": \"fac362...80535\",\n\t\t\t\"Source\": \"/data\",\n\t\t\t\"Destination\": \"/data\",\n\t\t\t\"Driver\": \"local\",\n\t\t\t\"Mode\": \"ro,Z\",\n\t\t\t\"RW\": false,\n\t\t\t\"Propagation\": \"\"\n\t\t}\n\t]\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Image Tarball via HTTP GET Request\nDESCRIPTION: This snippet demonstrates how to retrieve a tarball containing all images in a repository using a GET request to the /images/(name)/get endpoint. It shows the request format and expected response type.\nSOURCE: https://github.com/moby/moby/blob/master/docs/api/v1.24.md#2025-04-10_snippet_70\n\nLANGUAGE: http\nCODE:\n```\nGET /v1.24/images/ubuntu/get\n```\n\n----------------------------------------\n\nTITLE: Building Docker Daemon with Docker Buildx Commands\nDESCRIPTION: This snippet shows various Docker Buildx bake commands for building the Docker daemon and related tools with different configurations. It covers building for the current host platform, cross-compilation, dynamic linking, complete builds including dependencies, and packaging binaries into images for distribution.\nSOURCE: https://github.com/moby/moby/blob/master/docs/contributing/ctn-build.md#2025-04-10_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# build binaries for the current host platform\n# output to ./bundles/binary-daemon by default\ndocker buildx bake\n# or\ndocker buildx bake binary\n\n# build binaries for the current host platform\n# output to ./bin\nDESTDIR=./bin docker buildx bake\n\n# build dynamically linked binaries\n# output to ./bundles/dynbinary-daemon by default\nDOCKER_STATIC=0 docker buildx bake\n# or\ndocker buildx bake dynbinary\n\n# build binaries for all supported platforms\ndocker buildx bake binary-cross\n\n# build binaries for a specific platform\ndocker buildx bake --set *.platform=linux/arm64\n\n# build \"complete\" binaries (including containerd, runc, vpnkit, etc.)\ndocker buildx bake all\n\n# build \"complete\" binaries for all supported platforms\ndocker buildx bake all-cross\n\n# build non-runnable image wrapping \"complete\" binaries\n# useful for use with undock and sharing via a registry\ndocker buildx bake bin-image\n\n# build non-runnable image wrapping \"complete\" binaries, with custom tag\ndocker buildx bake bin-image --set \"*.tags=foo/moby-bin:latest\"\n\n# build non-runnable image wrapping \"complete\" binaries for all supported platforms\n# multi-platform images must be directly pushed to a registry\ndocker buildx bake bin-image-cross --set \"*.tags=foo/moby-bin:latest\" --push\n```\n\n----------------------------------------\n\nTITLE: Launching Development Container with Debugging Support\nDESCRIPTION: Command to start a development container with debugging enabled. It disables build optimizations and exposes the Delve debugger port.\nSOURCE: https://github.com/moby/moby/blob/master/docs/contributing/debug.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ make BIND_DIR=. DOCKER_DEBUG=1 DELVE_PORT=127.0.0.1:2345:2345 shell\n```\n\n----------------------------------------\n\nTITLE: Create Network API Request/Response\nDESCRIPTION: POST endpoint to create a new network with specified configuration including name, driver, IPAM settings and options.\nSOURCE: https://github.com/moby/moby/blob/master/docs/api/v1.24.md#2025-04-10_snippet_84\n\nLANGUAGE: json\nCODE:\n```\nPOST /v1.24/networks/create HTTP/1.1\nContent-Type: application/json\nContent-Length: 12345\n\n{\n  \"Name\":\"isolated_nw\",\n  \"CheckDuplicate\":true,\n  \"Driver\":\"bridge\",\n  \"EnableIPv6\": true,\n  \"IPAM\":{\n    \"Driver\": \"default\",\n    \"Config\":[\n      {\n        \"Subnet\":\"172.20.0.0/16\",\n        \"IPRange\":\"172.20.10.0/24\",\n        \"Gateway\":\"172.20.10.11\"\n      },\n      {\n        \"Subnet\":\"2001:db8:abcd::/64\",\n        \"Gateway\":\"2001:db8:abcd::1011\"\n      }\n    ],\n    \"Options\": {\n      \"foo\": \"bar\"\n    }\n  },\n  \"Internal\":true,\n  \"Options\": {\n    \"com.docker.network.bridge.default_bridge\": \"true\",\n    \"com.docker.network.bridge.enable_icc\": \"true\",\n    \"com.docker.network.bridge.enable_ip_masquerade\": \"true\",\n    \"com.docker.network.bridge.host_binding_ipv4\": \"0.0.0.0\",\n    \"com.docker.network.bridge.name\": \"docker0\",\n    \"com.docker.network.driver.mtu\": \"1500\"\n  },\n  \"Labels\": {\n    \"com.example.some-label\": \"some-value\",\n    \"com.example.some-other-label\": \"some-other-value\"\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\nHTTP/1.1 201 Created\nContent-Type: application/json\n\n{\n  \"Id\": \"22be93d5babb089c5aab8dbc369042fad48ff791584ca2da2100db837a1c7c30\",\n  \"Warning\": \"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Inspect Node API Request/Response\nDESCRIPTION: HTTP GET endpoint to retrieve detailed information about a specific node by ID or name. Returns the complete node object including version, specs, description, status and manager status.\nSOURCE: https://github.com/moby/moby/blob/master/docs/api/v1.24.md#2025-04-10_snippet_92\n\nLANGUAGE: HTTP\nCODE:\n```\nGET /v1.24/nodes/24ifsmvkjbyhk HTTP/1.1\n```\n\nLANGUAGE: JSON\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Type: application/json\n\n{\n  \"ID\": \"24ifsmvkjbyhk\",\n  \"Version\": {\n    \"Index\": 8\n  },\n  \"CreatedAt\": \"2016-06-07T20:31:11.853781916Z\",\n  \"UpdatedAt\": \"2016-06-07T20:31:11.999868824Z\",\n  \"Spec\": {\n    \"Name\": \"my-node\",\n    \"Role\": \"manager\",\n    \"Availability\": \"active\"\n    \"Labels\": {\n        \"foo\": \"bar\"\n    }\n  },\n  \"Description\": {\n    \"Hostname\": \"bf3067039e47\",\n    \"Platform\": {\n      \"Architecture\": \"x86_64\",\n      \"OS\": \"linux\"\n    },\n    \"Resources\": {\n      \"NanoCPUs\": 4000000000,\n      \"MemoryBytes\": 8272408576\n    },\n    \"Engine\": {\n      \"EngineVersion\": \"1.12.0\",\n      \"Labels\": {\n          \"foo\": \"bar\",\n      }\n      \"Plugins\": [\n        {\n          \"Type\": \"Volume\",\n          \"Name\": \"local\"\n        },\n        {\n          \"Type\": \"Network\",\n          \"Name\": \"bridge\"\n        }\n        {\n          \"Type\": \"Network\",\n          \"Name\": \"null\"\n        }\n        {\n          \"Type\": \"Network\",\n          \"Name\": \"overlay\"\n        }\n      ]\n    }\n  },\n  \"Status\": {\n    \"State\": \"ready\"\n  },\n  \"ManagerStatus\": {\n    \"Leader\": true,\n    \"Reachability\": \"reachable\",\n    \"Addr\": \"172.17.0.2:2377\"\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Service Message Type in Protocol Buffers for Docker Swarmkit\nDESCRIPTION: This snippet defines the Service message type, representing a service in the Swarm. It includes fields for service identification, specifications, endpoints, and update status.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/moby/swarmkit/v2/api/api.pb.txt#2025-04-10_snippet_78\n\nLANGUAGE: Protocol Buffers\nCODE:\n```\nmessage_type {\n  name: \"Service\"\n  field {\n    name: \"id\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"id\"\n  }\n  field {\n    name: \"meta\"\n    number: 2\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".docker.swarmkit.v1.Meta\"\n    options {\n      65001: 0\n    }\n    json_name: \"meta\"\n  }\n  field {\n    name: \"spec\"\n    number: 3\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".docker.swarmkit.v1.ServiceSpec\"\n    options {\n      65001: 0\n    }\n    json_name: \"spec\"\n  }\n  field {\n    name: \"spec_version\"\n    number: 10\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".docker.swarmkit.v1.Version\"\n    json_name: \"specVersion\"\n  }\n  field {\n    name: \"previous_spec\"\n    number: 6\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".docker.swarmkit.v1.ServiceSpec\"\n    json_name: \"previousSpec\"\n  }\n  field {\n    name: \"previous_spec_version\"\n    number: 11\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".docker.swarmkit.v1.Version\"\n    json_name: \"previousSpecVersion\"\n  }\n  field {\n    name: \"endpoint\"\n    number: 4\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".docker.swarmkit.v1.Endpoint\"\n    json_name: \"endpoint\"\n  }\n  field {\n    name: \"update_status\"\n    number: 5\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".docker.swarmkit.v1.UpdateStatus\"\n    json_name: \"updateStatus\"\n  }\n  field {\n    name: \"job_status\"\n    number: 12\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".docker.swarmkit.v1.JobStatus\"\n    json_name: \"jobStatus\"\n  }\n  field {\n    name: \"pending_delete\"\n    number: 7\n    label: LABEL_OPTIONAL\n    type: TYPE_BOOL\n    json_name: \"pendingDelete\"\n  }\n  options {\n    70001 {\n      1 {\n        1: 1\n        2: 1\n        3: 1\n        4: 1\n        5: 1\n        6: 1\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Container Stats via HTTP Request\nDESCRIPTION: Example HTTP GET request to retrieve statistics about resource usage for a container named 'redis1'.\nSOURCE: https://github.com/moby/moby/blob/master/docs/api/v1.24.md#2025-04-10_snippet_24\n\nLANGUAGE: http\nCODE:\n```\nGET /v1.24/containers/redis1/stats HTTP/1.1\n```\n\n----------------------------------------\n\nTITLE: Container Stats Response in JSON\nDESCRIPTION: Example JSON response from the container stats endpoint, showing detailed statistics about container resource usage including CPU, memory, network, and block I/O statistics.\nSOURCE: https://github.com/moby/moby/blob/master/docs/api/v1.24.md#2025-04-10_snippet_25\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Type: application/json\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"read\" : \"2015-01-08T22:57:31.547920715Z\",\n   \"pids_stats\": {\n      \"current\": 3\n   },\n   \"networks\": {\n           \"eth0\": {\n               \"rx_bytes\": 5338,\n               \"rx_dropped\": 0,\n               \"rx_errors\": 0,\n               \"rx_packets\": 36,\n               \"tx_bytes\": 648,\n               \"tx_dropped\": 0,\n               \"tx_errors\": 0,\n               \"tx_packets\": 8\n           },\n           \"eth5\": {\n               \"rx_bytes\": 4641,\n               \"rx_dropped\": 0,\n               \"rx_errors\": 0,\n               \"rx_packets\": 26,\n               \"tx_bytes\": 690,\n               \"tx_dropped\": 0,\n               \"tx_errors\": 0,\n               \"tx_packets\": 9\n           }\n   },\n   \"memory_stats\" : {\n      \"stats\" : {\n         \"total_pgmajfault\" : 0,\n         \"cache\" : 0,\n         \"mapped_file\" : 0,\n         \"total_inactive_file\" : 0,\n         \"pgpgout\" : 414,\n         \"rss\" : 6537216,\n         \"total_mapped_file\" : 0,\n         \"writeback\" : 0,\n         \"unevictable\" : 0,\n         \"pgpgin\" : 477,\n         \"total_unevictable\" : 0,\n         \"pgmajfault\" : 0,\n         \"total_rss\" : 6537216,\n         \"total_rss_huge\" : 6291456,\n         \"total_writeback\" : 0,\n         \"total_inactive_anon\" : 0,\n         \"rss_huge\" : 6291456,\n         \"hierarchical_memory_limit\" : 67108864,\n         \"total_pgfault\" : 964,\n         \"total_active_file\" : 0,\n         \"active_anon\" : 6537216,\n         \"total_active_anon\" : 6537216,\n         \"total_pgpgout\" : 414,\n         \"total_cache\" : 0,\n         \"inactive_anon\" : 0,\n         \"active_file\" : 0,\n         \"pgfault\" : 964,\n         \"inactive_file\" : 0,\n         \"total_pgpgin\" : 477\n      },\n      \"max_usage\" : 6651904,\n      \"usage\" : 6537216,\n      \"failcnt\" : 0,\n      \"limit\" : 67108864\n   },\n   \"blkio_stats\" : {},\n   \"cpu_stats\" : {\n      \"cpu_usage\" : {\n         \"percpu_usage\" : [\n            8646879,\n            24472255,\n            36438778,\n            30657443\n         ],\n         \"usage_in_usermode\" : 50000000,\n         \"total_usage\" : 100215355,\n         \"usage_in_kernelmode\" : 30000000\n      },\n      \"system_cpu_usage\" : 739306590000000,\n      \"throttling_data\" : {\"periods\":0,\"throttled_periods\":0,\"throttled_time\":0}\n   },\n   \"precpu_stats\" : {\n      \"cpu_usage\" : {\n         \"percpu_usage\" : [\n            8646879,\n            24350896,\n            36438778,\n            30657443\n         ],\n         \"usage_in_usermode\" : 50000000,\n         \"total_usage\" : 100093996,\n         \"usage_in_kernelmode\" : 30000000\n      },\n      \"system_cpu_usage\" : 9492140000000,\n      \"throttling_data\" : {\"periods\":0,\"throttled_periods\":0,\"throttled_time\":0}\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Build Docker Image from Dockerfile API\nDESCRIPTION: POST endpoint to build a Docker image from a Dockerfile within a tar archive. Supports multiple build parameters and returns a stream of build status messages.\nSOURCE: https://github.com/moby/moby/blob/master/docs/api/v1.24.md#2025-04-10_snippet_51\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1.24/build HTTP/1.1\nContent-Type: application/x-tar\n\n{{ TAR STREAM }}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\"stream\": \"Step 1/5...\"}\n{\"stream\": \"...\"}\n{\"error\": \"Error...\", \"errorDetail\": {\"code\": 123, \"message\": \"Error...\"}}\n```\n\n----------------------------------------\n\nTITLE: Comprehensive Set Operations Example in Go\nDESCRIPTION: Demonstrates creating various sets and performing set operations including union, intersection, difference, and contains. Shows how to initialize sets with different elements and manage class categories.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/deckarep/golang-set/v2/README.md#2025-04-10_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n  \"fmt\"\n  mapset \"github.com/deckarep/golang-set/v2\"\n)\n\nfunc main() {\n  // Create a string-based set of required classes.\n  required := mapset.NewSet[string]()\n  required.Add(\"cooking\")\n  required.Add(\"english\")\n  required.Add(\"math\")\n  required.Add(\"biology\")\n\n  // Create a string-based set of science classes.\n  sciences := mapset.NewSet[string]()\n  sciences.Add(\"biology\")\n  sciences.Add(\"chemistry\")\n  \n  // Create a string-based set of electives.\n  electives := mapset.NewSet[string]()\n  electives.Add(\"welding\")\n  electives.Add(\"music\")\n  electives.Add(\"automotive\")\n\n  // Create a string-based set of bonus programming classes.\n  bonus := mapset.NewSet[string]()\n  bonus.Add(\"beginner go\")\n  bonus.Add(\"python for dummies\")\n}\n```\n\n----------------------------------------\n\nTITLE: Running Build Scripts via make.sh in Moby Project\nDESCRIPTION: Examples of how to use the make.sh script to build specific bundles or run all default bundles. The script should be called from the parent directory with bundle names as arguments.\nSOURCE: https://github.com/moby/moby/blob/master/hack/make/README.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./hack/make.sh binary ubuntu\n\n# Or to run all default bundles:\n./hack/make.sh\n```\n\n----------------------------------------\n\nTITLE: Building Docker Daemon Binary\nDESCRIPTION: Compile the Docker daemon binary within the development container.\nSOURCE: https://github.com/moby/moby/blob/master/docs/contributing/set-up-dev-env.md#2025-04-10_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n# hack/make.sh binary\n```\n\n----------------------------------------\n\nTITLE: Monitoring Docker Events via HTTP GET Request\nDESCRIPTION: This snippet demonstrates how to monitor Docker events in real-time using a GET request to the /events endpoint. It includes query parameters for filtering events and shows an example response with various event types.\nSOURCE: https://github.com/moby/moby/blob/master/docs/api/v1.24.md#2025-04-10_snippet_68\n\nLANGUAGE: http\nCODE:\n```\nGET /v1.24/events?since=1374067924\n```\n\n----------------------------------------\n\nTITLE: Authenticating Docker Registry with HTTP POST Request\nDESCRIPTION: Sends a POST request to validate credentials for a Docker registry and obtain an identity token. The request body includes the username, password, and server address.\nSOURCE: https://github.com/moby/moby/blob/master/docs/api/v1.24.md#2025-04-10_snippet_62\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1.24/auth HTTP/1.1\nContent-Type: application/json\nContent-Length: 12345\n\n{\n     \"username\": \"hannibal\",\n     \"password\": \"xxxx\",\n     \"serveraddress\": \"https://index.docker.io/v1/\"\n}\n```\n\n----------------------------------------\n\nTITLE: Get Docker Version Information API\nDESCRIPTION: REST endpoint to retrieve Docker version information including OS, kernel version, Go version, and build details. Returns JSON response with version-related data.\nSOURCE: https://github.com/moby/moby/blob/master/docs/api/v1.24.md#2025-04-10_snippet_65\n\nLANGUAGE: http\nCODE:\n```\nGET /v1.24/version HTTP/1.1\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n     \"Version\": \"1.12.0\",\n     \"Os\": \"linux\",\n     \"KernelVersion\": \"3.19.0-23-generic\",\n     \"GoVersion\": \"go1.6.3\",\n     \"GitCommit\": \"deadbee\",\n     \"Arch\": \"amd64\",\n     \"ApiVersion\": \"1.24\",\n     \"BuildTime\": \"2016-06-14T07:09:13.444803460+00:00\",\n     \"Experimental\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Updating a Docker Swarm Service via HTTP POST\nDESCRIPTION: This snippet illustrates how to update a Docker Swarm service using the POST HTTP method. It includes the request format with a JSON body containing the updated service configuration.\nSOURCE: https://github.com/moby/moby/blob/master/docs/api/v1.24.md#2025-04-10_snippet_104\n\nLANGUAGE: HTTP\nCODE:\n```\nPOST /v1.24/services/1cb4dnqcyx6m66g2t538x3rxha/update?version=23 HTTP/1.1\nContent-Type: application/json\nContent-Length: 12345\n\n{\n  \"Name\": \"top\",\n  \"TaskTemplate\": {\n    \"ContainerSpec\": {\n      \"Image\": \"busybox\",\n      \"Args\": [\n        \"top\"\n      ]\n    },\n    \"Resources\": {\n      \"Limits\": {},\n      \"Reservations\": {}\n    },\n    \"RestartPolicy\": {\n      \"Condition\": \"any\",\n      \"MaxAttempts\": 0\n    },\n    \"Placement\": {}\n  },\n  \"Mode\": {\n    \"Replicated\": {\n      \"Replicas\": 1\n    }\n  },\n  \"UpdateConfig\": {\n    \"Parallelism\": 1\n  },\n  \"EndpointSpec\": {\n    \"Mode\": \"vip\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Update Node API Request/Response\nDESCRIPTION: HTTP POST endpoint to update a node's specifications. Requires version parameter to avoid conflicts. Can update availability, name, role and labels.\nSOURCE: https://github.com/moby/moby/blob/master/docs/api/v1.24.md#2025-04-10_snippet_94\n\nLANGUAGE: HTTP\nCODE:\n```\nPOST /v1.24/nodes/24ifsmvkjbyhk/update?version=8 HTTP/1.1\nContent-Type: application/json\nContent-Length: 12345\n\n{\n  \"Availability\": \"active\",\n  \"Name\": \"node-name\",\n  \"Role\": \"manager\",\n  \"Labels\": {\n    \"foo\": \"bar\"\n  }\n}\n\nHTTP/1.1 200 OK\nContent-Length: 0\nContent-Type: text/plain; charset=utf-8\n```\n\n----------------------------------------\n\nTITLE: Basic Memberlist Implementation in Go\nDESCRIPTION: Example code showing how to create a memberlist instance, join an existing cluster, and access member information. This demonstrates the core functionality of initializing the memberlist with a default configuration, connecting to a cluster, and retrieving membership data.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/hashicorp/memberlist/README.md#2025-04-10_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n/* Create the initial memberlist from a safe configuration.\n   Please reference the godoc for other default config types.\n   http://godoc.org/github.com/hashicorp/memberlist#Config\n*/\nlist, err := memberlist.Create(memberlist.DefaultLocalConfig())\nif err != nil {\n\tpanic(\"Failed to create memberlist: \" + err.Error())\n}\n\n// Join an existing cluster by specifying at least one known member.\nn, err := list.Join([]string{\"1.2.3.4\"})\nif err != nil {\n\tpanic(\"Failed to join cluster: \" + err.Error())\n}\n\n// Ask for members of the cluster\nfor _, member := range list.Members() {\n\tfmt.Printf(\"Member: %s %s\\n\", member.Name, member.Addr)\n}\n\n// Continue doing whatever you need, memberlist will maintain membership\n// information in the background. Delegates can be used for receiving\n// events when members join or leave.\n```\n\n----------------------------------------\n\nTITLE: Docker Image Inspection JSON Response\nDESCRIPTION: Example JSON response for a Docker image inspection request. It includes detailed information about the image, such as its ID, container configuration, labels, and filesystem layers.\nSOURCE: https://github.com/moby/moby/blob/master/docs/api/v1.24.md#2025-04-10_snippet_54\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"Id\" : \"sha256:85f05633ddc1c50679be2b16a0479ab6f7637f8884e0cfe0f4d20e1ebb3d6e7c\",\n   \"Container\" : \"cb91e48a60d01f1e27028b4fc6819f4f290b3cf12496c8176ec714d0d390984a\",\n   \"Comment\" : \"\",\n   \"Os\" : \"linux\",\n   \"Architecture\" : \"amd64\",\n   \"Parent\" : \"sha256:91e54dfb11794fad694460162bf0cb0a4fa710cfa3f60979c177d920813e267c\",\n   \"ContainerConfig\" : {\n      \"Tty\" : false,\n      \"Hostname\" : \"e611e15f9c9d\",\n      \"Volumes\" : null,\n      \"Domainname\" : \"\",\n      \"AttachStdout\" : false,\n      \"PublishService\" : \"\",\n      \"AttachStdin\" : false,\n      \"OpenStdin\" : false,\n      \"StdinOnce\" : false,\n      \"NetworkDisabled\" : false,\n      \"OnBuild\" : [],\n      \"Image\" : \"91e54dfb11794fad694460162bf0cb0a4fa710cfa3f60979c177d920813e267c\",\n      \"User\" : \"\",\n      \"WorkingDir\" : \"\",\n      \"Entrypoint\" : null,\n      \"MacAddress\" : \"\",\n      \"AttachStderr\" : false,\n      \"Labels\" : {\n         \"com.example.license\" : \"GPL\",\n         \"com.example.version\" : \"1.0\",\n         \"com.example.vendor\" : \"Acme\"\n      },\n      \"Env\" : [\n         \"PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\"\n      ],\n      \"ExposedPorts\" : null,\n      \"Cmd\" : [\n         \"/bin/sh\",\n         \"-c\",\n         \"#(nop) LABEL com.example.vendor=Acme com.example.license=GPL com.example.version=1.0\"\n      ]\n   },\n   \"DockerVersion\" : \"1.9.0-dev\",\n   \"VirtualSize\" : 188359297,\n   \"Size\" : 0,\n   \"Author\" : \"\",\n   \"Created\" : \"2015-09-10T08:30:53.26995814Z\",\n   \"GraphDriver\" : {\n      \"Name\" : \"aufs\",\n      \"Data\" : null\n   },\n   \"RepoDigests\" : [\n      \"localhost:5000/test/busybox/example@sha256:cbbf2f9a99b47fc460d422812b6a5adff7dfee951d8fa2e4a98caa0382cfbdbf\"\n   ],\n   \"RepoTags\" : [\n      \"example:1.0\",\n      \"example:latest\",\n      \"example:stable\"\n   ],\n   \"Config\" : {\n      \"Image\" : \"91e54dfb11794fad694460162bf0cb0a4fa710cfa3f60979c177d920813e267c\",\n      \"NetworkDisabled\" : false,\n      \"OnBuild\" : [],\n      \"StdinOnce\" : false,\n      \"PublishService\" : \"\",\n      \"AttachStdin\" : false,\n      \"OpenStdin\" : false,\n      \"Domainname\" : \"\",\n      \"AttachStdout\" : false,\n      \"Tty\" : false,\n      \"Hostname\" : \"e611e15f9c9d\",\n      \"Volumes\" : null,\n      \"Cmd\" : [\n         \"/bin/bash\"\n      ],\n      \"ExposedPorts\" : null,\n      \"Env\" : [\n         \"PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\"\n      ],\n      \"Labels\" : {\n         \"com.example.vendor\" : \"Acme\",\n         \"com.example.version\" : \"1.0\",\n         \"com.example.license\" : \"GPL\"\n      },\n      \"Entrypoint\" : null,\n      \"MacAddress\" : \"\",\n      \"AttachStderr\" : false,\n      \"WorkingDir\" : \"\",\n      \"User\" : \"\"\n   },\n   \"RootFS\": {\n       \"Type\": \"layers\",\n       \"Layers\": [\n           \"sha256:1834950e52ce4d5a88a1bbd131c537f4d0e56d10ff0dd69e66be3b7dfa9df7e6\",\n           \"sha256:5f70bf18a086007016e948b04aed3b82103a36bea41755b6cddfaf10ace3c6ef\"\n       ]\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting Container Contents with Docker API\nDESCRIPTION: Makes an HTTP GET request to export a container's filesystem as a tar archive. This endpoint allows downloading the entire contents of a container which can be used for backup or migration purposes.\nSOURCE: https://github.com/moby/moby/blob/master/docs/api/v1.24.md#2025-04-10_snippet_23\n\nLANGUAGE: HTTP\nCODE:\n```\nGET /v1.24/containers/4fa6e0f0c678/export HTTP/1.1\n```\n\n----------------------------------------\n\nTITLE: Creating Docker Volume via HTTP POST\nDESCRIPTION: HTTP POST request to create a new Docker volume, specifying the volume name, labels, and driver.\nSOURCE: https://github.com/moby/moby/blob/master/docs/api/v1.24.md#2025-04-10_snippet_80\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1.24/volumes/create HTTP/1.1\nContent-Type: application/json\nContent-Length: 12345\n\n{\n  \"Name\": \"tardis\",\n  \"Labels\": {\n    \"com.example.some-label\": \"some-value\",\n    \"com.example.some-other-label\": \"some-other-value\"\n  },\n  \"Driver\": \"custom\"\n}\n```\n\n----------------------------------------\n\nTITLE: Matching Routes Based on Domain in Go using Gorilla Mux\nDESCRIPTION: Shows how to restrict routes to specific domains or subdomains, including the use of variables in host patterns.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/gorilla/mux/README.md#2025-04-10_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nr := mux.NewRouter()\n// Only matches if domain is \"www.example.com\".\nr.Host(\"www.example.com\")\n// Matches a dynamic subdomain.\nr.Host(\"{subdomain:[a-z]+}.example.com\")\n```\n\n----------------------------------------\n\nTITLE: List Networks API Request/Response\nDESCRIPTION: GET endpoint to list all networks with optional filters. Returns array of network objects with details like name, ID, scope, driver and configuration.\nSOURCE: https://github.com/moby/moby/blob/master/docs/api/v1.24.md#2025-04-10_snippet_82\n\nLANGUAGE: http\nCODE:\n```\nGET /v1.24/networks?filters={\"type\":{\"custom\":true}} HTTP/1.1\n```\n\nLANGUAGE: json\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Type: application/json\n\n[\n  {\n    \"Name\": \"bridge\",\n    \"Id\": \"f2de39df4171b0dc801e8002d1d999b77256983dfc63041c0f34030aa3977566\",\n    \"Scope\": \"local\",\n    \"Driver\": \"bridge\",\n    \"EnableIPv6\": false,\n    \"Internal\": false,\n    \"IPAM\": {\n      \"Driver\": \"default\",\n      \"Config\": [\n        {\n          \"Subnet\": \"172.17.0.0/16\"\n        }\n      ]\n    },\n    \"Containers\": {\n      \"39b69226f9d79f5634485fb236a23b2fe4e96a0a94128390a7fbbcc167065867\": {\n        \"EndpointID\": \"ed2419a97c1d9954d05b46e462e7002ea552f216e9b136b80a7db8d98b442eda\",\n        \"MacAddress\": \"02:42:ac:11:00:02\",\n        \"IPv4Address\": \"172.17.0.2/16\",\n        \"IPv6Address\": \"\"\n      }\n    },\n    \"Options\": {\n      \"com.docker.network.bridge.default_bridge\": \"true\",\n      \"com.docker.network.bridge.enable_icc\": \"true\",\n      \"com.docker.network.bridge.enable_ip_masquerade\": \"true\",\n      \"com.docker.network.bridge.host_binding_ipv4\": \"0.0.0.0\",\n      \"com.docker.network.bridge.name\": \"docker0\",\n      \"com.docker.network.driver.mtu\": \"1500\"\n    }\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Running All Moby Tests and Build on Windows\nDESCRIPTION: These Docker commands run all Moby tests and build processes in a container on Windows, with options for Hyper-V containers.\nSOURCE: https://github.com/moby/moby/blob/master/docs/contributing/software-req-win.md#2025-04-10_snippet_9\n\nLANGUAGE: powershell\nCODE:\n```\ndocker run nativebuildimage hack\\make.ps1 -All\ndocker run -m 2GB nativebuildimage hack\\make.ps1 -All  # (if using Hyper-V containers)\n```\n\n----------------------------------------\n\nTITLE: Markdown Navigation Links for Moby Setup\nDESCRIPTION: A structured list of markdown links to various Moby development setup documentation pages, including initial setup, software requirements, IDE configuration, Git setup, testing, and debugging guides.\nSOURCE: https://github.com/moby/moby/blob/master/docs/contributing/README.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Get set up for Moby development\n\n * [README first](who-written-for.md)\n * [Get the required software](software-required.md)\n * [Set up for development on Windows](software-req-win.md)\n * (Optional) [Configure project for IDE](set-up-ide.md)\n * [Configure Git for contributing](set-up-git.md)\n * [Work with a development container](set-up-dev-env.md)\n * [Containerized build and cross compilation](ctn-build.md)\n * [Run tests and test documentation](test.md)\n * [Debugging the daemon](debug.md)\n```\n\n----------------------------------------\n\nTITLE: SwarmKit Service Method Definitions\nDESCRIPTION: Defines the gRPC service methods for Docker SwarmKit API, including operations for managing various swarm resources. Each method specifies its input and output message types along with swarm manager options.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/moby/swarmkit/v2/api/api.pb.txt#2025-04-10_snippet_95\n\nLANGUAGE: protobuf\nCODE:\n```\nmethod {\n  name: \"ListServiceStatuses\"\n  input_type: \".docker.swarmkit.v1.ListServiceStatusesRequest\"\n  output_type: \".docker.swarmkit.v1.ListServiceStatusesResponse\"\n  options {\n    73626345 {\n      1: \"swarm-manager\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining cgroups v2 Resource Metrics Protocol Buffers\nDESCRIPTION: Protocol buffer schema defining message types for collecting cgroup v2 metrics. Includes definitions for process, CPU, memory, RDMA, IO statistics and other resource usage data. Each message type contains specific fields for different metric categories with appropriate data types and labels.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/containerd/cgroups/v3/cgroup2/stats/metrics.pb.txt#2025-04-10_snippet_0\n\nLANGUAGE: protobuf\nCODE:\n```\nfile {\n  name: \"github.com/containerd/cgroups/cgroup2/stats/metrics.proto\"\n  package: \"io.containerd.cgroups.v2\"\n  message_type {\n    name: \"Metrics\"\n    field {\n      name: \"pids\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_MESSAGE\n      type_name: \".io.containerd.cgroups.v2.PidsStat\"\n      json_name: \"pids\"\n    }\n    field {\n      name: \"cpu\"\n      number: 2\n      label: LABEL_OPTIONAL\n      type: TYPE_MESSAGE\n      type_name: \".io.containerd.cgroups.v2.CPUStat\"\n      json_name: \"cpu\"\n    }\n    field {\n      name: \"memory\"\n      number: 4\n      label: LABEL_OPTIONAL\n      type: TYPE_MESSAGE\n      type_name: \".io.containerd.cgroups.v2.MemoryStat\"\n      json_name: \"memory\"\n    }\n    field {\n      name: \"rdma\"\n      number: 5\n      label: LABEL_OPTIONAL\n      type: TYPE_MESSAGE\n      type_name: \".io.containerd.cgroups.v2.RdmaStat\"\n      json_name: \"rdma\"\n    }\n    field {\n      name: \"io\"\n      number: 6\n      label: LABEL_OPTIONAL\n      type: TYPE_MESSAGE\n      type_name: \".io.containerd.cgroups.v2.IOStat\"\n      json_name: \"io\"\n    }\n    field {\n      name: \"hugetlb\"\n      number: 7\n      label: LABEL_REPEATED\n      type: TYPE_MESSAGE\n      type_name: \".io.containerd.cgroups.v2.HugeTlbStat\"\n      json_name: \"hugetlb\"\n    }\n    field {\n      name: \"memory_events\"\n      number: 8\n      label: LABEL_OPTIONAL\n      type: TYPE_MESSAGE\n      type_name: \".io.containerd.cgroups.v2.MemoryEvents\"\n      json_name: \"memoryEvents\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: List Nodes API Request/Response\nDESCRIPTION: HTTP GET endpoint to list all nodes in the swarm. Supports filtering by node ID, label, membership, name and role. Returns detailed information about each node including specs, description, status and manager status.\nSOURCE: https://github.com/moby/moby/blob/master/docs/api/v1.24.md#2025-04-10_snippet_91\n\nLANGUAGE: HTTP\nCODE:\n```\nGET /v1.24/nodes HTTP/1.1\n```\n\nLANGUAGE: JSON\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Type: application/json\n\n[\n  {\n    \"ID\": \"24ifsmvkjbyhk\",\n    \"Version\": {\n      \"Index\": 8\n    },\n    \"CreatedAt\": \"2016-06-07T20:31:11.853781916Z\",\n    \"UpdatedAt\": \"2016-06-07T20:31:11.999868824Z\",\n    \"Spec\": {\n      \"Name\": \"my-node\",\n      \"Role\": \"manager\",\n      \"Availability\": \"active\"\n      \"Labels\": {\n          \"foo\": \"bar\"\n      }\n    },\n    \"Description\": {\n      \"Hostname\": \"bf3067039e47\",\n      \"Platform\": {\n        \"Architecture\": \"x86_64\",\n        \"OS\": \"linux\"\n      },\n      \"Resources\": {\n        \"NanoCPUs\": 4000000000,\n        \"MemoryBytes\": 8272408576\n      },\n      \"Engine\": {\n        \"EngineVersion\": \"1.12.0\",\n        \"Labels\": {\n            \"foo\": \"bar\",\n        }\n        \"Plugins\": [\n          {\n            \"Type\": \"Volume\",\n            \"Name\": \"local\"\n          },\n          {\n            \"Type\": \"Network\",\n            \"Name\": \"bridge\"\n          }\n          {\n            \"Type\": \"Network\",\n            \"Name\": \"null\"\n          }\n          {\n            \"Type\": \"Network\",\n            \"Name\": \"overlay\"\n          }\n        ]\n      }\n    },\n    \"Status\": {\n      \"State\": \"ready\"\n    },\n    \"ManagerStatus\": {\n      \"Leader\": true,\n      \"Reachability\": \"reachable\",\n      \"Addr\": \"172.17.0.2:2377\"\"\n    }\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Joining an Existing Docker Swarm\nDESCRIPTION: POST request to /swarm/join endpoint to join an existing swarm. Includes parameters for listen address, advertise address, remote addresses, and join token.\nSOURCE: https://github.com/moby/moby/blob/master/docs/api/v1.24.md#2025-04-10_snippet_97\n\nLANGUAGE: HTTP\nCODE:\n```\nPOST /v1.24/swarm/join HTTP/1.1\nContent-Type: application/json\n\n{\n  \"ListenAddr\": \"0.0.0.0:2377\",\n  \"AdvertiseAddr\": \"192.168.1.1:2377\",\n  \"RemoteAddrs\": [\"node1:2377\"],\n  \"JoinToken\": \"SWMTKN-1-3pu6hszjas19xyp7ghgosyx9k8atbfcr8p2is99znpy26u2lkl-7p73s1dx5in4tatdymyhg9hu2\"\n}\n```\n\n----------------------------------------\n\nTITLE: Remove Node API Request/Response\nDESCRIPTION: HTTP DELETE endpoint to remove a node from the swarm. Optional force parameter to forcefully remove the node. Returns empty response on success.\nSOURCE: https://github.com/moby/moby/blob/master/docs/api/v1.24.md#2025-04-10_snippet_93\n\nLANGUAGE: HTTP\nCODE:\n```\nDELETE /v1.24/nodes/24ifsmvkjbyhk HTTP/1.1\n\nHTTP/1.1 200 OK\nContent-Length: 0\nContent-Type: text/plain; charset=utf-8\n```\n\n----------------------------------------\n\nTITLE: Defining VolumeAssignment Message in Protocol Buffers\nDESCRIPTION: Specifies the VolumeAssignment message type with fields for volume identification, driver information, context, and access mode. This structure is used to assign volumes in Docker Swarm.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/moby/swarmkit/v2/api/api.pb.txt#2025-04-10_snippet_59\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage VolumeAssignment {\n  string id = 1;\n  string volume_id = 2;\n  Driver driver = 3;\n  repeated VolumeContextEntry volume_context = 4;\n  repeated PublishContextEntry publish_context = 5;\n  VolumeAccessMode access_mode = 6;\n  repeated VolumeSecret secrets = 7;\n\n  message VolumeContextEntry {\n    string key = 1;\n    string value = 2;\n  }\n\n  message PublishContextEntry {\n    string key = 1;\n    string value = 2;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Docker Image History JSON Response\nDESCRIPTION: Example JSON response for a Docker image history request. It includes a list of image layers with their IDs, creation timestamps, and associated commands.\nSOURCE: https://github.com/moby/moby/blob/master/docs/api/v1.24.md#2025-04-10_snippet_56\n\nLANGUAGE: json\nCODE:\n```\n[\n    {\n        \"Id\": \"3db9c44f45209632d6050b35958829c3a2aa256d81b9a7be45b362ff85c54710\",\n        \"Created\": 1398108230,\n        \"CreatedBy\": \"/bin/sh -c #(nop) ADD file:eb15dbd63394e063b805a3c32ca7bf0266ef64676d5a6fab4801f2e81e2a5148 in /\",\n        \"Tags\": [\n            \"ubuntu:lucid\",\n            \"ubuntu:10.04\"\n        ],\n        \"Size\": 182964289,\n        \"Comment\": \"\"\n    },\n    {\n        \"Id\": \"6cfa4d1f33fb861d4d114f43b25abd0ac737509268065cdfd69d544a59c85ab8\",\n        \"Created\": 1398108222,\n        \"CreatedBy\": \"/bin/sh -c #(nop) MAINTAINER Tianon Gravi <admwiggin@gmail.com> - mkimage-debootstrap.sh -i iproute,iputils-ping,ubuntu-minimal -t lucid.tar.xz lucid http://archive.ubuntu.com/ubuntu/\",\n        \"Tags\": null,\n        \"Size\": 0,\n        \"Comment\": \"\"\n    },\n    {\n        \"Id\": \"511136ea3c5a64f264b78b5433614aec563103b4d4702f3ba7d4d2698e22c158\",\n        \"Created\": 1371157430,\n        \"CreatedBy\": \"\",\n        \"Tags\": [\n            \"scratch12:latest\",\n            \"scratch:latest\"\n        ],\n        \"Size\": 0,\n        \"Comment\": \"Imported from -\"\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Accessing Route Variables in Go Handler Functions\nDESCRIPTION: Demonstrates how to retrieve and use variables from the URL in a handler function using mux.Vars().\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/gorilla/mux/README.md#2025-04-10_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfunc ArticlesCategoryHandler(w http.ResponseWriter, r *http.Request) {\n    vars := mux.Vars(r)\n    w.WriteHeader(http.StatusOK)\n    fmt.Fprintf(w, \"Category: %v\\n\", vars[\"category\"])\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Container Processes with Docker API\nDESCRIPTION: Makes an HTTP GET request to list processes running inside a container. This endpoint uses the 'ps' command on Unix systems to provide process information and is not supported on Windows.\nSOURCE: https://github.com/moby/moby/blob/master/docs/api/v1.24.md#2025-04-10_snippet_16\n\nLANGUAGE: HTTP\nCODE:\n```\nGET /v1.24/containers/4fa6e0f0c678/top HTTP/1.1\n```\n\n----------------------------------------\n\nTITLE: Response for Successful Exec Instance Inspection in Docker\nDESCRIPTION: HTTP response containing detailed information about an exec instance in a Docker container, including its status, configuration, and exit code.\nSOURCE: https://github.com/moby/moby/blob/master/docs/api/v1.24.md#2025-04-10_snippet_77\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"CanRemove\": false,\n  \"ContainerID\": \"b53ee82b53a40c7dca428523e34f741f3abc51d9f297a14ff874bf761b995126\",\n  \"DetachKeys\": \"\",\n  \"ExitCode\": 2,\n  \"ID\": \"f33bbfb39f5b142420f4759b2348913bd4a8d1a6d7fd56499cb41a1bb91d7b3b\",\n  \"OpenStderr\": true,\n  \"OpenStdin\": true,\n  \"OpenStdout\": true,\n  \"ProcessConfig\": {\n    \"arguments\": [\n      \"-c\",\n      \"exit 2\"\n    ],\n    \"entrypoint\": \"sh\",\n    \"privileged\": false,\n    \"tty\": true,\n    \"user\": \"1000\"\n  },\n  \"Running\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Using Subrouters in Go with Gorilla Mux\nDESCRIPTION: Demonstrates the use of subrouters to group routes with shared attributes and create domain or path namespaces.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/gorilla/mux/README.md#2025-04-10_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nr := mux.NewRouter()\ns := r.Host(\"www.example.com\").Subrouter()\n\ns.HandleFunc(\"/products/\", ProductsHandler)\ns.HandleFunc(\"/products/{key}\", ProductHandler)\ns.HandleFunc(\"/articles/{category}/{id:[0-9]+}\", ArticleHandler)\n```\n\n----------------------------------------\n\nTITLE: Creating Exec Instance in Docker Container via HTTP POST\nDESCRIPTION: HTTP POST request to create an exec instance in a running Docker container, specifying parameters like AttachStdin, Cmd, and User.\nSOURCE: https://github.com/moby/moby/blob/master/docs/api/v1.24.md#2025-04-10_snippet_73\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1.24/containers/e90e34656806/exec HTTP/1.1\nContent-Type: application/json\nContent-Length: 12345\n\n{\n  \"AttachStdin\": true,\n  \"AttachStdout\": true,\n  \"AttachStderr\": true,\n  \"Cmd\": [\"sh\"],\n  \"DetachKeys\": \"ctrl-p,ctrl-q\",\n  \"Privileged\": true,\n  \"Tty\": true,\n  \"User\": \"123:456\"\n}\n```\n\n----------------------------------------\n\nTITLE: Copying Moby Binaries from Docker Container\nDESCRIPTION: These Docker commands copy the built Moby binaries from the container to the host system.\nSOURCE: https://github.com/moby/moby/blob/master/docs/contributing/software-req-win.md#2025-04-10_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\ndocker cp binaries:C:\\gopath\\src\\github.com\\docker\\docker\\bundles\\docker.exe docker.exe\ndocker cp binaries:C:\\gopath\\src\\github.com\\docker\\docker\\bundles\\dockerd.exe dockerd.exe\n```\n\n----------------------------------------\n\nTITLE: Defining Protocol Buffer Message Types for Docker Swarmkit API\nDESCRIPTION: This Protocol Buffer (protobuf) definition file contains message type specifications for Docker Swarmkit's API. It defines data structures used for service, network, and cluster management operations including creation, retrieval, listing, and removal.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/moby/swarmkit/v2/api/api.pb.txt#2025-04-10_snippet_91\n\nLANGUAGE: protobuf\nCODE:\n```\n  message_type {\n    name: \"UpdateServiceResponse\"\n    field {\n      name: \"service\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_MESSAGE\n      type_name: \".docker.swarmkit.v1.Service\"\n      json_name: \"service\"\n    }\n  }\n  message_type {\n    name: \"RemoveServiceRequest\"\n    field {\n      name: \"service_id\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"serviceId\"\n    }\n  }\n  message_type {\n    name: \"RemoveServiceResponse\"\n  }\n  message_type {\n    name: \"ListServicesRequest\"\n    field {\n      name: \"filters\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_MESSAGE\n      type_name: \".docker.swarmkit.v1.ListServicesRequest.Filters\"\n      json_name: \"filters\"\n    }\n    nested_type {\n      name: \"Filters\"\n      field {\n        name: \"names\"\n        number: 1\n        label: LABEL_REPEATED\n        type: TYPE_STRING\n        json_name: \"names\"\n      }\n      field {\n        name: \"id_prefixes\"\n        number: 2\n        label: LABEL_REPEATED\n        type: TYPE_STRING\n        json_name: \"idPrefixes\"\n      }\n      field {\n        name: \"labels\"\n        number: 3\n        label: LABEL_REPEATED\n        type: TYPE_MESSAGE\n        type_name: \".docker.swarmkit.v1.ListServicesRequest.Filters.LabelsEntry\"\n        json_name: \"labels\"\n      }\n      field {\n        name: \"name_prefixes\"\n        number: 4\n        label: LABEL_REPEATED\n        type: TYPE_STRING\n        json_name: \"namePrefixes\"\n      }\n      field {\n        name: \"runtimes\"\n        number: 5\n        label: LABEL_REPEATED\n        type: TYPE_STRING\n        json_name: \"runtimes\"\n      }\n      nested_type {\n        name: \"LabelsEntry\"\n        field {\n          name: \"key\"\n          number: 1\n          label: LABEL_OPTIONAL\n          type: TYPE_STRING\n          json_name: \"key\"\n        }\n        field {\n          name: \"value\"\n          number: 2\n          label: LABEL_OPTIONAL\n          type: TYPE_STRING\n          json_name: \"value\"\n        }\n        options {\n          map_entry: true\n        }\n      }\n    }\n  }\n  message_type {\n    name: \"ListServicesResponse\"\n    field {\n      name: \"services\"\n      number: 1\n      label: LABEL_REPEATED\n      type: TYPE_MESSAGE\n      type_name: \".docker.swarmkit.v1.Service\"\n      json_name: \"services\"\n    }\n  }\n  message_type {\n    name: \"ListServiceStatusesRequest\"\n    field {\n      name: \"services\"\n      number: 1\n      label: LABEL_REPEATED\n      type: TYPE_STRING\n      json_name: \"services\"\n    }\n  }\n  message_type {\n    name: \"ListServiceStatusesResponse\"\n    field {\n      name: \"statuses\"\n      number: 1\n      label: LABEL_REPEATED\n      type: TYPE_MESSAGE\n      type_name: \".docker.swarmkit.v1.ListServiceStatusesResponse.ServiceStatus\"\n      json_name: \"statuses\"\n    }\n    nested_type {\n      name: \"ServiceStatus\"\n      field {\n        name: \"service_id\"\n        number: 1\n        label: LABEL_OPTIONAL\n        type: TYPE_STRING\n        json_name: \"serviceId\"\n      }\n      field {\n        name: \"desired_tasks\"\n        number: 2\n        label: LABEL_OPTIONAL\n        type: TYPE_UINT64\n        json_name: \"desiredTasks\"\n      }\n      field {\n        name: \"running_tasks\"\n        number: 3\n        label: LABEL_OPTIONAL\n        type: TYPE_UINT64\n        json_name: \"runningTasks\"\n      }\n      field {\n        name: \"completed_tasks\"\n        number: 4\n        label: LABEL_OPTIONAL\n        type: TYPE_UINT64\n        json_name: \"completedTasks\"\n      }\n    }\n  }\n  message_type {\n    name: \"CreateNetworkRequest\"\n    field {\n      name: \"spec\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_MESSAGE\n      type_name: \".docker.swarmkit.v1.NetworkSpec\"\n      json_name: \"spec\"\n    }\n  }\n  message_type {\n    name: \"CreateNetworkResponse\"\n    field {\n      name: \"network\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_MESSAGE\n      type_name: \".docker.swarmkit.v1.Network\"\n      json_name: \"network\"\n    }\n  }\n  message_type {\n    name: \"GetNetworkRequest\"\n    field {\n      name: \"name\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"name\"\n    }\n    field {\n      name: \"network_id\"\n      number: 2\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"networkId\"\n    }\n  }\n  message_type {\n    name: \"GetNetworkResponse\"\n    field {\n      name: \"network\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_MESSAGE\n      type_name: \".docker.swarmkit.v1.Network\"\n      json_name: \"network\"\n    }\n  }\n  message_type {\n    name: \"RemoveNetworkRequest\"\n    field {\n      name: \"name\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"name\"\n    }\n    field {\n      name: \"network_id\"\n      number: 2\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"networkId\"\n    }\n  }\n  message_type {\n    name: \"RemoveNetworkResponse\"\n  }\n  message_type {\n    name: \"ListNetworksRequest\"\n    field {\n      name: \"filters\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_MESSAGE\n      type_name: \".docker.swarmkit.v1.ListNetworksRequest.Filters\"\n      json_name: \"filters\"\n    }\n    nested_type {\n      name: \"Filters\"\n      field {\n        name: \"names\"\n        number: 1\n        label: LABEL_REPEATED\n        type: TYPE_STRING\n        json_name: \"names\"\n      }\n      field {\n        name: \"id_prefixes\"\n        number: 2\n        label: LABEL_REPEATED\n        type: TYPE_STRING\n        json_name: \"idPrefixes\"\n      }\n      field {\n        name: \"labels\"\n        number: 3\n        label: LABEL_REPEATED\n        type: TYPE_MESSAGE\n        type_name: \".docker.swarmkit.v1.ListNetworksRequest.Filters.LabelsEntry\"\n        json_name: \"labels\"\n      }\n      field {\n        name: \"name_prefixes\"\n        number: 4\n        label: LABEL_REPEATED\n        type: TYPE_STRING\n        json_name: \"namePrefixes\"\n      }\n      nested_type {\n        name: \"LabelsEntry\"\n        field {\n          name: \"key\"\n          number: 1\n          label: LABEL_OPTIONAL\n          type: TYPE_STRING\n          json_name: \"key\"\n        }\n        field {\n          name: \"value\"\n          number: 2\n          label: LABEL_OPTIONAL\n          type: TYPE_STRING\n          json_name: \"value\"\n        }\n        options {\n          map_entry: true\n        }\n      }\n    }\n  }\n  message_type {\n    name: \"ListNetworksResponse\"\n    field {\n      name: \"networks\"\n      number: 1\n      label: LABEL_REPEATED\n      type: TYPE_MESSAGE\n      type_name: \".docker.swarmkit.v1.Network\"\n      json_name: \"networks\"\n    }\n  }\n  message_type {\n    name: \"GetClusterRequest\"\n    field {\n      name: \"cluster_id\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"clusterId\"\n    }\n  }\n  message_type {\n    name: \"GetClusterResponse\"\n    field {\n      name: \"cluster\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_MESSAGE\n      type_name: \".docker.swarmkit.v1.Cluster\"\n      json_name: \"cluster\"\n    }\n  }\n  message_type {\n    name: \"ListClustersRequest\"\n    field {\n      name: \"filters\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_MESSAGE\n      type_name: \".docker.swarmkit.v1.ListClustersRequest.Filters\"\n      json_name: \"filters\"\n    }\n    nested_type {\n      name: \"Filters\"\n      field {\n        name: \"names\"\n        number: 1\n        label: LABEL_REPEATED\n        type: TYPE_STRING\n        json_name: \"names\"\n      }\n      field {\n        name: \"id_prefixes\"\n        number: 2\n        label: LABEL_REPEATED\n        type: TYPE_STRING\n        json_name: \"idPrefixes\"\n      }\n      field {\n        name: \"labels\"\n        number: 3\n        label: LABEL_REPEATED\n        type: TYPE_MESSAGE\n        type_name: \".docker.swarmkit.v1.ListClustersRequest.Filters.LabelsEntry\"\n        json_name: \"labels\"\n      }\n      field {\n        name: \"name_prefixes\"\n        number: 4\n        label: LABEL_REPEATED\n        type: TYPE_STRING\n        json_name: \"namePrefixes\"\n      }\n      nested_type {\n        name: \"LabelsEntry\"\n        field {\n          name: \"key\"\n          number: 1\n          label: LABEL_OPTIONAL\n          type: TYPE_STRING\n          json_name: \"key\"\n        }\n        field {\n          name: \"value\"\n          number: 2\n          label: LABEL_OPTIONAL\n          type: TYPE_STRING\n          json_name: \"value\"\n        }\n        options {\n          map_entry: true\n        }\n      }\n    }\n  }\n  message_type {\n    name: \"ListClustersResponse\"\n    field {\n      name: \"clusters\"\n      number: 1\n      label: LABEL_REPEATED\n      type: TYPE_MESSAGE\n      type_name: \".docker.swarmkit.v1.Cluster\"\n      json_name: \"clusters\"\n    }\n  }\n  message_type {\n    name: \"KeyRotation\"\n    field {\n      name: \"worker_join_token\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_BOOL\n      json_name: \"workerJoinToken\"\n    }\n    field {\n      name: \"manager_join_token\"\n      number: 2\n      label: LABEL_OPTIONAL\n      type: TYPE_BOOL\n      json_name: \"managerJoinToken\"\n    }\n    field {\n      name: \"manager_unlock_key\"\n      number: 3\n      label: LABEL_OPTIONAL\n      type: TYPE_BOOL\n      json_name: \"managerUnlockKey\"\n    }\n  }\n  message_type {\n    name: \"UpdateClusterRequest\"\n    field {\n      name: \"cluster_id\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"clusterId\"\n    }\n    field {\n      name: \"cluster_version\"\n      number: 2\n      label: LABEL_OPTIONAL\n      type: TYPE_MESSAGE\n      type_name: \".docker.swarmkit.v1.Version\"\n      json_name: \"clusterVersion\"\n    }\n    field {\n      name: \"spec\"\n      number: 3\n      label: LABEL_OPTIONAL\n      type: TYPE_MESSAGE\n      type_name: \".docker.swarmkit.v1.ClusterSpec\"\n      json_name: \"spec\"\n    }\n    field {\n      name: \"rotation\"\n      number: 4\n      label: LABEL_OPTIONAL\n      type: TYPE_MESSAGE\n      type_name: \".docker.swarmkit.v1.KeyRotation\"\n      options {\n        65001: 0\n      }\n      json_name: \"rotation\"\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Listing Docker Services API Request/Response\nDESCRIPTION: Example of listing Docker services using the GET /services endpoint. Shows the structure of the response including service details like ID, version, specifications, and endpoint configurations.\nSOURCE: https://github.com/moby/moby/blob/master/docs/api/v1.24.md#2025-04-10_snippet_100\n\nLANGUAGE: http\nCODE:\n```\nGET /v1.24/services HTTP/1.1\n```\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Type: application/json\n\n[\n  {\n    \"ID\": \"9mnpnzenvg8p8tdbtq4wvbkcz\",\n    \"Version\": {\n      \"Index\": 19\n    },\n    \"CreatedAt\": \"2016-06-07T21:05:51.880065305Z\",\n    \"UpdatedAt\": \"2016-06-07T21:07:29.962229872Z\",\n    \"Spec\": {\n      \"Name\": \"hopeful_cori\",\n      \"TaskTemplate\": {\n        \"ContainerSpec\": {\n          \"Image\": \"redis\"\n        },\n        \"Resources\": {\n          \"Limits\": {},\n          \"Reservations\": {}\n        },\n        \"RestartPolicy\": {\n          \"Condition\": \"any\",\n          \"MaxAttempts\": 0\n        },\n        \"Placement\": {\n          \"Constraints\": [\n            \"node.role == worker\"\n          ]\n        }\n      },\n      \"Mode\": {\n        \"Replicated\": {\n          \"Replicas\": 1\n        }\n      },\n      \"UpdateConfig\": {\n        \"Parallelism\": 1,\n        \"FailureAction\": \"pause\"\n      },\n      \"EndpointSpec\": {\n        \"Mode\": \"vip\",\n        \"Ports\": [\n          {\n            \"Protocol\": \"tcp\",\n            \"TargetPort\": 6379,\n            \"PublishedPort\": 30001\n          }\n        ]\n      }\n    },\n    \"Endpoint\": {\n      \"Spec\": {\n        \"Mode\": \"vip\",\n        \"Ports\": [\n          {\n            \"Protocol\": \"tcp\",\n            \"TargetPort\": 6379,\n            \"PublishedPort\": 30001\n          }\n        ]\n      },\n      \"Ports\": [\n        {\n          \"Protocol\": \"tcp\",\n          \"TargetPort\": 6379,\n          \"PublishedPort\": 30001\n        }\n      ],\n      \"VirtualIPs\": [\n        {\n          \"NetworkID\": \"4qvuz4ko70xaltuqbt8956gd1\",\n          \"Addr\": \"10.255.0.2/16\"\n        },\n        {\n          \"NetworkID\": \"4qvuz4ko70xaltuqbt8956gd1\",\n          \"Addr\": \"10.255.0.3/16\"\n        }\n      ]\n    }\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Inspect Swarm API Request/Response\nDESCRIPTION: HTTP GET endpoint to inspect the swarm configuration. Returns detailed information about the swarm including specifications, join tokens, ID and version.\nSOURCE: https://github.com/moby/moby/blob/master/docs/api/v1.24.md#2025-04-10_snippet_95\n\nLANGUAGE: HTTP\nCODE:\n```\nGET /swarm\n```\n\nLANGUAGE: JSON\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Type: application/json\n\n{\n  \"CreatedAt\" : \"2016-08-15T16:00:20.349727406Z\",\n  \"Spec\" : {\n    \"Dispatcher\" : {\n      \"HeartbeatPeriod\" : 5000000000\n    },\n    \"Orchestration\" : {\n     \"TaskHistoryRetentionLimit\" : 10\n    },\n    \"CAConfig\" : {\n      \"NodeCertExpiry\" : 7776000000000000\n    },\n    \"Raft\" : {\n      \"LogEntriesForSlowFollowers\" : 500,\n      \"HeartbeatTick\" : 1,\n      \"SnapshotInterval\" : 10000,\n      \"ElectionTick\" : 3\n    },\n    \"TaskDefaults\" : {},\n    \"Name\" : \"default\"\n  },\n \"JoinTokens\" : {\n    \"Worker\" : \"SWMTKN-1-1h8aps2yszaiqmz2l3oc5392pgk8e49qhx2aj3nyv0ui0hez2a-6qmn92w6bu3jdvnglku58u11a\",\n    \"Manager\" : \"SWMTKN-1-1h8aps2yszaiqmz2l3oc5392pgk8e49qhx2aj3nyv0ui0hez2a-8llk83c4wm9lwioey2s316r9l\"\n },\n \"ID\" : \"70ilmkj2f6sp2137c753w2nmt\",\n \"UpdatedAt\" : \"2016-08-15T16:32:09.623207604Z\",\n \"Version\" : {\n   \"Index\" : 51\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Tasks with Docker API\nDESCRIPTION: Example of listing tasks using GET /tasks endpoint with filters support. Returns an array of task objects with detailed information about their state, specifications, and network attachments.\nSOURCE: https://github.com/moby/moby/blob/master/docs/api/v1.24.md#2025-04-10_snippet_105\n\nLANGUAGE: HTTP\nCODE:\n```\nGET /v1.24/tasks HTTP/1.1\n```\n\nLANGUAGE: JSON\nCODE:\n```\n[\n  {\n    \"ID\": \"0kzzo1i0y4jz6027t0k7aezc7\",\n    \"Version\": {\n      \"Index\": 71\n    },\n    \"CreatedAt\": \"2016-06-07T21:07:31.171892745Z\",\n    \"UpdatedAt\": \"2016-06-07T21:07:31.376370513Z\",\n    \"Spec\": {\n      \"ContainerSpec\": {\n        \"Image\": \"redis\"\n      },\n      \"Resources\": {\n        \"Limits\": {},\n        \"Reservations\": {}\n      },\n      \"RestartPolicy\": {\n        \"Condition\": \"any\",\n        \"MaxAttempts\": 0\n      },\n      \"Placement\": {}\n    },\n    \"ServiceID\": \"9mnpnzenvg8p8tdbtq4wvbkcz\",\n    \"Slot\": 1,\n    \"NodeID\": \"60gvrl6tm78dmak4yl7srz94v\",\n    \"Status\": {\n      \"Timestamp\": \"2016-06-07T21:07:31.290032978Z\",\n      \"State\": \"running\",\n      \"Message\": \"started\",\n      \"ContainerStatus\": {\n        \"ContainerID\": \"e5d62702a1b48d01c3e02ca1e0212a250801fa8d67caca0b6f35919ebc12f035\",\n        \"PID\": 677\n      }\n    },\n    \"DesiredState\": \"running\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Defining NetworkOptionIpam Function for IPAM Configuration in Go\nDESCRIPTION: Function signature for configuring IPAM options when creating a network. It specifies the IPAM driver, address space, IPv4/IPv6 configurations, and additional options.\nSOURCE: https://github.com/moby/moby/blob/master/libnetwork/docs/ipam.md#2025-04-10_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc NetworkOptionIpam(ipamDriver string, addrSpace string, ipV4 []*IpamConf, ipV6 []*IpamConf, opts map[string]string) NetworkOption\n```\n\n----------------------------------------\n\nTITLE: Route Walking Implementation\nDESCRIPTION: Demonstrates how to walk through all registered routes and inspect their properties including path templates, regular expressions, and methods.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/gorilla/mux/README.md#2025-04-10_snippet_12\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"strings\"\n\n\t\"github.com/gorilla/mux\"\n)\n\nfunc handler(w http.ResponseWriter, r *http.Request) {\n\treturn\n}\n\nfunc main() {\n\tr := mux.NewRouter()\n\tr.HandleFunc(\"/\", handler)\n\tr.HandleFunc(\"/products\", handler).Methods(\"POST\")\n\tr.HandleFunc(\"/articles\", handler).Methods(\"GET\")\n\tr.HandleFunc(\"/articles/{id}\", handler).Methods(\"GET\", \"PUT\")\n\tr.HandleFunc(\"/authors\", handler).Queries(\"surname\", \"{surname}\")\n\terr := r.Walk(func(route *mux.Route, router *mux.Router, ancestors []*mux.Route) error {\n\t\tpathTemplate, err := route.GetPathTemplate()\n\t\tif err == nil {\n\t\t\tfmt.Println(\"ROUTE:\", pathTemplate)\n\t\t}\n\t\tpathRegexp, err := route.GetPathRegexp()\n\t\tif err == nil {\n\t\t\tfmt.Println(\"Path regexp:\", pathRegexp)\n\t\t}\n\t\tqueriesTemplates, err := route.GetQueriesTemplates()\n\t\tif err == nil {\n\t\t\tfmt.Println(\"Queries templates:\", strings.Join(queriesTemplates, \",\"))\n\t\t}\n\t\tqueriesRegexps, err := route.GetQueriesRegexp()\n\t\tif err == nil {\n\t\t\tfmt.Println(\"Queries regexps:\", strings.Join(queriesRegexps, \",\"))\n\t\t}\n\t\tmethods, err := route.GetMethods()\n\t\tif err == nil {\n\t\t\tfmt.Println(\"Methods:\", strings.Join(methods, \",\"))\n\t\t}\n\t\tfmt.Println()\n\t\treturn nil\n\t})\n```\n\n----------------------------------------\n\nTITLE: Using Logrus Logging Levels in Go\nDESCRIPTION: This snippet showcases the seven logging levels available in Logrus: Trace, Debug, Info, Warning, Error, Fatal, and Panic. It demonstrates how to use each level and explains their severity.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/sirupsen/logrus/README.md#2025-04-10_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nlog.Trace(\"Something very low level.\")\nlog.Debug(\"Useful debugging information.\")\nlog.Info(\"Something noteworthy happened!\")\nlog.Warn(\"You should probably take a look at this.\")\nlog.Error(\"Something failed but I'm not quitting.\")\n// Calls os.Exit(1) after logging\nlog.Fatal(\"Bye.\")\n// Calls panic() after logging\nlog.Panic(\"I'm bailing.\")\n```\n\n----------------------------------------\n\nTITLE: Listing Docker Volumes via HTTP GET\nDESCRIPTION: HTTP GET request to retrieve a list of Docker volumes, including their names, drivers, and mountpoints.\nSOURCE: https://github.com/moby/moby/blob/master/docs/api/v1.24.md#2025-04-10_snippet_78\n\nLANGUAGE: http\nCODE:\n```\nGET /v1.24/volumes HTTP/1.1\n```\n\n----------------------------------------\n\nTITLE: Leaving a Docker Swarm\nDESCRIPTION: POST request to /swarm/leave endpoint to leave a swarm. Includes an optional force parameter to leave even if it's the last manager.\nSOURCE: https://github.com/moby/moby/blob/master/docs/api/v1.24.md#2025-04-10_snippet_98\n\nLANGUAGE: HTTP\nCODE:\n```\nPOST /v1.24/swarm/leave HTTP/1.1\n```\n\n----------------------------------------\n\nTITLE: Inspecting Individual Task\nDESCRIPTION: Example of inspecting a specific task by ID using GET /tasks/(id) endpoint. Returns detailed information about a single task including its specifications, state, and network configuration.\nSOURCE: https://github.com/moby/moby/blob/master/docs/api/v1.24.md#2025-04-10_snippet_106\n\nLANGUAGE: HTTP\nCODE:\n```\nGET /v1.24/tasks/0kzzo1i0y4jz6027t0k7aezc7 HTTP/1.1\n```\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"ID\": \"0kzzo1i0y4jz6027t0k7aezc7\",\n  \"Version\": {\n    \"Index\": 71\n  },\n  \"CreatedAt\": \"2016-06-07T21:07:31.171892745Z\",\n  \"UpdatedAt\": \"2016-06-07T21:07:31.376370513Z\",\n  \"Spec\": {\n    \"ContainerSpec\": {\n      \"Image\": \"redis\"\n    },\n    \"Resources\": {\n      \"Limits\": {},\n      \"Reservations\": {}\n    },\n    \"RestartPolicy\": {\n      \"Condition\": \"any\",\n      \"MaxAttempts\": 0\n    },\n    \"Placement\": {}\n  },\n  \"ServiceID\": \"9mnpnzenvg8p8tdbtq4wvbkcz\",\n  \"Slot\": 1,\n  \"NodeID\": \"60gvrl6tm78dmak4yl7srz94v\",\n  \"Status\": {\n    \"Timestamp\": \"2016-06-07T21:07:31.290032978Z\",\n    \"State\": \"running\",\n    \"Message\": \"started\",\n    \"ContainerStatus\": {\n      \"ContainerID\": \"e5d62702a1b48d01c3e02ca1e0212a250801fa8d67caca0b6f35919ebc12f035\",\n      \"PID\": 677\n    }\n  },\n  \"DesiredState\": \"running\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Volume Message Structure in Protobuf\nDESCRIPTION: Definition of a Volume message type with fields for ID, metadata, specifications, publish status, volume info, and pending delete status. Used for managing persistent storage volumes in Docker Swarm.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/moby/swarmkit/v2/api/api.pb.txt#2025-04-10_snippet_89\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage_type {\n  name: \"Volume\"\n  field {\n    name: \"id\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"id\"\n  }\n  field {\n    name: \"meta\"\n    number: 2\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".docker.swarmkit.v1.Meta\"\n    options {\n      65001: 0\n    }\n    json_name: \"meta\"\n  }\n  field {\n    name: \"spec\"\n    number: 3\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".docker.swarmkit.v1.VolumeSpec\"\n    options {\n      65001: 0\n    }\n    json_name: \"spec\"\n  }\n  field {\n    name: \"publish_status\"\n    number: 4\n    label: LABEL_REPEATED\n    type: TYPE_MESSAGE\n    type_name: \".docker.swarmkit.v1.VolumePublishStatus\"\n    json_name: \"publishStatus\"\n  }\n  field {\n    name: \"volume_info\"\n    number: 5\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".docker.swarmkit.v1.VolumeInfo\"\n    json_name: \"volumeInfo\"\n  }\n  field {\n    name: \"pending_delete\"\n    number: 6\n    label: LABEL_OPTIONAL\n    type: TYPE_BOOL\n    json_name: \"pendingDelete\"\n  }\n  options {\n    70001 {\n      1 {\n        1: 1\n        2: 1\n```\n\n----------------------------------------\n\nTITLE: Listing Container Processes with Custom Parameters\nDESCRIPTION: Makes an HTTP GET request to list container processes with custom 'ps' arguments. The ps_args parameter allows specifying alternative options to the 'ps' command for customizing the output format.\nSOURCE: https://github.com/moby/moby/blob/master/docs/api/v1.24.md#2025-04-10_snippet_18\n\nLANGUAGE: HTTP\nCODE:\n```\nGET /v1.24/containers/4fa6e0f0c678/top?ps_args=aux HTTP/1.1\n```\n\n----------------------------------------\n\nTITLE: Resizing Container TTY via HTTP Request\nDESCRIPTION: Example HTTP POST request to resize the TTY for a container with ID '4fa6e0f0c678'. The query parameters specify the height (h) and width (w) in characters.\nSOURCE: https://github.com/moby/moby/blob/master/docs/api/v1.24.md#2025-04-10_snippet_26\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1.24/containers/4fa6e0f0c678/resize?h=40&w=80 HTTP/1.1\n```\n\n----------------------------------------\n\nTITLE: Docker Events API Response Example\nDESCRIPTION: This snippet shows an example response from the Docker Events API. It includes multiple events such as image pulls, container creation, network connections, and container lifecycle events. Each event is represented as a JSON object with details like status, type, and timestamp.\nSOURCE: https://github.com/moby/moby/blob/master/docs/api/v1.24.md#2025-04-10_snippet_69\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": \"pull\",\n  \"id\": \"alpine:latest\",\n  \"Type\": \"image\",\n  \"Action\": \"pull\",\n  \"Actor\": {\n    \"ID\": \"alpine:latest\",\n    \"Attributes\": {\n      \"name\": \"alpine\"\n    }\n  },\n  \"time\": 1461943101,\n  \"timeNano\": 1461943101301854122\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Procfs and Reading System Statistics in Go\nDESCRIPTION: Demonstrates how to initialize the procfs filesystem with a mount point and read system statistics from /proc/stat. This is the basic pattern for accessing proc filesystem data.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/prometheus/procfs/README.md#2025-04-10_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfs, err := procfs.NewFS(\"/proc\")\nstats, err := fs.Stat()\n```\n\n----------------------------------------\n\nTITLE: Checking Docker Version on macOS/Windows\nDESCRIPTION: Command to verify Docker installation and check its version on macOS or Windows systems.\nSOURCE: https://github.com/moby/moby/blob/master/docs/contributing/software-required.md#2025-04-10_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ docker --version\nDocker version 17.10.0-ce, build f4ffd25\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Runtimes with JSON Configuration\nDESCRIPTION: Example of registering multiple runtimes via the Docker daemon configuration file. This shows how to set a default runtime (runc) and define a custom runtime with additional arguments.\nSOURCE: https://github.com/moby/moby/blob/master/man/dockerd.8.md#2025-04-10_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"default-runtime\": \"runc\",\n\t\"runtimes\": {\n\t\t\"runc\": {\n\t\t\t\"path\": \"runc\"\n\t\t},\n\t\t\"custom\": {\n\t\t\t\"path\": \"/usr/local/bin/my-runc-replacement\",\n\t\t\t\"runtimeArgs\": [\n\t\t\t\t\"--debug\"\n\t\t\t]\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Mount Message in Protocol Buffers\nDESCRIPTION: This complex message type defines volume mounting options for containers in Docker Swarm, including mount type, source, target, and read-only status, plus specialized options for bind mounts, volumes, and tmpfs mounts.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/moby/swarmkit/v2/api/api.pb.txt#2025-04-10_snippet_29\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage_type {\n  name: \"Mount\"\n  field {\n    name: \"type\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_ENUM\n    type_name: \".docker.swarmkit.v1.Mount.Type\"\n    json_name: \"type\"\n  }\n  field {\n    name: \"source\"\n    number: 2\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"source\"\n  }\n  field {\n    name: \"target\"\n    number: 3\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"target\"\n  }\n  field {\n    name: \"readonly\"\n    number: 4\n    label: LABEL_OPTIONAL\n    type: TYPE_BOOL\n    options {\n      65004: \"ReadOnly\"\n    }\n    json_name: \"readonly\"\n  }\n  field {\n    name: \"consistency\"\n    number: 8\n    label: LABEL_OPTIONAL\n    type: TYPE_ENUM\n    type_name: \".docker.swarmkit.v1.Mount.Consistency\"\n    json_name: \"consistency\"\n  }\n  field {\n    name: \"bind_options\"\n    number: 5\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".docker.swarmkit.v1.Mount.BindOptions\"\n    json_name: \"bindOptions\"\n  }\n  field {\n    name: \"volume_options\"\n    number: 6\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".docker.swarmkit.v1.Mount.VolumeOptions\"\n    json_name: \"volumeOptions\"\n  }\n  field {\n    name: \"tmpfs_options\"\n    number: 7\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".docker.swarmkit.v1.Mount.TmpfsOptions\"\n    json_name: \"tmpfsOptions\"\n  }\n```\n\n----------------------------------------\n\nTITLE: Creating a user-defined Docker network and running a container with port mapping\nDESCRIPTION: Commands to create a custom Docker bridge network named 'bridge1' with a specific subnet and gateway, then running a container on that network with port 8080 mapped to container port 80.\nSOURCE: https://github.com/moby/moby/blob/master/integration/network/bridge/iptablesdoc/templates/usernet-portmap.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker network create \\\n  -o com.docker.network.bridge.name=bridge1 \\\n  --subnet 192.0.2.0/24 --gateway 192.0.2.1 bridge1\ndocker run --network bridge1 -p 8080:80 --name c1 busybox\n```\n\n----------------------------------------\n\nTITLE: Create/Pull Docker Image API\nDESCRIPTION: POST endpoint to create a Docker image either by pulling from a registry or importing from a source. Supports authentication and various image source parameters.\nSOURCE: https://github.com/moby/moby/blob/master/docs/api/v1.24.md#2025-04-10_snippet_52\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1.24/images/create?fromImage=busybox&tag=latest HTTP/1.1\n```\n\nLANGUAGE: json\nCODE:\n```\n{\"status\": \"Pulling...\"}\n{\"status\": \"Pulling\", \"progress\": \"1 B/ 100 B\", \"progressDetail\": {\"current\": 1, \"total\": 100}}\n{\"error\": \"Invalid...\"}\n```\n\n----------------------------------------\n\nTITLE: Performing Database Backups in BoltDB with Go\nDESCRIPTION: This code demonstrates how to perform a hot backup of a BoltDB database over HTTP. It uses the Tx.WriteTo() function to write a consistent view of the database to an HTTP response writer.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/go.etcd.io/bbolt/README.md#2025-04-10_snippet_18\n\nLANGUAGE: go\nCODE:\n```\nfunc BackupHandleFunc(w http.ResponseWriter, req *http.Request) {\n\terr := db.View(func(tx *bolt.Tx) error {\n\t\tw.Header().Set(\"Content-Type\", \"application/octet-stream\")\n\t\tw.Header().Set(\"Content-Disposition\", `attachment; filename=\"my.db\"`)\n\t\tw.Header().Set(\"Content-Length\", strconv.Itoa(int(tx.Size())))\n\t\t_, err := tx.WriteTo(w)\n\t\treturn err\n\t})\n\tif err != nil {\n\t\thttp.Error(w, err.Error(), http.StatusInternalServerError)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Container Logs with Docker API\nDESCRIPTION: Makes an HTTP GET request to retrieve container logs. This request includes query parameters for specifying which output streams to include, timestamp preferences, and limiting the output to specific lines or time ranges.\nSOURCE: https://github.com/moby/moby/blob/master/docs/api/v1.24.md#2025-04-10_snippet_20\n\nLANGUAGE: HTTP\nCODE:\n```\nGET /v1.24/containers/4fa6e0f0c678/logs?stderr=1&stdout=1&timestamps=1&follow=1&tail=10&since=1428990821 HTTP/1.1\n```\n\n----------------------------------------\n\nTITLE: Interactive Shell Implementation with PTY in Go\nDESCRIPTION: Advanced example implementing an interactive shell with PTY, featuring terminal raw mode, window size handling, and bidirectional data copying. Includes signal handling for terminal resize events and proper cleanup.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/creack/pty/README.md#2025-04-10_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n        \"io\"\n        \"log\"\n        \"os\"\n        \"os/exec\"\n        \"os/signal\"\n        \"syscall\"\n\n        \"github.com/creack/pty\"\n        \"golang.org/x/term\"\n)\n\nfunc test() error {\n        // Create arbitrary command.\n        c := exec.Command(\"bash\")\n\n        // Start the command with a pty.\n        ptmx, err := pty.Start(c)\n        if err != nil {\n                return err\n        }\n        // Make sure to close the pty at the end.\n        defer func() { _ = ptmx.Close() }() // Best effort.\n\n        // Handle pty size.\n        ch := make(chan os.Signal, 1)\n        signal.Notify(ch, syscall.SIGWINCH)\n        go func() {\n                for range ch {\n                        if err := pty.InheritSize(os.Stdin, ptmx); err != nil {\n                                log.Printf(\"error resizing pty: %s\", err)\n                        }\n                }\n        }()\n        ch <- syscall.SIGWINCH // Initial resize.\n        defer func() { signal.Stop(ch); close(ch) }() // Cleanup signals when done.\n\n        // Set stdin in raw mode.\n        oldState, err := term.MakeRaw(int(os.Stdin.Fd()))\n        if err != nil {\n                panic(err)\n        }\n        defer func() { _ = term.Restore(int(os.Stdin.Fd()), oldState) }() // Best effort.\n\n        // Copy stdin to the pty and the pty to stdout.\n        // NOTE: The goroutine will keep reading until the next keystroke before returning.\n        go func() { _, _ = io.Copy(ptmx, os.Stdin) }()\n        _, _ = io.Copy(os.Stdout, ptmx)\n\n        return nil\n}\n\nfunc main() {\n        if err := test(); err != nil {\n                log.Fatal(err)\n        }\n}\n```\n\n----------------------------------------\n\nTITLE: List Containers Response\nDESCRIPTION: Example HTTP response containing a JSON array of container objects. Each container object includes detailed information about the container's configuration, network settings, and mount points.\nSOURCE: https://github.com/moby/moby/blob/master/docs/api/v1.24.md#2025-04-10_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Type: application/json\n```\n\nLANGUAGE: json\nCODE:\n```\n[\n         {\n                 \"Id\": \"8dfafdbc3a40\",\n                 \"Names\":[\"/boring_feynman\"],\n                 \"Image\": \"ubuntu:latest\",\n                 \"ImageID\": \"d74508fb6632491cea586a1fd7d748dfc5274cd6fdfedee309ecdcbc2bf5cb82\",\n                 \"Command\": \"echo 1\",\n                 \"Created\": 1367854155,\n                 \"State\": \"exited\",\n                 \"Status\": \"Exit 0\",\n                 \"Ports\": [{\"PrivatePort\": 2222, \"PublicPort\": 3333, \"Type\": \"tcp\"}],\n                 \"Labels\": {\n                         \"com.example.vendor\": \"Acme\",\n                         \"com.example.license\": \"GPL\",\n                         \"com.example.version\": \"1.0\"\n                 },\n                 \"SizeRw\": 12288,\n                 \"SizeRootFs\": 0,\n                 \"HostConfig\": {\n                         \"NetworkMode\": \"default\"\n                 },\n                 \"NetworkSettings\": {\n                         \"Networks\": {\n                                 \"bridge\": {\n                                          \"IPAMConfig\": null,\n                                          \"Links\": null,\n                                          \"Aliases\": null,\n                                          \"NetworkID\": \"7ea29fc1412292a2d7bba362f9253545fecdfa8ce9a6e37dd10ba8bee7129812\",\n                                          \"EndpointID\": \"2cdc4edb1ded3631c81f57966563e5c8525b81121bb3706a9a9a3ae102711f3f\",\n                                          \"Gateway\": \"172.17.0.1\",\n                                          \"IPAddress\": \"172.17.0.2\",\n                                          \"IPPrefixLen\": 16,\n                                          \"IPv6Gateway\": \"\",\n                                          \"GlobalIPv6Address\": \"\",\n                                          \"GlobalIPv6PrefixLen\": 0,\n                                          \"MacAddress\": \"02:42:ac:11:00:02\"\n                                  }\n                         }\n                 },\n                 \"Mounts\": [\n                         {\n                                  \"Name\": \"fac362...80535\",\n                                  \"Source\": \"/data\",\n                                  \"Destination\": \"/data\",\n                                  \"Driver\": \"local\",\n                                  \"Mode\": \"ro,Z\",\n                                  \"RW\": false,\n                                  \"Propagation\": \"\"\n                         }\n                 ]\n         }]\n```\n\n----------------------------------------\n\nTITLE: Container Rename Response\nDESCRIPTION: Example HTTP response for a successful container rename operation, showing a 204 No Content status code.\nSOURCE: https://github.com/moby/moby/blob/master/docs/api/v1.24.md#2025-04-10_snippet_39\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 204 No Content\n```\n\n----------------------------------------\n\nTITLE: Configuring Git User Information\nDESCRIPTION: Commands to configure Git username and email for the repository\nSOURCE: https://github.com/moby/moby/blob/master/docs/contributing/set-up-git.md#2025-04-10_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ git config --local user.name \"FirstName LastName\"\n$ git config --local user.email \"emailname@mycompany.com\"\n```\n\n----------------------------------------\n\nTITLE: Using SugaredLogger for Convenient Structured Logging in Go\nDESCRIPTION: Demonstrates how to use Zap's SugaredLogger for convenient structured logging with both key-value pairs and printf-style formatting. The SugaredLogger offers a balance between performance and ease of use.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/go.uber.org/zap/README.md#2025-04-10_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nlogger, _ := zap.NewProduction()\ndefer logger.Sync() // flushes buffer, if any\nsugar := logger.Sugar()\nsugar.Infow(\"failed to fetch URL\",\n  // Structured context as loosely typed key-value pairs.\n  \"url\", url,\n  \"attempt\", 3,\n  \"backoff\", time.Second,\n)\nsugar.Infof(\"Failed to fetch URL: %s\", url)\n```\n\n----------------------------------------\n\nTITLE: Serving Single Page Applications with Go and Gorilla Mux\nDESCRIPTION: Provides a complete example of serving a Single Page Application (SPA) alongside API endpoints using Gorilla Mux, including custom SPA handler implementation.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/gorilla/mux/README.md#2025-04-10_snippet_9\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"encoding/json\"\n\t\"log\"\n\t\"net/http\"\n\t\"os\"\n\t\"path/filepath\"\n\t\"time\"\n\n\t\"github.com/gorilla/mux\"\n)\n\n// spaHandler implements the http.Handler interface, so we can use it\n// to respond to HTTP requests. The path to the static directory and\n// path to the index file within that static directory are used to\n// serve the SPA in the given static directory.\ntype spaHandler struct {\n\tstaticPath string\n\tindexPath  string\n}\n\n// ServeHTTP inspects the URL path to locate a file within the static dir\n// on the SPA handler. If a file is found, it will be served. If not, the\n// file located at the index path on the SPA handler will be served. This\n// is suitable behavior for serving an SPA (single page application).\nfunc (h spaHandler) ServeHTTP(w http.ResponseWriter, r *http.Request) {\n\t// Join internally call path.Clean to prevent directory traversal\n\tpath := filepath.Join(h.staticPath, r.URL.Path)\n\n\t// check whether a file exists or is a directory at the given path\n\tfi, err := os.Stat(path)\n\tif os.IsNotExist(err) || fi.IsDir() {\n\t\t// file does not exist or path is a directory, serve index.html\n\t\thttp.ServeFile(w, r, filepath.Join(h.staticPath, h.indexPath))\n\t\treturn\n\t}\n\n\tif err != nil {\n\t\t// if we got an error (that wasn't that the file doesn't exist) stating the\n\t\t// file, return a 500 internal server error and stop\n\t\thttp.Error(w, err.Error(), http.StatusInternalServerError)\n        return\n\t}\n\n\t// otherwise, use http.FileServer to serve the static file\n\thttp.FileServer(http.Dir(h.staticPath)).ServeHTTP(w, r)\n}\n\nfunc main() {\n\trouter := mux.NewRouter()\n\n\trouter.HandleFunc(\"/api/health\", func(w http.ResponseWriter, r *http.Request) {\n\t\t// an example API handler\n\t\tjson.NewEncoder(w).Encode(map[string]bool{\"ok\": true})\n\t})\n\n\tspa := spaHandler{staticPath: \"build\", indexPath: \"index.html\"}\n\trouter.PathPrefix(\"/\").Handler(spa)\n\n\tsrv := &http.Server{\n\t\tHandler: router,\n\t\tAddr:    \"127.0.0.1:8000\",\n\t\t// Good practice: enforce timeouts for servers you create!\n\t\tWriteTimeout: 15 * time.Second,\n\t\tReadTimeout:  15 * time.Second,\n\t}\n\n\tlog.Fatal(srv.ListenAndServe())\n}\n```\n\n----------------------------------------\n\nTITLE: Compressing a Buffer using Zstandard in Go\nDESCRIPTION: This snippet shows how to compress a byte slice using a reusable Zstandard encoder. It creates a cached writer and uses the EncodeAll method to compress the input buffer, which can be called concurrently and runs without allocations after a warmup period.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/klauspost/compress/zstd/README.md#2025-04-10_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nimport \"github.com/klauspost/compress/zstd\"\n\n// Create a writer that caches compressors.\n// For this operation type we supply a nil Reader.\nvar encoder, _ = zstd.NewWriter(nil)\n\n// Compress a buffer. \n// If you have a destination buffer, the allocation in the call can also be eliminated.\nfunc Compress(src []byte) []byte {\n    return encoder.EncodeAll(src, make([]byte, 0, len(src)))\n}\n```\n\n----------------------------------------\n\nTITLE: Opening a bbolt Database in Go\nDESCRIPTION: Go code demonstrating how to open a bbolt database file, create it if it doesn't exist, and handle errors.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/go.etcd.io/bbolt/README.md#2025-04-10_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"log\"\n\n\tbolt \"go.etcd.io/bbolt\"\n)\n\nfunc main() {\n\t// Open the my.db data file in your current directory.\n\t// It will be created if it doesn't exist.\n\tdb, err := bolt.Open(\"my.db\", 0600, nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer db.Close()\n\n\t...\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Flag Value Implementation\nDESCRIPTION: Example of creating custom flags using the Value interface.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/spf13/pflag/README.md#2025-04-10_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nflag.Var(&flagVal, \"name\", \"help message for flagname\")\n```\n\n----------------------------------------\n\nTITLE: Creating Macvlan Network with Inferred Gateways and IP Range Restrictions in Docker\nDESCRIPTION: This example shows how to create a Macvlan network with inferred gateways, IP range restrictions, and reserved addresses. It demonstrates the use of --ip-range and --aux-address options in network creation.\nSOURCE: https://github.com/moby/moby/blob/master/libnetwork/docs/macvlan.md#2025-04-10_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ndocker network create -d macvlan \\\n  --subnet=192.168.136.0/24 \\\n  --subnet=192.168.138.0/24 \\\n  --ipv6 --subnet=fd11::/64 \\\n  --ip-range=192.168.136.0/25 \\\n  --ip-range=192.168.138.0/25 \\\n  --aux-address=\"reserved1=fd11::2\" \\\n  --aux-address=\"reserved2=192.168.136.2\" \\\n  --aux-address=\"reserved3=192.168.138.2\" \\\n  -o parent=eth0 mcv0\n\ndocker run --net=mcv0 -it --rm alpine /bin/sh\n```\n\n----------------------------------------\n\nTITLE: Allowing Service Traffic on Host Forwarding Chain\nDESCRIPTION: These iptables rules in the host namespace's filter FORWARD chain allow incoming traffic to the service's published port (30000) and the related established connections for return traffic.\nSOURCE: https://github.com/moby/moby/blob/master/libnetwork/docs/network.md#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nACCEPT  tcp  --  anywhere anywhere tcp dpt:30000\n```\n\nLANGUAGE: bash\nCODE:\n```\nACCEPT tcp  --  anywhere anywhere state RELATED,ESTABLISHED tcp spt:30000\n```\n\n----------------------------------------\n\nTITLE: Combining Multiple Matchers in Go using Gorilla Mux\nDESCRIPTION: Shows how to combine multiple matchers in a single route for more specific matching.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/gorilla/mux/README.md#2025-04-10_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nr.HandleFunc(\"/products\", ProductsHandler).\n  Host(\"www.example.com\").\n  Methods(\"GET\").\n  Schemes(\"http\")\n```\n\n----------------------------------------\n\nTITLE: Container Filesystem Changes Response\nDESCRIPTION: JSON response showing changes to a container's filesystem. Each entry includes the path that was modified and a 'Kind' value indicating whether the file was modified (0), added (1), or deleted (2).\nSOURCE: https://github.com/moby/moby/blob/master/docs/api/v1.24.md#2025-04-10_snippet_22\n\nLANGUAGE: JSON\nCODE:\n```\n[\n     {\n             \"Path\": \"/dev\",\n             \"Kind\": 0\n     },\n     {\n             \"Path\": \"/dev/kmsg\",\n             \"Kind\": 1\n     },\n     {\n             \"Path\": \"/test\",\n             \"Kind\": 1\n     }\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Port Bindings for Docker Containers\nDESCRIPTION: Maps exposed container ports to host ports, allowing network traffic to reach the container. The configuration specifies which host port should be mapped to which container port and protocol.\nSOURCE: https://github.com/moby/moby/blob/master/docs/api/v1.24.md#2025-04-10_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{ <port>/<protocol>: [{ \"HostPort\": \"<port>\" }] }\n```\n\n----------------------------------------\n\nTITLE: Creating Macvlan Network with VLAN ID 60 and Explicit Bridge Mode\nDESCRIPTION: Creates a Macvlan network with VLAN ID 60 using the parent interface eth0.60 and explicitly setting macvlan_mode to bridge. This configures the network with subnet 192.168.60.0/24.\nSOURCE: https://github.com/moby/moby/blob/master/libnetwork/docs/macvlan.md#2025-04-10_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n# now add networks and hosts as you would normally by attaching to the master (sub)interface that is tagged.\ndocker network create -d macvlan \\\n    --subnet=192.168.60.0/24 \\\n    --gateway=192.168.60.1 \\\n    -o parent=eth0.60 -o \\\n    -o macvlan_mode=bridge macvlan60\n\n# In two separate terminals, start a Docker container and the containers can now ping one another.\ndocker run --net=macvlan60 -it --name macvlan_test7 --rm alpine /bin/sh\ndocker run --net=macvlan60 -it --name macvlan_test8 --rm alpine /bin/sh\n```\n\n----------------------------------------\n\nTITLE: Using deadlock.RWMutex in Go code\nDESCRIPTION: Example of how to use the deadlock.RWMutex as a drop-in replacement for sync.RWMutex. This demonstrates read locking and unlocking operations with deadlock detection.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/sasha-s/go-deadlock/Readme.md#2025-04-10_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nvar rw deadlock.RWMutex\nrw.RLock()\ndefer rw.RUnlock()\n```\n\n----------------------------------------\n\nTITLE: Creating a Bridge and Adding an Interface in Go with Netlink\nDESCRIPTION: This example demonstrates how to create a new network bridge named 'foo' and add an existing interface 'eth1' to it using the netlink library. It uses LinkAdd to create the bridge and LinkSetMaster to add the interface to the bridge.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/vishvananda/netlink/README.md#2025-04-10_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"fmt\"\n    \"github.com/vishvananda/netlink\"\n)\n\nfunc main() {\n    la := netlink.NewLinkAttrs()\n    la.Name = \"foo\"\n    mybridge := &netlink.Bridge{LinkAttrs: la}\n    err := netlink.LinkAdd(mybridge)\n    if err != nil  {\n        fmt.Printf(\"could not add %s: %v\\n\", la.Name, err)\n    }\n    eth1, _ := netlink.LinkByName(\"eth1\")\n    netlink.LinkSetMaster(eth1, mybridge)\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Read-Write Transaction in bbolt\nDESCRIPTION: Go code demonstrating how to start and execute a read-write transaction in bbolt using DB.Update().\nSOURCE: https://github.com/moby/moby/blob/master/vendor/go.etcd.io/bbolt/README.md#2025-04-10_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nerr := db.Update(func(tx *bolt.Tx) error {\n\t...\n\treturn nil\n})\n```\n\n----------------------------------------\n\nTITLE: Viewing Container Network Details in Docker Macvlan Network\nDESCRIPTION: This snippet shows how to view network details from within a container in a Macvlan network, including IP addresses, routes, and interface information for both IPv4 and IPv6.\nSOURCE: https://github.com/moby/moby/blob/master/libnetwork/docs/macvlan.md#2025-04-10_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --net=macvlan216 --ip=192.168.216.11 -it --rm alpine /bin/sh\n\nroot@526f3060d759:/# ip a show eth0\n25: eth0@if19: <BROADCAST,MULTICAST,UP,LOWER_UP,M-DOWN> mtu 1500 qdisc noqueue state UNKNOWN\n    link/ether 02:42:c0:a8:d8:0b brd ff:ff:ff:ff:ff:ff\n    inet 192.168.216.11/24 scope global eth0\n       valid_lft forever preferred_lft forever\n    inet6 2001:db8:abc8::1/64 scope link\n       valid_lft forever preferred_lft forever\n\n# The default gateway is a network gateway external to the Docker host\n$ ip route\ndefault via 192.168.216.1 dev eth0\n192.168.216.0/24 dev eth0  src 192.168.216.11\n\n# Specified v6 gateway of 2001:db8:abc8::10\n$ ip -6 route\n  2001:db8:abc4::/64 dev eth0  proto kernel  metric 256\n  2001:db8:abc8::/64 dev eth0  proto kernel  metric 256\n  default via 2001:db8:abc8::10 dev eth0  metric 1024\n\n#Containers can have both v4 and v6 addresses assigned to their interfaces or\n# Both v4 and v6 addresses can be assigned to the container's interface\ndocker run --net=macvlan216 --ip=192.168.216.50  --ip6=2001:db8:abc8::50 -it --rm alpine /bin/sh\n\n# View the details of the dual stack eth0 interface from inside of the container\n$ ip a show eth0\n95: eth0@if91: <BROADCAST,MULTICAST,UP,LOWER_UP,M-DOWN> mtu 1500 qdisc noqueue state UNKNOWN\n    link/ether 02:42:c0:a8:d8:32 brd ff:ff:ff:ff:ff:ff\n    inet 192.168.216.50/24 scope global eth0\n       valid_lft forever preferred_lft forever\n    inet6 2001:db8:abc8::50/64 scope global flags 02\n       valid_lft forever preferred_lft forever\n```\n\n----------------------------------------\n\nTITLE: Creating and Managing Test Branch\nDESCRIPTION: Commands for creating, checking out, and verifying branch creation\nSOURCE: https://github.com/moby/moby/blob/master/docs/contributing/set-up-git.md#2025-04-10_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ git checkout -b dry-run-test\n$ git branch\n```\n\n----------------------------------------\n\nTITLE: Basic Logrus Usage Example in Go\nDESCRIPTION: Demonstrates the simplest way to use Logrus with package-level logger and field-based logging.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/sirupsen/logrus/README.md#2025-04-10_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n  log \"github.com/sirupsen/logrus\"\n)\n\nfunc main() {\n  log.WithFields(log.Fields{\n    \"animal\": \"walrus\",\n  }).Info(\"A walrus appears\")\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ConfChangeType Enum in Protobuf for Raft\nDESCRIPTION: Protocol Buffer definition for the ConfChangeType enum used in Raft consensus algorithm. This enumeration defines types of configuration changes, including adding and removing nodes, updating nodes, and adding learner nodes.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/moby/swarmkit/v2/api/api.pb.txt#2025-04-10_snippet_116\n\nLANGUAGE: protobuf\nCODE:\n```\nenum_type {\n  name: \"ConfChangeType\"\n  value {\n    name: \"ConfChangeAddNode\"\n    number: 0\n  }\n  value {\n    name: \"ConfChangeRemoveNode\"\n    number: 1\n  }\n  value {\n    name: \"ConfChangeUpdateNode\"\n    number: 2\n  }\n  value {\n    name: \"ConfChangeAddLearnerNode\"\n    number: 3\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TaskSpec Message in Protocol Buffers\nDESCRIPTION: Defines the TaskSpec message type, which includes fields for task runtime options, resource requirements, restart policies, placement constraints, logging, networking, and update behaviors. This structure is used to configure individual tasks within a service in a Docker Swarm cluster.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/moby/swarmkit/v2/api/api.pb.txt#2025-04-10_snippet_64\n\nLANGUAGE: Protocol Buffers\nCODE:\n```\nmessage_type {\n  name: \"TaskSpec\"\n  field {\n    name: \"attachment\"\n    number: 8\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".docker.swarmkit.v1.NetworkAttachmentSpec\"\n    oneof_index: 0\n    json_name: \"attachment\"\n  }\n  field {\n    name: \"container\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".docker.swarmkit.v1.ContainerSpec\"\n    oneof_index: 0\n    json_name: \"container\"\n  }\n  field {\n    name: \"generic\"\n    number: 10\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".docker.swarmkit.v1.GenericRuntimeSpec\"\n    oneof_index: 0\n    json_name: \"generic\"\n  }\n  field {\n    name: \"resources\"\n    number: 2\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".docker.swarmkit.v1.ResourceRequirements\"\n    json_name: \"resources\"\n  }\n  field {\n    name: \"restart\"\n    number: 4\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".docker.swarmkit.v1.RestartPolicy\"\n    json_name: \"restart\"\n  }\n  field {\n    name: \"placement\"\n    number: 5\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".docker.swarmkit.v1.Placement\"\n    json_name: \"placement\"\n  }\n  field {\n    name: \"log_driver\"\n    number: 6\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".docker.swarmkit.v1.Driver\"\n    json_name: \"logDriver\"\n  }\n  field {\n    name: \"networks\"\n    number: 7\n    label: LABEL_REPEATED\n    type: TYPE_MESSAGE\n    type_name: \".docker.swarmkit.v1.NetworkAttachmentConfig\"\n    json_name: \"networks\"\n  }\n  field {\n    name: \"force_update\"\n    number: 9\n    label: LABEL_OPTIONAL\n    type: TYPE_UINT64\n    json_name: \"forceUpdate\"\n  }\n  field {\n    name: \"resource_references\"\n    number: 11\n    label: LABEL_REPEATED\n    type: TYPE_MESSAGE\n    type_name: \".docker.swarmkit.v1.ResourceReference\"\n    options {\n      65001: 0\n    }\n    json_name: \"resourceReferences\"\n  }\n  oneof_decl {\n    name: \"runtime\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Gorilla Mux Server Example\nDESCRIPTION: Minimal working example of a Gorilla Mux-based web server. This code sets up a router with a single route that responds with a text message.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/gorilla/mux/README.md#2025-04-10_snippet_23\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"net/http\"\n    \"log\"\n    \"github.com/gorilla/mux\"\n)\n\nfunc YourHandler(w http.ResponseWriter, r *http.Request) {\n    w.Write([]byte(\"Gorilla!\\n\"))\n}\n\nfunc main() {\n    r := mux.NewRouter()\n    // Routes consist of a path and a handler function.\n    r.HandleFunc(\"/\", YourHandler)\n\n    // Bind to a port and pass our router in\n    log.Fatal(http.ListenAndServe(\":8000\", r))\n}\n```\n\n----------------------------------------\n\nTITLE: Docker SwarmKit Control API Protocol Buffer Definition\nDESCRIPTION: Protocol Buffer schema defining the control API for Docker SwarmKit. Includes message definitions for node management, task handling, and service operations with their associated request and response structures. Dependencies include specs.proto, objects.proto, types.proto and other core protobuf definitions.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/moby/swarmkit/v2/api/api.pb.txt#2025-04-10_snippet_90\n\nLANGUAGE: protobuf\nCODE:\n```\nsyntax: \"proto3\"\n\nfile {\n  name: \"github.com/docker/swarmkit/api/control.proto\"\n  package: \"docker.swarmkit.v1\"\n  dependency: \"github.com/docker/swarmkit/api/specs.proto\"\n  dependency: \"github.com/docker/swarmkit/api/objects.proto\"\n  dependency: \"github.com/docker/swarmkit/api/types.proto\"\n  dependency: \"gogoproto/gogo.proto\"\n  dependency: \"google/protobuf/any.proto\"\n  dependency: \"github.com/docker/swarmkit/protobuf/plugin/plugin.proto\"\n  \n  message_type {\n    name: \"GetNodeRequest\"\n    field {\n      name: \"node_id\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"nodeId\"\n    }\n  }\n  // Additional message definitions follow...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Cluster Message Structure in Protobuf\nDESCRIPTION: Definition of a Cluster message type with fields for ID, metadata, specifications, root CA, network bootstrap keys, and other cluster-related properties. Includes a nested BlacklistedCertificatesEntry type and indexing options.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/moby/swarmkit/v2/api/api.pb.txt#2025-04-10_snippet_84\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage_type {\n  name: \"Cluster\"\n  field {\n    name: \"id\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"id\"\n  }\n  field {\n    name: \"meta\"\n    number: 2\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".docker.swarmkit.v1.Meta\"\n    options {\n      65001: 0\n    }\n    json_name: \"meta\"\n  }\n  field {\n    name: \"spec\"\n    number: 3\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".docker.swarmkit.v1.ClusterSpec\"\n    options {\n      65001: 0\n    }\n    json_name: \"spec\"\n  }\n  field {\n    name: \"root_ca\"\n    number: 4\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".docker.swarmkit.v1.RootCA\"\n    options {\n      65001: 0\n      65004: \"RootCA\"\n    }\n    json_name: \"rootCa\"\n  }\n  field {\n    name: \"network_bootstrap_keys\"\n    number: 5\n    label: LABEL_REPEATED\n    type: TYPE_MESSAGE\n    type_name: \".docker.swarmkit.v1.EncryptionKey\"\n    json_name: \"networkBootstrapKeys\"\n  }\n  field {\n    name: \"encryption_key_lamport_clock\"\n    number: 6\n    label: LABEL_OPTIONAL\n    type: TYPE_UINT64\n    json_name: \"encryptionKeyLamportClock\"\n  }\n  field {\n    name: \"blacklisted_certificates\"\n    number: 8\n    label: LABEL_REPEATED\n    type: TYPE_MESSAGE\n    type_name: \".docker.swarmkit.v1.Cluster.BlacklistedCertificatesEntry\"\n    json_name: \"blacklistedCertificates\"\n  }\n  field {\n    name: \"unlock_keys\"\n    number: 9\n    label: LABEL_REPEATED\n    type: TYPE_MESSAGE\n    type_name: \".docker.swarmkit.v1.EncryptionKey\"\n    json_name: \"unlockKeys\"\n  }\n  field {\n    name: \"fips\"\n    number: 10\n    label: LABEL_OPTIONAL\n    type: TYPE_BOOL\n    options {\n      65004: \"FIPS\"\n    }\n    json_name: \"fips\"\n  }\n  field {\n    name: \"defaultAddressPool\"\n    number: 11\n    label: LABEL_REPEATED\n    type: TYPE_STRING\n    json_name: \"defaultAddressPool\"\n  }\n  field {\n    name: \"subnetSize\"\n    number: 12\n    label: LABEL_OPTIONAL\n    type: TYPE_UINT32\n    json_name: \"subnetSize\"\n  }\n  field {\n    name: \"VXLANUDPPort\"\n    number: 13\n    label: LABEL_OPTIONAL\n    type: TYPE_UINT32\n    json_name: \"VXLANUDPPort\"\n  }\n  nested_type {\n    name: \"BlacklistedCertificatesEntry\"\n    field {\n      name: \"key\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"key\"\n    }\n    field {\n      name: \"value\"\n      number: 2\n      label: LABEL_OPTIONAL\n      type: TYPE_MESSAGE\n      type_name: \".docker.swarmkit.v1.BlacklistedCertificate\"\n      json_name: \"value\"\n    }\n    options {\n      map_entry: true\n    }\n  }\n  options {\n    70001 {\n      1 {\n        1: 1\n        2: 1\n        3: 1\n        4: 1\n        5: 1\n        6: 1\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Blob SDK Generation Settings\nDESCRIPTION: Core configuration settings for generating the Azure Blob Storage SDK including version, input specifications, and code generation parameters.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/internal/generated/autorest.md#2025-04-10_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ngo: true\nclear-output-folder: false\nversion: \"^3.0.0\"\nlicense-header: MICROSOFT_MIT_NO_VERSION\ninput-file: \"https://raw.githubusercontent.com/Azure/azure-rest-api-specs/f6f50c6388fd5836fa142384641b8353a99874ef/specification/storage/data-plane/Microsoft.BlobStorage/stable/2024-08-04/blob.json\"\ncredential-scope: \"https://storage.azure.com/.default\"\noutput-folder: ../generated\nfile-prefix: \"zz_\"\nopenapi-type: \"data-plane\"\nverbose: true\nsecurity: AzureKey\nmodelerfour:\n  group-parameters: false\n  seal-single-value-enum-by-default: true\n  lenient-model-deduplication: true\nexport-clients: true\nuse: \"@autorest/go@4.0.0-preview.65\"\n```\n\n----------------------------------------\n\nTITLE: Default Filter Table IPTables Configuration\nDESCRIPTION: Shows the initial filter table configuration with chains INPUT, FORWARD, OUTPUT, DOCKER, DOCKER-BRIDGE, DOCKER-CT, DOCKER-FORWARD, DOCKER-ISOLATION stages, and DOCKER-USER. Includes packet counts, bytes, and rule specifications.\nSOURCE: https://github.com/moby/moby/blob/master/integration/network/bridge/iptablesdoc/generated/new-daemon.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nChain INPUT (policy ACCEPT 0 packets, 0 bytes)\nnum   pkts bytes target     prot opt in     out     source               destination         \n\nChain FORWARD (policy ACCEPT 0 packets, 0 bytes)\nnum   pkts bytes target     prot opt in     out     source               destination         \n1        0     0 DOCKER-USER  0    --  *      *       0.0.0.0/0            0.0.0.0/0           \n2        0     0 DOCKER-FORWARD  0    --  *      *       0.0.0.0/0            0.0.0.0/0           \n[...continued chain definitions...]\n```\n\n----------------------------------------\n\nTITLE: Displaying PkgGoDev Badge for OpenTelemetry Baggage Package in Markdown\nDESCRIPTION: Markdown code that creates a badge with a link to the OpenTelemetry baggage package documentation on pkg.go.dev. This provides users with easy access to the official Go package documentation.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/go.opentelemetry.io/otel/baggage/README.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![PkgGoDev](https://pkg.go.dev/badge/go.opentelemetry.io/otel/baggage)](https://pkg.go.dev/go.opentelemetry.io/otel/baggage)\n```\n\n----------------------------------------\n\nTITLE: Starting a Container via HTTP Request\nDESCRIPTION: Example HTTP POST request to start a container with ID 'e90e34656806'.\nSOURCE: https://github.com/moby/moby/blob/master/docs/api/v1.24.md#2025-04-10_snippet_28\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1.24/containers/e90e34656806/start HTTP/1.1\n```\n\n----------------------------------------\n\nTITLE: Defining ClusterSpec Message in Protocol Buffers for Docker Swarmkit v1\nDESCRIPTION: This snippet defines the ClusterSpec message type, which includes fields for cluster configuration such as orchestration settings, Raft configuration, dispatcher settings, CA configuration, and encryption options in a Docker Swarm.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/moby/swarmkit/v2/api/api.pb.txt#2025-04-10_snippet_69\n\nLANGUAGE: Protocol Buffers\nCODE:\n```\nmessage_type {\n  name: \"ClusterSpec\"\n  field {\n    name: \"annotations\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".docker.swarmkit.v1.Annotations\"\n    options {\n      65001: 0\n    }\n    json_name: \"annotations\"\n  }\n  // ... (additional fields omitted for brevity)\n}\n```\n\n----------------------------------------\n\nTITLE: Docker Container Creation API Response\nDESCRIPTION: This snippet shows the expected HTTP response after successfully creating a Docker container. It includes the container ID and any warnings.\nSOURCE: https://github.com/moby/moby/blob/master/docs/api/v1.24.md#2025-04-10_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 201 Created\nContent-Type: application/json\n\n{\n     \"Id\":\"e90e34656806\",\n     \"Warnings\":[]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Macvlan Network\nDESCRIPTION: Commands to create a Macvlan network and run containers using it, including network creation with specific subnet and gateway settings, and container deployment with IP assignment\nSOURCE: https://github.com/moby/moby/blob/master/libnetwork/docs/macvlan.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Macvlan  (-o macvlan_mode= Defaults to Bridge mode if not specified)\ndocker network create -d macvlan \\\n    --subnet=172.16.86.0/24 \\\n    --gateway=172.16.86.1  \\\n    -o parent=eth0 pub_net\n\n# Run a container on the new network specifying the --ip address.\ndocker  run --net=pub_net --ip=172.16.86.10 -itd alpine /bin/sh\n\n# Start a second container and ping the first\ndocker  run --net=pub_net -it --rm alpine /bin/sh\nping -c 4 172.16.86.10\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic File System Watcher in Go\nDESCRIPTION: This snippet demonstrates how to create a basic file system watcher using the fsnotify library. It shows how to create a new watcher, start listening for events, add a path to watch, and handle events and errors.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/fsnotify/fsnotify/README.md#2025-04-10_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"log\"\n\n    \"github.com/fsnotify/fsnotify\"\n)\n\nfunc main() {\n    // Create new watcher.\n    watcher, err := fsnotify.NewWatcher()\n    if err != nil {\n        log.Fatal(err)\n    }\n    defer watcher.Close()\n\n    // Start listening for events.\n    go func() {\n        for {\n            select {\n            case event, ok := <-watcher.Events:\n                if !ok {\n                    return\n                }\n                log.Println(\"event:\", event)\n                if event.Has(fsnotify.Write) {\n                    log.Println(\"modified file:\", event.Name)\n                }\n            case err, ok := <-watcher.Errors:\n                if !ok {\n                    return\n                }\n                log.Println(\"error:\", err)\n            }\n        }\n    }()\n\n    // Add a path.\n    err = watcher.Add(\"/tmp\")\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    // Block main goroutine forever.\n    <-make(chan struct{})\n}\n```\n\n----------------------------------------\n\nTITLE: Network Driver Join Response Format\nDESCRIPTION: Response format for the Join endpoint specifying interface details, gateway addresses and static routes. Includes interface naming and route configuration options.\nSOURCE: https://github.com/moby/moby/blob/master/libnetwork/docs/remote.md#2025-04-10_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"InterfaceName\": {\n        SrcName: string,\n        DstPrefix: string\n    },\n    \"Gateway\": string,\n    \"GatewayIPv6\": string,\n    \"StaticRoutes\": [{\n        \"Destination\": string,\n        \"RouteType\": int,\n        \"NextHop\": string,\n    }, ...]\n}\n```\n\n----------------------------------------\n\nTITLE: Running Docker-in-Docker with Privileged Mode in Bash\nDESCRIPTION: The dind.sh script allows running Docker inside a Docker container. It requires the container to be run with privileged mode enabled.\nSOURCE: https://github.com/moby/moby/blob/master/hack/README.md#2025-04-10_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\n## DinD (dind.sh)\n\nDinD is a wrapper script which allows Docker to be run inside a Docker\ncontainer. DinD requires the container to\nbe run with privileged mode enabled.\n```\n\n----------------------------------------\n\nTITLE: Restarting Raft Node from Previous State in Go\nDESCRIPTION: Shows how to recover a Raft node from persistent storage by applying snapshot, state, and entries before restarting.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/go.etcd.io/etcd/raft/v3/README.md#2025-04-10_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n  storage := raft.NewMemoryStorage()\n\n  // Recover the in-memory storage from persistent snapshot, state and entries.\n  storage.ApplySnapshot(snapshot)\n  storage.SetHardState(state)\n  storage.Append(entries)\n\n  c := &raft.Config{\n    ID:              0x01,\n    ElectionTick:    10,\n    HeartbeatTick:   1,\n    Storage:         storage,\n    MaxSizePerMsg:   4096,\n    MaxInflightMsgs: 256,\n  }\n\n  // Restart raft without peer information.\n  // Peer information is already included in the storage.\n  n := raft.RestartNode(c)\n```\n\n----------------------------------------\n\nTITLE: Running Registry with Default Configuration\nDESCRIPTION: Starts the registry service using the example configuration file provided in the source repository. Shows the registry starting up and listening on port 5000.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/docker/distribution/BUILDING.md#2025-04-10_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ $GOPATH/bin/registry serve $GOPATH/src/github.com/docker/distribution/cmd/registry/config-example.yml\nINFO[0000] endpoint local-5003 disabled, skipping        app.id=34bbec38-a91a-494a-9a3f-b72f9010081f version=v2.0.0-alpha.1+unknown\nINFO[0000] endpoint local-8083 disabled, skipping        app.id=34bbec38-a91a-494a-9a3f-b72f9010081f version=v2.0.0-alpha.1+unknown\nINFO[0000] listening on :5000                            app.id=34bbec38-a91a-494a-9a3f-b72f9010081f version=v2.0.0-alpha.1+unknown\nINFO[0000] debug server listening localhost:5001\n```\n\n----------------------------------------\n\nTITLE: Using ns.Do() Method for Network Namespace Operations in Go\nDESCRIPTION: Example of how to safely execute network operations within a specific network namespace using the ns.Do() method. This code demonstrates creating a dummy network interface in the target namespace while handling the namespace switching correctly.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/containernetworking/plugins/pkg/ns/README.md#2025-04-10_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nerr = targetNs.Do(func(hostNs ns.NetNS) error {\n\tlinkAttrs := netlink.NewLinkAttrs()\n\tlinkAttrs.Name = \"dummy0\"\n\tdummy := &netlink.Dummy{\n\t\tLinkAttrs: linkAttrs,\n\t}\n\treturn netlink.LinkAdd(dummy)\n})\n```\n\n----------------------------------------\n\nTITLE: Updating a Container via HTTP Request\nDESCRIPTION: Example HTTP POST request to update configuration of a container with ID 'e90e34656806', including resource constraints and restart policy.\nSOURCE: https://github.com/moby/moby/blob/master/docs/api/v1.24.md#2025-04-10_snippet_36\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1.24/containers/e90e34656806/update HTTP/1.1\nContent-Type: application/json\nContent-Length: 12345\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"BlkioWeight\": 300,\n  \"CpuShares\": 512,\n  \"CpuPeriod\": 100000,\n  \"CpuQuota\": 50000,\n  \"CpusetCpus\": \"0,1\",\n  \"CpusetMems\": \"0\",\n  \"Memory\": 314572800,\n  \"MemorySwap\": 514288000,\n  \"MemoryReservation\": 209715200,\n  \"KernelMemory\": 52428800,\n  \"RestartPolicy\": {\n    \"MaximumRetryCount\": 4,\n    \"Name\": \"on-failure\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Functional Options in Go\nDESCRIPTION: Creates a functional option implementation using function types, allowing for more complex configuration logic in the apply method.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#2025-04-10_snippet_11\n\nLANGUAGE: go\nCODE:\n```\ntype optionFunc func(config) config\n\nfunc (fn optionFunc) apply(c config) config {\n\treturn fn(c)\n}\n\n// WithMyType sets t as MyType.\nfunc WithMyType(t MyType) Option {\n\treturn optionFunc(func(c config) config {\n\t\tc.MyType = t\n        return c\n\t})\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Server-side gRPC Prometheus Interceptors in Go\nDESCRIPTION: Configuration of server-side gRPC interceptors for Prometheus monitoring. Includes initialization of the gRPC server with stream and unary interceptors, service registration, and metrics handler setup.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/grpc-ecosystem/go-grpc-prometheus/README.md#2025-04-10_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/grpc-ecosystem/go-grpc-prometheus\"\n...\n    // Initialize your gRPC server's interceptor.\n    myServer := grpc.NewServer(\n        grpc.StreamInterceptor(grpc_prometheus.StreamServerInterceptor),\n        grpc.UnaryInterceptor(grpc_prometheus.UnaryServerInterceptor),\n    )\n    // Register your gRPC service implementations.\n    myservice.RegisterMyServiceServer(s.server, &myServiceImpl{})\n    // After all your registrations, make sure all of the Prometheus metrics are initialized.\n    grpc_prometheus.Register(myServer)\n    // Register Prometheus metrics handler.    \n    http.Handle(\"/metrics\", promhttp.Handler())\n```\n\n----------------------------------------\n\nTITLE: Disconnect Container from Network API Request/Response\nDESCRIPTION: POST endpoint to disconnect a container from a network with optional force parameter.\nSOURCE: https://github.com/moby/moby/blob/master/docs/api/v1.24.md#2025-04-10_snippet_86\n\nLANGUAGE: json\nCODE:\n```\nPOST /v1.24/networks/22be93d5babb089c5aab8dbc369042fad48ff791584ca2da2100db837a1c7c30/disconnect HTTP/1.1\nContent-Type: application/json\nContent-Length: 12345\n\n{\n  \"Container\":\"3613f73ba0e4\",\n  \"Force\":false\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Macvlan Network with VLAN ID 50\nDESCRIPTION: Creates a Macvlan network with VLAN ID 50 using the parent interface eth0.50. This configures the network with subnet 192.168.50.0/24 and demonstrates container connectivity on this VLAN.\nSOURCE: https://github.com/moby/moby/blob/master/libnetwork/docs/macvlan.md#2025-04-10_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n# now add networks and hosts as you would normally by attaching to the master (sub)interface that is tagged\ndocker network create -d macvlan \\\n    --subnet=192.168.50.0/24 \\\n    --gateway=192.168.50.1 \\\n    -o parent=eth0.50 macvlan50\n\n# In two separate terminals, start a Docker container and the containers can now ping one another.\ndocker run --net=macvlan50 -it --name macvlan_test5 --rm alpine /bin/sh\ndocker run --net=macvlan50 -it --name macvlan_test6 --rm alpine /bin/sh\n```\n\n----------------------------------------\n\nTITLE: Filter Table Rules for Docker Internal Networks\nDESCRIPTION: This snippet shows the iptables filter table rules for Docker internal networks. It includes rules for the DOCKER-FORWARD chain, DOCKER-ISOLATION-STAGE-1, and highlights the differences between networks with and without inter-container communication.\nSOURCE: https://github.com/moby/moby/blob/master/integration/network/bridge/iptablesdoc/templates/usernet-internal.md#2025-04-10_snippet_1\n\nLANGUAGE: iptables\nCODE:\n```\n{{index . \"LFilter4\"}}\n```\n\nLANGUAGE: iptables\nCODE:\n```\n{{index . \"SFilter4\"}}\n```\n\n----------------------------------------\n\nTITLE: Event Check Comparison in Go\nDESCRIPTION: Code comparison showing the old and new ways of checking fsnotify events using Has() method introduced in v1.6.0.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/fsnotify/fsnotify/CHANGELOG.md#2025-04-10_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// Old way\nif event.Op&Write == Write && !(event.Op&Remove == Remove) {\n}\n\n// New way\nif event.Has(Write) && !event.Has(Remove) {\n}\n```\n\n----------------------------------------\n\nTITLE: Stopping a Container via HTTP Request\nDESCRIPTION: Example HTTP POST request to stop a container with ID 'e90e34656806'. The query parameter 't' specifies the number of seconds to wait before killing the container.\nSOURCE: https://github.com/moby/moby/blob/master/docs/api/v1.24.md#2025-04-10_snippet_30\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1.24/containers/e90e34656806/stop?t=5 HTTP/1.1\n```\n\n----------------------------------------\n\nTITLE: Configuring StorageOpt in Docker Container Configuration\nDESCRIPTION: Specifies storage driver options for a container. This example sets a size limit of 120GB for the container's storage.\nSOURCE: https://github.com/moby/moby/blob/master/docs/api/v1.24.md#2025-04-10_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\"size\":\"120G\"}\n```\n\n----------------------------------------\n\nTITLE: Creating Macvlan Network with Custom IP Range in Docker\nDESCRIPTION: Creates a Macvlan network with a specific IP range allocation. This example configures the network to allocate container addresses starting from 192.168.32.128 within a broader subnet of 192.168.32.0/24.\nSOURCE: https://github.com/moby/moby/blob/master/libnetwork/docs/macvlan.md#2025-04-10_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker network create -d macvlan  \\\n    --subnet=192.168.32.0/24  \\\n    --ip-range=192.168.32.128/25 \\\n    --gateway=192.168.32.254  \\\n    -o parent=eth0 macnet32\n\n# Start a container and verify the address is 192.168.32.128\ndocker run --net=macnet32 -it --rm alpine /bin/sh\n```\n\n----------------------------------------\n\nTITLE: Initializing Three-Node Raft Cluster in Go\nDESCRIPTION: Demonstrates how to initialize a three-node Raft cluster by configuring storage and cluster settings. Sets up the first node with connections to two peer nodes.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/go.etcd.io/etcd/raft/v3/README.md#2025-04-10_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n  storage := raft.NewMemoryStorage()\n  c := &raft.Config{\n    ID:              0x01,\n    ElectionTick:    10,\n    HeartbeatTick:   1,\n    Storage:         storage,\n    MaxSizePerMsg:   4096,\n    MaxInflightMsgs: 256,\n  }\n  // Set peer list to the other nodes in the cluster.\n  // Note that they need to be started separately as well.\n  n := raft.StartNode(c, []raft.Peer{{ID: 0x02}, {ID: 0x03}})\n```\n\n----------------------------------------\n\nTITLE: Creating a Subcgroup (v1)\nDESCRIPTION: Creates a child cgroup under an existing parent cgroup with specified resources, allowing hierarchical organization of process groups.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/containerd/cgroups/v3/README.md#2025-04-10_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nsubCgroup, err := control.New(\"child\", resources)\n```\n\n----------------------------------------\n\nTITLE: Detecting Swarm Status from Docker API Ping Endpoint\nDESCRIPTION: The GET /_ping and HEAD /_ping endpoints now return a 'Swarm' header, allowing clients to detect if Swarm is enabled on the daemon without additional API calls. The header can contain values such as 'inactive', 'pending', 'error', 'locked', 'active/worker', or 'active/manager'.\nSOURCE: https://github.com/moby/moby/blob/master/docs/api/version-history.md#2025-04-10_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n* `GET /_ping` and `HEAD /_ping` now return a `Swarm` header, which allows a\n  client to detect if Swarm is enabled on the daemon, without having to call\n  additional endpoints.\n  This change is not versioned, and affects all API versions if the daemon has\n  this patch. Clients must consider this header \"optional\", and fall back to\n  using other endpoints to get this information if the header is not present.\n\n  The `Swarm` header can contain one of the following values:\n\n    - \"inactive\"\n    - \"pending\"\n    - \"error\"\n    - \"locked\"\n    - \"active/worker\"\n    - \"active/manager\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Raft State Machine Loop in Go\nDESCRIPTION: Demonstrates the main event loop for handling Raft state machine updates, including processing Ready channel updates, saving state, and handling configuration changes.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/go.etcd.io/etcd/raft/v3/README.md#2025-04-10_snippet_5\n\nLANGUAGE: go\nCODE:\n```\n  for {\n    select {\n    case <-s.Ticker:\n      n.Tick()\n    case rd := <-s.Node.Ready():\n      saveToStorage(rd.HardState, rd.Entries, rd.Snapshot)\n      send(rd.Messages)\n      if !raft.IsEmptySnap(rd.Snapshot) {\n        processSnapshot(rd.Snapshot)\n      }\n      for _, entry := range rd.CommittedEntries {\n        process(entry)\n        if entry.Type == raftpb.EntryConfChange {\n          var cc raftpb.ConfChange\n          cc.Unmarshal(entry.Data)\n          s.Node.ApplyConfChange(cc)\n        }\n      }\n      s.Node.Advance()\n    case <-s.done:\n      return\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Implementing HTTP Sink in Go\nDESCRIPTION: Example implementation of an HTTP sink that sends events as JSON POST requests. The sink writes events by marshaling them to JSON and sending them to a configured URL, returning an error on failure.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/docker/go-events/README.md#2025-04-10_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc (h *httpSink) Write(event Event) error {\n\tp, err := json.Marshal(event)\n\tif err != nil {\n\t\treturn err\n\t}\n\tbody := bytes.NewReader(p)\n\tresp, err := h.client.Post(h.url, \"application/json\", body)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer resp.Body.Close()\n\t\n\tif resp.Status != 200 {\n\t\treturn errors.New(\"unexpected status\")\n\t}\n\n\treturn nil\n}\n```\n\n----------------------------------------\n\nTITLE: Using Core Logger for High-Performance Structured Logging in Go\nDESCRIPTION: Shows how to use Zap's core Logger for maximum performance and type safety. This approach is faster than SugaredLogger but only supports structured logging with strongly typed Field values.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/go.uber.org/zap/README.md#2025-04-10_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nlogger, _ := zap.NewProduction()\ndefer logger.Sync()\nlogger.Info(\"failed to fetch URL\",\n  // Structured context as strongly typed Field values.\n  zap.String(\"url\", url),\n  zap.Int(\"attempt\", 3),\n  zap.Duration(\"backoff\", time.Second),\n)\n```\n\n----------------------------------------\n\nTITLE: Verifying Code Changes\nDESCRIPTION: Run the Docker daemon help command to verify the changes made to the help message.\nSOURCE: https://github.com/moby/moby/blob/master/docs/contributing/set-up-dev-env.md#2025-04-10_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\n# dockerd --help\n```\n\n----------------------------------------\n\nTITLE: Defining SecretSpec Message in Protocol Buffers for Docker Swarmkit v1\nDESCRIPTION: This snippet defines the SecretSpec message type, which includes fields for secret configuration such as annotations, data, templating, and driver options in a Docker Swarm.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/moby/swarmkit/v2/api/api.pb.txt#2025-04-10_snippet_70\n\nLANGUAGE: Protocol Buffers\nCODE:\n```\nmessage_type {\n  name: \"SecretSpec\"\n  field {\n    name: \"annotations\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".docker.swarmkit.v1.Annotations\"\n    options {\n      65001: 0\n    }\n    json_name: \"annotations\"\n  }\n  // ... (additional fields omitted for brevity)\n}\n```\n\n----------------------------------------\n\nTITLE: Killing All Processes in a cgroup (v2)\nDESCRIPTION: Terminates all processes belonging to a specific cgroup in the v2 hierarchy, which is useful for cleanup or resource reclamation.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/containerd/cgroups/v3/README.md#2025-04-10_snippet_18\n\nLANGUAGE: go\nCODE:\n```\nm, err := cgroup2.LoadSystemd(\"/\", \"my-cgroup-abc.slice\")\nif err != nil {\n\treturn err\n}\nerr = m.Kill()\nif err != nil {\n\treturn err\n}\n```\n\n----------------------------------------\n\nTITLE: Buffer Decompression Implementation in Go\nDESCRIPTION: Example of decompressing buffer data using the zstd package. Creates a cached decoder for efficient multiple buffer decompression operations.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/klauspost/compress/zstd/README.md#2025-04-10_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\nimport \"github.com/klauspost/compress/zstd\"\n\n// Create a reader that caches decompressors.\n// For this operation type we supply a nil Reader.\nvar decoder, _ = zstd.NewReader(nil, zstd.WithDecoderConcurrency(0))\n\n// Decompress a buffer. We don't supply a destination buffer,\n// so it will be allocated by the decoder.\nfunc Decompress(src []byte) ([]byte, error) {\n    return decoder.DecodeAll(src, nil)\n}\n```\n\n----------------------------------------\n\nTITLE: Moving Processes Between cgroups (v1)\nDESCRIPTION: Moves all processes from one cgroup to another destination cgroup, useful for reorganizing process hierarchies.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/containerd/cgroups/v3/README.md#2025-04-10_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nerr := control.MoveTo(destination)\n```\n\n----------------------------------------\n\nTITLE: Set Difference Operation in Go\nDESCRIPTION: Shows how to use the Difference operation to create a new set containing elements that exist in one set but not in another. The example finds all classes that are not science classes.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/deckarep/golang-set/v2/README.md#2025-04-10_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nnotScience := all.Difference(sciences)\nfmt.Println(notScience)\n```\n\n----------------------------------------\n\nTITLE: Iptables NAT Table Configuration\nDESCRIPTION: The NAT table configuration for Docker networking, showing rules for port mapping and network address translation that enable container connectivity to the outside world.\nSOURCE: https://github.com/moby/moby/blob/master/integration/network/bridge/iptablesdoc/generated/usernet-portmap.md#2025-04-10_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nChain PREROUTING (policy ACCEPT 0 packets, 0 bytes)\nnum   pkts bytes target     prot opt in     out     source               destination         \n1        0     0 DOCKER     0    --  *      *       0.0.0.0/0            0.0.0.0/0            ADDRTYPE match dst-type LOCAL\n\nChain INPUT (policy ACCEPT 0 packets, 0 bytes)\nnum   pkts bytes target     prot opt in     out     source               destination         \n\nChain OUTPUT (policy ACCEPT 0 packets, 0 bytes)\nnum   pkts bytes target     prot opt in     out     source               destination         \n1        0     0 DOCKER     0    --  *      *       0.0.0.0/0           !127.0.0.0/8          ADDRTYPE match dst-type LOCAL\n\nChain POSTROUTING (policy ACCEPT 0 packets, 0 bytes)\nnum   pkts bytes target     prot opt in     out     source               destination         \n1        0     0 MASQUERADE  0    --  *      !bridge1  192.0.2.0/24         0.0.0.0/0           \n2        0     0 MASQUERADE  0    --  *      !docker0  172.17.0.0/16        0.0.0.0/0           \n\nChain DOCKER (2 references)\nnum   pkts bytes target     prot opt in     out     source               destination         \n1        0     0 RETURN     0    --  bridge1 *       0.0.0.0/0            0.0.0.0/0           \n2        0     0 RETURN     0    --  docker0 *       0.0.0.0/0            0.0.0.0/0           \n3        0     0 DNAT       6    --  !bridge1 *       0.0.0.0/0            0.0.0.0/0            tcp dpt:8080 to:192.0.2.2:80\n```\n\n----------------------------------------\n\nTITLE: Developer Certificate of Origin for Docker Contributions\nDESCRIPTION: The complete text of the Developer Certificate of Origin (DCO) version 1.1 that contributors must certify to when making contributions to Docker projects. This certificate ensures contributors have the right to submit their code under the project's open source license.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/docker/go-events/CONTRIBUTING.md#2025-04-10_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nDeveloper Certificate of Origin\nVersion 1.1\n\nCopyright (C) 2004, 2006 The Linux Foundation and its contributors.\n660 York Street, Suite 102,\nSan Francisco, CA 94110 USA\n\nEveryone is permitted to copy and distribute verbatim copies of this\nlicense document, but changing it is not allowed.\n\nDeveloper's Certificate of Origin 1.1\n\nBy making a contribution to this project, I certify that:\n\n(a) The contribution was created in whole or in part by me and I\n    have the right to submit it under the open source license\n    indicated in the file; or\n\n(b) The contribution is based upon previous work that, to the best\n    of my knowledge, is covered under an appropriate open source\n    license and I have the right under that license to submit that\n    work with modifications, whether created in whole or in part\n    by me, under the same open source license (unless I am\n    permitted to submit under a different license), as indicated\n    in the file; or\n\n(c) The contribution was provided directly to me by some other\n    person who certified (a), (b) or (c) and I have not modified\n    it.\n\n(d) I understand and agree that this project and the contribution\n    are public and that a record of the contribution (including all\n    personal information I submit with it, including my sign-off) is\n    maintained indefinitely and may be redistributed consistent with\n    this project or the open source license(s) involved.\n```\n\n----------------------------------------\n\nTITLE: Restarting a Container via HTTP Request\nDESCRIPTION: Example HTTP POST request to restart a container with ID 'e90e34656806'. The query parameter 't' specifies the number of seconds to wait before killing the container.\nSOURCE: https://github.com/moby/moby/blob/master/docs/api/v1.24.md#2025-04-10_snippet_32\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1.24/containers/e90e34656806/restart?t=5 HTTP/1.1\n```\n\n----------------------------------------\n\nTITLE: Instance-based Logrus Logger Configuration\nDESCRIPTION: Demonstrates how to create and configure a new instance of Logrus logger for advanced usage scenarios like multi-destination logging.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/sirupsen/logrus/README.md#2025-04-10_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n  \"os\"\n  \"github.com/sirupsen/logrus\"\n)\n\n// Create a new instance of the logger. You can have any number of instances.\nvar log = logrus.New()\n\nfunc main() {\n  // The API for setting attributes is a little different than the package level\n  // exported logger. See Godoc.\n  log.Out = os.Stdout\n\n  log.WithFields(logrus.Fields{\n    \"animal\": \"walrus\",\n    \"size\":   10,\n  }).Info(\"A group of walrus emerges from the ocean\")\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing IPVS Connection in Go\nDESCRIPTION: Demonstrates how to establish a connection to the IPVS kernel module and retrieve services. The code shows basic error handling and service listing functionality using the ipvs package.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/moby/ipvs/README.md#2025-04-10_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"log\"\n\n\t\"github.com/moby/ipvs\"\n)\n\nfunc main() {\n\thandle, err := ipvs.New(\"\")\n\tif err != nil {\n\t\tlog.Fatalf(\"ipvs.New: %s\", err)\n\t}\n\tsvcs, err := handle.GetServices()\n\tif err != nil {\n\t\tlog.Fatalf(\"handle.GetServices: %s\", err)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Removing a Docker Network\nDESCRIPTION: Demonstrates how to delete a previously created Docker network using the network name or ID.\nSOURCE: https://github.com/moby/moby/blob/master/libnetwork/docs/macvlan.md#2025-04-10_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndocker network rm <network_name or id>\n```\n\n----------------------------------------\n\nTITLE: Creating Generic Sets in Go\nDESCRIPTION: Demonstrates syntax for creating generic sets with different types in Go using the mapset package. Shows examples with int, string, custom struct, and interface{} types.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/deckarep/golang-set/v2/README.md#2025-04-10_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// Syntax example, doesn't compile.\nmySet := mapset.NewSet[T]() // where T is some concrete comparable type.\n\n// Therefore this code creates an int set\nmySet := mapset.NewSet[int]()\n\n// Or perhaps you want a string set\nmySet := mapset.NewSet[string]()\n\ntype myStruct {\n  name string\n  age uint8\n}\n\n// Alternatively a set of structs\nmySet := mapset.NewSet[myStruct]()\n\n// Lastly a set that can hold anything using the any or empty interface keyword: interface{}. This is effectively removes type safety.\nmySet := mapset.NewSet[any]()\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Keys in BoltDB with Go\nDESCRIPTION: This snippet demonstrates how to iterate over keys in a bucket using a Cursor in BoltDB. It shows how to move through the keys sequentially and print both the key and value.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/go.etcd.io/bbolt/README.md#2025-04-10_snippet_15\n\nLANGUAGE: go\nCODE:\n```\ndb.View(func(tx *bolt.Tx) error {\n\tb := tx.Bucket([]byte(\"MyBucket\"))\n\tc := b.Cursor()\n\tfor k, v := c.First(); k != nil; k, v = c.Next() {\n\t\tfmt.Printf(\"key=%s, value=%s\\n\", k, v)\n\t}\n\treturn nil\n})\n```\n\n----------------------------------------\n\nTITLE: Performing Prefix Scans in BoltDB with Go\nDESCRIPTION: This code shows how to perform a prefix scan on keys in BoltDB. It uses a combination of Seek() and bytes.HasPrefix() to iterate over keys with a specific prefix.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/go.etcd.io/bbolt/README.md#2025-04-10_snippet_16\n\nLANGUAGE: go\nCODE:\n```\ndb.View(func(tx *bolt.Tx) error {\n\tc := tx.Bucket([]byte(\"MyBucket\")).Cursor()\n\tprefix := []byte(\"1234\")\n\tfor k, v := c.Seek(prefix); k != nil && bytes.HasPrefix(k, prefix); k, v = c.Next() {\n\t\tfmt.Printf(\"key=%s, value=%s\\n\", k, v)\n\t}\n\treturn nil\n})\n```\n\n----------------------------------------\n\nTITLE: Retrieving Builder Version from Docker API Ping Endpoint\nDESCRIPTION: The GET /_ping and HEAD /_ping endpoints now return a 'Builder-Version' header by default, indicating the recommended builder version to use. The default on Linux is '2' (BuildKit), while Windows uses '1' (classic builder).\nSOURCE: https://github.com/moby/moby/blob/master/docs/api/version-history.md#2025-04-10_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n* `GET /_ping` and `HEAD /_ping` now return `Builder-Version` by default.\n  This header contains the default builder to use, and is a recommendation as\n  advertised by the daemon. However, it is up to the client to choose which builder\n  to use.\n\n  The default value on Linux is version \"2\" (BuildKit), but the daemon can be\n  configured to recommend version \"1\" (classic Builder). Windows does not yet\n  support BuildKit for native Windows images, and uses \"1\" (classic builder) as\n  a default.\n\n  This change is not versioned, and affects all API versions if the daemon has\n  this patch.\n```\n\n----------------------------------------\n\nTITLE: Converting Between YAML and JSON in Go\nDESCRIPTION: Demonstrates using the YAMLToJSON and JSONToYAML functions to convert between JSON and YAML formats. The example shows how object representation is preserved during conversion.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/sigs.k8s.io/yaml/README.md#2025-04-10_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"sigs.k8s.io/yaml\"\n)\n\nfunc main() {\n\tj := []byte(`{\"name\": \"John\", \"age\": 30}`)\n\ty, err := yaml.JSONToYAML(j)\n\tif err != nil {\n\t\tfmt.Printf(\"err: %v\\n\", err)\n\t\treturn\n\t}\n\tfmt.Println(string(y))\n\t/* Output:\n\tage: 30\n\tname: John\n\t*/\n\tj2, err := yaml.YAMLToJSON(y)\n\tif err != nil {\n\t\tfmt.Printf(\"err: %v\\n\", err)\n\t\treturn\n\t}\n\tfmt.Println(string(j2))\n\t/* Output:\n\t{\"age\":30,\"name\":\"John\"}\n\t*/\n}\n```\n\n----------------------------------------\n\nTITLE: Basic PTY Command Execution in Go\nDESCRIPTION: Example showing how to execute a grep command through a pseudo-terminal, writing input and copying output to stdout. Demonstrates basic pty.Start() usage with command execution.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/creack/pty/README.md#2025-04-10_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"io\"\n\t\"os\"\n\t\"os/exec\"\n\n\t\"github.com/creack/pty\"\n)\n\nfunc main() {\n\tc := exec.Command(\"grep\", \"--color=auto\", \"bar\")\n\tf, err := pty.Start(c)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tgo func() {\n\t\tf.Write([]byte(\"foo\\n\"))\n\t\tf.Write([]byte(\"bar\\n\"))\n\t\tf.Write([]byte(\"baz\\n\"))\n\t\tf.Write([]byte{4}) // EOT\n\t}()\n\tio.Copy(os.Stdout, f)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Content Identifier with Digest in Go\nDESCRIPTION: Demonstrates how to create a content identifier using the digest package. This snippet shows how to generate a unique identifier for a byte slice, which can be used in content-addressable storage systems.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/opencontainers/go-digest/README.md#2025-04-10_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nid := digest.FromBytes([]byte(\"my content\"))\n```\n\n----------------------------------------\n\nTITLE: Adding Enabled Method to Logger Interface\nDESCRIPTION: Adds Enabled method to the Logger interface to notify users if a log record will be emitted.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-10_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\nEnabled method is added to the Logger interface in go.opentelemetry.io/otel/log\n```\n\n----------------------------------------\n\nTITLE: Defining Service Descriptor in Protocol Buffers\nDESCRIPTION: This snippet defines the structure of a service descriptor in Protocol Buffers. It includes fields for name, methods, and options.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/moby/swarmkit/v2/api/api.pb.txt#2025-04-10_snippet_7\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage_type {\n  name: \"ServiceDescriptorProto\"\n  field {\n    name: \"name\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"name\"\n  }\n  field {\n    name: \"method\"\n    number: 2\n    label: LABEL_REPEATED\n    type: TYPE_MESSAGE\n    type_name: \".google.protobuf.MethodDescriptorProto\"\n    json_name: \"method\"\n  }\n  field {\n    name: \"options\"\n    number: 3\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".google.protobuf.ServiceOptions\"\n    json_name: \"options\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining NodeStatus Message in Protocol Buffers\nDESCRIPTION: This message type defines the operational status of a node in the Docker Swarm cluster, including its state (UNKNOWN, DOWN, READY, DISCONNECTED), status message, and network address.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/moby/swarmkit/v2/api/api.pb.txt#2025-04-10_snippet_27\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage_type {\n  name: \"NodeStatus\"\n  field {\n    name: \"state\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_ENUM\n    type_name: \".docker.swarmkit.v1.NodeStatus.State\"\n    json_name: \"state\"\n  }\n  field {\n    name: \"message\"\n    number: 2\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"message\"\n  }\n  field {\n    name: \"addr\"\n    number: 3\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"addr\"\n  }\n  enum_type {\n    name: \"State\"\n    value {\n      name: \"UNKNOWN\"\n      number: 0\n    }\n    value {\n      name: \"DOWN\"\n      number: 1\n    }\n    value {\n      name: \"READY\"\n      number: 2\n    }\n    value {\n      name: \"DISCONNECTED\"\n      number: 3\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Task Message Type in Protocol Buffers for Docker Swarmkit\nDESCRIPTION: This snippet defines the Task message type, representing a unit of work in the Swarm. It includes fields for task identification, specifications, status, and related service and node information.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/moby/swarmkit/v2/api/api.pb.txt#2025-04-10_snippet_80\n\nLANGUAGE: Protocol Buffers\nCODE:\n```\nmessage_type {\n  name: \"Task\"\n  field {\n    name: \"id\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"id\"\n  }\n  field {\n    name: \"meta\"\n    number: 2\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".docker.swarmkit.v1.Meta\"\n    options {\n      65001: 0\n    }\n    json_name: \"meta\"\n  }\n  field {\n    name: \"spec\"\n    number: 3\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".docker.swarmkit.v1.TaskSpec\"\n    options {\n      65001: 0\n    }\n    json_name: \"spec\"\n  }\n  field {\n    name: \"spec_version\"\n    number: 14\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".docker.swarmkit.v1.Version\"\n    json_name: \"specVersion\"\n  }\n  field {\n    name: \"service_id\"\n    number: 4\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"serviceId\"\n  }\n  field {\n    name: \"slot\"\n    number: 5\n    label: LABEL_OPTIONAL\n    type: TYPE_UINT64\n    json_name: \"slot\"\n  }\n  field {\n    name: \"node_id\"\n    number: 6\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"nodeId\"\n  }\n  field {\n    name: \"annotations\"\n    number: 7\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".docker.swarmkit.v1.Annotations\"\n    options {\n      65001: 0\n    }\n    json_name: \"annotations\"\n  }\n  field {\n    name: \"service_annotations\"\n    number: 8\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".docker.swarmkit.v1.Annotations\"\n    options {\n      65001: 0\n    }\n    json_name: \"serviceAnnotations\"\n  }\n  field {\n    name: \"status\"\n    number: 9\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".docker.swarmkit.v1.TaskStatus\"\n    options {\n      65001: 0\n    }\n    json_name: \"status\"\n  }\n  field {\n    name: \"desired_state\"\n    number: 10\n    label: LABEL_OPTIONAL\n    type: TYPE_ENUM\n    type_name: \".docker.swarmkit.v1.TaskState\"\n    json_name: \"desiredState\"\n  }\n  field {\n    name: \"networks\"\n    number: 11\n    label: LABEL_REPEATED\n    type: TYPE_MESSAGE\n    type_name: \".docker.swarmkit.v1.NetworkAttachment\"\n    json_name: \"networks\"\n  }\n  field {\n    name: \"endpoint\"\n    number: 12\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".docker.swarmkit.v1.Endpoint\"\n    json_name: \"endpoint\"\n  }\n  field {\n    name: \"log_driver\"\n    number: 13\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".docker.swarmkit.v1.Driver\"\n    json_name: \"logDriver\"\n  }\n  field {\n    name: \"assigned_generic_resources\"\n    number: 15\n    label: LABEL_REPEATED\n    type: TYPE_MESSAGE\n    type_name: \".docker.swarmkit.v1.GenericResource\"\n    json_name: \"assignedGenericResources\"\n  }\n  field {\n    name: \"job_iteration\"\n    number: 16\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".docker.swarmkit.v1.Version\"\n    json_name: \"jobIteration\"\n  }\n  field {\n    name: \"volumes\"\n    number: 17\n    label: LABEL_REPEATED\n    type: TYPE_MESSAGE\n    type_name: \".docker.swarmkit.v1.VolumeAttachment\"\n    json_name: \"volumes\"\n  }\n  options {\n    70001 {\n      1 {\n        1: 1\n        2: 1\n        3: 1\n        4: 1\n        5: 1\n        6: 1\n        7: 1\n        8: 1\n        9: 1\n        10: 1\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Remove Network API Request/Response\nDESCRIPTION: DELETE endpoint to remove a network by ID or name.\nSOURCE: https://github.com/moby/moby/blob/master/docs/api/v1.24.md#2025-04-10_snippet_87\n\nLANGUAGE: http\nCODE:\n```\nDELETE /v1.24/networks/22be93d5babb089c5aab8dbc369042fad48ff791584ca2da2100db837a1c7c30 HTTP/1.1\n```\n\n----------------------------------------\n\nTITLE: Implementing a Factory Function with Options in Go\nDESCRIPTION: Shows how to use the options pattern in a factory function that creates new instances of a type T with configurable options.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#2025-04-10_snippet_12\n\nLANGUAGE: go\nCODE:\n```\nfunc NewT(options ...Option) T {…}\n```\n\n----------------------------------------\n\nTITLE: Renaming a Container via HTTP Request\nDESCRIPTION: Example HTTP POST request to rename a container with ID 'e90e34656806' to 'new_name'.\nSOURCE: https://github.com/moby/moby/blob/master/docs/api/v1.24.md#2025-04-10_snippet_38\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1.24/containers/e90e34656806/rename?name=new_name HTTP/1.1\n```\n\n----------------------------------------\n\nTITLE: Using Terminal Detection and Window Size in Go\nDESCRIPTION: Example code demonstrating how to use the moby/term package to check if input is coming from a terminal and retrieve its window size. The snippet shows terminal detection with IsTerminal() and window size retrieval with GetWinsize().\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/moby/term/README.md#2025-04-10_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"log\"\n\t\"os\"\n\n\t\"github.com/moby/term\"\n)\n\nfunc main() {\n\tfd := os.Stdin.Fd()\n\tif term.IsTerminal(fd) {\n\t\tws, err := term.GetWinsize(fd)\n\t\tif err != nil {\n\t\t\tlog.Fatalf(\"term.GetWinsize: %s\", err)\n\t\t}\n\t\tlog.Printf(\"%d:%d\\n\", ws.Height, ws.Width)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Running Container in Custom Overlay Network\nDESCRIPTION: Start a container in the newly created 'foobar' overlay network using the --publish-service option.\nSOURCE: https://github.com/moby/moby/blob/master/libnetwork/docs/vagrant.md#2025-04-10_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run -it --rm --publish-service=bar.foobar.overlay ubuntu:14.04 bash\n```\n\n----------------------------------------\n\nTITLE: Inspecting Docker Image with HTTP GET Request\nDESCRIPTION: Sends a GET request to retrieve low-level information about a Docker image. The response includes details such as image ID, container configuration, and filesystem layers.\nSOURCE: https://github.com/moby/moby/blob/master/docs/api/v1.24.md#2025-04-10_snippet_53\n\nLANGUAGE: http\nCODE:\n```\nGET /v1.24/images/example/json HTTP/1.1\n```\n\n----------------------------------------\n\nTITLE: Compressing Input Stream to Output Stream using Zstandard in Go\nDESCRIPTION: This function demonstrates how to compress data from an input stream to an output stream using the Zstandard compression algorithm. It creates a new writer, copies data from input to the encoder, and closes the encoder to finish writing.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/klauspost/compress/zstd/README.md#2025-04-10_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\n// Compress input to output.\nfunc Compress(in io.Reader, out io.Writer) error {\n    enc, err := zstd.NewWriter(out)\n    if err != nil {\n        return err\n    }\n    _, err = io.Copy(enc, in)\n    if err != nil {\n        enc.Close()\n        return err\n    }\n    return enc.Close()\n}\n```\n\n----------------------------------------\n\nTITLE: URL Construction with Route Parameters\nDESCRIPTION: Shows how to build URLs using named routes and parameter substitution including host, path and query parameters.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/gorilla/mux/README.md#2025-04-10_snippet_11\n\nLANGUAGE: go\nCODE:\n```\nr := mux.NewRouter()\nr.Host(\"{subdomain}.example.com\").\n  Path(\"/articles/{category}/{id:[0-9]+}\").\n  Queries(\"filter\", \"{filter}\").\n  HandlerFunc(ArticleHandler).\n  Name(\"article\")\n\n// url.String() will be \"http://news.example.com/articles/technology/42?filter=gorilla\"\nurl, err := r.Get(\"article\").URL(\"subdomain\", \"news\",\n                                 \"category\", \"technology\",\n                                 \"id\", \"42\",\n                                 \"filter\", \"gorilla\")\n```\n\n----------------------------------------\n\nTITLE: Querying System Disk Usage with Type Filter in Docker API\nDESCRIPTION: The GET /system/df endpoint now accepts a 'type' query parameter to filter results by object type. Multiple types can be specified, and supported values are 'container', 'image', 'volume', and 'build-cache'.\nSOURCE: https://github.com/moby/moby/blob/master/docs/api/version-history.md#2025-04-10_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n* `GET /system/df` now accepts query parameter `type`. When set,\n  computes and returns data only for the specified object type.\n  The parameter can be specified multiple times to select several object types.\n  Supported values are: `container`, `image`, `volume`, `build-cache`.\n```\n\n----------------------------------------\n\nTITLE: Marshaling and Unmarshaling YAML with Go Structs\nDESCRIPTION: Demonstrates basic usage of the yaml package for marshaling a struct to YAML and unmarshaling YAML back into a struct. The example shows how JSON struct tags affect YAML field names.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/sigs.k8s.io/yaml/README.md#2025-04-10_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"sigs.k8s.io/yaml\"\n)\n\ntype Person struct {\n\tName string `json:\"name\"` // Affects YAML field names too.\n\tAge  int    `json:\"age\"`\n}\n\nfunc main() {\n\t// Marshal a Person struct to YAML.\n\tp := Person{\"John\", 30}\n\ty, err := yaml.Marshal(p)\n\tif err != nil {\n\t\tfmt.Printf(\"err: %v\\n\", err)\n\t\treturn\n\t}\n\tfmt.Println(string(y))\n\t/* Output:\n\tage: 30\n\tname: John\n\t*/\n\n\t// Unmarshal the YAML back into a Person struct.\n\tvar p2 Person\n\terr = yaml.Unmarshal(y, &p2)\n\tif err != nil {\n\t\tfmt.Printf(\"err: %v\\n\", err)\n\t\treturn\n\t}\n\tfmt.Println(p2)\n\t/* Output:\n\t{John 30}\n\t*/\n}\n```\n\n----------------------------------------\n\nTITLE: BitSet Deserialization Example in Go\nDESCRIPTION: Demonstrates how to read a serialized BitSet back from a byte buffer.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/bits-and-blooms/bitset/README.md#2025-04-10_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// Read back from buf\n\tbs = bitset.New()\n\tn, err = bs.ReadFrom(&buf)\n\tif err != nil {\n\t\t// error\n\t}\n\t// n is the number of bytes read\n```\n\n----------------------------------------\n\nTITLE: Using Default Client When HTTP Client is Nil in Compute Metadata\nDESCRIPTION: Change to the compute/metadata package that uses the default client when http.Client is nil, providing a fallback mechanism for metadata requests.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/cloud.google.com/go/CHANGES.md#2025-04-10_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n- compute/metadata:\n  - use defaultClient when http.Client is nil\n  - remove subscribeClient\n```\n\n----------------------------------------\n\nTITLE: Setting Ulimits in Docker Container Configuration\nDESCRIPTION: Configures resource limits for processes within a container. This example sets the maximum number of open file descriptors (nofile) with both soft and hard limits.\nSOURCE: https://github.com/moby/moby/blob/master/docs/api/v1.24.md#2025-04-10_snippet_8\n\nLANGUAGE: json\nCODE:\n```\nUlimits: { \"Name\": \"nofile\", \"Soft\": 1024, \"Hard\": 2048 }\n```\n\n----------------------------------------\n\nTITLE: Basic Logging Middleware Implementation\nDESCRIPTION: Demonstrates how to create a simple logging middleware that logs request URIs.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/gorilla/mux/README.md#2025-04-10_snippet_14\n\nLANGUAGE: go\nCODE:\n```\nfunc loggingMiddleware(next http.Handler) http.Handler {\n    return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n        // Do stuff here\n        log.Println(r.RequestURI)\n        // Call the next handler, which can be another middleware in the chain, or the final handler.\n        next.ServeHTTP(w, r)\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: Querying TOML Data\nDESCRIPTION: Shows how to use the query feature to search for specific elements within a TOML document without traversing the entire tree.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/pelletier/go-toml/README.md#2025-04-10_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n// use a query to gather elements without walking the tree\nq, _ := query.Compile(\"$..[user,password]\")\nresults := q.Execute(config)\nfor ii, item := range results.Values() {\n    fmt.Printf(\"Query result %d: %v\\n\", ii, item)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Managing ZFS Filesystems, Snapshots, and Clones in Go\nDESCRIPTION: This example demonstrates how to create a ZFS filesystem, take a snapshot, clone the snapshot, and then destroy all created resources. It shows the basic workflow of ZFS operations using this Go wrapper library.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/mistifyio/go-zfs/v3/README.md#2025-04-10_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n//assuming a zpool named test\n//error handling omitted\n\n\nf, err := zfs.CreateFilesystem(\"test/snapshot-test\", nil)\nok(t, err)\n\ns, err := f.Snapshot(\"test\", nil)\nok(t, err)\n\n// snapshot is named \"test/snapshot-test@test\"\n\nc, err := s.Clone(\"test/clone-test\", nil)\n\nerr := c.Destroy()\nerr := s.Destroy()\nerr := f.Destroy()\n```\n\n----------------------------------------\n\nTITLE: Passing Logger to Application Object in Go\nDESCRIPTION: Demonstrates how to pass the logger to application objects and structures for use throughout the application.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/go-logr/logr/README.md#2025-04-10_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n    app := createTheAppObject(logger)\n    app.Run()\n```\n\n----------------------------------------\n\nTITLE: Unmarshaling TOML to Struct\nDESCRIPTION: Demonstrates how to unmarshal TOML data into Go structs using struct tags and the Unmarshal function.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/pelletier/go-toml/README.md#2025-04-10_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ntype Postgres struct {\n    User     string\n    Password string\n}\ntype Config struct {\n    Postgres Postgres\n}\n\ndoc := []byte(`\n[Postgres]\nUser = \"pelletier\"\nPassword = \"mypassword\"`)\n\nconfig := Config{}\ntoml.Unmarshal(doc, &config)\nfmt.Println(\"user=\", config.Postgres.User)\n```\n\n----------------------------------------\n\nTITLE: Inspect Plugin API Response\nDESCRIPTION: Example JSON response from the GET /plugins/(plugin name) endpoint showing detailed information about a specific installed plugin.\nSOURCE: https://github.com/moby/moby/blob/master/docs/api/v1.24.md#2025-04-10_snippet_90\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Id\": \"5724e2c8652da337ab2eedd19fc6fc0ec908e4bd907c7421bf6a8dfc70c4c078\",\n  \"Name\": \"tiborvass/no-remove\",\n  \"Tag\": \"latest\",\n  \"Active\": false,\n  \"Config\": {\n    \"Mounts\": [\n      {\n        \"Name\": \"\",\n        \"Description\": \"\",\n        \"Settable\": null,\n        \"Source\": \"/data\",\n        \"Destination\": \"/data\",\n        \"Type\": \"bind\",\n        \"Options\": [\n          \"shared\",\n          \"rbind\"\n        ]\n      },\n      {\n        \"Name\": \"\",\n        \"Description\": \"\",\n        \"Settable\": null,\n        \"Source\": null,\n        \"Destination\": \"/foobar\",\n        \"Type\": \"tmpfs\",\n        \"Options\": null\n      }\n    ],\n    \"Env\": [\n      \"DEBUG=1\"\n    ],\n    \"Args\": null,\n    \"Devices\": null\n  },\n  \"Manifest\": {...}\n}\n```\n\n----------------------------------------\n\nTITLE: Registering OpenCensus View\nDESCRIPTION: Example of registering a view with distribution aggregation for collecting video size metrics\nSOURCE: https://github.com/moby/moby/blob/master/vendor/go.opencensus.io/README.md#2025-04-10_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nif err := view.Register(&view.View{\n\tName:        \"example.com/video_size_distribution\",\n\tDescription: \"distribution of processed video size over time\",\n\tMeasure:     videoSize,\n\tAggregation: view.Distribution(1<<32, 2<<32, 3<<32),\n}); err != nil {\n\tlog.Fatalf(\"Failed to register view: %v\", err)\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling the Network Diagnostic Port in Docker Daemon Configuration\nDESCRIPTION: JSON configuration snippet for enabling the network diagnostic tool by setting the network-diagnostic-port in the Docker daemon configuration file.\nSOURCE: https://github.com/moby/moby/blob/master/libnetwork/cmd/diagnostic/README.md#2025-04-10_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"network-diagnostic-port\": <port>\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up OTEL Environment Variable\nDESCRIPTION: Removes the OTLP endpoint environment variable from the current shell environment.\nSOURCE: https://github.com/moby/moby/blob/master/contrib/otel/README.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nunset OTEL_EXPORTER_OTLP_ENDPOINT\n```\n\n----------------------------------------\n\nTITLE: Container Pause Response\nDESCRIPTION: Example HTTP response for a successful container pause operation, showing a 204 No Content status code.\nSOURCE: https://github.com/moby/moby/blob/master/docs/api/v1.24.md#2025-04-10_snippet_41\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 204 No Content\n```\n\n----------------------------------------\n\nTITLE: Defining UpdateConfig Message in Protocol Buffers for Docker SwarmKit\nDESCRIPTION: This snippet defines a message 'UpdateConfig' for Docker SwarmKit, including fields for parallelism, delay, failure action, monitor, max failure ratio, and order. It also includes enums for FailureAction and UpdateOrder.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/moby/swarmkit/v2/api/api.pb.txt#2025-04-10_snippet_36\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage_type {\n  name: \"UpdateConfig\"\n  field {\n    name: \"parallelism\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_UINT64\n    json_name: \"parallelism\"\n  }\n  field {\n    name: \"delay\"\n    number: 2\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".google.protobuf.Duration\"\n    options {\n      65011: 1\n      65001: 0\n    }\n    json_name: \"delay\"\n  }\n  field {\n    name: \"failure_action\"\n    number: 3\n    label: LABEL_OPTIONAL\n    type: TYPE_ENUM\n    type_name: \".docker.swarmkit.v1.UpdateConfig.FailureAction\"\n    json_name: \"failureAction\"\n  }\n  field {\n    name: \"monitor\"\n    number: 4\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".google.protobuf.Duration\"\n    json_name: \"monitor\"\n  }\n  field {\n    name: \"max_failure_ratio\"\n    number: 5\n    label: LABEL_OPTIONAL\n    type: TYPE_FLOAT\n    json_name: \"maxFailureRatio\"\n  }\n  field {\n    name: \"order\"\n    number: 6\n    label: LABEL_OPTIONAL\n    type: TYPE_ENUM\n    type_name: \".docker.swarmkit.v1.UpdateConfig.UpdateOrder\"\n    json_name: \"order\"\n  }\n  enum_type {\n    name: \"FailureAction\"\n    value {\n      name: \"PAUSE\"\n      number: 0\n    }\n    value {\n      name: \"CONTINUE\"\n      number: 1\n    }\n    value {\n      name: \"ROLLBACK\"\n      number: 2\n    }\n  }\n  enum_type {\n    name: \"UpdateOrder\"\n    value {\n      name: \"STOP_FIRST\"\n      number: 0\n    }\n    value {\n      name: \"START_FIRST\"\n      number: 1\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Hello World Container\nDESCRIPTION: Test the Docker installation by running the hello-world image.\nSOURCE: https://github.com/moby/moby/blob/master/docs/contributing/set-up-dev-env.md#2025-04-10_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n# docker run hello-world\n```\n\n----------------------------------------\n\nTITLE: Creating Docker Network and Running Container with Loopback Port Mapping\nDESCRIPTION: Commands to create a user-defined Docker network 'bridge1' with specific subnet configuration and run a container with port 80 mapped to loopback address 127.0.0.1:8080.\nSOURCE: https://github.com/moby/moby/blob/master/integration/network/bridge/iptablesdoc/templates/usernet-portmap-lo.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker network create \\\n  -o com.docker.network.bridge.name=bridge1 \\\n  --subnet 192.0.2.0/24 --gateway 192.0.2.1 bridge1\ndocker run --network bridge1 -p 127.0.0.1:8080:80 --name c1 busybox\n```\n\n----------------------------------------\n\nTITLE: Saving Key/Value Pairs in BoltDB with Go\nDESCRIPTION: This code shows how to save a key/value pair to a bucket in BoltDB. It uses the Bucket.Put() function to set the value of the 'answer' key to '42' in the 'MyBucket' bucket.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/go.etcd.io/bbolt/README.md#2025-04-10_snippet_12\n\nLANGUAGE: go\nCODE:\n```\ndb.Update(func(tx *bolt.Tx) error {\n\tb := tx.Bucket([]byte(\"MyBucket\"))\n\terr := b.Put([]byte(\"answer\"), []byte(\"42\"))\n\treturn err\n})\n```\n\n----------------------------------------\n\nTITLE: Illustrating Docker Release Cycle Timeline\nDESCRIPTION: This ASCII diagram illustrates the Docker release cycle timeline, showing the development phase (6 weeks), freeze phase (3 weeks), and the release point at the end of the 9th week.\nSOURCE: https://github.com/moby/moby/blob/master/project/RELEASE-PROCESS.md#2025-04-10_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n                                        Codebase              Release\nStart of                                is frozen             (end of the\nthe Cycle                               (7th week)            9th week)\n+---------------------------------------+---------------------+\n|                                       |                     |\n|           Development phase           |    Freeze phase     |\n|                                       |                     |\n+---------------------------------------+---------------------+\n                   6 weeks                      3 weeks\n<---------------------------------------><-------------------->\n```\n\n----------------------------------------\n\nTITLE: Creating a Config Factory Function in Go\nDESCRIPTION: Implements a newConfig function that handles setting defaults and applying options to create a configured config instance. This function is typically unexported.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#2025-04-10_snippet_6\n\nLANGUAGE: go\nCODE:\n```\n// newConfig returns an appropriately configured config.\nfunc newConfig(options ...Option) config {\n\t// Set default values for config.\n\tconfig := config{/* […] */}\n\tfor _, option := range options {\n\t\tconfig = option.apply(config)\n\t}\n\t// Perform any validation here.\n\treturn config\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Authorization Plugins\nDESCRIPTION: Example of starting Docker daemon with multiple authorization plugins. These plugins control access to Docker daemon operations, and each plugin must allow a request for it to complete.\nSOURCE: https://github.com/moby/moby/blob/master/man/dockerd.8.md#2025-04-10_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndockerd --authorization-plugin=plugin1 --authorization-plugin=plugin2,...\n```\n\n----------------------------------------\n\nTITLE: Fuzzing Simple Struct Example\nDESCRIPTION: Demonstrates how to fuzz a simple struct with string and integer fields\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/AdaLogics/go-fuzz-headers/README.md#2025-04-10_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype Person struct {\n    Name string\n    Age  int\n}\np := Person{}\n// Fill p with values based on the data provided by the fuzzing engine:\nerr := f.GenerateStruct(&p)\n```\n\n----------------------------------------\n\nTITLE: Defining Endpoint Message Type in Protocol Buffers for Docker Swarmkit\nDESCRIPTION: This snippet defines the Endpoint message type, which represents network endpoints for services. It includes fields for endpoint specifications, ports, and virtual IPs.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/moby/swarmkit/v2/api/api.pb.txt#2025-04-10_snippet_79\n\nLANGUAGE: Protocol Buffers\nCODE:\n```\nmessage_type {\n  name: \"Endpoint\"\n  field {\n    name: \"spec\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".docker.swarmkit.v1.EndpointSpec\"\n    json_name: \"spec\"\n  }\n  field {\n    name: \"ports\"\n    number: 2\n    label: LABEL_REPEATED\n    type: TYPE_MESSAGE\n    type_name: \".docker.swarmkit.v1.PortConfig\"\n    json_name: \"ports\"\n  }\n  field {\n    name: \"virtual_ips\"\n    number: 3\n    label: LABEL_REPEATED\n    type: TYPE_MESSAGE\n    type_name: \".docker.swarmkit.v1.Endpoint.VirtualIP\"\n    options {\n      65004: \"VirtualIPs\"\n    }\n    json_name: \"virtualIps\"\n  }\n  nested_type {\n    name: \"VirtualIP\"\n    field {\n      name: \"network_id\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"networkId\"\n    }\n    field {\n      name: \"addr\"\n      number: 2\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"addr\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining RaftMembership Service in Docker SwarmKit API\nDESCRIPTION: Protocol buffer definition for the RaftMembership service that manages the membership of nodes in the Docker SwarmKit cluster. It includes Join and Leave methods for nodes to enter or exit the cluster.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/moby/swarmkit/v2/api/api.pb.txt#2025-04-10_snippet_126\n\nLANGUAGE: protobuf\nCODE:\n```\nservice {\n  name: \"RaftMembership\"\n  method {\n    name: \"Join\"\n    input_type: \".docker.swarmkit.v1.JoinRequest\"\n    output_type: \".docker.swarmkit.v1.JoinResponse\"\n    options {\n      73626345 {\n        1: \"swarm-manager\"\n      }\n    }\n  }\n  method {\n    name: \"Leave\"\n    input_type: \".docker.swarmkit.v1.LeaveRequest\"\n    output_type: \".docker.swarmkit.v1.LeaveResponse\"\n    options {\n      73626345 {\n        1: \"swarm-manager\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Benchmarking File Sync Methods in Go\nDESCRIPTION: Comprehensive benchmark results comparing different file synchronization methods including CopyWithTar, CPA, DiffCopy, Rsync and GNU Tar implementations. Tests are run with varying file sizes (10-10000) to measure performance in nanoseconds per operation.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/tonistiigi/fsutil/readme.md#2025-04-10_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nBENCH_FILE_SIZE=10000 ./bench.test --test.bench .\nBenchmarkCopyWithTar10-4                \t    2000\t    995242 ns/op\nBenchmarkCopyWithTar50-4                \t     300\t   4710021 ns/op\nBenchmarkCopyWithTar200-4               \t     100\t  16627260 ns/op\nBenchmarkCopyWithTar1000-4              \t      20\t  60031459 ns/op\nBenchmarkCPA10-4                        \t    1000\t   1678367 ns/op\nBenchmarkCPA50-4                        \t     500\t   3690306 ns/op\nBenchmarkCPA200-4                       \t     200\t   9495066 ns/op\nBenchmarkCPA1000-4                      \t      50\t  29769289 ns/op\nBenchmarkDiffCopy10-4                   \t    2000\t    943889 ns/op\nBenchmarkDiffCopy50-4                   \t     500\t   3285950 ns/op\nBenchmarkDiffCopy200-4                  \t     200\t   8563792 ns/op\nBenchmarkDiffCopy1000-4                 \t      50\t  29511340 ns/op\nBenchmarkDiffCopyProto10-4              \t    2000\t    944615 ns/op\nBenchmarkDiffCopyProto50-4              \t     500\t   3334940 ns/op\nBenchmarkDiffCopyProto200-4             \t     200\t   9420038 ns/op\nBenchmarkDiffCopyProto1000-4            \t      50\t  30632429 ns/op\nBenchmarkIncrementalDiffCopy10-4        \t    2000\t    691993 ns/op\nBenchmarkIncrementalDiffCopy50-4        \t    1000\t   1304253 ns/op\nBenchmarkIncrementalDiffCopy200-4       \t     500\t   3306519 ns/op\nBenchmarkIncrementalDiffCopy1000-4      \t     200\t  10211343 ns/op\nBenchmarkIncrementalDiffCopy5000-4      \t      20\t  55194427 ns/op\nBenchmarkIncrementalDiffCopy10000-4     \t      20\t  91759289 ns/op\nBenchmarkIncrementalCopyWithTar10-4     \t    2000\t   1020258 ns/op\nBenchmarkIncrementalCopyWithTar50-4     \t     300\t   5348786 ns/op\nBenchmarkIncrementalCopyWithTar200-4    \t     100\t  19495000 ns/op\nBenchmarkIncrementalCopyWithTar1000-4   \t      20\t  70338507 ns/op\nBenchmarkIncrementalRsync10-4           \t      30\t  45215754 ns/op\nBenchmarkIncrementalRsync50-4           \t      30\t  45837260 ns/op\nBenchmarkIncrementalRsync200-4          \t      30\t  48780614 ns/op\nBenchmarkIncrementalRsync1000-4         \t      20\t  54801892 ns/op\nBenchmarkIncrementalRsync5000-4         \t      20\t  84782542 ns/op\nBenchmarkIncrementalRsync10000-4        \t      10\t 103355108 ns/op\nBenchmarkRsync10-4                      \t      30\t  46776470 ns/op\nBenchmarkRsync50-4                      \t      30\t  48601555 ns/op\nBenchmarkRsync200-4                     \t      20\t  59642691 ns/op\nBenchmarkRsync1000-4                    \t      20\t 101343010 ns/op\nBenchmarkGnuTar10-4                     \t     500\t   3171448 ns/op\nBenchmarkGnuTar50-4                     \t     300\t   5030296 ns/op\nBenchmarkGnuTar200-4                    \t     100\t  10464313 ns/op\nBenchmarkGnuTar1000-4                   \t      50\t  30375257 ns/op\n```\n\n----------------------------------------\n\nTITLE: Adding an IP Address to Loopback Interface in Go with Netlink\nDESCRIPTION: This example shows how to add a new IP address (169.254.169.254/32) to the loopback interface using the netlink library. It retrieves the loopback interface with LinkByName, parses the IP address, and then adds it to the interface using AddrAdd.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/vishvananda/netlink/README.md#2025-04-10_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"github.com/vishvananda/netlink\"\n)\n\nfunc main() {\n    lo, _ := netlink.LinkByName(\"lo\")\n    addr, _ := netlink.ParseAddr(\"169.254.169.254/32\")\n    netlink.AddrAdd(lo, addr)\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Docker Image History with HTTP GET Request\nDESCRIPTION: Sends a GET request to retrieve the history of a Docker image. The response includes a list of layers with their creation details and sizes.\nSOURCE: https://github.com/moby/moby/blob/master/docs/api/v1.24.md#2025-04-10_snippet_55\n\nLANGUAGE: http\nCODE:\n```\nGET /v1.24/images/ubuntu/history HTTP/1.1\n```\n\n----------------------------------------\n\nTITLE: Implementing YAML Marshaling and Unmarshaling in Go\nDESCRIPTION: Demonstrates how to use the yaml.v3 package to marshal and unmarshal YAML data in Go, showing both struct and map implementations. The example includes custom struct tags and handles both simple and nested data structures.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/gopkg.in/yaml.v3/README.md#2025-04-10_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n        \"fmt\"\n        \"log\"\n\n        \"gopkg.in/yaml.v3\"\n)\n\nvar data = `\na: Easy!\nb:\n  c: 2\n  d: [3, 4]\n`\n\n// Note: struct fields must be public in order for unmarshal to\n// correctly populate the data.\ntype T struct {\n        A string\n        B struct {\n                RenamedC int   `yaml:\"c\"`\n                D        []int `yaml:\",flow\"`\n        }\n}\n\nfunc main() {\n        t := T{}\n    \n        err := yaml.Unmarshal([]byte(data), &t)\n        if err != nil {\n                log.Fatalf(\"error: %v\", err)\n        }\n        fmt.Printf(\"--- t:\\n%v\\n\\n\", t)\n    \n        d, err := yaml.Marshal(&t)\n        if err != nil {\n                log.Fatalf(\"error: %v\", err)\n        }\n        fmt.Printf(\"--- t dump:\\n%s\\n\\n\", string(d))\n    \n        m := make(map[interface{}]interface{})\n    \n        err = yaml.Unmarshal([]byte(data), &m)\n        if err != nil {\n                log.Fatalf(\"error: %v\", err)\n        }\n        fmt.Printf(\"--- m:\\n%v\\n\\n\", m)\n    \n        d, err = yaml.Marshal(&m)\n        if err != nil {\n                log.Fatalf(\"error: %v\", err)\n        }\n        fmt.Printf(\"--- m dump:\\n%s\\n\\n\", string(d))\n}\n```\n\nLANGUAGE: text\nCODE:\n```\n--- t:\n{Easy! {2 [3 4]}}\n\n--- t dump:\na: Easy!\nb:\n  c: 2\n  d: [3, 4]\n\n\n--- m:\nmap[a:Easy! b:map[c:2 d:[3 4]]]\n\n--- m dump:\na: Easy!\nb:\n  c: 2\n  d:\n  - 3\n  - 4\n```\n\n----------------------------------------\n\nTITLE: Example of properly formatted commit message in Moby\nDESCRIPTION: Demonstrates the expected format for commit messages in the Moby project, showing a specific example that includes the subsystem, what changed, and the rationale for the change.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/godbus/dbus/v5/CONTRIBUTING.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nscripts: add the test-cluster command\n\nthis uses tmux to setup a test cluster that you can easily kill and\nstart for debugging.\n\nFixes #38\n```\n\n----------------------------------------\n\nTITLE: Unpausing a Container via HTTP Request\nDESCRIPTION: Example HTTP POST request to unpause a container with ID 'e90e34656806'.\nSOURCE: https://github.com/moby/moby/blob/master/docs/api/v1.24.md#2025-04-10_snippet_42\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1.24/containers/e90e34656806/unpause HTTP/1.1\n```\n\n----------------------------------------\n\nTITLE: Removing Dangling Docker Images\nDESCRIPTION: Command to remove dangling Docker images (images not tagged and not referenced by any container). It uses docker images to list all dangling images and pipes them to docker rmi to forcibly remove them.\nSOURCE: https://github.com/moby/moby/blob/master/docs/contributing/set-up-dev-env.md#2025-04-10_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ docker rmi -f $(docker images -q -a -f dangling=true)\n```\n\n----------------------------------------\n\nTITLE: Iptables NAT Table Configuration for NAT-Unprotected Network\nDESCRIPTION: The iptables nat table configuration showing various chains and rules for the Docker network in nat-unprotected mode.\nSOURCE: https://github.com/moby/moby/blob/master/integration/network/bridge/iptablesdoc/generated/usernet-portmap-natunprot.md#2025-04-10_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nChain PREROUTING (policy ACCEPT 0 packets, 0 bytes)\nnum   pkts bytes target     prot opt in     out     source               destination         \n1        0     0 DOCKER     0    --  *      *       0.0.0.0/0            0.0.0.0/0            ADDRTYPE match dst-type LOCAL\n\nChain INPUT (policy ACCEPT 0 packets, 0 bytes)\nnum   pkts bytes target     prot opt in     out     source               destination         \n\nChain OUTPUT (policy ACCEPT 0 packets, 0 bytes)\nnum   pkts bytes target     prot opt in     out     source               destination         \n1        0     0 DOCKER     0    --  *      *       0.0.0.0/0           !127.0.0.0/8          ADDRTYPE match dst-type LOCAL\n\nChain POSTROUTING (policy ACCEPT 0 packets, 0 bytes)\nnum   pkts bytes target     prot opt in     out     source               destination         \n1        0     0 MASQUERADE  0    --  *      !bridge1  192.0.2.0/24         0.0.0.0/0           \n2        0     0 MASQUERADE  0    --  *      !docker0  172.17.0.0/16        0.0.0.0/0           \n\nChain DOCKER (2 references)\nnum   pkts bytes target     prot opt in     out     source               destination         \n1        0     0 RETURN     0    --  bridge1 *       0.0.0.0/0            0.0.0.0/0           \n2        0     0 RETURN     0    --  docker0 *       0.0.0.0/0            0.0.0.0/0           \n3        0     0 DNAT       6    --  !bridge1 *       0.0.0.0/0            0.0.0.0/0            tcp dpt:8080 to:192.0.2.2:80\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Logrus Formatter in Go\nDESCRIPTION: This snippet shows how to create a custom formatter for Logrus by implementing the Formatter interface. It creates a MyJSONFormatter that marshals the entry data to JSON.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/sirupsen/logrus/README.md#2025-04-10_snippet_9\n\nLANGUAGE: go\nCODE:\n```\ntype MyJSONFormatter struct {\n}\n\nlog.SetFormatter(new(MyJSONFormatter))\n\nfunc (f *MyJSONFormatter) Format(entry *Entry) ([]byte, error) {\n  // Note this doesn't include Time, Level and Message which are available on\n  // the Entry. Consult `godoc` on information about those fields or read the\n  // source of the official loggers.\n  serialized, err := json.Marshal(entry.Data)\n    if err != nil {\n      return nil, fmt.Errorf(\"Failed to marshal fields to JSON, %w\", err)\n    }\n  return append(serialized, '\\n'), nil\n}\n```\n\n----------------------------------------\n\nTITLE: Using errwrap with Custom Types in Go\nDESCRIPTION: Demonstrates how to use errwrap's ContainsType function with a custom error type that implements the Wrapper interface.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/hashicorp/errwrap/README.md#2025-04-10_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nerr := &AppError{Err: fmt.Errorf(\"an error\")}\nif errwrap.ContainsType(err, fmt.Errorf(\"\")) {\n\t// This will work!\n}\n```\n\n----------------------------------------\n\nTITLE: Streaming Decompression Implementation in Go\nDESCRIPTION: Example of how to decompress streaming data using the zstd package. Creates a reader and copies content to output writer. Includes proper cleanup with deferred Close() call.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/klauspost/compress/zstd/README.md#2025-04-10_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\nimport \"github.com/klauspost/compress/zstd\"\n\nfunc Decompress(in io.Reader, out io.Writer) error {\n    d, err := zstd.NewReader(in)\n    if err != nil {\n        return err\n    }\n    defer d.Close()\n    \n    // Copy content...\n    _, err = io.Copy(out, d)\n    return err\n}\n```\n\n----------------------------------------\n\nTITLE: Docker Daemon CORS Configuration\nDESCRIPTION: Example of configuring CORS headers for the Docker Engine API by setting the --api-cors-header flag when running the Docker daemon.\nSOURCE: https://github.com/moby/moby/blob/master/docs/api/v1.24.md#2025-04-10_snippet_107\n\nLANGUAGE: Bash\nCODE:\n```\ndockerd -H=\"192.168.1.9:2375\" --api-cors-header=\"http://foo.bar\"\n```\n\n----------------------------------------\n\nTITLE: Error Wrapping with Context in Go\nDESCRIPTION: Shows how to use errors.Wrap to add contextual information to an error while preserving the original error value.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/pkg/errors/README.md#2025-04-10_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n_, err := ioutil.ReadAll(r)\nif err != nil {\n        return errors.Wrap(err, \"read failed\")\n}\n```\n\n----------------------------------------\n\nTITLE: Instrumenting HTTP Handler with Metrics in Go\nDESCRIPTION: Example of how to wrap an HTTP handler with metrics instrumentation using the go-metrics library.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/docker/go-metrics/README.md#2025-04-10_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nnamespace := metrics.NewNamespace(\"docker_distribution\", \"http\", metrics.Labels{\"handler\": \"your_http_handler_name\"})\nhttpMetrics := namespace.NewDefaultHttpMetrics()\nmetrics.Register(namespace)\ninstrumentedHandler = metrics.InstrumentHandler(httpMetrics, unInstrumentedHandler)\n```\n\n----------------------------------------\n\nTITLE: Creating and Managing Trace Spans\nDESCRIPTION: Demonstrates how to create and manage trace spans using StartSpan and End methods\nSOURCE: https://github.com/moby/moby/blob/master/vendor/go.opencensus.io/README.md#2025-04-10_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nctx, span := trace.StartSpan(ctx, \"cache.Get\")\ndefer span.End()\n\n// Do work to get from cache.\n```\n\n----------------------------------------\n\nTITLE: Accept Header Structure Definition\nDESCRIPTION: Defines a structure to represent individual clauses in an HTTP Accept header, including type, subtype, quality factor, and parameters.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/munnerz/goautoneg/README.txt#2025-04-10_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype Accept struct {\n    Type, SubType string\n    Q             float32\n    Params        map[string]string\n}\n```\n\n----------------------------------------\n\nTITLE: Monitoring BoltDB Statistics in Go\nDESCRIPTION: Demonstrates how to collect and log database statistics every 10 seconds using a goroutine. The code captures initial stats, compares them with current stats, and outputs the difference as JSON to stderr.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/go.etcd.io/bbolt/README.md#2025-04-10_snippet_19\n\nLANGUAGE: go\nCODE:\n```\ngo func() {\n\t// Grab the initial stats.\n\tprev := db.Stats()\n\n\tfor {\n\t\t// Wait for 10s.\n\t\ttime.Sleep(10 * time.Second)\n\n\t\t// Grab the current stats and diff them.\n\t\tstats := db.Stats()\n\t\tdiff := stats.Sub(&prev)\n\n\t\t// Encode stats to JSON and print to STDERR.\n\t\tjson.NewEncoder(os.Stderr).Encode(diff)\n\n\t\t// Save stats for the next loop.\n\t\tprev = stats\n\t}\n}()\n```\n\n----------------------------------------\n\nTITLE: Causer Interface Definition in Go\nDESCRIPTION: Defines the causer interface used for retrieving the original cause of an error in the error chain.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/pkg/errors/README.md#2025-04-10_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ntype causer interface {\n        Cause() error\n}\n```\n\n----------------------------------------\n\nTITLE: Using Atomic Operations in Go\nDESCRIPTION: This code snippet demonstrates the usage of the 'atomic' package in Go. It shows how to create an atomic Uint32 variable, store a value, subtract from it, and perform a Compare-And-Swap (CAS) operation.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/go.uber.org/atomic/README.md#2025-04-10_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nvar atom atomic.Uint32\natom.Store(42)\natom.Sub(2)\natom.CAS(40, 11)\n```\n\n----------------------------------------\n\nTITLE: Defining Log Broker Messages in SwarmKit Protobuf\nDESCRIPTION: Defines message types for the log broker system in SwarmKit. Includes LogSubscriptionOptions for configuring log subscriptions, LogSelector for filtering logs by service/node/task, and LogContext for providing context information.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/moby/swarmkit/v2/api/api.pb.txt#2025-04-10_snippet_106\n\nLANGUAGE: protobuf\nCODE:\n```\nname: \"LogSubscriptionOptions\"\nfield {\n  name: \"streams\"\n  number: 1\n  label: LABEL_REPEATED\n  type: TYPE_ENUM\n  type_name: \".docker.swarmkit.v1.LogStream\"\n  options {\n    packed: false\n  }\n  json_name: \"streams\"\n}\nfield {\n  name: \"follow\"\n  number: 2\n  label: LABEL_OPTIONAL\n  type: TYPE_BOOL\n  json_name: \"follow\"\n}\nfield {\n  name: \"tail\"\n  number: 3\n  label: LABEL_OPTIONAL\n  type: TYPE_INT64\n  json_name: \"tail\"\n}\nfield {\n  name: \"since\"\n  number: 4\n  label: LABEL_OPTIONAL\n  type: TYPE_MESSAGE\n  type_name: \".google.protobuf.Timestamp\"\n  json_name: \"since\"\n}\n}\nmessage_type {\n  name: \"LogSelector\"\n  field {\n    name: \"service_ids\"\n    number: 1\n    label: LABEL_REPEATED\n    type: TYPE_STRING\n    json_name: \"serviceIds\"\n  }\n  field {\n    name: \"node_ids\"\n    number: 2\n    label: LABEL_REPEATED\n    type: TYPE_STRING\n    json_name: \"nodeIds\"\n  }\n  field {\n    name: \"task_ids\"\n    number: 3\n    label: LABEL_REPEATED\n    type: TYPE_STRING\n    json_name: \"taskIds\"\n  }\n}\nmessage_type {\n  name: \"LogContext\"\n  field {\n    name: \"service_id\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"serviceId\"\n  }\n  field {\n    name: \"node_id\"\n    number: 2\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"nodeId\"\n  }\n  field {\n    name: \"task_id\"\n    number: 3\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"taskId\"\n  }\n}\nmessage_type {\n  name: \"LogAttr\"\n  field {\n    name: \"key\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"key\"\n  }\n  field {\n    name: \"value\"\n    number: 2\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Immutable Radix Tree in Go\nDESCRIPTION: Demonstrates how to create an immutable radix tree, insert key-value pairs, and find the longest prefix match for a query string.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/hashicorp/go-immutable-radix/v2/README.md#2025-04-10_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// Create a tree\nr := iradix.New[int]()\nr, _, _ = r.Insert([]byte(\"foo\"), 1)\nr, _, _ = r.Insert([]byte(\"bar\"), 2)\nr, _, _ = r.Insert([]byte(\"foobar\"), 2)\n\n// Find the longest prefix match\nm, _, _ := r.Root().LongestPrefix([]byte(\"foozip\"))\nif string(m) != \"foo\" {\n    panic(\"should be foo\")\n}\n```\n\n----------------------------------------\n\nTITLE: Running Specific Unit Test in Moby Project\nDESCRIPTION: This command shows how to run a specific unit test (TestValidateIPAddress) in the Moby project using the TESTFLAGS environment variable.\nSOURCE: https://github.com/moby/moby/blob/master/docs/contributing/test.md#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ TESTFLAGS='-test.run ^TestValidateIPAddress$' make test-unit\n```\n\n----------------------------------------\n\nTITLE: Container Attach API Response\nDESCRIPTION: HTTP response for successful container attachment showing upgrade to raw stream.\nSOURCE: https://github.com/moby/moby/blob/master/docs/api/v1.24.md#2025-04-10_snippet_45\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 101 UPGRADED\nContent-Type: application/vnd.docker.raw-stream\nConnection: Upgrade\nUpgrade: tcp\n```\n\n----------------------------------------\n\nTITLE: Defining NodeSpec Membership and Availability Enums in Protocol Buffers\nDESCRIPTION: Defines enums for node membership status (PENDING, ACCEPTED) and availability (ACTIVE, PAUSE, DRAIN) within the NodeSpec message. These enums are used to represent the state and availability of nodes in a Docker Swarm cluster.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/moby/swarmkit/v2/api/api.pb.txt#2025-04-10_snippet_62\n\nLANGUAGE: Protocol Buffers\nCODE:\n```\nenum_type {\n  name: \"Membership\"\n  value {\n    name: \"PENDING\"\n    number: 0\n    options {\n      66001: \"NodeMembershipPending\"\n    }\n  }\n  value {\n    name: \"ACCEPTED\"\n    number: 1\n    options {\n      66001: \"NodeMembershipAccepted\"\n    }\n  }\n  options {\n    62001: 0\n  }\n}\nenum_type {\n  name: \"Availability\"\n  value {\n    name: \"ACTIVE\"\n    number: 0\n    options {\n      66001: \"NodeAvailabilityActive\"\n    }\n  }\n  value {\n    name: \"PAUSE\"\n    number: 1\n    options {\n      66001: \"NodeAvailabilityPause\"\n    }\n  }\n  value {\n    name: \"DRAIN\"\n    number: 2\n    options {\n      66001: \"NodeAvailabilityDrain\"\n    }\n  }\n  options {\n    62001: 0\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining RequestAddress Function Signature for IPAM Driver in Go\nDESCRIPTION: Function signature for reserving an IP address from a specified pool. It handles specific IP requests or allocates available addresses and returns network configuration.\nSOURCE: https://github.com/moby/moby/blob/master/libnetwork/docs/ipam.md#2025-04-10_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nRequestAddress(string, net.IP, map[string]string) (*net.IPNet, map[string]string, error)\n```\n\n----------------------------------------\n\nTITLE: IPVS Load Balancer Configuration for Service Traffic\nDESCRIPTION: This IPVS configuration in the ingress_sbox namespace defines a round-robin load balancing policy for marked traffic (FWM 256). It distributes connections to multiple container instances that back the service.\nSOURCE: https://github.com/moby/moby/blob/master/libnetwork/docs/network.md#2025-04-10_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nFWM  256 rr\n  -> 10.255.0.5:0                 Masq    1      0          0         \n  -> 10.255.0.7:0                 Masq    1      0          0         \n  -> 10.255.0.8:0                 Masq    1      0          0        \n```\n\n----------------------------------------\n\nTITLE: Measuring 99th Percentile Latency of Unary Requests for gRPC Services using Prometheus\nDESCRIPTION: This query estimates the 99th percentile of handling time for unary RPCs per gRPC service using a 5-minute rolling window. It utilizes the histogram_quantile function on the 'grpc_server_handling_seconds_bucket' metric for accurate latency estimation.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/grpc-ecosystem/go-grpc-prometheus/README.md#2025-04-10_snippet_7\n\nLANGUAGE: jsoniq\nCODE:\n```\nhistogram_quantile(0.99, \n  sum(rate(grpc_server_handling_seconds_bucket{job=\"foo\",grpc_type=\"unary\"}[5m])) by (grpc_service,le)\n)\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests for Specific Package in Moby\nDESCRIPTION: This command demonstrates how to run unit tests for a single package in the Moby project using the TESTDIRS environment variable.\nSOURCE: https://github.com/moby/moby/blob/master/docs/contributing/test.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ TESTDIRS='github.com/docker/docker/opts' make test-unit\n```\n\n----------------------------------------\n\nTITLE: Docker SwarmKit Service API Definitions\nDESCRIPTION: Comprehensive Protocol Buffer message type definitions for Docker SwarmKit v1 API including operations for managing clusters, secrets, configs, extensions and resources. Defines request/response message structures with fields for IDs, specifications, filters and other metadata.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/moby/swarmkit/v2/api/api.pb.txt#2025-04-10_snippet_92\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage_type {\n    name: \"UpdateClusterResponse\"\n    field {\n      name: \"cluster\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_MESSAGE\n      type_name: \".docker.swarmkit.v1.Cluster\"\n      json_name: \"cluster\"\n    }\n  }\n  message_type {\n    name: \"GetSecretRequest\"\n    field {\n      name: \"secret_id\"\n      number: 1 \n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"secretId\"\n    }\n  }\n  # Additional message type definitions...\n```\n\n----------------------------------------\n\nTITLE: Defining Repository in Image Tarball JSON Format\nDESCRIPTION: JSON structure for defining a repository in an image tarball, mapping repository and tag names to layer IDs.\nSOURCE: https://github.com/moby/moby/blob/master/docs/api/v1.24.md#2025-04-10_snippet_72\n\nLANGUAGE: json\nCODE:\n```\n{\n\"hello-world\":\n    {\"latest\": \"565a9d68a73f6706862bfe8409a7f659776d4d60a8d096eb4a3cbce6999cc2a1\"}\n}\n```\n\n----------------------------------------\n\nTITLE: Synchronous Log Entry Writing in Go\nDESCRIPTION: Shows how to write critical log entries synchronously to Cloud Logging. This ensures immediate ingestion but may impact performance.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/cloud.google.com/go/logging/README.md#2025-04-10_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nlogger := client.Logger(\"my-log\")\nlogger.LogSync(context.Background(), logging.Entry{Payload: \"something happened!\"})\n```\n\n----------------------------------------\n\nTITLE: Defining Network Message Structure in Protobuf\nDESCRIPTION: Definition of a Network message type with fields for ID, metadata, specifications, driver state, IPAM options, and pending delete status. Includes options for field indexing.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/moby/swarmkit/v2/api/api.pb.txt#2025-04-10_snippet_83\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage_type {\n  name: \"Network\"\n  field {\n    name: \"id\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"id\"\n  }\n  field {\n    name: \"meta\"\n    number: 2\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".docker.swarmkit.v1.Meta\"\n    options {\n      65001: 0\n    }\n    json_name: \"meta\"\n  }\n  field {\n    name: \"spec\"\n    number: 3\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".docker.swarmkit.v1.NetworkSpec\"\n    options {\n      65001: 0\n    }\n    json_name: \"spec\"\n  }\n  field {\n    name: \"driver_state\"\n    number: 4\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".docker.swarmkit.v1.Driver\"\n    json_name: \"driverState\"\n  }\n  field {\n    name: \"ipam\"\n    number: 5\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".docker.swarmkit.v1.IPAMOptions\"\n    options {\n      65004: \"IPAM\"\n    }\n    json_name: \"ipam\"\n  }\n  field {\n    name: \"pending_delete\"\n    number: 6\n    label: LABEL_OPTIONAL\n    type: TYPE_BOOL\n    json_name: \"pendingDelete\"\n  }\n  options {\n    70001 {\n      1 {\n        1: 1\n        2: 1\n        3: 1\n        4: 1\n        5: 1\n        6: 1\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Task-Related Message Types in SwarmKit Protobuf\nDESCRIPTION: Defines several protocol buffer messages related to task management in SwarmKit, including TasksRequest for requesting task information and TasksMessage for delivering task data from the server.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/moby/swarmkit/v2/api/api.pb.txt#2025-04-10_snippet_100\n\nLANGUAGE: protobuf\nCODE:\n```\nname: \"TasksRequest\"\nfield {\n  name: \"session_id\"\n  number: 1\n  label: LABEL_OPTIONAL\n  type: TYPE_STRING\n  json_name: \"sessionId\"\n}\n}\nmessage_type {\n  name: \"TasksMessage\"\n  field {\n    name: \"tasks\"\n    number: 1\n    label: LABEL_REPEATED\n    type: TYPE_MESSAGE\n    type_name: \".docker.swarmkit.v1.Task\"\n    json_name: \"tasks\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: IPTables NAT4 Configuration View\nDESCRIPTION: Displays the contents of the nat table that Docker creates for network address translation in IPv4.\nSOURCE: https://github.com/moby/moby/blob/master/integration/network/bridge/iptablesdoc/templates/new-daemon.md#2025-04-10_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n{{index . \"LNat4\"}}\n```\n\n----------------------------------------\n\nTITLE: Using Logrus Logger as io.Writer in Go\nDESCRIPTION: This snippet demonstrates how to use a Logrus logger as an io.Writer. It shows how to create a writer from the logger and use it with an http.Server's ErrorLog.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/sirupsen/logrus/README.md#2025-04-10_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nw := logger.Writer()\ndefer w.Close()\n\nsrv := http.Server{\n    // create a stdlib log.Logger that writes to\n    // logrus.Logger.\n    ErrorLog: log.New(w, \"\", 0),\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TaskState Enum in Protocol Buffers\nDESCRIPTION: Enumerates the various states a task can be in within the Docker Swarm ecosystem. This enum includes states from NEW to ORPHANED, with associated numeric values and options.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/moby/swarmkit/v2/api/api.pb.txt#2025-04-10_snippet_61\n\nLANGUAGE: protobuf\nCODE:\n```\nenum TaskState {\n  NEW = 0 [(gogoproto.enumvalue_customname) = \"TaskStateNew\"];\n  PENDING = 64 [(gogoproto.enumvalue_customname) = \"TaskStatePending\"];\n  ASSIGNED = 192 [(gogoproto.enumvalue_customname) = \"TaskStateAssigned\"];\n  ACCEPTED = 256 [(gogoproto.enumvalue_customname) = \"TaskStateAccepted\"];\n  PREPARING = 320 [(gogoproto.enumvalue_customname) = \"TaskStatePreparing\"];\n  READY = 384 [(gogoproto.enumvalue_customname) = \"TaskStateReady\"];\n  STARTING = 448 [(gogoproto.enumvalue_customname) = \"TaskStateStarting\"];\n  RUNNING = 512 [(gogoproto.enumvalue_customname) = \"TaskStateRunning\"];\n  COMPLETE = 576 [(gogoproto.enumvalue_customname) = \"TaskStateCompleted\"];\n  SHUTDOWN = 640 [(gogoproto.enumvalue_customname) = \"TaskStateShutdown\"];\n  FAILED = 704 [(gogoproto.enumvalue_customname) = \"TaskStateFailed\"];\n  REJECTED = 768 [(gogoproto.enumvalue_customname) = \"TaskStateRejected\"];\n  REMOVE = 800 [(gogoproto.enumvalue_customname) = \"TaskStateRemove\"];\n  ORPHANED = 832 [(gogoproto.enumvalue_customname) = \"TaskStateOrphaned\"];\n\n  option (gogoproto.enum_customname) = \"TaskState\";\n  option (gogoproto.enumdecl) = false;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Config Message Structure in Protobuf\nDESCRIPTION: Definition of a Config message type with fields for ID, metadata, and specifications. Includes indexing options for efficient retrieval.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/moby/swarmkit/v2/api/api.pb.txt#2025-04-10_snippet_86\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage_type {\n  name: \"Config\"\n  field {\n    name: \"id\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"id\"\n  }\n  field {\n    name: \"meta\"\n    number: 2\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".docker.swarmkit.v1.Meta\"\n    options {\n      65001: 0\n    }\n    json_name: \"meta\"\n  }\n  field {\n    name: \"spec\"\n    number: 3\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".docker.swarmkit.v1.ConfigSpec\"\n    options {\n      65001: 0\n    }\n    json_name: \"spec\"\n  }\n  options {\n    70001 {\n      1 {\n        1: 1\n        2: 1\n        3: 1\n        4: 1\n        5: 1\n        6: 1\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Logger in Go Application Object\nDESCRIPTION: Shows how to integrate and use the logger within an application object structure and its methods.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/go-logr/logr/README.md#2025-04-10_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n    type appObject struct {\n        // ... other fields ...\n        logger logr.Logger\n        // ... other fields ...\n    }\n\n    func (app *appObject) Run() {\n        app.logger.Info(\"starting up\", \"timestamp\", time.Now())\n\n        // ... app code ...\n```\n\n----------------------------------------\n\nTITLE: Implementing Routes with Variables in Go\nDESCRIPTION: Example of setting up a router with path variables using Gorilla Mux. This snippet shows how to define a route with a dynamic 'type' parameter.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/gorilla/mux/README.md#2025-04-10_snippet_21\n\nLANGUAGE: go\nCODE:\n```\n// endpoints.go\nfunc main() {\n    r := mux.NewRouter()\n    // A route with a route variable:\n    r.HandleFunc(\"/metrics/{type}\", MetricsHandler)\n\n    log.Fatal(http.ListenAndServe(\"localhost:8080\", r))\n}\n```\n\n----------------------------------------\n\nTITLE: Adding SeverityUndefined Constant\nDESCRIPTION: Adds SeverityUndefined constant to represent an unset severity level in logging.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-10_snippet_5\n\nLANGUAGE: Go\nCODE:\n```\nSeverityUndefined const to go.opentelemetry.io/otel/log\n```\n\n----------------------------------------\n\nTITLE: Setting BlkioDeviceReadIOps in Docker Container Configuration\nDESCRIPTION: Configures block IO read rate limits (IO operations per second) for a specific device. This setting allows limiting the read IOPS for a container to prevent it from consuming too many system resources.\nSOURCE: https://github.com/moby/moby/blob/master/docs/api/v1.24.md#2025-04-10_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n\"BlkioDeviceReadIOps\": [{\"Path\": \"/dev/sda\", \"Rate\": \"1000\"}]\n```\n\n----------------------------------------\n\nTITLE: Endpoint Operational Info Request in Remote Driver Protocol\nDESCRIPTION: LibNetwork requests operational info for an endpoint, providing network ID and endpoint ID.\nSOURCE: https://github.com/moby/moby/blob/master/libnetwork/docs/remote.md#2025-04-10_snippet_8\n\nLANGUAGE: JSON\nCODE:\n```\n{\n\t\t\"NetworkID\": string,\n\t\t\"EndpointID\": string\n    }\n```\n\n----------------------------------------\n\nTITLE: Filter Table IPTables Commands\nDESCRIPTION: The actual iptables commands used to create the filter table configuration, including chain creation, policy setting, and rule definition.\nSOURCE: https://github.com/moby/moby/blob/master/integration/network/bridge/iptablesdoc/generated/new-daemon.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n-P INPUT ACCEPT\n-P FORWARD ACCEPT\n-P OUTPUT ACCEPT\n-N DOCKER\n-N DOCKER-BRIDGE\n-N DOCKER-CT\n-N DOCKER-FORWARD\n-N DOCKER-ISOLATION-STAGE-1\n-N DOCKER-ISOLATION-STAGE-2\n-N DOCKER-USER\n-A FORWARD -j DOCKER-USER\n-A FORWARD -j DOCKER-FORWARD\n-A DOCKER ! -i docker0 -o docker0 -j DROP\n-A DOCKER-BRIDGE -o docker0 -j DOCKER\n-A DOCKER-CT -o docker0 -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT\n-A DOCKER-FORWARD -j DOCKER-CT\n-A DOCKER-FORWARD -j DOCKER-ISOLATION-STAGE-1\n-A DOCKER-FORWARD -j DOCKER-BRIDGE\n-A DOCKER-FORWARD -i docker0 -j ACCEPT\n-A DOCKER-ISOLATION-STAGE-1 -i docker0 ! -o docker0 -j DOCKER-ISOLATION-STAGE-2\n-A DOCKER-ISOLATION-STAGE-2 -o docker0 -j DROP\n-A DOCKER-USER -j RETURN\n```\n\n----------------------------------------\n\nTITLE: Marshaling Go struct to TOML\nDESCRIPTION: Shows how to marshal a Go struct into a TOML document using the go-toml v2 library.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/pelletier/go-toml/v2/README.md#2025-04-10_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ncfg := MyConfig{\n\tVersion: 2,\n\tName:    \"go-toml\",\n\tTags:    []string{\"go\", \"toml\"},\n}\n\nb, err := toml.Marshal(cfg)\nif err != nil {\n\tpanic(err)\n}\nfmt.Println(string(b))\n```\n\n----------------------------------------\n\nTITLE: Creating Nested Buckets in BoltDB with Go\nDESCRIPTION: This snippet demonstrates how to create and use nested buckets in BoltDB. It shows the creation of a user within an account bucket structure.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/go.etcd.io/bbolt/README.md#2025-04-10_snippet_17\n\nLANGUAGE: go\nCODE:\n```\nfunc createUser(accountID int, u *User) error {\n    tx, err := db.Begin(true)\n    if err != nil {\n        return err\n    }\n    defer tx.Rollback()\n\n    root := tx.Bucket([]byte(strconv.FormatUint(accountID, 10)))\n    bkt, err := root.CreateBucketIfNotExists([]byte(\"USERS\"))\n    if err != nil {\n        return err\n    }\n\n    userID, err := bkt.NextSequence()\n    if err != nil {\n        return err\n    }\n    u.ID = userID\n\n    if buf, err := json.Marshal(u); err != nil {\n        return err\n    } else if err := bkt.Put([]byte(strconv.FormatUint(u.ID, 10)), buf); err != nil {\n        return err\n    }\n\n    if err := tx.Commit(); err != nil {\n        return err\n    }\n\n    return nil\n}\n```\n\n----------------------------------------\n\nTITLE: Network Driver Node Discovery Format\nDESCRIPTION: Specific format for node discovery notifications, including node address and self-identification flag.\nSOURCE: https://github.com/moby/moby/blob/master/libnetwork/docs/remote.md#2025-04-10_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"DiscoveryType\": int,\n    \"DiscoveryData\": {\n        \"Address\" : string,\n        \"self\" : bool\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Create Docker Image from Container API\nDESCRIPTION: REST endpoint to create a new Docker image from a container's changes. Accepts container configuration and commit parameters. Returns ID of newly created image.\nSOURCE: https://github.com/moby/moby/blob/master/docs/api/v1.24.md#2025-04-10_snippet_67\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1.24/commit?container=44c004db4b17&comment=message&repo=myrepo HTTP/1.1\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n     \"Hostname\": \"\",\n     \"Domainname\": \"\",\n     \"User\": \"\",\n     \"AttachStdin\": false,\n     \"AttachStdout\": true,\n     \"AttachStderr\": true,\n     \"Tty\": false,\n     \"OpenStdin\": false,\n     \"StdinOnce\": false,\n     \"Env\": null,\n     \"Cmd\": [\n             \"date\"\n     ],\n     \"Mounts\": [\n       {\n         \"Source\": \"/data\",\n         \"Destination\": \"/data\",\n         \"Mode\": \"ro,Z\",\n         \"RW\": false\n       }\n     ],\n     \"Labels\": {\n             \"key1\": \"value1\",\n             \"key2\": \"value2\"\n      },\n     \"WorkingDir\": \"\",\n     \"NetworkDisabled\": false,\n     \"ExposedPorts\": {\n             \"22/tcp\": {}\n     }\n}\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Log Entry Writing in Go\nDESCRIPTION: Demonstrates adding log entries to a buffer for asynchronous flushing to Cloud Logging service. This is the recommended approach for non-critical logging.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/cloud.google.com/go/logging/README.md#2025-04-10_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nlogger := client.Logger(\"my-log\")\nlogger.Log(logging.Entry{Payload: \"something happened!\"})\n```\n\n----------------------------------------\n\nTITLE: JSON Key File Authorization\nDESCRIPTION: Creates a new client using a JSON key file for authentication credentials\nSOURCE: https://github.com/moby/moby/blob/master/vendor/cloud.google.com/go/README.md#2025-04-10_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nclient, err := storage.NewClient(ctx, option.WithCredentialsFile(\"path/to/keyfile.json\"))\n```\n\n----------------------------------------\n\nTITLE: Defining NetworkAttachment Message Structure in Protobuf\nDESCRIPTION: Definition of a NetworkAttachment message type with fields for ID, aliases, and driver attachment options. Includes a nested message type for driver attachment options map entries.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/moby/swarmkit/v2/api/api.pb.txt#2025-04-10_snippet_82\n\nLANGUAGE: protobuf\nCODE:\n```\nfield {\n  name: \"aliases\"\n  number: 3\n  label: LABEL_REPEATED\n  type: TYPE_STRING\n  json_name: \"aliases\"\n}\nfield {\n  name: \"driver_attachment_opts\"\n  number: 4\n  label: LABEL_REPEATED\n  type: TYPE_MESSAGE\n  type_name: \".docker.swarmkit.v1.NetworkAttachment.DriverAttachmentOptsEntry\"\n  json_name: \"driverAttachmentOpts\"\n}\nnested_type {\n  name: \"DriverAttachmentOptsEntry\"\n  field {\n    name: \"key\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"key\"\n  }\n  field {\n    name: \"value\"\n    number: 2\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"value\"\n  }\n  options {\n    map_entry: true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Building Named Routes with Gorilla Mux\nDESCRIPTION: Demonstrates how to create and name routes in Gorilla Mux, allowing for URL construction using named parameters.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/gorilla/mux/README.md#2025-04-10_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nr := mux.NewRouter()\nr.HandleFunc(\"/articles/{category}/{id:[0-9]+}\", ArticleHandler).\n  Name(\"article\")\n```\n\n----------------------------------------\n\nTITLE: Defining Raft Entry Structure in Protobuf\nDESCRIPTION: Defines the structure of a Raft Entry in Protocol Buffers, including fields for term, index, type, and data.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/moby/swarmkit/v2/api/api.pb.txt#2025-04-10_snippet_109\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage_type {\n  name: \"Entry\"\n  field {\n    name: \"Term\"\n    number: 2\n    label: LABEL_OPTIONAL\n    type: TYPE_UINT64\n    options {\n      65001: 0\n    }\n    json_name: \"Term\"\n  }\n  field {\n    name: \"Index\"\n    number: 3\n    label: LABEL_OPTIONAL\n    type: TYPE_UINT64\n    options {\n      65001: 0\n    }\n    json_name: \"Index\"\n  }\n  field {\n    name: \"Type\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_ENUM\n    type_name: \".raftpb.EntryType\"\n    options {\n      65001: 0\n    }\n    json_name: \"Type\"\n  }\n  field {\n    name: \"Data\"\n    number: 4\n    label: LABEL_OPTIONAL\n    type: TYPE_BYTES\n    json_name: \"Data\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Docker Network and Running Container with Published Port\nDESCRIPTION: Commands to create a custom Docker network (bridge1) with specific subnet configuration and run a container on that network with port mapping from host port 8080 to container port 80.\nSOURCE: https://github.com/moby/moby/blob/master/integration/network/bridge/iptablesdoc/generated/usernet-portmap.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker network create \\\n  -o com.docker.network.bridge.name=bridge1 \\\n  --subnet 192.0.2.0/24 --gateway 192.0.2.1 bridge1\ndocker run --network bridge1 -p 8080:80 --name c1 busybox\n```\n\n----------------------------------------\n\nTITLE: Defining Resource Message Structure in Protobuf\nDESCRIPTION: Definition of a Resource message type with fields for ID, metadata, annotations, kind, and payload. Supports generic resources through the use of google.protobuf.Any for payload.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/moby/swarmkit/v2/api/api.pb.txt#2025-04-10_snippet_87\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage_type {\n  name: \"Resource\"\n  field {\n    name: \"id\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    options {\n      65004: \"ID\"\n    }\n    json_name: \"id\"\n  }\n  field {\n    name: \"meta\"\n    number: 2\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".docker.swarmkit.v1.Meta\"\n    options {\n      65001: 0\n    }\n    json_name: \"meta\"\n  }\n  field {\n    name: \"annotations\"\n    number: 3\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".docker.swarmkit.v1.Annotations\"\n    options {\n      65001: 0\n    }\n    json_name: \"annotations\"\n  }\n  field {\n    name: \"kind\"\n    number: 4\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"kind\"\n  }\n  field {\n    name: \"payload\"\n    number: 5\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".google.protobuf.Any\"\n    json_name: \"payload\"\n  }\n  options {\n    70001 {\n      1 {\n        1: 1\n        2: 1\n        3: 1\n        4: 1\n        5: 1\n        6: 1\n        13: 1\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting to Remote Syslog via TCP\nDESCRIPTION: Demonstrates how to establish a connection to a remote syslog server using unencrypted TCP. This creates a writer for sending log messages to the specified TCP endpoint with the given priority and tag.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/RackSec/srslog/README.md#2025-04-10_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nw, err := syslog.Dial(\"tcp\", \"192.168.0.51:514\", syslog.LOG_ERR, \"testtag\")\n```\n\n----------------------------------------\n\nTITLE: Install Plugin API Response\nDESCRIPTION: Example JSON response from the POST /plugins/pull endpoint showing the plugin configuration options that were applied during installation.\nSOURCE: https://github.com/moby/moby/blob/master/docs/api/v1.24.md#2025-04-10_snippet_89\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"Name\": \"network\",\n    \"Description\": \"\",\n    \"Value\": [\n      \"host\"\n    ]\n  },\n  {\n    \"Name\": \"mount\",\n    \"Description\": \"\",\n    \"Value\": [\n      \"/data\"\n    ]\n  },\n  {\n    \"Name\": \"device\",\n    \"Description\": \"\",\n    \"Value\": [\n      \"/dev/cpu_dma_latency\"\n    ]\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Using tar2go to Manipulate Tar Files in Go\nDESCRIPTION: This snippet demonstrates how to use tar2go to open a tar file, access its fs.FS implementation, modify the in-memory representation, and create a new tar with updated content. It covers opening files, replacing content, deleting files, and updating the tar.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/cpuguy83/tar2go/README.md#2025-04-10_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n  f, _ := os.Open(p)\n  defer f.Close()\n  \n  // Entrypoint into this library\n  idx := NewIndex(f)\n  \n  // Get the `fs.FS` implementation\n  goFS := idx.FS()\n  // Do stuff with your fs\n  // ...\n  \n  \n  // Add or replace a file in the index\n  _ := idx.Replace(\"foo\", strings.NewReader(\"random stuff\")\n  data, _ := fs.ReadFile(goFS, \"foo\")\n  if string(data) != \"random stuff\") {\n    panic(\"unexpected data\")\n  }\n  \n  // Delete a file in the index\n  _ := idx.Replace(\"foo\", nil)\n  if _, err := fs.ReadFile(goFS, \"foo\"); !errors.Is(err, fs.ErrNotExist) {\n    panic(err)\n  }\n  \n  // Create a new tar with updated content\n  // First we need to create an `io.Writer`, which is where the updated tar stream will be written to.\n  f, _ := os.CreateTemp(\"\", \"updated\")\n  idx.Update(f, func(name string, rdr ReaderAtSized) (ReaderAtSized, bool, error) {\n    // Update calls this function for every file in the tar\n    // The returned `ReaderAtSized` is used instead of the content passed in (rdr).\n    // To make no changes just return the same rdr back.\n    // Return true for the bool value if the content is changed.\n  })\n```\n\n----------------------------------------\n\nTITLE: Defining Extension Message Structure in Protobuf\nDESCRIPTION: Definition of an Extension message type with fields for ID, metadata, annotations, and description. Used to define extensions to the SwarmKit functionality.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/moby/swarmkit/v2/api/api.pb.txt#2025-04-10_snippet_88\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage_type {\n  name: \"Extension\"\n  field {\n    name: \"id\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    options {\n      65004: \"ID\"\n    }\n    json_name: \"id\"\n  }\n  field {\n    name: \"meta\"\n    number: 2\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".docker.swarmkit.v1.Meta\"\n    options {\n      65001: 0\n    }\n    json_name: \"meta\"\n  }\n  field {\n    name: \"annotations\"\n    number: 3\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".docker.swarmkit.v1.Annotations\"\n    options {\n      65001: 0\n    }\n    json_name: \"annotations\"\n  }\n  field {\n    name: \"description\"\n    number: 4\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"description\"\n  }\n  options {\n    70001 {\n      1 {\n        1: 1\n        2: 1\n        3: 1\n        4: 1\n        5: 1\n        6: 1\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting BlkioDeviceWriteIOps in Docker Container Configuration\nDESCRIPTION: Configures block IO write rate limits (IO operations per second) for a specific device. This setting allows limiting the write IOPS for a container to prevent it from consuming too many system resources.\nSOURCE: https://github.com/moby/moby/blob/master/docs/api/v1.24.md#2025-04-10_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n\"BlkioDeviceWriteIOps\": [{\"Path\": \"/dev/sda\", \"Rate\": \"1000\"}]\n```\n\n----------------------------------------\n\nTITLE: JSON Response Structure for API Errors in Docker Engine API v1.24\nDESCRIPTION: This snippet demonstrates the standard JSON format used for error responses in the Docker Engine API. It includes a 'message' field containing the error description.\nSOURCE: https://github.com/moby/moby/blob/master/docs/api/v1.24.md#2025-04-10_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"message\": \"page not found\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Event Broadcasting in Go\nDESCRIPTION: Shows how to set up event broadcasting to multiple queues, allowing events to be distributed to multiple listeners without blocking.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/docker/go-events/README.md#2025-04-10_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nvar broadcast = NewBroadcaster() // make it available somewhere in your application.\nbroadcast.Add(queue) // add your queue!\nbroadcast.Add(queue2) // and another!\n```\n\n----------------------------------------\n\nTITLE: Responding to Handshake in Remote Driver Protocol\nDESCRIPTION: When loaded, a remote driver process must respond to a POST request on /Plugin.Activate with a manifest indicating it implements the NetworkDriver interface.\nSOURCE: https://github.com/moby/moby/blob/master/libnetwork/docs/remote.md#2025-04-10_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n\t\t\"Implements\": [\"NetworkDriver\"]\n    }\n```\n\n----------------------------------------\n\nTITLE: Tagging Docker Image with HTTP POST Request\nDESCRIPTION: Sends a POST request to tag a Docker image into a repository. The request includes query parameters for the repository name and tag.\nSOURCE: https://github.com/moby/moby/blob/master/docs/api/v1.24.md#2025-04-10_snippet_58\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1.24/images/test/tag?repo=myrepo&tag=v42 HTTP/1.1\n```\n\n----------------------------------------\n\nTITLE: Defining Labeled Timer Metrics in Go\nDESCRIPTION: Shows how to create a labeled timer metric for tracking container actions with specific action labels.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/docker/go-metrics/README.md#2025-04-10_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ncontainerActions = ns.NewLabeledTimer(\"container_actions\", \"The number of milliseconds it takes to process each container action\", \"action\")\n```\n\n----------------------------------------\n\nTITLE: Setting Up an In-Memory Sink with Signal Handler in go-metrics\nDESCRIPTION: This example shows how to configure an in-memory metrics sink with a signal handler for debugging. It demonstrates various metric types including gauges, counters, and samples, which can be dumped to stderr when a signal is received.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/armon/go-metrics/README.md#2025-04-10_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// Setup the inmem sink and signal handler\ninm := metrics.NewInmemSink(10*time.Second, time.Minute)\nsig := metrics.DefaultInmemSignal(inm)\nmetrics.NewGlobal(metrics.DefaultConfig(\"service-name\"), inm)\n\n// Run some code\ninm.SetGauge([]string{\"foo\"}, 42)\ninm.EmitKey([]string{\"bar\"}, 30)\n\ninm.IncrCounter([]string{\"baz\"}, 42)\ninm.IncrCounter([]string{\"baz\"}, 1)\ninm.IncrCounter([]string{\"baz\"}, 80)\n\ninm.AddSample([]string{\"method\", \"wow\"}, 42)\ninm.AddSample([]string{\"method\", \"wow\"}, 100)\ninm.AddSample([]string{\"method\", \"wow\"}, 22)\n\n....\n```\n\n----------------------------------------\n\nTITLE: Destination NAT for Service Traffic in Host Namespace\nDESCRIPTION: This iptables DNAT rule in the host namespace's nat PREROUTING chain redirects service requests to the ingress_sbox namespace's interface. It translates the destination address while preserving the port.\nSOURCE: https://github.com/moby/moby/blob/master/libnetwork/docs/network.md#2025-04-10_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nDNAT tcp  --  anywhere anywhere  tcp dpt:30000 to:172.18.0.2:30000\n```\n\n----------------------------------------\n\nTITLE: Basic Logging with glog in Go\nDESCRIPTION: Demonstrates basic logging functionality using the original glog package, including Info and Fatal level logs.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/k8s.io/klog/v2/README.md#2025-04-10_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nglog.Info(\"Prepare to repel boarders\")\n\nglog.Fatalf(\"Initialization failed: %s\", err)\n```\n\n----------------------------------------\n\nTITLE: Creating Metrics Namespace in Go\nDESCRIPTION: Demonstrates how to create a new metrics namespace for the Docker engine daemon with version and commit labels attached.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/docker/go-metrics/README.md#2025-04-10_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nns := metrics.NewNamespace(\"engine\", \"daemon\", metrics.Labels{\n        \"version\": dockerversion.Version,\n        \"commit\":  dockerversion.GitCommit,\n})\n```\n\n----------------------------------------\n\nTITLE: Array Bounds Handling in TOML Unmarshaling - Go\nDESCRIPTION: Demonstrates the difference in array bounds handling between v1 and v2 when unmarshaling TOML data. V1 returns an error for out-of-bounds elements while v2 silently ignores them to match encoding/json behavior.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/pelletier/go-toml/v2/README.md#2025-04-10_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ntype doc struct {\n\tA [2]string\n}\nd := doc{}\nerr := toml.Unmarshal([]byte(`A = [\"one\", \"two\", \"many\"]`), &d)\nfmt.Println(err)\n\n// (1, 1): unmarshal: TOML array length (3) exceeds destination array length (2)\n```\n\n----------------------------------------\n\nTITLE: Adding Global Logger Provider Package\nDESCRIPTION: Adds a new package to manage the global LoggerProvider, which will eventually be migrated to the main otel package.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-10_snippet_7\n\nLANGUAGE: Go\nCODE:\n```\ngo.opentelemetry.io/otel/log/global to manage the global LoggerProvider\n```\n\n----------------------------------------\n\nTITLE: Using Stateless Compression with Gzip in Go\nDESCRIPTION: Demonstrates how to use stateless compression with gzip, including setting up a buffered writer to control write sizes. This approach is useful for scenarios with many concurrent compressors but little activity.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/klauspost/compress/README.md#2025-04-10_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\n// replace 'ioutil.Discard' with your output.\ngzw, err := gzip.NewWriterLevel(ioutil.Discard, gzip.StatelessCompression)\nif err != nil {\n    return err\n}\ndefer gzw.Close()\n\nw := bufio.NewWriterSize(gzw, 4096)\ndefer w.Flush()\n\n// Write to 'w'\n```\n\n----------------------------------------\n\nTITLE: Searching Docker Images with HTTP GET Request\nDESCRIPTION: Sends a GET request to search for Docker images on Docker Hub. The request includes a query parameter for the search term.\nSOURCE: https://github.com/moby/moby/blob/master/docs/api/v1.24.md#2025-04-10_snippet_60\n\nLANGUAGE: http\nCODE:\n```\nGET /v1.24/images/search?term=sshd HTTP/1.1\n```\n\n----------------------------------------\n\nTITLE: Basic Error Handling Pattern in Go\nDESCRIPTION: Demonstrates the traditional error handling idiom in Go, showing the basic nil check pattern.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/pkg/errors/README.md#2025-04-10_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nif err != nil {\n        return err\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Percentage of Slow Unary Queries for gRPC Services with Prometheus\nDESCRIPTION: This query computes the percentage of unary requests that took longer than 250ms to process for each gRPC service. It uses the 'grpc_server_handling_seconds_bucket' and 'grpc_server_handling_seconds_count' metrics over a 5-minute window to calculate the slow query percentage.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/grpc-ecosystem/go-grpc-prometheus/README.md#2025-04-10_snippet_8\n\nLANGUAGE: jsoniq\nCODE:\n```\n100.0 - (\nsum(rate(grpc_server_handling_seconds_bucket{job=\"foo\",grpc_type=\"unary\",le=\"0.25\"}[5m])) by (grpc_service)\n / \nsum(rate(grpc_server_handling_seconds_count{job=\"foo\",grpc_type=\"unary\"}[5m])) by (grpc_service)\n) * 100.0\n```\n\n----------------------------------------\n\nTITLE: Adding Replace Directive for Legacy Import Path in Go Modules\nDESCRIPTION: This command adds a replace directive to the go.mod file, downgrading the legacy import path to an older version. This is necessary if you're unable to migrate to the new import path or if your dependencies are still using the old one.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/go.uber.org/atomic/README.md#2025-04-10_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ go mod edit -replace github.com/uber-go/atomic=github.com/uber-go/atomic@v1.4.0\n```\n\n----------------------------------------\n\nTITLE: Container Start Response\nDESCRIPTION: Example HTTP response for a successful container start operation, showing a 204 No Content status code.\nSOURCE: https://github.com/moby/moby/blob/master/docs/api/v1.24.md#2025-04-10_snippet_29\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 204 No Content\n```\n\n----------------------------------------\n\nTITLE: Setting Cgroup Driver for Docker Runtime\nDESCRIPTION: Example of configuring Docker daemon to use systemd as the cgroup driver. This setting applies to all containers launched by the daemon and affects how container cgroups are managed.\nSOURCE: https://github.com/moby/moby/blob/master/man/dockerd.8.md#2025-04-10_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo dockerd --exec-opt native.cgroupdriver=systemd\n```\n\n----------------------------------------\n\nTITLE: Network Driver Join Request Format\nDESCRIPTION: Format for the POST request to NetworkDriver.Join endpoint when a sandbox is given an endpoint. Includes network, endpoint and sandbox identifiers along with options.\nSOURCE: https://github.com/moby/moby/blob/master/libnetwork/docs/remote.md#2025-04-10_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"NetworkID\": string,\n    \"EndpointID\": string,\n    \"SandboxKey\": string,\n    \"Options\": { ... }\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing PackageURL from String in Go\nDESCRIPTION: Example demonstrating how to parse a PackageURL from its string representation, handling any potential errors that might occur during parsing.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/package-url/packageurl-go/README.md#2025-04-10_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/package-url/packageurl-go\"\n)\n\nfunc main() {\n\tinstance, err := packageurl.FromString(\"test:ok/name@version\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tfmt.Printf(\"%#v\", instance)\n}\n```\n\n----------------------------------------\n\nTITLE: Updating a Docker Swarm Configuration\nDESCRIPTION: POST request to /swarm/update endpoint to update swarm configurations. Includes parameters for orchestration, Raft, dispatcher, CA config, and join tokens.\nSOURCE: https://github.com/moby/moby/blob/master/docs/api/v1.24.md#2025-04-10_snippet_99\n\nLANGUAGE: HTTP\nCODE:\n```\nPOST /v1.24/swarm/update HTTP/1.1\nContent-Length: 12345\n\n{\n  \"Name\": \"default\",\n  \"Orchestration\": {\n    \"TaskHistoryRetentionLimit\": 10\n  },\n  \"Raft\": {\n    \"SnapshotInterval\": 10000,\n    \"LogEntriesForSlowFollowers\": 500,\n    \"HeartbeatTick\": 1,\n    \"ElectionTick\": 3\n  },\n  \"Dispatcher\": {\n    \"HeartbeatPeriod\": 5000000000\n  },\n  \"CAConfig\": {\n    \"NodeCertExpiry\": 7776000000000000\n  },\n  \"JoinTokens\": {\n    \"Worker\": \"SWMTKN-1-3pu6hszjas19xyp7ghgosyx9k8atbfcr8p2is99znpy26u2lkl-1awxwuwd3z9j1z3puu7rcgdbx\",\n    \"Manager\": \"SWMTKN-1-3pu6hszjas19xyp7ghgosyx9k8atbfcr8p2is99znpy26u2lkl-7p73s1dx5in4tatdymyhg9hu2\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Mount Consistency Enum in Protocol Buffers for Docker SwarmKit\nDESCRIPTION: This snippet defines an enum 'Consistency' for mount consistency types in Docker SwarmKit, including DEFAULT, CONSISTENT, CACHED, and DELEGATED. Each value is associated with a specific consistency option.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/moby/swarmkit/v2/api/api.pb.txt#2025-04-10_snippet_34\n\nLANGUAGE: protobuf\nCODE:\n```\nenum_type {\n  name: \"Consistency\"\n  value {\n    name: \"DEFAULT\"\n    number: 0\n    options {\n      66001: \"MountConsistencyDefault\"\n    }\n  }\n  value {\n    name: \"CONSISTENT\"\n    number: 1\n    options {\n      66001: \"MountConsistencyFull\"\n    }\n  }\n  value {\n    name: \"CACHED\"\n    number: 2\n    options {\n      66001: \"MountConsistencyCached\"\n    }\n  }\n  value {\n    name: \"DELEGATED\"\n    number: 3\n    options {\n      66001: \"MountConsistencyDelegated\"\n    }\n  }\n  options {\n    62001: 0\n    62023: \"MountConsistency\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Redirecting Container Published Port to Target Port in Container Namespace\nDESCRIPTION: This iptables REDIRECT rule in the container namespace's nat PREROUTING chain redirects traffic from the published port (30000) to the actual target port (80) that the application inside the container is listening on.\nSOURCE: https://github.com/moby/moby/blob/master/libnetwork/docs/network.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nREDIRECT   tcp  --  anywhere  10.255.0.11  tcp dpt:30000 redir ports 80\n```\n\n----------------------------------------\n\nTITLE: Setting Logrus Logging Level in Go\nDESCRIPTION: This snippet shows how to set the logging level for a Logrus Logger. It sets the level to InfoLevel, which will log anything that is info or above (warn, error, fatal, panic).\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/sirupsen/logrus/README.md#2025-04-10_snippet_7\n\nLANGUAGE: go\nCODE:\n```\n// Will log anything that is info or above (warn, error, fatal, panic). Default.\nlog.SetLevel(log.InfoLevel)\n```\n\n----------------------------------------\n\nTITLE: Defining Mount.TmpfsOptions Message in Protocol Buffers\nDESCRIPTION: This nested message type defines options for tmpfs (in-memory temporary filesystem) mounts in Docker containers, including size in bytes and permission mode, allowing for volatile container storage.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/moby/swarmkit/v2/api/api.pb.txt#2025-04-10_snippet_32\n\nLANGUAGE: protobuf\nCODE:\n```\nnested_type {\n  name: \"TmpfsOptions\"\n  field {\n    name: \"size_bytes\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_INT64\n    json_name: \"sizeBytes\"\n  }\n  field {\n    name: \"mode\"\n    number: 2\n    label: LABEL_OPTIONAL\n    type: TYPE_UINT32\n    options {\n```\n\n----------------------------------------\n\nTITLE: Documenting Version 1.2.0 Release in Markdown\nDESCRIPTION: This snippet documents the changes for version 1.2.0 of the go-grpc-prometheus project, including the release date and GitHub tag link.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/grpc-ecosystem/go-grpc-prometheus/CHANGELOG.md#2025-04-10_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## [1.2.0](https://github.com/grpc-ecosystem/go-grpc-prometheus/releases/tag/v1.2.0) - 2018-06-04\n```\n\n----------------------------------------\n\nTITLE: Defining Object Type for Watching in Docker SwarmKit\nDESCRIPTION: Protocol buffer definition for the Object message type in Docker SwarmKit that serves as a container for different object types (Node, Service, Network, etc.) that can be monitored via the watch API.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/moby/swarmkit/v2/api/api.pb.txt#2025-04-10_snippet_131\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage_type {\n  name: \"Object\"\n  field {\n    name: \"node\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".docker.swarmkit.v1.Node\"\n    oneof_index: 0\n    json_name: \"node\"\n  }\n  field {\n    name: \"service\"\n    number: 2\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".docker.swarmkit.v1.Service\"\n    oneof_index: 0\n    json_name: \"service\"\n  }\n  field {\n    name: \"network\"\n    number: 3\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".docker.swarmkit.v1.Network\"\n    oneof_index: 0\n    json_name: \"network\"\n  }\n  field {\n    name: \"task\"\n    number: 4\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".docker.swarmkit.v1.Task\"\n    oneof_index: 0\n    json_name: \"task\"\n  }\n  field {\n    name: \"cluster\"\n    number: 5\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".docker.swarmkit.v1.Cluster\"\n    oneof_index: 0\n    json_name: \"cluster\"\n  }\n  field {\n    name: \"secret\"\n    number: 6\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".docker.swarmkit.v1.Secret\"\n    oneof_index: 0\n    json_name: \"secret\"\n  }\n  field {\n    name: \"resource\"\n    number: 7\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".docker.swarmkit.v1.Resource\"\n    oneof_index: 0\n    json_name: \"resource\"\n  }\n  field {\n    name: \"extension\"\n    number: 8\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".docker.swarmkit.v1.Extension\"\n    oneof_index: 0\n    json_name: \"extension\"\n  }\n  field {\n    name: \"config\"\n    number: 9\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".docker.swarmkit.v1.Config\"\n    oneof_index: 0\n    json_name: \"config\"\n  }\n  field {\n    name: \"volume\"\n    number: 10\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".docker.swarmkit.v1.Volume\"\n    oneof_index: 0\n    json_name: \"volume\"\n  }\n  oneof_decl {\n    name: \"Object\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Semantic Conventions with Docker\nDESCRIPTION: Shell commands to generate new semantic convention packages using the semconvgen Docker image. Requires setting the release tag version and path to the semantic conventions repository.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/go.opentelemetry.io/otel/RELEASING.md#2025-04-10_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nexport TAG=\"v1.21.0\" # Change to the release version you are generating.\nexport OTEL_SEMCONV_REPO=\"/absolute/path/to/opentelemetry/semantic-conventions\"\ndocker pull otel/semconvgen:latest\nmake semconv-generate # Uses the exported TAG and OTEL_SEMCONV_REPO.\n```\n\n----------------------------------------\n\nTITLE: Defining RdmaStat Message Type in Protocol Buffers\nDESCRIPTION: Defines the RdmaStat message type with fields for current and limit RDMA entries. Each entry is represented by the RdmaEntry message type.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/containerd/cgroups/v3/cgroup2/stats/metrics.pb.txt#2025-04-10_snippet_1\n\nLANGUAGE: Protocol Buffers\nCODE:\n```\nmessage_type {\n  name: \"RdmaStat\"\n  field {\n    name: \"current\"\n    number: 1\n    label: LABEL_REPEATED\n    type: TYPE_MESSAGE\n    type_name: \".io.containerd.cgroups.v2.RdmaEntry\"\n    json_name: \"current\"\n  }\n  field {\n    name: \"limit\"\n    number: 2\n    label: LABEL_REPEATED\n    type: TYPE_MESSAGE\n    type_name: \".io.containerd.cgroups.v2.RdmaEntry\"\n    json_name: \"limit\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Inspecting Exec Instance in Docker via HTTP GET\nDESCRIPTION: HTTP GET request to retrieve low-level information about an exec command in a Docker container, including ContainerID, ExitCode, and ProcessConfig.\nSOURCE: https://github.com/moby/moby/blob/master/docs/api/v1.24.md#2025-04-10_snippet_76\n\nLANGUAGE: http\nCODE:\n```\nGET /v1.24/exec/11fb006128e8ceb3942e7c58d77750f24210e35f879dd204ac975c184b820b39/json HTTP/1.1\n```\n\n----------------------------------------\n\nTITLE: Defining IOStat Message Type in Protocol Buffers\nDESCRIPTION: Defines the IOStat message type with fields for I/O usage and PSI (Pressure Stall Information) stats. The usage field is a repeated IOEntry message, while psi is an optional PSIStats message.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/containerd/cgroups/v3/cgroup2/stats/metrics.pb.txt#2025-04-10_snippet_3\n\nLANGUAGE: Protocol Buffers\nCODE:\n```\nmessage_type {\n  name: \"IOStat\"\n  field {\n    name: \"usage\"\n    number: 1\n    label: LABEL_REPEATED\n    type: TYPE_MESSAGE\n    type_name: \".io.containerd.cgroups.v2.IOEntry\"\n    json_name: \"usage\"\n  }\n  field {\n    name: \"psi\"\n    number: 2\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".io.containerd.cgroups.v2.PSIStats\"\n    json_name: \"psi\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Error Comparison Using errors.Is in Go\nDESCRIPTION: Demonstrates how to check for specific error values within a multierror using the standard library errors.Is function.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/hashicorp/go-multierror/README.md#2025-04-10_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n// Assume err is a multierror value\nerr := somefunc()\nif errors.Is(err, os.ErrNotExist) {\n\t// err contains os.ErrNotExist\n}\n```\n\n----------------------------------------\n\nTITLE: Updating BigQuery Table Listing Pattern\nDESCRIPTION: New iterator-based pattern for listing tables in a dataset, replacing the direct ListTables method.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/cloud.google.com/go/CHANGES.md#2025-04-10_snippet_26\n\nLANGUAGE: go\nCODE:\n```\ntables, err := ds.ListTables(ctx)\n```\n\nLANGUAGE: go\nCODE:\n```\nit := ds.Tables(ctx)\nfor {\n    table, err := it.Next()\n    if err == iterator.Done {\n        break\n    }\n    if err != nil {\n        // TODO: Handle error.\n    }\n    // TODO: use table.\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ContainerSpec Message in Protocol Buffers\nDESCRIPTION: Defines the ContainerSpec message type, which includes fields for container configuration such as image, labels, commands, environment variables, user, privileges, mounts, and runtime options. This structure is used to configure containers within tasks in a Docker Swarm cluster.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/moby/swarmkit/v2/api/api.pb.txt#2025-04-10_snippet_65\n\nLANGUAGE: Protocol Buffers\nCODE:\n```\nmessage_type {\n  name: \"ContainerSpec\"\n  field {\n    name: \"image\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"image\"\n  }\n  field {\n    name: \"labels\"\n    number: 2\n    label: LABEL_REPEATED\n    type: TYPE_MESSAGE\n    type_name: \".docker.swarmkit.v1.ContainerSpec.LabelsEntry\"\n    json_name: \"labels\"\n  }\n  field {\n    name: \"command\"\n    number: 3\n    label: LABEL_REPEATED\n    type: TYPE_STRING\n    json_name: \"command\"\n  }\n  field {\n    name: \"args\"\n    number: 4\n    label: LABEL_REPEATED\n    type: TYPE_STRING\n    json_name: \"args\"\n  }\n  field {\n    name: \"hostname\"\n    number: 14\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"hostname\"\n  }\n  field {\n    name: \"env\"\n    number: 5\n    label: LABEL_REPEATED\n    type: TYPE_STRING\n    json_name: \"env\"\n  }\n  field {\n    name: \"dir\"\n    number: 6\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"dir\"\n  }\n  field {\n    name: \"user\"\n    number: 7\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"user\"\n  }\n  field {\n    name: \"groups\"\n    number: 11\n    label: LABEL_REPEATED\n    type: TYPE_STRING\n    json_name: \"groups\"\n  }\n  field {\n    name: \"privileges\"\n    number: 22\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".docker.swarmkit.v1.Privileges\"\n    json_name: \"privileges\"\n  }\n  field {\n    name: \"init\"\n    number: 23\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".google.protobuf.BoolValue\"\n    json_name: \"init\"\n  }\n  field {\n    name: \"tty\"\n    number: 13\n    label: LABEL_OPTIONAL\n    type: TYPE_BOOL\n    options {\n      65004: \"TTY\"\n    }\n    json_name: \"tty\"\n  }\n  field {\n    name: \"open_stdin\"\n    number: 18\n    label: LABEL_OPTIONAL\n    type: TYPE_BOOL\n    json_name: \"openStdin\"\n  }\n  field {\n    name: \"read_only\"\n    number: 19\n    label: LABEL_OPTIONAL\n    type: TYPE_BOOL\n    json_name: \"readOnly\"\n  }\n  field {\n    name: \"stop_signal\"\n    number: 20\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"stopSignal\"\n  }\n  field {\n    name: \"mounts\"\n    number: 8\n    label: LABEL_REPEATED\n    type: TYPE_MESSAGE\n    type_name: \".docker.swarmkit.v1.Mount\"\n    options {\n      65001: 0\n    }\n    json_name: \"mounts\"\n  }\n  field {\n    name: \"stop_grace_period\"\n    number: 9\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".google.protobuf.Duration\"\n    json_name: \"stopGracePeriod\"\n  }\n  field {\n    name: \"pull_options\"\n    number: 10\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".docker.swarmkit.v1.ContainerSpec.PullOptions\"\n    json_name: \"pullOptions\"\n  }\n  field {\n    name: \"secrets\"\n    number: 12\n```\n\n----------------------------------------\n\nTITLE: Opening bbolt Database with Timeout in Go\nDESCRIPTION: Go code showing how to open a bbolt database with a timeout option to prevent indefinite waits.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/go.etcd.io/bbolt/README.md#2025-04-10_snippet_5\n\nLANGUAGE: go\nCODE:\n```\ndb, err := bolt.Open(\"my.db\", 0600, &bolt.Options{Timeout: 1 * time.Second})\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Runtimes with Command Line Arguments\nDESCRIPTION: Example of registering multiple runtimes via the Docker daemon command line. This method doesn't support defining runtime arguments, unlike the configuration file approach.\nSOURCE: https://github.com/moby/moby/blob/master/man/dockerd.8.md#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo dockerd --add-runtime runc=runc --add-runtime custom=/usr/local/bin/my-runc-replacement\n```\n\n----------------------------------------\n\nTITLE: Defining ClusterSnapshot and Snapshot Types in Docker SwarmKit\nDESCRIPTION: Protocol buffer definitions for ClusterSnapshot and Snapshot message types that represent the complete state of a Docker SwarmKit cluster, including membership information and stored objects.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/moby/swarmkit/v2/api/api.pb.txt#2025-04-10_snippet_130\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage_type {\n  name: \"ClusterSnapshot\"\n  field {\n    name: \"members\"\n    number: 1\n    label: LABEL_REPEATED\n    type: TYPE_MESSAGE\n    type_name: \".docker.swarmkit.v1.RaftMember\"\n    json_name: \"members\"\n  }\n  field {\n    name: \"removed\"\n    number: 2\n    label: LABEL_REPEATED\n    type: TYPE_UINT64\n    options {\n      packed: false\n    }\n    json_name: \"removed\"\n  }\n}\nmessage_type {\n  name: \"Snapshot\"\n  field {\n    name: \"version\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_ENUM\n    type_name: \".docker.swarmkit.v1.Snapshot.Version\"\n    json_name: \"version\"\n  }\n  field {\n    name: \"membership\"\n    number: 2\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".docker.swarmkit.v1.ClusterSnapshot\"\n    options {\n      65001: 0\n    }\n    json_name: \"membership\"\n  }\n  field {\n    name: \"store\"\n    number: 3\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".docker.swarmkit.v1.StoreSnapshot\"\n    options {\n      65001: 0\n    }\n    json_name: \"store\"\n  }\n  enum_type {\n    name: \"Version\"\n    value {\n      name: \"V0\"\n      number: 0\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Context Support for slog in Go\nDESCRIPTION: This snippet introduces functions for storing and retrieving slog.Logger pointers in a context.Context. It explains how these functions interoperate with logr.Logger and provide efficient contextual logging.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/go-logr/logr/README.md#2025-04-10_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n// Example usage:\nNewContextWithSlogLogger(ctx, slogLogger)\nFromContextAsSlogLogger(ctx)\n```\n\n----------------------------------------\n\nTITLE: Updating Span Error Recording in Go\nDESCRIPTION: Changes the behavior of RecordError to comply with semantic conventions by recording an 'exception' event.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-10_snippet_33\n\nLANGUAGE: Go\nCODE:\n```\nSpan `RecordError` now records an `exception` event to comply with the semantic convention specification.\n```\n\n----------------------------------------\n\nTITLE: Shell Script for Testing Gitignore Behavior\nDESCRIPTION: This shell script creates a test directory structure, initializes a git repository, and sets up a .gitignore file to demonstrate the expected behavior of excluding 'parse.go' files globally. It's used to compare the behavior of go-pathspec with git's native implementation.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/shibumi/go-pathspec/README.md#2025-04-10_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmkdir -p /tmp/test/internal/util\ntouch /tmp/test/internal/util/parse.go\ncd /tmp/test/\ngit init\necho \"parse.go\" > .gitignore\n```\n\n----------------------------------------\n\nTITLE: Configuring SNAT and Redirection to IPVS in Ingress_sbox Namespace\nDESCRIPTION: This iptables rule in the ingress_sbox namespace's nat PREROUTING chain redirects service requests to IPVS for load balancing. It performs Source NAT for any traffic destined to the overlay network (10.255.0.0/16).\nSOURCE: https://github.com/moby/moby/blob/master/libnetwork/docs/network.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nSNAT  all  --  anywhere 10.255.0.0/16  ipvs to:10.255.0.2\n```\n\n----------------------------------------\n\nTITLE: Proposing Raft Configuration Changes in Go\nDESCRIPTION: Demonstrates how to propose configuration changes to add or remove nodes from the cluster.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/go.etcd.io/etcd/raft/v3/README.md#2025-04-10_snippet_7\n\nLANGUAGE: go\nCODE:\n```\n\tn.ProposeConfChange(ctx, cc)\n```\n\n----------------------------------------\n\nTITLE: Memory OOM Control Message Definition in Protobuf\nDESCRIPTION: Defines the structure for memory out-of-memory control metrics including OOM kill disable status, under OOM state, and OOM kill count.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/containerd/cgroups/v3/cgroup1/stats/metrics.pb.txt#2025-04-10_snippet_1\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage_type {\n  name: \"MemoryOomControl\"\n  field {\n    name: \"oom_kill_disable\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_UINT64\n    json_name: \"oomKillDisable\"\n  }\n  field {\n    name: \"under_oom\"\n    number: 2\n    label: LABEL_OPTIONAL\n    type: TYPE_UINT64\n    json_name: \"underOom\"\n  }\n  field {\n    name: \"oom_kill\"\n    number: 3\n    label: LABEL_OPTIONAL\n    type: TYPE_UINT64\n    json_name: \"oomKill\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating to Trace Client Server Interceptor in Go\nDESCRIPTION: Updates the implementation of the gRPC server interceptor to use a method from the trace.Client instance instead of a global function.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/cloud.google.com/go/CHANGES.md#2025-04-10_snippet_21\n\nLANGUAGE: go\nCODE:\n```\ns := grpc.NewServer(grpc.UnaryInterceptor(trace.GRPCServerInterceptor(tc)))\n```\n\nLANGUAGE: go\nCODE:\n```\ns := grpc.NewServer(grpc.UnaryInterceptor(tc.GRPCServerInterceptor()))\n```\n\n----------------------------------------\n\nTITLE: Container Process List Response in Docker API\nDESCRIPTION: JSON response showing processes running inside a container. The response includes column titles and process details including user ID, PID, command, and other process information.\nSOURCE: https://github.com/moby/moby/blob/master/docs/api/v1.24.md#2025-04-10_snippet_17\n\nLANGUAGE: JSON\nCODE:\n```\n{\n   \"Titles\" : [\n     \"UID\", \"PID\", \"PPID\", \"C\", \"STIME\", \"TTY\", \"TIME\", \"CMD\"\n   ],\n   \"Processes\" : [\n     [\n       \"root\", \"13642\", \"882\", \"0\", \"17:03\", \"pts/0\", \"00:00:00\", \"/bin/bash\"\n     ],\n     [\n       \"root\", \"13735\", \"13642\", \"0\", \"17:06\", \"pts/0\", \"00:00:00\", \"sleep 10\"\n     ]\n   ]\n}\n```\n\n----------------------------------------\n\nTITLE: Running BuildKit with Containerd Exporter\nDESCRIPTION: Example showing how to build and export an image to containerd using buildctl with the image exporter option.\nSOURCE: https://github.com/moby/moby/blob/master/reports/builder/2017-07-17.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo run ./examples/buildkit2/buildkit.go | buildctl build --exporter image --exporter-opt name=docker.io/moby/buildkit:dev\n```\n\n----------------------------------------\n\nTITLE: Running the aliasfix Migration Tool for Go-Genproto to Google-Cloud-Go\nDESCRIPTION: Commands to run the aliasfix migration tool which automatically updates import statements for the migration from go-genproto to google-cloud-go. The tool scans the current directory and updates import paths, followed by a go mod tidy to clean up dependencies.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/cloud.google.com/go/migration.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo run cloud.google.com/go/internal/aliasfix/cmd/aliasfix@latest .\ngo mod tidy\n```\n\n----------------------------------------\n\nTITLE: Implementing DPanic Logging in Go\nDESCRIPTION: Example of code that could be replaced with Zap's DPanic level for logging errors that shouldn't occur in production without crashing.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/go.uber.org/zap/FAQ.md#2025-04-10_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nif err != nil {\n  panic(fmt.Sprintf(\"shouldn't ever get here: %v\", err))\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Block Device Information Using Both /proc and /sys in Go\nDESCRIPTION: Shows how to initialize a filesystem that requires both proc and sys mountpoints for gathering block device statistics. This example specifically demonstrates accessing disk statistics.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/prometheus/procfs/README.md#2025-04-10_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n    fs, err := blockdevice.NewFS(\"/proc\", \"/sys\")\n    stats, err := fs.ProcDiskstats()\n```\n\n----------------------------------------\n\nTITLE: Running Docker Daemon with Debugger Attached\nDESCRIPTION: Command to run the Docker daemon through a script, which will pause execution and wait for a debugger to attach.\nSOURCE: https://github.com/moby/moby/blob/master/docs/contributing/debug.md#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ ./hack/make.sh run\n```\n\n----------------------------------------\n\nTITLE: Defining ConfigSpec Message in Protocol Buffers for Docker Swarmkit v1\nDESCRIPTION: This snippet defines the ConfigSpec message type, which includes fields for configuration data such as annotations and binary data in a Docker Swarm.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/moby/swarmkit/v2/api/api.pb.txt#2025-04-10_snippet_71\n\nLANGUAGE: Protocol Buffers\nCODE:\n```\nmessage_type {\n  name: \"ConfigSpec\"\n  field {\n    name: \"annotations\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".docker.swarmkit.v1.Annotations\"\n    options {\n      65001: 0\n    }\n    json_name: \"annotations\"\n  }\n  field {\n    name: \"data\"\n    number: 2\n    label: LABEL_OPTIONAL\n    type: TYPE_BYTES\n    json_name: \"data\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Systemd cgroup (v2)\nDESCRIPTION: Creates a new systemd v2 cgroup slice with path 'my.slice/my-cgroup.slice/my-cgroup-abc.slice'. Uses a dummy PID of -1 for creating a general slice as a parent cgroup.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/containerd/cgroups/v3/README.md#2025-04-10_snippet_15\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"github.com/containerd/cgroups/v3/cgroup2\"\n    specs \"github.com/opencontainers/runtime-spec/specs-go\"\n)\n\nres := cgroup2.Resources{}\n// dummy PID of -1 is used for creating a \"general slice\" to be used as a parent cgroup.\n// see https://github.com/containerd/cgroups/blob/1df78138f1e1e6ee593db155c6b369466f577651/v2/manager.go#L732-L735\nm, err := cgroup2.NewSystemd(\"/\", \"my-cgroup-abc.slice\", -1, &res)\nif err != nil {\n\treturn err\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Snapshot Types in Docker SwarmKit\nDESCRIPTION: Protocol buffer definitions for snapshot-related message types in Docker SwarmKit. These types are used to store and manage the state of the cluster, including all nodes, services, tasks, and other resources.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/moby/swarmkit/v2/api/api.pb.txt#2025-04-10_snippet_129\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage_type {\n  name: \"StoreSnapshot\"\n  field {\n    name: \"nodes\"\n    number: 1\n    label: LABEL_REPEATED\n    type: TYPE_MESSAGE\n    type_name: \".docker.swarmkit.v1.Node\"\n    json_name: \"nodes\"\n  }\n  field {\n    name: \"services\"\n    number: 2\n    label: LABEL_REPEATED\n    type: TYPE_MESSAGE\n    type_name: \".docker.swarmkit.v1.Service\"\n    json_name: \"services\"\n  }\n  field {\n    name: \"networks\"\n    number: 3\n    label: LABEL_REPEATED\n    type: TYPE_MESSAGE\n    type_name: \".docker.swarmkit.v1.Network\"\n    json_name: \"networks\"\n  }\n  field {\n    name: \"tasks\"\n    number: 4\n    label: LABEL_REPEATED\n    type: TYPE_MESSAGE\n    type_name: \".docker.swarmkit.v1.Task\"\n    json_name: \"tasks\"\n  }\n  field {\n    name: \"clusters\"\n    number: 5\n    label: LABEL_REPEATED\n    type: TYPE_MESSAGE\n    type_name: \".docker.swarmkit.v1.Cluster\"\n    json_name: \"clusters\"\n  }\n  field {\n    name: \"secrets\"\n    number: 6\n    label: LABEL_REPEATED\n    type: TYPE_MESSAGE\n    type_name: \".docker.swarmkit.v1.Secret\"\n    json_name: \"secrets\"\n  }\n  field {\n    name: \"resources\"\n    number: 7\n    label: LABEL_REPEATED\n    type: TYPE_MESSAGE\n    type_name: \".docker.swarmkit.v1.Resource\"\n    json_name: \"resources\"\n  }\n  field {\n    name: \"extensions\"\n    number: 8\n    label: LABEL_REPEATED\n    type: TYPE_MESSAGE\n    type_name: \".docker.swarmkit.v1.Extension\"\n    json_name: \"extensions\"\n  }\n  field {\n    name: \"configs\"\n    number: 9\n    label: LABEL_REPEATED\n    type: TYPE_MESSAGE\n    type_name: \".docker.swarmkit.v1.Config\"\n    json_name: \"configs\"\n  }\n  field {\n    name: \"volumes\"\n    number: 10\n    label: LABEL_REPEATED\n    type: TYPE_MESSAGE\n    type_name: \".docker.swarmkit.v1.Volume\"\n    json_name: \"volumes\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Recording Stats Measurements\nDESCRIPTION: Shows how to record measurements with OpenCensus stats using the Record method\nSOURCE: https://github.com/moby/moby/blob/master/vendor/go.opencensus.io/README.md#2025-04-10_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nstats.Record(ctx, videoSize.M(102478))\n```\n\n----------------------------------------\n\nTITLE: Create Network Request in Remote Driver Protocol\nDESCRIPTION: LibNetwork sends a request to create a network, including network ID, IP addressing data, and options.\nSOURCE: https://github.com/moby/moby/blob/master/libnetwork/docs/remote.md#2025-04-10_snippet_4\n\nLANGUAGE: JSON\nCODE:\n```\n{\n\t\t\"NetworkID\": string,\n\t\t\"IPv4Data\" : [\n\t\t{\n\t\t\t\"AddressSpace\": string,\n\t\t\t\"Pool\": ipv4-cidr-string,\n\t\t\t\"Gateway\" : ipv4-cidr-string,\n\t\t\t\"AuxAddresses\": {\n\t\t\t\t\"<identifier1>\" : \"<ipv4-address1>\",\n\t\t\t\t\"<identifier2>\" : \"<ipv4-address2>\",\n\t\t\t\t...\n\t\t\t}\n\t\t},\n\t\t],\n\t\t\"IPv6Data\" : [\n\t\t{\n\t\t\t\"AddressSpace\": string,\n\t\t\t\"Pool\": ipv6-cidr-string,\n\t\t\t\"Gateway\" : ipv6-cidr-string,\n\t\t\t\"AuxAddresses\": {\n\t\t\t\t\"<identifier1>\" : \"<ipv6-address1>\",\n\t\t\t\t\"<identifier2>\" : \"<ipv6-address2>\",\n\t\t\t\t...\n\t\t\t}\n\t\t},\n\t\t],\n\t\t\"Options\": {\n\t\t\t...\n\t\t}\n    }\n```\n\n----------------------------------------\n\nTITLE: Verifying Content with Digest in Go\nDESCRIPTION: Shows how to verify content using a previously created digest. This snippet compares the digest of new content with an existing identifier to check if the content has changed.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/opencontainers/go-digest/README.md#2025-04-10_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nif id != digest.FromBytes([]byte(\"my content\")) {\n  return errors.New(\"the content has changed!\")\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Interactive Docker Containers with Macvlan Network\nDESCRIPTION: Launches two Docker containers with Alpine Linux that connect to a Macvlan network named 'macvlan40', allowing container-to-container communication.\nSOURCE: https://github.com/moby/moby/blob/master/libnetwork/docs/macvlan.md#2025-04-10_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --net=macvlan40 -it --name mcv_test5 --rm alpine /bin/sh\ndocker run --net=macvlan40 -it --name mcv_test6 --rm alpine /bin/sh\n```\n\n----------------------------------------\n\nTITLE: Adding New Node to Existing Raft Cluster in Go\nDESCRIPTION: Demonstrates how to start a new node that will join an existing cluster. The node is started with an empty peer list after being added via ProposeConfChange.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/go.etcd.io/etcd/raft/v3/README.md#2025-04-10_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n  // Create storage and config as shown above.\n  n := raft.StartNode(c, nil)\n```\n\n----------------------------------------\n\nTITLE: Delete Network Request in Remote Driver Protocol\nDESCRIPTION: LibNetwork sends a request to delete a network, providing the network ID.\nSOURCE: https://github.com/moby/moby/blob/master/libnetwork/docs/remote.md#2025-04-10_snippet_5\n\nLANGUAGE: JSON\nCODE:\n```\n{\n\t\t\"NetworkID\": string\n    }\n```\n\n----------------------------------------\n\nTITLE: Creating a Routed-Mode Network and Running a Container with Published Port\nDESCRIPTION: Commands to create a Docker network in routed gateway mode with a specific subnet and gateway, then run a container on this network with a port mapping from host port 8080 to container port 80.\nSOURCE: https://github.com/moby/moby/blob/master/integration/network/bridge/iptablesdoc/templates/usernet-portmap-routed.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker network create \\\n  -o com.docker.network.bridge.name=bridge1 \\\n  -o com.docker.network.bridge.gateway_mode_ipv4=routed \\\n  --subnet 192.0.2.0/24 --gateway 192.0.2.1 bridge1\ndocker run --network bridge1 -p 8080:80 --name c1 busybox\n```\n\n----------------------------------------\n\nTITLE: Container Process List with Custom Format Response\nDESCRIPTION: JSON response for a process list using custom 'ps' arguments. This example shows processes with the 'aux' format, which includes additional columns like CPU and memory usage percentages.\nSOURCE: https://github.com/moby/moby/blob/master/docs/api/v1.24.md#2025-04-10_snippet_19\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"Titles\" : [\n    \"USER\",\"PID\",\"%CPU\",\"%MEM\",\"VSZ\",\"RSS\",\"TTY\",\"STAT\",\"START\",\"TIME\",\"COMMAND\"\n  ]\n  \"Processes\" : [\n    [\n      \"root\",\"13642\",\"0.0\",\"0.1\",\"18172\",\"3184\",\"pts/0\",\"Ss\",\"17:03\",\"0:00\",\"/bin/bash\"\n    ],\n    [\n      \"root\",\"13895\",\"0.0\",\"0.0\",\"4348\",\"692\",\"pts/0\",\"S+\",\"17:15\",\"0:00\",\"sleep 10\"\n    ]\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Set Membership in Go\nDESCRIPTION: Demonstrates using the Contains method to check if a specific element exists in a set. The example checks if \"cooking\" is considered a science class.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/deckarep/golang-set/v2/README.md#2025-04-10_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nresult := sciences.Contains(\"cooking\")\nfmt.Println(result)\n```\n\n----------------------------------------\n\nTITLE: Defining NetworkSpec Message in Protocol Buffers for Docker Swarmkit v1\nDESCRIPTION: This snippet defines the NetworkSpec message type, which includes fields for network configuration such as driver settings, IPv6 enablement, IPAM options, and network attachability in a Docker Swarm.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/moby/swarmkit/v2/api/api.pb.txt#2025-04-10_snippet_68\n\nLANGUAGE: Protocol Buffers\nCODE:\n```\nmessage_type {\n  name: \"NetworkSpec\"\n  field {\n    name: \"annotations\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".docker.swarmkit.v1.Annotations\"\n    options {\n      65001: 0\n    }\n    json_name: \"annotations\"\n  }\n  // ... (additional fields omitted for brevity)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining IOEntry Message Type in Protocol Buffers\nDESCRIPTION: Defines the IOEntry message type with fields for major and minor device numbers, read and write bytes, and read and write I/O operations. This structure represents detailed I/O statistics for a device.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/containerd/cgroups/v3/cgroup2/stats/metrics.pb.txt#2025-04-10_snippet_4\n\nLANGUAGE: Protocol Buffers\nCODE:\n```\nmessage_type {\n  name: \"IOEntry\"\n  field {\n    name: \"major\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_UINT64\n    json_name: \"major\"\n  }\n  field {\n    name: \"minor\"\n    number: 2\n    label: LABEL_OPTIONAL\n    type: TYPE_UINT64\n    json_name: \"minor\"\n  }\n  field {\n    name: \"rbytes\"\n    number: 3\n    label: LABEL_OPTIONAL\n    type: TYPE_UINT64\n    json_name: \"rbytes\"\n  }\n  field {\n    name: \"wbytes\"\n    number: 4\n    label: LABEL_OPTIONAL\n    type: TYPE_UINT64\n    json_name: \"wbytes\"\n  }\n  field {\n    name: \"rios\"\n    number: 5\n    label: LABEL_OPTIONAL\n    type: TYPE_UINT64\n    json_name: \"rios\"\n  }\n  field {\n    name: \"wios\"\n    number: 6\n    label: LABEL_OPTIONAL\n    type: TYPE_UINT64\n    json_name: \"wios\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing klog Flags in Go\nDESCRIPTION: Demonstrates how to initialize klog flags explicitly, which is required as klog no longer uses init() to register flags.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/k8s.io/klog/v2/README.md#2025-04-10_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nklog.InitFlags(nil)\n```\n\n----------------------------------------\n\nTITLE: Connecting to Local Syslog with srslog\nDESCRIPTION: Demonstrates how to establish a connection to a local syslog server using the srslog library. This creates a writer for logging to the local syslog daemon with the specified priority and tag.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/RackSec/srslog/README.md#2025-04-10_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nw, err := syslog.Dial(\"\", \"\", syslog.LOG_ERR, \"testtag\")\n```\n\n----------------------------------------\n\nTITLE: Converting Markdown to Manpage Using Shell Redirection\nDESCRIPTION: Example showing how to convert a markdown file to a manpage using shell input/output redirection.\nSOURCE: https://github.com/moby/moby/blob/master/man/vendor/github.com/cpuguy83/go-md2man/v2/go-md2man.1.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo-md2man < go-md2man.1.md > go-md2man.1\n```\n\n----------------------------------------\n\nTITLE: Defining CAConfig Message in Protocol Buffers\nDESCRIPTION: Defines a message type 'CAConfig' with fields for node certificate expiry, external CAs, signing CA certificate and key, and force rotate. This is used for Certificate Authority configuration in Docker SwarmKit.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/moby/swarmkit/v2/api/api.pb.txt#2025-04-10_snippet_51\n\nLANGUAGE: Protocol Buffers\nCODE:\n```\nmessage_type {\n  name: \"CAConfig\"\n  field {\n    name: \"node_cert_expiry\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".google.protobuf.Duration\"\n    json_name: \"nodeCertExpiry\"\n  }\n  field {\n    name: \"external_cas\"\n    number: 2\n    label: LABEL_REPEATED\n    type: TYPE_MESSAGE\n    type_name: \".docker.swarmkit.v1.ExternalCA\"\n    options {\n      65004: \"ExternalCAs\"\n    }\n    json_name: \"externalCas\"\n  }\n  field {\n    name: \"signing_ca_cert\"\n    number: 3\n    label: LABEL_OPTIONAL\n    type: TYPE_BYTES\n    options {\n      65004: \"SigningCACert\"\n    }\n    json_name: \"signingCaCert\"\n  }\n  field {\n    name: \"signing_ca_key\"\n    number: 4\n    label: LABEL_OPTIONAL\n    type: TYPE_BYTES\n    options {\n      65004: \"SigningCAKey\"\n    }\n    json_name: \"signingCaKey\"\n  }\n  field {\n    name: \"force_rotate\"\n    number: 5\n    label: LABEL_OPTIONAL\n    type: TYPE_UINT64\n    json_name: \"forceRotate\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Network Attachment Message Types in Docker SwarmKit\nDESCRIPTION: Protocol buffer definitions for message types used in network attachment operations within Docker SwarmKit. These types handle the attachment and detachment of containers to networks in the swarm.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/moby/swarmkit/v2/api/api.pb.txt#2025-04-10_snippet_127\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage_type {\n  name: \"AttachNetworkRequest\"\n  field {\n    name: \"config\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".docker.swarmkit.v1.NetworkAttachmentConfig\"\n    json_name: \"config\"\n  }\n  field {\n    name: \"container_id\"\n    number: 2\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"containerId\"\n  }\n}\nmessage_type {\n  name: \"AttachNetworkResponse\"\n  field {\n    name: \"attachment_id\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"attachmentId\"\n  }\n}\nmessage_type {\n  name: \"DetachNetworkRequest\"\n  field {\n    name: \"attachment_id\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"attachmentId\"\n  }\n}\nmessage_type {\n  name: \"DetachNetworkResponse\"\n}\n```\n\n----------------------------------------\n\nTITLE: Compressing Data with Huff0 in Go\nDESCRIPTION: This snippet demonstrates how to compress data using the Huff0 package. It shows the two main compression functions, Compress1X and Compress4X, and explains the possible error values that can be returned.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/klauspost/compress/huff0/README.md#2025-04-10_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nCompress1X(input []byte) ([]byte, error)\nCompress4X(input []byte) ([]byte, error)\n\n// Possible error values:\n// nil: Everything ok, output is returned\n// ErrIncompressible: Input is judged to be too hard to compress\n// ErrUseRLE: Input is a single byte value repeated\n// ErrTooBig: Input block exceeds the maximum allowed size (128 Kib)\n// (error): An internal error occurred\n```\n\n----------------------------------------\n\nTITLE: Defining WatchRequest Message in Docker SwarmKit Protobuf\nDESCRIPTION: Defines a WatchRequest message type used for subscribing to object changes in Docker SwarmKit. It includes fields for specifying which entries to watch, version information for resuming, and optional flags for including old object state.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/moby/swarmkit/v2/api/api.pb.txt#2025-04-10_snippet_134\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage_type {\n  name: \"WatchRequest\"\n  field {\n    name: \"entries\"\n    number: 1\n    label: LABEL_REPEATED\n    type: TYPE_MESSAGE\n    type_name: \".docker.swarmkit.v1.WatchRequest.WatchEntry\"\n    json_name: \"entries\"\n  }\n  field {\n    name: \"resume_from\"\n    number: 2\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".docker.swarmkit.v1.Version\"\n    json_name: \"resumeFrom\"\n  }\n  field {\n    name: \"include_old_object\"\n    number: 3\n    label: LABEL_OPTIONAL\n    type: TYPE_BOOL\n    json_name: \"includeOldObject\"\n  }\n  nested_type {\n    name: \"WatchEntry\"\n    field {\n      name: \"kind\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"kind\"\n    }\n    field {\n      name: \"action\"\n      number: 2\n      label: LABEL_OPTIONAL\n      type: TYPE_ENUM\n      type_name: \".docker.swarmkit.v1.WatchActionKind\"\n      json_name: \"action\"\n    }\n    field {\n      name: \"filters\"\n      number: 3\n      label: LABEL_REPEATED\n      type: TYPE_MESSAGE\n      type_name: \".docker.swarmkit.v1.SelectBy\"\n      json_name: \"filters\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Set Union Operation in Go\nDESCRIPTION: Shows how to create a union of multiple sets to combine all unique classes across different categories. Demonstrates automatic deduplication of set elements.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/deckarep/golang-set/v2/README.md#2025-04-10_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n  all := required\n    .Union(sciences)\n    .Union(electives)\n    .Union(bonus)\n  \n  fmt.Println(all)\n```\n\n----------------------------------------\n\nTITLE: Defining ServiceSpec Message in Protocol Buffers\nDESCRIPTION: Defines the ServiceSpec message type, which includes fields for service annotations, task specifications, service mode (replicated, global, job), update and rollback configurations, and endpoint specifications. This structure is used to configure and manage services in a Docker Swarm cluster.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/moby/swarmkit/v2/api/api.pb.txt#2025-04-10_snippet_63\n\nLANGUAGE: Protocol Buffers\nCODE:\n```\nmessage_type {\n  name: \"ServiceSpec\"\n  field {\n    name: \"annotations\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".docker.swarmkit.v1.Annotations\"\n    options {\n      65001: 0\n    }\n    json_name: \"annotations\"\n  }\n  field {\n    name: \"task\"\n    number: 2\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".docker.swarmkit.v1.TaskSpec\"\n    options {\n      65001: 0\n    }\n    json_name: \"task\"\n  }\n  field {\n    name: \"replicated\"\n    number: 3\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".docker.swarmkit.v1.ReplicatedService\"\n    oneof_index: 0\n    json_name: \"replicated\"\n  }\n  field {\n    name: \"global\"\n    number: 4\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".docker.swarmkit.v1.GlobalService\"\n    oneof_index: 0\n    json_name: \"global\"\n  }\n  field {\n    name: \"replicated_job\"\n    number: 10\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".docker.swarmkit.v1.ReplicatedJob\"\n    oneof_index: 0\n    json_name: \"replicatedJob\"\n  }\n  field {\n    name: \"global_job\"\n    number: 11\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".docker.swarmkit.v1.GlobalJob\"\n    oneof_index: 0\n    json_name: \"globalJob\"\n  }\n  field {\n    name: \"update\"\n    number: 6\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".docker.swarmkit.v1.UpdateConfig\"\n    json_name: \"update\"\n  }\n  field {\n    name: \"rollback\"\n    number: 9\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".docker.swarmkit.v1.UpdateConfig\"\n    json_name: \"rollback\"\n  }\n  field {\n    name: \"networks\"\n    number: 7\n    label: LABEL_REPEATED\n    type: TYPE_MESSAGE\n    type_name: \".docker.swarmkit.v1.NetworkAttachmentConfig\"\n    options {\n      deprecated: true\n    }\n    json_name: \"networks\"\n  }\n  field {\n    name: \"endpoint\"\n    number: 8\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".docker.swarmkit.v1.EndpointSpec\"\n    json_name: \"endpoint\"\n  }\n  oneof_decl {\n    name: \"mode\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Manually Creating and Using VLAN Sub-interfaces for Docker Macvlan Networks\nDESCRIPTION: This example shows how to manually create VLAN sub-interfaces and use them with Docker Macvlan networks. It covers creating interfaces with standard and custom naming conventions.\nSOURCE: https://github.com/moby/moby/blob/master/libnetwork/docs/macvlan.md#2025-04-10_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n# create a new sub-interface tied to dot1q vlan 40\nip link add link eth0 name eth0.40 type vlan id 40\n\n# enable the new sub-interface\nip link set eth0.40 up\n\n# now add networks and hosts as you would normally by attaching to the master (sub)interface that is tagged\ndocker network create -d macvlan \\\n   --subnet=192.168.40.0/24 \\\n   --gateway=192.168.40.1 \\\n   -o parent=eth0.40 macvlan40\n\n# in two separate terminals, start a Docker container and the containers can now ping one another.\ndocker run --net=macvlan40 -it --name mcv_test5 --rm alpine /bin/sh\ndocker run --net=macvlan40 -it --name mcv_test6 --rm alpine /bin/sh\n\n# create a new sub interface tied to dot1q vlan 40\nip link add link eth0 name foo type vlan id 40\n\n# enable the new sub-interface\nip link set foo up\n\n# now add networks and hosts as you would normally by attaching to the master (sub)interface that is tagged\ndocker network create -d macvlan \\\n    --subnet=192.168.40.0/24 --gateway=192.168.40.1 \\\n    -o parent=foo macvlan40\n```\n\n----------------------------------------\n\nTITLE: Inspect Network API Request/Response\nDESCRIPTION: GET endpoint to inspect a specific network by ID or name. Returns detailed network configuration including IPAM, containers, and options.\nSOURCE: https://github.com/moby/moby/blob/master/docs/api/v1.24.md#2025-04-10_snippet_83\n\nLANGUAGE: http\nCODE:\n```\nGET /v1.24/networks/7d86d31b1478e7cca9ebed7e73aa0fdeec46c5ca29497431d3007d2d9e15ed99 HTTP/1.1\n```\n\nLANGUAGE: json\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Type: application/json\n\n{\n  \"Name\": \"net01\",\n  \"Id\": \"7d86d31b1478e7cca9ebed7e73aa0fdeec46c5ca29497431d3007d2d9e15ed99\",\n  \"Scope\": \"local\",\n  \"Driver\": \"bridge\",\n  \"EnableIPv6\": false,\n  \"IPAM\": {\n    \"Driver\": \"default\",\n    \"Config\": [\n      {\n        \"Subnet\": \"172.19.0.0/16\",\n        \"Gateway\": \"172.19.0.1\"\n      }\n    ],\n    \"Options\": {\n        \"foo\": \"bar\"\n    }\n  },\n  \"Internal\": false,\n  \"Containers\": {\n    \"19a4d5d687db25203351ed79d478946f861258f018fe384f229f2efa4b23513c\": {\n      \"Name\": \"test\",\n      \"EndpointID\": \"628cadb8bcb92de107b2a1e516cbffe463e321f548feb37697cce00ad694f21a\",\n      \"MacAddress\": \"02:42:ac:13:00:02\",\n      \"IPv4Address\": \"172.19.0.2/16\",\n      \"IPv6Address\": \"\"\n    }\n  },\n  \"Options\": {\n    \"com.docker.network.bridge.default_bridge\": \"true\",\n    \"com.docker.network.bridge.enable_icc\": \"true\",\n    \"com.docker.network.bridge.enable_ip_masquerade\": \"true\",\n    \"com.docker.network.bridge.host_binding_ipv4\": \"0.0.0.0\",\n    \"com.docker.network.bridge.name\": \"docker0\",\n    \"com.docker.network.driver.mtu\": \"1500\"\n  },\n  \"Labels\": {\n    \"com.example.some-label\": \"some-value\",\n    \"com.example.some-other-label\": \"some-other-value\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Response for Successful Docker Volumes Listing\nDESCRIPTION: HTTP response containing a list of Docker volumes, including details such as Name, Driver, Mountpoint, and Scope for each volume.\nSOURCE: https://github.com/moby/moby/blob/master/docs/api/v1.24.md#2025-04-10_snippet_79\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Volumes\": [\n    {\n      \"Name\": \"tardis\",\n      \"Driver\": \"local\",\n      \"Mountpoint\": \"/var/lib/docker/volumes/tardis\",\n      \"Labels\": null,\n      \"Scope\": \"local\"\n    }\n  ],\n  \"Warnings\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Tags in OpenCensus\nDESCRIPTION: Example showing how to create new tags in the current context using tag.New() with Insert and Upsert operations\nSOURCE: https://github.com/moby/moby/blob/master/vendor/go.opencensus.io/README.md#2025-04-10_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nctx, err := tag.New(ctx,\n\ttag.Insert(osKey, \"macOS-10.12.5\"),\n\ttag.Upsert(userIDKey, \"cde36753ed\"),\n)\nif err != nil {\n\tlog.Fatal(err)\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying BatchSpanProcessor Behavior in Go OpenTelemetry SDK\nDESCRIPTION: Updates ForceFlush method to abort after timeout or cancellation.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-10_snippet_37\n\nLANGUAGE: Go\nCODE:\n```\nModify `BatchSpanProcessor.ForceFlush` to abort after timeout/cancellation.\n```\n\n----------------------------------------\n\nTITLE: Creating a Conversion Chain for Go Structs\nDESCRIPTION: Shows how to create a conversion chain to transform between struct versions. The chain specifies the order of transformations from V1 to V2 to V3.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/anchore/go-struct-converter/README.md#2025-04-10_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nchain := converter.NewChain(V1{}, V2{}, V3{})\n```\n\n----------------------------------------\n\nTITLE: Performing a Range Scan on an Immutable Radix Tree in Go\nDESCRIPTION: This example illustrates how to perform a range scan on an immutable radix tree. It creates a tree with several key-value pairs and then iterates over a specific range of keys, demonstrating the ordered iteration capability of the radix tree.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/hashicorp/go-immutable-radix/README.md#2025-04-10_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// Create a tree\nr := iradix.New()\nr, _, _ = r.Insert([]byte(\"001\"), 1)\nr, _, _ = r.Insert([]byte(\"002\"), 2)\nr, _, _ = r.Insert([]byte(\"005\"), 5)\nr, _, _ = r.Insert([]byte(\"010\"), 10)\nr, _, _ = r.Insert([]byte(\"100\"), 10)\n\n// Range scan over the keys that sort lexicographically between [003, 050)\nit := r.Root().Iterator()\nit.SeekLowerBound([]byte(\"003\"))\nfor key, _, ok := it.Next(); ok; key, _, ok = it.Next() {\n  if key >= \"050\" {\n      break\n  }\n  fmt.Println(key)\n}\n// Output:\n//  005\n//  010\n```\n\n----------------------------------------\n\nTITLE: Testing TranslateText with Fake Server in Go\nDESCRIPTION: This test function sets up a fake translation server, creates a client connected to the fake server, and tests the TranslateTextWithConcreteClient function. It demonstrates how to use a fake gRPC server for testing purposes.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/cloud.google.com/go/testing.md#2025-04-10_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nimport (\n        \"context\"\n        \"net\"\n        \"testing\"\n\n        translate \"cloud.google.com/go/translate/apiv3\"\n        \"google.golang.org/api/option\"\n        translatepb \"google.golang.org/genproto/googleapis/cloud/translate/v3\"\n        \"google.golang.org/grpc\"\n)\n\nfunc TestTranslateTextWithConcreteClient(t *testing.T) {\n        ctx := context.Background()\n\n        // Setup the fake server.\n        fakeTranslationServer := &fakeTranslationServer{}\n        l, err := net.Listen(\"tcp\", \"localhost:0\")\n        if err != nil {\n                t.Fatal(err)\n        }\n        gsrv := grpc.NewServer()\n        translatepb.RegisterTranslationServiceServer(gsrv, fakeTranslationServer)\n        fakeServerAddr := l.Addr().String()\n        go func() {\n                if err := gsrv.Serve(l); err != nil {\n                        panic(err)\n                }\n        }()\n\n        // Create a client.\n        client, err := translate.NewTranslationClient(ctx,\n                option.WithEndpoint(fakeServerAddr),\n                option.WithoutAuthentication(),\n                option.WithGRPCDialOption(grpc.WithInsecure()),\n        )\n        if err != nil {\n                t.Fatal(err)\n        }\n\n        // Run the test.\n        text, err := TranslateTextWithConcreteClient(client, \"Hola Mundo\", \"en-US\")\n        if err != nil {\n                t.Fatal(err)\n        }\n        if text != \"Hello World\" {\n                t.Fatalf(\"got %q, want Hello World\", text)\n        }\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating duplicate lock acquisition in Go\nDESCRIPTION: Code snippet showing how taking the same lock twice in a goroutine can lead to deadlocks. This is another common source of deadlocks that the library can detect.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/sasha-s/go-deadlock/Readme.md#2025-04-10_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nA.Rlock() or lock()\n\nA.lock() or A.RLock()\n```\n\n----------------------------------------\n\nTITLE: Updating Storage Object Listing\nDESCRIPTION: New iterator-based pattern for listing objects in a bucket, replacing the direct List method.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/cloud.google.com/go/CHANGES.md#2025-04-10_snippet_28\n\nLANGUAGE: go\nCODE:\n```\nfor query != nil {\n    objs, err := bucket.List(d.ctx, query)\n    if err != nil { ... }\n    query = objs.Next\n    for _, obj := range objs.Results {\n        fmt.Println(obj)\n    }\n}\n```\n\nLANGUAGE: go\nCODE:\n```\niter := bucket.Objects(d.ctx, query)\nfor {\n    obj, err := iter.Next()\n    if err == iterator.Done {\n        break\n    }\n    if err != nil { ... }\n    fmt.Println(obj)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ContainerStatus Message in Protocol Buffers for Docker SwarmKit\nDESCRIPTION: This snippet defines a message 'ContainerStatus' for Docker SwarmKit, including fields for container_id, pid, and exit_code. The pid field is annotated with a PID option.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/moby/swarmkit/v2/api/api.pb.txt#2025-04-10_snippet_38\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage_type {\n  name: \"ContainerStatus\"\n  field {\n    name: \"container_id\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"containerId\"\n  }\n  field {\n    name: \"pid\"\n    number: 2\n    label: LABEL_OPTIONAL\n    type: TYPE_INT32\n    options {\n      65004: \"PID\"\n    }\n    json_name: \"pid\"\n  }\n  field {\n    name: \"exit_code\"\n    number: 3\n    label: LABEL_OPTIONAL\n    type: TYPE_INT32\n    json_name: \"exitCode\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Range Scanning with Immutable Radix Tree in Go\nDESCRIPTION: Shows how to perform a range scan over lexicographically ordered keys in an immutable radix tree, using an iterator with lower bound seeking.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/hashicorp/go-immutable-radix/v2/README.md#2025-04-10_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// Create a tree\nr := iradix.New[int]()\nr, _, _ = r.Insert([]byte(\"001\"), 1)\nr, _, _ = r.Insert([]byte(\"002\"), 2)\nr, _, _ = r.Insert([]byte(\"005\"), 5)\nr, _, _ = r.Insert([]byte(\"010\"), 10)\nr, _, _ = r.Insert([]byte(\"100\"), 10)\n\n// Range scan over the keys that sort lexicographically between [003, 050)\nit := r.Root().Iterator()\nit.SeekLowerBound([]byte(\"003\"))\nfor key, _, ok := it.Next(); ok; key, _, ok = it.Next() {\n  if string(key) >= \"050\" {\n      break\n  }\n  fmt.Println(string(key))\n}\n// Output:\n//  005\n//  010\n```\n\n----------------------------------------\n\nTITLE: Defining WatchMessage Message in Docker SwarmKit Protobuf\nDESCRIPTION: Defines a WatchMessage message type that contains event data sent in response to a watch request. It includes a list of events (with action types and object data) and version information for tracking changes.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/moby/swarmkit/v2/api/api.pb.txt#2025-04-10_snippet_135\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage_type {\n  name: \"WatchMessage\"\n  field {\n    name: \"events\"\n    number: 1\n    label: LABEL_REPEATED\n    type: TYPE_MESSAGE\n    type_name: \".docker.swarmkit.v1.WatchMessage.Event\"\n    json_name: \"events\"\n  }\n  field {\n    name: \"version\"\n    number: 2\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".docker.swarmkit.v1.Version\"\n    json_name: \"version\"\n  }\n  nested_type {\n    name: \"Event\"\n    field {\n      name: \"action\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_ENUM\n      type_name: \".docker.swarmkit.v1.WatchActionKind\"\n      json_name: \"action\"\n    }\n    field {\n      name: \"object\"\n      number: 2\n      label: LABEL_OPTIONAL\n      type: TYPE_MESSAGE\n      type_name: \".docker.swarmkit.v1.Object\"\n      json_name: \"object\"\n    }\n    field {\n      name: \"old_object\"\n      number: 3\n      label: LABEL_OPTIONAL\n      type: TYPE_MESSAGE\n      type_name: \".docker.swarmkit.v1.Object\"\n      json_name: \"oldObject\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Regenerating Protocol Buffer and Mock Files\nDESCRIPTION: Command for regenerating protocol buffer implementations and mock files using go generate. Requires protoc version 3.12.4 and various Go tools to be installed.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/google/certificate-transparency-go/README.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngo generate -x ./...\n```\n\n----------------------------------------\n\nTITLE: Dockerfile Commands Feature Proposals\nDESCRIPTION: Proposed new Dockerfile commands including IMPORT/EXPORT and environment-specific ARGs like DOCKEROS/DOCKERARCH. Also includes mount support and build context features.\nSOURCE: https://github.com/moby/moby/blob/master/reports/2017-06-12.md#2025-04-10_snippet_0\n\nLANGUAGE: dockerfile\nCODE:\n```\nIMPORT\nEXPORT\nDOCKEROS\nDOCKERARCH\nRUN --mount\n```\n\n----------------------------------------\n\nTITLE: Viewing Network Details from Container in Macvlan Network with Inferred Gateways\nDESCRIPTION: This snippet demonstrates how to view network details, including IP addresses and routing tables, from within a container running on a Macvlan network with inferred gateways.\nSOURCE: https://github.com/moby/moby/blob/master/libnetwork/docs/macvlan.md#2025-04-10_snippet_12\n\nLANGUAGE: plaintext\nCODE:\n```\n# Container eth0 output (the fe80::42:c0ff:fea8:8803/64 address is the local link addr)\nip address show eth0\n100: eth0@if2: <BROADCAST,MULTICAST,UP,LOWER_UP,M-DOWN> mtu 1500 qdisc noqueue state UNKNOWN\n    link/ether 02:42:c0:a8:88:03 brd ff:ff:ff:ff:ff:ff\n    inet 192.168.136.3/24 scope global eth0\n       valid_lft forever preferred_lft forever\n    inet6 fd11::3/64 scope global flags 02\n       valid_lft forever preferred_lft forever\n    inet6 fe80::42:c0ff:fea8:8803/64 scope link\n       valid_lft forever preferred_lft forever\n\n# IPv4 routing table from within the container\n$ ip route\ndefault via 192.168.136.1 dev eth0\n192.168.136.0/24 dev eth0  src 192.168.136.3\n\n# IPv6 routing table from within the container (the second v6 addresses is the local link addr)\n$ ip -6 route\nfd11::/64 dev eth0  metric 256\nfe80::/64 dev eth0  metric 256\ndefault via fd11::1 dev eth0  metric 1024\n```\n\n----------------------------------------\n\nTITLE: Implementing YAML Marshaling and Unmarshaling in Go\nDESCRIPTION: Demonstrates how to use the yaml.v2 package to marshal and unmarshal YAML data in Go. Shows both struct-based and map-based approaches with proper error handling. Includes examples of custom struct tags and flow style arrays.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/sigs.k8s.io/yaml/goyaml.v2/README.md#2025-04-10_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport (\n        \"fmt\"\n        \"log\"\n\n        \"gopkg.in/yaml.v2\"\n)\n\nvar data = `\na: Easy!\nb:\n  c: 2\n  d: [3, 4]\n`\n\n// Note: struct fields must be public in order for unmarshal to\n// correctly populate the data.\ntype T struct {\n        A string\n        B struct {\n                RenamedC int   `yaml:\"c\"`\n                D        []int `yaml:\",flow\"`\n        }\n}\n\nfunc main() {\n        t := T{}\n    \n        err := yaml.Unmarshal([]byte(data), &t)\n        if err != nil {\n                log.Fatalf(\"error: %v\", err)\n        }\n        fmt.Printf(\"--- t:\\n%v\\n\\n\", t)\n    \n        d, err := yaml.Marshal(&t)\n        if err != nil {\n                log.Fatalf(\"error: %v\", err)\n        }\n        fmt.Printf(\"--- t dump:\\n%s\\n\\n\", string(d))\n    \n        m := make(map[interface{}]interface{})\n    \n        err = yaml.Unmarshal([]byte(data), &m)\n        if err != nil {\n                log.Fatalf(\"error: %v\", err)\n        }\n        fmt.Printf(\"--- m:\\n%v\\n\\n\", m)\n    \n        d, err = yaml.Marshal(&m)\n        if err != nil {\n                log.Fatalf(\"error: %v\", err)\n        }\n        fmt.Printf(\"--- m dump:\\n%s\\n\\n\", string(d))\n}\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n--- t:\n{Easy! {2 [3 4]}}\n\n--- t dump:\na: Easy!\nb:\n  c: 2\n  d: [3, 4]\n\n\n--- m:\nmap[a:Easy! b:map[c:2 d:[3 4]]]\n\n--- m dump:\na: Easy!\nb:\n  c: 2\n  d:\n  - 3\n  - 4\n```\n\n----------------------------------------\n\nTITLE: Network Optimization Tasks in Markdown\nDESCRIPTION: A markdown formatted list detailing planned network optimization tasks including dynamic RTT discovery with improved ping/ack measurements and dynamic MTU discovery for better update handling.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/hashicorp/memberlist/todo.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# TODO\n* Dynamic RTT discovery\n    * Compute 99th percentile for ping/ack\n    * Better lower bound for ping/ack, faster failure detection\n* Dynamic MTU discovery\n    * Prevent lost updates, increases efficiency\n```\n\n----------------------------------------\n\nTITLE: Marking Service Traffic in Ingress_sbox Namespace\nDESCRIPTION: This iptables rule in the ingress_sbox namespace's mangle PREROUTING chain marks specific service traffic with a hexadecimal identifier. This mark is used later by IPVS for load balancing decisions.\nSOURCE: https://github.com/moby/moby/blob/master/libnetwork/docs/network.md#2025-04-10_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nMARK  tcp  --  anywhere anywhere  tcp dpt:30000 MARK set 0x100\n```\n\n----------------------------------------\n\nTITLE: Container Archive Path Info\nDESCRIPTION: JSON structure containing filesystem information about an archived resource in a container.\nSOURCE: https://github.com/moby/moby/blob/master/docs/api/v1.24.md#2025-04-10_snippet_49\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"root\",\n    \"size\": 4096,\n    \"mode\": 2147484096,\n    \"mtime\": \"2014-02-27T20:51:23Z\",\n    \"linkTarget\": \"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Killing a Container via HTTP Request\nDESCRIPTION: Example HTTP POST request to kill a container with ID 'e90e34656806'.\nSOURCE: https://github.com/moby/moby/blob/master/docs/api/v1.24.md#2025-04-10_snippet_34\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1.24/containers/e90e34656806/kill HTTP/1.1\n```\n\n----------------------------------------\n\nTITLE: Response for Successful Exec Instance Creation in Docker\nDESCRIPTION: HTTP response for a successful creation of an exec instance in a Docker container, returning the instance ID.\nSOURCE: https://github.com/moby/moby/blob/master/docs/api/v1.24.md#2025-04-10_snippet_74\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 201 Created\nContent-Type: application/json\n\n{\n     \"Id\": \"f90e34656806\",\n     \"Warnings\":[]\n}\n```\n\n----------------------------------------\n\nTITLE: SNAT for Load Balancing in Ingress_sbox Namespace\nDESCRIPTION: This iptables rule in the ingress_sbox namespace's nat POSTROUTING chain performs source NAT for service requests bound for the overlay network and forwards traffic to IPVS for load balancing.\nSOURCE: https://github.com/moby/moby/blob/master/libnetwork/docs/network.md#2025-04-10_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nSNAT all  --  0.0.0.0/0  10.255.0.0/16 ipvs to:10.255.0.2\n```\n\n----------------------------------------\n\nTITLE: Importing Hash Implementations in Go\nDESCRIPTION: Shows how to import necessary hash implementations to avoid panics when using the digest package. This snippet should be included in the main function or another entry point of the application.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/opencontainers/go-digest/README.md#2025-04-10_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    _ \"crypto/sha256\"\n    _ \"crypto/sha512\"\n)\n```\n\n----------------------------------------\n\nTITLE: Defining IpamConf Struct for Network IPAM Configuration in Go\nDESCRIPTION: Struct definition for IPAM configuration that includes preferred pool, subnet configuration, gateway, and auxiliary addresses. This structure is used when configuring networks with specific IP address requirements.\nSOURCE: https://github.com/moby/moby/blob/master/libnetwork/docs/ipam.md#2025-04-10_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// IpamConf contains all the ipam related configurations for a network\ntype IpamConf struct {\n\t// The master address pool for containers and network interfaces\n\tPreferredPool string\n\t// A subset of the master pool. If specified,\n\t// this becomes the container pool\n\tSubPool string\n\t// Input options for IPAM Driver (optional)\n\tOptions map[string]string\n\t// Preferred Network Gateway address (optional)\n\tGateway string\n\t// Auxiliary addresses for network driver. Must be within the master pool.\n\t// libnetwork will reserve them if they fall into the container pool\n\tAuxAddresses map[string]string\n}\n```\n\n----------------------------------------\n\nTITLE: Create Endpoint Response in Remote Driver Protocol\nDESCRIPTION: The remote driver responds to the create endpoint request with interface details.\nSOURCE: https://github.com/moby/moby/blob/master/libnetwork/docs/remote.md#2025-04-10_snippet_7\n\nLANGUAGE: JSON\nCODE:\n```\n{\n\t\t\"Interface\": {\n\t\t\t\"Address\": string,\n\t\t\t\"AddressIPv6\": string,\n\t\t\t\"MacAddress\": string\n\t\t}\n    }\n```\n\n----------------------------------------\n\nTITLE: Creating and Using an In-Memory Database with Go-memdb\nDESCRIPTION: This example demonstrates the complete workflow of using go-memdb. It shows how to define a data structure, create a schema with indexes, initialize the database, perform write transactions to insert data, and execute various read operations including exact lookups, full scans, and range queries.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/hashicorp/go-memdb/README.md#2025-04-10_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// Create a sample struct\ntype Person struct {\n\tEmail string\n\tName  string\n\tAge   int\n}\n\n// Create the DB schema\nschema := &memdb.DBSchema{\n\tTables: map[string]*memdb.TableSchema{\n\t\t\"person\": &memdb.TableSchema{\n\t\t\tName: \"person\",\n\t\t\tIndexes: map[string]*memdb.IndexSchema{\n\t\t\t\t\"id\": &memdb.IndexSchema{\n\t\t\t\t\tName:    \"id\",\n\t\t\t\t\tUnique:  true,\n\t\t\t\t\tIndexer: &memdb.StringFieldIndex{Field: \"Email\"},\n\t\t\t\t},\n\t\t\t\t\"age\": &memdb.IndexSchema{\n\t\t\t\t\tName:    \"age\",\n\t\t\t\t\tUnique:  false,\n\t\t\t\t\tIndexer: &memdb.IntFieldIndex{Field: \"Age\"},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n}\n\n// Create a new data base\ndb, err := memdb.NewMemDB(schema)\nif err != nil {\n\tpanic(err)\n}\n\n// Create a write transaction\ntxn := db.Txn(true)\n\n// Insert some people\npeople := []*Person{\n\t&Person{\"joe@aol.com\", \"Joe\", 30},\n\t&Person{\"lucy@aol.com\", \"Lucy\", 35},\n\t&Person{\"tariq@aol.com\", \"Tariq\", 21},\n\t&Person{\"dorothy@aol.com\", \"Dorothy\", 53},\n}\nfor _, p := range people {\n\tif err := txn.Insert(\"person\", p); err != nil {\n\t\tpanic(err)\n\t}\n}\n\n// Commit the transaction\ntxn.Commit()\n\n// Create read-only transaction\ntxn = db.Txn(false)\ndefer txn.Abort()\n\n// Lookup by email\nraw, err := txn.First(\"person\", \"id\", \"joe@aol.com\")\nif err != nil {\n\tpanic(err)\n}\n\n// Say hi!\nfmt.Printf(\"Hello %s!\\n\", raw.(*Person).Name)\n\n// List all the people\nit, err := txn.Get(\"person\", \"id\")\nif err != nil {\n\tpanic(err)\n}\n\nfmt.Println(\"All the people:\")\nfor obj := it.Next(); obj != nil; obj = it.Next() {\n\tp := obj.(*Person)\n\tfmt.Printf(\"  %s\\n\", p.Name)\n}\n\n// Range scan over people with ages between 25 and 35 inclusive\nit, err = txn.LowerBound(\"person\", \"age\", 25)\nif err != nil {\n\tpanic(err)\n}\n\nfmt.Println(\"People aged 25 - 35:\")\nfor obj := it.Next(); obj != nil; obj = it.Next() {\n\tp := obj.(*Person)\n\tif p.Age > 35 {\n\t\tbreak\n\t}\n\tfmt.Printf(\"  %s is aged %d\\n\", p.Name, p.Age)\n}\n// Output:\n// Hello Joe!\n// All the people:\n//   Dorothy\n//   Joe\n//   Lucy\n//   Tariq\n// People aged 25 - 35:\n//   Joe is aged 30\n//   Lucy is aged 35\n```\n\n----------------------------------------\n\nTITLE: Defining StoreActionKind Enum in SwarmKit Protobuf\nDESCRIPTION: Protocol Buffer definition for the StoreActionKind enum in Docker SwarmKit. This enumeration defines the kinds of actions that can be performed on the distributed store, starting with UNKNOWN and STORE_ACTION_CREATE.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/moby/swarmkit/v2/api/api.pb.txt#2025-04-10_snippet_124\n\nLANGUAGE: protobuf\nCODE:\n```\nenum_type {\n  name: \"StoreActionKind\"\n  value {\n    name: \"UNKNOWN\"\n    number: 0\n    options {\n      66001: \"StoreActionKindUnknown\"\n    }\n  }\n  value {\n    name: \"STORE_ACTION_CREATE\"\n    number: 1\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Unmarshaling TOML to Go struct\nDESCRIPTION: Demonstrates how to unmarshal a TOML document into a Go struct using the go-toml v2 library.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/pelletier/go-toml/v2/README.md#2025-04-10_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ndoc := `\nversion = 2\nname = \"go-toml\"\ntags = [\"go\", \"toml\"]\n`\n\nvar cfg MyConfig\nerr := toml.Unmarshal([]byte(doc), &cfg)\nif err != nil {\n\tpanic(err)\n}\nfmt.Println(\"version:\", cfg.Version)\nfmt.Println(\"name:\", cfg.Name)\nfmt.Println(\"tags:\", cfg.Tags)\n```\n\n----------------------------------------\n\nTITLE: Defining RestartPolicy Message in Protocol Buffers for Docker SwarmKit\nDESCRIPTION: This snippet defines a message 'RestartPolicy' for Docker SwarmKit, including fields for condition, delay, max attempts, and window. It also includes an enum 'RestartCondition' for specifying restart conditions.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/moby/swarmkit/v2/api/api.pb.txt#2025-04-10_snippet_35\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage_type {\n  name: \"RestartPolicy\"\n  field {\n    name: \"condition\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_ENUM\n    type_name: \".docker.swarmkit.v1.RestartPolicy.RestartCondition\"\n    json_name: \"condition\"\n  }\n  field {\n    name: \"delay\"\n    number: 2\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".google.protobuf.Duration\"\n    json_name: \"delay\"\n  }\n  field {\n    name: \"max_attempts\"\n    number: 3\n    label: LABEL_OPTIONAL\n    type: TYPE_UINT64\n    json_name: \"maxAttempts\"\n  }\n  field {\n    name: \"window\"\n    number: 4\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".google.protobuf.Duration\"\n    json_name: \"window\"\n  }\n  enum_type {\n    name: \"RestartCondition\"\n    value {\n      name: \"NONE\"\n      number: 0\n      options {\n        66001: \"RestartOnNone\"\n      }\n    }\n    value {\n      name: \"ON_FAILURE\"\n      number: 1\n      options {\n        66001: \"RestartOnFailure\"\n      }\n    }\n    value {\n      name: \"ANY\"\n      number: 2\n      options {\n        66001: \"RestartOnAny\"\n      }\n    }\n    options {\n      62001: 0\n      62023: \"RestartCondition\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Struct Merging in Go\nDESCRIPTION: Simple example demonstrating how to merge two structs using Mergo, where zero-value fields in the destination are populated from the source.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/dario.cat/mergo/README.md#2025-04-10_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"dario.cat/mergo\"\n)\n\ntype Foo struct {\n\tA string\n\tB int64\n}\n\nfunc main() {\n\tsrc := Foo{\n\t\tA: \"one\",\n\t\tB: 2,\n\t}\n\tdest := Foo{\n\t\tA: \"two\",\n\t}\n\tmergo.Merge(&dest, src)\n\tfmt.Println(dest)\n\t// Will print\n\t// {two 2}\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Docker Daemon Help Message\nDESCRIPTION: Edit the help message for the Docker daemon in the source code.\nSOURCE: https://github.com/moby/moby/blob/master/docs/contributing/set-up-dev-env.md#2025-04-10_snippet_14\n\nLANGUAGE: go\nCODE:\n```\nShort:         \"A self-sufficient and really fun runtime for containers.\",\n```\n\n----------------------------------------\n\nTITLE: Defining WatchSelectors Message in SwarmKit Protobuf\nDESCRIPTION: This snippet defines the WatchSelectors message type used for specifying watch criteria in SwarmKit's protobuf. It includes fields for various selectors like ID, name, service ID, node ID, and others.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/moby/swarmkit/v2/api/api.pb.txt#2025-04-10_snippet_73\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage WatchSelectors {\n  bool id = 1;\n  bool id_prefix = 2;\n  bool name = 3;\n  bool name_prefix = 4;\n  bool custom = 5;\n  bool custom_prefix = 6;\n  bool service_id = 7;\n  bool node_id = 8;\n  bool slot = 9;\n  bool desired_state = 10;\n  bool role = 11;\n  bool membership = 12;\n  bool kind = 13;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Multi-Subnet Macvlan Network with 802.1q Trunking\nDESCRIPTION: Creates a Macvlan network with multiple subnets (10.1.20.0/24 and 10.1.10.0/24) using VLAN ID 101. This example demonstrates creating, testing connectivity between containers on different subnets, and cleaning up containers and networks.\nSOURCE: https://github.com/moby/moby/blob/master/libnetwork/docs/macvlan.md#2025-04-10_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ndocker network create -d macvlan \\\n    --subnet=10.1.20.0/24 --subnet=10.1.10.0/24 \\\n    --gateway=10.1.20.1 --gateway=10.1.10.1 \\\n    -o parent=eth0.101 mcv101\n\n# View Links after to network create `ip link`\n$ ip link\n\n# Test 10.1.20.10.0/24 connectivity\ndocker run --net=mcv101 --ip=10.1.20.9 -itd alpine /bin/sh\ndocker run --net=mcv101 --ip=10.1.20.10 -it --rm alpine ping -c 4 10.1.20.10\n\n# Test 10.1.10.10.0/24 connectivity\ndocker run --net=mcv101 --ip=10.1.10.10 -itd alpine /bin/sh\ndocker run --net=mcv101 --ip=10.1.10.9 -it --rm alpine ping -c 4 10.1.10.10\n\n# Delete All Containers\ndocker rm -f `docker ps -qa`\n\n# Delete all Networks\ndocker network rm $(docker network ls -q)\n\n# Run ip links again and verify the links are cleaned up\nip link\n```\n\n----------------------------------------\n\nTITLE: Accessing BuildKit Images via Containerd\nDESCRIPTION: Commands demonstrating how to list, unpack, and run images built with BuildKit using the containerd CLI (ctr).\nSOURCE: https://github.com/moby/moby/blob/master/reports/builder/2017-07-17.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nctr --namespace buildkit images ls\nctr --namespace buildkit rootfs unpack <manifest-sha>\nctr --namespace buildkit run -t docker.io/moby/buildkit:dev id ash\n```\n\n----------------------------------------\n\nTITLE: Decompressing Huff0 Data in Go\nDESCRIPTION: This snippet shows how to decompress Huff0 encoded data. It involves initializing the decoding table with ReadTable and then using either Decompress1X or Decompress4X functions for decompression.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/klauspost/compress/huff0/README.md#2025-04-10_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nReadTable(input []byte) ([]byte, error)\nDecompress1X(input []byte) ([]byte, error)\nDecompress4X(input []byte) ([]byte, error)\n```\n\n----------------------------------------\n\nTITLE: Getting Stats with Ignored Missing Files (v1)\nDESCRIPTION: Retrieves cgroup statistics while ignoring non-existent metrics files, which is useful when some cgroup features are disabled in the kernel.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/containerd/cgroups/v3/README.md#2025-04-10_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nstats, err := control.Stat(cgroup1.IgnoreNotExist)\n```\n\n----------------------------------------\n\nTITLE: Updated Claims Interface Implementation in Go\nDESCRIPTION: New Claims interface definition showing the restructured getter methods for JWT claims validation. This interface replaces the previous Valid() error implementation with specific getters for standard JWT claims.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/golang-jwt/jwt/v5/MIGRATION_GUIDE.md#2025-04-10_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype Claims interface {\n\tGetExpirationTime() (*NumericDate, error)\n\tGetIssuedAt() (*NumericDate, error)\n\tGetNotBefore() (*NumericDate, error)\n\tGetIssuer() (string, error)\n\tGetSubject() (string, error)\n\tGetAudience() (ClaimStrings, error)\n}\n```\n\n----------------------------------------\n\nTITLE: Running the Docker Daemon\nDESCRIPTION: Basic command for running the Docker daemon (dockerd) as a service. The daemon should generally be run as root, with additional configuration placed in the daemon.json file.\nSOURCE: https://github.com/moby/moby/blob/master/project/PACKAGERS.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndockerd\n```\n\n----------------------------------------\n\nTITLE: Creating a cgroup with Systemd Slice Support (v1)\nDESCRIPTION: Creates a new cgroup integrated with systemd using slices, which provides better integration with the systemd service manager.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/containerd/cgroups/v3/README.md#2025-04-10_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ncontrol, err := cgroup1.New(cgroup1.Systemd, cgroup1.Slice(\"system.slice\", \"runc-test\"), &specs.LinuxResources{\n    CPU: &specs.CPU{\n        Shares: &shares,\n    },\n})\n```\n\n----------------------------------------\n\nTITLE: Importing Optimized Compression Packages in Go\nDESCRIPTION: Example of how to replace standard library imports with optimized versions from the compression library. This shows the mapping between old and new import paths for gzip, zlib, zip, and flate packages.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/klauspost/compress/README.md#2025-04-10_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\n| old import       | new import                            |\n|------------------|---------------------------------------|\n| `compress/gzip`  | `github.com/klauspost/compress/gzip`  |\n| `compress/zlib`  | `github.com/klauspost/compress/zlib`  |\n| `archive/zip`    | `github.com/klauspost/compress/zip`   |\n| `compress/flate` | `github.com/klauspost/compress/flate` |\n```\n\n----------------------------------------\n\nTITLE: Installing copystructure Go Library using go get\nDESCRIPTION: This command installs the copystructure library from GitHub using the standard go get command. It allows developers to add the library to their Go project for deep copying of values.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/mitchellh/copystructure/README.md#2025-04-10_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ go get github.com/mitchellh/copystructure\n```\n\n----------------------------------------\n\nTITLE: Defining StoreAction Message in SwarmKit Protobuf\nDESCRIPTION: Protocol Buffer definition for the StoreAction message in Docker SwarmKit. This message represents an action to be performed on the distributed store, with an action type and various possible target objects including nodes, services, tasks, networks, etc.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/moby/swarmkit/v2/api/api.pb.txt#2025-04-10_snippet_123\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage_type {\n  name: \"StoreAction\"\n  field {\n    name: \"action\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_ENUM\n    type_name: \".docker.swarmkit.v1.StoreActionKind\"\n    json_name: \"action\"\n  }\n  field {\n    name: \"node\"\n    number: 2\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".docker.swarmkit.v1.Node\"\n    oneof_index: 0\n    json_name: \"node\"\n  }\n  field {\n    name: \"service\"\n    number: 3\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".docker.swarmkit.v1.Service\"\n    oneof_index: 0\n    json_name: \"service\"\n  }\n  field {\n    name: \"task\"\n    number: 4\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".docker.swarmkit.v1.Task\"\n    oneof_index: 0\n    json_name: \"task\"\n  }\n  field {\n    name: \"network\"\n    number: 5\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".docker.swarmkit.v1.Network\"\n    oneof_index: 0\n    json_name: \"network\"\n  }\n  field {\n    name: \"cluster\"\n    number: 6\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".docker.swarmkit.v1.Cluster\"\n    oneof_index: 0\n    json_name: \"cluster\"\n  }\n  field {\n    name: \"secret\"\n    number: 7\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".docker.swarmkit.v1.Secret\"\n    oneof_index: 0\n    json_name: \"secret\"\n  }\n  field {\n    name: \"resource\"\n    number: 8\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".docker.swarmkit.v1.Resource\"\n    oneof_index: 0\n    json_name: \"resource\"\n  }\n  field {\n    name: \"extension\"\n    number: 9\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".docker.swarmkit.v1.Extension\"\n    oneof_index: 0\n    json_name: \"extension\"\n  }\n  field {\n    name: \"config\"\n    number: 10\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".docker.swarmkit.v1.Config\"\n    oneof_index: 0\n    json_name: \"config\"\n  }\n  field {\n    name: \"volume\"\n    number: 11\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".docker.swarmkit.v1.Volume\"\n    oneof_index: 0\n    json_name: \"volume\"\n  }\n  oneof_decl {\n    name: \"target\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Examining Network Namespaces and Interfaces\nDESCRIPTION: Commands to inspect network namespaces, create symlinks, and examine network interfaces within containers and overlay networks.\nSOURCE: https://github.com/moby/moby/blob/master/libnetwork/docs/vagrant.md#2025-04-10_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ docker inspect -f '{{ .NetworkSettings.SandboxKey}}' 6635a3822135\n$ sudo su\nroot@net-2:/var/run# ln -s /var/run/docker/netns netns\nroot@net-2:/var/run# ip netns show\nroot@net-2:/var/run/docker# ip netns exec 6635a3822135 ip addr show eth0\nroot@net-2:/var/run/docker# ip netns exec 8805e22ad6e2 ip -d link show\n```\n\n----------------------------------------\n\nTITLE: Implementing CORS Middleware with Gorilla Mux in Go\nDESCRIPTION: Example of using CORSMethodMiddleware to handle cross-origin requests with proper headers. The code sets up a router with CORS support for multiple HTTP methods and demonstrates a handler that sets the Access-Control-Allow-Origin header.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/gorilla/mux/README.md#2025-04-10_snippet_16\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"net/http\"\n\t\"github.com/gorilla/mux\"\n)\n\nfunc main() {\n    r := mux.NewRouter()\n\n    // IMPORTANT: you must specify an OPTIONS method matcher for the middleware to set CORS headers\n    r.HandleFunc(\"/foo\", fooHandler).Methods(http.MethodGet, http.MethodPut, http.MethodPatch, http.MethodOptions)\n    r.Use(mux.CORSMethodMiddleware(r))\n    \n    http.ListenAndServe(\":8080\", r)\n}\n\nfunc fooHandler(w http.ResponseWriter, r *http.Request) {\n    w.Header().Set(\"Access-Control-Allow-Origin\", \"*\")\n    if r.Method == http.MethodOptions {\n        return\n    }\n\n    w.Write([]byte(\"foo\"))\n}\n```\n\n----------------------------------------\n\nTITLE: Basic BitSet Usage Example in Go\nDESCRIPTION: Demonstrates core BitSet functionality including setting/clearing bits, chaining operations, and intersection testing using a card game example.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/bits-and-blooms/bitset/README.md#2025-04-10_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"math/rand\"\n\n\t\"github.com/bits-and-blooms/bitset\"\n)\n\nfunc main() {\n\tfmt.Printf(\"Hello from BitSet!\\n\")\n\tvar b bitset.BitSet\n\t// play some Go Fish\n\tfor i := 0; i < 100; i++ {\n\t\tcard1 := uint(rand.Intn(52))\n\t\tcard2 := uint(rand.Intn(52))\n\t\tb.Set(card1)\n\t\tif b.Test(card2) {\n\t\t\tfmt.Println(\"Go Fish!\")\n\t\t}\n\t\tb.Clear(card1)\n\t}\n\n\t// Chaining\n\tb.Set(10).Set(11)\n\n\tfor i, e := b.NextSet(0); e; i, e = b.NextSet(i + 1) {\n\t\tfmt.Println(\"The following bit is set:\", i)\n\t}\n\tif b.Intersection(bitset.New(100).Set(10)).Count() == 1 {\n\t\tfmt.Println(\"Intersection works.\")\n\t} else {\n\t\tfmt.Println(\"Intersection doesn't work???\")\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining RaftConfig Message in Protocol Buffers\nDESCRIPTION: Defines a message type 'RaftConfig' with fields for snapshot interval and keeping old snapshots. This is used for configuring Raft consensus in Docker SwarmKit.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/moby/swarmkit/v2/api/api.pb.txt#2025-04-10_snippet_55\n\nLANGUAGE: Protocol Buffers\nCODE:\n```\nmessage_type {\n  name: \"RaftConfig\"\n  field {\n    name: \"snapshot_interval\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_UINT64\n    json_name: \"snapshotInterval\"\n  }\n  field {\n    name: \"keep_old_snapshots\"\n    number: 2\n    label: LABEL_OPTIONAL\n    type: TYPE_UINT64\n    json_name: \"keepOldSnapshots\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Firestore Document in Go\nDESCRIPTION: This snippet demonstrates how to update a Firestore document using the new Update method, which replaces the deprecated UpdateMap and UpdateStruct methods. It shows how to update a nested field with a new value.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/cloud.google.com/go/CHANGES.md#2025-04-10_snippet_16\n\nLANGUAGE: go\nCODE:\n```\ndocref.Update(ctx, []firestore.Update{{Path: \"a.b\", Value: 1}})\n```\n\n----------------------------------------\n\nTITLE: Converting Format String Logging to Structured Logging in Go\nDESCRIPTION: This snippet provides examples of how to convert traditional format string logging to structured logging using logr. It demonstrates the transformation of log messages with format specifiers into key-value pairs.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/go-logr/logr/README.md#2025-04-10_snippet_5\n\nLANGUAGE: go\nCODE:\n```\n// Before:\nklog.V(4).Infof(\"Client is returning errors: code %v, error %v\", responseCode, err)\n\n// After:\nlogger.Error(err, \"client returned an error\", \"code\", responseCode)\n\n// Before:\nklog.V(4).Infof(\"Got a Retry-After %ds response for attempt %d to %v\", seconds, retries, url)\n\n// After:\nlogger.V(4).Info(\"got a retry-after response when requesting url\", \"attempt\", retries, \"after seconds\", seconds, \"url\", url)\n```\n\n----------------------------------------\n\nTITLE: Getting Set Size in Go\nDESCRIPTION: Shows how to use the Cardinality method to determine the number of elements in a set. The example counts the number of bonus classes offered.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/deckarep/golang-set/v2/README.md#2025-04-10_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nfmt.Println(bonus.Cardinality())\n```\n\n----------------------------------------\n\nTITLE: Inspecting Container Network Configuration\nDESCRIPTION: Commands to inspect the container's network interface and routing configuration\nSOURCE: https://github.com/moby/moby/blob/master/libnetwork/docs/macvlan.md#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nip a show eth0\n    eth0@if3: <BROADCAST,MULTICAST,UP,LOWER_UP,M-DOWN> mtu 1500 qdisc noqueue state UNKNOWN\n    link/ether 46:b2:6b:26:2f:69 brd ff:ff:ff:ff:ff:ff\n    inet 172.16.86.2/24 scope global eth0\n\nip route\n    default via 172.16.86.1 dev eth0\n    172.16.86.0/24 dev eth0  src 172.16.86.2\n\n# NOTE: the containers can NOT ping the underlying host interfaces as\n# they are intentionally filtered by Linux for additional isolation.\n```\n\n----------------------------------------\n\nTITLE: Pointer Override Merging in Go\nDESCRIPTION: Example showing how to merge structs with pointer fields using WithoutDereference option to override pointer values.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/dario.cat/mergo/README.md#2025-04-10_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"dario.cat/mergo\"\n)\n\ntype Foo struct {\n\tA *string\n\tB int64\n}\n\nfunc main() {\n\tfirst := \"first\"\n\tsecond := \"second\"\n\tsrc := Foo{\n\t\tA: &first,\n\t\tB: 2,\n\t}\n\n\tdest := Foo{\n\t\tA: &second,\n\t\tB: 1,\n\t}\n\n\tmergo.Merge(&dest, src, mergo.WithOverride, mergo.WithoutDereference)\n}\n```\n\n----------------------------------------\n\nTITLE: Importing go-toml v2 in Go\nDESCRIPTION: Shows how to import the go-toml v2 library in a Go project.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/pelletier/go-toml/v2/README.md#2025-04-10_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/pelletier/go-toml/v2\"\n```\n\n----------------------------------------\n\nTITLE: Setting Cardinality Limit in OpenTelemetry Go Metric SDK\nDESCRIPTION: Examples of setting the cardinality limit using the OTEL_GO_X_CARDINALITY_LIMIT environment variable. This includes setting a specific limit, an infinite limit, and disabling the limit.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/go.opentelemetry.io/otel/sdk/metric/internal/x/README.md#2025-04-10_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nexport OTEL_GO_X_CARDINALITY_LIMIT=2000\n```\n\nLANGUAGE: console\nCODE:\n```\nexport OTEL_GO_X_CARDINALITY_LIMIT=-1\n```\n\nLANGUAGE: console\nCODE:\n```\nunset OTEL_GO_X_CARDINALITY_LIMIT\n```\n\n----------------------------------------\n\nTITLE: Flag Parsing Example\nDESCRIPTION: Shows how to parse command line flags and access their values.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/spf13/pflag/README.md#2025-04-10_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nflag.Parse()\nfmt.Println(\"ip has value \", *ip)\nfmt.Println(\"flagvar has value \", flagvar)\n```\n\n----------------------------------------\n\nTITLE: Defining EndpointSpec Message in Protocol Buffers for Docker Swarmkit v1\nDESCRIPTION: This snippet defines the EndpointSpec message type, which includes fields for specifying the resolution mode and ports for service endpoints in a Docker Swarm.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/moby/swarmkit/v2/api/api.pb.txt#2025-04-10_snippet_67\n\nLANGUAGE: Protocol Buffers\nCODE:\n```\nmessage_type {\n  name: \"EndpointSpec\"\n  field {\n    name: \"mode\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_ENUM\n    type_name: \".docker.swarmkit.v1.EndpointSpec.ResolutionMode\"\n    json_name: \"mode\"\n  }\n  field {\n    name: \"ports\"\n    number: 2\n    label: LABEL_REPEATED\n    type: TYPE_MESSAGE\n    type_name: \".docker.swarmkit.v1.PortConfig\"\n    json_name: \"ports\"\n  }\n  // ... (enum definition omitted for brevity)\n}\n```\n\n----------------------------------------\n\nTITLE: List Plugins API Response\nDESCRIPTION: Example JSON response from the GET /plugins endpoint showing details of installed plugins including ID, name, configuration and manifest details.\nSOURCE: https://github.com/moby/moby/blob/master/docs/api/v1.24.md#2025-04-10_snippet_88\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"Id\": \"5724e2c8652da337ab2eedd19fc6fc0ec908e4bd907c7421bf6a8dfc70c4c078\",\n    \"Name\": \"tiborvass/no-remove\",\n    \"Tag\": \"latest\",\n    \"Active\": true,\n    \"Config\": {\n      \"Mounts\": [\n        {\n          \"Name\": \"\",\n          \"Description\": \"\",\n          \"Settable\": null,\n          \"Source\": \"/data\",\n          \"Destination\": \"/data\",\n          \"Type\": \"bind\",\n          \"Options\": [\n            \"shared\",\n            \"rbind\"\n          ]\n        },\n        {\n          \"Name\": \"\",\n          \"Description\": \"\",\n          \"Settable\": null,\n          \"Source\": null,\n          \"Destination\": \"/foobar\",\n          \"Type\": \"tmpfs\",\n          \"Options\": null\n        }\n      ],\n      \"Env\": [\n        \"DEBUG=1\"\n      ],\n      \"Args\": null,\n      \"Devices\": null\n    },\n    \"Manifest\": {...}\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Using Autoincrementing Integer in BoltDB with Go\nDESCRIPTION: This code shows how to use an autoincrementing integer as a unique identifier for key/value pairs in BoltDB. It uses the NextSequence() function to generate a new ID for a user record.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/go.etcd.io/bbolt/README.md#2025-04-10_snippet_14\n\nLANGUAGE: go\nCODE:\n```\nfunc (s *Store) CreateUser(u *User) error {\n    return s.db.Update(func(tx *bolt.Tx) error {\n        b := tx.Bucket([]byte(\"users\"))\n        id, _ := b.NextSequence()\n        u.ID = int(id)\n        buf, err := json.Marshal(u)\n        if err != nil {\n            return err\n        }\n        return b.Put(itob(u.ID), buf)\n    })\n}\n\nfunc itob(v int) []byte {\n    b := make([]byte, 8)\n    binary.BigEndian.PutUint64(b, uint64(v))\n    return b\n}\n\ntype User struct {\n    ID int\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Registering for Memory Threshold Events (v1)\nDESCRIPTION: Sets up event notification when memory usage exceeds a specified threshold (50MB in this example), with notification through an eventfd.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/containerd/cgroups/v3/README.md#2025-04-10_snippet_11\n\nLANGUAGE: go\nCODE:\n```\nevent := cgroup1.MemoryThresholdEvent(50 * 1024 * 1024, false)\nefd, err := control.RegisterMemoryEvent(event)\n```\n\n----------------------------------------\n\nTITLE: Importing SQLx Types Package in Go\nDESCRIPTION: This snippet shows the import of the SQLx types package, which extends the database/sql package with additional functionality.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/modules.txt#2025-04-10_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\ngithub.com/jmoiron/sqlx/types\n```\n\n----------------------------------------\n\nTITLE: Testing CORS Request with curl\nDESCRIPTION: Command to test the CORS-enabled endpoint using curl, showing how to make a request to the local server.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/gorilla/mux/README.md#2025-04-10_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\ncurl localhost:8080/foo -v\n```\n\n----------------------------------------\n\nTITLE: Defining Raft Message Processing in SwarmKit Protobuf\nDESCRIPTION: Protocol Buffer definitions for ProcessRaftMessageRequest/Response and StreamRaftMessageRequest/Response in Docker SwarmKit. These messages are used for processing and streaming Raft messages between nodes in the cluster.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/moby/swarmkit/v2/api/api.pb.txt#2025-04-10_snippet_120\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage_type {\n  name: \"ProcessRaftMessageRequest\"\n  field {\n    name: \"message\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".raftpb.Message\"\n    json_name: \"message\"\n  }\n  options {\n    70000: 0\n  }\n}\nmessage_type {\n  name: \"ProcessRaftMessageResponse\"\n}\nmessage_type {\n  name: \"StreamRaftMessageRequest\"\n  field {\n    name: \"message\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".raftpb.Message\"\n    json_name: \"message\"\n  }\n  options {\n    70000: 0\n  }\n}\nmessage_type {\n  name: \"StreamRaftMessageResponse\"\n}\n```\n\n----------------------------------------\n\nTITLE: Structured Field Logging Example\nDESCRIPTION: Shows the recommended approach for structured logging using fields instead of formatted strings.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/sirupsen/logrus/README.md#2025-04-10_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nlog.WithFields(log.Fields{\n  \"event\": event,\n  \"topic\": topic,\n  \"key\": key,\n}).Fatal(\"Failed to send event\")\n```\n\n----------------------------------------\n\nTITLE: Defining TaskStatus Message in Protocol Buffers for Docker SwarmKit\nDESCRIPTION: This snippet defines a message 'TaskStatus' for Docker SwarmKit, including fields for timestamp, state, message, err, container, port_status, applied_by, and applied_at. It uses a oneof field for runtime_status.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/moby/swarmkit/v2/api/api.pb.txt#2025-04-10_snippet_40\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage_type {\n  name: \"TaskStatus\"\n  field {\n    name: \"timestamp\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".google.protobuf.Timestamp\"\n    json_name: \"timestamp\"\n  }\n  field {\n    name: \"state\"\n    number: 2\n    label: LABEL_OPTIONAL\n    type: TYPE_ENUM\n    type_name: \".docker.swarmkit.v1.TaskState\"\n    json_name: \"state\"\n  }\n  field {\n    name: \"message\"\n    number: 3\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"message\"\n  }\n  field {\n    name: \"err\"\n    number: 4\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"err\"\n  }\n  field {\n    name: \"container\"\n    number: 5\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".docker.swarmkit.v1.ContainerStatus\"\n    oneof_index: 0\n    json_name: \"container\"\n  }\n  field {\n    name: \"port_status\"\n    number: 6\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".docker.swarmkit.v1.PortStatus\"\n    json_name: \"portStatus\"\n  }\n  field {\n    name: \"applied_by\"\n    number: 7\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"appliedBy\"\n  }\n  field {\n    name: \"applied_at\"\n    number: 8\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".google.protobuf.Timestamp\"\n    json_name: \"appliedAt\"\n  }\n  oneof_decl {\n    name: \"runtime_status\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: List Docker Images API Request and Response\nDESCRIPTION: GET endpoint to list Docker images with optional digest information. Supports query parameters for filtering results including dangling images, labels, and image timeline filters.\nSOURCE: https://github.com/moby/moby/blob/master/docs/api/v1.24.md#2025-04-10_snippet_50\n\nLANGUAGE: http\nCODE:\n```\nGET /v1.24/images/json?all=0 HTTP/1.1\n```\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n     \"RepoTags\": [\n       \"ubuntu:12.04\",\n       \"ubuntu:precise\",\n       \"ubuntu:latest\"\n     ],\n     \"Id\": \"8dbd9e392a964056420e5d58ca5cc376ef18e2de93b5cc90e868a1bbc8318c1c\",\n     \"Created\": 1365714795,\n     \"Size\": 131506275,\n     \"VirtualSize\": 131506275,\n     \"Labels\": {}\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Container Update Response in JSON\nDESCRIPTION: Example HTTP response for a successful container update operation, returning a warnings array which is empty in this case.\nSOURCE: https://github.com/moby/moby/blob/master/docs/api/v1.24.md#2025-04-10_snippet_37\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Type: application/json\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"Warnings\": []\n}\n```\n\n----------------------------------------\n\nTITLE: IPTables NAT Table Commands for Docker Swarm\nDESCRIPTION: Complete list of IPTables NAT table commands that enable port publishing in Docker Swarm. These rules handle address translation, including the DNAT rule that forwards traffic from port 8080 to the container.\nSOURCE: https://github.com/moby/moby/blob/master/integration/network/bridge/iptablesdoc/generated/swarm-portmap.md#2025-04-10_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n-P PREROUTING ACCEPT\n-P INPUT ACCEPT\n-P OUTPUT ACCEPT\n-P POSTROUTING ACCEPT\n-N DOCKER\n-N DOCKER-INGRESS\n-A PREROUTING -m addrtype --dst-type LOCAL -j DOCKER-INGRESS\n-A PREROUTING -m addrtype --dst-type LOCAL -j DOCKER\n-A OUTPUT -m addrtype --dst-type LOCAL -j DOCKER-INGRESS\n-A OUTPUT ! -d 127.0.0.0/8 -m addrtype --dst-type LOCAL -j DOCKER\n-A POSTROUTING -o docker_gwbridge -m addrtype --src-type LOCAL -j MASQUERADE\n-A POSTROUTING -s 172.18.0.0/16 ! -o docker_gwbridge -j MASQUERADE\n-A POSTROUTING -s 172.17.0.0/16 ! -o docker0 -j MASQUERADE\n-A DOCKER -i docker_gwbridge -j RETURN\n-A DOCKER -i docker0 -j RETURN\n-A DOCKER-INGRESS -p tcp -m tcp --dport 8080 -j DNAT --to-destination 172.18.0.2:8080\n-A DOCKER-INGRESS -j RETURN\n```\n\n----------------------------------------\n\nTITLE: Defining AssignmentsMessage Message in SwarmKit Protobuf\nDESCRIPTION: Defines a protocol buffer message for delivering assignment information in SwarmKit. It includes a type field to distinguish between complete and incremental updates, and fields for tracking the effects of assignments.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/moby/swarmkit/v2/api/api.pb.txt#2025-04-10_snippet_103\n\nLANGUAGE: protobuf\nCODE:\n```\nname: \"AssignmentsMessage\"\nfield {\n  name: \"type\"\n  number: 1\n  label: LABEL_OPTIONAL\n  type: TYPE_ENUM\n  type_name: \".docker.swarmkit.v1.AssignmentsMessage.Type\"\n  json_name: \"type\"\n}\nfield {\n  name: \"applies_to\"\n  number: 2\n  label: LABEL_OPTIONAL\n  type: TYPE_STRING\n  json_name: \"appliesTo\"\n}\nfield {\n  name: \"results_in\"\n  number: 3\n  label: LABEL_OPTIONAL\n  type: TYPE_STRING\n  json_name: \"resultsIn\"\n}\nfield {\n  name: \"changes\"\n  number: 4\n  label: LABEL_REPEATED\n  type: TYPE_MESSAGE\n  type_name: \".docker.swarmkit.v1.AssignmentChange\"\n  json_name: \"changes\"\n}\nenum_type {\n  name: \"Type\"\n  value {\n    name: \"COMPLETE\"\n    number: 0\n  }\n  value {\n    name: \"INCREMENTAL\"\n    number: 1\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Leaving a Specific Network\nDESCRIPTION: Bash command to leave a specific network using its network ID. The network ID can be retrieved using 'docker network ls --no-trunc'.\nSOURCE: https://github.com/moby/moby/blob/master/libnetwork/cmd/diagnostic/README.md#2025-04-10_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ curl localhost:2000/leavenetwork?nid=<network id>\n```\n\n----------------------------------------\n\nTITLE: Ping Docker Server API\nDESCRIPTION: REST endpoint to ping the Docker server and verify it is responding. Returns simple OK response if server is up.\nSOURCE: https://github.com/moby/moby/blob/master/docs/api/v1.24.md#2025-04-10_snippet_66\n\nLANGUAGE: http\nCODE:\n```\nGET /v1.24/_ping HTTP/1.1\n```\n\n----------------------------------------\n\nTITLE: Checking Make Version on Linux/macOS\nDESCRIPTION: Command to verify make installation and check its version on the system.\nSOURCE: https://github.com/moby/moby/blob/master/docs/contributing/software-required.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ make -v\n```\n\n----------------------------------------\n\nTITLE: List Containers GET Request\nDESCRIPTION: Example HTTP GET request to retrieve a list of containers with query parameters for filtering results by container age and size.\nSOURCE: https://github.com/moby/moby/blob/master/docs/api/v1.24.md#2025-04-10_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nGET /v1.24/containers/json?all=1&before=8dfafdbc3a40&size=1 HTTP/1.1\n```\n\n----------------------------------------\n\nTITLE: State Diagram for Raft Replication Progress\nDESCRIPTION: ASCII diagram showing the state transitions between probe, replicate, and snapshot states in the Raft consensus algorithm. It details conditions for transitioning between states and how match/next indices are updated based on different message responses.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/go.etcd.io/etcd/raft/v3/design.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n                            +--------------------------------------------------------+          \n                            |                  send snapshot                         |          \n                            |                                                        |          \n                  +---------+----------+                                  +----------v---------+\n              +--->       probe        |                                  |      snapshot      |\n              |   |  max inflight = 1  <----------------------------------+  max inflight = 0  |\n              |   +---------+----------+                                  +--------------------+\n              |             |            1. snapshot success                                    \n              |             |               (next=snapshot.index + 1)                           \n              |             |            2. snapshot failure                                    \n              |             |               (no change)                                         \n              |             |            3. receives msgAppResp(rej=false&&index>lastsnap.index)\n              |             |               (match=m.index,next=match+1)                        \nreceives msgAppResp(rej=true)                                                                   \n(next=match+1)|             |                                                                   \n              |             |                                                                   \n              |             |                                                                   \n              |             |   receives msgAppResp(rej=false&&index>match)                     \n              |             |   (match=m.index,next=match+1)                                    \n              |             |                                                                   \n              |             |                                                                   \n              |             |                                                                   \n              |   +---------v----------+                                                        \n              |   |     replicate      |                                                        \n              +---+  max inflight = n  |                                                        \n                  +--------------------+                                                        \n```\n\n----------------------------------------\n\nTITLE: Interacting with Database Tables\nDESCRIPTION: Bash command to perform operations on specific database tables for a network. Tables can be endpoint_table or overlay_peer_table.\nSOURCE: https://github.com/moby/moby/blob/master/libnetwork/cmd/diagnostic/README.md#2025-04-10_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n$ curl localhost:2000/<method>?nid=<network id>&tname=<table name>&key=<key>[&value=<value>]\n```\n\n----------------------------------------\n\nTITLE: Running Diagnostic Client for Service Discovery Table\nDESCRIPTION: Example bash command to use the diagnostic client to examine the service discovery table for a specific network.\nSOURCE: https://github.com/moby/moby/blob/master/libnetwork/cmd/diagnostic/README.md#2025-04-10_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\n$ diagnostiClient -t sd -v -net n8a8ie6tb3wr2e260vxj8ncy4 -a\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting cgroup Type (v2)\nDESCRIPTION: Demonstrates how to get the current cgroup type and set it to 'threaded' mode, which allows for finer-grained control of thread grouping in cgroups v2.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/containerd/cgroups/v3/README.md#2025-04-10_snippet_19\n\nLANGUAGE: go\nCODE:\n```\nm, err := cgroup2.LoadSystemd(\"/\", \"my-cgroup-abc.slice\")\nif err != nil {\n    return err\n}\n\n// https://www.kernel.org/doc/html/v5.0/admin-guide/cgroup-v2.html#threads\ncgType, err := m.GetType()\nif err != nil {\n    return err\n}\nfmt.Println(cgType)\n\nerr = m.SetType(cgroup2.Threaded)\nif err != nil {\n    return err\n}\n```\n\n----------------------------------------\n\nTITLE: Docker Image Search JSON Response\nDESCRIPTION: Example JSON response for a Docker image search request. It includes a list of matching images with their descriptions, official status, and star counts.\nSOURCE: https://github.com/moby/moby/blob/master/docs/api/v1.24.md#2025-04-10_snippet_61\n\nLANGUAGE: json\nCODE:\n```\n[\n        {\n            \"description\": \"\",\n            \"is_official\": false,\n            \"is_automated\": false,\n            \"name\": \"wma55/u1210sshd\",\n            \"star_count\": 0\n        },\n        {\n            \"description\": \"\",\n            \"is_official\": false,\n            \"is_automated\": false,\n            \"name\": \"jdswinbank/sshd\",\n            \"star_count\": 0\n        },\n        {\n            \"description\": \"\",\n            \"is_official\": false,\n            \"is_automated\": false,\n            \"name\": \"vgauthier/sshd\",\n            \"star_count\": 0\n        }\n]\n```\n\n----------------------------------------\n\nTITLE: Basic Route Registration in Go using Gorilla Mux\nDESCRIPTION: Demonstrates how to create a new router and register basic routes with corresponding handlers.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/gorilla/mux/README.md#2025-04-10_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc main() {\n    r := mux.NewRouter()\n    r.HandleFunc(\"/\", HomeHandler)\n    r.HandleFunc(\"/products\", ProductsHandler)\n    r.HandleFunc(\"/articles\", ArticlesHandler)\n    http.Handle(\"/\", r)\n}\n```\n\n----------------------------------------\n\nTITLE: Using go-metrics for Method Profiling and Global Configuration\nDESCRIPTION: This example demonstrates how to profile a method's execution time, configure a statsite sink as the global metrics sink, and emit a key/value metric. It shows the basic usage pattern of the go-metrics library.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/armon/go-metrics/README.md#2025-04-10_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc SlowMethod() {\n    // Profiling the runtime of a method\n    defer metrics.MeasureSince([]string{\"SlowMethod\"}, time.Now())\n}\n\n// Configure a statsite sink as the global metrics sink\nsink, _ := metrics.NewStatsiteSink(\"statsite:8125\")\nmetrics.NewGlobal(metrics.DefaultConfig(\"service-name\"), sink)\n\n// Emit a Key/Value pair\nmetrics.EmitKey([]string{\"questions\", \"meaning of life\"}, 42)\n```\n\n----------------------------------------\n\nTITLE: Defining PortConfig Message in Protocol Buffers\nDESCRIPTION: Defines a message type 'PortConfig' with fields for port configuration including name, protocol, target port, published port, and publish mode. It also includes nested enum definitions for Protocol and PublishMode.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/moby/swarmkit/v2/api/api.pb.txt#2025-04-10_snippet_44\n\nLANGUAGE: Protocol Buffers\nCODE:\n```\nmessage_type {\n  name: \"PortConfig\"\n  field {\n    name: \"name\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"name\"\n  }\n  field {\n    name: \"protocol\"\n    number: 2\n    label: LABEL_OPTIONAL\n    type: TYPE_ENUM\n    type_name: \".docker.swarmkit.v1.PortConfig.Protocol\"\n    json_name: \"protocol\"\n  }\n  field {\n    name: \"target_port\"\n    number: 3\n    label: LABEL_OPTIONAL\n    type: TYPE_UINT32\n    json_name: \"targetPort\"\n  }\n  field {\n    name: \"published_port\"\n    number: 4\n    label: LABEL_OPTIONAL\n    type: TYPE_UINT32\n    json_name: \"publishedPort\"\n  }\n  field {\n    name: \"publish_mode\"\n    number: 5\n    label: LABEL_OPTIONAL\n    type: TYPE_ENUM\n    type_name: \".docker.swarmkit.v1.PortConfig.PublishMode\"\n    json_name: \"publishMode\"\n  }\n  enum_type {\n    name: \"Protocol\"\n    value {\n      name: \"TCP\"\n      number: 0\n      options {\n        66001: \"ProtocolTCP\"\n      }\n    }\n    value {\n      name: \"UDP\"\n      number: 1\n      options {\n        66001: \"ProtocolUDP\"\n      }\n    }\n    value {\n      name: \"SCTP\"\n      number: 2\n      options {\n        66001: \"ProtocolSCTP\"\n      }\n    }\n    options {\n      62001: 0\n    }\n  }\n  enum_type {\n    name: \"PublishMode\"\n    value {\n      name: \"INGRESS\"\n      number: 0\n      options {\n        66001: \"PublishModeIngress\"\n      }\n    }\n    value {\n      name: \"HOST\"\n      number: 1\n      options {\n        66001: \"PublishModeHost\"\n      }\n    }\n    options {\n      62023: \"PublishMode\"\n      62001: 0\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Manual Transaction Management in bbolt\nDESCRIPTION: Go code demonstrating how to manually start, commit, and rollback transactions in bbolt using DB.Begin().\nSOURCE: https://github.com/moby/moby/blob/master/vendor/go.etcd.io/bbolt/README.md#2025-04-10_snippet_10\n\nLANGUAGE: go\nCODE:\n```\n// Start a writable transaction.\ntx, err := db.Begin(true)\nif err != nil {\n    return err\n}\ndefer tx.Rollback()\n\n// Use the transaction...\n_, err := tx.CreateBucket([]byte(\"MyBucket\"))\nif err != nil {\n    return err\n}\n\n// Commit the transaction and check for error.\nif err := tx.Commit(); err != nil {\n    return err\n}\n```\n\n----------------------------------------\n\nTITLE: Adding AddLink Method to Span Interface\nDESCRIPTION: Adds AddLink method to the Span interface in the trace package to allow adding links to spans.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-10_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\nAddLink method to the Span interface in go.opentelemetry.io/otel/trace\n```\n\n----------------------------------------\n\nTITLE: NAT Table Iptables Commands\nDESCRIPTION: The iptables commands that generate the NAT table rules for Docker networking, showing how Docker handles destination network address translation for container port publishing.\nSOURCE: https://github.com/moby/moby/blob/master/integration/network/bridge/iptablesdoc/generated/usernet-portmap.md#2025-04-10_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n-P PREROUTING ACCEPT\n-P INPUT ACCEPT\n-P OUTPUT ACCEPT\n-P POSTROUTING ACCEPT\n-N DOCKER\n-A PREROUTING -m addrtype --dst-type LOCAL -j DOCKER\n-A OUTPUT ! -d 127.0.0.0/8 -m addrtype --dst-type LOCAL -j DOCKER\n-A POSTROUTING -s 192.0.2.0/24 ! -o bridge1 -j MASQUERADE\n-A POSTROUTING -s 172.17.0.0/16 ! -o docker0 -j MASQUERADE\n-A DOCKER -i bridge1 -j RETURN\n-A DOCKER -i docker0 -j RETURN\n-A DOCKER ! -i bridge1 -p tcp -m tcp --dport 8080 -j DNAT --to-destination 192.0.2.2:80\n```\n\n----------------------------------------\n\nTITLE: Defining Secret Message Structure in Protobuf\nDESCRIPTION: Definition of a Secret message type with fields for ID, metadata, specifications, and internal flag. Includes indexing options for efficient retrieval.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/moby/swarmkit/v2/api/api.pb.txt#2025-04-10_snippet_85\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage_type {\n  name: \"Secret\"\n  field {\n    name: \"id\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"id\"\n  }\n  field {\n    name: \"meta\"\n    number: 2\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".docker.swarmkit.v1.Meta\"\n    options {\n      65001: 0\n    }\n    json_name: \"meta\"\n  }\n  field {\n    name: \"spec\"\n    number: 3\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".docker.swarmkit.v1.SecretSpec\"\n    options {\n      65001: 0\n    }\n    json_name: \"spec\"\n  }\n  field {\n    name: \"internal\"\n    number: 4\n    label: LABEL_OPTIONAL\n    type: TYPE_BOOL\n    json_name: \"internal\"\n  }\n  options {\n    70001 {\n      1 {\n        1: 1\n        2: 1\n        3: 1\n        4: 1\n        5: 1\n        6: 1\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing gRPC Package in Go\nDESCRIPTION: Shows how to import the gRPC package in Go code. This import statement enables automatic fetching of necessary dependencies when running go build, go run, or go test commands.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/google.golang.org/grpc/README.md#2025-04-10_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport \"google.golang.org/grpc\"\n```\n\n----------------------------------------\n\nTITLE: Installing dbus Go Library\nDESCRIPTION: Command to install the dbus library using Go's package management system. This requires Go 1.12 or later.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/godbus/dbus/v5/README.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/godbus/dbus/v5\n```\n\n----------------------------------------\n\nTITLE: Installing Git for Windows using PowerShell\nDESCRIPTION: This PowerShell script downloads and installs Git for Windows, then adds it to the system PATH.\nSOURCE: https://github.com/moby/moby/blob/master/docs/contributing/software-req-win.md#2025-04-10_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nInvoke-Webrequest \"https://github.com/git-for-windows/git/releases/download/v2.7.2.windows.1/Git-2.7.2-64-bit.exe\" -OutFile git.exe -UseBasicParsing\nStart-Process git.exe -ArgumentList '/VERYSILENT /SUPPRESSMSGBOXES /CLOSEAPPLICATIONS /DIR=c:\\git\\' -Wait\nsetx /M PATH \"$env:Path;c:\\git\\cmd\"\n```\n\n----------------------------------------\n\nTITLE: Pausing a Container via HTTP Request\nDESCRIPTION: Example HTTP POST request to pause a container with ID 'e90e34656806'.\nSOURCE: https://github.com/moby/moby/blob/master/docs/api/v1.24.md#2025-04-10_snippet_40\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1.24/containers/e90e34656806/pause HTTP/1.1\n```\n\n----------------------------------------\n\nTITLE: Connecting to Syslog with Custom Network Dialer\nDESCRIPTION: Demonstrates how to establish a connection to a syslog server using a custom network dialer function. This provides additional control over connection attempts, including timeout settings and proxy configurations.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/RackSec/srslog/README.md#2025-04-10_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nnetDialer := &net.Dialer{Timeout: time.Second*5} // easy timeouts\nrealNetwork := \"tcp\" // real network, other vars your dail func can close over\ndial := func(network, addr string) (net.Conn, error) {\n    // cannot use \"network\" here as it'll simply be \"custom\" which will fail\n    return tls.DialWithDialer(netDialer, realNetwork, addr, &config)\n}\n\nw, err := DialWithCustomDialer(\"custom\", \"192.168.0.52:514\", syslog.LOG_ERR, \"testtag\", dial)\n```\n\n----------------------------------------\n\nTITLE: System Call Interface Function Prototypes in Go\nDESCRIPTION: Core system call entry point function declarations that implement system call dispatch. These functions handle different argument counts and scheduling behaviors.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/golang.org/x/sys/unix/README.md#2025-04-10_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc Syscall(trap, a1, a2, a3 uintptr) (r1, r2, err uintptr)\nfunc Syscall6(trap, a1, a2, a3, a4, a5, a6 uintptr) (r1, r2, err uintptr)\nfunc RawSyscall(trap, a1, a2, a3 uintptr) (r1, r2, err uintptr)\n```\n\n----------------------------------------\n\nTITLE: Defining Selection Types for Object Filtering in Docker SwarmKit\nDESCRIPTION: Protocol buffer definitions for message types used to filter objects in Docker SwarmKit's watch API. These types allow selection of objects by slot or by custom criteria.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/moby/swarmkit/v2/api/api.pb.txt#2025-04-10_snippet_132\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage_type {\n  name: \"SelectBySlot\"\n  field {\n    name: \"service_id\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    options {\n      65004: \"ServiceID\"\n    }\n    json_name: \"serviceId\"\n  }\n  field {\n    name: \"slot\"\n    number: 2\n    label: LABEL_OPTIONAL\n    type: TYPE_UINT64\n    json_name: \"slot\"\n  }\n}\nmessage_type {\n  name: \"SelectByCustom\"\n  field {\n    name: \"kind\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"kind\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Explaining Types Package Purpose and Interfaces\nDESCRIPTION: Documentation comment explaining that the types package provides useful custom types implementing the sql.Scanner and driver.Valuer interfaces, making them suitable for use with database/sql operations.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/jmoiron/sqlx/types/README.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# types\n\nThe types package provides some useful types which implement the `sql.Scanner`\nand `driver.Valuer` interfaces, suitable for use as scan and value targets with\ndatabase/sql.\n```\n\n----------------------------------------\n\nTITLE: Adding a Process to a cgroup (v1)\nDESCRIPTION: Adds a process to a cgroup by specifying its PID. This places the process under the resource constraints defined by the cgroup.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/containerd/cgroups/v3/README.md#2025-04-10_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nif err := control.Add(cgroup1.Process{Pid:1234}); err != nil {\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Writer Struct in Go\nDESCRIPTION: Declares the Writer struct type for buffered writing operations.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/philhofer/fwd/README.md#2025-04-10_snippet_4\n\nLANGUAGE: go\nCODE:\n```\ntype Writer struct {\n    // contains filtered or unexported fields\n}\n```\n\n----------------------------------------\n\nTITLE: Default Authorization Client Creation\nDESCRIPTION: Creates a new client using Google Application Default Credentials for authentication\nSOURCE: https://github.com/moby/moby/blob/master/vendor/cloud.google.com/go/README.md#2025-04-10_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nclient, err := storage.NewClient(ctx)\n```\n\n----------------------------------------\n\nTITLE: Container Wait API Request\nDESCRIPTION: HTTP request to wait for a container to stop and return its exit code.\nSOURCE: https://github.com/moby/moby/blob/master/docs/api/v1.24.md#2025-04-10_snippet_46\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1.24/containers/16253994b7c4/wait HTTP/1.1\n```\n\n----------------------------------------\n\nTITLE: Overriding Standard Library Logger with Logrus in Go\nDESCRIPTION: This snippet shows how to override the standard library's logger with Logrus. It creates a new Logrus logger with JSON formatting and sets it as the output for the standard log package.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/sirupsen/logrus/README.md#2025-04-10_snippet_11\n\nLANGUAGE: go\nCODE:\n```\nlogger := logrus.New()\nlogger.Formatter = &logrus.JSONFormatter{}\n\n// Use logrus for standard log output\n// Note that `log` here references stdlib's log\n// Not logrus imported under the name `log`.\nlog.SetOutput(logger.Writer())\n```\n\n----------------------------------------\n\nTITLE: Defining AddressFamily Enum in Protocol Buffers\nDESCRIPTION: Defines an enum type 'AddressFamily' with values for unknown, IPv4, and IPv6 address types. This is likely used for network configuration in Docker SwarmKit.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/moby/swarmkit/v2/api/api.pb.txt#2025-04-10_snippet_43\n\nLANGUAGE: Protocol Buffers\nCODE:\n```\nenum_type {\n  name: \"AddressFamily\"\n  value {\n    name: \"UNKNOWN\"\n    number: 0\n  }\n  value {\n    name: \"IPV4\"\n    number: 4\n  }\n  value {\n    name: \"IPV6\"\n    number: 6\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: BitSet Serialization Example in Go\nDESCRIPTION: Shows how to serialize a BitSet to a byte stream and deserialize it back, with error handling.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/bits-and-blooms/bitset/README.md#2025-04-10_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nconst length = 9585\n\tconst oneEvery = 97\n\tbs := bitset.New(length)\n\t// Add some bits\n\tfor i := uint(0); i < length; i += oneEvery {\n\t\tbs = bs.Set(i)\n\t}\n\n\tvar buf bytes.Buffer\n\tn, err := bs.WriteTo(&buf)\n\tif err != nil {\n\t\t// failure\n\t}\n\t// Here n == buf.Len()\n```\n\n----------------------------------------\n\nTITLE: Defining Mount Type Enum in Protocol Buffers for Docker SwarmKit\nDESCRIPTION: This snippet defines an enum 'Type' for mount types in Docker SwarmKit, including BIND, VOLUME, TMPFS, NPIPE, and CLUSTER. Each value is associated with a specific mount type option.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/moby/swarmkit/v2/api/api.pb.txt#2025-04-10_snippet_33\n\nLANGUAGE: protobuf\nCODE:\n```\nenum_type {\n  name: \"Type\"\n  value {\n    name: \"BIND\"\n    number: 0\n    options {\n      66001: \"MountTypeBind\"\n    }\n  }\n  value {\n    name: \"VOLUME\"\n    number: 1\n    options {\n      66001: \"MountTypeVolume\"\n    }\n  }\n  value {\n    name: \"TMPFS\"\n    number: 2\n    options {\n      66001: \"MountTypeTmpfs\"\n    }\n  }\n  value {\n    name: \"NPIPE\"\n    number: 3\n    options {\n      66001: \"MountTypeNamedPipe\"\n    }\n  }\n  value {\n    name: \"CLUSTER\"\n    number: 4\n    options {\n      66001: \"MountTypeCluster\"\n    }\n  }\n  options {\n    62001: 0\n    62023: \"MountType\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: IPTables NAT Table Commands\nDESCRIPTION: The exact iptables commands used to create the NAT table rules for port forwarding. These commands show how Docker implements port publishing by creating DNAT rules that translate external ports to container ports.\nSOURCE: https://github.com/moby/moby/blob/master/integration/network/bridge/iptablesdoc/generated/usernet-portmap-noicc.md#2025-04-10_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n-P PREROUTING ACCEPT\n-P INPUT ACCEPT\n-P OUTPUT ACCEPT\n-P POSTROUTING ACCEPT\n-N DOCKER\n-A PREROUTING -m addrtype --dst-type LOCAL -j DOCKER\n-A OUTPUT ! -d 127.0.0.0/8 -m addrtype --dst-type LOCAL -j DOCKER\n-A POSTROUTING -s 192.0.2.0/24 ! -o bridge1 -j MASQUERADE\n-A POSTROUTING -s 172.17.0.0/16 ! -o docker0 -j MASQUERADE\n-A DOCKER -i bridge1 -j RETURN\n-A DOCKER -i docker0 -j RETURN\n-A DOCKER ! -i bridge1 -p tcp -m tcp --dport 8080 -j DNAT --to-destination 192.0.2.2:80\n```\n\n----------------------------------------\n\nTITLE: Defining CapacityRange Message in Protocol Buffers\nDESCRIPTION: Defines a CapacityRange message type with fields for required and limit bytes. This structure is likely used to specify storage capacity requirements in the Docker Swarmkit API.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/moby/swarmkit/v2/api/api.pb.txt#2025-04-10_snippet_58\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage CapacityRange {\n  int64 required_bytes = 1;\n  int64 limit_bytes = 2;\n}\n```\n\n----------------------------------------\n\nTITLE: Variable Binding Flag Declaration\nDESCRIPTION: Shows how to bind a flag to a variable using the Var functions.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/spf13/pflag/README.md#2025-04-10_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nvar flagvar int\nfunc init() {\n    flag.IntVar(&flagvar, \"flagname\", 1234, \"help message for flagname\")\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying ListBlobsInclude Parameter\nDESCRIPTION: Adds 'permissions' to the enum list of ListBlobsInclude parameter.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/internal/generated/autorest.md#2025-04-10_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:  \n- from: swagger-document    \n  where: $.parameters.ListBlobsInclude    \n  transform: >        \n    $.items.enum.push(\"permissions\");\n```\n\n----------------------------------------\n\nTITLE: Defining UpdateTaskStatusRequest Message in SwarmKit Protobuf\nDESCRIPTION: Defines a protocol buffer message for updating task status in SwarmKit. It includes a session ID field and a repeated field for task status updates, with a nested type defining the structure of individual updates.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/moby/swarmkit/v2/api/api.pb.txt#2025-04-10_snippet_98\n\nLANGUAGE: protobuf\nCODE:\n```\nname: \"UpdateTaskStatusRequest\"\nfield {\n  name: \"session_id\"\n  number: 1\n  label: LABEL_OPTIONAL\n  type: TYPE_STRING\n  json_name: \"sessionId\"\n}\nfield {\n  name: \"updates\"\n  number: 3\n  label: LABEL_REPEATED\n  type: TYPE_MESSAGE\n  type_name: \".docker.swarmkit.v1.UpdateTaskStatusRequest.TaskStatusUpdate\"\n  json_name: \"updates\"\n}\nnested_type {\n  name: \"TaskStatusUpdate\"\n  field {\n    name: \"task_id\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"taskId\"\n  }\n  field {\n    name: \"status\"\n    number: 2\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".docker.swarmkit.v1.TaskStatus\"\n    json_name: \"status\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Container Wait API Response\nDESCRIPTION: HTTP response containing the exit status code of the stopped container.\nSOURCE: https://github.com/moby/moby/blob/master/docs/api/v1.24.md#2025-04-10_snippet_47\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Type: application/json\n\n{\"StatusCode\": 0}\n```\n\n----------------------------------------\n\nTITLE: Iptables NAT Table Rules\nDESCRIPTION: NAT table rules for Docker networking, including DNAT for port forwarding and MASQUERADE rules for network address translation. These rules handle the port mapping and network address translation for the container.\nSOURCE: https://github.com/moby/moby/blob/master/integration/network/bridge/iptablesdoc/generated/usernet-portmap-lo.md#2025-04-10_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n-P PREROUTING ACCEPT\n-P INPUT ACCEPT\n-P OUTPUT ACCEPT\n-P POSTROUTING ACCEPT\n-N DOCKER\n-A PREROUTING -m addrtype --dst-type LOCAL -j DOCKER\n-A OUTPUT ! -d 127.0.0.0/8 -m addrtype --dst-type LOCAL -j DOCKER\n-A POSTROUTING -s 192.0.2.0/24 ! -o bridge1 -j MASQUERADE\n-A POSTROUTING -s 172.17.0.0/16 ! -o docker0 -j MASQUERADE\n-A DOCKER -i bridge1 -j RETURN\n-A DOCKER -i docker0 -j RETURN\n-A DOCKER -d 127.0.0.1/32 ! -i bridge1 -p tcp -m tcp --dport 8080 -j DNAT --to-destination 192.0.2.2:80\n```\n\n----------------------------------------\n\nTITLE: Image Push Platform Selection Example\nDESCRIPTION: Example of pushing a specific platform manifest from a multi-platform image\nSOURCE: https://github.com/moby/moby/blob/master/docs/api/version-history.md#2025-04-10_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nPOST /images/{name}/push?platform={platform}\n```\n\n----------------------------------------\n\nTITLE: Container Attach API Request\nDESCRIPTION: HTTP request to attach to a running container with specified parameters for logs and stream handling.\nSOURCE: https://github.com/moby/moby/blob/master/docs/api/v1.24.md#2025-04-10_snippet_44\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1.24/containers/16253994b7c4/attach?logs=1&stream=0&stdout=1 HTTP/1.1\n```\n\n----------------------------------------\n\nTITLE: Creating Macvlan Network with IP Address Exclusion in Docker\nDESCRIPTION: Creates a Macvlan network that blacklists a specific IP address from being assigned to containers by using the --aux-address flag. This example creates a network with subnet 172.16.86.0/24 and excludes the host's IP address.\nSOURCE: https://github.com/moby/moby/blob/master/libnetwork/docs/macvlan.md#2025-04-10_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker network create -d macvlan \\\n    --subnet=172.16.86.0/24 \\\n    --gateway=172.16.86.1  \\\n    --aux-address=\"exclude_host=172.16.86.250\" \\\n    -o parent=eth0 pub_net\n```\n\n----------------------------------------\n\nTITLE: Implementing Wrapper Interface for Custom Types in Go\nDESCRIPTION: Shows how to implement the Wrapper interface for custom error types to work with errwrap's functionality. It demonstrates creating a custom AppError type and implementing the WrappedErrors method.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/hashicorp/errwrap/README.md#2025-04-10_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype AppError {\n  Code ErrorCode\n  Err  error\n}\n\nfunc (e *AppError) WrappedErrors() []error {\n  return []error{e.Err}\n}\n```\n\n----------------------------------------\n\nTITLE: Closing Cloud Logging Client in Go\nDESCRIPTION: Demonstrates proper cleanup by closing the logging client, which flushes any buffered log entries before program exit.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/cloud.google.com/go/logging/README.md#2025-04-10_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nerr = client.Close()\nif err != nil {\n   // TODO: Handle error.\n}\n```\n\n----------------------------------------\n\nTITLE: Shorthand Flag Declaration\nDESCRIPTION: Shows how to create flags with single-letter shorthand alternatives.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/spf13/pflag/README.md#2025-04-10_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nvar ip = flag.IntP(\"flagname\", \"f\", 1234, \"help message\")\nvar flagvar bool\nfunc init() {\n\tflag.BoolVarP(&flagvar, \"boolname\", \"b\", true, \"help message\")\n}\nflag.VarP(&flagVal, \"varname\", \"v\", \"help message\")\n```\n\n----------------------------------------\n\nTITLE: Defining VolumeSpec Message in SwarmKit Protobuf\nDESCRIPTION: This snippet defines the VolumeSpec message type in SwarmKit's protobuf, including fields for annotations, group, driver, access mode, secrets, and other volume-related properties. It also defines an enum for VolumeAvailability.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/moby/swarmkit/v2/api/api.pb.txt#2025-04-10_snippet_72\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage VolumeSpec {\n  Annotations annotations = 1 [(gogoproto.nullable) = false];\n  string group = 2;\n  Driver driver = 3;\n  VolumeAccessMode access_mode = 4;\n  repeated VolumeSecret secrets = 5;\n  TopologyRequirement AccessibilityRequirements = 6;\n  CapacityRange capacity_range = 7;\n  VolumeAvailability availability = 8;\n\n  enum VolumeAvailability {\n    option (docker.protobuf.plugin.enum_use_string) = 0;\n    ACTIVE = 0 [(docker.protobuf.plugin.enumvalue_stringify) = \"VolumeAvailabilityActive\"];\n    PAUSE = 1 [(docker.protobuf.plugin.enumvalue_stringify) = \"VolumeAvailabilityPause\"];\n    DRAIN = 2 [(docker.protobuf.plugin.enumvalue_stringify) = \"VolumeAvailabilityDrain\"];\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: iOS Integration with BoltDB\nDESCRIPTION: Demonstrates BoltDB integration in iOS, including proper file path handling, cloud backup prevention, and database lifecycle management.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/go.etcd.io/bbolt/README.md#2025-04-10_snippet_23\n\nLANGUAGE: objc\nCODE:\n```\n- (void)demo {\n    NSString* path = [NSSearchPathForDirectoriesInDomains(NSLibraryDirectory,\n                                                          NSUserDomainMask,\n                                                          YES) objectAtIndex:0];\n\tGoBoltmobiledemoBoltDB * demo = GoBoltmobiledemoNewBoltDB(path);\n\t[self addSkipBackupAttributeToItemAtPath:demo.path];\n\t//Some DB Logic would go here\n\t[demo close];\n}\n\n- (BOOL)addSkipBackupAttributeToItemAtPath:(NSString *) filePathString\n{\n    NSURL* URL= [NSURL fileURLWithPath: filePathString];\n    assert([[NSFileManager defaultManager] fileExistsAtPath: [URL path]]);\n\n    NSError *error = nil;\n    BOOL success = [URL setResourceValue: [NSNumber numberWithBool: YES]\n                                  forKey: NSURLIsExcludedFromBackupKey error: &error];\n    if(!success){\n        NSLog(@\"Error excluding %@ from backup %@\", [URL lastPathComponent], error);\n    }\n    return success;\n}\n```\n\n----------------------------------------\n\nTITLE: Error Extraction Using errors.As in Go\nDESCRIPTION: Shows how to extract specific error types from a multierror using the standard library errors.As function.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/hashicorp/go-multierror/README.md#2025-04-10_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n// Assume err is a multierror value\nerr := somefunc()\n\n// We want to know if \"err\" has a \"RichErrorType\" in it and extract it.\nvar errRich RichErrorType\nif errors.As(err, &errRich) {\n\t// It has it, and now errRich is populated.\n}\n```\n\n----------------------------------------\n\nTITLE: Iptables Commands for NAT Table Configuration\nDESCRIPTION: The iptables commands used to set up the nat table rules for the Docker network in nat-unprotected mode.\nSOURCE: https://github.com/moby/moby/blob/master/integration/network/bridge/iptablesdoc/generated/usernet-portmap-natunprot.md#2025-04-10_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n-P PREROUTING ACCEPT\n-P INPUT ACCEPT\n-P OUTPUT ACCEPT\n-P POSTROUTING ACCEPT\n-N DOCKER\n-A PREROUTING -m addrtype --dst-type LOCAL -j DOCKER\n-A OUTPUT ! -d 127.0.0.0/8 -m addrtype --dst-type LOCAL -j DOCKER\n-A POSTROUTING -s 192.0.2.0/24 ! -o bridge1 -j MASQUERADE\n-A POSTROUTING -s 172.17.0.0/16 ! -o docker0 -j MASQUERADE\n-A DOCKER -i bridge1 -j RETURN\n-A DOCKER -i docker0 -j RETURN\n-A DOCKER ! -i bridge1 -p tcp -m tcp --dport 8080 -j DNAT --to-destination 192.0.2.2:80\n```\n\n----------------------------------------\n\nTITLE: Defining LogStream Enum in Protobuf\nDESCRIPTION: Defines an enumeration for LogStream types in Protocol Buffers, including unknown, stdout, and stderr streams.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/moby/swarmkit/v2/api/api.pb.txt#2025-04-10_snippet_108\n\nLANGUAGE: protobuf\nCODE:\n```\nenum_type {\n  name: \"LogStream\"\n  value {\n    name: \"LOG_STREAM_UNKNOWN\"\n    number: 0\n    options {\n      66001: \"LogStreamUnknown\"\n    }\n  }\n  value {\n    name: \"LOG_STREAM_STDOUT\"\n    number: 1\n    options {\n      66001: \"LogStreamStdout\"\n    }\n  }\n  value {\n    name: \"LOG_STREAM_STDERR\"\n    number: 2\n    options {\n      66001: \"LogStreamStderr\"\n    }\n  }\n  options {\n    62001: 0\n    62023: \"LogStream\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running the Containerized Diagnostic Tool\nDESCRIPTION: Bash command to run the network diagnostic tool as a Docker container in privileged mode with host networking.\nSOURCE: https://github.com/moby/moby/blob/master/libnetwork/cmd/diagnostic/README.md#2025-04-10_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n$ docker container run --name net-diagnostic -d --privileged --network host dockereng/network-diagnostic:17.12-dind\n```\n\n----------------------------------------\n\nTITLE: CGroups Metrics Message Definitions in Protocol Buffers\nDESCRIPTION: Defines the main Metrics message type and its associated submessages for collecting container resource statistics. Includes detailed fields for hugetlb, pids, CPU, memory, block IO, RDMA, and network metrics.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/containerd/cgroups/v3/cgroup1/stats/metrics.pb.txt#2025-04-10_snippet_0\n\nLANGUAGE: protobuf\nCODE:\n```\nfile {\n  name: \"github.com/containerd/cgroups/cgroup1/stats/metrics.proto\"\n  package: \"io.containerd.cgroups.v1\"\n  message_type {\n    name: \"Metrics\"\n    field {\n      name: \"hugetlb\"\n      number: 1\n      label: LABEL_REPEATED\n      type: TYPE_MESSAGE\n      type_name: \".io.containerd.cgroups.v1.HugetlbStat\"\n      json_name: \"hugetlb\"\n    }\n    field {\n      name: \"pids\"\n      number: 2\n      label: LABEL_OPTIONAL\n      type: TYPE_MESSAGE\n      type_name: \".io.containerd.cgroups.v1.PidsStat\"\n      json_name: \"pids\"\n    }\n    field {\n      name: \"cpu\"\n      number: 3\n      label: LABEL_OPTIONAL\n      type: TYPE_MESSAGE\n      type_name: \".io.containerd.cgroups.v1.CPUStat\"\n      json_name: \"cpu\"\n    }\n    field {\n      name: \"memory\"\n      number: 4\n      label: LABEL_OPTIONAL\n      type: TYPE_MESSAGE\n      type_name: \".io.containerd.cgroups.v1.MemoryStat\"\n      json_name: \"memory\"\n    }\n    field {\n      name: \"blkio\"\n      number: 5\n      label: LABEL_OPTIONAL\n      type: TYPE_MESSAGE\n      type_name: \".io.containerd.cgroups.v1.BlkIOStat\"\n      json_name: \"blkio\"\n    }\n    field {\n      name: \"rdma\"\n      number: 6\n      label: LABEL_OPTIONAL\n      type: TYPE_MESSAGE\n      type_name: \".io.containerd.cgroups.v1.RdmaStat\"\n      json_name: \"rdma\"\n    }\n    field {\n      name: \"network\"\n      number: 7\n      label: LABEL_REPEATED\n      type: TYPE_MESSAGE\n      type_name: \".io.containerd.cgroups.v1.NetworkStat\"\n      json_name: \"network\"\n    }\n    field {\n      name: \"cgroup_stats\"\n      number: 8\n      label: LABEL_OPTIONAL\n      type: TYPE_MESSAGE\n      type_name: \".io.containerd.cgroups.v1.CgroupStats\"\n      json_name: \"cgroupStats\"\n    }\n    field {\n      name: \"memory_oom_control\"\n      number: 9\n      label: LABEL_OPTIONAL\n      type: TYPE_MESSAGE\n      type_name: \".io.containerd.cgroups.v1.MemoryOomControl\"\n      json_name: \"memoryOomControl\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Resize Container TTY Response\nDESCRIPTION: Example HTTP response for a successful TTY resize operation, showing a 200 status code with empty content.\nSOURCE: https://github.com/moby/moby/blob/master/docs/api/v1.24.md#2025-04-10_snippet_27\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Length: 0\nContent-Type: text/plain; charset=utf-8\n```\n\n----------------------------------------\n\nTITLE: Initializing Go-Fuzz-Headers Consumer\nDESCRIPTION: Shows how to create a new Consumer instance with byte data for fuzzing\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/AdaLogics/go-fuzz-headers/README.md#2025-04-10_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\tfuzz \"github.com/AdaLogics/go-fuzz-headers\"\n)\ndata := []byte{'R', 'a', 'n', 'd', 'o', 'm'}\nf := fuzz.NewConsumer(data)\n\n```\n\n----------------------------------------\n\nTITLE: Starting Exec Instance in Docker Container via HTTP POST\nDESCRIPTION: HTTP POST request to start a previously set up exec instance in a Docker container, specifying Detach and Tty parameters.\nSOURCE: https://github.com/moby/moby/blob/master/docs/api/v1.24.md#2025-04-10_snippet_75\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1.24/exec/e90e34656806/start HTTP/1.1\nContent-Type: application/json\nContent-Length: 12345\n\n{\n \"Detach\": false,\n \"Tty\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Docker API v1.45 Changes\nDESCRIPTION: Documents changes in Docker Engine API v1.45 including new volume subpath support, search functionality changes, and container configuration updates.\nSOURCE: https://github.com/moby/moby/blob/master/docs/api/version-history.md#2025-04-10_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n* POST /containers/create now supports VolumeOptions.Subpath\n* POST /images/search will always assume false for is-automated\n* GET /images/{name}/json no longer includes Container and ContainerConfig fields\n* Aliases field changes in GET /containers/{name:.*}/json response\n```\n\n----------------------------------------\n\nTITLE: Defining Image Message in Protocol Buffers\nDESCRIPTION: This simple message type defines a container image reference used in Docker Swarm services, containing only a reference field that holds the image name and tag or digest.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/moby/swarmkit/v2/api/api.pb.txt#2025-04-10_snippet_28\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage_type {\n  name: \"Image\"\n  field {\n    name: \"reference\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"reference\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Network Interface Configuration\nDESCRIPTION: Command to show the IP address configuration of eth0 interface on the Docker host\nSOURCE: https://github.com/moby/moby/blob/master/libnetwork/docs/macvlan.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nip addr show eth0\n3: eth0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast state UP group default qlen 1000\n    inet 172.16.86.250/24 brd 172.16.86.255 scope global eth0\n```\n\n----------------------------------------\n\nTITLE: Creating Dual Stack IPv4/IPv6 Macvlan Network with VLAN Tagging in Docker\nDESCRIPTION: This snippet demonstrates how to create a Macvlan network with multiple IPv4 and IPv6 subnets, attach it to a VLAN-tagged sub-interface, and start containers on different subnets. It also shows how to ping between containers and view network details.\nSOURCE: https://github.com/moby/moby/blob/master/libnetwork/docs/macvlan.md#2025-04-10_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n# Create multiple subnets w/ dual stacks:\ndocker network  create  -d macvlan \\\n    --subnet=192.168.216.0/24 --subnet=192.168.218.0/24 \\\n    --gateway=192.168.216.1  --gateway=192.168.218.1 \\\n    --ipv6 --subnet=2001:db8:abc8::/64 --gateway=2001:db8:abc8::10 \\\n     -o parent=eth0.218 \\\n     -o macvlan_mode=bridge macvlan216\n\n# Start a container on the first subnet 192.168.216.0/24\ndocker run --net=macvlan216 --name=macnet216_test --ip=192.168.216.10 -itd alpine /bin/sh\n\n# Start a container on the second subnet 192.168.218.0/24\ndocker run --net=macvlan216 --name=macnet218_test --ip=192.168.218.10 -itd alpine /bin/sh\n\n# Ping the first container started on the 192.168.216.0/24 subnet\ndocker run --net=macvlan216 --ip=192.168.216.11 -it --rm alpine /bin/sh\n\n# From inside the container shell ping the other host on the same subnet and then exit\n$ ping -c4 192.168.216.10\n$ exit\n\n# Ping the first container started on the 192.168.218.0/24 subnet\ndocker run --net=macvlan216 --ip=192.168.218.11 -it --rm alpine /bin/sh\n\n# From inside the container shell ping the other host on the same subnet and then exit\n$ ping -c4 192.168.218.10\n$ exit\n\n# Start a container in the back explicitly declaring the v6 address\ndocker run --net=macvlan216 --ip6=2001:db8:abc8::20 -itd alpine /bin/sh\n\n# Start another container pinging the v6 address of the previous container started in the background\ndocker run --net=macvlan216 -it --rm alpine /bin/sh\n$ ping6 -c4 2001:db8:abc8::20\n$ exit\n# Or, run the ping as a explicit process\ndocker run --net=macvlan216 -it --rm alpine ping6 -c4 2001:db8:abc8::20\n```\n\n----------------------------------------\n\nTITLE: Initializing Cloud Logging Client in Go\nDESCRIPTION: Creates a new logging client instance for a specific Google Cloud project. The client is used to create loggers and manage the logging lifecycle.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/cloud.google.com/go/logging/README.md#2025-04-10_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nctx := context.Background()\nclient, err := logging.NewClient(ctx, \"my-project\")\nif err != nil {\n   // TODO: Handle error.\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Logrus Logging in Go\nDESCRIPTION: This snippet demonstrates how to use Logrus's built-in testing facilities. It shows how to create a test logger, log a message, and assert the presence and content of log entries.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/sirupsen/logrus/README.md#2025-04-10_snippet_12\n\nLANGUAGE: go\nCODE:\n```\nimport(\n  \"github.com/sirupsen/logrus\"\n  \"github.com/sirupsen/logrus/hooks/test\"\n  \"github.com/stretchr/testify/assert\"\n  \"testing\"\n)\n\nfunc TestSomething(t*testing.T){\n  logger, hook := test.NewNullLogger()\n  logger.Error(\"Helloerror\")\n\n  assert.Equal(t, 1, len(hook.Entries))\n  assert.Equal(t, logrus.ErrorLevel, hook.LastEntry().Level)\n  assert.Equal(t, \"Helloerror\", hook.LastEntry().Message)\n\n  hook.Reset()\n  assert.Nil(t, hook.LastEntry())\n}\n```\n\n----------------------------------------\n\nTITLE: Container Kill Response\nDESCRIPTION: Example HTTP response for a successful container kill operation, showing a 204 No Content status code.\nSOURCE: https://github.com/moby/moby/blob/master/docs/api/v1.24.md#2025-04-10_snippet_35\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 204 No Content\n```\n\n----------------------------------------\n\nTITLE: Implementing a Health Check Handler in Go\nDESCRIPTION: Example of a simple health check endpoint that returns a JSON response indicating the application is operational. The code sets up a router with a single health endpoint.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/gorilla/mux/README.md#2025-04-10_snippet_19\n\nLANGUAGE: go\nCODE:\n```\n// endpoints.go\npackage main\n\nfunc HealthCheckHandler(w http.ResponseWriter, r *http.Request) {\n    // A very simple health check.\n    w.Header().Set(\"Content-Type\", \"application/json\")\n    w.WriteHeader(http.StatusOK)\n\n    // In the future we could report back on the status of our DB, or our cache\n    // (e.g. Redis) by performing a simple PING, and include them in the response.\n    io.WriteString(w, `{\"alive\": true}`)\n}\n\nfunc main() {\n    r := mux.NewRouter()\n    r.HandleFunc(\"/health\", HealthCheckHandler)\n\n    log.Fatal(http.ListenAndServe(\"localhost:8080\", r))\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Leave Request/Response Messages in SwarmKit Protobuf\nDESCRIPTION: Protocol Buffer definitions for LeaveRequest and LeaveResponse messages in Docker SwarmKit. These messages are used when a node requests to leave the Raft cluster, providing its node information.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/moby/swarmkit/v2/api/api.pb.txt#2025-04-10_snippet_119\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage_type {\n  name: \"LeaveRequest\"\n  field {\n    name: \"node\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".docker.swarmkit.v1.RaftMember\"\n    json_name: \"node\"\n  }\n}\nmessage_type {\n  name: \"LeaveResponse\"\n}\n```\n\n----------------------------------------\n\nTITLE: Inspecting Container Filesystem Changes\nDESCRIPTION: Makes an HTTP GET request to list changes to files or directories in a container's filesystem. This endpoint shows which files were added, deleted, or modified compared to the container's base image.\nSOURCE: https://github.com/moby/moby/blob/master/docs/api/v1.24.md#2025-04-10_snippet_21\n\nLANGUAGE: HTTP\nCODE:\n```\nGET /v1.24/containers/4fa6e0f0c678/changes HTTP/1.1\n```\n\n----------------------------------------\n\nTITLE: Configuring Unexported Fields Access\nDESCRIPTION: Shows how to enable and disable fuzzing of unexported struct fields\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/AdaLogics/go-fuzz-headers/README.md#2025-04-10_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nf.AllowUnexportedFields()\n```\n\nLANGUAGE: go\nCODE:\n```\nf.DisallowUnexportedFields()\n```\n\n----------------------------------------\n\nTITLE: Running Docker Daemon without Userland Proxy and Creating a Container with Published Port\nDESCRIPTION: Commands to run Docker daemon with userland proxy disabled, create a custom bridge network with specific subnet configuration, and run a container on that network with a published port.\nSOURCE: https://github.com/moby/moby/blob/master/integration/network/bridge/iptablesdoc/templates/usernet-portmap-noproxy.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndockerd --userland-proxy=false\ndocker network create \\\n  -o com.docker.network.bridge.name=bridge1 \\\n  --subnet 192.0.2.0/24 --gateway 192.0.2.1 bridge1\ndocker run --network bridge1 -p 8080:80 --name c1 busybox\n```\n\n----------------------------------------\n\nTITLE: Docker Network Configuration Example\nDESCRIPTION: Example of Docker network configuration options including IPv4/IPv6 settings and access restrictions.\nSOURCE: https://github.com/moby/moby/blob/master/docs/api/version-history.md#2025-04-10_snippet_15\n\nLANGUAGE: markdown\nCODE:\n```\nPOST /networks/create now supports enabling ipv6 on the network by setting the `EnableIPv6` field\nPOST /networks/(id)/connect now allows you to set the static IPv4 and/or IPv6 address for the container\nPOST /networks/create now supports restricting external access to the network by setting the `Internal` field\n```\n\n----------------------------------------\n\nTITLE: Signing Git Commits with the -s Flag\nDESCRIPTION: Example of using the -s flag with git commit to create a signed commit, which is required for contributions to the Docker registry.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/docker/distribution/CONTRIBUTING.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit commit -s -m \"My commit\"\n```\n\n----------------------------------------\n\nTITLE: Creating New Writer Instances in Go\nDESCRIPTION: Functions for creating new Writer instances with different initialization options.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/philhofer/fwd/README.md#2025-04-10_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nfunc NewWriter(w io.Writer) *Writer\n\nfunc NewWriterBuf(w io.Writer, buf []byte) *Writer\n\nfunc NewWriterSize(w io.Writer, n int) *Writer\n```\n\n----------------------------------------\n\nTITLE: Removing a Docker Swarm Service via HTTP DELETE\nDESCRIPTION: This snippet demonstrates how to remove a Docker Swarm service using the DELETE HTTP method. It includes the request format and possible response status codes.\nSOURCE: https://github.com/moby/moby/blob/master/docs/api/v1.24.md#2025-04-10_snippet_102\n\nLANGUAGE: HTTP\nCODE:\n```\nDELETE /v1.24/services/16253994b7c4 HTTP/1.1\n```\n\n----------------------------------------\n\nTITLE: Adding Metric Semantic Conventions\nDESCRIPTION: Adds metric semantic conventions to the semconv package for version 1.24.0 and future versions.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-10_snippet_13\n\nLANGUAGE: Go\nCODE:\n```\nMetric semantic conventions to go.opentelemetry.io/otel/semconv/v1.24.0\n```\n\n----------------------------------------\n\nTITLE: IPTables Filter4 Configuration View\nDESCRIPTION: Displays the contents of the filter table that Docker creates for filtering network traffic in IPv4. Shows chain structure and rule organization.\nSOURCE: https://github.com/moby/moby/blob/master/integration/network/bridge/iptablesdoc/templates/new-daemon.md#2025-04-10_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n{{index . \"LFilter4\"}}\n```\n\n----------------------------------------\n\nTITLE: Running fsnotify Tests in Shell\nDESCRIPTION: Commands for running the test suite for fsnotify. The basic command runs all tests, while the -short flag can be used to expedite stress tests.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/fsnotify/fsnotify/CONTRIBUTING.md#2025-04-10_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo test ./...\n```\n\n----------------------------------------\n\nTITLE: Applying Raft Configuration Changes in Go\nDESCRIPTION: Shows how to apply committed configuration changes by unmarshaling the change data and calling ApplyConfChange.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/go.etcd.io/etcd/raft/v3/README.md#2025-04-10_snippet_8\n\nLANGUAGE: go\nCODE:\n```\n\tvar cc raftpb.ConfChange\n\tcc.Unmarshal(data)\n\tn.ApplyConfChange(cc)\n```\n\n----------------------------------------\n\nTITLE: Defining Raft Service in Docker SwarmKit API\nDESCRIPTION: Protocol buffer definition for the Raft service used in Docker SwarmKit for cluster consensus management. It includes methods for processing and streaming Raft messages, as well as resolving node addresses.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/moby/swarmkit/v2/api/api.pb.txt#2025-04-10_snippet_125\n\nLANGUAGE: protobuf\nCODE:\n```\nservice {\n  name: \"Raft\"\n  method {\n    name: \"ProcessRaftMessage\"\n    input_type: \".docker.swarmkit.v1.ProcessRaftMessageRequest\"\n    output_type: \".docker.swarmkit.v1.ProcessRaftMessageResponse\"\n    options {\n      73626345 {\n        1: \"swarm-manager\"\n      }\n    }\n  }\n  method {\n    name: \"StreamRaftMessage\"\n    input_type: \".docker.swarmkit.v1.StreamRaftMessageRequest\"\n    output_type: \".docker.swarmkit.v1.StreamRaftMessageResponse\"\n    options {\n      73626345 {\n        1: \"swarm-manager\"\n      }\n    }\n    client_streaming: true\n  }\n  method {\n    name: \"ResolveAddress\"\n    input_type: \".docker.swarmkit.v1.ResolveAddressRequest\"\n    output_type: \".docker.swarmkit.v1.ResolveAddressResponse\"\n    options {\n      73626345 {\n        1: \"swarm-manager\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using slog.Handler as Backend for logr in Go\nDESCRIPTION: This snippet demonstrates how to use a slog.Handler as a backend for logr. It explains the mapping of logr verbosity levels to slog levels, handling of stack unwinding, and recording of logger names.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/go-logr/logr/README.md#2025-04-10_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n// Example usage:\nlogger.Error(err, \"client returned an error\", \"code\", responseCode)\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of errwrap Package in Go\nDESCRIPTION: Demonstrates the basic usage of the errwrap package, including wrapping errors, checking for contained errors, and extracting specific error types. It shows how to use Contains, ContainsType, and GetType functions.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/hashicorp/errwrap/README.md#2025-04-10_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// A function that always returns an error, but wraps it, like a real\n// function might.\nfunc tryOpen() error {\n\t_, err := os.Open(\"/i/dont/exist\")\n\tif err != nil {\n\t\treturn errwrap.Wrapf(\"Doesn't exist: {{err}}\", err)\n\t}\n\n\treturn nil\n}\n\nfunc main() {\n\terr := tryOpen()\n\n\t// We can use the Contains helpers to check if an error contains\n\t// another error. It is safe to do this with a nil error, or with\n\t// an error that doesn't even use the errwrap package.\n\tif errwrap.Contains(err, \"does not exist\") {\n\t\t// Do something\n\t}\n\tif errwrap.ContainsType(err, new(os.PathError)) {\n\t\t// Do something\n\t}\n\n\t// Or we can use the associated `Get` functions to just extract\n\t// a specific error. This would return nil if that specific error doesn't\n\t// exist.\n\tperr := errwrap.GetType(err, new(os.PathError))\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ExternalCA Message in Protocol Buffers\nDESCRIPTION: Defines a message type 'ExternalCA' with fields for protocol, URL, options, and CA certificate. It includes a nested enum 'CAProtocol' and a nested message 'OptionsEntry' for key-value pairs.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/moby/swarmkit/v2/api/api.pb.txt#2025-04-10_snippet_50\n\nLANGUAGE: Protocol Buffers\nCODE:\n```\nmessage_type {\n  name: \"ExternalCA\"\n  field {\n    name: \"protocol\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_ENUM\n    type_name: \".docker.swarmkit.v1.ExternalCA.CAProtocol\"\n    json_name: \"protocol\"\n  }\n  field {\n    name: \"url\"\n    number: 2\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    options {\n      65004: \"URL\"\n    }\n    json_name: \"url\"\n  }\n  field {\n    name: \"options\"\n    number: 3\n    label: LABEL_REPEATED\n    type: TYPE_MESSAGE\n    type_name: \".docker.swarmkit.v1.ExternalCA.OptionsEntry\"\n    json_name: \"options\"\n  }\n  field {\n    name: \"ca_cert\"\n    number: 4\n    label: LABEL_OPTIONAL\n    type: TYPE_BYTES\n    options {\n      65004: \"CACert\"\n    }\n    json_name: \"caCert\"\n  }\n  nested_type {\n    name: \"OptionsEntry\"\n    field {\n      name: \"key\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"key\"\n    }\n    field {\n      name: \"value\"\n      number: 2\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"value\"\n    }\n    options {\n      map_entry: true\n    }\n  }\n  enum_type {\n    name: \"CAProtocol\"\n    value {\n      name: \"CFSSL\"\n      number: 0\n      options {\n        66001: \"CAProtocolCFSSL\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Platform Specifier Format Definition\nDESCRIPTION: Demonstrates the format pattern for platform specifiers that allows users to specify operating system, architecture, or both with an optional variant.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/containerd/platforms/README.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<os>|<arch>|<os>/<arch>[/<variant>]\n```\n\n----------------------------------------\n\nTITLE: Container Remove API Request\nDESCRIPTION: HTTP request to remove a container from the filesystem.\nSOURCE: https://github.com/moby/moby/blob/master/docs/api/v1.24.md#2025-04-10_snippet_48\n\nLANGUAGE: http\nCODE:\n```\nDELETE /v1.24/containers/16253994b7c4?v=1 HTTP/1.1\n```\n\n----------------------------------------\n\nTITLE: Verifying Load Balancer Programming on a Node with ssd\nDESCRIPTION: This command runs the ssd tool to verify consistency between Docker network control-plane and kernel datapath programming for the 'ov2' overlay network. It checks the Load Balancer implementation using IPVS on a single node.\nSOURCE: https://github.com/moby/moby/blob/master/libnetwork/cmd/ssd/README.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -v /var/run/docker.sock:/var/run/docker.sock -v /var/run/docker/netns:/var/run/docker/netns --privileged --net=host sanimej/ssd ov2\n```\n\n----------------------------------------\n\nTITLE: Deprecated Config Fields in Image Inspection API\nDESCRIPTION: Lists deprecated configuration fields that will be removed from the GET /images/{name}/json endpoint response. These fields are currently included but not intended to be part of the image configuration response.\nSOURCE: https://github.com/moby/moby/blob/master/docs/api/version-history.md#2025-04-10_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n- Hostname\n- Domainname\n- AttachStdin\n- AttachStdout\n- AttachStderr\n- Tty\n- OpenStdin\n- StdinOnce\n- Image\n- NetworkDisabled\n- MacAddress\n- StopTimeout\n```\n\n----------------------------------------\n\nTITLE: Building and Installing Docker Daemon for Debugging\nDESCRIPTION: Commands to build the Docker daemon with debugging symbols and install it within the development container.\nSOURCE: https://github.com/moby/moby/blob/master/docs/contributing/debug.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ ./hack/make.sh binary\n$ make install\n```\n\n----------------------------------------\n\nTITLE: Freezing and Thawing a cgroup (v1)\nDESCRIPTION: Demonstrates how to freeze (suspend) and later thaw (resume) all processes in a cgroup, which is useful for migration or snapshotting.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/containerd/cgroups/v3/README.md#2025-04-10_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nif err := control.Freeze(); err != nil {\n}\nif err := control.Thaw(); err != nil {\n}\n```\n\n----------------------------------------\n\nTITLE: Adding WithProxy Option in OTLP Exporters\nDESCRIPTION: Adds WithProxy option to OTLP metric and trace HTTP exporters to allow configuring a proxy.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-10_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\nWithProxy option in go.opentelemetry.io/otel/exporters/otlp/otlpmetric/otlpmetrichttp\n```\n\nLANGUAGE: Go\nCODE:\n```\nWithProxy option in go.opentelemetry.io/otel/exporters/otlp/otlpmetric/otlptracehttp\n```\n\n----------------------------------------\n\nTITLE: Metric Export Interface\nDESCRIPTION: Changed interface example showing two-level reader pattern for metric export.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-10_snippet_31\n\nLANGUAGE: go\nCODE:\n```\n\"go.opentelemetry.io/otel/sdk/export/metric\".CheckpointSet\n\"go.opentelemetry.io/otel/sdk/export/metric\".InstrumentationLibraryReader\n```\n\n----------------------------------------\n\nTITLE: Checking Docker Group Membership on Linux\nDESCRIPTION: Command to check if the current user is a member of the docker group on Linux systems.\nSOURCE: https://github.com/moby/moby/blob/master/docs/contributing/software-required.md#2025-04-10_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ getent group docker\ndocker:x:999:ubuntu\n```\n\n----------------------------------------\n\nTITLE: Defining Containerd Checkpoint Options Protocol Structure\nDESCRIPTION: Protocol buffer schema defining the CheckpointOptions message type for container checkpointing configuration. Specifies options for managing container state during checkpoint operations.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/containerd/containerd/api/types/runc/options/next.pb.txt#2025-04-10_snippet_1\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage CheckpointOptions {\n  bool exit = 1;\n  bool open_tcp = 2;\n  bool external_unix_sockets = 3;\n  bool terminal = 4;\n  bool file_locks = 5;\n  repeated string empty_namespaces = 6;\n  string cgroups_mode = 7;\n  string image_path = 8;\n  string work_path = 9;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Batch Span Processor with Environment Variables in Go\nDESCRIPTION: Code snippet showing the environment variables used to configure the batch span processor in the OpenTelemetry Go SDK. These variables control scheduling delay, export timeout, queue size, and batch size.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-10_snippet_28\n\nLANGUAGE: Go\nCODE:\n```\nOTEL_BSP_SCHEDULE_DELAY\nOTEL_BSP_EXPORT_TIMEOUT\nOTEL_BSP_MAX_QUEUE_SIZE\nOTEL_BSP_MAX_EXPORT_BATCH_SIZE\n```\n\n----------------------------------------\n\nTITLE: Using Verifier with io.Reader in Go\nDESCRIPTION: Demonstrates how to use the Verifier type with an io.Reader for content verification. This is useful when dealing with streaming data or large files that should not be loaded entirely into memory.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/opencontainers/go-digest/README.md#2025-04-10_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nrd := getContent()\nverifier := id.Verifier()\nio.Copy(verifier, rd)\n\nif !verifier.Verified() {\n  return errors.New(\"the content has changed!\")\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Event Queue in Go\nDESCRIPTION: Demonstrates creation of an unbounded event queue that processes events asynchronously, preventing blocking during event handling.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/docker/go-events/README.md#2025-04-10_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nqueue := NewQueue(retry)\n```\n\n----------------------------------------\n\nTITLE: Migrating OTLP Usage in Go OpenTelemetry SDK\nDESCRIPTION: Updates the OTLP implementation to use the official package and switches protobuf libraries.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-10_snippet_34\n\nLANGUAGE: Go\nCODE:\n```\nMigrate from using internally built and maintained version of the OTLP to the one hosted at `go.opentelemetry.io/proto/otlp`.\nMigrate from using `github.com/gogo/protobuf` to `google.golang.org/protobuf` to match `go.opentelemetry.io/proto/otlp`.\n```\n\n----------------------------------------\n\nTITLE: Defining Join Request/Response Messages in SwarmKit Protobuf\nDESCRIPTION: Protocol Buffer definitions for JoinRequest and JoinResponse messages in Docker SwarmKit. These messages are used when a node requests to join the Raft cluster, providing its address and receiving its Raft ID and cluster membership information.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/moby/swarmkit/v2/api/api.pb.txt#2025-04-10_snippet_118\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage_type {\n  name: \"JoinRequest\"\n  field {\n    name: \"addr\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"addr\"\n  }\n}\nmessage_type {\n  name: \"JoinResponse\"\n  field {\n    name: \"raft_id\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_UINT64\n    json_name: \"raftId\"\n  }\n  field {\n    name: \"members\"\n    number: 2\n    label: LABEL_REPEATED\n    type: TYPE_MESSAGE\n    type_name: \".docker.swarmkit.v1.RaftMember\"\n    json_name: \"members\"\n  }\n  field {\n    name: \"removed_members\"\n    number: 3\n    label: LABEL_REPEATED\n    type: TYPE_UINT64\n    options {\n      packed: false\n    }\n    json_name: \"removedMembers\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing the Network Diagnostic Tool API Help Endpoint\nDESCRIPTION: Bash command to query the help endpoint of the network diagnostic tool's API, which returns a list of available endpoints.\nSOURCE: https://github.com/moby/moby/blob/master/libnetwork/cmd/diagnostic/README.md#2025-04-10_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ curl localhost:2000/help\n```\n\n----------------------------------------\n\nTITLE: Custom Claims Implementation with Validation in Go\nDESCRIPTION: Example of implementing custom claims with additional validation logic using the new ClaimsValidator interface. Shows how to extend RegisteredClaims with application-specific validation.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/golang-jwt/jwt/v5/MIGRATION_GUIDE.md#2025-04-10_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// MyCustomClaims includes all registered claims, plus Foo.\ntype MyCustomClaims struct {\n\tFoo string `json:\"foo\"`\n\tjwt.RegisteredClaims\n}\n\n// Validate can be used to execute additional application-specific claims\n// validation.\nfunc (m MyCustomClaims) Validate() error {\n\tif m.Foo != \"bar\" {\n\t\treturn errors.New(\"must be foobar\")\n\t}\n\n\treturn nil\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Request Inbound Rate for gRPC Services using Prometheus\nDESCRIPTION: This query calculates the rate of incoming requests per second for each gRPC service over a 1-minute window. It uses the 'grpc_server_started_total' metric and groups results by 'grpc_service'.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/grpc-ecosystem/go-grpc-prometheus/README.md#2025-04-10_snippet_3\n\nLANGUAGE: jsoniq\nCODE:\n```\nsum(rate(grpc_server_started_total{job=\"foo\"}[1m])) by (grpc_service)\n```\n\n----------------------------------------\n\nTITLE: Joining the Network Database Cluster\nDESCRIPTION: Bash command to join the network database cluster by providing the IP addresses of swarm nodes.\nSOURCE: https://github.com/moby/moby/blob/master/libnetwork/cmd/diagnostic/README.md#2025-04-10_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ curl localhost:2000/join?members=ip1,ip2,...\n```\n\n----------------------------------------\n\nTITLE: GET Images JSON Platform Query Example\nDESCRIPTION: Example of JSON encoded OCI Platform type parameter for image inspection\nSOURCE: https://github.com/moby/moby/blob/master/docs/api/version-history.md#2025-04-10_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET /images/{name}/json?platform={platform}\n```\n\n----------------------------------------\n\nTITLE: Installing the PackageURL Go Library\nDESCRIPTION: Commands to install the packageurl-go library using Go modules system.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/package-url/packageurl-go/README.md#2025-04-10_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo get -u github.com/package-url/packageurl-go\n```\n\n----------------------------------------\n\nTITLE: Initializing Secure Random Seed in Go\nDESCRIPTION: Example code showing how to use the seed library to initialize a secure random number generator in Go. Demonstrates both MustInit() for panic-based initialization and Init() for error handling scenarios.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/sean-/seed/README.md#2025-04-10_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage mypackage\n\nimport (\n  \"github.com/sean-/seed\"\n)\n\n// MustInit will panic() if it is unable to set a high-entropy random seed:\nfunc init() {\n  seed.MustInit()\n}\n\n// Or if you want to not panic() and can actually handle this error:\nfunc init() {\n  if secure, err := !seed.Init(); !secure {\n    // Handle the error\n    //panic(fmt.Sprintf(\"Unable to securely seed Go's RNG: %v\", err))\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding JSON Marshaling for Resources in Go SDK\nDESCRIPTION: Adds support for JSON marshaling of Resource objects in the OpenTelemetry Go SDK.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-10_snippet_45\n\nLANGUAGE: Go\nCODE:\n```\n// New functionality\njson.Marshal(resource)\n```\n\n----------------------------------------\n\nTITLE: Defining OrchestrationConfig Message in Protocol Buffers\nDESCRIPTION: Defines a message type 'OrchestrationConfig' with a field for task history retention limit. This is used for configuring task history retention in Docker SwarmKit orchestration.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/moby/swarmkit/v2/api/api.pb.txt#2025-04-10_snippet_52\n\nLANGUAGE: Protocol Buffers\nCODE:\n```\nmessage_type {\n  name: \"OrchestrationConfig\"\n  field {\n    name: \"task_history_retention_limit\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_INT64\n    json_name: \"taskHistoryRetentionLimit\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Boolean Option with Default False in Go\nDESCRIPTION: Creates an option implementation for boolean values defaulting to false, with a WithOption function that enables the option.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#2025-04-10_snippet_8\n\nLANGUAGE: go\nCODE:\n```\ntype defaultFalseOption bool\n\nfunc (o defaultFalseOption) apply(c config) config {\n\tc.Bool = bool(o)\n    return c\n}\n\n// WithOption sets a T to have an option included.\nfunc WithOption() Option {\n\treturn defaultFalseOption(true)\n}\n```\n\n----------------------------------------\n\nTITLE: Benchmark Commands for XXHash\nDESCRIPTION: Shell commands for running benchmarks comparing pure Go and assembly implementations using benchstat tool.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/cespare/xxhash/v2/README.md#2025-04-10_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nbenchstat <(go test -tags purego -benchtime 500ms -count 15 -bench 'Sum64$')\nbenchstat <(go test -benchtime 500ms -count 15 -bench 'Sum64$')\n```\n\n----------------------------------------\n\nTITLE: NAT Table IPTables Configuration\nDESCRIPTION: Shows the initial NAT table configuration with chains PREROUTING, INPUT, OUTPUT, POSTROUTING, and DOCKER. Includes packet counts, bytes, and rule specifications.\nSOURCE: https://github.com/moby/moby/blob/master/integration/network/bridge/iptablesdoc/generated/new-daemon.md#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nChain PREROUTING (policy ACCEPT 0 packets, 0 bytes)\nnum   pkts bytes target     prot opt in     out     source               destination         \n1        0     0 DOCKER     0    --  *      *       0.0.0.0/0            0.0.0.0/0            ADDRTYPE match dst-type LOCAL\n[...continued chain definitions...]\n```\n\n----------------------------------------\n\nTITLE: Calculating Average Response Stream Size for gRPC Services with Prometheus\nDESCRIPTION: This query computes the average number of messages sent per server-streaming RPC for each gRPC service over a 10-minute window. It uses the 'grpc_server_msg_sent_total' and 'grpc_server_started_total' metrics to calculate the average.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/grpc-ecosystem/go-grpc-prometheus/README.md#2025-04-10_snippet_6\n\nLANGUAGE: jsoniq\nCODE:\n```\nsum(rate(grpc_server_msg_sent_total{job=\"foo\",grpc_type=\"server_stream\"}[10m])) by (grpc_service)\n /\nsum(rate(grpc_server_started_total{job=\"foo\",grpc_type=\"server_stream\"}[10m])) by (grpc_service)\n```\n\n----------------------------------------\n\nTITLE: Custom Error Formatting in Go\nDESCRIPTION: Shows how to customize the string representation of multiple errors by setting a custom ErrorFormat function on the multierror.Error instance.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/hashicorp/go-multierror/README.md#2025-04-10_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nvar result *multierror.Error\n\n// ... accumulate errors here, maybe using Append\n\nif result != nil {\n\tresult.ErrorFormat = func([]error) string {\n\t\treturn \"errors!\"\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Restarting the Diagnostic Server in Container\nDESCRIPTION: Bash command to start the diagnostic server within the diagnostic container by sending a HUP signal to the init process.\nSOURCE: https://github.com/moby/moby/blob/master/libnetwork/cmd/diagnostic/README.md#2025-04-10_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n$ kill -HUP 1\n```\n\n----------------------------------------\n\nTITLE: IPTables Filter Table Commands\nDESCRIPTION: The exact iptables commands used to create the filter table rules for the Docker network configuration. These commands show how Docker programmatically configures iptables to enforce network isolation policies.\nSOURCE: https://github.com/moby/moby/blob/master/integration/network/bridge/iptablesdoc/generated/usernet-portmap-noicc.md#2025-04-10_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n-P INPUT ACCEPT\n-P FORWARD ACCEPT\n-P OUTPUT ACCEPT\n-N DOCKER\n-N DOCKER-BRIDGE\n-N DOCKER-CT\n-N DOCKER-FORWARD\n-N DOCKER-ISOLATION-STAGE-1\n-N DOCKER-ISOLATION-STAGE-2\n-N DOCKER-USER\n-A FORWARD -j DOCKER-USER\n-A FORWARD -j DOCKER-FORWARD\n-A DOCKER -d 192.0.2.2/32 ! -i bridge1 -o bridge1 -p tcp -m tcp --dport 80 -j ACCEPT\n-A DOCKER ! -i docker0 -o docker0 -j DROP\n-A DOCKER ! -i bridge1 -o bridge1 -j DROP\n-A DOCKER-BRIDGE -o docker0 -j DOCKER\n-A DOCKER-BRIDGE -o bridge1 -j DOCKER\n-A DOCKER-CT -o docker0 -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT\n-A DOCKER-CT -o bridge1 -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT\n-A DOCKER-FORWARD -j DOCKER-CT\n-A DOCKER-FORWARD -j DOCKER-ISOLATION-STAGE-1\n-A DOCKER-FORWARD -j DOCKER-BRIDGE\n-A DOCKER-FORWARD -i docker0 -j ACCEPT\n-A DOCKER-FORWARD -i bridge1 -o bridge1 -j DROP\n-A DOCKER-FORWARD -i bridge1 ! -o bridge1 -j ACCEPT\n-A DOCKER-ISOLATION-STAGE-1 -i docker0 ! -o docker0 -j DOCKER-ISOLATION-STAGE-2\n-A DOCKER-ISOLATION-STAGE-1 -i bridge1 ! -o bridge1 -j DOCKER-ISOLATION-STAGE-2\n-A DOCKER-ISOLATION-STAGE-2 -o bridge1 -j DROP\n-A DOCKER-ISOLATION-STAGE-2 -o docker0 -j DROP\n-A DOCKER-USER -j RETURN\n```\n\n----------------------------------------\n\nTITLE: Building and Testing Docker on Linux using Bash\nDESCRIPTION: The make.sh script is used for building and testing Docker on Linux. It can be run locally or inside a Docker development container, with different commands for various testing scenarios.\nSOURCE: https://github.com/moby/moby/blob/master/hack/README.md#2025-04-10_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\n### make.sh\n\n- Referenced via `make test` when running tests on a local machine,\nor directly referenced when running tests inside a Docker development container.  \n- When running on a local machine, `make test` to run all tests found in\n`test`, `test-unit`, `test-integration`, and `test-docker-py` on\nyour local machine. The default timeout is set in `make.sh` to 60 minutes\n(`${TIMEOUT:=60m}`), since it currently takes up to an hour to run\nall of the tests.\n- When running inside a Docker development container, `hack/make.sh` does\nnot have a single target that runs all the tests. You need to provide a\nsingle command line with multiple targets that performs the same thing.\nAn example referenced from [Run targets inside a development container](https://docs.docker.com/opensource/project/test-and-docs/#run-targets-inside-a-development-container): `root@5f8630b873fe:/go/src/github.com/moby/moby# hack/make.sh dynbinary binary test-unit test-integration test-docker-py`\n```\n\n----------------------------------------\n\nTITLE: Iptables Filter Table Configuration for NAT-Unprotected Network\nDESCRIPTION: The iptables filter table configuration showing various chains and rules for the Docker network in nat-unprotected mode.\nSOURCE: https://github.com/moby/moby/blob/master/integration/network/bridge/iptablesdoc/generated/usernet-portmap-natunprot.md#2025-04-10_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nChain INPUT (policy ACCEPT 0 packets, 0 bytes)\nnum   pkts bytes target     prot opt in     out     source               destination         \n\nChain FORWARD (policy ACCEPT 0 packets, 0 bytes)\nnum   pkts bytes target     prot opt in     out     source               destination         \n1        0     0 DOCKER-USER  0    --  *      *       0.0.0.0/0            0.0.0.0/0           \n2        0     0 DOCKER-FORWARD  0    --  *      *       0.0.0.0/0            0.0.0.0/0           \n\nChain OUTPUT (policy ACCEPT 0 packets, 0 bytes)\nnum   pkts bytes target     prot opt in     out     source               destination         \n\nChain DOCKER (2 references)\nnum   pkts bytes target     prot opt in     out     source               destination         \n1        0     0 DROP       0    --  !docker0 docker0  0.0.0.0/0            0.0.0.0/0           \n2        0     0 ACCEPT     0    --  !bridge1 bridge1  0.0.0.0/0            0.0.0.0/0           \n\nChain DOCKER-BRIDGE (1 references)\nnum   pkts bytes target     prot opt in     out     source               destination         \n1        0     0 DOCKER     0    --  *      docker0  0.0.0.0/0            0.0.0.0/0           \n2        0     0 DOCKER     0    --  *      bridge1  0.0.0.0/0            0.0.0.0/0           \n\nChain DOCKER-CT (1 references)\nnum   pkts bytes target     prot opt in     out     source               destination         \n1        0     0 ACCEPT     0    --  *      docker0  0.0.0.0/0            0.0.0.0/0            ctstate RELATED,ESTABLISHED\n2        0     0 ACCEPT     0    --  *      bridge1  0.0.0.0/0            0.0.0.0/0            ctstate RELATED,ESTABLISHED\n\nChain DOCKER-FORWARD (1 references)\nnum   pkts bytes target     prot opt in     out     source               destination         \n1        0     0 DOCKER-CT  0    --  *      *       0.0.0.0/0            0.0.0.0/0           \n2        0     0 DOCKER-ISOLATION-STAGE-1  0    --  *      *       0.0.0.0/0            0.0.0.0/0           \n3        0     0 DOCKER-BRIDGE  0    --  *      *       0.0.0.0/0            0.0.0.0/0           \n4        0     0 ACCEPT     0    --  docker0 *       0.0.0.0/0            0.0.0.0/0           \n5        0     0 ACCEPT     0    --  bridge1 *       0.0.0.0/0            0.0.0.0/0           \n\nChain DOCKER-ISOLATION-STAGE-1 (1 references)\nnum   pkts bytes target     prot opt in     out     source               destination         \n1        0     0 DOCKER-ISOLATION-STAGE-2  0    --  docker0 !docker0  0.0.0.0/0            0.0.0.0/0           \n2        0     0 DOCKER-ISOLATION-STAGE-2  0    --  bridge1 !bridge1  0.0.0.0/0            0.0.0.0/0           \n\nChain DOCKER-ISOLATION-STAGE-2 (2 references)\nnum   pkts bytes target     prot opt in     out     source               destination         \n1        0     0 DROP       0    --  *      bridge1  0.0.0.0/0            0.0.0.0/0           \n2        0     0 DROP       0    --  *      docker0  0.0.0.0/0            0.0.0.0/0           \n\nChain DOCKER-USER (1 references)\nnum   pkts bytes target     prot opt in     out     source               destination         \n1        0     0 RETURN     0    --  *      *       0.0.0.0/0            0.0.0.0/0           \n```\n\n----------------------------------------\n\nTITLE: Defining a Go interface for plugin generation\nDESCRIPTION: Example of a Go interface definition that can be used as input for the Plugin RPC Generator. This volumeDriver interface defines methods for creating, removing, mounting and unmounting volumes.\nSOURCE: https://github.com/moby/moby/blob/master/pkg/plugins/pluginrpc-gen/README.md#2025-04-10_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype volumeDriver interface {\n\tCreate(name string, opts opts) (err error)\n\tRemove(name string) (err error)\n\tPath(name string) (mountpoint string, err error)\n\tMount(name string) (mountpoint string, err error)\n\tUnmount(name string) (err error)\n}\n```\n\n----------------------------------------\n\nTITLE: Container Network Sysctl Configuration Example\nDESCRIPTION: Example of setting per-interface sysctls using DriverOpts label\nSOURCE: https://github.com/moby/moby/blob/master/docs/api/version-history.md#2025-04-10_snippet_1\n\nLANGUAGE: text\nCODE:\n```\ncom.docker.network.endpoint.sysctls=net.ipv4.config.IFNAME.log_martians=1\n```\n\n----------------------------------------\n\nTITLE: Setting Google Cloud SDK Environment Variables in Shell\nDESCRIPTION: Shell commands to set environment variables required for Google Cloud SDK integration tests. These variables include project IDs, paths to service account key files, database names, and other configuration settings needed for testing against various Google Cloud services.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/cloud.google.com/go/CONTRIBUTING.md#2025-04-10_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n# Developers Console project's ID (e.g. bamboo-shift-455) for the Bigtable project.\nexport GCLOUD_TESTS_GOLANG_SECONDARY_BIGTABLE_PROJECT_ID=your-bigtable-optional-secondary-project\n\n# The path to the JSON key file of the general project's service account.\nexport GCLOUD_TESTS_GOLANG_KEY=~/directory/your-project-abcd1234.json\n\n# Comma separated list of developer's Datastore databases. If not provided, \n# default database i.e. empty string is used.\nexport GCLOUD_TESTS_GOLANG_DATASTORE_DATABASES=your-database-1,your-database-2\n\n# Developers Console project's ID (e.g. doorway-cliff-677) for the Firestore project.\nexport GCLOUD_TESTS_GOLANG_FIRESTORE_PROJECT_ID=your-firestore-project\n\n# Comma separated list of developer's Firestore databases. If not provided, default database is used.\nexport GCLOUD_TESTS_GOLANG_FIRESTORE_DATABASES=your-database-1,your-database-2\n\n# The path to the JSON key file of the Firestore project's service account.\nexport GCLOUD_TESTS_GOLANG_FIRESTORE_KEY=~/directory/your-firestore-project-abcd1234.json\n\n# The full name of the keyring for the tests, in the form \"projects/P/locations/L/keyRings/R\".\n# The creation of this is described below.\nexport MY_KEYRING=my-golang-sdk-test\nexport MY_LOCATION=global\nexport GCLOUD_TESTS_GOLANG_KEYRING=projects/$GCLOUD_TESTS_GOLANG_PROJECT_ID/locations/$MY_LOCATION/keyRings/$MY_KEYRING\n\n# API key for using the Translate API.\nexport GCLOUD_TESTS_API_KEY=abcdefghijk123456789\n\n# Compute Engine zone. (https://cloud.google.com/compute/docs/regions-zones)\nexport GCLOUD_TESTS_GOLANG_ZONE=your-chosen-region\n```\n\n----------------------------------------\n\nTITLE: Adding SkipLineEnding Flag to EncoderConfig\nDESCRIPTION: Adds a new flag EncoderConfig.SkipLineEnding to disable adding newline characters between log statements.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/go.uber.org/zap/CHANGELOG.md#2025-04-10_snippet_2\n\nLANGUAGE: Markdown\nCODE:\n```\n[#989][]: Add `EncoderConfig.SkipLineEnding` flag to disable adding newline characters between log statements.\n```\n\n----------------------------------------\n\nTITLE: Defining TaskDefaults Message in Protocol Buffers\nDESCRIPTION: Defines a message type 'TaskDefaults' with a field for log driver. This is used for specifying default task configurations in Docker SwarmKit.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/moby/swarmkit/v2/api/api.pb.txt#2025-04-10_snippet_53\n\nLANGUAGE: Protocol Buffers\nCODE:\n```\nmessage_type {\n  name: \"TaskDefaults\"\n  field {\n    name: \"log_driver\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".docker.swarmkit.v1.Driver\"\n    json_name: \"logDriver\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying PkgGoDev Badge for SDK Trace Package in Markdown\nDESCRIPTION: This snippet shows how to embed a PkgGoDev badge in a Markdown file, linking to the documentation for the SDK Trace package from the OpenTelemetry Go library.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/go.opentelemetry.io/otel/sdk/trace/README.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![PkgGoDev](https://pkg.go.dev/badge/go.opentelemetry.io/otel/sdk/trace)](https://pkg.go.dev/go.opentelemetry.io/otel/sdk/trace)\n```\n\n----------------------------------------\n\nTITLE: Running vet script in gRPC-Go project\nDESCRIPTION: Command to run the vet script which catches static analysis errors in the codebase. This is a required check before submitting a pull request.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/google.golang.org/grpc/CONTRIBUTING.md#2025-04-10_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n./scripts/vet.sh\n```\n\n----------------------------------------\n\nTITLE: Defining Reader Struct in Go\nDESCRIPTION: Declares the Reader struct type for buffered look-ahead reading operations.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/philhofer/fwd/README.md#2025-04-10_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype Reader struct {\n    // contains filtered or unexported fields\n}\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Configuration Example\nDESCRIPTION: Shows configuration of metric export timing using environment variables OTEL_METRIC_EXPORT_INTERVAL and OTEL_METRIC_EXPORT_TIMEOUT.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-10_snippet_19\n\nLANGUAGE: go\nCODE:\n```\nOTEL_METRIC_EXPORT_INTERVAL=\"<duration>\" \nOTEL_METRIC_EXPORT_TIMEOUT=\"<duration>\"\n```\n\n----------------------------------------\n\nTITLE: Using Labeled Timer Metrics in Go\nDESCRIPTION: Demonstrates how to update a labeled timer metric with specific action values.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/docker/go-metrics/README.md#2025-04-10_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ncontainerActions.WithValues(\"create\").UpdateSince(start)\n```\n\n----------------------------------------\n\nTITLE: Developer Certificate of Origin Text\nDESCRIPTION: The full text of the Developer Certificate of Origin v1.1 that contributors must agree to when making contributions to the project.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/docker/go-metrics/CONTRIBUTING.md#2025-04-10_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nDeveloper Certificate of Origin\nVersion 1.1\n\nCopyright (C) 2004, 2006 The Linux Foundation and its contributors.\n660 York Street, Suite 102,\nSan Francisco, CA 94110 USA\n\nEveryone is permitted to copy and distribute verbatim copies of this\nlicense document, but changing it is not allowed.\n\nDeveloper's Certificate of Origin 1.1\n\nBy making a contribution to this project, I certify that:\n\n(a) The contribution was created in whole or in part by me and I\n    have the right to submit it under the open source license\n    indicated in the file; or\n\n(b) The contribution is based upon previous work that, to the best\n    of my knowledge, is covered under an appropriate open source\n    license and I have the right under that license to submit that\n    work with modifications, whether created in whole or in part\n    by me, under the same open source license (unless I am\n    permitted to submit under a different license), as indicated\n    in the file; or\n\n(c) The contribution was provided directly to me by some other\n    person who certified (a), (b) or (c) and I have not modified\n    it.\n\n(d) I understand and agree that this project and the contribution\n    are public and that a record of the contribution (including all\n    personal information I submit with it, including my sign-off) is\n    maintained indefinitely and may be redistributed consistent with\n    this project or the open source license(s) involved.\n```\n\n----------------------------------------\n\nTITLE: Configuring CFSSL Database Connection for MySQL\nDESCRIPTION: JSON configuration example for connecting CFSSL to a MySQL database. This configuration is used with the -db-config flag in CFSSL commands and includes the parseTime parameter needed for proper date handling.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/cloudflare/cfssl/certdb/README.md#2025-04-10_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\"driver\":\"mysql\",\"data_source\":\"user:password@tcp(hostname:3306)/db?parseTime=true\"}\n```\n\n----------------------------------------\n\nTITLE: Defining Driver Message in Protocol Buffers\nDESCRIPTION: Defines a message type 'Driver' with fields for name and options. It includes a nested message type 'OptionsEntry' for key-value pairs, likely used for driver configuration in Docker SwarmKit.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/moby/swarmkit/v2/api/api.pb.txt#2025-04-10_snippet_45\n\nLANGUAGE: Protocol Buffers\nCODE:\n```\nmessage_type {\n  name: \"Driver\"\n  field {\n    name: \"name\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"name\"\n  }\n  field {\n    name: \"options\"\n    number: 2\n    label: LABEL_REPEATED\n    type: TYPE_MESSAGE\n    type_name: \".docker.swarmkit.v1.Driver.OptionsEntry\"\n    json_name: \"options\"\n  }\n  nested_type {\n    name: \"OptionsEntry\"\n    field {\n      name: \"key\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"key\"\n    }\n    field {\n      name: \"value\"\n      number: 2\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"value\"\n    }\n    options {\n      map_entry: true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Buffered File Writing with BitSet in Go\nDESCRIPTION: Example of using buffered I/O for improved performance when writing BitSets to files.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/bits-and-blooms/bitset/README.md#2025-04-10_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n\tf, err := os.Create(\"myfile\")\n\tw := bufio.NewWriter(f)\n```\n\n----------------------------------------\n\nTITLE: Dumping Database Tables\nDESCRIPTION: Bash command to retrieve the contents of a specific database table for a network. Tables can be endpoint_table or overlay_peer_table.\nSOURCE: https://github.com/moby/moby/blob/master/libnetwork/cmd/diagnostic/README.md#2025-04-10_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$ curl localhost:2000/gettable?nid=<network id>&tname=<table name>\n```\n\n----------------------------------------\n\nTITLE: Filter Table Iptables Commands\nDESCRIPTION: The iptables commands that generate the filter table rules for Docker networking, showing how Docker configures connectivity, isolation, and port forwarding.\nSOURCE: https://github.com/moby/moby/blob/master/integration/network/bridge/iptablesdoc/generated/usernet-portmap.md#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n-P INPUT ACCEPT\n-P FORWARD ACCEPT\n-P OUTPUT ACCEPT\n-N DOCKER\n-N DOCKER-BRIDGE\n-N DOCKER-CT\n-N DOCKER-FORWARD\n-N DOCKER-ISOLATION-STAGE-1\n-N DOCKER-ISOLATION-STAGE-2\n-N DOCKER-USER\n-A FORWARD -j DOCKER-USER\n-A FORWARD -j DOCKER-FORWARD\n-A DOCKER -d 192.0.2.2/32 ! -i bridge1 -o bridge1 -p tcp -m tcp --dport 80 -j ACCEPT\n-A DOCKER ! -i docker0 -o docker0 -j DROP\n-A DOCKER ! -i bridge1 -o bridge1 -j DROP\n-A DOCKER-BRIDGE -o docker0 -j DOCKER\n-A DOCKER-BRIDGE -o bridge1 -j DOCKER\n-A DOCKER-CT -o docker0 -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT\n-A DOCKER-CT -o bridge1 -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT\n-A DOCKER-FORWARD -j DOCKER-CT\n-A DOCKER-FORWARD -j DOCKER-ISOLATION-STAGE-1\n-A DOCKER-FORWARD -j DOCKER-BRIDGE\n-A DOCKER-FORWARD -i docker0 -j ACCEPT\n-A DOCKER-FORWARD -i bridge1 -j ACCEPT\n-A DOCKER-ISOLATION-STAGE-1 -i docker0 ! -o docker0 -j DOCKER-ISOLATION-STAGE-2\n-A DOCKER-ISOLATION-STAGE-1 -i bridge1 ! -o bridge1 -j DOCKER-ISOLATION-STAGE-2\n-A DOCKER-ISOLATION-STAGE-2 -o bridge1 -j DROP\n-A DOCKER-ISOLATION-STAGE-2 -o docker0 -j DROP\n-A DOCKER-USER -j RETURN\n```\n\n----------------------------------------\n\nTITLE: Configuring VSCode for golangci-lint\nDESCRIPTION: JSON configuration for setting up golangci-lint in VSCode. This snippet shows how to configure VSCode to use golangci-lint as the linting tool and to lint on save for Go packages.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/Microsoft/go-winio/README.md#2025-04-10_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"go.lintTool\": \"golangci-lint\",\n    \"go.lintOnSave\": \"package\"\n}\n```\n\n----------------------------------------\n\nTITLE: Iptables Commands for NAT-Unprotected Network Configuration\nDESCRIPTION: The iptables commands used to set up the filter table rules for the Docker network in nat-unprotected mode.\nSOURCE: https://github.com/moby/moby/blob/master/integration/network/bridge/iptablesdoc/generated/usernet-portmap-natunprot.md#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n-P INPUT ACCEPT\n-P FORWARD ACCEPT\n-P OUTPUT ACCEPT\n-N DOCKER\n-N DOCKER-BRIDGE\n-N DOCKER-CT\n-N DOCKER-FORWARD\n-N DOCKER-ISOLATION-STAGE-1\n-N DOCKER-ISOLATION-STAGE-2\n-N DOCKER-USER\n-A FORWARD -j DOCKER-USER\n-A FORWARD -j DOCKER-FORWARD\n-A DOCKER ! -i docker0 -o docker0 -j DROP\n-A DOCKER ! -i bridge1 -o bridge1 -j ACCEPT\n-A DOCKER-BRIDGE -o docker0 -j DOCKER\n-A DOCKER-BRIDGE -o bridge1 -j DOCKER\n-A DOCKER-CT -o docker0 -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT\n-A DOCKER-CT -o bridge1 -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT\n-A DOCKER-FORWARD -j DOCKER-CT\n-A DOCKER-FORWARD -j DOCKER-ISOLATION-STAGE-1\n-A DOCKER-FORWARD -j DOCKER-BRIDGE\n-A DOCKER-FORWARD -i docker0 -j ACCEPT\n-A DOCKER-FORWARD -i bridge1 -j ACCEPT\n-A DOCKER-ISOLATION-STAGE-1 -i docker0 ! -o docker0 -j DOCKER-ISOLATION-STAGE-2\n-A DOCKER-ISOLATION-STAGE-1 -i bridge1 ! -o bridge1 -j DOCKER-ISOLATION-STAGE-2\n-A DOCKER-ISOLATION-STAGE-2 -o bridge1 -j DROP\n-A DOCKER-ISOLATION-STAGE-2 -o docker0 -j DROP\n-A DOCKER-USER -j RETURN\n```\n\n----------------------------------------\n\nTITLE: Building from Local Source with BuildKit\nDESCRIPTION: Command showing how to build from local source files using buildctl with the local directory mapping option.\nSOURCE: https://github.com/moby/moby/blob/master/reports/builder/2017-07-17.md#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngo run ./examples/buildkit3/buildkit.go --local  | buildctl build --local buildkit-src=.\n```\n\n----------------------------------------\n\nTITLE: Creating Cluster Volumes in Docker API\nDESCRIPTION: The POST /volumes/create endpoint now accepts a new 'ClusterVolumeSpec' to create a cluster volume (CNI). This option is only available when the daemon is a Swarm manager. The response now includes a 'ClusterVolume' field with information about the created volume.\nSOURCE: https://github.com/moby/moby/blob/master/docs/api/version-history.md#2025-04-10_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n* `POST /volumes/create` now accepts a new `ClusterVolumeSpec` to create a cluster\n  volume (CNI). This option can only be used if the daemon is a Swarm manager.\n  The Volume response on creation now also can contain a `ClusterVolume` field\n  with information about the created volume.\n```\n\n----------------------------------------\n\nTITLE: Running coverage check with ci.sh script\nDESCRIPTION: Command to check if code changes lower coverage using the project's CI script.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/pelletier/go-toml/v2/CONTRIBUTING.md#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./ci.sh coverage -d v2\n```\n\n----------------------------------------\n\nTITLE: Displaying Go Package Badge for OpenTelemetry Codes Package\nDESCRIPTION: Markdown code for displaying a PkgGoDev badge that links to the OpenTelemetry codes package documentation. The badge indicates the package is available on pkg.go.dev and provides a direct link to its documentation.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/go.opentelemetry.io/otel/codes/README.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![PkgGoDev](https://pkg.go.dev/badge/go.opentelemetry.io/otel/codes)](https://pkg.go.dev/go.opentelemetry.io/otel/codes)\n```\n\n----------------------------------------\n\nTITLE: Defining IPAMOptions Message in Protocol Buffers\nDESCRIPTION: Defines a message type 'IPAMOptions' with fields for driver and configs. This is likely used for IP Address Management configuration in Docker SwarmKit networking.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/moby/swarmkit/v2/api/api.pb.txt#2025-04-10_snippet_46\n\nLANGUAGE: Protocol Buffers\nCODE:\n```\nmessage_type {\n  name: \"IPAMOptions\"\n  field {\n    name: \"driver\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".docker.swarmkit.v1.Driver\"\n    json_name: \"driver\"\n  }\n  field {\n    name: \"configs\"\n    number: 3\n    label: LABEL_REPEATED\n    type: TYPE_MESSAGE\n    type_name: \".docker.swarmkit.v1.IPAMConfig\"\n    json_name: \"configs\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Meta Message Type in Protocol Buffers for Docker Swarmkit\nDESCRIPTION: This snippet defines the Meta message type, which includes fields for version information and timestamps. It's used to store metadata for various Swarmkit components.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/moby/swarmkit/v2/api/api.pb.txt#2025-04-10_snippet_76\n\nLANGUAGE: Protocol Buffers\nCODE:\n```\nmessage_type {\n  name: \"Meta\"\n  field {\n    name: \"version\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".docker.swarmkit.v1.Version\"\n    options {\n      65001: 0\n    }\n    json_name: \"version\"\n  }\n  field {\n    name: \"created_at\"\n    number: 2\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".google.protobuf.Timestamp\"\n    json_name: \"createdAt\"\n  }\n  field {\n    name: \"updated_at\"\n    number: 3\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".google.protobuf.Timestamp\"\n    json_name: \"updatedAt\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Docker Registry Authentication JSON Response\nDESCRIPTION: Example JSON response for a Docker registry authentication request. It includes the login status and an identity token for accessing the registry without a password.\nSOURCE: https://github.com/moby/moby/blob/master/docs/api/v1.24.md#2025-04-10_snippet_63\n\nLANGUAGE: json\nCODE:\n```\n{\n     \"Status\": \"Login Succeeded\",\n     \"IdentityToken\": \"9cbaf023786cd7...\"\n}\n```\n\n----------------------------------------\n\nTITLE: Developer Certificate of Origin Text for Contributors\nDESCRIPTION: The complete text of the Developer Certificate of Origin (DCO) version 1.1 that contributors must certify to when making contributions to the project. This certification ensures contributors have the right to submit their code under the project's open source license.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/docker/go-units/CONTRIBUTING.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nDeveloper Certificate of Origin\nVersion 1.1\n\nCopyright (C) 2004, 2006 The Linux Foundation and its contributors.\n660 York Street, Suite 102,\nSan Francisco, CA 94110 USA\n\nEveryone is permitted to copy and distribute verbatim copies of this\nlicense document, but changing it is not allowed.\n\nDeveloper's Certificate of Origin 1.1\n\nBy making a contribution to this project, I certify that:\n\n(a) The contribution was created in whole or in part by me and I\n    have the right to submit it under the open source license\n    indicated in the file; or\n\n(b) The contribution is based upon previous work that, to the best\n    of my knowledge, is covered under an appropriate open source\n    license and I have the right under that license to submit that\n    work with modifications, whether created in whole or in part\n    by me, under the same open source license (unless I am\n    permitted to submit under a different license), as indicated\n    in the file; or\n\n(c) The contribution was provided directly to me by some other\n    person who certified (a), (b) or (c) and I have not modified\n    it.\n\n(d) I understand and agree that this project and the contribution\n    are public and that a record of the contribution (including all\n    personal information I submit with it, including my sign-off) is\n    maintained indefinitely and may be redistributed consistent with\n    this project or the open source license(s) involved.\n```\n\n----------------------------------------\n\nTITLE: Retrieving Values from BoltDB in Go\nDESCRIPTION: This snippet demonstrates how to retrieve a value for a given key from a bucket in BoltDB. It uses the Bucket.Get() function to fetch the value of the 'answer' key from the 'MyBucket' bucket.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/go.etcd.io/bbolt/README.md#2025-04-10_snippet_13\n\nLANGUAGE: go\nCODE:\n```\ndb.View(func(tx *bolt.Tx) error {\n\tb := tx.Bucket([]byte(\"MyBucket\"))\n\tv := b.Get([]byte(\"answer\"))\n\tfmt.Printf(\"The answer is: %s\\n\", v)\n\treturn nil\n})\n```\n\n----------------------------------------\n\nTITLE: Response for Successful Docker Volume Creation\nDESCRIPTION: HTTP response for a successful Docker volume creation, including details about the new volume such as Name, Driver, Mountpoint, and Labels.\nSOURCE: https://github.com/moby/moby/blob/master/docs/api/v1.24.md#2025-04-10_snippet_81\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Name\": \"tardis\",\n  \"Driver\": \"custom\",\n  \"Mountpoint\": \"/var/lib/docker/volumes/tardis\",\n  \"Status\": {\n    \"hello\": \"world\"\n  },\n  \"Labels\": {\n    \"com.example.some-label\": \"some-value\",\n    \"com.example.some-other-label\": \"some-other-value\"\n  },\n  \"Scope\": \"local\"\n}\n```\n\n----------------------------------------\n\nTITLE: Managing SQLite Database with Goose\nDESCRIPTION: Commands to set up and tear down a SQLite database using goose migrations. These commands initialize the schema needed for CFSSL certificate operations.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/cloudflare/cfssl/certdb/README.md#2025-04-10_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngoose -path certdb/sqlite up\n```\n\nLANGUAGE: bash\nCODE:\n```\ngoose -path certdb/sqlite down\n```\n\n----------------------------------------\n\nTITLE: Buffered File Reading with BitSet in Go\nDESCRIPTION: Example of using buffered I/O for improved performance when reading BitSets from files.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/bits-and-blooms/bitset/README.md#2025-04-10_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n\tf, err := os.Open(\"myfile\")\n\tr := bufio.NewReader(f)\n```\n\n----------------------------------------\n\nTITLE: Checking Gossip Protocol Consistency Across Cluster Nodes with ssd\nDESCRIPTION: This command runs the 'gossip-consistency' subcommand of ssd to verify if the network state maintained by all nodes in a Docker swarm cluster is consistent for the 'ov2' network. It displays a hash digest of the control-plane state from each node.\nSOURCE: https://github.com/moby/moby/blob/master/libnetwork/cmd/ssd/README.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -v /var/run/docker.sock:/var/run/docker.sock -v /var/run/docker/netns:/var/run/docker/netns --privileged sanimej/ssd ov2 gossip-consistency\n```\n\n----------------------------------------\n\nTITLE: Defining Mount.BindOptions Message in Protocol Buffers\nDESCRIPTION: This nested message defines bind mount options for Docker containers, including propagation type, non-recursive binding, mount point creation, and read-only flags that control how host directories are mounted into containers.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/moby/swarmkit/v2/api/api.pb.txt#2025-04-10_snippet_30\n\nLANGUAGE: protobuf\nCODE:\n```\nnested_type {\n  name: \"BindOptions\"\n  field {\n    name: \"propagation\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_ENUM\n    type_name: \".docker.swarmkit.v1.Mount.BindOptions.Propagation\"\n    json_name: \"propagation\"\n  }\n  field {\n    name: \"nonrecursive\"\n    number: 2\n    label: LABEL_OPTIONAL\n    type: TYPE_BOOL\n    options {\n      65004: \"NonRecursive\"\n    }\n    json_name: \"nonrecursive\"\n  }\n  field {\n    name: \"createmountpoint\"\n    number: 3\n    label: LABEL_OPTIONAL\n    type: TYPE_BOOL\n    options {\n      65004: \"CreateMountpoint\"\n    }\n    json_name: \"createmountpoint\"\n  }\n  field {\n    name: \"readonlynonrecursive\"\n    number: 4\n    label: LABEL_OPTIONAL\n    type: TYPE_BOOL\n    options {\n      65004: \"ReadOnlyNonRecursive\"\n    }\n    json_name: \"readonlynonrecursive\"\n  }\n  field {\n    name: \"readonlyforcerecursive\"\n    number: 5\n    label: LABEL_OPTIONAL\n    type: TYPE_BOOL\n    options {\n      65004: \"ReadOnlyForceRecursive\"\n    }\n    json_name: \"readonlyforcerecursive\"\n  }\n  enum_type {\n    name: \"Propagation\"\n    value {\n      name: \"RPRIVATE\"\n      number: 0\n      options {\n        66001: \"MountPropagationRPrivate\"\n      }\n    }\n    value {\n      name: \"PRIVATE\"\n      number: 1\n      options {\n        66001: \"MountPropagationPrivate\"\n      }\n    }\n    value {\n      name: \"RSHARED\"\n      number: 2\n      options {\n        66001: \"MountPropagationRShared\"\n      }\n    }\n    value {\n      name: \"SHARED\"\n      number: 3\n      options {\n        66001: \"MountPropagationShared\"\n      }\n    }\n    value {\n      name: \"RSLAVE\"\n      number: 4\n      options {\n        66001: \"MountPropagationRSlave\"\n      }\n    }\n    value {\n      name: \"SLAVE\"\n      number: 5\n      options {\n        66001: \"MountPropagationSlave\"\n      }\n    }\n    options {\n      62001: 0\n      62023: \"MountPropagation\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Terminal Progress Bar Implementation\nDESCRIPTION: Complete example showing how to create an animated progress bar using ANSI escape codes for cursor movement and colors\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/morikuni/aec/README.md#2025-04-10_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"time\"\n\n\t\"github.com/morikuni/aec\"\n)\n\nfunc main() {\n\tconst n = 20\n\tbuilder := aec.EmptyBuilder\n\n\tup2 := aec.Up(2)\n\tcol := aec.Column(n + 2)\n\tbar := aec.Color8BitF(aec.NewRGB8Bit(64, 255, 64))\n\tlabel := builder.LightRedF().Underline().With(col).Right(1).ANSI\n\n\t// for up2\n\tfmt.Println()\n\tfmt.Println()\n\n\tfor i := 0; i <= n; i++ {\n\t\tfmt.Print(up2)\n\t\tfmt.Println(label.Apply(fmt.Sprint(i, \"/\", n)))\n\t\tfmt.Print(\"[\")\n\t\tfmt.Print(bar.Apply(strings.Repeat(\"=\", i)))\n\t\tfmt.Println(col.Apply(\"]\")\n\t\ttime.Sleep(100 * time.Millisecond)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Installing bbolt using Go Get\nDESCRIPTION: Command to install bbolt library using Go's package management system.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/go.etcd.io/bbolt/README.md#2025-04-10_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ go get go.etcd.io/bbolt@latest\n```\n\n----------------------------------------\n\nTITLE: Generating Build Definition Graph with llb Client Library in Go\nDESCRIPTION: The llb client package is a Go library for generating build definition graphs. It uses chained methods to describe execution steps and supports adding mounts for multiple inputs or outputs. Calling Marshal() on a leaf node generates the protobuf definition for the entire build graph.\nSOURCE: https://github.com/moby/moby/blob/master/reports/builder/2017-06-26.md#2025-04-10_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\n// Example usage of llb client library\nnode := llb.Image(\"base-image\")\n    .Run(llb.Shlex(\"apt-get update\"))\n    .Run(llb.Shlex(\"apt-get install -y package\"))\n    .File(llb.Mkdir(\"/app\", 0755))\n    .File(llb.Copy(llb.Local(\"src\"), \".\", \"/app\"))\n\ndef, err := node.Marshal()\n```\n\n----------------------------------------\n\nTITLE: Create Endpoint Request in Remote Driver Protocol\nDESCRIPTION: LibNetwork sends a request to create an endpoint, including network ID, endpoint ID, options, and interface details.\nSOURCE: https://github.com/moby/moby/blob/master/libnetwork/docs/remote.md#2025-04-10_snippet_6\n\nLANGUAGE: JSON\nCODE:\n```\n{\n\t\t\"NetworkID\": string,\n\t\t\"EndpointID\": string,\n\t\t\"Options\": {\n\t\t\t...\n\t\t},\n\t\t\"Interface\": {\n\t\t\t\"Address\": string,\n\t\t\t\"AddressIPv6\": string,\n\t\t\t\"MacAddress\": string\n\t\t}\n    }\n```\n\n----------------------------------------\n\nTITLE: Benchmark Results for Zstandard Decoder in Go\nDESCRIPTION: Shows performance benchmarks for the decoder on various inputs, including streaming decodes and smaller inputs. Includes metrics for speed (MB/s), allocations, and compression ratios.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/klauspost/compress/zstd/README.md#2025-04-10_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nBenchmarkDecoderSilesia-32    \t                   5\t 206878840 ns/op\t1024.50 MB/s\t   49808 B/op\t      43 allocs/op\nBenchmarkDecoderEnwik9-32                          1\t1271809000 ns/op\t 786.28 MB/s\t   72048 B/op\t      52 allocs/op\n\nConcurrent blocks, performance:\n\nBenchmarkDecoder_DecodeAllParallel/kppkn.gtb.zst-32         \t   67356\t     17857 ns/op\t10321.96 MB/s\t        22.48 pct\t     102 B/op\t       0 allocs/op\nBenchmarkDecoder_DecodeAllParallel/geo.protodata.zst-32     \t  266656\t      4421 ns/op\t26823.21 MB/s\t        11.89 pct\t      19 B/op\t       0 allocs/op\nBenchmarkDecoder_DecodeAllParallel/plrabn12.txt.zst-32      \t   20992\t     56842 ns/op\t8477.17 MB/s\t        39.90 pct\t     754 B/op\t       0 allocs/op\nBenchmarkDecoder_DecodeAllParallel/lcet10.txt.zst-32        \t   27456\t     43932 ns/op\t9714.01 MB/s\t        33.27 pct\t     524 B/op\t       0 allocs/op\nBenchmarkDecoder_DecodeAllParallel/asyoulik.txt.zst-32      \t   78432\t     15047 ns/op\t8319.15 MB/s\t        40.34 pct\t      66 B/op\t       0 allocs/op\nBenchmarkDecoder_DecodeAllParallel/alice29.txt.zst-32       \t   65800\t     18436 ns/op\t8249.63 MB/s\t        37.75 pct\t      88 B/op\t       0 allocs/op\nBenchmarkDecoder_DecodeAllParallel/html_x_4.zst-32          \t  102993\t     11523 ns/op\t35546.09 MB/s\t         3.637 pct\t     143 B/op\t       0 allocs/op\nBenchmarkDecoder_DecodeAllParallel/paper-100k.pdf.zst-32    \t 1000000\t      1070 ns/op\t95720.98 MB/s\t        80.53 pct\t       3 B/op\t       0 allocs/op\nBenchmarkDecoder_DecodeAllParallel/fireworks.jpeg.zst-32    \t  749802\t      1752 ns/op\t70272.35 MB/s\t       100.0 pct\t       5 B/op\t       0 allocs/op\nBenchmarkDecoder_DecodeAllParallel/urls.10K.zst-32          \t   22640\t     52934 ns/op\t13263.37 MB/s\t        26.25 pct\t    1014 B/op\t       0 allocs/op\nBenchmarkDecoder_DecodeAllParallel/html.zst-32              \t  226412\t      5232 ns/op\t19572.27 MB/s\t        14.49 pct\t      20 B/op\t       0 allocs/op\nBenchmarkDecoder_DecodeAllParallel/comp-data.bin.zst-32     \t  923041\t      1276 ns/op\t3194.71 MB/s\t        31.26 pct\t       0 B/op\t       0 allocs/op\n```\n\n----------------------------------------\n\nTITLE: Inspecting a Docker Swarm Service via HTTP GET\nDESCRIPTION: This snippet shows how to inspect a Docker Swarm service using the GET HTTP method. It includes the request format and an example JSON response containing detailed service information.\nSOURCE: https://github.com/moby/moby/blob/master/docs/api/v1.24.md#2025-04-10_snippet_103\n\nLANGUAGE: HTTP\nCODE:\n```\nGET /v1.24/services/1cb4dnqcyx6m66g2t538x3rxha HTTP/1.1\n```\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"ID\": \"ak7w3gjqoa3kuz8xcpnyy0pvl\",\n  \"Version\": {\n    \"Index\": 95\n  },\n  \"CreatedAt\": \"2016-06-07T21:10:20.269723157Z\",\n  \"UpdatedAt\": \"2016-06-07T21:10:20.276301259Z\",\n  \"Spec\": {\n    \"Name\": \"redis\",\n    \"TaskTemplate\": {\n      \"ContainerSpec\": {\n        \"Image\": \"redis\"\n      },\n      \"Resources\": {\n        \"Limits\": {},\n        \"Reservations\": {}\n      },\n      \"RestartPolicy\": {\n        \"Condition\": \"any\",\n        \"MaxAttempts\": 0\n      },\n      \"Placement\": {}\n    },\n    \"Mode\": {\n      \"Replicated\": {\n        \"Replicas\": 1\n      }\n    },\n    \"UpdateConfig\": {\n      \"Parallelism\": 1,\n      \"FailureAction\": \"pause\"\n    },\n    \"EndpointSpec\": {\n      \"Mode\": \"vip\",\n      \"Ports\": [\n        {\n          \"Protocol\": \"tcp\",\n          \"TargetPort\": 6379,\n          \"PublishedPort\": 30001\n        }\n      ]\n    }\n  },\n  \"Endpoint\": {\n    \"Spec\": {\n      \"Mode\": \"vip\",\n      \"Ports\": [\n        {\n          \"Protocol\": \"tcp\",\n          \"TargetPort\": 6379,\n          \"PublishedPort\": 30001\n        }\n      ]\n    },\n    \"Ports\": [\n      {\n        \"Protocol\": \"tcp\",\n        \"TargetPort\": 6379,\n        \"PublishedPort\": 30001\n      }\n    ],\n    \"VirtualIPs\": [\n      {\n        \"NetworkID\": \"4qvuz4ko70xaltuqbt8956gd1\",\n        \"Addr\": \"10.255.0.4/16\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Timestamp Message in Protocol Buffers\nDESCRIPTION: Defines the Timestamp message type with seconds and nanos fields. Includes package options for various programming languages.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/moby/swarmkit/v2/api/api.pb.txt#2025-04-10_snippet_0\n\nLANGUAGE: Protocol Buffers\nCODE:\n```\nfile {\n  name: \"google/protobuf/timestamp.proto\"\n  package: \"google.protobuf\"\n  message_type {\n    name: \"Timestamp\"\n    field {\n      name: \"seconds\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_INT64\n      json_name: \"seconds\"\n    }\n    field {\n      name: \"nanos\"\n      number: 2\n      label: LABEL_OPTIONAL\n      type: TYPE_INT32\n      json_name: \"nanos\"\n    }\n  }\n  options {\n    java_package: \"com.google.protobuf\"\n    java_outer_classname: \"TimestampProto\"\n    java_multiple_files: true\n    go_package: \"github.com/golang/protobuf/ptypes/timestamp\"\n    cc_enable_arenas: true\n    objc_class_prefix: \"GPB\"\n    csharp_namespace: \"Google.Protobuf.WellKnownTypes\"\n  }\n  syntax: \"proto3\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining VolumeCapability Message in Protocol Buffers\nDESCRIPTION: Defines the VolumeCapability message type with nested types for block and mount volumes, and access modes. This structure describes the capabilities of a volume in Docker Swarm.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/moby/swarmkit/v2/api/api.pb.txt#2025-04-10_snippet_60\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage VolumeCapability {\n  oneof access_type {\n    BlockVolume block = 1;\n    MountVolume mount = 2;\n  }\n  AccessMode access_mode = 3;\n\n  message BlockVolume {}\n\n  message MountVolume {\n    string fs_type = 1;\n    repeated string mount_flags = 2;\n  }\n\n  message AccessMode {\n    enum Mode {\n      UNKNOWN = 0;\n      SINGLE_NODE_WRITER = 1;\n      SINGLE_NODE_READER_ONLY = 2;\n      MULTI_NODE_READER_ONLY = 3;\n      MULTI_NODE_SINGLE_WRITER = 4;\n      MULTI_NODE_MULTI_WRITER = 5;\n    }\n    Mode mode = 1;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Platform Mismatch Warning in Container Creation\nDESCRIPTION: Example of a warning message returned when creating a container with an image whose platform doesn't match the host platform and no specific platform was requested.\nSOURCE: https://github.com/moby/moby/blob/master/docs/api/version-history.md#2025-04-10_snippet_12\n\nLANGUAGE: plaintext\nCODE:\n```\nWARNING: The requested image's platform (linux/arm64/v8) does not\n           match the detected host platform (linux/amd64) and no\n           specific platform was requested\n```\n\n----------------------------------------\n\nTITLE: Flag Name Normalization\nDESCRIPTION: Examples of implementing custom flag name normalization functions.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/spf13/pflag/README.md#2025-04-10_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nfunc wordSepNormalizeFunc(f *pflag.FlagSet, name string) pflag.NormalizedName {\n\tfrom := []string{\"-\", \"_\"}\n\tto := \".\"\n\tfor _, sep := range from {\n\t\tname = strings.Replace(name, sep, to, -1)\n\t}\n\treturn pflag.NormalizedName(name)\n}\n\nmyFlagSet.SetNormalizeFunc(wordSepNormalizeFunc)\n```\n\nLANGUAGE: go\nCODE:\n```\nfunc aliasNormalizeFunc(f *pflag.FlagSet, name string) pflag.NormalizedName {\n\tswitch name {\n\tcase \"old-flag-name\":\n\t\tname = \"new-flag-name\"\n\t\tbreak\n\t}\n\treturn pflag.NormalizedName(name)\n}\n\nmyFlagSet.SetNormalizeFunc(aliasNormalizeFunc)\n```\n\n----------------------------------------\n\nTITLE: Creating a New Branch for Zap Contributions\nDESCRIPTION: This snippet shows the process of creating a new branch for making changes to Zap, including updating the local master branch with the latest upstream changes.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/go.uber.org/zap/CONTRIBUTING.md#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd $GOPATH/src/go.uber.org/zap\ngit checkout master\ngit fetch upstream\ngit rebase upstream/master\ngit checkout -b cool_new_feature\n```\n\n----------------------------------------\n\nTITLE: Hashing Complex Struct in Go using Hashstructure\nDESCRIPTION: Example demonstrating how to use the hashstructure library to generate a hash for a complex struct containing nested data types. It showcases the library's ability to handle various data types including strings, integers, maps, and slices.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/mitchellh/hashstructure/v2/README.md#2025-04-10_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype ComplexStruct struct {\n    Name     string\n    Age      uint\n    Metadata map[string]interface{}\n}\n\nv := ComplexStruct{\n    Name: \"mitchellh\",\n    Age:  64,\n    Metadata: map[string]interface{}{\n        \"car\":      true,\n        \"location\": \"California\",\n        \"siblings\": []string{\"Bob\", \"John\"},\n    },\n}\n\nhash, err := hashstructure.Hash(v, hashstructure.FormatV2, nil)\nif err != nil {\n    panic(err)\n}\n\nfmt.Printf(\"%d\", hash)\n// Output:\n// 2307517237273902113\n```\n\n----------------------------------------\n\nTITLE: Getting Stats from a cgroup (v1)\nDESCRIPTION: Retrieves usage statistics from a cgroup, optionally with the IgnoreNotExist flag to handle cases like swap memory stats when swap is disabled.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/containerd/cgroups/v3/README.md#2025-04-10_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nstats, err := control.Stat()\n```\n\n----------------------------------------\n\nTITLE: Connecting to TLS-encrypted Syslog with Certificate Path\nDESCRIPTION: Shows how to establish a secure TLS-encrypted connection to a remote syslog server using a certificate path. This creates a writer for sending encrypted log messages to the specified endpoint with the given priority and tag.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/RackSec/srslog/README.md#2025-04-10_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nw, err := syslog.DialWithTLSCertPath(\"tcp+tls\", \"192.168.0.52:514\", syslog.LOG_ERR, \"testtag\", \"/path/to/servercert.pem\")\n```\n\n----------------------------------------\n\nTITLE: Defining Protocol Buffer SourceCodeInfo with Location\nDESCRIPTION: Defines structures for source code information including path, span, and comments to represent locations in the source code.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/moby/swarmkit/v2/api/api.pb.txt#2025-04-10_snippet_17\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage_type {\n    name: \"SourceCodeInfo\"\n    field {\n      name: \"location\"\n      number: 1\n      label: LABEL_REPEATED\n      type: TYPE_MESSAGE\n      type_name: \".google.protobuf.SourceCodeInfo.Location\"\n      json_name: \"location\"\n    }\n    nested_type {\n      name: \"Location\"\n      field {\n        name: \"path\"\n        number: 1\n        label: LABEL_REPEATED\n        type: TYPE_INT32\n        options {\n          packed: true\n        }\n        json_name: \"path\"\n      }\n      field {\n        name: \"span\"\n        number: 2\n        label: LABEL_REPEATED\n        type: TYPE_INT32\n        options {\n          packed: true\n        }\n        json_name: \"span\"\n      }\n      field {\n        name: \"leading_comments\"\n        number: 3\n        label: LABEL_OPTIONAL\n        type: TYPE_STRING\n        json_name: \"leadingComments\"\n      }\n      field {\n        name: \"trailing_comments\"\n        number: 4\n        label: LABEL_OPTIONAL\n        type: TYPE_STRING\n        json_name: \"trailingComments\"\n      }\n      field {\n        name: \"leading_detached_comments\"\n        number: 6\n        label: LABEL_REPEATED\n        type: TYPE_STRING\n        json_name: \"leadingDetachedComments\"\n      }\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Demonstrating inconsistent lock ordering in Go\nDESCRIPTION: Code snippets showing how inconsistent lock ordering across goroutines can lead to potential deadlocks. This is a common source of deadlocks that the library can detect.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/sasha-s/go-deadlock/Readme.md#2025-04-10_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nA.Lock() // defer A.Unlock() or similar.\n...\nB.Lock() // defer B.Unlock() or similar.\n```\n\nLANGUAGE: go\nCODE:\n```\nB.Lock() // defer B.Unlock() or similar.\n...\nA.Lock() // defer A.Unlock() or similar.\n```\n\n----------------------------------------\n\nTITLE: Setting Up Upstream Remote\nDESCRIPTION: Commands to add and verify upstream remote for synchronizing with original repository\nSOURCE: https://github.com/moby/moby/blob/master/docs/contributing/set-up-git.md#2025-04-10_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ git remote add upstream https://github.com/moby/moby.git\n$ git config --local -l\n$ git remote -v\n```\n\n----------------------------------------\n\nTITLE: Using New Meter Creation Methods in Go\nDESCRIPTION: This snippet demonstrates the replacement of deprecated InstrumentProvider methods with new Meter creation methods in the OpenTelemetry Go SDK.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-10_snippet_21\n\nLANGUAGE: Go\nCODE:\n```\n// Old (deprecated)\nCounter := InstrumentProvider.Counter()\nUpDownCounter := InstrumentProvider.UpDownCounter()\nGauge := InstrumentProvider.Gauge()\n\n// New\nCounter := Meter.Int64ObservableCounter()\nUpDownCounter := Meter.Int64ObservableUpDownCounter()\nGauge := Meter.Int64ObservableGauge()\n```\n\n----------------------------------------\n\nTITLE: Listing Docker Builder Pull Requests in Markdown\nDESCRIPTION: This code snippet shows how to list Docker Builder pull requests and issues using Markdown syntax. It includes links to GitHub pull requests and issues with brief descriptions.\nSOURCE: https://github.com/moby/moby/blob/master/reports/builder/2017-05-08.md#2025-04-10_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n- [Move dispatch state to a new struct](https://github.com/moby/moby/pull/32952)\n- [Cleanup unnecessary mutate then revert of b.runConfig](https://github.com/moby/moby/pull/32773)\n\nIn review:\n- [Refactor builder probe cache and container backend](https://github.com/moby/moby/pull/33061)\n- [Expose GetImage interface for builder](https://github.com/moby/moby/pull/33054)\n```\n\n----------------------------------------\n\nTITLE: Formatting Byte Sizes with Integer Flag in Go\nDESCRIPTION: Examples of using fmt.Printf with integer flag to format byte sizes. This shows how to print values in bytes, with an option to add unit prefix using the # flag.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/tonistiigi/units/readme.md#2025-04-10_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nfmt.Printf(\"%d\", 1234 * B)    => \"1234\"\nfmt.Printf(\"%#d\", 1234 * B)   => \"1234B\"\n```\n\n----------------------------------------\n\nTITLE: Checking Registry Version\nDESCRIPTION: Verifies the installed registry binary and displays its version information.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/docker/distribution/BUILDING.md#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ $GOPATH/bin/registry --version\n$GOPATH/bin/registry github.com/docker/distribution v2.0.0-alpha.1+unknown\n```\n\n----------------------------------------\n\nTITLE: Delete Endpoint Request in Remote Driver Protocol\nDESCRIPTION: LibNetwork sends a request to delete an endpoint, providing the network ID and endpoint ID.\nSOURCE: https://github.com/moby/moby/blob/master/libnetwork/docs/remote.md#2025-04-10_snippet_10\n\nLANGUAGE: JSON\nCODE:\n```\n{\n\t\t\"NetworkID\": string,\n\t\t\"EndpointID\": string\n    }\n```\n\n----------------------------------------\n\nTITLE: Listing Docker Images\nDESCRIPTION: Command to display all Docker images present on the host system. Used to identify images that may be unnecessary or consuming disk space.\nSOURCE: https://github.com/moby/moby/blob/master/docs/contributing/set-up-dev-env.md#2025-04-10_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ docker images\n```\n\n----------------------------------------\n\nTITLE: Network Driver DiscoverNew Request Format\nDESCRIPTION: Format for the POST request to NetworkDriver.DiscoverNew endpoint for discovery notifications. Includes discovery type and associated data.\nSOURCE: https://github.com/moby/moby/blob/master/libnetwork/docs/remote.md#2025-04-10_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"DiscoveryType\": int,\n    \"DiscoveryData\": {\n        ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining RaftMemberStatus Message in Protocol Buffers\nDESCRIPTION: This message type defines the status of a Raft consensus algorithm member, including whether it's a leader, its reachability state (UNKNOWN, UNREACHABLE, REACHABLE), and status message, used for cluster management.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/moby/swarmkit/v2/api/api.pb.txt#2025-04-10_snippet_26\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage_type {\n  name: \"RaftMemberStatus\"\n  field {\n    name: \"leader\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_BOOL\n    json_name: \"leader\"\n  }\n  field {\n    name: \"reachability\"\n    number: 2\n    label: LABEL_OPTIONAL\n    type: TYPE_ENUM\n    type_name: \".docker.swarmkit.v1.RaftMemberStatus.Reachability\"\n    json_name: \"reachability\"\n  }\n  field {\n    name: \"message\"\n    number: 3\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"message\"\n  }\n  enum_type {\n    name: \"Reachability\"\n    value {\n      name: \"UNKNOWN\"\n      number: 0\n    }\n    value {\n      name: \"UNREACHABLE\"\n      number: 1\n    }\n    value {\n      name: \"REACHABLE\"\n      number: 2\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Bug Fix for Compute Metadata Path in Go SDK\nDESCRIPTION: Commit reference showing a fix for the compute/metadata package that removes the leading slash for Get suffix, ensuring proper URL path construction when fetching metadata.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/cloud.google.com/go/CHANGES.md#2025-04-10_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n* **compute/metadata:** remove leading slash for Get suffix ([#2760](https://www.github.com/googleapis/google-cloud-go/issues/2760)) ([f0d605c](https://www.github.com/googleapis/google-cloud-go/commit/f0d605ccf32391a9da056a2c551158bd076c128d))\n```\n\n----------------------------------------\n\nTITLE: Raw Table Iptables Commands\nDESCRIPTION: The iptables commands that generate the raw table rules for Docker networking, specifically showing the security rule that prevents direct access to the container port.\nSOURCE: https://github.com/moby/moby/blob/master/integration/network/bridge/iptablesdoc/generated/usernet-portmap.md#2025-04-10_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n-P PREROUTING ACCEPT\n-P OUTPUT ACCEPT\n-A PREROUTING -d 192.0.2.2/32 ! -i bridge1 -p tcp -m tcp --dport 80 -j DROP\n```\n\n----------------------------------------\n\nTITLE: Removing All Containers in Docker CLI (Legacy Method)\nDESCRIPTION: Legacy command to remove all Docker containers on a host system. It uses docker ps to list all container IDs and pipes them to docker rm to remove them all at once.\nSOURCE: https://github.com/moby/moby/blob/master/docs/contributing/set-up-dev-env.md#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ docker rm $(docker ps -a -q)\n```\n\n----------------------------------------\n\nTITLE: Using Scratch Object for Huff0 Operations in Go\nDESCRIPTION: This snippet demonstrates the usage of a Scratch object to reduce allocations in successive Huff0 operations. It also shows how to set a ReusePolicy for table reuse between blocks.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/klauspost/compress/huff0/README.md#2025-04-10_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ntype Scratch struct {\n    Out []byte\n    // ... other fields\n}\n\ntype ReusePolicy int\n\n// Set ReusePolicy on Scratch object\nscratch.ReusePolicy = SomeReusePolicy\n\n// Access separate table and data\nOutData := scratch.OutData\nOutTable := scratch.OutTable\n```\n\n----------------------------------------\n\nTITLE: Verbose Logging with glog in Go\nDESCRIPTION: Shows how to use V-style logging in glog for more granular control over log verbosity levels.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/k8s.io/klog/v2/README.md#2025-04-10_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nif glog.V(2) {\n    glog.Info(\"Starting transaction...\")\n}\n\nglog.V(2).Infoln(\"Processed\", nItems, \"elements\")\n```\n\n----------------------------------------\n\nTITLE: Struct Field Order in TOML Marshaling - Go\nDESCRIPTION: Shows how v1 and v2 differ in handling struct field order during marshaling. V1 emits fields alphabetically by default, while v2 preserves the order as defined in the struct.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/pelletier/go-toml/v2/README.md#2025-04-10_snippet_4\n\nLANGUAGE: go\nCODE:\n```\ntype S struct {\n\tB string\n\tA string\n}\n\ndata := S{\n\tB: \"B\",\n\tA: \"A\",\n}\n\nb, _ := tomlv1.Marshal(data)\nfmt.Println(\"v1:\\n\" + string(b))\n\nb, _ = tomlv2.Marshal(data)\nfmt.Println(\"v2:\\n\" + string(b))\n```\n\n----------------------------------------\n\nTITLE: Configuring and Using Codec Encoders/Decoders in Go\nDESCRIPTION: Example of creating and configuring Codec handles, and using encoders and decoders for both Binc and Msgpack formats. Includes setup for custom types and RPC usage.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/hashicorp/go-msgpack/codec/README.md#2025-04-10_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// create and configure Handle\nvar (\n  bh codec.BincHandle\n  mh codec.MsgpackHandle\n)\n\nmh.MapType = reflect.TypeOf(map[string]interface{}(nil))\n\n// configure extensions\n// e.g. for msgpack, define functions and enable Time support for tag 1\n// mh.AddExt(reflect.TypeOf(time.Time{}), 1, myMsgpackTimeEncodeExtFn, myMsgpackTimeDecodeExtFn)\n\n// create and use decoder/encoder\nvar (\n  r io.Reader\n  w io.Writer\n  b []byte\n  h = &bh // or mh to use msgpack\n)\n\ndec = codec.NewDecoder(r, h)\ndec = codec.NewDecoderBytes(b, h)\nerr = dec.Decode(&v) \n\nenc = codec.NewEncoder(w, h)\nenc = codec.NewEncoderBytes(&b, h)\nerr = enc.Encode(v)\n\n//RPC Server\ngo func() {\n    for {\n        conn, err := listener.Accept()\n        rpcCodec := codec.GoRpc.ServerCodec(conn, h)\n        //OR rpcCodec := codec.MsgpackSpecRpc.ServerCodec(conn, h)\n        rpc.ServeCodec(rpcCodec)\n    }\n}()\n\n//RPC Communication (client side)\nconn, err = net.Dial(\"tcp\", \"localhost:5555\")\nrpcCodec := codec.GoRpc.ClientCodec(conn, h)\n//OR rpcCodec := codec.MsgpackSpecRpc.ClientCodec(conn, h)\nclient := rpc.NewClientWithCodec(rpcCodec)\n```\n\n----------------------------------------\n\nTITLE: Referencing Docker Build Tool in Markdown\nDESCRIPTION: Mentions the primary build tool for Docker, hack/make.sh, which is used for compiling the official binary, running the test suite, and pushing releases.\nSOURCE: https://github.com/moby/moby/blob/master/project/README.md#2025-04-10_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n[hack/make.sh](../hack/make.sh) is the primary build tool for docker. It is used for compiling the official binary,\nrunning the test suite, and pushing releases.\n```\n\n----------------------------------------\n\nTITLE: Table Indentation in TOML Marshaling - Go\nDESCRIPTION: Illustrates the differences in table indentation between v1 and v2, showing how to achieve v1-like indentation in v2 using the Encoder.SetIndentTables method.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/pelletier/go-toml/v2/README.md#2025-04-10_snippet_5\n\nLANGUAGE: go\nCODE:\n```\ndata := map[string]interface{}{\n\t\"table\": map[string]string{\n\t\t\"key\": \"value\",\n\t},\n}\n\nb, _ := tomlv1.Marshal(data)\nfmt.Println(\"v1:\\n\" + string(b))\n\nb, _ = tomlv2.Marshal(data)\nfmt.Println(\"v2:\\n\" + string(b))\n\nbuf := bytes.Buffer{}\nenc := tomlv2.NewEncoder(&buf)\nenc.SetIndentTables(true)\nenc.Encode(data)\nfmt.Println(\"v2 Encoder:\\n\" + string(buf.Bytes()))\n```\n\n----------------------------------------\n\nTITLE: Installing go-deadlock library using Go modules\nDESCRIPTION: Command to install the go-deadlock library using Go modules. This allows developers to add deadlock detection to their Go projects.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/sasha-s/go-deadlock/Readme.md#2025-04-10_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/sasha-s/go-deadlock/...\n```\n\n----------------------------------------\n\nTITLE: Finding the Docker Daemon Process ID\nDESCRIPTION: Bash command to retrieve the process ID of the dockerd process, which is needed to reload the Docker configuration.\nSOURCE: https://github.com/moby/moby/blob/master/libnetwork/cmd/diagnostic/README.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ ps aux |grep dockerd | grep -v grep\n```\n\n----------------------------------------\n\nTITLE: Deleting a cgroup (v2)\nDESCRIPTION: Loads and then deletes a systemd-managed cgroup in the v2 hierarchy, removing all resource constraints and releasing all processes.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/containerd/cgroups/v3/README.md#2025-04-10_snippet_17\n\nLANGUAGE: go\nCODE:\n```\nm, err := cgroup2.LoadSystemd(\"/\", \"my-cgroup-abc.slice\")\nif err != nil {\n\treturn err\n}\nerr = m.DeleteSystemd()\nif err != nil {\n\treturn err\n}\n```\n\n----------------------------------------\n\nTITLE: Creating New Docker Engine Man Page in Markdown\nDESCRIPTION: Explains the naming convention for new man page Markdown files. Files should be named TITLE.SECTION.md, where TITLE is the man page title and SECTION is the section number.\nSOURCE: https://github.com/moby/moby/blob/master/man/README.md#2025-04-10_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nTITLE.SECTION.md\n```\n\n----------------------------------------\n\nTITLE: Using Docker System Prune to Remove Unused Resources\nDESCRIPTION: Command to clean up all unused Docker resources including stopped containers, networks, dangling images, and build cache using the system prune feature with the -a flag to remove all unused images, not just dangling ones.\nSOURCE: https://github.com/moby/moby/blob/master/docs/contributing/set-up-dev-env.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ docker system prune -a\n```\n\n----------------------------------------\n\nTITLE: Starting Vagrant Environment for Docker Network Testing\nDESCRIPTION: Commands to start and check the status of the Vagrant environment with three virtual machines: a Consul server and two Docker hosts.\nSOURCE: https://github.com/moby/moby/blob/master/libnetwork/docs/vagrant.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ vagrant up\n$ vagrant status\n```\n\n----------------------------------------\n\nTITLE: Docker SwarmKit Protobuf Schema Definition\nDESCRIPTION: Comprehensive protocol buffer schema defining core Docker SwarmKit message types and services. Includes definitions for security credentials, privilege management, volume access modes, job status tracking and volume publish states.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/moby/swarmkit/v2/api/api.pb.txt#2025-04-10_snippet_57\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage_type {\n  name: \"RootRotation\"\n  field {\n    name: \"ca_cert\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_BYTES\n    options {\n      65004: \"CACert\"\n    }\n    json_name: \"caCert\"\n  }\n  field {\n    name: \"ca_key\"\n    number: 2\n    label: LABEL_OPTIONAL \n    type: TYPE_BYTES\n    options {\n      65004: \"CAKey\"\n    }\n    json_name: \"caKey\"\n  }\n  field {\n    name: \"cross_signed_ca_cert\"\n    number: 3\n    label: LABEL_OPTIONAL\n    type: TYPE_BYTES\n    options {\n      65004: \"CrossSignedCACert\"\n    }\n    json_name: \"crossSignedCaCert\"\n  }\n}\n\nmessage_type {\n  name: \"Privileges\"\n  // Additional fields and nested types omitted for brevity\n}\n\nmessage_type {\n  name: \"JobStatus\"\n  // Additional fields omitted for brevity \n}\n\nmessage_type {\n  name: \"VolumeAccessMode\"\n  // Additional fields and nested types omitted for brevity\n}\n```\n\n----------------------------------------\n\nTITLE: Adding User-Agent header to OTLP exporter in Go\nDESCRIPTION: Adds a default User-Agent header to OTLP exporter requests for both gRPC and HTTP exporters.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-10_snippet_25\n\nLANGUAGE: Go\nCODE:\n```\nAdd default User-Agent header to OTLP exporter requests (`go.opentelemetry.io/otel/exporters/otlptrace/otlptracegrpc` and `go.opentelemetry.io/otel/exporters/otlptrace/otlptracehttp`).\n```\n\n----------------------------------------\n\nTITLE: Checking for Running Containers in Docker CLI\nDESCRIPTION: Command to list all Docker containers on a host system, including both running and stopped containers. Used to verify if there are any unnecessary containers that need to be removed.\nSOURCE: https://github.com/moby/moby/blob/master/docs/contributing/set-up-dev-env.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ docker ps -a\n```\n\n----------------------------------------\n\nTITLE: Adding Summary Metrics Support in OTLP Exporters\nDESCRIPTION: Adds support for Summary metrics in OTLP metric exporters for both HTTP and gRPC.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-10_snippet_8\n\nLANGUAGE: Go\nCODE:\n```\nSupport for Summary metrics in go.opentelemetry.io/otel/exporters/otlp/otlpmetric/otlpmetrichttp and go.opentelemetry.io/otel/exporters/otlp/otlpmetric/otlpmetricgrpc exporters\n```\n\n----------------------------------------\n\nTITLE: Roaring Bitmap Conversion Example in Go\nDESCRIPTION: Shows conversion between BitSet and Roaring bitmap formats for compressed storage.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/bits-and-blooms/bitset/README.md#2025-04-10_snippet_5\n\nLANGUAGE: go\nCODE:\n```\n\t\t\tmybitset := roaringbitmap.ToBitSet()\n\t\t\tnewroaringbitmap := roaring.FromBitSet(mybitset)\n```\n\n----------------------------------------\n\nTITLE: Block I/O Statistics Message Definition in Protobuf\nDESCRIPTION: Defines the structure for block I/O statistics including service bytes, queue stats, service time, wait time, and sector information.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/containerd/cgroups/v3/cgroup1/stats/metrics.pb.txt#2025-04-10_snippet_2\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage_type {\n  name: \"BlkIOStat\"\n  field {\n    name: \"io_service_bytes_recursive\"\n    number: 1\n    label: LABEL_REPEATED\n    type: TYPE_MESSAGE\n    type_name: \".io.containerd.cgroups.v1.BlkIOEntry\"\n    json_name: \"ioServiceBytesRecursive\"\n  }\n  [...additional fields omitted for brevity...]\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating recursive read locking deadlock in Go\nDESCRIPTION: A complete Go program demonstrating how recursive read locking can lead to a deadlock. This example shows a scenario where grabbing an RLock twice from the same goroutine causes issues.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/sasha-s/go-deadlock/Readme.md#2025-04-10_snippet_5\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"sync\"\n)\n\nfunc main() {\n\tvar mu sync.RWMutex\n\n\tchrlockTwice := make(chan struct{}) // Used to control rlockTwice\n\trlockTwice := func() {\n\t\tmu.RLock()\n\t\tfmt.Println(\"first Rlock succeeded\")\n\t\t<-chrlockTwice\n\t\t<-chrlockTwice\n\t\tfmt.Println(\"trying to Rlock again\")\n\t\tmu.RLock()\n\t\tfmt.Println(\"second Rlock succeeded\")\n\t\tmu.RUnlock()\n\t\tmu.RUnlock()\n\t}\n\n\tchLock := make(chan struct{}) // Used to contol lock\n\tlock := func() {\n\t\t<-chLock\n\t\tfmt.Println(\"about to Lock\")\n\t\tmu.Lock()\n\t\tfmt.Println(\"Lock succeeded\")\n\t\tmu.Unlock()\n\t\t<-chLock\n\t}\n\n\tcontrol := func() {\n\t\tchrlockTwice <- struct{}{}\n\t\tchLock <- struct{}{}\n\n\t\tclose(chrlockTwice)\n\t\tclose(chLock)\n\t}\n\n\tgo control()\n\tgo lock()\n\trlockTwice()\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MessageType Enum in Protobuf for Raft\nDESCRIPTION: Protocol Buffer definition for the MessageType enum used in Raft consensus algorithm. This enumeration defines all message types used in Raft communication, including heartbeats, votes, leader election, and log replication messages.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/moby/swarmkit/v2/api/api.pb.txt#2025-04-10_snippet_114\n\nLANGUAGE: protobuf\nCODE:\n```\nenum_type {\n  name: \"MessageType\"\n  value {\n    name: \"MsgHup\"\n    number: 0\n  }\n  value {\n    name: \"MsgBeat\"\n    number: 1\n  }\n  value {\n    name: \"MsgProp\"\n    number: 2\n  }\n  value {\n    name: \"MsgApp\"\n    number: 3\n  }\n  value {\n    name: \"MsgAppResp\"\n    number: 4\n  }\n  value {\n    name: \"MsgVote\"\n    number: 5\n  }\n  value {\n    name: \"MsgVoteResp\"\n    number: 6\n  }\n  value {\n    name: \"MsgSnap\"\n    number: 7\n  }\n  value {\n    name: \"MsgHeartbeat\"\n    number: 8\n  }\n  value {\n    name: \"MsgHeartbeatResp\"\n    number: 9\n  }\n  value {\n    name: \"MsgUnreachable\"\n    number: 10\n  }\n  value {\n    name: \"MsgSnapStatus\"\n    number: 11\n  }\n  value {\n    name: \"MsgCheckQuorum\"\n    number: 12\n  }\n  value {\n    name: \"MsgTransferLeader\"\n    number: 13\n  }\n  value {\n    name: \"MsgTimeoutNow\"\n    number: 14\n  }\n  value {\n    name: \"MsgReadIndex\"\n    number: 15\n  }\n  value {\n    name: \"MsgReadIndexResp\"\n    number: 16\n  }\n  value {\n    name: \"MsgPreVote\"\n    number: 17\n  }\n  value {\n    name: \"MsgPreVoteResp\"\n    number: 18\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting to TLS-encrypted Syslog with Custom TLS Configuration\nDESCRIPTION: Demonstrates how to establish a secure TLS-encrypted connection to a remote syslog server with a custom TLS configuration. This allows for more control over the TLS settings used for the syslog connection.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/RackSec/srslog/README.md#2025-04-10_snippet_5\n\nLANGUAGE: go\nCODE:\n```\npool := x509.NewCertPool()\nserverCert, err := ioutil.ReadFile(\"/path/to/servercert.pem\")\nif err != nil {\n    return nil, err\n}\npool.AppendCertsFromPEM(serverCert)\nconfig := tls.Config{\n    RootCAs: pool,\n}\n\nw, err := DialWithTLSConfig(network, raddr, priority, tag, &config)\n```\n\n----------------------------------------\n\nTITLE: Using go-generate with Plugin RPC Generator\nDESCRIPTION: Example of a go-generate directive that can be placed at the top of an interface definition file to automatically generate proxy code when go generate is run.\nSOURCE: https://github.com/moby/moby/blob/master/pkg/plugins/pluginrpc-gen/README.md#2025-04-10_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n//go:generate pluginrpc-gen -i $GOFILE -o proxy.go -type volumeDriver -name VolumeDriver\n```\n\n----------------------------------------\n\nTITLE: Creating Docker Network with Disabled Inter-Container Communication and Running Container\nDESCRIPTION: Creates a custom bridge network with inter-container communication disabled, then runs a container on this network with port publishing. The commands set up a network with a specific subnet and gateway while preventing containers on the same network from communicating directly.\nSOURCE: https://github.com/moby/moby/blob/master/integration/network/bridge/iptablesdoc/templates/usernet-portmap-noicc.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker network create \\\n  -o com.docker.network.bridge.name=bridge1 \\\n  -o com.docker.network.bridge.enable_icc=false \\\n  --subnet 192.0.2.0/24 --gateway 192.0.2.1 bridge1\ndocker run --network bridge1 -p 8080:80 --name c1 busybox\n```\n\n----------------------------------------\n\nTITLE: Updating Correlation Context Header in Go SDK\nDESCRIPTION: Changes the correlation context header name from 'Correlation-Context' to 'otcorrelations' to align with the OpenTelemetry specification.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-10_snippet_42\n\nLANGUAGE: Go\nCODE:\n```\n// Old header name\n\"Correlation-Context\"\n\n// New header name\n\"otcorrelations\"\n```\n\n----------------------------------------\n\nTITLE: Error Handler Function Type\nDESCRIPTION: Example showing the ErrorHandlerFunc type for using functions as error handlers.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-10_snippet_32\n\nLANGUAGE: go\nCODE:\n```\n\"go.opentelemetry.io/otel\".ErrorHandlerFunc\n```\n\n----------------------------------------\n\nTITLE: Loading an Existing cgroup (v2)\nDESCRIPTION: Loads an existing systemd-managed cgroup in the v2 hierarchy for management operations.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/containerd/cgroups/v3/README.md#2025-04-10_snippet_16\n\nLANGUAGE: go\nCODE:\n```\nm, err := cgroup2.LoadSystemd(\"/\", \"my-cgroup-abc.slice\")\nif err != nil {\n\treturn err\n}\n```\n\n----------------------------------------\n\nTITLE: Linking to Typed Dockerfile Parsing PR in Markdown\nDESCRIPTION: This snippet provides a Markdown link to the Pull Request for typed Dockerfile parsing, which enables preprocessing and reuse of Dockerfile structures.\nSOURCE: https://github.com/moby/moby/blob/master/reports/builder/2017-06-12.md#2025-04-10_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n[PR](https://github.com/moby/moby/pull/33492)\n```\n\n----------------------------------------\n\nTITLE: Running Container and Checking /etc/hosts\nDESCRIPTION: Start a Ubuntu container and examine its /etc/hosts file to see network configuration.\nSOURCE: https://github.com/moby/moby/blob/master/libnetwork/docs/vagrant.md#2025-04-10_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run -it --rm ubuntu:14.04 bash\nroot@df479e660658:/# cat /etc/hosts\n```\n\n----------------------------------------\n\nTITLE: Defining SelectBy Message in Docker SwarmKit Protobuf\nDESCRIPTION: Defines a SelectBy message type that provides various filtering options for selecting objects in Docker SwarmKit. It includes fields for filtering by ID, name, custom properties, service/node associations, and various states.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/moby/swarmkit/v2/api/api.pb.txt#2025-04-10_snippet_133\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage_type {\n  name: \"SelectBy\"\n  field {\n    name: \"id\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    options {\n      65004: \"ID\"\n    }\n    oneof_index: 0\n    json_name: \"id\"\n  }\n  field {\n    name: \"id_prefix\"\n    number: 2\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    options {\n      65004: \"IDPrefix\"\n    }\n    oneof_index: 0\n    json_name: \"idPrefix\"\n  }\n  field {\n    name: \"name\"\n    number: 3\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    oneof_index: 0\n    json_name: \"name\"\n  }\n  field {\n    name: \"name_prefix\"\n    number: 4\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    oneof_index: 0\n    json_name: \"namePrefix\"\n  }\n  field {\n    name: \"custom\"\n    number: 5\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".docker.swarmkit.v1.SelectByCustom\"\n    oneof_index: 0\n    json_name: \"custom\"\n  }\n  field {\n    name: \"custom_prefix\"\n    number: 6\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".docker.swarmkit.v1.SelectByCustom\"\n    oneof_index: 0\n    json_name: \"customPrefix\"\n  }\n  field {\n    name: \"service_id\"\n    number: 7\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    options {\n      65004: \"ServiceID\"\n    }\n    oneof_index: 0\n    json_name: \"serviceId\"\n  }\n  field {\n    name: \"node_id\"\n    number: 8\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    options {\n      65004: \"NodeID\"\n    }\n    oneof_index: 0\n    json_name: \"nodeId\"\n  }\n  field {\n    name: \"slot\"\n    number: 9\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".docker.swarmkit.v1.SelectBySlot\"\n    oneof_index: 0\n    json_name: \"slot\"\n  }\n  field {\n    name: \"desired_state\"\n    number: 10\n    label: LABEL_OPTIONAL\n    type: TYPE_ENUM\n    type_name: \".docker.swarmkit.v1.TaskState\"\n    oneof_index: 0\n    json_name: \"desiredState\"\n  }\n  field {\n    name: \"role\"\n    number: 11\n    label: LABEL_OPTIONAL\n    type: TYPE_ENUM\n    type_name: \".docker.swarmkit.v1.NodeRole\"\n    oneof_index: 0\n    json_name: \"role\"\n  }\n  field {\n    name: \"membership\"\n    number: 12\n    label: LABEL_OPTIONAL\n    type: TYPE_ENUM\n    type_name: \".docker.swarmkit.v1.NodeSpec.Membership\"\n    oneof_index: 0\n    json_name: \"membership\"\n  }\n  field {\n    name: \"referenced_network_id\"\n    number: 13\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    options {\n      65004: \"ReferencedNetworkID\"\n    }\n    oneof_index: 0\n    json_name: \"referencedNetworkId\"\n  }\n  field {\n    name: \"referenced_secret_id\"\n    number: 14\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    options {\n      65004: \"ReferencedSecretID\"\n    }\n    oneof_index: 0\n    json_name: \"referencedSecretId\"\n  }\n  field {\n    name: \"referenced_config_id\"\n    number: 16\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    options {\n      65004: \"ReferencedConfigID\"\n    }\n    oneof_index: 0\n    json_name: \"referencedConfigId\"\n  }\n  field {\n    name: \"kind\"\n    number: 15\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    oneof_index: 0\n    json_name: \"kind\"\n  }\n  oneof_decl {\n    name: \"By\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining InternalRaftRequest Message in SwarmKit Protobuf\nDESCRIPTION: Protocol Buffer definition for the InternalRaftRequest message in Docker SwarmKit. This message represents an internal request to be processed through the Raft consensus algorithm, containing an ID and multiple store actions.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/moby/swarmkit/v2/api/api.pb.txt#2025-04-10_snippet_122\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage_type {\n  name: \"InternalRaftRequest\"\n  field {\n    name: \"id\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_UINT64\n    json_name: \"id\"\n  }\n  field {\n    name: \"action\"\n    number: 2\n    label: LABEL_REPEATED\n    type: TYPE_MESSAGE\n    type_name: \".docker.swarmkit.v1.StoreAction\"\n    options {\n      65001: 0\n    }\n    json_name: \"action\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Benchmarking xxhash in Go\nDESCRIPTION: Bash commands for benchmarking the performance of both pure Go and assembly implementations of the xxhash package using the Go test framework with benchstat.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/klauspost/compress/zstd/internal/xxhash/README.md#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbenchstat <(go test -tags purego -benchtime 500ms -count 15 -bench 'Sum64$')\nbenchstat <(go test -benchtime 500ms -count 15 -bench 'Sum64$')\n```\n\n----------------------------------------\n\nTITLE: Defining IssuanceStatus Message in Protocol Buffers\nDESCRIPTION: Defines a message type 'IssuanceStatus' with fields for state and error. It includes a nested enum 'State' for representing different states of certificate issuance in Docker SwarmKit.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/moby/swarmkit/v2/api/api.pb.txt#2025-04-10_snippet_48\n\nLANGUAGE: Protocol Buffers\nCODE:\n```\nmessage_type {\n  name: \"IssuanceStatus\"\n  field {\n    name: \"state\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_ENUM\n    type_name: \".docker.swarmkit.v1.IssuanceStatus.State\"\n    json_name: \"state\"\n  }\n  field {\n    name: \"err\"\n    number: 2\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"err\"\n  }\n  enum_type {\n    name: \"State\"\n    value {\n      name: \"UNKNOWN\"\n      number: 0\n      options {\n        66001: \"IssuanceStateUnknown\"\n      }\n    }\n    value {\n      name: \"RENEW\"\n      number: 1\n      options {\n        66001: \"IssuanceStateRenew\"\n      }\n    }\n    value {\n      name: \"PENDING\"\n      number: 2\n      options {\n        66001: \"IssuanceStatePending\"\n      }\n    }\n    value {\n      name: \"ISSUED\"\n      number: 3\n      options {\n        66001: \"IssuanceStateIssued\"\n      }\n    }\n    value {\n      name: \"FAILED\"\n      number: 4\n      options {\n        66001: \"IssuanceStateFailed\"\n      }\n    }\n    value {\n      name: \"ROTATE\"\n      number: 5\n      options {\n        66001: \"IssuanceStateRotate\"\n      }\n    }\n    options {\n      62001: 0\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Linking to Bridge Driver Configuration in Go\nDESCRIPTION: This code snippet is a permalink to the bridge driver's configuration function in Go, which is responsible for deleting and recreating custom iptables chains during initialization.\nSOURCE: https://github.com/moby/moby/blob/master/integration/network/bridge/iptablesdoc/index.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[100]: https://github.com/moby/moby/blob/fe09cab7fe04c3911417061f7c7ef60a8acc6bf3/libnetwork/drivers/bridge/bridge_linux.go#L508\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Module Path Versioning in Go\nDESCRIPTION: This snippet illustrates how to include the major version number in module paths and import statements for Go modules with version v2 or higher. It shows examples for module declarations, import statements, and go get commands.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/go.opentelemetry.io/otel/VERSIONING.md#2025-04-10_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule go.opentelemetry.io/otel/v2\nrequire go.opentelemetry.io/otel/v2 v2.0.1\nimport \"go.opentelemetry.io/otel/v2/trace\"\ngo get go.opentelemetry.io/otel/v2@v2.0.1\n```\n\n----------------------------------------\n\nTITLE: Gateway Allocation Check Request in Remote Driver Protocol\nDESCRIPTION: If GwAllocChecker is true, LibNetwork sends a request to check if gateway allocation should be skipped for IPv4 or IPv6.\nSOURCE: https://github.com/moby/moby/blob/master/libnetwork/docs/remote.md#2025-04-10_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n\t\t\"Options\": {\n\t\t\t...\n\t\t}\n    }\n```\n\n----------------------------------------\n\nTITLE: Using deadlock.Mutex in Go code\nDESCRIPTION: Example of how to use the deadlock.Mutex as a drop-in replacement for sync.Mutex. This demonstrates basic locking and unlocking operations with deadlock detection.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/sasha-s/go-deadlock/Readme.md#2025-04-10_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/sasha-s/go-deadlock\"\nvar mu deadlock.Mutex\n// Use normally, it works exactly like sync.Mutex does.\nmu.Lock()\n\ndefer mu.Unlock()\n```\n\n----------------------------------------\n\nTITLE: Writing Log Messages to Syslog\nDESCRIPTION: Shows how to write log messages of different severity levels to a syslog writer. The example demonstrates error handling for connection failures and various logging methods for different priority levels.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/RackSec/srslog/README.md#2025-04-10_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nif err != nil {\n    log.Fatal(\"failed to connect to syslog:\", err)\n}\ndefer w.Close()\n\nw.Alert(\"this is an alert\")\nw.Crit(\"this is critical\")\nw.Err(\"this is an error\")\nw.Warning(\"this is a warning\")\nw.Notice(\"this is a notice\")\nw.Info(\"this is info\")\nw.Debug(\"this is debug\")\nw.Write([]byte(\"these are some bytes\"))\n```\n\n----------------------------------------\n\nTITLE: Running Moby Unit Tests on Windows\nDESCRIPTION: These Docker commands run Moby unit tests in a container on Windows, with options for Hyper-V containers.\nSOURCE: https://github.com/moby/moby/blob/master/docs/contributing/software-req-win.md#2025-04-10_snippet_8\n\nLANGUAGE: powershell\nCODE:\n```\ndocker run --rm nativebuildimage hack\\make.ps1 -TestUnit\ndocker run --rm -m 2GB nativebuildimage hack\\make.ps1 -TestUnit  # (if using Hyper-V containers)\n```\n\n----------------------------------------\n\nTITLE: Updating cgroup Resource Constraints (v1)\nDESCRIPTION: Updates the resource constraints applied to a cgroup, in this example changing the CPU shares allocation from 100 to 200.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/containerd/cgroups/v3/README.md#2025-04-10_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nshares = uint64(200)\nif err := control.Update(&specs.LinuxResources{\n    CPU: &specs.LinuxCPU{\n        Shares: &shares,\n    },\n}); err != nil {\n}\n```\n\n----------------------------------------\n\nTITLE: Tallying Results Subject Template in Markdown\nDESCRIPTION: This snippet shows the recommended subject template for tallying voting results on a motion. It includes the project name, status, motion description, and vote counts.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/opencontainers/cgroups/GOVERNANCE.md#2025-04-10_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n> [{project} {status}]: {motion description} (+{LGTMs} -{REJECTs} #{ABSTAINs})\n```\n\n----------------------------------------\n\nTITLE: Managing Vendor Dependencies in Bash\nDESCRIPTION: The vendor.sh script is a wrapper around 'go mod vendor' for managing vendor dependencies in the Docker repository.\nSOURCE: https://github.com/moby/moby/blob/master/hack/README.md#2025-04-10_snippet_4\n\nLANGUAGE: Bash\nCODE:\n```\n## Vendor (vendor.sh)\n\nA shell script that is a wrapper around `go mod vendor`.\n```\n\n----------------------------------------\n\nTITLE: Proposing Changes to Raft State Machine in Go\nDESCRIPTION: Shows how to propose changes to the Raft state machine by serializing data and calling the Propose method.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/go.etcd.io/etcd/raft/v3/README.md#2025-04-10_snippet_6\n\nLANGUAGE: go\nCODE:\n```\n\tn.Propose(ctx, data)\n```\n\n----------------------------------------\n\nTITLE: Checking test coverage in go-toml\nDESCRIPTION: Commands to generate and view test coverage reports for the go-toml project using Go's built-in coverage tools.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/pelletier/go-toml/v2/CONTRIBUTING.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngo test -covermode=atomic -coverprofile=coverage.out\ngo tool cover -func=coverage.out\n```\n\n----------------------------------------\n\nTITLE: Linking to Long Running Session PR in Markdown\nDESCRIPTION: This snippet provides a Markdown link to the Pull Request for long running sessions and incremental file sending in Docker builds.\nSOURCE: https://github.com/moby/moby/blob/master/reports/builder/2017-06-12.md#2025-04-10_snippet_2\n\nLANGUAGE: Markdown\nCODE:\n```\n[PR ](https://github.com/moby/moby/pull/32677)\n```\n\n----------------------------------------\n\nTITLE: Importing Images with Platform Specification in Docker API\nDESCRIPTION: The POST /images/create endpoint now supports specifying both operating system and architecture through the 'platform' query parameter when using the 'fromSrc' option to import an image from an archive.\nSOURCE: https://github.com/moby/moby/blob/master/docs/api/version-history.md#2025-04-10_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n* The `POST /images/create` now supports both the operating system and architecture\n  that is passed through the `platform` query parameter when using the `fromSrc`\n  option to import an image from an archive. Previously, only the operating system\n  was used and the architecture was ignored. If no `platform` option is set, the\n  host's operating system and architecture as used as default. This change is not\n  versioned, and affects all API versions if the daemon has this patch.\n```\n\n----------------------------------------\n\nTITLE: Defining ResourceAllocator Service in Docker SwarmKit\nDESCRIPTION: Protocol buffer definition for the ResourceAllocator service that manages network resources in Docker SwarmKit. It provides methods for attaching and detaching networks, available to both worker and manager nodes.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/moby/swarmkit/v2/api/api.pb.txt#2025-04-10_snippet_128\n\nLANGUAGE: protobuf\nCODE:\n```\nservice {\n  name: \"ResourceAllocator\"\n  method {\n    name: \"AttachNetwork\"\n    input_type: \".docker.swarmkit.v1.AttachNetworkRequest\"\n    output_type: \".docker.swarmkit.v1.AttachNetworkResponse\"\n    options {\n      73626345 {\n        1: \"swarm-worker\"\n        1: \"swarm-manager\"\n      }\n    }\n  }\n  method {\n    name: \"DetachNetwork\"\n    input_type: \".docker.swarmkit.v1.DetachNetworkRequest\"\n    output_type: \".docker.swarmkit.v1.DetachNetworkResponse\"\n    options {\n      73626345 {\n        1: \"swarm-worker\"\n        1: \"swarm-manager\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing bbolt in Go\nDESCRIPTION: Go code snippet showing how to import and use bbolt as an embedded key-value store.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/go.etcd.io/bbolt/README.md#2025-04-10_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nimport bolt \"go.etcd.io/bbolt\"\n\ndb, err := bolt.Open(path, 0666, nil)\nif err != nil {\n  return err\n}\ndefer db.Close()\n```\n\n----------------------------------------\n\nTITLE: Updating Context Span Storage in Go OpenTelemetry\nDESCRIPTION: Changes how spans are stored in context to unify local and remote span handling.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-10_snippet_35\n\nLANGUAGE: Go\nCODE:\n```\nThe storage of a local or remote Span in a `context.Context` using its SpanContext is unified to store just the current Span.\nThe Span's SpanContext can now self-identify as being remote or not.\nThis means that `\"go.opentelemetry.io/otel/trace\".ContextWithRemoteSpanContext` will now overwrite any existing current Span, not just existing remote Spans, and make it the current Span in a `context.Context`.\n```\n\n----------------------------------------\n\nTITLE: Listing Go Modules in Project\nDESCRIPTION: This bash command finds all go.mod files in the project directory and extracts the module names, showing the structure of the Go modules in the project.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/cloud.google.com/go/RELEASING.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cat `find . -name go.mod` | grep module\n```\n\n----------------------------------------\n\nTITLE: Defining Docker Swarmkit API Types in Protocol Buffers\nDESCRIPTION: Protocol Buffer definitions for core Swarmkit API types including Version, IndexEntry, Annotations, Resources, and Engine descriptions. Includes field definitions with types, labels and custom options.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/moby/swarmkit/v2/api/api.pb.txt#2025-04-10_snippet_22\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage_type {\n  name: \"Version\"\n  field {\n    name: \"index\"\n    number: 1\n    label: LABEL_OPTIONAL \n    type: TYPE_UINT64\n    json_name: \"index\"\n  }\n}\n\nmessage_type {\n  name: \"IndexEntry\"\n  field {\n    name: \"key\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"key\"\n  }\n  field {\n    name: \"val\"\n    number: 2\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"val\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Protocol Buffer EnumOptions\nDESCRIPTION: Defines options for protocol buffer enumeration types, including support for aliases and deprecation flags.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/moby/swarmkit/v2/api/api.pb.txt#2025-04-10_snippet_12\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage_type {\n    name: \"EnumOptions\"\n    field {\n      name: \"allow_alias\"\n      number: 2\n      label: LABEL_OPTIONAL\n      type: TYPE_BOOL\n      json_name: \"allowAlias\"\n    }\n    field {\n      name: \"deprecated\"\n      number: 3\n      label: LABEL_OPTIONAL\n      type: TYPE_BOOL\n      default_value: \"false\"\n      json_name: \"deprecated\"\n    }\n    field {\n      name: \"uninterpreted_option\"\n      number: 999\n      label: LABEL_REPEATED\n      type: TYPE_MESSAGE\n      type_name: \".google.protobuf.UninterpretedOption\"\n      json_name: \"uninterpretedOption\"\n    }\n    extension_range {\n      start: 1000\n      end: 536870912\n    }\n    reserved_range {\n      start: 5\n      end: 6\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Listing Cluster Peers\nDESCRIPTION: Bash command to retrieve a list of all peers in the network database cluster.\nSOURCE: https://github.com/moby/moby/blob/master/libnetwork/cmd/diagnostic/README.md#2025-04-10_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ curl localhost:2000/clusterpeers\n```\n\n----------------------------------------\n\nTITLE: Setting DOCKER_BUILDTAGS to Disable Specific Graphdrivers in Docker Build Process\nDESCRIPTION: These snippets demonstrate how to configure build tags when compiling Docker to exclude specific graph drivers. Build tags can be set individually or combined with space separation.\nSOURCE: https://github.com/moby/moby/blob/master/project/PACKAGERS.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport DOCKER_BUILDTAGS='exclude_graphdriver_btrfs'\n```\n\nLANGUAGE: bash\nCODE:\n```\nexport DOCKER_BUILDTAGS='exclude_graphdriver_zfs'\n```\n\nLANGUAGE: bash\nCODE:\n```\nexport DOCKER_BUILDTAGS='exclude_graphdriver_btrfs exclude_graphdriver_zfs'\n```\n\n----------------------------------------\n\nTITLE: Installing Docker Daemon Binary\nDESCRIPTION: Install the compiled Docker daemon binary to the container's /usr/local/bin/ directory.\nSOURCE: https://github.com/moby/moby/blob/master/docs/contributing/set-up-dev-env.md#2025-04-10_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n# make install\n```\n\n----------------------------------------\n\nTITLE: Listing Docker Builder Feature Proposals in Markdown\nDESCRIPTION: This code snippet demonstrates how to list Docker Builder feature proposals using Markdown syntax. It includes links to GitHub issues with brief descriptions of proposed features.\nSOURCE: https://github.com/moby/moby/blob/master/reports/builder/2017-05-08.md#2025-04-10_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n[Add IMPORT/EXPORT commands to Dockerfile](https://github.com/moby/moby/issues/32100)\n\n[Add `DOCKEROS/DOCKERARCH` default ARG to Dockerfile](https://github.com/moby/moby/issues/32487)\n\n[Add support for `RUN --mount`](https://github.com/moby/moby/issues/32507)\n\n[DAG image builder](https://github.com/moby/moby/issues/32550)\n\n[Option to export the hash of the build context](https://github.com/moby/moby/issues/32963) (new)\n\n[Allow --cache-from=*](https://github.com/moby/moby/issues/33002#issuecomment-299041162) (new)\n```\n\n----------------------------------------\n\nTITLE: Creating a New cgroup with Static Path (v1)\nDESCRIPTION: Creates a new cgroup using a static path for all subsystems under '/test' with CPU shares as a resource constraint using the v1 implementation.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/containerd/cgroups/v3/README.md#2025-04-10_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nshares := uint64(100)\ncontrol, err := cgroup1.New(cgroup1.StaticPath(\"/test\"), &specs.LinuxResources{\n    CPU: &specs.LinuxCPU{\n        Shares: &shares,\n    },\n})\ndefer control.Delete()\n```\n\n----------------------------------------\n\nTITLE: Git Commit Sign-off Format\nDESCRIPTION: Example of the required sign-off line format that must be added to git commit messages. Must include real name and email.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/docker/go-metrics/CONTRIBUTING.md#2025-04-10_snippet_1\n\nLANGUAGE: git\nCODE:\n```\nSigned-off-by: Joe Smith <joe.smith@email.com>\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Config Struct in Go\nDESCRIPTION: Defines a pattern for creating config structs to hold configuration options. The config type should generally be unexported unless users need to extend it.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#2025-04-10_snippet_5\n\nLANGUAGE: go\nCODE:\n```\n// config contains configuration options for a thing.\ntype config struct {\n\t// options ...\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Raft RPC Messages in Go\nDESCRIPTION: Shows how to handle incoming Raft RPC messages by passing them to the Node.Step method.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/go.etcd.io/etcd/raft/v3/README.md#2025-04-10_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n\tfunc recvRaftRPC(ctx context.Context, m raftpb.Message) {\n\t\tn.Step(ctx, m)\n\t}\n```\n\n----------------------------------------\n\nTITLE: Content Negotiation Function Declaration\nDESCRIPTION: Function signature for negotiating the most appropriate content type based on Accept header and available alternatives.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/munnerz/goautoneg/README.txt#2025-04-10_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc Negotiate(header string, alternatives []string) (content_type string)\n```\n\n----------------------------------------\n\nTITLE: Example Go Spanner Emulator Configuration\nDESCRIPTION: Example showing how to configure Spanner emulator host environment variable.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/cloud.google.com/go/CHANGES.md#2025-04-10_snippet_15\n\nLANGUAGE: go\nCODE:\n```\nSPANNER_EMULATOR_HOST\n```\n\n----------------------------------------\n\nTITLE: Applying Apache License 2.0 Boilerplate Notice\nDESCRIPTION: This snippet demonstrates the boilerplate notice to be included when applying the Apache License 2.0 to a project. It includes placeholders for the year and copyright owner's name, as well as the standard license text and link to the full license.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/google/s2a-go/LICENSE.md#2025-04-10_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Running Full Test Suite in Moby Project\nDESCRIPTION: This command runs the entire Moby Engine test suite, including unit tests, integration tests, and Docker API client tests. It's executed from the root of the Docker repository.\nSOURCE: https://github.com/moby/moby/blob/master/docs/contributing/test.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ make test\n```\n\n----------------------------------------\n\nTITLE: Checking Docker Version on Linux\nDESCRIPTION: Command to verify Docker installation and check its version on Linux systems.\nSOURCE: https://github.com/moby/moby/blob/master/docs/contributing/software-required.md#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker --version\nDocker version 17.10.0-ce, build f4ffd25\n```\n\n----------------------------------------\n\nTITLE: Version Tag Management Commands\nDESCRIPTION: Shell commands for managing version tags during the release process, including adding tags and pushing them to the upstream repository.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/go.opentelemetry.io/otel/RELEASING.md#2025-04-10_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nmake add-tags MODSET=<module set> COMMIT=<commit hash>\ngit push upstream <new tag>\ngit push upstream <submodules-path/new tag>\n...\n```\n\n----------------------------------------\n\nTITLE: Defining UpdateVolumeStatusRequest Message in SwarmKit Protobuf\nDESCRIPTION: Defines a protocol buffer message for updating volume status in SwarmKit. It includes a session ID field and a repeated field for volume status updates, with a nested type defining the structure of individual updates.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/moby/swarmkit/v2/api/api.pb.txt#2025-04-10_snippet_99\n\nLANGUAGE: protobuf\nCODE:\n```\nname: \"UpdateVolumeStatusRequest\"\nfield {\n  name: \"session_id\"\n  number: 1\n  label: LABEL_OPTIONAL\n  type: TYPE_STRING\n  json_name: \"sessionId\"\n}\nfield {\n  name: \"updates\"\n  number: 2\n  label: LABEL_REPEATED\n  type: TYPE_MESSAGE\n  type_name: \".docker.swarmkit.v1.UpdateVolumeStatusRequest.VolumeStatusUpdate\"\n  json_name: \"updates\"\n}\nnested_type {\n  name: \"VolumeStatusUpdate\"\n  field {\n    name: \"id\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"id\"\n  }\n  field {\n    name: \"unpublished\"\n    number: 2\n    label: LABEL_OPTIONAL\n    type: TYPE_BOOL\n    json_name: \"unpublished\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining RaftMember Message Type in SwarmKit Protobuf\nDESCRIPTION: Protocol Buffer definition for the RaftMember message in Docker SwarmKit. This message represents a member in the Raft cluster with its Raft ID, node ID, address, and status information.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/moby/swarmkit/v2/api/api.pb.txt#2025-04-10_snippet_117\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage_type {\n  name: \"RaftMember\"\n  field {\n    name: \"raft_id\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_UINT64\n    json_name: \"raftId\"\n  }\n  field {\n    name: \"node_id\"\n    number: 2\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"nodeId\"\n  }\n  field {\n    name: \"addr\"\n    number: 3\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"addr\"\n  }\n  field {\n    name: \"status\"\n    number: 4\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".docker.swarmkit.v1.RaftMemberStatus\"\n    options {\n      65001: 0\n    }\n    json_name: \"status\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Joining a Specific Network\nDESCRIPTION: Bash command to join a specific network using its network ID. The network ID can be retrieved using 'docker network ls --no-trunc'.\nSOURCE: https://github.com/moby/moby/blob/master/libnetwork/cmd/diagnostic/README.md#2025-04-10_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ curl localhost:2000/joinnetwork?nid=<network id>\n```\n\n----------------------------------------\n\nTITLE: Measuring Unary Request Error Rate for gRPC Services with Prometheus\nDESCRIPTION: This query calculates the rate of failed unary (1:1) RPCs for each gRPC service over a 1-minute window. It filters for non-OK status codes and unary request types using the 'grpc_server_handled_total' metric.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/grpc-ecosystem/go-grpc-prometheus/README.md#2025-04-10_snippet_4\n\nLANGUAGE: jsoniq\nCODE:\n```\nsum(rate(grpc_server_handled_total{job=\"foo\",grpc_type=\"unary\",grpc_code!=\"OK\"}[1m])) by (grpc_service)\n```\n\n----------------------------------------\n\nTITLE: Building from GitHub Pull Request Using Git URL\nDESCRIPTION: Demonstrates how to build a Docker image from a specific GitHub pull request using the new git checkout URL feature. This allows specifying any remote ref when building from git sources.\nSOURCE: https://github.com/moby/moby/blob/master/reports/builder/2017-05-15.md#2025-04-10_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\ndocker build git://github.com/moby/moby#pull/32502/head\n```\n\n----------------------------------------\n\nTITLE: Checking for cgroups v2 Support\nDESCRIPTION: Detects whether the current system is running cgroups v2 (unified hierarchy) by checking the cgroups mode.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/containerd/cgroups/v3/README.md#2025-04-10_snippet_14\n\nLANGUAGE: go\nCODE:\n```\nvar cgroupV2 bool\nif cgroups.Mode() == cgroups.Unified {\n\tcgroupV2 = true\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Gitignore File for Filename Pattern Matching\nDESCRIPTION: This snippet demonstrates a simple .gitignore file that excludes all files named 'parse.go' globally. It showcases the global filename pattern matching capability that some alternative libraries may not support correctly.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/shibumi/go-pathspec/README.md#2025-04-10_snippet_0\n\nLANGUAGE: gitignore\nCODE:\n```\n# gitignore test file\nparse.go\n```\n\n----------------------------------------\n\nTITLE: Reloading Docker Configuration with HUP Signal\nDESCRIPTION: Bash command to reload the Docker configuration by sending the HUP signal to the dockerd process without restarting Docker.\nSOURCE: https://github.com/moby/moby/blob/master/libnetwork/cmd/diagnostic/README.md#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nkill -HUP <pid-of-dockerd>\n```\n\n----------------------------------------\n\nTITLE: Starting Single-Node Raft Cluster in Go\nDESCRIPTION: Shows how to initialize a single-node Raft cluster where the node acts as its own peer to become the cluster leader.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/go.etcd.io/etcd/raft/v3/README.md#2025-04-10_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n  // Create storage and config as shown above.\n  // Set peer list to itself, so this node can become the leader of this single-node cluster.\n  peers := []raft.Peer{{ID: 0x01}}\n  n := raft.StartNode(c, peers)\n```\n\n----------------------------------------\n\nTITLE: Version History Markdown\nDESCRIPTION: Markdown formatted changelog entries documenting version updates, features, bug fixes and other changes across multiple releases of the Google Cloud Go libraries.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/cloud.google.com/go/CHANGES.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Changes\n\n## [0.112.0](https://github.com/googleapis/google-cloud-go/compare/v0.111.0...v0.112.0) (2024-01-11)\n\n### Features\n\n* **internal/trace:** Export internal/trace package constants and vars ([#9242](https://github.com/googleapis/google-cloud-go/issues/9242)) ([941c16f](https://github.com/googleapis/google-cloud-go/commit/941c16f3a2602e9bdc737b139060a7dd8318f9dd))\n\n### Documentation\n\n* **main:** Add telemetry discussion to debug.md ([#9074](https://github.com/googleapis/google-cloud-go/issues/9074)) ([90ed12e](https://github.com/googleapis/google-cloud-go/commit/90ed12e1dffe722b42f58556f0e17b808da9714d)), refs [#8655](https://github.com/googleapis/google-cloud-go/issues/8655)\n\n## [0.111.0](https://github.com/googleapis/google-cloud-go/compare/v0.110.10...v0.111.0) (2023-11-29)\n```\n\n----------------------------------------\n\nTITLE: Pushing a New klog Version Tag\nDESCRIPTION: Command for pushing the newly created version tag to the git repository.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/k8s.io/klog/v2/RELEASE.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit push $VERSION\n```\n\n----------------------------------------\n\nTITLE: IPTables Filter Table Commands for Docker Swarm\nDESCRIPTION: Complete list of IPTables commands for the filter table that are applied when running a Docker Swarm service with published ports. These rules handle traffic filtering and forwarding between Docker networks.\nSOURCE: https://github.com/moby/moby/blob/master/integration/network/bridge/iptablesdoc/generated/swarm-portmap.md#2025-04-10_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n-P INPUT ACCEPT\n-P FORWARD ACCEPT\n-P OUTPUT ACCEPT\n-N DOCKER\n-N DOCKER-BRIDGE\n-N DOCKER-CT\n-N DOCKER-FORWARD\n-N DOCKER-INGRESS\n-N DOCKER-ISOLATION-STAGE-1\n-N DOCKER-ISOLATION-STAGE-2\n-N DOCKER-USER\n-A FORWARD -j DOCKER-USER\n-A FORWARD -j DOCKER-FORWARD\n-A DOCKER ! -i docker0 -o docker0 -j DROP\n-A DOCKER ! -i docker_gwbridge -o docker_gwbridge -j DROP\n-A DOCKER-BRIDGE -o docker0 -j DOCKER\n-A DOCKER-BRIDGE -o docker_gwbridge -j DOCKER\n-A DOCKER-CT -o docker0 -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT\n-A DOCKER-CT -o docker_gwbridge -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT\n-A DOCKER-FORWARD -j DOCKER-INGRESS\n-A DOCKER-FORWARD -j DOCKER-CT\n-A DOCKER-FORWARD -j DOCKER-ISOLATION-STAGE-1\n-A DOCKER-FORWARD -j DOCKER-BRIDGE\n-A DOCKER-FORWARD -i docker0 -j ACCEPT\n-A DOCKER-FORWARD -i docker_gwbridge -o docker_gwbridge -j DROP\n-A DOCKER-FORWARD -i docker_gwbridge ! -o docker_gwbridge -j ACCEPT\n-A DOCKER-INGRESS -p tcp -m tcp --dport 8080 -j ACCEPT\n-A DOCKER-INGRESS -p tcp -m tcp --sport 8080 -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT\n-A DOCKER-INGRESS -j RETURN\n-A DOCKER-ISOLATION-STAGE-1 -i docker0 ! -o docker0 -j DOCKER-ISOLATION-STAGE-2\n-A DOCKER-ISOLATION-STAGE-1 -i docker_gwbridge ! -o docker_gwbridge -j DOCKER-ISOLATION-STAGE-2\n-A DOCKER-ISOLATION-STAGE-2 -o docker_gwbridge -j DROP\n-A DOCKER-ISOLATION-STAGE-2 -o docker0 -j DROP\n-A DOCKER-USER -j RETURN\n```\n\n----------------------------------------\n\nTITLE: Running Tests in Moby Development Container\nDESCRIPTION: These commands show how to run unit tests and integration tests inside a Moby development container using the hack/test/unit and hack/make.sh scripts.\nSOURCE: https://github.com/moby/moby/blob/master/docs/contributing/test.md#2025-04-10_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# hack/test/unit\n```\n\nLANGUAGE: bash\nCODE:\n```\n# hack/make.sh dynbinary binary test-integration test-docker-py\n```\n\n----------------------------------------\n\nTITLE: Fixing Panic on Malformed URLs in Compute Metadata\nDESCRIPTION: Bug fix for the compute/metadata package that addresses a panic occurring with malformed URLs and improves the InstanceName method to return the actual instance name.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/cloud.google.com/go/CHANGES.md#2025-04-10_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\n- compute/metadata:\n  - Fix panic on malformed URLs.\n  - InstanceName returns actual instance name.\n```\n\n----------------------------------------\n\nTITLE: Displaying PkgGoDev Badge for SDK Trace Test Package in Markdown\nDESCRIPTION: This snippet shows how to embed a PkgGoDev badge in a markdown file, linking to the documentation for the go.opentelemetry.io/otel/sdk/trace/tracetest package.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/go.opentelemetry.io/otel/sdk/trace/tracetest/README.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![PkgGoDev](https://pkg.go.dev/badge/go.opentelemetry.io/otel/sdk/trace/tracetest)](https://pkg.go.dev/go.opentelemetry.io/otel/sdk/trace/tracetest)\n```\n\n----------------------------------------\n\nTITLE: Installing Singleflight Package in Go\nDESCRIPTION: Command to install the Singleflight package using Go's package management system. This command fetches the package from the specified repository and adds it to the current Go module.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/resenje.org/singleflight/README.md#2025-04-10_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo get resenje.org/singleflight\n```\n\n----------------------------------------\n\nTITLE: Defining AssignmentChange Message in SwarmKit Protobuf\nDESCRIPTION: Defines a protocol buffer message for tracking changes to assignments in SwarmKit. It includes a reference to the assignment and an action enum field indicating whether the assignment is being updated or removed.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/moby/swarmkit/v2/api/api.pb.txt#2025-04-10_snippet_102\n\nLANGUAGE: protobuf\nCODE:\n```\nname: \"AssignmentChange\"\nfield {\n  name: \"assignment\"\n  number: 1\n  label: LABEL_OPTIONAL\n  type: TYPE_MESSAGE\n  type_name: \".docker.swarmkit.v1.Assignment\"\n  json_name: \"assignment\"\n}\nfield {\n  name: \"action\"\n  number: 2\n  label: LABEL_OPTIONAL\n  type: TYPE_ENUM\n  type_name: \".docker.swarmkit.v1.AssignmentChange.AssignmentAction\"\n  json_name: \"action\"\n}\nenum_type {\n  name: \"AssignmentAction\"\n  value {\n    name: \"UPDATE\"\n    number: 0\n    options {\n      66001: \"AssignmentActionUpdate\"\n    }\n  }\n  value {\n    name: \"REMOVE\"\n    number: 1\n    options {\n      66001: \"AssignmentActionRemove\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Struct Definitions with Forward Migrations\nDESCRIPTION: Defines three versions of a struct (V1, V2, V3) with the ConvertFrom interface implementations for forward migrations. This demonstrates how to handle renamed fields and type changes between struct versions.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/anchore/go-struct-converter/README.md#2025-04-10_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// --------- V1 struct definition below ---------\n\ntype V1 struct {\n  Name     string\n  OldField string\n}\n\n// --------- V2 struct definition below ---------\n\ntype V2 struct {\n  Name     string\n  NewField string // this was a renamed field\n}\n\nfunc (to *V2) ConvertFrom(from interface{}) error {\n  if from, ok := from.(V1); ok { // forward migration\n    to.NewField = from.OldField\n  }\n  return nil\n}\n\n// --------- V3 struct definition below ---------\n\ntype V3 struct {\n  Name       []string\n  FinalField []string // this field was renamed and the type was changed\n}\n\nfunc (to *V3) ConvertFrom(from interface{}) error {\n  if from, ok := from.(V2); ok { // forward migration\n    to.FinalField = []string{from.NewField}\n  }\n  return nil\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Nodes Connected to a Network\nDESCRIPTION: Bash command to retrieve a list of all nodes connected to a specific network using its network ID.\nSOURCE: https://github.com/moby/moby/blob/master/libnetwork/cmd/diagnostic/README.md#2025-04-10_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ curl localhost:2000/networkpeers?nid=<network id>\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Git Commit Signing in Markdown\nDESCRIPTION: This snippet shows how to add a sign-off line to a Git commit message, which is required for contributions to the Moby project.\nSOURCE: https://github.com/moby/moby/blob/master/CONTRIBUTING.md#2025-04-10_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n    Signed-off-by: Joe Smith <joe.smith@email.com>\n```\n\n----------------------------------------\n\nTITLE: Starting Built Moby Daemon on Windows\nDESCRIPTION: These PowerShell commands stop the system Docker daemon and start the newly built Moby daemon.\nSOURCE: https://github.com/moby/moby/blob/master/docs/contributing/software-req-win.md#2025-04-10_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\nStop-Service Docker\n.\\dockerd.exe -D\n```\n\n----------------------------------------\n\nTITLE: Tag Format Example in Semantic Versioning\nDESCRIPTION: Demonstrates the semantic versioning format used for tagging releases in the Moby project. Shows examples of version numbers for regular releases, release candidates, and alpha releases.\nSOURCE: https://github.com/moby/moby/blob/master/project/BRANCHES-AND-TAGS.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nvX.Y.Z[-suffix[N]]\\n\\n- All of `X`, `Y`, `Z` must be specified (example: `v1.0.0`)\\n- First release candidate for version `1.8.0` should be tagged `v1.8.0-rc1`\\n- Second alpha release of a product should be tagged `v1.0.0-alpha1`\n```\n\n----------------------------------------\n\nTITLE: Migrating to Trace Client GRPC Client Interceptor in Go\nDESCRIPTION: Changes the implementation of the gRPC client interceptor to use a method from the trace.Client instance instead of a global function.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/cloud.google.com/go/CHANGES.md#2025-04-10_snippet_22\n\nLANGUAGE: go\nCODE:\n```\nconn, err := grpc.Dial(srv.Addr, grpc.WithUnaryInterceptor(trace.GRPCClientInterceptor()))\n```\n\nLANGUAGE: go\nCODE:\n```\nconn, err := grpc.Dial(srv.Addr, grpc.WithUnaryInterceptor(tc.GRPCClientInterceptor()))\n```\n\n----------------------------------------\n\nTITLE: Contributing Process Documentation in Markdown\nDESCRIPTION: Comprehensive markdown documentation detailing the process for contributing to the Moby project. Includes information about the Contributor License Agreement (CLA), instructions for submitting patches, and guidelines for commit messages.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/google/certificate-transparency-go/CONTRIBUTING.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# How to contribute #\n\nWe'd love to accept your patches and contributions to this project.  There are\na just a few small guidelines you need to follow.\n\n\n## Contributor License Agreement ##\n\nContributions to any Google project must be accompanied by a Contributor\nLicense Agreement.  This is not a copyright **assignment**, it simply gives\nGoogle permission to use and redistribute your contributions as part of the\nproject.\n\n  * If you are an individual writing original source code and you're sure you\n    own the intellectual property, then you'll need to sign an [individual\n    CLA][].\n\n  * If you work for a company that wants to allow you to contribute your work,\n    then you'll need to sign a [corporate CLA][].\n\nYou generally only need to submit a CLA once, so if you've already submitted\none (even if it was for a different project), you probably don't need to do it\nagain.\n\n[individual CLA]: https://developers.google.com/open-source/cla/individual\n[corporate CLA]: https://developers.google.com/open-source/cla/corporate\n\nOnce your CLA is submitted (or if you already submitted one for\nanother Google project), make a commit adding yourself to the\n[AUTHORS][] and [CONTRIBUTORS][] files. This commit can be part\nof your first [pull request][].\n\n[AUTHORS]: AUTHORS\n[CONTRIBUTORS]: CONTRIBUTORS\n\n\n## Submitting a patch ##\n\n  1. It's generally best to start by opening a new issue describing the bug or\n     feature you're intending to fix.  Even if you think it's relatively minor,\n     it's helpful to know what people are working on.  Mention in the initial\n     issue that you are planning to work on that bug or feature so that it can\n     be assigned to you.\n\n  1. Follow the normal process of [forking][] the project, and setup a new\n     branch to work in.  It's important that each group of changes be done in\n     separate branches in order to ensure that a pull request only includes the\n     commits related to that bug or feature.\n\n  1. Do your best to have [well-formed commit messages][] for each change.\n     This provides consistency throughout the project, and ensures that commit\n     messages are able to be formatted properly by various git tools.\n\n  1. Finally, push the commits to your fork and submit a [pull request][].\n\n[forking]: https://help.github.com/articles/fork-a-repo\n[well-formed commit messages]: http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html\n[pull request]: https://help.github.com/articles/creating-a-pull-request\n```\n\n----------------------------------------\n\nTITLE: Benchmarking Linux AMD64 Performance for CSV Parsing\nDESCRIPTION: Benchmark results comparing go-csvvalue with stdlib CSV parser on Linux AMD64 platform, showing memory allocation and operation speed differences between cached and non-cached implementations.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/tonistiigi/go-csvvalue/readme.md#2025-04-10_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ngoos: linux\ngoarch: amd64\npkg: github.com/tonistiigi/go-csvvalue\ncpu: AMD EPYC 7763 64-Core Processor                \nBenchmarkFields/stdlib/withcache-4         \t 1109917\t      1103 ns/op\t    4520 B/op\t      14 allocs/op\nBenchmarkFields/stdlib/nocache-4           \t 1082838\t      1125 ns/op\t    4520 B/op\t      14 allocs/op\nBenchmarkFields/csvvalue/withcache-4       \t28554976\t        42.12 ns/op\t       0 B/op\t       0 allocs/op\nBenchmarkFields/csvvalue/nocache-4         \t13666134\t        83.77 ns/op\t      48 B/op\t       1 allocs/op\n```\n\n----------------------------------------\n\nTITLE: Markdown List of BoltDB Projects\nDESCRIPTION: A markdown-formatted list showcasing various open source projects that use BoltDB as their database backend, including project names, descriptions, and GitHub repository links.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/go.etcd.io/bbolt/README.md#2025-04-10_snippet_25\n\nLANGUAGE: markdown\nCODE:\n```\n## Other Projects Using Bolt\n\nBelow is a list of public, open source projects that use Bolt:\n\n* [Algernon](https://github.com/xyproto/algernon) - A HTTP/2 web server with built-in support for Lua. Uses BoltDB as the default database backend.\n* [Bazil](https://bazil.org/) - A file system that lets your data reside where it is most convenient for it to reside.\n* [bolter](https://github.com/hasit/bolter) - Command-line app for viewing BoltDB file in your terminal.\n[...additional entries...]\n```\n\n----------------------------------------\n\nTITLE: Updating BigQuery Table Creation\nDESCRIPTION: Changes to table creation pattern, moving from direct client method to dataset-based creation.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/cloud.google.com/go/CHANGES.md#2025-04-10_snippet_25\n\nLANGUAGE: go\nCODE:\n```\nclient.CreateTable(ctx, \"project\", \"dataset\", \"table\")\n```\n\nLANGUAGE: go\nCODE:\n```\nclient.DatasetInProject(\"project\", \"dataset\").Table(\"table\").Create(ctx)\n```\n\n----------------------------------------\n\nTITLE: Importing Klauspost Compress Package in Go\nDESCRIPTION: This snippet shows the import of the Klauspost compress package and its subpackages, which provide various compression algorithms and utilities.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/modules.txt#2025-04-10_snippet_5\n\nLANGUAGE: Go\nCODE:\n```\ngithub.com/klauspost/compress\ngithub.com/klauspost/compress/fse\ngithub.com/klauspost/compress/huff0\ngithub.com/klauspost/compress/internal/cpuinfo\ngithub.com/klauspost/compress/internal/le\ngithub.com/klauspost/compress/internal/snapref\ngithub.com/klauspost/compress/zstd\ngithub.com/klauspost/compress/zstd/internal/xxhash\n```\n\n----------------------------------------\n\nTITLE: Executing Read-Only Transaction in bbolt\nDESCRIPTION: Go code showing how to start and execute a read-only transaction in bbolt using DB.View().\nSOURCE: https://github.com/moby/moby/blob/master/vendor/go.etcd.io/bbolt/README.md#2025-04-10_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nerr := db.View(func(tx *bolt.Tx) error {\n\t...\n\treturn nil\n})\n```\n\n----------------------------------------\n\nTITLE: IPTables NAT Table Configuration\nDESCRIPTION: The NAT table configuration showing port forwarding rules. These rules enable external access to the container through port mapping (8080->80) while maintaining network isolation between containers.\nSOURCE: https://github.com/moby/moby/blob/master/integration/network/bridge/iptablesdoc/generated/usernet-portmap-noicc.md#2025-04-10_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nChain PREROUTING (policy ACCEPT 0 packets, 0 bytes)\nnum   pkts bytes target     prot opt in     out     source               destination         \n1        0     0 DOCKER     0    --  *      *       0.0.0.0/0            0.0.0.0/0            ADDRTYPE match dst-type LOCAL\n\nChain INPUT (policy ACCEPT 0 packets, 0 bytes)\nnum   pkts bytes target     prot opt in     out     source               destination         \n\nChain OUTPUT (policy ACCEPT 0 packets, 0 bytes)\nnum   pkts bytes target     prot opt in     out     source               destination         \n1        0     0 DOCKER     0    --  *      *       0.0.0.0/0           !127.0.0.0/8          ADDRTYPE match dst-type LOCAL\n\nChain POSTROUTING (policy ACCEPT 0 packets, 0 bytes)\nnum   pkts bytes target     prot opt in     out     source               destination         \n1        0     0 MASQUERADE  0    --  *      !bridge1  192.0.2.0/24         0.0.0.0/0           \n2        0     0 MASQUERADE  0    --  *      !docker0  172.17.0.0/16        0.0.0.0/0           \n\nChain DOCKER (2 references)\nnum   pkts bytes target     prot opt in     out     source               destination         \n1        0     0 RETURN     0    --  bridge1 *       0.0.0.0/0            0.0.0.0/0           \n2        0     0 RETURN     0    --  docker0 *       0.0.0.0/0            0.0.0.0/0           \n3        0     0 DNAT       6    --  !bridge1 *       0.0.0.0/0            0.0.0.0/0            tcp dpt:8080 to:192.0.2.2:80\n```\n\n----------------------------------------\n\nTITLE: Conventional Commit Message Example\nDESCRIPTION: Example of commit message following Conventional Commits Style with package scope\nSOURCE: https://github.com/moby/moby/blob/master/vendor/cloud.google.com/go/CONTRIBUTING.md#2025-04-10_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nfeat(functions): add gophers codelab\n```\n\n----------------------------------------\n\nTITLE: Implementing Trace with GRPC Client Interceptor in Go Cloud Clients\nDESCRIPTION: Shows how to properly initialize Google Cloud clients with tracing enabled by using the trace client's GRPC interceptor as a dial option.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/cloud.google.com/go/CHANGES.md#2025-04-10_snippet_23\n\nLANGUAGE: go\nCODE:\n```\nc, err := pubsub.NewClient(ctx, \"project-id\", option.WithGRPCDialOption(grpc.WithUnaryInterceptor(tc.GRPCClientInterceptor())))\nif err != nil {\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: MkdirAll Function Signatures\nDESCRIPTION: Function signatures for MkdirAll and MkdirAllHandle that provide secure directory creation operations within a root directory.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/cyphar/filepath-securejoin/README.md#2025-04-10_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc MkdirAll(root, unsafePath string, mode int) error\nfunc MkdirAllHandle(root *os.File, unsafePath string, mode int) (*os.File, error)\n```\n\n----------------------------------------\n\nTITLE: SwarmKit Session Message Definitions\nDESCRIPTION: Defines message types for session management including SessionRequest and SessionMessage structures. These messages handle node descriptions, session IDs, and network bootstrap information.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/moby/swarmkit/v2/api/api.pb.txt#2025-04-10_snippet_96\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage_type {\n  name: \"SessionRequest\"\n  field {\n    name: \"description\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".docker.swarmkit.v1.NodeDescription\"\n    json_name: \"description\"\n  }\n  field {\n    name: \"session_id\"\n    number: 2\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"sessionId\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Constants for Default Buffer Sizes in Go\nDESCRIPTION: Defines constants for default read and write buffer sizes used in the fwd package.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/philhofer/fwd/README.md#2025-04-10_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nconst (\n    // DefaultReaderSize is the default size of the read buffer\n    DefaultReaderSize = 2048\n)\n\nconst (\n    // DefaultWriterSize is the\n    // default write buffer size.\n    DefaultWriterSize = 2048\n)\n```\n\n----------------------------------------\n\nTITLE: Endpoint Operational Info Response in Remote Driver Protocol\nDESCRIPTION: The remote driver responds to the operational info request with an arbitrary map of values.\nSOURCE: https://github.com/moby/moby/blob/master/libnetwork/docs/remote.md#2025-04-10_snippet_9\n\nLANGUAGE: JSON\nCODE:\n```\n{\n\t\t\"Value\": { ... }\n    }\n```\n\n----------------------------------------\n\nTITLE: Defining Raft Message Structure in Protobuf\nDESCRIPTION: Defines the structure of a Raft Message in Protocol Buffers, including fields for type, sender, receiver, term, log information, entries, and snapshot data.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/moby/swarmkit/v2/api/api.pb.txt#2025-04-10_snippet_110\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage_type {\n  name: \"Message\"\n  field {\n    name: \"type\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_ENUM\n    type_name: \".raftpb.MessageType\"\n    options {\n      65001: 0\n    }\n    json_name: \"type\"\n  }\n  field {\n    name: \"to\"\n    number: 2\n    label: LABEL_OPTIONAL\n    type: TYPE_UINT64\n    options {\n      65001: 0\n    }\n    json_name: \"to\"\n  }\n  field {\n    name: \"from\"\n    number: 3\n    label: LABEL_OPTIONAL\n    type: TYPE_UINT64\n    options {\n      65001: 0\n    }\n    json_name: \"from\"\n  }\n  field {\n    name: \"term\"\n    number: 4\n    label: LABEL_OPTIONAL\n    type: TYPE_UINT64\n    options {\n      65001: 0\n    }\n    json_name: \"term\"\n  }\n  field {\n    name: \"logTerm\"\n    number: 5\n    label: LABEL_OPTIONAL\n    type: TYPE_UINT64\n    options {\n      65001: 0\n    }\n    json_name: \"logTerm\"\n  }\n  field {\n    name: \"index\"\n    number: 6\n    label: LABEL_OPTIONAL\n    type: TYPE_UINT64\n    options {\n      65001: 0\n    }\n    json_name: \"index\"\n  }\n  field {\n    name: \"entries\"\n    number: 7\n    label: LABEL_REPEATED\n    type: TYPE_MESSAGE\n    type_name: \".raftpb.Entry\"\n    options {\n      65001: 0\n    }\n    json_name: \"entries\"\n  }\n  field {\n    name: \"commit\"\n    number: 8\n    label: LABEL_OPTIONAL\n    type: TYPE_UINT64\n    options {\n      65001: 0\n    }\n    json_name: \"commit\"\n  }\n  field {\n    name: \"snapshot\"\n    number: 9\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".raftpb.Snapshot\"\n    options {\n      65001: 0\n    }\n    json_name: \"snapshot\"\n  }\n  field {\n    name: \"reject\"\n    number: 10\n    label: LABEL_OPTIONAL\n    type: TYPE_BOOL\n    options {\n      65001: 0\n    }\n    json_name: \"reject\"\n  }\n  field {\n    name: \"rejectHint\"\n    number: 11\n    label: LABEL_OPTIONAL\n    type: TYPE_UINT64\n    options {\n      65001: 0\n    }\n    json_name: \"rejectHint\"\n  }\n  field {\n    name: \"context\"\n    number: 12\n    label: LABEL_OPTIONAL\n    type: TYPE_BYTES\n    json_name: \"context\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting OTEL Exporter Environment Variable\nDESCRIPTION: Exports the OTLP endpoint environment variable used to configure where traces should be sent.\nSOURCE: https://github.com/moby/moby/blob/master/contrib/otel/README.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport OTEL_EXPORTER_OTLP_ENDPOINT=http://localhost:4318\n```\n\n----------------------------------------\n\nTITLE: Configuring LogConfig in Docker Container Configuration\nDESCRIPTION: Specifies the logging configuration for a container. This JSON structure defines both the logging driver to use and any driver-specific configuration options.\nSOURCE: https://github.com/moby/moby/blob/master/docs/api/v1.24.md#2025-04-10_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{ \"Type\": \"<driver_name>\", \"Config\": {\"key1\": \"val1\"}}\n```\n\n----------------------------------------\n\nTITLE: Adding Exemplar Support to Prometheus Exporter\nDESCRIPTION: Adds Exemplar support to the Prometheus exporter.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-10_snippet_12\n\nLANGUAGE: Go\nCODE:\n```\nExemplar support to go.opentelemetry.io/otel/exporters/prometheus\n```\n\n----------------------------------------\n\nTITLE: Creating a Bucket in BoltDB with Go\nDESCRIPTION: This snippet demonstrates how to create a bucket in BoltDB using a transaction. It uses the Tx.CreateBucket() function to create a new bucket named 'MyBucket'.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/go.etcd.io/bbolt/README.md#2025-04-10_snippet_11\n\nLANGUAGE: go\nCODE:\n```\ndb.Update(func(tx *bolt.Tx) error {\n\tb, err := tx.CreateBucket([]byte(\"MyBucket\"))\n\tif err != nil {\n\t\treturn fmt.Errorf(\"create bucket: %s\", err)\n\t}\n\treturn nil\n})\n```\n\n----------------------------------------\n\nTITLE: Importing klog in Go\nDESCRIPTION: Shows how to import klog v2 instead of the original glog library.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/k8s.io/klog/v2/README.md#2025-04-10_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n\"k8s.io/klog/v2\"\n```\n\n----------------------------------------\n\nTITLE: Batch Read-Write Transactions in bbolt\nDESCRIPTION: Go code demonstrating how to use DB.Batch() for combining multiple updates into larger transactions in bbolt.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/go.etcd.io/bbolt/README.md#2025-04-10_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nerr := db.Batch(func(tx *bolt.Tx) error {\n\t...\n\treturn nil\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Docker Internal Networks with Different ICC Settings\nDESCRIPTION: These commands create two internal Docker networks: one with inter-container communication (ICC) enabled and another with ICC disabled. They also run containers on these networks.\nSOURCE: https://github.com/moby/moby/blob/master/integration/network/bridge/iptablesdoc/generated/usernet-internal.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker network create \\\n  -o com.docker.network.bridge.name=bridgeICC \\\n  --internal \\\n  --subnet 192.0.2.0/24 --gateway 192.0.2.1 bridge1\ndocker run --network bridgeICC --name c1 busybox\n\ndocker network create \\\n  -o com.docker.network.bridge.name=bridgeNoICC \\\n  -o com.docker.network.bridge.enable_icc=true \\\n  --internal \\\n  --subnet 198.51.100.0/24 --gateway 198.51.100.1 bridge1\ndocker run --network bridgeNoICC --name c1 busybox\n```\n\n----------------------------------------\n\nTITLE: Updating W3C Traceparent Header in Go SDK\nDESCRIPTION: Changes the W3C traceparent header from 'Traceparent' to lowercase 'traceparent' to comply with the W3C specification.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-10_snippet_44\n\nLANGUAGE: Go\nCODE:\n```\n// Old\nTraceparent\n\n// New\ntraceparent\n```\n\n----------------------------------------\n\nTITLE: Illustrating Unary State Diagram in ASCII Art\nDESCRIPTION: Presents a state diagram for unary operations in the ttrpc protocol using ASCII art. It shows the flow of messages between client and server, including the state changes that occur during a typical unary request-response cycle.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/containerd/ttrpc/PROTOCOL.md#2025-04-10_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n     +--------+                                    +--------+\n     | Client |                                    | Server |\n     +---+----+                                    +----+---+\n         |               +---------+                    |\n  local  >---------------+ Request +--------------------> remote\n  closed |               +---------+                    | closed\n         |                                              |\n         |              +----------+                    |\nfinished <--------------+ Response +--------------------< finished\n         |              +----------+                    |\n         |                                              |\n```\n\n----------------------------------------\n\nTITLE: Selective Stream Attachment in Docker API WebSocket\nDESCRIPTION: The GET /containers/{name}/attach/ws endpoint now supports 'stdin', 'stdout', and 'stderr' query parameters to attach only to specified streams. Previous versions ignored these parameters and attached to all streams by default.\nSOURCE: https://github.com/moby/moby/blob/master/docs/api/version-history.md#2025-04-10_snippet_11\n\nLANGUAGE: markdown\nCODE:\n```\n* `GET /containers/{name}/attach/ws` endpoint now accepts `stdin`, `stdout` and\n  `stderr` query parameters to only attach to configured streams.\n\n  NOTE: These parameters were documented before in older API versions, but not\n  actually supported. API versions before v1.42 continue to ignore these parameters\n  and default to attaching to all streams. To preserve the pre-v1.42 behavior,\n  set all three query parameters (`?stdin=1,stdout=1,stderr=1`).\n```\n\n----------------------------------------\n\nTITLE: Defining Address Resolution in SwarmKit Protobuf\nDESCRIPTION: Protocol Buffer definitions for ResolveAddressRequest and ResolveAddressResponse in Docker SwarmKit. These messages are used to resolve the network address of a node given its Raft ID.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/moby/swarmkit/v2/api/api.pb.txt#2025-04-10_snippet_121\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage_type {\n  name: \"ResolveAddressRequest\"\n  field {\n    name: \"raft_id\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_UINT64\n    json_name: \"raftId\"\n  }\n}\nmessage_type {\n  name: \"ResolveAddressResponse\"\n  field {\n    name: \"addr\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"addr\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Changelog Markdown Documentation\nDESCRIPTION: Markdown formatted changelog entries detailing version releases, features, improvements and bug fixes for the klauspost/compress project from 2023-2025. Organized by release date and version number.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/klauspost/compress/README.md#2025-04-10_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n# changelog\n\n* Feb 19th, 2025 - [1.18.0](https://github.com/klauspost/compress/releases/tag/v1.18.0)\n  * Add unsafe little endian loaders https://github.com/klauspost/compress/pull/1036\n  * fix: check `r.err != nil` but return a nil value error `err` by @alingse in https://github.com/klauspost/compress/pull/1028\n  * flate: Simplify L4-6 loading https://github.com/klauspost/compress/pull/1043\n  * flate: Simplify matchlen (remove asm) https://github.com/klauspost/compress/pull/1045\n  * s2: Improve small block compression speed w/o asm https://github.com/klauspost/compress/pull/1048\n  * flate: Fix matchlen L5+L6 https://github.com/klauspost/compress/pull/1049\n  * flate: Cleanup & reduce casts https://github.com/klauspost/compress/pull/1050\n```\n\n----------------------------------------\n\nTITLE: Setting Driver Capabilities in Remote Driver Protocol\nDESCRIPTION: The remote driver responds to a POST request on /NetworkDriver.GetCapabilities with its scope, connectivity scope, and gateway allocation checker status.\nSOURCE: https://github.com/moby/moby/blob/master/libnetwork/docs/remote.md#2025-04-10_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n\t\t\"Scope\":             \"local\",\n\t\t\"ConnectivityScope\": \"global\",\n\t\t\"GwAllocChecker\":    false\n\t}\n```\n\n----------------------------------------\n\nTITLE: Iptables Filter Table Configuration for Docker Internal Networks\nDESCRIPTION: This iptables configuration shows the filter table rules for Docker's internal networks. It includes chains for DOCKER, DOCKER-BRIDGE, DOCKER-CT, DOCKER-FORWARD, DOCKER-ISOLATION-STAGE-1, DOCKER-ISOLATION-STAGE-2, and DOCKER-USER.\nSOURCE: https://github.com/moby/moby/blob/master/integration/network/bridge/iptablesdoc/generated/usernet-internal.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n-P INPUT ACCEPT\n-P FORWARD ACCEPT\n-P OUTPUT ACCEPT\n-N DOCKER\n-N DOCKER-BRIDGE\n-N DOCKER-CT\n-N DOCKER-FORWARD\n-N DOCKER-ISOLATION-STAGE-1\n-N DOCKER-ISOLATION-STAGE-2\n-N DOCKER-USER\n-A FORWARD -j DOCKER-USER\n-A FORWARD -j DOCKER-FORWARD\n-A DOCKER ! -i docker0 -o docker0 -j DROP\n-A DOCKER-BRIDGE -o docker0 -j DOCKER\n-A DOCKER-CT -o docker0 -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT\n-A DOCKER-FORWARD -j DOCKER-CT\n-A DOCKER-FORWARD -j DOCKER-ISOLATION-STAGE-1\n-A DOCKER-FORWARD -j DOCKER-BRIDGE\n-A DOCKER-FORWARD -i docker0 -j ACCEPT\n-A DOCKER-FORWARD -i bridgeICC -o bridgeICC -j ACCEPT\n-A DOCKER-FORWARD -i bridgeNoICC -o bridgeNoICC -j DROP\n-A DOCKER-ISOLATION-STAGE-1 ! -s 198.51.100.0/24 -o bridgeNoICC -j DROP\n-A DOCKER-ISOLATION-STAGE-1 ! -d 198.51.100.0/24 -i bridgeNoICC -j DROP\n-A DOCKER-ISOLATION-STAGE-1 ! -s 192.0.2.0/24 -o bridgeICC -j DROP\n-A DOCKER-ISOLATION-STAGE-1 ! -d 192.0.2.0/24 -i bridgeICC -j DROP\n-A DOCKER-ISOLATION-STAGE-1 -i docker0 ! -o docker0 -j DOCKER-ISOLATION-STAGE-2\n-A DOCKER-ISOLATION-STAGE-2 -o docker0 -j DROP\n-A DOCKER-USER -j RETURN\n```\n\n----------------------------------------\n\nTITLE: Defining ContainerSpec Message in Protocol Buffers for Docker Swarmkit v1\nDESCRIPTION: This snippet defines the ContainerSpec message type, which includes fields for container configuration such as secrets, configs, hosts, DNS settings, healthcheck, isolation, and various system-level parameters.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/moby/swarmkit/v2/api/api.pb.txt#2025-04-10_snippet_66\n\nLANGUAGE: Protocol Buffers\nCODE:\n```\nmessage_type {\n  name: \"ContainerSpec\"\n  field {\n    name: \"secrets\"\n    number: 20\n    label: LABEL_REPEATED\n    type: TYPE_MESSAGE\n    type_name: \".docker.swarmkit.v1.SecretReference\"\n    json_name: \"secrets\"\n  }\n  field {\n    name: \"configs\"\n    number: 21\n    label: LABEL_REPEATED\n    type: TYPE_MESSAGE\n    type_name: \".docker.swarmkit.v1.ConfigReference\"\n    json_name: \"configs\"\n  }\n  // ... (additional fields omitted for brevity)\n}\n```\n\n----------------------------------------\n\nTITLE: Including Dockerfile Syntax File in System-Wide Nano Configuration\nDESCRIPTION: Configuration line to add to /etc/nanorc for system-wide Dockerfile syntax highlighting. This enables the custom syntax file for all users on the system.\nSOURCE: https://github.com/moby/moby/blob/master/contrib/syntax/nano/README.md#2025-04-10_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n## Dockerfile files\ninclude \"/usr/local/share/nano/Dockerfile.nanorc\"\n```\n\n----------------------------------------\n\nTITLE: Loading an Existing cgroup (v1)\nDESCRIPTION: Loads an existing cgroup from a static path for management or monitoring purposes.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/containerd/cgroups/v3/README.md#2025-04-10_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ncontrol, err = cgroup1.Load(cgroup1.Default, cgroups.StaticPath(\"/test\"))\n```\n\n----------------------------------------\n\nTITLE: NAT Table IPTables Commands\nDESCRIPTION: The actual iptables commands used to create the NAT table configuration, including chain creation, policy setting, and rule definition.\nSOURCE: https://github.com/moby/moby/blob/master/integration/network/bridge/iptablesdoc/generated/new-daemon.md#2025-04-10_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n-P PREROUTING ACCEPT\n-P INPUT ACCEPT\n-P OUTPUT ACCEPT\n-P POSTROUTING ACCEPT\n-N DOCKER\n-A PREROUTING -m addrtype --dst-type LOCAL -j DOCKER\n-A OUTPUT ! -d 127.0.0.0/8 -m addrtype --dst-type LOCAL -j DOCKER\n-A POSTROUTING -s 172.17.0.0/16 ! -o docker0 -j MASQUERADE\n-A DOCKER -i docker0 -j RETURN\n```\n\n----------------------------------------\n\nTITLE: Defining Protocol Buffer MethodOptions with IdempotencyLevel\nDESCRIPTION: Defines options for protocol buffer service methods, including deprecation markers and idempotency level specification to indicate if a method has side effects.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/moby/swarmkit/v2/api/api.pb.txt#2025-04-10_snippet_15\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage_type {\n    name: \"MethodOptions\"\n    field {\n      name: \"deprecated\"\n      number: 33\n      label: LABEL_OPTIONAL\n      type: TYPE_BOOL\n      default_value: \"false\"\n      json_name: \"deprecated\"\n    }\n    field {\n      name: \"idempotency_level\"\n      number: 34\n      label: LABEL_OPTIONAL\n      type: TYPE_ENUM\n      type_name: \".google.protobuf.MethodOptions.IdempotencyLevel\"\n      default_value: \"IDEMPOTENCY_UNKNOWN\"\n      json_name: \"idempotencyLevel\"\n    }\n    field {\n      name: \"uninterpreted_option\"\n      number: 999\n      label: LABEL_REPEATED\n      type: TYPE_MESSAGE\n      type_name: \".google.protobuf.UninterpretedOption\"\n      json_name: \"uninterpretedOption\"\n    }\n    enum_type {\n      name: \"IdempotencyLevel\"\n      value {\n        name: \"IDEMPOTENCY_UNKNOWN\"\n        number: 0\n      }\n      value {\n        name: \"NO_SIDE_EFFECTS\"\n        number: 1\n      }\n      value {\n        name: \"IDEMPOTENT\"\n        number: 2\n      }\n    }\n    extension_range {\n      start: 1000\n      end: 536870912\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Customized Logrus Configuration Example\nDESCRIPTION: Shows how to customize Logrus with JSON formatting, output redirection, and log levels with field-based logging.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/sirupsen/logrus/README.md#2025-04-10_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n  \"os\"\n  log \"github.com/sirupsen/logrus\"\n)\n\nfunc init() {\n  // Log as JSON instead of the default ASCII formatter.\n  log.SetFormatter(&log.JSONFormatter{})\n\n  // Output to stdout instead of the default stderr\n  // Can be any io.Writer, see below for File example\n  log.SetOutput(os.Stdout)\n\n  // Only log the warning severity or above.\n  log.SetLevel(log.WarnLevel)\n}\n\nfunc main() {\n  log.WithFields(log.Fields{\n    \"animal\": \"walrus\",\n    \"size\":   10,\n  }).Info(\"A group of walrus emerges from the ocean\")\n\n  log.WithFields(log.Fields{\n    \"omg\":    true,\n    \"number\": 122,\n  }).Warn(\"The group's number increased tremendously!\")\n\n  log.WithFields(log.Fields{\n    \"omg\":    true,\n    \"number\": 100,\n  }).Fatal(\"The ice breaks!\")\n\n  // A common pattern is to re-use fields between logging statements by re-using\n  // the logrus.Entry returned from WithFields()\n  contextLogger := log.WithFields(log.Fields{\n    \"common\": \"this is a common field\",\n    \"other\": \"I also should be logged always\",\n  })\n\n  contextLogger.Info(\"I'll be logged with common and other field\")\n  contextLogger.Info(\"Me too\")\n}\n```\n\n----------------------------------------\n\nTITLE: Changing Directory to Docker Fork Repository\nDESCRIPTION: Change the current working directory to the local clone of the Docker Engine fork repository.\nSOURCE: https://github.com/moby/moby/blob/master/docs/contributing/set-up-dev-env.md#2025-04-10_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ cd ~/repos/moby-fork\n```\n\n----------------------------------------\n\nTITLE: Docker API Endpoint Examples\nDESCRIPTION: Collection of Docker API endpoint examples showing request formats and responses across different versions. Includes endpoints for container management, networking, volumes, and system information.\nSOURCE: https://github.com/moby/moby/blob/master/docs/api/version-history.md#2025-04-10_snippet_13\n\nLANGUAGE: markdown\nCODE:\n```\nGET /containers/json\nGET /networks/(name)\nPOST /containers/(name)/update\nPOST /networks/create\nGET /info\nPOST /containers/create\nGET /containers/(id or name)/stats\nPOST /auth\nGET /volumes\nGET /containers/(id or name)/logs\nPOST /images/load\n```\n\n----------------------------------------\n\nTITLE: Iptables NAT Table Configuration for Docker Internal Networks\nDESCRIPTION: This iptables configuration shows the NAT table rules for Docker's internal networks. It includes chains for PREROUTING, INPUT, OUTPUT, POSTROUTING, and DOCKER.\nSOURCE: https://github.com/moby/moby/blob/master/integration/network/bridge/iptablesdoc/generated/usernet-internal.md#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n-P PREROUTING ACCEPT\n-P INPUT ACCEPT\n-P OUTPUT ACCEPT\n-P POSTROUTING ACCEPT\n-N DOCKER\n-A PREROUTING -m addrtype --dst-type LOCAL -j DOCKER\n-A OUTPUT ! -d 127.0.0.0/8 -m addrtype --dst-type LOCAL -j DOCKER\n-A POSTROUTING -s 172.17.0.0/16 ! -o docker0 -j MASQUERADE\n-A DOCKER -i docker0 -j RETURN\n```\n\n----------------------------------------\n\nTITLE: Displaying Developer Certificate of Origin in Markdown\nDESCRIPTION: This code block shows the full text of the Developer Certificate of Origin (DCO) version 1.1, which contributors must agree to when making contributions to the project.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/opencontainers/go-digest/CONTRIBUTING.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```\nDeveloper Certificate of Origin\nVersion 1.1\n\nCopyright (C) 2004, 2006 The Linux Foundation and its contributors.\n1 Letterman Drive\nSuite D4700\nSan Francisco, CA, 94129\n\nEveryone is permitted to copy and distribute verbatim copies of this\nlicense document, but changing it is not allowed.\n\n\nDeveloper's Certificate of Origin 1.1\n\nBy making a contribution to this project, I certify that:\n\n(a) The contribution was created in whole or in part by me and I\n    have the right to submit it under the open source license\n    indicated in the file; or\n\n(b) The contribution is based upon previous work that, to the best\n    of my knowledge, is covered under an appropriate open source\n    license and I have the right under that license to submit that\n    work with modifications, whether created in whole or in part\n    by me, under the same open source license (unless I am\n    permitted to submit under a different license), as indicated\n    in the file; or\n\n(c) The contribution was provided directly to me by some other\n    person who certified (a), (b) or (c) and I have not modified\n    it.\n\n(d) I understand and agree that this project and the contribution\n    are public and that a record of the contribution (including all\n    personal information I submit with it, including my sign-off) is\n    maintained indefinitely and may be redistributed consistent with\n    this project or the open source license(s) involved.\n```\n```\n\n----------------------------------------\n\nTITLE: TarSum Checksum Format Example\nDESCRIPTION: Demonstrates the format and components of a TarSum checksum string, including version, cipher, and hash value components separated by delimiters.\nSOURCE: https://github.com/moby/moby/blob/master/pkg/tarsum/tarsum_spec.md#2025-04-10_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n\"tarsum.v1+sha256:220a60ecd4a3c32c282622a625a54db9ba0ff55b5ba9c29c7064a2bc358b6a3e\"\n|         |       \\                                                               |\n|         |        \\                                                              |\n|_version_|_cipher__|__                                                           |\n|                      \\                                                          |\n|_calculation_mechanics_|______________________expected_sum_______________________|\n```\n\n----------------------------------------\n\nTITLE: Defining Mount.VolumeOptions Message in Protocol Buffers\nDESCRIPTION: This nested message type defines options for volume mounts in Docker containers, including NoCopy flag, volume labels, driver configuration, and subpath specification for accessing a specific directory within a volume.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/moby/swarmkit/v2/api/api.pb.txt#2025-04-10_snippet_31\n\nLANGUAGE: protobuf\nCODE:\n```\nnested_type {\n  name: \"VolumeOptions\"\n  field {\n    name: \"nocopy\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_BOOL\n    options {\n      65004: \"NoCopy\"\n    }\n    json_name: \"nocopy\"\n  }\n  field {\n    name: \"labels\"\n    number: 2\n    label: LABEL_REPEATED\n    type: TYPE_MESSAGE\n    type_name: \".docker.swarmkit.v1.Mount.VolumeOptions.LabelsEntry\"\n    json_name: \"labels\"\n  }\n  field {\n    name: \"driver_config\"\n    number: 3\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".docker.swarmkit.v1.Driver\"\n    json_name: \"driverConfig\"\n  }\n  field {\n    name: \"subpath\"\n    number: 4\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    options {\n      65004: \"Subpath\"\n    }\n    json_name: \"subpath\"\n  }\n  nested_type {\n    name: \"LabelsEntry\"\n    field {\n      name: \"key\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"key\"\n    }\n    field {\n      name: \"value\"\n      number: 2\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"value\"\n    }\n    options {\n      map_entry: true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing File Locking with Flock in Go\nDESCRIPTION: Example demonstrating how to use flock to implement file locking, including creating a new lock, attempting to acquire it non-blockingly, and releasing it after use. Shows error handling and basic lock operations.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/gofrs/flock/README.md#2025-04-10_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/gofrs/flock\"\n\nfileLock := flock.New(\"/var/lock/go-lock.lock\")\n\nlocked, err := fileLock.TryLock()\n\nif err != nil {\n\t// handle locking error\n}\n\nif locked {\n\t// do work\n\tfileLock.Unlock()\n}\n```\n\n----------------------------------------\n\nTITLE: Generating event_messages.bin using Windows Message Compiler in Debian container\nDESCRIPTION: Commands to run a Debian container, install Windows cross-compilation tools, compile Windows message resources from event_messages.mc, and copy the resulting binary file to the host system. This process creates a Windows-compatible binary resource file needed for Docker's Windows components.\nSOURCE: https://github.com/moby/moby/blob/master/cli/winresources/README.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run --rm -it -v \"$(pwd):/winresources\" debian:bookworm-slim bash\nroot@9ad2260f6ebc:/# apt-get update -y && apt-get install -y binutils-mingw-w64-x86-64\nroot@9ad2260f6ebc:/# x86_64-w64-mingw32-windmc -v /winresources/event_messages.mc\nroot@9ad2260f6ebc:/# mv MSG00001.bin /winresources/event_messages.bin\n```\n\n----------------------------------------\n\nTITLE: Defining UpdateStatus Message in Protocol Buffers for Docker SwarmKit\nDESCRIPTION: This snippet defines a message 'UpdateStatus' for Docker SwarmKit, including fields for state, started_at, completed_at, and message. It also includes an enum 'UpdateState' for specifying update states.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/moby/swarmkit/v2/api/api.pb.txt#2025-04-10_snippet_37\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage_type {\n  name: \"UpdateStatus\"\n  field {\n    name: \"state\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_ENUM\n    type_name: \".docker.swarmkit.v1.UpdateStatus.UpdateState\"\n    json_name: \"state\"\n  }\n  field {\n    name: \"started_at\"\n    number: 2\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".google.protobuf.Timestamp\"\n    json_name: \"startedAt\"\n  }\n  field {\n    name: \"completed_at\"\n    number: 3\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".google.protobuf.Timestamp\"\n    json_name: \"completedAt\"\n  }\n  field {\n    name: \"message\"\n    number: 4\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"message\"\n  }\n  enum_type {\n    name: \"UpdateState\"\n    value {\n      name: \"UNKNOWN\"\n      number: 0\n    }\n    value {\n      name: \"UPDATING\"\n      number: 1\n    }\n    value {\n      name: \"PAUSED\"\n      number: 2\n    }\n    value {\n      name: \"COMPLETED\"\n      number: 3\n    }\n    value {\n      name: \"ROLLBACK_STARTED\"\n      number: 4\n    }\n    value {\n      name: \"ROLLBACK_PAUSED\"\n      number: 5\n    }\n    value {\n      name: \"ROLLBACK_COMPLETED\"\n      number: 6\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Save Cache POST Endpoint\nDESCRIPTION: POST endpoint for reserving a cache key and obtaining a unique cache ID for subsequent upload operations. Request requires key and version parameters.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/tonistiigi/go-actions-cache/api.md#2025-04-10_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nPOST /caches\nContent-Type: application/json\n\n{\n  \"key\": \"cache-key\",\n  \"version\": \"namespace-value\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Flock Package with Go\nDESCRIPTION: Command to install the flock package using Go's package manager.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/gofrs/flock/README.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get -u github.com/gofrs/flock\n```\n\n----------------------------------------\n\nTITLE: Core Operations in Bolt Database\nDESCRIPTION: Documentation of main entry points and core operations in Bolt database, including file operations, transactions, bucket operations, and cursor management. Details internal implementation of database operations and memory management strategies.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/go.etcd.io/bbolt/README.md#2025-04-10_snippet_24\n\nLANGUAGE: markdown\nCODE:\n```\n- `Open()` - Initializes the reference to the database. It's responsible for\\n  creating the database if it doesn't exist, obtaining an exclusive lock on the\\n  file, reading the meta pages, & memory-mapping the file.\\n\\n- `DB.Begin()` - Starts a read-only or read-write transaction depending on the\\n  value of the `writable` argument. This requires briefly obtaining the \"meta\"\\n  lock to keep track of open transactions. Only one read-write transaction can\\n  exist at a time so the \"rwlock\" is acquired during the life of a read-write\\n  transaction.\\n\\n- `Bucket.Put()` - Writes a key/value pair into a bucket. After validating the\\n  arguments, a cursor is used to traverse the B+tree to the page and position\\n  where they key & value will be written. Once the position is found, the bucket\\n  materializes the underlying page and the page's parent pages into memory as\\n  \"nodes\". These nodes are where mutations occur during read-write transactions.\\n  These changes get flushed to disk during commit.\\n\\n- `Bucket.Get()` - Retrieves a key/value pair from a bucket. This uses a cursor\\n  to move to the page & position of a key/value pair. During a read-only\\n  transaction, the key and value data is returned as a direct reference to the\\n  underlying mmap file so there's no allocation overhead. For read-write\\n  transactions, this data may reference the mmap file or one of the in-memory\\n  node values.\\n\\n- `Cursor` - This object is simply for traversing the B+tree of on-disk pages\\n  or in-memory nodes. It can seek to a specific key, move to the first or last\\n  value, or it can move forward or backward. The cursor handles the movement up\\n  and down the B+tree transparently to the end user.\\n\\n- `Tx.Commit()` - Converts the in-memory dirty nodes and the list of free pages\\n  into pages to be written to disk. Writing to disk then occurs in two phases.\\n  First, the dirty pages are written to disk and an `fsync()` occurs. Second, a\\n  new meta page with an incremented transaction ID is written and another\\n  `fsync()` occurs. This two phase write ensures that partially written data\\n  pages are ignored in the event of a crash since the meta page pointing to them\\n  is never written. Partially written meta pages are invalidated because they\\n  are written with a checksum.\n```\n\n----------------------------------------\n\nTITLE: Creating a new release tag for go-toml\nDESCRIPTION: Git commands for checking out, tagging, and pushing a new version release.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/pelletier/go-toml/v2/CONTRIBUTING.md#2025-04-10_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout v2\ngit pull\ngit tag v2.2.0\ngit push --tags\n```\n\n----------------------------------------\n\nTITLE: Creating and Querying an Immutable Radix Tree in Go\nDESCRIPTION: This snippet demonstrates how to create an immutable radix tree, insert key-value pairs, and perform a longest prefix match query. It showcases the basic operations of the iradix package.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/hashicorp/go-immutable-radix/README.md#2025-04-10_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// Create a tree\nr := iradix.New()\nr, _, _ = r.Insert([]byte(\"foo\"), 1)\nr, _, _ = r.Insert([]byte(\"bar\"), 2)\nr, _, _ = r.Insert([]byte(\"foobar\"), 2)\n\n// Find the longest prefix match\nm, _, _ := r.Root().LongestPrefix([]byte(\"foozip\"))\nif string(m) != \"foo\" {\n    panic(\"should be foo\")\n}\n```\n\n----------------------------------------\n\nTITLE: Git Push Command for YAML Project Release\nDESCRIPTION: Command used to push the newly created version tag to the remote repository, making the release official.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/sigs.k8s.io/yaml/RELEASE.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit push $VERSION\n```\n\n----------------------------------------\n\nTITLE: Changelog Format in Markdown\nDESCRIPTION: Standard changelog format documenting version history with sections for Breaking Changes, Fixed issues, Added features, Changed functionality, and Compatibility updates. Each version is clearly dated and categorized.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/cyphar/filepath-securejoin/CHANGELOG.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Changelog #\nAll notable changes to this project will be documented in this file.\n\nThe format is based on [Keep a Changelog](http://keepachangelog.com/)\nand this project adheres to [Semantic Versioning](http://semver.org/).\n\n## [Unreleased] ##\n\n## [0.4.1] - 2025-01-28 ##\n\n### Fixed ###\n- The restrictions added for `root` paths...\n\n## [0.4.0] - 2025-01-13 ##\n\n### Breaking ####\n- `SecureJoin(VFS)` will now return an error...\n```\n\n----------------------------------------\n\nTITLE: Network Driver Leave Request Format\nDESCRIPTION: Format for the POST request to NetworkDriver.Leave endpoint when removing an endpoint from a sandbox.\nSOURCE: https://github.com/moby/moby/blob/master/libnetwork/docs/remote.md#2025-04-10_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"NetworkID\": string,\n    \"EndpointID\": string\n}\n```\n\n----------------------------------------\n\nTITLE: NAT Table IPTables Rules\nDESCRIPTION: NAT table configuration for port forwarding and masquerading in Docker network\nSOURCE: https://github.com/moby/moby/blob/master/integration/network/bridge/iptablesdoc/generated/usernet-portmap-noproxy.md#2025-04-10_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n-P PREROUTING ACCEPT\n-P INPUT ACCEPT\n-P OUTPUT ACCEPT\n-P POSTROUTING ACCEPT\n-N DOCKER\n-A PREROUTING -m addrtype --dst-type LOCAL -j DOCKER\n-A OUTPUT -m addrtype --dst-type LOCAL -j DOCKER\n-A POSTROUTING -o bridge1 -m addrtype --src-type LOCAL -j MASQUERADE\n-A POSTROUTING -s 192.0.2.0/24 ! -o bridge1 -j MASQUERADE\n-A POSTROUTING -o docker0 -m addrtype --src-type LOCAL -j MASQUERADE\n-A POSTROUTING -s 172.17.0.0/16 ! -o docker0 -j MASQUERADE\n-A POSTROUTING -s 192.0.2.2/32 -d 192.0.2.2/32 -p tcp -m tcp --dport 80 -j MASQUERADE\n-A DOCKER -p tcp -m tcp --dport 8080 -j DNAT --to-destination 192.0.2.2:80\n```\n\n----------------------------------------\n\nTITLE: Calculating Unary Request Error Percentage for gRPC Services using Prometheus\nDESCRIPTION: This query computes the percentage of failed unary requests for each gRPC service. It combines the error rate and total request rate queries to calculate the failure percentage, which can be used for SLA monitoring.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/grpc-ecosystem/go-grpc-prometheus/README.md#2025-04-10_snippet_5\n\nLANGUAGE: jsoniq\nCODE:\n```\nsum(rate(grpc_server_handled_total{job=\"foo\",grpc_type=\"unary\",grpc_code!=\"OK\"}[1m])) by (grpc_service)\n / \nsum(rate(grpc_server_started_total{job=\"foo\",grpc_type=\"unary\"}[1m])) by (grpc_service)\n * 100.0\n```\n\n----------------------------------------\n\nTITLE: Adding Fork as Remote\nDESCRIPTION: These commands navigate to the OpenCensus Go directory in the GOPATH and add the user's fork as a remote repository named 'fork'.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/go.opencensus.io/CONTRIBUTING.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd $(go env GOPATH)/src/go.opencensus.io\ngit remote add fork git@github.com:YOUR_GITHUB_USERNAME/opencensus-go.git\n```\n\n----------------------------------------\n\nTITLE: Creating a Network and Running a Container with Published Port in nat-unprotected Mode\nDESCRIPTION: This bash snippet demonstrates how to create a Docker network with nat-unprotected gateway mode and run a container with a published port. The commands set up a bridge network named 'bridge1' with a specific subnet and gateway, then run a busybox container that maps host port 8080 to container port 80.\nSOURCE: https://github.com/moby/moby/blob/master/integration/network/bridge/iptablesdoc/templates/usernet-portmap-natunprot.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker network create \\\n  -o com.docker.network.bridge.name=bridge1 \\\n  -o com.docker.network.bridge.gateway_mode_ipv4=nat-unprotected \\\n  --subnet 192.0.2.0/24 --gateway 192.0.2.1 bridge1\ndocker run --network bridge1 -p 8080:80 --name c1 busybox\n```\n\n----------------------------------------\n\nTITLE: Project Repository Link in Markdown\nDESCRIPTION: Markdown link to the Moby community guidelines document in the project repository.\nSOURCE: https://github.com/moby/moby/blob/master/docs/contributing/who-written-for.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<a href=\"https://github.com/moby/moby/blob/master/CONTRIBUTING.md#docker-community-guidelines\" target=\"_blank\">community guidelines</a>\n```\n\n----------------------------------------\n\nTITLE: Executing the Plugin RPC Generator from command line\nDESCRIPTION: Example shell command that runs the Plugin RPC Generator tool with specific parameters to generate proxy code for the volumeDriver interface.\nSOURCE: https://github.com/moby/moby/blob/master/pkg/plugins/pluginrpc-gen/README.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ pluginrpc-gen --type volumeDriver --name VolumeDriver -i volumes/drivers/extpoint.go -o volumes/drivers/proxy.go\n```\n\n----------------------------------------\n\nTITLE: Docker Service Creation Command for Swarm\nDESCRIPTION: Example Docker command to create a Swarm service with port 8080 published to port 80 in the container.\nSOURCE: https://github.com/moby/moby/blob/master/integration/network/bridge/iptablesdoc/generated/swarm-portmap.md#2025-04-10_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndocker service create -p 8080:80 busybox top\n```\n\n----------------------------------------\n\nTITLE: Defining PortStatus Message in Protocol Buffers for Docker SwarmKit\nDESCRIPTION: This snippet defines a message 'PortStatus' for Docker SwarmKit, including a repeated field for ports of type PortConfig.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/moby/swarmkit/v2/api/api.pb.txt#2025-04-10_snippet_39\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage_type {\n  name: \"PortStatus\"\n  field {\n    name: \"ports\"\n    number: 1\n    label: LABEL_REPEATED\n    type: TYPE_MESSAGE\n    type_name: \".docker.swarmkit.v1.PortConfig\"\n    json_name: \"ports\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding SetAttribute Method to Trace API in Go SDK\nDESCRIPTION: Adds a new SetAttribute method to the trace API that takes a string key and interface{} value.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-10_snippet_43\n\nLANGUAGE: Go\nCODE:\n```\nSetAttribute(string, interface{})\n```\n\n----------------------------------------\n\nTITLE: Pushing Docker Image to Registry with HTTP POST Request\nDESCRIPTION: Sends a POST request to push a Docker image to a registry. The request may include authentication headers for private registries.\nSOURCE: https://github.com/moby/moby/blob/master/docs/api/v1.24.md#2025-04-10_snippet_57\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1.24/images/test/push HTTP/1.1\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Output for klog in Go\nDESCRIPTION: Illustrates how to redirect klog output to a custom io.Writer using SetOutput() method.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/k8s.io/klog/v2/README.md#2025-04-10_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nklog.SetOutput()\n```\n\n----------------------------------------\n\nTITLE: Adding a Git Remote for Your Fork\nDESCRIPTION: Command to add your personal fork as a remote to the local Git repository. This allows you to push changes to your fork for creating pull requests.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#2025-04-10_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ngit remote add <YOUR_FORK> git@github.com:<YOUR_GITHUB_USERNAME>/opentelemetry-go\n```\n\n----------------------------------------\n\nTITLE: Graceful Server Shutdown Implementation\nDESCRIPTION: Shows how to implement graceful shutdown of a Mux server using Go's built-in shutdown capabilities.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/gorilla/mux/README.md#2025-04-10_snippet_13\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"context\"\n    \"flag\"\n    \"log\"\n    \"net/http\"\n    \"os\"\n    \"os/signal\"\n    \"time\"\n\n    \"github.com/gorilla/mux\"\n)\n\nfunc main() {\n    var wait time.Duration\n    flag.DurationVar(&wait, \"graceful-timeout\", time.Second * 15, \"the duration for which the server gracefully wait for existing connections to finish - e.g. 15s or 1m\")\n    flag.Parse()\n\n    r := mux.NewRouter()\n    // Add your routes as needed\n\n    srv := &http.Server{\n        Addr:         \"0.0.0.0:8080\",\n        WriteTimeout: time.Second * 15,\n        ReadTimeout:  time.Second * 15,\n        IdleTimeout:  time.Second * 60,\n        Handler: r,\n    }\n\n    go func() {\n        if err := srv.ListenAndServe(); err != nil {\n            log.Println(err)\n        }\n    }()\n\n    c := make(chan os.Signal, 1)\n    signal.Notify(c, os.Interrupt)\n    <-c\n    ctx, cancel := context.WithTimeout(context.Background(), wait)\n    defer cancel()\n    srv.Shutdown(ctx)\n    log.Println(\"shutting down\")\n    os.Exit(0)\n}\n```\n\n----------------------------------------\n\nTITLE: Global MeterProvider Usage\nDESCRIPTION: Example showing recommended usage of global MeterProvider after deprecation of go.opentelemetry.io/otel/metric/global package.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-10_snippet_20\n\nLANGUAGE: go\nCODE:\n```\nNewMeterProvider().Meter(\"\")\n```\n\n----------------------------------------\n\nTITLE: Markdown Link to Kubernetes Code of Conduct\nDESCRIPTION: Markdown heading and link directing users to the official Kubernetes Community Code of Conduct document.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/k8s.io/klog/v2/code-of-conduct.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Kubernetes Community Code of Conduct\n\nPlease refer to our [Kubernetes Community Code of Conduct](https://git.k8s.io/community/code-of-conduct.md)\n```\n\n----------------------------------------\n\nTITLE: Running Diagnostic Client for Overlay Network\nDESCRIPTION: Example bash command to use the diagnostic client to examine the overlay network table for a specific network on a non-default port.\nSOURCE: https://github.com/moby/moby/blob/master/libnetwork/cmd/diagnostic/README.md#2025-04-10_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\n$ diagnostiClient -port 2001 -t overlay -v -net n8a8ie6tb3wr2e260vxj8ncy4 -a\n```\n\n----------------------------------------\n\nTITLE: Defining ConfChangeSingle Message Type in Protobuf for Raft\nDESCRIPTION: Protocol Buffer definition for the ConfChangeSingle message type used in Raft consensus algorithm. This message represents a single configuration change with a type and node ID.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/moby/swarmkit/v2/api/api.pb.txt#2025-04-10_snippet_111\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage_type {\n  name: \"ConfChangeSingle\"\n  field {\n    name: \"type\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_ENUM\n    type_name: \".raftpb.ConfChangeType\"\n    options {\n      65001: 0\n    }\n    json_name: \"type\"\n  }\n  field {\n    name: \"node_id\"\n    number: 2\n    label: LABEL_OPTIONAL\n    type: TYPE_UINT64\n    options {\n      65001: 0\n      65004: \"NodeID\"\n    }\n    json_name: \"nodeId\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Component Table in Markdown\nDESCRIPTION: A markdown table describing the main components of the Docker Distribution project, including registry, libraries, specifications, and documentation.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/docker/distribution/README.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|**Component**       |Description                                                                                                                                                                                         |\n|--------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\\n| **registry**       | An implementation of the [Docker Registry HTTP API V2](docs/spec/api.md) for use with docker 1.6+.                                                                                                  |\\n| **libraries**      | A rich set of libraries for interacting with distribution components. Please see [godoc](https://godoc.org/github.com/docker/distribution) for details. **Note**: These libraries are **unstable**. |\\n| **specifications** | _Distribution_ related specifications are available in [docs/spec](docs/spec)                                                                                                                        |\\n| **documentation**  | Docker's full documentation set is available at [docs.docker.com](https://docs.docker.com). This repository [contains the subset](docs/) related just to the registry.                                                                                                                                          |\n```\n\n----------------------------------------\n\nTITLE: Docker Network and Container Setup Commands\nDESCRIPTION: Commands to create a user-defined network and run a container with a published port without userland proxy\nSOURCE: https://github.com/moby/moby/blob/master/integration/network/bridge/iptablesdoc/generated/usernet-portmap-noproxy.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndockerd --userland-proxy=false\ndocker network create \\\n  -o com.docker.network.bridge.name=bridge1 \\\n  --subnet 192.0.2.0/24 --gateway 192.0.2.1 bridge1\ndocker run --network bridge1 -p 8080:80 --name c1 busybox\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Go Struct Converter Chain\nDESCRIPTION: Demonstrates the basic usage of the converter chain for transforming between different struct versions. This example shows how to create a conversion chain and execute a conversion between structs.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/anchore/go-struct-converter/README.md#2025-04-10_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nchain := converter.NewChain(V1{}, V2{}, V3{})\n\nchain.Convert(myV1struct, &myV3struct)\n```\n\n----------------------------------------\n\nTITLE: Starting Docker Daemon in Debug Mode\nDESCRIPTION: Start the Docker daemon in debug mode as a background process within the development container.\nSOURCE: https://github.com/moby/moby/blob/master/docs/contributing/set-up-dev-env.md#2025-04-10_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n# dockerd -D &\n```\n\n----------------------------------------\n\nTITLE: Defining NodeDescription Message in Protocol Buffers\nDESCRIPTION: This snippet defines the NodeDescription message type which contains information about a node in a Docker Swarm cluster, including hostname, platform, resources, engine information, TLS configuration, FIPS status, and CSI (Container Storage Interface) information.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/moby/swarmkit/v2/api/api.pb.txt#2025-04-10_snippet_23\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage_type {\n  name: \"NodeDescription\"\n  field {\n    name: \"hostname\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"hostname\"\n  }\n  field {\n    name: \"platform\"\n    number: 2\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".docker.swarmkit.v1.Platform\"\n    json_name: \"platform\"\n  }\n  field {\n    name: \"resources\"\n    number: 3\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".docker.swarmkit.v1.Resources\"\n    json_name: \"resources\"\n  }\n  field {\n    name: \"engine\"\n    number: 4\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".docker.swarmkit.v1.EngineDescription\"\n    json_name: \"engine\"\n  }\n  field {\n    name: \"tls_info\"\n    number: 5\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".docker.swarmkit.v1.NodeTLSInfo\"\n    options {\n      65004: \"TLSInfo\"\n    }\n    json_name: \"tlsInfo\"\n  }\n  field {\n    name: \"fips\"\n    number: 6\n    label: LABEL_OPTIONAL\n    type: TYPE_BOOL\n    options {\n      65004: \"FIPS\"\n    }\n    json_name: \"fips\"\n  }\n  field {\n    name: \"csi_info\"\n    number: 7\n    label: LABEL_REPEATED\n    type: TYPE_MESSAGE\n    type_name: \".docker.swarmkit.v1.NodeCSIInfo\"\n    options {\n      65004: \"CSIInfo\"\n    }\n    json_name: \"csiInfo\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Upgrading dependency in Go module\nDESCRIPTION: Upgrades the golang.org/x/sys/unix dependency to address a security vulnerability.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-10_snippet_24\n\nLANGUAGE: Go\nCODE:\n```\nUpgrade `golang.org/x/sys/unix` from `v0.0.0-20210423185535-09eb48e85fd7` to `v0.0.0-20220919091848-fb04ddd9f9c8`.\n```\n\n----------------------------------------\n\nTITLE: Registering for Memory Pressure Events (v1)\nDESCRIPTION: Sets up event notification for memory pressure events at medium pressure level using the default notification mode.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/containerd/cgroups/v3/README.md#2025-04-10_snippet_12\n\nLANGUAGE: go\nCODE:\n```\nevent := cgroup1.MemoryPressureEvent(cgroup1.MediumPressure, cgroup1.DefaultMode)\nefd, err := control.RegisterMemoryEvent(event)\n```\n\n----------------------------------------\n\nTITLE: Defining WatchActionKind Enum in Docker SwarmKit Protobuf\nDESCRIPTION: Defines the WatchActionKind enumeration that specifies possible action types for watch events. It includes values for unknown actions, create, update, and remove operations.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/moby/swarmkit/v2/api/api.pb.txt#2025-04-10_snippet_136\n\nLANGUAGE: protobuf\nCODE:\n```\nenum_type {\n  name: \"WatchActionKind\"\n  value {\n    name: \"WATCH_ACTION_UNKNOWN\"\n    number: 0\n    options {\n      66001: \"WatchActionKindUnknown\"\n    }\n  }\n  value {\n    name: \"WATCH_ACTION_CREATE\"\n    number: 1\n    options {\n      66001: \"WatchActionKindCreate\"\n    }\n  }\n  value {\n    name: \"WATCH_ACTION_UPDATE\"\n    number: 2\n    options {\n      66001: \"WatchActionKindUpdate\"\n    }\n  }\n  value {\n    name: \"WATCH_ACTION_REMOVE\"\n    number: 4\n    options {\n      66001: \"WatchActionKindRemove\"\n    }\n  }\n  options {\n    62001: 0\n    62023: \"WatchActionKind\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Container Restart Response\nDESCRIPTION: Example HTTP response for a successful container restart operation, showing a 204 No Content status code.\nSOURCE: https://github.com/moby/moby/blob/master/docs/api/v1.24.md#2025-04-10_snippet_33\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 204 No Content\n```\n\n----------------------------------------\n\nTITLE: Installing UUID Package for Go\nDESCRIPTION: This command installs the UUID package from the GitHub repository using Go's package management system. It fetches the latest version of the package and adds it to the current Go module.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/google/uuid/README.md#2025-04-10_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/google/uuid\n```\n\n----------------------------------------\n\nTITLE: HTML Comment Block for Contact Information Template\nDESCRIPTION: HTML comment block containing a template for adding custom contact information to the contributing guidelines\nSOURCE: https://github.com/moby/moby/blob/master/vendor/sigs.k8s.io/yaml/CONTRIBUTING.md#2025-04-10_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!---\nCustom Information - if you're copying this template for the first time you can add custom content here, for example:\n\n## Contact Information\n\n- [Slack channel](https://kubernetes.slack.com/messages/kubernetes-users) - Replace `kubernetes-users` with your slack channel string, this will send users directly to your channel. \n- [Mailing list](URL)\n\n-->\n```\n\n----------------------------------------\n\nTITLE: Defining Protocol Buffer ServiceOptions\nDESCRIPTION: Defines options for protocol buffer service definitions, including deprecation markers and extensibility points.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/moby/swarmkit/v2/api/api.pb.txt#2025-04-10_snippet_14\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage_type {\n    name: \"ServiceOptions\"\n    field {\n      name: \"deprecated\"\n      number: 33\n      label: LABEL_OPTIONAL\n      type: TYPE_BOOL\n      default_value: \"false\"\n      json_name: \"deprecated\"\n    }\n    field {\n      name: \"uninterpreted_option\"\n      number: 999\n      label: LABEL_REPEATED\n      type: TYPE_MESSAGE\n      type_name: \".google.protobuf.UninterpretedOption\"\n      json_name: \"uninterpretedOption\"\n    }\n    extension_range {\n      start: 1000\n      end: 536870912\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Checking Git Version on Linux/macOS\nDESCRIPTION: Command to verify git installation and check its version on the system.\nSOURCE: https://github.com/moby/moby/blob/master/docs/contributing/software-required.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ git --version\n```\n\n----------------------------------------\n\nTITLE: Installing bbolt CLI to GOBIN\nDESCRIPTION: Command to install the bbolt command line utility to the Go binary directory.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/go.etcd.io/bbolt/README.md#2025-04-10_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n$ go install go.etcd.io/bbolt/cmd/bbolt@latest\n```\n\n----------------------------------------\n\nTITLE: Renaming Observer Instrument in Go SDK\nDESCRIPTION: Renames the 'Observer' instrument to 'ValueObserver' in the OpenTelemetry Go SDK metric API.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-10_snippet_41\n\nLANGUAGE: Go\nCODE:\n```\n// Old\nObserver\n\n// New\nValueObserver\n```\n\n----------------------------------------\n\nTITLE: IPTables Filter4 Setup Commands\nDESCRIPTION: Shows the actual iptables commands used to set up the filter table rules for IPv4 network filtering.\nSOURCE: https://github.com/moby/moby/blob/master/integration/network/bridge/iptablesdoc/templates/new-daemon.md#2025-04-10_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n{{index . \"SFilter4\"}}\n```\n\n----------------------------------------\n\nTITLE: Iptables Filter Table Configuration\nDESCRIPTION: The complete filter table configuration showing all chains and rules created for Docker networking, including specific rules for container port exposure and network isolation between bridges.\nSOURCE: https://github.com/moby/moby/blob/master/integration/network/bridge/iptablesdoc/generated/usernet-portmap.md#2025-04-10_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nChain INPUT (policy ACCEPT 0 packets, 0 bytes)\nnum   pkts bytes target     prot opt in     out     source               destination         \n\nChain FORWARD (policy ACCEPT 0 packets, 0 bytes)\nnum   pkts bytes target     prot opt in     out     source               destination         \n1        0     0 DOCKER-USER  0    --  *      *       0.0.0.0/0            0.0.0.0/0           \n2        0     0 DOCKER-FORWARD  0    --  *      *       0.0.0.0/0            0.0.0.0/0           \n\nChain OUTPUT (policy ACCEPT 0 packets, 0 bytes)\nnum   pkts bytes target     prot opt in     out     source               destination         \n\nChain DOCKER (2 references)\nnum   pkts bytes target     prot opt in     out     source               destination         \n1        0     0 ACCEPT     6    --  !bridge1 bridge1  0.0.0.0/0            192.0.2.2            tcp dpt:80\n2        0     0 DROP       0    --  !docker0 docker0  0.0.0.0/0            0.0.0.0/0           \n3        0     0 DROP       0    --  !bridge1 bridge1  0.0.0.0/0            0.0.0.0/0           \n\nChain DOCKER-BRIDGE (1 references)\nnum   pkts bytes target     prot opt in     out     source               destination         \n1        0     0 DOCKER     0    --  *      docker0  0.0.0.0/0            0.0.0.0/0           \n2        0     0 DOCKER     0    --  *      bridge1  0.0.0.0/0            0.0.0.0/0           \n\nChain DOCKER-CT (1 references)\nnum   pkts bytes target     prot opt in     out     source               destination         \n1        0     0 ACCEPT     0    --  *      docker0  0.0.0.0/0            0.0.0.0/0            ctstate RELATED,ESTABLISHED\n2        0     0 ACCEPT     0    --  *      bridge1  0.0.0.0/0            0.0.0.0/0            ctstate RELATED,ESTABLISHED\n\nChain DOCKER-FORWARD (1 references)\nnum   pkts bytes target     prot opt in     out     source               destination         \n1        0     0 DOCKER-CT  0    --  *      *       0.0.0.0/0            0.0.0.0/0           \n2        0     0 DOCKER-ISOLATION-STAGE-1  0    --  *      *       0.0.0.0/0            0.0.0.0/0           \n3        0     0 DOCKER-BRIDGE  0    --  *      *       0.0.0.0/0            0.0.0.0/0           \n4        0     0 ACCEPT     0    --  docker0 *       0.0.0.0/0            0.0.0.0/0           \n5        0     0 ACCEPT     0    --  bridge1 *       0.0.0.0/0            0.0.0.0/0           \n\nChain DOCKER-ISOLATION-STAGE-1 (1 references)\nnum   pkts bytes target     prot opt in     out     source               destination         \n1        0     0 DOCKER-ISOLATION-STAGE-2  0    --  docker0 !docker0  0.0.0.0/0            0.0.0.0/0           \n2        0     0 DOCKER-ISOLATION-STAGE-2  0    --  bridge1 !bridge1  0.0.0.0/0            0.0.0.0/0           \n\nChain DOCKER-ISOLATION-STAGE-2 (2 references)\nnum   pkts bytes target     prot opt in     out     source               destination         \n1        0     0 DROP       0    --  *      bridge1  0.0.0.0/0            0.0.0.0/0           \n2        0     0 DROP       0    --  *      docker0  0.0.0.0/0            0.0.0.0/0           \n\nChain DOCKER-USER (1 references)\nnum   pkts bytes target     prot opt in     out     source               destination         \n1        0     0 RETURN     0    --  *      *       0.0.0.0/0            0.0.0.0/0           \n```\n\n----------------------------------------\n\nTITLE: Adding User to Docker Group on Linux\nDESCRIPTION: Command to add the current user to the docker group on Linux systems, requiring logout/login to take effect.\nSOURCE: https://github.com/moby/moby/blob/master/docs/contributing/software-required.md#2025-04-10_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo usermod -aG docker ubuntu\n```\n\n----------------------------------------\n\nTITLE: Gateway Allocation Check Response in Remote Driver Protocol\nDESCRIPTION: The remote driver responds to the gateway allocation check request, indicating whether to skip IPv4 or IPv6 gateway allocation.\nSOURCE: https://github.com/moby/moby/blob/master/libnetwork/docs/remote.md#2025-04-10_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n\t\t\"SkipIPv4\": false,\n\t\t\"SkipIPv6\": false\n    }\n```\n\n----------------------------------------\n\nTITLE: Defining NodeTLSInfo Message in Protocol Buffers\nDESCRIPTION: This message type defines TLS (Transport Layer Security) information for a node, including the trust root certificate, certificate issuer subject, and certificate issuer public key, all stored as byte arrays.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/moby/swarmkit/v2/api/api.pb.txt#2025-04-10_snippet_24\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage_type {\n  name: \"NodeTLSInfo\"\n  field {\n    name: \"trust_root\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_BYTES\n    json_name: \"trustRoot\"\n  }\n  field {\n    name: \"cert_issuer_subject\"\n    number: 2\n    label: LABEL_OPTIONAL\n    type: TYPE_BYTES\n    json_name: \"certIssuerSubject\"\n  }\n  field {\n    name: \"cert_issuer_public_key\"\n    number: 3\n    label: LABEL_OPTIONAL\n    type: TYPE_BYTES\n    json_name: \"certIssuerPublicKey\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding String Methods to Value and KeyValue\nDESCRIPTION: Adds String method to Value and KeyValue types in the log package.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-10_snippet_11\n\nLANGUAGE: Go\nCODE:\n```\nString method to Value and KeyValue in go.opentelemetry.io/otel/log\n```\n\n----------------------------------------\n\nTITLE: Registering for OOM Events (v1)\nDESCRIPTION: Sets up event notification for Out-Of-Memory (OOM) events in a cgroup, showing two equivalent methods to achieve the same result.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/containerd/cgroups/v3/README.md#2025-04-10_snippet_13\n\nLANGUAGE: go\nCODE:\n```\nefd, err := control.OOMEventFD()\n// or by using RegisterMemoryEvent\nevent := cgroup1.OOMEvent()\nefd, err := control.RegisterMemoryEvent(event)\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Local Go Documentation Server\nDESCRIPTION: Commands to install and run a local documentation server using pkgsite. This helps contributors preview how their documentation will look on pkg.go.dev.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#2025-04-10_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ngo install golang.org/x/pkgsite/cmd/pkgsite@latest\npkgsite\n```\n\n----------------------------------------\n\nTITLE: Initializing Root Logger in Go Main Function\nDESCRIPTION: Example showing how to initialize the root logger in a Go application's main function using a hypothetical 'logimpl' implementation.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/go-logr/logr/README.md#2025-04-10_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n    func main() {\n        // ... other setup code ...\n\n        // Create the \"root\" logger.  We have chosen the \"logimpl\" implementation,\n        // which takes some initial parameters and returns a logr.Logger.\n        logger := logimpl.New(param1, param2)\n\n        // ... other setup code ...\n```\n\n----------------------------------------\n\nTITLE: HTML Comment Block for Custom Guidelines\nDESCRIPTION: HTML comment block providing guidance for repository-specific contribution guidelines placement\nSOURCE: https://github.com/moby/moby/blob/master/vendor/sigs.k8s.io/yaml/CONTRIBUTING.md#2025-04-10_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!---\nIf your repo has certain guidelines for contribution, put them here ahead of the general k8s resources\n-->\n```\n\n----------------------------------------\n\nTITLE: Installing Hashstructure Library with Go Get\nDESCRIPTION: Command to install the hashstructure library using Go's package management system. It specifically recommends using v2 of the library to address collision issues from v1.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/mitchellh/hashstructure/v2/README.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ go get github.com/mitchellh/hashstructure/v2\n```\n\n----------------------------------------\n\nTITLE: Markdown Repository Link\nDESCRIPTION: Simple markdown document containing a header and link to the new location of the Docker image specification.\nSOURCE: https://github.com/moby/moby/blob/master/image/spec/spec.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Docker Image Specification v1.3.0\n\nThis specification moved to a separate repository:\nhttps://github.com/moby/docker-image-spec\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variable to Disable Default Deadlines in Go SDK\nDESCRIPTION: Shows how to opt-out of the default deadline behavior in Google Cloud API Go clients by setting the environment variable GOOGLE_API_GO_EXPERIMENTAL_DISABLE_DEFAULT_DEADLINE to true before client initialization.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/cloud.google.com/go/CHANGES.md#2025-04-10_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\nTo opt-out of this behavior, set the environment variable\n`GOOGLE_API_GO_EXPERIMENTAL_DISABLE_DEFAULT_DEADLINE` to `true` prior to\ninitializing a client. This opt-out mechanism will be removed in a later\nrelease, with a notice similar to this one ahead of its removal.\n```\n\n----------------------------------------\n\nTITLE: Defining Method Descriptor in Protocol Buffers\nDESCRIPTION: This snippet defines the structure of a method descriptor in Protocol Buffers. It includes fields for name, input and output types, options, and streaming configurations.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/moby/swarmkit/v2/api/api.pb.txt#2025-04-10_snippet_8\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage_type {\n  name: \"MethodDescriptorProto\"\n  field {\n    name: \"name\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"name\"\n  }\n  field {\n    name: \"input_type\"\n    number: 2\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"inputType\"\n  }\n  field {\n    name: \"output_type\"\n    number: 3\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"outputType\"\n  }\n  field {\n    name: \"options\"\n    number: 4\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".google.protobuf.MethodOptions\"\n    json_name: \"options\"\n  }\n  field {\n    name: \"client_streaming\"\n    number: 5\n    label: LABEL_OPTIONAL\n    type: TYPE_BOOL\n    default_value: \"false\"\n    json_name: \"clientStreaming\"\n  }\n  field {\n    name: \"server_streaming\"\n    number: 6\n    label: LABEL_OPTIONAL\n    type: TYPE_BOOL\n    default_value: \"false\"\n    json_name: \"serverStreaming\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running the Docker Daemon with Options\nDESCRIPTION: This snippet demonstrates the basic syntax for running the Docker daemon (dockerd) with command-line options. It shows that options should be specified after the 'dockerd' keyword.\nSOURCE: https://github.com/moby/moby/blob/master/man/dockerd.8.md#2025-04-10_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndockerd [OPTIONS]\n```\n\n----------------------------------------\n\nTITLE: Configuring Logrus Environment-Specific Formatters in Go\nDESCRIPTION: This snippet demonstrates how to configure Logrus formatters based on the environment. It uses a global Environment variable to determine whether to use JSON or Text formatter.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/sirupsen/logrus/README.md#2025-04-10_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nimport (\n  log \"github.com/sirupsen/logrus\"\n)\n\nfunc init() {\n  // do something here to set environment depending on an environment variable\n  // or command-line flag\n  if Environment == \"production\" {\n    log.SetFormatter(&log.JSONFormatter{})\n  } else {\n    // The TextFormatter is default, you don't actually have to do this.\n    log.SetFormatter(&log.TextFormatter{})\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Building Moby Binary on Windows\nDESCRIPTION: These PowerShell commands set the Git commit and run the Moby build process in a Docker container.\nSOURCE: https://github.com/moby/moby/blob/master/docs/contributing/software-req-win.md#2025-04-10_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\n$DOCKER_GITCOMMIT=(git rev-parse --short HEAD)\ndocker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT nativebuildimage hack\\make.ps1 -Binary\ndocker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT -m 2GB nativebuildimage hack\\make.ps1 -Binary  # (if using Hyper-V containers)\n```\n\n----------------------------------------\n\nTITLE: Defining Duration Message in Protocol Buffers\nDESCRIPTION: Defines the Duration message type with seconds and nanos fields. Includes package options for various programming languages.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/moby/swarmkit/v2/api/api.pb.txt#2025-04-10_snippet_1\n\nLANGUAGE: Protocol Buffers\nCODE:\n```\nfile {\n  name: \"google/protobuf/duration.proto\"\n  package: \"google.protobuf\"\n  message_type {\n    name: \"Duration\"\n    field {\n      name: \"seconds\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_INT64\n      json_name: \"seconds\"\n    }\n    field {\n      name: \"nanos\"\n      number: 2\n      label: LABEL_OPTIONAL\n      type: TYPE_INT32\n      json_name: \"nanos\"\n    }\n  }\n  options {\n    java_package: \"com.google.protobuf\"\n    java_outer_classname: \"DurationProto\"\n    java_multiple_files: true\n    go_package: \"github.com/golang/protobuf/ptypes/duration\"\n    cc_enable_arenas: true\n    objc_class_prefix: \"GPB\"\n    csharp_namespace: \"Google.Protobuf.WellKnownTypes\"\n  }\n  syntax: \"proto3\"\n}\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Changes in OpenTelemetry Go SDK\nDESCRIPTION: The fix ensures proper parsing of special characters like '+', '/' in environment variables OTEL_RESOURCE_ATTRIBUTES, OTEL_EXPORTER_OTLP_HEADERS and related variables that were previously being rendered as whitespace.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-10_snippet_14\n\nLANGUAGE: environment\nCODE:\n```\nOTEL_RESOURCE_ATTRIBUTES\nOTEL_EXPORTER_OTLP_HEADERS\nOTEL_EXPORTER_OTLP_METRICS_HEADERS\nOTEL_EXPORTER_OTLP_TRACES_HEADERS\n```\n\n----------------------------------------\n\nTITLE: Defining NetworkAttachmentConfig Message in Protocol Buffers for Docker SwarmKit\nDESCRIPTION: This snippet defines a message 'NetworkAttachmentConfig' for Docker SwarmKit, including fields for target, aliases, addresses, and driver_attachment_opts. It also includes a nested message for DriverAttachmentOptsEntry.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/moby/swarmkit/v2/api/api.pb.txt#2025-04-10_snippet_41\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage_type {\n  name: \"NetworkAttachmentConfig\"\n  field {\n    name: \"target\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"target\"\n  }\n  field {\n    name: \"aliases\"\n    number: 2\n    label: LABEL_REPEATED\n    type: TYPE_STRING\n    json_name: \"aliases\"\n  }\n  field {\n    name: \"addresses\"\n    number: 3\n    label: LABEL_REPEATED\n    type: TYPE_STRING\n    json_name: \"addresses\"\n  }\n  field {\n    name: \"driver_attachment_opts\"\n    number: 4\n    label: LABEL_REPEATED\n    type: TYPE_MESSAGE\n    type_name: \".docker.swarmkit.v1.NetworkAttachmentConfig.DriverAttachmentOptsEntry\"\n    json_name: \"driverAttachmentOpts\"\n  }\n  nested_type {\n    name: \"DriverAttachmentOptsEntry\"\n    field {\n      name: \"key\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"key\"\n    }\n    field {\n      name: \"value\"\n      number: 2\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"value\"\n    }\n    options {\n      map_entry: true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Pushing Feature Branch to Fork\nDESCRIPTION: This snippet shows how to push the local feature branch to the forked repository on GitHub.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/mistifyio/go-zfs/v3/CONTRIBUTING.md#2025-04-10_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ git push origin <feature-branch-name>\n```\n\n----------------------------------------\n\nTITLE: Installing Registry from Source with Go Get\nDESCRIPTION: Uses the Go package manager to fetch and install the registry command from GitHub. This is the simplest way to get the latest version of the registry source.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/docker/distribution/BUILDING.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/docker/distribution/cmd/registry\n```\n\n----------------------------------------\n\nTITLE: Configuring Retry Sink in Go\nDESCRIPTION: Example showing how to create a retrying sink that implements backoff logic after consecutive failures. Uses a breaker strategy with 5 attempts and 1 second delay.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/docker/go-events/README.md#2025-04-10_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nhs := newHTTPSink(/*...*/)\nretry := NewRetryingSink(hs, NewBreaker(5, time.Second))\n```\n\n----------------------------------------\n\nTITLE: Installing Google Cloud Compute Metadata Library in Go\nDESCRIPTION: This command installs the Google Cloud Compute metadata library using the Go package manager. It fetches the latest version of the library from the specified repository.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/cloud.google.com/go/compute/metadata/README.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/compute/metadata\n```\n\n----------------------------------------\n\nTITLE: Displaying PkgGoDev Badge for OTLP Metric gRPC Exporter in Markdown\nDESCRIPTION: This snippet shows how to include a PkgGoDev badge in a Markdown file. The badge links to the package documentation for the OTLP Metric gRPC Exporter on pkg.go.dev.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/go.opentelemetry.io/otel/exporters/otlp/otlpmetric/otlpmetricgrpc/README.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![PkgGoDev](https://pkg.go.dev/badge/go.opentelemetry.io/otel/exporters/otlp/otlpmetric/otlpmetricgrpc)](https://pkg.go.dev/go.opentelemetry.io/otel/exporters/otlp/otlpmetric/otlpmetricgrpc)\n```\n\n----------------------------------------\n\nTITLE: Creating and Navigating Repositories Directory\nDESCRIPTION: Commands to create and navigate to a repos directory for storing repositories\nSOURCE: https://github.com/moby/moby/blob/master/docs/contributing/set-up-git.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ mkdir repos\n$ cd repos\n```\n\n----------------------------------------\n\nTITLE: Finalize Cache POST Endpoint\nDESCRIPTION: POST endpoint for finalizing a cache record after all data chunks have been uploaded. Requires the total size of the uploaded data for verification.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/tonistiigi/go-actions-cache/api.md#2025-04-10_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nPOST /caches/[cacheID]\nContent-Type: application/json\n\n{\n  \"size\": total_size\n}\n```\n\n----------------------------------------\n\nTITLE: Signing Git Commits for Moby Project Contributions\nDESCRIPTION: This code snippet demonstrates the format for signing off on git commits when contributing to the Moby project. It includes the Developer Certificate of Origin and instructions for adding the sign-off line.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/opencontainers/cgroups/CONTRIBUTING.md#2025-04-10_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nDeveloper Certificate of Origin\nVersion 1.1\n\nCopyright (C) 2004, 2006 The Linux Foundation and its contributors.\n1 Letterman Drive\nSuite D4700\nSan Francisco, CA, 94129\n\nEveryone is permitted to copy and distribute verbatim copies of this\nlicense document, but changing it is not allowed.\n\n\nDeveloper's Certificate of Origin 1.1\n\nBy making a contribution to this project, I certify that:\n\n(a) The contribution was created in whole or in part by me and I\n    have the right to submit it under the open source license\n    indicated in the file; or\n\n(b) The contribution is based upon previous work that, to the best\n    of my knowledge, is covered under an appropriate open source\n    license and I have the right under that license to submit that\n    work with modifications, whether created in whole or in part\n    by me, under the same open source license (unless I am\n    permitted to submit under a different license), as indicated\n    in the file; or\n\n(c) The contribution was provided directly to me by some other\n    person who certified (a), (b) or (c) and I have not modified\n    it.\n\n(d) I understand and agree that this project and the contribution\n    are public and that a record of the contribution (including all\n    personal information I submit with it, including my sign-off) is\n    maintained indefinitely and may be redistributed consistent with\n    this project or the open source license(s) involved.\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nSigned-off-by: Joe Smith <joe@gmail.com>\n```\n\n----------------------------------------\n\nTITLE: Running Specific Integration Test in Moby\nDESCRIPTION: This command demonstrates how to run a specific integration test (TestDockerCLIBuildSuite) in the Moby project using the TESTFLAGS environment variable.\nSOURCE: https://github.com/moby/moby/blob/master/docs/contributing/test.md#2025-04-10_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ TESTFLAGS='-test.run TestDockerCLIBuildSuite' make test-integration\n```\n\n----------------------------------------\n\nTITLE: Installing Gorilla Mux in Go\nDESCRIPTION: Command to install the Gorilla Mux package using Go's package management system.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/gorilla/mux/README.md#2025-04-10_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngo get -u github.com/gorilla/mux\n```\n\n----------------------------------------\n\nTITLE: Defining Protobuf Extensions for Go Code Generation\nDESCRIPTION: This snippet defines multiple protobuf extensions for customizing Go code generation. It includes options for enum prefixes, getters, marshalers, and various other features. These extensions are applied to EnumOptions, EnumValueOptions, FileOptions, and MessageOptions.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/moby/swarmkit/v2/api/api.pb.txt#2025-04-10_snippet_21\n\nLANGUAGE: protobuf\nCODE:\n```\ndependency: \"google/protobuf/descriptor.proto\"\nextension {\n  name: \"goproto_enum_prefix\"\n  extendee: \".google.protobuf.EnumOptions\"\n  number: 62001\n  label: LABEL_OPTIONAL\n  type: TYPE_BOOL\n  json_name: \"goprotoEnumPrefix\"\n}\nextension {\n  name: \"goproto_enum_stringer\"\n  extendee: \".google.protobuf.EnumOptions\"\n  number: 62021\n  label: LABEL_OPTIONAL\n  type: TYPE_BOOL\n  json_name: \"goprotoEnumStringer\"\n}\n// ... (additional extensions omitted for brevity)\nextension {\n  name: \"sizer\"\n  extendee: \".google.protobuf.MessageOptions\"\n  number: 64019\n  label: LABEL_OPTIONAL\n  type: TYPE_BOOL\n  json_name: \"sizer\"\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning OpenCensus Go Repository\nDESCRIPTION: This command clones the OpenCensus Go repository to the user's GOPATH. It's the first step in setting up the development environment.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/go.opencensus.io/CONTRIBUTING.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ go get -d go.opencensus.io\n```\n\n----------------------------------------\n\nTITLE: Registering Logrus Fatal Handlers in Go\nDESCRIPTION: This snippet shows how to register a fatal handler with Logrus. The handler function will be called when any fatal level message is logged, allowing for graceful shutdown before the program exits.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/sirupsen/logrus/README.md#2025-04-10_snippet_13\n\nLANGUAGE: go\nCODE:\n```\nhandler := func() {\n  // gracefully shutdown something...\n}\nlogrus.RegisterExitHandler(handler)\n```\n\n----------------------------------------\n\nTITLE: Handling String Resources in Functions Metadata JSON Unmarshaller\nDESCRIPTION: Update to the functions/metadata package to properly handle string resources in the JSON unmarshaller, ensuring correct parsing of function metadata.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/cloud.google.com/go/CHANGES.md#2025-04-10_snippet_11\n\nLANGUAGE: markdown\nCODE:\n```\n- functions/metadata:\n  - Handle string resources in JSON unmarshaller.\n```\n\n----------------------------------------\n\nTITLE: Creating Docker Internal Networks with and without ICC\nDESCRIPTION: These commands create two internal Docker networks: one with inter-container communication (ICC) enabled and another with ICC disabled. They also run containers on these networks.\nSOURCE: https://github.com/moby/moby/blob/master/integration/network/bridge/iptablesdoc/templates/usernet-internal.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker network create \\\n  -o com.docker.network.bridge.name=bridgeICC \\\n  --internal \\\n  --subnet 192.0.2.0/24 --gateway 192.0.2.1 bridge1\ndocker run --network bridgeICC --name c1 busybox\n\ndocker network create \\\n  -o com.docker.network.bridge.name=bridgeNoICC \\\n  -o com.docker.network.bridge.enable_icc=true \\\n  --internal \\\n  --subnet 198.51.100.0/24 --gateway 198.51.100.1 bridge1\ndocker run --network bridgeNoICC --name c1 busybox\n```\n\n----------------------------------------\n\nTITLE: Demonstrating manual sign-off format for go-struct-converter commits\nDESCRIPTION: This snippet shows the format for manually adding a sign-off line to a commit message, which includes the contributor's name and email address.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/anchore/go-struct-converter/CONTRIBUTING.md#2025-04-10_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nSigned-off-by: John Doe <john.doe@example.com>\n```\n\n----------------------------------------\n\nTITLE: Importing Cobra in Go Application\nDESCRIPTION: Go import statement to include the Cobra library in a Go application.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/spf13/cobra/README.md#2025-04-10_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/spf13/cobra\"\n```\n\n----------------------------------------\n\nTITLE: Set Intersection Operation in Go\nDESCRIPTION: Demonstrates using the Intersect method to find common elements between two sets. The example finds science classes that are also required classes.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/deckarep/golang-set/v2/README.md#2025-04-10_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nreqScience := sciences.Intersect(required)\n```\n\n----------------------------------------\n\nTITLE: Installing azcore Module for Go SDK\nDESCRIPTION: This command adds the latest version of the azcore module to your go.mod file. It's typically not needed to be run explicitly as azcore is usually installed as a dependency of other client modules.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/Azure/azure-sdk-for-go/sdk/azcore/README.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/azcore\n```\n\n----------------------------------------\n\nTITLE: Creating BigQuery Dataset with Metadata\nDESCRIPTION: This code demonstrates the updated method for creating a BigQuery dataset, which now requires DatasetMetadata as the second argument. It also highlights the renaming of the ID field to FullID in DatasetMetadata.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/cloud.google.com/go/CHANGES.md#2025-04-10_snippet_19\n\nLANGUAGE: go\nCODE:\n```\nDataset.Create(ctx, DatasetMetadata{})\n```\n\n----------------------------------------\n\nTITLE: Table-Driven Testing for Routes with Variables\nDESCRIPTION: Demonstrates how to test routes with path variables using table-driven tests. The test creates a new router for each test case to properly evaluate the path variables against the handler.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/gorilla/mux/README.md#2025-04-10_snippet_22\n\nLANGUAGE: go\nCODE:\n```\n// endpoints_test.go\nfunc TestMetricsHandler(t *testing.T) {\n    tt := []struct{\n        routeVariable string\n        shouldPass bool\n    }{\n        {\"goroutines\", true},\n        {\"heap\", true},\n        {\"counters\", true},\n        {\"queries\", true},\n        {\"adhadaeqm3k\", false},\n    }\n\n    for _, tc := range tt {\n        path := fmt.Sprintf(\"/metrics/%s\", tc.routeVariable)\n        req, err := http.NewRequest(\"GET\", path, nil)\n        if err != nil {\n            t.Fatal(err)\n        }\n\n        rr := httptest.NewRecorder()\n\t\n\t// To add the vars to the context, \n\t// we need to create a router through which we can pass the request.\n\trouter := mux.NewRouter()\n        router.HandleFunc(\"/metrics/{type}\", MetricsHandler)\n        router.ServeHTTP(rr, req)\n\n        // In this case, our MetricsHandler returns a non-200 response\n        // for a route variable it doesn't know about.\n        if rr.Code == http.StatusOK && !tc.shouldPass {\n            t.Errorf(\"handler should have failed on routeVariable %s: got %v want %v\",\n                tc.routeVariable, rr.Code, http.StatusOK)\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Android Integration with BoltDB\nDESCRIPTION: Shows how to initialize BoltDB in an Android application, including proper file path handling and cloud backup prevention.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/go.etcd.io/bbolt/README.md#2025-04-10_snippet_22\n\nLANGUAGE: java\nCODE:\n```\nString path;\nif (android.os.Build.VERSION.SDK_INT >=android.os.Build.VERSION_CODES.LOLLIPOP){\n    path = getNoBackupFilesDir().getAbsolutePath();\n} else{\n    path = getFilesDir().getAbsolutePath();\n}\nBoltmobiledemo.BoltDB boltDB = Boltmobiledemo.NewBoltDB(path)\n```\n\n----------------------------------------\n\nTITLE: Installing the Compress Package with Go Get\nDESCRIPTION: Command to add the compress package to a Go project using go get. The command fetches the latest version of the package.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/klauspost/compress/README.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/klauspost/compress@latest\n```\n\n----------------------------------------\n\nTITLE: IPAM Driver GetCapabilities Response Format\nDESCRIPTION: JSON response structure for the /IpamDriver.GetCapabilities endpoint. The response includes boolean flags indicating whether the driver requires MAC addresses and request replay functionality.\nSOURCE: https://github.com/moby/moby/blob/master/libnetwork/docs/ipam.md#2025-04-10_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"RequiresMACAddress\": bool,\n\t\"RequiresRequestReplay\": bool\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Version Header in Markdown\nDESCRIPTION: Example of a version header format used in the changelog showing version numbers and release date.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## [1.31.0/0.53.0/0.7.0/0.0.10] 2024-10-11\n```\n\n----------------------------------------\n\nTITLE: Defining Field Descriptor in Protocol Buffers\nDESCRIPTION: This snippet defines the structure of a field descriptor in Protocol Buffers. It includes fields for name, number, label, type, and various options. It also defines enums for field types and labels.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/moby/swarmkit/v2/api/api.pb.txt#2025-04-10_snippet_4\n\nLANGUAGE: protobuf\nCODE:\n```\nfield {\n  name: \"json_name\"\n  number: 10\n  label: LABEL_OPTIONAL\n  type: TYPE_STRING\n  json_name: \"jsonName\"\n}\nfield {\n  name: \"options\"\n  number: 8\n  label: LABEL_OPTIONAL\n  type: TYPE_MESSAGE\n  type_name: \".google.protobuf.FieldOptions\"\n  json_name: \"options\"\n}\nenum_type {\n  name: \"Type\"\n  value {\n    name: \"TYPE_DOUBLE\"\n    number: 1\n  }\n  value {\n    name: \"TYPE_FLOAT\"\n    number: 2\n  }\n  // ... (other enum values)\n}\nenum_type {\n  name: \"Label\"\n  value {\n    name: \"LABEL_OPTIONAL\"\n    number: 1\n  }\n  value {\n    name: \"LABEL_REQUIRED\"\n    number: 2\n  }\n  value {\n    name: \"LABEL_REPEATED\"\n    number: 3\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Locking in Logger (Markdown)\nDESCRIPTION: Demonstrates how to disable the default mutex locking in Logger when it's not needed for thread safety.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/sirupsen/logrus/README.md#2025-04-10_snippet_14\n\nLANGUAGE: markdown\nCODE:\n```\nIf you are sure such locking is not needed, you can call logger.SetNoLock() to disable the locking.\n```\n\n----------------------------------------\n\nTITLE: Applying Apache License 2.0 Boilerplate Notice\nDESCRIPTION: This snippet provides the boilerplate notice to be included when applying the Apache License 2.0 to a project. It includes placeholders for the copyright year and owner's name, as well as the full license text and conditions.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/aws/aws-sdk-go-v2/service/internal/presigned-url/LICENSE.txt#2025-04-10_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Defining IPAMConfig Message in Protocol Buffers for Docker SwarmKit\nDESCRIPTION: This snippet defines a message 'IPAMConfig' for Docker SwarmKit, including fields for family, subnet, range, gateway, and reserved. It includes an enum for AddressFamily and a nested message for ReservedEntry.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/moby/swarmkit/v2/api/api.pb.txt#2025-04-10_snippet_42\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage_type {\n  name: \"IPAMConfig\"\n  field {\n    name: \"family\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_ENUM\n    type_name: \".docker.swarmkit.v1.IPAMConfig.AddressFamily\"\n    json_name: \"family\"\n  }\n  field {\n    name: \"subnet\"\n    number: 2\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"subnet\"\n  }\n  field {\n    name: \"range\"\n    number: 3\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"range\"\n  }\n  field {\n    name: \"gateway\"\n    number: 4\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"gateway\"\n  }\n  field {\n    name: \"reserved\"\n    number: 5\n    label: LABEL_REPEATED\n    type: TYPE_MESSAGE\n    type_name: \".docker.swarmkit.v1.IPAMConfig.ReservedEntry\"\n    json_name: \"reserved\"\n  }\n  nested_type {\n    name: \"ReservedEntry\"\n    field {\n      name: \"key\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"key\"\n    }\n    field {\n      name: \"value\"\n      number: 2\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"value\"\n    }\n    options {\n      map_entry: true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Support for Disabling CPU Profile Collection in Go Profiler\nDESCRIPTION: Updates to the profiler package to support disabling CPU profile collection and adding logging when profile creation attempts begin, improving flexibility and visibility.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/cloud.google.com/go/CHANGES.md#2025-04-10_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n- profiler:\n  - Support disabling CPU profile collection.\n  - Log when a profile creation attempt begins.\n```\n\n----------------------------------------\n\nTITLE: Container Unpause Response\nDESCRIPTION: Example HTTP response for a successful container unpause operation, showing a 204 No Content status code.\nSOURCE: https://github.com/moby/moby/blob/master/docs/api/v1.24.md#2025-04-10_snippet_43\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 204 No Content\n```\n\n----------------------------------------\n\nTITLE: Custom Time Transformer in Go\nDESCRIPTION: Implementation of a custom transformer for handling time.Time struct merging with special zero-value detection logic.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/dario.cat/mergo/README.md#2025-04-10_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"dario.cat/mergo\"\n    \"reflect\"\n    \"time\"\n)\n\ntype timeTransformer struct {\n}\n\nfunc (t timeTransformer) Transformer(typ reflect.Type) func(dst, src reflect.Value) error {\n\tif typ == reflect.TypeOf(time.Time{}) {\n\t\treturn func(dst, src reflect.Value) error {\n\t\t\tif dst.CanSet() {\n\t\t\t\tisZero := dst.MethodByName(\"IsZero\")\n\t\t\t\tresult := isZero.Call([]reflect.Value{})\n\t\t\t\tif result[0].Bool() {\n\t\t\t\t\tdst.Set(src)\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn nil\n\t\t}\n\t}\n\treturn nil\n}\n\ntype Snapshot struct {\n\tTime time.Time\n\t// ...\n}\n\nfunc main() {\n\tsrc := Snapshot{time.Now()}\n\tdest := Snapshot{}\n\tmergo.Merge(&dest, src, mergo.WithTransformers(timeTransformer{}))\n\tfmt.Println(dest)\n\t// Will print\n\t// { 2018-01-12 01:15:00 +0000 UTC m=+0.000000001 }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Mock TranslationClient in Go\nDESCRIPTION: This code demonstrates how to create a mock implementation of the TranslationClient interface for testing purposes. It includes a simple implementation of the TranslateText method that returns a fixed response.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/cloud.google.com/go/testing.md#2025-04-10_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nimport (\n        \"context\"\n        \"testing\"\n\n        \"github.com/googleapis/gax-go/v2\"\n        translatepb \"google.golang.org/genproto/googleapis/cloud/translate/v3\"\n)\n\ntype mockClient struct{}\n\nfunc (*mockClient) TranslateText(_ context.Context, req *translatepb.TranslateTextRequest, opts ...gax.CallOption) (*translatepb.TranslateTextResponse, error) {\n        resp := &translatepb.TranslateTextResponse{\n                Translations: []*translatepb.Translation{\n                        &translatepb.Translation{\n                                TranslatedText: \"Hello World\",\n                        },\n                },\n        }\n        return resp, nil\n}\n\nfunc TestTranslateTextWithAbstractClient(t *testing.T) {\n        client := &mockClient{}\n        text, err := TranslateTextWithInterfaceClient(client, \"Hola Mundo\", \"en-US\")\n        if err != nil {\n                t.Fatal(err)\n        }\n        if text != \"Hello World\" {\n                t.Fatalf(\"got %q, want Hello World\", text)\n        }\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting to Remote Syslog via UDP\nDESCRIPTION: Shows how to establish a connection to a remote syslog server using unencrypted UDP. This creates a writer for sending log messages to the specified UDP endpoint with the given priority and tag.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/RackSec/srslog/README.md#2025-04-10_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nw, err := syslog.Dial(\"udp\", \"192.168.0.50:514\", syslog.LOG_ERR, \"testtag\")\n```\n\n----------------------------------------\n\nTITLE: Converting Between Struct Versions Using the Chain\nDESCRIPTION: Demonstrates how to use the conversion chain to transform a V1 struct into a V3 struct. The chain handles intermediate conversions automatically.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/anchore/go-struct-converter/README.md#2025-04-10_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nv1 := // somehow get a populated v1 struct\nv3 := V3{}\nchain.Convert(v1, &v3)\n```\n\n----------------------------------------\n\nTITLE: Displaying PkgGoDev Badge for OpenTelemetry Attribute Package\nDESCRIPTION: Markdown code showing a PkgGoDev badge that links to the Go documentation for the OpenTelemetry attribute package. This badge provides a visual indicator and quick access to the official package documentation.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/go.opentelemetry.io/otel/attribute/README.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![PkgGoDev](https://pkg.go.dev/badge/go.opentelemetry.io/otel/attribute)](https://pkg.go.dev/go.opentelemetry.io/otel/attribute)\n```\n\n----------------------------------------\n\nTITLE: Displaying PkgGoDev Badge for OpenTelemetry Semantic Conventions in Markdown\nDESCRIPTION: Markdown code for displaying a PkgGoDev badge that links to the documentation for the OpenTelemetry semantic conventions package v1.26.0. The badge provides a visual indication of the package's availability on pkg.go.dev.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/go.opentelemetry.io/otel/semconv/v1.26.0/README.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![PkgGoDev](https://pkg.go.dev/badge/go.opentelemetry.io/otel/semconv/v1.26.0)](https://pkg.go.dev/go.opentelemetry.io/otel/semconv/v1.26.0)\n```\n\n----------------------------------------\n\nTITLE: Defining RequestPool Function Signature for IPAM Driver in Go\nDESCRIPTION: Function signature for requesting an address pool from the IPAM driver. It handles address space, pool allocation, and returns pool identifiers and network information.\nSOURCE: https://github.com/moby/moby/blob/master/libnetwork/docs/ipam.md#2025-04-10_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nRequestPool(addressSpace, pool, subPool string, options map[string]string, v6 bool) (string, *net.IPNet, map[string]string, error)\n```\n\n----------------------------------------\n\nTITLE: Defining Enum Descriptor in Protocol Buffers\nDESCRIPTION: This snippet defines the structure of an enum descriptor in Protocol Buffers. It includes fields for name, values, options, and reserved ranges.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/moby/swarmkit/v2/api/api.pb.txt#2025-04-10_snippet_6\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage_type {\n  name: \"EnumDescriptorProto\"\n  field {\n    name: \"name\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"name\"\n  }\n  field {\n    name: \"value\"\n    number: 2\n    label: LABEL_REPEATED\n    type: TYPE_MESSAGE\n    type_name: \".google.protobuf.EnumValueDescriptorProto\"\n    json_name: \"value\"\n  }\n  // ... (other fields)\n  nested_type {\n    name: \"EnumReservedRange\"\n    field {\n      name: \"start\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_INT32\n      json_name: \"start\"\n    }\n    field {\n      name: \"end\"\n      number: 2\n      label: LABEL_OPTIONAL\n      type: TYPE_INT32\n      json_name: \"end\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: FIFO Operations Interface - Go\nDESCRIPTION: Core interface definitions for FIFO operations including opening, reading, writing, and closing FIFOs. Includes support for context cancellation and various flags for controlling FIFO behavior.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/containerd/fifo/readme.md#2025-04-10_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// OpenFifo opens a fifo. Returns io.ReadWriteCloser.\n// Context can be used to cancel this function until open(2) has not returned.\n// Accepted flags:\n// - syscall.O_CREAT - create new fifo if one doesn't exist\n// - syscall.O_RDONLY - open fifo only from reader side\n// - syscall.O_WRONLY - open fifo only from writer side\n// - syscall.O_RDWR - open fifo from both sides, never block on syscall level\n// - syscall.O_NONBLOCK - return io.ReadWriteCloser even if other side of the\n//     fifo isn't open. read/write will be connected after the actual fifo is\n//     open or after fifo is closed.\nfunc OpenFifo(ctx context.Context, fn string, flag int, perm os.FileMode) (io.ReadWriteCloser, error)\n\n\n// Read from a fifo to a byte array.\nfunc (f *fifo) Read(b []byte) (int, error)\n\n\n// Write from byte array to a fifo.\nfunc (f *fifo) Write(b []byte) (int, error)\n\n\n// Close the fifo. Next reads/writes will error. This method can also be used\n// before open(2) has returned and fifo was never opened.\nfunc (f *fifo) Close() error\n```\n\n----------------------------------------\n\nTITLE: Thread-Safe File Writing with O_APPEND Flag (Markdown)\nDESCRIPTION: Explains a scenario where logger.Out can be thread-safe without additional locking, using the O_APPEND flag for file operations.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/sirupsen/logrus/README.md#2025-04-10_snippet_15\n\nLANGUAGE: markdown\nCODE:\n```\n2) logger.Out is an os.File handler opened with `O_APPEND` flag, and every write is smaller than 4k. (This allows multi-thread/multi-process writing)\n```\n\n----------------------------------------\n\nTITLE: Running Go tests with race detection\nDESCRIPTION: Command to run the go-toml test suite with race detection enabled.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/pelletier/go-toml/v2/CONTRIBUTING.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo test -race ./...\n```\n\n----------------------------------------\n\nTITLE: Creating New Reader Instances in Go\nDESCRIPTION: Functions for creating new Reader instances with different initialization options.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/philhofer/fwd/README.md#2025-04-10_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc NewReader(r io.Reader) *Reader\n\nfunc NewReaderSize(r io.Reader, n int) *Reader\n```\n\n----------------------------------------\n\nTITLE: Adding Empty Function for KeyValue\nDESCRIPTION: Adds Empty function to return a KeyValue for an empty value in logging.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-10_snippet_6\n\nLANGUAGE: Go\nCODE:\n```\nEmpty function in go.opentelemetry.io/otel/log to return a KeyValue for an empty value\n```\n\n----------------------------------------\n\nTITLE: Defining Oneof Descriptor in Protocol Buffers\nDESCRIPTION: This snippet defines the structure of a oneof descriptor in Protocol Buffers. It includes fields for name and options.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/moby/swarmkit/v2/api/api.pb.txt#2025-04-10_snippet_5\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage_type {\n  name: \"OneofDescriptorProto\"\n  field {\n    name: \"name\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"name\"\n  }\n  field {\n    name: \"options\"\n    number: 2\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".google.protobuf.OneofOptions\"\n    json_name: \"options\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Google Cloud Long-Running Operations Library in Go\nDESCRIPTION: Command to install the Google Cloud long-running operations helper library using Go's package manager. This library provides utilities for working with operations that may take extended time to complete.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/cloud.google.com/go/longrunning/README.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/longrunning\n```\n\n----------------------------------------\n\nTITLE: Building Linux Guest Agent in PowerShell\nDESCRIPTION: Commands to build the Linux guest agent by setting GOOS environment variable to Linux and building from the gcs command directory.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/Microsoft/hcsshim/README.md#2025-04-10_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nC:\\> $env:GOOS=\"linux\"\nC:\\> go build .\\cmd\\gcs\\\n```\n\n----------------------------------------\n\nTITLE: Importing srslog Package in Go\nDESCRIPTION: Shows how to switch from Go's standard syslog library to the srslog package. The import statement replaces the standard log/syslog package with the GitHub-hosted srslog package.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/RackSec/srslog/README.md#2025-04-10_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport(\n    //\"log/syslog\"\n    syslog \"github.com/RackSec/srslog\"\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Writer to Zap IO Package\nDESCRIPTION: Adds zapio.Writer to use a Zap logger as an io.Writer.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/go.uber.org/zap/CHANGELOG.md#2025-04-10_snippet_5\n\nLANGUAGE: Markdown\nCODE:\n```\n[#971][]: Add `zapio.Writer` to use a Zap logger as an `io.Writer`.\n```\n\n----------------------------------------\n\nTITLE: Verifying signed-off commit in go-struct-converter\nDESCRIPTION: This shell command and its output demonstrate how to check that a commit was properly signed off by examining the git log.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/anchore/go-struct-converter/CONTRIBUTING.md#2025-04-10_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ git log -1\ncommit 37ceh170e4hb283bb73d958f2036ee5k07e7fde7 (HEAD -> issue-35, origin/main, main)\nAuthor: John Doe <john.doe@example.com>\nDate:   Mon Aug 1 11:27:13 2020 -0400\n\n    this is a commit message\n\n    Signed-off-by: John Doe <john.doe@example.com>\n```\n\n----------------------------------------\n\nTITLE: Referencing Docker CLI Compilation in Dockerfile\nDESCRIPTION: This snippet shows the line in the Dockerfile where the Docker CLI is now compiled after being moved to a separate repository.\nSOURCE: https://github.com/moby/moby/blob/master/reports/2017-05-08.md#2025-04-10_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n[Dockerfile](https://github.com/moby/moby/blob/a762ceace4e8c1c7ce4fb582789af9d8074be3e1/Dockerfile#L248)\n```\n\n----------------------------------------\n\nTITLE: Defining File Options in Protocol Buffers\nDESCRIPTION: This snippet defines the structure of file options in Protocol Buffers. It includes various configuration options for different programming languages and runtime behaviors.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/moby/swarmkit/v2/api/api.pb.txt#2025-04-10_snippet_9\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage_type {\n  name: \"FileOptions\"\n  field {\n    name: \"java_package\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"javaPackage\"\n  }\n  field {\n    name: \"java_outer_classname\"\n    number: 8\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"javaOuterClassname\"\n  }\n  // ... (other fields)\n  enum_type {\n    name: \"OptimizeMode\"\n    value {\n      name: \"SPEED\"\n      number: 1\n    }\n    value {\n      name: \"CODE_SIZE\"\n      number: 2\n    }\n    value {\n      name: \"LITE_RUNTIME\"\n      number: 3\n    }\n  }\n  extension_range {\n    start: 1000\n    end: 536870912\n  }\n  reserved_range {\n    start: 38\n    end: 39\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Bidirectional Struct Conversions\nDESCRIPTION: Defines struct versions with both forward and backward migration capabilities. This implementation allows conversions in either direction between V1, V2, and V3 structs.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/anchore/go-struct-converter/README.md#2025-04-10_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n// --------- V1 struct definition below ---------\n\ntype V1 struct {\n  Name     string\n  OldField string\n}\n\nfunc (to *V1) ConvertFrom(from interface{}) error {\n  if from, ok := from.(V2); ok { // backward migration\n    to.OldField = from.NewField\n  }\n  return nil\n}\n\n// --------- V2 struct definition below ---------\n\ntype V2 struct {\n  Name     string\n  NewField string\n}\n\nfunc (to *V2) ConvertFrom(from interface{}) error {\n  if from, ok := from.(V1); ok { // forward migration\n    to.NewField = from.OldField\n  }\n  if from, ok := from.(V3); ok { // backward migration\n    to.NewField = from.FinalField[0]\n  }\n  return nil\n}\n\n// --------- V3 struct definition below ---------\n\ntype V3 struct {\n  Name       []string\n  FinalField []string\n}\n\nfunc (to *V3) ConvertFrom(from interface{}) error {\n  if from, ok := from.(V2); ok { // forward migration\n    to.FinalField = []string{from.NewField}\n  }\n  return nil\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Supported Versions in Markdown Table\nDESCRIPTION: This markdown table shows which versions of the project are currently supported for security updates. It uses checkmarks and X marks to indicate support status.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/pelletier/go-toml/v2/SECURITY.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Version    | Supported          |\n| ---------- | ------------------ |\n| Latest 2.x | :white_check_mark: |\n| All 1.x    | :x:                |\n| All 0.x    | :x:                |\n```\n\n----------------------------------------\n\nTITLE: Cloning Moby Fork Repository\nDESCRIPTION: Command to clone a forked Moby repository to local machine\nSOURCE: https://github.com/moby/moby/blob/master/docs/contributing/set-up-git.md#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone https://github.com/YOUR_ACCOUNT/moby.git moby-fork\n```\n\n----------------------------------------\n\nTITLE: Bug Fix - Optional X-Cloud-Trace-Context Fields\nDESCRIPTION: Fix to allow X-Cloud-Trace-Context fields to be optional in logging implementation.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/cloud.google.com/go/logging/CHANGES.md#2025-04-10_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### Bug Fixes\n\n* **logging:** allow X-Cloud-Trace-Context fields to be optional ([#3062](https://www.github.com/googleapis/google-cloud-go/issues/3062)) ([7ff03cf](https://www.github.com/googleapis/google-cloud-go/commit/7ff03cf9a544e753de5b034e18339ecf517d2193))\n```\n\n----------------------------------------\n\nTITLE: Updating BigQuery Table Access Pattern\nDESCRIPTION: Changes to the way tables are accessed in BigQuery, replacing Client.OpenTable with DatasetInProject method chain.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/cloud.google.com/go/CHANGES.md#2025-04-10_snippet_24\n\nLANGUAGE: go\nCODE:\n```\nclient.OpenTable(\"project\", \"dataset\", \"table\")\n```\n\nLANGUAGE: go\nCODE:\n```\nclient.DatasetInProject(\"project\", \"dataset\").Table(\"table\")\n```\n\n----------------------------------------\n\nTITLE: Running Go Tests Command\nDESCRIPTION: Command to run the test suite for the go-toml project using Go's built-in test tool\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/pelletier/go-toml/CONTRIBUTING.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo test ./...\n```\n\n----------------------------------------\n\nTITLE: Various Fuzzing API Examples\nDESCRIPTION: Demonstrates different API calls for fuzzing various data types including strings, integers, bytes, booleans, maps, and files\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/AdaLogics/go-fuzz-headers/README.md#2025-04-10_snippet_4\n\nLANGUAGE: go\nCODE:\n```\ncreatedString, err := f.GetString() // Gets a string\ncreatedInt, err := f.GetInt() // Gets an integer\ncreatedByte, err := f.GetByte() // Gets a byte\ncreatedBytes, err := f.GetBytes() // Gets a byte slice\ncreatedBool, err := f.GetBool() // Gets a boolean\nerr := f.FuzzMap(target_map) // Fills a map\ncreatedTarBytes, err := f.TarBytes() // Gets bytes of a valid tar archive\nerr := f.CreateFiles(inThisDir) // Fills inThisDir with files\ncreatedString, err := f.GetStringFrom(\"anyCharInThisString\", ofThisLength) // Gets a string that consists of chars from \"anyCharInThisString\" and has the exact length \"ofThisLength\"\n```\n\n----------------------------------------\n\nTITLE: Git Tag Command for YAML Project Release\nDESCRIPTION: Command used by project owners to create a signed git tag for a new release version, which includes the changelog information.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/sigs.k8s.io/yaml/RELEASE.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit tag -s $VERSION\n```\n\n----------------------------------------\n\nTITLE: Running Tests in Cobra Project\nDESCRIPTION: Commands for running tests in the Cobra project, showing both the go test command and make test options.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/spf13/cobra/CONTRIBUTING.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo test ./...\n```\n\nLANGUAGE: bash\nCODE:\n```\nmake test\n```\n\n----------------------------------------\n\nTITLE: Listing Docker Networks and Services\nDESCRIPTION: Commands to list Docker networks and services on the host, showing the default networks and empty service list.\nSOURCE: https://github.com/moby/moby/blob/master/libnetwork/docs/vagrant.md#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nvagrant@net-1:~$ docker network ls\n$ docker service ls\n```\n\n----------------------------------------\n\nTITLE: Defining ttrpc Data Flags in Markdown Table\nDESCRIPTION: Presents a table of ttrpc data flags, including their numeric values, names, and descriptions. These flags are used to indicate the state of the data stream and whether the message contains actual data.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/containerd/ttrpc/PROTOCOL.md#2025-04-10_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n| Flag | Name            | Description                       |\n|------|-----------------|-----------------------------------|\n| 0x01 | `remote closed` | No more data expected from remote |\n| 0x04 | `no data`       | This message does not have data   |\n```\n\n----------------------------------------\n\nTITLE: Query Cache GET Endpoint\nDESCRIPTION: GET endpoint for querying cache entries using key prefixes and version namespacing. Returns cache key, scope, and archive location for downloading the cached data.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/tonistiigi/go-actions-cache/api.md#2025-04-10_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET /cache?keys=<comma-separated-keys>&version=<namespace-value>\n```\n\n----------------------------------------\n\nTITLE: Setting Up Prometheus Exporter in OpenTelemetry Go\nDESCRIPTION: This example demonstrates how to create and configure a Prometheus exporter using the OpenTelemetry Go SDK, including custom options.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-10_snippet_23\n\nLANGUAGE: Go\nCODE:\n```\nimport (\n    \"go.opentelemetry.io/otel/exporters/prometheus\"\n    prom \"github.com/prometheus/client_golang/prometheus\"\n)\n\nexporter, err := prometheus.New(\n    prometheus.WithRegisterer(prom.NewRegistry()),\n    prometheus.WithoutUnits(),\n    prometheus.WithAggregationSelector(customAggregationSelector),\n)\nif err != nil {\n    // Handle error\n}\n```\n\n----------------------------------------\n\nTITLE: Independent Validator Usage in Go\nDESCRIPTION: Example showing how to create and use a Validator instance independently of token parsing. Demonstrates setting up validation with custom leeway options.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/golang-jwt/jwt/v5/MIGRATION_GUIDE.md#2025-04-10_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nvar v = jwt.NewValidator(jwt.WithLeeway(5*time.Second))\nv.Validate(myClaims)\n```\n\n----------------------------------------\n\nTITLE: Requesting Container with Size Information in Docker API\nDESCRIPTION: Makes an HTTP GET request to retrieve container information with additional size data. The size=1 query parameter requests disk usage information for the container.\nSOURCE: https://github.com/moby/moby/blob/master/docs/api/v1.24.md#2025-04-10_snippet_14\n\nLANGUAGE: HTTP\nCODE:\n```\nGET /v1.24/containers/4fa6e0f0c678/json?size=1 HTTP/1.1\n```\n\n----------------------------------------\n\nTITLE: Specifying codespell Package Version\nDESCRIPTION: Defines the exact version requirement for the codespell Python package used for spell checking. The package version is pinned to 2.3.0 for consistency.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/go.opentelemetry.io/otel/requirements.txt#2025-04-10_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ncodespell==2.3.0\n```\n\n----------------------------------------\n\nTITLE: OpenTelemetry Compatibility Test Matrix\nDESCRIPTION: Table showing the compatibility testing matrix across different operating systems, Go versions and architectures used in CI testing.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-10_snippet_40\n\nLANGUAGE: markdown\nCODE:\n```\n| OS      | Go Version | Architecture |\n| ------- | ---------- | ------------ |\n| Ubuntu  | 1.15       | amd64        |\n| Ubuntu  | 1.14       | amd64        |\n| Ubuntu  | 1.15       | 386          |\n| Ubuntu  | 1.14       | 386          |\n| MacOS   | 1.15       | amd64        |\n| MacOS   | 1.14       | amd64        |\n| Windows | 1.15       | amd64        |\n| Windows | 1.14       | amd64        |\n| Windows | 1.15       | 386          |\n| Windows | 1.14       | 386          |\n```\n\n----------------------------------------\n\nTITLE: Creating BigQuery Table with Standard SQL\nDESCRIPTION: This snippet illustrates how to create a BigQuery table using Standard SQL as the default query syntax. It shows the updated method signature for Table.Create, which now takes TableMetadata as the second argument.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/cloud.google.com/go/CHANGES.md#2025-04-10_snippet_18\n\nLANGUAGE: go\nCODE:\n```\nTable.Create(ctx, TableMetadata{})\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Overlay Network\nDESCRIPTION: Create a new overlay network named 'foobar' and list networks to verify its creation.\nSOURCE: https://github.com/moby/moby/blob/master/libnetwork/docs/vagrant.md#2025-04-10_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ docker network create -d overlay foobar\n$ docker network ls\n```\n\n----------------------------------------\n\nTITLE: Idempotent Batch Operation in bbolt\nDESCRIPTION: Go code showing a proper way to use DB.Batch() with idempotent operations and handling side effects in bbolt.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/go.etcd.io/bbolt/README.md#2025-04-10_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nvar id uint64\nerr := db.Batch(func(tx *bolt.Tx) error {\n\t// Find last key in bucket, decode as bigendian uint64, increment\n\t// by one, encode back to []byte, and add new key.\n\t...\n\tid = newValue\n\treturn nil\n})\nif err != nil {\n\treturn ...\n}\nfmt.Println(\"Allocated ID %d\", id)\n```\n\n----------------------------------------\n\nTITLE: Importing Mousetrap Package in Go\nDESCRIPTION: This snippet shows the import of the mousetrap package, which is used for creating Windows executables that can be double-clicked.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/modules.txt#2025-04-10_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\ngithub.com/inconshreveable/mousetrap\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Configuration Example\nDESCRIPTION: Example shell configuration for setting required test environment variables\nSOURCE: https://github.com/moby/moby/blob/master/vendor/cloud.google.com/go/CONTRIBUTING.md#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n#### START GO SDK Test Variables\n# Developers Console project's ID (e.g. bamboo-shift-455) for the general project.\nexport GCLOUD_TESTS_GOLANG_PROJECT_ID=your-project\n```\n\n----------------------------------------\n\nTITLE: Running Linter Across Modules\nDESCRIPTION: PowerShell script to run golangci-lint across different modules with multiple GOOS values.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/Microsoft/hcsshim/README.md#2025-04-10_snippet_7\n\nLANGUAGE: powershell\nCODE:\n```\n> foreach ( $goos in ('windows', 'linux') ) {\n    foreach ( $repo in ('.', 'test') ) {\n        pwsh -Command \"cd $repo && go env -w GOOS=$goos && golangci-lint.exe run --verbose\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Processes in a cgroup (v1)\nDESCRIPTION: Lists all processes in a cgroup, with an option to recursively include processes in child cgroups. This example uses the Devices subsystem.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/containerd/cgroups/v3/README.md#2025-04-10_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nprocesses, err := control.Processes(cgroup1.Devices, recursive)\n```\n\n----------------------------------------\n\nTITLE: Using CircBuf Package to Create and Write to a Circular Buffer in Go\nDESCRIPTION: This snippet demonstrates how to create a new circular buffer with a fixed size of 6 bytes and write a string to it. It then verifies that only the last 6 bytes are retained in the buffer.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/armon/circbuf/README.md#2025-04-10_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nbuf, _ := NewBuffer(6)\nbuf.Write([]byte(\"hello world\"))\n\nif string(buf.Bytes()) != \" world\" {\n    panic(\"should only have last 6 bytes!\")\n}\n```\n\n----------------------------------------\n\nTITLE: Using HttpSnoop to Capture HTTP Metrics in Go\nDESCRIPTION: Example showing how to wrap an HTTP handler with HttpSnoop to capture and log metrics for each request. The code demonstrates capturing response code, duration, and bytes written while maintaining handler functionality.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/felixge/httpsnoop/README.md#2025-04-10_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// myH is your app's http handler, perhaps a http.ServeMux or similar.\nvar myH http.Handler\n// wrappedH wraps myH in order to log every request.\nwrappedH := http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\tm := httpsnoop.CaptureMetrics(myH, w, r)\n\tlog.Printf(\n\t\t\"%s %s (code=%d dt=%s written=%d)\",\n\t\tr.Method,\n\t\tr.URL,\n\t\tm.Code,\n\t\tm.Duration,\n\t\tm.Written,\n\t)\n})\nhttp.ListenAndServe(\":8080\", wrappedH)\n```\n\n----------------------------------------\n\nTITLE: Defining Peer and WeightedPeer Messages in Protocol Buffers\nDESCRIPTION: Defines message types 'Peer' and 'WeightedPeer' for representing network peers in Docker SwarmKit. The WeightedPeer includes a weight field, possibly for load balancing or routing purposes.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/moby/swarmkit/v2/api/api.pb.txt#2025-04-10_snippet_47\n\nLANGUAGE: Protocol Buffers\nCODE:\n```\nmessage_type {\n  name: \"Peer\"\n  field {\n    name: \"node_id\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"nodeId\"\n  }\n  field {\n    name: \"addr\"\n    number: 2\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"addr\"\n  }\n}\n\nmessage_type {\n  name: \"WeightedPeer\"\n  field {\n    name: \"peer\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".docker.swarmkit.v1.Peer\"\n    json_name: \"peer\"\n  }\n  field {\n    name: \"weight\"\n    number: 2\n    label: LABEL_OPTIONAL\n    type: TYPE_INT64\n    json_name: \"weight\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying PkgGoDev Badge for OpenTelemetry Semantic Conventions in Markdown\nDESCRIPTION: This code snippet shows how to embed a PkgGoDev badge in a Markdown file. The badge links to the documentation for the OpenTelemetry Semantic Conventions package version 1.20.0 on pkg.go.dev.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/go.opentelemetry.io/otel/semconv/v1.20.0/README.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![PkgGoDev](https://pkg.go.dev/badge/go.opentelemetry.io/otel/semconv/v1.20.0)](https://pkg.go.dev/go.opentelemetry.io/otel/semconv/v1.20.0)\n```\n\n----------------------------------------\n\nTITLE: Markdown Release Notes\nDESCRIPTION: Release notes for Google Cloud Go logging client, formatted in Markdown with version numbers, feature additions, bug fixes and dependency updates.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/cloud.google.com/go/logging/CHANGES.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Changes\n\n## [1.9.0](https://github.com/googleapis/google-cloud-go/compare/logging/v1.8.1...logging/v1.9.0) (2023-12-12)\n\n### Features\n\n* **logging:** Add Cloud Run job monitored resource\n* **logging:** Automatic project detection in logging.NewClient()\n\n### Bug Fixes\n\n* **logging:** Added marshalling methods for proto fields in structuredLogEntry\n* **logging:** Bump google.golang.org/api to v0.149.0\n* **logging:** Update golang.org/x/net to v0.17.0\n```\n\n----------------------------------------\n\nTITLE: Type Assertion for Multierror in Go\nDESCRIPTION: Demonstrates how to check and access the underlying errors list using type assertion when working with multierror values.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/hashicorp/go-multierror/README.md#2025-04-10_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nif err := something(); err != nil {\n\tif merr, ok := err.(*multierror.Error); ok {\n\t\t// Use merr.Errors\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Building Containerd Shim on Windows\nDESCRIPTION: PowerShell commands to build the Containerd shim for Windows by setting GOOS environment variable and building from the containerd-shim-runhcs-v1 directory.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/Microsoft/hcsshim/README.md#2025-04-10_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nC:\\> $env:GOOS=\"windows\"\nC:\\> go build .\\cmd\\containerd-shim-runhcs-v1\n```\n\n----------------------------------------\n\nTITLE: Defining Unreleased Changes Section in Markdown\nDESCRIPTION: This snippet creates a section for unreleased changes in the changelog using Markdown formatting.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/grpc-ecosystem/go-grpc-prometheus/CHANGELOG.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## [Unreleased]\n```\n\n----------------------------------------\n\nTITLE: Building Linux Guest Agent in Shell\nDESCRIPTION: Command to build the Linux guest agent on a Linux machine using go build command.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/Microsoft/hcsshim/README.md#2025-04-10_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n> go build ./cmd/gcs\n```\n\n----------------------------------------\n\nTITLE: Basic SecureJoin Implementation with chroot\nDESCRIPTION: A trivial implementation of SecureJoin using chroot on GNU/Linux systems. This example requires root privileges and uses the readlink command to resolve paths.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/cyphar/filepath-securejoin/README.md#2025-04-10_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage securejoin\n\nimport (\n\t\"os/exec\"\n\t\"path/filepath\"\n)\n\nfunc SecureJoin(root, unsafePath string) (string, error) {\n\tunsafePath = string(filepath.Separator) + unsafePath\n\tcmd := exec.Command(\"chroot\", root,\n\t\t\"readlink\", \"--canonicalize-missing\", \"--no-newline\", unsafePath)\n\toutput, err := cmd.CombinedOutput()\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\texpanded := string(output)\n\treturn filepath.Join(root, expanded), nil\n}\n```\n\n----------------------------------------\n\nTITLE: Translating Text with Concrete Client in Go\nDESCRIPTION: This function demonstrates how to use a concrete TranslationClient from the cloud.google.com/go/translate/apiv3 package to translate text. It takes a client, text to translate, and target language as input, and returns the translated text.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/cloud.google.com/go/testing.md#2025-04-10_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n        \"context\"\n        \"fmt\"\n        \"log\"\n        \"os\"\n\n        translate \"cloud.google.com/go/translate/apiv3\"\n        \"github.com/googleapis/gax-go/v2\"\n        translatepb \"google.golang.org/genproto/googleapis/cloud/translate/v3\"\n)\n\nfunc TranslateTextWithConcreteClient(client *translate.TranslationClient, text string, targetLang string) (string, error) {\n        ctx := context.Background()\n        log.Printf(\"Translating %q to %q\", text, targetLang)\n        req := &translatepb.TranslateTextRequest{\n                Parent:             fmt.Sprintf(\"projects/%s/locations/global\", os.Getenv(\"GOOGLE_CLOUD_PROJECT\")),\n                TargetLanguageCode: \"en-US\",\n                Contents:           []string{text},\n        }\n        resp, err := client.TranslateText(ctx, req)\n        if err != nil {\n                return \"\", fmt.Errorf(\"unable to translate text: %v\", err)\n        }\n        translations := resp.GetTranslations()\n        if len(translations) != 1 {\n                return \"\", fmt.Errorf(\"expected only one result, got %d\", len(translations))\n        }\n        return translations[0].TranslatedText, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Token Source Authorization\nDESCRIPTION: Creates a new client using a custom OAuth2 token source for authentication\nSOURCE: https://github.com/moby/moby/blob/master/vendor/cloud.google.com/go/README.md#2025-04-10_snippet_4\n\nLANGUAGE: go\nCODE:\n```\ntokenSource := ...\nclient, err := storage.NewClient(ctx, option.WithTokenSource(tokenSource))\n```\n\n----------------------------------------\n\nTITLE: Digest Type Methods in Go\nDESCRIPTION: Key methods of the Digest type implementing hash.Hash64 interface, allowing incremental hashing of bytes and strings.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/cespare/xxhash/v2/README.md#2025-04-10_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc (*Digest) Write([]byte) (int, error)\nfunc (*Digest) WriteString(string) (int, error)\nfunc (*Digest) Sum64() uint64\n```\n\n----------------------------------------\n\nTITLE: Container Size Response in Docker API\nDESCRIPTION: JSON response showing container information with size metrics included. SizeRw represents the size of files that have been created or changed, and SizeRootFs shows the total size of all files in the container.\nSOURCE: https://github.com/moby/moby/blob/master/docs/api/v1.24.md#2025-04-10_snippet_15\n\nLANGUAGE: JSON\nCODE:\n```\n{\n....\n\"SizeRw\": 0,\n\"SizeRootFs\": 972,\n....\n}\n```\n\n----------------------------------------\n\nTITLE: Running benchmark tests with ci.sh script\nDESCRIPTION: Command to verify performance impact of code changes using the project's CI script.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/pelletier/go-toml/v2/CONTRIBUTING.md#2025-04-10_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n./ci.sh benchmark -d v2\n```\n\n----------------------------------------\n\nTITLE: Reading /proc Filesystem in Go for Prometheus\nDESCRIPTION: This code snippet demonstrates how to read a file from the /proc filesystem in Go, using the util.ReadFileNoStat function to avoid issues with continuously changing files.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/prometheus/procfs/CONTRIBUTING.md#2025-04-10_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ndata, err := util.ReadFileNoStat(\"/proc/cpuinfo\")\nif err != nil {\n    return err\n}\nreader := bytes.NewReader(data)\nscanner := bufio.NewScanner(reader)\n```\n\n----------------------------------------\n\nTITLE: Importing In-Toto Golang Package in Go\nDESCRIPTION: This snippet shows the import of the in-toto-golang package and its subpackages. It includes the core in-toto package and SLSA provenance-related subpackages.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/modules.txt#2025-04-10_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\ngithub.com/in-toto/in-toto-golang/in_toto\ngithub.com/in-toto/in-toto-golang/in_toto/slsa_provenance/common\ngithub.com/in-toto/in-toto-golang/in_toto/slsa_provenance/v0.1\ngithub.com/in-toto/in-toto-golang/in_toto/slsa_provenance/v0.2\n```\n\n----------------------------------------\n\nTITLE: Running Container with Containerd\nDESCRIPTION: PowerShell command to run a Windows container using the Containerd runtime.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/Microsoft/hcsshim/README.md#2025-04-10_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\nC:\\> ctr.exe run --runtime io.containerd.runhcs.v1 --rm mcr.microsoft.com/windows/nanoserver:2004 windows-test cmd /c \"echo Hello World!\"\n```\n\n----------------------------------------\n\nTITLE: Generating Containerd Config\nDESCRIPTION: PowerShell command to generate and save a default Containerd configuration file.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/Microsoft/hcsshim/README.md#2025-04-10_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\n.\\containerd.exe config default | Out-File \"C:\\Program Files\\containerd\\config.toml\" -Encoding ascii\n```\n\n----------------------------------------\n\nTITLE: Example Go Code Range Reader Usage (Storage)\nDESCRIPTION: Example showing how to read the last N bytes of a file using negative range in Go Storage client.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/cloud.google.com/go/CHANGES.md#2025-04-10_snippet_12\n\nLANGUAGE: go\nCODE:\n```\nobj.NewRangeReader(ctx, -10, -1)\n```\n\n----------------------------------------\n\nTITLE: Fuzzing Nested Structs Example\nDESCRIPTION: Shows how to fuzz nested structs with multiple levels of structure\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/AdaLogics/go-fuzz-headers/README.md#2025-04-10_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ntype PersonI struct {\n    Name       string\n    Age        int\n    BestFriend PersonII\n}\ntype PersonII struct {\n    Name string\n    Age  int\n}\np := PersonI{}\nerr := f.GenerateStruct(&p)\n```\n\n----------------------------------------\n\nTITLE: Defining AcceptancePolicy Message in Protocol Buffers\nDESCRIPTION: Defines a message type 'AcceptancePolicy' with a field for policies. It includes a nested message 'RoleAdmissionPolicy' for defining admission policies based on node roles in Docker SwarmKit.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/moby/swarmkit/v2/api/api.pb.txt#2025-04-10_snippet_49\n\nLANGUAGE: Protocol Buffers\nCODE:\n```\nmessage_type {\n  name: \"AcceptancePolicy\"\n  field {\n    name: \"policies\"\n    number: 1\n    label: LABEL_REPEATED\n    type: TYPE_MESSAGE\n    type_name: \".docker.swarmkit.v1.AcceptancePolicy.RoleAdmissionPolicy\"\n    json_name: \"policies\"\n  }\n  nested_type {\n    name: \"RoleAdmissionPolicy\"\n    field {\n      name: \"role\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_ENUM\n      type_name: \".docker.swarmkit.v1.NodeRole\"\n      json_name: \"role\"\n    }\n    field {\n      name: \"autoaccept\"\n      number: 2\n      label: LABEL_OPTIONAL\n      type: TYPE_BOOL\n      json_name: \"autoaccept\"\n    }\n    field {\n      name: \"secret\"\n      number: 3\n      label: LABEL_OPTIONAL\n      type: TYPE_MESSAGE\n      type_name: \".docker.swarmkit.v1.AcceptancePolicy.RoleAdmissionPolicy.Secret\"\n      json_name: \"secret\"\n    }\n    nested_type {\n      name: \"Secret\"\n      field {\n        name: \"data\"\n        number: 1\n        label: LABEL_OPTIONAL\n        type: TYPE_BYTES\n        json_name: \"data\"\n      }\n      field {\n        name: \"alg\"\n        number: 2\n        label: LABEL_OPTIONAL\n        type: TYPE_STRING\n        json_name: \"alg\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: ASCII Art Diagram of GetEntries Behavior\nDESCRIPTION: ASCII diagram illustrating the old and new behavior of get-entries requests, showing how requests are aligned with entry boundaries for improved caching.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/google/certificate-transparency-go/CHANGELOG.md#2025-04-10_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nOld behaviour:\n             1         2         3\n             0         0         0\nEntries>-----|---------|---------|----...\nClient A -------|---------|----------|\n...\nClient B --|--------|---------|-------...\n           ^        ^         ^\n           `--------`---------`---- requests\n\nWith coercion (max batch = 10 entries):\n             1         2         3\n             0         0         0\nEntries>-----|---------|---------|----...\nClient A ----X---------|---------|...\nClient B --|-X---------|---------|-------...\n             ^\n             `-- Requests truncated\n```\n\n----------------------------------------\n\nTITLE: Loading and Accessing TOML Data\nDESCRIPTION: Example showing how to load TOML content from a string and access values using direct path access and intermediate objects.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/pelletier/go-toml/README.md#2025-04-10_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nconfig, _ := toml.Load(`\n[postgres]\nuser = \"pelletier\"\npassword = \"mypassword\"`)\n// retrieve data directly\nuser := config.Get(\"postgres.user\").(string)\n\n// or using an intermediate object\npostgresConfig := config.Get(\"postgres\").(*toml.Tree)\npassword := postgresConfig.Get(\"password\").(string)\n```\n\n----------------------------------------\n\nTITLE: Adding Dependencies in Go Modules for Prometheus\nDESCRIPTION: These commands demonstrate how to add or update dependencies using Go modules in the Prometheus project. It includes picking the latest tagged release or a specific version.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/prometheus/procfs/CONTRIBUTING.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Pick the latest tagged release.\ngo get example.com/some/module/pkg\n\n# Pick a specific version.\ngo get example.com/some/module/pkg@vX.Y.Z\n```\n\n----------------------------------------\n\nTITLE: Formal structure of Moby commit messages\nDESCRIPTION: Specifies the formal structure of commit messages for the Moby project, including the subject line, blank lines, explanation, and footer format.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/godbus/dbus/v5/CONTRIBUTING.md#2025-04-10_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<subsystem>: <what changed>\n<BLANK LINE>\n<why this change was made>\n<BLANK LINE>\n<footer>\n```\n\n----------------------------------------\n\nTITLE: Checking Windows Build Version in PowerShell\nDESCRIPTION: This PowerShell command retrieves the Windows build version, which must be at least 14393 for Moby development.\nSOURCE: https://github.com/moby/moby/blob/master/docs/contributing/software-req-win.md#2025-04-10_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nPS C:\\> $(gin).WindowsBuildLabEx\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Codebase Checks\nDESCRIPTION: Commands for installing golangci-lint and running code quality checks through the presubmit script. The presubmit script handles code generation, building, testing and linting.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/google/certificate-transparency-go/README.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Install golangci-lint\ngo install github.com/golangci/golangci-lint/cmd/golangci-lint@v1.46.1\n\n# Run code generation, build, test and linters\n./scripts/presubmit.sh\n\n# Run build, test and linters but skip code generation\n./scripts/presubmit.sh  --no-generate\n\n# Or just run the linters alone:\ngolangci-lint run\n```\n\n----------------------------------------\n\nTITLE: Merging Fields in Firestore Document Update\nDESCRIPTION: This code shows how to use the renamed Merge method (previously MergePaths) to update specific fields in a Firestore document. It requires the use of FieldPaths to specify which fields to merge.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/cloud.google.com/go/CHANGES.md#2025-04-10_snippet_17\n\nLANGUAGE: go\nCODE:\n```\ndocref.Update(ctx, []firestore.Update{{Path: \"Field\", Value: aStruct.Field}})\n```\n\n----------------------------------------\n\nTITLE: Example Go Spanner Auth Scopes Usage\nDESCRIPTION: Example showing how to specify cloud API access scopes when starting a Spanner instance.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/cloud.google.com/go/CHANGES.md#2025-04-10_snippet_13\n\nLANGUAGE: go\nCODE:\n```\nStartInstance /* allowing specification of cloud API access scopes */\n```\n\n----------------------------------------\n\nTITLE: Advanced Route Matching in Go using Gorilla Mux\nDESCRIPTION: Demonstrates various advanced route matching techniques, including path prefixes, HTTP methods, schemes, headers, and custom matcher functions.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/gorilla/mux/README.md#2025-04-10_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nr.PathPrefix(\"/products/\")\n\nr.Methods(\"GET\", \"POST\")\n\nr.Schemes(\"https\")\n\nr.Headers(\"X-Requested-With\", \"XMLHttpRequest\")\n\nr.Queries(\"key\", \"value\")\n\nr.MatcherFunc(func(r *http.Request, rm *RouteMatch) bool {\n    return r.ProtoMajor == 0\n})\n```\n\n----------------------------------------\n\nTITLE: Running Google Cloud SDK Integration Tests in Shell\nDESCRIPTION: Shell commands demonstrating how to run integration tests for Google Cloud SDK. The examples show how to run all tests or tests for specific modules like datastore. These commands are to be executed after setting up the necessary environment variables.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/cloud.google.com/go/CONTRIBUTING.md#2025-04-10_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n$ go test -v ./...\n```\n\n----------------------------------------\n\nTITLE: Commit References in Markdown\nDESCRIPTION: Markdown formatted commit references with issue numbers and commit hashes for tracking specific changes.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/googleapis/gax-go/v2/CHANGES.md#2025-04-10_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[#291](https://github.com/googleapis/gax-go/issues/291)) ([11503ed](https://github.com/googleapis/gax-go/commit/11503ed98df4ae1bbdedf91ff64d47e63f187d68))\n```\n\n----------------------------------------\n\nTITLE: Creating PackageURL from Components in Go\nDESCRIPTION: Example showing how to create a new PackageURL instance by specifying its individual components (type, namespace, name, version, qualifiers, and subpath).\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/package-url/packageurl-go/README.md#2025-04-10_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/package-url/packageurl-go\"\n)\n\nfunc main() {\n\tinstance := packageurl.NewPackageURL(\"test\", \"ok\", \"name\", \"version\", nil, \"\")\n\tfmt.Printf(\"%s\", instance.ToString())\n}\n```\n\n----------------------------------------\n\nTITLE: Latest Feature Release Note (v1.16.0)\nDESCRIPTION: Release note introducing DisableDefaultTimeout config option for IMDS calls.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/aws/aws-sdk-go-v2/feature/ec2/imds/CHANGELOG.md#2025-04-10_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n# v1.16.0 (2024-03-21)\n\n* **Feature**: Add config switch `DisableDefaultTimeout` that allows you to disable the default operation timeout (5 seconds) for IMDS calls.\n```\n\n----------------------------------------\n\nTITLE: Git Commit Sign-off Format for go-units Contributions\nDESCRIPTION: The required format for signing off on git commits when contributing to the go-units project. Contributors must add this line to every commit message using their real name and email address.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/docker/go-units/CONTRIBUTING.md#2025-04-10_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nSigned-off-by: Joe Smith <joe.smith@email.com>\n```\n\n----------------------------------------\n\nTITLE: Using go mod to Replace Google Domain Dependencies\nDESCRIPTION: Provides commands to work around access issues to google.golang.org domain using Go modules. This solution creates aliases for golang.org packages using the replace feature of go mod.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/google.golang.org/grpc/README.md#2025-04-10_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ngo mod edit -replace=google.golang.org/grpc=github.com/grpc/grpc-go@latest\ngo mod tidy\ngo mod vendor\ngo build -mod=vendor\n```\n\n----------------------------------------\n\nTITLE: Installing sockaddr CLI Utility in Go\nDESCRIPTION: Command to install the sockaddr CLI utility via go get. This utility exposes nearly all of the library's functionality and can be used as an administrative or testing tool.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/hashicorp/go-sockaddr/README.md#2025-04-10_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n$ go get -u github.com/hashicorp/go-sockaddr/cmd/sockaddr\n```\n\n----------------------------------------\n\nTITLE: Creating Docker Network with ICC Disabled and Running Container\nDESCRIPTION: Commands to create a user-defined bridge network with inter-container communication disabled and then run a container on that network with a published port. These commands establish the network environment described in the document.\nSOURCE: https://github.com/moby/moby/blob/master/integration/network/bridge/iptablesdoc/generated/usernet-portmap-noicc.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker network create \\\n  -o com.docker.network.bridge.name=bridge1 \\\n  -o com.docker.network.bridge.enable_icc=false \\\n  --subnet 192.0.2.0/24 --gateway 192.0.2.1 bridge1\ndocker run --network bridge1 -p 8080:80 --name c1 busybox\n```\n\n----------------------------------------\n\nTITLE: Serving Static Files with Go and Gorilla Mux\nDESCRIPTION: Illustrates how to serve static files using Gorilla Mux, including setting up a file server and handling path prefixes.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/gorilla/mux/README.md#2025-04-10_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nfunc main() {\n    var dir string\n\n    flag.StringVar(&dir, \"dir\", \".\", \"the directory to serve files from. Defaults to the current dir\")\n    flag.Parse()\n    r := mux.NewRouter()\n\n    // This will serve files under http://localhost:8000/static/<filename>\n    r.PathPrefix(\"/static/\").Handler(http.StripPrefix(\"/static/\", http.FileServer(http.Dir(dir))))\n\n    srv := &http.Server{\n        Handler:      r,\n        Addr:         \"127.0.0.1:8000\",\n        // Good practice: enforce timeouts for servers you create!\n        WriteTimeout: 15 * time.Second,\n        ReadTimeout:  15 * time.Second,\n    }\n\n    log.Fatal(srv.ListenAndServe())\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Docker Swarm Service with Published Port\nDESCRIPTION: Command to create a Docker Swarm service that publishes port 8080 to internal port 80 and runs the 'top' command in a busybox container.\nSOURCE: https://github.com/moby/moby/blob/master/integration/network/bridge/iptablesdoc/templates/swarm-portmap.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker service create -p 8080:80 busybox top\n```\n\n----------------------------------------\n\nTITLE: Special-case Marshaling for Functions Metadata in Go SDK\nDESCRIPTION: Commit reference showing the implementation of special-case marshaling for the functions/metadata package, likely to handle specific data types or formats.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/cloud.google.com/go/CHANGES.md#2025-04-10_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n* **functions/metadata:** Special-case marshaling ([#2669](https://www.github.com/googleapis/google-cloud-go/issues/2669)) ([d8d7fc6](https://www.github.com/googleapis/google-cloud-go/commit/d8d7fc66cbc42f79bec25fb0daaf53d926e3645b))\n```\n\n----------------------------------------\n\nTITLE: Package Declaration and Import\nDESCRIPTION: Declares the goautoneg package and imports required dependency from bitbucket.org\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/munnerz/goautoneg/README.txt#2025-04-10_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage goautoneg\nimport \"bitbucket.org/ww/goautoneg\"\n```\n\n----------------------------------------\n\nTITLE: Committing Changes with Issue Reference\nDESCRIPTION: This code demonstrates how to commit changes with a message that includes the issue number for better tracking and organization.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/mistifyio/go-zfs/v3/CONTRIBUTING.md#2025-04-10_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ git commit -m \"Issue #<issue-number> - <commit-message>\"\n```\n\n----------------------------------------\n\nTITLE: Verifying Built Binary Version\nDESCRIPTION: Checks the version of the registry binary that was built by the make process and placed in the bin directory.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/docker/distribution/BUILDING.md#2025-04-10_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ ./bin/registry --version\n./bin/registry github.com/docker/distribution v2.0.0-alpha.2-80-g16d8b2c.m\n```\n\n----------------------------------------\n\nTITLE: Basic XXHash API Functions in Go\nDESCRIPTION: Core API functions of the xxhash package including Sum64 for byte slices, Sum64String for strings, and Digest struct definition.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/cespare/xxhash/v2/README.md#2025-04-10_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc Sum64(b []byte) uint64\nfunc Sum64String(s string) uint64\ntype Digest struct{ ... }\n    func New() *Digest\n```\n\n----------------------------------------\n\nTITLE: Configuring Git client for automatic sign-offs in go-struct-converter\nDESCRIPTION: These shell commands demonstrate how to configure the Git client with a user's name and email, which enables automatic sign-offs when creating commits.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/anchore/go-struct-converter/CONTRIBUTING.md#2025-04-10_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ git config --global user.name \"John Doe\"\n$ git config --global user.email \"john.doe@example.com\"\n```\n\n----------------------------------------\n\nTITLE: Building Docker on Windows using PowerShell\nDESCRIPTION: The make.ps1 script is a Windows-native build script using PowerShell. It provides support for local Windows development and Windows-to-Windows CI, but with limited functionality compared to the Linux counterpart.\nSOURCE: https://github.com/moby/moby/blob/master/hack/README.md#2025-04-10_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n### make.ps1\n\n- The Windows native build script that uses PowerShell semantics; it is limited\nunlike `hack\\make.sh` since it does not provide support for the full set of\noperations provided by the Linux counterpart, `make.sh`. However, `make.ps1`\ndoes provide support for local Windows development and Windows to Windows CI.\nMore information is found within `make.ps1` by the author, @jhowardmsft\n```\n\n----------------------------------------\n\nTITLE: Authentication Middleware Implementation\nDESCRIPTION: Shows implementation of a complex authentication middleware that validates session tokens.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/gorilla/mux/README.md#2025-04-10_snippet_15\n\nLANGUAGE: go\nCODE:\n```\ntype authenticationMiddleware struct {\n\ttokenUsers map[string]string\n}\n\nfunc (amw *authenticationMiddleware) Populate() {\n\tamw.tokenUsers[\"00000000\"] = \"user0\"\n\tamw.tokenUsers[\"aaaaaaaa\"] = \"userA\"\n\tamw.tokenUsers[\"05f717e5\"] = \"randomUser\"\n\tamw.tokenUsers[\"deadbeef\"] = \"user0\"\n}\n\nfunc (amw *authenticationMiddleware) Middleware(next http.Handler) http.Handler {\n    return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n        token := r.Header.Get(\"X-Session-Token\")\n\n        if user, found := amw.tokenUsers[token]; found {\n        \tlog.Printf(\"Authenticated user %s\\n\", user)\n        \tnext.ServeHTTP(w, r)\n        } else {\n        \thttp.Error(w, \"Forbidden\", http.StatusForbidden)\n        }\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Scope Tags to Zipkin Exporter\nDESCRIPTION: Adds otel.scope.name and otel.scope.version tags to spans exported by the Zipkin exporter.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-10_snippet_9\n\nLANGUAGE: Go\nCODE:\n```\notel.scope.name and otel.scope.version tags to spans exported by go.opentelemetry.io/otel/exporters/zipkin\n```\n\n----------------------------------------\n\nTITLE: Basic xxhash API Functions in Go\nDESCRIPTION: The core API functions of the xxhash package, including Sum64 for computing hashes from byte slices, Sum64String for strings, and the basic Digest struct constructor.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/klauspost/compress/zstd/internal/xxhash/README.md#2025-04-10_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc Sum64(b []byte) uint64\nfunc Sum64String(s string) uint64\ntype Digest struct{ ... }\n    func New() *Digest\n```\n\n----------------------------------------\n\nTITLE: Network Statistics Message Definition in Protobuf\nDESCRIPTION: Defines the structure for network interface statistics including received and transmitted bytes, packets, errors, and drops.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/containerd/cgroups/v3/cgroup1/stats/metrics.pb.txt#2025-04-10_snippet_4\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage_type {\n  name: \"NetworkStat\"\n  field {\n    name: \"name\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"name\"\n  }\n  [...additional fields omitted for brevity...]\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Out Development Branch\nDESCRIPTION: Ensure you are on the 'dry-run-test' branch for development work.\nSOURCE: https://github.com/moby/moby/blob/master/docs/contributing/set-up-dev-env.md#2025-04-10_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ git checkout dry-run-test\n```\n\n----------------------------------------\n\nTITLE: Platform Specifier Example\nDESCRIPTION: Shows a common example of a platform specifier for Linux AMD64 architecture\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/containerd/platforms/README.md#2025-04-10_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nlinux/amd64\n```\n\n----------------------------------------\n\nTITLE: Running Moby Validation Tests on Windows\nDESCRIPTION: This PowerShell command runs validation tests for the Moby project on Windows.\nSOURCE: https://github.com/moby/moby/blob/master/docs/contributing/software-req-win.md#2025-04-10_snippet_7\n\nLANGUAGE: powershell\nCODE:\n```\nhack\\make.ps1 -DCO -PkgImports -GoFormat\n```\n\n----------------------------------------\n\nTITLE: Defining TranslationClient Interface in Go\nDESCRIPTION: This code snippet defines an interface for the TranslationClient, which can be used for mocking in tests. It includes the TranslateText method used in the previous examples.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/cloud.google.com/go/testing.md#2025-04-10_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ntype TranslationClient interface {\n        TranslateText(ctx context.Context, req *translatepb.TranslateTextRequest, opts ...gax.CallOption) (*translatepb.TranslateTextResponse, error)\n}\n```\n\n----------------------------------------\n\nTITLE: Accept Header Parser Function Declaration\nDESCRIPTION: Function signature for parsing an HTTP Accept header string into a sorted list of Accept clauses.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/munnerz/goautoneg/README.txt#2025-04-10_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfunc ParseAccept(header string) (accept []Accept)\n```\n\n----------------------------------------\n\nTITLE: Installing PTY Package via Go Get\nDESCRIPTION: Command to install the pty package using go get package manager.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/creack/pty/README.md#2025-04-10_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/creack/pty\n```\n\n----------------------------------------\n\nTITLE: Setting Protocol Buffer Options for Go Package\nDESCRIPTION: Specifies the Go package for the generated code from this Protocol Buffer definition. It sets the package to 'github.com/containerd/cgroups/cgroup2/stats'.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/containerd/cgroups/v3/cgroup2/stats/metrics.pb.txt#2025-04-10_snippet_6\n\nLANGUAGE: Protocol Buffers\nCODE:\n```\noptions {\n  go_package: \"github.com/containerd/cgroups/cgroup2/stats\"\n}\nsyntax: \"proto3\"\n```\n\n----------------------------------------\n\nTITLE: Running Tests and Linters for Zap\nDESCRIPTION: This snippet demonstrates how to run the test suite and linters for the Zap project using make commands.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/go.uber.org/zap/CONTRIBUTING.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake test\nmake lint\n```\n\n----------------------------------------\n\nTITLE: Opening BoltDB in Read-Only Mode\nDESCRIPTION: Shows how to open a BoltDB database in read-only mode using Options.ReadOnly flag. This allows shared read access while preventing write operations.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/go.etcd.io/bbolt/README.md#2025-04-10_snippet_20\n\nLANGUAGE: go\nCODE:\n```\ndb, err := bolt.Open(\"my.db\", 0666, &bolt.Options{ReadOnly: true})\nif err != nil {\n\tlog.Fatal(err)\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning the OpenTelemetry Go Repository with Git\nDESCRIPTION: Command to clone the opentelemetry-go repository from GitHub using git. This is the first step for contributors to get the source code.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#2025-04-10_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/open-telemetry/opentelemetry-go.git\n```\n\n----------------------------------------\n\nTITLE: Cloning Moby Repository in PowerShell\nDESCRIPTION: These PowerShell commands clone the Moby repository and navigate to the project directory.\nSOURCE: https://github.com/moby/moby/blob/master/docs/contributing/software-req-win.md#2025-04-10_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\ngit clone https://github.com/moby/moby\ncd moby\n```\n\n----------------------------------------\n\nTITLE: Implementing Fake Translation Server in Go\nDESCRIPTION: This code snippet demonstrates how to create a fake translation server for testing purposes. It implements the TranslationServiceServer interface and provides a mock implementation of the TranslateText method.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/cloud.google.com/go/testing.md#2025-04-10_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nimport (\n        \"context\"\n\n        translatepb \"google.golang.org/genproto/googleapis/cloud/translate/v3\"\n)\n\ntype fakeTranslationServer struct {\n        translatepb.UnimplementedTranslationServiceServer\n}\n\nfunc (f *fakeTranslationServer) TranslateText(ctx context.Context, req *translatepb.TranslateTextRequest) (*translatepb.TranslateTextResponse, error) {\n        resp := &translatepb.TranslateTextResponse{\n                Translations: []*translatepb.Translation{\n                        &translatepb.Translation{\n                                TranslatedText: \"Hello World\",\n                        },\n                },\n        }\n        return resp, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Sysctls in Docker Container Configuration\nDESCRIPTION: Sets kernel parameters (sysctls) for a container. This example enables IP forwarding within the container by setting the appropriate network parameter.\nSOURCE: https://github.com/moby/moby/blob/master/docs/api/v1.24.md#2025-04-10_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{ \"net.ipv4.ip_forward\": \"1\" }\n```\n\n----------------------------------------\n\nTITLE: Running BitSet Tests in Bash\nDESCRIPTION: Commands for running tests and checking code coverage for the BitSet library.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/bits-and-blooms/bitset/README.md#2025-04-10_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngo test\ngo test -cover\n```\n\n----------------------------------------\n\nTITLE: Enabling Experimental Resource Semantic Conventions in OpenTelemetry Go SDK\nDESCRIPTION: Sets the OTEL_GO_X_RESOURCE environment variable to 'true' to enable experimental resource semantic conventions in the OpenTelemetry Go SDK.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/go.opentelemetry.io/otel/sdk/internal/x/README.md#2025-04-10_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nexport OTEL_GO_X_RESOURCE=true\n```\n\n----------------------------------------\n\nTITLE: Pushing Changes to Forked Zap Repository\nDESCRIPTION: This snippet demonstrates how to push the local changes to the forked Zap repository on GitHub after making and testing the changes.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/go.uber.org/zap/CONTRIBUTING.md#2025-04-10_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit push origin cool_new_feature\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Type Option in Go\nDESCRIPTION: Creates an option implementation for custom types with a WithMyType function that sets the custom type value in the config.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#2025-04-10_snippet_10\n\nLANGUAGE: go\nCODE:\n```\ntype myTypeOption struct {\n\tMyType MyType\n}\n\nfunc (o myTypeOption) apply(c config) config {\n\tc.MyType = o.MyType\n    return c\n}\n\n// WithMyType sets T to have include MyType.\nfunc WithMyType(t MyType) Option {\n\treturn myTypeOption{t}\n}\n```\n\n----------------------------------------\n\nTITLE: Building Moby Docker Image on Windows\nDESCRIPTION: These Docker commands build the Moby image on Windows, with an option for Hyper-V containers.\nSOURCE: https://github.com/moby/moby/blob/master/docs/contributing/software-req-win.md#2025-04-10_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\ndocker build -t nativebuildimage -f .\\Dockerfile.windows .\ndocker build -t nativebuildimage -f Dockerfile.windows -m 2GB .  # (if using Hyper-V containers)\n```\n\n----------------------------------------\n\nTITLE: RDMA Statistics Message Definition in Protobuf\nDESCRIPTION: Defines the structure for RDMA (Remote Direct Memory Access) statistics including current usage and limits for HCA handles and objects.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/containerd/cgroups/v3/cgroup1/stats/metrics.pb.txt#2025-04-10_snippet_3\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage_type {\n  name: \"RdmaStat\"\n  field {\n    name: \"current\"\n    number: 1\n    label: LABEL_REPEATED\n    type: TYPE_MESSAGE\n    type_name: \".io.containerd.cgroups.v1.RdmaEntry\"\n    json_name: \"current\"\n  }\n  field {\n    name: \"limit\"\n    number: 2\n    label: LABEL_REPEATED\n    type: TYPE_MESSAGE\n    type_name: \".io.containerd.cgroups.v1.RdmaEntry\"\n    json_name: \"limit\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining DispatcherConfig Message in Protocol Buffers\nDESCRIPTION: Defines a message type 'DispatcherConfig' with a field for heartbeat period. This is used for configuring the dispatcher in Docker SwarmKit.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/moby/swarmkit/v2/api/api.pb.txt#2025-04-10_snippet_54\n\nLANGUAGE: Protocol Buffers\nCODE:\n```\nmessage_type {\n  name: \"DispatcherConfig\"\n  field {\n    name: \"heartbeat_period\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".google.protobuf.Duration\"\n    json_name: \"heartbeatPeriod\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Atomic Package in Go\nDESCRIPTION: This command installs the 'atomic' package using the Go package manager. It specifies version 1 of the package.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/go.uber.org/atomic/README.md#2025-04-10_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ go get -u go.uber.org/atomic@v1\n```\n\n----------------------------------------\n\nTITLE: Apache License 2.0 Boilerplate Notice Template\nDESCRIPTION: Standard boilerplate notice text for applying the Apache License 2.0 to a project, including copyright notice and license terms.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/aws/aws-sdk-go-v2/service/sts/LICENSE.txt#2025-04-10_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Cloning and Setting Up Zap Repository in Go Workspace\nDESCRIPTION: This snippet shows how to fork, clone, and set up the Zap repository in the Go workspace. It includes steps to add the upstream remote and fetch the latest changes.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/go.uber.org/zap/CONTRIBUTING.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p $GOPATH/src/go.uber.org\ncd $GOPATH/src/go.uber.org\ngit clone git@github.com:your_github_username/zap.git\ncd zap\ngit remote add upstream https://github.com/uber-go/zap.git\ngit fetch upstream\n```\n\n----------------------------------------\n\nTITLE: Using Go Get to Clone the OpenTelemetry Go Repository\nDESCRIPTION: Alternative command to clone the repository using Go's package management. This approach uses the official Go module path to retrieve the code.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#2025-04-10_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ngo get -d go.opentelemetry.io/otel\n```\n\n----------------------------------------\n\nTITLE: Installing JWT-Go Package with Go Modules\nDESCRIPTION: Command to add the JWT-Go package as a dependency in a Go project using Go modules. This installs the v5 version of the library.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/golang-jwt/jwt/v5/README.md#2025-04-10_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngo get -u github.com/golang-jwt/jwt/v5\n```\n\n----------------------------------------\n\nTITLE: Listing Docker Images\nDESCRIPTION: List the Docker images present in the development container.\nSOURCE: https://github.com/moby/moby/blob/master/docs/contributing/set-up-dev-env.md#2025-04-10_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n# docker images\n```\n\n----------------------------------------\n\nTITLE: Flag Value Retrieval\nDESCRIPTION: Demonstrates getting flag values from a FlagSet using helper functions.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/spf13/pflag/README.md#2025-04-10_snippet_5\n\nLANGUAGE: go\nCODE:\n```\ni, err := flagset.GetInt(\"flagname\")\n```\n\n----------------------------------------\n\nTITLE: Integrating Log Rotation with Zap and Lumberjack in Go\nDESCRIPTION: Demonstrates how to integrate the lumberjack package for log rotation with Zap. It creates a zapcore.WriteSyncer using lumberjack.Logger and sets up a new Zap logger core.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/go.uber.org/zap/FAQ.md#2025-04-10_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nw := zapcore.AddSync(&lumberjack.Logger{\n  Filename:   \"/var/log/myapp/foo.log\",\n  MaxSize:    500, // megabytes\n  MaxBackups: 3,\n  MaxAge:     28, // days\n})\ncore := zapcore.NewCore(\n  zapcore.NewJSONEncoder(zap.NewProductionEncoderConfig()),\n  w,\n  zap.InfoLevel,\n)\nlogger := zap.New(core)\n```\n\n----------------------------------------\n\nTITLE: Release History Links in Markdown\nDESCRIPTION: Markdown formatted version comparison links showing the changes between different releases of the gax-go library.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/googleapis/gax-go/v2/CHANGES.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[2.12.0](https://github.com/googleapis/gax-go/compare/v2.11.0...v2.12.0)\n```\n\n----------------------------------------\n\nTITLE: GCP Project Setup and Testing Commands\nDESCRIPTION: Shell commands for setting up GCP resources required for integration testing, including storage buckets, PubSub topics, Spanner instances, and KMS keys\nSOURCE: https://github.com/moby/moby/blob/master/vendor/cloud.google.com/go/CONTRIBUTING.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Sets the default project in your env.\n$ gcloud config set project $GCLOUD_TESTS_GOLANG_PROJECT_ID\n\n# Authenticates the gcloud tool with your account.\n$ gcloud auth login\n\n# Create the indexes for all the databases\n$ gcloud alpha datastore indexes create --database=your-databaseID-1 --project=$GCLOUD_TESTS_GOLANG_PROJECT_ID testdata/index.yaml\n\n# Creates a Google Cloud storage bucket\n$ gsutil mb gs://$GCLOUD_TESTS_GOLANG_PROJECT_ID\n$ gsutil acl ch -g cloud-logs@google.com:O gs://$GCLOUD_TESTS_GOLANG_PROJECT_ID\n\n# Creates a PubSub topic\n$ gcloud beta pubsub topics create go-storage-notification-test\n\n# Creates a Spanner instance\n$ gcloud beta spanner instances create go-integration-test --config regional-us-central1 --nodes 10 --description 'Instance for go client test'\n\n$ export MY_KEYRING=some-keyring-name\n$ export MY_LOCATION=global\n$ export MY_SINGLE_LOCATION=us-central1\n\n# Creates KMS resources\n$ gcloud kms keyrings create $MY_KEYRING --location $MY_LOCATION\n$ gcloud kms keys create key1 --keyring $MY_KEYRING --location $MY_LOCATION --purpose encryption\n$ gcloud kms keys create key2 --keyring $MY_KEYRING --location $MY_LOCATION --purpose encryption\n$ export GCLOUD_TESTS_GOLANG_KEYRING=projects/$GCLOUD_TESTS_GOLANG_PROJECT_ID/locations/$MY_LOCATION/keyRings/$MY_KEYRING\n$ gsutil kms authorize -p $GCLOUD_TESTS_GOLANG_PROJECT_ID -k $GCLOUD_TESTS_GOLANG_KEYRING/cryptoKeys/key1\n```\n\n----------------------------------------\n\nTITLE: Git Commit Sign-off Line Example\nDESCRIPTION: Example of how to properly sign-off a git commit message with the Signed-off-by line that must be included in every commit to certify compliance with the Developer Certificate of Origin.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/distribution/reference/CONTRIBUTING.md#2025-04-10_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n    Signed-off-by: Joe Smith <joe.smith@email.com>\n```\n\n----------------------------------------\n\nTITLE: Generating Docker Engine Man Pages with Make\nDESCRIPTION: Demonstrates how to generate Docker Engine man pages using the make command. Requires a Go toolchain and places generated pages in man*N* subdirectories.\nSOURCE: https://github.com/moby/moby/blob/master/man/README.md#2025-04-10_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake\n```\n\n----------------------------------------\n\nTITLE: Configuring Exemplars in OpenTelemetry Go Metric SDK\nDESCRIPTION: Examples of enabling exemplars and setting exemplar filters using environment variables. This includes enabling/disabling exemplars and setting different filter types.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/go.opentelemetry.io/otel/sdk/metric/internal/x/README.md#2025-04-10_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nexport OTEL_GO_X_EXEMPLAR=true\n```\n\nLANGUAGE: console\nCODE:\n```\nunset OTEL_GO_X_EXEMPLAR\n```\n\nLANGUAGE: console\nCODE:\n```\nexport OTEL_METRICS_EXEMPLAR_FILTER=always_on\n```\n\nLANGUAGE: console\nCODE:\n```\nexport OTEL_METRICS_EXEMPLAR_FILTER=always_off\n```\n\nLANGUAGE: console\nCODE:\n```\nexport OTEL_METRICS_EXEMPLAR_FILTER=trace_based\n```\n\nLANGUAGE: console\nCODE:\n```\nunset OTEL_METRICS_EXEMPLAR_FILTER\n```\n\n----------------------------------------\n\nTITLE: SwarmKit Protobuf Message Definitions\nDESCRIPTION: Comprehensive protobuf message type definitions for Docker SwarmKit v1. Includes definitions for encryption configuration, placement preferences, certificates, manager status, health checks and other core SwarmKit functionality.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/moby/swarmkit/v2/api/api.pb.txt#2025-04-10_snippet_56\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage_type {\n  name: \"EncryptionConfig\"\n  field {\n    name: \"auto_lock_managers\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_BOOL\n    json_name: \"autoLockManagers\"\n  }\n}\n\nmessage_type {\n  name: \"SpreadOver\"\n  field {\n    name: \"spread_descriptor\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"spreadDescriptor\"\n  }\n}\n\nmessage_type {\n  name: \"PlacementPreference\"\n  field {\n    name: \"spread\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".docker.swarmkit.v1.SpreadOver\"\n    oneof_index: 0\n    json_name: \"spread\"\n  }\n  oneof_decl {\n    name: \"Preference\"\n  }\n}\n\n// Additional message types follow similar pattern...\n```\n\n----------------------------------------\n\nTITLE: Displaying PkgGoDev Badge for Trace Noop Package\nDESCRIPTION: This code snippet displays a badge linking to the GoDoc page for the Trace Noop package. It uses Markdown syntax to create an image link.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/go.opentelemetry.io/otel/trace/noop/README.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![PkgGoDev](https://pkg.go.dev/badge/go.opentelemetry.io/otel/trace/noop)](https://pkg.go.dev/go.opentelemetry.io/otel/trace/noop)\n```\n\n----------------------------------------\n\nTITLE: Markdown Version Support Table\nDESCRIPTION: A markdown table showing the support status for different versions of Moby, with version 0.3.x being supported and versions below 0.3 being unsupported.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/dario.cat/mergo/SECURITY.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Version | Supported          |\n| ------- | ------------------ |\n| 0.3.x   | :white_check_mark: |\n| < 0.3   | :x:                |\n```\n\n----------------------------------------\n\nTITLE: Displaying Developer's Certificate of Origin for go-struct-converter\nDESCRIPTION: This snippet shows the full text of the Developer's Certificate of Origin (DCO) version 1.1, which contributors must agree to when making contributions to the project.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/anchore/go-struct-converter/CONTRIBUTING.md#2025-04-10_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nDeveloper's Certificate of Origin 1.1\n\nBy making a contribution to this project, I certify that:\n\n   (a) The contribution was created in whole or in part by me and I\n       have the right to submit it under the open source license\n       indicated in the file; or\n\n   (b) The contribution is based upon previous work that, to the best\n       of my knowledge, is covered under an appropriate open source\n       license and I have the right under that license to submit that\n       work with modifications, whether created in whole or in part\n       by me, under the same open source license (unless I am\n       permitted to submit under a different license), as indicated\n       in the file; or\n\n   (c) The contribution was provided directly to me by some other\n       person who certified (a), (b) or (c) and I have not modified\n       it.\n\n   (d) I understand and agree that this project and the contribution\n       are public and that a record of the contribution (including all\n       personal information I submit with it, including my sign-off) is\n       maintained indefinitely and may be redistributed consistent with\n       this project or the open source license(s) involved.\n```\n\n----------------------------------------\n\nTITLE: Pulling Upstream Changes in go-zfs\nDESCRIPTION: This code snippet demonstrates how to fetch and merge the latest changes from the upstream repository into the local master branch.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/mistifyio/go-zfs/v3/CONTRIBUTING.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ git checkout master\n$ git fetch upstream\n$ git merge upstream/master\n```\n\n----------------------------------------\n\nTITLE: Installing Google Cloud Package\nDESCRIPTION: Command to install specific Google Cloud packages using go get\nSOURCE: https://github.com/moby/moby/blob/master/vendor/cloud.google.com/go/README.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/firestore\n```\n\n----------------------------------------\n\nTITLE: Running SCTP Server and Client Examples in Go\nDESCRIPTION: This snippet demonstrates how to build and run SCTP server and client examples using Go. It includes commands for compiling the example code and running both the server and client with specific port and IP configurations.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/ishidawataru/sctp/README.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cd example\n$ go build\n$ # run example SCTP server\n$ ./example -server -port 1000 -ip 10.10.0.1,10.20.0.1\n$ # run example SCTP client\n$ ./example -port 1000 -ip 10.10.0.1,10.20.0.1\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Network Links\nDESCRIPTION: Removes a manually created network link interface using the ip command.\nSOURCE: https://github.com/moby/moby/blob/master/libnetwork/docs/macvlan.md#2025-04-10_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nip link del foo\n```\n\n----------------------------------------\n\nTITLE: Iptables Filter Table Rules\nDESCRIPTION: Detailed iptables rules for the filter table, showing chains and policies for Docker network traffic management. This includes rules for isolation, forwarding, and user-defined chains.\nSOURCE: https://github.com/moby/moby/blob/master/integration/network/bridge/iptablesdoc/generated/usernet-portmap-lo.md#2025-04-10_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n-P INPUT ACCEPT\n-P FORWARD ACCEPT\n-P OUTPUT ACCEPT\n-N DOCKER\n-N DOCKER-BRIDGE\n-N DOCKER-CT\n-N DOCKER-FORWARD\n-N DOCKER-ISOLATION-STAGE-1\n-N DOCKER-ISOLATION-STAGE-2\n-N DOCKER-USER\n-A FORWARD -j DOCKER-USER\n-A FORWARD -j DOCKER-FORWARD\n-A DOCKER -d 192.0.2.2/32 ! -i bridge1 -o bridge1 -p tcp -m tcp --dport 80 -j ACCEPT\n-A DOCKER ! -i docker0 -o docker0 -j DROP\n-A DOCKER ! -i bridge1 -o bridge1 -j DROP\n-A DOCKER-BRIDGE -o docker0 -j DOCKER\n-A DOCKER-BRIDGE -o bridge1 -j DOCKER\n-A DOCKER-CT -o docker0 -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT\n-A DOCKER-CT -o bridge1 -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT\n-A DOCKER-FORWARD -j DOCKER-CT\n-A DOCKER-FORWARD -j DOCKER-ISOLATION-STAGE-1\n-A DOCKER-FORWARD -j DOCKER-BRIDGE\n-A DOCKER-FORWARD -i docker0 -j ACCEPT\n-A DOCKER-FORWARD -i bridge1 -j ACCEPT\n-A DOCKER-ISOLATION-STAGE-1 -i docker0 ! -o docker0 -j DOCKER-ISOLATION-STAGE-2\n-A DOCKER-ISOLATION-STAGE-1 -i bridge1 ! -o bridge1 -j DOCKER-ISOLATION-STAGE-2\n-A DOCKER-ISOLATION-STAGE-2 -o bridge1 -j DROP\n-A DOCKER-ISOLATION-STAGE-2 -o docker0 -j DROP\n-A DOCKER-USER -j RETURN\n```\n\n----------------------------------------\n\nTITLE: OpenTelemetry SDK Resource Badge\nDESCRIPTION: Markdown code displaying a package documentation badge that links to the Go package documentation for the OpenTelemetry SDK Resource package\nSOURCE: https://github.com/moby/moby/blob/master/vendor/go.opentelemetry.io/otel/sdk/resource/README.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![PkgGoDev](https://pkg.go.dev/badge/go.opentelemetry.io/otel/sdk/resource)](https://pkg.go.dev/go.opentelemetry.io/otel/sdk/resource)\n```\n\n----------------------------------------\n\nTITLE: Displaying Moby Project Logo in Markdown\nDESCRIPTION: This snippet shows how to embed the Moby Project logo image in a Markdown file, including alt text and a title attribute.\nSOURCE: https://github.com/moby/moby/blob/master/README.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n![Moby Project logo](docs/static_files/moby-project-logo.png \"The Moby Project\")\n```\n\n----------------------------------------\n\nTITLE: Running tests in gRPC-Go project\nDESCRIPTION: Command to run all tests in the repository with different CPU configurations and a timeout limit. This is required to ensure your changes don't break existing functionality.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/google.golang.org/grpc/CONTRIBUTING.md#2025-04-10_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngo test -cpu 1,4 -timeout 7m ./...\n```\n\n----------------------------------------\n\nTITLE: Running benchmarks for go-toml\nDESCRIPTION: Command to execute performance benchmarks for the go-toml project with multiple iterations for statistical significance.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/pelletier/go-toml/v2/CONTRIBUTING.md#2025-04-10_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngo test ./... -bench=. -count=10\n```\n\n----------------------------------------\n\nTITLE: Basic Flag Import in Go\nDESCRIPTION: Shows how to import pflag as a replacement for Go's native flag package.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/spf13/pflag/README.md#2025-04-10_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport flag \"github.com/spf13/pflag\"\n```\n\n----------------------------------------\n\nTITLE: Basic Flag Import in Go\nDESCRIPTION: Shows how to import pflag as a replacement for Go's native flag package.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/spf13/pflag/README.md#2025-04-10_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport flag \"github.com/spf13/pflag\"\n```\n\n----------------------------------------\n\nTITLE: Running bbolt Command Line Utility\nDESCRIPTION: Command to run the bbolt command line utility directly using Go run.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/go.etcd.io/bbolt/README.md#2025-04-10_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ go run go.etcd.io/bbolt/cmd/bbolt@latest\n```\n\n----------------------------------------\n\nTITLE: OpenTelemetry SDK Badge Markdown\nDESCRIPTION: Markdown code for displaying the PkgGoDev badge with a link to the OpenTelemetry Go SDK package documentation.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/go.opentelemetry.io/otel/sdk/README.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![PkgGoDev](https://pkg.go.dev/badge/go.opentelemetry.io/otel/sdk)](https://pkg.go.dev/go.opentelemetry.io/otel/sdk)\n```\n\n----------------------------------------\n\nTITLE: Generating Contributors List in Bash\nDESCRIPTION: The generate-authors.sh script creates an AUTHORS file containing names and emails of all individual contributors to the repository.\nSOURCE: https://github.com/moby/moby/blob/master/hack/README.md#2025-04-10_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\n## Generate Authors (generate-authors.sh)\n\nGenerates AUTHORS; a file with all the names and corresponding emails of\nindividual contributors. AUTHORS can be found in the home directory of\nthis repository.\n```\n\n----------------------------------------\n\nTITLE: Defining ConfChangeTransition Enum in Protobuf for Raft\nDESCRIPTION: Protocol Buffer definition for the ConfChangeTransition enum used in Raft consensus algorithm. This enumeration defines transition types for configuration changes, including automatic and joint consensus transitions.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/moby/swarmkit/v2/api/api.pb.txt#2025-04-10_snippet_115\n\nLANGUAGE: protobuf\nCODE:\n```\nenum_type {\n  name: \"ConfChangeTransition\"\n  value {\n    name: \"ConfChangeTransitionAuto\"\n    number: 0\n  }\n  value {\n    name: \"ConfChangeTransitionJointImplicit\"\n    number: 1\n  }\n  value {\n    name: \"ConfChangeTransitionJointExplicit\"\n    number: 2\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Module-Specific Tests for Google Cloud SDK in Shell\nDESCRIPTION: Shell commands showing how to navigate to a specific module directory and run integration tests only for that module. This example demonstrates running tests specifically for the datastore module.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/cloud.google.com/go/CONTRIBUTING.md#2025-04-10_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\n$ cd datastore\n$ go test -v ./...\n```\n\n----------------------------------------\n\nTITLE: Building Registry with Make\nDESCRIPTION: Uses the provided Makefile to perform a complete build process including formatting, vetting, linting, building, testing and generating binaries.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/docker/distribution/BUILDING.md#2025-04-10_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ make\n+ clean\n+ fmt\n+ vet\n+ lint\n+ build\ngithub.com/docker/docker/vendor/src/code.google.com/p/go/src/pkg/archive/tar\ngithub.com/sirupsen/logrus\ngithub.com/docker/libtrust\n...\ngithub.com/yvasiyarov/gorelic\ngithub.com/docker/distribution/registry/handlers\ngithub.com/docker/distribution/cmd/registry\n+ test\n...\nok    github.com/docker/distribution/digest 7.875s\nok    github.com/docker/distribution/manifest 0.028s\nok    github.com/docker/distribution/notifications  17.322s\n?     github.com/docker/distribution/registry [no test files]\nok    github.com/docker/distribution/registry/api/v2  0.101s\n?     github.com/docker/distribution/registry/auth  [no test files]\nok    github.com/docker/distribution/registry/auth/silly  0.011s\n...\n+ /Users/sday/go/src/github.com/docker/distribution/bin/registry\n+ /Users/sday/go/src/github.com/docker/distribution/bin/registry-api-descriptor-template\n+ binaries\n```\n\n----------------------------------------\n\nTITLE: Flag Default Value Setting\nDESCRIPTION: Example of setting NoOptDefVal for flags to handle no-option cases.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/spf13/pflag/README.md#2025-04-10_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nvar ip = flag.IntP(\"flagname\", \"f\", 1234, \"help message\")\nflag.Lookup(\"flagname\").NoOptDefVal = \"4321\"\n```\n\n----------------------------------------\n\nTITLE: BoltDB Mobile Implementation in Go\nDESCRIPTION: Demonstrates the implementation of a BoltDB wrapper struct for mobile use with iOS and Android. Includes initialization and basic database operations.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/go.etcd.io/bbolt/README.md#2025-04-10_snippet_21\n\nLANGUAGE: go\nCODE:\n```\nfunc NewBoltDB(filepath string) *BoltDB {\n\tdb, err := bolt.Open(filepath+\"/demo.db\", 0600, nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\treturn &BoltDB{db}\n}\n\ntype BoltDB struct {\n\tdb *bolt.DB\n\t...\n}\n\nfunc (b *BoltDB) Path() string {\n\treturn b.db.Path()\n}\n\nfunc (b *BoltDB) Close() {\n\tb.db.Close()\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Go-TOML Package\nDESCRIPTION: Basic import statement for including the go-toml library in a Go project.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/pelletier/go-toml/README.md#2025-04-10_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/pelletier/go-toml\"\n```\n\n----------------------------------------\n\nTITLE: Displaying PkgGoDev Badge for OpenTelemetry Metric API in Markdown\nDESCRIPTION: This snippet shows how to embed a PkgGoDev badge in Markdown, linking to the documentation for the OpenTelemetry Metric API package in Go.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/go.opentelemetry.io/otel/metric/README.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![PkgGoDev](https://pkg.go.dev/badge/go.opentelemetry.io/otel/metric)](https://pkg.go.dev/go.opentelemetry.io/otel/metric)\n```\n\n----------------------------------------\n\nTITLE: Installing Docker Engine Man Pages with Make\nDESCRIPTION: Shows how to install the generated Docker Engine man pages using make install. Supports customization variables like prefix, mandir, INSTALL, INSTALL_DATA, and DESTDIR.\nSOURCE: https://github.com/moby/moby/blob/master/man/README.md#2025-04-10_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake install\n```\n\n----------------------------------------\n\nTITLE: Defining EntryType Enum in Protobuf for Raft\nDESCRIPTION: Protocol Buffer definition for the EntryType enum used in Raft consensus algorithm. This enumeration defines types of log entries in the Raft log, including normal entries and configuration change entries.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/moby/swarmkit/v2/api/api.pb.txt#2025-04-10_snippet_113\n\nLANGUAGE: protobuf\nCODE:\n```\nenum_type {\n  name: \"EntryType\"\n  value {\n    name: \"EntryNormal\"\n    number: 0\n  }\n  value {\n    name: \"EntryConfChange\"\n    number: 1\n  }\n  value {\n    name: \"EntryConfChangeV2\"\n    number: 2\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Second Release Candidate Versions\nDESCRIPTION: Illustrates version increments for a second release candidate after minor incompatible changes.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/go.opentelemetry.io/otel/VERSIONING.md#2025-04-10_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n* `otel`: `v1.0.0-RC2`\n* `otel/trace`: `v1.0.0-RC2`\n* `otel/baggage`: `v1.0.0-RC2`\n* `otel/sdk/trace`: `v1.0.0-RC2`\n```\n\n----------------------------------------\n\nTITLE: Flag Deprecation Examples\nDESCRIPTION: Shows how to deprecate flags and flag shorthands with usage messages.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/spf13/pflag/README.md#2025-04-10_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nflags.MarkDeprecated(\"badflag\", \"please use --good-flag instead\")\n```\n\nLANGUAGE: go\nCODE:\n```\nflags.MarkShorthandDeprecated(\"noshorthandflag\", \"please use --noshorthandflag only\")\n```\n\n----------------------------------------\n\nTITLE: Enabling Prometheus Histogram Metrics in Go\nDESCRIPTION: Code to enable histogram metrics for monitoring RPC latency distributions in the gRPC server.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/grpc-ecosystem/go-grpc-prometheus/README.md#2025-04-10_snippet_2\n\nLANGUAGE: jsoniq\nCODE:\n```\ngrpc_prometheus.EnableHandlingTimeHistogram()\n```\n\n----------------------------------------\n\nTITLE: Defining Protocol Buffer EnumValueOptions\nDESCRIPTION: Defines options that can be applied to individual enum values, including deprecation markers.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/moby/swarmkit/v2/api/api.pb.txt#2025-04-10_snippet_13\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage_type {\n    name: \"EnumValueOptions\"\n    field {\n      name: \"deprecated\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_BOOL\n      default_value: \"false\"\n      json_name: \"deprecated\"\n    }\n    field {\n      name: \"uninterpreted_option\"\n      number: 999\n      label: LABEL_REPEATED\n      type: TYPE_MESSAGE\n      type_name: \".google.protobuf.UninterpretedOption\"\n      json_name: \"uninterpretedOption\"\n    }\n    extension_range {\n      start: 1000\n      end: 536870912\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Apache License 2.0 Boilerplate Notice\nDESCRIPTION: Standard boilerplate text for applying the Apache License 2.0 to a project. Users should replace the placeholder copyright information with their own details and include this notice in the appropriate comment syntax for their file format.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/aws/aws-sdk-go-v2/feature/ec2/imds/LICENSE.txt#2025-04-10_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nCopyright [yyyy] [name of copyright owner]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Displaying Release Candidate for All Modules\nDESCRIPTION: Shows version numbers for a release candidate that includes all modules, including previously unstable ones.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/go.opentelemetry.io/otel/VERSIONING.md#2025-04-10_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n* `otel`: `v1.1.0-RC1`\n* `otel/trace`: `v1.1.0-RC1`\n* `otel/metric`: `v1.1.0-RC1`\n* `otel/baggage`: `v1.1.0-RC1`\n* `otel/sdk/trace`: `v1.1.0-RC1`\n* `otel/sdk/metric`: `v1.1.0-RC1`\n```\n\n----------------------------------------\n\nTITLE: Defining Protocol Buffer File Declaration for GoGo Protobuf\nDESCRIPTION: Declares a protobuf file with name and package for GoGo Protobuf extensions, which provide additional protobuf functionality for Go.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/moby/swarmkit/v2/api/api.pb.txt#2025-04-10_snippet_20\n\nLANGUAGE: protobuf\nCODE:\n```\nfile {\n  name: \"gogoproto/gogo.proto\"\n  package: \"gogoproto\"\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying First Stable Release Versions\nDESCRIPTION: Shows the version numbers for the first stable release of the evaluated modules.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/go.opentelemetry.io/otel/VERSIONING.md#2025-04-10_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n* `otel`: `v1.0.0`\n* `otel/trace`: `v1.0.0`\n* `otel/baggage`: `v1.0.0`\n* `otel/sdk/trace`: `v1.0.0`\n```\n\n----------------------------------------\n\nTITLE: Disable Flag Sorting\nDESCRIPTION: Shows how to disable automatic sorting of flags in help and usage messages.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/spf13/pflag/README.md#2025-04-10_snippet_11\n\nLANGUAGE: go\nCODE:\n```\nflags.BoolP(\"verbose\", \"v\", false, \"verbose output\")\nflags.String(\"coolflag\", \"yeaah\", \"it's really cool flag\")\nflags.Int(\"usefulflag\", 777, \"sometimes it's very useful\")\nflags.SortFlags = false\nflags.PrintDefaults()\n```\n\n----------------------------------------\n\nTITLE: Implementing Client-side gRPC Prometheus Interceptors in Go\nDESCRIPTION: Setup of client-side gRPC interceptors for Prometheus monitoring. Shows how to configure the client connection with unary and stream interceptors for metric collection.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/grpc-ecosystem/go-grpc-prometheus/README.md#2025-04-10_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/grpc-ecosystem/go-grpc-prometheus\"\n...\n   clientConn, err = grpc.Dial(\n       address,\n\t\t   grpc.WithUnaryInterceptor(grpc_prometheus.UnaryClientInterceptor),\n\t\t   grpc.WithStreamInterceptor(grpc_prometheus.StreamClientInterceptor)\n   )\n   client = pb_testproto.NewTestServiceClient(clientConn)\n   resp, err := client.PingEmpty(s.ctx, &myservice.Request{Msg: \"hello\"})\n```\n\n----------------------------------------\n\nTITLE: Creating Container Base Image\nDESCRIPTION: Shell commands to create a base image for the guest agent by pulling busybox, creating a container, and exporting its rootfs.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/Microsoft/hcsshim/README.md#2025-04-10_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndocker pull busybox\ndocker run --name base_image_container busybox\ndocker export base_image_container | gzip > base.tar.gz\nBASE=./base.tar.gz\nmake all\n```\n\n----------------------------------------\n\nTITLE: Displaying Mixed Stable and Unstable Release Versions\nDESCRIPTION: Illustrates a release with both stable module updates and unstable module changes.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/go.opentelemetry.io/otel/VERSIONING.md#2025-04-10_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n* `otel`: `v1.0.1`\n* `otel/trace`: `v1.0.1`\n* `otel/metric`: `v0.15.0`\n* `otel/baggage`: `v1.0.1`\n* `otel/sdk/trace`: `v1.0.1`\n* `otel/sdk/metric`: `v0.15.0`\n```\n\n----------------------------------------\n\nTITLE: Defining Protocol Buffer UninterpretedOption with NamePart\nDESCRIPTION: Defines structure for custom options in protocol buffers that are not recognized by the parser, including nested NamePart message.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/moby/swarmkit/v2/api/api.pb.txt#2025-04-10_snippet_16\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage_type {\n    name: \"UninterpretedOption\"\n    field {\n      name: \"name\"\n      number: 2\n      label: LABEL_REPEATED\n      type: TYPE_MESSAGE\n      type_name: \".google.protobuf.UninterpretedOption.NamePart\"\n      json_name: \"name\"\n    }\n    field {\n      name: \"identifier_value\"\n      number: 3\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"identifierValue\"\n    }\n    field {\n      name: \"positive_int_value\"\n      number: 4\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n      json_name: \"positiveIntValue\"\n    }\n    field {\n      name: \"negative_int_value\"\n      number: 5\n      label: LABEL_OPTIONAL\n      type: TYPE_INT64\n      json_name: \"negativeIntValue\"\n    }\n    field {\n      name: \"double_value\"\n      number: 6\n      label: LABEL_OPTIONAL\n      type: TYPE_DOUBLE\n      json_name: \"doubleValue\"\n    }\n    field {\n      name: \"string_value\"\n      number: 7\n      label: LABEL_OPTIONAL\n      type: TYPE_BYTES\n      json_name: \"stringValue\"\n    }\n    field {\n      name: \"aggregate_value\"\n      number: 8\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"aggregateValue\"\n    }\n    nested_type {\n      name: \"NamePart\"\n      field {\n        name: \"name_part\"\n        number: 1\n        label: LABEL_REQUIRED\n        type: TYPE_STRING\n        json_name: \"namePart\"\n      }\n      field {\n        name: \"is_extension\"\n        number: 2\n        label: LABEL_REQUIRED\n        type: TYPE_BOOL\n        json_name: \"isExtension\"\n      }\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Contrib Repository Module Path Versioning in Go\nDESCRIPTION: This example shows how to include the major version number in module paths and import statements for Go modules in the contrib repository with version v2 or higher. It includes examples for module declarations, import statements, and go get commands.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/go.opentelemetry.io/otel/VERSIONING.md#2025-04-10_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule go.opentelemetry.io/contrib/instrumentation/host/v2\nrequire go.opentelemetry.io/contrib/instrumentation/host/v2 v2.0.1\nimport \"go.opentelemetry.io/contrib/instrumentation/host/v2\"\ngo get go.opentelemetry.io/contrib/instrumentation/host/v2@v2.0.1\n```\n\n----------------------------------------\n\nTITLE: Go Flag Integration\nDESCRIPTION: Example of integrating standard Go flags with pflag.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/spf13/pflag/README.md#2025-04-10_snippet_12\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\tgoflag \"flag\"\n\tflag \"github.com/spf13/pflag\"\n)\n\nvar ip *int = flag.Int(\"flagname\", 1234, \"help message for flagname\")\n\nfunc main() {\n\tflag.CommandLine.AddGoFlagSet(goflag.CommandLine)\n\tflag.Parse()\n}\n```\n\n----------------------------------------\n\nTITLE: Installing and Using go-md2man in Bash\nDESCRIPTION: Commands for installing go-md2man via Go and converting a markdown file to a man page. The tool is installed using go install and then executed with input and output path parameters.\nSOURCE: https://github.com/moby/moby/blob/master/man/vendor/github.com/cpuguy83/go-md2man/v2/README.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo install github.com/cpuguy83/go-md2man@latest\n\ngo-md2man -in /path/to/markdownfile.md -out /manfile/output/path\n```\n\n----------------------------------------\n\nTITLE: Container Stop Response\nDESCRIPTION: Example HTTP response for a successful container stop operation, showing a 204 No Content status code.\nSOURCE: https://github.com/moby/moby/blob/master/docs/api/v1.24.md#2025-04-10_snippet_31\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 204 No Content\n```\n\n----------------------------------------\n\nTITLE: Configuring Views in OpenTelemetry Go SDK\nDESCRIPTION: This code shows how to use the new WithView option to configure views for a MeterProvider in the OpenTelemetry Go SDK metric package.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-10_snippet_22\n\nLANGUAGE: Go\nCODE:\n```\nimport \"go.opentelemetry.io/otel/sdk/metric\"\n\nmp := metric.NewMeterProvider(\n    metric.WithView(customView),\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Protocol Buffer MessageType and FieldOptions\nDESCRIPTION: Defines Protocol Buffer message types and field options including CType enum, field options for packed fields, JSON types, and other field attributes.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/moby/swarmkit/v2/api/api.pb.txt#2025-04-10_snippet_10\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage_type {\n    name: \"FieldOptions\"\n    field {\n      name: \"ctype\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_ENUM\n      type_name: \".google.protobuf.FieldOptions.CType\"\n      default_value: \"STRING\"\n      json_name: \"ctype\"\n    }\n    field {\n      name: \"packed\"\n      number: 2\n      label: LABEL_OPTIONAL\n      type: TYPE_BOOL\n      json_name: \"packed\"\n    }\n    field {\n      name: \"jstype\"\n      number: 6\n      label: LABEL_OPTIONAL\n      type: TYPE_ENUM\n      type_name: \".google.protobuf.FieldOptions.JSType\"\n      default_value: \"JS_NORMAL\"\n      json_name: \"jstype\"\n    }\n    field {\n      name: \"lazy\"\n      number: 5\n      label: LABEL_OPTIONAL\n      type: TYPE_BOOL\n      default_value: \"false\"\n      json_name: \"lazy\"\n    }\n    field {\n      name: \"deprecated\"\n      number: 3\n      label: LABEL_OPTIONAL\n      type: TYPE_BOOL\n      default_value: \"false\"\n      json_name: \"deprecated\"\n    }\n    field {\n      name: \"weak\"\n      number: 10\n      label: LABEL_OPTIONAL\n      type: TYPE_BOOL\n      default_value: \"false\"\n      json_name: \"weak\"\n    }\n    field {\n      name: \"uninterpreted_option\"\n      number: 999\n      label: LABEL_REPEATED\n      type: TYPE_MESSAGE\n      type_name: \".google.protobuf.UninterpretedOption\"\n      json_name: \"uninterpretedOption\"\n    }\n    enum_type {\n      name: \"CType\"\n      value {\n        name: \"STRING\"\n        number: 0\n      }\n      value {\n        name: \"CORD\"\n        number: 1\n      }\n      value {\n        name: \"STRING_PIECE\"\n        number: 2\n      }\n    }\n    enum_type {\n      name: \"JSType\"\n      value {\n        name: \"JS_NORMAL\"\n        number: 0\n      }\n      value {\n        name: \"JS_STRING\"\n        number: 1\n      }\n      value {\n        name: \"JS_NUMBER\"\n        number: 2\n      }\n    }\n    extension_range {\n      start: 1000\n      end: 536870912\n    }\n    reserved_range {\n      start: 4\n      end: 5\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Displaying Initial Module Versions\nDESCRIPTION: Lists the initial versions of the OpenTelemetry Go modules before any stable releases.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/go.opentelemetry.io/otel/VERSIONING.md#2025-04-10_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n* `otel`: `v0.14.0`\n* `otel/trace`: `v0.14.0`\n* `otel/metric`: `v0.14.0`\n* `otel/baggage`: `v0.14.0`\n* `otel/sdk/trace`: `v0.14.0`\n* `otel/sdk/metric`: `v0.14.0`\n```\n\n----------------------------------------\n\nTITLE: Importing JWT-Go Package in Go Code\nDESCRIPTION: Example of how to import the JWT-Go package in Go code, making the library's functionality available in the application.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/golang-jwt/jwt/v5/README.md#2025-04-10_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/golang-jwt/jwt/v5\"\n```\n\n----------------------------------------\n\nTITLE: Basic Error Accumulation in Go\nDESCRIPTION: Demonstrates how to accumulate multiple errors using the Append function, which combines errors regardless of whether the initial error is nil, a multierror.Error, or a regular error.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/hashicorp/go-multierror/README.md#2025-04-10_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nvar result error\n\nif err := step1(); err != nil {\n\tresult = multierror.Append(result, err)\n}\nif err := step2(); err != nil {\n\tresult = multierror.Append(result, err)\n}\n\nreturn result\n```\n\n----------------------------------------\n\nTITLE: Defining Containerd Runc Options Protocol Structure\nDESCRIPTION: Protocol buffer schema defining the Options message type for containerd runc runtime configuration. Includes fields for runtime settings like pivot root, keyring, cgroups, and various paths.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/containerd/containerd/api/types/runc/options/next.pb.txt#2025-04-10_snippet_0\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage Options {\n  bool no_pivot_root = 1;\n  bool no_new_keyring = 2;\n  string shim_cgroup = 3;\n  uint32 io_uid = 4;\n  uint32 io_gid = 5;\n  string binary_name = 6;\n  string root = 7;\n  bool systemd_cgroup = 9;\n  string criu_image_path = 10;\n  string criu_work_path = 11;\n  string task_api_address = 12;\n  uint32 task_api_version = 13;\n  reserved 8;\n}\n```\n\n----------------------------------------\n\nTITLE: MeterProvider Shutdown Behavior\nDESCRIPTION: Change in MeterProvider behavior to return noop meters after shutdown.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-10_snippet_17\n\nLANGUAGE: go\nCODE:\n```\nMeterProvider.Shutdown() // Returns noop meters after shutdown\n```\n\n----------------------------------------\n\nTITLE: Defining Wrapper Types in Protocol Buffers\nDESCRIPTION: Defines wrapper message types for various primitive types such as DoubleValue, FloatValue, Int64Value, etc. Includes package options for different programming languages.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/moby/swarmkit/v2/api/api.pb.txt#2025-04-10_snippet_2\n\nLANGUAGE: Protocol Buffers\nCODE:\n```\nfile {\n  name: \"google/protobuf/wrappers.proto\"\n  package: \"google.protobuf\"\n  message_type {\n    name: \"DoubleValue\"\n    field {\n      name: \"value\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_DOUBLE\n      json_name: \"value\"\n    }\n  }\n  message_type {\n    name: \"FloatValue\"\n    field {\n      name: \"value\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_FLOAT\n      json_name: \"value\"\n    }\n  }\n  // ... (other wrapper types omitted for brevity)\n  options {\n    java_package: \"com.google.protobuf\"\n    java_outer_classname: \"WrappersProto\"\n    java_multiple_files: true\n    go_package: \"github.com/golang/protobuf/ptypes/wrappers\"\n    cc_enable_arenas: true\n    objc_class_prefix: \"GPB\"\n    csharp_namespace: \"Google.Protobuf.WellKnownTypes\"\n  }\n  syntax: \"proto3\"\n}\n```\n\n----------------------------------------\n\nTITLE: Package Import Changes in OpenTelemetry Go SDK\nDESCRIPTION: List of package imports that were modified or removed in the OpenTelemetry Go SDK, including removal of deprecated packages and addition of new ones.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-10_snippet_15\n\nLANGUAGE: go\nCODE:\n```\ngo.opentelemetry.io/otel/bridge/opencensus\ngo.opentelemetry.io/otel/exporters/otlp/otlpmetric\ngo.opentelemetry.io/otel/example/view\ngo.opentelemetry.io/otel/example/fib\n```\n\n----------------------------------------\n\nTITLE: Updating Test Fixtures for Procfs Library in Bash\nDESCRIPTION: Bash commands for removing existing test fixtures and regenerating them. This is part of the process for updating the test fixtures used in unit testing the procfs library.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/prometheus/procfs/README.md#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nrm -rf testdata/fixtures\nmake test\n```\n\n----------------------------------------\n\nTITLE: Default Fields Usage Example\nDESCRIPTION: Demonstrates how to set up default fields that will be included in all log entries for a given context.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/sirupsen/logrus/README.md#2025-04-10_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nrequestLogger := log.WithFields(log.Fields{\"request_id\": request_id, \"user_ip\": user_ip})\nrequestLogger.Info(\"something happened on that request\") # will log request_id and user_ip\nrequestLogger.Warn(\"something not great happened\")\n```\n\n----------------------------------------\n\nTITLE: Defining ReleasePool Function Signature for IPAM Driver in Go\nDESCRIPTION: Function signature for releasing a previously registered address pool. It accepts a poolID parameter and returns an error if the operation fails.\nSOURCE: https://github.com/moby/moby/blob/master/libnetwork/docs/ipam.md#2025-04-10_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nReleasePool(poolID string) error\n```\n\n----------------------------------------\n\nTITLE: Using strings.Cut() for Better Performance\nDESCRIPTION: Code improvement that replaces string.SplitN() with strings.Cut() for better readability and memory usage.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-10_snippet_16\n\nLANGUAGE: go\nCODE:\n```\nstrings.Cut() // replacing strings.SplitN()\n```\n\n----------------------------------------\n\nTITLE: Configuring Span Limits with Environment Variables in Go\nDESCRIPTION: Code snippet showing the environment variables supported for configuring span limits in the OpenTelemetry Go SDK. These variables control attribute counts, event counts, link counts, and value length limits.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-10_snippet_27\n\nLANGUAGE: Go\nCODE:\n```\nOTEL_SPAN_ATTRIBUTE_VALUE_LENGTH_LIMIT\nOTEL_SPAN_ATTRIBUTE_COUNT_LIMIT\nOTEL_SPAN_EVENT_COUNT_LIMIT\nOTEL_EVENT_ATTRIBUTE_COUNT_LIMIT\nOTEL_SPAN_LINK_COUNT_LIMIT\nOTEL_LINK_ATTRIBUTE_COUNT_LIMIT\n```\n\n----------------------------------------\n\nTITLE: New Go Package Import Example\nDESCRIPTION: Example showing import path for semantic conventions package.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-10_snippet_29\n\nLANGUAGE: go\nCODE:\n```\n\"go.opentelemetry.io/otel/semconv/v1.7.0\"\n```\n\n----------------------------------------\n\nTITLE: Including Dockerfile Syntax File in User's Nano Configuration\nDESCRIPTION: Configuration line to add to ~/.nanorc to enable Dockerfile syntax highlighting for a single user. This tells Nano where to find the custom syntax definition file.\nSOURCE: https://github.com/moby/moby/blob/master/contrib/syntax/nano/README.md#2025-04-10_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n## Dockerfile files\ninclude \"~/.nano/syntax/Dockerfile.nanorc\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Logrus Hooks in Go\nDESCRIPTION: This snippet demonstrates how to set up Logrus hooks for Airbrake error reporting and syslog logging. It shows the import of necessary packages and the initialization of hooks in the init function.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/sirupsen/logrus/README.md#2025-04-10_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nimport (\n  log \"github.com/sirupsen/logrus\"\n  \"gopkg.in/gemnasium/logrus-airbrake-hook.v2\" // the package is named \"airbrake\"\n  logrus_syslog \"github.com/sirupsen/logrus/hooks/syslog\"\n  \"log/syslog\"\n)\n\nfunc init() {\n\n  // Use the Airbrake hook to report errors that have Error severity or above to\n  // an exception tracker. You can create custom hooks, see the Hooks section.\n  log.AddHook(airbrake.NewHook(123, \"xyz\", \"production\"))\n\n  hook, err := logrus_syslog.NewSyslogHook(\"udp\", \"localhost:514\", syslog.LOG_INFO, \"\")\n  if err != nil {\n    log.Error(\"Unable to connect to local syslog daemon\")\n  } else {\n    log.AddHook(hook)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding AddLink Support to OpenCensus Bridge\nDESCRIPTION: Adds support for AddLink functionality to the OpenCensus bridge.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-10_snippet_10\n\nLANGUAGE: Go\nCODE:\n```\nSupport for AddLink to go.opentelemetry.io/otel/bridge/opencensus\n```\n\n----------------------------------------\n\nTITLE: Defining Stats Aggregations\nDESCRIPTION: Examples of creating different types of aggregations (Distribution, Count, Sum) for OpenCensus views\nSOURCE: https://github.com/moby/moby/blob/master/vendor/go.opencensus.io/README.md#2025-04-10_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ndistAgg := view.Distribution(1<<32, 2<<32, 3<<32)\ncountAgg := view.Count()\nsumAgg := view.Sum()\n```\n\n----------------------------------------\n\nTITLE: Global MeterProvider Support\nDESCRIPTION: Added support for global MeterProvider with Meter, GetMeterProvider, and SetMeterProvider functions.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-10_snippet_18\n\nLANGUAGE: go\nCODE:\n```\nMeter() // Get metric.Meter from global provider\nGetMeterProvider() // Get global metric.MeterProvider\nSetMeterProvider() // Set global metric.MeterProvider\n```\n\n----------------------------------------\n\nTITLE: MapCarrier Type Usage\nDESCRIPTION: Example showing the type definition for MapCarrier used for propagation.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-10_snippet_30\n\nLANGUAGE: go\nCODE:\n```\nmap[string]string\n```\n\n----------------------------------------\n\nTITLE: Implementing Writer Methods in Go\nDESCRIPTION: Various methods for the Writer struct, including buffer operations, writing, and flushing.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/philhofer/fwd/README.md#2025-04-10_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nfunc (w *Writer) BufferSize() int\n\nfunc (w *Writer) Buffered() int\n\nfunc (w *Writer) Flush() error\n\nfunc (w *Writer) Next(n int) ([]byte, error)\n\nfunc (w *Writer) ReadFrom(r io.Reader) (int64, error)\n\nfunc (w *Writer) Write(p []byte) (int, error)\n\nfunc (w *Writer) WriteByte(b byte) error\n\nfunc (w *Writer) WriteString(s string) (int, error)\n```\n\n----------------------------------------\n\nTITLE: Markdown Package Header with Badge\nDESCRIPTION: Markdown header with package name and PkgGoDev documentation badge link\nSOURCE: https://github.com/moby/moby/blob/master/vendor/go.opentelemetry.io/otel/metric/embedded/README.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Metric Embedded\n\n[![PkgGoDev](https://pkg.go.dev/badge/go.opentelemetry.io/otel/metric/embedded)](https://pkg.go.dev/go.opentelemetry.io/otel/metric/embedded)\n```\n\n----------------------------------------\n\nTITLE: VSCode Linting Configuration\nDESCRIPTION: JSON configuration for enabling golangci-lint in VSCode workspace settings.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/Microsoft/hcsshim/README.md#2025-04-10_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"go.lintTool\": \"golangci-lint\",\n    \"go.lintOnSave\": \"package\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Pushing a Feature Branch\nDESCRIPTION: This set of commands demonstrates how to create a new feature branch, make changes, commit them, and push the branch to the user's fork. This is the typical workflow for submitting a new feature or bug fix.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/go.opencensus.io/CONTRIBUTING.md#2025-04-10_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ git checkout -b feature\n# edit files\n$ git commit\n$ git push fork feature\n```\n\n----------------------------------------\n\nTITLE: Changelog Section Headers\nDESCRIPTION: Standard section headers used to categorize different types of changes in the changelog.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-10_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### Added\n### Changed\n### Deprecated\n### Fixed\n### Removed\n```\n\n----------------------------------------\n\nTITLE: Updating DroppedAttributeCount Behavior in Go OpenTelemetry\nDESCRIPTION: Changes the DroppedAttributeCount field to only represent attributes dropped for the span itself.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-10_snippet_38\n\nLANGUAGE: Go\nCODE:\n```\nThe `DroppedAttributeCount` field of the `Span` in the `go.opentelemetry.io/otel` package now only represents the number of attributes dropped for the span itself.\nIt no longer is a conglomerate of itself, events, and link attributes that have been dropped.\n```\n\n----------------------------------------\n\nTITLE: Sample CORS Request Response\nDESCRIPTION: Example of the response output from a curl request to a CORS-enabled endpoint, showing the headers and response body.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/gorilla/mux/README.md#2025-04-10_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\n*   Trying ::1...\n* TCP_NODELAY set\n* Connected to localhost (::1) port 8080 (#0)\n> GET /foo HTTP/1.1\n> Host: localhost:8080\n> User-Agent: curl/7.59.0\n> Accept: */*\n> \n< HTTP/1.1 200 OK\n< Access-Control-Allow-Methods: GET,PUT,PATCH,OPTIONS\n< Access-Control-Allow-Origin: *\n< Date: Fri, 28 Jun 2019 20:13:30 GMT\n< Content-Length: 3\n< Content-Type: text/plain; charset=utf-8\n< \n* Connection #0 to host localhost left intact\nfoo\n```\n\n----------------------------------------\n\nTITLE: Installing Codec Library in Go\nDESCRIPTION: Command to install the Codec library using Go's package manager.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/hashicorp/go-msgpack/codec/README.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/ugorji/go/codec\n```\n\n----------------------------------------\n\nTITLE: Creating Docker Network and Running Container\nDESCRIPTION: Commands to create a custom Docker network and run a container with port mapping on a loopback address. This sets up the environment for the subsequent iptables rules.\nSOURCE: https://github.com/moby/moby/blob/master/integration/network/bridge/iptablesdoc/generated/usernet-portmap-lo.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker network create \\\n  -o com.docker.network.bridge.name=bridge1 \\\n  --subnet 192.0.2.0/24 --gateway 192.0.2.1 bridge1\ndocker run --network bridge1 -p 127.0.0.1:8080:80 --name c1 busybox\n```\n\n----------------------------------------\n\nTITLE: Enabling gRPC-Go Logging\nDESCRIPTION: Shows how to enable logging in gRPC-Go by setting environment variables. These commands turn on verbose logging to help with debugging connection issues.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/google.golang.org/grpc/README.md#2025-04-10_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ export GRPC_GO_LOG_VERBOSITY_LEVEL=99\n$ export GRPC_GO_LOG_SEVERITY_LEVEL=info\n```\n\n----------------------------------------\n\nTITLE: Adding WithClock Option to Zap\nDESCRIPTION: Adds zap.WithClock option to control the source of time via the new zapcore.Clock interface.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/go.uber.org/zap/CHANGELOG.md#2025-04-10_snippet_6\n\nLANGUAGE: Markdown\nCODE:\n```\n[#897][]: Add `zap.WithClock` option to control the source of time via the new `zapcore.Clock` interface.\n```\n\n----------------------------------------\n\nTITLE: Adding Cancelable Context to DNS Lookup in Compute Metadata\nDESCRIPTION: Update to the compute/metadata package that passes a cancelable context to DNS lookups, allowing for timeouts and cancellation during metadata operations.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/cloud.google.com/go/CHANGES.md#2025-04-10_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n- compute/metadata: \n  - Pass cancelable context to DNS lookup.\n```\n\n----------------------------------------\n\nTITLE: Defining HugeTlbStat Message Type in Protocol Buffers\nDESCRIPTION: Defines the HugeTlbStat message type with fields for current usage, maximum usage, and page size of HugeTLB (Huge Translation Lookaside Buffer) memory. This structure represents statistics for huge page allocations.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/containerd/cgroups/v3/cgroup2/stats/metrics.pb.txt#2025-04-10_snippet_5\n\nLANGUAGE: Protocol Buffers\nCODE:\n```\nmessage_type {\n  name: \"HugeTlbStat\"\n  field {\n    name: \"current\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_UINT64\n    json_name: \"current\"\n  }\n  field {\n    name: \"max\"\n    number: 2\n    label: LABEL_OPTIONAL\n    type: TYPE_UINT64\n    json_name: \"max\"\n  }\n  field {\n    name: \"pagesize\"\n    number: 3\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"pagesize\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Network Namespaces with Go\nDESCRIPTION: This example demonstrates how to use the netns package to create, switch between, and manage network namespaces in Go. It shows how to lock the OS thread, create a new namespace, list network interfaces, and switch back to the original namespace.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/vishvananda/netns/README.md#2025-04-10_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"fmt\"\n    \"net\"\n    \"runtime\"\n\n    \"github.com/vishvananda/netns\"\n)\n\nfunc main() {\n    // Lock the OS Thread so we don't accidentally switch namespaces\n    runtime.LockOSThread()\n    defer runtime.UnlockOSThread()\n\n    // Save the current network namespace\n    origns, _ := netns.Get()\n    defer origns.Close()\n\n    // Create a new network namespace\n    newns, _ := netns.New()\n    defer newns.Close()\n\n    // Do something with the network namespace\n    ifaces, _ := net.Interfaces()\n    fmt.Printf(\"Interfaces: %v\\n\", ifaces)\n\n    // Switch back to the original namespace\n    netns.Set(origns)\n}\n```\n\n----------------------------------------\n\nTITLE: Adding and Committing Changes\nDESCRIPTION: Commands to stage, commit, and push changes to the repository\nSOURCE: https://github.com/moby/moby/blob/master/docs/contributing/set-up-git.md#2025-04-10_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ touch TEST.md\n$ git status\n$ git add TEST.md\n$ git commit -s -m \"Making a dry run test.\"\n$ git push --set-upstream origin dry-run-test\n```\n\n----------------------------------------\n\nTITLE: Running race detection tests in gRPC-Go project\nDESCRIPTION: Command to run all tests with race detection enabled, using different CPU configurations and a timeout limit. This helps catch concurrency issues in the code.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/google.golang.org/grpc/CONTRIBUTING.md#2025-04-10_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngo test -race -cpu 1,4 -timeout 7m ./...\n```\n\n----------------------------------------\n\nTITLE: Adding BufferedWriteSyncer to Zap Core\nDESCRIPTION: Introduces zapcore.BufferedWriteSyncer, a new WriteSyncer that buffers messages in-memory and flushes them periodically.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/go.uber.org/zap/CHANGELOG.md#2025-04-10_snippet_4\n\nLANGUAGE: Markdown\nCODE:\n```\n[#961][]: Add `zapcore.BufferedWriteSyncer`, a new `WriteSyncer` that buffers messages in-memory and flushes them periodically.\n```\n\n----------------------------------------\n\nTITLE: Git Shortlog Example from v2.1.1\nDESCRIPTION: Example of a git shortlog entry showing commit history and author information for version 2.1.1\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/mistifyio/go-zfs/v3/CHANGELOG.md#2025-04-10_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n    Alexey Guskov (1):\n      zfs command uses different order of arguments on freebsd\n```\n\n----------------------------------------\n\nTITLE: Defining RdmaEntry Message Type in Protocol Buffers\nDESCRIPTION: Defines the RdmaEntry message type with fields for device, HCA handles, and HCA objects. This structure represents a single RDMA entry.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/containerd/cgroups/v3/cgroup2/stats/metrics.pb.txt#2025-04-10_snippet_2\n\nLANGUAGE: Protocol Buffers\nCODE:\n```\nmessage_type {\n  name: \"RdmaEntry\"\n  field {\n    name: \"device\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"device\"\n  }\n  field {\n    name: \"hca_handles\"\n    number: 2\n    label: LABEL_OPTIONAL\n    type: TYPE_UINT32\n    json_name: \"hcaHandles\"\n  }\n  field {\n    name: \"hca_objects\"\n    number: 3\n    label: LABEL_OPTIONAL\n    type: TYPE_UINT32\n    json_name: \"hcaObjects\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Shared Configuration with Multiple Option Types in Go\nDESCRIPTION: Demonstrates how to handle configuration that is shared between different types (Dog and Bird) with specific and common options using interface composition.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#2025-04-10_snippet_13\n\nLANGUAGE: go\nCODE:\n```\n// config holds options for all animals.\ntype config struct {\n\tWeight      float64\n\tColor       string\n\tMaxAltitude float64\n}\n\n// DogOption apply Dog specific options.\ntype DogOption interface {\n\tapplyDog(config) config\n}\n\n// BirdOption apply Bird specific options.\ntype BirdOption interface {\n\tapplyBird(config) config\n}\n\n// Option apply options for all animals.\ntype Option interface {\n\tBirdOption\n\tDogOption\n}\n\ntype weightOption float64\n\nfunc (o weightOption) applyDog(c config) config {\n\tc.Weight = float64(o)\n\treturn c\n}\n\nfunc (o weightOption) applyBird(c config) config {\n\tc.Weight = float64(o)\n\treturn c\n}\n\nfunc WithWeight(w float64) Option { return weightOption(w) }\n\ntype furColorOption string\n\nfunc (o furColorOption) applyDog(c config) config {\n\tc.Color = string(o)\n\treturn c\n}\n\nfunc WithFurColor(c string) DogOption { return furColorOption(c) }\n\ntype maxAltitudeOption float64\n\nfunc (o maxAltitudeOption) applyBird(c config) config {\n\tc.MaxAltitude = float64(o)\n\treturn c\n}\n\nfunc WithMaxAltitude(a float64) BirdOption { return maxAltitudeOption(a) }\n\nfunc NewDog(name string, o ...DogOption) Dog    {…}\nfunc NewBird(name string, o ...BirdOption) Bird {…}\n```\n\n----------------------------------------\n\nTITLE: Displaying Final Stable Release for All Modules\nDESCRIPTION: Lists the version numbers for the final stable release of all modules, including the newly stabilized metric modules.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/go.opentelemetry.io/otel/VERSIONING.md#2025-04-10_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n* `otel`: `v1.1.0`\n* `otel/trace`: `v1.1.0`\n* `otel/metric`: `v1.1.0`\n* `otel/baggage`: `v1.1.0`\n* `otel/sdk/trace`: `v1.1.0`\n* `otel/sdk/metric`: `v1.1.0`\n```\n\n----------------------------------------\n\nTITLE: Managing Go Module Dependencies for Prometheus\nDESCRIPTION: These commands tidy up the go.mod and go.sum files, and copy new or updated dependencies to the vendor directory in the Prometheus project.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/prometheus/procfs/CONTRIBUTING.md#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# The GO111MODULE variable can be omitted when the code isn't located in GOPATH.\nGO111MODULE=on go mod tidy\n\nGO111MODULE=on go mod vendor\n```\n\n----------------------------------------\n\nTITLE: Updating Storage Bucket Creation\nDESCRIPTION: Changes to bucket creation pattern, moving from AdminClient to methods on Client.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/cloud.google.com/go/CHANGES.md#2025-04-10_snippet_27\n\nLANGUAGE: go\nCODE:\n```\nadminClient.CreateBucket(ctx, bucketName, attrs)\n```\n\nLANGUAGE: go\nCODE:\n```\nclient.Bucket(bucketName).Create(ctx, projectID, attrs)\n```\n\n----------------------------------------\n\nTITLE: Documenting Changelog Entries in Markdown\nDESCRIPTION: This code snippet shows the structure of changelog entries using Markdown formatting. It includes version numbers, dates, feature additions, and bug fixes.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/google/uuid/CHANGELOG.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## [1.6.0](https://github.com/google/uuid/compare/v1.5.0...v1.6.0) (2024-01-16)\n\n\n### Features\n\n* add Max UUID constant ([#149](https://github.com/google/uuid/issues/149)) ([c58770e](https://github.com/google/uuid/commit/c58770eb495f55fe2ced6284f93c5158a62e53e3))\n\n\n### Bug Fixes\n\n* fix typo in version 7 uuid documentation ([#153](https://github.com/google/uuid/issues/153)) ([016b199](https://github.com/google/uuid/commit/016b199544692f745ffc8867b914129ecb47ef06))\n* Monotonicity in UUIDv7 ([#150](https://github.com/google/uuid/issues/150)) ([a2b2b32](https://github.com/google/uuid/commit/a2b2b32373ff0b1a312b7fdf6d38a977099698a6))\n```\n\n----------------------------------------\n\nTITLE: Navigating to Home Directory in Bash\nDESCRIPTION: Command to change to user's home directory\nSOURCE: https://github.com/moby/moby/blob/master/docs/contributing/set-up-git.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cd ~\n```\n\n----------------------------------------\n\nTITLE: Defining an Option Interface for Configuration in Go\nDESCRIPTION: Creates an Option interface with an unexported apply method that returns a modified config. This pattern makes the interface sealed to prevent external implementation.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#2025-04-10_snippet_7\n\nLANGUAGE: go\nCODE:\n```\ntype Option interface {\n\tapply(config) config\n}\n```\n\n----------------------------------------\n\nTITLE: Updating span status setting behavior in Go SDK\nDESCRIPTION: Updates the span.SetStatus method to make calls that would lower the status no-ops.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-10_snippet_26\n\nLANGUAGE: Go\nCODE:\n```\n`span.SetStatus` has been updated such that calls that lower the status are now no-ops.\n```\n\n----------------------------------------\n\nTITLE: Error Cause Type Switch Pattern in Go\nDESCRIPTION: Demonstrates how to use errors.Cause with type assertion to handle specific error types while maintaining the ability to handle unknown errors.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/pkg/errors/README.md#2025-04-10_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nswitch err := errors.Cause(err).(type) {\ncase *MyError:\n        // handle specifically\ndefault:\n        // unknown error\n}\n```\n\n----------------------------------------\n\nTITLE: Updating PubSub Push Configuration in Go\nDESCRIPTION: Changes the method for modifying a subscription's push configuration from ModifyPushConfig to the new Update method with SubscriptionConfigToUpdate struct.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/cloud.google.com/go/CHANGES.md#2025-04-10_snippet_20\n\nLANGUAGE: go\nCODE:\n```\nsub.ModifyPushConfig(ctx, pubsub.PushConfig{Endpoint: \"https://example.com/push\"})\n```\n\nLANGUAGE: go\nCODE:\n```\nsub.Update(ctx, pubsub.SubscriptionConfigToUpdate{\n    PushConfig: &pubsub.PushConfig{Endpoint: \"https://example.com/push\"},\n})\n```\n\n----------------------------------------\n\nTITLE: Adding ParseAtomicLevel Function in Zap\nDESCRIPTION: Adds a new function zap.ParseAtomicLevel to parse an AtomicLevel from a string.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/go.uber.org/zap/CHANGELOG.md#2025-04-10_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n[#1048][]: Add `zap.ParseAtomicLevel` to parse an `AtomicLevel` from a string.\n```\n\n----------------------------------------\n\nTITLE: Installing Cobra Library Using Go Get\nDESCRIPTION: Command to install the latest version of the Cobra library using Go get package manager.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/spf13/cobra/README.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get -u github.com/spf13/cobra@latest\n```\n\n----------------------------------------\n\nTITLE: Creating and Pushing a Feature Branch Workflow\nDESCRIPTION: Complete Git workflow for creating a new branch, making changes, running checks, and pushing to your fork. This is the recommended process for submitting changes to the project.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#2025-04-10_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ngit checkout -b <YOUR_BRANCH_NAME>\n# edit files\n# update changelog\nmake precommit\ngit add -p\ngit commit\ngit push <YOUR_FORK> <YOUR_BRANCH_NAME>\n```\n\n----------------------------------------\n\nTITLE: Developer Certificate of Origin Text in Markdown\nDESCRIPTION: The full text of the Developer Certificate of Origin (DCO) version 1.1 that contributors must certify to when making contributions to the project. This certifies they have the right to submit the code under the open source license.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/distribution/reference/CONTRIBUTING.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```\nDeveloper Certificate of Origin\nVersion 1.1\n\nCopyright (C) 2004, 2006 The Linux Foundation and its contributors.\n660 York Street, Suite 102,\nSan Francisco, CA 94110 USA\n\nEveryone is permitted to copy and distribute verbatim copies of this\nlicense document, but changing it is not allowed.\n\nDeveloper's Certificate of Origin 1.1\n\nBy making a contribution to this project, I certify that:\n\n(a) The contribution was created in whole or in part by me and I\n    have the right to submit it under the open source license\n    indicated in the file; or\n\n(b) The contribution is based upon previous work that, to the best\n    of my knowledge, is covered under an appropriate open source\n    license and I have the right under that license to submit that\n    work with modifications, whether created in whole or in part\n    by me, under the same open source license (unless I am\n    permitted to submit under a different license), as indicated\n    in the file; or\n\n(c) The contribution was provided directly to me by some other\n    person who certified (a), (b) or (c) and I have not modified\n    it.\n\n(d) I understand and agree that this project and the contribution\n    are public and that a record of the contribution (including all\n    personal information I submit with it, including my sign-off) is\n    maintained indefinitely and may be redistributed consistent with\n    this project or the open source license(s) involved.\n```\n```\n\n----------------------------------------\n\nTITLE: Proposing a Motion Subject Template in Markdown\nDESCRIPTION: This snippet demonstrates the recommended subject template for proposing a motion in an OCI project. It includes the project name, vote indicator, motion description, and voting window closure.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/opencontainers/cgroups/GOVERNANCE.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n> [{project} VOTE]: {motion description} (closes {end of voting window})\n```\n\n----------------------------------------\n\nTITLE: Disabling OpenCensus Telemetry in Go Profiler Package\nDESCRIPTION: Describes a change to the profiler package where OpenCensus Telemetry is disabled by default for profiler requests, with instructions on how to re-enable it through configuration.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/cloud.google.com/go/CHANGES.md#2025-04-10_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n- profiler:\n  - Disable OpenCensus Telemetry for requests made by the profiler package by default. You can re-enable it using `profiler.Config.EnableOCTelemetry`.\n```\n\n----------------------------------------\n\nTITLE: Adding ParseLevel Function in Zap Core\nDESCRIPTION: Adds a new function zapcore.ParseLevel to parse a Level from a string.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/go.uber.org/zap/CHANGELOG.md#2025-04-10_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n[#1047][]: Add `zapcore.ParseLevel` to parse a `Level` from a string.\n```\n\n----------------------------------------\n\nTITLE: Installing Cobra CLI Generator\nDESCRIPTION: Command to install the cobra-cli generator tool for bootstrapping Cobra applications.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/spf13/cobra/README.md#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngo install github.com/spf13/cobra-cli@latest\n```\n\n----------------------------------------\n\nTITLE: Implementing Boolean Option with Default True in Go\nDESCRIPTION: Creates an option implementation for boolean values defaulting to true, with a WithoutOption function that disables the option.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#2025-04-10_snippet_9\n\nLANGUAGE: go\nCODE:\n```\ntype defaultTrueOption bool\n\nfunc (o defaultTrueOption) apply(c config) config {\n\tc.Bool = bool(o)\n    return c\n}\n\n// WithoutOption sets a T to have Bool option excluded.\nfunc WithoutOption() Option {\n\treturn defaultTrueOption(false)\n}\n```\n\n----------------------------------------\n\nTITLE: IPTables NAT4 Setup Commands\nDESCRIPTION: Shows the actual iptables commands used to set up the nat table rules for IPv4 network address translation.\nSOURCE: https://github.com/moby/moby/blob/master/integration/network/bridge/iptablesdoc/templates/new-daemon.md#2025-04-10_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n{{index . \"SNat4\"}}\n```\n\n----------------------------------------\n\nTITLE: Example Motion Proposal Subject in Markdown\nDESCRIPTION: This snippet provides an example of a motion proposal subject line, specifically for tagging a release candidate in the runtime-spec project.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/opencontainers/cgroups/GOVERNANCE.md#2025-04-10_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n> [runtime-spec VOTE]: Tag 0647920 as 1.0.0-rc (closes 2016-06-03 20:00 UTC)\n```\n\n----------------------------------------\n\nTITLE: Issue Reference Format\nDESCRIPTION: Examples of GitHub issue reference links used to track related issues and pull requests.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/cloud.google.com/go/CHANGES.md#2025-04-10_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n[#4648](https://www.github.com/googleapis/google-cloud-go/issues/4648)\n```\n\n----------------------------------------\n\nTITLE: Updated Token Struct Definition in Go\nDESCRIPTION: New Token struct definition showing the changed Signature field type from string to []byte and other structural components of a JWT token.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/golang-jwt/jwt/v5/MIGRATION_GUIDE.md#2025-04-10_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ntype Token struct {\n\tRaw       string                 // Raw contains the raw token\n\tMethod    SigningMethod          // Method is the signing method used or to be used\n\tHeader    map[string]interface{} // Header is the first segment of the token in decoded form\n\tClaims    Claims                 // Claims is the second segment of the token in decoded form\n\tSignature []byte                 // Signature is the third segment of the token in decoded form\n\tValid     bool                   // Valid specifies if the token is valid\n}\n```\n\n----------------------------------------\n\nTITLE: Running Tests for Prometheus Project in Go\nDESCRIPTION: This command runs all tests for the Prometheus project. It's recommended to run this before committing and pushing changes.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/prometheus/procfs/CONTRIBUTING.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake test         # Make sure all the tests pass before you commit and push :)\n```\n\n----------------------------------------\n\nTITLE: Using Tags with Profiler\nDESCRIPTION: Example showing how to apply OpenCensus tags as profiler labels for Go 1.9+ applications\nSOURCE: https://github.com/moby/moby/blob/master/vendor/go.opencensus.io/README.md#2025-04-10_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nctx, err = tag.New(ctx,\n\ttag.Insert(osKey, \"macOS-10.12.5\"),\n\ttag.Insert(userIDKey, \"fff0989878\"),\n)\nif err != nil {\n\tlog.Fatal(err)\n}\ntag.Do(ctx, func(ctx context.Context) {\n\t// Do work.\n\t// When profiling is on, samples will be\n\t// recorded with the key/values from the tag map.\n})\n```\n\n----------------------------------------\n\nTITLE: Git Commit Sign-off for Docker Contributions\nDESCRIPTION: Example of the signed-off-by line that must be added to every git commit message when contributing to Docker projects. This sign-off certifies that the contributor has read and agreed to the Developer Certificate of Origin.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/docker/go-events/CONTRIBUTING.md#2025-04-10_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nSigned-off-by: Joe Smith <joe.smith@email.com>\n```\n\n----------------------------------------\n\nTITLE: Defining ttrpc Request Flags in Markdown Table\nDESCRIPTION: Presents a table of ttrpc request flags, including their numeric values, names, and descriptions. These flags are used to indicate the state of the request stream.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/containerd/ttrpc/PROTOCOL.md#2025-04-10_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| Flag | Name            | Description                                      |\n|------|-----------------|--------------------------------------------------|\n| 0x01 | `remote closed` | Non-unary, but no more data expected from remote |\n| 0x02 | `remote open`   | Non-unary, remote is still sending data          |\n```\n\n----------------------------------------\n\nTITLE: Bug Fix - Prevent Library Panic\nDESCRIPTION: Fix to prevent panic in library code, addressing issue #1862.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/cloud.google.com/go/logging/CHANGES.md#2025-04-10_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n* **logging:** do not panic in library code ([#3076](https://www.github.com/googleapis/google-cloud-go/issues/3076)) ([529be97](https://www.github.com/googleapis/google-cloud-go/commit/529be977f766443f49cb8914e17ba07c93841e84)), closes [#1862](https://www.github.com/googleapis/google-cloud-go/issues/1862)\n```\n\n----------------------------------------\n\nTITLE: Additional Iptables Rules for Loopback Port Mapping\nDESCRIPTION: Extra iptables rules added to the raw-PREROUTING chain to prevent remote access to ports mapped on the loopback address. These rules enhance security by dropping traffic not originating from the loopback interface.\nSOURCE: https://github.com/moby/moby/blob/master/integration/network/bridge/iptablesdoc/generated/usernet-portmap-lo.md#2025-04-10_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n-P PREROUTING ACCEPT\n-P OUTPUT ACCEPT\n-A PREROUTING -d 127.0.0.1/32 ! -i lo -p tcp -m tcp --dport 8080 -j DROP\n-A PREROUTING -d 192.0.2.2/32 ! -i bridge1 -p tcp -m tcp --dport 80 -j DROP\n```\n\n----------------------------------------\n\nTITLE: Reading /sys Filesystem in Go for Prometheus\nDESCRIPTION: This code snippet shows how to read a small file from the /sys filesystem in Go, using the util.SysReadFile function which is optimized for reading single values.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/prometheus/procfs/CONTRIBUTING.md#2025-04-10_snippet_4\n\nLANGUAGE: go\nCODE:\n```\ndata, err := util.SysReadFile(\"/sys/class/power_supply/BAT0/capacity\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Git User Information for Signed Commits\nDESCRIPTION: Commands to set up Git configuration with your name and email, which is required for signing commits when contributing to the Docker registry.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/docker/distribution/CONTRIBUTING.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit config user.name \"Real Name\" && git config user.email mail@example.com\"\n```\n\n----------------------------------------\n\nTITLE: Defining Protocol Buffer File Options\nDESCRIPTION: Defines file-level options for Protocol Buffer files, specifying language-specific settings for code generation.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/moby/swarmkit/v2/api/api.pb.txt#2025-04-10_snippet_19\n\nLANGUAGE: protobuf\nCODE:\n```\noptions {\n    java_package: \"com.google.protobuf\"\n    java_outer_classname: \"DescriptorProtos\"\n    optimize_for: SPEED\n    go_package: \"github.com/golang/protobuf/protoc-gen-go/descriptor;descriptor\"\n    cc_enable_arenas: true\n    objc_class_prefix: \"GPB\"\n    csharp_namespace: \"Google.Protobuf.Reflection\"\n  }\n```\n\n----------------------------------------\n\nTITLE: Updating Version Constant in Go\nDESCRIPTION: This snippet shows how to update the version constant in the internal/version/version.go file. The Repo constant should be set to the current date in YYYYMMDD format.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/cloud.google.com/go/RELEASING.md#2025-04-10_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nconst Repo = \"YYYYMMDD\"\n```\n\n----------------------------------------\n\nTITLE: Markdown Release History Document\nDESCRIPTION: Chronological version history for the Moby project documenting features, bug fixes and other changes across releases from version 1.16.0 down to 1.6.0.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/Azure/azure-sdk-for-go/sdk/azcore/CHANGELOG.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Release History\n\n## 1.16.0 (2024-10-17)\n\n### Features Added\n\n* Added field `Kind` to `runtime.StartSpanOptions` to allow a kind to be set when starting a span.\n\n### Bugs Fixed\n\n* `BearerTokenPolicy` now rewinds request bodies before retrying\n\n## 1.15.0 (2024-10-14)\n\n### Features Added\n\n* `BearerTokenPolicy` handles CAE claims challenges\n\n### Bugs Fixed\n\n* Omit the `ResponseError.RawResponse` field from JSON marshaling so instances can be marshaled.\n* Fixed an integer overflow in the retry policy.\n\n### Other Changes\n\n* Update dependencies.\n```\n\n----------------------------------------\n\nTITLE: Iptables Raw Table Configuration\nDESCRIPTION: The raw table configuration for Docker networking, containing a rule to block direct access to container ports from outside the container's network for security purposes.\nSOURCE: https://github.com/moby/moby/blob/master/integration/network/bridge/iptablesdoc/generated/usernet-portmap.md#2025-04-10_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nChain PREROUTING (policy ACCEPT 0 packets, 0 bytes)\nnum   pkts bytes target     prot opt in     out     source               destination         \n1        0     0 DROP       6    --  !bridge1 *       0.0.0.0/0            192.0.2.2            tcp dpt:80\n\nChain OUTPUT (policy ACCEPT 0 packets, 0 bytes)\nnum   pkts bytes target     prot opt in     out     source               destination         \n```\n\n----------------------------------------\n\nTITLE: Running Code Formatting in Cobra Project\nDESCRIPTION: Command to run the make all target which ensures proper code formatting for the Cobra project.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/spf13/cobra/CONTRIBUTING.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake all\n```\n\n----------------------------------------\n\nTITLE: Installing Linting Dependency\nDESCRIPTION: Installs the golint tool required for the Makefile build process to perform code linting.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/docker/distribution/BUILDING.md#2025-04-10_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/golang/lint/golint\n```\n\n----------------------------------------\n\nTITLE: Example Go Emulator Host Configuration\nDESCRIPTION: Example showing how to configure Storage emulator host environment variable.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/cloud.google.com/go/CHANGES.md#2025-04-10_snippet_14\n\nLANGUAGE: go\nCODE:\n```\nSTORAGE_EMULATOR_HOST\n```\n\n----------------------------------------\n\nTITLE: Apache License 2.0 Boilerplate Notice\nDESCRIPTION: Standard copyright and license notice template to be included in source files. The template includes placeholders for year and copyright owner information that should be replaced when applying the license.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/aws/aws-sdk-go-v2/aws/protocol/eventstream/LICENSE.txt#2025-04-10_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nCopyright [yyyy] [name of copyright owner]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Breaking Change Release Note (v1.14.0)\nDESCRIPTION: Release note documenting minimum Go version requirement change to 1.19.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/aws/aws-sdk-go-v2/feature/ec2/imds/CHANGELOG.md#2025-04-10_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n# v1.14.0 (2023-10-31)\n\n* **Feature**: **BREAKING CHANGE**: Bump minimum go version to 1.19 per the revised [go version support policy](https://aws.amazon.com/blogs/developer/aws-sdk-for-go-aligns-with-go-release-policy-on-supported-runtimes/).\n* **Dependency Update**: Updated to the latest SDK module versions\n```\n\n----------------------------------------\n\nTITLE: Docker's NAT Table iptables Rules for Routed-Mode Network\nDESCRIPTION: The NAT table iptables commands for a Docker container on a routed-mode network. These rules handle network address translation for container traffic, particularly for published ports and internet access.\nSOURCE: https://github.com/moby/moby/blob/master/integration/network/bridge/iptablesdoc/generated/usernet-portmap-routed.md#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n-P PREROUTING ACCEPT\n-P INPUT ACCEPT\n-P OUTPUT ACCEPT\n-P POSTROUTING ACCEPT\n-N DOCKER\n-A PREROUTING -m addrtype --dst-type LOCAL -j DOCKER\n-A OUTPUT ! -d 127.0.0.0/8 -m addrtype --dst-type LOCAL -j DOCKER\n-A POSTROUTING -s 172.17.0.0/16 ! -o docker0 -j MASQUERADE\n-A DOCKER -i bridge1 -j RETURN\n-A DOCKER -i docker0 -j RETURN\n```\n\n----------------------------------------\n\nTITLE: Quick Contribution Workflow for Cobra\nDESCRIPTION: Step-by-step Git commands demonstrating the full contribution workflow for the Cobra project, from forking to creating a pull request.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/spf13/cobra/CONTRIBUTING.md#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/your_username/cobra && cd cobra\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b my-new-feature\n```\n\nLANGUAGE: bash\nCODE:\n```\nmake test\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit add .\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit commit -m 'Add some feature'\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit push origin my-new-feature\n```\n\n----------------------------------------\n\nTITLE: Creating a Feature Branch in go-zfs\nDESCRIPTION: This snippet shows how to create a new feature branch for working on a specific issue or feature in the go-zfs project.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/mistifyio/go-zfs/v3/CONTRIBUTING.md#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ git checkout -b <feature-branch-name>\n```\n\n----------------------------------------\n\nTITLE: Implementing Protected Interfaces in Go\nDESCRIPTION: Code snippet showing interfaces that are prevented from being implemented by end-users, part of the OpenTelemetry SDK's API controls.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-10_snippet_39\n\nLANGUAGE: go\nCODE:\n```\n\"otel/exporters/otlp/otlphttp\".Option\n\"otel/exporters/stdout\".Option\n\"otel/oteltest\".Option\n\"otel/trace\".TracerOption\n\"otel/trace\".SpanOption\n\"otel/trace\".EventOption\n\"otel/trace\".LifeCycleOption\n\"otel/trace\".InstrumentationOption\n\"otel/sdk/resource\".Option\n\"otel/sdk/trace\".ParentBasedSamplerOption\n\"otel/sdk/trace\".ReadOnlySpan\n\"otel/sdk/trace\".ReadWriteSpan\n```\n\n----------------------------------------\n\nTITLE: Defining Process Details Protocol Structure\nDESCRIPTION: Protocol buffer schema defining the ProcessDetails message type for container process information. Contains the exec ID field for process identification.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/containerd/containerd/api/types/runc/options/next.pb.txt#2025-04-10_snippet_2\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage ProcessDetails {\n  string exec_id = 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Docker API Authentication Example\nDESCRIPTION: Example of Docker API authentication configuration showing registry token support.\nSOURCE: https://github.com/moby/moby/blob/master/docs/api/version-history.md#2025-04-10_snippet_14\n\nLANGUAGE: markdown\nCODE:\n```\nAuthConfig now supports a `registrytoken` for token based authentication\n```\n\n----------------------------------------\n\nTITLE: Creating a Routed-Mode Network and Running a Container with Published Port in Docker\nDESCRIPTION: Commands to create a Docker network in routed gateway mode with a specific subnet and gateway, then running a container on this network with port 80 published to host port 8080.\nSOURCE: https://github.com/moby/moby/blob/master/integration/network/bridge/iptablesdoc/generated/usernet-portmap-routed.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker network create \\\n  -o com.docker.network.bridge.name=bridge1 \\\n  -o com.docker.network.bridge.gateway_mode_ipv4=routed \\\n  --subnet 192.0.2.0/24 --gateway 192.0.2.1 bridge1\ndocker run --network bridge1 -p 8080:80 --name c1 busybox\n```\n\n----------------------------------------\n\nTITLE: Creating a signed-off commit for go-struct-converter\nDESCRIPTION: This shell command shows how to create a commit with an automatic sign-off using the -s or --signoff flag.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/anchore/go-struct-converter/CONTRIBUTING.md#2025-04-10_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ git commit -s -m \"this is a commit message\"\n```\n\n----------------------------------------\n\nTITLE: Cloning and Setting Up go-zfs Repository\nDESCRIPTION: This snippet shows how to clone the go-zfs repository, navigate to the project directory, and add the upstream remote for synchronization.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/mistifyio/go-zfs/v3/CONTRIBUTING.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone git@github.com:<your-username>/go-zfs.git\n$ cd go-zfs\n$ git remote add upstream https://github.com/mistifyio/go-zfs.git\n```\n\n----------------------------------------\n\nTITLE: Testing Windows Binary Against Linux Daemon in Moby\nDESCRIPTION: These commands demonstrate how to set up the environment and run tests for a Windows binary against a Linux daemon in the Moby project.\nSOURCE: https://github.com/moby/moby/blob/master/docs/contributing/test.md#2025-04-10_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ export DOCKER_REMOTE_DAEMON=1\n$ export DOCKER_TEST_HOST=tcp://213.124.23.200:2376\n$ hack/make.sh binary test-integration\n```\n\n----------------------------------------\n\nTITLE: Defining Watch Service in Docker SwarmKit Protobuf\nDESCRIPTION: Defines the Watch service that allows clients to subscribe to object changes in Docker SwarmKit. It provides a Watch method that accepts a WatchRequest and streams WatchMessage responses.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/moby/swarmkit/v2/api/api.pb.txt#2025-04-10_snippet_137\n\nLANGUAGE: protobuf\nCODE:\n```\nservice {\n  name: \"Watch\"\n  method {\n    name: \"Watch\"\n    input_type: \".docker.swarmkit.v1.WatchRequest\"\n    output_type: \".docker.swarmkit.v1.WatchMessage\"\n    options {\n      73626345 {\n        1: \"swarm-manager\"\n      }\n    }\n    server_streaming: true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Cluster Volumes in Docker API\nDESCRIPTION: A new PUT /volumes{name} endpoint has been added to update cluster volumes (CNI). This functionality is only supported when the daemon is a Swarm manager.\nSOURCE: https://github.com/moby/moby/blob/master/docs/api/version-history.md#2025-04-10_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\n* Added a new `PUT /volumes{name}` endpoint to update cluster volumes (CNI).\n  Cluster volumes are only supported if the daemon is a Swarm manager.\n```\n\n----------------------------------------\n\nTITLE: IPTables Filter Table Configuration\nDESCRIPTION: The full filter table configuration showing chains and rules for the Docker network. This includes rules to disable inter-container communication on the bridge1 network while allowing incoming traffic to published ports.\nSOURCE: https://github.com/moby/moby/blob/master/integration/network/bridge/iptablesdoc/generated/usernet-portmap-noicc.md#2025-04-10_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nChain INPUT (policy ACCEPT 0 packets, 0 bytes)\nnum   pkts bytes target     prot opt in     out     source               destination         \n\nChain FORWARD (policy ACCEPT 0 packets, 0 bytes)\nnum   pkts bytes target     prot opt in     out     source               destination         \n1        0     0 DOCKER-USER  0    --  *      *       0.0.0.0/0            0.0.0.0/0           \n2        0     0 DOCKER-FORWARD  0    --  *      *       0.0.0.0/0            0.0.0.0/0           \n\nChain OUTPUT (policy ACCEPT 0 packets, 0 bytes)\nnum   pkts bytes target     prot opt in     out     source               destination         \n\nChain DOCKER (2 references)\nnum   pkts bytes target     prot opt in     out     source               destination         \n1        0     0 ACCEPT     6    --  !bridge1 bridge1  0.0.0.0/0            192.0.2.2            tcp dpt:80\n2        0     0 DROP       0    --  !docker0 docker0  0.0.0.0/0            0.0.0.0/0           \n3        0     0 DROP       0    --  !bridge1 bridge1  0.0.0.0/0            0.0.0.0/0           \n\nChain DOCKER-BRIDGE (1 references)\nnum   pkts bytes target     prot opt in     out     source               destination         \n1        0     0 DOCKER     0    --  *      docker0  0.0.0.0/0            0.0.0.0/0           \n2        0     0 DOCKER     0    --  *      bridge1  0.0.0.0/0            0.0.0.0/0           \n\nChain DOCKER-CT (1 references)\nnum   pkts bytes target     prot opt in     out     source               destination         \n1        0     0 ACCEPT     0    --  *      docker0  0.0.0.0/0            0.0.0.0/0            ctstate RELATED,ESTABLISHED\n2        0     0 ACCEPT     0    --  *      bridge1  0.0.0.0/0            0.0.0.0/0            ctstate RELATED,ESTABLISHED\n\nChain DOCKER-FORWARD (1 references)\nnum   pkts bytes target     prot opt in     out     source               destination         \n1        0     0 DOCKER-CT  0    --  *      *       0.0.0.0/0            0.0.0.0/0           \n2        0     0 DOCKER-ISOLATION-STAGE-1  0    --  *      *       0.0.0.0/0            0.0.0.0/0           \n3        0     0 DOCKER-BRIDGE  0    --  *      *       0.0.0.0/0            0.0.0.0/0           \n4        0     0 ACCEPT     0    --  docker0 *       0.0.0.0/0            0.0.0.0/0           \n5        0     0 DROP       0    --  bridge1 bridge1  0.0.0.0/0            0.0.0.0/0           \n6        0     0 ACCEPT     0    --  bridge1 !bridge1  0.0.0.0/0            0.0.0.0/0           \n\nChain DOCKER-ISOLATION-STAGE-1 (1 references)\nnum   pkts bytes target     prot opt in     out     source               destination         \n1        0     0 DOCKER-ISOLATION-STAGE-2  0    --  docker0 !docker0  0.0.0.0/0            0.0.0.0/0           \n2        0     0 DOCKER-ISOLATION-STAGE-2  0    --  bridge1 !bridge1  0.0.0.0/0            0.0.0.0/0           \n\nChain DOCKER-ISOLATION-STAGE-2 (2 references)\nnum   pkts bytes target     prot opt in     out     source               destination         \n1        0     0 DROP       0    --  *      bridge1  0.0.0.0/0            0.0.0.0/0           \n2        0     0 DROP       0    --  *      docker0  0.0.0.0/0            0.0.0.0/0           \n\nChain DOCKER-USER (1 references)\nnum   pkts bytes target     prot opt in     out     source               destination         \n1        0     0 RETURN     0    --  *      *       0.0.0.0/0            0.0.0.0/0           \n```\n\n----------------------------------------\n\nTITLE: ANSI Feature Builder Example\nDESCRIPTION: Example of using the builder pattern to combine multiple ANSI features for custom formatting\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/morikuni/aec/README.md#2025-04-10_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ncustom := aec.EmptyBuilder.Right(2).RGB8BitF(128, 255, 64).RedB().ANSI\ncustom.Apply(\"Hello World\")\n```\n\n----------------------------------------\n\nTITLE: Git Shortlog Example from v3.0.0\nDESCRIPTION: Example of a git shortlog entry showing commit history and author information for version 3.0.0\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/mistifyio/go-zfs/v3/CHANGELOG.md#2025-04-10_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n    Amit Krishnan (1):\n      Issue #39 and Issue #40 - Enable Solaris support for go-zfs Switch from zfs/zpool get to zfs/zpool list for better performance Signed-off-by: Amit Krishnan <krish.amit@gmail.com>\n```\n\n----------------------------------------\n\nTITLE: Importing Google Cloud Go Package\nDESCRIPTION: Basic import statement for the main Google Cloud Go package\nSOURCE: https://github.com/moby/moby/blob/master/vendor/cloud.google.com/go/README.md#2025-04-10_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport \"cloud.google.com/go\"\n```\n\n----------------------------------------\n\nTITLE: Defining LogMessage Structure in Protobuf\nDESCRIPTION: Defines the structure of a LogMessage in Protocol Buffers, including fields for context, timestamp, stream, data, and attributes.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/moby/swarmkit/v2/api/api.pb.txt#2025-04-10_snippet_107\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage_type {\n  name: \"LogMessage\"\n  field {\n    name: \"context\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".docker.swarmkit.v1.LogContext\"\n    options {\n      65001: 0\n    }\n    json_name: \"context\"\n  }\n  field {\n    name: \"timestamp\"\n    number: 2\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".google.protobuf.Timestamp\"\n    json_name: \"timestamp\"\n  }\n  field {\n    name: \"stream\"\n    number: 3\n    label: LABEL_OPTIONAL\n    type: TYPE_ENUM\n    type_name: \".docker.swarmkit.v1.LogStream\"\n    json_name: \"stream\"\n  }\n  field {\n    name: \"data\"\n    number: 4\n    label: LABEL_OPTIONAL\n    type: TYPE_BYTES\n    json_name: \"data\"\n  }\n  field {\n    name: \"attrs\"\n    number: 5\n    label: LABEL_REPEATED\n    type: TYPE_MESSAGE\n    type_name: \".docker.swarmkit.v1.LogAttr\"\n    options {\n      65001: 0\n    }\n    json_name: \"attrs\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying PkgGoDev Badge in Markdown\nDESCRIPTION: Markdown snippet that displays a PkgGoDev badge linking to the documentation for the go.opentelemetry.io/otel/trace/embedded package.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/go.opentelemetry.io/otel/trace/embedded/README.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![PkgGoDev](https://pkg.go.dev/badge/go.opentelemetry.io/otel/trace/embedded)](https://pkg.go.dev/go.opentelemetry.io/otel/trace/embedded)\n```\n\n----------------------------------------\n\nTITLE: Filter Table IPTables Rules\nDESCRIPTION: Complete filter table configuration showing Docker network isolation and forwarding rules\nSOURCE: https://github.com/moby/moby/blob/master/integration/network/bridge/iptablesdoc/generated/usernet-portmap-noproxy.md#2025-04-10_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n-P INPUT ACCEPT\n-P FORWARD ACCEPT\n-P OUTPUT ACCEPT\n-N DOCKER\n-N DOCKER-BRIDGE\n-N DOCKER-CT\n-N DOCKER-FORWARD\n-N DOCKER-ISOLATION-STAGE-1\n-N DOCKER-ISOLATION-STAGE-2\n-N DOCKER-USER\n-A FORWARD -j DOCKER-USER\n-A FORWARD -j DOCKER-FORWARD\n-A DOCKER -d 192.0.2.2/32 ! -i bridge1 -o bridge1 -p tcp -m tcp --dport 80 -j ACCEPT\n-A DOCKER ! -i docker0 -o docker0 -j DROP\n-A DOCKER ! -i bridge1 -o bridge1 -j DROP\n-A DOCKER-BRIDGE -o docker0 -j DOCKER\n-A DOCKER-BRIDGE -o bridge1 -j DOCKER\n-A DOCKER-CT -o docker0 -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT\n-A DOCKER-CT -o bridge1 -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT\n-A DOCKER-FORWARD -j DOCKER-CT\n-A DOCKER-FORWARD -j DOCKER-ISOLATION-STAGE-1\n-A DOCKER-FORWARD -j DOCKER-BRIDGE\n-A DOCKER-FORWARD -i docker0 -j ACCEPT\n-A DOCKER-FORWARD -i bridge1 -j ACCEPT\n-A DOCKER-ISOLATION-STAGE-1 -i docker0 ! -o docker0 -j DOCKER-ISOLATION-STAGE-2\n-A DOCKER-ISOLATION-STAGE-1 -i bridge1 ! -o bridge1 -j DOCKER-ISOLATION-STAGE-2\n-A DOCKER-ISOLATION-STAGE-2 -o bridge1 -j DROP\n-A DOCKER-ISOLATION-STAGE-2 -o docker0 -j DROP\n-A DOCKER-USER -j RETURN\n```\n\n----------------------------------------\n\nTITLE: Formatting Byte Sizes with Floating Point in Go\nDESCRIPTION: Examples of using fmt.Printf with floating point flags to format byte sizes. This demonstrates decimal and binary unit suffixes, as well as automatic unit selection based on value size.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/tonistiigi/units/readme.md#2025-04-10_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nfmt.Printf(\"%.2f\", 123 * B)   => \"123B\"\nfmt.Printf(\"%.2f\", 1234 * B)  => \"1.23kB\"\nfmt.Printf(\"%g\", 1200 * B)    => \"1.2kB\"\nfmt.Printf(\"%#g\", 1024 * B)   => \"1KiB\"\n```\n\n----------------------------------------\n\nTITLE: Defining ttrpc Message Types in Markdown Table\nDESCRIPTION: Presents a table of ttrpc message types, including their numeric identifiers, names, and descriptions. This table provides a quick reference for the three main message types used in the protocol.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/containerd/ttrpc/PROTOCOL.md#2025-04-10_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Message Type | Name     | Description                      |\n|--------------|----------|----------------------------------|\n| 0x01         | Request  | Initiates stream                 |\n| 0x02         | Response | Final stream data and terminates |\n| 0x03         | Data     | Stream data                      |\n```\n\n----------------------------------------\n\nTITLE: Managing MySQL Database with Goose\nDESCRIPTION: Commands to set up and tear down a MySQL database using goose migrations. These commands initialize the schema needed for CFSSL certificate operations.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/cloudflare/cfssl/certdb/README.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngoose -path certdb/mysql up\n```\n\nLANGUAGE: bash\nCODE:\n```\ngoose -path certdb/mysql down\n```\n\n----------------------------------------\n\nTITLE: Defining Health Service in SwarmKit Protobuf\nDESCRIPTION: Defines the Health service and related message types in SwarmKit protocol buffers. This service enables health checking of SwarmKit components with status responses indicating serving state.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/moby/swarmkit/v2/api/api.pb.txt#2025-04-10_snippet_105\n\nLANGUAGE: protobuf\nCODE:\n```\nname: \"HealthCheckRequest\"\nfield {\n  name: \"service\"\n  number: 1\n  label: LABEL_OPTIONAL\n  type: TYPE_STRING\n  json_name: \"service\"\n}\n}\nmessage_type {\n  name: \"HealthCheckResponse\"\n  field {\n    name: \"status\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_ENUM\n    type_name: \".docker.swarmkit.v1.HealthCheckResponse.ServingStatus\"\n    json_name: \"status\"\n  }\n  enum_type {\n    name: \"ServingStatus\"\n    value {\n      name: \"UNKNOWN\"\n      number: 0\n    }\n    value {\n      name: \"SERVING\"\n      number: 1\n    }\n    value {\n      name: \"NOT_SERVING\"\n      number: 2\n    }\n  }\n}\nservice {\n  name: \"Health\"\n  method {\n    name: \"Check\"\n    input_type: \".docker.swarmkit.v1.HealthCheckRequest\"\n    output_type: \".docker.swarmkit.v1.HealthCheckResponse\"\n    options {\n      73626345 {\n        1: \"swarm-manager\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Explaining Clock Package Purpose and Origin in Markdown\nDESCRIPTION: Documentation explaining the Clock package, which provides an interface for time-based operations and allows mocking time for testing. It notes that this is a copy of k8s.io/utils/clock to avoid a circular dependency between packages.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/k8s.io/klog/v2/internal/clock/README.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Clock\n\nThis package provides an interface for time-based operations.  It allows\nmocking time for testing.\n\nThis is a copy of k8s.io/utils/clock. We have to copy it to avoid a circular\ndependency (k8s.io/klog -> k8s.io/utils -> k8s.io/klog).\n```\n\n----------------------------------------\n\nTITLE: Creating Docker Network and Running Container with Published Port\nDESCRIPTION: Commands to create a Docker network with nat-unprotected gateway mode and run a container with a published port on that network.\nSOURCE: https://github.com/moby/moby/blob/master/integration/network/bridge/iptablesdoc/generated/usernet-portmap-natunprot.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker network create \\\n  -o com.docker.network.bridge.name=bridge1 \\\n  -o com.docker.network.bridge.gateway_mode_ipv4=nat-unprotected \\\n  --subnet 192.0.2.0/24 --gateway 192.0.2.1 bridge1\ndocker run --network bridge1 -p 8080:80 --name c1 busybox\n```\n\n----------------------------------------\n\nTITLE: Importing Mode Package in Go\nDESCRIPTION: Example of importing the Mode package in a Go source file.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/tonistiigi/dchapes-mode/README.md#2025-04-10_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nimport \"hg.sr.ht/~dchapes/mode\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Reader Methods in Go\nDESCRIPTION: Various methods for the Reader struct, including buffer operations, reading, and skipping.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/philhofer/fwd/README.md#2025-04-10_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfunc (r *Reader) BufferSize() int\n\nfunc (r *Reader) Buffered() int\n\nfunc (r *Reader) Next(n int) ([]byte, error)\n\nfunc (r *Reader) Peek(n int) ([]byte, error)\n\nfunc (r *Reader) Read(b []byte) (int, error)\n\nfunc (r *Reader) ReadByte() (byte, error)\n\nfunc (r *Reader) ReadFull(b []byte) (int, error)\n\nfunc (r *Reader) Reset(rd io.Reader)\n\nfunc (r *Reader) Skip(n int) (int, error)\n\nfunc (r *Reader) WriteTo(w io.Writer) (int64, error)\n```\n\n----------------------------------------\n\nTITLE: Managing PostgreSQL Database with Goose\nDESCRIPTION: Commands to set up and tear down a PostgreSQL database using goose migrations. These commands initialize the schema needed for CFSSL certificate operations.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/cloudflare/cfssl/certdb/README.md#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngoose -path certdb/pg up\n```\n\nLANGUAGE: bash\nCODE:\n```\ngoose -path certdb/pg down\n```\n\n----------------------------------------\n\nTITLE: Defining Dispatcher Service in SwarmKit Protobuf\nDESCRIPTION: Defines the Dispatcher service in SwarmKit protocol buffers. This service handles worker-manager communication including sessions, heartbeats, task and volume status updates, and assignment delivery.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/moby/swarmkit/v2/api/api.pb.txt#2025-04-10_snippet_104\n\nLANGUAGE: protobuf\nCODE:\n```\nname: \"Dispatcher\"\nmethod {\n  name: \"Session\"\n  input_type: \".docker.swarmkit.v1.SessionRequest\"\n  output_type: \".docker.swarmkit.v1.SessionMessage\"\n  options {\n    73626345 {\n      1: \"swarm-worker\"\n      1: \"swarm-manager\"\n    }\n  }\n  server_streaming: true\n}\nmethod {\n  name: \"Heartbeat\"\n  input_type: \".docker.swarmkit.v1.HeartbeatRequest\"\n  output_type: \".docker.swarmkit.v1.HeartbeatResponse\"\n  options {\n    73626345 {\n      1: \"swarm-worker\"\n      1: \"swarm-manager\"\n    }\n  }\n}\nmethod {\n  name: \"UpdateTaskStatus\"\n  input_type: \".docker.swarmkit.v1.UpdateTaskStatusRequest\"\n  output_type: \".docker.swarmkit.v1.UpdateTaskStatusResponse\"\n  options {\n    73626345 {\n      1: \"swarm-worker\"\n      1: \"swarm-manager\"\n    }\n  }\n}\nmethod {\n  name: \"UpdateVolumeStatus\"\n  input_type: \".docker.swarmkit.v1.UpdateVolumeStatusRequest\"\n  output_type: \".docker.swarmkit.v1.UpdateVolumeStatusResponse\"\n  options {\n    73626345 {\n      1: \"swarm-worker\"\n      1: \"swarm-manager\"\n    }\n  }\n}\nmethod {\n  name: \"Tasks\"\n  input_type: \".docker.swarmkit.v1.TasksRequest\"\n  output_type: \".docker.swarmkit.v1.TasksMessage\"\n  options {\n    deprecated: true\n    73626345 {\n      1: \"swarm-worker\"\n      1: \"swarm-manager\"\n    }\n  }\n  server_streaming: true\n}\nmethod {\n  name: \"Assignments\"\n  input_type: \".docker.swarmkit.v1.AssignmentsRequest\"\n  output_type: \".docker.swarmkit.v1.AssignmentsMessage\"\n  options {\n    73626345 {\n      1: \"swarm-worker\"\n      1: \"swarm-manager\"\n    }\n  }\n  server_streaming: true\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Signed Git Tag for klog Release\nDESCRIPTION: Command for creating a signed git tag for a new klog release version, where the maintainer inserts the changelog details.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/k8s.io/klog/v2/RELEASE.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit tag -s $VERSION\n```\n\n----------------------------------------\n\nTITLE: NAT Table Rules for Docker Internal Networks\nDESCRIPTION: This snippet displays the iptables nat table rules for Docker internal networks. It shows the configuration for network address translation in the context of internal Docker networks.\nSOURCE: https://github.com/moby/moby/blob/master/integration/network/bridge/iptablesdoc/templates/usernet-internal.md#2025-04-10_snippet_2\n\nLANGUAGE: iptables\nCODE:\n```\n{{index . \"LNat4\"}}\n```\n\nLANGUAGE: iptables\nCODE:\n```\n{{index . \"SNat4\"}}\n```\n\n----------------------------------------\n\nTITLE: Upload Cache Data PATCH Endpoint\nDESCRIPTION: PATCH endpoint for uploading chunks of cache data using Content-Range headers to specify the data range being uploaded. Accepts raw binary data.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/tonistiigi/go-actions-cache/api.md#2025-04-10_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nPATCH /caches/[cacheID]\nContent-Type: application/octet-stream\n```\n\n----------------------------------------\n\nTITLE: Adding NewReflectedEncoder Field to EncoderConfig\nDESCRIPTION: Adds a new field EncoderConfig.NewReflectedEncoder to customize JSON encoding of reflected log fields.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/go.uber.org/zap/CHANGELOG.md#2025-04-10_snippet_3\n\nLANGUAGE: Markdown\nCODE:\n```\n[#1039][]: Add `EncoderConfig.NewReflectedEncoder` field to customize JSON encoding of reflected log fields.\n```\n\n----------------------------------------\n\nTITLE: Running Tests for PackageURL Go Implementation\nDESCRIPTION: Example command output showing how to run tests for the packageurl-go library using Make, which pulls test fixtures shared between all package-url projects.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/package-url/packageurl-go/README.md#2025-04-10_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ make test\ngo test -v -cover ./...\n=== RUN   TestFromStringExamples\n--- PASS: TestFromStringExamples (0.00s)\n=== RUN   TestToStringExamples\n--- PASS: TestToStringExamples (0.00s)\n=== RUN   TestStringer\n--- PASS: TestStringer (0.00s)\n=== RUN   TestQualifiersMapConversion\n--- PASS: TestQualifiersMapConversion (0.00s)\nPASS\ncoverage: 90.7% of statements\nok      github.com/package-url/packageurl-go    0.004s  coverage: 90.7% of statements\n```\n\n----------------------------------------\n\nTITLE: Defining Assignment-Related Message Types in SwarmKit Protobuf\nDESCRIPTION: Defines protocol buffer messages for assignments management in SwarmKit. Includes AssignmentsRequest for requesting assignments, Assignment for different assignment types (task, secret, config, volume), and AssignmentChange for tracking updates.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/moby/swarmkit/v2/api/api.pb.txt#2025-04-10_snippet_101\n\nLANGUAGE: protobuf\nCODE:\n```\nname: \"AssignmentsRequest\"\nfield {\n  name: \"session_id\"\n  number: 1\n  label: LABEL_OPTIONAL\n  type: TYPE_STRING\n  json_name: \"sessionId\"\n}\n}\nmessage_type {\n  name: \"Assignment\"\n  field {\n    name: \"task\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".docker.swarmkit.v1.Task\"\n    oneof_index: 0\n    json_name: \"task\"\n  }\n  field {\n    name: \"secret\"\n    number: 2\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".docker.swarmkit.v1.Secret\"\n    oneof_index: 0\n    json_name: \"secret\"\n  }\n  field {\n    name: \"config\"\n    number: 3\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".docker.swarmkit.v1.Config\"\n    oneof_index: 0\n    json_name: \"config\"\n  }\n  field {\n    name: \"volume\"\n    number: 4\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".docker.swarmkit.v1.VolumeAssignment\"\n    oneof_index: 0\n    json_name: \"volume\"\n  }\n  oneof_decl {\n    name: \"item\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Explorer Process Start in Go\nDESCRIPTION: Function signature for detecting if the current process was started by double-clicking in Windows Explorer. Returns a boolean value indicating the process start method.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/inconshreveable/mousetrap/README.md#2025-04-10_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc StartedByExplorer() (bool)\n```\n\n----------------------------------------\n\nTITLE: Apache License 2.0 Boilerplate Notice Template\nDESCRIPTION: Standard boilerplate notice to be included in files to apply the Apache License 2.0, with placeholders for copyright year and owner information. Also includes the standard permissions and limitations text.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/aws/aws-sdk-go-v2/internal/configsources/LICENSE.txt#2025-04-10_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nCopyright [yyyy] [name of copyright owner]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Benchmarking Darwin ARM64 Performance for CSV Parsing\nDESCRIPTION: Benchmark results comparing go-csvvalue with stdlib CSV parser on Darwin ARM64 platform, demonstrating performance characteristics across different implementations.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/tonistiigi/go-csvvalue/readme.md#2025-04-10_snippet_1\n\nLANGUAGE: text\nCODE:\n```\ngoos: darwin\ngoarch: arm64\npkg: github.com/tonistiigi/go-csvvalue\nBenchmarkFields/stdlib/nocache-10                1679923               784.9 ns/op          4520 B/op         14 allocs/op\nBenchmarkFields/stdlib/withcache-10              1641891               826.9 ns/op          4520 B/op         14 allocs/op\nBenchmarkFields/csvvalue/withcache-10           34399642                33.93 ns/op            0 B/op          0 allocs/op\nBenchmarkFields/csvvalue/nocache-10             17441373                67.21 ns/op           48 B/op          1 allocs/op\nPASS\n```\n\n----------------------------------------\n\nTITLE: Concurrent Huff0 Decompression with Decoder in Go\nDESCRIPTION: This snippet shows how to use a stateless Decoder for concurrent decompression of content with a fixed table. The capacity of the provided slice indicates the expected output size.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/klauspost/compress/huff0/README.md#2025-04-10_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ntype Decoder struct {}\n\n// Request a Decoder for concurrent decompression\ndecoder := scratch.RequestDecoder(expectedOutputSize)\n\n// Use decoder for decompression\noutput, err := decoder.Decompress(input)\n```\n\n----------------------------------------\n\nTITLE: Defining ConfChangeV2 Message Type in Protobuf for Raft\nDESCRIPTION: Protocol Buffer definition for the ConfChangeV2 message type used in Raft consensus algorithm. This message represents a group of configuration changes with a transition type, multiple change entries, and context data.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/moby/swarmkit/v2/api/api.pb.txt#2025-04-10_snippet_112\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage_type {\n  name: \"ConfChangeV2\"\n  field {\n    name: \"transition\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_ENUM\n    type_name: \".raftpb.ConfChangeTransition\"\n    options {\n      65001: 0\n    }\n    json_name: \"transition\"\n  }\n  field {\n    name: \"changes\"\n    number: 2\n    label: LABEL_REPEATED\n    type: TYPE_MESSAGE\n    type_name: \".raftpb.ConfChangeSingle\"\n    options {\n      65001: 0\n    }\n    json_name: \"changes\"\n  }\n  field {\n    name: \"context\"\n    number: 3\n    label: LABEL_OPTIONAL\n    type: TYPE_BYTES\n    json_name: \"context\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: SwarmKit Heartbeat Message Definitions\nDESCRIPTION: Defines message types for heartbeat functionality including HeartbeatRequest and HeartbeatResponse structures. These messages handle session monitoring and timing information.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/moby/swarmkit/v2/api/api.pb.txt#2025-04-10_snippet_97\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage_type {\n  name: \"HeartbeatRequest\"\n  field {\n    name: \"session_id\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"sessionId\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Levenshtein Package in Go\nDESCRIPTION: This command installs the Levenshtein package using Go's package management system. It fetches the package from the specified GitHub repository and makes it available for use in Go projects.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/agext/levenshtein/README.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/agext/levenshtein\n```\n\n----------------------------------------\n\nTITLE: Regenerating Protobuf Go Code for HTTP JSON Error Schema\nDESCRIPTION: This command regenerates the protobuf Go code for the error.proto file. It requires a local copy of googleapis, the protoc compiler, the Go protobuf plugin, and the goimports tool.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/googleapis/gax-go/v2/apierror/internal/proto/README.md#2025-04-10_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nprotoc -I $GOOGLEAPIS -I. --go_out=. --go_opt=module=github.com/googleapis/gax-go/v2/apierror/internal/proto error.proto\ngoimports -w .\n```\n\n----------------------------------------\n\nTITLE: Updating Jaeger Exporter Environment Variables in Go\nDESCRIPTION: Renames Jaeger exporter environment variables to comply with OpenTelemetry specifications.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-10_snippet_36\n\nLANGUAGE: Go\nCODE:\n```\nUpdated Jaeger Environment Variables: `JAEGER_ENDPOINT`, `JAEGER_USER`, `JAEGER_PASSWORD`\nto `OTEL_EXPORTER_JAEGER_ENDPOINT`, `OTEL_EXPORTER_JAEGER_USER`, `OTEL_EXPORTER_JAEGER_PASSWORD` in compliance with OTel specification.\n```\n\n----------------------------------------\n\nTITLE: Implementing BOM Detection and Removal in Go\nDESCRIPTION: This example demonstrates how to use the utfbom package to detect and remove the Unicode Byte Order Mark from data. It shows both simple BOM skipping and BOM skipping with encoding detection for two test cases - one with a UTF-8 BOM and one without.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/dimchansky/utfbom/README.md#2025-04-10_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"bytes\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\n\t\"github.com/dimchansky/utfbom\"\n)\n\nfunc main() {\n\ttrySkip([]byte(\"\\xEF\\xBB\\xBFhello\"))\n\ttrySkip([]byte(\"hello\"))\n}\n\nfunc trySkip(byteData []byte) {\n\tfmt.Println(\"Input:\", byteData)\n\n\t// just skip BOM\n\toutput, err := ioutil.ReadAll(utfbom.SkipOnly(bytes.NewReader(byteData)))\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\tfmt.Println(\"ReadAll with BOM skipping\", output)\n\n\t// skip BOM and detect encoding\n\tsr, enc := utfbom.Skip(bytes.NewReader(byteData))\n\tfmt.Printf(\"Detected encoding: %s\\n\", enc)\n\toutput, err = ioutil.ReadAll(sr)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\tfmt.Println(\"ReadAll with BOM detection and skipping\", output)\n\tfmt.Println()\n}\n```\n\n----------------------------------------\n\nTITLE: Docker's Generated iptables Rules for Routed-Mode Network\nDESCRIPTION: The complete set of iptables commands that Docker generates for a container on a routed-mode network with a published port. These rules manage network isolation, port forwarding, and inter-container communication.\nSOURCE: https://github.com/moby/moby/blob/master/integration/network/bridge/iptablesdoc/generated/usernet-portmap-routed.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n-P INPUT ACCEPT\n-P FORWARD ACCEPT\n-P OUTPUT ACCEPT\n-N DOCKER\n-N DOCKER-BRIDGE\n-N DOCKER-CT\n-N DOCKER-FORWARD\n-N DOCKER-ISOLATION-STAGE-1\n-N DOCKER-ISOLATION-STAGE-2\n-N DOCKER-USER\n-A FORWARD -j DOCKER-USER\n-A FORWARD -j DOCKER-FORWARD\n-A DOCKER -d 192.0.2.2/32 ! -i bridge1 -o bridge1 -p tcp -m tcp --dport 80 -j ACCEPT\n-A DOCKER ! -i docker0 -o docker0 -j DROP\n-A DOCKER -o bridge1 -p icmp -j ACCEPT\n-A DOCKER ! -i bridge1 -o bridge1 -j DROP\n-A DOCKER-BRIDGE -o docker0 -j DOCKER\n-A DOCKER-BRIDGE -o bridge1 -j DOCKER\n-A DOCKER-CT -o docker0 -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT\n-A DOCKER-CT -o bridge1 -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT\n-A DOCKER-FORWARD -j DOCKER-CT\n-A DOCKER-FORWARD -j DOCKER-ISOLATION-STAGE-1\n-A DOCKER-FORWARD -j DOCKER-BRIDGE\n-A DOCKER-FORWARD -i docker0 -j ACCEPT\n-A DOCKER-FORWARD -i bridge1 -j ACCEPT\n-A DOCKER-ISOLATION-STAGE-1 -i bridge1 -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT\n-A DOCKER-ISOLATION-STAGE-1 -o bridge1 -j RETURN\n-A DOCKER-ISOLATION-STAGE-1 -i docker0 ! -o docker0 -j DOCKER-ISOLATION-STAGE-2\n-A DOCKER-ISOLATION-STAGE-1 -i bridge1 ! -o bridge1 -j DOCKER-ISOLATION-STAGE-2\n-A DOCKER-ISOLATION-STAGE-2 -o bridge1 -j DROP\n-A DOCKER-ISOLATION-STAGE-2 -o docker0 -j DROP\n-A DOCKER-USER -j RETURN\n```\n\n----------------------------------------\n\nTITLE: SwarmKit Control Service Method Definitions\nDESCRIPTION: Service definition for the Control service including RPC method declarations for node, task, and service management operations. Each method specifies input/output types and includes swarm-manager options.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/moby/swarmkit/v2/api/api.pb.txt#2025-04-10_snippet_94\n\nLANGUAGE: protobuf\nCODE:\n```\nservice {\n  name: \"Control\"\n  method {\n    name: \"GetNode\"\n    input_type: \".docker.swarmkit.v1.GetNodeRequest\"\n    output_type: \".docker.swarmkit.v1.GetNodeResponse\"\n    options {\n      73626345 {\n        1: \"swarm-manager\"\n      }\n    }\n  }\n  // Additional methods...\n}\n```\n\n----------------------------------------\n\nTITLE: Installing DNS Library in Go\nDESCRIPTION: Commands to get and build the DNS library using Go modules. The library uses semantic versioning for releases.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/miekg/dns/README.md#2025-04-10_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo get github.com/miekg/dns\\ngo build github.com/miekg/dns\n```\n\n----------------------------------------\n\nTITLE: Displaying PkgGoDev Badge for OpenTelemetry Go SDK Instrumentation\nDESCRIPTION: This markdown snippet displays a badge linking to the package documentation for the OpenTelemetry Go SDK instrumentation package on pkg.go.dev.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/go.opentelemetry.io/otel/sdk/instrumentation/README.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![PkgGoDev](https://pkg.go.dev/badge/go.opentelemetry.io/otel/sdk/instrumentation)](https://pkg.go.dev/go.opentelemetry.io/otel/sdk/instrumentation)\n```\n\n----------------------------------------\n\nTITLE: Adding Properties to ListBlob Response\nDESCRIPTION: Adds Owner, Group, Permissions, Acl, and ResourceType properties to the BlobPropertiesInternal definition.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/internal/generated/autorest.md#2025-04-10_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:  \n- from: swagger-document    \n  where: $.definitions\n  transform: >\n    $.BlobPropertiesInternal.properties[\"Owner\"] = {\n    \"type\" : \"string\",\n    };\n    $.BlobPropertiesInternal.properties[\"Group\"] = {\n    \"type\" : \"string\",\n    };\n    $.BlobPropertiesInternal.properties[\"Permissions\"] = {\n    \"type\" : \"string\",\n    };\n    $.BlobPropertiesInternal.properties[\"Acl\"] = {\n    \"type\" : \"string\",\n    };\n    $.BlobPropertiesInternal.properties[\"ResourceType\"] = {\n    \"type\" : \"string\",\n    };\n```\n\n----------------------------------------\n\nTITLE: Checking Go Version for Memberlist Installation\nDESCRIPTION: Command to verify the installed Go version, as memberlist requires Go 1.2+ to build.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/hashicorp/memberlist/README.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo version\n```\n\n----------------------------------------\n\nTITLE: Example Tally Results Subject in Markdown\nDESCRIPTION: This snippet provides an example of a tally results subject line, showing the outcome of a vote for tagging a release candidate in the runtime-spec project.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/opencontainers/cgroups/GOVERNANCE.md#2025-04-10_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n> [runtime-spec adopted]: Tag 0647920 as 1.0.0-rc (+6 -0 #3)\n```\n\n----------------------------------------\n\nTITLE: Defining SwarmKit Resource Messages in Protocol Buffers\nDESCRIPTION: Protocol Buffer message definitions for handling Docker Swarm resources, including core types like Resource, Volume, and their associated request/response messages. Includes specifications for filters and CRUD operations.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/moby/swarmkit/v2/api/api.pb.txt#2025-04-10_snippet_93\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage_type {\n  name: \"UpdateResourceResponse\"\n  field {\n    name: \"resource\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".docker.swarmkit.v1.Resource\"\n    json_name: \"resource\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing aec Go Package\nDESCRIPTION: Command to install the aec package using go get\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/morikuni/aec/README.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/morikuni/aec\n```\n\n----------------------------------------\n\nTITLE: Markdown Badge for OpenTelemetry Trace Package\nDESCRIPTION: Displays a PkgGoDev badge that links to the Go package documentation for the OpenTelemetry trace package.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/go.opentelemetry.io/otel/trace/README.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![PkgGoDev](https://pkg.go.dev/badge/go.opentelemetry.io/otel/trace)](https://pkg.go.dev/go.opentelemetry.io/otel/trace)\n```\n\n----------------------------------------\n\nTITLE: AWS SDK Go v2 Release History\nDESCRIPTION: Markdown formatted changelog documenting version history from v1.3.0 to v1.14.0, including features like API client updates, retry configuration changes, endpoint support updates, and dependency changes.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/aws/aws-sdk-go-v2/service/cloudwatchlogs/CHANGELOG.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# v1.14.0 (2022-02-24)\n\n* **Feature**: API client updated\n* **Feature**: Adds RetryMaxAttempts and RetryMod to API client Options. This allows the API clients' default Retryer to be configured from the shared configuration files or environment variables. Adding a new Retry mode of `Adaptive`. `Adaptive` retry mode is an experimental mode, adding client rate limiting when throttles reponses are received from an API. See [retry.AdaptiveMode](https://pkg.go.dev/github.com/aws/aws-sdk-go-v2/aws/retry#AdaptiveMode) for more details, and configuration options.\n* **Feature**: Updated `github.com/aws/smithy-go` to latest version\n* **Dependency Update**: Updated to the latest SDK module versions\n\n# v1.13.0 (2022-01-14)\n\n* **Feature**: Updated `github.com/aws/smithy-go` to latest version\n* **Dependency Update**: Updated to the latest SDK module versions\n\n# v1.12.0 (2022-01-07)\n\n* **Feature**: Updated `github.com/aws/smithy-go` to latest version\n* **Dependency Update**: Updated to the latest SDK module versions\n\n# v1.11.0 (2021-12-21)\n\n* **Feature**: API Paginators now support specifying the initial starting token, and support stopping on empty string tokens.\n* **Feature**: API client updated\n* **Feature**: Updated to latest service endpoints\n\n# v1.10.2 (2021-12-02)\n\n* **Bug Fix**: Fixes a bug that prevented aws.EndpointResolverWithOptions from being used by the service client. ([#1514](https://github.com/aws/aws-sdk-go-v2/pull/1514))\n* **Dependency Update**: Updated to the latest SDK module versions\n\n# v1.10.1 (2021-11-19)\n\n* **Dependency Update**: Updated to the latest SDK module versions\n\n# v1.10.0 (2021-11-12)\n\n* **Feature**: Service clients now support custom endpoints that have an initial URI path defined.\n\n# v1.9.0 (2021-11-06)\n\n* **Feature**: The SDK now supports configuration of FIPS and DualStack endpoints using environment variables, shared configuration, or programmatically.\n* **Feature**: Updated `github.com/aws/smithy-go` to latest version\n* **Dependency Update**: Updated to the latest SDK module versions\n\n# v1.8.0 (2021-10-21)\n\n* **Feature**: API client updated\n* **Feature**: Updated  to latest version\n* **Dependency Update**: Updated to the latest SDK module versions\n\n# v1.7.2 (2021-10-11)\n\n* **Dependency Update**: Updated to the latest SDK module versions\n\n# v1.7.1 (2021-09-17)\n\n* **Dependency Update**: Updated to the latest SDK module versions\n\n# v1.7.0 (2021-08-27)\n\n* **Feature**: Updated `github.com/aws/smithy-go` to latest version\n* **Dependency Update**: Updated to the latest SDK module versions\n\n# v1.6.0 (2021-08-19)\n\n* **Feature**: API client updated\n* **Dependency Update**: Updated to the latest SDK module versions\n\n# v1.5.2 (2021-08-04)\n\n* **Dependency Update**: Updated `github.com/aws/smithy-go` to latest version.\n* **Dependency Update**: Updated to the latest SDK module versions\n\n# v1.5.1 (2021-07-15)\n\n* **Dependency Update**: Updated `github.com/aws/smithy-go` to latest version\n* **Dependency Update**: Updated to the latest SDK module versions\n\n# v1.5.0 (2021-06-25)\n\n* **Feature**: Updated `github.com/aws/smithy-go` to latest version\n* **Dependency Update**: Updated to the latest SDK module versions\n\n# v1.4.0 (2021-05-25)\n\n* **Feature**: API client updated\n\n# v1.3.1 (2021-05-20)\n\n* **Dependency Update**: Updated to the latest SDK module versions\n\n# v1.3.0 (2021-05-14)\n\n* **Feature**: Constant has been added to modules to enable runtime version inspection for reporting.\n* **Dependency Update**: Updated to the latest SDK module versions\n```\n\n----------------------------------------\n\nTITLE: Formatting List of Extended Key Usage Options in Markdown\nDESCRIPTION: Markdown table showing the mapping between config strings and Extended Key Usage values for CTFE filtering. Lists supported golang x509 EKUs and their corresponding configuration strings.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/google/certificate-transparency-go/CHANGELOG.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n  |Config string               | Extended Key Usage                     |\n  |----------------------------|----------------------------------------|\n  |`Any`                       |  ExtKeyUsageAny                        |\n  |`ServerAuth`                |  ExtKeyUsageServerAuth                 |\n  |`ClientAuth`                |  ExtKeyUsageClientAuth                 |\n  |`CodeSigning`               |  ExtKeyUsageCodeSigning                |\n  |`EmailProtection`           |  ExtKeyUsageEmailProtection            |\n  |`IPSECEndSystem`            |  ExtKeyUsageIPSECEndSystem             |\n  |`IPSECTunnel`               |  ExtKeyUsageIPSECTunnel                |\n  |`IPSECUser`                 |  ExtKeyUsageIPSECUser                  |\n  |`TimeStamping`              |  ExtKeyUsageTimeStamping               |\n  |`OCSPSigning`               |  ExtKeyUsageOCSPSigning                |\n  |`MicrosoftServerGatedCrypto`|  ExtKeyUsageMicrosoftServerGatedCrypto |\n  |`NetscapeServerGatedCrypto` |  ExtKeyUsageNetscapeServerGatedCrypto  |\n```\n\n----------------------------------------\n\nTITLE: Connecting to Docker Host and Checking Version\nDESCRIPTION: SSH into one of the Docker hosts (net-1) and verify the Docker version installed.\nSOURCE: https://github.com/moby/moby/blob/master/libnetwork/docs/vagrant.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ vagrant ssh net-1\nvagrant@net-1:~$ docker version\n```\n\n----------------------------------------\n\nTITLE: Defining NetworkAttachment Message Type in Protocol Buffers for Docker Swarmkit\nDESCRIPTION: This snippet defines the NetworkAttachment message type, which represents a network connection for a task. It includes fields for the network and associated addresses.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/moby/swarmkit/v2/api/api.pb.txt#2025-04-10_snippet_81\n\nLANGUAGE: Protocol Buffers\nCODE:\n```\nmessage_type {\n  name: \"NetworkAttachment\"\n  field {\n    name: \"network\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".docker.swarmkit.v1.Network\"\n    json_name: \"network\"\n  }\n  field {\n    name: \"addresses\"\n    number: 2\n    label: LABEL_REPEATED\n    type: TYPE_STRING\n    json_name: \"addresses\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing OpenCensus Go Package\nDESCRIPTION: Command to install the OpenCensus Go package using go get\nSOURCE: https://github.com/moby/moby/blob/master/vendor/go.opencensus.io/README.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ go get -u go.opencensus.io\n```\n\n----------------------------------------\n\nTITLE: Displaying PkgGoDev Badge for OTLP Metric HTTP Exporter in Markdown\nDESCRIPTION: This code snippet shows how to embed a PkgGoDev badge in a Markdown file. The badge links to the package documentation for the OTLP Metric HTTP Exporter on pkg.go.dev.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/go.opentelemetry.io/otel/exporters/otlp/otlpmetric/otlpmetrichttp/README.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![PkgGoDev](https://pkg.go.dev/badge/go.opentelemetry.io/otel/exporters/otlp/otlpmetric/otlpmetrichttp)](https://pkg.go.dev/go.opentelemetry.io/otel/exporters/otlp/otlpmetric/otlpmetrichttp)\n```\n\n----------------------------------------\n\nTITLE: Initial Feature Release Note (v1.1.0)\nDESCRIPTION: Initial version release note adding runtime version inspection capability and updating dependencies.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/aws/aws-sdk-go-v2/feature/ec2/imds/CHANGELOG.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# v1.1.0 (2021-05-14)\n\n* **Feature**: Constant has been added to modules to enable runtime version inspection for reporting.\n* **Dependency Update**: Updated to the latest SDK module versions\n```\n\n----------------------------------------\n\nTITLE: Sink Interface Definition in Go\nDESCRIPTION: Definition of the core Sink interface used for implementing custom event handling behavior, showing required Write and Close methods.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/docker/go-events/README.md#2025-04-10_snippet_4\n\nLANGUAGE: go\nCODE:\n```\ntype Sink {\n\tWrite(Event) error\n\tClose() error\n}\n```\n\n----------------------------------------\n\nTITLE: Support Table in Markdown\nDESCRIPTION: A markdown table listing various support channels for the Docker Distribution project, including IRC, issue tracker, Google Groups, and mailing list.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/docker/distribution/README.md#2025-04-10_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<table>\\n<tr>\\n\\t<th align=\"left\">\\n\\tIRC\\n\\t</th>\\n\\t<td>\\n\\t#docker-distribution on FreeNode\\n\\t</td>\\n</tr>\\n<tr>\\n\\t<th align=\"left\">\\n\\tIssue Tracker\\n\\t</th>\\n\\t<td>\\n\\tgithub.com/docker/distribution/issues\\n\\t</td>\\n</tr>\\n<tr>\\n\\t<th align=\"left\">\\n\\tGoogle Groups\\n\\t</th>\\n\\t<td>\\n\\thttps://groups.google.com/a/dockerproject.org/forum/#!forum/distribution\\n\\t</td>\\n</tr>\\n<tr>\\n\\t<th align=\"left\">\\n\\tMailing List\\n\\t</th>\\n\\t<td>\\n\\tdocker@dockerproject.org\\n\\t</td>\\n</tr>\\n</table>\n```\n\n----------------------------------------\n\nTITLE: Defining Node Message Type in Protocol Buffers for Docker Swarmkit\nDESCRIPTION: This snippet defines the Node message type, which represents a node in the Swarm cluster. It includes fields for node identification, specifications, status, and network attachments.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/moby/swarmkit/v2/api/api.pb.txt#2025-04-10_snippet_77\n\nLANGUAGE: Protocol Buffers\nCODE:\n```\nmessage_type {\n  name: \"Node\"\n  field {\n    name: \"id\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"id\"\n  }\n  field {\n    name: \"meta\"\n    number: 2\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".docker.swarmkit.v1.Meta\"\n    options {\n      65001: 0\n    }\n    json_name: \"meta\"\n  }\n  field {\n    name: \"spec\"\n    number: 3\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".docker.swarmkit.v1.NodeSpec\"\n    options {\n      65001: 0\n    }\n    json_name: \"spec\"\n  }\n  field {\n    name: \"description\"\n    number: 4\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".docker.swarmkit.v1.NodeDescription\"\n    json_name: \"description\"\n  }\n  field {\n    name: \"status\"\n    number: 5\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".docker.swarmkit.v1.NodeStatus\"\n    options {\n      65001: 0\n    }\n    json_name: \"status\"\n  }\n  field {\n    name: \"manager_status\"\n    number: 6\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".docker.swarmkit.v1.ManagerStatus\"\n    json_name: \"managerStatus\"\n  }\n  field {\n    name: \"attachment\"\n    number: 7\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".docker.swarmkit.v1.NetworkAttachment\"\n    options {\n      deprecated: true\n    }\n    json_name: \"attachment\"\n  }\n  field {\n    name: \"certificate\"\n    number: 8\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".docker.swarmkit.v1.Certificate\"\n    options {\n      65001: 0\n    }\n    json_name: \"certificate\"\n  }\n  field {\n    name: \"role\"\n    number: 9\n    label: LABEL_OPTIONAL\n    type: TYPE_ENUM\n    type_name: \".docker.swarmkit.v1.NodeRole\"\n    json_name: \"role\"\n  }\n  field {\n    name: \"attachments\"\n    number: 10\n    label: LABEL_REPEATED\n    type: TYPE_MESSAGE\n    type_name: \".docker.swarmkit.v1.NetworkAttachment\"\n    json_name: \"attachments\"\n  }\n  field {\n    name: \"VXLANUDPPort\"\n    number: 11\n    label: LABEL_OPTIONAL\n    type: TYPE_UINT32\n    json_name: \"VXLANUDPPort\"\n  }\n  options {\n    70001 {\n      1 {\n        1: 1\n        2: 1\n        3: 1\n        4: 1\n        5: 1\n        6: 1\n        11: 1\n        12: 1\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Goose Database Migration Tool\nDESCRIPTION: Command to install the goose database migration tool which is used to set up and manage database schemas for CFSSL.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/cloudflare/cfssl/certdb/README.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get bitbucket.org/liamstask/goose/cmd/goose\n```\n\n----------------------------------------\n\nTITLE: Markdown Badge Integration for Go Package\nDESCRIPTION: Markdown code that displays a PkgGoDev badge linking to the OpenTelemetry metric exemplar package documentation.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/go.opentelemetry.io/otel/sdk/metric/exemplar/README.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![PkgGoDev](https://pkg.go.dev/badge/go.opentelemetry.io/otel/sdk/metric/exemplar)](https://pkg.go.dev/go.opentelemetry.io/otel/sdk/metric/exemplar)\n```\n\n----------------------------------------\n\nTITLE: AWS SDK Version History in Markdown\nDESCRIPTION: Markdown formatted version history documenting changes across multiple AWS SDK releases including feature updates, bug fixes, and dependency changes.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/aws/aws-sdk-go-v2/service/ssooidc/CHANGELOG.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# v1.26.4 (2024-07-10.2)\n\n* **Dependency Update**: Updated to the latest SDK module versions\n\n# v1.26.3 (2024-07-10)\n\n* **Dependency Update**: Updated to the latest SDK module versions\n\n# v1.26.2 (2024-07-03)\n\n* No change notes available for this release.\n\n# v1.26.1 (2024-06-28)\n\n* **Dependency Update**: Updated to the latest SDK module versions\n```\n\n----------------------------------------\n\nTITLE: Displaying First Release Candidate Versions\nDESCRIPTION: Shows the version numbers for the first release candidates of stable modules, while unstable modules remain at their previous version.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/go.opentelemetry.io/otel/VERSIONING.md#2025-04-10_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n* `otel`: `v1.0.0-RC1`\n* `otel/trace`: `v1.0.0-RC1`\n* `otel/baggage`: `v1.0.0-RC1`\n* `otel/sdk/trace`: `v1.0.0-RC1`\n```\n\n----------------------------------------\n\nTITLE: Creating Registry Data Directory\nDESCRIPTION: Creates a directory to store registry data. This step might require proper permissions to be set.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/docker/distribution/BUILDING.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p /var/lib/registry\n```\n\n----------------------------------------\n\nTITLE: Defining NodeCA Service in SwarmKit Protobuf\nDESCRIPTION: This snippet defines the NodeCA service in SwarmKit's protobuf, which handles node certificate issuance and status checks. It includes methods for issuing node certificates and checking certificate status.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/moby/swarmkit/v2/api/api.pb.txt#2025-04-10_snippet_75\n\nLANGUAGE: protobuf\nCODE:\n```\nservice NodeCA {\n  rpc IssueNodeCertificate(IssueNodeCertificateRequest) returns (IssueNodeCertificateResponse) {\n    option (docker.protobuf.plugin.tls_authorization) = {\n      insecure: true\n    };\n  }\n  rpc NodeCertificateStatus(NodeCertificateStatusRequest) returns (NodeCertificateStatusResponse) {\n    option (docker.protobuf.plugin.tls_authorization) = {\n      insecure: true\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: New API Function Signatures\nDESCRIPTION: Function signatures for the new API including OpenInRoot, OpenatInRoot, and Reopen functions that provide more secure file operations.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/cyphar/filepath-securejoin/README.md#2025-04-10_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc OpenInRoot(root, unsafePath string) (*os.File, error)\nfunc OpenatInRoot(root *os.File, unsafePath string) (*os.File, error)\nfunc Reopen(handle *os.File, flags int) (*os.File, error)\n```\n\n----------------------------------------\n\nTITLE: Integer Flag Declaration in Go\nDESCRIPTION: Demonstrates declaring an integer flag with a default value and help message.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/spf13/pflag/README.md#2025-04-10_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nvar ip *int = flag.Int(\"flagname\", 1234, \"help message for flagname\")\n```\n\n----------------------------------------\n\nTITLE: Displaying Developer Certificate of Origin in Markdown\nDESCRIPTION: This snippet shows the full text of the Developer Certificate of Origin (DCO) version 1.1, which contributors must agree to when signing their commits.\nSOURCE: https://github.com/moby/moby/blob/master/CONTRIBUTING.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```\nDeveloper Certificate of Origin\nVersion 1.1\n\nCopyright (C) 2004, 2006 The Linux Foundation and its contributors.\n1 Letterman Drive\nSuite D4700\nSan Francisco, CA, 94129\n\nEveryone is permitted to copy and distribute verbatim copies of this\nlicense document, but changing it is not allowed.\n\nDeveloper's Certificate of Origin 1.1\n\nBy making a contribution to this project, I certify that:\n\n(a) The contribution was created in whole or in part by me and I\n    have the right to submit it under the open source license\n    indicated in the file; or\n\n(b) The contribution is based upon previous work that, to the best\n    of my knowledge, is covered under an appropriate open source\n    license and I have the right under that license to submit that\n    work with modifications, whether created in whole or in part\n    by me, under the same open source license (unless I am\n    permitted to submit under a different license), as indicated\n    in the file; or\n\n(c) The contribution was provided directly to me by some other\n    person who certified (a), (b) or (c) and I have not modified\n    it.\n\n(d) I understand and agree that this project and the contribution\n    are public and that a record of the contribution (including all\n    personal information I submit with it, including my sign-off) is\n    maintained indefinitely and may be redistributed consistent with\n    this project or the open source license(s) involved.\n```\n```\n\n----------------------------------------\n\nTITLE: Displaying Package Documentation Badge in Markdown\nDESCRIPTION: Markdown code to display the pkg.go.dev documentation badge for the OpenTelemetry SDK metric data package with a link to the full documentation.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/go.opentelemetry.io/otel/sdk/metric/metricdata/README.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![PkgGoDev](https://pkg.go.dev/badge/go.opentelemetry.io/otel/sdk/metric/metricdata)](https://pkg.go.dev/go.opentelemetry.io/otel/sdk/metric/metricdata)\n```\n\n----------------------------------------\n\nTITLE: Defining ttrpc Message Frame Structure in Markdown\nDESCRIPTION: Illustrates the structure of a ttrpc message frame, including data length, stream ID, message type, flags, and data fields. The frame is represented using ASCII art for visual clarity.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/containerd/ttrpc/PROTOCOL.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n+---------------------------------------------------------------+\n|                       Data Length (32)                        |\n+---------------------------------------------------------------+\n|                        Stream ID (32)                         |\n+---------------+-----------------------------------------------+\n| Msg Type (8)  |\n+---------------+\n|   Flags (8)   |\n+---------------+-----------------------------------------------+\n|                           Data (*)                            |\n+---------------------------------------------------------------+\n```\n\n----------------------------------------\n\nTITLE: Defining CA Service in SwarmKit Protobuf\nDESCRIPTION: This snippet defines the CA (Certificate Authority) service in SwarmKit's protobuf. It includes methods for getting root CA certificates and unlock keys, with TLS authorization options.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/moby/swarmkit/v2/api/api.pb.txt#2025-04-10_snippet_74\n\nLANGUAGE: protobuf\nCODE:\n```\nservice CA {\n  rpc GetRootCACertificate(GetRootCACertificateRequest) returns (GetRootCACertificateResponse) {\n    option (docker.protobuf.plugin.tls_authorization) = {\n      insecure: true\n    };\n  }\n  rpc GetUnlockKey(GetUnlockKeyRequest) returns (GetUnlockKeyResponse) {\n    option (docker.protobuf.plugin.tls_authorization) = {\n      roles: \"swarm-manager\"\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Markdown to Manpage Using Command Line Arguments\nDESCRIPTION: Example showing how to convert a markdown file to a manpage using explicit command line arguments for input and output files.\nSOURCE: https://github.com/moby/moby/blob/master/man/vendor/github.com/cpuguy83/go-md2man/v2/go-md2man.1.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngo-md2man -in=go-md2man.1.md -out=go-md2man.1\n```\n\n----------------------------------------\n\nTITLE: Conditional Error Return in Go\nDESCRIPTION: Shows how to return a multierror only if it contains actual errors using the ErrorOrNil method.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/hashicorp/go-multierror/README.md#2025-04-10_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nvar result *multierror.Error\n\n// ... accumulate errors here\n\n// Return the `error` only if errors were added to the multierror, otherwise\n// return nil since there are no errors.\nreturn result.ErrorOrNil()\n```\n\n----------------------------------------\n\nTITLE: Declaring Go Module Dependencies\nDESCRIPTION: Defines required Go module dependencies for markdown processing. Includes go-md2man v2.0.6 with Go 1.12 requirement and blackfriday v2.1.0.\nSOURCE: https://github.com/moby/moby/blob/master/man/vendor/modules.txt#2025-04-10_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n# github.com/cpuguy83/go-md2man/v2 v2.0.6\n## explicit; go 1.12\ngithub.com/cpuguy83/go-md2man/v2\ngithub.com/cpuguy83/go-md2man/v2/md2man\n# github.com/russross/blackfriday/v2 v2.1.0\n## explicit\ngithub.com/russross/blackfriday/v2\n```\n\n----------------------------------------\n\nTITLE: Disabling Experimental Resource Semantic Conventions in OpenTelemetry Go SDK\nDESCRIPTION: Unsets the OTEL_GO_X_RESOURCE environment variable to disable experimental resource semantic conventions in the OpenTelemetry Go SDK.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/go.opentelemetry.io/otel/sdk/internal/x/README.md#2025-04-10_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nunset OTEL_GO_X_RESOURCE\n```\n\n----------------------------------------\n\nTITLE: Running Tests for OpenCensus Go\nDESCRIPTION: These commands install necessary tools (only needed once) and then run the project's tests. This ensures that the development environment is set up correctly and all tests pass before making changes.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/go.opencensus.io/CONTRIBUTING.md#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ make install-tools  # Only first time.\n$ make\n```\n\n----------------------------------------\n\nTITLE: Defining NodeCSIInfo Message in Protocol Buffers\nDESCRIPTION: This message type defines Container Storage Interface (CSI) information for a node, including plugin name, node ID, maximum volumes per node, and accessible topology information for container storage plugins.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/moby/swarmkit/v2/api/api.pb.txt#2025-04-10_snippet_25\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage_type {\n  name: \"NodeCSIInfo\"\n  field {\n    name: \"plugin_name\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"pluginName\"\n  }\n  field {\n    name: \"node_id\"\n    number: 2\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"nodeId\"\n  }\n  field {\n    name: \"max_volumes_per_node\"\n    number: 3\n    label: LABEL_OPTIONAL\n    type: TYPE_INT64\n    json_name: \"maxVolumesPerNode\"\n  }\n  field {\n    name: \"accessible_topology\"\n    number: 4\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".docker.swarmkit.v1.Topology\"\n    json_name: \"accessibleTopology\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Markdown Processing without Extensions\nDESCRIPTION: Example showing how to process markdown using only the basic feature set without any extensions.\nSOURCE: https://github.com/moby/moby/blob/master/man/vendor/github.com/russross/blackfriday/v2/README.md#2025-04-10_snippet_1\n\nLANGUAGE: go\nCODE:\n```\noutput := blackfriday.Run(input, blackfriday.WithNoExtensions())\n```\n\n----------------------------------------\n\nTITLE: Importing Exponential Backoff Package in Go\nDESCRIPTION: Shows how to import the exponential backoff package in a Go project. The import path includes a version number at the end.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/cenkalti/backoff/v4/README.md#2025-04-10_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nimport \"github.com/cenkalti/backoff/v4\"\n```\n\n----------------------------------------\n\nTITLE: Apache License 2.0 Boilerplate Notice\nDESCRIPTION: Standard copyright and license notice template to be included in source files. Contains placeholders for year and copyright owner information that should be replaced with actual values.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/aws/aws-sdk-go-v2/service/cloudwatchlogs/LICENSE.txt#2025-04-10_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nCopyright [yyyy] [name of copyright owner]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Generating Protocol Buffer Files in Moby\nDESCRIPTION: Command to regenerate .pb.go files from .proto source files using make. This should be run whenever .proto files are modified to ensure generated code is up to date.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/moby/swarmkit/v2/api/README.md#2025-04-10_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ make generate\n```\n\n----------------------------------------\n\nTITLE: Checking Docker Version in Development Container\nDESCRIPTION: Verify the Docker client and server versions within the development container.\nSOURCE: https://github.com/moby/moby/blob/master/docs/contributing/set-up-dev-env.md#2025-04-10_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n# docker version\n```\n\n----------------------------------------\n\nTITLE: Defining Protocol Buffer GeneratedCodeInfo with Annotation\nDESCRIPTION: Defines structures for generated code information including annotations that provide metadata about generated code.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/moby/swarmkit/v2/api/api.pb.txt#2025-04-10_snippet_18\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage_type {\n    name: \"GeneratedCodeInfo\"\n    field {\n      name: \"annotation\"\n      number: 1\n      label: LABEL_REPEATED\n      type: TYPE_MESSAGE\n      type_name: \".google.protobuf.GeneratedCodeInfo.Annotation\"\n      json_name: \"annotation\"\n    }\n    nested_type {\n      name: \"Annotation\"\n      field {\n        name: \"path\"\n        number: 1\n        label: LABEL_REPEATED\n        type: TYPE_INT32\n        options {\n          packed: true\n        }\n        json_name: \"path\"\n      }\n      field {\n        name: \"source_file\"\n        number: 2\n        label: LABEL_OPTIONAL\n        type: TYPE_STRING\n        json_name: \"sourceFile\"\n      }\n      field {\n        name: \"begin\"\n        number: 3\n        label: LABEL_OPTIONAL\n        type: TYPE_INT32\n        json_name: \"begin\"\n      }\n      field {\n        name: \"end\"\n        number: 4\n        label: LABEL_OPTIONAL\n        type: TYPE_INT32\n        json_name: \"end\"\n      }\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Go Module Dependencies List\nDESCRIPTION: List of Go module dependencies with specific versions required for the Moby/Docker project. Most dependencies are using go 1.17 or later, with explicit version constraints specified.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/modules.txt#2025-04-10_snippet_6\n\nLANGUAGE: go\nCODE:\n```\n## explicit; go 1.18\ngithub.com/moby/swarmkit/v2/agent\ngithub.com/moby/swarmkit/v2/agent/configs\ngithub.com/moby/swarmkit/v2/agent/csi\ngithub.com/moby/swarmkit/v2/agent/csi/plugin\ngithub.com/moby/swarmkit/v2/agent/exec\n# github.com/moby/sys/atomicwriter v0.1.0\n## explicit; go 1.18\ngithub.com/moby/sys/atomicwriter\n# github.com/moby/sys/mount v0.3.4\n## explicit; go 1.17\ngithub.com/moby/sys/mount\n```\n\n----------------------------------------\n\nTITLE: Importing Clock Interface in Go\nDESCRIPTION: This snippet demonstrates how to import the Clock interface from the correct repository path in Go projects.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/code.cloudfoundry.org/clock/README.md#2025-04-10_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport \"code.cloudfoundry.org/clock\"\n```\n\n----------------------------------------\n\nTITLE: Apache License 2.0 Boilerplate Notice Template\nDESCRIPTION: Standard boilerplate notice text to be included in source files when applying the Apache 2.0 license. Includes placeholders for copyright year and owner information, along with the standard Apache 2.0 license notice text.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/aws/aws-sdk-go-v2/service/sso/LICENSE.txt#2025-04-10_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nCopyright [yyyy] [name of copyright owner]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Git Commit Reference Format\nDESCRIPTION: Examples of Git commit reference links and hashes used throughout the changelog to track individual changes.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/cloud.google.com/go/CHANGES.md#2025-04-10_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n([e385b40](https://www.github.com/googleapis/google-cloud-go/commit/e385b40a1e2ecf81f5fd0910de5c37275951f86b))\n```\n\n----------------------------------------\n\nTITLE: Defining Protocol Buffer OneofOptions\nDESCRIPTION: Defines the OneofOptions message type that supports extensibility through uninterpreted options.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/moby/swarmkit/v2/api/api.pb.txt#2025-04-10_snippet_11\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage_type {\n    name: \"OneofOptions\"\n    field {\n      name: \"uninterpreted_option\"\n      number: 999\n      label: LABEL_REPEATED\n      type: TYPE_MESSAGE\n      type_name: \".google.protobuf.UninterpretedOption\"\n      json_name: \"uninterpretedOption\"\n    }\n    extension_range {\n      start: 1000\n      end: 536870912\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Go Module Dependencies Declaration\nDESCRIPTION: Comprehensive list of Go module dependencies specifying required versions and minimum Go versions for the Moby project. Includes various libraries for networking, cryptography, telemetry, and other core functionalities.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/modules.txt#2025-04-10_snippet_7\n\nLANGUAGE: go\nCODE:\n```\n## explicit; go 1.17\ngithub.com/vbatts/tar-split/archive/tar\ngithub.com/vbatts/tar-split/tar/asm\ngithub.com/vbatts/tar-split/tar/storage\n# github.com/vishvananda/netlink v1.3.1-0.20250209162617-655392bc778a\n## explicit; go 1.12\ngithub.com/vishvananda/netlink\ngithub.com/vishvananda/netlink/nl\n# github.com/vishvananda/netns v0.0.5\n## explicit; go 1.17\ngithub.com/vishvananda/netns\n```\n\n----------------------------------------\n\nTITLE: Installing Mode Package via Go Get\nDESCRIPTION: Command to install the Mode package using Go's package management system.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/tonistiigi/dchapes-mode/README.md#2025-04-10_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo get hg.sr.ht/~dchapes/mode\n```\n\n----------------------------------------\n\nTITLE: Apache License Boilerplate Notice Template\nDESCRIPTION: Standard boilerplate notice text for applying the Apache License 2.0 to a software project. Includes placeholders for copyright year and owner information.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/aws/aws-sdk-go-v2/service/ssooidc/LICENSE.txt#2025-04-10_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nCopyright [yyyy] [name of copyright owner]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Linking to Buildkit POC Repository in Markdown\nDESCRIPTION: This snippet provides a Markdown link to the proof-of-concept repository for Buildkit, a new build system for Docker.\nSOURCE: https://github.com/moby/moby/blob/master/reports/builder/2017-06-12.md#2025-04-10_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n[POC repo](https://github.com/tonistiigi/buildkit_poc)\n```\n\n----------------------------------------\n\nTITLE: Defining Descriptor Types in Protocol Buffers\nDESCRIPTION: Defines descriptor types for Protocol Buffers including FileDescriptorSet, FileDescriptorProto, DescriptorProto, and related nested types. These are used for reflection and metadata in Protocol Buffers.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/moby/swarmkit/v2/api/api.pb.txt#2025-04-10_snippet_3\n\nLANGUAGE: Protocol Buffers\nCODE:\n```\nfile {\n  name: \"google/protobuf/descriptor.proto\"\n  package: \"google.protobuf\"\n  message_type {\n    name: \"FileDescriptorSet\"\n    field {\n      name: \"file\"\n      number: 1\n      label: LABEL_REPEATED\n      type: TYPE_MESSAGE\n      type_name: \".google.protobuf.FileDescriptorProto\"\n      json_name: \"file\"\n    }\n  }\n  message_type {\n    name: \"FileDescriptorProto\"\n    // ... (fields omitted for brevity)\n  }\n  message_type {\n    name: \"DescriptorProto\"\n    // ... (fields and nested types omitted for brevity)\n  }\n  message_type {\n    name: \"ExtensionRangeOptions\"\n    // ... (fields omitted for brevity)\n  }\n  message_type {\n    name: \"FieldDescriptorProto\"\n    // ... (fields omitted for brevity)\n  }\n  // ... (other message types omitted for brevity)\n}\n```\n\n----------------------------------------\n\nTITLE: Importing SCTP Package in Go\nDESCRIPTION: This snippet shows the import of the SCTP (Stream Control Transmission Protocol) package for Go, which provides SCTP functionality.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/modules.txt#2025-04-10_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\ngithub.com/ishidawataru/sctp\n```\n\n----------------------------------------\n\nTITLE: Applying Apache License 2.0 Boilerplate Notice\nDESCRIPTION: This snippet provides the boilerplate notice to be included when applying the Apache License 2.0 to a project. It includes placeholders for the copyright year and owner, as well as the full text of the license notice.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/aws/aws-sdk-go-v2/service/internal/accept-encoding/LICENSE.txt#2025-04-10_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Applying Apache License 2.0 Boilerplate Notice\nDESCRIPTION: This snippet provides the boilerplate notice to be included when applying the Apache License 2.0 to a project. It includes placeholders for the copyright year and owner, as well as the standard license text and conditions.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/github.com/aws/aws-sdk-go-v2/config/LICENSE.txt#2025-04-10_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Markdown Redirect Notice\nDESCRIPTION: Markdown content providing information about the moved Docker Image Specification repository\nSOURCE: https://github.com/moby/moby/blob/master/image/spec/v1.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Docker Image Specification v1.0.0\n\nThis specification moved to a separate repository:\nhttps://github.com/moby/docker-image-spec\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module Dependencies for Moby Project\nDESCRIPTION: This snippet lists the required Go modules and their versions for the Moby project. It includes dependencies such as AWS SDK components, container runtimes, networking libraries, and various utility packages.\nSOURCE: https://github.com/moby/moby/blob/master/vendor/modules.txt#2025-04-10_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\n## explicit; go 1.20\ngithub.com/aws/smithy-go\ngithub.com/aws/smithy-go/auth\ngithub.com/aws/smithy-go/auth/bearer\ngithub.com/aws/smithy-go/context\ngithub.com/aws/smithy-go/document\ngithub.com/aws/smithy-go/encoding\ngithub.com/aws/smithy-go/encoding/httpbinding\ngithub.com/aws/smithy-go/encoding/json\ngithub.com/aws/smithy-go/encoding/xml\ngithub.com/aws/smithy-go/endpoints\ngithub.com/aws/smithy-go/internal/sync/singleflight\ngithub.com/aws/smithy-go/io\ngithub.com/aws/smithy-go/logging\ngithub.com/aws/smithy-go/middleware\ngithub.com/aws/smithy-go/private/requestcompression\ngithub.com/aws/smithy-go/ptr\ngithub.com/aws/smithy-go/rand\ngithub.com/aws/smithy-go/sync\ngithub.com/aws/smithy-go/time\ngithub.com/aws/smithy-go/transport/http\ngithub.com/aws/smithy-go/transport/http/internal/io\n# github.com/beorn7/perks v1.0.1\n## explicit; go 1.11\ngithub.com/beorn7/perks/quantile\n# github.com/bits-and-blooms/bitset v1.13.0\n## explicit; go 1.16\ngithub.com/bits-and-blooms/bitset\n# github.com/bmizerany/assert v0.0.0-20160611221934-b7ed37b82869\n## explicit\n# github.com/cenkalti/backoff/v4 v4.3.0\n## explicit; go 1.18\ngithub.com/cenkalti/backoff/v4\n# github.com/cespare/xxhash/v2 v2.3.0\n## explicit; go 1.11\ngithub.com/cespare/xxhash/v2\n# github.com/cilium/ebpf v0.17.3\n## explicit; go 1.22\ngithub.com/cilium/ebpf\ngithub.com/cilium/ebpf/asm\ngithub.com/cilium/ebpf/btf\ngithub.com/cilium/ebpf/internal\ngithub.com/cilium/ebpf/internal/kallsyms\ngithub.com/cilium/ebpf/internal/kconfig\ngithub.com/cilium/ebpf/internal/linux\ngithub.com/cilium/ebpf/internal/sys\ngithub.com/cilium/ebpf/internal/sysenc\ngithub.com/cilium/ebpf/internal/testutils/fdtrace\ngithub.com/cilium/ebpf/internal/tracefs\ngithub.com/cilium/ebpf/internal/unix\ngithub.com/cilium/ebpf/link\n# github.com/cloudflare/cfssl v1.6.4\n## explicit; go 1.18\ngithub.com/cloudflare/cfssl/api\ngithub.com/cloudflare/cfssl/auth\ngithub.com/cloudflare/cfssl/certdb\ngithub.com/cloudflare/cfssl/config\ngithub.com/cloudflare/cfssl/crypto/pkcs7\ngithub.com/cloudflare/cfssl/csr\ngithub.com/cloudflare/cfssl/errors\ngithub.com/cloudflare/cfssl/helpers\ngithub.com/cloudflare/cfssl/helpers/derhelpers\ngithub.com/cloudflare/cfssl/info\ngithub.com/cloudflare/cfssl/initca\ngithub.com/cloudflare/cfssl/log\ngithub.com/cloudflare/cfssl/ocsp/config\ngithub.com/cloudflare/cfssl/signer\ngithub.com/cloudflare/cfssl/signer/local\n# github.com/container-storage-interface/spec v1.5.0\n## explicit; go 1.16\ngithub.com/container-storage-interface/spec/lib/go/csi\n# github.com/containerd/cgroups/v3 v3.0.5\n## explicit; go 1.22.0\ngithub.com/containerd/cgroups/v3\ngithub.com/containerd/cgroups/v3/cgroup1\ngithub.com/containerd/cgroups/v3/cgroup1/stats\ngithub.com/containerd/cgroups/v3/cgroup2\ngithub.com/containerd/cgroups/v3/cgroup2/stats\n# github.com/containerd/console v1.0.4\n## explicit; go 1.13\ngithub.com/containerd/console\n# github.com/containerd/containerd/api v1.8.0\n## explicit; go 1.21\ngithub.com/containerd/containerd/api/events\ngithub.com/containerd/containerd/api/runtime/sandbox/v1\ngithub.com/containerd/containerd/api/services/containers/v1\ngithub.com/containerd/containerd/api/services/content/v1\ngithub.com/containerd/containerd/api/services/diff/v1\ngithub.com/containerd/containerd/api/services/events/v1\ngithub.com/containerd/containerd/api/services/images/v1\ngithub.com/containerd/containerd/api/services/introspection/v1\ngithub.com/containerd/containerd/api/services/leases/v1\ngithub.com/containerd/containerd/api/services/namespaces/v1\ngithub.com/containerd/containerd/api/services/sandbox/v1\ngithub.com/containerd/containerd/api/services/snapshots/v1\ngithub.com/containerd/containerd/api/services/streaming/v1\ngithub.com/containerd/containerd/api/services/tasks/v1\ngithub.com/containerd/containerd/api/services/transfer/v1\ngithub.com/containerd/containerd/api/services/version/v1\ngithub.com/containerd/containerd/api/types\ngithub.com/containerd/containerd/api/types/runc/options\ngithub.com/containerd/containerd/api/types/runtimeoptions/v1\ngithub.com/containerd/containerd/api/types/task\ngithub.com/containerd/containerd/api/types/transfer\n# github.com/containerd/containerd/v2 v2.0.4\n## explicit; go 1.22.0\ngithub.com/containerd/containerd/v2/client\ngithub.com/containerd/containerd/v2/cmd/containerd/server/config\ngithub.com/containerd/containerd/v2/contrib/nvidia\ngithub.com/containerd/containerd/v2/core/containers\ngithub.com/containerd/containerd/v2/core/content\ngithub.com/containerd/containerd/v2/core/content/proxy\ngithub.com/containerd/containerd/v2/core/diff\ngithub.com/containerd/containerd/v2/core/diff/proxy\ngithub.com/containerd/containerd/v2/core/events\ngithub.com/containerd/containerd/v2/core/events/proxy\ngithub.com/containerd/containerd/v2/core/images\ngithub.com/containerd/containerd/v2/core/images/archive\ngithub.com/containerd/containerd/v2/core/images/converter\ngithub.com/containerd/containerd/v2/core/images/usage\ngithub.com/containerd/containerd/v2/core/introspection\ngithub.com/containerd/containerd/v2/core/introspection/proxy\ngithub.com/containerd/containerd/v2/core/leases\ngithub.com/containerd/containerd/v2/core/leases/proxy\ngithub.com/containerd/containerd/v2/core/metadata\ngithub.com/containerd/containerd/v2/core/metadata/boltutil\ngithub.com/containerd/containerd/v2/core/mount\ngithub.com/containerd/containerd/v2/core/remotes\ngithub.com/containerd/containerd/v2/core/remotes/docker\ngithub.com/containerd/containerd/v2/core/remotes/docker/auth\ngithub.com/containerd/containerd/v2/core/remotes/docker/config\ngithub.com/containerd/containerd/v2/core/remotes/docker/schema1\ngithub.com/containerd/containerd/v2/core/remotes/errors\ngithub.com/containerd/containerd/v2/core/sandbox\ngithub.com/containerd/containerd/v2/core/sandbox/proxy\ngithub.com/containerd/containerd/v2/core/snapshots\ngithub.com/containerd/containerd/v2/core/snapshots/proxy\ngithub.com/containerd/containerd/v2/core/streaming\ngithub.com/containerd/containerd/v2/core/streaming/proxy\ngithub.com/containerd/containerd/v2/core/transfer\ngithub.com/containerd/containerd/v2/core/transfer/proxy\ngithub.com/containerd/containerd/v2/core/transfer/streaming\ngithub.com/containerd/containerd/v2/core/unpack\ngithub.com/containerd/containerd/v2/defaults\ngithub.com/containerd/containerd/v2/internal/cleanup\ngithub.com/containerd/containerd/v2/internal/fsverity\ngithub.com/containerd/containerd/v2/internal/kmutex\ngithub.com/containerd/containerd/v2/internal/randutil\ngithub.com/containerd/containerd/v2/internal/userns\ngithub.com/containerd/containerd/v2/pkg/apparmor\ngithub.com/containerd/containerd/v2/pkg/archive\ngithub.com/containerd/containerd/v2/pkg/archive/compression\ngithub.com/containerd/containerd/v2/pkg/archive/tarheader\ngithub.com/containerd/containerd/v2/pkg/cap\ngithub.com/containerd/containerd/v2/pkg/cio\ngithub.com/containerd/containerd/v2/pkg/deprecation\ngithub.com/containerd/containerd/v2/pkg/dialer\ngithub.com/containerd/containerd/v2/pkg/epoch\ngithub.com/containerd/containerd/v2/pkg/filters\ngithub.com/containerd/containerd/v2/pkg/gc\ngithub.com/containerd/containerd/v2/pkg/identifiers\ngithub.com/containerd/containerd/v2/pkg/kernelversion\ngithub.com/containerd/containerd/v2/pkg/labels\ngithub.com/containerd/containerd/v2/pkg/namespaces\ngithub.com/containerd/containerd/v2/pkg/oci\ngithub.com/containerd/containerd/v2/pkg/protobuf\ngithub.com/containerd/containerd/v2/pkg/protobuf/proto\ngithub.com/containerd/containerd/v2/pkg/protobuf/types\ngithub.com/containerd/containerd/v2/pkg/reference\ngithub.com/containerd/containerd/v2/pkg/rootfs\ngithub.com/containerd/containerd/v2/pkg/seccomp\ngithub.com/containerd/containerd/v2/pkg/snapshotters\ngithub.com/containerd/containerd/v2/pkg/sys\ngithub.com/containerd/containerd/v2/pkg/tracing\ngithub.com/containerd/containerd/v2/plugins\ngithub.com/containerd/containerd/v2/plugins/content/local\ngithub.com/containerd/containerd/v2/plugins/diff/walking\ngithub.com/containerd/containerd/v2/plugins/services\ngithub.com/containerd/containerd/v2/plugins/services/content/contentserver\ngithub.com/containerd/containerd/v2/plugins/snapshots/overlay/overlayutils\ngithub.com/containerd/containerd/v2/version\n# github.com/containerd/continuity v0.4.5\n## explicit; go 1.21\ngithub.com/containerd/continuity/devices\ngithub.com/containerd/continuity/driver\ngithub.com/containerd/continuity/fs\ngithub.com/containerd/continuity/sysx\n# github.com/containerd/errdefs v1.0.0\n## explicit; go 1.20\ngithub.com/containerd/errdefs\n# github.com/containerd/errdefs/pkg v0.3.0\n## explicit; go 1.22\ngithub.com/containerd/errdefs/pkg/errgrpc\ngithub.com/containerd/errdefs/pkg/internal/cause\ngithub.com/containerd/errdefs/pkg/internal/types\n# github.com/containerd/fifo v1.1.0\n## explicit; go 1.18\ngithub.com/containerd/fifo\n# github.com/containerd/go-cni v1.1.12\n## explicit; go 1.21\ngithub.com/containerd/go-cni\n# github.com/containerd/go-runc v1.1.0\n## explicit; go 1.18\ngithub.com/containerd/go-runc\n# github.com/containerd/log v0.1.0\n## explicit; go 1.20\ngithub.com/containerd/log\ngithub.com/containerd/log/logtest\n# github.com/containerd/nydus-snapshotter v0.15.0\n## explicit; go 1.22.0\ngithub.com/containerd/nydus-snapshotter/pkg/converter\ngithub.com/containerd/nydus-snapshotter/pkg/converter/tool\ngithub.com/containerd/nydus-snapshotter/pkg/label\n# github.com/containerd/platforms v1.0.0-rc.1\n## explicit; go 1.20\ngithub.com/containerd/platforms\n# github.com/containerd/plugin v1.0.0\n## explicit; go 1.20\ngithub.com/containerd/plugin\n# github.com/containerd/stargz-snapshotter/estargz v0.16.3\n## explicit; go 1.22.0\ngithub.com/containerd/stargz-snapshotter/estargz\ngithub.com/containerd/stargz-snapshotter/estargz/errorutil\n# github.com/containerd/ttrpc v1.2.7\n## explicit; go 1.19\ngithub.com/containerd/ttrpc\n# github.com/containerd/typeurl/v2 v2.2.3\n## explicit; go 1.21\ngithub.com/containerd/typeurl/v2\n# github.com/containernetworking/cni v1.2.3\n```"
  }
]