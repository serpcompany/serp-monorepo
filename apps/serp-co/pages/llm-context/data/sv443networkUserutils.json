[
  {
    "owner": "sv443-network",
    "repo": "userutils",
    "content": "TITLE: Creating Persistent Data Storage with DataStore in TypeScript\nDESCRIPTION: A class that manages JSON data with persistent storage to GM storage, localStorage, or sessionStorage. Supports automatic migration of outdated data formats and can be extended for custom storage implementations. Includes error handling and data validation.\nSOURCE: https://github.com/Sv443-Network/UserUtils/blob/main/docs.md#2025-04-16_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\nnew DataStore(options: DataStoreOptions)\n```\n\n----------------------------------------\n\nTITLE: Intercepting Window Events in TypeScript\nDESCRIPTION: Function to intercept event listeners for a specific event on the unsafeWindow or window object. Similar to interceptEvent, but specifically for global window events in userscripts.\nSOURCE: https://github.com/Sv443-Network/UserUtils/blob/main/docs.md#2025-04-16_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\ninterceptWindowEvent(\n  eventName: string,\n  predicate?: (event: Event) => boolean\n): void\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { interceptWindowEvent } from \"@sv443-network/userutils\";\n\n// prevent the pesky \"Are you sure you want to leave this page?\" popup\n// because no predicate is specified, all events will be discarded\ninterceptWindowEvent(\"beforeunload\");\n\n\n// discard all context menu commands that are not within `#my-element`:\ninterceptWindowEvent(\"contextmenu\", (event) =>\n  event.target instanceof HTMLElement && !event.target.closest(\"#my-element\")\n);\n```\n\n----------------------------------------\n\nTITLE: Enhanced Fetch API with Timeout Support in TypeScript\nDESCRIPTION: A drop-in replacement for the native fetch() function that adds timeout functionality. It defaults to a 10-second timeout and can be configured or disabled. It fully supports AbortController for manual cancellation.\nSOURCE: https://github.com/Sv443-Network/UserUtils/blob/main/docs.md#2025-04-16_snippet_55\n\nLANGUAGE: typescript\nCODE:\n```\nfetchAdvanced(input: string | Request | URL, options?: {\n  timeout?: number,\n  // any other options from fetch()\n}): Promise<Response>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { fetchAdvanced } from \"@sv443-network/userutils\";\n\nconst controller = new AbortController();\n\nfetchAdvanced(\"https://jokeapi.dev/joke/Any?safe-mode&format=json\", {\n  // times out after 5 seconds:\n  timeout: 5000,\n  // also accepts any other fetch options like headers and signal:\n  headers: {\n    \"Accept\": \"application/json\",\n  },\n  // makes the request abortable:\n  signal: controller.signal,\n}).then(async (response) => {\n  console.log(\"Fetch data:\", await response.json());\n}).catch((err) => {\n  console.error(\"Fetch error:\", err);\n});\n\n// can also be aborted manually before the timeout is reached:\ndocument.querySelector(\"button#cancel\")?.addEventListener(\"click\", () => {\n  controller.abort();\n});\n```\n\n----------------------------------------\n\nTITLE: Generating Random IDs with Configurable Properties in TypeScript\nDESCRIPTION: Generates random IDs with customizable length, radix, entropy, and case settings. Supports multiple numerical systems and enhanced entropy using Web Crypto API.\nSOURCE: https://github.com/Sv443-Network/UserUtils/blob/main/docs.md#2025-04-16_snippet_60\n\nLANGUAGE: typescript\nCODE:\n```\nimport { randomId } from \"@sv443-network/userutils\";\n\nrandomId();                    // \"1bda419a73629d4f\" (length 16, radix 16)\nrandomId(10);                  // \"f86cd354a4\"       (length 10, radix 16)\nrandomId(10, 2);               // \"1010001101\"       (length 10, radix 2)\nrandomId(10, 10);              // \"0183428506\"       (length 10, radix 10)\nrandomId(10, 36, false, true); // \"z46jFPa37R\"       (length 10, radix 36, random case)\n\n\nfunction benchmark(enhancedEntropy: boolean, randomCase: boolean) {\n  const timestamp = Date.now();\n  for(let i = 0; i < 10_000; i++)\n    randomId(16, 36, enhancedEntropy, randomCase);\n  console.log(`Generated 10k in ${Date.now() - timestamp}ms`)\n}\n\n// using Math.random():\nbenchmark(false, false); // Generated 10k in 239ms\nbenchmark(false, true);  // Generated 10k in 248ms\n\n// using crypto.getRandomValues():\nbenchmark(true, false);  // Generated 10k in 1076ms\nbenchmark(true, true);   // Generated 10k in 1054ms\n```\n\n----------------------------------------\n\nTITLE: Chaining SelectorObservers in TypeScript\nDESCRIPTION: Demonstrates how to chain multiple SelectorObserver instances for efficient DOM observation, including setting default options and creating sub-observers.\nSOURCE: https://github.com/Sv443-Network/UserUtils/blob/main/docs.md#2025-04-16_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SelectorObserver } from \"@sv443-network/userutils\";\nimport type { SelectorObserverOptions } from \"@sv443-network/userutils\";\n\n// apply a default debounce to all SelectorObserver instances:\nconst defaultOptions: SelectorObserverOptions = {\n  defaultDebounce: 100,\n};\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  // initialize generic observer that in turn initializes \"sub-observers\":\n  const fooObserver = new SelectorObserver(document.body, {\n    ...defaultOptions,\n    // define any other specific options here\n  });\n\n  const myElementSelector = \"#my-element\";\n\n  // this relatively expensive listener (as it is in the full <body> scope) will only fire once:\n  fooObserver.addListener(myElementSelector, {\n    listener: (element) => {\n      // only enable barObserver once its baseElement exists:\n      barObserver.enable();\n    },\n  });\n\n  // barObserver is created at the same time as fooObserver, but only enabled once #my-element exists\n  const barObserver = new SelectorObserver(element, {\n    ...defaultOptions,\n    // define any other specific options here\n  });\n\n  // this selector will be checked for immediately after `enable()` is called\n  // and on each subsequent mutation because `continuous` is set to true.\n  // however it is much less expensive as it is scoped to a lower element which will receive less DOM updates\n  barObserver.addListener(\".my-child-element\", {\n    all: true,\n    continuous: true,\n    listener: (elements) => {\n      console.log(\"Child elements found:\", elements);\n    },\n  });\n\n  // immediately enable fooObserver as the <body> is available as soon as \"DOMContentLoaded\" fires:\n  fooObserver.enable();\n});\n```\n\n----------------------------------------\n\nTITLE: Opening URLs in New Tabs in TypeScript\nDESCRIPTION: Function to open a URL in a new tab using GM.openInTab or fallback to creating and clicking an invisible anchor element. It supports opening in background and adding additional properties to the anchor element.\nSOURCE: https://github.com/Sv443-Network/UserUtils/blob/main/docs.md#2025-04-16_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nopenInNewTab(url: string, background?: boolean, additionalProps?: Partial<HTMLAnchorElement>): void\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { openInNewTab } from \"@sv443-network/userutils\";\n\ndocument.querySelector(\"#my-button\").addEventListener(\"click\", () => {\n  // open in background:\n  openInNewTab(\"https://example.org/\", true);\n});\n```\n\n----------------------------------------\n\nTITLE: Object-Oriented NanoEmitter Usage in TypeScript\nDESCRIPTION: Demonstrates how to use the NanoEmitter class in an object-oriented context. It shows event registration, emission, and unsubscription in a class that extends NanoEmitter.\nSOURCE: https://github.com/Sv443-Network/UserUtils/blob/main/docs.md#2025-04-16_snippet_47\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NanoEmitter } from \"@sv443-network/userutils\";\n\n// map of events for strong typing - the functions always return void\ninterface MyEventMap {\n  foo: (bar: string) => void;\n  baz: (qux: number) => void;\n}\n\nclass MyClass extends NanoEmitter<MyEventMap> {\n  constructor() {\n    super({\n      // allow emitting events from outside the class body:\n      publicEmit: true,\n    });\n\n    // the class can also listen to its own events:\n    this.once(\"baz\", (qux) => {\n      console.log(\"baz event (inside, once):\", qux);\n    });\n  }\n\n  public doStuff() {\n    // any call to the public emit() method, even when inside the own class, won't work if publicEmit is set to false:\n    this.emit(\"foo\", \"hello\");\n    this.emit(\"baz\", 42);\n    this.emit(\"foo\", \"world\");\n    // this one will always work when used inside the class and functions identically:\n    this.events.emit(\"baz\", 69);\n  }\n}\n\nconst myInstance = new MyClass();\nmyInstance.doStuff();\n\n// listeners attached with on() can be called multiple times:\nmyInstance.on(\"foo\", (bar) => {\n  console.log(\"foo event (outside):\", bar);\n});\n\n// throws a TS error since `events` is protected, but technically still works in JS:\nmyInstance.events.emit(\"foo\", \"hello\");\n\n// only works because publicEmit is set to true:\nmyInstance.emit(\"baz\", \"hello from the outside\");\n\n// remove all listeners:\nmyInstance.unsubscribeAll();\n```\n\n----------------------------------------\n\nTITLE: Serializing and Deserializing Data with DataStoreSerializer in TypeScript\nDESCRIPTION: This example demonstrates how to use the DataStoreSerializer class to serialize, deserialize, and manage data stores. It includes creating DataStore instances, serializing data, exporting it to a file, importing data, and resetting store data.\nSOURCE: https://github.com/Sv443-Network/UserUtils/blob/main/docs.md#2025-04-16_snippet_41\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DataStore, DataStoreSerializer, compress, decompress } from \"@sv443-network/userutils\";\n\n/** This store doesn't have migrations to run and also has no encodeData and decodeData functions */\nconst fooStore = new DataStore({\n  id: \"foo-data\",\n  defaultData: {\n    foo: \"hello\",\n  },\n  formatVersion: 1,\n});\n\n/** This store has migrations to run and also has encodeData and decodeData functions */\nconst barStore = new DataStore({\n  id: \"bar-data\",\n  defaultData: {\n    foo: \"hello\",\n  },\n  formatVersion: 2,\n  migrations: {\n    2: (oldData) => ({\n      ...oldData,\n      bar: \"world\",\n    }),\n  },\n  encodeData: (data) => compress(data, \"deflate\", \"string\"),\n  decodeData: (data) => decompress(data, \"deflate\", \"string\"),\n});\n\nconst serializer = new DataStoreSerializer([fooStore, barStore], {\n  addChecksum: true,\n  ensureIntegrity: true,\n});\n\nasync function exportMyDataPls() {\n  // first, make sure the persistent data of all stores is loaded into their caches:\n  await serializer.loadStoresData();\n\n  // now serialize the data:\n  const serializedData = await serializer.serialize();\n  // create a file and download it:\n  const blob = new Blob([serializedData], { type: \"application/json\" });\n  const url = URL.createObjectURL(blob);\n  const a = document.createElement(\"a\");\n  a.href = url;\n  a.download = `data_export-${new Date().toISOString()}.json`;\n  a.click();\n  a.remove();\n\n  // `serialize()` exports a stringified object that looks similar to this:\n  // [\n  //   {\n  //     \"id\": \"foo-data\",\n  //     \"data\": \"{\\\"foo\\\":\\\"hello\\\"}\", // not compressed or encoded because encodeData and decodeData are not set\n  //     \"formatVersion\": 1,\n  //     \"encoded\": false,\n  //     \"checksum\": \"420deadbeef69\"\n  //   },\n  //   {\n  //     \"id\": \"bar-data\",\n  //     \"data\": \"eJyrVkrKTFeyUkrOKM1LLy1WqgUAMvAF6g==\", // compressed because encodeData and decodeData are set\n  //     \"formatVersion\": 2,\n  //     \"encoded\": true,\n  //     \"checksum\": \"69beefdead420\"\n  //   }\n  // ]\n}\n\nasync function importMyDataPls() {\n  // grab the data from the file by using the system file picker or a text field or something similar\n  const data = await getDataFromSomewhere();\n\n  try {\n    // import the data and run migrations if necessary\n    await serializer.deserialize(data);\n  }\n  catch(err) {\n    console.error(err);\n    alert(`Data import failed: ${err}`);\n  }\n}\n\nasync function resetMyDataPls() {\n  // reset the data of all stores in both the cache and the persistent storage\n  await serializer.resetStoresData();\n}\n\nasync function exportOnlyFoo() {\n  // with the `serializePartial()` method, you can export only the data of specific stores:\n  const serializedExample1 = await serializer.serializePartial([\"foo-data\"]);\n\n  // or using a matcher function:\n  const serializedExample2 = await serializer.serializePartial((id) => id.startsWith(\"foo\"));\n}\n```\n\n----------------------------------------\n\nTITLE: Installing UserUtils with Package Managers\nDESCRIPTION: Commands for installing the UserUtils library using various package managers like npm, pnpm, yarn, npx jsr, and deno.\nSOURCE: https://github.com/Sv443-Network/UserUtils/blob/main/README-summary.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @sv443-network/userutils\npnpm i @sv443-network/userutils\nyarn add @sv443-network/userutils\nnpx jsr install @sv443-network/userutils\ndeno add jsr:@sv443-network/userutils\n```\n\n----------------------------------------\n\nTITLE: Functional NanoEmitter Usage in TypeScript\nDESCRIPTION: Shows how to use the NanoEmitter class in a functional programming context. It demonstrates creating an emitter instance, registering events, emitting events, and unsubscribing from all events.\nSOURCE: https://github.com/Sv443-Network/UserUtils/blob/main/docs.md#2025-04-16_snippet_48\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NanoEmitter } from \"@sv443-network/userutils\";\n\n// map of events for strong typing - the functions always return void\ninterface MyEventMap {\n  foo: (bar: string) => void;\n  baz: (qux: number) => void;\n}\n\nconst myEmitter = new NanoEmitter<MyEventMap>({\n  // very important for functional usage - allow emitting events from outside the class body:\n  publicEmit: true,\n});\n\nmyEmitter.on(\"foo\", (bar) => {\n  console.log(\"foo event:\", bar);\n});\n\nmyEmitter.once(\"baz\", (qux) => {\n  console.log(\"baz event (once):\", qux);\n});\n\nfunction doStuff() {\n  // only works if publicEmit is set to true\n  myEmitter.emit(\"foo\", \"hello\");\n  myEmitter.emit(\"baz\", 42);\n  myEmitter.emit(\"foo\", \"world\");\n  myEmitter.emit(\"baz\", 69);\n\n  myEmitter.emit(\"foo\", \"hello from the outside\");\n\n  myEmitter.unsubscribeAll();\n}\n\ndoStuff();\n```\n\n----------------------------------------\n\nTITLE: Implementing DataStore with Compression in TypeScript\nDESCRIPTION: Demonstrates how to initialize and use a DataStore instance with data compression, type definitions, migrations, and storage configuration. Shows complete workflow including data loading, updating, and saving.\nSOURCE: https://github.com/Sv443-Network/UserUtils/blob/main/docs.md#2025-04-16_snippet_39\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DataStore, compress, decompress } from \"@sv443-network/userutils\";\n\n/** Example: Userscript configuration data */\ninterface MyConfig {\n  foo: string;\n  bar: number;\n  baz: string;\n  qux: string;\n}\n\n/** Default data returned by getData() calls until setData() is used and also fallback data if something goes wrong */\nconst defaultData: MyConfig = {\n  foo: \"hello\",\n  bar: 42,\n  baz: \"xyz\",\n  qux: \"something\",\n};\n/** If any properties are added to, removed from, or renamed in the MyConfig type, increment this number */\nconst formatVersion = 2;\n/** These are functions that migrate outdated data to the latest format - make sure a function exists for every previously used formatVersion and that no numbers are skipped! */\nconst migrations = {\n  // migrate from format version 0 to 1\n  1: (oldData: Record<string, unknown>) => {\n    return {\n      foo: oldData.foo,\n      bar: oldData.bar,\n      baz: \"world\",\n    };\n  },\n  // asynchronously migrate from format version 1 to 2\n  2: async (oldData: Record<string, unknown>) => {\n    // using arbitrary async operations for the new format:\n    const qux = await grabQuxDataAsync();\n    return {\n      foo: oldData.foo,\n      bar: oldData.bar,\n      baz: oldData.baz,\n      qux,\n    };\n  },\n};\n\n// You probably want to export this instance (or helper functions) so you can use it anywhere in your script:\nexport const manager = new DataStore({\n  /** A unique ID for this instance */\n  id: \"my-userscript-config\",\n  /** Default, initial and fallback data */\n  defaultData,\n  /** The current version of the data format - should be a whole number that is only ever incremented */\n  formatVersion,\n  /** Data format migration functions called when the formatVersion is increased */\n  migrations,\n  /** If the data was saved under different ID(s) before, providing them here will make sure the data is migrated to the current ID when `loadData()` is called */\n  migrateIds: [\"my-data\", \"config\"],\n  /**\n   * Where the data should be stored.  \n   * For example, you could use `\"sessionStorage\"` to make the data be automatically deleted after the browser session is finished, or use `\"localStorage\"` if you don't have access to GM storage for some reason.\n   */\n  storageMethod: \"localStorage\",\n\n  // Compression example:\n  // Adding the following will save space at the cost of a little bit of performance (only for the initial loading and every time new data is saved)\n  // Feel free to use your own functions here, as long as they take in the stringified JSON and return another string, either synchronously or asynchronously\n  // Either both of these properties or none of them should be set\n\n  /** Compresses the data using the \"deflate\" algorithm and digests it as a string */\n  encodeData: (data) => compress(data, \"deflate\", \"string\"),\n  /** Decompresses the \"deflate\" encoded data as a string */\n  decodeData: (data) => decompress(data, \"deflate\", \"string\"),\n});\n\n/** Entrypoint of the userscript */\nasync function init() {\n  // wait for the data to be loaded from persistent storage\n  // if no data was saved in persistent storage before or getData() is called before loadData(), the value of options.defaultData will be returned\n  // if the previously saved data needs to be migrated to a newer version, it will happen inside this function call\n  const configData = await manager.loadData();\n\n  console.log(configData.foo); // \"hello\"\n\n  // update the data\n  configData.foo = \"world\";\n  configData.bar = 123;\n\n  // save the updated data - synchronously to the cache and asynchronously to persistent storage\n  manager.saveData(configData).then(() => {\n    console.log(\"Data saved to persistent storage!\");\n  });\n\n  // the internal cache is updated synchronously, so the updated data can be accessed before the Promise resolves:\n  console.log(manager.getData().foo); // \"world\"\n}\n\ninit();\n```\n\n----------------------------------------\n\nTITLE: Advanced Mixins Implementation in TypeScript\nDESCRIPTION: Showcases advanced usage of the Mixins class, including auto-incrementing priority, context objects, and complex mixin chains. It demonstrates how to handle different types of mixins and their interactions.\nSOURCE: https://github.com/Sv443-Network/UserUtils/blob/main/docs.md#2025-04-16_snippet_46\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Mixins } from \"@sv443-network/userutils\";\n\nconst ac = new AbortController();\n// if removeAllMixins() is called, all mixins will be removed from the myMixins instance:\nconst { abort: removeAllMixins } = ac;\n\n// create Mixins instance with auto-incrementing priority:\nconst myMixins = new Mixins<{\n  /** Here is a perfect place to describe what your value does and give ideas on how to modify it */\n  foo: (val: number) => number;\n  /** It is especially useful to document your mixins in an environment with user submitted mods/plugins */\n  bar: (v: string, ctx: { baz: number }) => Promise<string>;\n  /**\n   * In this example, to calculate the gravity of the player character in a game engine, mods could interject and modify the gravity value.  \n   * In this JSDoc comment, you should explain the default value, the general range of values and the effect of the value on the game.  \n   * You should also explain the context object and its properties.\n   */\n  playerGravity: (val: number, ctx: { base: 1.575 }) => number;\n  /**\n   * All JS types can be passed, not just JSON-serializable types, so you can also use mixins to modify an object.  \n   * Also, you are able to pass complex objects in the context parameter to allow for more advanced modifications and multidirectional data flow.\n   */\n  playerProps: (val: PlayerProps, ctx: { player: Player, lobby: Lobby, currentTick: bigint, pauseGame: () => void }) => PlayerProps;\n}>({\n  autoIncrementPriority: true,\n  defaultSignal: ac.signal,\n});\n\n\n// foo:\n\n// main function:\nfunction calcFoo(val: number) {\n  // order of operations:\n  // 1. val = val ** 2\n  // 2. val / 2   (source 2 mixin)\n  // 3. val * 2   (source 3 mixin)\n  // 4. val + 1   (source 1 mixin)\n  return myMixins.resolve(\"foo\", val ** 2);\n}\n\n// mixin from source 1 (priority 0):\nmyMixins.add(\"foo\", (val) => {\n  return val + 1;\n});\n\n// mixin from source 2 (highest possible priority):\nmyMixins.add(\"foo\", (val) => {\n  return val / 2;\n}, {\n  // use highest possible priority (highly discouraged unless it's absolutely necessary):\n  priority: Number.MAX_SAFE_INTEGER,\n});\n\n// mixin from source 3 (priority 1):\nmyMixins.add(\"foo\", (val) => {\n  return val * 2;\n});\n\ngetFoo(10); // 10 ** 2 / 2 * 2 + 1 = 101\n\n\n// bar:\n\n// some global variable that will be provided as context to the mixin:\nvar baz = 1337;\n\n// main function:\nasync function getBar(val: string) {\n  // order of operations:\n  // 1. val             (source 2 mixin)\n  // 2. `${val}-${baz}` (source 3 mixin with stopPropagation)\n  // 3. (skipped)       (source 1 mixin)\n  // result: \"Hello-1337\"\n\n  // context object is mandatory because of the generic type at `new Mixins<...>()`:\n  // also, resolve returns a Promise because the mixin function signature is async:\n  return await myMixins.resolve(\"bar\", val, { baz });\n}\n\n// mixin from source 1 (priority 0):\nmyMixins.add(\"bar\", (val) => `*this will never be applied* ${val}`);\n\n// mixin from source 2 (priority 1):\n// while baz is >= 1000, this mixin is practically disabled:\nmyMixins.add(\"bar\", (val, ctx) => {\n  if(ctx.baz < 1000)\n    return `${val} < 1000`;\n  // disable this mixin if baz >= 1000 by returning the unmodified input value:\n  return val;\n}, {\n  priority: 1,\n});\n\nconst acBarSrc3 = new AbortController();\nconst { abort: removeBarSrc3 } = acBarSrc3;\n\n// mixin from source 3 (priority 0.5 & stopPropagation):\nmyMixins.add(\"bar\", (val, ctx) => new Promise((resolve) => {\n  // async mixin chains allow for lazy-loading and other async operations:\n  setTimeout(() => {\n    resolve(`${val}-${ctx.baz}`);\n  }, 1000);\n}), {\n  priority: 0.5,\n  stopPropagation: true,\n  signal: acBarSrc3.signal,\n});\n\n// applies source 2 (practically disabled) and source 3:\nawait getBar(\"Hello\"); // \"Hello-1337\"\n\n// remove source 3 from \"bar\" mixins and set baz < 1000:\nremoveBarSrc3();\nbaz = 999;\n\n// only source 2 is left:\nawait getBar(\"Hello\"); // \"Hello < 1000\"\n```\n\n----------------------------------------\n\nTITLE: Adding Global Styles in TypeScript\nDESCRIPTION: Shows how to add global CSS styles to a page by injecting a style element into the document head.\nSOURCE: https://github.com/Sv443-Network/UserUtils/blob/main/docs.md#2025-04-16_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport { addGlobalStyle } from \"@sv443-network/userutils\";\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  addGlobalStyle(`\n    body {\n      background-color: red;\n    }\n  `);\n});\n```\n\n----------------------------------------\n\nTITLE: DOM Load Event Handling in TypeScript\nDESCRIPTION: Shows how to use onDomLoad to execute code when the DOM is loaded, with both callback and Promise-based approaches.\nSOURCE: https://github.com/Sv443-Network/UserUtils/blob/main/docs.md#2025-04-16_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport { onDomLoad } from \"@sv443-network/userutils\";\n\n// callback gets executed at basically the same time as the `console.log(\"DOM loaded!\")` below:\nonDomLoad(() => {\n  console.log(\"DOM has finished loading.\");\n});\n\ndocument.addEventListener(\"DOMContentLoaded\", async () => {\n  console.log(\"DOM loaded!\");\n\n  // immediately resolves because the DOM is already loaded:\n  await onDomLoad();\n\n  console.log(\"DOM has finished loading.\");\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Debouncer Event Handling\nDESCRIPTION: Example showing how to use the Debouncer class to handle window resize events with various configuration options.\nSOURCE: https://github.com/Sv443-Network/UserUtils/blob/main/docs.md#2025-04-16_snippet_50\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Debouncer } from \"@sv443-network/userutils\";\n\nconst deb = new Debouncer(); // defaults to 200ms and \"immediate\"\n\n// register a function to be called when the debouncer triggers\ndeb.addListener(onResize);\n\nwindow.addEventListener(\"resize\", (evt) => {\n  // arguments will be passed along to all registered listeners\n  deb.call(evt);\n});\n\nfunction onResize(evt: Event) {\n  console.log(\"Resized to:\", window.innerWidth, \"x\", window.innerHeight);\n\n  // timeout and type can be modified after the fact:\n  deb.setTimeout(500);\n  deb.setType(\"idle\");\n}\n\n// call these from anywhere else to detach the registered listeners:\n\nfunction removeResizeListener() {\n  deb.removeListener(onResize);\n}\n\nfunction removeAllListeners() {\n  deb.removeAllListeners();\n}\n\n// or using NanoEmitter's event system:\n\ndeb.on(\"call\", (...args) => {\n  console.log(\"Debounced call executed with:\", args);\n});\n\ndeb.on(\"change\", (timeout, type) => {\n  console.log(\"Timeout changed to:\", timeout);\n  console.log(\"Edge type changed to:\", type);\n});\n```\n\n----------------------------------------\n\nTITLE: Computing Hash Values using SubtleCrypto API in TypeScript\nDESCRIPTION: Computes a hash/checksum of a string or ArrayBuffer using specified algorithm (SHA-256 by default). Requires HTTPS context and uses SubtleCrypto API.\nSOURCE: https://github.com/Sv443-Network/UserUtils/blob/main/docs.md#2025-04-16_snippet_59\n\nLANGUAGE: typescript\nCODE:\n```\nimport { computeHash } from \"@sv443-network/userutils\";\n\nasync function run() {\n  const hash1 = await computeHash(\"Hello, World!\");\n  const hash2 = await computeHash(\"Hello, World!\");\n\n  console.log(hash1);           // dffd6021bb2bd5b0af676290809ec3a53191dd81c7f70a4b28688a362182986f\n  console.log(hash1 === hash2); // true (same input = same output)\n\n  const hash3 = await computeHash(\"Hello, world!\"); // lowercase \"w\"\n  console.log(hash3); // 315f5bdb76d078c43b8ac0064e4a0164612b1fce77c869345bfc94c75894edd3\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Using getUnsafeWindow in TypeScript\nDESCRIPTION: Shows how to use getUnsafeWindow to access the unsandboxed window object in userscripts for dispatching events that might be rejected by websites.\nSOURCE: https://github.com/Sv443-Network/UserUtils/blob/main/docs.md#2025-04-16_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getUnsafeWindow } from \"@sv443-network/userutils\";\n\n// trick the site into thinking the mouse was moved:\nconst mouseEvent = new MouseEvent(\"mousemove\", {\n  view: getUnsafeWindow(),\n  screenY: 69,\n  screenX: 420,\n  movementX: 10,\n  movementY: 0,\n});\n\ndocument.body.dispatchEvent(mouseEvent);\n```\n\n----------------------------------------\n\nTITLE: Preloading Images in TypeScript\nDESCRIPTION: Function to preload images into browser cache by creating invisible <img> elements. It loads images in parallel and returns a Promise that resolves with an array of PromiseSettledResults.\nSOURCE: https://github.com/Sv443-Network/UserUtils/blob/main/docs.md#2025-04-16_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\npreloadImages(urls: string[], rejects?: boolean): Promise<Array<PromiseSettledResult<HTMLImageElement>>>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { preloadImages } from \"@sv443-network/userutils\";\n\npreloadImages([\n  \"https://example.org/image1.png\",\n  \"https://example.org/image2.png\",\n  \"https://example.org/image3.png\",\n], true)\n  .then((results) => {\n    console.log(\"Images preloaded. Results:\", results);\n  })\n  .catch((results) => {\n    console.error(\"Couldn't preload all images. Results:\", results);\n  });\n```\n\n----------------------------------------\n\nTITLE: Usage Example of Dialog Class in TypeScript\nDESCRIPTION: Demonstrates how to create and use a Dialog instance with custom render functions for header, body, and footer. Shows event handling for open and close events, and includes usage of static methods.\nSOURCE: https://github.com/Sv443-Network/UserUtils/blob/main/docs.md#2025-04-16_snippet_43\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Dialog } from \"@sv443-network/userutils\";\n\nconst fooDialog = new Dialog({\n  id: \"foo-dialog\",\n  width: 400,\n  height: 300,\n  renderHeader() {\n    const header = document.createElement(\"div\");\n    header.textContent = \"This is the header\";\n    return header;\n  },\n  renderBody() {\n    const body = document.createElement(\"div\");\n    body.textContent = \"This is the body\";\n    return body;\n  },\n  renderFooter() {\n    const footer = document.createElement(\"div\");\n    footer.textContent = \"This is the footer\";\n    return footer;\n  },\n  closeOnBgClick: true,\n  closeOnEscPress: true,\n  destroyOnClose: false,\n  unmountOnClose: true,\n  removeListenersOnDestroy: true,\n  small: false,\n  verticalAlign: \"center\",\n  strings: {\n    closeDialogTooltip: \"Click to close\",\n  },\n  dialogCss: getMyCustomDialogCss(),\n});\n\nfooDialog.on(\"close\", () => {\n  console.log(\"Dialog closed\");\n});\n\nfooDialog.on(\"open\", () => {\n  console.log(\"Currently open dialogs:\", Dialog.getOpenDialogs());\n});\n\nfooDialog.open();\n```\n\n----------------------------------------\n\nTITLE: Initializing SelectorObserver in TypeScript\nDESCRIPTION: Demonstrates basic usage of SelectorObserver class for DOM element observation including single-shot and continuous listeners with custom options. Shows how to observe DOM mutations and handle element changes.\nSOURCE: https://github.com/Sv443-Network/UserUtils/blob/main/docs.md#2025-04-16_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SelectorObserver } from \"@sv443-network/userutils\";\n\n// adding a single-shot listener before the element exists:\nconst fooObserver = new SelectorObserver(\"body\");\n\nfooObserver.addListener(\"#my-element\", {\n  listener: (element) => {\n    console.log(\"Element found:\", element);\n  },\n});\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  // starting observation after the <body> element is available:\n  fooObserver.enable();\n\n\n  // adding custom observer options:\n\n  const barObserver = new SelectorObserver(document.body, {\n    // only check if the following attributes change:\n    attributeFilter: [\"class\", \"style\", \"data-whatever\"],\n    // debounce all listeners by 100ms unless specified otherwise:\n    defaultDebounce: 100,\n    // \"immediate\" means listeners are called immediately and use the debounce as a timeout between subsequent calls - see the Debouncer class for a better explanation\n    defaultDebounceType: \"immediate\",\n    // other settings from the MutationObserver API can be set here too - see https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver/observe#options\n  });\n\n  barObserver.addListener(\"#my-element\", {\n    listener: (element) => {\n      console.log(\"Element's attributes changed:\", element);\n    },\n  });\n\n  barObserver.addListener(\"#my-other-element\", {\n    // set the debounce higher than provided by the defaultDebounce property:\n    debounce: 250,\n    // change the type for this specific listener:\n    debounceType: \"idle\",\n    listener: (element) => {\n      console.log(\"Other element's attributes changed:\", element);\n    },\n  });\n\n  barObserver.enable();\n\n\n  // using custom listener options:\n\n  const bazObserver = new SelectorObserver(document.body);\n\n  // for TypeScript, specify that input elements are returned by the listener:\n  const unsubscribe = bazObserver.addListener<HTMLInputElement>(\"input\", {\n    all: true,        // use querySelectorAll() instead of querySelector()\n    continuous: true, // don't remove the listener after it was called once\n    debounce: 50,     // debounce the listener by 50ms\n    listener: (elements) => {\n      // type of `elements` is NodeListOf<HTMLInputElement>\n      console.log(\"Input elements found:\", elements);\n    },\n  });\n\n  bazObserver.enable();\n\n  window.addEventListener(\"something\", () => {\n    // remove the listener after the event \"something\" was dispatched:\n    unsubscribe();\n  });\n\n\n  // use a different element as the base:\n\n  const myElement = document.querySelector(\"#my-element\");\n  if(myElement) {\n    const quxObserver = new SelectorObserver(myElement);\n\n    quxObserver.addListener(\"#my-child-element\", {\n      listener: (element) => {\n        console.log(\"Child element found:\", element);\n      },\n    });\n\n    quxObserver.enable();\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Data Compression Utility in TypeScript\nDESCRIPTION: A utility function for compressing strings or ArrayBuffers using compression formats like gzip or deflate. It can output the compressed data as a base64 string or ArrayBuffer, and is more efficient with larger input data.\nSOURCE: https://github.com/Sv443-Network/UserUtils/blob/main/docs.md#2025-04-16_snippet_57\n\nLANGUAGE: typescript\nCODE:\n```\n// return as a base64 string:\ncompress(input: string | ArrayBuffer, compressionFormat: CompressionFormat, outputType?: \"base64\"): Promise<string>\n// return as an ArrayBuffer / Uint8Array:\ncompress(input: string | ArrayBuffer, compressionFormat: CompressionFormat, outputType: \"arrayBuffer\"): Promise<ArrayBuffer>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { compress } from \"@sv443-network/userutils\";\n\n// using gzip:\n\nconst fooGz = await compress(\"Hello, World!\", \"gzip\");\nconst barGz = await compress(\"Hello, World!\".repeat(20), \"gzip\");\n\n// not as efficient with short strings but can save quite a lot of space with larger strings, see the difference between these two:\nconsole.log(fooGz); // \"H4sIAAAAAAAAE/NIzcnJ11EIzy/KSVEEANDDSuwNAAAA\"\nconsole.log(barGz); // \"H4sIAAAAAAAAE/NIzcnJ11EIzy/KSVH0GJkcAKOPcmYEAQAA\"\n\n// depending on the type of data you might want to use a different compression format like deflate:\n\nconst fooDeflate = await compress(\"Hello, World!\", \"deflate\");\nconst barDeflate = await compress(\"Hello, World!\".repeat(20), \"deflate\");\n\n// again, it's not as efficient initially but gets better with longer inputs:\nconsole.log(fooDeflate); // \"eJzzSM3JyddRCM8vyklRBAAfngRq\"\nconsole.log(barDeflate); // \"eJzzSM3JyddRCM8vyklR9BiZHAAIEVg1\"\n```\n\n----------------------------------------\n\nTITLE: Intercepting Events in TypeScript\nDESCRIPTION: Function to intercept event listeners for a specific event on a given object. It prevents listeners from being called based on a predicate function. Useful for controlling event propagation and handling.\nSOURCE: https://github.com/Sv443-Network/UserUtils/blob/main/docs.md#2025-04-16_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\ninterceptEvent(\n  eventObject: EventTarget,\n  eventName: string,\n  predicate?: (event: Event) => boolean\n): void\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { interceptEvent } from \"@sv443-network/userutils\";\n\ninterceptEvent(document.body, \"click\", (event) => {\n  // prevent all click events on <a> elements within the entire <body>\n  if(event.target instanceof HTMLAnchorElement) {\n    console.log(\"Intercepting click event:\", event);\n    return true;\n  }\n  return false; // allow all other click events through\n});\n```\n\n----------------------------------------\n\nTITLE: Data Decompression Utility in TypeScript\nDESCRIPTION: A utility function for decompressing base64 strings or ArrayBuffers that were previously compressed. It supports various compression formats and can output the data as a string or ArrayBuffer.\nSOURCE: https://github.com/Sv443-Network/UserUtils/blob/main/docs.md#2025-04-16_snippet_58\n\nLANGUAGE: typescript\nCODE:\n```\n// return as a string:\ndecompress(input: string | ArrayBuffer, compressionFormat: CompressionFormat, outputType?: \"string\"): Promise<string>\n// return as an ArrayBuffer / Uint8Array:\ndecompress(input: string | ArrayBuffer, compressionFormat: CompressionFormat, outputType: \"arrayBuffer\"): Promise<ArrayBuffer>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { compress, decompress } from \"@sv443-network/userutils\";\n\nconst compressed = await compress(\"Hello, World!\".repeat(20), \"gzip\");\n\nconsole.log(compressed); // \"H4sIAAAAAAAAE/NIzcnJ11EIzy/KSVH0GJkcAKOPcmYEAQAA\"\n\nconst decompressed = await decompress(compressed, \"gzip\");\n\nconsole.log(decompressed); // \"Hello, World!\" * 20\n```\n\n----------------------------------------\n\nTITLE: Randomizing Arrays in TypeScript\nDESCRIPTION: Function that returns a randomized copy of an array without mutating the original. The original array remains unchanged while the returned array has the same items in a random order.\nSOURCE: https://github.com/Sv443-Network/UserUtils/blob/main/docs.md#2025-04-16_snippet_63\n\nLANGUAGE: typescript\nCODE:\n```\nrandomizeArray(array: Array): Array\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { randomizeArray } from \"@sv443-network/userutils\";\n\nconst foo = [1, 2, 3, 4, 5, 6];\n\nconsole.log(randomizeArray(foo)); // [3, 1, 5, 2, 4, 6]\nconsole.log(randomizeArray(foo)); // [4, 5, 2, 1, 6, 3]\n\nconsole.log(foo); // [1, 2, 3, 4, 5, 6] - original array is not mutated\n```\n\n----------------------------------------\n\nTITLE: Mathematical Utility Functions in TypeScript\nDESCRIPTION: Defines several mathematical utility functions including clamp(), mapRange(), randRange(), digitCount(), and roundFixed(). These functions provide various numerical operations and manipulations.\nSOURCE: https://github.com/Sv443-Network/UserUtils/blob/main/docs.md#2025-04-16_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\n// clamp()\nclamp(num: number, min: number, max: number): number\nclamp(num: number, max: number): number\n\n// mapRange()\nmapRange(value: number, range1min: number, range1max: number, range2min: number, range2max: number): number\nmapRange(value: number, range1max: number, range2max: number): number\n\n// randRange()\nrandRange(min: number, max: number, enhancedEntropy?: boolean): number\nrandRange(max: number, enhancedEntropy?: boolean): number\n\n// digitCount()\ndigitCount(num: number | Stringifiable, withDecimals = true): number\n\n// roundFixed()\nroundFixed(num: number, fractionDigits: number): number\n```\n\n----------------------------------------\n\nTITLE: Including UserUtils in Userscripts via CDN (Versioned)\nDESCRIPTION: Userscript header directives for including the UserUtils library from CDNs with specific versions, which is the recommended approach to prevent breaking changes.\nSOURCE: https://github.com/Sv443-Network/UserUtils/blob/main/README-summary.md#2025-04-16_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n// @require https://cdn.jsdelivr.net/npm/@sv443-network/userutils@INSERT_VERSION/dist/index.global.js\n// @require https://unpkg.com/@sv443-network/userutils@INSERT_VERSION/dist/index.global.js\n```\n\n----------------------------------------\n\nTITLE: String Template Substitution with insertValues() in TypeScript\nDESCRIPTION: A utility function for inserting values into a string with placeholders in the format %n, where n is the position number starting at 1. Values are stringified before insertion, and missing values leave placeholders unchanged.\nSOURCE: https://github.com/Sv443-Network/UserUtils/blob/main/docs.md#2025-04-16_snippet_56\n\nLANGUAGE: typescript\nCODE:\n```\ninsertValues(input: string, ...values: Stringifiable[]): string\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { insertValues } from \"@sv443-network/userutils\";\n\ninsertValues(\"Hello, %1!\", \"World\");                        // \"Hello, World!\"\ninsertValues(\"Hello, %1! My name is %2.\", \"World\", \"John\"); // \"Hello, World! My name is John.\"\ninsertValues(\"Testing %1\", { toString: () => \"foo\" });      // \"Testing foo\"\n\n// using an array for the values and not passing enough arguments:\nconst values = [\"foo\", \"bar\", \"baz\"];\ninsertValues(\"Testing %1, %2, %3 and %4\", ...values); // \"Testing foo, bar and baz and %4\"\n```\n\n----------------------------------------\n\nTITLE: Translating Strings with tr.for() in TypeScript\nDESCRIPTION: Function that returns a translation for a given key in a specified language. If the key doesn't exist in the current language or fallback language, the key itself is returned. Supports argument insertion with transform functions.\nSOURCE: https://github.com/Sv443-Network/UserUtils/blob/main/docs.md#2025-04-16_snippet_64\n\nLANGUAGE: typescript\nCODE:\n```\ntr.for<TTrKey extends string = string>(language: string, key: TTrKey, ...args: Stringifiable[]): string\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { tr } from \"@sv443-network/userutils\";\n\ntr.addTranslations(\"en\", {\n  hello: \"Hello, World!\",\n  goodbye: \"Goodbye, World!\",\n});\n\ntr.addTranslations(\"de\", {\n  hello: \"Hallo, Welt!\",\n  // goodbye is missing here\n});\n\ntr.setFallbackLanguage(\"en\");\n\ntr.for(\"en\", \"hello\"); // \"Hello, World!\"\ntr.for(\"de\", \"hello\"); // \"Hallo, Welt!\"\n\n// these calls fall back to \"en\":\ntr.for(\"de\", \"goodbye\");      // \"Goodbye, World!\"\ntr.for(undefined, \"goodbye\"); // \"Goodbye, World!\"\n```\n\n----------------------------------------\n\nTITLE: Using Standalone Debounce Function\nDESCRIPTION: Example demonstrating the usage of the standalone debounce function with various scenarios including accessing the internal Debouncer instance.\nSOURCE: https://github.com/Sv443-Network/UserUtils/blob/main/docs.md#2025-04-16_snippet_52\n\nLANGUAGE: typescript\nCODE:\n```\nimport { debounce } from \"@sv443-network/userutils\";\n\n// simple example:\nwindow.addEventListener(\"resize\", debounce((evt) => {\n  console.log(\"Resized to:\", window.innerWidth, \"x\", window.innerHeight);\n}));\n\n// or if you need access to the Debouncer instance:\n\nfunction myFunc(iteration: number) {\n  // for the edge type \"immediate\", iteration 0 and 19 will *always* be called\n  // this is so you can react immediately and always have the latest data at the end\n  console.log(`Call #${iteration} went through!`);\n}\n\n// debouncedFunction can be called at very short intervals but will never let calls through twice within 0.5s:\nconst debouncedFunction = debounce(myFunc, 500);\n\nfunction increaseTimeout() {\n  // instance can be accessed on the function returned by debounce()\n  debouncedFunction.debouncer.setTimeout(debouncedFunction.debouncer.getTimeout() + 100);\n}\n\n// and now call the function a bunch of times with varying intervals:\n\nlet i = 0;\nfunction callFunc() {\n  debouncedFunction(i, Date.now());\n\n  i++;\n  // call the function 20 times with a random interval between 0 and 1s (weighted towards the lower end):\n  if(i < 20)\n    setTimeout(callFunc, Math.floor(1000 * Math.pow(Math.random(), 2.5)));\n}\n\n// same as with Debouncer, you can use NanoEmitter's event system:\n\ndebouncedFunction.debouncer.on(\"call\", (...args) => {\n  console.log(\"Debounced call executed with:\", args);\n});\n\ndebouncedFunction.debouncer.on(\"change\", (timeout, type) => {\n  console.log(\"Timeout changed to:\", timeout);\n  console.log(\"Edge type changed to:\", type);\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Translations with tr.addTranslations() in TypeScript\nDESCRIPTION: Registers a translation object for a given language. The object can be flat or nested, with nested keys joined by dots. Supports pluralization through key suffixes and advanced typing.\nSOURCE: https://github.com/Sv443-Network/UserUtils/blob/main/docs.md#2025-04-16_snippet_67\n\nLANGUAGE: typescript\nCODE:\n```\ntr.addTranslations(language: string, translations: TrObject): void\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { tr } from \"@sv443-network/userutils\";\n\nconst trEn = {\n  hello: \"Hello, World!\",\n  nested: {\n    key: \"This is a nested key\",\n    apples_1: \"There is 1 apple\",\n    apples_n: \"There are %1 apples\",\n  },\n  \"foo.bar\": \"This key isn't nested, it just has a dot\",\n} as const;\n\ntr.addTransform(tr.transforms.percent);\n\ntr.addTranslations(\"en\", trEn);\n\n// full type safety and autocomplete\n// LooseUnion is used so there's still autocomplete but you can supply any string as the translation key\n// this can be useful if you have some custom keys that don't adhere to the strict typing, like the pluralization suffix in this case\nconst t = tr.use<LooseUnion<TrKeys<typeof trEn>>>(\"de\");\n\n/** Translates a key with pluralization support */\nfunction tp(key: string, num: number, ...args: Stringifiable[]) {\n  const plSuffix = num === 1 ? \"1\" : \"n\";\n  return t(`${key}_${plSuffix}`, ...args);\n}\n\nt(\"hello\");      // \"Hello, World!\"\nt(\"nested.key\"); // \"This is a nested key\"\nt(\"foo.bar\");    // \"This key isn't nested, it just has a dot\"\n\ntp(\"nested.apples\", 1); // \"There is 1 apple\"\ntp(\"nested.apples\", 5); // \"There are 5 apples\"\n```\n\n----------------------------------------\n\nTITLE: Probing Element Styles in TypeScript\nDESCRIPTION: Defines a function probeElementStyle() that allows probing of computed style properties of HTML elements. It's useful for resolving CSS variables, getting default browser styles, and other style-related operations.\nSOURCE: https://github.com/Sv443-Network/UserUtils/blob/main/docs.md#2025-04-16_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nprobeElementStyle<\n  TValue,\n  TElem extends HTMLElement = HTMLSpanElement,\n> (\n  probeStyle: (style: CSSStyleDeclaration, element: TElem) => TValue,\n  element?: TElem | (() => TElem),\n  hideOffscreen = true,\n  parentElement = document.body,\n): TValue\n```\n\n----------------------------------------\n\nTITLE: Adding a Listener to SelectorObserver in TypeScript\nDESCRIPTION: Method signature for adding a listener to the SelectorObserver. It takes a selector string and options object, which includes the listener function and various configuration parameters.\nSOURCE: https://github.com/Sv443-Network/UserUtils/blob/main/docs.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nSelectorObserver.addListener<TElement = HTMLElement>(selector: string, options: SelectorListenerOptions): void\n```\n\n----------------------------------------\n\nTITLE: Adding Parent Elements in TypeScript\nDESCRIPTION: Demonstrates how to wrap an existing DOM element with a new parent element while preserving event listeners.\nSOURCE: https://github.com/Sv443-Network/UserUtils/blob/main/docs.md#2025-04-16_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport { addParent } from \"@sv443-network/userutils\";\n\n// add an <a> around an element\nconst element = document.querySelector(\"#element\");\nconst newParent = document.createElement(\"a\");\nnewParent.href = \"https://example.org/\";\n\naddParent(element, newParent);\n```\n\n----------------------------------------\n\nTITLE: Checking DOM Load State in TypeScript\nDESCRIPTION: Demonstrates how to check if the DOM has finished loading using isDomLoaded function.\nSOURCE: https://github.com/Sv443-Network/UserUtils/blob/main/docs.md#2025-04-16_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { isDomLoaded } from \"@sv443-network/userutils\";\n\nconsole.log(isDomLoaded()); // false\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  console.log(isDomLoaded()); // true\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Mixins in TypeScript\nDESCRIPTION: Demonstrates the usage of the Mixins class to create and apply mixins with different priorities and configurations. It shows how to handle both synchronous and asynchronous mixin functions.\nSOURCE: https://github.com/Sv443-Network/UserUtils/blob/main/docs.md#2025-04-16_snippet_45\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Mixins } from \"@sv443-network/userutils\";\n\n// create Mixins instance:\nconst myMixins = new Mixins<{\n  /** Here is a perfect place to describe what your value does and give ideas on how to modify it */\n  myValue: (val: number, ctx: { myFactor: number }) => Promise<number>;\n  // ^ if a function is declared as returning a Promise<T>, the Mixins.add() method will accept functions that return either T or Promise<T>\n}>();\n\n// register mixin functions:\n\nmyMixins.add(\"myValue\", (val, { myFactor }) => val * myFactor); // source 1 (priority 0, index 0)\n\n// myValue returns a Promise in the constructor generic parameter above, so mixin functions can be either sync or async:\nmyMixins.add(\"myValue\", (val) => Promise.resolve(val + 1)); // source 2 (priority 0, index 1)\n\n// when passing a number instead of the object, the default config will be used and the number will be treated as the priority:\nmyMixins.add(\"myValue\", (val) => val * 2, 1); // source 3 (priority 1)\n\n// apply mixins and transform the input value:\n\n// since some of the mixin functions are async, the result will be a Promise:\nconst result = await myMixins.resolve(\"myValue\", 10, { myFactor: 0.75 });\n// order of operations:\n// 1. inputVal = 10\n// 2. 10 * 2 = 20     (source 3 mixin)\n// 3. 20 * 0.75 = 15  (source 1 mixin)\n// 4. 15 + 1 = 16     (source 2 mixin)\n// result = 16\n```\n\n----------------------------------------\n\nTITLE: Observing Element Property Changes in TypeScript\nDESCRIPTION: Function to observe changes to a specific property of an element. It shims the setter of the provided property and calls a callback function when the property changes. Useful for properties that can't be observed with MutationObserver.\nSOURCE: https://github.com/Sv443-Network/UserUtils/blob/main/docs.md#2025-04-16_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nobserveElementProp<\n  TElem extends Element = HTMLElement,\n  TPropKey extends keyof TElem = keyof TElem,\n> (\n  element: TElem,\n  property: TPropKey,\n  callback: (oldVal: TElem[TPropKey], newVal: TElem[TPropKey]) => void\n): void\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { observeElementProp } from \"@sv443-network/userutils\";\n\nconst myInput = document.querySelector(\"input#my-input\");\n\nlet value = 0;\n\nsetInterval(() => {\n  value += 1;\n  myInput.value = String(value);\n}, 1000);\n\n\nconst observer = new MutationObserver((mutations) => {\n  // will never be called:\n  console.log(\"MutationObserver mutation:\", mutations);\n});\n\n// one would think this should work, but \"value\" is a JS object *property*, not a DOM *attribute*\nobserver.observe(myInput, {\n  attributes: true,\n  attributeFilter: [\"value\"],\n});\n\n\nobserveElementProp(myInput, \"value\", (oldValue, newValue) => {\n  // will be called every time the value changes:\n  console.log(\"Value changed from\", oldValue, \"to\", newValue);\n});\n```\n\n----------------------------------------\n\nTITLE: Pluralizing Strings Conditionally with autoPlural() in TypeScript\nDESCRIPTION: A utility function that automatically pluralizes a string based on a numeric value. It can handle different pluralization rules and accepts arrays, NodeLists, or objects with length/count/size properties.\nSOURCE: https://github.com/Sv443-Network/UserUtils/blob/main/docs.md#2025-04-16_snippet_53\n\nLANGUAGE: typescript\nCODE:\n```\nautoPlural(\n  term: Stringifiable,\n  num: number | Array | NodeList | { length: number } | { count: number } | { size: number },\n  pluralType?: \"auto\" | \"-s\" | \"-ies\"\n): string\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { autoPlural } from \"@sv443-network/userutils\";\n\nautoPlural(\"red apple\", 0); // \"red apples\"\nautoPlural(\"red apple\", 1); // \"red apple\"\nautoPlural(\"red apple\", 2); // \"red apples\"\n\n// The default `pluralType` (\"auto\") switches suffix when the word ends with y:\nautoPlural(\"category\", 1); // \"category\"\nautoPlural(\"category\", 2); // \"categories\"\n\n// Stringifiable objects are also accepted:\nautoPlural({ toString: () => \"category\" }, 2); // \"categories\"\nautoPlural(new Map<unknown, unknown>(), 2);    // \"[object Map]s\"\n\n// The passed `num` object just needs to have a numeric length, count or size property:\nautoPlural(\"element\", document.querySelectorAll(\"html\")); // \"element\"\nautoPlural(\"element\", document.querySelectorAll(\"*\"));    // \"elements\"\n\nconst items = [1, 2, 3, 4, \"foo\", \"bar\"];\nconsole.log(items.length, autoPlural(\"item\", items)); // \"6 items\"\n\n// And you can also force pluralization with one or the other if needed:\nautoPlural(\"category\", 1, \"-s\"); // \"category\"\nautoPlural(\"category\", 2, \"-s\"); // \"categorys\"\nautoPlural(\"apple\", 1, \"-ies\");  // \"apply\"\nautoPlural(\"apple\", 2, \"-ies\");  // \"applies\"\n```\n\n----------------------------------------\n\nTITLE: Importing UserUtils in JavaScript/TypeScript\nDESCRIPTION: Examples of importing the UserUtils library in Node.js and Deno environments, including both individual function imports and importing the entire library.\nSOURCE: https://github.com/Sv443-Network/UserUtils/blob/main/README-summary.md#2025-04-16_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n// on Node:\nimport { addGlobalStyle } from \"@sv443-network/userutils\";\n\n// on Deno:\nimport { addGlobalStyle } from \"jsr:@sv443-network/userutils\";\n\n// you can also import the entire library as an object (not recommended because of worse treeshaking support):\nimport * as UserUtils from \"@sv443-network/userutils\";\n```\n\n----------------------------------------\n\nTITLE: Lightening Colors in TypeScript\nDESCRIPTION: Demonstrates the usage of the lightenColor function to lighten CSS color values (in hex, RGB, or RGBA format) by a given percentage. It shows examples with different color formats and options.\nSOURCE: https://github.com/Sv443-Network/UserUtils/blob/main/docs.md#2025-04-16_snippet_78\n\nLANGUAGE: typescript\nCODE:\n```\nimport { lightenColor } from \"@sv443-network/userutils\";\n\nlightenColor(\"#ff0000\", 20);                // \"#ff3333\"\nlightenColor(\"#ff0000\", 20, true);          // \"#FF3333\"\nlightenColor(\"rgb(0, 255, 0)\", 50);       // \"rgb(128, 255, 128)\"\nlightenColor(\"rgba(0, 255, 0, 0.5)\", 50); // \"rgba(128, 255, 128, 0.5)\"\n```\n\n----------------------------------------\n\nTITLE: UserUtils CDN Import for Userscripts\nDESCRIPTION: CDN import directives for userscript headers, including versioned and non-versioned options\nSOURCE: https://github.com/Sv443-Network/UserUtils/blob/main/README.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// @require https://cdn.jsdelivr.net/npm/@sv443-network/userutils@INSERT_VERSION/dist/index.global.js\n// @require https://unpkg.com/@sv443-network/userutils@INSERT_VERSION/dist/index.global.js\n```\n\n----------------------------------------\n\nTITLE: Retrieving Sibling Elements Frame in TypeScript\nDESCRIPTION: This function returns a frame of sibling elements based on a reference element. It allows customization of the frame size, position of the reference element within the frame, and whether to include the reference element itself. The return type defaults to HTMLElement but can be customized using generics.\nSOURCE: https://github.com/Sv443-Network/UserUtils/blob/main/docs.md#2025-04-16_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\ngetSiblingsFrame<\n  TSiblingType extends Element = HTMLElement\n> (\n  refElement: Element,\n  siblingAmount: number,\n  refElementAlignment: \"center-top\" | \"center-bottom\" | \"top\" | \"bottom\" = \"center-top\",\n  includeRef = true\n): TSiblingType[]\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getSiblingsFrame } from \"@sv443-network/userutils\";\n\nconst refElement = document.querySelector(\"#ref\");\n// ^ structure of the elements:\n// <div id=\"parent\">\n//     <div>1</div>\n//     <div>2</div>\n//     <div id=\"ref\">3</div>\n//     <div>4</div>\n//     <div>5</div>\n//     <div>6</div>\n// </div>\n\n// ref element aligned to the top of the frame's center positions and included in the result:\nconst siblingsFoo = getSiblingsFrame(refElement, 4, \"center-top\", true);\n// <div>1</div>\n// <div>2</div>        ◄──┐\n// <div id=\"ref\">3</div>  │ returned         <(ref is here because refElementAlignment = \"center-top\")\n// <div>4</div>           │ frame\n// <div>5</div>        ◄──┘\n// <div>6</div>\n\n// ref element aligned to the bottom of the frame's center positions and included in the result:\nconst siblingsBar = getSiblingsFrame(refElement, 4, \"center-bottom\", true);\n// <div>1</div>        ◄──┐\n// <div>2</div>           │ returned\n// <div id=\"ref\">3</div>  │ frame            <(ref is here because refElementAlignment = \"center-bottom\")\n// <div>4</div>        ◄──┘\n// <div>5</div>\n// <div>6</div>\n\n// ref element aligned to the bottom of the frame's center positions, but excluded from the result:\nconst siblingsBaz = getSiblingsFrame(refElement, 3, \"center-bottom\", false);\n// <div>1</div>        ◄──┐\n// <div>2</div>        ◄──┘ returned...\n// <div id=\"ref\">3</div>                     <(skipped because includeRef = false)\n// <div>4</div>        ◄─── ...frame\n// <div>5</div>\n// <div>6</div>\n\n// ref element aligned to the top of the frame, but excluded from the result:\nconst siblingsQux = getSiblingsFrame(refElement, 3, \"top\", false);\n// <div>1</div>\n// <div>2</div>\n// <div id=\"ref\">3</div>                     <(skipped because includeRef = false)\n// <div>4</div>        ◄──┐ returned\n// <div>5</div>           │ frame\n// <div>6</div>        ◄──┘\n\n// ref element aligned to the top of the frame, but this time included in the result:\nconst siblingsQuux = getSiblingsFrame(refElement, 3, \"top\", true);\n// <div>1</div>\n// <div>2</div>\n// <div id=\"ref\">3</div>  ◄──┐ returned      <(not skipped because includeRef = true)\n// <div>4</div>              │ frame\n// <div>5</div>           ◄──┘\n// <div>6</div>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst refElement = document.querySelector(\"#ref\");\n// ^ structure of the elements:\n// <div id=\"parent\">\n//     <div>1</div>\n//     <div>2</div>\n//     <div id=\"ref\">3</div>\n//     <div>4</div>\n//     <div>5</div>\n//     <div>6</div>\n//     <div>7</div>\n//     <div>8</div>\n// </div>\n\n// get all elements above and include the reference element:\nconst allAbove = getSiblingsFrame(refElement, Infinity, \"bottom\", true);\n// <div>1</div>          ◄──┐ returned\n// <div>2</div>             │ frame\n// <div id=\"ref\">3</div> ◄──┘\n// <div>4</div>\n// <div>5</div>\n// <div>6</div>\n// <div>7</div>\n// <div>8</div>\n\n// get all elements below and exclude the reference element:\nconst allBelowExcl = getSiblingsFrame(refElement, Infinity, \"top\", false);\n// <div>1</div>\n// <div>2</div>\n// <div id=\"ref\">3</div>\n// <div>4</div>          ◄──┐\n// <div>5</div>             │ returned\n// <div>6</div>             │ frame\n// <div>7</div>             │\n// <div>8</div>          ◄──┘\n```\n\n----------------------------------------\n\nTITLE: Creating Timed Pauses with pauseFor() in TypeScript\nDESCRIPTION: A utility function that creates a Promise which resolves after a specified delay, useful for pausing asynchronous execution. It supports AbortSignal for interrupting the pause early.\nSOURCE: https://github.com/Sv443-Network/UserUtils/blob/main/docs.md#2025-04-16_snippet_54\n\nLANGUAGE: typescript\nCODE:\n```\npauseFor(time: number, abortSignal?: AbortSignal, rejectOnAbort?: boolean): Promise<void>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { pauseFor } from \"@sv443-network/userutils\";\n\nasync function run() {\n  console.log(\"Hello\");\n\n  await pauseFor(3000); // waits for 3 seconds\n\n  console.log(\"World\");\n\n\n  // can also be cut short manually:\n\n  const controller = new AbortController();\n  setTimeout(() => controller.abort(), 1000);\n\n  await pauseFor(2_147_483_647, controller.signal); // (maximum possible timeout)\n\n  console.log(\"This gets printed after just 1 second\");\n}\n```\n\n----------------------------------------\n\nTITLE: Standalone Debounce Function Signature\nDESCRIPTION: Type signature for the standalone debounce function that creates a debounced version of a provided function.\nSOURCE: https://github.com/Sv443-Network/UserUtils/blob/main/docs.md#2025-04-16_snippet_51\n\nLANGUAGE: typescript\nCODE:\n```\ndebounce<\n  TFunc extends ((...args: TArgs[]) => void | unknown),\n  TArgs = any\n> (\n  fn: TFunc,\n  timeout?: number,\n  type?: \"immediate\" | \"idle\"\n): TFunc & { debouncer: Debouncer }\n```\n\n----------------------------------------\n\nTITLE: Checking Element Scrollability in TypeScript\nDESCRIPTION: Function to check if an element has horizontal or vertical scroll bars. It uses computed styles to detect scrollability, even for hidden elements. The element must be mounted in the DOM for accurate detection.\nSOURCE: https://github.com/Sv443-Network/UserUtils/blob/main/docs.md#2025-04-16_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nisScrollable(element: Element): { horizontal: boolean, vertical: boolean }\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { isScrollable } from \"@sv443-network/userutils\";\n\nconst element = document.querySelector(\"#element\");\nconst { horizontal, vertical } = isScrollable(element);\n\nconsole.log(\"Element has a horizontal scroll bar:\", horizontal);\nconsole.log(\"Element has a vertical scroll bar:\", vertical);\n```\n\n----------------------------------------\n\nTITLE: Consuming Value Generators in TypeScript\nDESCRIPTION: Converts a ValueGen into its final value asynchronously. Handles various input types including direct values, functions, and promises.\nSOURCE: https://github.com/Sv443-Network/UserUtils/blob/main/docs.md#2025-04-16_snippet_61\n\nLANGUAGE: typescript\nCODE:\n```\nimport { consumeGen, type ValueGen } from \"@sv443-network/userutils\";\n\nasync function doSomething(value: ValueGen<number>) {\n  const finalValue = await consumeGen(value);\n  console.log(finalValue);\n}\n\n// the following are all valid and yield 42:\ndoSomething(42);\ndoSomething(() => 42);\ndoSomething(Promise.resolve(42));\ndoSomething(async () => 42);\n\n// throws a TS error:\ndoSomething(\"foo\");\n```\n\n----------------------------------------\n\nTITLE: Converting RGB to Hex Colors in TypeScript\nDESCRIPTION: Shows how to use the rgbToHex function to convert RGB or RGBA color values to hex color strings. It allows customization of the output format, including the inclusion of the hash symbol and uppercase letters.\nSOURCE: https://github.com/Sv443-Network/UserUtils/blob/main/docs.md#2025-04-16_snippet_77\n\nLANGUAGE: typescript\nCODE:\n```\nimport { rgbToHex } from \"@sv443-network/userutils\";\n\nrgbToHex(255, 0, 0);                        // \"#ff0000\" (with hash symbol, lowercase)\nrgbToHex(255, 0, 0, 0.5, false);            // \"ff000080\" (with alpha, no hash symbol, lowercase)\nrgbToHex(255, 0, 0, undefined, true, true); // \"#FF0000\" (no alpha, with hash symbol, uppercase)\n```\n\n----------------------------------------\n\nTITLE: String Generator Consumption in TypeScript\nDESCRIPTION: Converts a StringGen into its final string value asynchronously. Supports multiple input formats including direct strings, functions, and promises.\nSOURCE: https://github.com/Sv443-Network/UserUtils/blob/main/docs.md#2025-04-16_snippet_62\n\nLANGUAGE: typescript\nCODE:\n```\nimport { consumeStringGen, type StringGen } from \"@sv443-network/userutils\";\n\nexport class MyTextPromptThing {\n  constructor(private text: StringGen) {}\n\n  /** Shows the prompt dialog */\n  public async showPrompt() {\n    const promptText = await consumeStringGen(this.text);\n    const promptHtml = promptText.trim().replace(/\\n/gm, \"<br>\");\n\n    // ...\n  }\n}\n\n// all valid:\nconst myText = \"Hello, World!\";\nnew MyTextPromptThing(myText);\nnew MyTextPromptThing(() => myText);\nnew MyTextPromptThing(Promise.resolve(myText));\nnew MyTextPromptThing(async () => myText);\n\n// throws a TS error:\nnew MyTextPromptThing(420);\n```\n\n----------------------------------------\n\nTITLE: Checking Bit Flags using bitSetHas() in TypeScript\nDESCRIPTION: A utility function that checks if a specific bit is set in a given bit set. It supports both number and bigint types, but both arguments must be of the same type. Useful for working with flag-based enums and bit masks.\nSOURCE: https://github.com/Sv443-Network/UserUtils/blob/main/docs.md#2025-04-16_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\nbitSetHas<TType extends number | bigint>(bitSet: TType, checkVal: TType): boolean\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { bitSetHas } from \"@sv443-network/userutils\";\n\n// the two vertically adjacent bits are tested for:\nbitSetHas(\n  0b1110,\n  0b0010,\n); // true\n\nbitSetHas(\n  0b1110,\n  0b0001,\n); // false\n\n// with TS enums (or JS maps):\nenum MyEnum {\n  A = 1, B = 2, C = 4,\n  D = 8, E = 16, F = 32,\n}\n\nconst myBitSet = MyEnum.A | MyEnum.B;\nbitSetHas(myBitSet, MyEnum.B); // true\nbitSetHas(myBitSet, MyEnum.F); // false\n```\n\n----------------------------------------\n\nTITLE: Saving Default Data with DataStore.saveDefaultData() in TypeScript\nDESCRIPTION: Writes the default data (configured in options) to the internal cache and persistent storage. Useful for resetting data to its initial state.\nSOURCE: https://github.com/Sv443-Network/UserUtils/blob/main/docs.md#2025-04-16_snippet_35\n\nLANGUAGE: typescript\nCODE:\n```\nsaveDefaultData(): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Adding Transformation for Translation in TypeScript\nDESCRIPTION: Demonstrates how to add a transformation pattern and function for argument insertion or preprocessing in translations. It shows various examples of using different transforms including template literals, percent placeholders, and custom transforms for profanity filtering and markup text coloration.\nSOURCE: https://github.com/Sv443-Network/UserUtils/blob/main/docs.md#2025-04-16_snippet_72\n\nLANGUAGE: typescript\nCODE:\n```\nimport { tr } from \"@sv443-network/userutils\";\n\ntr.addTranslations(\"en\", {\n  templateLiteral: \"Hello, ${name}!\\nYou have ${notifs} notifications.\",\n  percent: \"Hello, %1!\\nYou have %2 notifications.\",\n  profanity: \"Damn, that's a lot of God damn notifications!\",\n  markup: \"<c=#ff0000>This is red</c> and <c=#0f0>this is green.</c>\",\n});\n\nconst t = tr.use(\"en\");\n\n\n// using the templateLiteral transform:\n\ntr.addTransform(tr.transforms.templateLiteral);\n\n// both of these are equivalent:\nt(\"templateLiteral\", { name: \"John\", notifs: 42 });  // \"Hello, John!\\nYou have 42 notifications.\"\nt(\"templateLiteral\", \"John\", 42);                    // \"Hello, John!\\nYou have 42 notifications.\"\n\n// if the first argument is an object and implements toString(), positional insertion will be used:\nt(\"templateLiteral\", { toString: () => \"John\"}, 42); // \"Hello, John!\\nYou have 42 notifications.\"\n\n\n// using the percent transform:\n\ntr.addTransform(tr.transforms.percent);\n\n// objects will be stringified and inserted positionally:\nt(\"percent\", { toString: () => \"John\" }, 42); // \"Hello, John!\\nYou have 42 notifications.\"\nt(\"percent\", {}, {});                         // \"Hello, [object Object]!\\nYou have [object Object] notifications.\"\n\n\n// custom transform for a very rudimentary profanity filter:\n\ntr.addTransform([\n  /damn/gmi,\n  ({ trValue }) => trValue.replace(/damn/gm, \"darn\").replace(/Damn/gm, \"Darn\"),\n]);\n\nt(\"profanity\"); // \"Darn, that's a lot of God darn notifications!\"\n\n\n// custom transform for simple markup text coloration using HTML in the format <c=#hex>text</c>:\n\ntr.addTransform([\n  /<c=#((?:[0-9a-f]{3}|[0-9a-f]{6}))>(.*?)<\\/c>/gmi,\n  ({ matches }) => `<span style=\"color: #${matches[1]};\">${matches[2] ?? \"\"}</span>`,\n]);\n\nt(\"markup\"); // \"<span style=\"color: #ff0000;\">This is red</span> and <span style=\"color: #0f0;\">this is green.</span>\"\n```\n\n----------------------------------------\n\nTITLE: Migrating Data Between IDs with DataStore.migrateId() in TypeScript\nDESCRIPTION: Migrates data from old storage IDs to the current one. Useful when renaming storage keys or consolidating multiple storage locations.\nSOURCE: https://github.com/Sv443-Network/UserUtils/blob/main/docs.md#2025-04-16_snippet_38\n\nLANGUAGE: typescript\nCODE:\n```\nmigrateId(oldIds: string | string[]): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Installing UserUtils via Package Managers\nDESCRIPTION: Various package manager commands to install the UserUtils library\nSOURCE: https://github.com/Sv443-Network/UserUtils/blob/main/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @sv443-network/userutils\npnpm i @sv443-network/userutils\nyarn add @sv443-network/userutils\nnpx jsr install @sv443-network/userutils\ndeno add jsr:@sv443-network/userutils\n```\n\n----------------------------------------\n\nTITLE: Converting Hex to RGB Colors in TypeScript\nDESCRIPTION: Demonstrates the usage of the hexToRgb function to convert hex color strings to RGB or RGBA color tuple arrays. It accepts various hex formats and returns the corresponding RGB values.\nSOURCE: https://github.com/Sv443-Network/UserUtils/blob/main/docs.md#2025-04-16_snippet_76\n\nLANGUAGE: typescript\nCODE:\n```\nimport { hexToRgb } from \"@sv443-network/userutils\";\n\nhexToRgb(\"#aaff85aa\"); // [170, 255, 133, 0.6666666666666666]\nhexToRgb(\"#ff0000\");   // [255, 0, 0, undefined]\nhexToRgb(\"0032ef\");    // [0, 50, 239, undefined]\nhexToRgb(\"#0f0\");      // [0, 255, 0, undefined]\nhexToRgb(\"0f0f\");      // [0, 255, 0, 1]\n```\n\n----------------------------------------\n\nTITLE: Importing UserUtils in Node/Deno\nDESCRIPTION: Different ways to import the UserUtils library in Node.js and Deno environments\nSOURCE: https://github.com/Sv443-Network/UserUtils/blob/main/README.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// on Node:\nimport { addGlobalStyle } from \"@sv443-network/userutils\";\n\n// on Deno:\nimport { addGlobalStyle } from \"jsr:@sv443-network/userutils\";\n\n// you can also import the entire library as an object (not recommended because of worse treeshaking support):\nimport * as UserUtils from \"@sv443-network/userutils\";\n```\n\n----------------------------------------\n\nTITLE: Using probeElementStyle in TypeScript\nDESCRIPTION: Demonstrates the usage of probeElementStyle() function to probe and resolve a CSS color variable. It includes error handling and a retry mechanism for resolving the color.\nSOURCE: https://github.com/Sv443-Network/UserUtils/blob/main/docs.md#2025-04-16_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\nimport { probeElementStyle } from \"@sv443-network/userutils\";\n\ndocument.addEventListener(\"DOMContentLoaded\", run);\n\nfunction run() {\n  /**\n   * Probe on interval to wait until the value exists and has \"settled\"  \n   * Not really important for this example, but can be useful on pages with lots of loaded in or constantly changing scripts and styles\n   */\n  const tryResolveCol = (i = 0) => new Promise<string>((res, rej) => {\n    if(i > 100) // give up after ~10 seconds\n      return rej(new Error(\"Could not resolve color after 100 tries\"));\n\n    // probedCol will be automatically typed as string:\n    const probedCol = probeElementStyle(\n      // probe the `style.backgroundColor` property:\n      (style, _element) => style.backgroundColor,\n      () => {\n        // create a new element but don't add it to the DOM:\n        const elem = document.createElement(\"span\");\n        // specify the CSS variable here, so it will be resolved by the CSS engine:\n        elem.style.backgroundColor = \"var(--my-cool-color, #000)\"; // default to black to keep the loop going until the color is resolved\n        return elem;\n      },\n      true,\n    );\n\n    // wait for the color to exist and not be white or black (again, might only be useful in some cases):\n    if(probedCol.length === 0 || probedCol.match(/^rgba?\\((?:(?:255,\\s?255,\\s?255)|(?:0,\\s?0,\\s?0))/) || probedCol.match(/^#(?:fff(?:fff)?|000(?:000)?)/))\n      return setTimeout(async () => res(await tryResolveCol(++i)), 100); // try again every 100ms\n\n    return res(probedCol);\n  });\n\n  try {\n    const color = await tryResolveCol();\n    console.log(\"Resolved:\", color); // \"Resolved: rgb(255, 127, 0)\"\n  }\n  catch(err) {\n    console.error(err);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Persistent Data using DataStore.loadData() in TypeScript\nDESCRIPTION: Asynchronously loads data from persistent storage. If no data exists, returns and writes the default data. Handles data migration from old IDs to current one if configured, and migrates data formats when needed.\nSOURCE: https://github.com/Sv443-Network/UserUtils/blob/main/docs.md#2025-04-16_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\nloadData(): Promise<TData>\n```\n\n----------------------------------------\n\nTITLE: Including UserUtils in Generic DOM Environments\nDESCRIPTION: HTML script tags for including the UserUtils library in generic DOM environments without access to the GreaseMonkey API.\nSOURCE: https://github.com/Sv443-Network/UserUtils/blob/main/README-summary.md#2025-04-16_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n<script src=\"https://cdn.jsdelivr.net/npm/@sv443-network/userutils@INSERT_VERSION/dist/index.global.js\"></script>\n<script src=\"https://unpkg.com/@sv443-network/userutils@INSERT_VERSION/dist/index.global.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Setting Data with DataStore.setData() in TypeScript\nDESCRIPTION: Writes given data to the internal cache synchronously and to persistent storage asynchronously. Used to update the stored data with new values.\nSOURCE: https://github.com/Sv443-Network/UserUtils/blob/main/docs.md#2025-04-16_snippet_34\n\nLANGUAGE: typescript\nCODE:\n```\nsetData(data: TData): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: TypeScript Declaration for UserUtils Global Variable\nDESCRIPTION: TypeScript declarations for the UserUtils global variable to prevent TypeScript errors when using the library in a non-bundled environment.\nSOURCE: https://github.com/Sv443-Network/UserUtils/blob/main/README-summary.md#2025-04-16_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\ndeclare const UserUtils: typeof import(\"@sv443-network/userutils\");\n\ndeclare global {\n    interface Window {\n        UserUtils: typeof UserUtils;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Managing SelectorObserver Listeners in TypeScript\nDESCRIPTION: Shows how to get and remove listeners from a SelectorObserver instance, including getting all listeners, getting listeners for specific selectors, and removing listeners.\nSOURCE: https://github.com/Sv443-Network/UserUtils/blob/main/docs.md#2025-04-16_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SelectorObserver } from \"@sv443-network/userutils\";\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  const observer = new SelectorObserver(document.body);\n\n  observer.addListener(\"#my-element-foo\", {\n    continuous: true,\n    listener: (element) => {\n      console.log(\"Element found:\", element);\n    },\n  });\n\n  observer.addListener(\"#my-element-bar\", {\n    listener: (element) => {\n      console.log(\"Element found again:\", element);\n    },\n  });\n\n  observer.enable();\n\n\n  // get all listeners:\n\n  console.log(observer.getAllListeners());\n  // Map(2) {\n  //   '#my-element-foo' => [ { listener: [Function: listener] } ],\n  //   '#my-element-bar' => [ { listener: [Function: listener] } ]\n  // }\n\n\n  // get listeners for a specific selector:\n\n  console.log(observer.getListeners(\"#my-element-foo\"));\n  // [ { listener: [Function: listener], continuous: true } ]\n\n\n  // remove all listeners for a specific selector:\n\n  observer.removeAllListeners(\"#my-element-foo\");\n  console.log(observer.getAllListeners());\n  // Map(1) {\n  //   '#my-element-bar' => [ { listener: [Function: listener] } ]\n  // }\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling SelectorObserver in TypeScript\nDESCRIPTION: Method signature for enabling the SelectorObserver. It can optionally check selectors immediately and returns a boolean indicating success.\nSOURCE: https://github.com/Sv443-Network/UserUtils/blob/main/docs.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nSelectorObserver.enable(immediatelyCheckSelectors?: boolean): boolean\n```\n\n----------------------------------------\n\nTITLE: Running Data Migrations with DataStore.runMigrations() in TypeScript\nDESCRIPTION: Migrates old data formats to the latest version using configured migration functions. Can either throw errors on migration failure or reset to default data depending on the resetOnError parameter.\nSOURCE: https://github.com/Sv443-Network/UserUtils/blob/main/docs.md#2025-04-16_snippet_37\n\nLANGUAGE: typescript\nCODE:\n```\nrunMigrations(oldData: any, oldFmtVer: number, resetOnError?: boolean): Promise<TData>\n```\n\n----------------------------------------\n\nTITLE: Checking SelectorObserver Status in TypeScript\nDESCRIPTION: Method signature for checking if the SelectorObserver is currently enabled.\nSOURCE: https://github.com/Sv443-Network/UserUtils/blob/main/docs.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nSelectorObserver.isEnabled(): boolean\n```\n\n----------------------------------------\n\nTITLE: Getting Cached Data with DataStore.getData() in TypeScript\nDESCRIPTION: Synchronously returns the current data stored in the internal cache. If no data was loaded from persistent storage yet, returns the default data configured in options.\nSOURCE: https://github.com/Sv443-Network/UserUtils/blob/main/docs.md#2025-04-16_snippet_33\n\nLANGUAGE: typescript\nCODE:\n```\ngetData(): TData\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Listeners in SelectorObserver in TypeScript\nDESCRIPTION: Method signature for getting a Map of all selectors and their associated listeners in the SelectorObserver.\nSOURCE: https://github.com/Sv443-Network/UserUtils/blob/main/docs.md#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nSelectorObserver.getAllListeners(): Map<string, SelectorListenerOptions[]>\n```\n\n----------------------------------------\n\nTITLE: Creating Translation Function with tr.use() in TypeScript\nDESCRIPTION: Returns a function for translating strings in a specified language, allowing more concise translation calls. The returned function behaves like tr.for() without needing to repeat the language parameter.\nSOURCE: https://github.com/Sv443-Network/UserUtils/blob/main/docs.md#2025-04-16_snippet_65\n\nLANGUAGE: typescript\nCODE:\n```\ntr.use<TTrKey extends string = string>(language: string): (key: TTrKey, ...args: Stringifiable[]) => string\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { tr, type TrKeys } from \"@sv443-network/userutils\";\n\nconst transEn = {\n  hello: \"Hello, World!\",\n} as const;\n\ntr.addTranslations(\"en\", transEn);\n\n// to be loaded in from a DataStore or `navigator.language` or similar:\nlet currentLanguage = \"en\";\n\nfunction greet() {\n  const t = tr.use<TrKeys<typeof transEn>>(currentLanguage);\n\n  // very concise and easy to use:\n  t(\"hello\"); // \"Hello, World!\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Translations with tr.getTranslations() in TypeScript\nDESCRIPTION: Retrieves the translation object for a specified language. Returns the full translation object or undefined if the language does not exist in the system.\nSOURCE: https://github.com/Sv443-Network/UserUtils/blob/main/docs.md#2025-04-16_snippet_68\n\nLANGUAGE: typescript\nCODE:\n```\ntr.getTranslations(language: string): TrObject | undefined\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { tr } from \"@sv443-network/userutils\";\n\ntr.addTranslations(\"en\", {\n  hello: \"Hello, World!\",\n});\n\ntr.getTranslations(\"en\"); // { hello: \"Hello, World!\" }\n```\n\n----------------------------------------\n\nTITLE: Using Predefined Transforms for Translation in TypeScript\nDESCRIPTION: Demonstrates the usage of predefined transformation functions for quick setup of argument insertion in translations. It shows examples of using template literal and percent transforms.\nSOURCE: https://github.com/Sv443-Network/UserUtils/blob/main/docs.md#2025-04-16_snippet_74\n\nLANGUAGE: typescript\nCODE:\n```\nimport { tr } from \"@sv443-network/userutils\";\n\ntr.addTranslations(\"en\", {\n  templateLiteral: \"Hello, ${name}!\\nYou have ${notifs} notifications.\",\n  percent: \"Hello, %1!\\nYou have %2 notifications.\",\n});\n\nconst t = tr.use(\"en\");\n\n\n// using the templateLiteral transform:\n\ntr.addTransform(tr.transforms.templateLiteral);\n\n// both of these are equivalent:\nt(\"templateLiteral\", { name: \"John\", notifs: 42 });  // \"Hello, John!\\nYou have 42 notifications.\"\nt(\"templateLiteral\", \"John\", 42);                    // \"Hello, John!\\nYou have 42 notifications.\"\n\n// if the first argument is an object and implements toString(), positional insertion will be used:\nt(\"templateLiteral\", { toString: () => \"John\"}, 42); // \"Hello, John!\\nYou have 42 notifications.\"\n\n\n// using the percent transform:\n\ntr.addTransform(tr.transforms.percent);\n\n// objects will be stringified and inserted positionally:\nt(\"percent\", { toString: () => \"John\" }, 42); // \"Hello, John!\\nYou have 42 notifications.\"\nt(\"percent\", {}, {});                         // \"Hello, [object Object]!\\nYou have [object Object] notifications.\"\n```\n\n----------------------------------------\n\nTITLE: Setting Fallback Language with tr.setFallbackLanguage() in TypeScript\nDESCRIPTION: Sets a fallback language to use when a translation key is not found in the current language. Can be disabled by passing undefined.\nSOURCE: https://github.com/Sv443-Network/UserUtils/blob/main/docs.md#2025-04-16_snippet_70\n\nLANGUAGE: typescript\nCODE:\n```\ntr.setFallbackLanguage(language: string | undefined): void\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { tr, type TrKeys, type LooseUnion } from \"@sv443-network/userutils\";\n\nconst trEn = {\n  hello: \"Hello, World!\",\n  goodbye: \"Goodbye, World!\",\n} as const;\n\nconst trDe = {\n  hello: \"Hallo, Welt!\",\n} as const;\n\ntr.addTranslations(\"en\", trEn);\ntr.addTranslations(\"de\", trDe);\n\ntr.setFallbackLanguage(\"en\");\n\n// \"en\" should always have the most up-to-date keys, so it is used for the generic parameter\n// also, LooseUnion is used to enable the use of any string while still giving type safety, in case there's some custom key that doesn't adhere to the strict typing\nconst t = tr.use<LooseUnion<TrKeys<typeof trEn>>>(\"de\");\n\nt(\"hello\"); // \"Hallo, Welt!\"\n// doesn't exist, so falls back to \"en\":\nt(\"goodbye\"); // \"Goodbye, World!\"\n```\n\n----------------------------------------\n\nTITLE: Deleting Translations with tr.deleteTranslations() in TypeScript\nDESCRIPTION: Removes translations for a specified language. Returns a boolean indicating success or failure of the deletion operation.\nSOURCE: https://github.com/Sv443-Network/UserUtils/blob/main/docs.md#2025-04-16_snippet_69\n\nLANGUAGE: typescript\nCODE:\n```\ntr.deleteTranslations(language: string): boolean\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { tr } from \"@sv443-network/userutils\";\n\ntr.addTranslations(\"en\", {\n  hello: \"Hello, World!\",\n});\n\ntr.for(\"en\", \"hello\"); // \"Hello, World!\"\n\ntr.deleteTranslations(\"en\");\n\n// returns the key itself:\ntr.for(\"en\", \"hello\"); // \"hello\"\n```\n\n----------------------------------------\n\nTITLE: Color Darkening Usage Examples\nDESCRIPTION: Examples showing how to use darkenColor() with different color formats and options.\nSOURCE: https://github.com/Sv443-Network/UserUtils/blob/main/docs.md#2025-04-16_snippet_80\n\nLANGUAGE: typescript\nCODE:\n```\nimport { darkenColor } from \"@sv443-network/userutils\";\n\ndarkenColor(\"#ff0000\", 20);                // \"#cc0000\"\ndarkenColor(\"#ff0000\", 20, true);          // \"#CC0000\"\ndarkenColor(\"rgb(0, 255, 0)\", 50);       // \"rgb(0, 128, 0)\"\ndarkenColor(\"rgba(0, 255, 0, 0.5)\", 50); // \"rgba(0, 128, 0, 0.5)\"\n```\n\n----------------------------------------\n\nTITLE: Clearing All Listeners in SelectorObserver in TypeScript\nDESCRIPTION: Method signature for removing all listeners from the SelectorObserver.\nSOURCE: https://github.com/Sv443-Network/UserUtils/blob/main/docs.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nSelectorObserver.clearListeners(): void\n```\n\n----------------------------------------\n\nTITLE: Initializing SelectorObserver in TypeScript\nDESCRIPTION: Constructor signatures for the SelectorObserver class. It can be initialized with either an Element instance or a selector string, along with optional configuration options.\nSOURCE: https://github.com/Sv443-Network/UserUtils/blob/main/docs.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// using an Element instance:\nnew SelectorObserver(baseElement: Element, options?: SelectorObserverOptions)\n// using selector string:\nnew SelectorObserver(baseElementSelector: string, options?: SelectorObserverOptions)\n```\n\n----------------------------------------\n\nTITLE: Initializing Debouncer Class Definition\nDESCRIPTION: Type signature for creating a new Debouncer instance with optional timeout and type parameters.\nSOURCE: https://github.com/Sv443-Network/UserUtils/blob/main/docs.md#2025-04-16_snippet_49\n\nLANGUAGE: typescript\nCODE:\n```\nnew Debouncer<TArgs = any>(timeout?: number, type?: \"immediate\" | \"idle\")\n```\n\n----------------------------------------\n\nTITLE: Using UserUtils Global Variable\nDESCRIPTION: Examples of using the UserUtils global variable and object destructuring\nSOURCE: https://github.com/Sv443-Network/UserUtils/blob/main/README.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nUserUtils.addGlobalStyle(\"body { background-color: red; }\");\n\n// or using object destructuring:\n\nconst { clamp } = UserUtils;\nconsole.log(clamp(1, 5, 10)); // 5\n```\n\n----------------------------------------\n\nTITLE: Color Darkening Function Signature\nDESCRIPTION: Function signature for darkenColor() which darkens CSS color values in hex, RGB or RGBA format by a given percentage.\nSOURCE: https://github.com/Sv443-Network/UserUtils/blob/main/docs.md#2025-04-16_snippet_79\n\nLANGUAGE: typescript\nCODE:\n```\ndarkenColor(color: string, percent: number, upperCase?: boolean): string\n```\n\n----------------------------------------\n\nTITLE: Checking Translation Key Existence with tr.hasKey() in TypeScript\nDESCRIPTION: Function that checks if a translation key exists in a specified language. Returns boolean indicating existence of the key in the language or fallback language if specified.\nSOURCE: https://github.com/Sv443-Network/UserUtils/blob/main/docs.md#2025-04-16_snippet_66\n\nLANGUAGE: typescript\nCODE:\n```\ntr.hasKey<TTrKey extends string = string>(language: string | undefined, key: TTrKey): boolean\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { tr } from \"@sv443-network/userutils\";\n\ntr.addTranslations(\"en\", {\n  hello: \"Hello, World!\",\n});\n\ntr.hasKey(\"en\", \"hello\");   // true\ntr.hasKey(\"en\", \"goodbye\"); // false\n```\n\n----------------------------------------\n\nTITLE: Generating Union Type of Translation Keys in TypeScript\nDESCRIPTION: Shows how to use the TrKeys type to generate a union type of all keys in a given translation object. Nested keys are joined with a dot (.) to form the final key.\nSOURCE: https://github.com/Sv443-Network/UserUtils/blob/main/docs.md#2025-04-16_snippet_75\n\nLANGUAGE: typescript\nCODE:\n```\nimport { tr, type TrKeys } from \"@sv443-network/userutils\";\n\nconst trEn = {\n  hello: \"Hello, World!\",\n  nested: {\n    key: \"This is a nested key\",\n  },\n  \"foo.bar\": \"This key isn't nested, it just has a dot\",\n};\n\ntr.addTranslations(\"en\", trEn);\n\ntype MyKeysEn = TrKeys<typeof trEn>; // \"hello\" | \"nested.key\" | \"foo.bar\"\n\n// full type safety and autocomplete:\nconst t = tr.use<MyKeysEn>(\"en\");\n```\n\n----------------------------------------\n\nTITLE: Deleting Persistent Data with DataStore.deleteData() in TypeScript\nDESCRIPTION: Fully deletes data from persistent storage while leaving internal cache untouched. Requires the GM.deleteValue grant when using GM storage.\nSOURCE: https://github.com/Sv443-Network/UserUtils/blob/main/docs.md#2025-04-16_snippet_36\n\nLANGUAGE: typescript\nCODE:\n```\ndeleteData(): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Initializing and Running UserUtils Project\nDESCRIPTION: A series of commands to set up the UserUtils project, including submodule initialization, npm linking, and running development and test servers.\nSOURCE: https://github.com/Sv443-Network/UserUtils/blob/main/test/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit submodule update --init --recursive\nnpm link\nnpm run dev\nnpm run test-serve\n```\n\n----------------------------------------\n\nTITLE: NonEmptyArray Type Example\nDESCRIPTION: Example showing usage of NonEmptyArray generic type for arrays with at least one item.\nSOURCE: https://github.com/Sv443-Network/UserUtils/blob/main/docs.md#2025-04-16_snippet_82\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { NonEmptyArray } from \"@sv443-network/userutils\";\n\nfunction logFirstItem(array: NonEmptyArray<string>) {\n  console.log(parseInt(array[0]));\n}\n\nfunction somethingElse(array: NonEmptyArray) {\n  // array is typed as NonEmptyArray<unknown> when not passing a\n  // generic parameter, so this throws a TS error:\n  console.log(parseInt(array[0])); // Argument of type 'unknown' is not assignable to parameter of type 'string'\n}\n\nlogFirstItem([\"04abc\", \"69\"]); // 4\n```\n\n----------------------------------------\n\nTITLE: Setting Up Test Userscript\nDESCRIPTION: Commands for navigating to the test userscript directory, installing dependencies, linking to the main project, and running the development server.\nSOURCE: https://github.com/Sv443-Network/UserUtils/blob/main/test/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd test/TestScript\nnpm i\nnpm link @sv443-network/userutils\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Deleting Transformation for Translation in TypeScript\nDESCRIPTION: Shows how to delete a transformation based on a given pattern, regex, or function reference. The function returns true if the transformation was found and deleted, else false.\nSOURCE: https://github.com/Sv443-Network/UserUtils/blob/main/docs.md#2025-04-16_snippet_73\n\nLANGUAGE: typescript\nCODE:\n```\nimport { tr } from \"@sv443-network/userutils\";\n\nconst myMarkupTransform = [\n  /<c=#((?:[0-9a-f]{3}|[0-9a-f]{6}))>(.*?)<\\/c>/gmi,\n  ({ matches }) => `<span style=\"color: #${matches[1]};\">${matches[2] ?? \"\"}</span>`,\n] satisfies TransformTuple;\n\ntr.addTransform(myMarkupTransform);\n\n// any of these will work:\ntr.deleteTransform(myMarkupTransform[0]);\ntr.deleteTransform(myMarkupTransform[1]);\ntr.deleteTransform(\"<c=#((?:[0-9a-f]{3}|[0-9a-f]{6}))>(.*?)<\\\\/c>\");\n```\n\n----------------------------------------\n\nTITLE: Running Parallel Development Environment\nDESCRIPTION: Commands to quickly run all necessary development processes in parallel from the main project root.\nSOURCE: https://github.com/Sv443-Network/UserUtils/blob/main/test/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm test\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Structure of Serialized Data in JSONC\nDESCRIPTION: This snippet shows the structure of the serialized data returned by the serialize() method of DataStoreSerializer. It includes information about each data store, such as ID, data, format version, encoding status, and checksum.\nSOURCE: https://github.com/Sv443-Network/UserUtils/blob/main/docs.md#2025-04-16_snippet_42\n\nLANGUAGE: jsonc\nCODE:\n```\n[\n  {\n    \"status\": \"fulfilled\",\n    \"value\": {\n      \"id\": \"foo-data\",\n      \"data\": {\n        \"foo\": \"hello\",\n        \"bar\": \"world\"\n      }\n    }\n  },\n  {\n    \"status\": \"rejected\",\n    \"reason\": \"Checksum mismatch for DataStore with ID \\\"bar-data\\\"!\\nExpected: 69beefdead420\\nHas: abcdef42\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Including UserUtils in Userscripts via CDN (Non-versioned)\nDESCRIPTION: Userscript header directives for including the latest version of UserUtils library from userscript-specific CDNs, not recommended due to auto-updating.\nSOURCE: https://github.com/Sv443-Network/UserUtils/blob/main/README-summary.md#2025-04-16_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n// @require https://update.greasyfork.org/scripts/472956/UserUtils.js\n// @require https://openuserjs.org/src/libs/Sv443/UserUtils.js\n```\n\n----------------------------------------\n\nTITLE: Disabling SelectorObserver in TypeScript\nDESCRIPTION: Method signature for disabling the SelectorObserver. It stops the observation of child elements.\nSOURCE: https://github.com/Sv443-Network/UserUtils/blob/main/docs.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nSelectorObserver.disable(): void\n```\n\n----------------------------------------\n\nTITLE: Setting Inner HTML Without Sanitization in TypeScript\nDESCRIPTION: This function sets the innerHTML property of an element without any sanitization, bypassing Trusted Types API restrictions. It's intended for use when dealing with CSP directives that require trusted HTML. This function should be used with extreme caution as it can introduce XSS vulnerabilities.\nSOURCE: https://github.com/Sv443-Network/UserUtils/blob/main/docs.md#2025-04-16_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nsetInnerHtmlUnsafe(element: Element, html: string): Element\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { setInnerHtmlUnsafe } from \"@sv443-network/userutils\";\n\nconst myElement = document.querySelector(\"#my-element\");\nsetInnerHtmlUnsafe(myElement, \"<img src='https://picsum.photos/100/100' />\");   // hardcoded value, so no XSS risk\n\nconst myXssElement = document.querySelector(\"#my-xss-element\");\nconst userModifiableVariable = `<img onerror=\"alert('XSS!')\" src=\"invalid\" />`; // let's pretend this came from user input\nsetInnerHtmlUnsafe(myXssElement, userModifiableVariable);                       // <- uses a user-modifiable variable, so big XSS risk!\n```\n\n----------------------------------------\n\nTITLE: Mixins Class Signature in TypeScript\nDESCRIPTION: Shows the TypeScript signature for the Mixins class constructor. The generic type parameter TMixinMap defines the structure of mixin functions that can be registered with the class.\nSOURCE: https://github.com/Sv443-Network/UserUtils/blob/main/docs.md#2025-04-16_snippet_44\n\nLANGUAGE: typescript\nCODE:\n```\nnew Mixins<\n  TMixinMap extends Record<string, (arg: any, ctx?: any) => any>,\n>(\n  config?: Partial<MixinsConstructorConfig>,\n)\n```\n\n----------------------------------------\n\nTITLE: ESLint Configuration for UserUtils\nDESCRIPTION: ESLint configuration to allow the UserUtils global variable\nSOURCE: https://github.com/Sv443-Network/UserUtils/blob/main/README.md#2025-04-16_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n\"globals\": {\n    \"UserUtils\": \"readonly\"\n}\n```\n\n----------------------------------------\n\nTITLE: DataStoreSerializer Constructor Type Definition\nDESCRIPTION: Type definition for the DataStoreSerializer constructor, showing the required stores parameter and optional configuration options.\nSOURCE: https://github.com/Sv443-Network/UserUtils/blob/main/docs.md#2025-04-16_snippet_40\n\nLANGUAGE: typescript\nCODE:\n```\nnew DataStoreSerializer(stores: DataStore[], options?: DataStoreSerializerOptions)\n```\n\n----------------------------------------\n\nTITLE: Stringifiable Type Usage Example\nDESCRIPTION: Example demonstrating the Stringifiable type usage for values that can be converted to strings.\nSOURCE: https://github.com/Sv443-Network/UserUtils/blob/main/docs.md#2025-04-16_snippet_81\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Stringifiable } from \"@sv443-network/userutils\";\n\nfunction logSomething(value: Stringifiable) {\n  console.log(`Log: ${value}`); // implicit conversion\n}\n\nconst fooObject = {\n  toString: () => \"hello world\",\n};\n\nconst barObject = {\n  baz: \"\",\n};\n\nlogSomething(\"foo\");     // \"Log: foo\"\nlogSomething(42);        // \"Log: 42\"\nlogSomething(true);      // \"Log: true\"\nlogSomething(Symbol(1)); // \"Log: Symbol(1)\"\nlogSomething(fooObject); // \"Log: hello world\"\nlogSomething(barObject); // \"Log: [object Object]\"\nlogSomething(new Map()); // \"Log: [object Map]\"\n\nlogSomething(undefined); // Type error\n```\n\n----------------------------------------\n\nTITLE: LooseUnion Type Example\nDESCRIPTION: Example showing LooseUnion generic type usage for IDE autocomplete with flexible type checking.\nSOURCE: https://github.com/Sv443-Network/UserUtils/blob/main/docs.md#2025-04-16_snippet_84\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { LooseUnion } from \"@sv443-network/userutils\";\n\nfunction foo(bar: LooseUnion<\"a\" | \"b\" | \"c\">) {\n  console.log(bar);\n}\n\n// when typing the following, autocomplete suggests \"a\", \"b\" and \"c\"\n// foo(\"\n\nfoo(\"a\"); // included in autocomplete, no type error\nfoo(\"\");  // *not* included in autocomplete, still no type error\nfoo(1);   // type error: Argument of type '1' is not assignable to parameter of type 'LooseUnion<\"a\" | \"b\" | \"c\">'\n```\n\n----------------------------------------\n\nTITLE: Using UserUtils from Global Variable\nDESCRIPTION: Examples of using the UserUtils library via the global variable in a non-bundled environment, including direct access and object destructuring.\nSOURCE: https://github.com/Sv443-Network/UserUtils/blob/main/README-summary.md#2025-04-16_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nUserUtils.addGlobalStyle(\"body { background-color: red; }\");\n\n// or using object destructuring:\n\nconst { clamp } = UserUtils;\nconsole.log(clamp(1, 5, 10)); // 5\n```\n\n----------------------------------------\n\nTITLE: NonEmptyString Type Example\nDESCRIPTION: Example demonstrating NonEmptyString generic type usage for strings with at least one character.\nSOURCE: https://github.com/Sv443-Network/UserUtils/blob/main/docs.md#2025-04-16_snippet_83\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { NonEmptyString } from \"@sv443-network/userutils\";\n\nfunction convertToNumber<T extends string>(str: NonEmptyString<T>) {\n  console.log(parseInt(str));\n}\n\nconvertToNumber(\"04abc\"); // \"4\"\nconvertToNumber(\"\");      // type error: Argument of type 'string' is not assignable to parameter of type 'never'\n```\n\n----------------------------------------\n\nTITLE: Custom CSS for Probe Element\nDESCRIPTION: Defines CSS styles for the probe element used in the probeElementStyle() function. It sets a custom variable and demonstrates complex CSS calculations.\nSOURCE: https://github.com/Sv443-Network/UserUtils/blob/main/docs.md#2025-04-16_snippet_27\n\nLANGUAGE: css\nCODE:\n```\n:root {\n  /* This is the variable we want to probe: */\n  --my-cool-color: #f70;\n\n  /* The more involved it gets, the more useful the probing becomes, for example to solve more complex equations: */\n  --my-var: calc(var(--user-defined-var, var(--fallback-var, 1)) * var(--factor, 1));\n}\n\n._uu_probe_element {\n  /*\n    In here, some custom global overrides can be set for the probe element, to make some properties have a known\n    default value, to \"unlock\" other properties that are otherwise not accessible, or not to interfere with the\n    other elements on the page and their style requirements.\n  */\n}\n```\n\n----------------------------------------\n\nTITLE: Prettify Type Example\nDESCRIPTION: Example showing Prettify generic type usage for improved type display in IDE.\nSOURCE: https://github.com/Sv443-Network/UserUtils/blob/main/docs.md#2025-04-16_snippet_85\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Prettify } from \"@sv443-network/userutils\";\n\n// tooltip shows all constituent types, leaving you to figure it out yourself:\n// type Foo = {\n//   a: number;\n// } & Omit<{\n//   b: string;\n//   c: boolean;\n// }, \"c\">\ntype Foo = {\n  a: number;\n} & Omit<{\n  b: string;\n  c: boolean;\n}, \"c\">;\n\n// tooltip shows just the type name, making you manually traverse to the type definition:\n// const foo: Foo\nconst foo: Foo = {\n  a: 1,\n  b: \"2\"\n};\n\n// now with Prettify, the tooltips show the actual type structure:\n\n// type Bar = {\n//   a: number;\n//   b: string;\n// }\ntype Bar = Prettify<Foo>;\n\n// const bar: {\n//   a: number;\n//   b: string;\n// }\nconst bar: Bar = {\n  a: 1,\n  b: \"2\"\n};\n```\n\n----------------------------------------\n\nTITLE: Removing Listeners for a Selector in SelectorObserver in TypeScript\nDESCRIPTION: Method signature for removing all listeners associated with a specific selector in the SelectorObserver.\nSOURCE: https://github.com/Sv443-Network/UserUtils/blob/main/docs.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nSelectorObserver.removeAllListeners(selector: string): boolean\n```\n\n----------------------------------------\n\nTITLE: ListWithLength Type Example\nDESCRIPTION: Example showing ListWithLength type usage for objects with length/count/size properties.\nSOURCE: https://github.com/Sv443-Network/UserUtils/blob/main/docs.md#2025-04-16_snippet_86\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { ListWithLength } from \"@sv443-network/userutils\";\n\nfunction getSize(list: ListWithLength) {\n  let size = -1;\n  if(\"length\" in list)\n    size = list.length;\n  else if(\"count\" in list)\n    size = list.count;\n  else if(\"size\" in list)\n    size = list.size;\n\n  return size;\n}\n\ngetSize([1, 2, 3]); // 3\ngetSize(document.querySelectorAll(\"div\")); // 5\ngetSize(new Map([[\"a\", 1], [\"b\", 2]])); // 2\ngetSize({ count: 42 }); // 42\n\n// iterables need to be converted:\nconst iter = new Map([[\"a\", 1]]).entries();\ngetSize([...iter]); // 1\n```\n\n----------------------------------------\n\nTITLE: Getting Fallback Language with tr.getFallbackLanguage() in TypeScript\nDESCRIPTION: Retrieves the currently set fallback language for translations. Returns undefined if no fallback language is configured.\nSOURCE: https://github.com/Sv443-Network/UserUtils/blob/main/docs.md#2025-04-16_snippet_71\n\nLANGUAGE: typescript\nCODE:\n```\ntr.getFallbackLanguage(): string | undefined\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { tr } from \"@sv443-network/userutils\";\n\ntr.getFallbackLanguage(); // undefined\n\ntr.setFallbackLanguage(\"en\");\n\ntr.getFallbackLanguage(); // \"en\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Listeners for a Selector in SelectorObserver in TypeScript\nDESCRIPTION: Method signature for getting all listeners associated with a specific selector in the SelectorObserver.\nSOURCE: https://github.com/Sv443-Network/UserUtils/blob/main/docs.md#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nSelectorObserver.getListeners(selector: string): SelectorListenerOptions[] | undefined\n```\n\n----------------------------------------\n\nTITLE: Removing a Specific Listener in SelectorObserver in TypeScript\nDESCRIPTION: Method signature for removing a specific listener for a given selector and options in the SelectorObserver.\nSOURCE: https://github.com/Sv443-Network/UserUtils/blob/main/docs.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nSelectorObserver.removeListener(selector: string, options: SelectorListenerOptions): boolean\n```\n\n----------------------------------------\n\nTITLE: HTML Script Tags for UserUtils\nDESCRIPTION: HTML script tags for including UserUtils in generic DOM environments\nSOURCE: https://github.com/Sv443-Network/UserUtils/blob/main/README.md#2025-04-16_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://cdn.jsdelivr.net/npm/@sv443-network/userutils@INSERT_VERSION/dist/index.global.js\"></script>\n<script src=\"https://unpkg.com/@sv443-network/userutils@INSERT_VERSION/dist/index.global.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: TypeScript Global Declaration for UserUtils\nDESCRIPTION: TypeScript type declarations for the UserUtils global variable\nSOURCE: https://github.com/Sv443-Network/UserUtils/blob/main/README.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare const UserUtils: typeof import(\"@sv443-network/userutils\");\n\ndeclare global {\n  interface Window {\n    UserUtils: typeof UserUtils;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: ESLint Configuration for UserUtils Global Variable\nDESCRIPTION: ESLint configuration to prevent linting errors for the UserUtils global variable in a non-bundled environment.\nSOURCE: https://github.com/Sv443-Network/UserUtils/blob/main/README-summary.md#2025-04-16_snippet_7\n\nLANGUAGE: JSON\nCODE:\n```\n\"globals\": {\n    \"UserUtils\": \"readonly\"\n}\n```"
  }
]