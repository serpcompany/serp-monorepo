[
  {
    "owner": "pygame",
    "repo": "pygame",
    "content": "TITLE: Drawing Antialiased Line in Pygame\nDESCRIPTION: Draws a straight antialiased line on a given surface. The function takes parameters for the surface, color, start and end positions, and optional blend factor.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/draw.rst#2025-04-20_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\npygame.draw.aaline(surface, color, start_pos, end_pos) -> Rect\npygame.draw.aaline(surface, color, start_pos, end_pos, blend=1) -> Rect\n```\n\n----------------------------------------\n\nTITLE: Creating a Display Window in Pygame\nDESCRIPTION: Basic example of opening a window with specified dimensions using pygame.display.set_mode(). This creates a display Surface with width 700 and height 400 pixels.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/display.rst#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Open a window on the screen\nscreen_width=700\nscreen_height=400\nscreen=pygame.display.set_mode([screen_width, screen_height])\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Pygame Window with Text\nDESCRIPTION: Creates a basic Pygame window that displays centered text. Demonstrates core concepts including initialization, surface creation, text rendering, blitting, and event handling. Shows proper game loop structure and window management.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/tut/tom_games2.rst#2025-04-20_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n#!/usr/bin/python\n\nimport pygame\nfrom pygame.locals import *\n\ndef main():\n    # Initialise screen\n    pygame.init()\n    screen = pygame.display.set_mode((150, 50))\n    pygame.display.set_caption('Basic Pygame program')\n\n    # Fill background\n    background = pygame.Surface(screen.get_size())\n    background = background.convert()\n    background.fill((250, 250, 250))\n\n    # Display some text\n    font = pygame.font.Font(None, 36)\n    text = font.render(\"Hello There\", 1, (10, 10, 10))\n    textpos = text.get_rect()\n    textpos.centerx = background.get_rect().centerx\n    background.blit(text, textpos)\n\n    # Blit everything to the screen\n    screen.blit(background, (0, 0))\n    pygame.display.flip()\n\n    # Event loop\n    while True:\n        for event in pygame.event.get():\n            if event.type == QUIT:\n                return\n\n        screen.blit(background, (0, 0))\n        pygame.display.flip()\n\n\nif __name__ == '__main__': main()\n```\n\n----------------------------------------\n\nTITLE: Initializing a Custom Sprite Class in Python\nDESCRIPTION: This code snippet demonstrates how to create a custom Sprite subclass called Block. It initializes the sprite with color, width, and height, creates a surface for the sprite's image, and sets up its rectangle.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/sprite.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass Block(pygame.sprite.Sprite):\n    \n    # Constructor. Pass in the color of the block, \n    # and its x and y position\n    def __init__(self, color, width, height):\n       # Call the parent class (Sprite) constructor\n       pygame.sprite.Sprite.__init__(self) \n \n       # Create an image of the block, and fill it with a color.\n       # This could also be an image loaded from the disk.\n       self.image = pygame.Surface([width, height])\n       self.image.fill(color)\n \n       # Fetch the rectangle object that has the dimensions of the image\n       # Update the position of this object by setting the values of rect.x and rect.y\n       self.rect = self.image.get_rect()\n```\n\n----------------------------------------\n\nTITLE: Using spritecollide for Collision Detection in Python\nDESCRIPTION: This code snippet demonstrates how to use the spritecollide function to detect collisions between a player sprite and bomb sprites. It removes colliding bombs and creates explosion effects.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/tut/SpriteIntro.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfor bomb in sprite.spritecollide(player, bombs, 1):\n    boom_sound.play()\n    Explosion(bomb, 0)\n```\n\n----------------------------------------\n\nTITLE: Updating Sprites in Pygame\nDESCRIPTION: This snippet shows how to update all sprites in a sprite group using the update() method. This is typically used to move sprites or change their state each frame.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/tut/ChimpLineByLine.rst#2025-04-20_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\nallsprites.update()\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Pygame Game Loop\nDESCRIPTION: Standard template for a Pygame game loop that handles initialization, input processing, game logic updates, and rendering. The pattern creates a clear separation between logic and rendering routines to prevent concurrent update/render bugs.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/tut/newbieguide.rst#2025-04-20_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport pygame\n\npygame.init()\n\nscreen = pygame.display.set_mode((1280,720))\n\nclock = pygame.time.Clock()\n\nwhile True:\n    # Process player inputs.\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT:\n            pygame.quit()\n            raise SystemExit\n\n    # Do logical updates here.\n    # ...\n\n    screen.fill(\"purple\")  # Fill the display with a solid color\n\n    # Render the graphics here.\n    # ...\n\n    pygame.display.flip()  # Refresh on-screen display\n    clock.tick(60)         # wait until next frame (at 60 FPS)\n```\n\n----------------------------------------\n\nTITLE: Implementing Chimp Game Object Class in Pygame\nDESCRIPTION: This class represents the chimp character, handling movement, spinning when punched, and screen boundary checks. It also inherits from pygame.sprite.Sprite.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/tut/ChimpLineByLine.rst#2025-04-20_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nclass Chimp(pg.sprite.Sprite):\n    \"\"\"moves a monkey critter across the screen. it can spin the\n    monkey when it is punched.\"\"\"\n\n    def __init__(self):\n        pg.sprite.Sprite.__init__(self)  # call Sprite initializer\n        self.image, self.rect = load_image(\"chimp.png\", -1, 4)\n        screen = pg.display.get_surface()\n        self.area = screen.get_rect()\n        self.rect.topleft = 10, 90\n        self.move = 18\n        self.dizzy = False\n\n    def update(self):\n        \"\"\"walk or spin, depending on the monkeys state\"\"\"\n        if self.dizzy:\n            self._spin()\n        else:\n            self._walk()\n\n    def _walk(self):\n        \"\"\"move the monkey across the screen, and turn at the ends\"\"\"\n        newpos = self.rect.move((self.move, 0))\n        if not self.area.contains(newpos):\n            if self.rect.left < self.area.left or self.rect.right > self.area.right:\n                self.move = -self.move\n                newpos = self.rect.move((self.move, 0))\n                self.image = pg.transform.flip(self.image, True, False)\n        self.rect = newpos\n\n    def _spin(self):\n        \"\"\"spin the monkey image\"\"\"\n        center = self.rect.center\n        self.dizzy = self.dizzy + 12\n        if self.dizzy >= 360:\n            self.dizzy = False\n            self.image = self.original\n        else:\n            rotate = pg.transform.rotate\n            self.image = rotate(self.original, self.dizzy)\n```\n\n----------------------------------------\n\nTITLE: Live Camera Stream Class Implementation\nDESCRIPTION: Complete class implementation for capturing and displaying a live camera stream with event handling and performance optimization.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/tut/CameraIntro.rst#2025-04-20_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nclass Capture:\n    def __init__(self):\n        self.size = (640,480)\n        # create a display surface. standard pygame stuff\n        self.display = pygame.display.set_mode(self.size, 0)\n\n        # this is the same as what we saw before\n        self.clist = pygame.camera.list_cameras()\n        if not self.clist:\n            raise ValueError(\"Sorry, no cameras detected.\")\n        self.cam = pygame.camera.Camera(self.clist[0], self.size)\n        self.cam.start()\n\n        # create a surface to capture to.  for performance purposes\n        # bit depth is the same as that of the display surface.\n        self.snapshot = pygame.surface.Surface(self.size, 0, self.display)\n\n    def get_and_flip(self):\n        # if you don't want to tie the framerate to the camera, you can check\n        # if the camera has an image ready.  note that while this works\n        # on most cameras, some will never return true.\n        if self.cam.query_image():\n            self.snapshot = self.cam.get_image(self.snapshot)\n\n        # blit it to the display surface.  simple!\n        self.display.blit(self.snapshot, (0,0))\n        pygame.display.flip()\n\n    def main(self):\n        going = True\n        while going:\n            events = pygame.event.get()\n            for e in events:\n                if e.type == QUIT or (e.type == KEYDOWN and e.key == K_ESCAPE):\n                    # close the camera safely\n                    self.cam.stop()\n                    going = False\n\n            self.get_and_flip()\n```\n\n----------------------------------------\n\nTITLE: Converting Surface Pixel Format in Pygame\nDESCRIPTION: Shows the convert method signatures for changing the pixel format of a Surface, with options for depth, flags, and masks.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/surface.rst#2025-04-20_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nconvert(Surface=None) -> Surface\nconvert(depth, flags=0) -> Surface\nconvert(masks, flags=0) -> Surface\n```\n\n----------------------------------------\n\nTITLE: Drawing Ellipses with Pygame\nDESCRIPTION: Function for drawing ellipses on a surface with optional width parameter. The ellipse is defined by a bounding rectangle and can be filled or outlined with specified line thickness.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/draw.rst#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nellipse(surface, color, rect) -> Rect\nellipse(surface, color, rect, width=0) -> Rect\n```\n\n----------------------------------------\n\nTITLE: Creating a Bouncing Ball Animation with Pygame in Python\nDESCRIPTION: This code snippet demonstrates how to create a simple bouncing ball animation using Pygame. It initializes Pygame, sets up a display window, loads an image, and animates the ball's movement with collision detection against window boundaries.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/tut/PygameIntro.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport sys, pygame\npygame.init()\n\nsize = width, height = 320, 240\nspeed = [2, 2]\nblack = 0, 0, 0\n\nscreen = pygame.display.set_mode(size)\n\nball = pygame.image.load(\"intro_ball.gif\")\nballrect = ball.get_rect()\n\nwhile True:\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT: sys.exit()\n\n    ballrect = ballrect.move(speed)\n    if ballrect.left < 0 or ballrect.right > width:\n        speed[0] = -speed[0]\n    if ballrect.top < 0 or ballrect.bottom > height:\n        speed[1] = -speed[1]\n    \n    screen.fill(\"black\")\n    screen.blit(ball, ballrect)\n    pygame.display.flip()\n```\n\n----------------------------------------\n\nTITLE: Blitting Surfaces in Pygame\nDESCRIPTION: Shows the blit method signature for drawing one Surface onto another, including optional area and special flags parameters.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/surface.rst#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nblit(source, dest, area=None, special_flags=0) -> Rect\n```\n\n----------------------------------------\n\nTITLE: Implementing Fist Game Object Class in Pygame\nDESCRIPTION: This class represents the player's fist, handling movement, punching, and collision detection. It inherits from pygame.sprite.Sprite for easy rendering.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/tut/ChimpLineByLine.rst#2025-04-20_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nclass Fist(pg.sprite.Sprite):\n    \"\"\"moves a clenched fist on the screen, following the mouse\"\"\"\n\n    def __init__(self):\n        pg.sprite.Sprite.__init__(self)  # call Sprite initializer\n        self.image, self.rect = load_image(\"fist.png\", -1)\n        self.fist_offset = (-235, -80)\n        self.punching = False\n\n    def update(self):\n        \"\"\"move the fist based on the mouse position\"\"\"\n        pos = pg.mouse.get_pos()\n        self.rect.topleft = pos\n        self.rect.move_ip(self.fist_offset)\n        if self.punching:\n            self.rect.move_ip(15, 25)\n\n    def punch(self, target):\n        \"\"\"returns true if the fist collides with the target\"\"\"\n        if not self.punching:\n            self.punching = True\n            hitbox = self.rect.inflate(-5, -5)\n            return hitbox.colliderect(target.rect)\n\n    def unpunch(self):\n        \"\"\"called to pull the fist back\"\"\"\n        self.punching = False\n```\n\n----------------------------------------\n\nTITLE: Event Timer Setup in Pygame\nDESCRIPTION: Creates recurring events at specified millisecond intervals. Can limit number of repetitions with loops parameter. Only one timer per event type allowed.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/time.rst#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nset_timer(event, millis) -> None\nset_timer(event, millis, loops=0) -> None\n```\n\n----------------------------------------\n\nTITLE: Game Main Loop and Event Handling\nDESCRIPTION: Implements the main game loop with event handling for quitting, mouse interactions, and game actions. Controls game framerate and manages punch interactions.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/tut/ChimpLineByLine.rst#2025-04-20_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ngoing = True\nwhile going:\n    clock.tick(60)\n    for event in pg.event.get():\n        if event.type == pg.QUIT:\n            going = False\n        elif event.type == pg.KEYDOWN and event.key == pg.K_ESCAPE:\n            going = False\n        elif event.type == pg.MOUSEBUTTONDOWN:\n            if fist.punch(chimp):\n                punch_sound.play()  # punch\n                chimp.punched()\n            else:\n                whiff_sound.play()  # miss\n        elif event.type == pg.MOUSEBUTTONUP:\n            fist.unpunch()\n```\n\n----------------------------------------\n\nTITLE: Implementing HP Bar System in Pygame - Python\nDESCRIPTION: Complete implementation of an HP bar system with both text and graphical visualization. Features include max HP display, current HP manipulation via keyboard controls, and visual representation through rectangles. Uses Pygame for graphics rendering and includes proper event handling.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/tut/en/Red_or_Black/5.HP_bar/Advanced OUTPUT with Advanced PROCESS.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport pygame, sys\nfrom pygame.locals import*\n\nmaxHP = 10 \nwhite = (255,255,255)\ngray = (127,127,127)\nblack = (0,0,0)\nred = (255,0,0)\ngreen = (0,255,0)\nblue = (0,0,255)\npygame.init()\npygame.display.set_caption(\"HP bar Project\")\nwidth = 640 #1\nheight = 480 #2\nmyScreen = pygame.display.set_mode((width, height))\nmyTextFont = pygame.font.Font(\"HoonWhitecatR.ttf\", 32)\nmyText = myTextFont.render((str(maxHP) + \"/\" + str(maxHP)), True, red, gray)\nmyTextArea = myText.get_rect()\nmyTextArea.center = (width/2, height/2) #3\nfpsClock = pygame.time.Clock()\n\ndef main(): #4\n    HP = 5\n    \n    while True:\n        myText = myTextFont.render((str(HP) + \"/\" + str(maxHP)), True, red, gray)\n    \n        myScreen.fill(gray)\n\n        myScreen.blit(myText, myTextArea)\n        drawHP(HP) #5\n\n        for event in pygame.event.get():\n            if event.type == QUIT:\n                pygame.quit()\n                sys.exit()\n            elif event.type == KEYDOWN:\n                if event.key == K_UP:\n                    if HP != 10:\n                        HP = HP + 1\n                elif event.key == K_DOWN:\n                    if HP != 0:\n                        HP = HP - 1\n    \n        pygame.display.update()\n        fpsClock.tick(60)\n\ndef drawHP(HP): #6\n    r = int((height - 40) / maxHP)\n\n    pygame.draw.rect(myScreen, black, (20, 20, 20, 20 + ((maxHP - 0.5) * r)))\n\n    for i in range(maxHP):\n        if HP >= (maxHP - i):\n            pygame.draw.rect(myScreen, red, (20, 20 + (i * r), 20, r))\n        pygame.draw.rect(myScreen, white, (20, 20 + (i * r), 20, r), 1)\n\n    return\n\nif __name__ == '__main__': #7\n    main()\n```\n\n----------------------------------------\n\nTITLE: Pygame Event Types and Attributes Overview\nDESCRIPTION: A listing of all the standard Pygame event types and their associated attributes. This shows the structure of different event objects including QUIT, keyboard, mouse, joystick and other system events.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/event.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nQUIT              none\nACTIVEEVENT       gain, state\nKEYDOWN           key, mod, unicode, scancode\nKEYUP             key, mod, unicode, scancode\nMOUSEMOTION       pos, rel, buttons, touch\nMOUSEBUTTONUP     pos, button, touch\nMOUSEBUTTONDOWN   pos, button, touch\nJOYAXISMOTION     joy (deprecated), instance_id, axis, value\nJOYBALLMOTION     joy (deprecated), instance_id, ball, rel\nJOYHATMOTION      joy (deprecated), instance_id, hat, value\nJOYBUTTONUP       joy (deprecated), instance_id, button\nJOYBUTTONDOWN     joy (deprecated), instance_id, button\nVIDEORESIZE       size, w, h\nVIDEOEXPOSE       none\nUSEREVENT         code\n```\n\n----------------------------------------\n\nTITLE: Creating and Accessing Pygame Rect Objects\nDESCRIPTION: Demonstrates how to create Rect objects and access their attributes. Rect objects can be created with various parameter combinations and their attributes can be directly assigned.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/rect.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nrect1.right = 10\nrect2.center = (20,30)\n```\n\n----------------------------------------\n\nTITLE: Copying a Surface in Pygame\nDESCRIPTION: Shows the copy method for creating a duplicate of a Surface with the same properties.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/surface.rst#2025-04-20_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ncopy() -> Surface\n```\n\n----------------------------------------\n\nTITLE: Basic Pygame Game Structure in Python\nDESCRIPTION: Outlines the typical structure of a Pygame game, including module loading, resource handling, game object classes, initialization, and the main game loop.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/tut/MakeGames.rst#2025-04-20_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n# Load modules\n\n# Resource handling classes\n\n# Game object classes\n\n# Other game functions\n\n# Initialize the game\n\n# Main game loop\n```\n\n----------------------------------------\n\nTITLE: Displaying Background and Game Objects\nDESCRIPTION: Initializes game objects including sounds, sprites, and sprite groups. Sets up the game clock and displays the background.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/tut/ChimpLineByLine.rst#2025-04-20_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nwhiff_sound = load_sound(\"whiff.wav\")\npunch_sound = load_sound(\"punch.wav\")\nchimp = Chimp()\nfist = Fist()\nallsprites = pg.sprite.RenderPlain((chimp, fist))\nclock = pg.time.Clock()\n```\n\n----------------------------------------\n\nTITLE: Clock Object Methods in Pygame\nDESCRIPTION: Collection of clock-related methods for tracking time and controlling frame rate in games. Includes tick(), tick_busy_loop(), get_time(), get_rawtime(), and get_fps().\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/time.rst#2025-04-20_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nClock() -> Clock\ntick(framerate=0) -> milliseconds\ntick_busy_loop(framerate=0) -> milliseconds\nget_time() -> milliseconds\nget_rawtime() -> milliseconds\nget_fps() -> float\n```\n\n----------------------------------------\n\nTITLE: Initializing and Rendering 'Hello World' in Pygame\nDESCRIPTION: This code snippet demonstrates how to set up a basic Pygame project, initialize the display, render text, and handle events. It creates a window with a white background and displays 'Hello World' in red text on a green background.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/tut/en/Red_or_Black/2.Print_text/Basic TEMPLATE and OUTPUT.rst#2025-04-20_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport pygame, sys #1\nfrom pygame.locals import* #2\n\nwhite = (255,255,255) #3\nred = (255,0,0) #4\ngreen = (0,255,0) #5\npygame.init() #6\npygame.display.set_caption(\"Hello World Project\") #7\nmyScreen = pygame.display.set_mode((640, 480)) #8\nmyTextFont = pygame.font.Font(\"HoonWhitecatR.ttf\", 32) #9\nmyText = myTextFont.render(\"Hello World!\", True, red, green) #10 \nmyTextArea = myText.get_rect() #11\nmyTextArea.center = (320, 240) #12\n\nwhile True: #13\n    myScreen.fill(white) #14\n    myScreen.blit(myText, myTextArea) #15\n\n    for event in pygame.event.get(): #16\n        if event.type == QUIT: #17\n            pygame.quit() #18\n            sys.exit() #19\n\n    pygame.display.update() #20\n```\n\n----------------------------------------\n\nTITLE: Creating a Display with OpenGL and VSync in Pygame\nDESCRIPTION: Example of creating a display with OpenGL in fullscreen mode with vsync enabled. This is used when vertical synchronization is needed to prevent screen tearing.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/display.rst#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nflags = pygame.OPENGL | pygame.FULLSCREEN\nwindow_surface = pygame.display.set_mode((1920, 1080), flags, vsync=1)\n```\n\n----------------------------------------\n\nTITLE: Implementing Ball Class with Vector Physics in Pygame\nDESCRIPTION: A complete implementation of a Ball class that inherits from pygame.sprite.Sprite, featuring vector-based movement calculations and position updates.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/tut/tom_games4.rst#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass Ball(pygame.sprite.Sprite):\n    \"\"\"A ball that will move across the screen\n    Returns: ball object\n    Functions: update, calcnewpos\n    Attributes: area, vector\"\"\"\n\n    def __init__(self, vector):\n        pygame.sprite.Sprite.__init__(self)\n        self.image, self.rect = load_png('ball.png')\n        screen = pygame.display.get_surface()\n        self.area = screen.get_rect()\n        self.vector = vector\n\n    def update(self):\n        newpos = self.calcnewpos(self.rect,self.vector)\n        self.rect = newpos\n\n    def calcnewpos(self,rect,vector):\n        (angle,z) = vector\n        (dx,dy) = (z*math.cos(angle),z*math.sin(angle))\n        return rect.move(dx,dy)\n```\n\n----------------------------------------\n\nTITLE: Initializing All Pygame Modules in Python\nDESCRIPTION: This code shows how to initialize all available Pygame modules with a single function call.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/tut/ImportInit.rst#2025-04-20_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\npygame.init()\n```\n\n----------------------------------------\n\nTITLE: Initializing Pygame and Game Setup\nDESCRIPTION: Sets up the Pygame environment, initializes game variables, and defines color constants. It also creates the game window and sets up the font for text rendering.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/tut/en/Red_or_Black/7.Game_board/Advanced OUTPUT and plus alpha.rst#2025-04-20_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport pygame, sys, random\nfrom pygame.locals import*\n\nmaxHP = 10 \nwhite = (255,255,255)\ngray = (127,127,127)\nblack = (0,0,0)\nred = (255,0,0)\ngreen = (0,255,0)\nblue = (0,0,255)\npygame.init()\npygame.display.set_caption(\"Red or Black Project\")\nwidth = 640 \nheight = 480\nmyScreen = pygame.display.set_mode((width, height))\nmyTextFont = pygame.font.Font(\"HoonWhitecatR.ttf\", 32)\nmyText = myTextFont.render((str(maxHP) + \"/\" + str(maxHP)), True, red, gray)\nmyTextArea = myText.get_rect()\nmyTextArea.center = (width/2, height/2)\nfpsClock = pygame.time.Clock()\n```\n\n----------------------------------------\n\nTITLE: Loading and Converting a Surface in Pygame\nDESCRIPTION: Demonstrates how to properly load an image and convert it to the optimal pixel format for improved blitting performance. This is a crucial step for achieving better speed in Pygame applications.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/tut/newbieguide.rst#2025-04-20_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nsurface = pygame.image.load('foo.png').convert()\n```\n\n----------------------------------------\n\nTITLE: Creating Background Surface in Pygame\nDESCRIPTION: This snippet creates a background surface for the game, fills it with a color, and optionally adds text if the Pygame font module is available.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/es/tutorials/ChimpanceLineaporLinea.rst#2025-04-20_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nbackground = pg.Surface(screen.get_size())\nbackground = background.convert()\nbackground.fill((170, 238, 187))\n\nif pg.font:\n    font = pg.font.Font(None, 64)\n    text = font.render(\"Pummel The Chimp, And Win $$$\", True, (10, 10, 10))\n    textpos = text.get_rect(centerx=background.get_width() / 2, y=10)\n    background.blit(text, textpos)\n```\n\n----------------------------------------\n\nTITLE: Getting Elapsed Time in Pygame\nDESCRIPTION: Retrieves the number of milliseconds elapsed since pygame.init() was called. Returns 0 if called before initialization.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/time.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nget_ticks() -> milliseconds\n```\n\n----------------------------------------\n\nTITLE: Defining Android-Specific Event Types in Pygame\nDESCRIPTION: Lists Android-specific event types available in Pygame, including events for application lifecycle and memory management. These events are useful for handling Android-specific behaviors in Pygame applications.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/event.rst#2025-04-20_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nEvent type                 Short description\n\nAPP_TERMINATING           OS is terminating the application\nAPP_LOWMEMORY             OS is low on memory, try to free memory if possible\nAPP_WILLENTERBACKGROUND   Application is entering background\nAPP_DIDENTERBACKGROUND    Application entered background\nAPP_WILLENTERFOREGROUND   Application is entering foreground\nAPP_DIDENTERFOREGROUND    Application entered foreground\n```\n\n----------------------------------------\n\nTITLE: Initializing Pygame Display Window\nDESCRIPTION: Sets up the Pygame display window with specific dimensions and configuration. Initializes pygame, creates a scaled window, sets caption and hides mouse cursor.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/tut/ChimpLineByLine.rst#2025-04-20_snippet_5\n\nLANGUAGE: python\nCODE:\n```\npg.init()\nscreen = pg.display.set_mode((1280, 480), pg.SCALED)\npg.display.set_caption(\"Monkey Fever\")\npg.mouse.set_visible(False)\n```\n\n----------------------------------------\n\nTITLE: Checking Pygame Version Example\nDESCRIPTION: Shows how to check the installed Pygame version number and enable/disable features accordingly.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/pygame.rst#2025-04-20_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nif pygame.version.vernum < (1, 5):\n    print('Warning, older version of pygame (%s)' %  pygame.version.ver)\n    disable_advanced_features = True\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Rect.collidelistall Usage in Python\nDESCRIPTION: This code snippet shows various valid ways to use the Rect.collidelistall method, including with lists of Rects, lists of lists, tuples, and custom objects with rect attributes.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/rect.rst#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nRect = pygame.Rect\nr = Rect(0, 0, 10, 10)\n\nlist_of_rects = [Rect(1, 1, 1, 1), Rect(2, 2, 2, 2)]\nindices0 = r.collidelistall(list_of_rects)\n\nlist_of_lists = [[1, 1, 1, 1], [2, 2, 2, 2]]\nindices1 = r.collidelistall(list_of_lists)\n\nlist_of_tuples = [(1, 1, 1, 1), (2, 2, 2, 2)]\nindices2 = r.collidelistall(list_of_tuples)\n\nlist_of_double_tuples = [((1, 1), (1, 1)), ((2, 2), (2, 2))]\nindices3 = r.collidelistall(list_of_double_tuples)\n\nclass ObjectWithRectAttribute(object):\n    def __init__(self, r):\n        self.rect = r\n\nlist_of_object_with_rect_attribute = [\n    ObjectWithRectAttribute(Rect(1, 1, 1, 1)),\n    ObjectWithRectAttribute(Rect(2, 2, 2, 2)),\n]\nindices4 = r.collidelistall(list_of_object_with_rect_attribute)\n\nclass ObjectWithCallableRectAttribute(object):\n    def __init__(self, r):\n        self._rect = r\n\n    def rect(self):\n        return self._rect\n\nlist_of_object_with_callable_rect = [\n    ObjectWithCallableRectAttribute(Rect(1, 1, 1, 1)),\n    ObjectWithCallableRectAttribute(Rect(2, 2, 2, 2)),\n]\nindices5 = r.collidelistall(list_of_object_with_callable_rect)\n```\n\n----------------------------------------\n\nTITLE: Main Game Loop with Multiple Objects in Pygame\nDESCRIPTION: This code snippet demonstrates the main game loop for a Pygame application with multiple moving objects. It initializes the game, creates multiple GameObject instances, and handles events and object movements.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/es/tutorials/MoverImagen.rst#2025-04-20_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nscreen = pygame.display.set_mode((640, 480))\nplayer = pygame.image.load('player.bmp').convert()\nbackground = pygame.image.load('background.bmp').convert()\nscreen.blit(background, (0, 0))\nobjects = []\nfor x in range(10):                    #crear 10 objetos</i>\n    o = GameObject(player, x*40, x)\n    objects.append(o)\nwhile True:\n    for event in pygame.event.get():\n        if event.type in (QUIT, KEYDOWN):\n            sys.exit()\n    for o in objects:\n```\n\n----------------------------------------\n\nTITLE: Animating Smooth Movement in Pygame\nDESCRIPTION: This code snippet demonstrates how to create smooth animation of a player sprite moving across the screen. It uses Pygame's blit function to draw and update the player's position, with a delay to control animation speed.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/es/tutorials/MoverImagen.rst#2025-04-20_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nscreen = create_screen()\nplayer = load_player_image()\nbackground = load_background_image()\nscreen.blit(background, (0, 0))        #dibujar el fondo\nposition = player.get_rect()\nscreen.blit(player, position)          #dibujar el jugador\npygame.display.update()                #y mostrarlo todo\nfor x in range(100):                   #animar 100 cuadros\n    screen.blit(background, position, position) #borrar\n    position = position.move(2, 0)     #mover el jugador\n    screen.blit(player, position)      #dibujar nuevo jugador\n    pygame.display.update()            #y mostrarlo todo\n    pygame.time.delay(100)             #detener el programa por 1/10 segundos\n```\n\n----------------------------------------\n\nTITLE: Using groupcollide for Group Collision Detection in Python\nDESCRIPTION: This snippet shows how to use the groupcollide function to detect collisions between two groups of sprites (aliens and shots). It removes colliding sprites from both groups and creates explosion effects.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/tut/SpriteIntro.rst#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfor alien in sprite.groupcollide(aliens, shots, 1, 1).keys():\n    boom_sound.play()\n    Explosion(alien, 0)\n    kills += 1\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Pygame Resources\nDESCRIPTION: This snippet shows how to properly clean up Pygame resources when the game is over. It calls pg.quit() to ensure all Pygame internals are properly shut down.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/tut/ChimpLineByLine.rst#2025-04-20_snippet_12\n\nLANGUAGE: Python\nCODE:\n```\npg.quit()\n```\n\n----------------------------------------\n\nTITLE: Implementing a Simple Pygame Game - Chimp Example\nDESCRIPTION: This code implements a basic game using Pygame where a player-controlled fist tries to punch a moving chimp sprite. It demonstrates sprite creation, movement, collision detection, and event handling in Pygame.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/tut/chimp.py.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n#!/usr/bin/env python\n\"\"\" pygame.examples.chimp\n\nThis simple example is used for the line-by-line tutorial\nthat comes with pygame. It is based on a 'popular' web banner.\nNote there are comments here, but for the full explanation,\nsee the line-by-line tutorial.\n\"\"\"\n\n\n# Import Modules\nimport os\nimport pygame as pg\n\nif not pg.font:\n    print(\"Warning, fonts disabled\")\nif not pg.mixer:\n    print(\"Warning, sound disabled\")\n\nmain_dir = os.path.split(os.path.abspath(__file__))[0]\ndata_dir = os.path.join(main_dir, \"data\")\n\n# functions to create our resources\ndef load_image(name, colorkey=None, scale=1):\n    fullname = os.path.join(data_dir, name)\n    image = pg.image.load(fullname)\n\n    size = image.get_size()\n    size = (int(size[0] * scale), int(size[1] * scale))\n    image = pg.transform.scale(image, size)\n\n    image = image.convert()\n    if colorkey is not None:\n        if colorkey == -1:\n            colorkey = image.get_at((0, 0))\n        image.set_colorkey(colorkey, pg.RLEACCEL)\n    return image, image.get_rect()\n\n\ndef load_sound(name):\n    class NoneSound:\n        def play(self):\n            pass\n\n    if not pg.mixer or not pg.mixer.get_init():\n        return NoneSound()\n\n    fullname = os.path.join(data_dir, name)\n    sound = pg.mixer.Sound(fullname)\n\n    return sound\n\n\n# classes for our game objects\nclass Fist(pg.sprite.Sprite):\n    \"\"\"moves a clenched fist on the screen, following the mouse\"\"\"\n\n    def __init__(self):\n        pg.sprite.Sprite.__init__(self)  # call Sprite initializer\n        self.image, self.rect = load_image(\"fist.png\", -1)\n        self.fist_offset = (-235, -80)\n        self.punching = False\n\n    def update(self):\n        \"move the fist based on the mouse position\"\n        pos = pg.mouse.get_pos()\n        self.rect.topleft = pos\n        self.rect.move_ip(self.fist_offset)\n\n    def punch(self, target):\n        \"returns true if the fist collides with the target\"\n        if not self.punching:\n            self.punching = True\n            hitbox = self.rect.inflate(-5, -5)\n            return hitbox.colliderect(target.rect)\n\n    def unpunch(self):\n        \"called to pull the fist back\"\n        self.punching = False\n\n\nclass Chimp(pg.sprite.Sprite):\n    \"\"\"moves a monkey critter across the screen. it can spin the\n    monkey when it is punched.\"\"\"\n\n    def __init__(self):\n        pg.sprite.Sprite.__init__(self)  # call Sprite initializer\n        self.image, self.rect = load_image(\"chimp.png\", -1, 0.8)\n        screen = pg.display.get_surface()\n        self.area = screen.get_rect()\n        self.rect.topleft = 10, 90\n        self.move = 18\n        self.dizzy = False\n\n    def update(self):\n        \"walk or spin, depending on the monkeys state\"\n        if self.dizzy:\n            self._spin()\n        else:\n            self._walk()\n\n    def _walk(self):\n        \"move the monkey across the screen, and turn at the ends\"\n        newpos = self.rect.move((self.move, 0))\n        if not self.area.contains(newpos):\n            if self.rect.left < self.area.left or self.rect.right > self.area.right:\n                self.move = -self.move\n                newpos = self.rect.move((self.move, 0))\n                self.image = pg.transform.flip(self.image, True, False)\n        self.rect = newpos\n\n    def _spin(self):\n        \"spin the monkey image\"\n        center = self.rect.center\n        self.dizzy = self.dizzy + 12\n        if self.dizzy >= 360:\n            self.dizzy = False\n            self.image = self.original\n        else:\n            rotate = pg.transform.rotate\n            self.image = rotate(self.original, self.dizzy)\n        self.rect = self.image.get_rect(center=center)\n\n    def punched(self):\n        \"this will cause the monkey to start spinning\"\n        if not self.dizzy:\n            self.dizzy = True\n            self.original = self.image\n\n\ndef main():\n    \"\"\"this function is called when the program starts.\n    it initializes everything it needs, then runs in\n    a loop until the function returns.\"\"\"\n    # Initialize Everything\n    pg.init()\n    screen = pg.display.set_mode((1280, 480), pg.SCALED)\n    pg.display.set_caption(\"Monkey Fever\")\n    pg.mouse.set_visible(False)\n\n    # Create The Background\n    background = pg.Surface(screen.get_size())\n    background = background.convert()\n    background.fill((170, 238, 187))\n\n    # Put Text On The Background, Centered\n    if pg.font:\n        font = pg.font.Font(None, 64)\n        text = font.render(\"Pummel The Chimp, And Win $$$\", True, (10, 10, 10))\n        textpos = text.get_rect(centerx=background.get_width() / 2, y=10)\n        background.blit(text, textpos)\n\n    # Display The Background\n    screen.blit(background, (0, 0))\n    pg.display.flip()\n\n    # Prepare Game Objects\n    whiff_sound = load_sound(\"whiff.wav\")\n    punch_sound = load_sound(\"punch.wav\")\n    chimp = Chimp()\n    fist = Fist()\n    allsprites = pg.sprite.RenderPlain((fist, chimp))\n    clock = pg.time.Clock()\n\n    # Main Loop\n    going = True\n    while going:\n        clock.tick(60)\n\n        # Handle Input Events\n        for event in pg.event.get():\n            if event.type == pg.QUIT:\n                going = False\n            elif event.type == pg.KEYDOWN and event.key == pg.K_ESCAPE:\n                going = False\n            elif event.type == pg.MOUSEBUTTONDOWN:\n                if fist.punch(chimp):\n                    punch_sound.play()  # punch\n                    chimp.punched()\n                else:\n                    whiff_sound.play()  # miss\n            elif event.type == pg.MOUSEBUTTONUP:\n                fist.unpunch()\n\n        allsprites.update()\n\n        # Draw Everything\n        screen.blit(background, (0, 0))\n        allsprites.draw(screen)\n        pg.display.flip()\n\n    pg.quit()\n\n\n# Game Over\n\n\n# this calls the 'main' function when this script is executed\nif __name__ == \"__main__\":\n    main()\n```\n\n----------------------------------------\n\nTITLE: Loading and Processing Image Resources in Pygame\nDESCRIPTION: This function loads an image, scales it, converts it for display, and sets a colorkey for transparency. It returns the processed image and its rectangle.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/tut/ChimpLineByLine.rst#2025-04-20_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\ndef load_image(name, colorkey=None, scale=1):\n    fullname = os.path.join(data_dir, name)\n    image = pg.image.load(fullname)\n\n    size = image.get_size()\n    size = (size[0] * scale, size[1] * scale)\n    image = pg.transform.scale(image, size)\n\n    image = image.convert()\n    if colorkey is not None:\n        if colorkey == -1:\n            colorkey = image.get_at((0, 0))\n        image.set_colorkey(colorkey, pg.RLEACCEL)\n    return image, image.get_rect()\n```\n\n----------------------------------------\n\nTITLE: Sprite Collision Detection Example\nDESCRIPTION: Example showing how to detect collisions between a player sprite and a group of block sprites, with the option to remove colliding sprites from the group. Demonstrates usage of spritecollide() function.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/sprite.rst#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# See if the Sprite block has collided with anything in the Group block_list\n# The True flag will remove the sprite in block_list\nblocks_hit_list = pygame.sprite.spritecollide(player, block_list, True)  \n\n# Check the list of colliding sprites, and add one to the score for each one\nfor block in blocks_hit_list:\n    score +=1\n```\n\n----------------------------------------\n\nTITLE: Installing Pygame with pip\nDESCRIPTION: Basic pip commands to install the Pygame library.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/index.rst#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install pygame\npip3 install pygame\n```\n\n----------------------------------------\n\nTITLE: Getting Surface Rectangle in Pygame\nDESCRIPTION: Returns a new rectangle covering the entire surface. The rectangle always starts at (0, 0) with the same width and height as the surface. Keyword arguments can be used to modify the returned Rect.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/surface.rst#2025-04-20_snippet_27\n\nLANGUAGE: python\nCODE:\n```\nget_rect(**kwargs) -> Rect\n```\n\n----------------------------------------\n\nTITLE: Handling Mouse Wheel Events in Pygame 2\nDESCRIPTION: This code demonstrates how to handle mouse wheel events in Pygame 2. It sets up a basic game loop and prints information about mouse wheel events, including scroll direction, flipped state, and device ID.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/mouse.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Taken from husano896's PR thread (slightly modified)\nimport pygame\nfrom pygame.locals import *\npygame.init()\nscreen = pygame.display.set_mode((640, 480))\nclock = pygame.time.Clock()\n\ndef main():\n   while True:\n      for event in pygame.event.get():\n            if event.type == QUIT:\n               pygame.quit()\n               return\n            elif event.type == MOUSEWHEEL:\n               print(event) \n               print(event.x, event.y)\n               print(event.flipped)\n               print(event.which)\n               # can access properties with \n               # proper notation(ex: event.y)\n      clock.tick(60)\n\n# Execute game:\nmain()\n```\n\n----------------------------------------\n\nTITLE: Rotating a Surface in Pygame\nDESCRIPTION: Performs unfiltered counterclockwise rotation of a Surface. Angle is in degrees and can be negative for clockwise rotation.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/transform.rst#2025-04-20_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nrotate(surface, angle) -> Surface\n```\n\n----------------------------------------\n\nTITLE: Importing Game Modules from Separate Files in Python\nDESCRIPTION: Shows how to import game objects and resources from separate Python files, which is useful for organizing larger game projects.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/tut/MakeGames.rst#2025-04-20_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nfrom objects,resources import *\n```\n\n----------------------------------------\n\nTITLE: Initializing and Running Pygame Animation with Moving Text\nDESCRIPTION: This snippet sets up a Pygame window, initializes text rendering, and implements a game loop for moving text animation. It uses a clock to control frame rate and implements basic boundary collision for the text movement.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/tut/en/Red_or_Black/3.Move_text/Basic PROCESS.rst#2025-04-20_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport pygame, sys\nfrom pygame.locals import*\n\nwhite = (255,255,255)\nred = (255,0,0)\ngreen = (0,255,0)\npygame.init()\npygame.display.set_caption(\"Moving World Project\") \nmyScreen = pygame.display.set_mode((640, 480))\nmyTextFont = pygame.font.Font(\"HoonWhitecatR.ttf\", 32)\nmyText = myTextFont.render(\"Moving World!\", True, red, green) \nmyTextArea = myText.get_rect()\nmyTextArea.center = (320, 240)\nfpsClock = pygame.time.Clock() #1\nx = 0 #2\ny = 0 #3\nmoveRight = 1 #4\nmoveUp= 1 #5\n\nwhile True:\n    if (moveRight == 1): #6\n        x = x + 1\n        if (x >= 320 - 75):\n            moveRight = 0\n    elif (moveRight == 0): #7\n        x = x - 1\n        if (x <= -320 + 75):\n            moveRight = 1\n\n    if (moveUp == 1): #8\n        y = y + 1\n        if (y >= 240 - 15):\n            moveUp = 0\n    elif (moveUp == 0): #9\n        y = y - 1\n        if (y <= -240 + 15):\n            moveUp = 1\n\n\n\nmyTextArea.center = (320 + x, 240 + y) #10\n\nmyScreen.fill(white)\nmyScreen.blit(myText, myTextArea)\n\nfor event in pygame.event.get():\n    if event.type == QUIT:\n        pygame.quit()\n        sys.exit()\n\npygame.display.update()\nfpsClock.tick(60) #11\n```\n\n----------------------------------------\n\nTITLE: Finding Bounding Rectangle of Content in Pygame Surface\nDESCRIPTION: Method that returns the smallest rectangular region containing all pixels with alpha values greater than or equal to the specified minimum. This function temporarily locks and unlocks the Surface as needed.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/surface.rst#2025-04-20_snippet_37\n\nLANGUAGE: python\nCODE:\n```\nget_bounding_rect(min_alpha = 1) -> Rect\n```\n\n----------------------------------------\n\nTITLE: Accessing Event Attributes in Pygame\nDESCRIPTION: This read-only attribute of the Event class returns a dictionary containing the event type-specific attributes. It's also accessible via the 'dict' attribute for backward compatibility.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/event.rst#2025-04-20_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\n__dict__ -> dict\n```\n\n----------------------------------------\n\nTITLE: Initializing Pygame and Setting Up Display\nDESCRIPTION: This code initializes Pygame, sets up the display window with specific dimensions and flags, and configures the window caption and mouse visibility.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/es/tutorials/ChimpanceLineaporLinea.rst#2025-04-20_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\npg.init()\nscreen = pg.display.set_mode((1280, 480), pg.SCALED)\npg.display.set_caption(\"Monkey Fever\")\npg.mouse.set_visible(False)\n```\n\n----------------------------------------\n\nTITLE: Getting Surface Dimensions in Pygame\nDESCRIPTION: Returns the width and height of the Surface in pixels.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/surface.rst#2025-04-20_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nget_size() -> (width, height)\n```\n\n----------------------------------------\n\nTITLE: Handling Pygame Events for User Input\nDESCRIPTION: This code snippet demonstrates how to handle Pygame events to control the movement of a bat object based on user input. It checks for key presses and releases to move the bat up and down.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/tut/tom_games5.rst#2025-04-20_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfor event in pygame.event.get():\n    if event.type == QUIT:\n        return\n    elif event.type == KEYDOWN:\n        if event.key == K_UP:\n            player.moveup()\n        if event.key == K_DOWN:\n            player.movedown()\n    elif event.type == KEYUP:\n        if event.key == K_UP or event.key == K_DOWN:\n            player.movepos = [0,0]\n            player.state = \"still\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Pygame Mixer Module\nDESCRIPTION: Initializes the mixer module with configurable parameters for sound playback including frequency, size, channels, and buffer size. Also supports device selection and format change controls through allowedchanges parameter.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/mixer.rst#2025-04-20_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\npygame.mixer.init(frequency=44100, size=-16, channels=2, buffer=512, devicename=None, allowedchanges=AUDIO_ALLOW_FREQUENCY_CHANGE | AUDIO_ALLOW_CHANNELS_CHANGE)\n```\n\n----------------------------------------\n\nTITLE: Creating Game Background Surface\nDESCRIPTION: Creates and configures the game background surface with a specific color. Initializes a surface matching the screen size and optimizes it for display.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/tut/ChimpLineByLine.rst#2025-04-20_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nbackground = pg.Surface(screen.get_size())\nbackground = background.convert()\nbackground.fill((170, 238, 187))\n```\n\n----------------------------------------\n\nTITLE: Retrieving Active Finger Information in Pygame\nDESCRIPTION: This function retrieves information about an active finger on a touch device. It takes a touch device ID and finger index as parameters and returns a dictionary containing details about the finger's position and pressure.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/touch.rst#2025-04-20_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nget_finger(touchid, index) -> int\n```\n\n----------------------------------------\n\nTITLE: Rendering Text with Pygame Font\nDESCRIPTION: The render method creates a new Surface with the specified text rendered on it. It allows for color, antialiasing, and background color options.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/font.rst#2025-04-20_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nFont.render(text, antialias, color, background=None) -> Surface\n```\n\n----------------------------------------\n\nTITLE: Basic Pygame Setup Reference\nDESCRIPTION: Reference to a basic Pygame setup script that demonstrates window creation, screen updates, and event handling.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/index.rst#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Referenced file: ref/code_examples/base_script.py\n```\n\n----------------------------------------\n\nTITLE: Pygame 2 Additional Event Types\nDESCRIPTION: A listing of new event types introduced in Pygame 2, including file dropping, MIDI events, controller hot-plugging, and system events. Each event type is listed with its associated attributes.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/event.rst#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nEvent name               Attributes and notes\n\nDROPFILE                 file\nDROPBEGIN                (SDL backend >= 2.0.5)\nDROPCOMPLETE             (SDL backend >= 2.0.5)\nDROPTEXT                 text (SDL backend >= 2.0.5)\nMIDIIN\nMIDIOUT\nCONTROLLERDEVICEADDED    device_index\nJOYDEVICEADDED           device_index\nCONTROLLERDEVICEREMOVED  instance_id\nJOYDEVICEREMOVED         instance_id\nCONTROLLERDEVICEREMAPPED instance_id\nKEYMAPCHANGED            (SDL backend >= 2.0.4)\nCLIPBOARDUPDATE\nRENDER_TARGETS_RESET     (SDL backend >= 2.0.2)\nRENDER_DEVICE_RESET      (SDL backend >= 2.0.4)\nLOCALECHANGED            (SDL backend >= 2.0.14)\n```\n\n----------------------------------------\n\nTITLE: Defining Window Event Types in Pygame\nDESCRIPTION: Lists the various window event types available in Pygame, including events for window visibility, size changes, focus, and more. These events can be used to detect and respond to changes in the application window state.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/event.rst#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nWINDOWSHOWN            Window became shown\nWINDOWHIDDEN           Window became hidden\nWINDOWEXPOSED          Window got updated by some external event\nWINDOWMOVED            Window got moved\nWINDOWRESIZED          Window got resized\nWINDOWSIZECHANGED      Window changed its size\nWINDOWMINIMIZED        Window was minimized\nWINDOWMAXIMIZED        Window was maximized\nWINDOWRESTORED         Window was restored\nWINDOWENTER            Mouse entered the window\nWINDOWLEAVE            Mouse left the window\nWINDOWFOCUSGAINED      Window gained focus\nWINDOWFOCUSLOST        Window lost focus\nWINDOWCLOSE            Window was closed\nWINDOWTAKEFOCUS        Window was offered focus (SDL backend >= 2.0.5)\nWINDOWHITTEST          Window has a special hit test (SDL backend >= 2.0.5)\nWINDOWICCPROFCHANGED   Window ICC profile changed (SDL backend >= 2.0.18)\nWINDOWDISPLAYCHANGED   Window moved on a new display (SDL backend >= 2.0.18)\n```\n\n----------------------------------------\n\nTITLE: Calculating Collision Normal Using Mask Overlap in Python\nDESCRIPTION: This code snippet demonstrates how to calculate an approximate collision normal using the overlap_area method of a Mask object. It uses finite difference to compute the gradient of the overlapping area.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/mask.rst#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndx = mask.overlap_area(other, (x + 1, y)) - mask.overlap_area(other, (x - 1, y))\ndy = mask.overlap_area(other, (x, y + 1)) - mask.overlap_area(other, (x, y - 1))\n```\n\n----------------------------------------\n\nTITLE: Basic Game Structure Pseudo-code\nDESCRIPTION: Demonstrates the basic structure of a Pygame game using classes, including module loading, resource handling, and main game loop.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/tut/tom_games4.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n#!/usr/bin/python\n\n# [load modules here]\n\n# [resource handling functions here]\n\nclass Ball:\n    # [ball functions (methods) here]\n    # [e.g. a function to calculate new position]\n    # [and a function to check if it hits the side]\n\ndef main:\n    # [initiate game environment here]\n\n    # [create new object as instance of ball class]\n    ball = Ball()\n\n    while True:\n        # [check for user input]\n\n        # [call ball's update function]\n        ball.update()\n```\n\n----------------------------------------\n\nTITLE: Surface Lock Management Methods\nDESCRIPTION: Methods for controlling surface memory locking for pixel access, including lock(), unlock(), and mustlock(). These methods manage surface memory access for pixel operations.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/surface.rst#2025-04-20_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\nsurface.lock()\nsurface.unlock()\nsurface.mustlock()\n```\n\n----------------------------------------\n\nTITLE: Keyboard Input State Checking\nDESCRIPTION: Demonstrates how to check for multiple simultaneous key presses using Pygame's key state checking system.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/tut/newbieguide.rst#2025-04-20_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nif key.get_pressed[K_t] and key.get_pressed[K_f]:\n    print(\"Yup!\")\n```\n\n----------------------------------------\n\nTITLE: Copying Green Pixel Values to 2D Array in Python using Pygame\nDESCRIPTION: This function copies pixel green values from a Surface into a 2D array. It works for any Surface format and temporarily locks the Surface during copying. Introduced in Pygame 2.0.2.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/surfarray.rst#2025-04-20_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\narray_green(Surface) -> array\n```\n\n----------------------------------------\n\nTITLE: Drawing Circles with Pygame\nDESCRIPTION: Function for drawing circles on a surface with optional width and quadrant parameters. Supports drawing filled circles or circle outlines with specified line thickness. Can selectively draw specific quadrants of the circle.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/draw.rst#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ncircle(surface, color, center, radius) -> Rect\ncircle(surface, color, center, radius, width=0, draw_top_right=None, draw_top_left=None, draw_bottom_left=None, draw_bottom_right=None) -> Rect\n```\n\n----------------------------------------\n\nTITLE: Smooth Scaling a Surface in Pygame\nDESCRIPTION: Scales a surface to an arbitrary size smoothly using different algorithms for shrinkage and expansion. Works only for 24-bit or 32-bit surfaces.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/transform.rst#2025-04-20_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nsmoothscale(surface, size, dest_surface=None) -> Surface\n```\n\n----------------------------------------\n\nTITLE: Importing Modules and Checking Optional Components in Pygame\nDESCRIPTION: This code imports necessary modules, checks for optional Pygame components, and sets up directory paths for resource loading.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/tut/ChimpLineByLine.rst#2025-04-20_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n# Import Modules\nimport os\nimport pygame as pg\n\nif not pg.font:\n    print(\"Warning, fonts disabled\")\nif not pg.mixer:\n    print(\"Warning, sound disabled\")\n\nmain_dir = os.path.split(os.path.abspath(__file__))[0]\ndata_dir = os.path.join(main_dir, \"data\")\n```\n\n----------------------------------------\n\nTITLE: Python Drawing Example\nDESCRIPTION: Example code demonstrating the drawing functionality in Pygame from the referenced draw_module_example.py file.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/draw.rst#2025-04-20_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n# Example code path referenced but not directly shown in the input text\n# draw_module_example.py\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Rect.collideobjectsall Usage in Python\nDESCRIPTION: This code snippet shows how to use the Rect.collideobjectsall method for collision detection with both simple Rect objects and custom objects with multiple Rect attributes.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/rect.rst#2025-04-20_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nr = Rect(1, 1, 10, 10)\n\nrects = [\n    Rect(1, 1, 10, 10),\n    Rect(5, 5, 10, 10),\n    Rect(15, 15, 1, 1),\n    Rect(2, 2, 1, 1),\n]\n\nresult = r.collideobjectsall(\n    rects\n)  # -> [<rect(1, 1, 10, 10)>, <rect(5, 5, 10, 10)>, <rect(2, 2, 1, 1)>]\nprint(result)\n\nclass ObjectWithSomRectAttribute:\n    def __init__(self, name, collision_box, draw_rect):\n        self.name = name\n        self.draw_rect = draw_rect\n        self.collision_box = collision_box\n\n    def __repr__(self):\n        return f'<{self.__class__.__name__}(\"{self.name}\", {list(self.collision_box)}, {list(self.draw_rect)})>'\n\nobjects = [\n    ObjectWithSomRectAttribute(\"A\", Rect(1, 1, 10, 10), Rect(300, 300, 50, 50)),\n    ObjectWithSomRectAttribute(\"B\", Rect(5, 5, 10, 10), Rect(200, 500, 50, 50)),\n    ObjectWithSomRectAttribute(\"C\", Rect(15, 15, 1, 1), Rect(150, 150, 50, 50)),\n]\n\n# collisions = r.collideobjectsall(objects) # this does not work because ObjectWithSomRectAttribute is not a Rect like object\ncollisions = r.collideobjectsall(\n    objects, key=lambda o: o.collision_box\n)  # -> [<ObjectWithSomRectAttribute(\"A\", [1, 1, 10, 10], [300, 300, 50, 50])>, <ObjectWithSomRectAttribute(\"B\", [5, 5, 10, 10], [200, 500, 50, 50])>]\nprint(collisions)\n\nscreen_rects = r.collideobjectsall(objects, key=lambda o: o.draw_rect)  # -> []\nprint(screen_rects)\n```\n\n----------------------------------------\n\nTITLE: Display Mode Configuration Examples\nDESCRIPTION: Shows different methods for initializing the graphics display, including windowed mode, fullscreen with specific bit depth, and checking for 8-bit display support.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/tut/DisplayModes.rst#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> # give me the best depth with a 640 x 480 windowed display\n>>> pygame.display.set_mode((640, 480))\n\n>>> # give me the biggest 16-bit display available\n>>> modes = pygame.display.list_modes(16)\n>>> if not modes:\n...     print('16-bit not supported')\n... else:\n...     print('Found Resolution:', modes[0])\n...     pygame.display.set_mode(modes[0], FULLSCREEN, 16)\n\n>>> # need an 8-bit surface, nothing else will do\n>>> if pygame.display.mode_ok((800, 600), 0, 8) != 8:\n...     print('Can only work with an 8-bit display, sorry')\n... else:\n...     pygame.display.set_mode((800, 600), 0, 8)\n```\n\n----------------------------------------\n\nTITLE: Blitting Multiple Surfaces in Pygame\nDESCRIPTION: Demonstrates the blits method for drawing multiple surfaces at once, with various parameter combinations.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/surface.rst#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nblits(blit_sequence=((source, dest), ...), doreturn=1) -> [Rect, ...] or None\nblits(((source, dest, area), ...)) -> [Rect, ...]\nblits(((source, dest, area, special_flags), ...)) -> [Rect, ...]\n```\n\n----------------------------------------\n\nTITLE: Sound Volume Control Example\nDESCRIPTION: Demonstrates how to control sound volume using both Sound and Channel objects, showing the multiplicative effect of both volume settings.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/mixer.rst#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nsound = pygame.mixer.Sound(\"s.wav\")\nchannel = s.play()      # Sound plays at full volume by default\nsound.set_volume(0.9)   # Now plays at 90% of full volume.\nsound.set_volume(0.6)   # Now plays at 60% (previous value replaced).\nchannel.set_volume(0.5) # Now plays at 30% (0.6 * 0.5).\n```\n\n----------------------------------------\n\nTITLE: Drawing Game Scene in Pygame\nDESCRIPTION: This code demonstrates how to draw the entire game scene in Pygame. It blits the background, draws all sprites, and updates the display. This is typically done once per frame to render the current game state.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/tut/ChimpLineByLine.rst#2025-04-20_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\nscreen.blit(background, (0, 0))\nallsprites.draw(screen)\npg.display.flip()\n```\n\n----------------------------------------\n\nTITLE: Initializing Pygame GUI with HP Display and Interactive Buttons\nDESCRIPTION: This snippet sets up a Pygame window, initializes fonts and colors, and defines the main game loop. It handles keyboard and mouse events to update the HP value, renders text and HP bars, and draws interactive buttons.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/tut/en/Red_or_Black/6.Buttons/Advanced INPUT with Advanced OUTPUT.rst#2025-04-20_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport pygame, sys\nfrom pygame.locals import*\n\nmaxHP = 10 \nwhite = (255,255,255)\ngray = (127,127,127)\nblack = (0,0,0)\nred = (255,0,0)\ngreen = (0,255,0)\nblue = (0,0,255)\npygame.init()\npygame.display.set_caption(\"Array buttons Project\")\nwidth = 640 \nheight = 480\nmyScreen = pygame.display.set_mode((width, height))\nmyTextFont = pygame.font.Font(\"HoonWhitecatR.ttf\", 32)\nmyText = myTextFont.render((str(maxHP) + \"/\" + str(maxHP)), True, red, gray)\nmyTextArea = myText.get_rect()\nmyTextArea.center = (width/2, height/2)\nfpsClock = pygame.time.Clock()\n\ndef main():\n    HP = 5\n    \n    while True:\n        myText = myTextFont.render((str(HP) + \"/\" + str(maxHP)), True, red, gray)\n    \n        myScreen.fill(gray)\n\n        myScreen.blit(myText, myTextArea)\n        drawHP(HP)\n        drawButtons()\n\n        for event in pygame.event.get():\n            if event.type == QUIT:\n                pygame.quit()\n                sys.exit()\n            elif event.type == KEYDOWN:\n                if event.key == K_UP:\n                    if HP != 10:\n                        HP = HP + 1\n                elif event.key == K_DOWN:\n                    if HP != 0:\n                        HP = HP - 1\n            elif event.type == MOUSEBUTTONUP: #1\n                x, y = event.pos\n                if pygame.Rect(270, 425, 45, 45).collidepoint(x, y):\n                    if HP != 10:\n                        HP = HP + 1\n                elif pygame.Rect(325, 425, 45, 45).collidepoint(x, y):\n                    if HP != 0:\n                        HP = HP - 1      \n    \n        pygame.display.update()\n        fpsClock.tick(60)\n\nif __name__ == '__main__':\n    main()\n```\n\n----------------------------------------\n\nTITLE: Playing Audio Files in Pygame\nDESCRIPTION: This function implements a simple music player with window and keyboard playback control. It allows pausing and rewinding the audio to the beginning.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/examples.rst#2025-04-20_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\ndef playmus.main(file_path) -> None:\n```\n\n----------------------------------------\n\nTITLE: Accessing Raw Pixel Address in Pygame Surface\nDESCRIPTION: Attribute that provides the starting memory address of the surface's raw pixel bytes, allowing for low-level pixel access.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/surface.rst#2025-04-20_snippet_40\n\nLANGUAGE: python\nCODE:\n```\n_pixels_address -> int\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Event Type in Pygame\nDESCRIPTION: This function reserves a pygame.USEREVENT for custom use. It returns an integer representing the new event type. If too many events are created, it raises a pygame.error.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/event.rst#2025-04-20_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\ncustom_type() -> int\n```\n\n----------------------------------------\n\nTITLE: Loading Music File in Pygame\nDESCRIPTION: Demonstrates how to load a music file for playback using pygame.mixer.music.load(). It can accept a filename or a file object, with an optional namehint for specifying the file type.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/music.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nload(filename) -> None\nload(fileobj, namehint=\"\") -> None\n```\n\n----------------------------------------\n\nTITLE: Initializing Window in Pygame SDL2\nDESCRIPTION: Creates a Window object representing a window in Pygame. The window can be customized with various parameters such as title, size, position, and fullscreen options.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/sdl2_video.rst#2025-04-20_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nWindow(title=\"pygame\", size=(640, 480), position=None, fullscreen=False, fullscreen_desktop=False, keywords) -> Window\n```\n\n----------------------------------------\n\nTITLE: Rendering Text on Background\nDESCRIPTION: Renders text onto the background surface using Pygame font system. Creates centered text with antialiasing and specific positioning.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/tut/ChimpLineByLine.rst#2025-04-20_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nif pg.font:\n    font = pg.font.Font(None, 64)\n    text = font.render(\"Pummel The Chimp, And Win $$$\", True, (10, 10, 10))\n    textpos = text.get_rect(centerx=background.get_width() / 2, y=10)\n    background.blit(text, textpos)\n```\n\n----------------------------------------\n\nTITLE: Initializing pygame.Surface in Python\nDESCRIPTION: Shows the different ways to create a pygame.Surface object, including specifying dimensions, flags, depth, and masks.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/surface.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nSurface((width, height), flags=0, depth=0, masks=None) -> Surface\nSurface((width, height), flags=0, Surface) -> Surface\n```\n\n----------------------------------------\n\nTITLE: Initializing Joystick Module and Getting Joystick Instances in Python\nDESCRIPTION: This code snippet demonstrates how to initialize the joystick module and create a list of Joystick instances for all connected devices.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/joystick.rst#2025-04-20_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\npygame.joystick.init()\njoysticks = [pygame.joystick.Joystick(x) for x in range(pygame.joystick.get_count())]\n```\n\n----------------------------------------\n\nTITLE: Importing Pygame Constants\nDESCRIPTION: Shows how to selectively import all constants from the pygame.locals module into the current namespace.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/locals.rst#2025-04-20_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom pygame.locals import *\n```\n\n----------------------------------------\n\nTITLE: Drawing an Antialiased Polygon in Pygame\nDESCRIPTION: Draws an unfilled antialiased polygon on a given surface using the pygame.gfxdraw.aapolygon function. Parameters include surface, a sequence of (x, y) coordinates for the polygon vertices, and color.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/gfxdraw.rst#2025-04-20_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\npygame.gfxdraw.aapolygon(surface, points, color)\n```\n\n----------------------------------------\n\nTITLE: Sprite Collision Detection with Points\nDESCRIPTION: Shows how to detect collision between a point and multiple sprites using list comprehension and Rect's collidepoint method.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/tut/newbieguide.rst#2025-04-20_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nsprites_clicked = [sprite for sprite in all_my_sprites_list if sprite.rect.collidepoint(x, y)]\n```\n\n----------------------------------------\n\nTITLE: Installing Pygame\nDESCRIPTION: Command to install Pygame using pip package manager\nSOURCE: https://github.com/pygame/pygame/blob/main/README.rst#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npip install pygame\n```\n\n----------------------------------------\n\nTITLE: Referencing Green Pixel Values in 2D Array in Python using Pygame\nDESCRIPTION: This function creates a 2D array directly referencing green values in a Surface. It only works on 24-bit or 32-bit Surfaces. Changes to the array affect the Surface pixels. The Surface remains locked for the array's lifetime.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/surfarray.rst#2025-04-20_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\npixels_green(Surface) -> array\n```\n\n----------------------------------------\n\nTITLE: Scaling a Surface in Pygame\nDESCRIPTION: Resizes a Surface to a new size specified by width and height. An optional destination surface can be provided for faster repeated scaling.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/transform.rst#2025-04-20_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nscale(surface, size, dest_surface=None) -> Surface\n```\n\n----------------------------------------\n\nTITLE: Rotating and Zooming a Surface in Pygame\nDESCRIPTION: Combines scaling and rotation of a Surface. Returns a filtered 32-bit Surface. Scale is a float multiplier, angle is in degrees.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/transform.rst#2025-04-20_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nrotozoom(surface, angle, scale) -> Surface\n```\n\n----------------------------------------\n\nTITLE: SDL2 Additional Event Types and Attributes\nDESCRIPTION: A listing of additional event types available when Pygame is compiled with SDL2. These include audio device events, touch events, text input events, and precise mouse wheel events.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/event.rst#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nAUDIODEVICEADDED   which, iscapture (SDL backend >= 2.0.4)\nAUDIODEVICEREMOVED which, iscapture (SDL backend >= 2.0.4)\nFINGERMOTION       touch_id, finger_id, x, y, dx, dy\nFINGERDOWN         touch_id, finger_id, x, y, dx, dy\nFINGERUP           touch_id, finger_id, x, y, dx, dy\nMOUSEWHEEL         which, flipped, x, y, touch, precise_x, precise_y\nMULTIGESTURE       touch_id, x, y, pinched, rotated, num_fingers\nTEXTEDITING        text, start, length\nTEXTINPUT          text\n```\n\n----------------------------------------\n\nTITLE: Drawing Ellipse in Pygame\nDESCRIPTION: Draws a filled or outlined ellipse on a given surface. The function takes parameters for the surface, color, rectangle dimensions, and optional width for outline thickness.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/draw.rst#2025-04-20_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\npygame.draw.ellipse(surface, color, rect) -> Rect\npygame.draw.ellipse(surface, color, rect, width=0) -> Rect\n```\n\n----------------------------------------\n\nTITLE: Finding Average Color of Surface in Pygame\nDESCRIPTION: Calculates the average color of a Surface or a region specified by a Rect. Can consider alpha to remove black artifacts.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/transform.rst#2025-04-20_snippet_13\n\nLANGUAGE: Python\nCODE:\n```\naverage_color(surface, rect=None, consider_alpha=False) -> Color\n```\n\n----------------------------------------\n\nTITLE: Implementando una Clase de Bate en Pygame\nDESCRIPTION: Código que define la clase Bat para un juego tipo Pong, con funciones para inicializar, reiniciar posición, actualizar estado y mover el bate hacia arriba o abajo. Incluye manejo de atributos para posición, velocidad y estado.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/es/tutorials/tom_juegos5.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass Bat(pygame.sprite.Sprite):\n    \"\"\"Movable tennis 'bat' with which one hits the ball\n    Returns: bat object\n    Functions: reinit, update, moveup, movedown\n    Attributes: which, speed\"\"\"\n\n    def __init__(self, side):\n        pygame.sprite.Sprite.__init__(self)\n        self.image, self.rect = load_png(\"bat.png\")\n        screen = pygame.display.get_surface()\n        self.area = screen.get_rect()\n        self.side = side\n        self.speed = 10\n        self.state = \"still\"\n        self.reinit()\n\n    def reinit(self):\n        self.state = \"still\"\n        self.movepos = [0,0]\n        if self.side == \"left\":\n            self.rect.midleft = self.area.midleft\n        elif self.side == \"right\":\n            self.rect.midright = self.area.midright\n\n    def update(self):\n        newpos = self.rect.move(self.movepos)\n        if self.area.contains(newpos):\n            self.rect = newpos\n        pygame.event.pump()\n\n    def moveup(self):\n        self.movepos[1] = self.movepos[1] - (self.speed)\n        self.state = \"moveup\"\n\n    def movedown(self):\n        self.movepos[1] = self.movepos[1] + (self.speed)\n        self.state = \"movedown\"\n```\n\n----------------------------------------\n\nTITLE: Creating Mask Objects - Python Class Example\nDESCRIPTION: A code example showing how to create custom mask subclasses with proper copy method implementation.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/mask.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass SubMask(pygame.mask.Mask):\n    def __copy__(self):\n        new_mask = super().__copy__()\n        # Do any SubMask attribute copying here.\n        return new_mask\n```\n\n----------------------------------------\n\nTITLE: Detecting Collision Between Sprite and Group in Pygame\nDESCRIPTION: The spritecollideany function checks if a given sprite collides with any sprite in a group. It returns a single sprite from the group if a collision occurs, or None if there's no collision. This function is optimized for performance when checking against multiple sprites.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/sprite.rst#2025-04-20_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nspritecollideany(sprite, group, collided = None) -> None\n```\n\n----------------------------------------\n\nTITLE: Generating and Drawing Game Board\nDESCRIPTION: Functions to generate a random 5x5 game board with red and black squares, and to draw the board on the screen. The generateBoard function also counts the number of red and black squares.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/tut/en/Red_or_Black/7.Game_board/Advanced OUTPUT and plus alpha.rst#2025-04-20_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\ndef generateBoard(width, height): #5\n    board = []\n    b_red = 0\n    b_black = 0\n    \n    for x in range(width):\n        column = []\n        for y in range(height):\n            column.append(random.randint(0, 1))\n        board.append(column)\n\n    for x in range(width):\n        for y in range(height):\n            if(board[x][y] == 1):\n                 b_red = b_red + 1\n            elif(board[x][y] == 0):\n                b_black = b_black + 1\n        \n    return board, b_red, b_black\n\ndef drawBoard(board): #6\n    r = 50\n    b_width = 5\n    b_height = 5\n    l_margin = int((width - (b_width * r)) / 2)\n    u_margin = int((height - (b_height * r)) / 2)\n\n    for x in range(5):\n        for y in range(5):\n            left = x * r + l_margin\n            up = y * r + u_margin\n            if board[x][y] == 1:\n                color = red;\n            elif board[x][y] == 0:\n                color = black\n            pygame.draw.rect(myScreen, color, (left, up, r, r))\n            \n    left = l_margin\n    up = u_margin\n    pygame.draw.rect(myScreen, white, (left-1, up-1, r * 5 + 1, r * b_height + 1), 1)\n```\n\n----------------------------------------\n\nTITLE: Implementing a Bat Class in Pygame\nDESCRIPTION: This code snippet defines a Bat class for a tennis-like game in Pygame. It includes methods for initialization, movement, and updating the bat's position based on user input.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/tut/tom_games5.rst#2025-04-20_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nclass Bat(pygame.sprite.Sprite):\n    \"\"\"Movable tennis 'bat' with which one hits the ball\n    Returns: bat object\n    Functions: reinit, update, moveup, movedown\n    Attributes: which, speed\"\"\"\n\n    def __init__(self, side):\n        pygame.sprite.Sprite.__init__(self)\n        self.image, self.rect = load_png(\"bat.png\")\n        screen = pygame.display.get_surface()\n        self.area = screen.get_rect()\n        self.side = side\n        self.speed = 10\n        self.state = \"still\"\n        self.reinit()\n\n    def reinit(self):\n        self.state = \"still\"\n        self.movepos = [0,0]\n        if self.side == \"left\":\n            self.rect.midleft = self.area.midleft\n        elif self.side == \"right\":\n            self.rect.midright = self.area.midright\n\n    def update(self):\n        newpos = self.rect.move(self.movepos)\n        if self.area.contains(newpos):\n            self.rect = newpos\n        pygame.event.pump()\n\n    def moveup(self):\n        self.movepos[1] = self.movepos[1] - (self.speed)\n        self.state = \"moveup\"\n\n    def movedown(self):\n        self.movepos[1] = self.movepos[1] + (self.speed)\n        self.state = \"movedown\"\n```\n\n----------------------------------------\n\nTITLE: Filling a Surface with Color in Pygame\nDESCRIPTION: Demonstrates the fill method for coloring a Surface, with options for specifying a rect and special flags.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/surface.rst#2025-04-20_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfill(color, rect=None, special_flags=0) -> Rect\n```\n\n----------------------------------------\n\nTITLE: Copying Sound Samples to Array in Python\nDESCRIPTION: Creates a new array containing copies of the sound samples from a Sound object. The array format matches the current mixer initialization.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/sndarray.rst#2025-04-20_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\narray(Sound) -> array\n```\n\n----------------------------------------\n\nTITLE: Keyboard Constants Definition in Pygame\nDESCRIPTION: Comprehensive list of keyboard constants used to represent keys in Pygame. These constants should be used instead of direct integer values for compatibility between Pygame versions.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/key.rst#2025-04-20_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n      pygame\n      Constant      ASCII   Description\n      ---------------------------------\n      K_BACKSPACE   \\b      backspace\n      K_TAB         \\t      tab\n      K_CLEAR               clear\n      K_RETURN      \\r      return\n      # ... additional key constants\n```\n\n----------------------------------------\n\nTITLE: Displaying Live Camera Feed in Pygame\nDESCRIPTION: This function creates a simple live video player using the first available camera on the system.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/examples.rst#2025-04-20_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\ndef camera.main() -> None:\n```\n\n----------------------------------------\n\nTITLE: Converting Surface with Alpha in Pygame\nDESCRIPTION: Demonstrates the convert_alpha method for changing the pixel format while preserving or creating per-pixel alphas.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/surface.rst#2025-04-20_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nconvert_alpha(Surface) -> Surface\nconvert_alpha() -> Surface\n```\n\n----------------------------------------\n\nTITLE: Basic PixelArray Pixel Assignment\nDESCRIPTION: Demonstrates different ways to assign pixel colors using integer values, Color objects, and RGB tuples.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/pixelarray.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\npxarray[x, y] = 0xFF00FF\npxarray[x, y] = pygame.Color(255, 0, 255)\npxarray[x, y] = (255, 0, 255)\n```\n\n----------------------------------------\n\nTITLE: Drawing a Polygon in Pygame\nDESCRIPTION: Draws an unfilled polygon on a given surface using the pygame.gfxdraw.polygon function. It takes parameters for surface, a sequence of (x, y) coordinates for the polygon vertices, and color.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/gfxdraw.rst#2025-04-20_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\npygame.gfxdraw.polygon(surface, points, color)\n```\n\n----------------------------------------\n\nTITLE: Handling Unicode Text Input in Python with Pygame\nDESCRIPTION: Shows how to enable and disable Unicode text input event handling, which is useful for implementing text entry in games.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/key.rst#2025-04-20_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\npygame.key.start_text_input()  # Start receiving text input events\n# ... text input logic ...\npygame.key.stop_text_input()  # Stop receiving text input events\n```\n\n----------------------------------------\n\nTITLE: Using Pygame Rect Clipline Method\nDESCRIPTION: Demonstrates how to use the clipline method for collision detection between a rectangle and a line. The method returns the coordinates of the clipped line or an empty tuple if there's no overlap.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/rect.rst#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Example using clipline().\nclipped_line = rect.clipline(line)\n\nif clipped_line:\n    # If clipped_line is not an empty tuple then the line\n    # collides/overlaps with the rect. The returned value contains\n    # the endpoints of the clipped line.\n    start, end = clipped_line\n    x1, y1 = start\n    x2, y2 = end\nelse:\n    print(\"No clipping. The line is fully outside the rect.\")\n```\n\n----------------------------------------\n\nTITLE: Pygame Mask get_bounding_rects Method Documentation\nDESCRIPTION: Returns a list of Rect objects representing the bounding rectangles for each connected component in the mask. Returns an empty list if the mask has no bits set.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/mask.rst#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nget_bounding_rects() -> list[Rect]\n```\n\n----------------------------------------\n\nTITLE: Drawing Line in Pygame\nDESCRIPTION: Draws a straight line on a given surface. The function takes parameters for the surface, color, start and end positions, and optional width for line thickness.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/draw.rst#2025-04-20_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\npygame.draw.line(surface, color, start_pos, end_pos) -> Rect\npygame.draw.line(surface, color, start_pos, end_pos, width=1) -> Rect\n```\n\n----------------------------------------\n\nTITLE: Drawing Multiple Lines in Pygame\nDESCRIPTION: Draws multiple contiguous straight line segments on a given surface. The function takes parameters for the surface, color, closed flag, points sequence, and optional width for line thickness.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/draw.rst#2025-04-20_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\npygame.draw.lines(surface, color, closed, points) -> Rect\npygame.draw.lines(surface, color, closed, points, width=1) -> Rect\n```\n\n----------------------------------------\n\nTITLE: Initializing Pygame Game and Importing Modules\nDESCRIPTION: Sets up the initial structure of a Pygame game, including file metadata, version information, and necessary module imports with error handling.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/tut/tom_games3.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n#!/usr/bin/env python\n#\n# Tom's Pong\n# A simple pong game with realistic physics and AI\n# http://tomchance.org.uk/projects/pong\n#\n# Released under the GNU General Public License\n\nVERSION = \"0.4\"\n\ntry:\n    import sys\n    import random\n    import math\n    import os\n    import getopt\n    import pygame\n    from socket import *\n    from pygame.locals import *\nexcept ImportError as err:\n    print(f\"couldn't load module. {err}\")\n    sys.exit(2)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Rect.collideobjects Usage in Python\nDESCRIPTION: This code snippet demonstrates the usage of the Rect.collideobjects method, including collision detection with simple Rect objects and custom objects with multiple Rect attributes.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/rect.rst#2025-04-20_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nr = Rect(1, 1, 10, 10)\n\nrects = [\n    Rect(1, 1, 10, 10),\n    Rect(5, 5, 10, 10),\n    Rect(15, 15, 1, 1),\n    Rect(2, 2, 1, 1),\n]\n\nresult = r.collideobjects(rects)  # -> <rect(1, 1, 10, 10)>\nprint(result)\n\nclass ObjectWithSomRectAttribute:\n    def __init__(self, name, collision_box, draw_rect):\n        self.name = name\n        self.draw_rect = draw_rect\n        self.collision_box = collision_box\n\n    def __repr__(self):\n        return f'<{self.__class__.__name__}(\"{self.name}\", {list(self.collision_box)}, {list(self.draw_rect)})>'\n\nobjects = [\n    ObjectWithSomRectAttribute(\"A\", Rect(15, 15, 1, 1), Rect(150, 150, 50, 50)),\n    ObjectWithSomRectAttribute(\"B\", Rect(1, 1, 10, 10), Rect(300, 300, 50, 50)),\n    ObjectWithSomRectAttribute(\"C\", Rect(5, 5, 10, 10), Rect(200, 500, 50, 50)),\n]\n\n# collision = r.collideobjects(objects) # this does not work because the items in the list are no Rect like object\ncollision = r.collideobjects(\n    objects, key=lambda o: o.collision_box\n)  # -> <ObjectWithSomRectAttribute(\"B\", [1, 1, 10, 10], [300, 300, 50, 50])>\nprint(collision)\n\nscreen_rect = r.collideobjects(objects, key=lambda o: o.draw_rect)  # -> None\nprint(screen_rect)\n```\n\n----------------------------------------\n\nTITLE: Scrolling Magnified Image Example in Pygame\nDESCRIPTION: This function demonstrates a scrollable image with a zoom factor of eight using Surface.scroll(). It allows moving the image pixel by pixel using arrow keys or clicking on black triangles.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/examples.rst#2025-04-20_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\ndef scroll.main(image_file=None) -> None:\n```\n\n----------------------------------------\n\nTITLE: Creating Surface from Array in Python using Pygame\nDESCRIPTION: This function creates a new Surface that best resembles the data and format of the given array. It supports 2D or 3D arrays with any sized integer values. It uses the array struct interface for compatibility with various array types, not just NumPy arrays.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/surfarray.rst#2025-04-20_snippet_13\n\nLANGUAGE: Python\nCODE:\n```\nmake_surface(array) -> Surface\n```\n\n----------------------------------------\n\nTITLE: Precise Delay Timer in Pygame\nDESCRIPTION: Pauses program execution for specified milliseconds using busy-wait. More accurate than wait() but uses more CPU resources.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/time.rst#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndelay(milliseconds) -> time\n```\n\n----------------------------------------\n\nTITLE: Setting Surface Color Methods\nDESCRIPTION: Methods for managing surface colors and transparency, including fill(), set_colorkey(), and set_alpha(). These methods allow setting surface-wide colors and transparency levels.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/surface.rst#2025-04-20_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\nsurface.fill(color, rect=None, special_flags=0)\nsurface.set_colorkey(Color, flags=0)\nsurface.set_colorkey(None)\nsurface.set_alpha(value, flags=0)\nsurface.set_alpha(None)\n```\n\n----------------------------------------\n\nTITLE: Advanced HP Bar Visualization with Pygame\nDESCRIPTION: This comprehensive snippet demonstrates an interactive HP bar visualization using Pygame. It includes functions for drawing the HP bar, handling user input to modify HP, and displaying text. The code is structured with a main function and utilizes Pygame's drawing capabilities.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/tut/ko/빨간블록 검은블록/5.HP바/심화 출력 그리고 심화 처리.rst#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport pygame, sys\nfrom pygame.locals import*\n\nmaxHP = 10 \nwhite = (255,255,255)\ngray = (127,127,127)\nblack = (0,0,0)\nred = (255,0,0)\ngreen = (0,255,0)\nblue = (0,0,255)\npygame.init()\npygame.display.set_caption(\"HP bar Project\")\nwidth = 640 #1\nheight = 480 #2\nmyScreen = pygame.display.set_mode((width, height))\nmyTextFont = pygame.font.Font(\"HoonWhitecatR.ttf\", 32)\nmyText = myTextFont.render((str(maxHP) + \"/\" + str(maxHP)), True, red, gray)\nmyTextArea = myText.get_rect()\nmyTextArea.center = (width/2, height/2) #3\nfpsClock = pygame.time.Clock()\n\ndef main(): #4\n    HP = 5\n    \n    while True:\n        myText = myTextFont.render((str(HP) + \"/\" + str(maxHP)), True, red, gray)\n    \n        myScreen.fill(gray)\n\n        myScreen.blit(myText, myTextArea)\n        drawHP(HP) #5\n\n        for event in pygame.event.get():\n            if event.type == QUIT:\n                pygame.quit()\n                sys.exit()\n            elif event.type == KEYDOWN:\n                if event.key == K_UP:\n                    if HP != 10:\n                        HP = HP + 1\n                elif event.key == K_DOWN:\n                    if HP != 0:\n                        HP = HP - 1\n    \n        pygame.display.update()\n        fpsClock.tick(60)\n\ndef drawHP(HP): #6\n    r = int((height - 40) / maxHP)\n\n    pygame.draw.rect(myScreen, black, (20, 20, 20, 20 + ((maxHP - 0.5) * r)))\n\n    for i in range(maxHP):\n        if HP >= (maxHP - i):\n            pygame.draw.rect(myScreen, red, (20, 20 + (i * r), 20, r))\n        pygame.draw.rect(myScreen, white, (20, 20 + (i * r), 20, r), 1)\n\n    return\n\nif __name__ == '__main__': #7\n    main()\n```\n\n----------------------------------------\n\nTITLE: Using groupcollide function for group-to-group collision detection in Pygame\nDESCRIPTION: This code demonstrates how to use pygame.sprite.groupcollide to detect collisions between aliens and shots. It creates explosions for each alien hit, plays a sound effect, and keeps track of kills.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/es/tutorials/SpriteIntro.rst#2025-04-20_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfor alien in sprite.groupcollide(aliens, shots, 1, 1).keys()\n    boom_sound.play()\n    Explosion(alien, 0)\n    kills += 1\n```\n\n----------------------------------------\n\nTITLE: Flipping a Surface in Pygame\nDESCRIPTION: Flips a Surface vertically, horizontally, or both using boolean flags. Returns a new Surface with the same dimensions.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/transform.rst#2025-04-20_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nflip(surface, flip_x, flip_y) -> Surface\n```\n\n----------------------------------------\n\nTITLE: Drawing Polygons with Pygame\nDESCRIPTION: Function for drawing polygons on a surface with optional width parameter. Can create filled polygons or polygon outlines with specified line thickness. Requires at least 3 coordinate points.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/draw.rst#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\npolygon(surface, color, points) -> Rect\npolygon(surface, color, points, width=0) -> Rect\n```\n\n----------------------------------------\n\nTITLE: Importing NumPy and Pygame Surfarray in Python\nDESCRIPTION: Shows how to safely import NumPy and the Pygame surfarray module, using a try-except block to handle potential import errors. Aliases NumPy as 'N' for brevity in subsequent code.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/es/tutorials/SurfarrayIntro.rst#2025-04-20_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nprobá:\n    import numpy as N\n    import pygame.surfarray as surfarray\nexcept ImportError:\n    raise ImportError, \"NumPy and Surfarray are required.\"\n```\n\n----------------------------------------\n\nTITLE: Getting Current Playback Position\nDESCRIPTION: Method to get the current track and time position during playback. Works when the drive is either playing or paused.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/cdrom.rst#2025-04-20_snippet_17\n\nLANGUAGE: Python\nCODE:\n```\nget_current() -> track, seconds\n```\n\n----------------------------------------\n\nTITLE: Calibration Function for Color Tracking\nDESCRIPTION: Implementation of a calibration function to identify and track specific colors in the video stream.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/tut/CameraIntro.rst#2025-04-20_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\ndef calibrate(self):\n    # capture the image\n    self.snapshot = self.cam.get_image(self.snapshot)\n    # blit it to the display surface\n    self.display.blit(self.snapshot, (0,0))\n    # make a rect in the middle of the screen\n    crect = pygame.draw.rect(self.display, (255,0,0), (145,105,30,30), 4)\n    # get the average color of the area inside the rect\n    self.ccolor = pygame.transform.average_color(self.snapshot, crect)\n    # fill the upper left corner with that color\n    self.display.fill(self.ccolor, (0,0,50,50))\n    pygame.display.flip()\n```\n\n----------------------------------------\n\nTITLE: Drawing a Filled Polygon in Pygame\nDESCRIPTION: Draws a filled polygon on a given surface using the pygame.gfxdraw.filled_polygon function. It takes parameters for surface, a sequence of (x, y) coordinates for the polygon vertices, and color.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/gfxdraw.rst#2025-04-20_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\npygame.gfxdraw.filled_polygon(surface, points, color)\n```\n\n----------------------------------------\n\nTITLE: Referencing Pixels in 2D Array in Python using Pygame\nDESCRIPTION: This function creates a new 2D array that directly references the pixel values in a Surface. Changes to the array affect the Surface pixels. It's a fast operation as no data is copied. The Surface remains locked for the array's lifetime.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/surfarray.rst#2025-04-20_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\npixels2d(Surface) -> array\n```\n\n----------------------------------------\n\nTITLE: Creating Renderer in Pygame SDL2\nDESCRIPTION: Initializes a Renderer object, which creates a 2D rendering context for a window. It can be customized with various parameters such as the rendering index, acceleration, vsync, and target texture options.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/sdl2_video.rst#2025-04-20_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nRenderer(window, index=-1, accelerated=-1, vsync=False, target_texture=False) -> Renderer\n```\n\n----------------------------------------\n\nTITLE: Replacing Inefficient Array Operations with In-Place Functions in NumPy\nDESCRIPTION: Shows how to replace an inefficient temporary array creation with a faster in-place NumPy operation. The add() function performs the operation directly into the destination array, avoiding temporary array creation and copying.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/tut/SurfarrayIntro.rst#2025-04-20_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nscreen[:] = screen + brightmap\n```\n\nLANGUAGE: python\nCODE:\n```\nadd(screen, brightmap, screen)\n```\n\n----------------------------------------\n\nTITLE: Creating Surface from Buffer in Pygame\nDESCRIPTION: Creates a new Surface that shares data directly from a buffer object. Accepts various buffer types including bytes, bytearray, memoryview and supports multiple pixel formats like P, RGB, BGR, RGBX, RGBA, ARGB, and BGRA. Faster than fromstring() as no pixel data copying is needed.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/image.rst#2025-04-20_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfrombuffer(buffer, size, format) -> Surface\n```\n\n----------------------------------------\n\nTITLE: Initializing Pygame and Setting Up Game Window\nDESCRIPTION: This snippet initializes Pygame, sets up the game window, and defines basic game parameters such as colors, fonts, and display settings.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/tut/ko/빨간블록 검은블록/6.버튼들/심화 입력 그리고 심화 출력.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport pygame, sys\nfrom pygame.locals import*\n\nmaxHP = 10 \nwhite = (255,255,255)\ngray = (127,127,127)\nblack = (0,0,0)\nred = (255,0,0)\ngreen = (0,255,0)\nblue = (0,0,255)\npygame.init()\npygame.display.set_caption(\"Array buttons Project\")\nwidth = 640 \nheight = 480\nmyScreen = pygame.display.set_mode((width, height))\nmyTextFont = pygame.font.Font(\"HoonWhitecatR.ttf\", 32)\nmyText = myTextFont.render((str(maxHP) + \"/\" + str(maxHP)), True, red, gray)\nmyTextArea = myText.get_rect()\nmyTextArea.center = (width/2, height/2)\nfpsClock = pygame.time.Clock()\n```\n\n----------------------------------------\n\nTITLE: Basic Pygame Ball Animation\nDESCRIPTION: This snippet demonstrates a basic Pygame setup with a moving ball that bounces off the screen edges. It serves as a foundation for the more complex HP bar visualization.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/tut/ko/빨간블록 검은블록/5.HP바/심화 출력 그리고 심화 처리.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport sys, pygame\npygame.init()\n\nsize = width, height = 320, 240\nspeed = [2, 2]\nblack = 0, 0, 0\n\nscreen = pygame.display.set_mode(size)\n\nball = pygame.image.load(\"AdvancedOutputProcess1.gif\")\nballrect = ball.get_rect()\n\nwhile True:\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT: sys.exit()\n\n    ballrect = ballrect.move(speed)\n    if ballrect.left < 0 or ballrect.right > width:\n        speed[0] = -speed[0]\n    if ballrect.top < 0 or ballrect.bottom > height:\n        speed[1] = -speed[1]\n\n    screen.fill(black)\n    screen.blit(ball, ballrect)\n    pygame.display.flip()\n```\n\n----------------------------------------\n\nTITLE: Keyboard Modifier Event Handling Example\nDESCRIPTION: Example demonstrating how to handle keyboard modifier states in Pygame events using bitwise operations.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/key.rst#2025-04-20_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n    for event in pygame.event.get():\n        if event.type == pygame.KEYDOWN or event.type == pygame.KEYUP:\n            if event.mod == pygame.KMOD_NONE:\n                print('No modifier keys were in a pressed state when this '\n                      'event occurred.')\n            else:\n                if event.mod & pygame.KMOD_LSHIFT:\n                    print('Left shift was in a pressed state when this event '\n                          'occurred.')\n                if event.mod & pygame.KMOD_RSHIFT:\n                    print('Right shift was in a pressed state when this event '\n                          'occurred.')\n                if event.mod & pygame.KMOD_SHIFT:\n                    print('Left shift or right shift or both were in a '\n                          'pressed state when this event occurred.')\n```\n\n----------------------------------------\n\nTITLE: Queueing Music Files in Pygame\nDESCRIPTION: Demonstrates how to queue a music file to play after the current one finishes using pygame.mixer.music.queue(). It can accept a filename or a file object with optional namehint and loop parameters.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/music.rst#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nqueue(filename) -> None\nqueue(fileobj, namehint=\"\", loops=0) -> None\n```\n\n----------------------------------------\n\nTITLE: Playing Multiple Music Files in Sequence\nDESCRIPTION: Example of how to play one music file multiple times and then queue another file to play once, using pygame.mixer.music functions.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/music.rst#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\npygame.mixer.music.load('bach.ogg')\npygame.mixer.music.play(5)        # Plays six times, not five!\npygame.mixer.music.queue('mozart.ogg')\n```\n\n----------------------------------------\n\nTITLE: Rotating Vector3 around Z-axis in Pygame\nDESCRIPTION: Methods for rotating a Vector3 object around the z-axis using degrees or radians, both creating new vectors and modifying in-place.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/math.rst#2025-04-20_snippet_19\n\nLANGUAGE: Python\nCODE:\n```\nrotate_z(angle) -> Vector3\nrotate_z_rad(angle) -> Vector3\nrotate_z_ip(angle) -> None\nrotate_z_rad_ip(angle) -> None\n```\n\n----------------------------------------\n\nTITLE: Queuing Sound Objects in Pygame Mixer Channel\nDESCRIPTION: This method queues a Sound object to play immediately after the current sound finishes. Only one Sound can be queued at a time. The queued Sound will only play if the current playback finishes automatically.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/mixer.rst#2025-04-20_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nqueue(Sound) -> None\n```\n\n----------------------------------------\n\nTITLE: Mask-based Object Tracking\nDESCRIPTION: Implementation of object tracking using the Pygame mask module with color thresholding and blob detection.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/tut/CameraIntro.rst#2025-04-20_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\ndef get_and_flip(self):\n    self.snapshot = self.cam.get_image(self.snapshot)\n    # threshold against the color we got before\n    mask = pygame.mask.from_threshold(self.snapshot, self.ccolor, (30, 30, 30))\n    self.display.blit(self.snapshot,(0,0))\n    # keep only the largest blob of that color\n    connected = mask.connected_component()\n    # make sure the blob is big enough that it isn't just noise\n    if mask.count() > 100:\n        # find the center of the blob\n        coord = mask.centroid()\n        # draw a circle with size variable on the size of the blob\n        pygame.draw.circle(self.display, (0,255,0), coord, max(min(50,mask.count()/400),5))\n    pygame.display.flip()\n```\n\n----------------------------------------\n\nTITLE: Checking Key Modifiers in Python with Pygame\nDESCRIPTION: Demonstrates how to use bitwise operators to test for specific modifier keys being pressed using the get_mods() function.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/key.rst#2025-04-20_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nmodifier_state = pygame.key.get_mods()\nif modifier_state & pygame.KMOD_CTRL:\n    print(\"Ctrl key is being held\")\n```\n\n----------------------------------------\n\nTITLE: Getting End Event Type for Pygame Mixer Channel\nDESCRIPTION: This method returns the event type that is sent when the Channel finishes playback of a Sound. If no end event is set, it returns pygame.NOEVENT.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/mixer.rst#2025-04-20_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\nget_endevent() -> type\n```\n\n----------------------------------------\n\nTITLE: Creating Rectangle Objects in Pygame\nDESCRIPTION: Demonstrates different ways to create and initialize Pygame Rect objects, which are fundamental for handling game object positions and collisions.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/tut/newbieguide.rst#2025-04-20_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nrect = pygame.Rect(10, 20, 30, 30)\nrect = pygame.Rect((10, 20, 30, 30))\nrect = pygame.Rect((10, 20), (30, 30))\nrect = (10, 20, 30, 30)\nrect = ((10, 20, 30, 30))\n```\n\n----------------------------------------\n\nTITLE: Drawing Interactive Buttons in Pygame\nDESCRIPTION: This function draws two interactive buttons on the Pygame screen. It calculates button positions dynamically based on screen dimensions and uses different colors for each button. The buttons are designed with an outer and inner rectangle for a 3D effect.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/tut/en/Red_or_Black/6.Buttons/Advanced INPUT with Advanced OUTPUT.rst#2025-04-20_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\ndef drawButtons():\n    r = 45\n    r_margin = 10\n    colors = [red, black]\n    \n    num = 2\n    margin = int((width - ((r * num) + (r_margin * (num - 1)))) / 2)\n    for i in range(0, num):\n        left = margin + (i * r) + (i * r_margin)\n        up = height - r - 10\n        pygame.draw.rect(myScreen, colors[i], (left, up, r, r))\n        pygame.draw.rect(myScreen, gray, (left + 2, up + 2, r - 4, r - 4), 2)\n```\n\n----------------------------------------\n\nTITLE: Setting Key Repeat in Python with Pygame\nDESCRIPTION: Shows how to enable key repeat functionality with custom delay and interval settings using the set_repeat() function.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/key.rst#2025-04-20_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\npygame.key.set_repeat(500, 100)  # 500ms initial delay, 100ms interval\n```\n\n----------------------------------------\n\nTITLE: Drawing Arc in Pygame\nDESCRIPTION: Draws an elliptical arc on a given surface. The function takes parameters for the surface, color, rectangle dimensions, start and stop angles in radians, and optional width for line thickness.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/draw.rst#2025-04-20_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\npygame.draw.arc(surface, color, rect, start_angle, stop_angle) -> Rect\npygame.draw.arc(surface, color, rect, start_angle, stop_angle, width=1) -> Rect\n```\n\n----------------------------------------\n\nTITLE: Creating and Manipulating 2D NumPy Arrays in Python\nDESCRIPTION: Demonstrates creating 2D NumPy arrays from tuples and shows indexing and slicing operations on 2D arrays. Includes examples of selecting rows, columns, and sub-arrays.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/es/tutorials/SurfarrayIntro.rst#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> row1 = (1,2,3)                         #crear una tupla de valores\n>>> row2 = (3,4,5)                         #otra tupla\n>>> (row1,row2)                            #mostrar como una tupla de dos dimensiones\n((1, 2, 3), (3, 4, 5))\n>>> b = array((row1, row2))                #crear un array en 2D\n>>> b                                      #mostrar el array\narray([[1, 2, 3],\n       [3, 4, 5]])\n>>> array(((1,2),(3,4),(5,6)))             #mostrar el nuevo array en 2D\narray([[1, 2],\n       [3, 4],\n       [5, 6]])\n```\n\n----------------------------------------\n\nTITLE: Drawing antialiased and filled circle example in Python\nDESCRIPTION: Demonstrates how to draw a filled antialiased circle by first drawing an antialiased circle outline and then filling it with the same color.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/gfxdraw.rst#2025-04-20_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\ncol = (255, 0, 0)\nsurf.fill((255, 255, 255))\npygame.gfxdraw.aacircle(surf, x, y, 30, col)\npygame.gfxdraw.filled_circle(surf, x, y, 30, col)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Color Division Behavior in Python\nDESCRIPTION: Shows how floor division and modulus operators work with Color objects, illustrating that division by zero in a color channel results in 0 rather than raising an exception.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/color.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# These expressions are True\nColor(255, 255, 255, 255) // Color(0, 64, 64, 64) == Color(0, 3, 3, 3)\nColor(255, 255, 255, 255) % Color(64, 64, 64, 0) == Color(63, 63, 63, 0)\n```\n\n----------------------------------------\n\nTITLE: Playing Music in Pygame\nDESCRIPTION: Shows how to start playback of a loaded music stream using pygame.mixer.music.play(). It accepts optional parameters for looping, start position, and fade-in duration.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/music.rst#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nplay(loops=0, start=0.0, fade_ms=0) -> None\n```\n\n----------------------------------------\n\nTITLE: Pygame Mask to_surface Method Documentation\nDESCRIPTION: Converts a mask to a surface by drawing set and unset bits with customizable colors or source surfaces. Supports optional parameters for surface creation, color settings, and positioning. Returns the drawn surface.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/mask.rst#2025-04-20_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nto_surface() -> Surface\nto_surface(surface=None, setsurface=None, unsetsurface=None, setcolor=(255, 255, 255, 255), unsetcolor=(0, 0, 0, 255), dest=(0, 0)) -> Surface\n```\n\n----------------------------------------\n\nTITLE: Multiple Dictionary Collision Detection with Rect Objects\nDESCRIPTION: Example showing how to convert a Rect object to a tuple for use with collidedictall method which returns all colliding key-value pairs.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/rect.rst#2025-04-20_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nrect.collidedictall({tuple(key_rect) : value})\n```\n\n----------------------------------------\n\nTITLE: Generating Pixelarray Effects in Pygame\nDESCRIPTION: This function displays various effects generated using Pygame's pixelarray functionality.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/examples.rst#2025-04-20_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\ndef pixelarray.main() -> None:\n```\n\n----------------------------------------\n\nTITLE: Scaling Image Up\nDESCRIPTION: Doubles image size by creating larger array and copying pixels using array slicing.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/tut/SurfarrayIntro.rst#2025-04-20_snippet_12\n\nLANGUAGE: Python\nCODE:\n```\nshape = rgbarray.shape\nscaleup = N.zeros((shape[0]*2, shape[1]*2, shape[2]))\nscaleup[::2,::2,:] = rgbarray\nscaleup[1::2,::2,:] = rgbarray\nscaleup[:,1::2] = scaleup[:,::2]\nsurfdemo_show(scaleup, 'scaleup')\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Unicode File Path in Python\nDESCRIPTION: This snippet shows how to use a 32-bit escape sequence to represent a Unicode code point above U+FFFF in a file path string. This is useful when working with Pygame functions that accept file paths.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/filepaths.rst#2025-04-20_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfile_path = \"\\U0001F600.png\"  # Grinning face emoji as filename\n```\n\n----------------------------------------\n\nTITLE: Setting End Event for Pygame Mixer Channel\nDESCRIPTION: This method sets an event to be sent to the pygame queue when a sound finishes playing on the channel. It can be called with or without an event type argument. The event is sent every time a sound finishes, not just the first time.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/mixer.rst#2025-04-20_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nset_endevent() -> None\n```\n\nLANGUAGE: Python\nCODE:\n```\nset_endevent(type) -> None\n```\n\n----------------------------------------\n\nTITLE: Implementing Event Handling in Pygame\nDESCRIPTION: This code snippet shows how to implement basic event handling in a Pygame program. It continuously checks for quit or keydown events to exit the program.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/es/tutorials/MoverImagen.rst#2025-04-20_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nwhile True:\n    for event in pygame.event.get():\n        if event.type in (QUIT, KEYDOWN):\n            sys.exit()\n    move_and_draw_all_game_objects()\n```\n\n----------------------------------------\n\nTITLE: Saving Extended Format Images in Pygame\nDESCRIPTION: Saves Surface objects as PNG or JPEG images. When saving to file-like objects, uses namehint to determine format, defaulting to JPEG if unspecified. Requires extended image format support.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/image.rst#2025-04-20_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nsave_extended(Surface, filename) -> None\nsave_extended(Surface, fileobj, namehint=\"\") -> None\n```\n\n----------------------------------------\n\nTITLE: Smooth Scaling by Factor in Pygame\nDESCRIPTION: Smoothly scales a Surface using a scalar factor. Can scale uniformly or separately for x and y dimensions. Experimental feature.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/transform.rst#2025-04-20_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\nsmoothscale_by(surface, factor, dest_surface=None) -> Surface\n```\n\n----------------------------------------\n\nTITLE: Setting OpenGL Context Profile in Pygame\nDESCRIPTION: Demonstrates the use of GL_CONTEXT_PROFILE_MASK to set the OpenGL profile. It allows specifying core, compatibility, or ES feature subsets.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/display.rst#2025-04-20_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nGL_CONTEXT_PROFILE_CORE             disable deprecated features\nGL_CONTEXT_PROFILE_COMPATIBILITY    allow deprecated features\nGL_CONTEXT_PROFILE_ES               allow only the ES feature\n                                    subset of OpenGL\n```\n\n----------------------------------------\n\nTITLE: Initializing Chimp Sprite in Pygame\nDESCRIPTION: This code snippet initializes the Chimp sprite, setting up its image, position, and movement properties. It also defines methods for updating the sprite's state, including walking and spinning animations.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/es/tutorials/ChimpanceLineaporLinea.rst#2025-04-20_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nself.image, self.rect = load_image(\"chimp.png\", -1, 4)\nscreen = pg.display.get_surface()\nself.area = screen.get_rect()\nself.rect.topleft = 10, 90\nself.move = 18\nself.dizzy = False\n\ndef update(self):\n    \"\"\"walk or spin, depending on the monkeys state\"\"\"\n    if self.dizzy:\n        self._spin()\n    else:\n        self._walk()\n\ndef _walk(self):\n    \"\"\"move the monkey across the screen, and turn at the ends\"\"\"\n    newpos = self.rect.move((self.move, 0))\n    if not self.area.contains(newpos):\n        if self.rect.left < self.area.left or self.rect.right > self.area.right:\n            self.move = -self.move\n            newpos = self.rect.move((self.move, 0))\n            self.image = pg.transform.flip(self.image, True, False)\n    self.rect = newpos\n\ndef _spin(self):\n    \"\"\"spin the monkey image\"\"\"\n    center = self.rect.center\n    self.dizzy = self.dizzy + 12\n    if self.dizzy >= 360:\n        self.dizzy = False\n        self.image = self.original\n    else:\n        rotate = pg.transform.rotate\n        self.image = rotate(self.original, self.dizzy)\n    self.rect = self.image.get_rect(center=center)\n\ndef punched(self):\n    \"\"\"this will cause the monkey to start spinning\"\"\"\n    if not self.dizzy:\n        self.dizzy = True\n        self.original = self.image\n```\n\n----------------------------------------\n\nTITLE: Creating Texture in Pygame SDL2\nDESCRIPTION: Initializes a Texture object representing a texture in Pygame. The texture can be created with specified renderer, size, depth, and various flags for static, streaming, or target textures.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/sdl2_video.rst#2025-04-20_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nTexture(renderer, size, depth=0, static=False, streaming=False, target=False) -> Texture\n```\n\n----------------------------------------\n\nTITLE: Copying Pixels to 2D Array in Python using Pygame\nDESCRIPTION: This function copies the mapped (raw) pixels from a Surface into a 2D array. The bit depth of the surface determines the size of the integer values. It works for any pixel format and temporarily locks the Surface during copying.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/surfarray.rst#2025-04-20_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\narray2d(Surface) -> array\n```\n\n----------------------------------------\n\nTITLE: Loading an Image in Pygame\nDESCRIPTION: Example of loading an image file using pygame.image.load() with os.path.join for cross-platform compatibility. The function loads an image from a file or file-like object and returns a Surface.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/image.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nasurf = pygame.image.load(os.path.join('data', 'bla.png'))\n```\n\n----------------------------------------\n\nTITLE: Creating Subsurface in Pygame\nDESCRIPTION: Creates a new Surface that shares its pixels with its parent. The new Surface is considered a child of the original. Modifications to either Surface pixels will affect each other.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/surface.rst#2025-04-20_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nsubsurface(Rect) -> Surface\n```\n\n----------------------------------------\n\nTITLE: Loading Sound Resources in Pygame\nDESCRIPTION: This function loads a sound file if the mixer is initialized, otherwise returns a dummy sound object. It handles potential absence of the mixer module.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/tut/ChimpLineByLine.rst#2025-04-20_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\ndef load_sound(name):\n    class NoneSound:\n        def play(self):\n            pass\n\n    if not pg.mixer or not pg.mixer.get_init():\n        return NoneSound()\n\n    fullname = os.path.join(data_dir, name)\n    sound = pg.mixer.Sound(fullname)\n\n    return sound\n```\n\n----------------------------------------\n\nTITLE: Drawing Bezier Curve in Pygame\nDESCRIPTION: Function signature for drawing a Bezier curve on a surface. Takes a surface object, sequence of 3+ coordinate points, number of interpolation steps, and color value. Points can be tuples, lists or Vector2 objects containing x,y coordinates.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/gfxdraw.rst#2025-04-20_snippet_12\n\nLANGUAGE: Python\nCODE:\n```\nbezier(surface: Surface, points: Union[Tuple, List], steps: int, color: Union[Color, Tuple[int, int, int, Optional[int]]]) -> None\n```\n\n----------------------------------------\n\nTITLE: Displaying Background and Initializing Game Objects in Pygame\nDESCRIPTION: This code displays the background on the screen, updates the display, and initializes game objects including sounds and sprites.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/es/tutorials/ChimpanceLineaporLinea.rst#2025-04-20_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nscreen.blit(background, (0, 0))\npygame.display.flip()\n\nwhiff_sound = load_sound(\"whiff.wav\")\npunch_sound = load_sound(\"punch.wav\")\nchimp = Chimp()\nfist = Fist()\nallsprites = pg.sprite.RenderPlain((chimp, fist))\n```\n\n----------------------------------------\n\nTITLE: Converting Image to RGB Array\nDESCRIPTION: Loads an image and converts it to a 3D RGB array using Pygame's surfarray module.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/tut/SurfarrayIntro.rst#2025-04-20_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\nimgsurface = pygame.image.load('surfarray.png')\nrgbarray = surfarray.array3d(imgsurface)\nsurfdemo_show(rgbarray, 'rgbarray')\n```\n\n----------------------------------------\n\nTITLE: Creating Pre-multiplied Alpha Surface in Pygame\nDESCRIPTION: Experimental method that returns a copy of the surface with RGB channels pre-multiplied by the alpha channel. This improves performance and quality when using the BLEND_PREMULTIPLED blend mode flag for blitting.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/surface.rst#2025-04-20_snippet_41\n\nLANGUAGE: python\nCODE:\n```\npremul_alpha() -> Surface\n```\n\n----------------------------------------\n\nTITLE: Word Wrapping Implementation in Pygame\nDESCRIPTION: Implementation of a word wrapping function that renders text within surface bounds using font metrics and rendering methods.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/freetype.rst#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef word_wrap(surf, text, font, color=(0, 0, 0)):\n    font.origin = True\n    words = text.split(' ')\n    width, height = surf.get_size()\n    line_spacing = font.get_sized_height() + 2\n    x, y = 0, line_spacing\n    space = font.get_rect(' ')\n    for word in words:\n        bounds = font.get_rect(word)\n        if x + bounds.width + bounds.x >= width:\n            x, y = 0, y + line_spacing\n        if x + bounds.width + bounds.x >= width:\n            raise ValueError(\"word too wide for the surface\")\n        if y + bounds.height - bounds.y >= height:\n            raise ValueError(\"text to long for the surface\")\n        font.render_to(surf, (x, y), None, color)\n        x += bounds.width + space.width\n    return x, y\n```\n\n----------------------------------------\n\nTITLE: Calculating Vector Length in Python\nDESCRIPTION: Demonstrates how to calculate the Euclidean length of a vector using the Pythagorean theorem.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/math.rst#2025-04-20_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nvec.length() == math.sqrt(vec.x**2 + vec.y**2 + vec.z**2)\n```\n\n----------------------------------------\n\nTITLE: Writing MIDI Data to Output Device\nDESCRIPTION: Demonstrates how to write MIDI data to an output device using the Output.write() method. Shows the expected format for MIDI data and timestamps.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/midi.rst#2025-04-20_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n# Program change at time 20000 and 500ms later send note 65 with\n# velocity 100.\nwrite([[[0xc0, 0, 0], 20000], [[0x90, 60, 100], 20500]])\n```\n\n----------------------------------------\n\nTITLE: Converting Array to Sound Object in Python\nDESCRIPTION: Creates a new playable Sound object from an array. The mixer module must be initialized, and the array format must be compatible with the mixer audio format.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/sndarray.rst#2025-04-20_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nmake_sound(array) -> Sound\n```\n\n----------------------------------------\n\nTITLE: Setting a Standard Cursor in Pygame\nDESCRIPTION: Example of setting the system cursor to the standard arrow cursor using pygame.mouse.set_cursor() with predefined cursor values from the pygame.cursors module.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/cursors.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> pygame.mouse.set_cursor(*pygame.cursors.arrow)\n```\n\n----------------------------------------\n\nTITLE: Getting Surface Width in Pygame\nDESCRIPTION: Returns the width of the Surface in pixels.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/surface.rst#2025-04-20_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nget_width() -> width\n```\n\n----------------------------------------\n\nTITLE: Getting Surface Height in Pygame\nDESCRIPTION: Returns the height of the Surface in pixels.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/surface.rst#2025-04-20_snippet_26\n\nLANGUAGE: python\nCODE:\n```\nget_height() -> height\n```\n\n----------------------------------------\n\nTITLE: Getting Key Names in Python with Pygame\nDESCRIPTION: Illustrates how to retrieve the descriptive name of a key using its identifier constant with the name() function.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/key.rst#2025-04-20_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nkey_name = pygame.key.name(pygame.K_RETURN)\nprint(key_name)  # Outputs: \"return\"\n```\n\n----------------------------------------\n\nTITLE: Array Color Mapping in Python\nDESCRIPTION: Maps an array of color element values to an array of pixels according to the specified surface format. Handles color space conversion.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/pixelcopy.rst#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nmap_array(<array>, <array>, <surface>) -> None\n```\n\n----------------------------------------\n\nTITLE: Defining Surface Flags in Python\nDESCRIPTION: Demonstrates the flags that can be used when creating a Surface, including HWSURFACE and SRCALPHA.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/surface.rst#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nHWSURFACE    (obsolete in pygame 2) creates the image in video memory\nSRCALPHA     the pixel format will include a per-pixel alpha\n```\n\n----------------------------------------\n\nTITLE: Creating a Pygame Window\nDESCRIPTION: This code demonstrates how to create a new window for graphics in Pygame. It sets up a 640x480 pixel surface without specifying additional parameters.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/es/tutorials/MoverImagen.rst#2025-04-20_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nscreen = pygame.display.set_mode((640, 480))\n```\n\n----------------------------------------\n\nTITLE: Vector2 Rotation in Python\nDESCRIPTION: Rotates a vector by a given angle in degrees or radians.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/math.rst#2025-04-20_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\nrotate(angle) -> Vector2\nrotate_rad(angle) -> Vector2\nrotate_ip(angle) -> None\nrotate_rad_ip(angle) -> None\n```\n\n----------------------------------------\n\nTITLE: Drawing a Triangle in Pygame\nDESCRIPTION: Draws an unfilled triangle (trigon) on a given surface using the pygame.gfxdraw.trigon function. It takes parameters for surface, three sets of x and y coordinates for the corners, and color.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/gfxdraw.rst#2025-04-20_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\npygame.gfxdraw.trigon(surface, x1, y1, x2, y2, x3, y3, color)\n```\n\n----------------------------------------\n\nTITLE: Converting MIDI Events to Pygame Events in Python\nDESCRIPTION: Shows how to convert MIDI events to Pygame events using the midis2events function. It takes a sequence of MIDI events and device ID as input and returns a list of Pygame events.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/midi.rst#2025-04-20_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nmidis2events(midi_events, device_id) -> [Event, ...]\n```\n\n----------------------------------------\n\nTITLE: Surface Pixel Manipulation Methods\nDESCRIPTION: Methods for accessing and modifying individual pixels on the surface, including get_at() and set_at(). These methods handle pixel-level operations and color values.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/surface.rst#2025-04-20_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\nsurface.get_at((x, y))\nsurface.set_at((x, y), Color)\nsurface.get_at_mapped((x, y))\n```\n\n----------------------------------------\n\nTITLE: Image Softening Filter\nDESCRIPTION: Applies a 3x3 convolution filter to soften the image using weighted averaging of neighboring pixels.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/tut/SurfarrayIntro.rst#2025-04-20_snippet_14\n\nLANGUAGE: Python\nCODE:\n```\nfactor = N.array((8,), N.int32)\nsoften = N.array(rgbarray, N.int32)\nsoften[1:,:]  += rgbarray[:-1,:] * factor\nsoften[:-1,:] += rgbarray[1:,:] * factor\nsoften[:,1:]  += rgbarray[:,:-1] * factor\nsoften[:,:-1] += rgbarray[:,1:] * factor\nsoften //= 33\nsurfdemo_show(soften, 'soften')\n```\n\n----------------------------------------\n\nTITLE: Compiling and Setting a Text Marker Cursor in Pygame\nDESCRIPTION: Example of compiling a cursor from predefined string patterns and setting it as the current mouse cursor. The cursor is compiled from the textmarker_strings pattern and set with specific dimensions and hotspot.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/cursors.rst#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> cursor = pygame.cursors.compile(pygame.cursors.textmarker_strings)\n>>> pygame.mouse.set_cursor((8, 16), (0, 0), *cursor)\n```\n\n----------------------------------------\n\nTITLE: Using Pygame Transform Threshold Function\nDESCRIPTION: This function finds pixels in a surface within a threshold of a search color or search surface. It can also transfer matching pixels to a destination surface. The function supports various behaviors and parameters for flexible color thresholding and pixel manipulation.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/transform.rst#2025-04-20_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nthreshold(dest_surface, surface, search_color, threshold=(0,0,0,0), set_color=(0,0,0,0), set_behavior=1, search_surf=None, inverse_set=False) -> num_threshold_pixels\n```\n\n----------------------------------------\n\nTITLE: Referencing Pixel Alpha Values in 2D Array in Python using Pygame\nDESCRIPTION: This function creates a 2D array directly referencing alpha values in a Surface. It only works on 32-bit Surfaces with per-pixel alpha. Changes to the array affect the Surface pixels. The Surface remains locked for the array's lifetime.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/surfarray.rst#2025-04-20_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\npixels_alpha(Surface) -> array\n```\n\n----------------------------------------\n\nTITLE: Scaling a Surface by Factor in Pygame\nDESCRIPTION: Resizes a Surface using a scalar factor. Can scale uniformly or separately for x and y dimensions. Experimental feature.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/transform.rst#2025-04-20_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nscale_by(surface, factor, dest_surface=None) -> Surface\n```\n\n----------------------------------------\n\nTITLE: Printing Pygame Display Information Object\nDESCRIPTION: Demonstrates how to initialize Pygame display and print video information including hardware support, color depth, and current resolution.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/tut/DisplayModes.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> import pygame.display\n>>> pygame.display.init()\n>>> info = pygame.display.Info()\n>>> print(info)\n<VideoInfo(hw = 0, wm = 1,video_mem = 0\n        blit_hw = 0, blit_hw_CC = 0, blit_hw_A = 0,\n        blit_sw = 0, blit_sw_CC = 0, blit_sw_A = 0,\n        bitsize  = 32, bytesize = 4,\n        masks =  (16711680, 65280, 255, 0),\n        shifts = (16, 8, 0, 0),\n        losses =  (0, 0, 0, 8),\n        current_w = 1920, current_h = 1080\n>\n```\n\n----------------------------------------\n\nTITLE: Vector3 Angle and Spherical Coordinate Operations in Pygame\nDESCRIPTION: Methods for calculating angles between vectors and converting between Cartesian and spherical coordinates.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/math.rst#2025-04-20_snippet_20\n\nLANGUAGE: Python\nCODE:\n```\nangle_to(Vector3) -> float\nas_spherical() -> (r, theta, phi)\nfrom_spherical((r, theta, phi)) -> Vector3\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables\nDESCRIPTION: Shows how to set environment variables to control Pygame's behavior.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/pygame.rst#2025-04-20_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nimport os\nos.environ['NAME_OF_ENVIRONMENT_VARIABLE'] = 'value_to_set'\n```\n\n----------------------------------------\n\nTITLE: Rumble Effect Method - Pygame Joystick\nDESCRIPTION: Initiates a rumble effect on the joystick with specified low/high frequency strength (0-1) and duration in milliseconds. Returns True if successful, requires SDL 2.0.9+.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/joystick.rst#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nrumble(low_frequency, high_frequency, duration) -> bool\n```\n\n----------------------------------------\n\nTITLE: Vector2 Polar Coordinate Conversion in Python\nDESCRIPTION: Converts between Cartesian and polar coordinates for Vector2 objects.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/math.rst#2025-04-20_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\nas_polar() -> (r, phi)\nVector2.from_polar((r, phi)) -> Vector2\nVector2().from_polar((r, phi)) -> None\n```\n\n----------------------------------------\n\nTITLE: Setting Palette for 8-bit Pygame Surface\nDESCRIPTION: Sets the full color palette for an 8-bit Surface. This replaces the colors in the existing palette. A partial palette can be passed to change only the first colors. Has no effect on Surfaces with more than 8-bits per pixel.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/surface.rst#2025-04-20_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nset_palette([RGB, RGB, RGB, ...]) -> None\n```\n\n----------------------------------------\n\nTITLE: Drawing Textured Polygon in Pygame\nDESCRIPTION: Function signature for drawing a textured polygon on a surface. Requires a surface object, a sequence of 3+ coordinate points, a texture surface, and texture offset coordinates. Points can be tuples, lists or Vector2 objects containing x,y coordinates.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/gfxdraw.rst#2025-04-20_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\ntextured_polygon(surface: Surface, points: Union[Tuple, List], texture: Surface, tx: int, ty: int) -> None\n```\n\n----------------------------------------\n\nTITLE: Mapping 3D Array to 2D Array in Pygame\nDESCRIPTION: The map_array function converts a 3D array into a 2D array using the given Surface format to control the conversion. Palette surface formats are supported for NumPy arrays.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/surfarray.rst#2025-04-20_snippet_15\n\nLANGUAGE: Python\nCODE:\n```\nmap_array(Surface, array3d) -> array2d\n```\n\n----------------------------------------\n\nTITLE: Setting Color Elements with update() Method in Pygame\nDESCRIPTION: Method for updating color elements of a Color object. Supports setting RGB values with optional alpha channel. Takes either individual RGB(A) components or a single color value as input.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/color.rst#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nupdate(r, g, b) -> None\nupdate(r, g, b, a=255) -> None\nupdate(color_value) -> None\n```\n\n----------------------------------------\n\nTITLE: Flipping Image Vertically\nDESCRIPTION: Flips an RGB array vertically using array slicing with negative increment.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/tut/SurfarrayIntro.rst#2025-04-20_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\nflipped = rgbarray[:,::-1]\nsurfdemo_show(flipped, 'flipped')\n```\n\n----------------------------------------\n\nTITLE: Creating Striped RGB Surface Array\nDESCRIPTION: Creates a 3D array representing a red surface with blue/green stripes every third row using NumPy array operations.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/tut/SurfarrayIntro.rst#2025-04-20_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\nstriped = N.zeros((128, 128, 3))\nstriped[:] = (255, 0, 0)\nstriped[:,::3] = (0, 255, 255)\nsurfdemo_show(striped, 'striped')\n```\n\n----------------------------------------\n\nTITLE: Drawing an Antialiased Triangle in Pygame\nDESCRIPTION: Draws an unfilled antialiased triangle (trigon) on a given surface using the pygame.gfxdraw.aatrigon function. Parameters include surface, three sets of x and y coordinates for the corners, and color.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/gfxdraw.rst#2025-04-20_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\npygame.gfxdraw.aatrigon(surface, x1, y1, x2, y2, x3, y3, color)\n```\n\n----------------------------------------\n\nTITLE: Vector2 Angle Calculation in Python\nDESCRIPTION: Calculates the angle between two Vector2 objects.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/math.rst#2025-04-20_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\nangle_to(Vector2) -> float\n```\n\n----------------------------------------\n\nTITLE: Vector3 Magnitude Clamping in Pygame\nDESCRIPTION: Experimental methods for clamping the magnitude of a Vector3 object between specified minimum and maximum values.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/math.rst#2025-04-20_snippet_22\n\nLANGUAGE: Python\nCODE:\n```\nclamp_magnitude(max_length) -> Vector3\nclamp_magnitude(min_length, max_length) -> Vector3\nclamp_magnitude_ip(max_length) -> None\nclamp_magnitude_ip(min_length, max_length) -> None\n```\n\n----------------------------------------\n\nTITLE: Drawing Rectangles with Pygame\nDESCRIPTION: Function for drawing rectangles on a surface with optional width and rounded corners. Supports customization of individual corner radii and can draw filled or outlined rectangles.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/draw.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nrect(surface, color, rect) -> Rect\nrect(surface, color, rect, width=0, border_radius=0, border_top_left_radius=-1, border_top_right_radius=-1, border_bottom_left_radius=-1, border_bottom_right_radius=-1) -> Rect\n```\n\n----------------------------------------\n\nTITLE: Interactive Image Scaling with Smoothscale in Pygame\nDESCRIPTION: This function demonstrates interactive image scaling using smoothscale. It allows resizing an image on screen using arrow keys and includes options for alpha conversion and speed testing.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/examples.rst#2025-04-20_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\ndef scaletest.main(imagefile, convert_alpha=False, run_speed_test=True) -> None:\n```\n\n----------------------------------------\n\nTITLE: Drawing a Pie in Pygame\nDESCRIPTION: Draws an unfilled pie on a given surface using the pygame.gfxdraw.pie function. It connects the endpoints of an arc to its center. Parameters include surface, center coordinates, radius, start and stop angles in degrees, and color.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/gfxdraw.rst#2025-04-20_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\npygame.gfxdraw.pie(surface, x, y, r, start_angle, stop_angle, color)\n```\n\n----------------------------------------\n\nTITLE: Converting Python Object to SDL_Rect Structure\nDESCRIPTION: Function that converts various Python rectangle representations into an SDL_Rect structure. Accepts sequences, objects with rect methods, and other formats. Returns a pointer to the converted SDL_Rect or NULL on failure.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/c_api/rect.rst#2025-04-20_snippet_3\n\nLANGUAGE: c\nCODE:\n```\nSDL_Rect* pgRect_FromObject(PyObject *obj, SDL_Rect *temp)\n```\n\n----------------------------------------\n\nTITLE: Checking for Text in Clipboard using Pygame Scrap\nDESCRIPTION: Demonstrates how to use the pygame.scrap.get() function to retrieve text data from the clipboard and check if it exists.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/scrap.rst#2025-04-20_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\ntext = pygame.scrap.get(pygame.SCRAP_TEXT)\nif text:\n    print(\"There is text in the clipboard.\")\nelse:\n    print(\"There does not seem to be text in the clipboard.\")\n```\n\n----------------------------------------\n\nTITLE: Controller Mapping Example\nDESCRIPTION: Demonstrates how to remap controller buttons using a dictionary-based mapping system. Shows remapping button 'a' to 'b3' and button 'y' to 'b0'.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/sdl2_controller.rst#2025-04-20_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nmapping = controller.get_mapping() # Get current mapping\nmapping[\"a\"] = \"b3\" # Remap button a to y\nmapping[\"y\"] = \"b0\" # Remap button y to a\ncontroller.set_mapping(mapping) # Set the mapping\n```\n\n----------------------------------------\n\nTITLE: Creating Vector2 Objects in Python\nDESCRIPTION: Shows different ways to create Vector2 objects in Pygame.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/math.rst#2025-04-20_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nVector2() -> Vector2(0, 0)\nVector2(int) -> Vector2\nVector2(float) -> Vector2\nVector2(Vector2) -> Vector2\nVector2(x, y) -> Vector2\nVector2((x, y)) -> Vector2\n```\n\n----------------------------------------\n\nTITLE: Setting Text Strikethrough in Pygame\nDESCRIPTION: The set_strikethrough method controls whether text is rendered with a strikethrough. It takes a boolean parameter to enable or disable the strikethrough.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/font.rst#2025-04-20_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nFont.set_strikethrough(bool) -> None\n```\n\n----------------------------------------\n\nTITLE: Copying Red Pixel Values to 2D Array in Python using Pygame\nDESCRIPTION: This function copies pixel red values from a Surface into a 2D array. It works for any Surface format and temporarily locks the Surface during copying. Introduced in Pygame 2.0.2.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/surfarray.rst#2025-04-20_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\narray_red(Surface) -> array\n```\n\n----------------------------------------\n\nTITLE: Array to Surface Copy in Python\nDESCRIPTION: Copies data from an array object to a Pygame surface. Functions similarly to pygame.surfarray.blit_array.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/pixelcopy.rst#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\narray_to_surface(<surface>, <array>) -> None\n```\n\n----------------------------------------\n\nTITLE: Vector3 Cross Product in Python\nDESCRIPTION: Computes the cross product (vector product) of two Vector3 objects.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/math.rst#2025-04-20_snippet_14\n\nLANGUAGE: Python\nCODE:\n```\ncross(Vector3) -> Vector3\n```\n\n----------------------------------------\n\nTITLE: Color-based Thresholding Implementation\nDESCRIPTION: Example of implementing color thresholding for basic computer vision effects.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/tut/CameraIntro.rst#2025-04-20_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nself.thresholded = pygame.surface.Surface(self.size, 0, self.display)\nself.snapshot = self.cam.get_image(self.snapshot)\npygame.transform.threshold(self.thresholded,self.snapshot,(0,255,0),(90,170,170),(0,0,0),2)\n```\n\n----------------------------------------\n\nTITLE: Listing Available Cameras\nDESCRIPTION: Code to detect and list available camera devices connected to the system.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/tut/CameraIntro.rst#2025-04-20_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\ncamlist = pygame.camera.list_cameras()\nif camlist:\n    cam = pygame.camera.Camera(camlist[0],(640,480))\n```\n\n----------------------------------------\n\nTITLE: Setting OpenGL Attributes in Pygame\nDESCRIPTION: Lists the available OpenGL flags that can be set using pygame.display.gl_set_attribute(). These flags control various aspects of the OpenGL context, such as color depth, anti-aliasing, and stereo 3D.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/display.rst#2025-04-20_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nGL_ALPHA_SIZE, GL_DEPTH_SIZE, GL_STENCIL_SIZE, GL_ACCUM_RED_SIZE,\nGL_ACCUM_GREEN_SIZE,  GL_ACCUM_BLUE_SIZE, GL_ACCUM_ALPHA_SIZE,\nGL_MULTISAMPLEBUFFERS, GL_MULTISAMPLESAMPLES, GL_STEREO\n```\n\n----------------------------------------\n\nTITLE: Running MIDI Examples in Pygame\nDESCRIPTION: This function runs MIDI examples for input, output, or listing available MIDI devices. It demonstrates translating mouse clicks or keyboard events into MIDI notes and MIDI input to Pygame events.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/examples.rst#2025-04-20_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\ndef midi.main(mode='output', device_id=None) -> None:\n```\n\n----------------------------------------\n\nTITLE: System Cursor Constants in Pygame\nDESCRIPTION: List of system cursor constants available in Pygame. These constants can be used to create system cursors that appear native to the operating system, such as arrows, i-beams, wait cursors, and more.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/cursors.rst#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nPygame Cursor Constant           Description\n--------------------------------------------\npygame.SYSTEM_CURSOR_ARROW       arrow\npygame.SYSTEM_CURSOR_IBEAM       i-beam\npygame.SYSTEM_CURSOR_WAIT        wait\npygame.SYSTEM_CURSOR_CROSSHAIR   crosshair\npygame.SYSTEM_CURSOR_WAITARROW   small wait cursor \n                                 (or wait if not available)\npygame.SYSTEM_CURSOR_SIZENWSE    double arrow pointing \n                                 northwest and southeast\npygame.SYSTEM_CURSOR_SIZENESW    double arrow pointing\n                                 northeast and southwest\npygame.SYSTEM_CURSOR_SIZEWE      double arrow pointing\n                                 west and east\npygame.SYSTEM_CURSOR_SIZENS      double arrow pointing \n                                 north and south\npygame.SYSTEM_CURSOR_SIZEALL     four pointed arrow pointing\n                                 north, south, east, and west\npygame.SYSTEM_CURSOR_NO          slashed circle or crossbones\npygame.SYSTEM_CURSOR_HAND        hand\n```\n\n----------------------------------------\n\nTITLE: Finding Edges in Surface using Laplacian in Pygame\nDESCRIPTION: Applies the Laplacian algorithm to find edges in a surface.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/transform.rst#2025-04-20_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\nlaplacian(surface, dest_surface=None) -> Surface\n```\n\n----------------------------------------\n\nTITLE: Converting MIDI Note to ANSI Note Name in Python\nDESCRIPTION: Illustrates the usage of the midi_to_ansi_note function, which converts a MIDI note number to its ANSI note name representation.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/midi.rst#2025-04-20_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nmidi_to_ansi_note(21) == 'A0'\n```\n\n----------------------------------------\n\nTITLE: Initializing Pygame Camera Module\nDESCRIPTION: Basic setup code to import and initialize the Pygame camera module. Required before using any camera functionality.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/tut/CameraIntro.rst#2025-04-20_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport pygame\nimport pygame.camera\nfrom pygame.locals import *\n\npygame.init()\npygame.camera.init()\n```\n\n----------------------------------------\n\nTITLE: Iterating Through Available Clipboard Data Types in Pygame\nDESCRIPTION: Shows how to use pygame.scrap.get_types() to retrieve a list of available clipboard data types and process text-related content.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/scrap.rst#2025-04-20_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nfor t in pygame.scrap.get_types():\n    if \"text\" in t:\n        # There is some content with the word \"text\" in its type string.\n        print(pygame.scrap.get(t))\n```\n\n----------------------------------------\n\nTITLE: Retrieving Touch Device Count in Pygame\nDESCRIPTION: This function returns the number of available touch devices. It takes no parameters and returns an integer representing the count of touch devices.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/touch.rst#2025-04-20_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nget_num_devices() -> int\n```\n\n----------------------------------------\n\nTITLE: Defining a GameObject Class in Pygame\nDESCRIPTION: This code defines a GameObject class for managing multiple moving objects in a Pygame application. It includes methods for initialization and movement, with boundary checking.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/es/tutorials/MoverImagen.rst#2025-04-20_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nclass GameObject:\n    def __init__(self, image, height, speed):\n        self.speed = speed\n        self.image = image\n        self.pos = image.get_rect().move(0, height)\n    def move(self):\n        self.pos = self.pos.move(0, self.speed)\n        if self.pos.right > 600:\n            self.pos.left = 0\n```\n\n----------------------------------------\n\nTITLE: Loading and Converting Pygame Images\nDESCRIPTION: Defines a function to load PNG images for a Pygame game, handling file paths, image conversion for alpha channels, and error cases. Returns the image object and its rectangle.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/tut/tom_games3.rst#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef load_png(name):\n    \"\"\" Load image and return image object\"\"\"\n    fullname = os.path.join(\"data\", name)\n    try:\n        image = pygame.image.load(fullname)\n        if image.get_alpha() is None:\n            image = image.convert()\n        else:\n            image = image.convert_alpha()\n    except FileNotFoundError:\n        print(f\"Cannot load image: {fullname}\")\n        raise SystemExit\n    return image, image.get_rect()\n```\n\n----------------------------------------\n\nTITLE: Averaging Multiple Surfaces in Pygame\nDESCRIPTION: Takes a sequence of surfaces and returns a surface with average colors from each of the surfaces.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/transform.rst#2025-04-20_snippet_12\n\nLANGUAGE: Python\nCODE:\n```\naverage_surfaces(surfaces, dest_surface=None, palette_colors=1) -> Surface\n```\n\n----------------------------------------\n\nTITLE: Normalizing SDL_Rect with Negative Dimensions\nDESCRIPTION: Function that normalizes an SDL_Rect by adjusting negative width and/or height values to create a rect with positive dimensions.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/c_api/rect.rst#2025-04-20_snippet_4\n\nLANGUAGE: c\nCODE:\n```\nvoid pgRect_Normalize(SDL_Rect *rect)\n```\n\n----------------------------------------\n\nTITLE: Vector Coordinate Setting with Slices - Python\nDESCRIPTION: Shows how to set multiple coordinates at once using slices or swizzling in pygame's Vector2 class.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/math.rst#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nv = pygame.Vector2()\nv.xy = 1, 2\nv[:] = 1, 2\n```\n\n----------------------------------------\n\nTITLE: Vector2 Update Method in Python\nDESCRIPTION: Sets the coordinates of the vector using various input formats.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/math.rst#2025-04-20_snippet_12\n\nLANGUAGE: Python\nCODE:\n```\nupdate() -> None\nupdate(int) -> None\nupdate(float) -> None\nupdate(Vector2) -> None\nupdate(x, y) -> None\nupdate((x, y)) -> None\n```\n\n----------------------------------------\n\nTITLE: Posting Events\nDESCRIPTION: Posts custom event objects to the event queue. Care must be taken to include expected attributes for specific event types.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/fastevent.rst#2025-04-20_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\npost(Event) -> None\n```\n\n----------------------------------------\n\nTITLE: Drawing HP Bar and Game Buttons\nDESCRIPTION: Functions to draw the HP bar and game buttons on the screen. The HP bar visually represents the player's current health, while the buttons allow the player to make color choices.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/tut/en/Red_or_Black/7.Game_board/Advanced OUTPUT and plus alpha.rst#2025-04-20_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\ndef drawHP(HP):\n    r = int((height - 40) / maxHP)\n\n    pygame.draw.rect(myScreen, gray, (20, 20, 20, 20 + ((maxHP - 0.5) * r)))\n\n    for i in range(maxHP):\n        if HP >= (maxHP - i):\n            pygame.draw.rect(myScreen, blue, (20, 20 + (i * r), 20, r))\n        pygame.draw.rect(myScreen, white, (20, 20 + (i * r), 20, r), 1)\n\n    return\n\ndef drawButtons():\n    r = 45\n    r_margin = 10\n    colors = [red, black]\n    \n    num = 2\n    margin = int((width - ((r * num) + (r_margin * (num - 1)))) / 2)\n    \n    for i in range(0, num):\n        left = margin + (i * r) + (i * r_margin)\n        up = height - r - 10\n        pygame.draw.rect(myScreen, colors[i], (left, up, r, r))\n        pygame.draw.rect(myScreen, gray, (left + 2, up + 2, r - 4, r - 4), 2)\n```\n\n----------------------------------------\n\nTITLE: Setting Gamma Ramps in Pygame Display\nDESCRIPTION: Shows how to set custom gamma ramps for red, green, and blue channels. Each argument should be a sequence of 256 integers ranging from 0 to 0xffff.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/display.rst#2025-04-20_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nset_gamma_ramp(red, green, blue) -> bool\n```\n\n----------------------------------------\n\nTITLE: Vector3 Projection and Copying in Pygame\nDESCRIPTION: Methods for projecting one vector onto another and creating a copy of a Vector3 object.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/math.rst#2025-04-20_snippet_21\n\nLANGUAGE: Python\nCODE:\n```\nproject(Vector3) -> Vector3\ncopy() -> Vector3\n```\n\n----------------------------------------\n\nTITLE: Copying Pixel Alpha Values to 2D Array in Python using Pygame\nDESCRIPTION: This function copies pixel alpha values (transparency) from a Surface into a 2D array. It works for any Surface format. Surfaces without pixel alpha return an array with all opaque values. It temporarily locks the Surface during copying.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/surfarray.rst#2025-04-20_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\narray_alpha(Surface) -> array\n```\n\n----------------------------------------\n\nTITLE: Waiting for Events\nDESCRIPTION: Blocks execution until an event is available and returns the current event from the queue.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/fastevent.rst#2025-04-20_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nwait() -> Event\n```\n\n----------------------------------------\n\nTITLE: Measuring Text Size in Pygame\nDESCRIPTION: The size method determines the space needed to render text. It returns the width and height of the rendered text without actually rendering it.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/font.rst#2025-04-20_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nFont.size(text) -> (width, height)\n```\n\n----------------------------------------\n\nTITLE: Referencing Red Pixel Values in 2D Array in Python using Pygame\nDESCRIPTION: This function creates a 2D array directly referencing red values in a Surface. It only works on 24-bit or 32-bit Surfaces. Changes to the array affect the Surface pixels. The Surface remains locked for the array's lifetime.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/surfarray.rst#2025-04-20_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\npixels_red(Surface) -> array\n```\n\n----------------------------------------\n\nTITLE: Getting Font Height in Pygame\nDESCRIPTION: The get_height method returns the average height of the font's rendered text in pixels.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/font.rst#2025-04-20_snippet_13\n\nLANGUAGE: Python\nCODE:\n```\nFont.get_height() -> int\n```\n\n----------------------------------------\n\nTITLE: Vector2 Elementwise Operations in Python\nDESCRIPTION: Applies an operation to each element of the vector.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/math.rst#2025-04-20_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nelementwise() -> VectorElementwiseProxy\n```\n\n----------------------------------------\n\nTITLE: Polling Events\nDESCRIPTION: Returns the next available event from the queue. Returns NOEVENT if queue is empty.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/fastevent.rst#2025-04-20_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\npoll() -> Event\n```\n\n----------------------------------------\n\nTITLE: Keyboard Modifier Constants in Pygame\nDESCRIPTION: List of modifier key constants that can be combined using bitwise operations to check keyboard modifier states.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/key.rst#2025-04-20_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n      pygame\n      Constant      Description\n      -------------------------\n      KMOD_NONE     no modifier keys pressed\n      KMOD_LSHIFT   left shift\n      KMOD_RSHIFT   right shift\n      # ... additional modifier constants\n```\n\n----------------------------------------\n\nTITLE: Rotating Vector3 around Y-axis in Pygame\nDESCRIPTION: Methods for rotating a Vector3 object around the y-axis using degrees or radians, both creating new vectors and modifying in-place.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/math.rst#2025-04-20_snippet_18\n\nLANGUAGE: Python\nCODE:\n```\nrotate_y(angle) -> Vector3\nrotate_y_rad(angle) -> Vector3\nrotate_y_ip(angle) -> None\nrotate_y_rad_ip(angle) -> None\n```\n\n----------------------------------------\n\nTITLE: PYGAME_FORCE_SCALE Setting\nDESCRIPTION: Forces scaled display mode with optional photo quality scaling\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/pygame.rst#2025-04-20_snippet_6\n\nLANGUAGE: text\nCODE:\n```\nPYGAME_FORCE_SCALE -\\nSet to \"photo\" or \"default\".\n```\n\n----------------------------------------\n\nTITLE: Getting Key Codes from Names in Python with Pygame\nDESCRIPTION: Demonstrates how to obtain the key identifier code from a descriptive key name using the key_code() function.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/key.rst#2025-04-20_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\npygame.key.key_code(\"return\") == pygame.K_RETURN\npygame.key.key_code(\"0\") == pygame.K_0\npygame.key.key_code(\"space\") == pygame.K_SPACE\n```\n\n----------------------------------------\n\nTITLE: Initializing Pygame Event Object\nDESCRIPTION: This class represents events in Pygame. It can be initialized with a type and either a dictionary of attributes or keyword arguments. The resulting object supports attribute assignment and deletion.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/event.rst#2025-04-20_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nEvent(type, dict) -> Event\nEvent(type, **attributes) -> Event\n```\n\n----------------------------------------\n\nTITLE: Surface to Array Pixel Copy in Python\nDESCRIPTION: Copies pixels from a Surface object to a 2D or 3D array. Supports different copy modes including raw pixel values, RGB components, color component slices, and alpha transparency values.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/pixelcopy.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nsurface_to_array(array, surface, kind='P', opaque=255, clear=0) -> None\n```\n\n----------------------------------------\n\nTITLE: Blitting Array to Surface in Pygame\nDESCRIPTION: The blit_array function directly copies values from an array into a Surface. It's faster than converting the array to a Surface and blitting. The array must match the Surface dimensions and will replace all pixel values. Only integer, ASCII character, and record arrays are accepted.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/surfarray.rst#2025-04-20_snippet_14\n\nLANGUAGE: Python\nCODE:\n```\nblit_array(Surface, array) -> None\n```\n\n----------------------------------------\n\nTITLE: PYGAME_DISPLAY Configuration\nDESCRIPTION: Sets the display index for Pygame window initialization\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/pygame.rst#2025-04-20_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nPYGAME_DISPLAY - Experimental (subject to change)\\nSet index of the display to use, \"0\" is the default.\n```\n\n----------------------------------------\n\nTITLE: Surface Creation from Array in Python\nDESCRIPTION: Creates a new Surface object that matches the data and format of the input array. Supports both 2D and 3D arrays with integer values of any size.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/pixelcopy.rst#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\npygame.pixelcopy.make_surface(array) -> Surface\n```\n\n----------------------------------------\n\nTITLE: Basic NumPy Array Operations in Python\nDESCRIPTION: Demonstrates creating and manipulating NumPy arrays, including indexing, slicing, and element-wise operations. Shows how to create 1D and 2D arrays and perform basic operations.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/es/tutorials/SurfarrayIntro.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> from numpy import *                    #importar numeric\n>>> a = array((1,2,3,4,5))                 #crear un array\n>>> a                                      #mostrar array\narray([1, 2, 3, 4, 5])\n>>> a[2]                                   #index al array\n3\n>>> a*2                                    #nuevo array con valores dobles\narray([ 2,  4,  6,  8, 10])\n```\n\n----------------------------------------\n\nTITLE: Running Examples from Python Interpreter\nDESCRIPTION: Demonstrates how to run pygame examples directly from the Python interpreter by importing the example module and calling its main() function.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/examples.rst#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> import pygame.examples.scaletest\n>>> pygame.examples.scaletest.main()\n```\n\n----------------------------------------\n\nTITLE: Dictionary Collision Detection with Rect Objects\nDESCRIPTION: Example showing how to convert a Rect object to a tuple for use as a dictionary key in collision detection methods since Rect objects are not hashable.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/rect.rst#2025-04-20_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nrect.collidedict({tuple(key_rect) : value})\n```\n\n----------------------------------------\n\nTITLE: Updating Vector3 Coordinates in Pygame\nDESCRIPTION: Method for setting the coordinates of a Vector3 object in-place, accepting various input formats.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/math.rst#2025-04-20_snippet_23\n\nLANGUAGE: Python\nCODE:\n```\nupdate() -> None\nupdate(int) -> None\nupdate(float) -> None\nupdate(Vector3) -> None\nupdate(x, y, z) -> None\nupdate((x, y, z)) -> None\n```\n\n----------------------------------------\n\nTITLE: Vector2 Spherical Linear Interpolation in Python\nDESCRIPTION: Calculates the spherical interpolation between two Vector2 objects.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/math.rst#2025-04-20_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nslerp(Vector2, float) -> Vector2\n```\n\n----------------------------------------\n\nTITLE: Running Pygame Example Game\nDESCRIPTION: Command to run the built-in aliens example game to test Pygame installation\nSOURCE: https://github.com/pygame/pygame/blob/main/README.rst#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npython3 -m pygame.examples.aliens\n```\n\n----------------------------------------\n\nTITLE: Vector2 Projection in Python\nDESCRIPTION: Projects one vector onto another, useful for collision detection.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/math.rst#2025-04-20_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\nproject(Vector2) -> Vector2\n```\n\n----------------------------------------\n\nTITLE: Defining Font Style Constants in Python\nDESCRIPTION: Constants used for setting font styles in Pygame's Font class. These can be combined using bitwise OR to apply multiple styles.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/freetype.rst#2025-04-20_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nSTYLE_NORMAL\nSTYLE_UNDERLINE\nSTYLE_OBLIQUE\nSTYLE_STRONG\nSTYLE_WIDE\nSTYLE_DEFAULT\n```\n\n----------------------------------------\n\nTITLE: Unpacking Color Components in Python\nDESCRIPTION: Shows how to unpack specific color components from a Color object using Python's unpacking syntax, as an alternative to the deprecated set_length method.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/color.rst#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nr, g, b, _ = pygame.Color(100, 100, 100)\n```\n\nLANGUAGE: python\nCODE:\n```\nr, g, *_ = pygame.Color(100, 100, 100)\n```\n\n----------------------------------------\n\nTITLE: PixelArray Slicing Operations\nDESCRIPTION: Demonstrates creating subarrays using slice notation and performing rectangular pixel manipulations.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/pixelarray.rst#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Create some new PixelArray objects providing a different view\n# of the original array/surface.\nnewarray = pxarray[2:4, 3:5]\notherarray = pxarray[::2, ::2]\n\npxarray[::2, :] = (0, 0, 0)               # Make even columns black.\npxarray[::2] = (0, 0, 0)                  # Same as [::2, :]\n```\n\n----------------------------------------\n\nTITLE: Accessing SDL Version Information\nDESCRIPTION: Demonstrates how to access SDL version information through Pygame's version attributes.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/pygame.rst#2025-04-20_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n>>> pygame.version.SDL.major\n2\n```\n\n----------------------------------------\n\nTITLE: Accessing Event Type in Pygame\nDESCRIPTION: This read-only attribute of the Event class returns the event type identifier as an integer. For user-created events, this is the 'type' argument passed to pygame.event.Event().\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/event.rst#2025-04-20_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\ntype -> int\n```\n\n----------------------------------------\n\nTITLE: Creating Vector3 Objects in Python\nDESCRIPTION: Demonstrates various ways to initialize Vector3 objects in Pygame.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/math.rst#2025-04-20_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nVector3() -> Vector3(0, 0, 0)\nVector3(int) -> Vector3\nVector3(float) -> Vector3\nVector3(Vector3) -> Vector3\nVector3(x, y, z) -> Vector3\nVector3((x, y, z)) -> Vector3\n```\n\n----------------------------------------\n\nTITLE: Implementing Sprite Methods in Pygame\nDESCRIPTION: Required internal method signature for Sprite class implementation. The remove_internal() method must accept a group parameter and handle group membership tracking.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/tut/SpriteIntro.rst#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef remove_internal(group)\n```\n\n----------------------------------------\n\nTITLE: Converting Frequency to MIDI Note in Python\nDESCRIPTION: Demonstrates the usage of the frequency_to_midi function, which converts a given frequency to the closest MIDI note number.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/midi.rst#2025-04-20_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrequency_to_midi(27.5) == 21\n```\n\n----------------------------------------\n\nTITLE: Setting Video Drivers on Different Platforms in Pygame\nDESCRIPTION: Shows the environment variable options for selecting specific display backends on different platforms. This can be used to control which video driver Pygame uses when initializing the display module.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/display.rst#2025-04-20_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nWindows : windib, directx\nUnix    : x11, dga, fbcon, directfb, ggi, vgl, svgalib, aalib\n```\n\n----------------------------------------\n\nTITLE: Implementing Group Methods in Pygame\nDESCRIPTION: Required internal methods for Group class implementation. Both add_internal() and remove_internal() methods must accept a sprite parameter. The class must also include a _spritegroup attribute for type identification.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/tut/SpriteIntro.rst#2025-04-20_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef add_internal(sprite)\ndef remove_internal(sprite)\n_spritegroup = True  # Attribute can have any value\n```\n\n----------------------------------------\n\nTITLE: Referencing Sound Samples in Array in Python\nDESCRIPTION: Creates a new array that directly references the samples in a Sound object. Modifying this array will change the Sound. The array format matches the current mixer initialization.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/sndarray.rst#2025-04-20_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nsamples(Sound) -> array\n```\n\n----------------------------------------\n\nTITLE: Accessing Pygame Documentation via Python Module\nDESCRIPTION: Command to launch the Pygame documentation using the built-in module. This is an alternative to visiting the official website directly.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/README.md#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\npython -m pygame.docs\n```\n\n----------------------------------------\n\nTITLE: Moving Sprite Example Reference\nDESCRIPTION: Reference to an example script showing how to move objects (specifically a circle) around the screen in Pygame.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/index.rst#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Referenced file: ref/code_examples/base_script_example.py\n```\n\n----------------------------------------\n\nTITLE: Camera Controls Implementation\nDESCRIPTION: Example of setting and getting camera controls like image flipping.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/tut/CameraIntro.rst#2025-04-20_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\ncam.set_controls(hflip = True, vflip = False)\nprint camera.get_controls()\n```\n\n----------------------------------------\n\nTITLE: Process Sleep Timer in Pygame\nDESCRIPTION: Pauses program execution for specified milliseconds using process sleep. Shares processor with other programs but is less accurate than delay().\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/time.rst#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nwait(milliseconds) -> time\n```\n\n----------------------------------------\n\nTITLE: Removing Interior Area from Surface in Pygame\nDESCRIPTION: Extracts a portion of an image by removing vertical and horizontal pixels surrounding the given rectangle area.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/transform.rst#2025-04-20_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\nchop(surface, rect) -> Surface\n```\n\n----------------------------------------\n\nTITLE: Setting Buffer Size Example\nDESCRIPTION: Example showing how to set a smaller buffer size for less laggy sound playback using pre_init before initialization.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/mixer.rst#2025-04-20_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\npygame.mixer.pre_init(44100,-16,2, 1024)\n```\n\n----------------------------------------\n\nTITLE: Doubling Surface Size in Pygame\nDESCRIPTION: Returns a new image double the size of the original using the AdvanceMAME Scale2X algorithm. Effective on simple images with solid colors.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/transform.rst#2025-04-20_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nscale2x(surface, dest_surface=None) -> Surface\n```\n\n----------------------------------------\n\nTITLE: Setting Text Input Rectangle in Python with Pygame\nDESCRIPTION: Demonstrates how to set the rectangle for text input, which controls the position of the candidate list for IME input methods.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/key.rst#2025-04-20_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\ninput_rect = pygame.Rect(100, 100, 200, 30)\npygame.key.set_text_input_rect(input_rect)\n```\n\n----------------------------------------\n\nTITLE: Defining Pygame MIDI Event Constants\nDESCRIPTION: Defines constants for MIDI input and output events used by the pygame.event module.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/midi.rst#2025-04-20_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nMIDIIN\nMIDIOUT\n```\n\n----------------------------------------\n\nTITLE: Linear Interpolation of Colors in Pygame\nDESCRIPTION: The lerp method performs linear interpolation between two colors in RGBA space. It takes another Color object and a float value between 0 and 1 to determine the interpolation amount.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/es/referencias/color.rst#2025-04-20_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nlerp(Color, float) -> Color\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom RenderUpdatesDraw Class in Pygame\nDESCRIPTION: Example of creating a custom rendering group that calls sprite.draw() instead of blitting sprite.image. This class extends RenderClear and overrides the draw method to track dirty rectangles for efficient updates.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/es/tutorials/SpriteIntro.rst#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass RenderUpdatesDraw(RenderClear):\n    \"\"\"call sprite.draw(screen) to render sprites\"\"\"\n    def draw(self, surface):\n        dirty = self.lostsprites\n        self.lostsprites = []\n        for s, r in self.spritedict.items():\n            newrect = s.draw(screen) #Here's the big change\n            if r is 0:\n                dirty.append(newrect)\n            else:\n                dirty.append(newrect.union(r))\n            self.spritedict[s] = newrect\n        return dirty\n```\n\n----------------------------------------\n\nTITLE: Setting Bold Text in Pygame\nDESCRIPTION: The set_bold method enables fake rendering of bold text. It takes a boolean parameter to enable or disable bold rendering.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/font.rst#2025-04-20_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\nFont.set_bold(bool) -> None\n```\n\n----------------------------------------\n\nTITLE: Retrieving Queued Sound from Pygame Mixer Channel\nDESCRIPTION: This method returns any Sound that is currently queued on the Channel. Once the queued sound begins playback, it will no longer be on the queue.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/mixer.rst#2025-04-20_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nget_queue() -> Sound\n```\n\n----------------------------------------\n\nTITLE: Converting Color to Mapped Value in Pygame Surface\nDESCRIPTION: Converts an RGBA color into the mapped integer value for this Surface. The returned integer will contain no more bits than the bit depth of the Surface.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/surface.rst#2025-04-20_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nmap_rgb(Color) -> mapped_int\n```\n\n----------------------------------------\n\nTITLE: Controller Event Types in SDL2\nDESCRIPTION: Lists the possible controller events that can be generated by SDL2 controllers, including axis motion, button presses, device connection events, and touchpad events (SDL 2.0.14+).\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/sdl2_controller.rst#2025-04-20_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nCONTROLLERAXISMOTION, CONTROLLERBUTTONDOWN, CONTROLLERBUTTONUP,\nCONTROLLERDEVICEREMAPPED, CONTROLLERDEVICEADDED, CONTROLLERDEVICEREMOVED,\nCONTROLLERTOUCHPADDOWN, CONTROLLERTOUCHPADMOTION, CONTROLLERTOUCHPADUP\n```\n\n----------------------------------------\n\nTITLE: Querying MIDI Device Information in Python\nDESCRIPTION: Demonstrates how to retrieve information about a MIDI device using the get_device_info function. It returns a tuple containing interface, name, input/output flags, and open status.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/midi.rst#2025-04-20_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nget_device_info(an_id) -> (interf, name, input, output, opened)\n```\n\n----------------------------------------\n\nTITLE: Getting Clipping Area of Pygame Surface\nDESCRIPTION: Returns a rectangle of the current clipping area. The Surface will always return a valid rectangle that will never be outside the bounds of the image.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/surface.rst#2025-04-20_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nget_clip() -> Rect\n```\n\n----------------------------------------\n\nTITLE: Getting Character Metrics in Pygame\nDESCRIPTION: The metrics method returns a list of tuples containing metric information for each character in the given text.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/font.rst#2025-04-20_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\nFont.metrics(text) -> list\n```\n\n----------------------------------------\n\nTITLE: Importing Pygame Modules in Python\nDESCRIPTION: This snippet demonstrates how to import all Pygame modules and optionally import constants and functions into the global namespace.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/tut/ImportInit.rst#2025-04-20_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport pygame\nfrom pygame.locals import *\n```\n\n----------------------------------------\n\nTITLE: Capturing Single Image with Pygame Camera\nDESCRIPTION: Example of capturing a single image frame from a camera device at specified resolution.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/tut/CameraIntro.rst#2025-04-20_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\ncam = pygame.camera.Camera(\"/dev/video0\",(640,480))\ncam.start()\nimage = cam.get_image()\n```\n\n----------------------------------------\n\nTITLE: Getting Surface Flags in Pygame\nDESCRIPTION: Returns a set of current Surface features as a bitmask. Typical flags include RLEACCEL, SRCALPHA, and SRCCOLORKEY.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/surface.rst#2025-04-20_snippet_30\n\nLANGUAGE: python\nCODE:\n```\nget_flags() -> int\n```\n\n----------------------------------------\n\nTITLE: Counting Active Fingers on Touch Device in Pygame\nDESCRIPTION: This function returns the number of active fingers for a specified touch device. It takes a touch device ID as a parameter and returns an integer representing the count of active fingers.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/touch.rst#2025-04-20_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nget_num_fingers(touchid) -> int\n```\n\n----------------------------------------\n\nTITLE: Checking Clipboard Content Availability in Pygame\nDESCRIPTION: Shows how to use pygame.scrap.contains() to check if specific types of data are available in the clipboard.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/scrap.rst#2025-04-20_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nif pygame.scrap.contains(pygame.SCRAP_TEXT):\n    print(\"There is text in the clipboard.\")\nif pygame.scrap.contains(\"own_data_type\"):\n    print(\"There is stuff in the clipboard.\")\n```\n\n----------------------------------------\n\nTITLE: PixelArray Simplified Slice Syntax\nDESCRIPTION: Shows simplified slice syntax using ellipsis for column operations.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/pixelarray.rst#2025-04-20_snippet_4\n\nLANGUAGE: python\nCODE:\n```\npxarray[::2, ...] = (0, 0, 0)             # Same as pxarray[::2, :]\npxarray[...] = (255, 0, 0)                # Same as pxarray[:]\n```\n\n----------------------------------------\n\nTITLE: Pre-initializing Pygame Mixer Settings\nDESCRIPTION: Sets default values for mixer initialization before the actual init() call. Useful when custom playback values need to be set before pygame.init().\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/mixer.rst#2025-04-20_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\npygame.mixer.pre_init(frequency=44100, size=-16, channels=2, buffer=512, devicename=None, allowedchanges=AUDIO_ALLOW_FREQUENCY_CHANGE | AUDIO_ALLOW_CHANNELS_CHANGE)\n```\n\n----------------------------------------\n\nTITLE: Get Hat Position Method - Pygame Joystick\nDESCRIPTION: Returns the current position of a joystick hat as x,y coordinates. Values are digital (-1, 0, or 1) where (0,0) is centered, -1 indicates left/down, and 1 indicates right/up.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/joystick.rst#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nget_hat(hat_number) -> x, y\n```\n\n----------------------------------------\n\nTITLE: Scaling Image Down\nDESCRIPTION: Reduces image size by half using array slicing with step size of 2.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/tut/SurfarrayIntro.rst#2025-04-20_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\nscaledown = rgbarray[::2,::2]\nsurfdemo_show(scaledown, 'scaledown')\n```\n\n----------------------------------------\n\nTITLE: Running a Specific Pygame Example (scaletest)\nDESCRIPTION: Demonstrates running the scaletest example with an image file as an argument using the Python -m option.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/examples.rst#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython -m pygame.examples.scaletest someimage.png\n```\n\n----------------------------------------\n\nTITLE: Vector3 Magnitude Calculation in Python\nDESCRIPTION: Calculates the Euclidean magnitude (length) of a Vector3 object.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/math.rst#2025-04-20_snippet_15\n\nLANGUAGE: Python\nCODE:\n```\nmagnitude() -> float\nmagnitude_squared() -> float\nlength() -> float\n```\n\n----------------------------------------\n\nTITLE: SDL Event Creation Function in C\nDESCRIPTION: Function to create a new pygame event instance from an SDL_Event structure. Returns NULL and raises Python exception on failure.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/c_api/event.rst#2025-04-20_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nPyObject* pgEvent_New(SDL_Event *event)\n```\n\n----------------------------------------\n\nTITLE: Referencing Blue Pixel Values in 2D Array in Python using Pygame\nDESCRIPTION: This function creates a 2D array directly referencing blue values in a Surface. It only works on 24-bit or 32-bit Surfaces. Changes to the array affect the Surface pixels. The Surface remains locked for the array's lifetime.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/surfarray.rst#2025-04-20_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\npixels_blue(Surface) -> array\n```\n\n----------------------------------------\n\nTITLE: Initializing FastEvent Module\nDESCRIPTION: Initializes the pygame.fastevent module for event handling.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/fastevent.rst#2025-04-20_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\ninit() -> None\n```\n\n----------------------------------------\n\nTITLE: Drawing a Textured Polygon in Pygame\nDESCRIPTION: Draws a textured polygon on a given surface using the pygame.gfxdraw.textured_polygon function. Parameters include surface, a sequence of (x, y) coordinates for the polygon vertices, texture surface, and texture offset coordinates.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/gfxdraw.rst#2025-04-20_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\npygame.gfxdraw.textured_polygon(surface, points, texture, tx, ty)\n```\n\n----------------------------------------\n\nTITLE: Processing Event Queue\nDESCRIPTION: Internally processes pygame event handlers to maintain system interaction. Required for each frame if not consistently processing events through other fastevent functions.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/fastevent.rst#2025-04-20_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\npump() -> None\n```\n\n----------------------------------------\n\nTITLE: Example Usage of Pygame Transform Threshold Function\nDESCRIPTION: This code snippet demonstrates the usage of the threshold function in a test case. It shows how to use the function with various parameters and assertions to verify its behavior.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/transform.rst#2025-04-20_snippet_16\n\nLANGUAGE: python\nCODE:\n```\ndef test_threshold_dest_surf_not_change(self):\n    \" Ensure threshold does not change dest_surf when set_behavior=0.\"\n    surf = pygame.Surface((32, 32))\n    dest_surf = pygame.Surface((32, 32))\n    rect = pygame.Rect((0, 0, 32, 32))\n    \n    surf.fill((40, 40, 40))\n    dest_surf.fill((255, 255, 255))\n    \n    pixels_within_threshold = pygame.transform.threshold(\n        dest_surf,\n        surf,\n        (0, 0, 0),\n        (20, 20, 20),\n        (0, 0, 0),\n        set_behavior=0,\n    )\n    self.assertEqual(pixels_within_threshold, 0)\n    self.assertEqual(dest_surf.get_at((0, 0)), (255, 255, 255))\n```\n\n----------------------------------------\n\nTITLE: Vector2 Magnitude Clamping in Python\nDESCRIPTION: Clamps the magnitude of a vector between specified minimum and maximum values.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/math.rst#2025-04-20_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\nclamp_magnitude(max_length) -> Vector2\nclamp_magnitude(min_length, max_length) -> Vector2\nclamp_magnitude_ip(max_length) -> None\nclamp_magnitude_ip(min_length, max_length) -> None\n```\n\n----------------------------------------\n\nTITLE: Running Pygame Examples with Python -m Option\nDESCRIPTION: Shows how to run pygame examples as modules using the Python -m option. This allows for easy execution of examples without needing to access the example files directly.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/examples.rst#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython -m pygame.examples.<example name> <example arguments>\n```\n\n----------------------------------------\n\nTITLE: Matching and Using System Fonts in Pygame\nDESCRIPTION: Example showing how to use pygame.font.match_font() to find a specific font file on the system. This code prints the full path to the 'bitstreamverasans' font if it exists on the user's system.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/font.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nprint pygame.font.match_font('bitstreamverasans')\n# output is: /usr/share/fonts/truetype/ttf-bitstream-vera/Vera.ttf\n# (but only if you have Vera on your system)\n```\n\n----------------------------------------\n\nTITLE: Getting Surface Properties Methods\nDESCRIPTION: Methods for retrieving surface properties like colorkey, alpha value, and lock status. These methods return current surface settings and states.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/surface.rst#2025-04-20_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\nsurface.get_colorkey()\nsurface.get_alpha()\nsurface.get_locked()\nsurface.get_locks()\n```\n\n----------------------------------------\n\nTITLE: Importing Pygame Modules in Python\nDESCRIPTION: Demonstrates how to import Pygame modules, including importing local names. This is typically done at the beginning of a Pygame project.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/tut/MakeGames.rst#2025-04-20_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport pygame\nfrom pygame.locals import *\n```\n\n----------------------------------------\n\nTITLE: Copying Blue Pixel Values to 2D Array in Python using Pygame\nDESCRIPTION: This function copies pixel blue values from a Surface into a 2D array. It works for any Surface format and temporarily locks the Surface during copying. Introduced in Pygame 2.0.2.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/surfarray.rst#2025-04-20_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\narray_blue(Surface) -> array\n```\n\n----------------------------------------\n\nTITLE: Getting Line Size in Pygame\nDESCRIPTION: The get_linesize method returns the recommended space between lines of text in pixels.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/font.rst#2025-04-20_snippet_12\n\nLANGUAGE: Python\nCODE:\n```\nFont.get_linesize() -> int\n```\n\n----------------------------------------\n\nTITLE: Executing Blit Blends Example in Pygame\nDESCRIPTION: This function demonstrates fake additive blending using NumPy. It doesn't clamp and allows pressing r, g, b keys. It's somewhat similar to blend_fill.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/examples.rst#2025-04-20_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\ndef blit_blends.main() -> None:\n```\n\n----------------------------------------\n\nTITLE: Getting Surface Byte Size in Pygame\nDESCRIPTION: Returns the number of bytes used per pixel in the Surface.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/surface.rst#2025-04-20_snippet_29\n\nLANGUAGE: python\nCODE:\n```\nget_bytesize() -> int\n```\n\n----------------------------------------\n\nTITLE: Thick Arrow Cursor String Definition for Pygame\nDESCRIPTION: Example of a cursor defined as a sequence of strings where 'X' represents black pixels and '.' represents white pixels. This 24x24 cursor depicts a thick arrow that can be compiled into binary cursor data.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/cursors.rst#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nthickarrow_strings = (               #sized 24x24\n  \"XX                      \",\n  \"XXX                     \",\n  \"XXXX                    \",\n  \"XX.XX                   \",\n  \"XX..XX                  \",\n  \"XX...XX                 \",\n  \"XX....XX                \",\n  \"XX.....XX               \",\n  \"XX......XX              \",\n  \"XX.......XX             \",\n  \"XX........XX            \",\n  \"XX........XXX           \",\n  \"XX......XXXXX           \",\n  \"XX.XXX..XX              \",\n  \"XXXX XX..XX             \",\n  \"XX   XX..XX             \",\n  \"     XX..XX             \",\n  \"      XX..XX            \",\n  \"      XX..XX            \",\n  \"       XXXX             \",\n  \"       XX               \",\n  \"                        \",\n  \"                        \",\n  \"                        \")\n```\n\n----------------------------------------\n\nTITLE: Vector3 Dot Product in Python\nDESCRIPTION: Calculates the dot product (scalar product) of two Vector3 objects.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/math.rst#2025-04-20_snippet_13\n\nLANGUAGE: Python\nCODE:\n```\ndot(Vector3) -> float\n```\n\n----------------------------------------\n\nTITLE: Checking Clipboard Ownership Loss in Pygame\nDESCRIPTION: Demonstrates how to use pygame.scrap.lost() to check if the Pygame application has lost ownership of the clipboard.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/scrap.rst#2025-04-20_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nif pygame.scrap.lost():\n    print(\"The clipboard is in use by another application.\")\n```\n\n----------------------------------------\n\nTITLE: Initializing pygame.cdrom Module\nDESCRIPTION: Function to initialize the cdrom module which scans the system for all CD devices. This must be called before any other cdrom functions will work, though it happens automatically when pygame.init() is called.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/cdrom.rst#2025-04-20_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\ninit() -> None\n```\n\n----------------------------------------\n\nTITLE: Converting MIDI Note to Frequency in Python\nDESCRIPTION: Shows how to use the midi_to_frequency function to convert a MIDI note number to its corresponding frequency.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/midi.rst#2025-04-20_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nmidi_to_frequency(21) == 27.5\n```\n\n----------------------------------------\n\nTITLE: Defining pgLifetimeLockObject Structure in C for Pygame Surface Locking\nDESCRIPTION: Defines a structure that pairs a locked pygame surface with the Python object that locked it. The lock is automatically removed when the lifetime lock instance is garbage collected.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/c_api/surflock.rst#2025-04-20_snippet_0\n\nLANGUAGE: c\nCODE:\n```\ntypedef struct {\n    PyObject *surface;\n    PyObject *lockobj;\n} pgLifetimeLockObject;\n```\n\n----------------------------------------\n\nTITLE: Copying Colorkey Values to 2D Array in Python using Pygame\nDESCRIPTION: This function creates a new array with colorkey transparency values from each pixel. Pixels matching the colorkey are fully transparent; others are fully opaque. It works on any Surface format and temporarily locks the Surface during copying.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/surfarray.rst#2025-04-20_snippet_12\n\nLANGUAGE: Python\nCODE:\n```\narray_colorkey(Surface) -> array\n```\n\n----------------------------------------\n\nTITLE: Getting Font Descent in Pygame\nDESCRIPTION: The get_descent method returns the height in pixels from the font baseline to the bottom of the font.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/font.rst#2025-04-20_snippet_15\n\nLANGUAGE: Python\nCODE:\n```\nFont.get_descent() -> int\n```\n\n----------------------------------------\n\nTITLE: Calculating Squared Vector Length in Python\nDESCRIPTION: Shows how to calculate the squared Euclidean length of a vector, which is faster than calculating the actual length as it avoids the square root operation.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/math.rst#2025-04-20_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nvec.length_squared() == vec.x**2 + vec.y**2 + vec.z**2\n```\n\n----------------------------------------\n\nTITLE: Stride Slicing in NumPy Arrays with Python\nDESCRIPTION: Demonstrates the use of stride slicing in NumPy arrays, allowing for more complex selection patterns. Shows examples of selecting every nth element and reversing arrays using negative strides.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/es/tutorials/SurfarrayIntro.rst#2025-04-20_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> c = arange(10)                         #como el rango, pero crea un array\n>>> c                                      #muestra el array\narray([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n>>> c[1:6:2]                               #divide valores impares desde el 1 al 6\narray([1, 3, 5])\n>>> c[4::4]                                #divide cada 4to valor, empezando por el 4\narray([4, 8])\n>>> c[8:1:-1]                              #divide 1 al 8, de atrás para adelante /// invertido\narray([8, 7, 6, 5, 4, 3, 2])\n```\n\n----------------------------------------\n\nTITLE: Stop Rumble Method - Pygame Joystick\nDESCRIPTION: Stops any currently playing rumble effect on the joystick.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/joystick.rst#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nstop_rumble() -> None\n```\n\n----------------------------------------\n\nTITLE: Creating Black Surface Array with NumPy\nDESCRIPTION: Creates a 2D array filled with zeros to display a black surface using NumPy's zeros function.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/tut/SurfarrayIntro.rst#2025-04-20_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\nallblack = N.zeros((128, 128))\nsurfdemo_show(allblack, 'allblack')\n```\n\n----------------------------------------\n\nTITLE: Checking Bold Text Status in Pygame\nDESCRIPTION: The get_bold method checks if the text will be rendered in bold. It returns a boolean value indicating the bold rendering status.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/font.rst#2025-04-20_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\nFont.get_bold() -> bool\n```\n\n----------------------------------------\n\nTITLE: Stopping Audio Playback\nDESCRIPTION: Method to stop audio playback from the CD. This also loses the current playback position.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/cdrom.rst#2025-04-20_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\nstop() -> None\n```\n\n----------------------------------------\n\nTITLE: Grayscaling a Surface in Pygame\nDESCRIPTION: Returns a grayscaled version of the original surface using the luminosity formula, which weights red, green, and blue according to their wavelengths.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/transform.rst#2025-04-20_snippet_14\n\nLANGUAGE: Python\nCODE:\n```\ngrayscale(surface, dest_surface=None) -> Surface\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom RenderUpdatesDraw Group in Python\nDESCRIPTION: This code defines a custom RenderUpdatesDraw class that extends RenderClear. It overrides the draw method to call a custom draw method on each sprite instead of blitting an image.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/tut/SpriteIntro.rst#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass RenderUpdatesDraw(RenderClear):\n    \"\"\"call sprite.draw(screen) to render sprites\"\"\"\n    def draw(self, surface):\n        dirty = self.lostsprites\n        self.lostsprites = []\n        for s, r in self.spritedict.items():\n            newrect = s.draw(screen) #Here's the big change\n            if r is 0:\n                dirty.append(newrect)\n            else:\n                dirty.append(newrect.union(r))\n            self.spritedict[s] = newrect\n        return dirty\n```\n\n----------------------------------------\n\nTITLE: Updating Color Components in Pygame\nDESCRIPTION: The update method sets the elements of the color. It can accept individual RGB(A) values or a single color value. If the alpha value is not provided, it remains unchanged.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/es/referencias/color.rst#2025-04-20_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nupdate(r, g, b) -> None\nupdate(r, g, b, a=255) -> None\nupdate(color_value) -> None\n```\n\n----------------------------------------\n\nTITLE: Defining Pygame Color Type in C\nDESCRIPTION: Defines the PyTypeObject for the pygame.Color class. This type object represents the Color class in the C API.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/c_api/color.rst#2025-04-20_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nPyTypeObject *pgColor_Type\n```\n\n----------------------------------------\n\nTITLE: PixelArray Color Comparison\nDESCRIPTION: Shows how to compare a pixel's color value using Surface.map_rgb() method.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/pixelarray.rst#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\npxarray = pygame.PixelArray(surface)\n# Check, if the first pixel at the topleft corner is blue\nif pxarray[0, 0] == surface.map_rgb((0, 0, 255)):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Retrieving Raw Buffer Data\nDESCRIPTION: Shows how to get a copy of the exported buffer as a single block of bytes with any gaps removed.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/bufferproxy.rst#2025-04-20_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nraw -> bytes\n```\n\n----------------------------------------\n\nTITLE: Drawing an Arc in Pygame\nDESCRIPTION: Draws an arc on a given surface using the pygame.gfxdraw.arc function. It takes parameters for surface, center coordinates, radius, start and stop angles in degrees, and color.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/gfxdraw.rst#2025-04-20_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\npygame.gfxdraw.arc(surface, x, y, r, start_angle, stop_angle, color)\n```\n\n----------------------------------------\n\nTITLE: Main Function Execution\nDESCRIPTION: Ensures that the main function is only executed when the script is run directly, not when it's imported as a module.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/tut/en/Red_or_Black/7.Game_board/Advanced OUTPUT and plus alpha.rst#2025-04-20_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nif __name__ == '__main__':\n    main()\n```\n\n----------------------------------------\n\nTITLE: Getting Parent Surface in Pygame\nDESCRIPTION: Returns the parent Surface of a subsurface. If this is not a subsurface then None will be returned.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/surface.rst#2025-04-20_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nget_parent() -> Surface\n```\n\n----------------------------------------\n\nTITLE: Using spritecollide function for collision detection in Pygame\nDESCRIPTION: This code demonstrates how to use pygame.sprite.spritecollide to detect collisions between a player sprite and bombs. When collisions occur, it plays a sound and creates an explosion at the bomb's location.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/es/tutorials/SpriteIntro.rst#2025-04-20_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfor bomb in sprite.spritecollide(player, bombs, 1):\n    boom_sound.play()\n    Explosion(bomb, 0)\n```\n\n----------------------------------------\n\nTITLE: Pausing Audio Playback\nDESCRIPTION: Method to temporarily pause audio playback. The playback can be resumed from the same point with the resume() method.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/cdrom.rst#2025-04-20_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\npause() -> None\n```\n\n----------------------------------------\n\nTITLE: Initializing Specific Pygame Module (Font) in Python\nDESCRIPTION: This example demonstrates how to initialize a specific Pygame module, in this case, the font module.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/tut/ImportInit.rst#2025-04-20_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\npygame.font.init()\n```\n\n----------------------------------------\n\nTITLE: Float Conversion Functions in C\nDESCRIPTION: Functions for converting Python objects to C floats, including single values and sequence elements.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/c_api/base.rst#2025-04-20_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nint pg_FloatFromObj(PyObject *obj, float *val);\nint pg_FloatFromObjIndex(PyObject *obj, int index, float *val);\nint pg_TwoFloatsFromObj(PyObject *obj, float *val1, float *val2);\n```\n\n----------------------------------------\n\nTITLE: Setting Font Padding Boolean\nDESCRIPTION: Controls whether text boundary rectangle is inflated to match font boundaries or kept minimal.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/freetype.rst#2025-04-20_snippet_4\n\nLANGUAGE: python\nCODE:\n```\npad = True\n```\n\n----------------------------------------\n\nTITLE: Defining Overlay Format Types in Pygame\nDESCRIPTION: List of available format types for video overlays in Pygame. These formats determine the type of pixel data used in the overlay.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/overlay.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nYV12_OVERLAY, IYUV_OVERLAY, YUY2_OVERLAY, UYVY_OVERLAY, YVYU_OVERLAY\n```\n\n----------------------------------------\n\nTITLE: Checking Italic Text Status in Pygame\nDESCRIPTION: The get_italic method checks if the text will be rendered in italic. It returns a boolean value indicating the italic rendering status.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/font.rst#2025-04-20_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\nFont.get_italic() -> bool\n```\n\n----------------------------------------\n\nTITLE: Glyph Metrics Tuple Structure in Python\nDESCRIPTION: Defines the structure of glyph metrics tuple returned by get_metrics() method, containing bounding box coordinates and advance values.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/freetype.rst#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n(min_x, max_x, min_y, max_y, horizontal_advance_x, horizontal_advance_y)\n```\n\n----------------------------------------\n\nTITLE: Getting Top Level Parent Surface in Pygame\nDESCRIPTION: Returns the top level parent Surface of a subsurface. If this is not a subsurface then this surface will be returned.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/surface.rst#2025-04-20_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nget_abs_parent() -> Surface\n```\n\n----------------------------------------\n\nTITLE: PYGAME_BLEND_ALPHA_SDL2 Configuration\nDESCRIPTION: Enables SDL2 blitter for alpha blending operations\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/pygame.rst#2025-04-20_snippet_7\n\nLANGUAGE: text\nCODE:\n```\nPYGAME_BLEND_ALPHA_SDL2 - New in pygame 2.0.0\\nSet to \"1\" to enable the SDL2 blitter.\n```\n\n----------------------------------------\n\nTITLE: Setting Single Palette Color in Pygame Surface\nDESCRIPTION: Sets the palette value for a single entry in a Surface palette. The index should be a value from 0 to 255. Has no effect on Surfaces with more than 8-bits per pixel.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/surface.rst#2025-04-20_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nset_palette_at(index, RGB) -> None\n```\n\n----------------------------------------\n\nTITLE: Uninitializing CD Drive\nDESCRIPTION: Method to uninitialize a CD drive when the program will not be accessing it for a while.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/cdrom.rst#2025-04-20_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nquit() -> None\n```\n\n----------------------------------------\n\nTITLE: Accessing Video Display Information in Pygame\nDESCRIPTION: Creates a VideoInfo object containing attributes describing the current graphics environment. This can be called before or after setting the display mode to verify display options.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/display.rst#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nhw:         1 if the display is hardware accelerated\nwm:         1 if windowed display modes can be used\nvideo_mem:  The megabytes of video memory on the display. This is 0 if\n            unknown\nbitsize:    Number of bits used to store each pixel\nbytesize:   Number of bytes used to store each pixel\nmasks:      Four values used to pack RGBA values into pixels\nshifts:     Four values used to pack RGBA values into pixels\nlosses:     Four values used to pack RGBA values into pixels\nblit_hw:    1 if hardware Surface blitting is accelerated\nblit_hw_CC: 1 if hardware Surface colorkey blitting is accelerated\nblit_hw_A:  1 if hardware Surface pixel alpha blitting is accelerated\nblit_sw:    1 if software Surface blitting is accelerated\nblit_sw_CC: 1 if software Surface colorkey blitting is accelerated\nblit_sw_A:  1 if software Surface pixel alpha blitting is accelerated\ncurrent_h, current_w:  Height and width of the current video mode, or\n            of the desktop mode if called before the display.set_mode\n            is called. (current_h, current_w are available since\n            SDL 1.2.10, and pygame 1.8.0). They are -1 on error, or if\n            an old SDL is being used.\n```\n\n----------------------------------------\n\nTITLE: Drawing a Filled Triangle in Pygame\nDESCRIPTION: Draws a filled triangle (trigon) on a given surface using the pygame.gfxdraw.filled_trigon function. It takes parameters for surface, three sets of x and y coordinates for the corners, and color.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/gfxdraw.rst#2025-04-20_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\npygame.gfxdraw.filled_trigon(surface, x1, y1, x2, y2, x3, y3, color)\n```\n\n----------------------------------------\n\nTITLE: Getting Subsurface Offset in Pygame\nDESCRIPTION: Gets the offset position of a child subsurface inside of a parent. If the Surface is not a subsurface this will return (0, 0).\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/surface.rst#2025-04-20_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nget_offset() -> (x, y)\n```\n\n----------------------------------------\n\nTITLE: Playing Audio CD\nDESCRIPTION: Method to play audio from a CD. Takes a track number and optional start and end times in seconds. If end time is not specified, plays to the end of the track.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/cdrom.rst#2025-04-20_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\nplay(track, start=None, end=None) -> None\n```\n\n----------------------------------------\n\nTITLE: Unsigned Integer and Color Conversion Functions in C\nDESCRIPTION: Functions for converting Python objects to unsigned 32-bit integers and RGBA color values.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/c_api/base.rst#2025-04-20_snippet_3\n\nLANGUAGE: c\nCODE:\n```\nint pg_UintFromObj(PyObject *obj, Uint32 *val);\nint pg_UintFromObjIndex(PyObject *obj, int _index, Uint32 *val);\nint pg_RGBAFromObj(PyObject *obj, Uint8 *RGBA);\n```\n\n----------------------------------------\n\nTITLE: Creating and Manipulating 2D NumPy Arrays in Python\nDESCRIPTION: Shows how to create 2D NumPy arrays from tuples and perform indexing and slicing operations on 2D arrays.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/tut/SurfarrayIntro.rst#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> row1 = (1,2,3)                         #create a tuple of vals\n>>> row2 = (3,4,5)                         #another tuple\n>>> (row1,row2)                            #show as a 2D tuple\n((1, 2, 3), (3, 4, 5))\n>>> b = array((row1, row2))                #create a 2D array\n>>> b                                      #show the array\narray([[1, 2, 3],\n       [3, 4, 5]])\n>>> array(((1,2),(3,4),(5,6)))             #show a new 2D array\narray([[1, 2],\n       [3, 4],\n       [5, 6]])\n```\n\n----------------------------------------\n\nTITLE: Alpha Premultiplication of Colors in Pygame\nDESCRIPTION: The premul_alpha method returns a new Color where the RGB components have been multiplied by the alpha channel. This is useful when working with the BLEND_PREMULTIPLIED blending mode in pygame.Surface.blit().\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/es/referencias/color.rst#2025-04-20_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\npremul_alpha() -> Color\n```\n\n----------------------------------------\n\nTITLE: Checking if an object is a BufferProxy in C\nDESCRIPTION: Function to check if a Python object is a pygame.BufferProxy instance. Returns true for exact BufferProxy instances but false for BufferProxy subclass instances.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/c_api/bufferproxy.rst#2025-04-20_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nint pgBufproxy_Check(PyObject *x)\n```\n\n----------------------------------------\n\nTITLE: Creating a BufferProxy with Dictionary Interface\nDESCRIPTION: Shows how to create a BufferProxy instance directly from a Python dictionary that describes an object's buffer layout, including shape, type representation, data pointers, and optional callbacks.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/bufferproxy.rst#2025-04-20_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nBufferProxy({\n    \"shape\": tuple,      # The length of each array dimension\n    \"typestr\": string,   # Array element type specification (e.g., \"<u4\")\n    \"data\": tuple,      # Buffer start address and read-only flag\n    \"strides\": tuple,   # (optional) Array stride information\n    \"parent\": object,   # (optional) The exporting object\n    \"before\": callable, # (optional) Callback before buffer export\n    \"after\": callable   # (optional) Callback after buffer release\n})\n```\n\n----------------------------------------\n\nTITLE: Indexing and Slicing 2D NumPy Arrays in Python\nDESCRIPTION: Demonstrates various ways to index and slice 2D NumPy arrays, including selecting specific elements, rows, columns, and subarrays.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/tut/SurfarrayIntro.rst#2025-04-20_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> b                                      #show our array from above\narray([[1, 2, 3],\n       [3, 4, 5]])\n>>> b[0,1]                                 #index a single value\n2\n>>> b[1,:]                                 #slice second row\narray([3, 4, 5])\n>>> b[1]                                   #slice second row (same as above)\narray([3, 4, 5])\n>>> b[:,2]                                 #slice last column\narray([3, 5])\n>>> b[:,:2]                                #slice into a 2x2 array\narray([[1, 2],\n       [3, 4]])\n```\n\n----------------------------------------\n\nTITLE: Setting Default MIDI Device Using Environment Variables\nDESCRIPTION: Shows how to set the default MIDI input or output device using environment variables on a PC.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/midi.rst#2025-04-20_snippet_4\n\nLANGUAGE: Batch\nCODE:\n```\nset PM_RECOMMENDED_INPUT_DEVICE=1\nor\nset PM_RECOMMENDED_OUTPUT_DEVICE=1\n```\n\n----------------------------------------\n\nTITLE: Writing to BufferProxy\nDESCRIPTION: Demonstrates how to write raw bytes to the underlying buffer of the parent object at an optional offset position.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/bufferproxy.rst#2025-04-20_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nwrite(buffer, offset=0)\n```\n\n----------------------------------------\n\nTITLE: Referencing Pixels in 3D Array in Python using Pygame\nDESCRIPTION: This function creates a new 3D array directly referencing pixel values in a Surface. Changes to the array affect the Surface pixels. It only works on 24-bit or 32-bit Surfaces. The Surface remains locked for the array's lifetime.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/surfarray.rst#2025-04-20_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\npixels3d(Surface) -> array\n```\n\n----------------------------------------\n\nTITLE: Getting Smoothscale Backend in Pygame\nDESCRIPTION: Returns the smoothscale filter version in use: 'GENERIC', 'MMX', or 'SSE'. Used for testing and debugging.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/transform.rst#2025-04-20_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\nget_smoothscale_backend() -> string\n```\n\n----------------------------------------\n\nTITLE: Font Type Checking\nDESCRIPTION: Macro to verify if a PyObject is a pygame.freetype.Font instance. Does not check for NULL and won't return true for Font subclasses.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/c_api/freetype.rst#2025-04-20_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nint pgFont_Check(PyObject *x)\n```\n\n----------------------------------------\n\nTITLE: Accessing BufferProxy Parent Object\nDESCRIPTION: Shows how to retrieve the object that created or is wrapped by the BufferProxy, such as a Surface object.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/bufferproxy.rst#2025-04-20_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nparent -> Surface\nparent -> <parent>\n```\n\n----------------------------------------\n\nTITLE: Setting Clipping Area in Pygame Surface\nDESCRIPTION: Sets the current clipping area of the Surface. This rectangle represents the only pixels on the Surface that can be modified. Passing None allows changes to the full Surface.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/surface.rst#2025-04-20_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nset_clip(rect) -> None\nset_clip(None) -> None\n```\n\n----------------------------------------\n\nTITLE: Initializing Image in Pygame SDL2\nDESCRIPTION: Creates an Image object, which is an easy way to use a portion of a Texture without constantly specifying source rectangles. It can be initialized from a Texture or another Image.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/sdl2_video.rst#2025-04-20_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nImage(textureOrImage, srcrect=None) -> Image\n```\n\n----------------------------------------\n\nTITLE: Getting All Events\nDESCRIPTION: Retrieves and removes all events from the queue, returning them as a list.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/fastevent.rst#2025-04-20_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nget() -> list of Events\n```\n\n----------------------------------------\n\nTITLE: Extracting Red Channel\nDESCRIPTION: Creates a red-only image by zeroing out green and blue channels in RGB array.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/tut/SurfarrayIntro.rst#2025-04-20_snippet_13\n\nLANGUAGE: Python\nCODE:\n```\nredimg = N.array(rgbarray)\nredimg[:,:,1:] = 0\nsurfdemo_show(redimg, 'redimg')\n```\n\n----------------------------------------\n\nTITLE: Copying Pixels to 3D Array in Python using Pygame\nDESCRIPTION: This function copies pixels from a Surface into a 3D array. The surface's bit depth controls the integer values' size. It works for any pixel format and temporarily locks the Surface during copying.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/surfarray.rst#2025-04-20_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\narray3d(Surface) -> array\n```\n\n----------------------------------------\n\nTITLE: Accessing Font Resolution\nDESCRIPTION: Read-only property that returns the pixel resolution (in DPI) used for scaling font glyphs.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/freetype.rst#2025-04-20_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nresolution -> int\n```\n\n----------------------------------------\n\nTITLE: Video Info Type Access\nDESCRIPTION: Macro to access the SDL_VideoInfo field from a pgVidInfo_Type instance. Does not perform NULL or type checking.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/c_api/display.rst#2025-04-20_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nSDL_VideoInfo pgVidInfo_AsVidInfo(PyObject *obj)\n```\n\n----------------------------------------\n\nTITLE: Specifying Required Dependencies for Pygame in Conan\nDESCRIPTION: Lists all the external libraries required to build Pygame, including PNG support, compression, font rendering, and SDL2 components.\nSOURCE: https://github.com/pygame/pygame/blob/main/buildconfig/conanconf/conanfile.txt#2025-04-20_snippet_0\n\nLANGUAGE: conan\nCODE:\n```\n[requires]\nlibpng/1.6.37\nzlib/1.2.11\nfreetype/2.10.1\nsdl2/2.0.14@pygame/testing\nsdl2_image/2.0.5@bincrafters/stable\nsdl2_mixer/2.0.4@bincrafters/stable\nsdl2_ttf/2.0.15@bincrafters/stable\nportmidi/217@demo/testing\n```\n\n----------------------------------------\n\nTITLE: Modifying NumPy Arrays and Creating Copies in Python\nDESCRIPTION: Demonstrates how to modify NumPy arrays through slicing and the difference between modifying a slice and creating a copy of an array.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/tut/SurfarrayIntro.rst#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> a                                      #show our starting array\narray([1, 2, 3, 4, 5])\n>>> aa = a[1:3]                            #slice middle 2 elements\n>>> aa                                     #show the slice\narray([2, 3])\n>>> aa[1] = 13                             #chance value in slice\n>>> a                                      #show change in original\narray([ 1, 2, 13,  4,  5])\n>>> aaa = array(a)                         #make copy of array\n>>> aaa                                    #show copy\narray([ 1, 2, 13,  4,  5])\n>>> aaa[1:4] = 0                           #set middle values to 0\n>>> aaa                                    #show copy\narray([1, 0, 0, 0, 5])\n>>> a                                      #show original again\narray([ 1, 2, 13,  4,  5])\n```\n\n----------------------------------------\n\nTITLE: Getting Font Ascent in Pygame\nDESCRIPTION: The get_ascent method returns the height in pixels from the font baseline to the top of the font.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/font.rst#2025-04-20_snippet_14\n\nLANGUAGE: Python\nCODE:\n```\nFont.get_ascent() -> int\n```\n\n----------------------------------------\n\nTITLE: Building Pygame Wheels for Linux\nDESCRIPTION: Commands to build Pygame wheels for different architectures using the Docker base images. The resulting wheels will be placed in the 'wheelhouse' directory.\nSOURCE: https://github.com/pygame/pygame/blob/main/buildconfig/manylinux-build/README.rst#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake wheels-x64  # 64 bit, or\nmake wheels-x86  # 32 bit, or\nmake wheels      # both\n```\n\n----------------------------------------\n\nTITLE: Importing NumPy and Pygame Surfarray in Python\nDESCRIPTION: Shows how to safely import NumPy and the pygame surfarray module, with error handling for missing dependencies.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/tut/SurfarrayIntro.rst#2025-04-20_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ntry:\n    import numpy as N\n    import pygame.surfarray as surfarray\nexcept ImportError:\n    raise ImportError, \"NumPy and Surfarray are required.\"\n```\n\n----------------------------------------\n\nTITLE: Writing Raw Bytes to BufferProxy Object in Python\nDESCRIPTION: Overwrites bytes in the parent object. The data must be C or F contiguous. Takes a buffer argument as a str/bytes object and an optional offset for the starting position.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/es/referencias/bufferproxy.rst#2025-04-20_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nwrite(buffer, offset=0)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Color Losses Information in Pygame Surface\nDESCRIPTION: Method that returns the least significant number of bits stripped from each color in a mapped integer. This information is typically not needed for normal Pygame usage.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/surface.rst#2025-04-20_snippet_36\n\nLANGUAGE: python\nCODE:\n```\nget_losses() -> (R, G, B, A)\n```\n\n----------------------------------------\n\nTITLE: Creating Buffer View of Surface Pixels in Pygame\nDESCRIPTION: Method that returns a buffer view of the Surface's pixels, providing access through C level arrays, Python arrays, or buffer interfaces. The kind parameter determines the format of the returned view.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/surface.rst#2025-04-20_snippet_38\n\nLANGUAGE: python\nCODE:\n```\nget_view(<kind>='2') -> BufferProxy\n```\n\n----------------------------------------\n\nTITLE: Loading Extended Format Images in Pygame\nDESCRIPTION: Loads images from extended formats when Pygame is built with extended image support. Available since v2.0.1 but raises NotImplementedError if extended formats are not supported.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/image.rst#2025-04-20_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nload_extended(filename) -> Surface\nload_extended(fileobj, namehint=\"\") -> Surface\n```\n\n----------------------------------------\n\nTITLE: Pygame Test Runner Keyword Arguments\nDESCRIPTION: Lists all available keyword arguments for the test runner function, including options for incomplete tests, subprocess handling, output control, and test execution parameters.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/tests.rst#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nincomplete - fail incomplete tests (default False)\nnosubprocess - run all test suites in the current process\n             (default False, use separate subprocesses)\ndump - dump failures/errors as dict ready to eval (default False)\nfile - if provided, the name of a file into which to dump failures/errors\ntimings - if provided, the number of times to run each individual test to\n        get an average run time (default is run each test once)\nexclude - A list of TAG names to exclude from the run\nshow_output - show silenced stderr/stdout on errors (default False)\nall - dump all results, not just errors (default False)\nrandomize - randomize order of tests (default False)\nseed - if provided, a seed randomizer integer\nmulti_thread - if provided, the number of THREADS in which to run\n             subprocessed tests\ntime_out - if subprocess is True then the time limit in seconds before\n         killing a test (default 30)\nfake - if provided, the name of the fake tests package in the\n     run_tests__tests subpackage to run instead of the normal\n     pygame tests\npython - the path to a python executable to run subprocessed tests\n       (default sys.executable)\n```\n\n----------------------------------------\n\nTITLE: Font Status Check\nDESCRIPTION: Macro to check if a Font object represents an open font file. Does not perform NULL checks or type verification.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/c_api/freetype.rst#2025-04-20_snippet_3\n\nLANGUAGE: c\nCODE:\n```\nint pgFont_IS_ALIVE(PyObject *o)\n```\n\n----------------------------------------\n\nTITLE: Pygame Camera Backends Table\nDESCRIPTION: Table describing the various backends supported by the pygame.camera module, including their OS compatibility and capabilities, particularly regarding camera enumeration.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/camera.rst#2025-04-20_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nBackend           OS        Description\n---------------------------------------------------------------------------------\n_camera (MSMF)    Windows   Builtin, works on Windows 8+ Python3\n_camera (V4L2)    Linux     Builtin\nOpenCV            Any       Uses `opencv-python` module, can't enumerate cameras\nOpenCV-Mac        Mac       Same as OpenCV, but has camera enumeration\nVideoCapture      Windows   Uses abandoned `VideoCapture` module, can't enumerate\n                            cameras, may be removed in the future\n```\n\n----------------------------------------\n\nTITLE: Generating Pygame Documentation Locally\nDESCRIPTION: Command to generate local documentation files for Pygame. This creates documentation HTML files in the docs/generated directory.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/README.md#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\npython setup.py docs\n```\n\n----------------------------------------\n\nTITLE: Mask Offset Diagram - ASCII Art\nDESCRIPTION: ASCII diagram illustrating the offset parameter usage in mask operations like overlap, draw, and convolve.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/mask.rst#2025-04-20_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n             0 to x (x_offset)\n             :    :\n     0 ..... +----:---------+\n     to      |    :         |\n     y .......... +-----------+\n  (y_offset) |    | othermask |\n             |    +-----------+\n             | calling_mask |\n             +--------------+\n```\n\n----------------------------------------\n\nTITLE: Setting Smoothscale Backend in Pygame\nDESCRIPTION: Sets the smoothscale acceleration to 'GENERIC', 'MMX', or 'SSE'. Used for testing and debugging.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/transform.rst#2025-04-20_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\nset_smoothscale_backend(backend) -> None\n```\n\n----------------------------------------\n\nTITLE: Encoding Python Strings in C for Pygame\nDESCRIPTION: Function that converts a Python string object to an encoded byte string with specified encoding and error handling. Similar to PyUnicode_AsEncodedString but with custom exception handling.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/c_api/rwobject.rst#2025-04-20_snippet_5\n\nLANGUAGE: c\nCODE:\n```\nPyObject* pg_EncodeString(PyObject *obj, const char *encoding, const char *errors, PyObject *eclass)\n```\n\n----------------------------------------\n\nTITLE: Documenting Color Usage in Pygame\nDESCRIPTION: This reStructuredText snippet provides documentation on how to use named colors when creating a new pygame.Color object. It references the colordict module and includes role definitions for some color names.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/color_list.rst#2025-04-20_snippet_7\n\nLANGUAGE: reStructuredText\nCODE:\n```\n:doc:`color` lets you specify any of these named colors when creating a new\n``pygame.Color`` (taken from the\n`colordict module <https://github.com/pygame/pygame/blob/main/src_py/colordict.py>`_).\n\n.. role:: aliceblue\n.. role:: antiquewhite\n.. role:: antiquewhite1\n.. role:: antiquewhite2\n.. role:: antiquewhite3\n.. role:: antiquewhite4\n.. role:: aqua\n.. role:: aquamarine\n```\n\n----------------------------------------\n\nTITLE: Launching Locally Generated Pygame Documentation\nDESCRIPTION: Command to launch the locally generated documentation using the built-in module. This runs the __main__.py in the docs directory.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/README.md#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\npython -m docs\n```\n\n----------------------------------------\n\nTITLE: Triggering buffer view creation in C\nDESCRIPTION: Function to cause a buffer proxy object to create a pg_buffer view of its parent. The obj argument must not be NULL. Returns 0 on success, -1 on failure with a Python error raised.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/c_api/bufferproxy.rst#2025-04-20_snippet_3\n\nLANGUAGE: c\nCODE:\n```\nint pgBufproxy_Trip(PyObject *obj)\n```\n\n----------------------------------------\n\nTITLE: Acquiring Buffer Object for Direct Pixel Manipulation in Pygame\nDESCRIPTION: Method that returns a buffer object for direct pixel access and manipulation. This implicitly locks the Surface, and the lock is released when the returned BufferProxy object is garbage collected.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/surface.rst#2025-04-20_snippet_39\n\nLANGUAGE: python\nCODE:\n```\nget_buffer() -> BufferProxy\n```\n\n----------------------------------------\n\nTITLE: Cross-Fade Between Images\nDESCRIPTION: Performs a 50% cross-fade between the original image and a solid blue color using array arithmetic.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/tut/SurfarrayIntro.rst#2025-04-20_snippet_15\n\nLANGUAGE: Python\nCODE:\n```\nsrc = N.array(rgbarray)\ndest = N.zeros(rgbarray.shape)\ndest[:] = 20, 50, 100\ndiff = (dest - src) * 0.50\nxfade = src + diff.astype(N.uint)\nsurfdemo_show(xfade, 'xfade')\n```\n\n----------------------------------------\n\nTITLE: Pygame Test Runner Return Value\nDESCRIPTION: Describes the return value format of the test runner function, which includes test count and error information.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/tests.rst#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nA tuple of total number of tests run, dictionary of error information.\nThe dictionary is empty if no errors were recorded.\n```\n\n----------------------------------------\n\nTITLE: Accessing pygame.mixer.Sound Type and Creating Sound Objects in C\nDESCRIPTION: Functions and type definitions for working with pygame.mixer.Sound objects in C. Includes the Sound object structure, type object pointer, and functions to create and validate Sound objects and access their underlying Mix_Chunk data.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/c_api/mixer.rst#2025-04-20_snippet_0\n\nLANGUAGE: c\nCODE:\n```\ntypedef pgSoundObject\n\nPyTypeObject *pgSound_Type\n\nPyObject* pgSound_New(Mix_Chunk *chunk)\n\nint pgSound_Check(PyObject *obj)\n\nMix_Chunk* pgSound_AsChunk(PyObject *x)\n```\n\n----------------------------------------\n\nTITLE: Configuring Dynamic Library Imports for Pygame\nDESCRIPTION: Defines rules for copying compiled dynamic libraries to the correct locations. Windows DLLs and macOS dylib files are copied to the project root for proper runtime linking.\nSOURCE: https://github.com/pygame/pygame/blob/main/buildconfig/conanconf/conanfile.txt#2025-04-20_snippet_3\n\nLANGUAGE: conan\nCODE:\n```\n[imports]\nbin, *.dll -> ./\nlib, *.dylib* -> ./\n```\n\n----------------------------------------\n\nTITLE: Force Full Regeneration of Pygame Documentation\nDESCRIPTION: Command to force full regeneration of documentation regardless of Sphinx's determination. Useful when editing theme CSS files or making other template changes.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/README.md#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndocs --fullgeneration\n```\n\nLANGUAGE: python\nCODE:\n```\ndocs --f\n```\n\n----------------------------------------\n\nTITLE: Setting Script for Text Shaping in Pygame\nDESCRIPTION: The set_script method sets the script used by harfbuzz text shaping. It takes a 4-character script code as input.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/font.rst#2025-04-20_snippet_16\n\nLANGUAGE: Python\nCODE:\n```\nFont.set_script(str) -> None\n```\n\n----------------------------------------\n\nTITLE: Creating New Pygame Rect with Coordinates and Dimensions\nDESCRIPTION: Function that creates a new pygame.Rect Python object with specified position (x, y) and size (w, h). Returns NULL and raises a Python exception on failure.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/c_api/rect.rst#2025-04-20_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nPyObject* pgRect_New4(int x, int y, int w, int h)\n```\n\n----------------------------------------\n\nTITLE: Implementing Keyboard Input for Movement in Pygame\nDESCRIPTION: This code snippet demonstrates how to handle keyboard input in Pygame to control the movement of a text object. It uses the KEYDOWN event to detect arrow key presses and updates the object's position accordingly.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/tut/en/Red_or_Black/4.Control_text/Basic INPUT.rst#2025-04-20_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport pygame, sys\nfrom pygame.locals import*\n\nwhite = (255,255,255)\nred = (255,0,0)\ngreen = (0,255,0)\npygame.init()\npygame.display.set_caption(\"Controlling World Project\") \nmyScreen = pygame.display.set_mode((640, 480))\nmyTextFont = pygame.font.Font(\"HoonWhitecatR.ttf\", 32)\nmyText = myTextFont.render(\"Controlling World!\", True, red, green) \nmyTextArea = myText.get_rect()\nmyTextArea.center = (320, 240)\nfpsClock = pygame.time.Clock()\nx = 0\ny = 0\nmoveRight = 0 #1\nmoveDown = 0 #2\n\nwhile True:\n    moveRight = 0 #3\n    moveDown = 0 #4\n    myTextArea.center = (320 + x, 240 + y)\n    myScreen.fill(white)\n    myScreen.blit(myText, myTextArea)\n\n    for event in pygame.event.get():\n        if event.type == QUIT:\n            pygame.quit()\n            sys.exit()\n        elif event.type == KEYDOWN: #5\n            if event.key == K_UP:\n                moveDown = -1\n                moveRight = 0\n            elif event.key == K_LEFT:\n                moveDown = 0\n                moveRight = -1\n            elif event.key == K_DOWN:\n                moveDown = 1\n                moveRight = 0\n            elif event.key == K_RIGHT:\n                moveDown = 0\n                moveRight = 1\n            \n    if(moveRight == 1): #6\n        x = x + 10\n    elif(moveRight == -1): #7\n        x = x - 10\n    if(moveDown == 1): #8\n        y = y + 10\n    elif(moveDown == -1): #9\n        y = y - 10\n\n    pygame.display.update()\n```\n\n----------------------------------------\n\nTITLE: Adding Docker Repository and Installing Docker CE\nDESCRIPTION: Commands to add the Docker repository and install Docker CE on the Ubuntu VM. This includes adding the GPG key, updating package information, and installing Docker CE.\nSOURCE: https://github.com/pygame/pygame/blob/main/buildconfig/manylinux-build/README.rst#2025-04-20_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncurl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -\n\nsudo apt-get update\n\nsudo add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\"\n\nsudo apt-get install docker-ce\n\n# check that it runs.\nsudo docker run hello-world\n```\n\n----------------------------------------\n\nTITLE: Checking if Object is a Pygame Rect\nDESCRIPTION: A macro that checks if a Python object is an instance of the pygame.Rect type. Used for type validation in C code interfacing with Python.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/c_api/rect.rst#2025-04-20_snippet_5\n\nLANGUAGE: c\nCODE:\n```\nint pgRect_Check(PyObject *obj)\n```\n\n----------------------------------------\n\nTITLE: Initializing BufferProxy Object in Python\nDESCRIPTION: Creates a BufferProxy object to export a surface buffer through an array protocol. It can be created from a parent object or a Python dict describing the buffer layout.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/es/referencias/bufferproxy.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nBufferProxy(<parent>) -> BufferProxy\n```\n\n----------------------------------------\n\nTITLE: Main Game Loop and Event Handling\nDESCRIPTION: Implements the main game loop, handling user input events, updating the game state, and rendering the game elements. It includes logic for generating the board, updating HP, and processing player choices.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/tut/en/Red_or_Black/7.Game_board/Advanced OUTPUT and plus alpha.rst#2025-04-20_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\ndef main():\n    HP = 5\n    board, b_red, b_black = generateBoard(5,5) #1\n    \n    while True:\n        myText = myTextFont.render((str(HP) + \"/\" + str(maxHP)), True, red, gray)\n    \n        myScreen.fill(gray)\n\n        myScreen.blit(myText, myTextArea)\n        drawHP(HP)\n        drawButtons()\n        drawBoard(board) #2\n\n        for event in pygame.event.get():\n            if event.type == QUIT:\n                pygame.quit()\n                sys.exit()\n                \n            elif event.type == KEYDOWN:\n                if event.key == K_UP:\n                    if HP != 10:\n                        HP = HP + 1\n                elif event.key == K_DOWN:\n                    if HP != 0:\n                        HP = HP - 1\n            elif event.type == MOUSEBUTTONUP:\n                x, y = event.pos\n                \n                if pygame.Rect(270, 425, 45, 45).collidepoint(x, y): #3\n                    if b_red >= b_black:\n                        if HP != 10:\n                            HP = HP + 1\n                        board, b_red, b_black = generateBoard(5,5)\n                    elif b_red < b_black:\n                        if HP != 0:\n                            HP = HP - 1\n                        board, b_red, b_black = generateBoard(5,5)\n                        \n                elif pygame.Rect(325, 425, 45, 45).collidepoint(x, y): #4\n                    if b_red <= b_black:\n                        if HP != 10:\n                            HP = HP + 1\n                        board, b_red, b_black = generateBoard(5,5)\n                    elif b_red > b_black:\n                        if HP != 0:\n                            HP = HP - 1\n                        board, b_red, b_black = generateBoard(5,5)\n    \n        pygame.display.update()\n        fpsClock.tick(60)\n```\n\n----------------------------------------\n\nTITLE: Accessing Parent Object of BufferProxy in Python\nDESCRIPTION: Returns the wrapped exporting object, which is either the Surface class that returned the BufferProxy object or the object passed to a BufferProxy call.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/es/referencias/bufferproxy.rst#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nparent -> Surface\nparent -> <parent>\n```\n\n----------------------------------------\n\nTITLE: Creating New Pygame Color Object in C\nDESCRIPTION: Function to create a new pygame.Color instance from an RGBA array. It returns a new Color object or NULL on failure, raising a Python exception.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/c_api/color.rst#2025-04-20_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nPyObject* pgColor_New(Uint8 rgba[])\n```\n\n----------------------------------------\n\nTITLE: Finding Example File Locations in Python Interpreter\nDESCRIPTION: Shows how to locate the installed pygame example files by importing an example module and checking its __file__ attribute in the Python interpreter.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/examples.rst#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> import pygame.examples.scaletest\n>>> pygame.examples.scaletest.__file__\n'/usr/lib/python2.6/site-packages/pygame/examples/scaletest.py'\n```\n\n----------------------------------------\n\nTITLE: Creating New Pygame Rect from SDL_Rect\nDESCRIPTION: Function that creates a new pygame.Rect Python object from an existing SDL_Rect structure. Returns NULL and raises a Python exception on failure.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/c_api/rect.rst#2025-04-20_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nPyObject* pgRect_New(SDL_Rect *r)\n```\n\n----------------------------------------\n\nTITLE: Lerp Usage Example - Python\nDESCRIPTION: Demonstrates using linear interpolation (lerp) to scale enemy attack values based on game level progression.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/math.rst#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nFINAL_LEVEL = 10\ncurrent_level = 2\n\nattack = lerp(10, 50, current_level/MAX_LEVEL) # 18\n```\n\n----------------------------------------\n\nTITLE: Importing the pygame.freetype module in Python\nDESCRIPTION: Basic code to import the pygame module and the pygame.freetype submodule. The freetype module is not imported automatically when pygame is loaded and must be imported explicitly.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/freetype.rst#2025-04-20_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport pygame\nimport pygame.freetype\n```\n\n----------------------------------------\n\nTITLE: SDL Module Management Functions in C\nDESCRIPTION: Core functions for initializing and quitting pygame modules, and registering quit callbacks.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/c_api/base.rst#2025-04-20_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nint pg_mod_autoinit(const char* modname);\nvoid pg_mod_autoquit(const char* modname);\nvoid pg_RegisterQuit(void (*f)(void));\n```\n\n----------------------------------------\n\nTITLE: Getting Length of Exported Buffer in Python\nDESCRIPTION: Returns the size in bytes of the exported buffer, excluding any gaps in discontinuous data.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/es/referencias/bufferproxy.rst#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nlength -> int\n```\n\n----------------------------------------\n\nTITLE: Event Type Check Macro in C\nDESCRIPTION: Macro function to verify if a PyObject is a pygame event instance. Does not validate for NULL and returns false for event subclasses.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/c_api/event.rst#2025-04-20_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nint pgEvent_Check(PyObject *x)\n```\n\n----------------------------------------\n\nTITLE: Defining Named Colors with CSS Styles\nDESCRIPTION: CSS style definitions for named colors with both background-color and text color set to the same hex value for visual representation. Each color includes variations numbered 1-4 for different shades where applicable.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/es/color_list.rst#2025-04-20_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<style>\n.aliceblue {background-color: #f0f8ff; color: #f0f8ff;}\n.antiquewhite {background-color: #faebd7; color: #faebd7;}\n.antiquewhite1 {background-color: #ffefdb; color: #ffefdb;}\n.antiquewhite2 {background-color: #eedfcc; color: #eedfcc;}\n.antiquewhite3 {background-color: #cdc0b0; color: #cdc0b0;}\n.antiquewhite4 {background-color: #8b8378; color: #8b8378;}\n/* Additional color definitions follow same pattern */</style>\n```\n\n----------------------------------------\n\nTITLE: Importing Pygame base module in C\nDESCRIPTION: Code required in other modules to import the Pygame base module, which is necessary to access functions like pg_RGBAFromObj that are exposed through the c_api structure.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/c_api/slots.rst#2025-04-20_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nimport_pygame_base();\n```\n\n----------------------------------------\n\nTITLE: Creating SDL_RWops from Python File Objects in C for Pygame\nDESCRIPTION: Function that creates an SDL_RWops struct specifically from a Python file-like object, using its read/write/seek/tell/close methods. Acquires the Python GIL when threads are available.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/c_api/rwobject.rst#2025-04-20_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nSDL_RWops* pgRWops_FromFileObject(PyObject *obj)\n```\n\n----------------------------------------\n\nTITLE: Pygame Test Runner Function Arguments\nDESCRIPTION: Shows the various arguments and options available for the test runner, including test names and keyword parameters for controlling test execution.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/tests.rst#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nThe names of tests to include. If omitted then all tests are run. Test names\nneed not include the trailing '_test'.\n```\n\n----------------------------------------\n\nTITLE: Importing Test Utils in PyGame Tests\nDESCRIPTION: Required import statements for creating new test modules in PyGame. The test_utils import must come first to properly set the sys.path.\nSOURCE: https://github.com/pygame/pygame/blob/main/test/README.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport test_utils\nimport test.unittest as unittest\n```\n\n----------------------------------------\n\nTITLE: Video Info Type Check\nDESCRIPTION: Macro to verify if an object is a pgVidInfo_Type instance. Does not check for NULL and returns false for subclasses.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/c_api/display.rst#2025-04-20_snippet_3\n\nLANGUAGE: c\nCODE:\n```\nint pgVidInfo_Check(PyObject *x)\n```\n\n----------------------------------------\n\nTITLE: Defining CSS Color Classes for Pygame\nDESCRIPTION: This CSS snippet defines classes for various colors and their shades, setting both background-color and color properties. It covers a wide range of colors from orange to yellowgreen, including multiple variations for many colors.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/color_list.rst#2025-04-20_snippet_6\n\nLANGUAGE: CSS\nCODE:\n```\n.orange1 {background-color: #ffa500; color: #ffa500;}\n.orange2 {background-color: #ee9a00; color: #ee9a00;}\n.orange3 {background-color: #cd8500; color: #cd8500;}\n.orange4 {background-color: #8b5a00; color: #8b5a00;}\n.orangered {background-color: #ff4500; color: #ff4500;}\n.orangered1 {background-color: #ff4500; color: #ff4500;}\n.orangered2 {background-color: #ee4000; color: #ee4000;}\n.orangered3 {background-color: #cd3700; color: #cd3700;}\n.orangered4 {background-color: #8b2500; color: #8b2500;}\n/* ... (truncated for brevity) ... */\n.yellow4 {background-color: #8b8b00; color: #8b8b00;}\n.yellowgreen {background-color: #9acd32; color: #9acd32;}\n```\n\n----------------------------------------\n\nTITLE: Event Object Structure Definition in C\nDESCRIPTION: C structure definition for the pygame event object (EventType) containing the event type code.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/c_api/event.rst#2025-04-20_snippet_0\n\nLANGUAGE: c\nCODE:\n```\ntypedef struct {\n    int type;\n} pgEventObject;\n```\n\n----------------------------------------\n\nTITLE: Putting Data into Clipboard using Pygame Scrap\nDESCRIPTION: Demonstrates how to use pygame.scrap.put() to place different types of data (image and text) into the clipboard for other applications to access.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/scrap.rst#2025-04-20_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nwith open(\"example.bmp\", \"rb\") as fp:\n    pygame.scrap.put(pygame.SCRAP_BMP, fp.read())\n# The image data is now on the clipboard for other applications to access\n# it.\npygame.scrap.put(pygame.SCRAP_TEXT, b\"A text to copy\")\npygame.scrap.put(\"Plain text\", b\"Data for user defined type 'Plain text'\")\n```\n\n----------------------------------------\n\nTITLE: Retrieving Palette Color in Pygame Surface\nDESCRIPTION: Returns the RGB color values for a single index in a Surface palette. The index should be a value from 0 to 255. As of version 1.9, it returns a Color instance with length 3 instead of a tuple.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/surface.rst#2025-04-20_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nget_palette_at(index) -> RGB\n```\n\n----------------------------------------\n\nTITLE: Font Creation Function\nDESCRIPTION: Function to create a new Font instance from a font file. Takes a filename and font index as parameters, returns a new Font object or NULL on error.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/c_api/freetype.rst#2025-04-20_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nPyObject* pgFont_New(const char *filename, long font_index)\n```\n\n----------------------------------------\n\nTITLE: Getting Track Start Time\nDESCRIPTION: Method to get the absolute start time in seconds for a specific track on the CD. Track numbers start at zero.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/cdrom.rst#2025-04-20_snippet_22\n\nLANGUAGE: Python\nCODE:\n```\nget_track_start(track) -> seconds\n```\n\n----------------------------------------\n\nTITLE: Accessing pygame.mixer.Channel Type and Creating Channel Objects in C\nDESCRIPTION: Functions and type definitions for working with pygame.mixer.Channel objects in C. Includes the Channel object structure, type object pointer, and functions to create and validate Channel objects and access their channel numbers.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/c_api/mixer.rst#2025-04-20_snippet_1\n\nLANGUAGE: c\nCODE:\n```\ntypedef pgChannelObject\n\nPyTypeObject *pgChannel_Type\n\nPyObject* pgChannel_New(int channelnum)\n\nint pgChannel_Check(PyObject *obj)\n\nint pgChannel_AsInt(PyObject *x)\n```\n\n----------------------------------------\n\nTITLE: Drawing HP Bar in Pygame\nDESCRIPTION: This function draws the HP bar on the screen. It uses rectangles to represent the current HP and maximum HP, with different colors to distinguish between them.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/tut/ko/빨간블록 검은블록/6.버튼들/심화 입력 그리고 심화 출력.rst#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef drawHP(HP):\n    r = int((height - 40) / maxHP)\n\n    pygame.draw.rect(myScreen, black, (20, 20, 20, 20 + ((maxHP - 0.5) * r)))\n\n    for i in range(maxHP):\n        if HP >= (maxHP - i):\n            pygame.draw.rect(myScreen, red, (20, 20 + (i * r), 20, r))\n        pygame.draw.rect(myScreen, white, (20, 20 + (i * r), 20, r), 1)\n\n    return\n```\n\n----------------------------------------\n\nTITLE: Font Type Structure Definition\nDESCRIPTION: C struct and type definitions for the pygame.freetype.Font class implementation.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/c_api/freetype.rst#2025-04-20_snippet_0\n\nLANGUAGE: c\nCODE:\n```\npgFontObject\npgFont_Type\n```\n\n----------------------------------------\n\nTITLE: RST Documentation Tree Structure for Pygame C API\nDESCRIPTION: Sphinx documentation tree configuration showing the structure of Pygame's C API documentation. Uses toctree directive to organize documentation into logical sections covering different Pygame components.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/c_api.rst#2025-04-20_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :maxdepth: 1\n   :glob:\n\n   c_api/slots.rst\n   c_api/base.rst\n   c_api/bufferproxy.rst\n   c_api/color.rst\n   c_api/display.rst\n   c_api/event.rst\n   c_api/freetype.rst\n   c_api/mixer.rst\n   c_api/rect.rst\n   c_api/rwobject.rst\n   c_api/surface.rst\n   c_api/surflock.rst\n   c_api/version.rst\n```\n\n----------------------------------------\n\nTITLE: Configuring UCS-4 Unicode Mode\nDESCRIPTION: Controls Unicode text decoding mode. When True, disables UTF-16 surrogate pair decoding and enables full UCS-4 character range access. Affects handling of Unicode characters between 0x10000 and 0x10FFFF.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/freetype.rst#2025-04-20_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nucs4 = True\n```\n\n----------------------------------------\n\nTITLE: Getting All Track Information\nDESCRIPTION: Method to get information for all tracks on the CD, including whether each track contains audio data and its start, end, and length times in seconds.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/cdrom.rst#2025-04-20_snippet_21\n\nLANGUAGE: Python\nCODE:\n```\nget_all() -> [(audio, start, end, length), ...]\n```\n\n----------------------------------------\n\nTITLE: Applying LGPL License Notice to Source Files\nDESCRIPTION: This code snippet demonstrates how to apply the LGPL license notice to source files of a library. It includes placeholders for the library name, copyright year, and author name. The notice informs users of their rights and obligations under the LGPL.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/LGPL.txt#2025-04-20_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n<one line to give the library's name and a brief idea of what it does.>\nCopyright (C) <year>  <name of author>\n\nThis library is free software; you can redistribute it and/or\nmodify it under the terms of the GNU Lesser General Public\nLicense as published by the Free Software Foundation; either\nversion 2.1 of the License, or (at your option) any later version.\n\nThis library is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\nLesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public\nLicense along with this library; if not, write to the Free Software\nFoundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n```\n\n----------------------------------------\n\nTITLE: Exporting function to c_api structure in C\nDESCRIPTION: Demonstrates how to expose a function (pg_RGBAFromObj) to the c_api structure in base.c, allowing other modules to access it.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/c_api/slots.rst#2025-04-20_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nc_api[12] = pg_RGBAFromObj;\n```\n\n----------------------------------------\n\nTITLE: Displaying Custom Cursors in Pygame\nDESCRIPTION: This function displays two different custom cursors: an arrow and a circle with a crossbar cursor.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/examples.rst#2025-04-20_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\ndef cursors.main() -> None:\n```\n\n----------------------------------------\n\nTITLE: Closing PixelArray and Releasing Surface Lock in Pygame\nDESCRIPTION: The close() method is used to explicitly close a PixelArray object and release the lock on the associated Surface. This method was introduced in Pygame version 1.9.4.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/pixelarray.rst#2025-04-20_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nclose() -> PixelArray\n```\n\n----------------------------------------\n\nTITLE: Setting SDL2 Library Options for Pygame\nDESCRIPTION: Configures all SDL2-related libraries to be built as shared libraries instead of static libraries, which is necessary for proper Pygame functionality.\nSOURCE: https://github.com/pygame/pygame/blob/main/buildconfig/conanconf/conanfile.txt#2025-04-20_snippet_2\n\nLANGUAGE: conan\nCODE:\n```\n[options]\nsdl2:shared=True\nsdl2_image:shared=True\nsdl2_mixer:shared=True\nsdl2_ttf:shared=True\n```\n\n----------------------------------------\n\nTITLE: Building Pygame Wheels in Docker Container\nDESCRIPTION: Commands to build Pygame wheels using the manylinux Docker containers. This uses prebuilt Docker images to speed up the build process.\nSOURCE: https://github.com/pygame/pygame/blob/main/buildconfig/manylinux-build/README.rst#2025-04-20_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncd /vagrant_pygame/buildconfig/manylinux-build\n\n# To make the base docker images and push them to docker hub do these commands.\n# Note, these have already been built, so only needed if rebuilding dependencies.\n# https://hub.docker.com/u/pygame/\n#make base-images\n#make push\n\n# We use the prebuilt docker images, which should be quicker.\nmake wheels\n\n# List the wheels we've built\nls -la wheelhouse\n```\n\n----------------------------------------\n\nTITLE: SDL Surface Extraction Macro in C\nDESCRIPTION: Macro to extract the underlying SDL_Surface pointer from a pygame Surface instance. Assumes input is a valid Surface or Surface subclass instance.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/c_api/surface.rst#2025-04-20_snippet_3\n\nLANGUAGE: c\nCODE:\n```\nSDL_Surface* pgSurface_AsSurface(PyObject *x)\n```\n\n----------------------------------------\n\nTITLE: Checking if CD Drive is Paused\nDESCRIPTION: Method to check if the CD drive is currently paused. Returns a boolean value.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/cdrom.rst#2025-04-20_snippet_16\n\nLANGUAGE: Python\nCODE:\n```\nget_paused() -> bool\n```\n\n----------------------------------------\n\nTITLE: Example of Poor Code Commenting in Python\nDESCRIPTION: Demonstrates an example of unnecessary commenting that should be avoided in game development, as it doesn't add value to understanding the code.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/tut/MakeGames.rst#2025-04-20_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nplayer1.score += scoreup        # Add scoreup to player1 score\n```\n\n----------------------------------------\n\nTITLE: Getting Surface Pitch in Pygame\nDESCRIPTION: Returns the number of bytes separating each row in the Surface. This value is not typically needed for normal Pygame usage.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/surface.rst#2025-04-20_snippet_31\n\nLANGUAGE: python\nCODE:\n```\nget_pitch() -> int\n```\n\n----------------------------------------\n\nTITLE: Defining Color Roles in reStructuredText for Pygame Documentation\nDESCRIPTION: This snippet defines custom roles for a wide range of colors and their variations. These roles can be used to apply color formatting to text in Pygame documentation. The colors include standard names, intensity variations, and specialized color names.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/es/color_list.rst#2025-04-20_snippet_4\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. role:: aquamarine1\n.. role:: aquamarine2\n.. role:: aquamarine3\n.. role:: aquamarine4\n.. role:: azure\n.. role:: azure1\n.. role:: azure2\n.. role:: azure3\n.. role:: azure4\n.. role:: beige\n.. role:: bisque\n.. role:: bisque1\n.. role:: bisque2\n.. role:: bisque3\n.. role:: bisque4\n.. role:: black\n.. role:: blanchedalmond\n.. role:: blue\n.. role:: blue1\n.. role:: blue2\n.. role:: blue3\n.. role:: blue4\n.. role:: blueviolet\n.. role:: brown\n.. role:: brown1\n.. role:: brown2\n.. role:: brown3\n.. role:: brown4\n.. role:: burlywood\n.. role:: burlywood1\n.. role:: burlywood2\n.. role:: burlywood3\n.. role:: burlywood4\n.. role:: cadetblue\n.. role:: cadetblue1\n.. role:: cadetblue2\n.. role:: cadetblue3\n.. role:: cadetblue4\n.. role:: chartreuse\n.. role:: chartreuse1\n.. role:: chartreuse2\n.. role:: chartreuse3\n.. role:: chartreuse4\n.. role:: chocolate\n.. role:: chocolate1\n.. role:: chocolate2\n.. role:: chocolate3\n.. role:: chocolate4\n.. role:: coral\n.. role:: coral1\n.. role:: coral2\n.. role:: coral3\n.. role:: coral4\n.. role:: cornflowerblue\n.. role:: cornsilk\n.. role:: cornsilk1\n.. role:: cornsilk2\n.. role:: cornsilk3\n.. role:: cornsilk4\n.. role:: crimson\n.. role:: cyan\n.. role:: cyan1\n.. role:: cyan2\n.. role:: cyan3\n.. role:: cyan4\n.. role:: darkblue\n.. role:: darkcyan\n.. role:: darkgoldenrod\n.. role:: darkgoldenrod1\n.. role:: darkgoldenrod2\n.. role:: darkgoldenrod3\n.. role:: darkgoldenrod4\n.. role:: darkgray\n.. role:: darkgreen\n.. role:: darkgrey\n.. role:: darkkhaki\n.. role:: darkmagenta\n.. role:: darkolivegreen\n.. role:: darkolivegreen1\n.. role:: darkolivegreen2\n.. role:: darkolivegreen3\n.. role:: darkolivegreen4\n.. role:: darkorange\n.. role:: darkorange1\n.. role:: darkorange2\n.. role:: darkorange3\n.. role:: darkorange4\n.. role:: darkorchid\n.. role:: darkorchid1\n.. role:: darkorchid2\n.. role:: darkorchid3\n.. role:: darkorchid4\n.. role:: darkred\n.. role:: darksalmon\n.. role:: darkseagreen\n.. role:: darkseagreen1\n.. role:: darkseagreen2\n.. role:: darkseagreen3\n.. role:: darkseagreen4\n.. role:: darkslateblue\n.. role:: darkslategray\n.. role:: darkslategray1\n.. role:: darkslategray2\n.. role:: darkslategray3\n.. role:: darkslategray4\n.. role:: darkslategrey\n.. role:: darkturquoise\n.. role:: darkviolet\n.. role:: deeppink\n.. role:: deeppink1\n.. role:: deeppink2\n.. role:: deeppink3\n.. role:: deeppink4\n.. role:: deepskyblue\n.. role:: deepskyblue1\n.. role:: deepskyblue2\n.. role:: deepskyblue3\n.. role:: deepskyblue4\n.. role:: dimgray\n.. role:: dimgrey\n.. role:: dodgerblue\n.. role:: dodgerblue1\n.. role:: dodgerblue2\n.. role:: dodgerblue3\n.. role:: dodgerblue4\n.. role:: firebrick\n.. role:: firebrick1\n.. role:: firebrick2\n.. role:: firebrick3\n.. role:: firebrick4\n.. role:: floralwhite\n.. role:: forestgreen\n.. role:: fuchsia\n.. role:: gainsboro\n.. role:: ghostwhite\n.. role:: gold\n.. role:: gold1\n.. role:: gold2\n.. role:: gold3\n.. role:: gold4\n.. role:: goldenrod\n.. role:: goldenrod1\n.. role:: goldenrod2\n.. role:: goldenrod3\n.. role:: goldenrod4\n.. role:: gray\n.. role:: gray0\n.. role:: gray1\n.. role:: gray2\n.. role:: gray3\n.. role:: gray4\n.. role:: gray5\n.. role:: gray6\n.. role:: gray7\n.. role:: gray8\n.. role:: gray9\n.. role:: gray10\n.. role:: gray11\n.. role:: gray12\n.. role:: gray13\n.. role:: gray14\n.. role:: gray15\n.. role:: gray16\n.. role:: gray17\n.. role:: gray18\n.. role:: gray19\n.. role:: gray20\n.. role:: gray21\n.. role:: gray22\n.. role:: gray23\n.. role:: gray24\n.. role:: gray25\n.. role:: gray26\n.. role:: gray27\n.. role:: gray28\n.. role:: gray29\n.. role:: gray30\n.. role:: gray31\n.. role:: gray32\n.. role:: gray33\n.. role:: gray34\n.. role:: gray35\n.. role:: gray36\n.. role:: gray37\n.. role:: gray38\n.. role:: gray39\n.. role:: gray40\n.. role:: gray41\n.. role:: gray42\n.. role:: gray43\n.. role:: gray44\n.. role:: gray45\n.. role:: gray46\n.. role:: gray47\n.. role:: gray48\n.. role:: gray49\n.. role:: gray50\n.. role:: gray51\n.. role:: gray52\n.. role:: gray53\n.. role:: gray54\n.. role:: gray55\n.. role:: gray56\n.. role:: gray57\n.. role:: gray58\n.. role:: gray59\n.. role:: gray60\n.. role:: gray61\n.. role:: gray62\n.. role:: gray63\n.. role:: gray64\n.. role:: gray65\n.. role:: gray66\n.. role:: gray67\n.. role:: gray68\n.. role:: gray69\n.. role:: gray70\n.. role:: gray71\n.. role:: gray72\n.. role:: gray73\n.. role:: gray74\n.. role:: gray75\n.. role:: gray76\n.. role:: gray77\n.. role:: gray78\n.. role:: gray79\n.. role:: gray80\n.. role:: gray81\n.. role:: gray82\n.. role:: gray83\n.. role:: gray84\n.. role:: gray85\n.. role:: gray86\n.. role:: gray87\n.. role:: gray88\n.. role:: gray89\n.. role:: gray90\n.. role:: gray91\n.. role:: gray92\n.. role:: gray93\n.. role:: gray94\n.. role:: gray95\n.. role:: gray96\n.. role:: gray97\n.. role:: gray98\n.. role:: gray99\n.. role:: gray100\n.. role:: green\n.. role:: green1\n.. role:: green2\n.. role:: green3\n.. role:: green4\n.. role:: greenyellow\n.. role:: grey\n.. role:: grey0\n.. role:: grey1\n.. role:: grey2\n.. role:: grey3\n.. role:: grey4\n.. role:: grey5\n.. role:: grey6\n.. role:: grey7\n.. role:: grey8\n.. role:: grey9\n.. role:: grey10\n.. role:: grey11\n.. role:: grey12\n.. role:: grey13\n.. role:: grey14\n.. role:: grey15\n.. role:: grey16\n.. role:: grey17\n.. role:: grey18\n.. role:: grey19\n.. role:: grey20\n.. role:: grey21\n.. role:: grey22\n.. role:: grey23\n.. role:: grey24\n.. role:: grey25\n.. role:: grey26\n.. role:: grey27\n.. role:: grey28\n.. role:: grey29\n.. role:: grey30\n.. role:: grey31\n.. role:: grey32\n.. role:: grey33\n.. role:: grey34\n.. role:: grey35\n.. role:: grey36\n.. role:: grey37\n.. role:: grey38\n.. role:: grey39\n.. role:: grey40\n.. role:: grey41\n.. role:: grey42\n.. role:: grey43\n.. role:: grey44\n.. role:: grey45\n.. role:: grey46\n.. role:: grey47\n.. role:: grey48\n.. role:: grey49\n.. role:: grey50\n.. role:: grey51\n.. role:: grey52\n.. role:: grey53\n.. role:: grey54\n.. role:: grey55\n.. role:: grey56\n.. role:: grey57\n.. role:: grey58\n.. role:: grey59\n.. role:: grey60\n.. role:: grey61\n.. role:: grey62\n.. role:: grey63\n.. role:: grey64\n.. role:: grey65\n.. role:: grey66\n.. role:: grey67\n.. role:: grey68\n.. role:: grey69\n.. role:: grey70\n.. role:: grey71\n.. role:: grey72\n.. role:: grey73\n.. role:: grey74\n.. role:: grey75\n.. role:: grey76\n.. role:: grey77\n.. role:: grey78\n.. role:: grey79\n.. role:: grey80\n.. role:: grey81\n.. role:: grey82\n.. role:: grey83\n.. role:: grey84\n.. role:: grey85\n.. role:: grey86\n.. role:: grey87\n.. role:: grey88\n.. role:: grey89\n.. role:: grey90\n.. role:: grey91\n.. role:: grey92\n.. role:: grey93\n.. role:: grey94\n.. role:: grey95\n.. role:: grey96\n.. role:: grey97\n.. role:: grey98\n.. role:: grey99\n.. role:: grey100\n.. role:: honeydew\n.. role:: honeydew1\n.. role:: honeydew2\n.. role:: honeydew3\n.. role:: honeydew4\n.. role:: hotpink\n.. role:: hotpink1\n.. role:: hotpink2\n.. role:: hotpink3\n.. role:: hotpink4\n.. role:: indianred\n.. role:: indianred1\n.. role:: indianred2\n.. role:: indianred3\n.. role:: indianred4\n.. role:: indigo\n.. role:: ivory\n.. role:: ivory1\n.. role:: ivory2\n.. role:: ivory3\n.. role:: ivory4\n.. role:: khaki\n.. role:: khaki1\n.. role:: khaki2\n.. role:: khaki3\n.. role:: khaki4\n.. role:: lavender\n.. role:: lavenderblush\n.. role:: lavenderblush1\n.. role:: lavenderblush2\n.. role:: lavenderblush3\n.. role:: lavenderblush4\n.. role:: lawngreen\n.. role:: lemonchiffon\n.. role:: lemonchiffon1\n.. role:: lemonchiffon2\n.. role:: lemonchiffon3\n.. role:: lemonchiffon4\n.. role:: lightblue\n.. role:: lightblue1\n.. role:: lightblue2\n.. role:: lightblue3\n.. role:: lightblue4\n.. role:: lightcoral\n.. role:: lightcyan\n.. role:: lightcyan1\n.. role:: lightcyan2\n.. role:: lightcyan3\n.. role:: lightcyan4\n.. role:: lightgoldenrod\n.. role:: lightgoldenrod1\n.. role:: lightgoldenrod2\n.. role:: lightgoldenrod3\n.. role:: lightgoldenrod4\n.. role:: lightgoldenrodyellow\n.. role:: lightgray\n.. role:: lightgreen\n.. role:: lightgrey\n.. role:: lightpink\n.. role:: lightpink1\n.. role:: lightpink2\n.. role:: lightpink3\n.. role:: lightpink4\n.. role:: lightsalmon\n.. role:: lightsalmon1\n.. role:: lightsalmon2\n.. role:: lightsalmon3\n.. role:: lightsalmon4\n.. role:: lightseagreen\n.. role:: lightskyblue\n.. role:: lightskyblue1\n.. role:: lightskyblue2\n.. role:: lightskyblue3\n.. role:: lightskyblue4\n.. role:: lightslateblue\n.. role:: lightslategray\n.. role:: lightslategrey\n.. role:: lightsteelblue\n.. role:: lightsteelblue1\n.. role:: lightsteelblue2\n.. role:: lightsteelblue3\n.. role:: lightsteelblue4\n.. role:: lightyellow\n.. role:: lightyellow1\n.. role:: lightyellow2\n.. role:: lightyellow3\n.. role:: lightyellow4\n.. role:: limegreen\n.. role:: lime\n.. role:: linen\n.. role:: magenta\n.. role:: magenta1\n.. role:: magenta2\n.. role:: magenta3\n.. role:: magenta4\n.. role:: maroon\n.. role:: maroon1\n.. role:: maroon2\n.. role:: maroon3\n.. role:: maroon4\n.. role:: mediumaquamarine\n.. role:: mediumblue\n.. role:: mediumorchid\n.. role:: mediumorchid1\n.. role:: mediumorchid2\n.. role:: mediumorchid3\n.. role:: mediumorchid4\n.. role:: mediumpurple\n.. role:: mediumpurple1\n.. role:: mediumpurple2\n.. role:: mediumpurple3\n.. role:: mediumpurple4\n.. role:: mediumseagreen\n.. role:: mediumslateblue\n.. role:: mediumspringgreen\n.. role:: mediumturquoise\n.. role:: mediumvioletred\n.. role:: midnightblue\n.. role:: mintcream\n.. role:: mistyrose\n.. role:: mistyrose1\n.. role:: mistyrose2\n.. role:: mistyrose3\n.. role:: mistyrose4\n.. role:: moccasin\n.. role:: navajowhite\n.. role:: navajowhite1\n.. role:: navajowhite2\n.. role:: navajowhite3\n.. role:: navajowhite4\n.. role:: navy\n.. role:: navyblue\n.. role:: oldlace\n.. role:: olive\n.. role:: olivedrab\n.. role:: olivedrab1\n.. role:: olivedrab2\n.. role:: olivedrab3\n.. role:: olivedrab4\n.. role:: orange\n.. role:: orange1\n.. role:: orange2\n.. role:: orange3\n.. role:: orange4\n.. role:: orangered\n.. role:: orangered1\n.. role:: orangered2\n.. role:: orangered3\n.. role:: orangered4\n.. role:: orchid\n.. role:: orchid1\n.. role:: orchid2\n.. role:: orchid3\n.. role:: orchid4\n.. role:: palegoldenrod\n.. role:: palegreen\n.. role:: palegreen1\n.. role:: palegreen2\n.. role:: palegreen3\n.. role:: palegreen4\n.. role:: paleturquoise\n.. role:: paleturquoise1\n.. role:: paleturquoise2\n```\n\n----------------------------------------\n\nTITLE: Individual Test Tagging Format\nDESCRIPTION: Example of how to tag individual test methods using the docstring format with the |Tags:| syntax.\nSOURCE: https://github.com/pygame/pygame/blob/main/test/README.rst#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef test_something__about_something(self):\n    \"\"\"\n    |Tags:interactive,some_other_tag|\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Checking if CD Drive is Playing\nDESCRIPTION: Method to check if the CD drive is currently playing audio. Returns a boolean value.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/cdrom.rst#2025-04-20_snippet_15\n\nLANGUAGE: Python\nCODE:\n```\nget_busy() -> bool\n```\n\n----------------------------------------\n\nTITLE: Ejecting CD\nDESCRIPTION: Method to open the CD drive and eject the CD. If the drive is playing or paused, it will be stopped.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/cdrom.rst#2025-04-20_snippet_12\n\nLANGUAGE: Python\nCODE:\n```\neject() -> None\n```\n\n----------------------------------------\n\nTITLE: Getting Surface Color Masks in Pygame\nDESCRIPTION: Returns the bitmasks used to isolate each color in a mapped integer. This value is not typically needed for normal Pygame usage.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/surface.rst#2025-04-20_snippet_32\n\nLANGUAGE: python\nCODE:\n```\nget_masks() -> (R, G, B, A)\n```\n\n----------------------------------------\n\nTITLE: Defining Grey Color Classes in CSS\nDESCRIPTION: This snippet defines CSS classes for shades of grey from 77% to 100%. Each class sets both the background-color and color properties to the same hex value.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/color_list.rst#2025-04-20_snippet_2\n\nLANGUAGE: CSS\nCODE:\n```\n.grey77 {background-color: #c4c4c4; color: #c4c4c4;}\n.grey78 {background-color: #c7c7c7; color: #c7c7c7;}\n.grey79 {background-color: #c9c9c9; color: #c9c9c9;}\n.grey80 {background-color: #cccccc; color: #cccccc;}\n.grey81 {background-color: #cfcfcf; color: #cfcfcf;}\n.grey82 {background-color: #d1d1d1; color: #d1d1d1;}\n.grey83 {background-color: #d4d4d4; color: #d4d4d4;}\n.grey84 {background-color: #d6d6d6; color: #d6d6d6;}\n.grey85 {background-color: #d9d9d9; color: #d9d9d9;}\n.grey86 {background-color: #dbdbdb; color: #dbdbdb;}\n.grey87 {background-color: #dedede; color: #dedede;}\n.grey88 {background-color: #e0e0e0; color: #e0e0e0;}\n.grey89 {background-color: #e3e3e3; color: #e3e3e3;}\n.grey90 {background-color: #e5e5e5; color: #e5e5e5;}\n.grey91 {background-color: #e8e8e8; color: #e8e8e8;}\n.grey92 {background-color: #ebebeb; color: #ebebeb;}\n.grey93 {background-color: #ededed; color: #ededed;}\n.grey94 {background-color: #f0f0f0; color: #f0f0f0;}\n.grey95 {background-color: #f2f2f2; color: #f2f2f2;}\n.grey96 {background-color: #f5f5f5; color: #f5f5f5;}\n.grey97 {background-color: #f7f7f7; color: #f7f7f7;}\n.grey98 {background-color: #fafafa; color: #fafafa;}\n.grey99 {background-color: #fcfcfc; color: #fcfcfc;}\n.grey100 {background-color: #ffffff; color: #ffffff;}\n```\n\n----------------------------------------\n\nTITLE: Getting Touch Device ID by Index in Pygame\nDESCRIPTION: This function retrieves the touch device ID for a given index. It takes an integer index as a parameter and returns the corresponding touch device ID.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/touch.rst#2025-04-20_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nget_device(index) -> touchid\n```\n\n----------------------------------------\n\nTITLE: Checking Text Strikethrough Status in Pygame\nDESCRIPTION: The get_strikethrough method checks if the text will be rendered with a strikethrough. It returns a boolean value indicating the strikethrough status.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/font.rst#2025-04-20_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nFont.get_strikethrough() -> bool\n```\n\n----------------------------------------\n\nTITLE: Testing Built Pygame Wheels on Linux\nDESCRIPTION: Commands to test the built Pygame wheels by creating a virtual environment, installing the wheel, and running the Pygame test suite with certain drivers disabled.\nSOURCE: https://github.com/pygame/pygame/blob/main/buildconfig/manylinux-build/README.rst#2025-04-20_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n# Testing\nexport SDL_AUDIODRIVER=disk\nexport SDL_VIDEODRIVER=dummy\n\npython3.5 -m venv anenv35\n. ./anenv35/bin/activate\npip install wheelhouse/pygame-*cp35-cp35m-manylinux1_x86_64.whl\npython -m pygame.tests --exclude opengl,music\n```\n\n----------------------------------------\n\nTITLE: Checking Pygame Color Instance in C\nDESCRIPTION: Function to check if an object is an instance of pygame.Color. It returns true for direct instances but not for subclass instances.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/c_api/color.rst#2025-04-20_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nint pgColor_Check(PyObject *obj)\n```\n\n----------------------------------------\n\nTITLE: Initializing CD Drive\nDESCRIPTION: Method to initialize a specific CD drive for use. Most CD methods require the drive to be initialized before they will work.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/cdrom.rst#2025-04-20_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\ninit() -> None\n```\n\n----------------------------------------\n\nTITLE: Integer Conversion Functions in C\nDESCRIPTION: Functions for converting Python objects to C integers, including single values and sequence elements.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/c_api/base.rst#2025-04-20_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nint pg_IntFromObj(PyObject *obj, int *val);\nint pg_IntFromObjIndex(PyObject *obj, int index, int *val);\nint pg_TwoIntsFromObj(PyObject *obj, int *val1, int *v2);\n```\n\n----------------------------------------\n\nTITLE: Getting CD Drive ID\nDESCRIPTION: Method to get the integer ID that was used to create the CD instance. This works even on an uninitialized CD.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/cdrom.rst#2025-04-20_snippet_13\n\nLANGUAGE: Python\nCODE:\n```\nget_id() -> id\n```\n\n----------------------------------------\n\nTITLE: Checking FastEvent Initialization Status\nDESCRIPTION: Returns a boolean indicating whether the fastevent module is currently initialized.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/fastevent.rst#2025-04-20_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nget_init() -> bool\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Roles for Code References in PyGame Documentation\nDESCRIPTION: These directives define custom roles for referencing code in PyGame documentation. The 'codelineref' role is defined first, then 'clr' is created as an alias with the 'codelineref' CSS class applied.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/es/tutorials/common.txt#2025-04-20_snippet_1\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. role:: codelineref\n\n.. role:: clr(codelineref)\n   :class: codelineref\n```\n\n----------------------------------------\n\nTITLE: Getting Surface Bit Depth in Pygame\nDESCRIPTION: Returns the number of bits used to represent each pixel in the Surface's pixel format.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/surface.rst#2025-04-20_snippet_28\n\nLANGUAGE: python\nCODE:\n```\nget_bitsize() -> int\n```\n\n----------------------------------------\n\nTITLE: Running Pygame Tests from Command Line\nDESCRIPTION: Demonstrates how to run the Pygame test suite from the command line using the Python -m option.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/tests.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\npython -m pygame.tests [<test options>]\n```\n\n----------------------------------------\n\nTITLE: SDL_Rect Access Macro for Pygame Rect Objects\nDESCRIPTION: A macro that provides access to the SDL_Rect field of a pygame.Rect instance. This allows C code to extract the underlying SDL_Rect structure from Python Rect objects.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/c_api/rect.rst#2025-04-20_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nSDL_Rect pgRect_AsRect(PyObject *obj)\n```\n\n----------------------------------------\n\nTITLE: Uninitializing pygame.cdrom Module\nDESCRIPTION: Function to uninitialize the cdrom module. After calling this, any existing CD objects will no longer work.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/cdrom.rst#2025-04-20_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nquit() -> None\n```\n\n----------------------------------------\n\nTITLE: Uploading Pygame Wheels to PyPI\nDESCRIPTION: Commands to upload the built Pygame wheels to PyPI using twine. This requires setting up PyPI credentials and incrementing the version in setup.py.\nSOURCE: https://github.com/pygame/pygame/blob/main/buildconfig/manylinux-build/README.rst#2025-04-20_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n# Now upload all the linux wheels to pypi.\n# Make sure your PYPI vars are set. See .travis_osx_upload_whl.py\n# Note you will need to increment the version in setup.py first.\ncd ..\nmkdir -p dist\nrm -f dist/*.whl\ncp buildconfig/manylinux-build/wheelhouse/*.whl dist/\n\npip install twine\n\ntwine upload dist/*.whl --user=pygameci\n```\n\n----------------------------------------\n\nTITLE: Defining Light Color Classes in CSS\nDESCRIPTION: This snippet defines CSS classes for various light colors and their shades. Each class sets both the background-color and color properties to the same hex value.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/color_list.rst#2025-04-20_snippet_4\n\nLANGUAGE: CSS\nCODE:\n```\n.lavender {background-color: #e6e6fa; color: #e6e6fa;}\n.lavenderblush {background-color: #fff0f5; color: #fff0f5;}\n.lavenderblush1 {background-color: #fff0f5; color: #fff0f5;}\n.lavenderblush2 {background-color: #eee0e5; color: #eee0e5;}\n.lavenderblush3 {background-color: #cdc1c5; color: #cdc1c5;}\n.lavenderblush4 {background-color: #8b8386; color: #8b8386;}\n.lawngreen {background-color: #7cfc00; color: #7cfc00;}\n.lemonchiffon {background-color: #fffacd; color: #fffacd;}\n.lemonchiffon1 {background-color: #fffacd; color: #fffacd;}\n.lemonchiffon2 {background-color: #eee9bf; color: #eee9bf;}\n.lemonchiffon3 {background-color: #cdc9a5; color: #cdc9a5;}\n.lemonchiffon4 {background-color: #8b8970; color: #8b8970;}\n.lightblue {background-color: #add8e6; color: #add8e6;}\n.lightblue1 {background-color: #bfefff; color: #bfefff;}\n.lightblue2 {background-color: #b2dfee; color: #b2dfee;}\n.lightblue3 {background-color: #9ac0cd; color: #9ac0cd;}\n.lightblue4 {background-color: #68838b; color: #68838b;}\n.lightcoral {background-color: #f08080; color: #f08080;}\n.lightcyan {background-color: #e0ffff; color: #e0ffff;}\n.lightcyan1 {background-color: #e0ffff; color: #e0ffff;}\n.lightcyan2 {background-color: #d1eeee; color: #d1eeee;}\n.lightcyan3 {background-color: #b4cdcd; color: #b4cdcd;}\n.lightcyan4 {background-color: #7a8b8b; color: #7a8b8b;}\n.lightgoldenrod {background-color: #eedd82; color: #eedd82;}\n.lightgoldenrod1 {background-color: #ffec8b; color: #ffec8b;}\n.lightgoldenrod2 {background-color: #eedc82; color: #eedc82;}\n.lightgoldenrod3 {background-color: #cdbe70; color: #cdbe70;}\n.lightgoldenrod4 {background-color: #8b814c; color: #8b814c;}\n.lightgoldenrodyellow {background-color: #fafad2; color: #fafad2;}\n.lightgray {background-color: #d3d3d3; color: #d3d3d3;}\n.lightgreen {background-color: #90ee90; color: #90ee90;}\n.lightgrey {background-color: #d3d3d3; color: #d3d3d3;}\n.lightpink {background-color: #ffb6c1; color: #ffb6c1;}\n.lightpink1 {background-color: #ffaeb9; color: #ffaeb9;}\n.lightpink2 {background-color: #eea2ad; color: #eea2ad;}\n.lightpink3 {background-color: #cd8c95; color: #cd8c95;}\n.lightpink4 {background-color: #8b5f65; color: #8b5f65;}\n.lightsalmon {background-color: #ffa07a; color: #ffa07a;}\n.lightsalmon1 {background-color: #ffa07a; color: #ffa07a;}\n.lightsalmon2 {background-color: #ee9572; color: #ee9572;}\n.lightsalmon3 {background-color: #cd8162; color: #cd8162;}\n.lightsalmon4 {background-color: #8b5742; color: #8b5742;}\n.lightseagreen {background-color: #20b2aa; color: #20b2aa;}\n.lightskyblue {background-color: #87cefa; color: #87cefa;}\n.lightskyblue1 {background-color: #b0e2ff; color: #b0e2ff;}\n.lightskyblue2 {background-color: #a4d3ee; color: #a4d3ee;}\n.lightskyblue3 {background-color: #8db6cd; color: #8db6cd;}\n.lightskyblue4 {background-color: #607b8b; color: #607b8b;}\n.lightslateblue {background-color: #8470ff; color: #8470ff;}\n.lightslategray {background-color: #778899; color: #778899;}\n.lightslategrey {background-color: #778899; color: #778899;}\n.lightsteelblue {background-color: #b0c4de; color: #b0c4de;}\n.lightsteelblue1 {background-color: #cae1ff; color: #cae1ff;}\n.lightsteelblue2 {background-color: #bcd2ee; color: #bcd2ee;}\n.lightsteelblue3 {background-color: #a2b5cd; color: #a2b5cd;}\n.lightsteelblue4 {background-color: #6e7b8b; color: #6e7b8b;}\n.lightyellow {background-color: #ffffe0; color: #ffffe0;}\n.lightyellow1 {background-color: #ffffe0; color: #ffffe0;}\n.lightyellow2 {background-color: #eeeed1; color: #eeeed1;}\n.lightyellow3 {background-color: #cdcdb4; color: #cdcdb4;}\n.lightyellow4 {background-color: #8b8b7a; color: #8b8b7a;}\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables in Windows\nDESCRIPTION: Shows how to set environment variables in Windows command prompt before running a Python application\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/pygame.rst#2025-04-20_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nset NAME_OF_ENVIRONMENT_VARIABLE=value_to_set\\npython my_application.py\n```\n\n----------------------------------------\n\nTITLE: Configuring Vagrant Synced Folders for Pygame Source\nDESCRIPTION: Vagrant configuration to add a synced folder for the Pygame source code. This makes the Pygame source accessible from within the VM.\nSOURCE: https://github.com/pygame/pygame/blob/main/buildconfig/manylinux-build/README.rst#2025-04-20_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\n# edit your Vagrantfile to add /vagrant_pygame synced folder.\n# You pygame folder is next to your vagrant\nconfig.vm.synced_folder \"../pygame\", \"/vagrant_pygame\"\n```\n\n----------------------------------------\n\nTITLE: CSS Color Class Definitions\nDESCRIPTION: CSS classes defining color values for different shades of grey, honeydew, hotpink, indianred, indigo, ivory, khaki, lavender, and other colors. Each class sets both the background-color and text color to the same hex value.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/es/color_list.rst#2025-04-20_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n.grey77 {background-color: #c4c4c4; color: #c4c4c4;}\n.grey78 {background-color: #c7c7c7; color: #c7c7c7;}\n.grey79 {background-color: #c9c9c9; color: #c9c9c9;}\n.grey80 {background-color: #cccccc; color: #cccccc;}\n.grey81 {background-color: #cfcfcf; color: #cfcfcf;}\n.grey82 {background-color: #d1d1d1; color: #d1d1d1;}\n.grey83 {background-color: #d4d4d4; color: #d4d4d4;}\n.grey84 {background-color: #d6d6d6; color: #d6d6d6;}\n.grey85 {background-color: #d9d9d9; color: #d9d9d9;}\n.grey86 {background-color: #dbdbdb; color: #dbdbdb;}\n.grey87 {background-color: #dedede; color: #dedede;}\n.grey88 {background-color: #e0e0e0; color: #e0e0e0;}\n.grey89 {background-color: #e3e3e3; color: #e3e3e3;}\n.grey90 {background-color: #e5e5e5; color: #e5e5e5;}\n.grey91 {background-color: #e8e8e8; color: #e8e8e8;}\n.grey92 {background-color: #ebebeb; color: #ebebeb;}\n.grey93 {background-color: #ededed; color: #ededed;}\n.grey94 {background-color: #f0f0f0; color: #f0f0f0;}\n.grey95 {background-color: #f2f2f2; color: #f2f2f2;}\n.grey96 {background-color: #f5f5f5; color: #f5f5f5;}\n.grey97 {background-color: #f7f7f7; color: #f7f7f7;}\n.grey98 {background-color: #fafafa; color: #fafafa;}\n.grey99 {background-color: #fcfcfc; color: #fcfcfc;}\n.grey100 {background-color: #ffffff; color: #ffffff;}\n.honeydew {background-color: #f0fff0; color: #f0fff0;}\n.honeydew1 {background-color: #f0fff0; color: #f0fff0;}\n.honeydew2 {background-color: #e0eee0; color: #e0eee0;}\n.honeydew3 {background-color: #c1cdc1; color: #c1cdc1;}\n.honeydew4 {background-color: #838b83; color: #838b83;}\n.hotpink {background-color: #ff69b4; color: #ff69b4;}\n.hotpink1 {background-color: #ff6eb4; color: #ff6eb4;}\n.hotpink2 {background-color: #ee6aa7; color: #ee6aa7;}\n.hotpink3 {background-color: #cd6090; color: #cd6090;}\n.hotpink4 {background-color: #8b3a62; color: #8b3a62;}\n.indianred {background-color: #cd5c5c; color: #cd5c5c;}\n.indianred1 {background-color: #ff6a6a; color: #ff6a6a;}\n.indianred2 {background-color: #ee6363; color: #ee6363;}\n.indianred3 {background-color: #cd5555; color: #cd5555;}\n.indianred4 {background-color: #8b3a3a; color: #8b3a3a;}\n.indigo {background-color: #4b0082; color: #4b0082;}\n.ivory {background-color: #fffff0; color: #fffff0;}\n.ivory1 {background-color: #fffff0; color: #fffff0;}\n.ivory2 {background-color: #eeeee0; color: #eeeee0;}\n.ivory3 {background-color: #cdcdc1; color: #cdcdc1;}\n.ivory4 {background-color: #8b8b83; color: #8b8b83;}\n.khaki {background-color: #f0e68c; color: #f0e68c;}\n.khaki1 {background-color: #fff68f; color: #fff68f;}\n.khaki2 {background-color: #eee685; color: #eee685;}\n.khaki3 {background-color: #cdc673; color: #cdc673;}\n.khaki4 {background-color: #8b864e; color: #8b864e;}\n.lavender {background-color: #e6e6fa; color: #e6e6fa;}\n.lavenderblush {background-color: #fff0f5; color: #fff0f5;}\n.lavenderblush1 {background-color: #fff0f5; color: #fff0f5;}\n.lavenderblush2 {background-color: #eee0e5; color: #eee0e5;}\n.lavenderblush3 {background-color: #cdc1c5; color: #cdc1c5;}\n.lavenderblush4 {background-color: #8b8386; color: #8b8386;}\n.lawngreen {background-color: #7cfc00; color: #7cfc00;}\n.lemonchiffon {background-color: #fffacd; color: #fffacd;}\n.lemonchiffon1 {background-color: #fffacd; color: #fffacd;}\n.lemonchiffon2 {background-color: #eee9bf; color: #eee9bf;}\n.lemonchiffon3 {background-color: #cdc9a5; color: #cdc9a5;}\n.lemonchiffon4 {background-color: #8b8970; color: #8b8970;}\n.lightblue {background-color: #add8e6; color: #add8e6;}\n.lightblue1 {background-color: #bfefff; color: #bfefff;}\n.lightblue2 {background-color: #b2dfee; color: #b2dfee;}\n.lightblue3 {background-color: #9ac0cd; color: #9ac0cd;}\n.lightblue4 {background-color: #68838b; color: #68838b;}\n.lightcoral {background-color: #f08080; color: #f08080;}\n.lightcyan {background-color: #e0ffff; color: #e0ffff;}\n.lightcyan1 {background-color: #e0ffff; color: #e0ffff;}\n.lightcyan2 {background-color: #d1eeee; color: #d1eeee;}\n.lightcyan3 {background-color: #b4cdcd; color: #b4cdcd;}\n.lightcyan4 {background-color: #7a8b8b; color: #7a8b8b;}\n.lightgoldenrod {background-color: #eedd82; color: #eedd82;}\n.lightgoldenrod1 {background-color: #ffec8b; color: #ffec8b;}\n.lightgoldenrod2 {background-color: #eedc82; color: #eedc82;}\n.lightgoldenrod3 {background-color: #cdbe70; color: #cdbe70;}\n.lightgoldenrod4 {background-color: #8b814c; color: #8b814c;}\n.lightgoldenrodyellow {background-color: #fafad2; color: #fafad2;}\n.lightgray {background-color: #d3d3d3; color: #d3d3d3;}\n.lightgreen {background-color: #90ee90; color: #90ee90;}\n.lightgrey {background-color: #d3d3d3; color: #d3d3d3;}\n.lightpink {background-color: #ffb6c1; color: #ffb6c1;}\n.lightpink1 {background-color: #ffaeb9; color: #ffaeb9;}\n.lightpink2 {background-color: #eea2ad; color: #eea2ad;}\n.lightpink3 {background-color: #cd8c95; color: #cd8c95;}\n.lightpink4 {background-color: #8b5f65; color: #8b5f65;}\n.lightsalmon {background-color: #ffa07a; color: #ffa07a;}\n.lightsalmon1 {background-color: #ffa07a; color: #ffa07a;}\n.lightsalmon2 {background-color: #ee9572; color: #ee9572;}\n.lightsalmon3 {background-color: #cd8162; color: #cd8162;}\n.lightsalmon4 {background-color: #8b5742; color: #8b5742;}\n.lightseagreen {background-color: #20b2aa; color: #20b2aa;}\n.lightskyblue {background-color: #87cefa; color: #87cefa;}\n.lightskyblue1 {background-color: #b0e2ff; color: #b0e2ff;}\n.lightskyblue2 {background-color: #a4d3ee; color: #a4d3ee;}\n.lightskyblue3 {background-color: #8db6cd; color: #8db6cd;}\n.lightskyblue4 {background-color: #607b8b; color: #607b8b;}\n.lightslateblue {background-color: #8470ff; color: #8470ff;}\n.lightslategray {background-color: #778899; color: #778899;}\n.lightslategrey {background-color: #778899; color: #778899;}\n.lightsteelblue {background-color: #b0c4de; color: #b0c4de;}\n.lightsteelblue1 {background-color: #cae1ff; color: #cae1ff;}\n.lightsteelblue2 {background-color: #bcd2ee; color: #bcd2ee;}\n.lightsteelblue3 {background-color: #a2b5cd; color: #a2b5cd;}\n.lightsteelblue4 {background-color: #6e7b8b; color: #6e7b8b;}\n.lightyellow {background-color: #ffffe0; color: #ffffe0;}\n.lightyellow1 {background-color: #ffffe0; color: #ffffe0;}\n.lightyellow2 {background-color: #eeeed1; color: #eeeed1;}\n.lightyellow3 {background-color: #cdcdb4; color: #cdcdb4;}\n.lightyellow4 {background-color: #8b8b7a; color: #8b8b7a;}\n.linen {background-color: #faf0e6; color: #faf0e6;}\n.limegreen {background-color: #32cd32; color: #32cd32;}\n.lime {background-color: #00ff00; color: #00ff00;}\n.magenta {background-color: #ff00ff; color: #ff00ff;}\n.magenta1 {background-color: #ff00ff; color: #ff00ff;}\n.magenta2 {background-color: #ee00ee; color: #ee00ee;}\n.magenta3 {background-color: #cd00cd; color: #cd00cd;}\n.magenta4 {background-color: #8b008b; color: #8b008b;}\n.maroon {background-color: #b03060; color: #b03060;}\n.maroon1 {background-color: #ff34b3; color: #ff34b3;}\n.maroon2 {background-color: #ee30a7; color: #ee30a7;}\n.maroon3 {background-color: #cd2990; color: #cd2990;}\n.maroon4 {background-color: #8b1c62; color: #8b1c62;}\n.mediumaquamarine {background-color: #66cdaa; color: #66cdaa;}\n.mediumblue {background-color: #0000cd; color: #0000cd;}\n.mediumorchid {background-color: #ba55d3; color: #ba55d3;}\n.mediumorchid1 {background-color: #e066ff; color: #e066ff;}\n.mediumorchid2 {background-color: #d15fee; color: #d15fee;}\n.mediumorchid3 {background-color: #b452cd; color: #b452cd;}\n.mediumorchid4 {background-color: #7a378b; color: #7a378b;}\n.mediumpurple {background-color: #9370db; color: #9370db;}\n.mediumpurple1 {background-color: #ab82ff; color: #ab82ff;}\n.mediumpurple2 {background-color: #9f79ee; color: #9f79ee;}\n.mediumpurple3 {background-color: #8968cd; color: #8968cd;}\n.mediumpurple4 {background-color: #5d478b; color: #5d478b;}\n.mediumseagreen {background-color: #3cb371; color: #3cb371;}\n.mediumslateblue {background-color: #7b68ee; color: #7b68ee;}\n.mediumspringgreen {background-color: #00fa9a; color: #00fa9a;}\n.mediumturquoise {background-color: #48d1cc; color: #48d1cc;}\n.mediumvioletred {background-color: #c71585; color: #c71585;}\n.midnightblue {background-color: #191970; color: #191970;}\n.mintcream {background-color: #f5fffa; color: #f5fffa;}\n.mistyrose {background-color: #ffe4e1; color: #ffe4e1;}\n.mistyrose1 {background-color: #ffe4e1; color: #ffe4e1;}\n.mistyrose2 {background-color: #eed5d2; color: #eed5d2;}\n.mistyrose3 {background-color: #cdb7b5; color: #cdb7b5;}\n.mistyrose4 {background-color: #8b7d7b; color: #8b7d7b;}\n.moccasin {background-color: #ffe4b5; color: #ffe4b5;}\n.navajowhite {background-color: #ffdead; color: #ffdead;}\n.navajowhite1 {background-color: #ffdead; color: #ffdead;}\n.navajowhite2 {background-color: #eecfa1; color: #eecfa1;}\n.navajowhite3 {background-color: #cdb38b; color: #cdb38b;}\n.navajowhite4 {background-color: #8b795e; color: #8b795e;}\n.navy {background-color: #000080; color: #000080;}\n.navyblue {background-color: #000080; color: #000080;}\n.oldlace {background-color: #fdf5e6; color: #fdf5e6;}\n.olive {background-color: #808000; color: #808000;}\n.olivedrab {background-color: #6b8e23; color: #6b8e23;}\n.olivedrab1 {background-color: #c0ff3e; color: #c0ff3e;}\n.olivedrab2 {background-color: #b3ee3a; color: #b3ee3a;}\n.olivedrab3 {background-color: #9acd32; color: #9acd32;}\n.olivedrab4 {background-color: #698b22; color: #698b22;}\n.orange {background-color: #ffa500; color: #ffa500;}\n```\n\n----------------------------------------\n\nTITLE: Getting Absolute Subsurface Offset in Pygame\nDESCRIPTION: Gets the offset position of a child subsurface inside of its top level parent Surface. If the Surface is not a subsurface this will return (0, 0).\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/surface.rst#2025-04-20_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nget_abs_offset() -> (x, y)\n```\n\n----------------------------------------\n\nTITLE: Incorrect Surface Loading Without Conversion\nDESCRIPTION: Shows the incorrect way of loading a surface without conversion, which may result in slower blitting performance. This is provided as a contrast to the correct method.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/tut/newbieguide.rst#2025-04-20_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nsurface = pygame.image.load('foo.png')\n```\n\n----------------------------------------\n\nTITLE: Defining Documentation Badges and Links in reStructuredText\nDESCRIPTION: Collection of reStructuredText directives defining image badges for PyPI license, Python3 compatibility, GitHub commits, and Black code style. Also includes reference link definitions for key project resources.\nSOURCE: https://github.com/pygame/pygame/blob/main/README.rst#2025-04-20_snippet_4\n\nLANGUAGE: rst\nCODE:\n```\n.. |PyPiLicense| image:: https://img.shields.io/pypi/l/pygame.svg?v=1\n   :target: https://pypi.python.org/pypi/pygame\n\n.. |Python3| image:: https://img.shields.io/badge/python-3-blue.svg?v=1\n\n.. |GithubCommits| image:: https://img.shields.io/github/commits-since/pygame/pygame/2.1.2.svg\n   :target: https://github.com/pygame/pygame/compare/2.1.2...main\n\n.. |BlackFormatBadge| image:: https://img.shields.io/badge/code%20style-black-000000.svg\n    :target: https://github.com/psf/black\n\n.. _pygame: https://www.pygame.org\n.. _Simple DirectMedia Layer library: https://www.libsdl.org\n.. _We need your help: https://www.pygame.org/contribute.html\n.. _Compilation wiki page: https://www.pygame.org/wiki/Compilation\n.. _docs page: https://www.pygame.org/docs/\n.. _GNU LGPL version 2.1: https://www.gnu.org/copyleft/lesser.html\n```\n\n----------------------------------------\n\nTITLE: Surface Type Check Function in C\nDESCRIPTION: Macro function to verify if a PyObject is a pygame.Surface instance. Returns true for exact Surface types but false for subclasses. No NULL checking is performed.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/c_api/surface.rst#2025-04-20_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nint pgSurface_Check(PyObject *x)\n```\n\n----------------------------------------\n\nTITLE: Checking pygame.cdrom Module Initialization\nDESCRIPTION: Function to check if the cdrom module is initialized. Returns a boolean value.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/cdrom.rst#2025-04-20_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nget_init() -> bool\n```\n\n----------------------------------------\n\nTITLE: Defining CSS Color Classes in HTML for Pygame Named Colors\nDESCRIPTION: This HTML snippet defines CSS classes for all named colors available in Pygame. Each class sets both the background-color and text color to the same hex value, creating a visual representation of the color.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/color_list.rst#2025-04-20_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<style>\n.aliceblue {background-color: #f0f8ff; color: #f0f8ff;}\n.antiquewhite {background-color: #faebd7; color: #faebd7;}\n.antiquewhite1 {background-color: #ffefdb; color: #ffefdb;}\n.antiquewhite2 {background-color: #eedfcc; color: #eedfcc;}\n.antiquewhite3 {background-color: #cdc0b0; color: #cdc0b0;}\n.antiquewhite4 {background-color: #8b8378; color: #8b8378;}\n.aqua {background-color: #00ffff; color: #00ffff;}\n.aquamarine {background-color: #7fffd4; color: #7fffd4;}\n.aquamarine1 {background-color: #7fffd4; color: #7fffd4;}\n.aquamarine2 {background-color: #76eec6; color: #76eec6;}\n.aquamarine3 {background-color: #66cdaa; color: #66cdaa;}\n.aquamarine4 {background-color: #458b74; color: #458b74;}\n.azure {background-color: #f0ffff; color: #f0ffff;}\n.azure1 {background-color: #f0ffff; color: #f0ffff;}\n.azure3 {background-color: #c1cdcd; color: #c1cdcd;}\n.azure2 {background-color: #e0eeee; color: #e0eeee;}\n.azure4 {background-color: #838b8b; color: #838b8b;}\n.beige {background-color: #f5f5dc; color: #f5f5dc;}\n.bisque {background-color: #ffe4c4; color: #ffe4c4;}\n.bisque1 {background-color: #ffe4c4; color: #ffe4c4;}\n.bisque2 {background-color: #eed5b7; color: #eed5b7;}\n.bisque3 {background-color: #cdb79e; color: #cdb79e;}\n.bisque4 {background-color: #8b7d6b; color: #8b7d6b;}\n.black {background-color: #000000; color: #000000;}\n.blanchedalmond {background-color: #ffebcd; color: #ffebcd;}\n.blue {background-color: #0000ff; color: #0000ff;}\n.blue1 {background-color: #0000ff; color: #0000ff;}\n.blue2 {background-color: #0000ee; color: #0000ee;}\n.blue3 {background-color: #0000cd; color: #0000cd;}\n.blue4 {background-color: #00008b; color: #00008b;}\n.blueviolet {background-color: #8a2be2; color: #8a2be2;}\n.brown {background-color: #a52a2a; color: #a52a2a;}\n.brown1 {background-color: #ff4040; color: #ff4040;}\n.brown2 {background-color: #ee3b3b; color: #ee3b3b;}\n.brown3 {background-color: #cd3333; color: #cd3333;}\n.brown4 {background-color: #8b2323; color: #8b2323;}\n.burlywood {background-color: #deb887; color: #deb887;}\n.burlywood1 {background-color: #ffd39b; color: #ffd39b;}\n.burlywood2 {background-color: #eec591; color: #eec591;}\n.burlywood3 {background-color: #cdaa7d; color: #cdaa7d;}\n.burlywood4 {background-color: #8b7355; color: #8b7355;}\n.cadetblue {background-color: #5f9ea0; color: #5f9ea0;}\n.cadetblue1 {background-color: #98f5ff; color: #98f5ff;}\n.cadetblue2 {background-color: #8ee5ee; color: #8ee5ee;}\n.cadetblue3 {background-color: #7ac5cd; color: #7ac5cd;}\n.cadetblue4 {background-color: #53868b; color: #53868b;}\n.chartreuse {background-color: #7fff00; color: #7fff00;}\n.chartreuse1 {background-color: #7fff00; color: #7fff00;}\n.chartreuse2 {background-color: #76ee00; color: #76ee00;}\n.chartreuse3 {background-color: #66cd00; color: #66cd00;}\n.chartreuse4 {background-color: #458b00; color: #458b00;}\n.chocolate {background-color: #d2691e; color: #d2691e;}\n.chocolate1 {background-color: #ff7f24; color: #ff7f24;}\n.chocolate2 {background-color: #ee7621; color: #ee7621;}\n.chocolate3 {background-color: #cd661d; color: #cd661d;}\n.chocolate4 {background-color: #8b4513; color: #8b4513;}\n.coral {background-color: #ff7f50; color: #ff7f50;}\n.coral1 {background-color: #ff7256; color: #ff7256;}\n.coral2 {background-color: #ee6a50; color: #ee6a50;}\n.coral3 {background-color: #cd5b45; color: #cd5b45;}\n.coral4 {background-color: #8b3e2f; color: #8b3e2f;}\n.cornflowerblue {background-color: #6495ed; color: #6495ed;}\n.cornsilk {background-color: #fff8dc; color: #fff8dc;}\n.cornsilk1 {background-color: #fff8dc; color: #fff8dc;}\n.cornsilk2 {background-color: #eee8cd; color: #eee8cd;}\n.cornsilk3 {background-color: #cdc8b1; color: #cdc8b1;}\n.cornsilk4 {background-color: #8b8878; color: #8b8878;}\n.crimson {background-color: #dc143c; color: #dc143c;}\n.cyan {background-color: #00ffff; color: #00ffff;}\n.cyan1 {background-color: #00ffff; color: #00ffff;}\n.cyan2 {background-color: #00eeee; color: #00eeee;}\n.cyan3 {background-color: #00cdcd; color: #00cdcd;}\n.cyan4 {background-color: #008b8b; color: #008b8b;}\n.darkblue {background-color: #00008b; color: #00008b;}\n.darkcyan {background-color: #008b8b; color: #008b8b;}\n.darkgoldenrod {background-color: #b8860b; color: #b8860b;}\n.darkgoldenrod1 {background-color: #ffb90f; color: #ffb90f;}\n.darkgoldenrod2 {background-color: #eead0e; color: #eead0e;}\n.darkgoldenrod3 {background-color: #cd950c; color: #cd950c;}\n.darkgoldenrod4 {background-color: #8b6508; color: #8b6508;}\n.darkgray {background-color: #a9a9a9; color: #a9a9a9;}\n.darkgreen {background-color: #006400; color: #006400;}\n.darkgrey {background-color: #a9a9a9; color: #a9a9a9;}\n.darkkhaki {background-color: #bdb76b; color: #bdb76b;}\n.darkmagenta {background-color: #8b008b; color: #8b008b;}\n.darkolivegreen {background-color: #556b2f; color: #556b2f;}\n.darkolivegreen1 {background-color: #caff70; color: #caff70;}\n.darkolivegreen2 {background-color: #bcee68; color: #bcee68;}\n.darkolivegreen3 {background-color: #a2cd5a; color: #a2cd5a;}\n.darkolivegreen4 {background-color: #6e8b3d; color: #6e8b3d;}\n.darkorange {background-color: #ff8c00; color: #ff8c00;}\n.darkorange1 {background-color: #ff7f00; color: #ff7f00;}\n.darkorange2 {background-color: #ee7600; color: #ee7600;}\n.darkorange3 {background-color: #cd6600; color: #cd6600;}\n.darkorange4 {background-color: #8b4500; color: #8b4500;}\n.darkorchid {background-color: #9932cc; color: #9932cc;}\n.darkorchid1 {background-color: #bf3eff; color: #bf3eff;}\n.darkorchid2 {background-color: #b23aee; color: #b23aee;}\n.darkorchid3 {background-color: #9a32cd; color: #9a32cd;}\n.darkorchid4 {background-color: #68228b; color: #68228b;}\n.darkred {background-color: #8b0000; color: #8b0000;}\n.darksalmon {background-color: #e9967a; color: #e9967a;}\n.darkseagreen {background-color: #8fbc8f; color: #8fbc8f;}\n.darkseagreen1 {background-color: #c1ffc1; color: #c1ffc1;}\n.darkseagreen2 {background-color: #b4eeb4; color: #b4eeb4;}\n.darkseagreen3 {background-color: #9bcd9b; color: #9bcd9b;}\n.darkseagreen4 {background-color: #698b69; color: #698b69;}\n.darkslateblue {background-color: #483d8b; color: #483d8b;}\n.darkslategray {background-color: #2f4f4f; color: #2f4f4f;}\n.darkslategray1 {background-color: #97ffff; color: #97ffff;}\n.darkslategray2 {background-color: #8deeee; color: #8deeee;}\n.darkslategray3 {background-color: #79cdcd; color: #79cdcd;}\n.darkslategray4 {background-color: #528b8b; color: #528b8b;}\n.darkslategrey {background-color: #2f4f4f; color: #2f4f4f;}\n.darkturquoise {background-color: #00ced1; color: #00ced1;}\n.darkviolet {background-color: #9400d3; color: #9400d3;}\n.deeppink {background-color: #ff1493; color: #ff1493;}\n.deeppink1 {background-color: #ff1493; color: #ff1493;}\n.deeppink2 {background-color: #ee1289; color: #ee1289;}\n.deeppink3 {background-color: #cd1076; color: #cd1076;}\n.deeppink4 {background-color: #8b0a50; color: #8b0a50;}\n.deepskyblue {background-color: #00bfff; color: #00bfff;}\n.deepskyblue1 {background-color: #00bfff; color: #00bfff;}\n.deepskyblue2 {background-color: #00b2ee; color: #00b2ee;}\n.deepskyblue3 {background-color: #009acd; color: #009acd;}\n.deepskyblue4 {background-color: #00688b; color: #00688b;}\n.dimgray {background-color: #696969; color: #696969;}\n.dimgrey {background-color: #696969; color: #696969;}\n.dodgerblue {background-color: #1e90ff; color: #1e90ff;}\n.dodgerblue1 {background-color: #1e90ff; color: #1e90ff;}\n.dodgerblue2 {background-color: #1c86ee; color: #1c86ee;}\n.dodgerblue3 {background-color: #1874cd; color: #1874cd;}\n.dodgerblue4 {background-color: #104e8b; color: #104e8b;}\n.firebrick {background-color: #b22222; color: #b22222;}\n.firebrick1 {background-color: #ff3030; color: #ff3030;}\n.firebrick2 {background-color: #ee2c2c; color: #ee2c2c;}\n.firebrick3 {background-color: #cd2626; color: #cd2626;}\n.firebrick4 {background-color: #8b1a1a; color: #8b1a1a;}\n.floralwhite {background-color: #fffaf0; color: #fffaf0;}\n.forestgreen {background-color: #228b22; color: #228b22;}\n.fuchsia {background-color: #ff00ff; color: #ff00ff;}\n.gainsboro {background-color: #dcdcdc; color: #dcdcdc;}\n.ghostwhite {background-color: #f8f8ff; color: #f8f8ff;}\n.gold {background-color: #ffd700; color: #ffd700;}\n.gold1 {background-color: #ffd700; color: #ffd700;}\n.gold2 {background-color: #eec900; color: #eec900;}\n.gold3 {background-color: #cdad00; color: #cdad00;}\n.gold4 {background-color: #8b7500; color: #8b7500;}\n.goldenrod {background-color: #daa520; color: #daa520;}\n.goldenrod1 {background-color: #ffc125; color: #ffc125;}\n.goldenrod2 {background-color: #eeb422; color: #eeb422;}\n.goldenrod3 {background-color: #cd9b1d; color: #cd9b1d;}\n.goldenrod4 {background-color: #8b6914; color: #8b6914;}\n.gray {background-color: #bebebe; color: #bebebe;}\n.gray0 {background-color: #000000; color: #000000;}\n.gray1 {background-color: #030303; color: #030303;}\n.gray2 {background-color: #050505; color: #050505;}\n.gray3 {background-color: #080808; color: #080808;}\n.gray4 {background-color: #0a0a0a; color: #0a0a0a;}\n.gray5 {background-color: #0d0d0d; color: #0d0d0d;}\n.gray6 {background-color: #0f0f0f; color: #0f0f0f;}\n.gray7 {background-color: #121212; color: #121212;}\n.gray8 {background-color: #141414; color: #141414;}\n.gray9 {background-color: #171717; color: #171717;}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Implementing Surface Unlocking Functions in C for Pygame\nDESCRIPTION: Implements functions to unlock surfaces, either removing the surface's own lock or a lock owned by a specified Python object.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/c_api/surflock.rst#2025-04-20_snippet_5\n\nLANGUAGE: c\nCODE:\n```\nint pgSurface_UnLock(pgSurfaceObject *surfobj);\nint pgSurface_UnLockBy(pgSurfaceObject *surfobj, PyObject *lockobj);\n```\n\n----------------------------------------\n\nTITLE: Defining CSS Color Classes for PyGame Documentation\nDESCRIPTION: CSS class definitions that set both background-color and color properties to the same hex value. These classes are used for styling elements in the PyGame documentation to represent available color names in the pygame.Color module.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/es/color_list.rst#2025-04-20_snippet_3\n\nLANGUAGE: CSS\nCODE:\n```\n.orange1 {background-color: #ffa500; color: #ffa500;}\n.orange2 {background-color: #ee9a00; color: #ee9a00;}\n.orange3 {background-color: #cd8500; color: #cd8500;}\n.orange4 {background-color: #8b5a00; color: #8b5a00;}\n.orangered {background-color: #ff4500; color: #ff4500;}\n.orangered1 {background-color: #ff4500; color: #ff4500;}\n.orangered2 {background-color: #ee4000; color: #ee4000;}\n.orangered3 {background-color: #cd3700; color: #cd3700;}\n.orangered4 {background-color: #8b2500; color: #8b2500;}\n.orchid {background-color: #da70d6; color: #da70d6;}\n.orchid1 {background-color: #ff83fa; color: #ff83fa;}\n.orchid2 {background-color: #ee7ae9; color: #ee7ae9;}\n.orchid3 {background-color: #cd69c9; color: #cd69c9;}\n.orchid4 {background-color: #8b4789; color: #8b4789;}\n.palegreen {background-color: #98fb98; color: #98fb98;}\n.palegreen1 {background-color: #9aff9a; color: #9aff9a;}\n.palegreen2 {background-color: #90ee90; color: #90ee90;}\n.palegreen3 {background-color: #7ccd7c; color: #7ccd7c;}\n.palegreen4 {background-color: #548b54; color: #548b54;}\n.palegoldenrod {background-color: #eee8aa; color: #eee8aa;}\n.paleturquoise {background-color: #afeeee; color: #afeeee;}\n.paleturquoise1 {background-color: #bbffff; color: #bbffff;}\n.paleturquoise2 {background-color: #aeeeee; color: #aeeeee;}\n.paleturquoise3 {background-color: #96cdcd; color: #96cdcd;}\n.paleturquoise4 {background-color: #668b8b; color: #668b8b;}\n.palevioletred {background-color: #db7093; color: #db7093;}\n.palevioletred1 {background-color: #ff82ab; color: #ff82ab;}\n.palevioletred2 {background-color: #ee799f; color: #ee799f;}\n.palevioletred3 {background-color: #cd6889; color: #cd6889;}\n.palevioletred4 {background-color: #8b475d; color: #8b475d;}\n.papayawhip {background-color: #ffefd5; color: #ffefd5;}\n.peachpuff {background-color: #ffdab9; color: #ffdab9;}\n.peachpuff1 {background-color: #ffdab9; color: #ffdab9;}\n.peachpuff2 {background-color: #eecbad; color: #eecbad;}\n.peachpuff3 {background-color: #cdaf95; color: #cdaf95;}\n.peachpuff4 {background-color: #8b7765; color: #8b7765;}\n.peru {background-color: #cd853f; color: #cd853f;}\n.pink {background-color: #ffc0cb; color: #ffc0cb;}\n.pink1 {background-color: #ffb5c5; color: #ffb5c5;}\n.pink2 {background-color: #eea9b8; color: #eea9b8;}\n.pink3 {background-color: #cd919e; color: #cd919e;}\n.pink4 {background-color: #8b636c; color: #8b636c;}\n.plum {background-color: #dda0dd; color: #dda0dd;}\n.plum1 {background-color: #ffbbff; color: #ffbbff;}\n.plum2 {background-color: #eeaeee; color: #eeaeee;}\n.plum3 {background-color: #cd96cd; color: #cd96cd;}\n.plum4 {background-color: #8b668b; color: #8b668b;}\n.powderblue {background-color: #b0e0e6; color: #b0e0e6;}\n.purple {background-color: #a020f0; color: #a020f0;}\n.purple1 {background-color: #9b30ff; color: #9b30ff;}\n.purple2 {background-color: #912cee; color: #912cee;}\n.purple3 {background-color: #7d26cd; color: #7d26cd;}\n.purple4 {background-color: #551a8b; color: #551a8b;}\n.red {background-color: #ff0000; color: #ff0000;}\n.red1 {background-color: #ff0000; color: #ff0000;}\n.red2 {background-color: #ee0000; color: #ee0000;}\n.red3 {background-color: #cd0000; color: #cd0000;}\n.red4 {background-color: #8b0000; color: #8b0000;}\n.rosybrown {background-color: #bc8f8f; color: #bc8f8f;}\n.rosybrown1 {background-color: #ffc1c1; color: #ffc1c1;}\n.rosybrown2 {background-color: #eeb4b4; color: #eeb4b4;}\n.rosybrown3 {background-color: #cd9b9b; color: #cd9b9b;}\n.rosybrown4 {background-color: #8b6969; color: #8b6969;}\n.royalblue {background-color: #4169e1; color: #4169e1;}\n.royalblue1 {background-color: #4876ff; color: #4876ff;}\n.royalblue2 {background-color: #436eee; color: #436eee;}\n.royalblue3 {background-color: #3a5fcd; color: #3a5fcd;}\n.royalblue4 {background-color: #27408b; color: #27408b;}\n.salmon {background-color: #fa8072; color: #fa8072;}\n.salmon1 {background-color: #ff8c69; color: #ff8c69;}\n.salmon2 {background-color: #ee8262; color: #ee8262;}\n.salmon3 {background-color: #cd7054; color: #cd7054;}\n.salmon4 {background-color: #8b4c39; color: #8b4c39;}\n.saddlebrown {background-color: #8b4513; color: #8b4513;}\n.sandybrown {background-color: #f4a460; color: #f4a460;}\n.seagreen {background-color: #2e8b57; color: #2e8b57;}\n.seagreen1 {background-color: #54ff9f; color: #54ff9f;}\n.seagreen2 {background-color: #4eee94; color: #4eee94;}\n.seagreen3 {background-color: #43cd80; color: #43cd80;}\n.seagreen4 {background-color: #2e8b57; color: #2e8b57;}\n.seashell {background-color: #fff5ee; color: #fff5ee;}\n.seashell1 {background-color: #fff5ee; color: #fff5ee;}\n.seashell2 {background-color: #eee5de; color: #eee5de;}\n.seashell3 {background-color: #cdc5bf; color: #cdc5bf;}\n.seashell4 {background-color: #8b8682; color: #8b8682;}\n.sienna {background-color: #a0522d; color: #a0522d;}\n.sienna1 {background-color: #ff8247; color: #ff8247;}\n.sienna2 {background-color: #ee7942; color: #ee7942;}\n.sienna3 {background-color: #cd6839; color: #cd6839;}\n.sienna4 {background-color: #8b4726; color: #8b4726;}\n.silver {background-color: #c0c0c0; color: #c0c0c0;}\n.skyblue {background-color: #87ceeb; color: #87ceeb;}\n.skyblue1 {background-color: #87ceff; color: #87ceff;}\n.skyblue2 {background-color: #7ec0ee; color: #7ec0ee;}\n.skyblue3 {background-color: #6ca6cd; color: #6ca6cd;}\n.skyblue4 {background-color: #4a708b; color: #4a708b;}\n.slateblue {background-color: #6a5acd; color: #6a5acd;}\n.slateblue1 {background-color: #836fff; color: #836fff;}\n.slateblue2 {background-color: #7a67ee; color: #7a67ee;}\n.slateblue3 {background-color: #6959cd; color: #6959cd;}\n.slateblue4 {background-color: #473c8b; color: #473c8b;}\n.slategray {background-color: #708090; color: #708090;}\n.slategray1 {background-color: #c6e2ff; color: #c6e2ff;}\n.slategray2 {background-color: #b9d3ee; color: #b9d3ee;}\n.slategray3 {background-color: #9fb6cd; color: #9fb6cd;}\n.slategray4 {background-color: #6c7b8b; color: #6c7b8b;}\n.slategrey {background-color: #708090; color: #708090;}\n.snow {background-color: #fffafa; color: #fffafa;}\n.snow1 {background-color: #fffafa; color: #fffafa;}\n.snow2 {background-color: #eee9e9; color: #eee9e9;}\n.snow3 {background-color: #cdc9c9; color: #cdc9c9;}\n.snow4 {background-color: #8b8989; color: #8b8989;}\n.springgreen {background-color: #00ff7f; color: #00ff7f;}\n.springgreen1 {background-color: #00ff7f; color: #00ff7f;}\n.springgreen2 {background-color: #00ee76; color: #00ee76;}\n.springgreen3 {background-color: #00cd66; color: #00cd66;}\n.springgreen4 {background-color: #008b45; color: #008b45;}\n.steelblue {background-color: #4682b4; color: #4682b4;}\n.steelblue1 {background-color: #63b8ff; color: #63b8ff;}\n.steelblue2 {background-color: #5cacee; color: #5cacee;}\n.steelblue3 {background-color: #4f94cd; color: #4f94cd;}\n.steelblue4 {background-color: #36648b; color: #36648b;}\n.tan {background-color: #d2b48c; color: #d2b48c;}\n.tan1 {background-color: #ffa54f; color: #ffa54f;}\n.tan2 {background-color: #ee9a49; color: #ee9a49;}\n.tan3 {background-color: #cd853f; color: #cd853f;}\n.tan4 {background-color: #8b5a2b; color: #8b5a2b;}\n.teal {background-color: #008080; color: #008080;}\n.thistle {background-color: #d8bfd8; color: #d8bfd8;}\n.thistle1 {background-color: #ffe1ff; color: #ffe1ff;}\n.thistle2 {background-color: #eed2ee; color: #eed2ee;}\n.thistle3 {background-color: #cdb5cd; color: #cdb5cd;}\n.thistle4 {background-color: #8b7b8b; color: #8b7b8b;}\n.tomato {background-color: #ff6347; color: #ff6347;}\n.tomato1 {background-color: #ff6347; color: #ff6347;}\n.tomato2 {background-color: #ee5c42; color: #ee5c42;}\n.tomato3 {background-color: #cd4f39; color: #cd4f39;}\n.tomato4 {background-color: #8b3626; color: #8b3626;}\n.turquoise {background-color: #40e0d0; color: #40e0d0;}\n.turquoise1 {background-color: #00f5ff; color: #00f5ff;}\n.turquoise2 {background-color: #00e5ee; color: #00e5ee;}\n.turquoise3 {background-color: #00c5cd; color: #00c5cd;}\n.turquoise4 {background-color: #00868b; color: #00868b;}\n.violet {background-color: #ee82ee; color: #ee82ee;}\n.violetred {background-color: #d02090; color: #d02090;}\n.violetred1 {background-color: #ff3e96; color: #ff3e96;}\n.violetred2 {background-color: #ee3a8c; color: #ee3a8c;}\n.violetred3 {background-color: #cd3278; color: #cd3278;}\n.violetred4 {background-color: #8b2252; color: #8b2252;}\n.wheat {background-color: #f5deb3; color: #f5deb3;}\n.wheat1 {background-color: #ffe7ba; color: #ffe7ba;}\n.wheat2 {background-color: #eed8ae; color: #eed8ae;}\n.wheat3 {background-color: #cdba96; color: #cdba96;}\n.wheat4 {background-color: #8b7e66; color: #8b7e66;}\n.white {background-color: #ffffff; color: #ffffff;}\n.whitesmoke {background-color: #f5f5f5; color: #f5f5f5;}\n.yellow {background-color: #ffff00; color: #ffff00;}\n.yellow1 {background-color: #ffff00; color: #ffff00;}\n.yellow2 {background-color: #eeee00; color: #eeee00;}\n.yellow3 {background-color: #cdcd00; color: #cdcd00;}\n.yellow4 {background-color: #8b8b00; color: #8b8b00;}\n.yellowgreen {background-color: #9acd32; color: #9acd32;}\n```\n\n----------------------------------------\n\nTITLE: Accessing Surface Bit Shifts in Pygame\nDESCRIPTION: Method for setting the bit shifts needed to convert between a color and a mapped integer. This method is deprecated since Pygame 2.0.0 as shifts are now read-only and will raise a TypeError if called.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/surface.rst#2025-04-20_snippet_35\n\nLANGUAGE: python\nCODE:\n```\nset_shifts((r,g,b,a)) -> None\n```\n\n----------------------------------------\n\nTITLE: Checking Pip Installation\nDESCRIPTION: Command to verify pip installation by checking its version\nSOURCE: https://github.com/pygame/pygame/blob/main/README.rst#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip --version\n```\n\n----------------------------------------\n\nTITLE: Vector Coordinate Access Example - Python\nDESCRIPTION: Demonstrates how to access and set vector coordinates using attributes and subscripts in pygame's Vector3 class.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/math.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nv = pygame.Vector3()\n\nv.x = 5\nv[1] = 2 * v.x\nprint(v[1]) # 10\n\nv.x == v[0]\nv.y == v[1]\nv.z == v[2]\n```\n\n----------------------------------------\n\nTITLE: Defining MIME Types for Pygame Scrap Module\nDESCRIPTION: Lists the basic MIME data types defined and registered for use with the pygame.scrap module. These constants can be used for clipboard operations.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/scrap.rst#2025-04-20_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\npygame         string\nconstant        value        description\n--------------------------------------------------\nSCRAP_TEXT   \"text/plain\"    plain text\nSCRAP_BMP    \"image/bmp\"     BMP encoded image data\nSCRAP_PBM    \"image/pbm\"     PBM encoded image data\nSCRAP_PPM    \"image/ppm\"     PPM encoded image data\n```\n\n----------------------------------------\n\nTITLE: Configuring Conan Generators for Pygame\nDESCRIPTION: Specifies the generators used by Conan to create necessary build files. Uses JSON for dependency information and virtualrunenv for setting up the runtime environment.\nSOURCE: https://github.com/pygame/pygame/blob/main/buildconfig/conanconf/conanfile.txt#2025-04-20_snippet_1\n\nLANGUAGE: conan\nCODE:\n```\n[generators]\njson\nvirtualrunenv\n```\n\n----------------------------------------\n\nTITLE: Create Video Info Object\nDESCRIPTION: Function to create a new pgVidInfoObject from an SDL_VideoInfo struct. Returns NULL and raises Python exception on failure.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/c_api/display.rst#2025-04-20_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nPyObject* pgVidInfo_New(SDL_VideoInfo *i)\n```\n\n----------------------------------------\n\nTITLE: Checking if CD Drive is Empty\nDESCRIPTION: Method to check if there is a CD in the drive. Returns True if the drive is empty, False otherwise.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/cdrom.rst#2025-04-20_snippet_18\n\nLANGUAGE: Python\nCODE:\n```\nget_empty() -> bool\n```\n\n----------------------------------------\n\nTITLE: Checking Python Installation\nDESCRIPTION: Command to verify Python installation by checking its version\nSOURCE: https://github.com/pygame/pygame/blob/main/README.rst#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython --version\n```\n\n----------------------------------------\n\nTITLE: Module Level Tagging Example\nDESCRIPTION: Example of how to implement module-level tags in PyGame tests. Tags are used to categorize tests and control which tests are run.\nSOURCE: https://github.com/pygame/pygame/blob/main/test/README.rst#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n__tags__ = ['display', 'interactive']\n```\n\n----------------------------------------\n\nTITLE: Generating Pygame Documentation\nDESCRIPTION: Command to run the documentation generation process using the project's setup script\nSOURCE: https://github.com/pygame/pygame/blob/main/src_c/doc/README.rst#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython setup.py docs\n```\n\n----------------------------------------\n\nTITLE: Writing Short MIDI Messages\nDESCRIPTION: Shows how to write short MIDI messages (up to 3 bytes) using the Output.write_short() method. Includes examples of status byte values and usage.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/midi.rst#2025-04-20_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n0xc0  # program change\n0x90  # note on\n# etc.\n```\n\nLANGUAGE: Python\nCODE:\n```\n# note 65 on with velocity 100\nwrite_short(0x90, 65, 100)\n```\n\n----------------------------------------\n\nTITLE: Advanced Slicing with Increments in NumPy Arrays\nDESCRIPTION: Shows how to use slice increments in NumPy arrays to select specific elements, including reverse slicing.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/tut/SurfarrayIntro.rst#2025-04-20_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> c = arange(10)                         #like range, but makes an array\n>>> c                                      #show the array\narray([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n>>> c[1:6:2]                               #slice odd values from 1 to 6\narray([1, 3, 5])\n>>> c[4::4]                                #slice every 4th val starting at 4\narray([4, 8])\n>>> c[8:1:-1]                              #slice 1 to 8, reversed\narray([8, 7, 6, 5, 4, 3, 2])\n```\n\n----------------------------------------\n\nTITLE: Defining Standard Web Color Classes in CSS\nDESCRIPTION: This snippet defines CSS classes for standard web colors and their variations. Each class sets both the background-color and color properties to the same hex value.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/color_list.rst#2025-04-20_snippet_5\n\nLANGUAGE: CSS\nCODE:\n```\n.linen {background-color: #faf0e6; color: #faf0e6;}\n.limegreen {background-color: #32cd32; color: #32cd32;}\n.lime {background-color: #00ff00; color: #00ff00;}\n.magenta {background-color: #ff00ff; color: #ff00ff;}\n.magenta1 {background-color: #ff00ff; color: #ff00ff;}\n.magenta2 {background-color: #ee00ee; color: #ee00ee;}\n.magenta3 {background-color: #cd00cd; color: #cd00cd;}\n.magenta4 {background-color: #8b008b; color: #8b008b;}\n.maroon {background-color: #b03060; color: #b03060;}\n.maroon1 {background-color: #ff34b3; color: #ff34b3;}\n.maroon2 {background-color: #ee30a7; color: #ee30a7;}\n.maroon3 {background-color: #cd2990; color: #cd2990;}\n.maroon4 {background-color: #8b1c62; color: #8b1c62;}\n.mediumaquamarine {background-color: #66cdaa; color: #66cdaa;}\n.mediumblue {background-color: #0000cd; color: #0000cd;}\n.mediumorchid {background-color: #ba55d3; color: #ba55d3;}\n.mediumorchid1 {background-color: #e066ff; color: #e066ff;}\n.mediumorchid2 {background-color: #d15fee; color: #d15fee;}\n.mediumorchid3 {background-color: #b452cd; color: #b452cd;}\n.mediumorchid4 {background-color: #7a378b; color: #7a378b;}\n.mediumpurple {background-color: #9370db; color: #9370db;}\n.mediumpurple1 {background-color: #ab82ff; color: #ab82ff;}\n.mediumpurple2 {background-color: #9f79ee; color: #9f79ee;}\n.mediumpurple3 {background-color: #8968cd; color: #8968cd;}\n.mediumpurple4 {background-color: #5d478b; color: #5d478b;}\n.mediumseagreen {background-color: #3cb371; color: #3cb371;}\n.mediumslateblue {background-color: #7b68ee; color: #7b68ee;}\n.mediumspringgreen {background-color: #00fa9a; color: #00fa9a;}\n.mediumturquoise {background-color: #48d1cc; color: #48d1cc;}\n.mediumvioletred {background-color: #c71585; color: #c71585;}\n.midnightblue {background-color: #191970; color: #191970;}\n.mintcream {background-color: #f5fffa; color: #f5fffa;}\n.mistyrose {background-color: #ffe4e1; color: #ffe4e1;}\n.mistyrose1 {background-color: #ffe4e1; color: #ffe4e1;}\n.mistyrose2 {background-color: #eed5d2; color: #eed5d2;}\n.mistyrose3 {background-color: #cdb7b5; color: #cdb7b5;}\n.mistyrose4 {background-color: #8b7d7b; color: #8b7d7b;}\n.moccasin {background-color: #ffe4b5; color: #ffe4b5;}\n.navajowhite {background-color: #ffdead; color: #ffdead;}\n.navajowhite1 {background-color: #ffdead; color: #ffdead;}\n.navajowhite2 {background-color: #eecfa1; color: #eecfa1;}\n.navajowhite3 {background-color: #cdb38b; color: #cdb38b;}\n.navajowhite4 {background-color: #8b795e; color: #8b795e;}\n.navy {background-color: #000080; color: #000080;}\n.navyblue {background-color: #000080; color: #000080;}\n.oldlace {background-color: #fdf5e6; color: #fdf5e6;}\n.olive {background-color: #808000; color: #808000;}\n.olivedrab {background-color: #6b8e23; color: #6b8e23;}\n.olivedrab1 {background-color: #c0ff3e; color: #c0ff3e;}\n.olivedrab2 {background-color: #b3ee3a; color: #b3ee3a;}\n.olivedrab3 {background-color: #9acd32; color: #9acd32;}\n.olivedrab4 {background-color: #698b22; color: #698b22;}\n.orange {background-color: #ffa500; color: #ffa500;}\n```\n\n----------------------------------------\n\nTITLE: Implementing Lifetime Lock Creation Function in C for Pygame\nDESCRIPTION: Implements a function to create a new pgLifetimeLock_Type instance for a surface lock. This function is not used within pygame and may be removed in the future.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/c_api/surflock.rst#2025-04-20_snippet_6\n\nLANGUAGE: c\nCODE:\n```\nPyObject *pgSurface_LockLifetime(PyObject *surfobj, PyObject *lockobj);\n```\n\n----------------------------------------\n\nTITLE: SDL Video Info Type Definition\nDESCRIPTION: Defines the pgVidInfoObject type that wraps an SDL_VideoInfo struct, used by pygame.display.Info()\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/c_api/display.rst#2025-04-20_snippet_0\n\nLANGUAGE: c\nCODE:\n```\ntypedef struct { /* pgVidInfoObject */ \n    /* Implied from context but not shown in snippet */\n} pgVidInfoObject;\n```\n\n----------------------------------------\n\nTITLE: Setting Up Vagrant VM for Building Pygame Wheels\nDESCRIPTION: Instructions for setting up a Vagrant virtual machine with Ubuntu to build Pygame wheels. This allows building wheels from any host OS including macOS and Windows.\nSOURCE: https://github.com/pygame/pygame/blob/main/buildconfig/manylinux-build/README.rst#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# You should be in the base of the pygame repo when you run all this.\n$ pwd\n/home/jblogs/pygame\n\n# Download many megabytes of ubuntu.\nmkdir vagrant.xenial64\ncd vagrant.xenial64\nvagrant init ubuntu/xenial64\n```\n\n----------------------------------------\n\nTITLE: Setting Italic Text in Pygame\nDESCRIPTION: The set_italic method enables fake rendering of italic text. It takes a boolean parameter to enable or disable italic rendering.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/font.rst#2025-04-20_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\nFont.set_italic(bool) -> None\n```\n\n----------------------------------------\n\nTITLE: Advanced Slicing of 2D NumPy Arrays in Python\nDESCRIPTION: Shows advanced slicing techniques for 2D NumPy arrays, including selecting specific elements, rows, columns, and sub-arrays. Demonstrates the use of ':' for selecting all elements in a dimension.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/es/tutorials/SurfarrayIntro.rst#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> b                                      #mostrar nuestro array desde arriba\narray([[1, 2, 3],\n       [3, 4, 5]])\n>>> b[0,1]                                 #indexar un único valor\n2\n>>> b[1,:]                                 #dividir la segunda fila\narray([3, 4, 5])\n>>> b[1]                                   #dividir la segunda fila (igual que arriba)\narray([3, 4, 5])\n>>> b[:,2]                                 #dividir la última columna\narray([3, 5])\n>>> b[:,:2]                                #dividir en un array de 2x2\narray([[1, 2],\n       [3, 4]])\n```\n\n----------------------------------------\n\nTITLE: Retrieving Raw Buffer Data in Python\nDESCRIPTION: Returns a copy of the exported buffer as a single block of bytes, with any gaps in the exported data removed.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/es/referencias/bufferproxy.rst#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nraw -> bytes\n```\n\n----------------------------------------\n\nTITLE: Defining ReStructuredText Color Roles\nDESCRIPTION: A collection of role definitions that establish text formatting for different colors and their variations in ReStructuredText documentation. Each role corresponds to a specific color value that can be used for text styling.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/es/color_list.rst#2025-04-20_snippet_5\n\nLANGUAGE: rst\nCODE:\n```\n.. role:: paleturquoise3\n.. role:: paleturquoise4\n.. role:: palevioletred\n.. role:: palevioletred1\n.. role:: palevioletred2\n.. role:: palevioletred3\n.. role:: palevioletred4\n.. role:: papayawhip\n.. role:: peachpuff\n.. role:: peachpuff1\n.. role:: peachpuff2\n.. role:: peachpuff3\n.. role:: peachpuff4\n.. role:: peru\n.. role:: pink\n.. role:: pink1\n.. role:: pink2\n.. role:: pink3\n.. role:: pink4\n```\n\n----------------------------------------\n\nTITLE: Window Management Functions in C\nDESCRIPTION: Functions for managing the default SDL window and surface in pygame.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/c_api/base.rst#2025-04-20_snippet_5\n\nLANGUAGE: c\nCODE:\n```\nSDL_Window* pg_GetDefaultWindow(void);\nvoid pg_SetDefaultWindow(SDL_Window *win);\npgSurfaceObject* pg_GetDefaultWindowSurface(void);\nvoid pg_SetDefaultWindowSurface(pgSurfaceObject *screen);\n```\n\n----------------------------------------\n\nTITLE: Starting Vagrant VM for Pygame Build\nDESCRIPTION: Commands to start the Vagrant VM and SSH into it to begin the setup process for Docker and the build environment.\nSOURCE: https://github.com/pygame/pygame/blob/main/buildconfig/manylinux-build/README.rst#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# now start vagrant.\nvagrant up\nvagrant ssh\n```\n\n----------------------------------------\n\nTITLE: SDL Environment Variables Configuration\nDESCRIPTION: Various SDL-specific environment variables for window positioning, drivers, and system behavior\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/pygame.rst#2025-04-20_snippet_8\n\nLANGUAGE: text\nCODE:\n```\nSDL_VIDEO_CENTERED -\\nSet to \"1\" to enable centering the window.\\n\\nSDL_VIDEO_WINDOW_POS -\\nSet to \"x,y\" to position the top left corner of the window.\\n\\nSDL_VIDEODRIVER -\\nSet to \"drivername\" to change the video driver used.\\n\\nSDL_AUDIODRIVER -\\nSet to \"drivername\" to change the audio driver used.\n```\n\n----------------------------------------\n\nTITLE: Importing and Using NumPy Arrays in Python\nDESCRIPTION: Demonstrates basic NumPy array creation, indexing, and operations. Shows how to create 1D and 2D arrays, perform element-wise operations, and slice arrays.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/tut/SurfarrayIntro.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> from numpy import *                    #import numeric\n>>> a = array((1,2,3,4,5))                 #create an array\n>>> a                                      #display the array\narray([1, 2, 3, 4, 5])\n>>> a[2]                                   #index into the array\n3\n>>> a*2                                    #new array with twiced values\narray([ 2,  4,  6,  8, 10])\n```\n\n----------------------------------------\n\nTITLE: Installing Docker on Ubuntu Vagrant VM\nDESCRIPTION: Commands to install Docker on the Ubuntu Vagrant VM following the official Docker installation instructions for Ubuntu Xenial.\nSOURCE: https://github.com/pygame/pygame/blob/main/buildconfig/manylinux-build/README.rst#2025-04-20_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n# now we are on the vagrant ubuntu host\n# We set up docker following these instructions for ubuntu-xenial\n# https://docs.docker.com/install/linux/docker-ce/ubuntu/#install-docker-ce-1\nsudo apt-get update\nsudo apt-get remove docker docker-engine docker.io\nsudo apt-get install apt-transport-https ca-certificates curl software-properties-common\n```\n\n----------------------------------------\n\nTITLE: Getting the parent object from a BufferProxy in C\nDESCRIPTION: Function to retrieve the Python object wrapped by a buffer proxy. The obj argument must not be NULL. Returns NULL on failure with a Python error raised.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/c_api/bufferproxy.rst#2025-04-20_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nPyObject* pgBufproxy_GetParent(PyObject *obj)\n```\n\n----------------------------------------\n\nTITLE: Custom Event Creation Function in C\nDESCRIPTION: Function to create a new pygame event with specified type and attribute dictionary. Creates empty dictionary if dict parameter is NULL.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/c_api/event.rst#2025-04-20_snippet_3\n\nLANGUAGE: c\nCODE:\n```\nPyObject* pgEvent_New2(int type, PyObject *dict)\n```\n\n----------------------------------------\n\nTITLE: Creating a new BufferProxy in C\nDESCRIPTION: Function to create a new pygame.BufferProxy instance. Takes the Python object whose data is to be exposed and a get_buffer callback. Returns NULL on failure with a Python error raised.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/c_api/bufferproxy.rst#2025-04-20_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nPyObject* pgBufproxy_New(PyObject *obj, getbufferproc get_buffer)\n```\n\n----------------------------------------\n\nTITLE: Importing the pygame.gfxdraw module in Python\nDESCRIPTION: Shows how to explicitly import the pygame.gfxdraw module, as it's not automatically imported with pygame.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/gfxdraw.rst#2025-04-20_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport pygame\nimport pygame.gfxdraw\n```\n\n----------------------------------------\n\nTITLE: Releasing SDL_RWops Resources in C for Pygame\nDESCRIPTION: Function that frees an SDL_RWops struct. If it wraps a Python file-like object, decrements its reference count. Otherwise, closes the file handle.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/c_api/rwobject.rst#2025-04-20_snippet_3\n\nLANGUAGE: c\nCODE:\n```\nint pgRWops_ReleaseObject(SDL_RWops *context)\n```\n\n----------------------------------------\n\nTITLE: Implementing Surface Locking Functions in C for Pygame\nDESCRIPTION: Implements functions to lock surfaces, either with the surface owning its own lock or with a specified Python object owning the lock.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/c_api/surflock.rst#2025-04-20_snippet_4\n\nLANGUAGE: c\nCODE:\n```\nint pgSurface_Lock(pgSurfaceObject *surfobj);\nint pgSurface_LockBy(pgSurfaceObject *surfobj, PyObject *lockobj);\n```\n\n----------------------------------------\n\nTITLE: Class Level Tag Override\nDESCRIPTION: Example showing how to override inherited tags at the TestCase class level using tag negation.\nSOURCE: https://github.com/pygame/pygame/blob/main/test/README.rst#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass SomeTest(unittest.TestCase):\n    __tags__ = ['-interactive']\n```\n\n----------------------------------------\n\nTITLE: Loading Images in Pygame\nDESCRIPTION: This code snippet shows how to load and convert images in Pygame. The convert() method is used to optimize the image format for faster blitting.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/es/tutorials/MoverImagen.rst#2025-04-20_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nplayer = pygame.image.load('player.bmp').convert()\nbackground = pygame.image.load('liquid.bmp').convert()\n```\n\n----------------------------------------\n\nTITLE: Drawing HP Bar in Pygame\nDESCRIPTION: This function draws a health point (HP) bar on the Pygame screen. It uses rectangles to represent the maximum HP and current HP, with different colors to distinguish between filled and empty HP slots.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/tut/en/Red_or_Black/6.Buttons/Advanced INPUT with Advanced OUTPUT.rst#2025-04-20_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\ndef drawHP(HP):\n    r = int((height - 40) / maxHP)\n\n    pygame.draw.rect(myScreen, black, (20, 20, 20, 20 + ((maxHP - 0.5) * r)))\n\n    for i in range(maxHP):\n        if HP >= (maxHP - i):\n            pygame.draw.rect(myScreen, red, (20, 20 + (i * r), 20, r))\n        pygame.draw.rect(myScreen, white, (20, 20 + (i * r), 20, r), 1)\n\n    return\n```\n\n----------------------------------------\n\nTITLE: Declaring pgLifetimeLock_Type in C for Pygame Surface Locking\nDESCRIPTION: Declares the pygame internal surflock lifetime lock object type.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/c_api/surflock.rst#2025-04-20_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nPyTypeObject *pgLifetimeLock_Type;\n```\n\n----------------------------------------\n\nTITLE: Creating SDL_RWops from Python Objects in C for Pygame\nDESCRIPTION: Function that creates an SDL_RWops struct from a Python object. If the object is a string, SDL opens the named file. For file-like objects, it uses the object's read/write/seek/tell/close methods. Can optionally return the file extension.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/c_api/rwobject.rst#2025-04-20_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nSDL_RWops* pgRWops_FromObject(PyObject *obj, char **extptr)\n```\n\n----------------------------------------\n\nTITLE: Setting Text Underline in Pygame\nDESCRIPTION: The set_underline method controls whether text is rendered with an underline. It takes a boolean parameter to enable or disable the underline.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/font.rst#2025-04-20_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nFont.set_underline(bool) -> None\n```\n\n----------------------------------------\n\nTITLE: Procesando Eventos de Pygame para Control de Usuario\nDESCRIPTION: Código para manejar eventos de teclado en Pygame, permitiendo al jugador controlar un bate con las teclas de dirección. Detecta pulsaciones y liberaciones de teclas para iniciar y detener movimientos.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/es/tutorials/tom_juegos5.rst#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfor event in pygame.event.get():\n    if event.type == QUIT:\n        return\n    elif event.type == KEYDOWN:\n        if event.key == K_UP:\n            player.moveup()\n        if event.key == K_DOWN:\n            player.movedown()\n    elif event.type == KEYUP:\n        if event.key == K_UP or event.key == K_DOWN:\n            player.movepos = [0,0]\n            player.state = \"still\"\n```\n\n----------------------------------------\n\nTITLE: Implementing pgLifetimeLock_Check Function in C for Pygame Surface Locking\nDESCRIPTION: Implements a function to check if a Python object is a pgLifetimeLock_Type instance. Returns false for subclass instances.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/c_api/surflock.rst#2025-04-20_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nint pgLifetimeLock_Check(PyObject *x);\n```\n\n----------------------------------------\n\nTITLE: Getting Supported Array Types in Pygame (Deprecated)\nDESCRIPTION: The get_arraytypes function checks which array systems are available and returns them as a tuple of strings. The values can be used in the use_arraytype() method. Returns None if no supported array system is found. This function is deprecated and will raise a DeprecationWarning.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/surfarray.rst#2025-04-20_snippet_18\n\nLANGUAGE: Python\nCODE:\n```\nget_arraytypes () -> tuple\n```\n\n----------------------------------------\n\nTITLE: Installing and Configuring Pygame with Conan\nDESCRIPTION: Complete setup process for installing Pygame using Conan package manager, including dependency installation, environment configuration, and build steps. Also includes optional wheel creation and testing commands.\nSOURCE: https://github.com/pygame/pygame/blob/main/buildconfig/conanconf/README.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# install conan\npython3 -m pip install conan\n\n# add the bincrafters conan repository.\nconan remote add bincrafters https://api.bintray.com/conan/bincrafters/public-conan\n\n# add the pygame conan repository.\nconan remote add pygame-repo https://api.bintray.com/conan/pygame/pygame\n\n# install dependencies with conan, and write a `Setup` file for pygame to build with.\npython3 buildconfig/config.py -conan\n\n# add conan library paths to your environment using virtualrunenv\nsource build/conan/activate_run.sh # Windows: activate_run.bat without the source\n\n# now install pygame either with setup install, or make a wheel.\npython3 setup.py install\n\n# OR create the wheel\n# python3 setup.py bdist_wheel\n\n# OSX only: bundle the libraries with the wheels using `delocate`\n# python3 -m pip install delocate --user\n# delocate-wheel -v dist/*.whl\n\n# or install install the pygame wheel file\n# python3 -m pip install dist/*.whl --user\n\n# test the build\npython3 -m pygame.example.aliens\npython3 -m pygame.tests\n```\n\n----------------------------------------\n\nTITLE: Resuming Paused Audio\nDESCRIPTION: Method to resume playback of a paused CD. Has no effect if the CD is not paused.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/cdrom.rst#2025-04-20_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\nresume() -> None\n```\n\n----------------------------------------\n\nTITLE: Defining RST Color Roles for Documentation\nDESCRIPTION: Role definitions for applying color styling to text in RST documentation. Each role corresponds to a specific color name or variant.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/color_list.rst#2025-04-20_snippet_8\n\nLANGUAGE: rst\nCODE:\n```\n.. role:: aquamarine1\n.. role:: aquamarine2\n.. role:: aquamarine3\n.. role:: aquamarine4\n.. role:: azure\n.. role:: azure1\n.. role:: azure2\n.. role:: azure3\n.. role:: azure4\n.. role:: beige\n[...]\n.. role:: paleturquoise1\n.. role:: paleturquoise2\n```\n\n----------------------------------------\n\nTITLE: Getting CD Drive Count\nDESCRIPTION: Function to return the number of CD drives on the system. Returns 0 if there are no drives.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/cdrom.rst#2025-04-20_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nget_count() -> count\n```\n\n----------------------------------------\n\nTITLE: Advanced NumPy Array Operations in Python\nDESCRIPTION: Shows more advanced NumPy array operations including length, slicing, addition of slices, and error handling for mismatched array sizes. Demonstrates how array slices reference the original data.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/es/tutorials/SurfarrayIntro.rst#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> len(a)                                 #obtener el tamaño del array\n5\n>>> a[2:]                                  #elementos a partir del 2\narray([3, 4, 5])\n>>> a[:-2]                                 #todos excepto los últimos 2\narray([1, 2, 3])\n>>> a[2:] + a[:-2]                         #agregar el primero y último\narray([4, 6, 8])\n>>> array((1,2,3)) + array((3,4))          #agregar arrays de tamaños incorrectos\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nValueError: operands could not be broadcast together with shapes (3,) (2,)\n```\n\n----------------------------------------\n\nTITLE: Getting CD Drive Name\nDESCRIPTION: Method to get the system name of the CD drive, often the drive letter or device name. Works on uninitialized CD objects.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/cdrom.rst#2025-04-20_snippet_14\n\nLANGUAGE: Python\nCODE:\n```\nget_name() -> name\n```\n\n----------------------------------------\n\nTITLE: Pulling Prebuilt Docker Base Images for Pygame Dependencies\nDESCRIPTION: Commands to pull prebuilt Docker base images containing Pygame dependencies for different architectures. These images are used as a foundation for building Pygame wheels without rebuilding all dependencies each time.\nSOURCE: https://github.com/pygame/pygame/blob/main/buildconfig/manylinux-build/README.rst#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake pull-x64    # 64 bit, or\nmake pull-x86    # 32 bit, or\nmake pull        # Both\n```\n\n----------------------------------------\n\nTITLE: Rebuilding Docker Base Images for Pygame Dependencies\nDESCRIPTION: Commands to rebuild the Docker base images if dependencies have been modified. This is necessary when files in the 'docker_base' directory have been changed.\nSOURCE: https://github.com/pygame/pygame/blob/main/buildconfig/manylinux-build/README.rst#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmake base-image-x64  # 64 bit, or\nmake base-image-x86  # 32 bit, or\nmake base-images     # both\n```\n\n----------------------------------------\n\nTITLE: Creating CD Object\nDESCRIPTION: Class constructor to create a CD object for managing a specific cdrom drive. The id parameter is an integer starting at zero that identifies which drive to use.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/cdrom.rst#2025-04-20_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nCD(id) -> CD\n```\n\n----------------------------------------\n\nTITLE: Checking CD Drive Initialization\nDESCRIPTION: Method to check if a specific CD drive is initialized. Returns a boolean value.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/cdrom.rst#2025-04-20_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\nget_init() -> bool\n```\n\n----------------------------------------\n\nTITLE: Advanced NumPy Array Operations in Python\nDESCRIPTION: Shows more complex NumPy array operations including array slicing, element-wise addition, and error handling for mismatched array sizes.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/tut/SurfarrayIntro.rst#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> len(a)                                 #get array size\n5\n>>> a[2:]                                  #elements 2 and up\narray([3, 4, 5])\n>>> a[:-2]                                 #all except last 2\narray([1, 2, 3])\n>>> a[2:] + a[:-2]                         #add first and last\narray([4, 6, 8])\n>>> array((1,2,3)) + array((3,4))          #add arrays of wrong sizes\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nValueError: operands could not be broadcast together with shapes (3,) (2,)\n```\n\n----------------------------------------\n\nTITLE: Getting Track Length\nDESCRIPTION: Method to get the length in seconds of a specific track on the CD. Track numbers start at zero.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/cdrom.rst#2025-04-20_snippet_23\n\nLANGUAGE: Python\nCODE:\n```\nget_track_length(track) -> seconds\n```\n\n----------------------------------------\n\nTITLE: Defining reStructuredText Color Roles in Pygame Documentation\nDESCRIPTION: This snippet defines numerous reStructuredText roles for color formatting in documentation. Each role corresponds to a specific color name, creating a comprehensive color palette for styling text in Pygame's documentation system.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/color_list.rst#2025-04-20_snippet_9\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. role:: paleturquoise3\n.. role:: paleturquoise4\n.. role:: palevioletred\n.. role:: palevioletred1\n.. role:: palevioletred2\n.. role:: palevioletred3\n.. role:: palevioletred4\n.. role:: papayawhip\n.. role:: peachpuff\n.. role:: peachpuff1\n.. role:: peachpuff2\n.. role:: peachpuff3\n.. role:: peachpuff4\n.. role:: peru\n.. role:: pink\n.. role:: pink1\n.. role:: pink2\n.. role:: pink3\n.. role:: pink4\n.. role:: plum\n.. role:: plum1\n.. role:: plum2\n.. role:: plum3\n.. role:: plum4\n.. role:: powderblue\n.. role:: purple\n.. role:: purple1\n.. role:: purple2\n.. role:: purple3\n.. role:: purple4\n.. role:: red\n.. role:: red1\n.. role:: red2\n.. role:: red3\n.. role:: red4\n.. role:: rosybrown\n.. role:: rosybrown1\n.. role:: rosybrown2\n.. role:: rosybrown3\n.. role:: rosybrown4\n.. role:: royalblue\n.. role:: royalblue1\n.. role:: royalblue2\n.. role:: royalblue3\n.. role:: royalblue4\n.. role:: saddlebrown\n.. role:: salmon\n.. role:: salmon1\n.. role:: salmon2\n.. role:: salmon3\n.. role:: salmon4\n.. role:: sandybrown\n.. role:: seagreen\n.. role:: seagreen1\n.. role:: seagreen2\n.. role:: seagreen3\n.. role:: seagreen4\n.. role:: seashell\n.. role:: seashell1\n.. role:: seashell2\n.. role:: seashell3\n.. role:: seashell4\n.. role:: sienna\n.. role:: sienna1\n.. role:: sienna2\n.. role:: sienna3\n.. role:: sienna4\n.. role:: silver\n.. role:: skyblue\n.. role:: skyblue1\n.. role:: skyblue2\n.. role:: skyblue3\n.. role:: skyblue4\n.. role:: slateblue\n.. role:: slateblue1\n.. role:: slateblue2\n.. role:: slateblue3\n.. role:: slateblue4\n.. role:: slategray\n.. role:: slategray1\n.. role:: slategray2\n.. role:: slategray3\n.. role:: slategray4\n.. role:: slategrey\n.. role:: snow\n.. role:: snow1\n.. role:: snow2\n.. role:: snow3\n.. role:: snow4\n.. role:: springgreen\n.. role:: springgreen1\n.. role:: springgreen2\n.. role:: springgreen3\n.. role:: springgreen4\n.. role:: steelblue\n.. role:: steelblue1\n.. role:: steelblue2\n.. role:: steelblue3\n.. role:: steelblue4\n.. role:: tan\n.. role:: tan1\n.. role:: tan2\n.. role:: tan3\n.. role:: tan4\n.. role:: teal\n.. role:: thistle\n.. role:: thistle1\n.. role:: thistle2\n.. role:: thistle3\n.. role:: thistle4\n.. role:: tomato\n.. role:: tomato1\n.. role:: tomato2\n.. role:: tomato3\n.. role:: tomato4\n.. role:: turquoise\n.. role:: turquoise1\n.. role:: turquoise2\n.. role:: turquoise3\n.. role:: turquoise4\n.. role:: violet\n.. role:: violetred\n.. role:: violetred1\n.. role:: violetred2\n.. role:: violetred3\n.. role:: violetred4\n.. role:: wheat\n.. role:: wheat1\n.. role:: wheat2\n.. role:: wheat3\n.. role:: wheat4\n.. role:: white\n.. role:: whitesmoke\n.. role:: yellow\n.. role:: yellow1\n.. role:: yellow2\n.. role:: yellow3\n.. role:: yellow4\n.. role:: yellowgreen\n```\n\n----------------------------------------\n\nTITLE: Running Docker Containers for Development\nDESCRIPTION: Commands to run Docker containers with interactive shells for development and debugging purposes. These commands allow accessing the manylinux base images directly.\nSOURCE: https://github.com/pygame/pygame/blob/main/buildconfig/manylinux-build/README.rst#2025-04-20_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --name manylinux2010_base_x86_64 -it pygame/manylinux2010_base_x86_64\ndocker run --name manylinux2010_base_i686 -it pygame/manylinux2010_base_i686\n\ndocker run --name manylinux1_base_x86_64 -it pygame/manylinux1_base_x86_64\ndocker run --name manylinux1_base_i686 -it pygame/manylinux1_base_i686\n```\n\n----------------------------------------\n\nTITLE: Setting Surface Color Masks in Pygame (Deprecated)\nDESCRIPTION: Sets the bitmasks used to isolate each color in a mapped integer. This method is deprecated as of Pygame 2.0 and will raise a TypeError if called.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/surface.rst#2025-04-20_snippet_33\n\nLANGUAGE: python\nCODE:\n```\nset_masks((r,g,b,a)) -> None\n```\n\n----------------------------------------\n\nTITLE: PixelArray Range Assignment\nDESCRIPTION: Examples of assigning colors to ranges of pixels using various formats including hex values, tuples, and lists.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/pixelarray.rst#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\npxarray[a:b] = 0xFF00FF                   # set all pixels to 0xFF00FF\npxarray[a:b] = (0xFF00FF, 0xAACCEE, ... ) # first pixel = 0xFF00FF,\n                                           # second pixel  = 0xAACCEE, ...\npxarray[a:b] = [(255, 0, 255), (170, 204, 238), ...] # same as above\npxarray[a:b] = [(255, 0, 255), 0xAACCEE, ...]        # same as above\npxarray[a:b] = otherarray[x:y]            # slice sizes must match\n```\n\n----------------------------------------\n\nTITLE: Writing System-Exclusive MIDI Messages\nDESCRIPTION: Demonstrates how to write system-exclusive MIDI messages using the Output.write_sys_ex() method. Shows both string and list input formats.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/midi.rst#2025-04-20_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nmidi_output.write_sys_ex(0, '\\xF0\\x7D\\x10\\x11\\x12\\x13\\xF7')\n\n# is equivalent to\n\nmidi_output.write_sys_ex(pygame.midi.time(),\n                         [0xF0, 0x7D, 0x10, 0x11, 0x12, 0x13, 0xF7])\n```\n\n----------------------------------------\n\nTITLE: Color Table Display in Pygame Documentation\nDESCRIPTION: This snippet displays a table of color names with visual examples of each color. The table format includes two columns - the color name and a visual representation of the color using the corresponding reStructuredText role.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/color_list.rst#2025-04-20_snippet_10\n\nLANGUAGE: reStructuredText\nCODE:\n```\n==========================  ======================================================================================================\nName                        Color\n==========================  ======================================================================================================\n``aliceblue``               :aliceblue:`████████`\n``antiquewhite``            :antiquewhite:`████████`\n``antiquewhite1``           :antiquewhite1:`████████`\n``antiquewhite2``           :antiquewhite2:`████████`\n``antiquewhite3``           :antiquewhite3:`████████`\n``antiquewhite4``           :antiquewhite4:`████████`\n``aqua``                    :aqua:`████████`\n``aquamarine``              :aquamarine:`████████`\n``aquamarine1``             :aquamarine1:`████████`\n``aquamarine2``             :aquamarine2:`████████`\n``aquamarine3``             :aquamarine3:`████████`\n``aquamarine4``             :aquamarine4:`████████`\n``azure``                   :azure:`████████`\n``azure1``                  :azure1:`████████`\n``azure2``                  :azure2:`████████`\n``azure3``                  :azure3:`████████`\n``azure4``                  :azure4:`████████`\n``beige``                   :beige:`████████`\n``bisque``                  :bisque:`████████`\n``bisque1``                 :bisque1:`████████`\n``bisque2``                 :bisque2:`████████`\n``bisque3``                 :bisque3:`████████`\n``bisque4``                 :bisque4:`████████`\n``black``                   :black:`████████`\n``blanchedalmond``          :blanchedalmond:`████████`\n``blue``                    :blue:`████████`\n``blue1``                   :blue1:`████████`\n``blue2``                   :blue2:`████████`\n``blue3``                   :blue3:`████████`\n``blue4``                   :blue4:`████████`\n``blueviolet``              :blueviolet:`████████`\n``brown``                   :brown:`████████`\n``brown1``                  :brown1:`████████`\n``brown2``                  :brown2:`████████`\n``brown3``                  :brown3:`████████`\n``brown4``                  :brown4:`████████`\n``burlywood``               :burlywood:`████████`\n``burlywood1``              :burlywood1:`████████`\n``burlywood2``              :burlywood2:`████████`\n``burlywood3``              :burlywood3:`████████`\n``burlywood4``              :burlywood4:`████████`\n``cadetblue``               :cadetblue:`████████`\n``cadetblue1``              :cadetblue1:`████████`\n``cadetblue2``              :cadetblue2:`████████`\n``cadetblue3``              :cadetblue3:`████████`\n``cadetblue4``              :cadetblue4:`████████`\n``chartreuse``              :chartreuse:`████████`\n``chartreuse1``             :chartreuse1:`████████`\n``chartreuse2``             :chartreuse2:`████████`\n``chartreuse3``             :chartreuse3:`████████`\n``chartreuse4``             :chartreuse4:`████████`\n``chocolate``               :chocolate:`████████`\n``chocolate1``              :chocolate1:`████████`\n``chocolate2``              :chocolate2:`████████`\n``chocolate3``              :chocolate3:`████████`\n``chocolate4``              :chocolate4:`████████`\n``coral``                   :coral:`████████`\n``coral1``                  :coral1:`████████`\n``coral2``                  :coral2:`████████`\n``coral3``                  :coral3:`████████`\n``coral4``                  :coral4:`████████`\n``cornflowerblue``          :cornflowerblue:`████████`\n``cornsilk``                :cornsilk:`████████`\n``cornsilk1``               :cornsilk1:`████████`\n``cornsilk2``               :cornsilk2:`████████`\n``cornsilk3``               :cornsilk3:`████████`\n``cornsilk4``               :cornsilk4:`████████`\n``crimson``                 :crimson:`████████`\n``cyan``                    :cyan:`████████`\n``cyan1``                   :cyan1:`████████`\n``cyan2``                   :cyan2:`████████`\n``cyan3``                   :cyan3:`████████`\n``cyan4``                   :cyan4:`████████`\n``darkblue``                :darkblue:`████████`\n``darkcyan``                :darkcyan:`████████`\n``darkgoldenrod``           :darkgoldenrod:`████████`\n``darkgoldenrod1``          :darkgoldenrod1:`████████`\n``darkgoldenrod2``          :darkgoldenrod2:`████████`\n``darkgoldenrod3``          :darkgoldenrod3:`████████`\n``darkgoldenrod4``          :darkgoldenrod4:`████████`\n``darkgray``                :darkgray:`████████`\n``darkgreen``               :darkgreen:`████████`\n``darkgrey``                :darkgrey:`████████`\n``darkkhaki``               :darkkhaki:`████████`\n``darkmagenta``             :darkmagenta:`████████`\n``darkolivegreen``          :darkolivegreen:`████████`\n``darkolivegreen1``         :darkolivegreen1:`████████`\n``darkolivegreen2``         :darkolivegreen2:`████████`\n``darkolivegreen3``         :darkolivegreen3:`████████`\n``darkolivegreen4``         :darkolivegreen4:`████████`\n``darkorange``              :darkorange:`████████`\n``darkorange1``             :darkorange1:`████████`\n``darkorange2``             :darkorange2:`████████`\n``darkorange3``             :darkorange3:`████████`\n``darkorange4``             :darkorange4:`████████`\n``darkorchid``              :darkorchid:`████████`\n``darkorchid1``             :darkorchid1:`████████`\n``darkorchid2``             :darkorchid2:`████████`\n``darkorchid3``             :darkorchid3:`████████`\n``darkorchid4``             :darkorchid4:`████████`\n``darkred``                 :darkred:`████████`\n``darksalmon``              :darksalmon:`████████`\n``darkseagreen``            :darkseagreen:`████████`\n``darkseagreen1``           :darkseagreen1:`████████`\n``darkseagreen2``           :darkseagreen2:`████████`\n``darkseagreen3``           :darkseagreen3:`████████`\n``darkseagreen4``           :darkseagreen4:`████████`\n``darkslateblue``           :darkslateblue:`████████`\n``darkslategray``           :darkslategray:`████████`\n``darkslategray1``          :darkslategray1:`████████`\n``darkslategray2``          :darkslategray2:`████████`\n``darkslategray3``          :darkslategray3:`████████`\n``darkslategray4``          :darkslategray4:`████████`\n``darkslategrey``           :darkslategrey:`████████`\n``darkturquoise``           :darkturquoise:`████████`\n``darkviolet``              :darkviolet:`████████`\n``deeppink``                :deeppink:`████████`\n``deeppink1``               :deeppink1:`████████`\n``deeppink2``               :deeppink2:`████████`\n``deeppink3``               :deeppink3:`████████`\n``deeppink4``               :deeppink4:`████████`\n``deepskyblue``             :deepskyblue:`████████`\n``deepskyblue1``            :deepskyblue1:`████████`\n``deepskyblue2``            :deepskyblue2:`████████`\n``deepskyblue3``            :deepskyblue3:`████████`\n``deepskyblue4``            :deepskyblue4:`████████`\n``dimgray``                 :dimgray:`████████`\n``dimgrey``                 :dimgrey:`████████`\n``dodgerblue``              :dodgerblue:`████████`\n``dodgerblue1``             :dodgerblue1:`████████`\n``dodgerblue2``             :dodgerblue2:`████████`\n``dodgerblue3``             :dodgerblue3:`████████`\n``dodgerblue4``             :dodgerblue4:`████████`\n``firebrick``               :firebrick:`████████`\n``firebrick1``              :firebrick1:`████████`\n``firebrick2``              :firebrick2:`████████`\n``firebrick3``              :firebrick3:`████████`\n``firebrick4``              :firebrick4:`████████`\n``floralwhite``             :floralwhite:`████████`\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Permissions for User on Ubuntu VM\nDESCRIPTION: Commands to add the Ubuntu user to the Docker group to allow running Docker commands without sudo privileges. This requires logging out and reloading the VM.\nSOURCE: https://github.com/pygame/pygame/blob/main/buildconfig/manylinux-build/README.rst#2025-04-20_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n# We should have been in our python package clone root directory before we ran vagrant ssh\ncd /vagrant_pygame\n\n# We need to be able to run docker as the ubuntu user.\nsudo usermod -aG docker ubuntu\nsudo usermod -aG docker $USER\n\n# now log out of vagrant. Need to reload it because docker.\nexit\n\nvagrant reload\nvagrant ssh\n\n# now we can start docker. Should be started already.\nsudo service docker start\n```\n\n----------------------------------------\n\nTITLE: Getting Active Array Type in Python (Deprecated)\nDESCRIPTION: Returns the currently active array type. This function is deprecated and will raise a DeprecationWarning.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/sndarray.rst#2025-04-20_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nget_arraytype () -> str\n```\n\n----------------------------------------\n\nTITLE: Setting Array Type for Sound Arrays in Python (Deprecated)\nDESCRIPTION: Sets the array system to be used for sound arrays. Only 'numpy' is supported as an arraytype. This function is deprecated and will raise a DeprecationWarning.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/sndarray.rst#2025-04-20_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nuse_arraytype (arraytype) -> None\n```\n\n----------------------------------------\n\nTITLE: Extracting RGBA Values from Pygame Color Object in C\nDESCRIPTION: Function to extract RGBA values from a pygame.Color object into an array. Returns 1 on success, 0 on failure. Optimized for pgColor_Type instances.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/c_api/color.rst#2025-04-20_snippet_4\n\nLANGUAGE: c\nCODE:\n```\nint pg_RGBAFromColorObj(PyObject *color, Uint8 rgba[])\n```\n\n----------------------------------------\n\nTITLE: Implementing Surface Preparation Functions in C for Pygame\nDESCRIPTION: Implements functions to prepare and unprepare surfaces, locking parent surfaces for subsurfaces.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/c_api/surflock.rst#2025-04-20_snippet_3\n\nLANGUAGE: c\nCODE:\n```\nvoid pgSurface_Prep(pgSurfaceObject *surfobj);\nvoid pgSurface_Unprep(pgSurfaceObject *surfobj);\n```\n\n----------------------------------------\n\nTITLE: Configuring SDL_IMAGE build options for Linux and MacOS in Bash\nDESCRIPTION: This bash script snippet demonstrates how to set different configure options for SDL_IMAGE based on the operating system. It disables the built-in Mac image loading on MacOS for better compatibility with some jpg/png files.\nSOURCE: https://github.com/pygame/pygame/blob/main/buildconfig/macdependencies/README.rst#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nif [[ \"$OSTYPE\" == \"linux-gnu\"* ]]; then\n      # linux\n      export SDL_IMAGE_CONFIGURE=\nelif [[ \"$OSTYPE\" == \"darwin\"* ]]; then\n      # Mac OSX\n      # --disable-imageio is so it doesn't use the built in mac image loading.\n      #     Since it is not as compatible with some jpg/png files.\n      export SDL_IMAGE_CONFIGURE=--disable-imageio\nfi\n```\n\n----------------------------------------\n\nTITLE: Surface Blitting Function in C\nDESCRIPTION: Low-level implementation of surface blitting with support for various blend modes. Updates destination rectangle with actual affected area. Returns 0 on success, -1 or -2 on error.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/c_api/surface.rst#2025-04-20_snippet_4\n\nLANGUAGE: c\nCODE:\n```\nint pgSurface_Blit(PyObject *dstobj, PyObject *srcobj, SDL_Rect *dstrect, SDL_Rect *srcrect, int the_args)\n```\n\n----------------------------------------\n\nTITLE: Getting Supported Array Types in Python (Deprecated)\nDESCRIPTION: Returns a tuple of strings representing the available array systems. This function is deprecated and will raise a DeprecationWarning.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/sndarray.rst#2025-04-20_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nget_arraytypes () -> tuple\n```\n\n----------------------------------------\n\nTITLE: Checking if SDL_RWops Wraps a Python File Object in C for Pygame\nDESCRIPTION: Function that determines whether an SDL_RWops struct is a wrapper for a Python file-like object created by pgRWops_FromObject or pgRWops_FromFileObject.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/c_api/rwobject.rst#2025-04-20_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nint pgRWops_IsFileObject(SDL_RWops *rw)\n```\n\n----------------------------------------\n\nTITLE: Getting Surface Color Shifts in Pygame\nDESCRIPTION: Returns the pixel shifts needed to convert between each color and a mapped integer. This value is not typically needed for normal Pygame usage.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/surface.rst#2025-04-20_snippet_34\n\nLANGUAGE: python\nCODE:\n```\nget_shifts() -> (R, G, B, A)\n```\n\n----------------------------------------\n\nTITLE: Illegal Null Character in File Path\nDESCRIPTION: This snippet demonstrates an illegal use of a null character in a file path, which would raise an exception in Pygame functions accepting file paths.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/filepaths.rst#2025-04-20_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nillegal_path = \"some_file\\x00.txt\"  # This will raise an exception\n```\n\n----------------------------------------\n\nTITLE: Bayer to RGB License Notice\nDESCRIPTION: Copyright notice and license terms for the Bayer to RGB conversion function used in the pygame.camera module. The code is based on the Sonix SN9C101 webcam interface routines.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/camera.rst#2025-04-20_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nSonix SN9C101 based webcam basic I/F routines\nCopyright (C) 2004 Takafumi Mizuno <taka-qce@ls-a.jp>\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions\nare met:\n1. Redistributions of source code must retain the above copyright\n   notice, this list of conditions and the following disclaimer.\n2. Redistributions in binary form must reproduce the above copyright\n   notice, this list of conditions and the following disclaimer in the\n   documentation and/or other materials provided with the distribution.\nTHIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\nARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS\nOR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\nHOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\nLIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY\nOUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGE.\n```\n\n----------------------------------------\n\nTITLE: Apache License 2.0 Boilerplate Notice\nDESCRIPTION: Standard boilerplate notice to be included in project files to apply the Apache License 2.0, with an example copyright notice for Google Inc. The notice includes required license text and the URL for the full license.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/licenses/LICENSE.portmidi.txt#2025-04-20_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n   Copyright 2013 Google Inc.\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Checking if Track Contains Audio\nDESCRIPTION: Method to determine if a specific track on the CD contains audio data. Track numbers start at zero.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/cdrom.rst#2025-04-20_snippet_20\n\nLANGUAGE: Python\nCODE:\n```\nget_track_audio(track) -> bool\n```\n\n----------------------------------------\n\nTITLE: Surface Creation with Ownership in C\nDESCRIPTION: Creates a new pygame surface instance with optional ownership flag. If owner is true, the SDL surface will be freed when the Python object is destroyed.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/c_api/surface.rst#2025-04-20_snippet_2\n\nLANGUAGE: c\nCODE:\n```\npgSurfaceObject* pgSurface_New2(SDL_Surface *s, int owner)\n```\n\n----------------------------------------\n\nTITLE: User Event Population Function in C\nDESCRIPTION: Function to populate an SDL_Event structure with data from a pygame user event instance. Returns 0 on success, -1 on failure.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/c_api/event.rst#2025-04-20_snippet_4\n\nLANGUAGE: c\nCODE:\n```\nint pgEvent_FillUserEvent(pgEventObject *e, SDL_Event *event)\n```\n\n----------------------------------------\n\nTITLE: Creating Pygame Color Object with Specific Length in C\nDESCRIPTION: Function to create a new pygame.Color instance with a specified length (1-4) from an RGBA array. Returns a new Color object or NULL on failure, raising a Python exception.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/c_api/color.rst#2025-04-20_snippet_3\n\nLANGUAGE: c\nCODE:\n```\nPyObject* pgColor_NewLength(Uint8 rgba[], Uint8 length)\n```\n\n----------------------------------------\n\nTITLE: Getting BufferProxy Length\nDESCRIPTION: Demonstrates how to retrieve the size in bytes of the exported buffer, excluding any gaps in discontinuous data.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/bufferproxy.rst#2025-04-20_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nlength -> int\n```\n\n----------------------------------------\n\nTITLE: Getting Track Count\nDESCRIPTION: Method to get the number of tracks on the CD. Returns zero if the drive is empty or has no tracks.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/cdrom.rst#2025-04-20_snippet_19\n\nLANGUAGE: Python\nCODE:\n```\nget_numtracks() -> count\n```\n\n----------------------------------------\n\nTITLE: Encoding File Paths for OS Compatibility in C for Pygame\nDESCRIPTION: Function that converts a Python file path object to a byte string properly encoded for the operating system. Handles null byte validation and exception propagation.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/c_api/rwobject.rst#2025-04-20_snippet_4\n\nLANGUAGE: c\nCODE:\n```\nPyObject* pg_EncodeFilePath(PyObject *obj, PyObject *eclass)\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Pygame Rect Attributes\nDESCRIPTION: Shows how Rect objects are iterable, allowing easy unpacking of their position and size attributes.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/rect.rst#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nr = Rect(0, 1, 2, 3)\nx, y, w, h = r\n```\n\n----------------------------------------\n\nTITLE: Surface Creation Function in C\nDESCRIPTION: Creates a new pygame surface instance wrapping an SDL_Surface pointer. Returns NULL if an error occurs during creation.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/c_api/surface.rst#2025-04-20_snippet_1\n\nLANGUAGE: c\nCODE:\n```\npgSurfaceObject* pgSurface_New(SDL_Surface *s)\n```\n\n----------------------------------------\n\nTITLE: Converting Mapped Value to Color in Pygame Surface\nDESCRIPTION: Converts a mapped integer color into the RGB color components for this Surface. Useful for working with mapped color values in Pygame.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/surface.rst#2025-04-20_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nunmap_rgb(mapped_int) -> Color\n```\n\n----------------------------------------\n\nTITLE: Buffer Handling Functions in C\nDESCRIPTION: Functions and structures for managing buffer objects and interface conversions.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/c_api/base.rst#2025-04-20_snippet_4\n\nLANGUAGE: c\nCODE:\n```\ntypedef struct {\n    Py_buffer view;\n    PyObject* consumer;\n    pybuffer_releaseproc release_buffer;\n} pg_buffer;\n\nPyObject* pgBuffer_AsArrayInterface(Py_buffer *view_p);\nPyObject* pgBuffer_AsArrayStruct(Py_buffer *view_p);\nint pgObject_GetBuffer(PyObject *obj, pg_buffer *pg_view_p, int flags);\nvoid pgBuffer_Release(Pg_buffer *pg_view_p);\nint pgDict_AsBuffer(Pg_buffer *pg_view_p, PyObject *dict, int flags);\n```\n\n----------------------------------------\n\nTITLE: Setting Array System for Surface Arrays in Pygame (Deprecated)\nDESCRIPTION: The use_arraytype function sets the array system to be used for surface arrays. It only supports 'numpy' as an arraytype. Other values will raise ValueError. This function is deprecated and will raise a DeprecationWarning.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/surfarray.rst#2025-04-20_snippet_16\n\nLANGUAGE: Python\nCODE:\n```\nuse_arraytype (arraytype) -> None\n```\n\n----------------------------------------\n\nTITLE: SDL_image Library License Comment in C\nDESCRIPTION: This code snippet is a comment block containing the license and copyright information for the SDL_image library. It specifies the terms under which the software can be used, modified, and distributed.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/licenses/LICENSE.sdl2_image.txt#2025-04-20_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n/*\n  SDL_image:  An example image loading library for use with SDL\n  Copyright (C) 1997-2019 Sam Lantinga <slouken@libsdl.org>\n\n  This software is provided 'as-is', without any express or implied\n  warranty.  In no event will the authors be held liable for any damages\n  arising from the use of this software.\n\n  Permission is granted to anyone to use this software for any purpose,\n  including commercial applications, and to alter it and redistribute it\n  freely, subject to the following restrictions:\n\n  1. The origin of this software must not be misrepresented; you must not\n     claim that you wrote the original software. If you use this software\n     in a product, an acknowledgment in the product documentation would be\n     appreciated but is not required.\n  2. Altered source versions must be plainly marked as such, and must not be\n     misrepresented as being the original software.\n  3. This notice may not be removed or altered from any source distribution.\n*/\n```\n\n----------------------------------------\n\nTITLE: Checking Text Underline Status in Pygame\nDESCRIPTION: The get_underline method checks if the text will be rendered with an underline. It returns a boolean value indicating the underline status.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/font.rst#2025-04-20_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nFont.get_underline() -> bool\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables in Linux/Mac\nDESCRIPTION: Demonstrates how to set environment variables in Unix-like systems before running a Python application\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/pygame.rst#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nENV_VAR=value python my_application.py\n```\n\n----------------------------------------\n\nTITLE: Getting Active Array Type in Pygame (Deprecated)\nDESCRIPTION: The get_arraytype function returns the currently active array type. It will be a value from the get_arraytypes() tuple. This function is deprecated and will raise a DeprecationWarning.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/surfarray.rst#2025-04-20_snippet_17\n\nLANGUAGE: Python\nCODE:\n```\nget_arraytype () -> str\n```\n\n----------------------------------------\n\nTITLE: Including Common Definitions in reStructuredText for PyGame Tutorials\nDESCRIPTION: This snippet includes a common definitions file used across PyGame tutorials documentation. It establishes the base path to import shared content from the reST directory.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/es/tutorials/common.txt#2025-04-20_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. include:: ../../../../reST/common.txt\n```\n\n----------------------------------------\n\nTITLE: Defining Custom reST Roles for Pygame Documentation\nDESCRIPTION: This snippet defines custom reStructuredText roles for use in Pygame documentation. It includes roles for summary lines, signatures, and small headings, which can be used to format and style specific elements in the documentation.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/common.txt#2025-04-20_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. role:: summaryline\n\n.. role:: sl(summaryline)\n   :class: summaryline\n\n.. role:: signature\n\n.. role:: sg(signature)\n   :class: signature\n\n.. role:: small-heading\n   :class: small-heading\n```\n\n----------------------------------------\n\nTITLE: Drawing Buttons in Pygame\nDESCRIPTION: This function draws two buttons on the screen. It calculates the position of the buttons based on the screen width and uses different colors for each button.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/tut/ko/빨간블록 검은블록/6.버튼들/심화 입력 그리고 심화 출력.rst#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef drawButtons():\n    r = 45\n    r_margin = 10\n    colors = [red, black]\n    \n    num = 2\n    margin = int((width - ((r * num) + (r_margin * (num - 1)))) / 2)\n    for i in range(0, num):\n        left = margin + (i * r) + (i * r_margin)\n        up = height - r - 10\n        pygame.draw.rect(myScreen, colors[i], (left, up, r, r))\n        pygame.draw.rect(myScreen, gray, (left + 2, up + 2, r - 4, r - 4), 2)\n```\n\n----------------------------------------\n\nTITLE: Grayscale and Green Color Definitions in CSS\nDESCRIPTION: CSS classes defining different shades of gray/grey and green colors. Each class sets both background-color and color properties to the same hex value, creating monochromatic elements. Includes grayscale values from 0-100 and various green shades.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/color_list.rst#2025-04-20_snippet_1\n\nLANGUAGE: CSS\nCODE:\n```\n.gray10 {background-color: #1a1a1a; color: #1a1a1a;}\n.gray11 {background-color: #1c1c1c; color: #1c1c1c;}\n.gray12 {background-color: #1f1f1f; color: #1f1f1f;}\n[...remainder of grayscale classes...]\n.green {background-color: #00ff00; color: #00ff00;}\n.green1 {background-color: #00ff00; color: #00ff00;}\n.green2 {background-color: #00ee00; color: #00ee00;}\n.green3 {background-color: #00cd00; color: #00cd00;}\n.green4 {background-color: #008b00; color: #008b00;}\n.greenyellow {background-color: #adff2f; color: #adff2f;}\n```\n\n----------------------------------------\n\nTITLE: Main Game Loop with Event Handling\nDESCRIPTION: This function contains the main game loop, handling events such as quitting, key presses, and mouse clicks. It updates the HP based on user input and redraws the screen.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/tut/ko/빨간블록 검은블록/6.버튼들/심화 입력 그리고 심화 출력.rst#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef main():\n    HP = 5\n    \n    while True:\n        myText = myTextFont.render((str(HP) + \"/\" + str(maxHP)), True, red, gray)\n    \n        myScreen.fill(gray)\n\n        myScreen.blit(myText, myTextArea)\n        drawHP(HP)\n        drawButtons()\n\n        for event in pygame.event.get():\n            if event.type == QUIT:\n                pygame.quit()\n                sys.exit()\n            elif event.type == KEYDOWN:\n                if event.key == K_UP:\n                    if HP != 10:\n                        HP = HP + 1\n                elif event.key == K_DOWN:\n                    if HP != 0:\n                        HP = HP - 1\n            elif event.type == MOUSEBUTTONUP: #1\n                x, y = event.pos\n                if pygame.Rect(270, 425, 45, 45).collidepoint(x, y):\n                    if HP != 10:\n                        HP = HP + 1\n                elif pygame.Rect(325, 425, 45, 45).collidepoint(x, y):\n                    if HP != 0:\n                        HP = HP - 1      \n    \n        pygame.display.update()\n        fpsClock.tick(60)\n```\n\n----------------------------------------\n\nTITLE: Defining Gray and Green CSS Color Classes\nDESCRIPTION: CSS classes that define various shades of gray (with both 'gray' and 'grey' spelling variations) and green colors. Each class sets both background-color and color properties to the same hex value, creating consistent colored elements. The numbering system ranges from 0-100 for grays (darkest to lightest) and 1-4 for greens (lightest to darkest).\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/es/color_list.rst#2025-04-20_snippet_1\n\nLANGUAGE: CSS\nCODE:\n```\n.gray10 {background-color: #1a1a1a; color: #1a1a1a;}\n.gray11 {background-color: #1c1c1c; color: #1c1c1c;}\n.gray12 {background-color: #1f1f1f; color: #1f1f1f;}\n.gray13 {background-color: #212121; color: #212121;}\n.gray14 {background-color: #242424; color: #242424;}\n.gray15 {background-color: #262626; color: #262626;}\n.gray16 {background-color: #292929; color: #292929;}\n.gray17 {background-color: #2b2b2b; color: #2b2b2b;}\n.gray18 {background-color: #2e2e2e; color: #2e2e2e;}\n.gray19 {background-color: #303030; color: #303030;}\n.gray20 {background-color: #333333; color: #333333;}\n.gray21 {background-color: #363636; color: #363636;}\n.gray22 {background-color: #383838; color: #383838;}\n.gray23 {background-color: #3b3b3b; color: #3b3b3b;}\n.gray24 {background-color: #3d3d3d; color: #3d3d3d;}\n.gray25 {background-color: #404040; color: #404040;}\n.gray26 {background-color: #424242; color: #424242;}\n.gray27 {background-color: #454545; color: #454545;}\n.gray28 {background-color: #474747; color: #474747;}\n.gray29 {background-color: #4a4a4a; color: #4a4a4a;}\n.gray30 {background-color: #4d4d4d; color: #4d4d4d;}\n.gray31 {background-color: #4f4f4f; color: #4f4f4f;}\n.gray32 {background-color: #525252; color: #525252;}\n.gray33 {background-color: #545454; color: #545454;}\n.gray34 {background-color: #575757; color: #575757;}\n.gray35 {background-color: #595959; color: #595959;}\n.gray36 {background-color: #5c5c5c; color: #5c5c5c;}\n.gray37 {background-color: #5e5e5e; color: #5e5e5e;}\n.gray38 {background-color: #616161; color: #616161;}\n.gray39 {background-color: #636363; color: #636363;}\n.gray40 {background-color: #666666; color: #666666;}\n.gray41 {background-color: #696969; color: #696969;}\n.gray42 {background-color: #6b6b6b; color: #6b6b6b;}\n.gray43 {background-color: #6e6e6e; color: #6e6e6e;}\n.gray44 {background-color: #707070; color: #707070;}\n.gray45 {background-color: #737373; color: #737373;}\n.gray46 {background-color: #757575; color: #757575;}\n.gray47 {background-color: #787878; color: #787878;}\n.gray48 {background-color: #7a7a7a; color: #7a7a7a;}\n.gray49 {background-color: #7d7d7d; color: #7d7d7d;}\n.gray50 {background-color: #7f7f7f; color: #7f7f7f;}\n.gray51 {background-color: #828282; color: #828282;}\n.gray52 {background-color: #858585; color: #858585;}\n.gray53 {background-color: #878787; color: #878787;}\n.gray54 {background-color: #8a8a8a; color: #8a8a8a;}\n.gray55 {background-color: #8c8c8c; color: #8c8c8c;}\n.gray56 {background-color: #8f8f8f; color: #8f8f8f;}\n.gray57 {background-color: #919191; color: #919191;}\n.gray58 {background-color: #949494; color: #949494;}\n.gray59 {background-color: #969696; color: #969696;}\n.gray60 {background-color: #999999; color: #999999;}\n.gray61 {background-color: #9c9c9c; color: #9c9c9c;}\n.gray62 {background-color: #9e9e9e; color: #9e9e9e;}\n.gray63 {background-color: #a1a1a1; color: #a1a1a1;}\n.gray64 {background-color: #a3a3a3; color: #a3a3a3;}\n.gray65 {background-color: #a6a6a6; color: #a6a6a6;}\n.gray66 {background-color: #a8a8a8; color: #a8a8a8;}\n.gray67 {background-color: #ababab; color: #ababab;}\n.gray68 {background-color: #adadad; color: #adadad;}\n.gray69 {background-color: #b0b0b0; color: #b0b0b0;}\n.gray70 {background-color: #b3b3b3; color: #b3b3b3;}\n.gray71 {background-color: #b5b5b5; color: #b5b5b5;}\n.gray72 {background-color: #b8b8b8; color: #b8b8b8;}\n.gray73 {background-color: #bababa; color: #bababa;}\n.gray74 {background-color: #bdbdbd; color: #bdbdbd;}\n.gray75 {background-color: #bfbfbf; color: #bfbfbf;}\n.gray76 {background-color: #c2c2c2; color: #c2c2c2;}\n.gray77 {background-color: #c4c4c4; color: #c4c4c4;}\n.gray78 {background-color: #c7c7c7; color: #c7c7c7;}\n.gray79 {background-color: #c9c9c9; color: #c9c9c9;}\n.gray80 {background-color: #cccccc; color: #cccccc;}\n.gray81 {background-color: #cfcfcf; color: #cfcfcf;}\n.gray82 {background-color: #d1d1d1; color: #d1d1d1;}\n.gray83 {background-color: #d4d4d4; color: #d4d4d4;}\n.gray84 {background-color: #d6d6d6; color: #d6d6d6;}\n.gray85 {background-color: #d9d9d9; color: #d9d9d9;}\n.gray86 {background-color: #dbdbdb; color: #dbdbdb;}\n.gray87 {background-color: #dedede; color: #dedede;}\n.gray88 {background-color: #e0e0e0; color: #e0e0e0;}\n.gray89 {background-color: #e3e3e3; color: #e3e3e3;}\n.gray90 {background-color: #e5e5e5; color: #e5e5e5;}\n.gray91 {background-color: #e8e8e8; color: #e8e8e8;}\n.gray92 {background-color: #ebebeb; color: #ebebeb;}\n.gray93 {background-color: #ededed; color: #ededed;}\n.gray94 {background-color: #f0f0f0; color: #f0f0f0;}\n.gray95 {background-color: #f2f2f2; color: #f2f2f2;}\n.gray96 {background-color: #f5f5f5; color: #f5f5f5;}\n.gray97 {background-color: #f7f7f7; color: #f7f7f7;}\n.gray98 {background-color: #fafafa; color: #fafafa;}\n.gray99 {background-color: #fcfcfc; color: #fcfcfc;}\n.gray100 {background-color: #ffffff; color: #ffffff;}\n.green {background-color: #00ff00; color: #00ff00;}\n.green1 {background-color: #00ff00; color: #00ff00;}\n.green2 {background-color: #00ee00; color: #00ee00;}\n.green3 {background-color: #00cd00; color: #00cd00;}\n.green4 {background-color: #008b00; color: #008b00;}\n.greenyellow {background-color: #adff2f; color: #adff2f;}\n.grey {background-color: #bebebe; color: #bebebe;}\n.grey0 {background-color: #000000; color: #000000;}\n.grey1 {background-color: #030303; color: #030303;}\n.grey2 {background-color: #050505; color: #050505;}\n.grey3 {background-color: #080808; color: #080808;}\n.grey4 {background-color: #0a0a0a; color: #0a0a0a;}\n.grey5 {background-color: #0d0d0d; color: #0d0d0d;}\n.grey6 {background-color: #0f0f0f; color: #0f0f0f;}\n.grey7 {background-color: #121212; color: #121212;}\n.grey8 {background-color: #141414; color: #141414;}\n.grey9 {background-color: #171717; color: #171717;}\n.grey10 {background-color: #1a1a1a; color: #1a1a1a;}\n.grey11 {background-color: #1c1c1c; color: #1c1c1c;}\n.grey12 {background-color: #1f1f1f; color: #1f1f1f;}\n.grey13 {background-color: #212121; color: #212121;}\n.grey14 {background-color: #242424; color: #242424;}\n.grey15 {background-color: #262626; color: #262626;}\n.grey16 {background-color: #292929; color: #292929;}\n.grey17 {background-color: #2b2b2b; color: #2b2b2b;}\n.grey18 {background-color: #2e2e2e; color: #2e2e2e;}\n.grey19 {background-color: #303030; color: #303030;}\n.grey20 {background-color: #333333; color: #333333;}\n.grey21 {background-color: #363636; color: #363636;}\n.grey22 {background-color: #383838; color: #383838;}\n.grey23 {background-color: #3b3b3b; color: #3b3b3b;}\n.grey24 {background-color: #3d3d3d; color: #3d3d3d;}\n.grey25 {background-color: #404040; color: #404040;}\n.grey26 {background-color: #424242; color: #424242;}\n.grey27 {background-color: #454545; color: #454545;}\n.grey28 {background-color: #474747; color: #474747;}\n.grey29 {background-color: #4a4a4a; color: #4a4a4a;}\n.grey30 {background-color: #4d4d4d; color: #4d4d4d;}\n.grey31 {background-color: #4f4f4f; color: #4f4f4f;}\n.grey32 {background-color: #525252; color: #525252;}\n.grey33 {background-color: #545454; color: #545454;}\n.grey34 {background-color: #575757; color: #575757;}\n.grey35 {background-color: #595959; color: #595959;}\n.grey36 {background-color: #5c5c5c; color: #5c5c5c;}\n.grey37 {background-color: #5e5e5e; color: #5e5e5e;}\n.grey38 {background-color: #616161; color: #616161;}\n.grey39 {background-color: #636363; color: #636363;}\n.grey40 {background-color: #666666; color: #666666;}\n.grey41 {background-color: #696969; color: #696969;}\n.grey42 {background-color: #6b6b6b; color: #6b6b6b;}\n.grey43 {background-color: #6e6e6e; color: #6e6e6e;}\n.grey44 {background-color: #707070; color: #707070;}\n.grey45 {background-color: #737373; color: #737373;}\n.grey46 {background-color: #757575; color: #757575;}\n.grey47 {background-color: #787878; color: #787878;}\n.grey48 {background-color: #7a7a7a; color: #7a7a7a;}\n.grey49 {background-color: #7d7d7d; color: #7d7d7d;}\n.grey50 {background-color: #7f7f7f; color: #7f7f7f;}\n.grey51 {background-color: #828282; color: #828282;}\n.grey52 {background-color: #858585; color: #858585;}\n.grey53 {background-color: #878787; color: #878787;}\n.grey54 {background-color: #8a8a8a; color: #8a8a8a;}\n.grey55 {background-color: #8c8c8c; color: #8c8c8c;}\n.grey56 {background-color: #8f8f8f; color: #8f8f8f;}\n.grey57 {background-color: #919191; color: #919191;}\n.grey58 {background-color: #949494; color: #949494;}\n.grey59 {background-color: #969696; color: #969696;}\n.grey60 {background-color: #999999; color: #999999;}\n.grey61 {background-color: #9c9c9c; color: #9c9c9c;}\n.grey62 {background-color: #9e9e9e; color: #9e9e9e;}\n.grey63 {background-color: #a1a1a1; color: #a1a1a1;}\n.grey64 {background-color: #a3a3a3; color: #a3a3a3;}\n.grey65 {background-color: #a6a6a6; color: #a6a6a6;}\n.grey66 {background-color: #a8a8a8; color: #a8a8a8;}\n.grey67 {background-color: #ababab; color: #ababab;}\n.grey68 {background-color: #adadad; color: #adadad;}\n.grey69 {background-color: #b0b0b0; color: #b0b0b0;}\n.grey70 {background-color: #b3b3b3; color: #b3b3b3;}\n.grey71 {background-color: #b5b5b5; color: #b5b5b5;}\n.grey72 {background-color: #b8b8b8; color: #b8b8b8;}\n.grey73 {background-color: #bababa; color: #bababa;}\n.grey74 {background-color: #bdbdbd; color: #bdbdbd;}\n.grey75 {background-color: #bfbfbf; color: #bfbfbf;}\n.grey76 {background-color: #c2c2c2; color: #c2c2c2;}\n```\n\n----------------------------------------\n\nTITLE: Loading Basic BMP Images in Pygame\nDESCRIPTION: Loads a BMP image from a file or file-like object into a Surface. This basic function is always available regardless of how Pygame was built and only supports the BMP format.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/image.rst#2025-04-20_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nload_basic(file) -> Surface\n```\n\n----------------------------------------\n\nTITLE: Defining Pastel Color Classes in CSS\nDESCRIPTION: This snippet defines CSS classes for various pastel colors and their shades. Each class sets both the background-color and color properties to the same hex value.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/color_list.rst#2025-04-20_snippet_3\n\nLANGUAGE: CSS\nCODE:\n```\n.honeydew {background-color: #f0fff0; color: #f0fff0;}\n.honeydew1 {background-color: #f0fff0; color: #f0fff0;}\n.honeydew2 {background-color: #e0eee0; color: #e0eee0;}\n.honeydew3 {background-color: #c1cdc1; color: #c1cdc1;}\n.honeydew4 {background-color: #838b83; color: #838b83;}\n.hotpink {background-color: #ff69b4; color: #ff69b4;}\n.hotpink1 {background-color: #ff6eb4; color: #ff6eb4;}\n.hotpink2 {background-color: #ee6aa7; color: #ee6aa7;}\n.hotpink3 {background-color: #cd6090; color: #cd6090;}\n.hotpink4 {background-color: #8b3a62; color: #8b3a62;}\n.indianred {background-color: #cd5c5c; color: #cd5c5c;}\n.indianred1 {background-color: #ff6a6a; color: #ff6a6a;}\n.indianred2 {background-color: #ee6363; color: #ee6363;}\n.indianred3 {background-color: #cd5555; color: #cd5555;}\n.indianred4 {background-color: #8b3a3a; color: #8b3a3a;}\n.indigo {background-color: #4b0082; color: #4b0082;}\n.ivory {background-color: #fffff0; color: #fffff0;}\n.ivory1 {background-color: #fffff0; color: #fffff0;}\n.ivory2 {background-color: #eeeee0; color: #eeeee0;}\n.ivory3 {background-color: #cdcdc1; color: #cdcdc1;}\n.ivory4 {background-color: #8b8b83; color: #8b8b83;}\n.khaki {background-color: #f0e68c; color: #f0e68c;}\n.khaki1 {background-color: #fff68f; color: #fff68f;}\n.khaki2 {background-color: #eee685; color: #eee685;}\n.khaki3 {background-color: #cdc673; color: #cdc673;}\n.khaki4 {background-color: #8b864e; color: #8b864e;}\n```\n\n----------------------------------------\n\nTITLE: Modifying /etc/hosts for Docker on Ubuntu VM\nDESCRIPTION: Modifying the /etc/hosts file to include the hostname ubuntu-xenial, which is required for Docker to start properly on the Ubuntu VM.\nSOURCE: https://github.com/pygame/pygame/blob/main/buildconfig/manylinux-build/README.rst#2025-04-20_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n# Now edit /etc/hosts so it has a first line with the hostname ubuntu-xenial in it.\n# Otherwise docker does not start.\n# 127.0.0.1 localhost ubuntu-xenial\n# makes a /etc/hosts.bak in case something breaks.\nsudo sed -i\".bak\" '/127.0.0.1 localhost/s/$/ ubuntu-xenial/' /etc/hosts\n```\n\n----------------------------------------\n\nTITLE: Implementing a Clear Callback Function in Pygame\nDESCRIPTION: This function demonstrates how to create a callback for clearing sprites with a solid red color. It takes a surface and a rectangle as arguments, and fills the specified area with red.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/sprite.rst#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef clear_callback(surf, rect):\n    color = 255, 0, 0\n    surf.fill(color, rect)\n```\n\n----------------------------------------\n\nTITLE: SDL_mixer License Comment Block\nDESCRIPTION: Copyright and license declaration for SDL_mixer library, using the zlib/libpng license format. Specifies terms for usage, modification and redistribution while requiring attribution and marking of changes.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/licenses/LICENSE.sdl2_mixer.txt#2025-04-20_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n/*\n  SDL_mixer:  An audio mixer library based on the SDL library\n  Copyright (C) 1997-2018 Sam Lantinga <slouken@libsdl.org>\n\n  This software is provided 'as-is', without any express or implied\n  warranty.  In no event will the authors be held liable for any damages\n  arising from the use of this software.\n\n  Permission is granted to anyone to use this software for any purpose,\n  including commercial applications, and to alter it and redistribute it\n  freely, subject to the following restrictions:\n\n  1. The origin of this software must not be misrepresented; you must not\n     claim that you wrote the original software. If you use this software\n     in a product, an acknowledgment in the product documentation would be\n     appreciated but is not required.\n  2. Altered source versions must be plainly marked as such, and must not be\n     misrepresented as being the original software.\n  3. This notice may not be removed or altered from any source distribution.\n*/\n```\n\n----------------------------------------\n\nTITLE: Copying Build Logs from Docker Container\nDESCRIPTION: Command to extract and copy a config.log file from a Docker container to the local filesystem for debugging build issues.\nSOURCE: https://github.com/pygame/pygame/blob/main/buildconfig/manylinux-build/README.rst#2025-04-20_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ndocker run pygame/manylinux1_base_i686 tar -c -C /sdl_build SDL2-2.0.12/config.log | tar x\n```\n\n----------------------------------------\n\nTITLE: Uploading Packages to Bintray Repository\nDESCRIPTION: Command for uploading Conan packages to the Pygame repository on Bintray, specifically for the portmidi package version 217.\nSOURCE: https://github.com/pygame/pygame/blob/main/buildconfig/conanconf/README.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nconan upload portmidi/217 --all -r=pygame-repo\n```\n\n----------------------------------------\n\nTITLE: Sample Copyright Disclaimer for LGPL-Licensed Library\nDESCRIPTION: This snippet provides a template for a copyright disclaimer that can be used by companies or organizations to renounce copyright interest in an LGPL-licensed library. It includes placeholders for the company name, library name, and author name.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/LGPL.txt#2025-04-20_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nYoyodyne, Inc., hereby disclaims all copyright interest in the\nlibrary `Frob' (a library for tweaking knobs) written by James Random Hacker.\n\n<signature of Ty Coon>, 1 April 1990\nTy Coon, President of Vice\n```\n\n----------------------------------------\n\nTITLE: Including Common Text Definitions\nDESCRIPTION: Includes shared definitions from a common text file for reuse across documentation.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/tut/common.txt#2025-04-20_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. include:: ../common.txt\n```\n\n----------------------------------------\n\nTITLE: Defining reStructuredText Roles\nDESCRIPTION: Sets up custom roles for documentation formatting including codelineref and its class variant clr.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/tut/common.txt#2025-04-20_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. role:: codelineref\n\n.. role:: clr(codelineref)\n   :class: codelineref\n```\n\n----------------------------------------\n\nTITLE: Including Common Documentation Header in reStructuredText\nDESCRIPTION: This directive includes the common text file that likely contains shared documentation content, headers, or settings for the pygame documentation.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/reST/ref/common.txt#2025-04-20_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. include:: ../common.txt\n```\n\n----------------------------------------\n\nTITLE: Copyright Disclaimer Template\nDESCRIPTION: Sample template for a copyright disclaimer that can be used by employers or institutions to disclaim copyright interest in a library. Includes example placeholder names and formatting.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/licenses/LICENSE.fluidsynth.txt#2025-04-20_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n  Yoyodyne, Inc., hereby disclaims all copyright interest in the\n  library `Frob' (a library for tweaking knobs) written by James Random\n  Hacker.\n\n  {signature of Ty Coon}, 1 April 1990\n  Ty Coon, President of Vice\n```\n\n----------------------------------------\n\nTITLE: LGPL License Header Template\nDESCRIPTION: Template for the license header that should be included at the start of source files when applying the GNU LGPL to a library. Contains placeholders for description, year, and author name.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/licenses/LICENSE.fluidsynth.txt#2025-04-20_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n    {description}\n    Copyright (C) {year} {fullname}\n\n    This library is free software; you can redistribute it and/or\n    modify it under the terms of the GNU Lesser General Public\n    License as published by the Free Software Foundation; either\n    version 2.1 of the License, or (at your option) any later version.\n\n    This library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n    Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public\n    License along with this library; if not, write to the Free Software\n    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301\n    USA\n```\n\n----------------------------------------\n\nTITLE: PGP Public Key Block for RPM Package Verification\nDESCRIPTION: A PGP public key that belongs to Dag Wieers and is used to verify RPM packages downloaded from his repository (http://dag.wieers.com/apt/). This key can be used with the 'rpm -K' command when GNU GPG is installed.\nSOURCE: https://github.com/pygame/pygame/blob/main/buildconfig/manylinux-build/docker_base/RPM-GPG-KEY.dag.txt#2025-04-20_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n-----BEGIN PGP PUBLIC KEY BLOCK-----\nVersion: GnuPG v1.2.1 (GNU/Linux)\n\nmQGiBD9JMT0RBAC9Q2B0AloUMTxaK73sD0cOu1MMdD8yuDagbMlDtUYA1aGeJVO6\nTV02JLGr67OBY+UkYuC1c3PUwmb3+jakZd5bW1L8E2L705wS0129xQOZPz6J+alF\n5rTzVkiefg8ch1yEcMayK20NdyOmhDGXQXNQS8OJFLTIC6bJs+7MZL83/wCg3cG3\n3q7MWHm3IpJb+6QKpB9YH58D/2WjPDK+7YIky/JbFBT4JPgTSBy611+bLqHA6PXq\n39tzY6un8KDznAMNtm+NAsr6FEG8PHe406+tbgd7tBkecz3HPX8nR5v0JtDT+gzN\n8fM3kAiAzjCHUAFWVAMAZLr5TXuoq4lGTTxvZbwTjZfyjCm7gIieCu8+qnPWh6hm\n30NgA/0ZyEHG6I4rOWqPks4vZuD+wlp5XL8moBXEKfEVOMh2MCNDRGnvVHu1P3eD\noHOooVMt9sWrGcgxpYuupPNL4Uf6B6smiLlH6D4tEg+qCxC17zABI5572XJTJ170\nJklZJrPGtnkPrrKMamnN9MU4RjGmjh9JZPa7rKjZHyWP/z/CBrQ1RGFnIFdpZWVy\ncyAoRGFnIEFwdCBSZXBvc2l0b3J5IHYxLjApIDxkYWdAd2llZXJzLmNvbT6IWQQT\nEQIAGQUCP0kxPQQLBwMCAxUCAwMWAgECHgECF4AACgkQog5SFGuNeeYvDQCeKHST\nhIq/WzFBXtJOnQkJGSqAoHoAnRtsJVWYmzYKHqzkRx1qAzL18Sd0iEYEEBECAAYF\nAj9JMWAACgkQoj2iXPqnmevnOACfRQaageMcESHVE1+RSuP3txPUvoEAoJAtOHon\ng+3SzVNSZLn/g7/Ljfw+uQENBD9JMT8QBACj1QzRptL6hbpWl5DdQ2T+3ekEjJGt\nllCwt4Mwt/yOHDhzLe8SzUNyYxTXUL4TPfFvVW9/j8WOkNGvffbs7g84k7a5h/+l\nIJTTlP9V9NruDt1dlrBe+mWF6eCY55OFHjb6nOIkcJwKxRd3nGlWnLsz0ce9Hjrg\n6lMrn0lPsMV6swADBQP9H42sss6mlqnJEFA97Fl3V9s+7UVJoAIA5uSVXxEOwVoh\nVq7uECQRvWzif6tzOY+vHkUxOBRvD6oIU6tlmuG3WByKyA1d0MTqMr3eWieSYf/L\nn5VA9NuD7NwjFA1kLkoDwfSbsF51LppTMkUggzwgvwE46MB6yyuqAVI1kReAWw+I\nRgQYEQIABgUCP0kxPwAKCRCiDlIUa4155oktAKDAzm9QYbDpk6SrQhkSFy016BjE\nBACeJU1hpElFnUZCL4yKj4EuLnlo8kc=\n=mqUt\n-----END PGP PUBLIC KEY BLOCK-----\n```\n\n----------------------------------------\n\nTITLE: SSE to NEON Translation Header File Comments\nDESCRIPTION: Comments describing the purpose of the header file, listing contributors, and providing the MIT license text.\nSOURCE: https://github.com/pygame/pygame/blob/main/docs/licenses/LICENSE.sse2neon-h.txt#2025-04-20_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n// This header file provides a simple API translation layer\n// between SSE intrinsics to their corresponding Arm/Aarch64 NEON versions\n//\n// This header file does not yet translate all of the SSE intrinsics.\n//\n// Contributors to this work are:\n//   John W. Ratcliff <jratcliffscarab@gmail.com>\n//   Brandon Rowlett <browlett@nvidia.com>\n//   Ken Fast <kfast@gdeb.com>\n//   Eric van Beurden <evanbeurden@nvidia.com>\n//   Alexander Potylitsin <apotylitsin@nvidia.com>\n//   Hasindu Gamaarachchi <hasindu2008@gmail.com>\n//   Jim Huang <jserv@biilabs.io>\n//   Mark Cheng <marktwtn@biilabs.io>\n//   Malcolm James MacLeod <malcolm@gulden.com>\n//   Devin Hussey (easyaspi314) <husseydevin@gmail.com>\n//   Sebastian Pop <spop@amazon.com>\n\n/*\n * The MIT license:\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n```"
  }
]