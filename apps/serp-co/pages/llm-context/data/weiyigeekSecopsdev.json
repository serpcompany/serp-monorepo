[
  {
    "owner": "weiyigeek",
    "repo": "secopsdev",
    "content": "TITLE: Ubuntu Security Reinforcement Script Usage\nDESCRIPTION: This bash script provides options for system initialization and security reinforcement on Ubuntu 22.04. It allows configuring network settings, calling specific functions, clearing logs, and displaying version/help information. It requires root privileges to execute and accepts various command-line arguments.\nSOURCE: https://github.com/weiyigeek/secopsdev/blob/master/OperatingSystem/Security/Ubuntu/Readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Ubuntu 22.04 LTS \n# 温馨提示: 请以root用户权限下执行该脚本\n./Ubuntu22.04-InitializeReinforce.sh\n     __          __  _       _  _____           _\n     \\ \\        / / (_)     (_)/ ____|         | |\n     \\ \\  /\\  / /__ _ _   _ _| |  __  ___  ___| | __\n       \\ \\/  \\/ / _ \\ | | | | | | |_ |/ _ \\/ _ \\ |/ /\n       \\  /\\  /  __/ | |_| | | |__| |  __/  __/   <\n         \\/  \\/ \\___|_|\\__, |_|\\_____|\\___|\\___|_|\\_\\\n                      __/ |\n                      |___/\n======================================================================\n@ Desc: Ubuntu 22.04 Security Reinforce and System initialization\n@ Mail bug reports: master@weiyigeek.top or pull request (pr)\n@ Author : WeiyiGeek\n@ Follow me on Blog   : https://blog.weiyigeek.top/\n@ Follow me on Wechat : https://weiyigeek.top/wechat.html?key=欢迎关注\n@ Communication group : https://weiyigeek.top/visit.html\n======================================================================\n\nUsage: ./Ubuntu22.04-InitializeReinforce.sh [--start ] [--network] [--function] [--clear] [--version] [--help]\nOption:\n  --start            Start System initialization and security reinforcement.\n  --network          Configure the system network and DNS resolution server.\n  --function         PCall the specified shell function.\n  --clear            Clear all system logs, cache and backup files.\n  --version          Print version and exit.\n  --help             Print help and exit.\n\nMail bug reports or suggestions to <master@weiyigeek.top> or pull request (pr).\ncurrent version : 1.0\n```\n\n----------------------------------------\n\nTITLE: Ubuntu Security Script Execution\nDESCRIPTION: These commands provide instructions on how to execute the Ubuntu security reinforcement script. It requires granting execute permissions to all files and directories, configuring parameters inside `Ubuntu22.04.conf` then it shows how to start the initialization and hardening process by running `Ubuntu22.04-InitializeReinforce.sh` with the `--start` option.\nSOURCE: https://github.com/weiyigeek/secopsdev/blob/master/OperatingSystem/Security/Ubuntu/Readme.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# 执行权限赋予\nchmod +x -R *\n\n# 开始初始化加固\nUbuntu22.04-InitializeReinforce.sh  --start\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies\nDESCRIPTION: These commands install the necessary Python packages (flask, easyocr, gevent, gevent-websocket) using pip. These packages provide the framework for building the API and performing OCR.\nSOURCE: https://github.com/weiyigeek/secopsdev/blob/master/Project/Python/EasyOCR/Travelcodeocr/Readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install flask\npip install easyocr\npip install gevent\npip install gevent-websocket\n```\n\n----------------------------------------\n\nTITLE: Starting the Application\nDESCRIPTION: This command starts the Python application using the setup.py script. It includes arguments for specifying the image directory (--imgdir), log directory (--logdir), IP address (--ip), port (--port), and whether to use GPU acceleration (--gpu).\nSOURCE: https://github.com/weiyigeek/secopsdev/blob/master/Project/Python/EasyOCR/Travelcodeocr/Readme.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\npython ./setup.py --imgdir=/imgs --logdir=/logs --ip=0.0.0.0 --port=8000 --gpu=True\n```\n\n----------------------------------------\n\nTITLE: Ubuntu Script Directory Structure\nDESCRIPTION: This `tree` command output shows the directory structure of the Ubuntu security reinforcement script. It includes the main script, configuration files, example configurations, and various scripts for different functionalities like OS base settings, cleaning, exceptions, network, optimization, security, service management, and software installation.\nSOURCE: https://github.com/weiyigeek/secopsdev/blob/master/OperatingSystem/Security/Ubuntu/Readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n:~$ tree Ubuntu/\nUbuntu/\n├── Ubuntu22.04-InitializeReinforce.sh\n├── config\n│   └── Ubuntu22.04.conf\n├── example\n│   └── 22.04\n└── scripts\n    ├── os-base.sh\n    ├── os-clean.sh\n    ├── os-exceptions.sh\n    ├── os-info.sh\n    ├── os-manual.sh\n    ├── os-network.sh\n    ├── os-optimize.sh\n    ├── os-security.sh\n    ├── os-service.sh\n    └── os-software.sh\n\n4 directories, 12 files\n```\n\n----------------------------------------\n\nTITLE: Building Docker Image\nDESCRIPTION: These commands build a Docker image for the OCR application. It starts by navigating to the directory containing the Dockerfile and then uses the docker build command to create an image tagged as harbor.weiyigeek.top/python/easyocr-healthcode:v1.6.2.\nSOURCE: https://github.com/weiyigeek/secopsdev/blob/master/Project/Python/EasyOCR/Travelcodeocr/Readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n~$ cd /opt/images/easyocr/\n/opt/images/easyocr$ ls\nDockerfile  EasyOCR\n\n$ docker build -t harbor.weiyigeek.top/python/easyocr-healthcode:v1.6.2 .\n$ docker images\nREPOSITORY                                               TAG                    IMAGE ID       CREATED         SIZE\nharbor.weiyigeek.top/python/easyocr-healthcode           v1.6.2                 940a65f8a6ec   18 hours ago    7.39GB\n```\n\n----------------------------------------\n\nTITLE: Applying Kubernetes StatefulSet\nDESCRIPTION: These commands deploy the application using Kubernetes. It creates a namespace named 'devtest' and then applies the configuration defined in the 'healthcode-sts.yaml' file to create a StatefulSet. Finally, it checks the status of pods in the namespace.\nSOURCE: https://github.com/weiyigeek/secopsdev/blob/master/Project/Python/EasyOCR/Travelcodeocr/Readme.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ kubectl create ns devtest\n$ kubectl apply -f healthcode-sts.yaml\n$ kubectl get pod -n devtest\nNAME             READY   STATUS    RESTARTS   AGE\nhealthcode-0-5   1/1     Running   0          15h\nhealthcode-0-4   1/1     Running   0          15h\nhealthcode-0-3   1/1     Running   0          15h\nhealthcode-0-2   1/1     Running   0          15h\nhealthcode-0-1   1/1     Running   0          15h\nhealthcode-0-0   1/1     Running   0          15h\n```\n\n----------------------------------------\n\nTITLE: Listing Script Function Names\nDESCRIPTION: This `grep` command searches for function names within the scripts directory. It retrieves lines containing the string \"函数名称\" (function name) and the subsequent line, which usually describes the function's purpose. It illustrates how the script is modularized into functions for various tasks.\nSOURCE: https://github.com/weiyigeek/secopsdev/blob/master/OperatingSystem/Security/Ubuntu/Readme.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n❯ grep -r -n  \"函数名称\" -A 1 *\nscripts/os-base.sh:26:# 函数名称: base_hostname\nscripts/os-base.sh-27-# 函数用途: 主机名称设置\n--\nscripts/os-base.sh:55:# 函数名称: ubuntu_mirror\nscripts/os-base.sh-56-# 函数用途: ubuntu 系统主机软件仓库镜像源\n--\nscripts/os-base.sh:126:# 函数名称: ubuntu_software\nscripts/os-base.sh-127-# 函数用途: ubuntu 系统主机内核版本升级以常规软件安装\n--\nscripts/os-base.sh:153:# 函数名称: base_timezone\nscripts/os-base.sh-154-# 函数用途: 主机时间同步校准与时区设置\n--\nscripts/os-base.sh:192:# 函数名称: base_banner\nscripts/os-base.sh-193-# 函数用途: 远程本地登陆主机信息展示\n--\nscripts/os-base.sh:345:# 函数名称: base_reboot\nscripts/os-base.sh-346-# 函数用途: 是否进行重启或者关闭服务器\n--\nscripts/os-clean.sh:27:# 函数名称: system_clean\nscripts/os-clean.sh-28-# 函数用途: 删除安全加固过程临时文件清理为基线镜像做准备\n--\nscripts/os-exceptions.sh:26:# 函数名称: problem_usercrond\nscripts/os-exceptions.sh-27-# 函数用途: 解决普通用户定时任务无法定时执行问题\n--\nscripts/os-exceptions.sh:45:# 函数名称: problem_multipath\nscripts/os-exceptions.sh-46-# 函数用途: 解决 ubuntu multipath add missing path 错误\n--\nscripts/os-network.sh:27:# 函数名称: net_config\nscripts/os-network.sh-28-# 函数用途: 主机IP地址与网关设置\n--\nscripts/os-network.sh:70:# 函数名称: net_dns\nscripts/os-network.sh-71-# 函数用途: 设置主机DNS解析服务器\n--\nscripts/os-optimize.sh:27:# 函数名称: optimize_kernel\nscripts/os-optimize.sh-28-# 函数用途: 系统内核参数的优化配置\n--\nscripts/os-optimize.sh:84:# 函数名称: resources_limits\nscripts/os-optimize.sh-85-# 函数用途: 系统资源文件打开句柄数优化配置\n--\nscripts/os-optimize.sh:115:# 函数名称: swap_partition\nscripts/os-optimize.sh-116-# 函数用途: 创建系统swap分区\n--\nscripts/os-security.sh:27:# 函数名称: sec_usercheck\nscripts/os-security.sh-28-# 函数用途: 用于锁定或者删除多余的系统账户\n--\nscripts/os-security.sh:65:# 函数名称: sec_userconfig\nscripts/os-security.sh-66-# 函数用途: 针对拥有ssh远程登陆权限的用户进行密码口令设置。\n--\nscripts/os-security.sh:131:# 函数名称: sec_passpolicy\nscripts/os-security.sh-132-# 函数用途: 用户密码复杂性策略设置 (密码过期周期0~90、到期前15天提示、密码长度至少12、复杂度设置至少有一个大小写、数字、特殊字符、密码三次不能一样、尝试次数为三次）\n--\nscripts/os-security.sh:166:# 函数名称: sec_sshdpolicy\nscripts/os-security.sh-167-# 函数用途: 系统sshd服务安全策略设置\n--\nscripts/os-security.sh:194:# 函数名称: sec_loginpolicy\nscripts/os-security.sh-195-# 函数用途: 用户登陆安全策略设置\n--\nscripts/os-security.sh:230:# 函数名称: sec_historypolicy\nscripts/os-security.sh-231-# 函数用途: 用户终端执行的历史命令记录安全策略设置\n--\nscripts/os-security.sh:261:# 函数名称: sec_grubpolicy\nscripts/os-security.sh-262-# 函数用途: 系统 GRUB 安全设置防止物理接触从grub菜单中修改密码\n--\nscripts/os-security.sh:304:# 函数名称: sec_firewallpolicy\nscripts/os-security.sh-305-# 函数用途: 系统防火墙策略设置, 建议操作完成后重启计算机.\n--\nscripts/os-security.sh:335:# 函数名称: sec_ctrlaltdel\nscripts/os-security.sh-336-# 函数用途: 禁用 ctrl+alt+del 组合键对系统重启 (必须要配置我曾入过坑)\n--\nscripts/os-security.sh:355:# 函数名称: sec_recyclebin\nscripts/os-security.sh-356-# 函数用途: 设置文件删除回收站别名(防止误删文件)(必须要配置,我曾入过坑)\n--\nscripts/os-security.sh:405:# 函数名称: sec_supolicy\nscripts/os-security.sh-406-# 函数用途: 切换用户日志记录和切换命令更改名称为SU(可选)\n--\nscripts/os-security.sh:425:# 函数名称: sec_privilegepolicy\nscripts/os-security.sh-426-# 函数用途: 系统用户sudo权限与文件目录创建权限策略设置\n--\nscripts/os-service.sh:26:# 函数名称: svc_apport\nscripts/os-service.sh-27-# 函数用途: 禁用烦人的apport错误报告\n--\nscripts/os-service.sh:52:# 函数名称: svc_snapd\nscripts/os-service.sh-53-# 函数用途: 不使用snapd容器的环境下禁用或者卸载多余的snap软件及其服务\n--\nscripts/os-service.sh:75:# 函数名称: svc_cloud-init\nscripts/os-service.sh-76-# 函数用途: 非云的环境下禁用或者卸载多余的cloud-init软件及其服务\n--\nscripts/os-service.sh:101:# 函数名称: svc_debugshell\nscripts/os-service.sh-102-# 函数用途: 在系统启动时禁用debug-shell服务\n--\nscripts/os-software.sh:26:# 函数名称: install_chrony\nscripts/os-software.sh-27-# 函数用途: 安装配置 chrony 时间同步服务器\n--\nscripts/os-software.sh:79:# 函数名称: install_java\nscripts/os-software.sh-80-# 函数用途: 安装配置java环境\n--\nscripts/os-software.sh:110:## 函数名称: install_docker\nscripts/os-software.sh-111-## 函数用途: 在 Ubuntu 主机上安装最新版本的Docker\n--\nscripts/os-software.sh:201:## 函数名称: install_cockercompose\nscripts/os-software.sh-202-## 函数用途: 在 Ubuntu 主机上安装最新版本的Dockercompose\n```\n\n----------------------------------------\n\nTITLE: Monitoring GPU Usage\nDESCRIPTION: This command provides information about GPU utilization using the nvidia-smi tool. It shows details such as GPU name, temperature, memory usage, and the processes using the GPUs.\nSOURCE: https://github.com/weiyigeek/secopsdev/blob/master/Project/Python/EasyOCR/Travelcodeocr/Readme.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnvidia-smi\nFri Dec  9 10:08:32 2022\n+-----------------------------------------------------------------------------+\n| NVIDIA-SMI 465.19.01    Driver Version: 465.19.01    CUDA Version: 11.3     |\n|-------------------------------+----------------------+----------------------|\n| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |\n| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |\n|                               |                      |               MIG M. |\n|===============================+======================+======================|\n|   0  NVIDIA Tesla V1...  Off  | 00000000:1B:00.0 Off |                    0 |\n| N/A   41C    P0    36W / 250W |   6697MiB / 32510MiB |      0%      Default |\n|                               |                      |                  N/A |\n+-------------------------------+----------------------+----------------------+\n|   1  NVIDIA Tesla V1...  Off  | 00000000:1D:00.0 Off |                    0 |\n| N/A   51C    P0    53W / 250W |   9489MiB / 32510MiB |     14%      Default |\n|                               |                      |                  N/A |\n+-------------------------------+----------------------+----------------------+\n|   2  NVIDIA Tesla V1...  Off  | 00000000:3D:00.0 Off |                    0 |\n| N/A   53C    P0    42W / 250W |   5611MiB / 32510MiB |     20%      Default |\n|                               |                      |                  N/A |\n+-------------------------------+----------------------+----------------------+\n|   3  NVIDIA Tesla V1...  Off  | 00000000:3F:00.0 Off |                    0 |\n| N/A   37C    P0    35W / 250W |  10555MiB / 32510MiB |      0%      Default |\n|                               |                      |                  N/A |\n+-------------------------------+----------------------+----------------------+\n|   4  NVIDIA Tesla V1...  Off  | 00000000:40:00.0 Off |                    0 |\n| N/A   45C    P0    51W / 250W |   5837MiB / 32510MiB |      5%      Default |\n|                               |                      |                  N/A |\n+-------------------------------+----------------------+----------------------+\n|   5  NVIDIA Tesla V1...  Off  | 00000000:41:00.0 Off |                    0 |\n| N/A   37C    P0    37W / 250W |  10483MiB / 32510MiB |      0%      Default |\n|                               |                      |                  N/A |\n+-------------------------------+----------------------+----------------------+\n\n+-----------------------------------------------------------------------------+\n| Processes:                                                                  |\n|  GPU   GI   CI        PID   Type   Process name                  GPU Memory |\n|        ID   ID                                                   Usage      |\n|=============================================================================|\n|    0   N/A  N/A    167660      C   python                           6693MiB |\n|    1   N/A  N/A    166790      C   python                           9485MiB |\n|    2   N/A  N/A    165941      C   python                           5607MiB |\n|    3   N/A  N/A    165032      C   python                          10551MiB |\n|    4   N/A  N/A    164226      C   python                           5833MiB |\n|    5   N/A  N/A    163344      C   python                          10479MiB |\n+-----------------------------------------------------------------------------+\n```\n\n----------------------------------------\n\nTITLE: Web Monitor Screen Capture Shell Script Execution\nDESCRIPTION: This snippet demonstrates how to execute the `WebMonitorScreenCapture.sh` script, which is designed for web monitoring. It first makes the script executable using `chmod +x` and then runs it using `./`. The subsequent commands list the contents of the log directory to display the captured screenshots and log files.\nSOURCE: https://github.com/weiyigeek/secopsdev/blob/master/AutomatedTesting/Web/phantomjs/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n# 代码执行\nchmod +x /1.WebMonitorScreenCapture.sh\n./1.WebMonitorScreenCapture.sh\n\ncd /var/log/WebScreenCapture/www.baidu.com\nls /var/log/WebScreenCapture/www.com\n20230111172153-index.html  20230111172153-index.html.png  20230111173604-index.html  data.json  exception.log  index.html  text.json\n```\n\n----------------------------------------\n\nTITLE: Install Hexo Sitemap Generator and Dependencies\nDESCRIPTION: This snippet demonstrates how to install the hexo-generator-sitemap plugin, along with md5, moment, request, and xml-parser dependencies using npm. These are required for generating sitemaps and potentially for the `gitalk-auto-init.js` script's functionality.\nSOURCE: https://github.com/weiyigeek/secopsdev/blob/master/Application/Blog/Hexo/Gitalk/Readme.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n$ npm i -S hexo-generator-sitemap\n$ npm i -D md5 moment request xml-parser\n```\n\n----------------------------------------\n\nTITLE: Install cmatrix using apt\nDESCRIPTION: This command installs the 'cmatrix' package using the apt package manager. Apt is the default package manager on Debian and Ubuntu systems. The command requires root privileges or sudo to execute.\nSOURCE: https://github.com/weiyigeek/secopsdev/blob/master/Others/杂项/CodeTheRain/Readme.txt#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\napt install cmatrix\n```\n\n----------------------------------------\n\nTITLE: Install cmatrix using yum\nDESCRIPTION: This command installs the 'cmatrix' package using the yum package manager. Yum is commonly used on CentOS, Red Hat Enterprise Linux (RHEL), and Fedora systems. This command requires root privileges to execute successfully.\nSOURCE: https://github.com/weiyigeek/secopsdev/blob/master/Others/杂项/CodeTheRain/Readme.txt#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nyum install cmatrix\n```"
  }
]