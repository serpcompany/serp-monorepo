[
  {
    "owner": "jetbrains",
    "repo": "qodana-cli",
    "content": "TITLE: Running Qodana scan command\nDESCRIPTION: This snippet illustrates the basic command to scan a project using Qodana CLI, which performs analysis and generates reports based on the project's configuration.\nSOURCE: https://github.com/jetbrains/qodana-cli/blob/main/README.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nqodana scan\n```\n\n----------------------------------------\n\nTITLE: Scanning a project with Qodana\nDESCRIPTION: This snippet explains how to perform a full project scan with Qodana, noting the possibility of overriding settings via 'qodana.yaml' and environment variables for token and endpoint configuration.\nSOURCE: https://github.com/jetbrains/qodana-cli/blob/main/README.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nqodana scan [flags]\n```\n\n----------------------------------------\n\nTITLE: Qodana Scan: Options Overview\nDESCRIPTION: This snippet lists the options available for the `qodana scan` command. These options control various aspects of the analysis process, including the linter to use, project directory, results directory, cache settings, report generation, and integration with external services like Code Climate and Bitbucket Insights. It also includes options for baseline comparison, commit history analysis, quality gate settings, and applying quick-fixes. Dependencies: Qodana CLI tool.\nSOURCE: https://github.com/jetbrains/qodana-cli/blob/main/README.md#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\n  -l, --linter string                            Use to run Qodana in a container (default). Choose linter (image) to use. Not compatible with --ide option. Available images are: jetbrains/qodana-jvm, jetbrains/qodana-php, jetbrains/qodana-python, jetbrains/qodana-js, jetbrains/qodana-go, jetbrains/qodana-dotnet, jetbrains/qodana-cpp, jetbrains/qodana-jvm-community, jetbrains/qodana-python-community, jetbrains/qodana-jvm-android, jetbrains/qodana-cdnet\n      --ide string                               Use to run Qodana without a container. Not compatible with --linter option. Available codes are QDNET, add -EAP part to obtain EAP versions\n  -i, --project-dir string                       Root directory of the inspected project (default \".\")\n  -o, --results-dir string                       Override directory to save Qodana inspection results to (default <userCacheDir>/JetBrains/<linter>/results)\n      --cache-dir string                         Override cache directory (default <userCacheDir>/JetBrains/<linter>/cache)\n  -r, --report-dir string                        Override directory to save Qodana HTML report to (default <userCacheDir>/JetBrains/<linter>/results/report)\n      --print-problems                           Print all found problems by Qodana in the CLI output\n      --code-climate                             Generate a Code Climate report in SARIF format (compatible with GitLab Code Quality), will be saved to the results directory (default true if Qodana is executed on GitLab CI)\n      --bitbucket-insights                       Send the results BitBucket Code Insights, no additional configuration required if ran in BitBucket Pipelines (default true if Qodana is executed on BitBucket Pipelines)\n      --clear-cache                              Clear the local Qodana cache before running the analysis\n  -w, --show-report                              Serve HTML report on port\n      --port int                                 Port to serve the report on (default 8080)\n      --config string                            Set a custom configuration file instead of 'qodana.yaml'. Relative paths in the configuration will be based on the project directory.\n  -a, --analysis-id string                       Unique report identifier (GUID) to be used by Qodana Cloud (default \"<generated-value>\")\n  -b, --baseline string                          Provide the path to an existing SARIF report to be used in the baseline state calculation\n      --baseline-include-absent                  Include in the output report the results from the baseline run that are absent in the current run\n      --full-history --commit                    Go through the full commit history and run the analysis on each commit. If combined with --commit, analysis will be started from the given commit. Could take a long time.\n      --commit --full-history                    Base changes commit to reset to, resets git and runs an incremental analysis: analysis will be run only on changed files since the given commit. If combined with --full-history, full history analysis will be started from the given commit.\n      --fail-threshold string                    Set the number of problems that will serve as a quality gate. If this number is reached, the inspection run is terminated with a non-zero exit code\n      --disable-sanity                           Skip running the inspections configured by the sanity profile\n  -d, --source-directory string                  Directory inside the project-dir directory must be inspected. If not specified, the whole project is inspected\n  -n, --profile-name string                      Profile name defined in the project\n  -p, --profile-path string                      Path to the profile file\n      --run-promo string                         Set to 'true' to have the application run the inspections configured by the promo profile; set to 'false' otherwise (default: 'true' only if Qodana is executed with the default profile)\n      --script string                            Override the run scenario (default \"default\")\n      --coverage-dir string                      Directory with coverage data to process\n      --apply-fixes                              Apply all available quick-fixes, including cleanup\n      --cleanup                                  Run project cleanup\n      --property stringArray                     Set a JVM property to be used while running Qodana using the --property property.name=value1,value2,...,valueN notation\n  -s, --save-report                              Generate HTML report (default true)\n      --timeout int                              Qodana analysis time limit in milliseconds. If reached, the analysis is terminated, process exits with code timeout-exit-code. Negative – no timeout (default -1)\n      --timeout-exit-code int                    See timeout option (default 1)\n      --diff-start string                        Commit to start an diff run from. Only files changed between --diff-start and --diff-end will be analysed.\n      --diff-end string                          Commit to end an diff run on. Only files changed between --diff-start and --diff-end will be analysed.\n  -e, --env stringArray                          Only for container runs. Define additional environment variables for the Qodana container (you can use the flag multiple times). CLI is not reading full host environment variables and does not pass it to the Qodana container for security reasons\n  -v, --volume stringArray                       Only for container runs. Define additional volumes for the Qodana container (you can use the flag multiple times)\n  -u, --user string                              Only for container runs. User to run Qodana container as. Please specify user id – '$UID' or user id and group id $(id -u):$(id -g). Use 'root' to run as the root user (default: <the current user>)\n      --skip-pull                                Only for container runs. Skip pulling the latest Qodana container\n  -h, --help                                     help for scan\n```\n\n----------------------------------------\n\nTITLE: Initializing Qodana project configuration\nDESCRIPTION: This snippet describes how to set up a default Qodana configuration by analyzing the project structure, generating a 'qodana.yaml' file, with options to force overwrite and specify the project directory.\nSOURCE: https://github.com/jetbrains/qodana-cli/blob/main/README.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nqodana init [flags]\n```\n\n----------------------------------------\n\nTITLE: Qodana init command options\nDESCRIPTION: This snippet lists the available flags for the 'qodana init' command, including setting a custom config file, forcing overwrite, and specifying the root directory of the project.\nSOURCE: https://github.com/jetbrains/qodana-cli/blob/main/README.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n  --config string        Set a custom configuration file instead of 'qodana.yaml'. Relative paths in the configuration will be based on the project directory.\n  -f, --force                Force initialization (overwrite existing valid qodana.yaml)\n  -h, --help                 help for init\n  -i, --project-dir string   Root directory of the project to configure (default \".\")\n```\n\n----------------------------------------\n\nTITLE: Installing Qodana CLI using Homebrew (macOS/Linux)\nDESCRIPTION: This snippet details the command to install the Qodana CLI via Homebrew package manager on macOS or Linux systems. It simplifies the setup process for users on these platforms.\nSOURCE: https://github.com/jetbrains/qodana-cli/blob/main/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nbrew install jetbrains/utils/qodana\n```\n\n----------------------------------------\n\nTITLE: Installing Qodana CLI with curl on macOS/Linux\nDESCRIPTION: This snippet shows how to install Qodana CLI using the curl command with the official installation script. It supports installing specific versions like 'nightly' and is suitable for users preferring script-based setup.\nSOURCE: https://github.com/jetbrains/qodana-cli/blob/main/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncurl -fsSL https://jb.gg/qodana-cli/install | bash\n```\n\n----------------------------------------\n\nTITLE: Installing Qodana CLI with custom version via curl\nDESCRIPTION: This snippet demonstrates how to install a specific version of Qodana CLI, such as 'nightly', using the curl command with an additional argument to specify the version.\nSOURCE: https://github.com/jetbrains/qodana-cli/blob/main/README.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncurl -fsSL https://jb.gg/qodana-cli/install | bash -s -- nightly\n```\n\n----------------------------------------\n\nTITLE: Installing Qodana CLI on Windows with Winget\nDESCRIPTION: This snippet provides the command to install Qodana CLI via Windows Package Manager (winget), recommended for Windows users for easy setup.\nSOURCE: https://github.com/jetbrains/qodana-cli/blob/main/README.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nwinget install -e --id JetBrains.QodanaCLI\n```\n\n----------------------------------------\n\nTITLE: Installing Qodana CLI on Windows with Chocolatey\nDESCRIPTION: This snippet shows the command to install Qodana CLI using Chocolatey, a package manager for Windows users, enabling straightforward installation.\nSOURCE: https://github.com/jetbrains/qodana-cli/blob/main/README.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nchoco install qodana\n```\n\n----------------------------------------\n\nTITLE: Installing Qodana CLI on Windows with Scoop\nDESCRIPTION: This snippet details the command to install Qodana CLI via Scoop, another Windows package manager, including adding the required bucket before installation.\nSOURCE: https://github.com/jetbrains/qodana-cli/blob/main/README.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nscoop bucket add jetbrains https://github.com/JetBrains/scoop-utils\nscoop install qodana\n```\n\n----------------------------------------\n\nTITLE: Docker Run Command for Qodana Linter\nDESCRIPTION: This command demonstrates how to execute a Qodana linter within a Docker container. It uses `docker run` with various options: `--rm` to remove the container after execution, `-p` to forward ports, `-v` for volume mounts to map directories, and `--show-report` to generate a report.  The command requires the user to replace placeholders for source, output, and cache directories, as well as the specific linter image. This command allows for local testing of Qodana linters and is essential for CI setup.\nSOURCE: https://github.com/jetbrains/qodana-cli/blob/main/README.md#_snippet_20\n\nLANGUAGE: shell\nCODE:\n```\ndocker run --rm -p 8080:8080 -v <source-directory>/:/data/project/ -v <output-directory>/:/data/results/ -v <caches-directory>/:/data/cache/ jetbrains/qodana-<linter> --show-report\n```\n\n----------------------------------------\n\nTITLE: Qodana Show: Serve Report\nDESCRIPTION: This snippet outlines the `qodana show` command and its options, used to serve a Qodana HTML report locally. It provides options for specifying the linter, project directory, report path, and port for the report. It also mentions that the report cannot be viewed via the file:// protocol due to JavaScript security restrictions, and that this command opens the report in a browser. Prerequisites: Qodana CLI tool, Qodana report generated.\nSOURCE: https://github.com/jetbrains/qodana-cli/blob/main/README.md#_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nqodana show [flags]\n```\n\n----------------------------------------\n\nTITLE: Qodana Show: Command Options\nDESCRIPTION: This snippet presents the available options for the `qodana show` command, including flags to open only the report directory, specify the linter, port, project directory, and report path. Dependencies: Qodana CLI tool.\nSOURCE: https://github.com/jetbrains/qodana-cli/blob/main/README.md#_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\n  -d, --dir-only             Open report directory only, don't serve it\n  -h, --help                 help for show\n  -l, --linter string        Override linter to use\n  -p, --port int             Specify port to serve report at (default 8080)\n  -i, --project-dir string   Root directory of the inspected project (default \".\")\n  -r, --report-dir string    Specify HTML report path (the one with index.html inside) (default <userCacheDir>/JetBrains/<linter>/results/report)\n```\n\n----------------------------------------\n\nTITLE: Qodana Send: Send Report to Cloud\nDESCRIPTION: This snippet describes the `qodana send` command, which sends a Qodana report (qodana.sarif.json and other analysis results) to Qodana Cloud.  It explains that the qodana project token must be declared as an environment variable (`QODANA_TOKEN`) and, optionally, that `QODANA_ENDPOINT` can be used to override the Qodana Cloud instance. Dependencies: Qodana CLI tool, Qodana report generated.\nSOURCE: https://github.com/jetbrains/qodana-cli/blob/main/README.md#_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\nqodana send [flags]\n```\n\n----------------------------------------\n\nTITLE: Qodana Send: Command Options\nDESCRIPTION: This snippet details the command-line options available for the `qodana send` command, enabling users to override the linter, project directory, report path, results directory, and qodana.yaml name. Dependencies: Qodana CLI tool.\nSOURCE: https://github.com/jetbrains/qodana-cli/blob/main/README.md#_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\n  -h, --help                 help for send\n  -l, --linter string        Override linter to use\n  -i, --project-dir string   Root directory of the inspected project (default \".\")\n  -r, --report-dir string    Specify HTML report path (the one with index.html inside)  (default \"/Users/tv/Library/Caches/JetBrains/Qodana/e3b0c442-250e5c26/results/report\")\n  -o, --results-dir string   Override directory to save Qodana inspection results to (default \"/Users/tv/Library/Caches/JetBrains/Qodana/e3b0c442-250e5c26/results\")\n  -y, --yaml-name string     Override qodana.yaml name\n```\n\n----------------------------------------\n\nTITLE: Qodana View: View SARIF Files\nDESCRIPTION: This snippet covers the `qodana view` command, which enables the viewing of SARIF files in the CLI. This command is used to preview problems found in SARIF files in the console. It takes a path to the SARIF file as an argument. Dependencies: Qodana CLI tool, a SARIF file.\nSOURCE: https://github.com/jetbrains/qodana-cli/blob/main/README.md#_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\nqodana view [flags]\n```\n\n----------------------------------------\n\nTITLE: Qodana View: Command Options\nDESCRIPTION: This snippet provides the available options for the `qodana view` command. The primary option is `-f` or `--sarif-file`, which specifies the path to the SARIF file to view. Dependencies: Qodana CLI tool.\nSOURCE: https://github.com/jetbrains/qodana-cli/blob/main/README.md#_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\n  -h, --help                help for view\n  -f, --sarif-file string   Path to the SARIF file (default \"./qodana.sarif.json\")\n```\n\n----------------------------------------\n\nTITLE: Qodana Contributors: Calculate Contributors\nDESCRIPTION: This snippet introduces the `qodana contributors` command.  It describes the function of this command to calculate the number of active contributors based on commits in the last 90 days (default), referencing JetBrains Qodana Cloud. Dependencies: Qodana CLI tool.\nSOURCE: https://github.com/jetbrains/qodana-cli/blob/main/README.md#_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\nqodana contributors [flags]\n```\n\n----------------------------------------\n\nTITLE: Qodana Contributors: Command Options\nDESCRIPTION: This snippet displays the command-line options for the `qodana contributors` command, including options for specifying the number of days to calculate contributors, the output format (tabular or JSON), and the project directory. Dependencies: Qodana CLI tool.\nSOURCE: https://github.com/jetbrains/qodana-cli/blob/main/README.md#_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\n  -d, --days int                  Number of days since when to calculate the number of active contributors (default 90)\n  -h, --help                      help for contributors\n  -o, --output string             Output format, can be tabular or json (default \"tabular\")\n  -i, --project-dir stringArray   Project directory, can be specified multiple times to check multiple projects, if not specified, current directory will be used\n```\n\n----------------------------------------\n\nTITLE: Qodana Cloc: Project Statistics\nDESCRIPTION: This snippet introduces the `qodana cloc` command, which provides project statistics such as languages and lines of code. It mentions that the command uses boyter/scc and provides an alternative for calculating contributors. Dependencies: Qodana CLI tool.\nSOURCE: https://github.com/jetbrains/qodana-cli/blob/main/README.md#_snippet_19\n\nLANGUAGE: shell\nCODE:\n```\nqodana cloc [flags]\n```\n\n----------------------------------------\n\nTITLE: Building qodana-cli Binary\nDESCRIPTION: This command builds a binary executable of the qodana-cli using go build.  It creates an executable named 'qd' in the current directory.\nSOURCE: https://github.com/jetbrains/qodana-cli/blob/main/CONTRIBUTING.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ngo build -o qd main.go\n```\n\n----------------------------------------\n\nTITLE: Running qodana-cli for Debug\nDESCRIPTION: This command navigates to the 'cli' directory and then executes the main.go file using the go run command. It is used for running and debugging the program.\nSOURCE: https://github.com/jetbrains/qodana-cli/blob/main/CONTRIBUTING.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncd cli\n go run main.go\n```\n\n----------------------------------------\n\nTITLE: Testing Code with Coverage\nDESCRIPTION: This command runs go test to execute tests and collect coverage data. It tests all Go packages within the project, providing detailed information.\nSOURCE: https://github.com/jetbrains/qodana-cli/blob/main/CONTRIBUTING.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ngo test -v $(go list -f '{{.Dir}}/...' -m)\n```\n\n----------------------------------------\n\nTITLE: Testing Code with Human-Readable Report\nDESCRIPTION: This command executes Go tests and formats the output into a human-readable report using tparse. It enables the use of tparse for better test result visualization.\nSOURCE: https://github.com/jetbrains/qodana-cli/blob/main/CONTRIBUTING.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nexport GITHUB_ACTIONS=true # skip third-party linter tests\n set -o pipefail && go test -json -v $(go list -f '{{.Dir}}/...' -m) | tparse -all\n```\n\n----------------------------------------\n\nTITLE: Dry-run goreleaser\nDESCRIPTION: This command runs goreleaser to simulate the release process without actually publishing the release. It's useful for verifying release configurations and checking for potential errors before the real release.\nSOURCE: https://github.com/jetbrains/qodana-cli/blob/main/CONTRIBUTING.md#_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ngoreleaser release --snapshot --clean\n```\n\n----------------------------------------\n\nTITLE: Building Linux Binary\nDESCRIPTION: This command builds a linux binary executable. It is used for building a custom qodana-cli binary for patching images. It sets the GOOS to linux and disables CGO.\nSOURCE: https://github.com/jetbrains/qodana-cli/blob/main/CONTRIBUTING.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nenv GOOS=linux CGO_ENABLED=0 go build -o qd-custom\n```\n\n----------------------------------------\n\nTITLE: Dockerfile to patch qodana-cli\nDESCRIPTION: This Dockerfile defines a multi-stage build process. It starts with a base qodana image and then copies a custom-built qd-custom binary into the image to replace the existing qodana-cli executable.\nSOURCE: https://github.com/jetbrains/qodana-cli/blob/main/CONTRIBUTING.md#_snippet_7\n\nLANGUAGE: dockerfile\nCODE:\n```\n# Use any existing qodana image\nFROM registry.jetbrains.team/p/sa/containers/qodana-go:latest\nCOPY qd-custom /opt/idea/bin/qodana\n```\n\n----------------------------------------\n\nTITLE: Building a Docker Image\nDESCRIPTION: This command builds a docker image using the Dockerfile in the current directory. It tags the image with the name \"qd-image\".  The image will contain the customized qodana-cli binary.\nSOURCE: https://github.com/jetbrains/qodana-cli/blob/main/CONTRIBUTING.md#_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\ndocker build . -t qd-image\n```\n\n----------------------------------------\n\nTITLE: Running Custom Docker Image\nDESCRIPTION: This command runs the custom Docker image which contains the custom qodana-cli binary and executes a scan using the image as a linter. It is used for testing the custom build.\nSOURCE: https://github.com/jetbrains/qodana-cli/blob/main/CONTRIBUTING.md#_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\n/path/to/qodana-cli/cli/qd-custom scan --linter=\"docker.io/library/qd-image\" --skip-pull\n```\n\n----------------------------------------\n\nTITLE: Tagging and Pushing a Release\nDESCRIPTION: These commands involve checking out the release branch, creating and pushing a signed tag for a new release to GitHub. This initiates the release process. The git tag command creates an annotated tag and the git push command pushes the tag to the remote repository.\nSOURCE: https://github.com/jetbrains/qodana-cli/blob/main/CONTRIBUTING.md#_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\ngit checkout 241 && git tag -a vX.X.X -m \"vX.X.X\" && git push origin vX.X.X\n```\n\n----------------------------------------\n\nTITLE: Chocolatey Release Troubleshooting\nDESCRIPTION: These commands outline the process for releasing a package through Chocolatey manually. They include checking out the tag, running goreleaser to generate the package, setting the checksum, configuring Chocolatey, and pushing the package.\nSOURCE: https://github.com/jetbrains/qodana-cli/blob/main/CONTRIBUTING.md#_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\ngit checkout v2025.1.2\ngoreleaser release --skip-publish --clean\nvim dist/qodana.choco/tools/chocolateyinstall.ps1\nchoco apikey --key <YOUR_API_KEY> --source https://push.chocolatey.org/\ncd dist/qodana.choco && choco pack && choco push qodana.2024.1.2.nupkg --source https://push.chocolatey.org/\n```\n\n----------------------------------------\n\nTITLE: Cloning qodana-cli\nDESCRIPTION: This command clones the qodana-cli project from GitHub using git. It retrieves the source code into a local directory.\nSOURCE: https://github.com/jetbrains/qodana-cli/blob/main/CONTRIBUTING.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone git@github.com:JetBrains/qodana-cli.git\n```\n\n----------------------------------------\n\nTITLE: Configuring a Basic C++ Project with CMake\nDESCRIPTION: A complete CMake configuration that sets up a C++ project with a single executable. It specifies CMake 3.25 as the minimum required version, names the project 'TestLinterRun', and creates an executable named 'out' from the main.cpp source file.\nSOURCE: https://github.com/jetbrains/qodana-cli/blob/main/clang/testdata/TestLinterRun/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.25)\nproject(TestLinterRun)\n\nadd_executable(out main.cpp)\n```"
  }
]