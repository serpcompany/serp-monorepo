[
  {
    "owner": "mnfst",
    "repo": "docs",
    "content": "TITLE: Define Entity Properties (YAML)\nDESCRIPTION: This snippet demonstrates various ways to define entity properties, including the short syntax for strings and the long syntax for specifying the property type and options. It covers properties like name, content, publishedAt, authorEmail and status.\nSOURCE: https://github.com/mnfst/docs/blob/master/entities.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nname: Blog about cats\nentities:\n  Post 📝:\n    properties:\n      - name # Short syntax for string type.\n      - { name: content, type: text } # Long syntax for other types.\n      - { name: publishedAt, type: date }\n      - { name: authorEmail, type: email, hidden: true } # Extra options.\n      - {\n          name: status,\n          type: choice,\n          options: { values: [draft, pending, published] },\n          default: draft # Default value if property not specified.\n        }\n```\n\n----------------------------------------\n\nTITLE: Defining Entity Relations in Manifest\nDESCRIPTION: This YAML snippet demonstrates how to define relations between entities in Manifest, including 'belongsTo' (many-to-one) and 'belongsToMany' (many-to-many) relationships. It showcases the relationship between Player, Team, Skill, and Fixture entities within a Basketball League, highlighting the bi-directional nature of relations and the use of the long syntax for relation customization.\nSOURCE: https://github.com/mnfst/docs/blob/master/entities.md#_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\nname: Basketball League 🏀\n\nentities:\n  Player 🤾:\n    properties:\n      - name\n    belongsTo:\n      - Team\n    belongsToMany:\n      - Skill\n\n  Team 👥:\n    properties:\n      - name\n\n  Skill 💪:\n    properties:\n      - name\n\n  Fixture 🏟️:\n    properties:\n      - { name: homeScore, type: number }\n      - { name: awayScore, type: number }\n    belongsTo:\n      - { name: homeTeam, entity: Team }\n      - { name: awayTeam, entity: Team }\n```\n\n----------------------------------------\n\nTITLE: Define Validation Rules in backend.yml (YAML)\nDESCRIPTION: This snippet demonstrates how to define validation rules for properties within the `backend.yml` file using the block syntax. It shows examples for `name` and `age` properties, specifying minimum length and range constraints respectively. This configuration ensures that the data received conforms to the defined rules before processing.\nSOURCE: https://github.com/mnfst/docs/blob/master/validation.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nentities:\n  Dog:\n    properties:\n      - name\n      - { name: age, type: number }\n    validation:\n      name: { minLength: 3 } # The name should have at least 3 characters.\n      age: { min: 1, max: 30 } # Age should be a number between 1 and 30.\n```\n\n----------------------------------------\n\nTITLE: Configuring Webhooks in manifest/backend.yml (YAML)\nDESCRIPTION: This snippet shows how to define webhooks for entity events in the `manifest/backend.yml` file. It demonstrates attaching webhooks to `beforeCreate` and `afterDelete` events, including specifying URLs, headers with environment variable interpolation, and HTTP methods.\nSOURCE: https://github.com/mnfst/docs/blob/master/webhooks.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nentities:\n  # You can attach one or several webhooks to each entity event.\n  Cat 😺:\n    properties:\n      - name\n    hooks:\n      beforeCreate:\n        - { url: 'https://my-webhook.com' }\n\n  Dog 🐶:\n    properties:\n      - name\n    hooks:\n      afterDelete:\n        # Pass .env variables with ${} interpolation.\n        - {\n            url: 'https://another-webhook.com',\n            headers: { authorization: 'Bearer ${API_KEY}' }\n          }\n        # Specific HTTP method.\n        - { url: 'https://another-one.com', method: 'PATCH' }\n```\n\n----------------------------------------\n\nTITLE: REST API Authorization HTTP\nDESCRIPTION: This HTTP request example shows how to include the JWT token in the `Authorization` header of a request. The token is prefixed with `Bearer` and included in the header.\nSOURCE: https://github.com/mnfst/docs/blob/master/auth.md#_snippet_3\n\nLANGUAGE: HTTP\nCODE:\n```\nGET /api/dynamic/cats\nContent-Type: application/json\nAuthorization: Bearer your-token-here\n```\n\n----------------------------------------\n\nTITLE: Define Entities with Properties (YAML)\nDESCRIPTION: This snippet shows how to define two entities, Cat and Dog, each with a name property, in the backend.yml file. It demonstrates the basic structure for defining entities within the Manifest framework.  It showcases the short syntax for defining string properties.\nSOURCE: https://github.com/mnfst/docs/blob/master/entities.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: A pet app\n\nentities:\n  Cat 😺:\n    properties:\n      - name\n  Dog 🐶:\n    properties:\n      - name\n```\n\n----------------------------------------\n\nTITLE: Upload Image with REST API\nDESCRIPTION: This snippet demonstrates how to upload an image using the Manifest REST API. It specifies the POST request to `/api/upload/image` with `multipart/form-data`, including the expected structure of the request body and the response containing thumbnail and medium image paths.\nSOURCE: https://github.com/mnfst/docs/blob/master/upload.md#_snippet_3\n\nLANGUAGE: http\nCODE:\n```\n// Upload image.\n    POST /api/upload/image\n    Content-Type: multipart/form-data\n    {\n        image: (binary)\n        entity: cats\n        property: avatar\n    }\n\n    // Response.\n    {\n     \"medium\": \"http://localhost:1111/cats/avatar/Oct2024/8dabo9qm1q4n1nk-medium.jpg\",\n     \"thumbnail\": \"http://localhost:1111/cats/avatar/Oct2024/8dabo9qm1q4n1nk-thumbnail.jpg\"\n    }\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Configuration\nDESCRIPTION: This snippet demonstrates the required environment variables for a Manifest deployment. It defines the token secret key, sets the environment to production, and configures the base URL. These variables are crucial for the application to function correctly in a production environment.\nSOURCE: https://github.com/mnfst/docs/blob/master/deploy.md#_snippet_0\n\nLANGUAGE: env\nCODE:\n```\nTOKEN_SECRET_KEY=%ReplaceByYourKey%\nNODE_ENV=production\nBASE_URL=https://my-backend.com\n```\n\n----------------------------------------\n\nTITLE: Defining a simple endpoint in YAML\nDESCRIPTION: This YAML code defines a simple endpoint named 'helloWorld' that responds to GET requests at the '/hello-world' path.  It specifies the handler function to be 'helloWorld'.  This configures the Manifest backend to route requests to the defined handler.\nSOURCE: https://github.com/mnfst/docs/blob/master/endpoints.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nendpoints:\n  helloWorld:\n    path: /hello-world\n    method: GET\n    handler: helloWorld\n```\n\n----------------------------------------\n\nTITLE: Implementing the increaseScore handler in JavaScript\nDESCRIPTION: This JavaScript code implements the 'increaseScore' handler function. It retrieves a competitor by ID using the Manifest backend SDK, increments their score, and patches the record with the updated score.  It then returns the new score as a JSON response. The handler uses `req.params['id']` to access the `id` route parameter defined in the YAML.\nSOURCE: https://github.com/mnfst/docs/blob/master/endpoints.md#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = async (req, res, manifest) => {\n  // Get the requested competitor with the Manifest backend SDK.\n  const competitor = await manifest\n    .from('competitors')\n    .findOneById(req.params['id'])\n\n  // Add 1 to the competitor score.\n  const newScore = competitor.score + 1\n\n  // Patch the record (changing only specified prop \"score\").\n  await manifest.from('competitors').patch(competitor.id, {\n    score: newScore\n  })\n\n  // Return updated score.\n  res.json({ newScore })\n}\n```\n\n----------------------------------------\n\nTITLE: Create New Item via REST API\nDESCRIPTION: This snippet shows an example HTTP request to create a new item in a collection using the Manifest REST API. The request is a POST request to the /api/collections/:slug endpoint with the item's data in the request body as JSON.\nSOURCE: https://github.com/mnfst/docs/blob/master/crud.md#_snippet_11\n\nLANGUAGE: HTTP\nCODE:\n```\nPOST /api/collections/pokemons\nContent-Type: application/json\nBody:\n{\n  \"name\": \"Pikachu\",\n  \"type\": \"electric\",\n  \"level\": 3,\n}\n```\n\n----------------------------------------\n\nTITLE: Filter List of Items via JS SDK\nDESCRIPTION: This JavaScript code shows how to filter a list of cats using the Manifest JS SDK's `where()` and `andWhere()` methods. It demonstrates filtering by breed, active status, and birth date.\nSOURCE: https://github.com/mnfst/docs/blob/master/crud.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst cats = await manifest\n  .from('cats')\n  .where('breed = siamese')\n  .andWhere('active = true')\n  .andWhere('birthDate > 2020-01-01')\n  .find()\n```\n\n----------------------------------------\n\nTITLE: Upload File with JS SDK\nDESCRIPTION: This snippet demonstrates how to upload a file using the Manifest JavaScript SDK. It creates a Blob object, uploads it using the `upload` method, and then uses the returned path to store it in the database.\nSOURCE: https://github.com/mnfst/docs/blob/master/upload.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Create a Blob, adapt this step to your use case.\n    const file = new Blob(['Hello, this is a test file!'], {\n      type: 'text/plain',\n    })\n\n    // Upload a file that will be used as a contract for an invoice.\n    const file = await manifest.from('invoices').upload('contract', file)\n\n    console.log(file)\n    // Output: {\"path\":\"http://localhost:1111/invoices/contract/Oct2024/8dabo9qm1q3swvu-my-contract.pdf\"}\n\n\n    // Then you can store the path in the database.\n    const invoice = await manifest.from('invoices').create({\n      name: 'Invoice ACME',\n      contract: file.path\n    })\n```\n\n----------------------------------------\n\nTITLE: Get List of Items via REST API\nDESCRIPTION: This snippet shows an example HTTP request to retrieve a list of items from a collection using the Manifest REST API. The request is a GET request to the /api/collection/:slug endpoint.\nSOURCE: https://github.com/mnfst/docs/blob/master/crud.md#_snippet_2\n\nLANGUAGE: HTTP\nCODE:\n```\nGET /api/collection/users\n```\n\n----------------------------------------\n\nTITLE: Defining a Password field in Manifest\nDESCRIPTION: This YAML snippet defines a password field named 'password'. The 'type' is set to 'password', indicating that Manifest will automatically hash the value before storing it. This ensures that passwords are not stored in clear text.\nSOURCE: https://github.com/mnfst/docs/blob/master/entities.md#_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\n- { name: password, type: password }\n```\n\n----------------------------------------\n\nTITLE: Defining an endpoint for increasing a competitor's score in YAML\nDESCRIPTION: This YAML code defines an endpoint named 'increaseScore' for a leaderboard application.  It specifies the path as '/competitors/:id/increase', allowing for a competitor ID to be passed as a route parameter.  The method is set to POST, and the handler is 'increaseScore'.  A description is also included for documentation.\nSOURCE: https://github.com/mnfst/docs/blob/master/endpoints.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nname: Leaderboard app 🏅\n\nentities:\n  Competitor:\n    properties:\n      - name\n      - { name: score, type: number }\n\nendpoints:\n  increaseScore:\n    description: Adds 1 to the competitor score.\n    path: /competitors/:id/increase\n    method: POST\n    handler: increaseScore\n```\n\n----------------------------------------\n\nTITLE: Update Item via REST API\nDESCRIPTION: This snippet shows an example HTTP request to update an existing item in a collection using the Manifest REST API. The request is a PUT request to the /api/collections/:slug/:id endpoint with the updated item's data in the request body as JSON.\nSOURCE: https://github.com/mnfst/docs/blob/master/crud.md#_snippet_14\n\nLANGUAGE: HTTP\nCODE:\n```\nPUT /api/collections/pokemons/25\nContent-Type: application/json\nBody:\n{\n  \"name\": \"Raichu\",\n  \"type\": \"electric\",\n  \"level\": 8\n}\n```\n\n----------------------------------------\n\nTITLE: Filter By Relation - JS SDK\nDESCRIPTION: This example shows how to filter items based on their relation properties using the JavaScript SDK. The `where` method allows specifying conditions on relation properties, requiring the relation to be loaded using `with` first.\nSOURCE: https://github.com/mnfst/docs/blob/master/crud.md#_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\n// Get all cats that belong to owner with id 1.\n      const cats = await manifest\n        .from('cats')\n        .with(['owner'])\n        .where('owner.id = 1')\n        .find()\n\n      // Get all cats that have an owner with name \"Jorge\".\n      const cats = await manifest\n        .from('cats')\n        .with(['owner'])\n        .where('owner.name = Jorge')\n        .find()\n```\n\n----------------------------------------\n\nTITLE: Update a Single Item - HTTP Request\nDESCRIPTION: This example shows how to fully update a single item using a PUT request.  It includes the new values for all properties of the item in the request body, with the Content-Type set to application/json.\nSOURCE: https://github.com/mnfst/docs/blob/master/crud.md#_snippet_26\n\nLANGUAGE: http\nCODE:\n```\nPUT /api/singles/homepage\nContent-Type: application/json\nBody:\n{\n  \"title\": \"My new title\",\n  \"description\": \"My new description\"\n}\n\n```\n\n----------------------------------------\n\nTITLE: JS SDK Get Current User JavaScript\nDESCRIPTION: This JavaScript code shows how to get the current logged-in user using the JS SDK. It calls the `manifest.from('contributors').me()` method.\nSOURCE: https://github.com/mnfst/docs/blob/master/auth.md#_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Get the current user (logged as Contributor entity).\nconst me = await manifest.from('contributors').me()\n```\n\n----------------------------------------\n\nTITLE: Store Relations - JS SDK\nDESCRIPTION: This code snippet demonstrates storing a new item with relations using the JavaScript SDK. It passes an object containing the new item's properties, including the IDs of the related items.\nSOURCE: https://github.com/mnfst/docs/blob/master/crud.md#_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\n// Store a new player with relations Team and Skill.\n      const newPlayer = await manifest.from('players').create({\n        name: 'Mike',\n        teamId: 10,\n        skillIds: [1,2,3,4,5]\n      })\n```\n\n----------------------------------------\n\nTITLE: Fetch Data with Manifest SDK in Svelte\nDESCRIPTION: This Svelte component imports the Manifest SDK, defines an interface for a 'Cat' entity, and uses the `onMount` lifecycle hook to fetch data from the 'cats' endpoint using the Manifest SDK. The fetched data is then displayed in an unordered list.\nSOURCE: https://github.com/mnfst/docs/blob/master/svelte.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n<script lang=\"ts\">\n  import Manifest from \"@mnfst/sdk\";\n  import { onMount } from \"svelte\";\n\n  interface Cat {\n    id: number;\n    name: string;\n    type: string;\n    image: string;\n  }\n\n  let cats: Cat[] = [];\n\n  onMount(async () => {\n    const manifest = new Manifest();\n    const result = await manifest.from(\"cats\").find<Cat>();\n    cats = result.data;\n  });\n</script>\n\n<div class=\"main\">\n  <ul>\n    {#each cats as cat}\n      <li>{cat.name}</li>\n    {/each}\n  </ul>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Update Relations - JS SDK\nDESCRIPTION: This code snippet shows how to update relations using the JavaScript SDK, using both `update` for full replacement and `patch` for partial updates. The `update` method replaces all skill relations, while `patch` only updates the team.\nSOURCE: https://github.com/mnfst/docs/blob/master/crud.md#_snippet_39\n\nLANGUAGE: javascript\nCODE:\n```\n// Replaces the whole skill relations by the new skillIds array.\n      await manifest.from('players').update(1, {\n        name: 'Mike',\n        teamId: 10,\n        skillIds: [10, 11]\n      })\n\n      // Updates the team without changing the skills or the name.\n      await manifest.from('players').patch(1, {teamId: 5})\n```\n\n----------------------------------------\n\nTITLE: Validation Failure Response (HTTP & JSON)\nDESCRIPTION: This snippet illustrates the structure of a validation failure response. The HTTP request shows a POST request attempting to create an employee with an invalid email. The JSON response shows an array of validation errors, indicating the property that failed validation (`email`) and the specific constraint that was violated (`contains`).\nSOURCE: https://github.com/mnfst/docs/blob/master/validation.md#_snippet_3\n\nLANGUAGE: http\nCODE:\n```\n// Create a new Employee\nPOST /api/dynamic/employees\nContent-Type: application/json\n{\n    \"name\": \"John Doe\",\n    \"email\": \"john@manifest.build\"\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n[\n    {\n        \"property\": \"email\",\n        \"constraints\": {\n            \"contains\": \"The value must contain @company.com\"\n        }\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: patchDocumentNameIfEmpty Handler in manifest/handlers/patchDocumentNameIfEmpty.js\nDESCRIPTION: This JavaScript snippet shows a middleware handler that uses the Manifest backend SDK to interact with data. If the `name` property in the request body is empty, it fetches a user from the `users` entity using the user ID from the request body and sets a custom name based on the user's name. The handler uses the Manifest SDK (passed as the third argument).\nSOURCE: https://github.com/mnfst/docs/blob/master/middlewares.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = async (req, res, manifest) => {\n  // If the 'name' property of the item is empty.\n  if (!req.body['name']) {\n    // Get the user from the request body.\n    const user = await manifest.from('users').findOneById(req.body['userId'])\n\n    // Set a custom name based on the user.\n    req.body['name'] = `${user.name}'s untitled document`\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining an Image field in Manifest\nDESCRIPTION: This YAML snippet defines an image field named 'photo' with options for generating different sizes: small (90x90) and large (width 200). The 'type' is set to 'image', indicating an image upload field. The system stores absolute paths, which can be adapted using the BASE_URL environment variable.\nSOURCE: https://github.com/mnfst/docs/blob/master/entities.md#_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\n- {\n    name: photo,\n    type: image,\n    options:\n      { sizes: { small: { height: 90, width: 90 }, large: { width: 200 } } }\n  }\n```\n\n----------------------------------------\n\nTITLE: Fetch Data with Manifest SDK in Vue\nDESCRIPTION: This code demonstrates how to use the Manifest SDK within a Vue.js component to fetch data from a Manifest backend. It initializes the SDK, specifies the entity to query ('cats'), and processes the response to update the component's state. The code uses TypeScript for type safety but can be adapted to plain JavaScript by removing the typing.\nSOURCE: https://github.com/mnfst/docs/blob/master/vue.md#_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script lang=\"ts\">\nimport Manifest from \"@mnfst/sdk\";\n\ninterface Cat {\n  id: number;\n  name: string;\n  type: string;\n  image: string;\n}\n\nexport default {\n  data() {\n    return {\n      cats: [] as Cat[],\n    };\n  },\n  mounted() {\n    this.fetchCat();\n  },\n  methods: {\n    async fetchCat() {\n\n      // Init SDK\n      const manifest = new Manifest();\n\n      // Fetch Cats from the backend.\n      manifest.from(\"cats\")\n        .find<Cat>()\n        .then((res) => {\n          // Store the response in the \"cats\" array\n          this.cats = res.data;\n        });\n    },\n  },\n};\n</script>\n\n<template>\n    <ul>\n        <li v-for=\"cat of cats\">{{ cat.name }}</li>\n    </ul>\n</template>\n```\n\n----------------------------------------\n\nTITLE: REST API Get Current User Response JSON\nDESCRIPTION: This JSON response represents the logged-in user data. It returns the user's `id` and `email` after a successful GET request to the `/api/auth/contributors/me` endpoint.\nSOURCE: https://github.com/mnfst/docs/blob/master/auth.md#_snippet_9\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  id: 1,\n  email: 'contributor@test.com'\n}\n```\n\n----------------------------------------\n\nTITLE: Initialize Manifest JS SDK\nDESCRIPTION: Initializes the Manifest JavaScript SDK. The first example initializes the client with the default backend URL (http://localhost:1111), while the second initializes it with a custom base URL.\nSOURCE: https://github.com/mnfst/docs/blob/master/crud.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Manifest from '@mnfst/sdk'\n\n// Initialize client with default backend URL: http://localhost:1111.\nconst manifest = new Manifest()\n\n// Initialize client with custom base URL.\nconst manifest = new Manifest('https://example.com')\n\n// Perform CRUD operations...\nconst cats = await manifest.from('cats').find()\n```\n\n----------------------------------------\n\nTITLE: Delete an Item (Collection) - HTTP Request\nDESCRIPTION: This example shows how to delete an item from a collection using a DELETE request.  It specifies the collection slug and item ID in the request URL.\nSOURCE: https://github.com/mnfst/docs/blob/master/crud.md#_snippet_20\n\nLANGUAGE: http\nCODE:\n```\nDELETE api/collections/cats/60\n```\n\n----------------------------------------\n\nTITLE: Defining a Choice field in Manifest\nDESCRIPTION: This YAML snippet defines two choice fields. The first, named 'sex', provides a choice between 'male' and 'female'. The second, named 'status', provides a choice between 'draft', 'submitted', and 'published', and is marked as 'sequential', indicating a logical order. 'values' is an array of strings representing the available choices.\nSOURCE: https://github.com/mnfst/docs/blob/master/entities.md#_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\n- { name: sex, type: choice, options: { values: [male, female] } }\n\n# Sequential if the values are ordered in a logical sense..\n- {\n    name: status,\n    type: choice,\n    options: { values: [draft, submitted, published], sequential: true }\n  }\n```\n\n----------------------------------------\n\nTITLE: Timestamp Property Definition (YAML)\nDESCRIPTION: Defines a timestamp property named acquiredAt, using the timestamp type.  The format is ISO 8601.\nSOURCE: https://github.com/mnfst/docs/blob/master/entities.md#_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\n- { name: acquiredAt, type: timestamp }\n```\n\n----------------------------------------\n\nTITLE: Inline Validation Syntax (YAML)\nDESCRIPTION: This snippet showcases the inline syntax for defining validation rules directly within the property object in `backend.yml`. It shows how to apply validation to the `email` and `bio` properties, specifying that the email should not be empty and the bio should have a maximum length of 300 characters. Inline declarations take precedence in case of conflict with block declarations.\nSOURCE: https://github.com/mnfst/docs/blob/master/validation.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nentities:\n  Author 🧑🏽‍🦱:\n    properties:\n      - name\n      - { name: email, type: email, validation: { isNotEmpty: true } }\n      - { name: bio, type: textarea, validation: { maxLength: 300 } }\n```\n\n----------------------------------------\n\nTITLE: Get a Single Item - HTTP Response\nDESCRIPTION: This example shows the JSON response after a successful GET request for the homepage single. It contains the title and description properties.\nSOURCE: https://github.com/mnfst/docs/blob/master/crud.md#_snippet_24\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"title\": \"My title\",\n  \"description\": \"Welcome to my website!\"\n}\n```\n\n----------------------------------------\n\nTITLE: Email Property Definition (YAML)\nDESCRIPTION: Defines an email property named email, using the email type. Validates the input to ensure it is a valid email.\nSOURCE: https://github.com/mnfst/docs/blob/master/entities.md#_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\n- { name: email, type: email }\n```\n\n----------------------------------------\n\nTITLE: Using Manifest SDK in React (TypeScript)\nDESCRIPTION: This TypeScript code snippet demonstrates how to use the Manifest SDK to fetch data from a Manifest backend and display it in a React component. It imports the Manifest SDK, initializes it, and uses the `find` method to retrieve a list of `Cat` entities. The fetched data is then stored in a state variable and rendered in a list. This snippet assumes that a Manifest backend is running at `http://localhost:1111` and that a `cats` entity has been created.\nSOURCE: https://github.com/mnfst/docs/blob/master/react.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport Manifest from '@mnfst/sdk';\nimport { useEffect, useState } from \"react\";\n\nfunction App() {\n  interface Cat {\n    id: number;\n    name: string;\n  }\n\n  const [cats, setCat] = useState<Cat[]>([]);\n\n  useEffect(() => {\n    // Init SDK.\n    const manifest = new Manifest();\n\n    // Fetch the list of Cats.\n    manifest.from(\"cats\")\n      .find<Cat>()\n      .then((res) => {\n        setCat(res.data);\n      });\n  }, []);\n\n  // Display a list of Cats.\n  return (\n    <ul>\n      {cats.map((cat) => (\n        <li>{cat.name}</li>\n      ))}\n    </ul>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Number Property Definition (YAML)\nDESCRIPTION: Defines a number property named age, using the number type. Used for storing numerical values.\nSOURCE: https://github.com/mnfst/docs/blob/master/entities.md#_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n- { name: age, type: number }\n```\n\n----------------------------------------\n\nTITLE: String Property Definition (YAML)\nDESCRIPTION: This shows two equivalent ways to define a string property: using the long syntax with 'type: string' and the short syntax without specifying the type.\nSOURCE: https://github.com/mnfst/docs/blob/master/entities.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n- { name: firstName, type: string }\n\n# Short syntax, same as above.\n- firstName\n```\n\n----------------------------------------\n\nTITLE: Serve Manifest Backend (Bash)\nDESCRIPTION: This command starts the Manifest backend server, making the Admin panel and REST API accessible locally.\nSOURCE: https://github.com/mnfst/docs/blob/master/introduction.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run manifest\n```\n\n----------------------------------------\n\nTITLE: File Property Definition (YAML)\nDESCRIPTION: Defines a file property named document, using the file type. Allows file uploads.\nSOURCE: https://github.com/mnfst/docs/blob/master/entities.md#_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\n- { name: document, type: file }\n```\n\n----------------------------------------\n\nTITLE: Create Svelte App\nDESCRIPTION: This command creates a new Svelte app using SvelteKit, navigates into the app directory, installs dependencies, and starts the development server. It assumes npm is installed and configured.\nSOURCE: https://github.com/mnfst/docs/blob/master/svelte.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm create svelte@latest my-client\ncd my-client\nnpm install\nnpm run dev -- --open\n```\n\n----------------------------------------\n\nTITLE: Upload Image with JS SDK\nDESCRIPTION: This snippet illustrates how to upload an image using the Manifest JavaScript SDK. It includes converting a base64 string to a Blob, uploading the image using the `uploadImage` method, and storing the returned image paths (thumbnail and medium) in the database.\nSOURCE: https://github.com/mnfst/docs/blob/master/upload.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Create a Blob from an image, adapt this step to your use case.\n    const base64Image =\n      'iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAQAAAC1HAwCAAAAC0lEQVR42mP8/wcAAwAB/eb7jLwAAAAASUVORK5CYII='\n    const imageBlob: Blob = base64ToBlob(base64Image, 'image/png')\n\n    // Upload the image.\n    const image = await manifest.from('cats').uploadImage('avatar', imageBlob)\n\n    console.log(image)\n    // Output: {\n    // \"medium\": \"http://localhost:1111/cats/avatar/Oct2024/8dabo9qm1q4n1nk-medium.jpg\",\n    // \"thumbnail\": \"http://localhost:1111/cats/avatar/Oct2024/8dabo9qm1q4n1nk-thumbnail.jpg\"\n    // }\n\n    // Then you can store the path in the database.\n    const cat = await manifest.from('cats').create({\n      name: 'Felix',\n      image: image\n    })\n```\n\n----------------------------------------\n\nTITLE: Defining a Location field in Manifest\nDESCRIPTION: This YAML snippet defines a location field named 'location'. The 'type' is set to 'location', indicating that it will store an object with 'lat' and 'lng' coordinates. This allows storing geographic coordinates.\nSOURCE: https://github.com/mnfst/docs/blob/master/entities.md#_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\n- { name: location, type: location }\n```\n\n----------------------------------------\n\nTITLE: S3 Configuration Variables in .env\nDESCRIPTION: Defines the required environment variables for configuring S3 storage. These variables specify the S3 bucket name, endpoint, region, access key ID, and secret access key. They need to be present in the `.env` file.\nSOURCE: https://github.com/mnfst/docs/blob/master/s3-storage.md#_snippet_0\n\nLANGUAGE: env\nCODE:\n```\nS3_BUCKET=my-bucket-name\nS3_ENDPOINT=https://your-s3-provider.com\nS3_REGION=XXX\nS3_ACCESS_KEY_ID=XXX\nS3_SECRET_ACCESS_KEY=XXX\n```\n\n----------------------------------------\n\nTITLE: Webhook HTTP Request Body (JSON)\nDESCRIPTION: This snippet shows the structure of the JSON body that Manifest sends with webhook HTTP requests. It includes the `event`, `createdAt`, `entity`, and `record` fields. The `record` field contains the data associated with the entity, either before or after the event.\nSOURCE: https://github.com/mnfst/docs/blob/master/webhooks.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"event\": \"beforeUpdate\",\n  \"createdAt\": \"2025-01-22T13:38:48.399Z\",\n  \"entity\": \"posts\",\n  \"record\": {\n    \"title\": \"my title\",\n    \"content\": \"my content\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Validate Optional Properties (YAML)\nDESCRIPTION: This snippet demonstrates how to validate optional properties using the `isOptional` validator in `backend.yml`. It shows an example for the `email` property, where the email is only validated if it's provided (not null or undefined), ensuring that it contains \"@company.com\". This allows for conditional validation based on the presence of the property.\nSOURCE: https://github.com/mnfst/docs/blob/master/validation.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nentities:\n  Employee:\n    properties:\n      - name\n      - {\n          name: email,\n          type: email,\n          validation: { contains: '@company.com', isOptional: true }\n        } #  If provided, the email should contain \"@company.com\"\n```\n\n----------------------------------------\n\nTITLE: Adding Production Start Script\nDESCRIPTION: This snippet illustrates how to add a production start script to the `package.json` file. The script executes the main JavaScript file of the Manifest application, enabling production deployment using `npm run start`. This approach ensures that the application runs correctly in a production setting.\nSOURCE: https://github.com/mnfst/docs/blob/master/deploy.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"scripts\": {\n    \"start\": \"node node_modules/manifest/dist/manifest/src/main.js\"\n    [...]\n}\n```\n\n----------------------------------------\n\nTITLE: More Entity Policies YAML\nDESCRIPTION: This YAML snippet provides additional examples of entity policy configurations, showcasing different access types and allowed entities for read, create, update, delete, and signup operations.\nSOURCE: https://github.com/mnfst/docs/blob/master/auth.md#_snippet_13\n\nLANGUAGE: YAML\nCODE:\n```\nentities:\n  Project 🗂️:\n    properties:\n      - name\n    policies:\n      read:\n        - { access: restricted, allow: [Contributor, Manager] } # Only some entities (and admins).\n      create:\n        - { access: restricted, allow: Manager } # Only managers (and admins).\n      update:\n        - access: 👨🏻‍💻 # Only admin.\n      delete:\n        - access: 🚫 # Forbidden (no one).\n\n  Contributor 👨‍💼:\n    authenticable: true\n    properties:\n      - name\n    policies:\n      signup:\n        - access: 🚫 # Forbidden (no one).\n      create:\n        - { access: 🔒, allow: Manager } # Managers can create contributors.\n      update:\n        - { access: 🔒, allow: Manager }\n      delete:\n        - { access: 🔒, allow: Manager } # Managers can create contributors.\n```\n\n----------------------------------------\n\nTITLE: Create and Initialize Vue App\nDESCRIPTION: This snippet demonstrates how to create a new Vue.js application using the Vue CLI, navigate into the project directory, install dependencies, and start the development server. It uses npm to manage the Vue project.\nSOURCE: https://github.com/mnfst/docs/blob/master/vue.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm create vue@latest\ncd my-client // If you called your app \"my-client\" when asked in the previous step\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Using Manifest SDK in Angular Component\nDESCRIPTION: This snippet demonstrates how to import the Manifest SDK, initialize it, and use it to fetch data (cats in this case) inside an Angular component. It uses the `find()` method to retrieve a list of entities from the Manifest backend.\nSOURCE: https://github.com/mnfst/docs/blob/master/angular.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Component } from '@angular/core'\nimport Manifest from '@mnfst/sdk'\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  cats: { id: number, name: string }[] = []\n\n  async ngOnInit() {\n    // Init SDK.\n    const manifest = new Manifest()\n\n    // Fetch the list of Cats.\n    const result = await manifest.from('cats').find()\n    this.cats = result.data\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching and Displaying Data with Manifest SDK in Astro\nDESCRIPTION: This code snippet demonstrates how to use the Manifest SDK within an Astro component to fetch data and render it in the HTML. It initializes the SDK, fetches a list of 'cats' entities using the `from('cats').find()` method, and then maps over the resulting data to display the cat names in a list. Make sure the Manifest backend is running and configured with a 'cats' entity.\nSOURCE: https://github.com/mnfst/docs/blob/master/astro.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n---\n\nimport Manifest from '@mnfst/sdk'\n\n// Init SDK.\nconst manifest = new Manifest()\n\n// Fetch the cat list.\nconst result = await manifest.from('cats').find()\nconst cats = result.data\n\n---\n\n<html lang=\"en\">\n\t<head>\n\t\t<meta charset=\"utf-8\" />\n\t\t<link rel=\"icon\" type=\"image/svg+xml\" href=\"/favicon.svg\" />\n\t\t<meta name=\"viewport\" content=\"width=device-width\" />\n\t\t<meta name=\"generator\" content={Astro.generator} />\n\t\t<title>Astro</title>\n\t</head>\n\t<body>\n\t\t<ul>\n\t\t\t{\n\t\t\t\tcats.map((cat) => (\n\t\t\t\t\t<li>{cat.name}</li>\n\t\t\t\t))\n\t\t\t}\n\t\t</ul>\n\n\t</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Example HTTP Response for List of Items\nDESCRIPTION: This JSON represents the HTTP response from the REST API when fetching a list of items. It contains the data array with the items, pagination information such as the current page, last page, total number of items, and items per page.\nSOURCE: https://github.com/mnfst/docs/blob/master/crud.md#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"data\": [\n    {\n      \"id\": 1,\n      \"name\": \"Lara\"\n    },\n    {\n      \"id\": 2,\n      \"name\": \"Karl\"\n    }\n  ],\n  \"currentPage\": 1,\n  \"lastPage\": 1,\n  \"from\": 1,\n  \"to\": 10,\n  \"total\": 3,\n  \"perPage\": 10\n}\n```\n\n----------------------------------------\n\nTITLE: Update Relations - HTTP Request\nDESCRIPTION: This example demonstrates how to update relations using both PUT (full replacement) and PATCH (partial replacement) requests in the REST API.  PUT replaces all skill relations, while PATCH only updates the team relation.\nSOURCE: https://github.com/mnfst/docs/blob/master/crud.md#_snippet_38\n\nLANGUAGE: http\nCODE:\n```\n// Replaces the whole skill relations by the new skillIds array.\n    PUT http://localhost:1111/api/dynamic/players/1\n    Content-Type: application/json\n    {\n      name: 'Mike',\n      teamId: 10,\n      skillIds: [10, 11]\n    }\n\n    // Updates the team without changing the skills or the name.\n    PATCH http://localhost:1111/api/dynamic/players/1\n    Content-Type: application/json\n    {\n      teamId: 5,\n    }\n```\n\n----------------------------------------\n\nTITLE: Patch an Item (Collection) - JS SDK\nDESCRIPTION: This code snippet shows how to partially update a Pokemon item using the JavaScript SDK's `patch` method.  It takes the item's ID and an object containing the properties to update. It returns a promise that resolves to the updated item.\nSOURCE: https://github.com/mnfst/docs/blob/master/crud.md#_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\n// Patches the Pokemon item with ID 25.\nconst newPokemon = await manifest.from('pokemons').patch(25, {\n  level: 5\n})\n\nconsole.log(newPokemon);\n// Output: {\n//  id: 25,\n//  name: \"Pikachu\",\n//  type: \"electric\",\n//  level: 5\n// }\n```\n\n----------------------------------------\n\nTITLE: REST API Login Response JSON\nDESCRIPTION: This JSON response shows the format of a successful login request. The response contains a JWT token that should be included in the `Authorization` header of subsequent requests using the `Bearer` scheme.\nSOURCE: https://github.com/mnfst/docs/blob/master/auth.md#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"token\": \"12345\"\n}\n```\n\n----------------------------------------\n\nTITLE: JS SDK Login JavaScript\nDESCRIPTION: This JavaScript code snippet shows how to log in as an admin or user using the JS SDK.  It uses the `manifest.login()` method, passing in the entity type, email, and password. Subsequent requests will automatically include the authorization token in the header.\nSOURCE: https://github.com/mnfst/docs/blob/master/auth.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Login as Admin.\nawait manifest.login('admins', 'admin@manifest.build', 'password')\n\n// Login as User entity.\nawait manifest.login('users', 'user@example.com', 'password')\n\n// Then all following requests will have the authorization token in their header until logout.\nconst example = await manifest.from('restricted-resource').find()\n```\n\n----------------------------------------\n\nTITLE: Get List of Items via JS SDK\nDESCRIPTION: This JavaScript code demonstrates how to retrieve a list of users using the Manifest JS SDK. It uses the `from()` method to specify the entity and the `find()` method to retrieve all users.\nSOURCE: https://github.com/mnfst/docs/blob/master/crud.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Get all users.\nconst users = await manifest.from('users').find()\n\nconsole.log(users);\n// Output: {\n//   \"data\": [\n//     {\n//       \"id\": 1,\n//       \"name\": \"Lara\"\n//     },\n//     {\n//       \"id\": 2,\n//       \"name\": \"Karl\"\n//     }\n//   ],\n//   \"currentPage\": 1,\n//   \"lastPage\": 1,\n//   \"from\": 1,\n//   \"to\": 10,\n//   \"total\": 3,\n//   \"perPage\": 10\n// }\n```\n\n----------------------------------------\n\nTITLE: Defining Middlewares in manifest/backend.yml\nDESCRIPTION: This YAML snippet shows how to define middlewares for an entity in the `manifest/backend.yml` file. It specifies the `beforeCreate` and `afterCreate` events and associates handler functions with them. These handlers will be executed before and after a new record is created in the database.\nSOURCE: https://github.com/mnfst/docs/blob/master/middlewares.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nentities:\n  Project 🗂️:\n    properties:\n      - name\n      - { name: date, type: date }\n    middlewares:\n      beforeCreate:\n        - handler: setDate\n      afterCreate:\n        - handler: sendEmail\n```\n\n----------------------------------------\n\nTITLE: Implementing a handler function in JavaScript\nDESCRIPTION: This JavaScript code defines the handler function 'helloWorld' that is executed when the '/hello-world' endpoint is accessed.  It takes the request (req) and response (res) objects as arguments and sends a JSON response containing a 'message' property. This function should be placed in the `/manifest/handlers/helloWorld.js` file.\nSOURCE: https://github.com/mnfst/docs/blob/master/endpoints.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = async (req, res) => {\n  res.json({ message: 'Hello world from my new endpoint!' })\n}\n```\n\n----------------------------------------\n\nTITLE: REST API Signup Response JSON\nDESCRIPTION: This JSON response represents the successful signup. The response returns a JWT token that must be added to the `Authorization` header of subsequent API calls using the `Bearer` scheme.\nSOURCE: https://github.com/mnfst/docs/blob/master/auth.md#_snippet_6\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"token\": \"12345\"\n}\n```\n\n----------------------------------------\n\nTITLE: Store Relations - HTTP Request\nDESCRIPTION: This example demonstrates how to store a new item with relations using the REST API. The request body includes the IDs of the related items as properties ending with 'Id' for many-to-one and 'Ids' for many-to-many relations.\nSOURCE: https://github.com/mnfst/docs/blob/master/crud.md#_snippet_36\n\nLANGUAGE: http\nCODE:\n```\n// Store a new player with relations Team and Skill.\n    POST http://localhost:1111/api/dynamic/players\n    Content-Type: application/json\n    {\n        \"name\": \"Mike\",\n        \"teamId\": 10,\n        \"skillIds\": [1,2,3,4,5]\n    }\n```\n\n----------------------------------------\n\nTITLE: Upload File with REST API\nDESCRIPTION: This snippet shows how to upload a file using the Manifest REST API. It outlines the required POST request to the `/api/upload/file` endpoint with a `multipart/form-data` content type and provides the expected response.\nSOURCE: https://github.com/mnfst/docs/blob/master/upload.md#_snippet_1\n\nLANGUAGE: http\nCODE:\n```\n// Upload file.\n    POST /api/upload/file\n    Content-Type: multipart/form-data\n    {\n        file: (binary)\n        entity: invoices\n        property: contract\n    }\n\n    // Response.\n    {\n        \"path\":\"http://localhost:1111/invoices/contract/Oct2024/8dabo9qm1q3swvu-my-contract.pdf\"\n    }\n```\n\n----------------------------------------\n\nTITLE: setDate Handler in manifest/handlers/setDate.js\nDESCRIPTION: This JavaScript snippet demonstrates a simple middleware handler function. It logs a message to the console and sets the `date` property in the request body to the current date. This handler is intended to be triggered `beforeCreate` event. It receives `req` and `res` arguments.\nSOURCE: https://github.com/mnfst/docs/blob/master/middlewares.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = async (req, res) => {\n  console.log('Hello from the handler!')\n\n  req.body['date'] = new Date()\n}\n```\n\n----------------------------------------\n\nTITLE: Order List of Items via JS SDK\nDESCRIPTION: This JavaScript code demonstrates how to order a list of cats using the Manifest JS SDK. It uses the `orderBy()` method to specify the property to order by and the `desc` option to indicate descending order.\nSOURCE: https://github.com/mnfst/docs/blob/master/crud.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Order cats.\nconst cats = await manifest.from('cats').orderBy('age', { desc: true }).find()\n```\n\n----------------------------------------\n\nTITLE: Define a Single Entity (YAML)\nDESCRIPTION: This snippet defines a single entity, ContactPage, with title, content, and image properties. It includes the 'single: true' setting, a slug, and validation rules for the title property.\nSOURCE: https://github.com/mnfst/docs/blob/master/entities.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nContactPage:\n  single: true\n  slug: contact\n  properties:\n    - { name: title, type: string }\n    - { name: content, type: text }\n    - { name: image, type: image }\n  validation:\n    title: { required: true }\n```\n\n----------------------------------------\n\nTITLE: Update Item via JS SDK\nDESCRIPTION: This JavaScript code demonstrates how to update an existing Pokemon item with ID 25 using the Manifest JS SDK. It uses the `update()` method, passing the ID and an object containing the properties to be updated.\nSOURCE: https://github.com/mnfst/docs/blob/master/crud.md#_snippet_16\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Updates the Pokemon item with ID 25.\nconst newPokemon = await manifest.from('pokemons').update(25, {\n  name: \"Raichu\",\n  type: \"electric\",\n  level: 8,\n})\n\nconsole.log(newPokemon);\n// Output: {\n//  id: 25,\n//  name: \"Raichu\",\n//  type: \"electric\",\n// level: 8\n// }\n```\n\n----------------------------------------\n\nTITLE: Entity Policy Configuration YAML\nDESCRIPTION: This YAML snippet demonstrates how to configure API policies for an entity. It defines access rules for create, update, and delete operations, specifying which entities are allowed to perform each operation.\nSOURCE: https://github.com/mnfst/docs/blob/master/auth.md#_snippet_12\n\nLANGUAGE: YAML\nCODE:\n```\nentities:\n  Invoice 🧾:\n    properties:\n      - number\n      - { name: issueDate, type: date }\n    policies:\n      create:\n        - { access: restricted, allow: User }\n      update:\n        - access: admin\n      delete:\n        - access: forbidden\n```\n\n----------------------------------------\n\nTITLE: Create New Item via JS SDK\nDESCRIPTION: This JavaScript code demonstrates how to create a new item in the 'pokemons' entity using the Manifest JS SDK. It uses the `create()` method, passing an object with the properties of the new item.\nSOURCE: https://github.com/mnfst/docs/blob/master/crud.md#_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Create a new item in the \"pokemons\" entity.\nconst newPokemon = await manifest.from('pokemons').create({\n  name: \"Pikachu\",\n  type: \"electric\",\n  level: 3,\n})\n\nconsole.log(newPokemon);\n// Output: {\n//  id: 25,\n//  name: \"Pikachu\",\n//  type: \"electric\",\n//  level: 3\n// }\n```\n\n----------------------------------------\n\nTITLE: Patch a Single Item - JS SDK\nDESCRIPTION: This code snippet shows how to partially update the homepage single using the JavaScript SDK's `patch` method. It only provides the 'title' property to update, leaving other properties untouched.\nSOURCE: https://github.com/mnfst/docs/blob/master/crud.md#_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\n// Update single entity partially.\nconst homepage = await manifest.single('homepage').patch({\n  title: 'My new title'\n})\nconsole.log(homepage)\n// Output: {\n//  title: \"My new title\",\n//  description: \"Welcome to my website!\"\n// }\n```\n\n----------------------------------------\n\nTITLE: JS SDK Signup JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to sign up a new user using the JS SDK. It calls `manifest.signup()` to create an account. Following requests made with the SDK will automatically include the received authentication token.\nSOURCE: https://github.com/mnfst/docs/blob/master/auth.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Sign up as a new user.\nawait manifest.signup('users', 'user@example.com', 'password')\n\n// Then all following requests will have the authorization token in its header until logout.\nconst example = await manifest.from('restricted-resource').find()\n```\n\n----------------------------------------\n\nTITLE: Update a Single Item - JS SDK\nDESCRIPTION: This code snippet demonstrates how to update a single item using the JavaScript SDK's `single` and `update` methods. It passes an object containing the new values for the item's properties.\nSOURCE: https://github.com/mnfst/docs/blob/master/crud.md#_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\n// Update single entity.\nconst newHomepage = await manifest.single('homepage').update({\n       title: 'My new title',\n       description: 'My new description'\n   })\n\n    console.log(newHomepage);\n    // Output: {\n    //  title: \"My new title\",\n    //  description: \"My new description\"\n    // }\n```\n\n----------------------------------------\n\nTITLE: Delete an Item (Collection) - JS SDK\nDESCRIPTION: This code snippet shows how to delete a cat item using the JavaScript SDK's `delete` method.  It takes the item's ID as an argument and returns a promise that resolves to the deleted item.\nSOURCE: https://github.com/mnfst/docs/blob/master/crud.md#_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\n// Delete the cat with ID 60.\nconst deletedCat = await manifest.from('cats').delete(60)\n\nconsole.log(deletedCat);\n// Output: {\n//  name: \"Fido\",\n// description: \"A cute black cat\"\n// }\n```\n\n----------------------------------------\n\nTITLE: Dockerfile Configuration\nDESCRIPTION: This Dockerfile configures a container for running the Manifest application. It uses a Node.js base image, copies package files, installs dependencies, copies application code, sets the environment to production, exposes a port, and defines a command to start the application. This setup streamlines the deployment process using Docker.\nSOURCE: https://github.com/mnfst/docs/blob/master/deploy.md#_snippet_2\n\nLANGUAGE: dockerfile\nCODE:\n```\n# Use the official Node.js image as a base\nFROM node:18-slim\n\n# Copy package.json and package-lock.json (if available)\nCOPY package*.json ./\n\n# Install dependencies\nRUN npm install && npm cache clean --force && rm -rf /root/.npm && rm -rf /tmp/*\n\n# Copy the rest of your application code\nCOPY . .\n\n# Set the NODE_ENV environment variable\nENV NODE_ENV=production\n\n# Expose the port the app runs on (adjust as needed)\nEXPOSE 1111\n\n# Start the application\nCMD [\"npm\", \"run\", \"start\"]\n```\n\n----------------------------------------\n\nTITLE: Enable Authenticable Entity YAML\nDESCRIPTION: This YAML snippet configures an entity to be authenticable, allowing users to log in with it. It adds the `authenticable: true` property to the entity definition, automatically providing `email` and `password` fields for authentication.\nSOURCE: https://github.com/mnfst/docs/blob/master/auth.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nentities:\n  Patient 🤒:\n    authenticable: true # Makes entity authenticable.\n    properties:\n      - name\n```\n\n----------------------------------------\n\nTITLE: Load Relations - HTTP Request\nDESCRIPTION: This example demonstrates how to load relations with entities using the REST API. The `relations` query parameter specifies which relations should be included in the query, including nested relations.\nSOURCE: https://github.com/mnfst/docs/blob/master/crud.md#_snippet_33\n\nLANGUAGE: http\nCODE:\n```\n// Fetch entities with 2 relations.\n    GET http://localhost:1111/api/dynamic/city?relations=region,mayor\n\n    // Fetch nested relations.\n    GET http://localhost:111/api/dynamic/city?relations=region,region.country,region.country.planet\n```\n\n----------------------------------------\n\nTITLE: Get a Single Item - JS SDK\nDESCRIPTION: This code snippet demonstrates how to retrieve a single item using the JavaScript SDK's `single` and `get` methods. It retrieves the homepage entity and logs its contents to the console.\nSOURCE: https://github.com/mnfst/docs/blob/master/crud.md#_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\n// Get the homepage entity.\nconst homepage = await manifest.single('homepage').get()\n\nconsole.log(homepage);\n// Output: {\n//  title: \"My title\",\n//  description: \"Welcome to my website!\"\n// }\n```\n\n----------------------------------------\n\nTITLE: Load Relations - JS SDK\nDESCRIPTION: This example demonstrates how to load relations with entities using the JavaScript SDK. The `with` method specifies which relations should be included in the query, including nested relations.\nSOURCE: https://github.com/mnfst/docs/blob/master/crud.md#_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\n// Fetch entities with 2 relations.\n      const cities = await manifest\n        .from('cities')\n        .with(['region', 'mayor'])\n        .find()\n\n      // Fetch nested relations.\n      const cities = await manifest\n        .from('cities')\n        .with(['region', 'region.country', 'region.country.planet'])\n        .find()\n```\n\n----------------------------------------\n\nTITLE: REST API Login Request HTTP\nDESCRIPTION: This HTTP request example shows how to log in as an admin or an authenticable entity using the REST API. It sends a POST request to the `/api/auth/admins/login` endpoint with the user's email and password in the request body.\nSOURCE: https://github.com/mnfst/docs/blob/master/auth.md#_snippet_1\n\nLANGUAGE: HTTP\nCODE:\n```\nPOST /api/auth/admins/login\nContent-Type: application/json\n{\n  \"email\": \"admin@manifest.build\",\n  \"password\": \"password\"\n}\n```\n\n----------------------------------------\n\nTITLE: Paginate List of Items via JS SDK\nDESCRIPTION: This JavaScript code shows how to paginate a list of cats using the Manifest JS SDK. It uses the `find()` method with the `page` and `perPage` parameters to specify the desired page and number of items per page.\nSOURCE: https://github.com/mnfst/docs/blob/master/crud.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst cats = await manifest.from('cats').find({ page: 1, perPage: 10 })\n```\n\n----------------------------------------\n\nTITLE: Patch an Item (Collection) - HTTP Request\nDESCRIPTION: This example demonstrates how to partially update an item within a collection using a PATCH request. It modifies only the 'level' property of the Pokemon with ID 25. The content type is set to application/json.\nSOURCE: https://github.com/mnfst/docs/blob/master/crud.md#_snippet_17\n\nLANGUAGE: http\nCODE:\n```\nPATCH /api/collections/pokemons/25\nContent-Type: application/json\nBody:\n{\n  \"level\": 5,\n}\n```\n\n----------------------------------------\n\nTITLE: Filter By Relation - HTTP Request\nDESCRIPTION: This example demonstrates how to filter items by relation properties using the REST API. It uses query parameters to specify the relation and the property to filter by.\nSOURCE: https://github.com/mnfst/docs/blob/master/crud.md#_snippet_35\n\nLANGUAGE: http\nCODE:\n```\n// Get all cats that belong to owner with id 1.\n    GET http://localhost:1111/api/dynamic/cats?relations=owner&owner.id_eq=1\n\n    // Get all cats that have an owner with name \"Jorge\".\n    GET http://localhost:1111/api/dynamic/cats?relations=owner&owner.name_eq=Jorge\n```\n\n----------------------------------------\n\nTITLE: Creating a React App\nDESCRIPTION: This snippet uses `create-react-app` to scaffold a new React project. It also navigates to the newly created directory and starts the development server. Requires Node.js and npm to be installed.\nSOURCE: https://github.com/mnfst/docs/blob/master/react.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpx create-react-app my-client\ncd my-client\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Install Manifest SDK\nDESCRIPTION: This snippet shows how to install the Manifest SDK using npm. This SDK provides the necessary tools to interact with the Manifest backend from your Vue.js application.\nSOURCE: https://github.com/mnfst/docs/blob/master/vue.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @mnfst/sdk\n```\n\n----------------------------------------\n\nTITLE: Example HTTP Response for Create New Item\nDESCRIPTION: This JSON represents the HTTP response after successfully creating a new item via the REST API. It contains the details of the newly created item, including its ID.\nSOURCE: https://github.com/mnfst/docs/blob/master/crud.md#_snippet_12\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"id\": 25,\n  \"name\": \"Pikachu\",\n  \"type\": \"electric\",\n  \"level\": 3,\n}\n```\n\n----------------------------------------\n\nTITLE: REST API Signup Request HTTP\nDESCRIPTION: This HTTP request example shows how to sign up a new user using the REST API. It sends a POST request to the `/api/auth/users/signup` endpoint with the new user's email and password.\nSOURCE: https://github.com/mnfst/docs/blob/master/auth.md#_snippet_5\n\nLANGUAGE: HTTP\nCODE:\n```\nPOST /api/auth/users/signup\nContent-Type: application/json\n{\n    \"email\": \"user@example.com\",\n    \"password\": \"password\"\n}\n```\n\n----------------------------------------\n\nTITLE: Patch an Item (Collection) - HTTP Response\nDESCRIPTION: This example shows the JSON response after a successful PATCH request to update a Pokemon item. The response includes the updated 'level' property and the other unchanged properties.\nSOURCE: https://github.com/mnfst/docs/blob/master/crud.md#_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 25,\n  \"name\": \"Pikachu\",\n  \"type\": \"electric\",\n  \"level\": 5\n}\n```\n\n----------------------------------------\n\nTITLE: MySQL/MariaDB .env Configuration\nDESCRIPTION: This snippet configures a Manifest application to use MySQL or MariaDB. It sets DB_CONNECTION to mysql and specifies the database username, password, host, port, database name, and SSL setting.\nSOURCE: https://github.com/mnfst/docs/blob/master/config.md#_snippet_2\n\nLANGUAGE: env\nCODE:\n```\nDB_CONNECTION=mysql\n\nDB_USERNAME=xxxxx\nDB_PASSWORD=xxxxx\nDB_HOST=my-host.com\nDB_PORT=25060\nDB_DATABASE=my_app\nDB_SSL=true # Required for remote managed DBs, remove if local\n```\n\n----------------------------------------\n\nTITLE: Displaying data in Angular template\nDESCRIPTION: This snippet demonstrates how to display the fetched data (cats array) in an Angular template using `*ngFor` directive. The `cat.name` property is displayed for each cat in the array.\nSOURCE: https://github.com/mnfst/docs/blob/master/angular.md#_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<ul>\n  <li *ngFor=\"let cat of cats\">{{ cat.name }}</li>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Get Single Item via JS SDK\nDESCRIPTION: This JavaScript code demonstrates how to retrieve a single cat item by its ID using the Manifest JS SDK. It uses the `findOneById()` method with the ID as the parameter.\nSOURCE: https://github.com/mnfst/docs/blob/master/crud.md#_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Get cat with ID 34\nconst cat = await manifest.from('cats').findOneById(34)\n\nconsole.log(cat);\n// Output: {\n//  name: \"Mina\",\n//  description\": \"A really cute cat\"\n// }\n```\n\n----------------------------------------\n\nTITLE: Install Manifest SDK\nDESCRIPTION: This snippet demonstrates how to install the Manifest SDK using npm. It should be executed from the root directory of your Angular project.\nSOURCE: https://github.com/mnfst/docs/blob/master/angular.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nnpm i @mnfst/sdk\n```\n\n----------------------------------------\n\nTITLE: Patch a Single Item - HTTP Request\nDESCRIPTION: This example demonstrates partially updating a single item with a PATCH request. It modifies only the 'title' property of the homepage single. The content type is set to application/json.\nSOURCE: https://github.com/mnfst/docs/blob/master/crud.md#_snippet_29\n\nLANGUAGE: http\nCODE:\n```\nPATCH /api/singles/homepage\nContent-Type: application/json\nBody:\n{\n  \"title\": \"My new title\",\n}\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL .env Configuration\nDESCRIPTION: This snippet configures a Manifest application to use PostgreSQL. It sets DB_CONNECTION to postgres and specifies the database host, username, password, database name, and SSL setting.\nSOURCE: https://github.com/mnfst/docs/blob/master/config.md#_snippet_1\n\nLANGUAGE: env\nCODE:\n```\nDB_CONNECTION=postgres\n\nDB_HOST=my-host.com\nDB_USERNAME=owner\nDB_PASSWORD=xxxxx\nDB_DATABASE=my_app\nDB_SSL=true # Required for remote managed DBs, remove if local\n```\n\n----------------------------------------\n\nTITLE: Installing Manifest SDK (npm)\nDESCRIPTION: This command installs the Manifest SDK package (`@mnfst/sdk`) as a dependency for your Astro project.  It allows your Astro application to interact with a Manifest backend, enabling data fetching and manipulation.\nSOURCE: https://github.com/mnfst/docs/blob/master/astro.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm i @mnfst/sdk\n```\n\n----------------------------------------\n\nTITLE: Example HTTP Response for Update Item\nDESCRIPTION: This JSON represents the HTTP response after successfully updating an item via the REST API. It contains the details of the updated item.\nSOURCE: https://github.com/mnfst/docs/blob/master/crud.md#_snippet_15\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"id\": 25,\n  \"name\": \"Raichu\",\n  \"type\": \"electric\",\n  \"level\": 8\n}\n```\n\n----------------------------------------\n\nTITLE: PNPM Configuration (JSON)\nDESCRIPTION: This JSON snippet configures PNPM to include specific dependencies when installing. This addresses an incompatibility issue where PNPM blocks postinstall scripts required by Manifest.\nSOURCE: https://github.com/mnfst/docs/blob/master/introduction.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"pnpm\": {\n    \"onlyBuiltDependencies\": [\n      \"@nestjs/core\",\n      \"sharp\",\n      \"sqlite3\"\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Install Manifest SDK\nDESCRIPTION: This command installs the Manifest SDK as a dependency to your Svelte project. It requires npm to be installed and configured in the project.\nSOURCE: https://github.com/mnfst/docs/blob/master/svelte.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm i @mnfst/sdk\n```\n\n----------------------------------------\n\nTITLE: JS SDK Logout JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to log out using the JS SDK. It calls the `manifest.logout()` method to remove the token from future requests.\nSOURCE: https://github.com/mnfst/docs/blob/master/auth.md#_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\n// All future calls will lose the \"Authorization\" header.\nawait manifest.logout()\n```\n\n----------------------------------------\n\nTITLE: Get Single Item via REST API\nDESCRIPTION: This snippet shows an example HTTP request to retrieve a single item from a collection using the Manifest REST API. The request is a GET request to the /api/collections/:slug/:id endpoint.\nSOURCE: https://github.com/mnfst/docs/blob/master/crud.md#_snippet_8\n\nLANGUAGE: HTTP\nCODE:\n```\nGET /api/collections/cats/34\n```\n\n----------------------------------------\n\nTITLE: Delete an Item (Collection) - HTTP Response\nDESCRIPTION: This example shows the JSON response after a successful DELETE request for a cat item.  The response includes the properties of the deleted item.\nSOURCE: https://github.com/mnfst/docs/blob/master/crud.md#_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"Fido\",\n  \"description\": \"A cute black cat\"\n}\n```\n\n----------------------------------------\n\nTITLE: Example HTTP Response for Single Item\nDESCRIPTION: This JSON represents the HTTP response when fetching a single item from the REST API. It contains the details of the requested item.\nSOURCE: https://github.com/mnfst/docs/blob/master/crud.md#_snippet_9\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"name\": \"Mina\",\n  \"description\": \"A really cute cat\"\n}\n```\n\n----------------------------------------\n\nTITLE: Patch a Single Item - HTTP Response\nDESCRIPTION: This example shows the JSON response after a successful PATCH request. The title is updated while the description remains unchanged.\nSOURCE: https://github.com/mnfst/docs/blob/master/crud.md#_snippet_30\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"title\": \"My new title\",\n  \"description\": \"Welcome to my website!\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Manifest SDK\nDESCRIPTION: This command installs the Manifest SDK from npm. It should be run from the root directory of your React app. Requires npm to be installed.\nSOURCE: https://github.com/mnfst/docs/blob/master/react.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nnpm i @mnfst/sdk\n```\n\n----------------------------------------\n\nTITLE: Seed Dummy Data (JavaScript)\nDESCRIPTION: This command generates dummy data for all entities defined in the backend.yml file.  It's useful for development and testing purposes. However, it should not be used in production environments, as it replaces existing data.\nSOURCE: https://github.com/mnfst/docs/blob/master/entities.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nnpm run manifest:seed\n```\n\n----------------------------------------\n\nTITLE: SQLite .env Configuration\nDESCRIPTION: This snippet shows how to configure a Manifest application to use SQLite by setting the DB_CONNECTION to sqlite and specifying the path to the database file using DB_PATH.\nSOURCE: https://github.com/mnfst/docs/blob/master/config.md#_snippet_0\n\nLANGUAGE: env\nCODE:\n```\nDB_CONNECTION=sqlite\n\nDB_PATH=/manifest/backend.db\n```\n\n----------------------------------------\n\nTITLE: Get a Single Item - HTTP Request\nDESCRIPTION: This example shows how to retrieve a single item using a GET request.  It specifies the single's slug in the request URL.\nSOURCE: https://github.com/mnfst/docs/blob/master/crud.md#_snippet_23\n\nLANGUAGE: http\nCODE:\n```\nGET /api/singles/homepage\n```\n\n----------------------------------------\n\nTITLE: Install Manifest JS SDK\nDESCRIPTION: Installs the Manifest JavaScript SDK using npm. This SDK provides a human-friendly interface for interacting with the Manifest backend from a JavaScript client.\nSOURCE: https://github.com/mnfst/docs/blob/master/crud.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @mnfst/sdk\n```\n\n----------------------------------------\n\nTITLE: Boolean Property Definition (YAML)\nDESCRIPTION: Defines a boolean property named isActive, using the boolean type. Used for true or false values.\nSOURCE: https://github.com/mnfst/docs/blob/master/entities.md#_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\n- { name: isActive, type: boolean }\n```\n\n----------------------------------------\n\nTITLE: Configure Entity Parameters (YAML)\nDESCRIPTION: This example demonstrates how to configure parameters such as seedCount and mainProp for an entity. It also shows how to define multiple properties including firstName, lastName, and email.\nSOURCE: https://github.com/mnfst/docs/blob/master/entities.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nentities:\n  Member 👤:\n    seedCount: 200\n    mainProp: lastName\n    properties:\n      - firstName\n      - lastName\n      - email\n```\n\n----------------------------------------\n\nTITLE: Install Manifest CLI (Bash)\nDESCRIPTION: This command installs the Manifest CLI globally, allowing you to scaffold a new Manifest project or add Manifest to an existing project.\nSOURCE: https://github.com/mnfst/docs/blob/master/introduction.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx add-manifest@latest\n```\n\n----------------------------------------\n\nTITLE: Textarea Property Definition (YAML)\nDESCRIPTION: This snippet defines a textarea property named description, using the text type.  This is used for medium sized text inputs.\nSOURCE: https://github.com/mnfst/docs/blob/master/entities.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n- { name: description, type: text }\n```\n\n----------------------------------------\n\nTITLE: Rich Text Property Definition (YAML)\nDESCRIPTION: This defines a rich text property named description, using the richText type. This allows for HTML content to be stored and edited.\nSOURCE: https://github.com/mnfst/docs/blob/master/entities.md#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n- { name: description, type: richText }\n```\n\n----------------------------------------\n\nTITLE: Link Property Definition (YAML)\nDESCRIPTION: Defines a link property named website, using the link type.  This is used for external URLs.\nSOURCE: https://github.com/mnfst/docs/blob/master/entities.md#_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n- { name: website, type: link }\n```\n\n----------------------------------------\n\nTITLE: Money Property Definition (YAML)\nDESCRIPTION: Defines a money property named price, using the money type, and specifies the currency as EUR. It only allows 2 digits after the comma.\nSOURCE: https://github.com/mnfst/docs/blob/master/entities.md#_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\n- { name: price, type: money, options: { currency: 'EUR' } }\n```\n\n----------------------------------------\n\nTITLE: Date Property Definition (YAML)\nDESCRIPTION: Defines a date property named startDate, using the date type. Basic date field.\nSOURCE: https://github.com/mnfst/docs/blob/master/entities.md#_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\n- { name: startDate, type: date }\n```\n\n----------------------------------------\n\nTITLE: Creating an Astro App (npm)\nDESCRIPTION: This command initializes a new Astro project. It uses the `create-astro@latest` package to scaffold the project and sets up the development environment. `my-astro-app` is the suggested project name, and the subsequent command navigates into the created directory. Finally, `npm run dev` starts the local development server.\nSOURCE: https://github.com/mnfst/docs/blob/master/astro.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm create astro@latest\ncd my-astro-app\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Creating a new Angular app\nDESCRIPTION: This snippet shows how to create a new Angular application using the Angular CLI. It also navigates into the created directory and starts the development server.\nSOURCE: https://github.com/mnfst/docs/blob/master/angular.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nng new my-client\ncd my-client\nng serve\n```\n\n----------------------------------------\n\nTITLE: REST API Get Current User HTTP\nDESCRIPTION: This HTTP request example retrieves the current logged-in user using the REST API. It sends a GET request to the `/api/auth/contributors/me` endpoint with the `Authorization` header containing the JWT token.\nSOURCE: https://github.com/mnfst/docs/blob/master/auth.md#_snippet_8\n\nLANGUAGE: HTTP\nCODE:\n```\nGET /api/auth/contributors/me\nContent-Type: application/json\nAuthorization: Bearer your-token-here\n```\n\n----------------------------------------\n\nTITLE: Update a Single Item - HTTP Response\nDESCRIPTION: This example shows the JSON response after a successful PUT request to update the homepage single.  It reflects the updated title and description.\nSOURCE: https://github.com/mnfst/docs/blob/master/crud.md#_snippet_27\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"title\": \"My new title\",\n  \"description\": \"My new description\"\n}\n```"
  }
]