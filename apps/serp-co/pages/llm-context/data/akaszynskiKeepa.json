[
  {
    "owner": "akaszynski",
    "repo": "keepa",
    "content": "TITLE: Installing Keepa Python Library\nDESCRIPTION: Instructions for installing the Keepa Python library using pip or from source code.\nSOURCE: https://github.com/akaszynski/keepa/blob/main/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install keepa\n```\n\nLANGUAGE: bash\nCODE:\n```\ncd keepa\npip install .\n```\n\n----------------------------------------\n\nTITLE: Establishing Connection to Keepa API in Python\nDESCRIPTION: Code for importing the keepa module and establishing a connection to the Keepa API using an access key. This is the first step required before making any queries.\nSOURCE: https://github.com/akaszynski/keepa/blob/main/docs/source/product_query.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport keepa\naccesskey = 'XXXXXXXXXXXXXXXX' # enter real access key here\napi = keepa.Keepa(accesskey)\n```\n\n----------------------------------------\n\nTITLE: Querying Keepa API for Single ASIN\nDESCRIPTION: Example of how to use the Keepa API to query information for a single Amazon ASIN.\nSOURCE: https://github.com/akaszynski/keepa/blob/main/README.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport keepa\naccesskey = 'XXXXXXXXXXXXXXXX' # enter real access key here from https://get.keepa.com/d7vrq\napi = keepa.Keepa(accesskey)\n\n# Single ASIN query\nproducts = api.query('B0088PUEPK')  # returns list of product data\n\n# Plot result (requires matplotlib)\nkeepa.plot_product(products[0])\n```\n\n----------------------------------------\n\nTITLE: Querying Multiple ASINs with Keepa API\nDESCRIPTION: Examples of querying multiple ASINs using lists and numpy arrays with the Keepa API.\nSOURCE: https://github.com/akaszynski/keepa/blob/main/README.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nasins = ['0022841350', '0022841369', '0022841369', '0022841369']\nproducts = api.query(asins)\n```\n\nLANGUAGE: python\nCODE:\n```\nasins = np.asarray(['0022841350', '0022841369', '0022841369', '0022841369'])\nproducts = api.query(asins)\n```\n\n----------------------------------------\n\nTITLE: Querying Single Product Data by ASIN in Python\nDESCRIPTION: Example of querying product data for a single ASIN (Amazon Standard Identification Number). Returns product information including pricing history in a list containing one product.\nSOURCE: https://github.com/akaszynski/keepa/blob/main/docs/source/product_query.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nproducts = api.query('059035342X')\nproduct = products[0]\n```\n\n----------------------------------------\n\nTITLE: Querying Multiple Products in Python\nDESCRIPTION: Example of querying multiple products simultaneously by passing a list or numpy array of ASINs to the query method.\nSOURCE: https://github.com/akaszynski/keepa/blob/main/docs/source/product_query.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nasins = ['0022841350', '0022841369', '0022841369', '0022841369']\nasins = np.asarray(['0022841350', '0022841369', '0022841369', '0022841369'])\nproducts = api.query(asins)\nproduct = products[0]\n```\n\n----------------------------------------\n\nTITLE: Accessing Keepa Product Data\nDESCRIPTION: Examples of how to access various product data returned by the Keepa API.\nSOURCE: https://github.com/akaszynski/keepa/blob/main/README.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# Available keys\nprint(products[0].keys())\n\n# Print ASIN and title\nprint('ASIN is ' + products[0]['asin'])\nprint('Title is ' + products[0]['title'])\n```\n\nLANGUAGE: python\nCODE:\n```\n# Access new price history and associated time data\nnewprice = products[0]['data']['NEW']\nnewpricetime = products[0]['data']['NEW_time']\n\n# Can be plotted with matplotlib using:\nimport matplotlib.pyplot as plt\nplt.step(newpricetime, newprice, where='pre')\n\n# Keys can be listed by\nprint(products[0]['data'].keys())\n```\n\n----------------------------------------\n\nTITLE: Accessing Product Information in Python\nDESCRIPTION: Demonstrates how to access basic product information from the query results, including viewing available keys and retrieving ASIN and title data.\nSOURCE: https://github.com/akaszynski/keepa/blob/main/docs/source/product_query.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# Available keys\nprint(products[0].keys())\n\n# Print ASIN and title\nprint('ASIN is ' + products[0]['asin'])\nprint('Title is ' + products[0]['title'])\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Keepa API Query Example\nDESCRIPTION: Demonstrates how to use the AsyncKeepa class to perform asynchronous queries to the Keepa API.\nSOURCE: https://github.com/akaszynski/keepa/blob/main/README.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nimport keepa\nproduct_parms = {'author': 'jim butcher'}\nasync def main():\n    key = '<REAL_KEEPA_KEY>'\n    api = await keepa.AsyncKeepa().create(key)\n    return await api.product_finder(product_parms)\nasins = asyncio.run(main())\nprint(asins)\n```\n\n----------------------------------------\n\nTITLE: Accessing Price History Data in Python\nDESCRIPTION: Shows how to access the raw price history data and associated timestamps from a product query result, then print the first 10 price entries with their dates.\nSOURCE: https://github.com/akaszynski/keepa/blob/main/docs/source/product_query.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# Access new price history and associated time data\nnewprice = product['data']['NEW']\nnewpricetime = product['data']['NEW_time']\n\n# print the first 10 prices\nprint('%20s   %s' % ('Date', 'Price'))\nfor i in range(10):\n    print('%20s   $%.2f' % (newpricetime[i], newprice[i]))\n```\n\n----------------------------------------\n\nTITLE: Plotting Product Price History in Python\nDESCRIPTION: Example of plotting price history data using matplotlib. The code demonstrates how to create a step plot for a specific data type (TRADE_IN) from the product history.\nSOURCE: https://github.com/akaszynski/keepa/blob/main/docs/source/product_query.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport matplotlib.pyplot as plt\nkey = 'TRADE_IN'\nhistory = product['data'] \nplt.step(history[key], history[key + '_time'], where='pre')\n```\n\n----------------------------------------\n\nTITLE: Using the Built-in Plot Function in Python\nDESCRIPTION: Shows how to use the built-in plot_product function from the keepa module to visualize product history data if matplotlib is installed.\nSOURCE: https://github.com/akaszynski/keepa/blob/main/docs/source/product_query.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nkeepa.plot_product(product)\n```\n\n----------------------------------------\n\nTITLE: Querying Keepa API for Offers\nDESCRIPTION: Example of querying the Keepa API for offer history and processing the results.\nSOURCE: https://github.com/akaszynski/keepa/blob/main/README.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nproducts = api.query(asins, offers=20)\nproduct = products[0]\noffers = product['offers']\n\n# each offer contains the price history of each offer\noffer = offers[0]\ncsv = offer['offerCSV']\n\n# convert these values to numpy arrays\ntimes, prices = keepa.convert_offer_history(csv)\n\n# for a list of active offers, see\nindices = product['liveOffersOrder']\n\n# with this you can loop through active offers:\nindices = product['liveOffersOrder']\noffer_times = []\noffer_prices = []\nfor index in indices:\n    csv = offers[index]['offerCSV']\n    times, prices = keepa.convert_offer_history(csv)\n    offer_times.append(times)\n    offer_prices.append(prices)\n\n# you can aggregate these using np.hstack or plot at the history individually\nimport matplotlib.pyplot as plt\nfor i in range(len(offer_prices)):\n    plt.step(offer_times[i], offer_prices[i])\nplt.show()\n```\n\n----------------------------------------\n\nTITLE: Querying Offer History in Python\nDESCRIPTION: Demonstrates how to retrieve and analyze offer history for a product by using the offers parameter in the query method. The example accesses the first offer and prints its history.\nSOURCE: https://github.com/akaszynski/keepa/blob/main/docs/source/product_query.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nasin = '1454857935'\nproducts = api.query(asin, offers=20)\nproduct = products[0]\noffers = product['offers']\n\n# each offer contains the price history of each offer\noffer = offers[0]\ncsv = offer['offerCSV']\n\n# convert these values to numpy arrays\ntimes, prices = keepa.convert_offer_history(csv)\n\n# print the first 10 prices\nprint('%20s   %s' % ('Date', 'Price'))\nfor i in range(10):\n    print('%20s   $%.2f' % (times[i], prices[i]))\n```\n\n----------------------------------------\n\nTITLE: Processing Buy Box Statistics with Keepa API\nDESCRIPTION: Example of loading buy box statistics and converting them to a pandas DataFrame.\nSOURCE: https://github.com/akaszynski/keepa/blob/main/README.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport keepa\nkey = '<REAL_KEEPA_KEY>'\napi = keepa.Keepa(key)\nresponse = api.query('B0088PUEPK', offers=20)\nproduct = response[0]\nbuybox_info = product['buyBoxUsedHistory']\ndf = keepa.process_used_buybox(buybox_info)\nprint(df)\n```\n\n----------------------------------------\n\nTITLE: Analyzing Active Offers in Python\nDESCRIPTION: Shows how to identify active offers for a product using the liveOffersOrder index, extract their history data, and plot the price history of all active offers using matplotlib.\nSOURCE: https://github.com/akaszynski/keepa/blob/main/docs/source/product_query.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n# for a list of active offers, use\nindices = product['liveOffersOrder']\n\n# with this you can loop through active offers:\nindices = product['liveOffersOrder']\noffer_times = []\noffer_prices = []\nfor index in indices:\n    csv = offers[index]['offerCSV']\n    times, prices = keepa.convert_offer_history(csv)\n    offer_times.append(times)\n    offer_prices.append(prices)\n\n# you can aggregate these using np.hstack or plot at the history individually\nimport matplotlib.pyplot as plt\nfor i in range(len(offer_prices)):\n    plt.step(offer_times[i], offer_prices[i])\n\nplt.xlabel('Date')\nplt.ylabel('Offer Price')\nplt.show()\n```\n\n----------------------------------------\n\nTITLE: Querying Product Data by ISBN/EAN/UPC in Python\nDESCRIPTION: Example of querying product data using an ISBN-13 code instead of an ASIN by setting the product_code_is_asin parameter to False.\nSOURCE: https://github.com/akaszynski/keepa/blob/main/docs/source/product_query.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nproducts = api.query('978-0786222728', product_code_is_asin=False)\n```\n\n----------------------------------------\n\nTITLE: Category Searching and Best Sellers Query in Python\nDESCRIPTION: Demonstrates how to search for product categories using keywords and then query the best-selling products within a specific category using its category ID.\nSOURCE: https://github.com/akaszynski/keepa/blob/main/docs/source/product_query.rst#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n# get category id numbers for chairs\nif test_categories:\n    categories = api.search_for_categories('chairs')\n\n    # print the first 5 catIds\n    catids = list(categories.keys())\n    for catid in catids[:5]:\n        print(catid, categories[catid]['name'])\n\n    # query the best sellers for \"Arm Chairs\"\n    bestsellers = api.best_sellers_query('402283011')\n\nprint('\\nBest Sellers:')\nfor bestseller in bestsellers:\n    print(bestseller)\n```\n\n----------------------------------------\n\nTITLE: Searching for Products by Author using Keepa API in Python\nDESCRIPTION: This code snippet demonstrates how to use the product_finder method of the Keepa API to search for books by a specific author. It initializes the Keepa API with an API key, sets up search parameters, and retrieves the products matching those parameters.\nSOURCE: https://github.com/akaszynski/keepa/blob/main/docs/source/product_query.rst#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nQuery for all of Jim Butcher's books:\n\nimport keepa\napi = keepa.Keepa('ENTER_ACTUAL_KEY_HERE')\nproduct_parms = {'author': 'jim butcher'}\nproducts = api.product_finder(product_parms)\n```\n\n----------------------------------------\n\nTITLE: Structuring Sphinx Documentation Index for Keepa API\nDESCRIPTION: ReStructuredText markup for organizing the documentation structure of the Keepa Python API. Includes table of contents, README inclusion, and standard Sphinx documentation indices.\nSOURCE: https://github.com/akaszynski/keepa/blob/main/docs/source/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :maxdepth: 2\n   :caption: Contents:\n\n   product_query\n   api_methods\n\n\n.. include:: ../../README.rst\n\n\nIndices and tables\n==================\n* :ref:`genindex`\n* :ref:`modindex`\n* :ref:`search`\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Package Dependencies\nDESCRIPTION: Lists required Python packages with their specific versions. This format is typically used in requirements.txt files for Python projects.\nSOURCE: https://github.com/akaszynski/keepa/blob/main/requirements_docs.txt#2025-04-21_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\npydata-sphinx-theme==0.15.4\nsphinx==7.3.7\n```"
  }
]