[
  {
    "owner": "get-convex",
    "repo": "convex-js",
    "content": "TITLE: Defining Generic Database Types in Convex\nDESCRIPTION: TypeScript type definitions for generic database operations in Convex, including database readers, writers, data models, documents, and table information. These types support type-safe database interactions.\nSOURCE: https://github.com/get-convex/convex-js/blob/main/api-extractor-configs/reports/server.api.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport interface GenericDatabaseReader<DataModel extends GenericDataModel> extends DatabaseReader<DataModel> {\n}\n\n// @public\nexport interface GenericDatabaseWriter<DataModel extends GenericDataModel> extends DatabaseWriter<DataModel> {\n}\n\n// @public\nexport type GenericDataModel = Record<string, GenericTableInfo>;\n\n// @public\nexport type GenericDocument = Record<string, Value>;\n\n// @public\nexport type GenericFieldPaths = string;\n\n// @public\nexport type GenericIndexFields = string[];\n\n// @public\nexport type GenericSchema = Record<string, TableDefinition>;\n\n// @public\nexport type GenericSearchIndexConfig = {\n    searchField: string;\n    filterFields: string;\n};\n\n// @public\nexport type GenericTableIndexes = Record<string, GenericIndexFields>;\n\n// @public\nexport type GenericTableInfo = {\n    document: GenericDocument;\n    fieldPaths: GenericFieldPaths;\n    indexes: GenericTableIndexes;\n    searchIndexes: GenericTableSearchIndexes;\n    vectorIndexes: GenericTableVectorIndexes;\n};\n\n// @public\nexport type GenericTableSearchIndexes = Record<string, GenericSearchIndexConfig>;\n```\n\n----------------------------------------\n\nTITLE: Defining Expression Builder Interface in TypeScript\nDESCRIPTION: A TypeScript interface for building database query expressions with various operators like add, and, div, eq, etc. These methods allow for creating complex query conditions and transformations in Convex queries.\nSOURCE: https://github.com/get-convex/convex-js/blob/main/api-extractor-configs/reports/server.api.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Warning: (ae-forgotten-export) The symbol \"NumericValue\" needs to be exported by the entry point index.d.ts\n    add<T extends NumericValue>(l: ExpressionOrValue<T>, r: ExpressionOrValue<T>): Expression<T>;\n    and(...exprs: Array<ExpressionOrValue<boolean>>): Expression<boolean>;\n    div<T extends NumericValue>(l: ExpressionOrValue<T>, r: ExpressionOrValue<T>): Expression<T>;\n    eq<T extends Value | undefined>(l: ExpressionOrValue<T>, r: ExpressionOrValue<T>): Expression<boolean>;\n    field<FieldPath extends FieldPaths<TableInfo>>(fieldPath: FieldPath): Expression<FieldTypeFromFieldPath<DocumentByInfo<TableInfo>, FieldPath>>;\n    gt<T extends Value>(l: ExpressionOrValue<T>, r: ExpressionOrValue<T>): Expression<boolean>;\n    gte<T extends Value>(l: ExpressionOrValue<T>, r: ExpressionOrValue<T>): Expression<boolean>;\n    lt<T extends Value>(l: ExpressionOrValue<T>, r: ExpressionOrValue<T>): Expression<boolean>;\n    lte<T extends Value>(l: ExpressionOrValue<T>, r: ExpressionOrValue<T>): Expression<boolean>;\n    mod<T extends NumericValue>(l: ExpressionOrValue<T>, r: ExpressionOrValue<T>): Expression<T>;\n    mul<T extends NumericValue>(l: ExpressionOrValue<T>, r: ExpressionOrValue<T>): Expression<T>;\n    neg<T extends NumericValue>(x: ExpressionOrValue<T>): Expression<T>;\n    neq<T extends Value | undefined>(l: ExpressionOrValue<T>, r: ExpressionOrValue<T>): Expression<boolean>;\n    not(x: ExpressionOrValue<boolean>): Expression<boolean>;\n    or(...exprs: Array<ExpressionOrValue<boolean>>): Expression<boolean>;\n    sub<T extends NumericValue>(l: ExpressionOrValue<T>, r: ExpressionOrValue<T>): Expression<T>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Query Interface and Pagination in Convex\nDESCRIPTION: TypeScript interfaces for query operations and pagination in Convex databases. These types enable filtering, ordering, and pagination of query results with type safety.\nSOURCE: https://github.com/get-convex/convex-js/blob/main/api-extractor-configs/reports/server.api.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport interface OrderedQuery<TableInfo extends GenericTableInfo> extends AsyncIterable<DocumentByInfo<TableInfo>> {\n    collect(): Promise<Array<DocumentByInfo<TableInfo>>>;\n    filter(predicate: (q: FilterBuilder<TableInfo>) => ExpressionOrValue<boolean>): this;\n    first(): Promise<DocumentByInfo<TableInfo> | null>;\n    paginate(paginationOpts: PaginationOptions): Promise<PaginationResult<DocumentByInfo<TableInfo>>>;\n    take(n: number): Promise<Array<DocumentByInfo<TableInfo>>>;\n    unique(): Promise<DocumentByInfo<TableInfo> | null>;\n}\n\n// @public\nexport interface PaginationOptions {\n    cursor: Cursor | null;\n    numItems: number;\n}\n\n// @public\nexport const paginationOptsValidator: ObjectValidator<    {\nnumItems: Validator<number, false, never>;\ncursor: Validator<string | null, false, never>;\nid: Validator<number | undefined, true, never>;\n}>;\n\n// @public\nexport interface PaginationResult<T> {\n    continueCursor: Cursor;\n    isDone: boolean;\n    page: T[];\n}\n\n// @public\nexport interface Query<TableInfo extends GenericTableInfo> extends OrderedQuery<TableInfo> {\n    order(order: \"asc\" | \"desc\"): OrderedQuery<TableInfo>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Function Builders in Convex\nDESCRIPTION: Type definitions for function builders in Convex that create queries, mutations, and actions. These builders enable the creation of type-safe server functions with appropriate contexts and validation.\nSOURCE: https://github.com/get-convex/convex-js/blob/main/api-extractor-configs/reports/server.api.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport function getFunctionName(functionReference: AnyFunctionReference): string;\n\n// @public\nexport function makeFunctionReference<type extends FunctionType, args extends DefaultFunctionArgs = any, ret = any>(name: string): FunctionReference<type, \"public\", args, ret>;\n\n// @public\nexport type MutationBuilder<DataModel extends GenericDataModel, Visibility extends FunctionVisibility> = {\n    <Output, ArgsValidator extends PropertyValidators>(func: ValidatedFunction<GenericMutationCtx<DataModel>, ArgsValidator, Output>): RegisteredMutation<Visibility, ObjectType<ArgsValidator>, Output>;\n    <Output, Args extends ArgsArray = OneArgArray>(func: UnvalidatedFunction<GenericMutationCtx<DataModel>, Args, Output>): RegisteredMutation<Visibility, ArgsArrayToObject<Args>, Output>;\n};\n\n// @public @deprecated\nexport interface MutationCtx<DataModel extends GenericDataModel> extends GenericMutationCtx<DataModel> {\n}\n\n// @public\nexport const mutationGeneric: MutationBuilder<any, \"public\">;\n\n// @public\nexport type QueryBuilder<DataModel extends GenericDataModel, Visibility extends FunctionVisibility> = {\n    <Output, ArgsValidator extends PropertyValidators>(func: ValidatedFunction<GenericQueryCtx<DataModel>, ArgsValidator, Output>): RegisteredQuery<Visibility, ObjectType<ArgsValidator>, Output>;\n};\n\n// @public\nexport const internalActionGeneric: ActionBuilder<any, \"internal\">;\n\n// @public\nexport const internalMutationGeneric: MutationBuilder<any, \"internal\">;\n\n// @public\nexport const internalQueryGeneric: QueryBuilder<any, \"internal\">;\n```\n\n----------------------------------------\n\nTITLE: Defining Schema and Table Functions\nDESCRIPTION: Functions for defining database schemas and tables with validation options. Includes type safety and schema validation capabilities.\nSOURCE: https://github.com/get-convex/convex-js/blob/main/api-extractor-configs/reports/server.api.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport function defineSchema<Schema extends GenericSchema, StrictTableNameTypes extends boolean = true>(schema: Schema, options?: DefineSchemaOptions<StrictTableNameTypes>): SchemaDefinition<Schema, StrictTableNameTypes>;\n\nexport function defineTable<DocumentSchema extends Validator<Record<string, any>, false, any>>(documentSchema: DocumentSchema): TableDefinition<ExtractDocument<DocumentSchema>, ExtractFieldPaths<DocumentSchema>>;\n```\n\n----------------------------------------\n\nTITLE: Defining Index Types and Operations in Convex\nDESCRIPTION: TypeScript types for working with database indexes in Convex, including index ranges, builders, and named indexes. These types enable type-safe index-based queries and lookups.\nSOURCE: https://github.com/get-convex/convex-js/blob/main/api-extractor-configs/reports/server.api.md#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport type Indexes<TableInfo extends GenericTableInfo> = TableInfo[\"indexes\"];\n\n// @public\nexport type IndexNames<TableInfo extends GenericTableInfo> = keyof Indexes<TableInfo>;\n\n// @public\nexport abstract class IndexRange {\n}\n\n// Warning: (ae-forgotten-export) The symbol \"LowerBoundIndexRangeBuilder\" needs to be exported by the entry point index.d.ts\n//\n// @public\nexport interface IndexRangeBuilder<Document extends GenericDocument, IndexFields extends GenericIndexFields, FieldNum extends number = 0> extends LowerBoundIndexRangeBuilder<Document, IndexFields[FieldNum]> {\n    // Warning: (ae-forgotten-export) The symbol \"NextIndexRangeBuilder\" needs to be exported by the entry point index.d.ts\n    eq(fieldName: IndexFields[FieldNum], value: FieldTypeFromFieldPath<Document, IndexFields[FieldNum]>): NextIndexRangeBuilder<Document, IndexFields, FieldNum>;\n}\n\n// @public\nexport type NamedIndex<TableInfo extends GenericTableInfo, IndexName extends IndexNames<TableInfo>> = Indexes<TableInfo>[IndexName];\n\n// @public\nexport type NamedSearchIndex<TableInfo extends GenericTableInfo, IndexName extends SearchIndexNames<TableInfo>> = SearchIndexes<TableInfo>[IndexName];\n\n// @public\nexport type NamedTableInfo<DataModel extends GenericDataModel, TableName extends keyof DataModel> = DataModel[TableName];\n```\n\n----------------------------------------\n\nTITLE: Defining Context Interfaces for Convex Functions\nDESCRIPTION: TypeScript interfaces for the context objects available to different Convex function types (actions, queries, mutations). These contexts provide access to authentication, database operations, and other services.\nSOURCE: https://github.com/get-convex/convex-js/blob/main/api-extractor-configs/reports/server.api.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport interface GenericActionCtx<DataModel extends GenericDataModel> {\n    auth: Auth;\n    runAction<Action extends FunctionReference<\"action\", \"public\" | \"internal\">>(action: Action, ...args: OptionalRestArgs<Action>): Promise<FunctionReturnType<Action>>;\n    runMutation<Mutation extends FunctionReference<\"mutation\", \"public\" | \"internal\">>(mutation: Mutation, ...args: OptionalRestArgs<Mutation>): Promise<FunctionReturnType<Mutation>>;\n    runQuery<Query extends FunctionReference<\"query\", \"public\" | \"internal\">>(query: Query, ...args: OptionalRestArgs<Query>): Promise<FunctionReturnType<Query>>;\n    scheduler: Scheduler;\n    storage: StorageActionWriter;\n}\n\n// @public\nexport interface GenericMutationCtx<DataModel extends GenericDataModel> {\n    auth: Auth;\n    db: GenericDatabaseWriter<DataModel>;\n    scheduler: Scheduler;\n    storage: StorageWriter;\n}\n\n// @public\nexport interface GenericQueryCtx<DataModel extends GenericDataModel> {\n    auth: Auth;\n    db: GenericDatabaseReader<DataModel>;\n    storage: StorageReader;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ActionBuilder Type in TypeScript\nDESCRIPTION: Type definition for building Convex actions with support for validated and unvalidated functions. Handles both generic data models and function visibility.\nSOURCE: https://github.com/get-convex/convex-js/blob/main/api-extractor-configs/reports/server.api.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type ActionBuilder<DataModel extends GenericDataModel, Visibility extends FunctionVisibility> = {\n    <Output, ArgsValidator extends PropertyValidators>(func: ValidatedFunction<GenericActionCtx<DataModel>, ArgsValidator, Output>): RegisteredAction<Visibility, ObjectType<ArgsValidator>, Output>;\n    <Output, Args extends ArgsArray = OneArgArray>(func: UnvalidatedFunction<GenericActionCtx<DataModel>, Args, Output>): RegisteredAction<Visibility, ArgsArrayToObject<Args>, Output>;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Database Interface Types\nDESCRIPTION: Interface definitions for database operations including CRUD functionality and query building capabilities. Contains deprecated DatabaseReader and DatabaseWriter interfaces.\nSOURCE: https://github.com/get-convex/convex-js/blob/main/api-extractor-configs/reports/server.api.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface DatabaseReader<DataModel extends GenericDataModel> {\n    get<TableName extends TableNamesInDataModel<DataModel>>(id: Id<TableName>): Promise<DocumentByName<DataModel, TableName> | null>;\n    normalizeId<TableName extends TableNamesInDataModel<DataModel>>(tableName: TableName, id: string): Id<TableName> | null;\n    query<TableName extends TableNamesInDataModel<DataModel>>(tableName: TableName): QueryInitializer<NamedTableInfo<DataModel, TableName>>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Function Reference Types in Convex\nDESCRIPTION: TypeScript type definitions for function references in the Convex framework. These types establish the structure for referencing functions with their type, visibility, arguments, and return types.\nSOURCE: https://github.com/get-convex/convex-js/blob/main/api-extractor-configs/reports/server.api.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport type FunctionArgs<FuncRef extends AnyFunctionReference> = FuncRef[\"_args\"];\n\n// @public\nexport type FunctionReference<Type extends FunctionType, Visibility extends FunctionVisibility = \"public\", Args extends DefaultFunctionArgs = any, ReturnType = any> = {\n    _type: Type;\n    _visibility: Visibility;\n    _args: Args;\n    _returnType: ReturnType;\n};\n\n// @public\nexport type FunctionReturnType<FuncRef extends AnyFunctionReference> = FuncRef[\"_returnType\"];\n\n// @public\nexport type FunctionType = \"query\" | \"mutation\" | \"action\";\n\n// @public\nexport type FunctionVisibility = \"public\" | \"internal\";\n```\n\n----------------------------------------\n\nTITLE: Defining Utility Types for Convex Functions\nDESCRIPTION: Utility types for working with function arguments and API definitions in Convex. These types help with building type-safe interfaces to Convex backend functions.\nSOURCE: https://github.com/get-convex/convex-js/blob/main/api-extractor-configs/reports/server.api.md#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport type OptionalRestArgs<FuncRef extends AnyFunctionReference> = FuncRef[\"_args\"] extends EmptyObject ? [args?: EmptyObject] : [args: FuncRef[\"_args\"]];\n\n// @public\nexport type PartialApi<API> = {\n    [mod in keyof API]?: API[mod] extends FunctionReference<any, any, any, any> ? API[mod] : PartialApi<API[mod]>;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining QueryBuilder Interface in TypeScript\nDESCRIPTION: Defines the QueryBuilder interface for constructing Convex queries with various visibility options and argument types.\nSOURCE: https://github.com/get-convex/convex-js/blob/main/api-extractor-configs/reports/server.api.md#2025-04-23_snippet_12\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface QueryBuilder<DataModel extends GenericDataModel, Visibility extends FunctionVisibility> {\n    <Output, Args extends ArgsArray = OneArgArray>(func: UnvalidatedFunction<GenericQueryCtx<DataModel>, Args, Output>): RegisteredQuery<Visibility, ArgsArrayToObject<Args>, Output>;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining QueryInitializer Interface in TypeScript\nDESCRIPTION: Defines the QueryInitializer interface for initializing queries with various options like full table scan, index-based queries, and search index queries.\nSOURCE: https://github.com/get-convex/convex-js/blob/main/api-extractor-configs/reports/server.api.md#2025-04-23_snippet_15\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface QueryInitializer<TableInfo extends GenericTableInfo> extends Query<TableInfo> {\n    fullTableScan(): Query<TableInfo>;\n    withIndex<IndexName extends IndexNames<TableInfo>>(indexName: IndexName, indexRange?: (q: IndexRangeBuilder<DocumentByInfo<TableInfo>, NamedIndex<TableInfo, IndexName>>) => IndexRange): Query<TableInfo>;\n    withSearchIndex<IndexName extends SearchIndexNames<TableInfo>>(indexName: IndexName, searchFilter: (q: SearchFilterBuilder<DocumentByInfo<TableInfo>, NamedSearchIndex<TableInfo, IndexName>>) => SearchFilter): OrderedQuery<TableInfo>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining HTTP Handlers in Convex\nDESCRIPTION: Type definitions and utility functions for HTTP handling in Convex, including the HttpRouter class for routing HTTP requests to appropriate actions based on paths and methods.\nSOURCE: https://github.com/get-convex/convex-js/blob/main/api-extractor-configs/reports/server.api.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport type HttpActionBuilder = (func: (ctx: GenericActionCtx<any>, request: Request) => Promise<Response>) => PublicHttpAction;\n\n// @public\nexport const httpActionGeneric: (func: (ctx: ActionCtx<GenericDataModel>, request: Request) => Promise<Response>) => PublicHttpAction;\n\n// @public\nexport class HttpRouter {\n    // (undocumented)\n    exactRoutes: Map<string, Map<RoutableMethod, PublicHttpAction>>;\n    getRoutes: () => (readonly [string, \"GET\" | \"POST\" | \"PUT\" | \"DELETE\" | \"OPTIONS\" | \"PATCH\", (...args: any[]) => any])[];\n    // (undocumented)\n    isRouter: boolean;\n    lookup: (path: string, method: RoutableMethod | \"HEAD\") => Readonly<[PublicHttpAction, RoutableMethod, string]> | null;\n    // (undocumented)\n    prefixRoutes: Map<RoutableMethod, Map<string, PublicHttpAction>>;\n    // Warning: (ae-forgotten-export) The symbol \"RouteSpec\" needs to be exported by the entry point index.d.ts\n    route: (spec: RouteSpec) => void;\n    runRequest: (argsStr: string) => Promise<string>;\n}\n\n// @public\nexport const httpRouter: () => HttpRouter;\n\n// @public\nexport type PublicHttpAction = {\n    (ctx: GenericActionCtx<any>, request: Request): Response;\n    isHttp: true;\n    isRegistered?: true;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining SearchIndexConfig Interface in TypeScript\nDESCRIPTION: Defines the SearchIndexConfig interface for configuring search indexes in Convex with search and filter fields.\nSOURCE: https://github.com/get-convex/convex-js/blob/main/api-extractor-configs/reports/server.api.md#2025-04-23_snippet_27\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface SearchIndexConfig<SearchField extends string, FilterFields extends string> {\n    filterFields?: FilterFields[];\n    searchField: SearchField;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TableDefinition Class in TypeScript\nDESCRIPTION: Defines the TableDefinition class for creating Convex table definitions with various index types and configurations.\nSOURCE: https://github.com/get-convex/convex-js/blob/main/api-extractor-configs/reports/server.api.md#2025-04-23_snippet_29\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class TableDefinition<Document extends GenericDocument = GenericDocument, FieldPaths extends string = string, Indexes extends GenericTableIndexes = {}, SearchIndexes extends GenericTableSearchIndexes = {}, VectorIndexes extends GenericTableVectorIndexes = {}> {\n    index<IndexName extends string, FirstFieldPath extends FieldPaths, RestFieldPaths extends FieldPaths[]>(name: IndexName, fields: [FirstFieldPath, ...RestFieldPaths]): TableDefinition<Document, FieldPaths, Expand<Indexes & Record<IndexName, [\n    FirstFieldPath,\n    ...RestFieldPaths,\n    IndexTiebreakerField\n    ]>>, SearchIndexes, VectorIndexes>;\n    searchIndex<IndexName extends string, SearchField extends FieldPaths, FilterFields extends FieldPaths = never>(name: IndexName, indexConfig: Expand<SearchIndexConfig<SearchField, FilterFields>>): TableDefinition<Document, FieldPaths, Indexes, Expand<SearchIndexes & Record<IndexName, {\n        searchField: SearchField;\n        filterFields: FilterFields;\n    }>>, VectorIndexes>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SchemaDefinition Class in TypeScript\nDESCRIPTION: Defines the SchemaDefinition class for creating Convex schema definitions with tables and strictness options.\nSOURCE: https://github.com/get-convex/convex-js/blob/main/api-extractor-configs/reports/server.api.md#2025-04-23_snippet_23\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class SchemaDefinition<Schema extends GenericSchema, StrictTableTypes extends boolean> {\n    // (undocumented)\n    strictTableNameTypes: StrictTableTypes;\n    // (undocumented)\n    tables: Schema;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Storage-related Types and Interfaces in TypeScript\nDESCRIPTION: Defines various types and interfaces for Convex storage operations, including StorageId, StorageReader, StorageWriter, and StorageActionWriter.\nSOURCE: https://github.com/get-convex/convex-js/blob/main/api-extractor-configs/reports/server.api.md#2025-04-23_snippet_28\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type StorageId = string;\n\nexport interface StorageReader {\n    getMetadata(storageId: StorageId): Promise<FileMetadata | null>;\n    getUrl(storageId: StorageId): Promise<string | null>;\n}\n\nexport interface StorageWriter extends StorageReader {\n    delete(storageId: StorageId): Promise<void>;\n    generateUploadUrl(): Promise<string>;\n}\n\nexport interface StorageActionWriter extends StorageWriter {\n    get(storageId: StorageId): Promise<Blob | null>;\n    store(blob: Blob, options?: {\n        sha256?: string;\n    }): Promise<StorageId>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining RegisteredAction Type in TypeScript\nDESCRIPTION: Defines the RegisteredAction type for Convex action functions with specific visibility, arguments, and output types.\nSOURCE: https://github.com/get-convex/convex-js/blob/main/api-extractor-configs/reports/server.api.md#2025-04-23_snippet_16\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type RegisteredAction<Visibility extends FunctionVisibility, Args extends DefaultFunctionArgs, Output> = {\n    (ctx: GenericActionCtx<any>, args: Args): Output;\n    isConvexFunction: true;\n    isAction: true;\n    isRegistered?: true;\n} & VisibilityProperties<Visibility>;\n```\n\n----------------------------------------\n\nTITLE: Defining RegisteredMutation Type in TypeScript\nDESCRIPTION: Defines the RegisteredMutation type for Convex mutation functions with specific visibility, arguments, and output types.\nSOURCE: https://github.com/get-convex/convex-js/blob/main/api-extractor-configs/reports/server.api.md#2025-04-23_snippet_17\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type RegisteredMutation<Visibility extends FunctionVisibility, Args extends DefaultFunctionArgs, Output> = {\n    (ctx: GenericMutationCtx<any>, args: Args): Output;\n    isConvexFunction: true;\n    isMutation: true;\n    isRegistered?: true;\n} & VisibilityProperties<Visibility>;\n```\n\n----------------------------------------\n\nTITLE: Defining RegisteredQuery Type in TypeScript\nDESCRIPTION: Defines the RegisteredQuery type for Convex query functions with specific visibility, arguments, and output types.\nSOURCE: https://github.com/get-convex/convex-js/blob/main/api-extractor-configs/reports/server.api.md#2025-04-23_snippet_18\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type RegisteredQuery<Visibility extends FunctionVisibility, Args extends DefaultFunctionArgs, Output> = {\n    (ctx: GenericQueryCtx<any>, args: Args): Output;\n    isConvexFunction: true;\n    isQuery: true;\n    isRegistered?: true;\n} & VisibilityProperties<Visibility>;\n```\n\n----------------------------------------\n\nTITLE: Defining SearchFilterBuilder Interface in TypeScript\nDESCRIPTION: Defines the SearchFilterBuilder interface for constructing search filters in Convex queries.\nSOURCE: https://github.com/get-convex/convex-js/blob/main/api-extractor-configs/reports/server.api.md#2025-04-23_snippet_25\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface SearchFilterBuilder<Document extends GenericDocument, SearchIndexConfig extends GenericSearchIndexConfig> {\n    search(fieldName: SearchIndexConfig[\"searchField\"], query: string): SearchFilterFinalizer<Document, SearchIndexConfig>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SearchFilterFinalizer Interface in TypeScript\nDESCRIPTION: Defines the SearchFilterFinalizer interface for finalizing search filters with additional equality conditions.\nSOURCE: https://github.com/get-convex/convex-js/blob/main/api-extractor-configs/reports/server.api.md#2025-04-23_snippet_26\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface SearchFilterFinalizer<Document extends GenericDocument, SearchIndexConfig extends GenericSearchIndexConfig> extends SearchFilter {\n    eq<FieldName extends SearchIndexConfig[\"filterFields\"]>(fieldName: FieldName, value: FieldTypeFromFieldPath<Document, FieldName>): SearchFilterFinalizer<Document, SearchIndexConfig>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SearchFilter Abstract Class in TypeScript\nDESCRIPTION: Defines the abstract SearchFilter class for Convex search index filters.\nSOURCE: https://github.com/get-convex/convex-js/blob/main/api-extractor-configs/reports/server.api.md#2025-04-23_snippet_24\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport abstract class SearchFilter {\n}\n```\n\n----------------------------------------\n\nTITLE: Defining UserIdentity Interface in TypeScript\nDESCRIPTION: Defines the UserIdentity interface representing user identity information in Convex, including various optional fields and required identifiers.\nSOURCE: https://github.com/get-convex/convex-js/blob/main/api-extractor-configs/reports/server.api.md#2025-04-23_snippet_30\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface UserIdentity {\n    readonly address?: string;\n    readonly birthday?: string;\n    readonly email?: string;\n    readonly emailVerified?: boolean;\n    readonly familyName?: string;\n    readonly gender?: string;\n    readonly givenName?: string;\n    readonly issuer: string;\n    readonly language?: string;\n    readonly name?: string;\n    readonly nickname?: string;\n    readonly phoneNumber?: string;\n    readonly phoneNumberVerified?: boolean;\n    readonly pictureUrl?: string;\n    readonly preferredUsername?: string;\n    readonly profileUrl?: string;\n    readonly subject: string;\n    readonly timezone?: string;\n    readonly tokenIdentifier: string;\n    readonly updatedAt?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Scheduler Interface in TypeScript\nDESCRIPTION: Defines the Scheduler interface for scheduling Convex functions to run after a delay or at a specific time.\nSOURCE: https://github.com/get-convex/convex-js/blob/main/api-extractor-configs/reports/server.api.md#2025-04-23_snippet_22\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface Scheduler {\n    runAfter<FuncRef extends SchedulableFunctionReference>(delayMs: number, functionReference: FuncRef, ...args: OptionalRestArgs<FuncRef>): Promise<void>;\n    runAt<FuncRef extends SchedulableFunctionReference>(timestamp: number | Date, functionReference: FuncRef, ...args: OptionalRestArgs<FuncRef>): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SchedulableFunctionReference Type in TypeScript\nDESCRIPTION: Defines the SchedulableFunctionReference type for functions that can be scheduled in Convex.\nSOURCE: https://github.com/get-convex/convex-js/blob/main/api-extractor-configs/reports/server.api.md#2025-04-23_snippet_21\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type SchedulableFunctionReference = FunctionReference<\"mutation\" | \"action\", \"public\" | \"internal\">;\n```\n\n----------------------------------------\n\nTITLE: Using Object Validator Fields in TypeScript\nDESCRIPTION: Demonstrates how to access and reuse validator fields from an existing object validator in Convex.js. This feature allows extending existing validators with additional properties.\nSOURCE: https://github.com/get-convex/convex-js/blob/main/CHANGELOG.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst message = v.object({ user: v.string(), body: v.string() });\nconst imageMessage = v.object({ ...message.fields, })\n```\n\n----------------------------------------\n\nTITLE: Exporting queryGeneric Constant in TypeScript\nDESCRIPTION: Exports the queryGeneric constant of type QueryBuilder with public visibility for generic queries.\nSOURCE: https://github.com/get-convex/convex-js/blob/main/api-extractor-configs/reports/server.api.md#2025-04-23_snippet_14\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const queryGeneric: QueryBuilder<any, \"public\">;\n```\n\n----------------------------------------\n\nTITLE: Declaring HTTP Methods Constant in TypeScript\nDESCRIPTION: Declares a constant array of routable HTTP methods for Convex HTTP endpoints.\nSOURCE: https://github.com/get-convex/convex-js/blob/main/api-extractor-configs/reports/server.api.md#2025-04-23_snippet_19\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const ROUTABLE_HTTP_METHODS: readonly [\"GET\", \"POST\", \"PUT\", \"DELETE\", \"OPTIONS\", \"PATCH\"];\n```\n\n----------------------------------------\n\nTITLE: Defining RoutableMethod Type in TypeScript\nDESCRIPTION: Defines the RoutableMethod type as a union of allowed HTTP methods for Convex HTTP endpoints.\nSOURCE: https://github.com/get-convex/convex-js/blob/main/api-extractor-configs/reports/server.api.md#2025-04-23_snippet_20\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type RoutableMethod = (typeof ROUTABLE_HTTP_METHODS)[number];\n```\n\n----------------------------------------\n\nTITLE: JSON Argument Example for Convex Run Command\nDESCRIPTION: Demonstrates the improved argument parsing format for the npx convex run command using JSON5 syntax\nSOURCE: https://github.com/get-convex/convex-js/blob/main/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{ name: \"sshader\" }\n```\n\n----------------------------------------\n\nTITLE: Running Client Tests for convex-js\nDESCRIPTION: This command runs the client tests for the convex-js project. However, it's noted that there are additional tests (integration, end-to-end, proptests) not located in this repository.\nSOURCE: https://github.com/get-convex/convex-js/blob/main/CONTRIBUTING.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Declaring QueryCtx Interface in TypeScript\nDESCRIPTION: Declares the deprecated QueryCtx interface that extends GenericQueryCtx for a specific data model.\nSOURCE: https://github.com/get-convex/convex-js/blob/main/api-extractor-configs/reports/server.api.md#2025-04-23_snippet_13\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface QueryCtx<DataModel extends GenericDataModel> extends GenericQueryCtx<DataModel> {\n}\n```\n\n----------------------------------------\n\nTITLE: Deprecated Direct Function Call Example in TypeScript\nDESCRIPTION: Example showing the deprecated pattern of calling Convex functions directly, which causes issues with validation, isolation, and atomicity. This pattern now triggers console warnings.\nSOURCE: https://github.com/get-convex/convex-js/blob/main/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const foo = mutation(...);\n\nexport const bar = mutation({\n  args: v.any(),\n  returns: v.any(),\n  handler: (ctx, args) => {\n    const result = await foo();\n  })\n})\n```"
  }
]