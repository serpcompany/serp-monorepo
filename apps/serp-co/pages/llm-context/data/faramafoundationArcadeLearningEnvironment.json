[
  {
    "owner": "farama-foundation",
    "repo": "arcade-learning-environment",
    "content": "TITLE: Creating ALE Environment with Continuous Action Space\nDESCRIPTION: Shows how to initialize an Atari environment with continuous action space support, as proposed in the CALE paper. This changes the action space from discrete to continuous Box type with polar coordinates.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/gymnasium-interface.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> import gymnasium as gym\n>>> import numpy as np\n>>> import ale_py\n\n>>> gym.register_envs(ale_py)\n>>> env = gym.make(\"ALE/Breakout-v5\", continuous=True)\n>>> env.action_space  # radius, theta and fire where radius and theta for polar coordinates\nBox([0.0, -np.pi, 0.0], [1.0, np.pi, 1.0], np.float32)\n>>> obs, info = env.reset()\n>>> obs, reward, terminated, truncated, info = env.step(np.array([0.9, 0.4, 0.7], dtype=np.float32))\n```\n\n----------------------------------------\n\nTITLE: Basic ALE Python Interface Usage\nDESCRIPTION: Example showing how to import the ALE interface in Python, load a ROM, reset the game, perform an action, and get screen observations.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom ale_py import ALEInterface, roms\n\nale = ALEInterface()\nale.loadROM(roms.get_rom_path(\"breakout\"))\nale.reset_game()\n\nreward = ale.act(0)  # noop\nscreen_obs = ale.getScreenRGB()\n```\n\n----------------------------------------\n\nTITLE: Initializing and Running Atari Environment with Gymnasium in Python\nDESCRIPTION: This snippet demonstrates how to set up and run an Atari environment using Gymnasium and ALE. It includes registering environments, initializing a specific game (Breakout), and running a basic loop for interacting with the environment using random actions.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/index.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport gymnasium as gym\nimport ale_py\n\ngym.register_envs(ale_py)\n\n# Initialise the environment\nenv = gym.make(\"ALE/Breakout-v5\", render_mode=\"human\")\n\n# Reset the environment to generate the first observation\nobservation, info = env.reset(seed=42)\nfor _ in range(1000):\n    # this is where you would insert your policy\n    action = env.action_space.sample()\n\n    # step (transition) through the environment with the action\n    # receiving the next observation, reward and if the episode has terminated or truncated\n    observation, reward, terminated, truncated, info = env.step(action)\n\n    # If the episode has ended then we can reset to start a new episode\n    if terminated or truncated:\n        observation, info = env.reset()\n\nenv.close()\n```\n\n----------------------------------------\n\nTITLE: Using ALE with Gymnasium Interface\nDESCRIPTION: Example showing how to use ALE with the Gymnasium interface, including environment creation, observation handling, and action execution in a game loop.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/README.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport gymnasium as gym\nimport ale_py\n\ngym.register_envs(ale_py)  # unnecessary but helpful for IDEs\n\nenv = gym.make('ALE/Breakout-v5', render_mode=\"human\")  # remove render_mode in training\nobs, info = env.reset()\nepisode_over = False\nwhile not episode_over:\n    action = policy(obs)  # to implement - use `env.action_space.sample()` for a random policy\n    obs, reward, terminated, truncated, info = env.step(action)\n\n    episode_over = terminated or truncated\nenv.close()\n```\n\n----------------------------------------\n\nTITLE: Complete Random Agent Implementation\nDESCRIPTION: A full example of a simple random agent that plays one episode of a game, including initialization, action selection, and reward tracking.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/cpp-interface.md#2025-04-23_snippet_7\n\nLANGUAGE: cpp\nCODE:\n```\n#include <iostream>\n#include <ale_interface.hpp>\n\nint main(int argc, char** argv) {\n    if (argc < 2) {\n        std::cerr << \"Usage: \" << argv[0] << \" rom_file\" << std::endl;\n        return 1;\n    }\n\n    ale::ALEInterface ale;\n    ale.setInt(\"random_seed\", 123);\n    ale.loadROM(argv[1]);\n\n    ale::ActionVect legal_actions = ale.getLegalActionSet();\n\n    float totalReward = 0.0;\n    while (!ale.game_over()) {\n        Action a = legal_actions[std::rand() % legal_actions.size()];\n        float reward = ale.act(a);\n        totalReward += reward;\n\n        std::cout << \"The episode ended with score: \" << totalReward\n            << std::endl;\n    }\n\n    return 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Space Invaders Environment with Random Actions\nDESCRIPTION: Example code showing how to initialize and run a Space Invaders environment with agents taking random actions. The code demonstrates the environment lifecycle including reset, agent iteration, action selection, and step execution.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/multi-agent-environments.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom pettingzoo.atari import space_invaders_v2\nenv = space_invaders_v2.env(render_mode=\"human\")\n\nenv.reset()\nfor agent in env.agent_iter():\n    observation, reward, termination, truncation, info = env.last()\n    if termination or truncation:\n        action = None\n    else:\n        env.action_space(agent).sample()  # this is where you would insert your policy\n    env.step(action)\nenv.close()\n```\n\n----------------------------------------\n\nTITLE: Common Parameters for Atari Environments\nDESCRIPTION: Example showing the common initialization parameters available for all Atari environments, including observation type selection, action space configuration, maximum cycles, and ROM installation path.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/multi-agent-environments.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n<atari_game>.env(obs_type='rgb_image', full_action_space=True, max_cycles=100000, auto_rom_install_path=None)\n```\n\n----------------------------------------\n\nTITLE: Implementing a Random Agent using Arcade Learning Environment in Python\nDESCRIPTION: This code snippet demonstrates how to create a random agent using the Arcade Learning Environment Python interface. It initializes the ALE, loads a ROM, retrieves legal actions, and runs an episode where the agent selects random actions until the game is over. The total reward is tracked and printed at the end of the episode.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/python-interface.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport sys\nfrom random import randrange\nfrom ale_py import ALEInterface\n\ndef main(rom_file):\n    ale = ALEInterface()\n    ale.setInt('random_seed', 123)\n    ale.loadROM(rom_file)\n\n    # Get the list of legal actions\n    legal_actions = ale.getLegalActionSet()\n    num_actions = len(legal_actions)\n\n    total_reward = 0\n    while not ale.game_over():\n      a = legal_actions[randrange(num_actions)]\n      reward = ale.act(a)\n      total_reward += reward\n\n    print(f'Episode ended with score: {total_reward}')\n\nif __name__ == '__main__':\n    if len(sys.argv) < 2:\n      print(f\"Usage: {sys.argv[0]} rom_file\")\n      sys.exit()\n\n    rom_file = sys.argv[1]\n    main(rom_file)\n```\n\n----------------------------------------\n\nTITLE: Recording Videos with Gymnasium API in ALE\nDESCRIPTION: This code shows how to record video of ALE gameplay using Gymnasium's RecordVideo wrapper. It runs a random agent on Pong for 10 episodes, recording every other episode as mp4 videos saved in the specified folder.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/visualization.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport gymnasium\nimport ale_py\n\ngymnasium.register_envs(ale_py)\n\nenv = gymnasium.make(\"ALE/Pong-v5\", render_mode=\"rgb_array\")\nenv = gymnasium.wrappers.RecordVideo(\n    env,\n    episode_trigger=lambda num: num % 2 == 0,\n    video_folder=\"saved-video-folder\",\n    name_prefix=\"video-\",\n)\nfor episode in range(10):\n    obs, info = env.reset()\n    episode_over = False\n\n    while not episode_over:\n        action = env.action_space.sample()\n        obs, reward, terminated, truncated, info = env.step(action)\n\n        episode_over = terminated or truncated\n\nenv.close()\n```\n\n----------------------------------------\n\nTITLE: Using ALE with Gymnasium API\nDESCRIPTION: Example showing how to use ALE with the Gymnasium API, including environment creation, reset and step operations\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/getting-started.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport gymnasium as gym\nimport ale_py\n\ngym.register_envs(ale_py)\n\nenv = gym.make('ALE/Breakout-v5')\nobs, info = env.reset()\nobs, reward, terminated, truncated, info = env.step(env.action_space.sample())\nenv.close()\n```\n\n----------------------------------------\n\nTITLE: Human Visualization with Gymnasium API in ALE\nDESCRIPTION: This code demonstrates how to use the Gymnasium API to create a human-viewable window for ALE environments. It runs a random agent on the Pong environment for 100 steps with the render_mode set to 'human', which displays the game at 60 frames per second.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/visualization.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport gymnasium\nimport ale_py\n\ngymnasium.register_envs(ale_py)\n\nenv = gymnasium.make(\"ALE/Pong-v5\", render_mode=\"human\")\nenv.reset()\nfor _ in range(100):\n    action = env.action_space.sample()\n\n    obs, reward, terminated, truncated, info = env.step(action)\n\n    if terminated or truncated:\n        obs, info = env.reset()\n\nenv.close()\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake and Build Options for Arcade Learning Environment\nDESCRIPTION: This CMake snippet sets the minimum required version, defines build options for C++ and Python libraries, and configures SDL support. It also sets up VCPKG integration and defines project metadata.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required (VERSION 3.14)\n\n# Build the C++ shared library\noption(BUILD_CPP_LIB \"Build C++ Interface\" ON)\n\n# Build the native Python bindings using pybind11\noption(BUILD_PYTHON_LIB \"Build Python Interface\" ON)\n\n# Enable SDL for screen and audio support\noption(SDL_SUPPORT \"Enable SDL support\" OFF)\n# Append VCPKG manifest feature\nif(SDL_SUPPORT)\n  list(APPEND VCPKG_MANIFEST_FEATURES \"sdl\")\nendif()\n\n# Set cmake module path\nset(CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake ${CMAKE_MODULE_PATH})\n\n# Overlay VCPKG custom triplets\nif(NOT DEFINED VCPKG_OVERLAY_TRIPLETS)\n  set(VCPKG_OVERLAY_TRIPLETS\n      \"${CMAKE_MODULE_PATH}/custom-triplets\"\n      CACHE STRING \"\")\nendif()\n\n# Discover VCPKG default triplet\nif(DEFINED ENV{VCPKG_DEFAULT_TRIPLET} AND NOT DEFINED VCPKG_TARGET_TRIPLET)\n  set(VCPKG_TARGET_TRIPLET\n      \"$ENV{VCPKG_DEFAULT_TRIPLET}\"\n      CACHE STRING \"\")\nendif()\n\n# Discover VCPKG toolchain\nif (NOT DEFINED CMAKE_TOOLCHAIN_FILE)\n  # VCPKG_ROOT is what Microsoft recommends,\n  # VCPKG_INSTALLATION_ROOT is what's defined on Azure\n  if(DEFINED ENV{VCPKG_ROOT})\n    set(CMAKE_TOOLCHAIN_FILE\n        \"$ENV{VCPKG_ROOT}/scripts/buildsystems/vcpkg.cmake\"\n        CACHE STRING \"\")\n  elseif(DEFINED ENV{VCPKG_INSTALLATION_ROOT})\n    set(CMAKE_TOOLCHAIN_FILE\n        \"$ENV{VCPKG_INSTALLATION_ROOT}/scripts/buildsystems/vcpkg.cmake\"\n        CACHE STRING \"\")\n  endif()\nendif()\n\n# Don't allow running cmake in root directory\nif (CMAKE_BINARY_DIR STREQUAL CMAKE_SOURCE_DIR)\n  message(FATAL_ERROR [=[\n    Source and build directories cannot be the same.\n    You should probably also remove CMakeFiles/ and CMakeCache.txt.\n  ]=])\nendif()\n\ninclude(ParseVersion)\nparse_version(\"version.txt\" PREFIX ALE)\n\nproject(ale VERSION ${ALE_DEFAULT_VERSION}\n            DESCRIPTION \"The Arcade Learning Environment (ALE) - a platform for AI research.\"\n            HOMEPAGE_URL \"http://www.arcadelearningenvironment.org\"\n            LANGUAGES CXX)\n\n# Main ALE src directory\nadd_subdirectory(src/ale)\n\n# Only include tests in the main project\n# if(CMAKE_PROJECT_NAME STREQUAL PROJECT_NAME)\n#  enable_testing()\n#  add_subdirectory(tests)\n# endif()\n```\n\n----------------------------------------\n\nTITLE: Installing ALE Python Package with pip\nDESCRIPTION: Command to install the ALE Python package from PyPI using pip. This provides the basic Python interface to interact with Atari 2600 games.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip install ale-py\n```\n\n----------------------------------------\n\nTITLE: Preprocessing Atari Environments with SuperSuit\nDESCRIPTION: Example showing how to apply various preprocessing techniques to Atari environments using SuperSuit. It includes frame stacking, max observation, sticky actions, frame skipping, and resizing to handle common Atari environment challenges.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/multi-agent-environments.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport supersuit\nfrom pettingzoo.atari import space_invaders_v1\n\nenv = space_invaders_v1.env()\n\n# as per openai baseline's MaxAndSKip wrapper, maxes over the last 2 frames\n# to deal with frame flickering\nenv = supersuit.max_observation_v0(env, 2)\n\n# repeat_action_probability is set to 0.25 to introduce non-determinism to the system\nenv = supersuit.sticky_actions_v0(env, repeat_action_probability=0.25)\n\n# skip frames for faster processing and less control\n# to be compatible with gym, use frame_skip(env, (2,5))\nenv = supersuit.frame_skip_v0(env, 4)\n\n# downscale observation for faster processing\nenv = supersuit.resize_v1(env, 84, 84)\n\n# allow agent to see everything on the screen despite Atari's flickering screen problem\nenv = supersuit.frame_stack_v1(env, 4)\n```\n\n----------------------------------------\n\nTITLE: Using ALE with Continuous Actions in Gymnasium\nDESCRIPTION: Snippet showing how to enable continuous action space in ALE when using the Gymnasium interface.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/README.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nenv = gym.make('ALE/Breakout-v5', continuous=True, render_mode=\"human\")\n```\n\n----------------------------------------\n\nTITLE: Markdown Table of Atari Game Environment Settings\nDESCRIPTION: Detailed table showing possible modes, default modes, possible difficulties, and default difficulty settings for each Atari game environment. Each row represents a unique game with its corresponding configuration options.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/environments.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| Environment      | Possible Modes                                  |   Default Mode | Possible Difficulties   |   Default Difficulty |\n|------------------|-------------------------------------------------|----------------|-------------------------|----------------------|\n| Adventure        | [0, 1, 2]                                       |              0 | [0, 1, 2, 3]            |                    0 |\n| AirRaid          | [1, ..., 8]                                     |              1 | [0]                     |                    0 |\n| Alien            | [0, 1, 2, 3]                                    |              0 | [0, 1, 2, 3]            |                    0 |\n```\n\n----------------------------------------\n\nTITLE: Recording Frames and Audio with Python Interface in ALE\nDESCRIPTION: This example demonstrates how to directly use the ALE Python interface to record both screen frames and audio during gameplay. It sets up recording directories, plays a random agent for one episode, and saves the frames and audio separately for later processing.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/visualization.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport os\nimport sys\nfrom random import randrange\nfrom ale_py import ALEInterface\n\ndef main(rom_file, record_dir):\n    ale = ALEInterface()\n    ale.setInt('random_seed', 123)\n\n    # Enable screen display and sound output\n    ale.setBool('display_screen', True)\n    ale.setBool('sound', True)\n\n    # Specify the recording directory and the audio file path\n    ale.setString(\"record_screen_dir\", record_dir) # Set the record directory\n    ale.setString(\"record_sound_filename\",\n                    os.path.join(record_dir, \"sound.wav\"))\n\n    ale.loadROM(rom_file)\n\n    # Get the list of legal actions\n    legal_actions = ale.getLegalActionSet()\n    num_actions = len(legal_actions)\n\n    while not ale.game_over():\n      a = legal_actions[randrange(num_actions)]\n      ale.act(a)\n\n    print(f\"Finished episode. Frames can be found in {record_dir}\")\n\nif __name__ == '__main__':\n    if len(sys.argv) < 3:\n      print(f\"Usage: {sys.argv[0]} rom_file record_dir\")\n      sys.exit()\n\n    rom_file = sys.argv[1]\n    record_dir = sys.argv[2]\n    main(rom_file, \"videos/\")\n```\n\n----------------------------------------\n\nTITLE: Initializing Maze Craze Environment with Parameters in Python\nDESCRIPTION: Example of initializing the Maze Craze environment with specific game version and visibility level parameters. The game version can be set to 'robbers', 'race', or 'capture', and visibility level ranges from 0 (fully visible) to 3 (not visible).\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/multi-agent-environments/maze_craze.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nmaze_craze.env(game_version=\"robbers\", visibilty_level=0)\n```\n\n----------------------------------------\n\nTITLE: ALE Action Enum Constants\nDESCRIPTION: Enumeration of all possible actions that can be performed in the Arcade Learning Environment, including basic controls (NOOP, FIRE), directional controls (UP, DOWN, LEFT, RIGHT), combined movements, and special actions like RESET.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/env-spec.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n0  - NOOP\n1  - FIRE\n2  - UP\n3  - RIGHT\n4  - LEFT\n5  - DOWN\n6  - UPRIGHT\n7  - UPLEFT\n8  - DOWNRIGHT\n9  - DOWNLEFT\n10 - UPFIRE\n11 - RIGHTFIRE\n12 - LEFTFIRE\n13 - DOWNFIRE\n14 - UPRIGHTFIRE\n15 - UPLEFTFIRE\n16 - DOWNRIGHTFIRE\n17 - DOWNLEFTFIRE\n40 - RESET\n```\n\n----------------------------------------\n\nTITLE: Using Gymnasium with ALE\nDESCRIPTION: Example of how to use the updated ALE with Gymnasium, including environment creation, episode loop, and action selection.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/CHANGELOG.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport gymnasium as gym\nimport ale_py\n\ngym.register_envs(ale_py)  # this is unnecessary but prevents IDE complaining\n\nenv = gym.make(\"ALE/Pong-v5\", render_mode=\"human\")\n\nobs, info = env.reset()\nepisode_over = False\nwhile not episode_over:\n\taction = policy(obs)  # replace with actual policy\n\tobs, reward, terminated, truncated, info = env.step(action)\n\tepisode_over = terminated or truncated\nenv.close()\n```\n\n----------------------------------------\n\nTITLE: Linking ALE in a CMake Project\nDESCRIPTION: CMake configuration snippet showing how to find and link against the ALE library in your own C++ CMake project.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/README.md#2025-04-23_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(ale REQUIRED)\ntarget_link_libraries(YourTarget ale::ale-lib)\n```\n\n----------------------------------------\n\nTITLE: Initializing Pong Environment with Parameters in Python\nDESCRIPTION: This code demonstrates how to initialize the Pong environment with specific parameters, such as the number of players.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/multi-agent-environments/pong.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\npong_v3.env(num_players=2)\n```\n\n----------------------------------------\n\nTITLE: Initializing ALE Environment with Gymnasium\nDESCRIPTION: Shows how to import and create an Arcade Learning Environment instance using the Gymnasium interface. This is the basic setup for starting to work with Atari games.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/gymnasium-interface.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport gymnasium as gym\nimport ale_py\n\nenv = gym.make('ALE/Breakout-v5')\n```\n\n----------------------------------------\n\nTITLE: Loading ROM File in ALE\nDESCRIPTION: Shows how to load a game ROM file into the ALE environment.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/cpp-interface.md#2025-04-23_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\nale.loadROM(\"asterix.bin\");\n```\n\n----------------------------------------\n\nTITLE: Importing Mario Bros Environment from PettingZoo\nDESCRIPTION: Code for importing the Mario Bros environment from the PettingZoo Atari collection. This environment is a mixed-sum game where two agents can collaborate or compete to clear pests from the floor.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/multi-agent-environments/mario_bros.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom pettingzoo.atari import mario_bros_v3\n```\n\n----------------------------------------\n\nTITLE: Setting Up ALE with Human Visualization\nDESCRIPTION: Demonstrates how to create an environment with real-time visualization. The render_mode parameter supports either 'human' for display on screen or 'rgb_array' for programmatic access to frames.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/gymnasium-interface.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport gymnasium as gym\n\nenv = gym.make('Breakout-v0', render_mode='human')\n```\n\n----------------------------------------\n\nTITLE: Getting Legal Actions in ALE\nDESCRIPTION: Retrieves the set of legal actions available for the loaded game.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/cpp-interface.md#2025-04-23_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\nale::ActionVect legal_actions = ale.getLegalActionSet();\n```\n\n----------------------------------------\n\nTITLE: Implementing Continuous Action Space in ALE (Python)\nDESCRIPTION: Updated Python interface to support continuous action inputs, mirroring the C++ interface changes for games with paddle usage.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nale.act(action: int, strength: float = 1.0)\n```\n\n----------------------------------------\n\nTITLE: Installing Python ALE Interface via pip\nDESCRIPTION: Simple pip command to install the ale-py package from PyPi\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/getting-started.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install ale-py\n```\n\n----------------------------------------\n\nTITLE: Linking ALE in CMake C++ Project\nDESCRIPTION: CMake commands to find and link the ALE library in a C++ project\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/getting-started.md#2025-04-23_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(ale REQUIRED)\ntarget_link_libraries(YourTarget ale::ale-lib)\n```\n\n----------------------------------------\n\nTITLE: Initializing ALE Python Interface\nDESCRIPTION: Basic Python code to import and initialize the ALE interface\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/getting-started.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom ale_py import ALEInterface\nale = ALEInterface()\n```\n\n----------------------------------------\n\nTITLE: Importing Breakout Environment in Python\nDESCRIPTION: Code snippet showing how to import the Breakout Atari environment using Gymnasium.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/environments/breakout.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ngymnasium.make(\"ALE/Breakout-v5\")\n```\n\n----------------------------------------\n\nTITLE: Building C++ ALE Interface with vcpkg\nDESCRIPTION: Shell commands for installing dependencies via vcpkg and building the C++ library using CMake\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/getting-started.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nvcpkg install zlib sdl2\n\nmkdir build && cd build\ncmake ../ -DCMAKE_BUILD_TYPE=Release\ncmake --build . --target install\n```\n\n----------------------------------------\n\nTITLE: Discretizing Continuous Actions in ALE Gymnasium Environment\nDESCRIPTION: Implementation of continuous action space within an ALE gymnasium environment, where discretization happens at the Python level.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/CHANGELOG.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nif continuous:\n    # action is expected to be a [2,] array of floats\n    x, y = action[0] * np.cos(action[1]), action[0] * np.sin(action[1])\n    action_idx = self.map_action_idx(\n        left_center_right=(\n            -int(x < self.continuous_action_threshold)\n            + int(x > self.continuous_action_threshold)\n        ),\n        down_center_up=(\n            -int(y < self.continuous_action_threshold)\n            + int(y > self.continuous_action_threshold)\n        ),\n        fire=(action[-1] > self.continuous_action_threshold),\n    )\n    ale.act(action_idx, action[1])\n```\n\n----------------------------------------\n\nTITLE: Installing Atari Environment Dependencies with pip\nDESCRIPTION: Command to install the necessary dependencies for using Atari environments in PettingZoo.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/multi-agent-environments.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install pettingzoo[atari]\n```\n\n----------------------------------------\n\nTITLE: Importing UpNDown Atari Environment in Python\nDESCRIPTION: Code snippet showing how to import the UpNDown Atari environment from Gymnasium. This is the primary way to instantiate the environment for reinforcement learning tasks.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/environments/up_n_down.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ngymnasium.make(\"ALE/UpNDown-v5\")\n```\n\n----------------------------------------\n\nTITLE: Importing MontezumaRevenge Environment in Gymnasium\nDESCRIPTION: Code snippet showing how to import and create the MontezumaRevenge environment using Gymnasium's make function. The environment has a discrete action space of 18 possible actions and an observation space of Box(0, 255, (210, 160, 3), uint8).\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/environments/montezuma_revenge.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ngymnasium.make(\"ALE/MontezumaRevenge-v5\")\n```\n\n----------------------------------------\n\nTITLE: Initializing ALE Interface in C++\nDESCRIPTION: Creates a new instance of the Arcade Learning Environment interface.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/cpp-interface.md#2025-04-23_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nale::ALEInterface ale;\n```\n\n----------------------------------------\n\nTITLE: Installing SuperSuit for Atari Preprocessing\nDESCRIPTION: Command to install the SuperSuit library which provides preprocessing wrappers for Atari environments.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/multi-agent-environments.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npip install supersuit\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for Arcade Learning Environment in CMake\nDESCRIPTION: This CMake code defines all source files to be included in the 'ale' target. Each file represents a different arcade game implementation within the Arcade Learning Environment, with over 100 classic games supported.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/src/ale/games/supported/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources(ale\n  PRIVATE\n    Adventure.cpp\n    AirRaid.cpp\n    Alien.cpp\n    Amidar.cpp\n    Assault.cpp\n    Asterix.cpp\n    Asteroids.cpp\n    Atlantis.cpp\n    Atlantis2.cpp\n    Backgammon.cpp\n    BankHeist.cpp\n    BasicMath.cpp\n    BattleZone.cpp\n    BeamRider.cpp\n    Berzerk.cpp\n    Blackjack.cpp\n    Bowling.cpp\n    Boxing.cpp\n    Breakout.cpp\n    Carnival.cpp\n    Casino.cpp\n    Centipede.cpp\n    ChopperCommand.cpp\n    CrazyClimber.cpp\n    Crossbow.cpp\n    DarkChambers.cpp\n    Defender.cpp\n    DemonAttack.cpp\n    DonkeyKong.cpp\n    DoubleDunk.cpp\n    Earthworld.cpp\n    ElevatorAction.cpp\n    Enduro.cpp\n    Entombed.cpp\n    Et.cpp\n    FishingDerby.cpp\n    FlagCapture.cpp\n    Freeway.cpp\n    Frogger.cpp\n    Frostbite.cpp\n    Galaxian.cpp\n    Gopher.cpp\n    Gravitar.cpp\n    Hangman.cpp\n    HauntedHouse.cpp\n    Hero.cpp\n    HumanCannonball.cpp\n    IceHockey.cpp\n    JamesBond.cpp\n    JourneyEscape.cpp\n    Kaboom.cpp\n    Kangaroo.cpp\n    KeystoneKapers.cpp\n    Kingkong.cpp\n    Klax.cpp\n    Koolaid.cpp\n    Krull.cpp\n    KungFuMaster.cpp\n    LaserGates.cpp\n    LostLuggage.cpp\n    MarioBros.cpp\n    MiniatureGolf.cpp\n    MontezumaRevenge.cpp\n    MrDo.cpp\n    MsPacman.cpp\n    NameThisGame.cpp\n    Othello.cpp\n    Pacman.cpp\n    Phoenix.cpp\n    Pitfall.cpp\n    Pitfall2.cpp\n    Pong.cpp\n    Pooyan.cpp\n    PrivateEye.cpp\n    QBert.cpp\n    RiverRaid.cpp\n    RoadRunner.cpp\n    RoboTank.cpp\n    Seaquest.cpp\n    SirLancelot.cpp\n    Skiing.cpp\n    Solaris.cpp\n    SpaceInvaders.cpp\n    SpaceWar.cpp\n    StarGunner.cpp\n    Superman.cpp\n    Surround.cpp\n    Tennis.cpp\n    Tetris.cpp\n    TicTacToe3d.cpp\n    TimePilot.cpp\n    Trondead.cpp\n    Turmoil.cpp\n    Tutankham.cpp\n    UpNDown.cpp\n    Venture.cpp\n    VideoCheckers.cpp\n    VideoChess.cpp\n    VideoCube.cpp\n    VideoPinball.cpp\n    WizardOfWor.cpp\n    WordZapper.cpp\n    YarsRevenge.cpp\n    Zaxxon.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Importing SpaceWar Environment in Gymnasium\nDESCRIPTION: Code snippet showing how to import the SpaceWar environment using Gymnasium's make function. The environment has a Discrete(18) action space and Box(0, 255, (250, 160, 3), uint8) observation space.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/environments/space_war.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ngymnasium.make(\"ALE/SpaceWar-v5\")\n```\n\n----------------------------------------\n\nTITLE: Importing MsPacman Environment in Python\nDESCRIPTION: This code snippet shows how to import and create the MsPacman environment using Gymnasium. It specifies the environment ID for the ALE/MsPacman-v5 variant.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/environments/ms_pacman.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ngymnasium.make(\"ALE/MsPacman-v5\")\n```\n\n----------------------------------------\n\nTITLE: Performing Game Action in ALE\nDESCRIPTION: Executes a random action from the legal action set and receives the reward.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/cpp-interface.md#2025-04-23_snippet_4\n\nLANGUAGE: cpp\nCODE:\n```\nale::Action a = legal_actions[rand() % legal_actions.size()];\nfloat reward = ale.act(a);\n```\n\n----------------------------------------\n\nTITLE: Enabling Sound Observation in ALE\nDESCRIPTION: Demonstrates how to enable sound observation functionality.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/cpp-interface.md#2025-04-23_snippet_5\n\nLANGUAGE: cpp\nCODE:\n```\nale.setBool(\"sound_obs\", True);\n```\n\n----------------------------------------\n\nTITLE: Configuring Source Files for ALE Target in CMake\nDESCRIPTION: This CMake command defines the private source files that should be compiled and linked into the 'ale' target. The files include core components for handling colors, constants, logging, screen and sound functionality, SDL2 integration, and dynamic loading.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/src/ale/common/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources(ale\n  PRIVATE\n    ColourPalette.cpp\n    Constants.cpp\n    Log.cpp\n    Palettes.hpp\n    ScreenExporter.cpp\n    SoundExporter.cpp\n    SoundNull.cxx\n    SoundRaw.cxx\n    SoundSDL.cxx\n    SDL2.cpp\n    DynamicLoad.cpp\n    ScreenSDL.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing FlagCapture Environment in Gymnasium\nDESCRIPTION: Code snippet showing how to create a FlagCapture environment instance using Gymnasium's make function. The environment supports an 18-dimensional discrete action space and a 3D box observation space for RGB images.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/environments/flag_capture.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ngymnasium.make(\"ALE/FlagCapture-v5\")\n```\n\n----------------------------------------\n\nTITLE: Importing Pong Environment in Python\nDESCRIPTION: Code snippet showing how to import the Pong environment from the Arcade Learning Environment using Gymnasium.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/environments/pong.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ngymnasium.make(\"ALE/Pong-v5\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Space Invaders Environment with Parameters in Python\nDESCRIPTION: Example of initializing the Space Invaders environment with various gameplay modification parameters. These parameters can alter game mechanics such as shield movement, bomb behavior, and invader visibility.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/multi-agent-environments/space_invaders.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nspace_invaders_v2.env(alternating_control=False, moving_shields=True,\nzigzaging_bombs=False, fast_bomb=False, invisible_invaders=False)\n```\n\n----------------------------------------\n\nTITLE: Setting ALE Environment Parameters\nDESCRIPTION: Demonstrates how to set environment parameters using the setInt method.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/cpp-interface.md#2025-04-23_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\nale.setInt(\"random_seed\", 123);\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for ALE Target in CMake\nDESCRIPTION: This CMake directive specifies all the source files to be compiled for the 'ale' target in the Arcade Learning Environment project. It includes various cartridge implementations, system components, and utility classes that make up the Atari 2600 emulation core.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/src/ale/emucore/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources(ale\n  PRIVATE\n    Cart.cxx\n    Cart0840.cxx\n    Cart2K.cxx\n    Cart3E.cxx\n    Cart3F.cxx\n    Cart4A50.cxx\n    Cart4K.cxx\n    CartAR.cxx\n    CartCV.cxx\n    CartDPC.cxx\n    CartE0.cxx\n    CartE7.cxx\n    CartF4.cxx\n    CartF4SC.cxx\n    CartF6.cxx\n    CartF6SC.cxx\n    CartF8.cxx\n    CartF8SC.cxx\n    CartFASC.cxx\n    CartFE.cxx\n    CartMB.cxx\n    CartMC.cxx\n    CartUA.cxx\n    Console.cxx\n    Control.cxx\n    Deserializer.cxx\n    Device.cxx\n    Event.cxx\n    Joystick.cxx\n    M6502.cxx\n    M6502Hi.cxx\n    M6502Low.cxx\n    M6532.cxx\n    MD5.cxx\n    MediaSrc.cxx\n    NullDev.cxx\n    OSystem.cxx\n    Paddles.cxx\n    Props.cxx\n    PropsSet.cxx\n    Random.cxx\n    Serializer.cxx\n    Settings.cxx\n    Switches.cxx\n    System.cxx\n    TIA.cxx\n    TIASnd.cxx\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing KingKong Environment in Python\nDESCRIPTION: Code snippet showing how to create a KingKong environment instance using Gymnasium. The environment provides a discrete action space of 6 actions and an observation space of RGB images with dimensions 250x160x3.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/environments/king_kong.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ngymnasium.make(\"ALE/KingKong-v5\")\n```\n\n----------------------------------------\n\nTITLE: Building ALE from Source with CMake\nDESCRIPTION: Commands to build and install the ALE C++ library from source using CMake. This is necessary when using the C++ interface directly.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/README.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nmkdir build && cd build\ncmake ../ -DCMAKE_BUILD_TYPE=Release\ncmake --build . --target install\n```\n\n----------------------------------------\n\nTITLE: Importing SpaceInvaders Environment in Python\nDESCRIPTION: Code to import and initialize the SpaceInvaders environment using Gymnasium, with an action space of Discrete(6) and observation space of Box(0, 255, (210, 160, 3), uint8).\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/environments/space_invaders.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ngymnasium.make(\"ALE/SpaceInvaders-v5\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Continuous Action Space in ALE (C++)\nDESCRIPTION: Updated C++ interface to support continuous action inputs for games with paddle usage, while maintaining backwards compatibility for discrete actions.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nreward_t ALEInterface::act(Action action, float paddle_strength = 1.0)\n```\n\n----------------------------------------\n\nTITLE: Importing Seaquest Environment in Python\nDESCRIPTION: Code snippet showing how to import the Seaquest environment from Gymnasium, the reinforcement learning library that implements the Atari Learning Environment.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/environments/seaquest.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ngymnasium.make(\"ALE/Seaquest-v5\")\n```\n\n----------------------------------------\n\nTITLE: Importing BankHeist Environment in Gymnasium\nDESCRIPTION: Code snippet demonstrating how to import the BankHeist environment using Gymnasium's make function. This creates an instance of the ALE/BankHeist-v5 environment for reinforcement learning applications.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/environments/bank_heist.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ngymnasium.make(\"ALE/BankHeist-v5\")\n```\n\n----------------------------------------\n\nTITLE: Importing Asteroids Environment in Python\nDESCRIPTION: Code snippet showing how to import the Asteroids environment from the Arcade Learning Environment using Gymnasium.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/environments/asteroids.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ngymnasium.make(\"ALE/Asteroids-v5\")\n```\n\n----------------------------------------\n\nTITLE: Initializing Combat Tank Environment with Parameters in Python\nDESCRIPTION: This code demonstrates how to initialize the Combat Tank environment with specific parameters such as maze presence, invisibility, and billiard hit mechanics.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/multi-agent-environments/combat_tank.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ncombat_tank_v2.env(has_maze=True, is_invisible=False, billiard_hit=True)\n```\n\n----------------------------------------\n\nTITLE: Importing Freeway Atari Environment in Python\nDESCRIPTION: Code snippet demonstrating how to import the Freeway environment from Gymnasium. This is the primary way to initialize the Freeway game environment for reinforcement learning applications.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/environments/freeway.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ngymnasium.make(\"ALE/Freeway-v5\")\n```\n\n----------------------------------------\n\nTITLE: Importing Othello Environment in Python\nDESCRIPTION: This code snippet shows how to import the Othello environment from the PettingZoo library. It uses version 3 of the environment.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/multi-agent-environments/othello.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom pettingzoo.atari import othello_v3\n```\n\n----------------------------------------\n\nTITLE: Importing Frostbite Environment in Gymnasium\nDESCRIPTION: Code snippet showing how to import and create the Frostbite environment using Gymnasium. The environment features a Discrete(18) action space and Box(0, 255, (210, 160, 3), uint8) observation space.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/environments/frostbite.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ngymnasium.make(\"ALE/Frostbite-v5\")\n```\n\n----------------------------------------\n\nTITLE: Initializing Combat Plane Environment with Parameters\nDESCRIPTION: Example showing how to initialize the Combat plane environment with specific game version and missile guidance parameters. Supports 'jet' or 'bi-plane' game versions and guided missile options.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/multi-agent-environments/combat_plane.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ncombat_plane_v2.env(game_version=\"jet\", guided_missile=True)\n```\n\n----------------------------------------\n\nTITLE: Importing the Boxing Atari Environment in Python\nDESCRIPTION: Code snippet showing how to import the Boxing environment from the Arcade Learning Environment using Gymnasium. This is the standard way to instantiate the environment for reinforcement learning experiments.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/environments/boxing.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ngymnasium.make(\"ALE/Boxing-v5\")\n```\n\n----------------------------------------\n\nTITLE: Importing VideoCube Environment in Gymnasium\nDESCRIPTION: Code example showing how to import the VideoCube environment using Gymnasium's make function.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/environments/video_cube.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ngymnasium.make(\"ALE/VideoCube-v5\")\n```\n\n----------------------------------------\n\nTITLE: Importing Pitfall Environment in Python\nDESCRIPTION: Code snippet for importing the Pitfall environment using Gymnasium. This creates an instance of the ALE/Pitfall-v5 environment.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/environments/pitfall.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ngymnasium.make(\"ALE/Pitfall-v5\")\n```\n\n----------------------------------------\n\nTITLE: Initializing DonkeyKong Environment in Python\nDESCRIPTION: Code snippet showing how to create a DonkeyKong environment instance using Gymnasium. The environment has a discrete action space of 18 possible actions and an observation space of 210x160x3 RGB images.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/environments/donkey_kong.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ngymnasium.make(\"ALE/DonkeyKong-v5\")\n```\n\n----------------------------------------\n\nTITLE: Configuring ALE-Py Module Build Settings\nDESCRIPTION: Sets up the Python module build configuration including library dependencies and output properties. Configures the module name and extension settings.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/src/ale/python/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(ale-py MODULE ale_python_interface.cpp)\ntarget_link_libraries(ale-py PUBLIC ale ale-lib)\ntarget_link_libraries(ale-py PRIVATE pybind11::module)\n\nset_target_properties(ale-py PROPERTIES\n    OUTPUT_NAME _ale_py\n    PREFIX \"${PYTHON_MODULE_PREFIX}\"\n    SUFFIX \"${PYTHON_MODULE_EXTENSION}\")\n```\n\n----------------------------------------\n\nTITLE: Importing Pacman Environment in Gymnasium\nDESCRIPTION: Code snippet showing how to import the Pacman environment using Gymnasium's make function. This creates an instance of the ALE/Pacman-v5 environment.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/environments/pacman.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ngymnasium.make(\"ALE/Pacman-v5\")\n```\n\n----------------------------------------\n\nTITLE: Importing WizardOfWor Environment in Gymnasium\nDESCRIPTION: Code snippet showing how to import the WizardOfWor environment using Gymnasium's make function. This creates an instance of the ALE/WizardOfWor-v5 environment.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/environments/wizard_of_wor.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ngymnasium.make(\"ALE/WizardOfWor-v5\")\n```\n\n----------------------------------------\n\nTITLE: Importing Asterix Environment in Gymnasium\nDESCRIPTION: Code snippet showing how to import the Asterix environment from Gymnasium. This environment is part of the Atari environments collection with a discrete action space and RGB observation space.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/environments/asterix.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ngymnasium.make(\"ALE/Asterix-v5\")\n```\n\n----------------------------------------\n\nTITLE: Importing Pong Environment in Python\nDESCRIPTION: This code snippet shows how to import the Pong environment from the PettingZoo Atari collection.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/multi-agent-environments/pong.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom pettingzoo.atari import pong_v3\n```\n\n----------------------------------------\n\nTITLE: Initializing Krull Environment in Gymnasium\nDESCRIPTION: Code snippet showing how to import and initialize the Krull environment using Gymnasium. The environment has a discrete action space of 18 actions and an observation space of Box(0, 255, (210, 160, 3), uint8).\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/environments/krull.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ngymnasium.make(\"ALE/Krull-v5\")\n```\n\n----------------------------------------\n\nTITLE: Importing Amidar Environment in Python\nDESCRIPTION: Code snippet showing how to import the Amidar environment from the Arcade Learning Environment using Gymnasium.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/environments/amidar.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ngymnasium.make(\"ALE/Amidar-v5\")\n```\n\n----------------------------------------\n\nTITLE: Importing DemonAttack Environment in Python\nDESCRIPTION: This code snippet shows how to import and create the DemonAttack environment using Gymnasium.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/environments/demon_attack.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ngymnasium.make(\"ALE/DemonAttack-v5\")\n```\n\n----------------------------------------\n\nTITLE: Importing Boxing Environment from PettingZoo Atari Collection\nDESCRIPTION: Code snippet showing how to import the Boxing environment from the PettingZoo Atari collection. This environment is a two-player adversarial game where agents compete in a boxing match.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/multi-agent-environments/boxing.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom pettingzoo.atari import boxing_v2\n```\n\n----------------------------------------\n\nTITLE: Configuring Base CMake Settings and Compiler Options\nDESCRIPTION: Sets up initial CMake configuration including include directories, C++ standard settings, and compiler-specific optimization flags.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/src/ale/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ninclude_directories(BEFORE ${PROJECT_SOURCE_DIR}/src ${CMAKE_CURRENT_BINARY_DIR})\n\nset(CMAKE_CXX_STANDARD 17)\nset(CMAKE_CXX_STANDARD_REQUIRED TRUE)\nset(CMAKE_CXX_EXTENSIONS FALSE)\nset(CMAKE_INTERPROCEDURAL_OPTIMIZATION TRUE)\nset(CMAKE_POSITION_INDEPENDENT_CODE TRUE)\n\nadd_compile_options(\n  \"$<$<CONFIG:RELEASE>:-O3>\"\n  \"$<$<CONFIG:DEBUG>:-O0>\"\n  \"$<$<CXX_COMPILER_ID:GNU,Clang,AppleClang>:-Wall>\"\n  \"$<$<CXX_COMPILER_ID:MSVC>:/W4>\")\n```\n\n----------------------------------------\n\nTITLE: Initializing Et Atari Environment with Gymnasium\nDESCRIPTION: Code snippet showing how to initialize the Et Atari environment using Gymnasium. The environment has a discrete action space of 18 possible actions and a Box observation space of RGB images.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/environments/et.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ngymnasium.make(\"ALE/Et-v5\")\n```\n\n----------------------------------------\n\nTITLE: Importing AirRaid Environment in Gymnasium\nDESCRIPTION: Code for importing the AirRaid Atari environment using the Gymnasium API. This allows researchers and developers to access and use the AirRaid game for reinforcement learning experiments.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/environments/air_raid.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ngymnasium.make(\"ALE/AirRaid-v5\")\n```\n\n----------------------------------------\n\nTITLE: Importing Alien Atari Environment in Python\nDESCRIPTION: Code snippet showing how to import the Alien environment from the Arcade Learning Environment using Gymnasium.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/environments/alien.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ngymnasium.make(\"ALE/Alien-v5\")\n```\n\n----------------------------------------\n\nTITLE: Initializing Frogger Environment in Gymnasium\nDESCRIPTION: Code snippet showing how to initialize the Frogger environment using Gymnasium's make function. This creates an environment with RGB observation space and 5 discrete actions.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/environments/frogger.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ngymnasium.make(\"ALE/Frogger-v5\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Python-based Tests for ale-py in CMake\nDESCRIPTION: This snippet sets up Python-based testing for the ale-py target using pytest. It finds the Python 3 interpreter, adds a test that runs pytest on the source directory, and configures the test environment with the proper Python path and working directory.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/tests/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif (TARGET ale-py)\n  find_package(Python3 COMPONENTS Interpreter REQUIRED)\n\n  add_test(NAME ale-py COMMAND Python3::Interpreter -m pytest ${CMAKE_SOURCE_DIR})\n  set_tests_properties(ale-py PROPERTIES\n    ENV PYTHONPATH=${CMAKE_BINARY_DIR}/src\n    WORKING_DIRECTORY ${CMAKE_BINARY_DIR}/src)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Importing RoadRunner Environment in Python\nDESCRIPTION: This code snippet shows how to import and create the RoadRunner environment using Gymnasium. It specifies the environment ID and version.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/environments/road_runner.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ngymnasium.make(\"ALE/RoadRunner-v5\")\n```\n\n----------------------------------------\n\nTITLE: Importing the Atlantis Atari Environment in Python\nDESCRIPTION: Code snippet showing how to import the Atlantis environment from the Arcade Learning Environment using Gymnasium. This creates an instance of the Atlantis game with the default configuration.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/environments/atlantis.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ngymnasium.make(\"ALE/Atlantis-v5\")\n```\n\n----------------------------------------\n\nTITLE: Importing Riverraid Environment in Python\nDESCRIPTION: Code snippet showing how to import and create the Riverraid environment using Gymnasium.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/environments/riverraid.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ngymnasium.make(\"ALE/Riverraid-v5\")\n```\n\n----------------------------------------\n\nTITLE: CMake Configuration for ALE Project\nDESCRIPTION: CMake configuration file showing how to set up a project that uses the ALE shared library, including package finding and target linking.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/cpp-interface.md#2025-04-23_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\n\nproject(example-cpp-lib)\n\nfind_package(ale REQUIRED)\n\nadd_executable(sharedLibraryInterfaceExample sharedLibraryInterfaceExample.cpp)\ntarget_link_libraries(sharedLibraryInterfaceExample ale::ale-lib)\n\nadd_executable(sharedLibraryInterfaceWithModesExample sharedLibraryInterfaceWithModesExample.cpp)\ntarget_link_libraries(sharedLibraryInterfaceWithModesExample ale::ale-lib)\n```\n\n----------------------------------------\n\nTITLE: Running Tests Example Command in CMake\nDESCRIPTION: Example command for running the test suite in a CMake project, using the Release configuration and targeting the test suite.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/CONTRIBUTING.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncmake --build . --config Release --target test\n```\n\n----------------------------------------\n\nTITLE: Initializing NameThisGame Environment in Python\nDESCRIPTION: Code snippet showing how to initialize the NameThisGame Atari environment using Gymnasium. The environment features a discrete action space of 6 actions and an observation space of Box(0, 255, (210, 160, 3), uint8).\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/environments/name_this_game.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ngymnasium.make(\"ALE/NameThisGame-v5\")\n```\n\n----------------------------------------\n\nTITLE: Importing Zaxxon Environment in Gymnasium\nDESCRIPTION: Code snippet showing how to import the Zaxxon environment from the Gymnasium library for reinforcement learning applications.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/environments/zaxxon.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ngymnasium.make(\"ALE/Zaxxon-v5\")\n```\n\n----------------------------------------\n\nTITLE: Importing MarioBros Environment in Gymnasium\nDESCRIPTION: Code snippet demonstrating how to import the MarioBros Atari environment using Gymnasium. This creates an instance of the environment with default settings for observation type, frameskip, and action probability.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/environments/mario_bros.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ngymnasium.make(\"ALE/MarioBros-v5\")\n```\n\n----------------------------------------\n\nTITLE: Setting up Core Library Dependencies\nDESCRIPTION: Creates the main ALE library target and configures its core dependencies including ZLIB and Threads.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/src/ale/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(ale OBJECT)\n\nfind_package(ZLIB REQUIRED)\nfind_package(Threads REQUIRED)\ntarget_link_libraries(ale\n  PRIVATE\n    ZLIB::ZLIB\n    Threads::Threads)\n```\n\n----------------------------------------\n\nTITLE: Initializing HauntedHouse Environment in Gymnasium\nDESCRIPTION: Code snippet showing how to create a HauntedHouse environment instance using Gymnasium. The environment has a discrete action space of 18 possible actions and an observation space of RGB images (210x160x3).\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/environments/haunted_house.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ngymnasium.make(\"ALE/HauntedHouse-v5\")\n```\n\n----------------------------------------\n\nTITLE: Importing Foozpong Environment\nDESCRIPTION: Code snippet showing how to import the Foozpong environment from PettingZoo's Atari collection.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/multi-agent-environments/foozpong.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom pettingzoo.atari import foozpong_v3\n```\n\n----------------------------------------\n\nTITLE: Importing ChopperCommand Environment in Python\nDESCRIPTION: Code snippet demonstrating how to import the ChopperCommand environment using Gymnasium.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/environments/chopper_command.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ngymnasium.make(\"ALE/ChopperCommand-v5\")\n```\n\n----------------------------------------\n\nTITLE: Importing Qbert Environment in Python\nDESCRIPTION: This code snippet shows how to import the Qbert environment using Gymnasium. It specifies the exact environment ID to use.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/environments/qbert.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ngymnasium.make(\"ALE/Qbert-v5\")\n```\n\n----------------------------------------\n\nTITLE: Importing Defender Atari Environment in Python\nDESCRIPTION: Python code snippet showing how to import the Defender environment from the Arcade Learning Environment using Gymnasium.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/environments/defender.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ngymnasium.make(\"ALE/Defender-v5\")\n```\n\n----------------------------------------\n\nTITLE: Importing LaserGates Environment in Python\nDESCRIPTION: This code snippet shows how to import and create the LaserGates environment using Gymnasium.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/environments/laser_gates.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ngymnasium.make(\"ALE/LaserGates-v5\")\n```\n\n----------------------------------------\n\nTITLE: Initializing Solaris Atari Environment in Gymnasium\nDESCRIPTION: Code snippet showing how to import and create a Solaris environment instance using Gymnasium's make function. This creates an environment with the default configuration for the ALE/Solaris-v5 variant.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/environments/solaris.md#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\ngymnasium.make(\"ALE/Solaris-v5\")\n```\n\n----------------------------------------\n\nTITLE: Importing BeamRider Environment in Gymnasium\nDESCRIPTION: Code snippet showing how to import the BeamRider environment from Gymnasium, which is part of the Atari environments collection.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/environments/beam_rider.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ngymnasium.make(\"ALE/BeamRider-v5\")\n```\n\n----------------------------------------\n\nTITLE: Importing Phoenix Environment in Gymnasium\nDESCRIPTION: Code snippet showing how to import the Phoenix environment from Gymnasium. This creates an instance of the Phoenix game with default settings.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/environments/phoenix.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ngymnasium.make(\"ALE/Phoenix-v5\")\n```\n\n----------------------------------------\n\nTITLE: Importing StarGunner Environment in Python\nDESCRIPTION: Code snippet showing how to import the StarGunner environment from Gymnasium, an implementation of the Atari game for reinforcement learning.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/environments/star_gunner.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ngymnasium.make(\"ALE/StarGunner-v5\")\n```\n\n----------------------------------------\n\nTITLE: Importing Flag Capture Environment in Python\nDESCRIPTION: Code for importing the Flag Capture environment from the PettingZoo Atari collection. This environment is a two-player memory and information battle game.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/multi-agent-environments/flag_capture.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom pettingzoo.atari import flag_capture_v2\n```\n\n----------------------------------------\n\nTITLE: Importing Robotank Environment in Python\nDESCRIPTION: Code snippet showing how to import the Robotank environment from Gymnasium using the ALE namespace with the standard configuration.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/environments/robotank.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ngymnasium.make(\"ALE/Robotank-v5\")\n```\n\n----------------------------------------\n\nTITLE: Importing Backgammon Environment in Python using Gymnasium\nDESCRIPTION: Code snippet showing how to import the Backgammon environment from the Arcade Learning Environment using Gymnasium. This creates an instance of the Backgammon game with default settings.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/environments/backgammon.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ngymnasium.make(\"ALE/Backgammon-v5\")\n```\n\n----------------------------------------\n\nTITLE: Importing Tennis Environment in Python\nDESCRIPTION: This code snippet shows how to import the Tennis game environment from the PettingZoo Atari suite. It specifies the exact import statement needed to use this environment in a Python script.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/multi-agent-environments/tennis.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom pettingzoo.atari import tennis_v3\n```\n\n----------------------------------------\n\nTITLE: Importing VideoPinball Environment in Python\nDESCRIPTION: Code snippet showing how to import the VideoPinball Atari environment using Gymnasium. This is the standard way to instantiate the environment for reinforcement learning tasks.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/environments/video_pinball.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ngymnasium.make(\"ALE/VideoPinball-v5\")\n```\n\n----------------------------------------\n\nTITLE: Importing TicTacToe3D Environment in Python\nDESCRIPTION: Code snippet showing how to import the TicTacToe3D environment from the Arcade Learning Environment using Gymnasium's make function.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/environments/tic_tac_toe_3d.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ngymnasium.make(\"ALE/TicTacToe3D-v5\")\n```\n\n----------------------------------------\n\nTITLE: Importing Space War Environment in Python\nDESCRIPTION: Code snippet showing how to import the Space War environment from the PettingZoo Atari collection.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/multi-agent-environments/space_war.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom pettingzoo.atari import space_war_v2\n```\n\n----------------------------------------\n\nTITLE: Importing TimePilot Environment in Python\nDESCRIPTION: This code snippet shows how to import the TimePilot environment using Gymnasium. It creates an instance of the ALE/TimePilot-v5 environment.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/environments/time_pilot.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ngymnasium.make(\"ALE/TimePilot-v5\")\n```\n\n----------------------------------------\n\nTITLE: Importing Pooyan Environment in Gymnasium\nDESCRIPTION: Code snippet showing how to import the Pooyan environment using Gymnasium's make function.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/environments/pooyan.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ngymnasium.make(\"ALE/Pooyan-v5\")\n```\n\n----------------------------------------\n\nTITLE: Importing Joust Environment in Python\nDESCRIPTION: Code snippet showing how to import the Joust environment from PettingZoo's Atari collection.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/multi-agent-environments/joust.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom pettingzoo.atari import joust_v3\n```\n\n----------------------------------------\n\nTITLE: Importing Tutankham Environment in Python\nDESCRIPTION: Code snippet showing how to import the Tutankham environment from the Gymnasium library. This is the standard way to instantiate the Tutankham Atari game environment.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/environments/tutankham.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ngymnasium.make(\"ALE/Tutankham-v5\")\n```\n\n----------------------------------------\n\nTITLE: Importing Tennis Environment in Python\nDESCRIPTION: This code snippet shows how to import the Tennis environment from the Arcade Learning Environment using Gymnasium.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/environments/tennis.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ngymnasium.make(\"ALE/Tennis-v5\")\n```\n\n----------------------------------------\n\nTITLE: Importing Quadrapong Environment in Python\nDESCRIPTION: Code snippet showing how to import the Quadrapong environment from PettingZoo's Atari collection.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/multi-agent-environments/quadrapong.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom pettingzoo.atari import quadrapong_v4\n```\n\n----------------------------------------\n\nTITLE: Importing Wizard of Wor Environment in Python\nDESCRIPTION: This code snippet shows how to import the Wizard of Wor environment from the PettingZoo Atari collection. It specifies the exact import statement needed to use this environment in a Python project.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/multi-agent-environments/wizard_of_wor.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom pettingzoo.atari import wizard_of_wor_v3\n```\n\n----------------------------------------\n\nTITLE: Importing LostLuggage Environment in Python\nDESCRIPTION: Code snippet showing how to import the LostLuggage environment from the Arcade Learning Environment using Gymnasium.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/environments/lost_luggage.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ngymnasium.make(\"ALE/LostLuggage-v5\")\n```\n\n----------------------------------------\n\nTITLE: Combining Frames and Audio with ffmpeg in ALE\nDESCRIPTION: This bash command demonstrates how to use ffmpeg to combine recorded frames and audio from ALE into a single video file. It specifies a frame rate of 60 FPS, takes PNG frames and WAV audio as input, and creates an MP4 video with H.264 encoding.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/visualization.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# -r frame_rate\n# -i input\n# -f format\n# -c:a audio_codec\n# -c:v video_codec\n\nffmpeg -r 60 \\\n       -i record/%06d.png \\\n       -i record/sound.wav \\\n       -f mov \\\n       -c:a mp3 \\\n       -c:v libx264 \\\n       agent.mov\n```\n\n----------------------------------------\n\nTITLE: Importing VideoChess Environment in Python\nDESCRIPTION: Code snippet showing how to import the VideoChess environment using Gymnasium's make function. This is the standard way to create an instance of the environment for reinforcement learning tasks.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/environments/video_chess.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ngymnasium.make(\"ALE/VideoChess-v5\")\n```\n\n----------------------------------------\n\nTITLE: Initializing Basketball Pong Environment with Parameters\nDESCRIPTION: Shows how to initialize the Basketball Pong environment with specific parameters. The 'num_players' parameter can be set to either 2 or 4 players.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/multi-agent-environments/basketball_pong.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nbasketball_pong_v3.env(num_players=2)\n```\n\n----------------------------------------\n\nTITLE: Initializing Galaxian Environment in Python\nDESCRIPTION: Code to create and initialize the Galaxian environment using Gymnasium. The environment provides an RGB observation space and 6 discrete actions.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/environments/galaxian.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ngymnasium.make(\"ALE/Galaxian-v5\")\n```\n\n----------------------------------------\n\nTITLE: Importing Venture Environment in Python\nDESCRIPTION: Code snippet showing how to import the Venture Atari environment using Gymnasium's make function.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/environments/venture.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ngymnasium.make(\"ALE/Venture-v5\")\n```\n\n----------------------------------------\n\nTITLE: Importing VideoCheckers Environment in Gymnasium\nDESCRIPTION: Code showing how to import the VideoCheckers environment from the Arcade Learning Environment via Gymnasium.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/environments/video_checkers.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ngymnasium.make(\"ALE/VideoCheckers-v5\")\n```\n\n----------------------------------------\n\nTITLE: Importing CrazyClimber Environment in Python\nDESCRIPTION: This code snippet shows how to import the CrazyClimber environment using Gymnasium.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/environments/crazy_climber.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ngymnasium.make(\"ALE/CrazyClimber-v5\")\n```\n\n----------------------------------------\n\nTITLE: Environment Configuration Parameters\nDESCRIPTION: Python dictionary-style representation of the environment's observation space and action space specifications.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/environments/riverraid.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nAction Space = Discrete(18)\nObservation Space = Box(0, 255, (210, 160, 3), uint8)\n```\n\n----------------------------------------\n\nTITLE: Initializing Frogger RAM Environment in Gymnasium\nDESCRIPTION: Code snippet showing how to initialize the Frogger environment with RAM observations instead of RGB using Gymnasium's make function.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/environments/frogger.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ngymnasium.make(\"ALE/Frogger-ram-v5\")\n```\n\n----------------------------------------\n\nTITLE: Initializing SirLancelot Environment in Python\nDESCRIPTION: Code snippet showing how to create a SirLancelot environment instance using Gymnasium. The environment has a discrete action space of 6 actions and an observation space of Box(0, 255, (250, 160, 3), uint8).\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/environments/sir_lancelot.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ngymnasium.make(\"ALE/SirLancelot-v5\")\n```\n\n----------------------------------------\n\nTITLE: Initializing Hangman Environment in Gymnasium\nDESCRIPTION: Code snippet showing how to instantiate the Hangman environment using Gymnasium's make function. The environment has a discrete action space of 18 possible actions and an observation space of RGB images.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/environments/hangman.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ngymnasium.make(\"ALE/Hangman-v5\")\n```\n\n----------------------------------------\n\nTITLE: Initializing Galaxian RAM Environment in Python\nDESCRIPTION: Code to create the RAM-based variant of the Galaxian environment, which provides RAM state observations instead of visual data.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/environments/galaxian.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ngymnasium.make(\"ALE/Galaxian-ram-v5\")\n```\n\n----------------------------------------\n\nTITLE: Importing the Surround Atari Environment in Python\nDESCRIPTION: Code snippet demonstrating how to import the Surround Atari environment using Gymnasium's make function. This creates an instance of the Surround environment with default settings.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/environments/surround.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ngymnasium.make(\"ALE/Surround-v5\")\n```\n\n----------------------------------------\n\nTITLE: Importing MrDo Environment in Python\nDESCRIPTION: Code snippet showing how to import the MrDo environment from Gymnasium. This is the standard way to create an instance of the MrDo Atari game environment.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/environments/mr_do.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ngymnasium.make(\"ALE/MrDo-v5\")\n```\n\n----------------------------------------\n\nTITLE: Importing Kangaroo Environment in Gymnasium\nDESCRIPTION: Code snippet demonstrating how to import the Kangaroo environment from the Arcade Learning Environment using Gymnasium's make function.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/environments/kangaroo.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ngymnasium.make(\"ALE/Kangaroo-v5\")\n```\n\n----------------------------------------\n\nTITLE: Initializing Foozpong Environment\nDESCRIPTION: Shows how to initialize the Foozpong environment with configurable number of players parameter that must be either 2 or 4.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/multi-agent-environments/foozpong.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfoozpong_v3.env(num_players=4)\n```\n\n----------------------------------------\n\nTITLE: Importing Surround Environment in Python\nDESCRIPTION: Code snippet showing how to import the Surround environment from PettingZoo's Atari collection. The environment uses a parallel API and supports two agents with discrete actions.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/multi-agent-environments/surround.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom pettingzoo.atari import surround_v2\n```\n\n----------------------------------------\n\nTITLE: Importing Koolaid Environment in Python\nDESCRIPTION: Code snippet showing how to import the Koolaid environment using Gymnasium's make function.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/environments/koolaid.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ngymnasium.make(\"ALE/Koolaid-v5\")\n```\n\n----------------------------------------\n\nTITLE: Importing Centipede Environment in Python\nDESCRIPTION: Code snippet showing how to import and create the Centipede environment using Gymnasium.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/environments/centipede.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ngymnasium.make(\"ALE/Centipede-v5\")\n```\n\n----------------------------------------\n\nTITLE: Agent Configuration - Python\nDESCRIPTION: Definition of the agent configuration in the Ice Hockey environment showing the agent identifiers.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/multi-agent-environments/ice_hockey.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nagents= ['first_0', 'second_0']\n```\n\n----------------------------------------\n\nTITLE: Displaying M6502 ASCII Art and License Information\nDESCRIPTION: This snippet presents the ASCII art logo for M6502, a 6502 Microprocessor Emulator, along with its copyright and license information. It also specifies the GNU General Public License and includes disclaimers.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/ACKNOWLEDGMENTS.md#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n===============================================================================\n\n  MM     MM  6666  555555  0000   2222\n  MMMM MMMM 66  66 55     00  00 22  22\n  MM MMM MM 66     55     00  00     22\n  MM  M  MM 66666  55555  00  00  22222  --  \"A 6502 Microprocessor Emulator\"\n  MM     MM 66  66     55 00  00 22\n  MM     MM 66  66 55  55 00  00 22\n  MM     MM  6666   5555   0000  222222\n\n===============================================================================\n                   License Information and Copyright Notice\n===============================================================================\n\nCopyright (C) 1995-2002 Bradford W. Mott <bwmott@acm.org>\n\nThis program is free software; you can redistribute it and/or modify it under\nthe terms of the GNU General Public License as published by the Free Software\nFoundation; either version 2 of the License, or any later version.\n\nYou should have received a copy of the GNU General Public License version 2\nalong with this program (License.txt); if not, write to the Free Software\nFoundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111, USA.\n\nThis program is distributed in the hope that it will be useful, but WITHOUT\nANY WARRANTY. IN NO EVENT SHALL THE AUTHORS OR DISTRIBUTORS BE LIABLE TO ANY\nPARTY FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES\nARISING OUT OF THE USE OF THIS SOFTWARE, ITS DOCUMENTATION, OR ANY DERIVATIVES\nTHEREOF, EVEN IF THE AUTHORS HAVE BEEN ADVISED OF THE POSSIBILITY OF SUCH\nDAMAGE.\n\nTHE AUTHORS AND DISTRIBUTORS SPECIFICALLY DISCLAIM ANY WARRANTIES, INCLUDING,\nBUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\nPARTICULAR PURPOSE, AND NON-INFRINGEMENT. THIS SOFTWARE IS PROVIDED ON AN\n\"AS IS\" BASIS, AND THE AUTHORS AND DISTRIBUTORS HAVE NO OBLIGATION TO PROVIDE\nMAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.\n```\n\n----------------------------------------\n\nTITLE: Importing Space Invaders Environment in Python\nDESCRIPTION: Code snippet showing how to import the Space Invaders environment from the PettingZoo Atari collection.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/multi-agent-environments/space_invaders.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom pettingzoo.atari import space_invaders_v2\n```\n\n----------------------------------------\n\nTITLE: Importing Jamesbond Environment in Gymnasium\nDESCRIPTION: Code snippet showing how to import the Jamesbond environment from Gymnasium's Atari Learning Environment (ALE) collection.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/environments/jamesbond.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ngymnasium.make(\"ALE/Jamesbond-v5\")\n```\n\n----------------------------------------\n\nTITLE: Importing Double Dunk Environment in Python\nDESCRIPTION: Code snippet showing how to import the Double Dunk environment from PettingZoo's Atari collection.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/multi-agent-environments/double_dunk.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom pettingzoo.atari import double_dunk_v3\n```\n\n----------------------------------------\n\nTITLE: Importing Superman Atari Environment in Python\nDESCRIPTION: This code snippet shows how to import and create the Superman Atari environment using Gymnasium. It specifies the exact environment ID to use.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/environments/superman.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ngymnasium.make(\"ALE/Superman-v5\")\n```\n\n----------------------------------------\n\nTITLE: Importing Berzerk Atari Environment in Python\nDESCRIPTION: Code snippet showing how to import the Berzerk environment from the Arcade Learning Environment using Gymnasium.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/environments/berzerk.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ngymnasium.make(\"ALE/Berzerk-v5\")\n```\n\n----------------------------------------\n\nTITLE: Importing KeystoneKapers Environment in Python\nDESCRIPTION: Code snippet demonstrating how to import the KeystoneKapers environment from the Gymnasium library. This is the standard way to instantiate the environment for reinforcement learning experiments.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/environments/keystone_kapers.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ngymnasium.make(\"ALE/KeystoneKapers-v5\")\n```\n\n----------------------------------------\n\nTITLE: Initializing Crossbow Environment in Python\nDESCRIPTION: Code snippet showing how to initialize the Crossbow environment using Gymnasium. This creates an environment instance with the default RGB observation space.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/environments/crossbow.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ngymnasium.make(\"ALE/Crossbow-v5\")\n```\n\n----------------------------------------\n\nTITLE: Importing ElevatorAction Environment in Python\nDESCRIPTION: This code snippet demonstrates how to import and create an instance of the ElevatorAction environment using Gymnasium.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/environments/elevator_action.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ngymnasium.make(\"ALE/ElevatorAction-v5\")\n```\n\n----------------------------------------\n\nTITLE: Importing JourneyEscape Atari Environment in Python\nDESCRIPTION: Code snippet showing how to import the JourneyEscape environment from Gymnasium using the standard make function.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/environments/journey_escape.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ngymnasium.make(\"ALE/JourneyEscape-v5\")\n```\n\n----------------------------------------\n\nTITLE: Importing Hero Environment in Python\nDESCRIPTION: Code snippet for importing the Hero environment from Gymnasium. This creates an instance of the ALE/Hero-v5 environment.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/environments/hero.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ngymnasium.make(\"ALE/Hero-v5\")\n```\n\n----------------------------------------\n\nTITLE: Importing Private Eye Environment in Python\nDESCRIPTION: Code to import the Private Eye environment from the Arcade Learning Environment using Gymnasium. This creates an instance of the game with default settings.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/environments/private_eye.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ngymnasium.make(\"ALE/PrivateEye-v5\")\n```\n\n----------------------------------------\n\nTITLE: Importing Trondead Environment in Python\nDESCRIPTION: This code snippet shows how to import the Trondead environment using Gymnasium. It specifies the exact environment ID to use.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/environments/trondead.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ngymnasium.make(\"ALE/Trondead-v5\")\n```\n\n----------------------------------------\n\nTITLE: Importing Enduro Environment in Python\nDESCRIPTION: Code snippet showing how to import the Enduro environment using Gymnasium. This creates an instance of the ALE/Enduro-v5 environment.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/environments/enduro.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ngymnasium.make(\"ALE/Enduro-v5\")\n```\n\n----------------------------------------\n\nTITLE: Importing BattleZone Environment in Python\nDESCRIPTION: Code snippet showing how to import and create the BattleZone environment using Gymnasium's make function. The environment features a Discrete(18) action space and Box(0, 255, (210, 160, 3), uint8) observation space.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/environments/battle_zone.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ngymnasium.make(\"ALE/BattleZone-v5\")\n```\n\n----------------------------------------\n\nTITLE: Importing Kaboom Atari Environment in Python\nDESCRIPTION: Code snippet showing how to import the Kaboom environment from Gymnasium. This creates an instance of the Kaboom Atari game with default settings.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/environments/kaboom.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ngymnasium.make(\"ALE/Kaboom-v5\")\n```\n\n----------------------------------------\n\nTITLE: Importing YarsRevenge Environment in Python\nDESCRIPTION: Code to import and initialize the YarsRevenge environment using Gymnasium.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/environments/yars_revenge.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ngymnasium.make(\"ALE/YarsRevenge-v5\")\n```\n\n----------------------------------------\n\nTITLE: Initializing Carnival Environment in Python\nDESCRIPTION: Code to create the Carnival game environment using Gymnasium. The environment has a discrete action space of 6 actions and an observation space of Box(0, 255, (214, 160, 3), uint8).\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/environments/carnival.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ngymnasium.make(\"ALE/Carnival-v5\")\n```\n\n----------------------------------------\n\nTITLE: Importing KungFuMaster Environment in Gymnasium\nDESCRIPTION: Code snippet demonstrating how to import the KungFuMaster environment using Gymnasium's make function. This creates an instance of the ALE/KungFuMaster-v5 environment.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/environments/kung_fu_master.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ngymnasium.make(\"ALE/KungFuMaster-v5\")\n```\n\n----------------------------------------\n\nTITLE: Importing Gravitar Environment in Gymnasium\nDESCRIPTION: Code snippet showing how to import and initialize the Gravitar environment from the Arcade Learning Environment using the Gymnasium API.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/environments/gravitar.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ngymnasium.make(\"ALE/Gravitar-v5\")\n```\n\n----------------------------------------\n\nTITLE: Initializing Klax Environment in Gymnasium\nDESCRIPTION: Code snippet showing how to create the Klax environment using Gymnasium's make function. Creates environment with RGB observation space and 18 discrete actions.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/environments/klax.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ngymnasium.make(\"ALE/Klax-v5\")\n```\n\n----------------------------------------\n\nTITLE: Importing Gopher Environment in Python\nDESCRIPTION: Code snippet showing how to import the Gopher environment in Gymnasium. This imports the ALE/Gopher-v5 variant of the environment.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/environments/gopher.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ngymnasium.make(\"ALE/Gopher-v5\")\n```\n\n----------------------------------------\n\nTITLE: Importing Blackjack Environment in Gymnasium\nDESCRIPTION: Demonstrates how to import the Blackjack environment from Gymnasium. This code snippet shows the standard import pattern used to create an instance of the Blackjack Atari environment.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/environments/blackjack.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ngymnasium.make(\"ALE/Blackjack-v5\")\n```\n\n----------------------------------------\n\nTITLE: Importing MiniatureGolf Atari Environment in Gymnasium\nDESCRIPTION: Code snippet showing how to import the MiniatureGolf environment using the Gymnasium API. The environment is part of the Atari environments collection in the Arcade Learning Environment.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/environments/miniature_golf.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ngymnasium.make(\"ALE/MiniatureGolf-v5\")\n```\n\n----------------------------------------\n\nTITLE: Initializing Earthworld Environment in Python\nDESCRIPTION: Code to create and initialize the Earthworld Atari environment using Gymnasium. This creates the standard RGB observation space version of the environment.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/environments/earthworld.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ngymnasium.make(\"ALE/Earthworld-v5\")\n```\n\n----------------------------------------\n\nTITLE: Importing Assault Atari Environment in Python\nDESCRIPTION: Code snippet showing how to import the Assault environment from the Gymnasium library. This is the standard way to initialize the environment for reinforcement learning tasks.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/environments/assault.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ngymnasium.make(\"ALE/Assault-v5\")\n```\n\n----------------------------------------\n\nTITLE: Initializing Turmoil Environment in Python\nDESCRIPTION: Code snippet showing how to initialize the Turmoil environment using Gymnasium. The environment features a discrete action space of 12 possible actions and an observation space of 210x160x3 RGB values.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/environments/turmoil.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ngymnasium.make(\"ALE/Turmoil-v5\")\n```\n\n----------------------------------------\n\nTITLE: Importing Basketball Pong Environment in Python\nDESCRIPTION: Code snippet showing how to import the Basketball Pong environment from the PettingZoo Atari collection.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/multi-agent-environments/basketball_pong.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom pettingzoo.atari import basketball_pong_v3\n```\n\n----------------------------------------\n\nTITLE: Initializing HumanCannonball Environment in Python\nDESCRIPTION: Code snippet showing how to create a HumanCannonball environment instance using Gymnasium. The environment has a discrete action space of 18 possible actions and an observation space of Box(0, 255, (210, 160, 3), uint8).\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/environments/human_cannonball.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ngymnasium.make(\"ALE/HumanCannonball-v5\")\n```\n\n----------------------------------------\n\nTITLE: Environment Configuration Parameters\nDESCRIPTION: Example showing the environment's observation space and action space specifications.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/environments/adventure.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nAction Space      = Discrete(18)\nObservation Space = Box(0, 255, (250, 160, 3), uint8)\n```\n\n----------------------------------------\n\nTITLE: Importing Combat Tank Environment in Python\nDESCRIPTION: This code snippet shows how to import the Combat Tank environment from the PettingZoo Atari suite.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/multi-agent-environments/combat_tank.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom pettingzoo.atari import combat_tank_v3\n```\n\n----------------------------------------\n\nTITLE: Importing FishingDerby Environment in Gymnasium\nDESCRIPTION: Code snippet showing how to import the FishingDerby environment from the Arcade Learning Environment using Gymnasium's make function.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/environments/fishing_derby.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ngymnasium.make(\"ALE/FishingDerby-v5\")\n```\n\n----------------------------------------\n\nTITLE: Importing Bowling Environment in Python\nDESCRIPTION: This code snippet shows how to import the Bowling environment using Gymnasium. It specifies the environment ID for the ALE/Bowling-v5 variant.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/environments/bowling.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ngymnasium.make(\"ALE/Bowling-v5\")\n```\n\n----------------------------------------\n\nTITLE: Importing Combat Plane Environment in Python\nDESCRIPTION: Code snippet showing how to import the Combat jet environment from PettingZoo's Atari collection.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/multi-agent-environments/combat_plane.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom pettingzoo.atari import combat_jet_v1\n```\n\n----------------------------------------\n\nTITLE: Importing Warlords Environment in Python\nDESCRIPTION: Code snippet showing how to import the Warlords environment from PettingZoo's Atari collection.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/multi-agent-environments/warlords.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom pettingzoo.atari import warlords_v3\n```\n\n----------------------------------------\n\nTITLE: Importing Maze Craze Environment in Python\nDESCRIPTION: Code snippet showing how to import the Maze Craze environment from the PettingZoo Atari collection.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/multi-agent-environments/maze_craze.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom pettingzoo.atari import maze_craze_v3\n```\n\n----------------------------------------\n\nTITLE: Importing Volleyball Pong Environment in Python\nDESCRIPTION: This code snippet shows how to import the Volleyball Pong environment from the PettingZoo Atari collection.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/multi-agent-environments/volleyball_pong.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom pettingzoo.atari import volleyball_pong_v2\n```\n\n----------------------------------------\n\nTITLE: Importing Ice Hockey Environment - Python\nDESCRIPTION: Code snippet showing how to import the Ice Hockey environment from PettingZoo's Atari collection.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/multi-agent-environments/ice_hockey.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom pettingzoo.atari import ice_hockey_v2\n```\n\n----------------------------------------\n\nTITLE: Importing Entombed Cooperative Environment in Python\nDESCRIPTION: This code snippet shows how to import the Entombed Cooperative environment from the PettingZoo Atari collection.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/multi-agent-environments/entombed_cooperative.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom pettingzoo.atari import entombed_cooperative_v3\n```\n\n----------------------------------------\n\nTITLE: Importing Video Checkers Environment in Python\nDESCRIPTION: Code snippet showing how to import the Video Checkers environment from PettingZoo's Atari collection. This environment is used for reinforcement learning with the Video Checkers Atari game.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/multi-agent-environments/video_checkers.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom pettingzoo.atari import video_checkers_v4\n```\n\n----------------------------------------\n\nTITLE: Initializing Volleyball Pong Environment with Custom Parameters in Python\nDESCRIPTION: This code demonstrates how to initialize the Volleyball Pong environment with a custom number of players. The num_players parameter must be either 2 or 4.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/multi-agent-environments/volleyball_pong.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nvolleyball_pong_v3.env(num_players=4)\n```\n\n----------------------------------------\n\nTITLE: Importing DoubleDunk Environment in Python\nDESCRIPTION: Code snippet showing how to import and create a DoubleDunk environment instance using Gymnasium.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/environments/double_dunk.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ngymnasium.make(\"ALE/DoubleDunk-v5\")\n```\n\n----------------------------------------\n\nTITLE: Importing Othello Environment in Python\nDESCRIPTION: This code snippet shows how to import and create an instance of the Othello Atari environment using Gymnasium.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/environments/othello.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ngymnasium.make(\"ALE/Othello-v5\")\n```\n\n----------------------------------------\n\nTITLE: ALE Environment TOC Structure\nDESCRIPTION: Table of contents structure for all available Atari environments in the Arcade Learning Environment.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/environments.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```{toctree}\n:hidden:\nenvironments/adventure\nenvironments/air_raid\nenvironments/alien\nenvironments/amidar\nenvironments/assault\nenvironments/asterix\nenvironments/asteroids\nenvironments/atlantis\nenvironments/atlantis2\nenvironments/backgammon\nenvironments/bank_heist\nenvironments/basic_math\nenvironments/battle_zone\nenvironments/beam_rider\nenvironments/berzerk\nenvironments/blackjack\nenvironments/bowling\nenvironments/boxing\nenvironments/breakout\nenvironments/carnival\nenvironments/casino\nenvironments/centipede\nenvironments/chopper_command\nenvironments/crazy_climber\nenvironments/crossbow\nenvironments/darkchambers\nenvironments/defender\nenvironments/demon_attack\nenvironments/donkey_kong\nenvironments/double_dunk\nenvironments/earthworld\nenvironments/elevator_action\nenvironments/enduro\nenvironments/entombed\nenvironments/et\nenvironments/fishing_derby\nenvironments/flag_capture\nenvironments/freeway\nenvironments/frogger\nenvironments/frostbite\nenvironments/galaxian\nenvironments/gopher\nenvironments/gravitar\nenvironments/hangman\nenvironments/haunted_house\nenvironments/hero\nenvironments/human_cannonball\nenvironments/ice_hockey\nenvironments/jamesbond\nenvironments/journey_escape\nenvironments/kaboom\nenvironments/kangaroo\nenvironments/keystone_kapers\nenvironments/king_kong\nenvironments/klax\nenvironments/koolaid\nenvironments/krull\nenvironments/kung_fu_master\nenvironments/laser_gates\nenvironments/lost_luggage\nenvironments/mario_bros\nenvironments/miniature_golf\nenvironments/montezuma_revenge\nenvironments/mr_do\nenvironments/ms_pacman\nenvironments/name_this_game\nenvironments/othello\nenvironments/pacman\nenvironments/phoenix\nenvironments/pitfall\nenvironments/pitfall2\nenvironments/pong\nenvironments/pooyan\nenvironments/private_eye\nenvironments/qbert\nenvironments/riverraid\nenvironments/road_runner\nenvironments/robotank\nenvironments/seaquest\nenvironments/sir_lancelot\nenvironments/skiing\nenvironments/solaris\nenvironments/space_invaders\nenvironments/space_war\nenvironments/star_gunner\nenvironments/superman\nenvironments/surround\nenvironments/tennis\nenvironments/tetris\nenvironments/tic_tac_toe_3d\nenvironments/time_pilot\nenvironments/trondead\nenvironments/turmoil\nenvironments/tutankham\nenvironments/up_n_down\nenvironments/venture\nenvironments/video_checkers\nenvironments/video_chess\nenvironments/video_cube\nenvironments/video_pinball\nenvironments/wizard_of_wor\nenvironments/word_zapper\nenvironments/yars_revenge\nenvironments/zaxxon\n```\n```\n\n----------------------------------------\n\nTITLE: Importing Darkchambers Atari Environment in Python\nDESCRIPTION: Code snippet demonstrating how to import the Darkchambers environment from the Arcade Learning Environment using Gymnasium.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/environments/darkchambers.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ngymnasium.make(\"ALE/Darkchambers-v5\")\n```\n\n----------------------------------------\n\nTITLE: Listing Python Dependencies for ALE Documentation\nDESCRIPTION: This code snippet lists the Python packages required for building the Arcade Learning Environment documentation. It includes Sphinx and its extensions, custom forks of sphinx-gallery and furo theme, and additional packages for multimedia support.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nsphinx\nsphinx-autobuild\nmyst-parser\ngit+https://github.com/sphinx-gallery/sphinx-gallery.git@4006662c8c1984453a247dc6d3df6260e5b00f4b#egg=sphinx_gallery\ngit+https://github.com/Farama-Foundation/Celshast#egg=furo\nmoviepy\npygame\nsphinx_github_changelog\n```\n\n----------------------------------------\n\nTITLE: Warlords Action Values\nDESCRIPTION: Action space constants for the Warlords environment showing the mapping between numeric values and game actions.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/multi-agent-environments/warlords.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nNOOP = 0\nFIRE = 1\nUP = 2\nRIGHT = 3\nLEFT = 4\nDOWN = 5\n```\n\n----------------------------------------\n\nTITLE: Importing BasicMath Atari Environment in Python\nDESCRIPTION: Code snippet showing how to import the BasicMath environment from Gymnasium. This creates an instance of the BasicMath Atari game with the default configuration.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/environments/basic_math.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ngymnasium.make(\"ALE/BasicMath-v5\")\n```\n\n----------------------------------------\n\nTITLE: Installing Library and CMake Configurations\nDESCRIPTION: Sets up installation rules for libraries, headers, and CMake configuration files on Unix systems.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/src/ale/CMakeLists.txt#2025-04-23_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif (UNIX AND BUILD_CPP_LIB)\n  include(GNUInstallDirs)\n  include(CMakePackageConfigHelpers)\n\n  install(TARGETS ale ale-lib\n          EXPORT ale-export\n          INCLUDES DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/${PROJECT_NAME}\n          RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}\n          LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}\n          ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR})\n\n  install(DIRECTORY ${CMAKE_CURRENT_LIST_DIR}/\n          DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/${PROJECT_NAME}\n          FILES_MATCHING\n          REGEX \"\\.h((pp)?|(xx?))$\"\n          REGEX \"os_dependent\\/.*(Win32)\\.(h|h(xx)?|h(pp)?|c(xx)?|c(pp)?)$\" EXCLUDE)\n\n  install(FILES ${CMAKE_CURRENT_BINARY_DIR}/version.hpp\n          DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/${PROJECT_NAME})\n\n  install(EXPORT ale-export\n          FILE ${PROJECT_NAME}-targets.cmake\n          NAMESPACE ${PROJECT_NAME}::\n          DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME})\n\n  write_basic_package_version_file(\n    ${PROJECT_NAME}-config-version.cmake\n    VERSION ${PACKAGE_VERSION}\n    COMPATIBILITY AnyNewerVersion)\n\n  configure_package_config_file(\n    ${PROJECT_SOURCE_DIR}/cmake/${PROJECT_NAME}-config.cmake.in\n    ${PROJECT_NAME}-config.cmake\n    INSTALL_DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME})\n\n  install(FILES \"${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}-config.cmake\"\n                \"${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}-config-version.cmake\"\n          DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Warlords Agent Configuration\nDESCRIPTION: Definition of the agents list used in the Warlords environment.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/multi-agent-environments/warlords.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nagents= ['first_0', 'second_0', 'third_0', 'fourth_0']\n```\n\n----------------------------------------\n\nTITLE: Importing Atlantis2 Atari Environment in Python\nDESCRIPTION: Code for importing the Atlantis2 Atari game environment using Gymnasium. This creates a standard environment with RGB observation space and discrete action space.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/environments/atlantis2.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ngymnasium.make(\"ALE/Atlantis2-v5\")\n```\n\n----------------------------------------\n\nTITLE: Importing IceHockey Environment in Python\nDESCRIPTION: This code snippet shows how to import the IceHockey environment using Gymnasium. It creates an instance of the ALE/IceHockey-v5 environment.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/environments/ice_hockey.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ngymnasium.make(\"ALE/IceHockey-v5\")\n```\n\n----------------------------------------\n\nTITLE: Quadrapong Agent Definition in Python\nDESCRIPTION: Definition of the agent names in the Quadrapong environment, showing the four available players.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/multi-agent-environments/quadrapong.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nagents= ['first_0', 'second_0', 'third_0', 'fourth_0']\n```\n\n----------------------------------------\n\nTITLE: Joust Environment Agent Configuration\nDESCRIPTION: Agent configuration string showing the identifier format for the two players in the Joust environment.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/multi-agent-environments/joust.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nagents= ['first_0', 'second_0']\n```\n\n----------------------------------------\n\nTITLE: Configuring ROM Sources for ALE Target in CMake\nDESCRIPTION: This CMake snippet includes the 'supported' subdirectory and adds ROM management source files to the 'ale' target. The files handle ROM settings, utilities, and ROM definitions for the Arcade Learning Environment.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/src/ale/games/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(supported)\ntarget_sources(ale\n  PRIVATE\n    Roms.cpp\n    RomSettings.cpp\n    RomUtils.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Environment Agent Configuration\nDESCRIPTION: Agent configuration string showing the identifiers for the two players in the competitive environment.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/multi-agent-environments/entombed_competitive.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nagents= ['first_0', 'second_0']\n```\n\n----------------------------------------\n\nTITLE: Environment Configuration Parameters\nDESCRIPTION: Data structure showing observation space and action space parameters for the Centipede environment.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/environments/centipede.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nAction Space = Discrete(18)\nObservation Space = Box(0, 255, (210, 160, 3), uint8)\n```\n\n----------------------------------------\n\nTITLE: Importing Entombed Environment in Gymnasium\nDESCRIPTION: Code snippet showing how to import the Entombed environment from the Atari Learning Environment using Gymnasium.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/environments/entombed.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ngymnasium.make(\"ALE/Entombed-v5\")\n```\n\n----------------------------------------\n\nTITLE: Surround Environment Agent Configuration\nDESCRIPTION: Agent configuration showing the list of agent identifiers used in the environment\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/multi-agent-environments/surround.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nagents= ['first_0', 'second_0']\n```\n\n----------------------------------------\n\nTITLE: Surround Action Space Constants\nDESCRIPTION: Constants defining the available actions in the Surround environment, including NOOP, FIRE, and directional movements\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/multi-agent-environments/surround.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n0     # NOOP\n1     # FIRE\n2     # UP\n3     # RIGHT\n4     # LEFT\n5     # DOWN\n```\n\n----------------------------------------\n\nTITLE: Joust Action Space Constants\nDESCRIPTION: Constants representing the possible actions in the Joust environment, from NOOP to directional movements with fire combinations.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/multi-agent-environments/joust.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n0     # NOOP\n1     # FIRE\n2     # UP\n3     # RIGHT\n4     # LEFT\n5     # DOWN\n6     # UPRIGHT\n7     # UPLEFT\n8     # DOWNRIGHT\n9     # DOWNLEFT\n10    # UPFIRE\n11    # RIGHTFIRE\n12    # LEFTFIRE\n13    # DOWNFIRE\n14    # UPRIGHTFIRE\n15    # UPLEFTFIRE\n16    # DOWNRIGHTFIRE\n17    # DOWNLEFTFIRE\n```\n\n----------------------------------------\n\nTITLE: Inserting GPL License Notice in Source Files (Plaintext)\nDESCRIPTION: A template for adding the GNU General Public License notice to the start of each source file in a program. It includes placeholders for the program name, copyright year, and author name.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/LICENSE.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\none line to give the program's name and an idea of what it does.\nCopyright (C) yyyy  name of author\n\nThis program is free software; you can redistribute it and/or\nmodify it under the terms of the GNU General Public License\nas published by the Free Software Foundation; either version 2\nof the License, or (at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program; if not, write to the Free Software\nFoundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n```\n\n----------------------------------------\n\nTITLE: Building C++ and Python Libraries\nDESCRIPTION: Configures the build targets for C++ and Python library versions of ALE.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/src/ale/CMakeLists.txt#2025-04-23_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif (BUILD_CPP_LIB OR BUILD_PYTHON_LIB)\n  add_library(ale-lib ale_interface.cpp)\n  set_target_properties(ale-lib PROPERTIES OUTPUT_NAME ale)\n  target_link_libraries(ale-lib PUBLIC ale)\nendif()\n\nif (BUILD_PYTHON_LIB)\n  add_subdirectory(python)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Environment Action Space\nDESCRIPTION: Table structure showing the mapping between action values and their meanings in the Carnival environment, represented as a discrete space of 6 possible actions.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/environments/carnival.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Value   | Meaning   | Value   | Meaning     | Value   | Meaning    |\n|---------|-----------|---------|-------------|---------|------------|\n| `0`     | `NOOP`    | `1`     | `FIRE`      | `2`     | `RIGHT`    |\n| `3`     | `LEFT`    | `4`     | `RIGHTFIRE` | `5`     | `LEFTFIRE` |\n```\n\n----------------------------------------\n\nTITLE: Including HTML Environment List\nDESCRIPTION: Raw HTML inclusion directive for displaying the list of environments.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/environments.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n```{raw} html\n   :file: environments/list.html\n```\n```\n\n----------------------------------------\n\nTITLE: Displaying GPL Notice in Interactive Programs (Plaintext)\nDESCRIPTION: An example of how to display a short GPL notice when an interactive program starts. It includes placeholders for the program name, version, copyright year, and author name.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/LICENSE.md#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nGnomovision version 69, Copyright (C) year name of author\nGnomovision comes with ABSOLUTELY NO WARRANTY; for details\ntype `show w'.  This is free software, and you are welcome\nto redistribute it under certain conditions; type `show c'\nfor details.\n```\n\n----------------------------------------\n\nTITLE: Getting Audio Data in ALE\nDESCRIPTION: Shows how to retrieve audio observation data from the environment.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/cpp-interface.md#2025-04-23_snippet_6\n\nLANGUAGE: cpp\nCODE:\n```\nale.getAudio()\n```\n\n----------------------------------------\n\nTITLE: ALE Citation in BibTeX Format\nDESCRIPTION: BibTeX entry for citing the original ALE paper in academic research.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/README.md#2025-04-23_snippet_6\n\nLANGUAGE: bibtex\nCODE:\n```\n@Article{bellemare13arcade,\n    author = {{Bellemare}, M.~G. and {Naddaf}, Y. and {Veness}, J. and {Bowling}, M.},\n    title = {The Arcade Learning Environment: An Evaluation Platform for General Agents},\n    journal = {Journal of Artificial Intelligence Research},\n    year = \"2013\",\n    month = \"jun\",\n    volume = \"47\",\n    pages = \"253--279\",\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Skiing Environment in Python\nDESCRIPTION: Code snippet for importing the Skiing environment from the Arcade Learning Environment using Gymnasium.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/environments/skiing.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ngymnasium.make(\"ALE/Skiing-v5\")\n```\n\n----------------------------------------\n\nTITLE: FlagCapture RAM-based Environment Initialization\nDESCRIPTION: Alternative initialization for the RAM-based variant of FlagCapture that uses RAM observations instead of RGB images. This variant maintains the same action space but uses a different observation format.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/environments/flag_capture.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ngymnasium.make(\"ALE/FlagCapture-ram-v5\")\n```\n\n----------------------------------------\n\nTITLE: Python Source Files and Symlink Setup\nDESCRIPTION: Copies Python source files to the build directory and creates a symlink for proper module discovery during testing.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/src/ale/python/CMakeLists.txt#2025-04-23_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nfile(COPY ${CMAKE_CURRENT_SOURCE_DIR}/\n     DESTINATION ${CMAKE_CURRENT_BINARY_DIR}\n     FILES_MATCHING\n        PATTERN \"**/*.py\")\n\nadd_custom_command(TARGET ale-py POST_BUILD\n    COMMAND ${CMAKE_COMMAND} -E create_symlink\n        ${CMAKE_CURRENT_BINARY_DIR}\n        ${CMAKE_BINARY_DIR}/src/ale_py)\n```\n\n----------------------------------------\n\nTITLE: Importing WordZapper Atari Environment in Gymnasium\nDESCRIPTION: Code snippet showing how to import the WordZapper Atari environment using Gymnasium's make function. This creates an instance of the environment with the default configuration.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/environments/word_zapper.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ngymnasium.make(\"ALE/WordZapper-v5\")\n```\n\n----------------------------------------\n\nTITLE: Installing Documentation Dependencies for ALE\nDESCRIPTION: Command to install required packages for building the documentation using pip.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install -r docs/requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Importing Adventure Environment in Python\nDESCRIPTION: Code snippet showing how to import and create the Adventure environment instance using Gymnasium.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/environments/adventure.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ngymnasium.make(\"ALE/Adventure-v5\")\n```\n\n----------------------------------------\n\nTITLE: Building ALE Documentation Once with Sphinx\nDESCRIPTION: Commands to navigate to the docs directory and build the documentation using make html.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd docs\nmake html\n```\n\n----------------------------------------\n\nTITLE: Importing Pitfall2 Environment in Python\nDESCRIPTION: This code snippet shows how to import and create the Pitfall2 environment using Gymnasium. It demonstrates the standard way to initialize the environment for use in reinforcement learning tasks.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/environments/pitfall2.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ngymnasium.make(\"ALE/Pitfall2-v5\")\n```\n\n----------------------------------------\n\nTITLE: Setting up Python and pybind11 Dependencies in CMake\nDESCRIPTION: Configures Python3 requirements and fetches pybind11 if not found in the system. Sets up necessary components for Python module development.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/src/ale/python/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(Python3 COMPONENTS Interpreter Development.Module REQUIRED)\n\nset(PYBIND11_VER 2.13.1)\n\ninclude(FetchContent)\nset(PYBIND11_FINDPYTHON ON)\nfind_package(pybind11 ${PYBIND11_VER} QUIET)\n\nif(NOT pybind11_FOUND)\n    FetchContent_Declare(\n        pybind11\n        GIT_REPOSITORY https://github.com/pybind/pybind11\n        GIT_TAG v${PYBIND11_VER})\n    FetchContent_MakeAvailable(pybind11)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Auto-rebuilding ALE Documentation with Sphinx\nDESCRIPTION: Commands to navigate to the docs directory and use sphinx-autobuild to automatically rebuild the documentation when changes are detected.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd docs\nsphinx-autobuild -b html . _build\n```\n\n----------------------------------------\n\nTITLE: Action Value Constants\nDESCRIPTION: Constants defining the action space mapping for player controls including movement and fire actions.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/multi-agent-environments/entombed_competitive.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n0     # NOOP\n1     # FIRE\n2     # UP\n3     # RIGHT\n4     # LEFT\n5     # DOWN\n6     # UPRIGHT\n7     # UPLEFT\n8     # DOWNRIGHT\n9     # DOWNLEFT\n10    # UPFIRE\n11    # RIGHTFIRE\n12    # LEFTFIRE\n13    # DOWNFIRE\n14    # UPRIGHTFIRE\n15    # UPLEFTFIRE\n16    # DOWNRIGHTFIRE\n17    # DOWNLEFTFIRE\n```\n\n----------------------------------------\n\nTITLE: BibTeX Citation for ALE Sticky Actions and Game Flavors Paper\nDESCRIPTION: BibTeX entry for citing the paper on sticky actions and game flavors in the Arcade Learning Environment by Machado et al., published in the Journal of Artificial Intelligence Research in 2018.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/citing.md#2025-04-23_snippet_1\n\nLANGUAGE: bibtex\nCODE:\n```\n@Article{machado18arcade,\n  author = {Marlos C. Machado and Marc G. Bellemare and Erik Talvitie and Joel Veness and Matthew J. Hausknecht and Michael Bowling},\n  title = {Revisiting the Arcade Learning Environment: Evaluation Protocols and Open Problems for General Agents},\n  journal = {Journal of Artificial Intelligence Research},\n  volume = {61},\n  pages = {523--562},\n  year = {2018}\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Casino Atari Environment in Gymnasium\nDESCRIPTION: Code snippet showing how to import the Casino environment from the Atari Learning Environment (ALE) using Gymnasium.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/environments/casino.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ngymnasium.make(\"ALE/Casino-v5\")\n```\n\n----------------------------------------\n\nTITLE: Configuring SDL Support\nDESCRIPTION: Sets up optional SDL2 support with dynamic loading capability and necessary compiler definitions.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/src/ale/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif(SDL_SUPPORT)\n  option(SDL_DYNLOAD \"Dynamically load SDL\" OFF)\n  find_package(SDL2 CONFIG REQUIRED)\n\n  if(VCPKG_TOOLCHAIN)\n    find_path(SDL2_INCLUDE_DIRS SDL.h PATH_SUFFIXES SDL2)\n  endif()\n\n  target_compile_definitions(ale\n    PUBLIC\n      ALE_SDL_SUPPORT\n    PRIVATE\n      SDL_SUPPORT\n      $<$<BOOL:${SDL_DYNLOAD}>:SDL_DYNLOAD>)\n  target_link_libraries(ale PRIVATE $<$<NOT:$<BOOL:${SDL_DYNLOAD}>>:SDL2::SDL2>)\n  target_include_directories(ale PRIVATE ${SDL2_INCLUDE_DIRS})\nendif()\n```\n\n----------------------------------------\n\nTITLE: ALE with Sticky Actions Citation in BibTeX Format\nDESCRIPTION: BibTeX entry for citing the paper about ALE with sticky actions and game flavor modifications.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/README.md#2025-04-23_snippet_7\n\nLANGUAGE: bibtex\nCODE:\n```\n@Article{machado18arcade,\n    author = {Marlos C. Machado and Marc G. Bellemare and Erik Talvitie and Joel Veness and Matthew J. Hausknecht and Michael Bowling},\n    title = {Revisiting the Arcade Learning Environment: Evaluation Protocols and Open Problems for General Agents},\n    journal = {Journal of Artificial Intelligence Research},\n    volume = {61},\n    pages = {523--562},\n    year = {2018}\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Stella ASCII Art and License Information\nDESCRIPTION: This snippet shows the ASCII art logo for Stella, an Atari 2600 VCS Emulator, followed by copyright and license information. It specifies the GNU General Public License version 2 and includes disclaimers.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/ACKNOWLEDGMENTS.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n===========================================================================\n\n   SSSS    tt          lll  lll\n  SS  SS   tt           ll   ll\n  SS     tttttt  eeee   ll   ll   aaaa\n   SSSS    tt   ee  ee  ll   ll      aa\n      SS   tt   eeeeee  ll   ll   aaaaa  --  \"An Atari 2600 VCS Emulator\"\n  SS  SS   tt   ee      ll   ll  aa  aa\n   SSSS     ttt  eeeee llll llll  aaaaa\n\n===========================================================================\n                  License Information and Copyright Notice\n===========================================================================\n\nCopyright (C) 1995-2012 Bradford W. Mott, Stephen Anthony and the\nStella Team\n\n===========================================================================\nThe Arcade Learning Environment\n===========================================================================\n\nCopyright (C) 2009-2012 Yavar Naddaf, Marc G. Bellemare, Joel Veness and the\nArtificial Intelligence Laboratory at the University of Alberta\n\n\nThis program is free software; you can redistribute it and/or modify it\nunder the terms of the GNU General Public License as published by the Free\nSoftware Foundation; either version 2 of the License, or any later version.\n\nYou should have received a copy of the GNU General Public License version 2\nalong with this program (License.txt); if not, write to the Free Software\nFoundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111, USA.\n\nThis program is distributed in the hope that it will be useful, but WITHOUT\nANY WARRANTY. IN NO EVENT SHALL THE AUTHORS OR DISTRIBUTORS BE LIABLE TO\nANY PARTY FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL\nDAMAGES ARISING OUT OF THE USE OF THIS SOFTWARE, ITS DOCUMENTATION, OR ANY\nDERIVATIVES THEREOF, EVEN IF THE AUTHORS HAVE BEEN ADVISED OF THE\nPOSSIBILITY OF SUCH DAMAGE.\n\nTHE AUTHORS AND DISTRIBUTORS SPECIFICALLY DISCLAIM ANY WARRANTIES,\nINCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE, AND NON-INFRINGEMENT. THIS SOFTWARE IS\nPROVIDED ON AN \"AS IS\" BASIS, AND THE AUTHORS AND DISTRIBUTORS HAVE NO\nOBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR\nMODIFICATIONS.\n```\n\n----------------------------------------\n\nTITLE: Importing Entombed Competitive Environment in Python\nDESCRIPTION: Code snippet showing how to import the Entombed competitive environment from PettingZoo's Atari collection.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/multi-agent-environments/entombed_competitive.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom pettingzoo.atari import entombed_competitive_v3\n```\n\n----------------------------------------\n\nTITLE: Configuring Source Files for ALE Target in CMake\nDESCRIPTION: Specifies the C++ source files to be compiled as part of the 'ale' target. Includes core environment files and rendering components like phosphor blend and state management.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/src/ale/environment/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_sources(ale\n  PRIVATE\n    ale_state.cpp\n    phosphor_blend.cpp\n    stella_environment.cpp\n    stella_environment_wrapper.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: SDL Dynamic Loading Configuration\nDESCRIPTION: Configures SDL2 dynamic loading support for wheel distribution, including rpath settings and library copying for cross-platform compatibility.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/src/ale/python/CMakeLists.txt#2025-04-23_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif (SDL_SUPPORT AND SDL_DYNLOAD)\n    set_target_properties(ale-py PROPERTIES\n        INSTALL_RPATH_USE_ORIGIN TRUE\n        BUILD_WITH_INSTALL_RPATH TRUE\n        SKIP_BUILD_RPATH FALSE\n        INSTALL_RPATH_USE_LINK_PATH FALSE\n        MACOSX_RPATH TRUE\n        INSTALL_RPATH\n        \"$<$<PLATFORM_ID:Darwin>:@loader_path>$<$<PLATFORM_ID:Linux>:\\$ORIGIN>\")\n\n    target_compile_definitions(ale\n        PRIVATE SDL2_LIBRARY_NAME=\"$<TARGET_FILE_NAME:SDL2::SDL2>\")\n    add_custom_command(TARGET ale-py POST_BUILD\n        COMMAND ${CMAKE_COMMAND} -E copy_if_different\n            $<TARGET_FILE:SDL2::SDL2>\n            $<TARGET_FILE_DIR:ale-py>)\nendif()\n```\n\n----------------------------------------\n\nTITLE: MSVC-Specific Output Directory Configuration\nDESCRIPTION: Handles MSVC-specific path configuration to ensure proper output directory structure. Uses generator expressions to prevent Debug/Release suffix addition.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/src/ale/python/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif (MSVC)\n  set_target_properties(ale-py PROPERTIES\n    LIBRARY_OUTPUT_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}$<0:>\n    RUNTIME_OUTPUT_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}$<0:>\n    ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}$<0:>)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Changelog Display for ALE with GitHub and PyPI Sources in RST\nDESCRIPTION: RST directive that configures the display of ALE release notes by fetching information from GitHub releases and PyPI. This snippet is embedded in a markdown document using an eval-rst block.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/release_notes/index.md#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. changelog::\n    :github: https://github.com/Farama-Foundation/Arcade-Learning-Environment/releases\n    :pypi: https://pypi.org/project/ale-py/\n    :changelog-url:\n```\n\n----------------------------------------\n\nTITLE: Continuous ALE (CALE) Citation in BibTeX Format\nDESCRIPTION: BibTeX entry for citing the Continuous Arcade Learning Environment paper when using continuous action spaces.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/README.md#2025-04-23_snippet_8\n\nLANGUAGE: bibtex\nCODE:\n```\n@article{farebrother2024cale,\n  title={C{ALE}: Continuous Arcade Learning Environment},\n  author={Jesse Farebrother and Pablo Samuel Castro},\n  journal={Advances in Neural Information Processing Systems},\n  year={2024}\n}\n```\n\n----------------------------------------\n\nTITLE: BibTeX Citation for Original ALE Paper\nDESCRIPTION: BibTeX entry for citing the original Arcade Learning Environment paper by Bellemare et al., published in the Journal of Artificial Intelligence Research in 2013.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/citing.md#2025-04-23_snippet_0\n\nLANGUAGE: bibtex\nCODE:\n```\n@Article{bellemare13arcade,\n  author = {{Bellemare}, M.~G. and {Naddaf}, Y. and {Veness}, J. and {Bowling}, M.},\n  title = {The Arcade Learning Environment: An Evaluation Platform for General Agents},\n  journal = {Journal of Artificial Intelligence Research},\n  year = \"2013\",\n  month = \"jun\",\n  volume = \"47\",\n  pages = \"253--279\",\n}\n```\n\n----------------------------------------\n\nTITLE: Including HTML file in Markdown documentation\nDESCRIPTION: This code snippet uses a raw HTML directive in Markdown to include an external HTML file named 'complete_list.html'. This technique is commonly used in documentation systems to embed complex HTML content within Markdown files.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/docs/environments/complete_list.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```{raw} html\n:file: complete_list.html\n```\n```\n\n----------------------------------------\n\nTITLE: Sample Copyright Disclaimer for GPL Programs (Plaintext)\nDESCRIPTION: A template for a copyright disclaimer that can be used by employers or organizations to disclaim copyright interest in a GPL-licensed program. It includes placeholders for the organization name, program name, and author name.\nSOURCE: https://github.com/farama-foundation/arcade-learning-environment/blob/master/LICENSE.md#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nYoyodyne, Inc., hereby disclaims all copyright\ninterest in the program `Gnomovision'\n(which makes passes at compilers) written\nby James Hacker.\n\nsignature of Ty Coon, 1 April 1989\nTy Coon, President of Vice\n```"
  }
]