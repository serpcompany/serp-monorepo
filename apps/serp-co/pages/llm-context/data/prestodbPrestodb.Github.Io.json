[
  {
    "owner": "prestodb",
    "repo": "prestodb.github.io",
    "content": "TITLE: Multiple Subqueries in WITH Clause in Presto SQL\nDESCRIPTION: Shows how to use multiple subqueries in a WITH clause and join them in the main query.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/select.rst#2025-04-10_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nWITH\n  t1 AS (SELECT a, MAX(b) AS b FROM x GROUP BY a),\n  t2 AS (SELECT a, AVG(d) AS d FROM y GROUP BY a)\nSELECT t1.*, t2.*\nFROM t1\nJOIN t2 ON t1.a = t2.a;\n```\n\n----------------------------------------\n\nTITLE: Basic SELECT Statement Syntax in Presto SQL\nDESCRIPTION: Defines the complete syntax for a SELECT statement in Presto, including optional clauses like WITH, FROM, WHERE, GROUP BY, HAVING, set operations, ORDER BY, OFFSET, and LIMIT.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/select.rst#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n[ WITH with_query [, ...] ]\nSELECT [ ALL | DISTINCT ] select_expr [, ...]\n[ FROM from_item [, ...] ]\n[ WHERE condition ]\n[ GROUP BY [ ALL | DISTINCT ] grouping_element [, ...] ]\n[ HAVING condition]\n[ { UNION | INTERSECT | EXCEPT } [ ALL | DISTINCT ] select ]\n[ ORDER BY expression [ ASC | DESC ] [, ...] ]\n[ OFFSET count [ { ROW | ROWS } ] ]\n[ { LIMIT [ count | ALL ] } ]\n```\n\n----------------------------------------\n\nTITLE: Basic SELECT Statement Syntax in Presto SQL\nDESCRIPTION: Defines the complete syntax for a SELECT statement in Presto, including optional clauses like WITH, FROM, WHERE, GROUP BY, HAVING, set operations, ORDER BY, OFFSET, and LIMIT.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/select.rst#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n[ WITH with_query [, ...] ]\nSELECT [ ALL | DISTINCT ] select_expr [, ...]\n[ FROM from_item [, ...] ]\n[ WHERE condition ]\n[ GROUP BY [ ALL | DISTINCT ] grouping_element [, ...] ]\n[ HAVING condition]\n[ { UNION | INTERSECT | EXCEPT } [ ALL | DISTINCT ] select ]\n[ ORDER BY expression [ ASC | DESC ] [, ...] ]\n[ OFFSET count [ { ROW | ROWS } ] ]\n[ { LIMIT [ count | ALL ] } ]\n```\n\n----------------------------------------\n\nTITLE: WITH Clause with Multiple Subqueries\nDESCRIPTION: Example demonstrating how to use multiple named subqueries in a WITH clause, joining them in the main query.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/sql/select.rst.txt#2025-04-10_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nWITH\n  t1 AS (SELECT a, MAX(b) AS b FROM x GROUP BY a),\n  t2 AS (SELECT a, AVG(d) AS d FROM y GROUP BY a)\nSELECT t1.*, t2.*\nFROM t1\nJOIN t2 ON t1.a = t2.a;\n```\n\n----------------------------------------\n\nTITLE: JOIN USING Clause\nDESCRIPTION: Demonstrates simplified join syntax using the USING clause when join columns have identical names.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/sql/select.rst.txt#2025-04-10_snippet_30\n\nLANGUAGE: sql\nCODE:\n```\nSELECT *\nFROM table_1\nJOIN table_2\nUSING (key_A, key_B)\n```\n\n----------------------------------------\n\nTITLE: Transforming Arrays in Presto SQL\nDESCRIPTION: The transform function applies a given function to each element of an array, returning a new array with the results. It can handle various data types and null values.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/array.rst#2025-04-10_snippet_12\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT transform(ARRAY [], x -> x + 1); -- []\nSELECT transform(ARRAY [5, 6], x -> x + 1); -- [6, 7]\nSELECT transform(ARRAY [5, NULL, 6], x -> COALESCE(x, 0) + 1); -- [6, 1, 7]\nSELECT transform(ARRAY ['x', 'abc', 'z'], x -> x || '0'); -- ['x0', 'abc0', 'z0']\nSELECT transform(ARRAY [ARRAY [1, NULL, 2], ARRAY[3, NULL]], a -> filter(a, x -> x IS NOT NULL)); -- [[1, 2], [3]]\n```\n\n----------------------------------------\n\nTITLE: JOIN with USING Clause in Presto SQL\nDESCRIPTION: The USING clause simplifies join syntax when both tables share column names for join keys. The output includes one copy of the join key columns followed by remaining columns from each table.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/select.rst#2025-04-10_snippet_30\n\nLANGUAGE: sql\nCODE:\n```\nSELECT *\nFROM table_1 \nJOIN table_2\nON table_1.key_A = table_2.key_A AND table_1.key_B = table_2.key_B\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT *\nFROM table_1\nJOIN table_2\nUSING (key_A, key_B)\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT *\nFROM (\n    VALUES\n        (1, 3, 10),\n        (2, 4, 20)\n) AS table_1 (key_A, key_B, y1)\nLEFT JOIN (\n    VALUES\n        (1, 3, 100),\n        (2, 4, 200)\n) AS table_2 (key_A, key_B, y2) \nUSING (key_A, key_B)\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT key_A, key_B, table_1.*, table_2.*\nFROM (\n    VALUES\n        (1, 3, 10),\n        (2, 4, 20)\n) AS table_1 (key_A, key_B, y1)\nLEFT JOIN (\n    VALUES\n        (1, 3, 100),\n        (2, 4, 200)\n) AS table_2 (key_A, key_B, y2) \nUSING (key_A, key_B)\n```\n\n----------------------------------------\n\nTITLE: JOIN Syntax in Presto SQL SELECT Statement\nDESCRIPTION: Defines the syntax for joining tables in a SELECT statement, including join conditions and using clauses.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/select.rst#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nfrom_item join_type from_item [ ON join_condition | USING ( join_column [, ...] ) ]\n```\n\n----------------------------------------\n\nTITLE: Combined Grouping Expressions with Equivalent GROUPING SETS\nDESCRIPTION: Final equivalent form showing how multiple grouping expressions combine into a single GROUPING SETS with the cross product of all specified grouping sets.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/sql/select.rst.txt#2025-04-10_snippet_19\n\nLANGUAGE: sql\nCODE:\n```\nSELECT origin_state, destination_state, origin_zip, sum(package_weight)\nFROM shipping\nGROUP BY GROUPING SETS (\n    (origin_state, destination_state, origin_zip),\n    (origin_state, destination_state));\n```\n\n----------------------------------------\n\nTITLE: Basic Extract Function Usage in Presto SQL\nDESCRIPTION: Core extract function that returns a specified field from a date/time value. Supports various fields like YEAR, QUARTER, MONTH, etc. Returns a bigint value.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/datetime.rst#2025-04-10_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nextract(field FROM x) -> bigint\n```\n\n----------------------------------------\n\nTITLE: Preserving Field Names when Casting ROW to JSON in Presto\nDESCRIPTION: Demonstrates how to preserve field names when casting from ROW to JSON by setting the session property field_names_in_json_cast_enabled to true. Shows the difference in output format.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/json.rst#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT CAST(CAST(ROW(123, 'abc', true) AS ROW(v1 BIGINT, v2 VARCHAR, v3 BOOLEAN)) AS JSON);\n```\n\n----------------------------------------\n\nTITLE: Creating a Managed Hive Table in Presto\nDESCRIPTION: Creates a new Hive table named 'page_views' in the 'web' schema. The table uses ORC file format, is partitioned by date and country, and bucketed by user_id into 50 buckets. This example shows how to define a complex table structure with partitioning and bucketing.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/hive.rst#2025-04-10_snippet_15\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE hive.web.page_views (\n  view_time timestamp,\n  user_id bigint,\n  page_url varchar,\n  ds date,\n  country varchar\n)\nWITH (\n  format = 'ORC',\n  partitioned_by = ARRAY['ds', 'country'],\n  bucketed_by = ARRAY['user_id'],\n  bucket_count = 50\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Aggregation Function 'avg_double' in Java for Presto\nDESCRIPTION: This code shows how to implement an aggregation function 'avg_double' that computes the average of a DOUBLE column. It demonstrates the use of AccumulatorState and the input and combine functions.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/develop/functions.rst.txt#2025-04-10_snippet_6\n\nLANGUAGE: java\nCODE:\n```\n@AggregationFunction(\"avg_double\")\npublic class AverageAggregation\n{\n    @InputFunction\n    public static void input(LongAndDoubleState state, @SqlType(StandardTypes.DOUBLE) double value)\n    {\n        state.setLong(state.getLong() + 1);\n        state.setDouble(state.getDouble() + value);\n    }\n\n    @CombineFunction\n    public static void combine(LongAndDoubleState state, LongAndDoubleState otherState)\n    {\n        state.setLong(state.getLong() + otherState.getLong());\n        state.setDouble(state.getDouble() + otherState.getDouble());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Array Concatenation in Presto SQL\nDESCRIPTION: Shows different ways to concatenate arrays using the || operator, including array-to-array and element-to-array concatenation.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/array.rst#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT ARRAY [1] || ARRAY [2];\nSELECT ARRAY [1] || 2;\nSELECT 2 || ARRAY [1];\n```\n\n----------------------------------------\n\nTITLE: Extracting Data from JSON with JSONPath in Presto\nDESCRIPTION: Examples of extracting nested data from JSON documents using json_extract with JSONPath expressions. The result is returned as a JSON string.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/json.rst.txt#2025-04-10_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nSELECT json_extract(json, '$.store.book');\n```\n\n----------------------------------------\n\nTITLE: UNNEST with Single Array Column in Presto SQL\nDESCRIPTION: UNNEST expands an array into a relation with a single column. This example shows how to unnest an array column 'scores' from the 'tests' table.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/select.rst#2025-04-10_snippet_24\n\nLANGUAGE: sql\nCODE:\n```\nSELECT student, score\nFROM tests\nCROSS JOIN UNNEST(scores) AS t (score);\n```\n\n----------------------------------------\n\nTITLE: CREATE TABLE Statement Syntax in Presto SQL\nDESCRIPTION: The complete syntax for the CREATE TABLE statement in Presto, showing all available options including column definitions, constraints, table properties, and the LIKE clause for referencing existing tables.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/create-table.rst#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE [ IF NOT EXISTS ]\ntable_name (\n  { column_name data_type [NOT NULL] [ COMMENT comment ] [ WITH ( property_name = expression [, ...] ) ]\n  | LIKE existing_table_name [ { INCLUDING | EXCLUDING } PROPERTIES ]\n  | [ CONSTRAINT constraint_name ] { PRIMARY KEY | UNIQUE } ( { column_name [, ...] } ) [ { ENABLED | DISABLED } ] [ [ NOT ] RELY ] [ [ NOT ] ENFORCED ] }\n  [, ...]\n)\n[ COMMENT table_comment ]\n[ WITH ( property_name = expression [, ...] ) ]\n```\n\n----------------------------------------\n\nTITLE: Extracting All Matches with regexp_extract_all in Presto SQL\nDESCRIPTION: Demonstrates the usage of regexp_extract_all function to return an array of all substrings matched by a regular expression pattern in a string.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/regexp.rst#2025-04-10_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT regexp_extract_all('1a 2b 14m', '\\d+'); -- [1, 2, 14]\n```\n\n----------------------------------------\n\nTITLE: Casting from JSON to Various Data Types in Presto\nDESCRIPTION: Examples of casting JSON values to primitive types, arrays, maps, and row types. Shows how null values are handled and demonstrates the behavior for nested data structures.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/json.rst#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT CAST(JSON 'null' AS VARCHAR); -- NULL\nSELECT CAST(JSON '1' AS INTEGER); -- 1\nSELECT CAST(JSON '9223372036854775807' AS BIGINT); -- 9223372036854775807\nSELECT CAST(JSON '\"abc\"' AS VARCHAR); -- abc\nSELECT CAST(JSON 'true' AS BOOLEAN); -- true\nSELECT CAST(JSON '1.234' AS DOUBLE); -- 1.234\nSELECT CAST(JSON '[1,23,456]' AS ARRAY(INTEGER)); -- [1, 23, 456]\nSELECT CAST(JSON '[1,null,456]' AS ARRAY(INTEGER)); -- [1, NULL, 456]\nSELECT CAST(JSON '[[1,23],[456]]' AS ARRAY(ARRAY(INTEGER))); -- [[1, 23], [456]]\nSELECT CAST(JSON '{\"k1\":1,\"k2\":23,\"k3\":456}' AS MAP(VARCHAR, INTEGER)); -- {k1=1, k2=23, k3=456}\nSELECT CAST(JSON '{\"v1\":123,\"v2\":\"abc\",\"v3\":true}' AS ROW(v1 BIGINT, v2 VARCHAR, v3 BOOLEAN)); -- {v1=123, v2=abc, v3=true}\nSELECT CAST(JSON '[123,\"abc\",true]' AS ROW(v1 BIGINT, v2 VARCHAR, v3 BOOLEAN)); -- {v1=123, v2=abc, v3=true}\n```\n\n----------------------------------------\n\nTITLE: SELECT Statement Syntax in Presto SQL\nDESCRIPTION: The complete syntax for the SELECT statement in Presto SQL, including optional clauses for WITH, FROM, WHERE, GROUP BY, HAVING, set operations, ORDER BY, OFFSET, and LIMIT.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/sql/select.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n[ WITH with_query [, ...] ]\nSELECT [ ALL | DISTINCT ] select_expr [, ...]\n[ FROM from_item [, ...] ]\n[ WHERE condition ]\n[ GROUP BY [ ALL | DISTINCT ] grouping_element [, ...] ]\n[ HAVING condition]\n[ { UNION | INTERSECT | EXCEPT } [ ALL | DISTINCT ] select ]\n[ ORDER BY expression [ ASC | DESC ] [, ...] ]\n[ OFFSET count [ { ROW | ROWS } ] ]\n[ { LIMIT [ count | ALL ] } ]\n```\n\n----------------------------------------\n\nTITLE: Extracting Data from JSON with JSONPath in Presto\nDESCRIPTION: Examples of extracting nested data from JSON documents using json_extract with JSONPath expressions. The result is returned as a JSON string.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/json.rst.txt#2025-04-10_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nSELECT json_extract(json, '$.store.book');\n```\n\n----------------------------------------\n\nTITLE: Configuring Max Memory Per Node for Queries in Presto\nDESCRIPTION: Sets the maximum amount of user memory a query can use on a worker node. When this limit is reached on any worker, the query will be killed.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/admin/properties.rst#2025-04-10_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nquery.max-memory-per-node = JVM max memory * 0.1\n```\n\n----------------------------------------\n\nTITLE: JOIN Syntax in Presto SQL\nDESCRIPTION: Syntax for joining tables in the FROM clause of a Presto SQL query, including join conditions using ON or USING clauses.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/sql/select.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nfrom_item join_type from_item [ ON join_condition | USING ( join_column [, ...] ) ]\n```\n\n----------------------------------------\n\nTITLE: INTERSECT Example in Presto SQL\nDESCRIPTION: Shows how INTERSECT operation returns only rows present in both result sets.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/select.rst#2025-04-10_snippet_18\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM (VALUES 13, 42)\nINTERSECT\nSELECT 13;\n```\n\n----------------------------------------\n\nTITLE: Using LIMIT Clause in Presto SQL\nDESCRIPTION: The LIMIT clause restricts the number of rows in a query result set. It can be combined with OFFSET to implement pagination. LIMIT ALL is equivalent to omitting the LIMIT clause entirely.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/select.rst#2025-04-10_snippet_21\n\nLANGUAGE: sql\nCODE:\n```\nSELECT orderdate FROM orders LIMIT 5;\n```\n\n----------------------------------------\n\nTITLE: Setting Iceberg Table Properties\nDESCRIPTION: Example of modifying table properties for an Iceberg table using ALTER TABLE SET PROPERTIES. Currently only commit_retries can be modified.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/iceberg.rst.txt#2025-04-10_snippet_46\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE iceberg.web.page_views_v2 SET PROPERTIES (commit_retries = 6);\n```\n\n----------------------------------------\n\nTITLE: SHOW CREATE TABLE Syntax in Presto SQL\nDESCRIPTION: Shows the syntax for the SHOW CREATE TABLE command in Presto SQL. This command is used to generate the SQL statement that would create the specified table.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/sql/show-create-table.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSHOW CREATE TABLE table_name\n```\n\n----------------------------------------\n\nTITLE: CREATE TABLE AS Syntax in Presto SQL\nDESCRIPTION: The syntax for the CREATE TABLE AS statement in Presto SQL. It allows creating a new table with optional IF NOT EXISTS clause, column aliases, table comments, property settings, and query results with or without data.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/sql/create-table-as.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE [ IF NOT EXISTS ] table_name [ ( column_alias, ... ) ]\n[ COMMENT table_comment ]\n[ WITH ( property_name = expression [, ...] ) ]\nAS query\n[ WITH [ NO ] DATA ]\n```\n\n----------------------------------------\n\nTITLE: GROUP BY Using Column Position\nDESCRIPTION: Example of GROUP BY using ordinal position of the output column (starting at 1) instead of the column name. This query groups by the nationkey column referenced by position 2.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/sql/select.rst.txt#2025-04-10_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nSELECT count(*), nationkey FROM customer GROUP BY 2;\n```\n\n----------------------------------------\n\nTITLE: Generating Java Keystore for Presto SSL/TLS\nDESCRIPTION: Command to generate a Java Keystore file with a wildcard certificate for securing internal Presto communication. This creates a keystore that contains the necessary encryption keys.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/security/internal-communication.rst.txt#2025-04-10_snippet_3\n\nLANGUAGE: none\nCODE:\n```\nkeytool -genkeypair -alias example.com -keyalg RSA -keystore keystore.jks\nEnter keystore password:\nRe-enter new password:\nWhat is your first and last name?\n  [Unknown]:  *.example.com\nWhat is the name of your organizational unit?\n  [Unknown]:\nWhat is the name of your organization?\n  [Unknown]:\nWhat is the name of your City or Locality?\n  [Unknown]:\nWhat is the name of your State or Province?\n  [Unknown]:\nWhat is the two-letter country code for this unit?\n  [Unknown]:\nIs CN=*.example.com, OU=Unknown, O=Unknown, L=Unknown, ST=Unknown, C=Unknown correct?\n  [no]:  yes\n\nEnter key password for <presto>\n        (RETURN if same as keystore password):\n```\n\n----------------------------------------\n\nTITLE: Datetime Field Extraction Functions in Presto SQL\nDESCRIPTION: Collection of convenience functions for extracting specific date and time components. Each function returns a bigint value representing different parts of a datetime value like day, month, year, etc.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/datetime.rst#2025-04-10_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nday(x) -> bigint\n```\n\nLANGUAGE: sql\nCODE:\n```\nday_of_month(x) -> bigint\n```\n\nLANGUAGE: sql\nCODE:\n```\nday_of_week(x) -> bigint\n```\n\nLANGUAGE: sql\nCODE:\n```\nday_of_year(x) -> bigint\n```\n\nLANGUAGE: sql\nCODE:\n```\ndow(x) -> bigint\n```\n\nLANGUAGE: sql\nCODE:\n```\ndoy(x) -> bigint\n```\n\nLANGUAGE: sql\nCODE:\n```\nhour(x) -> bigint\n```\n\nLANGUAGE: sql\nCODE:\n```\nmillisecond(x) -> bigint\n```\n\nLANGUAGE: sql\nCODE:\n```\nminute(x) -> bigint\n```\n\nLANGUAGE: sql\nCODE:\n```\nmonth(x) -> bigint\n```\n\nLANGUAGE: sql\nCODE:\n```\nquarter(x) -> bigint\n```\n\nLANGUAGE: sql\nCODE:\n```\nsecond(x) -> bigint\n```\n\nLANGUAGE: sql\nCODE:\n```\ntimezone_hour(timestamp) -> bigint\n```\n\nLANGUAGE: sql\nCODE:\n```\ntimezone_minute(timestamp) -> bigint\n```\n\nLANGUAGE: sql\nCODE:\n```\nweek(x) -> bigint\n```\n\nLANGUAGE: sql\nCODE:\n```\nweek_of_year(x) -> bigint\n```\n\nLANGUAGE: sql\nCODE:\n```\nyear(x) -> bigint\n```\n\nLANGUAGE: sql\nCODE:\n```\nyear_of_week(x) -> bigint\n```\n\nLANGUAGE: sql\nCODE:\n```\nyow(x) -> bigint\n```\n\n----------------------------------------\n\nTITLE: Required Presto Connector Services\nDESCRIPTION: Lists the four essential services that must be implemented by a Presto Connector: ConnectorMetadata for schema/table information, ConnectorSplitManager for data partitioning, ConnectorHandleResolver for type resolution, and ConnectorRecordSetProvider for data delivery.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/develop/connectors.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n* ConnectorMetadata\n* ConnectorSplitManager\n* ConnectorHandleResolver\n* ConnectorRecordSetProvider\n```\n\n----------------------------------------\n\nTITLE: Grouping Element Syntax in Presto SQL GROUP BY Clause\nDESCRIPTION: Specifies the syntax for grouping elements in a GROUP BY clause, including empty grouping, expressions, GROUPING SETS, CUBE, and ROLLUP.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/select.rst#2025-04-10_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\n()\nexpression\nGROUPING SETS ( ( column [, ...] ) [, ...] )\nCUBE ( column [, ...] )\nROLLUP ( column [, ...] )\n```\n\n----------------------------------------\n\nTITLE: Comparing ROWS, RANGE, and GROUPS in SQL Window Functions\nDESCRIPTION: Three example queries demonstrating the differences between ROWS, RANGE, and GROUPS in frame definitions for window functions.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/window.rst#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n    ARRAY_AGG(v) OVER (\n        ORDER BY k ASC ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING\n    )\nFROM (\n    VALUES (1, 'a'), (1, 'b'), (3, 'c'), (3, 'd'), (5, 'e')\n) t(k, v);\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n    ARRAY_AGG(v) OVER (\n        ORDER BY k ASC RANGE BETWEEN 1 PRECEDING AND 1 FOLLOWING\n    )\nFROM (\n    VALUES (1, 'a'), (1, 'b'), (3, 'c'), (3, 'd'), (5, 'e')\n) t(k, v);\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n    ARRAY_AGG(v) OVER (\n        ORDER BY k ASC GROUPS BETWEEN 1 PRECEDING AND 1 FOLLOWING\n    )\nFROM (\n    VALUES (1, 'a'), (1, 'b'), (3, 'c'), (3, 'd'), (5, 'e')\n) t(k, v);\n```\n\n----------------------------------------\n\nTITLE: ALTER TABLE Command Syntax in Presto SQL\nDESCRIPTION: Defines the syntax for various ALTER TABLE operations in Presto SQL, including renaming tables, adding/dropping columns, managing constraints, and setting properties.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/sql/alter-table.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE [ IF EXISTS ] name RENAME TO new_name\nALTER TABLE [ IF EXISTS ] name ADD COLUMN [ IF NOT EXISTS ] column_name data_type [ COMMENT comment ] [ WITH ( property_name = expression [, ...] ) ]\nALTER TABLE [ IF EXISTS ] name DROP COLUMN column_name\nALTER TABLE [ IF EXISTS ] name RENAME COLUMN [ IF EXISTS ] column_name TO new_column_name\nALTER TABLE [ IF EXISTS ] name ADD [ CONSTRAINT constraint_name ] { PRIMARY KEY | UNIQUE } ( { column_name [, ...] } ) [ { ENABLED | DISABLED } ] [ [ NOT ] RELY ] [ [ NOT ] ENFORCED } ]\nALTER TABLE [ IF EXISTS ] name DROP CONSTRAINT [ IF EXISTS ] constraint_name\nALTER TABLE [ IF EXISTS ] name ALTER [ COLUMN ] column_name { SET | DROP } NOT NULL\nALTER TABLE [ IF EXISTS ] name SET PROPERTIES (property_name=value, [, ...])\n```\n\n----------------------------------------\n\nTITLE: Array Filtering in Presto SQL\nDESCRIPTION: Examples of using filter() function to construct new arrays based on boolean conditions. Shows filtering with null handling and positive number filtering.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/array.rst#2025-04-10_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nSELECT filter(ARRAY [], x -> true);\nSELECT filter(ARRAY [5, -6, NULL, 7], x -> x > 0);\nSELECT filter(ARRAY [5, NULL, 7, NULL], x -> x IS NOT NULL)\n```\n\n----------------------------------------\n\nTITLE: TABLESAMPLE Methods in Presto SQL\nDESCRIPTION: TABLESAMPLE allows for sampling data from tables using either BERNOULLI (row-based probability) or SYSTEM (segment-based) methods. These methods provide different sampling approaches with varying performance characteristics.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/select.rst#2025-04-10_snippet_23\n\nLANGUAGE: sql\nCODE:\n```\nSELECT *\nFROM users TABLESAMPLE BERNOULLI (50);\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT *\nFROM users TABLESAMPLE SYSTEM (75);\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT o.*, i.*\nFROM orders o TABLESAMPLE SYSTEM (10)\nJOIN lineitem i TABLESAMPLE BERNOULLI (40)\n  ON o.orderkey = i.orderkey;\n```\n\n----------------------------------------\n\nTITLE: Sampling Entire Rows Using Reservoir Sampling in Presto SQL\nDESCRIPTION: This example demonstrates how to use reservoir sampling to sample entire rows from a table by using a ROW type input, with each subfield corresponding to the columns of the source table.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/aggregate.rst.txt#2025-04-10_snippet_16\n\nLANGUAGE: sql\nCODE:\n```\nWITH result as (\n    SELECT\n        reservoir_sample(NULL, 0, CAST(row(idx, val) AS row(idx int, val varchar)), 2) as reservoir\n    FROM (\n        VALUES\n        (1, 'a'), (2, 'b'), (3, 'c'), (4, 'd'), (5, 'e')\n    ) as t(idx, val)\n)\nSELECT \n    reservoir.processed_count, reservoir.sample\nFROM result;\n```\n\n----------------------------------------\n\nTITLE: GROUP BY with Non-displayed Columns\nDESCRIPTION: Example showing how GROUP BY can use columns not appearing in the SELECT output list. This query counts rows grouped by mktsegment column without displaying it.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/sql/select.rst.txt#2025-04-10_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\nSELECT count(*) FROM customer GROUP BY mktsegment;\n```\n\n----------------------------------------\n\nTITLE: Inserting Multiple Rows with Explicit Values in SQL\nDESCRIPTION: This example demonstrates how to insert multiple rows with explicit values into a table using a single INSERT statement.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/sql/insert.rst.txt#2025-04-10_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO cities VALUES (2, 'San Jose'), (3, 'Oakland');\n```\n\n----------------------------------------\n\nTITLE: UNNEST with Map Column in Presto SQL\nDESCRIPTION: UNNEST can expand a map into two columns representing the key-value pairs of the map. This example demonstrates unnesting map columns into separate columns for keys and values.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/select.rst#2025-04-10_snippet_27\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n    animals, a, n\nFROM (\n    VALUES\n        (MAP(ARRAY['dog', 'cat', 'bird'], ARRAY[1, 2, 0])),\n        (MAP(ARRAY['dog', 'cat'], ARRAY[4, 5]))\n) AS x (animals)\nCROSS JOIN UNNEST(animals) AS t (a, n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Spiller Task Spilling Strategy in Presto\nDESCRIPTION: Defines the strategy for choosing when to revoke memory from tasks. Supports three values: ORDER_BY_CREATE_TIME (oldest tasks first), ORDER_BY_REVOCABLE_BYTES (tasks using more memory first), and PER_TASK_MEMORY_THRESHOLD (based on per-task memory usage).\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/admin/properties.rst#2025-04-10_snippet_6\n\nLANGUAGE: properties\nCODE:\n```\nexperimental.spiller.task-spilling-strategy\n```\n\n----------------------------------------\n\nTITLE: Querying with CUBE and ROLLUP in Presto SQL\nDESCRIPTION: Demonstrates the use of CUBE and ROLLUP operations in GROUP BY clauses, showing how ALL and DISTINCT quantifiers affect the generated grouping sets.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/sql/select.rst.txt#2025-04-10_snippet_20\n\nLANGUAGE: sql\nCODE:\n```\nSELECT origin_state, destination_state, origin_zip, sum(package_weight)\nFROM shipping\nGROUP BY ALL\n    CUBE (origin_state, destination_state),\n    ROLLUP (origin_state, origin_zip);\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT origin_state, destination_state, origin_zip, sum(package_weight)\nFROM shipping\nGROUP BY DISTINCT\n    CUBE (origin_state, destination_state),\n    ROLLUP (origin_state, origin_zip);\n```\n\n----------------------------------------\n\nTITLE: Set Operations in Presto SQL\nDESCRIPTION: Demonstrates the usage of UNION, INTERSECT, and EXCEPT set operations to combine or compare results from multiple queries.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/sql/select.rst.txt#2025-04-10_snippet_23\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 13\nUNION\nSELECT 42;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 13\nUNION ALL\nSELECT * FROM (VALUES 42, 13);\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM (VALUES 13, 42)\nINTERSECT\nSELECT 13;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM (VALUES 13, 42)\nEXCEPT\nSELECT 13;\n```\n\n----------------------------------------\n\nTITLE: Describing Iceberg Table Structure in Presto SQL\nDESCRIPTION: Demonstrates the use of DESCRIBE command to show the structure of Iceberg tables, including partitioned and un-partitioned examples.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/iceberg.rst#2025-04-10_snippet_58\n\nLANGUAGE: sql\nCODE:\n```\nDESCRIBE customer;\n```\n\nLANGUAGE: sql\nCODE:\n```\nDESCRIBE region;\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Table in Presto SQL\nDESCRIPTION: Demonstrates how to create a new table named 'orders' with four columns and a table property specifying the ORC format.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/sql/create-table.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE orders (\n  orderkey bigint,\n  orderstatus varchar,\n  totalprice double,\n  orderdate date\n)\nWITH (format = 'ORC')\n```\n\n----------------------------------------\n\nTITLE: CREATE FUNCTION Syntax in Presto SQL\nDESCRIPTION: The syntax definition for the CREATE FUNCTION statement in Presto. It shows all available options including temporary functions, parameter definitions, return types, and function characteristics.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/create-function.rst#2025-04-10_snippet_0\n\nLANGUAGE: none\nCODE:\n```\nCREATE [ OR REPLACE ] [TEMPORARY] FUNCTION\nqualified_function_name (\n  parameter_name parameter_type\n  [, ...]\n)\nRETURNS return_type\n[ COMMENT function_description ]\n[ LANGUAGE [ SQL | identifier] ]\n[ DETERMINISTIC | NOT DETERMINISTIC ]\n[ RETURNS NULL ON NULL INPUT | CALLED ON NULL INPUT ]\n[ RETURN expression | EXTERNAL [ NAME identifier ] ]\n```\n\n----------------------------------------\n\nTITLE: EXISTS Subquery in Presto SQL\nDESCRIPTION: The EXISTS predicate determines if a subquery returns any rows. This example finds nations that have a matching region in the region table.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/select.rst#2025-04-10_snippet_31\n\nLANGUAGE: sql\nCODE:\n```\nSELECT name\nFROM nation\nWHERE EXISTS (SELECT * FROM region WHERE region.regionkey = nation.regionkey)\n```\n\n----------------------------------------\n\nTITLE: Generating Java Keystore for Presto Coordinator TLS\nDESCRIPTION: This command uses keytool to generate a Java keystore file for the Presto coordinator's TLS configuration. It prompts for keystore password and certificate details, with the Common Name set to the coordinator's hostname.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/security/tls.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: none\nCODE:\n```\nkeytool -genkeypair -alias presto -keyalg RSA -keystore keystore.jks\nEnter keystore password:\nRe-enter new password:\nWhat is your first and last name?\n  [Unknown]:  presto-coordinator.example.com\nWhat is the name of your organizational unit?\n  [Unknown]:\nWhat is the name of your organization?\n  [Unknown]:\nWhat is the name of your City or Locality?\n  [Unknown]:\nWhat is the name of your State or Province?\n  [Unknown]:\nWhat is the two-letter country code for this unit?\n  [Unknown]:\nIs CN=presto-coordinator.example.com, OU=Unknown, O=Unknown, L=Unknown, ST=Unknown, C=Unknown correct?\n  [no]:  yes\n\nEnter key password for <presto>\n        (RETURN if same as keystore password):\n```\n\n----------------------------------------\n\nTITLE: Syntax for GRANT Command in Presto SQL\nDESCRIPTION: Defines the syntax for granting privileges on tables to users or roles in Presto. It allows specifying individual privileges or ALL PRIVILEGES, and includes an optional WITH GRANT OPTION clause.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/grant.rst#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nGRANT ( privilege [, ...] | ( ALL PRIVILEGES ) )\nON [ TABLE ] table_name TO ( user | USER user | ROLE role )\n[ WITH GRANT OPTION ]\n```\n\n----------------------------------------\n\nTITLE: Field Name Case Sensitivity when Casting JSON to ROW in Presto\nDESCRIPTION: Demonstrates how field name case sensitivity works when casting from JSON to ROW, including legacy behavior and configuration for case-sensitive matching. Shows how to handle duplicate fields.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/json.rst#2025-04-10_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nSELECT CAST(JSON '{\"v1\":123,\"V2\":\"abc\",\"v3\":true}' AS ROW(v1 BIGINT, v2 VARCHAR, v3 BOOLEAN)); -- {v1=123, v2=abc, v3=true}\nSELECT CAST(JSON '{\"v1\":123,\"V2\":\"abc\",\"v3\":true}' AS ROW(v1 BIGINT, \"V2\" VARCHAR, \"V3\" BOOLEAN)); -- {v1=123, V2=abc, V3=true}\n```\n\n----------------------------------------\n\nTITLE: Array Top N Elements in Presto SQL\nDESCRIPTION: Examples of using array_top_n() to get the top N elements from an array in descending order. Demonstrates behavior with different data types and array sizes.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/array.rst#2025-04-10_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nSELECT array_top_n(ARRAY [1, 100, 2, 5, 3], 3);\nSELECT array_top_n(ARRAY [1, 100], 5);\nSELECT array_top_n(ARRAY ['a', 'zzz', 'zz', 'b', 'g', 'f'], 3)\n```\n\n----------------------------------------\n\nTITLE: JOIN Types in Presto SQL\nDESCRIPTION: Available join types in Presto SQL, including INNER JOIN, LEFT OUTER JOIN, RIGHT OUTER JOIN, FULL OUTER JOIN, and CROSS JOIN.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/sql/select.rst.txt#2025-04-10_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\n[ INNER ] JOIN\nLEFT [ OUTER ] JOIN\nRIGHT [ OUTER ] JOIN\nFULL [ OUTER ] JOIN\nCROSS JOIN\n```\n\n----------------------------------------\n\nTITLE: Using array_position Function in Presto 0.257\nDESCRIPTION: The array_position function in Presto 0.257 now supports finding the n-th instance of an element in an array. This enhancement allows for more flexible array manipulations in SQL queries.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.257.rst#2025-04-10_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT array_position(array[1, 2, 3, 2, 5], 2, 2) AS second_occurrence;\n```\n\n----------------------------------------\n\nTITLE: Time Travel Queries in Presto SQL for Iceberg Tables\nDESCRIPTION: Examples of using time travel features in Presto Iceberg connector, including querying snapshot IDs, inserting data, and rolling back to previous states.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/iceberg.rst.txt#2025-04-10_snippet_58\n\nLANGUAGE: sql\nCODE:\n```\nUSE iceberg.tpch;\nCREATE TABLE IF NOT EXISTS ctas_nation AS (SELECT * FROM nation);\nDESCRIBE ctas_nation;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT snapshot_id FROM iceberg.tpch.\"ctas_nation$snapshots\" ORDER BY committed_at;\n```\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO ctas_nation VALUES(25, 'new country', 1, 'comment');\nSELECT snapshot_id FROM iceberg.tpch.\"ctas_nation$snapshots\" ORDER BY committed_at;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM ctas_nation WHERE name = 'new country';\n```\n\nLANGUAGE: sql\nCODE:\n```\nCALL iceberg.system.rollback_to_snapshot('tpch', 'ctas_nation', 5837462824399906536);\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM ctas_nation WHERE name = 'new country';\n```\n\n----------------------------------------\n\nTITLE: Using json_format Function in Presto\nDESCRIPTION: Demonstrates how to serialize JSON values to JSON text strings using json_format. This is the inverse operation of json_parse and follows RFC 7159 for JSON serialization.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/json.rst#2025-04-10_snippet_11\n\nLANGUAGE: sql\nCODE:\n```\nSELECT json_format(JSON '[1, 2, 3]'); -- '[1,2,3]'\nSELECT json_format(JSON '\"a\"'); -- '\"a\"'\n```\n\n----------------------------------------\n\nTITLE: Using json_extract_scalar Function in Presto\nDESCRIPTION: Shows how to extract scalar values (boolean, number, or string) from JSON using JSONPath-like expressions. Returns the result as a string rather than a JSON value.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/json.rst#2025-04-10_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\nSELECT json_extract_scalar('[1, 2, 3]', '$[2]');\nSELECT json_extract_scalar(json, '$.store.book[0].author');\n```\n\n----------------------------------------\n\nTITLE: Differences Between json_format and CAST to VARCHAR in Presto\nDESCRIPTION: Explains the different semantics between json_format and CAST(json AS VARCHAR), showing examples of how each handles various JSON types including objects, arrays, strings, numbers, and boolean values.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/json.rst#2025-04-10_snippet_12\n\nLANGUAGE: sql\nCODE:\n```\nSELECT json_format(JSON '{\"a\": 1, \"b\": 2}'); -- '{\"a\":1,\"b\":2}'\nSELECT json_format(JSON '[1, 2, 3]'); -- '[1,2,3]'\nSELECT json_format(JSON '\"abc\"'); -- '\"abc\"'\nSELECT json_format(JSON '42'); -- '42'\nSELECT json_format(JSON 'true'); -- 'true'\nSELECT json_format(JSON 'null'); -- 'null'\n\nSELECT CAST(JSON '{\"a\": 1, \"b\": 2}' AS VARCHAR); -- ERROR!\n```\n\n----------------------------------------\n\nTITLE: Simple CASE Expression Syntax in Presto SQL\nDESCRIPTION: Defines the syntax for the simple form of CASE expression which searches each value expression from left to right until it finds one that equals the input expression and returns the corresponding result.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/conditional.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: none\nCODE:\n```\nCASE expression\n    WHEN value THEN result\n    [ WHEN ... ]\n    [ ELSE result ]\nEND\n```\n\n----------------------------------------\n\nTITLE: ALTER TABLE Syntax in Presto SQL\nDESCRIPTION: Comprehensive syntax for various ALTER TABLE operations in Presto SQL, including renaming tables, adding/dropping columns, modifying constraints, and setting properties.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/alter-table.rst#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE [ IF EXISTS ] name RENAME TO new_name\nALTER TABLE [ IF EXISTS ] name ADD COLUMN [ IF NOT EXISTS ] column_name data_type [ COMMENT comment ] [ WITH ( property_name = expression [, ...] ) ]\nALTER TABLE [ IF EXISTS ] name DROP COLUMN column_name\nALTER TABLE [ IF EXISTS ] name RENAME COLUMN [ IF EXISTS ] column_name TO new_column_name\nALTER TABLE [ IF EXISTS ] name ADD [ CONSTRAINT constraint_name ] { PRIMARY KEY | UNIQUE } ( { column_name [, ...] } ) [ { ENABLED | DISABLED } ] [ [ NOT ] RELY ] [ [ NOT ] ENFORCED } ]\nALTER TABLE [ IF EXISTS ] name DROP CONSTRAINT [ IF EXISTS ] constraint_name\nALTER TABLE [ IF EXISTS ] name ALTER [ COLUMN ] column_name { SET | DROP } NOT NULL\nALTER TABLE [ IF EXISTS ] name SET PROPERTIES (property_name=value, [, ...])\n```\n\n----------------------------------------\n\nTITLE: Chained WITH Clauses in Presto SQL\nDESCRIPTION: Example showing how named relations in a WITH clause can chain, with each subsequent relation referencing columns from previously defined relations.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/sql/select.rst.txt#2025-04-10_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nWITH\n  x AS (SELECT a FROM t),\n  y AS (SELECT a AS b FROM x),\n  z AS (SELECT b AS c FROM y)\nSELECT c FROM z;\n```\n\n----------------------------------------\n\nTITLE: Calculating Rolling Sum by Clerk and Date in SQL\nDESCRIPTION: Shows how to use an aggregate function as a window function to calculate a rolling sum of order prices by day for each clerk.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/window.rst.txt#2025-04-10_snippet_5\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT clerk, orderdate, orderkey, totalprice,\n       sum(totalprice) OVER (PARTITION BY clerk\n                             ORDER BY orderdate) AS rolling_sum\nFROM orders\nORDER BY clerk, orderdate, orderkey\n```\n\n----------------------------------------\n\nTITLE: Using json_extract_scalar Function in Presto\nDESCRIPTION: Shows how to extract scalar values (boolean, number, or string) from JSON using JSONPath-like expressions. Returns the result as a string rather than a JSON value.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/json.rst#2025-04-10_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\nSELECT json_extract_scalar('[1, 2, 3]', '$[2]');\nSELECT json_extract_scalar(json, '$.store.book[0].author');\n```\n\n----------------------------------------\n\nTITLE: Inserting All Columns from Another Table in SQL\nDESCRIPTION: This example demonstrates how to insert all columns from one table into another using the INSERT statement combined with a SELECT query.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/sql/insert.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO orders\nSELECT * FROM new_orders;\n```\n\n----------------------------------------\n\nTITLE: WITH Clause Example with Nested Query Flattening\nDESCRIPTION: Example showing how the WITH clause can flatten nested queries, making them more readable and maintainable. The two queries shown are functionally equivalent.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/sql/select.rst.txt#2025-04-10_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nSELECT a, b\nFROM (\n  SELECT a, MAX(b) AS b FROM t GROUP BY a\n) AS x;\n\nWITH x AS (SELECT a, MAX(b) AS b FROM t GROUP BY a)\nSELECT a, b FROM x;\n```\n\n----------------------------------------\n\nTITLE: Creating a Table with IF NOT EXISTS in PrestoDB\nDESCRIPTION: Example of creating a new table only if it doesn't already exist. This prevents errors when the statement is executed multiple times or when there might be an existing table with the same name.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/create-table-as.rst#2025-04-10_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE IF NOT EXISTS orders_by_date AS\nSELECT orderdate, sum(totalprice) AS price\nFROM orders\nGROUP BY orderdate\n```\n\n----------------------------------------\n\nTITLE: Querying Iceberg Table References SQL\nDESCRIPTION: SQL query to view details about Iceberg references including branches and tags, showing reference names, types, snapshot IDs and reference properties.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/iceberg.rst#2025-04-10_snippet_21\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM \"ctas_nation$refs\";\n```\n\n----------------------------------------\n\nTITLE: ROLLUP Operator Example in Presto SQL\nDESCRIPTION: Shows how to use the ROLLUP operator to generate all possible subtotals for a given set of columns.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/select.rst#2025-04-10_snippet_11\n\nLANGUAGE: sql\nCODE:\n```\nSELECT origin_state, origin_zip, sum(package_weight)\nFROM shipping\nGROUP BY ROLLUP (origin_state, origin_zip);\n```\n\n----------------------------------------\n\nTITLE: Query Schema Properties in Presto\nDESCRIPTION: A query to list all available schema properties in Presto. This helps users identify valid properties that can be used in the WITH clause of the CREATE SCHEMA statement.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/sql/create-schema.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM system.metadata.schema_properties\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Lambda Expression Syntax in Presto SQL\nDESCRIPTION: This code block showcases various examples of lambda expressions in Presto SQL. It covers simple arithmetic operations, string matching, array indexing, conditional logic, and function calls within lambda expressions.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/lambda.rst#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nx -> x + 1\n(x, y) -> x + y\nx -> regexp_like(x, 'a+')\nx -> x[1] / x[2]\nx -> IF(x > 0, x, -x)\nx -> COALESCE(x, 0)\nx -> CAST(x AS JSON)\nx -> x + TRY(1 / 0)\n```\n\n----------------------------------------\n\nTITLE: Querying Iceberg Tables Using Timestamp in PrestoDB\nDESCRIPTION: Demonstrates how to query an Iceberg table for a specific point in time using the TIMESTAMP BEFORE clause. The query returns records that were created before the specified timestamp.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/iceberg.rst#2025-04-10_snippet_63\n\nLANGUAGE: sql\nCODE:\n```\n// In following query, timestamp string is matching with second inserted record.\n// BEFORE clause returns first record which is less than timestamp of the second record.\nSELECT * FROM ctas_nation FOR TIMESTAMP BEFORE TIMESTAMP '2023-10-17 13:29:46.822 America/Los_Angeles';\nSELECT * FROM ctas_nation FOR TIMESTAMP BEFORE TIMESTAMP '2023-10-17 13:29:46.822';\n```\n\n----------------------------------------\n\nTITLE: Time Zone Conversion in Presto SQL\nDESCRIPTION: Examples of converting timestamps between time zones using the AT TIME ZONE operator.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/datetime.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT timestamp '2012-10-31 01:00 UTC';\nSELECT timestamp '2012-10-31 01:00 UTC' AT TIME ZONE 'America/Los_Angeles';\n```\n\n----------------------------------------\n\nTITLE: Using String Trim Function in PrestoDB SQL\nDESCRIPTION: Removes specified characters from the beginning and end of a string. Takes a string and characters to trim as input parameters.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/string.rst#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT trim('test', 't'); -- es\nSELECT trim('.t.e.s.t.', '.t'); -- e.s\n```\n\n----------------------------------------\n\nTITLE: Configuring Presto Coordinator for Disaggregated Setup\nDESCRIPTION: Configuration for a Presto coordinator in a disaggregated setup with multiple coordinators. Each coordinator runs a subset of queries in the cluster and communicates with the resource manager.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/installation/deployment.rst.txt#2025-04-10_snippet_6\n\nLANGUAGE: none\nCODE:\n```\ncoordinator=true\nnode-scheduler.include-coordinator=false\nhttp-server.http.port=8080\nquery.max-memory=50GB\nquery.max-memory-per-node=1GB\ndiscovery.uri=http://example.net:8080 (Point to resource manager host/vip)\nresource-manager-enabled=true\n```\n\n----------------------------------------\n\nTITLE: Creating and Modifying Iceberg Tables in Presto SQL\nDESCRIPTION: Demonstrates creating an Iceberg table from TPCH data and performing schema evolution operations like adding, renaming, and dropping columns.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/iceberg.rst.txt#2025-04-10_snippet_57\n\nLANGUAGE: sql\nCODE:\n```\nUSE iceberg.tpch;\nCREATE TABLE IF NOT EXISTS ctas_nation AS (SELECT * FROM nation);\nDESCRIBE ctas_nation;\n```\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE ctas_nation ADD COLUMN zipcode VARCHAR;\nDESCRIBE ctas_nation;\n```\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE ctas_nation RENAME COLUMN zipcode TO address;\nDESCRIBE ctas_nation;\n```\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE ctas_nation DROP COLUMN address;\nDESCRIBE ctas_nation;\n```\n\n----------------------------------------\n\nTITLE: Rolling Sum of Order Prices by Day for Each Clerk in SQL\nDESCRIPTION: Example query that calculates a rolling sum of order prices by day for each clerk using the sum() window function.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/window.rst#2025-04-10_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSELECT clerk, orderdate, orderkey, totalprice,\n       sum(totalprice) OVER (PARTITION BY clerk\n                             ORDER BY orderdate) AS rolling_sum\nFROM orders\nORDER BY clerk, orderdate, orderkey\n```\n\n----------------------------------------\n\nTITLE: Configuring Presto Coordinator Server Properties\nDESCRIPTION: Minimal configuration for a Presto coordinator node. This setup enables the coordinator mode but disables worker functionality on the same node to optimize resource usage for larger clusters.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/installation/deployment.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: none\nCODE:\n```\ncoordinator=true\nnode-scheduler.include-coordinator=false\nhttp-server.http.port=8080\nquery.max-memory=50GB\nquery.max-memory-per-node=1GB\ndiscovery-server.enabled=true\ndiscovery.uri=http://example.net:8080\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Resource Group Manager in PrestoDB\nDESCRIPTION: SQL script for setting up a database-based resource group manager in PrestoDB. Demonstrates how to create global properties, define resource groups with parent-child relationships, and set scheduling policies and limits.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/admin/resource-groups.rst#2025-04-10_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\n-- global properties\nINSERT INTO resource_groups_global_properties (name, value) VALUES ('cpu_quota_period', '1h');\n\n-- Every row in resource_groups table indicates a resource group.\n-- The enviroment name is 'test_environment', make sure it matches `node.environment` in your cluster.\n-- The parent-child relationship is indicated by the ID in 'parent' column.\n\n-- create a root group 'global' with NULL parent\nINSERT INTO resource_groups (name, soft_memory_limit, hard_concurrency_limit, max_queued, scheduling_policy, jmx_export, environment) VALUES ('global', '80%', 100, 1000, 'weighted', true, 'test_environment');\n\n-- get ID of 'global' group\nSELECT resource_group_id FROM resource_groups WHERE name = 'global';  -- 1\n-- create two new groups with 'global' as parent\nINSERT INTO resource_groups (name, soft_memory_limit, hard_concurrency_limit, max_queued, scheduling_weight, environment, parent) VALUES ('data_definition', '10%', 5, 100, 1, 'test_environment', 1);\nINSERT INTO resource_groups (name, soft_memory_limit, hard_concurrency_limit, max_queued, scheduling_weight, environment, parent) VALUES ('adhoc', '10%', 50, 1, 10, 'test_environment', 1);\n\n-- get ID of 'adhoc' group\nSELECT resource_group_id FROM resource_groups WHERE name = 'adhoc';   -- 3\n-- create 'other' group with 'adhoc' as parent\n```\n\n----------------------------------------\n\nTITLE: GROUP BY Query with ALL Quantifier in Presto SQL\nDESCRIPTION: Demonstrates the use of GROUP BY ALL with CUBE and ROLLUP operations to generate all possible grouping combinations including duplicates.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/select.rst#2025-04-10_snippet_13\n\nLANGUAGE: sql\nCODE:\n```\nSELECT origin_state, destination_state, origin_zip, sum(package_weight)\nFROM shipping\nGROUP BY ALL\n    CUBE (origin_state, destination_state),\n    ROLLUP (origin_state, origin_zip);\n```\n\n----------------------------------------\n\nTITLE: Extracting Specific Capturing Groups with regexp_extract_all in Presto SQL\nDESCRIPTION: Shows how to use regexp_extract_all function with a specified capturing group number to return an array of all occurrences of that group.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/regexp.rst#2025-04-10_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT regexp_extract_all('1a 2b 14m', '(\\d+)([a-z]+)', 2); -- ['a', 'b', 'm']\n```\n\n----------------------------------------\n\nTITLE: Adding map_top_n_keys Function in SQL\nDESCRIPTION: Introduces a new SQL function map_top_n_keys to return an array of the top N keys from a provided map, with optional custom key comparison.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.279.rst#2025-04-10_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nmap_top_n_keys(map, N, [lambda_comparator])\n```\n\n----------------------------------------\n\nTITLE: Adding map_remove_null_values Function in SQL\nDESCRIPTION: Introduces a new SQL function map_remove_null_values to remove all entries with null values from a given map.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.279.rst#2025-04-10_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nmap_remove_null_values(map)\n```\n\n----------------------------------------\n\nTITLE: Using regexp_replace for Pattern Replacement in SQL\nDESCRIPTION: Replaces substrings matching a regular expression pattern in a string. The function can remove matches, replace with static text, or use capturing groups to create dynamic replacements.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/regexp.rst.txt#2025-04-10_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSELECT regexp_replace('1a 2b 14m', '\\d+[ab] '); -- '14m'\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT regexp_replace('1a 2b 14m', '(\\d+)([ab]) ', '3c$2 '); -- '3ca 3cb 14m'\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT regexp_replace('new york', '(\\w)(\\w*)', x -> upper(x[1]) || lower(x[2])); --'New York'\n```\n\n----------------------------------------\n\nTITLE: Creating an Iceberg Table with Bucket Partitioning in Presto\nDESCRIPTION: Creates an Iceberg table with ORC format that uses bucket partitioning to distribute data into 8 buckets based on the 'team' field. Bucket partitioning helps with even data distribution and query performance.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/iceberg.rst#2025-04-10_snippet_39\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE players (\n    id int,\n    name varchar,\n    team varchar\n)\nWITH (\n    format = 'ORC',\n    partitioning = ARRAY['bucket(team, 8)']\n);\n```\n\n----------------------------------------\n\nTITLE: Demonstrating String Trimming in Presto SQL\nDESCRIPTION: Examples of using the trim() function to remove specified characters from the beginning and end of a string.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/string.rst.txt#2025-04-10_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nSELECT trim('test', 't'); -- es\nSELECT trim('.t.e.s.t.', '.t'); -- e.s\n```\n\n----------------------------------------\n\nTITLE: Ranking Orders by Clerk and Price in SQL\nDESCRIPTION: Demonstrates using a window function to rank orders for each clerk by price in descending order.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/window.rst.txt#2025-04-10_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT orderkey, clerk, totalprice,\n       rank() OVER (PARTITION BY clerk\n                    ORDER BY totalprice DESC) AS rnk\nFROM orders\nORDER BY clerk, rnk\n```\n\n----------------------------------------\n\nTITLE: CREATE TABLE Syntax in Presto SQL\nDESCRIPTION: Defines the syntax for creating a new table in Presto SQL. It includes options for specifying column definitions, constraints, table properties, and copying columns from existing tables.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/sql/create-table.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE [ IF NOT EXISTS ]\ntable_name (\n  { column_name data_type [NOT NULL] [ COMMENT comment ] [ WITH ( property_name = expression [, ...] ) ]\n  | LIKE existing_table_name [ { INCLUDING | EXCLUDING } PROPERTIES ]\n  | [ CONSTRAINT constraint_name ] { PRIMARY KEY | UNIQUE } ( { column_name [, ...] } ) [ { ENABLED | DISABLED } ] [ [ NOT ] RELY ] [ [ NOT ] ENFORCED ] }\n  [, ...]\n)\n[ COMMENT table_comment ]\n[ WITH ( property_name = expression [, ...] ) ]\n```\n\n----------------------------------------\n\nTITLE: Adding and Dropping Constraints in Presto SQL\nDESCRIPTION: Examples of adding and dropping constraints using ALTER TABLE command in Presto SQL, including primary key and unique constraints.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/alter-table.rst#2025-04-10_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE users ADD CONSTRAINT pk PRIMARY KEY (user_id);\n\nALTER TABLE IF EXISTS users ADD UNIQUE (first_name, last_name) DISABLED;\n\nALTER TABLE users DROP CONSTRAINT pk;\n\nALTER TABLE IF EXISTS users DROP CONSTRAINT IF EXISTS pk;\n```\n\n----------------------------------------\n\nTITLE: String Pattern Matching with LIKE Operator\nDESCRIPTION: Examples of using LIKE operator with wildcards for pattern matching in strings.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/comparison.rst#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM (VALUES ('abc'), ('bcd'), ('cde')) AS t (name)\nWHERE name LIKE '%b%'\n```\n\n----------------------------------------\n\nTITLE: Array Filtering in Presto SQL\nDESCRIPTION: Demonstrates filter function usage which constructs a new array based on a boolean predicate function.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/array.rst.txt#2025-04-10_snippet_16\n\nLANGUAGE: sql\nCODE:\n```\nSELECT filter(ARRAY [], x -> true);\nSELECT filter(ARRAY [5, -6, NULL, 7], x -> x > 0);\nSELECT filter(ARRAY [5, NULL, 7, NULL], x -> x IS NOT NULL);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Values from Maps using Subscript Operator in SQL\nDESCRIPTION: Demonstrates how to use the [] subscript operator to retrieve a value from a map using a key.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/map.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT name_to_age_map['Bob'] AS bob_age;\n```\n\n----------------------------------------\n\nTITLE: JSON Parsing Basic Examples in PrestoDB\nDESCRIPTION: Shows basic usage of json_parse function which deserializes JSON text into JSON values. Demonstrates parsing of simple JSON values.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/json.rst.txt#2025-04-10_snippet_13\n\nLANGUAGE: sql\nCODE:\n```\nSELECT json_parse('[1, 2, 3]');\nSELECT json_parse('\"abc\"');\n```\n\n----------------------------------------\n\nTITLE: Finding Set Difference Between Arrays in Presto SQL\nDESCRIPTION: Shows how to use array_except function to find elements in one array but not in another, without duplicates.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/array.rst.txt#2025-04-10_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nSELECT array_except(ARRAY[1, 3, 3, 2, null], ARRAY[1,2, 2, 4]) -- ARRAY[3, null]\n```\n\n----------------------------------------\n\nTITLE: Adding and Dropping Columns in Presto SQL\nDESCRIPTION: Examples of adding and dropping columns using ALTER TABLE command in Presto SQL, including conditional operations.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/alter-table.rst#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE users ADD COLUMN zip varchar;\n\nALTER TABLE IF EXISTS users ADD COLUMN IF NOT EXISTS zip varchar;\n\nALTER TABLE users DROP COLUMN zip;\n\nALTER TABLE IF EXISTS users DROP COLUMN IF EXISTS zip;\n```\n\n----------------------------------------\n\nTITLE: HAVING Clause Example in Presto SQL\nDESCRIPTION: Shows how to use HAVING clause with GROUP BY to filter grouped results based on aggregate conditions.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/select.rst#2025-04-10_snippet_16\n\nLANGUAGE: sql\nCODE:\n```\nSELECT count(*), mktsegment, nationkey,\n       CAST(sum(acctbal) AS bigint) AS totalbal\nFROM customer\nGROUP BY mktsegment, nationkey\nHAVING sum(acctbal) > 5700000\nORDER BY totalbal DESC;\n```\n\n----------------------------------------\n\nTITLE: Using TRY with COALESCE for Default Values in Presto SQL\nDESCRIPTION: Demonstrates using TRY in conjunction with COALESCE to provide default values (0) when division by zero would occur, preventing query failure.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/conditional.rst.txt#2025-04-10_snippet_13\n\nLANGUAGE: sql\nCODE:\n```\nSELECT COALESCE(TRY(total_cost / packages), 0) AS per_package FROM shipping;\n```\n\n----------------------------------------\n\nTITLE: Configuring Delta Lake Connector Properties\nDESCRIPTION: Basic configuration for the Delta Lake connector in Presto. This creates a catalog properties file that defines the connector name and Hive metastore URI for Delta Lake table registration.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/deltalake.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nconnector.name=delta\nhive.metastore.uri=hostname:port\n```\n\n----------------------------------------\n\nTITLE: Creating a Table with Column Aliases in Presto SQL\nDESCRIPTION: Example of creating a new table with specified column aliases that renames columns from the source query. The new table 'orders_column_aliased' will have columns named 'order_date' and 'total_price'.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/sql/create-table-as.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE orders_column_aliased (order_date, total_price)\nAS\nSELECT orderdate, totalprice\nFROM orders\n```\n\n----------------------------------------\n\nTITLE: Listing Grants for Current User on Specific Table in Presto SQL\nDESCRIPTION: Example of using SHOW GRANTS to list the grants for the current user on the 'orders' table in the current catalog.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/show-grants.rst#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSHOW GRANTS ON TABLE orders;\n```\n\n----------------------------------------\n\nTITLE: Creating a Table with Comments and Properties in Presto SQL\nDESCRIPTION: Example of creating a new table with a comment and table properties. The table uses the ORC format and contains summarized order data grouped by date.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/sql/create-table-as.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE orders_by_date\nCOMMENT 'Summary of orders by date'\nWITH (format = 'ORC')\nAS\nSELECT orderdate, sum(totalprice) AS price\nFROM orders\nGROUP BY orderdate\n```\n\n----------------------------------------\n\nTITLE: Listing System Schemas in Presto\nDESCRIPTION: SQL query to list all available schemas in the system catalog. The system connector automatically provides this catalog without additional configuration.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/system.rst#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSHOW SCHEMAS FROM system;\n```\n\n----------------------------------------\n\nTITLE: Using json_array_get Function in Presto\nDESCRIPTION: Examples of retrieving array elements by index using the json_array_get function. Demonstrates zero-based indexing, negative indices for accessing from the end, and handling out-of-bounds indices.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/json.rst.txt#2025-04-10_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nSELECT json_array_get('[\"a\", [3, 9], \"c\"]', 0); -- JSON 'a' (invalid JSON)\nSELECT json_array_get('[\"a\", [3, 9], \"c\"]', 1); -- JSON '[3,9]'\n```\n\n----------------------------------------\n\nTITLE: Querying Binary Classification Metrics with PrestoDB SQL\nDESCRIPTION: Example showing how to use classification metric functions to compute precision-recall curve values from a classification dataset. The query uses aggregate functions to calculate recall and precision values at multiple thresholds.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/aggregate.rst#2025-04-10_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nWITH\n    recall_precision AS (\n        SELECT\n            CLASSIFICATION_RECALL(10000, correct, pred) AS recalls,\n            CLASSIFICATION_PRECISION(10000, correct, pred) AS precisions\n        FROM\n           classification_dataset\n    )\nSELECT\n    recall,\n    precision\nFROM\n    recall_precision\nCROSS JOIN UNNEST(recalls, precisions) AS t(recall, precision)\n```\n\n----------------------------------------\n\nTITLE: Configuring Read-Only System Access Control in Presto\nDESCRIPTION: This code snippet shows how to configure the read-only system access control plugin in Presto by creating an access-control.properties file.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/security/built-in-system-access-control.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: none\nCODE:\n```\naccess-control.name=read-only\n```\n\n----------------------------------------\n\nTITLE: Time Travel Queries Using VERSION and TIMESTAMP in Presto SQL\nDESCRIPTION: Demonstrates using VERSION (SYSTEM_VERSION) and TIMESTAMP (SYSTEM_TIME) options for time travel queries on Iceberg tables in Presto.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/iceberg.rst.txt#2025-04-10_snippet_59\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO ctas_nation VALUES(10, 'united states', 1, 'comment');\n\nINSERT INTO ctas_nation VALUES(20, 'canada', 2, 'comment');\n\nINSERT INTO ctas_nation VALUES(30, 'mexico', 3, 'comment');\n\nSELECT * FROM ctas_nation FOR VERSION AS OF 5300424205832769799;\n\nSELECT * FROM ctas_nation FOR SYSTEM_VERSION AS OF 5300424205832769799;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM ctas_nation FOR SYSTEM_VERSION BEFORE 6891257133877048303;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM ctas_nation FOR TIMESTAMP AS OF TIMESTAMP '2023-10-17 13:29:46.822 America/Los_Angeles';\nSELECT * FROM ctas_nation FOR TIMESTAMP AS OF TIMESTAMP '2023-10-17 13:29:46.822';\n\nSELECT * FROM ctas_nation FOR SYSTEM_TIME AS OF TIMESTAMP '2023-10-17 13:29:46.822 America/Los_Angeles';\nSELECT * FROM ctas_nation FOR SYSTEM_TIME AS OF TIMESTAMP '2023-10-17 13:29:46.822';\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM ctas_nation FOR TIMESTAMP AS OF CURRENT_TIMESTAMP;\n```\n\n----------------------------------------\n\nTITLE: Killing a Running Query with System Procedure\nDESCRIPTION: SQL procedure call to terminate a running query using the kill_query procedure. It requires the query_id to identify the query and accepts a message parameter that will be included in the query failure message.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/system.rst#2025-04-10_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nCALL system.runtime.kill_query(query_id => '20151207_215727_00146_tx3nr', message => 'Using too many resources');\n```\n\n----------------------------------------\n\nTITLE: Array Reduction in Presto SQL\nDESCRIPTION: Shows reduce function usage which combines array elements into a single value using input and output transformation functions.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/array.rst.txt#2025-04-10_snippet_17\n\nLANGUAGE: sql\nCODE:\n```\nSELECT reduce(ARRAY [], 0, (s, x) -> s + x, s -> s);\nSELECT reduce(ARRAY [5, 20, 50], 0, (s, x) -> s + x, s -> s);\nSELECT reduce(ARRAY [5, 20, NULL, 50], 0, (s, x) -> s + COALESCE(x, 0), s -> s);\n```\n\n----------------------------------------\n\nTITLE: Using cast() Function in Presto\nDESCRIPTION: Demonstrates how to explicitly cast values from one type to another in Presto SQL.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/conversion.rst#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\ncast(value AS type) -> type\n```\n\n----------------------------------------\n\nTITLE: Granting SELECT Privilege with GRANT OPTION in Presto SQL\nDESCRIPTION: Example of granting SELECT privilege on the 'nation' table to user 'alice' with the ability to grant this privilege to others.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/grant.rst#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nGRANT SELECT ON nation TO alice WITH GRANT OPTION;\n```\n\n----------------------------------------\n\nTITLE: Filtering Groups with HAVING in Presto SQL\nDESCRIPTION: Shows how to use the HAVING clause to filter groups based on aggregate conditions after GROUP BY is applied.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/sql/select.rst.txt#2025-04-10_snippet_22\n\nLANGUAGE: sql\nCODE:\n```\nSELECT count(*), mktsegment, nationkey,\n       CAST(sum(acctbal) AS bigint) AS totalbal\nFROM customer\nGROUP BY mktsegment, nationkey\nHAVING sum(acctbal) > 5700000\nORDER BY totalbal DESC;\n```\n\n----------------------------------------\n\nTITLE: Using GROUPING Function in Presto SQL\nDESCRIPTION: Illustrates the usage of the GROUPING function to determine which columns are present in a grouping, used with GROUPING SETS.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/sql/select.rst.txt#2025-04-10_snippet_21\n\nLANGUAGE: sql\nCODE:\n```\nSELECT origin_state, origin_zip, destination_state, sum(package_weight),\n       grouping(origin_state, origin_zip, destination_state)\nFROM shipping\nGROUP BY GROUPING SETS (\n        (origin_state),\n        (origin_state, origin_zip),\n        (destination_state));\n```\n\n----------------------------------------\n\nTITLE: Extracting Binary Substrings in Presto SQL\nDESCRIPTION: The substr() function extracts a portion of binary data based on start position and optional length.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/binary.rst#2025-04-10_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nsubstr(binary, start) -> varbinary\n```\n\nLANGUAGE: SQL\nCODE:\n```\nsubstr(binary, start, length) -> varbinary\n```\n\n----------------------------------------\n\nTITLE: JOIN Types in Presto SQL SELECT Statement\nDESCRIPTION: Lists the available join types in Presto SQL, including INNER, LEFT OUTER, RIGHT OUTER, FULL OUTER, and CROSS JOIN.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/select.rst#2025-04-10_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\n[ INNER ] JOIN\nLEFT [ OUTER ] JOIN\nRIGHT [ OUTER ] JOIN\nFULL [ OUTER ] JOIN\nCROSS JOIN\n```\n\n----------------------------------------\n\nTITLE: JOIN Types in Presto SQL SELECT Statement\nDESCRIPTION: Lists the available join types in Presto SQL, including INNER, LEFT OUTER, RIGHT OUTER, FULL OUTER, and CROSS JOIN.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/select.rst#2025-04-10_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\n[ INNER ] JOIN\nLEFT [ OUTER ] JOIN\nRIGHT [ OUTER ] JOIN\nFULL [ OUTER ] JOIN\nCROSS JOIN\n```\n\n----------------------------------------\n\nTITLE: Extracting Specific Capturing Group with regexp_extract in Presto SQL\nDESCRIPTION: Demonstrates how to use regexp_extract function with a specified capturing group number to return the first occurrence of that group.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/regexp.rst#2025-04-10_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT regexp_extract('1a 2b 14m', '(\\d+)([a-z]+)', 2); -- 'a'\n```\n\n----------------------------------------\n\nTITLE: Querying Hidden Bucket Column in Hive\nDESCRIPTION: Introduces a hidden '$bucket' column for bucketed tables in Hive, which contains the bucket number for the current row. This allows for advanced querying and analysis based on bucket information.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.158.rst#2025-04-10_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT *, $bucket FROM bucketed_table;\n```\n\n----------------------------------------\n\nTITLE: EXPLAIN ANALYZE Basic Syntax in Presto SQL\nDESCRIPTION: The basic syntax for the EXPLAIN ANALYZE command in Presto, which allows optional VERBOSE mode and format selection (TEXT or JSON).\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/sql/explain-analyze.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: none\nCODE:\n```\nEXPLAIN ANALYZE [VERBOSE] [(format <TEXT|JSON>)] statement\n```\n\n----------------------------------------\n\nTITLE: Creating a Table with Constraints and Comments in Presto SQL\nDESCRIPTION: Shows how to create a table with an IF NOT EXISTS clause, a table comment, a column comment, a NOT NULL constraint, and a primary key constraint.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/sql/create-table.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE IF NOT EXISTS orders (\n  orderkey bigint,\n  orderstatus varchar NOT NULL,\n  totalprice double COMMENT 'Price in cents.',\n  orderdate date,\n  PRIMARY KEY (orderkey)\n)\nCOMMENT 'A table to keep track of orders.'\n```\n\n----------------------------------------\n\nTITLE: Using typeof() Function in Presto\nDESCRIPTION: Demonstrates the typeof() function which returns the name of the data type of the provided expression.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/conversion.rst#2025-04-10_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\ntypeof(expr) -> varchar\n```\n\n----------------------------------------\n\nTITLE: Creating Map from Entries in Presto SQL\nDESCRIPTION: Shows how to create a map from an array of key-value pairs using map_from_entries function.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/map.rst.txt#2025-04-10_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT map_from_entries(ARRAY[(1, 'x'), (2, 'y')]); -- {1 -> 'x', 2 -> 'y'}\n```\n\n----------------------------------------\n\nTITLE: Testing If No Keys Match Predicate in SQL\nDESCRIPTION: The no_keys_match function tests whether no keys in a map satisfy a given predicate. Returns true if none of the keys match (including empty maps), false if at least one key matches, and NULL in special cases.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/map.rst#2025-04-10_snippet_18\n\nLANGUAGE: sql\nCODE:\n```\nSELECT no_keys_match(map(array['a', 'b', 'c'], array[1, 2, 3]), x -> x = 'd'); -- true\n```\n\n----------------------------------------\n\nTITLE: GROUP BY Grouping Elements in Presto SQL\nDESCRIPTION: Syntax options for grouping elements in the GROUP BY clause, including empty groups, expressions, GROUPING SETS, CUBE, and ROLLUP operations.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/sql/select.rst.txt#2025-04-10_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\n()\nexpression\nGROUPING SETS ( ( column [, ...] ) [, ...] )\nCUBE ( column [, ...] )\nROLLUP ( column [, ...] )\n```\n\n----------------------------------------\n\nTITLE: Basic Window Function Syntax in SQL\nDESCRIPTION: Demonstrates the basic syntax for invoking a window function using the OVER clause, including optional PARTITION BY, ORDER BY, and frame clauses.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/window.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nfunction(args) OVER (\n    [PARTITION BY expression]\n    [ORDER BY expression [ASC|DESC]]\n    [frame]\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Iceberg Table with Year Partition Transform\nDESCRIPTION: Example of creating an Iceberg table partitioned by year using a date column. This transform extracts years from the date field for partitioning.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/iceberg.rst.txt#2025-04-10_snippet_38\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE players (\n    id int,\n    name varchar,\n    team varchar,\n    ds date\n)\nWITH (\n    format = 'ORC',\n    partitioning = ARRAY['year(ds)']\n);\n```\n\n----------------------------------------\n\nTITLE: Extracting Day of Week in Presto SQL\nDESCRIPTION: The 'day_of_week' function returns the ISO day of the week from a given date or timestamp value. The result ranges from 1 (Monday) to 7 (Sunday). It's also aliased as 'dow'. The function returns a bigint value.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/datetime.rst.txt#2025-04-10_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\nday_of_week(x) -> bigint\n```\n\nLANGUAGE: SQL\nCODE:\n```\ndow(x) -> bigint\n```\n\n----------------------------------------\n\nTITLE: Extracting Map Entries in SQL\nDESCRIPTION: The map_entries function returns an array containing all key-value pairs from a map. Each pair is represented as a row with two fields: the key and the value.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/map.rst#2025-04-10_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nSELECT map_entries(MAP(ARRAY[1, 2], ARRAY['x', 'y'])); -- [ROW(1, 'x'), ROW(2, 'y')]\n```\n\n----------------------------------------\n\nTITLE: Array Overlap Testing in Presto SQL\nDESCRIPTION: Examples of using arrays_overlap() to test if arrays have common elements. Shows handling of null values and error cases with complex types.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/array.rst#2025-04-10_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nSELECT arrays_overlap(ARRAY [1, 2, null], ARRAY [2, 3, null]);\nSELECT arrays_overlap(ARRAY [1, 2], ARRAY [3, 4]);\nSELECT arrays_overlap(ARRAY [1, null], ARRAY[2]);\nSELECT arrays_overlap(ARRAY[ROW(1, null)], ARRAY[1, 2])\n```\n\n----------------------------------------\n\nTITLE: Array Top N Elements in Presto SQL\nDESCRIPTION: Demonstrates array_top_n function which returns the top N elements from an array in descending order.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/array.rst.txt#2025-04-10_snippet_14\n\nLANGUAGE: sql\nCODE:\n```\nSELECT array_top_n(ARRAY [1, 100, 2, 5, 3], 3);\nSELECT array_top_n(ARRAY [1, 100], 5);\nSELECT array_top_n(ARRAY ['a', 'zzz', 'zz', 'b', 'g', 'f'], 3);\n```\n\n----------------------------------------\n\nTITLE: URL-Safe Base64 Encoding and Decoding in Presto SQL\nDESCRIPTION: Functions for encoding and decoding binary data using URL-safe base64 alphabet.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/binary.rst#2025-04-10_snippet_5\n\nLANGUAGE: SQL\nCODE:\n```\nto_base64url(binary) -> varchar\n```\n\nLANGUAGE: SQL\nCODE:\n```\nfrom_base64url(string) -> varbinary\n```\n\n----------------------------------------\n\nTITLE: Using String Trimming Functions in Presto SQL\nDESCRIPTION: Examples of using ltrim() and rtrim() functions with character specification to remove specific characters from the beginning or end of strings.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/string.rst#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT ltrim('test', 't'); -- est\nSELECT ltrim('tetris', 'te'); -- ris\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT rtrim('test', 't'); -- tes\nSELECT rtrim('test...', '.'); -- test\n```\n\n----------------------------------------\n\nTITLE: ROLLUP with Equivalent GROUPING SETS\nDESCRIPTION: Query showing how ROLLUP can be expressed using equivalent GROUPING SETS syntax, explicitly listing the hierarchical grouping combinations.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/sql/select.rst.txt#2025-04-10_snippet_16\n\nLANGUAGE: sql\nCODE:\n```\nSELECT origin_state, origin_zip, sum(package_weight)\nFROM shipping\nGROUP BY GROUPING SETS ((origin_state, origin_zip), (origin_state), ());\n```\n\n----------------------------------------\n\nTITLE: Combining Multiple Grouping Expressions in Presto SQL\nDESCRIPTION: Example demonstrating how to combine multiple grouping expressions (GROUPING SETS with ROLLUP) in the same query, which creates a cross-product of the grouping sets.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/sql/select.rst.txt#2025-04-10_snippet_17\n\nLANGUAGE: sql\nCODE:\n```\nSELECT origin_state, destination_state, origin_zip, sum(package_weight)\nFROM shipping\nGROUP BY\n    GROUPING SETS ((origin_state, destination_state)),\n    ROLLUP (origin_zip);\n```\n\n----------------------------------------\n\nTITLE: Basic CREATE VIEW Syntax in Presto SQL\nDESCRIPTION: The fundamental syntax for creating views in Presto SQL, showing optional OR REPLACE clause and security mode specification.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/sql/create-view.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: none\nCODE:\n```\nCREATE [ OR REPLACE ] VIEW view_name\n[ SECURITY { DEFINER | INVOKER } ]\nAS query\n```\n\n----------------------------------------\n\nTITLE: Query Result - Symbol Group By\nDESCRIPTION: Result set showing the output of the symbol grouping query with maximum timestamp.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/hudi.rst#2025-04-10_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n  symbol   |        _col1         |\n-----------+----------------------+\n GOOG      | 2018-08-31 10:59:00  |\n(1 rows)\n```\n\n----------------------------------------\n\nTITLE: Renaming Columns in Presto SQL\nDESCRIPTION: Examples of renaming columns using ALTER TABLE command in Presto SQL, including conditional renaming.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/alter-table.rst#2025-04-10_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE users RENAME COLUMN id TO user_id;\n\nALTER TABLE IF EXISTS users RENAME column IF EXISTS id to user_id;\n```\n\n----------------------------------------\n\nTITLE: Adding and Dropping Columns in Presto SQL\nDESCRIPTION: Examples of adding and dropping columns using the ALTER TABLE command in Presto SQL, with various conditional clauses.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/sql/alter-table.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE users ADD COLUMN zip varchar;\n```\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE IF EXISTS users ADD COLUMN IF NOT EXISTS zip varchar;\n```\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE users DROP COLUMN zip;\n```\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE IF EXISTS users DROP COLUMN IF EXISTS zip;\n```\n\n----------------------------------------\n\nTITLE: CUBE Grouping Operation in Presto SQL\nDESCRIPTION: Example showing CUBE operation, which generates all possible grouping combinations (power set) for the specified columns, creating a multidimensional aggregation.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/sql/select.rst.txt#2025-04-10_snippet_13\n\nLANGUAGE: sql\nCODE:\n```\nSELECT origin_state, destination_state, sum(package_weight)\nFROM shipping\nGROUP BY CUBE (origin_state, destination_state);\n```\n\n----------------------------------------\n\nTITLE: Querying Live Twitter Data with Presto SQL\nDESCRIPTION: Example SQL queries demonstrating how to analyze live Twitter data, including count operations and detailed record retrieval.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/kafka-tutorial.rst#2025-04-10_snippet_16\n\nLANGUAGE: sql\nCODE:\n```\nSELECT count(*) FROM tweets;\n\nSELECT kafka_key, user_name, lang, created_at FROM tweets LIMIT 10;\n\nSELECT DISTINCT json_extract_scalar(_message, '$.created_at')) AS raw_date FROM tweets LIMIT 5;\n\nSELECT created_at, raw_date FROM (\n  SELECT created_at, json_extract_scalar(_message, '$.created_at') AS raw_date\n  FROM tweets)\nGROUP BY 1, 2 LIMIT 5;\n```\n\n----------------------------------------\n\nTITLE: Retrieving Top N Keys from Map in Presto SQL\nDESCRIPTION: Shows how to get the top N keys from a map based on key ordering or a custom comparator function.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/map.rst.txt#2025-04-10_snippet_9\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT map_top_n_keys(map(ARRAY['a', 'b', 'c'], ARRAY[3, 2, 1]), 2) --- ['c', 'b']\n\nSELECT map_top_n_keys(map(ARRAY['a', 'b', 'c'], ARRAY[3, 2, 1]), 2, (x, y) -> IF(x < y, -1, IF(x = y, 0, 1))) --- ['c', 'b']\n```\n\n----------------------------------------\n\nTITLE: Creating and Querying HyperLogLog Sketches in Presto SQL\nDESCRIPTION: Shows how to create a table for storing HyperLogLog sketches, insert data using approx_set function, and query the sketches to compute weekly unique users. This example demonstrates the practical use of HyperLogLog for efficient cardinality estimation.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/hyperloglog.rst#2025-04-10_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE visit_summaries (\n  visit_date date,\n  hll varbinary\n);\n\nINSERT INTO visit_summaries\nSELECT visit_date, cast(approx_set(user_id) AS varbinary)\nFROM user_visits\nGROUP BY visit_date;\n\nSELECT cardinality(merge(cast(hll AS HyperLogLog))) AS weekly_unique_users\nFROM visit_summaries\nWHERE visit_date >= current_date - interval '7' day;\n```\n\n----------------------------------------\n\nTITLE: Creating Simple View with Column Calculation\nDESCRIPTION: Example of creating a basic view that selects specific columns and includes a calculated field from the orders table.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/sql/create-view.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCREATE VIEW test AS\nSELECT orderkey, orderstatus, totalprice / 2 AS half\nFROM orders\n```\n\n----------------------------------------\n\nTITLE: Modifying Column Constraints in Presto SQL\nDESCRIPTION: Examples of adding and dropping NOT NULL constraints on columns using the ALTER TABLE command in Presto SQL.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/sql/alter-table.rst.txt#2025-04-10_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE users ALTER COLUMN zip SET NOT NULL;\n```\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE IF EXISTS users ALTER zip SET NOT NULL;\n```\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE users ALTER COLUMN zip DROP NOT NULL;\n```\n\n----------------------------------------\n\nTITLE: Querying Table List in PrestoDB with SHOW TABLES\nDESCRIPTION: SQL command syntax for listing tables in a schema. Can be used with an optional schema specification and LIKE pattern matching with custom escape character. The command returns a list of all tables in the specified or current schema.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/show-tables.rst#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSHOW TABLES [ FROM schema ] [ LIKE pattern [ ESCAPE 'escape_character' ] ]\n```\n\n----------------------------------------\n\nTITLE: GROUPING SETS Example in Presto SQL\nDESCRIPTION: Shows how to use GROUPING SETS to specify multiple lists of columns to group on in a single query.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/select.rst#2025-04-10_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nSELECT origin_state, origin_zip, destination_state, sum(package_weight)\nFROM shipping\nGROUP BY GROUPING SETS (\n    (origin_state),\n    (origin_state, origin_zip),\n    (destination_state));\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL Connector Properties\nDESCRIPTION: Basic configuration properties for connecting PrestoDB to PostgreSQL database. Includes essential connection parameters like connector name, URL, username and password.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/postgresql.rst#2025-04-10_snippet_0\n\nLANGUAGE: none\nCODE:\n```\nconnector.name=postgresql\nconnection-url=jdbc:postgresql://example.net:5432/database\nconnection-user=root\nconnection-password=secret\n```\n\n----------------------------------------\n\nTITLE: Parsing String to Timestamp in Presto SQL\nDESCRIPTION: The date_parse function parses a string into a timestamp using a specified format string. This function is compatible with MySQL's str_to_date function.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/datetime.rst#2025-04-10_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\ndate_parse(string, format) -> timestamp\n```\n\n----------------------------------------\n\nTITLE: Extracting Quarter in Presto SQL\nDESCRIPTION: The 'quarter' function returns the quarter of the year from a given date or timestamp value. The result ranges from 1 to 4. The function returns a bigint value.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/datetime.rst.txt#2025-04-10_snippet_10\n\nLANGUAGE: SQL\nCODE:\n```\nquarter(x) -> bigint\n```\n\n----------------------------------------\n\nTITLE: Setting Max Total Memory Per Node for Queries in Presto\nDESCRIPTION: Defines the maximum amount of user and system memory a query can use on a worker node. When the combined user and system memory allocation reaches this limit, the query will be killed.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/admin/properties.rst#2025-04-10_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nquery.max-total-memory-per-node = query.max-memory-per-node * 2\n```\n\n----------------------------------------\n\nTITLE: Creating Map from Arrays in Presto SQL\nDESCRIPTION: Demonstrates creating a map from two arrays, one for keys and one for values.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/map.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT map(ARRAY[1,3], ARRAY[2,4]); -- {1 -> 2, 3 -> 4}\n```\n\n----------------------------------------\n\nTITLE: UNNEST with Multiple Array Columns in Presto SQL\nDESCRIPTION: UNNEST can be used with multiple array columns, expanding them into multiple columns with rows padded with nulls for arrays of different lengths.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/select.rst#2025-04-10_snippet_25\n\nLANGUAGE: sql\nCODE:\n```\nSELECT numbers, animals, n, a\nFROM (\n  VALUES\n    (ARRAY[2, 5], ARRAY['dog', 'cat', 'bird']),\n    (ARRAY[7, 8, 9], ARRAY['cow', 'pig'])\n) AS x (numbers, animals)\nCROSS JOIN UNNEST(numbers, animals) AS t (n, a);\n```\n\n----------------------------------------\n\nTITLE: Finding Intersection of Arrays in Presto SQL\nDESCRIPTION: Shows how to use array_intersect function to find the intersection of two arrays or multiple arrays, without duplicates.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/array.rst.txt#2025-04-10_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nSELECT array_intersect(ARRAY[1, 2, 3, 2, null], ARRAY[1,2, 2, 4, null]) -- ARRAY[1, 2, null]\n\nSELECT array_intersect(ARRAY[ARRAY[1, 2, 3, 2, null], ARRAY[1,2,2, 4, null], ARRAY [1, 2, 3, 4 null]])  -- ARRAY[1, 2, null]\n```\n\n----------------------------------------\n\nTITLE: Trigonometric Functions\nDESCRIPTION: Standard trigonometric functions operating on radian inputs, including basic and inverse trigonometric operations.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/math.rst.txt#2025-04-10_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nacos(x) -> double\n```\n\nLANGUAGE: sql\nCODE:\n```\nasin(x) -> double\n```\n\nLANGUAGE: sql\nCODE:\n```\natan(x) -> double\n```\n\nLANGUAGE: sql\nCODE:\n```\natan2(y, x) -> double\n```\n\nLANGUAGE: sql\nCODE:\n```\ncos(x) -> double\n```\n\nLANGUAGE: sql\nCODE:\n```\ncosh(x) -> double\n```\n\nLANGUAGE: sql\nCODE:\n```\nsin(x) -> double\n```\n\nLANGUAGE: sql\nCODE:\n```\ntan(x) -> double\n```\n\nLANGUAGE: sql\nCODE:\n```\ntanh(x) -> double\n```\n\n----------------------------------------\n\nTITLE: Querying Map Element in SQL\nDESCRIPTION: Fixes a query execution failure for accessing map elements using the split_to_map function and square bracket notation.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.184.rst#2025-04-10_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nsplit_to_map(...)[...]\n```\n\n----------------------------------------\n\nTITLE: Configuring Join Distribution Type in Presto\nDESCRIPTION: Sets the type of distributed join to use in Presto. Options include AUTOMATIC, PARTITIONED, and BROADCAST. AUTOMATIC uses cost-based decision making, PARTITIONED uses hash distributed joins, and BROADCAST broadcasts the right table to all nodes.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/admin/properties.rst#2025-04-10_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\njoin-distribution-type = AUTOMATIC\n```\n\n----------------------------------------\n\nTITLE: Testing If No Values Match Predicate in SQL\nDESCRIPTION: The no_values_match function tests whether no values in a map satisfy a given predicate. Returns true if none of the values match (including empty maps), false if at least one value matches, and NULL in special cases.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/map.rst#2025-04-10_snippet_19\n\nLANGUAGE: sql\nCODE:\n```\nSELECT no_values_match(map(array['a', 'b', 'c'], array[1, 2, 3]), x -> x = 'd'); -- true\n```\n\n----------------------------------------\n\nTITLE: Using ST_Length with SphericalGeography in Presto\nDESCRIPTION: Returns the length of a linestring or multi-linestring on a spherical model of the Earth. This is equivalent to the sum of great-circle distances between adjacent points on the linestring.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/geospatial.rst#2025-04-10_snippet_18\n\nLANGUAGE: sql\nCODE:\n```\nST_Length(SphericalGeography) -> double\n```\n\n----------------------------------------\n\nTITLE: Using TRY for Error Handling with Type Casting in Presto SQL\nDESCRIPTION: Demonstrates using the TRY function to handle cast errors by returning NULL instead of failing the query when an invalid value is encountered.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/conditional.rst.txt#2025-04-10_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nSELECT TRY(CAST(origin_zip AS BIGINT)) FROM shipping;\n```\n\n----------------------------------------\n\nTITLE: Creating an Iceberg Table with ORC Format and Column Partitioning in Presto\nDESCRIPTION: Creates an Iceberg table named 'page_views' with timestamp, bigint, varchar, and date columns. The table uses ORC file format and is partitioned by the 'ds' and 'country' columns.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/iceberg.rst#2025-04-10_snippet_37\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE iceberg.web.page_views (\n  view_time timestamp,\n  user_id bigint,\n  page_url varchar,\n  ds date,\n  country varchar\n)\nWITH (\n  format = 'ORC',\n  partitioning = ARRAY['ds', 'country']\n)\n```\n\n----------------------------------------\n\nTITLE: Zipping Arrays in Presto SQL\nDESCRIPTION: The zip function merges multiple arrays element-wise into a single array of rows. If arrays have uneven lengths, missing values are filled with NULL.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/array.rst#2025-04-10_snippet_13\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT zip(ARRAY[1, 2], ARRAY['1b', null, '3b']); -- [ROW(1, '1b'), ROW(2, null), ROW(null, '3b')]\n```\n\n----------------------------------------\n\nTITLE: Accessing Array Elements with Subscript Operator in Presto SQL\nDESCRIPTION: Demonstrates how to use the [] operator to access elements of an array, indexed starting from one.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/array.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT my_array[1] AS first_element\n```\n\n----------------------------------------\n\nTITLE: Sorting Results with ORDER BY in Presto SQL\nDESCRIPTION: Shows how to use the ORDER BY clause to sort query results, including options for ascending/descending order and null handling.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/sql/select.rst.txt#2025-04-10_snippet_24\n\nLANGUAGE: sql\nCODE:\n```\nSELECT name FROM nation ORDER BY name OFFSET 22;\n```\n\n----------------------------------------\n\nTITLE: Ranking Orders by Price for Each Clerk in SQL\nDESCRIPTION: Example query that ranks orders for each clerk based on total price using the rank() window function.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/window.rst#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT orderkey, clerk, totalprice,\n       rank() OVER (PARTITION BY clerk\n                    ORDER BY totalprice DESC) AS rnk\nFROM orders\nORDER BY clerk, rnk\n```\n\n----------------------------------------\n\nTITLE: Analyzing Partitioned Hive Table with Presto\nDESCRIPTION: This SQL snippet demonstrates how to use the ANALYZE statement in Presto to collect statistics for specific partitions of a Hive table. It shows the syntax for specifying partition values.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/hive.rst#2025-04-10_snippet_11\n\nLANGUAGE: none\nCODE:\n```\nANALYZE hive.sales WITH (\n    partitions = ARRAY[\n        ARRAY['partition1_value1', 'partition1_value2'],\n        ARRAY['partition2_value1', 'partition2_value2']]);\n```\n\n----------------------------------------\n\nTITLE: Using array_agg with ORDER BY clause in Presto SQL\nDESCRIPTION: Demonstrates how to use the array_agg aggregate function with ORDER BY clauses to control the ordering of elements in the resulting array.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/aggregate.rst#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\narray_agg(x ORDER BY y DESC)\narray_agg(x ORDER BY x, y, z)\n```\n\n----------------------------------------\n\nTITLE: Zipping and Transforming Arrays in Presto SQL\nDESCRIPTION: The zip_with function merges two arrays element-wise using a provided function. If one array is shorter, nulls are appended before applying the function.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/array.rst.txt#2025-04-10_snippet_21\n\nLANGUAGE: sql\nCODE:\n```\nSELECT zip_with(ARRAY[1, 3, 5], ARRAY['a', 'b', 'c'], (x, y) -> (y, x)); -- [ROW('a', 1), ROW('b', 3), ROW('c', 5)]\nSELECT zip_with(ARRAY[1, 2], ARRAY[3, 4], (x, y) -> x + y); -- [4, 6]\nSELECT zip_with(ARRAY['a', 'b', 'c'], ARRAY['d', 'e', 'f'], (x, y) -> concat(x, y)); -- ['ad', 'be', 'cf']\nSELECT zip_with(ARRAY['a'], ARRAY['d', null, 'f'], (x, y) -> coalesce(x, y)); -- ['a', null, 'f']\n```\n\n----------------------------------------\n\nTITLE: Multi-Column VALUES Example in Presto SQL\nDESCRIPTION: Creates a two-column table with three rows using the VALUES clause with parentheses for each row.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/sql/values.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nVALUES\n    (1, 'a'),\n    (2, 'b'),\n    (3, 'c')\n```\n\n----------------------------------------\n\nTITLE: Creating Geometry from GeoJSON in Presto SQL\nDESCRIPTION: Returns a geometry object from its GeoJSON representation.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/geospatial.rst.txt#2025-04-10_snippet_28\n\nLANGUAGE: SQL\nCODE:\n```\ngeometry_from_geojson(varchar) -> Geometry\n```\n\n----------------------------------------\n\nTITLE: Using all_keys_match Function in SQL\nDESCRIPTION: The all_keys_match function tests whether all keys in a map satisfy a given predicate condition. Returns true if all keys match the predicate, false otherwise, and NULL in special cases.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/map.rst#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT all_keys_match(map(array['a', 'b', 'c'], array[1, 2, 3]), x -> length(x) = 1); -- true\n```\n\n----------------------------------------\n\nTITLE: IN Subquery in Presto SQL\nDESCRIPTION: The IN predicate determines if any values produced by the subquery are equal to the provided expression. The subquery must produce exactly one column.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/select.rst#2025-04-10_snippet_32\n\nLANGUAGE: sql\nCODE:\n```\nSELECT name\nFROM nation\nWHERE regionkey IN (SELECT regionkey FROM region)\n```\n\n----------------------------------------\n\nTITLE: Basic Reservoir Sampling in Presto SQL\nDESCRIPTION: Demonstrates basic usage of reservoir_sample() function to randomly sample 5 values from a sequence of 10 numbers. The function maintains a fixed sample size while ensuring equal probability of selection for each record.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/aggregate.rst#2025-04-10_snippet_12\n\nLANGUAGE: sql\nCODE:\n```\nWITH result as (\n    SELECT\n        reservoir_sample(NULL, 0, col, 5) as reservoir\n    FROM (\n        VALUES\n        1, 2, 3, 4, 5, 6, 7, 8, 9, 0\n    ) as t(col)\n)\nSELECT \n    reservoir.processed_count, reservoir.sample\nFROM result;\n```\n\nLANGUAGE: text\nCODE:\n```\n processed_count |     sample\n-----------------+-----------------\n              10 | [1, 2, 8, 4, 5]\n```\n\n----------------------------------------\n\nTITLE: Configuring Iceberg Catalog Type in Presto\nDESCRIPTION: Shows how to configure the Iceberg catalog type, replacing the deprecated native-mode property.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.270.rst#2025-04-10_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nSET SESSION iceberg.catalog.type = 'your_catalog_type';\n```\n\n----------------------------------------\n\nTITLE: Using set_agg Function in Presto SQL\nDESCRIPTION: Examples of using set_agg to create arrays of distinct values, demonstrating behavior with NULL values and complex row types.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/aggregate.rst#2025-04-10_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSELECT set_agg(x) FROM (VALUES(1), (2), (null), (2), (null)) t(x) -- ARRAY[1, 2, null]\nSELECT set_agg(x) FROM (VALUES(ROW(ROW(1, null))), ROW((ROW(2, 'a'))), ROW((ROW(1, null))), (null)) t(x) -- ARRAY[ROW(1, null), ROW(2, 'a'), null]\n```\n\n----------------------------------------\n\nTITLE: Accessing Array Elements with Subscript Operator in Presto SQL\nDESCRIPTION: Demonstrates how to use the [] operator to access elements of an array, indexed starting from one.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/array.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT my_array[1] AS first_element\n```\n\n----------------------------------------\n\nTITLE: Analyzing Partitioned Hive Table with Presto\nDESCRIPTION: This SQL snippet demonstrates how to use the ANALYZE statement in Presto to collect statistics for specific partitions of a Hive table. It shows the syntax for specifying partition values.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/hive.rst#2025-04-10_snippet_11\n\nLANGUAGE: none\nCODE:\n```\nANALYZE hive.sales WITH (\n    partitions = ARRAY[\n        ARRAY['partition1_value1', 'partition1_value2'],\n        ARRAY['partition2_value1', 'partition2_value2']]);\n```\n\n----------------------------------------\n\nTITLE: CREATE TABLE Example with LIKE Clause in Presto SQL\nDESCRIPTION: An example demonstrating how to create a new table that includes all columns from an existing table plus additional columns using the LIKE clause.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/create-table.rst#2025-04-10_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE bigger_orders (\n  another_orderkey bigint,\n  LIKE orders,\n  another_orderdate date\n)\n```\n\n----------------------------------------\n\nTITLE: Inserting Multiple Rows with VALUES\nDESCRIPTION: Example showing how to insert multiple rows in a single INSERT statement using the VALUES clause.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/insert.rst#2025-04-10_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO cities VALUES (2, 'San Jose'), (3, 'Oakland');\n```\n\n----------------------------------------\n\nTITLE: Basic CREATE TABLE Example in Presto SQL\nDESCRIPTION: A basic example showing how to create a new table named 'orders' with four columns and ORC format specified as a table property.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/create-table.rst#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE orders (\n  orderkey bigint,\n  orderstatus varchar,\n  totalprice double,\n  orderdate date\n)\nWITH (format = 'ORC')\n```\n\n----------------------------------------\n\nTITLE: Formatting Timestamp as String in Presto SQL\nDESCRIPTION: The date_format function formats a timestamp as a string using a specified format string. This function is compatible with MySQL's date_format function.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/datetime.rst#2025-04-10_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\ndate_format(timestamp, format) -> varchar\n```\n\n----------------------------------------\n\nTITLE: CREATE TABLE Example with LIKE Clause in Presto SQL\nDESCRIPTION: An example demonstrating how to create a new table that includes all columns from an existing table plus additional columns using the LIKE clause.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/create-table.rst#2025-04-10_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE bigger_orders (\n  another_orderkey bigint,\n  LIKE orders,\n  another_orderdate date\n)\n```\n\n----------------------------------------\n\nTITLE: Using is_json_scalar Function in Presto\nDESCRIPTION: Demonstrates how to use the is_json_scalar function to determine if a JSON value is a scalar (number, string, true, false, or null) rather than an array or object.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/json.rst#2025-04-10_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nSELECT is_json_scalar('1'); -- true\nSELECT is_json_scalar('[1, 2, 3]'); -- false\n```\n\n----------------------------------------\n\nTITLE: Using remove_nulls Function in SQL\nDESCRIPTION: The new remove_nulls function removes null elements from a given array.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.280.rst#2025-04-10_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nremove_nulls(array)\n```\n\n----------------------------------------\n\nTITLE: Syntax for DROP TABLE Command in Presto SQL\nDESCRIPTION: Defines the syntax for the DROP TABLE command in Presto SQL. It shows the optional IF EXISTS clause which can be used to suppress errors if the table doesn't exist.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/sql/drop-table.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nDROP TABLE  [ IF EXISTS ] table_name\n```\n\n----------------------------------------\n\nTITLE: Listing All Grants for Current User in Presto SQL\nDESCRIPTION: Example of using SHOW GRANTS without specifying a table to list all grants for the current user on all tables in all schemas of the current catalog.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/show-grants.rst#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSHOW GRANTS;\n```\n\n----------------------------------------\n\nTITLE: Enabling Memory Spilling to Disk in Presto\nDESCRIPTION: Enables experimental feature to spill memory to disk to avoid exceeding memory limits for queries. Supports spilling for aggregations and joins (inner and outer).\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/admin/properties.rst#2025-04-10_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\nexperimental.spill-enabled = false\n```\n\n----------------------------------------\n\nTITLE: typeof() Function Examples in Presto\nDESCRIPTION: Examples showing how the typeof() function returns type information for various expressions including integers, strings, and arithmetic calculations.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/conversion.rst#2025-04-10_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nSELECT typeof(123); -- integer\nSELECT typeof('cat'); -- varchar(3)\nSELECT typeof(cos(2) + 1.5); -- double\n```\n\n----------------------------------------\n\nTITLE: FROM Clause Syntax in Presto SQL SELECT Statement\nDESCRIPTION: Specifies the syntax for the FROM clause in a SELECT statement, including table name, alias, and column alias options.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/select.rst#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\ntable_name [ [ AS ] alias [ ( column_alias [, ...] ) ] ]\n```\n\n----------------------------------------\n\nTITLE: Using regexp_extract to Extract First Match in SQL\nDESCRIPTION: Returns the first substring matching a regular expression pattern in a string. The function can return either the entire matched pattern or a specific capturing group.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/regexp.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT regexp_extract('1a 2b 14m', '\\d+'); -- 1\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT regexp_extract('1a 2b 14m', '(\\d+)([a-z]+)', 2); -- 'a'\n```\n\n----------------------------------------\n\nTITLE: Bitwise Arithmetic Right Shift Operations in Presto SQL\nDESCRIPTION: Examples of arithmetic right shift operations on integers in 2's complement representation using bitwise_arithmetic_shift_right() function.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/bitwise.rst.txt#2025-04-10_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSELECT bitwise_arithmetic_shift_right(-8, 2); -- -2\nSELECT bitwise_arithmetic_shift_right(7, 2); -- 1\n```\n\n----------------------------------------\n\nTITLE: Killing a Running Query (SQL)\nDESCRIPTION: This SQL procedure call demonstrates how to kill a running query using the system.runtime.kill_query procedure. It requires the query ID and allows specifying a custom message for the query failure.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/system.rst.txt#2025-04-10_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nCALL system.runtime.kill_query(query_id => '20151207_215727_00146_tx3nr', message => 'Using too many resources');\n```\n\n----------------------------------------\n\nTITLE: Creating an Iceberg Table with Hour Partitioning in Presto\nDESCRIPTION: Creates an Iceberg table that uses hour partitioning to organize data by the hour component of the 'ts' timestamp field. This partition transform is useful for fine-grained time-based queries.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/iceberg.rst#2025-04-10_snippet_42\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE players (\n    id int,\n    name varchar,\n    team varchar,\n    ts timestamp\n)\nWITH (\n    format = 'ORC',\n    partitioning = ARRAY['hour(ts)']\n);\n```\n\n----------------------------------------\n\nTITLE: Querying Schemas in Presto SQL\nDESCRIPTION: This SQL command is used to list schemas in a specified catalog or the current catalog. It supports an optional LIKE clause to filter schema names based on a pattern.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/show-schemas.rst#2025-04-10_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSHOW SCHEMAS [ FROM catalog ] [ LIKE pattern ]\n```\n\n----------------------------------------\n\nTITLE: Searched CASE Expression Syntax in Presto SQL\nDESCRIPTION: Defines the syntax for the searched form of CASE expression which evaluates each boolean condition from left to right until one is true and returns the corresponding result.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/conditional.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: none\nCODE:\n```\nCASE\n    WHEN condition THEN result\n    [ WHEN ... ]\n    [ ELSE result ]\nEND\n```\n\n----------------------------------------\n\nTITLE: Using transform_keys Function in Presto SQL\nDESCRIPTION: The transform_keys function applies a transformation to the keys of a map. It takes a map and a lambda function as arguments, and returns a new map with transformed keys.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/map.rst.txt#2025-04-10_snippet_13\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT transform_keys(MAP(ARRAY [1, 2, 3], ARRAY ['a', 'b', 'c']), (k, v) -> k + 1); -- {2 -> a, 3 -> b, 4 -> c}\n```\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT transform_keys(MAP(ARRAY ['a', 'b', 'c'], ARRAY [1, 2, 3]), (k, v) -> v * v); -- {1 -> 1, 4 -> 2, 9 -> 3}\n```\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT transform_keys(MAP(ARRAY ['a', 'b'], ARRAY [1, 2]), (k, v) -> k || CAST(v as VARCHAR)); -- {a1 -> 1, b2 -> 2}\n```\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT transform_keys(MAP(ARRAY [1, 2], ARRAY [1.0, 1.4]), -- {one -> 1.0, two -> 1.4}\n                              (k, v) -> MAP(ARRAY[1, 2], ARRAY['one', 'two'])[k]);\n```\n\n----------------------------------------\n\nTITLE: Configuring Node Properties in Presto\nDESCRIPTION: The node.properties file contains environment-specific configuration for each Presto node installation. It defines node identity, environment name, and data directory location. This configuration must be unique for each installation on a machine.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/installation/deployment.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: none\nCODE:\n```\nnode.environment=production\nnode.id=ffffffff-ffff-ffff-ffff-ffffffffffff\nnode.data-dir=/var/presto/data\n```\n\n----------------------------------------\n\nTITLE: Example: Showing CREATE FUNCTION for array_sum with BIGINT array\nDESCRIPTION: Demonstrates how to show the SQL statement that creates the example.default.array_sum function for ARRAY<BIGINT> parameter type.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/show-create-function.rst#2025-04-10_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nSHOW CREATE FUNCTION example.default.array_sum(ARRAY<BIGINT>)\n```\n\n----------------------------------------\n\nTITLE: Configuring Delta Lake Connector Properties in Presto\nDESCRIPTION: This snippet shows the basic configuration properties for the Delta Lake connector in Presto. It specifies the connector name and the Hive metastore URI, which is required for finding Delta Lake table locations.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/deltalake.rst#2025-04-10_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nconnector.name=delta\nhive.metastore.uri=hostname:port\n```\n\n----------------------------------------\n\nTITLE: Creating Roles in PrestoDB SQL\nDESCRIPTION: The CREATE ROLE command is used to create a new role in the current catalog. It can optionally specify a role admin using the WITH ADMIN clause. If not specified, the current user becomes the role admin.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/sql/create-role.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE ROLE role_name\n[ WITH ADMIN ( user | USER user | ROLE role | CURRENT_USER | CURRENT_ROLE ) ]\n```\n\n----------------------------------------\n\nTITLE: Finding Least Frequent Elements in Array in Presto SQL\nDESCRIPTION: Demonstrates the use of array_least_frequent function to find the least frequent non-null element(s) of an array, with handling for ties and exception for complex types.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/array.rst.txt#2025-04-10_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nSELECT array_least_frequent(ARRAY[1, 0 , 5])  -- ARRAY[0]\nselect array_least_frequent(ARRAY[1, null, 1]) -- ARRAY[1]\nselect array_least_frequent(ARRAY[ROW(1,null), ROW(1, null)]) -- \"map key cannot be null or contain nulls\"\n\nSELECT array_least_frequent(ARRAY[3, 2, 2, 6, 6, 1, 1], 3) -- ARRAY[3, 1, 2]\nselect array_least_frequent(ARRAY[1, null, 1], 2) -- ARRAY[1]\nselect array_least_frequent(ARRAY[ROW(1,null), ROW(1, null)], 2) -- \"map key cannot be null or contain nulls\"\n```\n\n----------------------------------------\n\nTITLE: Comparing json_parse Function and CAST to JSON in Presto SQL\nDESCRIPTION: Examples demonstrating the different semantics between json_parse (which deserializes JSON text) and CAST to JSON (which creates a JSON string from any input). Includes error handling and various data type examples.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/json.rst#2025-04-10_snippet_15\n\nLANGUAGE: sql\nCODE:\n```\nSELECT json_parse('not_json'); -- ERROR!\nSELECT json_parse('{\"a\": 1, \"b\": 2}'); -- JSON '{\"a\": 1, \"b\": 2}'\nSELECT json_parse('[1, 2, 3]'); -- JSON '[1,2,3]'\nSELECT json_parse('\"abc\"'); -- JSON '\"abc\"'\nSELECT json_parse('42'); -- JSON '42'\nSELECT json_parse('true'); -- JSON 'true'\nSELECT json_parse('null'); -- JSON 'null'\n```\n\n----------------------------------------\n\nTITLE: Computing ROC Curve Data with PrestoDB SQL\nDESCRIPTION: Example showing how to compute Receiver Operating Characteristic (ROC) curve data using PrestoDB classification metrics. The query returns fallout (false positive rate) and recall (true positive rate) pairs for plotting the ROC curve.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/aggregate.rst#2025-04-10_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nWITH\n    fallout_recall AS (\n        SELECT\n            CLASSIFICATION_FALLOUT(10000, correct, pred) AS fallouts,\n            CLASSIFICATION_RECALL(10000, correct, pred) AS recalls\n        FROM\n           classification_dataset\n    )\nSELECT\n    fallout\n    recall,\nFROM\n    recall_fallout\nCROSS JOIN UNNEST(fallouts, recalls) AS t(fallout, recall)\n```\n\n----------------------------------------\n\nTITLE: HMAC Functions in Presto SQL\nDESCRIPTION: Functions for computing HMAC (Hash-based Message Authentication Code) using various hashing algorithms.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/binary.rst#2025-04-10_snippet_12\n\nLANGUAGE: SQL\nCODE:\n```\nhmac_md5(binary, key) -> varbinary\n```\n\nLANGUAGE: SQL\nCODE:\n```\nhmac_sha1(binary, key) -> varbinary\n```\n\nLANGUAGE: SQL\nCODE:\n```\nhmac_sha256(binary, key) -> varbinary\n```\n\nLANGUAGE: SQL\nCODE:\n```\nhmac_sha512(binary, key) -> varbinary\n```\n\n----------------------------------------\n\nTITLE: Retrieving Top N Values from Map in Presto SQL\nDESCRIPTION: Demonstrates retrieving the top N values from a map based on value ordering or a custom comparator function.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/map.rst.txt#2025-04-10_snippet_10\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT map_top_n_values(map(ARRAY['a', 'b', 'c'], ARRAY[1, 2, 3]), 2) --- [3, 2]\n\nSELECT map_top_n_values(map(ARRAY['a', 'b', 'c'], ARRAY[1, 2, 3]), 2, (x, y) -> IF(x < y, -1, IF(x = y, 0, 1))) --- [3, 2]\n```\n\n----------------------------------------\n\nTITLE: Logical Plan Example in Presto SQL\nDESCRIPTION: An example of the logical execution plan for a query that counts nations by region key. Shows the default text output format with the query plan structure.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/explain.rst#2025-04-10_snippet_2\n\nLANGUAGE: none\nCODE:\n```\npresto:tiny> EXPLAIN SELECT regionkey, count(*) FROM nation GROUP BY 1;\n                                                Query Plan\n----------------------------------------------------------------------------------------------------------\n - Output[regionkey, _col1] => [regionkey:bigint, count:bigint]\n         _col1 := count\n     - RemoteExchange[GATHER] => regionkey:bigint, count:bigint\n         - Aggregate(FINAL)[regionkey] => [regionkey:bigint, count:bigint]\n                count := \"count\"(\"count_8\")\n             - LocalExchange[HASH][$hashvalue] (\"regionkey\") => regionkey:bigint, count_8:bigint, $hashvalue:bigint\n                 - RemoteExchange[REPARTITION][$hashvalue_9] => regionkey:bigint, count_8:bigint, $hashvalue_9:bigint\n                     - Project[] => [regionkey:bigint, count_8:bigint, $hashvalue_10:bigint]\n                             $hashvalue_10 := \"combine_hash\"(BIGINT '0', COALESCE(\"$operator$hash_code\"(\"regionkey\"), 0))\n                         - Aggregate(PARTIAL)[regionkey] => [regionkey:bigint, count_8:bigint]\n                                 count_8 := \"count\"(*)\n                             - TableScan[tpch:tpch:nation:sf0.1, originalConstraint = true] => [regionkey:bigint]\n                                     regionkey := tpch:regionkey\n```\n\n----------------------------------------\n\nTITLE: Modifying Column Properties in Presto SQL\nDESCRIPTION: Examples of modifying column properties, such as adding or dropping NOT NULL constraints, using ALTER TABLE command in Presto SQL.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/alter-table.rst#2025-04-10_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE users ALTER COLUMN zip SET NOT NULL;\n\nALTER TABLE IF EXISTS users ALTER zip SET NOT NULL;\n\nALTER TABLE users ALTER COLUMN zip DROP NOT NULL;\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Elasticsearch Properties in Presto\nDESCRIPTION: Basic configuration file setup for connecting Presto to Elasticsearch. Sets core properties like connector name, host, port, and default schema.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/elasticsearch.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: none\nCODE:\n```\nconnector.name=elasticsearch\nelasticsearch.host=localhost\nelasticsearch.port=9200\nelasticsearch.default-schema-name=default\n```\n\n----------------------------------------\n\nTITLE: Aggregating Weighted T-Digest with Compression in Presto SQL\nDESCRIPTION: Returns the T-digest composed of all input values of x using the per-item weight w and compression factor. Compression must be greater than zero and constant for all input rows. A compression factor of 500 is recommended for good accuracy and performance.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/tdigest.rst.txt#2025-04-10_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\ntdigest_agg(x, w, compression) -> tdigest<double>\n```\n\n----------------------------------------\n\nTITLE: USE Statement Syntax in Presto SQL\nDESCRIPTION: Defines the syntax for the USE statement in Presto SQL which allows switching between catalogs and schemas. The statement supports two forms: specifying both catalog and schema, or just the schema (which uses the current catalog).\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/use.rst#2025-04-10_snippet_0\n\nLANGUAGE: none\nCODE:\n```\nUSE catalog.schema\nUSE schema\n```\n\n----------------------------------------\n\nTITLE: Creating Empty Map in Presto SQL\nDESCRIPTION: Shows how to create an empty map using the map() function.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/map.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT map(); -- {}\n```\n\n----------------------------------------\n\nTITLE: TRY Function Examples\nDESCRIPTION: Series of examples showing how to use TRY function for handling errors and invalid data.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/conditional.rst#2025-04-10_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM shipping;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT CAST(origin_zip AS BIGINT) FROM shipping;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT TRY(CAST(origin_zip AS BIGINT)) FROM shipping;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT total_cost / packages AS per_package FROM shipping;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT COALESCE(TRY(total_cost / packages), 0) AS per_package FROM shipping;\n```\n\n----------------------------------------\n\nTITLE: Merging Set Digests in SQL\nDESCRIPTION: This snippet shows how to merge multiple set digests into a single set digest using the merge_set_digest function in Presto.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/setdigest.rst.txt#2025-04-10_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT merge_set_digest(a) from (SELECT make_set_digest(value) as a FROM (VALUES 4,3,2,1) T(value));\n```\n\n----------------------------------------\n\nTITLE: Adding Partitioned Columns with Different Transform Functions in Presto\nDESCRIPTION: Demonstrates how to add new columns as partition columns with different transform functions like identity, truncate, bucket, year, month, day, and hour transforms.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/iceberg.rst#2025-04-10_snippet_48\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE iceberg.web.page_views ADD COLUMN zipcode VARCHAR WITH (partitioning = 'identity');\n\nALTER TABLE iceberg.web.page_views ADD COLUMN location VARCHAR WITH (partitioning = 'truncate(2)');\n\nALTER TABLE iceberg.web.page_views ADD COLUMN location VARCHAR WITH (partitioning = 'bucket(8)');\n\nALTER TABLE iceberg.web.page_views ADD COLUMN dt date WITH (partitioning = 'year');\n\nALTER TABLE iceberg.web.page_views ADD COLUMN ts timestamp WITH (partitioning = 'month');\n\nALTER TABLE iceberg.web.page_views ADD COLUMN dt date WITH (partitioning = 'day');\n\nALTER TABLE iceberg.web.page_views ADD COLUMN ts timestamp WITH (partitioning = 'hour');\n```\n\n----------------------------------------\n\nTITLE: Jaccard Index Example\nDESCRIPTION: Example of calculating the Jaccard index between two set digests.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/setdigest.rst#2025-04-10_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nSELECT jaccard_index(make_set_digest(v1), make_set_digest(v2))\nFROM (VALUES (1, 1), (NULL,2), (2, 3), (NULL, 4)) T(v1, v2);\n```\n\n----------------------------------------\n\nTITLE: Casting JSON to SQL Types in Presto\nDESCRIPTION: Examples of converting JSON values back to SQL types including basic types (numbers, strings, booleans), arrays, maps, and row types with various configurations.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/json.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT CAST(JSON 'null' AS VARCHAR); -- NULL\nSELECT CAST(JSON '1' AS INTEGER); -- 1\nSELECT CAST(JSON '9223372036854775807' AS BIGINT); -- 9223372036854775807\nSELECT CAST(JSON '\"abc\"' AS VARCHAR); -- abc\nSELECT CAST(JSON 'true' AS BOOLEAN); -- true\nSELECT CAST(JSON '1.234' AS DOUBLE); -- 1.234\nSELECT CAST(JSON '[1,23,456]' AS ARRAY(INTEGER)); -- [1, 23, 456]\nSELECT CAST(JSON '[1,null,456]' AS ARRAY(INTEGER)); -- [1, NULL, 456]\nSELECT CAST(JSON '[[1,23],[456]]' AS ARRAY(ARRAY(INTEGER))); -- [[1, 23], [456]]\nSELECT CAST(JSON '{\"k1\":1,\"k2\":23,\"k3\":456}' AS MAP(VARCHAR, INTEGER)); -- {k1=1, k2=23, k3=456}\nSELECT CAST(JSON '{\"v1\":123,\"v2\":\"abc\",\"v3\":true}' AS ROW(v1 BIGINT, v2 VARCHAR, v3 BOOLEAN)); -- {v1=123, v2=abc, v3=true}\nSELECT CAST(JSON '[123,\"abc\",true]' AS ROW(v1 BIGINT, v2 VARCHAR, v3 BOOLEAN)); -- {v1=123, v2=abc, v3=true}\n```\n\n----------------------------------------\n\nTITLE: ALTER SCHEMA SQL Command Syntax\nDESCRIPTION: The syntax definition for ALTER SCHEMA command which allows renaming an existing schema to a new name.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/alter-schema.rst#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nALTER SCHEMA name RENAME TO new_name\n```\n\n----------------------------------------\n\nTITLE: Configuring SSL for SQL Server Connection in Presto\nDESCRIPTION: This example shows a connection string using a truststore for SSL configuration in the SQL Server connector.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/sqlserver.rst#2025-04-10_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\nconnection-url=jdbc:sqlserver://<host>:<port>;databaseName=<databaseName>;encrypt=true;trustServerCertificate=false;trustStoreType=PEM;hostNameInCertificate=hostname;trustStore=path/to/truststore.pem;trustStorePassword=password\n```\n\n----------------------------------------\n\nTITLE: Single-Column VALUES Example in PrestoDB\nDESCRIPTION: Example of using VALUES to create a table with one column and three rows.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/values.rst#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nVALUES 1, 2, 3\n```\n\n----------------------------------------\n\nTITLE: Inserting with Partial Column List\nDESCRIPTION: Example demonstrating how to insert a row by specifying only some columns, causing unspecified columns to be set to null.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/insert.rst#2025-04-10_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO nation (nationkey, name, regionkey)\nVALUES (26, 'POLAND', 3);\n```\n\n----------------------------------------\n\nTITLE: Hexadecimal Encoding and Decoding in Presto SQL\nDESCRIPTION: Functions for encoding binary data to hexadecimal strings and decoding hexadecimal strings to binary data.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/binary.rst#2025-04-10_snippet_7\n\nLANGUAGE: SQL\nCODE:\n```\nto_hex(binary) -> varchar\n```\n\nLANGUAGE: SQL\nCODE:\n```\nfrom_hex(string) -> varbinary\n```\n\n----------------------------------------\n\nTITLE: Submitting SQL Query via POST Request\nDESCRIPTION: Example of submitting a SQL query to Presto using POST /v1/statement endpoint with required headers for catalog, source, schema and user information.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/rest/statement.rst#2025-04-10_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/statement HTTP/1.1\nHost: localhost:8001\nX-Presto-Catalog: jmx\nX-Presto-Source: presto-cli\nX-Presto-Schema: jmx\nUser-Agent: StatementClient/0.55-SNAPSHOT\nX-Presto-User: tobrie1\nContent-Length: 41\n\nselect name from \"java.lang:type=runtime\"\n```\n\n----------------------------------------\n\nTITLE: Describing Kafka Table Structure in Presto SQL\nDESCRIPTION: SQL query to describe the structure of the 'customer' table in the Kafka catalog.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/kafka-tutorial.rst.txt#2025-04-10_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nDESCRIBE customer;\n```\n\n----------------------------------------\n\nTITLE: Syntax for SHOW ROLE GRANTS Command in Presto SQL\nDESCRIPTION: This snippet shows the syntax for the SHOW ROLE GRANTS command in Presto. It allows for an optional catalog specification.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/show-role-grants.rst#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSHOW ROLE GRANTS [ FROM catalog ]\n```\n\n----------------------------------------\n\nTITLE: Using JSON Scalar Functions in Presto\nDESCRIPTION: Examples of using Presto's JSON scalar functions including is_json_scalar to check if a JSON value is a scalar, json_array_contains to check for array elements, and json_array_length to get array size.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/json.rst.txt#2025-04-10_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSELECT is_json_scalar('1'); -- true\nSELECT is_json_scalar('[1, 2, 3]'); -- false\n```\n\n----------------------------------------\n\nTITLE: DROP TABLE Command Syntax\nDESCRIPTION: The basic syntax pattern for the DROP TABLE command in PrestoDB SQL. Shows the optional IF EXISTS clause that can be used to suppress errors if the table doesn't exist.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/drop-table.rst#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nDROP TABLE  [ IF EXISTS ] table_name\n```\n\n----------------------------------------\n\nTITLE: Row Comparison with IN Operator\nDESCRIPTION: Demonstrates using IN operator for comparing values against a list or subquery results.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/comparison.rst#2025-04-10_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM region WHERE name IN ('AMERICA', 'EUROPE');\n\nSELECT * FROM region WHERE name IN ('NULL', 'AMERICA', 'EUROPE');\n\nSELECT * FROM table_name WHERE (column1, column2) IN ((NULL, 'value1'), ('value2', 'value3'));\n```\n\n----------------------------------------\n\nTITLE: Checking for Private IP Addresses in Presto SQL\nDESCRIPTION: Shows how to use is_private_ip() function to determine if an IP address is private or reserved according to IANA.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/ip.rst#2025-04-10_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nSELECT is_private_ip(IPADDRESS '10.0.0.1'); -- true\nSELECT is_private_ip(IPADDRESS '192.168.0.1'); -- true\nSELECT is_private_ip(IPADDRESS '157.240.200.99'); -- false\nSELECT is_private_ip(IPADDRESS '2a03:2880:f031:12:face:b00c:0:2'); -- false\n```\n\n----------------------------------------\n\nTITLE: Using EXPLAIN with IO and JSON Format Options\nDESCRIPTION: New EXPLAIN option that shows input tables with constraints and the output table in JSON format. This helps visualize query execution plans with detailed IO information.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.209.rst#2025-04-10_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nEXPLAIN (TYPE IO, FORMAT JSON)\n```\n\n----------------------------------------\n\nTITLE: SQL Complex Grouping Operations\nDESCRIPTION: New support for complex grouping operations including CUBE, ROLLUP, and GROUPING SETS.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.142.rst#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nCUBE, ROLLUP, GROUPING SETS\n```\n\n----------------------------------------\n\nTITLE: Set Digest Cardinality Example\nDESCRIPTION: Example of calculating the cardinality of a set digest using the cardinality function.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/setdigest.rst#2025-04-10_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nSELECT cardinality(make_set_digest(value))\nFROM (VALUES 1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5) T(value);\n```\n\n----------------------------------------\n\nTITLE: Setting Table Properties in Presto SQL\nDESCRIPTION: Example of setting table properties using the ALTER TABLE command in Presto SQL.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/sql/alter-table.rst.txt#2025-04-10_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE users SET PROPERTIES (x='y');\n```\n\n----------------------------------------\n\nTITLE: Using the map_subset Function in Presto SQL\nDESCRIPTION: The map_subset function takes a map and an array of keys as input and returns a map with only the entries whose keys are in the supplied array.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.278.rst#2025-04-10_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nmap_subset(input_map, array_of_keys)\n```\n\n----------------------------------------\n\nTITLE: Using set_union Function in Presto SQL\nDESCRIPTION: Example of using set_union to combine multiple arrays into a single array with distinct values from all input arrays.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/aggregate.rst#2025-04-10_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nSELECT set_union(elements)\nFROM (\n    VALUES\n        ARRAY[1, 2, 3],\n        ARRAY[2, 3, 4]\n) AS t(elements);\n```\n\n----------------------------------------\n\nTITLE: Quantified Comparison Examples\nDESCRIPTION: Shows usage of ALL, ANY and SOME quantifiers with comparison operators in subqueries.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/comparison.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 'hello' = ANY (VALUES 'hello', 'world');\n\nSELECT 21 < ALL (VALUES 19, 20, 21);\n\nSELECT 42 >= SOME (SELECT 41 UNION ALL SELECT 42 UNION ALL SELECT 43);\n```\n\n----------------------------------------\n\nTITLE: Creating a Hive Schema in S3 with Presto\nDESCRIPTION: Creates a new Hive schema named 'web' that will store tables in an S3 bucket. This example demonstrates how to create a schema with a specific storage location.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/hive.rst.txt#2025-04-10_snippet_14\n\nLANGUAGE: sql\nCODE:\n```\nCREATE SCHEMA hive.web\nWITH (location = 's3://my-bucket/')\n```\n\n----------------------------------------\n\nTITLE: Configuring Internal JWT Authentication in Presto\nDESCRIPTION: Enables internal authentication using JWT in Presto. This can be configured using two specific configuration parameters for enabling JWT and setting the shared secret.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.283.rst#2025-04-10_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\ninternal-communication.jwt.enabled=[true/false]\ninternal-communication.shared-secret=<shared-secret-value>\n```\n\n----------------------------------------\n\nTITLE: URL Encoding Function in Presto SQL\nDESCRIPTION: The url_encode function escapes a value for safe inclusion in URL query parameters. It preserves alphanumeric characters, encodes spaces as '+', and converts other characters to UTF-8 percent-encoded format.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/url.rst#2025-04-10_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nurl_encode(value) -> varchar\n```\n\n----------------------------------------\n\nTITLE: Creating Schema in Memory Connector (SQL)\nDESCRIPTION: SQL command to create a new schema in the Memory connector.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/memory.rst#2025-04-10_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nCREATE SCHEMA memory.default1;\n```\n\n----------------------------------------\n\nTITLE: Base32 Encoding and Decoding in Presto SQL\nDESCRIPTION: Functions for encoding binary data to base32 strings and decoding base32 strings to binary data.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/binary.rst#2025-04-10_snippet_6\n\nLANGUAGE: SQL\nCODE:\n```\nfrom_base32(string) -> varbinary\n```\n\nLANGUAGE: SQL\nCODE:\n```\nto_base32(binary) -> varchar\n```\n\n----------------------------------------\n\nTITLE: Using Pass-through Queries with Elasticsearch in Presto SQL\nDESCRIPTION: Shows the syntax for embedding Elasticsearch Query DSL in a Presto SQL query. The Elasticsearch query is base32-encoded to avoid escaping issues and returns a JSON payload that can be processed with Presto's JSON functions.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/elasticsearch.rst.txt#2025-04-10_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM es.default.\"<index>$query:<es-query>\"\n```\n\n----------------------------------------\n\nTITLE: Creating Aggregated View with Grouping\nDESCRIPTION: Example of creating a view that performs aggregation with GROUP BY to summarize order data by date.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/sql/create-view.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nCREATE VIEW orders_by_date AS\nSELECT orderdate, sum(totalprice) AS price\nFROM orders\nGROUP BY orderdate\n```\n\n----------------------------------------\n\nTITLE: Hashing Functions in Presto SQL\nDESCRIPTION: Various hashing functions for binary data, including CRC32, MD5, MurmurHash, SHA variants, and xxHash.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/binary.rst#2025-04-10_snippet_11\n\nLANGUAGE: SQL\nCODE:\n```\ncrc32(binary) -> bigint\n```\n\nLANGUAGE: SQL\nCODE:\n```\nmd5(binary) -> varbinary\n```\n\nLANGUAGE: SQL\nCODE:\n```\nmurmur3_x64_128(binary) -> varbinary\n```\n\nLANGUAGE: SQL\nCODE:\n```\nsha1(binary) -> varbinary\n```\n\nLANGUAGE: SQL\nCODE:\n```\nsha256(binary) -> varbinary\n```\n\nLANGUAGE: SQL\nCODE:\n```\nsha512(binary) -> varbinary\n```\n\nLANGUAGE: SQL\nCODE:\n```\nxxhash64(binary) -> varbinary\n```\n\nLANGUAGE: SQL\nCODE:\n```\nspooky_hash_v2_32(binary) -> varbinary\n```\n\nLANGUAGE: SQL\nCODE:\n```\nspooky_hash_v2_64(binary) -> varbinary\n```\n\n----------------------------------------\n\nTITLE: Configuring Presto for Single-Node Development Environment\nDESCRIPTION: Configuration for a single-node Presto setup where one machine functions as both coordinator and worker. This setup is ideal for testing and development purposes.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/installation/deployment.rst.txt#2025-04-10_snippet_4\n\nLANGUAGE: none\nCODE:\n```\ncoordinator=true\nnode-scheduler.include-coordinator=true\nhttp-server.http.port=8080\nquery.max-memory=5GB\nquery.max-memory-per-node=1GB\ndiscovery-server.enabled=true\ndiscovery.uri=http://example.net:8080\n```\n\n----------------------------------------\n\nTITLE: Parsing String to Timestamp in Presto SQL\nDESCRIPTION: The to_timestamp function parses a string into a TIMESTAMP data type using the specified format string. It uses Teradata-compatible format specifiers.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/teradata.rst#2025-04-10_snippet_5\n\nLANGUAGE: SQL\nCODE:\n```\nto_timestamp(string, format) -> timestamp\n```\n\n----------------------------------------\n\nTITLE: URL Syntax Pattern in Presto\nDESCRIPTION: Defines the supported URL syntax pattern for URL extraction functions. Shows the standard components of a URL including protocol, host, port, path, query, and fragment.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/url.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: none\nCODE:\n```\n[protocol:][//host[:port]][path][?query][#fragment]\n```\n\n----------------------------------------\n\nTITLE: URL Decoding Function in Presto SQL\nDESCRIPTION: The url_decode function unescapes a URL-encoded value, reversing the encoding performed by url_encode. It converts the encoded string back to its original form.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/url.rst#2025-04-10_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nurl_decode(value) -> varchar\n```\n\n----------------------------------------\n\nTITLE: Creating and Modifying Iceberg Table Schema in Presto SQL\nDESCRIPTION: Shows how to create an Iceberg table from an existing table, add a new column, rename a column, and drop a column using ALTER TABLE statements.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/iceberg.rst#2025-04-10_snippet_59\n\nLANGUAGE: sql\nCODE:\n```\nUSE iceberg.tpch;\nCREATE TABLE IF NOT EXISTS ctas_nation AS (SELECT * FROM nation);\nDESCRIBE ctas_nation;\n```\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE ctas_nation ADD COLUMN zipcode VARCHAR;\nDESCRIBE ctas_nation;\n```\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE ctas_nation RENAME COLUMN zipcode TO address;\nDESCRIBE ctas_nation;\n```\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE ctas_nation DROP COLUMN address;\nDESCRIBE ctas_nation;\n```\n\n----------------------------------------\n\nTITLE: CUBE with Equivalent GROUPING SETS\nDESCRIPTION: Query showing how CUBE can be expressed using equivalent GROUPING SETS syntax, explicitly listing all possible grouping combinations.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/sql/select.rst.txt#2025-04-10_snippet_14\n\nLANGUAGE: sql\nCODE:\n```\nSELECT origin_state, destination_state, sum(package_weight)\nFROM shipping\nGROUP BY GROUPING SETS (\n    (origin_state, destination_state),\n    (origin_state),\n    (destination_state),\n    ());\n```\n\n----------------------------------------\n\nTITLE: String to Date Parsing Function\nDESCRIPTION: Parses a string into a DATE data type using Teradata-compatible format specifiers.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/teradata.rst.txt#2025-04-10_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nto_date(string, format) -> date\n```\n\n----------------------------------------\n\nTITLE: Binary Arithmetic Operations with Decimals\nDESCRIPTION: Mathematical expressions showing addition, subtraction, multiplication, division, and modulo operations between decimal types x and y, where x is DECIMAL(xp, xs) and y is DECIMAL(yp, ys).\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/decimal.rst#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nx + y\nx - y\nx * y\nx / y\nx % y\n```\n\n----------------------------------------\n\nTITLE: Parsing Duration String to Interval in Presto SQL\nDESCRIPTION: The parse_duration function converts a string representation of duration into an interval. It supports various time units including nanoseconds, microseconds, milliseconds, seconds, minutes, hours, and days.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/datetime.rst#2025-04-10_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSELECT parse_duration('42.8ms'); -- 0 00:00:00.043\nSELECT parse_duration('3.81 d'); -- 3 19:26:24.000\nSELECT parse_duration('5m');     -- 0 00:05:00.000\n```\n\n----------------------------------------\n\nTITLE: Changing Time Zone of a Timestamp in SQL\nDESCRIPTION: Demonstrates how to convert a timestamp from one time zone to another using the AT TIME ZONE clause, preserving the same instant in time but displaying it in a different time zone.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.66.rst#2025-04-10_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nSELECT TIMESTAMP '2014-03-14 09:30:00 Europe/Berlin'\n     AT TIME ZONE 'America/Los_Angeles';\n-- 2014-03-14 01:30:00.000 America/Los_Angeles\n```\n\n----------------------------------------\n\nTITLE: Enabling Grouped Execution for Eligible Table Scans in Presto SQL\nDESCRIPTION: Configure grouped execution for queries with no joins or aggregations using either a session property or a configuration property.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.222.rst#2025-04-10_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nSET SESSION grouped_execution_for_eligible_table_scans = true;\n```\n\n----------------------------------------\n\nTITLE: Using convex_hull_agg in Presto\nDESCRIPTION: Aggregate function that returns the minimum convex geometry that encloses all input geometries. This function combines multiple geometries and calculates their collective convex hull.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/geospatial.rst#2025-04-10_snippet_42\n\nLANGUAGE: sql\nCODE:\n```\nconvex_hull_agg(Geometry) -> Geometry\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Time Zone Conversion in Presto SQL\nDESCRIPTION: This snippet shows how to use the AT TIME ZONE operator to convert a timestamp from UTC to America/Los_Angeles time zone.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/datetime.rst#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT timestamp '2012-10-31 01:00 UTC';\nSELECT timestamp '2012-10-31 01:00 UTC' AT TIME ZONE 'America/Los_Angeles';\n```\n\n----------------------------------------\n\nTITLE: Describing a Kudu Table in Presto\nDESCRIPTION: SQL command to describe the structure of a Kudu table in Presto, showing column names, types, and properties.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/kudu.rst#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nDESCRIBE kudu.default.users;\n```\n\n----------------------------------------\n\nTITLE: DROP SCHEMA Command Syntax in Presto SQL\nDESCRIPTION: Defines the syntax for dropping a schema in Presto SQL, with an optional IF EXISTS clause that prevents errors if the schema doesn't exist.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/drop-schema.rst#2025-04-10_snippet_0\n\nLANGUAGE: none\nCODE:\n```\nDROP SCHEMA [ IF EXISTS ] schema_name\n```\n\n----------------------------------------\n\nTITLE: DROP TABLE with IF EXISTS Example\nDESCRIPTION: Example showing how to safely drop a table named 'orders_by_date' using the IF EXISTS clause to prevent errors if the table doesn't exist.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/drop-table.rst#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nDROP TABLE IF EXISTS orders_by_date\n```\n\n----------------------------------------\n\nTITLE: Measuring JSON Array Length in Presto\nDESCRIPTION: Example of using json_array_length function to count the number of elements in a JSON array.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/json.rst.txt#2025-04-10_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nSELECT json_array_length('[1, 2, 3]');\n```\n\n----------------------------------------\n\nTITLE: Using Subscript Operator for Map Access in SQL\nDESCRIPTION: The [] operator is used to retrieve the value corresponding to a given key from a map. This example shows how to access the age value for the key 'Bob' from a name_to_age_map.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/map.rst#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT name_to_age_map['Bob'] AS bob_age;\n```\n\n----------------------------------------\n\nTITLE: URL Syntax Pattern in Presto\nDESCRIPTION: Defines the supported URL syntax pattern for URL extraction functions. Shows the standard components of a URL including protocol, host, port, path, query, and fragment.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/url.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: none\nCODE:\n```\n[protocol:][//host[:port]][path][?query][#fragment]\n```\n\n----------------------------------------\n\nTITLE: Creating an Iceberg Table with Truncate Partitioning in Presto\nDESCRIPTION: Creates an Iceberg table that uses truncate partitioning to organize data by the first letter of the 'team' field. This partition transform is useful for string-based partitioning on a prefix.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/iceberg.rst#2025-04-10_snippet_40\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE players (\n    id int,\n    name varchar,\n    team varchar\n)\nWITH (\n    format = 'ORC',\n    partitioning = ARRAY['truncate(team, 1)']\n);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Stage Information via REST API\nDESCRIPTION: GET endpoint that returns detailed information about a specific stage in a Presto query execution.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/rest/stage.rst#2025-04-10_snippet_0\n\nLANGUAGE: rest\nCODE:\n```\nGET /v1/stage\n```\n\n----------------------------------------\n\nTITLE: Creating a Managed Hive Table with Partitioning and Bucketing\nDESCRIPTION: Creates a managed Hive table using the ORC file format with partitioning by date and country, and bucketing by user ID. Demonstrates advanced table creation with partitioning and bucketing strategies.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/hive.rst.txt#2025-04-10_snippet_15\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE hive.web.page_views (\n  view_time timestamp,\n  user_id bigint,\n  page_url varchar,\n  ds date,\n  country varchar\n)\nWITH (\n  format = 'ORC',\n  partitioned_by = ARRAY['ds', 'country'],\n  bucketed_by = ARRAY['user_id'],\n  bucket_count = 50\n)\n```\n\n----------------------------------------\n\nTITLE: Inserting with Specified Column List\nDESCRIPTION: Example showing how to insert data with an explicitly specified column list, allowing for precise column mapping.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/insert.rst#2025-04-10_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO nation (nationkey, name, regionkey, comment)\nVALUES (26, 'POLAND', 3, 'no comment');\n```\n\n----------------------------------------\n\nTITLE: SET ROLE Command Syntax in Presto SQL\nDESCRIPTION: The basic syntax for the SET ROLE command in Presto. It allows setting a single role, enabling all roles (ALL), or disabling all roles (NONE) for the current session. The command affects the current catalog only.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/set-role.rst#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSET ROLE ( role | ALL | NONE )\n```\n\n----------------------------------------\n\nTITLE: Creating Tables with VALUES in PrestoDB\nDESCRIPTION: Example demonstrating how to create a new table using the VALUES statement with CREATE TABLE AS, providing column names through an alias.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/values.rst#2025-04-10_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE example AS\nSELECT * FROM (\n    VALUES\n        (1, 'a'),\n        (2, 'b'),\n        (3, 'c')\n) AS t (id, name)\n```\n\n----------------------------------------\n\nTITLE: Partial Casting of Mixed-Type JSON Arrays and Maps\nDESCRIPTION: Examples of partial casting for JSON arrays and maps with mixed element types, which cannot be directly cast to SQL arrays and maps but can be handled with JSON type.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/json.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT CAST(JSON '[[1, 23], 456]' AS ARRAY(JSON)); -- [JSON '[1,23]', JSON '456']\nSELECT CAST(JSON '{\"k1\": [1, 23], \"k2\": 456}' AS MAP(VARCHAR, JSON)); -- {k1 = JSON '[1,23]', k2 = JSON '456'}\nSELECT CAST(JSON '[null]' AS ARRAY(JSON)); -- [JSON 'null']\n```\n\n----------------------------------------\n\nTITLE: Using reduce_agg for Product Aggregation in Presto SQL\nDESCRIPTION: Example of using reduce_agg to multiply values grouped by ID. The function takes an initial state of 1 and uses multiplication for both input and combine functions.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/aggregate.rst#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT id, reduce_agg(value, 1, (a, b) -> a * b, (a, b) -> a * b)\nFROM (\n    VALUES\n        (1, 2),\n        (1, 3),\n        (1, 4),\n        (2, 20),\n        (2, 30),\n        (2, 40)\n) AS t(id, value)\nGROUP BY id;\n-- (1, 24)\n-- (2, 24000)\n```\n\n----------------------------------------\n\nTITLE: Using json_parse Function in Presto SQL\nDESCRIPTION: Examples of using the json_parse function to deserialize JSON text into JSON values. This function is the inverse of json_format and expects input conforming to RFC 7159.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/json.rst#2025-04-10_snippet_14\n\nLANGUAGE: sql\nCODE:\n```\nSELECT json_parse('[1, 2, 3]'); -- JSON '[1,2,3]'\nSELECT json_parse('\"abc\"'); -- JSON '\"abc\"'\n```\n\n----------------------------------------\n\nTITLE: CREATE ROLE Syntax in PrestoDB\nDESCRIPTION: The basic syntax for creating roles in PrestoDB. Allows specifying a role name and optionally setting an admin user or role.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/create-role.rst#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE ROLE role_name\n[ WITH ADMIN ( user | USER user | ROLE role | CURRENT_USER | CURRENT_ROLE ) ]\n```\n\n----------------------------------------\n\nTITLE: Querying with SUM and AVG on DECIMAL Type in Presto SQL\nDESCRIPTION: Improved performance for SUM and AVG aggregate functions when used with DECIMAL type in Presto queries. This enhancement affects queries utilizing these functions on DECIMAL columns.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.261.rst#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT SUM(decimal_column), AVG(decimal_column) FROM table_name;\n```\n\n----------------------------------------\n\nTITLE: Using bit_count Function in Presto SQL\nDESCRIPTION: The bit_count function counts the number of bits set in a value treated as a bits-bit signed integer in 2's complement representation. It takes two parameters: the value to count bits in and the bit width to use for the operation.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/bitwise.rst#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT bit_count(9, 64); -- 2\nSELECT bit_count(9, 8); -- 2\nSELECT bit_count(-7, 64); -- 62\nSELECT bit_count(-7, 8); -- 6\n```\n\n----------------------------------------\n\nTITLE: Array Matching Functions in Presto SQL\nDESCRIPTION: Use new functions all_match(), any_match(), and none_match() to check conditions across array elements.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.230.rst.txt#2025-04-10_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT all_match(array, condition)\nSELECT any_match(array, condition)\nSELECT none_match(array, condition)\n```\n\n----------------------------------------\n\nTITLE: Creating an Iceberg Table with Custom Properties in SQL\nDESCRIPTION: This SQL snippet demonstrates how to create an Iceberg table with custom properties such as format, partitioning, and location. It creates a table named 'test_table' with three columns, using ORC format, partitioned by two columns, and specifying a custom S3 location.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/iceberg.rst.txt#2025-04-10_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE test_table (\n    c1 bigint,\n    c2 varchar,\n    c3 double\n)\nWITH (\n    format = 'ORC',\n    partitioning = ARRAY['c1', 'c2'],\n    location = 's3://test_bucket/test_schema/test_table')\n)\n```\n\n----------------------------------------\n\nTITLE: Dropping a Schema in Presto SQL\nDESCRIPTION: Example of dropping the 'web' schema in Presto SQL. This command will remove the schema if it exists and is empty.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/drop-schema.rst#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nDROP SCHEMA web\n```\n\n----------------------------------------\n\nTITLE: Inverse Normal CDF Function\nDESCRIPTION: Computes the inverse of Normal cumulative distribution function with given mean and standard deviation for a probability p. Requires mean as real value and standard deviation as positive real value.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/math.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\ninverse_normal_cdf(mean, sd, p) -> double\n```\n\n----------------------------------------\n\nTITLE: Replacing Existing View with OR REPLACE\nDESCRIPTION: Example showing how to replace an existing view using the OR REPLACE clause with modified calculations.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/sql/create-view.rst.txt#2025-04-10_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nCREATE OR REPLACE VIEW test AS\nSELECT orderkey, orderstatus, totalprice / 4 AS quarter\nFROM orders\n```\n\n----------------------------------------\n\nTITLE: Calculating Cumulative Sum of Array in Presto SQL\nDESCRIPTION: Demonstrates the use of array_cum_sum function to calculate the cumulative sum of an array, handling null elements.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/array.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT array_cum_sum(ARRAY [1, 2, null, 3]) -- array[1, 3, null, null]\n```\n\n----------------------------------------\n\nTITLE: Using ST_ConvexHull in Presto\nDESCRIPTION: Returns the minimum convex geometry that encloses all input geometries. This function calculates the convex hull, which is the smallest convex shape that contains all points from the input geometries.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/geospatial.rst#2025-04-10_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nST_ConvexHull(Geometry) -> Geometry\n```\n\n----------------------------------------\n\nTITLE: Array Sorting Examples in Presto SQL\nDESCRIPTION: Demonstrates array_sort_desc function which sorts array elements in descending order. Handles null values by placing them at the end.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/array.rst.txt#2025-04-10_snippet_12\n\nLANGUAGE: sql\nCODE:\n```\nSELECT array_sort_desc(ARRAY [100, 1, 10, 50]);\nSELECT array_sort_desc(ARRAY [null, 100, null, 1, 10, 50]);\nSELECT array_sort_desc(ARRAY [ARRAY [\"a\", null], null, ARRAY [\"a\"]]);\n```\n\n----------------------------------------\n\nTITLE: Truncate Function Examples in SQL\nDESCRIPTION: Examples demonstrating the truncate function with different decimal places, including negative values for truncating left of decimal point.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/math.rst#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\ntruncate(REAL '12.333', -1) -> result is 10.0\ntruncate(REAL '12.333', 0)  -> result is 12.0\ntruncate(REAL '12.333', 1)  -> result is 12.3\n```\n\n----------------------------------------\n\nTITLE: Using set_agg() Function in Presto SQL\nDESCRIPTION: Examples of using the set_agg() function which creates an array from distinct input elements, including how it handles NULL values and complex row types.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/aggregate.rst.txt#2025-04-10_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSELECT set_agg(x) FROM (VALUES(1), (2), (null), (2), (null)) t(x) -- ARRAY[1, 2, null]\nSELECT set_agg(x) FROM (VALUES(ROW(ROW(1, null))), ROW((ROW(2, 'a'))), ROW((ROW(1, null))), (null)) t(x) -- ARRAY[ROW(1, null), ROW(2, 'a'), null]\n```\n\n----------------------------------------\n\nTITLE: Creating Multimap from Entries in Presto SQL\nDESCRIPTION: Demonstrates creating a multimap (map with array values) from an array of entries.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/map.rst.txt#2025-04-10_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT multimap_from_entries(ARRAY[(1, 'x'), (2, 'y'), (1, 'z')]); -- {1 -> ['x', 'z'], 2 -> ['y']}\n```\n\n----------------------------------------\n\nTITLE: Transforming Map Keys in Presto SQL\nDESCRIPTION: Demonstrates how to transform the keys of a map using a custom function with transform_keys.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/map.rst.txt#2025-04-10_snippet_12\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT transform_keys(MAP(ARRAY[], ARRAY[]), (k, v) -> k + 1); -- {}\n```\n\n----------------------------------------\n\nTITLE: New Window Functions in Presto SQL 0.73\nDESCRIPTION: Introduction of lead() and lag() window functions that allow access to row values before or after the current row.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.73.rst#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nlead()\nlag()\n```\n\n----------------------------------------\n\nTITLE: Trigonometric Functions in Radians\nDESCRIPTION: Standard trigonometric functions including sine, cosine, tangent and their inverse and hyperbolic variants. All arguments are in radians.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/math.rst#2025-04-10_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nacos(x) -> double\nasin(x) -> double\natan(x) -> double\natan2(y, x) -> double\ncos(x) -> double\ncosh(x) -> double\nsin(x) -> double\ntan(x) -> double\ntanh(x) -> double\n```\n\n----------------------------------------\n\nTITLE: Using split_to_map Function with Custom Resolver in Presto SQL\nDESCRIPTION: Example of using split_to_map() with a function to resolve duplicate keys in the resulting map using different strategies.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/string.rst#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT(split_to_map('a:1;b:2;a:3', ';', ':', (k, v1, v2) -> v1)); -- {\"a\": \"1\", \"b\": \"2\"}\nSELECT(split_to_map('a:1;b:2;a:3', ';', ':', (k, v1, v2) -> CONCAT(v1, v2))); -- {\"a\": \"13\", \"b\": \"2\"}\n```\n\n----------------------------------------\n\nTITLE: Using INTERSECT Set Operation in Presto SQL\nDESCRIPTION: INTERSECT is a set operation that returns only the rows that appear in both result sets. This release adds support for this SQL operation.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.147.rst#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nINTERSECT\n```\n\n----------------------------------------\n\nTITLE: Computing KLL sketch with custom K parameter in Presto\nDESCRIPTION: Computes a KLL sketch using a custom K parameter which controls accuracy. K must be in range [8..65535] with smaller values using less storage but providing less accuracy.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/sketch.rst#2025-04-10_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nsketch_kll_with_k[T](x: T, k: int) -> kllsketch[T]\n```\n\n----------------------------------------\n\nTITLE: Configuring Recoverable Grouped Execution in Presto SQL\nDESCRIPTION: Enable automatic retrying of failed buckets for certain INSERT queries using the Hive connector. This can be configured using a session property or a configuration property.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.222.rst#2025-04-10_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSET SESSION recoverable_grouped_execution = true;\n```\n\n----------------------------------------\n\nTITLE: Aggregating Geometries in Presto SQL\nDESCRIPTION: Aggregate functions for creating convex hulls and unions of geometries.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/geospatial.rst.txt#2025-04-10_snippet_29\n\nLANGUAGE: SQL\nCODE:\n```\nconvex_hull_agg(Geometry) -> Geometry\n```\n\nLANGUAGE: SQL\nCODE:\n```\ngeometry_union_agg(Geometry) -> Geometry\n```\n\n----------------------------------------\n\nTITLE: Kafka Table Definition JSON Schema\nDESCRIPTION: JSON schema for defining Kafka table mappings in Presto. Specifies table name, schema, topic, and field definitions for both key and message data.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/kafka.rst#2025-04-10_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"tableName\": ...,\n    \"schemaName\": ...,\n    \"topicName\": ...,\n    \"key\": {\n        \"dataFormat\": ...,\n        \"fields\": [\n            ...\n        ]\n    },\n    \"message\": {\n        \"dataFormat\": ...,\n        \"fields\": [\n            ...\n       ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic HANA Connector Configuration\nDESCRIPTION: Basic configuration properties for connecting Presto to a HANA database. Includes essential connection parameters like connector name, JDBC URL, username and password.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/hana.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nconnector.name=hana\nconnection-url=jdbc:sap://[serverName[\\instanceName][:portNumber]]\nconnection-user=root\nconnection-password=secret\n```\n\n----------------------------------------\n\nTITLE: ALTER SCHEMA Command Syntax\nDESCRIPTION: Demonstrates the basic syntax for altering a schema name in Presto. The command allows renaming an existing schema to a new name.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/sql/alter-schema.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: none\nCODE:\n```\nALTER SCHEMA name RENAME TO new_name\n```\n\n----------------------------------------\n\nTITLE: Basic Role Creation in PrestoDB\nDESCRIPTION: Simple example of creating a new role named 'admin' without specifying an administrator.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/create-role.rst#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCREATE ROLE admin;\n```\n\n----------------------------------------\n\nTITLE: Concatenating Arrays and Elements in Presto SQL\nDESCRIPTION: Shows how to use the || operator to concatenate arrays with arrays or elements of the same type.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/array.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT ARRAY [1] || ARRAY [2]; -- [1, 2]\nSELECT ARRAY [1] || 2; -- [1, 2]\nSELECT 2 || ARRAY [1]; -- [2, 1]\n```\n\n----------------------------------------\n\nTITLE: Creating an Iceberg Table with Year Partitioning in Presto\nDESCRIPTION: Creates an Iceberg table that uses year partitioning to organize data by the year component of the 'ds' date field. This partition transform facilitates time-based query optimizations.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/iceberg.rst#2025-04-10_snippet_41\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE players (\n    id int,\n    name varchar,\n    team varchar,\n    ds date\n)\nWITH (\n    format = 'ORC',\n    partitioning = ARRAY['year(ds)']\n);\n```\n\n----------------------------------------\n\nTITLE: Inserting Data into an Iceberg Table in Presto\nDESCRIPTION: Inserts a single row into the page_views table with timestamp, integer, string, date, and string values. This example demonstrates the basic syntax for adding data to an Iceberg table.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/iceberg.rst#2025-04-10_snippet_44\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO iceberg.web.page_views VALUES(TIMESTAMP '2023-08-12 03:04:05.321', 1, 'https://example.com', current_date, 'country');\n```\n\n----------------------------------------\n\nTITLE: Extracting Points from Linestring in Presto SQL\nDESCRIPTION: Functions to extract individual points or all points from a linestring geometry.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/geospatial.rst.txt#2025-04-10_snippet_12\n\nLANGUAGE: SQL\nCODE:\n```\nST_PointN(LineString, index) -> Point\n```\n\nLANGUAGE: SQL\nCODE:\n```\nST_Points(Geometry) -> array(Point)\n```\n\n----------------------------------------\n\nTITLE: Adding, Renaming, and Dropping Columns in Iceberg Tables in Presto\nDESCRIPTION: Shows how to alter an Iceberg table by adding, renaming, and dropping columns using ALTER TABLE commands.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/iceberg.rst#2025-04-10_snippet_47\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE iceberg.web.page_views ADD COLUMN zipcode VARCHAR;\n\nALTER TABLE iceberg.web.page_views RENAME COLUMN zipcode TO location;\n\nALTER TABLE iceberg.web.page_views DROP COLUMN location;\n```\n\n----------------------------------------\n\nTITLE: Setting Task Concurrency in Presto\nDESCRIPTION: Configures the default local concurrency for parallel operators like joins and aggregations. Should be adjusted based on query concurrency and worker resources - lower for clusters with many concurrent queries, higher for clusters running few queries.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/admin/properties.rst#2025-04-10_snippet_28\n\nLANGUAGE: properties\nCODE:\n```\ntask.concurrency\n```\n\n----------------------------------------\n\nTITLE: Using parse_presto_data_size() Function in Presto\nDESCRIPTION: Demonstrates the parse_presto_data_size() function that converts string representations of data sizes (with units like B, kB, MB) into numeric values.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/conversion.rst#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nparse_presto_data_size(string) -> decimal(38)\n```\n\n----------------------------------------\n\nTITLE: Creating a Kudu Table with Hash Partitioning in Presto SQL\nDESCRIPTION: This example demonstrates how to create a Kudu table using Presto SQL. It specifies primary key columns, column properties like nullable and encoding, and table-level properties such as hash partitioning and replication factor.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/kudu.rst.txt#2025-04-10_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE user_events (\n  user_id int WITH (primary_key = true),\n  event_name varchar WITH (primary_key = true),\n  message varchar,\n  details varchar WITH (nullable = true, encoding = 'plain')\n) WITH (\n  partition_by_hash_columns = ARRAY['user_id'],\n  partition_by_hash_buckets = 5,\n  number_of_replicas = 3\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a Table in Kudu via Presto\nDESCRIPTION: SQL statement to create a table in Kudu using Presto. Demonstrates specifying primary key, column properties, and partitioning.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/kudu.rst#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE kudu.default.users (\n  user_id int WITH (primary_key = true),\n  first_name varchar,\n  last_name varchar\n) WITH (\n  partition_by_hash_columns = ARRAY['user_id'],\n  partition_by_hash_buckets = 2\n);\n```\n\n----------------------------------------\n\nTITLE: Transform Values Examples in Presto SQL\nDESCRIPTION: Demonstrates the transform_values function which applies a lambda function to transform map values while preserving keys. Shows examples of empty map handling, arithmetic operations, and string manipulations.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/map.rst#2025-04-10_snippet_22\n\nLANGUAGE: sql\nCODE:\n```\nSELECT transform_values(MAP(ARRAY[], ARRAY[]), (k, v) -> v + 1);\nSELECT transform_values(MAP(ARRAY [1, 2, 3], ARRAY [10, 20, 30]), (k, v) -> v + k);\nSELECT transform_values(MAP(ARRAY [1, 2, 3], ARRAY ['a', 'b', 'c']), (k, v) -> k * k);\nSELECT transform_values(MAP(ARRAY ['a', 'b'], ARRAY [1, 2]), (k, v) -> k || CAST(v as VARCHAR));\nSELECT transform_values(MAP(ARRAY [1, 2], ARRAY [1.0, 1.4]),\n                        (k, v) -> MAP(ARRAY[1, 2], ARRAY['one', 'two'])[k] || '_' || CAST(v AS VARCHAR));\n```\n\n----------------------------------------\n\nTITLE: Configuring Hudi Connector Properties\nDESCRIPTION: Minimum configuration settings required in the hudi.properties file to connect Presto to Hudi tables via Hive metastore. These properties must be placed in the <presto_install_dir>/etc/catalog directory.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/hudi.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nconnector.name=hudi\nhive.metastore.uri=thrift://hms.host:9083\n```\n\n----------------------------------------\n\nTITLE: Example Session Property Rules Configuration in JSON\nDESCRIPTION: JSON configuration example for session property rules that defines different behavior for queries based on resource groups and client tags. Includes rules for global queries, interactive queries, ETL jobs, and high memory ETL jobs.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/admin/session-property-managers.rst#2025-04-10_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"group\": \"global.*\",\n    \"sessionProperties\": {\n      \"query_max_execution_time\": \"8h\",\n    }\n  },\n  {\n    \"group\": \"global.interactive.*\",\n    \"sessionProperties\": {\n      \"query_max_execution_time\": \"1h\"\n    }\n  },\n  {\n    \"group\": \"global.pipeline.*\",\n    \"clientTags\": [\"etl\"],\n    \"sessionProperties\": {\n      \"scale_writers\": \"true\",\n      \"writer_min_size\": \"1GB\"\n    }\n  },\n  {\n    \"group\": \"global.pipeline.*\",\n    \"clientTags\": [\"high_mem_etl\"],\n    \"sessionProperties\": {\n      \"exchange_materialization_strategy\": \"ALL\",\n      \"partitioning_provider_catalog\": \"hive\",\n      \"hash_partition_count\": 4096\n    }\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Creating and Inserting Data into MongoDB Table with Presto SQL\nDESCRIPTION: Demonstrates how to create a table in MongoDB using Presto SQL, insert data into it, and query the data including the special '_id' field. This example creates an 'orders' table and inserts two records.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/mongodb.rst#2025-04-10_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE IF NOT EXISTS orders (\n    orderkey bigint,\n    orderstatus varchar,\n    totalprice double,\n    orderdate date\n);\n\nINSERT INTO orders VALUES(1, 'bad', 50.0, current_date);\nINSERT INTO orders VALUES(2, 'good', 100.0, current_date);\nSELECT _id, * FROM orders;\n```\n\n----------------------------------------\n\nTITLE: Estimating Distinct Values from Theta Sketch in Presto SQL\nDESCRIPTION: Returns the estimate of distinct values from the input theta sketch.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/sketch.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nsketch_theta_estimate(sketch) -> double\n```\n\n----------------------------------------\n\nTITLE: Configuring Hadoop Catalog for Iceberg in Presto\nDESCRIPTION: Minimal configuration example for setting up an Iceberg Hadoop catalog in Presto. This specifies the connector name, catalog type as Hadoop, and the warehouse location on HDFS.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/iceberg.rst#2025-04-10_snippet_6\n\nLANGUAGE: none\nCODE:\n```\nconnector.name=iceberg\niceberg.catalog.type=hadoop\niceberg.catalog.warehouse=hdfs://hostname:port\n```\n\n----------------------------------------\n\nTITLE: Using ST_GeometryType in Presto\nDESCRIPTION: Returns the type of the geometry as a string. This function identifies the specific type of geometry object (e.g., POINT, LINESTRING, POLYGON).\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/geospatial.rst#2025-04-10_snippet_11\n\nLANGUAGE: sql\nCODE:\n```\nST_GeometryType(Geometry) -> varchar\n```\n\n----------------------------------------\n\nTITLE: Searched CASE Example\nDESCRIPTION: Example of searched CASE expression evaluating multiple conditions with different results.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/conditional.rst#2025-04-10_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSELECT a, b,\n       CASE\n           WHEN a = 1 THEN 'aaa'\n           WHEN b = 2 THEN 'bbb'\n           ELSE 'ccc'\n       END\n```\n\n----------------------------------------\n\nTITLE: SET ROLE Command Syntax in Presto SQL\nDESCRIPTION: The basic syntax for the SET ROLE command in Presto. Allows setting a single role, enabling all roles, or disabling all roles for the current session. The command affects only the current catalog and requires appropriate role grants for the user.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/sql/set-role.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSET ROLE ( role | ALL | NONE )\n```\n\n----------------------------------------\n\nTITLE: Converting Map to Array of Entries in Presto SQL\nDESCRIPTION: Shows how to convert a map to an array of key-value pair entries using map_entries function.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/map.rst.txt#2025-04-10_snippet_5\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT map_entries(MAP(ARRAY[1, 2], ARRAY['x', 'y'])); -- [ROW(1, 'x'), ROW(2, 'y')]\n```\n\n----------------------------------------\n\nTITLE: Using Sign Function in Presto SQL\nDESCRIPTION: The sign function returns the sign of a number (-1, 0, or 1). This is a new function added in this release.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.147.rst#2025-04-10_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nsign\n```\n\n----------------------------------------\n\nTITLE: Querying Table Changelog\nDESCRIPTION: Query pattern for retrieving table changes from the hidden $changelog metadata table with optional snapshot range.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/iceberg.rst#2025-04-10_snippet_19\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM \"orders$snapshots\";\n```\n\n----------------------------------------\n\nTITLE: Using UNNEST for Array Expansion in Presto SQL\nDESCRIPTION: Illustrates how to use UNNEST in Presto as an alternative to Hive's LATERAL VIEW explode() for expanding arrays.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/migration/from-hive.rst.txt#2025-04-10_snippet_9\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT student, score\nFROM tests\nCROSS JOIN UNNEST(scores) AS t (score);\n```\n\n----------------------------------------\n\nTITLE: Creating Maps from Arrays in Presto SQL\nDESCRIPTION: Demonstrates the new map function that creates maps from arrays of keys and values.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.86.rst#2025-04-10_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nmap\n```\n\n----------------------------------------\n\nTITLE: Adding map_top_n Function in SQL\nDESCRIPTION: Introduces a new SQL function map_top_n to truncate map items, keeping only the top N elements by value.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.279.rst#2025-04-10_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\nmap_top_n(map, N)\n```\n\n----------------------------------------\n\nTITLE: Using UNNEST for Array Expansion in Presto SQL\nDESCRIPTION: Illustrates how to use UNNEST in Presto as an alternative to Hive's LATERAL VIEW explode() for expanding arrays.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/migration/from-hive.rst.txt#2025-04-10_snippet_9\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT student, score\nFROM tests\nCROSS JOIN UNNEST(scores) AS t (score);\n```\n\n----------------------------------------\n\nTITLE: ALTER FUNCTION Syntax Definition\nDESCRIPTION: The basic syntax for the ALTER FUNCTION command in Presto SQL. Allows specifying a qualified function name with optional parameter types and setting the null handling behavior.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/alter-function.rst#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nALTER FUNCTION qualified_function_name [ ( parameter_type[, ...] ) ]\nRETURNS NULL ON NULL INPUT | CALLED ON NULL INPUT\n```\n\n----------------------------------------\n\nTITLE: Rolling Back Iceberg Table to Previous Snapshot in Presto SQL\nDESCRIPTION: Shows how to use the iceberg.system.rollback_to_snapshot procedure to revert a table to a previous state.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/iceberg.rst#2025-04-10_snippet_61\n\nLANGUAGE: sql\nCODE:\n```\nCALL iceberg.system.rollback_to_snapshot('tpch', 'ctas_nation', 5837462824399906536);\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM ctas_nation WHERE name = 'new country';\n```\n\n----------------------------------------\n\nTITLE: Truncating Decimal Values in Presto SQL\nDESCRIPTION: This snippet shows examples of using the truncate function in Presto to round numbers to a specified number of decimal places, including negative values for truncating left of the decimal point.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/math.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\ntruncate(REAL '12.333', -1) -> result is 10.0\ntruncate(REAL '12.333', 0)  -> result is 12.0\ntruncate(REAL '12.333', 1)  -> result is 12.3\n```\n\n----------------------------------------\n\nTITLE: Query Results Response\nDESCRIPTION: Example response containing query results and final execution statistics after query completion.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/rest/statement.rst#2025-04-10_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Type: application/json\nX-Content-Type-Options: nosniff\nVary: Accept-Encoding, User-Agent\nTransfer-Encoding: chunked\n\n383\n{\n  \"id\":\"20140108_110629_00011_dk5x2\",\n  \"infoUri\":\"http://localhost:8001/v1/query/20140108_110629_00011_dk5x2\",\n  \"columns\":[\n    {\n      \"name\":\"name\",\n      \"type\":\"varchar\"\n    }\n  ],\n  \"data\":[\n    [\"4165@domU-12-31-39-0F-CC-72\"]\n  ],\n  \"stats\":{\n    \"state\":\"FINISHED\",\n    \"scheduled\":true,\n    \"nodes\":1,\n    \"totalSplits\":2,\n    \"queuedSplits\":0,\n    \"runningSplits\":0,\n    \"completedSplits\":2,\n    \"cpuTimeMillis\":1,\n    \"wallTimeMillis\":4,\n    \"processedRows\":1,\n    \"processedBytes\":27,\n    \"rootStage\":{\n      \"stageId\":\"1\",\n      \"state\":\"FINISHED\",\n      \"done\":true,\n      \"nodes\":1,\n      \"totalSplits\":1,\n      \"queuedSplits\":0,\n      \"runningSplits\":0,\n      \"completedSplits\":1,\n      \"cpuTimeMillis\":0,\n      \"wallTimeMillis\":0,\n      \"processedRows\":1,\n      \"processedBytes\":32,\n      \"subStages\":[\n        {\n          \"stageId\":\"1\",\n          \"state\":\"FINISHED\",\n          \"done\":true,\n          \"nodes\":1,\n          \"totalSplits\":1,\n          \"queuedSplits\":0,\n          \"runningSplits\":0,\n          \"completedSplits\":1,\n          \"cpuTimeMillis\":0,\n          \"wallTimeMillis\":4,\n          \"processedRows\":1,\n          \"processedBytes\":27,\n          \"subStages\":[]\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Detailed Query Information Response in Presto REST API\nDESCRIPTION: Example JSON response from the GET /v1/query/{queryId} endpoint showing detailed query statistics and metadata. The response includes query identification, session information, execution statistics, and performance metrics for a completed Presto query.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/rest/query.rst#2025-04-10_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"queryId\" : \"20131229_211533_00017_dk5x2\",\n  \"session\" : {\n\t   \"user\" : \"tobrien\",\n\t   \"source\" : \"presto-cli\",\n       \"catalog\" : \"jmx\",\n       \"schema\" : \"jmx\",\n       \"remoteUserAddress\" : \"173.15.79.89\",\n\t   \"userAgent\" : \"StatementClient/0.55-SNAPSHOT\",\n       \"startTime\" : 1388351852026\n  },\n  \"state\" : \"FINISHED\",\n  \"self\" : \"http://10.193.207.128:8080/v1/query/20131229_211533_00017_dk5x2\",\n  \"fieldNames\" : [ \"name\" ],\n  \"query\" : \"select name from \\\"java.lang:type=runtime\\\"\",\n  \"queryStats\" : {\n\t   \"createTime\" : \"2013-12-29T16:17:32.027-05:00\",\n\t   \"executionStartTime\" : \"2013-12-29T16:17:32.086-05:00\",\n\t   \"lastHeartbeat\" : \"2013-12-29T16:17:44.561-05:00\",\n\t   \"endTime\" : \"2013-12-29T16:17:32.152-05:00\",\n\t   \"elapsedTime\" : \"125.00ms\",\n\t   \"queuedTime\" : \"1.31ms\",\n\t   \"analysisTime\" : \"4.84ms\",\n\t   \"totalTasks\" : 2,\n\t   \"runningTasks\" : 0,\n\t   \"completedTasks\" : 2,\n\t   \"totalDrivers\" : 2,\n\t   \"queuedDrivers\" : 0,\n\t   \"runningDrivers\" : 0,\n\t   \"completedDrivers\" : 2,\n\t   \"totalMemoryReservation\" : \"0B\",\n\t   \"totalScheduledTime\" : \"5.84ms\",\n\t   \"totalCpuTime\" : \"710.49us\",\n\t   \"totalBlockedTime\" : \"27.38ms\",\n\t   \"rawInputDataSize\" : \"27B\",\n\t   \"rawInputPositions\" : 1,\n\t   \"processedInputDataSize\" : \"32B\",\n\t   \"processedInputPositions\" : 1,\n\t   \"outputDataSize\" : \"32B\",\n\t   \"outputPositions\" : 1\n  },\n  \"outputStage\" : { }\n}\n```\n\n----------------------------------------\n\nTITLE: Failed Type Casting Without TRY in Presto SQL\nDESCRIPTION: Demonstrates a query that fails when attempting to cast an invalid zip code to BIGINT without using the TRY function.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/conditional.rst.txt#2025-04-10_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nSELECT CAST(origin_zip AS BIGINT) FROM shipping;\n```\n\n----------------------------------------\n\nTITLE: CUBE Operator Example in Presto SQL\nDESCRIPTION: Demonstrates the use of the CUBE operator to generate all possible grouping sets for a given set of columns.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/select.rst#2025-04-10_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\nSELECT origin_state, destination_state, sum(package_weight)\nFROM shipping\nGROUP BY CUBE (origin_state, destination_state);\n```\n\n----------------------------------------\n\nTITLE: Generic Bitwise Arithmetic Right Shift Operations in Presto SQL\nDESCRIPTION: Examples of generic arithmetic right shift operations on BIGINT and SMALLINT values using bitwise_right_shift_arithmetic() function.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/bitwise.rst.txt#2025-04-10_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nSELECT bitwise_right_shift_arithmetic(BIGINT '-8', 2); -- -2\nSELECT bitwise_right_shift_arithmetic(SMALLINT '7', 2); -- 1\n```\n\n----------------------------------------\n\nTITLE: Query Results Response\nDESCRIPTION: Example response containing query results and final execution statistics after query completion.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/rest/statement.rst#2025-04-10_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Type: application/json\nX-Content-Type-Options: nosniff\nVary: Accept-Encoding, User-Agent\nTransfer-Encoding: chunked\n\n383\n{\n  \"id\":\"20140108_110629_00011_dk5x2\",\n  \"infoUri\":\"http://localhost:8001/v1/query/20140108_110629_00011_dk5x2\",\n  \"columns\":[\n    {\n      \"name\":\"name\",\n      \"type\":\"varchar\"\n    }\n  ],\n  \"data\":[\n    [\"4165@domU-12-31-39-0F-CC-72\"]\n  ],\n  \"stats\":{\n    \"state\":\"FINISHED\",\n    \"scheduled\":true,\n    \"nodes\":1,\n    \"totalSplits\":2,\n    \"queuedSplits\":0,\n    \"runningSplits\":0,\n    \"completedSplits\":2,\n    \"cpuTimeMillis\":1,\n    \"wallTimeMillis\":4,\n    \"processedRows\":1,\n    \"processedBytes\":27,\n    \"rootStage\":{\n      \"stageId\":\"1\",\n      \"state\":\"FINISHED\",\n      \"done\":true,\n      \"nodes\":1,\n      \"totalSplits\":1,\n      \"queuedSplits\":0,\n      \"runningSplits\":0,\n      \"completedSplits\":1,\n      \"cpuTimeMillis\":0,\n      \"wallTimeMillis\":0,\n      \"processedRows\":1,\n      \"processedBytes\":32,\n      \"subStages\":[\n        {\n          \"stageId\":\"1\",\n          \"state\":\"FINISHED\",\n          \"done\":true,\n          \"nodes\":1,\n          \"totalSplits\":1,\n          \"queuedSplits\":0,\n          \"runningSplits\":0,\n          \"completedSplits\":1,\n          \"cpuTimeMillis\":0,\n          \"wallTimeMillis\":4,\n          \"processedRows\":1,\n          \"processedBytes\":27,\n          \"subStages\":[]\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Examples of Querying Lark Sheets by Different Identifiers\nDESCRIPTION: SQL examples showing how to query sheets using different methods: by sheet title, by sheet index, or by sheet ID.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/larksheets.rst.txt#2025-04-10_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\n-- by sheet title\nSELECT * FROM my_ss.\"number_text\"\n\n-- by sheet index\nSELECT * FROM my_ss.\"$0\"\n\n-- by sheet id\nSELECT * FROM my_ss.\"@MT1p4I\"\n```\n\n----------------------------------------\n\nTITLE: Creating Tables from Query Results in Presto 0.56\nDESCRIPTION: Shows how to create a new table based on the result of a SELECT query. This example creates a summary table with data grouped by order date. Tables are created in Hive as unpartitioned RCFiles with Binary SerDe.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.56.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE orders_by_date AS\nSELECT orderdate, sum(totalprice) AS price\nFROM orders\nGROUP BY orderdate\n```\n\n----------------------------------------\n\nTITLE: Computing Convex Hull of Geometry in Presto SQL\nDESCRIPTION: Returns the minimum convex geometry that encloses all input geometries.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/geospatial.rst.txt#2025-04-10_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nST_ConvexHull(Geometry) -> Geometry\n```\n\n----------------------------------------\n\nTITLE: String to JSON Casting Examples in PrestoDB\nDESCRIPTION: Shows how CAST(string AS JSON) handles various input strings by converting them into JSON string values. Demonstrates escaping behavior.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/json.rst.txt#2025-04-10_snippet_15\n\nLANGUAGE: sql\nCODE:\n```\nSELECT CAST('not_json' AS JSON);\nSELECT CAST('{\"a\": 1, \"b\": 2}' AS JSON);\nSELECT CAST('[1, 2, 3]' AS JSON);\nSELECT CAST('\"abc\"' AS JSON);\nSELECT CAST('42' AS JSON);\nSELECT CAST('true' AS JSON);\nSELECT CAST('null' AS JSON);\n```\n\n----------------------------------------\n\nTITLE: LIMIT with OFFSET in Presto SQL\nDESCRIPTION: When OFFSET is present, the LIMIT clause is evaluated after the OFFSET clause, allowing for pagination by skipping a certain number of rows before limiting the result.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/select.rst#2025-04-10_snippet_22\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM (VALUES 5, 2, 4, 1, 3) t(x) ORDER BY x OFFSET 2 LIMIT 2;\n```\n\n----------------------------------------\n\nTITLE: Simple UNION Examples in Presto SQL\nDESCRIPTION: Demonstrates basic UNION operations with and without the ALL qualifier to combine result sets.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/select.rst#2025-04-10_snippet_17\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 13\nUNION\nSELECT 42;\n```\n\n----------------------------------------\n\nTITLE: Querying Iceberg Tables Using Tag Name\nDESCRIPTION: Demonstrates how to query an Iceberg table by specifying a tag name using the FOR SYSTEM_VERSION AS OF clause. This allows accessing a specific snapshot of data identified by the tag.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/iceberg.rst#2025-04-10_snippet_65\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM nation FOR SYSTEM_VERSION AS OF 'testTag';\n```\n\n----------------------------------------\n\nTITLE: Transforming Map Keys in SQL\nDESCRIPTION: The transform_keys function creates a new map by applying a transformation function to each key-value pair in the input map. The function receives both the key and value and returns a new key to use in the result map.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/map.rst#2025-04-10_snippet_20\n\nLANGUAGE: sql\nCODE:\n```\nSELECT transform_keys(MAP(ARRAY[], ARRAY[]), (k, v) -> k + 1); -- {}\n```\n\n----------------------------------------\n\nTITLE: Calculating Centroid of Geometry in Presto SQL\nDESCRIPTION: Returns the point value that is the mathematical centroid of a geometry. It supports both planar geometries and spherical geographies.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/geospatial.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nST_Centroid(Geometry) -> Point\n```\n\nLANGUAGE: SQL\nCODE:\n```\nST_Centroid(SphericalGeography) -> Point\n```\n\n----------------------------------------\n\nTITLE: Creating External Table in Presto-Accumulo\nDESCRIPTION: Example of creating an external table with column mapping, indexing, and locality groups configuration.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/accumulo.rst#2025-04-10_snippet_19\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE external_table (\n  a VARCHAR,\n  b BIGINT,\n  c DATE\n)\nWITH (\n  column_mapping = 'a:md:a,b:md:b,c:md:c',\n  external = true,\n  index_columns = 'b,c',\n  locality_groups = 'foo:b,c'\n);\n```\n\n----------------------------------------\n\nTITLE: LIMIT with OFFSET in Presto SQL\nDESCRIPTION: When OFFSET is present, the LIMIT clause is evaluated after the OFFSET clause, allowing for pagination by skipping a certain number of rows before limiting the result.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/select.rst#2025-04-10_snippet_22\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM (VALUES 5, 2, 4, 1, 3) t(x) ORDER BY x OFFSET 2 LIMIT 2;\n```\n\n----------------------------------------\n\nTITLE: Querying MongoDB by ObjectId in Presto\nDESCRIPTION: Shows how to query a MongoDB collection using the ObjectId in Presto SQL. This example selects all fields from the 'orders' table where the '_id' matches a specific ObjectId.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/mongodb.rst#2025-04-10_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nSELECT _id, * FROM orders WHERE _id = ObjectId('55b151633864d6438c61a9ce');\n```\n\n----------------------------------------\n\nTITLE: Splitting Strings with regexp_split in Presto SQL\nDESCRIPTION: Illustrates the usage of regexp_split function to split a string using a regular expression pattern and return an array of substrings.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/regexp.rst#2025-04-10_snippet_8\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT regexp_split('1a 2b 14m', '\\s*[a-z]+\\s*'); -- [1, 2, 14, ]\n```\n\n----------------------------------------\n\nTITLE: Using Secure Random Function in Presto SQL\nDESCRIPTION: Demonstrates the usage of the new secure_random() function to generate a cryptographically secure random number.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.272.rst#2025-04-10_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT secure_random();\n```\n\n----------------------------------------\n\nTITLE: Using ST_YMax in Presto\nDESCRIPTION: Returns the Y maximum of the geometry's bounding box. This function provides the maximum Y coordinate value of the minimum bounding rectangle that contains the geometry.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/geospatial.rst#2025-04-10_snippet_22\n\nLANGUAGE: sql\nCODE:\n```\nST_YMax(Geometry) -> double\n```\n\n----------------------------------------\n\nTITLE: Retrieving Interior Rings of Polygon in Presto SQL\nDESCRIPTION: Returns an array of all interior rings found in the input polygon geometry.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/geospatial.rst.txt#2025-04-10_snippet_16\n\nLANGUAGE: SQL\nCODE:\n```\nST_InteriorRings(Geometry) -> array(Geometry)\n```\n\n----------------------------------------\n\nTITLE: Destructuring T-Digest in Presto SQL\nDESCRIPTION: Returns a row representing a T-digest data structure in the form of its component parts, including centroid means and weights, compression factor, min, max, sum, and count of values in the digest.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/tdigest.rst.txt#2025-04-10_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\ndestructure_tdigest(tdigest<double>) -> row<centroid_means array<double>, centroid_weights array<integer>, compression double, min double, max double, sum double, count bigint>\n```\n\n----------------------------------------\n\nTITLE: Preparing Statement with Parameters\nDESCRIPTION: Example of preparing a SELECT statement with three parameters for later analysis.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/describe-input.rst#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nPREPARE my_select1 FROM\nSELECT ? FROM nation WHERE regionkey = ? AND name < ?;\n```\n\n----------------------------------------\n\nTITLE: Checking Subnet Relationship in Presto SQL\nDESCRIPTION: Shows how to use is_subnet_of() function to check if one subnet is contained within another subnet.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/ip.rst#2025-04-10_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nSELECT is_subnet_of(IPPREFIX '192.168.3.131/26', IPPREFIX '192.168.3.144/30'); -- true\nSELECT is_subnet_of(IPPREFIX '64:ff9b::17/64', IPPREFIX '64:ffff::17/64'); -- false\nSELECT is_subnet_of(IPPREFIX '192.168.3.131/26', IPPREFIX '192.168.3.131/26'); -- true\n```\n\n----------------------------------------\n\nTITLE: EXCEPT Example in Presto SQL\nDESCRIPTION: Demonstrates EXCEPT operation which returns rows from first query that are not in second query result.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/select.rst#2025-04-10_snippet_19\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM (VALUES 13, 42)\nEXCEPT\nSELECT 13;\n```\n\n----------------------------------------\n\nTITLE: Implementing Function Plugin in Presto\nDESCRIPTION: Example of a Presto plugin class that implements the Plugin interface to register custom functions. Uses ImmutableSet from Guava to build the set of function classes.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/develop/functions.rst#2025-04-10_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic class ExampleFunctionsPlugin\n        implements Plugin\n{\n    @Override\n    public Set<Class<?>> getFunctions()\n    {\n        return ImmutableSet.<Class<?>>builder()\n                .add(ExampleNullFunction.class)\n                .add(IsNullFunction.class)\n                .add(IsEqualOrNullFunction.class)\n                .add(ExampleStringFunction.class)\n                .add(ExampleAverageFunction.class)\n                .build();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using LIKE Clause with SHOW CATALOGS and SHOW SCHEMAS in Presto SQL\nDESCRIPTION: The LIKE clause can now be used with SHOW CATALOGS and SHOW SCHEMAS commands to filter results based on pattern matching.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.147.rst#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSHOW CATALOGS\n```\n\nLANGUAGE: sql\nCODE:\n```\nSHOW SCHEMAS\n```\n\n----------------------------------------\n\nTITLE: Using ST_YMax in Presto\nDESCRIPTION: Returns the Y maximum of the geometry's bounding box. This function provides the maximum Y coordinate value of the minimum bounding rectangle that contains the geometry.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/geospatial.rst#2025-04-10_snippet_22\n\nLANGUAGE: sql\nCODE:\n```\nST_YMax(Geometry) -> double\n```\n\n----------------------------------------\n\nTITLE: Extracting Year of Week in Presto SQL\nDESCRIPTION: The 'year_of_week' function returns the year of the ISO week from a given date or timestamp value. It's also aliased as 'yow'. The function returns a bigint value.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/datetime.rst.txt#2025-04-10_snippet_16\n\nLANGUAGE: SQL\nCODE:\n```\nyear_of_week(x) -> bigint\n```\n\nLANGUAGE: SQL\nCODE:\n```\nyow(x) -> bigint\n```\n\n----------------------------------------\n\nTITLE: Querying Iceberg Table Snapshots in Presto SQL\nDESCRIPTION: Demonstrates how to query snapshot IDs from the $snapshots metadata table and insert data to create new snapshots.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/iceberg.rst#2025-04-10_snippet_60\n\nLANGUAGE: sql\nCODE:\n```\nSELECT snapshot_id FROM iceberg.tpch.\"ctas_nation$snapshots\" ORDER BY committed_at;\n```\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO ctas_nation VALUES(25, 'new country', 1, 'comment');\nSELECT snapshot_id FROM iceberg.tpch.\"ctas_nation$snapshots\" ORDER BY committed_at;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM ctas_nation WHERE name = 'new country';\n```\n\n----------------------------------------\n\nTITLE: Using FILTER with DISTINCT in SQL Aggregations\nDESCRIPTION: Support for selective aggregates using the FILTER clause combined with DISTINCT qualifiers in SQL queries.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.198.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nFILTER\n```\n\n----------------------------------------\n\nTITLE: Deleting Filtered Rows in Presto (Air Shipments)\nDESCRIPTION: Example of deleting specific rows from a table using a WHERE clause. This query deletes all line items that were shipped by air.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/sql/delete.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nDELETE FROM lineitem WHERE shipmode = 'AIR';\n```\n\n----------------------------------------\n\nTITLE: Enabling Table Finish Operator Memory Tracking in Presto SQL\nDESCRIPTION: Enables memory tracking in TableFinishOperator by setting a configuration property. This can help investigate GC issues on the coordinator by allowing debugging of memory usage during stats collection.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.254.rst#2025-04-10_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSET SESSION table-finish-operator-memory-tracking-enabled = true;\n```\n\n----------------------------------------\n\nTITLE: Preparing a Parameterized SELECT Query in Presto SQL\nDESCRIPTION: Shows how to prepare a SELECT query with parameters. This query selects names from the 'nation' table with placeholders for 'regionkey' and 'nationkey' comparisons.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/sql/prepare.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nPREPARE my_select2 FROM\nSELECT name FROM nation WHERE regionkey = ? AND nationkey < ?;\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Kudu Table in Presto SQL\nDESCRIPTION: Beginning of a Kudu table creation statement showing the basic CREATE TABLE syntax. This incomplete example demonstrates the starting structure of a table definition.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/kudu.rst#2025-04-10_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE mytable (\n```\n\n----------------------------------------\n\nTITLE: Creating a Table with Constant Number of Rows in Black Hole Connector\nDESCRIPTION: SQL command to create a table with a specific number of dummy rows by setting split_count, pages_per_split, and rows_per_page properties.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/blackhole.rst#2025-04-10_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE blackhole.test.nation (\n  nationkey bigint,\n  name varchar\n)\nWITH (\n  split_count = 500,\n  pages_per_split = 1000,\n  rows_per_page = 2000\n);\n```\n\n----------------------------------------\n\nTITLE: Accessing DROP COLUMN in SQL Alter Table\nDESCRIPTION: SQL syntax for dropping columns from tables in Presto, newly supported feature in this release.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.181.rst#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE table_name DROP COLUMN column_name\n```\n\n----------------------------------------\n\nTITLE: Registering Existing Iceberg Table in Presto Catalog\nDESCRIPTION: Demonstrates using the register_table system procedure to register an existing Iceberg table in the Presto catalog. Includes examples with and without specifying a metadata file.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/iceberg.rst.txt#2025-04-10_snippet_24\n\nLANGUAGE: sql\nCODE:\n```\nCALL iceberg.system.register_table('schema_name', 'table_name', 'hdfs://localhost:9000/path/to/iceberg/table/metadata/dir')\n```\n\nLANGUAGE: sql\nCODE:\n```\nCALL iceberg.system.register_table(table_name => 'table_name', schema => 'schema_name', metadata_location => 'hdfs://localhost:9000/path/to/iceberg/table/metadata/dir')\n```\n\nLANGUAGE: sql\nCODE:\n```\nCALL iceberg.system.register_table('schema_name', 'table_name', 'hdfs://localhost:9000/path/to/iceberg/table/metadata/dir', '00000-35a08aed-f4b0-4010-95d2-9d73ef4be01c.metadata.json')\n```\n\nLANGUAGE: sql\nCODE:\n```\nCALL iceberg.system.register_table(table_name => 'table_name', schema => 'schema_name', metadata_location => 'hdfs://localhost:9000/path/to/iceberg/table/metadata/dir', metadata_file => '00000-35a08aed-f4b0-4010-95d2-9d73ef4be01c.metadata.json')\n```\n\n----------------------------------------\n\nTITLE: Creating Iceberg Table with ORC Format and Basic Partitioning\nDESCRIPTION: Example of creating an Iceberg table with ORC file format, partitioned by date and country columns. This shows the basic CREATE TABLE syntax with partitioning specifications.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/iceberg.rst.txt#2025-04-10_snippet_34\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE iceberg.web.page_views (\n  view_time timestamp,\n  user_id bigint,\n  page_url varchar,\n  ds date,\n  country varchar\n)\nWITH (\n  format = 'ORC',\n  partitioning = ARRAY['ds', 'country']\n)\n```\n\n----------------------------------------\n\nTITLE: Querying Delta Lake Table in Presto SQL\nDESCRIPTION: This SQL query demonstrates how to select data from a Delta Lake table in Presto. It specifies the catalog, database, and table name to query from.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/deltalake.rst#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM sales.apac.sales_data LIMIT 200;\n```\n\n----------------------------------------\n\nTITLE: Configuring Kafka Properties for Presto\nDESCRIPTION: This snippet shows how to configure the Kafka connector properties in Presto. It specifies the connector name, Kafka node, table names, and visibility of internal columns.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/kafka-tutorial.rst.txt#2025-04-10_snippet_10\n\nLANGUAGE: properties\nCODE:\n```\nconnector.name=kafka\nkafka.nodes=localhost:9092\nkafka.table-names=tpch.customer,tpch.orders,tpch.lineitem,tpch.part,tpch.partsupp,tpch.supplier,tpch.nation,tpch.region,tweets\nkafka.hide-internal-columns=false\n```\n\n----------------------------------------\n\nTITLE: Using json_array_get Function in Presto\nDESCRIPTION: Demonstrates how to extract elements from a JSON array by index, including support for negative indices to access elements from the end. Note: This function has broken semantics for string values.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/json.rst#2025-04-10_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nSELECT json_array_get('[\"a\", [3, 9], \"c\"]', 0); -- JSON 'a' (invalid JSON)\nSELECT json_array_get('[\"a\", [3, 9], \"c\"]', 1); -- JSON '[3,9]'\n\nSELECT json_array_get('[\"c\", [3, 9], \"a\"]', -1); -- JSON 'a' (invalid JSON)\nSELECT json_array_get('[\"c\", [3, 9], \"a\"]', -2); -- JSON '[3,9]'\n\nSELECT json_array_get('[]', 0); -- null\nSELECT json_array_get('[\"a\", \"b\", \"c\"]', 10); -- null\nSELECT json_array_get('[\"c\", \"b\", \"a\"]', -10); -- null\n```\n\n----------------------------------------\n\nTITLE: Configuring Alluxio SDK Cache in Presto's Hive Connector\nDESCRIPTION: This snippet shows the configuration properties to be added to the hive.properties file to enable and set up Alluxio SDK cache. It includes settings for node selection strategy, cache type, maximum cache size, and base directory.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/cache/local.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nhive.node-selection-strategy=SOFT_AFFINITY\ncache.enabled=true\ncache.type=ALLUXIO\ncache.alluxio.max-cache-size=500GB\ncache.base-directory=/tmp/alluxio-cache\n```\n\n----------------------------------------\n\nTITLE: Zipping Arrays with Custom Function in Presto SQL\nDESCRIPTION: The zip_with function merges two arrays element-wise using a custom function. If one array is shorter, nulls are appended before applying the function.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/array.rst#2025-04-10_snippet_14\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT zip_with(ARRAY[1, 3, 5], ARRAY['a', 'b', 'c'], (x, y) -> (y, x)); -- [ROW('a', 1), ROW('b', 3), ROW('c', 5)]\nSELECT zip_with(ARRAY[1, 2], ARRAY[3, 4], (x, y) -> x + y); -- [4, 6]\nSELECT zip_with(ARRAY['a', 'b', 'c'], ARRAY['d', 'e', 'f'], (x, y) -> concat(x, y)); -- ['ad', 'be', 'cf']\nSELECT zip_with(ARRAY['a'], ARRAY['d', null, 'f'], (x, y) -> coalesce(x, y)); -- ['a', null, 'f']\n```\n\n----------------------------------------\n\nTITLE: Querying Partition Information in Presto SQL\nDESCRIPTION: Demonstrates the use of 'SHOW PARTITIONS' command and the '$partitions' table to retrieve partition information for Hive tables. This release fixes issues with these operations for tables containing null partition values.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.201.rst.txt#2025-04-10_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nSHOW PARTITIONS\n```\n\nLANGUAGE: sql\nCODE:\n```\n$partitions\n```\n\n----------------------------------------\n\nTITLE: CREATE TABLE AS Syntax in PrestoDB\nDESCRIPTION: The syntax for the CREATE TABLE AS statement in PrestoDB. It allows creating a table from a query result with optional settings for IF NOT EXISTS, column aliases, table comments, properties, and whether to include data.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/create-table-as.rst#2025-04-10_snippet_0\n\nLANGUAGE: none\nCODE:\n```\nCREATE TABLE [ IF NOT EXISTS ] table_name [ ( column_alias, ... ) ]\n[ COMMENT table_comment ]\n[ WITH ( property_name = expression [, ...] ) ]\nAS query\n[ WITH [ NO ] DATA ]\n```\n\n----------------------------------------\n\nTITLE: Executing a Prepared Statement without Parameters in Presto SQL\nDESCRIPTION: This example demonstrates how to prepare and execute a simple SELECT statement without parameters.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/sql/execute.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nEXECUTE my_select1;\n```\n\n----------------------------------------\n\nTITLE: Querying Delta Lake Table by Path in Presto SQL\nDESCRIPTION: This SQL query demonstrates how to directly query a Delta Lake table using its S3 path without registering it in the Hive metastore. It uses the special '$path$' schema to indicate a path-based query.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/deltalake.rst#2025-04-10_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM sales.\"$path$\".\"s3://db-sa-datasets/presto/sales_data\" LIMIT 200;\n```\n\n----------------------------------------\n\nTITLE: Querying Array Cumulative Sum in Presto SQL\nDESCRIPTION: Introduces a new UDF array_cum_sum() that returns an array whose elements are the cumulative sum of the input array.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.282.rst#2025-04-10_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\narray_cum_sum(input_array)\n```\n\n----------------------------------------\n\nTITLE: Basic View Creation Syntax in Presto SQL\nDESCRIPTION: Defines the core syntax for creating views in Presto SQL, including optional OR REPLACE clause and security mode specification.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/create-view.rst#2025-04-10_snippet_0\n\nLANGUAGE: none\nCODE:\n```\nCREATE [ OR REPLACE ] VIEW view_name\n[ SECURITY { DEFINER | INVOKER } ]\nAS query\n```\n\n----------------------------------------\n\nTITLE: Filtering Map Entries in Presto SQL\nDESCRIPTION: Demonstrates filtering map entries based on a predicate function using map_filter.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/map.rst.txt#2025-04-10_snippet_6\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT map_filter(MAP(ARRAY[], ARRAY[]), (k, v) -> true); -- {}\nSELECT map_filter(MAP(ARRAY[10, 20, 30], ARRAY['a', NULL, 'c']), (k, v) -> v IS NOT NULL); -- {10 -> a, 30 -> c}\nSELECT map_filter(MAP(ARRAY['k1', 'k2', 'k3'], ARRAY[20, 3, 15]), (k, v) -> v > 10); -- {k1 -> 20, k3 -> 15}\n```\n\n----------------------------------------\n\nTITLE: Amazon S3 Configuration Properties\nDESCRIPTION: Configuration properties for S3 integration, including authentication, endpoint configuration, storage settings, and encryption options.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/hive.rst.txt#2025-04-10_snippet_5\n\nLANGUAGE: properties\nCODE:\n```\nhive.s3.use-instance-credentials=false\nhive.s3.aws-access-key\nhive.s3.aws-secret-key\nhive.s3.iam-role\nhive.s3.endpoint\nhive.s3.storage-class=STANDARD\nhive.s3.signer-type\nhive.s3.path-style-access=false\nhive.s3.staging-directory\nhive.s3.pin-client-to-current-region=false\nhive.s3.ssl.enabled=true\nhive.s3.sse.enabled=false\nhive.s3.sse.type=S3\nhive.s3.sse.kms-key-id\nhive.s3.kms-key-id\nhive.s3.encryption-materials-provider\nhive.s3.upload-acl-type=Private\nhive.s3.skip-glacier-objects\n```\n\n----------------------------------------\n\nTITLE: Creating and Populating MongoDB Table in Presto\nDESCRIPTION: Example of creating a table and inserting data, demonstrating ObjectId handling.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/mongodb.rst.txt#2025-04-10_snippet_11\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE IF NOT EXISTS orders (\n    orderkey bigint,\n    orderstatus varchar,\n    totalprice double,\n    orderdate date\n);\n\nINSERT INTO orders VALUES(1, 'bad', 50.0, current_date);\nINSERT INTO orders VALUES(2, 'good', 100.0, current_date);\nSELECT _id, * FROM orders;\n```\n\n----------------------------------------\n\nTITLE: Finding Duplicate Elements in Array in Presto SQL\nDESCRIPTION: Demonstrates the use of array_duplicates function to find elements that occur more than once in an array, with exception handling for complex types.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/array.rst.txt#2025-04-10_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nSELECT array_duplicates(ARRAY[1, 2, null, 1, null, 3]) -- ARRAY[1, null]\nSELECT array_duplicates(ARRAY[ROW(1, null), ROW(1, null)]) -- \"map key cannot be null or contain nulls\"\n```\n\n----------------------------------------\n\nTITLE: WITH Clause Example in Presto SQL\nDESCRIPTION: Demonstrates the use of the WITH clause to define named relations within a query, simplifying nested queries or subqueries.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/select.rst#2025-04-10_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nSELECT a, b\nFROM (\n  SELECT a, MAX(b) AS b FROM t GROUP BY a\n) AS x;\n```\n\nLANGUAGE: sql\nCODE:\n```\nWITH x AS (SELECT a, MAX(b) AS b FROM t GROUP BY a)\nSELECT a, b FROM x;\n```\n\n----------------------------------------\n\nTITLE: SQL INSERT Syntax\nDESCRIPTION: The formal syntax for the INSERT statement in SQL, showing how to insert data into a table using query results.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/insert.rst#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO table_name [ ( column [, ... ] ) ] query\n```\n\n----------------------------------------\n\nTITLE: COMMIT Command Syntax in Presto SQL\nDESCRIPTION: Shows the syntax for the COMMIT command in Presto SQL. The command can be used with optional WORK keyword to commit the current transaction.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/commit.rst#2025-04-10_snippet_0\n\nLANGUAGE: none\nCODE:\n```\nCOMMIT [ WORK ]\n```\n\n----------------------------------------\n\nTITLE: Checking Geometry Validity in Presto SQL\nDESCRIPTION: Returns the reason why a geometry is not valid or not simple.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/geospatial.rst.txt#2025-04-10_snippet_25\n\nLANGUAGE: SQL\nCODE:\n```\ngeometry_invalid_reason(Geometry) -> varchar\n```\n\n----------------------------------------\n\nTITLE: Defining DROP SCHEMA Syntax in SQL\nDESCRIPTION: This snippet shows the syntax for the DROP SCHEMA command in SQL. It allows for an optional IF EXISTS clause to suppress errors if the schema doesn't exist.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/sql/drop-schema.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nDROP SCHEMA [ IF EXISTS ] schema_name\n```\n\n----------------------------------------\n\nTITLE: Documenting Presto Release 0.91 in reStructuredText\nDESCRIPTION: This snippet provides release notes for Presto 0.91, including a warning about a memory leak and a description of a change to clear LazyBlockLoader references for improved memory management.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.91.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n============\nRelease 0.91\n============\n\n.. warning:: This release has a memory leak and should not be used.\n\nGeneral Changes\n---------------\n\n* Clear ``LazyBlockLoader`` reference after load to free memory earlier.\n```\n\n----------------------------------------\n\nTITLE: Getting IP Address Range for Subnet in Presto SQL\nDESCRIPTION: Shows how to use ip_subnet_range() function to get an array containing the smallest and largest IP addresses in a given subnet.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/ip.rst#2025-04-10_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSELECT ip_subnet_range(IPPREFIX '1.2.3.160/24'); -- [{1.2.3.0}, {1.2.3.255}]\nSELECT ip_subnet_range(IPPREFIX '64:ff9b::52f4/120'); -- [{64:ff9b::5200}, {64:ff9b::52ff}]\n```\n\n----------------------------------------\n\nTITLE: Configuring Minimal Hadoop Catalog in Presto\nDESCRIPTION: This code snippet shows the minimal configuration needed to set up a Hadoop catalog in Presto. It specifies the connector name, catalog type, and the Hadoop warehouse root path.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/iceberg.rst.txt#2025-04-10_snippet_6\n\nLANGUAGE: none\nCODE:\n```\nconnector.name=iceberg\niceberg.catalog.type=hadoop\niceberg.catalog.warehouse=hdfs://hostname:port\n```\n\n----------------------------------------\n\nTITLE: Adding array_min_by and array_max_by Functions in SQL\nDESCRIPTION: Introduces new SQL functions array_min_by and array_max_by to find the smallest or largest element of an array using a custom measuring function.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.279.rst#2025-04-10_snippet_6\n\nLANGUAGE: SQL\nCODE:\n```\narray_min_by(array, lambda_measure_function)\narray_max_by(array, lambda_measure_function)\n```\n\n----------------------------------------\n\nTITLE: Intersection Cardinality Example\nDESCRIPTION: Example of estimating the cardinality of intersection between two set digests.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/setdigest.rst#2025-04-10_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nSELECT intersection_cardinality(make_set_digest(v1), make_set_digest(v2))\nFROM (VALUES (1, 1), (NULL, 2), (2, 3), (3, 4)) T(v1, v2);\n```\n\n----------------------------------------\n\nTITLE: Using ST_InteriorRingN in Presto\nDESCRIPTION: Returns the interior ring element at the specified index (indices start at 1). Returns NULL if the index is out of bounds and throws an error if the input geometry is not a polygon.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/geospatial.rst#2025-04-10_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\nST_InteriorRingN(Geometry, index) -> Geometry\n```\n\n----------------------------------------\n\nTITLE: Using to_milliseconds() Function for Interval Conversion\nDESCRIPTION: The to_milliseconds() function converts intervals (day to second) to milliseconds, providing a standardized time unit for calculations.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.182.rst#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nto_milliseconds(interval)\n```\n\n----------------------------------------\n\nTITLE: Casting Array Types in Presto SQL\nDESCRIPTION: Support for casting from ARRAY(F) to ARRAY(T) is added. This allows conversion between array types with different element types.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.102.rst#2025-04-10_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT CAST(array_column AS ARRAY(INTEGER)) FROM table_name;\n```\n\n----------------------------------------\n\nTITLE: VALUES Basic Syntax in PrestoDB\nDESCRIPTION: The basic syntax for the VALUES statement in PrestoDB, showing how to define rows for an inline table. Rows can be single expressions or tuples of column expressions.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/values.rst#2025-04-10_snippet_0\n\nLANGUAGE: none\nCODE:\n```\nVALUES row [, ...]\n```\n\nLANGUAGE: none\nCODE:\n```\n( column_expression [, ...] )\n```\n\n----------------------------------------\n\nTITLE: Comparing CHAR Values with Different Lengths in SQL\nDESCRIPTION: Example of comparing CHAR values with different lengths in SQL. This query demonstrates how Presto handles padding and comparison of CHAR values.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/language/types.rst.txt#2025-04-10_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT cast('example' AS char(20)) = cast('example    ' AS char(25));\n```\n\n----------------------------------------\n\nTITLE: Example of TRUNCATE TABLE Command in Presto SQL\nDESCRIPTION: Demonstrates how to use the TRUNCATE TABLE command to delete all rows from a table named 'orders' in Presto SQL.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/sql/truncate.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nTRUNCATE TABLE orders;\n```\n\n----------------------------------------\n\nTITLE: Renaming View in Memory Connector (SQL)\nDESCRIPTION: SQL command to rename an existing view in the Memory connector.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/memory.rst#2025-04-10_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nALTER VIEW memory.default.nation RENAME TO memory.default.new_nation;\n```\n\n----------------------------------------\n\nTITLE: Configuring MongoDB Catalog with SSL (Properties)\nDESCRIPTION: Example configuration for a MongoDB catalog in Presto, including SSL settings. This shows how to set up the catalog properties file with SSL enabled and other necessary settings.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/mongodb.rst#2025-04-10_snippet_3\n\nLANGUAGE: properties\nCODE:\n```\nconnector.name=mongodb\nmongodb.seeds=<host-found-with-dig-above>:27017\nmongodb.credentials=<user>:<password>@<mongodb-auth-source>\nmongodb.ssl.enabled=true\nmongodb.required-replica-set=<mongodb-replica-set>\n```\n\n----------------------------------------\n\nTITLE: Inserting a Single Row with VALUES\nDESCRIPTION: Example demonstrating how to insert a single row with explicit values into the cities table.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/insert.rst#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO cities VALUES (1, 'San Francisco');\n```\n\n----------------------------------------\n\nTITLE: Revoking All Privileges in SQL\nDESCRIPTION: This example illustrates how to revoke all privileges on the 'test' table from the user 'alice'.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/sql/revoke.rst.txt#2025-04-10_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nREVOKE ALL PRIVILEGES ON test FROM alice;\n```\n\n----------------------------------------\n\nTITLE: Displaying Iceberg Table Creation SQL with SHOW CREATE TABLE\nDESCRIPTION: Examples of using SHOW CREATE TABLE to display the SQL statement that would create a specified Iceberg table, showing table properties and structure.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/iceberg.rst.txt#2025-04-10_snippet_54\n\nLANGUAGE: sql\nCODE:\n```\nSHOW CREATE TABLE customer;\n```\n\n----------------------------------------\n\nTITLE: SHOW TABLES Syntax in PrestoDB SQL\nDESCRIPTION: Shows the syntax for listing tables in PrestoDB. The command can optionally filter by schema and includes pattern matching with LIKE clause and escape character specification.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/sql/show-tables.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSHOW TABLES [ FROM schema ] [ LIKE pattern [ ESCAPE 'escape_character' ] ]\n```\n\n----------------------------------------\n\nTITLE: Configuring Kerberos Authentication with HDFS Impersonation in Presto\nDESCRIPTION: This snippet shows how to configure Kerberos authentication with HDFS impersonation enabled. It specifies the authentication type, impersonation flag, principal, and keytab file for Presto to use when accessing HDFS.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/hive-security.rst#2025-04-10_snippet_5\n\nLANGUAGE: none\nCODE:\n```\nhive.hdfs.authentication.type=KERBEROS\nhive.hdfs.impersonation.enabled=true\nhive.hdfs.presto.principal=presto@EXAMPLE.COM\nhive.hdfs.presto.keytab=/etc/presto/hdfs.keytab\n```\n\n----------------------------------------\n\nTITLE: Preparing and Describing a Query with Expression Outputs in Presto SQL\nDESCRIPTION: Shows how to prepare a SELECT statement with expressions as output columns and use DESCRIBE OUTPUT to display their details, including the use of aliases and computed columns.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/describe-output.rst#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nPREPARE my_select2 FROM\nSELECT count(*) as my_count, 1+2 FROM nation\n```\n\nLANGUAGE: sql\nCODE:\n```\nDESCRIBE OUTPUT my_select2;\n```\n\n----------------------------------------\n\nTITLE: ORDER BY with OFFSET Example in Presto SQL\nDESCRIPTION: Shows how to use ORDER BY with OFFSET to skip a number of rows in sorted results.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/select.rst#2025-04-10_snippet_20\n\nLANGUAGE: sql\nCODE:\n```\nSELECT name FROM nation ORDER BY name OFFSET 22;\n```\n\n----------------------------------------\n\nTITLE: Zipping Maps with Custom Function in SQL\nDESCRIPTION: The map_zip_with function merges two maps by applying a custom function to pairs of values with matching keys. For keys present in only one map, NULL is passed as the value for the missing key.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/map.rst#2025-04-10_snippet_17\n\nLANGUAGE: sql\nCODE:\n```\nSELECT map_zip_with(MAP(ARRAY[1, 2, 3], ARRAY['a', 'b', 'c']), -- {1 -> ad, 2 -> be, 3 -> cf}\n                        MAP(ARRAY[1, 2, 3], ARRAY['d', 'e', 'f']),\n                        (k, v1, v2) -> concat(v1, v2));\nSELECT map_zip_with(MAP(ARRAY['k1', 'k2'], ARRAY[1, 2]), -- {k1 -> ROW(1, null), k2 -> ROW(2, 4), k3 -> ROW(null, 9)}\n                        MAP(ARRAY['k2', 'k3'], ARRAY[4, 9]),\n                        (k, v1, v2) -> (v1, v2));\nSELECT map_zip_with(MAP(ARRAY['a', 'b', 'c'], ARRAY[1, 8, 27]), -- {a -> a1, b -> b4, c -> c9}\n                        MAP(ARRAY['a', 'b', 'c'], ARRAY[1, 2, 3]),\n                        (k, v1, v2) -> k || CAST(v1/v2 AS VARCHAR));\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Resource Group Manager using SQL\nDESCRIPTION: SQL commands to set up a database-backed resource group manager in PrestoDB, including global properties and the creation of a hierarchical resource group structure with parent-child relationships.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/admin/resource-groups.rst.txt#2025-04-10_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\n-- global properties\nINSERT INTO resource_groups_global_properties (name, value) VALUES ('cpu_quota_period', '1h');\n\n-- Every row in resource_groups table indicates a resource group.\n-- The enviroment name is 'test_environment', make sure it matches `node.environment` in your cluster.\n-- The parent-child relationship is indicated by the ID in 'parent' column.\n\n-- create a root group 'global' with NULL parent\nINSERT INTO resource_groups (name, soft_memory_limit, hard_concurrency_limit, max_queued, scheduling_policy, jmx_export, environment) VALUES ('global', '80%', 100, 1000, 'weighted', true, 'test_environment');\n\n-- get ID of 'global' group\nSELECT resource_group_id FROM resource_groups WHERE name = 'global';  -- 1\n-- create two new groups with 'global' as parent\nINSERT INTO resource_groups (name, soft_memory_limit, hard_concurrency_limit, max_queued, scheduling_weight, environment, parent) VALUES ('data_definition', '10%', 5, 100, 1, 'test_environment', 1);\nINSERT INTO resource_groups (name, soft_memory_limit, hard_concurrency_limit, max_queued, scheduling_weight, environment, parent) VALUES ('adhoc', '10%', 50, 1, 10, 'test_environment', 1);\n\n-- get ID of 'adhoc' group\nSELECT resource_group_id FROM resource_groups WHERE name = 'adhoc';   -- 3\n-- create 'other' group with 'adhoc' as parent\n```\n\n----------------------------------------\n\nTITLE: Syntax for SHOW GRANTS Command in Presto\nDESCRIPTION: Defines the syntax for showing grants in Presto SQL. The command allows viewing permissions either for a specific table or for all tables across all schemas in the current catalog.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/sql/show-grants.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: none\nCODE:\n```\nSHOW GRANTS [ ON [ TABLE ] table_name ]\n```\n\n----------------------------------------\n\nTITLE: Inserting Data into Presto Accumulo Table\nDESCRIPTION: This SQL snippet shows how to insert data into the previously created 'scientists' table. It inserts two rows with sample data for scientists Grace Hopper and Alan Turing.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/accumulo.rst.txt#2025-04-10_snippet_24\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO myschema.scientists VALUES\n('row1', 'Grace Hopper', 109, DATE '1906-12-09' ),\n('row2', 'Alan Turing', 103, DATE '1912-06-23' );\n```\n\n----------------------------------------\n\nTITLE: Enabling Segmented Aggregation in Presto SQL\nDESCRIPTION: Demonstrates how to enable segmented aggregation to reduce memory footprint and improve performance when data is ordered by a subset of group-by keys. This can be done using a session property or configuration property.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.274.rst#2025-04-10_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSET SESSION segmented_aggregation_enabled = true;\n```\n\nLANGUAGE: Properties\nCODE:\n```\noptimizer.segmented-aggregation-enabled=true\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Glue Catalog Properties in Presto\nDESCRIPTION: Properties for connecting Presto to AWS Glue Data Catalog as a Hive metastore. These settings control region configuration, authentication, connection pooling, and query parallelism.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/hive.rst#2025-04-10_snippet_4\n\nLANGUAGE: properties\nCODE:\n```\nhive.metastore.glue.region=us-east-1\nhive.metastore.glue.pin-client-to-current-region=false\nhive.metastore.glue.max-connections=5\nhive.metastore.glue.max-error-retries=10\nhive.metastore.glue.default-warehouse-dir=\nhive.metastore.glue.aws-access-key=\nhive.metastore.glue.aws-secret-key=\nhive.metastore.glue.catalogid=\nhive.metastore.glue.endpoint-url=https://glue.us-east-1.amazonaws.com\nhive.metastore.glue.partitions-segments=\nhive.metastore.glue.get-partition-threads=\nhive.metastore.glue.iam-role=\n```\n\n----------------------------------------\n\nTITLE: Generating a Random UUID in Presto\nDESCRIPTION: The uuid() function returns a pseudo randomly generated UUID (type 4). This function takes no parameters and returns a value of the UUID type.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/uuid.rst#2025-04-10_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. function:: uuid() -> uuid\n\n    Returns a pseudo randomly generated :ref:`uuid_type` (type 4).\n```\n\n----------------------------------------\n\nTITLE: Using bitwise_left_shift Generic Function in Presto SQL\nDESCRIPTION: The bitwise_left_shift generic function performs a left shift on integral value types. It returns a value of the same type as the input, and only uses the lower bits of the shift parameter.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/bitwise.rst#2025-04-10_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nSELECT bitwise_left_shift(TINYINT '7', 2); -- 28\nSELECT bitwise_left_shift(TINYINT '-7', 2); -- -28\n```\n\n----------------------------------------\n\nTITLE: Using ORDER BY in array_agg() Aggregate Function in Presto SQL\nDESCRIPTION: Demonstrates how to use the ORDER BY clause within the array_agg() aggregate function to control the ordering of elements in the resulting array.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/aggregate.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\narray_agg(x ORDER BY y DESC)\narray_agg(x ORDER BY x, y, z)\n```\n\n----------------------------------------\n\nTITLE: Creating Map Subset Using Array of Keys in SQL\nDESCRIPTION: The map_subset function creates a new map by selecting entries from the input map whose keys are present in the specified array. Only matching keys are included in the result.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/map.rst#2025-04-10_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\nSELECT map_subset(MAP(ARRAY[1,2], ARRAY['a','b']), ARRAY[10]); -- {}\nSELECT map_subset(MAP(ARRAY[1,2], ARRAY['a','b']), ARRAY[1]); -- {1->'a'}\nSELECT map_subset(MAP(ARRAY[1,2], ARRAY['a','b']), ARRAY[1,3]); -- {1->'a'}\nSELECT map_subset(MAP(ARRAY[1,2], ARRAY['a','b']), ARRAY[]); -- {}\nSELECT map_subset(MAP(ARRAY[], ARRAY[]), ARRAY[1,2]); -- {}\n```\n\n----------------------------------------\n\nTITLE: Creating Tables from SELECT\nDESCRIPTION: Example of creating a new table by selecting data from an existing table.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/postgresql.rst.txt#2025-04-10_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE postgresql.public.new_table AS SELECT * FROM postgresql.public.renamed_table;\n```\n\n----------------------------------------\n\nTITLE: CREATE TABLE Example with Constraints and Comments in Presto SQL\nDESCRIPTION: An example showing how to create a table with IF NOT EXISTS clause, table comment, column comment, NOT NULL constraint, and a PRIMARY KEY constraint.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/create-table.rst#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE IF NOT EXISTS orders (\n  orderkey bigint,\n  orderstatus varchar NOT NULL,\n  totalprice double COMMENT 'Price in cents.',\n  orderdate date,\n  PRIMARY KEY (orderkey)\n)\nCOMMENT 'A table to keep track of orders.'\n```\n\n----------------------------------------\n\nTITLE: Syntax for TRUNCATE TABLE Command in Presto SQL\nDESCRIPTION: Defines the syntax for the TRUNCATE TABLE command in Presto SQL. This command is used to delete all rows from a specified table.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/sql/truncate.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nTRUNCATE TABLE table_name\n```\n\n----------------------------------------\n\nTITLE: Deleting Data from Iceberg Tables using Presto SQL\nDESCRIPTION: Shows how to delete data from Iceberg tables, either deleting all data or applying a filter condition. This operation deletes one or more partitions.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.285.rst#2025-04-10_snippet_6\n\nLANGUAGE: SQL\nCODE:\n```\nDELETE FROM <table> [WHERE <filter>];\n```\n\n----------------------------------------\n\nTITLE: Updating Overdue Purchases in Presto SQL\nDESCRIPTION: Demonstrates how to update the status of all purchases that haven't been assigned a ship date to 'OVERDUE'. This example uses the UPDATE statement with a WHERE clause to target specific rows.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/update.rst#2025-04-10_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nUPDATE purchases SET status = 'OVERDUE' WHERE ship_date IS NULL;\n```\n\n----------------------------------------\n\nTITLE: Wilson Interval Functions\nDESCRIPTION: Calculates Wilson score interval bounds for Bernoulli trial process. Returns lower and upper bounds based on successes, trials, and z-score confidence level.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/math.rst.txt#2025-04-10_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nwilson_interval_lower(successes, trials, z) -> double\n```\n\nLANGUAGE: sql\nCODE:\n```\nwilson_interval_upper(successes, trials, z) -> double\n```\n\n----------------------------------------\n\nTITLE: Chaining AT TIME ZONE in SQL\nDESCRIPTION: Example of chaining multiple AT TIME ZONE clauses in a SELECT statement, which was previously causing failures but is now fixed.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.148.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT TIMESTAMP '2016-01-02 12:34:56' AT TIME ZONE 'America/Los_Angeles' AT TIME ZONE 'UTC'\n```\n\n----------------------------------------\n\nTITLE: Examples of USE Statement in Presto SQL\nDESCRIPTION: Demonstrates two examples of using the USE statement in Presto SQL. The first example shows how to switch to the 'finance' schema in the 'hive' catalog, and the second shows how to switch to the 'information_schema' schema in the current catalog.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/sql/use.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nUSE hive.finance;\nUSE information_schema;\n```\n\n----------------------------------------\n\nTITLE: Chaining Relations in WITH Clause in Presto SQL\nDESCRIPTION: Illustrates how relations within a WITH clause can be chained, with each subsequent relation referencing the previous ones.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/select.rst#2025-04-10_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nWITH\n  x AS (SELECT a FROM t),\n  y AS (SELECT a AS b FROM x),\n  z AS (SELECT b AS c FROM y)\nSELECT c FROM z;\n```\n\n----------------------------------------\n\nTITLE: Checking Key Existence in Map using Presto SQL\nDESCRIPTION: Demonstrates how to check if a key exists in a map using the map_key_exists function.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/map.rst.txt#2025-04-10_snippet_8\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT map_key_exists(MAP(ARRAY['x','y'], ARRAY[100,200]), 'x'); -- TRUE\n```\n\n----------------------------------------\n\nTITLE: AWS Glue Catalog Configuration Properties\nDESCRIPTION: Settings for configuring AWS Glue Catalog integration with Presto, including region settings, authentication, and performance tuning parameters.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/hive.rst.txt#2025-04-10_snippet_4\n\nLANGUAGE: properties\nCODE:\n```\nhive.metastore.glue.region=us-east-1\nhive.metastore.glue.pin-client-to-current-region=false\nhive.metastore.glue.max-connections=5\nhive.metastore.glue.max-error-retries=10\nhive.metastore.glue.default-warehouse-dir\nhive.metastore.glue.aws-access-key\nhive.metastore.glue.aws-secret-key\nhive.metastore.glue.catalogid\nhive.metastore.glue.endpoint-url=https://glue.us-east-1.amazonaws.com\nhive.metastore.glue.partitions-segments\nhive.metastore.glue.get-partition-threads\nhive.metastore.glue.iam-role\n```\n\n----------------------------------------\n\nTITLE: Listing Tables in SingleStore Database via Presto\nDESCRIPTION: This SQL query shows how to list tables in a specific SingleStore database (web) using the SHOW TABLES command in Presto.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/singlestore.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSHOW TABLES FROM singlestore.web;\n```\n\n----------------------------------------\n\nTITLE: Array Chunking in Presto SQL\nDESCRIPTION: Examples of using array_split_into_chunks() to split arrays into smaller chunks of specified size. Shows handling of null values and incomplete chunks.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/array.rst#2025-04-10_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nSELECT array_split_into_chunks(ARRAY [1, 2, 3, 4], 3);\nSELECT array_split_into_chunks(null, null);\nSELECT array_split_into_chunks(array[1, 2, 3, cast(null as int)], 2])\n```\n\n----------------------------------------\n\nTITLE: Adding a Column to an Existing Kudu Table in Presto\nDESCRIPTION: SQL example showing how to use the ALTER TABLE statement to add a new column to an existing Kudu table, including column properties like nullable and encoding settings.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/kudu.rst.txt#2025-04-10_snippet_12\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE mytable ADD COLUMN extraInfo varchar WITH (nullable = true, encoding = 'plain')\n```\n\n----------------------------------------\n\nTITLE: Deleting Rows with Subquery in Presto (Low Priority Orders)\nDESCRIPTION: Example of using a subquery in the WHERE clause to delete rows from a table. This query deletes all line items that belong to orders with low priority.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/sql/delete.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nDELETE FROM lineitem\nWHERE orderkey IN (SELECT orderkey FROM orders WHERE priority = 'LOW');\n```\n\n----------------------------------------\n\nTITLE: Analyze Complex Partition Keys Example\nDESCRIPTION: Example showing how to analyze partitions with multiple partition keys (state and city) in a Hive table.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/analyze.rst#2025-04-10_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nANALYZE hive.default.customers WITH (partitions = ARRAY[ARRAY['CA', 'San Francisco'], ARRAY['NY', 'NY']]);\n```\n\n----------------------------------------\n\nTITLE: Querying Historical JMX Data in Presto\nDESCRIPTION: SQL query example showing how to retrieve historical JMX data with timestamp information from the history schema of the JMX connector.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/jmx.rst#2025-04-10_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nSELECT \"timestamp\", \"uptime\" FROM jmx.history.\"java.lang:type=runtime\";\n```\n\n----------------------------------------\n\nTITLE: Using ST_IsValid in Presto\nDESCRIPTION: Returns true if and only if the input geometry is well formed. Use geometry_invalid_reason to determine why the geometry is not well formed.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/geospatial.rst#2025-04-10_snippet_16\n\nLANGUAGE: sql\nCODE:\n```\nST_IsValid(Geometry) -> boolean\n```\n\n----------------------------------------\n\nTITLE: Configuring Merge Duplicate Aggregations in Presto SQL\nDESCRIPTION: Sets the session property to control the optimization rule for merging duplicate aggregations in the aggregation node. The default value is true.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.281.rst#2025-04-10_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nSET SESSION merge_duplicate_aggregations = true;\n```\n\n----------------------------------------\n\nTITLE: Checking IP Address Subnet Membership in Presto SQL\nDESCRIPTION: Demonstrates the use of is_subnet_of() function to check if an IP address belongs to a specific subnet.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/ip.rst#2025-04-10_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nSELECT is_subnet_of(IPPREFIX '1.2.3.128/26', IPADDRESS '1.2.3.129'); -- true\nSELECT is_subnet_of(IPPREFIX '64:fa9b::17/64', IPADDRESS '64:ffff::17'); -- false\n```\n\n----------------------------------------\n\nTITLE: Configuring Query Override Settings for Presto Verifier\nDESCRIPTION: This snippet lists configuration options for overriding query metadata before verification. It includes settings for catalog, schema, username, password, and session properties overrides.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/admin/verifier.rst#2025-04-10_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\n\"control.catalog-override\"                     The catalog to be applied to all queries if specified.\n\"control.schema-override\"                      The schema to be applied to all queries if specified.\n\"control.username-override\"                    The username to be applied to all queries if specified.\n\"control.password-override\"                    The password to be applied to all queries if specified.\n\"control.session-properties-override-strategy\" Supports 3 values. ``NO_ACTION``: Use the session properties as specified for\n                                                each query. ``OVERRIDE``: Merge the session properties of each query with the\n                                                override, with override being the dominant. ``SUBSTITUTE``, The session\n                                                properties of each query is replaced with the override.\n\"control.session-properties-override\"          The session property to be applied to all queries.\n```\n\n----------------------------------------\n\nTITLE: Using to_big_endian_32 and from_big_endian_32 Functions in Presto SQL\nDESCRIPTION: New functions to convert between big-endian 32-bit integer representations and native formats.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.204.rst#2025-04-10_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT to_big_endian_32(integer_value) FROM table;\nSELECT from_big_endian_32(big_endian_value) FROM table;\n```\n\n----------------------------------------\n\nTITLE: Converting Bing Tiles to BigInt in Presto SQL\nDESCRIPTION: Demonstrates the casting operation between Bing Tiles and BigInt data types. This conversion encodes the zoom, x, and y coordinates efficiently in the BigInt representation.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/geospatial.rst#2025-04-10_snippet_44\n\nLANGUAGE: sql\nCODE:\n```\ncast(cast(tile AS BIGINT) AS BINGTILE)\n```\n\n----------------------------------------\n\nTITLE: Deleting All Rows from a Table in Presto\nDESCRIPTION: Example of deleting all rows from a table without specifying a WHERE clause. This query removes all records from the orders table.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/sql/delete.rst.txt#2025-04-10_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nDELETE FROM orders;\n```\n\n----------------------------------------\n\nTITLE: Adding a Range Partition to an Existing Kudu Table in Presto\nDESCRIPTION: SQL example demonstrating how to use the kudu.system.add_range_partition procedure to add a new range partition to an existing Kudu table. The example adds a partition for the first half of 2018.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/kudu.rst.txt#2025-04-10_snippet_11\n\nLANGUAGE: sql\nCODE:\n```\nCALL kudu.system.add_range_partition('myschema', 'events', '{\"lower\": \"2018-01-01\", \"upper\": \"2018-06-01\"}')\n```\n\n----------------------------------------\n\nTITLE: Dropping an Iceberg Schema in Presto\nDESCRIPTION: Removes the entire 'iceberg.web' schema from the catalog, which deletes all the table and view definitions within that schema.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/iceberg.rst#2025-04-10_snippet_55\n\nLANGUAGE: sql\nCODE:\n```\nDROP SCHEMA iceberg.web\n```\n\n----------------------------------------\n\nTITLE: Parsing ISO 8601 Formatted String to Timestamp in Presto SQL\nDESCRIPTION: This function parses an ISO 8601 formatted string into a timestamp with time zone. It's part of a series of date and time functions provided by Presto.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/datetime.rst#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nfrom_iso8601_timestamp(string) -> timestamp with time zone\n```\n\n----------------------------------------\n\nTITLE: Basic BETWEEN Operator Usage in SQL\nDESCRIPTION: Demonstrates how to use the BETWEEN operator to test if a value falls within a specified range.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/comparison.rst#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 3 BETWEEN 2 AND 6;\n```\n\n----------------------------------------\n\nTITLE: Configuring S3 Glacier File Skipping in Hive Connector\nDESCRIPTION: Configuration property to enable skipping of Glacier files in Amazon S3 when using the Hive connector.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.218.rst#2025-04-10_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\nhive.s3.skip-glacier-objects\n```\n\n----------------------------------------\n\nTITLE: Configuring Hudi Connector Properties\nDESCRIPTION: Essential configuration properties that must be set in the hudi.properties file within the Presto catalog directory to enable Hudi connector functionality.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/hudi.rst#2025-04-10_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nconnector.name=hudi\nhive.metastore.uri=thrift://hms.host:9083\n```\n\n----------------------------------------\n\nTITLE: Dropping an Iceberg Table in Presto\nDESCRIPTION: Removes the 'page_views' table from the Iceberg catalog. The behavior varies by catalog type - Hive and Glue only remove metadata while Hadoop and Nessie remove both data and metadata.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/iceberg.rst#2025-04-10_snippet_53\n\nLANGUAGE: sql\nCODE:\n```\nDROP TABLE iceberg.web.page_views\n```\n\n----------------------------------------\n\nTITLE: Dropping a Schema with IF EXISTS Clause in SQL\nDESCRIPTION: This example shows how to drop the 'sales' schema if it exists, using the IF EXISTS clause to suppress errors if the schema is not present.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/sql/drop-schema.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nDROP SCHEMA IF EXISTS sales\n```\n\n----------------------------------------\n\nTITLE: EXPLAIN ANALYZE Command Syntax in Presto SQL\nDESCRIPTION: The syntax for the EXPLAIN ANALYZE command in Presto SQL. It allows for optional VERBOSE and format specifications.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/explain-analyze.rst#2025-04-10_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nEXPLAIN ANALYZE [VERBOSE] [(format <TEXT|JSON>)] statement\n```\n\n----------------------------------------\n\nTITLE: Quoting Identifiers and Strings in Presto SQL\nDESCRIPTION: Demonstrates the correct use of single quotes for strings and double quotes for identifiers in Presto's ANSI SQL syntax.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/migration/from-hive.rst.txt#2025-04-10_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT name AS \"User Name\"\nFROM \"7day_active\"\nWHERE name = 'foo'\n```\n\n----------------------------------------\n\nTITLE: Aggregating Weighted Values into Quantile Digest in Presto SQL\nDESCRIPTION: This function returns a qdigest composed of all input values of x using the per-item weight w. It allows creating a weighted qdigest.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/qdigest.rst.txt#2025-04-10_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nqdigest_agg(x, w) -> qdigest<[same as x]>\n```\n\n----------------------------------------\n\nTITLE: New Map Concatenation Function in Presto 0.130\nDESCRIPTION: The map_concat function added in Presto 0.130 that allows for concatenating multiple maps together.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.130.rst#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nmap_concat\n```\n\n----------------------------------------\n\nTITLE: Calculating Jaccard Similarity with MinHash in SQL\nDESCRIPTION: This example shows how to use MinHash to estimate the Jaccard similarity between two sets in Presto. It uses minhash_agg to create MinHash sketches and jaccard_index to compare them.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/setdigest.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nWITH mh1 AS (SELECT minhash_agg(to_utf8(value)) AS minhash FROM table1), mh2 AS (SELECT minhash_agg(to_utf8(value)) AS minhash FROM table2), SELECT jaccard_index(mh1.minhash, mh2.minhash) AS similarity FROM mh1, mh2;\n```\n\n----------------------------------------\n\nTITLE: Using transform_values Function in Presto SQL\nDESCRIPTION: The transform_values function applies a transformation to the values of a map. It takes a map and a lambda function as arguments, and returns a new map with transformed values.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/map.rst.txt#2025-04-10_snippet_14\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT transform_values(MAP(ARRAY[], ARRAY[]), (k, v) -> v + 1); -- {}\n```\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT transform_values(MAP(ARRAY [1, 2, 3], ARRAY [10, 20, 30]), (k, v) -> v + k); -- {1 -> 11, 2 -> 22, 3 -> 33}\n```\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT transform_values(MAP(ARRAY [1, 2, 3], ARRAY ['a', 'b', 'c']), (k, v) -> k * k); -- {1 -> 1, 2 -> 4, 3 -> 9}\n```\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT transform_values(MAP(ARRAY ['a', 'b'], ARRAY [1, 2]), (k, v) -> k || CAST(v as VARCHAR)); -- {a -> a1, b -> b2}\n```\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT transform_values(MAP(ARRAY [1, 2], ARRAY [1.0, 1.4]), -- {1 -> one_1.0, 2 -> two_1.4}\n                                (k, v) -> MAP(ARRAY[1, 2], ARRAY['one', 'two'])[k] || '_' || CAST(v AS VARCHAR));\n```\n\n----------------------------------------\n\nTITLE: Querying Classification Metrics with Thresholds in PrestoDB SQL\nDESCRIPTION: Example demonstrating how to retrieve both classification metrics and their corresponding thresholds. This query returns the threshold values alongside recall and precision metrics for detailed analysis of classification performance.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/aggregate.rst#2025-04-10_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nWITH\n    recall_precision AS (\n        SELECT\n            CLASSIFICATION_THRESHOLDS(10000, correct, pred) AS thresholds,\n            CLASSIFICATION_RECALL(10000, correct, pred) AS recalls,\n            CLASSIFICATION_PRECISION(10000, correct, pred) AS precisions\n        FROM\n           classification_dataset\n    )\nSELECT\n    threshold,\n    recall,\n    precision\nFROM\n    recall_precision\nCROSS JOIN UNNEST(thresholds, recalls, precisions) AS t(threshold, recall, precision)\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL Connector Properties\nDESCRIPTION: Basic configuration for connecting PrestoDB to MySQL using a properties file. Defines core connection parameters including URL, username and password.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/mysql.rst#2025-04-10_snippet_0\n\nLANGUAGE: none\nCODE:\n```\nconnector.name=mysql\nconnection-url=jdbc:mysql://example.net:3306\nconnection-user=root\nconnection-password=secret\n```\n\n----------------------------------------\n\nTITLE: Encoding Geometry to Google Polyline in Presto SQL\nDESCRIPTION: New function to convert Presto ST_Geometry types to Google polyline format, allowing compact representation of geometric data.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.291.rst#2025-04-10_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT google_polyline_encode(geometry) AS encoded_path;\n```\n\n----------------------------------------\n\nTITLE: Querying Specific Delta Lake Table Snapshot in Presto SQL\nDESCRIPTION: This SQL query shows how to query a specific snapshot version of a Delta Lake table in Presto. It uses the '@v4' suffix to specify version 4 of the table.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/deltalake.rst#2025-04-10_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM sales.apac.\"sales_data@v4\" LIMIT 200;\n```\n\n----------------------------------------\n\nTITLE: Conditional Aggregation Pattern in Presto\nDESCRIPTION: Pattern for conditional aggregation that previously could fail but has been fixed in this release. This pattern combines aggregation functions with IF conditions to selectively include values in the aggregation.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.261.rst.txt#2025-04-10_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nAGG(IF(condition, expr))\n```\n\n----------------------------------------\n\nTITLE: Using ST_EndPoint in Presto\nDESCRIPTION: Returns the last point of a LineString geometry as a Point. This is a shortcut for ST_PointN(geometry, ST_NumPoints(geometry)), providing easy access to the ending vertex of a linestring.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/geospatial.rst#2025-04-10_snippet_26\n\nLANGUAGE: sql\nCODE:\n```\nST_EndPoint(Geometry) -> point\n```\n\n----------------------------------------\n\nTITLE: Defining Decimal Literals in SQL\nDESCRIPTION: Examples of decimal literal syntax showing how precision and scale are determined based on the number of digits in the literal value.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/decimal.rst#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nDECIMAL '0'\n```\n\nLANGUAGE: sql\nCODE:\n```\nDECIMAL '12345'\n```\n\nLANGUAGE: sql\nCODE:\n```\nDECIMAL '0000012345.1234500000'\n```\n\n----------------------------------------\n\nTITLE: Extracting Substring in Presto SQL (Two-Parameter Version)\nDESCRIPTION: This substring function is an alias for the substr function, which extracts a portion of a string starting from a specified position.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/teradata.rst#2025-04-10_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nsubstring(string, start) -> varchar\n```\n\n----------------------------------------\n\nTITLE: Parsing Negative Interval Literal in SQL\nDESCRIPTION: Example of a negative interval literal that was previously parsed incorrectly. The interpretation has been fixed to apply the negative sign to the entire interval value.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.148.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nINTERVAL '-2-3' YEAR TO MONTH\n```\n\n----------------------------------------\n\nTITLE: Using json_array_length Function in Presto\nDESCRIPTION: Shows how to determine the length of a JSON array using the json_array_length function. Returns a bigint value representing the number of elements in the array.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/json.rst#2025-04-10_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nSELECT json_array_length('[1, 2, 3]');\n```\n\n----------------------------------------\n\nTITLE: Simple CASE Expression in SQL\nDESCRIPTION: Demonstrates the simple form of CASE expression that compares an expression against multiple values and returns corresponding results.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/conditional.rst#2025-04-10_snippet_0\n\nLANGUAGE: none\nCODE:\n```\nCASE expression\n    WHEN value THEN result\n    [ WHEN ... ]\n    [ ELSE result ]\nEND\n```\n\n----------------------------------------\n\nTITLE: New SQL Functions for Cauchy Distribution in Presto 0.258\nDESCRIPTION: New mathematical functions added for Cauchy distribution support: cauchy_cdf (Cumulative Distribution Function) and inverse_cauchy_cdf (Inverse Cumulative Distribution Function).\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.258.rst#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\ncauchy_cdf\n```\n\nLANGUAGE: sql\nCODE:\n```\ninverse_cauchy_cdf\n```\n\n----------------------------------------\n\nTITLE: Deleting Data from Iceberg Tables\nDESCRIPTION: Examples of deleting data from Iceberg tables using DELETE FROM statements with various filtering conditions.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/iceberg.rst.txt#2025-04-10_snippet_50\n\nLANGUAGE: sql\nCODE:\n```\nDELETE FROM lineitem;\n\nDELETE FROM lineitem WHERE linenumber = 1;\n\nDELETE FROM lineitem WHERE linenumber not in (1, 3, 5, 7) and linestatus in ('O', 'F');\n```\n\n----------------------------------------\n\nTITLE: Inserting Data into Black Hole Connector Table in Presto\nDESCRIPTION: This SQL command inserts data into a table in the Black Hole connector by selecting from an existing table in the TPCH schema.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/blackhole.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nINSERT INTO blackhole.test.nation\nSELECT * FROM tpch.tiny.nation;\n```\n\n----------------------------------------\n\nTITLE: Extracting Month in Presto SQL\nDESCRIPTION: The 'month' function returns the month of the year from a given date or timestamp value. The function returns a bigint value.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/datetime.rst.txt#2025-04-10_snippet_9\n\nLANGUAGE: SQL\nCODE:\n```\nmonth(x) -> bigint\n```\n\n----------------------------------------\n\nTITLE: Basic Range Comparison with BETWEEN\nDESCRIPTION: Demonstrates usage of BETWEEN operator to test if a value falls within a specified range. Shows equivalence to AND conditions.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/comparison.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 3 BETWEEN 2 AND 6;\n```\n\n----------------------------------------\n\nTITLE: Adding CRC32 Function in SQL\nDESCRIPTION: Adds the 'crc32' function to Presto SQL. This function calculates the CRC32 checksum of input data.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.179.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\ncrc32()\n```\n\n----------------------------------------\n\nTITLE: Calculating Values at Multiple Quantiles for T-Digest in Presto SQL\nDESCRIPTION: Returns the approximate percentile values as an array given the input T-digest and an array of quantile values between 0 and 1. This function is used to estimate multiple percentiles simultaneously.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/tdigest.rst.txt#2025-04-10_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nvalues_at_quantiles(tdigest<double>, quantiles) -> array<double>\n```\n\n----------------------------------------\n\nTITLE: MongoDB Configuration Property Renaming in Presto\nDESCRIPTION: The MongoDB connector configuration property has been renamed from mongodb.connection-per-host to mongodb.connections-per-host for improved clarity.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.175.rst.txt#2025-04-10_snippet_3\n\nLANGUAGE: Properties\nCODE:\n```\nmongodb.connections-per-host\n```\n\n----------------------------------------\n\nTITLE: Metastore Configuration Properties\nDESCRIPTION: Configuration properties for the Hive metastore, including timeout settings, caching parameters, and refresh intervals.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/hive.rst.txt#2025-04-10_snippet_3\n\nLANGUAGE: properties\nCODE:\n```\nhive.metastore-timeout=10s\nhive.metastore-cache-ttl=0s\nhive.metastore-cache-maximum-size=10000\nhive.metastore-refresh-interval=0s\nhive.metastore-refresh-max-threads=100\nhive.invalidate-metastore-cache-procedure-enabled=false\n```\n\n----------------------------------------\n\nTITLE: Using great_circle_distance in Presto\nDESCRIPTION: Returns the great-circle distance between two points on Earth's surface in kilometers. This function calculates the shortest distance between two points along the surface of a sphere (Earth).\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/geospatial.rst#2025-04-10_snippet_39\n\nLANGUAGE: sql\nCODE:\n```\ngreat_circle_distance(latitude1, longitude1, latitude2, longitude2) -> double\n```\n\n----------------------------------------\n\nTITLE: Verifying Kerberos Keytab File with kinit and klist\nDESCRIPTION: Commands to test a Kerberos keytab file by obtaining a ticket using kinit and viewing ticket information with klist. This helps verify the keytab is properly configured.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/security/server.rst#2025-04-10_snippet_4\n\nLANGUAGE: none\nCODE:\n```\n$ kinit -kt /etc/presto/presto.keytab presto@EXAMPLE.COM\n$ klist\n```\n\n----------------------------------------\n\nTITLE: Basic Cassandra Connector Configuration\nDESCRIPTION: Minimal configuration required to set up a Cassandra connector in Presto. The configuration specifies the connector name and contact points for connecting to Cassandra nodes.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/cassandra.rst#2025-04-10_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nconnector.name=cassandra\ncassandra.contact-points=host1,host2\n```\n\n----------------------------------------\n\nTITLE: Altering MongoDB Table Structure with Presto SQL\nDESCRIPTION: Illustrates various ALTER TABLE commands supported by Presto for MongoDB collections. These examples show how to add columns, drop columns, rename columns, and rename tables.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/mongodb.rst#2025-04-10_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE mongodb.admin.sample_table ADD COLUMN new_col INT;\nALTER TABLE mongodb.admin.sample_table DROP COLUMN new_col;\nALTER TABLE mongodb.admin.sample_table RENAME COLUMN is_active TO is_enabled;\nALTER TABLE mongodb.admin.sample_table RENAME TO renamed_table;\n```\n\n----------------------------------------\n\nTITLE: Using ST_EndPoint in Presto\nDESCRIPTION: Returns the last point of a LineString geometry as a Point. This is a shortcut for ST_PointN(geometry, ST_NumPoints(geometry)), providing easy access to the ending vertex of a linestring.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/geospatial.rst#2025-04-10_snippet_26\n\nLANGUAGE: sql\nCODE:\n```\nST_EndPoint(Geometry) -> point\n```\n\n----------------------------------------\n\nTITLE: UNNEST Array Operation\nDESCRIPTION: Demonstrates expanding array values into rows using UNNEST with a single array column.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/sql/select.rst.txt#2025-04-10_snippet_28\n\nLANGUAGE: sql\nCODE:\n```\nSELECT student, score\nFROM tests\nCROSS JOIN UNNEST(scores) AS t (score);\n```\n\n----------------------------------------\n\nTITLE: Hash Counts Example\nDESCRIPTION: Example of retrieving Murmur3Hash128 hash values and their occurrence counts from a set digest.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/setdigest.rst#2025-04-10_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nSELECT hash_counts(make_set_digest(value))\nFROM (VALUES 1, 1, 1, 2, 2) T(value);\n```\n\n----------------------------------------\n\nTITLE: Counting Geometries in Collection in Presto SQL\nDESCRIPTION: Returns the number of geometries in a geometry collection.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/geospatial.rst.txt#2025-04-10_snippet_17\n\nLANGUAGE: SQL\nCODE:\n```\nST_NumGeometries(Geometry) -> bigint\n```\n\n----------------------------------------\n\nTITLE: Creating Empty Map in SQL\nDESCRIPTION: The map() function returns an empty map. This example demonstrates how to create an empty map with unknown key and value types.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/map.rst#2025-04-10_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nSELECT map(); -- {}\n```\n\n----------------------------------------\n\nTITLE: Describing Statement without Parameters\nDESCRIPTION: Shows how to describe a prepared statement that has no input parameters.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/describe-input.rst#2025-04-10_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nDESCRIBE INPUT my_select2;\n```\n\n----------------------------------------\n\nTITLE: Displaying Table Columns in Presto SQL\nDESCRIPTION: This SQL command is used to list all columns in a specified table along with their data types and other attributes. It provides a way to inspect the structure of a table in Presto.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/show-columns.rst#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSHOW COLUMNS FROM table\n```\n\n----------------------------------------\n\nTITLE: UNION ALL Equivalent of GROUPING SETS\nDESCRIPTION: Query showing how GROUPING SETS can be logically expressed using UNION ALL of multiple GROUP BY operations, though GROUPING SETS reads the data only once.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/sql/select.rst.txt#2025-04-10_snippet_12\n\nLANGUAGE: sql\nCODE:\n```\nSELECT origin_state, NULL, NULL, sum(package_weight)\nFROM shipping GROUP BY origin_state\n\nUNION ALL\n\nSELECT origin_state, origin_zip, NULL, sum(package_weight)\nFROM shipping GROUP BY origin_state, origin_zip\n\nUNION ALL\n\nSELECT NULL, NULL, destination_state, sum(package_weight)\nFROM shipping GROUP BY destination_state;\n```\n\n----------------------------------------\n\nTITLE: Displaying Table Columns in Presto SQL\nDESCRIPTION: This SQL command is used to list all columns in a specified table along with their data types and other attributes. It provides a way to inspect the structure of a table in Presto.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/show-columns.rst#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSHOW COLUMNS FROM table\n```\n\n----------------------------------------\n\nTITLE: Array Element Finding in Presto SQL\nDESCRIPTION: Examples of using find_first() and find_first_index() to locate elements meeting specified conditions. Demonstrates forward and backward searching with index parameter.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/array.rst#2025-04-10_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\nSELECT find_first(ARRAY[3, 4, 5, 6], 2, x -> x > 0);\nSELECT find_first(ARRAY[3, 4, 5, 6], -2, x -> x > 0);\nSELECT find_first(ARRAY[3, 4, 5, 6], 2, x -> x < 4);\nSELECT find_first(ARRAY[3, 4, 5, 6], -2, x -> x > 5)\n```\n\n----------------------------------------\n\nTITLE: Creating a Kudu Table with Single Hash Partitioning Group\nDESCRIPTION: Example of creating a Kudu table with a single hash partitioning group using partition_by_hash_columns and partition_by_hash_buckets properties.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/kudu.rst#2025-04-10_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE mytable (\n  col1 varchar WITH (primary_key=true),\n  col2 varchar WITH (primary_key=true),\n  ...\n) WITH (\n  partition_by_hash_columns = ARRAY['col1', 'col2'],\n  partition_by_hash_buckets = 4\n)\n```\n\n----------------------------------------\n\nTITLE: Creating External Delta Lake Table in Presto SQL\nDESCRIPTION: This SQL command shows how to create a new external Delta Lake table in Presto. It specifies the table name, schema, and the external location of the Delta Lake table in an S3 bucket.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/deltalake.rst#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE sales.apac.sales_data_new (dummyColumn INT)\nWITH (external_location = 's3://db-sa-datasets/presto/sales_data_new');\n```\n\n----------------------------------------\n\nTITLE: Querying Data Files\nDESCRIPTION: Query to retrieve information about data files in the current snapshot from the hidden $files metadata table.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/iceberg.rst#2025-04-10_snippet_18\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM \"ctas_nation$files\";\n```\n\n----------------------------------------\n\nTITLE: Implementing Key Sampling in Presto SQL\nDESCRIPTION: Definition of the key_sampling_percent() function, which generates a deterministic double value between 0.0 and 1.0 based on the hash of a given string. This is useful for sampling data.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/string.rst.txt#2025-04-10_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nkey_sampling_percent(varchar) -> double\n```\n\n----------------------------------------\n\nTITLE: Inserting Data into PostgreSQL Tables\nDESCRIPTION: Example of inserting data into a PostgreSQL table through PrestoDB.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/postgresql.rst#2025-04-10_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO postgresql.public.renamed_table (id, name) VALUES (1, 'Test');\n```\n\n----------------------------------------\n\nTITLE: Using line_interpolate_point in Presto\nDESCRIPTION: Returns the Point on the LineString at a fractional distance given by the double argument. Throws an exception if the distance is not between 0 and 1. Returns an empty Point if the LineString is empty.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/geospatial.rst#2025-04-10_snippet_37\n\nLANGUAGE: sql\nCODE:\n```\nline_interpolate_point(LineString, double) -> Geometry\n```\n\n----------------------------------------\n\nTITLE: Using New Bitwise Aggregation Functions in Presto\nDESCRIPTION: New aggregation functions added in Presto 0.157 for performing bitwise operations across groups of values.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.157.rst#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nbitwise_and_agg\n```\n\nLANGUAGE: sql\nCODE:\n```\nbitwise_or_agg\n```\n\n----------------------------------------\n\nTITLE: Using SHA Cryptographic Functions in Presto SQL\nDESCRIPTION: New cryptographic hash functions added in release 0.115 for computing SHA-1, SHA-256, and SHA-512 hashes of input values.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.115.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nsha1()\n```\n\nLANGUAGE: sql\nCODE:\n```\nsha256()\n```\n\nLANGUAGE: sql\nCODE:\n```\nsha512()\n```\n\n----------------------------------------\n\nTITLE: Querying Tweet Count in Presto\nDESCRIPTION: This SQL query demonstrates how to count the number of tweets in the tweets table using Presto. It shows the dynamic nature of the data as the count increases over time.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/kafka-tutorial.rst.txt#2025-04-10_snippet_12\n\nLANGUAGE: sql\nCODE:\n```\nSELECT count(*) FROM tweets;\n```\n\n----------------------------------------\n\nTITLE: Parsing Data Size in Presto SQL\nDESCRIPTION: Shows the usage of parse_presto_data_size() function to convert string representations of data sizes into their numeric byte equivalents. Supports units from bytes (B) to yottabytes (YB).\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/conversion.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT parse_presto_data_size('1B'); -- 1\nSELECT parse_presto_data_size('1kB'); -- 1024\nSELECT parse_presto_data_size('1MB'); -- 1048576\nSELECT parse_presto_data_size('2.3MB'); -- 2411724\n```\n\n----------------------------------------\n\nTITLE: Creating a Kudu Table with Hash Partitioning in Presto\nDESCRIPTION: SQL example demonstrating how to create a Kudu table with hash partitioning using partition_by_hash_columns and partition_by_hash_buckets properties. The partitioning columns must be part of the primary key.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/kudu.rst.txt#2025-04-10_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE mytable (\n  col1 varchar WITH (primary_key=true),\n  col2 varchar WITH (primary_key=true),\n  ...\n) WITH (\n  partition_by_hash_columns = ARRAY['col1', 'col2'],\n  partition_by_hash_buckets = 4\n)\n```\n\n----------------------------------------\n\nTITLE: HyperLogLog Serialization Example in Presto\nDESCRIPTION: Complete example showing how to create a table for storing visit summaries using HyperLogLog, insert data, and query weekly unique users.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/hyperloglog.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE visit_summaries (\n  visit_date date,\n  hll varbinary\n);\n\nINSERT INTO visit_summaries\nSELECT visit_date, cast(approx_set(user_id) AS varbinary)\nFROM user_visits\nGROUP BY visit_date;\n\nSELECT cardinality(merge(cast(hll AS HyperLogLog))) AS weekly_unique_users\nFROM visit_summaries\nWHERE visit_date >= current_date - interval '7' day;\n```\n\n----------------------------------------\n\nTITLE: Using json_size Function with JSON Paths in Presto SQL\nDESCRIPTION: Examples of using json_size function to return the size of JSON values. For objects or arrays, it returns the number of members, while scalar values return zero.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/json.rst#2025-04-10_snippet_17\n\nLANGUAGE: sql\nCODE:\n```\nSELECT json_size('{\"x\": {\"a\": 1, \"b\": 2}}', '$.x'); -- 2\nSELECT json_size('{\"x\": [1, 2, 3]}', '$.x'); -- 3\nSELECT json_size('{\"x\": {\"a\": 1, \"b\": 2}}', '$.x.a'); -- 0\n```\n\n----------------------------------------\n\nTITLE: Configuring JVM Options for Presto\nDESCRIPTION: The jvm.config file contains Java Virtual Machine command line options for running Presto. This configuration sets memory limits, garbage collection parameters, and error handling behaviors to optimize Presto performance.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/installation/deployment.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: none\nCODE:\n```\n-server\n-Xmx16G\n-XX:+UseG1GC\n-XX:G1HeapRegionSize=32M\n-XX:+UseGCOverheadLimit\n-XX:+ExplicitGCInvokesConcurrent\n-XX:+HeapDumpOnOutOfMemoryError\n-XX:+ExitOnOutOfMemoryError\n```\n\n----------------------------------------\n\nTITLE: Verifying SSL Connection\nDESCRIPTION: Command to verify SSL connection to MongoDB cluster\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/mongodb.rst.txt#2025-04-10_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nopenssl s_client -connect <host-found-with-dig-above>:27017 < /dev/null\n```\n\n----------------------------------------\n\nTITLE: Configuring Amazon S3 Properties for Presto Hive Connector\nDESCRIPTION: Properties to configure how Presto accesses Amazon S3 for reading and writing Hive tables. Includes authentication, endpoint configuration, encryption settings, and performance tuning options.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/hive.rst#2025-04-10_snippet_5\n\nLANGUAGE: properties\nCODE:\n```\nhive.s3.use-instance-credentials=false\nhive.s3.aws-access-key=\nhive.s3.aws-secret-key=\nhive.s3.iam-role=\nhive.s3.endpoint=\nhive.s3.storage-class=STANDARD\nhive.s3.signer-type=\nhive.s3.path-style-access=false\nhive.s3.staging-directory=\nhive.s3.pin-client-to-current-region=false\nhive.s3.ssl.enabled=true\nhive.s3.sse.enabled=false\nhive.s3.sse.type=S3\nhive.s3.sse.kms-key-id=\nhive.s3.kms-key-id=\nhive.s3.encryption-materials-provider=\nhive.s3.upload-acl-type=Private\nhive.s3.skip-glacier-objects=\n```\n\n----------------------------------------\n\nTITLE: Managing Constraints in Presto SQL\nDESCRIPTION: Examples of adding and dropping constraints using the ALTER TABLE command in Presto SQL, including primary key and unique constraints.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/sql/alter-table.rst.txt#2025-04-10_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE users ADD CONSTRAINT pk PRIMARY KEY (user_id);\n```\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE IF EXISTS users ADD UNIQUE (first_name, last_name) DISABLED;\n```\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE users DROP CONSTRAINT pk;\n```\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE IF EXISTS users DROP CONSTRAINT IF EXISTS pk;\n```\n\n----------------------------------------\n\nTITLE: Using json_array_contains Function in Presto\nDESCRIPTION: Shows how to use the json_array_contains function to check if a value exists in a JSON array. Returns a boolean indicating presence of the value.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/json.rst#2025-04-10_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nSELECT json_array_contains('[1, 2, 3]', 2);\n```\n\n----------------------------------------\n\nTITLE: Using ST_Distance with Geometry in Presto\nDESCRIPTION: Returns the 2-dimensional cartesian minimum distance between two geometries in projected units. This function calculates the shortest distance between any two points in the input geometries.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/geospatial.rst#2025-04-10_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nST_Distance(Geometry, Geometry) -> double\n```\n\n----------------------------------------\n\nTITLE: Creating a Kudu Table with Partitioning in Presto SQL\nDESCRIPTION: Example of creating a Kudu table with primary keys, column properties, and hash partitioning. The table uses a compound primary key (user_id and event_name), hash partitioning on user_id with 5 buckets, and sets the replication factor to 3.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/kudu.rst#2025-04-10_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE user_events (\n  user_id int WITH (primary_key = true),\n  event_name varchar WITH (primary_key = true),\n  message varchar,\n  details varchar WITH (nullable = true, encoding = 'plain')\n) WITH (\n  partition_by_hash_columns = ARRAY['user_id'],\n  partition_by_hash_buckets = 5,\n  number_of_replicas = 3\n);\n```\n\n----------------------------------------\n\nTITLE: Various Sheet Querying Methods in Presto\nDESCRIPTION: Examples of different ways to query sheets using title, index, or sheet ID.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/larksheets.rst#2025-04-10_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\n-- by sheet title\nSELECT * FROM my_ss.\"number_text\"\n\n-- by sheet index\nSELECT * FROM my_ss.\"$0\"\n\n-- by sheet id\nSELECT * FROM my_ss.\"@MT1p4I\"\n```\n\n----------------------------------------\n\nTITLE: Querying $snapshots Metadata Table for Changelog Analysis in Iceberg with Presto\nDESCRIPTION: Shows how to query the $snapshots metadata table to choose a starting point for changelog analysis in Iceberg.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/iceberg.rst.txt#2025-04-10_snippet_21\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM \"orders$snapshots\";\n```\n\nLANGUAGE: text\nCODE:\n```\n                committed_at                 |     snapshot_id     |      parent_id      | operation |                                                                                       manifest_list                                                                                        |                                                                                                              summary\nn```\n\n----------------------------------------\n\nTITLE: ROLLUP Grouping Operation in Presto SQL\nDESCRIPTION: Example of ROLLUP operation, which creates a hierarchy of aggregations from the most detailed to the grand total, useful for generating subtotal rows.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/sql/select.rst.txt#2025-04-10_snippet_15\n\nLANGUAGE: sql\nCODE:\n```\nSELECT origin_state, origin_zip, sum(package_weight)\nFROM shipping\nGROUP BY ROLLUP (origin_state, origin_zip);\n```\n\n----------------------------------------\n\nTITLE: Configuring Kafka Connector Properties\nDESCRIPTION: Basic configuration properties for connecting Presto to Kafka. Defines the connector name, table names, and Kafka node endpoints.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/kafka.rst#2025-04-10_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nconnector.name=kafka\nkafka.table-names=table1,table2\nkafka.nodes=host1:port,host2:port\n```\n\n----------------------------------------\n\nTITLE: Scaling T-Digest in Presto SQL\nDESCRIPTION: Returns a T-digest whose distribution has been scaled by the specified scale factor. This function is used to adjust the scale of a T-digest structure.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/tdigest.rst.txt#2025-04-10_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nscale_tdigest(tdigest<double>, scale_factor) -> tdigest<double>\n```\n\n----------------------------------------\n\nTITLE: Using IGNORE NULLS Clause with Window Functions in SQL\nDESCRIPTION: The IGNORE NULLS clause has been added to various window functions. This allows for null values to be ignored in the calculation of window functions.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.231.rst.txt#2025-04-10_snippet_6\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT window_function(column) IGNORE NULLS OVER (PARTITION BY other_column) FROM table;\n```\n\n----------------------------------------\n\nTITLE: Using Uncorrelated EXISTS Clause in Presto SQL\nDESCRIPTION: Example of using an uncorrelated EXISTS clause in a Presto SQL query. Support for this feature was added in this release.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.151.rst#2025-04-10_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT * FROM table WHERE EXISTS (SELECT 1 FROM other_table WHERE condition)\n```\n\n----------------------------------------\n\nTITLE: Using ST_Distance with Geometry in Presto\nDESCRIPTION: Returns the 2-dimensional cartesian minimum distance between two geometries in projected units. This function calculates the shortest distance between any two points in the input geometries.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/geospatial.rst#2025-04-10_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nST_Distance(Geometry, Geometry) -> double\n```\n\n----------------------------------------\n\nTITLE: Enabling Hash-Based Distinct Limit in Presto SQL\nDESCRIPTION: Demonstrates how to enable and configure the new hash-based distinct limit feature for improved performance on DISTINCT LIMIT queries with N <= 10000.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.270.rst#2025-04-10_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSET SESSION hash_based_distinct_limit_enabled = true;\nSET SESSION hash_based_distinct_limit_threshold = 10000;\n```\n\n----------------------------------------\n\nTITLE: Trimming Array Elements in Presto SQL\nDESCRIPTION: The trim_array function removes a specified number of elements from the end of an array. It takes two parameters: the array to trim and the number of elements to remove.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/array.rst.txt#2025-04-10_snippet_18\n\nLANGUAGE: sql\nCODE:\n```\nSELECT trim_array(ARRAY[1, 2, 3, 4], 1);\n-- [1, 2, 3]\n\nSELECT trim_array(ARRAY[1, 2, 3, 4], 2);\n-- [1, 2]\n```\n\n----------------------------------------\n\nTITLE: Querying Available Tables in Local File Connector\nDESCRIPTION: This SQL command demonstrates how to list all available tables in the 'logs' schema of the local file connector using the SHOW TABLES statement.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/localfile.rst#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSHOW TABLES FROM localfile.logs;\n```\n\n----------------------------------------\n\nTITLE: Extracting Timezone Minute in Presto SQL\nDESCRIPTION: The 'timezone_minute' function returns the minute of the time zone offset from a given timestamp value. The function returns a bigint value.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/datetime.rst.txt#2025-04-10_snippet_13\n\nLANGUAGE: SQL\nCODE:\n```\ntimezone_minute(timestamp) -> bigint\n```\n\n----------------------------------------\n\nTITLE: DELETE Statement Syntax in Presto\nDESCRIPTION: The basic syntax for the DELETE statement in Presto. This structure allows deleting rows from a table, optionally filtering which rows to delete using a WHERE clause.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/sql/delete.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: none\nCODE:\n```\nDELETE FROM table_name [ WHERE condition ]\n```\n\n----------------------------------------\n\nTITLE: Demonstrating AND Operator with NULL Values in SQL\nDESCRIPTION: These SQL queries show how the AND operator behaves when one or both operands are NULL. The result can be NULL or FALSE depending on the other operand.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/logical.rst#2025-04-10_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT CAST(null AS boolean) AND true; -- null\n\nSELECT CAST(null AS boolean) AND false; -- false\n\nSELECT CAST(null AS boolean) AND CAST(null AS boolean); -- null\n```\n\n----------------------------------------\n\nTITLE: Simple View Renaming Example\nDESCRIPTION: Example showing how to rename a view from 'users' to 'people' using the basic ALTER VIEW syntax.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/sql/alter-view.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nALTER VIEW users RENAME TO people;\n```\n\n----------------------------------------\n\nTITLE: Retrieving Quantile at Value from Quantile Digest in Presto SQL\nDESCRIPTION: This function returns the approximate quantile number between 0 and 1 from the quantile digest given an input value. It returns null if the quantile digest is empty or the input value is outside the range of the quantile digest.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/qdigest.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nquantile_at_value(qdigest(T), T) -> quantile\n```\n\n----------------------------------------\n\nTITLE: LDAP Password Authenticator Configuration\nDESCRIPTION: Basic LDAP configuration in password-authenticator.properties file for the Presto coordinator\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/security/ldap.rst#2025-04-10_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\npassword-authenticator.name=ldap\nldap.url=ldaps://ldap-server:636\nldap.user-bind-pattern=<Refer below for usage>\n```\n\n----------------------------------------\n\nTITLE: Computing Theta Sketch in Presto SQL\nDESCRIPTION: Computes a theta sketch from an input dataset. The output can be used as input for other sketch_theta_* functions.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/sketch.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nsketch_theta(x) -> varbinary\n```\n\n----------------------------------------\n\nTITLE: Counting Points in Geometry in Presto SQL\nDESCRIPTION: Returns the number of points in a geometry.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/geospatial.rst.txt#2025-04-10_snippet_20\n\nLANGUAGE: SQL\nCODE:\n```\nST_NumPoints(Geometry) -> bigint\n```\n\n----------------------------------------\n\nTITLE: Using ST_CoordDim in Presto\nDESCRIPTION: Returns the coordinate dimension of the geometry. This function provides the dimensionality of the coordinates used in the geometry object.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/geospatial.rst#2025-04-10_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nST_CoordDim(Geometry) -> bigint\n```\n\n----------------------------------------\n\nTITLE: LDAP Password Authenticator Configuration\nDESCRIPTION: Basic LDAP configuration in password-authenticator.properties file for the Presto coordinator\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/security/ldap.rst#2025-04-10_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\npassword-authenticator.name=ldap\nldap.url=ldaps://ldap-server:636\nldap.user-bind-pattern=<Refer below for usage>\n```\n\n----------------------------------------\n\nTITLE: Configuring Nessie Catalog for Iceberg in Presto\nDESCRIPTION: Configuration properties for setting up an Iceberg connector with Nessie as the catalog. This specifies the connector name, catalog type, warehouse location, and Nessie API endpoint URI.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/iceberg.rst#2025-04-10_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\nconnector.name=iceberg\niceberg.catalog.type=nessie\niceberg.catalog.warehouse=/tmp\niceberg.nessie.uri=https://localhost:19120/api/v1\n```\n\n----------------------------------------\n\nTITLE: Detecting Myanmar Font Encoding in SQL\nDESCRIPTION: Function that analyzes text to determine if it uses Zawgyi or Unicode encoding. Returns 'zawgyi' for Zawgyi-encoded text and 'unicode' otherwise.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/internationalization.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nmyanmar_font_encoding(text) -> varchar\n```\n\n----------------------------------------\n\nTITLE: Using from_utf8 Function in Presto SQL\nDESCRIPTION: The from_utf8 function is introduced to correct invalid UTF-8 data. It can be used in string operations to ensure valid UTF-8 encoded code points.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.102.rst#2025-04-10_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT from_utf8(column_name) FROM table_name;\n```\n\n----------------------------------------\n\nTITLE: Performing Cross Joins in Presto SQL\nDESCRIPTION: Illustrates the syntax for performing a cross join between two tables (a and b) in Presto using standard ANSI SQL syntax.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.56.rst#2025-04-10_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT *\nFROM a\nCROSS JOIN b\n```\n\n----------------------------------------\n\nTITLE: Configuring SingleStore Connector Properties in Presto\nDESCRIPTION: Example configuration for connecting Presto to a SingleStore database. The properties file should be placed in the etc/catalog directory with a .properties extension to mount the SingleStore connector as a catalog.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/singlestore.rst#2025-04-10_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nconnector.name=singlestore\nconnection-url=jdbc:singlestore://localhost:3306\nconnection-user=root\nconnection-password=LbRootPass1\n```\n\n----------------------------------------\n\nTITLE: SQL Query Using DISTINCT Aggregation in Presto\nDESCRIPTION: Example SQL query demonstrating the new DISTINCT argument qualifier for aggregation functions. This is currently limited to queries without a GROUP BY clause where all aggregation functions share the same input expression.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.55.rst#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT count(DISTINCT country)\nFROM users\n```\n\n----------------------------------------\n\nTITLE: Displaying SHOW CREATE VIEW Syntax in Presto SQL\nDESCRIPTION: This code snippet shows the syntax for the SHOW CREATE VIEW command in Presto SQL. It is used to display the SQL statement that creates a specified view.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/sql/show-create-view.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSHOW CREATE VIEW view_name\n```\n\n----------------------------------------\n\nTITLE: Using GROUP BY () SQL Pattern in Presto\nDESCRIPTION: Example of the GROUP BY () syntax in SQL queries which now raises errors during analysis rather than execution in Presto 0.132.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.132.rst#2025-04-10_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nGROUP BY ()\n```\n\n----------------------------------------\n\nTITLE: Modifying Table Properties for an Iceberg Table in Presto\nDESCRIPTION: Sets the commit_retries property to 6 for an existing Iceberg version 2 table. Currently, only commit_retries can be modified in Iceberg tables through Presto.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/iceberg.rst#2025-04-10_snippet_49\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE iceberg.web.page_views_v2 SET PROPERTIES (commit_retries = 6);\n```\n\n----------------------------------------\n\nTITLE: MySQL Select Query\nDESCRIPTION: Basic SELECT query example for retrieving data from MySQL table.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/mysql.rst.txt#2025-04-10_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM mysql.web.page_views;\n```\n\n----------------------------------------\n\nTITLE: Modifying Table Properties for an Iceberg Table in Presto\nDESCRIPTION: Sets the commit_retries property to 6 for an existing Iceberg version 2 table. Currently, only commit_retries can be modified in Iceberg tables through Presto.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/iceberg.rst#2025-04-10_snippet_49\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE iceberg.web.page_views_v2 SET PROPERTIES (commit_retries = 6);\n```\n\n----------------------------------------\n\nTITLE: Defining DROP VIEW Syntax in Presto SQL\nDESCRIPTION: Specifies the syntax for the DROP VIEW statement in Presto. It allows for an optional IF EXISTS clause to suppress errors if the view doesn't exist.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/sql/drop-view.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nDROP VIEW [ IF EXISTS ] view_name\n```\n\n----------------------------------------\n\nTITLE: Querying Data from Kudu Table\nDESCRIPTION: SQL command to select all data from a Kudu table.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/kudu.rst.txt#2025-04-10_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM kudu.default.users;\n```\n\n----------------------------------------\n\nTITLE: Implicit Join Query in SQL\nDESCRIPTION: Example showing the new implicit join syntax support in Presto\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.80.rst#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM a, b WHERE a.id = b.id;\n```\n\n----------------------------------------\n\nTITLE: Dropping Table in Memory Connector (SQL)\nDESCRIPTION: SQL command to drop a table in the Memory connector.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/memory.rst#2025-04-10_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nDROP TABLE memory.default.nation;\n```\n\n----------------------------------------\n\nTITLE: Querying with AT TIME ZONE in SQL\nDESCRIPTION: This snippet references a fix for a regression where queries would fail when aggregation functions were present in AT TIME ZONE clauses. It demonstrates the use of AT TIME ZONE in SQL queries within Presto.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.144.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nAT TIME ZONE\n```\n\n----------------------------------------\n\nTITLE: Truncating an Iceberg Table\nDESCRIPTION: Examples of truncating an Iceberg table to delete all data without dropping the table from the metadata catalog.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/iceberg.rst.txt#2025-04-10_snippet_48\n\nLANGUAGE: sql\nCODE:\n```\nTRUNCATE TABLE nation;\n```\n\n----------------------------------------\n\nTITLE: Basic Window Function Syntax in SQL\nDESCRIPTION: Demonstrates the general syntax for using window functions with the OVER clause, including optional PARTITION BY, ORDER BY, and frame specifications.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/window.rst#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nfunction(args) OVER (\n    [PARTITION BY expression]\n    [ORDER BY expression [ASC|DESC]]\n    [frame]\n)\n```\n\n----------------------------------------\n\nTITLE: Trimming Arrays in Presto SQL\nDESCRIPTION: The trim_array function removes a specified number of elements from the end of an array. It takes two parameters: the array to trim and the number of elements to remove.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/array.rst#2025-04-10_snippet_11\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT trim_array(ARRAY[1, 2, 3, 4], 1);\n-- [1, 2, 3]\n\nSELECT trim_array(ARRAY[1, 2, 3, 4], 2);\n-- [1, 2]\n```\n\n----------------------------------------\n\nTITLE: Presto Regex Configuration Properties\nDESCRIPTION: Regular expression library configuration including DFA states limit and retry settings\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/admin/properties.rst#2025-04-10_snippet_47\n\nLANGUAGE: properties\nCODE:\n```\nregex-library=JONI\nre2j.dfa-states-limit=2147483647\nre2j.dfa-retries=5\n```\n\n----------------------------------------\n\nTITLE: Selecting Data from Iceberg Tables\nDESCRIPTION: Examples of basic SELECT statements for Iceberg tables, showing syntax for both version 1 and version 2 tables.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/iceberg.rst.txt#2025-04-10_snippet_43\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM iceberg.web.page_views;\n\nSELECT * FROM iceberg.web.page_views_v2;\n```\n\n----------------------------------------\n\nTITLE: Querying Differential Entropy with Simple Reservoir Sampling\nDESCRIPTION: Example of calculating differential entropy using reservoir sampling with 1,000,000 samples. Used when data bounds are unknown.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/aggregate.rst#2025-04-10_snippet_8\n\nLANGUAGE: none\nCODE:\n```\nSELECT\n    differential_entropy(1000000, x)\nFROM\n    data\n```\n\n----------------------------------------\n\nTITLE: Configuring Cluster-wide Max Memory for Queries in Presto\nDESCRIPTION: Sets the maximum amount of user memory a query can use across the entire cluster. When this limit is reached across all workers, the query will be killed.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/admin/properties.rst#2025-04-10_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nquery.max-memory = 20GB\n```\n\n----------------------------------------\n\nTITLE: Query Results from Indexed Search\nDESCRIPTION: Shows the results of querying the scientists table using an indexed column.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/accumulo.rst.txt#2025-04-10_snippet_20\n\nLANGUAGE: none\nCODE:\n```\n recordkey |     name     | age |  birthday\n-----------+--------------+-----+------------\n row1      | Grace Hopper | 109 | 1906-12-09\n(1 row)\n```\n\n----------------------------------------\n\nTITLE: Inserting a Single Row with Explicit Values in SQL\nDESCRIPTION: This snippet shows how to insert a single row with explicit values into a table using the INSERT statement.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/sql/insert.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO cities VALUES (1, 'San Francisco');\n```\n\n----------------------------------------\n\nTITLE: Using regexp_like for Pattern Matching in SQL\nDESCRIPTION: Evaluates if a regular expression pattern is contained within a string, returning a boolean result. Unlike LIKE, it performs a contains operation rather than a match operation.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/regexp.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT regexp_like('1a 2b 14m', '\\d+b'); -- true\n```\n\n----------------------------------------\n\nTITLE: Subquery Examples\nDESCRIPTION: Shows different types of subqueries including EXISTS, IN, and scalar subqueries.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/sql/select.rst.txt#2025-04-10_snippet_31\n\nLANGUAGE: sql\nCODE:\n```\nSELECT name\nFROM nation\nWHERE EXISTS (SELECT * FROM region WHERE region.regionkey = nation.regionkey);\n\nSELECT name\nFROM nation\nWHERE regionkey IN (SELECT regionkey FROM region);\n\nSELECT name\nFROM nation\nWHERE regionkey = (SELECT max(regionkey) FROM region)\n```\n\n----------------------------------------\n\nTITLE: Creating Set Digest from Bigint Array in SQL\nDESCRIPTION: This snippet demonstrates how to create a set digest from a bigint array using the make_set_digest function in Presto.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/setdigest.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT make_set_digest(value)\nFROM (VALUES 1, 2, 3) T(value);\n```\n\n----------------------------------------\n\nTITLE: Presto Configuration Properties\nDESCRIPTION: Configuration and session properties that were added, modified, or removed in this release.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.183.rst#2025-04-10_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\nexperimental.operator-memory-limit-before-spill\noperator_memory_limit_before_spill\nexperimental.aggregation-operator-unspill-memory-limit\naggregation_operator_unspill_memory_limit\n```\n\n----------------------------------------\n\nTITLE: Using DESCRIBE OUTPUT Command in Presto SQL\nDESCRIPTION: New SQL command added in Presto 0.157 that allows users to describe the output schema of a query.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.157.rst#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nDESCRIBE OUTPUT\n```\n\n----------------------------------------\n\nTITLE: Defining MongoDB Table Schema in Presto\nDESCRIPTION: Shows the JSON structure used to define a table schema for MongoDB collections in Presto. This schema is stored in a special collection specified by the 'mongodb.schema-collection' configuration.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/mongodb.rst#2025-04-10_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"table\": ...,\n    \"fields\": [\n          { \"name\" : ...,\n            \"type\" : \"varchar|bigint|boolean|double|date|array(bigint)|...\",\n            \"hidden\" : false },\n            ...\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing Matches with regexp_replace in Presto SQL\nDESCRIPTION: Demonstrates the usage of regexp_replace function to replace every instance of a substring matched by a regular expression pattern with a specified replacement string.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/regexp.rst#2025-04-10_snippet_6\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT regexp_replace('1a 2b 14m', '(\\d+)([ab]) ', '3c$2 '); -- '3ca 3cb 14m'\n```\n\n----------------------------------------\n\nTITLE: Using the ip_prefix_subnets Function in Presto\nDESCRIPTION: Demonstrates the usage of the new ip_prefix_subnets function that splits an input prefix into subnets of a specified size.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.290.rst#2025-04-10_snippet_5\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT ip_prefix_subnets('192.168.0.0/16', 24) AS subnets\n```\n\n----------------------------------------\n\nTITLE: Mapping JSON Fields to Presto Columns\nDESCRIPTION: Illustrates the supported Presto data types and corresponding field decoders for the JSON decoder in the Kafka connector. It shows how JSON fields can be mapped to various Presto data types, including date and time types.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/kafka.rst.txt#2025-04-10_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\n+-------------------------------------+--------------------------------------------------------------------------------+\n| Presto data type                    | Allowed \"dataFormat\" values                                                  |\n+=====================================+================================================================================+\n| | \"BIGINT\"                        | Default field decoder (omitted \"dataFormat\" attribute)                       |\n| | \"INTEGER\"                       |                                                                                |\n| | \"SMALLINT\"                      |                                                                                |\n| | \"TINYINT\"                       |                                                                                |\n| | \"DOUBLE\"                        |                                                                                |\n| | \"BOOLEAN\"                       |                                                                                |\n| | \"VARCHAR\"                       |                                                                                |\n| | \"VARCHAR(x)\"                    |                                                                                |\n+-------------------------------------+--------------------------------------------------------------------------------+\n| | \"TIMESTAMP\"                     | \"custom-date-time\", \"iso8601\", \"rfc2822\",                                |\n| | \"TIMESTAMP WITH TIME ZONE\"      | \"milliseconds-since-epoch\", \"seconds-since-epoch\"                          |\n| | \"TIME\"                          |                                                                                |\n| | \"TIME WITH TIME ZONE\"           |                                                                                |\n+-------------------------------------+--------------------------------------------------------------------------------+\n| \"DATE\"                            | \"custom-date-time\", \"iso8601\", \"rfc2822\",                                |\n+-------------------------------------+--------------------------------------------------------------------------------+\n```\n\n----------------------------------------\n\nTITLE: Selecting Data from Specific Table in Memory Connector in Presto\nDESCRIPTION: This SQL command selects all data from the 'my_table' table in the Memory connector.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/memory.rst.txt#2025-04-10_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM memory.default1.my_table;\n```\n\n----------------------------------------\n\nTITLE: Extracting Date/Time Fields in Presto SQL\nDESCRIPTION: The 'extract' function in Presto SQL allows extracting specific fields from date and time types. It supports various fields such as YEAR, QUARTER, MONTH, WEEK, and others. The function returns a bigint value.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/datetime.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nextract(field FROM x) -> bigint\n```\n\n----------------------------------------\n\nTITLE: SQL COMMIT Statement Syntax\nDESCRIPTION: Shows the basic syntax pattern for the COMMIT statement. The optional WORK keyword can be included for ANSI SQL compliance.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/sql/commit.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: none\nCODE:\n```\nCOMMIT [ WORK ]\n```\n\n----------------------------------------\n\nTITLE: Connecting to Presto using JDBC URL\nDESCRIPTION: This Java code snippet demonstrates how to create a connection to a Presto server using a JDBC URL. It specifies the host, port, catalog, and schema in the URL.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/installation/jdbc.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nString url = \"jdbc:presto://example.net:8080/hive/sales\";\nConnection connection = DriverManager.getConnection(url, \"test\", null);\n```\n\n----------------------------------------\n\nTITLE: Configuring BigQuery Connector Properties\nDESCRIPTION: Basic configuration properties file for setting up the BigQuery connector in Presto. Must be placed in etc/catalog directory with appropriate project ID configuration.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/bigquery.rst#2025-04-10_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nconnector.name=bigquery\nbigquery.project-id=<your Google Cloud Platform project id>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Current User in Presto SQL\nDESCRIPTION: Returns the username of the user who is currently running the query. This is a standard SQL function that does not require parentheses when called.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/session.rst#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\ncurrent_user\n```\n\n----------------------------------------\n\nTITLE: Creating QDigest with Custom Accuracy in Presto\nDESCRIPTION: Aggregate function that creates a qdigest with specified weights and maximum error accuracy. The accuracy must be between 0 and 1 and constant for all input rows.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/qdigest.rst#2025-04-10_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nqdigest_agg(x, w, accuracy) -> qdigest<[same as x]>\n```\n\n----------------------------------------\n\nTITLE: Presto Optimizer Configuration Properties\nDESCRIPTION: Configuration properties for the Presto query optimizer, including join reordering, aggregation pushdown, and history-based optimization settings.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/admin/properties.rst.txt#2025-04-10_snippet_24\n\nLANGUAGE: properties\nCODE:\n```\noptimizer.push-table-write-through-union=true\noptimizer.join-reordering-strategy=AUTOMATIC\noptimizer.max-reordered-joins=9\noptimizer.use-defaults-for-correlated-aggregation-pushdown-through-outer-joins=true\noptimizer.rewrite-expression-with-constant-variable=true\noptimizer.history-based-optimizer-plan-canonicalization-strategies=IGNORE_SAFE_CONSTANTS\noptimizer.track-history-stats-from-failed-queries=true\noptimizer.log-plans-used-in-history-based-optimizer=false\n```\n\n----------------------------------------\n\nTITLE: Optimizing CASE Expressions on Constants in Presto SQL\nDESCRIPTION: Reference to the optimization for CASE expressions when used with constant values.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.111.rst#2025-04-10_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nCASE\n```\n\n----------------------------------------\n\nTITLE: Using ST_Centroid with SphericalGeography in Presto\nDESCRIPTION: Returns the point value that is the mathematical centroid of a spherical geometry. This function supports Points and MultiPoints as input and returns a three-dimensional centroid projected onto the Earth's surface.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/geospatial.rst#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nST_Centroid(SphericalGeography) -> Point\n```\n\n----------------------------------------\n\nTITLE: Frame Clause Syntax in SQL Window Functions\nDESCRIPTION: Shows the syntax for specifying a frame clause in a window function, including RANGE, ROWS, and GROUPS options, as well as frame start and end specifications.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/window.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\n{RANGE|ROWS|GROUPS} frame_start \n{RANGE|ROWS|GROUPS} BETWEEN frame_start AND frame_end\n```\n\n----------------------------------------\n\nTITLE: Configuring Password File Authenticator in Presto\nDESCRIPTION: This snippet shows how to configure the password file authenticator in Presto by creating an 'etc/password-authenticator.properties' file on the coordinator. It specifies the authenticator name and the path to the password file.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/security/password-file.rst#2025-04-10_snippet_0\n\nLANGUAGE: none\nCODE:\n```\npassword-authenticator.name=file\nfile.password-file=/path/to/password.db\n```\n\n----------------------------------------\n\nTITLE: Setting Default View Security Mode in Presto SQL\nDESCRIPTION: Configures the default security mode for view creation using the new session property.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.287.rst#2025-04-10_snippet_5\n\nLANGUAGE: SQL\nCODE:\n```\nSET SESSION default-view-security-mode = 'mode_name';\n```\n\n----------------------------------------\n\nTITLE: Computing KLL sketch in Presto\nDESCRIPTION: Computes a KLL sketch from input values of type T. Returns the little-endian serialized version of the Apache DataSketches KLL Sketch.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/sketch.rst#2025-04-10_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nsketch_kll[T](x: T) -> kllsketch[T]\n```\n\n----------------------------------------\n\nTITLE: Setting Index Loader Timeout Configuration Property\nDESCRIPTION: The index-loader-timeout configuration property specifies the maximum time allowed for an index to load before failing queries.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.227.rst#2025-04-10_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nindex-loader-timeout\n```\n\n----------------------------------------\n\nTITLE: Using USE Statement in Presto SQL\nDESCRIPTION: Example of SQL syntax changes where USE CATALOG and USE SCHEMA have been replaced with a new USE statement in Presto 0.89.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.89.rst#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nUSE CATALOG\n```\n\nLANGUAGE: sql\nCODE:\n```\nUSE SCHEMA\n```\n\n----------------------------------------\n\nTITLE: Grouping by Maps of Structural Types in Presto\nDESCRIPTION: This snippet refers to an improvement in Presto's GROUP BY clause, which now supports maps of structural types.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.122.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nGROUP BY map_column\n```\n\n----------------------------------------\n\nTITLE: Improved Memory Usage for map_agg and map_union Functions\nDESCRIPTION: Performance enhancement that reduces memory usage of the map_agg and map_union functions.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.172.rst.txt#2025-04-10_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nmap_agg\n```\n\nLANGUAGE: sql\nCODE:\n```\nmap_union\n```\n\n----------------------------------------\n\nTITLE: Configuring JVM Settings for Presto GC Diagnostics\nDESCRIPTION: This code snippet provides a list of JVM flags to enable detailed garbage collection logging and diagnostics for Presto. These settings are helpful for identifying and troubleshooting GC-related performance issues.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/admin/tuning.rst#2025-04-10_snippet_0\n\nLANGUAGE: none\nCODE:\n```\n-XX:+PrintGCApplicationConcurrentTime\n-XX:+PrintGCApplicationStoppedTime\n-XX:+PrintGCCause\n-XX:+PrintGCDateStamps\n-XX:+PrintGCTimeStamps\n-XX:+PrintGCDetails\n-XX:+PrintReferenceGC\n-XX:+PrintClassHistogramAfterFullGC\n-XX:+PrintClassHistogramBeforeFullGC\n-XX:PrintFLSStatistics=2\n-XX:+PrintAdaptiveSizePolicy\n-XX:+PrintSafepointStatistics\n-XX:PrintSafepointStatisticsCount=1\n```\n\n----------------------------------------\n\nTITLE: Configuring Spill Paths in Presto SQL\nDESCRIPTION: Sets multiple paths on separate local devices for spill to increase query performance. This property is defined in the tuning-spilling section.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/admin/spill.rst#2025-04-10_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nspiller-spill-path=/path1,/path2,/path3\n```\n\n----------------------------------------\n\nTITLE: Querying Table History\nDESCRIPTION: Query to retrieve table state change history from the hidden $history metadata table.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/iceberg.rst#2025-04-10_snippet_14\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM \"ctas_nation$history\";\n```\n\n----------------------------------------\n\nTITLE: Extracting Week in Presto SQL\nDESCRIPTION: The 'week' function returns the ISO week of the year from a given date or timestamp value. The result ranges from 1 to 53. It's also aliased as 'week_of_year'. The function returns a bigint value.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/datetime.rst.txt#2025-04-10_snippet_14\n\nLANGUAGE: SQL\nCODE:\n```\nweek(x) -> bigint\n```\n\nLANGUAGE: SQL\nCODE:\n```\nweek_of_year(x) -> bigint\n```\n\n----------------------------------------\n\nTITLE: Using WITH Clause in Presto SQL\nDESCRIPTION: Demonstrates the use of the WITH clause for factoring out complex expressions or subqueries in Presto.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/migration/from-hive.rst.txt#2025-04-10_snippet_8\n\nLANGUAGE: SQL\nCODE:\n```\nWITH a AS (\n  SELECT substr(name, 1, 3) x\n  FROM ...\n)\nSELECT *\nFROM a\nWHERE x = 'foo'\n```\n\n----------------------------------------\n\nTITLE: Using WITH Clause in Presto SQL\nDESCRIPTION: Demonstrates the use of the WITH clause for factoring out complex expressions or subqueries in Presto.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/migration/from-hive.rst.txt#2025-04-10_snippet_8\n\nLANGUAGE: SQL\nCODE:\n```\nWITH a AS (\n  SELECT substr(name, 1, 3) x\n  FROM ...\n)\nSELECT *\nFROM a\nWHERE x = 'foo'\n```\n\n----------------------------------------\n\nTITLE: SQL Function Catalog Schema Names Case Sensitivity Fix\nDESCRIPTION: Reference to a bug fix that resolves failures in queries that use uppercase letters in SQL function catalog schema names. The issue was introduced in PR #15313.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.246.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nquery.min-expire-age\n```\n\n----------------------------------------\n\nTITLE: Enabling Intermediate Aggregations in Presto SQL\nDESCRIPTION: Introduces a new session property 'enable_intermediate_aggregations' to allow the use of intermediate aggregations within un-grouped aggregations. This can potentially improve query performance for certain types of aggregations.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.175.rst#2025-04-10_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSET SESSION enable_intermediate_aggregations = true;\n```\n\n----------------------------------------\n\nTITLE: Using UUID Function in SQL\nDESCRIPTION: The new uuid() function returns a unique identifier value of type UUID. This was previously only available in the Accumulo connector but is now a standard function.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.269.rst#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nuuid()\n```\n\n----------------------------------------\n\nTITLE: Syntax for SHOW CREATE FUNCTION in Presto SQL\nDESCRIPTION: Shows the SQL statement that creates the specified function. If parameter type list is omitted, it shows one row for each signature with the given function name.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/show-create-function.rst#2025-04-10_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSHOW CREATE FUNCTION function_name [ ( parameter_type[, ...] ) ]\n```\n\n----------------------------------------\n\nTITLE: Frame Start and End Options in SQL Window Functions\nDESCRIPTION: Lists the available options for specifying frame start and end in window function frame clauses.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/window.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nUNBOUNDED PRECEDING\nexpression PRECEDING\nCURRENT ROW\nexpression FOLLOWING\nUNBOUNDED FOLLOWING\n```\n\n----------------------------------------\n\nTITLE: Creating Partitioned Table in Hive via Presto SQL\nDESCRIPTION: SQL statement demonstrating how to create a partitioned table in Hive with order_date and order_region as partition keys.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.123.rst#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE orders (\n   order_date VARCHAR,\n   order_region VARCHAR,\n   order_id BIGINT,\n   order_info VARCHAR\n) WITH (partitioned_by = ARRAY['order_date', 'order_region'])\n```\n\n----------------------------------------\n\nTITLE: Concatenating Multiple Arrays or Maps in Presto SQL\nDESCRIPTION: The concat() function for arrays and map_concat() function for maps now support concatenating more than two elements in a single call.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.168.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT concat(array1, array2, array3, array4);\nSELECT map_concat(map1, map2, map3, map4);\n```\n\n----------------------------------------\n\nTITLE: Using merge with SfmSketch objects in SQL\nDESCRIPTION: Example of using the merge function to aggregate SfmSketch objects and calculate annual distinct counts from monthly sketches. This is similar to the merge function for HyperLogLog objects.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/noisy.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT year, cardinality(merge(sketch)) AS annual_distinct_count\nFROM monthly_sketches\nGROUP BY 1\n```\n\n----------------------------------------\n\nTITLE: Updating Low Memory Killer Configuration in Presto SQL\nDESCRIPTION: Replaces the 'query.low-memory-killer.enabled' config property with 'query.low-memory-killer.policy'. Introduces a new policy 'total-reservation-on-blocked-nodes' for killing queries on out-of-memory nodes.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.191.rst#2025-04-10_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSET SESSION query.low-memory-killer.policy = 'total-reservation-on-blocked-nodes';\n```\n\n----------------------------------------\n\nTITLE: Creating a Table with Comments and Properties in PrestoDB\nDESCRIPTION: Example of creating a new table with a comment and specified format property. The created table summarizes orders by date, calculating the sum of total prices for each order date.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/create-table-as.rst#2025-04-10_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE orders_by_date\nCOMMENT 'Summary of orders by date'\nWITH (format = 'ORC')\nAS\nSELECT orderdate, sum(totalprice) AS price\nFROM orders\nGROUP BY orderdate\n```\n\n----------------------------------------\n\nTITLE: Using flatten_geometry_collections in Presto\nDESCRIPTION: Recursively flattens any GeometryCollections in Geometry, returning an array of constituent non-GeometryCollection geometries. The order of the array is arbitrary and should not be relied upon.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/geospatial.rst#2025-04-10_snippet_32\n\nLANGUAGE: sql\nCODE:\n```\nflatten_geometry_collections(Geometry) -> array(Geometry)\n```\n\n----------------------------------------\n\nTITLE: Elasticsearch Array Field Mapping Configuration\nDESCRIPTION: cURL command to configure array field definitions in Elasticsearch index mapping metadata\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/elasticsearch.rst#2025-04-10_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncurl --request PUT \\\n    --url localhost:9200/doc/_mapping \\\n    --header 'content-type: application/json' \\\n    --data '\n{\n    \"_meta\": {\n        \"presto\":{\n            \"array_string_field\":{\n                \"isArray\":true\n            },\n            \"object_field\":{\n                \"array_int_field\":{\n                    \"isArray\":true\n                }\n            },\n        }\n    }\n}'\n```\n\n----------------------------------------\n\nTITLE: Estimating Distinct Values with HyperLogLog in SQL\nDESCRIPTION: This snippet demonstrates how to use the approx_distinct function in Presto to estimate the number of distinct entries in a column using HyperLogLog algorithm.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/setdigest.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT approx_distinct(column_name) FROM table_name;\n```\n\n----------------------------------------\n\nTITLE: Expiring Specific Snapshots from an Iceberg Table by ID in Presto\nDESCRIPTION: This procedure removes specific snapshots by their IDs. The targeted snapshot IDs must not include the current snapshot of the table.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/iceberg.rst#2025-04-10_snippet_30\n\nLANGUAGE: sql\nCODE:\n```\nCALL iceberg.system.expire_snapshots(schema => 'schema_name', table_name => 'table_name', snapshot_ids => ARRAY[10001, 10002]);\n```\n\n----------------------------------------\n\nTITLE: Calling a Procedure with Named Arguments in Presto SQL\nDESCRIPTION: This example shows how to call a procedure named 'test' using named arguments in Presto SQL, allowing for argument specification in any order.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/call.rst#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nCALL test(name => 'apple', id => 123);\n```\n\n----------------------------------------\n\nTITLE: Extracting Raw Date from Tweet JSON in Presto\nDESCRIPTION: This SQL query extracts the raw date string from the JSON message of each tweet using the json_extract_scalar function. It demonstrates how to access nested JSON data in Presto.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/kafka-tutorial.rst.txt#2025-04-10_snippet_14\n\nLANGUAGE: sql\nCODE:\n```\nSELECT DISTINCT json_extract_scalar(_message, '$.created_at')) AS raw_date\nFROM tweets LIMIT 5;\n```\n\n----------------------------------------\n\nTITLE: ANSI SQL Array Indexing and Construction in Presto\nDESCRIPTION: Illustrates the correct way to index and construct arrays in Presto using ANSI SQL syntax, noting that arrays are indexed starting from 1.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/migration/from-hive.rst#2025-04-10_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT my_array[1] AS first_element\nFROM ...\n\nSELECT ARRAY[1, 2, 3] AS my_array\n```\n\n----------------------------------------\n\nTITLE: Unsupported ALTER Column Type Example\nDESCRIPTION: Example of an unsupported ALTER TABLE operation that attempts to change column data type.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/postgresql.rst#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE postgresql.public.users ALTER COLUMN age TYPE BIGINT;\n```\n\n----------------------------------------\n\nTITLE: Querying Hudi Table with Symbol Filter\nDESCRIPTION: SQL query example showing how to select date and symbol columns with a specific symbol filter.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/hudi.rst#2025-04-10_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nselect dt, symbol from stock_ticks_cow where symbol = 'GOOG';\n```\n\n----------------------------------------\n\nTITLE: Enabling Iceberg Filter Pushdown in Presto SQL\nDESCRIPTION: Configures the Iceberg connector to use filter pushdown optimization. This is controlled by the 'iceberg.pushdown-filter-enabled' configuration property.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.286.rst#2025-04-10_snippet_7\n\nLANGUAGE: SQL\nCODE:\n```\nSET SESSION iceberg.pushdown-filter-enabled = true;\n```\n\n----------------------------------------\n\nTITLE: Creating Tables from Query Results in Presto SQL\nDESCRIPTION: Demonstrates how to create a new table in Presto using the results of a SELECT query. The example shows creating an 'orders_by_date' table with summarized order data.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.56.rst#2025-04-10_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE orders_by_date AS\nSELECT orderdate, sum(totalprice) AS price\nFROM orders\nGROUP BY orderdate\n```\n\n----------------------------------------\n\nTITLE: SQL Function Reference - New Geography Function\nDESCRIPTION: New spatial function ST_Length added for SphericalGeography type calculations.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.219.rst#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nST_Length\n```\n\n----------------------------------------\n\nTITLE: Enabling Single Worker Execution in Presto SQL\nDESCRIPTION: To improve latency for small queries on large clusters, single worker execution can be enabled via a configuration property or session property. This optimizes the query plan to use only one node for execution.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.291.rst#2025-04-10_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSET SESSION single_node_execution_enabled = true;\n```\n\n----------------------------------------\n\nTITLE: Defining Twitter Feed Table Schema in Kafka\nDESCRIPTION: JSON configuration defining the structure of the tweets table including field mappings, data types, and format specifications.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/kafka-tutorial.rst#2025-04-10_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"tableName\": \"tweets\",\n    \"topicName\": \"twitter_feed\",\n    \"dataFormat\": \"json\",\n    \"key\": {\n        \"dataFormat\": \"raw\",\n        \"fields\": [\n            {\n                \"name\": \"kafka_key\",\n                \"dataFormat\": \"LONG\",\n                \"type\": \"BIGINT\",\n                \"hidden\": \"false\"\n            }\n        ]\n    },\n    \"message\": {\n        \"dataFormat\":\"json\",\n        \"fields\": [\n            {\n                \"name\": \"text\",\n                \"mapping\": \"text\",\n                \"type\": \"VARCHAR\"\n            },\n            {\n                \"name\": \"user_name\",\n                \"mapping\": \"user/screen_name\",\n                \"type\": \"VARCHAR\"\n            },\n            {\n                \"name\": \"lang\",\n                \"mapping\": \"lang\",\n                \"type\": \"VARCHAR\"\n            },\n            {\n                \"name\": \"created_at\",\n                \"mapping\": \"created_at\",\n                \"type\": \"TIMESTAMP\",\n                \"dataFormat\": \"rfc2822\"\n            },\n            {\n                \"name\": \"favorite_count\",\n                \"mapping\": \"favorite_count\",\n                \"type\": \"BIGINT\"\n            },\n            {\n                \"name\": \"retweet_count\",\n                \"mapping\": \"retweet_count\",\n                \"type\": \"BIGINT\"\n            },\n            {\n                \"name\": \"favorited\",\n                \"mapping\": \"favorited\",\n                \"type\": \"BOOLEAN\"\n            },\n            {\n                \"name\": \"id\",\n                \"mapping\": \"id_str\",\n                \"type\": \"VARCHAR\"\n            },\n            {\n                \"name\": \"in_reply_to_screen_name\",\n                \"mapping\": \"in_reply_to_screen_name\",\n                \"type\": \"VARCHAR\"\n            },\n            {\n                \"name\": \"place_name\",\n                \"mapping\": \"place/full_name\",\n                \"type\": \"VARCHAR\"\n            }\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using bitwise_arithmetic_shift_right Function in Presto SQL\nDESCRIPTION: The bitwise_arithmetic_shift_right function performs an arithmetic right shift operation on a value in 2's complement representation. It takes two parameters: the value to shift and the number of positions to shift.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/bitwise.rst#2025-04-10_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSELECT bitwise_arithmetic_shift_right(-8, 2); -- -2\nSELECT bitwise_arithmetic_shift_right(7, 2); -- 1\n```\n\n----------------------------------------\n\nTITLE: START TRANSACTION Usage Examples in Presto SQL\nDESCRIPTION: Demonstrates various ways to use the START TRANSACTION command with different isolation levels and read/write modes.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/start-transaction.rst#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSTART TRANSACTION;\nSTART TRANSACTION ISOLATION LEVEL REPEATABLE READ;\nSTART TRANSACTION READ WRITE;\nSTART TRANSACTION ISOLATION LEVEL READ COMMITTED, READ ONLY;\nSTART TRANSACTION READ WRITE, ISOLATION LEVEL SERIALIZABLE;\n```\n\n----------------------------------------\n\nTITLE: Using approx_percentile Function with Accuracy Parameter in SQL\nDESCRIPTION: New forms of the approx_percentile function have been added that accept an accuracy parameter. This allows for more control over the trade-off between accuracy and performance when calculating approximate percentiles.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.231.rst.txt#2025-04-10_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT approx_percentile(column, percentile, accuracy) FROM table;\n```\n\n----------------------------------------\n\nTITLE: Concatenating Binary Data in Presto SQL\nDESCRIPTION: The || operator performs concatenation of binary data in Presto SQL.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/binary.rst#2025-04-10_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nbinary1 || binary2\n```\n\n----------------------------------------\n\nTITLE: Estimating distinct values with sketch_theta_estimate in Presto\nDESCRIPTION: Returns the estimate of distinct values from the input theta sketch.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/sketch.rst#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nsketch_theta_estimate(sketch) -> double\n```\n\n----------------------------------------\n\nTITLE: Using TIMESTAMP Literals Example in Presto SQL\nDESCRIPTION: An example of a TIMESTAMP literal that previously caused failures when the local time doesn't exist in the JVM's default timezone. This issue has been fixed in version 0.197.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.197.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nTIMESTAMP '2017-03-26 02:10:00'\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Partial Aggregation Memory in Presto\nDESCRIPTION: Defines the maximum size of partial aggregation results for distributed aggregations. Increasing can reduce network transfer and CPU usage at the cost of more memory usage.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/admin/properties.rst#2025-04-10_snippet_32\n\nLANGUAGE: properties\nCODE:\n```\ntask.max-partial-aggregation-memory=16MB\n```\n\n----------------------------------------\n\nTITLE: Scalar Subquery in Presto SQL\nDESCRIPTION: A scalar subquery is a non-correlated subquery that returns zero or one row. It returns NULL if the subquery produces no rows, and errors if it produces more than one row.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/select.rst#2025-04-10_snippet_33\n\nLANGUAGE: sql\nCODE:\n```\nSELECT name\nFROM nation\nWHERE regionkey = (SELECT max(regionkey) FROM region)\n```\n\n----------------------------------------\n\nTITLE: Configuring Password Authentication in Presto\nDESCRIPTION: This snippet shows how to enable password authentication in Presto by modifying the http-server authentication configuration. It allows for generic password authentication using a pluggable password authenticator.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.195.rst#2025-04-10_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nhttp-server.authentication.type=PASSWORD\n```\n\n----------------------------------------\n\nTITLE: Configuring Event Listener Properties in Presto\nDESCRIPTION: Example configuration file for setting up an event listener in Presto. The file must be placed at etc/event-listener.properties and specify the event listener name along with any custom properties required by the specific implementation.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/develop/event-listener.rst#2025-04-10_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nevent-listener.name=custom-event-listener\ncustom-property1=custom-value1\ncustom-property2=custom-value2\n```\n\n----------------------------------------\n\nTITLE: Configuring Presto Properties for Spark Execution\nDESCRIPTION: Sample configuration properties file for Presto on Spark execution. Sets task concurrency, worker threads, and writer count to match the number of cores per executor to optimize resource utilization.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/installation/spark.rst#2025-04-10_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\ntask.concurrency=4\ntask.max-worker-threads=4\ntask.writer-count=4\n```\n\n----------------------------------------\n\nTITLE: String Index Finding Function\nDESCRIPTION: Returns the position of a substring within a string. Acts as an alias for the strpos function.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/teradata.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nindex(string, substring) -> bigint\n```\n\n----------------------------------------\n\nTITLE: Configuring Hive Connector Initial Split Size in Java\nDESCRIPTION: This code snippet demonstrates how to configure the initial split size for the Hive connector in Presto. This can be useful for optimizing performance of small queries by increasing parallelism.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.70.rst#2025-04-10_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\nhive.max-initial-split-size\n```\n\n----------------------------------------\n\nTITLE: Configuring Hive Connector Initial Split Size in Java\nDESCRIPTION: This code snippet demonstrates how to configure the initial split size for the Hive connector in Presto. This can be useful for optimizing performance of small queries by increasing parallelism.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.70.rst#2025-04-10_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\nhive.max-initial-split-size\n```\n\n----------------------------------------\n\nTITLE: Querying JVM Version from JMX in Presto\nDESCRIPTION: SQL query example showing how to retrieve the JVM version information from each node in the Presto cluster using the JMX connector.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/jmx.rst#2025-04-10_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSELECT node, vmname, vmversion\nFROM jmx.current.\"java.lang:type=runtime\";\n```\n\n----------------------------------------\n\nTITLE: Querying MongoDB Data with Presto SQL\nDESCRIPTION: Demonstrates how to execute a SELECT query on a MongoDB collection using Presto SQL syntax. This example selects the 'name' field from the 'users' collection where the '_id' matches a specific ObjectId.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/mongodb.rst#2025-04-10_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nSELECT name\nFROM users\nWHERE _id = ObjectId('66fe8898c4ce1100c811cbe0');\n```\n\n----------------------------------------\n\nTITLE: Extracting Start and End Points of Linestring in Presto SQL\nDESCRIPTION: Functions to retrieve the first and last points of a LineString geometry.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/geospatial.rst.txt#2025-04-10_snippet_14\n\nLANGUAGE: SQL\nCODE:\n```\nST_StartPoint(Geometry) -> point\n```\n\nLANGUAGE: SQL\nCODE:\n```\nST_EndPoint(Geometry) -> point\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Aggregation Query in Presto\nDESCRIPTION: Example SQL query showing a simple aggregation that could benefit from exchange materialization. The query selects customer keys and sums total prices from the orders table.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/admin/exchange-materialization.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT custkey, SUM(totalprice)\nFROM orders\nGROUP BY custkey\n```\n\n----------------------------------------\n\nTITLE: Enabling Dynamic Split Sizes in Hive Connector\nDESCRIPTION: Enables the use of dynamic split sizes based on data selected by the query in the Hive connector.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.287.rst#2025-04-10_snippet_6\n\nLANGUAGE: SQL\nCODE:\n```\nSET SESSION hive.dynamic_split_sizes_enabled = true;\n```\n\n----------------------------------------\n\nTITLE: Configuring Iceberg Statistics File Cache Size in Presto\nDESCRIPTION: Sets the maximum size for the Iceberg table puffin files cache to improve query planning time. This is controlled by the 'iceberg.max-statistics-file-cache-size' configuration property.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.290.rst#2025-04-10_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSET SESSION iceberg.max-statistics-file-cache-size = '1GB'\n```\n\n----------------------------------------\n\nTITLE: IO Plan Example with JSON Format in Presto SQL\nDESCRIPTION: An example of the IO type with JSON format output, showing input and output table information for an INSERT statement.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/explain.rst#2025-04-10_snippet_5\n\nLANGUAGE: none\nCODE:\n```\npresto:hive> EXPLAIN (TYPE IO, FORMAT JSON) INSERT INTO test_nation SELECT * FROM nation WHERE regionkey = 2;\n            Query Plan\n-----------------------------------\n {\n   \"inputTableColumnInfos\" : [ {\n     \"table\" : {\n       \"catalog\" : \"hive\",\n       \"schemaTable\" : {\n         \"schema\" : \"tpch\",\n         \"table\" : \"nation\"\n       }\n     },\n     \"columns\" : [ {\n       \"columnName\" : \"regionkey\",\n       \"type\" : \"bigint\",\n       \"domain\" : {\n         \"nullsAllowed\" : false,\n         \"ranges\" : [ {\n           \"low\" : {\n             \"value\" : \"2\",\n             \"bound\" : \"EXACTLY\"\n           },\n           \"high\" : {\n             \"value\" : \"2\",\n             \"bound\" : \"EXACTLY\"\n           }\n         } ]\n       }\n     } ]\n   } ],\n   \"outputTable\" : {\n     \"catalog\" : \"hive\",\n     \"schemaTable\" : {\n       \"schema\" : \"tpch\",\n       \"table\" : \"test_nation\"\n     }\n   }\n }\n```\n\n----------------------------------------\n\nTITLE: JSON to VARCHAR Casting Updates in Presto SQL\nDESCRIPTION: New function replacements for deprecated JSON-VARCHAR casting operations\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.116.rst#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nJSON_PARSE(x)  -- instead of CAST(x as JSON)\nJSON_FORMAT(x) -- instead of CAST(x as VARCHAR)\n```\n\n----------------------------------------\n\nTITLE: Configuring Discovery URI for HTTPS\nDESCRIPTION: Setting to configure the discovery URI to use HTTPS.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/security/internal-communication.rst#2025-04-10_snippet_5\n\nLANGUAGE: none\nCODE:\n```\ndiscovery.uri=https://<coordinator fqdn>:<https port>\n```\n\n----------------------------------------\n\nTITLE: Creating an Iceberg Schema with S3 Storage Location in Presto\nDESCRIPTION: This SQL statement creates a new Iceberg schema named 'web' that stores tables in a specified S3 bucket. The location parameter defines where the schema data will be stored.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/iceberg.rst#2025-04-10_snippet_36\n\nLANGUAGE: sql\nCODE:\n```\nCREATE SCHEMA iceberg.web\nWITH (location = 's3://my-bucket/')\n```\n\n----------------------------------------\n\nTITLE: Extracting Substring in Presto SQL (Three-Parameter Version)\nDESCRIPTION: This substring function is an alias for the substr function, which extracts a portion of a string with a specified length starting from a given position.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/teradata.rst#2025-04-10_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nsubstring(string, start, length) -> varchar\n```\n\n----------------------------------------\n\nTITLE: Creating a Table with Memory Connector in Presto\nDESCRIPTION: This SQL command creates a table in the Memory connector by selecting data from another source.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/memory.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE memory.default.nation AS\nSELECT * from tpch.tiny.nation;\n```\n\n----------------------------------------\n\nTITLE: Prometheus Query Chunk Duration Configuration\nDESCRIPTION: Configuration property for Prometheus connector that controls the query chunk duration. The default value has been reduced from 1 day to 10 minutes to fix startup errors.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.261.rst.txt#2025-04-10_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\nprometheus.query-chunk-duration\n```\n\n----------------------------------------\n\nTITLE: Creating Accumulo Table with Custom Serializer in Presto SQL\nDESCRIPTION: SQL statement to create a table in Presto that maps to an Accumulo table, using a custom serializer. This demonstrates how to specify a user-defined serializer for value storage.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/accumulo.rst#2025-04-10_snippet_25\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE myschema.custom_scientists (\n  recordkey VARCHAR,\n  name VARCHAR,\n  age BIGINT,\n  birthday DATE\n)\nWITH (\n  column_mapping = 'name:metadata:name,age:metadata:age,birthday:metadata:date',\n  serializer = 'my.serializer.package.MySerializer'\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Hive Metastore Properties in Presto\nDESCRIPTION: Properties to configure Hive metastore behavior including timeouts, caching parameters, and refresh settings. These properties control how Presto interacts with the Hive metastore service.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/hive.rst#2025-04-10_snippet_3\n\nLANGUAGE: properties\nCODE:\n```\nhive.metastore-timeout=10s\nhive.metastore-cache-ttl=0s\nhive.metastore-cache-maximum-size=10000\nhive.metastore-refresh-interval=0s\nhive.metastore-refresh-max-threads=100\nhive.invalidate-metastore-cache-procedure-enabled=false\n```\n\n----------------------------------------\n\nTITLE: Creating Color Objects in Presto SQL\nDESCRIPTION: The 'color' function creates a color object from either a CSS-style short RGB string, a color name, or by interpolating between two colors based on a given value. It has three variants with different parameter sets.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/color.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\ncolor(string) -> color\n```\n\nLANGUAGE: SQL\nCODE:\n```\ncolor(x, low, high, low_color, high_color) -> color\n```\n\nLANGUAGE: SQL\nCODE:\n```\ncolor(x, low_color, high_color) -> color\n```\n\n----------------------------------------\n\nTITLE: Configuring Kerberos Authentication for HDFS in Presto\nDESCRIPTION: This snippet shows the configuration properties required to enable Kerberos authentication for HDFS access in Presto. It specifies the authentication type, principal, and keytab file location.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/hive-security.rst#2025-04-10_snippet_3\n\nLANGUAGE: none\nCODE:\n```\nhive.hdfs.authentication.type=KERBEROS\nhive.hdfs.presto.principal=hdfs@EXAMPLE.COM\nhive.hdfs.presto.keytab=/etc/presto/hdfs.keytab\n```\n\n----------------------------------------\n\nTITLE: Writing Lambda Expressions in Presto SQL\nDESCRIPTION: Lambda expressions in Presto SQL are written using the '->' syntax. They can include various SQL operations, but have limitations on subqueries and aggregations.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/lambda.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nx -> x + 1\n(x, y) -> x + y\nx -> regexp_like(x, 'a+')\nx -> x[1] / x[2]\nx -> IF(x > 0, x, -x)\nx -> COALESCE(x, 0)\nx -> CAST(x AS JSON)\nx -> x + TRY(1 / 0)\n```\n\n----------------------------------------\n\nTITLE: IF Function Equivalent CASE Expression in Presto SQL\nDESCRIPTION: Shows how the IF function is implemented as a language construct equivalent to a specific form of CASE expression.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/conditional.rst.txt#2025-04-10_snippet_4\n\nLANGUAGE: none\nCODE:\n```\nCASE\n    WHEN condition THEN true_value\n    [ ELSE false_value ]\nEND\n```\n\n----------------------------------------\n\nTITLE: Configuring Exchange Maximum Buffer Size in Presto\nDESCRIPTION: Defines the size of the buffer in the exchange client for holding data fetched from other nodes. Larger buffers can increase network throughput but reduce memory available for other operations.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/admin/properties.rst#2025-04-10_snippet_25\n\nLANGUAGE: properties\nCODE:\n```\nexchange.max-buffer-size\n```\n\n----------------------------------------\n\nTITLE: Creating Schema Syntax in Presto SQL\nDESCRIPTION: Basic syntax template for creating a new schema in Presto. Supports optional IF NOT EXISTS clause to prevent errors if schema exists, and WITH clause for setting schema properties.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/create-schema.rst#2025-04-10_snippet_0\n\nLANGUAGE: none\nCODE:\n```\nCREATE SCHEMA [ IF NOT EXISTS ] schema_name\n[ WITH ( property_name = expression [, ...] ) ]\n```\n\n----------------------------------------\n\nTITLE: Configuring JMX Connector with Periodic Dumps in Presto\nDESCRIPTION: Configuration for enabling periodic JMX data dumps, specifying which MBeans to sample, the sampling period, and maximum entries to store in history.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/jmx.rst#2025-04-10_snippet_1\n\nLANGUAGE: none\nCODE:\n```\nconnector.name=jmx\njmx.dump-tables=java.lang:type=Runtime,com.facebook.presto.execution.scheduler:name=NodeScheduler\njmx.dump-period=10s\njmx.max-entries=86400\n```\n\n----------------------------------------\n\nTITLE: ANALYZE Command Basic Syntax\nDESCRIPTION: Basic syntax definition for the ANALYZE command in PrestoDB. Shows the basic form and optional WITH clause for connector-specific properties.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/sql/analyze.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: none\nCODE:\n```\nANALYZE table_name [ WITH ( property_name = expression [, ...] ) ]\n```\n\n----------------------------------------\n\nTITLE: ANALYZE Command Basic Syntax\nDESCRIPTION: Basic syntax definition for the ANALYZE command in PrestoDB. Shows the basic form and optional WITH clause for connector-specific properties.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/sql/analyze.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: none\nCODE:\n```\nANALYZE table_name [ WITH ( property_name = expression [, ...] ) ]\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Presto-Accumulo Table\nDESCRIPTION: SQL example for creating a simple table in Accumulo via Presto, demonstrating how the first column becomes the Accumulo row ID by default. The example creates a 'scientists' table with basic column types.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/accumulo.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE myschema.scientists (\n  recordkey VARCHAR,\n  name VARCHAR,\n  age BIGINT,\n  birthday DATE\n);\n```\n\n----------------------------------------\n\nTITLE: Selecting Data from Oracle Table in PrestoDB\nDESCRIPTION: SQL query to retrieve all data from a specific table in Oracle database.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/oracle.rst#2025-04-10_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM oracle.web.clicks;\n```\n\n----------------------------------------\n\nTITLE: Altering PostgreSQL Tables in PrestoDB\nDESCRIPTION: Examples of ALTER TABLE operations including adding columns, dropping columns, renaming columns and tables.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/postgresql.rst#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE postgresql.public.sample_table ADD COLUMN new_col INT;\nALTER TABLE postgresql.public.sample_table DROP COLUMN new_col;\nALTER TABLE postgresql.public.sample_table RENAME COLUMN is_active TO is_enabled;\nALTER TABLE postgresql.public.sample_table RENAME TO renamed_table;\n```\n\n----------------------------------------\n\nTITLE: Enabling Streaming Aggregation in Presto SQL\nDESCRIPTION: Demonstrates how to enable streaming aggregation for partial aggregation using session properties or configuration properties. This improves performance when data is already ordered by group-by keys.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.272.rst#2025-04-10_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSET SESSION streaming_for_partial_aggregation_enabled = true;\n```\n\n----------------------------------------\n\nTITLE: Enabling Fragment Result Caching in Presto\nDESCRIPTION: Adds support for fragment result caching in Presto, which can improve query performance by caching intermediate results. This feature can be enabled through specific configuration properties.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.242.rst#2025-04-10_snippet_2\n\nLANGUAGE: restructuredtext\nCODE:\n```\n* Add support for fragment result caching. This can be enabled by ``fragment-result-cache.enabled`` and ``experimental.fragment-result-caching-enabled``.\n```\n\n----------------------------------------\n\nTITLE: Creating QDigest from Values in Presto\nDESCRIPTION: Aggregate function that creates a qdigest from all input values. This is the basic function to build a quantile digest from a column of values.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/qdigest.rst#2025-04-10_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nqdigest_agg(x) -> qdigest<[same as x]>\n```\n\n----------------------------------------\n\nTITLE: Casting JSON to VARCHAR in Presto SQL\nDESCRIPTION: Examples of casting JSON values to VARCHAR type in Presto. The examples show how JSON arrays throw errors when cast to VARCHAR, while JSON strings lose their quotes, and how primitives and null values are handled.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/json.rst#2025-04-10_snippet_13\n\nLANGUAGE: sql\nCODE:\n```\nSELECT CAST(JSON '[1, 2, 3]' AS VARCHAR); -- ERROR!\nSELECT CAST(JSON '\"abc\"' AS VARCHAR); -- 'abc'; Note the double quote is gone\nSELECT CAST(JSON '42' AS VARCHAR); -- '42'\nSELECT CAST(JSON 'true' AS VARCHAR); -- 'true'\nSELECT CAST(JSON 'null' AS VARCHAR); -- NULL\n```\n\n----------------------------------------\n\nTITLE: Geometry Collections Function in Presto SQL\nDESCRIPTION: New function to recursively flatten GeometryCollections, improving handling of complex geospatial data.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.237.rst.txt#2025-04-10_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nflatten_geometry_collections\n```\n\n----------------------------------------\n\nTITLE: Configuring Kerberos Authentication with HDFS Impersonation in Presto\nDESCRIPTION: Example configuration for enabling HDFS impersonation with Kerberos authentication in Presto. Specifies the authentication type, impersonation flag, principal, and keytab file location.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/hive-security.rst.txt#2025-04-10_snippet_5\n\nLANGUAGE: none\nCODE:\n```\nhive.hdfs.authentication.type=KERBEROS\nhive.hdfs.impersonation.enabled=true\nhive.hdfs.presto.principal=presto@EXAMPLE.COM\nhive.hdfs.presto.keytab=/etc/presto/hdfs.keytab\n```\n\n----------------------------------------\n\nTITLE: IF Function Equivalent CASE Expression in Presto SQL\nDESCRIPTION: Shows how the IF function is implemented as a language construct equivalent to a specific form of CASE expression.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/conditional.rst.txt#2025-04-10_snippet_4\n\nLANGUAGE: none\nCODE:\n```\nCASE\n    WHEN condition THEN true_value\n    [ ELSE false_value ]\nEND\n```\n\n----------------------------------------\n\nTITLE: Updating Multiple Columns for All Customers in Presto SQL\nDESCRIPTION: Shows how to update multiple columns (account_manager and assign_date) for all customers in a single UPDATE statement. This example updates all rows in the customers table without a WHERE clause.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/update.rst#2025-04-10_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nUPDATE customers SET\n  account_manager = 'John Henry',\n  assign_date = DATE '2007-01-01';\n```\n\n----------------------------------------\n\nTITLE: Creating Iceberg Table with Custom Properties in SQL\nDESCRIPTION: This SQL snippet demonstrates how to create an Iceberg table with custom properties such as format, partitioning, and location. It specifies ORC format, partitioning by columns c1 and c2, and sets a custom S3 location.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/iceberg.rst#2025-04-10_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE test_table (\n    c1 bigint,\n    c2 varchar,\n    c3 double\n)\nWITH (\n    format = 'ORC',\n    partitioning = ARRAY['c1', 'c2'],\n    location = 's3://test_bucket/test_schema/test_table')\n)\n```\n\n----------------------------------------\n\nTITLE: Estimating Intersection Cardinality of Set Digests in SQL\nDESCRIPTION: This snippet shows how to estimate the cardinality of the intersection of two set digests using the intersection_cardinality function in Presto.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/setdigest.rst.txt#2025-04-10_snippet_6\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT intersection_cardinality(make_set_digest(v1), make_set_digest(v2))\nFROM (VALUES (1, 1), (NULL, 2), (2, 3), (3, 4)) T(v1, v2);\n```\n\n----------------------------------------\n\nTITLE: SQL CREATE TABLE AS with IF NOT EXISTS\nDESCRIPTION: Added support for IF NOT EXISTS clause in CREATE TABLE AS queries to prevent errors when the table already exists.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.142.rst.txt#2025-04-10_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE AS\n```\n\n----------------------------------------\n\nTITLE: Result of Using TRY with Type Casting in Presto SQL\nDESCRIPTION: Shows the query output when using TRY with CAST, where invalid values are converted to NULL instead of causing query failure.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/conditional.rst.txt#2025-04-10_snippet_10\n\nLANGUAGE: none\nCODE:\n```\n origin_zip\n------------\n      94131\n NULL\n      94025\n      08544\n(4 rows)\n```\n\n----------------------------------------\n\nTITLE: Sorting Array with Custom Comparator in Presto SQL\nDESCRIPTION: Shows how to use array_sort function with a custom comparator to sort arrays, including handling of null values and complex sorting logic.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/array.rst.txt#2025-04-10_snippet_11\n\nLANGUAGE: sql\nCODE:\n```\nSELECT array_sort(ARRAY [3, 2, 5, 1, 2], (x, y) -> IF(x < y, 1, IF(x = y, 0, -1))); -- [5, 3, 2, 2, 1]\nSELECT array_sort(ARRAY ['bc', 'ab', 'dc'], (x, y) -> IF(x < y, 1, IF(x = y, 0, -1))); -- ['dc', 'bc', 'ab']\nSELECT array_sort(ARRAY [3, 2, null, 5, null, 1, 2], -- sort null first with descending order\n                  (x, y) -> CASE WHEN x IS NULL THEN -1\n                                 WHEN y IS NULL THEN 1\n                                 WHEN x < y THEN 1\n                                 WHEN x = y THEN 0\n                                 ELSE -1 END); -- [null, null, 5, 3, 2, 2, 1]\nSELECT array_sort(ARRAY [3, 2, null, 5, null, 1, 2], -- sort null last with descending order\n                  (x, y) -> CASE WHEN x IS NULL THEN 1\n                                 WHEN y IS NULL THEN -1\n                                 WHEN x < y THEN 1\n                                 WHEN x = y THEN 0\n                                 ELSE -1 END); -- [5, 3, 2, 2, 1, null, null]\nSELECT array_sort(ARRAY ['a', 'abcd', 'abc'], -- sort by string length\n                  (x, y) -> IF(length(x) < length(y),\n                               -1,\n                               IF(length(x) = length(y), 0, 1))); -- ['a', 'abc', 'abcd']\nSELECT array_sort(ARRAY [ARRAY[2, 3, 1], ARRAY[4, 2, 1, 4], ARRAY[1, 2]], -- sort by array length\n                  (x, y) -> IF(cardinality(x) < cardinality(y),\n                               -1,\n```\n\n----------------------------------------\n\nTITLE: Importing LDAP Server Certificate using Keytool\nDESCRIPTION: Command to import the LDAP server's TLS certificate into Java's default truststore on the Presto coordinator\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/security/ldap.rst#2025-04-10_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ keytool -import -keystore <JAVA_HOME>/jre/lib/security/cacerts -trustcacerts -alias ldap_server -file ldap_server.crt\n```\n\n----------------------------------------\n\nTITLE: Concatenating Binary Data with || Operator in SQL\nDESCRIPTION: The || operator performs concatenation of binary data in PrestoDB. This is the standard SQL concatenation operator for combining binary values.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/binary.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n||\n```\n\n----------------------------------------\n\nTITLE: SQL ORDER BY in Window Specifications\nDESCRIPTION: Fix for an error when ORDER BY clause in window specification refers to the same column multiple times.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.142.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nORDER BY\n```\n\n----------------------------------------\n\nTITLE: Optimizing Cross Join with Array Contains in Presto SQL\nDESCRIPTION: Sets the rewrite_cross_join_array_contains_to_inner_join session property to enable optimization for cross join with array contains filter.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.282.rst#2025-04-10_snippet_5\n\nLANGUAGE: SQL\nCODE:\n```\nSET SESSION rewrite_cross_join_array_contains_to_inner_join = true;\n```\n\n----------------------------------------\n\nTITLE: Creating Iceberg Table with Truncate Partition Transform\nDESCRIPTION: Example of creating an Iceberg table partitioned using the truncate transform, which partitions by the first letter of the team field.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/iceberg.rst.txt#2025-04-10_snippet_37\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE players (\n    id int,\n    name varchar,\n    team varchar\n)\nWITH (\n    format = 'ORC',\n    partitioning = ARRAY['truncate(team, 1)']\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Task Concurrency Setting\nDESCRIPTION: Configuration parameter to control task concurrency in Presto, which impacts aggregation processing.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.151.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: config\nCODE:\n```\ntask.concurrency=1\n```\n\n----------------------------------------\n\nTITLE: SQL Function Reference - New QDigest Function\nDESCRIPTION: New function for scaling quantile digest (qdigest) data structures to a new weight\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.235.rst#2025-04-10_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nscale_qdigest()\n```\n\n----------------------------------------\n\nTITLE: Configuring TPCDS Connector Properties\nDESCRIPTION: Basic configuration required in etc/catalog/tpcds.properties file to enable the TPCDS connector.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/tpcds.rst#2025-04-10_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nconnector.name=tpcds\n```\n\n----------------------------------------\n\nTITLE: Inserting Specific Data into Memory Connector Table in Presto\nDESCRIPTION: This SQL command inserts a specific row of data into the 'my_table' table in the Memory connector.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/memory.rst.txt#2025-04-10_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO memory.default1.my_table (id, name, age) VALUES (1, 'John Doe', 30);\n```\n\n----------------------------------------\n\nTITLE: Finish Update Operation Method Signature\nDESCRIPTION: Method signature for completing an update operation with collected fragment information.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/develop/delete-and-update.rst.txt#2025-04-10_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nvoid finishUpdate(\n    ConnectorSession session,\n    ConnectorTableHandle tableHandle,\n    Collection<Slice> fragments)\n```\n\n----------------------------------------\n\nTITLE: Unregistering Iceberg Table from Presto Catalog\nDESCRIPTION: Shows how to use the unregister_table system procedure to remove an Iceberg table from the Presto catalog.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/iceberg.rst.txt#2025-04-10_snippet_25\n\nLANGUAGE: sql\nCODE:\n```\nCALL iceberg.system.unregister_table('schema_name', 'table_name')\n```\n\nLANGUAGE: sql\nCODE:\n```\nCALL iceberg.system.unregister_table(table_name => 'table_name', schema => 'schema_name')\n```\n\n----------------------------------------\n\nTITLE: Using Flatten Function in Presto SQL\nDESCRIPTION: The flatten function flattens nested arrays into a single array. This is a new function added in this release.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.147.rst#2025-04-10_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nflatten\n```\n\n----------------------------------------\n\nTITLE: Configuring CTE Materialization Strategy in PrestoDB\nDESCRIPTION: Session property configuration for controlling CTE materialization strategy. Supports values: ALL, NONE, HEURISTIC, and HEURISTIC_COMPLEX_QUERIES_ONLY.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/admin/cte-materialization.rst#2025-04-10_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\ncte-materialization-strategy=NONE\n```\n\n----------------------------------------\n\nTITLE: Dropping a Table in Presto SQL\nDESCRIPTION: Demonstrates how to drop a table named 'orders_by_date' using the DROP TABLE command in Presto SQL.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/sql/drop-table.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nDROP TABLE orders_by_date\n```\n\n----------------------------------------\n\nTITLE: Querying Hidden $data_sequence_number Metadata Column in Iceberg Tables with Presto\nDESCRIPTION: Shows how to query the $data_sequence_number hidden metadata column, which provides the Iceberg data sequence number for each row.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/iceberg.rst.txt#2025-04-10_snippet_13\n\nLANGUAGE: sql\nCODE:\n```\nSELECT \"$data_sequence_number\", regionkey FROM \"ctas_nation\";\n```\n\nLANGUAGE: text\nCODE:\n```\n         $data_sequence_number     |  regionkey\n ----------------------------------+------------\n                  2                    | 3\n```\n\n----------------------------------------\n\nTITLE: Calculating Set Digest Cardinality in SQL\nDESCRIPTION: This example demonstrates how to calculate the cardinality of a set digest using the cardinality function in Presto.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/setdigest.rst.txt#2025-04-10_snippet_5\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT cardinality(make_set_digest(value))\nFROM (VALUES 1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5) T(value);\n```\n\n----------------------------------------\n\nTITLE: Configuring Alluxio Data Cache for Presto Iceberg\nDESCRIPTION: This configuration snippet shows how to set up Alluxio data caching for the Presto Iceberg connector. It enables caching, sets the cache directory, type, and maximum size, and configures node selection strategy.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/iceberg.rst#2025-04-10_snippet_8\n\nLANGUAGE: properties\nCODE:\n```\ncache.enabled=true\ncache.base-directory=file:///mnt/flash/data\ncache.type=ALLUXIO\ncache.alluxio.max-cache-size=1600GB\nhive.node-selection-strategy=SOFT_AFFINITY\n```\n\n----------------------------------------\n\nTITLE: Querying Iceberg Tables Using Timestamp in PrestoDB\nDESCRIPTION: Demonstrates how to query an Iceberg table for a specific point in time using the FOR TIMESTAMP BEFORE TIMESTAMP clause. The query returns records that were created before the specified timestamp.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/iceberg.rst.txt#2025-04-10_snippet_60\n\nLANGUAGE: sql\nCODE:\n```\n// In following query, timestamp string is matching with second inserted record.\n// BEFORE clause returns first record which is less than timestamp of the second record.\nSELECT * FROM ctas_nation FOR TIMESTAMP BEFORE TIMESTAMP '2023-10-17 13:29:46.822 America/Los_Angeles';\nSELECT * FROM ctas_nation FOR TIMESTAMP BEFORE TIMESTAMP '2023-10-17 13:29:46.822';\n```\n\n----------------------------------------\n\nTITLE: Creating Multimap from Entries in SQL\nDESCRIPTION: The multimap_from_entries function creates a multimap from an array of entries. A multimap allows multiple values to be associated with the same key, storing them in an array.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/map.rst#2025-04-10_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nSELECT multimap_from_entries(ARRAY[(1, 'x'), (2, 'y'), (1, 'z')]); -- {1 -> ['x', 'z'], 2 -> ['y']}\n```\n\n----------------------------------------\n\nTITLE: Configuring Glue Catalog for Iceberg in Presto\nDESCRIPTION: Configuration properties required to set up an Iceberg connector using AWS Glue as the catalog. This specifies the connector name, metastore type as Glue, and catalog type as Hive.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/iceberg.rst#2025-04-10_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\nconnector.name=iceberg\nhive.metastore=glue\niceberg.catalog.type=hive\n```\n\n----------------------------------------\n\nTITLE: Configuring File and Stripe Footer Cache for Iceberg in Presto\nDESCRIPTION: This configuration snippet demonstrates how to enable and configure file and stripe footer caching for the Iceberg connector in Presto. It includes settings for ORC and Parquet file formats, specifying cache sizes, TTL, and other related properties.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/iceberg.rst.txt#2025-04-10_snippet_9\n\nLANGUAGE: properties\nCODE:\n```\n# scheduling\nhive.node-selection-strategy=SOFT_AFFINITY\n\n# orc\niceberg.orc.file-tail-cache-enabled=true\niceberg.orc.file-tail-cache-size=100MB\niceberg.orc.file-tail-cache-ttl-since-last-access=6h\niceberg.orc.stripe-metadata-cache-enabled=true\niceberg.orc.stripe-footer-cache-size=100MB\niceberg.orc.stripe-footer-cache-ttl-since-last-access=6h\niceberg.orc.stripe-stream-cache-size=300MB\niceberg.orc.stripe-stream-cache-ttl-since-last-access=6h\n\n# parquet\niceberg.parquet.metadata-cache-enabled=true\niceberg.parquet.metadata-cache-size=100MB\n```\n\n----------------------------------------\n\nTITLE: Base64 Encoding and Decoding in Presto SQL\nDESCRIPTION: Functions for encoding binary data to base64 strings and decoding base64 strings to binary data.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/binary.rst#2025-04-10_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\nto_base64(binary) -> varchar\n```\n\nLANGUAGE: SQL\nCODE:\n```\nfrom_base64(string) -> varbinary\n```\n\n----------------------------------------\n\nTITLE: Querying MongoDB Collection with ObjectId in Presto\nDESCRIPTION: Example of querying a MongoDB collection using ObjectId as a filter condition.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/mongodb.rst.txt#2025-04-10_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nSELECT name\nFROM users\nWHERE _id = ObjectId('66fe8898c4ce1100c811cbe0');\n```\n\n----------------------------------------\n\nTITLE: Forming Presto JDBC Connection URLs\nDESCRIPTION: Examples of valid JDBC URL formats for connecting to Presto databases. These URLs can specify the host, port, catalog, and schema.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/installation/jdbc.rst#2025-04-10_snippet_1\n\nLANGUAGE: none\nCODE:\n```\njdbc:presto://host:port\njdbc:presto://host:port/catalog\njdbc:presto://host:port/catalog/schema\n```\n\n----------------------------------------\n\nTITLE: Using regexp_split for String Splitting in SQL\nDESCRIPTION: Splits a string using a regular expression pattern as the delimiter and returns an array of the resulting substrings. Trailing empty strings are preserved in the result.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/regexp.rst.txt#2025-04-10_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nSELECT regexp_split('1a 2b 14m', '\\s*[a-z]+\\s*'); -- [1, 2, 14, ]\n```\n\n----------------------------------------\n\nTITLE: Using Bing Tile Functions in Presto\nDESCRIPTION: Reference to the bing_tile_at and bing_tile_polygon functions which had a bug fix for points close to tile edges in this release.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.189.rst#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nbing_tile_at\n```\n\nLANGUAGE: sql\nCODE:\n```\nbing_tile_polygon\n```\n\n----------------------------------------\n\nTITLE: Creating a New Iceberg Table from Existing Table\nDESCRIPTION: Example of creating a new Iceberg table using CREATE TABLE AS SELECT (CTAS) syntax. This copies all data from an existing table into a new one.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/iceberg.rst.txt#2025-04-10_snippet_42\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE iceberg.web.page_views_new AS SELECT * FROM iceberg.web.page_views\n```\n\n----------------------------------------\n\nTITLE: Configuring MongoDB Connector in Presto (Properties)\nDESCRIPTION: Basic configuration for the MongoDB connector in Presto. This snippet shows the essential properties needed in the catalog file to connect to a MongoDB cluster.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/mongodb.rst#2025-04-10_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nconnector.name=mongodb\nmongodb.seeds=host1,host:port\n```\n\n----------------------------------------\n\nTITLE: MongoDB ALTER TABLE Operations in Presto\nDESCRIPTION: Examples of supported ALTER TABLE operations including adding/dropping columns and renaming tables.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/mongodb.rst.txt#2025-04-10_snippet_14\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE mongodb.admin.sample_table ADD COLUMN new_col INT;\nALTER TABLE mongodb.admin.sample_table DROP COLUMN new_col;\nALTER TABLE mongodb.admin.sample_table RENAME COLUMN is_active TO is_enabled;\nALTER TABLE mongodb.admin.sample_table RENAME TO renamed_table;\n```\n\n----------------------------------------\n\nTITLE: CREATE SCHEMA Statement Syntax in Presto\nDESCRIPTION: The syntax definition for the CREATE SCHEMA statement in Presto. It shows the basic structure with optional IF NOT EXISTS clause and WITH clause for setting schema properties.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/sql/create-schema.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: none\nCODE:\n```\nCREATE SCHEMA [ IF NOT EXISTS ] schema_name\n[ WITH ( property_name = expression [, ...] ) ]\n```\n\n----------------------------------------\n\nTITLE: GROUPING Operation Example in Presto SQL\nDESCRIPTION: Demonstrates the GROUPING operation to identify which columns are present in groupings using bit sets.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/select.rst#2025-04-10_snippet_15\n\nLANGUAGE: sql\nCODE:\n```\nSELECT origin_state, origin_zip, destination_state, sum(package_weight),\n       grouping(origin_state, origin_zip, destination_state)\nFROM shipping\nGROUP BY GROUPING SETS (\n        (origin_state),\n        (origin_state, origin_zip),\n        (destination_state));\n```\n\n----------------------------------------\n\nTITLE: Starting Presto Server in Docker\nDESCRIPTION: Command to start the Presto server in a Docker container. It maps port 8080, mounts configuration files, and names the container 'presto'.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/installation/deploy-docker.rst#2025-04-10_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -p 8080:8080 -it -v ./config.properties:/opt/presto-server/etc/config.properties -v ./jvm.config:/opt/presto-server/etc/jvm.config --name presto prestodb/presto:latest\n```\n\n----------------------------------------\n\nTITLE: Expanding Geometry Envelopes in Presto SQL\nDESCRIPTION: Use the expand_envelope() function to return a geometry's envelope expanded by a specified distance.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.230.rst.txt#2025-04-10_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT expand_envelope(geometry, distance)\n```\n\n----------------------------------------\n\nTITLE: Illustrating OR Operator with NULL Values in SQL\nDESCRIPTION: These SQL queries demonstrate the behavior of the OR operator when one or both operands are NULL. The result can be NULL or TRUE depending on the other operand.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/logical.rst#2025-04-10_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT CAST(null AS boolean) OR CAST(null AS boolean); -- null\n\nSELECT CAST(null AS boolean) OR false; -- null\n\nSELECT CAST(null AS boolean) OR true; -- true\n```\n\n----------------------------------------\n\nTITLE: Configuring JMX Connector with Escaped Commas in MBean Names\nDESCRIPTION: Configuration example showing how to properly escape commas in MBean names when configuring the JMX connector in Presto.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/jmx.rst#2025-04-10_snippet_2\n\nLANGUAGE: none\nCODE:\n```\nconnector.name=jmx\njmx.dump-tables=com.facebook.presto.memory:type=memorypool\\\\,name=general,\\\n   com.facebook.presto.memory:type=memorypool\\\\,name=system,\\\n   com.facebook.presto.memory:type=memorypool\\\\,name=reserved\n```\n\n----------------------------------------\n\nTITLE: LIKE Pattern Matching Examples\nDESCRIPTION: Demonstrates LIKE operator usage with wildcards for pattern matching in strings.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/comparison.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM (VALUES ('abc'), ('bcd'), ('cde')) AS t (name)\nWHERE name LIKE '%b%'\n\nSELECT * FROM (VALUES ('abc'), ('bcd'), ('cde')) AS t (name)\nWHERE name LIKE '_b%'\n\nSELECT * FROM (VALUES ('a_c'), ('_cd'), ('cde')) AS t (name)\nWHERE name LIKE '%#_%' ESCAPE '#'\n```\n\n----------------------------------------\n\nTITLE: SET SESSION Command Examples\nDESCRIPTION: Demonstrates practical examples of using the SET SESSION command, showing how to set both global session properties and catalog-specific properties.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/set-session.rst#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSET SESSION optimize_hash_generation = true;\nSET SESSION hive.optimized_reader_enabled = true;\n```\n\n----------------------------------------\n\nTITLE: Implementing File-Based Resource Group Management in PrestoDB\nDESCRIPTION: JSON configuration example for file-based resource group manager in PrestoDB, demonstrating how to define resource groups with parent-child relationships, concurrency limits, and various scheduling policies.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/admin/resource-groups.rst#2025-04-10_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Using SHOW CATALOGS Command in Presto SQL\nDESCRIPTION: Shows the syntax for the SHOW CATALOGS command in Presto SQL, including the optional LIKE pattern clause for filtering catalog names. This command is used to list all available catalogs in a Presto database environment.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/show-catalogs.rst#2025-04-10_snippet_0\n\nLANGUAGE: none\nCODE:\n```\nSHOW CATALOGS [ LIKE pattern ]\n```\n\n----------------------------------------\n\nTITLE: Using regexp_split for String Splitting in SQL\nDESCRIPTION: Splits a string using a regular expression pattern as the delimiter and returns an array of the resulting substrings. Trailing empty strings are preserved in the result.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/regexp.rst.txt#2025-04-10_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nSELECT regexp_split('1a 2b 14m', '\\s*[a-z]+\\s*'); -- [1, 2, 14, ]\n```\n\n----------------------------------------\n\nTITLE: Generating Subnets from IP Prefix in Presto SQL\nDESCRIPTION: Demonstrates the use of ip_prefix_subnets() function to generate subnets of a given size from an IP prefix.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/ip.rst#2025-04-10_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nSELECT IP_PREFIX_SUBNETS(IPPREFIX '192.168.1.0/24', 25); -- [{192.168.1.0/25}, {192.168.1.128/25}]\nSELECT IP_PREFIX_SUBNETS(IPPREFIX '2a03:2880:c000::/34', 36); -- [{2a03:2880:c000::/36}, {2a03:2880:d000::/36}, {2a03:2880:e000::/36}, {2a03:2880:f000::/36}]\n```\n\n----------------------------------------\n\nTITLE: Configuring Initial Splits Per Node in Presto\nDESCRIPTION: Sets the initial number of splits per node for dynamic split concurrency adjustment. This configuration can be set at the system level or as a session property.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.139.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\ntask.initial-splits-per-node\n```\n\nLANGUAGE: sql\nCODE:\n```\ninitial_splits_per_node\n```\n\n----------------------------------------\n\nTITLE: Using element_at Function with Out-of-Range Indices\nDESCRIPTION: Demonstrates the updated behavior of the element_at function, which now returns NULL for out-of-range indices instead of failing. This change improves query robustness when dealing with collections of unknown size.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.158.rst#2025-04-10_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT element_at(array[1, 2, 3], 10);\n```\n\n----------------------------------------\n\nTITLE: Array Chunking Examples in Presto SQL\nDESCRIPTION: Shows array_split_into_chunks function usage which splits arrays into smaller chunks of specified size.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/array.rst.txt#2025-04-10_snippet_13\n\nLANGUAGE: sql\nCODE:\n```\nSELECT array_split_into_chunks(ARRAY [1, 2, 3, 4], 3);\nSELECT array_split_into_chunks(null, null);\nSELECT array_split_into_chunks(array[1, 2, 3, cast(null as int)], 2]);\n```\n\n----------------------------------------\n\nTITLE: bcrypt Password Format Example in Presto\nDESCRIPTION: This snippet demonstrates the format of a bcrypt hashed password in the Presto password file. It shows a username 'test' with its corresponding bcrypt hash starting with '$2y$' and using a minimum cost of 8.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/security/password-file.rst#2025-04-10_snippet_2\n\nLANGUAGE: none\nCODE:\n```\ntest:$2y$10$BqTb8hScP5DfcpmHo5PeyugxHz5Ky/qf3wrpD7SNm8sWuA3VlGqsa\n```\n\n----------------------------------------\n\nTITLE: Implementing Raw Block Input Function in Presto\nDESCRIPTION: Example of a scalar function using @BlockPosition and @BlockIndex to handle raw block inputs. This allows the function to accept any type, particularly useful for parameterized implementations.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/develop/functions.rst#2025-04-10_snippet_9\n\nLANGUAGE: java\nCODE:\n```\n@ScalarFunction(\"example\")\npublic static Block exampleFunction(\n        @BlockPosition @NullablePosition @SqlType(\"array(int)\") Block block,\n        @BlockIndex int index) { /* ...implementation */ }\n```\n\n----------------------------------------\n\nTITLE: Experimental Filter Configuration\nDESCRIPTION: Configuration property for minimum output page size in filter and project operations, with default value increased to 500kB.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.202.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\nexperimental.filter-and-project-min-output-page-size\n```\n\n----------------------------------------\n\nTITLE: Configuring Internal Communication Keystore\nDESCRIPTION: Settings to configure keystore for internal HTTPS communication.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/security/internal-communication.rst#2025-04-10_snippet_7\n\nLANGUAGE: none\nCODE:\n```\ninternal-communication.https.keystore.path=<keystore path>\ninternal-communication.https.keystore.key=<keystore password>\n```\n\n----------------------------------------\n\nTITLE: Querying Differential Entropy with Weighted Reservoir Sampling\nDESCRIPTION: Example of calculating differential entropy using weighted reservoir sampling with 1,000,000 samples and custom weights.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/aggregate.rst#2025-04-10_snippet_9\n\nLANGUAGE: none\nCODE:\n```\nSELECT\n    differential_entropy(1000000, x, weight)\nFROM\n    data\n```\n\n----------------------------------------\n\nTITLE: Describing Accumulo Table Structure in Presto SQL\nDESCRIPTION: SQL statement to describe the structure of an Accumulo table in Presto. This is useful for retrieving column mappings and other metadata about the table.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/accumulo.rst#2025-04-10_snippet_27\n\nLANGUAGE: sql\nCODE:\n```\nDESCRIBE foo.bar;\n```\n\n----------------------------------------\n\nTITLE: Formatting Timestamp as String in Presto SQL\nDESCRIPTION: The to_char function formats a timestamp as a string using the specified format string. It uses Teradata-compatible format specifiers.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/teradata.rst#2025-04-10_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\nto_char(timestamp, format) -> varchar\n```\n\n----------------------------------------\n\nTITLE: Using ST_Centroid with Geometry in Presto\nDESCRIPTION: Returns the point value that is the mathematical centroid of a geometry. This function calculates the centroid point for any input geometry type.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/geospatial.rst#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nST_Centroid(Geometry) -> Point\n```\n\n----------------------------------------\n\nTITLE: Configuring Hive External Tables in Presto SQL\nDESCRIPTION: Sets the 'EXTERNAL' table property to 'TRUE' when creating external tables in Hive through Presto. This ensures proper recognition by the Hive metastore. Existing tables may need modification to include this property.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.160.rst#2025-04-10_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nALTER TABLE external_table_name SET TBLPROPERTIES ('EXTERNAL'='TRUE');\n```\n\n----------------------------------------\n\nTITLE: Using bitwise_logical_shift_right Function in Presto SQL\nDESCRIPTION: The bitwise_logical_shift_right function performs a logical right shift operation on a value treated as a bits-bit integer. It takes three parameters: the value to shift, the number of positions to shift, and the bit width to use for the operation.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/bitwise.rst#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT bitwise_logical_shift_right(7, 2, 4); -- 1\nSELECT bitwise_logical_shift_right(-8, 2, 5); -- 6\n```\n\n----------------------------------------\n\nTITLE: Dropping an Accumulo Table\nDESCRIPTION: SQL command to remove a table from Accumulo. This drops both the table metadata and the actual data in Accumulo unless it's defined as an external table.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/accumulo.rst#2025-04-10_snippet_12\n\nLANGUAGE: sql\nCODE:\n```\nDROP TABLE myschema.scientists;\n```\n\n----------------------------------------\n\nTITLE: Example EXPLAIN Output Showing Cost Information in PrestoDB\nDESCRIPTION: This snippet demonstrates the output of an EXPLAIN statement for a simple query, showing cost information in the format {rows, cpu, memory, network} for each node in the query plan. It illustrates how cost metrics are displayed for different operators, including combined ScanFilterProject operators.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/optimizer/cost-in-explain.rst#2025-04-10_snippet_0\n\nLANGUAGE: none\nCODE:\n```\npresto:default> EXPLAIN SELECT comment FROM tpch.sf1.nation WHERE nationkey > 3;\n\n- Output[comment] => [[comment]]\n        Estimates: {rows: 22 (1.69kB), cpu: 6148.25, memory: 0.00, network: 1734.25}\n    - RemoteExchange[GATHER] => [[comment]]\n            Estimates: {rows: 22 (1.69kB), cpu: 6148.25, memory: 0.00, network: 1734.25}\n        - ScanFilterProject[table = tpch:nation:sf1.0, filterPredicate = (\"nationkey\" > BIGINT '3')] => [[comment]]\n                Estimates: {rows: 25 (1.94kB), cpu: 2207.00, memory: 0.00, network: 0.00}/{rows: 22 (1.69kB), cpu: 4414.00, memory: 0.00, network: 0.00}/{rows: 22 (1.69kB), cpu: 6148.25, memory: 0.00, network: 0.00}\n                nationkey := tpch:nationkey\n                comment := tpch:comment\n```\n\n----------------------------------------\n\nTITLE: New Scalar Function in Presto SQL 0.73\nDESCRIPTION: Addition of json_size() function for determining the size of JSON arrays or objects.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.73.rst#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\njson_size()\n```\n\n----------------------------------------\n\nTITLE: Setting Partial Aggregation Preference in Presto SQL\nDESCRIPTION: Defines a session property to allow users to disable partial aggregations for queries that do not benefit from this optimization. This can be used to fine-tune query performance.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.201.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nprefer-partial-aggregation\n```\n\n----------------------------------------\n\nTITLE: SQL INSERT statement with column specification in Presto\nDESCRIPTION: Reference to the INSERT SQL command which now supports explicitly specifying column names in the query.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.126.rst#2025-04-10_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\n/sql/insert\n```\n\n----------------------------------------\n\nTITLE: Defining TDigest Type in Presto Documentation\nDESCRIPTION: Documentation for the TDigest type, which is similar to QDigest but uses a different algorithm to represent approximate distribution of numbers, with better performance but limited to DOUBLE type.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/language/types.rst#2025-04-10_snippet_8\n\nLANGUAGE: rst\nCODE:\n```\n``TDigest``\n^^^^^^^^^^^\n```\n\n----------------------------------------\n\nTITLE: Query Result with ObjectId\nDESCRIPTION: Example output showing ObjectId representation in query results.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/mongodb.rst.txt#2025-04-10_snippet_12\n\nLANGUAGE: none\nCODE:\n```\n                 _id                 | orderkey | orderstatus | totalprice | orderdate\n------------------------------------+----------+-------------+------------+------------\n 55 b1 51 63 38 64 d6 43 8c 61 a9 ce |        1 | bad         |       50.0 | 2015-07-23\n 55 b1 51 67 38 64 d6 43 8c 61 a9 cf |        2 | good        |      100.0 | 2015-07-23\n(2 rows)\n```\n\n----------------------------------------\n\nTITLE: Using ST_PointN in Presto\nDESCRIPTION: Returns the vertex of a linestring at a given index (indices start at 1). Returns NULL if the index is out of bounds. Use ST_NumPoints to find the total number of elements.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/geospatial.rst#2025-04-10_snippet_19\n\nLANGUAGE: sql\nCODE:\n```\nST_PointN(LineString, index) -> Point\n```\n\n----------------------------------------\n\nTITLE: Creating Resource Groups in Presto SQL\nDESCRIPTION: This snippet demonstrates how to create various resource groups with different configurations. It includes creating groups with parent-child relationships, setting memory limits, concurrency limits, and other parameters.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/admin/resource-groups.rst#2025-04-10_snippet_5\n\nLANGUAGE: SQL\nCODE:\n```\nINSERT INTO resource_groups (name, soft_memory_limit, hard_concurrency_limit, max_queued, scheduling_weight, scheduling_policy, environment, parent) VALUES ('other', '10%', 2, 1, 10, 'weighted_fair', 'test_environment', 3);\n\n-- get ID of 'other' group\nSELECT resource_group_id FROM resource_groups WHERE name = 'other';  -- 4\n-- create '${USER}' group with 'other' as parent.\nINSERT INTO resource_groups (name, soft_memory_limit, hard_concurrency_limit, max_queued, environment, parent) VALUES ('${USER}', '10%', 1, 100, 'test_environment', 4);\n\n-- create 'bi-${toolname}' group with 'adhoc' as parent\nINSERT INTO resource_groups (name, soft_memory_limit, hard_concurrency_limit, max_queued, scheduling_weight, scheduling_policy, environment, parent) VALUES ('bi-${toolname}', '10%', 10, 100, 10, 'weighted_fair', 'test_environment', 3);\n\n-- create 'pipeline' group with 'global' as parent\nINSERT INTO resource_groups (name, soft_memory_limit, hard_concurrency_limit, max_queued, scheduling_weight, jmx_export, environment, parent) VALUES ('pipeline', '80%', 45, 100, 1, true, 'test_environment', 1);\n\n-- get ID of 'pipeline' group\nSELECT resource_group_id FROM resource_groups WHERE name = 'pipeline'; -- 7\n-- create 'pipeline_${USER}' group with 'pipeline' as parent\nINSERT INTO resource_groups (name, soft_memory_limit, hard_concurrency_limit, max_queued,  environment, parent) VALUES ('pipeline_${USER}', '50%', 5, 100, 'test_environment', 7);\n\n-- create a root group 'admin' with NULL parent\nINSERT INTO resource_groups (name, soft_memory_limit, hard_concurrency_limit, max_queued, scheduling_policy, environment, jmx_export) VALUES ('admin', '100%', 50, 100, 'query_priority', 'test_environment', true);\n```\n\n----------------------------------------\n\nTITLE: Executing Partitioned Top-N Query with Row Number in Presto SQL\nDESCRIPTION: Demonstrates a memory-efficient way to select the maximum or minimum N rows from each partition using row_number(). This query selects the five oldest rows based on 'orderdate' from the 'orders' table for each 'orderstatus'.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.75.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT * FROM (\n    SELECT row_number() OVER (PARTITION BY orderstatus ORDER BY orderdate) AS rn,\n        custkey, orderdate, orderstatus\n    FROM orders\n) WHERE rn <= 5;\n```\n\n----------------------------------------\n\nTITLE: Creating a Users Table in Kudu\nDESCRIPTION: SQL command to create a users table in Kudu with primary key and partitioning specifications.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/kudu.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE kudu.default.users (\n  user_id int WITH (primary_key = true),\n  first_name varchar,\n  last_name varchar\n) WITH (\n  partition_by_hash_columns = ARRAY['user_id'],\n  partition_by_hash_buckets = 2\n);\n```\n\n----------------------------------------\n\nTITLE: Using try_cast() Function in Presto\nDESCRIPTION: Shows the try_cast() function which attempts to cast a value to a specified type but returns null if the conversion fails.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/conversion.rst#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\ntry_cast(value AS type) -> type\n```\n\n----------------------------------------\n\nTITLE: Querying SQL Server Table via Presto\nDESCRIPTION: This SQL query shows how to select all data from a specific table in the SQL Server catalog using Presto.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/sqlserver.rst#2025-04-10_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM sqlserver.web.clicks;\n```\n\n----------------------------------------\n\nTITLE: Inserting Data into Kudu Table\nDESCRIPTION: SQL command to insert sample data into a Kudu table.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/kudu.rst.txt#2025-04-10_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO kudu.default.users VALUES (1, 'Donald', 'Duck'), (2, 'Mickey', 'Mouse');\n```\n\n----------------------------------------\n\nTITLE: Aggregating Hudi Table Data by Date\nDESCRIPTION: SQL query example showing how to count records in a Hudi table grouped by date, demonstrating simple aggregation functionality.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/hudi.rst.txt#2025-04-10_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nselect dt, count(*) from stock_ticks_cow group by dt;\n```\n\n----------------------------------------\n\nTITLE: Setting Current Snapshot for an Iceberg Table by Snapshot ID in Presto\nDESCRIPTION: This procedure sets the current snapshot ID for an Iceberg table using a specific snapshot ID. Requires schema name, table name, and the target snapshot ID.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/iceberg.rst#2025-04-10_snippet_27\n\nLANGUAGE: sql\nCODE:\n```\nCALL iceberg.system.set_current_snapshot('schema_name', 'table_name', 10000);\n```\n\n----------------------------------------\n\nTITLE: DROP FUNCTION Syntax in Presto SQL\nDESCRIPTION: The syntax definition for the DROP FUNCTION command in Presto SQL. It shows the command structure including optional parameters for temporary functions, IF EXISTS clause, and function signature specification.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/sql/drop-function.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nDROP [TEMPORARY] FUNCTION [ IF EXISTS ] qualified_function_name [ ( parameter_type[, ...] ) ]\n```\n\n----------------------------------------\n\nTITLE: Creating a Kudu Table with Multi-level Hash Partitioning in Presto\nDESCRIPTION: SQL example showing how to create a Kudu table with two separate hash partition groups using both the first and second hash partitioning properties, resulting in a multi-level partitioning scheme.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/kudu.rst.txt#2025-04-10_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE mytable (\n  col1 varchar WITH (primary_key=true),\n  col2 varchar WITH (primary_key=true),\n  ...\n) WITH (\n  partition_by_hash_columns = ARRAY['col1'],\n  partition_by_hash_buckets = 2,\n  partition_by_second_hash_columns = ARRAY['col2'],\n  partition_by_second_hash_buckets = 3\n)\n```\n\n----------------------------------------\n\nTITLE: Revoking SELECT Privilege with GRANT OPTION in SQL\nDESCRIPTION: This example shows how to revoke the SELECT privilege and the ability to grant SELECT privilege on the 'nation' table from the PUBLIC role.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/sql/revoke.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nREVOKE GRANT OPTION FOR SELECT ON nation FROM ROLE PUBLIC;\n```\n\n----------------------------------------\n\nTITLE: SQL Function Reference in New Feature\nDESCRIPTION: SQL function reference showing the array_intersect function mentioned in new feature addition.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.247.rst#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\narray_intersect\n```\n\n----------------------------------------\n\nTITLE: IP Prefix Subnet Generation\nDESCRIPTION: Generates subnets of a specified prefix length from a given IP prefix range.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/ip.rst.txt#2025-04-10_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nSELECT IP_PREFIX_SUBNETS(IPPREFIX '192.168.1.0/24', 25);\nSELECT IP_PREFIX_SUBNETS(IPPREFIX '2a03:2880:c000::/34', 36);\n```\n\n----------------------------------------\n\nTITLE: Example EXPLAIN ANALYZE Output for a SELECT Query in Presto\nDESCRIPTION: An example of EXPLAIN ANALYZE output for a SELECT query with COUNT and GROUP BY clauses. It shows the query plan with CPU time, input/output rows, and various statistics for each operation.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/explain-analyze.rst#2025-04-10_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\npresto:sf1> EXPLAIN ANALYZE SELECT count(*), clerk FROM orders WHERE orderdate > date '1995-01-01' GROUP BY clerk;\n\n                                              Query Plan\n    -----------------------------------------------------------------------------------------------\n    Fragment 1 [HASH]\n        Cost: CPU 88.57ms, Input: 4000 rows (148.44kB), Output: 1000 rows (28.32kB)\n        Output layout: [count, clerk]\n        Output partitioning: SINGLE []\n        - Project[] => [count:bigint, clerk:varchar(15)]\n                Cost: 26.24%, Input: 1000 rows (37.11kB), Output: 1000 rows (28.32kB), Filtered: 0.00%\n                Input avg.: 62.50 lines, Input std.dev.: 14.77%\n            - Aggregate(FINAL)[clerk][$hashvalue] => [clerk:varchar(15), $hashvalue:bigint, count:bigint]\n                    Cost: 16.83%, Output: 1000 rows (37.11kB)\n                    Input avg.: 250.00 lines, Input std.dev.: 14.77%\n                    count := \"count\"(\"count_8\")\n                - LocalExchange[HASH][$hashvalue] (\"clerk\") => clerk:varchar(15), count_8:bigint, $hashvalue:bigint\n                        Cost: 47.28%, Output: 4000 rows (148.44kB)\n                        Input avg.: 4000.00 lines, Input std.dev.: 0.00%\n                    - RemoteSource[2] => [clerk:varchar(15), count_8:bigint, $hashvalue_9:bigint]\n                            Cost: 9.65%, Output: 4000 rows (148.44kB)\n                            Input avg.: 4000.00 lines, Input std.dev.: 0.00%\n\n    Fragment 2 [tpch:orders:1500000]\n        Cost: CPU 14.00s, Input: 818058 rows (22.62MB), Output: 4000 rows (148.44kB)\n        Output layout: [clerk, count_8, $hashvalue_10]\n        Output partitioning: HASH [clerk][$hashvalue_10]\n        - Aggregate(PARTIAL)[clerk][$hashvalue_10] => [clerk:varchar(15), $hashvalue_10:bigint, count_8:bigint]\n                Cost: 4.47%, Output: 4000 rows (148.44kB)\n                Input avg.: 204514.50 lines, Input std.dev.: 0.05%\n                Collisions avg.: 5701.28 (17569.93% est.), Collisions std.dev.: 1.12%\n                count_8 := \"count\"(*)\n            - ScanFilterProject[table = tpch:tpch:orders:sf1.0, originalConstraint = (\"orderdate\" > \"$literal$date\"(BIGINT '9131')), filterPredicate = (\"orderdate\" > \"$literal$date\"(BIGINT '9131'))] => [cler\n                    Cost: 95.53%, Input: 1500000 rows (0B), Output: 818058 rows (22.62MB), Filtered: 45.46%\n                    Input avg.: 375000.00 lines, Input std.dev.: 0.00%\n                    $hashvalue_10 := \"combine_hash\"(BIGINT '0', COALESCE(\"$operator$hash_code\"(\"clerk\"), 0))\n                    orderdate := tpch:orderdate\n                    clerk := tpch:clerk\n```\n\n----------------------------------------\n\nTITLE: Removing Matches with regexp_replace in Presto SQL\nDESCRIPTION: Illustrates how to use regexp_replace function to remove every instance of a substring matched by a regular expression pattern from a string.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/regexp.rst#2025-04-10_snippet_5\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT regexp_replace('1a 2b 14m', '\\d+[ab] '); -- '14m'\n```\n\n----------------------------------------\n\nTITLE: Rolling Back an Iceberg Table to a Specific Snapshot in Presto\nDESCRIPTION: The rollback_to_snapshot procedure allows reverting an Iceberg table to a specific snapshot ID. This operation requires the schema name, table name, and the target snapshot ID.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/iceberg.rst#2025-04-10_snippet_25\n\nLANGUAGE: sql\nCODE:\n```\nCALL iceberg.system.rollback_to_snapshot('schema_name', 'table_name', snapshot_id);\n```\n\n----------------------------------------\n\nTITLE: Querying Iceberg Table Using Tag Name in PrestoDB\nDESCRIPTION: Demonstrates how to query an Iceberg table by specifying a tag name using the FOR SYSTEM_VERSION AS OF clause. This retrieves data from a specific tagged snapshot.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/iceberg.rst.txt#2025-04-10_snippet_62\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM nation FOR SYSTEM_VERSION AS OF 'testTag';\n```\n\n----------------------------------------\n\nTITLE: Creating Schema Mapping to Lark Spreadsheet in SQL\nDESCRIPTION: SQL command to create a Presto schema that maps to a Lark spreadsheet. The TOKEN parameter should be set to the spreadsheet identifier from the URL.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/larksheets.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nCREATE SCHEMA my_ss WITH (TOKEN = 'shtcnBf5pg4BNSkwV2Ku5xwW9Pf')\n```\n\n----------------------------------------\n\nTITLE: Query to List Available Table Properties in Presto SQL\nDESCRIPTION: SQL query to retrieve all available table properties from the system metadata. This helps users determine which properties can be set when creating tables.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/sql/create-table-as.rst.txt#2025-04-10_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM system.metadata.table_properties\n```\n\n----------------------------------------\n\nTITLE: Named Columns with VALUES in Presto SQL\nDESCRIPTION: Uses VALUES within a subquery and applies column names using table alias 't' with column names 'id' and 'name'.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/sql/values.rst.txt#2025-04-10_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM (\n    VALUES\n        (1, 'a'),\n        (2, 'b'),\n        (3, 'c')\n) AS t (id, name)\n```\n\n----------------------------------------\n\nTITLE: Configuring Keystore for Internal HTTPS Communication in Presto\nDESCRIPTION: Settings to specify the Java keystore file and password for internal HTTPS communication between Presto nodes.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/security/internal-communication.rst.txt#2025-04-10_snippet_7\n\nLANGUAGE: none\nCODE:\n```\ninternal-communication.https.keystore.path=<keystore path>\ninternal-communication.https.keystore.key=<keystore password>\n```\n\n----------------------------------------\n\nTITLE: Enabling Aggregation Push-Through Join Optimization in Presto\nDESCRIPTION: Allows pushing aggregations below outer joins when all columns from the outer side are in the grouping clause. Particularly useful for correlated scalar subqueries.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/admin/properties.rst#2025-04-10_snippet_45\n\nLANGUAGE: properties\nCODE:\n```\noptimizer.push-aggregation-through-join=true\n```\n\n----------------------------------------\n\nTITLE: Comprehensive JSON Parsing Examples in PrestoDB\nDESCRIPTION: Demonstrates detailed examples of json_parse function with various JSON data types including objects, arrays, strings, numbers, and boolean values.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/json.rst.txt#2025-04-10_snippet_14\n\nLANGUAGE: sql\nCODE:\n```\nSELECT json_parse('not_json');\nSELECT json_parse('{\"a\": 1, \"b\": 2}');\nSELECT json_parse('[1, 2, 3]');\nSELECT json_parse('\"abc\"');\nSELECT json_parse('42');\nSELECT json_parse('true');\nSELECT json_parse('null');\n```\n\n----------------------------------------\n\nTITLE: Starting ZooKeeper Server for Kafka in Bash\nDESCRIPTION: Command to start the ZooKeeper server, which is required for Kafka operation. It uses the default configuration file.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/kafka-tutorial.rst#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/zookeeper-server-start.sh config/zookeeper.properties\n```\n\n----------------------------------------\n\nTITLE: Executing Full Text Query in Elasticsearch with PrestoDB\nDESCRIPTION: Example of how to perform a full text query against Elasticsearch using PrestoDB SQL syntax. The query demonstrates combining Presto SQL with Elasticsearch query syntax using the table name pattern.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/elasticsearch.rst#2025-04-10_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM elasticsearch.default.\"tweets: +presto DB^2\"\n```\n\n----------------------------------------\n\nTITLE: Applying Generic Types with BlockPosition in Presto\nDESCRIPTION: Example showing how to create a scalar function that operates over generic types using @TypeParameter and @BlockPosition annotations together. This allows the function to work with arbitrary types.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/develop/functions.rst#2025-04-10_snippet_10\n\nLANGUAGE: java\nCODE:\n```\n@ScalarFunction(\"example\")\n@TypeParameter(\"T\")\npublic static Block exampleFunction(\n        @BlockPosition @SqlType(\"T\") Block block,\n        @BlockIndex int index) { /* ...implementation */ }\n```\n\n----------------------------------------\n\nTITLE: Setting CTE Replication Threshold in PrestoDB\nDESCRIPTION: Integer configuration for minimum number of CTE references required before materialization is triggered when using HEURISTIC strategies.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/admin/cte-materialization.rst#2025-04-10_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\ncte-heuristic-replication-threshold=4\n```\n\n----------------------------------------\n\nTITLE: Querying Tables in Presto with SHOW TABLES\nDESCRIPTION: Reference to the SHOW TABLES command which now has improved error messages when run on a non-existent catalog.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.189.rst#2025-04-10_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSHOW TABLES\n```\n\n----------------------------------------\n\nTITLE: Twitter Feed Configuration Properties\nDESCRIPTION: Properties file configuration for setting up Twitter feed integration with Kafka. Contains access tokens and broker configuration.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/kafka-tutorial.rst#2025-04-10_snippet_13\n\nLANGUAGE: properties\nCODE:\n```\ntwistr.access-token-key=...\ntwistr.access-token-secret=...\ntwistr.consumer-key=...\ntwistr.consumer-secret=...\ntwistr.kafka.brokers=localhost:9092\n```\n\n----------------------------------------\n\nTITLE: Creating a Kudu Table with Hash and Range Partitioning\nDESCRIPTION: Example of creating a Kudu table with two hash partition groups and one range partitioning on a timestamp column with two predefined range partitions.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/kudu.rst#2025-04-10_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE events (\n  rack varchar WITH (primary_key=true),\n  machine varchar WITH (primary_key=true),\n  event_time timestamp WITH (primary_key=true),\n  ...\n) WITH (\n  partition_by_hash_columns = ARRAY['rack'],\n  partition_by_hash_buckets = 2,\n  partition_by_second_hash_columns = ARRAY['machine'],\n  partition_by_second_hash_buckets = 3,\n  partition_by_range_columns = ARRAY['event_time'],\n  range_partitions = '[{\"lower\": null, \"upper\": \"2018-01-01T00:00:00\"}, {\"lower\": \"2018-01-01T00:00:00\", \"upper\": null}]'\n)\n```\n\n----------------------------------------\n\nTITLE: Querying Nation Table with EXPLAIN in Presto SQL\nDESCRIPTION: Example of an EXPLAIN query showing cost estimates for scanning and filtering the nation table. The output demonstrates the format of cost information including rows, CPU, memory, and network metrics for each operation in the execution plan.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/optimizer/cost-in-explain.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nEXPLAIN SELECT comment FROM tpch.sf1.nation WHERE nationkey > 3;\n```\n\nLANGUAGE: text\nCODE:\n```\n- Output[comment] => [[comment]]\n        Estimates: {rows: 22 (1.69kB), cpu: 6148.25, memory: 0.00, network: 1734.25}\n    - RemoteExchange[GATHER] => [[comment]]\n            Estimates: {rows: 22 (1.69kB), cpu: 6148.25, memory: 0.00, network: 1734.25}\n        - ScanFilterProject[table = tpch:nation:sf1.0, filterPredicate = (\"nationkey\" > BIGINT '3')] => [[comment]]\n                Estimates: {rows: 25 (1.94kB), cpu: 2207.00, memory: 0.00, network: 0.00}/{rows: 22 (1.69kB), cpu: 4414.00, memory: 0.00, network: 0.00}/{rows: 22 (1.69kB), cpu: 6148.25, memory: 0.00, network: 0.00}\n                nationkey := tpch:nationkey\n                comment := tpch:comment\n```\n\n----------------------------------------\n\nTITLE: Showing CREATE TABLE SQL for Iceberg Tables in Presto\nDESCRIPTION: Demonstrates using SHOW CREATE TABLE to view the SQL statement that would create the specified table, including format, partitioning, and other table properties.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/iceberg.rst#2025-04-10_snippet_56\n\nLANGUAGE: sql\nCODE:\n```\nSHOW CREATE TABLE customer;\n```\n\n----------------------------------------\n\nTITLE: Showing CREATE TABLE SQL for Iceberg Tables in Presto\nDESCRIPTION: Demonstrates using SHOW CREATE TABLE to view the SQL statement that would create the specified table, including format, partitioning, and other table properties.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/iceberg.rst#2025-04-10_snippet_56\n\nLANGUAGE: sql\nCODE:\n```\nSHOW CREATE TABLE customer;\n```\n\n----------------------------------------\n\nTITLE: Merging KHyperLogLog Structures\nDESCRIPTION: Aggregates multiple KHyperLogLog structures into a single union structure.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/khyperloglog.rst.txt#2025-04-10_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nmerge(khll)\n```\n\n----------------------------------------\n\nTITLE: SQL Function Reference - String Split Enhancement\nDESCRIPTION: Enhanced split function that now supports empty string delimiter to split strings into individual characters.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.219.rst#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nsplit\n```\n\n----------------------------------------\n\nTITLE: Query Details Response Format in Presto REST API\nDESCRIPTION: Example JSON response from the GET /v1/query/{queryId} endpoint showing detailed statistics about a specific query execution including session information, query state, timing metrics, and resource utilization.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/rest/query.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"queryId\" : \"20131229_211533_00017_dk5x2\",\n  \"session\" : {\n    \"user\" : \"tobrien\",\n    \"source\" : \"presto-cli\",\n    \"catalog\" : \"jmx\",\n    \"schema\" : \"jmx\",\n    \"remoteUserAddress\" : \"173.15.79.89\",\n    \"userAgent\" : \"StatementClient/0.55-SNAPSHOT\",\n    \"startTime\" : 1388351852026\n  },\n  \"state\" : \"FINISHED\",\n  \"self\" : \"http://10.193.207.128:8080/v1/query/20131229_211533_00017_dk5x2\",\n  \"fieldNames\" : [ \"name\" ],\n  \"query\" : \"select name from \\\"java.lang:type=runtime\\\"\",\n  \"queryStats\" : {\n    \"createTime\" : \"2013-12-29T16:17:32.027-05:00\",\n    \"executionStartTime\" : \"2013-12-29T16:17:32.086-05:00\",\n    \"lastHeartbeat\" : \"2013-12-29T16:17:44.561-05:00\",\n    \"endTime\" : \"2013-12-29T16:17:32.152-05:00\",\n    \"elapsedTime\" : \"125.00ms\",\n    \"queuedTime\" : \"1.31ms\",\n    \"analysisTime\" : \"4.84ms\",\n    \"totalTasks\" : 2,\n    \"runningTasks\" : 0,\n    \"completedTasks\" : 2,\n    \"totalDrivers\" : 2,\n    \"queuedDrivers\" : 0,\n    \"runningDrivers\" : 0,\n    \"completedDrivers\" : 2,\n    \"totalMemoryReservation\" : \"0B\",\n    \"totalScheduledTime\" : \"5.84ms\",\n    \"totalCpuTime\" : \"710.49us\",\n    \"totalBlockedTime\" : \"27.38ms\",\n    \"rawInputDataSize\" : \"27B\",\n    \"rawInputPositions\" : 1,\n    \"processedInputDataSize\" : \"32B\",\n    \"processedInputPositions\" : 1,\n    \"outputDataSize\" : \"32B\",\n    \"outputPositions\" : 1\n  },\n  \"outputStage\" : { }\n}\n```\n\n----------------------------------------\n\nTITLE: Table Properties Example\nDESCRIPTION: Demonstrates the usage of various table properties when creating a table in Presto-Accumulo.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/accumulo.rst#2025-04-10_snippet_20\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE myschema.scientists (\n  recordkey VARCHAR,\n  name VARCHAR,\n  age BIGINT,\n  birthday DATE\n)\nWITH (\n  column_mapping = 'name:metadata:name,age:metadata:age,birthday:metadata:date',\n  index_columns = 'name,age'\n);\n```\n\n----------------------------------------\n\nTITLE: Debugging SSL for Presto CLI Using Java Executable Jar\nDESCRIPTION: Command to run Presto CLI with SSL debugging enabled using the -Djavax.net.debug=ssl parameter. This is useful for troubleshooting SSL-related errors when running Presto CLI.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/security/ldap.rst#2025-04-10_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\njava -Djavax.net.debug=ssl \\\n-jar \\\npresto-cli-<version>-executable.jar \\\n--server https://coordinator:8443 \\\n<other_cli_arguments>\n```\n\n----------------------------------------\n\nTITLE: Accessing Presto Console via Web Browser\nDESCRIPTION: This snippet shows the default URL to access the Presto Console web UI. The default port is 8080, which can be changed in the configuration.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/clients/presto-console.rst#2025-04-10_snippet_0\n\nLANGUAGE: none\nCODE:\n```\nhttp://localhost:8080\n```\n\n----------------------------------------\n\nTITLE: Enabling Resource Manager in Presto Configuration\nDESCRIPTION: Configuration option to enable the new cluster memory resource manager that replaces the experimental big query support.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.109.rst#2025-04-10_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\nexperimental.cluster-memory-manager-enabled=true\n```\n\n----------------------------------------\n\nTITLE: DELETE All Records\nDESCRIPTION: Example showing how to delete all records from a table without any WHERE condition.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/delete.rst#2025-04-10_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nDELETE FROM orders;\n```\n\n----------------------------------------\n\nTITLE: Using reduce_agg() Function for Product Aggregation in Presto SQL\nDESCRIPTION: Example of using the reduce_agg() function to multiply values grouped by id. The function uses an initial state of 1 and functions to multiply values together both for individual values and when combining states.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/aggregate.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT id, reduce_agg(value, 1, (a, b) -> a * b, (a, b) -> a * b)\nFROM (\n    VALUES\n        (1, 2),\n        (1, 3),\n        (1, 4),\n        (2, 20),\n        (2, 30),\n        (2, 40)\n) AS t(id, value)\nGROUP BY id;\n-- (1, 24)\n-- (2, 24000)\n```\n\n----------------------------------------\n\nTITLE: Presto Function Substitution Pattern\nDESCRIPTION: Pattern for specifying function substitutions in Presto Verifier using regex-like syntax\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/admin/verifier.rst#2025-04-10_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\n/foo(c0,_)/bar(c0)/,/fred(c0,c1)/baz(qux(c1,c0))/,/foobar(c0)/if(qux(c1),bar(c0),baz(c1))/\n```\n\n----------------------------------------\n\nTITLE: Configuring Maximum Worker Threads in Presto\nDESCRIPTION: Sets the number of threads used by workers to process splits. Can be configured using absolute value or relative to CPU cores. Affects throughput and heap space usage.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/admin/properties.rst.txt#2025-04-10_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\ntask.max-worker-threads:\n  Type: integer\n  Default value: Node CPUs * 2\n```\n\n----------------------------------------\n\nTITLE: Using ORDER BY in Aggregation Functions\nDESCRIPTION: Added support for ORDER BY clause within aggregation functions, enabling ordered aggregation operations.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.190.rst.txt#2025-04-10_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nORDER BY\n```\n\n----------------------------------------\n\nTITLE: Enabling Colocated Joins in Presto SQL\nDESCRIPTION: Configures settings to enable grouped join execution for colocated data. Requires setting 'colocated-joins-enabled' config property or 'colocated_join' session property, along with 'concurrent_lifespans_per_task'.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.191.rst#2025-04-10_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nSET SESSION colocated_join = true;\nSET SESSION concurrent_lifespans_per_task = 4;\n```\n\n----------------------------------------\n\nTITLE: Using geometry_union Function in SQL\nDESCRIPTION: Efficiently unions arrays of geometries using the newly added geometry_union function.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.213.rst#2025-04-10_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT geometry_union(ARRAY[<geometry1>, <geometry2>, ...])\n```\n\n----------------------------------------\n\nTITLE: Querying Data from Presto-Accumulo Table\nDESCRIPTION: SQL command to select all data from the scientists table, demonstrating how to query data stored in Accumulo through Presto.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/accumulo.rst.txt#2025-04-10_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM myschema.scientists;\n```\n\n----------------------------------------\n\nTITLE: Finding Maximum Element by Function in Array in Presto SQL\nDESCRIPTION: Shows how to use array_max_by function to find the element that gives the maximum value when applied to a given function.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/array.rst.txt#2025-04-10_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nSELECT array_max_by(ARRAY ['a', 'bbb', 'cc'], x -> LENGTH(x)) -- 'bbb'\n```\n\n----------------------------------------\n\nTITLE: Altering Iceberg Table Structure with Column Operations\nDESCRIPTION: Examples of altering an Iceberg table by adding, renaming, and dropping columns. This demonstrates the basic ALTER TABLE column operations.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/iceberg.rst.txt#2025-04-10_snippet_44\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE iceberg.web.page_views ADD COLUMN zipcode VARCHAR;\n\nALTER TABLE iceberg.web.page_views RENAME COLUMN zipcode TO location;\n\nALTER TABLE iceberg.web.page_views DROP COLUMN location;\n```\n\n----------------------------------------\n\nTITLE: Defining Session Property Rules in JSON for Presto\nDESCRIPTION: This JSON snippet demonstrates how to define session property rules for different query scenarios in Presto. It includes rules for global queries, interactive queries, ETL queries, and high memory ETL queries, each with specific session properties and constraints.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/admin/session-property-managers.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"group\": \"global.*\",\n    \"sessionProperties\": {\n      \"query_max_execution_time\": \"8h\",\n    }\n  },\n  {\n    \"group\": \"global.interactive.*\",\n    \"sessionProperties\": {\n      \"query_max_execution_time\": \"1h\"\n    }\n  },\n  {\n    \"group\": \"global.pipeline.*\",\n    \"clientTags\": [\"etl\"],\n    \"sessionProperties\": {\n      \"scale_writers\": \"true\",\n      \"writer_min_size\": \"1GB\"\n    }\n  },\n  {\n    \"group\": \"global.pipeline.*\",\n    \"clientTags\": [\"high_mem_etl\"],\n    \"sessionProperties\": {\n      \"exchange_materialization_strategy\": \"ALL\",\n      \"partitioning_provider_catalog\": \"hive\",\n      \"hash_partition_count\": 4096\n    }\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Inserting Data into Presto-Accumulo Table\nDESCRIPTION: SQL command to insert sample data into the scientists table using INSERT statement. Note that while this method works, it has low throughput compared to directly using Accumulo APIs.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/accumulo.rst.txt#2025-04-10_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO myschema.scientists VALUES\n('row1', 'Grace Hopper', 109, DATE '1906-12-09' ),\n('row2', 'Alan Turing', 103, DATE '1912-06-23' );\n```\n\n----------------------------------------\n\nTITLE: Using split function in Presto SQL\nDESCRIPTION: Shows the new split function that divides a string into an array based on a delimiter.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.100.rst#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nsplit()\n```\n\n----------------------------------------\n\nTITLE: Defining Decimal Literals in Presto SQL\nDESCRIPTION: This snippet demonstrates the syntax for defining decimal literals in Presto SQL. The precision is determined by the total number of digits, while the scale is the number of digits in the fractional part.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/decimal.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nDECIMAL '0'\n```\n\nLANGUAGE: SQL\nCODE:\n```\nDECIMAL '12345'\n```\n\nLANGUAGE: SQL\nCODE:\n```\nDECIMAL '0000012345.1234500000'\n```\n\n----------------------------------------\n\nTITLE: Qualifying Column Names in Joins in Presto SQL\nDESCRIPTION: When joining tables with columns of the same name, column references must be qualified using either relation aliases or relation names to avoid ambiguity.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/select.rst#2025-04-10_snippet_29\n\nLANGUAGE: sql\nCODE:\n```\nSELECT nation.name, region.name\nFROM nation\nCROSS JOIN region;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT n.name, r.name\nFROM nation AS n\nCROSS JOIN region AS r;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT n.name, r.name\nFROM nation n\nCROSS JOIN region r;\n```\n\n----------------------------------------\n\nTITLE: Calculating IP Prefix in Presto SQL\nDESCRIPTION: Demonstrates the use of ip_prefix() function to calculate the IP prefix for a given IP address and subnet size.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/ip.rst#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT ip_prefix(CAST('192.168.255.255' AS IPADDRESS), 9); -- {192.128.0.0/9}\nSELECT ip_prefix('2001:0db8:85a3:0001:0001:8a2e:0370:7334', 48); -- {2001:db8:85a3::/48}\n```\n\n----------------------------------------\n\nTITLE: Rolling Back an Iceberg Table to a Specific Timestamp in Presto\nDESCRIPTION: The rollback_to_timestamp procedure enables reverting an Iceberg table to a specific point in time by providing the schema, table name, and target timestamp.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/iceberg.rst#2025-04-10_snippet_26\n\nLANGUAGE: sql\nCODE:\n```\nCALL iceberg.system.rollback_to_timestamp('schema_name', 'table_name', TIMESTAMP '1995-04-26 00:00:00.000');\n```\n\n----------------------------------------\n\nTITLE: Adding map_top_n_keys Function in SQL\nDESCRIPTION: Introduces a new SQL function map_top_n_keys to return an array of the top N keys from a provided map, with optional custom key comparison.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.279.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nmap_top_n_keys(map, N, [lambda_comparator])\n```\n\n----------------------------------------\n\nTITLE: Retrieving Multiple Quantile Values from QDigest in Presto\nDESCRIPTION: Returns an array of approximate percentile values corresponding to an array of quantiles. This allows efficient extraction of multiple percentiles from a single qdigest.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/qdigest.rst#2025-04-10_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nvalues_at_quantiles(qdigest(T), quantiles) -> T\n```\n\n----------------------------------------\n\nTITLE: Using any_values_match Function in SQL\nDESCRIPTION: The any_values_match function tests whether any value in a map satisfies a given predicate condition. Returns true if at least one value matches the predicate, false otherwise, and NULL in special cases.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/map.rst#2025-04-10_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSELECT ANY_VALUES_MATCH(map(ARRAY['a', 'b', 'c'], ARRAY[1, 2, 3]), x -> x = 1); -- true\n```\n\n----------------------------------------\n\nTITLE: Replacing Existing View\nDESCRIPTION: Demonstrates using OR REPLACE clause to update an existing view with new query logic.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/create-view.rst#2025-04-10_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nCREATE OR REPLACE VIEW test AS\nSELECT orderkey, orderstatus, totalprice / 4 AS quarter\nFROM orders\n```\n\n----------------------------------------\n\nTITLE: Querying Available Table Properties in Presto\nDESCRIPTION: SQL query to list all available table properties from the system metadata. This helps users discover connector-specific properties that can be used when creating tables.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.123.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM system.metadata.table_properties\n```\n\n----------------------------------------\n\nTITLE: Calculating Distance Between Geometries in Presto SQL\nDESCRIPTION: Computes the 2D cartesian minimum distance between two geometries or the great-circle distance between two spherical geography points.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/geospatial.rst.txt#2025-04-10_snippet_5\n\nLANGUAGE: SQL\nCODE:\n```\nST_Distance(Geometry, Geometry) -> double\n```\n\nLANGUAGE: SQL\nCODE:\n```\nST_Distance(SphericalGeography, SphericalGeography) -> double\n```\n\n----------------------------------------\n\nTITLE: Casting SQL Types to JSON in Presto\nDESCRIPTION: Examples of casting various SQL data types including NULL, numeric types, strings, booleans, arrays, maps, and row types to JSON. Shows basic conversions and behavior for complex nested structures.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/json.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT CAST(NULL AS JSON); -- NULL\nSELECT CAST(1 AS JSON); -- JSON '1'\nSELECT CAST(9223372036854775807 AS JSON); -- JSON '9223372036854775807'\nSELECT CAST('abc' AS JSON); -- JSON '\"abc\"'\nSELECT CAST(true AS JSON); -- JSON 'true'\nSELECT CAST(1.234 AS JSON); -- JSON '1.234'\nSELECT CAST(ARRAY[1, 23, 456] AS JSON); -- JSON '[1,23,456]'\nSELECT CAST(ARRAY[1, NULL, 456] AS JSON); -- JSON '[1,null,456]'\nSELECT CAST(ARRAY[ARRAY[1, 23], ARRAY[456]] AS JSON); -- JSON '[[1,23],[456]]'\nSELECT CAST(MAP_FROM_ENTRIES(ARRAY[('k1', 1), ('k2', 23), ('k3', 456)]) AS JSON); -- JSON '{\"k1\":1,\"k2\":23,\"k3\":456}'\nSELECT CAST(CAST(ROW(123, 'abc', true) AS ROW(v1 BIGINT, v2 VARCHAR, v3 BOOLEAN)) AS JSON); -- JSON '[123,\"abc\",true]'\n```\n\n----------------------------------------\n\nTITLE: Custom Column Mapping Table Description\nDESCRIPTION: Output of DESCRIBE command showing how columns map to custom Accumulo column families and qualifiers defined in the column_mapping table property.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/accumulo.rst#2025-04-10_snippet_6\n\nLANGUAGE: none\nCODE:\n```\n  Column   |  Type   | Extra |                    Comment\n-----------+---------+-------+-----------------------------------------------\n recordkey | varchar |       | Accumulo row ID\n name      | varchar |       | Accumulo column metadata:name. Indexed: false\n age       | bigint  |       | Accumulo column metadata:age. Indexed: false\n birthday  | date    |       | Accumulo column metadata:date. Indexed: false\n```\n\n----------------------------------------\n\nTITLE: Defining Kafka Table Structure in JSON for Presto\nDESCRIPTION: JSON structure for defining a Kafka table in Presto, including table name, schema, topic, and field definitions for both key and message. This template shows the required and optional fields for mapping Kafka data to Presto columns.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/kafka.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"tableName\": \"...\",\n    \"schemaName\": \"...\",\n    \"topicName\": \"...\",\n    \"key\": {\n        \"dataFormat\": \"...\",\n        \"fields\": [\n            ...\n        ]\n    },\n    \"message\": {\n        \"dataFormat\": \"...\",\n        \"fields\": [\n            ...\n       ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Inserting into Bucketed Tables in Hive\nDESCRIPTION: This snippet refers to the addition of support for creating and inserting data into bucketed tables in the Hive connector. Bucketed tables can improve query performance for certain types of queries.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.144.rst.txt#2025-04-10_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE ... CLUSTERED BY ... INTO ... BUCKETS\n```\n\n----------------------------------------\n\nTITLE: Merging Quantile Digests in Presto SQL\nDESCRIPTION: This function merges all input qdigests into a single qdigest. It is useful for combining multiple qdigest structures.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/qdigest.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nmerge(qdigest) -> qdigest\n```\n\n----------------------------------------\n\nTITLE: Configuring Presto Verifier Properties\nDESCRIPTION: Configuration properties for the Presto Verifier tool, including database connection settings, control and test cluster specifications.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/admin/verifier.rst#2025-04-10_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\nsource-query.suites=suite\nsource-query.database=jdbc:mysql://localhost:3306/mydb?user=my_username&password=my_password\ncontrol.hosts=127.0.0.1\ncontrol.http-port=8080\ncontrol.jdbc-port=8080\ncontrol.application-name=verifier-test\ntest.hosts=127.0.0.1\ntest.http-port=8081\ntest.jdbc-port=8081\ntest.application-name=verifier-test\ntest-id=1\n```\n\n----------------------------------------\n\nTITLE: Creating Accumulo Table with Default Serializer in Presto SQL\nDESCRIPTION: SQL statement to create a table in Presto that maps to an Accumulo table, using the default lexicoder serializer. The statement defines the schema and specifies column mappings.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/accumulo.rst#2025-04-10_snippet_21\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE myschema.scientists (\n  recordkey VARCHAR,\n  name VARCHAR,\n  age BIGINT,\n  birthday DATE\n)\nWITH (\n  column_mapping = 'name:metadata:name,age:metadata:age,birthday:metadata:date',\n  serializer = 'default'\n);\n```\n\n----------------------------------------\n\nTITLE: SQL Delete Statement Example\nDESCRIPTION: Example of DELETE syntax for Iceberg connector to remove one or more partitions\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.285.rst.txt#2025-04-10_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nDELETE FROM <table> [where <filter>]\n```\n\n----------------------------------------\n\nTITLE: Querying a Specific Delta Lake Table Snapshot by Version\nDESCRIPTION: SQL query to access a specific version snapshot of a Delta Lake table by appending the version identifier to the table name.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/deltalake.rst.txt#2025-04-10_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM sales.apac.\"sales_data@v4\" LIMIT 200;\n```\n\n----------------------------------------\n\nTITLE: Referencing ORDER BY Command in Presto RST Documentation\nDESCRIPTION: Code reference showing the ORDER BY SQL command syntax as mentioned in release notes documentation for a bug fix related to aggregation spilling.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.263.1.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n``ORDER BY``\n```\n\n----------------------------------------\n\nTITLE: Escaping JSON Path Subscript in Presto SQL Functions\nDESCRIPTION: The json_extract and json_extract_scalar functions now support escaping double quotes or backslashes using a backslash within JSON path subscripts. This changes the behavior for paths containing backslashes.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.168.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\njson_extract(json_column, '$.path[\"escaped\\\\backslash\"]')\n```\n\n----------------------------------------\n\nTITLE: Configuring Task Information Update Interval in Presto\nDESCRIPTION: Controls the staleness of task information used in scheduling. Larger values can reduce coordinator CPU load but may affect split scheduling efficiency.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/admin/properties.rst.txt#2025-04-10_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\ntask.info-update-interval:\n  Type: duration\n  Minimum value: 1ms\n  Maximum value: 10s\n  Default value: 3s\n```\n\n----------------------------------------\n\nTITLE: Using merge_sfm with noisy_approx_set_sfm in SQL\nDESCRIPTION: Example showing how to merge multiple SFM sketches using merge_sfm function and calculating cardinality across multiple columns.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/noisy.rst#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT cardinality(merge_sfm(ARRAY[\n    noisy_approx_set_sfm(col_1, 5.0),\n    noisy_approx_set_sfm(col_2, 5.0),\n    noisy_approx_set_sfm(col_3, 5.0)\n])) AS distinct_count_over_3_cols\nFROM my_table\n```\n\n----------------------------------------\n\nTITLE: Array Overlap Testing in Presto SQL\nDESCRIPTION: Shows arrays_overlap function usage for testing common elements between two arrays, handling null values.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/array.rst.txt#2025-04-10_snippet_15\n\nLANGUAGE: sql\nCODE:\n```\nSELECT arrays_overlap(ARRAY [1, 2, null], ARRAY [2, 3, null]);\nSELECT arrays_overlap(ARRAY [1, 2], ARRAY [3, 4]);\nSELECT arrays_overlap(ARRAY [1, null], ARRAY[2]);\nSELECT arrays_overlap(ARRAY[ROW(1, null)], ARRAY[1, 2]);\n```\n\n----------------------------------------\n\nTITLE: Query Historical Runtime Data\nDESCRIPTION: SQL query example showing how to retrieve historical JVM runtime data with timestamps.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/jmx.rst.txt#2025-04-10_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nSELECT \"timestamp\", \"uptime\" FROM jmx.history.\"java.lang:type=runtime\";\n```\n\n----------------------------------------\n\nTITLE: Maximum Grouping Sets Configuration\nDESCRIPTION: Configuration property to set the maximum number of grouping sets allowed in a GROUP BY clause. Default value is 2048.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.202.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\nanalyzer.max-grouping-sets\n```\n\n----------------------------------------\n\nTITLE: Geospatial Data Format Examples in WKT\nDESCRIPTION: Examples of Well-Known Text (WKT) format for different geometric shapes including points, lines, polygons, and collections.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/geospatial.rst#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nPOINT (0 0)\nLINESTRING (0 0, 1 1, 1 2)\nPOLYGON ((0 0, 4 0, 4 4, 0 4, 0 0), (1 1, 2 1, 2 2, 1 2, 1 1))\nMULTIPOINT (0 0, 1 2)\nMULTILINESTRING ((0 0, 1 1, 1 2), (2 3, 3 2, 5 4))\nMULTIPOLYGON (((0 0, 4 0, 4 4, 0 4, 0 0), (1 1, 2 1, 2 2, 1 2, 1 1)), ((-1 -1, -1 -2, -2 -2, -2 -1, -1 -1)))\nGEOMETRYCOLLECTION (POINT(2 3), LINESTRING (2 3, 3 4))\n```\n\n----------------------------------------\n\nTITLE: Enabling Merge Aggregations With and Without Filter in Presto SQL\nDESCRIPTION: Sets the session parameter to control the optimization for queries with multiple similar aggregations, with and without filters. The default value is false.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.281.rst#2025-04-10_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nSET SESSION merge_aggs_with_and_without_filter = false;\n```\n\n----------------------------------------\n\nTITLE: Adding Hours to a Timestamp with Time Zone Awareness in SQL\nDESCRIPTION: Shows how to add 24 hours to a timestamp using date_add function, demonstrating the impact of daylight saving time transitions on time calculations.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.66.rst#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT date_add('hour', 24, TIMESTAMP '2014-03-08 09:00:00');\n-- 2014-03-09 10:00:00.000\n```\n\n----------------------------------------\n\nTITLE: Basic START TRANSACTION Syntax in Presto SQL\nDESCRIPTION: Defines the syntax structure for the START TRANSACTION command, showing the basic command format and available options.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/start-transaction.rst#2025-04-10_snippet_0\n\nLANGUAGE: none\nCODE:\n```\nSTART TRANSACTION [ mode [, ...] ]\n```\n\n----------------------------------------\n\nTITLE: Configuring Hive Storage Format in Presto\nDESCRIPTION: Property to set the storage format when writing data to Hive. This can be added to the Hive catalog properties file. Supported formats include RCBINARY (default), RCTEXT, SEQUENCEFILE, and TEXTFILE.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.74.rst#2025-04-10_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\nhive.storage-format\n```\n\n----------------------------------------\n\nTITLE: Using Width Bucket Function in Presto SQL\nDESCRIPTION: Introduces the 'width_bucket' function in Presto SQL for data analysis and categorization.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.143.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nwidth_bucket\n```\n\n----------------------------------------\n\nTITLE: Enabling Non-Managed Table Creation in SQL\nDESCRIPTION: Sets the hive.non-managed-table-creates-enabled configuration option to control whether users can create non-managed (external) tables in Hive.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.196.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nSET hive.non-managed-table-creates-enabled = true;\n```\n\n----------------------------------------\n\nTITLE: SQL UNNEST Operation with Aggregate Functions\nDESCRIPTION: Prior to 0.126, using operations like GROUP BY or DISTINCT on output columns of UNNEST would cause query planning failures. This has been fixed in the current release.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.126.rst.txt#2025-04-10_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nUNNEST\n```\n\n----------------------------------------\n\nTITLE: Listing Tables in Presto SQL\nDESCRIPTION: SQL command to show all tables in the current schema using Presto CLI.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/kafka-tutorial.rst#2025-04-10_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nSHOW TABLES;\n```\n\n----------------------------------------\n\nTITLE: Using array_distinct Function with Reduced Memory Usage in Presto SQL\nDESCRIPTION: The array_distinct function has been optimized to use less memory when processing arrays.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.104.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\narray_distinct()\n```\n\n----------------------------------------\n\nTITLE: Disabling HTTP Endpoint Configuration\nDESCRIPTION: Configuration setting to disable the HTTP endpoint for Presto internal communication.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/security/internal-communication.rst#2025-04-10_snippet_0\n\nLANGUAGE: none\nCODE:\n```\nhttp-server.http.enabled=false\n```\n\n----------------------------------------\n\nTITLE: Example of DEALLOCATE PREPARE Command in PrestoDB SQL\nDESCRIPTION: Demonstrates how to deallocate a prepared statement named 'my_query' from the current session.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/sql/deallocate-prepare.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nDEALLOCATE PREPARE my_query;\n```\n\n----------------------------------------\n\nTITLE: Creating a Kudu Table with Column Properties\nDESCRIPTION: Example showing how column properties are defined in a Kudu table schema, including primary key setting, encoding types, and compression methods.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/kudu.rst#2025-04-10_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nname varchar WITH (primary_key = true, encoding = 'dictionary', compression = 'snappy'),\nindex bigint WITH (nullable = true, encoding = 'runlength', compression = 'lz4'),\ncomment varchar WITH (nullable = true, encoding = 'plain', compression = 'default'),\n ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Task Information Update Interval in Presto\nDESCRIPTION: Controls the staleness of task information used in scheduling. Larger values can reduce coordinator CPU load but may affect split scheduling.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/admin/properties.rst#2025-04-10_snippet_31\n\nLANGUAGE: properties\nCODE:\n```\ntask.info-update-interval=3s\n```\n\n----------------------------------------\n\nTITLE: Granting INSERT and SELECT Privileges in Presto SQL\nDESCRIPTION: Example showing how to grant INSERT and SELECT privileges on the 'orders' table to a user named 'alice'.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/sql/grant.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nGRANT INSERT, SELECT ON orders TO alice;\n```\n\n----------------------------------------\n\nTITLE: Qualified Table Analysis Example\nDESCRIPTION: Example showing how to analyze a table with fully qualified name including catalog and schema.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/analyze.rst#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nANALYZE hive.default.stores;\n```\n\n----------------------------------------\n\nTITLE: Using Array Normalize Function in Presto SQL\nDESCRIPTION: Normalizes an array by dividing each element by the p-norm of the array. This new function enhances array manipulation capabilities in Presto.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.255.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\narray_normalize(array)\n```\n\n----------------------------------------\n\nTITLE: Setting Exchange Maximum Response Size in Presto\nDESCRIPTION: Limits the maximum size of a response returned from an exchange request. Larger values may improve throughput with high latency, while smaller values may improve performance by reducing skew in the exchange client buffer.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/admin/properties.rst#2025-04-10_snippet_26\n\nLANGUAGE: properties\nCODE:\n```\nexchange.max-response-size\n```\n\n----------------------------------------\n\nTITLE: Using New Mathematical Functions in Presto SQL\nDESCRIPTION: Demonstrates the usage of newly added mathematical functions beta_cdf and inverse_beta_cdf for statistical calculations.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.215.rst#2025-04-10_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT beta_cdf(x, alpha, beta), inverse_beta_cdf(p, alpha, beta);\n```\n\n----------------------------------------\n\nTITLE: ALTER FUNCTION Example with Parameter Type\nDESCRIPTION: Example showing how to modify the null-call clause of a specific function with explicit parameter type specification.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/alter-function.rst#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nALTER FUNCTION prod.default.tan(double)\nCALLED ON NULL INPUT\n```\n\n----------------------------------------\n\nTITLE: Array Operations with JSON in Presto\nDESCRIPTION: Examples of array-related JSON functions in Presto, including array containment checks and retrieving elements by index, including support for negative indices.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/json.rst.txt#2025-04-10_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nSELECT json_array_contains('[1, 2, 3]', 2);\n```\n\n----------------------------------------\n\nTITLE: Listing Iceberg Table Columns with SHOW COLUMNS\nDESCRIPTION: Examples of using SHOW COLUMNS to list the columns in an Iceberg table along with their data types and other attributes such as partition keys.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/iceberg.rst.txt#2025-04-10_snippet_55\n\nLANGUAGE: sql\nCODE:\n```\nSHOW COLUMNS FROM customer;\n```\n\n----------------------------------------\n\nTITLE: Executing a Prepared Statement in Presto SQL\nDESCRIPTION: The EXECUTE command is used to run a previously prepared statement. It can be used with or without parameters, which are specified in the USING clause.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/sql/execute.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nEXECUTE statement_name [ USING parameter1 [ , parameter2, ... ] ]\n```\n\n----------------------------------------\n\nTITLE: Creating a Presto-Accumulo Table with Custom Column Mapping\nDESCRIPTION: SQL command demonstrating how to create a table with explicit column_mapping property to define the mapping between Presto columns and Accumulo column families and qualifiers.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/accumulo.rst.txt#2025-04-10_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE myschema.scientists (\n  recordkey VARCHAR,\n  name VARCHAR,\n  age BIGINT,\n  birthday DATE\n)\nWITH (\n  column_mapping = 'name:metadata:name,age:metadata:age,birthday:metadata:date'\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Authorization Rules in PrestoDB JSON\nDESCRIPTION: Example configuration showing schema ownership rules, table access privileges, and session property permissions. Demonstrates how to set up access control for different user types including admin and guest users.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/hive-security.rst#2025-04-10_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"schemas\": [\n    {\n      \"user\": \"admin\",\n      \"schema\": \".*\",\n      \"owner\": true\n    },\n    {\n      \"user\": \"guest\",\n      \"owner\": false\n    },\n    {\n      \"schema\": \"default\",\n      \"owner\": true\n    }\n  ],\n  \"tables\": [\n    {\n      \"user\": \"admin\",\n      \"privileges\": [\"SELECT\", \"INSERT\", \"DELETE\", \"OWNERSHIP\"]\n    },\n    {\n      \"user\": \"banned_user\",\n      \"privileges\": []\n    },\n    {\n      \"schema\": \"default\",\n      \"table\": \".*\",\n      \"privileges\": [\"SELECT\"]\n    }\n  ],\n  \"sessionProperties\": [\n    {\n      \"property\": \"force_local_scheduling\",\n      \"allow\": true\n    },\n    {\n      \"user\": \"admin\",\n      \"property\": \"max_split_size\",\n      \"allow\": true\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting Data into an Iceberg Table\nDESCRIPTION: Example of inserting a single row into an Iceberg table. This demonstrates the INSERT INTO statement with literal values.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/iceberg.rst.txt#2025-04-10_snippet_41\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO iceberg.web.page_views VALUES(TIMESTAMP '2023-08-12 03:04:05.321', 1, 'https://example.com', current_date, 'country');\n```\n\n----------------------------------------\n\nTITLE: Demonstrating EXCEPT Clause Bug Fix in SQL\nDESCRIPTION: Shows the incorrect and correct evaluation of nested EXCEPT clauses that was fixed in this release. Previously, 'a EXCEPT (b EXCEPT c)' was incorrectly evaluated as 'a EXCEPT b EXCEPT c'.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.161.rst#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\na EXCEPT (b EXCEPT c)\n```\n\n----------------------------------------\n\nTITLE: JSON Size Function Examples in PrestoDB\nDESCRIPTION: Demonstrates the usage of json_size function to get the number of members in JSON objects and arrays. Shows that scalar values return size 0.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/json.rst.txt#2025-04-10_snippet_16\n\nLANGUAGE: sql\nCODE:\n```\nSELECT json_size('{\"x\": {\"a\": 1, \"b\": 2}}', '$.x');\nSELECT json_size('{\"x\": [1, 2, 3]}', '$.x');\nSELECT json_size('{\"x\": {\"a\": 1, \"b\": 2}}', '$.x.a');\n```\n\n----------------------------------------\n\nTITLE: Create Schema in Specific Catalog\nDESCRIPTION: Example of creating a schema in a specific catalog by using the catalog.schema notation.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/create-schema.rst#2025-04-10_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nCREATE SCHEMA hive.sales\n```\n\n----------------------------------------\n\nTITLE: Creating Map from Arrays in SQL\nDESCRIPTION: The map function creates a map from two arrays, where the first array provides the keys and the second array provides the corresponding values. This example creates a map with numeric keys and values.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/map.rst#2025-04-10_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nSELECT map(ARRAY[1,3], ARRAY[2,4]); -- {1 -> 2, 3 -> 4}\n```\n\n----------------------------------------\n\nTITLE: Presto PREPARE Statement Syntax\nDESCRIPTION: Basic syntax for creating prepared statements in Presto SQL. Shows the required keywords and structure.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/prepare.rst#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nPREPARE statement_name FROM statement\n```\n\n----------------------------------------\n\nTITLE: Using rtrim Function in SQL\nDESCRIPTION: Shows how to use the rtrim function to remove characters from the end of a string.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/string.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT rtrim('test', 't'); -- tes\nSELECT rtrim('test...', '.'); -- test\n```\n\n----------------------------------------\n\nTITLE: Querying $snapshots Metadata Table in Iceberg with Presto\nDESCRIPTION: Demonstrates how to query the $snapshots metadata table, which provides details about the table snapshots in Iceberg.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/iceberg.rst.txt#2025-04-10_snippet_16\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM \"ctas_nation$snapshots\";\n```\n\nLANGUAGE: text\nCODE:\n```\n             committed_at             |     snapshot_id     | parent_id | operation |                                                  manifest_list                                           |                                                                                 summary\n--------------------------------------+---------------------+-----------+-----------+----------------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n2022-11-25 20:56:31.784 Asia/Kolkata  | 7606232158543069775 | NULL      | append    | s3://my-bucket/ctas_nation/metadata/snap-7606232158543069775-1-395a2cad-b244-409b-b030-cc44949e5a4e.avro | {changed-partition-count=1, added-data-files=1, total-equality-deletes=0, added-records=25, total-position-deletes=0, added-files-size=1648, total-delete-files=0, total-files-size=1648, total-records=25, total-data-files=1}\n```\n\n----------------------------------------\n\nTITLE: Creating a Schema in Current Catalog in Presto\nDESCRIPTION: Example showing how to create a new schema named 'web' in the current catalog in Presto.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/sql/create-schema.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nCREATE SCHEMA web\n```\n\n----------------------------------------\n\nTITLE: Configuration for Session Property Managers in Presto\nDESCRIPTION: Documents the path to the session property managers documentation, referenced as a key feature in this release for overriding session properties.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.248.rst#2025-04-10_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n:doc:`/admin/session-property-managers`\n```\n\n----------------------------------------\n\nTITLE: Documenting Spilling Properties in RST\nDESCRIPTION: Configuration documentation for Presto memory spilling properties including settings for joins, aggregations, and window functions\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/admin/properties-session.rst#2025-04-10_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n``spill_enabled``\n^^^^^^^^^^^^^^^^^\n\n* **Type:** ``boolean``\n* **Default value:** ``false``\n```\n\n----------------------------------------\n\nTITLE: Configuring HDFS Authentication with NONE Type in Presto\nDESCRIPTION: This snippet shows how to configure the Hive connector to use no authentication when connecting to HDFS. This setting disables Kerberos authentication for HDFS access.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/hive-security.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\nhive.hdfs.authentication.type=NONE\n```\n\n----------------------------------------\n\nTITLE: Defining DESCRIBE OUTPUT Syntax in Presto SQL\nDESCRIPTION: Specifies the syntax for the DESCRIBE OUTPUT command, which is used to list the output columns of a prepared statement.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/describe-output.rst#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nDESCRIBE OUTPUT statement_name\n```\n\n----------------------------------------\n\nTITLE: Inserting Data into Accumulo Table via SQL\nDESCRIPTION: SQL command to insert multiple rows of data into an Accumulo table. This demonstrates how to use standard SQL INSERT statements to load data into Accumulo.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/accumulo.rst#2025-04-10_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO myschema.scientists VALUES\n('row1', 'Grace Hopper', 109, DATE '1906-12-09' ),\n('row2', 'Alan Turing', 103, DATE '1912-06-23' );\n```\n\n----------------------------------------\n\nTITLE: Timezone Format Example\nDESCRIPTION: Example of non-standard timezone offset format that received CLI support.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.169.rst#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nGMT+01:00\n```\n\n----------------------------------------\n\nTITLE: Selecting Tweet Details in Presto\nDESCRIPTION: This SQL query selects specific fields from the tweets table, including the Kafka key, user name, language, and creation timestamp. It limits the result to 10 rows.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/kafka-tutorial.rst.txt#2025-04-10_snippet_13\n\nLANGUAGE: sql\nCODE:\n```\nSELECT kafka_key, user_name, lang, created_at FROM tweets LIMIT 10;\n```\n\n----------------------------------------\n\nTITLE: Creating Set Digest from Varchar Array in SQL\nDESCRIPTION: This example shows how to create a set digest from a varchar array using the make_set_digest function in Presto.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/setdigest.rst.txt#2025-04-10_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT make_set_digest(value)\nFROM (VALUES 'Presto', 'SQL', 'on', 'everything') T(value);\n```\n\n----------------------------------------\n\nTITLE: Configuring Benchmark Suite in JSON\nDESCRIPTION: JSON configuration file (suite.json) that defines benchmark suites with query patterns, schema patterns, and session properties. Includes two suites: file_formats for general testing and legacy_orc for testing with disabled ORC reader optimization.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/installation/benchmark-driver.rst#2025-04-10_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"file_formats\": {\n        \"query\": [\"single_.*\", \"tpch_.*\"],\n        \"schema\": [ \"tpch_sf(?<scale>.*)_(?<format>.*)_(?<compression>.*?)\" ],\n        \"session\": {}\n    },\n    \"legacy_orc\": {\n        \"query\": [\"single_.*\", \"tpch_.*\"],\n        \"schema\": [ \"tpch_sf(?<scale>.*)_(?<format>orc)_(?<compression>.*?)\" ],\n        \"session\": {\n            \"hive.optimized_reader_enabled\": \"false\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Black Hole Connector in Presto\nDESCRIPTION: Configuration for the Black Hole connector requires creating a catalog properties file named 'blackhole.properties' in the 'etc/catalog' directory with a single property setting the connector name.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/blackhole.rst#2025-04-10_snippet_0\n\nLANGUAGE: none\nCODE:\n```\nconnector.name=blackhole\n```\n\n----------------------------------------\n\nTITLE: Creating a Table in ClickHouse through PrestoDB\nDESCRIPTION: Example of creating a table in ClickHouse using PrestoDB with specific engine, ordering, partitioning, primary key, and sampling configurations.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/clickhouse.rst#2025-04-10_snippet_1\n\nLANGUAGE: none\nCODE:\n```\nCREATE TABLE default.prestodb_ck (\n  id int NOT NULL,\n  birthday DATE NOT NULL,\n  name VARCHAR,\n  age BIGINT,\n  logdate DATE NOT NULL\n)\nWITH (\n  engine = 'MergeTree',\n  order_by = ARRAY['id', 'birthday'],\n  partition_by = ARRAY['toYYYYMM(logdate)'],\n  primary_key = ARRAY['id'],\n  sample_by = 'id'\n);\n```\n\n----------------------------------------\n\nTITLE: EXPLAIN ANALYZE Example Output in Presto SQL\nDESCRIPTION: Example output of EXPLAIN ANALYZE for a GROUP BY query showing execution fragments with CPU time, input/output rows, and performance statistics for each plan node.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/sql/explain-analyze.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: none\nCODE:\n```\npresto:sf1> EXPLAIN ANALYZE SELECT count(*), clerk FROM orders WHERE orderdate > date '1995-01-01' GROUP BY clerk;\n\n                                              Query Plan\n    -----------------------------------------------------------------------------------------------\n    Fragment 1 [HASH]\n        Cost: CPU 88.57ms, Input: 4000 rows (148.44kB), Output: 1000 rows (28.32kB)\n        Output layout: [count, clerk]\n        Output partitioning: SINGLE []\n        - Project[] => [count:bigint, clerk:varchar(15)]\n                Cost: 26.24%, Input: 1000 rows (37.11kB), Output: 1000 rows (28.32kB), Filtered: 0.00%\n                Input avg.: 62.50 lines, Input std.dev.: 14.77%\n            - Aggregate(FINAL)[clerk][$hashvalue] => [clerk:varchar(15), $hashvalue:bigint, count:bigint]\n                    Cost: 16.83%, Output: 1000 rows (37.11kB)\n                    Input avg.: 250.00 lines, Input std.dev.: 14.77%\n                    count := \"count\"(\"count_8\")\n                - LocalExchange[HASH][$hashvalue] (\"clerk\") => clerk:varchar(15), count_8:bigint, $hashvalue:bigint\n                        Cost: 47.28%, Output: 4000 rows (148.44kB)\n                        Input avg.: 4000.00 lines, Input std.dev.: 0.00%\n                    - RemoteSource[2] => [clerk:varchar(15), count_8:bigint, $hashvalue_9:bigint]\n                            Cost: 9.65%, Output: 4000 rows (148.44kB)\n                            Input avg.: 4000.00 lines, Input std.dev.: 0.00%\n\n    Fragment 2 [tpch:orders:1500000]\n        Cost: CPU 14.00s, Input: 818058 rows (22.62MB), Output: 4000 rows (148.44kB)\n        Output layout: [clerk, count_8, $hashvalue_10]\n        Output partitioning: HASH [clerk][$hashvalue_10]\n        - Aggregate(PARTIAL)[clerk][$hashvalue_10] => [clerk:varchar(15), $hashvalue_10:bigint, count_8:bigint]\n                Cost: 4.47%, Output: 4000 rows (148.44kB)\n                Input avg.: 204514.50 lines, Input std.dev.: 0.05%\n                Collisions avg.: 5701.28 (17569.93% est.), Collisions std.dev.: 1.12%\n                count_8 := \"count\"(*)\n            - ScanFilterProject[table = tpch:tpch:orders:sf1.0, originalConstraint = (\"orderdate\" > \"$literal$date\"(BIGINT '9131')), filterPredicate = (\"orderdate\" > \"$literal$date\"(BIGINT '9131'))] => [cler\n                    Cost: 95.53%, Input: 1500000 rows (0B), Output: 818058 rows (22.62MB), Filtered: 45.46%\n                    Input avg.: 375000.00 lines, Input std.dev.: 0.00%\n                    $hashvalue_10 := \"combine_hash\"(BIGINT '0', COALESCE(\"$operator$hash_code\"(\"clerk\"), 0))\n                    orderdate := tpch:orderdate\n                    clerk := tpch:clerk\n```\n\n----------------------------------------\n\nTITLE: Creating Table in Memory Connector (SQL)\nDESCRIPTION: SQL command to create a table in the Memory connector by selecting data from another source.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/memory.rst#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE memory.default.nation AS\nSELECT * from tpch.tiny.nation;\n```\n\n----------------------------------------\n\nTITLE: Using ST_IsRing in Presto\nDESCRIPTION: Returns true if and only if the line is closed and simple. This function checks if a linestring forms a valid geometric ring with no self-intersections.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/geospatial.rst#2025-04-10_snippet_15\n\nLANGUAGE: sql\nCODE:\n```\nST_IsRing(Geometry) -> boolean\n```\n\n----------------------------------------\n\nTITLE: SQL DELETE Query with Non-VARCHAR Columns in Hive\nDESCRIPTION: Presto 0.126 adds support for non-VARCHAR columns in DELETE queries for the Hive connector, expanding the types of columns that can be used in delete operations.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.126.rst.txt#2025-04-10_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nDELETE\n```\n\n----------------------------------------\n\nTITLE: Configuring Failure Resolution for Presto Verifier\nDESCRIPTION: This configuration table defines settings for failure resolution in the Presto Verifier. It includes options for handling various types of failures, such as memory limits, time limits, and open partition issues.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/admin/verifier.rst.txt#2025-04-10_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\n========================================================= ======================================================================\nName                                                      Description\n========================================================= ======================================================================\n\"exceeded-global-memory-limit.failure-resolver.enabled\" Whether to enable the failure resolver for test query failures with\n                                                          \"EXCEEDED_GLOBAL_MEMORY_LIMIT\".\n\"exceeded-time-limit.failure-resolver.enabled\"          Whether to enable the failure resolver for test query failures with\n                                                          \"EXCEEDED_TIME_LIMIT\".\n\"verifier-limitation.failure-resolver.enabled\"          Whether to enable the failure resolver for failures due to Verifier\n                                                          limitations.\n\"too-many-open-partitions.failure-resolver.enabled\"     Whether to enable the failure resolver for test query failures with\n                                                          \"HIVE_TOO_MANY_OPEN_PARTITIONS\".\n\"too-many-open-partitions.max-buckets-per-writer\"       The maximum buckets count per writer configured on the control and the\n                                                          test cluster.\n\"too-many-open-partitions.cluster-size-expiration\"      The time limit of the test cluster size being cached.\n\"structured-column.failure-resolver.enabled\"            Whether to enable the failure resolver for column mismatches of\n                                                          structured-type columns.\n\"ignored-functions.failure-resolver.enabled\"            Whether to enable the \"IgnoredFunctions\" result mismatch failure\n                                                          resolver.\n\"ignored-functions.functions\"                           A comma-separated list of functions. Resolves mismatches if a query\n                                                          uses any functions in the list.\n========================================================= ======================================================================\n```\n\n----------------------------------------\n\nTITLE: GRANT ROLES Syntax Definition in Presto SQL\nDESCRIPTION: Defines the complete syntax for granting roles to users or other roles in Presto. Includes optional GRANTED BY clause and WITH ADMIN OPTION for delegating grant privileges.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/grant-roles.rst#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nGRANT role [, ...]\nTO ( user | USER user | ROLE role) [, ...]\n[ GRANTED BY ( user | USER user | ROLE role | CURRENT_USER | CURRENT_ROLE ) ]\n[ WITH ADMIN OPTION ]\n```\n\n----------------------------------------\n\nTITLE: Configuring Native Table Scan Scaling\nDESCRIPTION: Settings for controlling table scan concurrency scaling, including memory usage ratios for scan optimization.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/presto_cpp/properties-session.rst#2025-04-10_snippet_3\n\nLANGUAGE: properties\nCODE:\n```\nnative_table_scan_scaled_processing_enabled=false\nnative_table_scan_scale_up_memory_usage_ratio=0.7\n```\n\n----------------------------------------\n\nTITLE: Inserting Data into MySQL Table\nDESCRIPTION: SQL example for inserting a single row of data into a MySQL table.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/mysql.rst#2025-04-10_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO mysql.web.page_views VALUES(1, 'https://example.com', current_date, 'country');\n```\n\n----------------------------------------\n\nTITLE: Creating an Iceberg Version 2 Table with Commit Retries in Presto\nDESCRIPTION: Creates an Iceberg table with version 2 format and 5 commit retries. The table uses ORC file format and is partitioned by the 'ds' and 'country' columns, demonstrating additional table properties configuration.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/iceberg.rst#2025-04-10_snippet_38\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE iceberg.web.page_views_v2 (\n  view_time timestamp,\n  user_id bigint,\n  page_url varchar,\n  ds date,\n  country varchar\n)\nWITH (\n  format = 'ORC',\n  partitioning = ARRAY['ds', 'country'],\n  format_version = '2',\n  commit_retries = 5\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Memory Revoking Target in Presto\nDESCRIPTION: Defines the target percentage to reduce memory usage to when revoking memory. Presto will attempt to revoke enough memory so that the memory pool usage falls below this percentage.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/admin/properties.rst#2025-04-10_snippet_8\n\nLANGUAGE: properties\nCODE:\n```\nexperimental.memory-revoking-target\n```\n\n----------------------------------------\n\nTITLE: Decoding Google Polyline to Geometry in Presto SQL\nDESCRIPTION: New function to convert Google polyline format to Presto ST_Geometry types, enabling geometric operations on encoded path data.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.291.rst#2025-04-10_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT google_polyline_decode(encoded_path) AS geometry;\n```\n\n----------------------------------------\n\nTITLE: Bit Count Operations in Presto SQL\nDESCRIPTION: Examples of counting set bits in integers using bit_count() function with different bit lengths in 2's complement representation.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/bitwise.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT bit_count(9, 64); -- 2\nSELECT bit_count(9, 8); -- 2\nSELECT bit_count(-7, 64); -- 62\nSELECT bit_count(-7, 8); -- 6\n```\n\n----------------------------------------\n\nTITLE: Retrieving Top N Keys by Value from a Map in Presto SQL\nDESCRIPTION: Uses the new map_top_n_keys_by_value function to return the top N keys of a map sorted by their corresponding values.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.286.rst#2025-04-10_snippet_6\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT map_top_n_keys_by_value(map_column, n) FROM table_name;\n```\n\n----------------------------------------\n\nTITLE: Altering Function with Parameter Type List in Presto SQL\nDESCRIPTION: Example of altering the null-call clause of a specific function signature by providing the parameter type list. This example changes the tan function to be called even when null inputs are provided.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/sql/alter-function.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nALTER FUNCTION prod.default.tan(double)\nCALLED ON NULL INPUT\n```\n\n----------------------------------------\n\nTITLE: Getting Coordinates of a Point in Presto SQL\nDESCRIPTION: Functions to retrieve the X and Y coordinates of a Point geometry.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/geospatial.rst.txt#2025-04-10_snippet_15\n\nLANGUAGE: SQL\nCODE:\n```\nST_X(Point) -> double\n```\n\nLANGUAGE: SQL\nCODE:\n```\nST_Y(Point) -> double\n```\n\n----------------------------------------\n\nTITLE: Querying Delta Lake Table at Specific Timestamp in Presto SQL\nDESCRIPTION: This SQL query demonstrates how to query a Delta Lake table as of a specific timestamp in Presto. It uses the '@t' suffix followed by the desired timestamp.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/deltalake.rst#2025-04-10_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM sales.apac.\"sales_data@t2021-11-18 09:45\" LIMIT 200;\n```\n\n----------------------------------------\n\nTITLE: Renaming Tables in Presto SQL\nDESCRIPTION: Examples of renaming tables using the ALTER TABLE command in Presto SQL, with and without the IF EXISTS clause.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/sql/alter-table.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE users RENAME TO people;\n```\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE IF EXISTS users RENAME TO people;\n```\n\n----------------------------------------\n\nTITLE: Setting Default View Security Mode\nDESCRIPTION: Example of setting the session-level default security mode for view creation to INVOKER.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/sql/create-view.rst.txt#2025-04-10_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nSET SESSION default_view_security_mode='INVOKER'\n```\n\n----------------------------------------\n\nTITLE: Enabling Additional Kerberos Debugging in Presto\nDESCRIPTION: JVM configuration options to add to jvm.config for enabling detailed Kerberos debugging output in Presto. These options route Kerberos debug information to the Presto logs.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/security/server.rst#2025-04-10_snippet_5\n\nLANGUAGE: none\nCODE:\n```\n-Dsun.security.krb5.debug=true\n-Dlog.enable-console=true\n```\n\n----------------------------------------\n\nTITLE: Adding reverse Function for Arrays in SQL\nDESCRIPTION: Adds the reverse function for array manipulation in Presto SQL. This function reverses the order of elements in an array.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.152.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nreverse()\n```\n\n----------------------------------------\n\nTITLE: Creating a Kudu Table with Combined Hash and Range Partitioning in Presto\nDESCRIPTION: SQL example demonstrating the creation of a Kudu table with two hash partition groups and one range partitioning on a timestamp column. It includes the range_partitions property to define specific time-based partitions.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/kudu.rst.txt#2025-04-10_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE events (\n  rack varchar WITH (primary_key=true),\n  machine varchar WITH (primary_key=true),\n  event_time timestamp WITH (primary_key=true),\n  ...\n) WITH (\n  partition_by_hash_columns = ARRAY['rack'],\n  partition_by_hash_buckets = 2,\n  partition_by_second_hash_columns = ARRAY['machine'],\n  partition_by_second_hash_buckets = 3,\n  partition_by_range_columns = ARRAY['event_time'],\n  range_partitions = '[{\"lower\": null, \"upper\": \"2018-01-01T00:00:00\"}, {\"lower\": \"2018-01-01T00:00:00\", \"upper\": null}]'\n)\n```\n\n----------------------------------------\n\nTITLE: Distributed Plan Example in Presto SQL\nDESCRIPTION: An example of the distributed execution plan for the same query, showing how the query is split into fragments and distributed across nodes.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/explain.rst#2025-04-10_snippet_3\n\nLANGUAGE: none\nCODE:\n```\npresto:tiny> EXPLAIN (TYPE DISTRIBUTED) SELECT regionkey, count(*) FROM nation GROUP BY 1;\n                                          Query Plan\n---------------------------------------------------------------------------------------------\n Fragment 0 [SINGLE]\n     Output layout: [regionkey, count]\n     Output partitioning: SINGLE []\n     - Output[regionkey, _col1] => [regionkey:bigint, count:bigint]\n             _col1 := count\n         - RemoteSource[1] => [regionkey:bigint, count:bigint]\n\n Fragment 1 [HASH]\n     Output layout: [regionkey, count]\n     Output partitioning: SINGLE []\n     - Aggregate(FINAL)[regionkey] => [regionkey:bigint, count:bigint]\n             count := \"count\"(\"count_8\")\n         - LocalExchange[HASH][$hashvalue] (\"regionkey\") => regionkey:bigint, count_8:bigint, $hashvalue:bigint\n             - RemoteSource[2] => [regionkey:bigint, count_8:bigint, $hashvalue_9:bigint]\n\n Fragment 2 [SOURCE]\n     Output layout: [regionkey, count_8, $hashvalue_10]\n     Output partitioning: HASH [regionkey][$hashvalue_10]\n     - Project[] => [regionkey:bigint, count_8:bigint, $hashvalue_10:bigint]\n             $hashvalue_10 := \"combine_hash\"(BIGINT '0', COALESCE(\"$operator$hash_code\"(\"regionkey\"), 0))\n         - Aggregate(PARTIAL)[regionkey] => [regionkey:bigint, count_8:bigint]\n                 count_8 := \"count\"(*)\n             - TableScan[tpch:tpch:nation:sf0.1, originalConstraint = true] => [regionkey:bigint]\n                     regionkey := tpch:regionkey\n```\n\n----------------------------------------\n\nTITLE: Creating Map from Entries in SQL\nDESCRIPTION: The map_from_entries function creates a map from an array of key-value pairs (entries). Each entry is represented as a row with two fields: the key and the value.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/map.rst#2025-04-10_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nSELECT map_from_entries(ARRAY[(1, 'x'), (2, 'y')]); -- {1 -> 'x', 2 -> 'y'}\n```\n\n----------------------------------------\n\nTITLE: Creating a Tangent Function with Complete Options in Presto SQL\nDESCRIPTION: Extended example of creating a tangent function with OR REPLACE clause, a comment description, and explicitly defined routine characteristics.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/create-function.rst#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nCREATE OR REPLACE FUNCTION example.default.tan(x double)\nRETURNS double\nCOMMENT 'tangent trigonometric function'\nLANGUAGE SQL\nDETERMINISTIC\nRETURNS NULL ON NULL INPUT\nRETURN sin(x) / cos(x)\n```\n\n----------------------------------------\n\nTITLE: Using ST_Geometries in Presto\nDESCRIPTION: Returns an array of geometries in the specified collection. Returns a one-element array if the input geometry is not a multi-geometry. Returns null if input geometry is empty.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/geospatial.rst#2025-04-10_snippet_31\n\nLANGUAGE: sql\nCODE:\n```\nST_Geometries(Geometry) -> array(Geometry)\n```\n\n----------------------------------------\n\nTITLE: Enabling History-Based Optimization Statistics Tracking in Presto SQL\nDESCRIPTION: Configures the session to track history-based optimization statistics from completed stages in failed queries.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.287.rst#2025-04-10_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nSET SESSION track_history_based_plan_statistics_from_complete_stages_in_failed_query = true;\n```\n\n----------------------------------------\n\nTITLE: REVOKE ROLES Syntax in Presto SQL\nDESCRIPTION: The syntax for the REVOKE ROLES command in Presto SQL. It allows revoking roles or admin options from users and roles, with an optional GRANTED BY clause to specify the revoker.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/sql/revoke-roles.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nREVOKE\n[ ADMIN OPTION FOR ]\nrole [, ...]\nFROM ( user | USER user | ROLE role) [, ...]\n[ GRANTED BY ( user | USER user | ROLE role | CURRENT_USER | CURRENT_ROLE ) ]\n```\n\n----------------------------------------\n\nTITLE: SET SESSION Command Syntax\nDESCRIPTION: Defines the syntax patterns for the SET SESSION command. It shows both the global session property format and the catalog-specific property format.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/set-session.rst#2025-04-10_snippet_0\n\nLANGUAGE: none\nCODE:\n```\nSET SESSION name = expression\nSET SESSION catalog.name = expression\n```\n\n----------------------------------------\n\nTITLE: SQL Query Example with GROUP BY Optimization\nDESCRIPTION: Example SQL query demonstrating the fixed GROUP BY optimization case where grouping column cardinality is one.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.206.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT c1, sum(c2) FROM t WHERE c1 = 'foo' GROUP BY c1\n```\n\n----------------------------------------\n\nTITLE: Dropping a Function without Parameter Types in Presto SQL\nDESCRIPTION: Example demonstrating how to drop a function without specifying parameter types. This works when only one function exists with the given name in the specified schema.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/drop-function.rst#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nDROP FUNCTION example.default.tan\n```\n\n----------------------------------------\n\nTITLE: Querying System Runtime Nodes Table\nDESCRIPTION: SQL query to retrieve information about all nodes in the Presto cluster. The nodes table contains details about visible nodes and their status.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/system.rst#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM system.runtime.nodes;\n```\n\n----------------------------------------\n\nTITLE: Example Output of SHOW CREATE TABLE in Presto\nDESCRIPTION: The sample output of the SHOW CREATE TABLE command, showing the CREATE TABLE statement for the 'orders' table with its columns, format (ORC), and partitioning information.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/show-create-table.rst#2025-04-10_snippet_2\n\nLANGUAGE: none\nCODE:\n```\n              Create Table\n-----------------------------------------\n CREATE TABLE tpch.sf1.orders (\n    orderkey bigint,\n    orderstatus varchar,\n    totalprice double,\n    orderdate varchar\n )\n WITH (\n    format = 'ORC',\n    partitioned_by = ARRAY['orderdate']\n )\n(1 row)\n```\n\n----------------------------------------\n\nTITLE: Creating Indexed Table in Presto-Accumulo\nDESCRIPTION: Example of creating a table with indexed columns using the string serializer and specifying index columns for name, age, and birthday fields.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/accumulo.rst#2025-04-10_snippet_13\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE myschema.scientists (\n  recordkey VARCHAR,\n  name VARCHAR,\n  age BIGINT,\n  birthday DATE\n)\nWITH (\n  serializer = 'string',\n  index_columns='name,age,birthday'\n);\n```\n\n----------------------------------------\n\nTITLE: Using LIMIT Clause in SQL\nDESCRIPTION: Traditional SQL syntax for limiting the number of rows returned by a query.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.280.rst#2025-04-10_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT * FROM table_name LIMIT 3\n```\n\n----------------------------------------\n\nTITLE: Querying $partitions Metadata Table in Iceberg with Presto\nDESCRIPTION: Demonstrates how to query the $partitions metadata table, which provides detailed partition information for the Iceberg table.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/iceberg.rst.txt#2025-04-10_snippet_18\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM \"ctas_nation$partitions\";\n```\n\nLANGUAGE: text\nCODE:\n```\n row_count | file_count | total_size |           nationkey           |                   name                   |          regionkey           |                          comment\n-----------+------------+------------+-------------------------------+------------------------------------------+------------------------------+------------------------------------------------------------\n    25     |          1 |       1648 | {min=0, max=24, null_count=0} | {min=ALGERIA, max=VIETNAM, null_count=0} | {min=0, max=4, null_count=0} | {min= haggle. careful, max=y final packaget, null_count=0}\n```\n\n----------------------------------------\n\nTITLE: Documenting Presto Release 0.120 Warning in reStructuredText\nDESCRIPTION: This snippet uses reStructuredText to create a release header and display a warning message about the broken state of Presto Release 0.120. It employs a directive to format the warning prominently.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.120.rst#2025-04-10_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n=============\nRelease 0.120\n=============\n.. warning::\n\n   This release is broken and should not be used.\n```\n\n----------------------------------------\n\nTITLE: Requesting Binary Results Format\nDESCRIPTION: To request query results in binary format instead of JSON, include the binaryResults=true query parameter in the initial POST request. Results will be returned as base64-encoded pages in SerializedPage format.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/develop/client-protocol.rst.txt#2025-04-10_snippet_3\n\nLANGUAGE: HTTP\nCODE:\n```\nPOST /v1/statement?binaryResults=true HTTP/1.1\nX-Presto-User: username\nContent-Type: text/plain\n\nSELECT * FROM example_table\n```\n\n----------------------------------------\n\nTITLE: Formatting JSON Values in Presto\nDESCRIPTION: Examples of serializing JSON values to JSON text strings using json_format. This is the inverse of json_parse and follows RFC 7159 for proper JSON serialization.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/json.rst.txt#2025-04-10_snippet_11\n\nLANGUAGE: sql\nCODE:\n```\nSELECT json_format(JSON '[1, 2, 3]'); -- '[1,2,3]'\nSELECT json_format(JSON '\"a\"'); -- '\"a\"'\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents for Presto Functions in reStructuredText\nDESCRIPTION: This snippet defines a table of contents using reStructuredText syntax. It lists various categories of Presto functions and operators, with each entry linking to a separate documentation file.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions.rst#2025-04-10_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n    :maxdepth: 1\n\n    functions/logical\n    functions/comparison\n    functions/conditional\n    functions/lambda\n    functions/conversion\n    functions/math\n    functions/bitwise\n    functions/decimal\n    functions/string\n    functions/regexp\n    functions/binary\n    functions/json\n    functions/datetime\n    functions/aggregate\n    functions/noisy\n    functions/window\n    functions/array\n    functions/map\n    functions/url\n    functions/ip\n    functions/geospatial\n    functions/hyperloglog\n    functions/khyperloglog\n    functions/qdigest\n    functions/uuid\n    functions/tdigest\n    functions/color\n    functions/session\n    functions/teradata\n    functions/internationalization\n    functions/setdigest\n    functions/sketch\n    functions/pinot\n```\n\n----------------------------------------\n\nTITLE: SQL Configuration Setting for CPU Time Limit\nDESCRIPTION: Configuration option to limit the total CPU time that can be used by a query\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.143.rst#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nquery.max-cpu-time\n```\n\n----------------------------------------\n\nTITLE: Merging Multiple QDigests in Presto\nDESCRIPTION: Merges all input qdigest values into a single qdigest. This function allows combining multiple quantile digest data structures without losing precision.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/qdigest.rst#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nmerge(qdigest) -> qdigest\n```\n\n----------------------------------------\n\nTITLE: SQL Function Examples in Presto 0.228\nDESCRIPTION: Examples of SQL functions that received optimization for large constant array/map/row creation, which now have delayed evaluation on workers to improve coordinator stability.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.228.rst#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSEQUENCE\nREPEAT\nARRAY[...]\n```\n\n----------------------------------------\n\nTITLE: Writing SQL Queries with Tags for Benchmarking\nDESCRIPTION: Shows how to add metadata tags to SQL queries for additional output columns in the benchmark results. The example includes 'projection' and 'filter' tags followed by a simple SQL query.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/installation/benchmark-driver.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nprojection=true\nfilter=false\n=================\nSELECT SUM(LENGTH(comment))\nFROM lineitem\n```\n\n----------------------------------------\n\nTITLE: Array Sorting with Custom Comparator in Presto SQL\nDESCRIPTION: Examples of sorting arrays using custom comparison functions with various ordering rules including null handling.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/array.rst#2025-04-10_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nSELECT array_sort(ARRAY [3, 2, 5, 1, 2], (x, y) -> IF(x < y, 1, IF(x = y, 0, -1)));\nSELECT array_sort(ARRAY ['bc', 'ab', 'dc'], (x, y) -> IF(x < y, 1, IF(x = y, 0, -1)));\nSELECT array_sort(ARRAY [3, 2, null, 5, null, 1, 2], \n                  (x, y) -> CASE WHEN x IS NULL THEN -1\n                                 WHEN y IS NULL THEN 1\n                                 WHEN x < y THEN 1\n                                 WHEN x = y THEN 0\n                                 ELSE -1 END);\n```\n\n----------------------------------------\n\nTITLE: Presto Response Headers Structure\nDESCRIPTION: Table showing supported Presto response headers and their descriptions, including headers for setting catalog, schema, session properties, roles, and transaction management.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/develop/client-protocol.rst.txt#2025-04-10_snippet_4\n\nLANGUAGE: markup\nCODE:\n```\n====================================== =================================================================================================\nResponse Header Name                   Description\n====================================== =================================================================================================\n``X-Presto-Set-Catalog``               Instructs the client to set the catalog that will be sent in the\n                                       ``X-Presto-Catalog`` request header in subsequent client requests.\n``X-Presto-Set-Schema``                Instructs the client to set the schema that will be sent in the ``X-Presto-Schema`` request\n                                       header in subsequent client requests.\n``X-Presto-Set-Session``               The value of the ``X-Presto-Set-Session`` response header is a name=value string,\n                                       representing session attributes that are meaningful to the Presto engine or a connector.\n                                       Instructs the client to add that name=value string to the ``X-Presto-Session``\n                                       request header to be used in subsequent client requests.\n``X-Presto-Clear-Session``             Instructs the client to remove the session property with the whose name is the value\n                                       of the ``X-Presto-Clear-Session`` header from the comma-separated list of session properties\n                                       that will be sent in the ``X-Presto-Session`` header in subsequent client requests.\n``X-Presto-Set-Role``                  Instructs the client to set ``X-Presto-Role`` request header to the catalog role give by the\n                                       value of the ``X-Presto-Set-Role`` headerin subsequent client requests.\n``X-Presto-Added-Prepare``             Instructs the client to add the name=value pair to the set of prepared statements\n                                       that will be sent in the ``X-Presto-Prepared-Statements`` request header\n                                       in subsequent client requests.\n``X-Presto-Deallocated-Prepare``       Instructs the client to remove the prepared statement whose name is the value of the\n                                       ``X-Presto-Deallocated-Prepare`` header from the client's list of prepared statements\n                                       sent in the ``X-Presto-Prepared-Statements`` request header in subsequent client requests.\n``X-Presto-Started-Transaction-Id``    Provides the transaction ID that the client should pass back in the\n                                       ``X-Presto-Transaction-Id`` request header in subsequent requests.\n``X-Presto-Clear-Transaction-Id``      Instructs the client to clear the ``X-Presto-Transaction-Id`` request header used in\n                                       subsequent requests.\n====================================== =================================================================================================\n```\n\n----------------------------------------\n\nTITLE: Displaying Presto CLI help information in Bash\nDESCRIPTION: This command runs the Presto CLI with the --help option to display available options and usage information.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/installation/cli.rst.txt#2025-04-10_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n./presto --help\n```\n\n----------------------------------------\n\nTITLE: Date Formatting with Localization\nDESCRIPTION: Examples showing date formatting with different language localizations in Presto SQL.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.66.rst.txt#2025-04-10_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSELECT date_format(TIMESTAMP '2001-01-09 09:04', '%M'); -- enero\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT date_format(TIMESTAMP '2001-01-09 09:04', '%M'); -- 1月\n```\n\n----------------------------------------\n\nTITLE: Querying with Basic Table Value Constructor in Presto SQL\nDESCRIPTION: Demonstrates basic usage of VALUES clause to create an inline table with two columns and two rows.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.61.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nVALUES ('a', 1), ('b', 2);\n```\n\n----------------------------------------\n\nTITLE: Creating a Table with Defined Columns in Memory Connector in Presto\nDESCRIPTION: This SQL command creates a new table with specified columns in the 'default1' schema of the Memory connector.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/memory.rst.txt#2025-04-10_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE memory.default1.my_table (id integer, name varchar, age integer);\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTPS for Internal Communication in Presto\nDESCRIPTION: Introduces new configuration properties for setting up HTTPS for internal communication in Presto, including trust store path and cipher configurations.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.229.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\ninternal-communication.https.trust-store-path\ninternal-communication.https.included-cipher\ninternal-communication.https.excluded-cipher\n```\n\n----------------------------------------\n\nTITLE: Configuring Database-Based Resource Manager in PrestoDB\nDESCRIPTION: Example configuration in etc/resource-groups.properties for setting up a database-based resource group manager in PrestoDB. It specifies the configuration manager type and the JDBC URL for the database.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/admin/resource-groups.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nresource-groups.configuration-manager=db\nresource-groups.config-db-url=jdbc:mysql://localhost:3306/resource_groups?user=<user>&password=<password>\n```\n\n----------------------------------------\n\nTITLE: Configuring Alluxio SDK Cache in Presto Hive Connector\nDESCRIPTION: Configuration properties to enable Alluxio SDK cache in the Hive connector. These settings specify cache enabling, type selection, storage capacity, and local directory location for cache storage.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/cache/local.rst#2025-04-10_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nhive.node-selection-strategy=SOFT_AFFINITY\ncache.enabled=true\ncache.type=ALLUXIO\ncache.alluxio.max-cache-size=500GB\ncache.base-directory=/tmp/alluxio-cache\n```\n\n----------------------------------------\n\nTITLE: Example Elasticsearch Document Structure\nDESCRIPTION: Sample JSON document structure showing various field types including arrays, primitives, and nested objects in Elasticsearch.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/elasticsearch.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"array_string_field\": [\"presto\",\"is\",\"the\",\"besto\"],\n    \"long_field\": 314159265359,\n    \"id_field\": \"564e6982-88ee-4498-aa98-df9e3f6b6109\",\n    \"timestamp_field\": \"1987-09-17T06:22:48.000Z\",\n    \"object_field\": {\n        \"array_int_field\": [86,75,309],\n        \"int_field\": 2\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Hive Bucketing Optimizations in Presto 0.150\nDESCRIPTION: Due to broken Hive bucketing optimizations in this release, users should disable them by adding this property to their Hive catalog configuration. This ensures proper functionality until the issue is resolved.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.150.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nhive.bucket-execution=false\n```\n\n----------------------------------------\n\nTITLE: Removing Orphan Files from an Iceberg Table with Default Age in Presto\nDESCRIPTION: This procedure removes orphaned files created more than 3 days ago (the default retention period) from an Iceberg table using named parameters.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/iceberg.rst#2025-04-10_snippet_32\n\nLANGUAGE: sql\nCODE:\n```\nCALL iceberg.system.remove_orphan_files(schema => 'db', table_name => 'sample');\n```\n\n----------------------------------------\n\nTITLE: Inserting Data into Memory Connector Table (SQL)\nDESCRIPTION: SQL command to insert data into a table in the Memory connector.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/memory.rst#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO memory.default.nation\nSELECT * FROM tpch.tiny.nation;\n```\n\n----------------------------------------\n\nTITLE: HANA Connection with Truststore Configuration\nDESCRIPTION: Complete example of HANA connection string with SSL/TLS security configuration including truststore settings.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/hana.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\nconnection-url=jdbc:sap://<host>:<port>?encrypt=true&validateCertificate=true&trustStore=path/to/truststore.jks&trustStorePassword=password&trustStoreType=jks\n```\n\n----------------------------------------\n\nTITLE: Substring Extraction Function (3 params)\nDESCRIPTION: Extracts a substring of specified length from a string starting at a specified position. Acts as an alias for the substr function.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/teradata.rst.txt#2025-04-10_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nsubstring(string, start, length) -> varchar\n```\n\n----------------------------------------\n\nTITLE: Expiring Old Snapshots from an Iceberg Table with Timestamp and Retention in Presto\nDESCRIPTION: This procedure removes snapshots older than a specified timestamp while retaining a minimum number of recent snapshots. Useful for cleanup and space optimization in Iceberg tables.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/iceberg.rst#2025-04-10_snippet_29\n\nLANGUAGE: sql\nCODE:\n```\nCALL iceberg.system.expire_snapshots('schema_name', 'table_name', TIMESTAMP '2023-08-31 00:00:00.000', 10);\n```\n\n----------------------------------------\n\nTITLE: DROP FUNCTION Syntax Definition in Presto SQL\nDESCRIPTION: The syntax definition for the DROP FUNCTION command in Presto SQL, showing all possible syntax options including TEMPORARY, IF EXISTS clauses, and optional parameter type specifications.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/drop-function.rst#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nDROP [TEMPORARY] FUNCTION [ IF EXISTS ] qualified_function_name [ ( parameter_type[, ...] ) ]\n```\n\n----------------------------------------\n\nTITLE: Configuring Alluxio Data Cache for Iceberg in Presto\nDESCRIPTION: This configuration snippet shows how to enable and configure Alluxio data caching for the Iceberg connector in Presto. It sets various properties including cache enablement, base directory, cache type, and maximum cache size.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/iceberg.rst.txt#2025-04-10_snippet_8\n\nLANGUAGE: properties\nCODE:\n```\ncache.enabled=true\ncache.base-directory=file:///mnt/flash/data\ncache.type=ALLUXIO\ncache.alluxio.max-cache-size=1600GB\nhive.node-selection-strategy=SOFT_AFFINITY\n```\n\n----------------------------------------\n\nTITLE: Creating a Table with Avro Format in Presto\nDESCRIPTION: Example SQL command to create a Hive table using the Avro format with an external schema definition file. The table schema is derived from the specified Avro schema file rather than the columns in the DDL.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/hive.rst#2025-04-10_snippet_12\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE hive.avro.avro_data (\n   id bigint\n)\nWITH (\n   format = 'AVRO',\n   avro_schema_url = '/usr/local/avro_data.avsc'\n)\n```\n\n----------------------------------------\n\nTITLE: Using NOISY_SUM_GAUSSIAN Function in Presto SQL\nDESCRIPTION: The NOISY_SUM_GAUSSIAN function adds Gaussian noise to a sum result, useful for differential privacy applications. It adds random noise with 0 mean and a specified standard deviation to sum results.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.284.rst#2025-04-10_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nNOISY_SUM_GAUSSIAN(value, noise_scale[, random_seed])\n```\n\n----------------------------------------\n\nTITLE: Creating PostgreSQL Tables\nDESCRIPTION: Example of creating a new table with an integer column.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/postgresql.rst.txt#2025-04-10_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE postgresql.public.test_integer ( id INTEGER );\n```\n\n----------------------------------------\n\nTITLE: Implementing finishDelete Method in ConnectorMetadata for Presto\nDESCRIPTION: This method is called after all splits have been processed for a DELETE operation. It takes the accumulated Slice fragments and performs actions to complete the delete operation, such as committing a transaction.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/develop/delete-and-update.rst#2025-04-10_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nvoid finishDelete(\n    ConnectorSession session,\n    ConnectorTableHandle tableHandle,\n    Collection<Slice> fragments)\n```\n\n----------------------------------------\n\nTITLE: Time Travel Queries Using VERSION and TIMESTAMP in Presto SQL\nDESCRIPTION: Demonstrates how to use FOR VERSION AS OF and FOR TIMESTAMP AS OF clauses to query historical data in Iceberg tables.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/iceberg.rst#2025-04-10_snippet_62\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM ctas_nation FOR VERSION AS OF 5300424205832769799;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM ctas_nation FOR SYSTEM_VERSION AS OF 5300424205832769799;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM ctas_nation FOR SYSTEM_VERSION BEFORE 6891257133877048303;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM ctas_nation FOR TIMESTAMP AS OF TIMESTAMP '2023-10-17 13:29:46.822 America/Los_Angeles';\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM ctas_nation FOR SYSTEM_TIME AS OF TIMESTAMP '2023-10-17 13:29:46.822';\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM ctas_nation FOR TIMESTAMP AS OF CURRENT_TIMESTAMP;\n```\n\n----------------------------------------\n\nTITLE: Bitwise Shift Left Operations in Presto SQL\nDESCRIPTION: Examples of left shift operations on integers with specified bit lengths using bitwise_shift_left() function.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/bitwise.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT bitwise_shift_left(7, 2, 4); -- 12\nSELECT bitwise_shift_left(7, 2, 64); -- 28\n```\n\n----------------------------------------\n\nTITLE: Finding Maximum IP Address in Subnet using Presto SQL\nDESCRIPTION: Demonstrates the use of ip_subnet_max() function to find the largest IP address in a given subnet.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/ip.rst#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT ip_subnet_max(IPPREFIX '192.64.0.0/9'); -- {192.127.255.255}\nSELECT ip_subnet_max(IPPREFIX '2001:0db8:85a3:0001:0001:8a2e:0370:7334/48'); -- {2001:db8:85a3:ffff:ffff:ffff:ffff:ffff}\n```\n\n----------------------------------------\n\nTITLE: Using ST_XMax in Presto\nDESCRIPTION: Returns the X maximum of the geometry's bounding box. This function provides the maximum X coordinate value of the minimum bounding rectangle that contains the geometry.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/geospatial.rst#2025-04-10_snippet_21\n\nLANGUAGE: sql\nCODE:\n```\nST_XMax(Geometry) -> double\n```\n\n----------------------------------------\n\nTITLE: Parameterized SELECT Prepared Statement\nDESCRIPTION: Example of preparing a SELECT query with parameters (indicated by ?) that will be filled in during execution.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/prepare.rst#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nPREPARE my_select2 FROM\nSELECT name FROM nation WHERE regionkey = ? AND nationkey < ?;\n```\n\n----------------------------------------\n\nTITLE: Partial Casting of JSON Arrays and Maps with Mixed Types in Presto\nDESCRIPTION: Demonstrates partial casting of JSON arrays and maps with mixed element types by using the JSON type as the target element or value type. Useful when dealing with heterogeneous JSON structures.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/json.rst#2025-04-10_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSELECT CAST(JSON '[[1, 23], 456]' AS ARRAY(JSON)); -- [JSON '[1,23]', JSON '456']\nSELECT CAST(JSON '{\"k1\": [1, 23], \"k2\": 456}' AS MAP(VARCHAR, JSON)); -- {k1 = JSON '[1,23]', k2 = JSON '456'}\nSELECT CAST(JSON '[null]' AS ARRAY(JSON)); -- [JSON 'null']\n```\n\n----------------------------------------\n\nTITLE: Inserting a Row with Specified Columns in SQL\nDESCRIPTION: This snippet shows how to insert a single row into a table while specifying the column names explicitly in the INSERT statement.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/sql/insert.rst.txt#2025-04-10_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO nation (nationkey, name, regionkey, comment)\nVALUES (26, 'POLAND', 3, 'no comment');\n```\n\n----------------------------------------\n\nTITLE: Using URL Encoding/Decoding Functions in SQL\nDESCRIPTION: Functions for encoding and decoding URL strings, allowing proper handling of special characters in URLs.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.113.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nurl_encode\n```\n\nLANGUAGE: sql\nCODE:\n```\nurl_decode\n```\n\n----------------------------------------\n\nTITLE: Finding Maximum IP Address in Subnet using Presto SQL\nDESCRIPTION: Demonstrates the use of ip_subnet_max() function to find the largest IP address in a given subnet.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/ip.rst#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT ip_subnet_max(IPPREFIX '192.64.0.0/9'); -- {192.127.255.255}\nSELECT ip_subnet_max(IPPREFIX '2001:0db8:85a3:0001:0001:8a2e:0370:7334/48'); -- {2001:db8:85a3:ffff:ffff:ffff:ffff:ffff}\n```\n\n----------------------------------------\n\nTITLE: DROP ROLE Example - Presto SQL\nDESCRIPTION: Demonstrates dropping an 'admin' role from the current catalog.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/sql/drop-role.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nDROP ROLE admin;\n```\n\n----------------------------------------\n\nTITLE: Configuring View Security Model in Presto SQL\nDESCRIPTION: Shows how to specify DEFINER or INVOKER security models when creating a view in Presto, controlling permission handling for view queries.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.239.rst#2025-04-10_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE VIEW view_name\nSECURITY DEFINER\nAS\nSELECT * FROM table_name;\n```\n\n----------------------------------------\n\nTITLE: SHOW SESSION Command Syntax in Presto SQL\nDESCRIPTION: Shows the syntax for querying current session properties in Presto. The optional LIKE clause allows filtering properties based on a pattern match.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/show-session.rst#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSHOW SESSION [ LIKE pattern ]\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents for Presto Release Notes in reStructuredText\nDESCRIPTION: This code snippet defines a table of contents for Presto release notes using reStructuredText syntax. It includes release versions, dates, and links to individual release note files.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n    :maxdepth: 1\n\n    Release-0.291 [2025-01-27] <release/release-0.291>\n    Release-0.290 [2024-11-01] <release/release-0.290>\n    Release-0.289 [2024-08-23] <release/release-0.289>\n    Release-0.288.1 [2024-08-12] <release/release-0.288.1>\n    Release-0.288 [2024-06-13] <release/release-0.288>\n    Release-0.287 [2024-04-16] <release/release-0.287>\n    Release-0.286 [2024-02-12] <release/release-0.286>\n    Release-0.285.1 [2023-12-30] <release/release-0.285.1>\n    Release-0.285 [2023-12-08] <release/release-0.285>\n    Release-0.284 [2023-10-11] <release/release-0.284>\n    Release-0.283 [2023-08-08] <release/release-0.283>\n    release/release-0.282\n    release/release-0.281\n    release/release-0.280\n    release/release-0.279.2\n    release/release-0.279\n    release/release-0.278.1\n    release/release-0.278\n    release/release-0.277\n    release/release-0.276.1\n    release/release-0.276\n    release/release-0.275\n    release/release-0.274\n    release/release-0.273.3\n    release/release-0.273.2\n    release/release-0.273\n    release/release-0.272\n    release/release-0.271\n    release/release-0.270\n    release/release-0.269\n    release/release-0.268\n    release/release-0.267\n    release/release-0.266\n    release/release-0.265\n    release/release-0.264.1\n    release/release-0.264\n    release/release-0.263.1\n    release/release-0.263\n    release/release-0.262\n    release/release-0.261\n    release/release-0.260.1\n    release/release-0.260\n    release/release-0.259.1\n    release/release-0.259\n    release/release-0.258\n    release/release-0.257\n    release/release-0.256\n    release/release-0.255\n    release/release-0.254.1\n    release/release-0.254\n    release/release-0.253.1\n    release/release-0.253\n    release/release-0.252\n    release/release-0.251.1\n    release/release-0.251\n    release/release-0.250\n    release/release-0.249.2\n    release/release-0.249.1\n    release/release-0.249\n    release/release-0.248.1\n    release/release-0.248\n    release/release-0.247\n    release/release-0.246\n    release/release-0.245.1\n    release/release-0.245\n    release/release-0.244.1\n    release/release-0.244\n    release/release-0.243.4\n    release/release-0.243.3\n    release/release-0.243.2\n    release/release-0.243.1\n    release/release-0.243\n    release/release-0.242.1\n    release/release-0.242\n    release/release-0.241\n    release/release-0.240\n    release/release-0.239.2\n    release/release-0.239.1\n    release/release-0.239\n    release/release-0.238.3\n    release/release-0.238.2\n    release/release-0.238\n    release/release-0.237\n    release/release-0.236\n    release/release-0.235.1\n    release/release-0.235\n    release/release-0.234.3\n    release/release-0.234.2\n    release/release-0.234.1\n    release/release-0.234\n    release/release-0.233.1\n    release/release-0.233\n    release/release-0.232\n    release/release-0.231\n    release/release-0.230\n    release/release-0.229\n    release/release-0.228\n    release/release-0.227\n    release/release-0.226\n    release/release-0.225\n    release/release-0.224\n    release/release-0.223\n    release/release-0.222\n    release/release-0.221\n    release/release-0.220\n    release/release-0.219\n    release/release-0.218\n    release/release-0.217\n    release/release-0.216\n    release/release-0.215\n    release/release-0.214\n    release/release-0.213\n    release/release-0.212\n    release/release-0.211\n    release/release-0.210\n    release/release-0.209\n    release/release-0.208\n    release/release-0.207\n    release/release-0.206\n    release/release-0.205\n    release/release-0.204\n    release/release-0.203\n    release/release-0.202\n    release/release-0.201\n    release/release-0.200\n    release/release-0.199\n    release/release-0.198\n    release/release-0.197\n    release/release-0.196\n    release/release-0.195\n    release/release-0.194\n    release/release-0.193\n    release/release-0.192\n    release/release-0.191\n    release/release-0.190\n    release/release-0.189\n    release/release-0.188\n    release/release-0.187\n    release/release-0.186\n    release/release-0.185\n    release/release-0.184\n    release/release-0.183\n    release/release-0.182\n    release/release-0.181\n    release/release-0.180\n    release/release-0.179\n    release/release-0.178\n    release/release-0.177\n    release/release-0.176\n    release/release-0.175\n    release/release-0.174\n    release/release-0.173\n    release/release-0.172\n    release/release-0.171\n    release/release-0.170\n    release/release-0.169\n    release/release-0.168\n    release/release-0.167\n    release/release-0.166\n    release/release-0.165\n    release/release-0.164\n    release/release-0.163\n    release/release-0.162\n    release/release-0.161\n    release/release-0.160\n    release/release-0.159\n    release/release-0.158\n    release/release-0.157.1\n    release/release-0.157\n    release/release-0.156\n    release/release-0.155\n    release/release-0.154\n    release/release-0.153\n    release/release-0.152.3\n    release/release-0.152.2\n    release/release-0.152.1\n    release/release-0.152\n    release/release-0.151\n    release/release-0.150\n    release/release-0.149\n    release/release-0.148\n    release/release-0.147\n    release/release-0.146\n    release/release-0.145\n    release/release-0.144.7\n    release/release-0.144.6\n    release/release-0.144.5\n    release/release-0.144.4\n    release/release-0.144.3\n    release/release-0.144.2\n    release/release-0.144.1\n    release/release-0.144\n    release/release-0.143\n    release/release-0.142\n    release/release-0.141\n    release/release-0.140\n    release/release-0.139\n    release/release-0.138\n    release/release-0.137\n    release/release-0.136\n    release/release-0.135\n    release/release-0.134\n    release/release-0.133\n    release/release-0.132\n    release/release-0.131\n    release/release-0.130\n    release/release-0.129\n    release/release-0.128\n    release/release-0.127\n    release/release-0.126\n    release/release-0.125\n    release/release-0.124\n    release/release-0.123\n    release/release-0.122\n    release/release-0.121\n    release/release-0.120\n    release/release-0.119\n    release/release-0.118\n    release/release-0.117\n    release/release-0.116\n    release/release-0.115\n    release/release-0.114\n    release/release-0.113\n    release/release-0.112\n    release/release-0.111\n    release/release-0.110\n    release/release-0.109\n    release/release-0.108\n    release/release-0.107\n    release/release-0.106\n    release/release-0.105\n    release/release-0.104\n    release/release-0.103\n    release/release-0.102\n    release/release-0.101\n    release/release-0.100\n    release/release-0.99\n    release/release-0.98\n    release/release-0.97\n    release/release-0.96\n    release/release-0.95\n    release/release-0.94\n    release/release-0.93\n    release/release-0.92\n    release/release-0.91\n    release/release-0.90\n    release/release-0.89\n    release/release-0.88\n    release/release-0.87\n    release/release-0.86\n    release/release-0.85\n    release/release-0.84\n    release/release-0.83\n    release/release-0.82\n    release/release-0.81\n    release/release-0.80\n    release/release-0.79\n    release/release-0.78\n    release/release-0.77\n    release/release-0.76\n    release/release-0.75\n    release/release-0.74\n    release/release-0.73\n    release/release-0.72\n    release/release-0.71\n    release/release-0.70\n    release/release-0.69\n    release/release-0.68\n    release/release-0.67\n    release/release-0.66\n    release/release-0.65\n    release/release-0.64\n    release/release-0.63\n    release/release-0.62\n    release/release-0.61\n    release/release-0.60\n    release/release-0.59\n    release/release-0.58\n    release/release-0.57\n    release/release-0.56\n    release/release-0.55\n    release/release-0.54\n```\n\n----------------------------------------\n\nTITLE: Using URL Encoding/Decoding Functions in SQL\nDESCRIPTION: Functions for encoding and decoding URL strings, allowing proper handling of special characters in URLs.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.113.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nurl_encode\n```\n\nLANGUAGE: sql\nCODE:\n```\nurl_decode\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Trigonometric Function\nDESCRIPTION: Example of creating a tangent function in the example.default schema using basic trigonometric operations.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/sql/create-function.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCREATE FUNCTION example.default.tan(x double)\nRETURNS double\nDETERMINISTIC\nRETURNS NULL ON NULL INPUT\nRETURN sin(x) / cos(x)\n```\n\n----------------------------------------\n\nTITLE: TRUNCATE TABLE Example in Presto SQL\nDESCRIPTION: An example of using the TRUNCATE TABLE command to delete all rows from a table named 'orders' in Presto.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/truncate.rst#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nTRUNCATE TABLE orders;\n```\n\n----------------------------------------\n\nTITLE: Configuring Accumulo Connector Properties\nDESCRIPTION: Configuration properties for the Accumulo connector that should be added to etc/catalog/accumulo.properties file. These settings define the connection parameters for Presto to connect to Accumulo.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/accumulo.rst#2025-04-10_snippet_1\n\nLANGUAGE: none\nCODE:\n```\nconnector.name=accumulo\naccumulo.instance=xxx\naccumulo.zookeepers=xxx\naccumulo.username=username\naccumulo.password=password\n```\n\n----------------------------------------\n\nTITLE: Querying Partitions in SQL\nDESCRIPTION: References the SHOW PARTITIONS command, which had an issue with quoting in error messages that has been fixed in this release.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.203.rst#2025-04-10_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nSHOW PARTITIONS\n```\n\n----------------------------------------\n\nTITLE: Creating a View on an Iceberg Table\nDESCRIPTION: Example of creating a view for an Iceberg table. This shows the syntax for creating views in Hive, Glue, REST, and Nessie catalogs.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/iceberg.rst.txt#2025-04-10_snippet_40\n\nLANGUAGE: sql\nCODE:\n```\nCREATE VIEW iceberg.web.view_page_views AS SELECT user_id, country FROM iceberg.web.page_views;\n```\n\n----------------------------------------\n\nTITLE: Aggregating Weighted T-Digest in Presto SQL\nDESCRIPTION: Returns the T-digest composed of all input values of x using the per-item weight w. This function is used to create a weighted T-digest from a set of values and weights.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/tdigest.rst.txt#2025-04-10_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\ntdigest_agg(x, w) -> tdigest<double>\n```\n\n----------------------------------------\n\nTITLE: RST Table of Contents for Cache Documentation\nDESCRIPTION: ReStructuredText markup defining the navigation structure for cache-related documentation sections, including local and service cache topics.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/cache.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n    :maxdepth: 1\n\n    cache/local\n    cache/service\n```\n\n----------------------------------------\n\nTITLE: Inserting Data into Memory Connector Table in Presto\nDESCRIPTION: This SQL command inserts data into a table in the Memory connector by selecting from another source.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/memory.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO memory.default.nation\nSELECT * FROM tpch.tiny.nation;\n```\n\n----------------------------------------\n\nTITLE: Using DISTINCT Aggregates in SQL\nDESCRIPTION: Performance improvement for queries containing DISTINCT aggregates over the same column, optimizing the execution of such queries.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.190.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nDISTINCT\n```\n\n----------------------------------------\n\nTITLE: Validate Plan Example in Presto SQL\nDESCRIPTION: An example of the VALIDATE option for EXPLAIN, which checks if the query is valid and returns a boolean result.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/explain.rst#2025-04-10_snippet_4\n\nLANGUAGE: none\nCODE:\n```\npresto:tiny> EXPLAIN (TYPE VALIDATE) SELECT regionkey, count(*) FROM nation GROUP BY 1;\n result\n-------\n true\n```\n\n----------------------------------------\n\nTITLE: Forcing Exact Partitioning in Presto SQL\nDESCRIPTION: Enables forced repartitioning when possible, which can improve query performance in certain scenarios.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.232.rst.txt#2025-04-10_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nSET SESSION use_exact_partitioning = true;\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum Drivers in Presto\nDESCRIPTION: Defines the target number of running leaf splits on a worker. Affects resource utilization and responsiveness for new tasks.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/admin/properties.rst#2025-04-10_snippet_34\n\nLANGUAGE: properties\nCODE:\n```\ntask.min-drivers=task.max-worker-threads * 2\n```\n\n----------------------------------------\n\nTITLE: Getting Top N Keys with Custom Comparator in SQL\nDESCRIPTION: The map_top_n_keys function with a custom comparator allows applying a specific sorting logic to determine the top N keys from a map. The comparator function must return -1, 0, or 1 for less than, equal to, or greater than.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/map.rst#2025-04-10_snippet_13\n\nLANGUAGE: sql\nCODE:\n```\nSELECT map_top_n_keys(map(ARRAY['a', 'b', 'c'], ARRAY[3, 2, 1]), 2, (x, y) -> IF(x < y, -1, IF(x = y, 0, 1))) --- ['c', 'b']\n```\n\n----------------------------------------\n\nTITLE: Converting Pinot Binary Decimal to Double Precision in SQL\nDESCRIPTION: This function converts a Pinot binary decimal representation to a double precision floating point number. It uses the specified radix and scale parameters for the conversion. Additionally, it allows configuration of null handling behavior through the returnZeroOnNull parameter.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/pinot.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\npinot_binary_decimal_to_double(binary, bigIntegerRadix, scale, returnZeroOnNull) -> double\n```\n\n----------------------------------------\n\nTITLE: Warning about function namespace manager startup failure in RestructuredText\nDESCRIPTION: A warning notice about a bug causing startup failure when function namespace manager is enabled without Thrift configuration, with a reference to PR #15501.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.243.rst.txt#2025-04-10_snippet_3\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. warning::\n    There is a bug causing failure at startup if function namespace manager is enabled and Thrift is not configured (:pr:`15501`).\n```\n\n----------------------------------------\n\nTITLE: Analyzing Table Statistics in Presto Hive Connector\nDESCRIPTION: This SQL statement allows collecting statistics for specific partitions in the Hive connector. It demonstrates the syntax for using the ANALYZE statement with WITH properties to specify partitions.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.217.rst#2025-04-10_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nANALYZE table_name WITH (partitions = ARRAY['partition1', 'partition2', ...])\n```\n\n----------------------------------------\n\nTITLE: SQL ORDER BY LIMIT Syntax\nDESCRIPTION: Reference to ORDER BY LIMIT clause that previously had issues with limits greater than 2147483647.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.136.rst#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nORDER BY LIMIT\n```\n\n----------------------------------------\n\nTITLE: Creating a View for an Iceberg Table in Presto\nDESCRIPTION: Creates a view named 'view_page_views' that selects the user_id and country columns from the iceberg.web.page_views table. Views provide simplified access to specific data subsets.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/iceberg.rst#2025-04-10_snippet_43\n\nLANGUAGE: sql\nCODE:\n```\nCREATE VIEW iceberg.web.view_page_views AS SELECT user_id, country FROM iceberg.web.page_views;\n```\n\n----------------------------------------\n\nTITLE: Querying Data from Accumulo Table\nDESCRIPTION: SQL command to retrieve all data from an Accumulo table, showing the standard SELECT syntax for the connector.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/accumulo.rst#2025-04-10_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM myschema.scientists;\n```\n\n----------------------------------------\n\nTITLE: Altering MySQL Table Structure\nDESCRIPTION: SQL examples for modifying MySQL table structure including adding, renaming and dropping columns.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/mysql.rst#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE mysql.web.page_views ADD COLUMN zipcode VARCHAR;\nALTER TABLE mysql.web.page_views RENAME COLUMN zipcode TO location;\nALTER TABLE mysql.web.page_views DROP COLUMN location;\n```\n\n----------------------------------------\n\nTITLE: Using from_hex Function with Mixed Case Input in SQL\nDESCRIPTION: The from_hex function now supports mixed case input, allowing for more flexible hexadecimal string conversions in Presto queries.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.104.rst#2025-04-10_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nfrom_hex()\n```\n\n----------------------------------------\n\nTITLE: Simple CASE Expression Example in Presto SQL\nDESCRIPTION: Demonstrates using the simple form of CASE expression to map numeric values to text equivalents.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/conditional.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT a,\n       CASE a\n           WHEN 1 THEN 'one'\n           WHEN 2 THEN 'two'\n           ELSE 'many'\n       END\n```\n\n----------------------------------------\n\nTITLE: Accessing ORC Columns by Name in Hive Catalog\nDESCRIPTION: Configuration setting to enable accessing ORC columns by name instead of ordinal position in Hive tables. This is done by setting a property in the Hive catalog properties file.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.137.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: Properties\nCODE:\n```\nhive.orc.use-column-names=true\n```\n\n----------------------------------------\n\nTITLE: Create Schema with IF NOT EXISTS\nDESCRIPTION: Example of creating a schema with error suppression if it already exists.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/create-schema.rst#2025-04-10_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nCREATE SCHEMA IF NOT EXISTS traffic\n```\n\n----------------------------------------\n\nTITLE: Adding Partition Columns to Iceberg Tables\nDESCRIPTION: Examples of adding new columns as partition columns with different transform functions. This shows how to specify partitioning properties for new columns.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/iceberg.rst.txt#2025-04-10_snippet_45\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE iceberg.web.page_views ADD COLUMN zipcode VARCHAR WITH (partitioning = 'identity');\n\nALTER TABLE iceberg.web.page_views ADD COLUMN location VARCHAR WITH (partitioning = 'truncate(2)');\n\nALTER TABLE iceberg.web.page_views ADD COLUMN location VARCHAR WITH (partitioning = 'bucket(8)');\n\nALTER TABLE iceberg.web.page_views ADD COLUMN dt date WITH (partitioning = 'year');\n\nALTER TABLE iceberg.web.page_views ADD COLUMN ts timestamp WITH (partitioning = 'month');\n\nALTER TABLE iceberg.web.page_views ADD COLUMN dt date WITH (partitioning = 'day');\n\nALTER TABLE iceberg.web.page_views ADD COLUMN ts timestamp WITH (partitioning = 'hour');\n```\n\n----------------------------------------\n\nTITLE: Querying File Descriptor Counts from JMX in Presto\nDESCRIPTION: SQL query example showing how to retrieve the open and maximum file descriptor counts for each node in the Presto cluster using the JMX connector.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/jmx.rst#2025-04-10_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nSELECT openfiledescriptorcount, maxfiledescriptorcount\nFROM jmx.current.\"java.lang:type=operatingsystem\";\n```\n\n----------------------------------------\n\nTITLE: Configuring Delete Mode for Iceberg V2 Tables\nDESCRIPTION: Setting the delete_mode table property to change the row-level delete behavior from 'merge-on-read' to 'copy-on-write' in Iceberg V2 tables.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.287.rst.txt#2025-04-10_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE iceberg_v2_table (id bigint, data varchar)\n WITH (\n   format = 'PARQUET',\n   delete_mode = 'copy-on-write'\n );\n```\n\n----------------------------------------\n\nTITLE: Basic JMX Connector Configuration\nDESCRIPTION: Minimal configuration required to enable the JMX connector in Presto.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/jmx.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nconnector.name=jmx\n```\n\n----------------------------------------\n\nTITLE: Getting detailed summary of theta sketch in Presto\nDESCRIPTION: Returns a comprehensive summary of the input theta sketch including the distinct values estimate, theta parameter, error bounds, and retained entries.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/sketch.rst#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nsketch_theta_summary(sketch) -> row(estimate double, theta double, upper_bound_std double, lower_bound_std double, retained_entries int)\n```\n\n----------------------------------------\n\nTITLE: Extracting Millisecond in Presto SQL\nDESCRIPTION: The 'millisecond' function returns the millisecond of the second from a given time or timestamp value. The function returns a bigint value.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/datetime.rst.txt#2025-04-10_snippet_7\n\nLANGUAGE: SQL\nCODE:\n```\nmillisecond(x) -> bigint\n```\n\n----------------------------------------\n\nTITLE: Using Reduce Function with Lambda Expressions in SQL\nDESCRIPTION: Fix for query failures when using the reduce function with lambda expressions containing array_sort, shuffle, reverse, array_intersect, arrays_overlap, concat (for arrays), or map_concat functions.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.174.rst#2025-04-10_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT reduce(array[1, 2, 3], 0, (s, x) -> s + x, s -> s)\n```\n\n----------------------------------------\n\nTITLE: ROLLBACK Command Examples in SQL\nDESCRIPTION: Provides practical examples of using the ROLLBACK command in SQL, showing both the basic form and the form with the optional WORK keyword.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/sql/rollback.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nROLLBACK;\nROLLBACK WORK;\n```\n\n----------------------------------------\n\nTITLE: Scaling Quantile Digest in Presto SQL\nDESCRIPTION: This function returns a qdigest whose distribution has been scaled by a specified factor. It allows adjusting the distribution represented by the qdigest.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/qdigest.rst.txt#2025-04-10_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nscale_qdigest(qdigest(T), scale_factor) -> qdigest(T)\n```\n\n----------------------------------------\n\nTITLE: Combining Multiple Grouping Expressions in Presto SQL\nDESCRIPTION: Illustrates how to combine multiple grouping expressions in a single query, demonstrating cross-product semantics.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/select.rst#2025-04-10_snippet_12\n\nLANGUAGE: sql\nCODE:\n```\nSELECT origin_state, destination_state, origin_zip, sum(package_weight)\nFROM shipping\nGROUP BY\n    GROUPING SETS ((origin_state, destination_state)),\n    ROLLUP (origin_zip);\n```\n\n----------------------------------------\n\nTITLE: Parsing String to Date in Presto SQL\nDESCRIPTION: The to_date function parses a string into a DATE data type using the specified format string. It uses Teradata-compatible format specifiers.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/teradata.rst#2025-04-10_snippet_6\n\nLANGUAGE: SQL\nCODE:\n```\nto_date(string, format) -> date\n```\n\n----------------------------------------\n\nTITLE: Defining VARCHAR Type in SQL\nDESCRIPTION: Examples of defining VARCHAR types in SQL, including with and without length specifications. VARCHAR is used for variable-length character data.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/language/types.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nvarchar, varchar(20)\n```\n\n----------------------------------------\n\nTITLE: Revoking Role from User in Presto SQL\nDESCRIPTION: An example of revoking a role from a user in Presto SQL. This command revokes the 'bar' role from the user 'foo'.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/sql/revoke-roles.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nREVOKE bar FROM USER foo;\n```\n\n----------------------------------------\n\nTITLE: Deleting a Stage in Presto API (reStructuredText)\nDESCRIPTION: This API endpoint allows deleting a specific stage in a Presto query. It uses the DELETE method on the /v1/stage/{stageId} path, where {stageId} is the identifier of the stage to be deleted.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/rest/stage.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. function:: DELETE /v1/stage/{stageId}\n\n   Deletes a stage in a Presto query.\n```\n\n----------------------------------------\n\nTITLE: Importing Certificate to Java Truststore for Presto CLI\nDESCRIPTION: This command uses keytool to import a certificate into a custom truststore for the Presto CLI. It allows the CLI to trust the Presto coordinator when connecting via HTTPS.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/security/tls.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: none\nCODE:\n```\n$ keytool -import -v -trustcacerts -alias presto_trust -file presto_certificate.cer -keystore presto_trust.jks -keypass <truststore_pass>\n```\n\n----------------------------------------\n\nTITLE: Describing Table Structure in Accumulo\nDESCRIPTION: SQL command to view the structure of a table in Accumulo, showing column names, data types, and their mapping to Accumulo's internal storage format.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/accumulo.rst#2025-04-10_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nDESCRIBE myschema.scientists;\n```\n\n----------------------------------------\n\nTITLE: Querying Hudi Table with GROUP BY and HAVING Clauses\nDESCRIPTION: SQL query example showing how to query a Hudi Copy-On-Write table with GROUP BY and HAVING clauses to filter results for a specific stock symbol.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/hudi.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nUSE hudi.default;\nselect symbol, max(ts) from stock_ticks_cow group by symbol HAVING symbol = 'GOOG';\n```\n\n----------------------------------------\n\nTITLE: Getting Top N Values with Custom Comparator in SQL\nDESCRIPTION: The map_top_n_values function with a custom comparator allows applying a specific sorting logic to determine the top N values from a map. The comparator function must return -1, 0, or 1 for less than, equal to, or greater than.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/map.rst#2025-04-10_snippet_16\n\nLANGUAGE: sql\nCODE:\n```\nSELECT map_top_n_values(map(ARRAY['a', 'b', 'c'], ARRAY[1, 2, 3]), 2, (x, y) -> IF(x < y, -1, IF(x = y, 0, 1))) --- [3, 2]\n```\n\n----------------------------------------\n\nTITLE: HBO Session Properties\nDESCRIPTION: Session-level properties that override configuration properties for History Based Optimizations in Presto during specific query sessions.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/optimizer/history-based-optimization.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\nuse_history_based_plan_statistics=${optimizer.use-history-based-plan-statistics}\ntrack_history_based_plan_statistics=${optimizer.track-history-based-plan-statistics}\ntrack_history_stats_from_failed_queries=${optimizer.track-history-stats-from-failed-queries}\nhistory_based_optimizer_timeout_limit=${optimizer.history-based-optimizer-timeout}\nenforce_history_based_optimizer_register_timeout=${optimizer.enforce-timeout-for-hbo-query-registration}\nrestrict_history_based_optimization_to_complex_query=True\nhistory_input_table_statistics_matching_threshold=${hbo.history-matching-threshold}\ntreat-low-confidence-zero-estimation-as-unknown=${optimizer.treat-low-confidence-zero-estimation-as-unknown}\nconfidence-based-broadcast=${optimizer.confidence-based-broadcast}\n```\n\n----------------------------------------\n\nTITLE: Enabling CRC32 Checksum for Data Exchanges in Presto Configuration\nDESCRIPTION: This configuration snippet enables CRC32 checksum computation for data exchanges in Presto. It's disabled by default and can be enabled by setting this property.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.249.rst#2025-04-10_snippet_0\n\nLANGUAGE: Properties\nCODE:\n```\nexchange.checksum-enabled=true\n```\n\n----------------------------------------\n\nTITLE: Enabling Experimental T-Digest Functions in Presto SQL\nDESCRIPTION: Activates experimental t-digest functions for creating, merging, and querying t-digests. This requires enabling experimental functions.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.232.rst.txt#2025-04-10_snippet_5\n\nLANGUAGE: SQL\nCODE:\n```\nSET SESSION experimental_functions_enabled = true;\nSELECT tdigest_agg(column_name) FROM table_name;\n```\n\n----------------------------------------\n\nTITLE: Using reduce_agg for Sum Aggregation in Presto SQL\nDESCRIPTION: Example of using reduce_agg to sum values grouped by ID. The function takes an initial state of 0 and uses addition for both input and combine functions.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/aggregate.rst#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT id, reduce_agg(value, 0, (a, b) -> a + b, (a, b) -> a + b)\nFROM (\n    VALUES\n        (1, 2),\n        (1, 3),\n        (1, 4),\n        (2, 20),\n        (2, 30),\n        (2, 40)\n) AS t(id, value)\nGROUP BY id;\n-- (1, 9)\n-- (2, 90)\n```\n\n----------------------------------------\n\nTITLE: Formatting Hive Changes Section in reStructuredText\nDESCRIPTION: Defines a subsection for Hive-related changes in the release notes using reStructuredText syntax. It includes a bullet point describing a fix for reading specific ORC files and references a pull request number.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.244.1.rst#2025-04-10_snippet_2\n\nLANGUAGE: reStructuredText\nCODE:\n```\nHive Changes\n____________\n* Fix reading ORC files having MAP columns with MAP_FLAT encoding where all entries are empty maps (:pr:`15468`).\n```\n\n----------------------------------------\n\nTITLE: Utilizing array_distinct Function with Reduced Memory Usage in SQL\nDESCRIPTION: The array_distinct function has been optimized to use less memory, improving performance when removing duplicate elements from arrays in Presto queries.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.104.rst#2025-04-10_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\narray_distinct()\n```\n\n----------------------------------------\n\nTITLE: Configuring Pinot TopN Query Pushdown\nDESCRIPTION: Configuration property to enable pushing down TOPN queries to Pinot broker.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.242.rst.txt#2025-04-10_snippet_6\n\nLANGUAGE: properties\nCODE:\n```\npinot.pushdown-topn-broker-queries\n```\n\n----------------------------------------\n\nTITLE: Configuration Property Example - Cross Join Optimization\nDESCRIPTION: Session property to control optimization of cross joins with constant single row input\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.289.rst#2025-04-10_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\nremove_cross_join_with_constant_single_row_input = true\n```\n\n----------------------------------------\n\nTITLE: Revoking INSERT and SELECT Privileges in PrestoDB\nDESCRIPTION: Example showing how to revoke INSERT and SELECT privileges on the 'orders' table from user 'alice'.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/revoke.rst#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nREVOKE INSERT, SELECT ON orders FROM alice;\n```\n\n----------------------------------------\n\nTITLE: Creating an Internal Presto Accumulo Table\nDESCRIPTION: This SQL snippet demonstrates the creation of an internal table in Presto for Accumulo. It defines a table 'foo.bar' with VARCHAR, BIGINT, and DATE columns, and specifies index columns.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/accumulo.rst.txt#2025-04-10_snippet_28\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE foo.bar (a VARCHAR, b BIGINT, c DATE)\nWITH (\n    index_columns = 'b,c'\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Google Sheets Connector in Presto\nDESCRIPTION: This snippet shows the contents of the 'gsheets.properties' file used to configure the Google Sheets connector in Presto. It specifies the connector name, path to credentials, and metadata sheet ID.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/googlesheets.rst#2025-04-10_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nconnector.name=gsheets\ncredentials-path=/path/to/google-sheets-credentials.json\nmetadata-sheet-id=exampleId\n```\n\n----------------------------------------\n\nTITLE: Adding a Range Partition to an Existing Kudu Table\nDESCRIPTION: Example of using the add_range_partition procedure to add a new range partition to an existing Kudu table.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/kudu.rst#2025-04-10_snippet_12\n\nLANGUAGE: sql\nCODE:\n```\nCALL kudu.system.add_range_partition('myschema', 'events', '{\"lower\": \"2018-01-01\", \"upper\": \"2018-06-01\"}')\n```\n\n----------------------------------------\n\nTITLE: Checking Map Key Existence in SQL\nDESCRIPTION: The map_key_exists function checks whether a specific key exists in a map. It returns true if the key is present and false otherwise.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/map.rst#2025-04-10_snippet_11\n\nLANGUAGE: sql\nCODE:\n```\nSELECT map_key_exists(MAP(ARRAY['x','y'], ARRAY[100,200]), 'x'); -- TRUE\n```\n\n----------------------------------------\n\nTITLE: Generating Uniqueness Distribution with Custom Bucket Size\nDESCRIPTION: Returns the uniqueness histogram with a specified number of buckets. All uniqueness values greater than histogramSize are accumulated in the last bucket.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/khyperloglog.rst#2025-04-10_snippet_5\n\nLANGUAGE: SQL\nCODE:\n```\nuniqueness_distribution(khll, histogramSize)\n```\n\n----------------------------------------\n\nTITLE: Creating Aggregated View with Grouping\nDESCRIPTION: Shows how to create a view that performs aggregation on the orders table, grouping by date and calculating sum of prices.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/create-view.rst#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nCREATE VIEW orders_by_date AS\nSELECT orderdate, sum(totalprice) AS price\nFROM orders\nGROUP BY orderdate\n```\n\n----------------------------------------\n\nTITLE: Delete RowId Column Handle Method Signature\nDESCRIPTION: Method signature for retrieving the column handle used to identify rows for deletion operations.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/develop/delete-and-update.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nColumnHandle getDeleteRowIdColumnHandle(\n    ConnectorSession session,\n    ConnectorTableHandle tableHandle)\n```\n\n----------------------------------------\n\nTITLE: Inserting Data with INSERT Statement in SQL\nDESCRIPTION: This snippet shows the basic syntax for the INSERT statement in SQL. It allows inserting new rows into a table, optionally specifying the columns to insert into.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/sql/insert.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO table_name [ ( column [, ... ] ) ] query\n```\n\n----------------------------------------\n\nTITLE: Querying Prometheus Metrics with SQL in Presto\nDESCRIPTION: Example SQL query demonstrating how to query Prometheus metrics in Presto with a time window constraint. This query selects all fields from the 'up' metric table with a timestamp constraint to limit data volume.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/prometheus.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM prometheus.default.up WHERE timestamp > (NOW() - INTERVAL '10' second);\n```\n\n----------------------------------------\n\nTITLE: Querying Available Schemas in System Connector (SQL)\nDESCRIPTION: This SQL query lists all available schemas in the system catalog. It demonstrates how to interact with the System connector to retrieve basic structural information.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/system.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSHOW SCHEMAS FROM system;\n```\n\n----------------------------------------\n\nTITLE: Retrieving Specific Task Information Example Response (GET /v1/task/{taskId})\nDESCRIPTION: Detailed JSON response from the GET /v1/task/{taskId} endpoint showing comprehensive information about a specific task. Includes detailed metrics about the task execution, operators, pipelines, and data processing statistics.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/rest/task.rst#2025-04-10_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"taskId\" : \"20140115_170528_00004_dk5x2.0.0\",\n  \"version\" : 42,\n  \"state\" : \"FINISHED\",\n  \"self\" : \"http://10.193.207.128:8080/v1/task/20140115_170528_00004_dk5x2.0.0\",\n  \"lastHeartbeat\" : \"2014-01-15T12:12:12.518-05:00\",\n  \"outputBuffers\" : {\n    \"state\" : \"FINISHED\",\n    \"masterSequenceId\" : 0,\n    \"pagesAdded\" : 1,\n    \"buffers\" : [ {\n      \"bufferId\" : \"out\",\n      \"finished\" : true,\n      \"bufferedPages\" : 0,\n      \"pagesSent\" : 1\n    } ]\n  },\n  \"noMoreSplits\" : [ \"8\" ],\n  \"stats\" : {\n    \"createTime\" : \"2014-01-15T12:12:08.520-05:00\",\n    \"startTime\" : \"2014-01-15T12:12:08.526-05:00\",\n    \"endTime\" : \"2014-01-15T12:12:12.518-05:00\",\n    \"elapsedTime\" : \"4.00s\",\n    \"queuedTime\" : \"6.39ms\",\n    \"totalDrivers\" : 1,\n    \"queuedDrivers\" : 0,\n    \"runningDrivers\" : 0,\n    \"completedDrivers\" : 1,\n    \"memoryReservation\" : \"174.76kB\",\n    \"totalScheduledTime\" : \"4.19ms\",\n    \"totalCpuTime\" : \"4.09ms\",\n    \"totalBlockedTime\" : \"29.50ms\",\n    \"rawInputDataSize\" : \"10.90kB\",\n    \"rawInputPositions\" : 154,\n    \"processedInputDataSize\" : \"10.90kB\",\n    \"processedInputPositions\" : 154,\n    \"outputDataSize\" : \"10.90kB\",\n    \"outputPositions\" : 154,\n    \"pipelines\" : [ {\n      \"inputPipeline\" : true,\n      \"outputPipeline\" : true,\n      \"totalDrivers\" : 1,\n      \"queuedDrivers\" : 0,\n      \"runningDrivers\" : 0,\n      \"completedDrivers\" : 1,\n      \"memoryReservation\" : \"0B\",\n      \"queuedTime\" : {\n        \"maxError\" : 0.0,\n        \"count\" : 1.0,\n        \"total\" : 5857000.0,\n        \"p01\" : 5857000,\n        \"p05\" : 5857000,\n        \"p10\" : 5857000,\n        \"p25\" : 5857000,\n        \"p50\" : 5857000,\n        \"p75\" : 5857000,\n        \"p90\" : 5857000,\n        \"p95\" : 5857000,\n        \"p99\" : 5857000,\n        \"min\" : 5857000,\n        \"max\" : 5857000\n      },\n      \"elapsedTime\" : {\n        \"maxError\" : 0.0,\n        \"count\" : 1.0,\n        \"total\" : 4.1812E7,\n        \"p01\" : 41812000,\n        \"p05\" : 41812000,\n        \"p10\" : 41812000,\n        \"p25\" : 41812000,\n        \"p50\" : 41812000,\n        \"p75\" : 41812000,\n        \"p90\" : 41812000,\n        \"p95\" : 41812000,\n        \"p99\" : 41812000,\n        \"min\" : 41812000,\n        \"max\" : 41812000\n      },\n      \"totalScheduledTime\" : \"4.19ms\",\n      \"totalCpuTime\" : \"4.09ms\",\n      \"totalBlockedTime\" : \"29.50ms\",\n      \"rawInputDataSize\" : \"10.90kB\",\n      \"rawInputPositions\" : 154,\n      \"processedInputDataSize\" : \"10.90kB\",\n      \"processedInputPositions\" : 154,\n      \"outputDataSize\" : \"10.90kB\",\n      \"outputPositions\" : 154,\n      \"operatorSummaries\" : [ {\n        \"operatorId\" : 0,\n        \"operatorType\" : \"ExchangeOperator\",\n        \"addInputCalls\" : 0,\n        \"addInputWall\" : \"0.00ns\",\n        \"addInputCpu\" : \"0.00ns\",\n        \"addInputUser\" : \"0.00ns\",\n        \"inputDataSize\" : \"10.90kB\",\n        \"inputPositions\" : 154,\n        \"getOutputCalls\" : 1,\n        \"getOutputWall\" : \"146.00us\",\n        \"getOutputCpu\" : \"137.90us\",\n        \"getOutputUser\" : \"0.00ns\",\n        \"outputDataSize\" : \"10.90kB\",\n        \"outputPositions\" : 154,\n        \"blockedWall\" : \"29.50ms\",\n        \"finishCalls\" : 0,\n        \"finishWall\" : \"0.00ns\",\n        \"finishCpu\" : \"0.00ns\",\n        \"finishUser\" : \"0.00ns\",\n        \"memoryReservation\" : \"0B\",\n        \"info\" : {\n          \"bufferedBytes\" : 0,\n          \"averageBytesPerRequest\" : 11158,\n          \"bufferedPages\" : 0,\n          \"pageBufferClientStatuses\" : [ {\n            \"uri\" : \"http://10.193.207.128:8080/v1/task/20140115_170528_00004_dk5x2.1.0/results/ab68e201-3878-4b21-b6b9-f6658ddc408b\",\n            \"state\" : \"closed\",\n            \"lastUpdate\" : \"2014-01-15T12:12:08.562-05:00\",\n            \"pagesReceived\" : 1,\n            \"requestsScheduled\" : 3,\n            \"requestsCompleted\" : 3,\n            \"httpRequestState\" : \"queued\"\n          } ]\n        }\n      }, {\n        \"operatorId\" : 1,\n        \"operatorType\" : \"FilterAndProjectOperator\",\n        \"addInputCalls\" : 1,\n        \"addInputWall\" : \"919.00us\",\n        \"addInputCpu\" : \"919.38us\",\n        \"addInputUser\" : \"0.00ns\",\n        \"inputDataSize\" : \"10.90kB\",\n        \"inputPositions\" : 154,\n        \"getOutputCalls\" : 2,\n        \"getOutputWall\" : \"128.00us\",\n        \"getOutputCpu\" : \"128.64us\",\n        \"getOutputUser\" : \"0.00ns\",\n        \"outputDataSize\" : \"10.45kB\",\n        \"outputPositions\" : 154,\n        \"blockedWall\" : \"0.00ns\",\n        \"finishCalls\" : 5,\n        \"finishWall\" : \"258.00us\",\n        \"finishCpu\" : \"253.19us\",\n        \"finishUser\" : \"0.00ns\",\n        \"memoryReservation\" : \"0B\"\n      }, {\n        \"operatorId\" : 2,\n        \"operatorType\" : \"OrderByOperator\",\n        \"addInputCalls\" : 1,\n        \"addInputWall\" : \"438.00us\",\n        \"addInputCpu\" : \"439.18us\",\n        \"addInputUser\" : \"0.00ns\",\n        \"inputDataSize\" : \"10.45kB\",\n        \"inputPositions\" : 154,\n        \"getOutputCalls\" : 4,\n        \"getOutputWall\" : \"869.00us\",\n        \"getOutputCpu\" : \"831.85us\",\n        \"getOutputUser\" : \"0.00ns\",\n        \"outputDataSize\" : \"10.45kB\",\n        \"outputPositions\" : 154,\n        \"blockedWall\" : \"0.00ns\",\n        \"finishCalls\" : 4,\n        \"finishWall\" : \"808.00us\",\n        \"finishCpu\" : \"810.18us\",\n        \"finishUser\" : \"0.00ns\",\n        \"memoryReservation\" : \"174.76kB\"\n      }, {\n        \"operatorId\" : 3,\n        \"operatorType\" : \"FilterAndProjectOperator\",\n        \"addInputCalls\" : 1,\n        \"addInputWall\" : \"166.00us\",\n        \"addInputCpu\" : \"166.66us\",\n        \"addInputUser\" : \"0.00ns\",\n        \"inputDataSize\" : \"10.45kB\",\n        \"inputPositions\" : 154,\n        \"getOutputCalls\" : 5,\n        \"getOutputWall\" : \"305.00us\",\n        \"getOutputCpu\" : \"241.14us\",\n        \"getOutputUser\" : \"0.00ns\",\n        \"outputDataSize\" : \"10.90kB\",\n        \"outputPositions\" : 154,\n        \"blockedWall\" : \"0.00ns\",\n        \"finishCalls\" : 2,\n        \"finishWall\" : \"70.00us\",\n        \"finishCpu\" : \"71.02us\",\n        \"finishUser\" : \"0.00ns\",\n        \"memoryReservation\" : \"0B\"\n      }, {\n        \"operatorId\" : 4,\n        \"operatorType\" : \"TaskOutputOperator\",\n        \"addInputCalls\" : 1,\n        \"addInputWall\" : \"50.00us\",\n        \"addInputCpu\" : \"51.03us\",\n        \"addInputUser\" : \"0.00ns\",\n        \"inputDataSize\" : \"10.90kB\",\n        \"inputPositions\" : 154,\n        \"getOutputCalls\" : 0,\n        \"getOutputWall\" : \"0.00ns\",\n        \"getOutputCpu\" : \"0.00ns\",\n        \"getOutputUser\" : \"0.00ns\",\n        \"outputDataSize\" : \"10.90kB\",\n        \"outputPositions\" : 154,\n        \"blockedWall\" : \"0.00ns\",\n        \"finishCalls\" : 1,\n        \"finishWall\" : \"35.00us\",\n        \"finishCpu\" : \"35.39us\",\n        \"finishUser\" : \"0.00ns\",\n        \"memoryReservation\" : \"0B\"\n      } ],\n      \"drivers\" : [ ]\n    } ]\n  },\n  \"failures\" : [ ],\n  \"outputs\" : { }\n}\n```\n\n----------------------------------------\n\nTITLE: Using trimmed_mean Function with tdigest Type in Presto\nDESCRIPTION: The trimmed_mean function calculates the mean of a tdigest distribution after removing outliers. This function works with the tdigest aggregate type in Presto.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.275.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\ntrimmed_mean\n```\n\n----------------------------------------\n\nTITLE: Enabling Storage-Based Broadcast Join in Presto on Spark Session\nDESCRIPTION: This session property enables support for distributing broadcast tables using persistent storage in Presto on Spark, removing the Spark driver from the distribution flow.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.249.rst#2025-04-10_snippet_3\n\nLANGUAGE: Properties\nCODE:\n```\nstorage_based_broadcast_join_enabled=true\n```\n\n----------------------------------------\n\nTITLE: Disabling Eager Memory Freeing Configuration\nDESCRIPTION: Configuration property to disable eager memory freeing in exchange operations for dynamic writer scaling.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.196.rst#2025-04-10_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\nexchange.acknowledge-pages=false\n```\n\n----------------------------------------\n\nTITLE: Creating a Table with VALUES in Presto SQL\nDESCRIPTION: Uses CREATE TABLE AS with VALUES to create and populate a new table with named columns in one statement.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/sql/values.rst.txt#2025-04-10_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE example AS\nSELECT * FROM (\n    VALUES\n        (1, 'a'),\n        (2, 'b'),\n        (3, 'c')\n) AS t (id, name)\n```\n\n----------------------------------------\n\nTITLE: Floating Point Functions\nDESCRIPTION: Utility functions for handling floating-point operations and special values like infinity and NaN.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/math.rst.txt#2025-04-10_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\ninfinity() -> double\n```\n\nLANGUAGE: sql\nCODE:\n```\nis_finite(x) -> boolean\n```\n\nLANGUAGE: sql\nCODE:\n```\nis_infinite(x) -> boolean\n```\n\nLANGUAGE: sql\nCODE:\n```\nis_nan(x) -> boolean\n```\n\nLANGUAGE: sql\nCODE:\n```\nnan() -> double\n```\n\n----------------------------------------\n\nTITLE: Querying Differential Entropy with Maximum Likelihood Estimation\nDESCRIPTION: Example of calculating differential entropy using fixed histogram with maximum likelihood estimation for data between -2.0 and 2.0.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/aggregate.rst#2025-04-10_snippet_11\n\nLANGUAGE: none\nCODE:\n```\nSELECT\n    differential_entropy(1000000, x, weight, 'fixed_histogram_mle', -2.0, 2.0)\nFROM\n    data\n```\n\n----------------------------------------\n\nTITLE: DROP ROLE Syntax - Presto SQL\nDESCRIPTION: Shows the basic syntax for dropping a role in Presto. The command requires appropriate admin privileges to execute successfully.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/sql/drop-role.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nDROP ROLE role_name\n```\n\n----------------------------------------\n\nTITLE: Computing Jaccard Index\nDESCRIPTION: Calculates the Jaccard index between two KHyperLogLog structures using their MinHash representations.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/khyperloglog.rst.txt#2025-04-10_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\njaccard_index(khll1, khll2)\n```\n\n----------------------------------------\n\nTITLE: Create Basic Schema in Current Catalog\nDESCRIPTION: Example of creating a simple schema named 'web' in the current catalog context.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/create-schema.rst#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nCREATE SCHEMA web\n```\n\n----------------------------------------\n\nTITLE: Granting SELECT Privilege to PUBLIC Role in Presto SQL\nDESCRIPTION: Example of granting SELECT privilege on the 'orders' table to the PUBLIC role, effectively granting it to all users.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/grant.rst#2025-04-10_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nGRANT SELECT ON orders TO ROLE PUBLIC;\n```\n\n----------------------------------------\n\nTITLE: Extracting Second in Presto SQL\nDESCRIPTION: The 'second' function returns the second of the minute from a given time or timestamp value. The function returns a bigint value.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/datetime.rst.txt#2025-04-10_snippet_11\n\nLANGUAGE: SQL\nCODE:\n```\nsecond(x) -> bigint\n```\n\n----------------------------------------\n\nTITLE: Altering Function Without Parameter Type List in Presto SQL\nDESCRIPTION: Example of altering a function without specifying parameter types, which is only possible when exactly one function signature exists for the given name. This simplified syntax achieves the same result as the previous example.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/sql/alter-function.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nALTER FUNCTION prod.default.tan\nCALLED ON NULL INPUT\n```\n\n----------------------------------------\n\nTITLE: Enabling Optimized RCFile Reader in Hive\nDESCRIPTION: Configuration option to enable the new experimental optimized RCFile reader in Hive.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.79.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nhive.optimized-reader.enabled\n```\n\n----------------------------------------\n\nTITLE: Starting Kafka Server in Bash\nDESCRIPTION: Command to start the Kafka server, specifying the server properties configuration file.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/kafka-tutorial.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/kafka-server-start.sh config/server.properties\n```\n\n----------------------------------------\n\nTITLE: Adding Redis Connector in Presto SQL\nDESCRIPTION: Introduces a new Redis connector for Presto, allowing integration with Redis databases.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.119.rst#2025-04-10_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nAdd :doc:`/connector/redis`\n```\n\n----------------------------------------\n\nTITLE: Using INCLUDING, EXCLUDING, and PROPERTIES Keywords in Presto SQL\nDESCRIPTION: These keywords (INCLUDING, EXCLUDING, and PROPERTIES) are now non-reserved in Presto SQL, allowing for more flexible query writing and reducing potential conflicts with column or table names.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.155.rst#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nINCLUDING\nEXCLUDING\nPROPERTIES\n```\n\n----------------------------------------\n\nTITLE: Retrieving Specific Task Information Example Response (GET /v1/task/{taskId})\nDESCRIPTION: Detailed JSON response from the GET /v1/task/{taskId} endpoint showing comprehensive information about a specific task. Includes detailed metrics about the task execution, operators, pipelines, and data processing statistics.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/rest/task.rst#2025-04-10_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"taskId\" : \"20140115_170528_00004_dk5x2.0.0\",\n  \"version\" : 42,\n  \"state\" : \"FINISHED\",\n  \"self\" : \"http://10.193.207.128:8080/v1/task/20140115_170528_00004_dk5x2.0.0\",\n  \"lastHeartbeat\" : \"2014-01-15T12:12:12.518-05:00\",\n  \"outputBuffers\" : {\n    \"state\" : \"FINISHED\",\n    \"masterSequenceId\" : 0,\n    \"pagesAdded\" : 1,\n    \"buffers\" : [ {\n      \"bufferId\" : \"out\",\n      \"finished\" : true,\n      \"bufferedPages\" : 0,\n      \"pagesSent\" : 1\n    } ]\n  },\n  \"noMoreSplits\" : [ \"8\" ],\n  \"stats\" : {\n    \"createTime\" : \"2014-01-15T12:12:08.520-05:00\",\n    \"startTime\" : \"2014-01-15T12:12:08.526-05:00\",\n    \"endTime\" : \"2014-01-15T12:12:12.518-05:00\",\n    \"elapsedTime\" : \"4.00s\",\n    \"queuedTime\" : \"6.39ms\",\n    \"totalDrivers\" : 1,\n    \"queuedDrivers\" : 0,\n    \"runningDrivers\" : 0,\n    \"completedDrivers\" : 1,\n    \"memoryReservation\" : \"174.76kB\",\n    \"totalScheduledTime\" : \"4.19ms\",\n    \"totalCpuTime\" : \"4.09ms\",\n    \"totalBlockedTime\" : \"29.50ms\",\n    \"rawInputDataSize\" : \"10.90kB\",\n    \"rawInputPositions\" : 154,\n    \"processedInputDataSize\" : \"10.90kB\",\n    \"processedInputPositions\" : 154,\n    \"outputDataSize\" : \"10.90kB\",\n    \"outputPositions\" : 154,\n    \"pipelines\" : [ {\n      \"inputPipeline\" : true,\n      \"outputPipeline\" : true,\n      \"totalDrivers\" : 1,\n      \"queuedDrivers\" : 0,\n      \"runningDrivers\" : 0,\n      \"completedDrivers\" : 1,\n      \"memoryReservation\" : \"0B\",\n      \"queuedTime\" : {\n        \"maxError\" : 0.0,\n        \"count\" : 1.0,\n        \"total\" : 5857000.0,\n        \"p01\" : 5857000,\n        \"p05\" : 5857000,\n        \"p10\" : 5857000,\n        \"p25\" : 5857000,\n        \"p50\" : 5857000,\n        \"p75\" : 5857000,\n        \"p90\" : 5857000,\n        \"p95\" : 5857000,\n        \"p99\" : 5857000,\n        \"min\" : 5857000,\n        \"max\" : 5857000\n      },\n      \"elapsedTime\" : {\n        \"maxError\" : 0.0,\n        \"count\" : 1.0,\n        \"total\" : 4.1812E7,\n        \"p01\" : 41812000,\n        \"p05\" : 41812000,\n        \"p10\" : 41812000,\n        \"p25\" : 41812000,\n        \"p50\" : 41812000,\n        \"p75\" : 41812000,\n        \"p90\" : 41812000,\n        \"p95\" : 41812000,\n        \"p99\" : 41812000,\n        \"min\" : 41812000,\n        \"max\" : 41812000\n      },\n      \"totalScheduledTime\" : \"4.19ms\",\n      \"totalCpuTime\" : \"4.09ms\",\n      \"totalBlockedTime\" : \"29.50ms\",\n      \"rawInputDataSize\" : \"10.90kB\",\n      \"rawInputPositions\" : 154,\n      \"processedInputDataSize\" : \"10.90kB\",\n      \"processedInputPositions\" : 154,\n      \"outputDataSize\" : \"10.90kB\",\n      \"outputPositions\" : 154,\n      \"operatorSummaries\" : [ {\n        \"operatorId\" : 0,\n        \"operatorType\" : \"ExchangeOperator\",\n        \"addInputCalls\" : 0,\n        \"addInputWall\" : \"0.00ns\",\n        \"addInputCpu\" : \"0.00ns\",\n        \"addInputUser\" : \"0.00ns\",\n        \"inputDataSize\" : \"10.90kB\",\n        \"inputPositions\" : 154,\n        \"getOutputCalls\" : 1,\n        \"getOutputWall\" : \"146.00us\",\n        \"getOutputCpu\" : \"137.90us\",\n        \"getOutputUser\" : \"0.00ns\",\n        \"outputDataSize\" : \"10.90kB\",\n        \"outputPositions\" : 154,\n        \"blockedWall\" : \"29.50ms\",\n        \"finishCalls\" : 0,\n        \"finishWall\" : \"0.00ns\",\n        \"finishCpu\" : \"0.00ns\",\n        \"finishUser\" : \"0.00ns\",\n        \"memoryReservation\" : \"0B\",\n        \"info\" : {\n          \"bufferedBytes\" : 0,\n          \"averageBytesPerRequest\" : 11158,\n          \"bufferedPages\" : 0,\n          \"pageBufferClientStatuses\" : [ {\n            \"uri\" : \"http://10.193.207.128:8080/v1/task/20140115_170528_00004_dk5x2.1.0/results/ab68e201-3878-4b21-b6b9-f6658ddc408b\",\n            \"state\" : \"closed\",\n            \"lastUpdate\" : \"2014-01-15T12:12:08.562-05:00\",\n            \"pagesReceived\" : 1,\n            \"requestsScheduled\" : 3,\n            \"requestsCompleted\" : 3,\n            \"httpRequestState\" : \"queued\"\n          } ]\n        }\n      }, {\n        \"operatorId\" : 1,\n        \"operatorType\" : \"FilterAndProjectOperator\",\n        \"addInputCalls\" : 1,\n        \"addInputWall\" : \"919.00us\",\n        \"addInputCpu\" : \"919.38us\",\n        \"addInputUser\" : \"0.00ns\",\n        \"inputDataSize\" : \"10.90kB\",\n        \"inputPositions\" : 154,\n        \"getOutputCalls\" : 2,\n        \"getOutputWall\" : \"128.00us\",\n        \"getOutputCpu\" : \"128.64us\",\n        \"getOutputUser\" : \"0.00ns\",\n        \"outputDataSize\" : \"10.45kB\",\n        \"outputPositions\" : 154,\n        \"blockedWall\" : \"0.00ns\",\n        \"finishCalls\" : 5,\n        \"finishWall\" : \"258.00us\",\n        \"finishCpu\" : \"253.19us\",\n        \"finishUser\" : \"0.00ns\",\n        \"memoryReservation\" : \"0B\"\n      }, {\n        \"operatorId\" : 2,\n        \"operatorType\" : \"OrderByOperator\",\n        \"addInputCalls\" : 1,\n        \"addInputWall\" : \"438.00us\",\n        \"addInputCpu\" : \"439.18us\",\n        \"addInputUser\" : \"0.00ns\",\n        \"inputDataSize\" : \"10.45kB\",\n        \"inputPositions\" : 154,\n        \"getOutputCalls\" : 4,\n        \"getOutputWall\" : \"869.00us\",\n        \"getOutputCpu\" : \"831.85us\",\n        \"getOutputUser\" : \"0.00ns\",\n        \"outputDataSize\" : \"10.45kB\",\n        \"outputPositions\" : 154,\n        \"blockedWall\" : \"0.00ns\",\n        \"finishCalls\" : 4,\n        \"finishWall\" : \"808.00us\",\n        \"finishCpu\" : \"810.18us\",\n        \"finishUser\" : \"0.00ns\",\n        \"memoryReservation\" : \"174.76kB\"\n      }, {\n        \"operatorId\" : 3,\n        \"operatorType\" : \"FilterAndProjectOperator\",\n        \"addInputCalls\" : 1,\n        \"addInputWall\" : \"166.00us\",\n        \"addInputCpu\" : \"166.66us\",\n        \"addInputUser\" : \"0.00ns\",\n        \"inputDataSize\" : \"10.45kB\",\n        \"inputPositions\" : 154,\n        \"getOutputCalls\" : 5,\n        \"getOutputWall\" : \"305.00us\",\n        \"getOutputCpu\" : \"241.14us\",\n        \"getOutputUser\" : \"0.00ns\",\n        \"outputDataSize\" : \"10.90kB\",\n        \"outputPositions\" : 154,\n        \"blockedWall\" : \"0.00ns\",\n        \"finishCalls\" : 2,\n        \"finishWall\" : \"70.00us\",\n        \"finishCpu\" : \"71.02us\",\n        \"finishUser\" : \"0.00ns\",\n        \"memoryReservation\" : \"0B\"\n      }, {\n        \"operatorId\" : 4,\n        \"operatorType\" : \"TaskOutputOperator\",\n        \"addInputCalls\" : 1,\n        \"addInputWall\" : \"50.00us\",\n        \"addInputCpu\" : \"51.03us\",\n        \"addInputUser\" : \"0.00ns\",\n        \"inputDataSize\" : \"10.90kB\",\n        \"inputPositions\" : 154,\n        \"getOutputCalls\" : 0,\n        \"getOutputWall\" : \"0.00ns\",\n        \"getOutputCpu\" : \"0.00ns\",\n        \"getOutputUser\" : \"0.00ns\",\n        \"outputDataSize\" : \"10.90kB\",\n        \"outputPositions\" : 154,\n        \"blockedWall\" : \"0.00ns\",\n        \"finishCalls\" : 1,\n        \"finishWall\" : \"35.00us\",\n        \"finishCpu\" : \"35.39us\",\n        \"finishUser\" : \"0.00ns\",\n        \"memoryReservation\" : \"0B\"\n      } ],\n      \"drivers\" : [ ]\n    } ]\n  },\n  \"failures\" : [ ],\n  \"outputs\" : { }\n}\n```\n\n----------------------------------------\n\nTITLE: Using concat() Function with Array Types\nDESCRIPTION: Function for concatenating arrays that may cause query failures in Presto 0.132, fixed in release 0.133.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.132.rst#2025-04-10_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nconcat()\n```\n\n----------------------------------------\n\nTITLE: Enabling Spill Encryption in Presto SQL\nDESCRIPTION: Enables encryption of spill contents with a randomly generated secret key. This property is defined in the tuning-spilling section.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/admin/spill.rst#2025-04-10_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nspill-encryption-enabled=true\n```\n\n----------------------------------------\n\nTITLE: Enabling Legacy Scheduler in Presto SQL\nDESCRIPTION: Activates the legacy version of the query scheduler, which can be used as a rollback option in case of issues with the new scheduler.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.232.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nSET SESSION use_legacy_scheduler = true;\n```\n\n----------------------------------------\n\nTITLE: Configuring S3 User Agent Prefix in Hive Connector\nDESCRIPTION: Sets the user agent prefix for S3 requests in the Hive connector using the 'hive.s3.user-agent-prefix' configuration property.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.153.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: Properties\nCODE:\n```\nhive.s3.user-agent-prefix=custom-prefix\n```\n\n----------------------------------------\n\nTITLE: Configuring Hive Connector File Renaming\nDESCRIPTION: Configuration property to enable file renaming support in Hive connector.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.242.rst.txt#2025-04-10_snippet_3\n\nLANGUAGE: properties\nCODE:\n```\nhive.file_renaming_enabled\n```\n\n----------------------------------------\n\nTITLE: Implementing Operator Dependent Function in Presto\nDESCRIPTION: Implementation of is_equal_or_null function that requires an equals operator dependency for the type parameter.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/develop/functions.rst#2025-04-10_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n@ScalarFunction(name = \"is_equal_or_null\", calledOnNullInput = true)\n@Description(\"Returns TRUE if arguments are equal or both NULL\")\npublic final class IsEqualOrNullFunction\n{\n    @TypeParameter(\"T\")\n    @SqlType(StandardTypes.BOOLEAN)\n    public static boolean isEqualOrNullSlice(\n            @OperatorDependency(operator = OperatorType.EQUAL, returnType = StandardTypes.BOOLEAN, argumentTypes = {\"T\", \"T\"}) MethodHandle equals,\n            @SqlNullable @SqlType(\"T\") Slice value1,\n            @SqlNullable @SqlType(\"T\") Slice value2)\n    {\n        if (value1 == null && value2 == null) {\n            return true;\n        }\n        if (value1 == null || value2 == null) {\n            return false;\n        }\n        return (boolean) equals.invokeExact(value1, value2);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Revoking INSERT and SELECT Privileges in PrestoDB\nDESCRIPTION: Example showing how to revoke INSERT and SELECT privileges on the 'orders' table from user 'alice'.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/revoke.rst#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nREVOKE INSERT, SELECT ON orders FROM alice;\n```\n\n----------------------------------------\n\nTITLE: Table Description Output Format\nDESCRIPTION: Output of the DESCRIBE command showing how Presto columns map to Accumulo storage, including which column is used as the row ID and whether columns are indexed.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/accumulo.rst#2025-04-10_snippet_4\n\nLANGUAGE: none\nCODE:\n```\n  Column   |  Type   | Extra |                      Comment\n-----------+---------+-------+---------------------------------------------------\n recordkey | varchar |       | Accumulo row ID\n name      | varchar |       | Accumulo column name:name. Indexed: false\n age       | bigint  |       | Accumulo column age:age. Indexed: false\n birthday  | date    |       | Accumulo column birthday:birthday. Indexed: false\n```\n\n----------------------------------------\n\nTITLE: Query Result for Symbol Filtering\nDESCRIPTION: The result of querying a Hudi table filtered by the GOOG symbol, showing the date and symbol columns in tabular format.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/hudi.rst.txt#2025-04-10_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n    dt      | symbol |\n------------+--------+\n 2018-08-31 |  GOOG  |\n(1 rows)\n```\n\n----------------------------------------\n\nTITLE: Enabling Constraint Optimizations in Presto SQL\nDESCRIPTION: Demonstrates how to enable constraint optimizations to improve performance for querying catalogs that support table constraints. This can be done using a session property or configuration property.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.274.rst#2025-04-10_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nSET SESSION exploit_constraints = true;\n```\n\nLANGUAGE: Properties\nCODE:\n```\noptimizer.exploit-constraints=true\n```\n\n----------------------------------------\n\nTITLE: Configuring Maximum Worker Threads in Presto\nDESCRIPTION: Sets the number of threads used by workers to process splits. Can be set as an absolute value or relative to CPU cores.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/admin/properties.rst#2025-04-10_snippet_33\n\nLANGUAGE: properties\nCODE:\n```\ntask.max-worker-threads=Node CPUs * 2\n```\n\n----------------------------------------\n\nTITLE: Configuring File-Based Resource Group Manager in JSON\nDESCRIPTION: Example JSON configuration for a file-based resource group manager in PrestoDB, showing a hierarchical structure of resource groups with different properties and concurrency limits.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/admin/resource-groups.rst.txt#2025-04-10_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n.. literalinclude:: resources-groups-example.json\n   :language: json\n```\n\n----------------------------------------\n\nTITLE: Revoking admin option for multiple roles in PrestoDB SQL\nDESCRIPTION: Example of revoking the admin option for roles 'bar' and 'foo' from user 'baz' and role 'qux' using the REVOKE command in PrestoDB.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/revoke-roles.rst#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nREVOKE ADMIN OPTION FOR bar, foo FROM USER baz, ROLE qux;\n```\n\n----------------------------------------\n\nTITLE: Converting UUID to VARCHAR\nDESCRIPTION: Example of casting the UUID function result to VARCHAR type, which might be needed for existing use cases after the function type change in Accumulo connector.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.269.rst#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCAST(UUID() AS VARCHAR)\n```\n\n----------------------------------------\n\nTITLE: Inverse Distribution Functions\nDESCRIPTION: Functions for computing inverse cumulative distribution functions (CDFs) for various probability distributions including Poisson and Weibull.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/math.rst#2025-04-10_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\ninverse_poisson_cdf(lambda, p) -> integer\ninverse_weibull_cdf(a, b, p) -> double\n```\n\n----------------------------------------\n\nTITLE: Calculating Reidentification Potential\nDESCRIPTION: Computes the ratio of x values that have uniqueness below a specified threshold.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/khyperloglog.rst.txt#2025-04-10_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nreidentification_potential(khll, threshold)\n```\n\n----------------------------------------\n\nTITLE: Creating and Configuring Resource Groups in Presto SQL\nDESCRIPTION: This code snippet demonstrates how to create and configure various resource groups in Presto using SQL INSERT statements. It sets up groups with different memory limits, concurrency limits, queuing parameters, and parent-child relationships.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/admin/resource-groups.rst.txt#2025-04-10_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO resource_groups (name, soft_memory_limit, hard_concurrency_limit, max_queued, scheduling_weight, scheduling_policy, environment, parent) VALUES ('other', '10%', 2, 1, 10, 'weighted_fair', 'test_environment', 3);\n\n-- get ID of 'other' group\nSELECT resource_group_id FROM resource_groups WHERE name = 'other';  -- 4\n-- create '${USER}' group with 'other' as parent.\nINSERT INTO resource_groups (name, soft_memory_limit, hard_concurrency_limit, max_queued, environment, parent) VALUES ('${USER}', '10%', 1, 100, 'test_environment', 4);\n\n-- create 'bi-${toolname}' group with 'adhoc' as parent\nINSERT INTO resource_groups (name, soft_memory_limit, hard_concurrency_limit, max_queued, scheduling_weight, scheduling_policy, environment, parent) VALUES ('bi-${toolname}', '10%', 10, 100, 10, 'weighted_fair', 'test_environment', 3);\n\n-- create 'pipeline' group with 'global' as parent\nINSERT INTO resource_groups (name, soft_memory_limit, hard_concurrency_limit, max_queued, scheduling_weight, jmx_export, environment, parent) VALUES ('pipeline', '80%', 45, 100, 1, true, 'test_environment', 1);\n\n-- get ID of 'pipeline' group\nSELECT resource_group_id FROM resource_groups WHERE name = 'pipeline'; -- 7\n-- create 'pipeline_${USER}' group with 'pipeline' as parent\nINSERT INTO resource_groups (name, soft_memory_limit, hard_concurrency_limit, max_queued,  environment, parent) VALUES ('pipeline_${USER}', '50%', 5, 100, 'test_environment', 7);\n\n-- create a root group 'admin' with NULL parent\nINSERT INTO resource_groups (name, soft_memory_limit, hard_concurrency_limit, max_queued, scheduling_policy, environment, jmx_export) VALUES ('admin', '100%', 50, 100, 'query_priority', 'test_environment', true);\n```\n\n----------------------------------------\n\nTITLE: Configuring Randomized Outer Join Null Key Strategy in Presto SQL\nDESCRIPTION: Sets the session property to control the optimization of outer joins where the join key is from the output of another outer join with many null values. The default value is 'DISABLED'.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.281.rst#2025-04-10_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSET SESSION randomize_outer_join_null_key_strategy = 'DISABLED';\n```\n\n----------------------------------------\n\nTITLE: Kafka Field Definition JSON Schema\nDESCRIPTION: JSON schema for defining individual fields within a Kafka table definition. Specifies column name, type, format, and mapping details.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/kafka.rst#2025-04-10_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": ...,\n    \"type\": ...,\n    \"dataFormat\": ...,\n    \"mapping\": ...,\n    \"formatHint\": ...,\n    \"hidden\": ...,\n    \"comment\": ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Accumulo Table with String Serializer in Presto SQL\nDESCRIPTION: SQL statement to create a table in Presto that maps to an Accumulo table, using the string serializer. This demonstrates how to specify a different serializer for value storage.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/accumulo.rst#2025-04-10_snippet_23\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE myschema.stringy_scientists (\n  recordkey VARCHAR,\n  name VARCHAR,\n  age BIGINT,\n  birthday DATE\n)\nWITH (\n  column_mapping = 'name:metadata:name,age:metadata:age,birthday:metadata:date',\n  serializer = 'string'\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Maximum Revocable Memory Per Node in Presto\nDESCRIPTION: Sets the maximum amount of revocable memory a query can use on each node. This limits the total memory that can be used for spilling operations across all queries on a single node.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/admin/properties.rst#2025-04-10_snippet_11\n\nLANGUAGE: properties\nCODE:\n```\nexperimental.max-revocable-memory-per-node\n```\n\n----------------------------------------\n\nTITLE: Using IN Expression with Subqueries in Presto SQL\nDESCRIPTION: Shows type validation for IN expressions where the right-hand side is a subquery expression.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.86.rst#2025-04-10_snippet_7\n\nLANGUAGE: SQL\nCODE:\n```\nIN\n```\n\n----------------------------------------\n\nTITLE: Setting S3 Path Style Access in Hive Configuration\nDESCRIPTION: Configuration setting to enable path style access to the S3 file system in the Hive connector. This is done by setting the hive.s3.path-style-access property to true.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.186.rst#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nhive.s3.path-style-access=true\n```\n\n----------------------------------------\n\nTITLE: SHOW CREATE TABLE Example in Presto SQL\nDESCRIPTION: An example showing how to use SHOW CREATE TABLE to display the CREATE TABLE statement for the 'orders' table in the 'sf1' schema.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/sql/show-create-table.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSHOW CREATE TABLE sf1.orders;\n```\n\n----------------------------------------\n\nTITLE: Configuring Lark Sheets Properties File for Presto\nDESCRIPTION: Example configuration for the etc/catalog/larksheets.properties file to mount the Lark Sheets connector as a catalog in Presto. This specifies the connector name, app domain, app ID, and path to the app secret file.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/larksheets.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nconnector.name=lark-sheets\napp-domain=FEISHU\napp-id=example_app_id\napp-secret-file=/path/to/app-secret.json\n```\n\n----------------------------------------\n\nTITLE: Listing Tables in Presto Schema\nDESCRIPTION: SQL command to show all available tables (sheets) in the mapped schema.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/larksheets.rst#2025-04-10_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSHOW TABLES FROM my_ss\n```\n\n----------------------------------------\n\nTITLE: Using Cosine Similarity Function in Presto SQL\nDESCRIPTION: Example of using the newly added cosine_similarity function in Presto SQL queries.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.151.rst#2025-04-10_snippet_5\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT cosine_similarity(vector1, vector2) FROM table\n```\n\n----------------------------------------\n\nTITLE: Enabling SSL Connections in Presto MongoDB Connector\nDESCRIPTION: SSL connections for the MongoDB connector can be enabled using a configuration flag.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.168.rst.txt#2025-04-10_snippet_3\n\nLANGUAGE: Properties\nCODE:\n```\nmongodb.ssl.enabled=true\n```\n\n----------------------------------------\n\nTITLE: Implementing Parametric Scalar Function in Presto\nDESCRIPTION: Generic is_null function implementation that works with any type using type parameters. Includes multiple overloads for different native container types.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/develop/functions.rst#2025-04-10_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n@ScalarFunction(name = \"is_null\", calledOnNullInput = true)\n@Description(\"Returns TRUE if the argument is NULL\")\npublic final class IsNullFunction\n{\n    @TypeParameter(\"T\")\n    @SqlType(StandardTypes.BOOLEAN)\n    public static boolean isNullSlice(@SqlNullable @SqlType(\"T\") Slice value)\n    {\n        return (value == null);\n    }\n\n    @TypeParameter(\"T\")\n    @SqlType(StandardTypes.BOOLEAN)\n    public static boolean isNullLong(@SqlNullable @SqlType(\"T\") Long value)\n    {\n        return (value == null);\n    }\n\n    @TypeParameter(\"T\")\n    @SqlType(StandardTypes.BOOLEAN)\n    public static boolean isNullDouble(@SqlNullable @SqlType(\"T\") Double value)\n    {\n        return (value == null);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: JSON to VARCHAR Casting Examples in PrestoDB\nDESCRIPTION: Demonstrates various examples of casting JSON values to VARCHAR type. Shows how different JSON types are converted to string representations.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/json.rst.txt#2025-04-10_snippet_12\n\nLANGUAGE: sql\nCODE:\n```\nSELECT CAST(JSON '[1, 2, 3]' AS VARCHAR);\nSELECT CAST(JSON '\"abc\"' AS VARCHAR);\nSELECT CAST(JSON '42' AS VARCHAR);\nSELECT CAST(JSON 'true' AS VARCHAR);\nSELECT CAST(JSON 'null' AS VARCHAR);\n```\n\n----------------------------------------\n\nTITLE: Generic Bitwise Right Shift Operations in Presto SQL\nDESCRIPTION: Examples of generic logical right shift operations on TINYINT and SMALLINT values using bitwise_right_shift() function.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/bitwise.rst.txt#2025-04-10_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nSELECT bitwise_right_shift(TINYINT '7', 2); -- 1\nSELECT bitwise_right_shift(SMALLINT -8, 2); -- 16382\n```\n\n----------------------------------------\n\nTITLE: Revoking a role from a user in PrestoDB SQL\nDESCRIPTION: Example of revoking the 'bar' role from the user 'foo' using the REVOKE command in PrestoDB.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/revoke-roles.rst#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nREVOKE bar FROM USER foo;\n```\n\n----------------------------------------\n\nTITLE: Using ST_Length with Geometry in Presto\nDESCRIPTION: Returns the length of a linestring or multi-linestring using Euclidean measurement on a two-dimensional plane in projected units. This function calculates the total length of linear geometries.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/geospatial.rst#2025-04-10_snippet_17\n\nLANGUAGE: sql\nCODE:\n```\nST_Length(Geometry) -> double\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Precision-Recall Curve Calculation in Presto SQL\nDESCRIPTION: This query demonstrates how to calculate a precision-recall curve using classification metrics functions. It selects the recall and precision values with 10000 buckets from a classification dataset.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/aggregate.rst.txt#2025-04-10_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nWITH\n    recall_precision AS (\n        SELECT\n            CLASSIFICATION_RECALL(10000, correct, pred) AS recalls,\n            CLASSIFICATION_PRECISION(10000, correct, pred) AS precisions\n        FROM\n           classification_dataset\n    )\nSELECT\n    recall,\n    precision\nFROM\n    recall_precision\nCROSS JOIN UNNEST(recalls, precisions) AS t(recall, precision)\n```\n\n----------------------------------------\n\nTITLE: Describing Query without Parameters\nDESCRIPTION: Command to describe a prepared statement that has no parameters.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/sql/describe-input.rst.txt#2025-04-10_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nDESCRIBE INPUT my_select2;\n```\n\n----------------------------------------\n\nTITLE: Using reduce() Function with Improved Implicit Coercion in Presto SQL\nDESCRIPTION: Enhances support for implicit coercion in functions involving lambda expressions, particularly improving the ease of use for the reduce() function in Presto SQL queries.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.177.rst#2025-04-10_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nreduce()\n```\n\n----------------------------------------\n\nTITLE: Listing Redshift Tables\nDESCRIPTION: SQL command to show all tables in a specific Redshift schema.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/redshift.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSHOW TABLES FROM redshift.web;\n```\n\n----------------------------------------\n\nTITLE: EXPLAIN ANALYZE VERBOSE Output for Window Function in Presto\nDESCRIPTION: An example of EXPLAIN ANALYZE VERBOSE output for a query using a window function. It shows additional information such as CPU fraction, active drivers, and partition size statistics.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/explain-analyze.rst#2025-04-10_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nEXPLAIN ANALYZE VERBOSE SELECT count(clerk) OVER() FROM orders WHERE orderdate > date '1995-01-01';\n\n                                              Query Plan\n    -----------------------------------------------------------------------------------------------\n      ...\n             - Window[] => [clerk:varchar(15), count:bigint]\n                     Cost: {rows: ?, bytes: ?}\n                     CPU fraction: 75.93%, Output: 8130 rows (230.24kB)\n                     Input avg.: 8130.00 lines, Input std.dev.: 0.00%\n                     Active Drivers: [ 1 / 1 ]\n                     Index size: std.dev.: 0.00 bytes , 0.00 rows\n                     Index count per driver: std.dev.: 0.00\n                     Rows per driver: std.dev.: 0.00\n                     Size of partition: std.dev.: 0.00\n                     count := count(\"clerk\")\n     ...\n```\n\n----------------------------------------\n\nTITLE: Using ALTER TABLE SET PROPERTIES in Presto SQL\nDESCRIPTION: New ALTER TABLE SET PROPERTIES statement allows modifying table properties. This can be used to update metadata or configuration settings for existing tables.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.291.rst#2025-04-10_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nALTER TABLE my_table SET PROPERTIES property_name = 'value';\n```\n\n----------------------------------------\n\nTITLE: Creating Selectors for Resource Groups in Presto SQL\nDESCRIPTION: This snippet shows how to create selectors that route queries to specific resource groups based on criteria such as user, source, and query type. It demonstrates using subqueries to get resource group IDs and setting priorities for selectors.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/admin/resource-groups.rst#2025-04-10_snippet_6\n\nLANGUAGE: SQL\nCODE:\n```\n-- Selectors\n\n-- use ID of 'admin' resource group for selector\nINSERT INTO selectors (resource_group_id, user_regex, priority) VALUES ((SELECT resource_group_id FROM resource_groups WHERE name = 'admin'), 'bob', 6);\n\n-- use ID of 'global.data_definition' resource group for selector\nINSERT INTO selectors (resource_group_id, source_regex, query_type, priority) VALUES ((SELECT resource_group_id FROM resource_groups WHERE name = 'data_definition'), '.*pipeline.*', 'DATA_DEFINITION', 4);\n\n-- use ID of 'global.pipeline.pipeline_${USER}' resource group for selector\nINSERT INTO selectors (resource_group_id, source_regex, priority) VALUES ((SELECT resource_group_id FROM resource_groups WHERE name = 'pipeline_${USER}'), '.*pipeline.*', 3);\n\n-- get ID of 'global.adhoc.other.${USER}' resource group for by disambiguating group name using parent ID\nSELECT A.resource_group_id self_id, B.resource_group_id parent_id, concat(B.name, '.', A.name) name_with_parent\nFROM resource_groups A JOIN resource_groups B ON A.parent = B.resource_group_id\nWHERE A.name = '${USER}' AND B.name = 'other';\n-- |       5 |         4 | other.${USER}    |\nINSERT INTO selectors (resource_group_id, priority) VALUES (5, 1);\n```\n\n----------------------------------------\n\nTITLE: Creating a Table with Custom Column Mapping\nDESCRIPTION: SQL command to create a table with explicit column mapping to Accumulo's column families and qualifiers using the column_mapping table property.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/accumulo.rst#2025-04-10_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE myschema.scientists (\n  recordkey VARCHAR,\n  name VARCHAR,\n  age BIGINT,\n  birthday DATE\n)\nWITH (\n  column_mapping = 'name:metadata:name,age:metadata:age,birthday:metadata:date'\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Table in Accumulo using SQL\nDESCRIPTION: SQL command to create a simple table in Accumulo through Presto. This example creates a 'scientists' table with various columns including a VARCHAR row key and columns for name, age, and birthday.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/accumulo.rst#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE myschema.scientists (\n  recordkey VARCHAR,\n  name VARCHAR,\n  age BIGINT,\n  birthday DATE\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring TOPN Query Pushdown in Pinot\nDESCRIPTION: Adds a new configuration property to allow pushing down TOPN queries to Pinot. This feature can improve query performance by offloading certain operations to the Pinot layer.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.242.rst#2025-04-10_snippet_6\n\nLANGUAGE: restructuredtext\nCODE:\n```\n* Add configuration property ``pinot.pushdown-topn-broker-queries`` to allow pushing down TOPN queries to Pinot.\n```\n\n----------------------------------------\n\nTITLE: Configuring Hive Security with Config Properties\nDESCRIPTION: Adds file-based security for Hive connector, configurable through hive.security and security.config-file properties. This enhances security options for Hive connections.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.152.rst.txt#2025-04-10_snippet_6\n\nLANGUAGE: SQL\nCODE:\n```\nhive.security=file\nsecurity.config-file=/path/to/config\n```\n\n----------------------------------------\n\nTITLE: Using ST_NumGeometries in Presto\nDESCRIPTION: Returns the number of geometries in the collection. For single geometries returns 1, for empty geometries returns 0. Empty geometries inside a GEOMETRYCOLLECTION count as a geometry.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/geospatial.rst#2025-04-10_snippet_30\n\nLANGUAGE: sql\nCODE:\n```\nST_NumGeometries(Geometry) -> bigint\n```\n\n----------------------------------------\n\nTITLE: Implementing Aggregation Function in Presto\nDESCRIPTION: Implementation of an average aggregation function for DOUBLE values, showing input and combine functions.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/develop/functions.rst#2025-04-10_snippet_6\n\nLANGUAGE: java\nCODE:\n```\n@AggregationFunction(\"avg_double\")\npublic class AverageAggregation\n{\n    @InputFunction\n    public static void input(LongAndDoubleState state, @SqlType(StandardTypes.DOUBLE) double value)\n    {\n        state.setLong(state.getLong() + 1);\n        state.setDouble(state.getDouble() + value);\n    }\n\n    @CombineFunction\n    public static void combine(LongAndDoubleState state, LongAndDoubleState otherState)\n    {\n        state.setLong(state.getLong() + otherState.getLong());\n        state.setDouble(state.getDouble() + otherState.getDouble());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: SQL Function Declarations\nDESCRIPTION: New SQL functions added including sequence, sign, and flatten.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.147.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nsequence\nsign\nflatten\n```\n\n----------------------------------------\n\nTITLE: Mapping CSV Fields to Presto Columns\nDESCRIPTION: Shows the supported Presto data types and decoding rules for the CSV decoder in the Kafka connector. It outlines how different CSV fields are interpreted and converted to Presto data types.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/kafka.rst.txt#2025-04-10_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\n+-------------------------------------+--------------------------------------------------------------------------------+\n| Presto data type                    | Decoding rules                                                                 |\n+=====================================+================================================================================+\n| | \"BIGINT\"                        | Decoded using Java \"Long.parseLong()\"                                        |\n| | \"INTEGER\"                       |                                                                                |\n| | \"SMALLINT\"                      |                                                                                |\n| | \"TINYINT\"                       |                                                                                |\n+-------------------------------------+--------------------------------------------------------------------------------+\n| \"DOUBLE\"                          | Decoded using Java \"Double.parseDouble()\"                                    |\n+-------------------------------------+--------------------------------------------------------------------------------+\n| \"BOOLEAN\"                         | \"true\" character sequence maps to \"true\";                                    |\n|                                     | Other character sequences map to \"false\"                                     |\n+-------------------------------------+--------------------------------------------------------------------------------+\n| \"VARCHAR\" / \"VARCHAR(x)\"        | Used as is                                                                     |\n+-------------------------------------+--------------------------------------------------------------------------------+\n```\n\n----------------------------------------\n\nTITLE: POST Query Response Structure\nDESCRIPTION: Example response from Presto after submitting a query, including query ID, URIs for monitoring, column definitions, and detailed execution statistics.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/rest/statement.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Type: application/json\nX-Content-Type-Options: nosniff\nTransfer-Encoding: chunked\n\n{\n  \"id\":\"20140108_110629_00011_dk5x2\",\n  \"infoUri\":\"http://localhost:8001/v1/query/20140108_110629_00011_dk5x2\",\n  \"partialCancelUri\":\"http://10.193.207.128:8080/v1/stage/20140108_110629_00011_dk5x2.1\",\n  \"nextUri\":\"http://localhost:8001/v1/statement/20140108_110629_00011_dk5x2/1\",\n  \"columns\":[\n    {\n      \"name\":\"name\",\n      \"type\":\"varchar\"\n    }\n  ],\n  \"stats\":{\n    \"state\":\"RUNNING\",\n    \"scheduled\":false,\n    \"nodes\":1,\n    \"totalSplits\":0,\n    \"queuedSplits\":0,\n    \"runningSplits\":0,\n    \"completedSplits\":0,\n    \"cpuTimeMillis\":0,\n    \"wallTimeMillis\":0,\n    \"processedRows\":0,\n    \"processedBytes\":0,\n    \"rootStage\":{\n      \"stageId\":\"0\",\n      \"state\":\"SCHEDULED\",\n      \"done\":false,\n      \"nodes\":1,\n      \"totalSplits\":0,\n      \"queuedSplits\":0,\n      \"runningSplits\":0,\n      \"completedSplits\":0,\n      \"cpuTimeMillis\":0,\n      \"wallTimeMillis\":0,\n      \"processedRows\":0,\n      \"processedBytes\":0,\n      \"subStages\":[\n        {\n          \"stageId\":\"1\",\n          \"state\":\"SCHEDULED\",\n          \"done\":false,\n          \"nodes\":1,\n          \"totalSplits\":0,\n          \"queuedSplits\":0,\n          \"runningSplits\":0,\n          \"completedSplits\":0,\n          \"cpuTimeMillis\":0,\n          \"wallTimeMillis\":0,\n          \"processedRows\":0,\n          \"processedBytes\":0,\n          \"subStages\":[]\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: ALTER VIEW Basic Syntax\nDESCRIPTION: The basic syntax for the ALTER VIEW statement showing the structure for renaming a view. Includes optional IF EXISTS clause to handle cases where the view might not exist.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/sql/alter-view.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nALTER VIEW [IF EXISTS] old_view_name RENAME TO new_view_name;\n```\n\n----------------------------------------\n\nTITLE: Rollback Iceberg Table to Timestamp\nDESCRIPTION: Procedure to rollback an Iceberg table to a specific point in time using the system.rollback_to_timestamp procedure.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/iceberg.rst.txt#2025-04-10_snippet_27\n\nLANGUAGE: sql\nCODE:\n```\nCALL iceberg.system.rollback_to_timestamp('schema_name', 'table_name', TIMESTAMP '1995-04-26 00:00:00.000');\n```\n\n----------------------------------------\n\nTITLE: Presto Optimizer Properties Configuration\nDESCRIPTION: Configuration properties for the Presto query optimizer including join reordering strategies, aggregation pushdown settings, and history-based optimization parameters\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/admin/properties.rst#2025-04-10_snippet_46\n\nLANGUAGE: properties\nCODE:\n```\noptimizer.join-reordering-strategy=AUTOMATIC\noptimizer.max-reordered-joins=9\noptimizer.push-table-write-through-union=true\noptimizer.exploit-constraints=true\noptimizer.confidence-based-broadcast=false\noptimizer.use-histograms=false\n```\n\n----------------------------------------\n\nTITLE: Implementing Codegen Scalar Function in Presto\nDESCRIPTION: Example of a bytecode-generated function that calculates array length, using CodegenScalarFunction annotation.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/develop/functions.rst#2025-04-10_snippet_5\n\nLANGUAGE: java\nCODE:\n```\npublic class CodegenArrayLengthFunction\n{\n    @CodegenScalarFunction(\"array_length\", calledOnNullInput = true)\n    @SqlType(StandardTypes.INTEGER)\n    @TypeParameter(\"K\")\n    public static MethodHandle arrayLength(@SqlType(\"array(K)\") Type arr)\n    {\n        CallSiteBinder binder = new CallSiteBinder();\n        ClassDefinition classDefinition = new ClassDefinition(a(Access.PUBLIC, FINAL), makeClassName(\"ArrayLength\"), type(Object.class));\n        classDefinition.declareDefaultConstructor(a(PRIVATE));\n\n        Parameter inputBlock = arg(\"inputBlock\", Block.class);\n        MethodDefinition method = classDefinition.declareMethod(a(Access.PUBLIC, STATIC), \"array_length\", type(Block.class), ImmutableList.of(inputBlock));\n        BytecodeBlock body = method.getBody();\n        body.append(inputBlock.invoke(\"getPositionCount\", int.class).ret());\n\n        Class<?> clazz = defineClass(classDefinition, Object.class, binder.getBindings(), CodegenArrayLengthFunction.class.getClassLoader());\n        return new methodHandle(clazz, \"array_length\", Block.class), Optional.of();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Row Number Partitioned Top-N Query in Presto SQL\nDESCRIPTION: Example of using row_number() for memory-optimized top-N operations to select oldest N rows per partition based on orderdate.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.75.rst#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM (\n    SELECT row_number() OVER (PARTITION BY orderstatus ORDER BY orderdate) AS rn,\n        custkey, orderdate, orderstatus\n    FROM orders\n) WHERE rn <= 5;\n```\n\n----------------------------------------\n\nTITLE: Downloading tpch-kafka Loader in Bash\nDESCRIPTION: Commands to download the tpch-kafka loader script from Maven central and make it executable.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/kafka-tutorial.rst#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ curl -o kafka-tpch https://repo1.maven.org/maven2/de/softwareforge/kafka_tpch_0811/1.0/kafka_tpch_0811-1.0.sh\n$ chmod 755 kafka-tpch\n```\n\n----------------------------------------\n\nTITLE: Preparing and Describing a Simple SELECT Query in Presto SQL\nDESCRIPTION: Demonstrates how to prepare a SELECT query and then describe its output using the DESCRIBE OUTPUT command.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/sql/describe-output.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nPREPARE my_select1 FROM\nSELECT * FROM nation\n```\n\nLANGUAGE: sql\nCODE:\n```\nDESCRIBE OUTPUT my_select1;\n```\n\n----------------------------------------\n\nTITLE: Enabling Partial Merge Pushdown for Hive\nDESCRIPTION: Session property to enable experimental partial merge pushdown which optimizes queries joining over tables with mismatched but compatible bucket counts. This feature aims to replace the hive.optimize-mismatched-bucket-count property.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.220.rst.txt#2025-04-10_snippet_3\n\nLANGUAGE: properties\nCODE:\n```\nexperimental.optimizer.partial-merge-pushdown-strategy\n```\n\n----------------------------------------\n\nTITLE: Querying TPCH Schema Information\nDESCRIPTION: SQL query to display available schemas in the TPCH connector.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/tpch.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSHOW SCHEMAS FROM tpch;\n```\n\n----------------------------------------\n\nTITLE: Configuring Raptor Storage Directory in Presto\nDESCRIPTION: Updates the 'storage.data-directory' configuration property in the Raptor connector to support remote HDFS storage, changing it from a File to a URI type.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.229.rst.txt#2025-04-10_snippet_3\n\nLANGUAGE: properties\nCODE:\n```\nstorage.data-directory\n```\n\n----------------------------------------\n\nTITLE: Inserting Data into Accumulo Table using Presto SQL\nDESCRIPTION: SQL statement to insert sample data into the previously created scientists table. This demonstrates how to populate the Accumulo table through Presto.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/accumulo.rst#2025-04-10_snippet_22\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO myschema.scientists VALUES\n('row1', 'Grace Hopper', 109, DATE '1906-12-09' ),\n('row2', 'Alan Turing', 103, DATE '1912-06-23' );\n```\n\n----------------------------------------\n\nTITLE: Array Distinct Operations in Presto SQL\nDESCRIPTION: Shows how to remove duplicate values from arrays using array_distinct function.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/array.rst#2025-04-10_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSELECT array_distinct(ARRAY [1, 2, null, null, 2])\nSELECT array_distinct(ARRAY [ROW(1, null), ROW (1, null)]\n```\n\n----------------------------------------\n\nTITLE: Finding Substring Position in Presto SQL\nDESCRIPTION: The index function is an alias for the strpos function, which finds the position of a substring within a string.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/teradata.rst#2025-04-10_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nindex(string, substring) -> bigint\n```\n\n----------------------------------------\n\nTITLE: Adding map_top_n_values Function in SQL\nDESCRIPTION: Adds a new SQL function map_top_n_values to return the top N values from a provided map, with an optional custom value comparator.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.279.rst.txt#2025-04-10_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nmap_top_n_values(map, N, [lambda_comparator])\n```\n\n----------------------------------------\n\nTITLE: Transaction Mode Options in Presto SQL\nDESCRIPTION: Specifies the available transaction mode options, including isolation levels and read/write modes that can be used with START TRANSACTION.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/start-transaction.rst#2025-04-10_snippet_1\n\nLANGUAGE: none\nCODE:\n```\nISOLATION LEVEL { READ UNCOMMITTED | READ COMMITTED | REPEATABLE READ | SERIALIZABLE }\nREAD { ONLY | WRITE }\n```\n\n----------------------------------------\n\nTITLE: Comparing ROWS, RANGE, and GROUPS in SQL Window Functions\nDESCRIPTION: Illustrates the differences between ROWS, RANGE, and GROUPS frame types in window functions using ARRAY_AGG.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/window.rst.txt#2025-04-10_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT\n    ARRAY_AGG(v) OVER (\n        ORDER BY k ASC ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING\n    )\nFROM (\n    VALUES (1, 'a'), (1, 'b'), (3, 'c'), (3, 'd'), (5, 'e')\n) t(k, v);\n\nSELECT\n    ARRAY_AGG(v) OVER (\n        ORDER BY k ASC RANGE BETWEEN 1 PRECEDING AND 1 FOLLOWING\n    )\nFROM (\n    VALUES (1, 'a'), (1, 'b'), (3, 'c'), (3, 'd'), (5, 'e')\n) t(k, v);\n\nSELECT\n    ARRAY_AGG(v) OVER (\n        ORDER BY k ASC GROUPS BETWEEN 1 PRECEDING AND 1 FOLLOWING\n    )\nFROM (\n    VALUES (1, 'a'), (1, 'b'), (3, 'c'), (3, 'd'), (5, 'e')\n) t(k, v);\n```\n\n----------------------------------------\n\nTITLE: Casting Values in Presto SQL\nDESCRIPTION: Demonstrates the usage of cast() and try_cast() functions for explicit type conversion in Presto. The cast() function throws an error if the conversion fails, while try_cast() returns null in such cases.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/conversion.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\ncast(value AS type) -> type\n```\n\nLANGUAGE: SQL\nCODE:\n```\ntry_cast(value AS type) -> type\n```\n\n----------------------------------------\n\nTITLE: Preparing Query with Multiple Parameters\nDESCRIPTION: Example of preparing a SELECT statement with three parameters for later analysis.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/sql/describe-input.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nPREPARE my_select1 FROM\nSELECT ? FROM nation WHERE regionkey = ? AND name < ?;\n```\n\n----------------------------------------\n\nTITLE: Setting CTE Virtual Bucket Count in PrestoDB\nDESCRIPTION: Integer configuration for number of buckets used in CTE materialization, affecting query parallelism and performance.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/admin/cte-materialization.rst#2025-04-10_snippet_3\n\nLANGUAGE: properties\nCODE:\n```\nhive.cte-virtual-bucket-count=128\n```\n\n----------------------------------------\n\nTITLE: Implementing Parametric Scalar Function 'is_null' in Java for Presto\nDESCRIPTION: This code shows how to implement a parametric scalar function 'is_null' that works with any type. It uses the @TypeParameter annotation to declare type parameters and provides multiple method implementations for different native container types.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/develop/functions.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n@ScalarFunction(name = \"is_null\", calledOnNullInput = true)\n@Description(\"Returns TRUE if the argument is NULL\")\npublic final class IsNullFunction\n{\n    @TypeParameter(\"T\")\n    @SqlType(StandardTypes.BOOLEAN)\n    public static boolean isNullSlice(@SqlNullable @SqlType(\"T\") Slice value)\n    {\n        return (value == null);\n    }\n\n    @TypeParameter(\"T\")\n    @SqlType(StandardTypes.BOOLEAN)\n    public static boolean isNullLong(@SqlNullable @SqlType(\"T\") Long value)\n    {\n        return (value == null);\n    }\n\n    @TypeParameter(\"T\")\n    @SqlType(StandardTypes.BOOLEAN)\n    public static boolean isNullDouble(@SqlNullable @SqlType(\"T\") Double value)\n    {\n        return (value == null);\n    }\n\n    // ...and so on for each native container type\n}\n```\n\n----------------------------------------\n\nTITLE: Calling a Procedure with Positional Arguments in Presto SQL\nDESCRIPTION: Example of calling a procedure named 'test' with positional arguments. The first argument is an integer (123) and the second is a string ('apple').\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/sql/call.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCALL test(123, 'apple');\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Connector Properties\nDESCRIPTION: Basic configuration properties for the Redis connector in the catalog file etc/catalog/redis.properties\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/redis.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nconnector.name=redis\nredis.table-names=schema1.table1,schema1.table2\nredis.nodes=host:port\n```\n\n----------------------------------------\n\nTITLE: Documenting Task Properties in RST\nDESCRIPTION: Configuration documentation for Presto task-related properties including concurrency and writer settings\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/admin/properties-session.rst#2025-04-10_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\n``task_concurrency``\n^^^^^^^^^^^^^^^^^^^^\n\n* **Type:** ``integer``\n* **Restrictions:** must be a power of two\n* **Default value:** ``16``\n```\n\n----------------------------------------\n\nTITLE: SHOW CREATE VIEW Syntax in PrestoDB\nDESCRIPTION: Shows the SQL syntax for the SHOW CREATE VIEW statement, which returns the SQL statement that was used to create a specific view.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/show-create-view.rst#2025-04-10_snippet_0\n\nLANGUAGE: none\nCODE:\n```\nSHOW CREATE VIEW view_name\n```\n\n----------------------------------------\n\nTITLE: QDigest Type Definition\nDESCRIPTION: Quantile digest structure for capturing approximate distribution of data with tunable accuracy. Supports merging of partial results while maintaining precision.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/language/types.rst.txt#2025-04-10_snippet_7\n\nLANGUAGE: text\nCODE:\n```\nQDigest\n```\n\n----------------------------------------\n\nTITLE: Creating a Table with Custom Serializer in Presto SQL\nDESCRIPTION: This SQL snippet demonstrates how to create a table in Presto with a custom column mapping and serializer for Accumulo. It defines a 'scientists' table with VARCHAR and BIGINT columns, specifying the column mapping and using the default 'lexicoder' serializer.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/accumulo.rst.txt#2025-04-10_snippet_23\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE myschema.scientists (\n  recordkey VARCHAR,\n  name VARCHAR,\n  age BIGINT,\n  birthday DATE\n)\nWITH (\n  column_mapping = 'name:metadata:name,age:metadata:age,birthday:metadata:date',\n  serializer = 'default'\n);\n```\n\n----------------------------------------\n\nTITLE: Array Cumulative Sum Example in Presto SQL\nDESCRIPTION: Demonstrates the array_cum_sum function that calculates cumulative sums of array elements.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/array.rst#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT array_cum_sum(ARRAY [1, 2, null, 3])\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS KMS for S3 Encryption in Hive Connector\nDESCRIPTION: Sets up AWS KMS with S3 as an encryption materials provider using the 'hive.s3.kms-key-id' configuration property in the Hive connector.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.153.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: Properties\nCODE:\n```\nhive.s3.kms-key-id=aws-kms-key-id\n```\n\n----------------------------------------\n\nTITLE: Configuring Local Scheduling in Hive for Presto SQL\nDESCRIPTION: Introduces new configuration options to force local scheduling of splits in Hive. This can be set either as a configuration option or a session property.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.79.rst#2025-04-10_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nhive.force-local-scheduling\n```\n\nLANGUAGE: SQL\nCODE:\n```\nforce_local_scheduling\n```\n\n----------------------------------------\n\nTITLE: Implementing Presto Connector Selection Strategies\nDESCRIPTION: Describes the three node selection strategies available for ConnectorSplit: HARD_AFFINITY for non-remote splits that must be on specific nodes, SOFT_AFFINITY for splits with preferred but not mandatory nodes, and NO_PREFERENCE for splits that can be on any node.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/develop/connectors.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nHARD_AFFINITY: Split is NOT remotely accessible and has to be on specific nodes\n\nSOFT_AFFINITY: Connector split provides a list of preferred nodes for engine to pick from but not mandatory.\n\nNO_PREFERENCE: Split is remotely accessible and can be on any nodes\n```\n\n----------------------------------------\n\nTITLE: Fixing FILTER Behavior with count Function in SQL\nDESCRIPTION: Documents a bug fix where the FILTER clause was being ignored when used with the count function that had a constant argument.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.173.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\ncount(*) FILTER (WHERE condition)\n```\n\n----------------------------------------\n\nTITLE: Using the POSITION function in Presto SQL\nDESCRIPTION: Example of the POSITION function syntax that was fixed in this release. The function finds the position of a substring within a string.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.126.rst#2025-04-10_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nPOSITION(x in (y))\n```\n\n----------------------------------------\n\nTITLE: HDFS Username Override Configuration\nDESCRIPTION: JVM configuration to override the default HDFS username used by Presto when accessing HDFS without Kerberos authentication.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/hive.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\n-DHADOOP_USER_NAME=hdfs_user\n```\n\n----------------------------------------\n\nTITLE: Session Property for Hive Metastore Headers\nDESCRIPTION: New session property allowing users to set custom headers for metastore operations in Hive connector.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.264.rst#2025-04-10_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nhive.metastore_headers\n```\n\n----------------------------------------\n\nTITLE: Renaming an Iceberg View in Presto\nDESCRIPTION: Changes the name of an existing view from 'page_views' to 'page_new_views' using the ALTER VIEW command. The operation preserves the view definition while changing only the view name.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/iceberg.rst#2025-04-10_snippet_50\n\nLANGUAGE: sql\nCODE:\n```\nALTER VIEW iceberg.web.page_views RENAME TO iceberg.web.page_new_views;\n```\n\n----------------------------------------\n\nTITLE: Configuring Hive Table Format Respect in Presto\nDESCRIPTION: References a configuration option 'hive.respect-table-format' used in Presto to control table format behavior when creating tables as select (CTAS) in Hive.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.143.rst.txt#2025-04-10_snippet_5\n\nLANGUAGE: SQL\nCODE:\n```\nhive.respect-table-format\n```\n\n----------------------------------------\n\nTITLE: Defining Pinot Schema in JSON\nDESCRIPTION: Example of a Pinot schema definition for a 'meetupRsvp' table, including dimension fields, metric fields, and a time field specification.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/pinot.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"schemaName\": \"meetupRsvp\",\n  \"dimensionFieldSpecs\": [\n    {\n      \"name\": \"venue_name\",\n      \"dataType\": \"STRING\"\n    },\n    {\n      \"name\": \"event_name\",\n      \"dataType\": \"STRING\"\n    },\n    {\n      \"name\": \"event_id\",\n      \"dataType\": \"STRING\"\n    },\n    {\n      \"name\": \"event_time\",\n      \"dataType\": \"LONG\"\n    },\n    {\n      \"name\": \"group_city\",\n      \"dataType\": \"STRING\"\n    },\n    {\n      \"name\": \"group_country\",\n      \"dataType\": \"STRING\"\n    },\n    {\n      \"name\": \"group_id\",\n      \"dataType\": \"LONG\"\n    },\n    {\n      \"name\": \"group_name\",\n      \"dataType\": \"STRING\"\n    }\n  ],\n  \"metricFieldSpecs\": [\n    {\n      \"name\": \"rsvp_count\",\n      \"dataType\": \"INT\"\n    }\n  ],\n  \"timeFieldSpec\": {\n    \"incomingGranularitySpec\": {\n      \"name\": \"mtime\",\n      \"dataType\": \"LONG\",\n      \"timeType\": \"MILLISECONDS\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Table with Page Processing Delay in Black Hole Connector\nDESCRIPTION: SQL command to create a table with a page_processing_delay property, which introduces a delay before consuming or producing a new page, useful for slowing down processing rates.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/blackhole.rst#2025-04-10_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE blackhole.test.delay (\n  dummy bigint\n)\nWITH (\n  split_count = 1,\n  pages_per_split = 1,\n  rows_per_page = 1,\n  page_processing_delay = '5s'\n);\n```\n\n----------------------------------------\n\nTITLE: Using transform_values Function in Presto SQL\nDESCRIPTION: Illustrates the usage of the transform_values function, which has been optimized for better performance in Presto 0.176. This function applies a lambda to transform the values in a map.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.176.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT transform_values(map_column, (k, v) -> v * 2)\n```\n\n----------------------------------------\n\nTITLE: New Presto Bitwise Functions\nDESCRIPTION: New bitwise shift functions added for left shift, right shift, and arithmetic right shift operations.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.250.rst#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nbitwise_left_shift\nbitwise_right_shift\nbitwise_right_shift_arithmetic\n```\n\n----------------------------------------\n\nTITLE: DEALLOCATE PREPARE Statement Syntax\nDESCRIPTION: Shows the basic syntax structure for the DEALLOCATE PREPARE command in SQL. Used to remove a prepared statement from the session's list of prepared statements.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/deallocate-prepare.rst#2025-04-10_snippet_0\n\nLANGUAGE: none\nCODE:\n```\nDEALLOCATE PREPARE statement_name\n```\n\n----------------------------------------\n\nTITLE: Defining DECIMAL Type in SQL\nDESCRIPTION: Examples of defining DECIMAL types with different precisions and scales in SQL. DECIMAL types are used for fixed-precision decimal numbers, with support for up to 38 digits of precision.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/language/types.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nDECIMAL(10,3), DECIMAL(20)\n```\n\n----------------------------------------\n\nTITLE: Cross Join Query\nDESCRIPTION: Shows how to perform a cross join between nation and region tables with column name qualification.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/sql/select.rst.txt#2025-04-10_snippet_29\n\nLANGUAGE: sql\nCODE:\n```\nSELECT nation.name, region.name\nFROM nation\nCROSS JOIN region;\n```\n\n----------------------------------------\n\nTITLE: Computing Intersection Cardinality\nDESCRIPTION: Returns the set intersection cardinality between two KHyperLogLog structures based on their MinHash structures.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/khyperloglog.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nintersection_cardinality(khll1, khll2)\n```\n\n----------------------------------------\n\nTITLE: Configuring Hash Generation Optimization in Presto\nDESCRIPTION: Enables early computation of hash codes for distribution, joins, and aggregations. Can reduce CPU usage but increases network transfer.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/admin/properties.rst#2025-04-10_snippet_42\n\nLANGUAGE: properties\nCODE:\n```\noptimizer.optimize-hash-generation=true\n```\n\n----------------------------------------\n\nTITLE: Implementing Geometric Mean Function in Presto SQL\nDESCRIPTION: Adds a new function 'geometric_mean' to calculate the geometric mean of a set of values.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.119.rst#2025-04-10_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nAdd :func:`!geometric_mean` function\n```\n\n----------------------------------------\n\nTITLE: Fixing row_number() Window Function with Partitioned Top-N Query in SQL\nDESCRIPTION: Example SQL query demonstrating the fixed row_number() window function used with a partitioned top-N operation. This query selects the top 5 rows for each orderstatus partition, ordered by orderdate.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.110.rst#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM (\n    SELECT row_number() OVER (PARTITION BY orderstatus ORDER BY orderdate) AS rn,\n        custkey, orderdate, orderstatus\n    FROM orders\n) WHERE rn <= 5;\n```\n\n----------------------------------------\n\nTITLE: Viewing Statistics with SHOW STATS Command in SQL\nDESCRIPTION: The SHOW STATS command now includes minimum and maximum values for columns in the output.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.194.rst.txt#2025-04-10_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSHOW STATS\n```\n\n----------------------------------------\n\nTITLE: RESET SESSION Usage Examples\nDESCRIPTION: Demonstrates practical examples of resetting both a general session property (optimize_hash_generation) and a catalog-specific property (hive.optimized_reader_enabled).\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/reset-session.rst#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nRESET SESSION optimize_hash_generation;\nRESET SESSION hive.optimized_reader_enabled;\n```\n\n----------------------------------------\n\nTITLE: Using array_join Function in Presto\nDESCRIPTION: The array_join function is a new addition that allows joining array elements into a string.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.102.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n:func:`!array_join`\n```\n\n----------------------------------------\n\nTITLE: Configuring Local File Connector in Presto\nDESCRIPTION: This snippet shows the contents of a catalog properties file for configuring the local file connector in Presto. It specifies the connector name as 'localfile'.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/localfile.rst#2025-04-10_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nconnector.name=localfile\n```\n\n----------------------------------------\n\nTITLE: Defining REVOKE Command Syntax in SQL\nDESCRIPTION: This snippet outlines the syntax for the REVOKE command in SQL. It shows how to revoke privileges from users or roles on specific tables.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/sql/revoke.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nREVOKE [ GRANT OPTION FOR ]\n( privilege [, ...] | ALL PRIVILEGES )\nON [ TABLE ] table_name FROM ( user | USER user | ROLE role )\n```\n\n----------------------------------------\n\nTITLE: Setting Hive Metastore Username in Configuration\nDESCRIPTION: Demonstrates how to set the username for accessing the Hive metastore using a configuration property.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.194.rst#2025-04-10_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\nhive.metastore.username\n```\n\n----------------------------------------\n\nTITLE: Determining rank of a value with KLL sketch in Presto\nDESCRIPTION: Computes the quantile that a particular value occurs at in the KLL sketch. Includes optional inclusivity parameter to determine whether the function calculates P(T < X) or P(T <= X).\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/sketch.rst#2025-04-10_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nsketch_kll_rank[T](sketch: kllsketch[T], quantile: T[, inclusivity: boolean]) -> double\n```\n\n----------------------------------------\n\nTITLE: EXECUTE Statement Syntax in PrestoDB\nDESCRIPTION: The syntax definition for the EXECUTE statement in PrestoDB. It shows the command structure with an optional USING clause for parameter values.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/execute.rst#2025-04-10_snippet_0\n\nLANGUAGE: none\nCODE:\n```\nEXECUTE statement_name [ USING parameter1 [ , parameter2, ... ] ]\n```\n\n----------------------------------------\n\nTITLE: Calculating Quantile from KLL Sketch in Presto SQL\nDESCRIPTION: Computes the value in the KLL sketch that occurs at a particular quantile. Inclusivity parameter determines if the result includes values equal to the quantile.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/sketch.rst.txt#2025-04-10_snippet_5\n\nLANGUAGE: SQL\nCODE:\n```\nsketch_kll_quantile[T](sketch: kllsketch[T], rank: double[, inclusivity: boolean]) -> T\n```\n\n----------------------------------------\n\nTITLE: Computing ROC Curve in Presto SQL\nDESCRIPTION: This query demonstrates how to calculate a Receiver Operating Characteristic (ROC) curve using classification metrics functions. It pairs fallout (false positive rate) with recall (true positive rate) values.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/aggregate.rst.txt#2025-04-10_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nWITH\n    fallout_recall AS (\n        SELECT\n            CLASSIFICATION_FALLOUT(10000, correct, pred) AS fallouts,\n            CLASSIFICATION_RECALL(10000, correct, pred) AS recalls\n        FROM\n           classification_dataset\n    )\nSELECT\n    fallout\n    recall,\nFROM\n    recall_fallout\nCROSS JOIN UNNEST(fallouts, recalls) AS t(fallout, recall)\n```\n\n----------------------------------------\n\nTITLE: Unsupported Lambda Expressions in Presto SQL\nDESCRIPTION: Examples of lambda expressions that are not supported in Presto SQL, including subqueries and aggregations.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/lambda.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nx -> 2 + (SELECT 3)\nx -> max(y)\n```\n\n----------------------------------------\n\nTITLE: Concatenating Multiple Binary Values in Presto SQL\nDESCRIPTION: The concat() function concatenates multiple binary values, similar to the || operator.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/binary.rst#2025-04-10_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nconcat(binary1, ..., binaryN) -> varbinary\n```\n\n----------------------------------------\n\nTITLE: Performing Reservoir Sampling in Presto SQL\nDESCRIPTION: The reservoir_sample function computes a new reservoir sample with a fixed sample size. It can create new samples or merge existing samples with new data, ensuring equal probability of selection for each record.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/aggregate.rst.txt#2025-04-10_snippet_13\n\nLANGUAGE: sql\nCODE:\n```\nreservoir_sample(initial_sample: array(T), initial_processed_count: bigint, values_to_sample: T, desired_sample_size: int) -> row(processed_count: bigint, sample: array(T))\n```\n\n----------------------------------------\n\nTITLE: SQL Function Reference - array_frequency\nDESCRIPTION: New function added to analyze frequency of array elements.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.256.rst#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\narray_frequency\n```\n\n----------------------------------------\n\nTITLE: Begin Update Operation Method Signature\nDESCRIPTION: Method signature for initiating an update operation with specified columns to be updated.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/develop/delete-and-update.rst.txt#2025-04-10_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nConnectorTableHandle beginUpdate(\n     ConnectorSession session,\n     ConnectorTableHandle tableHandle,\n     List<ColumnHandle> updatedColumns)\n```\n\n----------------------------------------\n\nTITLE: Performing Partitioned Limit with Row Number in Presto SQL\nDESCRIPTION: Illustrates a streaming operation to select N arbitrary rows per partition using the row_number() function. This query selects five arbitrary rows from the 'orders' table for each 'orderstatus'.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.75.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT * FROM (\n    SELECT row_number() OVER (PARTITION BY orderstatus) AS rn,\n        custkey, orderdate, orderstatus\n    FROM orders\n) WHERE rn <= 5;\n```\n\n----------------------------------------\n\nTITLE: Handling Non-Equi Conjuncts in OUTER JOINs in Presto SQL\nDESCRIPTION: Presto now fails queries with non-equi conjuncts in OUTER JOINs instead of silently dropping them. This change prevents incorrect results from being produced.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.144.7.rst#2025-04-10_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nOUTER JOIN\n```\n\n----------------------------------------\n\nTITLE: Using INNER JOIN with Inequality Conditions in Presto SQL\nDESCRIPTION: Demonstrates the new support for inequality INNER JOIN operations where each condition term references only one side of the join.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.86.rst#2025-04-10_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nINNER JOIN\n```\n\n----------------------------------------\n\nTITLE: Setting Task Concurrency in Presto SQL\nDESCRIPTION: Configuration setting to control task concurrency in Presto. This setting was involved in a bug fix related to aggregation results.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.151.rst#2025-04-10_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\ntask.concurrency = 1\n```\n\n----------------------------------------\n\nTITLE: Starting Presto CLI with Kafka Catalog in Bash\nDESCRIPTION: Command to start the Presto CLI, specifying the Kafka catalog and TPCH schema.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/kafka-tutorial.rst.txt#2025-04-10_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ ./presto --catalog kafka --schema tpch\n```\n\n----------------------------------------\n\nTITLE: Creating Keyspace and Table in Cassandra CQL\nDESCRIPTION: Example of creating a keyspace with SimpleStrategy replication and a basic users table with integer primary key and text fields\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/cassandra.rst#2025-04-10_snippet_1\n\nLANGUAGE: cql\nCODE:\n```\nCREATE KEYSPACE mykeyspace\nWITH REPLICATION = { 'class' : 'SimpleStrategy', 'replication_factor' : 1 };\nUSE mykeyspace;\nCREATE TABLE users (\n  user_id int PRIMARY KEY,\n  fname text,\n  lname text\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Values with Colors in Presto SQL\nDESCRIPTION: The 'render' function is used to render values with specific colors using ANSI color codes. It has two variants: one for rendering numeric or string values with a specified color, and another for rendering boolean values with preset colors.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/color.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nrender(x, color) -> varchar\n```\n\nLANGUAGE: SQL\nCODE:\n```\nrender(b) -> varchar\n```\n\n----------------------------------------\n\nTITLE: Configuring Hive ORC Optimized Writer in Presto\nDESCRIPTION: A new experimental ORC writer implementation optimized for Presto can be enabled using either configuration property or session property. This writer improves performance for ORC file generation.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.182.rst#2025-04-10_snippet_4\n\nLANGUAGE: properties\nCODE:\n```\nhive.orc.optimized-writer.enabled=true\n```\n\nLANGUAGE: sql\nCODE:\n```\nSET SESSION orc_optimized_writer_enabled = true;\n```\n\n----------------------------------------\n\nTITLE: Querying Iceberg Parquet Metadata Cache Statistics via JMX in Presto\nDESCRIPTION: JMX query to retrieve metrics and verify cache usage for the Iceberg Parquet metadata cache.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/iceberg.rst.txt#2025-04-10_snippet_11\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM jmx.current.\"com.facebook.presto.hive:name=iceberg_parquetmetadata,type=cachestatsmbean\";\n```\n\n----------------------------------------\n\nTITLE: Using lpad and rpad Functions with VARBINARY in Presto SQL\nDESCRIPTION: The lpad and rpad functions now support VARBINARY type in addition to VARCHAR for padding operations.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.204.rst#2025-04-10_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT lpad(varbinary_column, length, padding) FROM table;\nSELECT rpad(varbinary_column, length, padding) FROM table;\n```\n\n----------------------------------------\n\nTITLE: Symbol IN Subquery Predicate in Presto SQL\nDESCRIPTION: Example of the IN predicate with subquery syntax that now benefits from extended predicate inference and pushdown optimization in Presto 0.197.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.197.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\n<symbol> IN <subquery>\n```\n\n----------------------------------------\n\nTITLE: Defining Presto Connection String in Apache Superset\nDESCRIPTION: The SQLAlchemy URI format used to connect Apache Superset to a Presto database. This connection string specifies the hostname, port, and database name for the Presto server.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/clients/superset.rst#2025-04-10_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\npresto://{hostname}:{port}/{database}\n```\n\n----------------------------------------\n\nTITLE: Adding Geometric Mean Function in Presto SQL\nDESCRIPTION: Adds a new function 'geometric_mean' to calculate the geometric mean of a set of numbers.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.119.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nAdd :func:`!geometric_mean` function\n```\n\n----------------------------------------\n\nTITLE: Enabling Kerberos for Internal Communication\nDESCRIPTION: Setting to enable Kerberos authentication for internal communication.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/security/internal-communication.rst#2025-04-10_snippet_11\n\nLANGUAGE: none\nCODE:\n```\ninternal-communication.kerberos.enabled=true\n```\n\n----------------------------------------\n\nTITLE: Setting up automatic query retry for transient failures in Presto 0.252\nDESCRIPTION: Configuration parameter to enable automatic query retry functionality by specifying the maximum number of retries per query.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.252.rst.txt#2025-04-10_snippet_3\n\nLANGUAGE: properties\nCODE:\n```\nper-query-retry-limit = <non-zero integer>\n```\n\n----------------------------------------\n\nTITLE: Parameter Description Output\nDESCRIPTION: Shows the output format of DESCRIBE INPUT, displaying parameter positions and their types.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/describe-input.rst#2025-04-10_snippet_3\n\nLANGUAGE: none\nCODE:\n```\n Position | Type\n--------------------\n        0 | unknown\n        1 | bigint\n        2 | varchar\n(3 rows)\n```\n\n----------------------------------------\n\nTITLE: Configuring Thrift Client Server Addresses\nDESCRIPTION: Example configuration showing how to specify multiple Thrift server addresses in the client configuration. Demonstrates the comma-separated list format for multiple servers.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/thrift.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\npresto.thrift.client.addresses=192.0.2.3:7777,192.0.2.4:7779\n```\n\n----------------------------------------\n\nTITLE: UPDATE Statement with Simple WHERE Condition\nDESCRIPTION: Example showing how to update the status of purchases where ship_date is NULL, setting their status to 'OVERDUE'.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/sql/update.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nUPDATE purchases SET status = 'OVERDUE' WHERE ship_date IS NULL;\n```\n\n----------------------------------------\n\nTITLE: Calculating Weighted Differential Entropy with Sampling\nDESCRIPTION: Example query demonstrating differential entropy calculation with weighted reservoir sampling, using a sample size of 1000000 and including weight parameter.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/aggregate.rst.txt#2025-04-10_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n    differential_entropy(1000000, x, weight)\nFROM\n    data\n```\n\n----------------------------------------\n\nTITLE: Enabling Spill for Queries Exceeding Memory Limits in Presto SQL\nDESCRIPTION: Enables spilling for a query when its memory usage exceeds the per-node total memory limit, even if the memory pool is not full.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/admin/spill.rst#2025-04-10_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\nSET SESSION experimental.query-limit-spill-enabled = true;\n```\n\n----------------------------------------\n\nTITLE: Basic DROP TABLE Example\nDESCRIPTION: Simple example showing how to drop a table named 'orders_by_date' without using IF EXISTS clause.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/drop-table.rst#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nDROP TABLE orders_by_date\n```\n\n----------------------------------------\n\nTITLE: Querying Min/Max Partition Keys in SQL\nDESCRIPTION: Examples of queries that benefit from metadata-only optimization when working with partition keys.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.80.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT min(key), max(key) FROM t;\n\nSELECT DISTINCT key FROM t;\n\nSELECT count(DISTINCT key) FROM t;\n\nSELECT count(DISTINCT key + 5) FROM t;\n\nSELECT count(DISTINCT key) FROM (SELECT key FROM t ORDER BY 1 LIMIT 10);\n\nSELECT key1, count(DISTINCT key2) FROM t GROUP BY 1;\n```\n\n----------------------------------------\n\nTITLE: Using Position Function with Parenthesized Expressions in SQL\nDESCRIPTION: This syntax example shows the POSITION function with parenthesized expressions that was fixed in Presto 0.126. Previously, expressions in the form POSITION(x in (y)) would cause parsing issues.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.126.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nPOSITION(x in (y))\n```\n\n----------------------------------------\n\nTITLE: Converting Between Bing Tiles and BigInt in Presto SQL\nDESCRIPTION: Example showing how to cast between Bing tiles and BigInt values in Presto. This demonstrates the internal representation that efficiently encodes zoom, x, and y coordinates of a Bing tile.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/geospatial.rst.txt#2025-04-10_snippet_30\n\nLANGUAGE: sql\nCODE:\n```\ncast(cast(tile AS BIGINT) AS BINGTILE)\n```\n\n----------------------------------------\n\nTITLE: Warning about LambdaDefinitionExpression canonicalization bug in RestructuredText\nDESCRIPTION: A warning notice about a bug in LambdaDefinitionExpression canonicalization introduced since version 0.238, with a reference to issue #15424.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.243.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. warning::\n    There is a bug in LambdaDefinitionExpression canonicalization introduced since 0.238. For more details, go to :issue:`15424`.\n```\n\n----------------------------------------\n\nTITLE: Creating a Table with Column Aliases in PrestoDB\nDESCRIPTION: Example of creating a new table with specified column aliases. The created table 'orders_column_aliased' will have columns named 'order_date' and 'total_price' that contain data from the 'orderdate' and 'totalprice' columns of the 'orders' table.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/create-table-as.rst#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE orders_column_aliased (order_date, total_price)\nAS\nSELECT orderdate, totalprice\nFROM orders\n```\n\n----------------------------------------\n\nTITLE: Configuring Join Broadcast Table Size in SQL\nDESCRIPTION: Sets the maximum estimated size of a table that can be broadcast when using AUTOMATIC join distribution type. This can be configured using either a configuration property or a session property.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.213.rst#2025-04-10_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSET SESSION join_max_broadcast_table_size = <value>\n```\n\n----------------------------------------\n\nTITLE: Requiring HTTPS for Internal Communication\nDESCRIPTION: Configuration to require HTTPS for internal communication.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/security/internal-communication.rst#2025-04-10_snippet_6\n\nLANGUAGE: none\nCODE:\n```\ninternal-communication.https.required=true\n```\n\n----------------------------------------\n\nTITLE: Normalizing Myanmar Text to Unicode in Presto SQL\nDESCRIPTION: This function normalizes Myanmar text to Unicode encoding. If the input is Zawgyi-encoded, it converts it to Unicode. If the input is already in Unicode, it remains unchanged. This function is essential for standardizing Myanmar text representation.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/internationalization.rst#2025-04-10_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nmyanmar_normalize_unicode(text) -> varchar\n```\n\n----------------------------------------\n\nTITLE: Creating a Kudu Table with Detailed Range Partitioning in Presto\nDESCRIPTION: SQL example showing the creation of a Kudu table with hash partitioning on the serialno column and multiple range partitions on a timestamp column. The example defines three specific time ranges for data organization.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/kudu.rst.txt#2025-04-10_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE events (\n  serialno varchar WITH (primary_key = true),\n  event_time timestamp WITH (primary_key = true),\n  message varchar\n) WITH (\n  partition_by_hash_columns = ARRAY['serialno'],\n  partition_by_hash_buckets = 4,\n  partition_by_range_columns = ARRAY['event_time'],\n  range_partitions = '[{\"lower\": null, \"upper\": \"2017-01-01T00:00:00\"},\n                       {\"lower\": \"2017-01-01T00:00:00\", \"upper\": \"2017-07-01T00:00:00\"},\n                       {\"lower\": \"2017-07-01T00:00:00\", \"upper\": \"2018-01-01T00:00:00\"}]'\n);\n```\n\n----------------------------------------\n\nTITLE: REVOKE Statement Syntax in PrestoDB\nDESCRIPTION: Shows the syntax for the REVOKE statement which is used to remove privileges from users or roles. The statement can revoke specific privileges or all privileges and includes optional GRANT OPTION FOR clause.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/revoke.rst#2025-04-10_snippet_0\n\nLANGUAGE: none\nCODE:\n```\nREVOKE [ GRANT OPTION FOR ]\n( privilege [, ...] | ALL PRIVILEGES )\nON [ TABLE ] table_name FROM ( user | USER user | ROLE role )\n```\n\n----------------------------------------\n\nTITLE: Selecting All Data from Table in Memory Connector (SQL)\nDESCRIPTION: SQL command to select all data from a specific table in the Memory connector.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/memory.rst#2025-04-10_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM memory.default1.my_table;\n```\n\n----------------------------------------\n\nTITLE: Querying Differential Entropy with Jacknife Estimation\nDESCRIPTION: Example of calculating differential entropy using fixed histogram with Jacknife estimation for data between 0.0 and 1.0.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/aggregate.rst#2025-04-10_snippet_10\n\nLANGUAGE: none\nCODE:\n```\nSELECT\n    differential_entropy(1000000, x, 1.0, 'fixed_histogram_jacknife', 0.0, 1.0)\nFROM\n    data\n```\n\n----------------------------------------\n\nTITLE: Make Set Digest Examples\nDESCRIPTION: Examples of creating set digests from bigint and varchar arrays using make_set_digest function.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/setdigest.rst#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT make_set_digest(value)\nFROM (VALUES 1, 2, 3) T(value);\n\nSELECT make_set_digest(value)\nFROM (VALUES 'Presto', 'SQL', 'on', 'everything') T(value);\n```\n\n----------------------------------------\n\nTITLE: Array Subscript Access in Presto SQL\nDESCRIPTION: Demonstrates how to access array elements using the [] subscript operator, which is 1-based indexed.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/array.rst#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT my_array[1] AS first_element\n```\n\n----------------------------------------\n\nTITLE: Using any_keys_match Function in SQL\nDESCRIPTION: The any_keys_match function tests whether any key in a map satisfies a given predicate condition. Returns true if at least one key matches the predicate, false otherwise, and NULL in special cases.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/map.rst#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT any_keys_match(map(array['a', 'b', 'c'], array[1, 2, 3]), x -> x = 'a'); -- true\n```\n\n----------------------------------------\n\nTITLE: Using ST_GeometryN in Presto\nDESCRIPTION: Returns the geometry element at a given index (indices start at 1). For collections of geometries, returns the geometry at the specified index, and returns NULL if the index is out of bounds.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/geospatial.rst#2025-04-10_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nST_GeometryN(Geometry, index) -> Geometry\n```\n\n----------------------------------------\n\nTITLE: Listing Kafka Tables in Presto SQL\nDESCRIPTION: SQL query to show all tables in the TPCH schema of the Kafka catalog.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/kafka-tutorial.rst.txt#2025-04-10_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nSHOW TABLES;\n```\n\n----------------------------------------\n\nTITLE: Enabling Dynamic Filtering for Broadcast and Collocated Joins in Presto\nDESCRIPTION: Configuration properties to enable dynamic filtering and bucket pruning support for improved performance in queries with broadcast or collocated joins. This feature can be enabled using the experimental.enable-dynamic-filtering configuration property and enable_dynamic_filtering system session property.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.241.rst#2025-04-10_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSET SESSION experimental.enable-dynamic-filtering = true;\nSET SESSION enable_dynamic_filtering = true;\n```\n\n----------------------------------------\n\nTITLE: Querying $files Metadata Table in Iceberg with Presto\nDESCRIPTION: Shows how to query the $files metadata table, which provides an overview of data files in the current snapshot of the Iceberg table.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/iceberg.rst.txt#2025-04-10_snippet_19\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM \"ctas_nation$files\";\n```\n\nLANGUAGE: text\nCODE:\n```\n content |                                      file_path                               | file_format | record_count | file_size_in_bytes |        column_sizes         |       value_counts       |  null_value_counts   | nan_value_counts |          lower_bounds                     |             upper_bounds                   | key_metadata | split_offsets | equality_ids\n---------+------------------------------------------------------------------------------+-------------+--------------+--------------------+-----------------------------+--------------------------+----------------------+------------------+-------------------------------------------+--------------------------------------------+--------------+---------------+-------------\n   0     | s3://my-bucket/ctas_nation/data/9f889274-6f74-4d28-8164-275eef99f660.parquet | PARQUET     |           25 |               1648 | {1=52, 2=222, 3=105, 4=757} | {1=25, 2=25, 3=25, 4=25} | {1=0, 2=0, 3=0, 4=0} |  NULL            | {1=0, 2=ALGERIA, 3=0, 4= haggle. careful} | {1=24, 2=VIETNAM, 3=4, 4=y final packaget} | NULL         | NULL          | NULL\n```\n\n----------------------------------------\n\nTITLE: Enabling Metadata Query Optimization in Presto\nDESCRIPTION: Allows optimization of some aggregations using stored metadata values. Can significantly speed up certain queries but may produce incorrect results with empty partitions.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/admin/properties.rst#2025-04-10_snippet_43\n\nLANGUAGE: properties\nCODE:\n```\noptimizer.optimize-metadata-queries=false\n```\n\n----------------------------------------\n\nTITLE: Using Complex Types in Non-Equi JOIN in Presto SQL\nDESCRIPTION: Example of using array, map, or row types in a non-equi JOIN clause. A bug related to this usage was fixed in this release.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.151.rst#2025-04-10_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nJOIN ... ON array_column != other_column\n```\n\n----------------------------------------\n\nTITLE: Configuring Lark Sheets Properties in Presto\nDESCRIPTION: Configuration properties file for mounting Lark Sheets connector as a catalog in Presto. Defines essential connection parameters including app domain, ID, and secret file location.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/larksheets.rst#2025-04-10_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nconnector.name=lark-sheets\napp-domain=FEISHU\napp-id=example_app_id\napp-secret-file=/path/to/app-secret.json\n```\n\n----------------------------------------\n\nTITLE: Inserting Data with Values in Memory Connector (SQL)\nDESCRIPTION: SQL command to insert specific values into a table in the Memory connector.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/memory.rst#2025-04-10_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO memory.default1.my_table (id, name, age) VALUES (1, 'John Doe', 30);\n```\n\n----------------------------------------\n\nTITLE: Setting Query Memory Limits in Presto SQL\nDESCRIPTION: Sets the maximum memory allowed for a query and per node. These are session properties that control when a query is killed due to excessive memory usage.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/admin/spill.rst#2025-04-10_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nSET SESSION query_max_memory = '10GB';\nSET SESSION query_max_memory_per_node = '2GB';\n```\n\n----------------------------------------\n\nTITLE: Configuring Interrupt Timeout for Runaway Splits in Presto\nDESCRIPTION: Sets the timeout for interrupting runaway splits that are blocked in known situations. The value is specified in seconds and defaults to 600s.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.255.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\ntask.interrupt-runaway-splits-timeout = 600s\n```\n\n----------------------------------------\n\nTITLE: LDAP Password Authenticator Configuration\nDESCRIPTION: Basic LDAP configuration properties for password authentication including server URL and user bind pattern.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/security/ldap.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\npassword-authenticator.name=ldap\nldap.url=ldaps://ldap-server:636\nldap.user-bind-pattern=<Refer below for usage>\n```\n\n----------------------------------------\n\nTITLE: SQL Interval Literal Example\nDESCRIPTION: Example showing the format of a year-to-month interval literal that was fixed for proper negative interval handling.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.148.rst#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nINTERVAL '-2-3' YEAR TO MONTH\n```\n\n----------------------------------------\n\nTITLE: Counting Interior Rings of Polygon in Presto SQL\nDESCRIPTION: Returns the number of interior rings in a polygon geometry.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/geospatial.rst.txt#2025-04-10_snippet_21\n\nLANGUAGE: SQL\nCODE:\n```\nST_NumInteriorRing(Geometry) -> bigint\n```\n\n----------------------------------------\n\nTITLE: Using ORDER BY with LIMIT in Presto SQL\nDESCRIPTION: References improved error messaging for ORDER BY ... LIMIT queries that exceed memory allocation.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.86.rst#2025-04-10_snippet_8\n\nLANGUAGE: SQL\nCODE:\n```\nORDER BY ... LIMIT\n```\n\n----------------------------------------\n\nTITLE: Configuring Certificate Authentication for Presto\nDESCRIPTION: Configuration snippet for enabling certificate-based authentication in Presto, which is a prerequisite for authorization.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/security/authorization.rst#2025-04-10_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nhttp-server.authentication.type=CERTIFICATE\n```\n\n----------------------------------------\n\nTITLE: Defining Kafka Table Properties in Presto\nDESCRIPTION: Specifies optional properties for defining Kafka tables in Presto, including 'hidden' to hide columns and 'comment' to add column comments.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/kafka.rst.txt#2025-04-10_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\n\"hidden\"      optional  boolean   Hides the column from \"DESCRIBE <table name>\" and \"SELECT *\". Defaults to \"false\".\n\"comment\"     optional  string    Adds a column comment which is shown with \"DESCRIBE <table name>\".\n```\n\n----------------------------------------\n\nTITLE: Worker Information Response Format in Presto C++\nDESCRIPTION: Sample response from the '/v1/info' endpoint showing basic information about a Presto C++ worker, including its environment, node version, coordinator status, and uptime.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/presto_cpp/features.rst#2025-04-10_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n{\"coordinator\":false,\"environment\":\"testing\",\"nodeVersion\":{\"version\":\"testversion\"},\"starting\":false,\"uptime\":\"49.00s\"}\n```\n\n----------------------------------------\n\nTITLE: DROP VIEW Syntax in Presto SQL\nDESCRIPTION: The syntax for dropping a view in Presto SQL. It includes an optional IF EXISTS clause that suppresses errors if the view doesn't exist.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/drop-view.rst#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nDROP VIEW [ IF EXISTS ] view_name\n```\n\n----------------------------------------\n\nTITLE: Using from_hex Function with Mixed Case Input in Presto SQL\nDESCRIPTION: The from_hex function now allows mixed case input for hexadecimal values.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.104.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nfrom_hex()\n```\n\n----------------------------------------\n\nTITLE: Computing MinHash Cardinality\nDESCRIPTION: Calculates the cardinality of the MinHash sketch, representing the cardinality of column x.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/khyperloglog.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\ncardinality(khll)\n```\n\n----------------------------------------\n\nTITLE: Using array_position Function in Presto 0.257\nDESCRIPTION: The array_position function in Presto 0.257 now supports finding the n-th instance of an element in an array. This enhancement expands the functionality of the existing array_position function.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.257.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT array_position(array[1, 2, 3, 2, 5], 2, 2);\n```\n\n----------------------------------------\n\nTITLE: Configuring Thrift Connector Properties File\nDESCRIPTION: Basic configuration properties file required to set up the Thrift connector. This file should be placed at etc/catalog/thrift.properties and includes the connector name and the addresses of the Thrift servers to connect to.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/thrift.rst#2025-04-10_snippet_0\n\nLANGUAGE: none\nCODE:\n```\nconnector.name=presto-thrift\npresto.thrift.client.addresses=host:port,host:port\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Response Threads in Presto\nDESCRIPTION: Sets the maximum number of threads for handling HTTP responses in Presto. More threads can be beneficial for clusters with high concurrent queries or many workers.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/admin/properties.rst.txt#2025-04-10_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\ntask.http-response-threads:\n  Type: integer\n  Minimum value: 1\n  Default value: 100\n```\n\n----------------------------------------\n\nTITLE: New Array and Map Functions in Presto SQL\nDESCRIPTION: New functions added in Presto 0.237 for array and map operations, including array_sum, array_average, map_normalize, and set_agg.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.237.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\narray_sum\n```\n\nLANGUAGE: sql\nCODE:\n```\narray_average\n```\n\nLANGUAGE: sql\nCODE:\n```\nmap_normalize\n```\n\nLANGUAGE: sql\nCODE:\n```\nset_agg\n```\n\n----------------------------------------\n\nTITLE: Configuring Writer Count in Presto\nDESCRIPTION: Sets the number of concurrent writer threads per worker per query. Can increase write speed but may cause cluster overload if set too high.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/admin/properties.rst#2025-04-10_snippet_35\n\nLANGUAGE: properties\nCODE:\n```\ntask.writer-count=1\n```\n\n----------------------------------------\n\nTITLE: Setting a Table Property for an Iceberg Table in Presto\nDESCRIPTION: This procedure allows setting table properties for an Iceberg table through the system schema. The example sets the number of commit retries to 10.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/iceberg.rst#2025-04-10_snippet_35\n\nLANGUAGE: sql\nCODE:\n```\nCALL iceberg.system.set_table_property('schema_name', 'table_name', 'commit.retry.num-retries', '10');\n```\n\n----------------------------------------\n\nTITLE: Renaming Tables in Presto SQL\nDESCRIPTION: Examples of renaming tables using ALTER TABLE command in Presto SQL, including conditional renaming.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/alter-table.rst#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE users RENAME TO people;\n\nALTER TABLE IF EXISTS users RENAME TO people;\n```\n\n----------------------------------------\n\nTITLE: Example of Renaming a Schema in SQL\nDESCRIPTION: A practical example showing how to rename a schema named 'web' to 'traffic' using the ALTER SCHEMA command.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/alter-schema.rst#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nALTER SCHEMA web RENAME TO traffic\n```\n\n----------------------------------------\n\nTITLE: Using array_remove Function in Presto SQL\nDESCRIPTION: Reference to the new array_remove function added in this release for manipulating arrays in SQL queries.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.103.rst#2025-04-10_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\narray_remove\n```\n\n----------------------------------------\n\nTITLE: Getting Bounding Box Coordinates in Presto SQL\nDESCRIPTION: Functions to retrieve the maximum and minimum X and Y coordinates of a geometry's bounding box.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/geospatial.rst.txt#2025-04-10_snippet_13\n\nLANGUAGE: SQL\nCODE:\n```\nST_XMax(Geometry) -> double\n```\n\nLANGUAGE: SQL\nCODE:\n```\nST_YMax(Geometry) -> double\n```\n\nLANGUAGE: SQL\nCODE:\n```\nST_XMin(Geometry) -> double\n```\n\nLANGUAGE: SQL\nCODE:\n```\nST_YMin(Geometry) -> double\n```\n\n----------------------------------------\n\nTITLE: Generic Type Block Position Example in Java\nDESCRIPTION: Demonstration of using @BlockPosition with generic types specified by @TypeParameter annotation in scalar functions.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/develop/functions.rst.txt#2025-04-10_snippet_10\n\nLANGUAGE: java\nCODE:\n```\n@ScalarFunction(\"example\")\n@TypeParameter(\"T\")\npublic static Block exampleFunction(\n        @BlockPosition @SqlType(\"T\") Block block,\n        @BlockIndex int index) { /* ...implementation */ }\n```\n\n----------------------------------------\n\nTITLE: Renaming a View using ALTER VIEW in SQL\nDESCRIPTION: The ALTER VIEW RENAME TO statement is used to change the name of an existing view. It allows renaming a view without altering its definition, security settings, or dependencies. The optional IF EXISTS clause prevents errors if the view doesn't exist.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/alter-view.rst#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nALTER VIEW [IF EXISTS] old_view_name RENAME TO new_view_name;\n```\n\n----------------------------------------\n\nTITLE: Configuring Prometheus Properties in PrestoDB\nDESCRIPTION: Configuration file properties for setting up the Prometheus connector in PrestoDB. This includes connection settings, query duration limits, authentication, and TLS configuration.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/prometheus.rst#2025-04-10_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nconnector.name=prometheus\nprometheus.uri=http://localhost:9090\nprometheus.query-chunk-duration=1d\nprometheus.max-query-duration=1h\nprometheus.cache-ttl=30s\nprometheus.bearer-token-file=/path/to/bearer/token/file\nprometheus.tls.enabled=true\nprometheus.tls.truststore-path=/path/to/truststore\nprometheus.tls.truststore-password=truststorePassword\nverify-host-name=true\n```\n\n----------------------------------------\n\nTITLE: Defining Schema Rules in Presto's File-Based System Access Control\nDESCRIPTION: This JSON snippet shows how to define schema ownership rules in the file-based system access control plugin, specifying user and schema permissions.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/security/built-in-system-access-control.rst#2025-04-10_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"catalogs\": [\n    {\n      \"allow\": true\n    }\n  ],\n  \"schemas\": [\n    {\n      \"user\": \"admin\",\n      \"schema\": \".*\",\n      \"owner\": true\n    },\n    {\n      \"user\": \"guest\",\n      \"owner\": false\n    },\n    {\n      \"schema\": \"default\",\n      \"owner\": true\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Tangent Function in Presto SQL\nDESCRIPTION: Example of creating a custom tangent function in Presto SQL. The function takes a double parameter and returns a double value calculated as sine divided by cosine.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/create-function.rst#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCREATE FUNCTION example.default.tan(x double)\nRETURNS double\nDETERMINISTIC\nRETURNS NULL ON NULL INPUT\nRETURN sin(x) / cos(x)\n```\n\n----------------------------------------\n\nTITLE: Using DECIMAL Literals in SQL\nDESCRIPTION: Examples of DECIMAL literals in SQL queries. These can be used directly in queries or when inserting data into DECIMAL columns.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/language/types.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nDECIMAL '10.3', DECIMAL '1234567890', 1.1\n```\n\n----------------------------------------\n\nTITLE: Merging Maps with Custom Function in Presto SQL\nDESCRIPTION: Shows how to merge two maps using a custom function to combine values for matching keys using map_zip_with.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/map.rst.txt#2025-04-10_snippet_11\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT map_zip_with(MAP(ARRAY[1, 2, 3], ARRAY['a', 'b', 'c']), -- {1 -> ad, 2 -> be, 3 -> cf}\n                    MAP(ARRAY[1, 2, 3], ARRAY['d', 'e', 'f']),\n                    (k, v1, v2) -> concat(v1, v2));\nSELECT map_zip_with(MAP(ARRAY['k1', 'k2'], ARRAY[1, 2]), -- {k1 -> ROW(1, null), k2 -> ROW(2, 4), k3 -> ROW(null, 9)}\n                    MAP(ARRAY['k2', 'k3'], ARRAY[4, 9]),\n                    (k, v1, v2) -> (v1, v2));\nSELECT map_zip_with(MAP(ARRAY['a', 'b', 'c'], ARRAY[1, 8, 27]), -- {a -> a1, b -> b4, c -> c9}\n                    MAP(ARRAY['a', 'b', 'c'], ARRAY[1, 2, 3]),\n                    (k, v1, v2) -> k || CAST(v1/v2 AS VARCHAR));\n```\n\n----------------------------------------\n\nTITLE: MySQL Insert Data\nDESCRIPTION: Example of inserting data into a MySQL table using PrestoDB.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/mysql.rst.txt#2025-04-10_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO mysql.web.page_views VALUES(1, 'https://example.com', current_date, 'country');\n```\n\n----------------------------------------\n\nTITLE: Getting Top N Values from Map in SQL\nDESCRIPTION: The map_top_n_values function returns an array containing the top N values from a map, sorted in descending order. The number n must be a positive integer.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/map.rst#2025-04-10_snippet_15\n\nLANGUAGE: sql\nCODE:\n```\nSELECT map_top_n_values(map(ARRAY['a', 'b', 'c'], ARRAY[1, 2, 3]), 2) --- [3, 2]\n```\n\n----------------------------------------\n\nTITLE: Bitwise Logical Right Shift Operations in Presto SQL\nDESCRIPTION: Examples of logical right shift operations on integers with specified bit lengths using bitwise_logical_shift_right() function.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/bitwise.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT bitwise_logical_shift_right(7, 2, 4); -- 1\nSELECT bitwise_logical_shift_right(-8, 2, 5); -- 6\n```\n\n----------------------------------------\n\nTITLE: Debugging SSL Connection Error in Nessie Catalog Configuration\nDESCRIPTION: Error stack trace showing an SSL connection issue that occurs when trying to connect to a Nessie API server using HTTPS when the server is only available on HTTP. The solution is to set the iceberg.nessie.uri to use http instead of https.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/iceberg.rst#2025-04-10_snippet_4\n\nLANGUAGE: none\nCODE:\n```\nCaused by: javax.net.ssl.SSLException: Unsupported or unrecognized SSL message\n\tat sun.security.ssl.SSLSocketInputRecord.handleUnknownRecord(SSLSocketInputRecord.java:448)\n\tat sun.security.ssl.SSLSocketInputRecord.decode(SSLSocketInputRecord.java:174)\n\tat sun.security.ssl.SSLTransport.decode(SSLTransport.java:111)\n\tat sun.security.ssl.SSLSocketImpl.decode(SSLSocketImpl.java:1320)\n\tat sun.security.ssl.SSLSocketImpl.readHandshakeRecord(SSLSocketImpl.java:1233)\n\tat sun.security.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:417)\n\tat sun.security.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:389)\n\tat sun.net.www.protocol.https.HttpsClient.afterConnect(HttpsClient.java:558)\n\tat sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection.connect(AbstractDelegateHttpsURLConnection.java:201)\n\tat sun.net.www.protocol.https.HttpsURLConnectionImpl.connect(HttpsURLConnectionImpl.java:167)\n\tat org.projectnessie.client.http.impl.jdk8.UrlConnectionRequest.executeRequest(UrlConnectionRequest.java:71)\n\t... 42 more\n```\n\n----------------------------------------\n\nTITLE: Using random() Function with Upper Bound in Presto\nDESCRIPTION: New variant of the random() function that produces an integer between 0 and a specified upper bound.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.132.rst#2025-04-10_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nrandom()\n```\n\n----------------------------------------\n\nTITLE: Comparing Parsed and Raw Timestamps in Presto\nDESCRIPTION: This SQL query compares the parsed timestamp (created_at) with the raw date string extracted from the JSON message. It demonstrates how Presto handles the RFC 2822 date format conversion.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/kafka-tutorial.rst.txt#2025-04-10_snippet_15\n\nLANGUAGE: sql\nCODE:\n```\nSELECT created_at, raw_date FROM (\n  SELECT created_at, json_extract_scalar(_message, '$.created_at') AS raw_date\n  FROM tweets)\nGROUP BY 1, 2 LIMIT 5;\n```\n\n----------------------------------------\n\nTITLE: Configuring Kerberos Authentication for Presto Router\nDESCRIPTION: Additional configuration properties required when Kerberos authentication is needed for Presto Router, including principal settings and service pattern configuration.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/router/deployment.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\nquery-tracker.http-client.authentication.enabled=true\nquery-tracker.http-client.authentication.krb5.name-type=USER_NAME\nquery-tracker.http-client.authentication.krb5.principal=presto@REMOTE.BIZ\nquery-tracker.http-client.authentication.krb5.remote-service-name=HTTP/PRESTO@REMOTE.BIZ\nquery-tracker.http-client.authentication.krb5.service-principal-pattern=PATTERN\n```\n\n----------------------------------------\n\nTITLE: Presto Server Configuration Properties\nDESCRIPTION: Configuration properties for Presto server including coordinator settings, HTTP port, and discovery URI settings.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/installation/deploy-docker.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\ncoordinator=true\nnode-scheduler.include-coordinator=true\nhttp-server.http.port=8080\ndiscovery-server.enabled=true\ndiscovery.uri=http://localhost:8080\n```\n\n----------------------------------------\n\nTITLE: Executing Presto CLI with Kerberos Authentication\nDESCRIPTION: Bash script demonstrating how to invoke the Presto CLI with Kerberos authentication enabled. The script includes all required parameters for Kerberos authentication, TLS configuration, and connection to the Presto coordinator.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/security/cli.rst#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\n./presto \\\n  --server https://presto-coordinator.example.com:7778 \\\n  --krb5-config-path /etc/krb5.conf \\\n  --krb5-principal someuser@EXAMPLE.COM \\\n  --krb5-keytab-path /home/someuser/someuser.keytab \\\n  --krb5-remote-service-name presto \\\n  --keystore-path /tmp/presto.jks \\\n  --keystore-password password \\\n  --catalog <catalog> \\\n  --schema <schema>\n```\n\n----------------------------------------\n\nTITLE: Unsupported Primary Key Creation\nDESCRIPTION: Example of an unsupported CREATE TABLE operation with PRIMARY KEY constraint.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/postgresql.rst.txt#2025-04-10_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE users (\n        id INT PRIMARY KEY,\n        name VARCHAR,\n        email VARCHAR\n    );\n```\n\n----------------------------------------\n\nTITLE: Configuring Hive Split Buffer Size\nDESCRIPTION: Configuration property for controlling the maximum memory used to buffer splits for a single table scan in Hive connector.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.190.rst.txt#2025-04-10_snippet_11\n\nLANGUAGE: sql\nCODE:\n```\nhive.max-outstanding-splits-size\n```\n\n----------------------------------------\n\nTITLE: Constructing T-Digest in Presto SQL\nDESCRIPTION: Returns a T-digest from its component parts. This is the inverse of destructure_tdigest and is useful for adding externally-created T-digests to Presto.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/tdigest.rst.txt#2025-04-10_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\nconstruct_tdigest(centroid_means array<double>, centroid_weights array<double>, compression double, min double, max double, sum double, count bigint) -> tdigest<double>\n```\n\n----------------------------------------\n\nTITLE: Configuring Determinism Analyzer for Presto Verifier\nDESCRIPTION: This snippet presents configuration options for the determinism analyzer in Presto Verifier. It includes settings for teardown queries, maximum analysis runs, and handling of non-deterministic catalogs.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/admin/verifier.rst#2025-04-10_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\n\"determinism.run-teardown\"                Whether to run teardown queries for tables produced in determinism analysis.\n\"determinism.max-analysis-runs\"           Maximum number of additional control runs to check for the determinism of the\n                                            control query.\n\"determinism.handle-limit-query\"          Whether to enable the special handling for queries with a top level ``LIMIT``\n                                            clause.\n\"determinism.non-deterministic-catalogs\"  A comma-separated list of non-deterministic catalogs. Queries referencing table\n                                            from those catalogs are treated as non-deterministic.\n```\n\n----------------------------------------\n\nTITLE: Reversing Binary Data in Presto SQL\nDESCRIPTION: The reverse() function returns the input binary data with bytes in reverse order.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/binary.rst#2025-04-10_snippet_13\n\nLANGUAGE: SQL\nCODE:\n```\nreverse(binary) -> varbinary\n```\n\n----------------------------------------\n\nTITLE: Dropping a Hive Schema in Presto\nDESCRIPTION: Shows how to drop an entire schema in Hive using Presto. This operation removes all tables within the schema and the schema itself.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/hive.rst#2025-04-10_snippet_22\n\nLANGUAGE: SQL\nCODE:\n```\nDROP SCHEMA hive.web\n```\n\n----------------------------------------\n\nTITLE: Query JVM Runtime Information\nDESCRIPTION: SQL query example showing how to retrieve JVM version information from cluster nodes.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/jmx.rst.txt#2025-04-10_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSELECT node, vmname, vmversion\nFROM jmx.current.\"java.lang:type=runtime\";\n```\n\n----------------------------------------\n\nTITLE: ORDER BY and LIMIT Clauses in PrestoDB Queries\nDESCRIPTION: SQL clauses referenced in the verifier changes that can affect query determinism. Non-deterministic queries with LIMIT but without ORDER BY are skipped to reduce false positives in verification.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.263.rst#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nLIMIT\n```\n\nLANGUAGE: sql\nCODE:\n```\nORDER BY\n```\n\n----------------------------------------\n\nTITLE: Querying Oracle Table Data\nDESCRIPTION: SQL command to select all data from a specific table in Oracle database.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/oracle.rst.txt#2025-04-10_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM oracle.web.clicks;\n```\n\n----------------------------------------\n\nTITLE: Retrieving Failed Nodes Information in Presto (HTTP)\nDESCRIPTION: This endpoint returns a JSON document listing all nodes that have failed the last heartbeat check. The response structure is similar to the GET /v1/node endpoint but only includes nodes with recent failures.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/rest/node.rst#2025-04-10_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nVary: Accept\nContent-Type: text/javascript\n\n[\n   {\n      \"age\": \"1.37m\",\n      \"lastFailureInfo\": {\n          \"message\": \"Connect Timeout\",\n          \"stack\": [\n              \"org.eclipse.jetty.io.ManagedSelector$ConnectTimeout.run(ManagedSelector.java:683)\",\n              ....\n              \"java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\",\n              \"java.lang.Thread.run(Thread.java:745)\"\n          ],\n          \"suppressed\": [],\n          \"type\": \"java.net.SocketTimeoutException\"\n      },\n      \"lastRequestTime\": \"2017-08-05T11:52:42.647Z\",\n      \"lastResponseTime\": \"2017-08-05T11:52:42.647Z\",\n      \"recentFailureRatio\": 0.22498784153043677,\n      \"recentFailures\": 20.11558290058638,\n      \"recentFailuresByType\": {\n          \"java.net.SocketTimeoutException\": 20.11558290058638\n      },\n      \"recentRequests\": 89.40742203558189,\n      \"recentSuccesses\": 69.30583024727453,\n      \"uri\": \"http://172.19.0.3:8080\"\n   }\n]\n```\n\n----------------------------------------\n\nTITLE: Quantified Comparison with ALL/ANY\nDESCRIPTION: Shows usage of ALL and ANY quantifiers with comparison operators in subqueries.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/comparison.rst#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 'hello' = ANY (VALUES 'hello', 'world');\n\nSELECT 21 < ALL (VALUES 19, 20, 21);\n\nSELECT 42 >= SOME (SELECT 41 UNION ALL SELECT 42 UNION ALL SELECT 43);\n```\n\n----------------------------------------\n\nTITLE: Basic Role Grant Example in Presto SQL\nDESCRIPTION: Simple example showing how to grant a single role 'bar' to user 'foo'.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/sql/grant-roles.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nGRANT bar TO USER foo;\n```\n\n----------------------------------------\n\nTITLE: IO Explanation Example using EXPLAIN in Presto SQL\nDESCRIPTION: Shows the output of EXPLAIN with TYPE IO and FORMAT JSON options for an INSERT statement, displaying input and output table information.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/sql/explain.rst.txt#2025-04-10_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\npresto:hive> EXPLAIN (TYPE IO, FORMAT JSON) INSERT INTO test_nation SELECT * FROM nation WHERE regionkey = 2;\n            Query Plan\n-----------------------------------\n {\n   \"inputTableColumnInfos\" : [ {\n     \"table\" : {\n       \"catalog\" : \"hive\",\n       \"schemaTable\" : {\n         \"schema\" : \"tpch\",\n         \"table\" : \"nation\"\n       }\n     },\n     \"columns\" : [ {\n       \"columnName\" : \"regionkey\",\n       \"type\" : \"bigint\",\n       \"domain\" : {\n         \"nullsAllowed\" : false,\n         \"ranges\" : [ {\n           \"low\" : {\n             \"value\" : \"2\",\n             \"bound\" : \"EXACTLY\"\n           },\n           \"high\" : {\n             \"value\" : \"2\",\n             \"bound\" : \"EXACTLY\"\n           }\n         } ]\n       }\n     } ]\n   } ],\n   \"outputTable\" : {\n     \"catalog\" : \"hive\",\n     \"schemaTable\" : {\n       \"schema\" : \"tpch\",\n       \"table\" : \"test_nation\"\n     }\n   }\n }\n```\n\n----------------------------------------\n\nTITLE: Empty Parameter Description Output\nDESCRIPTION: Shows the output format when describing a prepared statement with no parameters.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/sql/describe-input.rst.txt#2025-04-10_snippet_6\n\nLANGUAGE: none\nCODE:\n```\n Position | Type\n-----------------\n(0 rows)\n```\n\n----------------------------------------\n\nTITLE: Using bitwise_shift_left Function in Presto SQL\nDESCRIPTION: The bitwise_shift_left function performs a left shift operation on a value treated as a bits-bit integer. It takes three parameters: the value to shift, the number of positions to shift, and the bit width to use for the operation.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/bitwise.rst#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT bitwise_shift_left(7, 2, 4); -- 12\nSELECT bitwise_shift_left(7, 2, 64); -- 28\n```\n\n----------------------------------------\n\nTITLE: SQL Function Invocation Example\nDESCRIPTION: Example showing the syntax for min_by and max_by functions with unique n parameter\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.285.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nmin_by(x, y, n) / max_by(x, y, n)\n```\n\n----------------------------------------\n\nTITLE: HyperLogLog Distinct Count Example\nDESCRIPTION: Example of using approx_distinct function to estimate the number of distinct entries in a column using HyperLogLog algorithm.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/setdigest.rst#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT approx_distinct(column_name) FROM table_name;\n```\n\n----------------------------------------\n\nTITLE: Presto Regular Expression Configuration\nDESCRIPTION: Settings for regular expression function behavior including library selection and DFA/NFA algorithm parameters.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/admin/properties.rst.txt#2025-04-10_snippet_25\n\nLANGUAGE: properties\nCODE:\n```\nregex-library=JONI\nre2j.dfa-states-limit=2147483647\nre2j.dfa-retries=5\n```\n\n----------------------------------------\n\nTITLE: Dropping a Schema with IF EXISTS Clause in Presto SQL\nDESCRIPTION: Example of dropping the 'sales' schema if it exists in Presto SQL. The IF EXISTS clause prevents an error if the schema doesn't exist.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/drop-schema.rst#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nDROP SCHEMA IF EXISTS sales\n```\n\n----------------------------------------\n\nTITLE: Basic Table Analysis Example\nDESCRIPTION: Simple example showing how to analyze a table named 'web' to collect statistics.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/sql/analyze.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nANALYZE web;\n```\n\n----------------------------------------\n\nTITLE: Configuring Query Execution Settings for Presto Verifier\nDESCRIPTION: This configuration table defines settings for controlling query execution on the control cluster. It includes options for specifying cluster hosts, ports, timeouts, and application name.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/admin/verifier.rst.txt#2025-04-10_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n=========================================== ===============================================================================\nName                                        Description\n=========================================== ===============================================================================\n\"control.hosts\"                           Comma-separated list of the control cluster hostnames or IP addresses.\n\"control.jdbc-port\"                       JDBC port of the control cluster.\n\"control.http-host\"                       HTTP port of the control cluster.\n\"control.jdbc-url-parameters\"             A \"JSON\" map representing the additional URL parameters for control JDBC.\n\"control.query-timeout\"                   The execution time limit of the control and the test queries.\n\"control.metadata-timeout\"                The execution time limit of \"DESC\" queries and \"LIMIT 0\" queries.\n\"control.checksum-timeout\"                The execution time limit of checksum queries.\n\"control.application-name\"                ApplicationName to be passed in ClientInfo. Can be used to set source.\n=========================================== ===============================================================================\n```\n\n----------------------------------------\n\nTITLE: Configuring Kafka Connector for Presto in Properties\nDESCRIPTION: Contents of the kafka.properties file used to configure the Kafka connector in Presto. It specifies the connector name, Kafka nodes, table names, and column visibility settings.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/kafka-tutorial.rst#2025-04-10_snippet_4\n\nLANGUAGE: properties\nCODE:\n```\nconnector.name=kafka\nkafka.nodes=localhost:9092\nkafka.table-names=tpch.customer,tpch.orders,tpch.lineitem,tpch.part,tpch.partsupp,tpch.supplier,tpch.nation,tpch.region\nkafka.hide-internal-columns=false\n```\n\n----------------------------------------\n\nTITLE: Demonstrating OR Operator with NULL Values in SQL\nDESCRIPTION: These SQL queries illustrate how the OR operator handles NULL values. The result can be NULL or TRUE depending on the other operand.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/logical.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT CAST(null AS boolean) OR CAST(null AS boolean); -- null\n\nSELECT CAST(null AS boolean) OR false; -- null\n\nSELECT CAST(null AS boolean) OR true; -- true\n```\n\n----------------------------------------\n\nTITLE: Preparing an INSERT Query in Presto SQL\nDESCRIPTION: Illustrates preparing an INSERT query using the PREPARE statement. This example prepares a statement to insert a row into the 'cities' table.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/sql/prepare.rst.txt#2025-04-10_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nPREPARE my_insert FROM\nINSERT INTO cities VALUES (1, 'San Francisco');\n```\n\n----------------------------------------\n\nTITLE: Pass-through Query Syntax for Elasticsearch in PrestoDB\nDESCRIPTION: Demonstrates the syntax for executing pass-through queries to Elasticsearch using PrestoDB. The query allows embedding any valid Elasticsearch Query DSL within the SQL statement using base32 encoding.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/elasticsearch.rst#2025-04-10_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM es.default.\"<index>$query:<es-query>\"\n```\n\n----------------------------------------\n\nTITLE: Extracting Year in Presto SQL\nDESCRIPTION: The 'year' function returns the year from a given date or timestamp value. The function returns a bigint value.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/datetime.rst.txt#2025-04-10_snippet_15\n\nLANGUAGE: SQL\nCODE:\n```\nyear(x) -> bigint\n```\n\n----------------------------------------\n\nTITLE: Listing Partitions of a Hive Table\nDESCRIPTION: Shows how to list all partitions of a Hive table by querying the special $partitions metadata view. This is useful for examining the partition structure of a table.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/hive.rst.txt#2025-04-10_snippet_19\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM hive.web.\"page_views$partitions\"\n```\n\n----------------------------------------\n\nTITLE: Aggregating Values into Quantile Digest in Presto SQL\nDESCRIPTION: This function returns a qdigest composed of all input values of x. It is used to create a qdigest from a set of values.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/qdigest.rst.txt#2025-04-10_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nqdigest_agg(x) -> qdigest<[same as x]>\n```\n\n----------------------------------------\n\nTITLE: Array Indexing and Construction in Presto SQL\nDESCRIPTION: Illustrates the ANSI SQL syntax for array indexing (starting from 1) and array construction in Presto.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/migration/from-hive.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT my_array[1] AS first_element\nFROM ...\n```\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT ARRAY[1, 2, 3] AS my_array\n```\n\n----------------------------------------\n\nTITLE: Referencing SQL Commands in Presto Release Notes\nDESCRIPTION: This snippet demonstrates how SQL commands are referenced in Presto release notes. It includes a mention of the SHOW TABLES command, for which a permissions check issue has been fixed.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.172.rst#2025-04-10_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n``SHOW TABLES``\n```\n\n----------------------------------------\n\nTITLE: Flattening Geometry Collections in Presto SQL\nDESCRIPTION: Recursively flattens any GeometryCollections, returning an array of constituent non-GeometryCollection geometries.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/geospatial.rst.txt#2025-04-10_snippet_19\n\nLANGUAGE: SQL\nCODE:\n```\nflatten_geometry_collections(Geometry) -> array(Geometry)\n```\n\n----------------------------------------\n\nTITLE: Create Iceberg Schema in S3\nDESCRIPTION: Example of creating a new Iceberg schema that stores tables in an S3 bucket.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/iceberg.rst.txt#2025-04-10_snippet_33\n\nLANGUAGE: sql\nCODE:\n```\nCREATE SCHEMA iceberg.web\nWITH (location = 's3://my-bucket/')\n```\n\n----------------------------------------\n\nTITLE: Using array_top_n Function in Presto SQL\nDESCRIPTION: The array_top_n function returns an array of the top N elements from a given array. It's useful for efficiently extracting the largest elements without sorting the entire array.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.284.rst#2025-04-10_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\narray_top_n(array, n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Codegen Scalar Function 'array_length' in Java for Presto\nDESCRIPTION: This snippet shows how to implement a codegen scalar function 'array_length' that returns the length of an array. It uses bytecode generation to create an optimized implementation.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/develop/functions.rst.txt#2025-04-10_snippet_5\n\nLANGUAGE: java\nCODE:\n```\npublic class CodegenArrayLengthFunction\n{\n    @CodegenScalarFunction(\"array_length\", calledOnNullInput = true)\n    @SqlType(StandardTypes.INTEGER)\n    @TypeParameter(\"K\")\n    public static MethodHandle arrayLength(@SqlType(\"array(K)\") Type arr)\n    {\n        CallSiteBinder binder = new CallSiteBinder();\n        ClassDefinition classDefinition = new ClassDefinition(a(Access.PUBLIC, FINAL), makeClassName(\"ArrayLength\"), type(Object.class));\n        classDefinition.declareDefaultConstructor(a(PRIVATE));\n\n        Parameter inputBlock = arg(\"inputBlock\", Block.class);\n        MethodDefinition method = classDefinition.declareMethod(a(Access.PUBLIC, STATIC), \"array_length\", type(Block.class), ImmutableList.of(inputBlock));\n        BytecodeBlock body = method.getBody();\n        body.append(inputBlock.invoke(\"getPositionCount\", int.class).ret());\n\n        Class<?> clazz = defineClass(classDefinition, Object.class, binder.getBindings(), CodegenArrayLengthFunction.class.getClassLoader());\n        return new methodHandle(clazz, \"array_length\", Block.class), Optional.of();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Restricting Result Elements in SQL Aggregate Functions\nDESCRIPTION: Limits the number of result elements to 10,000 or less for min, max, min_by, and max_by aggregate functions in SQL queries.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.194.rst#2025-04-10_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nmin(col, n), max(col, n), min_by(col1, col2, n), max_by(col1, col2, n)\n```\n\n----------------------------------------\n\nTITLE: Enabling HTTPS Endpoint Configuration\nDESCRIPTION: Settings to enable and configure HTTPS endpoint with keystore details.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/security/internal-communication.rst#2025-04-10_snippet_4\n\nLANGUAGE: none\nCODE:\n```\nhttp-server.https.enabled=true\nhttp-server.https.port=<https port>\nhttp-server.https.keystore.path=<keystore path>\nhttp-server.https.keystore.key=<keystore password>\n```\n\n----------------------------------------\n\nTITLE: TRUNCATE TABLE Syntax in Presto SQL\nDESCRIPTION: The syntax for the TRUNCATE TABLE command in Presto, which deletes all rows from a specified table.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/truncate.rst#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nTRUNCATE TABLE table_name\n```\n\n----------------------------------------\n\nTITLE: Configuring Google Sheets Connector Properties in Presto\nDESCRIPTION: Configuration file required to mount the Google Sheets connector as a catalog in Presto. The file should be created at etc/catalog/gsheets.properties with appropriate property values specified.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/googlesheets.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nconnector.name=gsheets\ncredentials-path=/path/to/google-sheets-credentials.json\nmetadata-sheet-id=exampleId\n```\n\n----------------------------------------\n\nTITLE: Setting Query Timeout in JDBC Driver\nDESCRIPTION: Adds support for setting query timeout in the JDBC driver using the 'Statement.setQueryTimeout()' method.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.179.rst.txt#2025-04-10_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\nStatement.setQueryTimeout()\n```\n\n----------------------------------------\n\nTITLE: Using bitwise_right_shift Generic Function in Presto SQL\nDESCRIPTION: The bitwise_right_shift generic function performs a logical right shift on integral value types. It returns a value of the same type as the input, and only uses the lower bits of the shift parameter.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/bitwise.rst#2025-04-10_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nSELECT bitwise_right_shift(TINYINT '7', 2); -- 1\nSELECT bitwise_right_shift(SMALLINT -8, 2); -- 16382\n```\n\n----------------------------------------\n\nTITLE: Configuring Temporary Table Storage Format in PrestoDB\nDESCRIPTION: Property to set the storage format for temporary tables used in CTE materialization. Supports various formats like PAGEFILE, ORC, PARQUET, etc.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/admin/cte-materialization.rst#2025-04-10_snippet_4\n\nLANGUAGE: properties\nCODE:\n```\nhive.temporary-table-storage-format=ORC\n```\n\n----------------------------------------\n\nTITLE: Attaching Hive Metastore to Alluxio Catalog\nDESCRIPTION: This command demonstrates how to use the Alluxio CLI to attach an existing Hive metastore to the Alluxio Catalog. It requires specifying the Hive metastore location and database name.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/hive.rst#2025-04-10_snippet_9\n\nLANGUAGE: none\nCODE:\n```\n./bin/alluxio table attachdb hive thrift://HOSTNAME:9083 hive_db_name\n```\n\n----------------------------------------\n\nTITLE: Configuring Redshift Connector in Presto\nDESCRIPTION: Basic configuration for the Redshift connector in Presto, specified in a catalog properties file. This configuration includes essential connection parameters such as connector name, JDBC URL, username, and password.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/redshift.rst#2025-04-10_snippet_0\n\nLANGUAGE: none\nCODE:\n```\nconnector.name=redshift\nconnection-url=jdbc:postgresql://example.net:5439/database\nconnection-user=root\nconnection-password=secret\n```\n\n----------------------------------------\n\nTITLE: Dropping an Iceberg View\nDESCRIPTION: Example of dropping an Iceberg view.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/iceberg.rst.txt#2025-04-10_snippet_52\n\nLANGUAGE: sql\nCODE:\n```\nDROP VIEW iceberg.web.view_page_views;\n```\n\n----------------------------------------\n\nTITLE: Casting JSON to REAL Type in Presto SQL\nDESCRIPTION: Demonstrates the new capability in Presto 0.176 to cast JSON values to the REAL data type, allowing for conversion of JSON numeric representations to floating-point numbers.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.176.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT CAST(JSON '123.45' AS REAL)\n```\n\n----------------------------------------\n\nTITLE: Creating KHyperLogLog Sketch\nDESCRIPTION: Creates a KHyperLogLog sketch representing the relationship between two columns x and y, where x is summarized in MinHash and y values are linked using HyperLogLog sketches.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/khyperloglog.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nkhyperloglog_agg(x, y)\n```\n\n----------------------------------------\n\nTITLE: Information Schema Query\nDESCRIPTION: SQL query reference for information_schema.columns table access modification.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.195.rst.txt#2025-04-10_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\ninformation_schema.columns\n```\n\n----------------------------------------\n\nTITLE: Dropping an Iceberg View\nDESCRIPTION: Example of dropping an Iceberg view.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/iceberg.rst.txt#2025-04-10_snippet_52\n\nLANGUAGE: sql\nCODE:\n```\nDROP VIEW iceberg.web.view_page_views;\n```\n\n----------------------------------------\n\nTITLE: Displaying Presto CLI Help\nDESCRIPTION: Command to display available options and help information for the Presto CLI.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/installation/cli.rst#2025-04-10_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n./presto --help\n```\n\n----------------------------------------\n\nTITLE: Adding word_stem Function in SQL\nDESCRIPTION: Introduces the word_stem function for text processing operations in SQL queries.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.194.rst#2025-04-10_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nword_stem()\n```\n\n----------------------------------------\n\nTITLE: Referencing New Functions in reStructuredText\nDESCRIPTION: This snippet demonstrates how to reference newly added functions in reStructuredText format, specifically mentioning the binomial_cdf and inverse_binomial_cdf functions.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.253.rst#2025-04-10_snippet_2\n\nLANGUAGE: restructuredtext\nCODE:\n```\n:func:`!binomial_cdf` and :func:`!inverse_binomial_cdf`\n```\n\n----------------------------------------\n\nTITLE: Local Exchange Buffer Size Configuration\nDESCRIPTION: Configuration property for setting the local exchange buffer size in Presto, affecting memory usage during query execution.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.198.rst.txt#2025-04-10_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\ntask.max-local-exchange-buffer-size\n```\n\n----------------------------------------\n\nTITLE: Deleting Stage via REST API\nDESCRIPTION: DELETE endpoint that removes a specific stage identified by stageId from a Presto query execution.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/rest/stage.rst#2025-04-10_snippet_1\n\nLANGUAGE: rest\nCODE:\n```\nDELETE /v1/stage/{stageId}\n```\n\n----------------------------------------\n\nTITLE: MySQL Table Creation SQL\nDESCRIPTION: Example of creating a new table in MySQL through PrestoDB with various column types.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/mysql.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE mysql.web.page_views (\n  user_id bigint,\n  page_url varchar,\n  ds date,\n  country varchar\n);\n```\n\n----------------------------------------\n\nTITLE: Authorization Properties Configuration\nDESCRIPTION: Complete set of authorization configuration properties including enable/disable flags, default policy, and role settings.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/security/authorization.rst.txt#2025-04-10_snippet_4\n\nLANGUAGE: properties\nCODE:\n```\nhttp-server.authorization.enabled=true\nhttp-server.authorization.default-policy=ALLOW\nhttp-server.authorization.default-allowed-roles=USER,ADMIN\nhttp-server.authorization.allow-unsecured-requests=false\n```\n\n----------------------------------------\n\nTITLE: Private IP Address Validation\nDESCRIPTION: Checks if an IP address is private or reserved according to IANA specifications.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/ip.rst.txt#2025-04-10_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nSELECT is_private_ip(IPADDRESS '10.0.0.1');\nSELECT is_private_ip(IPADDRESS '192.168.0.1');\nSELECT is_private_ip(IPADDRESS '157.240.200.99');\n```\n\n----------------------------------------\n\nTITLE: SQL LIKE with CREATE TABLE\nDESCRIPTION: New support for using LIKE clause with CREATE TABLE statements.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.154.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nLIKE\n```\n\n----------------------------------------\n\nTITLE: Troubleshooting Presto CLI with Kerberos Debugging\nDESCRIPTION: Bash script showing how to enable additional Kerberos debugging information when running the Presto CLI. This requires invoking the CLI JAR directly with java rather than using the self-executable JAR, allowing JVM debug arguments to be passed.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/security/cli.rst#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\njava \\\n  -Dsun.security.krb5.debug=true \\\n  -jar presto-cli-*-executable.jar \\\n  --server https://presto-coordinator.example.com:7778 \\\n  --krb5-config-path /etc/krb5.conf \\\n  --krb5-principal someuser@EXAMPLE.COM \\\n  --krb5-keytab-path /home/someuser/someuser.keytab \\\n  --krb5-remote-service-name presto \\\n  --keystore-path /tmp/presto.jks \\\n  --keystore-password password \\\n  --catalog <catalog> \\\n  --schema <schema>\n```\n\n----------------------------------------\n\nTITLE: Using simplify_geometry in Presto\nDESCRIPTION: Returns a simplified version of the input geometry using the Douglas-Peucker algorithm. This function reduces the number of points in a geometry while preserving its essential shape, avoiding creating invalid derived geometries.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/geospatial.rst#2025-04-10_snippet_35\n\nLANGUAGE: sql\nCODE:\n```\nsimplify_geometry(Geometry, double) -> Geometry\n```\n\n----------------------------------------\n\nTITLE: Unnesting Arrays and Maps with ROW Type in Presto SQL\nDESCRIPTION: References a fix for unnesting arrays and maps that contain the ROW data type.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.86.rst#2025-04-10_snippet_11\n\nLANGUAGE: SQL\nCODE:\n```\nROW\n```\n\n----------------------------------------\n\nTITLE: Creating a New Branch from an Existing Iceberg Branch in Presto\nDESCRIPTION: This procedure creates a new branch and sets its current snapshot equal to the latest snapshot of an existing branch, effectively creating a branch from another branch.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/iceberg.rst#2025-04-10_snippet_34\n\nLANGUAGE: sql\nCODE:\n```\nCALL iceberg.system.fast_forward('schema_name', 'table_name', 'branch1', 'main');\n```\n\n----------------------------------------\n\nTITLE: Configuring BigQuery Connector in PrestoDB\nDESCRIPTION: Example properties file configuration for setting up the BigQuery connector in PrestoDB. This configuration should be saved in etc/catalog directory as a file like bigquery.properties to mount the BigQuery connector as a catalog.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/bigquery.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nconnector.name=bigquery\nbigquery.project-id=<your Google Cloud Platform project id>\n```\n\n----------------------------------------\n\nTITLE: New SQL Functions Added in 0.202\nDESCRIPTION: New functions added in this release include multimap_from_entries, several geospatial functions, and statistical functions for Wilson score intervals.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.202.rst#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nmultimap_from_entries()\n```\n\nLANGUAGE: sql\nCODE:\n```\nbing_tiles_around()\n```\n\nLANGUAGE: sql\nCODE:\n```\nST_NumGeometries()\n```\n\nLANGUAGE: sql\nCODE:\n```\nST_GeometryN()\n```\n\nLANGUAGE: sql\nCODE:\n```\nST_ConvexHull()\n```\n\nLANGUAGE: sql\nCODE:\n```\nwilson_interval_lower()\n```\n\nLANGUAGE: sql\nCODE:\n```\nwilson_interval_upper()\n```\n\n----------------------------------------\n\nTITLE: Configuring Presto Verifier Properties\nDESCRIPTION: Configuration properties for setting up Presto Verifier including source query details and control/test cluster settings\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/admin/verifier.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\nsource-query.suites=suite\nsource-query.database=jdbc:mysql://localhost:3306/mydb?user=my_username&password=my_password\ncontrol.hosts=127.0.0.1\ncontrol.http-port=8080\ncontrol.jdbc-port=8080\ncontrol.application-name=verifier-test\ntest.hosts=127.0.0.1\ntest.http-port=8081\ntest.jdbc-port=8081\ntest.application-name=verifier-test\ntest-id=1\n```\n\n----------------------------------------\n\nTITLE: Basic Table Analysis Example\nDESCRIPTION: Simple example showing how to analyze a table named 'web' to collect statistics.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/analyze.rst#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nANALYZE web;\n```\n\n----------------------------------------\n\nTITLE: Extracting Minute in Presto SQL\nDESCRIPTION: The 'minute' function returns the minute of the hour from a given time or timestamp value. The function returns a bigint value.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/datetime.rst.txt#2025-04-10_snippet_8\n\nLANGUAGE: SQL\nCODE:\n```\nminute(x) -> bigint\n```\n\n----------------------------------------\n\nTITLE: Configuring Sink Maximum Buffer Size in Presto\nDESCRIPTION: Sets the output buffer size for task data waiting to be pulled by upstream tasks. Increasing this value may improve network throughput for data transferred between stages in high-latency networks.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/admin/properties.rst#2025-04-10_snippet_27\n\nLANGUAGE: properties\nCODE:\n```\nsink.max-buffer-size\n```\n\n----------------------------------------\n\nTITLE: CASE Expression Example\nDESCRIPTION: Example of simple CASE expression converting numbers to text representations.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/conditional.rst#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT a,\n       CASE a\n           WHEN 1 THEN 'one'\n           WHEN 2 THEN 'two'\n           ELSE 'many'\n       END\n```\n\n----------------------------------------\n\nTITLE: Defining PREPARE Statement Syntax in Presto SQL\nDESCRIPTION: Shows the syntax for the PREPARE statement in Presto SQL. It defines how to prepare a statement with a name for later execution.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/sql/prepare.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nPREPARE statement_name FROM statement\n```\n\n----------------------------------------\n\nTITLE: Extracting Day of Month in Presto SQL\nDESCRIPTION: The 'day' function returns the day of the month from a given date or timestamp value. It's also aliased as 'day_of_month'. The function returns a bigint value.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/datetime.rst.txt#2025-04-10_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nday(x) -> bigint\n```\n\nLANGUAGE: SQL\nCODE:\n```\nday_of_month(x) -> bigint\n```\n\n----------------------------------------\n\nTITLE: Dropping a Hive Schema\nDESCRIPTION: Demonstrates how to drop a Hive schema. This operation removes the schema and all tables within it from the metadata store.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/hive.rst.txt#2025-04-10_snippet_22\n\nLANGUAGE: sql\nCODE:\n```\nDROP SCHEMA hive.web\n```\n\n----------------------------------------\n\nTITLE: Merging KHyperLogLog Structures\nDESCRIPTION: Returns the KHyperLogLog of the aggregate union of individual KHyperLogLog structures.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/khyperloglog.rst#2025-04-10_snippet_7\n\nLANGUAGE: SQL\nCODE:\n```\nmerge(khll)\n```\n\n----------------------------------------\n\nTITLE: Adding array_min_by and array_max_by Functions in SQL\nDESCRIPTION: Introduces new SQL functions array_min_by and array_max_by to find the smallest or largest element of an array using a custom measuring function.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.279.rst.txt#2025-04-10_snippet_6\n\nLANGUAGE: SQL\nCODE:\n```\narray_min_by(array, lambda_measuring_function)\narray_max_by(array, lambda_measuring_function)\n```\n\n----------------------------------------\n\nTITLE: SQL LIKE with CREATE TABLE\nDESCRIPTION: New support for using LIKE clause with CREATE TABLE statements.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.154.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nLIKE\n```\n\n----------------------------------------\n\nTITLE: SET SESSION Command Examples in Presto SQL\nDESCRIPTION: Examples showing how to use the SET SESSION command to set global and catalog-specific session properties in Presto.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/sql/set-session.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSET SESSION optimize_hash_generation = true;\nSET SESSION hive.optimized_reader_enabled = true;\n```\n\n----------------------------------------\n\nTITLE: Removing Orphan Files from an Iceberg Table with Timestamp in Presto\nDESCRIPTION: This procedure cleans up files not referenced in any metadata files of an Iceberg table, specifically targeting files older than a specified timestamp.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/iceberg.rst#2025-04-10_snippet_31\n\nLANGUAGE: sql\nCODE:\n```\nCALL iceberg.system.remove_orphan_files('db', 'sample', TIMESTAMP '2023-08-31 00:00:00.000');\n```\n\n----------------------------------------\n\nTITLE: TABLESAMPLE Queries\nDESCRIPTION: Examples of using BERNOULLI and SYSTEM sampling methods to retrieve data samples from tables.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/sql/select.rst.txt#2025-04-10_snippet_27\n\nLANGUAGE: sql\nCODE:\n```\nSELECT *\nFROM users TABLESAMPLE BERNOULLI (50);\n\nSELECT *\nFROM users TABLESAMPLE SYSTEM (75);\n```\n\n----------------------------------------\n\nTITLE: SQL Commands in Presto 0.89\nDESCRIPTION: Examples of SQL commands affected by the release changes, including USE CATALOG, USE SCHEMA, SELECT NULL, JOIN, and UNION operations.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.89.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nUSE CATALOG\nUSE SCHEMA\nSELECT NULL\nJOIN\nUNION\n```\n\n----------------------------------------\n\nTITLE: Example of Dropping a View in Presto SQL\nDESCRIPTION: A simple example of dropping a view named 'orders_by_date' in Presto SQL.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/drop-view.rst#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nDROP VIEW orders_by_date\n```\n\n----------------------------------------\n\nTITLE: Using ST_Buffer Function for Geometry Operations in SQL\nDESCRIPTION: The efficiency of the ST_Buffer function has been improved. It now produces fewer buffer points on rounded corners, which may result in slightly different but very similar results. It also handles buffering with small distances (< 1e-9) better.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.231.rst.txt#2025-04-10_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT ST_Buffer(geometry_column, distance) FROM table;\n```\n\n----------------------------------------\n\nTITLE: Creating Table with Columns in Memory Connector (SQL)\nDESCRIPTION: SQL command to create a new table with specified columns in the Memory connector.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/memory.rst#2025-04-10_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE memory.default1.my_table (id integer, name varchar, age integer);\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Server Log Retention Period in Presto\nDESCRIPTION: Sets the number of archive log periods (days) that the Presto HTTP server retains. With the default value of 15, logs are kept for the past 15 days.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/admin/properties.rst.txt#2025-04-10_snippet_27\n\nLANGUAGE: properties\nCODE:\n```\nhttp-server.log.max-history\n```\n\n----------------------------------------\n\nTITLE: Presto Function Reference\nDESCRIPTION: Reference to Presto specific functions mentioned in the changelog including geometry_to_bing_tiles and row_number.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.192.rst#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\ngeometry_to_bing_tiles()\nrow_number()\ngrouping()\n```\n\n----------------------------------------\n\nTITLE: Creating a Hive Schema in Presto\nDESCRIPTION: Creates a new Hive schema named 'web' that will store tables in an S3 bucket named 'my-bucket'. This demonstrates how to set up a schema with a specific storage location.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/hive.rst#2025-04-10_snippet_14\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE SCHEMA hive.web\nWITH (location = 's3://my-bucket/')\n```\n\n----------------------------------------\n\nTITLE: Accessing Array Elements in Presto SQL\nDESCRIPTION: Demonstrates how to use the subscript operator for dynamic array indexing in Presto, which supports full expressions unlike Hive.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/migration/from-hive.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT my_array[CARDINALITY(my_array)] as last_element\nFROM ...\n```\n\n----------------------------------------\n\nTITLE: Renaming FLOAT to REAL in SQL\nDESCRIPTION: Renames the FLOAT data type to REAL in Presto SQL for better compatibility with the SQL standard. This change may affect existing queries and schemas.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.152.rst.txt#2025-04-10_snippet_5\n\nLANGUAGE: SQL\nCODE:\n```\nREAL\n```\n\n----------------------------------------\n\nTITLE: Using ST_StartPoint in Presto\nDESCRIPTION: Returns the first point of a LineString geometry as a Point. This is a shortcut for ST_PointN(geometry, 1), providing easy access to the starting vertex of a linestring.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/geospatial.rst#2025-04-10_snippet_25\n\nLANGUAGE: sql\nCODE:\n```\nST_StartPoint(Geometry) -> point\n```\n\n----------------------------------------\n\nTITLE: Enabling Data Redistribution Before Writing in Presto\nDESCRIPTION: Controls whether to redistribute data before writing to eliminate performance impact of data skew. Can be disabled when output data is known to be not skewed to avoid overhead.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/admin/properties.rst#2025-04-10_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nredistribute-writes = true\n```\n\n----------------------------------------\n\nTITLE: Querying Information Schema in Presto SQL\nDESCRIPTION: Fixes an issue when querying 'information_schema.columns' for tables with no columns or unsupported columns in MySQL, PostgreSQL, Redshift, and SQL Server connectors.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.191.rst#2025-04-10_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT * FROM information_schema.columns WHERE table_schema = 'my_schema' AND table_name = 'my_table';\n```\n\n----------------------------------------\n\nTITLE: Creating Tables in PostgreSQL via PrestoDB\nDESCRIPTION: Example of creating a new table with an integer column.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/postgresql.rst#2025-04-10_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE postgresql.public.test_integer ( id INTEGER );\n```\n\n----------------------------------------\n\nTITLE: Authorizer Configuration Path Setting\nDESCRIPTION: Configuration property to specify the file path for role-regex mapping.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/security/authorization.rst.txt#2025-04-10_snippet_3\n\nLANGUAGE: properties\nCODE:\n```\nconfiguration-based-authorizer.role-regex-map.file-path=<path to mapping file>\n```\n\n----------------------------------------\n\nTITLE: Calculating Quantile at Value for T-Digest in Presto SQL\nDESCRIPTION: Returns the approximate quantile number between 0 and 1 from the T-digest given an input value. Returns null if the T-digest is empty or the input value is outside the range of the digest.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/tdigest.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nquantile_at_value(tdigest<double>, value) -> double\n```\n\n----------------------------------------\n\nTITLE: Using EXPLAIN (TYPE VALIDATE) in Presto SQL\nDESCRIPTION: The EXPLAIN (TYPE VALIDATE) syntax can now be used with EXPLAIN queries to validate the query structure without execution. This is useful for checking query correctness during development or troubleshooting.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.284.rst#2025-04-10_snippet_7\n\nLANGUAGE: SQL\nCODE:\n```\nEXPLAIN (TYPE VALIDATE) SELECT * FROM table\n```\n\n----------------------------------------\n\nTITLE: Querying Partitions with Condition in Hive Connector\nDESCRIPTION: Enables SHOW PARTITIONS query with a WHERE condition for tables exceeding the hive.max-partitions-per-scan limit, provided the condition reduces partitions below this threshold.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.193.rst#2025-04-10_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSHOW PARTITIONS FROM <table> WHERE <condition>\n```\n\n----------------------------------------\n\nTITLE: Describing Oracle Table Structure\nDESCRIPTION: SQL commands to view column information for a specific table in Oracle database.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/oracle.rst.txt#2025-04-10_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nDESCRIBE oracle.web.clicks;\nSHOW COLUMNS FROM oracle.web.clicks;\n```\n\n----------------------------------------\n\nTITLE: Querying Hidden Path Column\nDESCRIPTION: Example of querying the hidden $path column which shows the full file system path of the data file.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/iceberg.rst#2025-04-10_snippet_11\n\nLANGUAGE: sql\nCODE:\n```\nSELECT \"$path\", regionkey FROM \"ctas_nation\";\n```\n\n----------------------------------------\n\nTITLE: Using map_key_exists Function in PrestoDB\nDESCRIPTION: Example of using the newly added map_key_exists built-in SQL UDF to check if a key exists in a map.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.287.rst.txt#2025-04-10_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nSELECT map_key_exists(map(ARRAY[1, 2], ARRAY['a', 'b']), 1);\n```\n\n----------------------------------------\n\nTITLE: Configuring Maven Dependencies for Presto Plugins\nDESCRIPTION: Shows how to define the Presto SPI dependency in a Maven POM file. The 'provided' scope is used because Presto provides these classes at runtime.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/develop/spi-overview.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>com.facebook.presto</groupId>\n    <artifactId>presto-spi</artifactId>\n    <scope>provided</scope>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: SET SESSION Command Syntax in Presto\nDESCRIPTION: The syntax for the SET SESSION command in Presto, showing both the global session property syntax and the catalog-specific syntax.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/sql/set-session.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: none\nCODE:\n```\nSET SESSION name = expression\nSET SESSION catalog.name = expression\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Partial Aggregation Memory in Presto\nDESCRIPTION: Defines the maximum size of partial aggregation results for distributed aggregations. Increasing can reduce network transfer and CPU usage at the cost of more memory usage.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/admin/properties.rst.txt#2025-04-10_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\ntask.max-partial-aggregation-memory:\n  Type: data size\n  Default value: 16MB\n```\n\n----------------------------------------\n\nTITLE: Configuring Minimum Candidate Nodes in Presto\nDESCRIPTION: Sets the minimum number of candidate nodes evaluated by the node scheduler when choosing a target node for a split. Affects split balancing and query latency.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/admin/properties.rst.txt#2025-04-10_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\nnode-scheduler.min-candidates:\n  Type: integer\n  Minimum value: 1\n  Default value: 10\n```\n\n----------------------------------------\n\nTITLE: Stopping Presto Docker Container\nDESCRIPTION: Command to stop the running Presto Docker container. This is part of the cleanup process.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/installation/deploy-docker.rst#2025-04-10_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ndocker stop presto\n```\n\n----------------------------------------\n\nTITLE: Retrieving Value at Quantile from Quantile Digest in Presto SQL\nDESCRIPTION: This function returns the approximate percentile value from the quantile digest given a quantile between 0 and 1. It allows querying specific percentiles from the qdigest structure.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/qdigest.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nvalue_at_quantile(qdigest(T), quantile) -> T\n```\n\n----------------------------------------\n\nTITLE: Defining CALL Statement Syntax in Presto SQL\nDESCRIPTION: This snippet shows the syntax for the CALL statement in Presto SQL. It demonstrates how to invoke a procedure with optional named or positional arguments.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/call.rst#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCALL procedure_name ( [ name => ] expression [, ...] )\n```\n\n----------------------------------------\n\nTITLE: Creating a Temporary Square Function in Presto SQL\nDESCRIPTION: Example of creating a temporary function that calculates the square of an integer. Temporary functions are only valid within the current session.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/create-function.rst#2025-04-10_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TEMPORARY FUNCTION square(x int)\nRETURNS int\nRETURN x * x\n```\n\n----------------------------------------\n\nTITLE: Extracting Timezone Hour in Presto SQL\nDESCRIPTION: The 'timezone_hour' function returns the hour of the time zone offset from a given timestamp value. The function returns a bigint value.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/datetime.rst.txt#2025-04-10_snippet_12\n\nLANGUAGE: SQL\nCODE:\n```\ntimezone_hour(timestamp) -> bigint\n```\n\n----------------------------------------\n\nTITLE: Querying Table Manifests\nDESCRIPTION: Query to retrieve manifest details for table snapshots from the hidden $manifests metadata table.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/iceberg.rst#2025-04-10_snippet_16\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM \"ctas_nation$manifests\";\n```\n\n----------------------------------------\n\nTITLE: Analyzing Uniqueness Distribution\nDESCRIPTION: Returns a histogram of uniqueness distribution with default 256 buckets, showing the relative frequency of x values based on their associated y values.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/khyperloglog.rst.txt#2025-04-10_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nuniqueness_distribution(khll)\n```\n\n----------------------------------------\n\nTITLE: Adding Table Comments Support in CREATE TABLE Statements\nDESCRIPTION: Documents new support for adding comments to tables when using CREATE TABLE and CREATE TABLE AS statements.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.173.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE\n```\n\n----------------------------------------\n\nTITLE: Using min_by Aggregation Function in Presto SQL\nDESCRIPTION: Shows the new min_by aggregation function which returns the value of the second argument associated with the minimum value of the first argument.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.86.rst#2025-04-10_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nmin_by\n```\n\n----------------------------------------\n\nTITLE: Dropping an Iceberg View in Presto\nDESCRIPTION: Removes the 'view_page_views' view from the Iceberg catalog, deleting the view definition but not affecting any underlying data.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/iceberg.rst#2025-04-10_snippet_54\n\nLANGUAGE: sql\nCODE:\n```\nDROP VIEW iceberg.web.view_page_views;\n```\n\n----------------------------------------\n\nTITLE: SHOW SCHEMAS Command Syntax in Presto\nDESCRIPTION: Shows the syntax for the SHOW SCHEMAS command, which lists schemas in a catalog. The command can optionally specify a catalog and use the LIKE clause to filter schema names using pattern matching.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/sql/show-schemas.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: none\nCODE:\n```\nSHOW SCHEMAS [ FROM catalog ] [ LIKE pattern ]\n```\n\n----------------------------------------\n\nTITLE: Using bitwise_right_shift_arithmetic Generic Function in Presto SQL\nDESCRIPTION: The bitwise_right_shift_arithmetic generic function performs an arithmetic right shift on integral value types. It returns a value of the same type as the input, and only uses the lower bits of the shift parameter.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/bitwise.rst#2025-04-10_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nSELECT bitwise_right_shift_arithmetic(BIGINT '-8', 2); -- -2\nSELECT bitwise_right_shift_arithmetic(SMALLINT '7', 2); -- 1\n```\n\n----------------------------------------\n\nTITLE: Generating Random Secret for JWT\nDESCRIPTION: Command to generate a large random key for JWT shared secret.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/security/internal-communication.rst#2025-04-10_snippet_8\n\nLANGUAGE: text\nCODE:\n```\nopenssl rand 512 | base64\n```\n\n----------------------------------------\n\nTITLE: Basic SELECT Prepared Statement\nDESCRIPTION: Example of preparing a simple SELECT query without parameters to be executed later.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/prepare.rst#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nPREPARE my_select1 FROM\nSELECT * FROM nation;\n```\n\n----------------------------------------\n\nTITLE: Configuring Parquet Column Name Access\nDESCRIPTION: Configuration property to enable accessing Parquet columns by name instead of ordinal position in Hive tables.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.101.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\nhive.parquet.use-column-names=true\n```\n\n----------------------------------------\n\nTITLE: Extended JMX Connector Configuration with Periodic Dumps\nDESCRIPTION: Configuration for enabling periodic dumps of JMX information with custom sampling period and history size limits.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/jmx.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\nconnector.name=jmx\njmx.dump-tables=java.lang:type=Runtime,com.facebook.presto.execution.scheduler:name=NodeScheduler\njmx.dump-period=10s\njmx.max-entries=86400\n```\n\n----------------------------------------\n\nTITLE: Using CHAR Literal with Escaped Single Quote in SQL\nDESCRIPTION: Example of using a CHAR literal with an escaped single quote in SQL. This demonstrates how to include single quotes within CHAR values.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/language/types.rst.txt#2025-04-10_snippet_5\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT CHAR 'All right, Mr. DeMille, I''m ready for my close-up.'\n```\n\n----------------------------------------\n\nTITLE: Using ST_IsClosed in Presto\nDESCRIPTION: Returns true if the linestring's start and end points are coincident. This function checks if a linestring forms a closed loop.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/geospatial.rst#2025-04-10_snippet_12\n\nLANGUAGE: sql\nCODE:\n```\nST_IsClosed(Geometry) -> boolean\n```\n\n----------------------------------------\n\nTITLE: Enabling Metadata Query Optimization in Presto\nDESCRIPTION: Optimizes certain aggregations using stored metadata values. Can significantly speed up some queries but may produce incorrect results with empty partitions.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/admin/properties.rst.txt#2025-04-10_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\noptimizer.optimize-metadata-queries:\n  Type: boolean\n  Default value: false\n```\n\n----------------------------------------\n\nTITLE: Generating Random Shared Secret for JWT Authentication in Presto\nDESCRIPTION: Linux command to generate a secure random key for use as a JWT shared secret in Presto internal authentication.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/security/internal-communication.rst.txt#2025-04-10_snippet_9\n\nLANGUAGE: none\nCODE:\n```\nopenssl rand 512 | base64\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Role in PrestoDB SQL\nDESCRIPTION: This example demonstrates creating a simple role named 'admin' without specifying a role admin.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/sql/create-role.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCREATE ROLE admin;\n```\n\n----------------------------------------\n\nTITLE: Generating Random Shared Secret for JWT Authentication in Presto\nDESCRIPTION: Linux command to generate a secure random key for use as a JWT shared secret in Presto internal authentication.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/security/internal-communication.rst.txt#2025-04-10_snippet_9\n\nLANGUAGE: none\nCODE:\n```\nopenssl rand 512 | base64\n```\n\n----------------------------------------\n\nTITLE: Referencing String Manipulation Functions in Presto SQL\nDESCRIPTION: The CHAR functions trim, rtrim, and substr were fixed to properly handle cases where the return value would have trailing spaces under VARCHAR semantics.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.183.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\ntrim\n```\n\nLANGUAGE: SQL\nCODE:\n```\nrtrim\n```\n\nLANGUAGE: SQL\nCODE:\n```\nsubstr\n```\n\n----------------------------------------\n\nTITLE: Enabling Cluster Resource Manager in Presto SQL\nDESCRIPTION: Enables the new cluster resource manager for memory tracking and deadlock prevention. This feature is controlled by a configuration flag and allows setting memory limits for queries.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.103.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nexperimental.cluster-memory-manager-enabled = true\nquery.max-memory = <value>\nquery.max-memory-per-node = <value>\nresources.reserved-system-memory = <value>\n```\n\n----------------------------------------\n\nTITLE: Querying with IS NULL Predicate on Bucketed Columns in SQL\nDESCRIPTION: There is a bug in this release that causes incorrect results when using the IS NULL predicate on bucketed columns. This affects SQL queries executed in Presto 0.231.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.231.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT * FROM table WHERE bucketed_column IS NULL;\n```\n\n----------------------------------------\n\nTITLE: KHyperLogLog Configuration Properties\nDESCRIPTION: Configuration properties to limit the number of groups for KHyperLogLog aggregation functions, including a limit on the maximum number of groups and a feature toggle.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.286.rst.txt#2025-04-10_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nlimit-khyperloglog-agg-group-number-enabled\n```\n\nLANGUAGE: sql\nCODE:\n```\nkhyperloglog-agg-group-limit\n```\n\nLANGUAGE: sql\nCODE:\n```\nkhyperloglog_agg\n```\n\n----------------------------------------\n\nTITLE: Viewing Accumulo Tables After Creation\nDESCRIPTION: Shows the Accumulo tables created after table creation, including the main table and associated index tables.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/accumulo.rst#2025-04-10_snippet_14\n\nLANGUAGE: none\nCODE:\n```\nroot@default> tables\naccumulo.metadata\naccumulo.root\nmyschema.scientists\nmyschema.scientists_idx\nmyschema.scientists_idx_metrics\ntrace\n```\n\n----------------------------------------\n\nTITLE: SQL Type Limitation - VARCHAR Implementation\nDESCRIPTION: In Presto C++, VARCHAR type implementation is limited to unlimited length strings only. The engine does not honor the length specification in varchar[n] declarations.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/presto_cpp/limitations.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nvarchar[n]\n```\n\n----------------------------------------\n\nTITLE: Querying with IS NULL Predicate on Bucketed Columns in SQL\nDESCRIPTION: There is a bug in this release that causes incorrect results when using the IS NULL predicate on bucketed columns. This affects SQL queries executed in Presto 0.231.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.231.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT * FROM table WHERE bucketed_column IS NULL;\n```\n\n----------------------------------------\n\nTITLE: Defining QDigest Type in Presto Documentation\nDESCRIPTION: Documentation for the QDigest (Quantile Digest) type, which captures approximate distribution of data and can be queried for approximate quantile values with tunable accuracy.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/language/types.rst#2025-04-10_snippet_7\n\nLANGUAGE: rst\nCODE:\n```\n``QDigest``\n^^^^^^^^^^^\n```\n\n----------------------------------------\n\nTITLE: Creating a Schema in Memory Connector in Presto\nDESCRIPTION: This SQL command creates a new schema named 'default1' in the Memory connector.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/memory.rst.txt#2025-04-10_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nCREATE SCHEMA memory.default1;\n```\n\n----------------------------------------\n\nTITLE: OpenLDAP User Bind Pattern\nDESCRIPTION: Configuration pattern for OpenLDAP authentication with distinguished name format.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/security/ldap.rst.txt#2025-04-10_snippet_4\n\nLANGUAGE: properties\nCODE:\n```\nldap.user-bind-pattern=uid=${USER},OU=America,DC=corp,DC=example,DC=com\n```\n\n----------------------------------------\n\nTITLE: Creating a Table with Custom Serializer Class in Presto SQL\nDESCRIPTION: This SQL snippet shows how to create a table using a custom serializer class. It defines a 'custom_scientists' table with the same structure as previous examples but specifies a custom Java class as the serializer.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/accumulo.rst.txt#2025-04-10_snippet_27\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE myschema.custom_scientists (\n  recordkey VARCHAR,\n  name VARCHAR,\n  age BIGINT,\n  birthday DATE\n)\nWITH (\n  column_mapping = 'name:metadata:name,age:metadata:age,birthday:metadata:date',\n  serializer = 'my.serializer.package.MySerializer'\n);\n```\n\n----------------------------------------\n\nTITLE: Using bitwise_xor_agg Function in Presto SQL\nDESCRIPTION: The bitwise_xor_agg aggregation function performs a bitwise XOR operation across all input values. This is useful for parity calculations or checksum verification across a set of values.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.284.rst#2025-04-10_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nbitwise_xor_agg(value)\n```\n\n----------------------------------------\n\nTITLE: Configuring Maximum Splits Per Node in Presto\nDESCRIPTION: Sets the target number of splits that can run for each worker node. Higher values can improve query latency but may waste memory if set too high.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/admin/properties.rst.txt#2025-04-10_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\nnode-scheduler.max-splits-per-node:\n  Type: integer\n  Default value: 100\n```\n\n----------------------------------------\n\nTITLE: COMMIT Command Examples in Presto SQL\nDESCRIPTION: Demonstrates the usage of the COMMIT command in Presto SQL, showing both the basic form and the alternative form with the WORK keyword.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/commit.rst#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCOMMIT;\nCOMMIT WORK;\n```\n\n----------------------------------------\n\nTITLE: Disabling HTTP Endpoint in Presto Config\nDESCRIPTION: Configuration setting to disable the HTTP endpoint for internal communication, forcing all traffic to use HTTPS instead.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/security/internal-communication.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: none\nCODE:\n```\nhttp-server.http.enabled=false\n```\n\n----------------------------------------\n\nTITLE: SQL FETCH FIRST Example\nDESCRIPTION: Demonstrates the new ANSI SQL compliant syntax for limiting result rows using FETCH FIRST N ROWS ONLY as an alternative to LIMIT.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.280.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nselect * from table_name FETCH FIRST 3 ROWS ONLY\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM table_name LIMIT 3\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Glue Catalog for Iceberg Connector\nDESCRIPTION: Configuration properties for connecting an Iceberg connector to an AWS Glue catalog. This sets up the connector name, metastore type, and catalog type.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/iceberg.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\nconnector.name=iceberg\nhive.metastore=glue\niceberg.catalog.type=hive\n```\n\n----------------------------------------\n\nTITLE: Preparing a Simple SELECT Query in Presto SQL\nDESCRIPTION: Demonstrates how to prepare a simple SELECT query using the PREPARE statement. This example saves a query to select all columns from the 'nation' table.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/sql/prepare.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nPREPARE my_select1 FROM\nSELECT * FROM nation;\n```\n\n----------------------------------------\n\nTITLE: Example Presto JDBC Connection URL\nDESCRIPTION: A specific example of a Presto JDBC URL connecting to a Presto instance running on example.net with port 8080, using the Hive catalog and sales schema.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/installation/jdbc.rst#2025-04-10_snippet_2\n\nLANGUAGE: none\nCODE:\n```\njdbc:presto://example.net:8080/hive/sales\n```\n\n----------------------------------------\n\nTITLE: Fixing Negative Interval Literal Parsing in SQL\nDESCRIPTION: Example demonstrating how negative interval literals were incorrectly parsed in previous versions of Presto. This shows how INTERVAL '-2-3' YEAR TO MONTH was interpreted as -21 months instead of -27 months.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.144.6.rst#2025-04-10_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nINTERVAL '-2-3' YEAR TO MONTH\n```\n\n----------------------------------------\n\nTITLE: CSV Decoder Type Mapping Table\nDESCRIPTION: Mapping table showing how CSV field values are decoded into different Presto data types using Java parsing methods.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/kafka.rst#2025-04-10_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n+-------------------------------------+--------------------------------------------------------------------------------+\n| Presto data type                    | Decoding rules                                                                 |\n+=====================================+================================================================================+\n| | ``BIGINT``                        | Decoded using Java ``Long.parseLong()``                                        |\n| | ``INTEGER``                       |                                                                                |\n| | ``SMALLINT``                      |                                                                                |\n| | ``TINYINT``                       |                                                                                |\n+-------------------------------------+--------------------------------------------------------------------------------+\n| ``DOUBLE``                          | Decoded using Java ``Double.parseDouble()``                                    |\n+-------------------------------------+--------------------------------------------------------------------------------+\n| ``BOOLEAN``                         | \"true\" character sequence maps to ``true``;                                    |\n|                                     | Other character sequences map to ``false``                                     |\n+-------------------------------------+--------------------------------------------------------------------------------+\n| ``VARCHAR`` / ``VARCHAR(x)``        | Used as is                                                                     |\n+-------------------------------------+--------------------------------------------------------------------------------+\n```\n\n----------------------------------------\n\nTITLE: Dropping a Table with IF EXISTS Clause in Presto SQL\nDESCRIPTION: Shows how to drop a table named 'orders_by_date' using the DROP TABLE command with the IF EXISTS clause to suppress errors if the table doesn't exist.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/sql/drop-table.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nDROP TABLE IF EXISTS orders_by_date\n```\n\n----------------------------------------\n\nTITLE: Creating Function with Full Options\nDESCRIPTION: Example of creating a tangent function with all optional parameters including description and explicit routine characteristics.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/sql/create-function.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nCREATE OR REPLACE FUNCTION example.default.tan(x double)\nRETURNS double\nCOMMENT 'tangent trigonometric function'\nLANGUAGE SQL\nDETERMINISTIC\nRETURNS NULL ON NULL INPUT\nRETURN sin(x) / cos(x)\n```\n\n----------------------------------------\n\nTITLE: Extracting Hour in Presto SQL\nDESCRIPTION: The 'hour' function returns the hour of the day from a given time or timestamp value. The result ranges from 0 to 23. The function returns a bigint value.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/datetime.rst.txt#2025-04-10_snippet_6\n\nLANGUAGE: SQL\nCODE:\n```\nhour(x) -> bigint\n```\n\n----------------------------------------\n\nTITLE: Rollback Iceberg Table to Snapshot\nDESCRIPTION: Procedure to rollback an Iceberg table to a specific snapshot ID using the system.rollback_to_snapshot procedure.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/iceberg.rst.txt#2025-04-10_snippet_26\n\nLANGUAGE: sql\nCODE:\n```\nCALL iceberg.system.rollback_to_snapshot('schema_name', 'table_name', snapshot_id);\n```\n\n----------------------------------------\n\nTITLE: Extracting Geometry Element by Index in Presto SQL\nDESCRIPTION: Returns the geometry element at a given index from a collection of geometries. Indices start at 1.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/geospatial.rst.txt#2025-04-10_snippet_7\n\nLANGUAGE: SQL\nCODE:\n```\nST_GeometryN(Geometry, index) -> Geometry\n```\n\n----------------------------------------\n\nTITLE: Example: Showing all CREATE FUNCTION statements for array_sum\nDESCRIPTION: Demonstrates how to show all SQL statements that create the example.default.array_sum functions for different parameter types.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/show-create-function.rst#2025-04-10_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nSHOW CREATE FUNCTION example.default.array_sum\n```\n\n----------------------------------------\n\nTITLE: Dropping a Function Without Parameter Types in Presto SQL\nDESCRIPTION: Example of dropping a function without specifying parameter types. This approach works when only one function exists with the given name.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/sql/drop-function.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nDROP FUNCTION example.default.tan\n```\n\n----------------------------------------\n\nTITLE: Querying a Delta Lake Table Snapshot by Timestamp\nDESCRIPTION: SQL query to access the Delta Lake table snapshot as of a specific timestamp by appending the timestamp to the table name.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/deltalake.rst.txt#2025-04-10_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM sales.apac.\"sales_data@t2021-11-18 09:45\" LIMIT 200;\n```\n\n----------------------------------------\n\nTITLE: MySQL JDBC Connection URL with Timezone\nDESCRIPTION: Example MySQL connection URL with serverTimezone parameter to handle UTC time values correctly.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/mysql.rst#2025-04-10_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nconnection-url=jdbc:mysql://example.net:3306?serverTimezone=UTC\n```\n\n----------------------------------------\n\nTITLE: Starting Hive Metastore Server\nDESCRIPTION: This command starts the Hive Metastore server in the background, listening on port 9083 by default.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/installation/deployment.rst.txt#2025-04-10_snippet_14\n\nLANGUAGE: console\nCODE:\n```\nhcatalog/sbin/hcat_server.sh start\n```\n\n----------------------------------------\n\nTITLE: SQL ALTER TABLE Comment Syntax\nDESCRIPTION: Shows the ability to add comments when altering table columns using ALTER TABLE statement.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.200.rst#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE\n```\n\n----------------------------------------\n\nTITLE: DEALLOCATE PREPARE Example Usage\nDESCRIPTION: Demonstrates how to deallocate a prepared statement named 'my_query' from the current session.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/deallocate-prepare.rst#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nDEALLOCATE PREPARE my_query;\n```\n\n----------------------------------------\n\nTITLE: EXPLAIN Command Syntax in Presto SQL\nDESCRIPTION: The basic syntax for the EXPLAIN command in Presto SQL, showing the statement structure and available options.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/explain.rst#2025-04-10_snippet_0\n\nLANGUAGE: none\nCODE:\n```\nEXPLAIN [ ( option [, ...] ) ] statement\n```\n\n----------------------------------------\n\nTITLE: Merging an Array of KHyperLogLog Structures\nDESCRIPTION: Returns the KHyperLogLog of the union of an array of KHyperLogLog structures.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/khyperloglog.rst#2025-04-10_snippet_8\n\nLANGUAGE: SQL\nCODE:\n```\nmerge_khll(array(khll))\n```\n\n----------------------------------------\n\nTITLE: Enabling Spill Compression in Presto\nDESCRIPTION: Controls whether data compression is enabled for pages spilled to disk. Compression reduces disk space usage but adds CPU overhead for compression/decompression operations.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/admin/properties.rst#2025-04-10_snippet_18\n\nLANGUAGE: properties\nCODE:\n```\nexperimental.spill-compression-enabled\n```\n\n----------------------------------------\n\nTITLE: Enabling Hive Data Cache in Presto SQL\nDESCRIPTION: Allows turning on and off data cache per query for Hive connector using a session property.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.262.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nSET SESSION hive.cache_enabled = true;\n```\n\n----------------------------------------\n\nTITLE: Configuring Memory Limits in Presto\nDESCRIPTION: Configuration parameters for controlling memory usage limits in Presto, including total distributed query memory, per-node query memory, and system memory reservation.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.103.rst#2025-04-10_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\nquery.max-memory\nquery.max-memory-per-node\nresources.reserved-system-memory\n```\n\n----------------------------------------\n\nTITLE: Show Roles Command Syntax\nDESCRIPTION: The syntax for the SHOW ROLES command, which can display either all roles or currently enabled roles from a specified or current catalog.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/sql/show-roles.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: none\nCODE:\n```\nSHOW [CURRENT] ROLES [ FROM catalog ]\n```\n\n----------------------------------------\n\nTITLE: Hive Sorted Writing Configuration\nDESCRIPTION: Configuration property to enable or disable writing to sorted tables in Hive.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.202.rst.txt#2025-04-10_snippet_3\n\nLANGUAGE: properties\nCODE:\n```\nhive.sorted-writing\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Pending Splits Per Task in Presto\nDESCRIPTION: Defines the number of outstanding splits that can be queued for each worker node for a single query stage. Prevents starvation and deadlocks.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/admin/properties.rst.txt#2025-04-10_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\nnode-scheduler.max-pending-splits-per-task:\n  Type: integer\n  Default value: 10\n```\n\n----------------------------------------\n\nTITLE: SQL Query - Varchar Cast Example\nDESCRIPTION: Example demonstrating how casting a large bigint to a bounded varchar smaller than needed will now fail with an error message.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.271.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nselect cast(1234500000000000000 as varchar(3));\n```\n\n----------------------------------------\n\nTITLE: Calculating Reidentification Potential\nDESCRIPTION: Computes the ratio of x values that have a uniqueness under the given threshold, representing reidentification risk.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/khyperloglog.rst#2025-04-10_snippet_6\n\nLANGUAGE: SQL\nCODE:\n```\nreidentification_potential(khll, threshold)\n```\n\n----------------------------------------\n\nTITLE: SQL Function Update - New Array and String Functions\nDESCRIPTION: New SQL functions added including array_distinct for array deduplication, split for string splitting, degrees/radians for angle conversion, and base conversion functions.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.100.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\narray_distinct(array)\nsplit(string)\ndegrees(number)\nradians(number)\nto_base(number, radix)\nfrom_base(string, radix)\n```\n\n----------------------------------------\n\nTITLE: Begin Delete Operation Method Signature\nDESCRIPTION: Method signature for initiating a delete operation and returning a table handle with operation-specific information.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/develop/delete-and-update.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nConnectorTableHandle beginDelete(\n     ConnectorSession session,\n     ConnectorTableHandle tableHandle)\n```\n\n----------------------------------------\n\nTITLE: Dropping a Table in Memory Connector in Presto\nDESCRIPTION: This SQL command drops a table from the Memory connector.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/memory.rst.txt#2025-04-10_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nDROP TABLE memory.default.nation;\n```\n\n----------------------------------------\n\nTITLE: Configuring Single Distinct Optimization in Presto\nDESCRIPTION: Enables optimization to replace multiple DISTINCT clauses with a single GROUP BY clause, which can be faster to execute.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/admin/properties.rst.txt#2025-04-10_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\noptimizer.optimize-single-distinct:\n  Type: boolean\n  Default value: true\n```\n\n----------------------------------------\n\nTITLE: Using find_first_index Function in SQL\nDESCRIPTION: The new find_first_index function returns the index of the first element that satisfies a given condition in an array.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.280.rst#2025-04-10_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nfind_first_index(array, condition)\n```\n\n----------------------------------------\n\nTITLE: Configuring Memory Limits in Presto\nDESCRIPTION: Properties for controlling memory usage limits per node and across the cluster for both user and system memory allocations.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/admin/properties.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\nquery.max-memory-per-node=JVM max memory * 0.1\nquery.max-total-memory-per-node=query.max-memory-per-node * 2\nquery.max-memory=20GB\nquery.max-total-memory=query.max-memory * 2\nmemory.heap-headroom-per-node=JVM max memory * 0.3\n```\n\n----------------------------------------\n\nTITLE: Setting Table Properties in Presto SQL\nDESCRIPTION: Example of setting table properties using ALTER TABLE command in Presto SQL.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/alter-table.rst#2025-04-10_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE users SET PROPERTIES (x='y');\n```\n\n----------------------------------------\n\nTITLE: Creating a Table with Constant Row Count in Black Hole Connector\nDESCRIPTION: This SQL command creates a table in the Black Hole connector with a specified number of rows using table properties.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/blackhole.rst.txt#2025-04-10_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE blackhole.test.nation (\n  nationkey bigint,\n  name varchar\n)\nWITH (\n  split_count = 500,\n  pages_per_split = 1000,\n  rows_per_page = 2000\n);\n```\n\n----------------------------------------\n\nTITLE: Reservoir Sample Aggregation Function\nDESCRIPTION: A new aggregation function for generating fixed-size samples from datasets.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.286.rst.txt#2025-04-10_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nreservoir_sample\n```\n\n----------------------------------------\n\nTITLE: Configuring Hive Metastore Catalog for Iceberg Connector\nDESCRIPTION: Configuration properties for connecting an Iceberg connector to a Hive Metastore catalog. This defines the connector name, metastore URI, and catalog type.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/iceberg.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nconnector.name=iceberg\nhive.metastore.uri=hostname:port\niceberg.catalog.type=hive\n```\n\n----------------------------------------\n\nTITLE: Single-Column VALUES Example in Presto SQL\nDESCRIPTION: Creates a simple one-column table with three rows using the VALUES clause.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/sql/values.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nVALUES 1, 2, 3\n```\n\n----------------------------------------\n\nTITLE: Using UNION with Implicit Type Coercion in Presto SQL\nDESCRIPTION: Reference to the new support for implicit type coercions when using UNION operations.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.111.rst#2025-04-10_snippet_5\n\nLANGUAGE: SQL\nCODE:\n```\nUNION\n```\n\n----------------------------------------\n\nTITLE: Configuring partial results functionality in Presto 0.252\nDESCRIPTION: Session properties to enable and configure the partial results feature, which allows queries to return results before completion based on time and completion thresholds.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.252.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\npartial_results_enabled = true\npartial_results_max_execution_time_multiplier = <value>\npartial_results_completion_ratio_threshold = <value>\n```\n\n----------------------------------------\n\nTITLE: EXPLAIN Command Options in Presto SQL\nDESCRIPTION: Available options for the EXPLAIN command, including FORMAT (TEXT, GRAPHVIZ, JSON) and TYPE (LOGICAL, DISTRIBUTED, VALIDATE, IO).\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/explain.rst#2025-04-10_snippet_1\n\nLANGUAGE: none\nCODE:\n```\nFORMAT { TEXT | GRAPHVIZ | JSON }\nTYPE { LOGICAL | DISTRIBUTED | VALIDATE | IO }\n```\n\n----------------------------------------\n\nTITLE: Distance Calculation Example\nDESCRIPTION: Comparison of distance calculations between two points using both Geometry (euclidean) and SphericalGeography (geodetic) types.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/geospatial.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nST_Distance(ST_Point(-71.0882, 42.3607), ST_Point(-74.1197, 40.6976))\nST_Distance(to_spherical_geography(ST_Point(-71.0882, 42.3607)), to_spherical_geography(ST_Point(-74.1197, 40.6976)))\n```\n\n----------------------------------------\n\nTITLE: Granting Privileges to the PUBLIC Role in Presto SQL\nDESCRIPTION: Example showing how to grant SELECT privilege on the 'orders' table to the PUBLIC role, effectively granting this privilege to all users in the system.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/sql/grant.rst.txt#2025-04-10_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nGRANT SELECT ON orders TO ROLE PUBLIC;\n```\n\n----------------------------------------\n\nTITLE: Using ST_EnvelopeAsPts Function in Presto SQL\nDESCRIPTION: The new ST_EnvelopeAsPts function returns the envelope of a geometry as points, useful for spatial analysis.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.204.rst#2025-04-10_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT ST_EnvelopeAsPts(geometry_column) FROM spatial_table;\n```\n\n----------------------------------------\n\nTITLE: Getting Geometry Type in Presto SQL\nDESCRIPTION: Returns the type of the geometry as a string.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/geospatial.rst.txt#2025-04-10_snippet_9\n\nLANGUAGE: SQL\nCODE:\n```\nST_GeometryType(Geometry) -> varchar\n```\n\n----------------------------------------\n\nTITLE: Selecting from an Empty Truncated Table\nDESCRIPTION: Example showing the result of selecting from a table after it has been truncated, demonstrating the table structure remains but contains zero rows.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/iceberg.rst.txt#2025-04-10_snippet_49\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM nation;\n```\n\n----------------------------------------\n\nTITLE: Extracting Geometries from Collection in Presto SQL\nDESCRIPTION: Returns an array of geometries from a geometry collection.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/geospatial.rst.txt#2025-04-10_snippet_18\n\nLANGUAGE: SQL\nCODE:\n```\nST_Geometries(Geometry) -> array(Geometry)\n```\n\n----------------------------------------\n\nTITLE: Creating a Table with IF NOT EXISTS in Presto SQL\nDESCRIPTION: Example of creating a new table only if it doesn't already exist using the IF NOT EXISTS clause. This prevents errors if the table already exists in the database.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/sql/create-table-as.rst.txt#2025-04-10_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE IF NOT EXISTS orders_by_date AS\nSELECT orderdate, sum(totalprice) AS price\nFROM orders\nGROUP BY orderdate\n```\n\n----------------------------------------\n\nTITLE: Role-Identity Mapping Configuration\nDESCRIPTION: Example of role to identity regex mapping configuration for the Configuration-based Authorizer.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/security/authorization.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\nuser=.*\ninternal=coordinator\nadmin=su.*\n```\n\n----------------------------------------\n\nTITLE: Inserting Data into Indexed Table\nDESCRIPTION: Example of inserting sample data into the scientists table with values for all indexed columns.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/accumulo.rst#2025-04-10_snippet_15\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO myschema.scientists VALUES\n('row1', 'Grace Hopper', 109, DATE '1906-12-09'),\n('row2', 'Alan Turing', 103, DATE '1912-06-23');\n```\n\n----------------------------------------\n\nTITLE: Dropping a View with IF EXISTS Clause in Presto SQL\nDESCRIPTION: Shows how to drop a view named 'orders_by_date' if it exists, using the IF EXISTS clause to prevent errors if the view is not present.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/sql/drop-view.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nDROP VIEW IF EXISTS orders_by_date\n```\n\n----------------------------------------\n\nTITLE: Configuring Heap Dump on Memory Limit Exceeded in PrestoDB\nDESCRIPTION: Session properties to enable heap dump creation when a query exceeds local memory limits. The feature is controlled by 'heap_dump_on_exceeded_memory_limit_enabled' and the output directory is specified by 'exceeded_memory_limit_heap_dump_file_directory'.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.263.rst#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nheap_dump_on_exceeded_memory_limit_enabled\n```\n\nLANGUAGE: sql\nCODE:\n```\nexceeded_memory_limit_heap_dump_file_directory\n```\n\n----------------------------------------\n\nTITLE: Presto Coordinator HTTPS and Authentication Configuration\nDESCRIPTION: Required properties in coordinator's config.properties file to enable HTTPS support and password authentication\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/security/ldap.rst#2025-04-10_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\nhttp-server.authentication.type=PASSWORD\n\nhttp-server.https.enabled=true\nhttp-server.https.port=8443\n\nhttp-server.https.keystore.path=/etc/presto_keystore.jks\nhttp-server.https.keystore.key=keystore_password\n```\n\n----------------------------------------\n\nTITLE: Listing Available TPCDS Schemas\nDESCRIPTION: Output showing the available schemas in the TPCDS connector, including various scale factors from tiny (0.01) to sf100000 (100000GB).\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/tpcds.rst#2025-04-10_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n       Schema\n--------------------\n information_schema\n sf1\n sf10\n sf100\n sf1000\n sf10000\n sf100000\n sf300\n sf3000\n sf30000\n tiny\n(11 rows)\n```\n\n----------------------------------------\n\nTITLE: SHOW STATS Command Syntax in Presto SQL\nDESCRIPTION: The syntax for the SHOW STATS command in Presto SQL, showing the three main variations: getting statistics for a table, for a complete select query, or for specific columns from a table with an optional WHERE condition.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/show-stats.rst#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSHOW STATS FOR table\nSHOW STATS FOR ( SELECT * FROM table [ WHERE condition ] )\nSHOW STATS FOR ( SELECT col1, col2,... colN FROM table [ WHERE condition ] )\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS S3 Security Mappings in JSON\nDESCRIPTION: Example JSON configuration file for S3 security mappings. It demonstrates how to set up user-specific access keys, IAM roles, and default roles for S3 access in Presto.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/hive.rst#2025-04-10_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mappings\": [\n    {\n      \"user\": \"admin\",\n      \"accessKey\": \"AKIAxxxaccess\",\n      \"secretKey\": \"iXbXxxxsecret\"\n    },\n    {\n      \"user\": \"analyst|scientist\",\n      \"iamRole\": \"arn:aws:iam::123456789101:role/analyst_and_scientist_role\"\n    },\n    {\n      \"iamRole\": \"arn:aws:iam::123456789101:role/default\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Compression Codec for Hive Connector\nDESCRIPTION: Session property for the Hive connector to set the compression codec when writing files. Supports NONE, SNAPPY, and GZIP as possible values.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.220.rst.txt#2025-04-10_snippet_5\n\nLANGUAGE: properties\nCODE:\n```\ncompression_codec\n```\n\n----------------------------------------\n\nTITLE: Configuration Property for Aggregation-IF-to-Filter Rewrite\nDESCRIPTION: Configuration property for controlling the optimization that rewrites aggregations with IF conditions to use filters. This property has been disabled by default in this release to prevent certain query failures.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.261.rst.txt#2025-04-10_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\noptimizer.aggregation-if-to-filter-rewrite-enabled\n```\n\n----------------------------------------\n\nTITLE: Configuring File and Stripe Footer Cache for Presto Iceberg\nDESCRIPTION: This configuration snippet demonstrates how to set up file and stripe footer caching for ORC and Parquet files in the Presto Iceberg connector. It includes settings for cache sizes, TTL, and enabling various caching features.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/iceberg.rst#2025-04-10_snippet_9\n\nLANGUAGE: properties\nCODE:\n```\n# scheduling\nhive.node-selection-strategy=SOFT_AFFINITY\n\n# orc\niceberg.orc.file-tail-cache-enabled=true\niceberg.orc.file-tail-cache-size=100MB\niceberg.orc.file-tail-cache-ttl-since-last-access=6h\niceberg.orc.stripe-metadata-cache-enabled=true\niceberg.orc.stripe-footer-cache-size=100MB\niceberg.orc.stripe-footer-cache-ttl-since-last-access=6h\niceberg.orc.stripe-stream-cache-size=300MB\niceberg.orc.stripe-stream-cache-ttl-since-last-access=6h\n\n# parquet\niceberg.parquet.metadata-cache-enabled=true\niceberg.parquet.metadata-cache-size=100MB\n```\n\n----------------------------------------\n\nTITLE: Computing Set Intersection Cardinality\nDESCRIPTION: Returns the set intersection cardinality of the data represented by the MinHash structures of two KHyperLogLog sketches.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/khyperloglog.rst#2025-04-10_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nintersection_cardinality(khll1, khll2)\n```\n\n----------------------------------------\n\nTITLE: Configuring Task Properties in Presto\nDESCRIPTION: Properties for controlling task execution and concurrency in Presto.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/admin/properties.rst.txt#2025-04-10_snippet_6\n\nLANGUAGE: properties\nCODE:\n```\ntask.concurrency=16\n```\n\n----------------------------------------\n\nTITLE: Unregistering Iceberg Table SQL\nDESCRIPTION: Example of unregistering an Iceberg table from the catalog using the unregister_table procedure.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/iceberg.rst#2025-04-10_snippet_24\n\nLANGUAGE: sql\nCODE:\n```\nCALL iceberg.system.unregister_table('schema_name', 'table_name')\n\nCALL iceberg.system.unregister_table(table_name => 'table_name', schema => 'schema_name')\n```\n\n----------------------------------------\n\nTITLE: SQL Show Tables Command\nDESCRIPTION: Command for displaying tables in a catalog\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.189.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSHOW TABLES\n```\n\n----------------------------------------\n\nTITLE: Creating Kerberos Principals and Keytab for Presto\nDESCRIPTION: Commands for creating Kerberos principals and generating keytab file for Presto coordinator authentication using kadmin tool.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/security/server.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkadmin\n> addprinc -randkey presto@EXAMPLE.COM\n> addprinc -randkey presto/presto-coordinator.example.com@EXAMPLE.COM\n> ktadd -k /etc/presto/presto.keytab presto@EXAMPLE.COM\n> ktadd -k /etc/presto/presto.keytab presto/presto-coordinator.example.com@EXAMPLE.COM\n```\n\n----------------------------------------\n\nTITLE: SQL Function Extract Syntax Fix\nDESCRIPTION: Fix for handling syntax errors when parsing the EXTRACT function.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.147.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nEXTRACT\n```\n\n----------------------------------------\n\nTITLE: Configuring Query Maximum Stage Count in Presto\nDESCRIPTION: Sets the maximum number of stages allowed in a query. The default value is 100, which can be modified using the query.max-stage-count configuration property or the query_max_stage_count session property.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.208.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSET SESSION query_max_stage_count = 150;\n```\n\n----------------------------------------\n\nTITLE: Configuring Query Maximum Stage Count in Presto\nDESCRIPTION: Sets the maximum number of stages allowed in a query. The default value is 100, which can be modified using the query.max-stage-count configuration property or the query_max_stage_count session property.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.208.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSET SESSION query_max_stage_count = 150;\n```\n\n----------------------------------------\n\nTITLE: Querying SingleStore Schemas in Presto\nDESCRIPTION: This SQL query demonstrates how to list available SingleStore databases (schemas) using the SHOW SCHEMAS command in Presto.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/singlestore.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSHOW SCHEMAS FROM singlestore;\n```\n\n----------------------------------------\n\nTITLE: Setting Network Topology for Node Scheduling in Presto\nDESCRIPTION: Configures the network topology used when scheduling splits. 'flat' tries to schedule splits on the host where data is located.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/admin/properties.rst.txt#2025-04-10_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\nnode-scheduler.network-topology:\n  Type: string\n  Allowed values: legacy, flat\n  Default value: legacy\n```\n\n----------------------------------------\n\nTITLE: Querying with split_to_map Function in SQL\nDESCRIPTION: Fixes a query execution failure when using the split_to_map function with array indexing. This addresses a specific issue in SQL query processing.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.184.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nsplit_to_map(...)[...]\n```\n\n----------------------------------------\n\nTITLE: Interpolating Point on Linestring in Presto SQL\nDESCRIPTION: Returns the Point on a LineString at a fractional distance.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/geospatial.rst.txt#2025-04-10_snippet_24\n\nLANGUAGE: SQL\nCODE:\n```\nline_interpolate_point(LineString, double) -> Geometry\n```\n\n----------------------------------------\n\nTITLE: Querying with Cast to Bounded Varchar in Presto CLI\nDESCRIPTION: Example of how casting a bigint to a bounded varchar smaller than needed will now fail in Presto 0.271. The query demonstrates attempting to cast a large number to varchar(3), which results in an error message.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.271.rst#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nselect cast(1234500000000000000 as varchar(3));\n```\n\n----------------------------------------\n\nTITLE: Setting Memory Revoking Threshold in Presto\nDESCRIPTION: Configures the percentage threshold at which memory revocation is triggered. When the memory pool is filled above this percentage, Presto will begin revoking memory from tasks according to the configured spilling strategy.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/admin/properties.rst#2025-04-10_snippet_7\n\nLANGUAGE: properties\nCODE:\n```\nexperimental.memory-revoking-threshold\n```\n\n----------------------------------------\n\nTITLE: Function References\nDESCRIPTION: New functions added including ntile, map, min_by, and max_by for various data operations\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.86.rst.txt#2025-04-10_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\n!ntile\n!map\n!min_by\n!max_by\n```\n\n----------------------------------------\n\nTITLE: SQL LIMIT Query Configuration\nDESCRIPTION: Example of LIMIT query execution with optimizer.force-single-node-output configuration parameter\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.189.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nLIMIT\n```\n\n----------------------------------------\n\nTITLE: Adding array_sort_desc Function in SQL\nDESCRIPTION: Introduces a new SQL function array_sort_desc to sort an array in descending order.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.279.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\narray_sort_desc(array)\n```\n\n----------------------------------------\n\nTITLE: Basic UPDATE Statement Syntax in Presto SQL\nDESCRIPTION: Demonstrates the fundamental syntax structure for the UPDATE statement in Presto SQL, showing the basic components including table name, SET clause, and optional WHERE condition.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/sql/update.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: none\nCODE:\n```\nUPDATE table_name SET [ column = expression [, ... ] ] [ WHERE condition ]\n```\n\n----------------------------------------\n\nTITLE: Configuring File-Based Resource Manager in PrestoDB\nDESCRIPTION: Code snippet showing how to set the resource groups configuration manager to file-based in the properties file.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/admin/resource-groups.rst#2025-04-10_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nresource-groups.configuration-manager=file\n```\n\n----------------------------------------\n\nTITLE: Creating a Kudu Table with Two Hash Partitioning Groups\nDESCRIPTION: Example of creating a Kudu table with two hash partitioning groups using both first and second level hash partition properties.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/kudu.rst#2025-04-10_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE mytable (\n  col1 varchar WITH (primary_key=true),\n  col2 varchar WITH (primary_key=true),\n  ...\n) WITH (\n  partition_by_hash_columns = ARRAY['col1'],\n  partition_by_hash_buckets = 2,\n  partition_by_second_hash_columns = ARRAY['col2'],\n  partition_by_second_hash_buckets = 3\n)\n```\n\n----------------------------------------\n\nTITLE: Referencing Presto Configuration Properties and Functions\nDESCRIPTION: Various Presto configuration properties and functions mentioned in the changelog, including size-based split weights for Hudi, memory settings for queries, and JSON functions.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.276.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nhive.copy-on-first-write-configuration\n```\n\nLANGUAGE: text\nCODE:\n```\njson_extract\n```\n\nLANGUAGE: text\nCODE:\n```\njson_extract_scalar\n```\n\nLANGUAGE: text\nCODE:\n```\njson_size\n```\n\nLANGUAGE: text\nCODE:\n```\ninline_sql_functions = false\n```\n\nLANGUAGE: text\nCODE:\n```\nquery.max-total-memory-per-node\n```\n\nLANGUAGE: text\nCODE:\n```\nquery.max-memory-per-node\n```\n\nLANGUAGE: text\nCODE:\n```\nhudi.size-based-split-weights-enabled\n```\n\nLANGUAGE: text\nCODE:\n```\nhudi.size_based_split_weights_enabled\n```\n\nLANGUAGE: text\nCODE:\n```\nhudi.standard-split-weight-size\n```\n\nLANGUAGE: text\nCODE:\n```\nhudi.minimum-assigned-split-weight\n```\n\nLANGUAGE: text\nCODE:\n```\npinot.attempt-broker-queries\n```\n\nLANGUAGE: text\nCODE:\n```\ncoalesce\n```\n\nLANGUAGE: text\nCODE:\n```\nspark.retry-on-out-of-memory-with-increased-memory-settings-enabled\n```\n\nLANGUAGE: text\nCODE:\n```\nspark_retry_on_out_of_memory_with_increased_memory_settings_enabled\n```\n\nLANGUAGE: text\nCODE:\n```\nspark.retry-presto-session-properties\n```\n\nLANGUAGE: text\nCODE:\n```\nspark.retry-spark-configs\n```\n\nLANGUAGE: text\nCODE:\n```\nout_of_memory_retry_presto_session_properties\n```\n\nLANGUAGE: text\nCODE:\n```\nout_of_memory_retry_spark_configs\n```\n\nLANGUAGE: text\nCODE:\n```\nspark.resource-allocation-strategy-enabled\n```\n\nLANGUAGE: text\nCODE:\n```\nspark_resource_allocation_strategy_enabled\n```\n\nLANGUAGE: text\nCODE:\n```\nspark.average-input-datasize-per-executor\n```\n\nLANGUAGE: text\nCODE:\n```\nspark.max-executor-count\n```\n\nLANGUAGE: text\nCODE:\n```\nspark.min-executor-count\n```\n\nLANGUAGE: text\nCODE:\n```\nspark.average-input-datasize-per-partition\n```\n\nLANGUAGE: text\nCODE:\n```\nspark.max-hash-partition-count\n```\n\nLANGUAGE: text\nCODE:\n```\nspark.min-hash-partition-count\n```\n\n----------------------------------------\n\nTITLE: Configuring Writer Scaling in Presto SQL\nDESCRIPTION: Enables dynamic scaling of writer tasks based on data size. Controlled by 'scale-writers' config property or 'scale_writers' session property. Minimum size threshold set by 'writer-min-size' or 'writer_min_size'.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.191.rst#2025-04-10_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nSET SESSION scale_writers = true;\nSET SESSION writer_min_size = '100MB';\n```\n\n----------------------------------------\n\nTITLE: Creating an Empty Table with the Same Schema in Presto SQL\nDESCRIPTION: Example of creating a new empty table with the same schema as an existing table using the WITH NO DATA clause. This creates the structure without copying any data.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/sql/create-table-as.rst.txt#2025-04-10_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE empty_nation AS\nSELECT *\nFROM nation\nWITH NO DATA\n```\n\n----------------------------------------\n\nTITLE: Aggregate Window Functions in SQL\nDESCRIPTION: Performance improvement for aggregate window functions. This change enhances the execution speed of queries using window functions for aggregations.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.174.rst#2025-04-10_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT id, name, salary, AVG(salary) OVER (PARTITION BY department) FROM employees\n```\n\n----------------------------------------\n\nTITLE: Calculating Length of Linestring in Presto SQL\nDESCRIPTION: Computes the length of a linestring or multi-linestring using Euclidean measurement or great-circle distance.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/geospatial.rst.txt#2025-04-10_snippet_11\n\nLANGUAGE: SQL\nCODE:\n```\nST_Length(Geometry) -> double\n```\n\nLANGUAGE: SQL\nCODE:\n```\nST_Length(SphericalGeography) -> double\n```\n\n----------------------------------------\n\nTITLE: Listing PostgreSQL Schemas\nDESCRIPTION: Command to show available schemas in PostgreSQL catalog.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/postgresql.rst#2025-04-10_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nSHOW SCHEMAS FROM postgresql;\n```\n\n----------------------------------------\n\nTITLE: Interpolating Point on Linestring in Presto SQL\nDESCRIPTION: Returns the Point on a LineString at a fractional distance.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/geospatial.rst.txt#2025-04-10_snippet_24\n\nLANGUAGE: SQL\nCODE:\n```\nline_interpolate_point(LineString, double) -> Geometry\n```\n\n----------------------------------------\n\nTITLE: Adding Array Top N Function in SQL\nDESCRIPTION: Introduces the array_top_n function to return an array of the top N elements from a given array.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.284.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\narray_top_n(array, N)\n```\n\n----------------------------------------\n\nTITLE: RST Table of Contents Configuration\nDESCRIPTION: RST directive configuring a table of contents tree with maximum depth of 1 level, followed by release version links.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release.rst#2025-04-10_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n    :maxdepth: 1\n```\n\n----------------------------------------\n\nTITLE: Using sketch_theta function in Presto\nDESCRIPTION: Computes a theta sketch from an input dataset. The output can be used as input to other sketch_theta_* functions.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/sketch.rst#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nsketch_theta(x) -> varbinary\n```\n\n----------------------------------------\n\nTITLE: Creating a Kudu Table with Multiple Range Partitions\nDESCRIPTION: Example of creating a Kudu table with hash partitioning and multiple range partitions defined with specific time boundaries.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/kudu.rst#2025-04-10_snippet_11\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE events (\n  serialno varchar WITH (primary_key = true),\n  event_time timestamp WITH (primary_key = true),\n  message varchar\n) WITH (\n  partition_by_hash_columns = ARRAY['serialno'],\n  partition_by_hash_buckets = 4,\n  partition_by_range_columns = ARRAY['event_time'],\n  range_partitions = '[{\"lower\": null, \"upper\": \"2017-01-01T00:00:00\"},\n                       {\"lower\": \"2017-01-01T00:00:00\", \"upper\": \"2017-07-01T00:00:00\"},\n                       {\"lower\": \"2017-07-01T00:00:00\", \"upper\": \"2018-01-01T00:00:00\"}]'\n)\n```\n\n----------------------------------------\n\nTITLE: Getting Top N Keys from Map in SQL\nDESCRIPTION: The map_top_n_keys function returns the top N keys from a map based on descending key order. The number n must be a non-negative integer.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/map.rst#2025-04-10_snippet_12\n\nLANGUAGE: sql\nCODE:\n```\nSELECT map_top_n_keys(map(ARRAY['a', 'b', 'c'], ARRAY[3, 2, 1]), 2) --- ['c', 'b']\n```\n\n----------------------------------------\n\nTITLE: Implementing beginUpdate Method in ConnectorMetadata for Presto\nDESCRIPTION: This method performs orchestration needed to start processing an UPDATE operation. It returns a ConnectorTableHandle with information needed for the update operation.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/develop/delete-and-update.rst#2025-04-10_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nConnectorTableHandle beginUpdate(\n     ConnectorSession session,\n     ConnectorTableHandle tableHandle,\n     List<ColumnHandle> updatedColumns)\n```\n\n----------------------------------------\n\nTITLE: Querying Sheet Metadata in Presto\nDESCRIPTION: SQL query to retrieve metadata information about all sheets in the spreadsheet.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/larksheets.rst#2025-04-10_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM my_ss.\"$sheets\"\n```\n\n----------------------------------------\n\nTITLE: Syntax for REVOKE ROLES command in PrestoDB SQL\nDESCRIPTION: Defines the syntax for the REVOKE ROLES command. It allows revoking roles or admin options from users or roles, with an optional GRANTED BY clause to specify the revoker.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/revoke-roles.rst#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nREVOKE\n[ ADMIN OPTION FOR ]\nrole [, ...]\nFROM ( user | USER user | ROLE role) [, ...]\n[ GRANTED BY ( user | USER user | ROLE role | CURRENT_USER | CURRENT_ROLE ) ]\n```\n\n----------------------------------------\n\nTITLE: Using New Array Remove Function in Presto SQL\nDESCRIPTION: Demonstrates the usage of the newly added array_remove function in Presto SQL. This function allows removing elements from an array.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.103.rst.txt#2025-04-10_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT array_remove(array[1, 2, 3, null, 3], 3);\n```\n\n----------------------------------------\n\nTITLE: Distributed Joins Configuration\nDESCRIPTION: Configuration parameter for enabling distributed joins functionality.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.139.rst#2025-04-10_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\ndistributed-joins-enabled\n```\n\n----------------------------------------\n\nTITLE: SQL Join Condition with Range Functions\nDESCRIPTION: Example of join condition with range predicates over functions, which received performance improvements in this release.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.185.rst#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\na JOIN b ON b.x < f(a.x) AND b.x > g(a.x)\n```\n\n----------------------------------------\n\nTITLE: Iceberg Time Travel Query Syntax\nDESCRIPTION: Examples of time travel syntax for querying historical data in Iceberg tables\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.288.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT * FROM table_name FOR TIMESTAMP AS OF timestamp_expression\\nSELECT * FROM table_name FOR VERSION AS OF version_number\n```\n\n----------------------------------------\n\nTITLE: Configuring Optimizer for Metadata Queries in Presto\nDESCRIPTION: Configuration property and session property to optimize queries containing only min and max on columns that can be evaluated using metadata. Note that enabling this might change query results for empty metadata.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.239.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\noptimizer.optimize-metadata-queries\n```\n\nLANGUAGE: SQL\nCODE:\n```\noptimize_metadata_queries\n```\n\n----------------------------------------\n\nTITLE: Setting Glue Retries Configuration\nDESCRIPTION: Configuration property to set maximum number of retries for Glue client connections in Hive connector.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.254.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\nhive.metastore.glue.max-error-retries=10\n```\n\n----------------------------------------\n\nTITLE: Using from_utf8 Function in Presto\nDESCRIPTION: The from_utf8 function is used to correct invalid UTF-8 data in strings, ensuring proper handling of Unicode characters.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.102.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n:func:`!from_utf8`\n```\n\n----------------------------------------\n\nTITLE: Setting Homebrew Path on Apple Silicon\nDESCRIPTION: Command to configure PATH for x86_64 Homebrew installation\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/installation/deploy-brew.rst#2025-04-10_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nexport PATH=/usr/local/bin:$PATH\n```\n\n----------------------------------------\n\nTITLE: Querying a Hive Table in Presto\nDESCRIPTION: A simple SELECT statement to query all data from a Hive table. This demonstrates the basic syntax for retrieving data from Hive tables through Presto.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/hive.rst.txt#2025-04-10_snippet_18\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM hive.web.page_views\n```\n\n----------------------------------------\n\nTITLE: Configuring Accumulo Connector Properties\nDESCRIPTION: Configuration file content for etc/catalog/accumulo.properties to mount the Accumulo connector as the Accumulo catalog, specifying connection details like instance name, ZooKeeper connection string, and authentication credentials.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/accumulo.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: none\nCODE:\n```\nconnector.name=accumulo\naccumulo.instance=xxx\naccumulo.zookeepers=xxx\naccumulo.username=username\naccumulo.password=password\n```\n\n----------------------------------------\n\nTITLE: Using Truncate Function in Presto SQL\nDESCRIPTION: Adds the 'truncate' function to Presto SQL for truncating numeric values.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.143.rst.txt#2025-04-10_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\ntruncate\n```\n\n----------------------------------------\n\nTITLE: Using CAST to JSON in Presto SQL\nDESCRIPTION: Examples showing how CAST to JSON treats any VARCHAR input as a string value. The resulting JSON is always a string containing the input, with proper character escaping.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/json.rst#2025-04-10_snippet_16\n\nLANGUAGE: sql\nCODE:\n```\nSELECT CAST('not_json' AS JSON); -- JSON '\"not_json\"'\nSELECT CAST('{\"a\": 1, \"b\": 2}' AS JSON); -- JSON '\"{\\\"a\\\": 1, \\\"b\\\": 2}\"'\nSELECT CAST('[1, 2, 3]' AS JSON); -- JSON '\"[1, 2, 3]\"'\nSELECT CAST('\"abc\"' AS JSON); -- JSON '\"\\\"abc\\\"\"'\nSELECT CAST('42' AS JSON); -- JSON '\"42\"'\nSELECT CAST('true' AS JSON); -- JSON '\"true\"'\nSELECT CAST('null' AS JSON); -- JSON '\"null\"'\n```\n\n----------------------------------------\n\nTITLE: Rewrite Expression Optimization Session Properties\nDESCRIPTION: Session properties for rewriting expressions with constant expressions, which optimizes queries with equivalence check filters or constant assignments, and for transforming left joins with ARRAY CONTAINS into equi joins.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.286.rst.txt#2025-04-10_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nrewrite_expression_with_constant_expression\n```\n\nLANGUAGE: sql\nCODE:\n```\nrewrite_left_join_array_contains_to_equi_join\n```\n\n----------------------------------------\n\nTITLE: Configuring Presto JVM for Alluxio Integration\nDESCRIPTION: Configuration needed to add the Alluxio configuration directory to the Presto JVM classpath to load Alluxio properties. This allows Presto to read and write tables stored in Alluxio's distributed file system.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/hive.rst.txt#2025-04-10_snippet_8\n\nLANGUAGE: none\nCODE:\n```\n-Xbootclasspath/a:<path-to-alluxio-conf>\n```\n\n----------------------------------------\n\nTITLE: Presto Logging Configuration\nDESCRIPTION: Configuration properties for Presto's logging system including retention, file sizes and HTTP server logging options.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/admin/properties.rst.txt#2025-04-10_snippet_26\n\nLANGUAGE: properties\nCODE:\n```\nlog.max-history=30\nlog.max-size=100MB\nhttp-server.log.enabled=true\nhttp-server.log.compression.enabled=true\nhttp-server.log.path=var/log/http-request.log\n```\n\n----------------------------------------\n\nTITLE: Using the is_private_ip Function in Presto\nDESCRIPTION: Shows the usage of the newly added is_private_ip function that returns true when the input IP address is private or reserved.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.290.rst#2025-04-10_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT is_private_ip('192.168.1.1') AS is_private\n```\n\n----------------------------------------\n\nTITLE: Validation Example using EXPLAIN in Presto SQL\nDESCRIPTION: Demonstrates the use of EXPLAIN with TYPE VALIDATE option to check the validity of a query.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/sql/explain.rst.txt#2025-04-10_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\npresto:tiny> EXPLAIN (TYPE VALIDATE) SELECT regionkey, count(*) FROM nation GROUP BY 1;\n result\n-------\n true\n```\n\n----------------------------------------\n\nTITLE: Specifying Resource Groups JSON Configuration File Path\nDESCRIPTION: Code snippet showing how to specify the path to the JSON configuration file for resource groups.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/admin/resource-groups.rst#2025-04-10_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nresource-groups.config-file=etc/resource-groups.json\n```\n\n----------------------------------------\n\nTITLE: Configuring Pinot Connector in Presto\nDESCRIPTION: This code snippet shows the basic configuration for the Pinot connector in Presto. It specifies the connector name and the URLs for the Pinot controllers.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/pinot.rst#2025-04-10_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nconnector.name=pinot\npinot.controller-urls=controller_host1:9000,controller_host2:9000\n```\n\n----------------------------------------\n\nTITLE: Using approx_percentile function with accuracy parameter in Presto SQL\nDESCRIPTION: Reference to the new version of the approx_percentile function that takes an accuracy parameter to control the precision of the approximation.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.126.rst#2025-04-10_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\napprox_percentile\n```\n\n----------------------------------------\n\nTITLE: RESET SESSION Command Syntax\nDESCRIPTION: Shows the basic syntax patterns for resetting session properties. Supports both general session properties and catalog-specific properties.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/reset-session.rst#2025-04-10_snippet_0\n\nLANGUAGE: none\nCODE:\n```\nRESET SESSION name\nRESET SESSION catalog.name\n```\n\n----------------------------------------\n\nTITLE: Using ST_Dimension in Presto\nDESCRIPTION: Returns the inherent dimension of this geometry object, which must be less than or equal to the coordinate dimension. This function indicates whether the geometry is a point (0), line (1), polygon (2), etc.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/geospatial.rst#2025-04-10_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nST_Dimension(Geometry) -> bigint\n```\n\n----------------------------------------\n\nTITLE: EXPLAIN ANALYZE VERBOSE Example with Window Functions in Presto SQL\nDESCRIPTION: Example of EXPLAIN ANALYZE with VERBOSE option showing detailed output for a query with window functions, including CPU fraction, active drivers, and statistical information.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/sql/explain-analyze.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: none\nCODE:\n```\nEXPLAIN ANALYZE VERBOSE SELECT count(clerk) OVER() FROM orders WHERE orderdate > date '1995-01-01';\n\n                                              Query Plan\n    -----------------------------------------------------------------------------------------------\n      ...\n             - Window[] => [clerk:varchar(15), count:bigint]\n                     Cost: {rows: ?, bytes: ?}\n                     CPU fraction: 75.93%, Output: 8130 rows (230.24kB)\n                     Input avg.: 8130.00 lines, Input std.dev.: 0.00%\n                     Active Drivers: [ 1 / 1 ]\n                     Index size: std.dev.: 0.00 bytes , 0.00 rows\n                     Index count per driver: std.dev.: 0.00\n                     Rows per driver: std.dev.: 0.00\n                     Size of partition: std.dev.: 0.00\n                     count := count(\"clerk\")\n     ...\n```\n\n----------------------------------------\n\nTITLE: Added SQL Functions in Presto 0.109\nDESCRIPTION: New SQL functions added in Presto 0.109 release including slice(), md5(), array_min(), and array_max() functions for array manipulation and hashing operations.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.109.rst#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nslice(), md5(), array_min(), array_max()\n```\n\n----------------------------------------\n\nTITLE: Scaling QDigest Distribution in Presto\nDESCRIPTION: Returns a new qdigest whose distribution has been scaled by the specified scale factor. This allows adjusting the distribution represented by the digest.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/qdigest.rst#2025-04-10_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nscale_qdigest(qdigest(T), scale_factor) -> qdigest(T)\n```\n\n----------------------------------------\n\nTITLE: Configuring SQL Server Connector in Presto\nDESCRIPTION: This snippet shows the basic configuration for the SQL Server connector in Presto. It includes the connector name, JDBC connection URL, username, and password.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/sqlserver.rst#2025-04-10_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nconnector.name=sqlserver\nconnection-url=jdbc:sqlserver://[serverName[\\instanceName][:portNumber]]\nconnection-user=root\nconnection-password=secret\n```\n\n----------------------------------------\n\nTITLE: Using ST_NumPoints in Presto\nDESCRIPTION: Returns the number of points in a geometry. This is an extension to the SQL/MM ST_NumPoints function which only applies to point and linestring, but in Presto works with any geometry type.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/geospatial.rst#2025-04-10_snippet_33\n\nLANGUAGE: sql\nCODE:\n```\nST_NumPoints(Geometry) -> bigint\n```\n\n----------------------------------------\n\nTITLE: Using map_agg, multimap_agg, and map_union Functions in Presto SQL\nDESCRIPTION: These Presto SQL functions (map_agg, multimap_agg, and map_union) have been optimized to reduce unnecessary memory usage. This improvement affects memory utilization in queries using these functions.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.155.rst#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nmap_agg()\nmultimap_agg()\nmap_union()\n```\n\n----------------------------------------\n\nTITLE: Setting Dictionary Processing Session Property\nDESCRIPTION: Session property to enable dictionary aggregation optimization during runtime.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.133.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\ndictionary_aggregation\n```\n\n----------------------------------------\n\nTITLE: Truncating PostgreSQL Tables\nDESCRIPTION: Command to remove all data from a PostgreSQL table while preserving its structure.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/postgresql.rst.txt#2025-04-10_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\nTRUNCATE TABLE postgresql.public.renamed_table;\n```\n\n----------------------------------------\n\nTITLE: Configuring Kudu Connector in Presto\nDESCRIPTION: Configuration properties for the Kudu connector in Presto. Includes settings for master addresses, schema emulation, and advanced client options.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/kudu.rst#2025-04-10_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nconnector.name=kudu\n\n## List of Kudu master addresses, at least one is needed (comma separated)\n## Supported formats: example.com, example.com:7051, 192.0.2.1, 192.0.2.1:7051,\n##                    [2001:db8::1], [2001:db8::1]:7051, 2001:db8::1\nkudu.client.master-addresses=localhost\n\n## Kudu does not support schemas, but the connector can emulate them optionally.\n## By default, this feature is disabled, and all tables belong to the default schema.\n## For more details see connector documentation.\n#kudu.schema-emulation.enabled=false\n\n## Prefix to use for schema emulation (only relevant if `kudu.schema-emulation.enabled=true`)\n## The standard prefix is `presto::`. Empty prefix is also supported.\n## For more details see connector documentation.\n#kudu.schema-emulation.prefix=\n\n#######################\n### Advanced Kudu Java client configuration\n#######################\n\n## Default timeout used for administrative operations (e.g. createTable, deleteTable, etc.)\n#kudu.client.default-admin-operation-timeout = 30s\n\n## Default timeout used for user operations\n#kudu.client.default-operation-timeout = 30s\n\n## Default timeout to use when waiting on data from a socket\n#kudu.client.default-socket-read-timeout = 10s\n\n## Disable Kudu client's collection of statistics.\n#kudu.client.disable-statistics = false\n```\n\n----------------------------------------\n\nTITLE: Multi-Column VALUES Example in PrestoDB\nDESCRIPTION: Example of using VALUES to create a table with two columns and three rows, using parentheses to group column values for each row.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/values.rst#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nVALUES\n    (1, 'a'),\n    (2, 'b'),\n    (3, 'c')\n```\n\n----------------------------------------\n\nTITLE: Basic SQL Server Connector Configuration\nDESCRIPTION: Basic configuration properties needed to set up a SQL Server connector in Presto. These properties should be placed in a .properties file in the etc/catalog directory.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/sqlserver.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nconnector.name=sqlserver\nconnection-url=jdbc:sqlserver://[serverName[\\instanceName][:portNumber]]\nconnection-user=root\nconnection-password=secret\n```\n\n----------------------------------------\n\nTITLE: Configuration Property for Memory Limit Error Verbosity\nDESCRIPTION: Configuration property to control whether detailed error messages are shown for exceeded memory limit errors. Set to false to disable verbose error messages.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.259.rst#2025-04-10_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\nmemory.verbose-exceeded-memory-limit-errors-enabled\n```\n\n----------------------------------------\n\nTITLE: Querying MySQL Table\nDESCRIPTION: Basic SELECT statement for retrieving all data from a MySQL table.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/mysql.rst#2025-04-10_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM mysql.web.page_views;\n```\n\n----------------------------------------\n\nTITLE: Setting Memory Limits for Queries in Presto SQL\nDESCRIPTION: Configures the maximum total memory and maximum memory per node for a query execution.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.232.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nSET SESSION query_max_total_memory_per_node = '10GB';\nSET SESSION query_max_memory_per_node = '8GB';\n```\n\n----------------------------------------\n\nTITLE: Revoking ALL PRIVILEGES in PrestoDB\nDESCRIPTION: Example showing how to revoke all privileges (DELETE, INSERT, and SELECT) on the 'test' table from user 'alice'.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/revoke.rst#2025-04-10_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nREVOKE ALL PRIVILEGES ON test FROM alice;\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Documentation Structure using reStructuredText\nDESCRIPTION: A reStructuredText toctree directive that organizes SQL language documentation. Sets maximum depth to 1 and includes references to types and reserved language sections.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/language.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n    :maxdepth: 1\n\n    language/types\n    language/reserved\n```\n\n----------------------------------------\n\nTITLE: Using Aggregation Functions with Restricted Results in SQL\nDESCRIPTION: Restricted number aggregation functions like min, max, min_by, and max_by now limit n to 10,000 or less results.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.194.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nmin(col, n), max(col, n), min_by(col1, col2, n), max_by(col1, col2, n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Presto Resource Manager\nDESCRIPTION: Configuration property to enable the new cluster memory manager which replaces the experimental big query support.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.109.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: config\nCODE:\n```\nexperimental.cluster-memory-manager-enabled\n```\n\n----------------------------------------\n\nTITLE: Configuring Distributed Sort in PrestoDB Properties File\nDESCRIPTION: Configuration settings for enabling distributed sort in PrestoDB, which can be set either through session properties or in the coordinator's config file. The property allows sorting of data that exceeds the per-node memory limit.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/admin/dist-sort.rst#2025-04-10_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nquery.max-memory-per-node\ndistributed_sort\ndistributed-sort\n```\n\n----------------------------------------\n\nTITLE: Defining MongoDB Field Schema in Presto\nDESCRIPTION: Illustrates the JSON structure for defining individual fields within a MongoDB table schema for Presto. Each field specifies the column name, data type, and visibility.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/mongodb.rst#2025-04-10_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": ...,\n    \"type\": ...,\n    \"hidden\": ...\n}\n```\n\n----------------------------------------\n\nTITLE: Setting resource_overcommit Session Property in Presto\nDESCRIPTION: Session property that disables memory limits for queries, allowing them to be killed if the coordinator needs to reclaim memory.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.132.rst#2025-04-10_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nresource_overcommit\n```\n\n----------------------------------------\n\nTITLE: Computing KLL Sketch in Presto SQL\nDESCRIPTION: Computes a KLL Sketch for quantile estimation. The stored form is the little-endian serialized version of the Apache DataSketches KLL Sketch.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/sketch.rst.txt#2025-04-10_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nsketch_kll[T](x: T) -> kllsketch[T]\n```\n\n----------------------------------------\n\nTITLE: Querying Data Sequence Number\nDESCRIPTION: Example of querying the hidden $data_sequence_number column showing when data was added.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/iceberg.rst#2025-04-10_snippet_12\n\nLANGUAGE: sql\nCODE:\n```\nSELECT \"$data_sequence_number\", regionkey FROM \"ctas_nation\";\n```\n\n----------------------------------------\n\nTITLE: Creating a Table with Black Hole Connector in Presto\nDESCRIPTION: This SQL command creates a table in the Black Hole connector by copying data from an existing table in the TPCH schema.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/blackhole.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE blackhole.test.nation AS\nSELECT * from tpch.tiny.nation;\n```\n\n----------------------------------------\n\nTITLE: Configuring Presto Optimizer Settings\nDESCRIPTION: This snippet references a configuration setting for the Presto optimizer. The 'optimizer.optimize-hash-generation' config, when disabled, can cause queries to fail in this release due to a bug.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.122.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\noptimizer.optimize-hash-generation\n```\n\n----------------------------------------\n\nTITLE: Setting Spark Memory Revoking Threshold in Presto on Spark\nDESCRIPTION: Configures the memory threshold for triggering spilling in Presto on Spark. Spilling is triggered when total memory usage exceeds this threshold.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.254.rst#2025-04-10_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\nSET SESSION spark_memory_revoking_threshold = 0.8;\n```\n\n----------------------------------------\n\nTITLE: Configuring Join Null Inference Strategy in Presto SQL\nDESCRIPTION: Sets the joins_not_null_inference_strategy session property to control null inferencing for join nodes, replacing the deprecated optimize_nulls_in_join property.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.282.rst#2025-04-10_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nSET SESSION joins_not_null_inference_strategy = 'strategy_value';\n```\n\n----------------------------------------\n\nTITLE: Complex Join Query Using Table Value Constructors in Presto SQL\nDESCRIPTION: Shows how to use table value constructors in FROM clause with column aliases and JOIN operations to combine two inline tables.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.61.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT *\nFROM (\n  VALUES\n    ('a', 'ape'),\n    ('b', 'bear')\n) AS animal (letter, animal)\nJOIN (\n  VALUES\n    ('a', 'apple'),\n    ('b', 'banana')\n) AS fruit (letter, fruit)\nUSING (letter);\n```\n\n----------------------------------------\n\nTITLE: Configuring CTE Materialization Strategy in Presto SQL\nDESCRIPTION: Sets the CTE materialization strategy to HEURISTIC or HEURISTIC_COMPLEX_QUERIES_ONLY for auto-materializing expensive CTEs. The default is NONE.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.287.rst#2025-04-10_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSET SESSION cte_materialization_strategy = 'HEURISTIC';\n```\n\n----------------------------------------\n\nTITLE: Querying Iceberg Table by Branch or Tag Name in Presto\nDESCRIPTION: Shows how to query an Iceberg table using a specific branch or tag name, a new feature in this release.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.290.rst#2025-04-10_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT * FROM my_iceberg_table@mybranch\n```\n\n----------------------------------------\n\nTITLE: Dropping a Schema in SQL\nDESCRIPTION: This example demonstrates how to drop the 'web' schema using the DROP SCHEMA command.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/sql/drop-schema.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nDROP SCHEMA web\n```\n\n----------------------------------------\n\nTITLE: Documenting Optimizer Properties in RST\nDESCRIPTION: Configuration documentation for Presto query optimizer properties including dictionary aggregation and hash generation settings\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/admin/properties-session.rst#2025-04-10_snippet_3\n\nLANGUAGE: rst\nCODE:\n```\n``dictionary_aggregation``\n^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* **Type:** ``boolean``\n* **Default value:** ``false``\n```\n\n----------------------------------------\n\nTITLE: SQL Query Example with DISTINCT and Filter\nDESCRIPTION: Shows an example SQL query syntax that previously failed but is now fixed, containing an aggregation function with DISTINCT and a selective filter condition.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.203.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nsum(DISTINCT x) FILTER (WHERE y = 0)\n```\n\n----------------------------------------\n\nTITLE: DELETE Query with WHERE Clause in SQL\nDESCRIPTION: Example of a DELETE query that now requires SELECT privileges on objects referenced in the WHERE condition.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.205.rst.txt#2025-04-10_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nDELETE FROM <table> WHERE <condition>\n```\n\n----------------------------------------\n\nTITLE: Inserting All Rows from Another Table\nDESCRIPTION: Example showing how to insert all rows from a source table into a destination table using SELECT.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/insert.rst#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO orders\nSELECT * FROM new_orders;\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Pending Splits Per Task in Presto\nDESCRIPTION: Defines the number of outstanding splits that can be queued for each worker node for a single query stage. Prevents starvation and deadlocks.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/admin/properties.rst#2025-04-10_snippet_38\n\nLANGUAGE: properties\nCODE:\n```\nnode-scheduler.max-pending-splits-per-task=10\n```\n\n----------------------------------------\n\nTITLE: Using map_agg() and array_agg() Functions with Improved Memory Accounting\nDESCRIPTION: Aggregation functions that now have improved memory accounting accuracy in Presto 0.132, which will make them appear to use more memory than in previous versions.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.132.rst#2025-04-10_snippet_5\n\nLANGUAGE: SQL\nCODE:\n```\nmap_agg()\n```\n\nLANGUAGE: SQL\nCODE:\n```\narray_agg()\n```\n\n----------------------------------------\n\nTITLE: Retrieving Value at Quantile from QDigest in Presto\nDESCRIPTION: Returns the approximate percentile value from a quantile digest for a given quantile between 0 and 1. This function extracts estimated values at specific percentiles from the digest.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/qdigest.rst#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nvalue_at_quantile(qdigest(T), quantile) -> T\n```\n\n----------------------------------------\n\nTITLE: Defining Redis Hash Table Structure in JSON\nDESCRIPTION: JSON structure for defining a Redis hash table in Presto. This configuration is specific to the Redis hash data type and includes table name, schema, and field definitions for the hash value.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/redis.rst#2025-04-10_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"tableName\": ...,\n    \"schemaName\": ...,\n    \"value\": {\n        \"dataFormat\": \"hash\",\n        \"fields\": [\n            ...\n       ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: IP Prefix Calculation in SQL\nDESCRIPTION: Demonstrates how to calculate IP prefixes from IP addresses with specified subnet bits. Works with both IPv4 and IPv6 addresses.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/ip.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT ip_prefix(CAST('192.168.255.255' AS IPADDRESS), 9);\nSELECT ip_prefix('2001:0db8:85a3:0001:0001:8a2e:0370:7334', 48);\n```\n\n----------------------------------------\n\nTITLE: Preparing and Describing a Query with Expressions in Presto SQL\nDESCRIPTION: Shows how to prepare a query with expressions and aliases, then describe its output using the DESCRIBE OUTPUT command.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/sql/describe-output.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nPREPARE my_select2 FROM\nSELECT count(*) as my_count, 1+2 FROM nation\n```\n\nLANGUAGE: sql\nCODE:\n```\nDESCRIBE OUTPUT my_select2;\n```\n\n----------------------------------------\n\nTITLE: Multiple Roles Grant with Admin Option in Presto SQL\nDESCRIPTION: Advanced example demonstrating granting multiple roles to both a user and a role with administrative privileges.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/sql/grant-roles.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nGRANT bar, foo TO USER baz, ROLE qux WITH ADMIN OPTION;\n```\n\n----------------------------------------\n\nTITLE: Using noisy_count_if_gaussian in SQL\nDESCRIPTION: Examples of using noisy_count_if_gaussian function to count TRUE values with added Gaussian noise. Returns NULL for empty sets.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/noisy.rst#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT noisy_count_if_gaussian(orderkey > 10000, 20.0) FROM tpch.tiny.lineitem; -- 50180 (1 row)\nSELECT noisy_count_if_gaussian(orderkey > 10000, 20.0) FROM tpch.tiny.lineitem WHERE false; -- NULL (1 row)\n```\n\n----------------------------------------\n\nTITLE: Listing Tables in JMX Information Schema\nDESCRIPTION: SQL command to show all available tables in the JMX connector's information_schema, which contains metadata about the other schemas.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/jmx.rst#2025-04-10_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nSHOW TABLES FROM jmx.information_schema;\n```\n\n----------------------------------------\n\nTITLE: Verifying Java Keystore File Contents\nDESCRIPTION: This command lists and verifies the contents of a Java keystore file. It's useful for troubleshooting and ensuring the keystore is properly configured with the correct certificates and aliases.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/security/tls.rst#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nkeytool -list -v -keystore /etc/presto/presto.jks\n```\n\n----------------------------------------\n\nTITLE: Demonstrating RST Syntax for Function References in Presto Documentation\nDESCRIPTION: This snippet illustrates how to reference functions in RST format within the Presto documentation. It's used to highlight specific functions like max, min, and max_by.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.98.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n:func:`!max` and :func:`!min`\n```\n\n----------------------------------------\n\nTITLE: Creating Table from SELECT\nDESCRIPTION: SQL statement for creating a new table by copying data from an existing table.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/mysql.rst#2025-04-10_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE mysql.web.page_views_new AS SELECT * FROM mysql.web.page_views;\n```\n\n----------------------------------------\n\nTITLE: Configuring Presto Write Distribution\nDESCRIPTION: Session and configuration properties to control data redistribution when writing tables.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.109.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: config\nCODE:\n```\nredistribute_writes\nredistribute-writes\n```\n\n----------------------------------------\n\nTITLE: UPDATE Statement Syntax in Presto SQL\nDESCRIPTION: Defines the syntax for the UPDATE statement in Presto SQL. It allows updating column values in existing table rows, optionally with a WHERE condition to specify which rows to update.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/update.rst#2025-04-10_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nUPDATE table_name SET [ column = expression [, ... ] ] [ WHERE condition ]\n```\n\n----------------------------------------\n\nTITLE: Creating TLS CA File for MongoDB (Bash)\nDESCRIPTION: Steps to create and configure a TLS CA file for secure connections to MongoDB. This includes creating the certificate file, updating the trust store, and verifying the setup.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/mongodb.rst#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ntouch /etc/pki/ca-trust/source/anchors/mongo.prod-cluster.crt\nupdate-ca-trust\nopenssl s_client -connect <host-found-with-dig-above>:27017 < /dev/null\n```\n\n----------------------------------------\n\nTITLE: Specifying Mapping File Path for Configuration-based Authorizer\nDESCRIPTION: Configuration property for specifying the path to the role-regex mapping file for the Configuration-based Authorizer.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/security/authorization.rst#2025-04-10_snippet_3\n\nLANGUAGE: properties\nCODE:\n```\nconfiguration-based-authorizer.role-regex-map.file-path=<path to mapping file>\n```\n\n----------------------------------------\n\nTITLE: Querying Distinct Aggregations in SQL\nDESCRIPTION: Demonstrates the use of the DISTINCT argument qualifier for aggregation functions in SQL queries. This feature allows counting distinct values for multiple columns in a single query.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.57.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT country, count(DISTINCT city), count(DISTINCT age)\nFROM users\nGROUP BY country\n```\n\n----------------------------------------\n\nTITLE: Warning about ORC files with empty MAP columns bug in RestructuredText\nDESCRIPTION: A warning notice about a bug causing failures when reading ORC files with MAP columns using MAP_FLAT encoding where all entries are empty maps, with a reference to PR #15468.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.243.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. warning::\n    There is a bug that causes a failure in reading ORC files having MAP columns with MAP_FLAT encoding where all the entries in the column are empty maps (:pr:`15468`).\n```\n\n----------------------------------------\n\nTITLE: Using noisy_count_gaussian in SQL\nDESCRIPTION: Examples of using noisy_count_gaussian function to count non-NULL values with added Gaussian noise. Returns NULL for empty sets.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/noisy.rst#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT noisy_count_gaussian(orderkey, 20.0) FROM tpch.tiny.lineitem; -- 60179 (1 row)\nSELECT noisy_count_gaussian(orderkey, 20.0) FROM tpch.tiny.lineitem WHERE false; -- NULL (1 row)\n```\n\n----------------------------------------\n\nTITLE: Referencing Configuration Property in reStructuredText\nDESCRIPTION: This snippet demonstrates how to reference a configuration property in reStructuredText format, specifically for the 'inline_sql_function' session property.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.260.rst#2025-04-10_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n``inline_sql_function``\n```\n\n----------------------------------------\n\nTITLE: Update RowId Column Handle Method Signature\nDESCRIPTION: Method signature for retrieving the column handle used to identify rows for update operations.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/develop/delete-and-update.rst.txt#2025-04-10_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nColumnHandle getUpdateRowIdColumnHandle(\n    ConnectorSession session,\n    ConnectorTableHandle tableHandle,\n    List<ColumnHandle> updatedColumns)\n```\n\n----------------------------------------\n\nTITLE: Running Nessie with Docker and Disabling OpenTelemetry\nDESCRIPTION: Docker command for starting a Nessie container with OpenTelemetry disabled to avoid connection errors. This is useful for local development and testing.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/iceberg.rst.txt#2025-04-10_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -p 19120:19120 -e QUARKUS_OTEL_SDK_DISABLED=true ghcr.io/projectnessie/nessie\n```\n\n----------------------------------------\n\nTITLE: SQL IN Predicate Enhancement\nDESCRIPTION: Fix for uncorrelated subqueries in IN predicates during query planning.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.154.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nIN\n```\n\n----------------------------------------\n\nTITLE: Session Property Reference in Presto 0.133\nDESCRIPTION: Session property mentioned in the release notes for controlling dictionary aggregation feature.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.133.rst#2025-04-10_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\ndictionary_aggregation\n```\n\n----------------------------------------\n\nTITLE: Setting System Memory Shrink Amount in Presto\nDESCRIPTION: Specifies the amount of memory to shrink when memory pushback is triggered. This property only applies if system-mem-pushback-enabled is true.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/presto_cpp/properties.rst#2025-04-10_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nsystem-mem-shrink-gb\n```\n\n----------------------------------------\n\nTITLE: Configuring Task Parallelism in Presto SQL\nDESCRIPTION: Sets configuration parameters and session properties to control task parallelism for join probes, hash builds, and final aggregations. This experimental feature can potentially reduce query wall time at the cost of increased CPU usage.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.103.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\ntask.default-concurrency = <value>\nSET SESSION task_default_concurrency = <value>;\nSET SESSION task_join_concurrency = <value>;\nSET SESSION task_hash_build_concurrency = <value>;\nSET SESSION task_aggregation_concurrency = <value>;\n```\n\n----------------------------------------\n\nTITLE: Generic Bitwise Left Shift Operations in Presto SQL\nDESCRIPTION: Examples of generic left shift operations on TINYINT values using bitwise_left_shift() function.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/bitwise.rst.txt#2025-04-10_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nSELECT bitwise_left_shift(TINYINT '7', 2); -- 28\nSELECT bitwise_left_shift(TINYINT '-7', 2); -- -28\n```\n\n----------------------------------------\n\nTITLE: Importing LDAP Server Certificate using Keytool\nDESCRIPTION: Command to import the LDAP server's TLS certificate into Java's default truststore for securing the TLS connection.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/security/ldap.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ keytool -import -keystore <JAVA_HOME>/jre/lib/security/cacerts -trustcacerts -alias ldap_server -file ldap_server.crt\n```\n\n----------------------------------------\n\nTITLE: Referencing TaskExecutor in Presto\nDESCRIPTION: Mentions a reduction in lock contention for the TaskExecutor class in Presto.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.99.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nTaskExecutor\n```\n\n----------------------------------------\n\nTITLE: Configuring Spiller Task Strategy in Presto\nDESCRIPTION: Adds a new configuration property to choose different spilling strategies in Presto. This allows for more flexibility in managing memory usage during query execution.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.242.rst#2025-04-10_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n* Add configuration property ``experimental.spiller.task-spilling-strategy`` for choosing different spilling strategy to use.\n```\n\n----------------------------------------\n\nTITLE: Querying SQL Server Schemas in Presto\nDESCRIPTION: This SQL query demonstrates how to list available schemas in the SQL Server catalog using Presto.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/sqlserver.rst#2025-04-10_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSHOW SCHEMAS FROM sqlserver;\n```\n\n----------------------------------------\n\nTITLE: Setting Join Distribution Type in Presto SQL\nDESCRIPTION: Configures the join distribution type session property in Presto. Valid values are AUTOMATIC (default), BROADCAST, and PARTITIONED. This property controls how Presto distributes data for join operations.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/optimizer/cost-based-optimizations.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nSET SESSION join_distribution_type = 'AUTOMATIC';\n```\n\n----------------------------------------\n\nTITLE: Querying Hidden $path Metadata Column in Iceberg Tables with Presto\nDESCRIPTION: Demonstrates how to query the $path hidden metadata column, which provides the full file system path of the file for each row.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/iceberg.rst.txt#2025-04-10_snippet_12\n\nLANGUAGE: sql\nCODE:\n```\nSELECT \"$path\", regionkey FROM \"ctas_nation\";\n```\n\nLANGUAGE: text\nCODE:\n```\n         $path                    |  regionkey\n ---------------------------------+-----------\n  /full/path/to/file/file.parquet | 2\n```\n\n----------------------------------------\n\nTITLE: Adding Trail Function in SQL\nDESCRIPTION: Introduces the trail function, though its specific functionality is not detailed in the changelog.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.284.rst.txt#2025-04-10_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\ntrail()\n```\n\n----------------------------------------\n\nTITLE: Documenting RST Warning Block for Presto Startup Issue\nDESCRIPTION: ReStructuredText warning block describing a critical bug affecting Presto startup when function namespace manager is enabled without Thrift configuration.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.243.3.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. warning::\n    There is a bug causing failure at startup if function namespace manager is enabled and Thrift is not configured (:pr:`15501`).\n```\n\n----------------------------------------\n\nTITLE: Setting Query Maximum Spill Per Node in Presto\nDESCRIPTION: Defines the maximum spill space that can be used by a single query on a single node. This prevents a single query from consuming all available spill space.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/admin/properties.rst#2025-04-10_snippet_16\n\nLANGUAGE: properties\nCODE:\n```\nexperimental.query-max-spill-per-node\n```\n\n----------------------------------------\n\nTITLE: Creating Topic Description File for Kafka Key Mapping\nDESCRIPTION: JSON configuration file that maps Kafka key data to a Presto table column. Defines the table schema and key format for the customer table.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/kafka-tutorial.rst#2025-04-10_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"tableName\": \"customer\",\n    \"schemaName\": \"tpch\",\n    \"topicName\": \"tpch.customer\",\n    \"key\": {\n        \"dataFormat\": \"raw\",\n        \"fields\": [\n            {\n                \"name\": \"kafka_key\",\n                \"dataFormat\": \"LONG\",\n                \"type\": \"BIGINT\",\n                \"hidden\": \"false\"\n            }\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Memory Management Change Reference in RST\nDESCRIPTION: RST documentation warning about memory leak and note about clearing LazyBlockLoader reference after load for improved memory management.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.91.rst#2025-04-10_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n============\nRelease 0.91\n============\n\n.. warning:: This release has a memory leak and should not be used.\n\nGeneral Changes\n---------------\n\n* Clear ``LazyBlockLoader`` reference after load to free memory earlier.\n```\n\n----------------------------------------\n\nTITLE: Union Queries in SQL\nDESCRIPTION: Improved parallelism for UNION queries, allowing for more efficient processing of combined result sets from multiple SELECT statements.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.174.rst#2025-04-10_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT column1 FROM table1 UNION SELECT column1 FROM table2\n```\n\n----------------------------------------\n\nTITLE: IP Subnet Range Array Generation\nDESCRIPTION: Returns an array containing the minimum and maximum IP addresses in a subnet range.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/ip.rst.txt#2025-04-10_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSELECT ip_subnet_range(IPPREFIX '1.2.3.160/24');\nSELECT ip_subnet_range(IPPREFIX '64:ff9b::52f4/120');\n```\n\n----------------------------------------\n\nTITLE: Setting Runaway Splits Interrupt Timeout in Presto\nDESCRIPTION: Defines the timeout for interrupting split threads blocked without yielding control. Currently only affects threads blocked in the Joni regular expression library.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/admin/properties.rst#2025-04-10_snippet_36\n\nLANGUAGE: properties\nCODE:\n```\ntask.interrupt-runaway-splits-timeout=10m\n```\n\n----------------------------------------\n\nTITLE: Referencing SQL Functions in Presto 0.155\nDESCRIPTION: This snippet shows SQL function references used in the context of memory usage improvements. The functions map_agg, multimap_agg, and map_union are mentioned as having reduced unnecessary memory usage in this release.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.155.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n:func:`!map_agg`, :func:`!multimap_agg` and :func:`!map_union`\n```\n\n----------------------------------------\n\nTITLE: Aggregating T-Digest in Presto SQL\nDESCRIPTION: Returns the T-digest composed of all input values of x. This function is used to create a T-digest from a set of values.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/tdigest.rst.txt#2025-04-10_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\ntdigest_agg(x) -> tdigest<double>\n```\n\n----------------------------------------\n\nTITLE: Showing Tables (Sheets) in a Lark Spreadsheet Schema\nDESCRIPTION: SQL command to list all tables (sheets) available in a previously mapped Lark spreadsheet schema.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/larksheets.rst.txt#2025-04-10_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSHOW TABLES FROM my_ss\n```\n\n----------------------------------------\n\nTITLE: IP Subnet Membership Check\nDESCRIPTION: Verifies if an IP address belongs to a specific subnet or if one subnet is contained within another.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/ip.rst.txt#2025-04-10_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nSELECT is_subnet_of(IPPREFIX '1.2.3.128/26', IPADDRESS '1.2.3.129');\nSELECT is_subnet_of(IPPREFIX '64:fa9b::17/64', IPADDRESS '64:ffff::17');\nSELECT is_subnet_of(IPPREFIX '192.168.3.131/26', IPPREFIX '192.168.3.144/30');\n```\n\n----------------------------------------\n\nTITLE: Preparing and Describing a CREATE TABLE AS Query in Presto SQL\nDESCRIPTION: Illustrates how to prepare a CREATE TABLE AS query and describe its output, which typically returns a row count.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/sql/describe-output.rst.txt#2025-04-10_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nPREPARE my_create FROM\nCREATE TABLE foo AS SELECT * FROM nation\n```\n\nLANGUAGE: sql\nCODE:\n```\nDESCRIBE OUTPUT my_create;\n```\n\n----------------------------------------\n\nTITLE: Executing Cross Join in SQL\nDESCRIPTION: Mentions a fix for execution failures in queries containing cross joins when using bucketed execution.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.203.rst#2025-04-10_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nCROSS JOIN\n```\n\n----------------------------------------\n\nTITLE: Querying a Constant-Row Table in Black Hole Connector\nDESCRIPTION: SQL query to count rows in a Black Hole connector table configured with constant rows. This will return the product of split_count, pages_per_split, and rows_per_page.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/blackhole.rst#2025-04-10_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nSELECT count(*) FROM blackhole.test.nation;\n```\n\n----------------------------------------\n\nTITLE: Using AT TIME ZONE in VALUES List in Presto\nDESCRIPTION: Demonstrates the usage of AT TIME ZONE in VALUES list, which had a bug fixed in this release.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.156.rst#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nAT TIME ZONE\n```\n\n----------------------------------------\n\nTITLE: Implementing create() for ExampleConnectorFactory in Java\nDESCRIPTION: This snippet shows the core implementation of the create() method in ExampleConnectorFactory. It sets up a Guice injector with required modules and configuration, then uses it to create an instance of ExampleConnector.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/develop/example-http.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n// A plugin is not required to use Guice; it is just very convenient\nBootstrap app = new Bootstrap(\n        new JsonModule(),\n        new ExampleModule(catalogName));\n\nInjector injector = app\n        .doNotInitializeLogging()\n        .setRequiredConfigurationProperties(requiredConfig)\n        .initialize();\n\nreturn injector.getInstance(ExampleConnector.class);\n```\n\n----------------------------------------\n\nTITLE: IEEE 754 Floating-Point Encoding and Decoding in Presto SQL\nDESCRIPTION: Functions for encoding and decoding single and double precision floating-point numbers in IEEE 754 format.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/binary.rst#2025-04-10_snippet_9\n\nLANGUAGE: SQL\nCODE:\n```\nto_ieee754_32(real) -> varbinary\n```\n\nLANGUAGE: SQL\nCODE:\n```\nfrom_ieee754_32(binary) -> real\n```\n\nLANGUAGE: SQL\nCODE:\n```\nto_ieee754_64(double) -> varbinary\n```\n\nLANGUAGE: SQL\nCODE:\n```\nfrom_ieee754_64(binary) -> double\n```\n\n----------------------------------------\n\nTITLE: Failed Table Compression Example\nDESCRIPTION: Example showing unsupported table compression in CREATE TABLE AS SELECT statement.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/mysql.rst#2025-04-10_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE compressed_employees AS SELECT * FROM employees WITH (compression = 'Zlib');\n```\n\n----------------------------------------\n\nTITLE: ROLLBACK Command Examples in SQL\nDESCRIPTION: Examples demonstrating the usage of the ROLLBACK command in SQL. It shows two variations: one with just ROLLBACK and another with ROLLBACK WORK.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/rollback.rst#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nROLLBACK;\nROLLBACK WORK;\n```\n\n----------------------------------------\n\nTITLE: VARBINARY Concatenation Support\nDESCRIPTION: Added support for concatenating VARBINARY data types, allowing binary data to be combined in queries.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.180.rst.txt#2025-04-10_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSELECT binary_column1 || binary_column2 FROM table;\n```\n\n----------------------------------------\n\nTITLE: SQL Function Reference - row_number()\nDESCRIPTION: Reference to the row_number() function that received fixes for filter and limit handling in the optimizer to prevent incorrect query results.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.112.rst#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nrow_number()\n```\n\n----------------------------------------\n\nTITLE: SQL Configuration Property\nDESCRIPTION: Configuration property for task concurrency replacing older specific concurrency settings.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.147.rst.txt#2025-04-10_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\ntask.concurrency\n```\n\n----------------------------------------\n\nTITLE: Creating External Hive Tables with Location Property in Presto\nDESCRIPTION: Property added in Presto 0.157 that allows specifying an external location when creating Hive tables.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.157.rst#2025-04-10_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nexternal_location\n```\n\n----------------------------------------\n\nTITLE: Configuring Consistent Hashing for Affinity Scheduling in PrestoDB\nDESCRIPTION: Configuration parameters to enable consistent hashing as a node selection strategy. Set node-scheduler.node-selection-hash-strategy to CONSISTENT and configure the minimum number of virtual nodes in the hashing ring.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.268.rst#2025-04-10_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnode-scheduler.node-selection-hash-strategy = CONSISTENT\nnode-scheduler.consistent-hashing-min-virtual-node-count = <value>\n```\n\n----------------------------------------\n\nTITLE: SQL Function Addition - array_union and reverse\nDESCRIPTION: New array manipulation functions added to PrestoDB: array_union for combining arrays and reverse for reversing array elements.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.152.rst#2025-04-10_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\narray_union(array1, array2)\nreverse(array)\n```\n\n----------------------------------------\n\nTITLE: Truncating an Iceberg Table in Presto\nDESCRIPTION: Removes all data from the 'nation' table while preserving the table structure and metadata. This operation provides a way to quickly clear a table without having to recreate it.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/iceberg.rst#2025-04-10_snippet_51\n\nLANGUAGE: sql\nCODE:\n```\nTRUNCATE TABLE nation;\n```\n\n----------------------------------------\n\nTITLE: Initial Query Response JSON\nDESCRIPTION: Example response from Presto after submitting a query, containing query ID, URIs for monitoring, column metadata, and execution statistics.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/rest/statement.rst#2025-04-10_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Type: application/json\nX-Content-Type-Options: nosniff\nTransfer-Encoding: chunked\n\n{\n  \"id\":\"20140108_110629_00011_dk5x2\",\n  \"infoUri\":\"http://localhost:8001/v1/query/20140108_110629_00011_dk5x2\",\n  \"partialCancelUri\":\"http://10.193.207.128:8080/v1/stage/20140108_110629_00011_dk5x2.1\",\n  \"nextUri\":\"http://localhost:8001/v1/statement/20140108_110629_00011_dk5x2/1\",\n  \"columns\":[\n    {\n      \"name\":\"name\",\n      \"type\":\"varchar\"\n    }\n  ],\n  \"stats\":{\n    \"state\":\"RUNNING\",\n    \"scheduled\":false,\n    \"nodes\":1,\n    \"totalSplits\":0,\n    \"queuedSplits\":0,\n    \"runningSplits\":0,\n    \"completedSplits\":0,\n    \"cpuTimeMillis\":0,\n    \"wallTimeMillis\":0,\n    \"processedRows\":0,\n    \"processedBytes\":0,\n    \"rootStage\":{\n      \"stageId\":\"0\",\n      \"state\":\"SCHEDULED\",\n      \"done\":false,\n      \"nodes\":1,\n      \"totalSplits\":0,\n      \"queuedSplits\":0,\n      \"runningSplits\":0,\n      \"completedSplits\":0,\n      \"cpuTimeMillis\":0,\n      \"wallTimeMillis\":0,\n      \"processedRows\":0,\n      \"processedBytes\":0,\n      \"subStages\":[\n        {\n          \"stageId\":\"1\",\n          \"state\":\"SCHEDULED\",\n          \"done\":false,\n          \"nodes\":1,\n          \"totalSplits\":0,\n          \"queuedSplits\":0,\n          \"runningSplits\":0,\n          \"completedSplits\":0,\n          \"cpuTimeMillis\":0,\n          \"wallTimeMillis\":0,\n          \"processedRows\":0,\n          \"processedBytes\":0,\n          \"subStages\":[]\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding expandedQuery Field to QueryCompletedEvent in Presto SPI\nDESCRIPTION: Introduces a new expandedQuery field to the QueryCompletedEvent class to enable more detailed query text logging functionality. This change is part of Presto's Service Provider Interface (SPI) modifications.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.264.1.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nexpandedQuery\n```\n\n----------------------------------------\n\nTITLE: Calculating MinHash Cardinality\nDESCRIPTION: Calculates the cardinality of the MinHash sketch, representing the x column's cardinality.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/khyperloglog.rst#2025-04-10_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\ncardinality(khll)\n```\n\n----------------------------------------\n\nTITLE: Enabling Password Authentication in Presto Coordinator\nDESCRIPTION: Configuration setting for the Presto coordinator to enable password authentication. This property should be added to the coordinator's config.properties file to specify PASSWORD as the authentication type.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/develop/password-authenticator.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\nhttp-server.authentication.type=PASSWORD\n```\n\n----------------------------------------\n\nTITLE: Array Manipulation Function in SQL\nDESCRIPTION: A new function to delete elements from the end of an array, which can be used to truncate arrays to a specific length while preserving the remaining elements.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.273.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\ntrim_array()\n```\n\n----------------------------------------\n\nTITLE: Configuring Verifier for Debugging\nDESCRIPTION: Demonstrates how to set the 'run-teardown-on-result-mismatch' configuration property to false for debugging purposes in the Verifier.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.216.rst#2025-04-10_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nSET run-teardown-on-result-mismatch = false;\n```\n\n----------------------------------------\n\nTITLE: Configuring Maximum Partitions per Scan in Hive Connector\nDESCRIPTION: This configuration option sets a limit on the number of partitions that can be read per table scan in the Hive connector. It helps prevent excessive resource consumption for tables with a large number of partitions.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.159.rst#2025-04-10_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nhive.max-partitions-per-scan=100000\n```\n\n----------------------------------------\n\nTITLE: Using IGNORE NULLS Clause with Window Functions in Presto SQL\nDESCRIPTION: Adds support for the IGNORE NULLS clause in various window functions. This allows for more flexible handling of NULL values in window function calculations.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.231.rst#2025-04-10_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT function_name(column_name) IGNORE NULLS OVER (PARTITION BY partition_column)\n```\n\n----------------------------------------\n\nTITLE: Type Interface Methods\nDESCRIPTION: Example showing the getJavaType() method that defines the native container type used for value storage during execution. This method is crucial for type implementation as it determines how values are handled in Java code.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/develop/types.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: java\nCODE:\n```\ngetJavaType()  // Returns the Java type used as native container\n```\n\n----------------------------------------\n\nTITLE: SQL Function Reference - array_intersect Example\nDESCRIPTION: Reference to the array_intersect function implementation that accepts an array of arrays as input.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.247.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\narray_intersect\n```\n\n----------------------------------------\n\nTITLE: Disabling Eager Memory Freeing in SQL\nDESCRIPTION: Configures the exchange.acknowledge-pages option to disable eager freeing of memory in source output buffers, which can affect dynamic writer scaling.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.196.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nSET exchange.acknowledge-pages = false;\n```\n\n----------------------------------------\n\nTITLE: Setting HTTP Server Log File Size Limit in Presto\nDESCRIPTION: Configures the maximum file size for the HTTP server log file. When the log reaches this size, it will be archived and a new log file will be created.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/admin/properties.rst.txt#2025-04-10_snippet_28\n\nLANGUAGE: properties\nCODE:\n```\nhttp-server.log.max-size\n```\n\n----------------------------------------\n\nTITLE: SQL UNION in INSERT Queries\nDESCRIPTION: Example of UNION operation in INSERT queries where column order matching was fixed.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.142.rst#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nUNION\n```\n\n----------------------------------------\n\nTITLE: Fixing ORC Reader in Presto Hive Connector\nDESCRIPTION: Resolves an issue with the ORC (Optimized Row Columnar) reader specifically for the Hive connector in Presto.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.114.rst#2025-04-10_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nFix ORC reader for Hive connector.\n```\n\n----------------------------------------\n\nTITLE: Retrieving Generic Type with TypeParameter in Presto\nDESCRIPTION: Example demonstrating how to access the Type object for generic types in a function implementation. This allows the function to perform type-specific logic based on the actual type provided.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/develop/functions.rst#2025-04-10_snippet_11\n\nLANGUAGE: java\nCODE:\n```\n@ScalarFunction(\"example\")\n@TypeParameter(\"T\")\npublic static Block exampleFunction(\n        @TypeParameter(\"T\") Type type,\n        @BlockPosition @SqlType(\"T\") Block block,\n        @BlockIndex int index) { /* ...implementation */ }\n```\n\n----------------------------------------\n\nTITLE: Enabling Aggregation Push-Through Join Optimization in Presto\nDESCRIPTION: Allows pushing aggregations below outer joins under certain conditions. This optimization can substantially speed up queries, especially correlated scalar subqueries.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/admin/properties.rst.txt#2025-04-10_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\noptimizer.push-aggregation-through-join:\n  Type: boolean\n  Default value: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Kerberos Authentication for HDFS in Presto\nDESCRIPTION: Example configuration for enabling Kerberos authentication to access HDFS from Presto. Specifies the authentication type, principal, and keytab file location.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/hive-security.rst.txt#2025-04-10_snippet_3\n\nLANGUAGE: none\nCODE:\n```\nhive.hdfs.authentication.type=KERBEROS\nhive.hdfs.presto.principal=hdfs@EXAMPLE.COM\nhive.hdfs.presto.keytab=/etc/presto/hdfs.keytab\n```\n\n----------------------------------------\n\nTITLE: Merging T-Digests in Presto SQL\nDESCRIPTION: Merges all input T-digests into a single T-digest. This function is used to combine multiple T-digest structures.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/tdigest.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nmerge(tdigest<double>) -> tdigest<double>\n```\n\n----------------------------------------\n\nTITLE: Configuring Hive Metastore Catalog for Iceberg in Presto\nDESCRIPTION: Configuration properties needed to set up an Iceberg connector using Hive Metastore as the catalog. This specifies the connector name, metastore URI, and catalog type.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/iceberg.rst#2025-04-10_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nconnector.name=iceberg\nhive.metastore.uri=hostname:port\niceberg.catalog.type=hive\n```\n\n----------------------------------------\n\nTITLE: Using merge_sfm with arrays of SfmSketch objects in SQL\nDESCRIPTION: Example of using merge_sfm to merge an array of SfmSketch objects and calculate distinct counts across multiple columns. Similar to merge_hll, this is a scalar function rather than an aggregator.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/noisy.rst.txt#2025-04-10_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSELECT cardinality(merge_sfm(ARRAY[\n    noisy_approx_set_sfm(col_1, 5.0),\n    noisy_approx_set_sfm(col_2, 5.0),\n    noisy_approx_set_sfm(col_3, 5.0)\n])) AS distinct_count_over_3_cols\nFROM my_table\n```\n\n----------------------------------------\n\nTITLE: Querying Iceberg Table References in Presto SQL\nDESCRIPTION: Shows how to query the $refs system table to get details about Iceberg references including branches and tags.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/iceberg.rst.txt#2025-04-10_snippet_23\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM \"ctas_nation$refs\";\n```\n\n----------------------------------------\n\nTITLE: Correlated Scalar Subquery Example in SQL\nDESCRIPTION: Example query showing a correlated scalar subquery that gets rewritten to an aggregation over an outer join. The query finds items where the current price is higher than the average price of items in the same category.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/admin/properties-session.rst#2025-04-10_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM item i\n    WHERE i.i_current_price > (\n        SELECT AVG(j.i_current_price) FROM item j\n            WHERE i.i_category = j.i_category);\n```\n\n----------------------------------------\n\nTITLE: Configuring Local File Connector in Presto\nDESCRIPTION: Basic configuration for the local file connector in Presto. This code creates a catalog properties file named 'localfile.properties' that enables the connector.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/localfile.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nconnector.name=localfile\n```\n\n----------------------------------------\n\nTITLE: SQL Query Results with Performance Metrics\nDESCRIPTION: Output of a SQL query showing aggregated sales data with return flags, line status, quantities, prices, discounts, and order counts. Query completed successfully processing 6M rows across 56 splits in 5 seconds.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/installation/deployment.rst.txt#2025-04-10_snippet_23\n\nLANGUAGE: sql\nCODE:\n```\nreturnflag | linestatus |   sum_qty   |    sum_base_price     |    sum_disc_price     |      sum_charge       |      avg_qty       |     avg_price     |       avg_disc       | count_order\n------------+------------+-------------+-----------------------+-----------------------+-----------------------+--------------------+-------------------+----------------------+-------------\nA          | F          | 3.7734107E7 |  5.658655440072982E10 | 5.3758257134869644E10 |  5.590906522282741E10 | 25.522005853257337 | 38273.12973462155 |  0.04998529583846928 |     1478493\nN          | F          |    991417.0 |  1.4875047103800006E9 |  1.4130821680540998E9 |   1.469649223194377E9 | 25.516471920522985 | 38284.46776084832 |  0.05009342667421586 |       38854\nN          | O          |  7.447604E7 | 1.1170172969773982E11 | 1.0611823030760503E11 | 1.1036704387249734E11 |  25.50222676958499 | 38249.11798890821 |   0.0499965860537345 |     2920374\nR          | F          | 3.7719753E7 |   5.65680413808999E10 |  5.374129268460365E10 |  5.588961911983193E10 |  25.50579361269077 | 38250.85462609959 | 0.050009405830198916 |     1478870\n(4 rows)\n\nQuery 20200625_171123_00000_xqmp4, FINISHED, 1 node\nSplits: 56 total, 56 done (100.00%)\n0:05 [6M rows, 0B] [1.1M rows/s, 0B/s]\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents for Presto Security Documentation in reStructuredText\nDESCRIPTION: This snippet creates a table of contents using reStructuredText syntax, listing various security-related topics for Presto documentation. It uses the 'toctree' directive with a maximum depth of 1 to create a flat list of links.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/security.rst#2025-04-10_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n    :maxdepth: 1\n\n    security/server\n    security/cli\n    security/ldap\n    security/password-file\n    security/tls\n    security/built-in-system-access-control\n    security/internal-communication\n    security/authorization\n```\n\n----------------------------------------\n\nTITLE: Configuring Aggregation-If-to-Filter Rewrite in Presto\nDESCRIPTION: Configuration property optimizer.aggregation-if-to-filter-rewrite-enabled is now disabled by default. This affects queries with the shape AGG(IF(condition, expr)) where expr could return exceptions for non-matching rows.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.261.rst#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\n-- Example query that might be affected:\nSELECT SUM(IF(column > 0, value)) FROM table_name;\n```\n\n----------------------------------------\n\nTITLE: Querying PostgreSQL Tables\nDESCRIPTION: Basic SELECT query example for retrieving data from a PostgreSQL table.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/postgresql.rst#2025-04-10_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM postgresql.public.test_integer;\n```\n\n----------------------------------------\n\nTITLE: DELETE with Simple WHERE Condition\nDESCRIPTION: Example showing how to delete records matching a specific condition using the shipmode column.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/delete.rst#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nDELETE FROM lineitem WHERE shipmode = 'AIR';\n```\n\n----------------------------------------\n\nTITLE: Setting Session Properties in JDBC Connection\nDESCRIPTION: Shows how to set session properties for a JDBC connection by unwrapping the Connection object to access the PrestoConnection class. This allows programmatic customization of query execution.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.78.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nconnection.unwrap(PrestoConnection.class).setSessionProperty(\"name\", \"value\");\n```\n\n----------------------------------------\n\nTITLE: Query Analysis Command\nDESCRIPTION: EXPLAIN ANALYZE command fix for occasional query failures.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.212.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nEXPLAIN ANALYZE\n```\n\n----------------------------------------\n\nTITLE: Creating a Table in Black Hole Connector Using Data from Another Table\nDESCRIPTION: Example SQL command to create a table in the Black Hole connector by copying the structure and data from an existing table in the tpch catalog.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/blackhole.rst#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE blackhole.test.nation AS\nSELECT * from tpch.tiny.nation;\n```\n\n----------------------------------------\n\nTITLE: Configuring Raptor Connector in Presto\nDESCRIPTION: This snippet shows how to configure the Raptor connector in Presto by creating a catalog properties file. It specifies the connector name, metadata database type, and filename.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.69.rst#2025-04-10_snippet_0\n\nLANGUAGE: none\nCODE:\n```\nconnector.name=raptor\nmetadata.db.type=h2\nmetadata.db.filename=var/data/db/MetaStore\n```\n\n----------------------------------------\n\nTITLE: Configuration Property Rename\nDESCRIPTION: Rename of thread configuration property from task.shard.max-threads to task.max-worker-threads for controlling concurrent split processing.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.100.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\ntask.max-worker-threads=<value>  # New property name\ntask.shard.max-threads=<value>   # Deprecated property name\n```\n\n----------------------------------------\n\nTITLE: SQL CREATE FUNCTION Syntax\nDESCRIPTION: Complete syntax definition for creating functions in Presto SQL, including all optional clauses and parameters.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/sql/create-function.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE [ OR REPLACE ] [TEMPORARY] FUNCTION\nqualified_function_name (\n  parameter_name parameter_type\n  [, ...]\n)\nRETURNS return_type\n[ COMMENT function_description ]\n[ LANGUAGE [ SQL | identifier] ]\n[ DETERMINISTIC | NOT DETERMINISTIC ]\n[ RETURNS NULL ON NULL INPUT | CALLED ON NULL INPUT ]\n[ RETURN expression | EXTERNAL [ NAME identifier ] ]\n```\n\n----------------------------------------\n\nTITLE: Limiting Buffer Count for Optimized Repartitioning in Presto\nDESCRIPTION: New configuration property to limit the total number of buffers per optimized repartitioning operator in Presto.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.235.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\ndriver.max-page-partitioning-buffer-count\n```\n\n----------------------------------------\n\nTITLE: Referencing Window Function Clause in RestructuredText\nDESCRIPTION: Shows the syntax for referring to the OVER clause used in window functions within restructuredtext documentation.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.105.rst#2025-04-10_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n``OVER``\n```\n\n----------------------------------------\n\nTITLE: Creating Warning Block in reStructuredText\nDESCRIPTION: Creates a warning block in reStructuredText to highlight a critical bug affecting startup when function namespace manager is enabled and Thrift is not configured. It references a pull request number.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.244.1.rst#2025-04-10_snippet_1\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. warning::\n    There is a bug causing failure at startup if function namespace manager is enabled and Thrift is not configured (:pr:`15501`).\n```\n\n----------------------------------------\n\nTITLE: Dropping a User-Defined Function in Presto SQL\nDESCRIPTION: Remove a user-defined function from Presto using the DROP FUNCTION statement.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.230.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nDROP FUNCTION\n```\n\n----------------------------------------\n\nTITLE: Using DISTINCT with Comparable Types in Presto SQL\nDESCRIPTION: References improved error messages when DISTINCT is applied to types that cannot be compared.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.86.rst#2025-04-10_snippet_6\n\nLANGUAGE: SQL\nCODE:\n```\nDISTINCT\n```\n\n----------------------------------------\n\nTITLE: Multiple Role Grant with Admin Option in Presto SQL\nDESCRIPTION: Advanced example demonstrating how to grant multiple roles to both a user and a role with administrative privileges.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/grant-roles.rst#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nGRANT bar, foo TO USER baz, ROLE qux WITH ADMIN OPTION;\n```\n\n----------------------------------------\n\nTITLE: Setting Parquet Writer Options in SQL\nDESCRIPTION: Sets the block size and page size for the Parquet writer using newly added session properties.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.213.rst#2025-04-10_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nSET SESSION parquet_writer_block_size = <value>\nSET SESSION parquet_writer_page_size = <value>\n```\n\n----------------------------------------\n\nTITLE: SQL json_extract Performance Improvement\nDESCRIPTION: Performance improvements for the json_extract function used for parsing JSON data.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.142.rst.txt#2025-04-10_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\njson_extract\n```\n\n----------------------------------------\n\nTITLE: Configuring Memory Connector in Presto\nDESCRIPTION: Configuration for the Memory connector is done by creating a catalog properties file. It specifies the connector name and the maximum data per node.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/memory.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: none\nCODE:\n```\nconnector.name=memory\nmemory.max-data-per-node=128MB\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Filter Factor in Presto SQL\nDESCRIPTION: Sets the session property to enable the use of a default filter factor for estimating the cost of filters in the optimizer's cost model.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.215.rst#2025-04-10_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nSET SESSION default_filter_factor_enabled = true;\n```\n\n----------------------------------------\n\nTITLE: Using word_stem Function in SQL\nDESCRIPTION: The word_stem function was added in this release. It's used for stemming words in text processing.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.194.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nword_stem()\n```\n\n----------------------------------------\n\nTITLE: Using INTERVAL Data Type with Aggregation Functions in Presto SQL\nDESCRIPTION: Added support for the INTERVAL data type in avg() and sum() aggregation functions, allowing calculation of average and total durations.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.175.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\navg(INTERVAL)\n```\n\nLANGUAGE: SQL\nCODE:\n```\nsum(INTERVAL)\n```\n\n----------------------------------------\n\nTITLE: Creating Function Namespace in MySQL for Presto\nDESCRIPTION: SQL query to insert a new function namespace into the MySQL table that stores function namespaces. This creates a namespace 'example.test' which can then be used to store user-defined functions.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/admin/function-namespace-managers.rst#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO example_function_namespaces (catalog_name, schema_name)\nVALUES('example', 'test');\n```\n\n----------------------------------------\n\nTITLE: Basic Oracle Schema Query in PrestoDB\nDESCRIPTION: SQL command to display all available schemas in the Oracle catalog.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/oracle.rst#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSHOW SCHEMAS FROM oracle;\n```\n\n----------------------------------------\n\nTITLE: Enabling S3 Instance Credentials in Hive Catalog Properties\nDESCRIPTION: Configuration setting to enable or disable the use of EC2 instance credentials for connecting to S3 in the Hive connector. This feature is enabled by default.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.101.rst#2025-04-10_snippet_0\n\nLANGUAGE: Properties\nCODE:\n```\nhive.s3.use-instance-credentials=false\n```\n\n----------------------------------------\n\nTITLE: Describing Table Structure in Presto SQL\nDESCRIPTION: SQL command to describe the structure of the 'customer' table in Presto, showing default columns for Kafka data.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/kafka-tutorial.rst#2025-04-10_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nDESCRIBE customer;\n```\n\n----------------------------------------\n\nTITLE: Raw Decoder Data Format and Type Mapping\nDESCRIPTION: Configuration table showing allowed dataFormat values for different Presto data types when using the raw decoder. Specifies how byte data is interpreted into Presto column types.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/kafka.rst#2025-04-10_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n===================================== =======================================\nPresto data type                      Allowed ``dataFormat`` values\n===================================== =======================================\n``BIGINT``                            ``BYTE``, ``SHORT``, ``INT``, ``LONG``\n``INTEGER``                           ``BYTE``, ``SHORT``, ``INT``\n``SMALLINT``                          ``BYTE``, ``SHORT``\n``TINYINT``                           ``BYTE``\n``DOUBLE``                            ``DOUBLE``, ``FLOAT``\n``BOOLEAN``                           ``BYTE``, ``SHORT``, ``INT``, ``LONG``\n``VARCHAR`` / ``VARCHAR(x)``          ``BYTE``\n===================================== =======================================\n```\n\n----------------------------------------\n\nTITLE: Renaming a View in Memory Connector in Presto\nDESCRIPTION: This SQL command alters the name of an existing view in the Memory connector.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/memory.rst.txt#2025-04-10_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nALTER VIEW memory.default.nation RENAME TO memory.default.new_nation;\n```\n\n----------------------------------------\n\nTITLE: Calculating Jaccard Index of Set Digests in SQL\nDESCRIPTION: This example demonstrates how to calculate the Jaccard index of two set digests using the jaccard_index function in Presto.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/setdigest.rst.txt#2025-04-10_snippet_7\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT jaccard_index(make_set_digest(v1), make_set_digest(v2))\nFROM (VALUES (1, 1), (NULL,2), (2, 3), (NULL, 4)) T(v1, v2);\n```\n\n----------------------------------------\n\nTITLE: Querying Row Count from TPCH Table\nDESCRIPTION: Example SQL query that retrieves the count of rows from the customer table in the sf1 schema of the TPCH connector. This demonstrates how to access data from a specific table and schema.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/tpch.rst#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT COUNT(*) FROM tpch.sf1.customer;\n```\n\n----------------------------------------\n\nTITLE: Implementing Scalar Function in Presto\nDESCRIPTION: Implementation of a simple is_null scalar function that checks if a VARCHAR argument is null. Uses @ScalarFunction, @Description, and @SqlType annotations.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/develop/functions.rst#2025-04-10_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic class ExampleNullFunction\n{\n    @ScalarFunction(\"is_null\", calledOnNullInput = true)\n    @Description(\"Returns TRUE if the argument is NULL\")\n    @SqlType(StandardTypes.BOOLEAN)\n    public static boolean isNull(@SqlNullable @SqlType(StandardTypes.VARCHAR) Slice string)\n    {\n        return (string == null);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Syntax for SHOW GRANTS Command in Presto SQL\nDESCRIPTION: Defines the syntax for the SHOW GRANTS command. It can be used with or without specifying a table name.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/show-grants.rst#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSHOW GRANTS [ ON [ TABLE ] table_name ]\n```\n\n----------------------------------------\n\nTITLE: Configuring File-Based System Access Control in Presto\nDESCRIPTION: This code snippet demonstrates how to configure the file-based system access control plugin in Presto by specifying the plugin name and the location of the JSON config file.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/security/built-in-system-access-control.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: none\nCODE:\n```\naccess-control.name=file\nsecurity.config-file=etc/rules.json\n```\n\n----------------------------------------\n\nTITLE: Querying Sheets Metadata in Presto\nDESCRIPTION: SQL command to retrieve metadata about all sheets in a mapped Lark spreadsheet using the special $sheets table.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/larksheets.rst.txt#2025-04-10_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM my_ss.\"$sheets\"\n```\n\n----------------------------------------\n\nTITLE: Referencing NullPointerException Bug Fix in Presto\nDESCRIPTION: Code reference showing the fixed NullPointerException issue that occurred during query teardown in Presto 0.65.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.65.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n``NullPointerException``\n```\n\n----------------------------------------\n\nTITLE: Presto QueryResults Structure\nDESCRIPTION: Table describing the key data members of the QueryResults object returned from query execution, including error handling, warnings, and execution statistics.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/develop/client-protocol.rst.txt#2025-04-10_snippet_5\n\nLANGUAGE: markup\nCODE:\n```\n========================== ============================ ================================================================================\nData Member                Type                         Notes\n========================== ============================ ================================================================================\n``queryError``             ``QueryError``               Non-null only if the query resulted in an error.  ``QueryResults.failureInfo``\n                                                        of type ``FailureInfo`` has detail on the reason for the failure, including a\n                                                        stack trace, and ``FailureInfo.errorLocation``, providing the query line\n                                                        number and column number where the failure was detected.\n``warnings``               ``List<PrestoWarning>``      A usually-empty list of warnings.\n``statementStats``         ``StatementStats``           A class containing statistics about the query execution.  Of particular\n                                                        interest is ``StatementStats.rootStage``, of type ``StageStats``, providing\n                                                        statistics on the execution of each of the stages of query processing.\n========================== ============================ ================================================================================\n```\n\n----------------------------------------\n\nTITLE: Using geometry_nearest_points in Presto\nDESCRIPTION: Returns the points on each geometry nearest the other. Returns an array of two Points that have the minimum distance of any two points on the geometries, with the first Point from the first Geometry argument and the second from the second Geometry argument.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/geospatial.rst#2025-04-10_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\ngeometry_nearest_points(Geometry, Geometry) -> array(Point)\n```\n\n----------------------------------------\n\nTITLE: Describing Table Columns in SQL Server via Presto\nDESCRIPTION: These SQL queries demonstrate how to view the columns of a specific table in the SQL Server catalog using Presto.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/sqlserver.rst#2025-04-10_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nDESCRIBE sqlserver.web.clicks;\nSHOW COLUMNS FROM sqlserver.web.clicks;\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Warning Directive for SORT/LIMIT Elimination Bug\nDESCRIPTION: Warning notification about a bug in Presto 0.248 where SORT or LIMIT operations are incorrectly eliminated when using GROUPING SETS (()), CUBE, or ROLLUP. The bug was first introduced in version 0.246 by PR #14915.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.248.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. warning::\n    There is a bug causing ``SORT`` or``LIMIT`` to be incorrectly eliminated when using ``GROUPING SETS (())`, ``CUBE`` or ``ROLLUP``,\n    first introduced in 0.246 by :pr:`14915`\n```\n\n----------------------------------------\n\nTITLE: Example SHOW CREATE TABLE Command in Presto SQL\nDESCRIPTION: An example showing how to use the SHOW CREATE TABLE command to display the create statement for the 'orders' table in the 'sf1' schema.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/show-create-table.rst#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSHOW CREATE TABLE sf1.orders;\n```\n\n----------------------------------------\n\nTITLE: Documenting General Properties in RST\nDESCRIPTION: Configuration documentation for general Presto properties including join distribution, write redistribution, and execution settings written in RST format\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/admin/properties-session.rst#2025-04-10_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n``join_distribution_type``\n^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* **Type:** ``string``\n* **Allowed values:** ``AUTOMATIC``, ``PARTITIONED``, ``BROADCAST``\n* **Default value:** ``AUTOMATIC``\n```\n\n----------------------------------------\n\nTITLE: Query Results from Presto-Accumulo Table\nDESCRIPTION: Output of the SELECT query showing the data inserted into the scientists table with Presto. This displays how data is retrieved from Accumulo in tabular format.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/accumulo.rst.txt#2025-04-10_snippet_10\n\nLANGUAGE: none\nCODE:\n```\n recordkey |     name     | age |  birthday\n-----------+--------------+-----+------------\n row1      | Grace Hopper | 109 | 1906-12-09\n row2      | Alan Turing  | 103 | 1912-06-23\n(2 rows)\n```\n\n----------------------------------------\n\nTITLE: Enabling Interpreter Fallback Configuration\nDESCRIPTION: Configuration property to enable fallback to interpreter when expressions fail to compile to bytecode. This allows certain queries to run slowly rather than failing completely.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.90.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\ncompiler.interpreter-enabled=true\n```\n\n----------------------------------------\n\nTITLE: Configuring Hive Security Settings in Presto\nDESCRIPTION: This snippet shows how to enable Hive security checks in Presto by setting the 'hive.security' property. The available options are 'none', 'read-only', or 'sql-standard'.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.118.rst#2025-04-10_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nhive.security = none\n```\n\nLANGUAGE: SQL\nCODE:\n```\nhive.security = read-only\n```\n\nLANGUAGE: SQL\nCODE:\n```\nhive.security = sql-standard\n```\n\n----------------------------------------\n\nTITLE: Type Casting in Presto SQL\nDESCRIPTION: Demonstrates the standard types supported for CAST operations in Presto, emphasizing the use of VARCHAR instead of STRING.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/migration/from-hive.rst.txt#2025-04-10_snippet_6\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT\n  CAST(x AS varchar)\n, CAST(x AS bigint)\n, CAST(x AS double)\n, CAST(x AS boolean)\nFROM ...\n```\n\n----------------------------------------\n\nTITLE: SQL UNION Column Ordering in INSERT Queries\nDESCRIPTION: Fix for a planning bug when the output columns of UNION don't match the table column order in INSERT queries.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.142.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nUNION\n```\n\n----------------------------------------\n\nTITLE: Implementing NodeManager in Presto Plugin\nDESCRIPTION: This Java code snippet demonstrates how to implement the NodeManager interface in a Presto plugin. It allows a plugin to detect all nodes in the Presto cluster, which is useful for connectors that need to distribute data evenly across nodes.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.60.rst#2025-04-10_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n@Inject\npublic void setNodeManager(NodeManager nodeManager)\n{\n    this.nodeManager = nodeManager;\n}\n```\n\n----------------------------------------\n\nTITLE: Examples of Resetting Session Properties in Presto SQL\nDESCRIPTION: Provides examples of resetting session properties in Presto SQL. The first example resets a general session property, while the second resets a Hive-specific property.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/sql/reset-session.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nRESET SESSION optimize_hash_generation;\nRESET SESSION hive.optimized_reader_enabled;\n```\n\n----------------------------------------\n\nTITLE: Setting HTTP Timeout Threads in Presto\nDESCRIPTION: Configures the number of threads used to handle timeouts when generating HTTP responses. Increase if all threads are frequently in use.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/admin/properties.rst#2025-04-10_snippet_30\n\nLANGUAGE: properties\nCODE:\n```\ntask.http-timeout-threads=3\n```\n\n----------------------------------------\n\nTITLE: HBO Configuration Properties\nDESCRIPTION: Configuration properties for controlling History Based Optimizations in Presto, including settings for enabling statistics usage, tracking, timeouts, and matching thresholds.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/optimizer/history-based-optimization.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\noptimizer.use-history-based-plan-statistics=False\noptimizer.track-history-based-plan-statistics=False\noptimizer.track-history-stats-from-failed-queries=True\noptimizer.history-based-optimizer-timeout=10 seconds\noptimizer.enforce-timeout-for-hbo-query-registration=False\noptimizer.treat-low-confidence-zero-estimation-as-unknown=False\noptimizer.confidence-based-broadcast=False\noptimizer.retry-query-with-history-based-optimization=False\nhbo.history-matching-threshold=0.1\nhbo.max-last-runs-history=10\n```\n\n----------------------------------------\n\nTITLE: Configuring HBO Properties in Presto\nDESCRIPTION: Table of configuration properties for History-Based Optimizations in Presto, including property names, descriptions, and default values. These properties control the use and tracking of historical statistics for query optimization.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/optimizer/history-based-optimization.rst#2025-04-10_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n============================================================= =========================================================================================================================== ===================================\nConfiguration Property Name                                   Description                                                                                                                 Default value\n============================================================= =========================================================================================================================== ===================================\n``optimizer.use-history-based-plan-statistics``               Use historical statistics for query optimization.                                                                           ``False``\n``optimizer.track-history-based-plan-statistics``             Recording the statistics of the current query as history statistics so as to be used by future queries.                     ``False``\n``optimizer.track-history-stats-from-failed-queries``         Track history based plan statistics from complete plan fragments in failed queries.                                         ``True``\n``optimizer.history-based-optimizer-timeout``                 Timeout for history based optimizer.                                                                                        ``10 seconds``\n``optimizer.enforce-timeout-for-hbo-query-registration``      Enforce timeout for query registration in HBO optimizer                                                                     ``False``\n``optimizer.treat-low-confidence-zero-estimation-as-unknown`` Treat ``LOW`` confidence, zero estimations as ``UNKNOWN`` during joins.                                                     ``False``\n``optimizer.confidence-based-broadcast``                      Broadcast based on the confidence of the statistics that are being used, by broadcasting the side of a joinNode which       ``False``\n                                                              has the highest confidence statistics. If confidence is the same, then the original behavior will be followed.\n``optimizer.retry-query-with-history-based-optimization``     Retry a failed query automatically if HBO can help change the existing query plan                                           ``False``\n``hbo.history-matching-threshold``                            When the size difference between current table and history table exceeds this threshold, do not match history statistics.   ``0.1``\n                                                              When value is 0.0, only match history statistics when the size of the two are exactly the same.\n``hbo.max-last-runs-history``                                 Number of last runs for which historical stats are stored.                                                                  ``10``\n============================================================= =========================================================================================================================== ===================================\n```\n\n----------------------------------------\n\nTITLE: SQL IN and OR Clauses with ORC\nDESCRIPTION: SQL clauses that received performance improvements when reading ORC data, controlled by the hive.domain-compaction-threshold configuration property.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.112.rst#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nIN\nOR\n```\n\n----------------------------------------\n\nTITLE: Using approx_distinct Function with Custom Error Range\nDESCRIPTION: The approx_distinct function now supports standard error values between 0.0040625 and 0.26000, allowing for more flexible precision control.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.190.rst.txt#2025-04-10_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\napprox_distinct\n```\n\n----------------------------------------\n\nTITLE: Creating a Table with String Serializer in Presto SQL\nDESCRIPTION: This SQL snippet demonstrates creating a table similar to the previous example, but using the 'string' serializer instead of the default 'lexicoder'. It defines a 'stringy_scientists' table with the same structure as the previous 'scientists' table.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/accumulo.rst.txt#2025-04-10_snippet_25\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE myschema.stringy_scientists (\n  recordkey VARCHAR,\n  name VARCHAR,\n  age BIGINT,\n  birthday DATE\n)\nWITH (\n  column_mapping = 'name:metadata:name,age:metadata:age,birthday:metadata:date',\n  serializer = 'string'\n);\n```\n\n----------------------------------------\n\nTITLE: New SQL Functions Introduction\nDESCRIPTION: New functions added in this release for hash computation and big-endian conversion.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.162.rst#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nxxhash64\nto_big_endian_64\n```\n\n----------------------------------------\n\nTITLE: Using Cross Joins in Presto 0.56\nDESCRIPTION: Demonstrates the ANSI SQL syntax for cross joins in Presto. Cross joins produce a Cartesian product between two tables, combining each row from the first table with every row from the second table.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.56.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT *\nFROM a\nCROSS JOIN b\n```\n\n----------------------------------------\n\nTITLE: Installing Presto-Accumulo Iterator JAR on TabletServer Nodes\nDESCRIPTION: Shell commands for installing the required Presto-Accumulo JAR file to Accumulo's lib/ext directory on each TabletServer node. This is necessary for enabling predicate pushdown functionality.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/accumulo.rst#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# For each TabletServer node:\nscp $PRESTO_HOME/plugins/accumulo/presto-accumulo-*.jar [tabletserver_address]:$ACCUMULO_HOME/lib/ext\n\n# TabletServer should pick up new JAR files in ext directory, but may require restart\n```\n\n----------------------------------------\n\nTITLE: SQL Function References in Presto 0.176\nDESCRIPTION: New and improved SQL functions mentioned in the release notes, including transform_values and parse_duration functions, along with JSON to REAL type casting support.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.176.rst#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\ntransform_values()\nparse_duration()\nCAST(json_value AS REAL)\n```\n\n----------------------------------------\n\nTITLE: Adding Redis Connector in Presto SQL\nDESCRIPTION: Introduces a new Redis connector for Presto, allowing integration with Redis databases.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.119.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nAdd :doc:`/connector/redis`\n```\n\n----------------------------------------\n\nTITLE: Configuring Refresh Period for File-Based System Access Control in Presto\nDESCRIPTION: This snippet shows how to set up automatic refresh for the access control configuration without requiring a Presto restart, using the security.refresh-period property.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/security/built-in-system-access-control.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: none\nCODE:\n```\nsecurity.refresh-period=1s\n```\n\n----------------------------------------\n\nTITLE: Creating Schema Mapping in Presto SQL\nDESCRIPTION: SQL command to create a schema mapping between Presto and a Lark spreadsheet using the spreadsheet token.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/larksheets.rst#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nCREATE SCHEMA my_ss WITH (TOKEN = 'shtcnBf5pg4BNSkwV2Ku5xwW9Pf')\n```\n\n----------------------------------------\n\nTITLE: Using try_cast with TIMESTAMP in Presto SQL\nDESCRIPTION: Demonstrates the fixed try_cast function usage with TIMESTAMP type that now properly accesses session information.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.96.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\ntry_cast(value AS TIMESTAMP)\n```\n\n----------------------------------------\n\nTITLE: SQL Function Reference\nDESCRIPTION: Reference to substr function which was extended to support VARBINARY type in addition to CHAR and VARCHAR.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.185.rst#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nsubstr\n```\n\n----------------------------------------\n\nTITLE: Configuring Hive Text File Line Length Limit in Presto SQL\nDESCRIPTION: Sets the maximum line length for text files in the Hive connector. The default limit is 100MB, which can be adjusted using the 'hive.text.max-line-length' configuration property.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.212.rst#2025-04-10_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSET SESSION hive.text.max-line-length = 200000000;\n```\n\n----------------------------------------\n\nTITLE: SQL IN and OR Clauses with ORC\nDESCRIPTION: SQL clauses that received performance improvements when reading ORC data, controlled by the hive.domain-compaction-threshold configuration property.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.112.rst#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nIN\nOR\n```\n\n----------------------------------------\n\nTITLE: Using noisy_count_if_gaussian in SQL Queries\nDESCRIPTION: Examples of using noisy_count_if_gaussian to count TRUE values with added Gaussian noise. The function adds normally distributed random noise with 0 mean and standard deviation of noise_scale to the true count, returning a non-negative rounded bigint value.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/noisy.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT noisy_count_if_gaussian(orderkey > 10000, 20.0) FROM tpch.tiny.lineitem; -- 50180 (1 row)\nSELECT noisy_count_if_gaussian(orderkey > 10000, 20.0) FROM tpch.tiny.lineitem WHERE false; -- NULL (1 row)\n```\n\n----------------------------------------\n\nTITLE: Dropping a Delta Lake Table\nDESCRIPTION: SQL command to drop a Delta Lake table from the Hive metastore. This only removes the metadata registration and does not delete the underlying data.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/deltalake.rst.txt#2025-04-10_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nDROP TABLE sales.apac.sales_data_new;\n```\n\n----------------------------------------\n\nTITLE: Defining Types in Presto\nDESCRIPTION: Code references demonstrating core Presto type interfaces and implementations. Includes VarcharType, BigintType, and ParametricType interfaces that are used to implement SQL types. Types can be extended through plugins by implementing these interfaces.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/develop/types.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nType            // Base interface for implementing SQL types\nVarcharType      // Implementation of VARCHAR type\nBigintType      // Implementation of BIGINT type\nParametricType  // Interface for parameterized types like VARCHAR(10)\ngetTypes()      // Plugin method to provide new Type objects\ngetParametricTypes()  // Plugin method to provide new ParametricType objects\n```\n\n----------------------------------------\n\nTITLE: Querying Iceberg Table Changelog SQL\nDESCRIPTION: SQL query to view changes made to an Iceberg table since creation using a specific snapshot ID. Returns operations performed on the table with associated metadata.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/iceberg.rst#2025-04-10_snippet_20\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM \"ctas_orders@2423571386296047175$changelog\" ORDER BY ordinal;\n```\n\n----------------------------------------\n\nTITLE: Hamming Distance Function in SQL\nDESCRIPTION: Introduces a new function to calculate the Hamming distance between two values.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.184.rst#2025-04-10_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nhamming_distance\n```\n\n----------------------------------------\n\nTITLE: Querying Oracle Tables in PrestoDB\nDESCRIPTION: SQL command to list all tables in a specific Oracle database schema.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/oracle.rst#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSHOW TABLES FROM oracle.web;\n```\n\n----------------------------------------\n\nTITLE: Creating Weighted QDigest in Presto\nDESCRIPTION: Aggregate function that creates a qdigest from input values with specified weights. This allows creating a weighted distribution for more accurate representation of the data.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/qdigest.rst#2025-04-10_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nqdigest_agg(x, w) -> qdigest<[same as x]>\n```\n\n----------------------------------------\n\nTITLE: Using least and greatest functions with variable arguments in SQL\nDESCRIPTION: The least() and greatest() functions now support a variable number of arguments. These functions return the smallest or largest value among all the provided arguments.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.88.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nleast()\n```\n\nLANGUAGE: sql\nCODE:\n```\ngreatest()\n```\n\n----------------------------------------\n\nTITLE: Hive Configuration Properties\nDESCRIPTION: New configuration properties for Hive connector including text file line length limits and statistics handling.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.212.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nhive.text.max-line-length\nhive.ignore-corrupted-statistics\nignore_corrupted_statistics\n```\n\n----------------------------------------\n\nTITLE: DESCRIBE Command Syntax in Presto SQL\nDESCRIPTION: Shows the syntax for using the DESCRIBE command in Presto SQL. This command is used to display column information for a specified table and is an alias for the SHOW COLUMNS command.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/describe.rst#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nDESCRIBE table_name\n```\n\n----------------------------------------\n\nTITLE: Configuring Hive Storage Format in Presto 0.74\nDESCRIPTION: Set the storage format for writing data to Hive using the hive.storage-format option in the Hive catalog properties file. Valid options include RCBINARY (default), RCTEXT, SEQUENCEFILE, and TEXTFILE.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.74.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\nhive.storage-format=RCBINARY\n```\n\n----------------------------------------\n\nTITLE: Defining LongAndDoubleState Interface for Presto Aggregation\nDESCRIPTION: Interface definition for LongAndDoubleState that extends AccumulatorState. It provides methods to get and set both long and double values used for tracking count and sum in aggregation functions.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/develop/functions.rst#2025-04-10_snippet_8\n\nLANGUAGE: java\nCODE:\n```\npublic interface LongAndDoubleState\n        extends AccumulatorState\n{\n    long getLong();\n\n    void setLong(long value);\n\n    double getDouble();\n\n    void setDouble(double value);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Iceberg Parquet Metadata Cache TTL in Presto\nDESCRIPTION: Sets the time-to-live for the Iceberg Parquet metadata cache since last access.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/iceberg.rst.txt#2025-04-10_snippet_10\n\nLANGUAGE: properties\nCODE:\n```\niceberg.parquet.metadata-cache-ttl-since-last-access=6h\n```\n\n----------------------------------------\n\nTITLE: Querying PostgreSQL Tables\nDESCRIPTION: Example of selecting all data from a PostgreSQL table.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/postgresql.rst.txt#2025-04-10_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM postgresql.public.test_integer;\n```\n\n----------------------------------------\n\nTITLE: SQL Function References\nDESCRIPTION: SQL function names referenced in the release notes that received updates or fixes.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.169.rst#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nJOIN\ncurrent_date\ncurrent_time\nextract\nlevenshtein_distance\nmap_agg\nmultimap_agg\n```\n\n----------------------------------------\n\nTITLE: Configuring Presto Server Properties\nDESCRIPTION: Configuration file for Presto server. It sets up the server as a coordinator, includes it in scheduling, sets the HTTP port, and enables discovery.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/installation/deploy-docker.rst#2025-04-10_snippet_5\n\nLANGUAGE: properties\nCODE:\n```\ncoordinator=true\nnode-scheduler.include-coordinator=true\nhttp-server.http.port=8080\ndiscovery-server.enabled=true\ndiscovery.uri=http://localhost:8080\n```\n\n----------------------------------------\n\nTITLE: Configuration Setting in Presto 0.133\nDESCRIPTION: Configuration setting mentioned in relation to array concatenation functionality.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.133.rst#2025-04-10_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\ncolumnar_processing_dictionary\n```\n\n----------------------------------------\n\nTITLE: Documenting Presto Release 0.242.1 in reStructuredText\nDESCRIPTION: This snippet defines the release version and includes a warning about a startup failure bug when the function namespace manager is enabled and Thrift is not configured.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.242.1.rst#2025-04-10_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n===============\nRelease 0.242.1\n===============\n\n.. warning::\n    There is a bug causing failure at startup if function namespace manager is enabled and Thrift is not configured (:pr:`15501`).\n```\n\n----------------------------------------\n\nTITLE: Inserting Data into PostgreSQL Tables\nDESCRIPTION: Example of inserting data into a PostgreSQL table.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/postgresql.rst.txt#2025-04-10_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO postgresql.public.renamed_table (id, name) VALUES (1, 'Test');\n```\n\n----------------------------------------\n\nTITLE: FROM Clause Syntax in Presto SQL\nDESCRIPTION: Syntax for the FROM clause in Presto SQL, showing table specification with optional alias and column aliases.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/sql/select.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\ntable_name [ [ AS ] alias [ ( column_alias [, ...] ) ] ]\n```\n\n----------------------------------------\n\nTITLE: Displaying Query Plan with History-Based Optimization Statistics in Presto\nDESCRIPTION: Example query plan output showing how HBO statistics appear in a Presto query execution plan. The plan shows a Fragment with Project, Aggregate, LocalExchange, and RemoteSource nodes where statistics are sourced from 'HistoryBasedSourceInfo'.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/optimizer/history-based-optimization.rst#2025-04-10_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n         Fragment 1 [HASH]                                                                                                                                            >\n             Output layout: [orderpriority, count]                                                                                                                    >\n             Output partitioning: SINGLE []                                                                                                                           >\n             Stage Execution Strategy: UNGROUPED_EXECUTION                                                                                                            >\n             - Project[PlanNodeId 392][projectLocality = LOCAL] => [orderpriority:varchar(15), count:bigint]                                                          >\n                     Estimates: {source: HistoryBasedSourceInfo, rows: 5 (117B), cpu: ?, memory: ?, network: ?}                                                       >\n                 - Aggregate(FINAL)[orderpriority][$hashvalue][PlanNodeId 4] => [orderpriority:varchar(15), $hashvalue:bigint, count:bigint]                          >\n                         Estimates: {source: HistoryBasedSourceInfo, rows: 5 (117B), cpu: ?, memory: ?, network: ?}                                                   >\n                         count := \"presto.default.count\"((count_8)) (1:50)                                                                                            >\n                     - LocalExchange[PlanNodeId 354][HASH][$hashvalue] (orderpriority) => [orderpriority:varchar(15), count_8:bigint, $hashvalue:bigint]              >\n                         - RemoteSource[2] => [orderpriority:varchar(15), count_8:bigint, $hashvalue_9:bigint]\n```\n\n----------------------------------------\n\nTITLE: Displaying Table Statistics in SQL\nDESCRIPTION: Fixes the display of table statistics when using the SHOW STATS FOR command. This improvement enhances the visibility of table metadata in TPCDS.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.184.rst.txt#2025-04-10_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\nSHOW STATS FOR ...\n```\n\n----------------------------------------\n\nTITLE: Invalidating Directory List Cache via JMX in Presto Hive Connector\nDESCRIPTION: The Hive connector exposes a JMX procedure to invalidate the directory list cache. This is useful when files are added or deleted in the cache directory path and you want the changes to be immediately visible to Presto.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/hive.rst.txt#2025-04-10_snippet_13\n\nLANGUAGE: jmx\nCODE:\n```\ncom.facebook.presto.hive.HiveDirectoryLister#flushCache\n```\n\n----------------------------------------\n\nTITLE: SQL Function Reference - PREPARE Statement Update\nDESCRIPTION: Added support for lambda expressions in PREPARE statements, which extends query preparation capabilities.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.256.rst#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nPREPARE\n```\n\n----------------------------------------\n\nTITLE: Configuring Grouped Execution in Presto SQL\nDESCRIPTION: Sets the new unified grouped execution configuration property and session property to enable grouped execution by default. This replaces the previous join-specific property.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.239.rst#2025-04-10_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSET SESSION grouped_execution = true;\n```\n\n----------------------------------------\n\nTITLE: Warning Notice in RST Format\nDESCRIPTION: A reStructuredText warning directive indicating that Presto release 0.120 is broken and should not be used.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.120.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n=============\nRelease 0.120\n=============\n.. warning::\n\n   This release is broken and should not be used.\n```\n\n----------------------------------------\n\nTITLE: Grouping Sets, Cube, and Rollup Operations in SQL\nDESCRIPTION: Enhanced parallelism for queries involving GROUPING SETS, CUBE, or ROLLUP operations. This improvement allows for better utilization of system resources and faster query execution.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.174.rst#2025-04-10_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT department, country, SUM(sales) FROM sales_data GROUP BY GROUPING SETS ((department, country), (department), (country), ())\n```\n\n----------------------------------------\n\nTITLE: SQL CASE Expression Optimization\nDESCRIPTION: References the optimization of CASE expressions when evaluated on a constant value, improving query performance.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.111.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nCASE constant_value\n  WHEN value1 THEN result1\n  WHEN value2 THEN result2\n  ELSE default_result\nEND\n```\n\n----------------------------------------\n\nTITLE: Configuring Hive Metastore with NONE Authentication in Presto\nDESCRIPTION: Example configuration for connecting to an unsecured Hive metastore without Kerberos authentication. This is the default configuration where authentication type is set to NONE.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/hive-security.rst#2025-04-10_snippet_0\n\nLANGUAGE: none\nCODE:\n```\nhive.metastore.authentication.type=NONE\n```\n\n----------------------------------------\n\nTITLE: SQL JOIN Criteria Optimization Fix\nDESCRIPTION: Fix for a planning bug related to JOIN criteria that optimizes to a FALSE expression.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.142.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nJOIN\n```\n\n----------------------------------------\n\nTITLE: Describing Presto-Accumulo Table Structure\nDESCRIPTION: SQL command to describe the structure of the created scientists table, showing how Presto columns map to Accumulo row ID and column families/qualifiers with auto-generated naming.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/accumulo.rst.txt#2025-04-10_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nDESCRIBE myschema.scientists;\n```\n\n----------------------------------------\n\nTITLE: SQL Keyword Change\nDESCRIPTION: Makes 'AT' a non-reserved keyword in Presto SQL, allowing it to be used as an identifier.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.165.rst#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nAT\n```\n\n----------------------------------------\n\nTITLE: Basic Elasticsearch Connector Configuration\nDESCRIPTION: Essential configuration properties for setting up the Elasticsearch connector in Presto\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/elasticsearch.rst#2025-04-10_snippet_0\n\nLANGUAGE: none\nCODE:\n```\nconnector.name=elasticsearch\nelasticsearch.host=localhost\nelasticsearch.port=9200\nelasticsearch.default-schema-name=default\n```\n\n----------------------------------------\n\nTITLE: Experimental Reserved Pool Configuration in SQL\nDESCRIPTION: Configuration option to control reserved memory pool functionality.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.213.rst.txt#2025-04-10_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nexperimental.reserved-pool-enabled\n```\n\n----------------------------------------\n\nTITLE: SQL IN Predicate Subquery\nDESCRIPTION: Demonstration of IN predicate with uncorrelated subqueries that were fixed in the planning phase.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.154.rst#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nIN\n```\n\n----------------------------------------\n\nTITLE: Using merge with SfmSketch in SQL\nDESCRIPTION: Example showing how to merge SfmSketch objects and calculate annual distinct counts from monthly sketches.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/noisy.rst#2025-04-10_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSELECT year, cardinality(merge(sketch)) AS annual_distinct_count\nFROM monthly_sketches\nGROUP BY 1\n```\n\n----------------------------------------\n\nTITLE: Querying Raw Messages from Kafka Table in Presto SQL\nDESCRIPTION: SQL query to select the raw message content from the 'customer' table, limited to 5 rows.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/kafka-tutorial.rst.txt#2025-04-10_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nSELECT _message FROM customer LIMIT 5;\n```\n\n----------------------------------------\n\nTITLE: Retrieving Additional Query Results with GET Request\nDESCRIPTION: When the initial query response contains a nextUri, use this URI in a GET request to retrieve the next batch of results. Continue making GET requests until nextUri is no longer present in the response.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/develop/client-protocol.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: HTTP\nCODE:\n```\nGET /v1/statement/20140120_032523_00000_32v8g/2 HTTP/1.1\nX-Presto-User: username\n```\n\n----------------------------------------\n\nTITLE: Adding a Column with Partitioning in Iceberg Tables using Presto SQL\nDESCRIPTION: Demonstrates how to add a new column to an Iceberg table, optionally specifying a partitioning transform function for the new column.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.285.rst#2025-04-10_snippet_5\n\nLANGUAGE: SQL\nCODE:\n```\nALTER TABLE <table> ADD COLUMN <column> [WITH (partitioning = '<transform_func>')];\n```\n\n----------------------------------------\n\nTITLE: Setting Default View Security Mode in PrestoDB\nDESCRIPTION: Session property to choose the default security mode when creating views.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.287.rst.txt#2025-04-10_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nSET SESSION default-view-security-mode = 'DEFINER';\n```\n\n----------------------------------------\n\nTITLE: Showing Table Properties in Kudu Connector\nDESCRIPTION: Illustrates the addition of the 'number_of_replicas' table property in the output of SHOW CREATE TABLE for Kudu connector.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.216.rst#2025-04-10_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nSHOW CREATE TABLE kudu_table;\n```\n\n----------------------------------------\n\nTITLE: Listing PostgreSQL Tables\nDESCRIPTION: Command to show tables in a specific PostgreSQL schema.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/postgresql.rst.txt#2025-04-10_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nSHOW TABLES FROM postgresql.web;\n```\n\n----------------------------------------\n\nTITLE: Enabling Left Join to Semi Join Optimization in Presto SQL\nDESCRIPTION: Sets the rewrite_left_join_null_filter_to_semi_join session property to enable optimization that rewrites left join with null check on right join key to semi join.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.282.rst#2025-04-10_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nSET SESSION rewrite_left_join_null_filter_to_semi_join = true;\n```\n\n----------------------------------------\n\nTITLE: Configuring S3 File System Type for Hive\nDESCRIPTION: The hive.s3-file-system-type configuration property allows users to switch Hadoop file system implementations for S3 addresses.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.227.rst#2025-04-10_snippet_7\n\nLANGUAGE: text\nCODE:\n```\nhive.s3-file-system-type=HADOOP_DEFAULT\n```\n\n----------------------------------------\n\nTITLE: Determining value at a quantile with KLL sketch in Presto\nDESCRIPTION: Computes the value in the KLL sketch that occurs at a particular quantile. Includes optional inclusivity parameter to control whether to return values strictly less than or less than/equal to the quantile.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/sketch.rst#2025-04-10_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nsketch_kll_quantile[T](sketch: kllsketch[T], rank: double[, inclusivity: boolean]) -> T\n```\n\n----------------------------------------\n\nTITLE: Querying Cassandra Schema Information\nDESCRIPTION: Illustrates a query on the information_schema.columns table in Cassandra, which previously failed without an equality predicate on table_name.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.194.rst#2025-04-10_snippet_6\n\nLANGUAGE: SQL\nCODE:\n```\ninformation_schema.columns\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents for SQL Language Documentation in reStructuredText\nDESCRIPTION: This snippet creates a table of contents structure using reStructuredText syntax. It sets up links to two subpages: 'types' and 'reserved' under the 'language' directory.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/language.rst#2025-04-10_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n    :maxdepth: 1\n\n    language/types\n    language/reserved\n```\n\n----------------------------------------\n\nTITLE: Enabling HTTP Request Logging in Presto\nDESCRIPTION: Configuration settings to enable HTTP request logging in Presto's config.properties file. This helps diagnose protocol-related issues by logging HTTP requests.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/develop/worker-protocol.rst#2025-04-10_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nhttp-server.log.enabled=true\nhttp-server.log.path=<request_log_file_path>\n```\n\n----------------------------------------\n\nTITLE: Listing PostgreSQL Schemas\nDESCRIPTION: Command to show available PostgreSQL schemas.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/postgresql.rst.txt#2025-04-10_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nSHOW SCHEMAS FROM postgresql;\n```\n\n----------------------------------------\n\nTITLE: Installing Presto-Accumulo Iterator Dependency on TabletServer Nodes\nDESCRIPTION: Bash commands to install the presto-accumulo JAR file to Accumulo's lib/ext directory on each TabletServer node, enabling predicate pushdown functionality. Note that Java 8 is required.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/accumulo.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# For each TabletServer node:\nscp $PRESTO_HOME/plugins/accumulo/presto-accumulo-*.jar [tabletserver_address]:$ACCUMULO_HOME/lib/ext\n\n# TabletServer should pick up new JAR files in ext directory, but may require restart\n```\n\n----------------------------------------\n\nTITLE: Enabling Alluxio Cache in Presto Hive Connector\nDESCRIPTION: Configuration example for enabling local data caching with Alluxio in the Hive connector. This requires setting two configuration properties: cache.enabled to true and cache.type to ALLUXIO.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.236.rst#2025-04-10_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\ncache.enabled=true\ncache.type=ALLUXIO\n```\n\n----------------------------------------\n\nTITLE: Referencing element_at Function with MAP Type in RST\nDESCRIPTION: RST documentation syntax showing a fix for element_at function performance with MAP type, using restructured text formatting.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.253.1.rst#2025-04-10_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n:func:`!element_at`\n```\n\n----------------------------------------\n\nTITLE: Restarting Presto Service (Bash)\nDESCRIPTION: This command restarts the Presto service after configuration changes or adding the Alluxio client jar.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/cache/service.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ ${PRESTO_HOME}/bin/launcher restart\n```\n\n----------------------------------------\n\nTITLE: SQL Functions and Operations Reference\nDESCRIPTION: SQL functions and operations mentioned in the release notes including DISTINCT, JOIN, LIMIT, FILTER, min_by, max_by, array_join, and VALIDATE mode for EXPLAIN.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.164.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nDISTINCT\nJOIN\nLIMIT\nFILTER\nmin_by\nmax_by\narray_join\nVALIDATE\n```\n\n----------------------------------------\n\nTITLE: Connecting to Presto CLI in Bash\nDESCRIPTION: Command to start the Presto CLI, specifying the Kafka catalog and TPC-H schema.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/kafka-tutorial.rst#2025-04-10_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ ./presto --catalog kafka --schema tpch\n```\n\n----------------------------------------\n\nTITLE: Raw Block Input Example in Java\nDESCRIPTION: Example of using @BlockPosition and @BlockIndex annotations to handle raw block inputs in scalar functions, particularly for array types.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/develop/functions.rst.txt#2025-04-10_snippet_9\n\nLANGUAGE: java\nCODE:\n```\n@ScalarFunction(\"example\")\npublic static Block exampleFunction(\n        @BlockPosition @NullablePosition @SqlType(\"array(int)\") Block block,\n        @BlockIndex int index) { /* ...implementation */ }\n```\n\n----------------------------------------\n\nTITLE: SQL Unixtime Function\nDESCRIPTION: Reference to enhanced from_unixtime function that accepts a timezone parameter.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.156.rst.txt#2025-04-10_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nfrom_unixtime\n```\n\n----------------------------------------\n\nTITLE: SQL Window Function Ordering Example\nDESCRIPTION: Example showing incorrect ordering scenario in window function ORDER BY clause that was fixed in this release.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.185.rst#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nOVER (ORDER BY x ASC, x DESC)\n```\n\n----------------------------------------\n\nTITLE: Querying Indexed Data\nDESCRIPTION: Demonstrates querying the table using an indexed column in the WHERE clause.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/accumulo.rst#2025-04-10_snippet_17\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM myschema.scientists WHERE age = 109;\n```\n\n----------------------------------------\n\nTITLE: Configuring FQDN Source for Internal Communication in Presto\nDESCRIPTION: Setting to configure Presto nodes to use fully qualified domain names (FQDN) from system configuration for internal communication.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/security/internal-communication.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: none\nCODE:\n```\nnode.internal-address-source=FQDN\n```\n\n----------------------------------------\n\nTITLE: Querying Table Partitions\nDESCRIPTION: Query to retrieve detailed partition information from the hidden $partitions metadata table.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/iceberg.rst#2025-04-10_snippet_17\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM \"ctas_nation$partitions\";\n```\n\n----------------------------------------\n\nTITLE: Preparing Query without Parameters\nDESCRIPTION: Example of preparing a SELECT statement that doesn't use any parameters.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/sql/describe-input.rst.txt#2025-04-10_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nPREPARE my_select2 FROM\nSELECT * FROM nation;\n```\n\n----------------------------------------\n\nTITLE: SQL Analysis Command Reference\nDESCRIPTION: Reference to EXPLAIN ANALYZE command output that now includes input and hash collision statistics.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.165.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nEXPLAIN ANALYZE\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents for Presto Security Documentation in reStructuredText\nDESCRIPTION: This snippet defines a table of contents using reStructuredText syntax. It includes various security-related topics for Presto, with each item linking to a separate documentation file.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/security.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n    :maxdepth: 1\n\n    security/server\n    security/cli\n    security/ldap\n    security/password-file\n    security/tls\n    security/built-in-system-access-control\n    security/internal-communication\n    security/authorization\n```\n\n----------------------------------------\n\nTITLE: Sample Data for TRY Function Examples in Presto SQL\nDESCRIPTION: Creates a shipping table with sample data including some invalid entries to demonstrate error handling with the TRY function.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/conditional.rst.txt#2025-04-10_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM shipping;\n```\n\n----------------------------------------\n\nTITLE: Creating MongoDB Catalog Configuration\nDESCRIPTION: Command to create catalog configuration file for MongoDB\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/mongodb.rst.txt#2025-04-10_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ntouch etc/catalog/mongodb.properties\n```\n\n----------------------------------------\n\nTITLE: Using Wildcard in JMX Queries\nDESCRIPTION: Addition of wildcard character '*' for querying multiple MBeans with a single query in JMX.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.198.rst#2025-04-10_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\n*\n```\n\n----------------------------------------\n\nTITLE: New Presto Configuration Property\nDESCRIPTION: Configuration property to set the maximum number of unacknowledged source splits per task. Can be set via session property or node-scheduler configuration.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.250.rst#2025-04-10_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nmax_unacknowledged_splits_per_task\n```\n\n----------------------------------------\n\nTITLE: Using IS DISTINCT FROM with Long Decimals in SQL\nDESCRIPTION: A fix has been implemented for the IS DISTINCT FROM operation when used with long decimal values in SQL queries.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.231.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT column1 IS DISTINCT FROM column2 FROM table;\n```\n\n----------------------------------------\n\nTITLE: Demonstrating reduce_agg Function Limitation in Presto C++\nDESCRIPTION: This snippet illustrates a key difference in the reduce_agg function between C++ and Java-based Presto. In C++ Presto, reduce_agg is not allowed to return null in either the inputFunction or the combineFunction, while in Java Presto, this is permitted but leads to undefined behavior.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/presto_cpp/limitations.rst#2025-04-10_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\nreduce_agg\n----------\n\nIn C++ based Presto, ``reduce_agg`` is not permitted to return ``null`` in either the \n``inputFunction`` or the ``combineFunction``. In Presto (Java), this is permitted \nbut undefined behavior. For more information about ``reduce_agg`` in Presto, \nsee `reduce_agg <../functions/aggregate.html#reduce_agg>`_. \n```\n\n----------------------------------------\n\nTITLE: Displaying SSL Exception for HTTP Server Connection in Java\nDESCRIPTION: This code snippet shows a Java stack trace for an SSL exception that occurs when trying to connect to an HTTP server instead of an HTTPS server. It indicates that the 'iceberg.nessie.uri' should be set to 'http://localhost:19120/api/v1' for proper connection.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/iceberg.rst.txt#2025-04-10_snippet_4\n\nLANGUAGE: none\nCODE:\n```\nCaused by: javax.net.ssl.SSLException: Unsupported or unrecognized SSL message\n\tat sun.security.ssl.SSLSocketInputRecord.handleUnknownRecord(SSLSocketInputRecord.java:448)\n\tat sun.security.ssl.SSLSocketInputRecord.decode(SSLSocketInputRecord.java:174)\n\tat sun.security.ssl.SSLTransport.decode(SSLTransport.java:111)\n\tat sun.security.ssl.SSLSocketImpl.decode(SSLSocketImpl.java:1320)\n\tat sun.security.ssl.SSLSocketImpl.readHandshakeRecord(SSLSocketImpl.java:1233)\n\tat sun.security.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:417)\n\tat sun.security.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:389)\n\tat sun.net.www.protocol.https.HttpsClient.afterConnect(HttpsClient.java:558)\n\tat sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection.connect(AbstractDelegateHttpsURLConnection.java:201)\n\tat sun.net.www.protocol.https.HttpsURLConnectionImpl.connect(HttpsURLConnectionImpl.java:167)\n\tat org.projectnessie.client.http.impl.jdk8.UrlConnectionRequest.executeRequest(UrlConnectionRequest.java:71)\n\t... 42 more\n```\n\n----------------------------------------\n\nTITLE: Listing Supported Encodings and Presto Types\nDESCRIPTION: This table shows the mapping between encoding names and Presto data types. It's crucial for understanding how different data types are serialized in the SerializedPage format.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/develop/serialized-page.rst#2025-04-10_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n===============     ===========\nEncoding Name       Presto Types\n===============     ===========\nBYTE_ARRAY          BOOLEAN, TINYINT, UNKNOWN\nSHORT_ARRAY         SMALLINT\nINT_ARRAY           INTEGER, REAL\nLONG_ARRAY          BIGINT, DOUBLE, TIMESTAMP\nINT128_ARRAY        Not used\nVARIABLE_WIDTH      VARCHAR, VARBINARY\nARRAY               ARRAY\nMAP                 MAP\nMAP_ELEMENT         n/a\nROW                 ROW\nDICTIONARY          n/a\nRLE                 n/a\n===============     ===========\n```\n\n----------------------------------------\n\nTITLE: Conditional View Renaming Example\nDESCRIPTION: Example demonstrating how to rename a view with the IF EXISTS clause to prevent errors if the view doesn't exist.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/sql/alter-view.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nALTER VIEW IF EXISTS users RENAME TO people;\n```\n\n----------------------------------------\n\nTITLE: Accessing Presto Console URL\nDESCRIPTION: URL endpoint to access Presto web interface on localhost\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/installation/deploy-brew.rst#2025-04-10_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nhttp://localhost:8080\n```\n\n----------------------------------------\n\nTITLE: Setting New Partition User Supplied Parameter in Presto Session\nDESCRIPTION: This session property causes all partitions created by a query to have the 'user_supplied' parameter set to the supplied string in Hive metastore.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.249.rst#2025-04-10_snippet_1\n\nLANGUAGE: Properties\nCODE:\n```\nnew_partition_user_supplied_parameter\n```\n\n----------------------------------------\n\nTITLE: Configuring Redshift Connector Properties\nDESCRIPTION: Basic configuration properties required to set up a Redshift connector in Presto. The properties file should be placed in etc/catalog directory with a .properties extension.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/redshift.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nconnector.name=redshift\nconnection-url=jdbc:postgresql://example.net:5439/database\nconnection-user=root\nconnection-password=secret\n```\n\n----------------------------------------\n\nTITLE: Basic Presto CLI Execution with Kerberos\nDESCRIPTION: Shell script showing basic CLI execution with Kerberos authentication, including server connection, Kerberos configuration, and TLS settings.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/security/cli.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\n./presto \\\n  --server https://presto-coordinator.example.com:7778 \\\n  --krb5-config-path /etc/krb5.conf \\\n  --krb5-principal someuser@EXAMPLE.COM \\\n  --krb5-keytab-path /home/someuser/someuser.keytab \\\n  --krb5-remote-service-name presto \\\n  --keystore-path /tmp/presto.jks \\\n  --keystore-password password \\\n  --catalog <catalog> \\\n  --schema <schema>\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Thrift Connector Properties\nDESCRIPTION: Basic configuration properties for the Presto Thrift connector that must be placed in etc/catalog/thrift.properties. Specifies the connector name and client addresses.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/thrift.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nconnector.name=presto-thrift\npresto.thrift.client.addresses=host:port,host:port\n```\n\n----------------------------------------\n\nTITLE: Creating Kerberos Principals and Keytab Files for Presto Coordinator\nDESCRIPTION: Commands for creating Kerberos principals and generating a keytab file for the Presto coordinator using kadmin. This creates two principals and adds them to a keytab file that the Presto coordinator will use for authentication.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/security/server.rst#2025-04-10_snippet_0\n\nLANGUAGE: none\nCODE:\n```\nkadmin\n> addprinc -randkey presto@EXAMPLE.COM\n> addprinc -randkey presto/presto-coordinator.example.com@EXAMPLE.COM\n> ktadd -k /etc/presto/presto.keytab presto@EXAMPLE.COM\n> ktadd -k /etc/presto/presto.keytab presto/presto-coordinator.example.com@EXAMPLE.COM\n```\n\n----------------------------------------\n\nTITLE: Presto SQL Function Reference\nDESCRIPTION: New and updated SQL functions including ST_Area, ST_EnvelopeAsPts, to_big_endian_32, from_big_endian_32, lpad, rpad, and zip_with. Added support for VARBINARY to IPADDRESS casting.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.204.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nST_Area(geometry)\nST_EnvelopeAsPts(geometry)\nto_big_endian_32(value)\nfrom_big_endian_32(value)\nCAST(value AS IPADDRESS)\nlpad(string, length, padding)\nrpad(string, length, padding)\nzip_with(array1, array2, function)\n```\n\n----------------------------------------\n\nTITLE: Describing Query Parameters\nDESCRIPTION: Command to describe the parameters of the previously prepared statement my_select1.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/sql/describe-input.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nDESCRIBE INPUT my_select1;\n```\n\n----------------------------------------\n\nTITLE: Configuring Glue Catalog ID for Hive Connector in Presto\nDESCRIPTION: Set the Glue catalog ID for the Hive connector using the hive.metastore.glue.catalogid configuration property.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.222.rst#2025-04-10_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\n-- In the Hive connector properties file:\nhive.metastore.glue.catalogid=your_catalog_id\n```\n\n----------------------------------------\n\nTITLE: Inserting Data into String-Serialized Accumulo Table using Presto SQL\nDESCRIPTION: SQL statement to insert sample data into the previously created stringy_scientists table. This shows how data is inserted when using the string serializer.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/accumulo.rst#2025-04-10_snippet_24\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO myschema.stringy_scientists VALUES\n('row1', 'Grace Hopper', 109, DATE '1906-12-09' ),\n('row2', 'Alan Turing', 103, DATE '1912-06-23' );\n```\n\n----------------------------------------\n\nTITLE: PBKDF2 Password Format Example for Presto\nDESCRIPTION: This snippet illustrates the format of a PBKDF2 hashed password in the password file. It includes the iteration count, hex-encoded salt, and hash for a username and password pair.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/security/password-file.rst.txt#2025-04-10_snippet_3\n\nLANGUAGE: none\nCODE:\n```\ntest:1000:5b4240333032306164:f38d165fce8ce42f59d366139ef5d9e1ca1247f0e06e503ee1a611dd9ec40876bb5edb8409f5abe5504aab6628e70cfb3d3a18e99d70357d295002c3d0a308a0\n```\n\n----------------------------------------\n\nTITLE: Configuring TPCH Connector Properties\nDESCRIPTION: Basic configuration for the TPCH connector in the catalog properties file.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/tpch.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nconnector.name=tpch\n```\n\n----------------------------------------\n\nTITLE: Basic DESCRIBE INPUT Syntax\nDESCRIPTION: Shows the basic syntax for the DESCRIBE INPUT statement used to examine prepared statement parameters.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/describe-input.rst#2025-04-10_snippet_0\n\nLANGUAGE: none\nCODE:\n```\nDESCRIBE INPUT statement_name\n```\n\n----------------------------------------\n\nTITLE: Configuring Benchmark Suites in JSON\nDESCRIPTION: Demonstrates how to create a suite.json file to define benchmark suites. The example includes two suites: 'file_formats' for general testing and 'legacy_orc' for testing with the optimized ORC reader disabled.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/installation/benchmark-driver.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"file_formats\": {\n        \"query\": [\"single_.*\", \"tpch_.*\"],\n        \"schema\": [ \"tpch_sf(?<scale>.*)_(?<format>.*)_(?<compression>.*?)\" ],\n        \"session\": {}\n    },\n    \"legacy_orc\": {\n        \"query\": [\"single_.*\", \"tpch_.*\"],\n        \"schema\": [ \"tpch_sf(?<scale>.*)_(?<format>orc)_(?<compression>.*?)\" ],\n        \"session\": {\n            \"hive.optimized_reader_enabled\": \"false\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Window Function Frame in SQL\nDESCRIPTION: Example of a window function frame that was previously handled incorrectly but is now fixed in this release. It shows a frame between unbounded preceding and a specific number of preceding rows.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.148.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nROWS BETWEEN UNBOUNDED PRECEDING AND 2 PRECEDING\n```\n\n----------------------------------------\n\nTITLE: Configuring MongoDB Connections in Presto\nDESCRIPTION: Renames the MongoDB configuration option for connections per host. The new option name better reflects its purpose of setting the number of connections per MongoDB host.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.175.rst#2025-04-10_snippet_2\n\nLANGUAGE: Properties\nCODE:\n```\nmongodb.connections-per-host=10\n```\n\n----------------------------------------\n\nTITLE: Basic Hive Connector Configuration\nDESCRIPTION: Basic configuration for mounting the hive-hadoop2 connector as the hive catalog. Requires specifying the Hive metastore Thrift service connection details.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/hive.rst#2025-04-10_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nconnector.name=hive-hadoop2\nhive.metastore.uri=thrift://example.net:9083\n```\n\n----------------------------------------\n\nTITLE: Active Directory Group Authorization Pattern\nDESCRIPTION: LDAP group authorization pattern for Active Directory user group membership verification\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/security/ldap.rst#2025-04-10_snippet_5\n\nLANGUAGE: properties\nCODE:\n```\nldap.group-auth-pattern=(&(objectClass=person)(sAMAccountName=${USER})(memberof=CN=AuthorizedGroup,OU=Asia,DC=corp,DC=example,DC=com))\n```\n\n----------------------------------------\n\nTITLE: SQL Function Type Support Example\nDESCRIPTION: Example showing supported data types for min_by and max_by functions, including ARRAY and ROW types as compared values.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.171.rst#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT min_by(x, ARRAY[1, 2, 3]);\nSELECT max_by(x, ROW(1, 'a'));\n```\n\n----------------------------------------\n\nTITLE: Presto Coordinator HTTPS Configuration\nDESCRIPTION: Required properties to enable HTTPS support and password authentication in the coordinator's config.properties file.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/security/ldap.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\nhttp-server.authentication.type=PASSWORD\n\nhttp-server.https.enabled=true\nhttp-server.https.port=8443\n\nhttp-server.https.keystore.path=/etc/presto_keystore.jks\nhttp-server.https.keystore.key=keystore_password\n```\n\n----------------------------------------\n\nTITLE: SQL VARCHAR Type Support\nDESCRIPTION: Addition of varchar(n) type support across multiple connectors including Hive, Kafka, and Redis.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.147.rst.txt#2025-04-10_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nvarchar(n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Presto Logger Levels\nDESCRIPTION: Optional log.properties file configuration that sets the minimum log level for Presto loggers. This example sets the INFO level for the com.facebook.presto package hierarchy, which is also the default level.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/installation/deployment.rst.txt#2025-04-10_snippet_8\n\nLANGUAGE: none\nCODE:\n```\ncom.facebook.presto=INFO\n```\n\n----------------------------------------\n\nTITLE: Presto SQL Function References\nDESCRIPTION: New and updated SQL functions introduced in Presto 0.227, including spatial functions and IP prefix handling\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.227.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nST_Equals\nST_Overlaps\nST_Crosses\nST_Touches\nip_prefix\ndifferential_entropy\n```\n\n----------------------------------------\n\nTITLE: Revoking Admin Option for Roles in Presto SQL\nDESCRIPTION: An example of revoking the admin option for multiple roles from a user and a role in Presto SQL. This command revokes the admin option for roles 'bar' and 'foo' from user 'baz' and role 'qux'.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/sql/revoke-roles.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nREVOKE ADMIN OPTION FOR bar, foo FROM USER baz, ROLE qux;\n```\n\n----------------------------------------\n\nTITLE: Configuring HDFS with NONE Authentication in Presto\nDESCRIPTION: Example configuration for connecting to HDFS without Kerberos authentication. This setup disables Kerberos authentication for HDFS access from Presto.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/hive-security.rst#2025-04-10_snippet_2\n\nLANGUAGE: none\nCODE:\n```\nhive.hdfs.authentication.type=NONE\n```\n\n----------------------------------------\n\nTITLE: Configuring ClickHouse Connector in PrestoDB\nDESCRIPTION: Basic configuration for connecting to a ClickHouse server through PrestoDB by setting necessary properties in a catalog file.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/clickhouse.rst#2025-04-10_snippet_0\n\nLANGUAGE: none\nCODE:\n```\nconnector.name=clickhouse\nclickhouse.connection-url=jdbc:clickhouse://host1:8123/\nclickhouse.connection-user=default\nclickhouse.connection-password=secret\n```\n\n----------------------------------------\n\nTITLE: Enabling Streaming Aggregation for Hive Table Scans in Presto SQL\nDESCRIPTION: Shows how to enable streaming aggregation for Hive table scans to improve query performance when group-by keys are the same as order-by keys.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.272.rst#2025-04-10_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nSET SESSION streaming_aggregation_enabled = true;\n```\n\n----------------------------------------\n\nTITLE: Failed Division by Zero Without TRY in Presto SQL\nDESCRIPTION: Demonstrates a query that fails due to division by zero when packages column contains zero values.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/conditional.rst.txt#2025-04-10_snippet_11\n\nLANGUAGE: sql\nCODE:\n```\nSELECT total_cost / packages AS per_package FROM shipping;\n```\n\n----------------------------------------\n\nTITLE: Array Functions - Result Comparison\nDESCRIPTION: Array sorting function used for improving result comparison in verifier for orderable array columns.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.219.rst#2025-04-10_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\narray_sort\n```\n\n----------------------------------------\n\nTITLE: MySQL Connection URL with UTC Timezone\nDESCRIPTION: Example of MySQL JDBC connection URL configuration with UTC timezone parameter to handle time value interpretation.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/mysql.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nconnection-url=jdbc:mysql://example.net:3306?serverTimezone=UTC\n```\n\n----------------------------------------\n\nTITLE: Enabling HTTP Request Logging in Presto\nDESCRIPTION: Configuration properties to enable HTTP request logging in Presto for diagnosing protocol-related issues. This snippet shows how to enable logging and specify the log file path in the config.properties file.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/develop/worker-protocol.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nhttp-server.log.enabled=true\nhttp-server.log.path=<request_log_file_path>\n```\n\n----------------------------------------\n\nTITLE: Truncating PostgreSQL Tables\nDESCRIPTION: Command to remove all data from a PostgreSQL table while preserving the table structure.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/postgresql.rst#2025-04-10_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\nTRUNCATE TABLE postgresql.public.renamed_table;\n```\n\n----------------------------------------\n\nTITLE: Basic Hive Connector Configuration\nDESCRIPTION: Basic configuration for mounting the hive-hadoop2 connector as the hive catalog. Requires specifying the Hive metastore Thrift service connection details.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/hive.rst#2025-04-10_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nconnector.name=hive-hadoop2\nhive.metastore.uri=thrift://example.net:9083\n```\n\n----------------------------------------\n\nTITLE: Configuring Force Local Scheduling in Hive\nDESCRIPTION: Configuration options to force local scheduling of splits in Hive, including both a system configuration property and a session property.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.79.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nhive.force-local-scheduling\n```\n\n----------------------------------------\n\nTITLE: Enabling Optimized Repartitioning via Configuration Property\nDESCRIPTION: The experimental.optimized-repartitioning configuration property enables performance improvements for data repartitioning between stages.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.227.rst#2025-04-10_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nexperimental.optimized-repartitioning\n```\n\n----------------------------------------\n\nTITLE: Converting String to Hexadecimal in Presto SQL\nDESCRIPTION: The char2hexint function returns the hexadecimal representation of the UTF-16BE encoding of the input string.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/teradata.rst#2025-04-10_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nchar2hexint(string) -> varchar\n```\n\n----------------------------------------\n\nTITLE: Identity Field Addition to Security Check\nDESCRIPTION: SPI enhancement that adds an Identity field to the checkCanSetUser security check, allowing for more granular control over system access.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.261.rst.txt#2025-04-10_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\ncheckCanSetUser\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Principal Rules in Presto\nDESCRIPTION: This JSON snippet shows how to define custom principal rules in Presto's file-based system access control plugin, including group principal handling.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/security/built-in-system-access-control.rst#2025-04-10_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"catalogs\": [\n    {\n      \"allow\": true\n    }\n  ],\n  \"principals\": [\n    {\n      \"principal\": \"([^/]+)/?.*@example.net\",\n      \"principal_to_user\": \"$1\",\n      \"allow\": true\n    },\n    {\n      \"principal\": \"group@example.net\",\n      \"user\": \"alice|bob\",\n      \"allow\": true\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Show Create Function for All Signatures\nDESCRIPTION: Example showing how to display creation statements for all signatures of the array_sum function, including both ARRAY(bigint) and ARRAY(double) implementations.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/sql/show-create-function.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: none\nCODE:\n```\n                                               Create Function                                            | Argument Types\n    ------------------------------------------------------------------------------------------------------+----------------\n     CREATE FUNCTION example.default.array_sum (                                                         +| ARRAY(bigint)\n        input ARRAY(bigint)                                                                            +|\n     )                                                                                                   +|\n     RETURNS bigint                                                                                      +|\n     COMMENT 'Calculate sum of all array elements. Nulls elements are ignored. Returns 0 on empty array.'+|\n     LANGUAGE SQL                                                                                        +|\n     DETERMINISTIC                                                                                       +|\n     RETURNS NULL ON NULL INPUT                                                                          +|\n     RETURN \"reduce\"(input, 0, (s, x) -> (s + COALESCE(x, 0)), (s) -> s)                                  |\n     CREATE FUNCTION example.default.array_sum (                                                         +| ARRAY(double)\n        input ARRAY(double)                                                                            +|\n     )                                                                                                   +|\n     RETURNS double                                                                                      +|\n     COMMENT 'Calculate sum of all array elements. Nulls elements are ignored. Returns 0 on empty array.'+|\n     LANGUAGE SQL                                                                                        +|\n     DETERMINISTIC                                                                                       +|\n     RETURNS NULL ON NULL INPUT                                                                          +|\n     RETURN \"reduce\"(input, double '0.0', (s, x) -> (s + COALESCE(x, double '0.0')), (s) -> s)            |\n    (2 rows)\n```\n\n----------------------------------------\n\nTITLE: Running Presto CLI in Bash\nDESCRIPTION: This command starts the Presto CLI, which will display the 'presto>' prompt for interactive use.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/installation/cli.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./presto\n```\n\n----------------------------------------\n\nTITLE: Basic Authorization Settings in Presto config.properties\nDESCRIPTION: Example configuration showing the essential properties needed to enable and configure HTTP endpoint authorization in Presto.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/security/authorization.rst#2025-04-10_snippet_4\n\nLANGUAGE: properties\nCODE:\n```\nhttp-server.authorization.enabled=true\nhttp-server.authorization.default-policy=ALLOW\nhttp-server.authorization.default-allowed-roles=USER,ADMIN\nhttp-server.authorization.allow-unsecured-requests=false\n```\n\n----------------------------------------\n\nTITLE: New Functions and Properties in Presto 0.116\nDESCRIPTION: New SQL functions and configuration properties added in Presto 0.116, including multimap_agg, checksum, extended max/min functions, and query timeout settings. These enhance Presto's analytical capabilities and query management.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.116.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nmultimap_agg\n```\n\nLANGUAGE: sql\nCODE:\n```\nchecksum\n```\n\nLANGUAGE: sql\nCODE:\n```\nmax\n```\n\nLANGUAGE: sql\nCODE:\n```\nmin\n```\n\nLANGUAGE: sql\nCODE:\n```\nquery_max_run_time\n```\n\nLANGUAGE: sql\nCODE:\n```\nquery.max-run-time\n```\n\nLANGUAGE: sql\nCODE:\n```\noptimizer.optimize-hash-generation\n```\n\nLANGUAGE: sql\nCODE:\n```\ndistributed-joins-enabled\n```\n\nLANGUAGE: sql\nCODE:\n```\nIF\n```\n\n----------------------------------------\n\nTITLE: SQL Function Pattern Example\nDESCRIPTION: Example of regular expression pattern using word boundaries in SQL functions.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.218.rst.txt#2025-04-10_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\n\\b\n```\n\n----------------------------------------\n\nTITLE: Configuring Hive Split Weights in Presto\nDESCRIPTION: Configuration properties for enabling and controlling size-based split weights in Hive connector. Controls how splits are weighted according to file size for better worker queue management.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.267.rst#2025-04-10_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nhive.size-based-split-weights-enabled\nsize_based_split_weights_enabled\nhive.minimum-assigned-split-weight\nminimum_assigned_split_weight\nhive.orc.writer.stream-layout-type=BY_COLUMN_SIZE\n```\n\n----------------------------------------\n\nTITLE: Configuring Presto JVM Settings\nDESCRIPTION: JVM configuration file for Presto server. It sets various JVM options including memory allocation, garbage collection, and error handling.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/installation/deploy-docker.rst#2025-04-10_snippet_6\n\nLANGUAGE: properties\nCODE:\n```\n-server\n-Xmx2G\n-XX:+UseG1GC\n-XX:G1HeapRegionSize=32M\n-XX:+UseGCOverheadLimit\n-XX:+ExplicitGCInvokesConcurrent\n-XX:+HeapDumpOnOutOfMemoryError\n-XX:+ExitOnOutOfMemoryError\n-Djdk.attach.allowAttachSelf=true\n```\n\n----------------------------------------\n\nTITLE: SQL Show Commands with LIKE Clause\nDESCRIPTION: Support for LIKE clause in SHOW CATALOGS and SHOW SCHEMAS commands for filtering results.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.147.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSHOW CATALOGS LIKE pattern\n```\n\n----------------------------------------\n\nTITLE: Escaped Unicode Sequences in SQL String Literals\nDESCRIPTION: Added support for escaped unicode sequences in string literals, allowing for more flexible and internationalized string handling in queries.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.174.rst#2025-04-10_snippet_5\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT '\\u0041' AS unicode_a\n```\n\n----------------------------------------\n\nTITLE: KLL Sketch Type Definition\nDESCRIPTION: Advanced sketch type supporting multiple data types (int, bigint, double, varchar, boolean) for approximate distribution representation, compatible with Apache DataSketches library.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/language/types.rst.txt#2025-04-10_snippet_9\n\nLANGUAGE: text\nCODE:\n```\nKLL Sketch\n```\n\n----------------------------------------\n\nTITLE: Enabling Drop Table for Hive Connector in Java\nDESCRIPTION: This configuration enables the DROP TABLE feature for the Hive connector in Presto. By default, this feature is disabled for safety reasons.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.70.rst#2025-04-10_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\nhive.allow-drop-table=true\n```\n\n----------------------------------------\n\nTITLE: Example Thrift Server Addresses Configuration\nDESCRIPTION: Example configuration for the presto.thrift.client.addresses property showing how to specify multiple Thrift servers using their IP addresses and ports in a comma-separated list.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/thrift.rst#2025-04-10_snippet_1\n\nLANGUAGE: none\nCODE:\n```\npresto.thrift.client.addresses=192.0.2.3:7777,192.0.2.4:7779\n```\n\n----------------------------------------\n\nTITLE: Using Slice Function in Presto SQL\nDESCRIPTION: Mentions improvements to error messages for the 'slice' function in Presto SQL, used for substring operations.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.143.rst.txt#2025-04-10_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\nslice\n```\n\n----------------------------------------\n\nTITLE: Calling System Procedure Example\nDESCRIPTION: Example of calling a system procedure in Presto using the CALL statement with a qualified catalog name.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/hive.rst.txt#2025-04-10_snippet_12\n\nLANGUAGE: sql\nCODE:\n```\nCALL web.system.example_procedure()\n```\n\n----------------------------------------\n\nTITLE: Presto JVM Configuration\nDESCRIPTION: JVM configuration settings for Presto server including memory allocation, garbage collection, and error handling parameters.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/installation/deploy-docker.rst.txt#2025-04-10_snippet_3\n\nLANGUAGE: properties\nCODE:\n```\n-server\n-Xmx2G\n-XX:+UseG1GC\n-XX:G1HeapRegionSize=32M\n-XX:+UseGCOverheadLimit\n-XX:+ExplicitGCInvokesConcurrent\n-XX:+HeapDumpOnOutOfMemoryError\n-XX:+ExitOnOutOfMemoryError\n-Djdk.attach.allowAttachSelf=true\n```\n\n----------------------------------------\n\nTITLE: Enabling Distributed Joins in Presto\nDESCRIPTION: Configuration flag to enable distributed joins. When true, it ensures that joins are properly redistributed.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.139.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\ndistributed-joins-enabled\n```\n\n----------------------------------------\n\nTITLE: Show Create Function Basic Syntax\nDESCRIPTION: Basic syntax definition for the SHOW CREATE FUNCTION command. Can be used with or without parameter type specifications.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/sql/show-create-function.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: none\nCODE:\n```\nSHOW CREATE FUNCTION function_name [ ( parameter_type[, ...] ) ]\n```\n\n----------------------------------------\n\nTITLE: Active Directory User Bind Pattern\nDESCRIPTION: LDAP user bind pattern configuration for Active Directory integration\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/security/ldap.rst#2025-04-10_snippet_3\n\nLANGUAGE: properties\nCODE:\n```\nldap.user-bind-pattern=${USER}@corp.example.com\n```\n\n----------------------------------------\n\nTITLE: Configuring Hive Metastore Operation Rollback in Presto\nDESCRIPTION: Configuration property to control whether Presto should undo metastore operations after encountering errors. When set to true (default), metastore operations are rolled back on error. When set to false, operations are not undone after errors.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.249.2.rst#2025-04-10_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nhive.undo-metastore-operations-enabled\n```\n\n----------------------------------------\n\nTITLE: Sample Data Output in Presto SQL\nDESCRIPTION: Shows the output of the shipping table query with some invalid data that will be used to demonstrate error handling.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/conditional.rst.txt#2025-04-10_snippet_6\n\nLANGUAGE: none\nCODE:\n```\n origin_state | origin_zip | packages | total_cost\n--------------+------------+----------+------------\n California   |      94131 |       25 |        100\n California   |      P332a |        5 |         72\n California   |      94025 |        0 |        155\n New Jersey   |      08544 |      225 |        490\n(4 rows)\n```\n\n----------------------------------------\n\nTITLE: Accessing Resource Group State REST Endpoint\nDESCRIPTION: Experimental REST endpoint for retrieving resource group state information from the Presto coordinator.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.180.rst#2025-04-10_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\n/v1/resourceGroupState\n```\n\n----------------------------------------\n\nTITLE: Enabling Kerberos for Internal Communication in Presto\nDESCRIPTION: Setting to enable Kerberos authentication for internal communication between Presto nodes, which uses the service name and keytab from the server Kerberos configuration.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/security/internal-communication.rst.txt#2025-04-10_snippet_11\n\nLANGUAGE: none\nCODE:\n```\ninternal-communication.kerberos.enabled=true\n```\n\n----------------------------------------\n\nTITLE: Enabling Custom Authentication in Presto Coordinator\nDESCRIPTION: This configuration snippet shows how to enable custom authentication in the Presto coordinator's config.properties file. It sets the authentication type to CUSTOM, which is required for using a custom authenticator.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/develop/presto-authenticator.rst#2025-04-10_snippet_1\n\nLANGUAGE: none\nCODE:\n```\nhttp-server.authentication.type=CUSTOM\n```\n\n----------------------------------------\n\nTITLE: Querying Prometheus Metrics with Time Window in PrestoDB\nDESCRIPTION: SQL query example demonstrating how to query Prometheus metrics with a time window constraint to limit data retrieval and optimize performance.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/prometheus.rst#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM prometheus.default.up WHERE timestamp > (NOW() - INTERVAL '10' second);\n```\n\n----------------------------------------\n\nTITLE: Enabling Password Authentication in Presto Coordinator\nDESCRIPTION: Configuration property that must be added to the coordinator's config.properties file to enable password authentication. This works in conjunction with the password authenticator configuration.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/develop/password-authenticator.rst#2025-04-10_snippet_1\n\nLANGUAGE: none\nCODE:\n```\nhttp-server.authentication.type=PASSWORD\n```\n\n----------------------------------------\n\nTITLE: Adding an Empty Partition to Hive Table in Presto\nDESCRIPTION: Shows how to add an empty partition to the 'page_views' table using a system procedure. This is useful for pre-creating partitions before data is available.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/hive.rst#2025-04-10_snippet_17\n\nLANGUAGE: SQL\nCODE:\n```\nCALL system.create_empty_partition(\n    schema_name => 'web',\n    table_name => 'page_views',\n    partition_columns => ARRAY['ds', 'country'],\n    partition_values => ARRAY['2016-08-09', 'US']);\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Tasks Example Response (GET /v1/task)\nDESCRIPTION: Sample JSON response from the GET /v1/task endpoint showing a trivial task response. Contains information about a canceled task including its ID, state, output buffers, and statistics.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/rest/task.rst#2025-04-10_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[ {\n  \"taskId\" : \"20131222_183944_00011_dk5x2.1.0\",\n  \"version\" : 9223372036854775807,\n  \"state\" : \"CANCELED\",\n  \"self\" : \"unknown\",\n  \"lastHeartbeat\" : \"2013-12-22T13:54:46.566-05:00\",\n  \"outputBuffers\" : {\n    \"state\" : \"FINISHED\",\n    \"masterSequenceId\" : 0,\n    \"pagesAdded\" : 0,\n    \"buffers\" : [ ]\n  },\n  \"noMoreSplits\" : [ ],\n  \"stats\" : {\n    \"createTime\" : \"2013-12-22T13:54:46.566-05:00\",\n    \"elapsedTime\" : \"0.00ns\",\n    \"queuedTime\" : \"92.00us\",\n    \"totalDrivers\" : 0,\n    \"queuedDrivers\" : 0,\n    \"runningDrivers\" : 0,\n    \"completedDrivers\" : 0,\n    \"memoryReservation\" : \"0B\",\n    \"totalScheduledTime\" : \"0.00ns\",\n    \"totalCpuTime\" : \"0.00ns\",\n    \"totalBlockedTime\" : \"0.00ns\",\n    \"rawInputDataSize\" : \"0B\",\n    \"rawInputPositions\" : 0,\n    \"processedInputDataSize\" : \"0B\",\n    \"processedInputPositions\" : 0,\n    \"outputDataSize\" : \"0B\",\n    \"outputPositions\" : 0,\n    \"pipelines\" : [ ]\n  },\n  \"failures\" : [ ],\n  \"outputs\" : { }\n}]\n```\n\n----------------------------------------\n\nTITLE: SQL Distinct Aggregation Query Example\nDESCRIPTION: Demonstrates the usage of DISTINCT argument qualifier in aggregation functions to count unique cities and ages per country.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.57.rst#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT country, count(DISTINCT city), count(DISTINCT age)\nFROM users\nGROUP BY country\n```\n\n----------------------------------------\n\nTITLE: Unsupported Alter Column Type Operation\nDESCRIPTION: Example of an unsupported ALTER TABLE operation for changing column type.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/postgresql.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE postgresql.public.users ALTER COLUMN age TYPE BIGINT;\n```\n\n----------------------------------------\n\nTITLE: Generating Java Keystore for Presto Coordinator TLS\nDESCRIPTION: This command generates a Java keystore file for the Presto coordinator's TLS configuration. It creates a key pair with the alias 'presto' using RSA algorithm and stores it in 'keystore.jks'.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/security/tls.rst#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkeytool -genkeypair -alias presto -keyalg RSA -keystore keystore.jks\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents for Presto Plugins in reStructuredText\nDESCRIPTION: This snippet defines a table of contents for the Presto plugins documentation using reStructuredText syntax. It specifies a maximum depth of 1 and includes a link to the Redis HBO provider plugin documentation.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/plugin.rst#2025-04-10_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n    :maxdepth: 1\n\n    plugin/redis-hbo-provider\n```\n\n----------------------------------------\n\nTITLE: Querying Information Schema and System Tables in Presto SQL\nDESCRIPTION: This SQL snippet demonstrates a COUNT(*) query over tables in the information_schema and sys schemas, which was previously causing errors.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.84.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCOUNT(*)\n```\n\n----------------------------------------\n\nTITLE: Implementing Function Plugin in Java for Presto\nDESCRIPTION: This code snippet shows how to create a plugin that returns multiple function classes. It uses the ImmutableSet utility class from Guava to build the set of function classes.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/develop/functions.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic class ExampleFunctionsPlugin\n        implements Plugin\n{\n    @Override\n    public Set<Class<?>> getFunctions()\n    {\n        return ImmutableSet.<Class<?>>builder()\n                .add(ExampleNullFunction.class)\n                .add(IsNullFunction.class)\n                .add(IsEqualOrNullFunction.class)\n                .add(ExampleStringFunction.class)\n                .add(ExampleAverageFunction.class)\n                .build();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Warning about column-level access control bug in RestructuredText\nDESCRIPTION: A warning notice about a bug affecting proper checking of columns in the USING clause for column-level access control, with a reference to PR #15333.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.243.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. warning::\n    There is a bug that results in columns in the ``USING`` clause of a query to not be checked properly for column-level access control (:pr:`15333`).\n```\n\n----------------------------------------\n\nTITLE: Verifier Configuration Properties in Presto\nDESCRIPTION: New configuration properties for the Verifier in Presto to control table properties and teardown behavior.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.235.rst.txt#2025-04-10_snippet_6\n\nLANGUAGE: SQL\nCODE:\n```\ncontrol.table-properties\ntest.table-properties\nsmart-teardown\nrun-teardown-on-result-mismatch\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Glue as Metastore in Hive\nDESCRIPTION: Support added for using AWS Glue as the metastore in Hive. Enabled by setting the 'hive.metastore' config property to 'glue'.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.198.rst#2025-04-10_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nhive.metastore = glue\n```\n\n----------------------------------------\n\nTITLE: Checksum Function Reference\nDESCRIPTION: Checksum function used in query verification process for comparing results.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.219.rst#2025-04-10_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nchecksum\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents for Presto Cache Documentation in reStructuredText\nDESCRIPTION: This snippet creates a table of contents using reStructuredText syntax, linking to pages about local and service caching in Presto. It sets the maximum depth of the table to 1.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/cache.rst#2025-04-10_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n    :maxdepth: 1\n\n    cache/local\n    cache/service\n```\n\n----------------------------------------\n\nTITLE: Using element_at Function in SQL\nDESCRIPTION: The element_at function allows accessing elements from arrays or maps by their position or key.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.113.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nelement_at\n```\n\n----------------------------------------\n\nTITLE: Setting JVM Property for Entropy Source in Presto\nDESCRIPTION: JVM configuration to change the entropy source for the SHA1PRNG algorithm from the blocking /dev/random to the non-blocking /dev/urandom for environments with limited entropy.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/security/internal-communication.rst.txt#2025-04-10_snippet_13\n\nLANGUAGE: none\nCODE:\n```\n-Djava.security.egd=file:/dev/urandom\n```\n\n----------------------------------------\n\nTITLE: Enabling Experimental On-Disk Merge Sort for Aggregations\nDESCRIPTION: Shows how to enable the new experimental on-disk merge sort feature for aggregations using a configuration flag. This feature can potentially improve performance for memory-intensive aggregation operations.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.158.rst#2025-04-10_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nSET SESSION experimental.spill-enabled = true;\n```\n\n----------------------------------------\n\nTITLE: Configuring Presto Compiler Settings\nDESCRIPTION: Configuration property to disable interpreter fallback when bytecode compilation fails. Setting this forces queries to fail rather than run slowly when compilation issues occur.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.70.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\ncompiler.interpreter-enabled=false\n```\n\n----------------------------------------\n\nTITLE: Creating an Empty Table with the Same Schema in PrestoDB\nDESCRIPTION: Example of creating a new empty table with the same schema as an existing table. The 'WITH NO DATA' clause creates the table structure without copying any data.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/create-table-as.rst#2025-04-10_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE empty_nation AS\nSELECT *\nFROM nation\nWITH NO DATA\n```\n\n----------------------------------------\n\nTITLE: Using the approx_percentile() Window Function with Complex Types\nDESCRIPTION: The approx_percentile() window function can process arrays or maps as arguments. A bug was fixed that previously caused query failures when using this function with these complex data types.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.182.rst#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\napprox_percentile(array_column, 0.5)\n```\n\n----------------------------------------\n\nTITLE: SQL Function Reference\nDESCRIPTION: Reference to min_by and max_by aggregation functions that now support returning multiple values.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.122.rst#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nmin_by\nmax_by\n```\n\n----------------------------------------\n\nTITLE: Creating a Function Namespace in MySQL for Presto\nDESCRIPTION: This SQL snippet demonstrates how to create a new function namespace by inserting a record into the function namespaces table. It creates a namespace 'test' in the 'example' catalog.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/admin/function-namespace-managers.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO example_function_namespaces (catalog_name, schema_name)\nVALUES('example', 'test');\n```\n\n----------------------------------------\n\nTITLE: Pinot Connector Configuration Properties in Presto\nDESCRIPTION: New system properties for the Pinot connector in Presto to control data type mapping and inference.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.235.rst.txt#2025-04-10_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\npinot.infer-date-type-in-schema\npinot.infer-timestamp-type-in-schema\n```\n\n----------------------------------------\n\nTITLE: Creating a Table of Contents in reStructuredText for Presto Plugins\nDESCRIPTION: This snippet creates a table of contents (toctree) in reStructuredText format that links to the available Presto plugin documentation pages. It sets the maximum depth to 1 and includes a link to the redis-hbo-provider plugin documentation.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/plugin.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. toctree::\n    :maxdepth: 1\n\n    plugin/redis-hbo-provider\n```\n\n----------------------------------------\n\nTITLE: Hadoop S3 Credentials Configuration\nDESCRIPTION: Configuration property for custom S3 credentials provider in Hadoop settings.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.152.rst#2025-04-10_snippet_1\n\nLANGUAGE: Properties\nCODE:\n```\npresto.s3.credentials-provider\n```\n\n----------------------------------------\n\nTITLE: Configuring TPCH Connector in Presto\nDESCRIPTION: Shows how to configure the TPCH connector by creating a catalog properties file in etc/catalog/tpch.properties. This simple configuration enables the connector with its default settings.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/tpch.rst#2025-04-10_snippet_0\n\nLANGUAGE: none\nCODE:\n```\nconnector.name=tpch\n```\n\n----------------------------------------\n\nTITLE: Configuring Legacy System Pool in Presto SQL\nDESCRIPTION: Sets the configuration option to enable the deprecated legacy system pool. This option restores the old behavior where the system memory pool was used instead of the general/user memory pool.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.201.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\ndeprecated.legacy-system-pool-enabled\n```\n\n----------------------------------------\n\nTITLE: Dropping a Function with IF EXISTS Clause in Presto SQL\nDESCRIPTION: Example showing how to safely drop a function using the IF EXISTS clause, which prevents errors when the specified function doesn't exist in the database.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/drop-function.rst#2025-04-10_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nDROP FUNCTION IF EXISTS example.default.tan(double)\n```\n\n----------------------------------------\n\nTITLE: Configuring NONE Authentication with HDFS Impersonation in Presto\nDESCRIPTION: This configuration enables HDFS impersonation when using NONE authentication type. It allows Presto to impersonate the end user when accessing HDFS without using Kerberos.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/hive-security.rst#2025-04-10_snippet_4\n\nLANGUAGE: none\nCODE:\n```\nhive.hdfs.authentication.type=NONE\nhive.hdfs.impersonation.enabled=true\n```\n\n----------------------------------------\n\nTITLE: Configuring Hive Connector for Alluxio Catalog Service\nDESCRIPTION: Configuration properties needed in the Presto catalog file to use the Alluxio Catalog Service as the metastore. This enables transparent caching and transformations for Presto queries.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/hive.rst.txt#2025-04-10_snippet_10\n\nLANGUAGE: none\nCODE:\n```\nconnector.name=hive-hadoop2\nhive.metastore=alluxio\nhive.metastore.alluxio.master.address=HOSTNAME:PORT\n```\n\n----------------------------------------\n\nTITLE: IP Subnet Maximum Address Calculation\nDESCRIPTION: Retrieves the largest IP address in a given subnet range for both IPv4 and IPv6 addresses.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/ip.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT ip_subnet_max(IPPREFIX '192.64.0.0/9');\nSELECT ip_subnet_max(IPPREFIX '2001:0db8:85a3:0001:0001:8a2e:0370:7334/48');\n```\n\n----------------------------------------\n\nTITLE: Querying Hudi Table with Date Grouping\nDESCRIPTION: SQL query example demonstrating how to count records grouped by date.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/hudi.rst#2025-04-10_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nselect dt, count(*) from stock_ticks_cow group by dt;\n```\n\n----------------------------------------\n\nTITLE: START TRANSACTION Syntax in Presto\nDESCRIPTION: Defines the syntax for starting a transaction in Presto, showing the basic command structure and possible modes.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/sql/start-transaction.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: none\nCODE:\n```\nSTART TRANSACTION [ mode [, ...] ]\n```\n\n----------------------------------------\n\nTITLE: Using ntile Window Function in Presto SQL\nDESCRIPTION: Shows the new ntile function which divides rows into a specified number of approximately equal groups.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.86.rst#2025-04-10_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nntile\n```\n\n----------------------------------------\n\nTITLE: Detecting Myanmar Font Encoding in Presto SQL\nDESCRIPTION: This function determines the font encoding of Myanmar text. It returns 'zawgyi' if the text is Zawgyi-encoded, and 'unicode' otherwise. This is useful for identifying the encoding of input text before processing.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/internationalization.rst#2025-04-10_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nmyanmar_font_encoding(text) -> varchar\n```\n\n----------------------------------------\n\nTITLE: Configuring ORC Writer Validation in Presto 0.201\nDESCRIPTION: New ORC writer validation configuration property that uses sampling percentage instead of a boolean flag.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.201.rst#2025-04-10_snippet_3\n\nLANGUAGE: plain\nCODE:\n```\nhive.orc.writer.validation-percentage\n```\n\n----------------------------------------\n\nTITLE: Configuring TPCDS Connector in Presto\nDESCRIPTION: This snippet shows how to configure the TPCDS connector by creating a catalog properties file. The file should be named 'tpcds.properties' and placed in the 'etc/catalog/' directory.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/tpcds.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nconnector.name=tpcds\n```\n\n----------------------------------------\n\nTITLE: Configuring Presto JDBC Connection Parameters in URL\nDESCRIPTION: Example of setting JDBC connection parameters directly in the URL string, including user, password, and SSL settings.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/installation/jdbc.rst#2025-04-10_snippet_5\n\nLANGUAGE: java\nCODE:\n```\n// URL parameters\nString url = \"jdbc:presto://example.net:8443/hive/sales?user=test&password=secret&SSL=true\";\nConnection connection = DriverManager.getConnection(url);\n```\n\n----------------------------------------\n\nTITLE: Defining RST Table of Contents for Presto Admin Docs\nDESCRIPTION: ReStructuredText directive that creates a table of contents tree with links to various Presto administration documentation pages. The toctree is set to maximum depth of 1 level.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/admin.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n    :maxdepth: 1\n\n    admin/web-interface\n    admin/tuning\n    admin/properties\n    admin/properties-session\n    admin/spill\n    admin/exchange-materialization\n    admin/cte-materialization\n    admin/resource-groups\n    admin/session-property-managers\n    admin/function-namespace-managers\n    admin/dist-sort\n    admin/verifier\n```\n\n----------------------------------------\n\nTITLE: Enabling Pinot Data Fetch Retry\nDESCRIPTION: Configuration property to enable retry mechanism for data fetch exceptions in Pinot connector.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.238.rst.txt#2025-04-10_snippet_3\n\nLANGUAGE: properties\nCODE:\n```\npinot.mark-data-fetch-exceptions-as-retriable\n```\n\n----------------------------------------\n\nTITLE: Deprecated Big Query Configuration Options in Presto\nDESCRIPTION: List of deprecated configuration options that were used for the experimental big query support removed in version 0.109.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.109.rst#2025-04-10_snippet_3\n\nLANGUAGE: properties\nCODE:\n```\nexperimental_big_query\n```\n\nLANGUAGE: properties\nCODE:\n```\nexperimental.big-query-initial-hash-partitions\n```\n\nLANGUAGE: properties\nCODE:\n```\nexperimental.max-concurrent-big-queries\n```\n\nLANGUAGE: properties\nCODE:\n```\nexperimental.max-queued-big-queries\n```\n\n----------------------------------------\n\nTITLE: Renaming Presto CLI JAR file in Bash\nDESCRIPTION: This command renames the downloaded Presto CLI JAR file to 'presto' for easier usage.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/installation/cli.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmv  presto-cli-0.286-executable.jar presto\n```\n\n----------------------------------------\n\nTITLE: Dropping an Iceberg Table\nDESCRIPTION: Example of dropping an Iceberg table. Behavior varies by catalog type - with Hive/Glue only metadata is removed, while with Hadoop/Nessie all data and metadata are removed.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/iceberg.rst.txt#2025-04-10_snippet_51\n\nLANGUAGE: sql\nCODE:\n```\nDROP TABLE iceberg.web.page_views\n```\n\n----------------------------------------\n\nTITLE: Using Aggregation Functions in Presto SQL\nDESCRIPTION: References to aggregate functions that were improved in this release for better performance or bug fixes.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.103.rst#2025-04-10_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nmax_by\nmin_by\nmap_agg\n```\n\n----------------------------------------\n\nTITLE: Starting Presto CLI on Apple Silicon Mac\nDESCRIPTION: Command to start the Presto CLI on an Apple Silicon Mac, which launches an interactive shell displaying the 'presto>' prompt.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/installation/deploy-brew.rst.txt#2025-04-10_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\npresto\n```\n\n----------------------------------------\n\nTITLE: Configuring Spilling Properties in Presto\nDESCRIPTION: Experimental properties to control memory spilling behavior for different operations like joins, aggregations, and window functions.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/admin/properties.rst.txt#2025-04-10_snippet_3\n\nLANGUAGE: properties\nCODE:\n```\nexperimental.spill-enabled=false\nexperimental.join-spill-enabled=true\nexperimental.aggregation-spill-enabled=true\nexperimental.distinct-aggregation-spill-enabled=true\nexperimental.order-by-aggregation-spill-enabled=true\nexperimental.window-spill-enabled=true\nexperimental.order-by-spill-enabled=true\n```\n\n----------------------------------------\n\nTITLE: Example MongoDB Hostname Lookup\nDESCRIPTION: Example of a dig command for looking up MongoDB cluster hostnames\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/mongodb.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndig srv _mongodb._tcp.mongodb-prod-cluster-ba6e9b05.mongo.ondigitalocean.com\n```\n\n----------------------------------------\n\nTITLE: Configuring Hive S3 Instance Credentials\nDESCRIPTION: Configuration property to disable EC2 instance credentials for S3 access in Hive connector.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.101.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nhive.s3.use-instance-credentials=false\n```\n\n----------------------------------------\n\nTITLE: Session Property for Warning Handling in Presto SQL\nDESCRIPTION: New session property to control how warnings are handled with options SUPPRESS, NORMAL, and AS_ERROR, with NORMAL as the default value.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.237.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nwarning_handling\n```\n\n----------------------------------------\n\nTITLE: Updated Node Scheduler Configuration Property in Presto\nDESCRIPTION: Configuration property renamed in Presto 0.157 from 'max-pending-splits-per-node-per-stage' to 'max-pending-splits-per-task'.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.157.rst#2025-04-10_snippet_3\n\nLANGUAGE: properties\nCODE:\n```\nnode-scheduler.max-pending-splits-per-task\n```\n\n----------------------------------------\n\nTITLE: Defining Plugin Entry Point in Service File\nDESCRIPTION: Shows how to specify a plugin class in the ServiceLoader resource file. This file must be placed in META-INF/services directory with the name com.facebook.presto.spi.Plugin.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/develop/spi-overview.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: none\nCODE:\n```\ncom.facebook.presto.example.ExamplePlugin\n```\n\n----------------------------------------\n\nTITLE: Configuring Pinot Connector Settings\nDESCRIPTION: Configuration properties for Pinot connector including custom gRPC metadata, distinct count function override, and HTTPS enablement for various Pinot APIs.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.268.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\npinot.extra-grpc-metadata\npinot.override-distinct-count-function\noverride_distinct_count_function\npinot.use-https-for-controller/broker/proxy\n```\n\n----------------------------------------\n\nTITLE: Using Window Functions with TIMESTAMP in Presto SQL\nDESCRIPTION: Window functions now support TIMESTAMP data type as input. This includes first_value, last_value, nth_value, lead, and lag functions.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.104.rst.txt#2025-04-10_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nfirst_value()\nlast_value()\nnth_value()\nlead()\nlag()\n```\n\n----------------------------------------\n\nTITLE: Calling a Procedure in Presto\nDESCRIPTION: Example of how to call a procedure in Presto using the CALL statement with a qualified catalog name. This specific example shows the general syntax for calling procedures in a Hive catalog named 'web'.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/hive.rst#2025-04-10_snippet_13\n\nLANGUAGE: sql\nCODE:\n```\nCALL web.system.example_procedure()\n```\n\n----------------------------------------\n\nTITLE: Configuring Presto JVM for Alluxio Integration\nDESCRIPTION: This snippet shows how to update the Presto JVM configuration file to include the Alluxio configuration directory in the classpath. This allows Alluxio properties to be loaded as a resource.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/hive.rst#2025-04-10_snippet_8\n\nLANGUAGE: none\nCODE:\n```\n-Xbootclasspath/a:<path-to-alluxio-conf>\n```\n\n----------------------------------------\n\nTITLE: Implementing Exact Principal Matching in Presto\nDESCRIPTION: JSON configuration for principal rules that implement exact matching of full principal names for LDAP and Kerberos authentication, determining which principal can be authorized as which user.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/security/built-in-system-access-control.rst.txt#2025-04-10_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"catalogs\": [\n    {\n      \"allow\": true\n    }\n  ],\n  \"principals\": [\n    {\n      \"principal\": \"(.*)\",\n      \"principal_to_user\": \"$1\",\n      \"allow\": true\n    },\n    {\n      \"principal\": \"([^/]+)/?.*@.*\",\n      \"principal_to_user\": \"$1\",\n      \"allow\": true\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Grep Command for Tracing TaskStatus Updates\nDESCRIPTION: Example grep command to filter and display logs related to TaskStatus updates in Presto.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/develop/worker-protocol.rst#2025-04-10_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncat stderr* | grep '/v1/task/20240402_223203_00000_kg5tr.11.0.455.0/status'\n```\n\n----------------------------------------\n\nTITLE: Describing Statement Parameters\nDESCRIPTION: Shows how to describe the input parameters of a previously prepared statement.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/describe-input.rst#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nDESCRIBE INPUT my_select1;\n```\n\n----------------------------------------\n\nTITLE: Configuring Aggregation Partitioning Merging Strategy in SQL\nDESCRIPTION: A new session property 'aggregation_partitioning_merging_strategy' has been added to configure the partition merging strategy when adding exchange around the aggregation node.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.231.rst.txt#2025-04-10_snippet_5\n\nLANGUAGE: SQL\nCODE:\n```\nSET SESSION aggregation_partitioning_merging_strategy = 'strategy_name';\n```\n\n----------------------------------------\n\nTITLE: Example of Dropping a View with IF EXISTS in Presto SQL\nDESCRIPTION: An example of dropping a view with the IF EXISTS clause to prevent errors if the view doesn't exist.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/drop-view.rst#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nDROP VIEW IF EXISTS orders_by_date\n```\n\n----------------------------------------\n\nTITLE: SQL Function Syntax Example - row_number\nDESCRIPTION: Example of the row_number window function that was fixed when used with partitioning\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.108.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nrow_number()\n```\n\n----------------------------------------\n\nTITLE: Configuring NONE Authentication with HDFS Impersonation in Presto\nDESCRIPTION: Example configuration for enabling HDFS impersonation with NONE authentication type in Presto. Allows Presto to impersonate the end user when accessing HDFS.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/hive-security.rst.txt#2025-04-10_snippet_4\n\nLANGUAGE: none\nCODE:\n```\nhive.hdfs.authentication.type=NONE\nhive.hdfs.impersonation.enabled=true\n```\n\n----------------------------------------\n\nTITLE: Defining Authorization Rules in JSON for Presto\nDESCRIPTION: This JSON snippet demonstrates how to configure authorization rules for schemas, tables, and session properties in Presto. It includes examples of setting ownership, granting privileges, and controlling session property access.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/hive-security.rst.txt#2025-04-10_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"schemas\": [\n    {\n      \"user\": \"admin\",\n      \"schema\": \".*\",\n      \"owner\": true\n    },\n    {\n      \"user\": \"guest\",\n      \"owner\": false\n    },\n    {\n      \"schema\": \"default\",\n      \"owner\": true\n    }\n  ],\n  \"tables\": [\n    {\n      \"user\": \"admin\",\n      \"privileges\": [\"SELECT\", \"INSERT\", \"DELETE\", \"OWNERSHIP\"]\n    },\n    {\n      \"user\": \"banned_user\",\n      \"privileges\": []\n    },\n    {\n      \"schema\": \"default\",\n      \"table\": \".*\",\n      \"privileges\": [\"SELECT\"]\n    }\n  ],\n  \"sessionProperties\": [\n    {\n      \"property\": \"force_local_scheduling\",\n      \"allow\": true\n    },\n    {\n      \"user\": \"admin\",\n      \"property\": \"max_split_size\",\n      \"allow\": true\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Pinot Connector Settings\nDESCRIPTION: Configuration properties for Pinot connector including custom gRPC metadata, distinct count function override, and HTTPS enablement for various Pinot APIs.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.268.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\npinot.extra-grpc-metadata\npinot.override-distinct-count-function\noverride_distinct_count_function\npinot.use-https-for-controller/broker/proxy\n```\n\n----------------------------------------\n\nTITLE: Referencing Pull Request in reStructuredText\nDESCRIPTION: This snippet demonstrates how to reference a pull request number in reStructuredText format, specifically mentioning a CPU regression introduced by a particular PR.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.253.rst#2025-04-10_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n:pr:`16027`\n```\n\n----------------------------------------\n\nTITLE: Query Result - Date Grouping\nDESCRIPTION: Result set showing the count of records per date.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/hudi.rst#2025-04-10_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n    dt      | _col1 |\n------------+--------+\n 2018-08-31 |  99  |\n(1 rows)\n```\n\n----------------------------------------\n\nTITLE: Using set_union() Function in Presto SQL\nDESCRIPTION: Example of using the set_union() function to combine multiple arrays into a single array with all distinct values from the input arrays.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/aggregate.rst.txt#2025-04-10_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nSELECT set_union(elements)\nFROM (\n    VALUES\n        ARRAY[1, 2, 3],\n        ARRAY[2, 3, 4]\n) AS t(elements);\n```\n\n----------------------------------------\n\nTITLE: Using NOISY_COUNT_GAUSSIAN Function in Presto SQL\nDESCRIPTION: The NOISY_COUNT_GAUSSIAN function adds Gaussian noise to a count result, useful for differential privacy applications. It adds random noise with 0 mean and a specified standard deviation to count results.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.284.rst#2025-04-10_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nNOISY_COUNT_GAUSSIAN(value, noise_scale[, random_seed])\n```\n\n----------------------------------------\n\nTITLE: Casting Between VARBINARY and IPADDRESS Types in Presto SQL\nDESCRIPTION: New casting support between VARBINARY and IPADDRESS types for enhanced IP address handling.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.204.rst#2025-04-10_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT CAST(ip_column AS VARBINARY) FROM table;\nSELECT CAST(binary_column AS IPADDRESS) FROM table;\n```\n\n----------------------------------------\n\nTITLE: Starting Presto Server in Foreground on Intel Mac\nDESCRIPTION: Command to start the Presto service in the foreground on an Intel Mac.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/installation/deploy-brew.rst.txt#2025-04-10_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npresto-server run\n```\n\n----------------------------------------\n\nTITLE: Configuring Dynamic Split Concurrency in Presto\nDESCRIPTION: Configuration parameters for controlling dynamic split concurrency in Presto. Includes both system-level configuration properties and session-level properties for adjusting split behavior.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.139.rst#2025-04-10_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\ntask.initial-splits-per-node\ntask.split-concurrency-adjustment-interval\ninitial_splits_per_node\nsplit_concurrency_adjustment_interval\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Presto Authenticator Properties\nDESCRIPTION: This snippet shows an example configuration file for a custom Presto authenticator. It specifies the authenticator name and custom properties that are passed to the PrestoAuthenticatorFactory.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/develop/presto-authenticator.rst#2025-04-10_snippet_0\n\nLANGUAGE: none\nCODE:\n```\npresto-authenticator.name=custom-authenticator\ncustom-property1=custom-value1\ncustom-property2=custom-value2\n```\n\n----------------------------------------\n\nTITLE: Retrieving Node Information with Errors in Presto (HTTP)\nDESCRIPTION: This example shows the response when a node is experiencing errors. It includes additional fields such as lastFailureInfo and recentFailuresByType, which provide details about recent Java exceptions that have occurred on the node.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/rest/node.rst#2025-04-10_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nVary: Accept\nContent-Type: text/javascript\n\n[\n   {\n      \"age\": \"4.45m\",\n      \"lastFailureInfo\": {\n          \"message\": \"Connect Timeout\",\n          \"stack\": [\n              \"org.eclipse.jetty.io.ManagedSelector$ConnectTimeout.run(ManagedSelector.java:683)\",\n              ....\n              \"java.lang.Thread.run(Thread.java:745)\"\n          ],\n          \"suppressed\": [],\n          \"type\": \"java.net.SocketTimeoutException\"\n      },\n      \"lastRequestTime\": \"2017-08-05T11:53:00.647Z\",\n      \"lastResponseTime\": \"2017-08-05T11:53:00.647Z\",\n      \"recentFailureRatio\": 0.47263053472046446,\n      \"recentFailures\": 2.8445543205610617,\n      \"recentFailuresByType\": {\n          \"java.net.SocketTimeoutException\": 2.8445543205610617\n      },\n      \"recentRequests\": 6.018558073577414,\n      \"recentSuccesses\": 3.1746446343010297,\n      \"uri\": \"http://172.19.0.3:8080\"\n   }\n]\n```\n\n----------------------------------------\n\nTITLE: Example Presto Connection String for Apache Superset\nDESCRIPTION: Example of a complete Presto connection string using the system catalog and port 8080, which is used in the SQLAlchemy URI field when configuring a database connection in Superset.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/clients/superset.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\npresto://<Presto-IP-address>:8080/system\n```\n\n----------------------------------------\n\nTITLE: Using Lambda Expressions in UNNEST or VALUES Clauses in SQL\nDESCRIPTION: Addresses a failure during query planning when lambda expressions are used within UNNEST or VALUES clauses. The fix allows for proper handling of these scenarios.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.193.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT * FROM UNNEST(ARRAY[1, 2, 3], ARRAY[(x -> x * 2)(1), (x -> x * 2)(2), (x -> x * 2)(3)])\n```\n\n----------------------------------------\n\nTITLE: Query Results Including Data from Accumulo Shell\nDESCRIPTION: Output of the SELECT query showing all data in the scientists table, including the row inserted via Accumulo shell, demonstrating bidirectional compatibility.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/accumulo.rst.txt#2025-04-10_snippet_13\n\nLANGUAGE: none\nCODE:\n```\n recordkey |      name       | age |  birthday\n-----------+-----------------+-----+------------\n row1      | Grace Hopper    | 109 | 1906-12-09\n row2      | Alan Turing     | 103 | 1912-06-23\n row3      | Tim Berners-Lee |  60 | 1984-07-27\n(3 rows)\n```\n\n----------------------------------------\n\nTITLE: SQL JOIN Function Fix\nDESCRIPTION: Example of JOIN query functionality that was fixed to handle functions returning null on non-null input correctly.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.154.rst#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nJOIN\n```\n\n----------------------------------------\n\nTITLE: Configuring Distributed Joins in Presto\nDESCRIPTION: Shows the usage of the new distributed_join session property that allows enabling or disabling distributed joins.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.96.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSET SESSION distributed_join = true\n```\n\n----------------------------------------\n\nTITLE: Configuring Recursive Directory Scanning\nDESCRIPTION: Configuration property to enable recursive scanning of partition directories for data in Hive connector.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.101.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\nhive.recursive-directories\n```\n\n----------------------------------------\n\nTITLE: Configuring Presto on Spark Properties\nDESCRIPTION: Example configuration properties for Presto on Spark with task concurrency, worker threads, and writer count set to match the number of cores per executor in the Spark cluster.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/installation/spark.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\ntask.concurrency=4\ntask.max-worker-threads=4\ntask.writer-count=4\n```\n\n----------------------------------------\n\nTITLE: SQL Row Type Coercion Example\nDESCRIPTION: Demonstration of compatible ROW type operations between different data types\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.186.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nROW(INTEGER)\nROW(BIGINT)\n```\n\n----------------------------------------\n\nTITLE: Configuring System Access Control Properties in Presto\nDESCRIPTION: Example configuration file showing how to set up system access control in Presto. The configuration includes the access control name and custom properties that are passed to the SystemAccessControlFactory.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/develop/system-access-control.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\naccess-control.name=custom-access-control\ncustom-property1=custom-value1\ncustom-property2=custom-value2\n```\n\n----------------------------------------\n\nTITLE: Date Addition with Time Zone Handling\nDESCRIPTION: Examples demonstrating date addition behavior with time zones in Presto SQL.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.66.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT date_add('hour', 24, TIMESTAMP '2014-03-08 09:00:00');\n-- 2014-03-09 10:00:00.000\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT date_add('day', 1, TIMESTAMP '2014-03-08 09:00:00');\n-- 2014-03-09 09:00:00.000\n```\n\n----------------------------------------\n\nTITLE: Configuring Hive Connector for Alluxio Catalog Service\nDESCRIPTION: This snippet shows the configuration properties needed in the Presto catalog file to use the Alluxio Catalog Service. It specifies the connector name, metastore type, and Alluxio master address.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/hive.rst#2025-04-10_snippet_10\n\nLANGUAGE: properties\nCODE:\n```\nconnector.name=hive-hadoop2\nhive.metastore=alluxio\nhive.metastore.alluxio.master.address=HOSTNAME:PORT\n```\n\n----------------------------------------\n\nTITLE: Creating Table in Presto SQL (SQL)\nDESCRIPTION: This SQL snippet creates a new table in Presto, specifying the schema and connecting it to data stored in Alluxio.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/cache/service.rst.txt#2025-04-10_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\npresto:default> DROP TABLE IF EXISTS reason;\nDROP TABLE\npresto:default> CREATE TABLE reason (\n  r_reason_sk integer,\n  r_reason_id varchar,\n  r_reason_desc varchar\n) WITH (\n  external_location = 'alluxio://localhost:19998/example',\n  format = 'PARQUET'\n);\nCREATE TABLE\n```\n\n----------------------------------------\n\nTITLE: ROLLBACK Command Syntax in SQL\nDESCRIPTION: The syntax for the ROLLBACK command in SQL. It shows that the command can be used with or without the optional 'WORK' keyword.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/rollback.rst#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nROLLBACK [ WORK ]\n```\n\n----------------------------------------\n\nTITLE: Removing Presto Docker Container\nDESCRIPTION: Command to remove the stopped Presto Docker container. This completes the cleanup process, freeing up resources.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/installation/deploy-docker.rst#2025-04-10_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ndocker rm presto\n```\n\n----------------------------------------\n\nTITLE: SQL JOIN Function Fix\nDESCRIPTION: Example of JOIN query functionality that was fixed to handle functions returning null on non-null input correctly.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.154.rst#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nJOIN\n```\n\n----------------------------------------\n\nTITLE: Converting Pinot Binary Decimal to Double\nDESCRIPTION: Function that converts a Pinot binary decimal value to a double precision number using specified radix and scale parameters. Includes an option to return zero for null inputs.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/pinot.rst#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\npinot_binary_decimal_to_double(binary, bigIntegerRadix, scale, returnZeroOnNull) -> double\n```\n\n----------------------------------------\n\nTITLE: Configuring Cluster Initialization Settings in Presto\nDESCRIPTION: Configuration properties to reject queries during cluster initialization. Queries are rejected if the active worker count is below the required threshold while the coordinator has been running for less than the specified timeout.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.182.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nquery-manager.initialization-required-workers\nquery-manager.initialization-timeout\n```\n\n----------------------------------------\n\nTITLE: Unsupported Primary Key Creation Example\nDESCRIPTION: Example showing that PrestoDB doesn't support PRIMARY KEY constraints in CREATE TABLE statements.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/postgresql.rst#2025-04-10_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE users (\n        id INT PRIMARY KEY,\n        name VARCHAR,\n        email VARCHAR\n    );\n```\n\n----------------------------------------\n\nTITLE: New Murmur3 Hash Function Definition\nDESCRIPTION: New UDF function that computes a hash equivalent to MurmurHash3_x64_128 (Murmur3F) implementation in C++.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.264.rst#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nmurmur3_x64_128()\n```\n\n----------------------------------------\n\nTITLE: Configuring Kerberos Authentication for Presto Router\nDESCRIPTION: Additional configuration options for enabling Kerberos authentication in Presto Router.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/router/deployment.rst#2025-04-10_snippet_2\n\nLANGUAGE: none\nCODE:\n```\nquery-tracker.http-client.authentication.enabled=true\nquery-tracker.http-client.authentication.krb5.name-type=USER_NAME\nquery-tracker.http-client.authentication.krb5.principal=presto@REMOTE.BIZ\nquery-tracker.http-client.authentication.krb5.remote-service-name=HTTP/PRESTO@REMOTE.BIZ\nquery-tracker.http-client.authentication.krb5.service-principal-pattern=PATTERN\n```\n\n----------------------------------------\n\nTITLE: Configuring Hive Metastore Authentication with Kerberos in Presto\nDESCRIPTION: This configuration example demonstrates how to set up Kerberos authentication for the Hive metastore in Presto. It includes settings for the metastore service principal, client principal, and keytab file location.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/hive-security.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\nhive.metastore.authentication.type=KERBEROS\nhive.metastore.service.principal=hive/hive-metastore-host.example.com@EXAMPLE.COM\nhive.metastore.client.principal=presto@EXAMPLE.COM\nhive.metastore.client.keytab=/etc/presto/hive.keytab\n```\n\n----------------------------------------\n\nTITLE: Configuring ClickHouse Connector Properties\nDESCRIPTION: Basic configuration properties for connecting PrestoDB to a ClickHouse server, specifying the connector name, connection URL, user, and password.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/clickhouse.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nconnector.name=clickhouse\nclickhouse.connection-url=jdbc:clickhouse://host1:8123/\nclickhouse.connection-user=default\nclickhouse.connection-password=secret\n```\n\n----------------------------------------\n\nTITLE: Configuring JVM Options for Presto Router\nDESCRIPTION: Example JVM configuration for Presto Router, specifying garbage collection settings, memory allocation, and other JVM options.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/router/deployment.rst#2025-04-10_snippet_0\n\nLANGUAGE: none\nCODE:\n```\n-ea\n-XX:+UseG1GC\n-XX:G1HeapRegionSize=32M\n-XX:+UseGCOverheadLimit\n-XX:+ExplicitGCInvokesConcurrent\n-Xmx12G\n```\n\n----------------------------------------\n\nTITLE: Listing Tables in System Runtime Schema (SQL)\nDESCRIPTION: This SQL query shows all tables available in the system.runtime schema. It's useful for exploring the runtime-related information provided by the System connector.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/system.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nSHOW TABLES FROM system.runtime;\n```\n\n----------------------------------------\n\nTITLE: Starting Presto Server in Background on Apple Silicon Mac\nDESCRIPTION: Command to start the Presto service in the background on an Apple Silicon Mac, using the x86_64 architecture flag.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/installation/deploy-brew.rst.txt#2025-04-10_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\narch -x86_64 presto-server start\n```\n\n----------------------------------------\n\nTITLE: File Descriptor Count Query\nDESCRIPTION: SQL query to retrieve open and maximum file descriptor counts from each node.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/jmx.rst.txt#2025-04-10_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nSELECT openfiledescriptorcount, maxfiledescriptorcount\nFROM jmx.current.\"java.lang:type=operatingsystem\";\n```\n\n----------------------------------------\n\nTITLE: Listing Tables in System Runtime Schema\nDESCRIPTION: SQL query to list all tables within the system.runtime schema. This provides access to runtime-related tables containing information about nodes, queries, and tasks.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/system.rst#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSHOW TABLES FROM system.runtime;\n```\n\n----------------------------------------\n\nTITLE: Installing Presto on Intel Mac\nDESCRIPTION: Command to install Presto database using Homebrew on Intel Mac\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/installation/deploy-brew.rst#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbrew install prestodb\n```\n\n----------------------------------------\n\nTITLE: Configuring Aggregation Operator Unspill Memory Limit in Presto\nDESCRIPTION: Sets the memory limit for unspilling a single aggregation operator instance. This controls how much memory can be used when reading back data that was previously spilled to disk.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/admin/properties.rst#2025-04-10_snippet_17\n\nLANGUAGE: properties\nCODE:\n```\nexperimental.aggregation-operator-unspill-memory-limit\n```\n\n----------------------------------------\n\nTITLE: Configuring Table of Contents in reStructuredText for Presto Connectors\nDESCRIPTION: A reStructuredText directive that configures a table of contents for Presto connector documentation. The toctree directive is set with maxdepth of 1 and lists all available connector documentation pages.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector.rst#2025-04-10_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n    :maxdepth: 1\n\n    connector/accumulo\n    connector/bigquery\n    connector/blackhole\n    connector/cassandra\n    connector/clickhouse\n    connector/deltalake\n    connector/druid\n    connector/elasticsearch\n    connector/googlesheets\n    connector/hana\n    connector/hive\n    connector/hive-security\n    connector/hudi\n    connector/iceberg\n    connector/jmx\n    connector/kafka\n    connector/kafka-tutorial\n    connector/kudu\n    connector/larksheets\n    connector/localfile\n    connector/memory\n    connector/mongodb\n    connector/mysql\n    connector/oracle\n    connector/pinot\n    connector/postgresql\n    connector/prometheus\n    connector/redis\n    connector/redshift\n    connector/scylladb\n    connector/singlestore\n    connector/sqlserver\n    connector/system\n    connector/thrift\n    connector/tpcds\n    connector/tpch\n```\n\n----------------------------------------\n\nTITLE: Starting Presto CLI on Intel Mac\nDESCRIPTION: Command to start the Presto CLI, which is a terminal-based interactive shell for running queries on an Intel Mac.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/installation/deploy-brew.rst.txt#2025-04-10_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npresto\n```\n\n----------------------------------------\n\nTITLE: Configuring PrestoDB Distributed Sort Properties\nDESCRIPTION: Configuration settings for enabling distributed sort functionality in PrestoDB. Can be set via session property 'distributed_sort' or in coordinator's config.properties file as 'distributed-sort'.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/admin/dist-sort.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nquery.max-memory-per-node\ndistributed_sort\ndistributed-sort\n```\n\n----------------------------------------\n\nTITLE: Configuring Ignored Functions for Verifier\nDESCRIPTION: Configuration property for specifying functions to be ignored during result mismatch resolution in the Verifier. This allows auto-resolving result mismatches for queries that use certain functions.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.236.rst#2025-04-10_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\nignored-functions.functions\n```\n\n----------------------------------------\n\nTITLE: Configuring Presto Documentation Structure with RST\nDESCRIPTION: reStructuredText configuration that defines the documentation structure and table of contents for Presto. It uses toctree directive to organize documentation into major sections with a max depth of 2 levels.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/index.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n####################\nPresto Documentation\n####################\n\n.. toctree::\n    :maxdepth: 2\n\n    overview\n    installation\n    clients\n    security\n    admin\n    cache\n    optimizer\n    connector\n    plugin\n    functions\n    language\n    sql\n    migration\n    rest\n    ecosystem\n    router\n    develop\n    presto-cpp\n    release\n\n.. Note: If \"release\" is not the last item, the CSS must be updated.\n```\n\n----------------------------------------\n\nTITLE: Enabling JWT Authentication for Internal Communication in Presto\nDESCRIPTION: Configuration settings to enable JWT-based authentication for internal communication between Presto nodes, using a shared secret.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/security/internal-communication.rst.txt#2025-04-10_snippet_8\n\nLANGUAGE: none\nCODE:\n```\ninternal-communication.jwt.enabled=true\ninternal-communication.shared-secret=<secret>\n```\n\n----------------------------------------\n\nTITLE: Configuring Page Partitioning Buffer Size in Presto\nDESCRIPTION: Configuration property to control the buffer size used when repartitioning pages for exchanges in Presto. This setting allows fine-tuning of memory allocation during data exchange operations.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.144.2.rst#2025-04-10_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\ndriver.max-page-partitioning-buffer-size\n```\n\n----------------------------------------\n\nTITLE: Defining Lark Sheets App Secret JSON\nDESCRIPTION: JSON configuration file containing the app secret for Lark Sheets authentication.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/larksheets.rst#2025-04-10_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\"app-secret\": \"abcdefghijklmnopqrstuvwxyzabcdef\"}\n```\n\n----------------------------------------\n\nTITLE: Referencing Java Exception\nDESCRIPTION: Reference to a Java NullPointerException that was fixed during query teardown operations.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.65.rst#2025-04-10_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nNullPointerException\n```\n\n----------------------------------------\n\nTITLE: SQL Function Pattern Matching\nDESCRIPTION: New syntax for listing functions that match a specified pattern using SHOW FUNCTION LIKE.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.237.rst#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSHOW FUNCTION LIKE\n```\n\n----------------------------------------\n\nTITLE: Concatenating Multiple Arrays or Maps in Presto SQL\nDESCRIPTION: The concat() function for arrays and map_concat() function for maps now support concatenating more than two elements in a single call.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.168.rst#2025-04-10_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT concat(array1, array2, array3, array4);\nSELECT map_concat(map1, map2, map3, map4);\n```\n\n----------------------------------------\n\nTITLE: Accessing Presto Console URL\nDESCRIPTION: The default URL to access the Presto Console web interface.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/clients/presto-console.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: none\nCODE:\n```\nhttp://localhost:8080\n```\n\n----------------------------------------\n\nTITLE: Counting Records in Presto SQL\nDESCRIPTION: SQL query to count the number of records in the 'customer' table using Presto.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/kafka-tutorial.rst#2025-04-10_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nSELECT count(*) FROM customer;\n```\n\n----------------------------------------\n\nTITLE: Preparing Statement without Parameters\nDESCRIPTION: Example of preparing a SELECT statement that contains no parameters.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/describe-input.rst#2025-04-10_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nPREPARE my_select2 FROM\nSELECT * FROM nation;\n```\n\n----------------------------------------\n\nTITLE: Hidden Path Column Access in Hive Connector\nDESCRIPTION: Added predicate pushdown support for the hidden column \"$path\" in the Hive connector, allowing for more efficient filtering on file paths.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.183.rst.txt#2025-04-10_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\n\"$path\"\n```\n\n----------------------------------------\n\nTITLE: SHOW CREATE TABLE Syntax in Presto SQL\nDESCRIPTION: The syntax for the SHOW CREATE TABLE command in Presto, which takes a table name as its only parameter.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/show-create-table.rst#2025-04-10_snippet_0\n\nLANGUAGE: none\nCODE:\n```\nSHOW CREATE TABLE table_name\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Functions in Presto SQL\nDESCRIPTION: Adds support for the 'CREATE FUNCTION' statement, allowing users to define custom functions in Presto.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.229.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCREATE FUNCTION\n```\n\n----------------------------------------\n\nTITLE: Configuring Presto Resource Manager\nDESCRIPTION: Configuration for a Presto resource manager in a disaggregated coordinator setup. The resource manager aggregates data from coordinators and workers to provide a global view of the cluster.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/installation/deployment.rst.txt#2025-04-10_snippet_5\n\nLANGUAGE: none\nCODE:\n```\nresource-manager=true\nresource-manager-enabled=true\ncoordinator=false\nnode-scheduler.include-coordinator=false\nhttp-server.http.port=8080\nthrift.server.port=8081\nquery.max-memory=50GB\nquery.max-memory-per-node=1GB\ndiscovery-server.enabled=true\ndiscovery.uri=http://example.net:8080 (Point to resource manager host/vip)\nthrift.server.ssl.enabled=true\n```\n\n----------------------------------------\n\nTITLE: Updating Trust Store\nDESCRIPTION: Command to update the system trust store after adding new certificate\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/mongodb.rst.txt#2025-04-10_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nupdate-ca-trust\n```\n\n----------------------------------------\n\nTITLE: Adding Noisy Count If Gaussian Function in SQL\nDESCRIPTION: Introduces the noisy_count_if_gaussian function for conditional differential privacy calculations with optional random seed.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.284.rst.txt#2025-04-10_snippet_5\n\nLANGUAGE: SQL\nCODE:\n```\nnoisy_count_if_gaussian(condition, noiseScale[, randomSeed])\n```\n\n----------------------------------------\n\nTITLE: Redis Hash Table Definition\nDESCRIPTION: JSON configuration for Redis hash type table definition showing the structure for hash-specific value formats\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/redis.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"tableName\": ...,\n    \"schemaName\": ...,\n    \"value\": {\n        \"dataFormat\": \"hash\",\n        \"fields\": [\n            ...\n       ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Establishing Presto JDBC Connection in Java\nDESCRIPTION: Java code snippet demonstrating how to create a JDBC connection to a Presto database using the DriverManager class and a JDBC URL.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/installation/jdbc.rst#2025-04-10_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nString url = \"jdbc:presto://example.net:8080/hive/sales\";\nConnection connection = DriverManager.getConnection(url, \"test\", null);\n```\n\n----------------------------------------\n\nTITLE: CROSS JOIN Syntax in Presto SQL\nDESCRIPTION: A CROSS JOIN returns the Cartesian product of two relations. This can be specified using either explicit CROSS JOIN syntax or by listing multiple relations in the FROM clause.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/select.rst#2025-04-10_snippet_28\n\nLANGUAGE: sql\nCODE:\n```\nSELECT *\nFROM nation\nCROSS JOIN region;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT *\nFROM nation, region;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT n.name AS nation, r.name AS region\nFROM nation AS n\nCROSS JOIN region AS r\nORDER BY 1, 2;\n```\n\n----------------------------------------\n\nTITLE: String to Timestamp Parsing Function\nDESCRIPTION: Parses a string into a TIMESTAMP data type using Teradata-compatible format specifiers.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/teradata.rst.txt#2025-04-10_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nto_timestamp(string, format) -> timestamp\n```\n\n----------------------------------------\n\nTITLE: Installing Docker and Colima\nDESCRIPTION: Brew command to install Docker CLI tools and Colima virtual machine manager.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/installation/deploy-docker.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbrew install docker colima\n```\n\n----------------------------------------\n\nTITLE: Creating Table of Contents in ReStructuredText for Presto Installation\nDESCRIPTION: This snippet defines a table of contents in ReStructuredText format that organizes various Presto installation methods and integrations. The toctree directive creates a hierarchical structure with a maximum depth of 1 for the installation documentation.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/installation.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. toctree::\n    :maxdepth: 1\n\n    installation/deployment\n    installation/cli\n    installation/jdbc\n    installation/benchmark-driver\n    installation/tableau\n    installation/spark\n    installation/deploy-docker\n    installation/deploy-brew\n    installation/deploy-helm\n```\n\n----------------------------------------\n\nTITLE: Configuring Presto Web Connector URL for Tableau\nDESCRIPTION: This code snippet shows the URL format for connecting Tableau to Presto using the web connector. Users need to replace 'example.net:8080' with their Presto coordinator's hostname and port number.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/installation/tableau.rst#2025-04-10_snippet_0\n\nLANGUAGE: none\nCODE:\n```\nhttp://example.net:8080/tableau/presto-connector.html\n```\n\n----------------------------------------\n\nTITLE: Executing a Query in Presto\nDESCRIPTION: This SQL query demonstrates a complex aggregation query against the TPCH catalog in Presto.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/installation/deployment.rst.txt#2025-04-10_snippet_22\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  l.returnflag,\n  l.linestatus,\n  sum(l.quantity)                                       AS sum_qty,\n  sum(l.extendedprice)                                  AS sum_base_price,\n  sum(l.extendedprice * (1 - l.discount))               AS sum_disc_price,\n  sum(l.extendedprice * (1 - l.discount) * (1 + l.tax)) AS sum_charge,\n  avg(l.quantity)                                       AS avg_qty,\n  avg(l.extendedprice)                                  AS avg_price,\n  avg(l.discount)                                       AS avg_disc,\n  count(*)                                              AS count_order\nFROM\n  tpch.sf1.lineitem AS l\nWHERE\n  l.shipdate <= DATE '1998-12-01' - INTERVAL '90' DAY\nGROUP BY\n  l.returnflag,\n  l.linestatus\nORDER BY\n  l.returnflag,\n  l.linestatus;\n```\n\n----------------------------------------\n\nTITLE: Enabling HTTP Request Logging in Prestissimo\nDESCRIPTION: Configuration setting to enable HTTP request logging in Prestissimo. Logs are written to the standard log file.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/develop/worker-protocol.rst#2025-04-10_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\nhttp-server.enable-access-log=true\n```\n\n----------------------------------------\n\nTITLE: Active Directory User Bind Pattern\nDESCRIPTION: Configuration pattern for Active Directory LDAP authentication.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/security/ldap.rst.txt#2025-04-10_snippet_3\n\nLANGUAGE: properties\nCODE:\n```\nldap.user-bind-pattern=${USER}@corp.example.com\n```\n\n----------------------------------------\n\nTITLE: Loading Data into Kafka Topics using tpch-kafka in Bash\nDESCRIPTION: Command to run the kafka-tpch program, which loads TPC-H data into Kafka topics. It specifies the Kafka broker, topic prefix, and TPC-H data size.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/kafka-tutorial.rst#2025-04-10_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ ./kafka-tpch load --brokers localhost:9092 --prefix tpch. --tpch-type tiny\n```\n\n----------------------------------------\n\nTITLE: Setting Unified Grouped Execution in Presto\nDESCRIPTION: New configuration property and session property for unified grouped execution, replacing the previous join-specific property. Default is set to true.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.239.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\ngrouped-execution-enabled\n```\n\nLANGUAGE: SQL\nCODE:\n```\ngrouped_execution\n```\n\n----------------------------------------\n\nTITLE: Enabling Shadow Writes\nDESCRIPTION: Configuration option for transforming CREATE TABLE AS SELECT queries to write to temporary tables.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.151.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: config\nCODE:\n```\nshadow-writes.enabled\n```\n\n----------------------------------------\n\nTITLE: Password Validation Method in Java for Presto\nDESCRIPTION: This Java method implements password validation using PBKDF2WithHmacSHA256 with a fallback to PBKDF2WithHmacSHA1. It compares an input password against a hashed password, supporting both modern and legacy cryptographic standards.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/security/password-file.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n/**\n * @Deprecated using PBKDF2WithHmacSHA1 is deprecated and clients should switch to PBKDF2WithHmacSHA256\n */\npublic static boolean doesPBKDF2PasswordMatch(String inputPassword, String hashedPassword)\n{\n    PBKDF2Password password = PBKDF2Password.fromString(hashedPassword);\n\n    // Validate using PBKDF2WithHmacSHA256\n    if (validatePBKDF2Password(inputPassword, password, \"PBKDF2WithHmacSHA256\")) {\n        return true;\n    }\n\n    // Fallback to PBKDF2WithHmacSHA1\n    LOG.warn(\"Using deprecated PBKDF2WithHmacSHA1 for password validation.\");\n    return validatePBKDF2Password(inputPassword, password, \"PBKDF2WithHmacSHA1\");\n}\n```\n\n----------------------------------------\n\nTITLE: Adding array_union Function in SQL\nDESCRIPTION: Introduces the array_union function for Presto SQL queries. This function likely performs a union operation on arrays.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.152.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\narray_union()\n```\n\n----------------------------------------\n\nTITLE: Configuring Remote Task Error Duration in Presto\nDESCRIPTION: Configuration option to adjust the tolerance to communication errors for long running queries.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.163.rst#2025-04-10_snippet_3\n\nLANGUAGE: properties\nCODE:\n```\nquery.remote-task.max-error-duration\n```\n\n----------------------------------------\n\nTITLE: Sample Exchange Protocol Interaction Logs\nDESCRIPTION: Example log output showing an exchange protocol interaction between Presto components, including GET and DELETE requests for task results.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/develop/worker-protocol.rst#2025-04-10_snippet_3\n\nLANGUAGE: log\nCODE:\n```\nI0402 15:33:06.928076   625 AccessLogFilter.cpp:69] 2401:db00:126c:f2f:face:0:3e1:0 - - [2024-04-02 15:33:06] \"GET /v1/task/20240402_223203_00000_kg5tr.11.0.455.0/results/213/0 HTTP/1.1\" 200 0   57\nI0402 15:33:07.181629   625 AccessLogFilter.cpp:69] 2401:db00:126c:f2f:face:0:3e1:0 - - [2024-04-02 15:33:07] \"GET /v1/task/20240402_223203_00000_kg5tr.11.0.455.0/results/213/0 HTTP/1.1\" 200 94024   0\nI0402 15:33:25.392717   675 AccessLogFilter.cpp:69] 2401:db00:126c:f2f:face:0:3e1:0 - - [2024-04-02 15:33:25] \"GET /v1/task/20240402_223203_00000_kg5tr.11.0.455.0/results/213/1 HTTP/1.1\" 200 0   0\nI0402 15:33:25.393162   675 AccessLogFilter.cpp:69] 2401:db00:126c:f2f:face:0:3e1:0 - - [2024-04-02 15:33:25] \"DELETE /v1/task/20240402_223203_00000_kg5tr.11.0.455.0/results/213 HTTP/1.1\" 200 0   0\n```\n\n----------------------------------------\n\nTITLE: Querying Min/Max Partition Keys in SQL\nDESCRIPTION: Example queries showing metadata-only optimizations for partition key operations using min, max and distinct aggregations\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.80.rst#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT min(key), max(key) FROM t;\n\nSELECT DISTINCT key FROM t;\n\nSELECT count(DISTINCT key) FROM t;\n\nSELECT count(DISTINCT key + 5) FROM t;\n\nSELECT count(DISTINCT key) FROM (SELECT key FROM t ORDER BY 1 LIMIT 10);\n\nSELECT key1, count(DISTINCT key2) FROM t GROUP BY 1;\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL Function Namespace Manager in Presto\nDESCRIPTION: Configuration properties for setting up a MySQL-based function namespace manager that manages the 'example' catalog. This connects to a MySQL server and specifies table names for storing function namespaces and SQL functions.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/admin/function-namespace-managers.rst#2025-04-10_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nfunction-namespace-manager.name=mysql\ndatabase-url=jdbc:mysql://example.net:3306/database?user=root&password=password\nfunction-namespaces-table-name=example_function_namespaces\nfunctions-table-name=example_sql_functions\n```\n\n----------------------------------------\n\nTITLE: Iceberg Metadata Columns\nDESCRIPTION: Support for querying Iceberg metadata columns to get file information and sequence numbers.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.286.rst.txt#2025-04-10_snippet_13\n\nLANGUAGE: sql\nCODE:\n```\n\"$data_sequence_number\"\n```\n\nLANGUAGE: sql\nCODE:\n```\n\"$path\"\n```\n\n----------------------------------------\n\nTITLE: SHOW CREATE TABLE Output Format in Presto SQL\nDESCRIPTION: Sample output from the SHOW CREATE TABLE command, showing the complete CREATE TABLE statement including column definitions, data types, and table properties such as format and partitioning.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/sql/show-create-table.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE tpch.sf1.orders (\n   orderkey bigint,\n   orderstatus varchar,\n   totalprice double,\n   orderdate varchar\n)\nWITH (\n   format = 'ORC',\n   partitioned_by = ARRAY['orderdate']\n)\n```\n\n----------------------------------------\n\nTITLE: Enabling Metadata Call Preprocessing in Presto SQL\nDESCRIPTION: Sets the pre_process_metadata_calls session property to enable preprocessing for metadata calls required for analysis.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.282.rst#2025-04-10_snippet_7\n\nLANGUAGE: SQL\nCODE:\n```\nSET SESSION pre_process_metadata_calls = true;\n```\n\n----------------------------------------\n\nTITLE: Configuring Presto Hive Connector\nDESCRIPTION: This configuration file sets up the Hive connector for Presto, specifying the Hive Metastore URI and AWS credentials for S3 access.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/installation/deployment.rst.txt#2025-04-10_snippet_16\n\nLANGUAGE: none\nCODE:\n```\nconnector.name=hive-hadoop2\nhive.metastore.uri=thrift://localhost:9083\nhive.s3.aws-access-key=<Your AWS Access Key>\nhive.s3.aws-secret-key=<Your AWS Secret Key>\n```\n\n----------------------------------------\n\nTITLE: Describing Kudu Table Structure\nDESCRIPTION: SQL command to view the structure and properties of a Kudu table.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/kudu.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nDESCRIBE kudu.default.users;\n```\n\n----------------------------------------\n\nTITLE: Enabling Shadow Writes\nDESCRIPTION: Configuration option for transforming CREATE TABLE AS SELECT queries to write to temporary tables.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.151.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: config\nCODE:\n```\nshadow-writes.enabled\n```\n\n----------------------------------------\n\nTITLE: Referencing Prometheus Connector Documentation in reStructuredText\nDESCRIPTION: This snippet demonstrates how to create a reference to the Prometheus connector documentation using the reStructuredText format.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.260.rst#2025-04-10_snippet_2\n\nLANGUAGE: reStructuredText\nCODE:\n```\n:doc:`/connector/prometheus`\n```\n\n----------------------------------------\n\nTITLE: Java Cipher Suite Configuration for HTTPS\nDESCRIPTION: Optional configuration for specifying allowed cipher suites to optimize CPU usage when using HTTPS.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/security/server.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\nhttp-server.https.included-cipher=TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA256\nhttp-server.https.excluded-cipher=\n```\n\n----------------------------------------\n\nTITLE: Configuring Memory Connector in Presto\nDESCRIPTION: Configuration for the Memory connector in Presto, specifying the connector name and maximum data per node.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/memory.rst#2025-04-10_snippet_0\n\nLANGUAGE: none\nCODE:\n```\nconnector.name=memory\nmemory.max-data-per-node=128MB\n```\n\n----------------------------------------\n\nTITLE: Starting Presto as a Daemon\nDESCRIPTION: This command starts Presto as a background daemon process using the launcher script.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/installation/deployment.rst.txt#2025-04-10_snippet_10\n\nLANGUAGE: none\nCODE:\n```\nbin/launcher start\n```\n\n----------------------------------------\n\nTITLE: Starting Colima\nDESCRIPTION: Command to start Colima, which sets up a Docker environment on Mac OS X. This creates a default VM with 2 CPUs, 2GB memory, and 60GB storage.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/installation/deploy-docker.rst#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncolima start\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum Split Batch Size Configuration in Presto\nDESCRIPTION: Configuration property introduced in Presto 0.157 to control the minimum number of splits to consider for scheduling per batch.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.157.rst#2025-04-10_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\nquery.min-schedule-split-batch-size\n```\n\n----------------------------------------\n\nTITLE: Installing Homebrew on Mac OS X\nDESCRIPTION: Command to install the Homebrew package manager on Mac OS X. This is a prerequisite for installing Docker and Colima.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/installation/deploy-docker.rst#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)\"\n```\n\n----------------------------------------\n\nTITLE: Configuring RST Documentation Structure\nDESCRIPTION: ReStructuredText configuration for Presto documentation table of contents, specifying documentation hierarchy with overview sections.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/overview.rst#2025-04-10_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n    :maxdepth: 1\n\n    overview/use-cases\n    overview/concepts\n```\n\n----------------------------------------\n\nTITLE: Session Property for Dictionary Encoded Data Optimization in Presto\nDESCRIPTION: Session property that can be used to enable or disable the dictionary encoded data optimization feature in Presto 0.130 for the current session.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.130.rst#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\ncolumnar_processing_dictionary\n```\n\n----------------------------------------\n\nTITLE: ANSI SQL Syntax for Identifiers and Strings in Presto\nDESCRIPTION: Demonstrates the correct usage of single quotes for strings and double quotes for identifiers in Presto, adhering to ANSI SQL standards.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/migration/from-hive.rst#2025-04-10_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT name AS \"User Name\"\nFROM \"7day_active\"\nWHERE name = 'foo'\n```\n\n----------------------------------------\n\nTITLE: Installing Homebrew on Intel Mac\nDESCRIPTION: Command to install Homebrew on an Intel Mac, which is required before installing Presto.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/installation/deploy-brew.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)\"\n```\n\n----------------------------------------\n\nTITLE: Creating Kerberos Principal and Keytab\nDESCRIPTION: Commands for creating a Kerberos principal and generating a keytab file using kadmin.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/security/cli.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: none\nCODE:\n```\nkadmin\n> addprinc -randkey someuser@EXAMPLE.COM\n> ktadd -k /home/someuser/someuser.keytab someuser@EXAMPLE.COM\n```\n\n----------------------------------------\n\nTITLE: Casting to INTERVAL Type\nDESCRIPTION: New support for casting values to INTERVAL data types, expanding type conversion capabilities.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.190.rst.txt#2025-04-10_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nINTERVAL\n```\n\n----------------------------------------\n\nTITLE: SQL Substring Function\nDESCRIPTION: New substring function implementation.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.142.rst#2025-04-10_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nsubstring\n```\n\n----------------------------------------\n\nTITLE: Inserting Data into a Black Hole Connector Table\nDESCRIPTION: Example SQL command to insert data into a table created in the Black Hole connector. All inserted data will be discarded.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/blackhole.rst#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO blackhole.test.nation\nSELECT * FROM tpch.tiny.nation;\n```\n\n----------------------------------------\n\nTITLE: Configuring File Renaming in Hive Connector\nDESCRIPTION: Adds support for file renaming in the Hive connector, which can be enabled through a new configuration property. This feature enhances file management capabilities in Hive.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.242.rst#2025-04-10_snippet_3\n\nLANGUAGE: restructuredtext\nCODE:\n```\n* Add support for file renaming for Hive connector. This can be enabled with the ``hive.file_renaming_enabled`` configuration property.\n```\n\n----------------------------------------\n\nTITLE: Presto Validation Configuration Example\nDESCRIPTION: Example configuration properties for the Presto Verifier tool showing string validation and floating point checks\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/admin/verifier.rst#2025-04-10_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nvalidate-string-as-double\n```\n\n----------------------------------------\n\nTITLE: SQL COALESCE Function Example\nDESCRIPTION: Example of COALESCE function usage in FULL OUTER JOIN operations.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.218.rst.txt#2025-04-10_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\nCOALESCE\n```\n\n----------------------------------------\n\nTITLE: Implementing Output Function for Average Aggregation in Java\nDESCRIPTION: Implementation of the output function for an average aggregation that handles the final calculation by dividing sum by count. Uses LongAndDoubleState to store intermediate values and BlockBuilder for output.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/develop/functions.rst.txt#2025-04-10_snippet_7\n\nLANGUAGE: java\nCODE:\n```\n@OutputFunction(StandardTypes.DOUBLE)\npublic static void output(LongAndDoubleState state, BlockBuilder out)\n{\n    long count = state.getLong();\n    if (count == 0) {\n        out.appendNull();\n    }\n    else {\n        double value = state.getDouble();\n        DOUBLE.writeDouble(out, value / count);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Session Property for Partial Aggregation Control in Presto\nDESCRIPTION: Session property introduced in Presto 0.201 that allows users to disable partial aggregations for queries that don't benefit from them.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.201.rst#2025-04-10_snippet_1\n\nLANGUAGE: plain\nCODE:\n```\nprefer-partial-aggregation\n```\n\n----------------------------------------\n\nTITLE: Formatting Dates with Localization in Japanese\nDESCRIPTION: Demonstrates how the date_format function displays month names in Japanese when the session locale is set to Japanese.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.66.rst#2025-04-10_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nSELECT date_format(TIMESTAMP '2001-01-09 09:04', '%M'); -- 1月\n```\n\n----------------------------------------\n\nTITLE: CTE Materialization Session Property\nDESCRIPTION: Session property to specify the number of buckets or writers to be used when using Common Table Expression (CTE) Materialization.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.286.rst.txt#2025-04-10_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\ncte_hash_partition_count\n```\n\n----------------------------------------\n\nTITLE: Renaming a View with IF EXISTS Clause in SQL\nDESCRIPTION: This example shows how to rename a view from 'users' to 'people' using the ALTER VIEW RENAME TO statement with the IF EXISTS clause to prevent errors if the view doesn't exist.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/alter-view.rst#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nALTER VIEW IF EXISTS users RENAME TO people;\n```\n\n----------------------------------------\n\nTITLE: Using Filtered Aggregations in Presto\nDESCRIPTION: Shows the syntax for filtered aggregations, a new feature added in Presto 0.156 that allows filtering rows before they are processed by an aggregation function.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.156.rst#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT sum(a) FILTER (WHERE b > 0) FROM ...\n```\n\n----------------------------------------\n\nTITLE: Renaming Presto CLI JAR File\nDESCRIPTION: Command to rename the downloaded Presto CLI JAR file to 'presto' for easier access.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/installation/cli.rst#2025-04-10_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmv  presto-cli-0.286-executable.jar presto\n```\n\n----------------------------------------\n\nTITLE: Output of TPCDS Schemas Query\nDESCRIPTION: This snippet shows the expected output when querying available schemas in the TPCDS connector. It lists all scale factors and the special 'tiny' schema.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/tpcds.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n       Schema\n--------------------\n information_schema\n sf1\n sf10\n sf100\n sf1000\n sf10000\n sf100000\n sf300\n sf3000\n sf30000\n tiny\n(11 rows)\n```\n\n----------------------------------------\n\nTITLE: Accessing ORC Columns by Name in Hive Catalog\nDESCRIPTION: Configuration setting to enable accessing ORC columns by name instead of ordinal position in Hive tables. This is set in the Hive catalog properties file.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.137.rst#2025-04-10_snippet_0\n\nLANGUAGE: Properties\nCODE:\n```\nhive.orc.use-column-names=true\n```\n\n----------------------------------------\n\nTITLE: Configuring Legacy System Pool in Presto 0.201\nDESCRIPTION: Configuration option to restore the legacy behavior of the system memory pool which is now unused by default in Presto 0.201.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.201.rst#2025-04-10_snippet_0\n\nLANGUAGE: plain\nCODE:\n```\ndeprecated.legacy-system-pool-enabled\n```\n\n----------------------------------------\n\nTITLE: Generating Java Keystore Using Keytool\nDESCRIPTION: Command to generate a Java keystore file with wildcard certificate for secure communication.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/security/internal-communication.rst#2025-04-10_snippet_3\n\nLANGUAGE: none\nCODE:\n```\nkeytool -genkeypair -alias example.com -keyalg RSA -keystore keystore.jks\n```\n\n----------------------------------------\n\nTITLE: Casting Various Data Types to JSON in Presto\nDESCRIPTION: Examples of casting primitive types, arrays, maps, and row types to JSON. Shows how NULL values are handled and demonstrates the behavior for nested data structures.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/json.rst#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT CAST(NULL AS JSON); -- NULL\nSELECT CAST(1 AS JSON); -- JSON '1'\nSELECT CAST(9223372036854775807 AS JSON); -- JSON '9223372036854775807'\nSELECT CAST('abc' AS JSON); -- JSON '\"abc\"'\nSELECT CAST(true AS JSON); -- JSON 'true'\nSELECT CAST(1.234 AS JSON); -- JSON '1.234'\nSELECT CAST(ARRAY[1, 23, 456] AS JSON); -- JSON '[1,23,456]'\nSELECT CAST(ARRAY[1, NULL, 456] AS JSON); -- JSON '[1,null,456]'\nSELECT CAST(ARRAY[ARRAY[1, 23], ARRAY[456]] AS JSON); -- JSON '[[1,23],[456]]'\nSELECT CAST(MAP_FROM_ENTRIES(ARRAY[('k1', 1), ('k2', 23), ('k3', 456)]) AS JSON); -- JSON '{\"k1\":1,\"k2\":23,\"k3\":456}'\nSELECT CAST(CAST(ROW(123, 'abc', true) AS ROW(v1 BIGINT, v2 VARCHAR, v3 BOOLEAN)) AS JSON); -- JSON '[123,\"abc\",true]'\n```\n\n----------------------------------------\n\nTITLE: Adding a Column to an Existing Kudu Table\nDESCRIPTION: Example of using ALTER TABLE to add a new column to an existing Kudu table with specific column properties.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/kudu.rst#2025-04-10_snippet_13\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE mytable ADD COLUMN extraInfo varchar WITH (nullable = true, encoding = 'plain')\n```\n\n----------------------------------------\n\nTITLE: Configuring Query Stage Count Warning Threshold in Presto\nDESCRIPTION: This configuration option sets a threshold for the number of stages in a query. When exceeded, a 'TOO_MANY_STAGES' warning is raised. It helps in identifying potentially problematic queries.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.217.rst#2025-04-10_snippet_0\n\nLANGUAGE: Properties\nCODE:\n```\nquery.stage-count-warning-threshold=<value>\n```\n\n----------------------------------------\n\nTITLE: Running Presto Docker Container\nDESCRIPTION: Docker command to run Presto server container with mounted configuration files and port mapping.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/installation/deploy-docker.rst.txt#2025-04-10_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -p 8080:8080 -it -v ./config.properties:/opt/presto-server/etc/config.properties -v ./jvm.config:/opt/presto-server/etc/jvm.config --name presto prestodb/presto:latest\n```\n\n----------------------------------------\n\nTITLE: Referencing Function Names in Markdown\nDESCRIPTION: Demonstrates Markdown syntax for referencing Presto functions lower() and upper() that were fixed for handling the code point U+10FFFF.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.107.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n:func:`!lower` and :func:`!upper`\n```\n\n----------------------------------------\n\nTITLE: Querying Black Hole Connector Table in Presto\nDESCRIPTION: This SQL query selects the count of rows from a table in the Black Hole connector. It will always return zero.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/blackhole.rst.txt#2025-04-10_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT count(*) FROM blackhole.test.nation;\n```\n\n----------------------------------------\n\nTITLE: Installing Homebrew on Apple Silicon Mac\nDESCRIPTION: Command to install x86_64 version of Homebrew on Apple Silicon Mac\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/installation/deploy-brew.rst#2025-04-10_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\narch -x86_64 /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Group Principal Access in Presto\nDESCRIPTION: JSON configuration example showing how to allow users to use their Kerberos principal names and how to grant specific users access to a group principal, combining both direct and group-based authentication.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/security/built-in-system-access-control.rst.txt#2025-04-10_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"catalogs\": [\n    {\n      \"allow\": true\n    }\n  ],\n  \"principals\": [\n    {\n      \"principal\": \"([^/]+)/?.*@example.net\",\n      \"principal_to_user\": \"$1\",\n      \"allow\": true\n    },\n    {\n      \"principal\": \"group@example.net\",\n      \"user\": \"alice|bob\",\n      \"allow\": true\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Indexed Columns in Presto\nDESCRIPTION: Example of querying data using indexed columns with a WHERE clause.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/accumulo.rst.txt#2025-04-10_snippet_19\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM myschema.scientists WHERE age = 109;\n```\n\n----------------------------------------\n\nTITLE: Configuring Dictionary Encoded Data Optimization in Presto 0.130\nDESCRIPTION: Configuration options for the dictionary encoded data optimization feature in Presto 0.130. This can be configured either via the system-wide optimizer.columnar-processing-dictionary property or the session-specific columnar_processing_dictionary property.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.130.rst#2025-04-10_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\noptimizer.columnar-processing-dictionary\n```\n\n----------------------------------------\n\nTITLE: Configuring Hive Storage Format and Table Format Respect\nDESCRIPTION: Shows the new session properties for setting Hive storage format and respecting table format, corresponding to existing configuration properties.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.194.rst#2025-04-10_snippet_5\n\nLANGUAGE: SQL\nCODE:\n```\nhive_storage_format, respect_table_format\n```\n\n----------------------------------------\n\nTITLE: Using EXISTS with Subquery and LIMIT in SQL\nDESCRIPTION: Refers to a fix for planning failures when using a correlated subquery with a LIMIT clause within an EXISTS condition.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.203.rst#2025-04-10_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nEXISTS (...LIMIT...)\n```\n\n----------------------------------------\n\nTITLE: Configuring Query Override Settings for Presto Verifier\nDESCRIPTION: This configuration table specifies settings for overriding query metadata before verification. It includes options for catalog, schema, username, password, and session property overrides.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/admin/verifier.rst.txt#2025-04-10_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n================================================ ===============================================================================\nName                                             Description\n================================================ ===============================================================================\n\"control.catalog-override\"                     The catalog to be applied to all queries if specified.\n\"control.schema-override\"                      The schema to be applied to all queries if specified.\n\"control.username-override\"                    The username to be applied to all queries if specified.\n\"control.password-override\"                    The password to be applied to all queries if specified.\n\"control.session-properties-override-strategy\" Supports 3 values. \"NO_ACTION\": Use the session properties as specified for\n                                                 each query. \"OVERRIDE\": Merge the session properties of each query with the\n                                                 override, with override being the dominant. \"SUBSTITUTE\", The session\n                                                 properties of each query is replaced with the override.\n\"control.session-properties-override\"          The session property to be applied to all queries.\n================================================ ===============================================================================\n```\n\n----------------------------------------\n\nTITLE: Setting Experimental Binary Transport Configuration in Presto\nDESCRIPTION: Configuration property to enable experimental binary encoding for coordinator-to-worker communication which may improve coordinator scalability and reduce resource usage.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.218.rst#2025-04-10_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nexperimental.internal-communication.binary-transport-enabled\n```\n\n----------------------------------------\n\nTITLE: Setting HTTP Timeout Threads in Presto\nDESCRIPTION: Configures the number of threads used to handle timeouts when generating HTTP responses. Increase if all threads are frequently in use.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/admin/properties.rst.txt#2025-04-10_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\ntask.http-timeout-threads:\n  Type: integer\n  Minimum value: 1\n  Default value: 3\n```\n\n----------------------------------------\n\nTITLE: Task Join Concurrency Configuration\nDESCRIPTION: Experimental configuration parameter for increasing concurrency on the probe side of joins.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.139.rst#2025-04-10_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\ntask.join-concurrency\n```\n\n----------------------------------------\n\nTITLE: Creating a Role with Specified Admin in PrestoDB SQL\nDESCRIPTION: This example shows how to create a role named 'moderator' and assign the user 'bob' as its admin.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/sql/create-role.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nCREATE ROLE moderator WITH ADMIN USER bob;\n```\n\n----------------------------------------\n\nTITLE: Using array_intersect Function in SQL\nDESCRIPTION: Fix for the array_intersect function to ensure deterministic behavior when handling single parameter array<array<T>> with null inputs, regardless of input order.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.290.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT array_intersect(ARRAY[ARRAY[1, null], ARRAY[2, 3]])\n```\n\n----------------------------------------\n\nTITLE: Implementing Client Request Filter in Java\nDESCRIPTION: Interface components that need to be implemented for header customization in Presto. The ClientRequestFilterFactory creates filter instances and defines filter names, while ClientRequestFilter provides methods for header management.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/develop/client-request-filter.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: java\nCODE:\n```\ninterface ClientRequestFilterFactory {\n    String getName();\n    ClientRequestFilter create();\n}\n\ninterface ClientRequestFilter {\n    boolean getExtraHeaders();\n    List<String> getHeaderNames();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Maximum Partitions per Scan in Hive for Presto\nDESCRIPTION: Introduces a new configuration option 'hive.max-partitions-per-scan' to limit the number of partitions that can be read in a single table scan. The default value is set to 100,000 partitions.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.159.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nhive.max-partitions-per-scan=100000\n```\n\n----------------------------------------\n\nTITLE: Enabling Logging for History-Based Optimizer in PrestoDB\nDESCRIPTION: Session property to log equivalent plans and canonicalized plans used by the History-Based Optimizer (HBO).\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.287.rst.txt#2025-04-10_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSET SESSION log_query_plans_used_in_history_based_optimizer = true;\n```\n\n----------------------------------------\n\nTITLE: Removing Duplicate Values from Array in Presto SQL\nDESCRIPTION: Shows how to use array_distinct function to remove duplicate values from an array, including handling of null values and complex types.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/array.rst.txt#2025-04-10_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSELECT array_distinct(ARRAY [1, 2, null, null, 2]) -- ARRAY[1, 2, null]\nSELECT array_distinct(ARRAY [ROW(1, null), ROW (1, null)] -- ARRAY[ROW(1, null)\n```\n\n----------------------------------------\n\nTITLE: Using JSON values in GROUP BY expressions\nDESCRIPTION: Code reference showing the syntax for using JSON values in GROUP BY clauses, which was fixed in this release.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.85.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n``JSON`` values in ``GROUP BY``\n```\n\n----------------------------------------\n\nTITLE: Creating Internal Accumulo Table with Indexed Columns in Presto SQL\nDESCRIPTION: SQL statement to create an internal table in Presto that maps to an Accumulo table, with specified indexed columns. This is used in the example of converting from internal to external table.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/accumulo.rst#2025-04-10_snippet_26\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE foo.bar (a VARCHAR, b BIGINT, c DATE)\nWITH (\n    index_columns = 'b,c'\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Response Threads in Presto\nDESCRIPTION: Sets the maximum number of threads for handling HTTP responses in Presto. More threads can help with high concurrent queries or large clusters.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/admin/properties.rst#2025-04-10_snippet_29\n\nLANGUAGE: properties\nCODE:\n```\ntask.http-response-threads=100\n```\n\n----------------------------------------\n\nTITLE: Setting task_writer_count Session Property in Presto\nDESCRIPTION: The task_writer_count session property is added to set the task.writer-count. It allows configuration of the number of writers per task.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.102.rst#2025-04-10_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nSET SESSION task_writer_count = 4;\n```\n\n----------------------------------------\n\nTITLE: Configuring Determinism Analyzer for Presto Verifier\nDESCRIPTION: This configuration table specifies settings for the determinism analyzer in the Presto Verifier. It includes options for teardown queries, maximum analysis runs, and handling of non-deterministic catalogs.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/admin/verifier.rst.txt#2025-04-10_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\n=========================================== ===============================================================================\nName                                        Description\n=========================================== ===============================================================================\n\"determinism.run-teardown\"                Whether to run teardown queries for tables produced in determinism analysis.\n\"determinism.max-analysis-runs\"           Maximum number of additional control runs to check for the determinism of the\n                                            control query.\n\"determinism.handle-limit-query\"          Whether to enable the special handling for queries with a top level \"LIMIT\"\n                                            clause.\n\"determinism.non-deterministic-catalogs\"  A comma-separated list of non-deterministic catalogs. Queries referencing table\n                                            from those catalogs are treated as non-deterministic.\n=========================================== ===============================================================================\n```\n\n----------------------------------------\n\nTITLE: Executing Group By Query with Single Cardinality Column in SQL\nDESCRIPTION: This SQL query demonstrates a scenario where a GROUP BY clause is used with a single cardinality column. The query selects column c1 and the sum of c2 from table t, filtering for rows where c1 equals 'foo', and grouping by c1.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.206.rst#2025-04-10_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT c1, sum(c2) FROM t WHERE c1 = 'foo' GROUP BY c1\n```\n\n----------------------------------------\n\nTITLE: RST Table of Contents Configuration\nDESCRIPTION: Sphinx documentation toctree directive that configures the structure of migration-related documentation with a maximum depth of 1 level, including a link to Hive migration guide.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/migration.rst#2025-04-10_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n    :maxdepth: 1\n\n    migration/from-hive\n```\n\n----------------------------------------\n\nTITLE: Defining toctree for Presto Ecosystem Documentation in reStructuredText\nDESCRIPTION: A reStructuredText toctree directive that defines the structure for the Presto ecosystem documentation. It sets a maximum depth of 1 and links to the ecosystem/list page.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/ecosystem.rst#2025-04-10_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. toctree::\n    :maxdepth: 1\n\n    ecosystem/list\n```\n\n----------------------------------------\n\nTITLE: Optimizing Array Distinct for BigInt Arrays in Presto SQL\nDESCRIPTION: The array_distinct function is optimized for arrays of bigint type, improving performance when removing duplicates from large integer arrays.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.140.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\narray_distinct(array(bigint))\n```\n\n----------------------------------------\n\nTITLE: Connecting to Presto CLI in Docker\nDESCRIPTION: This command connects to the Presto CLI inside the running Docker container.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/installation/deployment.rst.txt#2025-04-10_snippet_21\n\nLANGUAGE: none\nCODE:\n```\ndocker exec -it presto presto\n```\n\n----------------------------------------\n\nTITLE: Starting Presto Router as a Daemon\nDESCRIPTION: Command to start the Presto Router service in daemon mode, running in the background with logs directed to the configured log files.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/router/deployment.rst.txt#2025-04-10_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nbin/launcher start\n```\n\n----------------------------------------\n\nTITLE: Configuration Property for Binary Transport\nDESCRIPTION: Experimental configuration property to enable binary encoding for coordinator-to-worker communication to improve coordinator scalability and reduce resource usage.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.218.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: Properties\nCODE:\n```\nexperimental.internal-communication.binary-transport-enabled\n```\n\n----------------------------------------\n\nTITLE: Initiating Graceful Shutdown for Presto Workers via HTTP PUT Request\nDESCRIPTION: Instructs a Presto worker to initiate graceful shutdown by sending a PUT request to the /v1/info/state endpoint with the body 'SHUTTING_DOWN'. After this, the worker stops accepting new tasks and exits once all existing tasks are completed.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.128.rst#2025-04-10_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPUT /v1/info/state\n\n\"SHUTTING_DOWN\"\n```\n\n----------------------------------------\n\nTITLE: Starting Presto Router as a Daemon\nDESCRIPTION: Command to start Presto Router as a background daemon process.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/router/deployment.rst#2025-04-10_snippet_4\n\nLANGUAGE: none\nCODE:\n```\nbin/launcher start\n```\n\n----------------------------------------\n\nTITLE: Configuring Hive Connector in Presto (Properties)\nDESCRIPTION: This snippet shows the configuration for the Hive connector in Presto's hive.properties file. It specifies the connector name and the Hive metastore URI.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/cache/service.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nconnector.name=hive-hadoop2\nhive.metastore.uri=thrift://localhost:9083\n```\n\n----------------------------------------\n\nTITLE: Referencing ST_ExteriorRing Function in SQL\nDESCRIPTION: Mentions the ST_ExteriorRing function, which now only accepts polygons as input.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.205.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nST_ExteriorRing\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Provider Properties\nDESCRIPTION: Sample configuration for redis-provider.properties file showing required settings for Redis HBO Provider\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/plugin/redis-hbo-provider.rst#2025-04-10_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\ncoordinator=true\nhbo.redis-provider.enabled=true\nhbo.redis-provider.total-fetch-timeoutms=5000\nhbo.redis-provider.total-set-timeoutms=5000\nhbo.redis-provider.default-ttl-seconds=4320000\nhbo.redis-provider.cluster-mode-enabled=true\nhbo.redis-provider.server_uri=redis://localhost:7001/\n```\n\n----------------------------------------\n\nTITLE: Retrieving Specific Task Response Example in Presto Task API (JSON)\nDESCRIPTION: Example JSON response from the GET /v1/task/{taskId} endpoint showing detailed information about a completed task in the FINISHED state. The response includes comprehensive task statistics, execution metrics, and detailed operator summaries with performance data.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/rest/task.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n\"taskId\" : \"20140115_170528_00004_dk5x2.0.0\",\n\"version\" : 42,\n\"state\" : \"FINISHED\",\n\"self\" : \"http://10.193.207.128:8080/v1/task/20140115_170528_00004_dk5x2.0.0\",\n\"lastHeartbeat\" : \"2014-01-15T12:12:12.518-05:00\",\n\"outputBuffers\" : {\n  \"state\" : \"FINISHED\",\n  \"masterSequenceId\" : 0,\n  \"pagesAdded\" : 1,\n  \"buffers\" : [ {\n    \"bufferId\" : \"out\",\n    \"finished\" : true,\n    \"bufferedPages\" : 0,\n    \"pagesSent\" : 1\n  } ]\n},\n\"noMoreSplits\" : [ \"8\" ],\n\"stats\" : {\n  \"createTime\" : \"2014-01-15T12:12:08.520-05:00\",\n  \"startTime\" : \"2014-01-15T12:12:08.526-05:00\",\n  \"endTime\" : \"2014-01-15T12:12:12.518-05:00\",\n  \"elapsedTime\" : \"4.00s\",\n  \"queuedTime\" : \"6.39ms\",\n  \"totalDrivers\" : 1,\n  \"queuedDrivers\" : 0,\n  \"runningDrivers\" : 0,\n  \"completedDrivers\" : 1,\n  \"memoryReservation\" : \"174.76kB\",\n  \"totalScheduledTime\" : \"4.19ms\",\n  \"totalCpuTime\" : \"4.09ms\",\n  \"totalBlockedTime\" : \"29.50ms\",\n  \"rawInputDataSize\" : \"10.90kB\",\n  \"rawInputPositions\" : 154,\n  \"processedInputDataSize\" : \"10.90kB\",\n  \"processedInputPositions\" : 154,\n  \"outputDataSize\" : \"10.90kB\",\n  \"outputPositions\" : 154,\n  \"pipelines\" : [ {\n    \"inputPipeline\" : true,\n    \"outputPipeline\" : true,\n    \"totalDrivers\" : 1,\n    \"queuedDrivers\" : 0,\n    \"runningDrivers\" : 0,\n    \"completedDrivers\" : 1,\n    \"memoryReservation\" : \"0B\",\n    \"queuedTime\" : {\n      \"maxError\" : 0.0,\n      \"count\" : 1.0,\n      \"total\" : 5857000.0,\n      \"p01\" : 5857000,\n      \"p05\" : 5857000,\n      \"p10\" : 5857000,\n      \"p25\" : 5857000,\n      \"p50\" : 5857000,\n      \"p75\" : 5857000,\n      \"p90\" : 5857000,\n      \"p95\" : 5857000,\n      \"p99\" : 5857000,\n      \"min\" : 5857000,\n      \"max\" : 5857000\n    },\n    \"elapsedTime\" : {\n      \"maxError\" : 0.0,\n      \"count\" : 1.0,\n      \"total\" : 4.1812E7,\n      \"p01\" : 41812000,\n      \"p05\" : 41812000,\n      \"p10\" : 41812000,\n      \"p25\" : 41812000,\n      \"p50\" : 41812000,\n      \"p75\" : 41812000,\n      \"p90\" : 41812000,\n      \"p95\" : 41812000,\n      \"p99\" : 41812000,\n      \"min\" : 41812000,\n      \"max\" : 41812000\n    },\n    \"totalScheduledTime\" : \"4.19ms\",\n    \"totalCpuTime\" : \"4.09ms\",\n    \"totalBlockedTime\" : \"29.50ms\",\n    \"rawInputDataSize\" : \"10.90kB\",\n    \"rawInputPositions\" : 154,\n    \"processedInputDataSize\" : \"10.90kB\",\n    \"processedInputPositions\" : 154,\n    \"outputDataSize\" : \"10.90kB\",\n    \"outputPositions\" : 154,\n    \"operatorSummaries\" : [ {\n      \"operatorId\" : 0,\n      \"operatorType\" : \"ExchangeOperator\",\n      \"addInputCalls\" : 0,\n      \"addInputWall\" : \"0.00ns\",\n      \"addInputCpu\" : \"0.00ns\",\n      \"addInputUser\" : \"0.00ns\",\n      \"inputDataSize\" : \"10.90kB\",\n      \"inputPositions\" : 154,\n      \"getOutputCalls\" : 1,\n      \"getOutputWall\" : \"146.00us\",\n      \"getOutputCpu\" : \"137.90us\",\n      \"getOutputUser\" : \"0.00ns\",\n      \"outputDataSize\" : \"10.90kB\",\n      \"outputPositions\" : 154,\n      \"blockedWall\" : \"29.50ms\",\n      \"finishCalls\" : 0,\n      \"finishWall\" : \"0.00ns\",\n      \"finishCpu\" : \"0.00ns\",\n      \"finishUser\" : \"0.00ns\",\n      \"memoryReservation\" : \"0B\",\n      \"info\" : {\n        \"bufferedBytes\" : 0,\n        \"averageBytesPerRequest\" : 11158,\n        \"bufferedPages\" : 0,\n        \"pageBufferClientStatuses\" : [ {\n          \"uri\" : \"http://10.193.207.128:8080/v1/task/20140115_170528_00004_dk5x2.1.0/results/ab68e201-3878-4b21-b6b9-f6658ddc408b\",\n          \"state\" : \"closed\",\n          \"lastUpdate\" : \"2014-01-15T12:12:08.562-05:00\",\n          \"pagesReceived\" : 1,\n          \"requestsScheduled\" : 3,\n          \"requestsCompleted\" : 3,\n          \"httpRequestState\" : \"queued\"\n        } ]\n      }\n    }, {\n      \"operatorId\" : 1,\n      \"operatorType\" : \"FilterAndProjectOperator\",\n      \"addInputCalls\" : 1,\n      \"addInputWall\" : \"919.00us\",\n      \"addInputCpu\" : \"919.38us\",\n      \"addInputUser\" : \"0.00ns\",\n      \"inputDataSize\" : \"10.90kB\",\n      \"inputPositions\" : 154,\n      \"getOutputCalls\" : 2,\n      \"getOutputWall\" : \"128.00us\",\n      \"getOutputCpu\" : \"128.64us\",\n      \"getOutputUser\" : \"0.00ns\",\n      \"outputDataSize\" : \"10.45kB\",\n      \"outputPositions\" : 154,\n      \"blockedWall\" : \"0.00ns\",\n      \"finishCalls\" : 5,\n      \"finishWall\" : \"258.00us\",\n      \"finishCpu\" : \"253.19us\",\n      \"finishUser\" : \"0.00ns\",\n      \"memoryReservation\" : \"0B\"\n    }, {\n      \"operatorId\" : 2,\n      \"operatorType\" : \"OrderByOperator\",\n      \"addInputCalls\" : 1,\n      \"addInputWall\" : \"438.00us\",\n      \"addInputCpu\" : \"439.18us\",\n      \"addInputUser\" : \"0.00ns\",\n      \"inputDataSize\" : \"10.45kB\",\n      \"inputPositions\" : 154,\n      \"getOutputCalls\" : 4,\n      \"getOutputWall\" : \"869.00us\",\n      \"getOutputCpu\" : \"831.85us\",\n      \"getOutputUser\" : \"0.00ns\",\n      \"outputDataSize\" : \"10.45kB\",\n      \"outputPositions\" : 154,\n      \"blockedWall\" : \"0.00ns\",\n      \"finishCalls\" : 4,\n      \"finishWall\" : \"808.00us\",\n      \"finishCpu\" : \"810.18us\",\n      \"finishUser\" : \"0.00ns\",\n      \"memoryReservation\" : \"174.76kB\"\n    }, {\n      \"operatorId\" : 3,\n      \"operatorType\" : \"FilterAndProjectOperator\",\n      \"addInputCalls\" : 1,\n      \"addInputWall\" : \"166.00us\",\n      \"addInputCpu\" : \"166.66us\",\n      \"addInputUser\" : \"0.00ns\",\n      \"inputDataSize\" : \"10.45kB\",\n      \"inputPositions\" : 154,\n      \"getOutputCalls\" : 5,\n      \"getOutputWall\" : \"305.00us\",\n      \"getOutputCpu\" : \"241.14us\",\n      \"getOutputUser\" : \"0.00ns\",\n      \"outputDataSize\" : \"10.90kB\",\n      \"outputPositions\" : 154,\n      \"blockedWall\" : \"0.00ns\",\n      \"finishCalls\" : 2,\n      \"finishWall\" : \"70.00us\",\n      \"finishCpu\" : \"71.02us\",\n      \"finishUser\" : \"0.00ns\",\n      \"memoryReservation\" : \"0B\"\n    }, {\n      \"operatorId\" : 4,\n      \"operatorType\" : \"TaskOutputOperator\",\n      \"addInputCalls\" : 1,\n      \"addInputWall\" : \"50.00us\",\n      \"addInputCpu\" : \"51.03us\",\n      \"addInputUser\" : \"0.00ns\",\n      \"inputDataSize\" : \"10.90kB\",\n      \"inputPositions\" : 154,\n      \"getOutputCalls\" : 0,\n      \"getOutputWall\" : \"0.00ns\",\n      \"getOutputCpu\" : \"0.00ns\",\n      \"getOutputUser\" : \"0.00ns\",\n      \"outputDataSize\" : \"10.90kB\",\n      \"outputPositions\" : 154,\n      \"blockedWall\" : \"0.00ns\",\n      \"finishCalls\" : 1,\n      \"finishWall\" : \"35.00us\",\n      \"finishCpu\" : \"35.39us\",\n      \"finishUser\" : \"0.00ns\",\n      \"memoryReservation\" : \"0B\"\n    } ],\n    \"drivers\" : [ ]\n  } ]\n},\n\"failures\" : [ ],\n\"outputs\" : { }\n}\n```\n\n----------------------------------------\n\nTITLE: Partial JSON Casting in Presto SQL\nDESCRIPTION: Examples of partial casting from JSON to complex types like arrays and maps.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.111.rst#2025-04-10_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\nmap(varchar, json)\n```\n\n----------------------------------------\n\nTITLE: Using the corr() Function in SQL Queries with Presto\nDESCRIPTION: The corr() function calculates correlation between two variables. A correctness issue was fixed that previously caused it to return positive numbers for inverse correlations.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.182.rst#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\ncorr(x, y)\n```\n\n----------------------------------------\n\nTITLE: Showing Session Properties with Optional Pattern in Presto DB\nDESCRIPTION: This command syntax lists all the current session properties in Presto DB. The optional LIKE clause can be used to filter properties based on a pattern.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/sql/show-session.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSHOW SESSION [ LIKE pattern ]\n```\n\n----------------------------------------\n\nTITLE: Using to_base and from_base functions in Presto SQL\nDESCRIPTION: Shows the new functions for converting numbers between different bases/numeral systems.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.100.rst#2025-04-10_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nto_base()\nfrom_base()\n```\n\n----------------------------------------\n\nTITLE: Implementing ConnectorFactory for Example HTTP Connector in Java\nDESCRIPTION: This snippet shows the implementation of getConnectorFactories() method in the plugin class. It returns an ImmutableList containing a single ExampleConnectorFactory instance.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/develop/example-http.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n@Override\npublic Iterable<ConnectorFactory> getConnectorFactories()\n{\n    return ImmutableList.of(new ExampleConnectorFactory());\n}\n```\n\n----------------------------------------\n\nTITLE: BigQuery to Presto Data Type Mappings\nDESCRIPTION: Reference table showing the mapping between BigQuery data types and their corresponding Presto data types, formatted in documentation-style ASCII text.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/bigquery.rst#2025-04-10_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n=============  ============================ =============================================================================================================\nBigQuery       Presto                       Notes\n=============  ============================ =============================================================================================================\n\"BOOLEAN\"    \"BOOLEAN\"\n\"BYTES\"      \"VARBINARY\"\n\"DATE\"       \"DATE\"\n\"DATETIME\"   \"TIMESTAMP\"\n\"FLOAT\"      \"DOUBLE\"\n\"GEOGRAPHY\"  \"VARCHAR\"                  In `Well-known text (WKT)` format\n\"INTEGER\"    \"BIGINT\"\n\"NUMERIC\"    \"DECIMAL(38,9)\"\n\"RECORD\"     \"ROW\"\n\"STRING\"     \"VARCHAR\"\n\"TIME\"       \"TIME_WITH_TIME_ZONE\"      Time zone is UTC\n\"TIMESTAMP\"  \"TIMESTAMP_WITH_TIME_ZONE\" Time zone is UTC\n=============  ============================ =============================================================================================================\n```\n\n----------------------------------------\n\nTITLE: Enabling Dictionary Aggregation Optimization in Presto\nDESCRIPTION: Toggles optimization for aggregations on dictionaries. Can improve performance for certain types of queries.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/admin/properties.rst#2025-04-10_snippet_41\n\nLANGUAGE: properties\nCODE:\n```\noptimizer.dictionary-aggregation=false\n```\n\n----------------------------------------\n\nTITLE: Verifying Docker Installation\nDESCRIPTION: Command to verify that Docker is correctly installed and running. It runs a simple 'hello-world' container as a test.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/installation/deploy-docker.rst#2025-04-10_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker run hello-world\n```\n\n----------------------------------------\n\nTITLE: bcrypt Password Format Example for Presto\nDESCRIPTION: This snippet demonstrates the format of a bcrypt hashed password in the password file. It shows a username and password pair, with the password hashed using bcrypt with a minimum cost of 8.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/security/password-file.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: none\nCODE:\n```\ntest:$2y$10$BqTb8hScP5DfcpmHo5PeyugxHz5Ky/qf3wrpD7SNm8sWuA3VlGqsa\n```\n\n----------------------------------------\n\nTITLE: Adding Redis Provider Dependency\nDESCRIPTION: Maven dependency configuration for including the Redis HBO Provider in the Presto server build\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/plugin/redis-hbo-provider.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n<dependency>\n    <groupId>com.facebook.presto</groupId>\n    <artifactId>redis-hbo-provider</artifactId>\n    <version>${project.version}</version>\n    <type>zip</type>\n    <scope>provided</scope>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Substring Extraction Function (2 params)\nDESCRIPTION: Extracts a substring from a string starting at a specified position. Acts as an alias for the substr function.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/teradata.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nsubstring(string, start) -> varchar\n```\n\n----------------------------------------\n\nTITLE: Bug Warning for SORT and LIMIT with GROUPING SETS in Presto 0.246\nDESCRIPTION: Warning about a bug in Presto 0.246 that causes SORT or LIMIT operations to be incorrectly eliminated when used with GROUPING SETS (()), CUBE, or ROLLUP functions. This bug was introduced in pull request #14915.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.246.rst#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nGROUPING SETS (())\n```\n\n----------------------------------------\n\nTITLE: Configuring Maximum Spill Per Node in Presto\nDESCRIPTION: Sets the maximum total spill space that can be used by all queries on a single node. Limits the disk space used for spilling across all concurrent queries.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/admin/properties.rst#2025-04-10_snippet_15\n\nLANGUAGE: properties\nCODE:\n```\nexperimental.max-spill-per-node\n```\n\n----------------------------------------\n\nTITLE: Configuring ORC Buffer Size in Presto Properties\nDESCRIPTION: Configuration property for setting maximum ORC buffer size to control memory usage when reading large varchar/varbinary columns. Default value is 8MB to reduce heap fragmentation.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.94.rst#2025-04-10_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nhive.orc.max-buffer-size=8MB\n```\n\n----------------------------------------\n\nTITLE: Configuring Presto Router Web Service Properties\nDESCRIPTION: Example configuration for Presto Router's web service, including HTTP port, log settings, and router config file location.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/router/deployment.rst#2025-04-10_snippet_1\n\nLANGUAGE: none\nCODE:\n```\nhttp-server.http.port=8080\nhttp-server.log.max-history=3\nhttp-server.log.max-size=500MB\nrouter.config-file=etc/router-config.json\n```\n\n----------------------------------------\n\nTITLE: SQL Join Range Condition Performance Improvement in Presto 0.185\nDESCRIPTION: Example of joins with range conditions over functions that have been optimized for better performance in this release.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.185.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\na JOIN b ON b.x < f(a.x) AND b.x > g(a.x)\n```\n\n----------------------------------------\n\nTITLE: Configuring Presto Compiler Fallback in Java\nDESCRIPTION: This snippet shows how to disable the interpreter fallback in Presto's compiler using a configuration option. This forces certain queries to fail rather than run slowly when expression compilation fails.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.70.rst#2025-04-10_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\ncompiler.interpreter-enabled=false\n```\n\n----------------------------------------\n\nTITLE: Configuring Router Properties in JSON Format\nDESCRIPTION: JSON configuration for routing rules, including cluster groups, selection criteria, scheduler type, and predictor URI. This defines how queries are distributed to Presto clusters.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/router/deployment.rst.txt#2025-04-10_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"groups\": [\n    {\n      \"name\": \"all\",\n      \"members\": [\"http://127.0.0.1:61381\", \"http://127.0.0.1:61382\"],\n      \"weights\": [1, 5]\n    }\n  ],\n  \"selectors\": [\n    {\n      \"targetGroup\": \"all\"\n    }\n  ],\n  \"scheduler\": \"RANDOM_CHOICE\",\n  \"predictor\": \"http://127.0.0.1:8000/v1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Amazon S3 Access for Hive Connector\nDESCRIPTION: Specifies the catalog properties required for the Hive connector to access data from Amazon S3. These properties include the AWS Access Key ID and Secret Access Key.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.57.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: Properties\nCODE:\n```\nhive.s3.aws-access-key=AKIAIOSFODNN7EXAMPLE\nhive.s3.aws-secret-key=wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY\n```\n\n----------------------------------------\n\nTITLE: SQL JOIN Query Reference\nDESCRIPTION: Reference to JOIN operation syntax affected by memory accounting leak fix in this release.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.127.rst#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nJOIN\n```\n\n----------------------------------------\n\nTITLE: Query Result for Stock Symbol Filtering\nDESCRIPTION: The result of querying a Hudi table for the maximum timestamp of a specific stock symbol (GOOG). Shows the tabular output format from Presto.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/hudi.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n  symbol   |        _col1         |\n-----------+----------------------+\n GOOG      | 2018-08-31 10:59:00  |\n(1 rows)\n```\n\n----------------------------------------\n\nTITLE: Using LIMIT Query in Presto with optimizer.force-single-node-output Option\nDESCRIPTION: Example of a LIMIT query that previously caused clients to hang when the optimizer.force-single-node-output setting was disabled. This behavior has been fixed in this release.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.189.rst#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nLIMIT\n```\n\n----------------------------------------\n\nTITLE: Querying Table Statistics in Presto SQL\nDESCRIPTION: Shows how to fetch table statistics using the SHOW STATS SQL command in Presto. This command retrieves statistical information for tables, which can be used for query optimization.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/optimizer/statistics.rst#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSHOW STATS\n```\n\n----------------------------------------\n\nTITLE: Setting Join Using Legacy Behavior Configuration\nDESCRIPTION: Configuration property to restore legacy JOIN...USING behavior. Can be set as a system configuration or session property.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.196.rst#2025-04-10_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\ndeprecated.legacy-join-using\n```\n\n----------------------------------------\n\nTITLE: Configuring Dictionary Aggregation in PrestoDB\nDESCRIPTION: Configuration property to enable dictionary aggregation optimization for improved performance of aggregations on dictionary encoded data. Can be set via config file or session property.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.133.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\noptimizer.dictionary-aggregation\n```\n\n----------------------------------------\n\nTITLE: Configuring Native Spill Prefix Sort\nDESCRIPTION: Configuration parameters for controlling prefix sort behavior in spill operations. Includes settings for enabling/disabling prefix sort and controlling memory usage for normalized keys.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/presto_cpp/properties-session.rst#2025-04-10_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nnative_spill_prefixsort_enabled=false\nnative_prefixsort_normalized_key_max_bytes=128\nnative_prefixsort_min_rows=130\n```\n\n----------------------------------------\n\nTITLE: Retrieving Connection Properties in Presto JDBC Driver\nDESCRIPTION: Adds a new method 'getConnectionProperties' to the PrestoConnection interface, allowing retrieval of connection properties after a connection is established.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.259.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\ngetConnectionProperties\n```\n\n----------------------------------------\n\nTITLE: ROLLBACK Command Syntax in Presto DB\nDESCRIPTION: Defines the syntax for the ROLLBACK command, showing that it can be used with or without the optional WORK keyword.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/sql/rollback.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: none\nCODE:\n```\nROLLBACK [ WORK ]\n```\n\n----------------------------------------\n\nTITLE: SQL Query Demonstrating Partition-Aware Join Optimization in Presto\nDESCRIPTION: Example SQL query showing a join between two tables partitioned on the same column. With range predicate pushdown, Presto can limit scans to only the partitions that could possibly match between tables.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.55.rst#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM data_1_year JOIN data_1_week USING (ds)\n```\n\n----------------------------------------\n\nTITLE: Grep Command for Filtering Exchange Logs\nDESCRIPTION: Example grep command to filter and view logs related to a specific exchange interaction in the Presto worker protocol. This command helps in following a particular protocol interaction for debugging purposes.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/develop/worker-protocol.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncat stderr* | grep '/v1/task/20240402_223203_00000_kg5tr.11.0.455.0/results'\n```\n\n----------------------------------------\n\nTITLE: Enabling Spill Encryption in Presto\nDESCRIPTION: When enabled, uses a randomly generated secret key per spill file to encrypt and decrypt data spilled to disk. This provides security for sensitive data that might be written to disk during spilling.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/admin/properties.rst#2025-04-10_snippet_19\n\nLANGUAGE: properties\nCODE:\n```\nexperimental.spill-encryption-enabled\n```\n\n----------------------------------------\n\nTITLE: Disabling Automatic Failure Resolution in Verifier\nDESCRIPTION: Configuration property for the Verifier to disable automatic failure resolution functionality. This allows more control over how errors are handled during verification.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.220.rst.txt#2025-04-10_snippet_4\n\nLANGUAGE: properties\nCODE:\n```\nfailure-resolver.enabled\n```\n\n----------------------------------------\n\nTITLE: Running Presto Router in Foreground\nDESCRIPTION: Command to run Presto Router in the foreground with output directed to stdout/stderr, useful for debugging or when using supervision systems.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/router/deployment.rst.txt#2025-04-10_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nbin/launcher run\n```\n\n----------------------------------------\n\nTITLE: Querying SQL With IN Predicate Example\nDESCRIPTION: Example syntax for IN predicate usage in SQL queries that received correctness fixes in this release when value types don't match subquery element types.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.162.rst#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nIN\n```\n\n----------------------------------------\n\nTITLE: Querying JMX Metrics for Parquet Metadata Cache\nDESCRIPTION: JMX query to retrieve cache statistics from the Iceberg connector's Parquet metadata cache.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/iceberg.rst#2025-04-10_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM jmx.current.\"com.facebook.presto.hive:name=iceberg_parquetmetadata,type=cachestatsmbean\";\n```\n\n----------------------------------------\n\nTITLE: Describing Oracle Table Columns in PrestoDB\nDESCRIPTION: SQL commands to show column information for a specific table in Oracle database.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/oracle.rst#2025-04-10_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nDESCRIBE oracle.web.clicks;\nSHOW COLUMNS FROM oracle.web.clicks;\n```\n\n----------------------------------------\n\nTITLE: Configuring Runaway Split Timeout in Presto\nDESCRIPTION: Configuration property to set timeout for interrupting runaway splits that are blocked in known situations. Default value is 600 seconds.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.255.rst#2025-04-10_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ntask.interrupt-runaway-splits-timeout\n```\n\n----------------------------------------\n\nTITLE: Configuring Spiller Maximum Used Space Threshold in Presto\nDESCRIPTION: Sets the disk space usage ratio threshold above which a spill path becomes ineligible for spilling. This prevents spilling to disks that are already nearly full.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/admin/properties.rst#2025-04-10_snippet_13\n\nLANGUAGE: properties\nCODE:\n```\nexperimental.spiller-max-used-space-threshold\n```\n\n----------------------------------------\n\nTITLE: Setting Session Properties in Presto CLI\nDESCRIPTION: Demonstrates how to set session properties using the Presto CLI command line arguments. This allows customization of query execution for the Presto engine or connectors.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.78.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: none\nCODE:\n```\npresto-cli --session color=red --session size=large\n```\n\n----------------------------------------\n\nTITLE: Referencing HiveSessionProperties Class in Presto\nDESCRIPTION: Example of a connector implementation that uses SessionPropertyMetadata for type-safe session properties.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.113.rst#2025-04-10_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nHiveSessionProperties\n```\n\n----------------------------------------\n\nTITLE: Enabling Empty Input Query Optimization in Presto SQL\nDESCRIPTION: Sets the simplify_plan_with_empty_input session property to enable optimization for queries with empty input.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.282.rst#2025-04-10_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nSET SESSION simplify_plan_with_empty_input = true;\n```\n\n----------------------------------------\n\nTITLE: Using is_private_ip Function in SQL\nDESCRIPTION: New function that returns true when the input IP address is private or a reserved IP address, useful for network-related queries.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.290.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT is_private_ip('192.168.1.1')\n```\n\n----------------------------------------\n\nTITLE: Key-Based Sampling Configuration in Presto 0.263\nDESCRIPTION: Session properties for enabling and configuring key-based sampling at query time. It includes options to enable the feature, set sampling percentages, and specify custom sampling functions.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.263.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: restructuredtext\nCODE:\n```\nkey_based_sampling_enabled=true\n```\n\nLANGUAGE: restructuredtext\nCODE:\n```\nkey_based_sampling_percentage\n```\n\nLANGUAGE: restructuredtext\nCODE:\n```\nkey_based_sampling_function\n```\n\n----------------------------------------\n\nTITLE: Querying Table Properties in Presto SQL\nDESCRIPTION: SQL query to list all available table properties from the system metadata.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.123.rst#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM system.metadata.table_properties\n```\n\n----------------------------------------\n\nTITLE: Setting Spiller Spill Path in Presto\nDESCRIPTION: Specifies the directory where spilled content will be written. Can be a comma-separated list to spill to multiple directories simultaneously. Required when spilling is enabled and should not use system drives.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/admin/properties.rst#2025-04-10_snippet_12\n\nLANGUAGE: properties\nCODE:\n```\nexperimental.spiller-spill-path\n```\n\n----------------------------------------\n\nTITLE: Retrieving Interior Ring of Polygon in Presto SQL\nDESCRIPTION: Returns the interior ring element at the specified index for a polygon geometry. Indices start at 1.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/geospatial.rst.txt#2025-04-10_snippet_8\n\nLANGUAGE: SQL\nCODE:\n```\nST_InteriorRingN(Geometry, index) -> Geometry\n```\n\n----------------------------------------\n\nTITLE: Using INT as Alias for INTEGER Data Type in Presto SQL\nDESCRIPTION: Added support for INT as an alias for the INTEGER data type, providing more flexibility in SQL syntax.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.175.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nINT\n```\n\n----------------------------------------\n\nTITLE: SQL Map Type Example\nDESCRIPTION: Example of creating a map using arrays of keys and values.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/language/types.rst#2025-04-10_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nMAP(ARRAY['foo', 'bar'], ARRAY[1, 2])\n```\n\n----------------------------------------\n\nTITLE: Configuring Cassandra Connector\nDESCRIPTION: Shows how to set new configuration properties for the Cassandra connector to allow connecting to older Cassandra servers.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.216.rst#2025-04-10_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nSET cassandra.splits-per-node = 4;\nSET cassandra.protocol-version = 3;\n```\n\n----------------------------------------\n\nTITLE: Setting enable_intermediate_aggregations Session Property in Presto SQL\nDESCRIPTION: A new session property that enables the use of intermediate aggregations within un-grouped aggregations, potentially improving performance for certain aggregation queries.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.175.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nenable_intermediate_aggregations\n```\n\n----------------------------------------\n\nTITLE: Using Large IN Lists with Complex Types in Presto\nDESCRIPTION: This snippet refers to a fix for incorrect results when using IN lists with more than 1000 elements of timestamp with time zone, time with time zone, or structural types in Presto queries.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.122.rst.txt#2025-04-10_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\n... IN (large_list_of_complex_types...)\n```\n\n----------------------------------------\n\nTITLE: Preparing and Describing a Query with Four Output Columns in Presto SQL\nDESCRIPTION: Demonstrates how to prepare a SELECT statement and then use DESCRIBE OUTPUT to list its output columns, including details like column name, catalog, schema, table, type, type size, and alias status.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/describe-output.rst#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nPREPARE my_select1 FROM\nSELECT * FROM nation\n```\n\nLANGUAGE: sql\nCODE:\n```\nDESCRIBE OUTPUT my_select1;\n```\n\n----------------------------------------\n\nTITLE: Function Pattern Matching in Presto SQL\nDESCRIPTION: New syntax to list functions that match a specified pattern, allowing users to find functions more easily.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.237.rst.txt#2025-04-10_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nSHOW FUNCTION LIKE\n```\n\n----------------------------------------\n\nTITLE: Retrieving Stage Details in Presto API (reStructuredText)\nDESCRIPTION: This API endpoint allows retrieving details about a stage in a Presto query. It uses the GET method on the /v1/stage path.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/rest/stage.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. function:: GET /v1/stage\n\n   Returns detail about a stage in a Presto query.\n```\n\n----------------------------------------\n\nTITLE: Setting Spiller Spill Path in Presto\nDESCRIPTION: Specifies the directory where spilled content will be written. Can be a comma-separated list to spill to multiple directories simultaneously. Required when spilling is enabled and should not use system drives.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/admin/properties.rst#2025-04-10_snippet_12\n\nLANGUAGE: properties\nCODE:\n```\nexperimental.spiller-spill-path\n```\n\n----------------------------------------\n\nTITLE: Revoking GRANT OPTION FOR SELECT Privilege in PrestoDB\nDESCRIPTION: Example showing how to revoke the SELECT privilege and the ability to grant SELECT privilege on the 'nation' table from the PUBLIC role.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/revoke.rst#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nREVOKE GRANT OPTION FOR SELECT ON nation FROM ROLE PUBLIC;\n```\n\n----------------------------------------\n\nTITLE: Specifying JSON File Location for Resource Groups in PrestoDB\nDESCRIPTION: Sets the resource-groups.config-file property to the path of the JSON file containing resource group definitions in the etc/resource-groups.properties file.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/admin/resource-groups.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nresource-groups.config-file=etc/resource-groups.json\n```\n\n----------------------------------------\n\nTITLE: Selecting Single Stream Spiller Implementation in Presto\nDESCRIPTION: Specifies which Single Stream Spiller implementation to use when spilling is enabled. Options are LOCAL_FILE (default) for local filesystem spilling or TEMP_STORAGE for alternative storage backends.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/admin/properties.rst#2025-04-10_snippet_20\n\nLANGUAGE: properties\nCODE:\n```\nexperimental.spiller.single-stream-spiller-choice\n```\n\n----------------------------------------\n\nTITLE: Configuring Workers Per Query Limit in Presto Resource Groups\nDESCRIPTION: Sets the minimum number of workers that have to be available for each query in resource groups. The default value is 0.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.281.rst#2025-04-10_snippet_5\n\nLANGUAGE: SQL\nCODE:\n```\nSET SYSTEM workersPerQueryLimit = 0;\n```\n\n----------------------------------------\n\nTITLE: Altering Verifier Queries Table in SQL\nDESCRIPTION: SQL commands to modify the verifier_queries table for upgrading from Presto 0.92 to 0.93. These alterations add columns for test and control usernames and passwords.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.93.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE verifier_queries add test_username VARCHAR(256) NOT NULL default 'verifier-test';\nALTER TABLE verifier_queries add test_password VARCHAR(256);\nALTER TABLE verifier_queries add control_username VARCHAR(256) NOT NULL default 'verifier-test';\nALTER TABLE verifier_queries add control_password VARCHAR(256);\n```\n\n----------------------------------------\n\nTITLE: Configuring Minimum Candidate Nodes in Presto\nDESCRIPTION: Sets the minimum number of candidate nodes evaluated by the node scheduler when choosing a target node for a split. Affects load balancing and query latency.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/admin/properties.rst#2025-04-10_snippet_39\n\nLANGUAGE: properties\nCODE:\n```\nnode-scheduler.min-candidates=10\n```\n\n----------------------------------------\n\nTITLE: Creating and Querying Alluxio-backed Table in Presto\nDESCRIPTION: SQL commands for creating and querying a table in Presto that uses Alluxio as the underlying storage system\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/cache/service.rst#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nDROP TABLE IF EXISTS reason;\nCREATE TABLE reason (\n  r_reason_sk integer,\n  r_reason_id varchar,\n  r_reason_desc varchar\n) WITH (\n  external_location = 'alluxio://localhost:19998/example',\n  format = 'PARQUET'\n);\n```\n\n----------------------------------------\n\nTITLE: Using TRUNCATE TABLE in Presto SQL with Iceberg\nDESCRIPTION: The TRUNCATE TABLE statement is now supported for Iceberg tables in Presto. This statement removes all rows from a table while maintaining the table structure and schema.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.284.rst#2025-04-10_snippet_8\n\nLANGUAGE: SQL\nCODE:\n```\nTRUNCATE TABLE <table>\n```\n\n----------------------------------------\n\nTITLE: Adaptive Partial Aggregation Configuration\nDESCRIPTION: Session property for adaptive partial aggregation which disables partial aggregation in cases where it could be inefficient.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.286.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nadaptive_partial_aggregation\n```\n\n----------------------------------------\n\nTITLE: Configuring Druid Connector Properties in Presto\nDESCRIPTION: This code snippet shows the basic configuration properties required to set up the Druid Connector in Presto. It includes the connector name, Druid coordinator and broker URLs, schema name, and compute pushdown setting.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/druid.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nconnector.name=druid\ndruid.coordinator-url=hostname:port\ndruid.broker-url=hostname:port\ndruid.schema-name=schema\ndruid.compute-pushdown-enabled=true\n```\n\n----------------------------------------\n\nTITLE: Adding Column Rename Support in Presto SQL ALTER TABLE\nDESCRIPTION: Implements the RENAME COLUMN functionality in the ALTER TABLE command for Presto SQL.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.119.rst#2025-04-10_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nSupport ``RENAME COLUMN`` in :doc:`/sql/alter-table`\n```\n\n----------------------------------------\n\nTITLE: Using ST_InteriorRings in Presto\nDESCRIPTION: Returns an array of all interior rings found in the input geometry, or an empty array if the polygon has no interior rings. Throws an error if the input geometry is not a polygon.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/geospatial.rst#2025-04-10_snippet_29\n\nLANGUAGE: sql\nCODE:\n```\nST_InteriorRings(Geometry) -> array(Geometry)\n```\n\n----------------------------------------\n\nTITLE: SQL Predicate Example\nDESCRIPTION: Reference to IN predicate optimization in query planning.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.160.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nIN\n```\n\n----------------------------------------\n\nTITLE: Referencing Presto Function in reStructuredText\nDESCRIPTION: Uses reStructuredText syntax to reference the 'classification_precision' function in Presto. This is part of a bug fix description for release 0.239.2.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.239.2.rst#2025-04-10_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n:func:`!classification_precision`\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Presto Authenticator Properties\nDESCRIPTION: Example configuration file for setting up a custom Presto authenticator. This file should be placed at etc/presto-authenticator.properties and defines the authenticator name along with custom properties specific to the implementation.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/develop/presto-authenticator.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\npresto-authenticator.name=custom-authenticator\ncustom-property1=custom-value1\ncustom-property2=custom-value2\n```\n\n----------------------------------------\n\nTITLE: Configuring Exchange Materialization Session Properties in Presto\nDESCRIPTION: Shows the required session property configurations to enable exchange materialization. Includes settings for strategy, catalog selection, and partition count optimization.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/admin/exchange-materialization.rst#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSET SESSION exchange_materialization_strategy='ALL';\n\n-- Set partitioning_provider_catalog to the Hive connector catalog\nSET SESSION partitioning_provider_catalog='hive';\n\n-- We recommend setting hash_partition_count to be at least 5X-10X about the cluster size\n-- when exchange materialization is enabled.\nSET SESSION hash_partition_count = 4096;\n```\n\n----------------------------------------\n\nTITLE: Configuring Query Types in Presto Verifier\nDESCRIPTION: Configuration parameters for selecting specific query types to run in the Presto verifier tool. The control.query-types and test.query-types parameters allow filtering of query execution.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.136.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\ncontrol.query-types\n```\n\nLANGUAGE: sql\nCODE:\n```\ntest.query-types\n```\n\n----------------------------------------\n\nTITLE: Preparing and Describing a Row Count Query in Presto SQL\nDESCRIPTION: Illustrates how to prepare a CREATE TABLE AS SELECT statement and use DESCRIBE OUTPUT to show its output column, which is the row count of the created table.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/describe-output.rst#2025-04-10_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nPREPARE my_create FROM\nCREATE TABLE foo AS SELECT * FROM nation\n```\n\nLANGUAGE: sql\nCODE:\n```\nDESCRIBE OUTPUT my_create;\n```\n\n----------------------------------------\n\nTITLE: Row Number Partitioned Limit Query in Presto SQL\nDESCRIPTION: Example of using row_number() for streaming operations to select N arbitrary rows per partition. Demonstrates performance-optimized approach for partitioned limits.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.75.rst#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM (\n    SELECT row_number() OVER (PARTITION BY orderstatus) AS rn,\n        custkey, orderdate, orderstatus\n    FROM orders\n) WHERE rn <= 5;\n```\n\n----------------------------------------\n\nTITLE: Using String Literals in SQL\nDESCRIPTION: Examples of different types of string literals in SQL, including simple strings, Unicode strings with default and custom escape characters, and strings with escaped single quotes.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/language/types.rst.txt#2025-04-10_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\n'Hello winter !'\nU&'Hello winter \\2603 !'\nU&'Hello winter #2603 !' UESCAPE '#'\n'It''s a beautiful day!'\n```\n\n----------------------------------------\n\nTITLE: Setting Network Topology for Node Scheduling in Presto\nDESCRIPTION: Configures the network topology used when scheduling splits. 'flat' attempts to schedule splits on the host where data is located.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/admin/properties.rst#2025-04-10_snippet_40\n\nLANGUAGE: properties\nCODE:\n```\nnode-scheduler.network-topology=legacy\n```\n\n----------------------------------------\n\nTITLE: Bug Warning for SORT and LIMIT with Grouping Operations\nDESCRIPTION: Warning about a bug in version 0.248 where SORT or LIMIT operations can be incorrectly eliminated when using specific grouping operations in SQL queries.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.248.rst#2025-04-10_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\n``SORT`` or``LIMIT`` to be incorrectly eliminated when using ``GROUPING SETS (())`, ``CUBE`` or ``ROLLUP``\n```\n\n----------------------------------------\n\nTITLE: Configuring Spiller Temp Storage in Presto\nDESCRIPTION: Specifies the temp storage to be used by the spiller when experimental.spiller.single-stream-spiller-choice is set to TEMP_STORAGE. Defaults to 'local' but can be configured for other storage types.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/admin/properties.rst#2025-04-10_snippet_21\n\nLANGUAGE: properties\nCODE:\n```\nexperimental.spiller.spiller-temp-storage\n```\n\n----------------------------------------\n\nTITLE: Querying Table Snapshots\nDESCRIPTION: Query to retrieve details about table snapshots from the hidden $snapshots metadata table.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/iceberg.rst#2025-04-10_snippet_15\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM \"ctas_nation$snapshots\";\n```\n\n----------------------------------------\n\nTITLE: Configuring Druid Connector Properties in Presto\nDESCRIPTION: This code snippet shows the basic configuration properties required to set up the Druid Connector in Presto. It includes the connector name, Druid coordinator and broker URLs, schema name, and compute pushdown setting.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/druid.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nconnector.name=druid\ndruid.coordinator-url=hostname:port\ndruid.broker-url=hostname:port\ndruid.schema-name=schema\ndruid.compute-pushdown-enabled=true\n```\n\n----------------------------------------\n\nTITLE: Example Presto Connection String for System Catalog\nDESCRIPTION: A sample connection string for connecting to the Presto system catalog. This example demonstrates how to format the connection string with an IP address and the default Presto port.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/clients/superset.rst#2025-04-10_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\npresto://<Presto-IP-address>:8080/system\n```\n\n----------------------------------------\n\nTITLE: Adding Days to a Timestamp in SQL\nDESCRIPTION: Demonstrates using the date_add function with the 'day' unit to properly advance a timestamp by one day, which handles daylight saving time transitions correctly.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.66.rst#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT date_add('day', 1, TIMESTAMP '2014-03-08 09:00:00');\n-- 2014-03-09 09:00:00.000\n```\n\n----------------------------------------\n\nTITLE: Adding Noisy Average Gaussian Function in SQL\nDESCRIPTION: Introduces the NOISY_AVG_GAUSSIAN function for differential privacy calculations.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.284.rst.txt#2025-04-10_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nNOISY_AVG_GAUSSIAN()\n```\n\n----------------------------------------\n\nTITLE: Adding Noisy Count Gaussian Function in SQL\nDESCRIPTION: Introduces the NOISY_COUNT_GAUSSIAN function for differential privacy calculations.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.284.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nNOISY_COUNT_GAUSSIAN()\n```\n\n----------------------------------------\n\nTITLE: Hive Security Configuration\nDESCRIPTION: Security configuration property for Hive connector authorization system\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.146.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nhive.security=none\n```\n\n----------------------------------------\n\nTITLE: Configuring Parquet Column Access in Hive Catalog Properties\nDESCRIPTION: Setting to control how Parquet columns are accessed in the Hive connector. When set to true, columns are accessed by name as recorded in the Parquet file, instead of by ordinal position in the Hive table definition.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.101.rst#2025-04-10_snippet_1\n\nLANGUAGE: Properties\nCODE:\n```\nhive.parquet.use-column-names=true\n```\n\n----------------------------------------\n\nTITLE: SQL Array Type Example\nDESCRIPTION: Example of creating an array literal in SQL.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/language/types.rst#2025-04-10_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nARRAY[1, 2, 3]\n```\n\n----------------------------------------\n\nTITLE: Configuring Shadow Writes for Verifier in Presto\nDESCRIPTION: Configuration option to enable shadow writes in the Presto verifier, which transforms CREATE TABLE AS SELECT queries to write to a temporary table.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.151.rst#2025-04-10_snippet_6\n\nLANGUAGE: SQL\nCODE:\n```\nshadow-writes.enabled = true\n```\n\n----------------------------------------\n\nTITLE: Querying Raw Message Data in Presto SQL\nDESCRIPTION: SQL query to select the raw message content from the 'customer' table, limiting the result to 5 rows.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/kafka-tutorial.rst#2025-04-10_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\nSELECT _message FROM customer LIMIT 5;\n```\n\n----------------------------------------\n\nTITLE: Map Concat Function Reference\nDESCRIPTION: Reference to the map_concat function with improved performance for empty arguments.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.161.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nmap_concat()\n```\n\n----------------------------------------\n\nTITLE: Basic LIMIT Query in SQL\nDESCRIPTION: Demonstrates using LIMIT clause to restrict the number of rows returned from a query without ORDER BY.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/sql/select.rst.txt#2025-04-10_snippet_25\n\nLANGUAGE: sql\nCODE:\n```\nSELECT orderdate FROM orders LIMIT 5;\n```\n\n----------------------------------------\n\nTITLE: Configuring Bytecode Generator in Presto\nDESCRIPTION: Property to disable the new bytecode generator in Presto 0.74. This setting can be added to etc/config.properties in both coordinator and worker nodes to revert to the old implementation if issues are encountered.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.74.rst#2025-04-10_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\ncompiler.new-bytecode-generator-enabled=false\n```\n\n----------------------------------------\n\nTITLE: Executing a Prepared Statement Without Parameters in PrestoDB\nDESCRIPTION: Example showing how to execute a previously prepared statement named 'my_select1' that has no parameters.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/execute.rst#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nEXECUTE my_select1;\n```\n\n----------------------------------------\n\nTITLE: Enabling Optimized RCFile Writer in Presto Hive Connector\nDESCRIPTION: A new experimental RCFile writer optimized for Presto can be enabled using either a session property or a Hive catalog property.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.168.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nSET SESSION rcfile_optimized_writer_enabled = true;\n-- or --\nSET \"hive.rcfile-optimized-writer.enabled\" = true;\n```\n\n----------------------------------------\n\nTITLE: Defining SfmSketch Type in Presto Documentation\nDESCRIPTION: Documentation for the SFM Sketch type, which is a noisy, random distinct-counting sketch similar to HyperLogLog, used for approximate set operations.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/language/types.rst#2025-04-10_snippet_6\n\nLANGUAGE: rst\nCODE:\n```\n``SfmSketch``\n^^^^^^^^^^^^^\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents for Presto Administration in reStructuredText\nDESCRIPTION: This snippet defines a table of contents for Presto administration documentation using reStructuredText syntax. It includes various topics related to Presto administration and configuration.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/admin.rst#2025-04-10_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n**************\nAdministration\n**************\n\n.. toctree::\n    :maxdepth: 1\n\n    admin/web-interface\n    admin/tuning\n    admin/properties\n    admin/properties-session\n    admin/spill\n    admin/exchange-materialization\n    admin/cte-materialization\n    admin/resource-groups\n    admin/session-property-managers\n    admin/function-namespace-managers\n    admin/dist-sort\n    admin/verifier\n```\n\n----------------------------------------\n\nTITLE: Renaming configuration property for task worker threads in Presto\nDESCRIPTION: Displays the configuration property renaming from task.shard.max-threads to task.max-worker-threads, which controls the number of threads used for concurrent split processing.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.100.rst#2025-04-10_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\ntask.shard.max-threads\ntask.max-worker-threads\n```\n\n----------------------------------------\n\nTITLE: Configuring Presto Coordinator for C++ Workers\nDESCRIPTION: Required configuration properties to enable Presto coordinator's use of Presto C++ workers. These settings handle native execution, hash optimization, regex library selection, and function signatures compatibility.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/presto_cpp/properties.rst#2025-04-10_snippet_0\n\nLANGUAGE: none\nCODE:\n```\nnative-execution-enabled=true\noptimizer.optimize-hash-generation=false\nregex-library=RE2J\nuse-alternative-function-signatures=true\n```\n\n----------------------------------------\n\nTITLE: Data Type References\nDESCRIPTION: References to various data types used in queries and operations\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.86.rst.txt#2025-04-10_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nVARCHAR\nJSON\nROW\n```\n\n----------------------------------------\n\nTITLE: Setting Presto JDBC Connection Parameters using Properties\nDESCRIPTION: This Java code snippet shows how to set connection parameters for a Presto JDBC connection using a Properties object. It demonstrates setting the user, password, and SSL parameters.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/installation/jdbc.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n// properties\nString url = \"jdbc:presto://example.net:8080/hive/sales\";\nProperties properties = new Properties();\nproperties.setProperty(\"user\", \"test\");\nproperties.setProperty(\"password\", \"secret\");\nproperties.setProperty(\"SSL\", \"true\");\nConnection connection = DriverManager.getConnection(url, properties);\n```\n\n----------------------------------------\n\nTITLE: Configuration Property Examples - Presto SQL\nDESCRIPTION: Example configuration properties and session parameters referenced in the release notes for various features including Parquet writer version, NaN handling, and timezone data.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.289.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nhive.parquet.writer.version = PARQUET_2_0\nuse-new-nan-definition = false\nwarn-on-possible-nans = true\nhive.temporary-table.storage-format = DWRF\nhive.temporary-table.compression-codec = ZSTD\ncache.velox.full-persistence-interval = <non-zero value>\n```\n\n----------------------------------------\n\nTITLE: Configuration Property Examples - Presto SQL\nDESCRIPTION: Example configuration properties and session parameters referenced in the release notes for various features including Parquet writer version, NaN handling, and timezone data.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.289.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nhive.parquet.writer.version = PARQUET_2_0\nuse-new-nan-definition = false\nwarn-on-possible-nans = true\nhive.temporary-table.storage-format = DWRF\nhive.temporary-table.compression-codec = ZSTD\ncache.velox.full-persistence-interval = <non-zero value>\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Lake Formation Security Mappings in JSON\nDESCRIPTION: Example JSON configuration file for Lake Formation security mappings. It shows how to set up user-specific and default IAM roles for Lake Formation access in Presto.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/hive.rst#2025-04-10_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mappings\": [\n    {\n      \"user\": \"admin\",\n      \"iamRole\": \"arn:aws:iam::123456789101:role/admin_role\"\n    },\n    {\n      \"user\": \"analyst\",\n      \"iamRole\": \"arn:aws:iam::123456789101:role/analyst_role\"\n    },\n    {\n      \"iamRole\": \"arn:aws:iam::123456789101:role/default_role\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Invalidating Directory List Cache in Hive Catalog\nDESCRIPTION: Executes a system procedure to invalidate the directory list cache in the Hive Catalog.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.287.rst#2025-04-10_snippet_7\n\nLANGUAGE: SQL\nCODE:\n```\nCALL system.invalidate_directory_list_cache();\n```\n\n----------------------------------------\n\nTITLE: Presto UDF Function Definition\nDESCRIPTION: New UDF functions added in this release: find_first for array element searching and pinot_binary_decimal_to_double for Pinot binary column conversion to Double type.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.277.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: presto\nCODE:\n```\nfind_first\npinot_binary_decimal_to_double\n```\n\n----------------------------------------\n\nTITLE: Converting Geometry to GeoJSON in Presto SQL\nDESCRIPTION: Returns the GeoJSON representation of a geometry.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/geospatial.rst.txt#2025-04-10_snippet_27\n\nLANGUAGE: SQL\nCODE:\n```\ngeometry_as_geojson(Geometry) -> varchar\n```\n\n----------------------------------------\n\nTITLE: Using array_distinct function in Presto SQL\nDESCRIPTION: Demonstrates the new array_distinct function that removes duplicate values from an array.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.100.rst#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\narray_distinct()\n```\n\n----------------------------------------\n\nTITLE: Calculating Trimmed Mean for T-Digest in Presto SQL\nDESCRIPTION: Returns an estimate of the mean, excluding portions of the distribution outside the provided quantile bounds. Both lower_quantile and upper_quantile must be between 0 and 1.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/tdigest.rst.txt#2025-04-10_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\ntrimmed_mean(tdigest<double>, lower_quantile, upper_quantile) -> double\n```\n\n----------------------------------------\n\nTITLE: HDFS Configuration in Presto 0.149\nDESCRIPTION: Hive connector configuration properties for HDFS timeout and IPC ping interval settings.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.149.rst#2025-04-10_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\nhive.dfs-timeout=60\nhive.dfs.ipc-ping-interval=[value]\n```\n\n----------------------------------------\n\nTITLE: Dropping External Delta Lake Table in Presto SQL\nDESCRIPTION: This SQL command shows how to drop an external Delta Lake table in Presto. It only removes the table metadata and does not delete the actual data files.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/deltalake.rst#2025-04-10_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nDROP TABLE sales.apac.sales_data_new;\n```\n\n----------------------------------------\n\nTITLE: Using abs() Function with Bounds Checking in Presto\nDESCRIPTION: Mathematical function that now performs bounds checks when evaluating absolute values in Presto 0.132.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.132.rst#2025-04-10_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\nabs()\n```\n\n----------------------------------------\n\nTITLE: Using create_empty_partition Procedure in Hive Connector\nDESCRIPTION: The system.create_empty_partition() procedure is a new addition in the Hive connector that allows for creating empty partitions in Hive tables. This procedure helps when setting up table structures before actual data insertion.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.209.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nsystem.create_empty_partition()\n```\n\n----------------------------------------\n\nTITLE: Starting Presto Server in Foreground on Apple Silicon Mac\nDESCRIPTION: Command to start the Presto service in the foreground on an Apple Silicon Mac, using the x86_64 architecture flag.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/installation/deploy-brew.rst.txt#2025-04-10_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\narch -x86_64 presto-server run\n```\n\n----------------------------------------\n\nTITLE: Configuring Example HTTP Connector in Presto 0.54\nDESCRIPTION: Configuration example for the new example-http connector in Presto 0.54. This snippet shows how to create the catalog properties file to mount the connector and specify the required metadata URI parameter that points to a JSON document describing table metadata and CSV files.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.54.rst#2025-04-10_snippet_0\n\nLANGUAGE: none\nCODE:\n```\nconnector.name=example-http\nmetadata-uri=http://s3.amazonaws.com/presto-example/v1/example-metadata.json\n```\n\n----------------------------------------\n\nTITLE: Configuring S3 Intelligent-Tiering Storage Class in Hive Connector\nDESCRIPTION: Enables the use of S3 Intelligent-Tiering storage class for writing data in the Hive connector. This can be set through a configuration property.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.254.rst#2025-04-10_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nSET SESSION hive.s3.storage-class = 'INTELLIGENT_TIERING';\n```\n\n----------------------------------------\n\nTITLE: Hive Connector Configuration Properties in Presto\nDESCRIPTION: New configuration properties for the Hive connector in Presto to control file compression, caching, and other behaviors.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.235.rst.txt#2025-04-10_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\nhive.file-status-cache-tables\nhive.orc-compression-codec\nhive.compression-codec\n```\n\n----------------------------------------\n\nTITLE: INSERT Prepared Statement\nDESCRIPTION: Example of preparing an INSERT statement with literal values.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/prepare.rst#2025-04-10_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nPREPARE my_insert FROM\nINSERT INTO cities VALUES (1, 'San Francisco');\n```\n\n----------------------------------------\n\nTITLE: Configuring Certificate Authentication for Presto\nDESCRIPTION: Configuration to enable certificate-based authentication for internal communication while using a different authentication method (PASSWORD) for external clients.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/security/internal-communication.rst.txt#2025-04-10_snippet_10\n\nLANGUAGE: none\nCODE:\n```\nhttp-server.authentication.type=PASSWORD,CERTIFICATE\n```\n\n----------------------------------------\n\nTITLE: Referencing Hive UDF Interface in Java\nDESCRIPTION: Reference to the Java interface org.apache.hadoop.hive.ql.exec.UDF which is now supported for function registration in the Hive connector.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.276.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: java\nCODE:\n```\norg.apache.hadoop.hive.ql.exec.UDF\n```\n\n----------------------------------------\n\nTITLE: Grep Command for Filtering TaskStatus Update Logs\nDESCRIPTION: Example grep command to filter and view logs related to TaskStatus updates in the Presto worker protocol. This command helps in tracking status updates for a specific task for debugging purposes.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/develop/worker-protocol.rst.txt#2025-04-10_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncat stderr* | grep '/v1/task/20240402_223203_00000_kg5tr.11.0.455.0/status'\n```\n\n----------------------------------------\n\nTITLE: Retrieving MongoDB Node Hostnames\nDESCRIPTION: Command to retrieve node hostnames using dig with srv record type\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/mongodb.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndig srv _mongodb._tcp.<cluster-hostname>\n```\n\n----------------------------------------\n\nTITLE: Calculating Differential Entropy with Basic Sampling\nDESCRIPTION: Example query showing how to calculate differential entropy using reservoir sampling with a sample size of 1000000.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/aggregate.rst.txt#2025-04-10_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n    differential_entropy(1000000, x)\nFROM\n    data\n```\n\n----------------------------------------\n\nTITLE: Quoting Numeric Identifiers in Presto SQL\nDESCRIPTION: Shows how to properly quote identifiers that start with numbers in Presto SQL to comply with ANSI SQL standards.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/migration/from-hive.rst#2025-04-10_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT *\nFROM \"7day_active\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Verbose Optimizer Information in Presto SQL Explain Plans\nDESCRIPTION: Activates detailed information about cost-based optimizers and their stat sources (CBO/HBO) in explain plans. This is controlled by the session property 'verbose_optimizer_info_enabled'.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.285.rst#2025-04-10_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nSET SESSION verbose_optimizer_info_enabled = true;\n```\n\n----------------------------------------\n\nTITLE: Pull Request Reference for Bug Introduction\nDESCRIPTION: Reference to the pull request that introduced the bug mentioned in the warning section, using Presto's documentation link format.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.248.rst#2025-04-10_snippet_3\n\nLANGUAGE: rst\nCODE:\n```\n:pr:`14915`\n```\n\n----------------------------------------\n\nTITLE: Using zip_with Function with Arrays of Mismatched Lengths in Presto SQL\nDESCRIPTION: The zip_with function now supports arrays of different lengths, filling missing positions with NULL values.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.204.rst#2025-04-10_snippet_5\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT zip_with(array1, array2, (x, y) -> x + y) FROM table;\n```\n\n----------------------------------------\n\nTITLE: Enabling Alluxio Cache in Presto Hive Connector\nDESCRIPTION: Configuration changes to enable local data caching with Alluxio in the Presto Hive connector. This improves query performance by caching frequently accessed data.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.236.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSET cache.enabled = true;\nSET cache.type = 'ALLUXIO';\n```\n\n----------------------------------------\n\nTITLE: Presto Session Properties Configuration\nDESCRIPTION: Configuration properties to control the maximum number of leaf nodes in a query plan. The leaf_node_limit_enabled flag enables the feature and max_leaf_nodes_in_plan sets the limit.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.277.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: presto\nCODE:\n```\nleaf_node_limit_enabled\nmax_leaf_nodes_in_plan\n```\n\n----------------------------------------\n\nTITLE: Referencing TaskExecutor in Presto\nDESCRIPTION: The TaskExecutor component in Presto has been optimized to reduce lock contention, potentially improving performance in multi-threaded scenarios.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.99.rst#2025-04-10_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nTaskExecutor\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Possible NULL Result Bug with Mixed Distinct Aggregations\nDESCRIPTION: Shows a potential correctness issue with Presto 0.156 where queries might incorrectly produce NULL when no rows qualify for aggregation if the optimize_mixed_distinct_aggregations option is enabled.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.156.rst#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\noptimize_mixed_distinct_aggregations\n```\n\n----------------------------------------\n\nTITLE: Removed Big Query Configuration Properties\nDESCRIPTION: List of deprecated configuration properties that were used for experimental big query support.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.109.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: config\nCODE:\n```\nexperimental_big_query\nexperimental.big-query-initial-hash-partitions\nexperimental.max-concurrent-big-queries\nexperimental.max-queued-big-queries\n```\n\n----------------------------------------\n\nTITLE: Describing Cassandra Table Structure in Presto\nDESCRIPTION: Output showing the structure of the users table when described in Presto, displaying column names, types, and metadata\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/cassandra.rst#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\n Column  |  Type   | Extra | Comment\n---------+---------+-------+---------\n user_id | bigint  |       |\n fname   | varchar |       |\n lname   | varchar |       |\n(3 rows)\n```\n\n----------------------------------------\n\nTITLE: Using Window Functions in HAVING Clause\nDESCRIPTION: Improved error handling for queries where the HAVING clause contains window functions, providing better diagnostics and feedback.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.190.rst.txt#2025-04-10_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nHAVING\n```\n\n----------------------------------------\n\nTITLE: SFM Sketch Type Definition\nDESCRIPTION: The Sketch-Flip-Merge (SFM) data sketch is a specialized structure for noisy, random distinct-counting, similar to HyperLogLog.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/language/types.rst.txt#2025-04-10_snippet_6\n\nLANGUAGE: text\nCODE:\n```\nSfmSketch\n```\n\n----------------------------------------\n\nTITLE: Referencing HiveSplitSource Component\nDESCRIPTION: Technical reference to the HiveSplitSource component that was fixed to prevent query hangs when processing large tables. The bug was introduced in version 0.57.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.59.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nHiveSplitSource\n```\n\n----------------------------------------\n\nTITLE: Non-Managed Table Creation Configuration\nDESCRIPTION: Configuration option to control whether users can create external (non-managed) Hive tables. Defaults to true.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.196.rst#2025-04-10_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\nhive.non-managed-table-creates-enabled\n```\n\n----------------------------------------\n\nTITLE: Adding map_top_n Function in SQL\nDESCRIPTION: Introduces a new SQL function map_top_n to truncate map items, keeping only the top N elements by value.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.279.rst.txt#2025-04-10_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\nmap_top_n(map, N)\n```\n\n----------------------------------------\n\nTITLE: Basic Role Grant Example in Presto SQL\nDESCRIPTION: Simple example showing how to grant a single role 'bar' to user 'foo'.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/grant-roles.rst#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nGRANT bar TO USER foo;\n```\n\n----------------------------------------\n\nTITLE: Configuring Node Internal Address Using FQDN\nDESCRIPTION: Setting to configure Presto nodes to use fully qualified domain names for internal communication.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/security/internal-communication.rst#2025-04-10_snippet_1\n\nLANGUAGE: none\nCODE:\n```\nnode.internal-address-source=FQDN\n```\n\n----------------------------------------\n\nTITLE: Fixed NULL Selection Issue in Presto SQL\nDESCRIPTION: SQL statement that previously produced incorrect results (0 rows) but is fixed in Presto 0.89.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.89.rst#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT NULL\n```\n\n----------------------------------------\n\nTITLE: SQL CHAR Quote Escaping Example\nDESCRIPTION: Example demonstrating how to escape single quotes in CHAR literals.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/language/types.rst#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT CHAR 'All right, Mr. DeMille, I''m ready for my close-up.'\n```\n\n----------------------------------------\n\nTITLE: Implementing Parametric Scalar Function with Operator Dependency in Java for Presto\nDESCRIPTION: This snippet shows how to implement a parametric scalar function 'is_equal_or_null' that requires an equals function for the given type. It uses @OperatorDependency to declare the dependency on an equals function.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/develop/functions.rst.txt#2025-04-10_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n@ScalarFunction(name = \"is_equal_or_null\", calledOnNullInput = true)\n@Description(\"Returns TRUE if arguments are equal or both NULL\")\npublic final class IsEqualOrNullFunction\n{\n    @TypeParameter(\"T\")\n    @SqlType(StandardTypes.BOOLEAN)\n    public static boolean isEqualOrNullSlice(\n            @OperatorDependency(operator = OperatorType.EQUAL, returnType = StandardTypes.BOOLEAN, argumentTypes = {\"T\", \"T\"}) MethodHandle equals,\n            @SqlNullable @SqlType(\"T\") Slice value1,\n            @SqlNullable @SqlType(\"T\") Slice value2)\n    {\n        if (value1 == null && value2 == null) {\n            return true;\n        }\n        if (value1 == null || value2 == null) {\n            return false;\n        }\n        return (boolean) equals.invokeExact(value1, value2);\n    }\n\n    // ...and so on for each native container type\n}\n```\n\n----------------------------------------\n\nTITLE: Duration Parsing in Presto SQL\nDESCRIPTION: Examples of parsing duration strings into intervals using the parse_duration function.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/datetime.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT parse_duration('42.8ms'); -- 0 00:00:00.043\nSELECT parse_duration('3.81 d'); -- 3 19:26:24.000\nSELECT parse_duration('5m');     -- 0 00:05:00.000\n```\n\n----------------------------------------\n\nTITLE: Accessing Hidden File Metadata Columns in Presto SQL\nDESCRIPTION: New hidden columns $file_modified_time and $file_size added to provide file metadata. These columns can be queried to retrieve the last modified time and size of the file containing each row.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.261.rst#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT *, $file_modified_time, $file_size FROM table_name;\n```\n\n----------------------------------------\n\nTITLE: Disabling File Splitting in Hive Connector for Presto\nDESCRIPTION: Demonstrates how to disable file splitting in the Hive connector using session properties or configuration properties.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.272.rst#2025-04-10_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\nSET SESSION file_splittable = false;\n```\n\n----------------------------------------\n\nTITLE: SQL Error Code Reference\nDESCRIPTION: SQL error code mentioned in Hive-related bug fix documentation.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.247.rst#2025-04-10_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nHIVE_EXCEEDED_SPLIT_BUFFERING_LIMIT\n```\n\n----------------------------------------\n\nTITLE: Using histogram Aggregation Function in SQL\nDESCRIPTION: References the histogram aggregation function, which has been optimized for reduced memory usage in this release.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.194.rst#2025-04-10_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nhistogram()\n```\n\n----------------------------------------\n\nTITLE: Configuring Elasticsearch Connection in Presto\nDESCRIPTION: Connector configurations to control the maximum number of persistent connections and the number of threads handling HTTP connections to Elasticsearch.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.239.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nelasticsearch.max-http-connections\n```\n\nLANGUAGE: SQL\nCODE:\n```\nelasticsearch.http-thread-count\n```\n\n----------------------------------------\n\nTITLE: Configuring Fragment Result Cache Size in Presto\nDESCRIPTION: Introduces a new configuration property to control the total on-disk size of the fragment result cache. The default value is set to 100G.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.265.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nfragment-result-cache.max-cache-size\n```\n\n----------------------------------------\n\nTITLE: Enabling Distributed Joins in Presto SQL\nDESCRIPTION: A new session property 'distributed_join' has been added to enable or disable distributed joins. This allows for fine-tuning query performance based on specific use cases.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.96.rst#2025-04-10_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nSET SESSION distributed_join = true;\n```\n\n----------------------------------------\n\nTITLE: Configuring Low Memory Killer Policy in Presto SQL\nDESCRIPTION: Sets the low memory killer policy to either 'total-reservation' for killing the largest query or 'total-reservation-on-blocked-nodes' for killing queries using the most memory on out-of-memory nodes.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.191.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSET SESSION query.low-memory-killer.policy = 'total-reservation-on-blocked-nodes';\n```\n\n----------------------------------------\n\nTITLE: Documenting Hive Changes in Presto 0.242.1\nDESCRIPTION: This snippet describes a bug fix for reading encrypted DWRF tables in Hive, where queries could previously fail with a NullPointerException.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.242.1.rst#2025-04-10_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\nHive Changes\n------------\n* Fix a bug with reading encrypted DWRF tables where queries could fail with a NullPointerException.\n```\n\n----------------------------------------\n\nTITLE: Inserting Data Directly using Accumulo Shell\nDESCRIPTION: Commands to insert data directly into an Accumulo table using the Accumulo shell, demonstrating how data inserted outside of Presto is still accessible.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/accumulo.rst#2025-04-10_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$ accumulo shell -u root -p secret\nroot@default> table myschema.scientists\nroot@default myschema.scientists> insert row3 metadata name \"Tim Berners-Lee\"\nroot@default myschema.scientists> insert row3 metadata age 60\nroot@default myschema.scientists> insert row3 metadata date 5321\n```\n\n----------------------------------------\n\nTITLE: Using ESCAPE with LIKE Predicate in SHOW Commands\nDESCRIPTION: Support for the ESCAPE clause with LIKE predicates in SHOW SCHEMAS and SHOW TABLES queries, allowing for escaping special characters in pattern matching.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.198.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nESCAPE\n```\n\n----------------------------------------\n\nTITLE: Configuring Spiller Properties in Presto\nDESCRIPTION: Configuration properties for controlling Presto's spilling behavior including strategies, thresholds, and resource limits.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/admin/properties.rst.txt#2025-04-10_snippet_4\n\nLANGUAGE: properties\nCODE:\n```\nexperimental.spiller.task-spilling-strategy=ORDER_BY_CREATE_TIME\nexperimental.memory-revoking-threshold=0.9\nexperimental.memory-revoking-target=0.5\nexperimental.query-limit-spill-enabled=false\nexperimental.spiller.max-revocable-task-memory=500MB\nexperimental.max-revocable-memory-per-node=16GB\nexperimental.spiller-max-used-space-threshold=0.9\nexperimental.spiller-threads=4\nexperimental.max-spill-per-node=100GB\nexperimental.query-max-spill-per-node=100GB\nexperimental.aggregation-operator-unspill-memory-limit=4MB\nexperimental.spill-compression-enabled=false\nexperimental.spill-encryption-enabled=false\n```\n\n----------------------------------------\n\nTITLE: Configuring Presto Worker for Disaggregated Setup\nDESCRIPTION: Configuration for Presto workers in a disaggregated coordinator setup. Workers send heartbeats to the resource manager and handle the computational workload of queries.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/installation/deployment.rst.txt#2025-04-10_snippet_7\n\nLANGUAGE: none\nCODE:\n```\ncoordinator=false\nhttp-server.http.port=8080\nquery.max-memory=50GB\nquery.max-memory-per-node=1GB\ndiscovery.uri=http://example.net:8080 (Point to resource manager host/vip)\nresource-manager-enabled=true\n```\n\n----------------------------------------\n\nTITLE: Creating MySQL Table\nDESCRIPTION: SQL statement for creating a new table in MySQL with various column types.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/mysql.rst#2025-04-10_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE mysql.web.page_views (\n  user_id bigint,\n  page_url varchar,\n  ds date,\n  country varchar\n);\n```\n\n----------------------------------------\n\nTITLE: SQL Function Reference - Query Analysis Configuration\nDESCRIPTION: Configuration properties for setting query analyzer timeout to prevent long-running query analysis. Can be set via configuration property or session property.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.273.rst#2025-04-10_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nplanner.query-analyzer-timeout\nquery_analyzer_timeout\n```\n\n----------------------------------------\n\nTITLE: SQL Table Property Rename\nDESCRIPTION: Renaming of table property from clustered_by to bucketed_by in Hive connector.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.147.rst.txt#2025-04-10_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nclustered_by\nbucketed_by\n```\n\n----------------------------------------\n\nTITLE: Calling a Procedure with Positional Arguments in Presto SQL\nDESCRIPTION: This example demonstrates how to call a procedure named 'test' using positional arguments in Presto SQL.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/call.rst#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCALL test(123, 'apple');\n```\n\n----------------------------------------\n\nTITLE: Creating Kerberos Principal and Keytab for Presto CLI Authentication\nDESCRIPTION: Commands to create a Kerberos principal and generate a keytab file for a user who needs to connect to the Presto coordinator. This uses kadmin to add a principal with a random key and extract the key to a keytab file.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/security/cli.rst#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkadmin\n> addprinc -randkey someuser@EXAMPLE.COM\n> ktadd -k /home/someuser/someuser.keytab someuser@EXAMPLE.COM\n```\n\n----------------------------------------\n\nTITLE: Using Equality Operators with JSON Type in Presto SQL\nDESCRIPTION: Shows the new support for using = and != operators with the JSON data type.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.86.rst#2025-04-10_snippet_5\n\nLANGUAGE: SQL\nCODE:\n```\n=\n```\n\nLANGUAGE: SQL\nCODE:\n```\n!=\n```\n\n----------------------------------------\n\nTITLE: Full Topic Description with Message Field Mapping\nDESCRIPTION: Complete JSON configuration that maps both Kafka key and message fields to Presto table columns. Includes detailed field mappings for JSON data in the message.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/kafka-tutorial.rst#2025-04-10_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"tableName\": \"customer\",\n    \"schemaName\": \"tpch\",\n    \"topicName\": \"tpch.customer\",\n    \"key\": {\n        \"dataFormat\": \"raw\",\n        \"fields\": [\n            {\n                \"name\": \"kafka_key\",\n                \"dataFormat\": \"LONG\",\n                \"type\": \"BIGINT\",\n                \"hidden\": \"false\"\n            }\n        ]\n    },\n    \"message\": {\n        \"dataFormat\": \"json\",\n        \"fields\": [\n            {\n                \"name\": \"row_number\",\n                \"mapping\": \"rowNumber\",\n                \"type\": \"BIGINT\"\n            },\n            {\n                \"name\": \"customer_key\",\n                \"mapping\": \"customerKey\",\n                \"type\": \"BIGINT\"\n            },\n            {\n                \"name\": \"name\",\n                \"mapping\": \"name\",\n                \"type\": \"VARCHAR\"\n            },\n            {\n                \"name\": \"address\",\n                \"mapping\": \"address\",\n                \"type\": \"VARCHAR\"\n            },\n            {\n                \"name\": \"nation_key\",\n                \"mapping\": \"nationKey\",\n                \"type\": \"BIGINT\"\n            },\n            {\n                \"name\": \"phone\",\n                \"mapping\": \"phone\",\n                \"type\": \"VARCHAR\"\n            },\n            {\n                \"name\": \"account_balance\",\n                \"mapping\": \"accountBalance\",\n                \"type\": \"DOUBLE\"\n            },\n            {\n                \"name\": \"market_segment\",\n                \"mapping\": \"marketSegment\",\n                \"type\": \"VARCHAR\"\n            },\n            {\n                \"name\": \"comment\",\n                \"mapping\": \"comment\",\n                \"type\": \"VARCHAR\"\n            }\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Binary Data Conversion Functions in SQL\nDESCRIPTION: New varbinary functions to convert data to and from Base32 encoding format. These functions can be used for encoding and decoding binary data in queries.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.273.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nto_base32()\nfrom_base32()\n```\n\n----------------------------------------\n\nTITLE: Extracting First Match with regexp_extract in Presto SQL\nDESCRIPTION: Illustrates the usage of regexp_extract function to return the first substring matched by a regular expression pattern in a string.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/regexp.rst#2025-04-10_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT regexp_extract('1a 2b 14m', '\\d+'); -- 1\n```\n\n----------------------------------------\n\nTITLE: Renaming Tables in MongoDB Connector for Presto\nDESCRIPTION: Demonstrates the new support for renaming tables in the MongoDB connector using the ALTER TABLE RENAME TO syntax.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.274.rst#2025-04-10_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\nALTER TABLE old_table_name RENAME TO new_table_name;\n```\n\n----------------------------------------\n\nTITLE: New Configuration Property for Distinct Aggregation\nDESCRIPTION: Configuration property to enable deduplication of input data before spilling for distinct aggregates, with session property override capability.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.264.rst#2025-04-10_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nexperimental.dedup-based-distinct-aggregation-spill-enabled\n```\n\n----------------------------------------\n\nTITLE: SQL Reserved Word Usage\nDESCRIPTION: New reserved keyword current_role that will generate warnings when used as an identifier.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.219.rst#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\ncurrent_role\n```\n\n----------------------------------------\n\nTITLE: Configuring Maximum Parquet Read Block Size via Configuration Property\nDESCRIPTION: The hive.parquet.max-read-block-size configuration property controls the maximum column read size for Parquet files to reduce GC pressure.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.227.rst#2025-04-10_snippet_6\n\nLANGUAGE: text\nCODE:\n```\nhive.parquet.max-read-block-size\n```\n\n----------------------------------------\n\nTITLE: Enabling OFFSET Clause in SQL Queries for Presto 0.257\nDESCRIPTION: To enable the new OFFSET clause support in SQL queries, set the session property 'offset_clause_enabled' or configuration property 'offset-clause-enabled' to 'true'. This allows use of the OFFSET clause in SQL query expressions.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.257.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSET SESSION offset_clause_enabled = true;\n```\n\n----------------------------------------\n\nTITLE: Configuration Property for JSON Protocol Message Processing\nDESCRIPTION: Experimental configuration property to enable bytecode generation for processing JSON protocol messages on the coordinator.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.218.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: Properties\nCODE:\n```\nexperimental.json-serde-codegen-enabled\n```\n\n----------------------------------------\n\nTITLE: Configuring Hive Connector Initial Split Count in Java\nDESCRIPTION: This code snippet shows how to set the number of initial splits for the Hive connector in Presto. This configuration can help improve performance for small queries by increasing parallelism.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.70.rst#2025-04-10_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\nhive.max-initial-splits\n```\n\n----------------------------------------\n\nTITLE: Creating Indexed Accumulo Table in Presto\nDESCRIPTION: Creates a table in Presto with indexed columns using the string serializer. Demonstrates how to specify column definitions and table properties for indexing.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/accumulo.rst.txt#2025-04-10_snippet_15\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE myschema.scientists (\n  recordkey VARCHAR,\n  name VARCHAR,\n  age BIGINT,\n  birthday DATE\n)\nWITH (\n  serializer = 'string',\n  index_columns='name,age,birthday'\n);\n```\n\n----------------------------------------\n\nTITLE: Setting Query Output Limits in Presto\nDESCRIPTION: Introduces new session and configuration properties to control the maximum amount of data a query can output. This helps in managing resource usage and preventing excessive data output.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.242.rst#2025-04-10_snippet_1\n\nLANGUAGE: restructuredtext\nCODE:\n```\n* Add session property ``query_max_output_bytes`` and configuration property ``query.max-output-bytes`` to control how much data a query can output.\n```\n\n----------------------------------------\n\nTITLE: Configuring Top N Row Number Optimization in Presto SQL\nDESCRIPTION: Configuration properties to enable or disable the top N row number optimization in Presto. This can be set as a session property or a global configuration option.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.214.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSET SESSION optimize_top_n_row_number = true;\n\n-- or in config file\noptimizer.optimize-top-n-row-number=true\n```\n\n----------------------------------------\n\nTITLE: Custom Uniqueness Distribution\nDESCRIPTION: Generates a uniqueness histogram with a specified number of buckets, accumulating values above histogramSize in the last bucket.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/khyperloglog.rst.txt#2025-04-10_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nuniqueness_distribution(khll, histogramSize)\n```\n\n----------------------------------------\n\nTITLE: Truncating MySQL Table\nDESCRIPTION: SQL statement for removing all data from a table while preserving its structure.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/mysql.rst#2025-04-10_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nTRUNCATE TABLE mysql.web.page_views;\n```\n\n----------------------------------------\n\nTITLE: Setting Query Maximum Broadcast Memory\nDESCRIPTION: Session property to limit memory usage for broadcast joins in a query.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.238.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\nquery_max_broadcast_memory\n```\n\n----------------------------------------\n\nTITLE: Creating Tables on S3 in Presto\nDESCRIPTION: SQL command to create tables on S3 storage. This functionality has been fixed in the current release.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.139.rst.txt#2025-04-10_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE AS\n```\n\n----------------------------------------\n\nTITLE: Basic CALL Statement Syntax in Presto SQL\nDESCRIPTION: The syntax definition for calling a procedure in Presto SQL. It supports passing arguments by name or by position, with optional parameters that can be omitted in certain cases.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/sql/call.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nCALL procedure_name ( [ name => ] expression [, ...] )\n```\n\n----------------------------------------\n\nTITLE: Defining Catalog Access Rules in Presto\nDESCRIPTION: JSON configuration example for catalog access rules that control which users can access which catalogs with what permissions, including examples of all, read-only, and none access levels.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/security/built-in-system-access-control.rst.txt#2025-04-10_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"catalogs\": [\n    {\n      \"user\": \"admin\",\n      \"catalog\": \"(mysql|system)\",\n      \"allow\": \"all\"\n    },\n    {\n      \"catalog\": \"hive\",\n      \"allow\": \"all\"\n    },\n    {\n      \"user\": \"alice\",\n      \"catalog\": \"postgresql\",\n      \"allow\": \"read-only\"\n    },\n    {\n      \"catalog\": \"system\",\n      \"allow\": \"none\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Presto CLI\nDESCRIPTION: Command to start the Presto CLI interactive shell.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/installation/cli.rst#2025-04-10_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n./presto\n```\n\n----------------------------------------\n\nTITLE: Optimizing Hash Generation for Joins in Presto SQL\nDESCRIPTION: Configures Presto to skip hash precomputation for joins when the input is a table scan and the hash is on a single big integer that is not reused later. This optimization is controlled by the 'skip_hash_generation_for_join_with_table_scan_input' session property.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.286.rst#2025-04-10_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nSET SESSION skip_hash_generation_for_join_with_table_scan_input = true;\n```\n\n----------------------------------------\n\nTITLE: Configuring Bytecode Compiler in Presto 0.74\nDESCRIPTION: To revert to the old bytecode compiler implementation, add this configuration option to the etc/config.properties file on both coordinator and workers. This allows fallback in case of issues with the new infrastructure.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.74.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\ncompiler.new-bytecode-generator-enabled=false\n```\n\n----------------------------------------\n\nTITLE: Querying Iceberg Metadata Columns in Presto SQL\nDESCRIPTION: Demonstrates how to query Iceberg-specific metadata columns like $data_sequence_number and $path to retrieve additional information about the data.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.286.rst#2025-04-10_snippet_9\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT *, \"$data_sequence_number\", \"$path\" FROM iceberg_table;\n```\n\n----------------------------------------\n\nTITLE: Optimizing Conditional Aggregation in Presto SQL\nDESCRIPTION: Optimizes IF conditions with aggregation functions by using aggregation with mask at the plan level. This optimization is controlled by the system property 'optimize_conditional_aggregation_enabled' which defaults to false.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.278.rst#2025-04-10_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nIF(predicate, AGG(x))\n```\n\n----------------------------------------\n\nTITLE: Pull Request Reference in PrestoDB Documentation\nDESCRIPTION: Reference to a pull request that introduced a correctness bug related to ORDER BY aggregations when spilling is enabled. The PR is identified as #16788.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.263.rst#2025-04-10_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n:pr:`16788`\n```\n\n----------------------------------------\n\nTITLE: SQL JSON Extract Function\nDESCRIPTION: Performance improvement for json_extract function.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.142.rst#2025-04-10_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\njson_extract\n```\n\n----------------------------------------\n\nTITLE: Enabling Expression Rewriting with Constant Expressions in Presto SQL\nDESCRIPTION: Optimizes queries with equivalence check filters or constant assignments. This feature is controlled by the 'rewrite_expression_with_constant_expression' session property and is enabled by default.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.286.rst#2025-04-10_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nSET SESSION rewrite_expression_with_constant_expression = true;\n```\n\n----------------------------------------\n\nTITLE: Using New Bitwise Shift Operations in Presto SQL\nDESCRIPTION: Perform bitwise shift operations using new functions: bitwise_arithmetic_shift_right, bitwise_logical_shift_right, and bitwise_shift_left.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.222.rst#2025-04-10_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT bitwise_arithmetic_shift_right(value, shift),\n       bitwise_logical_shift_right(value, shift),\n       bitwise_shift_left(value, shift)\nFROM some_table;\n```\n\n----------------------------------------\n\nTITLE: Memory Tracking Configuration\nDESCRIPTION: Configuration property to enable memory tracking in TableFinishOperator for debugging GC issues.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.254.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\ntable-finish-operator-memory-tracking-enabled=true\n```\n\n----------------------------------------\n\nTITLE: Demonstrating NOT Operator with NULL Value in SQL\nDESCRIPTION: This SQL query shows that the NOT operator returns NULL when applied to a NULL value.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/logical.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT NOT CAST(null AS boolean); -- null\n```\n\n----------------------------------------\n\nTITLE: Configuring Target Result Size\nDESCRIPTION: Session property to customize data batch sizes streamed from coordinator.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.238.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\ntarget_result_size\n```\n\n----------------------------------------\n\nTITLE: Documenting ROUND Function Fix in RST\nDESCRIPTION: Release notes entry documenting a performance regression fix in the ROUND function related to type casting\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.278.1.rst#2025-04-10_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n===============\nRelease 0.278.1\n===============\n\nGeneral Changes\n_______________\n* Fix a performance regression in :func:`!ROUND`` caused by type casting. (:pr:`18451`)\n```\n\n----------------------------------------\n\nTITLE: Adding Maximum Standard Error Overload for approx_set in SQL\nDESCRIPTION: Introduces an overload of the approx_set function that takes in the maximum standard error as a parameter.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.221.rst#2025-04-10_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\napprox_set(column, max_standard_error)\n```\n\n----------------------------------------\n\nTITLE: Configuring Hive Metastore with KERBEROS Authentication in Presto\nDESCRIPTION: Example configuration for connecting to a Kerberos-secured Hive metastore. This setup specifies the service principal, client principal, and keytab file location necessary for Kerberos authentication.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/hive-security.rst#2025-04-10_snippet_1\n\nLANGUAGE: none\nCODE:\n```\nhive.metastore.authentication.type=KERBEROS\nhive.metastore.service.principal=hive/hive-metastore-host.example.com@EXAMPLE.COM\nhive.metastore.client.principal=presto@EXAMPLE.COM\nhive.metastore.client.keytab=/etc/presto/hive.keytab\n```\n\n----------------------------------------\n\nTITLE: Configuring Password File Authenticator in Presto\nDESCRIPTION: This snippet shows how to configure the password file authenticator in Presto by creating an etc/password-authenticator.properties file on the coordinator. It specifies the authenticator name and the path to the password file.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/security/password-file.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: none\nCODE:\n```\npassword-authenticator.name=file\nfile.password-file=/path/to/password.db\n```\n\n----------------------------------------\n\nTITLE: Creating a Delta Lake Table with External Location\nDESCRIPTION: SQL command to create a new Delta Lake table with a specified external location in an S3 bucket. This only requires a dummy column since the schema will be determined from the Delta Lake metadata.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/deltalake.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE sales.apac.sales_data_new (dummyColumn INT)\nWITH (external_location = 's3://db-sa-datasets/presto/sales_data_new');\n```\n\n----------------------------------------\n\nTITLE: Setting JDBC Session Properties\nDESCRIPTION: Demonstrates how to set session properties for a Presto JDBC connection by unwrapping the Connection object.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.78.rst#2025-04-10_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nconnection.unwrap(PrestoConnection.class).setSessionProperty(\"name\", \"value\");\n```\n\n----------------------------------------\n\nTITLE: SQL JOIN Query Fixes in Presto 0.89\nDESCRIPTION: Reference to JOIN queries that had rare conditions causing incorrect results, now fixed in Presto 0.89.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.89.rst#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nJOIN\n```\n\n----------------------------------------\n\nTITLE: Calling a Procedure with Named Arguments in Presto SQL\nDESCRIPTION: Example of calling a procedure named 'test' with named arguments. The arguments are 'name' with value 'apple' and 'id' with value 123, demonstrating how named arguments can be specified in any order.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/sql/call.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nCALL test(name => 'apple', id => 123);\n```\n\n----------------------------------------\n\nTITLE: Limiting Replicated Table Size in Presto SQL\nDESCRIPTION: Sets the maximum size for replicated tables in join operations. This session property helps improve cluster concurrency and prevent suboptimal query plans when the cost-based optimizer misestimates table sizes.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/optimizer/cost-based-optimizations.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nSET SESSION join_max_broadcast_table_size = '100MB';\n```\n\n----------------------------------------\n\nTITLE: Query Available ANALYZE Properties\nDESCRIPTION: SQL query to list all available properties for the ANALYZE command from system metadata.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/sql/analyze.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM system.metadata.analyze_properties\n```\n\n----------------------------------------\n\nTITLE: Using trail Function in Presto SQL\nDESCRIPTION: The trail function in Presto likely provides a way to access prior values in a sequence or related functionality. The specific implementation details are not provided in the release notes.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.284.rst#2025-04-10_snippet_5\n\nLANGUAGE: SQL\nCODE:\n```\ntrail(value)\n```\n\n----------------------------------------\n\nTITLE: Using Cross Join in Presto IN Queries\nDESCRIPTION: This snippet mentions a fix for a NoSuchElementException that occurred when using a cross join inside an IN query in Presto.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.122.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\n... cross join ... IN ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Redundant Cast Removal in Presto SQL\nDESCRIPTION: Enables the removal of redundant 'cast to varchar' expressions in join conditions. This feature is controlled by the session property 'remove_redundant_cast_to_varchar_in_join' and is enabled by default.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.285.rst#2025-04-10_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSET SESSION remove_redundant_cast_to_varchar_in_join = true;\n```\n\n----------------------------------------\n\nTITLE: Configuring Query Execution Settings for Presto Verifier\nDESCRIPTION: This snippet outlines configuration options for controlling query execution on the control cluster. It includes settings for cluster hosts, ports, timeout limits, and application name.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/admin/verifier.rst#2025-04-10_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\n\"control.hosts\"                           Comma-separated list of the control cluster hostnames or IP addresses.\n\"control.jdbc-port\"                       JDBC port of the control cluster.\n\"control.http-host\"                       HTTP port of the control cluster.\n\"control.jdbc-url-parameters\"             A ``JSON`` map representing the additional URL parameters for control JDBC.\n\"control.query-timeout\"                   The execution time limit of the control and the test queries.\n\"control.metadata-timeout\"                The execution time limit of ``DESC`` queries and ``LIMIT 0`` queries.\n\"control.checksum-timeout\"                The execution time limit of checksum queries.\n\"control.application-name\"                ApplicationName to be passed in ClientInfo. Can be used to set source.\n```\n\n----------------------------------------\n\nTITLE: Adding array_sort_desc Function in SQL\nDESCRIPTION: Introduces a new SQL function array_sort_desc to sort an array in descending order.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.279.rst#2025-04-10_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\narray_sort_desc(array)\n```\n\n----------------------------------------\n\nTITLE: SQL Column Domain Value Escaping\nDESCRIPTION: Example showing how double quotes are escaped in column domain values within the text query plan using backslash.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.256.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nab\"c -> ab\\\"c\n```\n\n----------------------------------------\n\nTITLE: Configuring Prometheus Connector in Presto\nDESCRIPTION: Configuration properties for the Prometheus connector in Presto. This configuration file should be created at etc/catalog/prometheus.properties to mount the Prometheus connector as the 'prometheus' catalog.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/prometheus.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nconnector.name=prometheus\nprometheus.uri=http://localhost:9090\nprometheus.query-chunk-duration=1d\nprometheus.max-query-duration=1h\nprometheus.cache-ttl=30s\nprometheus.bearer-token-file=/path/to/bearer/token/file\nprometheus.tls.enabled=true\nprometheus.tls.truststore-path=/path/to/truststore\nprometheus.tls.truststore-password=truststorePassword\nverify-host-name=true\n```\n\n----------------------------------------\n\nTITLE: Configuring Temporary Staging Directory for Hive Connector in Presto\nDESCRIPTION: These configuration properties control the use and location of a temporary staging directory for write operations in the Hive connector. The ${USER} placeholder can be used to specify a user-specific location.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.217.rst#2025-04-10_snippet_2\n\nLANGUAGE: Properties\nCODE:\n```\nhive.temporary-staging-directory-enabled=<true|false>\nhive.temporary-staging-directory-path=/tmp/${USER}\n```\n\n----------------------------------------\n\nTITLE: Enabling formatted prepared query logging in Presto 0.252\nDESCRIPTION: Session property to enable logging of formatted prepared queries.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.252.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\nlog_formatted_query_enabled = true\n```\n\n----------------------------------------\n\nTITLE: Using array_join Function in SQL\nDESCRIPTION: The performance of the array_join function has been improved in this release. This function is used to join elements of an array into a string.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.231.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT array_join(array_column, ',') FROM table;\n```\n\n----------------------------------------\n\nTITLE: SQL Function Reference - Bing Tile Coordinates\nDESCRIPTION: Reference to the bing_tile_coordinates function that received fixes in this release.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.200.rst#2025-04-10_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nbing_tile_coordinates\n```\n\n----------------------------------------\n\nTITLE: Configuring Failure Resolution for Presto Verifier\nDESCRIPTION: This snippet details configuration options for failure resolution in Presto Verifier. It includes settings for handling various types of failures such as memory limits, time limits, and verifier limitations.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/admin/verifier.rst#2025-04-10_snippet_8\n\nLANGUAGE: plaintext\nCODE:\n```\n\"exceeded-global-memory-limit.failure-resolver.enabled\" Whether to enable the failure resolver for test query failures with\n                                                          ``EXCEEDED_GLOBAL_MEMORY_LIMIT``.\n\"exceeded-time-limit.failure-resolver.enabled\"          Whether to enable the failure resolver for test query failures with\n                                                          ``EXCEEDED_TIME_LIMIT``.\n\"verifier-limitation.failure-resolver.enabled\"          Whether to enable the failure resolver for failures due to Verifier\n                                                          limitations.\n\"too-many-open-partitions.failure-resolver.enabled\"     Whether to enable the failure resolver for test query failures with\n                                                          ``HIVE_TOO_MANY_OPEN_PARTITIONS``.\n\"too-many-open-partitions.max-buckets-per-writer\"       The maximum buckets count per writer configured on the control and the\n                                                          test cluster.\n\"too-many-open-partitions.cluster-size-expiration\"      The time limit of the test cluster size being cached.\n\"structured-column.failure-resolver.enabled\"            Whether to enable the failure resolver for column mismatches of\n                                                          structured-type columns.\n\"ignored-functions.failure-resolver.enabled\"            Whether to enable the ``IgnoredFunctions`` result mismatch failure\n                                                          resolver.\n\"ignored-functions.functions\"                           A comma-separated list of functions. Resolves mismatches if a query\n                                                          uses any functions in the list.\n```\n\n----------------------------------------\n\nTITLE: Enabling Optimized Repartitioning via Session Property\nDESCRIPTION: The optimized_repartitioning session property enables performance improvements for data repartitioning between stages.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.227.rst#2025-04-10_snippet_2\n\nLANGUAGE: text\nCODE:\n```\noptimized_repartitioning\n```\n\n----------------------------------------\n\nTITLE: SQL Function Reference - Hive Configuration Properties\nDESCRIPTION: Configuration properties for Hive connector related to partition caching and table management behaviors.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.273.rst#2025-04-10_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nhive.partition-cache-column-count-limit\nhive.metastore.thrift.delete-files-on-table-drop\nhive.insert-existing-partitions-behavior\nhive.insert-overwrite-immutable-partitions-enabled\nhive.streaming-aggregation-enabled\nhive.order-based-execution-enabled\n```\n\n----------------------------------------\n\nTITLE: Using array_join Function in SQL\nDESCRIPTION: The performance of the array_join function has been improved in this release. This function is used to join elements of an array into a string.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.231.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT array_join(array_column, ',') FROM table;\n```\n\n----------------------------------------\n\nTITLE: HDFS Username Override Configuration\nDESCRIPTION: JVM configuration to override the default HDFS username used by Presto when accessing HDFS without Kerberos authentication.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/hive.rst#2025-04-10_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\n-DHADOOP_USER_NAME=hdfs_user\n```\n\n----------------------------------------\n\nTITLE: SQL Server Connection with Disabled Encryption\nDESCRIPTION: Example of a SQL Server connection string with encryption disabled using the encrypt property.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/sqlserver.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\nconnection-url=jdbc:sqlserver://<host>:<port>;databaseName=<databaseName>;encrypt=false;\n```\n\n----------------------------------------\n\nTITLE: SQL UNNEST Reference\nDESCRIPTION: Reference to UNNEST functionality where duplicate items were causing compilation failures before the fix.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.280.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nUNNEST\n```\n\n----------------------------------------\n\nTITLE: SQL Function Example - Log Function Alternative\nDESCRIPTION: Demonstrates the replacement for the deprecated log() function using natural logarithm. The equivalent to log(x, b) is now expressed as ln(x) / ln(b).\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.200.rst#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nln(x) / ln(b)\n```\n\n----------------------------------------\n\nTITLE: Configuring Node Memoization in Presto\nDESCRIPTION: Configuration property to enable cache affinity improvement by memoizing dead nodes for a limited time to prevent unnecessary repartitioning.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.251.rst#2025-04-10_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\ninternal-communication.memoize-dead-nodes-enabled=true\n```\n\n----------------------------------------\n\nTITLE: Defining Presto Router Configuration Rules\nDESCRIPTION: JSON configuration for Presto Router, specifying cluster groups, selectors, scheduler type, and predictor URI.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/router/deployment.rst#2025-04-10_snippet_3\n\nLANGUAGE: none\nCODE:\n```\n{\n  \"groups\": [\n    {\n      \"name\": \"all\",\n      \"members\": [\"http://127.0.0.1:61381\", \"http://127.0.0.1:61382\"],\n      \"weights\": [1, 5]\n    }\n  ],\n  \"selectors\": [\n    {\n      \"targetGroup\": \"all\"\n    }\n  ],\n  \"scheduler\": \"RANDOM_CHOICE\",\n  \"predictor\": \"http://127.0.0.1:8000/v1\"\n}\n```\n\n----------------------------------------\n\nTITLE: List Information Schema Tables\nDESCRIPTION: SQL command to show all available tables in the JMX information schema.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/jmx.rst.txt#2025-04-10_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nSHOW TABLES FROM jmx.information_schema;\n```\n\n----------------------------------------\n\nTITLE: Adding remove_nulls Function in SQL\nDESCRIPTION: Introduces a new SQL function remove_nulls to remove null elements from an array.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.279.rst#2025-04-10_snippet_5\n\nLANGUAGE: SQL\nCODE:\n```\nremove_nulls(array)\n```\n\n----------------------------------------\n\nTITLE: Altering PostgreSQL Tables\nDESCRIPTION: Examples of ALTER TABLE operations supported by the PostgreSQL connector.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/postgresql.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE postgresql.public.sample_table ADD COLUMN new_col INT;\nALTER TABLE postgresql.public.sample_table DROP COLUMN new_col;\nALTER TABLE postgresql.public.sample_table RENAME COLUMN is_active TO is_enabled;\nALTER TABLE postgresql.public.sample_table RENAME TO renamed_table;\n```\n\n----------------------------------------\n\nTITLE: Transforming Left Joins with Array Contains to Equi Joins in Presto SQL\nDESCRIPTION: Enables the transformation of left joins with an ARRAY CONTAINS condition in the join criteria into an equi join. This optimization is controlled by the 'rewrite_left_join_array_contains_to_equi_join' session property.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.286.rst#2025-04-10_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nSET SESSION rewrite_left_join_array_contains_to_equi_join = true;\n```\n\n----------------------------------------\n\nTITLE: Executing JSON Path Extraction in Presto SQL\nDESCRIPTION: Demonstrates the new square bracket syntax support for json_extract functions, allowing access to nested JSON elements including those with special characters.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.75.rst#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT json_extract(json, '$.store[book]');\nSELECT json_extract(json, '$.store[\"book name\"]');\n```\n\n----------------------------------------\n\nTITLE: Configuration Properties\nDESCRIPTION: New configuration and session properties added for controlling distinct and order by aggregation spilling behavior.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.256.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nexperimental.distinct-aggregation-spill-enabled\ndistinct_aggregation_spill_enabled\nexperimental.order-by-aggregation-spill-enabled\norder_by_aggregation_spill_enabled\n```\n\n----------------------------------------\n\nTITLE: Starting Kafka Server in Bash\nDESCRIPTION: Command to start the Kafka server using the default server properties configuration file.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/kafka-tutorial.rst#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/kafka-server-start.sh config/server.properties\n```\n\n----------------------------------------\n\nTITLE: Using contains() Function in Presto SQL\nDESCRIPTION: The contains() function in Presto SQL has been updated to work with all comparable types. This improvement enhances the versatility of the function across different data types.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.99.rst#2025-04-10_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\ncontains()\n```\n\n----------------------------------------\n\nTITLE: Skip Redundant Sort Configuration Properties in Presto\nDESCRIPTION: Configuration properties to control the optimization that improves queries with unnecessary limits and order by clauses. The feature is enabled by default but can be disabled using either the configuration property or session property mentioned.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.246.rst.txt#2025-04-10_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\noptimizer.skip-redundant-sort\n```\n\nLANGUAGE: sql\nCODE:\n```\nskip_redundant_sort\n```\n\n----------------------------------------\n\nTITLE: Grouping with COUNT(*) in SQL\nDESCRIPTION: Resolves a planning failure for queries using COUNT(*) with a non-empty GROUP BY clause. This fix improves query planning for specific aggregation scenarios.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.184.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\ncount(*)\n```\n\n----------------------------------------\n\nTITLE: Setting Query Output Size Limits in Presto\nDESCRIPTION: Configuration properties to control the maximum amount of data a query can output.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.242.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\nquery_max_output_bytes\nquery.max-output-bytes\n```\n\n----------------------------------------\n\nTITLE: Enabling S3 Select Pushdown in Hive Connector\nDESCRIPTION: Demonstrates how to enable S3 select pushdown for the Hive connector, which allows pushing down projections and predicates into S3 for text files. This feature can be controlled via configuration properties.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.216.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSET hive.parquet.fail-on-corrupted-statistics = false;\nSET SESSION parquet_fail_with_corrupted_statistics = false;\n```\n\n----------------------------------------\n\nTITLE: Enabling Partition Versioning in Hive\nDESCRIPTION: Introduces support for partition versioning in Hive, which can be enabled through a new configuration property. This feature allows for better management of partition updates and history.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.242.rst#2025-04-10_snippet_4\n\nLANGUAGE: restructuredtext\nCODE:\n```\n* Add support for partition versioning. This can be enabled with ``hive.partition-versioning-enabled`` configuration property\n```\n\n----------------------------------------\n\nTITLE: Configuring Processing Optimization in Presto 0.149\nDESCRIPTION: Configuration properties for optimizer processing settings, merged from separate columnar processing properties into a single unified property with three possible values.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.149.rst#2025-04-10_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\noptimizer.processing-optimization=disabled|columnar|columnar_dictionary\n```\n\n----------------------------------------\n\nTITLE: Disabling Encryption in SQL Server Connection\nDESCRIPTION: This code snippet demonstrates how to disable encryption in the SQL Server connection string using the 'encrypt' property.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/sqlserver.rst#2025-04-10_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\nconnection-url=jdbc:sqlserver://<host>:<port>;databaseName=<databaseName>;encrypt=false;\n```\n\n----------------------------------------\n\nTITLE: Complex OpenLDAP Group Authorization Query\nDESCRIPTION: Advanced LDAP query pattern for authorizing users belonging to multiple groups in OpenLDAP.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/security/ldap.rst.txt#2025-04-10_snippet_7\n\nLANGUAGE: properties\nCODE:\n```\nldap.group-auth-pattern=(&(|(memberOf=CN=normal_group,DC=corp,DC=com)(memberOf=CN=another_group,DC=com))(objectClass=inetOrgPerson)(uid=${USER}))\n```\n\n----------------------------------------\n\nTITLE: Setting Current Snapshot for an Iceberg Table by Reference in Presto\nDESCRIPTION: This procedure sets the current snapshot for an Iceberg table using a snapshot reference (branch or tag). Uses named parameters to specify the schema, table name, and reference.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/iceberg.rst#2025-04-10_snippet_28\n\nLANGUAGE: sql\nCODE:\n```\nCALL iceberg.system.set_current_snapshot(schema => 'schema_name', table_name => 'table_name', ref => 'branch1');\n```\n\n----------------------------------------\n\nTITLE: Configuring Presto to List Non-Built-in Functions\nDESCRIPTION: Enable listing of non-built-in functions in SHOW FUNCTIONS output by setting the 'list-non-built-in-functions' configuration property.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.230.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSHOW FUNCTIONS\n```\n\n----------------------------------------\n\nTITLE: Configuring Hive Catalog Properties\nDESCRIPTION: Configuration setting to disable Hive bucketing optimizations due to known issues in release 0.150.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.150.rst#2025-04-10_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nhive.bucket-execution=false\n```\n\n----------------------------------------\n\nTITLE: New Presto Node Scheduler Configuration\nDESCRIPTION: Node scheduler configuration property to set the maximum number of unacknowledged source splits per task.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.250.rst#2025-04-10_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\nnode-scheduler.max-unacknowledged-splits-per-task\n```\n\n----------------------------------------\n\nTITLE: Running Presto Router in Foreground\nDESCRIPTION: Command to run Presto Router in the foreground, with output to stdout/stderr.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/router/deployment.rst#2025-04-10_snippet_5\n\nLANGUAGE: none\nCODE:\n```\nbin/launcher run\n```\n\n----------------------------------------\n\nTITLE: Configuring File-Based System Access Control in Presto\nDESCRIPTION: This snippet demonstrates how to set up the file-based system access control plugin in Presto by specifying the plugin name and config file location in the access-control.properties file.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/security/built-in-system-access-control.rst#2025-04-10_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\naccess-control.name=file\nsecurity.config-file=etc/rules.json\n```\n\n----------------------------------------\n\nTITLE: Using Last Day of Month Function in Presto SQL\nDESCRIPTION: Shows the usage of the newly added last_day_of_month UDF to return the last day of a given month.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.270.rst#2025-04-10_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT last_day_of_month(date_column) FROM table;\n```\n\n----------------------------------------\n\nTITLE: Simplifying Map Cardinality Expressions in Presto SQL\nDESCRIPTION: Demonstrates the new optimizer rule that simplifies expressions involving map_keys and map_values cardinality calculations.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.270.rst#2025-04-10_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT cardinality(map_keys(m)) FROM table;\n-- Optimized to:\nSELECT cardinality((m)) FROM table;\n```\n\n----------------------------------------\n\nTITLE: Terminating a Running Query with DELETE Request\nDESCRIPTION: To cancel a running query, send a DELETE request to the nextUri provided in the previous query response. This terminates the query execution on the server.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/develop/client-protocol.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: HTTP\nCODE:\n```\nDELETE /v1/statement/20140120_032523_00000_32v8g/2 HTTP/1.1\nX-Presto-User: username\n```\n\n----------------------------------------\n\nTITLE: Describing Table Schema in Presto\nDESCRIPTION: Output of describing the users table structure in Presto, showing column names, data types, and additional metadata\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/cassandra.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\n Column  |  Type   | Extra | Comment\n---------+---------+-------+---------\n user_id | bigint  |       |\n fname   | varchar |       |\n lname   | varchar |       |\n(3 rows)\n```\n\n----------------------------------------\n\nTITLE: SQL System Functions and Operations in Presto 0.84\nDESCRIPTION: Various SQL operations and functions mentioned in the release notes, including array handling, joins, and system table queries.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.84.rst#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCOUNT(*)\n```\n\nLANGUAGE: sql\nCODE:\n```\nnode-scheduler.location-aware-scheduling-enabled=false\n```\n\nLANGUAGE: sql\nCODE:\n```\nNaN\n```\n\nLANGUAGE: sql\nCODE:\n```\nJOIN\n```\n\nLANGUAGE: sql\nCODE:\n```\ninformation_schema\n```\n\nLANGUAGE: sql\nCODE:\n```\nsys\n```\n\n----------------------------------------\n\nTITLE: Enabling Storage-Based Broadcast Join in Presto on Spark Configuration\nDESCRIPTION: This configuration property enables support for distributing broadcast tables using persistent storage in Presto on Spark, removing the Spark driver from the distribution flow.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.249.rst#2025-04-10_snippet_2\n\nLANGUAGE: Properties\nCODE:\n```\nspark.storage-based-broadcast-join-storage=true\n```\n\n----------------------------------------\n\nTITLE: Querying $manifests Metadata Table in Iceberg with Presto\nDESCRIPTION: Shows how to query the $manifests metadata table, which provides details about the manifests of different table snapshots in Iceberg.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/iceberg.rst.txt#2025-04-10_snippet_17\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM \"ctas_nation$manifests\";\n```\n\nLANGUAGE: text\nCODE:\n```\n                                           path                                  | length | partition_spec_id |  added_snapshot_id  | added_data_files_count | existing_data_files_count | deleted_data_files_count | partitions\n---------------------------------------------------------------------------------+--------+-------------------+---------------------+------------------------+---------------------------+--------------------------+-----------\ns3://my-bucket/ctas_nation/metadata/395a2cad-b244-409b-b030-cc44949e5a4e-m0.avro |   5957 |                 0 | 7606232158543069775 |                      1 |                         0 |                    0     |    []\n```\n\n----------------------------------------\n\nTITLE: Druid Connector Configuration in Presto\nDESCRIPTION: New configuration property for the Druid connector in Presto to enable query processing pushdown.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.235.rst.txt#2025-04-10_snippet_5\n\nLANGUAGE: SQL\nCODE:\n```\ndruid.compute-pushdown-enabled\n```\n\n----------------------------------------\n\nTITLE: Setting experimental spiller task strategy in Presto 0.252\nDESCRIPTION: Configuration parameter to enable the new spilling strategy that triggers when a combination of memory types exceeds max_total_memory_per_node.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.252.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nexperimental.spiller.task-spilling-strategy = PER_QUERY_MEMORY_LIMIT\n```\n\n----------------------------------------\n\nTITLE: Setting Required Workers for Query Execution in Presto Configuration\nDESCRIPTION: Configuration properties to set the minimum number of worker nodes required for query execution and the maximum wait time for these workers to become available.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.214.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nquery-manager.required-workers=10\nquery-manager.required-workers-max-wait=5m\n```\n\n----------------------------------------\n\nTITLE: Using concat Function with Multiple Arguments in SQL\nDESCRIPTION: The concat function now supports combining an arbitrary number of string arguments into a single string.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.113.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nconcat\n```\n\n----------------------------------------\n\nTITLE: Querying Information Schema Columns in MySQL, Redis, Kafka, and MongoDB\nDESCRIPTION: This snippet refers to a fix for querying the information_schema.columns table in MySQL, Redis, Kafka, and MongoDB connectors. It addresses an issue that occurred when there was no equality predicate on the table_name column.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.195.rst#2025-04-10_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT * FROM information_schema.columns\n```\n\n----------------------------------------\n\nTITLE: Registering Iceberg Table Basic Example SQL\nDESCRIPTION: Example of registering an existing Iceberg table with the catalog by specifying schema, table name and metadata location.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/iceberg.rst#2025-04-10_snippet_22\n\nLANGUAGE: sql\nCODE:\n```\nCALL iceberg.system.register_table('schema_name', 'table_name', 'hdfs://localhost:9000/path/to/iceberg/table/metadata/dir')\n\nCALL iceberg.system.register_table(table_name => 'table_name', schema => 'schema_name', metadata_location => 'hdfs://localhost:9000/path/to/iceberg/table/metadata/dir')\n```\n\n----------------------------------------\n\nTITLE: SQL Bug with SORT/LIMIT and GROUPING SETS in Presto 0.246\nDESCRIPTION: Warning about a bug that incorrectly eliminates SORT or LIMIT operations when used with GROUPING SETS (()), CUBE, or ROLLUP functions. The issue was introduced in version 0.246 by PR #14915.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.246.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nGROUPING SETS (())\n```\n\n----------------------------------------\n\nTITLE: Setting Concurrent Writers for Partitioned Writes\nDESCRIPTION: The task_partitioned_writer_count session property allows configuring the number of concurrent writers for partitioned (bucketed) writes.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.227.rst#2025-04-10_snippet_4\n\nLANGUAGE: text\nCODE:\n```\ntask_partitioned_writer_count\n```\n\n----------------------------------------\n\nTITLE: Presto Expression Class Reference\nDESCRIPTION: Reference to RowExpression utilities that were relocated to the presto-expressions module as part of SPI changes.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.228.rst#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nRowExpression\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents for Presto Router Documentation in reStructuredText\nDESCRIPTION: Creates a table of contents structure for Presto Router documentation using reStructuredText directives. The toctree directive is configured with maxdepth of 1 and includes links to router deployment and scheduler documentation pages.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/router.rst#2025-04-10_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. toctree::\n    :maxdepth: 1\n\n    router/deployment\n    router/scheduler\n```\n\n----------------------------------------\n\nTITLE: Adding Redis Provider FileSet Configuration\nDESCRIPTION: XML configuration for including Redis HBO Provider plugin in Presto server assembly\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/plugin/redis-hbo-provider.rst#2025-04-10_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<fileSet>\n   <directory>${project.build.directory}/dependency/redis-hbo-provider-${project.version}</directory>\n   <outputDirectory>plugin/redis-hbo-provider</outputDirectory>\n</fileSet>\n```\n\n----------------------------------------\n\nTITLE: Enabling Key-Based Sampling in PrestoDB Queries\nDESCRIPTION: Session properties to enable and configure key-based sampling at query time. The feature is enabled with 'key_based_sampling_enabled=true' and can be customized with 'key_based_sampling_percentage' and 'key_based_sampling_function' properties.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.263.rst#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nkey_based_sampling_enabled=true\n```\n\nLANGUAGE: sql\nCODE:\n```\nkey_based_sampling_percentage\n```\n\nLANGUAGE: sql\nCODE:\n```\nkey_based_sampling_function\n```\n\n----------------------------------------\n\nTITLE: Renaming an Iceberg View\nDESCRIPTION: Example of renaming an existing Iceberg view using ALTER VIEW statement.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/iceberg.rst.txt#2025-04-10_snippet_47\n\nLANGUAGE: sql\nCODE:\n```\nALTER VIEW iceberg.web.page_views RENAME TO iceberg.web.page_new_views;\n```\n\n----------------------------------------\n\nTITLE: Basic VALUES Syntax in Presto SQL\nDESCRIPTION: Shows the syntax for the VALUES clause which defines a literal inline table. It can be used with a single row expression or multiple column expressions.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/sql/values.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: none\nCODE:\n```\nVALUES row [, ...]\n```\n\nLANGUAGE: none\nCODE:\n```\n( column_expression [, ...] )\n```\n\n----------------------------------------\n\nTITLE: Configuration Property Reference in Presto 0.133\nDESCRIPTION: Configuration properties mentioned in the release notes for controlling dictionary aggregation optimization.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.133.rst#2025-04-10_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\noptimizer.dictionary-aggregation\n```\n\n----------------------------------------\n\nTITLE: Spill to Disk Configuration for Grouped Execution\nDESCRIPTION: Reference to a change that disables spill to disk functionality for join queries where the probe side uses grouped execution but the build side doesn't, which previously resulted in GENERIC_INTERNAL_ERRORS.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.246.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nGENERIC_INTERNAL_ERRORS\n```\n\n----------------------------------------\n\nTITLE: New Aggregate Functions in SQL\nDESCRIPTION: Addition of new bitwise aggregation functions for performing AND and OR operations across rows.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.157.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nbitwise_and_agg\nbitwise_or_agg\n```\n\n----------------------------------------\n\nTITLE: Inserting Data into MongoDB using SQL\nDESCRIPTION: Reintroduces INSERT support for the MongoDB connector, which was previously removed in version 0.155. This allows for data insertion into MongoDB collections using SQL syntax.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.193.rst.txt#2025-04-10_snippet_5\n\nLANGUAGE: SQL\nCODE:\n```\nINSERT INTO mongodb_table (column1, column2) VALUES ('value1', 'value2')\n```\n\n----------------------------------------\n\nTITLE: Configuring Streaming Exchange for Mark Distinct in Presto\nDESCRIPTION: Sets session and configuration properties to force streaming exchange for Mark Distinct even if materialized exchange is enabled.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.234.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nuse_stream_exchange_for_mark_distinct\n```\n\nLANGUAGE: SQL\nCODE:\n```\nquery.use-streaming-exchange-for-mark-distinct\n```\n\n----------------------------------------\n\nTITLE: Defining Plugin Entry Point in Java ServiceLoader\nDESCRIPTION: This snippet shows how to define the entry point for a Presto plugin using the Java ServiceLoader mechanism. The plugin class name is specified in a file named 'com.facebook.presto.spi.Plugin' in the META-INF/services directory.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/develop/spi-overview.rst#2025-04-10_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ncom.facebook.presto.example.ExamplePlugin\n```\n\n----------------------------------------\n\nTITLE: Describing SPI Change for ConnectorSplitSource in Presto 0.67\nDESCRIPTION: Documents a backwards-incompatible change to the ConnectorSplitSource interface in the Presto SPI. The interface now extends Closeable, requiring connector implementations to be updated.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.67.rst#2025-04-10_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\nSPI changes\n-----------\n\nThe ``ConnectorSplitSource`` interface now extends ``Closeable``.\n\n.. note::\n    This is a backwards incompatible change to ``ConnectorSplitSource`` in the SPI,\n    so if you have written a connector, you will need to update your code before\n    deploying this release.\n```\n\n----------------------------------------\n\nTITLE: Setting S3 Upload ACL Type in Hive Connector for Presto\nDESCRIPTION: Configuration property for the Hive connector to specify the type of ACL (Access Control List) to use when uploading files to Amazon S3 storage.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.214.rst.txt#2025-04-10_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nhive.s3.upload-acl-type=bucket-owner-full-control\n```\n\n----------------------------------------\n\nTITLE: Referencing ColumnMetadata Property in RestructuredText\nDESCRIPTION: Shows the syntax for referring to the ordinalPosition property that was removed from the ColumnMetadata class in the SPI changes.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.105.rst#2025-04-10_snippet_1\n\nLANGUAGE: restructuredtext\nCODE:\n```\n``ordinalPosition``\n```\n\n----------------------------------------\n\nTITLE: Setting Presto History File Location\nDESCRIPTION: Specifies a custom location for the Presto CLI history file using an environment variable.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.208.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nexport PRESTO_HISTORY_FILE=/path/to/custom/history/file\n```\n\n----------------------------------------\n\nTITLE: Generic Type Parameter Access Example in Java\nDESCRIPTION: Example showing how to access the Type object for generic type parameters using @TypeParameter annotation in scalar functions.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/develop/functions.rst.txt#2025-04-10_snippet_11\n\nLANGUAGE: java\nCODE:\n```\n@ScalarFunction(\"example\")\n@TypeParameter(\"T\")\npublic static Block exampleFunction(\n        @TypeParameter(\"T\") Type type,\n        @BlockPosition @SqlType(\"T\") Block block,\n        @BlockIndex int index) { /* ...implementation */ }\n```\n\n----------------------------------------\n\nTITLE: Defining Principal Rules for LDAP and Kerberos in Presto\nDESCRIPTION: This JSON snippet demonstrates how to define principal rules for LDAP and Kerberos authentication in Presto's file-based system access control plugin.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/security/built-in-system-access-control.rst#2025-04-10_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"catalogs\": [\n    {\n      \"allow\": true\n    }\n  ],\n  \"principals\": [\n    {\n      \"principal\": \"(.*)\",\n      \"principal_to_user\": \"$1\",\n      \"allow\": true\n    },\n    {\n      \"principal\": \"([^/]+)/?.*@.*\",\n      \"principal_to_user\": \"$1\",\n      \"allow\": true\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Iceberg Table with Metadata File SQL\nDESCRIPTION: Example of registering an Iceberg table while specifying a particular metadata file to use.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/iceberg.rst#2025-04-10_snippet_23\n\nLANGUAGE: sql\nCODE:\n```\nCALL iceberg.system.register_table('schema_name', 'table_name', 'hdfs://localhost:9000/path/to/iceberg/table/metadata/dir', '00000-35a08aed-f4b0-4010-95d2-9d73ef4be01c.metadata.json')\n\nCALL iceberg.system.register_table(table_name => 'table_name', schema => 'schema_name', metadata_location => 'hdfs://localhost:9000/path/to/iceberg/table/metadata/dir', metadata_file => '00000-35a08aed-f4b0-4010-95d2-9d73ef4be01c.metadata.json')\n```\n\n----------------------------------------\n\nTITLE: Accessing Thread Visualization UI in Presto 0.64\nDESCRIPTION: Presto 0.64 introduces a new thread visualization UI accessible at the '/ui/thread' endpoint. This feature allows users to monitor and analyze thread behavior in the Presto cluster.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.64.rst#2025-04-10_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n/ui/thread\n```\n\n----------------------------------------\n\nTITLE: Presto Configuration Settings\nDESCRIPTION: New and updated configuration properties for query management and optimization\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.116.rst#2025-04-10_snippet_1\n\nLANGUAGE: config\nCODE:\n```\nquery.low-memory-killer.enabled\nquery.low-memory-killer.delay\nquery.max-run-time\noptimizer.optimize-hash-generation\ndistributed-joins-enabled\n```\n\n----------------------------------------\n\nTITLE: Setting Index Loader Timeout Session Property\nDESCRIPTION: The index_loader_timeout session property allows per-session control over maximum index loading time.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.227.rst#2025-04-10_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nindex_loader_timeout\n```\n\n----------------------------------------\n\nTITLE: Prometheus Metrics Format Example in Presto C++\nDESCRIPTION: Example of metrics data returned by the '/v1/info/metrics' endpoint in Prometheus Data Format, showing various counter metrics for Presto C++ workers including HTTP requests, memory management, and cache operations.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/presto_cpp/features.rst#2025-04-10_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n# TYPE presto_cpp_num_http_request counter\npresto_cpp_num_http_request{cluster=\"testing\",worker=\"\"} 0\n# TYPE presto_cpp_num_http_request_error counter\npresto_cpp_num_http_request_error{cluster=\"testing\",worker=\"\"} 0\n# TYPE presto_cpp_memory_pushback_count counter\npresto_cpp_memory_pushback_count{cluster=\"testing\",worker=\"\"} 0\n# TYPE velox_driver_yield_count counter\nvelox_driver_yield_count{cluster=\"testing\",worker=\"\"} 0\n# TYPE velox_cache_shrink_count counter\nvelox_cache_shrink_count{cluster=\"testing\",worker=\"\"} 0\n# TYPE velox_memory_cache_num_stale_entries counter\nvelox_memory_cache_num_stale_entries{cluster=\"testing\",worker=\"\"} 0\n# TYPE velox_arbitrator_requests_count counter\nvelox_arbitrator_requests_count{cluster=\"testing\",worker=\"\"} 0\n```\n\n----------------------------------------\n\nTITLE: Failed Primary Key Creation Example\nDESCRIPTION: Example showing unsupported primary key constraint creation in PrestoDB.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/mysql.rst#2025-04-10_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE users (\n        id INT PRIMARY KEY,\n        name TEXT,\n        email TEXT\n    );\n```\n\n----------------------------------------\n\nTITLE: Enabling CRC32 Checksum for Data Exchanges in Presto Configuration\nDESCRIPTION: Set the 'exchange.checksum-enabled' configuration property to 'true' to enable CRC32 checksum computation for data exchanges in Presto.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.249.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: Properties\nCODE:\n```\nexchange.checksum-enabled=true\n```\n\n----------------------------------------\n\nTITLE: Basic Redis Table Definition Structure\nDESCRIPTION: JSON schema for defining Redis table structures, including key and value mappings with custom data formats and fields\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/redis.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"tableName\": ...,\n    \"schemaName\": ...,\n    \"key\": {\n        \"dataFormat\": ...,\n        \"fields\": [\n            ...\n        ]\n    },\n    \"value\": {\n        \"dataFormat\": ...,\n        \"fields\": [\n            ...\n       ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Cross Join to Inner Join Optimization in Presto SQL\nDESCRIPTION: Sets the rewrite_cross_join_or_to_inner_join session property to enable optimization that converts applicable cross join with an OR filter to inner join.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.282.rst#2025-04-10_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\nSET SESSION rewrite_cross_join_or_to_inner_join = true;\n```\n\n----------------------------------------\n\nTITLE: SQL Create Table With Comments\nDESCRIPTION: Enhancement to CREATE TABLE syntax allowing column comments specification.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.162.rst#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE\n```\n\n----------------------------------------\n\nTITLE: SQL Time Zone Chaining Example\nDESCRIPTION: Example showing how to chain AT TIME ZONE operations in Presto SQL, which was fixed in this release to work correctly.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.148.rst#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT TIMESTAMP '2016-01-02 12:34:56' AT TIME ZONE 'America/Los_Angeles' AT TIME ZONE 'UTC'\n```\n\n----------------------------------------\n\nTITLE: Cache Quota Configuration in Hive Connector\nDESCRIPTION: Configuration properties for specifying cache quota with respect to a scope (global, schema, table, or partition level) to prevent queries from disrupting cache locality.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.237.rst.txt#2025-04-10_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\ncache.cache-quota-scope\n```\n\nLANGUAGE: sql\nCODE:\n```\ncache.default-cache-quota\n```\n\n----------------------------------------\n\nTITLE: Formatting General Changes Section in reStructuredText\nDESCRIPTION: Creates a section for general changes in the release notes using reStructuredText syntax. It includes a bullet point describing a fix for query failures with lambda expressions.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.238.2.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: restructuredtext\nCODE:\n```\nGeneral Changes\n_______________\n* Fix query failures with lambda expressions.\n```\n\n----------------------------------------\n\nTITLE: Using SHOW PARTITIONS with Condition for Large Partitioned Tables in Hive\nDESCRIPTION: Enables the use of SHOW PARTITIONS FROM <table> WHERE <condition> for tables with more partitions than hive.max-partitions-per-scan, as long as the condition reduces the number of partitions below this limit.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.193.rst.txt#2025-04-10_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\nSHOW PARTITIONS FROM large_partitioned_table WHERE partition_column = 'specific_value'\n```\n\n----------------------------------------\n\nTITLE: SQL Grouping Function\nDESCRIPTION: Reference to grouping function used in Presto queries for grouping operations\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.192.rst.txt#2025-04-10_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\ngrouping()\n```\n\n----------------------------------------\n\nTITLE: New Map Functions in Presto SQL\nDESCRIPTION: Two new functions were added to manipulate map data types: map_from_entries for creating maps from entries and map_entries for extracting entries from maps.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.183.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nmap_from_entries\n```\n\nLANGUAGE: SQL\nCODE:\n```\nmap_entries\n```\n\n----------------------------------------\n\nTITLE: Using INT as Alias for INTEGER in Presto SQL\nDESCRIPTION: Adds support for using 'INT' as an alias for the 'INTEGER' data type in Presto SQL queries. This provides more flexibility in data type declarations.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.175.rst#2025-04-10_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE example (id INT, name VARCHAR);\n```\n\n----------------------------------------\n\nTITLE: Configuring Partial Aggregation History Usage in Presto SQL\nDESCRIPTION: Enables the use of partial aggregation statistics for splitting aggregates. This feature is controlled by the session property 'use_partial_aggregation_history' and is disabled by default.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.285.rst#2025-04-10_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nSET SESSION use_partial_aggregation_history = false;\n```\n\n----------------------------------------\n\nTITLE: Spark Memory Revoking Configuration\nDESCRIPTION: Configuration property for specifying memory pool occupancy percentage after revoke operation in Presto on Spark.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.269.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\nspark.memory-revoking-target\n```\n\n----------------------------------------\n\nTITLE: Enabling Optimized Scale Writer Producer Buffer in Presto\nDESCRIPTION: Sets session and configuration properties to improve scale writer heuristics by considering overall producer buffer utilization.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.234.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\noptimized_scale_writer_producer_buffer\n```\n\nLANGUAGE: SQL\nCODE:\n```\noptimized-scale-writer-producer-buffer\n```\n\n----------------------------------------\n\nTITLE: Displaying Available Schemas in TPCH Connector\nDESCRIPTION: Shows the output from querying the available schemas in the TPCH connector. The result lists the various scale factor schemas available, including information_schema and specialized schemas like 'tiny'.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/tpch.rst#2025-04-10_snippet_1\n\nLANGUAGE: none\nCODE:\n```\n       Schema\n--------------------\n information_schema\n sf1\n sf100\n sf1000\n sf10000\n sf100000\n sf300\n sf3000\n sf30000\n tiny\n(10 rows)\n```\n\n----------------------------------------\n\nTITLE: Configuration Properties\nDESCRIPTION: Various configuration properties mentioned including Hive S3 and RCFile related settings\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.153.rst#2025-04-10_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\nhive.orc.bloom-filters.enabled\norc_bloom_filters_enabled\nhive.rcfile-optimized-reader.enabled\nrcfile_optimized_reader_enabled\nhive.s3.user-agent-prefix\nhive.s3.endpoint\nhive.s3.signer-type\nhive.s3.kms-key-id\nhive.s3.encryption-materials-provider\n```\n\n----------------------------------------\n\nTITLE: New Map Functions in Presto SQL\nDESCRIPTION: Two new functions were added to manipulate map data types: map_from_entries for creating maps from entries and map_entries for extracting entries from maps.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.183.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nmap_from_entries\n```\n\nLANGUAGE: SQL\nCODE:\n```\nmap_entries\n```\n\n----------------------------------------\n\nTITLE: SQL Function Reference - ST_Length\nDESCRIPTION: Reference to a new spatial function ST_Length that works with SphericalGeography type data.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.219.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nST_Length\n```\n\n----------------------------------------\n\nTITLE: Using Power Function in Presto SQL\nDESCRIPTION: The power function alias added in release 0.115, providing an alternative name for the existing pow() function.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.115.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\npower()\n```\n\n----------------------------------------\n\nTITLE: Query Results Output Format\nDESCRIPTION: Example output from a SELECT query showing data retrieved from Accumulo, displaying both data inserted through SQL and programmatically.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/accumulo.rst#2025-04-10_snippet_9\n\nLANGUAGE: none\nCODE:\n```\n recordkey |     name     | age |  birthday\n-----------+--------------+-----+------------\n row1      | Grace Hopper | 109 | 1906-12-09\n row2      | Alan Turing  | 103 | 1912-06-23\n(2 rows)\n```\n\n----------------------------------------\n\nTITLE: Enabling Metadata Query Optimization in Presto SQL\nDESCRIPTION: Configures Presto to optimize queries containing only min and max functions on columns that can be evaluated using metadata. This can be enabled via configuration or session property.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.239.rst#2025-04-10_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nSET SESSION optimize_metadata_queries = true;\n```\n\n----------------------------------------\n\nTITLE: Casting HyperLogLog to P4HyperLogLog in Presto SQL\nDESCRIPTION: Demonstrates how to explicitly cast a HyperLogLog type to P4HyperLogLog type in Presto SQL. This is useful when working with different HyperLogLog implementations.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/hyperloglog.rst#2025-04-10_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\ncast(hll AS P4HyperLogLog)\n```\n\n----------------------------------------\n\nTITLE: Using Sequence Function in Presto SQL\nDESCRIPTION: The sequence function generates a sequence of values. This is a new function added in this release.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.147.rst#2025-04-10_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nsequence\n```\n\n----------------------------------------\n\nTITLE: Accessing Query Viewer in Presto Console\nDESCRIPTION: This code snippet demonstrates how to access the Query Viewer feature in the Presto Console. It requires appending '/ui/dev/index.html' to the server IP and port number.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/clients/presto-console.rst#2025-04-10_snippet_1\n\nLANGUAGE: none\nCODE:\n```\nhttp://localhost:8080/ui/dev/index.html\n```\n\n----------------------------------------\n\nTITLE: Enabling ZSTD Compression for ORC and DWRF in Presto\nDESCRIPTION: Sets a session property to enable ZSTD support for writing ORC and DWRF files in Hive connector.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.234.rst.txt#2025-04-10_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nhive.compression_codec = ZSTD\n```\n\n----------------------------------------\n\nTITLE: Setting Array Field Metadata in Elasticsearch\nDESCRIPTION: cURL command to update Elasticsearch mapping metadata for defining array fields using the _meta.presto property.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/elasticsearch.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncurl --request PUT \\\n    --url localhost:9200/doc/_mapping \\\n    --header 'content-type: application/json' \\\n    --data '\n{\n    \"_meta\": {\n        \"presto\":{\n            \"array_string_field\":{\n                \"isArray\":true\n            },\n            \"object_field\":{\n                \"array_int_field\":{\n                    \"isArray\":true\n                }\n            },\n        }\n    }\n}'\n```\n\n----------------------------------------\n\nTITLE: SQL Window Function Example\nDESCRIPTION: Reference to row number window function used in Presto queries\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.192.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nrow_number()\n```\n\n----------------------------------------\n\nTITLE: JSON to Object Casting in Presto SQL\nDESCRIPTION: Performance improvements were made for casting JSON values parsed with json_parse() to other data types.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.183.rst.txt#2025-04-10_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nCAST(json_parse(...) AS ...)\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTPS Discovery URI in Presto\nDESCRIPTION: Setting the discovery URI to use HTTPS for coordinator discovery, enabling secure communication between nodes during the discovery process.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/security/internal-communication.rst.txt#2025-04-10_snippet_5\n\nLANGUAGE: none\nCODE:\n```\ndiscovery.uri=https://<coordinator fqdn>:<https port>\n```\n\n----------------------------------------\n\nTITLE: Selecting Data from Memory Connector Table (SQL)\nDESCRIPTION: SQL command to select all data from a table in the Memory connector.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/memory.rst#2025-04-10_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM memory.default.nation;\n```\n\n----------------------------------------\n\nTITLE: Using ST_IsSimple in Presto\nDESCRIPTION: Returns true if the Geometry has no anomalous geometric points, such as self-intersection or self-tangency. This function checks for geometric anomalies in the input shape.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/geospatial.rst#2025-04-10_snippet_14\n\nLANGUAGE: sql\nCODE:\n```\nST_IsSimple(Geometry) -> boolean\n```\n\n----------------------------------------\n\nTITLE: Configuring Native Execution Debug Output Validation in Presto SQL\nDESCRIPTION: Enables validation of output from operators in native execution mode to identify malformed data. This is controlled by the session property 'native_debug.validate_output_from_operators'.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.285.rst#2025-04-10_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\nSET SESSION native_debug.validate_output_from_operators = true;\n```\n\n----------------------------------------\n\nTITLE: Enabling Optimized ORC Writer in Hive Connector\nDESCRIPTION: Configuration property to enable the new experimental ORC writer implementation that is optimized for Presto. This can be set as either a configuration property or a session property.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.182.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\nhive.orc.optimized-writer.enabled\norc_optimized_writer_enabled\n```\n\n----------------------------------------\n\nTITLE: Iceberg Time Travel Syntax\nDESCRIPTION: Syntax for time travel in Iceberg connector, enabling retrieval of historical data using VERSION and TIMESTAMP.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.286.rst.txt#2025-04-10_snippet_14\n\nLANGUAGE: sql\nCODE:\n```\nTIMESTAMP (SYSTEM_TIME)\n```\n\nLANGUAGE: sql\nCODE:\n```\nVERSION (SYSTEM_VERSION)\n```\n\nLANGUAGE: sql\nCODE:\n```\nAS OF\n```\n\n----------------------------------------\n\nTITLE: Setting Internal Node Address for Authentication\nDESCRIPTION: Configuration for specifying the authentication type for internal node communication in Presto.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/security/authorization.rst#2025-04-10_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\nnode.internal-address=<authentication type>\n```\n\n----------------------------------------\n\nTITLE: Describing Presto-Accumulo Table with Custom Column Mapping\nDESCRIPTION: SQL command to describe the structure of the scientists table created with custom column mapping.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/accumulo.rst.txt#2025-04-10_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nDESCRIBE myschema.scientists;\n```\n\n----------------------------------------\n\nTITLE: SQL Function Reference for Map Creation\nDESCRIPTION: References the new map() function introduced in this release that allows creating an empty map value.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.161.rst#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nmap()\n```\n\n----------------------------------------\n\nTITLE: SQL Keyword Usage in Presto 0.64\nDESCRIPTION: The release notes mention SQL keywords used in Presto, specifically 'GROUP BY' and 'CREATE TABLE'. These are important SQL operations that have been affected by fixes in this release.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.64.rst#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nGROUP BY\n```\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE\n```\n\n----------------------------------------\n\nTITLE: Ignoring Corrupted Statistics in Hive Connector for Presto SQL\nDESCRIPTION: Configures Presto to ignore corrupt statistics from the Hive metastore. This can be set using either the 'hive.ignore-corrupted-statistics' configuration property or the 'ignore_corrupted_statistics' session property.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.212.rst#2025-04-10_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nSET SESSION ignore_corrupted_statistics = true;\n```\n\n----------------------------------------\n\nTITLE: Empty Parameter Description Output\nDESCRIPTION: Shows the output format when describing a prepared statement with no parameters.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/describe-input.rst#2025-04-10_snippet_6\n\nLANGUAGE: none\nCODE:\n```\n Position | Type\n-----------------\n(0 rows)\n```\n\n----------------------------------------\n\nTITLE: Using Set Union Aggregation Function in Presto SQL\nDESCRIPTION: Demonstrates the usage of the newly added set_union aggregation function in Presto SQL queries.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.239.rst#2025-04-10_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT set_union(column_name) FROM table_name;\n```\n\n----------------------------------------\n\nTITLE: Iceberg Delete as Join Rewrite Session Property\nDESCRIPTION: Session property to apply equality deletes as a join in Iceberg connector.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.286.rst.txt#2025-04-10_snippet_12\n\nLANGUAGE: sql\nCODE:\n```\niceberg.delete_as_join_rewrite_enabled\n```\n\n----------------------------------------\n\nTITLE: Optimizing Join Probe for Empty Build Runtime in Presto SQL\nDESCRIPTION: Sets the session parameter to control the optimization for joins when the build side is empty at runtime. The default value is false.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.281.rst#2025-04-10_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nSET SESSION optimize_join_probe_for_empty_build_runtime = false;\n```\n\n----------------------------------------\n\nTITLE: Parsing Row Types with Spaces in SQL\nDESCRIPTION: Example of a row expression that now parses correctly after fixing the handling of spaces in field types.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.205.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\ncast(row(timestamp '2018-06-01') AS row(timestamp with time zone))\n```\n\n----------------------------------------\n\nTITLE: Defining RST Document Structure for Presto Clients\nDESCRIPTION: ReStructuredText document structure defining the table of contents for Presto client documentation. Uses toctree directive to organize links to individual client pages with a max depth of 1.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/clients.rst#2025-04-10_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n    :maxdepth: 1\n\n    clients/presto-cli\n    clients/presto-console\n    clients/dbeaver\n    clients/superset\n```\n\n----------------------------------------\n\nTITLE: SQL Predicate Bug Warning\nDESCRIPTION: Example of problematic SQL predicate that causes incorrect results in this release when used with bucketed columns.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.232.rst#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nIS NULL\n```\n\n----------------------------------------\n\nTITLE: Adding ResourceGroupQueryLimits to Presto SPI\nDESCRIPTION: Introduces a new ResourceGroupQueryLimits class to the SPI, along with corresponding getter and setter functions in the ResourceGroups class.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.259.rst.txt#2025-04-10_snippet_3\n\nLANGUAGE: rst\nCODE:\n```\nResourceGroupQueryLimits\n```\n\n----------------------------------------\n\nTITLE: Showing Table Statistics in SQL\nDESCRIPTION: Fixes the display of table statistics when using the SHOW STATS FOR command in TPCDS.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.184.rst#2025-04-10_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\nSHOW STATS FOR ...\n```\n\n----------------------------------------\n\nTITLE: Using GROUPING Function with Aggregation in Presto SQL\nDESCRIPTION: This functionality was fixed to prevent planning failure when using the GROUPING function with aggregation expressions that require implicit coercions.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.183.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nGROUPING\n```\n\n----------------------------------------\n\nTITLE: Using the enum_key UDF in Presto SQL\nDESCRIPTION: Example of the new enum_key function usage which returns the key corresponding to an enum value.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.245.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nENUM_KEY(EnumType) -> VARCHAR\n```\n\n----------------------------------------\n\nTITLE: Querying SQL Functions in Presto\nDESCRIPTION: Demonstrates the usage of new SQL functions added in this release, including transform_keys, transform_values, zip_with, and levenshtein_distance.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.167.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT transform_keys(...), transform_values(...), zip_with(...), levenshtein_distance(...)\n```\n\n----------------------------------------\n\nTITLE: Querying Data from Kudu Table in Presto\nDESCRIPTION: SQL query to select all data from a Kudu table using Presto.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/kudu.rst#2025-04-10_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM kudu.default.users;\n```\n\n----------------------------------------\n\nTITLE: Query Status Request\nDESCRIPTION: Example of requesting query status and results using GET endpoint with query ID and token.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/rest/statement.rst#2025-04-10_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nGET /v1/statement/20140108_110629_00011_dk5x2/1 HTTP/1.1\nHost: localhost:8001\nUser-Agent: StatementClient/0.55-SNAPSHOT\n```\n\n----------------------------------------\n\nTITLE: Configuring Minimum Task Drivers in Presto SQL\nDESCRIPTION: Sets the minimum number of drivers per task to help limit the number of concurrent readers. This configuration can be used to fine-tune Presto's resource utilization.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.94.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\ntask.min-drivers=<value>\n```\n\n----------------------------------------\n\nTITLE: Adding PDF Download Link in RST\nDESCRIPTION: ReStructuredText directive for embedding a downloadable PDF document link to the Presto technical overview paper.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/overview.rst#2025-04-10_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n:download:`Presto: SQL on Everything <overview/Presto_SQL_on_Everything.pdf>`\n```\n\n----------------------------------------\n\nTITLE: Nullif Operation with Map Type\nDESCRIPTION: Fix for the nullif operation when working with map type data requiring type coercion.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.195.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nnullif\n```\n\n----------------------------------------\n\nTITLE: SQL CREATE TABLE IF NOT EXISTS\nDESCRIPTION: Table creation command that prevents failures when table already exists.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.181.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE IF NOT EXISTS\n```\n\n----------------------------------------\n\nTITLE: Creating External Accumulo Table\nDESCRIPTION: Creates an external table with custom column mapping, indexing, and locality groups.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/accumulo.rst.txt#2025-04-10_snippet_21\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE external_table (\n  a VARCHAR,\n  b BIGINT,\n  c DATE\n)\nWITH (\n  column_mapping = 'a:md:a,b:md:b,c:md:c',\n  external = true,\n  index_columns = 'b,c',\n  locality_groups = 'foo:b,c'\n);\n```\n\n----------------------------------------\n\nTITLE: Accessing Session Properties in Presto Connectors\nDESCRIPTION: Method for retrieving type-safe session properties in connector code, where the caller specifies the expected Java type.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.113.rst#2025-04-10_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nConnectorSession.getProperty()\n```\n\n----------------------------------------\n\nTITLE: Using Reservoir Sample Aggregation Function in Presto SQL\nDESCRIPTION: Demonstrates the usage of the new reservoir_sample aggregation function, which is useful for generating fixed-size samples from a dataset.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.286.rst#2025-04-10_snippet_5\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT reservoir_sample(column_name, sample_size) FROM table_name;\n```\n\n----------------------------------------\n\nTITLE: Decimal Literal Parsing Configuration\nDESCRIPTION: Configuration options to control whether decimal literals are parsed as DECIMAL (new default) or DOUBLE (previous behavior). This can be controlled via config option or session property.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.198.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nparse-decimal-literals-as-double\n```\n\nLANGUAGE: sql\nCODE:\n```\nparse_decimal_literals_as_double\n```\n\n----------------------------------------\n\nTITLE: Disabling Cluster Memory Manager Configuration in Presto\nDESCRIPTION: Configuration flag to disable the cluster memory manager that is now enabled by default in Presto 0.113.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.113.rst#2025-04-10_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nexperimental.cluster-memory-manager-enabled\n```\n\n----------------------------------------\n\nTITLE: SQL Table Alteration Example\nDESCRIPTION: Example of ALTER TABLE syntax for adding columns with partitioning in Iceberg connector\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.285.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE <table> ADD COLUMN <column> [WITH (partitioning = '<transform_func>')]\n```\n\n----------------------------------------\n\nTITLE: Using the enum_key UDF in Presto SQL\nDESCRIPTION: Example of the new enum_key function usage which returns the key corresponding to an enum value.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.245.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nENUM_KEY(EnumType) -> VARCHAR\n```\n\n----------------------------------------\n\nTITLE: USE Statement Examples in Presto SQL\nDESCRIPTION: Demonstrates practical examples of the USE statement in Presto SQL. The first example changes to the 'finance' schema in the 'hive' catalog, while the second example switches to the 'information_schema' within the current catalog.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/use.rst#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nUSE hive.finance;\nUSE information_schema;\n```\n\n----------------------------------------\n\nTITLE: Presto Data Types\nDESCRIPTION: Various data types referenced in the changelog updates including TIME WITH TIME ZONE, TIMESTAMP WITH TIME ZONE, REAL, VARBINARY, and MAP.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.192.rst#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nTIME WITH TIME ZONE\nTIMESTAMP WITH TIME ZONE\nREAL\nVARBINARY\nMAP\n```\n\n----------------------------------------\n\nTITLE: Implementing ClientRequestFilterFactory and ClientRequestFilter in Java for Presto\nDESCRIPTION: The ClientRequestFilterFactory creates instances of ClientRequestFilter and defines the filter name. ClientRequestFilter provides methods for header customization. The implementation must be wrapped as a plugin and installed on the Presto cluster.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/develop/client-request-filter.rst#2025-04-10_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\npublic interface ClientRequestFilterFactory {\n    String getName();\n    ClientRequestFilter create();\n}\n\npublic interface ClientRequestFilter {\n    Map<String, String> getExtraHeaders();\n    List<String> getHeaderNames();\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Geospatial Function in Presto SQL\nDESCRIPTION: Introduces a new geospatial function 'line_interpolate_point' to Presto's SQL capabilities.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.229.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nline_interpolate_point\n```\n\n----------------------------------------\n\nTITLE: Transform Keys Examples in Presto SQL\nDESCRIPTION: Demonstrates the transform_keys function which applies a lambda function to transform map keys while preserving values. Shows various transformations including arithmetic operations, string concatenation, and lookup transformations.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/map.rst#2025-04-10_snippet_21\n\nLANGUAGE: sql\nCODE:\n```\nSELECT transform_keys(MAP(ARRAY [1, 2, 3], ARRAY ['a', 'b', 'c']), (k, v) -> k + 1);\nSELECT transform_keys(MAP(ARRAY ['a', 'b', 'c'], ARRAY [1, 2, 3]), (k, v) -> v * v);\nSELECT transform_keys(MAP(ARRAY ['a', 'b'], ARRAY [1, 2]), (k, v) -> k || CAST(v as VARCHAR));\nSELECT transform_keys(MAP(ARRAY [1, 2], ARRAY [1.0, 1.4]),\n                      (k, v) -> MAP(ARRAY[1, 2], ARRAY['one', 'two'])[k]);\n```\n\n----------------------------------------\n\nTITLE: Configuring Task Level Priority in Presto\nDESCRIPTION: Configuration properties to control task scheduling behavior and query prioritization based on execution time. These settings affect how CPU resources are allocated between long-running and short queries.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.181.rst#2025-04-10_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\ntask.level-absolute-priority=true\ntask.legacy-scheduling-behavior=false\ntask.level-time-multiplier=<value>\n```\n\n----------------------------------------\n\nTITLE: Hive External Table Creation Property\nDESCRIPTION: New table property for specifying external location when creating Hive tables.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.157.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nexternal_location\n```\n\n----------------------------------------\n\nTITLE: Accessing Query Viewer URL\nDESCRIPTION: The URL to access the Query Viewer interface for detailed query analysis and JSON export capabilities.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/clients/presto-console.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: none\nCODE:\n```\nhttp://localhost:8080/ui/dev/index.html\n```\n\n----------------------------------------\n\nTITLE: Setting Force Local Scheduling Session Property\nDESCRIPTION: Session property to force local scheduling of splits in Hive.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.79.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nforce_local_scheduling\n```\n\n----------------------------------------\n\nTITLE: Fixing Aggregation with DISTINCT and Filter in SQL\nDESCRIPTION: Demonstrates a SQL query pattern that previously caused execution failures but has been fixed in this release. It involves an aggregation function with DISTINCT and a highly selective filter.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.203.rst#2025-04-10_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nsum(DISTINCT x) FILTER (WHERE y = 0)\n```\n\n----------------------------------------\n\nTITLE: Binary Padding in Presto SQL\nDESCRIPTION: Functions for left and right padding binary data to a specified size.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/binary.rst#2025-04-10_snippet_10\n\nLANGUAGE: SQL\nCODE:\n```\nlpad(binary, size, padbinary) -> varbinary\n```\n\nLANGUAGE: SQL\nCODE:\n```\nrpad(binary, size, padbinary) -> varbinary\n```\n\n----------------------------------------\n\nTITLE: Enabling Dictionary Aggregation Optimization in Presto\nDESCRIPTION: Toggles optimization for aggregations on dictionaries. Can improve performance for certain queries.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/admin/properties.rst.txt#2025-04-10_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\noptimizer.dictionary-aggregation:\n  Type: boolean\n  Default value: false\n```\n\n----------------------------------------\n\nTITLE: Querying Redshift Schemas\nDESCRIPTION: SQL command to list all available schemas in the Redshift catalog.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/redshift.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSHOW SCHEMAS FROM redshift;\n```\n\n----------------------------------------\n\nTITLE: Executing EXPLAIN ANALYZE Query\nDESCRIPTION: The EXPLAIN ANALYZE command now correctly prunes output columns, providing more accurate and efficient query analysis results.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.158.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nEXPLAIN ANALYZE SELECT * FROM my_table;\n```\n\n----------------------------------------\n\nTITLE: Using LIKE Predicate with SHOW Commands in Presto SQL\nDESCRIPTION: Shows the new support for LIKE predicate in SHOW SESSION and SHOW CATALOGS commands, including ESCAPE support for pattern matching.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.274.rst#2025-04-10_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nSHOW SESSION LIKE 'optimizer%' ESCAPE '\\';\n```\n\nLANGUAGE: SQL\nCODE:\n```\nSHOW CATALOGS LIKE 'h%';\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Glue as Hive Metastore\nDESCRIPTION: Configuration to use AWS Glue as the metastore for the Hive connector, set through the hive.metastore property.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.198.rst.txt#2025-04-10_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nhive.metastore\n```\n\n----------------------------------------\n\nTITLE: Configuring PATH for Homebrew on Apple Silicon Mac\nDESCRIPTION: Command to configure the PATH environment variable to look for Homebrew in /usr/local/bin before /opt/homebrew on an Apple Silicon Mac.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/installation/deploy-brew.rst.txt#2025-04-10_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nexport PATH=/usr/local/bin:$PATH\n```\n\n----------------------------------------\n\nTITLE: Showing Table Properties in Kudu Connector\nDESCRIPTION: Illustrates the addition of the 'number_of_replicas' table property in the output of SHOW CREATE TABLE for the Kudu connector.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.216.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nSHOW CREATE TABLE table_name;\n```\n\n----------------------------------------\n\nTITLE: Configuring Legacy Map Subscript Behavior in Presto\nDESCRIPTION: Configuration option to restore the previous behavior of map subscript operations, which returned NULL for non-existent keys instead of failing.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.163.rst#2025-04-10_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\ndeprecated.legacy-map-subscript\n```\n\n----------------------------------------\n\nTITLE: Resource Group Query Limits SPI Addition\nDESCRIPTION: Added ResourceGroupQueryLimits class to the SPI along with corresponding getter and setter methods in ResourceGroups to support query limits at the resource group level.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.259.rst#2025-04-10_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nResourceGroupQueryLimits\n```\n\n----------------------------------------\n\nTITLE: Mapping Raw Kafka Message Bytes to Presto Columns\nDESCRIPTION: Demonstrates the supported data formats and Presto data types for the raw decoder in the Kafka connector. It shows how different byte ranges can be mapped to various Presto data types.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/kafka.rst.txt#2025-04-10_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\n===================================== =======================================\nPresto data type                      Allowed \"dataFormat\" values\n===================================== =======================================\n\"BIGINT\"                            \"BYTE\", \"SHORT\", \"INT\", \"LONG\"\n\"INTEGER\"                           \"BYTE\", \"SHORT\", \"INT\"\n\"SMALLINT\"                          \"BYTE\", \"SHORT\"\n\"TINYINT\"                           \"BYTE\"\n\"DOUBLE\"                            \"DOUBLE\", \"FLOAT\"\n\"BOOLEAN\"                           \"BYTE\", \"SHORT\", \"INT\", \"LONG\"\n\"VARCHAR\" / \"VARCHAR(x)\"          \"BYTE\"\n===================================== =======================================\n```\n\n----------------------------------------\n\nTITLE: Implementing getDeleteRowIdColumnHandle Method in ConnectorMetadata for Presto\nDESCRIPTION: This method returns a ColumnHandle that provides the rowId used by the connector to identify rows to be deleted. For a JDBC connector, this is typically the primary key for the table.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/develop/delete-and-update.rst#2025-04-10_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nColumnHandle getDeleteRowIdColumnHandle(\n    ConnectorSession session,\n    ConnectorTableHandle tableHandle)\n```\n\n----------------------------------------\n\nTITLE: Configuring ORC Compression in Raptor Storage\nDESCRIPTION: Configuration property to set the ORC compression type between SNAPPY and ZSTD in Raptor storage. This setting only applies when the optimized ORC writer is enabled.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.220.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nstorage.orc.compression-kind\n```\n\n----------------------------------------\n\nTITLE: Implementing NodeManager in Presto Plugin\nDESCRIPTION: Code example showing how to implement NodeManager interface in a Presto plugin to detect cluster nodes.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.60.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n@Inject\npublic void setNodeManager(NodeManager nodeManager)\n{\n    this.nodeManager = nodeManager;\n}\n```\n\n----------------------------------------\n\nTITLE: Java Method Reference\nDESCRIPTION: JDBC API method for setting query timeout.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.179.rst#2025-04-10_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nStatement.setQueryTimeout()\n```\n\n----------------------------------------\n\nTITLE: SQL Function Reference - enum_key Example\nDESCRIPTION: Reference to the enum_key function that experienced race condition issues in this release.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.247.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nenum_key\n```\n\n----------------------------------------\n\nTITLE: SQL AT TIME ZONE in VALUES Example\nDESCRIPTION: Reference to fixed functionality allowing AT TIME ZONE usage in VALUES lists.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.156.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nAT TIME ZONE\n```\n\n----------------------------------------\n\nTITLE: SQL Function Reference - enum_key Example\nDESCRIPTION: Reference to the enum_key function that experienced race condition issues in this release.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.247.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nenum_key\n```\n\n----------------------------------------\n\nTITLE: Calculating Thresholds with Precision-Recall Values in Presto SQL\nDESCRIPTION: This query shows how to retrieve the classification thresholds along with precision and recall values. It uses the UNNEST operator to correlate thresholds with their corresponding precision and recall values.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/aggregate.rst.txt#2025-04-10_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nWITH\n    recall_precision AS (\n        SELECT\n            CLASSIFICATION_THRESHOLDS(10000, correct, pred) AS thresholds,\n            CLASSIFICATION_RECALL(10000, correct, pred) AS recalls,\n            CLASSIFICATION_PRECISION(10000, correct, pred) AS precisions\n        FROM\n           classification_dataset\n    )\nSELECT\n    threshold,\n    recall,\n    precision\nFROM\n    recall_precision\nCROSS JOIN UNNEST(thresholds, recalls, precisions) AS t(threshold, recall, precision)\n```\n\n----------------------------------------\n\nTITLE: Configuring TPCH Connector in Presto\nDESCRIPTION: This snippet shows how to configure the TPCH connector in Presto. It requires creating a catalog property file on both the coordinator and workers, and updating the config properties file for workers.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.60.rst#2025-04-10_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nconnector.name=tpch\n```\n\n----------------------------------------\n\nTITLE: Merge Set Digest Example\nDESCRIPTION: Example of merging multiple set digests into a single set digest using merge_set_digest function.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/setdigest.rst#2025-04-10_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSELECT merge_set_digest(a) from (SELECT make_set_digest(value) as a FROM (VALUES 4,3,2,1) T(value));\n```\n\n----------------------------------------\n\nTITLE: Configuration Options for Presto's Low Memory Killer\nDESCRIPTION: Configuration flags for enabling and controlling Presto's new low memory killer feature. The feature can be enabled with query.low-memory-killer.enabled and its activation delay configured with query.low-memory-killer.delay.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.116.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nquery.low-memory-killer.enabled\n```\n\nLANGUAGE: sql\nCODE:\n```\nquery.low-memory-killer.delay\n```\n\n----------------------------------------\n\nTITLE: Docker Command for Running Nessie with OpenTelemetry Disabled\nDESCRIPTION: Command to start a Nessie Docker container with the OpenTelemetry SDK disabled to prevent SEVERE log messages related to the OpenTelemetry collector.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/iceberg.rst#2025-04-10_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -p 19120:19120 -e QUARKUS_OTEL_SDK_DISABLED=true ghcr.io/projectnessie/nessie\n```\n\n----------------------------------------\n\nTITLE: Creating Public Schema in Presto\nDESCRIPTION: SQL command to create a publicly visible schema mapping with the spreadsheet.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/larksheets.rst#2025-04-10_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nCREATE SCHEMA my_ss WITH (TOKEN = 'shtcnBf5pg4BNSkwV2Ku5xwW9Pf', PUBLIC = true)\n```\n\n----------------------------------------\n\nTITLE: Referencing Issue Numbers in Markdown\nDESCRIPTION: References to GitHub issues using Markdown/reST syntax for bug fixes and improvements\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.210.rst#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n:issue:`11385`\n```\n\nLANGUAGE: markdown\nCODE:\n```\n:issue:`11120`\n```\n\n----------------------------------------\n\nTITLE: New SQL Array Concatenation Operator\nDESCRIPTION: Support for concatenating arrays using the || operator\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.86.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\n||\n```\n\n----------------------------------------\n\nTITLE: Configuration Property References\nDESCRIPTION: Various configuration properties referenced in the changelog that are either deprecated or modified.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.195.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\nexchange.min-error-duration\nquery.remote-task.min-error-duration\ncompiler.interpreter-enabled\nhttp-server.authentication.type\n```\n\n----------------------------------------\n\nTITLE: Configuring Query Types in Presto Verifier\nDESCRIPTION: Configuration parameters for selecting query types to run in the Presto verifier. Uses control.query-types and test.query-types parameters.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.136.rst#2025-04-10_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\ncontrol.query-types\n```\n\nLANGUAGE: properties\nCODE:\n```\ntest.query-types\n```\n\n----------------------------------------\n\nTITLE: Session Property Example in SQL\nDESCRIPTION: Example showing the session property name used to enable/disable stats calculator.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.213.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nenable_stats_calculator\n```\n\n----------------------------------------\n\nTITLE: Configuring Cassandra Connector Properties\nDESCRIPTION: Demonstrates how to set the new configuration properties for the Cassandra connector, allowing connection to older Cassandra servers.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.216.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nSET cassandra.splits-per-node = value;\nSET cassandra.protocol-version = version;\n```\n\n----------------------------------------\n\nTITLE: Calling a Procedure with Fully Qualified Name in Presto SQL\nDESCRIPTION: Example of calling a procedure using a fully qualified name that includes catalog and schema. This demonstrates how to reference procedures in specific catalogs and schemas.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/sql/call.rst.txt#2025-04-10_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nCALL catalog.schema.test();\n```\n\n----------------------------------------\n\nTITLE: START TRANSACTION Examples in Presto SQL\nDESCRIPTION: Provides various examples of the START TRANSACTION command with different combinations of isolation levels and read/write modes.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/sql/start-transaction.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSTART TRANSACTION;\nSTART TRANSACTION ISOLATION LEVEL REPEATABLE READ;\nSTART TRANSACTION READ WRITE;\nSTART TRANSACTION ISOLATION LEVEL READ COMMITTED, READ ONLY;\nSTART TRANSACTION READ WRITE, ISOLATION LEVEL SERIALIZABLE;\n```\n\n----------------------------------------\n\nTITLE: Implementing beginDelete Method in ConnectorMetadata for Presto\nDESCRIPTION: This method performs any orchestration needed to start processing a DELETE operation and returns a ConnectorTableHandle with additional information needed for the delete operation.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/develop/delete-and-update.rst#2025-04-10_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nConnectorTableHandle beginDelete(\n     ConnectorSession session,\n     ConnectorTableHandle tableHandle)\n```\n\n----------------------------------------\n\nTITLE: Configuring Absolute Error Margin in Verifier\nDESCRIPTION: Configuration property for the Verifier to set the threshold for floating point comparison. Helps prevent false positives when comparing values close to zero.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.220.rst.txt#2025-04-10_snippet_6\n\nLANGUAGE: properties\nCODE:\n```\nabsolute-error-margin\n```\n\n----------------------------------------\n\nTITLE: Fixing Date Format Specifier in Presto SQL Functions\nDESCRIPTION: Addresses a bug in the '%k' specifier for date_format and date_parse functions. Previously, it incorrectly used '24' instead of '0' for representing midnight.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.114.rst#2025-04-10_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nFix ``%k`` specifier for :func:`!date_format` and :func:`!date_parse`.\nIt previously used ``24`` rather than ``0`` for the midnight hour.\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTPS Cipher Exclusions in Presto\nDESCRIPTION: Configuration property to exclude specific cipher suites from HTTPS connections. Default value excludes ciphers with weak hash algorithms and those without forward secrecy.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.211.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nhttp-server.https.excluded-cipher=\"\"\n```\n\n----------------------------------------\n\nTITLE: Creating Tables with Duplicate Column Check in Presto SQL\nDESCRIPTION: Improves error handling when creating tables with duplicate columns. The CREATE TABLE command now checks for duplicate columns before asking the connector to create the table.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.177.rst#2025-04-10_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE\n```\n\n----------------------------------------\n\nTITLE: Configuring S3-Compatible Storage in Hive Connector\nDESCRIPTION: Configures S3-compatible storage using the 'hive.s3.endpoint' and 'hive.s3.signer-type' properties in the Hive connector.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.153.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: Properties\nCODE:\n```\nhive.s3.endpoint=custom-s3-endpoint\nhive.s3.signer-type=custom-signer\n```\n\n----------------------------------------\n\nTITLE: Installing Homebrew Package Manager\nDESCRIPTION: Command to install the Homebrew package manager on macOS systems.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/installation/deploy-docker.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)\"\n```\n\n----------------------------------------\n\nTITLE: Fast Forwarding an Iceberg Branch in Presto\nDESCRIPTION: This procedure advances the current snapshot of a specified branch to a more recent snapshot from another branch without replaying intermediate snapshots.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/iceberg.rst#2025-04-10_snippet_33\n\nLANGUAGE: sql\nCODE:\n```\nCALL iceberg.system.fast_forward('schema_name', 'table_name', 'dev', 'main');\n```\n\n----------------------------------------\n\nTITLE: Configuring CPU Time Limit for Presto Queries\nDESCRIPTION: Introduces a new configuration option 'query.max-cpu-time' to limit the CPU time used by a query in Presto.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.143.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nquery.max-cpu-time\n```\n\n----------------------------------------\n\nTITLE: Configuring Join Distribution Type in Presto\nDESCRIPTION: Property to control the type of distributed join to use in Presto. Supports AUTOMATIC, PARTITIONED, and BROADCAST modes with AUTOMATIC as default. Affects how tables are distributed during join operations.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/admin/properties.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\njoin-distribution-type=AUTOMATIC\n```\n\n----------------------------------------\n\nTITLE: Using ST_IsEmpty in Presto\nDESCRIPTION: Returns true if the Geometry is an empty geometrycollection, polygon, point, etc. This function checks if a geometry contains no points.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/geospatial.rst#2025-04-10_snippet_13\n\nLANGUAGE: sql\nCODE:\n```\nST_IsEmpty(Geometry) -> boolean\n```\n\n----------------------------------------\n\nTITLE: New Geospatial Function for Determining Geometry Type\nDESCRIPTION: A new geospatial function that returns the type of a geometry object as a string.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.200.rst.txt#2025-04-10_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nST_GeometryType\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTPS Cipher Exclusions in Presto\nDESCRIPTION: Configuration property to exclude specific cipher suites from HTTPS connections. Default value excludes ciphers with weak hash algorithms and those without forward secrecy.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.211.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nhttp-server.https.excluded-cipher=\"\"\n```\n\n----------------------------------------\n\nTITLE: MongoDB Schema Collection Structure\nDESCRIPTION: JSON structure defining the schema collection format for MongoDB tables in Presto.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/mongodb.rst.txt#2025-04-10_snippet_9\n\nLANGUAGE: none\nCODE:\n```\n{\n    \"table\": ...,\n    \"fields\": [\n          { \"name\" : ...,\n            \"type\" : \"varchar|bigint|boolean|double|date|array(bigint)|...\",\n            \"hidden\" : false },\n            ...\n        ]\n    }\n```\n\n----------------------------------------\n\nTITLE: Adding Classification Aggregation Functions in SQL\nDESCRIPTION: Adds new classification aggregation functions for machine learning tasks, including miss rate, precision, recall, and thresholds calculations.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.221.rst#2025-04-10_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nclassification_miss_rate(column)\nclassification_precision(column)\nclassification_recall(column)\nclassification_thresholds(column)\n```\n\n----------------------------------------\n\nTITLE: SQL Function Reference - Geospatial and IEEE\nDESCRIPTION: References to new functions including from_ieee754_32, from_ieee754_64, and ST_GeometryType for geospatial operations.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.200.rst#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nfrom_ieee754_32\nfrom_ieee754_64\nST_GeometryType\n```\n\n----------------------------------------\n\nTITLE: Enabling Colocated Joins in Presto SQL\nDESCRIPTION: Configures settings to enable colocated join execution, which can reduce peak memory usage for joins with the same table partitioning.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.191.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nSET SESSION colocated_join = true;\nSET SESSION concurrent_lifespans_per_task = 4;\n```\n\n----------------------------------------\n\nTITLE: Configuring Hive Parquet Reader Properties\nDESCRIPTION: Configuration properties for enabling the optimized Parquet reader and predicate push down functionality in Hive catalog. These settings can be applied at both session and catalog levels.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.138.rst#2025-04-10_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\n<hive-catalog>.parquet_optimized_reader_enabled\n```\n\nLANGUAGE: properties\nCODE:\n```\nhive.parquet-optimized-reader.enabled=true\n```\n\nLANGUAGE: properties\nCODE:\n```\n<hive-catalog>.parquet_predicate_pushdown_enabled\n```\n\nLANGUAGE: properties\nCODE:\n```\nhive.parquet-predicate-pushdown.enabled=true\n```\n\n----------------------------------------\n\nTITLE: Configuring Presto Coordinator for C++ Workers\nDESCRIPTION: These configuration properties enable the Presto coordinator to use Presto C++ workers. They include settings for native execution, hash generation optimization, regex library, and function signatures.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/presto_cpp/properties.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: none\nCODE:\n```\nnative-execution-enabled=true\noptimizer.optimize-hash-generation=false\nregex-library=RE2J\nuse-alternative-function-signatures=true\n```\n\n----------------------------------------\n\nTITLE: Using ST_MultiPoint Function in SQL\nDESCRIPTION: Constructs a multi-point geometry from an array of points using the newly added ST_MultiPoint function.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.213.rst#2025-04-10_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT ST_MultiPoint(ARRAY[<point1>, <point2>, ...])\n```\n\n----------------------------------------\n\nTITLE: Using split_to_map Function with Custom Resolver in SQL\nDESCRIPTION: Demonstrates how to use the split_to_map function with a custom resolver to handle duplicate keys.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/string.rst.txt#2025-04-10_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSELECT(split_to_map('a:1;b:2;a:3', ';', ':', (k, v1, v2) -> v1)); -- {\"a\": \"1\", \"b\": \"2\"}\nSELECT(split_to_map('a:1;b:2;a:3', ';', ':', (k, v1, v2) -> CONCAT(v1, v2))); -- {\"a\": \"13\", \"b\": \"2\"}\n```\n\n----------------------------------------\n\nTITLE: Joining Partitioned Tables with Date Range Optimization in Presto SQL\nDESCRIPTION: Example query showing how range predicate pushdown optimizes joins between tables partitioned by date, where the optimizer limits scans based on partition ranges.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.55.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM data_1_year JOIN data_1_week USING (ds)\n```\n\n----------------------------------------\n\nTITLE: Querying Table Statistics in SQL\nDESCRIPTION: Shows how to use the SHOW STATS command, which now includes minimum and maximum values for columns in the output.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.194.rst#2025-04-10_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nSHOW STATS\n```\n\n----------------------------------------\n\nTITLE: Implementing finishUpdate Method in ConnectorMetadata for Presto\nDESCRIPTION: This method is called after all splits have been processed for an UPDATE operation. It takes the accumulated Slice fragments and completes the update operation.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/develop/delete-and-update.rst#2025-04-10_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nvoid finishUpdate(\n    ConnectorSession session,\n    ConnectorTableHandle tableHandle,\n    Collection<Slice> fragments)\n```\n\n----------------------------------------\n\nTITLE: SQL Function Reference - Split\nDESCRIPTION: Reference to the split function enhancement that now supports empty string as delimiter to split strings into individual characters.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.219.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nsplit\n```\n\n----------------------------------------\n\nTITLE: SQL Column Type References\nDESCRIPTION: Data type references mentioned in the release notes, including bigint columns used in GROUP BY queries and JSON to REAL type casting.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.176.rst#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nGROUP BY bigint_column\nJSON\nREAL\n```\n\n----------------------------------------\n\nTITLE: Configuring Hive Security Property for Authorization in Presto\nDESCRIPTION: Sets the 'hive.security' property to enable different levels of authorization checks for the Hive connector in Presto. Options include 'none', 'read-only', or 'sql-standard'.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.118.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nhive.security = none|read-only|sql-standard\n```\n\n----------------------------------------\n\nTITLE: Optimizing GROUP BY Queries in Presto\nDESCRIPTION: This snippet mentions improvements to the performance of GROUP BY queries in Presto. It indicates that queries using GROUP BY clauses should now execute faster.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.144.rst.txt#2025-04-10_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nGROUP BY\n```\n\n----------------------------------------\n\nTITLE: Implementing Scalar Function 'lowercaser' in Java for Presto\nDESCRIPTION: This code demonstrates how to implement a simple scalar function 'lowercaser' that converts a VARCHAR argument to lowercase. It uses the Slice class for string manipulation.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/develop/functions.rst.txt#2025-04-10_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npublic class ExampleStringFunction\n{\n    @ScalarFunction(\"lowercaser\")\n    @Description(\"converts the string to alternating case\")\n    @SqlType(StandardTypes.VARCHAR)\n    public static Slice lowercaser(@SqlType(StandardTypes.VARCHAR) Slice slice)\n    {\n        String argument = slice.toStringUtf8();\n        return Slices.utf8Slice(argument.toLowerCase());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Write Redistribution in Presto\nDESCRIPTION: Boolean property to enable/disable data redistribution before writing. Helps eliminate performance impact of data skew by hashing across cluster nodes.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/admin/properties.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\nredistribute-writes=true\n```\n\n----------------------------------------\n\nTITLE: Using ST_Distance with SphericalGeography in Presto\nDESCRIPTION: Returns the great-circle distance in meters between two SphericalGeography points. This function calculates the spherical distance between two points on the Earth's surface.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/geospatial.rst#2025-04-10_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nST_Distance(SphericalGeography, SphericalGeography) -> double\n```\n\n----------------------------------------\n\nTITLE: Fixed Bing Tile Coordinates Function\nDESCRIPTION: Bug fix for the bing_tile_coordinates function that was previously causing query execution failures.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.200.rst.txt#2025-04-10_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nbing_tile_coordinates\n```\n\n----------------------------------------\n\nTITLE: Configuration Property References\nDESCRIPTION: References to various configuration properties and session properties introduced or modified in this release for controlling spill behavior, cache sizes, and optimizer rules.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.260.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\noptimizer.aggregation-if-to-filter-rewrite-enabled\ninline_sql_function\nexperimental.aggregation-spill-enabled\naggregation_spill_enabled\nexperimental.order-by-spill-enabled\norder_by_spill_enabled\nexperimental.window-spill-enabled\nwindow_spill_enabled\nfragment-result-cache.max-single-pages-size\nquery_max_revocable_memory_per_node\nexperimental.max-revocable-memory-per-node\naggregation_if_to_filter_rewrite_enabled\nexperimental.join-spill-enabled\njoin_spill_enabled\nhive.create-empty-bucket-files\ncreate_empty_bucket_files\n```\n\n----------------------------------------\n\nTITLE: Configuring Kudu Connector Properties\nDESCRIPTION: Configuration settings for the Kudu connector in Presto, including master addresses and schema emulation options.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/kudu.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: none\nCODE:\n```\nconnector.name=kudu\n\n## List of Kudu master addresses, at least one is needed (comma separated)\n## Supported formats: example.com, example.com:7051, 192.0.2.1, 192.0.2.1:7051,\n##                    [2001:db8::1], [2001:db8::1]:7051, 2001:db8::1\nkudu.client.master-addresses=localhost\n\n## Kudu does not support schemas, but the connector can emulate them optionally.\n## By default, this feature is disabled, and all tables belong to the default schema.\n## For more details see connector documentation.\n#kudu.schema-emulation.enabled=false\n\n## Prefix to use for schema emulation (only relevant if `kudu.schema-emulation.enabled=true`)\n## The standard prefix is `presto::`. Empty prefix is also supported.\n## For more details see connector documentation.\n#kudu.schema-emulation.prefix=\n```\n\n----------------------------------------\n\nTITLE: Warning Block in RestructuredText\nDESCRIPTION: RestructuredText warning directive indicating issues with concat function and columnar processing dictionary setting in this release.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.132.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. warning::\n\n   :func:`!concat` on :ref:`array_type`, or enabling ``columnar_processing_dictionary``\n   may cause queries to fail in this release. This is fixed in :doc:`/release/release-0.133`.\n```\n\n----------------------------------------\n\nTITLE: Including Comments When Adding Columns in ALTER TABLE\nDESCRIPTION: Example of the enhanced ALTER TABLE syntax that now allows including comments when adding columns to a table.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.200.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE\n```\n\n----------------------------------------\n\nTITLE: Setting Split Concurrency Adjustment Interval in Presto\nDESCRIPTION: Configures how frequently the dynamic split concurrency adjustments occur. This can be set as a system configuration or a session property.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.139.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\ntask.split-concurrency-adjustment-interval\n```\n\nLANGUAGE: sql\nCODE:\n```\nsplit_concurrency_adjustment_interval\n```\n\n----------------------------------------\n\nTITLE: Configuring Native Query Tracing\nDESCRIPTION: Settings for enabling and configuring query tracing functionality, including trace directory location, node IDs to trace, and size limits.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/presto_cpp/properties-session.rst#2025-04-10_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\nnative_op_trace_directory_create_config=\"\"\nnative_query_trace_enabled=false\nnative_query_trace_dir=\"\"\nnative_query_trace_node_ids=\"\"\nnative_query_trace_max_bytes=0\nnative_query_trace_fragment_id=.*\nnative_query_trace_shard_id=.*\n```\n\n----------------------------------------\n\nTITLE: Configuration Property for Join Distribution in SQL\nDESCRIPTION: Property name for controlling maximum broadcast table size in joins.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.213.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\njoin-max-broadcast-table-size\n```\n\n----------------------------------------\n\nTITLE: Using ST_Y in Presto\nDESCRIPTION: Returns the Y coordinate of the point. This function extracts the Y coordinate value from a Point geometry.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/geospatial.rst#2025-04-10_snippet_28\n\nLANGUAGE: sql\nCODE:\n```\nST_Y(Point) -> double\n```\n\n----------------------------------------\n\nTITLE: Using array_join Function in Presto SQL\nDESCRIPTION: The array_join function is added to join elements of an array into a string. It can be used to concatenate array elements with a specified delimiter.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.102.rst#2025-04-10_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT array_join(array_column, ',') FROM table_name;\n```\n\n----------------------------------------\n\nTITLE: Implementing getConnectorFactories() Method in Example HTTP Plugin\nDESCRIPTION: This method returns an immutable list containing a single ExampleConnectorFactory instance. It's the main entry point that Presto uses to initialize the connector.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/develop/example-http.rst#2025-04-10_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n@Override\npublic Iterable<ConnectorFactory> getConnectorFactories()\n{\n    return ImmutableList.of(new ExampleConnectorFactory());\n}\n```\n\n----------------------------------------\n\nTITLE: Analyzing Table Statistics in Presto SQL\nDESCRIPTION: Demonstrates the usage of the new ANALYZE statement for collecting table statistics on demand in Presto 0.217. This feature allows specifying partitions using the WITH clause.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.217.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nANALYZE table_name WITH (partitions = ARRAY['partition1', 'partition2']);\n```\n\n----------------------------------------\n\nTITLE: SQL Function Filter Fix\nDESCRIPTION: Fix for an issue where the FILTER clause was not being applied when using the count() function with a constant argument.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.173.rst#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\ncount(constant) FILTER (WHERE condition)\n```\n\n----------------------------------------\n\nTITLE: Configuring File-Based Global Security in Presto\nDESCRIPTION: Introduces file-based global security configuration using 'etc/access-control.properties' and 'security.config-file' properties.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.179.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: Properties\nCODE:\n```\netc/access-control.properties\nsecurity.config-file\n```\n\n----------------------------------------\n\nTITLE: Show Create Function with Specific Parameter Type\nDESCRIPTION: Example showing how to display creation statement for array_sum function with ARRAY<BIGINT> parameter type.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/sql/show-create-function.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: none\nCODE:\n```\n                                               Create Function                                            | Argument Types\n    ------------------------------------------------------------------------------------------------------+----------------\n     CREATE FUNCTION example.default.array_sum (                                                          | ARRAY(bigint)\n        input ARRAY(bigint)                                                                             |\n     )                                                                                                    |\n     RETURNS bigint                                                                                       |\n     COMMENT 'Calculate sum of all array elements. Nulls elements are ignored. Returns 0 on empty array.' |\n     LANGUAGE SQL                                                                                         |\n     DETERMINISTIC                                                                                        |\n     RETURNS NULL ON NULL INPUT                                                                           |\n     RETURN \"reduce\"(input, 0, (s, x) -> (s + COALESCE(x, 0)), (s) -> s)                                  |\n    (1 row)\n```\n\n----------------------------------------\n\nTITLE: Setting Runaway Splits Interrupt Timeout in Presto\nDESCRIPTION: Configures the timeout for interrupting split threads blocked without yielding control. Currently only affects threads blocked in the Joni regular expression library.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/admin/properties.rst.txt#2025-04-10_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\ntask.interrupt-runaway-splits-timeout:\n  Type: duration\n  Default value: 10m\n```\n\n----------------------------------------\n\nTITLE: Enabling Flow Type Checking in JSX Files\nDESCRIPTION: Add a comment at the beginning of JSX files to enable Flow static type checking. Run the Flow checker using yarn.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/develop/presto-console.rst#2025-04-10_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n//@flow\n```\n\nLANGUAGE: Shell\nCODE:\n```\nyarn run flow\n```\n\n----------------------------------------\n\nTITLE: Configuring Time-to-Live Node Scheduling in Presto SQL\nDESCRIPTION: Enables time-to-live based node scheduling for queries with execution time estimates. This feature can be activated by setting either the session property or configuration property to 'TTL'.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.262.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSET SESSION resource_aware_scheduling_strategy = 'TTL';\n```\n\nLANGUAGE: Properties\nCODE:\n```\nexperimental.resource-aware-scheduling-strategy=TTL\n```\n\n----------------------------------------\n\nTITLE: JMX Configuration with Escaped Commas\nDESCRIPTION: Configuration example showing how to properly escape commas in MBean names for multiple memory pools.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/jmx.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\nconnector.name=jmx\njmx.dump-tables=com.facebook.presto.memory:type=memorypool\\\\,name=general,\\\ncom.facebook.presto.memory:type=memorypool\\\\,name=system,\\\ncom.facebook.presto.memory:type=memorypool\\\\,name=reserved\n```\n\n----------------------------------------\n\nTITLE: Referencing Geometry to Bing Tiles Function in Presto\nDESCRIPTION: Reference to the geometry_to_bing_tiles function that was fixed for degenerate geometries in Presto 0.229.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.229.rst#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n:func:`!geometry_to_bing_tiles`\n```\n\n----------------------------------------\n\nTITLE: Creating Keyspace and Table in Cassandra CQL\nDESCRIPTION: Example of creating a keyspace 'mykeyspace' with SimpleStrategy replication and a 'users' table with basic user information fields\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/cassandra.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: cql\nCODE:\n```\nCREATE KEYSPACE mykeyspace\nWITH REPLICATION = { 'class' : 'SimpleStrategy', 'replication_factor' : 1 };\nUSE mykeyspace;\nCREATE TABLE users (\n  user_id int PRIMARY KEY,\n  fname text,\n  lname text\n);\n```\n\n----------------------------------------\n\nTITLE: Documenting Release Version in reStructuredText\nDESCRIPTION: Defines the release version header using reStructuredText syntax. This snippet sets up the title for the release notes document.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.243.2.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n===============\nRelease 0.243.2\n===============\n```\n\n----------------------------------------\n\nTITLE: Displaying Result of Table Value Constructor Query\nDESCRIPTION: Illustrates the output format of the table created using the VALUES clause. The result shows two columns with string and integer values.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.61.rst#2025-04-10_snippet_1\n\nLANGUAGE: none\nCODE:\n```\n_col0 | _col1\n-------+-------\na     |     1\nb     |     2\n(2 rows)\n```\n\n----------------------------------------\n\nTITLE: Configuring File-Based Global Security in Presto\nDESCRIPTION: Introduces file-based global security configuration using 'etc/access-control.properties' and 'security.config-file' properties.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.179.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: Properties\nCODE:\n```\netc/access-control.properties\nsecurity.config-file\n```\n\n----------------------------------------\n\nTITLE: SQL CREATE TABLE IF NOT EXISTS\nDESCRIPTION: New support for IF NOT EXISTS clause in CREATE TABLE AS queries.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.142.rst#2025-04-10_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE AS\n```\n\n----------------------------------------\n\nTITLE: Configuring Grouping Sets Limit in SQL\nDESCRIPTION: A limit on the number of grouping sets in a GROUP BY clause is now enforced, with a default of 2048 that can be configured via properties.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.202.rst#2025-04-10_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nanalyzer.max-grouping-sets\n```\n\nLANGUAGE: sql\nCODE:\n```\nmax_grouping_sets\n```\n\n----------------------------------------\n\nTITLE: Defining Presto Documentation Structure with reStructuredText\nDESCRIPTION: This snippet defines the main table of contents for Presto documentation using the reStructuredText toctree directive. It includes references to all major documentation sections like overview, installation, connectors, and more, with a maximum depth of 2 levels.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/index.rst#2025-04-10_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n####################\nPresto Documentation\n####################\n\n.. toctree::\n    :maxdepth: 2\n\n    overview\n    installation\n    clients\n    security\n    admin\n    cache\n    optimizer\n    connector\n    plugin\n    functions\n    language\n    sql\n    migration\n    rest\n    ecosystem\n    router\n    develop\n    presto-cpp\n    release\n\n.. Note: If \"release\" is not the last item, the CSS must be updated.\n```\n\n----------------------------------------\n\nTITLE: Creating an External Hive Table Pointing to S3 Data\nDESCRIPTION: Creates an external Hive table that references existing data in S3. This example demonstrates how to create metadata for external data without moving or copying the data files.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/hive.rst.txt#2025-04-10_snippet_20\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE hive.web.request_logs (\n  request_time timestamp,\n  url varchar,\n  ip varchar,\n  user_agent varchar\n)\nWITH (\n  format = 'TEXTFILE',\n  external_location = 's3://my-bucket/data/logs/'\n)\n```\n\n----------------------------------------\n\nTITLE: SQL Function Changes\nDESCRIPTION: SQL function modifications including ST_GeomFromBinary fixes, new ST_LineString function, and removal of certain round and truncate function variants.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.212.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nST_GeomFromBinary()\nST_ConvexHull()\nconvex_hull_agg()\nST_LineString()\nround(x, d)\ntruncate(x, d)\n```\n\n----------------------------------------\n\nTITLE: Implementing getName() Method in ExampleConnectorFactory\nDESCRIPTION: This method specifies the name of the connector as 'example-http', which is used to reference this connector in Presto configuration.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/develop/example-http.rst#2025-04-10_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n@Override\npublic String getName()\n{\n    return \"example-http\";\n}\n```\n\n----------------------------------------\n\nTITLE: Query Events Configuration Reference\nDESCRIPTION: Reference to QueryCompletedEvent configuration, noting the removal of statistics and cost estimates from plan text during event generation.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.211.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: config\nCODE:\n```\nQueryCompletedEvent\n```\n\n----------------------------------------\n\nTITLE: SQL DESCRIBE INPUT Statement\nDESCRIPTION: New functionality to describe input parameter requirements for prepared statements.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.154.rst#2025-04-10_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nDESCRIBE INPUT\n```\n\n----------------------------------------\n\nTITLE: Querying Oracle Tables Example\nDESCRIPTION: SQL command to show all tables in a specific Oracle database schema.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/oracle.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSHOW TABLES FROM oracle.web;\n```\n\n----------------------------------------\n\nTITLE: Defining RST Documentation Structure for PrestoDB Functions\nDESCRIPTION: ReStructuredText table of contents directive that organizes PrestoDB's function documentation into categorical sections. Uses maxdepth of 1 to create a flat hierarchy of function categories.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n    :maxdepth: 1\n\n    functions/logical\n    functions/comparison\n    functions/conditional\n    functions/lambda\n    functions/conversion\n    functions/math\n    functions/bitwise\n    functions/decimal\n    functions/string\n    functions/regexp\n    functions/binary\n    functions/json\n    functions/datetime\n    functions/aggregate\n    functions/noisy\n    functions/window\n    functions/array\n    functions/map\n    functions/url\n    functions/ip\n    functions/geospatial\n    functions/hyperloglog\n    functions/khyperloglog\n    functions/qdigest\n    functions/uuid\n    functions/tdigest\n    functions/color\n    functions/session\n    functions/teradata\n    functions/internationalization\n    functions/setdigest\n    functions/sketch\n    functions/pinot\n```\n\n----------------------------------------\n\nTITLE: SQL Function Reference - New Geography Functions\nDESCRIPTION: Enhanced geography functions supporting spherical geometries: ST_AsText now accepts Spherical Geographies, and ST_Centroid supports Spherical Geography Points and MultiPoints\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.235.rst#2025-04-10_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nST_AsText()\nST_Centroid()\n```\n\n----------------------------------------\n\nTITLE: Configuring Maximum Splits Per Node in Presto\nDESCRIPTION: Sets the target number of splits that can run for each worker node. Higher values can improve query latency but may waste memory if set too high.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/admin/properties.rst#2025-04-10_snippet_37\n\nLANGUAGE: properties\nCODE:\n```\nnode-scheduler.max-splits-per-node=100\n```\n\n----------------------------------------\n\nTITLE: Using noisy_count_if_gaussian Function in Presto SQL\nDESCRIPTION: This aggregation function calculates the number of TRUE input values and adds random Gaussian noise. It supports differential privacy by adding noise with 0 mean and standard deviation of noise_scale to the count. An optional randomSeed parameter allows for reproducible results.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.284.rst#2025-04-10_snippet_6\n\nLANGUAGE: SQL\nCODE:\n```\nnoisy_count_if_gaussian(condition, noiseScale[, randomSeed])\n```\n\n----------------------------------------\n\nTITLE: Using FILTER Clause with SQL Functions\nDESCRIPTION: Mentions SQL functions that no longer allow the FILTER clause, which was previously ignored.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.205.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nCOALESCE\n```\n\nLANGUAGE: SQL\nCODE:\n```\nIF\n```\n\nLANGUAGE: SQL\nCODE:\n```\nNULLIF\n```\n\n----------------------------------------\n\nTITLE: Hive Configuration Properties\nDESCRIPTION: Configuration properties for the Hive connector, including properties for controlling sorted writing and ORC reader behavior.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.202.rst#2025-04-10_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nhive.bucket-writing\n```\n\nLANGUAGE: sql\nCODE:\n```\nhive.sorted-writing\n```\n\nLANGUAGE: sql\nCODE:\n```\nsorted_writing_enabled\n```\n\nLANGUAGE: sql\nCODE:\n```\nhive.max-sort-files-per-bucket\n```\n\nLANGUAGE: sql\nCODE:\n```\nhive.orc.tiny-stripe-threshold\n```\n\nLANGUAGE: sql\nCODE:\n```\norc_tiny_stripe_threshold\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL Connector Properties\nDESCRIPTION: Basic configuration properties for connecting PrestoDB to a PostgreSQL database.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/postgresql.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: none\nCODE:\n```\nconnector.name=postgresql\nconnection-url=jdbc:postgresql://example.net:5432/database\nconnection-user=root\nconnection-password=secret\n```\n\n----------------------------------------\n\nTITLE: Basic Pinot Connector Configuration in Presto\nDESCRIPTION: Basic configuration properties for connecting Presto to Apache Pinot. Specifies the connector name and controller URLs for Pinot cluster access.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/pinot.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nconnector.name=pinot\npinot.controller-urls=controller_host1:9000,controller_host2:9000\n```\n\n----------------------------------------\n\nTITLE: New Bitwise Function Names\nDESCRIPTION: Names of newly added bitwise shift functions for data manipulation.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.250.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nbitwise_left_shift\n```\n\nLANGUAGE: text\nCODE:\n```\nbitwise_right_shift\n```\n\nLANGUAGE: text\nCODE:\n```\nbitwise_right_shift_arithmetic\n```\n\n----------------------------------------\n\nTITLE: Querying with LIMIT in Correlated Subqueries in SQL\nDESCRIPTION: Fix for a correctness issue in correlated subqueries containing a LIMIT clause. This addresses a bug that could potentially lead to incorrect query results.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.174.rst#2025-04-10_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT * FROM table1 WHERE column1 IN (SELECT column2 FROM table2 WHERE table2.id = table1.id LIMIT 5)\n```\n\n----------------------------------------\n\nTITLE: Fixing Window Function Frame in Presto SQL\nDESCRIPTION: Illustrates a fix for window functions to correctly handle empty frames between unbounded and bounded in the same direction. The example shows a frame specification that was previously handled incorrectly.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.144.5.rst#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nROWS BETWEEN UNBOUNDED PRECEDING AND 2 PRECEDING\n```\n\n----------------------------------------\n\nTITLE: Hive Configuration Properties\nDESCRIPTION: Configuration properties for the Hive connector, including properties for controlling sorted writing and ORC reader behavior.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.202.rst#2025-04-10_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nhive.bucket-writing\n```\n\nLANGUAGE: sql\nCODE:\n```\nhive.sorted-writing\n```\n\nLANGUAGE: sql\nCODE:\n```\nsorted_writing_enabled\n```\n\nLANGUAGE: sql\nCODE:\n```\nhive.max-sort-files-per-bucket\n```\n\nLANGUAGE: sql\nCODE:\n```\nhive.orc.tiny-stripe-threshold\n```\n\nLANGUAGE: sql\nCODE:\n```\norc_tiny_stripe_threshold\n```\n\n----------------------------------------\n\nTITLE: Demonstrating RST Syntax for Note Blocks in Presto Documentation\nDESCRIPTION: This snippet shows the RST syntax used to create note blocks in the Presto documentation. It's used to highlight important information about backwards incompatible changes.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.98.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. note::\n    This is a backwards incompatible change with the previous representation,\n    so if you have written a connector or function, you will need to update\n    your code before deploying this release.\n```\n\n----------------------------------------\n\nTITLE: Truncating Iceberg Table in SQL\nDESCRIPTION: Adds support for truncating Iceberg tables using the TRUNCATE TABLE statement.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.284.rst.txt#2025-04-10_snippet_7\n\nLANGUAGE: SQL\nCODE:\n```\nTRUNCATE TABLE <table>\n```\n\n----------------------------------------\n\nTITLE: Implementing String Scalar Function in Presto\nDESCRIPTION: Example of a simple string manipulation function that converts input to lowercase using Slice for VARCHAR handling.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/develop/functions.rst#2025-04-10_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npublic class ExampleStringFunction\n{\n    @ScalarFunction(\"lowercaser\")\n    @Description(\"converts the string to alternating case\")\n    @SqlType(StandardTypes.VARCHAR)\n    public static Slice lowercaser(@SqlType(StandardTypes.VARCHAR) Slice slice)\n    {\n        String argument = slice.toStringUtf8();\n        return Slices.utf8Slice(argument.toLowerCase());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Renaming Task Statistics Configuration Property\nDESCRIPTION: Configuration update renaming verbose_stats session property to task.per-operator-cpu-timer-enabled for better clarity of its purpose.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.211.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: config\nCODE:\n```\ntask.per-operator-cpu-timer-enabled\n```\n\n----------------------------------------\n\nTITLE: Creating Iceberg Table with Bucket Partition Transform\nDESCRIPTION: Example of creating an Iceberg table with bucket partitioning transform, which partitions data into 8 buckets of equal size ranges using the team column.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/iceberg.rst.txt#2025-04-10_snippet_36\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE players (\n    id int,\n    name varchar,\n    team varchar\n)\nWITH (\n    format = 'ORC',\n    partitioning = ARRAY['bucket(team, 8)']\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Temporary Function\nDESCRIPTION: Example of creating a simple temporary square function that is only valid for the current session.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/sql/create-function.rst.txt#2025-04-10_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TEMPORARY FUNCTION square(x int)\nRETURNS int\nRETURN x * x\n```\n\n----------------------------------------\n\nTITLE: Type Interface Reference (Java)\nDESCRIPTION: References to built-in type implementations in Presto, used for SQL type system.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/develop/types.rst#2025-04-10_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nVarcharType\nBigintType\nTimestampWithTimeZoneType\n```\n\n----------------------------------------\n\nTITLE: Configuring CTE Materialization Strategy in PrestoDB\nDESCRIPTION: Setting the CTE materialization strategy to automatically materialize expensive CTEs. Available options are 'HEURISTIC', 'HEURISTIC_COMPLEX_QUERIES_ONLY', or 'NONE' (default).\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.287.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSET SESSION cte_materialization_strategy = 'HEURISTIC';\n```\n\n----------------------------------------\n\nTITLE: Enabling Query Limit Spill in Presto\nDESCRIPTION: When enabled, allows spilling revocable memory from a query when its total memory exceeds query_max_total_memory_per_node. This provides more consistent performance across varying cluster loads by ensuring queries don't use excessive memory.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/admin/properties.rst#2025-04-10_snippet_9\n\nLANGUAGE: properties\nCODE:\n```\nexperimental.query-limit-spill-enabled\n```\n\n----------------------------------------\n\nTITLE: Configuring Specific Cipher Suites for HTTPS in Presto\nDESCRIPTION: Optional configuration to specify included and excluded cipher suites for HTTPS in Presto. This helps optimize CPU usage by limiting the available cipher suites to less CPU-intensive options.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/security/server.rst#2025-04-10_snippet_2\n\nLANGUAGE: none\nCODE:\n```\nhttp-server.https.included-cipher=TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA256\nhttp-server.https.excluded-cipher=\n```\n\n----------------------------------------\n\nTITLE: Using String Padding Functions in Presto SQL\nDESCRIPTION: Adds support for left and right string padding functions 'lpad' and 'rpad' in Presto SQL queries.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.143.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nlpad\n```\n\nLANGUAGE: SQL\nCODE:\n```\nrpad\n```\n\n----------------------------------------\n\nTITLE: Defining Geospatial Type in Presto Documentation\nDESCRIPTION: Documentation for Geospatial types in Presto that handle spatial data according to SQL/MM and OGC standards, including POINT, LINESTRING, POLYGON and other geometric types supporting WKT and WKB formats.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/language/types.rst#2025-04-10_snippet_10\n\nLANGUAGE: rst\nCODE:\n```\n``Geospatial``\n^^^^^^^^^^^^^^\n```\n\n----------------------------------------\n\nTITLE: SQL Cast Row Type Expression\nDESCRIPTION: Example of row type casting that includes spaces in field types, which was previously failing but is now fixed in this release.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.205.rst#2025-04-10_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\ncast(row(timestamp '2018-06-01') AS row(timestamp with time zone))\n```\n\n----------------------------------------\n\nTITLE: Describing SingleStore Table Columns in Presto\nDESCRIPTION: These SQL queries demonstrate two ways to view the columns of a specific table (clicks) in a SingleStore database (web) using Presto.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/singlestore.rst.txt#2025-04-10_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nDESCRIBE singlestore.web.clicks;\nSHOW COLUMNS FROM singlestore.web.clicks;\n```\n\n----------------------------------------\n\nTITLE: Basic Cassandra Connector Configuration\nDESCRIPTION: Essential configuration properties for connecting Presto to a Cassandra cluster. Requires specifying the connector name and contact points for cluster discovery.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/cassandra.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nconnector.name=cassandra\ncassandra.contact-points=host1,host2\n```\n\n----------------------------------------\n\nTITLE: New Array Duplicate Handling Functions in Presto 0.258\nDESCRIPTION: New SQL functions for handling duplicates in arrays: array_dupes identifies duplicate elements while array_as_dupes returns arrays with duplicated elements.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.258.rst#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\narray_dupes\n```\n\nLANGUAGE: sql\nCODE:\n```\narray_as_dupes\n```\n\n----------------------------------------\n\nTITLE: SQL Grouping Operations\nDESCRIPTION: SQL grouping operations mentioned in release notes including GROUPING SETS, CUBE, ROLLUP, and UNION queries.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.174.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nGROUPING SETS\nCUBE\nROLLUP\nUNION\n```\n\n----------------------------------------\n\nTITLE: Using Array_Intersect Function in Presto SQL\nDESCRIPTION: The array_intersect function returns the intersection of multiple arrays. This release improves the performance of this function.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.147.rst#2025-04-10_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\narray_intersect\n```\n\n----------------------------------------\n\nTITLE: Setting Hive Configuration Property\nDESCRIPTION: Configuration property to control stripe/file size threshold for ORC reader when deciding to read multiple consecutive stripes or entire files.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.202.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nhive.orc.tiny-stripe-threshold\n```\n\n----------------------------------------\n\nTITLE: Example of Dropping 'admin' Role in Presto SQL\nDESCRIPTION: An example showing how to drop the 'admin' role using the DROP ROLE statement in Presto SQL.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/drop-role.rst#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nDROP ROLE admin;\n```\n\n----------------------------------------\n\nTITLE: Enabling Custom Authentication in Presto Coordinator\nDESCRIPTION: Configuration setting required in the coordinator's config.properties file to enable custom authentication in Presto. HTTPS must also be enabled for the coordinator when using custom authentication.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/develop/presto-authenticator.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\nhttp-server.authentication.type=CUSTOM\n```\n\n----------------------------------------\n\nTITLE: Using checksum Function in Presto SQL\nDESCRIPTION: References the 'checksum' function in Presto SQL, which previously had a null pointer exception issue that has been fixed in this release.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.118.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT checksum(...)\n```\n\n----------------------------------------\n\nTITLE: Implementing Output Function for Averaging in Presto\nDESCRIPTION: An output function for an aggregation that calculates the average of DOUBLE values. It takes a LongAndDoubleState containing the sum and count, then writes the average to the provided BlockBuilder.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/develop/functions.rst#2025-04-10_snippet_7\n\nLANGUAGE: java\nCODE:\n```\n@OutputFunction(StandardTypes.DOUBLE)\npublic static void output(LongAndDoubleState state, BlockBuilder out)\n{\n    long count = state.getLong();\n    if (count == 0) {\n        out.appendNull();\n    }\n    else {\n        double value = state.getDouble();\n        DOUBLE.writeDouble(out, value / count);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Type Examples (SQL)\nDESCRIPTION: Examples of built-in and parametric types in Presto SQL, showing both simple types and types with parameters.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/develop/types.rst#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nVARCHAR(10)\nDECIMAL(22, 5)\n```\n\n----------------------------------------\n\nTITLE: Using EXPLAIN ANALYZE in Presto SQL\nDESCRIPTION: This snippet refers to the addition of support for the EXPLAIN ANALYZE command in Presto SQL. It is used for analyzing query execution plans and performance.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.144.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nEXPLAIN ANALYZE\n```\n\n----------------------------------------\n\nTITLE: Creating Iceberg Table with Version 2 Format and Commit Retries\nDESCRIPTION: Example of creating an Iceberg table with version 2 format and custom commit_retries setting. This demonstrates additional table properties available when creating Iceberg tables.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/iceberg.rst.txt#2025-04-10_snippet_35\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE iceberg.web.page_views_v2 (\n  view_time timestamp,\n  user_id bigint,\n  page_url varchar,\n  ds date,\n  country varchar\n)\nWITH (\n  format = 'ORC',\n  partitioning = ARRAY['ds', 'country'],\n  format_version = '2',\n  commit_retries = 5\n)\n```\n\n----------------------------------------\n\nTITLE: Locating Point on Linestring in Presto SQL\nDESCRIPTION: Returns a float representing the location of the closest point on a LineString to a given Point.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/geospatial.rst.txt#2025-04-10_snippet_23\n\nLANGUAGE: SQL\nCODE:\n```\nline_locate_point(LineString, Point) -> double\n```\n\n----------------------------------------\n\nTITLE: Analyze Complex Partitions\nDESCRIPTION: Example showing analysis of partitions with multiple partition keys (state and city) in a Hive table.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/sql/analyze.rst.txt#2025-04-10_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nANALYZE hive.default.customers WITH (partitions = ARRAY[ARRAY['CA', 'San Francisco'], ARRAY['NY', 'NY']]);\n```\n\n----------------------------------------\n\nTITLE: Presto Coordinator Kerberos Configuration Properties\nDESCRIPTION: Configuration settings for enabling Kerberos authentication and HTTPS in Presto coordinator's config.properties file.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/security/server.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\nhttp-server.authentication.type=KERBEROS\n\nhttp.server.authentication.krb5.service-name=presto\nhttp.server.authentication.krb5.service-hostname=presto.example.com\nhttp.server.authentication.krb5.keytab=/etc/presto/presto.keytab\nhttp.authentication.krb5.config=/etc/krb5.conf\n\nhttp-server.https.enabled=true\nhttp-server.https.port=7778\n\nhttp-server.https.keystore.path=/etc/presto_keystore.jks\nhttp-server.https.keystore.key=keystore_password\n```\n\n----------------------------------------\n\nTITLE: Creating MySQL Verifier Snapshots Table\nDESCRIPTION: SQL schema for creating the verifier_snapshots table that stores query results for comparison in query-bank mode\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/admin/verifier.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE verifier_snapshots (\n    id int(11) unsigned NOT NULL PRIMARY KEY AUTO_INCREMENT,\n    suite varchar(256) NOT NULL,\n    name varchar(256) NOT NULL DEFAULT '.',\n    is_explain BOOLEAN NOT NULL DEFAULT false,\n    snapshot json NOT NULL,\n    updated_at datetime NOT NULL DEFAULT now(),\n    UNIQUE(suite, name, is_explain));\n```\n\n----------------------------------------\n\nTITLE: Configuring Java Security EGD\nDESCRIPTION: JVM configuration to change the entropy source for the SHA1PRNG algorithm.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/security/internal-communication.rst#2025-04-10_snippet_13\n\nLANGUAGE: none\nCODE:\n```\n-Djava.security.egd=file:/dev/urandom\n```\n\n----------------------------------------\n\nTITLE: Referencing ColumnMetadata Class in RestructuredText\nDESCRIPTION: Shows the syntax for referring to the ColumnMetadata class in the SPI changes section of the documentation.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.105.rst#2025-04-10_snippet_2\n\nLANGUAGE: restructuredtext\nCODE:\n```\n``ColumnMetadata``\n```\n\n----------------------------------------\n\nTITLE: Referencing Line Interpolate Point Function in Presto\nDESCRIPTION: Reference to the new line_interpolate_point geospatial function added in Presto 0.229.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.229.rst#2025-04-10_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n:func:`!line_interpolate_point`\n```\n\n----------------------------------------\n\nTITLE: Creating a Table with Controlled Variable Length Columns in Black Hole Connector\nDESCRIPTION: This SQL command creates a table in the Black Hole connector with controlled length for variable length columns using the 'field_length' table property.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/blackhole.rst.txt#2025-04-10_snippet_5\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE blackhole.test.nation (\n  nationkey bigint,\n  name varchar\n)\nWITH (\n  split_count = 500,\n  pages_per_split = 1000,\n  rows_per_page = 2000,\n  field_length = 100\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Black Hole Connector in Presto\nDESCRIPTION: This snippet shows how to configure the Black Hole connector by creating a catalog properties file. It sets the connector name to 'blackhole'.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/blackhole.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: Properties\nCODE:\n```\nconnector.name=blackhole\n```\n\n----------------------------------------\n\nTITLE: Hive Configuration Property - Column Statistics Collection\nDESCRIPTION: Configuration property to enable collection of column-level statistics when writing tables in Hive connector.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.208.rst#2025-04-10_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\nhive.collect-column-statistics-on-write\n```\n\n----------------------------------------\n\nTITLE: SQL Show Commands\nDESCRIPTION: SQL commands for showing table metadata including SHOW GRANTS and information_schema.table_privileges.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.174.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSHOW GRANTS\ninformation_schema.table_privileges\n```\n\n----------------------------------------\n\nTITLE: Hive Security Configuration Properties\nDESCRIPTION: Configuration properties for file-based security in Hive connector.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.152.rst#2025-04-10_snippet_2\n\nLANGUAGE: Properties\nCODE:\n```\nhive.security\nsecurity.config-file\n```\n\n----------------------------------------\n\nTITLE: Using histogram Aggregation Function in SQL\nDESCRIPTION: The histogram aggregation function has been optimized to reduce memory usage in this release.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.194.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nhistogram()\n```\n\n----------------------------------------\n\nTITLE: Removing ordinalPosition from ColumnMetadata in Presto SPI\nDESCRIPTION: This code snippet illustrates a breaking change in the Presto connector SPI. The 'ordinalPosition' field has been removed from the ColumnMetadata class, requiring updates to custom connector implementations.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.105.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. note::\n    This is a backwards incompatible change with the previous connector SPI.\n    If you have written a connector, you will need to update your code\n    before deploying this release.\n```\n\n----------------------------------------\n\nTITLE: Using Time Travel in Iceberg Connector with Presto SQL\nDESCRIPTION: Shows how to use the time travel feature in the Iceberg connector to retrieve historical data using the AS OF syntax with either SYSTEM_VERSION or SYSTEM_TIME.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.286.rst#2025-04-10_snippet_10\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT * FROM iceberg_table FOR SYSTEM_VERSION AS OF 1234567890;\nSELECT * FROM iceberg_table FOR SYSTEM_TIME AS OF TIMESTAMP '2023-01-01 00:00:00 UTC';\n```\n\n----------------------------------------\n\nTITLE: Configuring Password Authenticator Properties in Presto\nDESCRIPTION: Example configuration file for password authenticator showing the required name property and custom properties. This file should be placed at etc/password-authenticator.properties on the Presto coordinator.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/develop/password-authenticator.rst#2025-04-10_snippet_0\n\nLANGUAGE: none\nCODE:\n```\npassword-authenticator.name=custom-password-authenticator\ncustom-property1=custom-value1\ncustom-property2=custom-value2\n```\n\n----------------------------------------\n\nTITLE: Setting ORC Writer Validation Percentage in Presto SQL\nDESCRIPTION: Configures the sampling percentage for ORC writer validation. This new configuration replaces the previous boolean validation setting, allowing for more granular control over the validation process.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.201.rst.txt#2025-04-10_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nhive.orc.writer.validation-percentage\n```\n\n----------------------------------------\n\nTITLE: Accessing Type Native Container (Java)\nDESCRIPTION: Method signature for getting the Java type used to hold values during execution and store them in a Block. This is used in function implementations that work with the Type.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/develop/types.rst#2025-04-10_snippet_0\n\nLANGUAGE: java\nCODE:\n```\ngetJavaType()\n```\n\n----------------------------------------\n\nTITLE: Fast Forward Branch in Iceberg\nDESCRIPTION: Examples of advancing a branch's current snapshot to a more recent snapshot from another branch.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/iceberg.rst.txt#2025-04-10_snippet_31\n\nLANGUAGE: sql\nCODE:\n```\nCALL iceberg.system.fast_forward('schema_name', 'table_name', 'dev', 'main');\n```\n\nLANGUAGE: sql\nCODE:\n```\nCALL iceberg.system.fast_forward('schema_name', 'table_name', 'branch1', 'main');\n```\n\n----------------------------------------\n\nTITLE: Setting Internal Node Authentication Type\nDESCRIPTION: Configuration for specifying the authentication type for internal node communication.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/security/authorization.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\nnode.internal-address=<authentication type>\n```\n\n----------------------------------------\n\nTITLE: Configuring S3 Path Style Access in Hive\nDESCRIPTION: Configuration property to enable path style access for S3 filesystem in Hive connector\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.186.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nhive.s3.path-style-access=true\n```\n\n----------------------------------------\n\nTITLE: OpenLDAP Group Authentication Pattern\nDESCRIPTION: LDAP query pattern for group membership authorization in OpenLDAP.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/security/ldap.rst.txt#2025-04-10_snippet_6\n\nLANGUAGE: properties\nCODE:\n```\nldap.group-auth-pattern=(&(objectClass=inetOrgPerson)(uid=${USER})(memberof=CN=AuthorizedGroup,OU=Asia,DC=corp,DC=example,DC=com))\n```\n\n----------------------------------------\n\nTITLE: Role-Identity Regex Mapping for Configuration-based Authorizer\nDESCRIPTION: Example of a role to identity regex mapping file that maps Presto roles to identity patterns used by the Configuration-based Authorizer.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/security/authorization.rst#2025-04-10_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\nuser=.*\ninternal=coordinator\nadmin=su.*\n```\n\n----------------------------------------\n\nTITLE: SQL Map Cardinality Functions\nDESCRIPTION: Bug fix for map key and value cardinality functions that were returning incorrect results\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.282.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\ncardinality(map_keys(x))\ncardinality(map_values(x))\n```\n\n----------------------------------------\n\nTITLE: Session Property Configuration\nDESCRIPTION: Examples of new session properties introduced for various optimizations including redundant cast removal and HBO configurations\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.285.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\nremove_redundant_cast_to_varchar_in_join=true\nenable_hbo_for_scaled_writer=false\nuse_partial_aggregation_history=false\nverbose_optimizer_info_enabled=true\nnative_debug.validate_output_from_operators\n```\n\n----------------------------------------\n\nTITLE: Configuring Session Property Manager in Presto\nDESCRIPTION: This snippet shows the configuration needed in the 'etc/session-property-config.properties' file to enable the built-in session property manager that reads from a JSON config file.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/admin/session-property-managers.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nsession-property-config.configuration-manager=file\nsession-property-manager.config-file=etc/session-property-config.json\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Setting - Presto History File\nDESCRIPTION: Environment variable to specify custom location for the Presto CLI history file.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.208.rst#2025-04-10_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nPRESTO_HISTORY_FILE\n```\n\n----------------------------------------\n\nTITLE: Importing Certificate to Java Truststore for Presto CLI\nDESCRIPTION: This command imports a certificate file 'presto_certificate.cer' into a custom truststore 'presto_trust.jks'. This is used to configure the Presto CLI to trust the Presto coordinator's certificate for HTTPS connections.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/security/tls.rst#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkeytool -import -v -trustcacerts -alias presto_trust -file presto_certificate.cer -keystore presto_trust.jks -keypass <truststore_pass>\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic MongoDB Properties\nDESCRIPTION: Basic configuration properties for connecting Presto to MongoDB using a catalog properties file\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/mongodb.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nconnector.name=mongodb\nmongodb.seeds=host1,host:port\n```\n\n----------------------------------------\n\nTITLE: SQL Window Function Frame Example\nDESCRIPTION: Example demonstrating the syntax for window function frame specification that was fixed to handle empty frames correctly.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.148.rst#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nROWS BETWEEN UNBOUNDED PRECEDING AND 2 PRECEDING\n```\n\n----------------------------------------\n\nTITLE: Map Function Declaration\nDESCRIPTION: Reference to the new map function for constructing empty maps in Presto.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.161.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nmap()\n```\n\n----------------------------------------\n\nTITLE: Configuring Hive Non-Managed Table Writes in Presto\nDESCRIPTION: Configuration property to enable writing to external (non-managed) Hive tables. This feature is disabled by default.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.171.rst#2025-04-10_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nhive.non-managed-table-writes-enabled=true\n```\n\n----------------------------------------\n\nTITLE: Map Subscript Performance Improvement\nDESCRIPTION: Enhanced map subscript operation from O(n) to O(1) complexity for all map types, improving query performance when accessing map elements.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.180.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT my_map['key'] FROM table;\n```\n\n----------------------------------------\n\nTITLE: Limiting Data Written During CTE Materialization\nDESCRIPTION: Sets the maximum amount of data that can be written during Common Table Expression (CTE) materialization. Default is 2TB.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.287.rst.txt#2025-04-10_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nSET SESSION query_max_written_intermediate_bytes = '2TB';\n```\n\n----------------------------------------\n\nTITLE: Creating an External Hive Table in Presto\nDESCRIPTION: Creates an external Hive table named 'request_logs' that points to existing data in S3. This example shows how to set up a table that references external data without moving it.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/hive.rst#2025-04-10_snippet_20\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE hive.web.request_logs (\n  request_time timestamp,\n  url varchar,\n  ip varchar,\n  user_agent varchar\n)\nWITH (\n  format = 'TEXTFILE',\n  external_location = 's3://my-bucket/data/logs/'\n)\n```\n\n----------------------------------------\n\nTITLE: Session Property Configuration\nDESCRIPTION: Examples of new session properties introduced for various optimizations including redundant cast removal and HBO configurations\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.285.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\nremove_redundant_cast_to_varchar_in_join=true\nenable_hbo_for_scaled_writer=false\nuse_partial_aggregation_history=false\nverbose_optimizer_info_enabled=true\nnative_debug.validate_output_from_operators\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Generating JavaScript Files\nDESCRIPTION: Command to install dependencies and generate JavaScript files in the dist directory for the Presto Console.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/develop/presto-console.rst#2025-04-10_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nyarn install\n```\n\n----------------------------------------\n\nTITLE: Using Histogram Function with Map Type\nDESCRIPTION: Fix for the histogram function when working with map type data requiring type coercion.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.195.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n!histogram\n```\n\n----------------------------------------\n\nTITLE: Using Approx_Percentile Function with Accuracy Parameter in SQL\nDESCRIPTION: Example of the new version of the approx_percentile function that accepts an accuracy parameter. This function allows calculating approximate percentiles with configurable accuracy.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.126.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\napprox_percentile\n```\n\n----------------------------------------\n\nTITLE: Querying Iceberg Table Changelog in Presto SQL\nDESCRIPTION: Demonstrates how to query the changelog of an Iceberg table using a specific snapshot ID. This allows viewing changes made to the table since its creation.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/iceberg.rst.txt#2025-04-10_snippet_22\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM \"ctas_orders@2423571386296047175$changelog\" ORDER BY ordinal;\n```\n\n----------------------------------------\n\nTITLE: Changelog Table Syntax\nDESCRIPTION: Addition of the $changelog table that allows users to track when records were added or deleted in snapshots.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.286.rst.txt#2025-04-10_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\n$changelog\n```\n\n----------------------------------------\n\nTITLE: Executing Presto CLI with LDAP Authentication and TLS Security in Bash\nDESCRIPTION: Bash script example showing how to invoke the Presto CLI with LDAP authentication and TLS security. The script includes necessary parameters for server connection, keystore/truststore configuration, and user authentication.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/security/ldap.rst.txt#2025-04-10_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\n./presto \\\n--server https://presto-coordinator.example.com:8443 \\\n--keystore-path /tmp/presto.jks \\\n--keystore-password password \\\n--truststore-path /tmp/presto_truststore.jks \\\n--truststore-password password \\\n--catalog <catalog> \\\n--schema <schema> \\\n--user <LDAP user> \\\n--password\n```\n\n----------------------------------------\n\nTITLE: Referencing SQL Functions in Presto Release Notes\nDESCRIPTION: This snippet demonstrates how SQL functions are referenced in Presto release notes. It includes mentions of map_agg and map_union functions, which have reduced memory usage in this release.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.172.rst#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n:func:`!map_agg` and :func:`!map_union`\n```\n\n----------------------------------------\n\nTITLE: Enabling Column Name Matching for Parquet in Hive Connector\nDESCRIPTION: Allows matching columns between table and partition schemas by names for Parquet files in the Hive connector. By default, columns are mapped by index.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.254.rst#2025-04-10_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nSET SESSION hive.parquet_use_column_names = true;\n```\n\n----------------------------------------\n\nTITLE: Query Result - Symbol Filter\nDESCRIPTION: Result set displaying the filtered output for a specific symbol.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/hudi.rst#2025-04-10_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n    dt      | symbol |\n------------+--------+\n 2018-08-31 |  GOOG  |\n(1 rows)\n```\n\n----------------------------------------\n\nTITLE: Configuring Kerberos Authentication in Presto config.properties\nDESCRIPTION: Configuration entries required in the Presto coordinator's config.properties file to enable Kerberos authentication and HTTPS. This includes authentication type, service details, keytab location, and HTTPS configuration with keystore information.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/security/server.rst#2025-04-10_snippet_1\n\nLANGUAGE: none\nCODE:\n```\nhttp-server.authentication.type=KERBEROS\n\nhttp.server.authentication.krb5.service-name=presto\nhttp.server.authentication.krb5.service-hostname=presto.example.com\nhttp.server.authentication.krb5.keytab=/etc/presto/presto.keytab\nhttp.authentication.krb5.config=/etc/krb5.conf\n\nhttp-server.https.enabled=true\nhttp-server.https.port=7778\n\nhttp-server.https.keystore.path=/etc/presto_keystore.jks\nhttp-server.https.keystore.key=keystore_password\n```\n\n----------------------------------------\n\nTITLE: Querying TPCH Table Row Count\nDESCRIPTION: Example SQL query to count rows in the customer table from the sf1 schema.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/tpch.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT COUNT(*) FROM tpch.sf1.customer;\n```\n\n----------------------------------------\n\nTITLE: Using New Aggregate Functions in Presto SQL\nDESCRIPTION: New aggregate functions added in Presto 0.104 for statistical calculations. These include covariance, correlation, and regression functions.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.104.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\ncovar_pop()\ncovar_samp()\ncorr()\nregr_slope()\nregr_intercept()\n```\n\n----------------------------------------\n\nTITLE: New Cosine Similarity Function\nDESCRIPTION: Addition of a new function to calculate cosine similarity between vectors\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.144.7.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\ncosine_similarity\n```\n\n----------------------------------------\n\nTITLE: Configuring Query Rejection During Cluster Initialization\nDESCRIPTION: Configuration options to reject queries when the cluster is initializing. Queries are rejected if the active worker count is below the required threshold within a specified timeout period.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.182.rst#2025-04-10_snippet_5\n\nLANGUAGE: properties\nCODE:\n```\nquery-manager.initialization-required-workers=10\nquery-manager.initialization-timeout=5m\n```\n\n----------------------------------------\n\nTITLE: Referencing SQL Functions in Presto Release Notes\nDESCRIPTION: This snippet demonstrates how SQL functions are referenced in Presto release notes. It includes mentions of map_agg and map_union functions, which have reduced memory usage in this release.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.172.rst#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n:func:`!map_agg` and :func:`!map_union`\n```\n\n----------------------------------------\n\nTITLE: Configuring Join Reordering Strategy in Presto SQL\nDESCRIPTION: Sets the join reordering strategy session property in Presto. Valid values are AUTOMATIC (default), ELIMINATE_CROSS_JOINS, and NONE. This property determines how Presto optimizes join order in queries.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/optimizer/cost-based-optimizations.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSET SESSION join_reordering_strategy = 'AUTOMATIC';\n```\n\n----------------------------------------\n\nTITLE: Configuring SingleStore Connector in Presto\nDESCRIPTION: This snippet shows how to configure the SingleStore connector in Presto by creating a properties file. It specifies the connector name, connection URL, user, and password for connecting to a SingleStore database.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/singlestore.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nconnector.name=singlestore\nconnection-url=jdbc:singlestore://localhost:3306\nconnection-user=root\nconnection-password=LbRootPass1\n```\n\n----------------------------------------\n\nTITLE: Demonstrating SerializedPage Header Structure in Text\nDESCRIPTION: This snippet shows the structure of the SerializedPage header, including field names and sizes. It illustrates the compact binary format used for efficient data transfer.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/develop/serialized-page.rst#2025-04-10_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n=======================   =======\nField                     Size\n=======================   =======\nNumber of rows            4 bytes\nCodec                     1 byte\nUncompressed size         4 bytes\nSize                      4 bytes\nChecksum                  8 bytes\n=======================   =======\n```\n\n----------------------------------------\n\nTITLE: Configuring Dictionary Processing for Joins\nDESCRIPTION: Configuration properties to control dictionary processing optimization for joins, which can improve join performance by up to 50%.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.190.rst.txt#2025-04-10_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\ndictionary-processing-joins-enabled\n```\n\nLANGUAGE: sql\nCODE:\n```\ndictionary_processing_join\n```\n\n----------------------------------------\n\nTITLE: Altering Verifier Queries Table in SQL\nDESCRIPTION: SQL commands to modify the verifier_queries table structure by adding new columns for test and control pre-queries and post-queries. This change is required when upgrading to support new Verifier features in Presto 0.124.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.124.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nALTER TABLE verifier_queries ADD COLUMN test_postqueries text;\nALTER TABLE verifier_queries ADD COLUMN test_prequeries text;\nALTER TABLE verifier_queries ADD COLUMN control_postqueries text;\nALTER TABLE verifier_queries ADD COLUMN control_prequeries text;\n```\n\n----------------------------------------\n\nTITLE: Querying $history Metadata Table in Iceberg with Presto\nDESCRIPTION: Shows how to query the $history metadata table, which provides the history of table state changes in Iceberg.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/iceberg.rst.txt#2025-04-10_snippet_15\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM \"ctas_nation$history\";\n```\n\nLANGUAGE: text\nCODE:\n```\n           made_current_at            |     snapshot_id     | parent_id | is_current_ancestor\n--------------------------------------+---------------------+-----------+---------------------\n2022-11-25 20:56:31.784 Asia/Kolkata  | 7606232158543069775 | NULL      | true\n```\n\n----------------------------------------\n\nTITLE: String Concatenation in Presto SQL\nDESCRIPTION: Illustrates the use of the standard ANSI SQL string concatenation operator in Presto.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/migration/from-hive.rst.txt#2025-04-10_snippet_5\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT a || b || c\nFROM ...\n```\n\n----------------------------------------\n\nTITLE: Configuring System Memory Limit in Presto\nDESCRIPTION: Specifies the system memory limit that triggers memory pushback or heap dump if server memory usage exceeds this limit. A value of zero means no limit is set. This property only applies if system-mem-pushback-enabled is true.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/presto_cpp/properties.rst#2025-04-10_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nsystem-mem-limit-gb\n```\n\n----------------------------------------\n\nTITLE: Implementing create() Method in ExampleConnectorFactory\nDESCRIPTION: The create() method configures the connector using Guice for dependency injection. It initializes the bootstrap application with required modules and configuration properties before instantiating the ExampleConnector.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/develop/example-http.rst#2025-04-10_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n// A plugin is not required to use Guice; it is just very convenient\nBootstrap app = new Bootstrap(\n        new JsonModule(),\n        new ExampleModule(catalogName));\n\nInjector injector = app\n        .doNotInitializeLogging()\n        .setRequiredConfigurationProperties(requiredConfig)\n        .initialize();\n\nreturn injector.getInstance(ExampleConnector.class);\n```\n\n----------------------------------------\n\nTITLE: Querying Available Table Properties in PrestoDB\nDESCRIPTION: SQL query to list all available table properties in PrestoDB by querying the system.metadata.table_properties table.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/create-table-as.rst#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM system.metadata.table_properties\n```\n\n----------------------------------------\n\nTITLE: Configuring Write Concern for MongoDB Connector in Presto\nDESCRIPTION: Demonstrates the correct spelling of the JOURNAL_SAFE write concern option for the MongoDB connector configuration.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.272.rst#2025-04-10_snippet_6\n\nLANGUAGE: SQL\nCODE:\n```\n-- In connector configuration file\nmongodb.write-concern=JOURNAL_SAFE\n```\n\n----------------------------------------\n\nTITLE: Presto Configuration Property for Query Expiration\nDESCRIPTION: Configuration property setting a minimum value of 30 seconds for query expiration in Presto. This property controls how long completed queries remain in memory before being expired.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.246.rst#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nquery.min-expire-age\n```\n\n----------------------------------------\n\nTITLE: Enabling Optimized RCFile Writer in Presto Hive Connector\nDESCRIPTION: A new experimental RCFile writer optimized for Presto can be enabled using a session property or Hive catalog property.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.168.rst#2025-04-10_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nSET SESSION rcfile_optimized_writer_enabled = true;\n-- or in hive-catalog.properties:\n-- hive.rcfile-optimized-writer.enabled=true\n```\n\n----------------------------------------\n\nTITLE: Creating and Updating Presto Password File using htpasswd\nDESCRIPTION: These commands demonstrate how to create an empty password file and add or update a user's password using the htpasswd utility. It specifies the use of bcrypt with a cost of 10 for the user 'test'.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/security/password-file.rst#2025-04-10_snippet_4\n\nLANGUAGE: none\nCODE:\n```\ntouch password.db\nhtpasswd -B -C 10 password.db test\n```\n\n----------------------------------------\n\nTITLE: Loading TPCH Data into Kafka Topics in Bash\nDESCRIPTION: Command to run the kafka-tpch loader, which preloads Kafka topics with TPCH data.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/kafka-tutorial.rst.txt#2025-04-10_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ ./kafka-tpch load --brokers localhost:9092 --prefix tpch. --tpch-type tiny\n```\n\n----------------------------------------\n\nTITLE: Enabling Cluster Memory Manager in Presto\nDESCRIPTION: Flag for enabling the experimental cluster memory manager which tracks and manages memory resources to prevent deadlocks.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.103.rst#2025-04-10_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nexperimental.cluster-memory-manager-enabled\n```\n\n----------------------------------------\n\nTITLE: Using Greater Than Operator with Arrays in Presto SQL\nDESCRIPTION: The '>' operator is optimized for use with arrays in Presto SQL, allowing for more efficient comparisons between array values.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.140.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\narray1 > array2\n```\n\n----------------------------------------\n\nTITLE: Using the USE Statement in SQL with Presto\nDESCRIPTION: Example of the USE statement that can now be executed on the server rather than in the CLI, allowing it to be supported by any client. This requires clients to support the protocol changes.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.189.rst#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nUSE\n```\n\n----------------------------------------\n\nTITLE: Configuring Legacy Array_Agg Behavior in Presto\nDESCRIPTION: Configuration flag to restore the legacy behavior of the array_agg function, which ignores NULL input. This flag will be removed in a future release.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.151.rst#2025-04-10_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\ndeprecated.legacy-array-agg = true\n```\n\n----------------------------------------\n\nTITLE: Map Top N Keys Function\nDESCRIPTION: A new function that returns the top n keys of a map sorted by their values.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.286.rst.txt#2025-04-10_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nmap_top_n_keys_by_value\n```\n\n----------------------------------------\n\nTITLE: Division by Zero Error Message in Presto SQL\nDESCRIPTION: Shows the error message generated when a division by zero occurs without using the TRY function.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/conditional.rst.txt#2025-04-10_snippet_12\n\nLANGUAGE: none\nCODE:\n```\nQuery failed: / by zero\n```\n\n----------------------------------------\n\nTITLE: Fixed SQL JOIN with Lambda Expressions Referencing External Columns\nDESCRIPTION: Resolves planning failures in JOIN clauses that contained lambda expressions referencing columns or variables from the enclosing scope.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.172.rst.txt#2025-04-10_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nJOIN\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Base64 Encoded SerializedPage in Presto Query Plan\nDESCRIPTION: This code snippet shows how SerializedPage format is used to represent constant values in a Presto query plan. The binary data is encoded as a base64 string for inclusion in the text-based plan.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/develop/serialized-page.rst#2025-04-10_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n- Project[projectLocality = LOCAL] => [expr:array(integer)]\n        Estimates: {rows: 1 (51B), cpu: 51.00, memory: 0.00, network: 0.00}\n        expr := [Block: position count: 3; size: 92 bytes]\n```\n\n----------------------------------------\n\nTITLE: Using GROUPING with Implicit Coercions in SQL\nDESCRIPTION: Fix for planning failures in queries that use the GROUPING operator when implicit type coercions are needed in expressions containing aggregate functions.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.190.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nGROUPING\n```\n\n----------------------------------------\n\nTITLE: Creating Partitioned Tables in Hive via Presto\nDESCRIPTION: Example of creating a partitioned Hive table using Presto's CREATE TABLE syntax. The table is partitioned by order_date and order_region columns using the 'partitioned_by' table property.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.123.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE orders (\n   order_date VARCHAR,\n   order_region VARCHAR,\n   order_id BIGINT,\n   order_info VARCHAR\n) WITH (partitioned_by = ARRAY['order_date', 'order_region'])\n```\n\n----------------------------------------\n\nTITLE: Filtering Hudi Table Data by Symbol\nDESCRIPTION: SQL query example demonstrating how to filter data in a Hudi table by a specific stock symbol, retrieving the date and symbol columns.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/hudi.rst.txt#2025-04-10_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nselect dt, symbol from stock_ticks_cow where symbol = 'GOOG';\n```\n\n----------------------------------------\n\nTITLE: Creating Simple View from Orders Table\nDESCRIPTION: Demonstrates creating a basic view that selects specific columns and includes a calculated field from the orders table.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/create-view.rst#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCREATE VIEW test AS\nSELECT orderkey, orderstatus, totalprice / 2 AS half\nFROM orders\n```\n\n----------------------------------------\n\nTITLE: Implementing getUpdateRowIdColumnHandle Method in ConnectorMetadata for Presto\nDESCRIPTION: This method returns a ColumnHandle that provides the rowId used by the connector to identify rows to be updated, as well as any other fields needed to complete the UPDATE operation.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/develop/delete-and-update.rst#2025-04-10_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nColumnHandle getUpdateRowIdColumnHandle(\n    ConnectorSession session,\n    ConnectorTableHandle tableHandle,\n    List<ColumnHandle> updatedColumns)\n```\n\n----------------------------------------\n\nTITLE: Renaming a View from 'users' to 'people' in SQL\nDESCRIPTION: This example demonstrates how to rename a view called 'users' to 'people' using the ALTER VIEW RENAME TO statement.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/alter-view.rst#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nALTER VIEW users RENAME TO people;\n```\n\n----------------------------------------\n\nTITLE: SQL Table Comments Support\nDESCRIPTION: Addition of table comment support for CREATE TABLE and CREATE TABLE AS statements.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.173.rst#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE table_name COMMENT 'table comment' AS SELECT ...\n```\n\n----------------------------------------\n\nTITLE: Configuration Property Update for Kerberos Authentication\nDESCRIPTION: Updated configuration syntax for enabling Kerberos authentication in PrestoDB. The previous config option has been replaced with a new type-based configuration.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.167.rst#2025-04-10_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\n# Old configuration\nhttp.server.authentication.enabled=true\n\n# New configuration\nhttp-server.authentication.type=KERBEROS\n```\n\n----------------------------------------\n\nTITLE: Executing Arbitrary, Max By, and Min By Functions with Complex Types in Presto SQL\nDESCRIPTION: Fixes the implementation of arbitrary, max_by, and min_by functions when used with array, map, or row data types.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.119.rst#2025-04-10_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nFix :func:`!arbitrary`, :func:`!max_by` and :func:`!min_by` functions when used with an array, map or row type.\n```\n\n----------------------------------------\n\nTITLE: Active Directory Group Authentication Pattern\nDESCRIPTION: LDAP query pattern for group membership authorization in Active Directory.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/security/ldap.rst.txt#2025-04-10_snippet_5\n\nLANGUAGE: properties\nCODE:\n```\nldap.group-auth-pattern=(&(objectClass=person)(sAMAccountName=${USER})(memberof=CN=AuthorizedGroup,OU=Asia,DC=corp,DC=example,DC=com))\n```\n\n----------------------------------------\n\nTITLE: Implementing getName() for ExampleConnectorFactory in Java\nDESCRIPTION: This snippet demonstrates the implementation of the getName() method in ExampleConnectorFactory. It returns the string identifier for the connector used in Presto configuration.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/develop/example-http.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n@Override\npublic String getName()\n{\n    return \"example-http\";\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Arbitrary, Max By, and Min By Functions with Complex Types in Presto SQL\nDESCRIPTION: Fixes the implementation of arbitrary, max_by, and min_by functions when used with array, map, or row data types.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.119.rst#2025-04-10_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nFix :func:`!arbitrary`, :func:`!max_by` and :func:`!min_by` functions when used with an array, map or row type.\n```\n\n----------------------------------------\n\nTITLE: Adding SQL Function Aliases and Syntax Support\nDESCRIPTION: New cryptographic hash functions (sha1, sha256, sha512) were added along with a power function alias and support for LIMIT ALL syntax.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.115.rst#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nsha1(value)\nsha256(value)\nsha512(value)\npower(value, exponent)\nSELECT column FROM table LIMIT ALL\n```\n\n----------------------------------------\n\nTITLE: Accessing Internal Partitions Table (Removed)\nDESCRIPTION: Indicates the removal of the information_schema.__internal_partitions__ table, which was previously used for internal partition management.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.193.rst#2025-04-10_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\ninformation_schema.__internal_partitions__\n```\n\n----------------------------------------\n\nTITLE: Using round() Function with tinyint in Presto SQL\nDESCRIPTION: The release fixes an ambiguity issue when calling the round() function with tinyint arguments. This function is used for rounding numeric values in Presto SQL queries.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.150.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nround(tinyint_column)\n```\n\n----------------------------------------\n\nTITLE: Floating Point Special Value Functions\nDESCRIPTION: Functions for handling special floating point values and checks. Includes infinity(), nan(), and various validation functions.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/math.rst#2025-04-10_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\ninfinity() -> double\nis_finite(x) -> boolean\nis_infinite(x) -> boolean\nis_nan(x) -> boolean\nnan() -> double\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Credentials for Hive\nDESCRIPTION: This bash script sets environment variables for AWS credentials and auxiliary jars needed for S3 access in Hive.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/installation/deployment.rst.txt#2025-04-10_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nexport HIVE_AUX_JARS_PATH=/path/to/aws-java-sdk-core-<version>.jar:$/path/to/aws-java-sdk-s3-<version>.jar:/path/to/hadoop-aws-<version>.jar\nexport AWS_ACCESS_KEY_ID=<Your AWS Access Key>\nexport AWS_SECRET_ACCESS_KEY=<Your AWS Secret Key>\n```\n\n----------------------------------------\n\nTITLE: Specifying Presto Plugin Packaging in Maven POM\nDESCRIPTION: This XML snippet demonstrates how to specify the packaging type for a Presto plugin in a Maven POM file. The 'presto-plugin' packaging type is used for built-in plugins included in the Presto source code.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/develop/spi-overview.rst#2025-04-10_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<packaging>presto-plugin</packaging>\n```\n\n----------------------------------------\n\nTITLE: SQL Session Management\nDESCRIPTION: Commands for managing session properties\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.189.rst.txt#2025-04-10_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nSET SESSION\n```\n\nLANGUAGE: sql\nCODE:\n```\nRESET SESSION\n```\n\n----------------------------------------\n\nTITLE: Accessing Query Stats in Presto JDBC Driver\nDESCRIPTION: Reference to the newly exposed query statistics in the JDBC driver's ResultSet.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.111.rst#2025-04-10_snippet_6\n\nLANGUAGE: SQL\nCODE:\n```\nResultSet\n```\n\n----------------------------------------\n\nTITLE: Querying a Delta Lake Table\nDESCRIPTION: Example SQL query to select data from a Delta Lake table registered in the Hive metastore. This query references the catalog, database, and table name to retrieve data.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/deltalake.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM sales.apac.sales_data LIMIT 200;\n```\n\n----------------------------------------\n\nTITLE: Using COALESCE Function in SQL\nDESCRIPTION: Enforces the SQL standard requirement that the COALESCE function must have at least two arguments. This change ensures compliance with SQL specifications.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.184.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\ncoalesce()\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents in ReStructuredText\nDESCRIPTION: This snippet defines a table of contents for the document using ReStructuredText syntax. It specifies local content, no backlinks, and a depth of 1.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/ecosystem/list.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. contents::\n    :local:\n    :backlinks: none\n    :depth: 1\n```\n\n----------------------------------------\n\nTITLE: Querying Available Schemas in TPCDS Connector\nDESCRIPTION: This SQL query shows how to list all available schemas provided by the TPCDS connector. It demonstrates the various scale factors available for testing.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/tpcds.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSHOW SCHEMAS FROM tpcds;\n```\n\n----------------------------------------\n\nTITLE: Using Negative Indices with json_array_get in Presto\nDESCRIPTION: Examples of using negative indices with json_array_get function to access elements from the end of a JSON array.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/json.rst.txt#2025-04-10_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nSELECT json_array_get('[\"c\", [3, 9], \"a\"]', -1); -- JSON 'a' (invalid JSON)\nSELECT json_array_get('[\"c\", [3, 9], \"a\"]', -2); -- JSON '[3,9]'\n```\n\n----------------------------------------\n\nTITLE: Function Reference Example\nDESCRIPTION: Reference to geometric function used in Presto for converting geometry to Bing tiles\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.192.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\ngeometry_to_bing_tiles\n```\n\n----------------------------------------\n\nTITLE: Configuring Hive Connector Properties for Presto\nDESCRIPTION: Basic configuration for Presto's hive.properties file to enable Hive connector with metastore connection.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/cache/service.rst#2025-04-10_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nconnector.name=hive-hadoop2\nhive.metastore.uri=thrift://localhost:9083\n```\n\n----------------------------------------\n\nTITLE: Configuring HBO Session Properties in Presto\nDESCRIPTION: Table of session properties for History-Based Optimizations in Presto, including property names, descriptions, and default values. These properties allow overriding configuration properties for specific sessions.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/optimizer/history-based-optimization.rst#2025-04-10_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n=========================================================== ==================================================================================================== ==============================================================\nSession property Name                                       Description                                                                                          Default value\n=========================================================== ==================================================================================================== ==============================================================\n``use_history_based_plan_statistics``                       Overrides the behavior of the configuration property                                                 ``optimizer.use-history-based-plan-statistics``\n                                                            ``optimizer.use-history-based-plan-statistics`` in the current session.\n``track_history_based_plan_statistics``                     Overrides the behavior of the configuration property                                                 ``optimizer.track-history-based-plan-statistics``\n                                                            ``optimizer.track-history-based-plan-statistics`` in the current session.\n``track_history_stats_from_failed_queries``                 Overrides the behavior of the configuration property                                                 ``optimizer.track-history-stats-from-failed-queries``\n                                                            ``optimizer.track-history-stats-from-failed-queries`` in the current session.\n``history_based_optimizer_timeout_limit``                   Overrides the behavior of the configuration property                                                 ``optimizer.history-based-optimizer-timeout``\n                                                            ``optimizer.history-based-optimizer-timeout`` in the current session.\n``enforce_history_based_optimizer_register_timeout``        Overrides the behavior of the configuration property                                                 ``optimizer.enforce-timeout-for-hbo-query-registration``\n                                                            ``optimizer.enforce-timeout-for-hbo-query-registration`` in the current session.\n``restrict_history_based_optimization_to_complex_query``    Enable history based optimization only for complex queries, i.e. queries with join and aggregation.  ``True``\n``history_input_table_statistics_matching_threshold``       Overrides the behavior of the configuration property                                                 ``hbo.history-matching-threshold``\n                                                            ``hbo.history-matching-threshold`` in the current session.\n``treat-low-confidence-zero-estimation-as-unknown``         Overrides the behavior of the configuration property\n                                                            ``optimizer.treat-low-confidence-zero-estimation-as-unknown`` in the current session.                ``optimizer.treat-low-confidence-zero-estimation-as-unknown``\n``confidence-based-broadcast``                              Overrides the behavior of the configuration property\n=========================================================== ==================================================================================================== ==============================================================\n```\n\n----------------------------------------\n\nTITLE: Using EXTRACT Parsing Function in Presto SQL\nDESCRIPTION: The EXTRACT function in Presto SQL allows extracting date parts from date/timestamp values. This release fixes handling of syntax errors when parsing this function.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.147.rst#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nEXTRACT\n```\n\n----------------------------------------\n\nTITLE: Setting MongoDB Read Preference Tags\nDESCRIPTION: Configuration property for MongoDB connector to specify read preference tags. Tag sets are separated by ampersands, with each tag set as a comma-separated list of colon-separated key-value pairs.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.220.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\nmongodb.read-preference-tags=dc:east,use:reporting&use:reporting\n```\n\n----------------------------------------\n\nTITLE: Implementing SET_DIGEST Type and Related Functions in SQL\nDESCRIPTION: Adds support for the SET_DIGEST type and its associated functions, allowing for efficient set operations and comparisons in Presto queries.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.193.rst.txt#2025-04-10_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT make_set_digest(ARRAY[1, 2, 3, 4, 5]) AS digest\n```\n\n----------------------------------------\n\nTITLE: Defining Schema Ownership Rules in Presto\nDESCRIPTION: JSON configuration example for schema access rules that determine which users have ownership permissions on which schemas, controlling who can execute DROP SCHEMA, ALTER SCHEMA, and CREATE SCHEMA operations.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/security/built-in-system-access-control.rst.txt#2025-04-10_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"catalogs\": [\n    {\n      \"allow\": true\n    }\n  ],\n  \"schemas\": [\n    {\n      \"user\": \"admin\",\n      \"schema\": \".*\",\n      \"owner\": true\n    },\n    {\n      \"user\": \"guest\",\n      \"owner\": false\n    },\n    {\n      \"schema\": \"default\",\n      \"owner\": true\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents in ReStructuredText\nDESCRIPTION: This snippet defines a table of contents for the document using ReStructuredText syntax. It specifies local content, no backlinks, and a depth of 1.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/ecosystem/list.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. contents::\n    :local:\n    :backlinks: none\n    :depth: 1\n```\n\n----------------------------------------\n\nTITLE: Configuring Query Limit Spill in Presto SQL\nDESCRIPTION: Enables spilling when a query uses more than the per-node total memory limit in combined revocable and non-revocable memory. This is applicable when the spill strategy is not PER_TASK_MEMORY_THRESHOLD.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.254.rst#2025-04-10_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nSET SESSION query_limit_spill_enabled = true;\n```\n\n----------------------------------------\n\nTITLE: Fixing Incorrect Results in Aggregations Following Outer Joins in SQL\nDESCRIPTION: This release fixes a bug where operations like GROUP BY and DISTINCT on RIGHT or FULL OUTER JOIN results could return incorrect data when referencing columns from the left relation used in join conditions, specifically when not all right relation rows have matches.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.125.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nGROUP BY, DISTINCT, etc. on the output of a RIGHT or FULL OUTER JOIN\n```\n\n----------------------------------------\n\nTITLE: Replacing log() Function with SQL Standard Alternative\nDESCRIPTION: The log() function was removed due to non-standard argument order. Users should replace log(x, b) with the equivalent expression ln(x) / ln(b) to ensure correct results across SQL implementations.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.200.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nln(x) / ln(b)\n```\n\n----------------------------------------\n\nTITLE: Creating Tables with Bucketed_By Property in Hive Connector\nDESCRIPTION: When creating tables with the Hive connector, the table property for bucketing has been renamed from clustered_by to bucketed_by.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.147.rst#2025-04-10_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nclustered_by\n```\n\nLANGUAGE: sql\nCODE:\n```\nbucketed_by\n```\n\n----------------------------------------\n\nTITLE: Using columnar_processing_dictionary Setting\nDESCRIPTION: Configuration setting that may cause queries to fail in Presto 0.132, with the issue resolved in version 0.133.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.132.rst#2025-04-10_snippet_6\n\nLANGUAGE: SQL\nCODE:\n```\ncolumnar_processing_dictionary\n```\n\n----------------------------------------\n\nTITLE: Combined Grouping Expressions with Rewritten Syntax\nDESCRIPTION: Alternative way to express the previous query by rewriting ROLLUP as GROUPING SETS, showing the intermediate step in understanding the cross-product behavior.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/sql/select.rst.txt#2025-04-10_snippet_18\n\nLANGUAGE: sql\nCODE:\n```\nSELECT origin_state, destination_state, origin_zip, sum(package_weight)\nFROM shipping\nGROUP BY\n    GROUPING SETS ((origin_state, destination_state)),\n    GROUPING SETS ((origin_zip), ());\n```\n\n----------------------------------------\n\nTITLE: Fixed Histogram Jacknife Differential Entropy Calculation\nDESCRIPTION: Query showing differential entropy calculation using fixed histogram with Jacknife estimation method, specifying value bounds between 0.0 and 1.0.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/aggregate.rst.txt#2025-04-10_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n    differential_entropy(1000000, x, 1.0, 'fixed_histogram_jacknife', 0.0, 1.0)\nFROM\n    data\n```\n\n----------------------------------------\n\nTITLE: Defining Presto SPI Dependency in Maven POM\nDESCRIPTION: This XML snippet shows how to define the Presto SPI dependency in a Maven POM file for a plugin project. The 'provided' scope is used because Presto provides the SPI classes at runtime.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/develop/spi-overview.rst#2025-04-10_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>com.facebook.presto</groupId>\n    <artifactId>presto-spi</artifactId>\n    <scope>provided</scope>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Using COALESCE Function in SQL\nDESCRIPTION: Enforces the SQL standard requirement that the COALESCE function must have at least two arguments. This change ensures compliance with SQL specifications.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.184.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\ncoalesce()\n```\n\n----------------------------------------\n\nTITLE: Creating Date-Partitioned Tables in Hive\nDESCRIPTION: Presto now supports Hive tables partitioned by DATE type. This allows for more efficient querying and data organization based on date values.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.96.rst#2025-04-10_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE example_table (id INT, value STRING)\nPARTITIONED BY (date_column DATE);\n```\n\n----------------------------------------\n\nTITLE: Creating ClickHouse Table with Custom Properties\nDESCRIPTION: Example of creating a table in ClickHouse with custom properties including engine type, ordering, partitioning, primary key, and sampling configuration.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/clickhouse.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE default.prestodb_ck (\n  id int NOT NULL,\n  birthday DATE NOT NULL,\n  name VARCHAR,\n  age BIGINT,\n  logdate DATE NOT NULL\n)\nWITH (\n  engine = 'MergeTree',\n  order_by = ARRAY['id', 'birthday'],\n  partition_by = ARRAY['toYYYYMM(logdate)'],\n  primary_key = ARRAY['id'],\n  sample_by = 'id'\n);\n```\n\n----------------------------------------\n\nTITLE: Finding Nearest Points Between Geometries in Presto SQL\nDESCRIPTION: Returns an array of two Points that have the minimum distance between two geometries. Returns NULL if either geometry is empty.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/geospatial.rst.txt#2025-04-10_snippet_6\n\nLANGUAGE: SQL\nCODE:\n```\ngeometry_nearest_points(Geometry, Geometry) -> array(Point)\n```\n\n----------------------------------------\n\nTITLE: Specifying Allowed HTTP Protocols in Presto JDBC Connection\nDESCRIPTION: Adds a new connection parameter 'protocols' to specify which HTTP protocols the Presto client is allowed to use when connecting via JDBC.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.255.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\njdbc:presto://example.net:8080/hive/sales?protocols=http,https\n```\n\n----------------------------------------\n\nTITLE: Mounting S3 to Alluxio (Bash)\nDESCRIPTION: This command mounts an S3 bucket to Alluxio file system for access through Presto.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/cache/service.rst.txt#2025-04-10_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ cd ${ALLUXIO_HOME}\n$ bin/alluxio-start.sh local -f\n$ bin/alluxio fs mount --readonly /example \\\n   s3://apc999/presto-tutorial/example-reason/\n```\n\n----------------------------------------\n\nTITLE: Pulling Presto Docker Image\nDESCRIPTION: Command to download the latest non-edge Presto Docker image from DockerHub. This image will be used to run the Presto server.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/installation/deploy-docker.rst#2025-04-10_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull prestodb/presto:latest\n```\n\n----------------------------------------\n\nTITLE: Enabling OFFSET Clause in SQL Queries for Presto 0.257\nDESCRIPTION: To enable the new OFFSET clause support in SQL queries, set the session property 'offset_clause_enabled' or configuration property 'offset-clause-enabled' to 'true'. This allows for pagination and result set manipulation in SQL statements.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.257.rst#2025-04-10_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSET SESSION offset_clause_enabled = true;\n```\n\n----------------------------------------\n\nTITLE: Enabling HTTPS Endpoint in Presto\nDESCRIPTION: Configuration settings to enable HTTPS for Presto's HTTP server, specifying the port, keystore path, and password.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/security/internal-communication.rst.txt#2025-04-10_snippet_4\n\nLANGUAGE: none\nCODE:\n```\nhttp-server.https.enabled=true\nhttp-server.https.port=<https port>\nhttp-server.https.keystore.path=<keystore path>\nhttp-server.https.keystore.key=<keystore password>\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL-based Function Namespace Manager in Presto\nDESCRIPTION: This snippet shows the contents of a properties file used to configure a MySQL-based function namespace manager for the 'example' catalog in Presto. It specifies the manager type, database URL, and table names for storing function namespaces and SQL functions.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/admin/function-namespace-managers.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nfunction-namespace-manager.name=mysql\ndatabase-url=jdbc:mysql://example.net:3306/database?user=root&password=password\nfunction-namespaces-table-name=example_function_namespaces\nfunctions-table-name=example_sql_functions\n```\n\n----------------------------------------\n\nTITLE: Configuring Native Scaled Writer\nDESCRIPTION: Parameters for controlling scaled writer behavior, including memory usage ratios and partition thresholds for writer scaling and rebalancing.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/presto_cpp/properties-session.rst#2025-04-10_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\nnative_scaled_writer_rebalance_max_memory_usage_ratio=0.7\nnative_scaled_writer_max_partitions_per_writer=128\nnative_scaled_writer_min_partition_processed_bytes_rebalance_threshold=134217728\nnative_scaled_writer_min_processed_bytes_rebalance_threshold=268435456\n```\n\n----------------------------------------\n\nTITLE: Configuring Stage Retries in Presto SQL\nDESCRIPTION: Sets the maximum number of stage retries allowed for a query. This feature requires exchange_materialization_strategy to be set to ALL.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.232.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSET SESSION max_stage_retries = 3;\n```\n\n----------------------------------------\n\nTITLE: Using degrees and radians conversion functions in Presto SQL\nDESCRIPTION: Demonstrates the new functions for converting between degrees and radians in trigonometric calculations.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.100.rst#2025-04-10_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\ndegrees()\nradians()\n```\n\n----------------------------------------\n\nTITLE: Using map and map_from_entries Functions in SQL\nDESCRIPTION: The map() function now raises errors on duplicate keys instead of silently producing corrupted data, and map_from_entries() raises errors when the input array contains null entries.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.202.rst#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nmap()\n```\n\nLANGUAGE: sql\nCODE:\n```\nmap_from_entries()\n```\n\n----------------------------------------\n\nTITLE: SQL JOIN Optimization\nDESCRIPTION: Example of JOIN criteria that optimizes to a FALSE expression, which was fixed in this release.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.142.rst#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nJOIN\n```\n\n----------------------------------------\n\nTITLE: DELETE with Subquery Condition\nDESCRIPTION: Advanced example demonstrating DELETE with a subquery in the WHERE clause to delete line items based on order priority.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/delete.rst#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nDELETE FROM lineitem\nWHERE orderkey IN (SELECT orderkey FROM orders WHERE priority = 'LOW');\n```\n\n----------------------------------------\n\nTITLE: Dropping a Partition in Hive Table\nDESCRIPTION: Demonstrates how to delete a specific partition from a Hive table by specifying the partition columns in the WHERE clause. This operation removes the partition data and metadata.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/hive.rst.txt#2025-04-10_snippet_16\n\nLANGUAGE: sql\nCODE:\n```\nDELETE FROM hive.web.page_views\nWHERE ds = DATE '2016-08-09'\n  AND country = 'US'\n```\n\n----------------------------------------\n\nTITLE: Configuring Read-Only System Access Control in Presto\nDESCRIPTION: This snippet shows how to configure the read-only system access control plugin in Presto by adding an access-control.properties file.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/security/built-in-system-access-control.rst#2025-04-10_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\naccess-control.name=read-only\n```\n\n----------------------------------------\n\nTITLE: Applying Hamming Distance Function in SQL\nDESCRIPTION: Introduces a new function 'hamming_distance' to calculate the Hamming distance between two values. This addition expands Presto's built-in function capabilities.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.184.rst.txt#2025-04-10_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nhamming_distance\n```\n\n----------------------------------------\n\nTITLE: Breaking Change in SQL OUTER JOIN Behavior\nDESCRIPTION: Modification to enforce failure on queries containing non-equi conjuncts in OUTER JOIN operations, preventing silent incorrect results\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.144.7.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nOUTER JOIN\n```\n\n----------------------------------------\n\nTITLE: Altering Verifier Queries Table in SQL\nDESCRIPTION: SQL commands to modify the verifier_queries table for supporting username and password settings per query in the Verifier tool. This change is required when upgrading from version 0.92.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.93.rst#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE verifier_queries add test_username VARCHAR(256) NOT NULL default 'verifier-test';\nALTER TABLE verifier_queries add test_password VARCHAR(256);\nALTER TABLE verifier_queries add control_username VARCHAR(256) NOT NULL default 'verifier-test';\nALTER TABLE verifier_queries add control_password VARCHAR(256);\n```\n\n----------------------------------------\n\nTITLE: Describing a Presto Accumulo Table\nDESCRIPTION: This SQL command shows how to describe the structure of a Presto Accumulo table, which is useful for viewing column mappings and other metadata.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/accumulo.rst.txt#2025-04-10_snippet_29\n\nLANGUAGE: sql\nCODE:\n```\nDESCRIBE foo.bar;\n```\n\n----------------------------------------\n\nTITLE: Using TRY with url_decode Function in SQL\nDESCRIPTION: Fixes error categorization for the url_decode function, allowing it to be used with the TRY operation for error handling in Presto SQL queries.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.152.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nTRY(url_decode())\n```\n\n----------------------------------------\n\nTITLE: Configuring Event Listener Properties in Presto\nDESCRIPTION: Example configuration file for setting up a custom event listener in Presto. It specifies the event listener name and custom properties specific to the implementation.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/develop/event-listener.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nevent-listener.name=custom-event-listener\ncustom-property1=custom-value1\ncustom-property2=custom-value2\n```\n\n----------------------------------------\n\nTITLE: Configuring Driver Max Page Partitioning Buffer Size in Presto\nDESCRIPTION: Introduces a new configuration option 'driver.max-page-partitioning-buffer-size' to control the buffer size used for repartitioning pages during exchanges in Presto.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.144.2.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\ndriver.max-page-partitioning-buffer-size\n```\n\n----------------------------------------\n\nTITLE: Defining Twitter Feed Table Schema in JSON\nDESCRIPTION: This JSON configuration defines the schema for the tweets table, including the table name, topic name, data format, and field mappings for various tweet attributes.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/kafka-tutorial.rst.txt#2025-04-10_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"tableName\": \"tweets\",\n    \"topicName\": \"twitter_feed\",\n    \"dataFormat\": \"json\",\n    \"key\": {\n        \"dataFormat\": \"raw\",\n        \"fields\": [\n            {\n                \"name\": \"kafka_key\",\n                \"dataFormat\": \"LONG\",\n                \"type\": \"BIGINT\",\n                \"hidden\": \"false\"\n            }\n        ]\n    },\n    \"message\": {\n        \"dataFormat\":\"json\",\n        \"fields\": [\n            {\n                \"name\": \"text\",\n                \"mapping\": \"text\",\n                \"type\": \"VARCHAR\"\n            },\n            {\n                \"name\": \"user_name\",\n                \"mapping\": \"user/screen_name\",\n                \"type\": \"VARCHAR\"\n            },\n            {\n                \"name\": \"lang\",\n                \"mapping\": \"lang\",\n                \"type\": \"VARCHAR\"\n            },\n            {\n                \"name\": \"created_at\",\n                \"mapping\": \"created_at\",\n                \"type\": \"TIMESTAMP\",\n                \"dataFormat\": \"rfc2822\"\n            },\n            {\n                \"name\": \"favorite_count\",\n                \"mapping\": \"favorite_count\",\n                \"type\": \"BIGINT\"\n            },\n            {\n                \"name\": \"retweet_count\",\n                \"mapping\": \"retweet_count\",\n                \"type\": \"BIGINT\"\n            },\n            {\n                \"name\": \"favorited\",\n                \"mapping\": \"favorited\",\n                    \"type\": \"BOOLEAN\"\n            },\n            {\n                \"name\": \"id\",\n                \"mapping\": \"id_str\",\n                \"type\": \"VARCHAR\"\n            },\n            {\n                \"name\": \"in_reply_to_screen_name\",\n                \"mapping\": \"in_reply_to_screen_name\",\n                \"type\": \"VARCHAR\"\n            },\n            {\n                \"name\": \"place_name\",\n                \"mapping\": \"place/full_name\",\n                \"type\": \"VARCHAR\"\n            }\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Table of Contents in reStructuredText for Presto Developer Guide\nDESCRIPTION: A reStructuredText toctree directive that organizes links to various Presto development topics, including connectors, types, functions, authentication, and protocols. The maxdepth parameter is set to 1 to limit the depth of the generated table of contents.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/develop.rst#2025-04-10_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n    :maxdepth: 1\n\n    develop/spi-overview\n    develop/connectors\n    develop/example-http\n    develop/delete-and-update\n    develop/types\n    develop/functions\n    develop/system-access-control\n    develop/password-authenticator\n    develop/event-listener\n    develop/client-protocol\n    develop/worker-protocol\n    develop/serialized-page\n    develop/presto-console\n    develop/presto-authenticator\n    develop/client-request-filter\n```\n\n----------------------------------------\n\nTITLE: Replacing JSON to VARCHAR Casting in Presto 0.116\nDESCRIPTION: Shows the replacement functions for the removed JSON-VARCHAR casts. Use JSON_PARSE(x) instead of CAST(x as JSON) and JSON_FORMAT(x) instead of CAST(x as VARCHAR) to maintain the same functionality.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.116.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nJSON_PARSE(x)\n```\n\nLANGUAGE: sql\nCODE:\n```\nJSON_FORMAT(x)\n```\n\n----------------------------------------\n\nTITLE: Enabling HTTP Request Logging in Prestissimo\nDESCRIPTION: Configuration property to enable HTTP request logging in Prestissimo for diagnosing protocol-related issues. This snippet shows how to enable access logging in the config.properties file, with logs written to the standard log.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/develop/worker-protocol.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\nhttp-server.enable-access-log=true\n```\n\n----------------------------------------\n\nTITLE: Utilizing New map_zip_with Lambda Function in SQL\nDESCRIPTION: Introduces the new map_zip_with lambda function, which allows for combining two maps using a custom lambda function to determine the resulting values.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.193.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT map_zip_with(MAP(ARRAY['a', 'b', 'c'], ARRAY[1, 2, 3]),\n                  MAP(ARRAY['a', 'b', 'c'], ARRAY[4, 5, 6]),\n                  (k, v1, v2) -> v1 + v2)\n```\n\n----------------------------------------\n\nTITLE: Using Environment Variables in Presto Worker Configurations\nDESCRIPTION: Demonstrates how to reference environment variables in worker configuration files. This allows sensitive data like access keys to be stored securely as environment variables rather than hard-coded in configuration files.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/presto_cpp/properties.rst#2025-04-10_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nkey=${ENV_VAR_NAME}\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nhive.s3.aws-access-key=${AWS_S3_ACCESS_KEY}\n```\n\n----------------------------------------\n\nTITLE: Configuring Memory Limits in Presto\nDESCRIPTION: Configuration properties for controlling memory usage in Presto queries, including total distributed memory and per-node memory limits.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.113.rst#2025-04-10_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\nquery.max-memory\nquery.max-memory-per-node\nresources.reserved-system-memory\n```\n\n----------------------------------------\n\nTITLE: Using UNION with Subqueries in Presto SQL\nDESCRIPTION: References improved error messaging when column types in UNION subqueries don't match.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.86.rst#2025-04-10_snippet_9\n\nLANGUAGE: SQL\nCODE:\n```\nUNION\n```\n\n----------------------------------------\n\nTITLE: Enabling Column Statistics Collection in Hive Connector\nDESCRIPTION: Configures the Hive connector to collect column-level statistics when writing tables. This feature is disabled by default.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.208.rst.txt#2025-04-10_snippet_3\n\nLANGUAGE: Properties\nCODE:\n```\nhive.collect-column-statistics-on-write=true\n```\n\n----------------------------------------\n\nTITLE: Breaking Change in SQL OUTER JOIN Behavior\nDESCRIPTION: Modification to enforce failure on queries containing non-equi conjuncts in OUTER JOIN operations, preventing silent incorrect results\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.144.7.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nOUTER JOIN\n```\n\n----------------------------------------\n\nTITLE: Using DESCRIBE Command in PrestoDB\nDESCRIPTION: Shows the basic syntax for using the DESCRIBE command to show table columns in PrestoDB. The command is followed by a table name and serves as an alias for the SHOW COLUMNS command.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/sql/describe.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: none\nCODE:\n```\nDESCRIBE table_name\n```\n\n----------------------------------------\n\nTITLE: Creating Tables from SELECT Results\nDESCRIPTION: Example of creating a new table by copying data from an existing table using CREATE TABLE AS SELECT.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/postgresql.rst#2025-04-10_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE postgresql.public.new_table AS SELECT * FROM postgresql.public.renamed_table;\n```\n\n----------------------------------------\n\nTITLE: Sample Elasticsearch Document Structure\nDESCRIPTION: Example JSON document structure showing various field types including arrays in Elasticsearch\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/elasticsearch.rst#2025-04-10_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"array_string_field\": [\"presto\",\"is\",\"the\",\"besto\"],\n    \"long_field\": 314159265359,\n    \"id_field\": \"564e6982-88ee-4498-aa98-df9e3f6b6109\",\n    \"timestamp_field\": \"1987-09-17T06:22:48.000Z\",\n    \"object_field\": {\n        \"array_int_field\": [86,75,309],\n        \"int_field\": 2\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: UNNEST with ORDINALITY Clause in Presto SQL\nDESCRIPTION: The WITH ORDINALITY clause adds an additional ordinality column to the UNNEST result, showing the position of each element in its original array.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/select.rst#2025-04-10_snippet_26\n\nLANGUAGE: sql\nCODE:\n```\nSELECT numbers, n, a\nFROM (\n  VALUES\n    (ARRAY[2, 5]),\n    (ARRAY[7, 8, 9])\n) AS x (numbers)\nCROSS JOIN UNNEST(numbers) WITH ORDINALITY AS t (n, a);\n```\n\n----------------------------------------\n\nTITLE: SQL DROP COLUMN Command\nDESCRIPTION: Syntax for dropping columns in Presto tables, newly supported in version 0.181.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.181.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nDROP COLUMN\n```\n\n----------------------------------------\n\nTITLE: Hive Partition Keys Configuration\nDESCRIPTION: Configuration property for enabling optimized metastore partition fetching for non-string partition keys in Hive connector.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.90.rst#2025-04-10_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\nhive.assume-canonical-partition-keys=true\n```\n\n----------------------------------------\n\nTITLE: Dropping a Presto-Accumulo Table\nDESCRIPTION: SQL command to drop a table in Presto, which removes both the metadata and the actual Accumulo table for internal tables.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/accumulo.rst.txt#2025-04-10_snippet_14\n\nLANGUAGE: sql\nCODE:\n```\nDROP TABLE myschema.scientists;\n```\n\n----------------------------------------\n\nTITLE: MySQL Table Alteration SQL\nDESCRIPTION: Examples of altering MySQL tables including adding, renaming, and dropping columns.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/mysql.rst.txt#2025-04-10_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE mysql.web.page_views ADD COLUMN zipcode VARCHAR;\nALTER TABLE mysql.web.page_views RENAME COLUMN zipcode TO location;\nALTER TABLE mysql.web.page_views DROP COLUMN location;\n```\n\n----------------------------------------\n\nTITLE: SQL Function Reference in Warning Message\nDESCRIPTION: SQL syntax highlighting showing the SORT, LIMIT operators and GROUPING SETS, CUBE, ROLLUP functions mentioned in a bug warning.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.247.rst#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSORT LIMIT GROUPING SETS (()) CUBE ROLLUP\n```\n\n----------------------------------------\n\nTITLE: Viewing Index Table Contents in Accumulo\nDESCRIPTION: Shows the indexed values stored in the Accumulo index table after data insertion.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/accumulo.rst.txt#2025-04-10_snippet_18\n\nLANGUAGE: none\nCODE:\n```\nroot@default> scan -t myschema.scientists_idx\n-21011 metadata_date:row2 []\n-23034 metadata_date:row1 []\n103 metadata_age:row2 []\n109 metadata_age:row1 []\nAlan Turing metadata_name:row2 []\nGrace Hopper metadata_name:row1 []\n```\n\n----------------------------------------\n\nTITLE: Querying a Hive Table in Presto\nDESCRIPTION: Demonstrates a simple query to select all columns from the 'page_views' table. This is a basic example of how to retrieve data from a Hive table using Presto.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/hive.rst#2025-04-10_snippet_18\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT * FROM hive.web.page_views\n```\n\n----------------------------------------\n\nTITLE: Using APPROX_DISTINCT Function in Presto SQL\nDESCRIPTION: Reference to the APPROX_DISTINCT function which received performance improvements in Presto 0.62. This function provides an approximate count of distinct values in a dataset.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.62.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nAPPROX_DISTINCT\n```\n\n----------------------------------------\n\nTITLE: Standard Type Casting in Presto SQL\nDESCRIPTION: Demonstrates the use of standard types for CAST operations in Presto, highlighting the use of VARCHAR instead of STRING.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/migration/from-hive.rst#2025-04-10_snippet_6\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT\n  CAST(x AS varchar)\n, CAST(x AS bigint)\n, CAST(x AS double)\n, CAST(x AS boolean)\nFROM ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Presto Web Connector URL for Tableau\nDESCRIPTION: URL format for connecting Tableau to Presto coordinator. Replace example.net:8080 with the actual Presto coordinator hostname and port (default port is 8080).\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/installation/tableau.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: none\nCODE:\n```\nhttp://example.net:8080/tableau/presto-connector.html\n```\n\n----------------------------------------\n\nTITLE: Configuring Database-Based Resource Manager Properties\nDESCRIPTION: Example configuration for setting up database-based resource groups management using MySQL.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/admin/resource-groups.rst#2025-04-10_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nresource-groups.configuration-manager=db\nresource-groups.config-db-url=jdbc:mysql://localhost:3306/resource_groups?user=<user>&password=<password>\n```\n\n----------------------------------------\n\nTITLE: Configuring Distributed Join in Presto SQL\nDESCRIPTION: Reference to the distributed_join configuration which enables hash-partitioning for semi-joins.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.111.rst#2025-04-10_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\ndistributed_join\n```\n\n----------------------------------------\n\nTITLE: Using UNNEST Function in Presto SQL\nDESCRIPTION: Introduces support for the UNNEST function, which can be used as a replacement for Hive's explode() function.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.79.rst#2025-04-10_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nUNNEST\n```\n\n----------------------------------------\n\nTITLE: Configuring Temporary Staging Directory in Hive Connector\nDESCRIPTION: Shows how to set the temporary staging directory path for write operations in the Hive connector using the new configuration property. The ${USER} placeholder can be used for user-specific paths.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.217.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: Properties\nCODE:\n```\nhive.temporary-staging-directory-path=/tmp/${USER}\n```\n\n----------------------------------------\n\nTITLE: Initiating Worker Shutdown via HTTP PUT Request\nDESCRIPTION: HTTP PUT request to trigger graceful shutdown of a Presto worker. After this request, the worker stops accepting new tasks and exits after completing existing tasks.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.128.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPUT /v1/info/state\n```\n\nLANGUAGE: json\nCODE:\n```\n\"SHUTTING_DOWN\"\n```\n\n----------------------------------------\n\nTITLE: Enabling History-Based Optimization for Failed Queries in PrestoDB\nDESCRIPTION: Session property to enable tracking of history-based optimization statistics from completed stages in failed queries.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.287.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSET SESSION track_history_based_plan_statistics_from_complete_stages_in_failed_query = true;\n```\n\n----------------------------------------\n\nTITLE: Starting Presto Server in Bash\nDESCRIPTION: Command to start the Presto server using the launcher script.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/kafka-tutorial.rst#2025-04-10_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/launcher start\n```\n\n----------------------------------------\n\nTITLE: Configuring File-Based Session Property Manager in Presto\nDESCRIPTION: Basic configuration for enabling the built-in file-based session property manager in Presto. This must be added to etc/session-property-config.properties to specify the manager type and the location of the JSON configuration file.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/admin/session-property-managers.rst#2025-04-10_snippet_0\n\nLANGUAGE: none\nCODE:\n```\nsession-property-config.configuration-manager=file\nsession-property-manager.config-file=etc/session-property-config.json\n```\n\n----------------------------------------\n\nTITLE: SQL Create Table Column Check\nDESCRIPTION: Reference to CREATE TABLE syntax validation for duplicate columns\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.177.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE\n```\n\n----------------------------------------\n\nTITLE: Configuration Property for Writer Count\nDESCRIPTION: Configuration property to set the number of writers per task in Presto.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.90.rst#2025-04-10_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\ntask.writer-count\n```\n\n----------------------------------------\n\nTITLE: Inserting Data via Accumulo Shell\nDESCRIPTION: Bash commands using the Accumulo shell to insert data directly into an Accumulo table that was created by Presto, demonstrating interoperability between Presto and native Accumulo tools.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/accumulo.rst.txt#2025-04-10_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n$ accumulo shell -u root -p secret\nroot@default> table myschema.scientists\nroot@default myschema.scientists> insert row3 metadata name \"Tim Berners-Lee\"\nroot@default myschema.scientists> insert row3 metadata age 60\nroot@default myschema.scientists> insert row3 metadata date 5321\n```\n\n----------------------------------------\n\nTITLE: SQL Show Stats Command\nDESCRIPTION: Command to display table and query statistics\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.177.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSHOW STATS\n```\n\n----------------------------------------\n\nTITLE: Inverse Poisson CDF Function\nDESCRIPTION: Calculates inverse of Poisson cumulative distribution function with lambda parameter for probability p. Returns n where P(N <= n; lambda) = p. Requires positive lambda and p in [0,1).\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/math.rst.txt#2025-04-10_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\ninverse_poisson_cdf(lambda, p) -> integer\n```\n\n----------------------------------------\n\nTITLE: Configuring Presto Connection String in Apache Superset\nDESCRIPTION: Format for the SQLAlchemy URI connection string used to connect Apache Superset to a Presto database. This string requires the hostname, port, and database name to establish a connection.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/clients/superset.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\npresto://{hostname}:{port}/{database}\n```\n\n----------------------------------------\n\nTITLE: Filtering Built-in Functions in Presto SQL\nDESCRIPTION: Configures SHOW FUNCTIONS to display only built-in functions, hiding user-defined SQL functions.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.232.rst.txt#2025-04-10_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\nSET SESSION list_built_in_functions_only = true;\nSHOW FUNCTIONS;\n```\n\n----------------------------------------\n\nTITLE: Output of Describe Command for Custom Column Mapping\nDESCRIPTION: Output of the DESCRIBE command showing how Presto maps table columns to custom Accumulo column families and qualifiers specified in the column_mapping property.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/accumulo.rst.txt#2025-04-10_snippet_7\n\nLANGUAGE: none\nCODE:\n```\n  Column   |  Type   | Extra |                    Comment\n-----------+---------+-------+-----------------------------------------------\n recordkey | varchar |       | Accumulo row ID\n name      | varchar |       | Accumulo column metadata:name. Indexed: false\n age       | bigint  |       | Accumulo column metadata:age. Indexed: false\n birthday  | date    |       | Accumulo column metadata:date. Indexed: false\n```\n\n----------------------------------------\n\nTITLE: HDFS Client Configuration\nDESCRIPTION: Configuration for specifying additional HDFS client options, necessary for setups like federated HDFS or NameNode high availability.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/hive.rst#2025-04-10_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\nhive.config.resources=/etc/hadoop/conf/core-site.xml,/etc/hadoop/conf/hdfs-site.xml\n```\n\n----------------------------------------\n\nTITLE: SQL Function Reference\nDESCRIPTION: References to SQL functions mentioned in release notes including array_distinct, json_array_get, date_format, date_parse, array_sort, typeof, avg, ceil, floor, round, truncate, abs, mod, sign, and shuffle\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.153.rst#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\narray_distinct(array(bigint))\njson_array_get()\ndate_format()\ndate_parse()\narray_sort()\ntypeof()\navg()\nceil()\nfloor()\nround()\ntruncate()\nabs()\nmod()\nsign()\nshuffle()\n```\n\n----------------------------------------\n\nTITLE: Retrieving Node List with Error Information from Presto Server\nDESCRIPTION: This endpoint returns a list of nodes known to a Presto Server, including detailed error information for nodes experiencing failures. The response includes information about recent failures, their types, and stack traces for the most recent failure.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/rest/node.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nVary: Accept\nContent-Type: text/javascript\n\n[\n   {\n      \"age\": \"4.45m\",\n      \"lastFailureInfo\": {\n          \"message\": \"Connect Timeout\",\n          \"stack\": [\n              \"org.eclipse.jetty.io.ManagedSelector$ConnectTimeout.run(ManagedSelector.java:683)\",\n              ....\n              \"java.lang.Thread.run(Thread.java:745)\"\n          ],\n          \"suppressed\": [],\n          \"type\": \"java.net.SocketTimeoutException\"\n      },\n      \"lastRequestTime\": \"2017-08-05T11:53:00.647Z\",\n      \"lastResponseTime\": \"2017-08-05T11:53:00.647Z\",\n      \"recentFailureRatio\": 0.47263053472046446,\n      \"recentFailures\": 2.8445543205610617,\n      \"recentFailuresByType\": {\n          \"java.net.SocketTimeoutException\": 2.8445543205610617\n      },\n      \"recentRequests\": 6.018558073577414,\n      \"recentSuccesses\": 3.1746446343010297,\n      \"uri\": \"http://172.19.0.3:8080\"\n   }\n]\n```\n\n----------------------------------------\n\nTITLE: Formatting Dates with Localization in Spanish\nDESCRIPTION: Shows how the date_format function displays month names based on the session locale, in this case formatting a timestamp using the Spanish language setting.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.66.rst#2025-04-10_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nSELECT date_format(TIMESTAMP '2001-01-09 09:04', '%M'); -- enero\n```\n\n----------------------------------------\n\nTITLE: Configuring Presto JDBC Connection Parameters with Properties\nDESCRIPTION: Java code example showing how to set JDBC connection parameters using a Properties object, including user, password, and SSL settings.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/installation/jdbc.rst#2025-04-10_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n// properties\nString url = \"jdbc:presto://example.net:8080/hive/sales\";\nProperties properties = new Properties();\nproperties.setProperty(\"user\", \"test\");\nproperties.setProperty(\"password\", \"secret\");\nproperties.setProperty(\"SSL\", \"true\");\nConnection connection = DriverManager.getConnection(url, properties);\n```\n\n----------------------------------------\n\nTITLE: Configuring CTE Partitioning Provider in PrestoDB\nDESCRIPTION: String property to specify the catalog name that provides custom partitioning for CTE materialization.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/admin/cte-materialization.rst#2025-04-10_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\nquery.cte-partitioning-provider-catalog=system\n```\n\n----------------------------------------\n\nTITLE: Using NOISY_AVG_GAUSSIAN Function in Presto SQL\nDESCRIPTION: The NOISY_AVG_GAUSSIAN function adds Gaussian noise to an average result, useful for differential privacy applications. It adds random noise with 0 mean and a specified standard deviation to average results.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.284.rst#2025-04-10_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\nNOISY_AVG_GAUSSIAN(value, noise_scale[, random_seed])\n```\n\n----------------------------------------\n\nTITLE: Updating ConnectorSplitSource Interface in Presto SPI\nDESCRIPTION: The ConnectorSplitSource interface has been modified to extend Closeable. This is a backwards incompatible change that requires connector implementations to be updated before deploying this release.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.67.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nThe ``ConnectorSplitSource`` interface now extends ``Closeable``.\n```\n\n----------------------------------------\n\nTITLE: SQL Array Functions\nDESCRIPTION: Reference to array manipulation functions used in result comparison operations.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.219.rst.txt#2025-04-10_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\narray_sort\\nchecksum\n```\n\n----------------------------------------\n\nTITLE: Using Time-based Functions with TIMESTAMP in SQL\nDESCRIPTION: Support for TIMESTAMP data type has been added to first_value, last_value, nth_value, lead, and lag functions, expanding their utility for time-based analysis in Presto.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.104.rst#2025-04-10_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nfirst_value(TIMESTAMP)\nlast_value(TIMESTAMP)\nnth_value(TIMESTAMP)\nlead(TIMESTAMP)\nlag(TIMESTAMP)\n```\n\n----------------------------------------\n\nTITLE: Configuring Exchange Client Threads in Presto\nDESCRIPTION: Sets the number of threads used by exchange clients to fetch data from other Presto nodes. Higher values can improve performance for large clusters but excessive values may hurt performance due to context switching.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/admin/properties.rst#2025-04-10_snippet_23\n\nLANGUAGE: properties\nCODE:\n```\nexchange.client-threads\n```\n\n----------------------------------------\n\nTITLE: Using ip_prefix_subnets Function in SQL\nDESCRIPTION: New function that splits the input prefix into subnets of the specified new prefix length, useful for IP address range calculations.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.290.rst.txt#2025-04-10_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT ip_prefix_subnets('192.168.0.0/16', 24)\n```\n\n----------------------------------------\n\nTITLE: Executing EXPLAIN VALIDATE Query in SQL\nDESCRIPTION: Adds support for EXPLAIN (TYPE VALIDATE) of EXPLAIN queries, which previously failed with an error.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.284.rst.txt#2025-04-10_snippet_6\n\nLANGUAGE: SQL\nCODE:\n```\nEXPLAIN (TYPE VALIDATE) EXPLAIN ...\n```\n\n----------------------------------------\n\nTITLE: Disabling Reserved Memory Pool in Presto SQL\nDESCRIPTION: Disables the reserved memory pool, which can be useful when query.max-total-memory-per-node is large compared to total available memory.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/admin/spill.rst#2025-04-10_snippet_5\n\nLANGUAGE: SQL\nCODE:\n```\nSET SESSION experimental.reserved-pool-enabled = false;\n```\n\n----------------------------------------\n\nTITLE: SQL Show Stats Command\nDESCRIPTION: Command to display table and query statistics\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.177.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSHOW STATS\n```\n\n----------------------------------------\n\nTITLE: Demonstrating current_timezone Function in Presto 0.82\nDESCRIPTION: Reference to the newly added current_timezone function in Presto 0.82 that returns the current session timezone.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.82.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\ncurrent_timezone()\n```\n\n----------------------------------------\n\nTITLE: Configuring Selectors for Resource Groups in Presto SQL\nDESCRIPTION: This code snippet shows how to create selectors for routing queries to specific resource groups in Presto. It demonstrates using different criteria such as user regex, source regex, and query type to determine the appropriate resource group for a query.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/admin/resource-groups.rst.txt#2025-04-10_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\n-- Selectors\n\n-- use ID of 'admin' resource group for selector\nINSERT INTO selectors (resource_group_id, user_regex, priority) VALUES ((SELECT resource_group_id FROM resource_groups WHERE name = 'admin'), 'bob', 6);\n\n-- use ID of 'global.data_definition' resource group for selector\nINSERT INTO selectors (resource_group_id, source_regex, query_type, priority) VALUES ((SELECT resource_group_id FROM resource_groups WHERE name = 'data_definition'), '.*pipeline.*', 'DATA_DEFINITION', 4);\n\n-- use ID of 'global.pipeline.pipeline_${USER}' resource group for selector\nINSERT INTO selectors (resource_group_id, source_regex, priority) VALUES ((SELECT resource_group_id FROM resource_groups WHERE name = 'pipeline_${USER}'), '.*pipeline.*', 3);\n\n-- get ID of 'global.adhoc.other.${USER}' resource group for by disambiguating group name using parent ID\nSELECT A.resource_group_id self_id, B.resource_group_id parent_id, concat(B.name, '.', A.name) name_with_parent\nFROM resource_groups A JOIN resource_groups B ON A.parent = B.resource_group_id\nWHERE A.name = '${USER}' AND B.name = 'other';\n-- |       5 |         4 | other.${USER}    |\nINSERT INTO selectors (resource_group_id, priority) VALUES (5, 1);\n```\n\n----------------------------------------\n\nTITLE: Setting Commit Retry Count for Iceberg Tables\nDESCRIPTION: Example of setting the commit.retry.num-retries table property when creating an Iceberg table to configure the number of retry attempts for concurrent upserts.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.287.rst.txt#2025-04-10_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE iceberg_table (id bigint, data varchar)\n WITH (\n   format = 'PARQUET',\n   commit.retry.num-retries = 5\n );\n```\n\n----------------------------------------\n\nTITLE: Using geometry_as_geojson in Presto\nDESCRIPTION: Returns the GeoJSON encoded representation defined by the input geometry. If the geometry is atomic (non-multi) empty, this function would return null.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/geospatial.rst#2025-04-10_snippet_40\n\nLANGUAGE: sql\nCODE:\n```\ngeometry_as_geojson(Geometry) -> varchar\n```\n\n----------------------------------------\n\nTITLE: Listing PostgreSQL Tables\nDESCRIPTION: Command to show available tables in a specific PostgreSQL schema.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/postgresql.rst#2025-04-10_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nSHOW TABLES FROM postgresql.web;\n```\n\n----------------------------------------\n\nTITLE: Adding expandedQuery Field to QueryCompletedEvent\nDESCRIPTION: Adds the expandedQuery field to the QueryCompletedEvent class to support enhanced query text logging with additional information. This SPI change extends query logging capabilities.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.264.1.rst#2025-04-10_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nexpandedQuery\n```\n\n----------------------------------------\n\nTITLE: Retrieving Failed Nodes List from Presto Server\nDESCRIPTION: This endpoint returns a list of nodes that have failed the last heartbeat check in a Presto Server. The response includes detailed information about each failed node, including the last failure information, recent failure statistics, and node URI.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/rest/node.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nVary: Accept\nContent-Type: text/javascript\n\n[\n   {\n      \"age\": \"1.37m\",\n      \"lastFailureInfo\": {\n          \"message\": \"Connect Timeout\",\n          \"stack\": [\n              \"org.eclipse.jetty.io.ManagedSelector$ConnectTimeout.run(ManagedSelector.java:683)\",\n              ....\n              \"java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\",\n              \"java.lang.Thread.run(Thread.java:745)\"\n          ],\n          \"suppressed\": [],\n          \"type\": \"java.net.SocketTimeoutException\"\n      },\n      \"lastRequestTime\": \"2017-08-05T11:52:42.647Z\",\n      \"lastResponseTime\": \"2017-08-05T11:52:42.647Z\",\n      \"recentFailureRatio\": 0.22498784153043677,\n      \"recentFailures\": 20.11558290058638,\n      \"recentFailuresByType\": {\n          \"java.net.SocketTimeoutException\": 20.11558290058638\n      },\n      \"recentRequests\": 89.40742203558189,\n      \"recentSuccesses\": 69.30583024727453,\n      \"uri\": \"http://172.19.0.3:8080\"\n   }\n]\n```\n\n----------------------------------------\n\nTITLE: Making Presto CLI Executable\nDESCRIPTION: Command to make the Presto CLI file executable using chmod.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/installation/cli.rst#2025-04-10_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nchmod +x presto\n```\n\n----------------------------------------\n\nTITLE: Creating Verifier Queries Table in MySQL\nDESCRIPTION: SQL schema for creating the verifier_queries table that stores query pairs and their configuration for testing. The table includes fields for control and test queries along with their associated metadata.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/admin/verifier.rst#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE verifier_queries (\n    id int(11) unsigned NOT NULL PRIMARY KEY AUTO_INCREMENT,\n    suite varchar(256) NOT NULL,\n    name varchar(256) DEFAULT NULL,\n    control_catalog varchar(256) NOT NULL,\n    control_schema varchar(256) NOT NULL,\n    control_query text NOT NULL,\n    control_username varchar(256) DEFAULT NULL,\n    control_password varchar(256) DEFAULT NULL,\n    control_session_properties text DEFAULT NULL,\n    test_catalog varchar(256) NOT NULL,\n    test_schema varchar(256) NOT NULL,\n    test_query text NOT NULL,\n    test_username varchar(256) DEFAULT NULL,\n    test_password varchar(256) DEFAULT NULL,\n    test_session_properties text DEFAULT NULL)\n```\n\n----------------------------------------\n\nTITLE: Enabling Bucket Execution in Presto SQL Session\nDESCRIPTION: Introduces the 'bucket_execution_enabled' session property for Hive connections in Presto. This property allows control over bucket execution behavior during the session.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.160.rst#2025-04-10_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nSET SESSION bucket_execution_enabled = true;\n```\n\n----------------------------------------\n\nTITLE: Executing Distinct Aggregation Query in Presto SQL\nDESCRIPTION: Example query demonstrating the new DISTINCT argument qualifier support for aggregation functions, limited to queries without GROUP BY and identical input expressions.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.55.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT count(DISTINCT country)\nFROM users\n```\n\n----------------------------------------\n\nTITLE: Presto SQL Configuration Property Reference\nDESCRIPTION: Configuration properties used for index loader timeout and optimized repartitioning settings in Presto 0.227\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.227.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nindex-loader-timeout\nindex_loader_timeout\noptimized_repartitioning\nexperimental.optimized-repartitioning\ntask_partitioned_writer_count\n```\n\n----------------------------------------\n\nTITLE: Using Geospatial Functions in SQL\nDESCRIPTION: Fixed correctness issues in geospatial functions to ensure proper return values within expected ranges, and fixed failures when processing geometry collections.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.202.rst#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nline_locate_point()\n```\n\nLANGUAGE: sql\nCODE:\n```\nST_IsValid()\n```\n\nLANGUAGE: sql\nCODE:\n```\ngeometry_invalid_reason()\n```\n\nLANGUAGE: sql\nCODE:\n```\ngeometry_to_bing_tiles()\n```\n\nLANGUAGE: sql\nCODE:\n```\nST_NumPoints()\n```\n\n----------------------------------------\n\nTITLE: Presto Function Reference\nDESCRIPTION: Reference to the transform function which received performance improvements in this release.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.165.rst#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\ntransform\n```\n\n----------------------------------------\n\nTITLE: Fixed Permissions Check for SHOW TABLES Command\nDESCRIPTION: Addresses incorrect permissions checking that occurred when executing the SHOW TABLES command.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.172.rst.txt#2025-04-10_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSHOW TABLES\n```\n\n----------------------------------------\n\nTITLE: SQL Event Reference\nDESCRIPTION: Reference to QueryCompletedEvent structure which received column name fixes.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.185.rst#2025-04-10_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nQueryCompletedEvent\n```\n\n----------------------------------------\n\nTITLE: Enabling Exchange Materialization with Session Properties\nDESCRIPTION: SQL commands to enable exchange materialization by setting three required session properties: exchange_materialization_strategy, partitioning_provider_catalog, and hash_partition_count.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/admin/exchange-materialization.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSET SESSION exchange_materialization_strategy='ALL';\n\n-- Set partitioning_provider_catalog to the Hive connector catalog\nSET SESSION partitioning_provider_catalog='hive';\n\n-- We recommend setting hash_partition_count to be at least 5X-10X about the cluster size\n-- when exchange materialization is enabled.\nSET SESSION hash_partition_count = 4096;\n```\n\n----------------------------------------\n\nTITLE: Calculating Cosine Similarity in Presto SQL\nDESCRIPTION: This snippet demonstrates how to use the cosine_similarity function in Presto to calculate the similarity between two sparse vectors represented as maps.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/math.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT cosine_similarity(MAP(ARRAY['a'], ARRAY[1.0]), MAP(ARRAY['a'], ARRAY[2.0])); -- 1.0\n```\n\n----------------------------------------\n\nTITLE: Configuring TPCH Connector Properties\nDESCRIPTION: Configuration required to set up the TPCH connector in Presto, which generates synthetic TPC-H data for testing.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.60.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: none\nCODE:\n```\nconnector.name=tpch\n```\n\n----------------------------------------\n\nTITLE: Dropping an Iceberg Schema\nDESCRIPTION: Example of dropping an Iceberg schema.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/iceberg.rst.txt#2025-04-10_snippet_53\n\nLANGUAGE: sql\nCODE:\n```\nDROP SCHEMA iceberg.web\n```\n\n----------------------------------------\n\nTITLE: Configuring Skip Header in Hive\nDESCRIPTION: Configuration parameter for handling header lines in Hive files.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.240.rst#2025-04-10_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\nskip.header.line.count=1\n```\n\n----------------------------------------\n\nTITLE: Stopping and Removing Presto Container\nDESCRIPTION: Docker commands to stop and remove the Presto container instance.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/installation/deploy-docker.rst.txt#2025-04-10_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndocker stop presto\ndocker rm presto\n```\n\n----------------------------------------\n\nTITLE: Cross Join with Lateral Derived Tables\nDESCRIPTION: Added initial support for CROSS JOIN operations against LATERAL derived tables, expanding join capabilities in Presto queries.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.180.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM table1 CROSS JOIN LATERAL (SELECT * FROM table2 WHERE table2.id = table1.id);\n```\n\n----------------------------------------\n\nTITLE: SQL Query with Benchmark Tags\nDESCRIPTION: Example SQL query file with benchmark tags for projection and filter properties that will be included in the benchmark output results.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/installation/benchmark-driver.rst#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nprojection=true\nfilter=false\n=================\nSELECT SUM(LENGTH(comment))\nFROM lineitem\n```\n\n----------------------------------------\n\nTITLE: Configuring System Access Control in Presto\nDESCRIPTION: Example configuration for a custom access control implementation in the etc/access-control.properties file. The configuration specifies the access control implementation name and custom properties that will be passed to the SystemAccessControlFactory.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/develop/system-access-control.rst#2025-04-10_snippet_0\n\nLANGUAGE: none\nCODE:\n```\naccess-control.name=custom-access-control\ncustom-property1=custom-value1\ncustom-property2=custom-value2\n```\n\n----------------------------------------\n\nTITLE: Using UUID Data Type in Presto Queries\nDESCRIPTION: Demonstrates the usage of the newly added UUID data type support in Presto queries.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.290.rst#2025-04-10_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT CAST('123e4567-e89b-12d3-a456-426614174000' AS UUID) AS uuid_column\n```\n\n----------------------------------------\n\nTITLE: Configuring Hudi Split Generator Parallelism in Presto SQL\nDESCRIPTION: Sets the session property to control the number of threads to generate splits from partitions in the Hudi connector.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.281.rst#2025-04-10_snippet_7\n\nLANGUAGE: SQL\nCODE:\n```\nSET SESSION hudi.split-generator-parallelism = <value>;\n```\n\n----------------------------------------\n\nTITLE: Using UUID Data Type in Presto Queries\nDESCRIPTION: Demonstrates the usage of the newly added UUID data type support in Presto queries.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.290.rst#2025-04-10_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT CAST('123e4567-e89b-12d3-a456-426614174000' AS UUID) AS uuid_column\n```\n\n----------------------------------------\n\nTITLE: Configuring Data Shuffling for Hive Table Writes in Presto SQL\nDESCRIPTION: Enables data shuffling on partition columns before writing to partitioned unbucketed Hive tables, increasing the maximum number of writable partitions.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.232.rst.txt#2025-04-10_snippet_6\n\nLANGUAGE: SQL\nCODE:\n```\nSET SESSION shuffle_partitioned_columns_for_table_write = true;\n```\n\n----------------------------------------\n\nTITLE: Enabling Hash Aggregation Optimization in Presto Coordinator Configuration\nDESCRIPTION: This snippet shows how to enable a new optimization for hash aggregations in Presto. The optimization is disabled by default and can be enabled by adding a specific property to the coordinator config.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.83.rst#2025-04-10_snippet_0\n\nLANGUAGE: Properties\nCODE:\n```\noptimizer.optimize-hash-generation=true\n```\n\n----------------------------------------\n\nTITLE: Floating Point Division with Integers in Presto SQL\nDESCRIPTION: Shows how to perform floating point division on two integers in Presto by casting one operand to DOUBLE.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/migration/from-hive.rst#2025-04-10_snippet_7\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT CAST(5 AS DOUBLE) / 2\n```\n\n----------------------------------------\n\nTITLE: Creating a Schema in Named Catalog in Presto\nDESCRIPTION: Example showing how to create a new schema named 'sales' in the 'hive' catalog in Presto, using catalog qualification.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/sql/create-schema.rst.txt#2025-04-10_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nCREATE SCHEMA hive.sales\n```\n\n----------------------------------------\n\nTITLE: SQL Array Cumulative Sum Function\nDESCRIPTION: New UDF that returns an array containing cumulative sums of input array elements\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.282.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\narray_cum_sum\n```\n\n----------------------------------------\n\nTITLE: Granting INSERT and SELECT Privileges in Presto SQL\nDESCRIPTION: Example of granting INSERT and SELECT privileges on the 'orders' table to user 'alice'.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/grant.rst#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nGRANT INSERT, SELECT ON orders TO alice;\n```\n\n----------------------------------------\n\nTITLE: Configuration Option for Enabling Non-Managed Hive Table Writes in Presto 0.171\nDESCRIPTION: A configuration property that enables writing to external (non-managed) Hive tables. This feature is disabled by default in Presto 0.171 but can be enabled through this configuration option.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.171.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nhive.non-managed-table-writes-enabled\n```\n\n----------------------------------------\n\nTITLE: Using contains Function in Presto\nDESCRIPTION: The contains function has been fixed to correctly return NULL if the value was not found but a NULL was encountered during searching.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.102.rst.txt#2025-04-10_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n:func:`!contains`\n```\n\n----------------------------------------\n\nTITLE: SQL Correlated Scalar Subquery Example\nDESCRIPTION: Example showing a correlated scalar subquery that gets rewritten to an aggregation over an outer join. Used to demonstrate the push-aggregation-through-join optimization.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/admin/properties-session.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM item i\n    WHERE i.i_current_price > (\n        SELECT AVG(j.i_current_price) FROM item j\n            WHERE i.i_category = j.i_category);\n```\n\n----------------------------------------\n\nTITLE: Query Plan Example with History-Based Optimization Statistics in PrestoDB\nDESCRIPTION: Shows a sample query plan fragment displaying HBO statistics. The plan includes nodes with statistics sourced from 'HistoryBasedSourceInfo', indicating that historical query data is being used for optimization decisions rather than standard cost-based estimation.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/optimizer/history-based-optimization.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n     Fragment 1 [HASH]                                                                                                                                            >\n         Output layout: [orderpriority, count]                                                                                                                    >\n         Output partitioning: SINGLE []                                                                                                                           >\n         Stage Execution Strategy: UNGROUPED_EXECUTION                                                                                                            >\n         - Project[PlanNodeId 392][projectLocality = LOCAL] => [orderpriority:varchar(15), count:bigint]                                                          >\n                 Estimates: {source: HistoryBasedSourceInfo, rows: 5 (117B), cpu: ?, memory: ?, network: ?}                                                       >\n             - Aggregate(FINAL)[orderpriority][$hashvalue][PlanNodeId 4] => [orderpriority:varchar(15), $hashvalue:bigint, count:bigint]                          >\n                     Estimates: {source: HistoryBasedSourceInfo, rows: 5 (117B), cpu: ?, memory: ?, network: ?}                                                   >\n                     count := \"presto.default.count\"((count_8)) (1:50)                                                                                            >\n                 - LocalExchange[PlanNodeId 354][HASH][$hashvalue] (orderpriority) => [orderpriority:varchar(15), count_8:bigint, $hashvalue:bigint]              >\n                     - RemoteSource[2] => [orderpriority:varchar(15), count_8:bigint, $hashvalue_9:bigint]\n```\n\n----------------------------------------\n\nTITLE: SQL Predicate Fix for Bucketed Columns in Hive\nDESCRIPTION: Example of the IS NULL predicate syntax that was fixed to produce correct results when used on bucketed columns in Hive connector.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.233.1.rst#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nIS NULL\n```\n\n----------------------------------------\n\nTITLE: Defining KLL Sketch Type in Presto Documentation\nDESCRIPTION: Documentation for the KLL Sketch type, which represents approximate distribution of values using a different algorithm, supporting multiple data types including int, bigint, double, varchar, and boolean.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/language/types.rst#2025-04-10_snippet_9\n\nLANGUAGE: rst\nCODE:\n```\n``KLL Sketch``\n^^^^^^^^^^^^^^\n```\n\n----------------------------------------\n\nTITLE: SQL NULL Handling Warning\nDESCRIPTION: Warning about potential incorrect NULL results in queries when optimize_mixed_distinct_aggregations is enabled\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.177.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\noptimize_mixed_distinct_aggregations\n```\n\n----------------------------------------\n\nTITLE: Configuring Presto Worker Server Properties\nDESCRIPTION: Minimal configuration for Presto worker nodes. Workers handle the computational workload of queries while communicating with the coordinator for task scheduling and management.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/installation/deployment.rst.txt#2025-04-10_snippet_3\n\nLANGUAGE: none\nCODE:\n```\ncoordinator=false\nhttp-server.http.port=8080\nquery.max-memory=50GB\nquery.max-memory-per-node=1GB\ndiscovery.uri=http://example.net:8080\n```\n\n----------------------------------------\n\nTITLE: Accessing Presto Web UI URL\nDESCRIPTION: URL to access the Presto web UI after starting the Presto service. The web UI runs on the default port 8080.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/installation/deploy-brew.rst.txt#2025-04-10_snippet_5\n\nLANGUAGE: none\nCODE:\n```\nhttp://localhost:8080\n```\n\n----------------------------------------\n\nTITLE: Defining Catalog Rules in Presto's File-Based System Access Control\nDESCRIPTION: This JSON snippet demonstrates how to define catalog access rules in the file-based system access control plugin, specifying user and catalog access permissions.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/security/built-in-system-access-control.rst#2025-04-10_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"catalogs\": [\n    {\n      \"user\": \"admin\",\n      \"catalog\": \"(mysql|system)\",\n      \"allow\": \"all\"\n    },\n    {\n      \"catalog\": \"hive\",\n      \"allow\": \"all\"\n    },\n    {\n      \"user\": \"alice\",\n      \"catalog\": \"postgresql\",\n      \"allow\": \"read-only\"\n    },\n    {\n      \"catalog\": \"system\",\n      \"allow\": \"none\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling S3 Select Pushdown in Hive Connector\nDESCRIPTION: Demonstrates how to disable the behavior of failing queries when reading Parquet files with corrupt statistics. This is done by setting configuration properties.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.216.rst#2025-04-10_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSET hive.parquet.fail-on-corrupted-statistics = false;\nSET SESSION parquet_fail_with_corrupted_statistics = false;\n```\n\n----------------------------------------\n\nTITLE: Setting Native Execution Broadcast Base Path in Presto\nDESCRIPTION: Configures the base path for temporary storage of broadcast data for Presto-on-Spark native execution. This is done using a new property.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.283.rst#2025-04-10_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\nnative-execution-broadcast-base-path=<path>\n```\n\n----------------------------------------\n\nTITLE: Synchronizing Partition Metadata in Hive Connector\nDESCRIPTION: New system procedure to synchronize partitions in the metastore with those physically present in the file system. This procedure can be called to ensure consistency between the metastore and the actual data layout.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.241.rst#2025-04-10_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nCALL system.sync_partition_metadata();\n```\n\n----------------------------------------\n\nTITLE: Performing Date Truncation for Timestamp Grouping in SQL\nDESCRIPTION: Demonstrates the use of the date_trunc function to group timestamps by hour, which is useful for time-based aggregations in analytical queries.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.66.rst#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT date_trunc('hour', timestamp_column), count(*)\nFROM ...\nGROUP BY 1\n```\n\n----------------------------------------\n\nTITLE: GROUP BY Query with DISTINCT Quantifier in Presto SQL\nDESCRIPTION: Shows how GROUP BY DISTINCT with CUBE and ROLLUP operations generates only unique grouping combinations.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/select.rst#2025-04-10_snippet_14\n\nLANGUAGE: sql\nCODE:\n```\nSELECT origin_state, destination_state, origin_zip, sum(package_weight)\nFROM shipping\nGROUP BY DISTINCT\n    CUBE (origin_state, destination_state),\n    ROLLUP (origin_state, origin_zip);\n```\n\n----------------------------------------\n\nTITLE: New UI Thread Visualization Path\nDESCRIPTION: New UI endpoint path added for thread visualization functionality\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.64.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n/ui/thread\n```\n\n----------------------------------------\n\nTITLE: Configuring Kerberos Authentication in Presto\nDESCRIPTION: Shows the updated configuration for enabling Kerberos authentication in Presto. The old config option has been replaced with a new type-based setting.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.167.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: Properties\nCODE:\n```\nhttp-server.authentication.type=KERBEROS\n```\n\n----------------------------------------\n\nTITLE: Iceberg Connector Pushdown Filter Configuration\nDESCRIPTION: Configuration property to control the behavior of filter pushdown in the Iceberg connector.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.286.rst.txt#2025-04-10_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\niceberg.pushdown-filter-enabled\n```\n\n----------------------------------------\n\nTITLE: Using Named Arguments in Iceberg Table Registration Procedure\nDESCRIPTION: Demonstrates the use of named arguments in the 'register_table' procedure for Iceberg tables, a new feature in this release.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.290.rst#2025-04-10_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nCALL iceberg.system.register_table(schema_name => 'my_schema', table_name => 'my_table', table_location => 's3://bucket/path/to/table')\n```\n\n----------------------------------------\n\nTITLE: Basic DESCRIBE INPUT Syntax\nDESCRIPTION: Shows the basic syntax for the DESCRIBE INPUT command used to examine prepared statement parameters.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/sql/describe-input.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: none\nCODE:\n```\nDESCRIBE INPUT statement_name\n```\n\n----------------------------------------\n\nTITLE: Defining Presto Ecosystem Documentation Structure in reStructuredText\nDESCRIPTION: This snippet uses the toctree directive to organize documentation for the Presto ecosystem. It sets the maximum depth to 1 and includes a link to the 'ecosystem/list' document.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/ecosystem.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n    :maxdepth: 1\n\n    ecosystem/list\n```\n\n----------------------------------------\n\nTITLE: Altering Verifier Queries Table for Presto 0.124 Upgrade\nDESCRIPTION: SQL commands to add new columns to the verifier_queries table when upgrading to Presto 0.124. The new columns support pre and post control and test queries for the Verifier tool.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.124.rst#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE verifier_queries ADD COLUMN test_postqueries text;\nALTER TABLE verifier_queries ADD COLUMN test_prequeries text;\nALTER TABLE verifier_queries ADD COLUMN control_postqueries text;\nALTER TABLE verifier_queries ADD COLUMN control_prequeries text;\n```\n\n----------------------------------------\n\nTITLE: Query Results Display\nDESCRIPTION: Shows the results of querying the indexed data.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/accumulo.rst#2025-04-10_snippet_18\n\nLANGUAGE: none\nCODE:\n```\n recordkey |     name     | age |  birthday\n-----------+--------------+-----+------------\n row1      | Grace Hopper | 109 | 1906-12-09\n(1 row)\n```\n\n----------------------------------------\n\nTITLE: Amazon S3 Configuration Properties\nDESCRIPTION: Configuration properties required for Hive connector to access Amazon S3, including AWS access key ID and secret access key settings.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.57.rst#2025-04-10_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\nhive.s3.aws-access-key=AKIAIOSFODNN7EXAMPLE\nhive.s3.aws-secret-key=wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY\n```\n\n----------------------------------------\n\nTITLE: Configuring Hive Metastore for Alluxio (Bash)\nDESCRIPTION: This snippet shows how to edit the hive-env.sh file to include the Alluxio client jar in the Hive classpath.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/cache/service.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport HIVE_AUX_JARS_PATH=${ALLUXIO_HOME}/client/alluxio-<VERSION>-client.jar\n```\n\n----------------------------------------\n\nTITLE: Verifying Kerberos KDC Connectivity via Telnet\nDESCRIPTION: Command to verify connectivity to the Kerberos KDC server using telnet, which helps troubleshoot network connectivity issues in Kerberos authentication.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/security/server.rst#2025-04-10_snippet_3\n\nLANGUAGE: none\nCODE:\n```\n$ telnet kdc.example.com 88\n```\n\n----------------------------------------\n\nTITLE: Configuring Filter Expression Evaluation Through Cross Join in Presto SQL\nDESCRIPTION: Sets the push_down_filter_expression_evaluation_through_cross_join session property to control filter expression evaluation through cross join.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.282.rst#2025-04-10_snippet_6\n\nLANGUAGE: SQL\nCODE:\n```\nSET SESSION push_down_filter_expression_evaluation_through_cross_join = 'REWRITTEN_TO_INNER_JOIN';\n```\n\n----------------------------------------\n\nTITLE: Setting Adaptive Stage Scheduling Policy in Presto SQL\nDESCRIPTION: Shows how to enable the adaptive stage scheduling policy that switches to phased execution mode when a query's stage count exceeds a configurable limit.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.272.rst#2025-04-10_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nSET SESSION execution_policy = 'phased';\nSET SESSION max_stage_count_for_eager_scheduling = 100;\n```\n\n----------------------------------------\n\nTITLE: Configuring HiveMetastore Caching Scope\nDESCRIPTION: Adds support for caching HiveMetastore calls at a more granular level, which can be specified through a new configuration property. This enhancement allows for finer control over metastore caching behavior.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.242.rst#2025-04-10_snippet_5\n\nLANGUAGE: restructuredtext\nCODE:\n```\n* Add support for caching HiveMetastore calls at a more granular level. This can be specified by the ``hive.metastore-cache-scope`` configuration property.\n```\n\n----------------------------------------\n\nTITLE: Timestamp with Time Zone Operations\nDESCRIPTION: Examples showing timestamp creation and time zone conversion operations in Presto SQL.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.66.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT TIMESTAMP '2014-03-14 09:30:00 Europe/Berlin';\n-- 2014-03-14 09:30:00.000 Europe/Berlin\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT TIMESTAMP '2014-03-14 09:30:00 Europe/Berlin'\n     AT TIME ZONE 'America/Los_Angeles';\n-- 2014-03-14 01:30:00.000 America/Los_Angeles\n```\n\n----------------------------------------\n\nTITLE: Casting char to Numeric Types in SQL\nDESCRIPTION: Added support for casting char datatype to various numeric datatypes, expanding type conversion capabilities.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.290.rst.txt#2025-04-10_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT CAST('123' AS INTEGER)\n```\n\n----------------------------------------\n\nTITLE: Reserved SQL Keywords in Presto\nDESCRIPTION: Comprehensive list of SQL keywords that are reserved in Presto and must be quoted using double quotes when used as identifiers. Shows which keywords are reserved in SQL:2016 and SQL-92 standards.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/language/reserved.rst#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nALTER, AND, AS, BETWEEN, BY, CASE, CAST, CONSTRAINT, CREATE, CROSS,\nCUBE, CURRENT_DATE, CURRENT_TIME, CURRENT_TIMESTAMP, CURRENT_USER,\nDEALLOCATE, DELETE, DESCRIBE, DISTINCT, DROP, ELSE, END, ESCAPE,\nEXCEPT, EXECUTE, EXISTS, EXTRACT, FALSE, FOR, FROM, FULL, GROUP,\nGROUPING, HAVING, IN, INNER, INSERT, INTERSECT, INTO, IS, JOIN,\nLEFT, LIKE, LOCALTIME, LOCALTIMESTAMP, NATURAL, NORMALIZE, NOT,\nNULL, ON, OR, ORDER, OUTER, PREPARE, RECURSIVE, RIGHT, ROLLUP,\nSELECT, TABLE, THEN, TRUE, UESCAPE, UNION, UNNEST, USING, VALUES,\nWHEN, WHERE, WITH\n```\n\n----------------------------------------\n\nTITLE: SQL Window Function Ordering Issue in Presto 0.185\nDESCRIPTION: Example of the fixed incorrect ordering issue when the same field appears multiple times with different ordering specifications in a window function ORDER BY clause.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.185.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nOVER (ORDER BY x ASC, x DESC)\n```\n\n----------------------------------------\n\nTITLE: Setting Spiller Threads Count in Presto\nDESCRIPTION: Defines the number of threads used for spilling operations. More threads may be needed to saturate high-performance storage systems like RAID arrays.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/admin/properties.rst#2025-04-10_snippet_14\n\nLANGUAGE: properties\nCODE:\n```\nexperimental.spiller-threads\n```\n\n----------------------------------------\n\nTITLE: Executing SHOW Statements in Presto SQL\nDESCRIPTION: Illustrates the usage of SHOW SCHEMAS and SHOW TABLES statements, which now have access control checks applied to their results.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.167.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nSHOW SCHEMAS;\nSHOW TABLES;\n```\n\n----------------------------------------\n\nTITLE: Configuration Property Example - Parquet Writer Version\nDESCRIPTION: Configuration setting to specify Parquet writer version in Hive connector\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.289.rst#2025-04-10_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nhive.parquet.writer.version = PARQUET_2_0\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Release Notes Document\nDESCRIPTION: ReStructuredText formatted release notes document detailing changes in Presto 0.253, including general changes, security updates, and Hive-specific modifications. Contains warning about CPU regression and lists all contributors.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.253.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n=============\nRelease 0.253\n=============\n\n.. warning::\n    A CPU regression was introduced by :pr:`16027` for queries using :func:`!element_at` with ``MAP``\n\n**Details**\n===========\n\nGeneral Changes\n_______________\n* Fix amplified ``Cumulative User Memory`` metric in web UI.\n* Add tracking for system memory used by column statistics in ``TableFinishOperator``.\n* Add support for shutting down coordinator via ``/v1/info/state`` endpoint.\n* Add :func:`!binomial_cdf` and :func:`!inverse_binomial_cdf` functions.\n\nSecurity Changes\n________________\n* Add support for schema access control in file based system access control.\n\nHive Changes\n____________\n* Fix S3 table creation error when the specified directory location is created from AWS console.\n* Add Hive metastore impersonation access. This can be enabled with the ``hive.metastore-impersonation-enabled`` configuration property.\n* Add load balancing of multiple Hive metastore instances. This can be enabled with the ``hive.metastore.load-balancing-enabled`` configuration property.\n```\n\n----------------------------------------\n\nTITLE: Installing Homebrew on Intel Mac\nDESCRIPTION: Command to install Homebrew package manager on Intel Mac systems\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/installation/deploy-brew.rst#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)\"\n```\n\n----------------------------------------\n\nTITLE: Escaping JSON Path Subscripts in Presto SQL Functions\nDESCRIPTION: The json_extract and json_extract_scalar functions now support escaping double quotes or backslashes using a backslash within JSON path subscripts. This changes the behavior for any invocation using a backslash.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.168.rst#2025-04-10_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\njson_extract(column, '$.field[\"escaped\\\\backslash\"]')\n```\n\n----------------------------------------\n\nTITLE: Viewing Accumulo Tables After Index Creation\nDESCRIPTION: Shows the Accumulo tables created after setting up an indexed table, including the main table and its associated index tables.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/accumulo.rst.txt#2025-04-10_snippet_16\n\nLANGUAGE: none\nCODE:\n```\nroot@default> tables\naccumulo.metadata\naccumulo.root\nmyschema.scientists\nmyschema.scientists_idx\nmyschema.scientists_idx_metrics\ntrace\n```\n\n----------------------------------------\n\nTITLE: Submitting SQL Query via POST Request\nDESCRIPTION: Example of submitting a SQL query to Presto using POST /v1/statement endpoint. Shows required headers including catalog, source, schema and user information.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/rest/statement.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/statement HTTP/1.1\nHost: localhost:8001\nX-Presto-Catalog: jmx\nX-Presto-Source: presto-cli\nX-Presto-Schema: jmx\nUser-Agent: StatementClient/0.55-SNAPSHOT\nX-Presto-User: tobrie1\nContent-Length: 41\n\nselect name from \"java.lang:type=runtime\"\n```\n\n----------------------------------------\n\nTITLE: Presto CLI Debug Execution with Kerberos\nDESCRIPTION: Shell script for running Presto CLI with additional Kerberos debugging enabled through JVM arguments.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/security/cli.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\njava \\\n  -Dsun.security.krb5.debug=true \\\n  -jar presto-cli-*-executable.jar \\\n  --server https://presto-coordinator.example.com:7778 \\\n  --krb5-config-path /etc/krb5.conf \\\n  --krb5-principal someuser@EXAMPLE.COM \\\n  --krb5-keytab-path /home/someuser/someuser.keytab \\\n  --krb5-remote-service-name presto \\\n  --keystore-path /tmp/presto.jks \\\n  --keystore-password password \\\n  --catalog <catalog> \\\n  --schema <schema>\n```\n\n----------------------------------------\n\nTITLE: Configuration Property Change in Node Scheduler\nDESCRIPTION: Renamed configuration property for controlling pending splits per task, with backwards compatibility maintained. The old property is deprecated and will be removed in future versions.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.157.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: config\nCODE:\n```\nnode-scheduler.max-pending-splits-per-node-per-stage -> node-scheduler.max-pending-splits-per-task\n```\n\n----------------------------------------\n\nTITLE: Using Iceberg's LocationProvider for Data Paths\nDESCRIPTION: Enhancement to the Iceberg connector that allows writing data to paths defined by Iceberg's LocationProvider interface instead of using the default table root directory, enabling more flexible data placement strategies.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.261.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nLocationProvider\n```\n\n----------------------------------------\n\nTITLE: Adding Warning Note in reStructuredText\nDESCRIPTION: Creates a warning block in reStructuredText to alert users about a critical bug affecting startup when function namespace manager is enabled without Thrift configuration.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.243.2.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. warning::\n    There is a bug causing failure at startup if function namespace manager is enabled and Thrift is not configured (:pr:`15501`).\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Table Value Constructor in SQL\nDESCRIPTION: Shows how to use the new VALUES clause to create an inline table in a top-level query. This feature allows for creating ad-hoc tables directly in SQL statements.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.61.rst#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nVALUES ('a', 1), ('b', 2);\n```\n\n----------------------------------------\n\nTITLE: Configuring Minimal REST Catalog in Presto\nDESCRIPTION: This code snippet demonstrates the minimal configuration required to set up a REST catalog in Presto. It specifies the connector name, catalog type, and the REST API endpoint URI.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/iceberg.rst.txt#2025-04-10_snippet_5\n\nLANGUAGE: none\nCODE:\n```\nconnector.name=iceberg\niceberg.catalog.type=rest\niceberg.rest.uri=https://localhost:8181\n```\n\n----------------------------------------\n\nTITLE: Configuring Node Scheduler Hash Strategy\nDESCRIPTION: Configuration properties for enabling consistent hashing strategy in node scheduling. Allows setting the hash strategy and minimum virtual node count for the consistent hashing ring.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.268.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nnode-scheduler.node-selection-hash-strategy=CONSISTENT\nnode-scheduler.consistent-hashing-min-virtual-node-count\n```\n\n----------------------------------------\n\nTITLE: Configuring Single Distinct Optimization in Presto\nDESCRIPTION: Enables optimization to replace multiple DISTINCT clauses with a single GROUP BY clause, which can be faster to execute.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/admin/properties.rst#2025-04-10_snippet_44\n\nLANGUAGE: properties\nCODE:\n```\noptimizer.optimize-single-distinct=true\n```\n\n----------------------------------------\n\nTITLE: Presto Configuration Setting\nDESCRIPTION: Configuration option to enable compressed exchanges between Presto nodes for improved performance.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.165.rst#2025-04-10_snippet_1\n\nLANGUAGE: config\nCODE:\n```\nexchange.compression-enabled\n```\n\n----------------------------------------\n\nTITLE: Configuring GCS Credentials in Presto CLI\nDESCRIPTION: Command line example showing how to configure Google Cloud Storage credentials using a private key JSON file path in the Presto CLI.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.240.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npresto-cli --extra-credential hive.gcs.credentials.path=\"${PRIVATE_KEY_JSON_PATH}\"\n```\n\n----------------------------------------\n\nTITLE: Setting Default View Security Mode\nDESCRIPTION: Shows how to set the default security mode for view creation to INVOKER using session settings.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/create-view.rst#2025-04-10_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nSET SESSION default_view_security_mode='INVOKER'\n```\n\n----------------------------------------\n\nTITLE: Configuring GCS Credentials in Presto CLI\nDESCRIPTION: Command line example showing how to configure Google Cloud Storage credentials using a private key JSON file path in the Presto CLI.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.240.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npresto-cli --extra-credential hive.gcs.credentials.path=\"${PRIVATE_KEY_JSON_PATH}\"\n```\n\n----------------------------------------\n\nTITLE: Installing Homebrew on Apple Silicon Mac\nDESCRIPTION: Command to install Homebrew on an Apple Silicon Mac, which is required before installing Presto. This installs Homebrew into /usr/local/bin.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/installation/deploy-brew.rst.txt#2025-04-10_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\narch -x86_64 /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)\"\n```\n\n----------------------------------------\n\nTITLE: Using min_by and max_by Aggregations in Presto\nDESCRIPTION: This snippet mentions an enhancement to the min_by and max_by aggregation functions in Presto, which now have an additional form that can return multiple values.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.122.rst.txt#2025-04-10_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nmin_by(...), max_by(...)\n```\n\n----------------------------------------\n\nTITLE: Configuring Secure Random Algorithm\nDESCRIPTION: Setting to configure the random number generator algorithm for improved TLS performance.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/security/internal-communication.rst#2025-04-10_snippet_12\n\nLANGUAGE: none\nCODE:\n```\nhttp-server.https.secure-random-algorithm=SHA1PRNG\n```\n\n----------------------------------------\n\nTITLE: Documenting JSON Function References in reStructuredText\nDESCRIPTION: Documentation syntax for referencing JSON-related functions json_parse and json_format using reStructuredText directives.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.135.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n:func:`!json_parse` and :func:`!json_format`\n```\n\nLANGUAGE: reStructuredText\nCODE:\n```\n:doc:`/release/release-0.122`\n```\n\n----------------------------------------\n\nTITLE: Creating TLS Certificate File\nDESCRIPTION: Command to create a certificate file for MongoDB TLS configuration\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/mongodb.rst.txt#2025-04-10_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ntouch /etc/pki/ca-trust/source/anchors/mongo.prod-cluster.crt\n```\n\n----------------------------------------\n\nTITLE: Accessing Dynamic Array Index in Presto SQL\nDESCRIPTION: Demonstrates how to use the subscript operator in Presto to access a dynamic index of an array, which supports full expressions unlike Hive.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/migration/from-hive.rst#2025-04-10_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT my_array[CARDINALITY(my_array)] as last_element\nFROM ...\n```\n\n----------------------------------------\n\nTITLE: SQL Function Reference - zip Enhancement\nDESCRIPTION: Extended zip function to support up to 7 arguments for combining multiple arrays.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.256.rst#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nzip\n```\n\n----------------------------------------\n\nTITLE: Using map_union_sum Aggregation Function in Presto\nDESCRIPTION: Highlights the introduction of the new map_union_sum aggregation function in Presto 0.248. This function is referenced as one of the key features of this release.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.248.rst#2025-04-10_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n:func:`!map_union_sum`\n```\n\n----------------------------------------\n\nTITLE: Displaying Result of Joined Table Value Constructors\nDESCRIPTION: Shows the output of joining two inline tables created with VALUES clauses. The result demonstrates how the tables are joined on the 'letter' column.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.61.rst#2025-04-10_snippet_3\n\nLANGUAGE: none\nCODE:\n```\nletter | animal | letter |  fruit\n--------+--------+--------+---------\na      | ape    | a      | apple\nb      | bear   | b      | banana\n(2 rows)\n```\n\n----------------------------------------\n\nTITLE: Adding Presto JDBC Driver Dependency in Maven\nDESCRIPTION: This XML snippet shows how to add the Presto JDBC driver as a dependency in a Maven project. It specifies the groupId, artifactId, and version of the driver.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/installation/jdbc.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>com.facebook.presto</groupId>\n    <artifactId>presto-jdbc</artifactId>\n    <version>\\ |version|\\ </version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Using IF NOT EXISTS with CREATE TABLE in Presto SQL\nDESCRIPTION: Shows the new basic support for IF NOT EXISTS clause when creating tables, which prevents errors when the table already exists.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.111.rst#2025-04-10_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE\n```\n\n----------------------------------------\n\nTITLE: SQL Function Addition - New Binary Functions\nDESCRIPTION: New functions added for hash computation and big-endian conversion.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.162.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nxxhash64()\nto_big_endian_64()\n```\n\n----------------------------------------\n\nTITLE: Basic DELETE Statement Syntax\nDESCRIPTION: Shows the basic syntax structure for DELETE operations in PrestoDB SQL.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/delete.rst#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nDELETE FROM table_name [ WHERE condition ]\n```\n\n----------------------------------------\n\nTITLE: Cache Configuration Properties\nDESCRIPTION: Configuration properties for specifying cache quota scope and default cache quota, working with FILE_MERGE cache type.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.237.rst#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\ncache.cache-quota-scope\ncache.default-cache-quota\n```\n\n----------------------------------------\n\nTITLE: Adding Weibull Distribution Functions in SQL\nDESCRIPTION: New SQL functions added for Weibull distribution calculations: weibull_cdf for cumulative distribution function and inverse_weibull_cdf for inverse cumulative distribution function.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.259.rst#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nweibull_cdf\n```\n\nLANGUAGE: sql\nCODE:\n```\ninverse_weibull_cdf\n```\n\n----------------------------------------\n\nTITLE: SQL Table Creation Commands\nDESCRIPTION: References to CREATE TABLE commands that had metadata issues fixed for better table readability.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.112.rst#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE\n```\n\n----------------------------------------\n\nTITLE: Avoiding Out of Bounds Array Access in Presto SQL\nDESCRIPTION: Shows how to use an IF statement to safely access array elements and avoid out of bounds exceptions in Presto.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/migration/from-hive.rst#2025-04-10_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT IF(CARDINALITY(my_array) >= 3, my_array[3], NULL)\nFROM ...\n```\n\n----------------------------------------\n\nTITLE: Setting Up Alluxio Client in Hive Environment\nDESCRIPTION: Configuration for adding Alluxio client jar to Hive's auxiliary classpath in hive-env.sh\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/cache/service.rst#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport HIVE_AUX_JARS_PATH=${ALLUXIO_HOME}/client/alluxio-<VERSION>-client.jar\n```\n\n----------------------------------------\n\nTITLE: Installing Presto on Apple Silicon Mac\nDESCRIPTION: Command to install Presto on an Apple Silicon Mac using Homebrew with the x86_64 architecture flag.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/installation/deploy-brew.rst.txt#2025-04-10_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\narch -x86_64 brew install prestodb\n```\n\n----------------------------------------\n\nTITLE: Array Normalize Function Reference\nDESCRIPTION: Function that normalizes an array by dividing each element by its p-norm.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.255.rst#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\narray_normalize\n```\n\n----------------------------------------\n\nTITLE: SQL String Escaping Example\nDESCRIPTION: Demonstration of double quote escaping in column domain values, where literal double quotes are escaped with backslash.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.256.rst#2025-04-10_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nab\\\"c\n```\n\n----------------------------------------\n\nTITLE: Configuring Example HTTP Connector in Presto\nDESCRIPTION: This snippet shows how to configure the new Example HTTP connector in Presto. It demonstrates setting up the connector.name and metadata-uri properties in the example.properties file to mount the example-http connector as the example catalog.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.54.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: none\nCODE:\n```\nconnector.name=example-http\nmetadata-uri=http://s3.amazonaws.com/presto-example/v1/example-metadata.json\n```\n\n----------------------------------------\n\nTITLE: Adding an Empty Partition to a Hive Table\nDESCRIPTION: Shows how to add an empty partition to a Hive table using the system.create_empty_partition procedure. This creates the partition metadata without requiring data to be loaded.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/hive.rst.txt#2025-04-10_snippet_17\n\nLANGUAGE: sql\nCODE:\n```\nCALL system.create_empty_partition(\n    schema_name => 'web',\n    table_name => 'page_views',\n    partition_columns => ARRAY['ds', 'country'],\n    partition_values => ARRAY['2016-08-09', 'US']);\n```\n\n----------------------------------------\n\nTITLE: Presto Redundant Sort Optimization Configuration\nDESCRIPTION: Configuration property and session property to control the optimization that removes unnecessary limits and order by clauses in queries. This feature is enabled by default but can be disabled using these properties.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.246.rst#2025-04-10_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\noptimizer.skip-redundant-sort\n```\n\nLANGUAGE: sql\nCODE:\n```\nskip_redundant_sort\n```\n\n----------------------------------------\n\nTITLE: SQL NULL Type Functions\nDESCRIPTION: Reference to functions supporting array_type and row_type containing NULL values in checksum aggregation.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.156.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nchecksum\n```\n\n----------------------------------------\n\nTITLE: Adding Redis Provider FileSet to Presto Assembly\nDESCRIPTION: XML configuration to register the Redis HBO Provider plugin in the Presto server assembly\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/plugin/redis-hbo-provider.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n<fileSet>\n   <directory>${project.build.directory}/dependency/redis-hbo-provider-${project.version}</directory>\n   <outputDirectory>plugin/redis-hbo-provider</outputDirectory>\n</fileSet>\n```\n\n----------------------------------------\n\nTITLE: Configuring Max Total Running Task Count in Presto\nDESCRIPTION: Sets a configuration property to cap the number of total tasks running in a coordinator by pausing scheduling, improving coordinator reliability.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.234.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nexperimental.max-total-running-task-count-to-not-execute-new-query\n```\n\n----------------------------------------\n\nTITLE: Configuring CTE Hash Partition Count in Presto SQL\nDESCRIPTION: Specifies the number of buckets or writers to be used when using CTE Materialization. This is controlled by the 'cte_hash_partition_count' session property.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.286.rst#2025-04-10_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\nSET SESSION cte_hash_partition_count = 10;\n```\n\n----------------------------------------\n\nTITLE: Configuring CTE Hash Partition Count in Presto SQL\nDESCRIPTION: Specifies the number of buckets or writers to be used when using CTE Materialization. This is controlled by the 'cte_hash_partition_count' session property.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.286.rst#2025-04-10_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\nSET SESSION cte_hash_partition_count = 10;\n```\n\n----------------------------------------\n\nTITLE: Adding Note Block in RST\nDESCRIPTION: RST syntax for creating a note block. This note warns about backwards incompatibility with the previous connector SPI and advises updating code before deploying the release.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.134.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. note::\n    This is a backwards incompatible change with the previous connector SPI.\n    If you have written a connector and have not yet updated to the\n    ``TableLayout`` API, you will need to update your code before deploying\n    this release.\n```\n\n----------------------------------------\n\nTITLE: Configuring Hudi Max Outstanding Splits in Presto SQL\nDESCRIPTION: Sets the session property to control the maximum outstanding splits in a batch enqueued for processing in the Hudi connector.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.281.rst#2025-04-10_snippet_6\n\nLANGUAGE: SQL\nCODE:\n```\nSET SESSION hudi.max-outstanding-splits = <value>;\n```\n\n----------------------------------------\n\nTITLE: Base64 Plan Fragment Example\nDESCRIPTION: Example showing how SerializedPage format is used in Presto query plans when representing constant array values, demonstrating the use of base64 encoding for binary data in plan fragments.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/develop/serialized-page.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n- Project[projectLocality = LOCAL] => [expr:array(integer)]\n        Estimates: {rows: 1 (51B), cpu: 51.00, memory: 0.00, network: 0.00}\n        expr := [Block: position count: 3; size: 92 bytes]\n```\n\n----------------------------------------\n\nTITLE: Creating External Accumulo Table in Presto SQL\nDESCRIPTION: SQL statement to create an external table in Presto that maps to an existing Accumulo table. This is used when converting from an internal to an external table representation.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/accumulo.rst#2025-04-10_snippet_28\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE foo.bar (\n  a VARCHAR,\n  b BIGINT,\n  c DATE\n)\nWITH (\n  column_mapping = 'a:a:a,b:b:b,c:c:c',\n  index_columns = 'b,c',\n  external = true\n);\n```\n\n----------------------------------------\n\nTITLE: Starting Presto Server\nDESCRIPTION: This command starts the Presto server using the launcher script.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/installation/deployment.rst.txt#2025-04-10_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\n./bin/launcher start\n```\n\n----------------------------------------\n\nTITLE: SQL Function Reference - GROUPING SETS Example\nDESCRIPTION: Example of SQL syntax that contains a bug affecting SORT and LIMIT operations when used with GROUPING SETS, CUBE, or ROLLUP functions.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.247.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nGROUPING SETS (())\n```\n\n----------------------------------------\n\nTITLE: Referencing UUID Type in reStructuredText\nDESCRIPTION: This snippet shows how to create a reference to the 'uuid_type' in reStructuredText format, likely linking to a more detailed explanation elsewhere in the documentation.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.260.rst#2025-04-10_snippet_1\n\nLANGUAGE: reStructuredText\nCODE:\n```\n:ref:`uuid_type`\n```\n\n----------------------------------------\n\nTITLE: HDFS Client Configuration\nDESCRIPTION: Configuration for specifying additional HDFS client options, necessary for federated HDFS or NameNode high availability setups.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/hive.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\nhive.config.resources=/etc/hadoop/conf/core-site.xml,/etc/hadoop/conf/hdfs-site.xml\n```\n\n----------------------------------------\n\nTITLE: Merging Existing Reservoir Sample with New Data in Presto SQL\nDESCRIPTION: This example shows how to merge an existing reservoir sample with new data using the reservoir_sample function, maintaining a fixed sample size of 3.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/aggregate.rst.txt#2025-04-10_snippet_15\n\nLANGUAGE: sql\nCODE:\n```\nWITH initial_sample as (\n    SELECT\n        reservoir_sample(NULL, 0, col, 3) as reservoir\n    FROM (\n        VALUES\n        0, 1, 2, 3, 4\n    ) as t(col)\n),\nnew_sample as (\n    SELECT\n        reservoir_sample(\n            (SELECT reservoir.sample FROM initial_sample), \n            (SELECT reservoir.processed_count FROM initial_sample), \n            col, \n            3\n        ) as result\n    FROM (\n        VALUES\n        5, 6, 7, 8, 9\n    ) as t(col)\n)\nSELECT \n    result.processed_count, result.sample\nFROM new_sample;\n```\n\n----------------------------------------\n\nTITLE: Verifying Java Keystore File Contents\nDESCRIPTION: This command uses keytool to verify the password for a keystore file and view its contents. It's useful for troubleshooting TLS configuration issues.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/security/tls.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: none\nCODE:\n```\n$ keytool -list -v -keystore /etc/presto/presto.jks\n```\n\n----------------------------------------\n\nTITLE: Handling Out of Bounds Indices with json_array_get in Presto\nDESCRIPTION: Examples showing how json_array_get handles out-of-bounds indices by returning null for empty arrays or indices outside array bounds.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/json.rst.txt#2025-04-10_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nSELECT json_array_get('[]', 0); -- null\nSELECT json_array_get('[\"a\", \"b\", \"c\"]', 10); -- null\nSELECT json_array_get('[\"c\", \"b\", \"a\"]', -10); -- null\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom S3 Encryption Materials Provider in Hive Connector\nDESCRIPTION: Configures a custom S3 encryption materials provider using the 'hive.s3.encryption-materials-provider' property in the Hive connector.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.153.rst.txt#2025-04-10_snippet_3\n\nLANGUAGE: Properties\nCODE:\n```\nhive.s3.encryption-materials-provider=com.example.CustomEncryptionMaterialsProvider\n```\n\n----------------------------------------\n\nTITLE: Configuring Ignored Functions for Verifier Auto-Resolution\nDESCRIPTION: Setting to specify functions that should be ignored when auto-resolving result mismatches in the Presto Verifier. This allows for more flexible comparison of query results.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.236.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nSET ignored-functions.functions = 'function1,function2,function3';\n```\n\n----------------------------------------\n\nTITLE: Presto Spilling Strategy Configuration\nDESCRIPTION: Spilling strategy configuration for Presto that enables a listener-based revocation model when using PER_TASK_MEMORY_THRESHOLD strategy. This helps manage memory consumption when queries exceed available memory.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.246.rst#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nPER_TASK_MEMORY_THRESHOLD\n```\n\n----------------------------------------\n\nTITLE: Adding arbitrary aggregation function in SQL\nDESCRIPTION: The arbitrary() aggregation function was added to Presto. This function returns an arbitrary non-null value of the input values.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.88.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\narbitrary()\n```\n\n----------------------------------------\n\nTITLE: Worker Information Response Example\nDESCRIPTION: Sample JSON response from the v1/info endpoint showing basic information about the Presto C++ worker including environment, version, and uptime status.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/presto_cpp/features.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n{\"coordinator\":false,\"environment\":\"testing\",\"nodeVersion\":{\"version\":\"testversion\"},\"starting\":false,\"uptime\":\"49.00s\"}\n```\n\n----------------------------------------\n\nTITLE: Installing Docker and Colima using Homebrew\nDESCRIPTION: Command to install Docker and Colima tools using Homebrew. These are required for running Docker containers on Mac OS X.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/installation/deploy-docker.rst#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbrew install docker colima\n```\n\n----------------------------------------\n\nTITLE: Retrieving Node List from Presto Server\nDESCRIPTION: This endpoint returns a list of nodes known to a Presto Server. It provides information about each node's status, recent requests, failures, and other statistics. The response includes decaying counters for recent activity and details about the node's uptime and usage.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/rest/node.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nVary: Accept\nContent-Type: text/javascript\n\n[\n   {\n      \"uri\":\"http://10.209.57.156:8080\",\n      \"recentRequests\":25.181940555111073,\n      \"recentFailures\":0.0,\n      \"recentSuccesses\":25.195472984170983,\n      \"lastRequestTime\":\"2013-12-22T13:32:44.673-05:00\",\n      \"lastResponseTime\":\"2013-12-22T13:32:44.677-05:00\",\n      \"age\":\"14155.28ms\",\n      \"recentFailureRatio\":0.0,\n      \"recentFailuresByType\":{}\n   }\n]\n```\n\n----------------------------------------\n\nTITLE: Enabling ORC Row Group Index Caching for Hive and Iceberg in PrestoDB\nDESCRIPTION: Configuration parameters to enable in-memory ORC stripe row group index caching for Hive and Iceberg connectors. Settings control cache enablement, size limits, and time-to-live (TTL) values.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.268.rst#2025-04-10_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\norc.row-group-index-cache-enabled = true\norc.row-group-index-cache-size = <size>\norc.row-group-index-cache-ttl-since-last-access = <ttl>\n```\n\n----------------------------------------\n\nTITLE: Inverse Weibull CDF Function\nDESCRIPTION: Computes inverse of Weibull cumulative distribution function with parameters a and b for probability p. Requires positive a and b values, with p in [0,1].\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/math.rst.txt#2025-04-10_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\ninverse_weibull_cdf(a, b, p) -> double\n```\n\n----------------------------------------\n\nTITLE: Computing KLL Sketch with Custom K Parameter in Presto SQL\nDESCRIPTION: Computes a KLL Sketch using a custom K parameter. K must be in the range [8..65535] and controls the accuracy and storage consumption of the sketch.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/sketch.rst.txt#2025-04-10_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\nsketch_kll_with_k[T](x: T, k: int) -> kllsketch[T]\n```\n\n----------------------------------------\n\nTITLE: Session Processing Optimization Settings in Presto 0.149\nDESCRIPTION: Session properties for processing optimization, consolidated from separate columnar processing properties into a single property with three possible values.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.149.rst#2025-04-10_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\nprocessing_optimization=disabled|columnar|columnar_dictionary\n```\n\n----------------------------------------\n\nTITLE: MongoDB Field Definition Structure\nDESCRIPTION: JSON structure for defining individual fields in MongoDB schema collections.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/mongodb.rst.txt#2025-04-10_snippet_10\n\nLANGUAGE: none\nCODE:\n```\n{\n    \"name\": ...,\n    \"type\": ...,\n    \"hidden\": ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining RST Table of Contents for Presto Developer Guide\nDESCRIPTION: ReStructuredText directive defining the table of contents structure for the Presto developer documentation, listing all available sections with maxdepth of 1.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/develop.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n    :maxdepth: 1\n\n    develop/spi-overview\n    develop/connectors\n    develop/example-http\n    develop/delete-and-update\n    develop/types\n    develop/functions\n    develop/system-access-control\n    develop/password-authenticator\n    develop/event-listener\n    develop/client-protocol\n    develop/worker-protocol\n    develop/serialized-page\n    develop/presto-console\n    develop/presto-authenticator\n    develop/client-request-filter\n```\n\n----------------------------------------\n\nTITLE: SQL NOT NULL Constraint Syntax\nDESCRIPTION: Example of NOT NULL constraint usage in CREATE TABLE and ALTER TABLE statements for Hive connector\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.288.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE example (\\n  column_name data_type NOT NULL\\n)\n```\n\n----------------------------------------\n\nTITLE: SQL String Literal Examples\nDESCRIPTION: Examples of SQL string literals including simple strings, Unicode strings with default and custom escape characters, and strings with escaped single quotes.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/language/types.rst#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n'Hello winter !'\nU&'Hello winter \\2603 !'\nU&'Hello winter #2603 !' UESCAPE '#'\n'It''s a beautiful day!'\n```\n\n----------------------------------------\n\nTITLE: Initializing Hive Metastore Schema\nDESCRIPTION: This snippet shows how to initialize a new Hive Metastore schema using the schematool command.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/installation/deployment.rst.txt#2025-04-10_snippet_12\n\nLANGUAGE: console\nCODE:\n```\nexport HIVE_HOME=`pwd`\ncp conf/hive-default.xml.template conf/hive-site.xml\nmkdir -p hcatalog/var/log/\nbin/schematool -dbType derby -initSchema\n```\n\n----------------------------------------\n\nTITLE: Grep Command for Tracing Exchange Protocol Interaction\nDESCRIPTION: Example grep command to filter and display logs related to a specific exchange protocol interaction in Presto.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/develop/worker-protocol.rst#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncat stderr* | grep '/v1/task/20240402_223203_00000_kg5tr.11.0.455.0/results'\n```\n\n----------------------------------------\n\nTITLE: Quoting Numeric Identifiers in Presto SQL\nDESCRIPTION: Shows how to properly quote identifiers that start with numbers in Presto, which is required for ANSI SQL compliance.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/migration/from-hive.rst.txt#2025-04-10_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT *\nFROM \"7day_active\"\n```\n\n----------------------------------------\n\nTITLE: Configuring min_by and max_by Window Functions\nDESCRIPTION: Configuration related to fixing a bug for min_by and max_by window functions where results were incorrect when specifying number of elements to keep and the window does not have \"unbounded following\" in the frame.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.286.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nmin_by\n```\n\nLANGUAGE: sql\nCODE:\n```\nmax_by\n```\n\n----------------------------------------\n\nTITLE: Timestamp to String Formatting Function\nDESCRIPTION: Converts a timestamp to a formatted string using Teradata-compatible format specifiers.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/teradata.rst.txt#2025-04-10_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nto_char(timestamp, format) -> varchar\n```\n\n----------------------------------------\n\nTITLE: MySQL Create Table as Select\nDESCRIPTION: Example of creating a new table by copying data from an existing table.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/mysql.rst.txt#2025-04-10_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE mysql.web.page_views_new AS SELECT * FROM mysql.web.page_views;\n```\n\n----------------------------------------\n\nTITLE: Configuring Event Output Stage Size in Presto\nDESCRIPTION: This snippet shows how to configure the maximum size of the output stage JSON in completion events. It uses the event.max-output-stage-size configuration property.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.144.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nevent.max-output-stage-size\n```\n\n----------------------------------------\n\nTITLE: Creating Empty Password File for Presto\nDESCRIPTION: This command creates an empty password file to be used with Presto's password file authentication system.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/security/password-file.rst.txt#2025-04-10_snippet_4\n\nLANGUAGE: none\nCODE:\n```\ntouch password.db\n```\n\n----------------------------------------\n\nTITLE: Inserting Data into String-Serialized Presto Accumulo Table\nDESCRIPTION: This SQL snippet inserts the same sample data as before into the 'stringy_scientists' table, which uses the string serializer for Accumulo.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/accumulo.rst.txt#2025-04-10_snippet_26\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO myschema.stringy_scientists VALUES\n('row1', 'Grace Hopper', 109, DATE '1906-12-09' ),\n('row2', 'Alan Turing', 103, DATE '1912-06-23' );\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS S3 Access Key with Environment Variable in Presto\nDESCRIPTION: Demonstrates how to reference an environment variable for sensitive data in Presto configuration files. This pattern allows storing credentials like AWS access keys as environment variables rather than hardcoding them in configuration files for improved security.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/presto_cpp/properties.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\nhive.s3.aws-access-key=${AWS_S3_ACCESS_KEY}\n```\n\n----------------------------------------\n\nTITLE: TDigest Type Definition\nDESCRIPTION: Alternative to QDigest for representing approximate distribution of numbers, optimized for better performance but limited to DOUBLE type data.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/language/types.rst.txt#2025-04-10_snippet_8\n\nLANGUAGE: text\nCODE:\n```\nTDigest\n```\n\n----------------------------------------\n\nTITLE: Unicode Normalization Forms in PrestoDB SQL\nDESCRIPTION: Lists the available normalization forms for Unicode string transformation. Includes NFD, NFC, NFKD, and NFKC forms with their descriptions.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/string.rst#2025-04-10_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\n======== ===========\nForm     Description\n======== ===========\n`NFD`    Canonical Decomposition\n`NFC`    Canonical Decomposition, followed by Canonical Composition\n`NFKD`   Compatibility Decomposition\n`NFKC`   Compatibility Decomposition, followed by Canonical Composition\n======== ===========\n```\n\n----------------------------------------\n\nTITLE: Setting Temp Storage Buffer Size in Presto\nDESCRIPTION: Defines the buffer size used when experimental.spiller.single-stream-spiller-choice is set to TEMP_STORAGE. Controls the amount of memory used for buffering data during spilling operations.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/admin/properties.rst#2025-04-10_snippet_22\n\nLANGUAGE: properties\nCODE:\n```\nexperimental.temp-storage-buffer-size\n```\n\n----------------------------------------\n\nTITLE: String Concatenation in Presto SQL\nDESCRIPTION: Illustrates the use of the standard ANSI SQL string concatenation operator in Presto.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/migration/from-hive.rst#2025-04-10_snippet_5\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT a || b || c\nFROM ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Adaptive Partial Aggregation in Presto SQL\nDESCRIPTION: Enables adaptive partial aggregation to improve query performance in certain scenarios. This feature is controlled by the 'adaptive_partial_aggregation' session property and is disabled by default.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.286.rst#2025-04-10_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSET SESSION adaptive_partial_aggregation = true;\n```\n\n----------------------------------------\n\nTITLE: SQL substring Function\nDESCRIPTION: Added the substring function for string manipulation.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.142.rst.txt#2025-04-10_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nsubstring\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents for Presto Installation in reStructuredText\nDESCRIPTION: This snippet defines a table of contents using reStructuredText syntax, listing various installation and deployment options for Presto. It includes links to documentation for deployment, CLI, JDBC, benchmark driver, Tableau, Spark, Docker, Homebrew, and Helm installations.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/installation.rst#2025-04-10_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n    :maxdepth: 1\n\n    installation/deployment\n    installation/cli\n    installation/jdbc\n    installation/benchmark-driver\n    installation/tableau\n    installation/spark\n    installation/deploy-docker\n    installation/deploy-brew\n    installation/deploy-helm\n```\n\n----------------------------------------\n\nTITLE: Safely Accessing Array Elements in Presto SQL\nDESCRIPTION: Shows how to avoid out-of-bounds array access exceptions in Presto using an IF statement.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/migration/from-hive.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT IF(CARDINALITY(my_array) >= 3, my_array[3], NULL)\nFROM ...\n```\n\n----------------------------------------\n\nTITLE: Using row_number window function with LIMIT in SQL\nDESCRIPTION: A bug was fixed that could cause queries using row_number() window function with LIMIT clause to never terminate.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.88.rst.txt#2025-04-10_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nrow_number()\n```\n\n----------------------------------------\n\nTITLE: Using find_first UDF in Presto SQL\nDESCRIPTION: The find_first UDF finds the first array element that matches a predicate. This function was added in Presto 0.277.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.277.rst#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nfind_first\n```\n\n----------------------------------------\n\nTITLE: Retrieving Coordinate Dimension of Geometry in Presto SQL\nDESCRIPTION: Returns the coordinate dimension of the geometry.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/geospatial.rst.txt#2025-04-10_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\nST_CoordDim(Geometry) -> bigint\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Presto Router Properties\nDESCRIPTION: Basic configuration properties for the Presto Router web service, including HTTP port settings and log management options.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/router/deployment.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\nhttp-server.http.port=8080\nhttp-server.log.max-history=3\nhttp-server.log.max-size=500MB\nrouter.config-file=etc/router-config.json\n```\n\n----------------------------------------\n\nTITLE: Integer Division in Presto SQL\nDESCRIPTION: Shows how to perform floating-point division on integers in Presto by casting one operand to DOUBLE.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/migration/from-hive.rst.txt#2025-04-10_snippet_7\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT CAST(5 AS DOUBLE) / 2\n```\n\n----------------------------------------\n\nTITLE: Applying Equality Deletes as Joins in Iceberg Connector\nDESCRIPTION: Enables the application of equality deletes as a join in the Iceberg connector. This optimization is controlled by the 'iceberg.delete_as_join_rewrite_enabled' session property and is enabled by default.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.286.rst#2025-04-10_snippet_8\n\nLANGUAGE: SQL\nCODE:\n```\nSET SESSION iceberg.delete_as_join_rewrite_enabled = true;\n```\n\n----------------------------------------\n\nTITLE: Basic Aggregation Query Example in Presto SQL\nDESCRIPTION: Demonstrates a simple GROUP BY aggregation query that illustrates the use case for exchange materialization.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/admin/exchange-materialization.rst#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT custkey, SUM(totalprice)\nFROM orders\nGROUP BY custkey\n```\n\n----------------------------------------\n\nTITLE: Large Limit Query Pattern\nDESCRIPTION: Example of SQL query pattern that was fixed to handle LIMIT values greater than 2147483647 correctly.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.136.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nORDER BY LIMIT\n```\n\n----------------------------------------\n\nTITLE: Calculating Rank from KLL Sketch in Presto SQL\nDESCRIPTION: Computes the quantile that a particular value occurs at in the KLL sketch. Inclusivity parameter determines if the result includes probabilities for values equal to the given value.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/sketch.rst.txt#2025-04-10_snippet_6\n\nLANGUAGE: SQL\nCODE:\n```\nsketch_kll_rank[T](sketch: kllsketch[T], quantile: T[, inclusivity: boolean]) -> double\n```\n\n----------------------------------------\n\nTITLE: Configuring ORC Stream Buffer Size in Hive\nDESCRIPTION: This snippet shows how to configure the ORC stream buffer size in the Hive connector. It uses the hive.orc.stream-buffer-size configuration property to set the buffer size for ORC file reading.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.144.rst.txt#2025-04-10_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nhive.orc.stream-buffer-size\n```\n\n----------------------------------------\n\nTITLE: Renamed Hive Split Iterator Configuration in Presto\nDESCRIPTION: Updated parameter name for Hive split iterator threads configuration, replacing the deprecated parameters.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.103.rst#2025-04-10_snippet_3\n\nLANGUAGE: properties\nCODE:\n```\nhive.max-split-iterator-threads\n```\n\n----------------------------------------\n\nTITLE: Invalidating Directory List Cache in Hive Catalog\nDESCRIPTION: System procedure to invalidate the directory list cache in the Hive Catalog.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.287.rst.txt#2025-04-10_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nCALL system.invalidate_directory_list_cache();\n```\n\n----------------------------------------\n\nTITLE: Displaying Column Information in RST\nDESCRIPTION: RST syntax for referencing the 'show-columns' documentation page. This is used in the context of removing nullability and partition key flags from the SHOW COLUMNS command.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.134.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n:doc:`/sql/show-columns`\n```\n\n----------------------------------------\n\nTITLE: Iceberg Register and Unregister Procedures\nDESCRIPTION: New procedures for registering and unregistering Iceberg tables.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.286.rst.txt#2025-04-10_snippet_11\n\nLANGUAGE: sql\nCODE:\n```\nregister\n```\n\nLANGUAGE: sql\nCODE:\n```\nunregister\n```\n\n----------------------------------------\n\nTITLE: Using pinot_binary_decimal_to_double UDF in Presto SQL\nDESCRIPTION: The pinot_binary_decimal_to_double UDF transforms Pinot binary column data to Double type. This function was added in Presto 0.277 for the Pinot connector.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.277.rst#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\npinot_binary_decimal_to_double\n```\n\n----------------------------------------\n\nTITLE: Enabling Dynamic Split Sizes in Hive Connector\nDESCRIPTION: Session property for the Hive connector to enable dynamic split sizes based on data selected by the query.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.287.rst.txt#2025-04-10_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nSET SESSION hive.dynamic_split_sizes_enabled = true;\n```\n\n----------------------------------------\n\nTITLE: Columnar Processing Dictionary Setting\nDESCRIPTION: Configuration setting for enabling columnar processing with dictionary encoding.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.133.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\ncolumnar_processing_dictionary\n```\n\n----------------------------------------\n\nTITLE: Setting Plan Canonicalization Strategy for History-Based Optimization in Presto SQL\nDESCRIPTION: Specifies the plan canonicalization strategies to use for history-based optimization.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.287.rst#2025-04-10_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nSET SESSION history_optimization_plan_canonicalize_strategy = 'strategy_name';\n```\n\n----------------------------------------\n\nTITLE: Setting Time Zone for JDBC Timestamp Columns in Presto\nDESCRIPTION: Shows how to set the time zone used for timestamp columns when using the JDBC connector in Presto.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.272.rst#2025-04-10_snippet_5\n\nLANGUAGE: SQL\nCODE:\n```\n-- Example usage in JDBC connection string\njdbc:presto://example.net:8080/hive/sales?timeZoneID=America/New_York\n```\n\n----------------------------------------\n\nTITLE: Demonstrating WITH ORDINALITY usage with UNNEST in Presto SQL\nDESCRIPTION: Shows the new feature of using WITH ORDINALITY with UNNEST to generate an additional ordinality column that displays the position of each element in the array.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.100.rst#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nUNNEST ... WITH ORDINALITY\n```\n\n----------------------------------------\n\nTITLE: Referencing ORDER BY Aggregation Fix in Presto 0.263.1\nDESCRIPTION: Mentions a fix for a correctness issue related to ORDER BY aggregation when spilling is enabled. The fix is referenced by pull request number 16848.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.263.1.rst#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* Fix a correctness issue around ``ORDER BY`` aggregation when spilling is enabled. (:pr:`16848`)\n```\n\n----------------------------------------\n\nTITLE: Prometheus Metrics Format Example\nDESCRIPTION: Sample output from the v1/info/metrics endpoint showing Prometheus Data Format for worker metrics including HTTP requests, memory statistics, and Velox driver metrics.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/presto_cpp/features.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n# TYPE presto_cpp_num_http_request counter\npresto_cpp_num_http_request{cluster=\"testing\",worker=\"\"} 0\n# TYPE presto_cpp_num_http_request_error counter\npresto_cpp_num_http_request_error{cluster=\"testing\",worker=\"\"} 0\n# TYPE presto_cpp_memory_pushback_count counter\npresto_cpp_memory_pushback_count{cluster=\"testing\",worker=\"\"} 0\n# TYPE velox_driver_yield_count counter\nvelox_driver_yield_count{cluster=\"testing\",worker=\"\"} 0\n# TYPE velox_cache_shrink_count counter\nvelox_cache_shrink_count{cluster=\"testing\",worker=\"\"} 0\n# TYPE velox_memory_cache_num_stale_entries counter\nvelox_memory_cache_num_stale_entries{cluster=\"testing\",worker=\"\"} 0\n# TYPE velox_arbitrator_requests_count counter\nvelox_arbitrator_requests_count{cluster=\"testing\",worker=\"\"} 0\n```\n\n----------------------------------------\n\nTITLE: GROUP BY Using Column Name\nDESCRIPTION: Example of GROUP BY using the input column name. This query is equivalent to the previous one but uses the column name instead of position.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/sql/select.rst.txt#2025-04-10_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nSELECT count(*), nationkey FROM customer GROUP BY nationkey;\n```\n\n----------------------------------------\n\nTITLE: Expire Snapshots in Iceberg\nDESCRIPTION: Examples of removing old snapshots and their files from an Iceberg table using different criteria.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/iceberg.rst.txt#2025-04-10_snippet_29\n\nLANGUAGE: sql\nCODE:\n```\nCALL iceberg.system.expire_snapshots('schema_name', 'table_name', TIMESTAMP '2023-08-31 00:00:00.000', 10);\n```\n\nLANGUAGE: sql\nCODE:\n```\nCALL iceberg.system.expire_snapshots(schema => 'schema_name', table_name => 'table_name', snapshot_ids => ARRAY[10001, 10002]);\n```\n\n----------------------------------------\n\nTITLE: Formatting Release Version Header in reStructuredText\nDESCRIPTION: Defines the header for Presto release 0.244.1 using reStructuredText syntax. The header is underlined with '=' characters to create a section title.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.244.1.rst#2025-04-10_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n===============\nRelease 0.244.1\n===============\n```\n\n----------------------------------------\n\nTITLE: Converting HyperLogLog to P4HyperLogLog in Presto\nDESCRIPTION: Example of casting a HyperLogLog type to P4HyperLogLog type in Presto.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/hyperloglog.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\ncast(hll AS P4HyperLogLog)\n```\n\n----------------------------------------\n\nTITLE: Enabling Adaptive Join Side Switching in Presto on Spark\nDESCRIPTION: Activates an optimization to switch the build and probe sides of a join at runtime when a query runs with adaptive execution in Presto on Spark. This can be enabled via session property or configuration property.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.283.rst#2025-04-10_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\nadaptive_join_side_switching_enabeld = true\n```\n\nLANGUAGE: properties\nCODE:\n```\noptimizer.adaptive-join-side-switching-enabled = true\n```\n\n----------------------------------------\n\nTITLE: SQL Keyword Change and Function Reference\nDESCRIPTION: Modification to make AT a non-reserved keyword and reference to transform function optimization.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.165.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nAT\n```\n\nLANGUAGE: sql\nCODE:\n```\ntransform()\n```\n\n----------------------------------------\n\nTITLE: Presto Configuration Properties\nDESCRIPTION: Configuration properties for controlling stage retries, scheduler behavior, resource group reloading, and communication protocols.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.232.rst#2025-04-10_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\nmax-stage-retries\nuse-legacy-scheduler\nresource-groups.reload-refresh-interval\ninternal-communication.task-communication-protocol\ninternal-communication.server-info-communication-protocol\nexperimental-functions-enabled\n```\n\n----------------------------------------\n\nTITLE: Fixed Histogram MLE Differential Entropy Calculation\nDESCRIPTION: Example of calculating differential entropy using fixed histogram with maximum likelihood estimation, specifying value bounds between -2.0 and 2.0.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/aggregate.rst.txt#2025-04-10_snippet_11\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n    differential_entropy(1000000, x, weight, 'fixed_histogram_mle', -2.0, 2.0)\nFROM\n    data\n```\n\n----------------------------------------\n\nTITLE: Starting Hive Metastore (Bash)\nDESCRIPTION: This command starts the Hive Metastore service after configuration changes.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/cache/service.rst.txt#2025-04-10_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ ${HIVE_HOME}/hcatalog/sbin/hcat_server.sh start\n```\n\n----------------------------------------\n\nTITLE: SQL Cast Double to Decimal Example\nDESCRIPTION: Example showing the fixed behavior of casting from DOUBLE to DECIMAL to conform with SQL standards.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.192.rst#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\ncast (double '100000000000000000000000000000000' as decimal(38))\n```\n\n----------------------------------------\n\nTITLE: Viewing Indexed Data in Accumulo\nDESCRIPTION: Shows the contents of the index table after data insertion, displaying how values are stored for each indexed column.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/accumulo.rst#2025-04-10_snippet_16\n\nLANGUAGE: none\nCODE:\n```\nroot@default> scan -t myschema.scientists_idx\n-21011 metadata_date:row2 []\n-23034 metadata_date:row1 []\n103 metadata_age:row2 []\n109 metadata_age:row1 []\nAlan Turing metadata_name:row2 []\nGrace Hopper metadata_name:row1 []\n```\n\n----------------------------------------\n\nTITLE: Dropping an External Hive Table in Presto\nDESCRIPTION: Demonstrates how to drop the external table 'request_logs'. This operation only removes the table metadata and does not delete the actual data in the external location.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/hive.rst#2025-04-10_snippet_21\n\nLANGUAGE: SQL\nCODE:\n```\nDROP TABLE hive.web.request_logs\n```\n\n----------------------------------------\n\nTITLE: Example Table Creation with Properties\nDESCRIPTION: Shows how to create a table with specific column mapping and indexing properties.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/accumulo.rst.txt#2025-04-10_snippet_22\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE myschema.scientists (\n  recordkey VARCHAR,\n  name VARCHAR,\n  age BIGINT,\n  birthday DATE\n)\nWITH (\n  column_mapping = 'name:metadata:name,age:metadata:age,birthday:metadata:date',\n  index_columns = 'name,age'\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring REST Catalog for Iceberg in Presto\nDESCRIPTION: Minimal configuration example for setting up an Iceberg REST catalog in Presto. This includes the connector name, catalog type, and the REST API endpoint URI.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/iceberg.rst#2025-04-10_snippet_5\n\nLANGUAGE: none\nCODE:\n```\nconnector.name=iceberg\niceberg.catalog.type=rest\niceberg.rest.uri=https://localhost:8181\n```\n\n----------------------------------------\n\nTITLE: Using Table Value Constructors in FROM Clause with JOINs\nDESCRIPTION: Demonstrates how to use VALUES clauses in the FROM clause to create multiple inline tables and join them. This example creates two tables (animal and fruit) and joins them on a common column.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.61.rst#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT *\nFROM (\n  VALUES\n    ('a', 'ape'),\n    ('b', 'bear')\n) AS animal (letter, animal)\nJOIN (\n  VALUES\n    ('a', 'apple'),\n    ('b', 'banana')\n) AS fruit (letter, fruit)\nUSING (letter);\n```\n\n----------------------------------------\n\nTITLE: New Method for Retrieving JDBC Connection Properties\nDESCRIPTION: Added getConnectionProperties method to PrestoConnection interface that allows retrieving connection properties after a connection has been established.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.259.rst#2025-04-10_snippet_2\n\nLANGUAGE: java\nCODE:\n```\ngetConnectionProperties\n```\n\n----------------------------------------\n\nTITLE: Configuration Property Example - Warn on NaN\nDESCRIPTION: Session property to enable warnings for operations that may produce NaN values\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.289.rst#2025-04-10_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\nwarn_on_possible_nans = true\n```\n\n----------------------------------------\n\nTITLE: Using JSON Format for EXPLAIN with LOGICAL and DISTRIBUTED Types in Presto SQL\nDESCRIPTION: New feature allowing EXPLAIN to output in JSON format when used with LOGICAL and DISTRIBUTED types, providing structured query plan information.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.237.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nEXPLAIN\n```\n\n----------------------------------------\n\nTITLE: Selecting Data from Iceberg Tables in Presto\nDESCRIPTION: Demonstrates basic SELECT operations from both version 1 and version 2 Iceberg tables. Both table versions support standard SQL queries in Presto.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/iceberg.rst#2025-04-10_snippet_46\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM iceberg.web.page_views;\n\nSELECT * FROM iceberg.web.page_views_v2;\n```\n\n----------------------------------------\n\nTITLE: Hive Connector Configuration Property\nDESCRIPTION: New session property for controlling partition overwrite behavior during insert queries in the Hive connector.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.204.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSET SESSION insert_existing_partitions_behavior = 'value'\n```\n\n----------------------------------------\n\nTITLE: Selecting Data from a Black Hole Connector Table\nDESCRIPTION: Example SQL query to count rows in a Black Hole connector table. This will always return zero for standard tables.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/blackhole.rst#2025-04-10_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSELECT count(*) FROM blackhole.test.nation;\n```\n\n----------------------------------------\n\nTITLE: Documenting General Changes in reStructuredText\nDESCRIPTION: Lists general changes in the release, specifically mentioning a fix for LambdaDefinitionExpression canonicalization related to Block constant handling.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.243.2.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\nGeneral Changes\n---------------\n* Fix LambdaDefinitionExpression canonicalization to correctly canonicalize Block constant (:issue:`15424`).\n```\n\n----------------------------------------\n\nTITLE: Parsing Data Size Examples in Presto\nDESCRIPTION: Examples showing how parse_presto_data_size() converts different string representations of data sizes into their numeric equivalents.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/functions/conversion.rst#2025-04-10_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSELECT parse_presto_data_size('1B'); -- 1\nSELECT parse_presto_data_size('1kB'); -- 1024\nSELECT parse_presto_data_size('1MB'); -- 1048576\nSELECT parse_presto_data_size('2.3MB'); -- 2411724\n```\n\n----------------------------------------\n\nTITLE: Sample Pinot Schema Definition\nDESCRIPTION: Example JSON schema definition for a Meetup RSVP table in Pinot, showing dimension fields, metric fields, and time specification.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/pinot.rst#2025-04-10_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"schemaName\": \"meetupRsvp\",\n    \"dimensionFieldSpecs\": [\n      {\n        \"name\": \"venue_name\",\n        \"dataType\": \"STRING\"\n      },\n      {\n        \"name\": \"event_name\",\n        \"dataType\": \"STRING\"\n      },\n      {\n        \"name\": \"event_id\",\n        \"dataType\": \"STRING\"\n      },\n      {\n        \"name\": \"event_time\",\n        \"dataType\": \"LONG\"\n      },\n      {\n        \"name\": \"group_city\",\n        \"dataType\": \"STRING\"\n      },\n      {\n        \"name\": \"group_country\",\n        \"dataType\": \"STRING\"\n      },\n      {\n        \"name\": \"group_id\",\n        \"dataType\": \"LONG\"\n      },\n      {\n        \"name\": \"group_name\",\n        \"dataType\": \"STRING\"\n      }\n    ],\n    \"metricFieldSpecs\": [\n      {\n        \"name\": \"rsvp_count\",\n        \"dataType\": \"INT\"\n      }\n    ],\n    \"timeFieldSpec\": {\n      \"incomingGranularitySpec\": {\n        \"name\": \"mtime\",\n        \"dataType\": \"LONG\",\n        \"timeType\": \"MILLISECONDS\"\n      }\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Sample Pinot Schema Definition\nDESCRIPTION: Example JSON schema definition for a Meetup RSVP table in Pinot, showing dimension fields, metric fields, and time specification.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/pinot.rst#2025-04-10_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"schemaName\": \"meetupRsvp\",\n    \"dimensionFieldSpecs\": [\n      {\n        \"name\": \"venue_name\",\n        \"dataType\": \"STRING\"\n      },\n      {\n        \"name\": \"event_name\",\n        \"dataType\": \"STRING\"\n      },\n      {\n        \"name\": \"event_id\",\n        \"dataType\": \"STRING\"\n      },\n      {\n        \"name\": \"event_time\",\n        \"dataType\": \"LONG\"\n      },\n      {\n        \"name\": \"group_city\",\n        \"dataType\": \"STRING\"\n      },\n      {\n        \"name\": \"group_country\",\n        \"dataType\": \"STRING\"\n      },\n      {\n        \"name\": \"group_id\",\n        \"dataType\": \"LONG\"\n      },\n      {\n        \"name\": \"group_name\",\n        \"dataType\": \"STRING\"\n      }\n    ],\n    \"metricFieldSpecs\": [\n      {\n        \"name\": \"rsvp_count\",\n        \"dataType\": \"INT\"\n      }\n    ],\n    \"timeFieldSpec\": {\n      \"incomingGranularitySpec\": {\n        \"name\": \"mtime\",\n        \"dataType\": \"LONG\",\n        \"timeType\": \"MILLISECONDS\"\n      }\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Configuring ORC Buffer Size in Presto SQL\nDESCRIPTION: Sets the maximum size for a single ORC buffer to reduce heap fragmentation. This configuration favors smaller buffers for reading varchar and varbinary data, potentially increasing HDFS IOPS but improving memory management.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.94.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nhive.orc.max-buffer-size=8MB\n```\n\n----------------------------------------\n\nTITLE: Executing a Prepared Statement With Parameters in PrestoDB\nDESCRIPTION: Example showing how to execute a previously prepared statement named 'my_select2' with two parameter values: 1 and 3.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/execute.rst#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nEXECUTE my_select2 USING 1, 3;\n```\n\n----------------------------------------\n\nTITLE: Executing a Prepared Statement With Parameters in PrestoDB\nDESCRIPTION: Example showing how to execute a previously prepared statement named 'my_select2' with two parameter values: 1 and 3.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/execute.rst#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nEXECUTE my_select2 USING 1, 3;\n```\n\n----------------------------------------\n\nTITLE: Interpreter Fallback Configuration\nDESCRIPTION: Configuration property to enable interpreter fallback when bytecode compilation fails.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.90.rst#2025-04-10_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\ncompiler.interpreter-enabled=true\n```\n\n----------------------------------------\n\nTITLE: Set Table Property in Iceberg\nDESCRIPTION: Example of setting a table property for an Iceberg table using the system procedure.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/iceberg.rst.txt#2025-04-10_snippet_32\n\nLANGUAGE: sql\nCODE:\n```\nCALL iceberg.system.set_table_property('schema_name', 'table_name', 'commit.retry.num-retries', '10');\n```\n\n----------------------------------------\n\nTITLE: Querying JSON Data with Bracket Syntax in Presto SQL\nDESCRIPTION: Demonstrates the new square bracket syntax for json_extract and json_extract_scalar functions in Presto SQL. This allows for more flexible JSON path expressions, including paths with special characters.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.75.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT json_extract(json, '$.store[book]');\nSELECT json_extract(json, '$.store[\"book name\"]');\n```\n\n----------------------------------------\n\nTITLE: SQL Session Properties\nDESCRIPTION: Configuration properties for query optimization features\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.177.rst.txt#2025-04-10_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\npush_aggregation_through_join\npush_partial_aggregation_through_join\nfast_inequality_join\nstatistics_enabled\n```\n\n----------------------------------------\n\nTITLE: Using Histogram Function in Presto SQL\nDESCRIPTION: Shows the newly added histogram function which can be used for data analysis.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.111.rst#2025-04-10_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\n:func:`histogram`\n```\n\n----------------------------------------\n\nTITLE: Calculating Approximate Frequency in Presto SQL\nDESCRIPTION: The approx_most_frequent function computes the top frequent values up to a specified number of buckets approximately. It uses a stream summary data structure for efficient computation with configurable accuracy.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/aggregate.rst.txt#2025-04-10_snippet_12\n\nLANGUAGE: sql\nCODE:\n```\napprox_most_frequent(buckets, value, capacity) -> map<[same as value], bigint>\n```\n\n----------------------------------------\n\nTITLE: SQL Table Creation with IF NOT EXISTS\nDESCRIPTION: Shows the new basic support for IF NOT EXISTS clause in CREATE TABLE statements, which prevents errors when attempting to create a table that already exists.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.111.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE IF NOT EXISTS table_name\n```\n\n----------------------------------------\n\nTITLE: Inserting Data into Kudu Table via Presto\nDESCRIPTION: SQL statement to insert multiple rows of data into a Kudu table using Presto.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/kudu.rst#2025-04-10_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO kudu.default.users VALUES (1, 'Donald', 'Duck'), (2, 'Mickey', 'Mouse');\n```\n\n----------------------------------------\n\nTITLE: Analyze Specific Partitions Example\nDESCRIPTION: Example demonstrating how to analyze specific date partitions in a Hive partitioned table.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/analyze.rst#2025-04-10_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nANALYZE hive.default.sales WITH (partitions = ARRAY[ARRAY['1992-01-01'], ARRAY['1992-01-02']]);\n```\n\n----------------------------------------\n\nTITLE: Configuring Join Concurrency in Presto\nDESCRIPTION: Experimental configuration to increase concurrency for the probe side of joins. This can potentially improve join performance.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.139.rst.txt#2025-04-10_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\ntask.join-concurrency\n```\n\n----------------------------------------\n\nTITLE: New Session Property Configuration\nDESCRIPTION: Session property for controlling warning handling with three possible values: SUPPRESS, NORMAL, and AS_ERROR. Default value is NORMAL.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.237.rst#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nwarning_handling\n```\n\n----------------------------------------\n\nTITLE: SQL Function Reference - Spark Configuration\nDESCRIPTION: Configuration property for handling broadcast join failures and retry behavior in Spark.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.273.rst#2025-04-10_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nspark.retry-on-out-of-memory-broadcast-join-enabled\nspark_retry_on_out_of_memory_broadcast_join_enabled\n```\n\n----------------------------------------\n\nTITLE: Creating an External Presto Accumulo Table\nDESCRIPTION: This SQL snippet demonstrates how to create an external table in Presto for Accumulo. It defines the same structure as the internal table example, but adds the 'external = true' property and explicitly defines column mappings.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/accumulo.rst.txt#2025-04-10_snippet_30\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE foo.bar (\n  a VARCHAR,\n  b BIGINT,\n  c DATE\n)\nWITH (\n  column_mapping = 'a:a:a,b:b:b,c:c:c',\n  index_columns = 'b,c',\n  external = true\n);\n```\n\n----------------------------------------\n\nTITLE: Creating an External Presto Accumulo Table\nDESCRIPTION: This SQL snippet demonstrates how to create an external table in Presto for Accumulo. It defines the same structure as the internal table example, but adds the 'external = true' property and explicitly defines column mappings.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/accumulo.rst.txt#2025-04-10_snippet_30\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE foo.bar (\n  a VARCHAR,\n  b BIGINT,\n  c DATE\n)\nWITH (\n  column_mapping = 'a:a:a,b:b:b,c:c:c',\n  index_columns = 'b,c',\n  external = true\n);\n```\n\n----------------------------------------\n\nTITLE: Querying Iceberg Table Using Branch Name in PrestoDB\nDESCRIPTION: Shows how to query an Iceberg table by specifying a branch name using the FOR SYSTEM_VERSION AS OF clause. This retrieves data from a specific branch snapshot.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/iceberg.rst.txt#2025-04-10_snippet_61\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM nation FOR SYSTEM_VERSION AS OF 'testBranch';\n```\n\n----------------------------------------\n\nTITLE: Querying Row Number with Constraint in SQL\nDESCRIPTION: Fixes an issue where queries constraining the result of row_number() to be less than one would fail or produce incorrect results. This optimization has been corrected to handle such cases properly.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.193.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT * FROM (\n  SELECT row_number() OVER () AS rn, column1, column2\n  FROM table\n) WHERE rn < 1\n```\n\n----------------------------------------\n\nTITLE: Attaching Hive Metastore to Alluxio Catalog\nDESCRIPTION: Command for attaching an existing Hive metastore to the Alluxio Catalog Service. This enables Alluxio to manage and serve metadata from the Hive metastore to Presto.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/hive.rst.txt#2025-04-10_snippet_9\n\nLANGUAGE: none\nCODE:\n```\n./bin/alluxio table attachdb hive thrift://HOSTNAME:9083 hive_db_name\n```\n\n----------------------------------------\n\nTITLE: Hive Configuration Properties\nDESCRIPTION: Hive-specific configuration properties for Parquet reading and S3 filesystem handling\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.227.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nparquet_max_read_block_size\nhive.parquet.max-read-block-size\nhive.s3-file-system-type=HADOOP_DEFAULT\n```\n\n----------------------------------------\n\nTITLE: SHOW ROLES Command Syntax\nDESCRIPTION: SQL command syntax for displaying roles in Presto. Can be used to list all roles in a specific catalog or the current catalog, or to show currently enabled roles for the session.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/sql/show-roles.rst#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSHOW [CURRENT] ROLES [ FROM catalog ]\n```\n\n----------------------------------------\n\nTITLE: Using GROUPING SETS in SQL View Creation\nDESCRIPTION: Fixes an issue with creating views for queries containing GROUPING SETS in Presto SQL, improving support for complex aggregation scenarios in views.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.152.rst.txt#2025-04-10_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE VIEW ... AS SELECT ... GROUPING SETS (...)\n```\n\n----------------------------------------\n\nTITLE: Using to_utf8 Function in Presto SQL\nDESCRIPTION: The to_utf8 function is introduced to convert a string to UTF-8 encoding. It can be used to ensure proper UTF-8 encoding of string data.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.102.rst#2025-04-10_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT to_utf8(column_name) FROM table_name;\n```\n\n----------------------------------------\n\nTITLE: Configuring TPCH Connector for Presto\nDESCRIPTION: This configuration file sets up the TPCH connector for Presto, which is used to generate test data.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/installation/deployment.rst.txt#2025-04-10_snippet_19\n\nLANGUAGE: none\nCODE:\n```\nconnector.name=tpch\n```\n\n----------------------------------------\n\nTITLE: SQL USE statement in Presto\nDESCRIPTION: Reference to the USE SQL command that changes the current schema selection in Presto CLI, which had a session property reset issue fixed in this release.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.126.rst#2025-04-10_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\n/sql/use\n```\n\n----------------------------------------\n\nTITLE: Counting Rows in Kafka Table using Presto SQL\nDESCRIPTION: SQL query to count the number of rows in the 'customer' table of the Kafka catalog.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/kafka-tutorial.rst.txt#2025-04-10_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nSELECT count(*) FROM customer;\n```\n\n----------------------------------------\n\nTITLE: Referencing SQL Clauses in Presto Release Notes\nDESCRIPTION: This snippet shows how SQL clauses are referenced in Presto release notes. It includes mentions of ORDER BY, GROUP BY, IN, and JOIN clauses that have been fixed or improved in this release.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.172.rst#2025-04-10_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n``ORDER BY``\n```\n\nLANGUAGE: markdown\nCODE:\n```\n``GROUP BY``\n```\n\nLANGUAGE: markdown\nCODE:\n```\n``IN``\n```\n\nLANGUAGE: markdown\nCODE:\n```\n``JOIN``\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents for Presto Query Optimizer in reStructuredText\nDESCRIPTION: This snippet defines a table of contents using reStructuredText syntax. It lists various subtopics related to Presto's query optimizer, including statistics, cost explanations, cost-based optimizations, history-based optimization, and logical properties.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/optimizer.rst#2025-04-10_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. toctree::\n    :maxdepth: 1\n\n    optimizer/statistics\n    optimizer/cost-in-explain\n    optimizer/cost-based-optimizations\n    optimizer/history-based-optimization\n    optimizer/logical-properties\n```\n\n----------------------------------------\n\nTITLE: Using ST_Buffer Geospatial Function\nDESCRIPTION: New geospatial function ST_Buffer for creating buffer polygons around geometry objects.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.190.rst.txt#2025-04-10_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nST_Buffer\n```\n\n----------------------------------------\n\nTITLE: Referencing Function in reStructuredText\nDESCRIPTION: This snippet shows how to reference a function name in reStructuredText format, specifically mentioning the element_at function used with MAP type.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.253.rst#2025-04-10_snippet_1\n\nLANGUAGE: restructuredtext\nCODE:\n```\n:func:`!element_at`\n```\n\n----------------------------------------\n\nTITLE: Stopping Presto Server in Background on Intel Mac\nDESCRIPTION: Command to stop the Presto service running in the background on an Intel Mac.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/installation/deploy-brew.rst.txt#2025-04-10_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npresto-server stop\n```\n\n----------------------------------------\n\nTITLE: Enabling Spill Compression in Presto SQL\nDESCRIPTION: Enables compression of spilled pages to reduce disk I/O at the cost of extra CPU load. This property is defined in the tuning-spilling section.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/admin/spill.rst#2025-04-10_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nspill-compression-enabled=true\n```\n\n----------------------------------------\n\nTITLE: SQL Type Casting - Timestamp\nDESCRIPTION: Example of casting VARCHAR to TIMESTAMP WITH TIME ZONE with optional timezone parameter\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.108.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nCAST(value AS TIMESTAMP WITH TIME ZONE)\n```\n\n----------------------------------------\n\nTITLE: Fix for Query with Null Values in ORC Tables\nDESCRIPTION: Addresses a bug where rows containing only null values were not returned to the client in queries over ORC encoded Hive tables without data transformations.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.180.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM orc_table WHERE column IS NULL;\n```\n\n----------------------------------------\n\nTITLE: Configuring Soft Memory Limits in Presto\nDESCRIPTION: New configuration properties for setting soft memory limits in Presto queries. These limits can be overridden using session properties up to the hard limit set by existing configuration properties.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.235.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nquery.soft-max-memory-per-node\nquery.soft-max-total-memory-per-node\nquery.soft-max-total-memory\nquery.soft-max-memory\n```\n\n----------------------------------------\n\nTITLE: Configuring Soft Memory Limits in Presto\nDESCRIPTION: New configuration properties for setting soft memory limits in Presto queries. These limits can be overridden using session properties up to the hard limit set by existing configuration properties.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.235.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nquery.soft-max-memory-per-node\nquery.soft-max-total-memory-per-node\nquery.soft-max-total-memory\nquery.soft-max-memory\n```\n\n----------------------------------------\n\nTITLE: Fix for Query with Null Values in ORC Tables\nDESCRIPTION: Addresses a bug where rows containing only null values were not returned to the client in queries over ORC encoded Hive tables without data transformations.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.180.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM orc_table WHERE column IS NULL;\n```\n\n----------------------------------------\n\nTITLE: Configuring Soft Memory Limits in Presto\nDESCRIPTION: New configuration properties for setting soft memory limits in Presto queries. These limits can be overridden using session properties up to the hard limit set by existing configuration properties.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.235.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nquery.soft-max-memory-per-node\nquery.soft-max-total-memory-per-node\nquery.soft-max-total-memory\nquery.soft-max-memory\n```\n\n----------------------------------------\n\nTITLE: Creating Iceberg Table with Hour Partition Transform\nDESCRIPTION: Example of creating an Iceberg table partitioned by hour using a timestamp column. This transform extracts hours from the timestamp field for partitioning.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/iceberg.rst.txt#2025-04-10_snippet_39\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE players (\n    id int,\n    name varchar,\n    team varchar,\n    ts timestamp\n)\nWITH (\n    format = 'ORC',\n    partitioning = ARRAY['hour(ts)']\n);\n```\n\n----------------------------------------\n\nTITLE: Enabling Optimized RCFile Reader in Hive for Presto SQL\nDESCRIPTION: Introduces a new experimental optimized RCFile reader. This can be enabled through a configuration option or session property.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.79.rst#2025-04-10_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nhive.optimized-reader.enabled\n```\n\nLANGUAGE: SQL\nCODE:\n```\noptimized_reader_enabled\n```\n\n----------------------------------------\n\nTITLE: SQL Filtered Aggregation Example\nDESCRIPTION: Demonstrates the new filtered aggregation feature that allows filtering rows before aggregation using a WHERE clause.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.156.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT sum(a) FILTER (WHERE b > 0) FROM ...\n```\n\n----------------------------------------\n\nTITLE: NOT IN Row Exclusion\nDESCRIPTION: Demonstrates using NOT IN operator to exclude matching rows from results.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/comparison.rst.txt#2025-04-10_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM region WHERE name NOT IN ('AMERICA', 'EUROPE');\n\nSELECT id, name FROM region WHERE name IN (SELECT name FROM region WHERE id IN (3,4));\n```\n\n----------------------------------------\n\nTITLE: Adding EXCEPT Operator Support in SQL\nDESCRIPTION: Adds support for the EXCEPT set operation in Presto SQL, allowing for set difference queries between two result sets.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.152.rst.txt#2025-04-10_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT ... EXCEPT SELECT ...\n```\n\n----------------------------------------\n\nTITLE: IN Operator Row Comparison\nDESCRIPTION: Shows how to use IN operator to compare values against a list or subquery results.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/comparison.rst.txt#2025-04-10_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM region WHERE name IN ('AMERICA', 'EUROPE');\n\nSELECT * FROM region WHERE name IN ('NULL', 'AMERICA', 'EUROPE');\n\nSELECT * FROM table_name WHERE (column1, column2) IN ((NULL, 'value1'), ('value2', 'value3'));\n```\n\n----------------------------------------\n\nTITLE: Enabling Fragment Result Caching in Presto\nDESCRIPTION: Configuration properties to enable fragment result caching functionality.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.242.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\nfragment-result-cache.enabled\nexperimental.fragment-result-caching-enabled\n```\n\n----------------------------------------\n\nTITLE: Configuring Kafka Connector for Presto in Properties\nDESCRIPTION: Content of the Kafka connector properties file for Presto, specifying connector name, Kafka nodes, and table names.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/kafka-tutorial.rst.txt#2025-04-10_snippet_4\n\nLANGUAGE: properties\nCODE:\n```\nconnector.name=kafka\nkafka.nodes=localhost:9092\nkafka.table-names=tpch.customer,tpch.orders,tpch.lineitem,tpch.part,tpch.partsupp,tpch.supplier,tpch.nation,tpch.region\nkafka.hide-internal-columns=false\n```\n\n----------------------------------------\n\nTITLE: Session Property for Metastore Headers in Hive\nDESCRIPTION: New session property allowing users to set headers for metastore operations in Hive connector.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.264.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nhive.metastore_headers\n```\n\n----------------------------------------\n\nTITLE: Listing Partitions of a Hive Table in Presto\nDESCRIPTION: Shows how to list all partitions of the 'page_views' table. This query uses a special syntax to access the partition information of a Hive table.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/hive.rst#2025-04-10_snippet_19\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT * FROM hive.web.\"page_views$partitions\"\n```\n\n----------------------------------------\n\nTITLE: Fixed SQL Subquery Planning with IN Expressions\nDESCRIPTION: Fixes planning failures that occurred when the left side of an IN expression contained subqueries.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.172.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nIN\n```\n\n----------------------------------------\n\nTITLE: Retrieving Current User in Presto SQL\nDESCRIPTION: The current_user function returns the name of the user running the current query. This is a standard SQL function and does not require parentheses when called.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/functions/session.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\ncurrent_user\n```\n\n----------------------------------------\n\nTITLE: Query Configuration Parameter\nDESCRIPTION: New configuration parameter to control the minimum batch size for split scheduling.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.157.rst.txt#2025-04-10_snippet_3\n\nLANGUAGE: config\nCODE:\n```\nquery.min-schedule-split-batch-size\n```\n\n----------------------------------------\n\nTITLE: Executing Presto CLI with LDAP Authentication\nDESCRIPTION: Bash script demonstrating how to invoke Presto CLI with LDAP authentication enabled. It includes options for server address, keystore/truststore configuration, catalog, schema, and user authentication.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/security/ldap.rst#2025-04-10_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\n./presto \\\n--server https://presto-coordinator.example.com:8443 \\\n--keystore-path /tmp/presto.jks \\\n--keystore-password password \\\n--truststore-path /tmp/presto_truststore.jks \\\n--truststore-password password \\\n--catalog <catalog> \\\n--schema <schema> \\\n--user <LDAP user> \\\n--password\n```\n\n----------------------------------------\n\nTITLE: Fixed SQL Query Planning with GROUP BY Lambda Expressions\nDESCRIPTION: Resolves a planning failure that occurred when GROUP BY queries contained lambda expressions.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.172.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nGROUP BY\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Security Mappings for S3 Access in PrestoDB\nDESCRIPTION: JSON configuration example for mapping users to specific AWS credentials or IAM roles for S3 access. Allows flexible credential management based on username patterns.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/hive.rst.txt#2025-04-10_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mappings\": [\n    {\n      \"user\": \"admin\",\n      \"accessKey\": \"AKIAxxxaccess\",\n      \"secretKey\": \"iXbXxxxsecret\"\n    },\n    {\n      \"user\": \"analyst|scientist\",\n      \"iamRole\": \"arn:aws:iam::123456789101:role/analyst_and_scientist_role\"\n    },\n    {\n      \"iamRole\": \"arn:aws:iam::123456789101:role/default\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Session Properties in Presto\nDESCRIPTION: JDBC Driver now supports executing SET SESSION and RESET SESSION statements for configuring session properties.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.189.rst#2025-04-10_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nSET SESSION\n```\n\nLANGUAGE: sql\nCODE:\n```\nRESET SESSION\n```\n\n----------------------------------------\n\nTITLE: Configuring Task Level Priority in Presto\nDESCRIPTION: Configuration properties for controlling task scheduling behavior and query prioritization in Presto. These settings affect how CPU resources are allocated between long-running and short queries.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.181.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\ntask.level-absolute-priority=true\ntask.legacy-scheduling-behavior=false\ntask.level-time-multiplier=<value>\n```\n\n----------------------------------------\n\nTITLE: JSON Parse Input Example\nDESCRIPTION: Example of json_parse function input behavior with trailing characters\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.186.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n[1,2]abc\n```\n\n----------------------------------------\n\nTITLE: Configuring Presto Optimizer Setting\nDESCRIPTION: Configuration setting that when disabled causes query failures in this release due to a bug.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.122.rst#2025-04-10_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\noptimizer.optimize-hash-generation\n```\n\n----------------------------------------\n\nTITLE: Querying Redshift Table Data\nDESCRIPTION: SQL command to select all data from a specific table in Redshift.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/redshift.rst.txt#2025-04-10_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM redshift.web.clicks;\n```\n\n----------------------------------------\n\nTITLE: Disabling Data Redistribution Configuration in Presto\nDESCRIPTION: Options to disable the default data redistribution behavior when writing tables, either through session property or configuration property.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.109.rst#2025-04-10_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\nredistribute_writes=false\n```\n\nLANGUAGE: properties\nCODE:\n```\nredistribute-writes=false\n```\n\n----------------------------------------\n\nTITLE: Using ST_Area Function with Geometry Types in Presto SQL\nDESCRIPTION: The ST_Area function now supports all geometry types for calculating areas in spatial data processing.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/release/release-0.204.rst#2025-04-10_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT ST_Area(geometry_column) FROM spatial_table;\n```\n\n----------------------------------------\n\nTITLE: Creating Public Schema for Lark Sheets Access\nDESCRIPTION: SQL command to create a schema with public visibility, allowing other users to access the Lark spreadsheet data through Presto.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/connector/larksheets.rst.txt#2025-04-10_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nCREATE SCHEMA my_ss WITH (TOKEN = 'shtcnBf5pg4BNSkwV2Ku5xwW9Pf', PUBLIC = true)\n```\n\n----------------------------------------\n\nTITLE: SQL Function Warning - xxhash64 Return Type Change\nDESCRIPTION: Warning about a breaking change in the xxhash64 function, which will return varbinary instead of bigint in the next release.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.162.rst.txt#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nxxhash64()\n```\n\n----------------------------------------\n\nTITLE: Using Wildcards with JMX Tables in Presto\nDESCRIPTION: SQL query example demonstrating how to use wildcards in table names to match multiple MBean objects in a single query, retrieving memory pool information.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_static/connector/jmx.rst#2025-04-10_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nSELECT freebytes, node, object_name\nFROM jmx.current.\"com.facebook.presto.memory:*type=memorypool*\";\n```\n\n----------------------------------------\n\nTITLE: SQL Function Reference - Position Syntax\nDESCRIPTION: New support for the position function syntax\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.108.rst.txt#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nposition()\n```\n\n----------------------------------------\n\nTITLE: Deleting Data from Partitioned Hive Tables in Presto\nDESCRIPTION: Example of deleting data from a partitioned Hive table in Presto. The WHERE clause must match entire partitions by specifying values for all partition keys.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.123.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nDELETE FROM orders\nWHERE order_date = '2015-10-15' AND order_region = 'APAC'\n```\n\n----------------------------------------\n\nTITLE: Deleting Data from Partitioned Hive Tables in Presto\nDESCRIPTION: Example of deleting data from a partitioned Hive table in Presto. The WHERE clause must match entire partitions by specifying values for all partition keys.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.123.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nDELETE FROM orders\nWHERE order_date = '2015-10-15' AND order_region = 'APAC'\n```\n\n----------------------------------------\n\nTITLE: Using the New Combinations Function in Presto SQL\nDESCRIPTION: Generate combinations of values from an array using the new combinations() function, which supports up to 5 combinations.\nSOURCE: https://github.com/prestodb/prestodb.github.io/blob/source/website/static/docs/0.291/_sources/release/release-0.230.rst.txt#2025-04-10_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT combinations(array)\n```"
  }
]