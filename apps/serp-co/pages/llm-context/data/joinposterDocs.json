[
  {
    "owner": "joinposter",
    "repo": "docs",
    "content": "TITLE: Sending HTTP Requests with PHP cURL\nDESCRIPTION: PHP function for sending HTTP requests to the Poster API. Supports GET and POST methods, handles JSON and form data, and includes proper headers and SSL settings. The function demonstrates making an authenticated request to the clients.getGroup endpoint.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/start/request.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nfunction sendRequest($url, $type = 'get', $params = [], $json = false)\n{\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_HEADER, false);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n\n    if ($type == 'post' || $type == 'put') {\n        curl_setopt($ch, CURLOPT_POST, true);\n\n        if ($json) {\n            $params = json_encode($params);\n\n            curl_setopt($ch, CURLOPT_HTTPHEADER, [\n                'Content-Type: application/json',\n                'Content-Length: ' . strlen($params)\n            ]);\n\n            curl_setopt($ch, CURLOPT_POSTFIELDS, $params);\n        } else {\n            curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($params));\n        }\n    }\n\n    curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 30);\n    curl_setopt($ch, CURLOPT_USERAGENT, 'Poster (http://joinposter.com)');\n\n    $data = curl_exec($ch);\n    curl_close($ch);\n\n    return $data;\n}\n\n$url = 'https://joinposter.com/api/clients.getGroup' \n    . '?format=json'\n    . '&token=687409:4164553abf6a031302898da7800b59fb'\n    . '&group_id=1';\n\n$group = sendRequest($url);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Product List with JavaScript\nDESCRIPTION: This code snippet demonstrates how to retrieve a list of products using the Poster API. It includes pagination parameters and allows filtering by various criteria such as category, type, and modification date.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/pos/products/index.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar curl = require(\"curl\");\nvar headers = {\n    \"Content-Type\": \"application/json\",\n    \"Authorization\": \"Bearer TOKEN\"\n};\n\nvar data = JSON.stringify({\n    \"category_id\": 1,\n    \"type\": \"products\",\n    \"modificator_id\": 1,\n    \"fiscal\": 1,\n    \"barcode\": 123456,\n    \"id\": 1,\n    \"modified_from\": \"2017-06-09\"\n});\n\ncurl.post(\"https://joinposter.com/api/menu.getProducts\", headers, data, function(err, response, body) {\n    console.log(body);\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Dish Technical Card with PHP\nDESCRIPTION: This PHP code snippet demonstrates how to create a dish technical card using the menu.createDish API method. It includes setting various parameters such as name, category, prices, ingredients, and modifications.\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/menu/createDish.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/menu.createDish'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$dish = [\n    'product_name' => 'Кальян с сюрпризом',\n    'menu_category_id' => 151,\n    'different_spots_prices' => 1,\n    'workshop' => 4,\n    'weight_flag' => 0,\n    'product_color' => 'red',\n    'nodiscount' => 1,\n    'fiscal_code' => 1234567890,\n    'price' => [\n        1 => 55,\n        2 => 57,\n    ],\n    'visible' => [\n        1 => 1,\n        2 => 0,\n    ],\n    \"ingredient\" => [[\n        \"id\" => 813,\n        \"type\" => 1,\n        \"unit\" => \"kg\",\n        \"weight\" => 0,\n        \"stew\" => 0,\n        \"bake\" => 0,\n        \"brutto\" => 10,\n        \"lock\" => 1,\n        \"netto\" => 10,\n    ]],\n    'modificationgroup' => [\n        [\n            'type'          => 1,\n            'minNum'        => 1,\n            'maxNum'        => 1,\n            'name'          => 'Чаша',\n            \"modifications\" => [\n                [\n                    \"ingredientId\" => 820,\n                    \"type\" => 1,\n                    \"name\" => \"Классическая чаша\",\n                    \"brutto\" => 1,\n                    \"price\" => 500,\n                ],\n                [\n                    \"ingredientId\" => 816,\n                    \"name\" => \"Апельсиновая чаша\",\n                    \"type\" => 1,\n                    \"brutto\" => 1,\n                    \"price\" => 400,\n                ],\n            ]\n        ]\n    ]\n];\n\n$data = sendRequest($url, 'post', $dish);\n```\n\n----------------------------------------\n\nTITLE: Creating Order with PHP Request\nDESCRIPTION: Example of creating an order using PHP by sending a POST request to the transactions.createTransaction endpoint. Shows required parameters including spot_id, spot_tablet_id, table_id, user_id, and guests_count.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/transactions/createTransaction.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/transactions.createTransaction'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$transaction = [\n    'spot_id'        => 1,\n    'spot_tablet_id' => 1,\n    'table_id'       => 1,\n    'user_id'        => 3,\n    'guests_count'   => 2,\n];\n\n$data = sendRequest($url, 'post', $transaction);\n```\n\n----------------------------------------\n\nTITLE: Order Creation Response Structure\nDESCRIPTION: Example response structure from the orders.create endpoint showing a successful order creation with complete order details including ID, dates, status, products, and payment information.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/pos/orders/orders-create.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"success\":true,\n   \"order\":{\n      \"id\":1508308514369,\n      \"dateStart\":1508308514369,\n      \"dateClose\":0,\n      \"datePrint\":0,\n      \"status\":1,\n      \"userId\":4,\n      \"tableId\":8,\n      \"orderName\":14,\n      \"guestsCount\":2,\n      \"products\":{\n         \"0\":{\n            \"id\":7,\n            \"count\":1,\n            \"price\":0,\n            \"printedNum\":0\n         },\n         \"1\":{\n            \"id\":1,\n            \"count\":1,\n            \"price\":25,\n            \"printedNum\":0\n         }\n      },\n      \"subtotal\":25,\n      \"total\":25,\n      \"discount\":0,\n      \"clientId\":0,\n      \"payType\":\"\",\n      \"payedSum\":0,\n      \"payedCard\":0,\n      \"payedCash\":0,\n      \"payedBonus\":0,\n      \"loyaltyAppId\":0,\n      \"parentId\":0,\n      \"tipIncluded\":0,\n      \"tipSum\":0,\n      \"comment\":\"\"\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Popup Notification with JavaScript\nDESCRIPTION: Example of using Poster.interface.showNotification to display a popup notification with a title, message and custom icon. The method returns a Promise that resolves with the notification details. Notifications appear in the upper-right corner and trigger a notificationClick event when clicked.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/pos/interfaces/interface-showNotification.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nPoster.interface.showNotification({\n    title: 'Online order',\n    message: 'New order on 5th table',\n    icon: 'https://joinposter.com/upload/apps/icons/posterboss-ios.png',\n}).then((notification) => {\n    console.log('new notification', notification);\n});\n```\n\n----------------------------------------\n\nTITLE: Printing Receipt with QR Code using Poster API in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the Poster.orders.printReceipt method to print a receipt with a QR code. The method takes the order ID, QR code content, and an optional QR code title as arguments.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/pos/orders/orders-printReceipt.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nPoster.orders.printReceipt(1503219480866, 'loremipsum', 'To scan QR code use special app')\n```\n\n----------------------------------------\n\nTITLE: Creating a Customer using PHP JoinPoster API\nDESCRIPTION: PHP code snippet demonstrating how to create a new customer by sending a POST request to the JoinPoster API with customer details. Requires an API token and includes comprehensive customer information.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/clients/createClient.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/clients.createClient'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$client = [\n    'client_name'             => 'Попова Елена Андреевна',\n    'client_sex'              => 2,\n    'client_groups_id_client' => 7,\n    'card_number'             => '0000000000222',\n    'discount_per'            => 0,\n    'phone'                   => '+380519911122',\n    'email'                   => 'contact@joinposter.com',\n    'birthday'                => '1986-11-23',\n    'bonus'                   => 10,\n    'total_payed_sum'         => 417000,\n];\n\n$data = sendRequest($url, 'post', $client);\n```\n\n----------------------------------------\n\nTITLE: API Response Format - JSON\nDESCRIPTION: Example response showing the JSON structure returned by the API. The response contains an array of customer objects with detailed information including personal details, loyalty information, and group memberships.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/clients/getClients.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{  \n  \"response\":[  \n    {  \n      \"client_id\":\"55\",\n      \"firstname\":\"\",\n      \"lastname\":\"Антон\",\n      \"patronymic\":\"\",\n      \"discount_per\":\"0\",\n      \"bonus\":\"10000\",\n      \"total_payed_sum\":\"0\",\n      \"date_activale\":\"2017-10-09 15:28:14\",\n      \"phone\":\"+7 963 031-38-44\",\n      \"phone_number\":\"79630313844\",\n      \"email\":\"bezmuki@gmail.com\",\n      \"birthday\":\"0000-00-00\",\n      \"card_number\":\"0\",\n      \"client_sex\":\"0\",\n      \"country\":\"0\",\n      \"city\":\"0\",\n      \"comment\":\"0\",\n      \"address\":\"0\",\n      \"client_groups_id\":\"3\",\n      \"client_groups_name\":\"Накопительная скидка\",\n      \"client_groups_discount\":\"0\",\n      \"loyalty_type\":\"1\",\n      \"birthday_bonus\":\"0\",\n      \"delete\":\"0\",\n      \"ewallet\": \"0\"\n    },\n    {  \n      \"client_id\":\"54\",\n      \"firstname\":\"\",\n      \"lastname\":\"Вася\",\n      \"patronymic\":\"\",\n      \"discount_per\":\"0\",\n      \"bonus\":\"10000\",\n      \"total_payed_sum\":\"0\",\n      \"date_activale\":\"2017-10-09 11:39:59\",\n      \"phone\":\"+7 977 345-34-45\",\n      \"phone_number\":\"79773453445\",\n      \"email\":\"sdfs@ffy.hu\",\n      \"birthday\":\"0000-00-00\",\n      \"card_number\":\"0\",\n      \"client_sex\":\"0\",\n      \"country\":\"0\",\n      \"city\":\"0\",\n      \"comment\":\"0\",\n      \"address\":\"0\",\n      \"client_groups_id\":\"2\",\n      \"client_groups_name\":\"Скидка Выходной\",\n      \"client_groups_discount\":\"15\",\n      \"loyalty_type\":\"1\",\n      \"birthday_bonus\":\"0\",\n      \"delete\":\"0\",\n      \"ewallet\": \"0\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Processing Incoming Webhook in PHP\nDESCRIPTION: This PHP code demonstrates how to process an incoming webhook, including data verification using a secret key, handling additional data, and sending a response back to Poster. It also shows how to properly handle the webhook's JSON payload and perform security checks.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/webhooks.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// Your application_secret\n$client_secret = 'fe2bc8e865d8fc2236968ee53c3b2bd5';\n\n// Transform all incoming data to JSON\n$postJSON = file_get_contents('php://input');\n$postData = json_decode($postJSON, true);\n\n$verify_original = $postData['verify'];\nunset($postData['verify']);\n\n$verify = [\n    $postData['account'],\n    $postData['object'],\n    $postData['object_id'],\n    $postData['action'],\n];\n\n// Check for additional data\nif (isset($postData['data'])) {\n    $verify[] = $postData['data'];\n}\n$verify[] = $postData['time'];\n$verify[] = $client_secret;\n\n// Check for data verification\n$verify = md5(implode(';', $verify));\nif ($verify != $verify_original) {\n    exit;\n}\n\n// Sending response back to Poster. Otherwise Poster will attempt send webhook for 15 times\necho json_encode(['status' => 'accept']);\n```\n\n----------------------------------------\n\nTITLE: Representing Order Object Structure in JSON\nDESCRIPTION: This snippet illustrates the complete structure of an Order object in JSON format. It includes all properties such as order details, payment information, product listings, and associated metadata.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/pos/types/order.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"id\":1533541148416,\n   \"dateStart\":1533541148416,\n   \"dateClose\":0,\n   \"datePrint\":0,\n   \"status\":1,\n   \"userId\":1,\n   \"tableId\":90,\n   \"orderName\":330684,\n   \"guestsCount\":2,\n   \"products\":{\n      \"0\":{\n         \"id\":162,\n         \"count\":2,\n         \"printedNum\":4,\n         \"productSum\":10.5,\n         \"price\":10.5,\n         \"modificationHash\":\"\",\n         \"taxId\":\"0\",\n         \"taxValue\":\"0\",\n         \"taxType\":\"0\",\n         \"taxFiscal\":0\n      },\n      \"1\":{\n         \"id\":161,\n         \"count\":0,\n         \"printedNum\":2,\n         \"productSum\":17,\n         \"price\":17,\n         \"modificationHash\":\"\",\n         \"taxId\":\"0\",\n         \"taxValue\":\"0\",\n         \"taxType\":\"0\",\n         \"taxFiscal\":0\n      },\n      \"2\":{\n         \"id\":145,\n         \"count\":0,\n         \"printedNum\":1,\n         \"productSum\":15,\n         \"price\":15,\n         \"modificationHash\":\"\",\n         \"taxId\":\"0\",\n         \"taxValue\":\"0\",\n         \"taxType\":\"0\",\n         \"taxFiscal\":0\n      },\n      \"3\":{\n         \"id\":151,\n         \"count\":1,\n         \"price\":15,\n         \"printedNum\":1,\n         \"modification\":59\n      },\n      \"4\":{\n         \"id\":150,\n         \"count\":200,\n         \"price\":0.2,\n         \"printedNum\":0\n      },\n      \"5\":{\n         \"id\":177,\n         \"count\":1,\n         \"price\":10,\n         \"printedNum\":0,\n         \"modification\":\"[{\\\"m\\\":1,\\\"a\\\":1}]\"\n      }\n   },\n   \"subtotal\":86,\n   \"total\":86,\n   \"discount\":0,\n   \"clientId\":108,\n   \"payType\":\"0\",\n   \"payedSum\":0,\n   \"payedCard\":0,\n   \"payedCash\":0,\n   \"payedThirdParty\":0,\n   \"payedBonus\":0,\n   \"approvedBonus\":0,\n   \"platformDiscount\":0,\n   \"loyaltyAppId\":0,\n   \"parentId\":0,\n   \"tipIncluded\":0,\n   \"tipSum\":0,\n   \"roundSum\":0,\n   \"comment\":\"\"\n}\n```\n\n----------------------------------------\n\nTITLE: cURL Implementation for Obtaining Access Token\nDESCRIPTION: cURL command demonstrating how to send a POST request with form-data to obtain an access token. It shows how to set up parameters like application_id, application_secret, and code from previous authorization steps.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/start/authApi.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\naccount=\"api-demo\" # GET-parameter from step 2\ncode=\"bd8f3168d1af839cbc90d11575459465\" # GET-parameter from step 2\nappId=76\nappSecret=\"9642176a5cdfe3f65e6e00c27b668795\"\nredirectUrl=\"http://localhost:8080/\"\n\ncurl -X POST \\\n  \"https://$account.joinposter.com/api/v2/auth/access_token\" \\\n  -H 'cache-control: no-cache' \\\n  -H 'content-type: multipart/form-data;' \\\n  -F \"application_id=$appId\" \\\n  -F \"application_secret=$appSecret\" \\\n  -F 'grant_type=authorization_code' \\\n  -F \"redirect_uri=$redirectUrl\" \\\n  -F \"code=$code\"\n```\n\n----------------------------------------\n\nTITLE: Searching Customers Using clients.find Method\nDESCRIPTION: Example of how to search for a customer using the clients.find method. The method accepts a searchVal parameter and returns a Promise with found client information.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/pos/clients/clients-find.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nPoster.clients.find({\n        searchVal: 'Vladimir'            \n    })\n    .then(function (result) {\n        console.log('clients search', result);    \n    })\n```\n\n----------------------------------------\n\nTITLE: JSON Response Structure for Employee List\nDESCRIPTION: This JSON snippet shows the structure of the response from the access.getEmployees endpoint. It contains an array of employee objects, each with details such as user ID, name, role, access mask, and last login time.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/access/getEmployees.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"response\":[\n    {\n      \"user_id\":3,\n      \"name\":\"Semen Tick\",\n      \"user_type\":90,\n      \"role_id\": 1,\n      \"role_name\": \"Marketer\",\n      \"access_mask\": 34,\n      \"last_in\":\"2017-03-07 13:03:47\"\n    },\n    {\n      \"user_id\":9,\n      \"name\":\"John Doe\",\n      \"user_type\":0,\n      \"role_id\": 2,\n      \"role_name\": \"Waiter\",\n      \"access_mask\": 1,\n      \"last_in\":\"2017-03-07 14:03:03\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Product with JavaScript\nDESCRIPTION: This code snippet illustrates the process of creating a new product using the Poster API. It includes setting various product attributes such as name, category, price, and ingredients.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/pos/products/index.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar curl = require(\"curl\");\nvar headers = {\n    \"Content-Type\": \"application/json\",\n    \"Authorization\": \"Bearer TOKEN\"\n};\n\nvar data = JSON.stringify({\n    \"product\": {\n        \"category_id\": \"3\",\n        \"product_name\": \"Red bull\",\n        \"type\": \"3\",\n        \"weight_flag\": \"0\",\n        \"color\": \"#ffffffcc\",\n        \"modifications\": [],\n        \"barcode\": \"4345234\",\n        \"price\": \"50\",\n        \"ingredient_id\": \"7\",\n        \"ingredient_count\": \"1\",\n        \"cooking_time\": \"0\",\n        \"menu_category_id\": \"2\"\n    }\n});\n\ncurl.post(\"https://joinposter.com/api/menu.createProduct\", headers, data, function(err, response, body) {\n    console.log(body);\n});\n```\n\n----------------------------------------\n\nTITLE: Example of Incoming Webhook JSON Structure\nDESCRIPTION: This snippet shows the structure of an incoming webhook JSON payload, including account information, object details, action performed, timestamp, and verification code.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/webhooks.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"account\":\"api-demo\",\n  \"account_number\":\"203941\",\n  \"object\":\"transaction\",\n  \"object_id\":1,\n  \"action\":\"added\",\n  \"time\":\"1518794257\",\n  \"verify\":\"a23sk3d9123ka31sd3k5asd9123sad93\"\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Product With Modification\nDESCRIPTION: Example demonstrating how to add a product with a modification to an order. Includes both order ID and product object with modification ID.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/pos/orders/orders-addProduct.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nPoster.orders.addProduct(1503219480866, {id: 1, modification: 1})\n```\n\n----------------------------------------\n\nTITLE: Sending HTTP Requests with PHP cURL\nDESCRIPTION: A flexible PHP function for making HTTP GET and POST requests to Poster API, supporting JSON and form-encoded payloads with configurable options\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/start/request.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nfunction sendRequest($url, $type = 'get', $params = [], $json = false)\n{\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_HEADER, false);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n\n    if ($type == 'post' || $type == 'put') {\n        curl_setopt($ch, CURLOPT_POST, true);\n\n        if ($json) {\n            $params = json_encode($params);\n\n            curl_setopt($ch, CURLOPT_HTTPHEADER, [\n                'Content-Type: application/json',\n                'Content-Length: ' . strlen($params)\n            ]);\n\n            curl_setopt($ch, CURLOPT_POSTFIELDS, $params);\n        } else {\n            curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($params));\n        }\n    }\n\n    curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 30);\n    curl_setopt($ch, CURLOPT_USERAGENT, 'Poster (http://joinposter.com)');\n\n    $data = curl_exec($ch);\n    curl_close($ch);\n\n    return $data;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Online Order with PHP\nDESCRIPTION: This code snippet demonstrates how to create a standard online order using the JoinPoster API. It initializes the order details, such as spot_id and products, and sends a POST request to the specified API endpoint, handling the response for order confirmation.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/incomingOrders/createIncomingOrder.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/incomingOrders.createIncomingOrder'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$incoming_order = [\n    'spot_id'   => 1,\n    'phone'     => '+380680000000',\n    'products'  => [\n        [\n            'product_id' => 169,\n            'count'      => 1\n        ],\n    ],\n];\n\ndata = sendRequest($url, 'post', $incoming_order);\n\n```\n\n----------------------------------------\n\nTITLE: Sending Billing Notification to Poster with PHP\nDESCRIPTION: This PHP example demonstrates how to notify Poster about a successful order payment. It constructs the notification payload with payment details, generates a security signature using the application secret, and sends the POST request to the API endpoint.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/payments/addTransactionPayment.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?\n$url = 'https://joinposter.com/api/payments.addTransactionPayment?' .\n  'format=json';\n\n$application_secret = '123123123123';\n\n$payment = [\n  'type' => 'application-name',\n  'merchant_id' => 3432343,\n  'transaction_id' => '1474012061849',\n  'payed_sum' => 369.00,\n  'credited_sum' => 365.31,\n];\n\n$payment['sign'] = md5(implode(':', $payment) . ':' . $application_secret);\n\n$answer = sendRequest($url, 'post', $payment);\n```\n\n----------------------------------------\n\nTITLE: Updating Customer Account Settings with PHP\nDESCRIPTION: Example of how to update customer account settings using a PHP request to the settings.changeSettings endpoint. This snippet demonstrates setting tax usage, cash shifts, fiscality, fiscal printing defaults, and timezone settings.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/settings/changeSettings.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/settings.changeSettings'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$settings = [\n    'uses_taxes'              => 1,\n    'uses_cash_shifts'        => 0,\n    'uses_fiscality'          => 0,\n    'print_fiscal_by_default' => 0,\n    'timezones'               => 'Europe/Moscow',\n];\n\n$data = sendRequest($url, 'post', $settings);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Account Settings with PHP\nDESCRIPTION: PHP example demonstrating how to make a GET request to the settings.getAllSettings endpoint. This snippet shows how to construct the URL with the authentication token and send the request.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/settings/getAllSettings.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/settings.getAllSettings'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$data = sendRequest($url);\n```\n\n----------------------------------------\n\nTITLE: Creating an Online Order with Promotions in PHP\nDESCRIPTION: This code snippet illustrates how to submit an online order with promotional application using the JoinPoster API. It includes details about the promotion involved and how to structure the order data, which is submitted as a POST request.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/incomingOrders/createIncomingOrder.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/incomingOrders.createIncomingOrder'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$incoming_order = [\n    \"spot_id\"   => 1,\n    \"products\"  => [\n        [\n            \"product_id\"    => 139,\n            \"count\"         => 1\n        ]\n    ],\n    \"promotion\" => [\n        [\n            \"id\" => 1, \n            \"involved_products\" => [\n                [\"id\" => 139, \"count\"  => 1]\n            ],\n            \"result_products\"   => [\n                [\"id\" => 161]\n            ]\n        ]\n    ]\n];\n\ndata = sendRequest($url, 'post', $incoming_order);\n\n```\n\n----------------------------------------\n\nTITLE: Creating an Online Order with Poster API in PHP\nDESCRIPTION: This code snippet demonstrates how to create an online order using the Poster API's `incomingOrders.createIncomingOrder` method. It sets up the URL, including the authentication token, and constructs an array containing the order details, such as spot ID, client phone number, and product information. The `sendRequest` function is assumed to handle the actual API call.\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/incomingOrders/createIncomingOrder.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/incomingOrders.createIncomingOrder'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$incoming_order = [\n    'spot_id'   => 1,\n    'phone'     => '+380680000000',\n    'products'  => [\n        [\n            'product_id' => 169,\n            'count'      => 1\n        ],\n    ],\n];\n\n$data = sendRequest($url, 'post', $incoming_order);\n```\n\n----------------------------------------\n\nTITLE: Listening to Order Product Changes in JavaScript\nDESCRIPTION: Event listener setup for the orderProductChange event. Triggers when a product is updated in an order and logs the updated order details.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/pos/events/orderProductChange.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nPoster.on('orderProductChange', (order) => {\n\tconsole.log(order);\n})\n```\n\n----------------------------------------\n\nTITLE: Retrieving Product Full Name with Poster SDK in JavaScript\nDESCRIPTION: Demonstrates how to use the products.getFullName method to retrieve a product's full name including its modifications. The method accepts a product object with ID and optional modification parameter and returns a Promise.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/pos/products/products-getFullName.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nPoster.products.getFullName({\n    id: 151, \n    modification: 59\n}).then((prodName) => {\n\tconsole.log(prodName);\n})\n```\n\n----------------------------------------\n\nTITLE: Retrieving Product Details with JavaScript\nDESCRIPTION: This code snippet shows how to retrieve detailed information about a specific product using its ID. It demonstrates the use of the Poster API to fetch product data including name, price, and category.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/pos/products/index.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar curl = require(\"curl\");\nvar headers = {\n    \"Content-Type\": \"application/json\",\n    \"Authorization\": \"Bearer TOKEN\"\n};\n\nvar data = JSON.stringify({\n    \"product_id\": 48\n});\n\ncurl.post(\"https://joinposter.com/api/menu.getProduct\", headers, data, function(err, response, body) {\n    console.log(body);\n});\n```\n\n----------------------------------------\n\nTITLE: Topping Up e-Wallet via Poster API in PHP\nDESCRIPTION: This PHP code snippet demonstrates how to send a POST request to the Poster API to top up a customer's e-Wallet. It includes parameters such as client_id, transaction_id, amount, and type. Dependencies include a function to send HTTP requests, with expected output as JSON response from the API.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/clients/addEWalletPayment.md#2025-04-21_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/clients.addEWalletPayment'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$ewallet = [\n  'client_id'      => 1,\n  'transaction_id' => 1,\n  'amount'         => 200,\n  'type'           => 1,\n];\n\n$data = sendRequest($url, 'post', $ewallet);\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Product Category with JoinPoster API\nDESCRIPTION: This PHP code snippet demonstrates how to create a product category using the JoinPoster `menu.createCategory` API endpoint. It constructs the URL with the authentication token, defines an array containing the category details (name, parent category, color, hidden status, and tax ID), and then sends a POST request to the API with the category data. It requires a `sendRequest` function to handle the HTTP request.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/menu/createCategory.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/menu.createCategory'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$category = [\n    'category_name'   => 'Пицца',\n    'parent_category' => 0,\n    'category_color'  => 'yellow',\n    'category_hidden' => 0,\n    'tax_id'          => 0,\n];\n\n$data = sendRequest($url, 'post', $category);\n```\n\n----------------------------------------\n\nTITLE: Sending GET Request for Product Category Properties - PHP\nDESCRIPTION: This snippet demonstrates how to construct and send a GET request to the JoinPoster API to retrieve product category properties. Dependencies include an implementation of the 'sendRequest' function. The expected input includes the API URL with query parameters like token and category_id. The output is the response data containing details about the product category.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/menu/getCategory.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/menu.getCategory'\n . '?token=687409:4164553abf6a031302898da7800b59fb'\n . '&category_id=30'\n . '&1c=true';\n\n$data = sendRequest($url);\n\n```\n\n----------------------------------------\n\nTITLE: Creating Product with Modifications in PHP\nDESCRIPTION: This PHP code snippet illustrates how to create a new product with modifications using the Poster API. It utilizes a valid API token and the 'sendRequest' function for making HTTP POST requests. Key parameters include 'product_name', 'modifications', and 'modificator_name'. The output is a JSON object with 'response' and 'modifications_id'.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/menu/createProduct.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/menu.createProduct'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$product = [\n    'product_name'           => 'Sprite',\n    'menu_category_id'       => 0,\n    'workshop'               => 1,\n    'weight_flag'            => 0,\n    'color'                  => 'red',\n    'different_spots_prices' => 0,\n    'modifications'          => 1,\n    'modificator_name[0]'    => '1 л.',\n    'modificator_name[1]'    => '2 л.',\n    'barcode[0]'             => '4820098749621',\n    'barcode[1]'             => '4820098749622',\n    'product_code[0]'        => '3412356',\n    'product_code[1]'        => '3412357',\n    'cost[0]'                => 700,\n    'cost[1]'                => 1000,\n    'price[0]'               => 1500,\n    'price[1]'               => 2000,\n    'visible[0]'             => 1,\n    'visible[1]'             => 1,\n];\n\n$data = sendRequest($url, 'post', $product);\n\n```\n\n----------------------------------------\n\nTITLE: Requesting Online Orders via Joinposter API with PHP\nDESCRIPTION: This PHP snippet demonstrates how to construct a URL to fetch online orders from the Joinposter API using `incomingOrders.getIncomingOrders`.  It includes parameters for authentication (token), order status, and date range. The function `sendRequest()` is assumed to be defined elsewhere and responsible for making the actual HTTP request.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/incomingOrders/getIncomingOrders.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/incomingOrders.getIncomingOrders'\n . '?token=687409:4164553abf6a031302898da7800b59fb'\n . '&status=1'\n . '&date_from=2017-10-26+14:00:00'\n . '&date_to=2017-10-26+15:00:00';\n\n$data = sendRequest($url);\n```\n\n----------------------------------------\n\nTITLE: Handling Application Icon Clicks with Poster API\nDESCRIPTION: Demonstrates how to display application icons at specific locations and handle click events on those icons. The code shows integration with both function settings and order-related interface elements. It includes handling different click locations and accessing order data.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/pos/events/applicationIconClicked.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nPoster.interface.showApplicationIconAt({\n    functions: 'App settings',\n    order: \"Show app popup\",\n});\nPoster.on('applicationIconClicked', function (data) {\n    if (data.place === 'functions') {\n        alert('App settings');\n    } \n    \n    if (data.place === 'order') {\n        alert('App order action');\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Making HTTP Request with Poster.makeRequest\nDESCRIPTION: Demonstrates how to make a cross-domain HTTP POST request with custom headers, timeout, and data payload. The request is proxied through the Poster backend and includes response handling.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/pos/requests/makeRequest.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n    Poster.makeRequest('http://mywebsite.com', {\n        headers: [\n            'Content-Type: application/json'            \n        ],\n        method: 'post',\n        data: { foo: 'bar' },\n        timeout: 10000\n    }, (answer) => {\n        if (answer && Number(answer.code) === 200) {\n            console.log(answer.result);\n        }\n    });\n```\n\n----------------------------------------\n\nTITLE: Displaying iFrame Popup Window using Poster API in JavaScript\nDESCRIPTION: This code snippet demonstrates how to use the Poster.interface.popup method to show a popup window with custom dimensions and title. The method creates an iFrame container within the popup for displaying content.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/pos/interfaces/interface-popup.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nPoster.interface.popup({\n\twidth: 600,\n\theight: 500,\n\ttitle: \"My App\"\n});\n```\n\n----------------------------------------\n\nTITLE: Subscribing to beforeOrderClose Event in JavaScript\nDESCRIPTION: This snippet demonstrates how to subscribe to the 'beforeOrderClose' event in the Poster POS system. It shows how to access the order total and display an alert before proceeding with the order closure.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/pos/events/beforeOrderClose.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nPoster.on('beforeOrderClose', (data, next) => {\n\talert(\"Order total \" + data.order.total);\n\n\tnext();\n});\n```\n\n----------------------------------------\n\nTITLE: Adding PMS Guest Assignment Button to Poster Interface\nDESCRIPTION: This snippet demonstrates how to add a 'Assign hotel guest' button to the Poster order context menu and handle its click event. It shows a popup interface for guest assignment when clicked.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/market/guidelines/pms.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Adds button to ••• menu\nPoster.interface.showApplicationIconAt({\n    order: 'Assign hotel guest',\n});\n\n// Will be triggered on button click\nPoster.on('applicationIconClicked', (data) => {\n    // Show the window with all checked in guests\n    Poster.interface.popup({\n        width: 600,\n        height: 500,\n        title: \"Assign hotel guest\"\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Handling After Order Close Event in Poster API - JavaScript\nDESCRIPTION: Event listener that triggers after an order is closed and paid. Takes order data as an argument and provides access to the total payment amount through data.order.total. The order argument contains the complete Order data type information.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/pos/events/afterOrderClose.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nPoster.on('afterOrderClose', (data) => {\n\talert(\"Total payed \" + data.order.total);\n});\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Poster Events using on() Method in JavaScript\nDESCRIPTION: Demonstrates how to subscribe to the 'beforeOrderClose' event using Poster.on(). The method takes an event name and a callback function that receives data and next parameters. The callback must call next() to continue execution flow.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/pos/events/on.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nPoster.on('beforeOrderClose', (data, next) => {\n\t\talert('I was triggered before order has been closed');\n\t\tnext();\n\t});\n```\n\n----------------------------------------\n\nTITLE: Creating Waste Record with PHP\nDESCRIPTION: Example of creating a waste record using PHP. Shows how to format the request with required parameters including storage ID, date, and ingredient details. The request is sent via POST to the storage.createWriteOff endpoint.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/storage/createWriteOff.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/storage.createWriteOff'\n    . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$writeOff = [\n    \"write_off\" => [\n        \"storage_id\"    => \"1\",\n        \"date\"          => date(\"Y-m-d H:i:s\"),\n    ],\n    \"ingredient\" => [\n        [\n            \"id\"        => \"138\",\n            \"type\"      => \"1\",\n            \"weight\"    => \"3\",\n            \"sum\"       => \"6\",\n        ]\n    ]\n];\n\n$data = sendRequest($url, 'post', $writeOff);\n```\n\n----------------------------------------\n\nTITLE: Making an API Request to Retrieve Supplies with PHP\nDESCRIPTION: Example of how to make a GET request to the storage.getSupplies endpoint to retrieve all supplies. The request requires an authentication token parameter.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/storage/getSupplies.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/storage.getSupplies'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$data = sendRequest($url);\n```\n\n----------------------------------------\n\nTITLE: Creating a Transaction Request in PHP\nDESCRIPTION: This PHP code snippet demonstrates how to construct and send a POST request to the finance.createTransactions API endpoint to create a new transaction. It defines the URL, transaction parameters (id, type, category, user_id, amounts, accounts, date), and uses a sendRequest function (not defined in the snippet) to send the data. The API token is included in the URL.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/finance/createTransactions.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/finance.createTransactions'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$transaction = [\n    'id'            => 1,\n    'type'          => 2,\n    'category'      => 7,\n    'user_id'       => 4,\n    'amount_from'   => 1000,\n    'amount_to'     => 900,\n    'account_from'  => 1,\n    'account_to'    => 2,\n    'date'          => '16112017',\n];\n\n$data = sendRequest($url, 'post', $transaction);\n\n?>\n```\n\n----------------------------------------\n\nTITLE: Adding Dish With Complex Modification\nDESCRIPTION: Example showing how to add a dish with a complex modification structure. The modification is passed as a JSON string containing modification details.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/pos/orders/orders-addProduct.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nPoster.orders.addProduct(1503219480866, {\n    id: 1, \n    modification: '[{\"m\":1,\"a\":1}]'\n})\n```\n\n----------------------------------------\n\nTITLE: Handling Cash Shift Closing Event in JavaScript\nDESCRIPTION: This code snippet demonstrates how to listen for the 'shiftClose' event using the Poster API. When a cash shift closes, the event handler logs the shift data to the console. The 'data' object passed to the handler contains a 'shift' property of type CashShift.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/pos/events/shiftClose.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nPoster.on('shiftClose', (data) => {\n    console.log(data.shift);\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing POS Settings Object Structure in JSON\nDESCRIPTION: Example structure of the Poster.settings object showing all available configuration properties including account details, currency settings, location information, and custom extras. The object contains essential system configuration data used throughout the POS system.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/pos/settings.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"accountUrl\":\"dev-example\",\n   \"country\":\"US\",\n   \"currencyCodeIso\":\"USD\",\n   \"currency\":\"$\",\n   \"currencySymbol\":\"$\",\n   \"lang\":\"ru\",\n   \"spotId\":1,\n   \"spotTabletId\":1,\n   \"subnetMask\":\"192.168.1\",\n   \"timezone\":\"America/Boston\",\n   \"usesTables\":true,\n   \"workshops\":{\n      \"0\":{\n         \"id\":1,\n         \"name\":\"Bar\",\n         \"printTickets\":1\n      },\n      \"1\":{\n         \"id\":2,\n         \"name\":\"Kitchen\",\n         \"printTickets\":1\n      }\n   },\n   \"applicationId\":\"110\",\n   \"applicationName\":\"uds\",\n   \"extras\":{\n      \"token\":\"123aksldk0123kdadk1i31kd12kdas\"\n   },\n   \"spotExtras\":{\n      \"groupId\":\"3\"\n   },\n   \"spotTabletExtras\":{\n      \"tabletIp\":\"on\"\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Scanning Barcode with Poster.interface.scanBarcode in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the Poster.interface.scanBarcode() method to scan a barcode or QR code. It returns a Promise that resolves with the scanned barcode string.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/pos/interfaces/interface-scanBarcode.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nPoster.interface.scanBarcode()\n    .then(function (barcode) {\n        console.log('barcode', barcode);\n    })\n```\n\n----------------------------------------\n\nTITLE: Implementing User Login Event Handler in Poster POS\nDESCRIPTION: Event handler implementation for the userLogin event that fires when a user logs into the register system. The handler receives a data object containing authenticated user information in the User object format. Typically triggered after PIN code entry or during waiter shift changes.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/pos/events/userLogin.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nPoster.on('userLogin', (res) => {\n\tconsole.log(res);\n})\n```\n\n----------------------------------------\n\nTITLE: Fetching Products with category and type using Joinposter API in PHP\nDESCRIPTION: This PHP code snippet demonstrates how to construct and send a GET request to the Joinposter API's `menu.getProducts` endpoint to retrieve a list of products, filtering by category ID and product type.  It requires a `sendRequest` function to handle the actual API call, which is not defined in this snippet but assumed to exist. The URL includes the API token, category ID, and type as query parameters.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/menu/getProducts.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/menu.getProducts'\n . '?token=687409:4164553abf6a031302898da7800b59fb'\n . '&category_id=15'\n . '&type=products';\n\n$data = sendRequest($url);\n?>\n```\n\n----------------------------------------\n\nTITLE: Displaying Application Icons in Poster Interface\nDESCRIPTION: Demonstrates how to use the showApplicationIconAt method to display application icons in multiple interface locations. The method accepts an object specifying placement locations and their corresponding headers.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/pos/interfaces/interface-showApplicationIconAt.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nPoster.interface.showApplicationIconAt({\n    functions: 'App settings',\n    order: 'App popup',\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Cash Shift Transaction in PHP\nDESCRIPTION: This PHP snippet demonstrates how to make a POST request to the JoinPoster API to update the properties of a cash shift transaction. The request includes details such as transaction ID, type, category, user, amount, time, fiscal status, and comment. The expected output is a JSON response containing the new transaction ID.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/finance/updateCashShiftTransaction.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/finance.updateCashShiftTransaction'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$cash_shift_transaction = [\n    'cash_shift_transaction_id' => 611,\n    'type_id'                   => 3,\n    'category_id'               => 4,\n    'user_id'                   => 3,\n    'amount'                    => 499.99,\n    'time'                      => '2017-09-21 15:00',\n    'is_fiscal'                 => 1,\n    'comment'                   => 'Waste',\n];\n\n$data = sendRequest($url, 'post', $cash_shift_transaction);\n```\n\nLANGUAGE: json\nCODE:\n```\n{  \n  \"response\":{  \n    \"cash_shift_transaction_id\":1650\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Request Storage Transfers with PHP\nDESCRIPTION: Example of making an HTTP GET request to the storage.getMoves endpoint using PHP to retrieve transfer records. The request requires an authentication token and can optionally include date range parameters.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/storage/getMoves.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/storage.getMoves'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$data = sendRequest($url);\n\n```\n\n----------------------------------------\n\nTITLE: Updating Prepack Properties with menu.updatePrepack in PHP\nDESCRIPTION: This PHP code snippet demonstrates how to update the properties of a semi-finished product using the `menu.updatePrepack` API endpoint. It constructs the URL with the authentication token, prepares the `prepack` array with updated values, and sends a POST request to the API. The `sendRequest` function is assumed to be defined elsewhere.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/menu/updatePrepack.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/menu.updatePrepack'\n    . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$prepack = [\n    'prepack_id' => 919,\n    'product_name' => 'Блины',\n    'ingredient'   => [\n        [\n            'id'     => 88,\n            'type'   => 1,\n            'brutto' => 3,\n            'netto'  => 6,\n            'lock'   => 0,\n            'clear'  => 0,\n            'cook'   => 0,\n            'fry'    => 0,\n            'stew'   => 1,\n            'bake'   => 0,\n        ],\n    ],\n];\n\n$data = sendRequest($url, 'post', $prepack);\n```\n\n----------------------------------------\n\nTITLE: Sample Reservation List JSON Response\nDESCRIPTION: JSON response structure showing detailed reservation information including customer details, reservation status, and timing\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/incomingOrders/getReservations.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"response\":[\n      {\n         \"incoming_order_id\":\"3\",\n         \"spot_id\":\"1\",\n         \"status\":0,\n         \"client_id\":4985,\n         \"first_name\":\"Степан\",\n         \"last_name\":\"Созонов\",\n         \"phone\":\"380912152764\",\n         \"email\":null,\n         \"sex\":\"2\",\n         \"birthday\":\"1996-08-26\",\n         \"created_at\":\"2018-03-22 16:50:18\",\n         \"date_reservation\":\"2018-03-22 18:20:00\"\n      }\n   ]\n}\n```\n\n----------------------------------------\n\nTITLE: Success Response from orders.setOrderClient\nDESCRIPTION: The JSON response returned when a customer is successfully added to an order. The success property indicates whether the operation was completed successfully.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/pos/orders/orders-setOrderClient.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"success\":true\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Notification Click Events in Poster POS\nDESCRIPTION: Event handler implementation for notification click events in the Poster system. The handler receives a notification object containing details like ID, date, title, message, icon, status, and waiter ID. This event is triggered when users click on popup notifications displayed via the interface.showNotification method.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/pos/events/notificationClick.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nPoster.on('notificationClick', (notification) => {\n\tconsole.log(\"Notification clicked\", notification);\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Data from Poster API\nDESCRIPTION: Fetches user details by their unique ID, handling cases where the user might not exist. Returns user data or false if the user is not found.\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/pos/users/users-get.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nPoster.users.get(1).then((user) => {\n\tif ( ! user) {\n\t\treturn;\n\t}\n\n\tconsole.log(user.name);\n});\n```\n\n----------------------------------------\n\nTITLE: Querying Active User Data with Poster API JavaScript\nDESCRIPTION: Example of using the Poster.users.getActiveUser() method to fetch the currently active user's data. The method returns a Promise that resolves to either false (if no user found) or a User object containing the user's information.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/pos/users/users-getActiveUser.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nPoster.users.getActiveUser().then((user) => {\n\tif (!user) {\n\t\treturn;\n\t}\n\n\tconsole.log(user.name);\n});\n```\n\n----------------------------------------\n\nTITLE: Making API Request - PHP\nDESCRIPTION: Example of making an HTTP GET request to the clients.getClients endpoint with pagination parameters using PHP. The request includes token authentication and pagination parameters num and offset.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/clients/getClients.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/clients.getClients'\n . '?token=687409:4164553abf6a031302898da7800b59fb'\n . '&num=100'\n . '&offset=0';\n\n$data = sendRequest($url);\n```\n\n----------------------------------------\n\nTITLE: Creating Storage Transfer with PHP\nDESCRIPTION: PHP code example for creating a transfer between storages. The example shows how to structure the request with moving details including date, source and destination storages, and ingredient information.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/storage/createMoving.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/storage.createMoving'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$moving = [\n    \"moving\" => [\n        \"date\"          => \"2015-11-18 22:35:54\",\n        \"from_storage\"  => \"1\",\n        \"to_storage\"    => \"2\",\n        \"comment\"       => \"Comment for moving\"\n    ],\n    \"ingredient\" => [\n        [\n            \"id\"        => \"138\",\n            \"type\"      => \"1\",\n            \"num\"       => \"3\",\n            \"sum\"       => \"6\",\n        ]\n    ]\n];\n\n$data = sendRequest($url, 'post', $moving);\n```\n\n----------------------------------------\n\nTITLE: Removing Product Category with PHP\nDESCRIPTION: PHP code snippet demonstrating how to remove a product category using the JoinPoster API by providing the category ID and authentication token\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/menu/removeCategory.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/menu.removeCategory'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$category = [\n    'category_id' => 52,\n];\n\n$data = sendRequest($url, 'post', $category);\n```\n\n----------------------------------------\n\nTITLE: Closing Active Order with Cash Payment\nDESCRIPTION: Demonstrates how to fetch an active order and close it with cash payment using the Poster API. The function first gets the active order, then closes it by passing the order ID and payment details.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/pos/orders/orders-closeOrder.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nasync function closeOrder() {\n    const active = await Poster.orders.getActive();\n    const res = await Poster.orders.closeOrder(active.order.id, {\n        payment: { \n            cash: active.order.total \n        },\n    });\n    \n    console.log(res);\n}\n```\n\n----------------------------------------\n\nTITLE: PHP API Request for Table Reservation\nDESCRIPTION: Constructs an HTTP GET request to retrieve available tables for reservation with specific parameters like venue ID, reservation date, duration, and guest count\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/incomingOrders/getTablesForReservation.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/incomingOrders.getTablesForReservation'\n . '?token=687409:4164553abf6a031302898da7800b59fb'\n . '&date_reservation=15-07-2018 13:34'\n . '&duration=7200'\n . '&spot_id=1'\n . '&guests_count=3';\n\n$data = sendRequest($url);\n```\n\n----------------------------------------\n\nTITLE: Creating a Customer with the Poster API using clients.create method\nDESCRIPTION: This snippet demonstrates how to create a new customer on the register using the Poster.clients.create method. It shows the minimum required fields (client_name and client_groups_id_client) along with optional fields like client_sex, and handles the Promise response.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/pos/clients/clients-create.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nPoster.clients.create({\n        client: {\n            client_sex: 1,\n            client_name: \"Vladimir Ivanchenko\", \n            client_groups_id_client: 1\n        }\n    })\n    .then(function (client) {\n        console.log('new client', client);\n    });\n```\n\n----------------------------------------\n\nTITLE: Retrieving Products with products.get Method in JavaScript\nDESCRIPTION: This example demonstrates how to fetch information about multiple products using the Poster.products.get() method. The method accepts an array of product IDs and returns a Promise that resolves with product data.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/pos/products/products-get.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nPoster.products.get([1, 2])\n    .then((products) => {\n        console.log(products);\n    })\n```\n\n----------------------------------------\n\nTITLE: Active Order Response Structure\nDESCRIPTION: Example JSON response showing the structure of an active order. Contains order details including ID, dates, status, user information, table details, products, payment information, and other order-specific data.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/pos/orders/orders-getActive.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"order\":{\n    \"id\":1508308514369,\n    \"dateStart\":1508308514369,\n    \"dateClose\":0,\n    \"datePrint\":0,\n    \"status\":1,\n    \"userId\":4,\n    \"tableId\":8,\n    \"orderName\":14,\n    \"guestsCount\":2,\n    \"products\":{\n      \"0\":{\n        \"id\":7,\n        \"count\":1,\n        \"price\":0,\n        \"printedNum\":0\n      },\n      \"1\":{\n        \"id\":1,\n        \"count\":1,\n        \"price\":25,\n        \"printedNum\":0\n      }\n    },\n    \"subtotal\":25,\n    \"total\":25,\n    \"discount\":0,\n    \"clientId\":0,\n    \"payType\":\"\",\n    \"payedSum\":0,\n    \"payedCard\":0,\n    \"payedCash\":0,\n    \"payedBonus\":0,\n    \"loyaltyAppId\":0,\n    \"parentId\":0,\n    \"tipIncluded\":0,\n    \"tipSum\":0,\n    \"comment\":\"\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Product Object Structure in JSON\nDESCRIPTION: This snippet demonstrates the structure of a Product object in JSON format. It includes various properties such as ID, deletion status, visibility, fiscal information, pricing, and tax details. This object representation is crucial for understanding the data model of products in the system.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/pos/types/product.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"id\":162,\n   \"delete\":0,\n   \"hidden\":0,\n   \"fiscal\":0,\n   \"fiscalProgram\":0,\n   \"nodiscount\":0,\n   \"parent\":0,\n   \"sortOrder\":0,\n   \"weightFlag\":0,\n   \"workshop\":2,\n   \"price\":10.5,\n   \"cookingTime\":0,\n   \"barcode\":\"\",\n   \"picture\":\"\",\n   \"color\":\"white\",\n   \"taxType\":0,\n   \"taxValue\":0,\n   \"taxId\":0,\n   \"taxName\":\"\",\n   \"extras\":{\n\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Listening for New Order Creation with orderOpen Event in Poster API\nDESCRIPTION: This code snippet demonstrates how to listen for the orderOpen event, which is triggered after a new order is created in the Poster system. The event handler receives an order object containing the details of the newly created order.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/pos/events/orderOpen.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nPoster.on('orderOpen', (order) => {\n\tconsole.log(order);\n})\n```\n\n----------------------------------------\n\nTITLE: Customer Object Structure Example in JSON\nDESCRIPTION: Example JSON structure showing all available properties of a Customer object including personal information, loyalty program details, contact information, and system tracking fields.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/pos/types/client.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"id\":85,\n   \"firstname\":\"John\",\n   \"lastname\":\"Smith\",\n   \"loyaltyType\":1,\n   \"discount\":0,\n   \"hidden\":0,\n   \"groupId\":1,\n   \"cardNumber\":\"39237515928\",\n   \"bonus\":0,\n   \"totalPayedSum\":0,\n   \"city\":\"\",\n   \"address\":\"0\",\n   \"comment\":\"\",\n   \"email\":\"ivanchenko@gmail.com\",\n   \"birthday\":\"1990-08-03\",\n   \"phone\":\"+380682152264\",\n   \"extras\":{\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: finance.createTransactions API Response Example\nDESCRIPTION: This JSON snippet shows a typical successful response from the finance.createTransactions API endpoint. The 'response' field contains the ID of the newly created transaction.  This ID can be used for further operations or tracking of the transaction.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/finance/createTransactions.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"response\":600\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Ingredients via API in PHP\nDESCRIPTION: This PHP code snippet demonstrates how to create a list of ingredients using the `menu.createIngredients` API endpoint. It defines the API URL, constructs the ingredient array, and sends a POST request to the API. The `sendRequest` function is assumed to exist and handle the actual API call.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/menu/createIngredients.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/menu.createIngredients'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$ingredients = [\n    [\n        'ingredient_name' => 'Яблоко',\n        'type'            => 'p',\n    ],\n    [\n        'ingredient_name' => 'Груша',\n        'type'            => 'p',\n    ]\n];\n\n$data = sendRequest($url, 'post', $ingredients);\n```\n\n----------------------------------------\n\nTITLE: Recovering a Product via Poster API in PHP\nDESCRIPTION: This PHP snippet demonstrates how to recover a product using the Poster API. It constructs a POST request with the product details, sends it to the designated API endpoint, and handles the API's response. It requires a valid API token and product details such as `product_id`, `menu_category_id`, `workshop`, and `tax_id`.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/menu/recoverProduct.md#2025-04-21_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/menu.recoverProduct'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$product = [\n    'product_id' => 48,\n    'menu_category_id' => 10,\n    'workshop' => 3,\n    'tax_id' => 1,\n];\n\n$data = sendRequest($url, 'post', $product);\n\n```\n\n----------------------------------------\n\nTITLE: Handling Device Messages in POS JavaScript\nDESCRIPTION: This snippet demonstrates how to set up an event listener for device messages in a POS environment using JavaScript. It logs the received message and the device it came from.\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/device/transport/events/onMessage.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nPoster.on('deviceMessage', (data) => {\n    console.log('New message', data.message);\n\tconsole.log('From device', data.device);\n})\n```\n\n----------------------------------------\n\nTITLE: Sales Analytics Response Format - Aggregated Data\nDESCRIPTION: Example JSON response showing aggregated sales data including hourly and weekly breakdowns, along with counter metrics like revenue, profit, and average receipt values.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/dash/getAnalytics.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"response\":{\n    \"data\":[\n      \"169255.7100\",\n      \"160327.7300\",\n      \"48259.0100\",\n      \"1470.0000\"\n    ],\n    \"data_hourly\":[\n      \"36520.2400\",\n      \"17785.4500\",\n      \"19163.5600\",\n      \"12688.5200\",\n      0,\n      0,\n      0,\n      0,\n      \"13747.4500\",\n      \"19465.3900\",\n      \"8701.5900\",\n      \"12727.5300\",\n      \"12029.0000\",\n      \"18482.3600\",\n      \"18391.7200\",\n      \"25149.2900\",\n      \"23136.1600\",\n      \"15255.1100\",\n      \"14300.2800\",\n      \"17448.0000\",\n      \"28419.3000\",\n      \"23969.5500\",\n      \"19392.5800\",\n      \"22539.3700\"\n    ],\n    \"data_weekday\":[\n      0,\n      \"169255.7100\",\n      \"160327.7300\",\n      \"48259.0100\",\n      \"1470.0000\",\n      0,\n      0\n    ],\n    \"counters\":{\n      \"revenue\":\"379312.4500\",\n      \"profit\":\"315131.6900\",\n      \"transactions\":\"248\",\n      \"visitors\":\"744\",\n      \"average_receipt\":1535.6779352227,\n      \"average_time\":\"125.76268347\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Response of Client Data in JSON\nDESCRIPTION: This JSON snippet presents an example of the response data returned by the `clients.getClient` API method. It contains various client properties, such as ID, first name, last name, patronymic, discount, bonus, total paid sum, contact details, birthday, and loyalty program information. This data represents a single client and includes details about their group, accumulated products, and prize products.\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/clients/getClient.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"response\":[\n    {\n      \"client_id\":\"38\",\n      \"firstname\":\"Попова\",\n      \"lastname\":\"000022\",\n      \"patronymic\":\"Елена\",\n      \"discount_per\":\"0\",\n      \"bonus\":\"0\",\n      \"total_payed_sum\":\"417000\",\n      \"date_activale\":\"2016-04-23 05:14:26\",\n      \"phone\":\"+380 50 11-11-111\",\n      \"phone_number\":\"380501111111\",\n      \"email\":\"contact@joinposter.com\",\n      \"birthday\":\"1986-11-23\",\n      \"card_number\":\"0000000000222\",\n      \"client_sex\":\"0\",\n      \"country\":\"\",\n      \"city\":\"\",\n      \"comment\":\"\",\n      \"address\":\"\",\n      \"client_groups_id\":\"7\",\n      \"client_groups_name\":\"Постоянный клиент\",\n      \"client_groups_discount\":\"0\",\n      \"loyalty_type\":\"2\",\n      \"birthday_bonus\":\"0\",\n      \"accumulation_products\":{\n        \"4\":{\n          \"promotion_id\":\"4\",\n          \"products\":[\n            {\n              \"count\":\"3\",\n              \"sum\":540,\n              \"product_id\":\"24\",\n              \"modification_id\":\"0\"\n            }\n          ]\n        }\n      },\n      \"prize_products\":[\n        {\n          \"prize_product_id\":\"301\",\n          \"promotion_id\":\"4\",\n          \"conditions\":{\n            \"bonus_products\":[\n              {\n                \"type\":\"1\",\n                \"id\":\"1\"\n              }\n            ],\n            \"bonus_products_pcs\":1,\n            \"bonus_products_g\":0,\n            \"bonus_products_condition_type\":\"1\",\n            \"bonus_products_condition_value\":\"100\"\n          },\n          \"date_accrual\":\"2016-05-11 11:40:10\"\n        }\n      ],\n      \"ewallet\": \"1000\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Subscribing to printFiscal Event in JavaScript\nDESCRIPTION: This code snippet demonstrates how to subscribe to the 'printFiscal' event using the Poster.on() method. The event listener logs the response to the console.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/pos/events/printFiscal.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nPoster.on('printFiscal', (res) => {\n    console.log(res);\n});\n```\n\n----------------------------------------\n\nTITLE: Closing Popup Window Using Poster Interface\nDESCRIPTION: A simple method call that closes any currently open popup window in the Poster interface. This method requires no parameters and can be called directly from the Poster interface object.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/pos/interfaces/interface-closePopup.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nPoster.interface.closePopup();\n```\n\n----------------------------------------\n\nTITLE: Customizing Checkout Window with Custom Pay Button in JavaScript\nDESCRIPTION: This snippet shows how to customize the checkout window by adding a custom pay button. It uses the 'beforeOrderClose' event to set a custom label for the payment button on the checkout screen.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/pos/events/beforeOrderClose.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nPoster.on('beforeOrderClose', (data, next) => {\n\tnext({ payButton: 'My Pay Button' });\n});\n```\n\n----------------------------------------\n\nTITLE: Removing Product from Order using Poster API\nDESCRIPTION: This code snippet shows how to remove a product from an order using the `Poster.orders.changeProductCount` method. By setting the `count` property of the product object to 0, the product is removed from the order. The order ID and product ID are required parameters.\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/pos/orders/orders-changeProductCount.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nPoster.orders.changeProductCount(1503219480866, {id: 1, count: 0})\n```\n\n----------------------------------------\n\nTITLE: Creating a Supplier with PHP in Poster API\nDESCRIPTION: Example of creating a supplier using the storage.createSupplier endpoint with PHP. This code sends a POST request with supplier details including name, address, phone number, identification codes, and comments.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/storage/createSupplier.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/storage.createSupplier'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$supplier = [\n    'supplier_name'    => 'Валера',\n    'supplier_adress'  => 'пр. Петровского',\n    'supplier_phone'   => 380671234567,\n    'supplier_code'    => 32855961,\n    'supplier_tin'     => 6449013711,\n    'supplier_comment' => 'Мясо',\n];\n\n$data = sendRequest($url, 'post', $supplier);\n```\n\n----------------------------------------\n\nTITLE: Updating Order Product Count Using PHP\nDESCRIPTION: PHP example demonstrating how to make a POST request to update product quantity in an order. Shows setting up the request URL with authentication token and structuring the transaction data including spot, product, and modification details.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/transactions/changeTransactionProductCount.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/transactions.changeTransactionProductCount'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$transaction = [\n    'spot_id'        => 1,\n    'spot_tablet_id' => 1,\n    'transaction_id' => 1950,\n    'product_id'     => 112,\n    'modification'   => '[{\"m\":19,\"a\":1}]',\n    'count'          => 2,\n];\n\n$data = sendRequest($url, 'post', $transaction);\n```\n\n----------------------------------------\n\nTITLE: Making a POST Request to Poster API with PHP\nDESCRIPTION: This PHP snippet demonstrates how to construct and send a POST request to the finance.updateAccount API endpoint for updating account information. It requires a valid API token for authentication. Key parameters like account_id, account_name, currency_id, type, and balance_start must be included in the request to specify the account details. The sendRequest function is assumed to be defined elsewhere, and it is crucial for executing the HTTP request.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/finance/updateAccount.md#2025-04-21_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/finance.updateAccount'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$account = [\n    'account_id' => 3,\n    'account_name' => 'Сейф',\n    'currency_id' => 3,\n    'type' => 1,\n    'balance_start' => 0,\n];\n\n$data = sendRequest($url, 'post', $account);\n\n```\n\n----------------------------------------\n\nTITLE: Handling Order Client Change in JavaScript\nDESCRIPTION: This snippet listens for the 'orderClientChange' event and logs the data object to the console. The data object contains information about the client and the order, specifically the client ID and order ID. It is crucial for developers implementing order adjustments in an application using the Poster framework.\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/pos/events/orderClientChange.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nPoster.on('orderClientChange', (data) => {\n\tconsole.log(data);\n})\n```\n\n----------------------------------------\n\nTITLE: Payments Report Response Example (Daily) in JSON\nDESCRIPTION: This JSON snippet shows an example of the response from the `dash.getPaymentsReport` API endpoint when retrieving daily payments statistics. It contains a list of days with payment details for each day, including cash, card, certificate, bonus, and incust payments, as well as a total summary of all payments.\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/dash/getPaymentsReport.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"response\": {\n        \"days\": [\n            {\n                \"date\": \"2017-05-23\",\n                \"payed_cash_sum\": \"1607996\",\n                \"payed_card_sum\": \"365552\",\n                \"payed_cert_in_sum\": \"0\",\n                \"payed_cert_out_sum\": \"0\",\n                \"payed_bonus_sum\": \"0\",\n                \"payed_incust_sum\": \"0\",\n                \"payed_sum_sum\": \"1973548\"\n            },\n            {\n                \"date\": \"2017-06-03\",\n                \"payed_cash_sum\": \"1108969\",\n                \"payed_card_sum\": \"1090915\",\n                \"payed_cert_in_sum\": \"0\",\n                \"payed_cert_out_sum\": \"0\",\n                \"payed_bonus_sum\": \"0\",\n                \"payed_incust_sum\": \"0\",\n                \"payed_sum_sum\": \"2199884\"\n            }\n        ],\n        \"total\": {\n            \"payed_cash_sum\": 2716965,\n            \"payed_card_sum\": 1456467,\n            \"payed_third_party_sum\": 0,\n            \"payed_cert_in_sum\": 0,\n            \"payed_cert_out_sum\": 0,\n            \"payed_bonus_sum\": 0,\n            \"payed_incust_sum\": 0,\n            \"payed_sum_sum\": 4173432\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sending payment notification to Poster API\nDESCRIPTION: This PHP snippet demonstrates how to send a payment notification to the Poster API using the payments.addTransactionPayment endpoint. It constructs the URL, defines the payment parameters (including a signature), and sends a POST request. It requires the `sendRequest` function to be defined elsewhere.\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/payments/addTransactionPayment.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?\n$url = 'https://joinposter.com/api/payments.addTransactionPayment?' .\n  'format=json';\n\n$application_secret = '123123123123';\n\n$payment = [\n  'type' => 'application-name',\n  'merchant_id' => 3432343,\n  'transaction_id' => '1474012061849',\n  'payed_sum' => 369.00,\n  'credited_sum' => 365.31,\n];\n\n$payment['sign'] = md5(implode(':', $payment) . ':' . $application_secret);\n\n$answer = sendRequest($url, 'post', $payment);\n?>\n```\n\n----------------------------------------\n\nTITLE: Adding Product Without Modification\nDESCRIPTION: Example showing how to add a basic product to an order without any modifications. Takes order ID and product ID as parameters.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/pos/orders/orders-addProduct.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nPoster.orders.addProduct(1503219480866, {id: 1})\n```\n\n----------------------------------------\n\nTITLE: Setting Order Comment using Poster API in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the orders.setOrderComment method to set a comment on an order. It takes two arguments: the order ID (in unix-timestamp milliseconds format) and the comment text.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/pos/orders/orders-setOrderComment.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nPoster.orders.setOrderComment(1503219480866, 'Order to go')\n```\n\n----------------------------------------\n\nTITLE: Signature Verification in JavaScript\nDESCRIPTION: JavaScript implementation for verifying request signatures. Concatenates URL, request body, timestamp, and secret key to generate and verify MD5 hash signature.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/pos/requests/makeRequest.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar md5 = require('md5');\n\nfunction checkSign(url, headers, body, secret) {\n    var signStr = url + (body ? JSON.stringify(body) : \"\") + headers['x-poster-time'] + secret;\n    var signature = md5(signStr);\n\n    return signature === headers['x-poster-signature'];\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New User via API in Poster\nDESCRIPTION: This snippet demonstrates how to create a new user in the Poster system using a POST request to the API. It includes required parameters such as name, login, and password, as well as optional fields like phone and email.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/pos/users/index.md#2025-04-21_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST \"https://joinposter.com/api/users.createUser\" \\\n-H \"Content-Type: application/x-www-form-urlencoded\" \\\n-H \"Authorization: Bearer YOUR_TOKEN\" \\\n-d \"name=John Smith\" \\\n-d \"login=john\" \\\n-d \"password=12345\" \\\n-d \"phone=380001234567\" \\\n-d \"email=john@gmail.com\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Menu Categories in PHP\nDESCRIPTION: PHP code snippet demonstrating how to make an API request to fetch product categories from Joinposter using a token and optional fiscal parameter\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/menu/getCategories.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/menu.getCategories'\n . '?token=687409:4164553abf6a031302898da7800b59fb'\n . '&fiscal=0';\n\n$data = sendRequest($url);\n```\n\n----------------------------------------\n\nTITLE: PHP Request to transactions.getTransactions Endpoint\nDESCRIPTION: Example of making an HTTP GET request to retrieve order transactions. Shows how to construct the URL with pagination and date range parameters.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/transactions/getTransactions.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/transactions.getTransactions'\n . '?token=687409:4164553abf6a031302898da7800b59fb'\n . '&date_from=2017-11-30'\n . '&date_to=2017-11-30'\n . '&per_page=10'\n . '&page=5';\n\n$data = sendRequest($url);\n```\n\n----------------------------------------\n\nTITLE: Sending SMS via Poster API in PHP\nDESCRIPTION: This PHP snippet demonstrates how to send an SMS using the clients.sendSms API method. It constructs the API URL with a token, prepares the SMS data including phone number and message, and sends a POST request.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/clients/sendSms.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/clients.sendSms'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$sms = [\n    'phone' => 380684113524,\n    'message' => 'У вас осталось 10 бонусов на счету'\n];\n\n$data = sendRequest($url, 'post', $sms);\n\n```\n\n----------------------------------------\n\nTITLE: Updating Location Properties using PHP with access.updateSpot API\nDESCRIPTION: This PHP code snippet demonstrates how to make an HTTP POST request to update location properties using the access.updateSpot API method. It includes setting up the request URL with an authentication token and preparing the location data to be updated.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/access/updateSpot.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/access.updateSpot'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$spot = [\n    'spot_id'   => 2,\n    'spot_name' => 'New name',\n];\n\n$data = sendRequest($url, 'post', $spot);\n```\n\n----------------------------------------\n\nTITLE: Changing Product Count in Order using Poster API\nDESCRIPTION: This code snippet demonstrates how to use the `Poster.orders.changeProductCount` method to change the quantity of a specific product in an order. It takes the order ID and an object containing the product ID and the new quantity as parameters.  The function returns a Promise that resolves with the updated order object.\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/pos/orders/orders-changeProductCount.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nPoster.orders.changeProductCount(1503219480866, {id: 1, count: 2})\n```\n\n----------------------------------------\n\nTITLE: Update Dish Properties with menu.updateDish in PHP\nDESCRIPTION: This PHP code snippet demonstrates how to update dish properties using the `menu.updateDish` API endpoint. It constructs the request URL with a token and prepares an array containing the dish properties to be updated, including dish ID, product name, barcode, category, prices, visibility, ingredients, and modification groups.  The code then sends a POST request to the API with the dish data.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/menu/updateDish.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/menu.updateDish'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$dish = [\n    'dish_id'                => 171,\n    'product_name'           => 'Гамбургер с телятиной',\n    'barcode'                => 159687,\n    'menu_category_id'       => 10,\n    'different_spots_prices' => 1,\n    'workshop'               => 2,\n    'weight_flag'            => 0,\n    'product_color'          => 'red',\n    'nodiscount'             => 0,\n    'ingredient'             => [\n        [\n            'id'     => 815,\n            'type'   => 1,\n            'brutto' => 3,\n            'netto'  => 6,\n            'lock'   => 1,\n            'clear'  => 1,\n        ]\n    ],\n    'price' => [\n        1 => 55,\n        2 => 57,\n    ],\n    'visible' => [\n        1 => 1,\n        2 => 0,\n    ],\n    'modificationgroup'      => [\n        [\n            'type'          => 1,\n            'minNum'        => 1,\n            'maxNum'        => 1,\n            'name'          => 'Картофель',\n            'modifications' => [\n                [\n                    'ingredientId' => 814,\n                    'type'         => 1,\n                    'name'         => 'Вареный картофель',\n                    'brutto'       => 200,\n                    'price'        => 230,\n                ],\n                [\n                    'ingredientId' => 816,\n                    'type'         => 1,\n                    'name'         => 'Фри',\n                    'brutto'       => 150,\n                    'price'        => 280,\n                ],\n            ],\n        ]\n    ],\n];\n\n$data = sendRequest($url, 'post', $dish);\n\n```\n\n----------------------------------------\n\nTITLE: Fetching Customer Data by ID using Poster.clients.get in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the Poster.clients.get method to retrieve customer data by their ID. It returns a Promise that resolves to the customer object or false if no customer is found. The example logs the customer's phone number if found.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/pos/clients/clients-get.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nPoster.clients.get(1).then((client) => {\n\tif ( ! client) {\n\t\treturn;\n\t}\n\n\tconsole.log(client.phone);\n});\n```\n\n----------------------------------------\n\nTITLE: Subscribing to the printFiscal Event in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to subscribe to the 'printFiscal' event using the `Poster.on` method. The callback function receives the event data (`res`) which contains information about the printed fiscal receipt, such as order details and user information. The example logs the received data to the console.\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/pos/events/printFiscal.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nPoster.on('printFiscal', (res) => {\n    console.log(res);\n});\n```\n\n----------------------------------------\n\nTITLE: JSON Response for Employee Creation in Poster POS API\nDESCRIPTION: This JSON snippet shows the expected response format after successfully creating an employee using the access.createEmployee API method. The response contains the ID of the newly created employee.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/access/createEmployee.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"response\":15\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Storage Pack using PHP with Poster API\nDESCRIPTION: This PHP snippet demonstrates how to create a storage pack using the Poster API. It constructs the API URL with a token, defines the pack details, and sends a POST request to create the pack.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/storage/createPack.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/storage.createPack'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$pack = [\n    'name' => 'Ящик',\n    'unit' => 'kg',\n    'count' => 0.5,\n];\n\n$data = sendRequest($url, 'post', $pack);\n```\n\n----------------------------------------\n\nTITLE: Updating Customer Purchase Total Using PHP\nDESCRIPTION: PHP example showing how to make a POST request to update a customer's total purchase amount. The request includes a client_id and count parameter to specify the amount to add or subtract.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/clients/changeClientPayedSum.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/clients.changeClientPayedSum'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$sum = [\n  'client_id' => 50,\n  'count'     => 20,\n];\n\n$data = sendRequest($url, 'post', $sum);\n```\n\n----------------------------------------\n\nTITLE: Creating a Station with menu.createWorkshop in PHP\nDESCRIPTION: This PHP code snippet demonstrates how to create a new station using the menu.createWorkshop API endpoint. It sends a POST request with the required 'workshop_name' parameter to the specified URL. The sendRequest function is assumed to be defined elsewhere and handles the actual HTTP request.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/menu/createWorkshop.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/menu.createWorkshop'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$workshop = [\n    'workshop_name' => 'Мангал',\n];\n\n$data = sendRequest($url, 'post', $workshop);\n```\n\n----------------------------------------\n\nTITLE: Retrieving and Messaging Devices in JavaScript POS\nDESCRIPTION: This snippet demonstrates how to retrieve all connected devices of type 'platform' and send a message to each device. It uses the Poster.devices.getAll() method and returns a Promise with an array of Device objects.\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/device/transport/methods/getAll.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Получаем устройства \nlet devices = await Poster.devices.getAll({ type: 'platform' });\n\nconsole.log(devices);\n\ndevices.forEach((device) => {\n    device.sendMessage({ text: 'Hello' });\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Product Without Modifications in PHP\nDESCRIPTION: API request to update a product's basic properties with different prices across locations using Joinposter menu API\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/menu/updateProduct.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/menu.updateProduct'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$product = [\n    'id'                     => 142,\n    'product_name'           => 'Батон',\n    'menu_category_id'       => 0,\n    'workshop'               => 1,\n    'weight_flag'            => 0,\n    'color'                  => 'blue',\n    'different_spots_prices' => 1,\n    'modifications'          => 0,\n    'barcode'                => '4820098749621',\n    'price[1]'               => 3100,\n    'price[2]'               => 3200,\n    'visible'                => 1,\n    'fiscal_code'            => 1234567890,\n];\n\n$data = sendRequest($url, 'post', $product);\n```\n\n----------------------------------------\n\nTITLE: Change Fiscal Status API Request Example in PHP\nDESCRIPTION: Example of making a POST request to change fiscal status of a transaction. Shows how to structure the request with transaction ID and product details including counts, modifications, and promotions.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/transactions/changeFiscalStatus.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/transactions.changeFiscalStatus'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$postData = [\n    'transaction_id' => 1322,\n    'products' => [\n        [\n            'product_id' => 120,\n            'promotion_id' => 2,\n            'modification_id' => 24,\n            'count' => 3,   \n        ],\n        [\n            'product_id' => 122,\n            'promotion_id' => 0,\n            'modification_id' => 0,\n            'count' => 0.350,   \n        ],\n    ],\n];\n\n$data = sendRequest($url, 'post', $postData);\n```\n\n----------------------------------------\n\nTITLE: Adding Product to Order - PHP Request Example\nDESCRIPTION: Example of making a POST request to add a product to an order using PHP. Shows how to structure the request with required parameters including spot_id, spot_tablet_id, transaction_id, product_id, and modification data.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/transactions/addTransactionProduct.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/transactions.addTransactionProduct'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$transaction = [\n    'spot_id'        => 1,\n    'spot_tablet_id' => 1,\n    'transaction_id' => 1950,\n    'product_id'     => 112,\n    'modification'   => '[{\"m\":19,\"a\":1}]',\n];\n\n$data = sendRequest($url, 'post', $transaction);\n```\n\n----------------------------------------\n\nTITLE: Setting Order Bonus Amount with Poster API in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the orders.setOrderBonus method to set the amount paid via an external system for a specific order. It requires the order ID and the bonus amount as arguments.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/pos/orders/orders-setOrderBonus.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nPoster.orders.setOrderBonus(1503219480866, 100)\n```\n\n----------------------------------------\n\nTITLE: Opening a Register Shift with finance.openCashShift in PHP\nDESCRIPTION: This code snippet demonstrates how to open a register shift using the `finance.openCashShift` method in the Joinposter API. It defines the API endpoint URL, prepares the request parameters including spot ID, user ID, amount, time, and fiscal status, and sends a POST request to the API. The `sendRequest` function is assumed to be defined elsewhere.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/finance/openCashShift.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/finance.openCashShift'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$cash_shift = [\n    'spot_id'   => 1,\n    'user_id'   => 1,\n    'amount'    => 123.45,\n    'time'      => '2017-09-21 10:00',\n    'is_fiscal' => 1,\n];\n\n$data = sendRequest($url, 'post', $cash_shift);\n```\n\n----------------------------------------\n\nTITLE: Sending GET Request for Dish Composition in PHP\nDESCRIPTION: This PHP snippet demonstrates how to construct and send a GET request to the Poster API to retrieve the composition of a sold dish. It includes parameters for transaction ID, product ID, and modifier ID.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/transactions/getTransactionDishComposition.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/transactions.getTransactionDishComposition'\n . '?token=687409:4164553abf6a031302898da7800b59fb'\n . '&transaction_id=76'\n . '&product_id=82'\n . '&modificator_id=22';\n\n$data = sendRequest($url);\n```\n\n----------------------------------------\n\nTITLE: Creating a New Account Using Poster API in PHP\nDESCRIPTION: This PHP snippet demonstrates how to initiate a request to create a new account using the Poster API. The code constructs a POST request to the API endpoint with necessary parameters such as account name, currency ID, account type, and starting balance. Dependencies include a function to send HTTP POST requests. The expected input is an array of account details, and the output is a JSON response with the new account's ID.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/finance/createAccount.md#2025-04-21_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/finance.createAccount'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$account = [\n    'account_name' => 'Сейф',\n    'currency_id' => 3,\n    'type' => 1,\n    'balance_start' => 0,\n];\n\n$data = sendRequest($url, 'post', $account);\n\n```\n\n----------------------------------------\n\nTITLE: Updating Customer Points with Poster API in PHP\nDESCRIPTION: This PHP snippet executes an HTTP POST request to the Poster API for updating customer points in a loyalty program. Dependencies include a function sendRequest that performs the HTTP request. The POST parameters include client_id, count, and optionally block_webhook. The response is an updated points count if successful.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/clients/changeClientBonus.md#2025-04-21_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/clients.changeClientBonus'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$bonus = [\n  'client_id' => 7,\n  'count'     => 10,\n];\n\n$data = sendRequest($url, 'post', $bonus);\n```\n\n----------------------------------------\n\nTITLE: Updating Waste Records with PHP using storage.updateWriteOff API\nDESCRIPTION: This PHP code snippet demonstrates how to update an existing waste record. It includes setting the waste ID, storage ID, date, and ingredient details with their quantities and costs.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/storage/updateWriteOff.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/storage.updateWriteOff'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$writeOff = [\n    \"write_off\" => [\n        \"id\"  => \"56\",\n        \"storage_id\"    => \"1\",\n        \"date\"          => date(\"Y-m-d H:i:s\"),\n    ],\n    \"ingredient\" => [\n        [\n            \"id\"        => \"138\",\n            \"type\"      => \"1\",\n            \"weight\"    => \"3\",\n            \"sum\"       => \"6\",\n        ]\n    ]\n];\n\n$data = sendRequest($url, 'post', $writeOff);\n```\n\n----------------------------------------\n\nTITLE: Update Financial Category using Joinposter API\nDESCRIPTION: This PHP code snippet demonstrates how to update a financial category using the Joinposter API's `finance.updateCategory` method. It constructs the API URL, defines the category parameters to be updated, and sends a POST request with the category data.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/finance/updateCategory.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/finance.updateCategory'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$category = [\n    'category_id'       => 13,\n    'category_name'     => 'Коммуналка',\n    'category_parent'   => 0,\n    'operations_in'     => 1, \n    'operations_out'    => 1,\n\n];\n\n$data = sendRequest($url, 'post', $category);\n```\n\n----------------------------------------\n\nTITLE: Response Example for Reservation Creation in JSON\nDESCRIPTION: This JSON snippet represents the expected response format from the JoinPoster API after submitting a reservation. It includes various fields like incoming_order_id, customer details, reservation status, and timestamps. This will assist developers in parsing the API response correctly.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/incomingOrders/createReservation.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"response\":{\n      \"incoming_order_id\":\"4\",\n      \"type\":\"2\",\n      \"spot_id\":\"1\",\n      \"status\":0,\n      \"client_id\":4985,\n      \"first_name\":\"Владимир\",\n      \"last_name\":\"Иванов\",\n      \"phone\":\"380684112224\",\n      \"email\":\"example@gmail.com\",\n      \"sex\":\"2\",\n      \"birthday\":\"1996-08-26\",\n      \"address\":\"\",\n      \"guests_count\":\"1\",\n      \"comment\":\"\",\n      \"created_at\":\"2018-03-22 17:02:41\",\n      \"updated_at\":\"2018-03-22 17:02:41\",\n      \"transaction_id\":null,\n      \"fiscal_spreading\":\"0\",\n      \"fiscal_method\":\"\",\n      \"promotion\":null,\n      \"date_reservation\":\"2018-03-22 18:20:00\",\n      \"duration\":\"2000\"\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Requesting Ingredient Inventory Check in PHP\nDESCRIPTION: This PHP snippet demonstrates how to make a GET request to the storage.getInventoryIngredients endpoint. It constructs the URL with the required token and storage_id parameters.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/storage/getInventoryIngredients.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/storage.getInventoryIngredients'\n . '?token=687409:4164553abf6a031302898da7800b59fb'\n . '&storage_id=1';\n\n$data = sendRequest($url);\n```\n\n----------------------------------------\n\nTITLE: Handling Order Closure in Poster PMS Integration\nDESCRIPTION: This snippet shows how to intercept the order closure process in Poster. It checks if the order is associated with a reservation and displays a popup for the cashier to choose the payment location (venue or front desk).\nSOURCE: https://github.com/joinposter/docs/blob/master/en/market/guidelines/pms.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Will be triggered when cashier press Pay\nPoster.on('beforeOrderClose', (data, next) => {\n    const { order } = data;\n    \n    const reservation = localStorage.getItem(`order${order.id}`);\n    if (!reservation) {\n        console.warn('skipped order reservation for order', order.id);\n        next();\n        return;\n    }\n    \n    // Save callback for the future \n    window.nextCallback = next;\n    \n    Poster.interface.popup({\n        title: 'Choose payment place',\n        width: 500,\n        height: 370,\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Response Structure for Online Orders\nDESCRIPTION: This JSON snippet illustrates the structure of the response returned by the `incomingOrders.getOwnIncomingOrders` API endpoint. It shows how online orders are represented as an array of objects, each containing order details, customer information, and a list of products included in the order. The snippet defines the structure for a successful request.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/incomingOrders/getOwnIncomingOrders.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"response\":[  \n    {\n      \"incoming_order_id\":1,\n      \"spot_id\":1,\n      \"status\":1,\n      \"client_id\":0,\n      \"first_name\":\"Антон\",\n      \"last_name\":\"Талышкин\",\n      \"phone\":\"79630313844\",\n      \"email\":\"contact@joinposter.com\",\n      \"sex\":1,\n      \"birthday\":\"1986-11-23\",\n      \"address\":\"ул. Малышева, 3\",\n      \"comment\":\"\",\n      \"created_at\":\"2017-10-26 14:58:02\",\n      \"updated_at\":\"2017-10-26 15:25:17\",\n      \"transaction_id\":1949,\n      \"products\":[  \n        {\n          \"io_product_id\":1,\n          \"product_id\":113,\n          \"modificator_id\":null,\n          \"incoming_order_id\":1,\n          \"count\":1,\n          \"created_at\":\"2017-10-26 14:58:02\"\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Changing Client Bonus with Joinposter API in PHP\nDESCRIPTION: This PHP snippet demonstrates how to change a client's bonus points using the Joinposter API endpoint `clients.changeClientBonus`. It constructs the URL, defines the POST parameters (client ID and bonus count), and sends the request.  The `sendRequest` function (not defined in the snippet) is assumed to handle the actual HTTP request. The bonus count can be positive to award bonuses, or negative to deduct bonuses.\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/clients/changeClientBonus.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/clients.changeClientBonus'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$bonus = [\n  'client_id' => 7,\n  'count'     => 10,\n];\n\n$data = sendRequest($url, 'post', $bonus);\n```\n\n----------------------------------------\n\nTITLE: Displaying Admin Password Modal Window using Poster API in JavaScript\nDESCRIPTION: This code snippet demonstrates how to use the interface.showManageRightsModal method to display an admin password modal window. It takes an object with askRights and enableLogging parameters and returns a Promise with the result of the request.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/pos/interfaces/interface-showManageRightsModal.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nPoster.interface.showManageRightsModal({\n  askRights: true,\n  enableLogging: false,\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Cash Shift Transaction Request in PHP\nDESCRIPTION: This snippet demonstrates how to construct a request to create a cash shift transaction using the JoinPoster REST API. It includes setting up the API endpoint URL, defining the required parameters for the transaction, and sending the POST request.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/finance/createCashShiftTransaction.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/finance.createCashShiftTransaction'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$cash_shift_transaction = [\n    'cash_shift_id' => 333,\n    'type_id'       => 3,\n    'category_id'   => 4,\n    'user_id'       => 1,\n    'amount'        => 499.99,\n    'time'          => '2017-09-21 15:00',\n    'is_fiscal'     => 1,\n    'comment'       => 'Расход',\n];\n\n$data = sendRequest($url, 'post', $cash_shift_transaction);\n```\n\n----------------------------------------\n\nTITLE: Closing Order Transaction - PHP Request Example\nDESCRIPTION: Example of making a POST request to close an order using the transactions.closeTransaction endpoint. Demonstrates setting transaction parameters including spot ID, tablet ID, transaction ID and cash payment amount.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/transactions/closeTransaction.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/transactions.closeTransaction'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$transaction = [\n    'spot_id'        => 1,\n    'spot_tablet_id' => 1,\n    'transaction_id' => 1950,\n    'payed_cash'     => 1000,\n];\n\n$data = sendRequest($url, 'post', $transaction);\n```\n\n----------------------------------------\n\nTITLE: Sending POST Request to Update Employee Properties in PHP\nDESCRIPTION: This PHP code snippet demonstrates how to send a POST request to the access.updateEmployee endpoint of the Poster API. It includes setting up the request URL with an authentication token and preparing the employee data to be updated.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/access/updateEmployee.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/access.updateEmployee'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$employee = [\n    'user_id'   => 15,\n    'name'      => 'John Doe',\n    'user_type' => 2,\n    'pos_pass'  => '',\n    'login'     => 'john.doe@test.com',\n    'pass'      => 'aZntaeVP9h',\n];\n\n$data = sendRequest($url, 'post', $employee);\n```\n\n----------------------------------------\n\nTITLE: Creating a Reservation with PHP\nDESCRIPTION: This snippet creates a table reservation by sending an HTTP POST request to the JoinPoster API. It demonstrates how to structure the reservation data and includes a token for authentication. Parameters such as spot_id, table_id, and date_reservation must be provided.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/incomingOrders/createReservation.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/incomingOrders.createReservation'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$reservation = [\n    'spot_id'           => '1',\n    'phone'             => '+380684112224',\n    'table_id'          => '1',\n    'guests_count'      => '1',\n    'duration'          => '2000',\n    'date_reservation'  => '2018-03-22 16:20:00'\n];\n\n$data = sendRequest($url, 'post', $reservation);\n\n```\n\n----------------------------------------\n\nTITLE: Response Structure for clients.find Method\nDESCRIPTION: Example of the JSON response structure returned by the clients.find method. Contains arrays of foundClients and foundByCard with detailed client information.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/pos/clients/clients-find.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"foundClients\":[\n      {\n         \"id\":33,\n         \"firstname\":\"Vladimir\",\n         \"lastname\":\"Ivanchenko\",\n         \"loyaltyType\":1,\n         \"discount\":10,\n         \"hidden\":0,\n         \"groupId\":1,\n         \"cardNumber\":\"0\",\n         \"bonus\":0,\n         \"totalPayedSum\":0,\n         \"city\":\"0\",\n         \"address\":\"0\",\n         \"comment\":\"0\",\n         \"phone\":\"\"\n      }\n   ],\n   \"foundByCard\":[\n\n   ]\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Storage Transfer with PHP\nDESCRIPTION: Example of how to update an existing transfer between storage locations using PHP. The request includes transfer details like storage locations, ingredients, and quantities with their associated costs.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/storage/updateMoving.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/storage.updateMoving'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$moving = [\n    \"moving\" => [\n        \"moving_id\"     => \"16\",\n        \"date\"          => \"2015-11-18 22:35:54\",\n        \"from_storage\"  => \"1\",\n        \"to_storage\"    => \"2\"\n    ],\n    \"ingredient\" => [\n        [\n            \"id\"        => \"138\",\n            \"type\"      => \"1\",\n            \"num\"       => \"3\",\n            \"sum\"       => \"6\",\n        ]\n    ]\n];\n\n$data = sendRequest($url, 'post', $moving);\n```\n\n----------------------------------------\n\nTITLE: JSON Response from getOpenTransactionsOnTable API\nDESCRIPTION: Example JSON response from the payments.getOpenTransactionsOnTable endpoint. The response contains an array of open orders on the table, including order IDs, transaction IDs, open dates, payment amounts, and ordered products with their modifications.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/payments/getOpenTransactionsOnTable.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"response\":[\n    {\n      \"order_id\":30139,\n      \"transaction_id\":1484233370643,\n      \"date_open\":1484233375235,\n      \"payed_sum\":127.02,\n      \"products\":[\n        {\n          \"product_name\":\"Венский суп Гуляш\"\n        },\n        {\n          \"product_name\":\"Медальоны из телятины с овощами гриль\"\n        },\n        {\n          \"product_name\":\"Хлеб белый собственной выпечки\"\n        },\n        {\n          \"product_name\":\"Кальян\",\n          \"modificator_name\":\"на соке\"\n        },\n        {\n          \"product_name\":\"Соус BBQ к блюду\"\n        },\n        {\n          \"product_name\":\"Pepsi 300 ml\"\n        }\n      ]\n    },\n    {\n      \"order_id\":30946,\n      \"transaction_id\":1485341938799,\n      \"date_open\":1485341938872,\n      \"payed_sum\":190,\n      \"products\":[\n        {\n          \"product_name\":\"Кролик по-охотничьи\"\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Joinposter API with PHP\nDESCRIPTION: This PHP code snippet demonstrates how to query the Joinposter API endpoint `menu.getWorkshop` to retrieve station properties. It constructs the URL with required parameters such as the API token and workshop ID, and uses a hypothetical `sendRequest` function to retrieve data from the API.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/menu/getWorkshop.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/menu.getWorkshop'\n . '?token=687409:4164553abf6a031302898da7800b59fb'\n . '&workshop_id=1';\n\n$data = sendRequest($url);\n?>\n```\n\n----------------------------------------\n\nTITLE: Displaying Admin Password Modal in JavaScript\nDESCRIPTION: This code snippet demonstrates how to call the `showManageRightsModal` method to display an admin password prompt. The `askRights` parameter determines whether the window is displayed, and `enableLogging` is always set to false.\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/pos/interfaces/interface-showManageRightsModal.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nPoster.interface.showManageRightsModal({\n  askRights: true,\n  enableLogging: false,\n})\n```\n\n----------------------------------------\n\nTITLE: Storage Leftovers API Response Format\nDESCRIPTION: Example JSON response showing the structure of inventory data including ingredient details, quantities, costs, and status. Each item includes identification, quantities, units, and pricing information.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/storage/getStorageLeftovers.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"response\":[\n    {\n      \"ingredient_id\":\"39\",\n      \"ingredient_name\":\"Apples\",\n      \"ingredient_left\":\"3143.00000\",\n      \"limit_value\":\"0\",\n      \"ingredient_unit\":\"p\",\n      \"ingredients_type\":\"2\",\n      \"storage_ingredient_sum\":\"4591923\",\n      \"storage_ingredient_sum_netto\":\"3826603\",\n      \"prime_cost\":1461,\n      \"prime_cost_netto\":1218,\n      \"hidden\":\"0\"\n    },\n    {\n      \"ingredient_id\":\"11\",\n      \"ingredient_name\":\"Apple\",\n      \"ingredient_left\":\"-908.00000\",\n      \"limit_value\":\"0\",\n      \"ingredient_unit\":\"p\",\n      \"ingredients_type\":\"2\",\n      \"storage_ingredient_sum\":\"0\",\n      \"storage_ingredient_sum_netto\":\"0\",\n      \"prime_cost\":1299,\n      \"prime_cost_netto\":1083,\n      \"hidden\":\"0\"\n    },\n    {\n      \"ingredient_id\":\"76\",\n      \"ingredient_name\":\"Eggs\",\n      \"ingredient_left\":\"-1678.00000\",\n      \"limit_value\":\"0\",\n      \"ingredient_unit\":\"p\",\n      \"ingredients_type\":\"1\",\n      \"storage_ingredient_sum\":\"0\",\n      \"storage_ingredient_sum_netto\":\"0\",\n      \"prime_cost\":174,\n      \"prime_cost_netto\":145,\n      \"hidden\":\"0\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Subscribing to returnFiscal Event in JavaScript\nDESCRIPTION: Example showing how to subscribe to the returnFiscal event using the Poster.on() method. The event handler receives the fiscal return response object as a parameter.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/pos/events/returnFiscal.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nPoster.on('returnFiscal', (res) => {\n    console.log(res);\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Data with Poster API in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the users.get method to retrieve user data by ID. It uses a Promise-based approach and handles the case where no user is found.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/pos/users/users-get.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nPoster.users.get(1).then((user) => {\n\tif ( ! user) {\n\t\treturn;\n\t}\n\n\tconsole.log(user.name);\n});\n```\n\n----------------------------------------\n\nTITLE: Creating an Online Order with Promotions via Poster API in PHP\nDESCRIPTION: This PHP code snippet shows how to create an online order that automatically applies promotions using the Poster API. It constructs the request URL with the authentication token and creates an order object. The order includes the spot ID, products, and a 'promotion' array which specifies the promotion to apply, involved products and their counts, and result products.\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/incomingOrders/createIncomingOrder.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/incomingOrders.createIncomingOrder'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$incoming_order = [\n    \"spot_id\"   => 1,\n    \"products\"  => [\n        [\n            \"product_id\"    => 139,\n            \"count\"         => 1\n        ]\n    ],\n    \"promotion\" => [\n        [\n            \"id\" => 1, \n            \"involved_products\" => [\n                [\"id\" => 139, \"count\"  => 1]\n            ],\n            \"result_products\"   => [\n                [\"id\" => 161]\n            ]\n        ]\n    ]\n];\n\n$data = sendRequest($url, 'post', $incoming_order);\n```\n\n----------------------------------------\n\nTITLE: Creating Customer Group using PHP\nDESCRIPTION: Example of making a POST request to create a new customer group with loyalty settings including name, type, discount percentage, and birthday bonus points.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/clients/createGroup.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/clients.createGroup'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$group = [\n    'client_groups_name'     => 'Постоянный посетитель',\n    'loyalty_type'           => 1,\n    'client_groups_discount' => 10,\n    'birthday_bonus'         => 50.00,\n];\n\n$data = sendRequest($url, 'post', $group);\n```\n\n----------------------------------------\n\nTITLE: Opening a Cash Shift with PHP\nDESCRIPTION: This PHP example demonstrates how to open a cash shift using the finance.openCashShift endpoint. It includes setting the spot ID, user ID, opening cash amount, time, and fiscal status in the request.\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/finance/openCashShift.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/finance.openCashShift'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$cash_shift = [\n    'spot_id'   => 1,\n    'user_id'   => 1,\n    'amount'    => 123.45,\n    'time'      => '2017-09-21 10:00',\n    'is_fiscal' => 1,\n];\n\n$data = sendRequest($url, 'post', $cash_shift);\n```\n\n----------------------------------------\n\nTITLE: Example Response from incomingOrders.getIncomingOrders API\nDESCRIPTION: This JSON snippet provides an example of the data returned by the `incomingOrders.getIncomingOrders` API endpoint. It shows the structure of the response, including details such as order ID, location ID, status, client information, order creation and update timestamps, and associated product information within the `products` array.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/incomingOrders/getIncomingOrders.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"response\":[  \n    {  \n      \"incoming_order_id\":1,\n      \"spot_id\":1,\n      \"status\":1,\n      \"client_id\":0,\n      \"first_name\":\"Антон\",\n      \"last_name\":\"Талышкин\",\n      \"phone\":\"79630313844\",\n      \"email\":\"contact@joinposter.com\",\n      \"sex\":1,\n      \"birthday\":\"1986-11-23\",\n      \"address\":\"ул. Малышева, 3\",\n      \"comment\":\"\",\n      \"created_at\":\"2017-10-26 14:58:02\",\n      \"updated_at\":\"2017-10-26 15:25:17\",\n      \"transaction_id\":1949,\n      \"products\":[  \n        {  \n          \"io_product_id\":1,\n          \"product_id\":113,\n          \"modificator_id\":null,\n          \"incoming_order_id\":1,\n          \"count\":1,\n          \"created_at\":\"2017-10-26 14:58:02\"\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Manufacture Data with PHP\nDESCRIPTION: This PHP code snippet demonstrates how to make a POST request to the storage.updateManufacture endpoint of the Poster API. It includes setting up the URL with authentication token, preparing the manufacture data, and sending the request.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/storage/updateManufacture.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/storage.updateManufacture?' .\n  'format=json&token=687409:4164553abf6a031302898da7800b59fb';\n\n$manufacture = [\n    \"manufacture_id\"  => 7,\n    \"date\"            => \"2016-12-21 12:12:54\",\n    \"storage_id\"      => 1,\n    \"products\" => [\n        [\n            \"id\"    => 64,\n            \"type\"  => 1,\n            \"num\"   => 3\n        ],\n        [\n            \"id\"    => 65,\n            \"type\"  => 1,\n            \"num\"   => 25\n        ],\n  ]\n];\n\n$manufacture_id = sendRequest($url, 'post', $manufacture, true);\n```\n\n----------------------------------------\n\nTITLE: Response Format for Tax List\nDESCRIPTION: This JSON snippet shows the expected response format when querying the finance.getTaxes API. The response contains an array of tax objects, each with properties such as tax ID, country code, tax name, tax value, tax type, fiscal status, fiscal program, fixed status, and delete status.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/finance/getTaxes.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"response\":[  \n    {  \n      \"tax_id\":3,\n      \"country\":\"UA\",\n      \"tax_name\":\"Налог с оборота\",\n      \"tax_value\":5,\n      \"type\":2,\n      \"fiscal\":1,\n      \"fiscal_program\":0,\n      \"fixed\":0,\n      \"delete\":0\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Account Time Zone using PHP\nDESCRIPTION: A PHP example demonstrating how to call the settings.getTimeZones endpoint to fetch the account time zone. The code sends a GET request to the API with the authentication token.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/settings/getTimeZones.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/settings.getTimeZones'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$data = sendRequest($url);\n```\n\n----------------------------------------\n\nTITLE: Sending Messages to Devices in Android (Kotlin)\nDESCRIPTION: This snippet shows how to send a 'Hello!' message to all devices using the PosterTransport API in Kotlin for Android. It iterates through all devices and sends a JSON-formatted message to each one.\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/device/transport/methods/sendMessage.md#2025-04-21_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nPosterTransport.devices.forEach { \n    it.sendMessage(\"{\\\"text\\\":\\\"Hello!\\\"}\")\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Response Structure for Customer Transactions\nDESCRIPTION: This JSON snippet shows the structure of the response returned by the Joinposter API when querying customer transactions. It includes details such as the date range, transaction count, and a list of transactions. Each transaction contains information about the franchise, transaction details, and a list of products within that transaction.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/franchise/getTransactionsByClientId.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"response\": {\n    \"date_from\": \"2017-04-01 00:00:00\",\n    \"date_to\": \"2017-04-30 23:59:59\",\n    \"transactions_count\": 2,\n    \"transactions\": [\n      {\n        \"franchise_id\": 7457,\n        \"transaction_id\": 12870,\n        \"date_close\": \"2017-04-25 17:58:50\",\n        \"sum\": 246.4,\n        \"bonus\": 0,\n        \"bonus_payed\": 0,\n        \"products\": [\n          {\n            \"product_id\": 832,\n            \"modificator_id\": 0,\n            \"franchise_product_id\": 322,\n            \"franchise_modification_id\": 0,\n            \"sum\": 246.4\n          }\n        ]\n      },\n      {\n        \"franchise_id\": 888,\n        \"transaction_id\": 44626,\n        \"date_close\": \"2017-04-12 16:25:42\",\n        \"sum\": 626,\n        \"bonus\": 0,\n        \"bonus_payed\": 0,\n        \"products\": [\n          {\n            \"product_id\": 13,\n            \"modificator_id\": 0,\n            \"franchise_product_id\": 13,\n            \"franchise_modification_id\": 0,\n            \"sum\": 318\n          },\n          {\n            \"product_id\": 10,\n            \"modificator_id\": 0,\n            \"franchise_product_id\": 10,\n            \"franchise_modification_id\": 0,\n            \"sum\": 308\n          }\n        ]\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating User Details via API in Poster\nDESCRIPTION: This snippet demonstrates how to update a user's details using the API. It sends a POST request with the user ID and the fields to be updated, such as name, phone, or email.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/pos/users/index.md#2025-04-21_snippet_2\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST \"https://joinposter.com/api/users.updateUser\" \\\n-H \"Content-Type: application/x-www-form-urlencoded\" \\\n-H \"Authorization: Bearer YOUR_TOKEN\" \\\n-d \"user_id=1\" \\\n-d \"name=John Doe\" \\\n-d \"phone=380009876543\" \\\n-d \"email=john.doe@example.com\"\n```\n\n----------------------------------------\n\nTITLE: Ingredient Update JSON Request Payload\nDESCRIPTION: JSON representation of the ingredient update request, showing the structure of ingredient data to be sent to the Joinposter API, including ID, name, category, type, and weight.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/menu/updateIngredient.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 811,\n  \"ingredient_name\": \"Лимон\",\n  \"category_id\": 4,\n  \"type\": \"p\",\n  \"weight_ingredient\": 150\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Product With Modifications in PHP\nDESCRIPTION: API request to create a product with multiple modifications in Joinposter menu system. Shows how to define product variations with different barcodes, prices, and visibility settings.\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/menu/createProduct.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/menu.createProduct'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$product = [\n    'product_name'           => 'Sprite',\n    'menu_category_id'       => 0,\n    'workshop'               => 1,\n    'weight_flag'            => 0,\n    'color'                  => 'red',\n    'different_spots_prices' => 0,\n    'modifications'          => 1,\n    'modificator_name[0]'    => '1 л.',\n    'modificator_name[1]'    => '2 л.',\n    'barcode[0]'             => '4820098749621',\n    'barcode[1]'             => '4820098749622',\n    'product_code[0]'        => '3412356',\n    'product_code[1]'        => '3412357',\n    'cost[0]'                => 700,\n    'cost[1]'                => 1000,\n    'price[0]'               => 1500,\n    'price[1]'               => 2000,\n    'visible[0]'             => 1,\n    'visible[1]'             => 1,\n    'fiscal_code[0]'         => 1234567890,\n    'fiscal_code[1]'         => 1234567891,\n];\n\n$data = sendRequest($url, 'post', $product);\n```\n\n----------------------------------------\n\nTITLE: Accessing POS Environment Variables via Poster.environment Object\nDESCRIPTION: The Poster.environment object provides boolean flags to identify the platform where the POS application is running. It includes flags for Android tablets, iOS (iPad), Windows, and desktop applications (MacOS, Windows, Linux).\nSOURCE: https://github.com/joinposter/docs/blob/master/en/pos/environment.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nPoster.environment.android  // true if running on Android tablet\nPoster.environment.iOS      // true if running on iPad\nPoster.environment.windows  // true if running on Windows\nPoster.environment.desktop  // true if running on desktop (MacOS, Windows, Linux)\n```\n\n----------------------------------------\n\nTITLE: Removing a Transaction via API Call in PHP\nDESCRIPTION: This PHP code snippet demonstrates how to remove a transaction using the `transactions.removeTransaction` API endpoint. It constructs the API URL with a token, defines the required transaction parameters (spot_tablet_id, transaction_id, user_id), and sends a POST request to the API.\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/transactions/removeTransaction.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/transactions.removeTransaction'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$transaction = [\n    'spot_tablet_id' => 1,\n    'transaction_id' => 1950,\n    'user_id'        => 3,\n];\n\n$data = sendRequest($url, 'post', $transaction);\n```\n\n----------------------------------------\n\nTITLE: Updating Ingredient Category Properties with Joinposter API\nDESCRIPTION: This PHP code snippet demonstrates how to update ingredient category properties using the `menu.updateCategoryIngredients` endpoint of the Joinposter API. It defines the API endpoint URL, prepares the data array containing the `category_id` and `category_name`, and then sends a POST request to the API with the data.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/menu/updateCategoryIngredients.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/menu.updateCategoryIngredients'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$category_ingredients = [\n    'category_id'   => 2,\n    'category_name' => 'Фрукты',\n];\n\n$data = sendRequest($url, 'post', $category_ingredients);\n?>\n```\n\n----------------------------------------\n\nTITLE: Recover a Dish using PHP\nDESCRIPTION: This code snippet demonstrates how to recover a dish using the `menu.recoverDish` API endpoint with PHP. It sends a POST request with parameters like `product_id`, `menu_category_id`, `workshop`, and `tax_id` to the specified URL. The `sendRequest` function is assumed to handle the actual HTTP request.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/menu/recoverDish.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/menu.recoverDish'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$product = [\n    'product_id' => 48,\n    'menu_category_id' => 10,\n    'workshop' => 3,\n    'tax_id' => 1,\n];\n\n$data = sendRequest($url, 'post', $product);\n```\n\n----------------------------------------\n\nTITLE: Table List Response Structure\nDESCRIPTION: Example JSON response showing the structure of returned table data. Each table object includes properties like ID, number, title, shape, coordinates, dimensions, and status indicators.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/spots/getTableHallTables.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{  \n  \"response\":[  \n    {  \n      \"table_id\":\"3\",\n      \"table_num\":\"1\",\n      \"table_title\":\"Возле барной стойки\",\n      \"spot_id\":\"1\",\n      \"table_shape\":\"square\",\n      \"hall_id\":\"1\",\n      \"table_x\":\"9\",\n      \"table_y\":\"12\",\n      \"table_height\":\"4\",\n      \"table_width\":\"8\",\n      \"is_deleted\":\"0\",\n      \"status\":\"1\"\n    },\n    {  \n      \"table_id\":\"4\",\n      \"table_num\":\"2\",\n      \"table_title\":\"Дальний\",\n      \"spot_id\":\"1\",\n      \"table_shape\":\"circle\",\n      \"hall_id\":\"1\",\n      \"table_x\":\"15\",\n      \"table_y\":\"11\",\n      \"table_height\":\"10\",\n      \"table_width\":\"13\",\n      \"is_deleted\":\"0\",\n      \"status\":\"2\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Making a GET request for Shift Transactions in PHP\nDESCRIPTION: This snippet constructs a URL with a token and shift ID to make a GET request to the JoinPoster API to fetch cash shift transactions. It uses a function called sendRequest to process the request.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/finance/getCashShiftTransactions.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/finance.getCashShiftTransactions'\n . '?token=687409:4164553abf6a031302898da7800b59fb'\n . '&shift_id=333';\n\ndata = sendRequest($url);\n\n```\n\n----------------------------------------\n\nTITLE: Updating Tax Properties - PHP\nDESCRIPTION: This snippet demonstrates how to send a POST request to the joinposter API to update tax properties, including tax ID, name, value, type, and fiscal status. The request is sent to a specified URL with relevant tax data formatted as an associative array. It then captures the response from the API, which includes the updated tax ID.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/finance/updateTax.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/finance.updateTax'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$tax = [\n    'tax_id' => 3,\n    'name'   => 'Налог с оборота',\n    'value'  => 10,\n    'type'   => 2,\n    'fiscal' => 1,\n];\n\ndata = sendRequest($url, 'post', $tax);\n\n```\n\n----------------------------------------\n\nTITLE: Transaction Response JSON Structure\nDESCRIPTION: Example JSON response demonstrating the comprehensive transaction details returned by the JoinPoster API, including transaction metadata, payment information, products, and transaction history\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/dash/getTransaction.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"response\":[\n      {\n         \"transaction_id\":\"330660\",\n         \"date_start\":\"1518873040083\",\n         \"status\":\"2\",\n         \"guests_count\":\"2\",\n         \"payed_sum\":\"2750\",\n         \"products\":[\n            {\n               \"product_id\":\"162\",\n               \"num\":\"1\",\n               \"product_price\":\"1050\"\n            }\n         ],\n         \"history\":[]\n      }\n   ]\n}\n```\n\n----------------------------------------\n\nTITLE: Customer Sales API Response Format - JSON\nDESCRIPTION: Example JSON response from the dash.getClientsSales endpoint showing customer sales data including sales totals, profit, revenue, and transaction counts.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/dash/getClientsSales.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"response\":[\n    {\n      \"client_id\":\"4\",\n      \"firstname\":\"\",\n      \"lastname\":\"Vladimir\",\n      \"sum\":\"1030000\",\n      \"profit\":\"825364\",\n      \"profit_netto\":\"687803\",\n      \"revenue\":\"907000\",\n      \"clients\":\"3\",\n      \"middle_invoice\":3433.3333333333\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: PHP Request for Updating Customer Properties\nDESCRIPTION: Example of making a POST request to update customer details using PHP. Shows how to structure the request with various customer properties including personal information, contact details, and loyalty data.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/clients/updateClient.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/clients.updateClient'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$client = [\n  'client_id'               => 50,\n  'client_name'             => 'Попова Елена Андреевна',\n  'client_sex'              => 2,\n  'client_groups_id_client' => 7,\n  'card_number'             => '0000000000222',\n  'discount_per'            => 0,\n  'phone'                   => '+380 50 22-11-111',\n  'email'                   => 'contact@joinposter.com',\n  'birthday'                => '1986-11-23',\n  'bonus'                   => 10,\n  'total_payed_sum'         => 417000,\n];\n\n$data = sendRequest($url, 'post', $client);\n```\n\n----------------------------------------\n\nTITLE: Creating Product without Modifications in PHP\nDESCRIPTION: This PHP code snippet demonstrates how to create a new product without any modifications using the Poster API. It requires a valid API token and the 'sendRequest' function to make HTTP POST requests. Key parameters include 'product_name', 'menu_category_id', and 'price'. The expected output is a JSON object with the 'response' indicating the product ID.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/menu/createProduct.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/menu.createProduct'\n  . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$product = [\n    'product_name'           => 'Пончик',\n    'menu_category_id'       => 0,\n    'workshop'               => 1,\n    'weight_flag'            => 0,\n    'color'                  => 'red',\n    'different_spots_prices' => 0,\n    'modifications'          => 0,\n    'barcode'                => '4820098749621',\n    'cost'                   => 2000,\n    'price'                  => 3000,\n    'visible'                => 1,\n];\n\n$data = sendRequest($url, 'post', $product);\n\n```\n\n----------------------------------------\n\nTITLE: Creating Tax with Poster API in PHP\nDESCRIPTION: This PHP snippet demonstrates how to send a POST request to the Poster API's finance.createTax endpoint to create a new tax entry. The snippet requires a valid API token and utilizes a function 'sendRequest' to execute the POST request. The main parameters include the tax's name, value, type, and fiscal status, with the fiscal status defaulting to non-fiscal if not specified. The API response provides the newly created tax ID.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/finance/createTax.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/finance.createTax'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$tax = [\n    'name'   => 'Налог с оборота',\n    'value'  => 5,\n    'type'   => 2,\n    'fiscal' => 1,\n];\n\n$data = sendRequest($url, 'post', $tax);\n\n```\n\n----------------------------------------\n\nTITLE: Requesting Category Sales Data with PHP\nDESCRIPTION: This PHP snippet demonstrates how to make a GET request to the dash.getCategoriesSales endpoint. It constructs the URL with the required token and date range parameters.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/dash/getCategoriesSales.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/dash.getCategoriesSales'\n . '?token=687409:4164553abf6a031302898da7800b59fb'\n . '&dateFrom=20170920'\n . '&dateTo=20170922';\n\n$data = sendRequest($url);\n```\n\n----------------------------------------\n\nTITLE: Querying Storage Locations with PHP and JoinPoster API\nDESCRIPTION: PHP code snippet demonstrating how to request storage locations using the JoinPoster API with an authentication token\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/storage/getStorages.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/storage.getStorages'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$data = sendRequest($url);\n```\n\n----------------------------------------\n\nTITLE: Updating Product Price in PHP\nDESCRIPTION: PHP code snippet demonstrating how to update a product's price using the Joinposter API, specifying spot ID, product ID, and new price\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/menu/updateProductPrice.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/menu.updateProductPrice'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$product = [\n    'spot_id'          => 1,\n    'price'            => '100',\n    'product_id'       => 139,\n    'modificator_id'   => 0,\n];\n\n$data = sendRequest($url, 'post', $product);\n```\n\n----------------------------------------\n\nTITLE: Creating a Financial Category with Poster API in PHP\nDESCRIPTION: The snippet demonstrates how to create a new financial category using the Poster API with a POST request in PHP. It requires a valid API token and sets parameters such as 'category_name', 'category_parent', 'operations_in', and 'operations_out' for the new category. Sends a POST request and processes the server response.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/finance/createCategory.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/finance.createCategory'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$category = [\n    'category_name'     => 'Коммуналка',\n    'category_parent'   => 0,\n    'operations_in'     => 0, \n    'operations_out'    => 1\n\n];\n\n$data = sendRequest($url, 'post', $category);\n\n```\n\n----------------------------------------\n\nTITLE: JSON Response from Storage.getSupplies API Call\nDESCRIPTION: Example of the JSON response returned by the storage.getSupplies method. The response contains an array of supply records with details such as supply ID, storage information, supplier data, dates, amounts, and status.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/storage/getSupplies.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"response\":[\n    {\n      \"supply_id\":\"48\",\n      \"storage_id\":\"1\",\n      \"supplier_id\":\"1\",\n      \"date\":\"2017-11-17 08:09:33\",\n      \"supply_sum\":\"1800\",\n      \"supply_sum_netto\":\"1500\",\n      \"supply_comment\":\"\",\n      \"storage_name\":\"Склад Кухня\",\n      \"supplier_name\":\"Закупщик\",\n      \"delete\":\"1\",\n      \"account_id\":null\n    },\n    {\n      \"supply_id\":\"47\",\n      \"storage_id\":\"1\",\n      \"supplier_id\":\"1\",\n      \"date\":\"2017-05-18 09:11:00\",\n      \"supply_sum\":\"300000\",\n      \"supply_sum_netto\":\"250000\",\n      \"supply_comment\":\"\",\n      \"storage_name\":\"Склад Кухня\",\n      \"supplier_name\":\"Закупщик\",\n      \"delete\":\"0\",\n      \"account_id\":null\n    },\n    {\n      \"supply_id\":\"46\",\n      \"storage_id\":\"1\",\n      \"supplier_id\":\"1\",\n      \"date\":\"2017-05-18 09:07:00\",\n      \"supply_sum\":\"669882890\",\n      \"supply_sum_netto\":\"558235742\",\n      \"supply_comment\":\"\",\n      \"storage_name\":\"Склад Кухня\",\n      \"supplier_name\":\"Закупщик\",\n      \"delete\":\"0\",\n      \"account_id\":null\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Performing GET Request to JoinPoster API\nDESCRIPTION: This PHP snippet demonstrates how to construct and send a GET request to the JoinPoster API for registering cash shift properties. It requires the API endpoint and a valid token. The response received is handled by a function named sendRequest.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/finance/getCashShift.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/finance.getCashShift'\n . '?token=687409:4164553abf6a031302898da7800b59fb'\n . '&cash_shift_id=333';\n\ndata = sendRequest($url);\n\n```\n\n----------------------------------------\n\nTITLE: Querying Storage Leftovers in PHP\nDESCRIPTION: PHP code snippet demonstrating how to make an API request to retrieve storage leftovers using a token-based authentication method\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/storage/getStorageLeftovers.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/storage.getStorageLeftovers'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$data = sendRequest($url);\n```\n\n----------------------------------------\n\nTITLE: Sending GET Request for Online Order Details in PHP\nDESCRIPTION: This PHP snippet demonstrates how to construct and send a GET request to retrieve details of an online order using the incomingOrders.getIncomingOrder method of the Poster API. It includes the API endpoint URL with the required token and incoming_order_id parameters.\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/incomingOrders/getIncomingOrder.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/incomingOrders.getIncomingOrder'\n . '?token=687409:4164553abf6a031302898da7800b59fb'\n . '&incoming_order_id=1';\n\n$data = sendRequest($url);\n```\n\n----------------------------------------\n\nTITLE: Successful Order Closure Response\nDESCRIPTION: Example of a successful response when closing an order. Returns a confirmation message in JSON format.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/pos/orders/orders-closeOrder.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{ \"result\": \"order has successfully closed\" }\n```\n\n----------------------------------------\n\nTITLE: Creating a Dish using JoinPoster API - PHP\nDESCRIPTION: This snippet demonstrates how to create a dish using the JoinPoster API. It includes the necessary parameters such as product name, category ID, ingredient details, and modifications. A POST request is sent to the specified URL with a JSON payload representing the dish's attributes. The response should return the ID of the created dish. Dependencies include the ability to send HTTP requests, which is handled by the sendRequest function.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/menu/createDish.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/menu.createDish'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\ndish = [\n    'product_name' => 'Кальян с сюрпризом',\n    'menu_category_id' => 151,\n    'different_spots_prices' => 1,\n    'workshop' => 4,\n    'weight_flag' => 0,\n    'product_color' => 'red',\n    'nodiscount' => 1,\n    'price' => [\n        1 => 55,\n        2 => 57,\n    ],\n    'visible' => [\n        1 => 1,\n        2 => 0,\n    ],\n    \"ingredient\" => [[\n        \"id\" => 813,\n        \"type\" => 1,\n        \"unit\" => \"kg\",\n        \"weight\" => 0,\n        \"stew\" => 0,\n        \"bake\" => 0,\n        \"brutto\" => 10,\n        \"lock\" => 1,\n        \"netto\" => 10,\n    ]],\n    'modificationgroup' => [\n        [\n            'type'          => 1,\n            'minNum'        => 1,\n            'maxNum'        => 1,\n            'name'          => 'Чаша',\n            \"modifications\" => [\n                [\n                    \"ingredientId\" => 820,\n                    \"type\" => 1,\n                    \"name\" => \"Классическая чаша\",\n                    \"brutto\" => 1,\n                    \"price\" => 500,\n                ],\n                [\n                    \"ingredientId\" => 816,\n                    \"name\" => \"Апельсиновая чаша\",\n                    \"type\" => 1,\n                    \"brutto\" => 1,\n                    \"price\" => 400,\n                ],\n            ]\n        ]\n    ]\n];\n\ndata = sendRequest($url, 'post', $dish);\n\n```\n\n----------------------------------------\n\nTITLE: Querying Online Orders with PHP\nDESCRIPTION: This PHP code snippet demonstrates how to construct and send a GET request to the `incomingOrders.getOwnIncomingOrders` endpoint of the Joinposter API. It includes parameters for authentication, order status, and date range. The `sendRequest` function (not defined here) is assumed to handle the actual HTTP request and response.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/incomingOrders/getOwnIncomingOrders.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/incomingOrders.getOwnIncomingOrders'\n . '?token=687409:4164553abf6a031302898da7800b59fb'\n . '&status=1'\n . '&date_from=2017-10-26+14:00:00'\n . '&date_to=2017-10-26+15:00:00';\n\n$data = sendRequest($url);\n```\n\n----------------------------------------\n\nTITLE: Deleting Supply with PHP API Request\nDESCRIPTION: Example of making a POST request to delete a supply using PHP. The request requires a supply_id parameter to identify which supply to remove.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/storage/deleteSupply.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/storage.deleteSupply'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$delete = [\n    'supply_id' => 7\n];\n\n$data = sendRequest($url, 'post', $delete);\n```\n\n----------------------------------------\n\nTITLE: Update Product ID in 1C System with menu.set1cProductId in PHP\nDESCRIPTION: This code snippet demonstrates how to update a product's 1C ID using the `menu.set1cProductId` API endpoint in PHP. It sends a POST request with the product ID and the corresponding 1C ID to the Joinposter API.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/menu/set1cProductId.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/menu.set1cProductId'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$products = [\n    'id' => [\n        [\n            'product_id' => 48,\n            'id_1c'      => 'b80ffc81-0fc9-11e7-9ab4-ace01035e460',\n        ],\n    ],\n];\n\n$data = sendRequest($url, 'post', $products);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Reservations in PHP with JoinPoster API\nDESCRIPTION: PHP code snippet demonstrating how to make an API request to fetch reservation lists using the JoinPoster API endpoint with an authentication token\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/incomingOrders/getReservations.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/incomingOrders.getReservations'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$data = sendRequest($url);\n```\n\n----------------------------------------\n\nTITLE: Requesting Packaging List using PHP\nDESCRIPTION: This PHP code snippet demonstrates how to make a request to the `storage.getPacks` API endpoint to retrieve a list of packaging options. It constructs the URL with necessary parameters like format and token, and then sends the request using a `sendRequest` function. The response will be a JSON object containing the packaging list.\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/storage/getPacks.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?\n$url = 'https://joinposter.com/api/storage.getPacks' \n  . '?format=json'\n  . '&token=687409:4164553abf6a031302898da7800b59fb';\n\n$data = sendRequest($url);\n?>\n```\n\n----------------------------------------\n\nTITLE: Sending POST Request to Change Recipient for 54-FZ Fiscal Receipt in PHP\nDESCRIPTION: This PHP code snippet demonstrates how to send a POST request to the transactions.changeRecipientFor54FZ endpoint. It sets up the request URL with an authentication token and sends transaction details including spot ID, tablet ID, transaction ID, recipient type, and contact information.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/transactions/changeRecipientFor54FZ.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/transactions.changeRecipientFor54FZ'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$transaction = [\n    'spot_id'        => 1,\n    'spot_tablet_id' => 1,\n    'transaction_id' => 1950,\n    'type'           => 'email',\n    'contact'        => 'admin@sample.com',\n];\n\n$data = sendRequest($url, 'post', $transaction);\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response for Cash Shifts\nDESCRIPTION: This JSON snippet shows the expected response format from the Joinposter API when requesting cash shifts. It includes an array of register shift objects, each containing details like shift ID, spot ID, start and end times, amounts, user IDs, and comments.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/finance/getCashShifts.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"response\":[  \n    {  \n      \"cash_shift_id\":333,\n      \"spot_id\":1,\n      \"timestart\":1505977200000,\n      \"timeend\":1505980800000,\n      \"date_start\": \"2018-10-18 13:45:46\",\n      \"date_end\": \"2018-10-18 23:00:00\",\n      \"amount_start\":10000,\n      \"amount_end\":10000,\n      \"amount_debit\":0,\n      \"amount_sell_cash\":0,\n      \"amount_sell_card\":0,\n      \"amount_credit\":0,\n      \"amount_collection\":0,\n      \"user_id_start\":3,\n      \"user_id_end\":3,\n      \"comment\":\"бар\",\n      \"spot_name\":\"Киоск\",\n      \"spot_adress\":\"ул. Вокзальная, 12\",\n      \"table_num\":\"0\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Requesting Manufacture Wastes Data using PHP\nDESCRIPTION: This PHP code snippet demonstrates how to make an HTTP GET request to the storage.getManufacturesWriteOffs API endpoint. It includes query parameters for token, date range, and pagination.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/storage/getManufacturesWriteOffs.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/storage.getManufacturesWriteOffs'\n . '?token=687409:4164553abf6a031302898da7800b59fb'\n . '&date_from=2017-11-30'\n . '&date_to=2017-11-30'\n . '&per_page=10'\n . '&page=5';\n\n$data = sendRequest($url);\n```\n\n----------------------------------------\n\nTITLE: Updating Storage IDs in PHP\nDESCRIPTION: PHP code example for sending a request to update storage identifiers in the 1C system via JoinPoster API\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/storage/set1cStorageId.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/storage.set1cStorageId'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$storage = [\n    'id' => [\n        [\n            'storage_id' => 32,\n            'id_1c'   => 'b80ffc81-0fc9-11e7-9ab4-ace01035e460',\n        ],\n    ],\n];\n\n$data = sendRequest($url, 'post', $storage);\n```\n\n----------------------------------------\n\nTITLE: Example Response of Promotion Properties\nDESCRIPTION: This JSON snippet shows an example response from the clients.getPromotion API. It details the structure and possible values returned, including promotion ID, name, parameters, start and end dates, and auto-apply settings. Nested objects contain conditions, week days, periods, clients types, results types, and bonus products.\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/clients/getPromotion.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"response\":{  \n      \"promotion_id\":\"12\",\n      \"name\":\"Скидка на кофе\",\n      \"position\":\"3\",\n      \"accrual_bonuses\":\"0\",\n      \"params\":{  \n         \"conditions\":[\n            {\n               \"type\":\"2\",\n               \"id\":\"934\",\n               \"pcs\":225445,\n               \"g\":0,\n               \"sum\":0\n            }\n         ],\n         \"conditions_rule\":\"or\",\n         \"conditions_exactly\":0,\n         \"accumulation_type\":\"1\",\n         \"accumulation_checks_count\":0,\n         \"week_days\":[  \n            \"1\",\n            \"1\",\n            \"1\",\n            \"1\",\n            \"1\",\n            \"1\",\n            \"1\"\n         ],\n         \"periods\":[  \n            {\n               \"start\":\"00:00\",\n               \"end\":\"23:59\"\n            }\n         ],\n         \"clients_type\":\"4\",\n         \"clients_groups\":[  \n            \"18\",\n            \"2\"\n         ],\n         \"result_type\":\"1\",\n         \"bonus_products\":[  \n            {\n               \"type\":\"2\",\n               \"id\":\"934\"\n            }\n         ],\n         \"bonus_products_pcs\":\"3\",\n         \"bonus_products_g\":0,\n         \"bonus_products_condition_type\":\"1\",\n         \"bonus_products_condition_value\":\"80\",\n         \"bonus_products_accumulation\":\"2\",\n         \"discount_value\":0,\n         \"discount_prices\":[  \n\n         ]\n      },\n      \"date_start\":\"2018-05-01 00:00:00\",\n      \"date_end\":\"0000-00-00 00:00:00\",\n      \"auto_apply\":\"0\"\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Response for Transaction Products - JSON\nDESCRIPTION: This JSON snippet illustrates the expected response format when fetching product details for transactions. It contains an array of product objects, each detailing information such as transaction ID, product ID, name, and various financial metrics.\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/dash/getTransactionsProducts.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"response\":[\n      {\n         \"transaction_id\":1,\n         \"product_id\":169,\n         \"product_name\":\"Речная форель \",\n         \"modification_id\":0,\n         \"modificator_name\":null,\n         \"modificator_barcode\":null,\n         \"modificator_product_code\":null,\n         \"weight_flag\":0,\n         \"num\":2,\n         \"time\":1527148991899,\n         \"workshop\":2,\n         \"barcode\":\"\",\n         \"product_code\":\"\",\n         \"tax_id\":0,\n         \"nodiscount\":0,\n         \"payed_sum\":\"252.00\",\n         \"product_sum\":\"252.00\",\n         \"discount\":0,\n         \"bonus_sum\":\"0.00\",\n         \"client_id\":0,\n         \"promotion_id\":\"0\",\n         \"cert_sum\":\"0.00\",\n         \"product_cost\":0,\n         \"product_cost_netto\":0,\n         \"product_profit\":25200,\n         \"product_profit_netto\":25200,\n         \"bonus_accrual\":0,\n         \"tax_value\":0,\n         \"tax_type\":0,\n         \"tax_fiscal\":0,\n         \"category_id\":33\n      },\n      {\n         \"transaction_id\":2,\n         \"product_id\":168,\n         \"product_name\":\"Стейк из семги\",\n         \"modification_id\":0,\n         \"modificator_name\":null,\n         \"modificator_barcode\":null,\n         \"modificator_product_code\":null,\n         \"weight_flag\":0,\n         \"num\":2,\n         \"time\":1527149138470,\n         \"workshop\":2,\n         \"barcode\":\"\",\n         \"product_code\":\"\",\n         \"tax_id\":0,\n         \"nodiscount\":1,\n         \"payed_sum\":\"0.00\",\n         \"product_sum\":\"360.00\",\n         \"discount\":0,\n         \"bonus_sum\":\"0.00\",\n         \"client_id\":0,\n         \"promotion_id\":\"0\",\n         \"cert_sum\":\"0.00\",\n         \"product_cost\":0,\n         \"product_cost_netto\":0,\n         \"product_profit\":36000,\n         \"product_profit_netto\":36000,\n         \"bonus_accrual\":0,\n         \"tax_value\":0,\n         \"tax_type\":0,\n         \"tax_fiscal\":0,\n         \"category_id\":33\n      }\n   ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Manufacture using PHP\nDESCRIPTION: This PHP code example demonstrates how to create a manufacture of dishes and semi-finished products using the storage.createManufacture API endpoint. It includes setting the manufacture date, storage ID, and products list with specific quantities for each product.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/storage/createManufacture.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/storage.createManufacture' \n  . '?format=json'\n  . '&token=687409:4164553abf6a031302898da7800b59fb';\n\n$manufacture = [\n    \"date\"          => \"2016-12-21 11:12:54\",\n    \"storage_id\"    => 1,\n    \"products\"      => [\n        [\n            \"id\"    => 64,\n            \"type\"  => 1,\n            \"num\"   => 3\n        ],\n        [\n            \"id\"    => 65,\n            \"type\"  => 1,\n            \"num\"   => 25\n        ],\n    ]\n];\n\n$data = sendRequest($url, 'post', $manufacture, true);\n```\n\n----------------------------------------\n\nTITLE: Requesting Product Sales Data in PHP\nDESCRIPTION: This snippet demonstrates how to make a GET request to the dash.getProductsSales endpoint using PHP. It constructs the URL with the required token and sends the request.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/dash/getProductsSales.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/dash.getProductsSales'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$data = sendRequest($url);\n```\n\n----------------------------------------\n\nTITLE: API Response Format for Product Removal\nDESCRIPTION: This JSON snippet shows the expected response from the Poster API after a successful product removal. It requires no input parameters and outputs a JSON object with a single boolean value `response` that is true if the product was successfully removed. There are no specific limitations or constraints reported for this response.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/menu/removeProduct.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{  \n  \"response\":true\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Transactions using PHP API Request\nDESCRIPTION: PHP code snippet demonstrating how to construct an API request to fetch transaction data from JoinPoster with date range parameters\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/dash/getTransactions.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/dash.getTransactions'\n . '?token=687409:4164553abf6a031302898da7800b59fb'\n . '&dateFrom=20170905'\n . '&dateTo=20170908';\n\n$data = sendRequest($url);\n```\n\n----------------------------------------\n\nTITLE: Fetching Transaction Products via API - PHP\nDESCRIPTION: This PHP snippet demonstrates how to send a GET request to the JoinPoster API to retrieve a list of products associated with given transaction IDs. The URL requires a token and a comma-separated list of transaction IDs as parameters. The method `sendRequest` handles the request and returns the data.\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/dash/getTransactionsProducts.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/dash.getTransactionsProducts'\n . '?token=687409:4164553abf6a031302898da7800b59fb'\n . '&transactions_id=1,2';\n \n$data = sendRequest($url);\n\n```\n\n----------------------------------------\n\nTITLE: Querying Ingredient Category Properties in PHP\nDESCRIPTION: PHP request to retrieve ingredient category details from Poster API using category ID and optional 1C system mapping\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/menu/getCategoryIngredients.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/menu.getCategoryIngredients'\n . '?token=687409:4164553abf6a031302898da7800b59fb'\n . '&category_id=3'\n . '&1c=true';\n\n$data = sendRequest($url);\n```\n\n----------------------------------------\n\nTITLE: Interpreting Poster API JSON Response\nDESCRIPTION: This JSON snippet shows the structure of the response received from the Poster API when querying transaction products. Each entry includes detailed attributes such as product ID, name, modification details, pricing, and taxation. The response aids in understanding the complete financial and descriptive details of transaction products.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/dash/getTransactionProducts.md#2025-04-21_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"response\":[\n    {\n      \"product_id\":\"908\",\n      \"product_name\":\"Пицца сборная\",\n      \"modification_id\":\"68\",\n      \"modificator_name\":\"Сыр, Грибы, Ох. колбаски, Оливки, Средняя Ø35см\",\n      \"modificator_barcode\":\"\",\n      \"modificator_product_code\":\"\",\n      \"weight_flag\":\"0\",\n      \"num\":\"1\",\n      \"time\":\"1507703516999\",\n      \"workshop\":\"2\",\n      \"barcode\":\"\",\n      \"product_code\":\"\",\n      \"tax_id\":\"4\",\n      \"nodiscount\":\"1\",\n      \"payed_sum\":\"45000\",\n      \"product_sum\":\"45000\",\n      \"discount\":\"0\",\n      \"bonus_sum\":\"0\",\n      \"round_sum\":0,\n      \"client_id\":\"0\",\n      \"promotion_id\":\"0\",\n      \"cert_sum\":\"0\",\n      \"product_cost\":\"43\",\n      \"product_cost_netto\":\"36\",\n      \"product_profit\":\"42707\",\n      \"product_profit_netto\":\"42700\",\n      \"bonus_accrual\":\"0\",\n      \"tax_value\":\"5\",\n      \"tax_type\":\"2\",\n      \"tax_fiscal\":\"1\",\n      \"category_id\":\"33\"\n    },\n    {\n      \"product_id\":\"169\",\n      \"product_name\":\"Речная форель в фольге\",\n      \"modification_id\":\"0\",\n      \"modificator_name\":null,\n      \"modificator_barcode\":null,\n      \"modificator_product_code\":null,\n      \"weight_flag\":\"0\",\n      \"num\":\"1\",\n      \"time\":\"1507703509384\",\n      \"workshop\":\"2\",\n      \"barcode\":\"\",\n      \"product_code\":\"\",\n      \"tax_id\":\"4\",\n      \"nodiscount\":\"1\",\n      \"payed_sum\":\"55000\",\n      \"product_sum\":\"55000\",\n      \"discount\":\"0\",\n      \"bonus_sum\":\"0\",\n      \"round_sum\":0,\n      \"client_id\":\"0\",\n      \"promotion_id\":\"0\",\n      \"cert_sum\":\"0\",\n      \"product_cost\":\"4340\",\n      \"product_cost_netto\":\"3617\",\n      \"product_profit\":\"47910\",\n      \"product_profit_netto\":\"47187\",\n      \"bonus_accrual\":\"0\",\n      \"tax_value\":\"5\",\n      \"tax_type\":\"2\",\n      \"tax_fiscal\":\"1\",\n      \"category_id\":\"33\"\n    },\n    {\n      \"product_id\":\"168\",\n      \"product_name\":\"Стейк из сёмги\",\n      \"modification_id\":\"0\",\n      \"modificator_name\":null,\n      \"modificator_barcode\":null,\n      \"modificator_product_code\":null,\n      \"weight_flag\":\"0\",\n      \"num\":\"1\",\n      \"time\":\"1507703508927\",\n      \"workshop\":\"2\",\n      \"barcode\":\"\",\n      \"product_code\":\"\",\n      \"tax_id\":\"4\",\n      \"nodiscount\":\"1\",\n      \"payed_sum\":\"45000\",\n      \"product_sum\":\"45000\",\n      \"discount\":\"0\",\n      \"bonus_sum\":\"0\",\n      \"round_sum\":0,\n      \"client_id\":\"0\",\n      \"promotion_id\":\"0\",\n      \"cert_sum\":\"0\",\n      \"product_cost\":\"2213\",\n      \"product_cost_netto\":\"1844\",\n      \"product_profit\":\"40537\",\n      \"product_profit_netto\":\"40168\",\n      \"bonus_accrual\":\"0\",\n      \"tax_value\":\"5\",\n      \"tax_type\":\"2\",\n      \"tax_fiscal\":\"1\",\n      \"category_id\":\"33\"\n    }\n  ]\n}\n\n```\n\n----------------------------------------\n\nTITLE: Removing a Customer using clients.removeClient API in PHP\nDESCRIPTION: This PHP code snippet demonstrates how to make a POST request to the clients.removeClient endpoint. It constructs the URL with an authentication token and sends a request with the customer ID to be removed.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/clients/removeClient.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/clients.removeClient'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$client = [\n    'client_id' => 2,\n];\n\n$data = sendRequest($url, 'post', $client);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Semi-Finished Product Details via PHP API Request\nDESCRIPTION: PHP code snippet demonstrating how to make an API request to retrieve semi-finished product properties using the Joinposter API endpoint\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/menu/getPrepack.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/menu.getPrepack'\n . '?token=687409:4164553abf6a031302898da7800b59fb'\n . '&product_id=167'\n . '&1c=true';\n\n$data = sendRequest($url);\n```\n\n----------------------------------------\n\nTITLE: Fetching Storage Inventories in PHP\nDESCRIPTION: PHP API request to retrieve inventory archives for a specific storage location using a token and storage ID\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/storage/getStorageInventories.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/storage.getStorageInventories'\n . '?token=687409:4164553abf6a031302898da7800b59fb'\n . '&storage_id=1';\n\n$data = sendRequest($url);\n```\n\n----------------------------------------\n\nTITLE: Requesting Category Report using finance.getReport API\nDESCRIPTION: This PHP snippet demonstrates how to make a request to the `finance.getReport` API endpoint. It constructs the URL with the necessary token and uses a `sendRequest` function (assumed to be defined elsewhere) to send the request. The URL includes the API endpoint and a token for authentication.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/finance/getReport.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/finance.getReport'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$data = sendRequest($url);\n?>\n```\n\n----------------------------------------\n\nTITLE: Creating Supply with PHP POST Request\nDESCRIPTION: Example of creating a supply using PHP by sending a POST request to the storage.createSupply endpoint. Demonstrates structuring supply and ingredient data with required parameters including supplier, storage, date and ingredient details.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/storage/createSupply.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/storage.createSupply'\n    . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$supply = [\n    \"supply\" => [\n        \"supplier_id\"   => \"1\",\n        \"storage_id\"    => \"1\",\n        \"date\"          => date(\"Y-m-d H:i:s\"),\n        \"from_storage\"  => \"1\",\n        \"to_storage\"    => \"2\"\n    ],\n    \"ingredient\" => [\n        [\n            \"id\"        => \"138\",\n            \"type\"      => \"1\",\n            \"num\"       => \"3\",\n            \"sum\"       => \"6\",\n        ]\n    ]\n];\n\n$data = sendRequest($url, 'post', $supply);\n```\n\n----------------------------------------\n\nTITLE: Response example for Dish Properties\nDESCRIPTION: This JSON snippet shows the expected response structure when querying dish properties using the `menu.getProduct` API. It details the various fields such as barcode, category name, cost, ingredients, and location-specific pricing.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/menu/getProduct.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"response\":{\n    \"barcode\":\"123456\",\n    \"category_name\":\"Коктейли\",\n    \"unit\":\"kg\",\n    \"cost\":\"444\",\n    \"cost_netto\":\"370\",\n    \"fiscal\":\"0\",\n    \"menu_category_id\":\"39\",\n    \"workshop\":\"1\",\n    \"nodiscount\":\"0\",\n    \"photo\":\"/upload/pos_cdb_4/menu/product_1439375876_175.jpg\",\n    \"product_code\":\"\",\n    \"product_id\":\"175\",\n    \"product_name\":\"Manhattan Jack\",\n    \"sort_order\":\"999\",\n    \"tax_id\":\"0\",\n    \"product_tax_id\":\"0\",\n    \"type\":\"2\",\n    \"weight_flag\":\"0\",\n    \"color\":\"white\",\n    \"spots\":[\n      {\n        \"spot_id\":\"1\",\n        \"price\":\"60000\",\n        \"profit\":\"59556\",\n        \"profit_netto\":\"49630\",\n        \"visible\":\"1\"\n      },\n      {\n        \"spot_id\":\"2\",\n        \"price\":\"60000\",\n        \"profit\":\"59556\",\n        \"profit_netto\":\"49630\",\n        \"visible\":\"1\"\n      }\n    ],\n    \"ingredient_id\":\"0\",\n    \"out\":97,\n    \"product_production_description\":\"\",\n    \"ingredients\":[\n      {\n        \"structure_id\":\"52\",\n        \"ingredient_id\":\"92\",\n        \"pr_in_clear\":\"0\",\n        \"pr_in_cook\":\"0\",\n        \"pr_in_fry\":\"0\",\n        \"pr_in_stew\":\"0\",\n        \"pr_in_bake\":\"0\",\n        \"structure_unit\":\"l\",\n        \"structure_type\":\"1\",\n        \"structure_brutto\":30,\n        \"structure_netto\":30,\n        \"structure_lock\":\"1\",\n        \"structure_selfprice\":\"102\",\n        \"structure_selfprice_netto\":\"85\",\n        \"ingredient_name\":\"Красный вермут\",\n        \"ingredient_unit\":\"l\",\n        \"ingredient_weight\":\"0\",\n        \"ingredients_losses_clear\":\"0\",\n        \"ingredients_losses_cook\":\"0\",\n        \"ingredients_losses_fry\":\"0\",\n        \"ingredients_losses_stew\":\"0\",\n        \"ingredients_losses_bake\":\"0\"\n      },\n      {\n        \"structure_id\":\"53\",\n        \"ingredient_id\":\"91\",\n        \"pr_in_clear\":\"0\",\n        \"pr_in_cook\":\"0\",\n        \"pr_in_fry\":\"0\",\n        \"pr_in_stew\":\"0\",\n        \"pr_in_bake\":\"0\",\n        \"structure_unit\":\"l\",\n        \"structure_type\":\"1\",\n        \"structure_brutto\":60,\n        \"structure_netto\":60,\n        \"structure_lock\":\"1\",\n        \"structure_selfprice\":\"313\",\n        \"structure_selfprice_netto\":\"261\",\n        \"ingredient_name\":\"Jack Daniels\",\n        \"ingredient_unit\":\"l\",\n        \"ingredient_weight\":\"0\",\n        \"ingredients_losses_clear\":\"0\",\n        \"ingredients_losses_cook\":\"0\",\n        \"ingredients_losses_fry\":\"0\",\n        \"ingredients_losses_stew\":\"0\",\n        \"ingredients_losses_bake\":\"0\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Ingredients Creation Request Body in JSON\nDESCRIPTION: This JSON snippet shows the structure of the request body for creating ingredients using the `menu.createIngredients` API. It contains an array of ingredient objects, each with properties like `ingredient_name` and `type`. The example showcases the Russian words \"Яблоко\" (Apple) and \"Груша\" (Pear).\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/menu/createIngredients.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"ingredient_name\": \"Яблоко\",\n    \"type\": \"p\"\n  },\n  {\n    \"ingredient_name\": \"Груша\",\n    \"type\": \"p\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Sending POST Request to Remove Product using PHP\nDESCRIPTION: This PHP code snippet demonstrates how to send a POST request to the Poster API to remove a product from the menu. The required dependency is a function `sendRequest` which must be defined to handle HTTP requests. The key parameter is `product_id` which specifies the product to be removed. The snippet expects the `product_id` as an input and returns a boolean response indicating success.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/menu/removeProduct.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/menu.removeProduct'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$product = [\n    'product_id' => 48,\n];\n\n$data = sendRequest($url, 'post', $product);\n\n```\n\n----------------------------------------\n\nTITLE: Making POST Request to Add Customer to Order - PHP\nDESCRIPTION: Example of making a POST request to the transactions.changeClient endpoint to add a customer to an order. The request requires spot_id, spot_tablet_id, transaction_id, and client_id parameters.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/transactions/changeClient.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/transactions.changeClient'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$transaction = [\n    'spot_id'        => 1,\n    'spot_tablet_id' => 1,\n    'transaction_id' => 1950,\n    'client_id'      => 3,\n];\n\n$data = sendRequest($url, 'post', $transaction);\n```\n\n----------------------------------------\n\nTITLE: Querying Transaction Products with PHP\nDESCRIPTION: This PHP code snippet demonstrates how to query the `dash.getTransactionProducts` API endpoint to retrieve a list of products associated with a specific transaction ID. It constructs the API URL with the necessary parameters, including the API token and transaction ID, and then sends a request to the API. A `sendRequest` function (not defined here) is assumed to handle the actual API call.\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/dash/getTransactionProducts.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/dash.getTransactionProducts'\n . '?token=687409:4164553abf6a031302898da7800b59fb'\n . '&transaction_id=388678';\n \n$data = sendRequest($url);\n?>\n```\n\n----------------------------------------\n\nTITLE: Removing a Register with PHP\nDESCRIPTION: This snippet demonstrates how to send a POST request using PHP to remove a register via the access.removeTablet API. It sets the necessary parameters, such as the 'spot_tablet_id', and calls a function 'sendRequest' to make the request. The API returns a JSON response indicating success or failure.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/access/removeTablet.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/access.removeTablet'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$tablet = [\n    'spot_tablet_id' => 1,\n];\n\n$data = sendRequest($url, 'post', $tablet);\n```\n\n----------------------------------------\n\nTITLE: JSON Response for Reservation Details\nDESCRIPTION: Example response structure showing the comprehensive details returned for a specific reservation, including client information, reservation status, and timing details.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/incomingOrders/getOwnReservation.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"response\":{\n      \"incoming_order_id\":\"3\",\n      \"spot_id\":\"1\",\n      \"status\":0,\n      \"client_id\":4985,\n      \"first_name\":\"Степан\",\n      \"last_name\":\"Созонов\",\n      \"phone\":\"380912152764\",\n      \"email\":null,\n      \"sex\":\"2\",\n      \"birthday\":\"1996-08-26\",\n      \"address\":\"московская 9\",\n      \"comment\":\"Подготовить вазу для цветов\",\n      \"created_at\":\"2018-03-22 16:50:18\",\n      \"updated_at\":\"2018-03-22 16:50:18\",\n      \"transaction_id\":null,\n      \"guests_count\":\"1\",\n      \"duration\":\"2000\",\n      \"date_reservation\":\"2018-03-22 18:20:00\"\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Supplier List Response Structure - JSON\nDESCRIPTION: Example JSON response showing the structure of supplier data including IDs, names, contact details, and deletion status. Each supplier object contains comprehensive identification and contact information.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/storage/getSuppliers.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"response\":[\n    {\n      \"supplier_id\":\"1\",\n      \"supplier_name\":\"Закупщик\",\n      \"supplier_phone\":\"+7 499 555 55 55\",\n      \"supplier_adress\":\"\",\n      \"supplier_comment\":\"\",\n      \"supplier_code\":\"\",\n      \"supplier_tin\":\"\",\n      \"delete\":\"0\"\n    },\n    {\n      \"supplier_id\":\"2\",\n      \"supplier_name\":\"Напитков Иван\",\n      \"supplier_phone\":\"0956734678\",\n      \"supplier_adress\":\"ул. Лесная 3\",\n      \"supplier_comment\":\"\",\n      \"supplier_code\":\"\",\n      \"supplier_tin\":\"\",\n      \"delete\":\"0\"\n    },\n    {\n      \"supplier_id\":\"3\",\n      \"supplier_name\":\"Овощной Иван\",\n      \"supplier_phone\":\"0987658943\",\n      \"supplier_adress\":\"ул. Байкальская\",\n      \"supplier_comment\":\"\",\n      \"supplier_code\":\"\",\n      \"supplier_tin\":\"\",\n      \"delete\":\"0\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Account Currency with PHP\nDESCRIPTION: This PHP code snippet demonstrates how to make an API request to get the account currency information. It constructs the URL with the API endpoint and token, then sends the request using a sendRequest function.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/settings/getCurrency.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/settings.getCurrency'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$data = sendRequest($url);\n```\n\n----------------------------------------\n\nTITLE: Sending API Request to Fetch Category Properties\nDESCRIPTION: This PHP code snippet demonstrates how to send a GET request to the JoinPoster API to retrieve properties of a specific product category using its ID. The request URL is constructed with necessary parameters including an API token and category ID.\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/menu/getCategory.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/menu.getCategory'\n . '?token=687409:4164553abf6a031302898da7800b59fb'\n . '&category_id=30'\n . '&1c=true';\n\ndata = sendRequest($url);\n\n```\n\n----------------------------------------\n\nTITLE: Response example for storage.getSuppliers API in JSON\nDESCRIPTION: This JSON snippet shows the structure of the response returned by the `storage.getSuppliers` API method in Joinposter.  The response contains an array of supplier objects, each with details such as ID, name, phone number, address, and other relevant information.\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/storage/getSuppliers.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"response\":[\n    {\n      \"supplier_id\":\"1\",\n      \"supplier_name\":\"Закупщик\",\n      \"supplier_phone\":\"+7 499 555 55 55\",\n      \"supplier_adress\":\"\",\n      \"supplier_comment\":\"\",\n      \"supplier_code\":\"\",\n      \"supplier_tin\":\"\",\n      \"delete\":\"0\"\n    },\n    {\n      \"supplier_id\":\"2\",\n      \"supplier_name\":\"Напитков Иван\",\n      \"supplier_phone\":\"0956734678\",\n      \"supplier_adress\":\"ул. Лесная 3\",\n      \"supplier_comment\":\"\",\n      \"supplier_code\":\"\",\n      \"supplier_tin\":\"\",\n      \"delete\":\"0\"\n    },\n    {\n      \"supplier_id\":\"3\",\n      \"supplier_name\":\"Овощной Иван\",\n      \"supplier_phone\":\"0987658943\",\n      \"supplier_adress\":\"ул. Байкальская\",\n      \"supplier_comment\":\"\",\n      \"supplier_code\":\"\",\n      \"supplier_tin\":\"\",\n      \"delete\":\"0\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Storage Supply with PHP\nDESCRIPTION: Example of making a POST request to update an existing supply entry. Shows how to structure the supply data including supply details and ingredient specifications.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/storage/updateSupply.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/storage.updateSupply'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$supply = [\n    \"supply\" => [\n        \"supply_id\"     => \"51\",\n        \"supplier_id\"   => \"1\",\n        \"storage_id\"    => \"1\",\n        \"date\"          => date(\"Y-m-d H:i:s\"),\n    ],\n    \"ingredient\" => [\n        [\n            \"id\"        => \"138\",\n            \"type\"      => \"1\",\n            \"num\"       => \"3\",\n            \"sum\"       => \"6\",\n        ]\n    ]\n];\n\n$data = sendRequest($url, 'post', $supply);\n```\n\n----------------------------------------\n\nTITLE: Assigning Guest to Poster Order\nDESCRIPTION: This function handles the assignment of a hotel guest to a Poster order. It retrieves the active order, saves the reservation ID to local storage, and adds a comment to the order for identification.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/market/guidelines/pms.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nasync function onReservationApply(reservation) {\n    const res = await Poster.orders.getActive();\n    const activeOrder = res.order;\n\n    localStorage.setItem(`order${activeOrder.id}`, reservation.id);\n    Poster.orders.setOrderComment(activeOrder.id, `Order assigned to the reservation ${reservation.id}`)\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a product to a receipt using Joinposter API in PHP\nDESCRIPTION: This code snippet demonstrates how to add a product to a receipt using the `transactions.addTransactionProduct` API endpoint. It defines the API URL, prepares the POST parameters including spot ID, tablet ID, transaction ID, product ID, and modification details. The `sendRequest` function (not defined in the snippet) is expected to handle the actual API call.\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/transactions/addTransactionProduct.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/transactions.addTransactionProduct'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$transaction = [\n    'spot_id'        => 1,\n    'spot_tablet_id' => 1,\n    'transaction_id' => 1950,\n    'product_id'     => 112,\n    'modification'   => '[{\"m\":19,\"a\":1}]',\n];\n\n$data = sendRequest($url, 'post', $transaction);\n```\n\n----------------------------------------\n\nTITLE: Changing Fiscal Status in PHP\nDESCRIPTION: This PHP snippet demonstrates how to change the fiscal status of a receipt by sending a POST request to the JoinPoster API. It constructs the request URL and necessary post data with transaction details, including the transaction ID and product information.\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/transactions/changeFiscalStatus.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/transactions.changeFiscalStatus'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$postData = [\n    'transaction_id' => 1322,\n    'products' => [\n        [\n            'product_id' => 120,\n            'promotion_id' => 2,\n            'modification_id' => 24,\n            'count' => 3,   \n        ],\n        [\n            'product_id' => 122,\n            'promotion_id' => 0,\n            'modification_id' => 0,\n            'count' => 0.350,   \n        ],\n    ],\n];\n\n$data = sendRequest($url, 'post', $postData);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Suppliers List - PHP Request\nDESCRIPTION: Example of making an HTTP GET request to fetch all suppliers from the storage API. Requires an authentication token parameter.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/storage/getSuppliers.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/storage.getSuppliers'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$data = sendRequest($url);\n```\n\n----------------------------------------\n\nTITLE: Removing Location Using PHP\nDESCRIPTION: Example of sending a POST request to remove a location using PHP. The request requires a location ID (spot_id) and an authentication token.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/access/removeSpot.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/access.removeSpot'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$spot = [\n    'spot_id' => 1,\n];\n\n$data = sendRequest($url, 'post', $spot);\n```\n\n----------------------------------------\n\nTITLE: JSON Response for Account Settings\nDESCRIPTION: Example JSON response from the settings.getAllSettings endpoint containing account configuration details including company information, feature flags, and currency settings. This response shows all available account settings that can be accessed via the API.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/settings/getAllSettings.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"response\": {\n        \"COMPANY_ID\": \"demo\",\n        \"FIZ_ADRESS_CITY\": \"joinposter.com\",\n        \"FIZ_ADRESS_PHONE\": \"74993466863\",\n        \"uses_tables\": 1,\n        \"uses_cash_shifts\": 1,\n        \"uses_taxes\": 1,\n        \"uses_multiprice\": 0,\n        \"tip_amount\": 10,\n        \"uses_bookkeeping\": 1,\n        \"uses_ipay\": 0,\n        \"uses_manufacturing\": 0,\n        \"uses_quick_waiter\": 0,\n        \"company_name\": \"Демо-версия Poster\",\n        \"company_type\": 1,\n        \"timezones\": \"Europe/Kiev\",\n        \"logo\": \"/upload/pos_cdb_4/icon.png\",\n        \"lang\": \"ru\",\n        \"pos_phone\": \"74993466863\",\n        \"analytics_plus_time\": 0,\n        \"uses_fiscality\": 0,\n        \"print_fiscal_by_default\": 0,\n        \"currency\": {\n            \"currency_id\": 1,\n            \"currency_name\": \"Гривна\",\n            \"currency_code\": \"грн.\",\n            \"currency_symbol\": \"₴\",\n            \"currency_code_iso\": \"UAH\"\n        },\n        \"email\": \"root@joinposter.com\",\n        \"name\": \"Demo\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Joinposter API Finance Categories Response Example in JSON\nDESCRIPTION: This JSON snippet shows the structure of the response received from the Joinposter API's `finance.getCategories` endpoint.  The response contains an array of category objects, each with properties like `category_id`, `name`, `parent_id`, `operations`, `action`, and `delete`. These parameters represent different attributes of each financial category.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/finance/getCategories.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"response\":[\n    {\n      \"category_id\":\"5\",\n      \"name\":\"Зарплата\",\n      \"parent_id\":\"0\",\n      \"operations\":\"2\",\n      \"action\":\"0\",\n      \"delete\":\"0\"\n    },\n    {\n      \"category_id\":\"2\",\n      \"name\":\"Кассовые смены\",\n      \"parent_id\":\"0\",\n      \"operations\":\"3\",\n      \"action\":\"11\",\n      \"delete\":\"0\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Making API Request for Account Language with PHP\nDESCRIPTION: This PHP code demonstrates how to make an HTTP request to retrieve the account language. It sends a request to the settings.getLanguage endpoint with an authentication token.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/settings/getLanguage.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/settings.getLanguage'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$data = sendRequest($url);\n```\n\n----------------------------------------\n\nTITLE: Generating payments.getOpenTransactionsOnTable API Request\nDESCRIPTION: This PHP snippet demonstrates how to construct the URL for the payments.getOpenTransactionsOnTable API endpoint, including the necessary parameters and signature generation. It requires the 'application_secret' which is provided by Poster.\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/payments/getOpenTransactionsOnTable.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?\n$url = 'https://joinposter.com/api/payments.getOpenTransactionsOnTable?' .\n  'format=json';\n\n$application_secret = '123123123123';\n\n$request = [\n  'type' => 'application-name',\n  'merchant_id' => 3432343,\n  'table_id' => 41,\n];\n\n$request['sign'] = md5(implode(':', $request) . ':' . $application_secret);\n\n$url .= '&' . http_build_query($request);\n\n$answer = sendRequest($url);\n```\n\n----------------------------------------\n\nTITLE: Ingredient Category Response JSON Schema\nDESCRIPTION: Example JSON response structure for menu.getCategoryIngredients, showing category details including ID, name, and optional 1C system identifier.\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/menu/getCategoryIngredients.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"response\":{\n    \"category_id\":\"3\",\n    \"name\":\"Алкоголь\",\n    \"id_1c\":\"b80ffc81-0fc9-11e7-9ab4-ace01035e460\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Requesting Storage Inventory History with PHP\nDESCRIPTION: Example of making an HTTP GET request to fetch storage inventory history. The request requires an authentication token and storage_id parameter.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/storage/getStorageInventories.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/storage.getStorageInventories'\n . '?token=687409:4164553abf6a031302898da7800b59fb'\n . '&storage_id=1';\n\n$data = sendRequest($url);\n```\n\n----------------------------------------\n\nTITLE: Transaction Response Structure\nDESCRIPTION: Example JSON response showing the complete structure of a transaction including payment details, products sold, and transaction history. Contains detailed information about payments, guests, timing, and product-specific data.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/dash/getTransaction.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"response\":[\n      {\n         \"transaction_id\":\"330660\",\n         \"date_start\":\"1518873040083\",\n         \"date_start_new\":\"1518873041556\",\n         \"date_close\":\"1518873046314\",\n         \"status\":\"2\",\n         \"guests_count\":\"2\",\n         \"discount\":\"0\",\n         \"bonus\":\"0\",\n         \"pay_type\":\"3\",\n         \"payed_bonus\":\"0\",\n         \"payed_card\":\"0\",\n         \"payed_cash\":\"2750\",\n         \"payed_sum\":\"2750\",\n         \"payed_cert\":\"0\",\n         \"payed_third_party\":\"0\",\n         \"round_sum\":\"0\",\n         \"tip_sum\":\"0\",\n         \"tips_card\": \"0\",\n         \"tips_cash\": \"0\",\n         \"sum\":\"2750\",\n         \"spot_id\":\"1\",\n         \"table_id\":\"94\",\n         \"name\":\"Анна\",\n         \"user_id\":\"1\",\n         \"client_id\":\"0\",\n         \"card_number\":\"0\",\n         \"transaction_comment\":null,\n         \"reason\":\"\",\n         \"print_fiscal\":\"0\",\n         \"total_profit\":\"-8786\",\n         \"total_profit_netto\":\"-6789\",\n         \"table_name\":\"5\",\n         \"client_firstname\":null,\n         \"client_lastname\":null,\n         \"date_close_date\":\"2018-02-17 16:10:46\",\n         \"products\":[\n            {\n               \"product_id\":\"162\",\n               \"modification_id\":\"0\",\n               \"num\":\"1\",\n               \"product_price\":\"1050\",\n               \"payed_sum\":\"1050\",\n               \"product_cost\":\"4536\",\n               \"product_cost_netto\":\"3780\",\n               \"product_profit\":\"-3486\",\n               \"product_profit_netto\":\"-2905\"\n            },\n            {\n               \"product_id\":\"161\",\n               \"modification_id\":\"0\",\n               \"num\":\"1\",\n               \"product_price\":\"1700\",\n               \"payed_sum\":\"1700\",\n               \"product_cost\":\"7000\",\n               \"product_cost_netto\":\"5833\",\n               \"product_profit\":\"-5300\",\n               \"product_profit_netto\":\"-3884\"\n            }\n         ],\n         \"history\":[\n            {\n               \"history_id\":\"2485357\",\n               \"type_history\":\"open\",\n               \"spot_tablet_id\":\"1\",\n               \"time\":\"1518873040083\",\n               \"user_id\":\"1\",\n               \"value\":\"1\",\n               \"value2\":\"94\",\n               \"value3\":\"2\",\n               \"value4\":\"0\",\n               \"value5\":\"0\",\n               \"value_text\":null\n            },\n            {\n               \"history_id\":\"2485358\",\n               \"type_history\":\"additem\",\n               \"spot_tablet_id\":\"1\",\n               \"time\":\"1518873041556\",\n               \"user_id\":\"1\",\n               \"value\":\"162\",\n               \"value2\":\"0\",\n               \"value3\":\"0\",\n               \"value4\":\"0\",\n               \"value5\":\"0\",\n               \"value_text\":{\n                  \"price\":10.5\n               }\n            },\n            {\n               \"history_id\":\"2485359\",\n               \"type_history\":\"additem\",\n               \"spot_tablet_id\":\"1\",\n               \"time\":\"1518873042008\",\n               \"user_id\":\"1\",\n               \"value\":\"161\",\n               \"value2\":\"0\",\n               \"value3\":\"0\",\n               \"value4\":\"0\",\n               \"value5\":\"0\",\n               \"value_text\":{\n                  \"price\":17\n               }\n            },\n            {\n               \"history_id\":\"2485360\",\n               \"type_history\":\"close\",\n               \"spot_tablet_id\":\"1\",\n               \"time\":\"1518873046314\",\n               \"user_id\":\"1\",\n               \"value\":\"3\",\n               \"value2\":\"2750\",\n               \"value3\":\"0\",\n               \"value4\":\"0\",\n               \"value5\":\"0\",\n               \"value_text\":{\n                  \"payments\":{\n                     \"cash\":27.5\n                  }\n               }\n            }\n         ]\n      }\n   ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Semi-Finished Product in PHP\nDESCRIPTION: This PHP snippet demonstrates how to create a semi-finished product by sending a POST request to the 'menu.createPrepack' API endpoint. It includes setting the URL, preparing the product data including ingredients, and calling the 'sendRequest' function for execution.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/menu/createPrepack.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/menu.createPrepack'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$prepack = [\n    'product_name' => 'Маринованные грибы',\n    'ingredient'   => [\n        [\n            'id'     => 88,\n            'type'   => 1,\n            'brutto' => 3,\n            'netto'  => 6,\n            'lock'   => 0,\n            'clear'  => 0,\n            'cook'   => 0,\n            'fry'    => 0,\n            'stew'   => 1,\n            'bake'   => 0,\n        ],\n    ],\n];\n\ndata = sendRequest($url, 'post', $prepack);\n```\n\n----------------------------------------\n\nTITLE: Removing Cash Shift Transaction in PHP\nDESCRIPTION: This PHP code demonstrates how to call the finance.removeCashShiftTransaction endpoint to delete a cash shift transaction. It specifies the transaction ID 611 to be deleted and sends a POST request to the Poster API.\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/finance/removeCashShiftTransaction.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/finance.removeCashShiftTransaction'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$cash_shift_transaction = [\n    'cash_shift_transaction_id' => 611,\n];\n\n$data = sendRequest($url, 'post', $cash_shift_transaction);\n```\n\n----------------------------------------\n\nTITLE: Adding Order Comment Using PHP\nDESCRIPTION: PHP example demonstrating how to make a POST request to add a comment to an order via the transactions.changeComment endpoint. Shows parameter structure and API token usage.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/transactions/changeComment.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/transactions.changeComment'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$transaction = [\n    'spot_id'        => 1,\n    'spot_tablet_id' => 1,\n    'transaction_id' => 1950,\n    'comment'        => 'День рождения',\n];\n\n$data = sendRequest($url, 'post', $transaction);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Cash Shifts with PHP\nDESCRIPTION: This PHP code demonstrates how to make a GET request to the finance.getCashShifts endpoint. It includes required parameters for date range filtering and authentication token.\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/finance/getCashShifts.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/finance.getCashShifts'\n    . '?token=687409:4164553abf6a031302898da7800b59fb'\n    . '&dateFrom=20170701'\n    . '&dateTo=20170901';\n\n$data = sendRequest($url);\n```\n\n----------------------------------------\n\nTITLE: Sending GET Request for Pack Data in PHP\nDESCRIPTION: This PHP snippet demonstrates how to construct and send a GET request to the storage.getPack endpoint of the Poster POS API. It includes the necessary parameters such as format, token, and pack_id.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/storage/getPack.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/storage.getPack' \n  . '?format=json'\n  . '&token=687409:4164553abf6a031302898da7800b59fb'\n  . '&pack_id=4';\n\n$data = sendRequest($url);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Manufacture Write-offs API Request in PHP\nDESCRIPTION: PHP code snippet demonstrating how to construct an API request for retrieving manufacture write-offs with date range and pagination parameters\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/storage/getManufacturesWriteOffs.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/storage.getManufacturesWriteOffs'\n . '?token=687409:4164553abf6a031302898da7800b59fb'\n . '&date_from=2017-11-30'\n . '&date_to=2017-11-30'\n . '&per_page=10'\n . '&page=5';\n\n$data = sendRequest($url);\n```\n\n----------------------------------------\n\nTITLE: Sending HTTP GET Request using Poster API PHP\nDESCRIPTION: This PHP snippet demonstrates how to send a request to the Poster API to fetch transaction products using the dash.getTransactionProducts endpoint. The request requires an API token and a transaction ID as parameters. The response contains details about the products in the specified transaction.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/dash/getTransactionProducts.md#2025-04-21_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/dash.getTransactionProducts'\n . '?token=687409:4164553abf6a031302898da7800b59fb'\n . '&transaction_id=388678';\n \n$data = sendRequest($url);\n\n```\n\n----------------------------------------\n\nTITLE: Example Response Structure for Product Category Properties - JSON\nDESCRIPTION: This snippet provides an example of the JSON response structure returned by the JoinPoster API for a product category request. The output includes properties such as 'category_id', 'category_name', and an array of 'visible' indicating the visibility at different venues. The response is intended for API consumers to understand the format and contents of the data returned.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/menu/getCategory.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{  \n  \"response\":{  \n    \"category_id\":30,\n    \"category_name\":\"Бар\",\n    \"category_photo\":null,\n    \"category_photo_origin\":null,\n    \"parent_category\":0,\n    \"category_color\":\"yellow\",\n    \"category_hidden\":0,\n    \"sort_order\":3,\n    \"fiscal\":0,\n    \"nodiscount\":0,\n    \"tax_id\":2,\n    \"left\":7,\n    \"right\":42,\n    \"level\":1,\n    \"category_tag\":\"alco\",\n    \"visible\": [\n      {\n        \"spot_id\": 1,\n        \"visible\": 1\n      },\n      {\n        \"spot_id\": 2,\n        \"visible\": 0\n      }\n    ],\n    \"id_1c\":\"9c68dbc9-b255-11e6-9a8f-ace01035e460\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Spot Invoice Data with PHP in Poster API\nDESCRIPTION: This PHP snippet demonstrates how to make a GET request to the spots.getSpotInvoiceData endpoint. It constructs a URL with the required access token and spot_id parameter, then uses the PosterAPI helper class to send the request.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/spots/getSpotInvoiceData.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/spots.getSpotInvoiceData'\n . '?token=687409:4164553abf6a031302898da7800b59fb'\n . '&spot_id=1';\n\n$data = PosterAPI::sendRequest($url);\n```\n\n----------------------------------------\n\nTITLE: Querying Promotion Properties with PHP\nDESCRIPTION: This PHP snippet demonstrates how to query promotion properties using the clients.getPromotion API endpoint. It constructs a URL with the necessary parameters (token and promotion_id) and uses a sendRequest function (not defined in the snippet) to send the request and retrieve the data.\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/clients/getPromotion.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/clients.getPromotion'\n . '?token=687409:4164553abf6a031302898da7800b59fb'\n . '&promotion_id=13';\n\n$data = sendRequest($url);\n?>\n```\n\n----------------------------------------\n\nTITLE: Update Category Properties in Joinposter using PHP\nDESCRIPTION: This PHP code snippet demonstrates how to update product category properties using the `menu.updateCategory` API endpoint. It constructs the API URL, defines an array containing the category properties to be updated (such as ID, name, parent category, and color), and sends a POST request to the Joinposter API with this data. The `sendRequest` function (not defined here) is assumed to handle the actual HTTP request.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/menu/updateCategory.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/menu.updateCategory'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$category = [\n    'category_id'     => 34,\n    'category_name'   => 'Пицца',\n    'parent_category' => 0,\n    'category_color'  => 'red',\n];\n\n$data = sendRequest($url, 'post', $category);\n?>\n```\n\n----------------------------------------\n\nTITLE: Storage Manufacture Response Format\nDESCRIPTION: Example JSON response from the storage.getManufacture endpoint showing the structure of manufacture data including storage details, totals, and manufactured products list.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/storage/getManufacture.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"response\":{\n    \"manufacture_id\":\"4\",\n    \"storage_name\":\"Storage 1\",\n    \"storage_id\":\"1\",\n    \"user_id\":\"4\",\n    \"date\":\"2016-12-26 14:45:00\",\n    \"sum\":70.35,\n    \"sum_netto\":58.63,\n    \"products\":[\n      {\n        \"ingredient_id\":\"205\",\n        \"product_id\":\"134\",\n        \"product_name\":\"Flower tea 360ml\",\n        \"product_num\":\"3.0000\",\n        \"type\":\"2\"\n      },\n      {\n        \"ingredient_id\":\"204\",\n        \"product_id\":\"137\",\n        \"product_name\":\"Black tea\",\n        \"product_num\":\"2.0000\",\n        \"type\":\"2\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Requesting Storage Packs List with PHP\nDESCRIPTION: Example of making an HTTP GET request to retrieve the list of storage packs. Uses token authentication and JSON response format.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/storage/getPacks.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?\\n$url = 'https://joinposter.com/api/storage.getPacks' \\n  . '?format=json'\\n  . '&token=687409:4164553abf6a031302898da7800b59fb';\\n\\n$data = sendRequest($url);\n```\n\n----------------------------------------\n\nTITLE: Creating an Employee with PHP in Poster POS API\nDESCRIPTION: This PHP snippet demonstrates how to create a new employee using the access.createEmployee API method. It sets up the request URL with an authentication token and sends a POST request with employee details.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/access/createEmployee.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/access.createEmployee'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$employee = [\n    'name'      => 'John Doe',\n    'user_type' => 2,\n    'pos_pass'  => '',\n    'login'     => 'john.doe@test.com',\n    'pass'      => 'aZntaeVP9h',\n];\n\n$data = sendRequest($url, 'post', $employee);\n```\n\n----------------------------------------\n\nTITLE: Sending Transaction Client Change Request in PHP\nDESCRIPTION: Demonstrates how to make a POST request to change the client associated with a specific transaction using the JoinPoster API\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/transactions/changeClient.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/transactions.changeClient'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$transaction = [\n    'spot_id'        => 1,\n    'spot_tablet_id' => 1,\n    'transaction_id' => 1950,\n    'client_id'      => 3,\n];\n\n$data = sendRequest($url, 'post', $transaction);\n```\n\n----------------------------------------\n\nTITLE: Creating a Location using access.createSpot API in PHP\nDESCRIPTION: This PHP code snippet demonstrates how to make an HTTP POST request to create a new location using the access.createSpot API method. It sets the API endpoint URL with a token and sends a POST request with the location name.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/access/createSpot.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/access.createSpot'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$spot = [\n    'spot_name' => 'My new spot',\n];\n\n$data = sendRequest($url, 'post', $spot);\n```\n\n----------------------------------------\n\nTITLE: PHP Request for Fetching Reservation Properties\nDESCRIPTION: Demonstrates how to make an API request to retrieve reservation details using the incoming_order_id parameter. Requires a valid token and specific reservation ID.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/incomingOrders/getOwnReservation.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/incomingOrders.getOwnReservation'\n . '?token=687409:4164553abf6a031302898da7800b59fb'\n . '&incoming_order_id=3';\n\n$data = sendRequest($url);\n```\n\n----------------------------------------\n\nTITLE: Making HTTP GET Request for Reservations in PHP\nDESCRIPTION: Example of making an HTTP GET request to retrieve reservations list using PHP. The request requires an authentication token.\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/incomingOrders/getOwnReservations.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/incomingOrders.getOwnReservations'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$data = sendRequest($url);\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving Manufactures List - PHP Request\nDESCRIPTION: Makes a GET request to the storage.getManufactures endpoint to retrieve a list of manufactures. The request requires an authentication token and specifies JSON as the response format.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/storage/getManufactures.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?\\n$url = 'https://apidemo.joinposter.com/api/storage.getManufactures'\\n  . '?format=json'\\n  . '&token=687409:4164553abf6a031302898da7800b59fb';\\n\\n$data = sendRequest($url);\n```\n\n----------------------------------------\n\nTITLE: Sample API Response for Tax Properties - JSON\nDESCRIPTION: This snippet shows an example of the JSON response received from the JoinPoster API when querying for tax properties. It contains various details about the tax, such as tax ID, country code, tax name, and tax percentage.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/finance/getTax.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"response\":{\n    \"tax_id\":3,\n    \"country\":\"UA\",\n    \"tax_name\":\"Налог с оборота\",\n    \"tax_value\":5,\n    \"type\":2,\n    \"fiscal\":1,\n    \"fiscal_program\":0,\n    \"fixed\":0,\n    \"delete\":0\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Querying Online Order Properties in PHP\nDESCRIPTION: This PHP snippet demonstrates how to make an HTTP GET request to the incomingOrders.getOwnIncomingOrder endpoint. It constructs the URL with the required token and incoming_order_id parameters.\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/incomingOrders/getOwnIncomingOrder.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/incomingOrders.getOwnIncomingOrder'\n . '?token=687409:4164553abf6a031302898da7800b59fb'\n . '&incoming_order_id=1';\n\n$data = sendRequest($url);\n```\n\n----------------------------------------\n\nTITLE: Requesting Customer Transactions via Joinposter API\nDESCRIPTION: This PHP code snippet demonstrates how to construct and send a request to the Joinposter API to retrieve customer transactions. It includes the API endpoint, required parameters such as the API token and client ID, and optional parameters like the start date. The response is then processed using a `sendRequest` function (not defined in the snippet).\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/franchise/getTransactionsByClientId.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?\n$url = 'https://joinposter.com/api/franchise.getTransactionsByClientId'\n    . '?format=json'\n    . '&token=687409:4164553abf6a031302898da7800b59fb'\n    . '&client_id=4'\n    . '&date_from=20170400';\n\n$transactions = sendRequest($url);\n```\n\n----------------------------------------\n\nTITLE: Querying Suppliers with storage.getSuppliers in PHP\nDESCRIPTION: This code snippet demonstrates how to query the Joinposter API to retrieve a list of suppliers using the `storage.getSuppliers` method. It constructs the API URL with the required token and calls a `sendRequest` function (not defined in the snippet) to execute the request and retrieve the data.\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/storage/getSuppliers.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/storage.getSuppliers'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$data = sendRequest($url);\n?>\n```\n\n----------------------------------------\n\nTITLE: Requesting Customer Groups via Joinposter API in PHP\nDESCRIPTION: This PHP code snippet demonstrates how to make a GET request to the `clients.getGroups` endpoint of the Joinposter API. It constructs the URL with the required token parameter and uses a `sendRequest` function (not defined in the snippet) to send the request and retrieve the data.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/clients/getGroups.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/clients.getGroups'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$data = sendRequest($url);\n?>\n```\n\n----------------------------------------\n\nTITLE: Requesting Ingredient Movements Report with PHP\nDESCRIPTION: Example of making an HTTP GET request to fetch ingredient movements report. The request includes parameters for date range, storage ID, and ingredient type filtering.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/storage/getReportMovement.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?\\n$url = 'https://joinposter.com/api/storage.getReportMovement'\\n  . '?token=687409:4164553abf6a031302898da7800b59fb'\\n  . '&dateFrom=20170101'\\n  . '&dateTo=20180101'\\n  . '&storage_id=1'\\n  . '&type=2';\\n\\n$data = sendRequest($url);\n```\n\n----------------------------------------\n\nTITLE: JSON Response Example for Products and Dishes\nDESCRIPTION: This JSON snippet represents a typical response from the `menu.getProducts` endpoint. It contains an array of product and dish objects, each with detailed information such as barcode, category name, cost, fiscal settings, photo URLs, product ID, product name, tax ID, type, weight flag, color, ingredient ID, modifications, spots and out of stock status. Some products include modification options, spots (location-specific pricing), ingredient information, and group modifications.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/menu/getProducts.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"response\":[\n      {\n         \"barcode\":\"4820098749621\",\n         \"category_name\":\"Вода\",\n         \"unit\":\"\",\n         \"cost\":\"100\",\n         \"cost_netto\":\"83\",\n         \"fiscal\":\"0\",\n         \"menu_category_id\":\"15\",\n         \"workshop\":\"1\",\n         \"nodiscount\":\"0\",\n         \"photo\":\"/upload/4/menu/product_1403094564_139.jpg\",\n         \"photo_origin\":\"/upload/4/menu/product_1403094564_139_original.jpg\",\n         \"product_code\":\"\",\n         \"product_id\":\"139\",\n         \"product_name\":\"Borjomi\",\n         \"sort_order\":\"999\",\n         \"tax_id\":\"0\",\n         \"product_tax_id\":\"2\",\n         \"type\":\"3\",\n         \"weight_flag\":\"0\",\n         \"color\":\"white\",\n         \"ingredient_id\":\"9\",\n         \"modifications\":[\n            {\n               \"modificator_id\":\"147\",\n               \"modificator_name\":\"Сок яблочный для кальяна \",\n               \"modificator_selfprice\":\"0\",\n               \"modificator_selfprice_netto\":\"0\",\n               \"order\":\"0\",\n               \"modificator_barcode\":\"\",\n               \"modificator_product_code\":\"\",\n               \"spots\":[\n                  {\n                     \"spot_id\":\"1\",\n                     \"price\":\"68100\",\n                     \"profit\":\"68100\",\n                     \"profit_netto\":\"56750\",\n                     \"visible\":\"1\"\n                  },\n                  {\n                     \"spot_id\":\"2\",\n                     \"price\":\"68100\",\n                     \"profit\":\"68100\",\n                     \"profit_netto\":\"56750\",\n                     \"visible\":\"1\"\n                  },\n                  {\n                     \"spot_id\":\"1\",\n                     \"price\":\"68100\",\n                     \"profit\":\"68100\",\n                     \"profit_netto\":\"56750\",\n                     \"visible\":\"1\"\n                  },\n                  {\n                     \"spot_id\":\"2\",\n                     \"price\":\"68100\",\n                     \"profit\":\"68100\",\n                     \"profit_netto\":\"56750\",\n                     \"visible\":\"1\"\n                  }\n               ],\n               \"ingredient_id\":\"0\"\n            }\n         ],\n         \"out\":0\n      },\n      {\n         \"barcode\":\"\",\n         \"category_name\":\"Вода\",\n         \"unit\":\"\",\n         \"cost\":\"654\",\n         \"cost_netto\":\"545\",\n         \"fiscal\":\"0\",\n         \"menu_category_id\":\"15\",\n         \"workshop\":\"3\",\n         \"nodiscount\":\"0\",\n         \"photo\":\"/upload/4/menu/product_1403094497_138.jpg\",\n         \"photo_origin\":\"/upload/4/menu/product_1403094497_138_original.jpg\",\n         \"product_code\":\"\",\n         \"product_id\":\"138\",\n         \"product_name\":\"Evian\",\n         \"sort_order\":\"999\",\n         \"tax_id\":\"0\",\n         \"product_tax_id\":\"0\",\n         \"type\":\"3\",\n         \"weight_flag\":\"0\",\n         \"color\":\"white\",\n         \"spots\":[\n            {\n               \"spot_id\":\"1\",\n               \"price\":\"19000\",\n               \"profit\":\"18346\",\n               \"profit_netto\":\"15288\",\n               \"visible\":\"1\"\n            },\n            {\n               \"spot_id\":\"2\",\n               \"price\":\"19000\",\n               \"profit\":\"18346\",\n               \"profit_netto\":\"15288\",\n               \"visible\":\"1\"\n            }\n         ],\n         \"ingredient_id\":\"8\",\n         \"cooking_time\": \"0\",\n         \"out\":0\n      },\n      {\n         \"barcode\":\"\",\n         \"category_name\":\"Top screen\",\n         \"unit\":\"kg\",\n         \"cost\":\"0\",\n         \"cost_netto\":\"0\",\n         \"fiscal\":\"0\",\n         \"hidden\":\"0\",\n         \"menu_category_id\":\"0\",\n         \"workshop\":\"1\",\n         \"nodiscount\":\"0\",\n         \"photo\":\"\",\n         \"photo_origin\":null,\n         \"price\":{\n            \"1\":\"30000\",\n            \"2\":\"30000\"\n         },\n         \"product_code\":\"\",\n         \"product_id\":\"30\",\n         \"product_name\":\"Set menu\",\n         \"profit\":{\n            \"1\":\"30000\",\n            \"2\":\"30000\"\n         },\n         \"sort_order\":\"999\",\n         \"tax_id\":\"0\",\n         \"product_tax_id\":\"0\",\n         \"type\":\"2\",\n         \"weight_flag\":\"0\",\n         \"color\":\"white\",\n         \"spots\":[\n            {\n               \"spot_id\":\"1\",\n               \"price\":\"30000\",\n               \"profit\":\"30000\",\n               \"profit_netto\":\"30000\",\n               \"visible\":\"1\"\n            },\n            {\n               \"spot_id\":\"2\",\n               \"price\":\"30000\",\n               \"profit\":\"30000\",\n               \"profit_netto\":\"30000\",\n               \"visible\":\"1\"\n            }\n         ],\n         \"ingredient_id\":\"0\",\n         \"cooking_time\":\"0\",\n         \"different_spots_prices\":\"0\",\n         \"fiscal_code\":\"\",\n         \"group_modifications\":[\n            {\n               \"dish_modification_group_id\":29,\n               \"name\":\"Drinks\",\n               \"num_min\":1,\n               \"num_max\":3,\n               \"is_deleted\":0,\n               \"modifications\":[\n                  {\n                     \"dish_modification_id\":142,\n                     \"name\":\"Cola\",\n                     \"ingredient_id\":77,\n                     \"type\":2,\n                     \"brutto\":1,\n                     \"price\":99.99,\n                     \"photo_orig\":\"\",\n                     \"photo_large\":\"\",\n                     \"photo_small\":\"\",\n                     \"last_modified_time\":\"2020-05-26 15:33:30\"\n                  },\n                  {\n                     \"dish_modification_id\":143,\n                     \"name\":\"Fanta\",\n                     \"ingredient_id\":33,\n                     \"type\":10,\n                     \"brutto\":200,\n                     \"price\":99.99,\n                     \"photo_orig\":\"\",\n                     \"photo_large\":\"\",\n                     \"photo_small\":\"\",\n                     \"last_modified_time\":\"2020-05-26 15:33:30\"\n                  },\n                  {\n                     \"dish_modification_id\":147,\n                     \"name\":\"Sprite\",\n                     \"ingredient_id\":39,\n                     \"type\":10,\n                     \"brutto\":200,\n                     \"price\":99.99,\n                     \"photo_orig\":\"\",\n                     \"photo_large\":\"\",\n                     \"photo_small\":\"\",\n                     \"last_modified_time\":\"2020-05-26 15:33:30\"\n                  }\n               ]\n            },\n            {\n               \"dish_modification_group_id\":30,\n               \"name\":\"Eats\",\n               \"num_min\":1,\n               \"num_max\":999,\n               \"is_deleted\":0,\n               \"modifications\":[\n                  {\n                     \"dish_modification_id\":144,\n                     \"name\":\"French fries\",\n                     \"ingredient_id\":0,\n                     \"type\":0,\n                     \"brutto\":0,\n                     \"price\":99.99,\n                     \"photo_orig\":\"\",\n                     \"photo_large\":\"\",\n                     \"photo_small\":\"\",\n                     \"last_modified_time\":\"2020-05-26 15:33:30\"\n                  },\n                  {\n                     \"dish_modification_id\":145,\n                     \"name\":\"Snacks\",\n                     \"ingredient_id\":178,\n                     \"type\":10,\n                     \"brutto\":200,\n                     \"price\":99.99,\n                     \"photo_orig\":\"\",\n                     \"photo_large\":\"\",\n                     \"photo_small\":\"\",\n                     \"last_modified_time\":\"2020-05-26 15:33:30\"\n                  }\n               ]\n            }\n         ],\n         \"out\":100,\n         \"product_production_description\":\"\",\n         \"ingredients\":[\n            {\n               \"structure_id\":\"828\",\n               \"ingredient_id\":\"32\",\n               \"pr_in_clear\":\"0\",\n               \"pr_in_cook\":\"0\",\n               \"pr_in_fry\":\"0\",\n               \"pr_in_stew\":\"0\",\n               \"pr_in_bake\":\"0\",\n               \"structure_unit\":\"kg\",\n               \"structure_type\":\"1\",\n               \"structure_brutto\":100,\n               \"structure_netto\":100,\n               \"structure_lock\":\"1\",\n               \"structure_selfprice\":\"0\",\n               \"structure_selfprice_netto\":\"0\",\n               \"ingredient_name\":\"Sugar\",\n               \"ingredient_unit\":\"kg\",\n               \"ingredient_weight\":0,\n               \"ingredients_losses_clear\":\"0\",\n               \"ingredients_losses_cook\":\"0\",\n               \"ingredients_losses_fry\":\"0\",\n               \"ingredients_losses_stew\":\"0\",\n               \"ingredients_losses_bake\":\"0\"\n            }\n         ]\n      }\n   ]\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Transaction Details with PHP\nDESCRIPTION: Example of making an HTTP GET request to retrieve transaction details. The request includes parameters for transaction ID, history inclusion, and product inclusion.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/dash/getTransaction.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/dash.getTransaction'\n . '?token=687409:4164553abf6a031302898da7800b59fb'\n . '&transaction_id=330660'\n . '&include_history=true'\n . '&include_products=true';\n\n$data = sendRequest($url);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Manual Wastes List in PHP\nDESCRIPTION: PHP code example demonstrating how to make a GET request to the storage.getWastes endpoint. The request includes parameters for token authentication, date range filtering from January 2017 to January 2018, and includes deleted wastes.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/storage/getWastes.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?\n$url = 'https://joinposter.com/api/storage.getWastes'\n  . '?token=687409:4164553abf6a031302898da7800b59fb'\n  . '&dateFrom=20170101'\n  . '&dateTo=20180101'\n  . '&1c=true';\n\n$data = sendRequest($url);\n```\n\n----------------------------------------\n\nTITLE: Recover Category with cURL\nDESCRIPTION: This PHP cURL example shows how to recover a category. It uses the `curl` command-line tool to send a POST request to the `menu.recoverCategory` endpoint with specified parameters such as `category_id` and `parent_category_id` as form data. The token is included in the URL as a query parameter.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/menu/recoverCategory.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\ncurl -X POST \\\n  'http://poster.pos/api/menu.recoverCategory?token=687409:4164553abf6a031302898da7800b59fb' \\\n  -H 'cache-control: no-cache' \\\n  -H 'content-type: multipart/form-data' \\\n  -F category_id=38 \\\n  -F parent_category_id=5 \\\n\n```\n\n----------------------------------------\n\nTITLE: Fetching Company Name from Joinposter API in PHP\nDESCRIPTION: This PHP snippet demonstrates how to make a request to the Joinposter API endpoint 'settings.getCompanyName' to retrieve the company name. It uses a sample token for authentication and assumes the existence of a 'sendRequest' function for handling the API call. The URL is constructed with the API endpoint and the token as a query parameter.\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/settings/getCompanyName.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/settings.getCompanyName'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$data = sendRequest($url);\n?>\n```\n\n----------------------------------------\n\nTITLE: Removing Preloader in Manage Platform IFrame\nDESCRIPTION: JavaScript code to remove the preloader spinner from the iframe after the page loads by sending a postMessage to the parent window.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/manage/index.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.addEventListener('load', function () {\n        top.postMessage({hideSpinner: true}, '*')\n}, false);\n```\n\n----------------------------------------\n\nTITLE: API Response for Customer Creation\nDESCRIPTION: JSON response format returned by the JoinPoster API after successfully creating a new customer. The response contains the unique customer ID assigned to the newly created customer record.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/clients/createClient.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"response\":4082\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Client Transactions Across Franchises Using PHP\nDESCRIPTION: This PHP snippet demonstrates how to call the franchise.getTransactionsByClientId endpoint. It requests transactions for client ID 4 since April 2017, using the format=json parameter and the authentication token.\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/franchise/getTransactionsByClientId.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/franchise.getTransactionsByClientId'\n    . '?format=json'\n    . '&token=687409:4164553abf6a031302898da7800b59fb'\n    . '&client_id=4'\n    . '&date_from=20170400';\n\n$transactions = sendRequest($url);\n```\n\n----------------------------------------\n\nTITLE: Fetching Tax Data with PHP\nDESCRIPTION: This code snippet demonstrates how to fetch tax data from the finance.getTaxes API using PHP. It constructs the API URL with the required token and sends a request to retrieve the tax list. The `sendRequest` function is assumed to be defined elsewhere and handles the actual API call.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/finance/getTaxes.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/finance.getTaxes'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$data = sendRequest($url);\n?>\n```\n\n----------------------------------------\n\nTITLE: API Request for Clients Prizes\nDESCRIPTION: This PHP snippet demonstrates how to make a GET request to the `clients.getClientsPrizes` API endpoint to retrieve a list of prizes awarded to clients. It constructs the URL with the necessary token parameter and uses a `sendRequest` function (assumed to be defined elsewhere) to send the request and retrieve the data.\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/clients/getClientsPrizes.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/clients.getClientsPrizes'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$data = sendRequest($url);\n?>\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for Ingredients\nDESCRIPTION: This JSON snippet illustrates the structure of a response received from the JoinPoster API when querying for ingredients. It contains an array of ingredient objects, each with various properties such as ingredient ID, name, category, and inventory details.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/menu/getIngredients.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{  \n  \"response\":[  \n    {  \n      \"ingredient_id\":\"91\",\n      \"ingredient_name\":\"Jack Daniels\",\n      \"ingredient_barcode\": \"\",\n      \"category_id\":\"3\",\n      \"ingredient_left\":\"443.45000\",\n      \"limit_value\":\"0\",\n      \"time_notif\":\"0\",\n      \"ingredient_unit\":\"l\",\n      \"ingredient_weight\":0,\n      \"ingredients_losses_clear\":\"0\",\n      \"ingredients_losses_cook\":\"0\",\n      \"ingredients_losses_fry\":\"0\",\n      \"ingredients_losses_stew\":\"0\",\n      \"ingredients_losses_bake\":\"0\",\n      \"ingredients_type\":\"1\",\n      \"partial_write_off\":\"0\"\n    },\n    {  \n      \"ingredient_id\":\"73\",\n      \"ingredient_name\":\"Авокадо\",\n      \"ingredient_barcode\": \"\",\n      \"category_id\":\"0\",\n      \"ingredient_left\":\"22.00000\",\n      \"limit_value\":\"0\",\n      \"time_notif\":\"0\",\n      \"ingredient_unit\":\"kg\",\n      \"ingredient_weight\":0,\n      \"ingredients_losses_clear\":\"11\",\n      \"ingredients_losses_cook\":\"0\",\n      \"ingredients_losses_fry\":\"0\",\n      \"ingredients_losses_stew\":\"0\",\n      \"ingredients_losses_bake\":\"0\",\n      \"ingredients_type\":\"1\",\n      \"partial_write_off\":\"0\"\n    },\n    {  \n      \"ingredient_id\":\"74\",\n      \"ingredient_name\":\"Айсберг с-т\",\n      \"ingredient_barcode\": \"\",\n      \"category_id\":\"0\",\n      \"ingredient_left\":\"379.09000\",\n      \"limit_value\":\"0\",\n      \"time_notif\":\"0\",\n      \"ingredient_unit\":\"kg\",\n      \"ingredient_weight\":0,\n      \"ingredients_losses_clear\":\"10\",\n      \"ingredients_losses_cook\":\"0\",\n      \"ingredients_losses_fry\":\"0\",\n      \"ingredients_losses_stew\":\"0\",\n      \"ingredients_losses_bake\":\"0\",\n      \"ingredients_type\":\"1\",\n      \"partial_write_off\":\"0\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Withdrawal from E-Wallet using clients.addEWalletTransaction in PHP\nDESCRIPTION: This code snippet demonstrates how to withdraw funds from a customer's e-wallet using the clients.addEWalletTransaction API endpoint in PHP. It sends a POST request to the API with the client_id and amount to be withdrawn. It requires a valid API token and the sendRequest function (not provided in the snippet).\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/clients/addEWalletTransaction.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/clients.addEWalletTransaction'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$ewallet = [\n  'client_id' => 1,\n  'amount'    => 200,\n];\n\n$data = sendRequest($url, 'post', $ewallet);\n?>\n```\n\n----------------------------------------\n\nTITLE: Querying Reservation Properties using Joinposter API\nDESCRIPTION: This PHP snippet demonstrates how to make a GET request to the Joinposter API's `incomingOrders.getReservation` endpoint to retrieve reservation properties. It constructs the URL with the required parameters (token and incoming_order_id) and uses the `sendRequest` function to send the request and retrieve the data.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/incomingOrders/getReservation.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/incomingOrders.getReservation'\n . '?token=687409:4164553abf6a031302898da7800b59fb'\n . '&incoming_order_id=3';\n\n$data = sendRequest($url);\n\n?>\n```\n\n----------------------------------------\n\nTITLE: Product Sales Response Format in JSON\nDESCRIPTION: This snippet shows the JSON response format for the dash.getProductsSales endpoint. It includes an array of product sales data, with detailed information for each product sold.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/dash/getProductsSales.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"response\":[\n    {\n      \"product_name\":\"Стейк из сёмги\",\n      \"modificator_name\":null,\n      \"product_id\":\"168\",\n      \"modification_id\":\"0\",\n      \"delete\":\"0\",\n      \"left\":\"43\",\n      \"right\":\"44\",\n      \"category_id\":\"33\",\n      \"count\":\"171.0000\",\n      \"weight_flag\":\"0\",\n      \"payed_sum\":\"7650000\",\n      \"product_sum\":\"7695000\",\n      \"bonus_sum\":\"0\",\n      \"cert_sum\":\"45000\",\n      \"product_profit\":\"7199716\",\n      \"product_profit_netto\":\"5999763\",\n      \"tax_sum\":\"72000\",\n      \"vat_sum\":\"0\",\n      \"unit\":\"p\",\n      \"discount\":45000\n    },\n    {\n      \"product_name\":\"Речная форель в фольге\",\n      \"modificator_name\":null,\n      \"product_id\":\"169\",\n      \"modification_id\":\"0\",\n      \"delete\":\"0\",\n      \"left\":\"43\",\n      \"right\":\"44\",\n      \"category_id\":\"33\",\n      \"count\":\"168.0000\",\n      \"weight_flag\":\"0\",\n      \"payed_sum\":\"9185000\",\n      \"product_sum\":\"9240000\",\n      \"bonus_sum\":\"0\",\n      \"cert_sum\":\"55000\",\n      \"product_profit\":\"8367880\",\n      \"product_profit_netto\":\"6973233\",\n      \"tax_sum\":\"88000\",\n      \"vat_sum\":\"0\",\n      \"unit\":\"p\",\n      \"discount\":55000\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Removing a Dish with joinposter API - PHP\nDESCRIPTION: This PHP snippet demonstrates how to remove a dish from the JoinPoster menu using the menu.removeDish API endpoint. It constructs a URL with a token and an array containing the dish_id, then sends a POST request to remove the dish. The expected input is the dish_id, which identifies the dish to be removed, and the output will confirm the success of the operation with a boolean response.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/menu/removeDish.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/menu.removeDish'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\ndish = [\n    'dish_id' => 925,\n];\n\ndata = sendRequest($url, 'post', $dish);\n\n```\n\n----------------------------------------\n\nTITLE: Sending Request for Billing Reports in PHP\nDESCRIPTION: This PHP snippet constructs a GET request to the JoinPoster API to fetch billing reports within a specified date range. The URL is composed using required query parameters including a token and date range. The response is obtained via a function called 'sendRequest'.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/dash/getPaymentsReport.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/dash.getPaymentsReport'\n . '?token=687409:4164553abf6a031302898da7800b59fb'\n . '&date_from=20170501'\n . '&date_to=20170531';\n\ndata = sendRequest($url);\n\n```\n\n----------------------------------------\n\nTITLE: Example JSON Error Response\nDESCRIPTION: This JSON snippet shows an example of a typical error response from the Joinposter API. The response includes an 'error' object, which contains the error 'code' and a human-readable 'message' describing the error.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/errors.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"error\":{\n    \"code\":11,\n    \"message\":\"Bad access token\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Spot Fiscal Companies with PHP\nDESCRIPTION: Example of making a GET request to the spots.getSpotFiscalCompanies endpoint using PHP. This request retrieves fiscal companies data for all locations in the Poster system using an API token for authentication.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/spots/getSpotFiscalCompanies.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/spots.getSpotFiscalCompanies'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$data = PosterAPI::sendRequest($url);\n```\n\n----------------------------------------\n\nTITLE: Customer Group Creation Response\nDESCRIPTION: JSON response from the API showing the ID of the newly created customer group\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/clients/createGroup.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"response\":6\n}\n```\n\n----------------------------------------\n\nTITLE: Making API Request to getOpenTransactionsOnTable in PHP\nDESCRIPTION: A PHP example demonstrating how to construct and send a request to the payments.getOpenTransactionsOnTable endpoint. The request includes the required parameters: type, merchant_id, table_id, and a sign parameter generated using MD5 hashing.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/payments/getOpenTransactionsOnTable.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/payments.getOpenTransactionsOnTable?' .\n  'format=json';\n\n$application_secret = '123123123123';\n\n$request = [\n  'type' => 'application-name',\n  'merchant_id' => 3432343,\n  'table_id' => 41,\n];\n\n$request['sign'] = md5(implode(':', $request) . ':' . $application_secret);\n\n$url .= '&' . http_build_query($request);\n\n$answer = sendRequest($url);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Tax List with PHP via finance.getTaxes API\nDESCRIPTION: This PHP code snippet demonstrates how to make an HTTP GET request to the finance.getTaxes endpoint with an authentication token to retrieve a list of taxes from the Poster system.\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/finance/getTaxes.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/finance.getTaxes'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$data = sendRequest($url);\n```\n\n----------------------------------------\n\nTITLE: Querying Ingredients in a Supply via API in PHP\nDESCRIPTION: This code snippet demonstrates how to query the `storage.getSupplyIngredients` API endpoint using PHP to retrieve a list of ingredients in a specific supply.  It constructs the URL with the required parameters, including the API token and the supply ID. The `sendRequest` function is assumed to handle the actual API call.\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/storage/getSupplyIngredients.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/storage.getSupplyIngredients'\n . '?token=687409:4164553abf6a031302898da7800b59fb'\n . '&supply_id=46';\n\n$data = sendRequest($url);\n```\n\n----------------------------------------\n\nTITLE: Requesting Waste List via API in PHP\nDESCRIPTION: This PHP snippet shows how to construct a URL to request a list of manual write-offs from the storage.getWastes API.  It includes the API endpoint, token, date range parameters and the 1c parameter.\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/storage/getWastes.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?\n$url = 'https://joinposter.com/api/storage.getWastes'\n  . '?token=687409:4164553abf6a031302898da7800b59fb'\n  . '&dateFrom=20170101'\n  . '&dateTo=20180101'\n  . '&1c=true';\n\n$data = sendRequest($url);\n?>\n```\n\n----------------------------------------\n\nTITLE: Changing Product Price with PHP API Request\nDESCRIPTION: Example of a PHP request to change the price of a product. The request includes product ID, spot ID, price, and modifier ID parameters, sent via POST to the menu.updateProductPrice endpoint.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/menu/updateProductPrice.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/menu.updateProductPrice'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$product = [\n    'spot_id'          => 1,\n    'price'            => '100',\n    'product_id'       => 139,\n    'modificator_id'   => 0,\n];\n\n$data = sendRequest($url, 'post', $product);\n```\n\n----------------------------------------\n\nTITLE: Requesting Sales Analytics Data with PHP\nDESCRIPTION: Example of making a GET request to the dash.getAnalytics endpoint to retrieve sales data. The request includes parameters for date range, interpolation type, and report type.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/dash/getAnalytics.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$url = 'https://joinposter.com/api/dash.getAnalytics' \n    . '?format=json'\n    . '&token=687409:4164553abf6a031302898da7800b59fb'\n    . '&dateFrom=20171009'\n    . '&dateTo=20171012'\n    . '&interpolate=week'\n    . '&type=waiters';\n\n$data = sendRequest($url);\n```\n\n----------------------------------------\n\nTITLE: Response example for Product Properties\nDESCRIPTION: This JSON snippet shows the expected response structure when querying product properties using the `menu.getProduct` API. It details the various fields such as barcode, category name, cost, and location-specific pricing.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/menu/getProduct.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"response\":{\n    \"barcode\":\"\",\n    \"category_name\":\"Свежевыжатые соки\",\n    \"unit\":\"\",\n    \"cost\":\"1880\",\n    \"cost_netto\":\"1567\",\n    \"fiscal\":\"0\",\n    \"hidden\":\"0\",\n    \"menu_category_id\":\"16\",\n    \"workshop\":\"4\",\n    \"nodiscount\":\"0\",\n    \"photo\":\"/upload/4/menu/product_1403094607_140.jpg\",\n    \"product_code\":\"\",\n    \"product_id\":\"140\",\n    \"product_name\":\"Апельсиновый\",\n    \"sort_order\":\"1\",\n    \"tax_id\":\"0\",\n    \"product_tax_id\":\"0\",\n    \"type\":\"3\",\n    \"weight_flag\":\"0\",\n    \"color\":\"white\",\n    \"spots\":[\n      {\n        \"spot_id\":\"1\",\n        \"price\":\"40000\",\n        \"profit\":\"38120\",\n        \"profit_netto\":\"31767\",\n        \"visible\":\"1\"\n      },\n      {\n        \"spot_id\":\"2\",\n        \"price\":\"40000\",\n        \"profit\":\"38120\",\n        \"profit_netto\":\"31767\",\n        \"visible\":\"1\"\n      }\n    ],\n    \"ingredient_id\":\"10\",\n    \"cooking_time\": \"0\",\n    \"out\":\"0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Ingredient Query to Poster API via PHP\nDESCRIPTION: This PHP snippet demonstrates how to send a GET request to the Poster API to fetch property details of a specific ingredient using its ID. It constructs the URL for the request by appending necessary query parameters, including a token and ingredient ID, before sending the request to the API endpoint.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/menu/getIngredient.md#2025-04-21_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/menu.getIngredient'\n . '?token=687409:4164553abf6a031302898da7800b59fb'\n . '&ingredient_id=91'\n . '&1c=true';\n\n$data = sendRequest($url);\n\n```\n\n----------------------------------------\n\nTITLE: Accessing Connected Devices in Kotlin Android POS\nDESCRIPTION: This snippet shows how to access the list of connected devices in an Android POS system using Kotlin. It retrieves the connectedDevices property from PosterTransport and sends a message to each connected device.\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/device/transport/methods/getAll.md#2025-04-21_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval connected = PosterTransport.connectedDevices\nconnected.forEach {\n    it.sendMessage(\"{\\\"text\\\":\\\"Hello!\\\"}\")\n}\n```\n\n----------------------------------------\n\nTITLE: Menu Categories JSON Response Example\nDESCRIPTION: Sample JSON response structure showing the detailed metadata for a product category, including properties like category ID, name, photo, and hierarchical information\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/menu/getCategories.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"response\":[\n    {\n      \"category_id\":\"2\",\n      \"category_name\":\"Sushi rolls\",\n      \"category_photo\":\"\\/upload\\/pos_cdb_888\\/menu\\/category_1420674791_2.jpg\",\n      \"parent_category\":\"0\",\n      \"category_color\":\"white\",\n      \"category_hidden\":\"0\",\n      \"sort_order\":\"999\",\n      \"fiscal\":\"0\",\n      \"nodiscount\":\"0\",\n      \"tax_id\":\"0\",\n      \"left\":\"3\",\n      \"right\":\"4\",\n      \"category_tag\": \"sushi\",\n      \"level\":\"1\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Financial Account Properties in Poster API using PHP\nDESCRIPTION: This PHP snippet demonstrates making a POST request to update account properties including name, currency, type, and starting balance. The example updates account ID 3 with new properties and returns the ID of the modified account.\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/finance/updateAccount.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/finance.updateAccount'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$account = [\n    'account_id' => 3,\n    'account_name' => 'Сейф',\n    'currency_id' => 3,\n    'type' => 1,\n    'balance_start' => 0,\n];\n\n$data = sendRequest($url, 'post', $account);\n\n```\n\n----------------------------------------\n\nTITLE: JSON Response from Supplier Creation in Poster API\nDESCRIPTION: Example JSON response from the storage.createSupplier endpoint after successful supplier creation. The response contains the ID of the newly created supplier.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/storage/createSupplier.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{  \n  \"response\":6\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Active Order with Poster API\nDESCRIPTION: Example of how to retrieve the current active order using the Poster.orders.getActive() method. The method returns a promise that resolves with the order details.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/pos/orders/orders-getActive.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nPoster.orders.getActive()\n    .then(function (order) {\n        console.log('active order', order);\n    })\n```\n\n----------------------------------------\n\nTITLE: Retrieving Financial Categories with PHP\nDESCRIPTION: This code example demonstrates how to make an API request to retrieve the list of financial account categories. It uses a token for authentication and calls the finance.getCategories endpoint using a helper function sendRequest().\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/finance/getCategories.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/finance.getCategories'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$data = sendRequest($url);\n```\n\n----------------------------------------\n\nTITLE: Fetching Finance Categories via Joinposter API in PHP\nDESCRIPTION: This PHP code snippet demonstrates how to make a GET request to the Joinposter API's `finance.getCategories` endpoint to retrieve a list of financial account categories.  It requires a valid API token to authenticate the request. The `sendRequest` function is assumed to exist and handle the actual HTTP request.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/finance/getCategories.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/finance.getCategories'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$data = sendRequest($url);\n?>\n```\n\n----------------------------------------\n\nTITLE: Successful menu.updateDish Response in JSON\nDESCRIPTION: This JSON snippet represents a successful response from the `menu.updateDish` API endpoint. The `response` field contains the ID of the updated dish, indicating that the update operation was successful. This response is returned after a successful POST request with valid dish properties.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/menu/updateDish.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"response\":61\n}\n```\n\n----------------------------------------\n\nTITLE: Requesting Order Wastes with PHP\nDESCRIPTION: Example of making an HTTP GET request to retrieve order wastes with date range and pagination parameters.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/transactions/getTransactionsWriteOffs.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/transactions.getTransactionsWriteOffs'\n . '?token=687409:4164553abf6a031302898da7800b59fb'\n . '&date_from=2017-11-30'\n . '&date_to=2017-11-30'\n . '&per_page=10'\n . '&page=5';\n\n$data = sendRequest($url);\n```\n\n----------------------------------------\n\nTITLE: Making API Request for Transaction History in PHP\nDESCRIPTION: Example of making an HTTP GET request to fetch transaction history for a specific transaction ID using PHP. The request requires an authentication token and transaction_id parameter.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/dash/getTransactionHistory.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/dash.getTransactionHistory'\n . '?token=687409:4164553abf6a031302898da7800b59fb'\n . '&transaction_id=388678';\n\n$data = sendRequest($url);\n```\n\n----------------------------------------\n\nTITLE: Updating Storage via API with POST Request\nDESCRIPTION: This PHP code snippet demonstrates how to update a storage location using the `storage.updateStorage` API endpoint. It constructs the URL with the API token and prepares an array with the storage ID, name, and address, then sends a POST request to the API. The `sendRequest` function (not shown) is assumed to handle the actual API call.\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/storage/updateStorage.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/storage.updateStorage'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$storage = [\n    \"storage_id\"      => 7,\n    \"storage_name\"    => \"Склад9 Кухня\",\n    \"storage_adress\"  => \"Klenova 8\"\n];\n\n$data = sendRequest($url, 'post', $storage);\n?>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Client Groups in PHP\nDESCRIPTION: PHP code snippet demonstrating how to make an API request to fetch client groups using a token-based authentication method\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/clients/getGroups.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/clients.getGroups'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$data = sendRequest($url);\n```\n\n----------------------------------------\n\nTITLE: JSON Response Example for Waste List API\nDESCRIPTION: This JSON snippet shows the expected response format from the storage.getWastes API. It provides information such as the waste ID, total sum, user ID, storage ID, date, reason for write-off, and whether the write-off was deleted.\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/storage/getWastes.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"response\": [\n    {\n      \"waste_id\": 1,\n      \"total_sum\": 2800,\n      \"total_sum_netto\": 2333,\n      \"user_id\": 1,\n      \"storage_id\": 1,\n      \"date\": \"2017-04-26 14:30:02\",\n      \"reason_id\": 0,\n      \"reason_name\": null,\n      \"delete\": 0\n    },\n    {\n      \"waste_id\": 2,\n      \"total_sum\": 791,\n      \"total_sum_netto\": 659,\n      \"user_id\": 1,\n      \"storage_id\": 1,\n      \"date\": \"2017-04-26 15:21:12\",\n      \"reason_id\": 1,\n      \"reason_name\": \"Истек срок годности\",\n      \"delete\": 1\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Reservation List JSON Response Example\nDESCRIPTION: JSON response structure showing detailed reservation information including customer details, reservation status, and timing\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/incomingOrders/getOwnReservations.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"response\":[\n      {\n         \"incoming_order_id\":\"3\",\n         \"spot_id\":\"1\",\n         \"status\":0,\n         \"client_id\":4985,\n         \"first_name\":\"Степан\",\n         \"last_name\":\"Созонов\",\n         \"phone\":\"380912152764\",\n         \"email\":null,\n         \"sex\":\"2\",\n         \"birthday\":\"1996-08-26\",\n         \"address\":null,\n         \"comment\":null,\n         \"created_at\":\"2018-03-22 16:50:18\",\n         \"updated_at\":\"2018-03-22 16:50:18\",\n         \"transaction_id\":null,\n         \"guests_count\":\"1\",\n         \"duration\":\"2000\",\n         \"date_reservation\":\"2018-03-22 18:20:00\"\n      }\n   ]\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Client Group with PHP API Request\nDESCRIPTION: Demonstrates how to update a client group's properties using the Joinposter API, including setting group ID, name, loyalty type, discount, and birthday bonus\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/clients/updateGroup.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/clients.updateGroup'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$group = [\n  'client_groups_id'       => 5,\n  'client_groups_name'     => 'Постоянный посетитель',\n  'loyalty_type'           => 1,\n  'client_groups_discount' => 10,\n  'birthday_bonus'         => 50.00,\n];\n\n$data = sendRequest($url, 'post', $group);\n```\n\n----------------------------------------\n\nTITLE: JSON Response from storage.createManufacture\nDESCRIPTION: This is the JSON response returned after successfully creating a manufacture. The response includes the newly created manufacture ID.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/storage/createManufacture.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"response\":6\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Product Count in Order - JavaScript\nDESCRIPTION: Demonstrates how to update the quantity of a product in an existing order using the Poster.orders.changeProductCount method. The example shows setting a product quantity to 2.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/pos/orders/orders-changeProductCount.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nPoster.orders.changeProductCount(1503219480866, {id: 1, count: 2})\n```\n\n----------------------------------------\n\nTITLE: Making an HTTP GET Request to Retrieve Tax Properties - PHP\nDESCRIPTION: This snippet demonstrates how to construct a URL for an HTTP GET request to the JoinPoster API to obtain tax properties. It includes a sample token and tax ID as query parameters. The function 'sendRequest' is called to execute the request, and the response is stored in the variable '$data'.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/finance/getTax.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/finance.getTax'\n . '?token=687409:4164553abf6a031302898da7800b59fb'\n . '&tax_id=3';\n\ndata = sendRequest($url);\n\n```\n\n----------------------------------------\n\nTITLE: Sending Messages to Devices in POS (JavaScript)\nDESCRIPTION: This snippet demonstrates how to send a message to all platform devices using the Poster API in JavaScript. It retrieves all devices, then sends a 'Hello' message to each one, logging the result.\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/device/transport/methods/sendMessage.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlet devices = await Poster.devices.getAll({ type: 'platform' });\n\ndevices.forEach((device) => {\n    const result = await device.sendMessage({ text: 'Hello' });\n    console.log('send message result', result);\n});\n```\n\n----------------------------------------\n\nTITLE: Requesting Manual Waste Data in PHP\nDESCRIPTION: This snippet demonstrates how to make an HTTP GET request to the storage.getWaste endpoint using PHP. It constructs the URL with the necessary token and waste_id parameters.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/storage/getWaste.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/storage.getWaste'\n  . '?token=687409:4164553abf6a031302898da7800b59fb'\n  . '&waste_id=1';\n\n$data = sendRequest($url);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Financial Transactions with PHP\nDESCRIPTION: An example PHP request to the finance.getTransactions endpoint with date range parameters to retrieve financial transactions. The request includes authentication token and date range filters.\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/finance/getTransactions.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/finance.getTransactions'\n . '?token=687409:4164553abf6a031302898da7800b59fb'\n . '&dateFrom=20170701'\n . '&dateTo=20170901';\n\n\n$data = sendRequest($url);\n\n```\n\n----------------------------------------\n\nTITLE: Querying Ingredient Categories in PHP\nDESCRIPTION: PHP code snippet for making an API request to retrieve ingredient categories from Joinposter. Includes optional 1C system parameter for additional ID mapping.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/menu/getCategoriesIngredients.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/menu.getCategoriesIngredients'\n . '?token=687409:4164553abf6a031302898da7800b59fb'\n . '&1c=true';\n\n$data = sendRequest($url);\n```\n\n----------------------------------------\n\nTITLE: Making GET Request for Location Sales in PHP\nDESCRIPTION: Example of how to construct and send a GET request to the dash.getSpotsSales endpoint. The request includes token authentication and date range parameters.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/dash/getSpotsSales.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/dash.getSpotsSales'\n  . '?token=687409:4164553abf6a031302898da7800b59fb'\n  . '&dateFrom=20170905'\n  . '&dateTo=20170908';\n\n$data = sendRequest($url);\n```\n\n----------------------------------------\n\nTITLE: Requesting Floor Sections List with PHP\nDESCRIPTION: This PHP code demonstrates how to make an HTTP GET request to the spots.getSpotTablesHalls endpoint. It requires an authentication token for accessing the Poster API.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/spots/getSpotTablesHalls.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/spots.getSpotTablesHalls'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$data = sendRequest($url);\n```\n\n----------------------------------------\n\nTITLE: Transaction Products API Response Example\nDESCRIPTION: This JSON snippet represents a sample response from the `dash.getTransactionProducts` API endpoint. It contains a `response` array, which contains multiple objects representing the products in the transaction. Each product object includes detailed information such as product ID, name, quantity, price, cost, profit, tax information, and other relevant details.\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/dash/getTransactionProducts.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"response\":[\n    {\n      \"product_id\":\"908\",\n      \"product_name\":\"Пицца сборная\",\n      \"modification_id\":\"68\",\n      \"modificator_name\":\"Сыр, Грибы, Ох. колбаски, Оливки, Средняя Ø35см\",\n      \"modificator_barcode\":\"\",\n      \"modificator_product_code\":\"\",\n      \"weight_flag\":\"0\",\n      \"num\":\"1\",\n      \"time\":\"1507703516999\",\n      \"workshop\":\"2\",\n      \"barcode\":\"\",\n      \"product_code\":\"\",\n      \"tax_id\":\"4\",\n      \"nodiscount\":\"1\",\n      \"payed_sum\":\"45000\",\n      \"product_sum\":\"45000\",\n      \"discount\":\"0\",\n      \"bonus_sum\":\"0\",\n      \"round_sum\":0,\n      \"client_id\":\"0\",\n      \"promotion_id\":\"0\",\n      \"cert_sum\":\"0\",\n      \"product_cost\":\"43\",\n      \"product_cost_netto\":\"36\",\n      \"product_profit\":\"42707\",\n      \"product_profit_netto\":\"42700\",\n      \"bonus_accrual\":\"0\",\n      \"tax_value\":\"5\",\n      \"tax_type\":\"2\",\n      \"tax_fiscal\":\"1\",\n      \"category_id\":\"33\"\n    },\n    {\n      \"product_id\":\"169\",\n      \"product_name\":\"Речная форель в фольге\",\n      \"modification_id\":\"0\",\n      \"modificator_name\":null,\n      \"modificator_barcode\":null,\n      \"modificator_product_code\":null,\n      \"weight_flag\":\"0\",\n      \"num\":\"1\",\n      \"time\":\"1507703509384\",\n      \"workshop\":\"2\",\n      \"barcode\":\"\",\n      \"product_code\":\"\",\n      \"tax_id\":\"4\",\n      \"nodiscount\":\"1\",\n      \"payed_sum\":\"55000\",\n      \"product_sum\":\"55000\",\n      \"discount\":\"0\",\n      \"bonus_sum\":\"0\",\n      \"round_sum\":0,\n      \"client_id\":\"0\",\n      \"promotion_id\":\"0\",\n      \"cert_sum\":\"0\",\n      \"product_cost\":\"4340\",\n      \"product_cost_netto\":\"3617\",\n      \"product_profit\":\"47910\",\n      \"product_profit_netto\":\"47187\",\n      \"bonus_accrual\":\"0\",\n      \"tax_value\":\"5\",\n      \"tax_type\":\"2\",\n      \"tax_fiscal\":\"1\",\n      \"category_id\":\"33\"\n    },\n    {\n      \"product_id\":\"168\",\n      \"product_name\":\"Стейк из сёмги\",\n      \"modification_id\":\"0\",\n      \"modificator_name\":null,\n      \"modificator_barcode\":null,\n      \"modificator_product_code\":null,\n      \"weight_flag\":\"0\",\n      \"num\":\"1\",\n      \"time\":\"1507703508927\",\n      \"workshop\":\"2\",\n      \"barcode\":\"\",\n      \"product_code\":\"\",\n      \"tax_id\":\"4\",\n      \"nodiscount\":\"1\",\n      \"payed_sum\":\"45000\",\n      \"product_sum\":\"45000\",\n      \"discount\":\"0\",\n      \"bonus_sum\":\"0\",\n      \"round_sum\":0,\n      \"client_id\":\"0\",\n      \"promotion_id\":\"0\",\n      \"cert_sum\":\"0\",\n      \"product_cost\":\"2213\",\n      \"product_cost_netto\":\"1844\",\n      \"product_profit\":\"40537\",\n      \"product_profit_netto\":\"40168\",\n      \"bonus_accrual\":\"0\",\n      \"tax_value\":\"5\",\n      \"tax_type\":\"2\",\n      \"tax_fiscal\":\"1\",\n      \"category_id\":\"33\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Transaction History API Response Format\nDESCRIPTION: Example JSON response showing transaction history with multiple operations including print, close, additem, and open events. Each operation includes timestamps, values, and operation-specific data.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/dash/getTransactionHistory.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"response\":[\n    {\n      \"transaction_id\":\"388678\",\n      \"type_history\":\"print\",\n      \"time\":\"1507703522429\",\n      \"value\":\"1\",\n      \"value2\":\"2147483647\",\n      \"value3\":\"0\",\n      \"value_text\":null,\n      \"spot_tablet_id\":\"1\"\n    },\n    {\n      \"transaction_id\":\"388678\",\n      \"type_history\":\"close\",\n      \"time\":\"1507703520358\",\n      \"value\":\"3\",\n      \"value2\":\"145000\",\n      \"value3\":\"0\",\n      \"value_text\":\"{\\\"payments\\\":{\\\"cash\\\":1450}}\",\n      \"spot_tablet_id\":\"1\"\n    },\n    {\n      \"transaction_id\":\"388678\",\n      \"type_history\":\"additem\",\n      \"time\":\"1507703508927\",\n      \"value\":\"168\",\n      \"value2\":\"0\",\n      \"value3\":\"0\",\n      \"value_text\":\"{\\\"price\\\":450}\",\n      \"spot_tablet_id\":\"1\"\n    },\n    {\n      \"transaction_id\":\"388678\",\n      \"type_history\":\"open\",\n      \"time\":\"1507703507594\",\n      \"value\":\"1\",\n      \"value2\":\"95\",\n      \"value3\":\"3\",\n      \"value_text\":null,\n      \"spot_tablet_id\":\"1\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Manufactures List - JSON Response\nDESCRIPTION: Example JSON response showing the structure of manufacturing records. Each record includes manufacture details, storage information, and a list of manufactured products with their quantities and types.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/storage/getManufactures.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \"response\":[\\n    {\\n      \"manufacture_id\":\"4\",\\n      \"storage_name\":\"Склад 1\",\\n      \"storage_id\":\"1\",\\n      \"user_id\":\"4\",\\n      \"date\":\"2016-12-26 14:45:00\",\\n      \"sum\":70.35,\\n      \"sum_netto\":58.63,\\n      \"products\":[\\n        {\\n          \"ingredient_id\":\"205\",\\n          \"product_id\":\"134\",\\n          \"product_name\":\"Чай цветочный 360мл\",\\n          \"product_num\":\"3.0000\",\\n          \"type\":\"2\"\\n        },\\n        {\\n          \"ingredient_id\":\"204\",\\n          \"product_id\":\"137\",\\n          \"product_name\":\"Чай черный с чабрецом 360мл\",\\n          \"product_num\":\"2.0000\",\\n          \"type\":\"2\"\\n        }\\n      ]\\n    },\\n    {\\n      \"manufacture_id\":\"2\",\\n      \"storage_name\":\"Склад 1\",\\n      \"storage_id\":\"1\",\\n      \"user_id\":\"4\",\\n      \"date\":\"2016-12-26 14:44:00\",\\n      \"sum\":\"32.44\",\\n      \"sum_netto\":\"27.03\",\\n      \"products\":[\\n        {\\n          \"ingredient_id\":\"200\",\\n          \"product_id\":\"109\",\\n          \"product_name\":\"Американо 360мл\",\\n          \"product_num\":\"1.0000\",\\n          \"type\":\"2\"\\n        }\\n      ]\\n    }\\n  ]\\n}\n```\n\n----------------------------------------\n\nTITLE: Saving Auth Token in Global Settings using Entity Extras in JoinPoster\nDESCRIPTION: This PHP snippet shows how to store an authorization token in the global settings of the JoinPoster system. The method sends a request to application.setEntityExtras, requiring the token and the necessary extras containing the token to be saved.\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/application/setEntityExtras.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// Сохраняем токен авторизации в глобальных настройках \n<?php\n$url = 'https://joinposter.com/api/application.setEntityExtras'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$extras = [\n    \"entity_type\"   => \"settings\",\n    \"extras\"        => [\n        \"token\" => \"lva23gds1793skd0123apsod10230wqoe0oe01\"\n    ]\n];\n\n$data = sendRequest($url, 'post', $extras);\n\n```\n\n----------------------------------------\n\nTITLE: JSON Response for Creating Storage Pack with Poster API\nDESCRIPTION: This JSON snippet shows the expected response format when successfully creating a storage pack using the Poster API. The response contains the ID of the newly created pack.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/storage/createPack.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{  \n  \"response\": 5\n}\n```\n\n----------------------------------------\n\nTITLE: Subscribing to failedReturnFiscal Event in JavaScript\nDESCRIPTION: This snippet demonstrates how to subscribe to the 'failedReturnFiscal' event using Poster's JavaScript API. It logs the response to the console when the event is triggered.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/pos/events/failedReturnFiscal.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nPoster.on('failedReturnFiscal', (res) => {\n    console.log(res);\n});\n```\n\n----------------------------------------\n\nTITLE: Joinposter API Request with PHP\nDESCRIPTION: This PHP snippet demonstrates how to make a POST request to the Joinposter API. It constructs the URL with the API method and token, defines an empty array for the request group, and then uses a `sendRequest` function (assumed to be defined elsewhere) to send the request. The response is stored in the `$data` variable.\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/template.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/<method>'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$group = [\n];\n\n$data = sendRequest($url, 'post', $group);\n\n?>\n```\n\n----------------------------------------\n\nTITLE: Removing Clients with PHP\nDESCRIPTION: This PHP snippet demonstrates how to use the clients.removeClients API endpoint to remove a batch of clients. It constructs the URL, prepares the data array containing client IDs to remove, and sends a POST request to the API.\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/clients/removeClients.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/clients.removeClients'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$client = [\n    'ids' => [1, 2],\n];\n\n$data = sendRequest($url, 'post', $client);\n?>\n```\n\n----------------------------------------\n\nTITLE: Recovering a Product via Poster API using cURL in Command Line\nDESCRIPTION: This cURL example shows how to recover a product by sending a POST request to the Poster API endpoint. The request includes parameters like `product_id`, `menu_category_id`, `workshop`, and `tax_id`. Dependencies include having cURL installed and proper authorization with a valid API token.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/menu/recoverProduct.md#2025-04-21_snippet_1\n\nLANGUAGE: cURL\nCODE:\n```\ncurl -X POST \\\n  'http://poster.pos/api/menu.recoverProduct?token=687409:4164553abf6a031302898da7800b59fb' \\\n  -H 'cache-control: no-cache' \\\n  -H 'content-type: multipart/form-data \\\n  -F product_id=38 \\\n  -F menu_category_id=5 \\\n  -F workshop=4 \\\n  -F tax_id=2\n\n```\n\n----------------------------------------\n\nTITLE: Sending POST Request to Update Customer ID in 1C System using PHP\nDESCRIPTION: This PHP code snippet demonstrates how to send a POST request to the clients.set1cClientId endpoint. It constructs the API URL with a token, prepares the client data array, and sends the request using a custom sendRequest function.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/clients/set1cClientId.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/clients.set1cClientId'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$client = [\n    'id' => [\n        [\n            'client_id' => 38,\n            'id_1c'     => 'b80ffc81-0fc9-11e7-9ab4-ace01035e460',\n        ],\n    ],\n];\n\n$data = sendRequest($url, 'post', $client);\n```\n\n----------------------------------------\n\nTITLE: Requesting Manufacture Data with PHP\nDESCRIPTION: Example of making a GET request to the storage.getManufacture endpoint using PHP. The request requires a token for authentication and a manufacture_id parameter to specify which manufacture to retrieve.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/storage/getManufacture.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?\n$url = 'https://joinposter.com/api/storage.getManufacture' \n  . '?format=json'\n  . '&token=687409:4164553abf6a031302898da7800b59fb'\n  . '&manufacture_id=4';\n\n$data = sendRequest($url);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Products Sales in PHP\nDESCRIPTION: Example PHP request to fetch product sales data from JoinPoster API using a token-based authentication method\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/dash/getProductsSales.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/dash.getProductsSales'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$data = sendRequest($url);\n```\n\n----------------------------------------\n\nTITLE: Querying Tax Properties with PHP\nDESCRIPTION: This PHP snippet demonstrates how to make an HTTP GET request to the finance.getTax endpoint. It constructs the URL with the required token and tax_id parameters.\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/finance/getTax.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/finance.getTax'\n . '?token=687409:4164553abf6a031302898da7800b59fb'\n . '&tax_id=3';\n\n$data = sendRequest($url);\n```\n\n----------------------------------------\n\nTITLE: Response Format for Cash Shift Transactions\nDESCRIPTION: JSON response format for the finance.getCashShiftTransactions endpoint showing transaction details including IDs, timestamps, amounts, and transaction types.\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/finance/getCashShiftTransactions.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{  \n  \"response\":[  \n    {  \n      \"shift_tr_id\":1648,\n      \"shift_id\":333,\n      \"time\":1505980800000,\n      \"type\":5,\n      \"tr_amount\":10000,\n      \"user_id\":3,\n      \"comment\":\"бар\",\n      \"shift_tr_id_edit\":0,\n      \"user_id_edit\":0,\n      \"edit_time\":0,\n      \"edit\":0,\n      \"delete\":0,\n      \"is_fiscal\":0\n    },\n    {  \n      \"shift_tr_id\":1647,\n      \"shift_id\":333,\n      \"time\":1505977200000,\n      \"type\":1,\n      \"tr_amount\":10000,\n      \"user_id\":3,\n      \"comment\":\"\",\n      \"shift_tr_id_edit\":0,\n      \"user_id_edit\":0,\n      \"edit_time\":0,\n      \"edit\":0,\n      \"delete\":0,\n      \"is_fiscal\":1\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Example of printFiscal Event Response in JSON\nDESCRIPTION: This JSON snippet illustrates the structure of the data returned when the 'printFiscal' event is triggered. It contains information about the order (including ID, date, status, user, table, products, totals, payments, etc.), the user ID associated with the order, and an array of products that were fiscally printed.\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/pos/events/printFiscal.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"order\":{\n      \"id\":1544010298315,\n      \"dateStart\":1544010298315,\n      \"dateClose\":0,\n      \"datePrint\":1544010308709,\n      \"status\":2,\n      \"userId\":40,\n      \"tableId\":5,\n      \"orderName\":77629,\n      \"guestsCount\":3,\n      \"products\":{\n         \"0\":{\n            \"id\":137,\n            \"count\":1,\n            \"price\":1180,\n            \"printedNum\":0,\n            \"nodiscount\":1,\n            \"taxId\":1,\n            \"taxValue\":0,\n            \"taxType\":4,\n            \"taxFiscal\":true,\n            \"roundSum\":0\n         }\n      },\n      \"subtotal\":1180,\n      \"total\":1180,\n      \"discount\":0,\n      \"clientId\":0,\n      \"payType\":\"mix\",\n      \"payedSum\":0,\n      \"payedCard\":0,\n      \"payedCash\":1180,\n      \"payedBonus\":0,\n      \"approvedBonus\":0,\n      \"platformDiscount\":0,\n      \"loyaltyAppId\":0,\n      \"parentId\":0,\n      \"tipIncluded\":0,\n      \"tipSum\":0,\n      \"roundSum\":0,\n      \"printFiscal\":1,\n      \"comment\":\"\"\n   },\n   \"userId\":40,\n   \"products\":[\n      {\n         \"product_id\":137,\n         \"modification_id\":0,\n         \"promotion_id\":0,\n         \"count\":1\n      }\n   ]\n}\n```\n\n----------------------------------------\n\nTITLE: Editing client accumulations with clients.addClientsAccumulations in PHP\nDESCRIPTION: This PHP snippet shows how to send a POST request to the clients.addClientsAccumulations API endpoint to edit client accumulation data. It sets up the URL with the API token and defines the accumulation parameters as an array, which is then passed as data to the sendRequest function.\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/clients/addClientsAccumulations.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/clients.addClientsAccumulations'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$accumulations = [\n  'accumulation_product_id' => 1,\n  'tr_product_id'           => 2125193,\n  'promotion_id'            => 14,\n  'client_id'               => 62,\n  'product_id'              => 934,\n  'modification_id'         => 0,\n  'status'                  => 1,\n  'num'                     => 1.0000000,\n  'product_sum'             => 1476,\n  'prize_product_id'        => \"1\",\n  'date_add'                => \"2018-05-03 13:25:16\",\n  'date_close'              => \"2018-05-03 13:26:00\",\n];\n\n$data = sendRequest($url, 'post', $accumulations);\n```\n\n----------------------------------------\n\nTITLE: Successful Response from menu.set1cProductId in JSON\nDESCRIPTION: This JSON snippet represents a successful response from the `menu.set1cProductId` API method. It indicates that the product ID in the 1C system has been successfully updated.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/menu/set1cProductId.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"success\":1\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Storage Pack using cURL with Poster API\nDESCRIPTION: This cURL command shows how to create a storage pack using the Poster API. It sends a POST request to the API endpoint with the pack details in JSON format, including the pack name, unit, and count.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/storage/createPack.md#2025-04-21_snippet_1\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location --request POST 'https://joinposter.com/api/storage.createPack?token=687409:4164553abf6a031302898da7800b59fb' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\n  \"name\": \"Ящик\",\n  \"unit\": \"kg\",\n  \"count\": 0.5\n}'\n```\n\n----------------------------------------\n\nTITLE: JSON Response Structure for products.get Method\nDESCRIPTION: Example response from the products.get method showing the data structure returned. Each product object contains properties like ID, deletion status, visibility, fiscal information, parent category, pricing, and tax details.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/pos/products/products-get.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"id\":1,\n    \"delete\":1,\n    \"hidden\":1,\n    \"fiscal\":0,\n    \"fiscalProgram\":0,\n    \"nodiscount\":0,\n    \"parent\":11,\n    \"sortOrder\":999,\n    \"weightFlag\":0,\n    \"workshop\":1,\n    \"price\":0,\n    \"cookingTime\":0,\n    \"barcode\":\"\",\n    \"picture\":\"\",\n    \"color\":\"white\",\n    \"taxType\":0,\n    \"taxValue\":0,\n    \"taxId\":0,\n    \"taxName\":\"\"\n  },\n  {\n    \"id\":2,\n    \"delete\":1,\n    \"hidden\":1,\n    \"fiscal\":0,\n    \"fiscalProgram\":0,\n    \"nodiscount\":0,\n    \"parent\":11,\n    \"sortOrder\":999,\n    \"weightFlag\":0,\n    \"workshop\":1,\n    \"price\":0,\n    \"cookingTime\":0,\n    \"barcode\":\"\",\n    \"picture\":\"\",\n    \"color\":\"white\",\n    \"taxType\":0,\n    \"taxValue\":0,\n    \"taxId\":0,\n    \"taxName\":\"\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Deleting a Client Group using PHP\nDESCRIPTION: This PHP snippet demonstrates how to make a POST request to the clients.removeGroup API endpoint to delete a client group. It requires a valid API token and the group_id of the client group to be deleted. The sendRequest function is assumed to be defined elsewhere.\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/clients/removeGroup.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/clients.removeGroup?'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$group = [\n  'group_id' => 6,\n];\n\n$data = sendRequest($url, 'post', $group);\n```\n\n----------------------------------------\n\nTITLE: Recover a Dish using cURL\nDESCRIPTION: This code snippet demonstrates how to recover a dish using the `menu.recoverDish` API endpoint with cURL.  It sends a POST request to the API endpoint with the product details.  The `token` parameter is required for authentication.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/menu/recoverDish.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\ncurl -X POST \\\n  'http://poster.pos/api/menu.recoverDish?token=687409:4164553abf6a031302898da7800b59fb' \\\n  -H 'cache-control: no-cache' \\\n  -H 'content-type: multipart/form-data \\\n  -F product_id=38 \\\n  -F menu_category_id=5 \\\n  -F workshop=4 \\\n  -F tax_id=2\n\n```\n\n----------------------------------------\n\nTITLE: Fetching Waiters Sales Data in PHP\nDESCRIPTION: PHP example demonstrating how to request waiters sales data from JoinPoster API using a GET request with authentication token and optional date parameters\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/dash/getWaitersSales.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/dash.getWaitersSales'\n . '?token=687409:4164553abf6a031302898da7800b59fb'\n . '&dateFrom=20170901';\n\n$data = sendRequest($url);\n```\n\n----------------------------------------\n\nTITLE: Making GET Request for Waiter Sales in PHP\nDESCRIPTION: Example of making an HTTP GET request to the waiter sales endpoint with date filtering. Uses a token for authentication and accepts optional dateFrom parameter.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/dash/getWaitersSales.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/dash.getWaitersSales'\n . '?token=687409:4164553abf6a031302898da7800b59fb'\n . '&dateFrom=20170901';\n\n$data = sendRequest($url);\n```\n\n----------------------------------------\n\nTITLE: Querying JoinPoster Transaction API in PHP\nDESCRIPTION: PHP code snippet demonstrating how to construct an API request for retrieving transaction records with date range and pagination parameters\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/transactions/getTransactions.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$url = 'https://joinposter.com/api/transactions.getTransactions'\n . '?token=687409:4164553abf6a031302898da7800b59fb'\n . '&date_from=2017-11-30'\n . '&date_to=2017-11-30'\n . '&per_page=10'\n . '&page=5';\n\n$data = sendRequest($url);\n```\n\n----------------------------------------\n\nTITLE: Making HTTP GET Request to Customer Sales API - PHP\nDESCRIPTION: Example of making an HTTP GET request to the dash.getClientsSales endpoint using PHP. The request includes a token for authentication and date range parameters.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/dash/getClientsSales.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/dash.getClientsSales'\n  . '?token=687409:4164553abf6a031302898da7800b59fb'\n  . '&dateFrom=20170920'\n  . '&dateTo=20170922';\n\n$data = sendRequest($url);\n```\n\n----------------------------------------\n\nTITLE: Transfer Content Response in JSON\nDESCRIPTION: Example JSON response from the storage.getMove endpoint showing transfer details including storage locations, user information, financial sums, and a list of transferred ingredients with their properties.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/storage/getMove.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"response\":[\n    {\n      \"moving_id\":2,\n      \"date\":\"2016-10-30 12:40:00\",\n      \"from_storage\":1,\n      \"from_storage_name\":\"Склад Кухня\",\n      \"to_storage\":2,\n      \"to_storage_name\":\"Склад Бар\",\n      \"user_id\":7,\n      \"user_name\":\"Poster Root\",\n      \"sum\":59.31,\n      \"sum_netto\":49.43,\n      \"ingredients\":[\n        {\n          \"link_id\":2,\n          \"ingredient_id\":12,\n          \"product_id\":142,\n          \"ingredient_num\":10,\n          \"ingredient_sum\":7.08,\n          \"ingredient_sum_netto\":5.90,\n          \"type\":1,\n          \"write_off_id\":1216696,\n          \"packing_id\":1\n        },\n        {\n          \"link_id\":3,\n          \"ingredient_id\":91,\n          \"ingredient_num\":1,\n          \"ingredient_sum\":52.23,\n          \"ingredient_sum_netto\":43.53,\n          \"type\":10,\n          \"write_off_id\":1216697,\n          \"packing_id\":2\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Product Sales Response JSON Schema\nDESCRIPTION: Structured JSON response containing detailed sales information for individual products, including sales count, pricing, and profit metrics\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/dash/getProductsSales.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"response\":[\n    {\n      \"product_name\":\"Стейк из сёмги\",\n      \"product_id\":\"168\",\n      \"count\":\"171.0000\",\n      \"payed_sum\":\"7650000\",\n      \"product_profit\":\"7199716\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Response Structure for Manual Waste Data\nDESCRIPTION: This snippet shows the structure of the JSON response returned by the storage.getWaste endpoint. It includes details about the waste entry, such as total sum, date, reason, and a list of wasted items with their ingredients.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/storage/getWaste.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"response\": {\n    \"waste_id\": 1,\n    \"total_sum\": 2800,\n    \"total_sum_netto\": 2333,\n    \"user_id\": 1,\n    \"storage_id\": 1,\n    \"date\": \"2017-04-26 14:30:02\",\n    \"reason_id\": 1,\n    \"reason_name\": \"Истек срок годности\",\n    \"elements\": [\n      {\n        \"type\": 8,\n        \"product_id\": 8,\n        \"modificator_id\": 2,\n        \"count\": 1,\n        \"ingredients\": [\n          {\n            \"write_off_id\": 118,\n            \"ingredient_id\": 21,\n            \"product_id\": 8,\n            \"modificator_id\": 2,\n            \"prepack_id\": 0,\n            \"weight\": 1,\n            \"unit\": \"p\",\n            \"cost\": 800,\n            \"cost_netto\": 667\n          }\n        ]\n      },\n      {\n        \"type\": 3,\n        \"product_id\": 4,\n        \"count\": 1,\n        \"ingredients\": [\n          {\n            \"write_off_id\": 121,\n            \"ingredient_id\": 16,\n            \"product_id\": 4,\n            \"modificator_id\": 0,\n            \"prepack_id\": 0,\n            \"weight\": 1,\n            \"unit\": \"kg\",\n            \"cost\": 500,\n            \"cost_netto\": 417\n          },\n          {\n            \"write_off_id\": 122,\n            \"ingredient_id\": 15,\n            \"product_id\": 4,\n            \"modificator_id\": 0,\n            \"prepack_id\": 0,\n            \"weight\": 1,\n            \"unit\": \"kg\",\n            \"cost\": 1500,\n            \"cost_netto\": 1250\n          }\n        ]\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Sales Data with PHP\nDESCRIPTION: This PHP snippet demonstrates how to query the `dash.getSpotsSales` API endpoint to retrieve sales data. It constructs the URL with the required token, start date (`dateFrom`), and end date (`dateTo`). The `sendRequest` function (not defined here) is assumed to handle the actual API call and return the response.\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/dash/getSpotsSales.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/dash.getSpotsSales'\n  . '?token=687409:4164553abf6a031302898da7800b59fb'\n  . '&dateFrom=20170905'\n  . '&dateTo=20170908';\n\n$data = sendRequest($url);\n?>\n```\n\n----------------------------------------\n\nTITLE: Parsing Poster API JSON Response in PHP\nDESCRIPTION: This JSON snippet represents the response from the Poster API request, indicating the updated customer points count after processing. The 'response' key contains the new points balance.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/clients/changeClientBonus.md#2025-04-21_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"response\":30\n}\n```\n\n----------------------------------------\n\nTITLE: Successful Authorization Response\nDESCRIPTION: Example JSON response for a successful authorization request, containing access token, account details, user information, and tariff data.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/manage/index.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"access_token\":\"861052:02391570ff9af128e93c5a771055ba88\",\n   \"account_number\":\"861052\",\n   \"user\":{\n      \"id\":4,\n      \"name\":\"Poster\",\n      \"email\":\"dev@joinposter.com\",\n      \"role_id\":3\n   },\n   \"ownerInfo\":{\n      \"email\":\"dev@joinposter.com\",\n      \"phone\":\"+380684152664\",\n      \"city\":\"\",\n      \"country\":\"RU\",\n      \"name\":\"Poster\",\n      \"company_name\":\"dev-example\"\n   },\n   \"tariff\":{\n      \"key\":\"pricing-plan-1\",\n      \"next_pay_date\":\"2018-05-31 11:52:41\",\n      \"price\":2\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: User Object Example in JSON\nDESCRIPTION: Sample JSON representation of a User object showing the structure with properties such as ID, PIN code, name, deletion status, admin flag, and additional extras field.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/pos/types/user.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"id\":9,\n   \"posPass\":\"1234\",\n   \"name\":\"Vladimir\",\n   \"deleted\":0,\n   \"admin\":true,\n   \"inn\":\"\",\n   \"extras\":{\n\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Ingredient via PHP API Request\nDESCRIPTION: PHP code snippet demonstrating how to update an ingredient's properties using the Joinposter API with a POST request. Includes setting ingredient details like ID, name, category, and weight.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/menu/updateIngredient.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/menu.updateIngredient'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$ingredient = [\n    'id'                => 811,\n    'ingredient_name'   => 'Лимон',\n    'category_id'       => 4,\n    'type'              => 'p',\n    'weight_ingredient' => 150,\n];\n\n$data = sendRequest($url, 'post', $ingredient);\n```\n\n----------------------------------------\n\nTITLE: JSON Response for Register Creation\nDESCRIPTION: This JSON snippet shows the expected response format when successfully creating a new register. The 'response' field contains the ID of the newly created register.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/access/createTablet.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{  \n  \"response\":2\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Supply Ingredients with PHP\nDESCRIPTION: PHP example showing how to make a GET request to the storage.getSupplyIngredients endpoint. The request requires a token for authentication and a supply_id parameter to specify which supply to retrieve ingredients from.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/storage/getSupplyIngredients.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/storage.getSupplyIngredients'\n . '?token=687409:4164553abf6a031302898da7800b59fb'\n . '&supply_id=46';\n\n$data = sendRequest($url);\n```\n\n----------------------------------------\n\nTITLE: Sending HTTP GET request to JoinPoster API using PHP\nDESCRIPTION: This snippet constructs a URL for the JoinPoster API to retrieve the tablet register list and sends the request using the 'sendRequest' function. It uses the API token for authentication. The expected output is the response from the API containing tablet information as JSON.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/access/getTablets.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/access.getTablets'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\ndata = sendRequest($url);\n\n```\n\n----------------------------------------\n\nTITLE: Fetching supplies using storage.getSupplies API\nDESCRIPTION: This PHP code snippet demonstrates how to use the `storage.getSupplies` API to retrieve a list of supplies from a Poster account. It constructs a URL with the required token and uses a `sendRequest` function (not defined here) to make the API call.\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/storage/getSupplies.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/storage.getSupplies'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$data = sendRequest($url);\n?>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Transaction Details in PHP\nDESCRIPTION: PHP code snippet demonstrating how to construct an API request to fetch transaction details with specific parameters like transaction ID, product inclusion, and history tracking\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/dash/getTransaction.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/dash.getTransaction'\n . '?token=687409:4164553abf6a031302898da7800b59fb'\n . '&transaction_id=330660'\n . '&include_history=true'\n . '&include_products=true';\n\n$data = sendRequest($url);\n```\n\n----------------------------------------\n\nTITLE: Example Order Object Response in JSON\nDESCRIPTION: This JSON snippet shows an example of the response returned by the `Poster.orders.getActive()` method. It includes order details such as ID, dates, status, user, table, products, totals, and payments.\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/pos/orders/orders-getActive.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"order\":{\n    \"id\":1508308514369,\n    \"dateStart\":1508308514369,\n    \"dateClose\":0,\n    \"datePrint\":0,\n    \"status\":1,\n    \"userId\":4,\n    \"tableId\":8,\n    \"orderName\":14,\n    \"guestsCount\":2,\n    \"products\":{\n      \"0\":{\n        \"id\":7,\n        \"count\":1,\n        \"price\":0,\n        \"printedNum\":0\n      },\n      \"1\":{\n        \"id\":1,\n        \"count\":1,\n        \"price\":25,\n        \"printedNum\":0\n      }\n    },\n    \"subtotal\":25,\n    \"total\":25,\n    \"discount\":0,\n    \"clientId\":0,\n    \"payType\":\"\",\n    \"payedSum\":0,\n    \"payedCard\":0,\n    \"payedCash\":0,\n    \"payedBonus\":0,\n    \"loyaltyAppId\":0,\n    \"parentId\":0,\n    \"tipIncluded\":0,\n    \"tipSum\":0,\n    \"comment\":\"\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response for Products from Joinposter API\nDESCRIPTION: This JSON snippet represents a sample response from the Joinposter API's `menu.getProducts` endpoint. It shows the structure of the product data including details such as barcode, category, cost, fiscal information, product ID, name, and other related attributes. It also shows nested structures for modifications, spots, and group modifications.\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/menu/getProducts.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"response\":[\n      {\n         \"barcode\":\"4820098749621\",\n         \"category_name\":\"Вода\",\n         \"unit\":\"\",\n         \"cost\":\"100\",\n         \"cost_netto\":\"83\",\n         \"fiscal\":\"0\",\n         \"menu_category_id\":\"15\",\n         \"workshop\":\"1\",\n         \"nodiscount\":\"0\",\n         \"photo\":\"/upload/4/menu/product_1403094564_139.jpg\",\n         \"photo_origin\":\"/upload/4/menu/product_1403094564_139_original.jpg\",\n         \"product_code\":\"\",\n         \"product_id\":\"139\",\n         \"product_name\":\"Borjomi\",\n         \"sort_order\":\"999\",\n         \"tax_id\":\"0\",\n         \"product_tax_id\":\"2\",\n         \"type\":\"3\",\n         \"weight_flag\":\"0\",\n         \"color\":\"white\",\n         \"ingredient_id\":\"9\",\n         \"cooking_time\": \"1201\",\n         \"fiscal_code\": null,\n         \"modifications\":[\n            {\n               \"modificator_id\":\"147\",\n               \"modificator_name\":\"Сок яблочный для кальяна \",\n               \"modificator_selfprice\":\"0\",\n               \"order\":\"0\",\n               \"modificator_barcode\":\"\",\n               \"modificator_product_code\":\"\",\n               \"spots\":[\n                  {\n                     \"spot_id\":\"1\",\n                     \"price\":\"68100\",\n                     \"profit\":\"68100\",\n                     \"profit_netto\":\"56750\",\n                     \"visible\":\"1\"\n                  },\n                  {\n                     \"spot_id\":\"2\",\n                     \"price\":\"68100\",\n                     \"profit\":\"68100\",\n                     \"profit_netto\":\"56750\",\n                     \"visible\":\"1\"\n                  },\n                  {\n                     \"spot_id\":\"1\",\n                     \"price\":\"68100\",\n                     \"profit\":\"68100\",\n                     \"profit_netto\":\"56750\",\n                     \"visible\":\"1\"\n                  },\n                  {\n                     \"spot_id\":\"2\",\n                     \"price\":\"68100\",\n                     \"profit\":\"68100\",\n                     \"profit_netto\":\"56750\",\n                     \"visible\":\"1\"\n                  }\n               ],\n               \"ingredient_id\":\"0\",\n               \"fiscal_code\": \"1234567890\"\n            }\n         ],\n         \"out\":0\n      },\n      {\n         \"barcode\":\"\",\n         \"category_name\":\"Вода\",\n         \"unit\":\"\",\n         \"cost\":\"654\",\n         \"cost_netto\":\"545\",\n         \"fiscal\":\"0\",\n         \"menu_category_id\":\"15\",\n         \"workshop\":\"3\",\n         \"nodiscount\":\"0\",\n         \"photo\":\"/upload/4/menu/product_1403094497_138.jpg\",\n         \"photo_origin\":\"/upload/4/menu/product_1403094497_138_original.jpg\",\n         \"product_code\":\"\",\n         \"product_id\":\"138\",\n         \"product_name\":\"Evian\",\n         \"sort_order\":\"999\",\n         \"tax_id\":\"0\",\n         \"product_tax_id\":\"0\",\n         \"type\":\"3\",\n         \"weight_flag\":\"0\",\n         \"color\":\"white\",\n         \"spots\":[\n            {\n               \"spot_id\":\"1\",\n               \"price\":\"19000\",\n               \"profit\":\"18346\",\n               \"profit_netto\":\"15288\",\n               \"visible\":\"1\"\n            },\n            {\n               \"spot_id\":\"2\",\n               \"price\":\"19000\",\n               \"profit\":\"18346\",\n               \"profit_netto\":\"15288\",\n               \"visible\":\"1\"\n            }\n         ],\n         \"ingredient_id\":\"8\",\n         \"cooking_time\": \"0\",\n         \"fiscal_code\": \"1231231234\",\n         \"out\":0\n      },\n      {\n         \"barcode\":\"\",\n         \"category_name\":\"Главный экран\",\n         \"unit\":\"kg\",\n         \"cost\":\"0\",\n         \"cost_netto\":\"0\",\n         \"fiscal\":\"0\",\n         \"hidden\":\"0\",\n         \"menu_category_id\":\"0\",\n         \"workshop\":\"1\",\n         \"nodiscount\":\"0\",\n         \"photo\":\"\",\n         \"photo_origin\":null,\n         \"price\":{\n            \"1\":\"30000\",\n            \"2\":\"30000\"\n         },\n         \"product_code\":\"\",\n         \"product_id\":\"30\",\n         \"product_name\":\"Обеденное меню\",\n         \"profit\":{\n            \"1\":\"30000\",\n            \"2\":\"30000\"\n         },\n         \"sort_order\":\"999\",\n         \"tax_id\":\"0\",\n         \"product_tax_id\":\"0\",\n         \"type\":\"2\",\n         \"weight_flag\":\"0\",\n         \"color\":\"white\",\n         \"spots\":[\n            {\n               \"spot_id\":\"1\",\n               \"price\":\"30000\",\n               \"profit\":\"30000\",\n               \"profit_netto\":\"30000\",\n               \"visible\":\"1\"\n            },\n            {\n               \"spot_id\":\"2\",\n               \"price\":\"30000\",\n               \"profit\":\"30000\",\n               \"profit_netto\":\"30000\",\n               \"visible\":\"1\"\n            }\n         ],\n         \"ingredient_id\":\"0\",\n         \"cooking_time\":\"0\",\n         \"different_spots_prices\":\"0\",\n         \"fiscal_code\":\"\",\n         \"group_modifications\":[\n            {\n               \"dish_modification_group_id\":29,\n               \"name\":\"Напитки\",\n               \"num_min\":1,\n               \"num_max\":3,\n               \"is_deleted\":0,\n               \"modifications\":[\n                  {\n                     \"dish_modification_id\":142,\n                     \"name\":\"Кола\",\n                     \"ingredient_id\":77,\n                     \"type\":2,\n                     \"brutto\":1,\n                     \"price\":99.99,\n                     \"photo_orig\":\"\",\n                     \"photo_large\":\"\",\n                     \"photo_small\":\"\",\n                     \"last_modified_time\":\"2020-05-26 15:33:30\"\n                  },\n                  {\n                     \"dish_modification_id\":143,\n                     \"name\":\"Фанта\",\n                     \"ingredient_id\":33,\n                     \"type\":10,\n                     \"brutto\":200,\n                     \"price\":99.99,\n                     \"photo_orig\":\"\",\n                     \"photo_large\":\"\",\n                     \"photo_small\":\"\",\n                     \"last_modified_time\":\"2020-05-26 15:33:30\"\n                  },\n                  {\n                     \"dish_modification_id\":147,\n                     \"name\":\"Спрайт\",\n                     \"ingredient_id\":39,\n                     \"type\":10,\n                     \"brutto\":200,\n                     \"price\":99.99,\n                     \"photo_orig\":\"\",\n                     \"photo_large\":\"\",\n                     \"photo_small\":\"\",\n                     \"last_modified_time\":\"2020-05-26 15:33:30\"\n                  }\n               ]\n            },\n            {\n               \"dish_modification_group_id\":30,\n               \"name\":\"Еда\",\n               \"num_min\":1,\n               \"num_max\":999,\n               \"is_deleted\":0,\n               \"modifications\":[\n                  {\n                     \"dish_modification_id\":144,\n                     \"name\":\"Картофель фри\",\n                     \"ingredient_id\":0,\n                     \"type\":0,\n                     \"brutto\":0,\n                     \"price\":99.99,\n                     \"photo_orig\":\"\",\n                     \"photo_large\":\"\",\n                     \"photo_small\":\"\",\n                     \"last_modified_time\":\"2020-05-26 15:33:30\"\n                  },\n                  {\n                     \"dish_modification_id\":145,\n                     \"name\":\"Снэки\",\n                     \"ingredient_id\":178,\n                     \"type\":10,\n                     \"brutto\":200,\n                     \"price\":99.99,\n                     \"photo_orig\":\"\",\n                     \"photo_large\":\"\",\n                     \"photo_small\":\"\",\n                     \"last_modified_time\":\"2020-05-26 15:33:30\"\n                  }\n               ]\n            }\n         ],\n         \"out\":100,\n         \"product_production_description\":\"\",\n         \"ingredients\":[\n            {\n               \"structure_id\":\"828\",\n               \"ingredient_id\":\"32\",\n               \"pr_in_clear\":\"0\",\n               \"pr_in_cook\":\"0\",\n               \"pr_in_fry\":\"0\",\n               \"pr_in_stew\":\"0\",\n               \"pr_in_bake\":\"0\",\n               \"structure_unit\":\"kg\",\n               \"structure_type\":\"1\",\n               \"structure_brutto\":100,\n               \"structure_netto\":100,\n               \"structure_lock\":\"1\",\n               \"structure_selfprice\":\"0\",\n               \"structure_selfprice_netto\":\"0\",\n               \"ingredient_name\":\"Sugar\",\n               \"ingredient_unit\":\"kg\",\n               \"ingredient_weight\":0,\n               \"ingredients_losses_clear\":\"0\",\n               \"ingredients_losses_cook\":\"0\",\n               \"ingredients_losses_fry\":\"0\",\n               \"ingredients_losses_stew\":\"0\",\n               \"ingredients_losses_bake\":\"0\"\n            }\n         ]\n      }\n   ]\n}\n```\n\n----------------------------------------\n\nTITLE: Response Format for Storage.deleteManufacture API\nDESCRIPTION: This JSON response example shows the structure returned by the storage.deleteManufacture endpoint. The response parameter indicates whether the manufacture was successfully removed.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/storage/deleteManufacture.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"response\":true\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Ingredient Category Properties in PHP\nDESCRIPTION: PHP API request to fetch ingredient category details using the menu.getCategoryIngredients endpoint. Requires category_id and optional 1c parameter.\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/menu/getCategoryIngredients.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/menu.getCategoryIngredients'\n . '?token=687409:4164553abf6a031302898da7800b59fb'\n . '&category_id=3'\n . '&1c=true';\n\n$data = sendRequest($url);\n```\n\n----------------------------------------\n\nTITLE: Removing Product from Order - JavaScript\nDESCRIPTION: Shows how to remove a product from an order by setting its count to 0 using the Poster.orders.changeProductCount method.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/pos/orders/orders-changeProductCount.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nPoster.orders.changeProductCount(1503219480866, {id: 1, count: 0})\n```\n\n----------------------------------------\n\nTITLE: Example Response Structure for Shift Transactions in JSON\nDESCRIPTION: This snippet represents an example of the JSON response format from the JoinPoster API containing an array of cash shift transactions. Each transaction includes details like transaction ID, amount, time, user ID, and status indicators.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/finance/getCashShiftTransactions.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"response\":[\n    {\n      \"shift_tr_id\":1648,\n      \"shift_id\":333,\n      \"time\":1505980800000,\n      \"type\":5,\n      \"tr_amount\":10000,\n      \"user_id\":3,\n      \"comment\":\"бар\",\n      \"shift_tr_id_edit\":0,\n      \"user_id_edit\":0,\n      \"edit_time\":0,\n      \"edit\":0,\n      \"delete\":0,\n      \"is_fiscal\":0\n    },\n    {\n      \"shift_tr_id\":1647,\n      \"shift_id\":333,\n      \"time\":1505977200000,\n      \"type\":1,\n      \"tr_amount\":10000,\n      \"user_id\":3,\n      \"comment\":\"\",\n      \"shift_tr_id_edit\":0,\n      \"user_id_edit\":0,\n      \"edit_time\":0,\n      \"edit\":0,\n      \"delete\":0,\n      \"is_fiscal\":1\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Example Joinposter API Response (JSON)\nDESCRIPTION: This JSON snippet represents a sample response from the Joinposter API's `menu.getWorkshop` endpoint. It includes the `workshop_id`, `workshop_name`, and `delete` status within the `response` object, providing information about a specific station.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/menu/getWorkshop.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"response\":{\n    \"workshop_id\":\"1\",\n    \"workshop_name\":\"Бар\",\n    \"delete\":\"0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Making an API Request to franchise.getSpots in PHP\nDESCRIPTION: This PHP code snippet demonstrates how to make an HTTP GET request to the franchise.getSpots endpoint. It constructs the URL with the required token parameter.\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/franchise/getSpots.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/franchise.getSpots'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$data = sendRequest($url);\n\n```\n\n----------------------------------------\n\nTITLE: JSON Response for Successful Employee Update\nDESCRIPTION: This JSON snippet shows the expected response format when an employee is successfully updated using the access.updateEmployee method. The response contains the ID of the updated employee.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/access/updateEmployee.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"response\":4082\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Station Properties with PHP API Call\nDESCRIPTION: PHP example showing how to update a station's properties using the menu.updateWorkshop endpoint. The code sends a POST request with the station ID and name to be updated, and receives the updated station ID in response.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/menu/updateWorkshop.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/menu.updateWorkshop'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$workshop = [\n    'workshop_id'  => 5,\n    'product_name' => 'Суши',\n];\n\n$data = sendRequest($url, 'post', $workshop);\n```\n\n----------------------------------------\n\nTITLE: Sales Analytics Response Format - Waiter Data\nDESCRIPTION: Example JSON response showing sales data broken down by waiters, including metrics like revenue, profit, client count, and average service time per waiter.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/dash/getAnalytics.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"response\":[\n    {\n      \"user_id\":\"2\",\n      \"name\":\"Максим\",\n      \"sum\":\"5248550\",\n      \"profit\":\"4505024\",\n      \"revenue\":\"5522290\",\n      \"clients\":\"42\",\n      \"middle_time\":\"1871214.0370\"\n    },\n    {\n      \"user_id\":\"6\",\n      \"name\":\"Антон\",\n      \"sum\":\"5873540\",\n      \"profit\":\"5187174\",\n      \"revenue\":\"6234086\",\n      \"clients\":\"42\",\n      \"middle_time\":\"3.2910\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Removing an Ingredient Using JoinPoster API - PHP\nDESCRIPTION: This code snippet demonstrates how to remove an ingredient from the menu in JoinPoster by sending a POST request to the appropriate API endpoint. The snippet constructs the request including the ingredient ID, which is required for the operation. The expected output is a JSON response indicating whether the removal was successful.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/menu/removeIngredient.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/menu.removeIngredient'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$ingredient = [\n    'ingredient_id' => 811,\n];\n\ndata = sendRequest($url, 'post', $ingredient);\n\n```\n\n----------------------------------------\n\nTITLE: Creating a financial category using the JoinPoster API\nDESCRIPTION: This code snippet demonstrates how to create a new financial category using the JoinPoster API's finance.createCategory endpoint. It constructs the API URL with the access token, defines an array with the category parameters (name, parent category ID, and flags for incoming and outgoing operations), and then sends a POST request to the API.\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/finance/createCategory.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/finance.createCategory'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$category = [\n    'category_name'     => 'Коммуналка',\n    'category_parent'   => 0,\n    'operations_in'     => 0, \n    'operations_out'    => 1\n\n];\n\n$data = sendRequest($url, 'post', $category);\n```\n\n----------------------------------------\n\nTITLE: Response Structure for Get Transactions - JSON\nDESCRIPTION: This JSON snippet illustrates the structure of the response received from the JoinPoster API after querying for transactions. It includes an array of transaction objects with various attributes related to each transaction such as id, amount, date, and more.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/finance/getTransactions.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"response\":[\n    {\n      \"transaction_id\":\"538\",\n      \"account_id\":\"1\",\n      \"user_id\":\"1\",\n      \"category_id\":\"7\",\n      \"type\":\"0\",\n      \"amount\":\"-8137663\",\n      \"balance\":\"545516997964\",\n      \"date\":\"2017-08-31 09:20:22\",\n      \"recipient_type\":\"0\",\n      \"recipient_id\":\"0\",\n      \"binding_type\":\"15\",\n      \"binding_id\":\"400\",\n      \"comment\":\"Корректирующая транзакция\",\n      \"delete\":\"0\",\n      \"account_name\":\"Наличные в заведении\",\n      \"currency_symbol\":\"<i class=\\\"icon-rouble\\\"><\\/i>\",\n      \"category_name\":\"Actualization\"\n    },\n    {\n      \"transaction_id\":\"536\",\n      \"account_id\":\"1\",\n      \"user_id\":\"1\",\n      \"category_id\":\"2\",\n      \"type\":\"1\",\n      \"amount\":\"8148663\",\n      \"balance\":\"545525135627\",\n      \"date\":\"2017-08-31 09:20:21\",\n      \"recipient_type\":\"0\",\n      \"recipient_id\":\"0\",\n      \"binding_type\":\"11\",\n      \"binding_id\":\"400\",\n      \"comment\":\"Закрытие наличной кассы\",\n      \"delete\":\"0\",\n      \"account_name\":\"Наличные в заведении\",\n      \"currency_symbol\":\"<i class=\\\"icon-rouble\\\"><\\/i>\",\n      \"category_name\":\"Cash register shifts\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Response for Available Tables\nDESCRIPTION: Represents the API response structure containing a list of free tables with their details such as table ID, number, capacity, venue ID, and hall ID\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/incomingOrders/getTablesForReservation.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"response\":{\n      \"freeTables\":[\n         {\n            \"table_id\":\"85\",\n            \"table_num\":\"2\",\n            \"table_capacity\":\"3\",\n            \"spot_id\":\"2\",\n            \"hall_id\":\"5\"\n         },\n         {\n            \"table_id\":\"98\",\n            \"table_num\":\"9\",\n            \"table_capacity\":\"3\",\n            \"spot_id\":\"1\",\n            \"hall_id\":\"3\"\n         },\n         {\n            \"table_id\":\"91\",\n            \"table_num\":\"2\",\n            \"table_capacity\":\"4\",\n            \"spot_id\":\"1\",\n            \"hall_id\":\"3\"\n         },\n         {\n            \"table_id\":\"94\",\n            \"table_num\":\"5\",\n            \"table_capacity\":\"5\",\n            \"spot_id\":\"1\",\n            \"hall_id\":\"3\"\n         }\n      ]\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response from franchise.getTransactionsByClientId\nDESCRIPTION: This JSON example shows the response structure from the franchise.getTransactionsByClientId endpoint. It includes date range information, transaction count, and detailed transaction data with products purchased at different franchises.\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/franchise/getTransactionsByClientId.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"response\": {\n    \"date_from\": \"2017-04-01 00:00:00\",\n    \"date_to\": \"2017-04-30 23:59:59\",\n    \"transactions_count\": 2,\n    \"transactions\": [\n      {\n        \"franchise_id\": 7457,\n        \"transaction_id\": 12870,\n        \"date_close\": \"2017-04-25 17:58:50\",\n        \"sum\": 246.4,\n        \"bonus\": 0,\n        \"bonus_payed\": 0,\n        \"products\": [\n          {\n            \"product_id\": 832,\n            \"modificator_id\": 0,\n            \"franchise_product_id\": 322,\n            \"franchise_modification_id\": 0,\n            \"sum\": 246.4\n          }\n        ]\n      },\n      {\n        \"franchise_id\": 888,\n        \"transaction_id\": 44626,\n        \"date_close\": \"2017-04-12 16:25:42\",\n        \"sum\": 626,\n        \"bonus\": 0,\n        \"bonus_payed\": 0,\n        \"products\": [\n          {\n            \"product_id\": 13,\n            \"modificator_id\": 0,\n            \"franchise_product_id\": 13,\n            \"franchise_modification_id\": 0,\n            \"sum\": 318\n          },\n          {\n            \"product_id\": 10,\n            \"modificator_id\": 0,\n            \"franchise_product_id\": 10,\n            \"franchise_modification_id\": 0,\n            \"sum\": 308\n          }\n        ]\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Account Properties with PHP\nDESCRIPTION: PHP example showing how to call the finance.getAccount API endpoint with an account_id parameter to retrieve account properties.\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/finance/getAccount.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/finance.getAccount'\n . '?token=687409:4164553abf6a031302898da7800b59fb'\n . '&account_id=3';\n\n$data = sendRequest($url);\n```\n\n----------------------------------------\n\nTITLE: Querying Joinposter API for Cash Shifts in PHP\nDESCRIPTION: This PHP code snippet demonstrates how to construct a URL to query the Joinposter API for cash shifts. It includes parameters for authentication token, date range (dateFrom and dateTo), and timezone. The sendRequest function (not defined in this snippet) is assumed to handle the actual API call.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/finance/getCashShifts.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/finance.getCashShifts'\n    . '?token=687409:4164553abf6a031302898da7800b59fb'\n    . '&dateFrom=20170701'\n    . '&dateTo=20170901'\n    . '&timezone=client';\n\n$data = sendRequest($url);\n```\n\n----------------------------------------\n\nTITLE: Example Response from Register Shift Properties API\nDESCRIPTION: This JSON snippet outlines the expected response structure when a request is made to the JoinPoster API for cash shift properties. It includes various details such as timestamps, amounts, and user IDs associated with the cash shift.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/finance/getCashShift.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"response\":{  \n    \"cash_shift_id\":333,\n    \"spot_id\":1,\n    \"timestart\":1505977200000,\n    \"timeend\":1505980800000,\n    \"amount_start\":10000,\n    \"amount_end\":10000,\n    \"amount_debit\":0,\n    \"amount_sell_cash\":0,\n    \"amount_sell_card\":0,\n    \"amount_credit\":0,\n    \"amount_collection\":0,\n    \"user_id_start\":3,\n    \"user_id_end\":3,\n    \"comment\":\"бар\"\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: JSON Response Structure for Dish Composition\nDESCRIPTION: This JSON snippet illustrates the structure of the response returned by the transactions.getTransactionDishComposition method. It includes transaction details, dish information, and a list of ingredients with their types and weights.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/transactions/getTransactionDishComposition.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{  \n  \"response\":{  \n    \"transaction_id\":76,\n    \"product_id\":82,\n    \"modificator_id\":22,\n    \"num\":1,\n    \"ingredients\":[  \n      {  \n        \"ingredient_id\":135,\n        \"type\":1,\n        \"weight\":0.6\n      },\n      {  \n        \"ingredient_id\":24,\n        \"type\":2,\n        \"weight\":0.05\n      },\n      {  \n        \"ingredient_id\":136,\n        \"type\":1,\n        \"weight\":2\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Product Modifier ID in 1C System via API - PHP\nDESCRIPTION: This PHP code snippet demonstrates how to send a POST request to the joinposter API to update the product modifier ID in the 1C system. It includes the required URL, authorization token, and an array of product modificator objects containing the ID and 1C parameters. The response from the API confirms the success of the operation.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/menu/set1cModificatorId.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/menu.set1cModificatorId'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$product_modificators = [\n    'id' => [\n        [\n            'modificator_id' => 7,\n            'id_1c'          => 'b80ffc81-0fc9-11e7-9ab4-ace01035e460',\n        ],\n    ],\n];\n\n$data = sendRequest($url, 'post', $product_modificators);\n\n```\n\n----------------------------------------\n\nTITLE: Example Response from Joinposter API After Updating Ingredient Category\nDESCRIPTION: This JSON snippet showcases the expected response from the Joinposter API after a successful update of an ingredient category using the `menu.updateCategoryIngredients` endpoint. The response contains a single `response` field, which represents the ID of the updated ingredient category.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/menu/updateCategoryIngredients.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"response\": 2\n}\n```\n\n----------------------------------------\n\nTITLE: Requesting Transaction List in PHP\nDESCRIPTION: This PHP snippet demonstrates how to make a GET request to the dash.getTransactions endpoint. It includes parameters for authentication token and date range.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/dash/getTransactions.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/dash.getTransactions'\n . '?token=687409:4164553abf6a031302898da7800b59fb'\n . '&dateFrom=20170905'\n . '&dateTo=20170908';\n\n$data = sendRequest($url);\n```\n\n----------------------------------------\n\nTITLE: JSON Response Structure for Semi-Finished Product Properties\nDESCRIPTION: Example JSON response detailing the structure and properties of a semi-finished product, including ingredient details, cooking methods, and cost information\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/menu/getPrepack.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"response\":{\n    \"product_id\":\"167\",\n    \"ingredient_id\":\"0\",\n    \"product_name\":\"Куринный бульон\",\n    \"cost\":\"1222\",\n    \"cost_netto\":\"1018\",\n    \"out\":171,\n    \"product_production_description\":\"\",\n    \"id_1c\":\"0\",\n    \"ingredients\":[\n      {\n        \"structure_id\":\"45\",\n        \"ingredient_id\":\"88\",\n        \"pr_in_clear\":\"0\",\n        \"pr_in_cook\":\"1\",\n        \"pr_in_fry\":\"0\",\n        \"pr_in_stew\":\"0\",\n        \"pr_in_bake\":\"0\",\n        \"structure_unit\":\"kg\",\n        \"structure_type\":\"1\",\n        \"structure_brutto\":200,\n        \"structure_netto\":170,\n        \"structure_lock\":\"1\",\n        \"structure_selfprice\":\"1221\",\n        \"structure_selfprice_netto\":\"1018\",\n        \"ingredient_name\":\"Куриные крылья\",\n        \"ingredient_unit\":\"kg\",\n        \"ingredient_weight\":\"0\",\n        \"ingredients_losses_clear\":\"0\",\n        \"ingredients_losses_cook\":\"15\",\n        \"ingredients_losses_fry\":\"16\",\n        \"ingredients_losses_stew\":\"16\",\n        \"ingredients_losses_bake\":\"16\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example API Response (JSON)\nDESCRIPTION: This JSON snippet shows an example of the response returned by the `dash.getSpotsSales` API endpoint.  The response includes key sales metrics such as total revenue, profit, net profit, client count, and the average invoice amount.  The values are returned within the `response` object.\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/dash/getSpotsSales.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"response\":{\n    \"revenue\":536723.37,\n    \"profit\":448025.64,\n    \"profit_netto\":373354.7,\n    \"clients\":423,\n    \"middle_invoice\":1268.8495744681\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Register Properties with PHP API Client\nDESCRIPTION: Example of making a POST request to update register properties including ID, location, name and password. The request is made to the access.updateTablet endpoint with the required parameters.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/access/updateTablet.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/access.updateTablet'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$tablet = [\n    'spot_tablet_id'   => 2,\n    'spot_id'          => 1,\n    'spot_tablet_name' => 'New tablet',\n    'spot_code'        => 'b3ss7m1p',\n];\n\n$data = sendRequest($url, 'post', $tablet);\n```\n\n----------------------------------------\n\nTITLE: e-Wallet Top-up API Response Example in JSON\nDESCRIPTION: This JSON snippet shows the typical response from the Poster API after a successful e-Wallet top-up. The response contains an ID indicating the transaction.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/clients/addEWalletPayment.md#2025-04-21_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{  \n   \"response\":\"1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting a client with clients.removeClient API in PHP\nDESCRIPTION: This code snippet demonstrates how to delete a client using the clients.removeClient API endpoint. It sends a POST request to the API with the client_id parameter and retrieves the response.\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/clients/removeClient.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/clients.removeClient'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$client = [\n    'client_id' => 2,\n];\n\n$data = sendRequest($url, 'post', $client);\n```\n\n----------------------------------------\n\nTITLE: Updating Customer Group Properties in Joinposter using PHP\nDESCRIPTION: This PHP snippet demonstrates how to update customer group properties using the `clients.updateGroup` API endpoint. It sends a POST request to the specified URL with the customer group ID, name, loyalty type, discount, and birthday bonus as parameters. The `sendRequest` function is assumed to be defined elsewhere.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/clients/updateGroup.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/clients.updateGroup'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$group = [\n  'client_groups_id'       => 5,\n  'client_groups_name'     => 'Everyday guest',\n  'loyalty_type'           => 1,\n  'client_groups_discount' => 10,\n  'birthday_bonus'         => 50.00,\n];\n\n$data = sendRequest($url, 'post', $group);\n```\n\n----------------------------------------\n\nTITLE: Transaction Write-offs Response Format\nDESCRIPTION: JSON response structure showing write-off details including IDs, quantities, costs, and timestamps for each item. Contains information about ingredients, storage, units, and pricing.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/dash/getTransactionWriteOffs.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"response\":[\n    {\n      \"write_off_id\":\"1518199\",\n      \"tr_product_id\":\"2125168\",\n      \"storage_id\":\"1\",\n      \"ingredient_id\":\"833\",\n      \"product_id\":\"168\",\n      \"modificator_id\":\"0\",\n      \"prepack_id\":\"0\",\n      \"weight\":\"1.00000\",\n      \"unit\":\"p\",\n      \"cost\":22.13,\n      \"cost_netto\":18.44,\n      \"time\":\"1507703520358\"\n    },\n    {\n      \"write_off_id\":\"1518200\",\n      \"tr_product_id\":\"2125169\",\n      \"storage_id\":\"1\",\n      \"ingredient_id\":\"85\",\n      \"product_id\":\"169\",\n      \"modificator_id\":\"0\",\n      \"prepack_id\":\"0\",\n      \"weight\":0.04,\n      \"unit\":\"l\",\n      \"cost\":1.24,\n      \"cost_netto\":1.03,\n      \"time\":\"1507703520358\"\n    },\n    {\n      \"write_off_id\":\"1518201\",\n      \"tr_product_id\":\"2125169\",\n      \"storage_id\":\"1\",\n      \"ingredient_id\":\"78\",\n      \"product_id\":\"169\",\n      \"modificator_id\":\"0\",\n      \"prepack_id\":\"0\",\n      \"weight\":0.059,\n      \"unit\":\"kg\",\n      \"cost\":2.12,\n      \"cost_netto\":1.77,\n      \"time\":\"1507703520358\"\n    },\n    {\n      \"write_off_id\":\"1518202\",\n      \"tr_product_id\":\"2125169\",\n      \"storage_id\":\"1\",\n      \"ingredient_id\":\"84\",\n      \"product_id\":\"169\",\n      \"modificator_id\":\"0\",\n      \"prepack_id\":\"0\",\n      \"weight\":0.128,\n      \"unit\":\"kg\",\n      \"cost\":2.68,\n      \"cost_netto\":2.23,\n      \"time\":\"1507703520358\"\n    },\n    {\n      \"write_off_id\":\"1518203\",\n      \"tr_product_id\":\"2125169\",\n      \"storage_id\":\"1\",\n      \"ingredient_id\":\"86\",\n      \"product_id\":\"169\",\n      \"modificator_id\":\"0\",\n      \"prepack_id\":\"0\",\n      \"weight\":0.608,\n      \"unit\":\"kg\",\n      \"cost\":37.35,\n      \"cost_netto\":31.13,\n      \"time\":\"1507703520358\"\n    },\n    {\n      \"write_off_id\":\"1518204\",\n      \"tr_product_id\":\"2125170\",\n      \"storage_id\":\"1\",\n      \"ingredient_id\":\"97\",\n      \"product_id\":\"908\",\n      \"modificator_id\":\"68\",\n      \"prepack_id\":\"918\",\n      \"weight\":0.15,\n      \"unit\":\"kg\",\n      \"cost\":0.43,\n      \"cost_netto\":0.36,\n      \"time\":\"1507703520358\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Cash Shift Object Structure in JSON\nDESCRIPTION: Example of a Cash Shift object showing the data structure returned by the API. It includes identifiers, timestamps for opening and closing times, and monetary values for the beginning and end of the shift.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/pos/types/shift.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"cash_pos_id\": 1597042083441,\n   \"cash_shift_id\": 10,\n   \"timestart\": 1597042083440,\n   \"timeend\": 0,\n   \"amount_start\": 100,\n   \"amount_end\": 0,\n   \"comment\": \"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Ingredient ID in 1C System using PHP\nDESCRIPTION: This code snippet demonstrates how to update an ingredient ID in the 1C system using a POST request to the JoinPoster API. It requires a valid API token and an array of ingredient ID mappings. The function `sendRequest` is used to send the request; this function must be defined elsewhere in the codebase. Expected input is a combination of `ingredient_id` and `id_1c`, and a successful response includes a 'success' key with a value of 1.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/menu/set1cIngredientId.md#2025-04-21_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/menu.set1cIngredientId'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$ingredient = [\n    'id' => [\n        [\n            'ingredient_id' => 48,\n            'id_1c'         => 'b80ffc81-0fc9-11e7-9ab4-ace01035e460',\n        ],\n    ],\n];\n\n$data = sendRequest($url, 'post', $ingredient);\n\n```\n\n----------------------------------------\n\nTITLE: Closing Cash Shift with finance.closeCashShift in PHP\nDESCRIPTION: This PHP snippet demonstrates how to use the `finance.closeCashShift` endpoint to close a cash shift. It constructs the URL with the API token, prepares the necessary data (cash_shift_id, user_id, amount, time, is_fiscal, comment), and then uses a `sendRequest` function to send the data via a POST request to the specified URL. The `sendRequest` function is assumed to be defined elsewhere.\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/finance/closeCashShift.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/finance.closeCashShift'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$cash_shift = [\n    'cash_shift_id' => 335,\n    'user_id'       => 3,\n    'amount'        => 234.56,\n    'time'          => '2017-09-21 20:00',\n    'is_fiscal'     => 1,\n    'comment'       => 'бар',\n];\n\n$data = sendRequest($url, 'post', $cash_shift);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Waste Reasons from JoinPoster API\nDESCRIPTION: PHP code snippet demonstrating how to make an API request to fetch waste reasons using a token-based authentication method. The request is sent to the JoinPoster storage API endpoint.\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/storage/getWasteReasons.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$url = 'https://joinposter.com/api/storage.getWasteReasons'\n  . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$data = sendRequest($url);\n```\n\n----------------------------------------\n\nTITLE: JSON Response for Ingredient Inventory Check\nDESCRIPTION: This JSON snippet shows the structure of the response from the storage.getInventoryIngredients endpoint. It includes detailed information about ingredients, manufactures, and prepacks in the inventory check.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/storage/getInventoryIngredients.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"response\":{\n    \"ingredients\":{\n      \"115\":{\n        \"item_id\":\"11\",\n        \"item\":\"Яблочный\",\n        \"startrest\":655,\n        \"startrestcurrency\":8508.45,\n        \"startrestcurrency_netto\":7090.38,\n        \"income\":0,\n        \"charges\":1563,\n        \"writeoff\":0,\n        \"writeoffcurrency\":0,\n        \"writeoffcurrency_netto\":0,\n        \"estimatedrest\":-908,\n        \"primecost\":12.99,\n        \"primecost_netto\":10.83,\n        \"factrest\":\"''\",\n        \"fact_rest_in_prepack\":\"''\",\n        \"fact_rest_sum\":\"''\",\n        \"difference\":\"''\",\n        \"diffcurrency\":\"''\",\n        \"diffcurrency_netto\":\"''\",\n        \"partial_write_off\":\"0\",\n        \"unit\":\"pcs\",\n        \"db_unit\":\"p\"\n      },\n      \"116\":{\n        \"item_id\":\"76\",\n        \"item\":\"Яйца куринные (ing)\",\n        \"startrest\":21,\n        \"startrestcurrency\":36.54,\n        \"startrestcurrency_netto\":30.45,\n        \"income\":0,\n        \"charges\":1699,\n        \"writeoff\":0,\n        \"writeoffcurrency\":0,\n        \"writeoffcurrency_netto\":0,\n        \"estimatedrest\":-1678,\n        \"primecost\":1.74,\n        \"primecost_netto\":1.45,\n        \"factrest\":\"''\",\n        \"fact_rest_in_prepack\":\"''\",\n        \"fact_rest_sum\":\"''\",\n        \"difference\":\"''\",\n        \"diffcurrency\":\"''\",\n        \"diffcurrency_netto\":\"''\",\n        \"partial_write_off\":\"0\",\n        \"unit\":\"pcs\",\n        \"db_unit\":\"p\"\n      }\n    },\n    \"manufactures\":[\n\n    ],\n    \"prepacks\":{\n      \"930\":{\n        \"product_id\":\"930\",\n        \"product_name\":\"Кальян с сюрпризом\",\n        \"type\":\"2\",\n        \"weight_flag\":\"0\",\n        \"delete\":\"0\",\n        \"factrest\":0,\n        \"count\":0,\n        \"cost\":0,\n        \"cost_netto\":0,\n        \"saved\":0\n      },\n      \"931\":{\n        \"product_id\":\"931\",\n        \"product_name\":\"Маринованные грибы\",\n        \"type\":\"1\",\n        \"weight_flag\":\"0\",\n        \"delete\":\"0\",\n        \"factrest\":0,\n        \"count\":0,\n        \"cost\":0,\n        \"cost_netto\":0,\n        \"saved\":0\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating 1C Supply IDs via API with PHP\nDESCRIPTION: This PHP snippet demonstrates how to update supply IDs in the 1C system using the 'storage.set1cSupplyId' API endpoint. It constructs the API URL with a token and sends a POST request containing an array of supply IDs and their corresponding 1C IDs.\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/storage/set1cSupplyId.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/storage.set1cSupplyId'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$supply = [\n    'id' => [\n        [\n            'supply_id' => 32,\n            'id_1c'   => 'b80ffc81-0fc9-11e7-9ab4-ace01035e460',\n        ],\n    ],\n];\n\n$data = sendRequest($url, 'post', $supply);\n```\n\n----------------------------------------\n\nTITLE: Authorization Request Implementation\nDESCRIPTION: PHP implementation of the authorization request to the Manage Platform API endpoint, including application credentials and verification code generation.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/manage/index.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = \"https://joinposter.com/api/v2/auth/manage\";\n\n$auth = [\n    'application_id'     \t=> 41, \n    'application_secret' \t=> '123123', \n    'code'          \t\t=> '74367937cf906c097931a3888adf7a84',\n];\n$auth['verify'] = md5(implode(':', $auth));\n\n$data = sendRequest($url, 'post', $auth);\n\n```\n\n----------------------------------------\n\nTITLE: Example Response from storage.getPacks API\nDESCRIPTION: This JSON snippet shows an example response from the `storage.getPacks` API endpoint.  The response contains an array of packaging objects, each with `pack_id`, `name`, `unit`, `count`, and `type` properties. The `type` indicates whether the packaging is a basic type or a custom type.\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/storage/getPacks.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"response\":[\n    {\n      \"pack_id\":\"1\",\n      \"name\":\"\",\n      \"unit\":\"p\",\n      \"count\":\"0.0000\",\n      \"type\":\"0\"\n    },\n    {\n      \"pack_id\":\"2\",\n      \"name\":\"\",\n      \"unit\":\"l\",\n      \"count\":\"0.0000\",\n      \"type\":\"0\"\n    },\n    {\n      \"pack_id\":\"3\",\n      \"name\":\"\",\n      \"unit\":\"kg\",\n      \"count\":\"0.0000\",\n      \"type\":\"0\"\n    },\n    {\n      \"pack_id\":\"5\",\n      \"name\":\"Пак молока\",\n      \"unit\":\"p\",\n      \"count\":\"20.0000\",\n      \"type\":\"1\"\n    },\n    {\n      \"pack_id\":\"6\",\n      \"name\":\"Вода очищенная\",\n      \"unit\":\"l\",\n      \"count\":\"20.0000\",\n      \"type\":\"1\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response from menu.getCategory API\nDESCRIPTION: This JSON snippet illustrates the expected structure of the API response when querying category properties. It includes various properties such as category ID, name, visibility, and more.\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/menu/getCategory.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{  \n  \"response\":{  \n    \"category_id\":30,\n    \"category_name\":\"Бар\",\n    \"category_photo\":null,\n    \"category_photo_origin\":null,\n    \"parent_category\":0,\n    \"category_color\":\"yellow\",\n    \"category_hidden\":0,\n    \"sort_order\":3,\n    \"fiscal\":0,\n    \"nodiscount\":0,\n    \"tax_id\":2,\n    \"left\":7,\n    \"right\":42,\n    \"level\":1,\n    \"category_tag\":\"alco\",\n    \"visible\":[\n      {\n        \"spot_id\": 1,\n        \"visible\": 1\n      },\n      {\n        \"spot_id\": 2,\n        \"visible\": 0\n      }\n    ],\n    \"id_1c\":\"9c68dbc9-b255-11e6-9a8f-ace01035e460\"\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: JSON Response for Account Currency\nDESCRIPTION: This JSON snippet shows the structure of the response returned by the settings.getCurrency method. It includes details such as currency ID, name, code, symbol, and ISO code.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/settings/getCurrency.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{  \n  \"response\":{  \n    \"currency_id\":\"2\",\n    \"currency_name\":\"Рубль\",\n    \"currency_code\":\"руб.\",\n    \"currency_symbol\":\"<i class=\\\"icon-rouble\\\"><\\/i>\",\n    \"currency_code_iso\":\"RUB\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sending DELETE Request for Waste Removal in PHP\nDESCRIPTION: This PHP code snippet demonstrates how to send a POST request to the storage.deleteWriteOff endpoint to remove a waste record. It constructs the API URL with an authentication token and sends the waste ID as a parameter.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/storage/deleteWriteOff.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/storage.deleteWriteOff'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$delete = [\n    'write_off_id' => 60\n];\n\n$data = sendRequest($url, 'post', $delete);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Non-Manual Wastes in PHP\nDESCRIPTION: Example of how to make a GET request to the storage.getIngredientWriteOff endpoint using PHP. The request uses a token for authentication and calls a helper function sendRequest to execute the API call.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/storage/getIngredientWriteOff.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/storage.getIngredientWriteOff'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$data = sendRequest($url);\n\n```\n\n----------------------------------------\n\nTITLE: Ingredient Categories API Response JSON\nDESCRIPTION: JSON response structure for the menu.getCategoriesIngredients API endpoint, showing ingredient category details including ID, name, and optional 1C system identifier.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/menu/getCategoriesIngredients.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"response\":[\n    {\n      \"category_id\":\"3\",\n      \"name\":\"Алкоголь\",\n      \"id_1c\":\"b80ffc81-0fc9-11e7-9ab4-ace01035e460\"\n    },\n    {\n      \"category_id\":\"2\",\n      \"name\":\"Мясо\",\n      \"id_1c\":null\n    },\n    {\n      \"category_id\":\"1\",\n      \"name\":\"Овощи\",\n      \"id_1c\":null\n    },\n    {\n      \"category_id\":\"4\",\n      \"name\":\"Фрукты\",\n      \"id_1c\":null\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Storage Locations JSON Response Example\nDESCRIPTION: Sample JSON response structure for storage locations, showing details such as storage ID, name, address, and deletion status\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/storage/getStorages.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"response\":[\n    {\n      \"storage_id\":\"1\",\n      \"storage_name\":\"Склад Кухня\",\n      \"storage_adress\":\"\",\n      \"delete\":\"0\"\n    },\n    {\n      \"storage_id\":\"2\",\n      \"storage_name\":\"Склад Бар\",\n      \"storage_adress\":\"\",\n      \"delete\":\"0\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: API Response JSON Structure\nDESCRIPTION: Example response JSON indicating successful storage ID update operation\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/storage/set1cStorageId.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{  \n  \"success\":1\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Response from spots.getSpotFiscalCompanies Endpoint\nDESCRIPTION: Example of the JSON response returned by the spots.getSpotFiscalCompanies endpoint. The response contains an array of location objects, each with spot details and associated fiscal companies including tax information.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/spots/getSpotFiscalCompanies.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"spot_id\": 1,\n    \"spot_name\": \"Кафе на полянке\",\n    \"fiscal_companies\": [\n      {\n        \"fiscal_company_id\": 1,\n        \"uuid\": \"test-uuid\",\n        \"inn\": \"001234567890\",\n        \"taxes\": [\n          {\n            \"tax_id\": 1,\n            \"tax_name\": \"Без налога\"\n          }\n        ]\n      }\n    ]\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Changing 1C Transaction IDs with PHP\nDESCRIPTION: Example of using the finance.set1cTransactionId endpoint to update transaction IDs in the 1C system. The request sends an array of transaction objects, each containing the internal transaction ID and the corresponding 1C system ID.\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/finance/set1cTransactionId.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/finance.set1cTransactionId'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$finance = [\n    'id' => [\n        [\n            'transaction_id' => 32,\n            'id_1c'   => 'b80ffc81-0fc9-11e7-9ab4-ace01035e460',\n        ],\n    ],\n];\n\n$data = sendRequest($url, 'post', $finance);\n```\n\n----------------------------------------\n\nTITLE: Ingredient Movements Report Response Structure\nDESCRIPTION: JSON response structure showing ingredient movement data including balances, costs, and quantities. Each ingredient entry contains start/end costs, quantities, and movement statistics.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/storage/getReportMovement.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\\n   \"response\":[\\n      {\\n         \"ingredient_id\":\"332\",\\n         \"ingredient_name\":\"Borjome\",\\n         \"cost_start\":13.63,\\n         \"cost_end\":13.63,\\n         \"start\":14,\\n         \"income\":0,\\n         \"write_offs\":0,\\n         \"end\":14\\n      },\\n      {\\n         \"ingredient_id\":\"260\",\\n         \"ingredient_name\":\"Sprite\",\\n         \"cost_start\":8.39,\\n         \"cost_end\":8.39,\\n         \"start\":2,\\n         \"income\":0,\\n         \"write_offs\":0,\\n         \"end\":2\\n      }\\n   ]\\n}\n```\n\n----------------------------------------\n\nTITLE: Interpreting API Response for Category Removal using JSON\nDESCRIPTION: This JSON snippet represents a successful response received upon the removal of an ingredient category using the Poster API. The 'success' parameter confirms the successful deletion of the specified category.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/menu/removeCategoryIngredients.md#2025-04-21_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{  \n  \"success\":\"successful delete category\"\n}\n```\n\n----------------------------------------\n\nTITLE: Example Response for Semi-Finished Product Creation\nDESCRIPTION: This JSON snippet represents the typical response received after successfully creating a semi-finished product using the 'menu.createPrepack' API. It indicates the ID of the created product.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/menu/createPrepack.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"response\":177\n}\n```\n\n----------------------------------------\n\nTITLE: Transaction Client Change API Response\nDESCRIPTION: Shows the expected JSON response structure when successfully changing a client in a transaction, with an error code indicating success\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/transactions/changeClient.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"response\":{\n    \"err_code\":0\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Manual Wastes API Response Format in JSON\nDESCRIPTION: JSON response example from the storage.getWastes endpoint. Shows the structure of returned data including waste IDs, amounts, user information, storage details, dates, reason codes, and deletion status for each waste record.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/storage/getWastes.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"response\": [\n    {\n      \"waste_id\": 1,\n      \"total_sum\": 2800,\n      \"total_sum_netto\": 2333,\n      \"user_id\": 1,\n      \"storage_id\": 1,\n      \"date\": \"2017-04-26 14:30:02\",\n      \"reason_id\": 0,\n      \"reason_name\": null,\n      \"delete\": 0\n    },\n    {\n      \"waste_id\": 2,\n      \"total_sum\": 791,\n      \"total_sum_netto\": 659,\n      \"user_id\": 1,\n      \"storage_id\": 1,\n      \"date\": \"2017-04-26 15:21:12\",\n      \"reason_id\": 1,\n      \"reason_name\": \"Spoiled\",\n      \"delete\": 1\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Employee List using PHP\nDESCRIPTION: This PHP snippet demonstrates how to make an HTTP GET request to the access.getEmployees endpoint. It constructs the URL with the required token parameter and sends the request using a sendRequest function.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/access/getEmployees.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/access.getEmployees'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$data = sendRequest($url);\n```\n\n----------------------------------------\n\nTITLE: Example response from storage.getSupplies API\nDESCRIPTION: This JSON snippet represents the expected response from the `storage.getSupplies` API call. The response contains an array of supply objects, each detailing supply information such as ID, storage, supplier, date, sums, and comments.\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/storage/getSupplies.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"response\":[\n    {\n      \"supply_id\":\"48\",\n      \"storage_id\":\"1\",\n      \"supplier_id\":\"1\",\n      \"date\":\"2017-11-17 08:09:33\",\n      \"supply_sum\":\"1800\",\n      \"supply_sum_netto\":\"1500\",\n      \"supply_comment\":\"\",\n      \"storage_name\":\"Склад Кухня\",\n      \"supplier_name\":\"Закупщик\",\n      \"delete\":\"1\",\n      \"account_id\":null\n    },\n    {\n      \"supply_id\":\"47\",\n      \"storage_id\":\"1\",\n      \"supplier_id\":\"1\",\n      \"date\":\"2017-05-18 09:11:00\",\n      \"supply_sum\":\"300000\",\n      \"supply_sum_netto\":\"250000\",\n      \"supply_comment\":\"\",\n      \"storage_name\":\"Склад Кухня\",\n      \"supplier_name\":\"Закупщик\",\n      \"delete\":\"0\",\n      \"account_id\":null\n    },\n    {\n      \"supply_id\":\"46\",\n      \"storage_id\":\"1\",\n      \"supplier_id\":\"1\",\n      \"date\":\"2017-05-18 09:07:00\",\n      \"supply_sum\":\"669882890\",\n      \"supply_sum_netto\":\"558235742\",\n      \"supply_comment\":\"\",\n      \"storage_name\":\"Склад Кухня\",\n      \"supplier_name\":\"Закупщик\",\n      \"delete\":\"0\",\n      \"account_id\":null\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Response Format from finance.getTaxes API\nDESCRIPTION: This JSON example shows the response structure from the finance.getTaxes API endpoint. The response contains an array of tax objects with details like tax_id, country code, name, value, type, and fiscal status.\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/finance/getTaxes.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{  \n  \"response\":[  \n    {  \n      \"tax_id\":3,\n      \"country\":\"UA\",\n      \"tax_name\":\"Налог с оборота\",\n      \"tax_value\":5,\n      \"type\":2,\n      \"fiscal\":1,\n      \"fiscal_program\":0,\n      \"fixed\":0,\n      \"delete\":0\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Example Response for Workshop Creation\nDESCRIPTION: This JSON snippet shows the expected response structure when creating a workshop using the Joinposter API. The `response` field contains the ID of the newly created workshop.\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/menu/createWorkshop.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"response\":5\n}\n```\n\n----------------------------------------\n\nTITLE: Waste Reasons - JSON Response Format\nDESCRIPTION: Example JSON response showing the structure of returned waste reasons data. Each reason contains an ID and name.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/storage/getWasteReasons.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\\n   \"response\":[\\n      {\\n         \"reason_id\":1,\\n         \"name\":\"Истек срок годности\"\\n      }\\n   ]\\n}\n```\n\n----------------------------------------\n\nTITLE: Order Product Change Response Structure\nDESCRIPTION: Example response object showing the structure of data returned when a product is updated in an order. Includes complete order details, modified product information, and callback status.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/pos/events/orderProductChange.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"order\":{\n    \"id\":1506511064579,\n    \"dateStart\":1506511064579,\n    \"dateClose\":0,\n    \"datePrint\":0,\n    \"status\":1,\n    \"userId\":3,\n    \"tableId\":108,\n    \"orderName\":25,\n    \"guestsCount\":2,\n    \"products\":{\n      \"0\":{\n        \"id\":4,\n        \"count\":1,\n        \"printedNum\":0,\n        \"productSum\":60,\n        \"modificationHash\":\"\",\n        \"taxId\":\"2\",\n        \"taxValue\":\"20\",\n        \"taxType\":\"2\",\n        \"taxFiscal\":1,\n        \"price\":60\n      }\n    },\n    \"subtotal\":60,\n    \"total\":60,\n    \"discount\":0,\n    \"clientId\":7,\n    \"payType\":\"0\",\n    \"payedSum\":0,\n    \"payedCard\":0,\n    \"payedCash\":0,\n    \"payedThirdParty\":0,\n    \"payedBonus\":0,\n    \"loyaltyAppId\":0,\n    \"parentId\":0,\n    \"tipIncluded\":0,\n    \"tipSum\":0,\n    \"comment\":\"\"\n  },\n  \"product\":{\n    \"id\":3,\n    \"count\":0\n  },\n  \"saveCallback\":true\n}\n```\n\n----------------------------------------\n\nTITLE: Payments Report Response Example (Monthly) in JSON\nDESCRIPTION: This JSON snippet shows an example of the response from the `dash.getPaymentsReport` API endpoint when retrieving monthly payments statistics. It contains a list of months with payment details for each month, including cash, card, certificate, bonus, and incust payments, as well as a total summary of all payments.\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/dash/getPaymentsReport.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"response\": {\n        \"days\": [\n            {\n                \"date\": \"2017-06\",\n                \"payed_cash_sum\": \"27286420\",\n                \"payed_card_sum\": \"1951853\",\n                \"payed_cert_in_sum\": \"0\",\n                \"payed_cert_out_sum\": \"0\",\n                \"payed_bonus_sum\": \"0\",\n                \"payed_incust_sum\": \"0\",\n                \"payed_sum_sum\": \"29234560\"\n            },\n            {\n                \"date\": \"2017-05\",\n                \"payed_cash_sum\": \"60273456\",\n                \"payed_card_sum\": \"6290658\",\n                \"payed_cert_in_sum\": \"0\",\n                \"payed_cert_out_sum\": \"0\",\n                \"payed_bonus_sum\": \"0\",\n                \"payed_incust_sum\": \"0\",\n                \"payed_sum_sum\": \"66564114\"\n            },\n            {\n                \"date\": \"2017-04\",\n                \"payed_cash_sum\": \"49090724\",\n                \"payed_card_sum\": \"4782295\",\n                \"payed_cert_in_sum\": \"0\",\n                \"payed_cert_out_sum\": \"0\",\n                \"payed_bonus_sum\": \"0\",\n                \"payed_incust_sum\": \"0\",\n                \"payed_sum_sum\": \"53873019\"\n            }\n        ],\n        \"total\": {\n            \"payed_cash_sum\": 136650600,\n            \"payed_card_sum\": 13024806,\n            \"payed_third_party_sum\": 0,\n            \"payed_cert_in_sum\": 0,\n            \"payed_cert_out_sum\": 0,\n            \"payed_bonus_sum\": 0,\n            \"payed_incust_sum\": 0,\n            \"payed_sum_sum\": 149671693\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Response for Online Order Creation in JSON\nDESCRIPTION: This JSON snippet shows the expected response from the `incomingOrders.createIncomingOrder` API method after successfully creating an online order. It includes details like the order ID, spot ID, status, client information, creation and update timestamps, and a list of products included in the order. The response provides confirmation and details about the created order.\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/incomingOrders/createIncomingOrder.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"response\":{\n    \"incoming_order_id\":2,\n    \"spot_id\":1,\n    \"status\":0,\n    \"client_id\":0,\n    \"first_name\":null,\n    \"last_name\":null,\n    \"phone\":null,\n    \"email\":null,\n    \"sex\":null,\n    \"birthday\":null,\n    \"address\":null,\n    \"comment\":null,\n    \"created_at\":\"2017-10-27 11:47:19\",\n    \"updated_at\":\"2017-10-27 11:47:19\",\n    \"transaction_id\":null,\n    \"fiscal_spreading\":0,\n    \"fiscal_method\":\"\",\n    \"products\":[\n      {\n        \"io_product_id\":2,\n        \"product_id\":169,\n        \"modificator_id\":null,\n        \"incoming_order_id\":2,\n        \"count\":1,\n        \"created_at\":\"2017-10-27 11:47:19\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sending API Request in PHP\nDESCRIPTION: This PHP code snippet demonstrates how to send a POST request to the API endpoint. It constructs the URL with a token parameter and sends an empty group array as the request body.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/template.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/<method>'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$group = [\n];\n\n$data = PosterAPI::sendRequest($url, 'post', $group);\n\n```\n\n----------------------------------------\n\nTITLE: clients.updateGroup Response Example\nDESCRIPTION: This JSON snippet shows an example response from the `clients.updateGroup` API endpoint. The `response` field contains the ID of the updated customer group.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/clients/updateGroup.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"response\":6\n}\n```\n\n----------------------------------------\n\nTITLE: Example JSON response from clients.addClientsAccumulations\nDESCRIPTION: This JSON snippet shows the expected response format from the clients.addClientsAccumulations API endpoint after a successful request. The response contains a single field, \"response\", which has a value of \"1\", indicating that the accumulation was successfully added.\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/clients/addClientsAccumulations.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"response\":\"1\"\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Response from access.createSpot API\nDESCRIPTION: This JSON snippet shows the expected response format from the access.createSpot API method. The response contains a single field 'response' with the ID of the newly created location.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/access/createSpot.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{  \n  \"response\":2\n}\n```\n\n----------------------------------------\n\nTITLE: Location Type API Response in JSON\nDESCRIPTION: This JSON snippet shows the expected response format from the settings.getCompanyType endpoint. The response contains a 'value' field indicating the location type, where 1 represents a cafe and 2 represents a store.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/settings/getCompanyType.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"response\":{\n    \"value\":\"1\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sending GET Request to JoinPoster API\nDESCRIPTION: This PHP code snippet demonstrates how to send a GET request to the JoinPoster API to retrieve ingredients. The request URL includes a token for authentication. The response is captured in the $data variable after calling the sendRequest function.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/menu/getIngredients.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/menu.getIngredients'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$data = sendRequest($url);\n\n```\n\n----------------------------------------\n\nTITLE: JSON Response Structure for Pack Data\nDESCRIPTION: This JSON snippet illustrates the structure of the response returned by the storage.getPack method. It includes details such as pack_id, name, unit, count, and type of the requested pack.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/storage/getPack.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"response\":{\n    \"pack_id\":\"5\",\n    \"name\":\"Пак молока\",\n    \"unit\":\"p\",\n    \"count\":\"20.0000\",\n    \"type\":\"1\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing Ingredient Details JSON Response\nDESCRIPTION: This JSON response example shows the structure of the data returned by the Poster API after querying ingredient details. It provides various properties of the ingredient like its name, category, unit, and other inventory-related information. Key fields include 'ingredient_name' for the ingredient's name, 'ingredient_id' as its identifier, and 'ingredient_left' indicating the remaining inventory.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/menu/getIngredient.md#2025-04-21_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{  \n  \"response\":{  \n    \"ingredient_id\":\"91\",\n    \"ingredient_name\":\"Jack Daniels\",\n    \"ingredient_barcode\": \"\",\n    \"category_id\":\"3\",\n    \"ingredient_left\":\"442.85000\",\n    \"limit_value\":\"0\",\n    \"time_notif\":\"0\",\n    \"ingredient_unit\":\"l\",\n    \"ingredient_weight\":0,\n    \"ingredients_losses_clear\":\"0\",\n    \"ingredients_losses_cook\":\"0\",\n    \"ingredients_losses_fry\":\"0\",\n    \"ingredients_losses_stew\":\"0\",\n    \"ingredients_losses_bake\":\"0\",\n    \"ingredients_type\":\"1\",\n    \"partial_write_off\":\"0\",\n    \"id_1c\":\"d70b49a7-0097-11e6-9c83-028037ec0200\",\n    \"delete\":\"0\",\n    \"hidden\":\"0\"\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response for Successful Transaction Removal\nDESCRIPTION: This JSON snippet represents the expected response from the `transactions.removeTransaction` API endpoint after successfully removing a transaction. The `err_code` parameter within the `response` object indicates the status of the operation; a value of 0 signifies success.\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/transactions/removeTransaction.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"response\":{\n    \"err_code\":0\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Category ID in 1C System via API (PHP)\nDESCRIPTION: This snippet demonstrates how to send a POST request to the JoinPoster API to update a product category ID in the 1C system. It constructs the request with necessary parameters and calls the 'sendRequest' function. The expected response structure indicates success.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/menu/set1cCategoryId.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/menu.set1cCategoryId'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$category = [\n    'id' => [\n        [\n            'category_id' => 32,\n            'id_1c'       => 'b80ffc81-0fc9-11e7-9ab4-ace01035e460',\n        ],\n    ],\n];\n\ndata = sendRequest($url, 'post', $category);\n\n```\n\n----------------------------------------\n\nTITLE: returnFiscal Event Response Structure\nDESCRIPTION: Example JSON response structure when a fiscal return event occurs. Contains detailed order information including payment details, products, and fiscal data.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/pos/events/returnFiscal.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"order\":{\n      \"id\":1544010298315,\n      \"dateStart\":1544010298315,\n      \"dateClose\":0,\n      \"datePrint\":1544010308709,\n      \"status\":2,\n      \"userId\":40,\n      \"tableId\":5,\n      \"orderName\":77629,\n      \"guestsCount\":3,\n      \"products\":{\n         \"0\":{\n            \"id\":137,\n            \"count\":1,\n            \"price\":1180,\n            \"printedNum\":0,\n            \"nodiscount\":1,\n            \"taxId\":1,\n            \"taxValue\":0,\n            \"taxType\":4,\n            \"taxFiscal\":true,\n            \"roundSum\":0\n         }\n      },\n      \"subtotal\":1180,\n      \"total\":1180,\n      \"discount\":0,\n      \"clientId\":0,\n      \"payType\":\"mix\",\n      \"payedSum\":0,\n      \"payedCard\":0,\n      \"payedCash\":1180,\n      \"payedBonus\":0,\n      \"approvedBonus\":0,\n      \"platformDiscount\":0,\n      \"loyaltyAppId\":0,\n      \"parentId\":0,\n      \"tipIncluded\":0,\n      \"tipSum\":0,\n      \"roundSum\":0,\n      \"printFiscal\":1,\n      \"comment\":\"\"\n   },\n   \"userId\":40,\n   \"products\":[\n      {\n         \"product_id\":137,\n         \"modification_id\":0,\n         \"promotion_id\":0,\n         \"count\":1\n      }\n   ]\n}\n```\n\n----------------------------------------\n\nTITLE: Interpreting JSON Response for Customer Group Properties\nDESCRIPTION: This JSON snippet represents the expected structure of the response from the JoinPoster API, which provides the details of the customer group. Key fields include the group's ID, name, discount rate, and more. This response does not list dependencies directly but requires initial knowledge of JSON structure and parsing for further use in applications.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/clients/getGroup.md#2025-04-21_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{  \n  \"response\":{  \n    \"client_groups_id\":\"2\",\n    \"client_groups_name\":\"\\u0421\\u043a\\u0438\\u0434\\u043a\\u0430 \\u0412\\u044b\\u0445\\u043e\\u0434\\u043d\\u043e\\u0439\",\n    \"client_groups_discount\":\"15\",\n    \"loyalty_type\":\"1\",\n    \"birthday_bonus\":\"0\",\n    \"count_groups_clients\":\"21\",\n    \"delete\":\"0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example response from the finance.createCategory API\nDESCRIPTION: This JSON snippet represents the expected response from the finance.createCategory API after successfully creating a new financial category. The 'response' field contains the ID of the newly created category, which can be used to reference it in subsequent API calls.\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/finance/createCategory.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"response\":6\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with NPM\nDESCRIPTION: Commands to install project dependencies and start the development server\nSOURCE: https://github.com/joinposter/docs/blob/master/en/pos/start.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Successful response format for tariff change\nDESCRIPTION: This JSON snippet shows the expected response format when the tariff change request is successful. The `response` parameter indicates the status of the request, with `true` signifying a successful operation. This response confirms that the tariff plan has been updated successfully.\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/application/changeTariff.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"response\":true\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Response for Account Language Request\nDESCRIPTION: This JSON example shows the response format from the settings.getLanguage endpoint. The response returns the account language code in the ISO 639 format inside a nested object.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/settings/getLanguage.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"response\":{\n    \"value\":\"ru\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Transfer Content with PHP\nDESCRIPTION: Example of making a GET request to the storage.getMove endpoint to retrieve details of a specific transfer by ID. The request includes authentication token and move_id parameters.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/storage/getMove.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/storage.getMove'\n . '?token=687409:4164553abf6a031302898da7800b59fb'\n . '&move_id=2';\n\n$data = sendRequest($url);\n\n```\n\n----------------------------------------\n\nTITLE: Manufacture Write-offs API Response Example\nDESCRIPTION: JSON response structure demonstrating the detailed information returned by the storage.getManufacturesWriteOffs API endpoint, including write-off details, products, and metadata\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/storage/getManufacturesWriteOffs.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"response\":{\n    \"count\":11,\n    \"page\":{\n      \"per_page\":10,\n      \"page\":2,\n      \"count\":1\n    },\n    \"data\":[\n      {\n        \"manufacture_id\":15,\n        \"storage_id\":2,\n        \"date\":\"2017-11-30 15:00:00\",\n        \"products\":[\n          {\n            \"product_id\":105,\n            \"type\":2,\n            \"num\":10,\n            \"sum\":123.45,\n            \"sum_netto\":102.88,\n            \"is_fiscal\":0,\n            \"write_offs\":[\n              {\n                \"ingredient_id\":165,\n                \"type\":1,\n                \"weight\":123.45\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: API Error Response JSON\nDESCRIPTION: Example of an API error response illustrating the standard error object structure with error code and message\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/start/request.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"error\":{\n      \"code\":11,\n      \"message\":\"Bad access token\"\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response for clients.changeClientBonus\nDESCRIPTION: This JSON snippet shows the expected response from the Joinposter API endpoint `clients.changeClientBonus` after successfully modifying a client's bonus points. The `response` field contains the updated bonus point balance for the client.\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/clients/changeClientBonus.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"response\":30\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Establishment IDs in 1C using JoinPoster API - PHP\nDESCRIPTION: This PHP snippet demonstrates how to construct a POST request to update establishment IDs in the 1C system via the JoinPoster API. It sets the URL and token, prepares the data structure for the request, and sends it using a function called sendRequest. The expected response is a JSON object containing a success status.\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/spots/set1cSpotsId.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/spots.set1cSpotsId'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$spots = [\n    'id' => [\n        [\n            'spot_id' => 32,\n            'id_1c'   => 'b80ffc81-0fc9-11e7-9ab4-ace01035e460',\n        ],\n    ],\n];\n\ndata = sendRequest($url, 'post', $spots);\n\n```\n\n----------------------------------------\n\nTITLE: JSON Response for Online Order Details\nDESCRIPTION: This JSON snippet shows the expected response format when querying for online order details using the Joinposter API. It includes information such as the order ID, spot ID, status, customer details (name, phone, email), and a list of products in the order. The `response` object contains all relevant information about the online order.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/incomingOrders/getIncomingOrder.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"response\":{  \n    \"incoming_order_id\":1,\n    \"spot_id\":1,\n    \"status\":1,\n    \"client_id\":0,\n    \"first_name\":\"Антон\",\n    \"last_name\":\"Талышкин\",\n    \"phone\":\"79630313844\",\n    \"email\":\"contact@joinposter.com\",\n    \"sex\":1,\n    \"birthday\":\"1986-11-23\",\n    \"address\":\"ул. Малышева, 3\",\n    \"comment\":\"\",\n    \"created_at\":\"2017-10-26 14:58:02\",\n    \"updated_at\":\"2017-10-26 15:25:17\",\n    \"transaction_id\":1949,\n    \"products\":[  \n      {  \n        \"io_product_id\":1,\n        \"product_id\":113,\n        \"modificator_id\":null,\n        \"incoming_order_id\":1,\n        \"count\":1,\n        \"created_at\":\"2017-10-26 14:58:02\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response Structure from JoinPoster API\nDESCRIPTION: This snippet shows an example of the JSON response returned from the JoinPoster API after making a GET request for the tablet register list. The response contains an array of tablet objects, each with identifiers and metadata about the tablets.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/access/getTablets.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"response\":[\n    {\n      \"tablet_id\":\"1\",\n      \"tablet_name\":\"Main in Madrid\",\n      \"spot_id\":\"1\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Making GET Request for Transaction Write-offs in PHP\nDESCRIPTION: Example of making an HTTP GET request to retrieve transaction write-offs data. Uses a token for authentication and requires a transaction_id parameter.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/dash/getTransactionWriteOffs.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/dash.getTransactionWriteoffs'\n . '?token=687409:4164553abf6a031302898da7800b59fb'\n . '&transaction_id=388678';\n\n$data = sendRequest($url);\n```\n\n----------------------------------------\n\nTITLE: Successful Response Format for settings.changeSettings\nDESCRIPTION: Example of a successful JSON response from the settings.changeSettings endpoint. The response contains a simple boolean indicating whether the settings were successfully updated.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/settings/changeSettings.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{  \n  \"response\":true\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Register Shift Transaction with finance.removeCashShiftTransaction in PHP\nDESCRIPTION: This PHP code snippet demonstrates how to remove a register shift transaction using the `finance.removeCashShiftTransaction` API.  It requires a valid API token and the `cash_shift_transaction_id` of the transaction to be removed. The code sends a POST request to the API endpoint with the transaction ID.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/finance/removeCashShiftTransaction.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/finance.removeCashShiftTransaction'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$cash_shift_transaction = [\n    'cash_shift_transaction_id' => 611,\n];\n\n$data = sendRequest($url, 'post', $cash_shift_transaction);\n?>\n```\n\n----------------------------------------\n\nTITLE: Poster Billing Notification Response in JSON\nDESCRIPTION: This is the JSON response from a successful billing notification. The 'accept' status confirms that the payment notification was processed successfully by the Poster system.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/payments/addTransactionPayment.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"response\":{\n    \"status\":\"accept\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing Poster API Response in JSON\nDESCRIPTION: This JSON snippet represents the structure of the response received from the finance.updateAccount API after successfully updating an account. The 'response' key holds the ID of the updated account. This response should be parsed and interpreted to ensure the account update was successful.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/finance/updateAccount.md#2025-04-21_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"response\":4\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Manufacture using PHP API Call\nDESCRIPTION: This snippet demonstrates how to call the storage.deleteManufacture endpoint with PHP to remove a manufacture. It requires sending the manufacture_id parameter via POST request to identify which manufacture to delete.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/storage/deleteManufacture.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/storage.deleteManufacture'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$delete = [\n    'manufacture_id' => 1\n];\n\n$data = sendRequest($url, 'post', $delete);\n```\n\n----------------------------------------\n\nTITLE: Storage Inventory History JSON Response\nDESCRIPTION: Example JSON response showing inventory history records. Each record includes inventory ID, dates, status and financial calculations in kopecks.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/storage/getStorageInventories.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"response\":[\n    {\n      \"inventory_id\":\"3\",\n      \"storage_id\":\"1\",\n      \"date_start\":\"2015-08-12 19:07:08\",\n      \"date_end\":\"2017-05-18 09:10:31\",\n      \"date_set\":\"0000-00-00 00:00:00\",\n      \"date_inventory\":\"2017-05-18 09:10:31\",\n      \"sum\":\"871875648398\",\n      \"sum_netto\":\"726563040332\",\n      \"inventory_status\":\"1\"\n    },\n    {\n      \"inventory_id\":\"2\",\n      \"storage_id\":\"1\",\n      \"date_start\":\"2015-02-05 13:10:26\",\n      \"date_end\":\"2015-08-12 19:07:08\",\n      \"date_set\":\"0000-00-00 00:00:00\",\n      \"date_inventory\":\"0000-00-00 00:00:00\",\n      \"sum\":\"104384\",\n      \"sum_netto\":\"86987\",\n      \"inventory_status\":\"1\"\n    },\n    {\n      \"inventory_id\":\"1\",\n      \"storage_id\":\"1\",\n      \"date_start\":\"2013-08-09 16:30:13\",\n      \"date_end\":\"2015-02-05 13:10:26\",\n      \"date_set\":\"0000-00-00 00:00:00\",\n      \"date_inventory\":\"0000-00-00 00:00:00\",\n      \"sum\":\"-21236\",\n      \"sum_netto\":\"-17697\",\n      \"inventory_status\":\"1\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: finance.updateCategory API Response Example\nDESCRIPTION: This JSON snippet shows an example response from the Joinposter API's `finance.updateCategory` method after successfully updating a financial category. The `response` field contains the ID of the updated category.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/finance/updateCategory.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"response\":13\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Payments Report via API using PHP\nDESCRIPTION: This code snippet demonstrates how to query the Joinposter API's `dash.getPaymentsReport` endpoint to retrieve payments statistics using PHP. It constructs the API URL with the required parameters, including the API token, start date, and end date. The `sendRequest` function (not defined in the snippet) is assumed to handle sending the request and returning the response data.\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/dash/getPaymentsReport.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/dash.getPaymentsReport'\n . '?token=687409:4164553abf6a031302898da7800b59fb'\n . '&date_from=20170501'\n . '&date_to=20170531';\n\n$data = sendRequest($url);\n?>\n```\n\n----------------------------------------\n\nTITLE: Removing Customer Group using PHP\nDESCRIPTION: Example of making a POST request to remove a customer group using PHP. The request requires an authentication token and a group_id parameter. The endpoint returns a boolean response indicating success.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/clients/removeGroup.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/clients.removeGroup?'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$group = [\n  'group_id' => 6,\n];\n\n$data = sendRequest($url, 'post', $group);\n```\n\n----------------------------------------\n\nTITLE: JoinPoster Transaction API Response Example\nDESCRIPTION: JSON response structure illustrating the detailed transaction data returned by the getTransactions method, including transaction details, payment information, and product list\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/transactions/getTransactions.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"response\":{\n    \"count\":41,\n    \"page\":{\n      \"per_page\":10,\n      \"page\":5,\n      \"count\":1\n    },\n    \"data\":[\n      {\n        \"transaction_id\":25221,\n        \"table_id\":1,\n        \"spot_id\":1,\n        \"client_id\":68,\n        \"sum\":360,\n        \"payed_sum\":0,\n        \"products\":[\n          {\n            \"product_id\":469,\n            \"modification_id\":0,\n            \"type\":2,\n            \"num\":2,\n            \"product_sum\":360\n          }\n        ]\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Workshop List Response JSON\nDESCRIPTION: Example JSON response structure showing workshop details including station ID, name, and deletion status\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/menu/getWorkshops.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"response\":[\n    {\n      \"workshop_id\":\"1\",\n      \"workshop_name\":\"Бар\",\n      \"delete\":\"0\"\n    },\n    {\n      \"workshop_id\":\"2\",\n      \"workshop_name\":\"Кухня\",\n      \"delete\":\"0\"\n    },\n    {\n      \"workshop_id\":\"3\",\n      \"workshop_name\":\"Кондитерская\",\n      \"delete\":\"0\"\n    },\n    {\n      \"workshop_id\":\"4\",\n      \"workshop_name\":\"Кальян\",\n      \"delete\":\"0\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: PHP: Fetching Transaction Write-Offs API Request\nDESCRIPTION: Demonstrates how to construct an API request to retrieve transaction write-offs with date filtering and pagination parameters\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/transactions/getTransactionsWriteOffs.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/transactions.getTransactionsWriteOffs'\n . '?token=687409:4164553abf6a031302898da7800b59fb'\n . '&date_from=2017-11-30'\n . '&date_to=2017-11-30'\n . '&per_page=10'\n . '&page=5';\n\n$data = sendRequest($url);\n```\n\n----------------------------------------\n\nTITLE: Closing Order Transaction - JSON Response Example\nDESCRIPTION: Example of successful response from the transactions.closeTransaction endpoint. Shows the response structure with err_code indicating success.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/transactions/closeTransaction.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{  \n  \"response\":{  \n    \"err_code\":0\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Successful payment response example\nDESCRIPTION: This JSON snippet illustrates the expected response from the Poster API when a payment notification is successfully processed. The response contains a 'response' object with a 'status' field set to 'accept', indicating successful acceptance of the payment notification.\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/payments/addTransactionPayment.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"response\":{\n    \"status\":\"accept\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: finance.openCashShift Response Example in JSON\nDESCRIPTION: This JSON snippet shows an example response from the `finance.openCashShift` method after successfully opening a register shift. The response includes a `cash_shift_id` which represents the unique identifier of the newly opened register shift.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/finance/openCashShift.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"response\":{\n    \"cash_shift_id\":333\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Waste Reasons - PHP Request Example\nDESCRIPTION: PHP code example showing how to make an HTTP GET request to retrieve waste reasons. Uses an authentication token for authorization.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/storage/getWasteReasons.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?\\n$url = 'https://joinposter.com/api/storage.getWasteReasons'\\n  . '?token=687409:4164553abf6a031302898da7800b59fb';\\n\\n$data = sendRequest($url);\n```\n\n----------------------------------------\n\nTITLE: JSON Response Structure for menu.updateWorkshop\nDESCRIPTION: JSON response example for the menu.updateWorkshop API call. The response contains a 'response' field with the ID of the updated station.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/menu/updateWorkshop.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{  \n  \"response\":5\n}\n```\n\n----------------------------------------\n\nTITLE: API Response for Employee Creation\nDESCRIPTION: Example JSON response when successfully creating an employee, returning the newly generated employee ID\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/access/createEmployee.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"response\":15\n}\n```\n\n----------------------------------------\n\nTITLE: Response Example (JSON)\nDESCRIPTION: This JSON snippet illustrates the expected response from the `menu.recoverCategory` API endpoint after a successful recovery. The `response` field being `true` indicates that the category was successfully recovered.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/menu/recoverCategory.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"response\":true\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Workshop List in PHP\nDESCRIPTION: PHP code snippet demonstrating how to make an API request to retrieve menu workshops using the Joinposter API\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/menu/getWorkshops.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/menu.getWorkshops'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$data = sendRequest($url);\n```\n\n----------------------------------------\n\nTITLE: Supply Ingredients Response Format in JSON\nDESCRIPTION: Example JSON response from the storage.getSupplyIngredients endpoint. The response contains an array of ingredients with details including ID, quantity, cost, name, unit of measurement, and tax information.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/storage/getSupplyIngredients.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"response\":[\n    {\n      \"ingredient_id\":\"66\",\n      \"supply_ingredient_num\":\"3.00000\",\n      \"supply_ingredient_sum\":\"15000\",\n      \"supply_ingredient_sum_netto\":\"12500\",\n      \"ingredient_name\":\"Шен Да Бай Ча-Дзень Гу\",\n      \"ingredient_unit\":\"kg\",\n      \"tax_id\": 0\n    },\n    {\n      \"ingredient_id\":\"68\",\n      \"supply_ingredient_num\":\"2.50000\",\n      \"supply_ingredient_sum\":\"17500\",\n      \"supply_ingredient_sum_netto\":\"14583\",\n      \"ingredient_name\":\"Шен Мен Ку\",\n      \"ingredient_unit\":\"kg\",\n      \"tax_id\": 0\n    },\n    {\n      \"ingredient_id\":\"67\",\n      \"supply_ingredient_num\":\"130000.00000\",\n      \"supply_ingredient_sum\":\"650000000\",\n      \"supply_ingredient_sum_netto\":\"541666667\",\n      \"ingredient_name\":\"Шен с горы У Лянь Шань-Дзень Гу\",\n      \"ingredient_unit\":\"kg\",\n      \"tax_id\": 0\n    },\n    {\n      \"ingredient_id\":\"69\",\n      \"supply_ingredient_num\":\"1400.00000\",\n      \"supply_ingredient_sum\":\"16100000\",\n      \"supply_ingredient_sum_netto\":\"13416667\",\n      \"ingredient_name\":\"Шу Пуэр 20 лет\",\n      \"ingredient_unit\":\"p\",\n      \"tax_id\": 0\n    },\n    {\n      \"ingredient_id\":\"76\",\n      \"supply_ingredient_num\":\"30.00000\",\n      \"supply_ingredient_sum\":\"390\",\n      \"supply_ingredient_sum_netto\":\"325\",\n      \"ingredient_name\":\"Яйца куринные\",\n      \"ingredient_unit\":\"p\",\n      \"tax_id\": 0\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Response from Product Price Update\nDESCRIPTION: Sample JSON response from the menu.updateProductPrice API method. The success parameter with value 1 indicates the operation was successful.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/menu/updateProductPrice.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{  \n  \"success\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: Example Response for Online Order with Promotion in JSON\nDESCRIPTION: This JSON snippet illustrates the response structure when an online order is created with an applied promotion through the Poster API. It provides details such as the order ID, type, spot ID, status, client information, creation and update timestamps, and includes a 'promotion' field containing the applied promotion details. The 'products' array shows the items included in the order.\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/incomingOrders/createIncomingOrder.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"response\":{\n    \"incoming_order_id\":\"106\",\n    \"type\":\"1\",\n    \"spot_id\":\"1\",\n    \"status\":0,\n    \"client_id\":0,\n    \"first_name\":null,\n    \"last_name\":null,\n    \"phone\":null,\n    \"email\":null,\n    \"sex\":null,\n    \"birthday\":null,\n    \"address\":null,\n    \"comment\":null,\n    \"created_at\":\"2017-12-06 18:45:06\",\n    \"updated_at\":\"2017-12-06 18:45:06\",\n    \"transaction_id\":null,\n    \"fiscal_spreading\":\"0\",\n    \"fiscal_method\":\"\",\n    \"promotion\":\"[{\\\"id\\\":1,\\\"involved_products\\\":[{\\\"id\\\":139,\\\"count\\\":1}],\\\"result_products\\\":[{\\\"id\\\":161}]}]\",\n    \"products\":[\n      {\n        \"io_product_id\":\"194\",\n        \"product_id\":\"139\",\n        \"modificator_id\":null,\n        \"incoming_order_id\":\"106\",\n        \"count\":\"1.00000\",\n        \"created_at\":\"2017-12-06 18:45:06\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Category Sales API Response Format in JSON\nDESCRIPTION: This JSON snippet illustrates the structure of the response from the dash.getCategoriesSales endpoint. It includes an array of category sales data, with details such as revenue, profit, count, and category information.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/dash/getCategoriesSales.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"response\":[\n    {\n      \"revenue\":\"38568300\",\n      \"profit\":\"36307114\",\n      \"profit_netto\":\"30255928\",\n      \"count\":\"1173\",\n      \"category_name\":\"Вторые блюда\",\n      \"category_id\":\"33\"\n    },\n    {\n      \"revenue\":\"36970440\",\n      \"profit\":\"21885184\",\n      \"profit_netto\":\"18237653\",\n      \"count\":\"863\",\n      \"category_name\":\"Главный экран\",\n      \"category_id\":0\n    },\n    {\n      \"revenue\":\"34474000\",\n      \"profit\":\"31377831\",\n      \"profit_netto\":\"26148193\",\n      \"count\":\"830\",\n      \"category_name\":\"Салаты\",\n      \"category_id\":\"31\"\n    },\n    {\n      \"revenue\":\"33876200\",\n      \"profit\":\"31379225\",\n      \"profit_netto\":\"26149354\",\n      \"count\":\"905\",\n      \"category_name\":\"Торты\",\n      \"category_id\":\"37\"\n    },\n    {\n      \"revenue\":\"22781920\",\n      \"profit\":\"18568329\",\n      \"profit_netto\":\"15473608\",\n      \"count\":\"1173\",\n      \"category_name\":\"Кофе\",\n      \"category_id\":\"10\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response from franchise.getSpots\nDESCRIPTION: This JSON snippet shows the structure of the response returned by the franchise.getSpots endpoint. It includes a nested object structure with franchisee names as keys and arrays of spot information for each franchisee.\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/franchise/getSpots.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{  \n   \"response\":{  \n      \"demo-franchisee\":[  \n         {  \n            \"spot_id\":1,\n            \"name\":\"Демо франчайзи\",\n            \"address\":\"\"\n         },\n         {  \n            \"spot_id\":2,\n            \"name\":\"Демо франчайзи2\",\n            \"address\":\"\"\n         }\n      ]\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Response JSON for printFiscal Event\nDESCRIPTION: This JSON object represents the response received when the 'printFiscal' event is triggered. It includes detailed information about the order, user, and printed fiscal products.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/pos/events/printFiscal.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"order\":{\n      \"id\":1544010298315,\n      \"dateStart\":1544010298315,\n      \"dateClose\":0,\n      \"datePrint\":1544010308709,\n      \"status\":2,\n      \"userId\":40,\n      \"tableId\":5,\n      \"orderName\":77629,\n      \"guestsCount\":3,\n      \"products\":{\n         \"0\":{\n            \"id\":137,\n            \"count\":1,\n            \"price\":1180,\n            \"printedNum\":0,\n            \"nodiscount\":1,\n            \"taxId\":1,\n            \"taxValue\":0,\n            \"taxType\":4,\n            \"taxFiscal\":true,\n            \"roundSum\":0\n         }\n      },\n      \"subtotal\":1180,\n      \"total\":1180,\n      \"discount\":0,\n      \"clientId\":0,\n      \"payType\":\"mix\",\n      \"payedSum\":0,\n      \"payedCard\":0,\n      \"payedCash\":1180,\n      \"payedBonus\":0,\n      \"approvedBonus\":0,\n      \"platformDiscount\":0,\n      \"loyaltyAppId\":0,\n      \"parentId\":0,\n      \"tipIncluded\":0,\n      \"tipSum\":0,\n      \"roundSum\":0,\n      \"printFiscal\":1,\n      \"comment\":\"\"\n   },\n   \"userId\":40,\n   \"products\":[\n      {\n         \"product_id\":137,\n         \"modification_id\":0,\n         \"promotion_id\":0,\n         \"count\":1\n      }\n   ]\n}\n```\n\n----------------------------------------\n\nTITLE: Sending GET Request for All Storages in PHP\nDESCRIPTION: This PHP snippet demonstrates how to send a GET request to the storage.getStorages API endpoint. It constructs the URL with the required token parameter and uses a sendRequest function to make the API call.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/storage/getStorages.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/storage.getStorages'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$data = sendRequest($url);\n```\n\n----------------------------------------\n\nTITLE: JSON Response Structure for All Storages\nDESCRIPTION: This JSON snippet shows the structure of the response returned by the storage.getStorages API method. It contains an array of storage objects, each with properties such as storage_id, storage_name, storage_adress, and delete status.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/storage/getStorages.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"response\":[\n    {\n      \"storage_id\":\"1\",\n      \"storage_name\":\"Склад Кухня\",\n      \"storage_adress\":\"\",\n      \"delete\":\"0\"\n    },\n    {\n      \"storage_id\":\"2\",\n      \"storage_name\":\"Склад Бар\",\n      \"storage_adress\":\"\",\n      \"delete\":\"0\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Register Update API Response Format\nDESCRIPTION: Example JSON response from the access.updateTablet endpoint showing the ID of the updated register.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/access/updateTablet.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{  \n  \"response\":2\n}\n```\n\n----------------------------------------\n\nTITLE: Making a POST Request to Remove Ingredient Category using PHP\nDESCRIPTION: This PHP snippet demonstrates how to make a POST request to the Poster API to remove an ingredient category. The necessary parameters such as 'category_id' and 'with_ingredients' need to be included in the request payload. The function 'sendRequest' initiates the POST request to the provided API URL.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/menu/removeCategoryIngredients.md#2025-04-21_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/menu.removeCategoryIngredients'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$category_ingredients = [\n    'category_id'      => 2,\n    'with_ingredients' => 1,\n];\n\n$data = sendRequest($url, 'post', $category_ingredients);\n\n```\n\n----------------------------------------\n\nTITLE: Response Format for Barcode Scanning in JSON\nDESCRIPTION: This snippet shows the expected JSON response format from the scanBarcode method. The response contains a 'barcode' property with the scanned barcode or QR code value as a string.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/pos/interfaces/interface-scanBarcode.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"barcode\":\"my barcode string\"\n}\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response Format for Reservations\nDESCRIPTION: Sample JSON response showing the structure of reservation data including customer details, reservation status, timestamps, and booking information.\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/incomingOrders/getOwnReservations.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"response\":[\n      {\n         \"incoming_order_id\":\"3\",\n         \"spot_id\":\"1\",\n         \"status\":0,\n         \"client_id\":4985,\n         \"first_name\":\"Степан\",\n         \"last_name\":\"Созонов\",\n         \"phone\":\"380912152764\",\n         \"email\":null,\n         \"sex\":\"2\",\n         \"birthday\":\"1996-08-26\",\n         \"address\":null,\n         \"comment\":null,\n         \"created_at\":\"2018-03-22 16:50:18\",\n         \"updated_at\":\"2018-03-22 16:50:18\",\n         \"transaction_id\":null,\n         \"guests_count\":\"1\",\n         \"duration\":\"2000\",\n         \"date_reservation\":\"2018-03-22 18:20:00\"\n      },\n      {\n         \"incoming_order_id\":\"4\",\n         \"spot_id\":\"1\",\n         \"status\":1,\n         \"client_id\":4985,\n         \"first_name\":\"Владимир\",\n         \"last_name\":\"Иванченко\",\n         \"phone\":\"380684111264\",\n         \"email\":\"vlm.iva@gmail.com\",\n         \"sex\":\"2\",\n         \"birthday\":\"1996-08-26\",\n         \"address\":\"московская 9\",\n         \"comment\":\"Подготовить вазу для цветов\",\n         \"created_at\":\"2018-03-22 17:02:41\",\n         \"updated_at\":\"2018-03-22 17:02:52\",\n         \"transaction_id\":\"428929\",\n         \"guests_count\":\"1\",\n         \"duration\":\"2000\",\n         \"date_reservation\":\"2018-03-22 18:20:00\"\n      }\n   ]\n}\n```\n\n----------------------------------------\n\nTITLE: Waste Creation API Response Format\nDESCRIPTION: Example JSON response from the waste creation endpoint. Returns a success status and the ID of the newly created waste record.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/storage/createWriteOff.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"success\":1,\n  \"response\":6\n}\n```\n\n----------------------------------------\n\nTITLE: Response for Creating Financial Category in JSON\nDESCRIPTION: The JSON snippet shows an example response from the Poster API after successfully creating a financial category. The response contains the newly created category's ID.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/finance/createCategory.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"response\":6\n}\n```\n\n----------------------------------------\n\nTITLE: Order Creation Response Format\nDESCRIPTION: JSON response structure returned after successful order creation. Contains transaction_id and transaction_tablet_id in the response object.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/transactions/createTransaction.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{  \n  \"response\":{  \n    \"transaction_id\":1950,\n    \"transaction_tablet_id\":1508850241000\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: clients.removeGroup API Response Example\nDESCRIPTION: This JSON snippet shows the expected response from the clients.removeGroup API after successfully deleting a client group. The response contains a single field, 'response', which is set to true indicating successful deletion.\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/clients/removeGroup.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"response\":true\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Response for transactions.removeTransactionProduct API\nDESCRIPTION: This JSON snippet shows the expected response format when successfully removing a product from an order using the transactions.removeTransactionProduct API. The response includes an err_code of 0 indicating success.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/transactions/removeTransactionProduct.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{  \n  \"response\":{  \n    \"err_code\":0\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Requesting Table List with PHP\nDESCRIPTION: Example of making an HTTP GET request to retrieve table information. Shows how to construct the URL with query parameters including token, spot_id, hall_id, and without_deleted flag.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/spots/getTableHallTables.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/spots.getTableHallTables'\n . '?token=687409:4164553abf6a031302898da7800b59fb'\n . '&spot_id=1'\n . '&hall_id=3'\n . '&without_deleted=1';\n\n$data = sendRequest($url);\n```\n\n----------------------------------------\n\nTITLE: Reservation Properties Response Example (JSON)\nDESCRIPTION: This JSON snippet shows the structure of the response returned by the `incomingOrders.getReservation` endpoint. The response contains details about the reservation, such as ID, spot ID, status, client information, reservation dates, and other relevant data.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/incomingOrders/getReservation.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"response\":{\n      \"incoming_order_id\":\"3\",\n      \"spot_id\":\"1\",\n      \"status\":0,\n      \"client_id\":4985,\n      \"first_name\":\"Степан\",\n      \"last_name\":\"Созонов\",\n      \"phone\":\"380912152764\",\n      \"email\":null,\n      \"sex\":\"2\",\n      \"birthday\":\"1996-08-26\",\n      \"address\":\"московская 9\",\n      \"comment\":\"Подготовить вазу для цветов\",\n      \"created_at\":\"2018-03-22 16:50:18\",\n      \"updated_at\":\"2018-03-22 16:50:18\",\n      \"transaction_id\":null,\n      \"guests_count\":\"1\",\n      \"duration\":\"2000\",\n      \"date_reservation\":\"2018-03-22 18:20:00\"\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Successful Response from menu.removeWorkshop API\nDESCRIPTION: This JSON snippet shows the expected response when a station is successfully removed using the `menu.removeWorkshop` API. The `response` field is set to `true` to indicate success.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/menu/removeWorkshop.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"response\":true\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Product Object in JSON\nDESCRIPTION: Demonstrates the complete structure of a product object with various properties like ID, status flags, pricing, and tax details\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/pos/types/product.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"id\":162,\n   \"delete\":0,\n   \"hidden\":0,\n   \"fiscal\":0,\n   \"fiscalProgram\":0,\n   \"nodiscount\":0,\n   \"parent\":0,\n   \"sortOrder\":0,\n   \"weightFlag\":0,\n   \"workshop\":2,\n   \"price\":10.5,\n   \"cookingTime\":0,\n   \"barcode\":\"\",\n   \"picture\":\"\",\n   \"color\":\"white\",\n   \"taxType\":0,\n   \"taxValue\":0,\n   \"taxId\":0,\n   \"taxName\":\"\",\n   \"extras\":{\n\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Saving Auth Token in Global Settings using PHP\nDESCRIPTION: Example of saving an authentication token in the global settings entity using the application.setEntityExtras endpoint. Demonstrates how to save data without an entity_id for global settings.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/application/setEntityExtras.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/application.setEntityExtras'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$extras = [\n    \"entity_type\"   => \"settings\",\n    \"extras\"        => [\n        \"token\" => \"lva23gds1793skd0123apsod10230wqoe0oe01\"\n    ]\n];\n\n$data = sendRequest($url, 'post', $extras);\n\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"response\":true\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Product to Order - JSON Response Example\nDESCRIPTION: Example of the JSON response returned after successfully adding a product to an order. The response includes the transaction_product ID of the newly added product.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/transactions/addTransactionProduct.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{  \n  \"response\":{  \n    \"transaction_product\":10990\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Product without Modifications - JSON Response\nDESCRIPTION: This JSON object is an example response from creating a product without modifications using Poster API. The 'response' key indicates the ID of the created product.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/menu/createProduct.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{  \n  \"response\":60\n}\n\n```\n\n----------------------------------------\n\nTITLE: Storage Leftovers API Response Example\nDESCRIPTION: JSON response structure showing detailed inventory leftover information for ingredients including ID, name, quantity, and cost details\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/storage/getStorageLeftovers.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"response\":[\n    {\n      \"ingredient_id\":\"39\",\n      \"ingredient_name\":\"Яблоки\",\n      \"ingredient_left\":\"3143.00000\",\n      \"limit_value\":\"0\",\n      \"ingredient_unit\":\"p\",\n      \"ingredients_type\":\"2\",\n      \"storage_ingredient_sum\":\"4591923\",\n      \"storage_ingredient_sum_netto\":\"3826603\",\n      \"prime_cost\":1461,\n      \"prime_cost_netto\":1218,\n      \"hidden\":\"0\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Location Sales API Response Format\nDESCRIPTION: Example JSON response from the dash.getSpotsSales endpoint showing sales metrics including revenue, profit, client count, and average invoice amount.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/dash/getSpotsSales.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"response\":{\n    \"revenue\":536723.37,\n    \"profit\":448025.64,\n    \"profit_netto\":373354.7,\n    \"clients\":423,\n    \"middle_invoice\":1268.8495744681\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Category Removal Response Example\nDESCRIPTION: JSON response indicating successful removal of a product category, returning a boolean true value\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/menu/removeCategory.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{  \n  \"response\":true\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Response from finance.getAccount\nDESCRIPTION: Sample JSON response from the finance.getAccount endpoint showing the account properties including ID, name, currency, type, balance and other financial details.\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/finance/getAccount.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{  \n   \"response\":{  \n      \"account_id\":\"3\",\n      \"name\":\"Сейф\",\n      \"currency_id\":\"3\",\n      \"type\":\"1\",\n      \"balance\":\"56720000\",\n      \"balance_start\":\"0\",\n      \"percent_acquiring\":\"0.00\",\n      \"currency_symbol\":\"$\",\n      \"currency_code_iso\":\"USD\",\n      \"currency_code\":\"usd\"\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Online Order with Joinposter API in PHP\nDESCRIPTION: This PHP snippet demonstrates how to query the Joinposter API to retrieve online order properties using the `incomingOrders.getOwnIncomingOrder` method. It constructs the API URL with the required token and `incoming_order_id` parameter and uses a `sendRequest` function to make the API call.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/incomingOrders/getOwnIncomingOrder.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/incomingOrders.getOwnIncomingOrder'\n . '?token=687409:4164553abf6a031302898da7800b59fb'\n . '&incoming_order_id=1';\n\n$data = sendRequest($url);\n?>\n```\n\n----------------------------------------\n\nTITLE: Waiter Sales API Response Format\nDESCRIPTION: Example JSON response showing sales data for multiple waiters including profit, revenue, client counts, and average service metrics. Each waiter entry includes both gross and net profit figures along with service performance statistics.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/dash/getWaitersSales.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"response\":[\n    {\n      \"user_id\":\"1\",\n      \"name\":\"Demo\",\n      \"profit\":\"153707331\",\n      \"profit_netto\":\"128089443\",\n      \"revenue\":\"186224294\",\n      \"clients\":\"1414\",\n      \"middle_time\":49364.020916667,\n      \"middle_invoice\":1317.0034936351\n    },\n    {\n      \"user_id\":\"2\",\n      \"name\":\"Максим\",\n      \"profit\":\"147406757\",\n      \"profit_netto\":\"122838964\",\n      \"revenue\":\"179108697\",\n      \"clients\":\"1314\",\n      \"middle_time\":58078.986483333,\n      \"middle_invoice\":1363.0798858447\n    },\n    {\n      \"user_id\":\"6\",\n      \"name\":\"Антон\",\n      \"profit\":\"155127873\",\n      \"profit_netto\":\"129273228\",\n      \"revenue\":\"188413623\",\n      \"clients\":\"1424\",\n      \"middle_time\":1.8170166666667,\n      \"middle_invoice\":1323.129375\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Example Response for Successful Storage Update\nDESCRIPTION: This JSON snippet illustrates the expected response from the `storage.updateStorage` API endpoint upon successful storage update. The `response` field contains the ID of the updated storage location, confirming that the update operation was successful.\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/storage/updateStorage.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"response\":7\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Product from Order using transactions.removeTransactionProduct API (PHP)\nDESCRIPTION: This PHP code snippet demonstrates how to make a POST request to remove a product from an order using the transactions.removeTransactionProduct API endpoint. It includes setting up the URL with an authentication token and preparing the transaction data.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/transactions/removeTransactionProduct.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/transactions.removeTransactionProduct'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$transaction = [\n    'spot_id'        => 1,\n    'spot_tablet_id' => 1,\n    'transaction_id' => 1950,\n    'product_id'     => 113,\n];\n\n$data = sendRequest($url, 'post', $transaction);\n```\n\n----------------------------------------\n\nTITLE: Saving Product Side System ID using PHP\nDESCRIPTION: Example of saving a side system product ID as extra data for a product entity using the application.setEntityExtras endpoint. Shows how to structure the request with entity_type, entity_id, and extras parameters.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/application/setEntityExtras.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/application.setEntityExtras'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$extras = [\n    \"entity_type\"   => \"product\",\n    \"entity_id\"     => 4,\n    \"extras\"        => [\n        \"sideId\" => \"1\"\n    ]\n];\n\n$data = sendRequest($url, 'post', $extras);\n\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"response\":true\n}\n```\n\n----------------------------------------\n\nTITLE: Receiving Billing Report Response Format in JSON\nDESCRIPTION: This JSON snippet illustrates the structure of the response received from the billing reports API. It contains daily payment data along with total payment summaries, categorized by payment methods such as cash, card, and bonus points.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/dash/getPaymentsReport.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"response\": {\n        \"days\": [\n            {\n                \"date\": \"2017-05-23\",\n                \"payed_cash_sum\": \"1607996\",\n                \"payed_card_sum\": \"365552\",\n                \"payed_cert_in_sum\": \"0\",\n                \"payed_cert_out_sum\": \"0\",\n                \"payed_bonus_sum\": \"0\",\n                \"payed_incust_sum\": \"0\",\n                \"payed_sum_sum\": \"1973548\"\n            },\n            {\n                \"date\": \"2017-06-03\",\n                \"payed_cash_sum\": \"1108969\",\n                \"payed_card_sum\": \"1090915\",\n                \"payed_cert_in_sum\": \"0\",\n                \"payed_cert_out_sum\": \"0\",\n                \"payed_bonus_sum\": \"0\",\n                \"payed_incust_sum\": \"0\",\n                \"payed_sum_sum\": \"2199884\"\n            }\n        ],\n        \"total\": {\n            \"payed_cash_sum\": 2716965,\n            \"payed_card_sum\": 1456467,\n            \"payed_third_party_sum\": 0,\n            \"payed_cert_in_sum\": 0,\n            \"payed_cert_out_sum\": 0,\n            \"payed_bonus_sum\": 0,\n            \"payed_incust_sum\": 0,\n            \"payed_sum_sum\": 4173432\n        }\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Dish Response Example - JSON\nDESCRIPTION: This snippet provides a sample JSON response format when a dish is successfully created using the JoinPoster API. It shows that the response contains the ID of the created dish, which is essential for confirmation and further actions.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/menu/createDish.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"response\": 61\n}\n```\n\n----------------------------------------\n\nTITLE: Response Example for Supply Ingredients in JSON\nDESCRIPTION: This JSON snippet shows an example response from the `storage.getSupplyIngredients` API endpoint. The response contains an array of ingredient objects, each including details like ingredient ID, quantity, total sum, net sum, ingredient name, unit, and tax ID.\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/storage/getSupplyIngredients.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"response\":[\n    {\n      \"ingredient_id\":\"66\",\n      \"supply_ingredient_num\":\"3.00000\",\n      \"supply_ingredient_sum\":\"15000\",\n      \"supply_ingredient_sum_netto\":\"12500\",\n      \"ingredient_name\":\"Шен Да Бай Ча-Дзень Гу\",\n      \"ingredient_unit\":\"kg\",\n      \"tax_id\": 0\n    },\n    {\n      \"ingredient_id\":\"68\",\n      \"supply_ingredient_num\":\"2.50000\",\n      \"supply_ingredient_sum\":\"17500\",\n      \"supply_ingredient_sum_netto\":\"14583\",\n      \"ingredient_name\":\"Шен Мен Ку\",\n      \"ingredient_unit\":\"kg\",\n      \"tax_id\": 0\n    },\n    {\n      \"ingredient_id\":\"67\",\n      \"supply_ingredient_num\":\"130000.00000\",\n      \"supply_ingredient_sum\":\"650000000\",\n      \"supply_ingredient_sum_netto\":\"541666667\",\n      \"ingredient_name\":\"Шен с горы У Лянь Шань-Дзень Гу\",\n      \"ingredient_unit\":\"kg\",\n      \"tax_id\": 0\n    },\n    {\n      \"ingredient_id\":\"69\",\n      \"supply_ingredient_num\":\"1400.00000\",\n      \"supply_ingredient_sum\":\"16100000\",\n      \"supply_ingredient_sum_netto\":\"13416667\",\n      \"ingredient_name\":\"Шу Пуэр 20 лет\",\n      \"ingredient_unit\":\"p\",\n      \"tax_id\": 0\n    },\n    {\n      \"ingredient_id\":\"76\",\n      \"supply_ingredient_num\":\"30.00000\",\n      \"supply_ingredient_sum\":\"390\",\n      \"supply_ingredient_sum_netto\":\"325\",\n      \"ingredient_name\":\"Яйца куринные\",\n      \"ingredient_unit\":\"p\",\n      \"tax_id\": 0\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Location List - JSON Response Structure\nDESCRIPTION: Example JSON response showing the structure of returned location data. Includes location details and associated storage information for each location.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/access/getSpots.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"response\":[\n    {\n      \"spot_id\":\"1\",\n      \"spot_name\":\"Spot in Madrid\",\n      \"spot_adress\":\"Rome, Madrid\",\n      \"storages\":[\n        {\n          \"storage_id\":1,\n          \"storage_name\":\"Storage in Madrid\",\n          \"storage_adress\":\"Rome, Madrid\"\n        }\n      ]\n    },\n    {\n      \"spot_id\":\"2\",\n      \"spot_name\":\"Spot in Milan\",\n      \"spot_adress\":\"Rome, Milan\",\n      \"storages\":[\n        {\n          \"storage_id\":2,\n          \"storage_name\":\"Storage in Milan\",\n          \"storage_adress\":\"Rome, Milan\"\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for finance.getCategories\nDESCRIPTION: This is an example of the JSON response returned by the finance.getCategories API method. It shows an array of financial categories with their IDs, names, parent IDs, operations, actions, and delete status.\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/finance/getCategories.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"response\":[\n    {\n      \"category_id\":\"5\",\n      \"name\":\"Зарплата\",\n      \"parent_id\":\"0\",\n      \"operations\":\"2\",\n      \"action\":\"0\",\n      \"delete\":\"0\"\n    },\n    {\n      \"category_id\":\"2\",\n      \"name\":\"Кассовые смены\",\n      \"parent_id\":\"0\",\n      \"operations\":\"3\",\n      \"action\":\"11\",\n      \"delete\":\"0\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Receiving Monthly Billing Report Response Format in JSON\nDESCRIPTION: This JSON snippet shows the response structure for billing reports summarized by months. The monthly payment totals are presented along with the breakdown of payment types, echoing the same categories as the daily reports.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/dash/getPaymentsReport.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"response\": {\n        \"days\": [\n            {\n                \"date\": \"2017-06\",\n                \"payed_cash_sum\": \"27286420\",\n                \"payed_card_sum\": \"1951853\",\n                \"payed_cert_in_sum\": \"0\",\n                \"payed_cert_out_sum\": \"0\",\n                \"payed_bonus_sum\": \"0\",\n                \"payed_incust_sum\": \"0\",\n                \"payed_sum_sum\": \"29234560\"\n            },\n            {\n                \"date\": \"2017-05\",\n                \"payed_cash_sum\": \"60273456\",\n                \"payed_card_sum\": \"6290658\",\n                \"payed_cert_in_sum\": \"0\",\n                \"payed_cert_out_sum\": \"0\",\n                \"payed_bonus_sum\": \"0\",\n                \"payed_incust_sum\": \"0\",\n                \"payed_sum_sum\": \"66564114\"\n            },\n            {\n                \"date\": \"2017-04\",\n                \"payed_cash_sum\": \"49090724\",\n                \"payed_card_sum\": \"4782295\",\n                \"payed_cert_in_sum\": \"0\",\n                \"payed_cert_out_sum\": \"0\",\n                \"payed_bonus_sum\": \"0\",\n                \"payed_incust_sum\": \"0\",\n                \"payed_sum_sum\": \"53873019\"\n            }\n        ],\n        \"total\": {\n            \"payed_cash_sum\": 136650600,\n            \"payed_card_sum\": 13024806,\n            \"payed_third_party_sum\": 0,\n            \"payed_cert_in_sum\": 0,\n            \"payed_cert_out_sum\": 0,\n            \"payed_bonus_sum\": 0,\n            \"payed_incust_sum\": 0,\n            \"payed_sum_sum\": 149671693\n        }\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Example Response for Clients Prizes\nDESCRIPTION: This JSON snippet represents an example response from the `clients.getClientsPrizes` API endpoint.  It shows the structure of the returned data, including prize details, transaction information, promotion details, client ID, status, product IDs, quantities, conditions, and dates.\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/clients/getClientsPrizes.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"prize_product_id\":\"38\",\n   \"transaction_id\":\"388689\",\n   \"promotion_id\":\"8\",\n   \"client_id\":\"38\",\n   \"status\":\"1\",\n   \"tr_product_id\":\"2125190\",\n   \"num\":\"1.0000000\",\n   \"conditions\":{\n      \"bonus_products\":[\n         {\n            \"type\":\"2\",\n            \"id\":\"934\"\n         }\n      ],\n      \"bonus_products_condition_type\":\"3\",\n      \"bonus_products_condition_value\":100\n   },\n   \"date_accrual\":\"2018-05-02 11:03:50\",\n   \"date_issuance\":\"2018-05-02 11:03:50\",\n   \"master_id\":\"0\",\n   \"weight_flag\":\"0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Requesting Company Logo with PHP\nDESCRIPTION: PHP code example demonstrating how to make an HTTP request to retrieve a company logo. Uses an authentication token and the settings.getLogo endpoint.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/settings/getLogo.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/settings.getLogo'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$data = sendRequest($url);\n```\n\n----------------------------------------\n\nTITLE: Storage Inventories JSON Response Example\nDESCRIPTION: Example JSON response containing inventory details including inventory ID, storage ID, dates, and financial summaries\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/storage/getStorageInventories.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"response\":[\n    {\n      \"inventory_id\":\"3\",\n      \"storage_id\":\"1\",\n      \"date_start\":\"2015-08-12 19:07:08\",\n      \"date_end\":\"2017-05-18 09:10:31\",\n      \"date_set\":\"0000-00-00 00:00:00\",\n      \"date_inventory\":\"2017-05-18 09:10:31\",\n      \"sum\":\"871875648398\",\n      \"sum_netto\":\"726563040332\",\n      \"inventory_status\":\"1\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Menu Remove Prepack Response Structure\nDESCRIPTION: This snippet illustrates the JSON response format received after making a successful request to the menu.removePrepack API. It indicates that the semi-finished product has been removed successfully.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/menu/removePrepack.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"response\":true\n}\n```\n\n----------------------------------------\n\nTITLE: Transaction List Response in JSON\nDESCRIPTION: This JSON snippet shows the structure of the response from the dash.getTransactions endpoint. It includes detailed transaction information such as ID, dates, payment details, and customer information.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/dash/getTransactions.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"response\":[\n    {\n      \"transaction_id\":\"384960\",\n      \"date_start\":\"1504641602936\",\n      \"date_start_new\":\"1504641602941\",\n      \"date_close\":\"1504641603008\",\n      \"status\":\"2\",\n      \"guests_count\":\"4\",\n      \"discount\":\"0\",\n      \"bonus\":\"0\",\n      \"pay_type\":\"3\",\n      \"payed_bonus\":\"0\",\n      \"payed_card\":\"0\",\n      \"payed_cash\":\"199140\",\n      \"payed_sum\":\"199140\",\n      \"payed_cert\":\"0\",\n      \"tip_sum\":\"0\",\n      \"sum\":\"180600\",\n      \"spot_id\":\"1\",\n      \"table_id\":\"90\",\n      \"name\":\"Demo\",\n      \"user_id\":\"1\",\n      \"client_id\":\"0\",\n      \"card_number\":\"0\",\n      \"transaction_comment\":null,\n      \"reason\":\"\",\n      \"print_fiscal\":\"0\",\n      \"total_profit\":\"172828\",\n      \"table_name\":\"1\",\n      \"client_firstname\":null,\n      \"client_lastname\":null,\n      \"date_close_date\":\"2017-09-05 23:00:03\"\n    },\n    {\n      \"transaction_id\":\"384956\",\n      \"date_start\":\"1504641601797\",\n      \"date_start_new\":\"1504641601809\",\n      \"date_close\":\"1504641601850\",\n      \"status\":\"2\",\n      \"guests_count\":\"5\",\n      \"discount\":\"0\",\n      \"bonus\":\"0\",\n      \"pay_type\":\"3\",\n      \"payed_bonus\":\"0\",\n      \"payed_card\":\"0\",\n      \"payed_cash\":\"117000\",\n      \"payed_sum\":\"117000\",\n      \"payed_cert\":\"0\",\n      \"tip_sum\":\"0\",\n      \"sum\":\"117000\",\n      \"spot_id\":\"1\",\n      \"table_id\":\"91\",\n      \"name\":\"Максим\",\n      \"user_id\":\"2\",\n      \"client_id\":\"0\",\n      \"card_number\":\"0\",\n      \"transaction_comment\":null,\n      \"reason\":\"\",\n      \"print_fiscal\":\"0\",\n      \"total_profit\":\"113487\",\n      \"table_name\":\"2\",\n      \"client_firstname\":null,\n      \"client_lastname\":null,\n      \"date_close_date\":\"2017-09-05 23:00:02\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Transaction Response JSON Structure\nDESCRIPTION: Example JSON response demonstrating the structure of transaction data returned by the JoinPoster API, including transaction details like ID, dates, status, and financial information\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/dash/getTransactions.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"response\":[\n    {\n      \"transaction_id\":\"384960\",\n      \"date_start\":\"1504641602936\",\n      \"date_close\":\"1504641603008\",\n      \"status\":\"2\",\n      \"guests_count\":\"4\",\n      \"payed_cash\":\"199140\",\n      \"sum\":\"180600\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Information via API in Poster\nDESCRIPTION: This snippet shows how to retrieve information about a specific user using their user ID. It sends a GET request to the API endpoint with the user ID as a parameter.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/pos/users/index.md#2025-04-21_snippet_1\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X GET \"https://joinposter.com/api/users.getUser?user_id=1\" \\\n-H \"Content-Type: application/x-www-form-urlencoded\" \\\n-H \"Authorization: Bearer YOUR_TOKEN\"\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response for Reservation Properties\nDESCRIPTION: This JSON snippet shows the structure of the response returned by the incomingOrders.getReservation method. It includes details about the reservation such as client information, reservation time, and status.\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/incomingOrders/getReservation.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"response\":{\n      \"incoming_order_id\":\"3\",\n      \"spot_id\":\"1\",\n      \"status\":0,\n      \"client_id\":4985,\n      \"first_name\":\"Степан\",\n      \"last_name\":\"Созонов\",\n      \"phone\":\"380912152764\",\n      \"email\":null,\n      \"sex\":\"2\",\n      \"birthday\":\"1996-08-26\",\n      \"address\":\"московская 9\",\n      \"comment\":\"Подготовить вазу для цветов\",\n      \"created_at\":\"2018-03-22 16:50:18\",\n      \"updated_at\":\"2018-03-22 16:50:18\",\n      \"transaction_id\":null,\n      \"guests_count\":\"1\",\n      \"duration\":\"2000\",\n      \"date_reservation\":\"2018-03-22 18:20:00\"\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Storage Transfer Deletion Response - JSON Example\nDESCRIPTION: Example JSON response from the storage.deleteMoving endpoint. Returns a success flag indicating whether the operation was successful.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/storage/deleteMoving.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"success\":1\n}\n```\n\n----------------------------------------\n\nTITLE: Interpreting Response from menu.recoverProduct Endpoint in JSON\nDESCRIPTION: This JSON snippet illustrates the typical response expected from the `menu.recoverProduct` API call, indicating a successful operation with a true response. There are no specific dependencies, but the response must be interpreted correctly in the context of the API's functionality.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/menu/recoverProduct.md#2025-04-21_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{  \n  \"response\":true\n}\n\n```\n\n----------------------------------------\n\nTITLE: Storage Packs API Response Format\nDESCRIPTION: Example JSON response showing the structure of returned pack data. Includes pack IDs, names, units, counts, and types for both basic and custom packs.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/storage/getPacks.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \"response\":[\\n    {\\n      \"pack_id\":\"1\",\\n      \"name\":\"\",\\n      \"unit\":\"p\",\\n      \"count\":\"0.0000\",\\n      \"type\":\"0\"\\n    },\\n    {\\n      \"pack_id\":\"2\",\\n      \"name\":\"\",\\n      \"unit\":\"l\",\\n      \"count\":\"0.0000\",\\n      \"type\":\"0\"\\n    },\\n    {\\n      \"pack_id\":\"3\",\\n      \"name\":\"\",\\n      \"unit\":\"kg\",\\n      \"count\":\"0.0000\",\\n      \"type\":\"0\"\\n    },\\n    {\\n      \"pack_id\":\"5\",\\n      \"name\":\"Milk pack\",\\n      \"unit\":\"p\",\\n      \"count\":\"20.0000\",\\n      \"type\":\"1\"\\n    },\\n    {\\n      \"pack_id\":\"6\",\\n      \"name\":\"Water\",\\n      \"unit\":\"l\",\\n      \"count\":\"20.0000\",\\n      \"type\":\"1\"\\n    }\\n  ]\\n}\n```\n\n----------------------------------------\n\nTITLE: Response Format for Order Comment Update\nDESCRIPTION: JSON response structure returned by the API after attempting to add a comment to an order. The err_code: 0 indicates successful comment addition.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/transactions/changeComment.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{  \n  \"response\":{  \n    \"err_code\":0\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response from finance.getTransactions\nDESCRIPTION: Example JSON response from the finance.getTransactions API showing transaction details including IDs, accounts, amounts, dates, and related metadata for financial operations.\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/finance/getTransactions.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"response\":[\n    {\n      \"transaction_id\":\"538\",\n      \"account_id\":\"1\",\n      \"user_id\":\"1\",\n      \"category_id\":\"7\",\n      \"type\":\"0\",\n      \"amount\":\"-8137663\",\n      \"balance\":\"545516997964\",\n      \"date\":\"2017-08-31 09:20:22\",\n      \"recipient_type\":\"0\",\n      \"recipient_id\":\"0\",\n      \"binding_type\":\"15\",\n      \"binding_id\":\"400\",\n      \"comment\":\"Корректирующая транзакция\",\n      \"delete\":\"0\",\n      \"account_name\":\"Наличные в заведении\",\n      \"currency_symbol\":\"<i class=\\\"icon-rouble\\\"><\\/i>\",\n      \"category_name\":\"Actualization\"\n    },\n    {\n      \"transaction_id\":\"536\",\n      \"account_id\":\"1\",\n      \"user_id\":\"1\",\n      \"category_id\":\"2\",\n      \"type\":\"1\",\n      \"amount\":\"8148663\",\n      \"balance\":\"545525135627\",\n      \"date\":\"2017-08-31 09:20:21\",\n      \"recipient_type\":\"0\",\n      \"recipient_id\":\"0\",\n      \"binding_type\":\"11\",\n      \"binding_id\":\"400\",\n      \"comment\":\"Закрытие наличной кассы\",\n      \"delete\":\"0\",\n      \"account_name\":\"Наличные в заведении\",\n      \"currency_symbol\":\"<i class=\\\"icon-rouble\\\"><\\/i>\",\n      \"category_name\":\"Cash register shifts\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Account Name Using PHP\nDESCRIPTION: PHP code example showing how to make a GET request to the Poster API endpoint to retrieve the account name. The request requires an authentication token as a parameter.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/settings/getCompanyName.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/settings.getCompanyName'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$data = sendRequest($url);\n```\n\n----------------------------------------\n\nTITLE: Cash Shift Transaction Response Example in JSON\nDESCRIPTION: This snippet shows a JSON response example from the JoinPoster API when a cash shift transaction request is successfully processed. It contains the transaction ID in the response object.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/finance/createCashShiftTransaction.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"response\":{\n    \"cash_shift_transaction_id\":1649\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Product Creation Response Without Modifications\nDESCRIPTION: Sample JSON response for a product creation request without modifications, returning the newly created product's ID.\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/menu/createProduct.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"response\":60\n}\n```\n\n----------------------------------------\n\nTITLE: Poster API Client Group Request Example\nDESCRIPTION: Demonstrates how to construct a Poster API request URL with authentication token and retrieve client group information\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/start/request.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$url = 'https://joinposter.com/api/clients.getGroup' \n    . '?format=json'\n    . '&token=687409:4164553abf6a031302898da7800b59fb'\n    . '&group_id=1';\n\n$group = sendRequest($url);\n```\n\n----------------------------------------\n\nTITLE: Handling Popup Close Event in Poster POS\nDESCRIPTION: Event listener implementation that triggers when a popup window is closed. The popup must have been originally opened using the interface.popup method. Uses Poster's event system to detect popup closure.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/pos/events/afterPopupClosed.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nPoster.on('afterPopupClosed', () => {\n\talert(\"Popup closed\");\n});\n```\n\n----------------------------------------\n\nTITLE: Order Wastes API Response Structure\nDESCRIPTION: Example JSON response showing the structure of returned order waste data including transaction details, pagination info, and waste specifics.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/transactions/getTransactionsWriteOffs.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{  \n  \"response\":{  \n    \"count\":41,\n    \"page\":{  \n      \"per_page\":10,\n      \"page\":5,\n      \"count\":1\n    },\n    \"data\":[  \n      {  \n        \"transaction_id\":25221,\n        \"write_offs\":[  \n          {  \n            \"write_off_id\":143731,\n            \"storage_id\":3,\n            \"product_id\":469,\n            \"modificator_id\":0,\n            \"ingredient_id\":30,\n            \"prepack_id\":0,\n            \"cost\":26.68,\n            \"cost_netto\":22.23,\n            \"weight\":0.16,\n            \"unit\":\"kg\",\n            \"reason\":\"\"\n          }\n        ]\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: API Response Format for Purchase Total Update\nDESCRIPTION: JSON response format showing the updated total purchase amount after the change has been applied. The response field contains the new total purchase sum.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/clients/changeClientPayedSum.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"response\":110\n}\n```\n\n----------------------------------------\n\nTITLE: Response Structure for Cash Shift Closure\nDESCRIPTION: This snippet provides a JSON response example indicating whether the cash shift was successfully closed. The response consists of a boolean value under the key 'response'.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/finance/closeCashShift.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{  \n  \"response\":true\n}\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for Cash Shifts\nDESCRIPTION: This JSON response example shows the structure of data returned by the finance.getCashShifts endpoint. It includes detailed information about each cash shift such as timing, amounts, and location details.\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/finance/getCashShifts.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{  \n  \"response\":[  \n    {  \n      \"cash_shift_id\":333,\n      \"spot_id\":1,\n      \"timestart\":1505977200000,\n      \"timeend\":1505980800000,\n      \"date_start\": \"2018-10-18 13:45:46\",\n      \"date_end\": \"2018-10-18 23:00:00\",\n      \"amount_start\":10000,\n      \"amount_end\":10000,\n      \"amount_debit\":0,\n      \"amount_sell_cash\":0,\n      \"amount_sell_card\":0,\n      \"amount_credit\":0,\n      \"amount_collection\":0,\n      \"user_id_start\":3,\n      \"user_id_end\":3,\n      \"comment\":\"бар\",\n      \"spot_name\":\"Киоск\",\n      \"spot_adress\":\"ул. Вокзальная, 12\",\n      \"table_num\":\"0\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Response for Customer Update\nDESCRIPTION: Example of the JSON response returned after successfully updating customer properties. Returns the ID of the updated customer record.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/clients/updateClient.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"response\":4082\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Response Structure for Online Order Properties\nDESCRIPTION: This JSON snippet illustrates the structure of the response returned by the incomingOrders.getOwnIncomingOrder endpoint. It includes detailed information about the order, client, and associated products.\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/incomingOrders/getOwnIncomingOrder.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{  \n  \"response\":{  \n    \"incoming_order_id\":1,\n    \"spot_id\":1,\n    \"status\":1,\n    \"client_id\":0,\n    \"first_name\":\"Антон\",\n    \"last_name\":\"Талышкин\",\n    \"phone\":\"79630313844\",\n    \"email\":\"contact@joinposter.com\",\n    \"sex\":1,\n    \"birthday\":\"1986-11-23\",\n    \"address\":\"ул. Малышева, 3\",\n    \"comment\":\"\",\n    \"created_at\":\"2017-10-26 14:58:02\",\n    \"updated_at\":\"2017-10-26 15:25:17\",\n    \"transaction_id\":1949,\n    \"products\":[  \n      {  \n        \"io_product_id\":1,\n        \"product_id\":113,\n        \"modificator_id\":null,\n        \"incoming_order_id\":1,\n        \"count\":1,\n        \"created_at\":\"2017-10-26 14:58:02\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling User Logout Event in JavaScript\nDESCRIPTION: This code snippet demonstrates how to set up an event listener for the userLogout event in the Poster system. It logs the response object and calls the next function to continue processing.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/pos/events/userLogout.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nPoster.on('userLogout', (res, next) => {\n\tconsole.log(res);\n\tnext();\n})\n```\n\n----------------------------------------\n\nTITLE: Storage Delete Supply API Response\nDESCRIPTION: Example of successful response from the storage.deleteSupply endpoint. Returns a success flag indicating the operation status.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/storage/deleteSupply.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"success\":1\n}\n```\n\n----------------------------------------\n\nTITLE: Joinposter API Response Example\nDESCRIPTION: This JSON snippet shows the expected response format from the Joinposter API after a successful request. It contains a single \"response\" field, which in this example, holds the value 6.  The specific meaning of this value depends on the particular API method being called.\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/template.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"response\":6\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Tablet Terminal via API Request\nDESCRIPTION: This PHP snippet demonstrates how to create a tablet terminal using the `access.createTablet` API endpoint. It constructs the URL with the API token, prepares an array of parameters including the `spot_id`, `spot_tablet_name`, and `spot_code`, and then sends a POST request to the API.\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/access/createTablet.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/access.createTablet'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$tablet = [\n    'spot_id'          => 1,\n    'spot_tablet_name' => 'Новый терминал',\n    'spot_code'        => 'crsa5a54',\n];\n\n$data = sendRequest($url, 'post', $tablet);\n```\n\n----------------------------------------\n\nTITLE: Removing a Tablet using Joinposter API\nDESCRIPTION: This PHP code snippet demonstrates how to remove a tablet using the `access.removeTablet` API endpoint. It constructs the API URL with a token, defines the `spot_tablet_id` to be removed, and then sends a POST request to the API endpoint. The `sendRequest` function is assumed to be defined elsewhere in the code.\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/access/removeTablet.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/access.removeTablet'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$tablet = [\n    'spot_tablet_id' => 1,\n];\n\n$data = sendRequest($url, 'post', $tablet);\n?>\n```\n\n----------------------------------------\n\nTITLE: JSON: Transaction Write-Offs API Response\nDESCRIPTION: Example response structure for transaction write-offs API, showing metadata, pagination information, and detailed write-off entries\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/transactions/getTransactionsWriteOffs.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"response\":{\n    \"count\":41,\n    \"page\":{\n      \"per_page\":10,\n      \"page\":5,\n      \"count\":1\n    },\n    \"data\":[\n      {\n        \"transaction_id\":25221,\n        \"write_offs\":[\n          {\n            \"write_off_id\":143731,\n            \"storage_id\":3,\n            \"product_id\":469,\n            \"modificator_id\":0,\n            \"ingredient_id\":30,\n            \"prepack_id\":0,\n            \"cost\":26.68,\n            \"cost_netto\":22.23,\n            \"weight\":0.16,\n            \"unit\":\"kg\",\n            \"reason\":\"\"\n          }\n        ]\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Response example for clients.addEWalletTransaction in JSON\nDESCRIPTION: This JSON snippet shows a successful response from the clients.addEWalletTransaction API endpoint. The response contains the \"response\" field, which returns the id of the e-Wallet withdrawal transactions.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/clients/addEWalletTransaction.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"response\":\"1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response for Ingredient Category\nDESCRIPTION: Sample JSON response structure returned by the menu.getCategoryIngredients API method with category details\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/menu/getCategoryIngredients.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"response\":{\n    \"category_id\":\"3\",\n    \"name\":\"Алкоголь\",\n    \"id_1c\":\"b80ffc81-0fc9-11e7-9ab4-ace01035e460\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: payments.getOpenTransactionsOnTable API Response Example\nDESCRIPTION: This JSON snippet shows an example response from the payments.getOpenTransactionsOnTable API, containing a list of open transactions with order details, transaction IDs, and products. The response includes details such as the order ID, transaction ID, opening date, total amount due, and a list of products in the order.\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/payments/getOpenTransactionsOnTable.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"response\":[\n    {\n      \"order_id\":30139,\n      \"transaction_id\":1484233370643,\n      \"date_open\":1484233375235,\n      \"payed_sum\":127.02,\n      \"products\":[\n        {\n          \"product_name\":\"Венский суп Гуляш\"\n        },\n        {\n          \"product_name\":\"Медальоны из телятины с овощами гриль\"\n        },\n        {\n          \"product_name\":\"Хлеб белый собственной выпечки\"\n        },\n        {\n          \"product_name\":\"Кальян\",\n          \"modificator_name\":\"на соке\"\n        },\n        {\n          \"product_name\":\"Соус BBQ к блюду\"\n        },\n        {\n          \"product_name\":\"Pepsi 300 ml\"\n        }\n      ]\n    },\n    {\n      \"order_id\":30946,\n      \"transaction_id\":1485341938799,\n      \"date_open\":1485341938872,\n      \"payed_sum\":190,\n      \"products\":[\n        {\n          \"product_name\":\"Кролик по-охотничьи\"\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: storage.getPack API Response Example\nDESCRIPTION: This JSON snippet illustrates the expected response structure from the storage.getPack API endpoint. It includes fields such as pack_id, name, unit, count, and type, providing detailed information about the requested pack.\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/storage/getPack.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"response\":{\n    \"pack_id\":\"5\",\n    \"name\":\"Пак молока\",\n    \"unit\":\"p\",\n    \"count\":\"20.0000\",\n    \"type\":\"1\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: JoinPoster Waiters Sales Response JSON Structure\nDESCRIPTION: JSON response format for waiters sales data, containing detailed performance metrics for each waiter including user ID, name, revenue, profit, and service statistics\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/dash/getWaitersSales.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"response\":[\n    {\n      \"user_id\":\"1\",\n      \"name\":\"Demo\",\n      \"profit\":\"153707331\",\n      \"profit_netto\":\"128089443\",\n      \"revenue\":\"186224294\",\n      \"clients\":\"1414\",\n      \"middle_time\":49364.020916667,\n      \"middle_invoice\":1317.0034936351\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Subscribing to failedPrintFiscal Event in JavaScript\nDESCRIPTION: This code snippet demonstrates how to subscribe to the 'failedPrintFiscal' event using the Poster API. It logs the response to the console when the event is triggered.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/pos/events/failedPrintFiscal.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nPoster.on('failedPrintFiscal', (res) => {\n    console.log(res);\n});\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response for Failed Fiscal Return\nDESCRIPTION: This JSON object represents the structure of the response received when a fiscal return operation fails. It includes details about the order, user, and error information.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/pos/events/failedReturnFiscal.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"order\":{\n      \"id\":1544009608209,\n      \"dateStart\":1544009608209,\n      \"dateClose\":0,\n      \"datePrint\":0,\n      \"status\":2,\n      \"userId\":40,\n      \"tableId\":5,\n      \"orderName\":77624,\n      \"guestsCount\":2,\n      \"products\":{\n         \"0\":{\n            \"id\":309,\n            \"count\":1,\n            \"price\":280,\n            \"printedNum\":0,\n            \"nodiscount\":0,\n            \"taxId\":1,\n            \"taxValue\":6,\n            \"taxType\":2,\n            \"taxFiscal\":true,\n            \"roundSum\":0\n         }\n      },\n      \"subtotal\":280,\n      \"total\":280,\n      \"discount\":0,\n      \"clientId\":0,\n      \"payType\":\"mix\",\n      \"payedSum\":0,\n      \"payedCard\":0,\n      \"payedCash\":280,\n      \"payedBonus\":0,\n      \"approvedBonus\":0,\n      \"platformDiscount\":0,\n      \"loyaltyAppId\":0,\n      \"parentId\":0,\n      \"tipIncluded\":0,\n      \"tipSum\":0,\n      \"roundSum\":0,\n      \"printFiscal\":0,\n      \"comment\":\"\"\n   },\n   \"userId\":40,\n   \"errorCode\":\"050A\",\n   \"errorText\":\"Forbidden tax\"\n}\n```\n\n----------------------------------------\n\nTITLE: finance.removeTax API Response Example\nDESCRIPTION: This JSON snippet represents the expected response from the `finance.removeTax` API endpoint after successfully removing a tax. The response contains a `response` field set to `true`, indicating success.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/finance/removeTax.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"response\":true\n}\n```\n\n----------------------------------------\n\nTITLE: Remove Transaction API Response Format\nDESCRIPTION: Example JSON response from the transactions.removeTransaction endpoint showing a successful removal with err_code of 0.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/transactions/removeTransaction.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{  \n  \"response\":{  \n    \"err_code\":0\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: access.removeSpot Request Example in PHP\nDESCRIPTION: This code snippet demonstrates how to make a POST request to the `access.removeSpot` endpoint to remove a specific location. It requires a token for authentication and the `spot_id` of the location to be removed.  The `sendRequest` function is assumed to be defined elsewhere.\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/access/removeSpot.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/access.removeSpot'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$spot = [\n    'spot_id' => 1,\n];\n\n$data = sendRequest($url, 'post', $spot);\n?>\n```\n\n----------------------------------------\n\nTITLE: Access Token Endpoint URL for Poster API\nDESCRIPTION: The endpoint URL for obtaining an access token after receiving the authorization code. The account parameter is obtained from the previous step.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/start/authApi.md#2025-04-21_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://{account}.joinposter.com/api/v2/auth/access_token\n```\n\n----------------------------------------\n\nTITLE: Poster API Tax Creation Response Example in JSON\nDESCRIPTION: This JSON snippet illustrates the structure of the response received after successfully creating a tax using the Poster API. The response contains a 'response' object which includes the 'tax_id', indicating the unique identifier for the newly created tax.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/finance/createTax.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{  \n  \"response\":{  \n    \"tax_id\":3\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: JSON Response Format for Tax Properties\nDESCRIPTION: This JSON snippet illustrates the expected response format from the finance.getTax endpoint. It includes various properties of the tax, such as its ID, country, name, value, type, and fiscal status.\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/finance/getTax.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{  \n  \"response\":{  \n    \"tax_id\":3,\n    \"country\":\"UA\",\n    \"tax_name\":\"Налог с оборота\",\n    \"tax_value\":5,\n    \"type\":2,\n    \"fiscal\":1,\n    \"fiscal_program\":0,\n    \"fixed\":0,\n    \"delete\":0\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Application Information JSON Response Example\nDESCRIPTION: Sample JSON response structure returned by the application.getInfo method, containing nested objects with user, owner, and tariff information\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/application/getInfo.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"response\":{\n      \"user\":{\n         \"id\":\"1\",\n         \"name\":\"Demo\",\n         \"access_mask\":\"2147483647\",\n         \"email\":\"demo@gmail.com\"\n      },\n      \"ownerInfo\":{\n         \"email\":\"demo@gmail.com\",\n         \"phone\":\"+380504813033\",\n         \"city\":\"\",\n         \"country\":\"UA\",\n         \"name\":\"Demo\",\n         \"company_name\":\"Демо-версия Poster\"\n      },\n      \"tariff\":{\n         \"price\":0,\n         \"date_trial\":30,\n         \"currency_iso_code\":\"USD\",\n         \"next_pay_date\":\"2018-07-25 15:56:29\",\n         \"tariff_id\":2,\n         \"key\":\"showcase\",\n         \"name\":\"Витрина\"\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Response from Joinposter API in JSON\nDESCRIPTION: This JSON snippet provides an example response from the Joinposter API's `incomingOrders.getOwnIncomingOrder` method. It shows the structure of the response object, including fields such as `incoming_order_id`, `spot_id`, customer details, order status, and a list of products associated with the order.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/incomingOrders/getOwnIncomingOrder.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"response\":{  \n    \"incoming_order_id\":1,\n    \"spot_id\":1,\n    \"status\":1,\n    \"client_id\":0,\n    \"first_name\":\"Антон\",\n    \"last_name\":\"Талышкин\",\n    \"phone\":\"79630313844\",\n    \"email\":\"contact@joinposter.com\",\n    \"sex\":1,\n    \"birthday\":\"1986-11-23\",\n    \"address\":\"ул. Малышева, 3\",\n    \"comment\":\"\",\n    \"created_at\":\"2017-10-26 14:58:02\",\n    \"updated_at\":\"2017-10-26 15:25:17\",\n    \"transaction_id\":1949,\n    \"products\":[  \n      {  \n        \"io_product_id\":1,\n        \"product_id\":113,\n        \"modificator_id\":null,\n        \"incoming_order_id\":1,\n        \"count\":1,\n        \"created_at\":\"2017-10-26 14:58:02\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Response for Cash Shift Opening\nDESCRIPTION: This shows the JSON response format returned by the finance.openCashShift endpoint. The response contains the ID of the newly opened cash shift.\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/finance/openCashShift.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{  \n  \"response\":{  \n    \"cash_shift_id\":333\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Listening for Cash Shift Opening Events in JavaScript\nDESCRIPTION: This code snippet demonstrates how to listen for the 'shiftOpen' event that fires when a cash shift is opened in the Poster system. It registers an event handler that receives a data object containing information about the opened shift.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/pos/events/shiftOpen.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nPoster.on('shiftOpen', (data) => {\n    console.log(data.shift);\n});\n```\n\n----------------------------------------\n\nTITLE: Successful Response from set1cTransactionId Endpoint\nDESCRIPTION: Example of the JSON response returned when transaction IDs are successfully updated in the 1C system. The success parameter with value 1 indicates the operation completed successfully.\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/finance/set1cTransactionId.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{  \n  \"success\":1\n}\n```\n\n----------------------------------------\n\nTITLE: Location Removal API Response\nDESCRIPTION: Example of the JSON response returned by the API after a successful location removal. Returns true to indicate successful removal.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/access/removeSpot.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{  \n  \"response\":true\n}\n```\n\n----------------------------------------\n\nTITLE: API Response Format for Product Count Update\nDESCRIPTION: JSON response structure returned by the API after attempting to update a product count. Contains an error code indicating success (0) or failure.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/transactions/changeTransactionProductCount.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{  \n  \"response\":{  \n    \"err_code\":0\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Response for Successful Waste Removal\nDESCRIPTION: This JSON snippet shows the expected response format when a waste is successfully removed. The 'success' field with a value of 1 indicates that the operation was completed successfully.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/storage/deleteWriteOff.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"success\":1\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Response Format for Changing 54-FZ Fiscal Receipt Recipient\nDESCRIPTION: This JSON snippet shows the expected response format when successfully changing the recipient for a 54-FZ fiscal receipt. The response includes an error code of 0, indicating successful execution of the method.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/transactions/changeRecipientFor54FZ.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{  \n  \"response\":{  \n    \"err_code\":0\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Response format for Poster SMS API in JSON\nDESCRIPTION: This JSON snippet shows the expected response format from the clients.sendSms API method. The response is a simple boolean indicating whether the SMS was sent successfully.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/clients/sendSms.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"response\":true\n}\n```\n\n----------------------------------------\n\nTITLE: Waste Reasons API Response Example\nDESCRIPTION: JSON response structure for the storage.getWasteReasons API endpoint, showing the format of waste reason data including reason ID and name.\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/storage/getWasteReasons.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"response\":[\n      {\n         \"reason_id\":1,\n         \"name\":\"Истек срок годности\"\n      }\n   ]\n}\n```\n\n----------------------------------------\n\nTITLE: Product Creation Response With Modifications\nDESCRIPTION: Sample JSON response for a product creation request with multiple modifications, returning the product ID and modification IDs.\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/menu/createProduct.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"response\":61,\n  \"modifications_id\":[  \n    1,\n    2\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Removing a Dish Response Example - JSON\nDESCRIPTION: This JSON snippet illustrates the expected response from the menu.removeDish API call when successfully removing a dish. It provides a simple boolean indicating the success of the operation.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/menu/removeDish.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"response\":true\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Product With Modifications in PHP\nDESCRIPTION: API request to update a product with multiple modifications, different prices, and location-specific visibility\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/menu/updateProduct.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/menu.updateProduct'\n    . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$product = [\n    'id'                     => 57,\n    'product_name'           => 'Имбирный чай',\n    'menu_category_id'       => 0,\n    'workshop'               => 1,\n    'weight_flag'            => 0,\n    'color'                  => 'green',\n    'different_spots_prices' => 1,\n    'modifications'          => 1,\n    'modificator_id[0]'      => 1,\n    'modificator_id[1]'      => 0,\n    'modificator_id[2]'      => 2,\n    'modificator_name[0]'    => '1л',\n    'modificator_name[1]'    => '1.5л',\n    'modificator_name[2]'    => '2л',\n    'barcode[0]'             => '4820098749621',\n    'barcode[1]'             => '4820098749623',\n    'barcode[2]'             => '4820098749622',\n    'fiscal_code[0]'         => 1234567890,\n    'fiscal_code[1]'         => 1234567891,\n    'fiscal_code[2]'         => 1234567892,\n    'price[0][1]'            => 1500,\n    'price[0][2]'            => 1600,\n    'price[1][1]'            => 1700,\n    'price[1][2]'            => 1800,\n    'price[2][1]'            => 2000,\n    'price[2][2]'            => 2100,\n    'visible[0][1]'          => 1,\n    'visible[0][2]'          => 1,\n    'visible[1][1]'          => 1,\n    'visible[1][2]'          => 1,\n    'visible[2][1]'          => 0,\n    'visible[2][2]'          => 0,\n];\n\n$data = sendRequest($url, 'post', $product);\n```\n\n----------------------------------------\n\nTITLE: Customer Group Removal Response Format\nDESCRIPTION: Example of the JSON response returned by the API after attempting to remove a customer group. A successful deletion returns true in the response field.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/clients/removeGroup.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"response\":true\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Response Structure for Spot Invoice Data in Poster API\nDESCRIPTION: This JSON snippet shows the expected response format from the spots.getSpotInvoiceData endpoint. The response contains location invoice details including the name, ID, and address of the location.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/spots/getSpotInvoiceData.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"response\":{\n       \"invoice_name\":\"Friends Cafe\",\n       \"invoice_id\":12,\n       \"invoice_address\":\"1st Street, apt 89\"\n    }\n }\n```\n\n----------------------------------------\n\nTITLE: Example API Response for Terminal Creation\nDESCRIPTION: This JSON snippet shows the expected response from the `access.createTablet` API endpoint after successfully creating a tablet terminal. The `response` field contains the ID of the newly created terminal.\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/access/createTablet.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"response\":2\n}\n```\n\n----------------------------------------\n\nTITLE: Updating 1C Ingredient Category ID in PHP\nDESCRIPTION: PHP request to update ingredient category ID in the 1C system using Joinposter API, with category mapping and authentication token\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/menu/set1cCategoryIngredientsId.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/menu.set1cCategoryIngredientsId'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$category_ingredients = [\n    'id' => [\n        [\n            'category_id' => 3,\n            'id_1c'       => 'b80ffc81-0fc9-11e7-9ab4-ace01035e460',\n        ],\n    ],\n];\n\n$data = sendRequest($url, 'post', $category_ingredients);\n```\n\n----------------------------------------\n\nTITLE: Changing application tariff plan using POST request\nDESCRIPTION: This PHP snippet demonstrates how to change the tariff plan of an application using the `application.changeTariff` API endpoint. It constructs a POST request to the specified URL with the necessary parameters, including the API token and the new tariff key. It assumes the existence of a `sendRequest` function to handle the actual HTTP request.\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/application/changeTariff.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/application.changTariff'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$tariff = [\n    \"tariff_key\"   => \"shop\"\n];\n\n$data = sendRequest($url, 'post', $tariff);\n\n?>\n```\n\n----------------------------------------\n\nTITLE: Creating Product with Modifications - JSON Response\nDESCRIPTION: This JSON response is an example of the output from creating a product with modifications using the Poster API. It includes 'response', which shows the product ID, and 'modifications_id', an array listing the IDs of the modifications.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/menu/createProduct.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{  \n  \"response\":61,\n  \"modifications_id\":[  \n    1,\n    2\n  ]\n}\n\n```\n\n----------------------------------------\n\nTITLE: Successful Response from menu.createWorkshop API\nDESCRIPTION: This JSON snippet shows the expected response format when a station is successfully created using the menu.createWorkshop API endpoint. The 'response' parameter contains the ID of the newly created station.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/menu/createWorkshop.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"response\":5\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Application Information in PHP\nDESCRIPTION: PHP code snippet demonstrating how to make an API request to retrieve application details using a token-based authentication method\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/application/getInfo.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/application.getInfo'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$data = sendRequest($url, 'get', []);\n```\n\n----------------------------------------\n\nTITLE: API Response for Product Update With Modifications\nDESCRIPTION: JSON response structure for a successful product update with modifications, returning product and modification IDs\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/menu/updateProduct.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{  \n  \"response\":{  \n    \"product_id\":61,\n    \"modifications_id\":[  \n      1,\n      7,\n      2\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Successful Product Category Creation Response\nDESCRIPTION: This JSON snippet represents the expected response from the JoinPoster API after successfully creating a product category. The `response` field contains the ID of the newly created product category. This ID can be used for further operations involving the created category.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/menu/createCategory.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"response\":52\n}\n```\n\n----------------------------------------\n\nTITLE: Response format for finance.getReport API\nDESCRIPTION: This JSON snippet shows the structure of the response returned by the `finance.getReport` API endpoint. The response contains information about periods and categories.  Periods array contains information like title, start and end date of the period. Categories is an object containing category id, name, parent_id, and other related parameters.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/finance/getReport.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"response\":{\n    \"periods\":[\n      {\n        \"title\":\"Oct 2017\",\n        \"start\":1508101200,\n        \"end\":1509483599\n      },\n      {\n        \"title\":\"Nov 2017\",\n        \"start\":1509483600,\n        \"end\":1510865999\n      }\n    ],\n    \"categories\":{\n      \"7\":{\n        \"category_id\":\"7\",\n        \"name\":\"book_category_action_actualization\",\n        \"parent_id\":\"0\",\n        \"operations\":\"3\",\n        \"action\":\"14\",\n        \"level\":\"1\",\n        \"left\":\"1\",\n        \"right\":\"2\",\n        \"delete\":\"0\",\n        \"amounts\": {\n          \"1\":{\n            \"Nov 2017\":200000\n          }\n        },\n        \"currency_symbol\":\"<i class=\\\"icon-rouble\\\"><\\/i>\"\n      },\n      \"8\":{\n        \"category_id\":\"8\",\n        \"name\":\"book_category_action_banking_services\",\n        \"parent_id\":\"0\",\n        \"operations\":\"3\",\n        \"action\":\"15\",\n        \"level\":\"1\",\n        \"left\":\"3\",\n        \"right\":\"4\",\n        \"delete\":\"0\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Response in JSON\nDESCRIPTION: This JSON snippet shows an example of the response returned by the clients.removeClients API endpoint after successfully removing clients. The response array contains the IDs of the deleted clients.\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/clients/removeClients.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"response\":[1,2]\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Response from Successful Authorization\nDESCRIPTION: Example JSON response returned after successful OAuth2 authorization, containing the access_token, account information, user details, owner info, and tariff information.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/start/authApi.md#2025-04-21_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"access_token\":\"861052:02391570ff9af128e93c5a771055ba88\",\n   \"account_number\":\"861052\",\n   \"user\":{\n      \"id\":4,\n      \"name\":\"Poster\",\n      \"email\":\"dev@joinposter.com\",\n      \"role_id\":3\n   },\n   \"ownerInfo\":{\n      \"email\":\"dev@joinposter.com\",\n      \"phone\":\"+380684152664\",\n      \"city\":\"\",\n      \"country\":\"RU\",\n      \"name\":\"Poster\",\n      \"company_name\":\"dev-example\"\n   },\n   \"tariff\":{\n      \"key\":\"pricing-plan-1\",\n      \"next_pay_date\":\"2018-05-31 11:52:41\",\n      \"price\":2\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Response Format for Establishment ID Update - JSON\nDESCRIPTION: This JSON snippet represents the expected response format from the JoinPoster API when updating establishment IDs. It includes a success parameter indicating whether the operation was successful.\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/spots/set1cSpotsId.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"success\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Location Type with PHP\nDESCRIPTION: This PHP code snippet demonstrates how to make an HTTP GET request to the settings.getCompanyType endpoint. It constructs the URL with the required token parameter and sends the request using a sendRequest function.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/settings/getCompanyType.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/settings.getCompanyType'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$data = sendRequest($url);\n```\n\n----------------------------------------\n\nTITLE: JSON Response for Successful Location Update\nDESCRIPTION: This JSON snippet shows the expected response format after successfully updating a location's properties using the access.updateSpot API method. The response contains the ID of the updated location.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/access/updateSpot.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{  \n  \"response\":2\n}\n```\n\n----------------------------------------\n\nTITLE: Ingredient Removal Response Format - JSON\nDESCRIPTION: This JSON snippet shows the expected response format after successfully removing an ingredient via the JoinPoster API. It confirms the action with a simple boolean value indicating success.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/menu/removeIngredient.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"response\":true\n}\n```\n\n----------------------------------------\n\nTITLE: Removing a Station using Joinposter API with PHP\nDESCRIPTION: This PHP snippet demonstrates how to remove a station using the `menu.removeWorkshop` API. It sends a POST request to the API endpoint with the `workshop_id` parameter. The `sendRequest` function (not defined in the snippet) is assumed to handle the HTTP request.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/menu/removeWorkshop.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/menu.removeWorkshop'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$workshop = [\n    'workshop_id' => 2,\n];\n\n$data = sendRequest($url, 'post', $workshop);\n```\n\n----------------------------------------\n\nTITLE: Example JSON response for adding a product to a receipt\nDESCRIPTION: This JSON snippet shows the expected response structure when a product is successfully added to a receipt using the `transactions.addTransactionProduct` API method. The `transaction_product` field in the response contains the ID of the added product within the current transaction.\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/transactions/addTransactionProduct.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"response\":{\n    \"transaction_product\":10990\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: finance.removeCashShiftTransaction Response Example in JSON\nDESCRIPTION: This JSON snippet shows the expected response when a register shift transaction is successfully removed using the `finance.removeCashShiftTransaction` API. The response includes a `response` field with a boolean value of `true`, indicating success. This confirms that the specified transaction has been removed.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/finance/removeCashShiftTransaction.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"response\":true\n}\n```\n\n----------------------------------------\n\nTITLE: OAuth2 Authorization URL Structure for Poster API\nDESCRIPTION: URL patterns for initiating the OAuth2 authorization flow with the Poster API. The first pattern is general, while the second is account-specific.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/start/authApi.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://joinposter.com/api/auth?client_id={client_id}&redirect_uri={redirect_uri}&response_type=code\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://{account}.joinposter.com/api/auth?application_id={application_id}&redirect_uri={redirect_uri}&response_type=code\n```\n\n----------------------------------------\n\nTITLE: JSON Response Format for Time Zone Request\nDESCRIPTION: The expected JSON response format from the settings.getTimeZones endpoint. The response contains a 'value' field with the account time zone string in the format 'Region/City'.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/settings/getTimeZones.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"response\":{\n    \"value\":\"Europe\\/Kiev\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Response from menu.updatePrepack API in JSON\nDESCRIPTION: This JSON snippet shows the expected response from the `menu.updatePrepack` API endpoint after a successful update. The `response` field contains the updated semi-finished product ID in the products table.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/menu/updatePrepack.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"response\": 919\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Storage Module Namespace\nDESCRIPTION: Indicates that all storage-related methods are prefixed with 'storage' in the API.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/storage/index.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# storage: Storage\n```\n\n----------------------------------------\n\nTITLE: Ingredient Update JSON Response\nDESCRIPTION: Example JSON response from the Joinposter API after successfully updating an ingredient, returning the updated ingredient's ID.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/menu/updateIngredient.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{  \n  \"response\": 811\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Response for Remove Register API\nDESCRIPTION: This JSON response example represents the expected result when a register is successfully removed via the access.removeTablet API. A response of 'true' indicates that the operation was successful.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/access/removeTablet.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{  \n  \"response\":true\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Device Messages in Android Kotlin\nDESCRIPTION: This snippet shows how to implement a message handler for device messages in an Android environment using Kotlin. It prints the received message and the IP address of the device it came from.\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/device/transport/events/onMessage.md#2025-04-21_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nPosterTransport.onMessage = { device, message ->\n    println(\"Message: $message\\nFrom: ${device.ip}\")\n}\n```\n\n----------------------------------------\n\nTITLE: Successful 1C Ingredient Category ID Update Response\nDESCRIPTION: JSON response indicating successful update of ingredient category ID in the 1C system\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/menu/set1cCategoryIngredientsId.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"success\":1\n}\n```\n\n----------------------------------------\n\nTITLE: API Response for Client Group Update\nDESCRIPTION: Shows the standard JSON response format when successfully updating a client group, returning the ID of the modified group\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/clients/updateGroup.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"response\":6\n}\n```\n\n----------------------------------------\n\nTITLE: Documentation Navigation Structure in Markdown\nDESCRIPTION: Hierarchical navigation structure for API documentation showing all available endpoints and sections organized by functionality.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/_sidebar.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- [Introduction](/en/docs/v3/start/index)\n    - [Sending requests](/en/docs/v3/start/request)\n    - [Authorization in API](/en/docs/v3/start/authApi)\n    - [FAQ](/en/docs/v3/start/faq)\n\n- [Apps Marketplace](/en/docs/v3/market/index)\n    - [Release](/en/docs/v3/market/release)\n    - [Guidelines](/en/docs/v3/market/guidelines/index)\n        - [Online ordering](/en/docs/v3/market/guidelines/e-commerce)\n        - [Property Management System](/en/docs/v3/market/guidelines/pms)\n```\n\n----------------------------------------\n\nTITLE: Storage Supply Creation Response Format\nDESCRIPTION: Example JSON response from the storage.createSupply endpoint showing a successful supply creation. Returns success status and the ID of the created supply.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/storage/createSupply.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"success\":1,\n  \"response\":7\n}\n```\n\n----------------------------------------\n\nTITLE: Response Example for Updating Category Properties\nDESCRIPTION: This JSON snippet illustrates the expected response from the `menu.updateCategory` API endpoint after successfully updating a product category. The response contains the `response` parameter, which holds the ID of the updated product category. In this case, the updated category ID is 34.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/menu/updateCategory.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"response\": 34\n}\n```\n\n----------------------------------------\n\nTITLE: API Error Response Format\nDESCRIPTION: Example of an error JSON response from the Poster API, showing the structure of error messages with error code and descriptive message.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/start/request.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"error\":{\n      \"code\":11,\n      \"message\":\"Bad access token\"\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Application Bundle to Poster Marketplace using npm\nDESCRIPTION: This command is used to deploy the finished application bundle to the Poster Marketplace. It utilizes the POS platform boilerplate's deployment script.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/pos/deploy.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm run deploy\n```\n\n----------------------------------------\n\nTITLE: Storage Supply Update Response Format\nDESCRIPTION: JSON response structure returned after successfully updating a supply. Returns success status and the ID of the updated supply.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/storage/updateSupply.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"success\":1,\n  \"response\":\"51\"\n}\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response for failedPrintFiscal Event\nDESCRIPTION: This JSON object represents the response structure when a 'failedPrintFiscal' event occurs. It includes details about the order, user ID, error code, and error text.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/pos/events/failedPrintFiscal.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"order\":{\n      \"id\":1544009608209,\n      \"dateStart\":1544009608209,\n      \"dateClose\":0,\n      \"datePrint\":0,\n      \"status\":2,\n      \"userId\":40,\n      \"tableId\":5,\n      \"orderName\":77624,\n      \"guestsCount\":2,\n      \"products\":{\n         \"0\":{\n            \"id\":309,\n            \"count\":1,\n            \"price\":280,\n            \"printedNum\":0,\n            \"nodiscount\":0,\n            \"taxId\":1,\n            \"taxValue\":6,\n            \"taxType\":2,\n            \"taxFiscal\":true,\n            \"roundSum\":0\n         }\n      },\n      \"subtotal\":280,\n      \"total\":280,\n      \"discount\":0,\n      \"clientId\":0,\n      \"payType\":\"mix\",\n      \"payedSum\":0,\n      \"payedCard\":0,\n      \"payedCash\":280,\n      \"payedBonus\":0,\n      \"approvedBonus\":0,\n      \"platformDiscount\":0,\n      \"loyaltyAppId\":0,\n      \"parentId\":0,\n      \"tipIncluded\":0,\n      \"tipSum\":0,\n      \"roundSum\":0,\n      \"printFiscal\":0,\n      \"comment\":\"\"\n   },\n   \"userId\":40,\n   \"errorCode\":\"050A\",\n   \"errorText\":\"Forbidden tax\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Reservation Properties with PHP\nDESCRIPTION: This PHP code snippet demonstrates how to make an HTTP GET request to the incomingOrders.getReservation endpoint. It includes the necessary token and incoming_order_id parameters.\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/incomingOrders/getReservation.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/incomingOrders.getReservation'\n . '?token=687409:4164553abf6a031302898da7800b59fb'\n . '&incoming_order_id=3';\n\n$data = sendRequest($url);\n\n```\n\n----------------------------------------\n\nTITLE: Storage Transfer Update Response\nDESCRIPTION: Example JSON response from the storage.updateMoving endpoint showing a successful update operation with the ID of the updated transfer.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/storage/updateMoving.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"success\":1,\n  \"response\":16\n}\n```\n\n----------------------------------------\n\nTITLE: API Response Example in JSON\nDESCRIPTION: This JSON snippet shows an example of the API response. The response contains a 'response' field with a numeric value.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/template.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"response\":6\n}\n```\n\n----------------------------------------\n\nTITLE: Response Format for Updating Manufacture Data\nDESCRIPTION: This JSON snippet shows the expected response format when successfully updating manufacture data. The response contains a single field 'response' with the ID of the edited manufacture.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/storage/updateManufacture.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"response\":6\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Response Structure for Order Transactions\nDESCRIPTION: Example response showing the structure of transaction data including order details, payment information, and product details. Contains pagination metadata and order counts.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/transactions/getTransactions.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{  \n  \"response\":{  \n    \"count\":41,\n    \"page\":{  \n      \"per_page\":10,\n      \"page\":5,\n      \"count\":1\n    },\n    \"data\":[  \n      {  \n        \"transaction_id\":25221,\n        \"table_id\":1,\n        \"spot_id\":1,\n        \"client_id\":68,\n        \"sum\":360,\n        \"payed_sum\":0,\n        \"payed_cash\":0,\n        \"payed_card\":0,\n        \"payed_cert\":0,\n        \"payed_bonus\":0,\n        \"payed_third_party\":0,\n        \"round_sum\":0,\n        \"pay_type\":3,\n        \"reason\":0,\n        \"tip_sum\": 0,\n        \"bonus\":0,\n        \"discount\":100,\n        \"print_fiscal\":0,\n        \"date_close\":\"2017-11-30 13:48:09\",\n        \"products\":[  \n          {  \n            \"product_id\":469,\n            \"modification_id\":0,\n            \"type\":2,\n            \"workshop_id\":2,\n            \"num\":2,\n            \"product_sum\":360,\n            \"payed_sum\":0,\n            \"cert_sum\":0,\n            \"fiscal_company_id\": 0,\n            \"bonus_sum\":0,\n            \"bonus_accrual\":0,\n            \"round_sum\":0,\n            \"discount\":100,\n            \"tax_fiscal\":1\n          }\n        ]\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Requesting Online Order Details using Joinposter API\nDESCRIPTION: This code snippet demonstrates how to make a request to the Joinposter API to retrieve details of an online order using its ID.  It constructs the URL with the API endpoint, token, and incoming order ID, then uses a `sendRequest` function (assumed to be defined elsewhere) to send the request and retrieve the data. The `sendRequest` function handles the actual HTTP request.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/incomingOrders/getIncomingOrder.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/incomingOrders.getIncomingOrder'\n . '?token=687409:4164553abf6a031302898da7800b59fb'\n . '&incoming_order_id=1';\n\n$data = sendRequest($url);\n?>\n```\n\n----------------------------------------\n\nTITLE: JSON Response for Successful Customer ID Update in 1C System\nDESCRIPTION: This JSON snippet shows the expected response format when the customer ID is successfully updated in the 1C system. The 'success' parameter with a value of 1 indicates a successful operation.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/clients/set1cClientId.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{  \n  \"success\":1\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Response from storage.updateWriteOff API\nDESCRIPTION: This JSON response shows a successful update of a waste record. The response includes a success indicator and the ID of the updated waste record.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/storage/updateWriteOff.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"success\":1,\n  \"response\":56\n}\n```\n\n----------------------------------------\n\nTITLE: API Response for Client ID Update\nDESCRIPTION: JSON response indicating successful update of client ID in the 1C system. Returns a success status of 1 when the operation is completed.\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/clients/set1cClientId.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"success\":1\n}\n```\n\n----------------------------------------\n\nTITLE: Storage Transfer API Response JSON Format\nDESCRIPTION: Example JSON response from the storage.createMoving API call. The response indicates a successful operation with value 1 and includes the created transfer ID in the response field.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/storage/createMoving.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"success\":1,\n  \"response\":5\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Employee Properties with access.updateEmployee\nDESCRIPTION: This PHP code snippet demonstrates how to update employee properties using the `access.updateEmployee` endpoint. It sends a POST request to the specified URL with an array of employee data, including `user_id`, `name`, `user_type`, `pos_pass`, `login`, and `pass`. The `sendRequest` function (not defined here) is assumed to handle the actual HTTP request.\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/access/updateEmployee.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/access.updateEmployee'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$employee = [\n    'user_id'   => 15,\n    'name'      => 'Рената Ковалёва',\n    'user_type' => 2,\n    'pos_pass'  => '',\n    'login'     => 'renata.kovaljova@test.com',\n    'pass'      => 'aZntaeVP9h',\n];\n\n$data = sendRequest($url, 'post', $employee);\n```\n\n----------------------------------------\n\nTITLE: Response Structure for Ingredient ID Update\nDESCRIPTION: This JSON snippet shows the expected response structure upon successfully updating the ingredient ID in the 1C system using the JoinPoster API. A 'success' parameter with a value of 1 indicates a successful operation.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/menu/set1cIngredientId.md#2025-04-21_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{  \n  \"success\":1\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Response for Cash Shift Transaction Creation in Poster API\nDESCRIPTION: This JSON example shows the response format after successfully creating a cash shift transaction. The response contains a cash_shift_transaction_id that identifies the newly created transaction.\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/finance/createCashShiftTransaction.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{  \n  \"response\":{  \n    \"cash_shift_transaction_id\":1649\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Response Structure for Online Order Details\nDESCRIPTION: This JSON snippet illustrates the structure of the response returned by the incomingOrders.getIncomingOrder method. It includes detailed information about the order such as customer details, order status, creation date, and a list of products in the order.\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/incomingOrders/getIncomingOrder.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{  \n  \"response\":{  \n    \"incoming_order_id\":1,\n    \"spot_id\":1,\n    \"status\":1,\n    \"client_id\":0,\n    \"first_name\":\"Антон\",\n    \"last_name\":\"Талышкин\",\n    \"phone\":\"79630313844\",\n    \"email\":\"contact@joinposter.com\",\n    \"sex\":1,\n    \"birthday\":\"1986-11-23\",\n    \"address\":\"ул. Малышева, 3\",\n    \"comment\":\"\",\n    \"created_at\":\"2017-10-26 14:58:02\",\n    \"updated_at\":\"2017-10-26 15:25:17\",\n    \"transaction_id\":1949,\n    \"products\":[  \n      {  \n        \"io_product_id\":1,\n        \"product_id\":113,\n        \"modificator_id\":null,\n        \"incoming_order_id\":1,\n        \"count\":1,\n        \"created_at\":\"2017-10-26 14:58:02\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: clients.removeClient API Response in JSON\nDESCRIPTION: This JSON snippet represents the expected response from the clients.removeClient API endpoint after a successful client deletion. The 'response' parameter indicates whether the client was successfully deleted.\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/clients/removeClient.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"response\":true\n}\n```\n\n----------------------------------------\n\nTITLE: Finance.updateTax Response Format - JSON\nDESCRIPTION: This snippet illustrates the expected JSON response format from the finance.updateTax API request after executing the update operation. The response contains an object with the tax ID that was updated, indicating success.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/finance/updateTax.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"response\":{\n    \"tax_id\":3\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Products from Joinposter API using PHP\nDESCRIPTION: This PHP code snippet demonstrates how to construct and send a GET request to the Joinposter API's `menu.getProducts` endpoint. It includes parameters for authentication token, category ID, and specifying the type of data to retrieve (products). The `sendRequest` function (not defined in the snippet) is expected to handle the actual API call and return the response.\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/menu/getProducts.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/menu.getProducts'\n . '?token=687409:4164553abf6a031302898da7800b59fb'\n . '&category_id=15'\n . '&type=products';\n\n$data = sendRequest($url);\n```\n\n----------------------------------------\n\nTITLE: Online Order Response Structure in JSON\nDESCRIPTION: This JSON represents the example response returned by the JoinPoster API after successfully creating an online order. It includes detailed information about the order such as ID, status, customer details, and product list.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/incomingOrders/createIncomingOrder.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"response\":{\n    \"incoming_order_id\":2,\n    \"spot_id\":1,\n    \"status\":0,\n    \"client_id\":0,\n    \"first_name\":null,\n    \"last_name\":null,\n    \"phone\":null,\n    \"email\":null,\n    \"sex\":null,\n    \"birthday\":null,\n    \"address\":null,\n    \"comment\":null,\n    \"created_at\":\"2017-10-27 11:47:19\",\n    \"updated_at\":\"2017-10-27 11:47:19\",\n    \"transaction_id\":null,\n    \"fiscal_spreading\":0,\n    \"fiscal_method\":\"\",\n    \"products\":[  \n      {  \n        \"io_product_id\":2,\n        \"product_id\":169,\n        \"modificator_id\":null,\n        \"incoming_order_id\":2,\n        \"count\":1,\n        \"created_at\":\"2017-10-27 11:47:19\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Redirect URL Structure After Successful Authorization\nDESCRIPTION: The format of the URL to which users are redirected after confirming application access, containing the authorization code and account name parameters.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/start/authApi.md#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nredirect_uri?code=code&account=account\n```\n\n----------------------------------------\n\nTITLE: Company Logo API Response Format\nDESCRIPTION: JSON response structure returned by the settings.getLogo endpoint. Contains a response object with a value parameter that holds the logo URL path.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/settings/getLogo.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"response\":{\n    \"value\":\"\\/upload\\/4\\/icon.png\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Response Structure for Customer Groups in JSON\nDESCRIPTION: This JSON snippet represents the expected response structure from the `clients.getGroups` endpoint. The `response` field is an array of objects, each representing a customer group with details such as ID, name, discount, loyalty type, birthday bonus, customer count, and deletion status.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/clients/getGroups.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"response\":[  \n    {  \n      \"client_groups_id\":\"2\",\n      \"client_groups_name\":\"Скидка Выходной\",\n      \"client_groups_discount\":\"15\",\n      \"loyalty_type\":\"1\",\n      \"birthday_bonus\":\"0\",\n      \"count_groups_clients\":\"21\",\n      \"delete\":\"0\"\n    },\n    {  \n      \"client_groups_id\":\"3\",\n      \"client_groups_name\":\"Накопительная скидка\",\n      \"client_groups_discount\":\"0\",\n      \"loyalty_type\":\"1\",\n      \"birthday_bonus\":\"0\",\n      \"count_groups_clients\":\"8\",\n      \"delete\":\"0\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Account Name API Response Format\nDESCRIPTION: JSON response example from the settings.getCompanyName endpoint, containing the account name in the value property of the response object.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/settings/getCompanyName.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"response\":{\n    \"value\":\"Демо-версия Poster\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Transactions with Joinposter API in PHP\nDESCRIPTION: This PHP snippet demonstrates how to prepare and send a POST request to update a transaction using the Joinposter API. It outlines the necessary parameters like transaction ID, type, category, and more, depending on the transaction type. The sendRequest function is assumed to handle HTTP request execution.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/finance/updateTransactions.md#2025-04-21_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/finance.updateTransactions'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$transaction = [\n    'transaction_id'    => 600,\n    'type'              => 2,\n    'category'          => 7,\n    'user_id'           => 4,\n    'amount_from'       => 1000,\n    'amount_to'         => 900,\n    'account_from'      => 1,\n    'account_to'        => 2,\n    'date'              => '16112017',\n];\n\n$data = sendRequest($url, 'post', $transaction);\n```\n\n----------------------------------------\n\nTITLE: Closing a Cash Shift in PHP\nDESCRIPTION: This snippet sends a POST request to the JoinPoster API's finance.closeCashShift endpoint to close a register shift. The data includes details like cash_shift_id, user_id, amount, time, is_fiscal, and a comment. The expected response is a JSON indicating success or failure.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/finance/closeCashShift.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/finance.closeCashShift'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$cash_shift = [\n    'cash_shift_id' => 335,\n    'user_id'       => 3,\n    'amount'        => 234.56,\n    'time'          => '2017-09-21 20:00',\n    'is_fiscal'     => 1,\n    'comment'       => 'бар',\n];\n\ndata = sendRequest($url, 'post', $cash_shift);\n\n```\n\n----------------------------------------\n\nTITLE: Successful API Response Format\nDESCRIPTION: Example of a successful JSON response from the Poster API when querying client group information. Shows the structure of the response object containing client group details.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/start/request.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"response\":{\n      \"client_groups_id\":\"1\",\n      \"client_groups_name\":\"Favourite customer\",\n      \"loyalty_type\":\"1\",\n      \"client_groups_discount\":\"10\",\n      \"birthday_bonus\":\"5000\",\n      \"count_groups_clients\":\"125\"\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Requesting Client Data via API in PHP\nDESCRIPTION: This PHP snippet demonstrates how to construct and send an API request to retrieve client data using the `clients.getClient` method. It defines the API endpoint URL with necessary parameters like the token and client ID, and calls a `sendRequest` function (not defined in the snippet) to execute the request.  The URL includes the API endpoint, authentication token, and the specific client ID being requested.\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/clients/getClient.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/clients.getClient'\n . '?token=687409:4164553abf6a031302898da7800b59fb'\n . '&client_id=6';\n\n$data = sendRequest($url);\n?>\n```\n\n----------------------------------------\n\nTITLE: Signature Verification in PHP\nDESCRIPTION: PHP implementation for verifying request signatures. Concatenates URL, request body, timestamp, and secret key to generate and verify MD5 hash signature.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/pos/requests/makeRequest.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nfunction checkSign($url, $headers, $body, $secret) {\n    $signatureStr = $url . ($body ? json_encode($body) : \"\") . $headers['X-Poster-Time'] . $secret;\n    $signature = md5($signatureStr);\n    \n    return $headers['X-Poster-Signature'] == $signature;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Cash Shift Transaction with PHP in Poster API\nDESCRIPTION: This PHP example demonstrates how to create a cash shift transaction by sending a POST request to the finance.createCashShiftTransaction endpoint. The request includes parameters like cash_shift_id, type_id, category_id, user_id, amount, time, is_fiscal, and comment.\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/finance/createCashShiftTransaction.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/finance.createCashShiftTransaction'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$cash_shift_transaction = [\n    'cash_shift_id' => 333,\n    'type_id'       => 3,\n    'category_id'   => 4,\n    'user_id'       => 1,\n    'amount'        => 499.99,\n    'time'          => '2017-09-21 15:00',\n    'is_fiscal'     => 1,\n    'comment'       => 'Расход',\n];\n\n$data = sendRequest($url, 'post', $cash_shift_transaction);\n```\n\n----------------------------------------\n\nTITLE: JSON Response Format for Floor Sections List\nDESCRIPTION: This JSON shows the response structure returned by the spots.getSpotTablesHalls endpoint. It contains an array of floor section objects with properties like ID, name, order, location ID, deletion status, and last modified time.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/spots/getSpotTablesHalls.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{  \n  \"response\":[  \n    {  \n      \"hall_id\":\"3\",\n      \"hall_name\":\"Зал в кафе на Полянке\",\n      \"hall_order\":\"1\",\n      \"spot_id\":\"1\",\n      \"delete\":\"0\",\n      \"last_modified_time\":\"2017-06-22 13:54:58\"\n    },\n    {  \n      \"hall_id\":\"5\",\n      \"hall_name\":\"Зал у львівській кав&#39;ярні\",\n      \"hall_order\":\"2\",\n      \"spot_id\":\"2\",\n      \"delete\":\"0\",\n      \"last_modified_time\":\"2017-06-22 13:54:58\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Change Fiscal Status API Response Example in JSON\nDESCRIPTION: Example of successful response from the fiscal status change endpoint showing error code 0 indicating success.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/transactions/changeFiscalStatus.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"response\":{\n      \"err_code\":0\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Recover Category with PHP\nDESCRIPTION: This PHP code snippet demonstrates how to recover a category using the `menu.recoverCategory` API endpoint. It defines the API URL, constructs an array with the necessary category parameters (category_id and parent_category_id), and then sends a POST request to the API. The `sendRequest` function is assumed to be defined elsewhere and handles the actual request sending.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/menu/recoverCategory.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/menu.recoverCategory'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$category = [\n    'category_id' => 48,\n    'parent_category_id' => 10,\n];\n\n$data = sendRequest($url, 'post', $category);\n?>\n```\n\n----------------------------------------\n\nTITLE: Manufacture Wastes API Response Structure in JSON\nDESCRIPTION: This JSON snippet illustrates the structure of the response from the storage.getManufacturesWriteOffs API. It includes pagination information, total count, and detailed data about manufacture wastes, including products and write-offs.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/storage/getManufacturesWriteOffs.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{  \n  \"response\":{  \n    \"count\":11,\n    \"page\":{  \n      \"per_page\":10,\n      \"page\":2,\n      \"count\":1\n    },\n    \"data\":[  \n      {  \n        \"manufacture_id\":15,\n        \"storage_id\":2,\n        \"date\":\"2017-11-30 15:00:00\",\n        \"products\":[  \n          {  \n            \"product_id\":105,\n            \"type\":2,\n            \"num\":10,\n            \"sum\":123.45,\n            \"sum_netto\":102.88,\n            \"is_fiscal\":0,\n            \"write_offs\":[  \n              {  \n                \"ingredient_id\":165,\n                \"type\":1,\n                \"weight\":123.45\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Product Without Modifications in PHP\nDESCRIPTION: API request to create a simple product without modification options in Joinposter menu system. Demonstrates setting basic product attributes like name, category, weight, pricing, and visibility.\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/menu/createProduct.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/menu.createProduct'\n  . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$product = [\n    'product_name'           => 'Пончик',\n    'menu_category_id'       => 0,\n    'workshop'               => 1,\n    'weight_flag'            => 0,\n    'color'                  => 'red',\n    'different_spots_prices' => 0,\n    'modifications'          => 0,\n    'barcode'                => '4820098749621',\n    'cost'                   => 2000,\n    'price'                  => 3000,\n    'visible'                => 1,\n    'fiscal_code'            => 1234567890,\n];\n\n$data = sendRequest($url, 'post', $product);\n```\n\n----------------------------------------\n\nTITLE: Response Format for Non-Manual Wastes API\nDESCRIPTION: Example JSON response from the storage.getIngredientWriteOff endpoint. The response includes detailed information about waste records including IDs, quantities, costs, and related product information.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/storage/getIngredientWriteOff.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"response\":[\n    {\n      \"write_off_id\":\"1518217\",\n      \"transaction_id\":\"388684\",\n      \"tr_product_id\":\"2125179\",\n      \"storage_id\":\"1\",\n      \"to_storage\":\"0\",\n      \"ingredient_id\":\"936\",\n      \"product_id\":\"934\",\n      \"modificator_id\":\"0\",\n      \"prepack_id\":\"0\",\n      \"weight\":\"1.00000\",\n      \"unit\":\"p\",\n      \"cost\":\"0\",\n      \"cost_netto\":\"0\",\n      \"user_id\":\"1\",\n      \"type\":\"1\",\n      \"time\":\"1510668937861\",\n      \"date\":\"2017-11-14 17:15:38\",\n      \"reason\":\"\",\n      \"product_name\":\"Fiscal Test\",\n      \"name\":\"Demo\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Querying storage.getPack with PHP\nDESCRIPTION: This PHP code snippet demonstrates how to make a GET request to the storage.getPack API endpoint to retrieve details for a specific pack, identified by pack_id. It constructs the URL with necessary parameters like format, token, and pack_id, and then sends a request.\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/storage/getPack.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/storage.getPack' \n  . '?format=json'\n  . '&token=687409:4164553abf6a031302898da7800b59fb'\n  . '&pack_id=4';\n\n$data = sendRequest($url);\n```\n\n----------------------------------------\n\nTITLE: Setting Extras for an Order using orders.setExtras in Poster API\nDESCRIPTION: This snippet demonstrates how to use the Poster.orders.setExtras method to attach extra information to a specific order. It includes the order ID, a key for the extras, and a JSON string representing the extra information. The method returns a Promise, resolving to an object indicating success or failure.\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/pos/orders/orders-setExtras.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar result = await Poster.orders.setExtras(1503219480866, \"extras_key\", JSON.stringify({ \n    object: 'extra info' \n}));\n\nconsole.log(result); // { success: true }\n```\n\n----------------------------------------\n\nTITLE: Requesting Customer Group Properties in PHP\nDESCRIPTION: This PHP snippet constructs an HTTP GET request to the JoinPoster API to retrieve properties of a specified customer group. It requires an API token and the group ID as parameters. The output is expected to be a JSON response containing group details such as ID, name, discount, and other attributes.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/clients/getGroup.md#2025-04-21_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/clients.getGroup'\n . '?token=687409:4164553abf6a031302898da7800b59fb'\n . '&group_id=2';\n\n$data = sendRequest($url);\n```\n\n----------------------------------------\n\nTITLE: Saving Product ID with Entity Extras in JoinPoster\nDESCRIPTION: This PHP snippet demonstrates how to save the product's ID in an external system using the application.setEntityExtras method of the JoinPoster API. It requires a valid API token and constructs the extras payload containing the entity type and ID.\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/application/setEntityExtras.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// Сохраняем id товара в сторонней системе\n<?php\n$url = 'https://joinposter.com/api/application.setEntityExtras'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$extras = [\n    \"entity_type\"   => \"product\",\n    \"entity_id\"     => 4,\n    \"extras\"        => [\n        \"sideId\" => \"1\"\n    ]\n];\n\n$data = sendRequest($url, 'post', $extras);\n\n```\n\n----------------------------------------\n\nTITLE: Handling Order Creation Event in Poster API - JavaScript\nDESCRIPTION: This snippet listens for the 'orderOpen' event from the Poster API, logging the details of the newly created order to the console. It enables developers to respond to order creation events promptly, utilizing the order data as needed. The event callback receives an object with properties related to the new order, which can be further processed.\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/pos/events/orderOpen.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nPoster.on('orderOpen', (order) => {\n\tconsole.log(order);\n})\n```\n\n----------------------------------------\n\nTITLE: Removing a Semi-Finished Product in PHP\nDESCRIPTION: This snippet demonstrates how to make a POST request to the menu.removePrepack API using PHP. It requires the product ID to be removed and includes a sample URL structure with a token for authentication. The snippet captures the response which confirms the success of the operation.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/menu/removePrepack.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/menu.removePrepack'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$prepack = [\n    'prepack_id' => 177,\n];\n\n$data = sendRequest($url, 'post', $prepack);\n\n```\n\n----------------------------------------\n\nTITLE: Creating Storage Movement with PHP\nDESCRIPTION: Example of making a POST request to create a storage movement between two locations. Shows how to structure the request data including movement details and ingredient specifications.\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/storage/createMoving.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/storage.createMoving'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$moving = [\n    \"moving\" => [\n        \"date\"          => \"2015-11-18 22:35:54\",\n        \"from_storage\"  => \"1\",\n        \"to_storage\"    => \"2\",\n        \"comment\"       => \"Comment for moving\"\n    ],\n    \"ingredient\" => [\n        [\n            \"id\"        => \"138\",\n            \"type\"      => \"1\",\n            \"num\"       => \"3\",\n        ]\n    ]\n];\n\n$data = sendRequest($url, 'post', $moving);\n```\n\n----------------------------------------\n\nTITLE: PHP Implementation for Obtaining Access Token\nDESCRIPTION: PHP code snippet demonstrating how to send a POST request to obtain an access token using the authorization code. It includes required parameters like application_id, application_secret, and redirect_uri.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/start/authApi.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$account = $_GET['account'];\n$code = $_GET['code'];\n\n$url = \"https://$account.joinposter.com/api/v2/auth/access_token\"; \n\n$auth = [\n    'application_id'        => 76,\n    'application_secret'    => '9642176a5cdfe3f65e6e00c27b668795',\n    'grant_type'            => 'authorization_code',\n    'redirect_uri'          => 'http://localhost:8080/',\n    'code'                  => $code\n];\n\n$data = sendRequest($url, 'post', $auth);\n```\n\n----------------------------------------\n\nTITLE: Removing a Tax using finance.removeTax API in PHP\nDESCRIPTION: This code snippet demonstrates how to remove a tax using the `finance.removeTax` API endpoint. It constructs the API URL, sets the `tax_id`, and sends a POST request to the API. The code assumes the existence of a `sendRequest` function to handle the HTTP request.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/finance/removeTax.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/finance.removeTax'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$tax = [\n    'tax_id' => 3,\n];\n\n$data = sendRequest($url, 'post', $tax);\n?>\n```\n\n----------------------------------------\n\nTITLE: Creating a Register using PHP\nDESCRIPTION: This PHP code snippet demonstrates how to create a new register using the access.createTablet API method. It sets up the request URL with an authentication token, defines the register details, and sends a POST request to the API.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/access/createTablet.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/access.createTablet'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$tablet = [\n    'spot_id'          => 1,\n    'spot_tablet_name' => 'My new tablet',\n    'spot_code'        => 'crsa5a54',\n];\n\n$data = sendRequest($url, 'post', $tablet);\n```\n\n----------------------------------------\n\nTITLE: JSON Response from clients.create API call\nDESCRIPTION: This shows the structure of the JSON response returned by the clients.create method. The response includes the created client object with properties like id, firstname, lastname, groupId, discount, and other customer attributes.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/pos/clients/clients-create.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"client\":{\n    \"address\":\"0\",\n    \"bonus\":0,\n    \"discount\":10,\n    \"firstname\":\"Vladimir\",\n    \"groupId\":1,\n    \"id\":33,\n    \"lastname\":\"Ivanchenko\",\n    \"loyaltyType\":1,\n    \"phone\":\"\",\n    \"totalPayedSum\":0\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Request to Get Transactions - PHP\nDESCRIPTION: This PHP snippet demonstrates how to construct a GET request to the JoinPoster API for retrieving transactions. It constructs the request URL with necessary parameters such as token and date range, and then calls the sendRequest function to execute the request.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/finance/getTransactions.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/finance.getTransactions'\n . '?token=687409:4164553abf6a031302898da7800b59fb'\n . '&dateFrom=20170701'\n . '&dateTo=20170901';\n\ndata = sendRequest($url);\n\n```\n\n----------------------------------------\n\nTITLE: Storage Transfers API Response Format\nDESCRIPTION: Example JSON response showing the structure of transfer records. Each record includes transfer ID, date, source and destination storage details, user information, and transfer amounts with and without VAT.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/storage/getMoves.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"response\":[\n    {\n      \"moving_id\":4,\n      \"date\":\"2017-11-16 21:34:00\",\n      \"from_storage\":1,\n      \"from_storage_name\":\"Склад Кухня\",\n      \"to_storage\":2,\n      \"to_storage_name\":\"Склад Бар\",\n      \"user_id\":7,\n      \"user_name\":\"Vladimir\",\n      \"sum\":150.65,\n      \"sum_netto\":125.54\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Client Groups API Response Example\nDESCRIPTION: JSON response structure for client groups API endpoint, showing detailed group information including ID, name, discount, loyalty type, and client count\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/clients/getGroups.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"response\":[\n    {\n      \"client_groups_id\":\"2\",\n      \"client_groups_name\":\"Скидка Выходной\",\n      \"client_groups_discount\":\"15\",\n      \"loyalty_type\":\"1\",\n      \"birthday_bonus\":\"0\",\n      \"count_groups_clients\":\"21\",\n      \"use_ewallet\":\"0\",\n      \"delete\":\"0\"\n    },\n    {\n      \"client_groups_id\":\"3\",\n      \"client_groups_name\":\"Накопительная скидка\",\n      \"client_groups_discount\":\"0\",\n      \"loyalty_type\":\"1\",\n      \"birthday_bonus\":\"0\",\n      \"count_groups_clients\":\"8\",\n      \"use_ewallet\":\"0\",\n      \"delete\":\"0\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Workshop using Joinposter API\nDESCRIPTION: This PHP code snippet demonstrates how to create a workshop using the `menu.createWorkshop` endpoint of the Joinposter API. It sends a POST request with the workshop name and retrieves the ID of the newly created workshop.\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/menu/createWorkshop.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/menu.createWorkshop'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$workshop = [\n    'workshop_name' => 'Мангал',\n];\n\n$data = sendRequest($url, 'post', $workshop);\n```\n\n----------------------------------------\n\nTITLE: Creating Employee with PHP API Request\nDESCRIPTION: Demonstrates how to create a new employee in the Joinposter system using PHP, with configuration for name, login, password, and user type\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/access/createEmployee.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/access.createEmployee'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$employee = [\n    'name'      => 'Рената Ковалёва',\n    'user_type' => 2,\n    'pos_pass'  => '',\n    'login'     => 'renata.kovaljova@test.com',\n    'pass'      => 'aZntaeVP9h',\n];\n\n$data = sendRequest($url, 'post', $employee);\n```\n\n----------------------------------------\n\nTITLE: Fetching Product Properties with menu.getProduct API\nDESCRIPTION: This code snippet demonstrates how to make a request to the `menu.getProduct` API endpoint to retrieve the properties of a specific product. It constructs the URL with the necessary parameters, including the API token and the product ID.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/menu/getProduct.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/menu.getProduct'\n . '?token=687409:4164553abf6a031302898da7800b59fb'\n . '&product_id=142';\n\n$data = sendRequest($url);\n?>\n```\n\n----------------------------------------\n\nTITLE: Fetching Dish Properties with menu.getProduct API\nDESCRIPTION: This code snippet demonstrates how to make a request to the `menu.getProduct` API endpoint to retrieve properties of a specific dish. It constructs the URL with the necessary parameters, including the API token and the dish ID.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/menu/getProduct.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/menu.getProduct'\n . '?token=687409:4164553abf6a031302898da7800b59fb'\n . '&product_id=175';\n\n$data = sendRequest($url);\n?>\n```\n\n----------------------------------------\n\nTITLE: Example API Response from Joinposter in JSON\nDESCRIPTION: This JSON snippet represents the expected response structure from the Joinposter API's 'settings.getCompanyName' endpoint. The response contains a 'response' object, which in turn contains a 'value' field representing the company name. The 'value' field holds a string containing the company's name.\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/settings/getCompanyName.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"response\":{\n    \"value\":\"Демо-версия Poster\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing Poster API Account Creation Response in JSON\nDESCRIPTION: This snippet shows an example of a JSON response received after successfully creating a new account with the Poster API. The response includes the ID of the created account, which is useful for further API interactions. The response format is straightforward with minimal parameters.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/finance/createAccount.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"response\":4\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Order with PHP API Request\nDESCRIPTION: Example of making a POST request to remove an order using PHP. Demonstrates setting required parameters including spot_tablet_id, transaction_id, and user_id.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/transactions/removeTransaction.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/transactions.removeTransaction'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$transaction = [\n    'spot_tablet_id' => 1,\n    'transaction_id' => 1950,\n    'user_id'        => 3,\n];\n\n$data = sendRequest($url, 'post', $transaction);\n```\n\n----------------------------------------\n\nTITLE: Adding a Customer to a Register Order with orders.setOrderClient in JavaScript\nDESCRIPTION: This JavaScript example demonstrates how to use the Poster.orders.setOrderClient method to add a customer to an open order. It takes an order ID and client ID as arguments and returns a Promise with the operation result.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/pos/orders/orders-setOrderClient.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nPoster.orders.setOrderClient(1509032509980, 30)\n    .then(function (result) {\n        console.log('client added', result);    \n    })\n```\n\n----------------------------------------\n\nTITLE: Subscribing to 'beforeOrderClose' Event in Poster Cash Program (JavaScript)\nDESCRIPTION: This snippet demonstrates how to subscribe to the 'beforeOrderClose' event using Poster.on method. It shows the basic structure of an event handler, including the use of the next function to continue execution.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/pos/events/index.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nPoster.on('beforeOrderClose', (data, next) => {\n\talert(\"Alert before order close\");\n\tnext();\n});\n```\n\n----------------------------------------\n\nTITLE: Listening for orderClientChange Event in JavaScript\nDESCRIPTION: This code snippet demonstrates how to listen for the orderClientChange event using the Poster.on() method. The event is triggered when a customer is attached to or removed from an order. The handler logs the received data object to the console.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/pos/events/orderClientChange.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nPoster.on('orderClientChange', (data) => {\n\tconsole.log(data);\n})\n```\n\n----------------------------------------\n\nTITLE: Ingredients Creation Response in JSON\nDESCRIPTION: This JSON snippet represents the expected response from the `menu.createIngredients` API endpoint after successfully creating the ingredients. It includes an array of IDs corresponding to the newly created ingredients. The response parameter contains a list of ingredient IDs.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/menu/createIngredients.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"response\": [\n    7,\n    8\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Example Response for access.updateEmployee\nDESCRIPTION: This JSON snippet shows an example response from the `access.updateEmployee` endpoint after a successful employee update. The `response` field contains the ID of the modified employee. This ID can be used to verify the update or for subsequent operations on the employee.\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/access/updateEmployee.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"response\":4082\n}\n```\n\n----------------------------------------\n\nTITLE: finance.closeCashShift Response Example in JSON\nDESCRIPTION: This JSON snippet demonstrates the expected response from the `finance.closeCashShift` endpoint after successfully closing a cash shift. The response contains a single key, `response`, which is set to `true` to indicate a successful operation.\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/finance/closeCashShift.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"response\":true\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Active Order with Poster API in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the `Poster.orders.getActive()` method to retrieve the current active order. The method returns a promise that resolves with an order object if a user is on the order or payment screen.\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/pos/orders/orders-getActive.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nPoster.orders.getActive()\n    .then(function (order) {\n        console.log('active order', order);\n    })\n```\n\n----------------------------------------\n\nTITLE: Making API Request with Poster.makeApiRequest in JavaScript\nDESCRIPTION: This code snippet demonstrates how to use the Poster.makeApiRequest method to fetch client groups. It specifies the API method, request options, and a callback function to handle the response.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/pos/requests/makeApiRequest.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nPoster.makeApiRequest('clients.getGroups', {\n    method: 'get'\n\n}, (groups) => {\n\tif (groups) {\n\t\tconsole.log(groups);\n\t}\n});\n```\n\n----------------------------------------\n\nTITLE: Successful API Response (JSON)\nDESCRIPTION: This JSON snippet represents a successful response from the 'storage.set1cSupplyId' API method after updating supply IDs in the 1C system. The 'success' parameter being equal to 1 indicates that the ID update was successful.\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/storage/set1cSupplyId.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"success\":1\n}\n```\n\n----------------------------------------\n\nTITLE: Example Response for Changing Fiscal Status\nDESCRIPTION: This JSON snippet illustrates the typical response structure received after successfully changing the fiscal status of a receipt through the JoinPoster API. The response includes an error code indicating the status of the request.\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/transactions/changeFiscalStatus.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"response\":{\n      \"err_code\":0\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Storage Leftovers with PHP\nDESCRIPTION: Example of making an HTTP GET request to retrieve storage inventory data using PHP. The request requires an authentication token and returns detailed inventory information.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/storage/getStorageLeftovers.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/storage.getStorageLeftovers'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$data = sendRequest($url);\n```\n\n----------------------------------------\n\nTITLE: Response Format for products.getFullName Method\nDESCRIPTION: Shows the JSON response format when calling the products.getFullName method. The response includes the product ID, modification ID, full product name, and modification group name.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/pos/products/products-getFullName.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 151, \n  \"modification\": 59, \n  \"name\": \"Пицца (Маргарита)\", \n  \"modGroupName\": \"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Updating 1C Client ID in PHP\nDESCRIPTION: PHP request to change a client's ID in the 1C system using the JoinPoster API. Requires client ID and 1C system ID as parameters.\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/clients/set1cClientId.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/clients.set1cClientId'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$client = [\n    'id' => [\n        [\n            'client_id' => 38,\n            'id_1c'     => 'b80ffc81-0fc9-11e7-9ab4-ace01035e460',\n        ],\n    ],\n];\n\n$data = sendRequest($url, 'post', $client);\n```\n\n----------------------------------------\n\nTITLE: Response Example\nDESCRIPTION: This JSON snippet shows the expected response format from the `menu.recoverDish` endpoint after successfully recovering a dish. The response includes a `response` field, which will be `true` upon success.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/menu/recoverDish.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"response\":true\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Storage Transfer - PHP Example\nDESCRIPTION: Example of how to delete a storage transfer using PHP. Makes a POST request to the storage.deleteMoving endpoint with a moving_id parameter.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/storage/deleteMoving.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/storage.deleteMoving'\n    . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$delete = [\n    'moving_id' => 7\n];\n\n$data = sendRequest($url, 'post', $delete);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Cash Shift Transactions with PHP\nDESCRIPTION: PHP example of making an API request to get transactions for a specific cash shift. The request requires an authentication token and a shift_id parameter.\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/finance/getCashShiftTransactions.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/finance.getCashShiftTransactions'\n . '?token=687409:4164553abf6a031302898da7800b59fb'\n . '&shift_id=333';\n\n$data = sendRequest($url);\n```\n\n----------------------------------------\n\nTITLE: Accessing Global Poster Object in JavaScript\nDESCRIPTION: Demonstrates how to access the global Poster object within the container environment. This object provides methods for event handling, data manipulation, and interface interactions in Poster.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/pos/index.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nPoster\n```\n\n----------------------------------------\n\nTITLE: access.removeSpot Response Example in JSON\nDESCRIPTION: This JSON snippet shows the expected response format after a successful `access.removeSpot` request. The `response` field indicates whether the location was successfully removed (true) or not.\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/access/removeSpot.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"response\":true\n}\n```\n\n----------------------------------------\n\nTITLE: Error Response Examples\nDESCRIPTION: Various JSON error responses that may be returned by the API, including missing fields, invalid application, and incorrect verification.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/manage/index.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"error\":34,\n  \"message\":\"Fieild client_id is required\", \n  \"field\": \"application_id\"\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"error\":143,\n  \"message\":\"Requested code's application doesn't exist\", \n  \"field\":\"application_id\"\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"error\":142,\n  \"message\":\"Verify code is not correct\", \n  \"field\": \"verify\"\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Locations List - PHP Request Example\nDESCRIPTION: Example of making an HTTP GET request to access.getSpots endpoint to retrieve locations list. Uses authentication token for authorization.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/access/getSpots.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/access.getSpots'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$data = sendRequest($url);\n```\n\n----------------------------------------\n\nTITLE: Successful Response from access.removeTablet API\nDESCRIPTION: This JSON snippet shows an example of a successful response from the `access.removeTablet` API endpoint. The `response` field set to `true` indicates that the tablet was successfully removed.\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/access/removeTablet.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"response\":true\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Reservations in PHP using JoinPoster API\nDESCRIPTION: PHP code snippet demonstrating how to make an API request to retrieve reservation list using a token-based authentication method\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/incomingOrders/getOwnReservations.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'https://joinposter.com/api/incomingOrders.getOwnReservations'\n . '?token=687409:4164553abf6a031302898da7800b59fb';\n\n$data = sendRequest($url);\n```\n\n----------------------------------------\n\nTITLE: JSON Response from clients.removeClient API\nDESCRIPTION: This JSON snippet shows the expected response format when a customer is successfully removed. The 'response' field is set to true to indicate successful removal.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/clients/removeClient.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{  \n  \"response\":true\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Response for Cash Shift Transaction Removal\nDESCRIPTION: This JSON represents the successful response from the finance.removeCashShiftTransaction endpoint. The response field is set to true when the cash shift transaction is successfully deleted.\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/finance/removeCashShiftTransaction.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{  \n  \"response\":true\n}\n```\n\n----------------------------------------\n\nTITLE: Creating New Order with Poster API\nDESCRIPTION: Demonstrates how to create a new order using the Poster.orders.create() method. The method returns a promise that resolves with the created order details.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/pos/orders/orders-create.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlet result = await Poster.orders.create();\n\nconsole.log(result);\n```\n\n----------------------------------------\n\nTITLE: Parsing JSON Response from Joinposter API in PHP\nDESCRIPTION: This JSON snippet illustrates the structure of a successful response from the Joinposter API when updating a transaction. The response contains the updated transaction ID.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/finance/updateTransactions.md#2025-04-21_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"response\":600\n}\n```\n\n----------------------------------------\n\nTITLE: Successful API Response JSON\nDESCRIPTION: Example of a successful API response showing client group details with various metadata properties\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/start/request.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"response\":{\n      \"client_groups_id\":\"1\",\n      \"client_groups_name\":\"Постоянный посетитель\",\n      \"loyalty_type\":\"1\",\n      \"client_groups_discount\":\"10\",\n      \"birthday_bonus\":\"5000\",\n      \"count_groups_clients\":\"125\"\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Response Format for finance.updateAccount Method\nDESCRIPTION: This JSON shows the response format returned after successfully updating a financial account. The 'response' field contains the ID of the updated account.\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/finance/updateAccount.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"response\":4\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Response for Creating a Dish Technical Card\nDESCRIPTION: This JSON snippet shows the expected response format when successfully creating a dish technical card. The response contains the ID of the newly created dish.\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/menu/createDish.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"response\":61\n}\n```\n\n----------------------------------------\n\nTITLE: Supported HTML Tags for Application Description\nDESCRIPTION: List of allowed HTML tags that can be used when formatting the application description content in the management console.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/market/release.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\nh, p, div, b, ul, i\n```\n\n----------------------------------------\n\nTITLE: Failed Order Closure Response\nDESCRIPTION: Example of an error response when the order closure fails. Returns an error message in JSON format when the specified order cannot be found.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/pos/orders/orders-closeOrder.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{ \"error\": \"can not find specific order\" }\n```\n\n----------------------------------------\n\nTITLE: Response Format for Add Customer to Order - JSON\nDESCRIPTION: Example of the JSON response returned by the transactions.changeClient endpoint. A successful response returns an err_code of 0.\nSOURCE: https://github.com/joinposter/docs/blob/master/en/web/transactions/changeClient.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{  \n  \"response\":{  \n    \"err_code\":0\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: API Response for Product Update Without Modifications\nDESCRIPTION: JSON response structure for a successful product update without modifications, returning the updated product ID\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/menu/updateProduct.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{  \n  \"response\": 142\n}\n```\n\n----------------------------------------\n\nTITLE: Storage Movement API Response\nDESCRIPTION: Example JSON response from the storage.createMoving endpoint showing a successful movement creation with the assigned movement ID.\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/storage/createMoving.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"success\":1,\n  \"response\":5\n}\n```\n\n----------------------------------------\n\nTITLE: API Response for Price Update\nDESCRIPTION: JSON response indicating successful price update with a success status of 1\nSOURCE: https://github.com/joinposter/docs/blob/master/ru/web/menu/updateProductPrice.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{  \n  \"success\": 1\n}\n```"
  }
]