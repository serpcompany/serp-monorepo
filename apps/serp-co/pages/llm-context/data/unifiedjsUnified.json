[
  {
    "owner": "unifiedjs",
    "repo": "unified",
    "content": "TITLE: Running a Unified Processor Pipeline with Plugins (JavaScript)\nDESCRIPTION: Shows an example usage of unified to parse, transform, and serialize a Markdown file using a series of plugins including custom ones and common remark/rehype plugins. It demonstrates asynchronous processing of a file (example.md), changing its extension through the move plugin, and writing the result to disk as example.html. Requires the following dependencies: unified, remark-parse, remark-rehype, rehype-stringify, vfile-reporter, to-vfile, and the locally defined move plugin. Inputs are paths to Markdown files; output files are written to the target path based on transformation.\nSOURCE: https://github.com/unifiedjs/unified/blob/main/readme.md#_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nimport rehypeStringify from 'rehype-stringify'\nimport remarkParse from 'remark-parse'\nimport remarkRehype from 'remark-rehype'\nimport {read, write} from 'to-vfile'\nimport {unified} from 'unified'\nimport {reporter} from 'vfile-reporter'\nimport {move} from './move.js'\n\nconst file = await unified()\n  .use(remarkParse)\n  .use(remarkRehype)\n  .use(move, {extname: '.html'})\n  .use(rehypeStringify)\n  .process(await read('example.md'))\n\nconsole.error(reporter(file))\nawait write(file) // Written to `example.html`.\n```\n\n----------------------------------------\n\nTITLE: Using unified with Plugins Example\nDESCRIPTION: This JavaScript code illustrates the core usage of the `unified` library with various plugins to process markdown and convert it to HTML. It demonstrates how to configure a processor, apply plugins, and process content.\nSOURCE: https://github.com/unifiedjs/unified/blob/main/readme.md#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport rehypeDocument from 'rehype-document'\nimport rehypeFormat from 'rehype-format'\nimport rehypeStringify from 'rehype-stringify'\nimport remarkParse from 'remark-parse'\nimport remarkRehype from 'remark-rehype'\nimport {unified} from 'unified'\nimport {reporter} from 'vfile-reporter'\n\nconst file = await unified()\n  .use(remarkParse)\n  .use(remarkRehype)\n  .use(rehypeDocument, {title: 'üëãüåç'})\n  .use(rehypeFormat)\n  .use(rehypeStringify)\n  .process('# Hello world!')\n\nconsole.error(reporter(file))\nconsole.log(String(file))\n```\n\n----------------------------------------\n\nTITLE: Processing Markdown with Unified.js\nDESCRIPTION: This snippet demonstrates the usage of the unified.js library to process Markdown content using various plugins. It parses Markdown, applies linting rules, transforms it to HTML, and finally stringifies it. Dependencies include rehype-stringify, remark-parse, remark-preset-lint-markdown-style-guide, remark-rehype, remark-retext, retext-english, retext-equality, and unified. The output includes lint messages and the final HTML output.\nSOURCE: https://github.com/unifiedjs/unified/blob/main/readme.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nimport rehypeStringify from 'rehype-stringify'\nimport remarkParse from 'remark-parse'\nimport remarkPresetLintMarkdownStyleGuide from 'remark-preset-lint-markdown-style-guide'\nimport remarkRehype from 'remark-rehype'\nimport remarkRetext from 'remark-retext'\nimport retextEnglish from 'retext-english'\nimport retextEquality from 'retext-equality'\nimport {unified} from 'unified'\nimport {reporter} from 'vfile-reporter'\n\nconst file = await unified()\n  .use(remarkParse)\n  .use(remarkPresetLintMarkdownStyleGuide)\n  .use(remarkRetext, unified().use(retextEnglish).use(retextEquality))\n  .use(remarkRehype)\n  .use(rehypeStringify)\n  .process('*Emphasis* and _stress_, you guys!')\n\nconsole.error(reporter(file))\nconsole.log(String(file))\n```\n```\n\n----------------------------------------\n\nTITLE: Processing Markdown to HTML\nDESCRIPTION: This snippet demonstrates how to use the `process()` method to process a file and generate HTML output. It uses a unified processor and integrates multiple plugins including remark-parse, remark-rehype, rehype-document, rehype-format, and rehype-stringify. It parses the input Markdown, converts it to HTML, adds a basic HTML document structure, formats the HTML, and stringifies the result.\nSOURCE: https://github.com/unifiedjs/unified/blob/main/readme.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nimport rehypeDocument from 'rehype-document'\nimport rehypeFormat from 'rehype-format'\nimport rehypeStringify from 'rehype-stringify'\nimport remarkParse from 'remark-parse'\nimport remarkRehype from 'remark-rehype'\nimport {unified} from 'unified'\n\nconst file = await unified()\n  .use(remarkParse)\n  .use(remarkRehype)\n  .use(rehypeDocument, {title: 'üëãüåç'})\n  .use(rehypeFormat)\n  .use(rehypeStringify)\n  .process('# Hello world!')\n\nconsole.log(String(file))\n```\n```\n\n----------------------------------------\n\nTITLE: Creating a File Extension Changing Plugin for Unified (JavaScript)\nDESCRIPTION: Implements a JavaScript plugin for unified that modifies file extensions based on a single required option, extname. The plugin enforces presence of the extname parameter and transforms the output file if its current extname does not match the desired target. It demonstrates how to specify plugin types using JSDoc and how to check and mutate VFile properties during processing. The plugin is intended to be used with unified's .use() API and requires the client to pass an options object with a valid extname field.\nSOURCE: https://github.com/unifiedjs/unified/blob/main/readme.md#_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * @import {Plugin} from 'unified'\n */\n\n/**\n * @typedef Options\n *   Configuration (required).\n * @property {string} extname\n *   File extension to use (must start with `.`).\n */\n\n/** @type {Plugin<[Options]>} */\nexport function move(options) {\n  if (!options || !options.extname) {\n    throw new Error('Missing `options.extname`')\n  }\n\n  return function (_, file) {\n    if (file.extname && file.extname !== options.extname) {\n      file.extname = options.extname\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Typing Unified Plugins for Syntax Trees with Options (JavaScript with Type Annotations)\nDESCRIPTION: Provides multiple examples of using JSDoc to type JavaScript unified plugins for different scenarios: plugins that accept options, plugins for specific syntax tree types (MdastRoot, HastRoot), plugins that transform between tree types, parsers, and compilers. These examples encourage the use of unified's Plugin generic with correct type parameters for robust plugin development. No runtime dependencies except for the structural types (which may require @types/hast, @types/mdast, @types/nlcst) and the Plugin type from unified.\nSOURCE: https://github.com/unifiedjs/unified/blob/main/readme.md#_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * @import {Root as HastRoot} from 'hast'\n * @import {Root as MdastRoot} from 'mdast'\n * @import {Plugin} from 'unified'\n */\n\n/**\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [someField]\n *   Some option (optional).\n */\n\n// To type options:\n/** @type {Plugin<[(Options | null | undefined)?]>} */\nexport function myPluginAcceptingOptions(options) {\n  const settings = options || {}\n  // `settings` is now `Options`.\n}\n\n// To type a plugin that works on a certain tree, without options:\n/** @type {Plugin<[], MdastRoot>} */\nexport function myRemarkPlugin() {\n  return function (tree, file) {\n    // `tree` is `MdastRoot`.\n  }\n}\n\n// To type a plugin that transforms one tree into another:\n/** @type {Plugin<[], MdastRoot, HastRoot>} */\nexport function remarkRehype() {\n  return function (tree) {\n    // `tree` is `MdastRoot`.\n    // Result must be `HastRoot`.\n  }\n}\n\n// To type a plugin that defines a parser:\n/** @type {Plugin<[], string, MdastRoot>} */\nexport function remarkParse(options) {}\n\n// To type a plugin that defines a compiler:\n/** @type {Plugin<[], HastRoot, string>} */\nexport function rehypeStringify(options) {}\n```\n\n----------------------------------------\n\nTITLE: Configuring Unified Processor Plugins Using .use() Method in JavaScript\nDESCRIPTION: Explains various ways to configure a Unified processor with plugins and presets using the `.use()` method. It shows chaining multiple plugins with and without options, passing arrays of plugins, presets, and settings-only configurations. Indicates that `.use()` modifies existing plugin configuration and must not be called on frozen processors. The example uses the 'unified' library and generic plugin placeholders.\nSOURCE: https://github.com/unifiedjs/unified/blob/main/readme.md#_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {unified} from 'unified'\\n\\nunified()\\n  // Plugin with options:\\n  .use(pluginA, {x: true, y: true})\\n  // Passing the same plugin again merges configuration (to `{x: true, y: false, z: true}`):\\n  .use(pluginA, {y: false, z: true})\\n  // Plugins:\\n  .use([pluginB, pluginC])\\n  // Two plugins, the second with options:\\n  .use([pluginD, [pluginE, {}]])\\n  // Preset with plugins and settings:\\n  .use({plugins: [pluginF, [pluginG, {}]], settings: {position: false}})\\n  // Settings only:\\n  .use({settings: {position: false}})\n```\n\n----------------------------------------\n\nTITLE: Parsing Markdown to a Syntax Tree\nDESCRIPTION: This example demonstrates how to parse Markdown text into a syntax tree using the `parse()` method. It imports the `remark-parse` plugin and creates a unified processor to parse the input string '# Hello world!'.  The result is the Abstract Syntax Tree (AST) of the input Markdown.\nSOURCE: https://github.com/unifiedjs/unified/blob/main/readme.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nimport remarkParse from 'remark-parse'\nimport {unified} from 'unified'\n\nconst tree = unified().use(remarkParse).parse('# Hello world!')\n\nconsole.log(tree)\n```\n```\n\n----------------------------------------\n\nTITLE: Serializing a Syntax Tree to HTML with Unified and rehype-stringify in JavaScript\nDESCRIPTION: Illustrates how to turn a hast syntax tree, created with hastscript, into an HTML string using Unified's `stringify` method and the `rehype-stringify` plugin. This method compiles a tree to a text representation, returning a string or Uint8Array depending on the compiler. Dependencies include 'unified', 'hastscript', and 'rehype-stringify'.\nSOURCE: https://github.com/unifiedjs/unified/blob/main/readme.md#_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {h} from 'hastscript'\\nimport rehypeStringify from 'rehype-stringify'\\nimport {unified} from 'unified'\\n\\nconst tree = h('h1', 'Hello world!')\\n\\nconst document = unified().use(rehypeStringify).stringify(tree)\\n\\nconsole.log(document)\n```\n\n----------------------------------------\n\nTITLE: Transforming a Syntax Tree Asynchronously with Unified in JavaScript\nDESCRIPTION: Shows how to use the asynchronous `run` method of Unified to transform a syntax tree by applying plugins, specifically `remark-reference-links`. The snippet builds a syntax tree manually using `unist-builder`, runs the processor, and logs the modified tree. Dependencies include 'unified', 'remark-reference-links', and 'unist-builder'. The method returns a Promise which resolves to the transformed tree.\nSOURCE: https://github.com/unifiedjs/unified/blob/main/readme.md#_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport remarkReferenceLinks from 'remark-reference-links'\\nimport {unified} from 'unified'\\nimport {u} from 'unist-builder'\\n\\nconst tree = u('root', [\\n  u('paragraph', [\\n    u('link', {href: 'https://example.com'}, [u('text', 'Example Domain')])\\n  ])\\n])\\n\\nconst changedTree = await unified().use(remarkReferenceLinks).run(tree)\\n\\nconsole.log(changedTree)\n```\n\n----------------------------------------\n\nTITLE: Defining a Plugin Type in Unified (TypeScript)\nDESCRIPTION: Defines a TypeScript type alias for a Plugin in the unified framework, which represents a configurable function that can act as a parser, transformer, or compiler depending on its input and output types. The generic signature enables specifying the types of options (PluginParameters), input and output trees, and enforces appropriate shapes of returned transformers or side-effects. This type is intended for developers building plugins for unified-based processing pipelines. No runtime dependencies are used but references must be made to unified node types and (optionally) CompileResults and Transformer type aliases.\nSOURCE: https://github.com/unifiedjs/unified/blob/main/readme.md#_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\ntype Plugin<\n  PluginParameters extends unknown[] = [],\n  Input extends Node | string | undefined = Node,\n  Output = Input\n> = (\n  this: Processor,\n  ...parameters: PluginParameters\n) => Input extends string // Parser.\n  ? Output extends Node | undefined\n    ? undefined | void\n    : never\n  : Output extends CompileResults // Compiler.\n  ? Input extends Node | undefined\n    ? undefined | void\n    : never\n  : // Inspect/transform.\n      | Transformer<\n          Input extends Node ? Input : Node,\n          Output extends Node ? Output : Node\n        >\n      | undefined\n      | void\n```\n\n----------------------------------------\n\nTITLE: Defining a Transformer Type Alias for Unified (TypeScript)\nDESCRIPTION: Declares the Transformer type alias for unified, describing a function that processes a tree, file, and optionally a callback. The return type supports both synchronous and asynchronous processing and returning errors. Key for plugin authors writing tree transformation plugins. The input and output generics can be specified for different tree types according to the plugin's specialization.\nSOURCE: https://github.com/unifiedjs/unified/blob/main/readme.md#_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\ntype Transformer<\n  Input extends Node = Node,\n  Output extends Node = Input\n> = (\n  tree: Input,\n  file: VFile,\n  next: TransformCallback<Output>\n) =>\n  | Promise<Output | undefined>\n  | Output\n  | Error\n  | undefined\n```\n\n----------------------------------------\n\nTITLE: Processing Strings with Unified and Callbacks (JavaScript)\nDESCRIPTION: Demonstrates the usage of unified to process a string input using a series of plugins and a callback for asynchronous result/error handling. Parses GitHub-flavored Markdown, applies remark-github and remark-stringify transformations, and outputs the formatted result and diagnostics. Requires unified, remark-parse, remark-github, remark-stringify, and vfile-reporter. Input is a string; output is directed to console. The callback receives either an error or the resulting file.\nSOURCE: https://github.com/unifiedjs/unified/blob/main/readme.md#_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\nimport remarkGithub from 'remark-github'\nimport remarkParse from 'remark-parse'\nimport remarkStringify from 'remark-stringify'\nimport {unified} from 'unified'\nimport {reporter} from 'vfile-reporter'\n\nunified()\n  .use(remarkParse)\n  .use(remarkGithub)\n  .use(remarkStringify)\n  .process('@unifiedjs', function (error, file) {\n    if (error) throw error\n    if (file) {\n      console.error(reporter(file))\n      console.log(String(file))\n    }\n  })\n```\n\n----------------------------------------\n\nTITLE: Creating a Processor and Linking to I/O\nDESCRIPTION: This snippet shows how to create a new processor using the `remark` module, and how to link the processor to the standard input and standard output streams. It uses the `concat-stream` module to read the input from stdin, processes the input using `remark`, and then writes the processed output to stdout.\nSOURCE: https://github.com/unifiedjs/unified/blob/main/readme.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nimport process from 'node:process'\nimport concatStream from 'concat-stream'\nimport {remark} from 'remark'\n\nprocess.stdin.pipe(\n  concatStream(function (buf) {\n    process.stdout.write(String(remark().processSync(buf)))\n  })\n)\n```\n```\n\n----------------------------------------\n\nTITLE: Executing a Remark Pipeline with a Preset (JavaScript)\nDESCRIPTION: Demonstrates processing a Markdown file using remark and a previously defined preset. Reads a Markdown file, applies the preset for transformation/linting, and writes the output. Error reporting uses vfile-reporter. Requires remark, to-vfile, vfile-reporter, and the previously defined preset. Inputs and outputs are file paths; processing is asynchronous.\nSOURCE: https://github.com/unifiedjs/unified/blob/main/readme.md#_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nimport {remark} from 'remark'\nimport {read, write} from 'to-vfile'\nimport {reporter} from 'vfile-reporter'\nimport preset from './preset.js'\n\nconst file = await remark()\n  .use(preset)\n  .process(await read('example.md'))\n\nconsole.error(reporter(file))\nawait write(file)\n```\n\n----------------------------------------\n\nTITLE: Defining a Shared Plugin Preset Configuration (JavaScript)\nDESCRIPTION: Implements a sharable preset configuration object for use with unified, specifying a plugin array and parser/compiler settings. This example imports several remark plugins and presets, bundles them into a single preset, and exports it for reuse. The settings object provides options to be shared among processors. Requires the following plugins to be installed: remark-comment-config, remark-license, remark-preset-lint-consistent, remark-preset-lint-recommended, remark-toc. Used to standardize Markdown linting and formatting pipelines.\nSOURCE: https://github.com/unifiedjs/unified/blob/main/readme.md#_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * @import {Preset} from 'unified'\n */\n\nimport remarkCommentConfig from 'remark-comment-config'\nimport remarkLicense from 'remark-license'\nimport remarkPresetLintConsistent from 'remark-preset-lint-consistent'\nimport remarkPresetLintRecommended from 'remark-preset-lint-recommended'\nimport remarkToc from 'remark-toc'\n\n/** @type {Preset} */\nconst preset = {\n  plugins: [\n    remarkPresetLintRecommended,\n    remarkPresetLintConsistent,\n    remarkCommentConfig,\n    [remarkToc, {maxDepth: 3, tight: true}],\n    remarkLicense\n  ],\n  settings: {bullet: '*', emphasis: '*', fences: true},\n}\n\nexport default preset\n```\n\n----------------------------------------\n\nTITLE: Processing and Transforming Markdown to HTML with Unified in JavaScript\nDESCRIPTION: Demonstrates how to create a Unified processor pipeline using remark and rehype plugins to parse Markdown input, transform it to HTML, format the document, and stringify it synchronously. It shows the use of processSync to synchronously process `# Hello world!` into a full HTML document, printing the result to the console. Dependencies include 'unified', 'remark-parse', 'remark-rehype', 'rehype-document', 'rehype-format', and 'rehype-stringify'.\nSOURCE: https://github.com/unifiedjs/unified/blob/main/readme.md#_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport rehypeDocument from 'rehype-document'\\nimport rehypeFormat from 'rehype-format'\\nimport rehypeStringify from 'rehype-stringify'\\nimport remarkParse from 'remark-parse'\\nimport remarkRehype from 'remark-rehype'\\nimport {unified} from 'unified'\\n\\nconst processor = unified()\\n  .use(remarkParse)\\n  .use(remarkRehype)\\n  .use(rehypeDocument, {title: 'üëãüåç'})\\n  .use(rehypeFormat)\\n  .use(rehypeStringify)\\n\\nconsole.log(String(processor.processSync('# Hello world!')))\n```\n\n----------------------------------------\n\nTITLE: TypeScript Type Definition for Compiler Function in Unified\nDESCRIPTION: Defines a generic TypeScript type `Compiler` for a compiler function used in Unified. It takes a syntax tree of type `Tree` extending `Node`, a `VFile` representing the document, and returns a compiler result of type `Result` (extending `CompileResults`). This function type is central to the stringify phase and enables type-safe custom compilers that may return varied results like text or React nodes.\nSOURCE: https://github.com/unifiedjs/unified/blob/main/readme.md#_snippet_17\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype Compiler<\\n  Tree extends Node = Node,\\n  Result extends CompileResults = CompileResults\\n> = (tree: Tree, file: VFile) => Result\n```\n\n----------------------------------------\n\nTITLE: TypeScript Type Definition for Parser Function in Unified\nDESCRIPTION: Defines a generic TypeScript type `Parser` for parser functions in Unified. A parser accepts a document string and a `VFile` instance and returns a syntax tree of type `Tree` which extends `Node`. Parsers are used during the parse phase to convert raw text into unified ASTs.\nSOURCE: https://github.com/unifiedjs/unified/blob/main/readme.md#_snippet_19\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype Parser<Tree extends Node = Node> = (document: string, file: VFile) => Tree\n```\n\n----------------------------------------\n\nTITLE: Defining a Settings Interface Extension for Unified (TypeScript)\nDESCRIPTION: Shows how to augment the unified Settings interface in TypeScript projects to define extra parser or compiler options, such as a 'bullet' style for Markdown output. Uses declaration merging to extend the Settings interface, which TypeScript merges globally. Intended for plugin authors or consumers needing to express additional configuration keys for unified-based pipelines.\nSOURCE: https://github.com/unifiedjs/unified/blob/main/readme.md#_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare module 'unified' {\n  interface Settings {\n    bullet: '*' | '+' | '-'\n    // ‚Ä¶\n  }\n}\n\nexport {} // You may not need this, but it makes sure the file is a module.\n```\n\n----------------------------------------\n\nTITLE: Augmenting Compiler Output Types with TypeScript Interface in Unified\nDESCRIPTION: Defines a TypeScript interface `CompileResultMap` to register known compiler output types in Unified, such as `string` or `Uint8Array`. Shows how to extend the interface to add custom compile result types (e.g., ReactNode) to support non-serialized compiler outputs. This interface supports Unified‚Äôs TypeScript integration by mapping result keys to their expected value types.\nSOURCE: https://github.com/unifiedjs/unified/blob/main/readme.md#_snippet_14\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport type {ReactNode} from 'somewhere'\\n\\ndeclare module 'unified' {\\n  interface CompileResultMap {\\n    // Register a new result (value is used, key should match it).\\n    ReactNode: ReactNode\\n  }\\n}\\n\\nexport {} // You may not need this, but it makes sure the file is a module.\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface for Shared Plugin Data in Unified\nDESCRIPTION: Defines a TypeScript interface `Data` representing data that can be shared by multiple Unified plugins. It includes an optional `settings` property of type `Settings`. This interface enables plugins to share configuration or data such as lists of HTML void elements during transformations and parsing.\nSOURCE: https://github.com/unifiedjs/unified/blob/main/readme.md#_snippet_18\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface Data {\\n  settings?: Settings | undefined\\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Union Type for Pluggable Entities in Unified\nDESCRIPTION: Defines a TypeScript union type `Pluggable` representing the variety of plugin and preset forms that can be passed to a Unified processor. It can be a `Plugin`, a tuple form `PluginTuple`, or a `Preset`, allowing flexible configuration of the processor pipeline.\nSOURCE: https://github.com/unifiedjs/unified/blob/main/readme.md#_snippet_20\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype Pluggable =\\n  | Plugin<Array<any>, any, any>\\n  | PluginTuple<Array<any>, any, any>\\n  | Preset\n```\n\n----------------------------------------\n\nTITLE: TypeScript Type Definition for PluggableList Array in Unified\nDESCRIPTION: Defines a TypeScript type `PluggableList` as an array of `Pluggable` items. This type is used for lists of plugins and presets passed to Unified's use method, encapsulating multiple plugin configurations in a single array.\nSOURCE: https://github.com/unifiedjs/unified/blob/main/readme.md#_snippet_21\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype PluggableList = Array<Pluggable>\n```\n\n----------------------------------------\n\nTITLE: Defining a PluginTuple Type Alias for Unified (TypeScript)\nDESCRIPTION: Defines a TypeScript type alias PluginTuple that pairs a unified plugin function with its configuration parameters. The tuple's first item is a Plugin, and the remaining items are its parameters, supporting strongly typed parameterization of plugins for use in preset or plugin lists. Intended for typings and structural enforcement within unified pipelines. Relies on the definition of the Plugin type.\nSOURCE: https://github.com/unifiedjs/unified/blob/main/readme.md#_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\ntype PluginTuple<\n  TupleParameters extends unknown[] = [],\n  Input extends Node | string | undefined = undefined,\n  Output = undefined\n> = [\n  plugin: Plugin<TupleParameters, Input, Output>,\n  ...parameters: TupleParameters\n]\n```\n\n----------------------------------------\n\nTITLE: Type Alias for Acceptable Compiler Results in TypeScript for Unified\nDESCRIPTION: Defines a TypeScript type alias `CompileResults` as a union of all possible compiler output types from `CompileResultMap`. This type is used to represent acceptable results that a compiler may return after compiling a syntax tree, facilitating type safety across Unified processors.\nSOURCE: https://github.com/unifiedjs/unified/blob/main/readme.md#_snippet_16\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype CompileResults = CompileResultMap[keyof CompileResultMap]\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface for CompileResultMap in Unified\nDESCRIPTION: Defines the `CompileResultMap` interface representing default known compile results, typically for serializing syntax trees. It maps keys like `Uint8Array` and `string` to their types, ensuring consistency with the `Value` type from VFile. This interface is foundational for typing compiler outputs in Unified plugins and applications.\nSOURCE: https://github.com/unifiedjs/unified/blob/main/readme.md#_snippet_15\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface CompileResultMap {\\n  // Note: if `Value` from `VFile` is changed, this should too.\\n  Uint8Array: Uint8Array\\n  string: string\\n}\n```\n\n----------------------------------------\n\nTITLE: Freezing a Processor Example\nDESCRIPTION: This snippet demonstrates the usage of freezing a processor using `.freeze()`. It shows how to create a frozen processor and how attempts to configure a frozen processor will throw an error. The intent is to show that processors should not be mutated after being initialized with plugins and that new instances should be created from existing ones.\nSOURCE: https://github.com/unifiedjs/unified/blob/main/readme.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nimport rehypeParse from 'rehype-parse'\nimport rehypeStringify from 'rehype-stringify'\nimport {unified} from 'unified'\n\nexport const rehype = unified().use(rehypeParse).use(rehypeStringify).freeze()\n```\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Processor Data\nDESCRIPTION: This snippet demonstrates how to set and get data associated with a unified processor. It uses the `data()` method to store and retrieve information. It sets an alpha value and retrieves its value, as well as a dataset.\nSOURCE: https://github.com/unifiedjs/unified/blob/main/readme.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nimport {unified} from 'unified'\n\nconst processor = unified().data('alpha', 'bravo')\n\nprocessor.data('alpha') // => 'bravo'\n\nprocessor.data() // => {alpha: 'bravo'}\n\nprocessor.data({charlie: 'delta'})\n\nprocessor.data() // => {charlie: 'delta'}\n```\n```\n\n----------------------------------------\n\nTITLE: Installing unified via npm\nDESCRIPTION: This snippet demonstrates how to install the `unified` package using npm. It's a straightforward command-line instruction for incorporating the library into a Node.js project.\nSOURCE: https://github.com/unifiedjs/unified/blob/main/readme.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install unified\n```\n\n----------------------------------------\n\nTITLE: Installing unified via Browser with esm.sh\nDESCRIPTION: This HTML snippet demonstrates how to include the `unified` library within a web browser using a module script and the `esm.sh` CDN. It allows for using the library in client-side JavaScript.\nSOURCE: https://github.com/unifiedjs/unified/blob/main/readme.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"module\">\n  import {unified} from 'https://esm.sh/unified@11?bundle'\n</script>\n```\n\n----------------------------------------\n\nTITLE: Installing unified via Deno\nDESCRIPTION: This code provides instructions for importing the `unified` package in a Deno environment using the `esm.sh` service. It shows how to fetch the library from a CDN for usage within Deno scripts.\nSOURCE: https://github.com/unifiedjs/unified/blob/main/readme.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport {unified} from 'https://esm.sh/unified@11'\n```\n\n----------------------------------------\n\nTITLE: Defining a Settings Interface (TypeScript)\nDESCRIPTION: Declares the empty Settings interface for unified, serving as a base to extend with custom parser or compiler options via TypeScript module augmentation. No fields are present by default. Meant as a typing foundation for extension.\nSOURCE: https://github.com/unifiedjs/unified/blob/main/readme.md#_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Settings {}\n```"
  }
]