[
  {
    "owner": "thephpleague",
    "repo": "omnipay",
    "content": "TITLE: Processing Payments with Omnipay in PHP\nDESCRIPTION: This snippet demonstrates how to use Omnipay to process a payment using the Stripe gateway. It shows creating a gateway instance, setting API credentials, sending a purchase request, and handling the response.\nSOURCE: https://github.com/thephpleague/omnipay/blob/master/README.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Omnipay\\Omnipay;\n\n$gateway = Omnipay::create('Stripe');\n$gateway->setApiKey('abc123');\n\n$formData = array('number' => '4242424242424242', 'expiryMonth' => '6', 'expiryYear' => '2030', 'cvv' => '123');\n$response = $gateway->purchase(array('amount' => '10.00', 'currency' => 'USD', 'card' => $formData))->send();\n\nif ($response->isRedirect()) {\n    // redirect to offsite payment gateway\n    $response->redirect();\n} elseif ($response->isSuccessful()) {\n    // payment was successful: update database\n    print_r($response);\n} else {\n    // payment failed: display message to customer\n    echo $response->getMessage();\n}\n```\n\n----------------------------------------\n\nTITLE: Comprehensive Error Handling for Payment Processing in PHP\nDESCRIPTION: Demonstrates a complete error handling approach for payment processing, including catching exceptions and handling different response types. This ensures all potential payment processing scenarios are properly managed.\nSOURCE: https://github.com/thephpleague/omnipay/blob/master/README.md#2025-04-22_snippet_9\n\nLANGUAGE: php\nCODE:\n```\ntry {\n    $response = $gateway->purchase(array('amount' => '10.00', 'card' => $card))->send();\n    if ($response->isSuccessful()) {\n        // mark order as complete\n    } elseif ($response->isRedirect()) {\n        $response->redirect();\n    } else {\n        // display error to customer\n        exit($response->getMessage());\n    }\n} catch (\\Exception $e) {\n    // internal error, log exception and display a generic message to the customer\n    exit('Sorry, there was an error processing your payment. Please try again later.');\n}\n```\n\n----------------------------------------\n\nTITLE: Processing a Purchase Response in PHP with Omnipay\nDESCRIPTION: Demonstrates how to handle a payment response from the gateway, checking if it was successful or requires a redirect. This allows for appropriate handling of different payment processing outcomes.\nSOURCE: https://github.com/thephpleague/omnipay/blob/master/README.md#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$response = $gateway->purchase(array('amount' => '10.00', 'card' => $card))->send();\n\n$response->isSuccessful(); // is the response successful?\n$response->isRedirect(); // is the response a redirect?\n$response->getTransactionReference(); // a reference generated by the payment gateway\n$response->getTransactionId(); // the reference set by the originating website if available.\n$response->getMessage(); // a message generated by the payment gateway\n```\n\n----------------------------------------\n\nTITLE: Handling Payment Notifications in PHP\nDESCRIPTION: Code example demonstrating how to handle incoming payment gateway notifications using the acceptNotification method. Shows how to access transaction reference, status, and message from the notification response.\nSOURCE: https://github.com/thephpleague/omnipay/blob/master/README.md#2025-04-22_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n$notification = $gateway->acceptNotification();\n\n$notification->getTransactionReference(); // A reference provided by the gateway to represent this transaction\n$notification->getTransactionStatus(); // Current status of the transaction, one of NotificationInterface::STATUS_*\n$notification->getMessage(); // Additional message, if any, provided by the gateway\n\n// update the status of the corresponding transaction in your database\n```\n\n----------------------------------------\n\nTITLE: Initializing Omnipay Payment Gateway in PHP\nDESCRIPTION: Demonstrates how to create and configure a payment gateway object using the Omnipay library. This example shows setting up a PayPal Express gateway with username and password credentials.\nSOURCE: https://github.com/thephpleague/omnipay/blob/master/README.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Omnipay\\Omnipay;\n\n$gateway = Omnipay::create('PayPal_Express');\n$gateway->setUsername('adrian');\n$gateway->setPassword('12345');\n```\n\n----------------------------------------\n\nTITLE: Making a Payment Authorization Request with Omnipay in PHP\nDESCRIPTION: Shows how to create an authorization request with a payment gateway using Omnipay. This passes the credit card and transaction details to the gateway to authorize a payment without capturing funds.\nSOURCE: https://github.com/thephpleague/omnipay/blob/master/README.md#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$card = new CreditCard($formData);\n$request = $gateway->authorize(array(\n    'amount' => '10.00', // this represents $10.00\n    'card' => $card,\n    'returnUrl' => 'https://www.example.com/return',\n));\n```\n\n----------------------------------------\n\nTITLE: Executing Purchase with Card Reference in PHP\nDESCRIPTION: Example of making a purchase transaction using a stored card reference instead of direct card details. The cardReference is obtained from a previous createCard response.\nSOURCE: https://github.com/thephpleague/omnipay/blob/master/README.md#2025-04-22_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n$gateway->purchase(array('amount' => '10.00', 'cardReference' => 'abc'));\n```\n\n----------------------------------------\n\nTITLE: Initializing CreditCard Object with User Input in PHP\nDESCRIPTION: Creates a CreditCard object from user form input data containing customer details. This provides a safe way to handle untrusted user input for payment processing.\nSOURCE: https://github.com/thephpleague/omnipay/blob/master/README.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$formInputData = array(\n    'firstName' => 'Bobby',\n    'lastName' => 'Tables',\n    'number' => '4111111111111111',\n);\n$card = new CreditCard($formInputData);\n```\n\n----------------------------------------\n\nTITLE: Configuring Test or Developer Mode for Payment Gateways in PHP\nDESCRIPTION: Shows how to configure a payment gateway for testing by enabling either test mode or developer mode. This allows for safe testing of payment flows without processing real transactions.\nSOURCE: https://github.com/thephpleague/omnipay/blob/master/README.md#2025-04-22_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nif ($is_developer_mode) {\n    if (method_exists($gateway, 'setDeveloperMode')) {\n        $gateway->setDeveloperMode(TRUE);\n    } else {\n        $gateway->setTestMode(TRUE);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Redirect Responses in Omnipay Payment Processing\nDESCRIPTION: Shows how to check for and process redirect responses from payment gateways. This is necessary when payments are completed on the gateway's website rather than directly on the merchant site.\nSOURCE: https://github.com/thephpleague/omnipay/blob/master/README.md#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$response = $gateway->purchase(array('amount' => '10.00', 'card' => $card))->send();\nif ($response->isSuccessful()) {\n    // payment is complete\n} elseif ($response->isRedirect()) {\n    $response->redirect(); // this will automatically forward the customer\n} else {\n    // not successful\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Redirect Information for Custom Implementation in PHP\nDESCRIPTION: Shows how to retrieve the redirect URL and form data for custom redirect page implementation. This is useful for customizing the redirect experience or handling redirects in AJAX contexts.\nSOURCE: https://github.com/thephpleague/omnipay/blob/master/README.md#2025-04-22_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$url = $response->getRedirectUrl();\n// for a form redirect, you can also call the following method:\n$data = $response->getRedirectData(); // associative array of fields which must be posted to the redirectUrl\n```\n\n----------------------------------------\n\nTITLE: Retrieving Available Gateway Settings in Omnipay\nDESCRIPTION: Shows how to query a gateway to get a list of available configuration parameters and their default values. The returned array provides information about parameter types including strings, booleans, and enumerated values.\nSOURCE: https://github.com/thephpleague/omnipay/blob/master/README.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$settings = $gateway->getDefaultParameters();\n// default settings array format:\narray(\n    'username' => '', // string variable\n    'testMode' => false, // boolean variable\n    'landingPage' => array('billing', 'login'), // enum variable, first item should be treated as default\n);\n```\n\n----------------------------------------\n\nTITLE: Accessing CreditCard Fields with Getters and Setters in PHP\nDESCRIPTION: Demonstrates how to access and modify CreditCard object properties using getter and setter methods. This allows for retrieving card details or updating individual fields after object creation.\nSOURCE: https://github.com/thephpleague/omnipay/blob/master/README.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$number = $card->getNumber();\n$card->setFirstName('Adrian');\n```\n\n----------------------------------------\n\nTITLE: Modifying Request Data Before Sending in Omnipay\nDESCRIPTION: Demonstrates how to modify request data before sending it to the payment gateway, allowing for custom parameters to be added even if not directly supported by Omnipay.\nSOURCE: https://github.com/thephpleague/omnipay/blob/master/CHANGELOG.md#2025-04-22_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n// standard method - send default data\n$response = $request->send();\n\n// new method - get and send custom data\n$data = $request->getData();\n$data['customParameter'] = true;\n\n$response = $request->sendData($data);\n```\n\n----------------------------------------\n\nTITLE: Adding Line Items to an Omnipay Request\nDESCRIPTION: Shows how to add line item details to a payment request in Omnipay, which is supported by gateways like PayPal, allowing for itemized transaction details.\nSOURCE: https://github.com/thephpleague/omnipay/blob/master/CHANGELOG.md#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$request->setItems(array(\n    array('name' => 'Food', 'quantity' => 1, 'price' => '40.00'),\n    array('name' => 'Drinks', 'quantity' => 2, 'price' => '6.00'),\n));\n```\n\n----------------------------------------\n\nTITLE: JSON Request in Omnipay v3\nDESCRIPTION: Shows how to make a JSON request in Omnipay v3, including setting the appropriate headers, encoding the data as JSON, and processing the JSON response.\nSOURCE: https://github.com/thephpleague/omnipay/blob/master/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n $response = $this->httpClient->request('POST', $this->endpoint, [\n     'Accept' => 'application/json',\n     'Content-Type' => 'application/json',\n ], json_encode($data));\n \n $result = json_decode($response->getBody()->getContents(), true);\n```\n\n----------------------------------------\n\nTITLE: Using Omnipay Static Class for Gateway Creation\nDESCRIPTION: Demonstrates the recommended way to create a gateway instance using the Omnipay static class, which handles the factory instance creation behind the scenes.\nSOURCE: https://github.com/thephpleague/omnipay/blob/master/CHANGELOG.md#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n// at the top of your PHP file\nuse Omnipay\\Omnipay;\n\n// further down when you need to create the gateway\n$gateway = Omnipay::create('PayPal_Express');\n```\n\n----------------------------------------\n\nTITLE: Creating Payment Gateway Instance in Omnipay v2\nDESCRIPTION: Shows different methods for creating a payment gateway instance in Omnipay v2, including using the GatewayFactory class directly and the simplified Omnipay static class.\nSOURCE: https://github.com/thephpleague/omnipay/blob/master/CHANGELOG.md#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$factory = new GatewayFactory();\n$gateway = $factory->create('PayPal_Express');\n```\n\n----------------------------------------\n\nTITLE: Migrating HTTP Client from Omnipay v2 to v3 for XML Requests\nDESCRIPTION: Demonstrates how to migrate XML request handling from Omnipay v2 to v3, showing the change in HTTP client usage including the removal of the send() method and modifications to response handling.\nSOURCE: https://github.com/thephpleague/omnipay/blob/master/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// V2 XML:\n $response = $this->httpClient->post($this->endpoint, null, $data)->send();\n $result = $httpResponse->xml();\n\n// V3 XML:\n $response = $this->httpClient->request('POST', $this->endpoint, [], http_build_query($data));\n $result = simplexml_load_string($httpResponse->getBody()->getContents());\n```\n\n----------------------------------------\n\nTITLE: Configuring Individual Gateway in Composer for Omnipay v2\nDESCRIPTION: Demonstrates how to require only a specific payment gateway in composer.json for Omnipay v2, which automatically includes the common package.\nSOURCE: https://github.com/thephpleague/omnipay/blob/master/CHANGELOG.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"require\": {\n        \"omnipay/paypal\": \"~2.0\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Omnipay v2 in Composer\nDESCRIPTION: Shows how to require the full Omnipay package in composer.json for Omnipay v2, which includes all official gateways in a single package.\nSOURCE: https://github.com/thephpleague/omnipay/blob/master/CHANGELOG.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"require\": {\n        \"omnipay/omnipay\": \"~2.0\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: PHPUnit Expectation Migration from v5 to v6\nDESCRIPTION: Shows how to update test expectations when migrating from PHPUnit 5 to PHPUnit 6, replacing the deprecated setExpectedException() method with the newer expectException() and expectExceptionMessage() methods.\nSOURCE: https://github.com/thephpleague/omnipay/blob/master/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// PHPUnit 5:\n$this->setExpectedException($class, $message);\n\n// PHPUnit 6:\n$this->expectException($class);\n$this->expectExceptionMessage($message);\n```"
  }
]