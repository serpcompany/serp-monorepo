[
  {
    "owner": "getmoto",
    "repo": "moto",
    "content": "TITLE: Testing S3 interaction with Moto in Unittest\nDESCRIPTION: This Python code demonstrates how to use Moto within a unittest test case to mock AWS services. The `setUp` method starts the mock, creates an S3 bucket, and the `tearDown` method stops the mock. The test then uploads an object to S3 and verifies that it was uploaded correctly.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/getting_started.rst#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport unittest\nfrom moto import mock_aws\nimport boto3\n\ndef func_to_test(bucket_name, key, content):\n    s3 = boto3.resource(\"s3\")\n    object = s3.Object(bucket_name, key)\n    object.put(Body=content)\n\nclass MyTest(unittest.TestCase):\n\n    bucket_name = \"test-bucket\"\n    def setUp(self):\n        self.mock_aws = mock_aws()\n        self.mock_aws.start()\n\n        # you can use boto3.client(\"s3\") if you prefer\n        s3 = boto3.resource(\"s3\")\n        bucket = s3.Bucket(self.bucket_name)\n        bucket.create()\n\n    def tearDown(self):\n        self.mock_aws.stop()\n\n    def test(self):\n        content = b\"abc\"\n        key = \"/path/to/obj\"\n\n        # run the file which uploads to S3\n        func_to_test(self.bucket_name, key, content)\n\n        # check the file was uploaded as expected\n        s3 = boto3.resource(\"s3\")\n        object = s3.Object(self.bucket_name, key)\n        actual = object.get()[\"Body\"].read()\n        self.assertEqual(actual, content)\n```\n\n----------------------------------------\n\nTITLE: Creating a Pytest Fixture for Moto Server\nDESCRIPTION: This code defines a pytest fixture that starts and stops the Moto server for testing.  It uses `ThreadedMotoServer` and yields the endpoint URL for use in tests.  The `port=0` argument allows the server to be assigned a random free port.  It requires `pytest` and `moto.server` libraries.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/server_mode.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# Note: pick an appropriate fixture \"scope\" for your use case\n@pytest.fixture(scope=\"module\")\ndef moto_server():\n    \"\"\"Fixture to run a mocked AWS server for testing.\"\"\"\n    # Note: pass `port=0` to get a random free port.\n    server = ThreadedMotoServer(port=0)\n    server.start()\n    host, port = server.get_host_and_port()\n    yield f\"http://{host}:{port}\"\n    server.stop()\n\ndef test_s3_using_moto_fixture(moto_server):\n    client = boto3.client(\"s3\", endpoint_url=moto_server)\n    client.list_buckets()\n```\n\n----------------------------------------\n\nTITLE: Starting the Moto Server\nDESCRIPTION: This command starts the Moto server, which simulates AWS services. The server listens for requests on a default port (usually 5000).\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/server_mode.rst#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ moto_server\n```\n\n----------------------------------------\n\nTITLE: Mocking S3 using Moto for testing\nDESCRIPTION: This Python code shows how to use Moto to mock AWS S3 interactions during testing. The `mock_aws` decorator mocks all AWS calls, allowing you to test your code without interacting with real AWS resources. The code creates a bucket, saves data using the `MyModel` class, and asserts that the saved data is correct.\nSOURCE: https://github.com/getmoto/moto/blob/master/README.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport boto3\nfrom moto import mock_aws\nfrom mymodule import MyModel\n\n\n@mock_aws\ndef test_my_model_save():\n    conn = boto3.resource(\"s3\", region_name=\"us-east-1\")\n    # We need to create the bucket since this is all in Moto's 'virtual' AWS account\n    conn.create_bucket(Bucket=\"mybucket\")\n    model_instance = MyModel(\"steve\", \"is awesome\")\n    model_instance.save()\n    body = conn.Object(\"mybucket\", \"steve\").get()[\"Body\"].read().decode(\"utf-8\")\n    assert body == \"is awesome\"\n```\n\n----------------------------------------\n\nTITLE: Testing S3 interaction with Moto Decorator\nDESCRIPTION: This Python code demonstrates how to use the ``@mock_aws`` decorator from Moto to mock AWS services. The test creates an S3 bucket, saves an object using the MyModel class, and then verifies that the object was saved correctly by retrieving it from the mocked S3 bucket.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/getting_started.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport boto3\nfrom moto import mock_aws\nfrom mymodule import MyModel\n\n@mock_aws\ndef test_my_model_save():\n    conn = boto3.resource(\"s3\", region_name=\"us-east-1\")\n    # We need to create the bucket since this is all in Moto's 'virtual' AWS account\n    conn.create_bucket(Bucket=\"mybucket\")\n\n    model_instance = MyModel(\"steve\", \"is awesome\")\n    model_instance.save()\n\n    body = conn.Object(\"mybucket\", \"steve\").get()[\n        \"Body\"].read().decode(\"utf-8\")\n\n    assert body == \"is awesome\"\n```\n\n----------------------------------------\n\nTITLE: Running Moto with Docker\nDESCRIPTION: These commands demonstrate how to run the Moto server using Docker. It pulls the latest Moto server image from Docker Hub or GitHub Container Registry, maps port 5000 on the host to port 5000 in the container, and names the container 'moto'.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/server_mode.rst#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --rm -p 5000:5000 --name moto motoserver/moto:latest\ndocker run --rm -p 5000:5000 --name moto ghcr.io/getmoto/motoserver:latest\n```\n\n----------------------------------------\n\nTITLE: Testing S3 interaction with Moto Context Manager\nDESCRIPTION: This Python code demonstrates how to use Moto's ``mock_aws()`` context manager to mock AWS services within a specific block of code. It creates an S3 bucket, saves an object using the MyModel class, and then verifies that the object was saved correctly by retrieving it from the mocked S3 bucket. The mocking is active only within the ``with`` block.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/getting_started.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef test_my_model_save():\n    with mock_aws():\n        conn = boto3.resource(\"s3\", region_name=\"us-east-1\")\n        conn.create_bucket(Bucket=\"mybucket\")\n\n        model_instance = MyModel(\"steve\", \"is awesome\")\n        model_instance.save()\n\n        body = conn.Object(\"mybucket\", \"steve\").get()[\n            \"Body\"].read().decode(\"utf-8\")\n\n        assert body == \"is awesome\"\n```\n\n----------------------------------------\n\nTITLE: Configuring boto3 to use Moto Server\nDESCRIPTION: This Python code demonstrates how to configure the boto3 library to use the Moto server by specifying the `endpoint_url`.  It creates an S3 resource that points to the Moto server running on localhost port 5000.  It also specifies the region name.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/server_mode.rst#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nboto3.resource(\n    service_name='s3',\n    region_name='us-west-1',\n    endpoint_url='http://localhost:5000'\n)\n```\n\n----------------------------------------\n\nTITLE: Testing S3 interaction with Moto Class Decorator\nDESCRIPTION: This Python code demonstrates how to use the ``@mock_aws`` decorator at the class level in a unittest test case to mock AWS services for all test methods within the class.  The `setUp` creates an S3 bucket that is then accessible within the test methods. The state is not shared across test methods.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/getting_started.rst#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n@mock_aws\nclass TestMockClassLevel(unittest.TestCase):\n    def setUp(self):\n        s3 = boto3.client(\"s3\", region_name=\"us-east-1\")\n        s3.create_bucket(Bucket=\"mybucket\")\n\n    def test_creating_a_bucket(self):\n        # 'mybucket', created in setUp, is accessible in this test\n        # Other clients can be created at will\n\n        s3 = boto3.client(\"s3\", region_name=\"us-east-1\")\n        s3.create_bucket(Bucket=\"bucket_inside\")\n\n    def test_accessing_a_bucket(self):\n        # The state has been reset before this method has started\n        # 'mybucket' is recreated as part of the setUp-method\n        # 'bucket_inside' however, created inside the other test, no longer exists\n        pass\n```\n\n----------------------------------------\n\nTITLE: Seeding Moto for Deterministic Identifiers - Python\nDESCRIPTION: This snippet demonstrates how to seed Moto to ensure deterministic identifiers for resources. It shows how to use the `/moto-api/seed` endpoint to set a seed value. This is crucial for recreating the same resources with the same identifiers in subsequent requests.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/configuration/recorder/index.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Ensure the provided parameter `a` is an integer\nrequests.post(\"http://motoapi.amazonaws.com/moto-api/seed?a=42\")\n\n# To try this out, generate a EC2 instance\nclient = boto3.client(\"ec2\", region_name=\"us-east-1\")\nresp = client.run_instances(ImageId=\"ami-12c6146b\", MinCount=1, MaxCount=1)\n\n# The resulting InstanceId will always be the same\ninstance_id = resp[\"Instances\"][0][\"InstanceId\"]\nassert instance_id == \"i-d1026706d7e805da8\"\n```\n\n----------------------------------------\n\nTITLE: Configuring MotoServer via API\nDESCRIPTION: This snippet demonstrates how to configure the MotoServer using a POST request to the `/moto-api/config` endpoint. It sets options for Batch, Lambda, and StepFunctions services. Requires the `requests` library. Expected input is a JSON object containing the service configurations.  The MotoServer must be running and accessible at `http://localhost:5000`.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/configuration/index.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\noptions = {\n    \"batch\": {\"use_docker\": True},\n    \"lambda\": {\"use_docker\": True},\n    \"stepfunctions\": {\"execute_state_machine\": True}\n}\nrequests.post(f\"http://localhost:5000/moto-api/config\", json=options)\n```\n\n----------------------------------------\n\nTITLE: Configuring Mock AWS Decorator (Python)\nDESCRIPTION: This snippet demonstrates how to configure Moto's mock behavior using the `@mock_aws` decorator. It allows setting options for various services like Batch, Lambda, Core (credentials, passthrough, reset session, whitelist), IAM, StepFunctions, and IoT. This configuration is applied only to the decorated function or test.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/configuration/index.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@mock_aws(config={\n    \"batch\": {\"use_docker\": True},\n    \"lambda\": {\"use_docker\": True},\n    \"core\": {\n        \"mock_credentials\": True,\n        \"passthrough\": {\n            \"urls\": [r\"s3.amazonaws.com/bucket*\"],\n            \"services\": [\"dynamodb\"]\n        },\n        \"reset_boto3_session\": True,\n        \"service_whitelist\": None,\n    },\n    \"iam\": {\"load_aws_managed_policies\": False},\n    \"stepfunctions\": {\"execute_state_machine\": True},\n    \"iot\": {\"use_valid_cert\": False},\n})\n```\n\n----------------------------------------\n\nTITLE: Service Whitelist Configuration (Python)\nDESCRIPTION: This snippet shows how to configure a service whitelist using the `@mock_aws` decorator. By specifying the `service_whitelist` within the `core` configuration, only the listed services (e.g., DynamoDB and S3) will be allowed. Attempts to access other AWS services will result in a `ServiceNotWhitelisted` exception.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/configuration/index.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@mock_aws(config={\"core\": {\"service_whitelist\": [\"dynamodb\", \"s3\"]}})\n```\n\n----------------------------------------\n\nTITLE: Setting Dummy AWS Environment Variables\nDESCRIPTION: These environment variables are essential to prevent your tests from accidentally interacting with a real AWS environment. Setting these variables explicitly configures boto3 to use dummy credentials and a default region, ensuring that all AWS calls are directed to the Moto mock.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/getting_started.rst#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nexport AWS_ACCESS_KEY_ID='testing'\nexport AWS_SECRET_ACCESS_KEY='testing'\nexport AWS_SECURITY_TOKEN='testing'\nexport AWS_SESSION_TOKEN='testing'\nexport AWS_DEFAULT_REGION='us-east-1'\n```\n\n----------------------------------------\n\nTITLE: Start Moto Proxy - Bash\nDESCRIPTION: Starts the Moto proxy after installation. The `-H 0.0.0.0` option allows the proxy to be reached by Lambda containers.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/proxy_mode.rst#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install moto[proxy]\n$ moto_proxy\n```\n\n----------------------------------------\n\nTITLE: Using Recorder in Server Mode - Python\nDESCRIPTION: This snippet demonstrates how to use the Moto Recorder in Server Mode. It uses requests to start and stop the recorder, download the log, upload the log, and replay the recording. It also includes resetting the recording.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/configuration/recorder/index.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Start the recorder\nrequests.post(\"http://localhost:5000/moto-api/recorder/start-recording\")\n# Make some requests\n\n# When you're ready..\nrequests.post(\"http://localhost:5000/moto-api/recorder/stop-recording\")\nlog = requests.get(\"http://localhost:5000/moto-api/recorder/download-recording\").content\n\n# Later on, upload this log to another system\nrequests.post(\"http://localhost:5000/moto-api/recorder/upload-recording\", data=log)\n# and replay the contents\nrequests.post(\"http://localhost:5000/moto-api/recorder/replay-recording\")\n\n# While the recorder is active, new requests will be appended to the existing log\n# Reset the current log if you want to start with an empty slate\nrequests.post(\"http://localhost:5000/moto-api/recorder/reset-recording\")\n```\n\n----------------------------------------\n\nTITLE: Install Moto Proxy - Bash\nDESCRIPTION: Installs Moto with the proxy dependencies using pip. This is a prerequisite for running Moto in proxy mode.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/proxy_mode.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install moto[proxy]\n```\n\n----------------------------------------\n\nTITLE: Configure SageMaker Endpoint Results (Sync) - Python\nDESCRIPTION: This snippet demonstrates how to configure the expected results for a SageMaker endpoint invocation using the `/moto-api/static/sagemaker/endpoint-results` API. It involves creating a JSON payload containing account ID, region, and a list of results.  Each result specifies the Body, ContentType, InvokedProductionVariant, and CustomAttributes to be returned by the SageMaker endpoint. The requests library is required to send the POST request. The results are consumed in FIFO order.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/services/sagemaker-runtime.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nexpected_results = {\n    \"account_id\": \"123456789012\",  # This is the default - can be omitted\n    \"region\": \"us-east-1\",  # This is the default - can be omitted\n    \"results\": [\n        {\n             \"Body\": \"first body\",\n             \"ContentType\": \"text/xml\",\n             \"InvokedProductionVariant\": \"prod\",\n             \"CustomAttributes\": \"my_attr\",\n         },\n        # other results as required\n    ],\n}\nrequests.post(\n    \"http://motoapi.amazonaws.com/moto-api/static/sagemaker/endpoint-results\",\n    json=expected_results,\n)\n```\n\n----------------------------------------\n\nTITLE: Environment Variables Configuration - Bash\nDESCRIPTION: Configures the `HTTPS_PROXY` environment variable to point to the Moto proxy and disables SSL verification for AWS CLI. This setup is useful for quickly testing against the proxy, but consider using `AWS_CA_BUNDLE` in production environments to avoid security risks associated with `--no-verify-ssl`.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/proxy_mode.rst#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nexport HTTPS_PROXY=http://localhost:5005\naws cloudformation list-stacks --no-verify-ssl\n```\n\n----------------------------------------\n\nTITLE: Configure SageMaker Endpoint Results (Async) - Python\nDESCRIPTION: This snippet demonstrates how to configure the expected results for an asynchronous SageMaker endpoint invocation using the `/moto-api/static/sagemaker/async-endpoint-results` API. It involves creating a JSON payload containing account ID, region, and a list of results. Each result contains a `data` field (string), which is a JSON string representing the output of the inference or sets the `is_failure` flag to `True`. The requests library is required to send the POST request. The results are consumed in FIFO order.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/services/sagemaker-runtime.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nexpected_results = {\n    \"account_id\": \"123456789012\",  # This is the default - can be omitted\n    \"region\": \"us-east-1\",  # This is the default - can be omitted\n    \"results\": [\n        {\n            \"data\": json.dumps({\"first\": \"output\"}),\n        },\n        {\n            \"is_failure\": True,\n            \"data\": \"second inference failed\",\n        },\n        # other results as required\n    ],\n}\nrequests.post(\n    \"http://motoapi.amazonaws.com/moto-api/static/sagemaker/async-endpoint-results\",\n    json=expected_results,\n)\n```\n\n----------------------------------------\n\nTITLE: Moto Proxy Help - Bash\nDESCRIPTION: Displays help information for the Moto proxy, including instructions on how to configure SDKs to use it.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/proxy_mode.rst#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ moto_proxy --help\n```\n\n----------------------------------------\n\nTITLE: Overriding the Default Server Endpoint\nDESCRIPTION: This environment variable overrides the default endpoint URL used by Moto when running in server mode. This is useful when the Moto server is running in a different container or on a different host.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/server_mode.rst#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nTEST_SERVER_MODE_ENDPOINT=http://moto-server:5000\n```\n\n----------------------------------------\n\nTITLE: Manual State Progression Example with Describe Calls - Python\nDESCRIPTION: This example demonstrates how to manually progress the state of a DAX cluster by invoking `client.describe_clusters` multiple times. The code retrieves the cluster status three times, with the status only advancing to \"available\" on the third call, as configured by the manual state transition. This showcases how to test status changes with explicit control.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/configuration/state_transition/index.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclient.create_cluster(ClusterName=name, ...)\n# The first time we retrieve the status\nstatus = client.describe_clusters(ClusterNames=[name])[\"Clusters\"][0][\"Status\"]\nassert status == \"creating\"\n# Second time we retrieve the status\nstatus = client.describe_clusters(ClusterNames=[name])[\"Clusters\"][0][\"Status\"]\nassert status == \"creating\"\n# This is the third time that we're retrieving the status - this time it will advance to the next status\nstatus = client.describe_clusters(ClusterNames=[name])[\"Clusters\"][0][\"Status\"]\nassert status == \"available\"\n```\n\n----------------------------------------\n\nTITLE: Using Recorder in Decorator Mode - Python\nDESCRIPTION: This snippet demonstrates how to use the Moto Recorder in decorator mode. It shows how to start and stop recording, download and upload the recording, and replay the contents. It also demonstrates resetting the recording.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/configuration/recorder/index.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom moto.moto_api import recorder\n\n# Start the recorder\nrecorder.start_recording()\n# Make some requests using boto3\n\n# When you're ready..\nrecorder.stop_recording()\nlog = recorder.download_recording()\n\n# Later on, upload this log to another system\nrecorder.upload_recording(log)\n# And replay the contents\nrecorder.replay_recording()\n\n# While the recorder is active, new requests will be appended to the existing log\n# Reset the current log if you want to start with an empty slate\nrecorder.reset_recording()\n```\n\n----------------------------------------\n\nTITLE: Mocking boto3 API Call in Python\nDESCRIPTION: This snippet demonstrates how to mock the `botocore.client.BaseClient._make_api_call` function to patch boto3 calls for unsupported AWS services. It defines a `mock_make_api_call` function that intercepts specific API requests (e.g., `ListAnalyzers` for the Access Analyzer service) and returns a predefined response. This allows simulating service responses without relying on actual service availability.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/services/patching_other_services.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport boto3\nimport botocore\nfrom unittest.mock import patch\n\n# Original botocore _make_api_call function\norig = botocore.client.BaseClient._make_api_call\n\n# Mocked botocore _make_api_call function\ndef mock_make_api_call(self, operation_name, kwarg):\n    # For example for the Access Analyzer service\n    # As you can see the operation_name has the list_analyzers snake_case form but\n    # we are using the ListAnalyzers form.\n    # Rationale -> https://github.com/boto/botocore/blob/develop/botocore/client.py#L810:L816\n    if operation_name == 'ListAnalyzers':\n        return { \"analyzers\": \n            [{\n                \"arn\": \"ARN\", \n                \"name\": \"Test Analyzer\" , \n                \"status\": \"Enabled\", \n                \"findings\": 0, \n                \"tags\":\"\", \n                \"type\": \"ACCOUNT\", \n                \"region\": \"eu-west-1\"\n                }]\n            }\n    # If we don't want to patch the API call\n    return orig(self, operation_name, kwarg)\n\n\ndef test_list_findings():\n    client = boto3.client(\"accessanalyzer\")\n\n    with patch('botocore.client.BaseClient._make_api_call', new=mock_make_api_call):\n        analyzers_list = client.list_analyzers()\n        assert len(analyzers_list[\"analyzers\"]) == 1\n        # include your assertions here\n```\n\n----------------------------------------\n\nTITLE: Pytest Fixtures with Moto\nDESCRIPTION: This code shows how to use pytest fixtures to create mocked AWS credentials and clients, and how to use the `mock_aws` context manager to mock all AWS interactions within the scope of the fixture. It includes fixtures for setting up credentials, creating S3 clients, and creating buckets, and then demonstrates their usage in test functions.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/getting_started.rst#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n@pytest.fixture(scope=\"function\")\ndef aws_credentials():\n    \"\"\"Mocked AWS Credentials for moto.\"\"\"\n    os.environ[\"AWS_ACCESS_KEY_ID\"] = \"testing\"\n    os.environ[\"AWS_SECRET_ACCESS_KEY\"] = \"testing\"\n    os.environ[\"AWS_SECURITY_TOKEN\"] = \"testing\"\n    os.environ[\"AWS_SESSION_TOKEN\"] = \"testing\"\n    os.environ[\"AWS_DEFAULT_REGION\"] = \"us-east-1\"\n\n@pytest.fixture(scope=\"function\")\ndef s3(aws_credentials):\n    \"\"\"\n    Return a mocked S3 client\n    \"\"\"\n    with mock_aws():\n        yield boto3.client(\"s3\", region_name=\"us-east-1\")\n\n@pytest.fixture(scope=\"function\")\ndef mocked_aws(aws_credentials):\n    \"\"\"\n    Mock all AWS interactions\n    Requires you to create your own boto3 clients\n    \"\"\"\n    with mock_aws():\n        yield\n\n@pytest.fixture\ndef create_bucket1(s3):\n    s3.create_bucket(Bucket=\"bb1\")\n\n@pytest.fixture\ndef create_bucket2(s3):\n    s3.create_bucket(Bucket=\"bb2\")\n\ndef test_s3_bucket_creation(s3):\n    s3.create_bucket(Bucket=\"somebucket\")\n\n    result = s3.list_buckets()\n    assert len(result[\"Buckets\"]) == 1\n\ndef test_s3_bucket_creation_through_fixtures(create_bucket1, create_bucket2):\n    result = boto3.client(\"s3\").list_buckets()\n    assert len(result[\"Buckets\"]) == 2\n\ndef test_generic_aws_fixture(mocked_aws):\n    s3_client = boto3.client(\"s3\")\n    s3_client.create_bucket(Bucket=\"somebucket\")\n```\n\n----------------------------------------\n\nTITLE: Mock AWS resources using mock_aws decorator\nDESCRIPTION: Demonstrates how to use the `mock_aws` decorator, which replaces all older decorators like `mock_dynamodb2` and `mock_rds2`. It mocks all AWS services defined in the test.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/releases.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@mock_aws\n```\n\n----------------------------------------\n\nTITLE: Mock AWS Authentication with set_initial_no_auth_action_count in Python\nDESCRIPTION: This code snippet demonstrates how to use the `set_initial_no_auth_action_count` decorator in a Python test case with the Moto library. The decorator is used to skip authentication for a specified number of actions, allowing for testing of IAM policies and access control. It requires `boto3` and `moto` to be installed. The test case defines an IAM policy that allows the 'ec2:Describe*' action, creates a boto3 EC2 client with the access key for an IAM principal that is assumed to have the defined policy, and then attempts to describe instances. The authentication/authorization logic will kick in after the first 4 AWS actions have been executed.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/iam.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@set_initial_no_auth_action_count(4)\n@mock_aws\ndef test_describe_instances_allowed():\n    policy_document = {\n        \"Version\": \"2012-10-17\",\n        \"Statement\": [\n            {\n                \"Effect\": \"Allow\",\n                \"Action\": \"ec2:Describe*\",\n                \"Resource\": \"*\"\n            }\n        ]\n    }\n    access_key = ...\n    # create access key for an IAM user/assumed role that has the policy above.\n    # this part should call __exactly__ 4 AWS actions, so that authentication and authorization starts exactly after this\n\n    client = boto3.client('ec2', region_name='us-east-1',\n                          aws_access_key_id=access_key['AccessKeyId'],\n                          aws_secret_access_key=access_key['SecretAccessKey'])\n\n    # if the IAM principal whose access key is used, does not have the permission to describe instances, this will fail\n    instances = client.describe_instances()['Reservations'][0]['Instances']\n    assert len(instances) == 0\n```\n\n----------------------------------------\n\nTITLE: Getting Registered Models with Mocking - Python\nDESCRIPTION: This snippet retrieves a list of supported models for state transitions using the `get_registered_models` method. It requires the `mock_all` decorator to ensure that models are registered when the mock for that resource is started. This enables you to verify which resources support state transitions in your Moto version.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/configuration/state_transition/index.rst#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nwith mock_all():\n    print(state_manager.get_registered_models())\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Account ID using Environment Variable in Moto\nDESCRIPTION: This snippet demonstrates how to configure the default AWS account ID for Moto using the `MOTO_ACCOUNT_ID` environment variable. It shows how to create buckets in different accounts by setting and unsetting the environment variable and verifies the bucket listing in each account. Requires boto3 and os libraries.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/multi_account.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Create a bucket in the default account\nclient = boto3.client(\"s3\", region_name=\"us-east-1\")\nclient.create_bucket(Bucket=\"bucket-default-account\")\n\n# Configure another account - all subsequent requests will use this account ID\nos.environ[\"MOTO_ACCOUNT_ID\"] = \"111111111111\"\nclient.create_bucket(Bucket=\"bucket-in-account-2\")\n\nassert [b[\"Name\"] for b in client.list_buckets()[\"Buckets\"]] == [\"bucket-in-account-2\"]\n\n# Now revert to the default account, by removing the environment variable\ndel os.environ[\"MOTO_ACCOUNT_ID\"]\nassert [b[\"Name\"] for b in client.list_buckets()[\"Buckets\"]] == [\"bucket-default-account\"]\n```\n\n----------------------------------------\n\nTITLE: Setting up HTTP/HTTPS proxy via environment variables\nDESCRIPTION: This bash snippet configures the HTTP and HTTPS proxy settings using environment variables. It sets the `HTTP_PROXY` and `HTTPS_PROXY` environment variables to point to a local proxy server running on localhost:8080. This allows tools like the AWS CLI to route their traffic through the proxy.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/contributing/development_tips/urls.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport HTTP_PROXY=http://localhost:8080\nexport HTTPS_PROXY=http://localhost:8080\naws ses describe-rule-set --no-verify-ssl\n```\n\n----------------------------------------\n\nTITLE: Patching boto3 Client/Resource with Moto\nDESCRIPTION: This snippet shows how to patch an existing boto3 client or resource after the Moto mock has been started. This is useful when it's not possible to rearrange imports to ensure the mock is established beforehand. It uses `patch_client` and `patch_resource` from `moto.core`.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/getting_started.rst#_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n# The client can come from an import, an __init__-file, wherever..\noutside_client = boto3.client(\"s3\")\ns3 = boto3.resource(\"s3\")\n\n@mock_aws\ndef test_mock_works_with_client_or_resource_created_outside():\n    from moto.core import patch_client, patch_resource\n    patch_client(outside_client)\n    patch_resource(s3)\n\n    assert outside_client.list_buckets()[\"Buckets\"] == []\n\n    assert list(s3.buckets.all()) == []\n```\n\n----------------------------------------\n\nTITLE: Configuring ECR Scan Finding Results with Moto API in Python\nDESCRIPTION: This code snippet demonstrates how to configure a custom response for the `describe_image_scan_findings` operation in Moto's ECR service. It involves defining a dictionary with the desired response, sending a POST request to the Moto API to register the custom result, and then calling the `describe_image_scan_findings` method on a boto3 ECR client to verify the custom response. The Moto API endpoint is `http://motoapi.amazonaws.com/moto-api/static/ecr/scan-finding-results`. The `findings` dictionary can also have an optional `region` key, defaulting to `us-east-1`.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/services/ecr.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Dict with the exact response that you want to Moto to return\nexample_response = {\n    \"imageScanFindings\": {\n        \"enhancedFindings\": [\n        ],\n        \"findingSeverityCounts\": {\n            \"MEDIUM\": 1,\n            \"UNTRIAGED\": 1\n        }\n    },\n    \"registryId\": 000000000000,\n    \"repositoryName\": \"reponame\",\n    \"imageId\": {\n        \"imageTag\": \"latest\"\n    },\n    \"imageScanStatus\": {\n        \"status\": \"COMPLETE\",\n        \"description\": \"The scan was completed successfully.\"\n    }\n}\nfidings = {\n    \"results\": [example_response],\n    # Specify a region - us-east-1 by default\n    \"region\": \"us-west-1\",\n}\nresp = requests.post(\n    \"http://motoapi.amazonaws.com/moto-api/static/ecr/scan-finding-results\",\n    json=findings,\n)\n\necr = boto3.client(\"ecr\", region_name=\"us-west-1\")\n# Create an image and start a scan\n# ...\n# Return the findings for reponame:latest\nfidings = ecr.describe_image_scan_findings(\n    repositoryName=\"reponame\", imageId={\"imageTag\": \"latest\"}\n)\nfidings.pop(\"ResponseMetadata\")\nassert fidings == example_response\n```\n\n----------------------------------------\n\nTITLE: Getting Current Transition in ServerMode - Python\nDESCRIPTION: This snippet shows how to retrieve the currently configured transition for a specific model in Moto ServerMode using an HTTP GET request. The request is made to the Moto API endpoint, with the `model_name` passed as a query parameter.  The `requests` library is used to perform the HTTP request.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/configuration/state_transition/index.rst#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nrequests.get(\"http://localhost:5000/moto-api/state-manager/get-transition?model_name=dax::cluster\")\n```\n\n----------------------------------------\n\nTITLE: Setting Time-Based State Transition for DAX Cluster - Python\nDESCRIPTION: This snippet sets a time-based state transition for a DAX cluster, causing it to become ready after 5 seconds. It uses the `state_manager.set_transition` function from `moto.moto_api` to simulate the asynchronous behavior of AWS. The `model_name` parameter specifies the resource to target, and the `transition` parameter defines the transition type (time) and duration (seconds).\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/configuration/state_transition/index.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom moto.moto_api import state_manager\n\nstate_manager.set_transition(model_name=\"dax::cluster\", transition={\"progression\": \"time\", \"seconds\": 5})\n\ncreate_and_wait_for_cluster(\"my_new_cluster\")\n```\n\n----------------------------------------\n\nTITLE: Running Moto Stand-alone Server\nDESCRIPTION: This command demonstrates how to start the Moto stand-alone server, which mocks out AWS HTTP endpoints. This is useful if you are using languages other than Python to interact with AWS services, or for testing purposes.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/getting_started.rst#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ moto_server -p3000\n```\n\n----------------------------------------\n\nTITLE: Configure Lambda Response Queue Python\nDESCRIPTION: This code demonstrates how to configure a queue of expected results for the mocked Lambda `invoke` method. It sends a POST request to the `/moto-api/static/lambda-simple/response` endpoint with a JSON payload containing the desired results and region. This allows simulating different responses from a Lambda function invocation during testing.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/services/lambda.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nexpected_results = {\"results\": [\"test\", \"test 2\"], \"region\": \"us-east-1\"}\nresp = requests.post(\n    \"http://motoapi.amazonaws.com/moto-api/static/lambda-simple/response\",\n    json=expected_results\n)\nassert resp.status_code == 201\n\nclient = boto3.client(\"lambda\", region_name=\"us-east-1\")\nresp = client.invoke(...) # resp[\"Payload\"].read().decode() == \"test\"\nresp = client.invoke(...) # resp[\"Payload\"].read().decode() == \"test2\"\n```\n\n----------------------------------------\n\nTITLE: Setting Immediate State Transition for DAX Cluster - Python\nDESCRIPTION: This snippet sets an immediate state transition for a DAX cluster, causing it to become ready immediately. It uses `state_manager.set_transition` to define the transition type as `immediate`.  This is useful for tests where waiting for resource availability is not required.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/configuration/state_transition/index.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom moto.moto_api import state_manager\n\nstate_manager.set_transition(model_name=\"dax::cluster\", transition={\"progression\": \"immediate\"})\n```\n\n----------------------------------------\n\nTITLE: Configuring Moto to Mock AWS with Pass-Through (Python)\nDESCRIPTION: This snippet demonstrates how to configure Moto to allow specific methods or services to reach out to real AWS endpoints. This is useful when you want to mock most of your AWS interactions but need to use real AWS for specific services or APIs. The configuration involves using the `mock_aws` decorator with a specific `config` parameter, defining URLs and services to allow passthrough.\nSOURCE: https://github.com/getmoto/moto/blob/master/CHANGELOG.md#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n@mock_aws(\n    config={\"core\": {\"mock_credentials\": False, \"passthrough\": {\"urls\": [], \"services\": []}}}\n)\n```\n\n----------------------------------------\n\nTITLE: Using Local Imports in Python Tests with Moto\nDESCRIPTION: This code snippet demonstrates how to use local Python imports within a unit test to ensure that the Moto mock is established before importing modules that create boto3 clients. This helps avoid issues related to early imports of `moto.core`.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/getting_started.rst#_snippet_12\n\nLANGUAGE: python\nCODE:\n```\ndef test_something(aws):\n    # aws is a fixture defined above that yields a boto3 s3 client.\n    \n    from some.package.that.does.something.with.s3 import some_func # <-- Local import for unit test\n    # ^^ Importing here ensures that the mock has been established.\n\n    some_func()  # The mock has been established from the \"s3\" pytest fixture, so this function that uses\n                 # a package-level S3 client will properly use the mock and not reach out to AWS.\n```\n\n----------------------------------------\n\nTITLE: Enable Test Proxy Mode - Bash\nDESCRIPTION: Sets an environment variable to automatically configure the Moto proxy when using `mock_service` decorators in pytest. This simplifies the configuration process during testing.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/proxy_mode.rst#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nTEST_PROXY_MODE=true pytest\n```\n\n----------------------------------------\n\nTITLE: Getting MotoServer Configuration Status via API\nDESCRIPTION: This snippet shows how to retrieve the current configuration status of the MotoServer using a GET request to the `/moto-api/config` endpoint. Requires the `requests` library.  The MotoServer must be running and accessible at `http://localhost:5000`. The output is a JSON object representing the current configuration.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/configuration/index.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nrequests.get(f\"http://localhost:5000/moto-api/config\").json()\n```\n\n----------------------------------------\n\nTITLE: Paginator Response Implementation in Moto (Python)\nDESCRIPTION: This code snippet demonstrates how to implement pagination in a Moto Response class.  It receives the NextToken parameter, calls the backend with max_results and next_token, and returns paged results and the next token for subsequent requests.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/contributing/development_tips/utilities.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass MyResponse(BaseResponse):\n\n    # The Response-class looks like any other - read the input parameters, and call the backend to retrieve the resources\n    def list_resources():\n        max_results = 100\n        next_token = self._get_param(\"NextToken\")\n        # Note that we're getting both the results and the next_token\n        # The decorator in the backend returns this tuple\n        paged_results, next_token = self.backend.list_resources(\n            max_results=max_results, next_token=next_token\n        )\n        ...\n```\n\n----------------------------------------\n\nTITLE: Update Backend Index for MotoServer\nDESCRIPTION: This script updates the backend index for MotoServer, ensuring that the server knows about the latest URL changes.  It is necessary to run this script after modifying `urls.py` to reflect the new URL paths to the MotoServer.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/contributing/faq.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nscripts/update_backend_index.py\n```\n\n----------------------------------------\n\nTITLE: Mock AWS Batch with Docker disabled using mock_aws\nDESCRIPTION: This example shows how to replace the deprecated `batch_simple` decorator using the `mock_aws` decorator and a specific configuration to disable Docker usage for AWS Batch.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/releases.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@mock_aws(config={\"batch\": {\"use_docker\": False}})\n```\n\n----------------------------------------\n\nTITLE: Configuring boto3 client with proxy\nDESCRIPTION: This Python snippet demonstrates how to configure a boto3 client to use a proxy. It uses the `botocore.config.Config` class to specify the proxy settings for both HTTP and HTTPS protocols. The client is then initialized with these settings, along with disabling SSL verification (use with caution).\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/contributing/development_tips/urls.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom botocore.config import Config\nproxy_config = Config(proxies={'http': 'localhost:8080', 'https': 'localhost:8080'})\nboto3.client(\"ses\", config=proxy_config, use_ssl=False, verify=False)\n```\n\n----------------------------------------\n\nTITLE: Setting Time-Based State Transition for Timeout Testing - Python\nDESCRIPTION: This snippet sets a time-based state transition to simulate a timeout scenario when creating a DAX cluster. It sets the transition to 600 seconds (10 minutes), allowing the test to verify the error handling logic when a resource takes too long to become ready. The try-except block demonstrates how to catch and verify the expected error.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/configuration/state_transition/index.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom moto.moto_api import state_manager\n\nstate_manager.set_transition(model_name=\"dax::cluster\", transition={\"progression\": \"time\", \"seconds\": 600})\n\ntry:\n    create_and_wait_for_cluster(\"my_new_cluster\")\nexcept:\n    verify_the_correct_error_was_thrown()\n```\n\n----------------------------------------\n\nTITLE: Terraform Configuration with Moto\nDESCRIPTION: This Terraform configuration sets up a provider to use Moto for testing. It specifies the region, skips credentials validation and metadata API checks, and defines the endpoint for the lambda service.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/server_mode.rst#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nprovider \"aws\" {\n    region                      = \"us-east-1\"\n    skip_credentials_validation = true\n    skip_metadata_api_check     = true\n    skip_requesting_account_id  = true\n    s3_force_path_style         = true\n\n    endpoints {\n        lambda           = \"http://localhost:5000\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Loading IAM Managed Policies via Environment Variable\nDESCRIPTION: This snippet demonstrates how to load AWS managed policies by setting the `MOTO_IAM_LOAD_MANAGED_POLICIES` environment variable to `true`. This is an alternative to configuring it within the `@mock_aws` decorator.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/configuration/index.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nMOTO_IAM_LOAD_MANAGED_POLICIES=true\n```\n\n----------------------------------------\n\nTITLE: Verify S3 Tests and Style in Devcontainer\nDESCRIPTION: These commands verify the tests and code style specifically for the S3 service within Moto, within a development container. It includes linting, formatting, static analysis, type checking, and unit testing.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/contributing/installation.rst#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nruff check moto/s3 tests/test_s3\nruff format --check moto/s3 tests/test_s3\npylint moto/s3 tests/test_s3\nmypy\npytest -sv tests/test_s3\n```\n\n----------------------------------------\n\nTITLE: Enabling Server Mode via Environment Variable\nDESCRIPTION: This environment variable enables Moto's server mode, directing tests to use the Moto server. This needs to be set before running tests that use Moto decorators.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/server_mode.rst#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nTEST_SERVER_MODE=true\n```\n\n----------------------------------------\n\nTITLE: Configure rds-data statement results - Python\nDESCRIPTION: This code demonstrates how to configure expected results for the `execute_statement` API call within the Moto testing framework. It involves making an HTTP POST request to the `/moto-api/static/rds-data/statement-results` endpoint with a JSON payload containing the desired results. This allows users to simulate specific responses from the `execute_statement` call for testing purposes.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/services/rds-data.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nexpected_results = {\n    \"account_id\": \"123456789012\",  # This is the default - can be omitted\n    \"region\": \"us-east-1\",  # This is the default - can be omitted\n    \"results\": [\n        {\n            \"records\": [...],\n            \"columnMetadata\": [...],\n            \"numberOfRecordsUpdated\": 42,\n            \"generatedFields\": [...],\n            \"formattedRecords\": \"some json\"\n        },\n        # other results as required\n    ],\n}\nresp = requests.post(\n    \"http://motoapi.amazonaws.com/moto-api/static/rds-data/statement-results\",\n    json=expected_results,\n)\nassert resp.status_code == 201\n\nrdsdata = boto3.client(\"rds-data\", region_name=\"us-east-1\")\nresp = rdsdata.execute_statement(resourceArn=\"not applicable\", secretArn=\"not applicable\", sql=\"SELECT some FROM thing\")\n```\n\n----------------------------------------\n\nTITLE: Glue Job Run State Advancement\nDESCRIPTION: This snippet shows how to advance the state of a Glue job run in Moto. It requires calling the `get_job_run` method using the Boto3 Glue client.  The state transition from STARTING to RUNNING to SUCCEEDED is immediate after the call.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/configuration/state_transition/models.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nboto3.client(\"glue\").get_job_run(..)\n```\n\n----------------------------------------\n\nTITLE: Seeding Moto in Server Mode - Python\nDESCRIPTION: This snippet shows how to seed Moto in Server Mode using a POST request to the `/moto-api/seed` endpoint. This ensures deterministic resource identifiers for consistent testing.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/configuration/recorder/index.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nrequests.post(f\"http://localhost:5000/moto-api/seed?a=42\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Athena Query Results for Testing in Moto\nDESCRIPTION: This snippet demonstrates how to configure expected query results in Moto for testing Athena's `get_query_results` functionality.  It involves sending a POST request to the Moto API endpoint with a JSON payload containing the desired results. This allows for predictable and controlled testing of applications that depend on Athena query results.\n\nThe `expected_results` dictionary defines the structure of the expected results, including rows and column information. The `account_id` and `region` parameters can be omitted if using the defaults. The endpoint `/moto-api/static/athena/query-results` is used to inject these results into the Moto backend.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/services/athena.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nexpected_results = {\n    \"account_id\": \"123456789012\",  # This is the default - can be omitted\n    \"region\": \"us-east-1\",  # This is the default - can be omitted\n    \"results\": [\n        {\n            \"rows\": [{\"Data\": [{\"VarCharValue\": \"1\"}]}],\n            \"column_info\": [{\n                \"CatalogName\": \"string\",\n                \"SchemaName\": \"string\",\n                \"TableName\": \"string\",\n                \"Name\": \"string\",\n                \"Label\": \"string\",\n                \"Type\": \"string\",\n                \"Precision\": 123,\n                \"Scale\": 123,\n                \"Nullable\": \"NOT_NULL\",\n                \"CaseSensitive\": True,\n            }],\n        },\n        # other results as required\n    ],\n}\nresp = requests.post(\n    \"http://motoapi.amazonaws.com/moto-api/static/athena/query-results\",\n    json=expected_results,\n)\nassert resp.status_code == 201\n\nclient = boto3.client(\"athena\", region_name=\"us-east-1\")\ndetails = client.get_query_execution(QueryExecutionId=\"any_id\")[\"QueryExecution\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring Account ID Using Request Header in Moto\nDESCRIPTION: This snippet demonstrates how to configure the AWS account ID for Moto by using the `x-moto-account-id` request header. It uses the requests library to send PUT and GET requests to simulate creating and listing S3 buckets in different accounts. The Moto server needs to be running in server mode. This method only works if `MOTO_ACCOUNT_ID` is not set.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/multi_account.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nheaders ={\"x-moto-account-id\": \"333344445555\"}\nrequests.put(\"http://bucket.localhost:5000/\", headers=headers)\n\n# This will return a list of all buckets in account 333344445555\nrequests.get(\"http://localhost:5000\", headers=headers)\n\n# This will return an empty list, as there are no buckets in the default account\nrequests.get(\"http://localhost:5000\")\n```\n\n----------------------------------------\n\nTITLE: Creating Fake AWS Credentials for CI/CD\nDESCRIPTION: This bash command creates fake AWS credentials to satisfy requirements in CI/CD environments such as Tox, Travis CI, and Github Actions.  This prevents errors during testing where real AWS credentials are not available or should not be used.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/getting_started.rst#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nmkdir ~/.aws && touch ~/.aws/credentials && echo -e \"[default]\\naws_access_key_id = test\\naws_secret_access_key = test\" > ~/.aws/credentials\n```\n\n----------------------------------------\n\nTITLE: Running Moto in ServerMode (Bash)\nDESCRIPTION: This snippet shows how to run Moto in ServerMode using a standalone Flask server. It starts the Moto server with `python moto/server.py` and then runs tests against the server using `TEST_SERVER_MODE=true pytest -sv tests/test_service/..`. This verifies that tests pass in ServerMode, ensuring compatibility with a Flask-based deployment.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/contributing/development_tips/tests.rst#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython moto/server.py\nTEST_SERVER_MODE=true pytest -sv tests/test_service/..\n```\n\n----------------------------------------\n\nTITLE: Configure Inspector2 List Findings Results\nDESCRIPTION: This Python code snippet demonstrates how to configure the results returned by the `list_findings` API in Moto for Inspector2. It posts a JSON payload to the `/moto-api/static/inspector2/findings-results` endpoint, specifying the desired findings. This allows for mocking the API response during testing.  The account_id and region parameters are optional, defaulting to '123456789012' and 'us-east-1' respectively.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/services/inspector2.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfindings = {\n    \"results\": [\n        [\n            {\n                \"awsAccountId\": \"111122223333\",\n                \"codeVulnerabilityDetails\": {\"cwes\": [\"a\"], \"detectorId\": \"..\"},\n            }\n        ],\n        # .. other findings as required\n    ],\n    \"account_id\": \"123456789012\",  # This is the default - can be omitted\n    \"region\": \"us-east-1\",  # This is the default - can be omitted\n}\nresp = requests.post(\n    \"http://motoapi.amazonaws.com/moto-api/static/inspector2/findings-results\",\n    json=findings,\n)\n\ninspector2 = boto3.client(\"inspector2\", region_name=\"us-east-1\")\nfindings = inspector2.list_findings()[\"findings\"]\n```\n\n----------------------------------------\n\nTITLE: Terraform Configuration with Proxy\nDESCRIPTION: Configures the AWS provider in Terraform to use the Moto proxy. This includes setting the `http_proxy` and either specifying the `custom_ca_bundle` or disabling SSL verification using `insecure = true`. Providing `custom_ca_bundle` is recommended for secure environments.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/proxy_mode.rst#_snippet_8\n\nLANGUAGE: terraform\nCODE:\n```\nprovider \"aws\" {\n    region                      = \"us-east-1\"\n    http_proxy                  = \"http://localhost:5005\"\n    custom_ca_bundle            = \"/location/of/moto/ca/cert.crt\"\n    # OR\n    insecure                    = true\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Moto with Homebrew\nDESCRIPTION: This command installs Moto using the Homebrew package manager on macOS. This is an alternative to installing it with pip, especially if Python is not your primary language.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/server_mode.rst#_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nbrew install moto\n```\n\n----------------------------------------\n\nTITLE: Paginator Backend Configuration in Moto (Python)\nDESCRIPTION: This code snippet shows how to configure the Moto Paginator in a Backend class using the `@paginate` decorator. It defines the PAGINATION_MODEL with settings like input token, limit key, unique attribute, and handling of invalid tokens. This configuration is used by the `paginate` decorator to manage pagination logic.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/contributing/development_tips/utilities.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom moto.utilities.paginator import paginate\nclass MyBackend(BaseBackend):\n\n    # The model that contains the configuration required for the paginator\n    PAGINATION_MODEL = {\n        # key = name of the method in the backend\n        \"list_resources\": {\n            #\n            # name of the kwarg that contains the next token, which should be passed to the backend\n            # backend.list_resources(next_token=..)\n            \"input_token\": \"next_token\",\n            #\n            # name of the kwarg that contains the max number of results, which should be passed to the backend\n            \"limit_key\": \"max_results\",\n            #\n            # The default limit of the above parameter is not provided\n            \"limit_default\": 100,\n            #\n            # One or more attributes  that guarantee uniqueness for a given resource.\n            # For most resources it will just be an ID, or ARN, which is always unique.\n            # An encoded version of these attributes is used as the NextToken.\n            \"unique_attribute\": \"arn\",\n            # Provide a list if only a combination of attributes is guaranteed to be unique\n            \"unique_attribute\": [\"start_date\", \"execution_arn\"],\n            #\n            # By default, an exception will be thrown if the user-provided next_token is invalid\n            \"fail_on_invalid_token\": True  # Default value - no need to specify this\n            # This can be customized to:\n            #   - silently fail, and just return an empty list\n            \"fail_on_invalid_token\": False,\n            #   - throw a custom exception, by providing an exception class\n            #     The paginator will `raise CustomException()` or `raise CustomException(invalid_token)`\n            \"fail_on_invalid_token\": CustomException\n        },\n        # another method that will use different configuration options\n        \"list_other_things\": {\n            ...\n        },\n    }\n```\n\n----------------------------------------\n\nTITLE: Starting the Moto Server from Python\nDESCRIPTION: This code snippet demonstrates how to start the Moto server from within a Python script, in a separate thread.  It initializes and starts the `ThreadedMotoServer`, allowing tests to be run against it, and then stops the server when finished. It requires the `moto.server` and `boto3` libraries.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/server_mode.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom moto.server import ThreadedMotoServer\nserver = ThreadedMotoServer()\nserver.start()\n# run tests\nclient = boto3.client(\"service\", endpoint_url=\"http://localhost:5000\")\n...\nserver.stop()\n```\n\n----------------------------------------\n\nTITLE: KMS Create Key Policy Considerations Python\nDESCRIPTION: The create_key function in Moto does not require a valid Policy. However, if a valid policy is provided, Moto will perform basic authorization checks on key-related operations. These checks will throw an AccessDeniedException if the principal and resource are set to \"*\" and the action is `describe_key`.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/services/kms.rst#_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Testing S3 interaction with Raw Moto Mocking\nDESCRIPTION: This Python code demonstrates how to use Moto's raw mocking capabilities by manually starting and stopping the mock. This provides fine-grained control over when the AWS services are mocked.  The test creates an S3 bucket, saves an object using the MyModel class, and verifies the object was saved, stopping the mock after the test completes.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/getting_started.rst#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndef test_my_model_save():\n    mock = mock_aws()\n    mock.start()\n\n    conn = boto3.resource(\"s3\", region_name=\"us-east-1\")\n    conn.create_bucket(Bucket=\"mybucket\")\n\n    model_instance = MyModel(\"steve\", \"is awesome\")\n    model_instance.save()\n\n    body = conn.Object(\"mybucket\", \"steve\").get()[\n        \"Body\"].read().decode(\"utf-8\")\n\n    assert body == \"is awesome\"\n\n    mock.stop()\n```\n\n----------------------------------------\n\nTITLE: Paginator Backend Decorator Usage in Moto (Python)\nDESCRIPTION: This code demonstrates the usage of the `@paginate` decorator in a Moto Backend class. It showcases methods that automatically handle pagination based on the PAGINATION_MODEL. It also illustrates how to optionally include `max_results` argument for custom validation.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/contributing/development_tips/utilities.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom moto.utilities.paginator import paginate\n\n    # The decorator with the pagination logic\n    @paginate(pagination_model=PAGINATION_MODEL)\n    # Note that this method does not have the 'next_token'/'max_results'-arguments\n    def list_resources(self):\n        # Note that we simply return all resources - the decorator takes care of all pagination magic\n        return self.full_list_of_resources\n\n    @paginate(pagination_model=PAGINATION_MODEL)\n    # If we do need the 'next_token'/'max_results'-arguments, just add them to the function\n    # The decorator will only pass them along if required\n    def list_other_things(self, max_results=None):\n        if max_results == \"42\":\n            # Custom validation magic\n            pass\n        return self.full_list_of_resources\n```\n\n----------------------------------------\n\nTITLE: Configuring Batch and Lambda using the mock_aws decorator (Python)\nDESCRIPTION: This snippet showcases the use of the `mock_aws` decorator to configure the `mock_batch_simple` and `mock_lambda_simple` decorators with specific parameters. Specifically, it shows how to disable Docker usage for both Batch and Lambda services within Moto.\nSOURCE: https://github.com/getmoto/moto/blob/master/CHANGELOG.md#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n`@mock_aws(config={\"batch\": {\"use_docker\": False}, \"lambda\": {\"use_docker\": False}})`\n```\n\n----------------------------------------\n\nTITLE: Environment Variables Configuration with CA Bundle - Bash\nDESCRIPTION: Configures the `HTTPS_PROXY` environment variable and specifies the location of the CA certificate using the `AWS_CA_BUNDLE` environment variable. This method is more secure than disabling SSL verification. The location of the CA certificate can be obtained using `moto_proxy --help`.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/proxy_mode.rst#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nexport HTTPS_PROXY=http://localhost:5005\nexport AWS_CA_BUNDLE=/location/of/moto/ca/cert.crt\naws cloudformation list-stacks\n```\n\n----------------------------------------\n\nTITLE: Start Moto Proxy with Host - Bash\nDESCRIPTION: Starts the Moto proxy, binding it to all network interfaces (0.0.0.0). This is necessary for the proxy to be accessible from other machines or containers, such as Lambda functions. Warning: Exposing the proxy publicly may pose security risks.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/proxy_mode.rst#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ moto_proxy -H 0.0.0.0\n```\n\n----------------------------------------\n\nTITLE: Mock AWS Lambda with Docker disabled using mock_aws\nDESCRIPTION: This example shows how to replace the deprecated `awslambda_simple` decorator using the `mock_aws` decorator and a specific configuration to disable Docker usage for AWS Lambda.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/releases.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@mock_aws(config={\"lambda\": {\"use_docker\": False}})\n```\n\n----------------------------------------\n\nTITLE: Setting Time-Based State Transition in ServerMode - Python\nDESCRIPTION: This snippet demonstrates how to set a time-based state transition for a DAX cluster in Moto ServerMode using an HTTP POST request. The request sends a JSON payload containing the `model_name` and `transition` details to the Moto API endpoint. It uses the `requests` library to make the HTTP request and `json.dumps` to serialize the payload.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/configuration/state_transition/index.rst#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\npost_body = dict(model_name=\"dax::cluster\", transition={\"progression\": \"time\", \"seconds\": 5})\nresp = requests.post(\"http://localhost:5000/moto-api/state-manager/set-transition\", data=json.dumps(post_body))\n```\n\n----------------------------------------\n\nTITLE: Using ThreadedMotoServer with Decorators\nDESCRIPTION: This example demonstrates how to combine `ThreadedMotoServer` with the `@mock_aws` decorator. It sets up the server, starts it, and then uses the decorator to mock AWS services within the test. It verifies that state created with the server can be accessed via the decorators. Requires `unittest`, `moto.server`, `moto`, and `boto3` libraries.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/server_mode.rst#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nclass TestThreadedMotoServer(unittest.TestCase):\n\n    def setUp(self):\n        self.server = ThreadedMotoServer()\n        self.server.start()\n\n    def tearDown(self):\n        self.server.stop()\n\n    @mock_aws\n    def test_load_data_using_decorators(self):\n        server_client = boto3.client(\"s3\", endpoint_url=\"http://127.0.0.1:5000\")\n        server_client.create_bucket(Bucket=\"test\")\n\n        in_mem_client = boto3.client(\"s3\")\n        buckets = in_mem_client.list_buckets()[\"Buckets\"]\n        self.assertEqual([b[\"Name\"] for b in buckets], [\"test\"])\n```\n\n----------------------------------------\n\nTITLE: Disabling Reset API Calls\nDESCRIPTION: This environment variable prevents Moto from calling the reset API between tests when running in server mode, allowing the state to be preserved between tests.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/server_mode.rst#_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nMOTO_CALL_RESET_API=false\n```\n\n----------------------------------------\n\nTITLE: Seeding Within a Recording - Python\nDESCRIPTION: This snippet illustrates how to seed Moto at the beginning of a recording to ensure the resulting state will always be the same. Seeding must be done before any AWS requests are made. This combination ensures repeatability.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/configuration/recorder/index.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nrequests.post(\"http://localhost:5000/moto-api/recorder/start-recording\")\nrequests.post(\"http://localhost:5000/moto-api/seed?a=42\")\n\nclient = boto3.client(\"ec2\", region_name=\"us-east-1\")\nresp = client.run_instances(ImageId=\"ami-12c6146b\", MinCount=1, MaxCount=1)\n\nrequests.post(\"http://localhost:5000/moto-api/recorder/stop-recording\")\n```\n\n----------------------------------------\n\nTITLE: Mock AWS IAM and load managed policies using mock_aws\nDESCRIPTION: Demonstrates how to configure Moto to load AWS IAM managed Policies. This can be configured via decorator or environment variable.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/releases.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n@mock_aws(config={\"iam\": {\"load_aws_managed_policies\": True}})\n```\n\n----------------------------------------\n\nTITLE: Mocking Default AWS Region in Moto using Python\nDESCRIPTION: This snippet demonstrates how to mock the default AWS region in Moto by disabling region validation and setting the AWS_DEFAULT_REGION environment variable. This provides an extra layer of protection against accidentally interacting with a real AWS environment. Requires the `os` module.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/faq.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nos.environ[\"MOTO_ALLOW_NONEXISTENT_REGION\"] = True\nos.environ[\"AWS_DEFAULT_REGION\"] = \"antarctica\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Account using STS Assume Role in Moto (Same Account)\nDESCRIPTION: This snippet demonstrates how to configure the AWS account for Moto using STS's `assume_role` feature within the same account. It creates a bucket, assumes a role in the default account, and verifies that the assumed role has access to the created bucket. Requires boto3. The role does not actually need to exist.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/multi_account.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Create a bucket using the default access credentials\nclient1 = boto3.client(\"s3\", region_name=\"us-east-1\")\nclient1.create_bucket(Bucket=\"foobar\")\n\n# Assume a role in our account\n# Note that this Role does not need to exist\ndefault_account = \"123456789012\"\nsts = boto3.client(\"sts\")\nresponse = sts.assume_role(\n    RoleArn=f\"arn:aws:iam::{default_account}:role/my-role\",\n    RoleSessionName=\"test-session-name\",\n    ExternalId=\"test-external-id\",\n)\n\n# These access credentials give access to the default account\nclient2 = boto3.client(\n    \"s3\",\n    aws_access_key_id=response[\"Credentials\"][\"AccessKeyId\"],\n    aws_secret_access_key=response[\"Credentials\"][\"SecretAccessKey\"],\n    aws_session_token=response[\"Credentials\"][\"SessionToken\"],\n    region_name=\"us-east-1\",\n)\nclient2.list_buckets()[\"Buckets\"].should.have.length_of(1)\n```\n\n----------------------------------------\n\nTITLE: Configuring Resilience Hub Assessments Response in Moto (Python)\nDESCRIPTION: This Python code snippet demonstrates how to configure a queue of expected results for the `list_app_assessments` API in Moto. It uses the Moto API endpoint `/moto-api/static/resilience-hub-assessments/response` to post a JSON payload containing a list of assessment summaries. Subsequent calls to `list_app_assessments` will return results from this queue in a FIFO manner.\n\nDependencies: requests, boto3.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/services/resiliencehub.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nsummary1 = {\"appArn\": \"app_arn1\", \"appVersion\": \"some version\", ...}\nsummary2 = {\"appArn\": \"app_arn2\", ...}\nresults = {\"results\": [[summary1, summary2], [summary2]], \"region\": \"us-east-1\"}\nresp = requests.post(\n    \"http://motoapi.amazonaws.com/moto-api/static/resilience-hub-assessments/response\",\n    json=results,\n)\n\nassert resp.status_code == 201\n\nclient = boto3.client(\"lambda\", region_name=\"us-east-1\")\n# First result\nresp = client.list_app_assessments() # [summary1, summary2]\n# Second result\nresp = client.list_app_assessments(assessmentStatus=\"Pending\") # [summary2]\n```\n\n----------------------------------------\n\nTITLE: Implemented Feature: put_parameter\nDESCRIPTION: Indicates that the 'put_parameter' API call of the SSM service is fully implemented in Moto.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/services/ssm.rst#_snippet_30\n\n\n\n----------------------------------------\n\nTITLE: Start Replication Task\nDESCRIPTION: This feature starts a replication task. The following parameters have not yet been implemented: StartReplicationTaskType, CDCStartTime, CDCStartPosition, CDCStopPosition.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/services/dms.rst#_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nstart_replication_task\n  \n        The following parameters have not yet been implemented:\n        StartReplicationTaskType, CDCStartTime, CDCStartPosition, CDCStopPosition\n```\n\n----------------------------------------\n\nTITLE: Configuration for IOT Certificates with DER Encoding\nDESCRIPTION: This code snippet demonstrates how to configure Moto to compute certificate hashes using the DER encoding for IOT, as per the AWS specification. This is an opt-in behavior and needs to be explicitly enabled via the configuration.\nSOURCE: https://github.com/getmoto/moto/blob/master/CHANGELOG.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@mock_aws(config={\"iot\": {\"use_valid_cert\": True}})\n```\n\n----------------------------------------\n\nTITLE: Configure Botocore Proxy - Python\nDESCRIPTION: Configures a botocore client to use the Moto proxy by specifying the proxy endpoint in the `proxies` configuration and disabling SSL verification (`verify=False`). This approach allows for manually configuring the proxy for specific clients within Python code.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/proxy_mode.rst#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom botocore.config import Config\n\nconfig = Config(proxies={\"https\": \"http://localhost:5005\"})\nclient = boto3.client(\"s3\", config=config, verify=False)\n```\n\n----------------------------------------\n\nTITLE: Advancing Resource Status in Python\nDESCRIPTION: This snippet showcases how to advance the resource status using the advance() method, part of ManagedState, within backend operations like listing and describing resources. It illustrates the importance of calling `advance()` in all resource-retrieval methods (list, describe, get_) to ensure proper state progression. Manual and time-based progressions are handled by the state manager.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/contributing/development_tips/new_state_transitions.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom moto.moto_api import state_manager\n\nclass Backend():\n\n    def list_resources():\n        for ec2_instance in all_resources:\n            # For users who configured models of this type to transition manually, this is where we advance the status\n            # Say the transition is registered like so: {\"progression\": \"manual\", \"times\": 3}\n            #\n            # The user calls 'list_resources' 3 times, the advance-method is called 3 times, and the state manager advances the state after the 3rd time.\n            # This all happens out of the box - just make sure that the `advance()`-method is invoked when appropriate\n            #\n            # If the transition is set to progress immediately, this method does exactly nothing.\n            #\n            # If the user decides to change the progression to be time-based, where the status changed every y seconds, this method does exactly nothing.\n            # It will has to be called though, for people who do have the manual progression configured\n            model.advance()\n        return all_models\n\n    def describe_resource():\n        resource = ...\n        # Depending on the API, there may be different ways for the user to retrieve the same information\n        # Make sure that each way (describe, list, get_, ) calls the advance()-method, and the resource can actually progress to the next state\n        resource.advance()\n        return resource\n```\n\n----------------------------------------\n\nTITLE: KMS Verify Operation Python\nDESCRIPTION: The verify function validates a message using the public key from the generated private key.  The grant_tokens parameter is not implemented, and the MessageType parameter DIGEST is also not yet implemented.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/services/kms.rst#_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: Implemented Feature: delete_maintenance_window\nDESCRIPTION: Indicates that the 'delete_maintenance_window' API call of the SSM service is fully implemented in Moto.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/services/ssm.rst#_snippet_5\n\n\n\n----------------------------------------\n\nTITLE: Implemented Feature: add_tags_to_resource\nDESCRIPTION: Indicates that the 'add_tags_to_resource' API call of the SSM service is fully implemented in Moto.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/services/ssm.rst#_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Implemented Feature: get_parameter\nDESCRIPTION: Indicates that the 'get_parameter' API call of the SSM service is fully implemented in Moto.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/services/ssm.rst#_snippet_21\n\n\n\n----------------------------------------\n\nTITLE: Configuring Account using STS Assume Role in Moto (Different Account)\nDESCRIPTION: This snippet demonstrates how to configure the AWS account for Moto using STS's `assume_role` feature to access resources in a different account. It creates a bucket in the default account, assumes a role in a different account, and verifies that the assumed role does not have access to the bucket in the default account. Requires boto3. The role does not actually need to exist.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/multi_account.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Create a bucket with default access credentials\nclient1 = boto3.client(\"s3\", region_name=\"us-east-1\")\nclient1.create_bucket(Bucket=\"foobar\")\n\n# Assume a role in a different account\n# Note that the Role does not need to exist\nsts = boto3.client(\"sts\")\nresponse = sts.assume_role(\n    RoleArn=\"arn:aws:iam::111111111111:role/role-in-another-account\",\n    RoleSessionName=\"test-session-name\",\n    ExternalId=\"test-external-id\",\n)\n\n# Retrieve all buckets in this new account - this will be completely empty\nclient2 = boto3.client(\n    \"s3\",\n    aws_access_key_id=response[\"Credentials\"][\"AccessKeyId\"],\n    aws_secret_access_key=response[\"Credentials\"][\"SecretAccessKey\"],\n    aws_session_token=response[\"Credentials\"][\"SessionToken\"],\n    region_name=\"us-east-1\",\n)\nclient2.list_buckets()[\"Buckets\"].should.have.length_of(0)\n```\n\n----------------------------------------\n\nTITLE: Implemented Feature: create_document\nDESCRIPTION: Indicates that the 'create_document' API call of the SSM service is fully implemented in Moto.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/services/ssm.rst#_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Implemented Feature: describe_parameters\nDESCRIPTION: Indicates that the 'describe_parameters' API call of the SSM service is fully implemented in Moto.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/services/ssm.rst#_snippet_16\n\n\n\n----------------------------------------\n\nTITLE: Unsetting State Transition - Python\nDESCRIPTION: This snippet shows how to unset a custom state transition using the `unset_transition` function from `moto.moto_api`. It removes any custom transitions that were set for the specified model, resetting it to the default behavior.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/configuration/state_transition/index.rst#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom moto.moto_api import state_manager\n\nstate_manager.unset_transition(model_name=\"dax::cluster\")\n```\n\n----------------------------------------\n\nTITLE: Moto Configuration with mock_aws decorator\nDESCRIPTION: Configures the `mock_aws` decorator to specify settings for Batch and Lambda services, disabling Docker usage.\nSOURCE: https://github.com/getmoto/moto/blob/master/CHANGELOG.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@mock_aws(config={\"batch\": {\"use_docker\": False}, \"lambda\": {\"use_docker\": False}})\n```\n\n----------------------------------------\n\nTITLE: Implemented Feature: delete_parameter\nDESCRIPTION: Indicates that the 'delete_parameter' API call of the SSM service is fully implemented in Moto.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/services/ssm.rst#_snippet_6\n\n\n\n----------------------------------------\n\nTITLE: Implemented Feature: describe_maintenance_window_tasks\nDESCRIPTION: Indicates that the 'describe_maintenance_window_tasks' API call of the SSM service is fully implemented in Moto.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/services/ssm.rst#_snippet_14\n\n\n\n----------------------------------------\n\nTITLE: Implemented Feature: get_parameter_history\nDESCRIPTION: Indicates that the 'get_parameter_history' API call of the SSM service is fully implemented in Moto.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/services/ssm.rst#_snippet_22\n\n\n\n----------------------------------------\n\nTITLE: Setting IAM Managed Policies via Environment Variable (Bash)\nDESCRIPTION: This snippet shows how to set an environment variable to tell Moto to explicitly load AWS managed IAM policies.  This is an alternative to using the `@mock_aws` decorator. Requires setting the `MOTO_IAM_LOAD_MANAGED_POLICIES` environment variable to `true`.\nSOURCE: https://github.com/getmoto/moto/blob/master/CHANGELOG.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nMOTO_IAM_LOAD_MANAGED_POLICIES=true\n```\n\n----------------------------------------\n\nTITLE: Configuring Expected Timestream Query Results in Moto (Python)\nDESCRIPTION: This snippet demonstrates how to configure expected results for Timestream queries in Moto using the dedicated API. It involves defining a dictionary containing account ID, region, and a map of query strings to a list of expected results. The `None` key is used to specify results for unknown queries. This configuration is then sent to the Moto API endpoint via a POST request.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/services/timestream-query.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfirst_result = {\n    'QueryId': 'some_id',\n    'Rows': [...],\n    'ColumnInfo': [...],\n    'QueryStatus': ...\n}\nresult_for_unknown_query_string = {\n    'QueryId': 'unknown',\n    'Rows': [...],\n    'ColumnInfo': [...],\n    'QueryStatus': ...\n}\nexpected_results = {\n    \"account_id\": \"123456789012\",  # This is the default - can be omitted\n    \"region\": \"us-east-1\",  # This is the default - can be omitted\n    \"results\": {\n        # Use the exact querystring, and a list of results for it\n        # For example\n        \"SELECT data FROM mytable\": [first_result, ...],\n        # Use None if the exact querystring is unknown/irrelevant\n        None: [result_for_unknown_query_string, ...],\n    }\n}\nrequests.post(\n    \"http://motoapi.amazonaws.com/moto-api/static/timestream/query-results\",\n    json=expected_results,\n)\n```\n\n----------------------------------------\n\nTITLE: Install Moto with specific service dependencies\nDESCRIPTION: This command demonstrates how to install Moto with dependencies for a specific AWS service. Replace `service` with the desired service (e.g., `s3`, `dynamodb`). This reduces the number of dependencies installed, compared to installing everything.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/releases.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install moto[service]\n```\n\n----------------------------------------\n\nTITLE: Implemented Feature: get_parameters_by_path\nDESCRIPTION: Indicates that the 'get_parameters_by_path' API call of the SSM service is fully implemented in Moto.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/services/ssm.rst#_snippet_24\n\n\n\n----------------------------------------\n\nTITLE: Implemented Feature: describe_maintenance_windows\nDESCRIPTION: Indicates that the 'describe_maintenance_windows' API call of the SSM service is implemented in Moto, with limitations. Returns all windows, pagination has not been implemented and only filtering for Name is supported. The NextExecutionTime-field is not returned.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/services/ssm.rst#_snippet_15\n\n\n\n----------------------------------------\n\nTITLE: Implemented Feature: register_task_with_maintenance_window\nDESCRIPTION: Indicates that the 'register_task_with_maintenance_window' API call of the SSM service is fully implemented in Moto.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/services/ssm.rst#_snippet_32\n\n\n\n----------------------------------------\n\nTITLE: Run Moto Linting Checks\nDESCRIPTION: This command performs linting checks on the Moto codebase to ensure code quality and adherence to coding standards.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/contributing/installation.rst#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmake lint\n```\n\n----------------------------------------\n\nTITLE: Configuring AmazonSQS Client in Java\nDESCRIPTION: This Java code configures the AmazonSQS client to use the Moto server. It sets the region and endpoint to point to the Moto server running on localhost at port 5000.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/server_mode.rst#_snippet_10\n\nLANGUAGE: java\nCODE:\n```\nAmazonSQS sqs = new AmazonSQSClient();\nsqs.setRegion(Region.getRegion(Regions.US_WEST_2));\nsqs.setEndpoint(\"http://localhost:5000\");\n```\n\n----------------------------------------\n\nTITLE: Implemented Feature: update_document\nDESCRIPTION: Indicates that the 'update_document' API call of the SSM service is fully implemented in Moto.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/services/ssm.rst#_snippet_35\n\n\n\n----------------------------------------\n\nTITLE: Implemented Feature: describe_document\nDESCRIPTION: Indicates that the 'describe_document' API call of the SSM service is fully implemented in Moto.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/services/ssm.rst#_snippet_11\n\n\n\n----------------------------------------\n\nTITLE: Implemented Feature: describe_document_permission\nDESCRIPTION: Indicates that the 'describe_document_permission' API call of the SSM service is implemented in Moto, with limitations. Parameters max_results, permission_type, and next_token not yet implemented.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/services/ssm.rst#_snippet_12\n\n\n\n----------------------------------------\n\nTITLE: Set environment variable to load AWS IAM managed policies\nDESCRIPTION: Demonstrates how to configure Moto to load AWS IAM managed Policies using the environment variable.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/releases.rst#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nMOTO_IAM_LOAD_MANAGED_POLICIES=true\n```\n\n----------------------------------------\n\nTITLE: Configuring AmazonSQS Client in Scala\nDESCRIPTION: This Scala code configures the AmazonSQS client to use the Moto server. It sets the region and endpoint to point to the Moto server running on localhost at port 5000.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/server_mode.rst#_snippet_11\n\nLANGUAGE: scala\nCODE:\n```\nval region = Region.getRegion(Regions.US_WEST_2).getName\nval serviceEndpoint = \"http://localhost:5000\"\nval config = new AwsClientBuilder.EndpointConfiguration(serviceEndpoint, region)\nval amazonSqs =  AmazonSQSClientBuilder.standard().withEndpointConfiguration(config).build\n```\n\n----------------------------------------\n\nTITLE: Describe Replication Tasks\nDESCRIPTION: This feature describes replication tasks. The parameter WithoutSettings has not yet been implemented.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/services/dms.rst#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\ndescribe_replication_tasks\n  \n        The parameter WithoutSettings has not yet been implemented\n```\n\n----------------------------------------\n\nTITLE: Implemented Feature: delete_patch_baseline\nDESCRIPTION: Indicates that the 'delete_patch_baseline' API call of the SSM service is implemented in Moto, with limitations. Assumes the provided BaselineId exists and no error handling has been implemented.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/services/ssm.rst#_snippet_8\n\n\n\n----------------------------------------\n\nTITLE: Moto Bedrock Agent Backend Class Definition\nDESCRIPTION: Defines the `AgentsforBedrockBackend` class, which presumably handles the backend logic for emulating AWS Bedrock Agent services within the Moto framework.  It likely manages the creation, retrieval, and deletion of agents and associated resources.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/services/bedrock-agent.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. autoclass:: moto.bedrockagent.models.AgentsforBedrockBackend\n```\n\n----------------------------------------\n\nTITLE: Installing Moto with all dependencies\nDESCRIPTION: This command installs Moto with all of its dependencies. This approach is suitable if you plan to mock many AWS services and don't want to manage dependencies individually. However, it will install a larger number of packages.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/getting_started.rst#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install 'moto[all]'\n```\n\n----------------------------------------\n\nTITLE: Setting Manual State Transition for DAX Cluster - Python\nDESCRIPTION: This snippet sets a manual state transition for a DAX cluster, requiring a specific number of `describe_object` calls to progress the state. It configures the transition to require 3 calls using `state_manager.set_transition`, making it suitable for testing scenarios where the status is checked multiple times.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/configuration/state_transition/index.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nstate_manager.set_transition(model_name=\"dax::cluster\", transition={\"progression\": \"manual\", \"times\": 3})\n```\n\n----------------------------------------\n\nTITLE: Get Text Detection - Hardcoded Values\nDESCRIPTION: The `get_text_detection` function in Moto's Rekognition implementation currently returns hardcoded values. This function does not utilize the parameters provided to it during execution. This represents a preliminary or incomplete implementation that requires further development to incorporate dynamic parameter handling and result generation.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/services/rekognition.rst#_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Implemented Feature: deregister_target_from_maintenance_window\nDESCRIPTION: Indicates that the 'deregister_target_from_maintenance_window' API call of the SSM service is implemented in Moto, with limitations. No error handling has been implemented yet.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/services/ssm.rst#_snippet_9\n\n\n\n----------------------------------------\n\nTITLE: Get Face Search - Hardcoded Values\nDESCRIPTION: The `get_face_search` function in Moto's Rekognition implementation currently returns hardcoded values. This means that the function does not process any of the input parameters passed to it and always returns the same result. This serves as a placeholder implementation.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/services/rekognition.rst#_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Installing Moto Server Dependencies\nDESCRIPTION: This command installs the necessary dependencies to run the Moto server, including the server component. The `[server]` extra installs the server-specific dependencies.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/server_mode.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install moto[server]\n```\n\n----------------------------------------\n\nTITLE: Listing Resources Example\nDESCRIPTION: This code snippet provides an example of the structure for the list of dictionaries that should be returned by the ConfigQueryModel when listing resources for AWS Config. Each dictionary represents a resource with its type, name, ID, and region.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/aws_config.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n[\n    {\n        'type': 'AWS::The AWS Config data type',\n        'name': 'The name of the resource',\n        'id': 'The ID of the resource',\n        'region': 'The region of the resource -- if global, then you may want to have the calling logic pass in the\n                   aggregator region in for the resource region -- or just us-east-1 :P'\n    }\n    , ...\n ]\n```\n\n----------------------------------------\n\nTITLE: Run Moto Tests\nDESCRIPTION: This command executes all tests for Moto to verify that the development environment is properly configured. This process may take some time due to the number of services and tests.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/contributing/installation.rst#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake test\n```\n\n----------------------------------------\n\nTITLE: Implemented Feature: list_commands\nDESCRIPTION: Indicates that the 'list_commands' API call of the SSM service is implemented in Moto, with limitations. Pagination and the Filters-parameter are not yet implemented.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/services/ssm.rst#_snippet_26\n\n\n\n----------------------------------------\n\nTITLE: Activate Virtual Environment\nDESCRIPTION: This command activates the virtual environment created for Moto development. This ensures that the correct Python interpreter and dependencies are used.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/contributing/installation.rst#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsource .venv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Starting the Moto Server with a Custom Port\nDESCRIPTION: This command starts the Moto server and specifies the port it should listen on. In this case, the server will listen on port 3000. It allows you to avoid conflicts with other services running on the default port.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/server_mode.rst#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ moto_server -p3000\n```\n\n----------------------------------------\n\nTITLE: Example Config Resource List Output - Python\nDESCRIPTION: This is an example of the expected output when listing AWS Config resources using the `ConfigQueryModel`. The `list_config_service_resources` function should return a list of dictionaries, where each dictionary represents a resource. The 'type' key specifies the AWS Config data type, 'name' the name of the resource, 'id' the ID of the resource, and 'region' the region of the resource. For global resources, the aggregator region may be used.\nSOURCE: https://github.com/getmoto/moto/blob/master/CONFIG_README.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n[\n    {\n        'type': 'AWS::The AWS Config data type',\n        'name': 'The name of the resource',\n        'id': 'The ID of the resource',\n        'region': 'The region of the resource -- if global, then you may want to have the calling logic pass in the\n                   aggregator region in for the resource region -- or just us-east-1 :P'\n    }\n    , ...\n]\n```\n\n----------------------------------------\n\nTITLE: GeoTrust Certificate\nDESCRIPTION: This is a PEM-encoded GeoTrust certificate.  It represents a digital certificate issued by GeoTrust, which can be used for verifying identities and securing communications over the internet. The certificate contains information such as the issuer, subject, validity period, and public key.\nSOURCE: https://github.com/getmoto/moto/blob/master/tests/test_acm/resources/README.md#_snippet_1\n\nLANGUAGE: PEM\nCODE:\n```\n-----BEGIN CERTIFICATE-----\nMIIEKDCCAxCgAwIBAgIQAQAhJYiw+lmnd+8Fe2Yn3zANBgkqhkiG9w0BAQsFADBC\nMQswCQYDVQQGEwJVUzEWMBQGA1UEChMNR2VvVHJ1c3QgSW5jLjEbMBkGA1UEAxMS\nR2VvVHJ1c3QgR2xvYmFsIENBMB4XDTE3MDUyMjExMzIzN1oXDTE4MTIzMTIzNTk1\nOVowSTELMAkGA1UEBhMCVVMxEzARBgNVBAoTCkdvb2dsZSBJbmMxJTAjBgNVBAMT\nHEdvb2dsZSBJbnRlcm5ldCBBdXRob3JpdHkgRzIwggEiMA0GCSqGSIb3DQEBAQUA\nA4IBDwAwggEKAoIBAQCcKgR3XNhQkToGo4Lg2FBIvIk/8RlwGohGfuCPxfGJziHu\nWv5hDbcyRImgdAtTT1WkzoJile7rWV/G4QWAEsRelD+8W0g49FP3JOb7kekVxM/0\nUw30SvyfVN59vqBrb4fA0FAfKDADQNoIc1Fsf/86PKc3Bo69SxEE630k3ub5/DFx\n+5TVYPMuSq9C0svqxGoassxT3RVLix/IGWEfzZ2oPmMrhDVpZYTIGcVGIvhTlb7j\ngEoQxirsupcgEcc5mRAEoPBhepUljE5SdeK27QjKFPzOImqzTs9GA5eXA37Asd57\nr0Uzz7o+cbfe9CUlwg01iZ2d+w4ReYkeN8WvjnJpAgMBAAGjggERMIIBDTAfBgNV\nHSMEGDAWgBTAephojYn7qwVkDBF9qn1luMrMTjAdBgNVHQ4EFgQUSt0GFhu89mi1\ndvWBtrtiGrpagS8wDgYDVR0PAQH/BAQDAgEGMC4GCCsGAQUFBwEBBCIwIDAeBggr\nBgEFBQcwAYYSaHR0cDovL2cuc3ltY2QuY29tMBIGA1UdEwEB/wQIMAYBAf8CAQAw\nNQYDVR0fBC4wLDAqoCigJoYkaHR0cDovL2cuc3ltY2IuY29tL2NybHMvZ3RnbG9i\nYWwuY3JsMCEGA1UdIAQaMBgwDAYKKwYBBAHWeQIFATAIBgZngQwBAgIwHQYDVR0l\nBBYwFAYIKwYBBQUHAwEGCCsGAQUFBwMCMA0GCSqGSIb3DQEBCwUAA4IBAQDKSeWs\n12Rkd1u+cfrP9B4jx5ppY1Rf60zWGSgjZGaOHMeHgGRfBIsmr5jfCnC8vBk97nsz\nqX+99AXUcLsFJnnqmseYuQcZZTTMPOk/xQH6bwx+23pwXEz+LQDwyr4tjrSogPsB\nE4jLnD/lu3fKOmc2887VJwJyQ6C9bgLxRwVxPgFZ6RGeGvOED4Cmong1L7bHon8X\nfOGLVq7uZ4hRJzBgpWJSwzfVO+qFKgE4h6LPcK2kesnE58rF2rwjMvL+GMJ74N87\nL9TQEOaWTPtEtyFkDbkAlDASJodYmDkFOA/MgkgMCkdm7r+0X8T/cKjhf4t5K7hl\nMqO5tzHpCvX2HzLc\n-----END CERTIFICATE-----\n```\n\n----------------------------------------\n\nTITLE: ECS Task State Advancement\nDESCRIPTION: This snippet illustrates how to advance the state of an ECS task in Moto. It requires calling the `describe_tasks` method using the Boto3 ECS client one time. This action manually transitions the task between states such as 'RUNNING', 'DEACTIVATING', and 'STOPPED'.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/configuration/state_transition/models.rst#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nboto3.client(\"ecs\").describe_tasks(..)\n```\n\n----------------------------------------\n\nTITLE: Install Moto SSM using pip with ZSH\nDESCRIPTION: This command shows the correct way to install Moto with a specific extra (ssm in this case) when using ZSH shell. The quotes around \"moto[ssm]\" are required to prevent ZSH from interpreting the square brackets as a globbing pattern and throwing a `zsh: no matches found` error.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/contributing/faq.rst#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install \"moto[ssm]\"\n```\n\n----------------------------------------\n\nTITLE: Transcribe Medical Vocabulary State Advancement\nDESCRIPTION: This snippet details how to advance the state of a Transcribe medical vocabulary in Moto. It requires calling the `get_medical_vocabulary` method using the Boto3 Transcribe client. This action manually transitions the medical vocabulary from None to 'PENDING' to 'READY'.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/configuration/state_transition/models.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nboto3.client(\"transcribe\").get_medical_vocabulary(..)\n```\n\n----------------------------------------\n\nTITLE: Invoke SageMaker Endpoint (Sync) - Python\nDESCRIPTION: This snippet demonstrates how to invoke a SageMaker endpoint using the boto3 library. It requires the boto3 library to be installed and configured with the appropriate AWS credentials.  The snippet creates a SageMaker Runtime client and calls the `invoke_endpoint` method with the endpoint name and request body. The region is explicitly set to `us-east-1`. The configured results (via the above endpoint override) will be returned. Otherwise, default data is returned.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/services/sagemaker-runtime.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclient = boto3.client(\"sagemaker-runtime\", region_name=\"us-east-1\")\ndetails = client.invoke_endpoint(EndpointName=\"asdf\", Body=\"qwer\")\n```\n\n----------------------------------------\n\nTITLE: Transcribe Medical Transcription Job State Advancement\nDESCRIPTION: This snippet shows how to advance the state of a Transcribe medical transcription job in Moto. It requires calling the `get_medical_transcription_job` method using the Boto3 Transcribe client. This action manually transitions the medical transcription job from None to 'QUEUED' to 'IN_PROGRESS' to 'COMPLETED'.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/configuration/state_transition/models.rst#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nboto3.client(\"transcribe\").get_medical_transcription_job(..)\n```\n\n----------------------------------------\n\nTITLE: Editable Install with all dependencies\nDESCRIPTION: This line configures an editable install of the current package (.) and includes all optional dependencies specified by the '[all]' extra requirement. An editable install allows changes to the source code to be immediately reflected without reinstalling the package. The -e flag specifies an editable install.\nSOURCE: https://github.com/getmoto/moto/blob/master/requirements.txt#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n-e .[all]\n```\n\n----------------------------------------\n\nTITLE: Transcribe Transcription Job State Advancement\nDESCRIPTION: This snippet explains how to advance the state of a Transcribe transcription job in Moto. It requires calling the `get_transcription_job` method using the Boto3 Transcribe client. This action manually transitions the transcription job from None to 'QUEUED' to 'IN_PROGRESS' to 'COMPLETED'.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/configuration/state_transition/models.rst#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nboto3.client(\"transcribe\").get_transcription_job(..)\n```\n\n----------------------------------------\n\nTITLE: Testing for Exceptions with pytest in Moto (Python)\nDESCRIPTION: This code snippet demonstrates how to properly write negative tests in Moto using pytest to verify exception handling. It uses `pytest.raises` to catch expected exceptions, retrieves the error details from the exception, and asserts that the error code and message match the expected values. This approach ensures that Moto handles exceptions correctly.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/contributing/development_tips/tests.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nwith pytest.raises(botocore.exceptions.ClientError) as exc:\n    client.failing_call(..)\nerr = exc.value.response[\"Error\"]\n# Use the pytest assert method, see https://docs.pytest.org/en/stable/how-to/assert.html#\nassert err[\"Code\"] == ..\nassert err[\"Message\"] == ..\n```\n\n----------------------------------------\n\nTITLE: Unsetting State Transition in ServerMode - Python\nDESCRIPTION: This snippet demonstrates how to unset a custom state transition in Moto ServerMode using an HTTP POST request. The request sends a JSON payload containing the `model_name` to the Moto API endpoint, instructing it to remove any custom transitions for that model. It uses the `requests` library to make the HTTP request and `json.dumps` to serialize the payload.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/configuration/state_transition/index.rst#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\npost_body = dict(model_name=\"dax::cluster\")\nresp = requests.post(\"http://localhost:5000/moto-api/state-manager/unset-transition\", data=json.dumps(post_body))\n```\n\n----------------------------------------\n\nTITLE: DAX Cluster State Advancement\nDESCRIPTION: This snippet illustrates how to advance the state of a DAX cluster in Moto. It requires calling the `describe_clusters` method using the Boto3 DAX client four times. This action manually transitions the cluster from 'creating' to 'available' or 'deleting' to 'deleted'.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/configuration/state_transition/models.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nboto3.client(\"dax\").describe_clusters(..)\n```\n\n----------------------------------------\n\nTITLE: Implemented Feature: send_command\nDESCRIPTION: Indicates that the 'send_command' API call of the SSM service is fully implemented in Moto.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/services/ssm.rst#_snippet_34\n\n\n\n----------------------------------------\n\nTITLE: Defining a Model with Managed State in Python\nDESCRIPTION: This snippet demonstrates how to extend a model with the ManagedState class from moto and define its state transitions.  The constructor takes a model_name and a list of possible status transitions.  The to_json method includes the 'status' attribute provided by ManagedState. The model_name is a unique identifier, and the transitions define the allowed state changes.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/contributing/development_tips/new_state_transitions.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom moto.moto_api._internal.managed_state_model import ManagedState\n\nclass NewModel(ManagedState):\n    def __init__(self):\n        ManagedState.__init__(self,\n                              # A unique name should be chosen to uniquely identify this model\n                              # Any name is acceptable - a typical format would be 'API:type'\n                              # Examples: 'S3::bucket', 'APIGateway::Method', 'DynamoDB::Table'\n                              model_name=\"new::model\",\n                              # List all the possible status-transitions here\n                              transitions=[(\"initializing\", \"starting\"),\n                                           (\"starting\", \"ready\")])\n\n    def to_json(self):\n        # ManagedState gives us a 'status'-attribute out of the box\n        # On the first iteration, this will be set to the first status of the first transition\n        return {\n            \"name\": ...,\n            \"status\": self.status,\n            ...\n        }\n```\n\n----------------------------------------\n\nTITLE: Passthrough URL Configuration - Python\nDESCRIPTION: Configures the Moto proxy to allow passthrough of specific URLs or hosts, sending requests directly to the external service instead of mocking them. This uses the `requests` library to send a POST request to the Moto API.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/proxy_mode.rst#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nconfig_url = \"http://motoapi.amazonaws.com/moto-api/proxy/passthrough\"\nproxies = {\"http\": \"http://localhost:5005\", \"https\": \"http://localhost:5005\"}\n\nhttp_url = \"http://some_website.com/path\"\nhttps_host = \"google.com\"\nconfig = {\"http_urls\": [http_url], \"https_hosts\": [https_host]}\n\nrequests.post(config_url, json=config, proxies=proxies)\n```\n\n----------------------------------------\n\nTITLE: Implemented Feature: get_command_invocation\nDESCRIPTION: Indicates that the 'get_command_invocation' API call of the SSM service is fully implemented in Moto.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/services/ssm.rst#_snippet_18\n\n\n\n----------------------------------------\n\nTITLE: Configuring Cost and Usage Results for Moto CE\nDESCRIPTION: This Python snippet demonstrates how to configure expected results for the `get_cost_and_usage` API call in Moto's Cost Explorer implementation. It posts a JSON payload containing a list of results to a specific endpoint, which Moto then uses to simulate responses to subsequent calls to `get_cost_and_usage` with matching parameters. Requires the `requests` and `boto3` libraries.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/services/ce.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresult = {\n    \"results\": [\n        {\n            \"ResultsByTime\": [\n                {\n                    \"TimePeriod\": {\"Start\": \"2024-01-01\", \"End\": \"2024-01-02\"},\n                    \"Total\": {\n                        \"BlendedCost\": {\"Amount\": \"0.0101516483\", \"Unit\": \"USD\"}\n                    },\n                    \"Groups\": [],\n                    \"Estimated\": False\n                }\n            ],\n            \"DimensionValueAttributes\": [{\"Value\": \"v\", \"Attributes\": {\"a\": \"b\"}}]\n        },\n        {\n            ...\n        },\n    ]\n}\nresp = requests.post(\n    \"http://motoapi.amazonaws.com/moto-api/static/ce/cost-and-usage-results\",\n    json=expected_results,\n)\nassert resp.status_code == 201\n\nce = boto3.client(\"ce\", region_name=\"us-east-1\")\nresp = ce.get_cost_and_usage(...)\n```\n\n----------------------------------------\n\nTITLE: Invoke SageMaker Endpoint (Async) - Python\nDESCRIPTION: This snippet demonstrates how to invoke an asynchronous SageMaker endpoint using the boto3 library.  It requires the boto3 library to be installed. The snippet creates a SageMaker Runtime client and calls the `invoke_endpoint_async` method with the endpoint name and InputLocation. The region is explicitly set to `us-east-1`. The configured results (via the async endpoint override) will be returned, if available.  Otherwise, the sync endpoint results will be used, if configured.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/services/sagemaker-runtime.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclient = boto3.client(\"sagemaker-runtime\", region_name=\"us-east-1\")\ndetails = client.invoke_endpoint_async(EndpointName=\"asdf\", InputLocation=\"qwer\")\n```\n\n----------------------------------------\n\nTITLE: Implemented Feature: list_documents\nDESCRIPTION: Indicates that the 'list_documents' API call of the SSM service is fully implemented in Moto.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/services/ssm.rst#_snippet_27\n\n\n\n----------------------------------------\n\nTITLE: Batch Import Findings to SecurityHub\nDESCRIPTION: Imports findings in batch to SecurityHub. It takes a list of finding dictionaries as input and returns a tuple containing the failed count, success count, and a list of failed findings.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/services/securityhub.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nArgs:\n    findings: List of finding dictionaries to import\n\nReturns:\n    Tuple of (failed_count, success_count, failed_findings)\n```\n\n----------------------------------------\n\nTITLE: Installing Moto from source\nDESCRIPTION: This set of commands demonstrates how to install Moto from source. This approach is useful if you want to contribute to Moto or use a development version. The steps involve cloning the Moto repository, navigating to the directory, and then installing with pip, including all dependencies.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/getting_started.rst#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git://github.com/getmoto/moto.git\ncd moto\npip install '.[all]'\n```\n\n----------------------------------------\n\nTITLE: Partial Implementation Warning in Python\nDESCRIPTION: This code snippet demonstrates how to use the `warnings` module in Python to inform users that a specific feature (in this case, the `Filters` parameter) is not yet implemented for a given client method in the Moto library. This allows developers to indicate that a service is only partially implemented, providing transparency to users.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/contributing/development_tips/index.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport warnings\nwarnings.warn(\"The Filters-parameter is not yet implemented for client.method()\")\n```\n\n----------------------------------------\n\nTITLE: Implemented Feature: get_document\nDESCRIPTION: Indicates that the 'get_document' API call of the SSM service is fully implemented in Moto.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/services/ssm.rst#_snippet_19\n\n\n\n----------------------------------------\n\nTITLE: Get Findings from SecurityHub\nDESCRIPTION: Retrieves findings from SecurityHub based on optional filters and sort criteria. The method returns findings based on the provided filters.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/services/securityhub.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nReturns findings based on optional filters and sort criteria.\n```\n\n----------------------------------------\n\nTITLE: Registering a Default State Transition in Python\nDESCRIPTION: This snippet demonstrates how to register a default state transition with the StateManager.  The model_name must match the one used in the NewModel class. The transition configuration specifies how the state should progress. 'immediate' progression means the state changes immediately.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/contributing/development_tips/new_state_transitions.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nstate_manager.register_default_transition(\n    # This name should be the same as the name used in NewModel\n    model_name=\"new::model\",\n    # Any transition-config is possible - this is a good default option though\n    transition={\"progression\": \"immediate\"},\n)\n```\n\n----------------------------------------\n\nTITLE: Sample S3 Interaction without Mocking\nDESCRIPTION: This Python code demonstrates a class that saves data to an S3 bucket using the boto3 library. It initializes an S3 client, then uploads data to the specified bucket and key. This code is meant to be tested using Moto to avoid interacting with real AWS resources.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/getting_started.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport boto3\n\nclass MyModel:\n    def __init__(self, name, value):\n        self.name = name\n        self.value = value\n\n    def save(self):\n        s3 = boto3.client(\"s3\", region_name=\"us-east-1\")\n        s3.put_object(Bucket=\"mybucket\", Key=self.name, Body=self.value)\n```\n\n----------------------------------------\n\nTITLE: Implemented Feature: list_tags_for_resource\nDESCRIPTION: Indicates that the 'list_tags_for_resource' API call of the SSM service is fully implemented in Moto.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/services/ssm.rst#_snippet_28\n\n\n\n----------------------------------------\n\nTITLE: KMS Sign Operation Python\nDESCRIPTION: The sign function uses the generated private key to sign a message. The grant_tokens parameter is not implemented in the current version.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/services/kms.rst#_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Support Case State Advancement\nDESCRIPTION: This snippet outlines how to advance the state of a Support case in Moto. It requires calling the `describe_cases` method using the Boto3 Support client one time. This action manually transitions the case between states such as 'opened', 'pending-customer-action', and 'resolved'.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/configuration/state_transition/models.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nboto3.client(\"support\").describe_cases(..)\n```\n\n----------------------------------------\n\nTITLE: Starting the Moto Server with an External IP Address\nDESCRIPTION: This command starts the Moto server and binds it to a specific IP address (0.0.0.0 in this case), allowing it to be accessed externally. Be aware that this might allow other network users to access your server.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/server_mode.rst#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ moto_server -H 0.0.0.0\n```\n\n----------------------------------------\n\nTITLE: BedrockBackend Class Definition\nDESCRIPTION: This snippet defines the `BedrockBackend` class, which likely handles the backend logic for the Bedrock service within the Moto library.  It serves as a central point for managing Bedrock resources and operations in the mocked environment.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/services/bedrock.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass BedrockBackend(object):\n    pass # Placeholder, actual implementation not provided in the text.\n```\n\n----------------------------------------\n\nTITLE: Implemented Feature: remove_tags_from_resource\nDESCRIPTION: Indicates that the 'remove_tags_from_resource' API call of the SSM service is fully implemented in Moto.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/services/ssm.rst#_snippet_33\n\n\n\n----------------------------------------\n\nTITLE: Moto Server URL for Resilience Hub Assessments (Python)\nDESCRIPTION: This Python code snippet shows the URL to use when configuring Resilience Hub assessment responses if you are using MotoServer. You should make a POST request to this URL with the assessment data in JSON format, similar to the previous example. The MotoServer needs to be running for this URL to be accessible.\n\nDependencies: MotoServer must be running.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/services/resiliencehub.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nhttp://localhost:5000/moto-api/static/resilience-hub-assessments/response\n```\n\n----------------------------------------\n\nTITLE: Workspaces Web Backend Class Definition\nDESCRIPTION: This snippet represents the declaration of the WorkSpacesWebBackend class within the moto library. This class is responsible for handling the backend logic and state management for the Workspaces Web service when running tests with moto.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/services/workspaces-web.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nmoto.workspacesweb.models.WorkSpacesWebBackend\n```\n\n----------------------------------------\n\nTITLE: Implemented Feature: update_document_default_version\nDESCRIPTION: Indicates that the 'update_document_default_version' API call of the SSM service is fully implemented in Moto.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/services/ssm.rst#_snippet_36\n\n\n\n----------------------------------------\n\nTITLE: Installing Moto with Services\nDESCRIPTION: This command demonstrates how to install Moto with specific services.  It shows the syntax for installing moto with service1 and service2, or with all services. This ensures only the necessary dependencies are installed, improving efficiency and reducing download size.\nSOURCE: https://github.com/getmoto/moto/blob/master/CHANGELOG.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\npip install moto[service1,service2]\npip install moto[all]\n```\n\n----------------------------------------\n\nTITLE: IVS Backend Class Definition\nDESCRIPTION: This code snippet shows the declaration of the IVSBackend class within the moto.ivs.models module. It signifies the entry point for interacting with the IVS service within the Moto framework. This class likely handles requests and manages the state of IVS resources.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/services/ivs.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. autoclass:: moto.ivs.models.IVSBackend\n```\n\n----------------------------------------\n\nTITLE: Delete Replication Task\nDESCRIPTION: This feature deletes a replication task.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/services/dms.rst#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\ndelete_replication_task\n```\n\n----------------------------------------\n\nTITLE: Create Replication Instance\nDESCRIPTION: This feature creates a replication instance.  The parameters CDCStartTime, CDCStartPosition, CDCStopPosition, Tags, TaskData, and ResourceIdentifier are not yet implemented.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/services/dms.rst#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ncreate_replication_instance\n        The following parameters are not yet implemented:\n        CDCStartTime, CDCStartPosition, CDCStopPosition, Tags, TaskData, ResourceIdentifier\n```\n\n----------------------------------------\n\nTITLE: Moto Configuration for Passthrough URLs/Services\nDESCRIPTION: Configures the `mock_aws` decorator to specify URLs and services that should reach out to AWS directly, bypassing the mock.\nSOURCE: https://github.com/getmoto/moto/blob/master/CHANGELOG.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@mock_aws(\n    config={\"core\": {\"mock_credentials\": False, \"passthrough\": {\"urls\": [], \"services\": []}}}\n)\n```\n\n----------------------------------------\n\nTITLE: Stop Replication Task\nDESCRIPTION: This feature stops a replication task.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/services/dms.rst#_snippet_6\n\nLANGUAGE: text\nCODE:\n```\nstop_replication_task\n```\n\n----------------------------------------\n\nTITLE: Mocking HTTP Requests in Moto with Responses module in Python\nDESCRIPTION: This snippet shows how to use a custom Responses-mock with Moto to intercept non-AWS HTTP requests, ensuring that custom requests are handled correctly. It requires importing `override_responses_real_send` from `moto.core.models` and using the `responses` library. The `start()` and `add_passthru()` methods of the mock are used to activate the mock and define passthrough URLs.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/faq.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom moto.core.models import override_responses_real_send\n\nmy_own_mock = responses.RequestsMock(assert_all_requests_are_fired=True)\noverride_responses_real_send(my_own_mock)\nmy_own_mock.start()\nmy_own_mock.add_passthru(\"http://some-website.com\")\n\n# Unset this behaviour at the end of your tests\noverride_responses_real_send(None)\n```\n\n----------------------------------------\n\nTITLE: Implemented Feature: create_patch_baseline\nDESCRIPTION: Indicates that the 'create_patch_baseline' API call of the SSM service is implemented in Moto, with limitations. Error handling and input validation are not yet implemented.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/services/ssm.rst#_snippet_3\n\n\n\n----------------------------------------\n\nTITLE: Implemented Feature: get_parameters\nDESCRIPTION: Indicates that the 'get_parameters' API call of the SSM service is fully implemented in Moto.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/services/ssm.rst#_snippet_23\n\n\n\n----------------------------------------\n\nTITLE: Implemented Feature: describe_maintenance_window_targets\nDESCRIPTION: Indicates that the 'describe_maintenance_window_targets' API call of the SSM service is implemented in Moto, with limitations. No error handling has been implemented yet.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/services/ssm.rst#_snippet_13\n\n\n\n----------------------------------------\n\nTITLE: Install Moto with all dependencies\nDESCRIPTION: This command demonstrates how to install Moto with dependencies for all AWS services, replicating the behaviour from Moto version 1.x.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/releases.rst#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install moto[all]\n```\n\n----------------------------------------\n\nTITLE: Implemented Feature: deregister_task_from_maintenance_window\nDESCRIPTION: Indicates that the 'deregister_task_from_maintenance_window' API call of the SSM service is fully implemented in Moto.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/services/ssm.rst#_snippet_10\n\n\n\n----------------------------------------\n\nTITLE: Implemented Feature: delete_parameters\nDESCRIPTION: Indicates that the 'delete_parameters' API call of the SSM service is fully implemented in Moto.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/services/ssm.rst#_snippet_7\n\n\n\n----------------------------------------\n\nTITLE: Installing Moto using pip\nDESCRIPTION: This command demonstrates how to install the latest released version of Moto using pip, including the dependencies required for specific AWS services like ec2 and s3. This ensures only the necessary dependencies are installed, reducing the project's overall footprint.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/getting_started.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install 'moto[ec2,s3,..]'\n```\n\n----------------------------------------\n\nTITLE: Implemented Feature: register_target_with_maintenance_window\nDESCRIPTION: Indicates that the 'register_target_with_maintenance_window' API call of the SSM service is implemented in Moto, with limitations. No error handling has been implemented yet.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/services/ssm.rst#_snippet_31\n\n\n\n----------------------------------------\n\nTITLE: Implemented Feature: delete_document\nDESCRIPTION: Indicates that the 'delete_document' API call of the SSM service is fully implemented in Moto.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/services/ssm.rst#_snippet_4\n\n\n\n----------------------------------------\n\nTITLE: Describe Replication Instances\nDESCRIPTION: This feature retrieves information about replication instances with optional filtering.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/services/dms.rst#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\ndescribe_replication_instances\n  Get information about replication instances with optional filtering\n```\n\n----------------------------------------\n\nTITLE: Moto Configuration - IAM Managed Policies Loading\nDESCRIPTION: Example of how to configure Moto to load AWS managed IAM policies via the `mock_aws` decorator.\nSOURCE: https://github.com/getmoto/moto/blob/master/CHANGELOG.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@mock_aws(config={\"iam\": {\"load_aws_managed_policies\": True}})\n```\n\n----------------------------------------\n\nTITLE: Implemented Feature: modify_document_permission\nDESCRIPTION: Indicates that the 'modify_document_permission' API call of the SSM service is fully implemented in Moto.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/services/ssm.rst#_snippet_29\n\n\n\n----------------------------------------\n\nTITLE: Implemented Feature: get_maintenance_window\nDESCRIPTION: Indicates that the 'get_maintenance_window' API call of the SSM service is implemented in Moto, with limitations. The NextExecutionTime-field is not returned.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/services/ssm.rst#_snippet_20\n\n\n\n----------------------------------------\n\nTITLE: Configuring IAM AWS Managed Policies Loading in Moto (Python)\nDESCRIPTION: This snippet demonstrates how to configure Moto to load AWS managed IAM policies, which are no longer loaded by default.  This can be done either through a decorator or an environment variable. The decorator approach requires the `mock_aws` decorator.\nSOURCE: https://github.com/getmoto/moto/blob/master/CHANGELOG.md#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n@mock_aws(config={\"iam\": {\"load_aws_managed_policies\": True}})\n```\n\n----------------------------------------\n\nTITLE: CloudFront Distribution State Advancement\nDESCRIPTION: This snippet shows how to advance the state of a CloudFront distribution in Moto. It requires calling the `get_distribution` or `list_distributions` method using the Boto3 CloudFront client. This action manually transitions the distribution from 'InProgress' to 'Deployed'.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/configuration/state_transition/models.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nboto3.client(\"cloudfront\").get_distribution(..)\nboto3.client(\"cloudfront\").list_distributions(..)\n```\n\n----------------------------------------\n\nTITLE: Implemented Feature: label_parameter_version\nDESCRIPTION: Indicates that the 'label_parameter_version' API call of the SSM service is fully implemented in Moto.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/services/ssm.rst#_snippet_25\n\n\n\n----------------------------------------\n\nTITLE: Create Replication Task\nDESCRIPTION: This feature creates a replication task.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/services/dms.rst#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\ncreate_replication_task\n```\n\n----------------------------------------\n\nTITLE: Initialize Moto Development Environment\nDESCRIPTION: This command initializes the Moto development environment by installing all required dependencies using `make`. It is typically run within a virtual environment.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/contributing/installation.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake init\n```\n\n----------------------------------------\n\nTITLE: Transcribe Vocabulary State Advancement\nDESCRIPTION: This snippet demonstrates how to advance the state of a Transcribe vocabulary in Moto. It requires calling the `get_vocabulary` method using the Boto3 Transcribe client. This action manually transitions the vocabulary from None to 'PENDING' to 'READY'.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/configuration/state_transition/models.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nboto3.client(\"transcribe\").get_vocabulary(..)\n```\n\n----------------------------------------\n\nTITLE: Implemented Feature: create_maintenance_window\nDESCRIPTION: Indicates that the 'create_maintenance_window' API call of the SSM service is implemented in Moto, with limitations.  Error handling and input validation are not yet implemented.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/services/ssm.rst#_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: Verify S3 Tests and Style\nDESCRIPTION: This set of commands verifies the tests and code style specifically for the S3 service within Moto. It uses `ruff` for linting and formatting, `pylint` for static analysis, `mypy` for type checking, and `pytest` for running tests.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/contributing/installation.rst#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nruff check moto/s3 tests/test_s3\nruff format --check moto/s3 tests/test_s3\npylint moto/s3 tests/test_s3\nmypy\npytest -sv tests/test_s3\n```\n\n----------------------------------------\n\nTITLE: Example Scaffold script interaction\nDESCRIPTION: This Bash script shows an example interaction with the scaffold.py script. It shows the user selecting a service and an operation to scaffold.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/contributing/new_feature.rst#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ python scripts/scaffold.py\nSelect service: codedeploy\n\n==Current Implementation Status==\n[ ] add_tags_to_on_premises_instances\n...\n[ ] create_deployment\n...\n[ ] update_deployment_group\n=================================\nSelect Operation: create_deployment\n```\n\n----------------------------------------\n\nTITLE: Implemented Feature: describe_patch_baselines\nDESCRIPTION: Indicates that the 'describe_patch_baselines' API call of the SSM service is implemented in Moto, with limitations. Returns all baselines. No pagination has been implemented yet.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/services/ssm.rst#_snippet_17\n\n\n\n----------------------------------------\n\nTITLE: Format Moto Code\nDESCRIPTION: This command automatically formats the Moto codebase using `make` to fix any linting issues related to code style.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/contributing/installation.rst#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmake format\n```\n\n----------------------------------------\n\nTITLE: Example docker-compose.yaml Configuration\nDESCRIPTION: This YAML file provides an example `docker-compose.yaml` configuration for running the Moto server. It defines a service named `motoserver`, specifies the image to use, maps port 3000, and sets the `MOTO_PORT` environment variable to 3000, configuring the Moto server to listen on that port. It requires Docker Compose to be installed.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/server_mode.rst#_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nmotoserver:\n  image: motoserver/moto:latest\n  ports:\n    - \"3000:3000\"\n  environment:\n    - MOTO_PORT=3000 # set moto listener port with env var\n```\n\n----------------------------------------\n\nTITLE: WAFV2 Backend Autoclass\nDESCRIPTION: This autoclass declaration uses the moto.wafv2.models.WAFV2Backend class. It renders documentation based on the docstrings and attributes within the specified class, providing insights into the WAFv2 backend implementation in Moto.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/services/wafv2.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. autoclass:: moto.wafv2.models.WAFV2Backend\n```\n\n----------------------------------------\n\nTITLE: Creating and Waiting for DAX Cluster with Error Handling - Python\nDESCRIPTION: This function demonstrates how to create a DAX cluster and wait for it to become available, including error handling for timeouts.  It's a conceptual example used to motivate the need for state transition control in Moto. It does not include actual implementation details for the functions client.create_cluster, get_cluster_status, sleep, five_minutes_have_passed, or error.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/configuration/state_transition/index.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef create_and_wait_for_cluster(name):\n    client.create_cluster(ClusterName=name, ...)\n\n    cluster_status = get_cluster_status(name)\n    while cluster_status != \"available\":\n        sleep()\n\n        if five_minutes_have_passed():\n            error()\n\n        cluster_status = get_cluster_status(name)\n```\n\n----------------------------------------\n\nTITLE: Listing Test Dependencies\nDESCRIPTION: This snippet shows the contents of `requirements-tests.txt`, which lists the Python packages required for running tests and development tools. These include Ruff for linting, Click for command-line interfaces, and various type-related packages like `mypy` and `typing-extensions`.\nSOURCE: https://github.com/getmoto/moto/blob/master/requirements-dev.txt#_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\nruff==0.3.3\nclick\ninflection\nlxml\nmypy\ntyping-extensions\npackaging\nbuild\nprompt_toolkit\n\n# type stubs that mypy doesn't install automatically\nbotocore-stubs\ntypes-requests\ntypes-python-dateutil\ntypes-PyYAML\n\n\n# typing_extensions is currently used for:\n# Protocol  (3.8+)\n# ParamSpec  (3.10+)\n# Self  (3.11+)\n```\n\n----------------------------------------\n\nTITLE: Installing Moto with pip\nDESCRIPTION: This command installs Moto and includes support for EC2, S3, and all other services. Ensure pip is installed and configured correctly to run this command.\nSOURCE: https://github.com/getmoto/moto/blob/master/README.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ pip install 'moto[ec2,s3,all]'\n```\n\n----------------------------------------\n\nTITLE: Saving data to S3 with boto3\nDESCRIPTION: This Python code demonstrates how to save data to an S3 bucket using boto3. The `MyModel` class initializes with a name and value, then saves the value to an S3 bucket using the provided name as the key.\nSOURCE: https://github.com/getmoto/moto/blob/master/README.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport boto3\n\n\nclass MyModel:\n    def __init__(self, name, value):\n        self.name = name\n        self.value = value\n\n    def save(self):\n        s3 = boto3.client(\"s3\", region_name=\"us-east-1\")\n        s3.put_object(Bucket=\"mybucket\", Key=self.name, Body=self.value)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for S3 C++ Example\nDESCRIPTION: This CMake script configures the project to use the AWS SDK for C++ to interact with S3. It sets the minimum CMake version, project name, C++ standard, and finds the AWS SDK. It also handles Windows-specific configurations, such as locating the SDK and copying dynamic libraries.\nSOURCE: https://github.com/getmoto/moto/blob/master/other_langs/tests_cpp/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# snippet-start:[cpp.example_code.s3.hello_s3.cmake]\n# Set the minimum required version of CMake for this project.\ncmake_minimum_required(VERSION 3.13)\n\n# Set the AWS service components used by this project.\nset(SERVICE_COMPONENTS s3)\n\n# Set this project's name.\nproject(\"hello_s3\")\n\n# Set the C++ standard to use to build this target.\n# At least C++ 11 is required for the AWS SDK for C++.\nset(CMAKE_CXX_STANDARD 11)\n\n# Use the MSVC variable to determine if this is a Windows build.\nset(WINDOWS_BUILD ${MSVC})\n\nif (WINDOWS_BUILD) # Set the location where CMake can find the installed libraries for the AWS SDK.\n    string(REPLACE \";\" \"/aws-cpp-sdk-all;\" SYSTEM_MODULE_PATH \"${CMAKE_SYSTEM_PREFIX_PATH}/aws-cpp-sdk-all\")\n    list(APPEND CMAKE_PREFIX_PATH ${SYSTEM_MODULE_PATH})\nendif ()\n\n# Find the AWS SDK for C++ package.\nlist(APPEND CMAKE_PREFIX_PATH \"./build/vcpkg/scripts/cmake\")\nfind_package(aws-cpp-sdk-core REQUIRED)\nfind_package(AWSSDK REQUIRED COMPONENTS ${SERVICE_COMPONENTS})\n\nif (WINDOWS_BUILD AND AWSSDK_INSTALL_AS_SHARED_LIBS)\n    # Copy relevant AWS SDK for C++ libraries into the current binary directory for running and debugging.\n\n    # set(BIN_SUB_DIR \"/Debug\") # if you are building from the command line you may need to uncomment this\n    # and set the proper subdirectory to the executables' location.\n\n    AWSSDK_CPY_DYN_LIBS(SERVICE_COMPONENTS \"\" ${CMAKE_CURRENT_BINARY_DIR}${BIN_SUB_DIR})\nendif ()\n\nadd_executable(${PROJECT_NAME}\n        hello_s3.cpp)\n\ntarget_link_libraries(${PROJECT_NAME}\n        ${AWSSDK_LINK_LIBRARIES})\n# snippet-end:[cpp.example_code.s3.hello_s3.cmake]\n```\n\n----------------------------------------\n\nTITLE: Running the Moto scaffolding script\nDESCRIPTION: This Bash script shows how to execute the `scripts/scaffold.py` script. It sets the `AWS_DEFAULT_REGION` environment variable before running the script. This script relies on the `click` module for autocompletion.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/contributing/new_feature.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport AWS_DEFAULT_REGION=\"us-east-2\"\npython scripts/scaffold.py\n```\n\n----------------------------------------\n\nTITLE: Install Moto as Editable Module\nDESCRIPTION: This set of commands uninstalls Moto, then installs it in editable mode. This ensures that changes made to the source code are immediately reflected without needing to reinstall the package. Using editable mode resolves the ModuleNotFoundError issue when using the scaffold script.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/contributing/faq.rst#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npip uninstall moto\npip install -e .\n```\n\n----------------------------------------\n\nTITLE: Moto IAM Managed Policies Loading - Environment Variable\nDESCRIPTION: Example of how to configure Moto to load AWS managed IAM policies via an environment variable.\nSOURCE: https://github.com/getmoto/moto/blob/master/CHANGELOG.md#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nMOTO_IAM_LOAD_MANAGED_POLICIES=true\n```\n\n----------------------------------------\n\nTITLE: Starting Moto Server with Homebrew Services\nDESCRIPTION: This command configures Homebrew to start the Moto server automatically when you log into your computer, ensuring it's always running in the background.\nSOURCE: https://github.com/getmoto/moto/blob/master/docs/docs/server_mode.rst#_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nbrew services start moto\n```\n\n----------------------------------------\n\nTITLE: Generating CA and Server Certificates with OpenSSL\nDESCRIPTION: These OpenSSL commands generate a CA key, a CA certificate, a server key, a certificate signing request (CSR), and a server certificate signed by the CA. The CA certificate is valid for 3650 days and uses SHA512 hashing.\nSOURCE: https://github.com/getmoto/moto/blob/master/tests/test_acm/resources/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nopenssl genrsa -out ca.key 4096\nopenssl req -x509 -new -nodes -key ca.key -sha512 -days 3650 -out ca.pem\nopenssl genrsa -out star_moto_com.key 2048\nopenssl req -new -key star_moto_com.key -out star_moto_com.csr\nopenssl x509 -req -in star_moto_com.csr -CA ca.pem -CAkey ca.key -CAcreateserial -out star_moto_com.pem -days 3650 -sha512\n```"
  }
]