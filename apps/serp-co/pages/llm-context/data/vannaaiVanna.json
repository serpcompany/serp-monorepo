[
  {
    "owner": "vanna-ai",
    "repo": "vanna",
    "content": "TITLE: Querying Vanna with Natural Language\nDESCRIPTION: Example showing how to ask questions in natural language and get SQL queries as responses\nSOURCE: https://github.com/vanna-ai/vanna/blob/main/README.md#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nvn.ask(\"What are the top 10 customers by sales?\")\n```\n\n----------------------------------------\n\nTITLE: Generating SQL with Vanna AI in Python\nDESCRIPTION: This snippet demonstrates how to use Vanna AI to generate SQL queries based on a natural language question. It mentions additional functionalities like generating Plotly code and follow-up questions.\nSOURCE: https://github.com/vanna-ai/vanna/blob/main/papers/ai-sql-accuracy-2023-08-17.md#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nvn.ask(question=\"What are the ...\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Vanna with OpenAI and ChromaDB\nDESCRIPTION: Example showing how to configure Vanna using OpenAI for LLM and ChromaDB for vector storage. Requires setting up configuration with API keys.\nSOURCE: https://github.com/vanna-ai/vanna/blob/main/README.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom vanna.openai.openai_chat import OpenAI_Chat\nfrom vanna.chromadb.chromadb_vector import ChromaDB_VectorStore\n\nclass MyVanna(ChromaDB_VectorStore, OpenAI_Chat):\n    def __init__(self, config=None):\n        ChromaDB_VectorStore.__init__(self, config=config)\n        OpenAI_Chat.__init__(self, config=config)\n\nvn = MyVanna(config={'api_key': 'sk-...', 'model': 'gpt-4-...'})\n```\n\n----------------------------------------\n\nTITLE: SQL Generation Test Architecture Implementation in Python\nDESCRIPTION: Implementation of a five-step process for testing SQL generation accuracy, including question input, prompt creation, SQL generation, execution, and validation\nSOURCE: https://github.com/vanna-ai/vanna/blob/main/papers/ai-sql-accuracy-2023-08-17.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nquestion = \"how many clients are there in germany\"\n```\n\nLANGUAGE: python\nCODE:\n```\nprompt = f\"\"\"\nWrite a SQL statement for the following question:\n{question}\n\"\"\"\n```\n\nLANGUAGE: python\nCODE:\n```\nsql = llm.api(api_key=api_key, prompt=prompt, parameters=parameters)\n```\n\nLANGUAGE: python\nCODE:\n```\ndf = db.conn.execute(sql)\n```\n\n----------------------------------------\n\nTITLE: Training Vanna with DDL Statements\nDESCRIPTION: Example showing how to train Vanna using DDL (Data Definition Language) statements that define database structure\nSOURCE: https://github.com/vanna-ai/vanna/blob/main/README.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nvn.train(ddl=\"\"\"\n    CREATE TABLE IF NOT EXISTS my-table (\n        id INT PRIMARY KEY,\n        name VARCHAR(100),\n        age INT\n    )\n\"\"\")\n```\n\n----------------------------------------\n\nTITLE: Training Vanna with SQL Queries\nDESCRIPTION: Example showing how to train Vanna using existing SQL queries as examples\nSOURCE: https://github.com/vanna-ai/vanna/blob/main/README.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nvn.train(sql=\"SELECT name, age FROM my-table WHERE name = 'John Doe'\")\n```\n\n----------------------------------------\n\nTITLE: Training Vanna AI with SQL Examples in Python\nDESCRIPTION: This code illustrates how to train the Vanna AI model using SQL examples. These examples help the model understand typical query patterns for the database.\nSOURCE: https://github.com/vanna-ai/vanna/blob/main/papers/ai-sql-accuracy-2023-08-17.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nvn.train(sql=\"SELECT ...\")\n```\n\n----------------------------------------\n\nTITLE: Training Vanna AI with Schema in Python\nDESCRIPTION: This code demonstrates how to train the Vanna AI model using a database schema. The schema is provided as a DDL (Data Definition Language) statement.\nSOURCE: https://github.com/vanna-ai/vanna/blob/main/papers/ai-sql-accuracy-2023-08-17.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nvn.train(ddl=\"CREATE TABLE ...\")\n```\n\n----------------------------------------\n\nTITLE: Training Vanna with Documentation\nDESCRIPTION: Example showing how to train Vanna with business documentation and terminology\nSOURCE: https://github.com/vanna-ai/vanna/blob/main/README.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nvn.train(documentation=\"Our business defines XYZ as ...\")\n```\n\n----------------------------------------\n\nTITLE: Retrieving Related Training Data with Vanna AI in Python\nDESCRIPTION: This code shows how to retrieve the most relevant context for a given question using Vanna AI. This context can be used to construct custom prompts for any LLM.\nSOURCE: https://github.com/vanna-ai/vanna/blob/main/papers/ai-sql-accuracy-2023-08-17.md#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nvn.get_related_training_data(question=\"What are the ...\")\n```\n\n----------------------------------------\n\nTITLE: Training Vanna AI with Documentation in Python\nDESCRIPTION: This snippet shows how to train the Vanna AI model using documentation. The documentation provides additional context about the database structure and usage.\nSOURCE: https://github.com/vanna-ai/vanna/blob/main/papers/ai-sql-accuracy-2023-08-17.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nvn.train(documentation=\"...\")\n```\n\n----------------------------------------\n\nTITLE: Installing Vanna Package via pip\nDESCRIPTION: Command to install the Vanna package using pip package manager\nSOURCE: https://github.com/vanna-ai/vanna/blob/main/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install vanna\n```\n\n----------------------------------------\n\nTITLE: Initializing Vanna AI Package in Python\nDESCRIPTION: This snippet shows how to import the Vanna AI package in Python, which is used for generating SQL queries based on natural language questions.\nSOURCE: https://github.com/vanna-ai/vanna/blob/main/papers/ai-sql-accuracy-2023-08-17.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport vanna as vn\n```\n\n----------------------------------------\n\nTITLE: Installing and Configuring Vanna Development Environment\nDESCRIPTION: Initial setup commands for cloning the repository, creating a virtual environment, installing dependencies, and setting up pre-commit hooks for development\nSOURCE: https://github.com/vanna-ai/vanna/blob/main/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/vanna-ai/vanna.git\ncd vanna/\n\npython3 -m venv venv\nsource venv/bin/activate\n\n# install package in editable mode\npip install -e '.[all]' tox pre-commit\n\n# Setup pre-commit hooks\npre-commit install\n\n# List dev targets\ntox list\n\n# Run tests\ntox -e py310\n```\n\n----------------------------------------\n\nTITLE: Querying Quarterly Revenues by Business Segment in Snowflake SQL\nDESCRIPTION: This SQL query is designed to retrieve quarterly revenues by business segment for Alphabet from a Snowflake database. It groups and sums revenue data by quarter and business segment.\nSOURCE: https://github.com/vanna-ai/vanna/blob/main/papers/ai-sql-accuracy-2023-08-17.md#2025-04-22_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  EXTRACT(QUARTER FROM date_column) AS quarter,\n  business_segment,\n  SUM(revenue) AS quarterly_revenue\nFROM\n  revenue_table\nWHERE\n  company_name = 'Alphabet'\nGROUP BY\n  quarter,\n  business_segment\nORDER BY\n  quarter,\n  business_segment;\n\n-- Replace date_column, business_segment, revenue, revenue_table, and adjust any other identifiers to match your specific database schema.\n```\n\n----------------------------------------\n\nTITLE: Installing Development Branch for Testing\nDESCRIPTION: Jupyter notebook pip install command for testing a development branch with specific feature dependencies before submitting a pull request\nSOURCE: https://github.com/vanna-ai/vanna/blob/main/CONTRIBUTING.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n%pip install 'git+https://github.com/vanna-ai/vanna@your-branch#egg=vanna[chromadb,snowflake,openai]'\n```\n\n----------------------------------------\n\nTITLE: Running Tests on MacOS\nDESCRIPTION: Command for executing tests specifically on Mac systems using tox\nSOURCE: https://github.com/vanna-ai/vanna/blob/main/CONTRIBUTING.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ntox -e mac\n```"
  }
]