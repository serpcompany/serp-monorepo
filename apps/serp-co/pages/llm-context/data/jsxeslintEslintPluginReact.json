[
  {
    "owner": "jsx-eslint",
    "repo": "eslint-plugin-react",
    "content": "TITLE: Correct Usage of forwardRef with ref Parameter\nDESCRIPTION: These examples show the correct way to use React.forwardRef with the ref parameter included. The rule will not trigger warnings for these patterns since they properly include the ref parameter, even if the ref is not used in some cases.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/forward-ref-uses-ref.md#2025-04-14_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nvar React = require('react');\n\nvar Component = React.forwardRef((props, ref) => (\n    <div ref={ref} />\n));\n\nvar Component = React.forwardRef((props, ref) => (\n    <div />\n));\n\nfunction Component(props) {\n    return <div />;\n};\n```\n\n----------------------------------------\n\nTITLE: Correct React State Management Examples\nDESCRIPTION: Examples showing the correct way to manage React component state using setState() and proper constructor initialization. These examples demonstrate both class and createReactClass components properly managing state.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/no-direct-mutation-state.md#2025-04-14_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nvar Hello = createReactClass({\n  componentDidMount: function() {\n    this.setState({\n      name: this.props.name.toUpperCase();\n    });\n  },\n  render: function() {\n    return <div>Hello {this.state.name}</div>;\n  }\n});\n\nclass Hello extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      foo: 'bar',\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of Props and Context in React Stateless Functional Component\nDESCRIPTION: Examples of correct code that properly access props and context in stateless functional components. These examples demonstrate the correct way to use function arguments and destructuring to access component properties.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/no-this-in-sfc.md#2025-04-14_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Foo(props) {\n  return (\n    <div>{props.bar}</div>\n  );\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Foo(props) {\n  const { bar } = props;\n  return (\n    <div>{bar}</div>\n  );\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Foo({ bar }) {\n  return (\n    <div>{bar}</div>\n  );\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Foo(props, context) {\n  return (\n    <div>\n      {context.foo ? props.bar : ''}\n    </div>\n  );\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Foo(props, context) {\n  const { foo } = context;\n  const { bar } = props;\n  return (\n    <div>\n      {foo ? bar : ''}\n    </div>\n  );\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Foo({ bar }, { foo }) {\n  return (\n    <div>\n      {foo ? bar : ''}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Examples of Incorrect React Method Usage\nDESCRIPTION: Demonstrates various deprecated React methods and patterns that should be avoided, including old rendering methods, lifecycle methods, and React 18 deprecations.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/no-deprecated.md#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nReact.render(<MyComponent />, root);\n\nReact.unmountComponentAtNode(root);\n\nReact.findDOMNode(this.refs.foo);\n\nReact.renderToString(<MyComponent />);\n\nReact.renderToStaticMarkup(<MyComponent />);\n\nReact.createClass({ /* Class object */ });\n\nconst propTypes = {\n  foo: PropTypes.bar,\n};\n\n//Any factories under React.DOM\nReact.DOM.div();\n\nimport React, { PropTypes } from 'react';\n\n// old lifecycles (since React 16.9)\ncomponentWillMount() { }\ncomponentWillReceiveProps() { }\ncomponentWillUpdate() { }\n\n// React 18 deprecations\nimport { render } from 'react-dom';\nReactDOM.render(<div></div>, container);\n\nimport { hydrate } from 'react-dom';\nReactDOM.hydrate(<div></div>, container);\n\nimport {unmountComponentAtNode} from 'react-dom';\nReactDOM.unmountComponentAtNode(container);\n\nimport { renderToNodeStream } from 'react-dom/server';\nReactDOMServer.renderToNodeStream(element);\n```\n\n----------------------------------------\n\nTITLE: Correct Usage: Properly Named useState Variables in JavaScript\nDESCRIPTION: Example of correct code where the useState call is destructured into a value and setter pair that follows the [thing, setThing] naming convention.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/hook-use-state.md#2025-04-14_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport React from 'react';\nexport default function useColor() {\n  // useState call is destructured into value + setter pair whose identifiers\n  // follow the [thing, setThing] naming convention\n  const [color, setColor] = React.useState();\n  return [color, setColor];\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect React State Mutation Examples\nDESCRIPTION: Examples showing incorrect ways of mutating React component state directly, which should be avoided. These examples demonstrate both class and createReactClass components improperly modifying state without setState().\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/no-direct-mutation-state.md#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nvar Hello = createReactClass({\n  componentDidMount: function() {\n    this.state.name = this.props.name.toUpperCase();\n  },\n  render: function() {\n    return <div>Hello {this.state.name}</div>;\n  }\n});\n\nclass Hello extends React.Component {\n  constructor(props) {\n    super(props)\n\n    // Assign at instance creation time, not on a callback\n    doSomethingAsync(() => {\n      this.state = 'bad';\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Correct JSX Usage With React Import\nDESCRIPTION: An example of correct code where React is imported before using JSX.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/react-in-jsx-scope.md#2025-04-14_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\n\nvar Hello = <div>Hello {this.props.name}</div>;\n```\n\n----------------------------------------\n\nTITLE: Incorrect JSX in map() Without Keys\nDESCRIPTION: Using map() to create React elements without providing key props, which is required for optimal rendering and reconciliation.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-key.md#2025-04-14_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\ndata.map(x => <Hello>{x}</Hello>);\n```\n\n----------------------------------------\n\nTITLE: Correct JSX with Props on Separate Lines\nDESCRIPTION: This example shows correctly formatted multi-line JSX with props on consecutive lines without empty lines between them.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-props-no-multi-spaces.md#2025-04-14_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<App\n  prop1='abc'\n  prop2='def' />\n```\n\n----------------------------------------\n\nTITLE: Correct TypeScript Props Definition in React Components\nDESCRIPTION: Examples of correct prop type definitions in TypeScript that are read-only. This includes class components with both type and interface definitions using the 'readonly' keyword.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/prefer-read-only-props.md#2025-04-14_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\ntype Props = {\n  readonly name: string;\n}\nclass Hello extends React.Component<Props> {\n  render () {\n    return <div>Hello {this.props.name}</div>;\n  }\n}\n\ninterface Props {\n  readonly name: string;\n}\nclass Hello extends React.Component<Props> {\n  render () {\n    return <div>Hello {this.props.name}</div>;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect State Access in setState\nDESCRIPTION: Example showing problematic direct state access within setState that can lead to incorrect state updates when operations are batched.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/no-access-state-in-setstate.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction increment() {\n  this.setState({value: this.state.value + 1});\n}\n```\n\n----------------------------------------\n\nTITLE: Correct JSX prop spreading in React\nDESCRIPTION: Examples of correct prop spreading patterns where props are spread only once, avoiding potential issues with attribute overriding and unnecessary computations.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-props-no-spread-multi.md#2025-04-14_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<App myAttr=\"1\" {...props} />\n<App {...props} myAttr=\"1\" />\n```\n\n----------------------------------------\n\nTITLE: Correct PropTypes Usage\nDESCRIPTION: Example showing proper usage of PropTypes where all defined props are used in the component.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/no-unused-prop-types.md#2025-04-14_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nclass Hello extends React.Component {\n  render() {\n    return <div>Hello {this.props.name}</div>;\n  }\n}\n\nHello.propTypes = {\n  name: PropTypes.string\n};\n```\n\n----------------------------------------\n\nTITLE: Correct Usage with Callback Refs in React Component\nDESCRIPTION: Example showing the recommended approach using callback refs instead of findDOMNode. The code demonstrates proper DOM reference handling using React's ref callback pattern.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/no-find-dom-node.md#2025-04-14_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nclass MyComponent extends Component {\n  componentDidMount() {\n    this.node.scrollIntoView();\n  }\n  render() {\n    return <div ref={node => this.node = node} />\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Correct usage of ReactDOM.render with callback function in JSX\nDESCRIPTION: This snippet demonstrates another correct approach using the third argument of ReactDOM.render() as a callback function. This method can be used to perform actions after the component has been rendered.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/no-render-return-value.md#2025-04-14_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nReactDOM.render(<App />, document.body, doSomethingWithInst);\n```\n\n----------------------------------------\n\nTITLE: Incorrect JSX Array Without Keys\nDESCRIPTION: An array of React elements without key props, which is problematic for React's reconciliation process.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-key.md#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n[<Hello />, <Hello />, <Hello />];\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint with React Recommended Preset\nDESCRIPTION: JSON configuration to extend ESLint recommended rules and React recommended plugin rules.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/README.md#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n  \"extends\": [\n    \"eslint:recommended\",\n    \"plugin:react/recommended\"\n  ]\n```\n\n----------------------------------------\n\nTITLE: Demonstrating problematic JSX rendering with && operator in React and React Native\nDESCRIPTION: Example showing how using && operator can lead to rendering unexpected values in React or crashes in React Native when falsy values like 0, NaN, or empty strings are encountered.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-no-leaked-render.md#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst Example = () => {\n  return (\n    <>\n      {0 && <Something />}\n      {/* React: renders undesired 0 */}\n      {/* React Native: crashes 💥 */}\n\n      {NaN && <Something />}\n      {/* React: renders undesired NaN */}\n      {/* React Native: crashes 💥 */}\n\n      {'' && <Something />}\n      {/* React: renders nothing */}\n      {/* React Native, with React < 18: crashes 💥 */}\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Detecting unstable nested component within a function\nDESCRIPTION: This code snippet demonstrates a pattern where a component (UnstableNestedComponent) is defined within another component (Component). This pattern is flagged by the eslint rule because each time Component re-renders, a new instance of UnstableNestedComponent is created, leading to state loss and performance issues. The rule suggests moving UnstableNestedComponent outside of Component.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/no-unstable-nested-components.md#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Component() {\n  function UnstableNestedComponent() {\n    return <div />;\n  }\n\n  return (\n    <div>\n      <UnstableNestedComponent />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect JSX rendering with count variable and title\nDESCRIPTION: Example of problematic code where a numeric count could be rendered directly if it's zero, instead of conditionally rendering the title.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-no-leaked-render.md#2025-04-14_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst Component = ({ count, title }) => {\n  return <div>{count && title}</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Examples of Incorrect Usage of Array Index in React Keys\nDESCRIPTION: This snippet illustrates the incorrect practice of using array index as a key in various array operations like map and forEach. This can result in performance issues due to unnecessary renders when array elements are reordered.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/no-array-index-key.md#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nthings.map((thing, index) => (\n  <Hello key={index} />\n));\n\nthings.map((thing, index) => (\n  React.cloneElement(thing, { key: index })\n));\n\nthings.forEach((thing, index) => {\n  otherThings.push(<Hello key={index} />);\n});\n\nthings.filter((thing, index) => {\n  otherThings.push(<Hello key={index} />);\n});\n\nthings.some((thing, index) => {\n  otherThings.push(<Hello key={index} />);\n});\n\nthings.every((thing, index) => {\n  otherThings.push(<Hello key={index} />);\n});\n\nthings.find((thing, index) => {\n  otherThings.push(<Hello key={index} />);\n});\n\nthings.findIndex((thing, index) => {\n  otherThings.push(<Hello key={index} />);\n});\n\nthings.flatMap((thing, index) => (\n  <Hello key={index} />\n));\n\nthings.reduce((collection, thing, index) => (\n  collection.concat(<Hello key={index} />)\n), []);\n\nthings.reduceRight((collection, thing, index) => (\n  collection.concat(<Hello key={index} />)\n), []);\n\nReact.Children.map(this.props.children, (child, index) => (\n  React.cloneElement(child, { key: index })\n))\n\nChildren.forEach(this.props.children, (child, index) => (\n  React.cloneElement(child, { key: index })\n))\n```\n\n----------------------------------------\n\nTITLE: Correct Context Provider Implementation with useMemo\nDESCRIPTION: Example showing proper usage where the object value is memoized using useMemo to prevent unnecessary rerenders.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-no-constructed-context-values.md#2025-04-14_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nconst foo = useMemo(() => ({foo: 'bar'}), []);\nreturn (\n    <SomeContext.Provider value={foo}>\n        ...\n    </SomeContext.Provider>\n)\n```\n\n----------------------------------------\n\nTITLE: Correct Style Prop Usage in JSX\nDESCRIPTION: Examples of correct style prop usage in JSX where style values are proper objects, either inline or as variables.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/style-prop-object.md#2025-04-14_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<div style={{ color: \"red\" }} />\n\n<Hello style={{ color: \"red\" }} />\n\nconst styles = { color: \"red\" };\n<div style={styles} />\n```\n\n----------------------------------------\n\nTITLE: Correct Callback Ref Example\nDESCRIPTION: This example demonstrates the correct usage of callback refs. Instead of assigning a string to the `ref` attribute, a function is used. This function receives the component instance as an argument, allowing it to be assigned to a property on the `this` object.  The ref is accessed directly using `this.hello`.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/no-string-refs.md#2025-04-14_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nvar Hello = createReactClass({\n  componentDidMount: function() {\n    var component = this.hello;\n    // ...do something with component\n  },\n  render() {\n    return <div ref={(c) => { this.hello = c; }}>Hello, world.</div>;\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of Children in React\nDESCRIPTION: Examples showing the correct way to pass children in React components, either as nested JSX elements or additional arguments to React.createElement.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/no-children-prop.md#2025-04-14_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<div>Children</div>\n\n<MyComponent>Children</MyComponent>\n\n<MyComponent>\n  <span>Child 1</span>\n  <span>Child 2</span>\n</MyComponent>\n\nReact.createElement(\"div\", {}, 'Children')\nReact.createElement(\"div\", 'Child 1', 'Child 2')\n```\n\n----------------------------------------\n\nTITLE: Correct JSX Array With Keys\nDESCRIPTION: An array of React elements with proper key props to help React identify which items have changed, are added, or removed.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-key.md#2025-04-14_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n[<Hello key=\"first\" />, <Hello key=\"second\" />, <Hello key=\"third\" />];\n```\n\n----------------------------------------\n\nTITLE: Incorrect Fragment Usage Examples in React JSX\nDESCRIPTION: Examples demonstrating improper or unnecessary usage of React fragments that will trigger ESLint warnings. These include single-child fragments, fragments within HTML elements, and empty fragments.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-no-useless-fragment.md#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<>{foo}</>\n\n<><Foo /></>\n\n<p><>foo</></p>\n\n<></>\n\n<Fragment>foo</Fragment>\n\n<React.Fragment>foo</React.Fragment>\n\n<section>\n  <>\n    <div />\n    <div />\n  </>\n</section>\n\n{showFullName ? <>{fullName}</> : <>{firstName}</>}\n```\n\n----------------------------------------\n\nTITLE: Correct usage of ReactDOM.render with callback ref in JSX\nDESCRIPTION: This snippet shows the correct way to access a component instance using a callback ref. This is the preferred method for getting a reference to the root ReactComponent instance.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/no-render-return-value.md#2025-04-14_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nReactDOM.render(<App ref={doSomethingWithInst} />, document.body);\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage - React Component Class with Unsafe Methods\nDESCRIPTION: Example showing incorrect usage of unsafe lifecycle methods in a React component class.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/no-unsafe.md#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nclass Foo extends React.Component {\n  UNSAFE_componentWillMount() {}\n  UNSAFE_componentWillReceiveProps() {}\n  UNSAFE_componentWillUpdate() {}\n}\n```\n\n----------------------------------------\n\nTITLE: Enforcing State Initialization in Constructor - Correct Example\nDESCRIPTION: This snippet demonstrates the correct way to initialize state in a class component by using a constructor, which adheres to the 'always' mode of the ESLint rule.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/state-in-constructor.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nclass Foo extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = { bar: 0 }\n  }\n  render() {\n    return <div>Foo</div>\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Flow Props Definition in React Components\nDESCRIPTION: Examples of correct prop type definitions in Flow that are read-only. This includes class components, functional components, and arrow function components using the '+' modifier.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/prefer-read-only-props.md#2025-04-14_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\ntype Props = {\n  +name: string,\n}\nclass Hello extends React.Component<Props> {\n  render () {\n    return <div>Hello {this.props.name}</div>;\n  }\n}\n\nfunction Hello(props: {+name: string}) {\n  return <div>Hello {props.name}</div>;\n}\n\nconst Hello = (props: {|+name: string|}) => (\n  <div>Hello {props.name}</div>\n);\n```\n\n----------------------------------------\n\nTITLE: Correct Context Usage with Primitive Value\nDESCRIPTION: Example showing correct implementation using a string literal value which doesn't cause rerender issues.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-no-constructed-context-values.md#2025-04-14_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nconst SomeContext = createContext();\nconst Component = () => <SomeContext value=\"Some string\"><SomeContext>;\n```\n\n----------------------------------------\n\nTITLE: Correct Usage: Directly Returning useState Result in JavaScript\nDESCRIPTION: Example of correct code where the useState result is directly returned without destructuring.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/hook-use-state.md#2025-04-14_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport React from 'react';\nexport default function useColor() {\n  // useState result is directly returned\n  return React.useState();\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of Undeclared Variables in JSX\nDESCRIPTION: Examples of code that violate the react/jsx-no-undef rule by using undeclared variables in JSX.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-no-undef.md#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Hello name=\"John\" />;\n```\n\nLANGUAGE: jsx\nCODE:\n```\n// will ignore Text in the global scope and warn\nvar Hello = React.createClass({\n  render: function() {\n    return <Text>Hello</Text>;\n  }\n});\nmodule.exports = Hello;\n```\n\n----------------------------------------\n\nTITLE: Correct Usage with allowDestructuredState Option in JSX\nDESCRIPTION: Example of correct code when using the allowDestructuredState option, which allows object destructuring for the state value.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/hook-use-state.md#2025-04-14_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nconst [{foo, bar, baz}, setFooBarBaz] = React.useState({foo: \"bbb\", bar: \"aaa\", baz: \"qqq\"})\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of dangerouslySetInnerHTML with Children in JSX\nDESCRIPTION: Examples demonstrating incorrect usage where both dangerouslySetInnerHTML and children are used simultaneously in JSX components, which React warns against.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/no-danger-with-children.md#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<div dangerouslySetInnerHTML={{ __html: \"HTML\" }}>\n  Children\n</div>\n\n<Hello dangerouslySetInnerHTML={{ __html: \"HTML\" }}>\n  Children\n</Hello>\n\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage: Asymmetrically Named useState Variables in JavaScript\nDESCRIPTION: Example of incorrect code where useState is destructured but the variable names don't follow the [thing, setThing] naming convention.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/hook-use-state.md#2025-04-14_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport React from 'react';\nexport default function useColor() {\n  // useState call is destructured into value + setter pair, but identifier\n  // names do not follow the [thing, setThing] naming convention\n  const [color, updateColor] = React.useState();\n  return [color, updateColor];\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Component Definitions with Various Rule Configurations\nDESCRIPTION: Examples of component definitions that comply with various rule configurations, demonstrating valid component definitions according to different settings.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/function-component-definition.md#2025-04-14_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n// only function declarations for named components\n// [2, { \"namedComponents\": \"function-declaration\" }]\nfunction Component (props) {\n  return <div />;\n}\n\n// only function expressions for named components\n// [2, { \"namedComponents\": \"function-expression\" }]\nconst Component = function (props) {\n  return <div />;\n};\n\n// only arrow functions for named components\n// [2, { \"namedComponents\": \"arrow-function\" }]\nconst Component = (props) => {\n  return <div />;\n};\n\n// only function expressions for unnamed components\n// [2, { \"unnamedComponents\": \"function-expression\" }]\nfunction getComponent () {\n  return function (props) {\n    return <div />;\n  };\n}\n\n// only arrow functions for unnamed components\n// [2, { \"unnamedComponents\": \"arrow-function\" }]\nfunction getComponent () {\n  return (props) => {\n    return <div />;\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Batched setState Operations with Stale State\nDESCRIPTION: Demonstration of how batched setState operations using direct state access can lead to incorrect state updates.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/no-access-state-in-setstate.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nthis.setState({value: this.state.value + 1}) // 2\nthis.setState({value: this.state.value + 1}) // 2, not 3\n```\n\n----------------------------------------\n\nTITLE: Correct Boolean Prop Usage with always Configuration\nDESCRIPTION: Example showing correct usage of boolean props when rule is configured with 'always' or with 'never' and always:['personal'] setting.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-boolean-value.md#2025-04-14_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nvar Hello = <Hello personal={true} />;\n```\n\n----------------------------------------\n\nTITLE: Correct React Render Method Implementation\nDESCRIPTION: Examples showing correct implementations of render methods that properly return JSX content in both createReactClass and class component syntax.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/require-render-return.md#2025-04-14_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nvar Hello = createReactClass({\n  render() {\n    return <div>Hello</div>;\n  }\n});\n\nclass Hello extends React.Component {\n  render() {\n    return <div>Hello</div>;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect React Component Self-Closing Examples\nDESCRIPTION: Examples showing incorrect usage of React components that should be self-closed when they have no children.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/self-closing-comp.md#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nvar HelloJohn = <Hello name=\"John\"></Hello>;\n\nvar HelloJohnCompound = <Hello.Compound name=\"John\"></Hello.Compound>;\n```\n\n----------------------------------------\n\nTITLE: Incorrect Target Blank Usage in JSX\nDESCRIPTION: Examples of incorrect usage of target='_blank' without proper security attributes when enforceDynamicLinks is set to 'always'.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-no-target-blank.md#2025-04-14_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nvar Hello = <a target='_blank' href=\"https://example.com/\"></a>\nvar Hello = <a target='_blank' href={dynamicLink}></a>\n```\n\n----------------------------------------\n\nTITLE: Correct JSX Usage with Unique Props\nDESCRIPTION: This example shows the correct way to use JSX by using unique prop names, avoiding duplication and potential issues in React components.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-no-duplicate-props.md#2025-04-14_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Hello firstname=\"John\" lastname=\"Doe\" />;\n```\n\n----------------------------------------\n\nTITLE: Correct Boolean Prop Naming in React Class Component\nDESCRIPTION: Example of correct boolean prop naming following the convention with 'is' prefix using PropTypes in a class component.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/boolean-prop-naming.md#2025-04-14_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nvar Hello = createReactClass({\n  propTypes: {\n    isEnabled: PropTypes.bool\n  },\n  render: function() { return <div />; };\n});\n```\n\n----------------------------------------\n\nTITLE: Correct Usage without setState (React JSX)\nDESCRIPTION: This example demonstrates a correct approach without using setState in componentDidMount, instead calling a prop function.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/no-did-mount-set-state.md#2025-04-14_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nvar Hello = createReactClass({\n  componentDidMount: function() {\n    this.props.onMount();\n  },\n  render: function() {\n    return <div>Hello {this.props.name}</div>;\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: ESLint Rule Configuration for react/hook-use-state\nDESCRIPTION: Configuration options for the ESLint rule, showing the syntax and available options.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/hook-use-state.md#2025-04-14_snippet_4\n\nLANGUAGE: js\nCODE:\n```\n...\n\"react/hook-use-state\": [<enabled>, { \"allowDestructuredState\": <boolean> }]\n...\n```\n\n----------------------------------------\n\nTITLE: Correct Custom Link Usage in JSX\nDESCRIPTION: Examples of correct usage of custom Link components with proper security attributes.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-no-target-blank.md#2025-04-14_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nvar Hello = <Link target=\"_blank\" rel=\"noopener noreferrer\" to=\"https://example.com\"></Link>\nvar Hello = <Link target=\"_blank\" to=\"relative/path/in/the/host\"></Link>\nvar Hello = <Link target=\"_blank\" to=\"/absolute/path/in/the/host\"></Link>\nvar Hello = <Link />\n```\n\n----------------------------------------\n\nTITLE: Additional Correct Props Validation Examples\nDESCRIPTION: Examples showing cases where prop-types validation is not required or handled externally.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/prop-types.md#2025-04-14_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Hello() {\n  return <div>Hello World</div>;\n}\n\n// Referencing an external object disable the rule for the component\nfunction Hello({ name }) {\n  return <div>Hello {name}</div>;\n}\nHello.propTypes = myPropTypes;\n```\n\n----------------------------------------\n\nTITLE: Correct JSX rendering with comparison operator\nDESCRIPTION: Example of correct code that uses a comparison operator which returns a boolean result for conditional rendering.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-no-leaked-render.md#2025-04-14_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\nconst Component = ({ elements }) => {\n  return <div>{elements.length > 0 && <List elements={elements} />}</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Correct React Component Method Ordering - Basic\nDESCRIPTION: Examples showing correct method ordering in React components where displayName appears before render method\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/sort-comp.md#2025-04-14_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nvar Hello = createReactClass({\n  displayName : 'Hello',\n  render: function() {\n    return <div>Hello</div>;\n  }\n});\n```\n\nLANGUAGE: jsx\nCODE:\n```\nclass Hello extends React.Component {\n  static displayName = 'Hello';\n  render() {\n    return <div>Hello</div>;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Props Validation Examples in React JSX\nDESCRIPTION: Examples demonstrating proper props validation in React components using PropTypes with different component patterns.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/prop-types.md#2025-04-14_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Hello({ name }) {\n  return <div>Hello {name}</div>;\n}\nHello.propTypes = {\n  name: PropTypes.string.isRequired\n}\n\nvar Hello = createReactClass({\n  propTypes: {\n    name: PropTypes.string.isRequired,\n  },\n  render: function() {\n    return <div>Hello {this.props.name}</div>;\n  },\n});\n\n// Or in ES6:\nclass HelloEs6 extends React.Component {\n  render() {\n    return <div>Hello {this.props.name}</div>;\n  }\n}\nHelloEs6.propTypes = {\n  name: PropTypes.string.isRequired,\n};\n\n// ES6 + Public Class Fields (draft: https://tc39.github.io/proposal-class-public-fields/)\nclass HelloEs6WithPublicClassField extends React.Component {\n  static propTypes = {\n    name: PropTypes.string.isRequired,\n  }\n  render() {\n    return <div>Hello {this.props.name}</div>;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Props Validation Examples in React JSX\nDESCRIPTION: Examples showing common prop-types validation mistakes in React components using various component declaration patterns.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/prop-types.md#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Hello({ name }) {\n  return <div>Hello {name}</div>;\n  // 'name' is missing in props validation\n}\n\nvar Hello = createReactClass({\n  propTypes: {\n    firstname: PropTypes.string.isRequired\n  },\n  render: function() {\n    return <div>Hello {this.props.firstname} {this.props.lastname}</div>;\n    // 'lastname' type is missing in props validation\n  }\n});\n\n// Or in ES6\nclass Hello extends React.Component {\n  render() {\n    return <div>Hello {this.props.firstname} {this.props.lastname}</div>;\n    // 'lastname' type is missing in props validation\n  }\n}\nHello.propTypes = {\n  firstname: PropTypes.string.isRequired\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect React Component Declarations with Typos\nDESCRIPTION: Examples of React component declarations containing common typos in static properties and lifecycle methods that will trigger ESLint errors.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/no-typos.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyComponent extends React.Component {\n  static PropTypes = {}\n}\n\nclass MyComponent extends React.Component {\n  static proptypes = {}\n}\n\nclass MyComponent extends React.Component {\n  static ContextTypes = {}\n}\n\nclass MyComponent extends React.Component {\n  static contexttypes = {}\n}\n\nclass MyComponent extends React.Component {\n  static ChildContextTypes = {}\n}\n\nclass MyComponent extends React.Component {\n  static childcontexttypes = {}\n}\n\nclass MyComponent extends React.Component {\n  static DefaultProps = {}\n}\n\nclass MyComponent extends React.Component {\n  static defaultprops = {}\n}\n\nclass MyComponent extends React.Component {\n  componentwillMount() {}\n}\n\nclass MyComponent extends React.Component {\n  ComponentWillReceiveProps() {}\n}\n\nclass MyComponent extends React.Component {\n  componentdidupdate() {}\n}\n\nclass MyComponent extends React.Component {\n  static propTypes = {\n    a: PropTypes.typo\n  }\n}\n\nclass MyComponent extends React.Component {\n  getDerivedStateFromProps() {}\n}\n```\n\n----------------------------------------\n\nTITLE: Correct State Updates Using setState Callback\nDESCRIPTION: Proper implementation using setState callback function that receives the previous state as an argument.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/no-access-state-in-setstate.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction increment() {\n  this.setState(prevState => ({value: prevState.value + 1}));\n}\n```\n\n----------------------------------------\n\nTITLE: Correct JSX rendering with ternary operator and fallback component\nDESCRIPTION: Example of correct code using a ternary operator with an alternative component as the fallback for conditional rendering.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-no-leaked-render.md#2025-04-14_snippet_16\n\nLANGUAGE: jsx\nCODE:\n```\nconst Component = ({ elements }) => {\n  return <div>{elements.length ? <List elements={elements} /> : <EmptyList />}</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Correct JSX Closing Bracket Placement\nDESCRIPTION: Examples of JSX code that comply with the default rule settings for closing bracket location.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-closing-bracket-location.md#2025-04-14_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Hello firstName=\"John\" lastName=\"Smith\" />;\n\n<Hello\n  firstName=\"John\"\n  lastName=\"Smith\"\n/>;\n```\n\n----------------------------------------\n\nTITLE: Correct Usage - Props Handler in componentWillUpdate\nDESCRIPTION: Example showing correct usage where componentWillUpdate calls a prop method instead of setState.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/no-will-update-set-state.md#2025-04-14_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nvar Hello = createReactClass({\n  componentWillUpdate: function() {\n    this.props.prepareHandler();\n  },\n  render: function() {\n    return <div>Hello {this.props.name}</div>;\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring React Settings for ESLint\nDESCRIPTION: JSON5 configuration for shared React settings, including version detection, prop wrapper functions, and component definitions.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/README.md#2025-04-14_snippet_2\n\nLANGUAGE: json5\nCODE:\n```\n{\n  \"settings\": {\n    \"react\": {\n      \"createClass\": \"createReactClass\", // Regex for Component Factory to use,\n                                         // default to \"createReactClass\"\n      \"pragma\": \"React\",  // Pragma to use, default to \"React\"\n      \"fragment\": \"Fragment\",  // Fragment to use (may be a property of <pragma>), default to \"Fragment\"\n      \"version\": \"detect\", // React version. \"detect\" automatically picks the version you have installed.\n                           // You can also use `16.0`, `16.3`, etc, if you want to override the detected value.\n                           // Defaults to the \"defaultVersion\" setting and warns if missing, and to \"detect\" in the future\n      \"defaultVersion\": \"\", // Default React version to use when the version you have installed cannot be detected.\n                            // If not provided, defaults to the latest React version.\n      \"flowVersion\": \"0.53\" // Flow version\n    },\n    \"propWrapperFunctions\": [\n        // The names of any function used to wrap propTypes, e.g. `forbidExtraProps`. If this isn't set, any propTypes wrapped in a function will be skipped.\n        \"forbidExtraProps\",\n        {\"property\": \"freeze\", \"object\": \"Object\"},\n        {\"property\": \"myFavoriteWrapper\"},\n        // for rules that check exact prop wrappers\n        {\"property\": \"forbidExtraProps\", \"exact\": true}\n    ],\n    \"componentWrapperFunctions\": [\n        // The name of any function used to wrap components, e.g. Mobx `observer` function. If this isn't set, components wrapped by these functions will be skipped.\n        \"observer\", // `property`\n        {\"property\": \"styled\"}, // `object` is optional\n        {\"property\": \"observer\", \"object\": \"Mobx\"},\n        {\"property\": \"observer\", \"object\": \"<pragma>\"} // sets `object` to whatever value `settings.react.pragma` is set to\n    ],\n    \"formComponents\": [\n      // Components used as alternatives to <form> for forms, eg. <Form endpoint={ url } />\n      \"CustomForm\",\n      {\"name\": \"SimpleForm\", \"formAttribute\": \"endpoint\"},\n      {\"name\": \"Form\", \"formAttribute\": [\"registerEndpoint\", \"loginEndpoint\"]}, // allows specifying multiple properties if necessary\n    ],\n    \"linkComponents\": [\n      // Components used as alternatives to <a> for linking, eg. <Link to={ url } />\n      \"Hyperlink\",\n      {\"name\": \"MyLink\", \"linkAttribute\": \"to\"},\n      {\"name\": \"Link\", \"linkAttribute\": [\"to\", \"href\"]}, // allows specifying multiple properties if necessary\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Correct JSX rendering with logical OR for fallback\nDESCRIPTION: Example of correct code using OR operator as a fallback mechanism, which is considered valid by the rule.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-no-leaked-render.md#2025-04-14_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\n// An OR condition it's considered valid since it's assumed as a way\n// to render some fallback if the first value is falsy, not to render something conditionally.\nconst Component = ({ customTitle }) => {\n  return <div>{customTitle || defaultTitle}</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Illustrating an edge case of memoized components\nDESCRIPTION: This example highlights an edge case where a component is memoized using useCallback but still defined within the parent component. While the ESLint rule doesn't currently detect this, the documentation recommends moving the component outside, especially if there are no dependencies in useCallback. It is still more performant to define it outside the Component.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/no-unstable-nested-components.md#2025-04-14_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Component() {\n  // No ESLint warning but `MemoizedNestedComponent` should be moved outside of `Component`.\n  const MemoizedNestedComponent = React.useCallback(() => <div />, []);\n\n  return (\n    <div>\n      <MemoizedNestedComponent />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Valid Usage of Default Props in React Components\nDESCRIPTION: This snippet shows how to correctly use default props in React functional components to avoid unnecessary rerenders. It demonstrates using module-scoped variables for referential types and inline primitives.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/no-object-type-as-default-prop.md#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst emptyArray = [];\n\nfunction Component({\n  items = emptyArray,\n}) {}\n\nconst emptyObject = {};\nconst Component = ({\n  items = emptyObject,\n}) => {}\n\nconst noopFunc = () => {};\nconst Component = ({\n  items = noopFunc,\n}) => {}\n\n// primitives are all compared by value, so are safe to be inlined\nfunction Component({\n  num = 3,\n  str = 'foo',\n  bool = true,\n}) {}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of Children Props in React\nDESCRIPTION: Examples showing incorrect ways of passing children in React components, either through the children prop or React.createElement.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/no-children-prop.md#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<div children='Children' />\n\n<MyComponent children={<AnotherComponent />} />\n<MyComponent children={['Child 1', 'Child 2']} />\n\nReact.createElement(\"div\", { children: 'Children' })\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage - Direct setState in componentWillUpdate\nDESCRIPTION: Example showing incorrect usage where setState is called directly within componentWillUpdate, which can lead to indeterminate component state.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/no-will-update-set-state.md#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nvar Hello = createReactClass({\n  componentWillUpdate: function() {\n     this.setState({\n        name: this.props.name.toUpperCase()\n      });\n    },\n  render: function() {\n    return <div>Hello {this.state.name}</div>;\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Correct JSX with Static Key and Spread Props\nDESCRIPTION: A React element with a statically provided key prop followed by spread props, which is the recommended pattern.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-key.md#2025-04-14_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n<Hello key={id} {...{ id, caption }} />\n```\n\n----------------------------------------\n\nTITLE: Correct Usage - Stateless Functional Component\nDESCRIPTION: Example of a properly implemented stateless functional component that uses props and context.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/prefer-stateless-function.md#2025-04-14_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst Foo = function(props, context) {\n  const {\n    location\n  } = context.router;\n\n  return <div>{props.foo}</div>;\n};\n```\n\n----------------------------------------\n\nTITLE: Correct JSX rendering with Boolean constructor\nDESCRIPTION: Example of correct code that coerces array length to boolean using the Boolean constructor before using it in a condition.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-no-leaked-render.md#2025-04-14_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\nconst Component = ({ elements }) => {\n  return <div>{Boolean(elements.length) && <List elements={elements} />}</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect JSX with Multiple Spaces Between Props\nDESCRIPTION: This example demonstrates JSX code with multiple spaces between props, which violates the rule.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-props-no-multi-spaces.md#2025-04-14_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<App too  spacy />\n```\n\n----------------------------------------\n\nTITLE: Correct Event Handler Ordering Examples\nDESCRIPTION: Examples showing correct placement of event handlers before render method\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/sort-comp.md#2025-04-14_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nvar Hello = createReactClass({\n  onClick: function() {},\n  render: function() {\n    return <div>Hello</div>;\n  }\n});\n```\n\nLANGUAGE: jsx\nCODE:\n```\nclass Hello extends React.Component {\n  onClick = this.onClick.bind(this);\n  onClick() {}\n  render() {\n    return <div>Hello</div>;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Usage - Properly Used React State Properties\nDESCRIPTION: Examples showing React components where state properties are properly used within the render method.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/no-unused-state.md#2025-04-14_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nclass MyComponent extends React.Component {\n  state = { foo: 0 };\n  render() {\n    return <SomeComponent foo={this.state.foo} />;\n  }\n}\n\nvar UnusedGetInitialStateTest = createReactClass({\n  getInitialState: function() {\n    return { foo: 0 };\n  },\n  render: function() {\n    return <SomeComponent foo={this.state.foo} />;\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Correct Boolean Prop Usage with never Configuration\nDESCRIPTION: Example showing correct usage of boolean props when rule is configured with 'never' or with 'always' and never:['personal'] setting.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-boolean-value.md#2025-04-14_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nvar Hello = <Hello personal />;\n```\n\n----------------------------------------\n\nTITLE: Correct Usage with 'always' Setting\nDESCRIPTION: Examples of code that comply with the rule when configured with 'always' setting.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/destructuring-assignment.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst MyComponent = ({id}) => {\n  return (<div id={id} />)\n};\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst MyComponent = (props, context) => {\n  const { id } = props;\n  return (<div id={id} />)\n};\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst Foo = class extends React.PureComponent {\n  render() {\n    const { title } = this.context;\n    return <div>{title}</div>;\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Incorrect Adjacent Inline Elements Usage in JSX/React\nDESCRIPTION: Examples showing incorrect usage where inline elements are placed directly next to each other without whitespace separation, which can cause undesirable rendering.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/no-adjacent-inline-elements.md#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<div><a></a><a></a></div>\n<div><a></a><span></span></div>\n\nReact.createElement(\"div\", undefined, [React.createElement(\"a\"), React.createElement(\"span\")]);\n```\n\n----------------------------------------\n\nTITLE: Correct Props Validation Examples in TypeScript\nDESCRIPTION: Examples showing correct props validation in TypeScript React components with default values.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/prop-types.md#2025-04-14_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n// destructured default prop values\n\nfunction Foo({ bar = \"\" }): JSX.Element {\n  return <div>{bar}</div>;\n}\n\nfunction Foo({ bar = \"\" as string }): JSX.Element {\n  return <div>{bar}</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: List Rendering Best Practice Example\nDESCRIPTION: Example showing how to properly handle callbacks in list rendering by extracting list items into separate components.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-no-bind.md#2025-04-14_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nvar List = createReactClass({\n  render() {\n    return (\n      <ul>\n        {this.props.items.map(item =>\n          <ListItem key={item.id} item={item} onItemClick={this.props.onItemClick} />\n        )}\n      </ul>\n    );\n  }\n});\n\nvar ListItem = createReactClass({\n  render() {\n    return (\n      <li onClick={this._onClick}>\n        ...\n      </li>\n    );\n  },\n  _onClick() {\n    this.props.onItemClick(this.props.item.id);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of Declared Variables in JSX\nDESCRIPTION: Example of code that complies with the react/jsx-no-undef rule by properly declaring and using variables in JSX.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-no-undef.md#2025-04-14_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nvar Hello = require('./Hello');\n\n<Hello name=\"John\" />;\n```\n\n----------------------------------------\n\nTITLE: Incorrect JSX rendering with boolean variable\nDESCRIPTION: Example showing that even with a boolean condition, the rule will report issues since it can't infer types statically.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-no-leaked-render.md#2025-04-14_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n// If the condition is a boolean value, this rule will report the logical expression\n// since it can't infer the type of the condition.\nconst Component = ({ someBool }) => {\n  return <div>{someBool && <Results>{numberA + numberB}</Results>}</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Rule Configuration Options\nDESCRIPTION: Example showing the configuration options for the no-unused-prop-types rule.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/no-unused-prop-types.md#2025-04-14_snippet_4\n\nLANGUAGE: js\nCODE:\n```\n...\n\"react/no-unused-prop-types\": [<enabled>, { ignore: <ignore>, customValidators: <customValidator>, skipShapeProps: <skipShapeProps> }]\n...\n```\n\n----------------------------------------\n\nTITLE: Correct Event Handler Implementation - Example 1\nDESCRIPTION: Shows correct usage where the handler method follows the 'handle' prefix convention with 'on' prop prefix\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-handler-names.md#2025-04-14_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<MyComponent onChange={this.handleChange} />\n```\n\n----------------------------------------\n\nTITLE: Correct JSX Usage With React Require\nDESCRIPTION: An example of correct code where React is required before using JSX.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/react-in-jsx-scope.md#2025-04-14_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nvar React = require('react');\n\nvar Hello = <div>Hello {this.props.name}</div>;\n```\n\n----------------------------------------\n\nTITLE: React Component With DefaultProps Example\nDESCRIPTION: Example showing proper usage of defaultProps with PropTypes checking in a React component.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/require-default-props.md#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst HelloWorld = ({ name }) => (\n  <h1>Hello, {name.first} {name.last}!</h1>\n);\n\nHelloWorld.propTypes = {\n  name: PropTypes.shape({\n    first: PropTypes.string,\n    last: PropTypes.string,\n  })\n};\n\nHelloWorld.defaultProps = {\n  name: 'john'\n};\n```\n\n----------------------------------------\n\nTITLE: Correct Usage: defaultProps with Flow Type Annotations\nDESCRIPTION: This example shows correct usage with Flow type annotations where only the optional prop 'bar' has a default value.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/default-props-match-prop-types.md#2025-04-14_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\ntype Props = {\n  foo: string,\n  bar?: string\n};\n\nfunction MyStatelessComponent(props: Props) {\n  return <div>Hello {props.foo} {props.bar}</div>;\n}\n\nMyStatelessComponent.defaultProps = {\n  bar: 'some default'\n};\n```\n\n----------------------------------------\n\nTITLE: Valid Regular Method Lifecycle Methods in React Components\nDESCRIPTION: Examples of React components using regular methods for lifecycle methods, which are considered valid by this rule. Shows both class component and createReactClass implementations.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/no-arrow-function-lifecycle.md#2025-04-14_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nclass Hello extends React.Component {\n  render() {\n    return <div />;\n  }\n}\n\nvar AnotherHello = createReactClass({\n  render() {\n    return <div />;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Valid Exact PropTypes Examples\nDESCRIPTION: Examples of component definitions that properly implement exact prop types using Flow exact object types and prop-types-exact package.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/prefer-exact-props.md#2025-04-14_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n  type Props = {|\n    foo: string\n  |}\n  function Component(props: Props) {\n    return <div />;\n  }\n```\n\nLANGUAGE: jsx\nCODE:\n```\n  import exact from 'prop-types-exact';\n  class Component extends React.Component {\n    render() {\n      return <div />;\n    }\n  }\n  Component.propTypes = exact({\n    foo: PropTypes.string\n  });\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of Button Elements in JSX\nDESCRIPTION: Examples of code that comply with the rule by either using valid button type attributes or using elements other than buttons.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/button-has-type.md#2025-04-14_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nvar Hello = <span>Hello</span>\nvar Hello = <span type=\"foo\">Hello</span>\nvar Hello = <button type=\"button\">Hello</button>\nvar Hello = <button type=\"submit\">Hello</button>\nvar Hello = <button type=\"reset\">Hello</button>\nvar Hello = <button type={condition ? \"button\" : \"submit\"}>Hello</button>\n\nvar Hello = React.createElement('span', {}, 'Hello')\nvar Hello = React.createElement('span', {type: 'foo'}, 'Hello')\nvar Hello = React.createElement('button', {type: 'button'}, 'Hello')\nvar Hello = React.createElement('button', {type: 'submit'}, 'Hello')\nvar Hello = React.createElement('button', {type: 'reset'}, 'Hello')\nvar Hello = React.createElement('button', {type: condition ? 'button' : 'submit'}, 'Hello')\n```\n\n----------------------------------------\n\nTITLE: Detecting unstable nested component passed as prop\nDESCRIPTION: This example shows an unstable component being passed as a prop to another component. The component is defined inline during the render process, which causes it to be recreated on every render, potentially losing state. The rule identifies this and issues a warning. This example demonstrates how defining a component inline and passing it as a prop to another component will recreate the component on every render, and is flagged as an unstable pattern.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/no-unstable-nested-components.md#2025-04-14_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nfunction SomeComponent({ footer: Footer }) {\n  return (\n    <div>\n      <Footer />\n    </div>\n  );\n}\n\nfunction Component() {\n  return (\n    <div>\n      <SomeComponent footer={() => <div />} />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Element Overrides Configuration with Button Example\nDESCRIPTION: Configuration example showing how to use elementOverrides to allow string literals in specific components like Button.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-no-literals.md#2025-04-14_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n// \"react/jsx-no-literals\": [<enabled>, {\"elementOverrides\": { \"Button\": {\"allowElement\": true} }}]\n\nvar Hello = <div>{'test'}</div>;\nvar World = <Button>test</Button>;\n```\n\n----------------------------------------\n\nTITLE: Rule Configuration Example\nDESCRIPTION: Example showing how to configure the prop-types rule with custom options.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/prop-types.md#2025-04-14_snippet_6\n\nLANGUAGE: js\nCODE:\n```\n...\n\"react/prop-types\": [<enabled>, { ignore: <ignore>, customValidators: <customValidator>, skipUndeclared: <skipUndeclared> }]\n...\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of shouldComponentUpdate and PureComponent\nDESCRIPTION: Examples showing proper implementation patterns: using shouldComponentUpdate with React.Component, or using PureComponent without shouldComponentUpdate method.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/no-redundant-should-component-update.md#2025-04-14_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nclass Foo extends React.Component {\n  shouldComponentUpdate() {\n    // do check\n  }\n\n  render() {\n    return <div>Radical!</div>\n  }\n}\n\nfunction Bar() {\n  return class Baz extends React.Component {\n    shouldComponentUpdate() {\n      // do check\n    }\n\n    render() {\n      return <div>Groovy!</div>\n    }\n  }\n}\n\nclass Qux extends React.PureComponent {\n  render() {\n    return <div>Tubular!</div>\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Correct JSX rendering with direct element output\nDESCRIPTION: Example of correct code that directly renders elements without conditional logic that could cause problems.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-no-leaked-render.md#2025-04-14_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nconst Component = ({ elements }) => {\n  return <div>{elements}</div>\n}\n```\n\n----------------------------------------\n\nTITLE: React Hooks Callback Examples\nDESCRIPTION: Examples showing how to handle callbacks in functional components using hooks.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-no-bind.md#2025-04-14_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nconst onClick = () => {\n  console.log(\"Independent callback\");\n};\nconst Button = () => {\n  return (\n    <button type=\"button\" onClick={onClick}>Label</button>\n  );\n};\n```\n\nLANGUAGE: jsx\nCODE:\n```\nconst Button = () => {\n  const [text, setText] = useState(\"Before click\");\n  const onClick = useCallback(() => {\n    setText(\"After click\");\n  }, [setText]); // Array of dependencies for which the memoization should update\n  return (\n    <button type=\"button\" onClick={onClick}>{text}</button>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Correct JSX in map() With Keys\nDESCRIPTION: Using map() to create React elements with properly assigned key props based on item IDs.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-key.md#2025-04-14_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\ndata.map((x) => <Hello key={x.id}>{x}</Hello>);\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of Button Elements in JSX\nDESCRIPTION: Examples of code that violate the rule by using button elements without a type attribute or with invalid type values.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/button-has-type.md#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nvar Hello = <button>Hello</button>\nvar Hello = <button type=\"foo\">Hello</button>\nvar Hello = <button type={foo}>Hello</button>\n\nvar Hello = React.createElement('button', {}, 'Hello')\nvar Hello = React.createElement('button', {type: 'foo'}, 'Hello')\n```\n\n----------------------------------------\n\nTITLE: Correct React Component Declarations\nDESCRIPTION: Examples of React component declarations with proper casing for static properties and lifecycle methods that pass ESLint validation.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/no-typos.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyComponent extends React.Component {\n  static propTypes = {}\n}\n\nclass MyComponent extends React.Component {\n  static contextTypes = {}\n}\n\nclass MyComponent extends React.Component {\n  static childContextTypes = {}\n}\n\nclass MyComponent extends React.Component {\n  static defaultProps = {}\n}\n\nclass MyComponent extends React.Component {\n  componentWillMount() {}\n}\n\nclass MyComponent extends React.Component {\n  componentWillReceiveProps() {}\n}\n\nclass MyComponent extends React.Component {\n  componentDidUpdate() {}\n}\n\nclass MyComponent extends React.Component {\n  static propTypes = {\n    a: PropTypes.bool.isRequired\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage Examples of bind() and Arrow Functions in JSX\nDESCRIPTION: Examples showing incorrect ways of using bind() and arrow functions in JSX props that could cause performance issues due to creating new function instances on every render.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-no-bind.md#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Foo onClick={this._handleClick.bind(this)}></Foo>\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<Foo onClick={() => console.log('Hello!')}></Foo>\n```\n\nLANGUAGE: jsx\nCODE:\n```\nfunction onClick() { console.log('Hello!'); }\n<Foo onClick={onClick} />\n```\n\n----------------------------------------\n\nTITLE: Allowing externally defined components\nDESCRIPTION: This example demonstrates a valid pattern where the component OutsideDefinedComponent is defined outside of the Component component. Because it is defined outside, it is not recreated on every render, and the eslint rule does not flag this as a problem. This pattern is recommended to avoid performance and state loss issues.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/no-unstable-nested-components.md#2025-04-14_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nfunction OutsideDefinedComponent(props) {\n  return <div />;\n}\n\nfunction Component() {\n  return (\n    <div>\n      <OutsideDefinedComponent />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Usage: Allowed 'id' prop on custom component in JSX\nDESCRIPTION: Example of correct code where the 'id' prop is used on a custom component, which is allowed even when forbidden on DOM elements.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/forbid-dom-props.md#2025-04-14_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Hello id='foo' />\n```\n\n----------------------------------------\n\nTITLE: Complete Rule Configuration Example\nDESCRIPTION: Full example of rule configuration with custom decorators.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/require-optimization.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n...\n\"react/require-optimization\": [2, {allowDecorators: ['customDecorators']}]\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint with React Plugin in eslint.config.js\nDESCRIPTION: JavaScript configuration for ESLint using the new config system, including React plugin and rules.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/README.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst react = require('eslint-plugin-react');\nconst globals = require('globals');\n\nmodule.exports = [\n  …\n  {\n    files: ['**/*.{js,jsx,mjs,cjs,ts,tsx}'],\n    plugins: {\n      react,\n    },\n    languageOptions: {\n      parserOptions: {\n        ecmaFeatures: {\n          jsx: true,\n        },\n      },\n      globals: {\n        ...globals.browser,\n      },\n    },\n    rules: {\n      // ... any rules you want\n      'react/jsx-uses-react': 'error',\n      'react/jsx-uses-vars': 'error',\n     },\n    // ... others are omitted for brevity\n  },\n  …\n];\n```\n\n----------------------------------------\n\nTITLE: Examples of Correct Code with react/forbid-elements Rule\nDESCRIPTION: Demonstrates code that passes the react/forbid-elements rule when configured to forbid the 'button' element in favor of a custom Button component.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/forbid-elements.md#2025-04-14_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n// [1, { \"forbid\": [\"button\"] }]\n<Button />\n\n// [1, { \"forbid\": [{ \"element\": \"button\" }] }]\n<Button />\n```\n\n----------------------------------------\n\nTITLE: Correct React Component Self-Closing Examples\nDESCRIPTION: Examples showing correct usage of React components, including self-closed components and components with children.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/self-closing-comp.md#2025-04-14_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nvar contentContainer = <div className=\"content\"></div>;\n\nvar intentionalSpace = <div>{' '}</div>;\n\nvar HelloJohn = <Hello name=\"John\" />;\n\nvar HelloJohnCompound = <Hello.Compound name=\"John\" />;\n\nvar Profile = <Hello name=\"John\"><img src=\"picture.png\" /></Hello>;\n\nvar ProfileCompound = <Hello.Compound name=\"John\"><img src=\"picture.png\" /></Hello.Compound>;\n\nvar HelloSpace = <Hello>{' '}</Hello>;\n```\n\n----------------------------------------\n\nTITLE: Valid IFrame Usage With Sandbox Attribute in React\nDESCRIPTION: Examples of correct iframe implementations with properly configured sandbox attribute. Demonstrates both JSX syntax and React.createElement() usage with the sandbox property.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/iframe-missing-sandbox.md#2025-04-14_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nvar React = require('react');\n\nvar Frame = <iframe sandbox=\"allow-popups\"/>;\nvar Frame = () => (\n    <div>\n        <iframe sandbox=\"allow-popups\"></iframe>\n        {React.createElement('iframe', { sandbox: \"allow-popups\" })}\n    </div>\n);\n```\n\n----------------------------------------\n\nTITLE: Correct JSX Prop Passing Examples\nDESCRIPTION: Examples of JSX code that comply with the 'react/jsx-props-no-spreading' rule by explicitly passing individual props to components.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-props-no-spreading.md#2025-04-14_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst {src, alt} = props;\nconst {one_prop, two_prop} = otherProps;\n<MyCustomComponent one_prop={one_prop} two_prop={two_prop} />\n<img src={src} alt={alt} />\n```\n\n----------------------------------------\n\nTITLE: Correct Input Element Usage in React JSX\nDESCRIPTION: Examples of correct implementations that follow the checked-requires-onchange-or-readonly rule by properly handling checked inputs with onChange handlers or readonly attributes.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/checked-requires-onchange-or-readonly.md#2025-04-14_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<input type=\"checkbox\" checked onChange={() => {}} />\n<input type=\"checkbox\" checked readOnly />\n<input type=\"checkbox\" checked onChange readOnly />\n<input type=\"checkbox\" defaultChecked />\n\nReact.createElement('input', { type: 'checkbox', checked: true, onChange() {} });\nReact.createElement('input', { type: 'checkbox', checked: true, readOnly: true });\nReact.createElement('input', { type: 'checkbox', checked: true, onChange() {}, readOnly: true });\nReact.createElement('input', { type: 'checkbox', defaultChecked: true });\n```\n\n----------------------------------------\n\nTITLE: Correct Fragment Usage Examples in React JSX\nDESCRIPTION: Examples showing proper usage of React fragments, including multi-child fragments, fragments with expressions, keyed fragments, and cases where fragments are not needed.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-no-useless-fragment.md#2025-04-14_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n{foo}\n\n<Foo />\n\n<>\n  <Foo />\n  <Bar />\n</>\n\n<>foo {bar}</>\n\n<> {foo}</>\n\nconst cat = <>meow</>\n\n<SomeComponent>\n  <>\n    <div />\n    <div />\n  </>\n</SomeComponent>\n\n<Fragment key={item.id}>{item.value}</Fragment>\n\n{showFullName ? fullName : firstName}\n```\n\n----------------------------------------\n\nTITLE: Correct JSX Property Usage Examples\nDESCRIPTION: Examples showing proper usage of DOM properties in JSX, including correct className usage, proper aria-* attributes, and data-* attributes.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/no-unknown-property.md#2025-04-14_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nvar React = require('react');\n\nvar Hello = <div className=\"hello\">Hello World</div>;\nvar Button = <button disabled>Cannot click me</button>;\nvar Img = <img src={catImage} alt=\"A cat sleeping on a keyboard\" />;\n\n// aria-* attributes\nvar IconButton = <button aria-label=\"Close\" onClick={this.close}>{closeIcon}</button>;\n\n// data-* attributes\nvar Data = <div data-index={12}>Some data</div>;\n\n// React components are ignored\nvar MyComponent = <App class=\"foo-bar\"/>;\nvar AnotherComponent = <Foo.bar for=\"bar\" />;\n\n// Custom web components are ignored\nvar MyElem = <div class=\"foo\" is=\"my-elem\"></div>;\nvar AtomPanel = <atom-panel class=\"foo\"></atom-panel>;\n```\n\n----------------------------------------\n\nTITLE: Custom Link Component Examples in JSX\nDESCRIPTION: Examples of incorrect and correct usage with custom Link components configured in shared settings.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-no-target-blank.md#2025-04-14_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nvar Hello = <Link target=\"_blank\" to=\"https://example.com/\"></Link>\nvar Hello = <Link target=\"_blank\" to={dynamicLink}></Link>\n```\n\n----------------------------------------\n\nTITLE: ESLint Rule Configuration Options\nDESCRIPTION: Configuration options for the ESLint rule that controls defaultProps sorting behavior.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/sort-default-props.md#2025-04-14_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n\"react/sort-default-props\": [<enabled>, {\n  \"ignoreCase\": <boolean>,\n}]\n```\n\n----------------------------------------\n\nTITLE: Enforcing State Initialization with Class Property - Correct Example\nDESCRIPTION: This snippet demonstrates the correct usage of class properties to initialize state, fulfilling the 'never' mode requirements of the ESLint rule.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/state-in-constructor.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nclass Foo extends React.Component {\n  state = { bar: 0 }\n  render() {\n    return <div>Foo</div>\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Correct JSX rendering with double NOT operator\nDESCRIPTION: Example of correct code that coerces array length to boolean using double NOT operator before using it in a condition.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-no-leaked-render.md#2025-04-14_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\nconst Component = ({ elements }) => {\n  return <div>{!!elements.length && <List elements={elements} />}</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of 'this' in React Stateless Functional Component\nDESCRIPTION: Examples of incorrect code that use 'this' to access props or context in a stateless functional component. This approach is invalid and likely caused by unfamiliarity with SFC syntax or missed references when converting class components.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/no-this-in-sfc.md#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Foo(props) {\n  return (\n    <div>{this.props.bar}</div>\n  );\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Foo(props) {\n  const { bar } = this.props;\n  return (\n    <div>{bar}</div>\n  );\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Foo(props, context) {\n  return (\n    <div>\n      {this.context.foo ? this.props.bar : ''}\n    </div>\n  );\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Foo(props, context) {\n  const { foo } = this.context;\n  const { bar } = this.props;\n  return (\n    <div>\n      {foo ? bar : ''}\n    </div>\n  );\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Foo(props) {\n  if (this.state.loading) {\n    return <Loader />;\n  }\n  return (\n    <div>\n      {this.props.bar}\n    </div>\n  );\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Foo(props) {\n  const { loading } = this.state;\n  const { bar } = this.props;\n  if (loading) {\n    return <Loader />;\n  }\n  return (\n    <div>\n      {bar}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Examples of Correct Usage of Unique Object ID in React Keys\nDESCRIPTION: This snippet demonstrates the correct practice of using a unique identifier from the data object as keys in React elements. Using object IDs as keys ensures stable identity for each component, which minimizes unnecessary component re-renders.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/no-array-index-key.md#2025-04-14_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nthings.map((thing) => (\n  <Hello key={thing.id} />\n));\n\nthings.map((thing) => (\n  React.cloneElement(thing, { key: thing.id })\n));\n\nthings.forEach((thing) => {\n  otherThings.push(<Hello key={thing.id} />);\n});\n\nthings.filter((thing) => {\n  otherThings.push(<Hello key={thing.id} />);\n});\n\nthings.some((thing) => {\n  otherThings.push(<Hello key={thing.id} />);\n});\n\nthings.every((thing) => {\n  otherThings.push(<Hello key={thing.id} />);\n});\n\nthings.find((thing) => {\n  otherThings.push(<Hello key={thing.id} />);\n});\n\nthings.findIndex((thing) => {\n  otherThings.push(<Hello key={thing.id} />);\n});\n\nthings.reduce((collection, thing) => (\n  collection.concat(<Hello key={thing.id} />)\n), []);\n\nthings.reduceRight((collection, thing) => (\n  collection.concat(<Hello key={thing.id} />)\n), []);\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage - Unused React State Properties\nDESCRIPTION: Examples showing React components with state properties that are defined but never used, which triggers the ESLint warning.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/no-unused-state.md#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nclass MyComponent extends React.Component {\n  state = { foo: 0 };\n  render() {\n    return <SomeComponent />;\n  }\n}\n\nvar UnusedGetInitialStateTest = createReactClass({\n  getInitialState: function() {\n    return { foo: 0 };\n  },\n  render: function() {\n    return <SomeComponent />;\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Correct JSX in Array.from() With Keys\nDESCRIPTION: Using Array.from() with a mapping function that creates React elements with proper key props.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-key.md#2025-04-14_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nArray.from([1, 2, 3], (x) => <Hello key={x}>{x}</Hello>);\n```\n\n----------------------------------------\n\nTITLE: HTML Tag Spreading Example with 'html' Option Set to 'ignore'\nDESCRIPTION: Example of correct JSX code when the 'html' option is set to 'ignore', allowing spread operators in HTML JSX tags.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-props-no-spreading.md#2025-04-14_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<img {...props} />\n```\n\n----------------------------------------\n\nTITLE: Correct Usage: defaultProps for Optional PropType in Stateless Component\nDESCRIPTION: This example shows correct usage where only the optional prop 'bar' has a default value, while the required prop 'foo' doesn't have a default.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/default-props-match-prop-types.md#2025-04-14_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nfunction MyStatelessComponent({ foo, bar }) {\n  return <div>{foo}{bar}</div>;\n}\n\nMyStatelessComponent.propTypes = {\n  foo: React.PropTypes.string.isRequired,\n  bar: React.PropTypes.string\n};\n\nMyStatelessComponent.defaultProps = {\n  bar: 'some default'\n};\n```\n\n----------------------------------------\n\nTITLE: Incorrect JSX Prop Spreading Examples\nDESCRIPTION: Examples of JSX code that violate the 'react/jsx-props-no-spreading' rule by using the spread operator for passing props to components.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-props-no-spreading.md#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<App {...props} />\n<MyCustomComponent {...props} some_other_prop={some_other_prop} />\n<img {...props} />\n```\n\n----------------------------------------\n\nTITLE: Correct JSX Bracket Spacing Examples with 'afterOpening: always'\nDESCRIPTION: Examples of JSX code that comply with the 'afterOpening: always' rule, showing proper spacing after the opening bracket of JSX elements.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-tag-spacing.md#2025-04-14_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\n< Hello></ Hello>\n< Hello firstName=\"John\"/>\n<\n  Hello\n  firstName=\"John\"\n  lastName=\"Smith\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Rule Configuration - JavaScript\nDESCRIPTION: Configuration examples for the rule, showing how to specify forbidden props and customize rule behavior.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/forbid-component-props.md#2025-04-14_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n{\n  \"propName\": \"someProp\",\n  \"allowedFor\": [\"SomeComponent\", \"AnotherComponent\"],\n  \"message\": \"Avoid using someProp except SomeComponent and AnotherComponent\"\n}\n```\n\nLANGUAGE: js\nCODE:\n```\n{\n  \"propName\": \"someProp\",\n  \"disallowedFor\": [\"SomeComponent\", \"AnotherComponent\"],\n  \"message\": \"Avoid using someProp for SomeComponent and AnotherComponent\"\n}\n```\n\nLANGUAGE: js\nCODE:\n```\n{\n  \"propNamePattern\": '**-**',\n  \"allowedFor\": ['div'],\n  \"message\": \"Avoid using kebab-case except div\"\n}\n```\n\nLANGUAGE: js\nCODE:\n```\n{\n  \"propNamePattern\": '**-**',\n  \"allowedForPatterns\": [\"*Component\"],\n  \"message\": \"Avoid using kebab-case except components that match the `*Component` pattern\"\n}\n```\n\nLANGUAGE: js\nCODE:\n```\n{\n  \"propName\": \"someProp\",\n  \"allowedForPatterns\": [\"*Component\"],\n  \"message\": \"Avoid using `someProp` except components that match the `*Component` pattern\"\n}\n```\n\nLANGUAGE: js\nCODE:\n```\n{\n  \"propName\": \"someProp\",\n  \"disallowedForPatterns\": [\"*Component\"],\n  \"message\": \"Avoid using `someProp` for components that match the `*Component` pattern\"\n}\n```\n\nLANGUAGE: js\nCODE:\n```\n{\n  \"propName\": \"someProp\",\n  \"allowedFor\": ['div'],\n  \"allowedForPatterns\": [\"*Component\"],\n  \"message\": \"Avoid using `someProp` except `div` and components that match the `*Component` pattern\"\n}\n```\n\n----------------------------------------\n\nTITLE: Examples of Correct React Method Usage\nDESCRIPTION: Shows the proper way to use React methods and their modern alternatives, including correct rendering approaches for different React versions and safe lifecycle methods.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/no-deprecated.md#2025-04-14_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n// when React < 18\nReactDOM.render(<MyComponent />, root);\n\n// when React is < 0.14\nReactDOM.findDOMNode(this.refs.foo);\n\nimport { PropTypes } from 'prop-types';\n\nUNSAFE_componentWillMount() { }\nUNSAFE_componentWillReceiveProps() { }\nUNSAFE_componentWillUpdate() { }\n\nReactDOM.createPortal(child, container);\n\nimport { createRoot } from 'react-dom/client';\nconst root = createRoot(container);\nroot.unmount();\n\nimport { hydrateRoot } from 'react-dom/client';\nconst root = hydrateRoot(container, <App/>);\n```\n\n----------------------------------------\n\nTITLE: Correct JSX Bracket Spacing Examples with 'beforeSelfClosing: always'\nDESCRIPTION: Examples of JSX code that comply with the 'beforeSelfClosing: always' rule, showing proper spacing before the closing bracket of self-closing tags.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-tag-spacing.md#2025-04-14_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<Hello />\n<Hello firstName=\"John\" />\n<Hello\n  firstName=\"John\"\n  lastName=\"Smith\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Correct JSX Indentation Examples with Various Configuration Options\nDESCRIPTION: Examples of JSX code with correct indentation that meets the rule requirements under different configuration options, including 2-space indentation, tab indentation, no indentation, and options for attributes and logical expressions.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-indent.md#2025-04-14_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n// 2 spaces indentation\n// [2, 2]\n<App>\n  <Hello />\n</App>\n\n// tab indentation\n// [2, 'tab']\n<App>\n  <Hello />\n</App>\n\n// no indentation\n// [2, 0]\n<App>\n<Hello />\n</App>\n\n// [2, 2, {checkAttributes: false}]\n<App render={\n  <Hello render={\n    (bar) => <div>hi</div>\n}\n  />\n  }>\n</App>\n\n// [2, 2, {indentLogicalExpressions: true}]\n<App>\n  {condition && (\n    <Hello />\n  )}\n</App>\n```\n\n----------------------------------------\n\nTITLE: Correct JSX rendering with ternary operator returning null\nDESCRIPTION: Example of correct code using a ternary operator with null as the fallback for conditional rendering.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-no-leaked-render.md#2025-04-14_snippet_15\n\nLANGUAGE: jsx\nCODE:\n```\nconst Component = ({ elements }) => {\n  return <div>{elements.length ? <List elements={elements} /> : null}</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of forwardRef Without ref Parameter\nDESCRIPTION: This example demonstrates a component wrapped with React.forwardRef that incorrectly omits the ref parameter. This pattern will trigger a warning from the rule since the component doesn't utilize the forwarded ref.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/forward-ref-uses-ref.md#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nvar React = require('react');\n\nvar Component = React.forwardRef((props) => (\n    <div />\n));\n```\n\n----------------------------------------\n\nTITLE: Valid Usage - All Methods Used in React Component\nDESCRIPTION: Example showing a React class component where all methods are properly used, including lifecycle methods and custom actions.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/no-unused-class-component-methods.md#2025-04-14_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nclass Foo extends React.Component {\n  static getDerivedStateFromError(error) {\n    return { hasError: true };\n  }\n  action() {}\n  componentDidMount() {\n    this.action();\n  }\n  render() {\n    return null;\n  }\n}\n});\n```\n\n----------------------------------------\n\nTITLE: Incorrect Input Element Usage in React JSX\nDESCRIPTION: Examples of incorrect implementations that violate the checked-requires-onchange-or-readonly rule by omitting onChange/readonly or mixing checked/defaultChecked properties.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/checked-requires-onchange-or-readonly.md#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<input type=\"checkbox\" checked />\n<input type=\"checkbox\" checked defaultChecked />\n<input type=\"radio\" checked defaultChecked />\n\nReact.createElement('input', { checked: false });\nReact.createElement('input', { type: 'checkbox', checked: true });\nReact.createElement('input', { type: 'checkbox', checked: true, defaultChecked: true });\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of dangerouslySetInnerHTML and Children in JSX\nDESCRIPTION: Examples showing proper usage where dangerouslySetInnerHTML and children are used separately in different JSX components.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/no-danger-with-children.md#2025-04-14_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<div dangerouslySetInnerHTML={{ __html: \"HTML\" }} />\n\n<Hello dangerouslySetInnerHTML={{ __html: \"HTML\" }} />\n\n<div>\n  Children\n</div>\n\n<Hello>\n  Children\n</Hello>\n\n```\n\n----------------------------------------\n\nTITLE: Correct Props Sorting Examples in JSX\nDESCRIPTION: Examples showing correct alphabetical ordering of props, including spread operator usage.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-sort-props.md#2025-04-14_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Hello firstName=\"John\" lastName=\"Smith\" />;\n<Hello tel={5555555} {...this.props} firstName=\"John\" lastName=\"Smith\" />;\n```\n\n----------------------------------------\n\nTITLE: Rule Configuration Options\nDESCRIPTION: ESLint configuration options for the react/no-multi-comp rule, showing how to enable the rule and configure the ignoreStateless option.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/no-multi-comp.md#2025-04-14_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n...\n\"react/no-multi-comp\": [<enabled>, { \"ignoreStateless\": <boolean> }]\n...\n```\n\n----------------------------------------\n\nTITLE: AllowLeadingUnderscore Option Example\nDESCRIPTION: Examples of valid component names with leading underscores when allowLeadingUnderscore option is enabled.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-pascal-case.md#2025-04-14_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<_AllowedComponent />\n<_AllowedComponent>\n  <div />\n</_AllowedComponent>\n```\n\n----------------------------------------\n\nTITLE: Correct JSX with Single Space Between Props\nDESCRIPTION: This example demonstrates correctly formatted JSX with exactly one space between multiple props.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-props-no-multi-spaces.md#2025-04-14_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<App very cozy />\n```\n\n----------------------------------------\n\nTITLE: Correct React Context Objects With displayName\nDESCRIPTION: Examples of React Context objects that correctly implement the displayName property when checkContextObjects is enabled.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/display-name.md#2025-04-14_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nconst Hello = React.createContext();\nHello.displayName = \"HelloContext\";\n```\n\nLANGUAGE: jsx\nCODE:\n```\nconst Hello = createContext();\nHello.displayName = \"HelloContext\";\n```\n\n----------------------------------------\n\nTITLE: Configuring JSX Equals Spacing Rule in ESLint\nDESCRIPTION: JSON configuration example for the 'react/jsx-equals-spacing' rule in ESLint. This configuration enforces spaces around equal signs in JSX attributes by setting the rule to error level (2) with the 'always' option.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-equals-spacing.md#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"react/jsx-equals-spacing\": [2, \"always\"]\n```\n\n----------------------------------------\n\nTITLE: Incorrect String Ref with componentDidMount\nDESCRIPTION: This example demonstrates incorrect usage of string refs with `componentDidMount`. The `ref` attribute is assigned a string value, which is considered legacy.  The component attempts to access the ref in `componentDidMount` using `this.refs.hello`.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/no-string-refs.md#2025-04-14_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nvar Hello = createReactClass({\n  componentDidMount: function() {\n    var component = this.refs.hello;\n    // ...do something with component\n  },\n  render: function() {\n    return <div ref=\"hello\">Hello, world.</div>;\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Incorrect TypeScript Props Usage - Unused Middlename\nDESCRIPTION: TypeScript example showing a React component with an unused middlename prop type, which violates the rule.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/no-unused-prop-types.md#2025-04-14_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\ntype Props = {\n  firstname: string;\n  middlename: string; // middlename is never used by the Hello component\n  lastname: string;\n}\n\nclass Hello extends React.Component<Props> {\n  render() {\n    return <div>Hello {this.props.firstname} {this.props.lastname}</div>;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of Non-Void DOM Elements with Children in React JSX\nDESCRIPTION: Examples of correct code that comply with the rule by using non-void DOM elements to contain children or use dangerouslySetInnerHTML.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/void-dom-elements-no-children.md#2025-04-14_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<div>Children</div>\n<div children='Children' />\n<div dangerouslySetInnerHTML={{ __html: 'HTML' }} />\nReact.createElement('div', undefined, 'Children')\nReact.createElement('div', { children: 'Children' })\nReact.createElement('div', { dangerouslySetInnerHTML: { __html: 'HTML' } })\n```\n\n----------------------------------------\n\nTITLE: React Component Without DefaultProps Example\nDESCRIPTION: Example demonstrating potential issues when using default parameters instead of defaultProps.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/require-default-props.md#2025-04-14_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst HelloWorld = ({ name = 'John Doe' }) => (\n  <h1>Hello, {name.first} {name.last}!</h1>\n);\n\nHelloWorld.propTypes = {\n  name: PropTypes.shape({\n    first: PropTypes.string,\n    last: PropTypes.string,\n  })\n};\n```\n\n----------------------------------------\n\nTITLE: Incorrect React Component Implementation\nDESCRIPTION: Examples of React components that violate the optimization rule by not implementing shouldComponentUpdate.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/require-optimization.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nclass YourComponent extends React.Component {\n\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncreateReactClass({\n});\n```\n\n----------------------------------------\n\nTITLE: Correct Examples with Advanced Exceptions Configuration\nDESCRIPTION: Examples of JSX code that comply with the rule when using advanced exceptions configuration.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-props-no-spreading.md#2025-04-14_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\nconst {src, alt} = props;\nconst {one_prop, two_prop} = otherProps;\n<img src={src} alt={alt} />\n<MyCustomComponent {...otherProps} />\n```\n\n----------------------------------------\n\nTITLE: Rule Configuration Example\nDESCRIPTION: Basic configuration example for the destructuring-assignment rule.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/destructuring-assignment.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n\"react/destructuring-assignment\": [<enabled>, 'always']\n```\n\n----------------------------------------\n\nTITLE: Passing JSX directly as a prop\nDESCRIPTION: This example shows a valid case where JSX is directly passed as a prop. Since it's JSX and not a component definition within the render function, it avoids the issues of re-creation and state loss. The rule correctly identifies this as a safe pattern.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/no-unstable-nested-components.md#2025-04-14_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Component() {\n  return <SomeComponent footer={<div />} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Component Option Correct Examples\nDESCRIPTION: Examples of correct component usage when the component option is enabled.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/self-closing-comp.md#2025-04-14_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nvar contentContainer = <div className=\"content\"></div>;\n\nvar intentionalSpace = <div>{' '}</div>;\n\nvar HelloJohn = <Hello name=\"John\" />;\n\nvar HelloJohnCompound = <Hello.Compound name=\"John\" />;\n\nvar Profile = <Hello name=\"John\"><img src=\"picture.png\" /></Hello>;\n\nvar ProfileCompound = <Hello.Compound name=\"John\"><img src=\"picture.png\" /></Hello.Compound>;\n```\n\n----------------------------------------\n\nTITLE: Correct code examples with different configurations\nDESCRIPTION: Examples of correct code based on different rule configurations, showing properly formatted JSX for both tag-aligned and line-aligned options.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-closing-tag-location.md#2025-04-14_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n// 'jsx-closing-tag-location': 1\n// 'jsx-closing-tag-location': [1, 'tag-aligned']\n// 'jsx-closing-tag-location': [1, {\"location\":'tag-aligned'}]\n<Say\n  firstName=\"John\"\n  lastName=\"Smith\">\n  Hello\n</Say>;\n\n// 'jsx-closing-tag-location': [1, 'tag-aligned']\n// 'jsx-closing-tag-location': [1, {\"location\":'tag-aligned'}]\nconst App = <Bar>\n  Foo\n            </Bar>;\n\n// 'jsx-closing-tag-location': [1, 'line-aligned']\n// 'jsx-closing-tag-location': [1, {\"location\":'line-aligned'}]\nconst App = <Bar>\n  Foo\n</Bar>;\n\n```\n\n----------------------------------------\n\nTITLE: JSX with Correct Curly Spacing (Always)\nDESCRIPTION: Examples of correct JSX code when the 'react/jsx-curly-spacing' rule is configured with 'when: always'. These examples show proper spacing inside curly braces.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-curly-spacing.md#2025-04-14_snippet_4\n\nLANGUAGE: JSX\nCODE:\n```\n<Hello name={ firstname } />;\n<Hello name={ {firstname: 'John', lastname: 'Doe'} } />;\n<Hello name={\n  firstname\n} />;\n<Hello>{ firstname }</Hello>;\n<Hello>{firstname}</Hello>;\n<Hello>{\n  firstname\n}</Hello>;\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Invalid Usage of Default Props in React Components\nDESCRIPTION: This snippet shows examples of incorrect usage of default props in React functional components. These patterns can lead to unnecessary rerenders and potential performance issues.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/no-object-type-as-default-prop.md#2025-04-14_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Component({\n  items = [],\n}) {}\n\nconst Component = ({\n  items = {},\n}) => {}\n\nconst Component = ({\n  items = () => {},\n}) => {}\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of React Fragments in JSX (Element Mode)\nDESCRIPTION: These examples demonstrate correct usage of React fragments in JSX when the rule is set to 'element' mode. It shows the standard form both with and without a key attribute.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-fragments.md#2025-04-14_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<React.Fragment><Foo /></React.Fragment>\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<React.Fragment key=\"key\"><Foo /></React.Fragment>\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of shouldComponentUpdate with PureComponent\nDESCRIPTION: Examples demonstrating incorrect patterns where shouldComponentUpdate is defined in classes extending React.PureComponent, which is redundant since PureComponent already implements shallow comparison.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/no-redundant-should-component-update.md#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nclass Foo extends React.PureComponent {\n  shouldComponentUpdate() {\n    // do check\n  }\n\n  render() {\n    return <div>Radical!</div>\n  }\n}\n\nfunction Bar() {\n  return class Baz extends React.PureComponent {\n    shouldComponentUpdate() {\n      // do check\n    }\n\n    render() {\n      return <div>Groovy!</div>\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Examples with Exceptions Configuration\nDESCRIPTION: Examples of JSX code that comply with the rule when exceptions are configured, allowing spreading only on specified components.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-props-no-spreading.md#2025-04-14_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nconst {src, alt} = props;\n<Image {...props} />\n<img {...props} />\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage with disallow-in-func Mode (React JSX)\nDESCRIPTION: This example shows usage that becomes incorrect when the 'disallow-in-func' mode is enabled, prohibiting setState even within callbacks.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/no-did-mount-set-state.md#2025-04-14_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nvar Hello = createReactClass({\n  componentDidMount: function() {\n    this.onMount(function callback(newName) {\n      this.setState({\n        name: newName\n      });\n    });\n  },\n  render: function() {\n    return <div>Hello {this.state.name}</div>;\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Correct JSX Bracket Spacing Examples with 'beforeSelfClosing: never'\nDESCRIPTION: Examples of JSX code that comply with the 'beforeSelfClosing: never' rule, showing proper spacing (or lack thereof) before the closing bracket of self-closing tags.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-tag-spacing.md#2025-04-14_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\n<Hello/>\n<Hello firstname=\"John\"/>\n<Hello\n  firstName=\"John\"\n  lastName=\"Smith\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Incorrect Component Definitions with Various Rule Configurations\nDESCRIPTION: Examples of component definitions that would be flagged as incorrect with specific rule configurations, showing how different settings affect what's considered valid.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/function-component-definition.md#2025-04-14_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n// only function declarations for named components\n// [2, { \"namedComponents\": \"function-declaration\" }]\nconst Component = function (props) {\n  return <div />;\n};\n\nconst Component = (props) => {\n  return <div />;\n};\n\n// only function expressions for named components\n// [2, { \"namedComponents\": \"function-expression\" }]\nfunction Component (props) {\n  return <div />;\n};\n\nconst Component = (props) => {\n  return <div />;\n};\n\n// only arrow functions for named components\n// [2, { \"namedComponents\": \"arrow-function\" }]\nfunction Component (props) {\n  return <div />;\n};\n\nconst Component = function (props) {\n  return <div />;\n};\n\n// only function expressions for unnamed components\n// [2, { \"unnamedComponents\": \"function-expression\" }]\nfunction getComponent () {\n  return (props) => {\n    return <div />;\n  };\n}\n\n// only arrow functions for unnamed components\n// [2, { \"unnamedComponents\": \"arrow-function\" }]\nfunction getComponent () {\n  return function (props) {\n    return <div />;\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Style Prop Usage with React.createElement\nDESCRIPTION: Examples of correct style prop usage with React.createElement() method using object values.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/style-prop-object.md#2025-04-14_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nReact.createElement(\"div\", { style: { color: 'red' }});\n\nReact.createElement(\"Hello\", { style: { color: 'red' }});\n\nconst styles = { height: '100px' };\nReact.createElement(\"div\", { style: styles });\n```\n\n----------------------------------------\n\nTITLE: Correct JSX Spacing Examples with 'always' Option\nDESCRIPTION: Examples of JSX code that comply with the 'react/jsx-equals-spacing' rule when configured with the 'always' option. These examples show correct usage with spaces on both sides of equal signs.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-equals-spacing.md#2025-04-14_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<Hello name = {firstname} />;\n<Hello name />;\n<Hello {...props} />;\n```\n\n----------------------------------------\n\nTITLE: ES6 Class Method Binding Example\nDESCRIPTION: Example showing how to properly bind methods in ES6 class components.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-no-bind.md#2025-04-14_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nclass Foo extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this._onClick = this._onClick.bind(this);\n  }\n  render() {\n    return (\n      <div onClick={this._onClick}>\n        Hello!\n      </div>\n    );\n  }\n  _onClick() {\n    // Do whatever you like, referencing \"this\" as appropriate\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of isMounted in React Component\nDESCRIPTION: Example showing incorrect implementation using isMounted check within a setTimeout callback, which is considered an anti-pattern.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/no-is-mounted.md#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nvar Hello = createReactClass({\n  handleClick: function() {\n    setTimeout(function() {\n      if (this.isMounted()) {\n        return;\n      }\n    });\n  },\n  render: function() {\n    return <div onClick={this.handleClick.bind(this)}>Hello</div>;\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Correct JSX Component Naming\nDESCRIPTION: Examples of properly formatted component names following PascalCase convention.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-pascal-case.md#2025-04-14_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<div />\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<TestComponent />\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<TestComponent>\n  <div />\n</TestComponent>\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<CSSTransitionGroup />\n```\n\n----------------------------------------\n\nTITLE: Correct Usage with Aliases - Non-React Class\nDESCRIPTION: Example showing allowed usage of lifecycle method aliases in a non-React class when checkAliases is true.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/no-unsafe.md#2025-04-14_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nclass Foo extends Bar {\n  componentWillMount() {}\n  componentWillReceiveProps() {}\n  componentWillUpdate() {}\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of React Fragments in JSX (Syntax Mode)\nDESCRIPTION: These examples show correct usage of React fragments in JSX when the rule is set to 'syntax' mode. It includes the shorthand syntax and the standard form when a key is required.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-fragments.md#2025-04-14_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<><Foo /></>\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<React.Fragment key=\"key\"><Foo /></React.Fragment>\n```\n\n----------------------------------------\n\nTITLE: Correct Single Component Definition Example\nDESCRIPTION: Example showing correct usage where components are properly separated, with one component being imported from another file.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/no-multi-comp.md#2025-04-14_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nvar Hello = require('./components/Hello');\n\nvar HelloJohn = createReactClass({\n  render: function() {\n    return <Hello name=\"John\" />;\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Incorrect JSX Bracket Spacing Examples with 'beforeClosing: always'\nDESCRIPTION: Examples of JSX code that violate the 'beforeClosing: always' rule, which requires a space before the closing bracket of JSX elements.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-tag-spacing.md#2025-04-14_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\n<Hello></Hello>\n<Hello></Hello >\n<Hello ></Hello>\n```\n\n----------------------------------------\n\nTITLE: Unfixable TypeScript Patterns with Type Annotations\nDESCRIPTION: Examples of TypeScript patterns that cannot be auto-fixed by the rule due to syntax constraints related to type annotations and type parameters.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/function-component-definition.md#2025-04-14_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n// function expressions and arrow functions that have type annotations cannot be autofixed to function declarations\n// [2, { \"namedComponents\": \"function-declaration\" }]\nconst Component: React.FC<Props> = function (props) {\n  return <div />;\n};\n\nconst Component: React.FC<Props> = (props) => {\n  return <div />;\n};\n\n// function components with one unconstrained type parameter cannot be autofixed to arrow functions because the syntax conflicts with jsx\n// [2, { \"namedComponents\": \"arrow-function\" }]\nfunction Component<T>(props: Props<T>) {\n  return <div />;\n};\n\nconst Component = function <T>(props: Props<T>) {\n  return <div />;\n};\n\n// [2, { \"unnamedComponents\": \"arrow-function\" }]\nfunction getComponent() {\n  return function <T>(props: Props<T>) => {\n    return <div />;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect JSX in Array.from() Without Keys\nDESCRIPTION: Using Array.from() with a mapping function that creates React elements without key props.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-key.md#2025-04-14_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nArray.from([1, 2, 3], (x) => <Hello>{x}</Hello>);\n```\n\n----------------------------------------\n\nTITLE: Correct JSX Bracket Spacing Examples with 'beforeSelfClosing: proportional-always'\nDESCRIPTION: Examples of JSX code that comply with the 'beforeSelfClosing: proportional-always' rule, showing proper spacing before the closing bracket of multi-line self-closing tags.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-tag-spacing.md#2025-04-14_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\n<Hello\n  firstName=\"John\"\n  lastName=\"Smith\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Correct JSX element placement examples in React\nDESCRIPTION: Examples of code that comply with the 'react/jsx-one-expression-per-line' rule, showing each JSX element or expression on a separate line.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-one-expression-per-line.md#2025-04-14_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<App>\n  <Hello />\n</App>\n\n<App>\n  <Hello>\n  </Hello>\n</App>\n\n<App>\n  <Hello />\n  World\n</App>\n\n<App>\n  <Hello />\n  { 'World' }\n</App>\n\n<App>\n  <Hello />\n  { this.world() }\n</App>\n\n<App>\n  { 'Hello' }\n  { ' ' }\n  { 'World' }\n</App>\n\n<App\n  foo\n>\n  <Hello />\n</App>\n\n<App>\n  <Hello\n    foo\n  />\n</App>\n\n<App>\n  <Hello1 />\n  <Hello2 />\n  <Hello3 />\n</App>\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint Rule for React Fragments in JavaScript\nDESCRIPTION: This snippet shows how to configure the 'react/jsx-fragments' rule in an ESLint configuration file. The rule can be enabled and a mode can be specified.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-fragments.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n...\n\"react/jsx-fragments\": [<enabled>, <mode>]\n...\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of setState in Callback (React JSX)\nDESCRIPTION: This example shows correct usage of setState within a callback function in componentDidMount, which is allowed by the rule.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/no-did-mount-set-state.md#2025-04-14_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nvar Hello = createReactClass({\n  componentDidMount: function() {\n    this.onMount(function callback(newName) {\n      this.setState({\n        name: newName\n      });\n    });\n  },\n  render: function() {\n    return <div>Hello {this.state.name}</div>;\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Safe Spread Attributes Usage in JSX\nDESCRIPTION: Examples of correct usage of spread attributes with proper security overrides.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-no-target-blank.md#2025-04-14_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<a {...unsafeProps} rel=\"noreferrer\"></a>\n<a {...unsafeProps} target=\"_self\"></a>\n<a {...unsafeProps} href=\"/some-page\"></a>\n```\n\n----------------------------------------\n\nTITLE: Correct Usage with 'never' Setting\nDESCRIPTION: Examples of code that comply with the rule when configured with 'never' setting.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/destructuring-assignment.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst MyComponent = (props) => {\n  return (<div id={props.id} />)\n};\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst Foo = class extends React.PureComponent {\n  render() {\n    return <div>{this.state.title}</div>;\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Correct Static PropTypes\nDESCRIPTION: Example showing correctly ordered static propTypes in a React class component\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/sort-prop-types.md#2025-04-14_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nclass Component extends React.Component {\n  static propTypes = {\n    a: PropTypes.any,\n    b: PropTypes.any,\n    c: PropTypes.any\n  }\n  render() {\n    return <div />;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Invalid IFrame Usage Without Sandbox Attribute in React\nDESCRIPTION: Examples of iframe implementations that will trigger warnings due to missing sandbox attribute. Shows both JSX syntax and React.createElement() usage.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/iframe-missing-sandbox.md#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nvar React = require('react');\n\nvar Frame = () => (\n    <div>\n        <iframe></iframe>\n        {React.createElement('iframe')}\n    </div>\n);\n```\n\n----------------------------------------\n\nTITLE: Incorrect JSX Bracket Spacing Examples with 'closingSlash: always'\nDESCRIPTION: Examples of JSX code that violate the 'closingSlash: always' rule, which requires spaces between the closing slash and angle bracket in self-closing tags or closing tags.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-tag-spacing.md#2025-04-14_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Hello/>\n<Goodbye></Goodbye>\n```\n\n----------------------------------------\n\nTITLE: Incorrect PropTypes Declaration - Basic Example\nDESCRIPTION: Example showing incorrectly ordered propTypes in a React class component using createReactClass\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/sort-prop-types.md#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nvar Component = createReactClass({\n  propTypes: {\n    z: PropTypes.number,\n    a: PropTypes.any,\n    b: PropTypes.string\n  },\n...\n});\n```\n\n----------------------------------------\n\nTITLE: Correct JSX Child Element Spacing - Explicit Lack of Space\nDESCRIPTION: Another example of correct JSX usage where the lack of spacing between text and a link element is made explicit using an empty comment to prevent automatic space insertion.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-child-element-spacing.md#2025-04-14_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<div>\n  Lack of spacing is{/*\n  */}<a>explicit</a>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint Rule for React Component Class Syntax\nDESCRIPTION: Shows how to configure the 'react/prefer-es6-class' rule in ESLint. The rule takes two parameters: enabled status and mode (always or never).\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/prefer-es6-class.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n\"react/prefer-es6-class\": [<enabled>, <mode>]\n```\n\n----------------------------------------\n\nTITLE: Correct JSX Usage Examples without javascript: URLs\nDESCRIPTION: Examples showing correct usage that won't trigger the ESLint rule warning.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-no-script-url.md#2025-04-14_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Foo href=\"javascript:\"></Foo>\n<a href={\"javascript:\"}></a>\n```\n\n----------------------------------------\n\nTITLE: Incorrect JSX rendering with count and a span element\nDESCRIPTION: Example of problematic code where a numeric count variable could lead to rendering 0 instead of the intended span element.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-no-leaked-render.md#2025-04-14_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nconst Component = ({ count }) => {\n  return <div>{count && <span>There are {count} results</span>}</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage - Class Component Example\nDESCRIPTION: Example of a React component that should be converted to a stateless functional component since it only renders props.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/prefer-stateless-function.md#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nvar Hello = createReactClass({\n  render: function() {\n    return <div>Hello {this.props.name}</div>;\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Correct JSX closing tag location - properly aligned\nDESCRIPTION: Example of correct code where the closing tag is on its own line and properly aligned with the opening tag.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-closing-tag-location.md#2025-04-14_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Hello>\n  marklar\n</Hello>\n```\n\n----------------------------------------\n\nTITLE: Correct JSX Child Element Spacing - Explicit Space\nDESCRIPTION: An example of correct JSX usage where spacing between text and a link element is made explicit using a JSX expression containing a space character.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-child-element-spacing.md#2025-04-14_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<div>\n  Spacing is\n  {' '}\n  <a>explicit</a>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Incorrect Multiple Component Definition Example\nDESCRIPTION: Example showing incorrect usage where multiple React components are defined in the same file, which violates the rule.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/no-multi-comp.md#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nvar Hello = createReactClass({\n  render: function() {\n    return <div>Hello {this.props.name}</div>;\n  }\n});\n\nvar HelloJohn = createReactClass({\n  render: function() {\n    return <Hello name=\"John\" />;\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Incorrect usage of ReactDOM.render return value in JSX\nDESCRIPTION: This snippet demonstrates an incorrect way of using ReactDOM.render() by capturing its return value. This approach is discouraged as it may break in future React versions.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/no-render-return-value.md#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst inst = ReactDOM.render(<App />, document.body);\ndoSomethingWithInst(inst);\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage: defaultProps for Non-existent PropType with Static Properties\nDESCRIPTION: This example shows incorrect usage with static class properties where 'baz' has a default value but no PropType definition.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/default-props-match-prop-types.md#2025-04-14_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nclass Greeting extends React.Component {\n  render() {\n    return (\n      <h1>Hello, {this.props.foo} {this.props.bar}</h1>\n    );\n  }\n\n  static propTypes = {\n    foo: React.PropTypes.string,\n    bar: React.PropTypes.string.isRequired\n  };\n\n  static defaultProps = {\n    baz: \"baz\"\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Invalid defaultProps Sorting Examples in React Components\nDESCRIPTION: Examples of React components with incorrectly sorted defaultProps declarations that would trigger warnings from the ESLint rule.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/sort-default-props.md#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nvar Component = createReactClass({\n...\n  getDefaultProps: function() {\n    return {\n      z: \"z\",\n      a: \"a\",\n      b: \"b\"\n    };\n  },\n...\n});\n\nclass Component extends React.Component {\n  ...\n}\nComponent.defaultProps = {\n  z: \"z\",\n  a: \"a\",\n  b: \"b\"\n};\n\nclass Component extends React.Component {\n  static defaultProps = {\n    z: \"z\",\n    y: \"y\",\n    a: \"a\"\n  }\n  render() {\n    return <div />;\n  }\n}\n\nconst Component = (props) => (...);\nComponent.defaultProps = {\n  z: \"z\",\n  y: \"y\",\n  a: \"a\"\n};\n\nconst defaults = {\n  b: \"b\"\n};\nconst types = {\n  a: PropTypes.string,\n  b: PropTypes.string,\n  c: PropTypes.string'\n};\nfunction StatelessComponentWithSpreadInPropTypes({ a, b, c }) {\n  return <div>{a}{b}{c}</div>;\n}\nStatelessComponentWithSpreadInPropTypes.propTypes = types;\nStatelessComponentWithSpreadInPropTypes.defaultProps = {\n  c: \"c\",\n  a: \"a\",\n  ...defaults,\n};\n\nexport default class ClassWithSpreadInPropTypes extends BaseClass {\n  static propTypes = {\n    a: PropTypes.string,\n    b: PropTypes.string,\n    c: PropTypes.string,\n    d: PropTypes.string,\n    e: PropTypes.string,\n    f: PropTypes.string\n  }\n  static defaultProps = {\n    b: \"b\",\n    a: \"a\",\n    ...c.defaultProps,\n    f: \"f\",\n    e: \"e\",\n    ...d.defaultProps\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Correct JSX with Single Space After Tag Name\nDESCRIPTION: This example shows correctly formatted JSX with exactly one space between the component name and prop.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-props-no-multi-spaces.md#2025-04-14_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<App cozy />\n```\n\n----------------------------------------\n\nTITLE: Allowing component creation inside props when `allowAsProps` is true\nDESCRIPTION: This snippet shows an example where component creation is allowed inside component props if the prop is called as a function, which `allowAsProps` option can enable by being set to `true`. In this example, `footer` prop is used to pass the component. It is critical that `footer` is used as a function rather than a react component.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/no-unstable-nested-components.md#2025-04-14_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nfunction SomeComponent(props) {\n  return <div>{props.footer()}</div>;\n}\n\nfunction Component() {\n  return (\n    <div>\n      <SomeComponent footer={() => <div />} />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Default JSX Bracket Spacing Options in ESLint\nDESCRIPTION: Default configuration object for the ESLint rule that enforces JSX bracket spacing. It specifies options for closing slashes, spaces before self-closing tags, after opening tags, and before closing tags.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-tag-spacing.md#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"closingSlash\": \"never\",\n  \"beforeSelfClosing\": \"always\",\n  \"afterOpening\": \"never\",\n  \"beforeClosing\": \"allow\"\n}\n```\n\n----------------------------------------\n\nTITLE: Correct React Component Implementation with shouldComponentUpdate\nDESCRIPTION: Examples of React components properly implementing the shouldComponentUpdate method or using PureRenderMixin.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/require-optimization.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nclass YourComponent extends React.Component {\n  shouldComponentUpdate () {\n    return false;\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncreateReactClass({\n  shouldComponentUpdate: function () {\n    return false;\n  }\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncreateReactClass({\n  mixins: [PureRenderMixin]\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\n@reactMixin.decorate(PureRenderMixin)\ncreateReactClass({\n\n});\n```\n\n----------------------------------------\n\nTITLE: Correct JSX Props Indentation Examples\nDESCRIPTION: Examples of proper prop indentation that comply with various rule configurations, including different indentation styles and ternary operator handling.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-indent-props.md#2025-04-14_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n// 2 spaces indentation\n// [2, 2]\n<Hello\n  firstName=\"John\"\n/>\n\n<Hello\n  firstName=\"John\" />\n\n// tab indentation\n// [2, 'tab']\n<Hello\n  firstName=\"John\"\n/>\n\n// no indentation\n// [2, 0]\n<Hello\nfirstName=\"John\"\n/>\n\n// aligned with first prop\n// [2, 'first']\n<Hello\n  firstName=\"John\"\n  lastName=\"Doe\"\n/>\n\n<Hello\n       firstName=\"John\"\n       lastName=\"Doe\"\n/>\n\n<Hello firstName=\"Jane\"\n       lastName=\"Doe\" />\n\n// indent level increase on ternary operator (default setting)\n// [2, 2]\n? <Hello\n    firstName=\"John\"\n    lastName=\"Doe\"\n  />\n\n// no indent level increase on ternary operator\n// [2, { indentMode: 2, ignoreTernaryOperator: true} ]\n? <Hello\n  firstName=\"John\"\n  lastName=\"Doe\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Incorrect Event Handler Ordering Examples\nDESCRIPTION: Examples showing incorrect placement of event handlers after render method\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/sort-comp.md#2025-04-14_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nvar Hello = createReactClass({\n  render: function() {\n    return <div>Hello</div>;\n  },\n  onClick: function() {}\n});\n```\n\nLANGUAGE: jsx\nCODE:\n```\nclass Hello extends React.Component {\n  render() {\n    return <div>Hello</div>;\n  }\n  onClick = this.onClick.bind(this);\n  onClick() {}\n}\n```\n\n----------------------------------------\n\nTITLE: Maximum Props Example - Correct\nDESCRIPTION: Example showing correct usage with maximum prop limit set to 2.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-max-props-per-line.md#2025-04-14_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n// [1, { \"maximum\": 2 }]\n<Hello\n  firstName=\"John\" lastName=\"Smith\"\n  tel={5555555}\n/>;\n```\n\n----------------------------------------\n\nTITLE: Correct Examples with ignoreTranspilerName Option\nDESCRIPTION: Examples of React components that correctly implement displayName when the ignoreTranspilerName option is set to true.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/display-name.md#2025-04-14_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nvar Hello = createReactClass({\n  displayName: 'Hello',\n\n  render: function() {\n    return <div>Hello {this.props.name}</div>;\n  }\n});\nmodule.exports = Hello;\n```\n\nLANGUAGE: jsx\nCODE:\n```\nexport default class Hello extends React.Component {\n  render() {\n    return <div>Hello {this.props.name}</div>;\n  }\n}\nHello.displayName = 'Hello';\n```\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function Hello({ name }) {\n  return <div>Hello {name}</div>;\n}\nHello.displayName = 'Hello';\n```\n\n----------------------------------------\n\nTITLE: Emotion Library Configuration Example\nDESCRIPTION: Example configuration for using the rule with the Emotion library, showing how to ignore the css prop.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/no-unknown-property.md#2025-04-14_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n...\n\"react/no-unknown-property\": ['error', { ignore: ['css'] }]\n...\n```\n\n----------------------------------------\n\nTITLE: Incorrect Props Validation Example in TypeScript\nDESCRIPTION: Example showing incorrect props validation in a TypeScript React component where props interface doesn't match usage.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/prop-types.md#2025-04-14_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\ninterface Props {\n  age: number\n}\nfunction Hello({ name }: Props) {\n  return <div>Hello {name}</div>;\n  // 'name' type is missing in props validation\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Boolean Prop Naming with TypeScript\nDESCRIPTION: Example of correct boolean prop naming following the convention with 'is' prefix using TypeScript type definitions.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/boolean-prop-naming.md#2025-04-14_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\ntype Props = {\n  isEnabled: boolean\n}\nconst Hello = (props: Props) => <div />\n```\n\n----------------------------------------\n\nTITLE: AllowNamespace Option Example\nDESCRIPTION: Examples of valid namespaced component names when allowNamespace option is enabled.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-pascal-case.md#2025-04-14_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<Allowed.div />\n<TestComponent.p />\n```\n\n----------------------------------------\n\nTITLE: Valid React Component Usage Without Namespaces\nDESCRIPTION: Examples of correct React component usage without namespace prefixes that comply with the rule.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/no-namespace.md#2025-04-14_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<TestComponent />\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<testComponent />\n```\n\n----------------------------------------\n\nTITLE: Correct Props Validation Example in Flow\nDESCRIPTION: Example demonstrating proper props validation in a Flow-typed React component.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/prop-types.md#2025-04-14_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\ntype Props = {\n  name: string\n}\nclass Hello extends React.Component<Props> {\n  render() {\n    return <div>Hello {this.props.name}</div>;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Correct JSX with Selective Newlines\nDESCRIPTION: Example of JSX code that complies with the 'react/jsx-newline' rule when configured with { \"prevent\": true, \"allowMultilines\": true }. It demonstrates proper newline usage between single-line and multi-line JSX elements and expressions.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-newline.md#2025-04-14_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<div>\n  {showSomething === true && <Something />}\n\n  <Button>Button 3</Button>\n\n  {showSomethingElse === true ? (\n    <SomethingElse />\n  ) : (\n    <ErrorMessage />\n  )}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Allowing component creation inside props with render prefix\nDESCRIPTION: This code shows how component creation is permitted inside props if the prop name begins with \"render\" by default. In this example, `renderFooter` prop is used to pass the component. However, it's important to note that `renderFooter` should be called as a function, rather than be used as a React element.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/no-unstable-nested-components.md#2025-04-14_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nfunction SomeComponent(props) {\n  return <div>{props.renderFooter()}</div>;\n}\n\nfunction Component() {\n  return (\n    <div>\n      <SomeComponent renderFooter={() => <div />} />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Correct JSX element placement with 'literal' option in React\nDESCRIPTION: Example of code that complies with the 'react/jsx-one-expression-per-line' rule when the 'allow' option is set to 'literal'.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-one-expression-per-line.md#2025-04-14_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<App>Hello</App>\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of findDOMNode in React Component\nDESCRIPTION: Example showing incorrect implementation using findDOMNode, which should be avoided as it will be deprecated. The code demonstrates direct DOM manipulation using findDOMNode in componentDidMount.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/no-find-dom-node.md#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nclass MyComponent extends Component {\n  componentDidMount() {\n    findDOMNode(this).scrollIntoView();\n  }\n  render() {\n    return <div />\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Correct JSX with Newlines\nDESCRIPTION: Example of JSX code that complies with the 'react/jsx-newline' rule when configured with { \"prevent\": false }. It demonstrates proper spacing between JSX elements and expressions.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-newline.md#2025-04-14_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<div>\n  <Button>{data.label}</Button>\n\n  <List />\n\n  <Button>\n    <IconPreview />\n    Button 2\n\n    <span></span>\n  </Button>\n\n  {showSomething === true && <Something />}\n\n  <Button>Button 3</Button>\n\n  {showSomethingElse === true ? (\n    <SomethingElse />\n  ) : (\n    <ErrorMessage />\n  )}\n</div>\n```\n\n----------------------------------------\n\nTITLE: ESLint Rule Configuration\nDESCRIPTION: Shows the required ESLint configuration to enable exact prop type checking with propWrapperFunctions.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/prefer-exact-props.md#2025-04-14_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"settings\": {\n    \"propWrapperFunctions\": [\n      {\"property\": \"exact\", \"exact\": true}\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage - Create React Class with Unsafe Methods\nDESCRIPTION: Example showing incorrect usage of unsafe lifecycle methods using createReactClass.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/no-unsafe.md#2025-04-14_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst Foo = createReactClass({\n  UNSAFE_componentWillMount: function() {},\n  UNSAFE_componentWillReceiveProps: function() {},\n  UNSAFE_componentWillUpdate: function() {}\n});\n```\n\n----------------------------------------\n\nTITLE: Correct JSX with consistent linebreaks (consistent configuration)\nDESCRIPTION: Examples of JSX code that follows the rule when configured with 'consistent' option. Demonstrates consistent linebreak usage inside curly braces.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-curly-newline.md#2025-04-14_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<div>\n  { foo }\n</div>\n\n<div>\n  {\n    foo\n  }\n</div>\n```\n\n----------------------------------------\n\nTITLE: Correct JSX rendering with direct length display\nDESCRIPTION: Example of correct code that directly uses array length in string interpolation rather than as a condition.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-no-leaked-render.md#2025-04-14_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nconst Component = ({ elements }) => {\n  return <div>There are {elements.length} elements</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating correct PropTypes usage in JavaScript with React\nDESCRIPTION: Example of the correct pattern that complies with the 'forbid-foreign-prop-types' rule by explicitly importing propTypes.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/forbid-foreign-prop-types.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport SomeComponent, {propTypes as someComponentPropTypes} from './SomeComponent';\n```\n\n----------------------------------------\n\nTITLE: Rule Configuration Options in JavaScript\nDESCRIPTION: Shows the configuration structure for the jsx-no-target-blank rule with available options like allowReferrer, enforceDynamicLinks, warnOnSpreadAttributes, links, and forms.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-no-target-blank.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n\"react/jsx-no-target-blank\": [<enabled>, {\n  \"allowReferrer\": <allow-referrer>,\n  \"enforceDynamicLinks\": <enforce>,\n  \"warnOnSpreadAttributes\": <warn>,\n  \"links\": <boolean>,\n  \"forms\": <boolean>,\n}]\n```\n\n----------------------------------------\n\nTITLE: Correct JSX Prop Formatting with 'parens-new-line' Configuration\nDESCRIPTION: This snippet demonstrates the correct way to format JSX props when the rule is configured with { prop: \"parens-new-line\" }. The JSX content in the prop is wrapped in parentheses, with the opening and closing parentheses on new lines.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-wrap-multilines.md#2025-04-14_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<div foo={(\n  <div>\n    <p>Hello</p>\n  </div>\n)}>\n  <p>Hello</p>\n</div>;\n```\n\n----------------------------------------\n\nTITLE: Incorrect React Components Without displayName\nDESCRIPTION: Examples of React components that violate the display-name rule by not providing a displayName property.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/display-name.md#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nvar Hello = createReactClass({\n  render: function() {\n    return <div>Hello {this.props.name}</div>;\n  }\n});\n\nconst Hello = React.memo(({ a }) => {\n  return <>{a}</>\n})\n\nexport default ({ a }) => {\n  return <>{a}</>\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Usage - Callback Pattern in componentWillUpdate\nDESCRIPTION: Example showing correct usage where setState is called within a callback function in componentWillUpdate.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/no-will-update-set-state.md#2025-04-14_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nvar Hello = createReactClass({\n  componentWillUpdate: function() {\n    this.prepareHandler(function callback(newName) {\n      this.setState({\n        name: newName\n      });\n    });\n  },\n  render: function() {\n    return <div>Hello {this.props.name}</div>;\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Correct Usage with ignoreClassFields Option\nDESCRIPTION: Example of valid code when ignoreClassFields option is enabled.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/destructuring-assignment.md#2025-04-14_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nclass Foo extends React.PureComponent {\n  bar = this.props.bar\n}\n```\n\n----------------------------------------\n\nTITLE: Correct JSX Usage with Translation and Dynamic Content\nDESCRIPTION: Examples of code that correctly follows the rule by using translation functions, variables, or allowed strings.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-no-literals.md#2025-04-14_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\n// When using something like `react-intl`\nvar Hello = <div><Text {...message} /></div>\n```\n\nLANGUAGE: jsx\nCODE:\n```\n// When using something similar to Rails translations\nvar Hello = <div>{translate('my.translation.key')}</div>\n```\n\nLANGUAGE: jsx\nCODE:\n```\n// an allowed string\nvar Hello = <div>allowed</div>\n```\n\nLANGUAGE: jsx\nCODE:\n```\n// an allowed string surrounded by only whitespace\nvar Hello = <div>\n  allowed\n</div>;\n```\n\nLANGUAGE: jsx\nCODE:\n```\n// a string value stored within a variable used as an attribute's value\nvar Hello = <div>\n<img alt={imageDescription} {...props} />\n</div>;\n```\n\nLANGUAGE: jsx\nCODE:\n```\n// spread props object\nvar Hello = <Text {...props} />\n```\n\nLANGUAGE: jsx\nCODE:\n```\n// use variable for prop values\nvar Hello = <div class={xx} />\n```\n\nLANGUAGE: jsx\nCODE:\n```\n// cache\nclass Comp1 extends Component {\n  asdf() {}\n\n  render() {\n    return (\n      <div onClick={this.asdf}>\n        {'asdjfl'}\n        test\n        {'foo'}\n      </div>\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of Void DOM Elements with Children in React JSX\nDESCRIPTION: Examples of incorrect code that violate the rule by attempting to give children to void DOM elements or using dangerouslySetInnerHTML with them.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/void-dom-elements-no-children.md#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<br>Children</br>\n<br children='Children' />\n<br dangerouslySetInnerHTML={{ __html: 'HTML' }} />\nReact.createElement('br', undefined, 'Children')\nReact.createElement('br', { children: 'Children' })\nReact.createElement('br', { dangerouslySetInnerHTML: { __html: 'HTML' } })\n```\n\n----------------------------------------\n\nTITLE: Enforcing State Initialization in Constructor - Incorrect Example\nDESCRIPTION: This snippet shows how state is incorrectly initialized outside the constructor method using class properties, which violates the 'always' mode of the ESLint rule.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/state-in-constructor.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nclass Foo extends React.Component {\n  state = { bar: 0 }\n  render() {\n    return <div>Foo</div>\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrectly marked unused variable in JSX (JavaScript)\nDESCRIPTION: This snippet demonstrates a variable that would be incorrectly marked as unused by the no-unused-vars rule when used in JSX.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-uses-vars.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar Hello = require('./Hello');\n```\n\n----------------------------------------\n\nTITLE: Correct Boolean Prop Usage with assumeUndefinedIsFalse\nDESCRIPTION: Example showing correct usage when configured with 'never' and assumeUndefinedIsFalse:true or with 'always' and similar settings.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-boolean-value.md#2025-04-14_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nvar Hello = <Hello />;\n```\n\n----------------------------------------\n\nTITLE: Correctly used variable in JSX (JSX)\nDESCRIPTION: This snippet shows the correct usage of a variable in JSX, which should not be marked as unused by the react/jsx-uses-vars rule.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-uses-vars.md#2025-04-14_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nvar Hello = require('./Hello');\n\n<Hello name=\"John\" />;\n```\n\n----------------------------------------\n\nTITLE: Rule Configuration Example\nDESCRIPTION: Default configuration object showing all possible settings for the jsx-wrap-multilines rule.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-wrap-multilines.md#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"declaration\": \"parens\",\n  \"assignment\": \"parens\",\n  \"return\": \"parens\",\n  \"arrow\": \"parens\",\n  \"condition\": \"ignore\",\n  \"logical\": \"ignore\",\n  \"prop\": \"ignore\"\n}\n```\n\n----------------------------------------\n\nTITLE: Case Insensitive Props Example in JSX\nDESCRIPTION: Example demonstrating correct props ordering when ignoreCase option is enabled.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-sort-props.md#2025-04-14_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Hello name=\"John\" Number=\"2\" />;\n```\n\n----------------------------------------\n\nTITLE: Correct Adjacent Inline Elements Usage in JSX/React\nDESCRIPTION: Examples showing correct usage where inline elements are either separated by whitespace or are block-level elements that don't require separation.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/no-adjacent-inline-elements.md#2025-04-14_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<div><div></div><div></div></div>\n<div><a></a> <a></a></div>\n\nReact.createElement(\"div\", undefined, [React.createElement(\"a\"), \" \", React.createElement(\"a\")]);\n```\n\n----------------------------------------\n\nTITLE: Correct JSX Bracket Spacing Examples with 'closingSlash: always'\nDESCRIPTION: Examples of JSX code that comply with the 'closingSlash: always' rule, showing proper spacing for self-closing tags and regular closing tags.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-tag-spacing.md#2025-04-14_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<Hello/ >\n<Goodbye>< /Goodbye>\n```\n\n----------------------------------------\n\nTITLE: Correct JSX Closing Bracket Examples with Various Rule Configurations\nDESCRIPTION: Examples of JSX code that comply with different configurations of the closing bracket location rule.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-closing-bracket-location.md#2025-04-14_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n// 'jsx-closing-bracket-location': 1\n// 'jsx-closing-bracket-location': [1, 'tag-aligned']\n// 'jsx-closing-bracket-location': [1, 'line-aligned']\n<Hello\n  firstName=\"John\"\n  lastName=\"Smith\"\n/>;\n\n<Say\n  firstName=\"John\"\n  lastName=\"Smith\"\n>\n  Hello\n</Say>;\n\n// 'jsx-closing-bracket-location': 1\n// 'jsx-closing-bracket-location': [1, 'tag-aligned']\nvar x = <Hello\n  firstName=\"John\"\n  lastName=\"Smith\"\n        />;\n\nvar x = function() {\n  return <Say\n    firstName=\"John\"\n    lastName=\"Smith\"\n         >\n    Hello\n         </Say>;\n};\n\n// 'jsx-closing-bracket-location': [1, 'line-aligned']\nvar x = <Hello\n  firstName=\"John\"\n  lastName=\"Smith\"\n/>;\n\nvar x = function() {\n  return <Say\n    firstName=\"John\"\n    lastName=\"Smith\"\n  >\n    Hello\n  </Say>;\n};\n\n// 'jsx-closing-bracket-location': [1, {selfClosing: 'after-props'}]\n<Hello\n  firstName=\"John\"\n  lastName=\"Smith\" />;\n\n<Say\n  firstName=\"John\"\n  lastName=\"Smith\"\n>\n  Hello\n</Say>;\n\n// 'jsx-closing-bracket-location': [1, {selfClosing: 'props-aligned', nonEmpty: 'after-props'}]\n<Hello\n  firstName=\"John\"\n  lastName=\"Smith\"\n  />;\n\n<Say\n  firstName=\"John\"\n  lastName=\"Smith\">\n  Hello\n</Say>;\n```\n\n----------------------------------------\n\nTITLE: Demonstrating incorrect PropTypes usage in JavaScript with React\nDESCRIPTION: Examples of code patterns that violate the 'forbid-foreign-prop-types' rule by directly accessing another component's propTypes.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/forbid-foreign-prop-types.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport SomeComponent from './SomeComponent';\nSomeComponent.propTypes;\n\nvar { propTypes } = SomeComponent;\n\nSomeComponent['propTypes'];\n```\n\n----------------------------------------\n\nTITLE: Invalid PropTypes Examples\nDESCRIPTION: Multiple examples of component definitions that would trigger warnings for not using exact prop types.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/prefer-exact-props.md#2025-04-14_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n  class Component extends React.Component {\n    render() {\n      return <div />;\n    }\n  }\n  Component.propTypes = {\n    foo: PropTypes.string\n  };\n```\n\nLANGUAGE: jsx\nCODE:\n```\n  class Component extends React.Component {\n    static propTypes = {\n      foo: PropTypes.string\n    }\n    render() {\n      return <div />;\n    }\n  }\n```\n\nLANGUAGE: jsx\nCODE:\n```\n  class Component extends React.Component {\n    props: {\n      foo: string\n    }\n    render() {\n      return <div />;\n    }\n  }\n```\n\nLANGUAGE: jsx\nCODE:\n```\n  function Component(props: { foo: string }) {\n    return <div />;\n  }\n```\n\nLANGUAGE: jsx\nCODE:\n```\n  type Props = {\n    foo: string\n  }\n  function Component(props: Props) {\n    return <div />;\n  }\n```\n\n----------------------------------------\n\nTITLE: Incorrect React Context Objects Without displayName\nDESCRIPTION: Examples of React Context objects that violate the rule by not having a displayName property when checkContextObjects is enabled.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/display-name.md#2025-04-14_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nconst Hello = React.createContext();\n```\n\nLANGUAGE: jsx\nCODE:\n```\nconst Hello = createContext();\n```\n\n----------------------------------------\n\nTITLE: Default Rule Configuration\nDESCRIPTION: Default configuration object for the sort-comp rule showing the standard method ordering and group definitions\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/sort-comp.md#2025-04-14_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n{\n  order: [\n    'static-methods',\n    'lifecycle',\n    'everything-else',\n    'render'\n  ],\n  groups: {\n    lifecycle: [\n      'displayName',\n      'propTypes',\n      'contextTypes',\n      'childContextTypes',\n      'mixins',\n      'statics',\n      'defaultProps',\n      'constructor',\n      'getDefaultProps',\n      'state',\n      'getInitialState',\n      'getChildContext',\n      'getDerivedStateFromProps',\n      'componentWillMount',\n      'UNSAFE_componentWillMount',\n      'componentDidMount',\n      'componentWillReceiveProps',\n      'UNSAFE_componentWillReceiveProps',\n      'shouldComponentUpdate',\n      'componentWillUpdate',\n      'UNSAFE_componentWillUpdate',\n      'getSnapshotBeforeUpdate',\n      'componentDidUpdate',\n      'componentDidCatch',\n      'componentWillUnmount'\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Rule Configuration with Custom Component Props\nDESCRIPTION: JSON configuration example showing how to specify custom components and their props to be checked by the rule.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-no-script-url.md#2025-04-14_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"react/jsx-no-script-url\": [\n    \"error\",\n    [\n      {\n        \"name\": \"Link\",\n        \"props\": [\"to\"]\n      },\n      {\n        \"name\": \"Foo\",\n        \"props\": [\"href\", \"to\"]\n      }\n    ]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: ESLint Rule Configuration for JSX Closing Bracket Location\nDESCRIPTION: JavaScript configuration options for the 'react/jsx-closing-bracket-location' ESLint rule.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-closing-bracket-location.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n\"react/jsx-closing-bracket-location\": <enabled> // -> [<enabled>, \"tag-aligned\"]\n\"react/jsx-closing-bracket-location\": [<enabled>, \"<location>\"]\n\n\"react/jsx-closing-bracket-location\": [<enabled>, {\n  \"nonEmpty\": \"<location>\" || false,\n  \"selfClosing\": \"<location>\" || false\n}]\n```\n\n----------------------------------------\n\nTITLE: Correct React JSX Without Dangerous Properties\nDESCRIPTION: Example showing the correct way to render content without using dangerous properties.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/no-danger.md#2025-04-14_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nvar React = require('react');\n\nvar Hello = <div>Hello World</div>;\n```\n\n----------------------------------------\n\nTITLE: Callbacks Last Example in JSX\nDESCRIPTION: Example showing correct ordering when callbacksLast option is enabled.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-sort-props.md#2025-04-14_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<Hello tel={5555555} onClick={this._handleClick} />\n```\n\n----------------------------------------\n\nTITLE: Incorrect JSX prop spreading with duplicate spreads in React\nDESCRIPTION: Example showing incorrect code where the same props object is spread twice in a component, which may lead to unintended overrides or unnecessary computations.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-props-no-spread-multi.md#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<App {...props} myAttr=\"1\" {...props} />\n```\n\n----------------------------------------\n\nTITLE: Correct JSX Property Placement - Never Config\nDESCRIPTION: Examples showing correct placement of first property when rule is configured with 'never' option.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-first-prop-new-line.md#2025-04-14_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Hello personal={true} />\n\n<Hello personal={true}\n    foo=\"bar\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Rule configuration syntax\nDESCRIPTION: Shows the different ways to configure the jsx-closing-tag-location rule with the location options.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-closing-tag-location.md#2025-04-14_snippet_4\n\nLANGUAGE: js\nCODE:\n```\n\"react/jsx-closing-tag-location\": <enabled> // -> [<enabled>, \"tag-aligned\"]\n\"react/jsx-closing-tag-location\": [<enabled>, \"<location>\"]\n```\n\n----------------------------------------\n\nTITLE: Correct JSX Spacing Examples with 'never' Option\nDESCRIPTION: Examples of JSX code that comply with the 'react/jsx-equals-spacing' rule when configured with the 'never' option. These examples show correct usage with no spaces around equal signs.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-equals-spacing.md#2025-04-14_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Hello name={firstname} />;\n<Hello name />;\n<Hello {...props} />;\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage with 'always' Setting\nDESCRIPTION: Examples of code that violate the rule when configured with 'always' setting.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/destructuring-assignment.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst MyComponent = (props) => {\n  return (<div id={props.id} />)\n};\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst Foo = class extends React.PureComponent {\n  render() {\n    return <div>{this.context.foo}</div>;\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Sort Shape Props Example\nDESCRIPTION: Example showing sorted props within a PropTypes.shape definition\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/sort-prop-types.md#2025-04-14_snippet_9\n\nLANGUAGE: js\nCODE:\n```\nvar Component = createReactClass({\n  propTypes: {\n    a: PropTypes.number,\n    b: PropTypes.shape({\n      d: PropTypes.number,\n      e: PropTypes.func,\n      f: PropTypes.bool,\n    }),\n    c: PropTypes.string,\n  },\n...\n});\n```\n\n----------------------------------------\n\nTITLE: Correct PropTypes Declaration - Basic Example\nDESCRIPTION: Example showing correctly ordered propTypes in a React class component using createReactClass\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/sort-prop-types.md#2025-04-14_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nvar Component = createReactClass({\n  propTypes: {\n    a: PropTypes.number,\n    b: PropTypes.any,\n    c: PropTypes.string\n  },\n...\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring 'as-needed' Option for JSX File Extension\nDESCRIPTION: ESLint configuration to allow JSX file extensions only when needed, using the 'allow' option.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-filename-extension.md#2025-04-14_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n\"rules\": {\n  \"react/jsx-filename-extension\": [1, { \"allow\": \"as-needed\" }]\n}\n```\n\n----------------------------------------\n\nTITLE: Allowed Fragment Expressions with Configuration Option\nDESCRIPTION: Examples of fragment usage that are allowed when the 'allowExpressions' option is set to true. This is particularly useful for TypeScript projects where string types need to satisfy JSX.Element return types.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-no-useless-fragment.md#2025-04-14_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<>{foo}</>\n\n<>\n  {foo}\n</>\n```\n\n----------------------------------------\n\nTITLE: Correct Usage: PropTypes without defaultProps in Stateless Component\nDESCRIPTION: This example shows correct usage where component defines PropTypes but no defaultProps, which is valid since no defaults are provided.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/default-props-match-prop-types.md#2025-04-14_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nfunction MyStatelessComponent({ foo, bar }) {\n  return <div>{foo}{bar}</div>;\n}\n\nMyStatelessComponent.propTypes = {\n  foo: React.PropTypes.string,\n  bar: React.PropTypes.string.isRequired\n};\n```\n\n----------------------------------------\n\nTITLE: Explicit Spread Example with 'explicitSpread' Option Set to 'ignore'\nDESCRIPTION: Example of correct JSX code when the 'explicitSpread' option is set to 'ignore', allowing explicit property spreading in JSX.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-props-no-spreading.md#2025-04-14_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n<img {...{ prop1, prop2, prop3 }} />\n```\n\n----------------------------------------\n\nTITLE: Correct JSX nesting with various depth limits\nDESCRIPTION: Examples of JSX code patterns that comply with the rule at different maximum depth configurations (1, 2, and 3), showing properly nested components.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-max-depth.md#2025-04-14_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n// [2, { \"max\": 1 }]\n<App>\n  <Hello />\n</App>\n\n// [2,{ \"max\": 2 }]\n<App>\n  <Foo>\n    <Bar />\n  </Foo>\n</App>\n\n// [2, { \"max\": 3 }]\n<App>\n  <Foo>\n    <Bar>\n      <Baz />\n    </Bar>\n  </Foo>\n</App>\n```\n\n----------------------------------------\n\nTITLE: Correct HTML Entity Usage\nDESCRIPTION: Example showing proper usage of HTML entity to escape the greater than symbol.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/no-unescaped-entities.md#2025-04-14_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<div> &gt; </div>\n```\n\n----------------------------------------\n\nTITLE: When Option Example - Correct\nDESCRIPTION: Example showing correct usage with the 'when' option set to 'multiline'.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-max-props-per-line.md#2025-04-14_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n// [1, { \"when\": \"multiline\" }]\n<Hello firstName=\"John\" lastName=\"Smith\" />\n<Hello\n  firstName=\"John\"\n  lastName=\"Smith\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Incorrect JSX with Missing Newlines\nDESCRIPTION: Example of JSX code that violates the 'react/jsx-newline' rule when configured with { \"prevent\": false }. It shows adjacent JSX elements without newlines between them.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-newline.md#2025-04-14_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<div>\n  <Button>{data.label}</Button>\n  <List />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage with disallow-in-func Mode - Direct setState\nDESCRIPTION: Example showing incorrect usage under strict mode where setState is called directly within componentWillUpdate.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/no-will-update-set-state.md#2025-04-14_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nvar Hello = createReactClass({\n  componentWillUpdate: function() {\n     this.setState({\n        name: this.props.name.toUpperCase()\n      });\n    },\n  render: function() {\n    return <div>Hello {this.state.name}</div>;\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: No Sort Alphabetically Example\nDESCRIPTION: Example showing props without alphabetical sorting enforcement\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/sort-prop-types.md#2025-04-14_snippet_10\n\nLANGUAGE: js\nCODE:\n```\nvar Component = createReactClass({\n  propTypes: {\n    barRequired: PropTypes.any.isRequired,\n    z: PropTypes.string,\n    a: PropTypes.number,\n  },\n...\n});\n```\n\n----------------------------------------\n\nTITLE: Incorrect Boolean Prop Usage with assumeUndefinedIsFalse\nDESCRIPTION: Example showing incorrect usage when configured with 'never' and assumeUndefinedIsFalse:true or with 'always' and similar settings.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-boolean-value.md#2025-04-14_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nvar Hello = <Hello personal={false} />;\n```\n\n----------------------------------------\n\nTITLE: DOM Components Exception Examples\nDESCRIPTION: Examples of allowed usage when ignoreDOMComponents option is enabled.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-no-bind.md#2025-04-14_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<div onClick={this._handleClick.bind(this) />\n<span onClick={() => console.log(\"Hello!\")} />\n<button type=\"button\" onClick={function() { alert(\"1337\") }} />\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of dangerouslySetInnerHTML in React JSX\nDESCRIPTION: Example showing incorrect usage of the dangerouslySetInnerHTML property, which this ESLint rule aims to prevent.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/no-danger.md#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nvar React = require('react');\n\nvar Hello = <div dangerouslySetInnerHTML={{ __html: \"Hello World\" }}></div>;\n```\n\n----------------------------------------\n\nTITLE: Rule Configuration Options in JavaScript\nDESCRIPTION: Configuration options for the rule that allow enabling or disabling specific button type values.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/button-has-type.md#2025-04-14_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n...\n\"react/button-has-type\": [<enabled>, {\n  \"button\": <boolean>,\n  \"submit\": <boolean>,\n  \"reset\": <boolean>\n}]\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring the jsx-max-depth rule in ESLint\nDESCRIPTION: Shows how to configure the jsx-max-depth rule in an ESLint configuration file, setting the maximum allowed depth for JSX nesting.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-max-depth.md#2025-04-14_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n...\n\"react/jsx-max-depth\": [<enabled>, { \"max\": <number> }]\n...\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage with Aliases - React Component Class\nDESCRIPTION: Example showing incorrect usage of lifecycle method aliases when checkAliases is true.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/no-unsafe.md#2025-04-14_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nclass Foo extends React.Component {\n  componentWillMount() {}\n  componentWillReceiveProps() {}\n  componentWillUpdate() {}\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Component Prop Usage - JSX\nDESCRIPTION: Examples of allowed prop usage that comply with the rule. Shows valid component props and allowed DOM element props.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/forbid-component-props.md#2025-04-14_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Hello name='Joe' />\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<div className='foo' />\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<div style={{color: 'red'}} />\n```\n\n----------------------------------------\n\nTITLE: AllowAllCaps Option Example\nDESCRIPTION: Examples of valid component names when allowAllCaps option is enabled.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-pascal-case.md#2025-04-14_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<ALLOWED />\n<TEST_COMPONENT />\n```\n\n----------------------------------------\n\nTITLE: Incorrect Template Literal Ref with Interpolation\nDESCRIPTION: This example demonstrates incorrect usage of template literals with interpolation for refs when `noTemplateLiterals` is set to `true`.  The `ref` attribute is assigned a template literal that includes a variable, which is flagged as an error.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/no-string-refs.md#2025-04-14_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nvar Hello = createReactClass({\n render: function() {\n  return <div ref={`hello${index}`}>Hello, world.</div>;\n }\n});\n```\n\n----------------------------------------\n\nTITLE: Incorrect JSX Usage with Duplicate Props\nDESCRIPTION: This example demonstrates incorrect usage of JSX by including a duplicate 'name' prop, which can cause unexpected behavior in React applications.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-no-duplicate-props.md#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Hello name=\"John\" name=\"John\" />;\n```\n\n----------------------------------------\n\nTITLE: Formatting Negative Adverbs in Rule Documentation\nDESCRIPTION: Guidelines for formatting negative adverbs that precede code snippets in the 'Rule Details' sections of documentation. Negative adverbs should be formatted in bold text for emphasis.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/CONTRIBUTING.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- Negative adverbs preceding snippets in 'Rule Details' sections must be **bold**.\n```\n\n----------------------------------------\n\nTITLE: Incorrect JSX with Key in Object Spread\nDESCRIPTION: Spreading an object containing a key prop into a JSX element, which is discouraged in favor of providing the key prop statically.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-key.md#2025-04-14_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Hello {...{ key: id, id, caption }} />\n```\n\n----------------------------------------\n\nTITLE: Incorrect React Component Method Ordering - Basic\nDESCRIPTION: Examples showing incorrect method ordering in React components where render method appears before displayName\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/sort-comp.md#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nvar Hello = createReactClass({\n  render: function() {\n    return <div>Hello</div>;\n  },\n  displayName : 'Hello'\n});\n```\n\nLANGUAGE: jsx\nCODE:\n```\nclass Hello extends React.Component {\n  render() {\n    return <div>Hello</div>;\n  }\n  static displayName = 'Hello';\n}\n```\n\n----------------------------------------\n\nTITLE: Flow Exact Type Props Definition\nDESCRIPTION: Demonstrates the recommended way to define props using Flow exact object types with the pipe syntax.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/prefer-exact-props.md#2025-04-14_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nclass Foo extends React.Component {\n  props: {|\n    bar: string\n  |}\n\n  render() {\n    return <p>{this.props.bar}</p>;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect JSX nesting with custom depth limits\nDESCRIPTION: Examples of JSX code patterns that violate the rule with different configured maximum depths (1 or 2), showing both direct nesting and variable usage patterns.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-max-depth.md#2025-04-14_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n// [2, { \"max\": 1 }]\n<App>\n  <Foo>\n    <Bar />\n  </Foo>\n</App>\n\n// [2, { \"max\": 1 }]\nconst foobar = <Foo><Bar /></Foo>;\n<App>\n  {foobar}\n</App>\n\n// [2, { \"max\": 2 }]\n<App>\n  <Foo>\n    <Bar>\n      <Baz />\n    </Bar>\n  </Foo>\n</App>\n```\n\n----------------------------------------\n\nTITLE: Correct JSX rendering with NOT operator\nDESCRIPTION: Example of correct code using a NOT operator with a count variable, which always results in a boolean value.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-no-leaked-render.md#2025-04-14_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\nconst Component = ({ elements, count }) => {\n  return <div>{!count && 'No results found'}</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Correct usage: React import with JSX\nDESCRIPTION: This snippet shows correct usage where React is imported and JSX is used, which would not trigger the rule.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-uses-react.md#2025-04-14_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nvar React = require('react');\n\nvar Hello = <div>Hello {this.props.name}</div>;\n```\n\n----------------------------------------\n\nTITLE: Incorrect JSX Prop Formatting with 'parens-new-line' Configuration\nDESCRIPTION: These snippets show incorrect ways of formatting JSX props when the rule is set to { prop: \"parens-new-line\" }. The JSX content is either not wrapped in parentheses or the parentheses are not on new lines.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-wrap-multilines.md#2025-04-14_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<div foo={<div>\n    <p>Hello</p>\n  </div>}>\n  <p>Hello</p>\n</div>;\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<div foo={(<div>\n    <p>Hello</p>\n  </div>)}>\n  <p>Hello</p>\n</div>;\n```\n\n----------------------------------------\n\nTITLE: Incorrect JSX String Literal Usage\nDESCRIPTION: Example of incorrect code that violates the react/jsx-no-literals rule by using unwrapped string literals directly in JSX.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-no-literals.md#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nvar Hello = <div>test</div>;\n```\n\n----------------------------------------\n\nTITLE: Examples of correct defaultProps sorting in React components\nDESCRIPTION: Examples showing proper alphabetical sorting of defaultProps in various React component types, including class components, functional components, and components with spread operators.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-sort-default-props.md#2025-04-14_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nvar Component = createReactClass({\n...\n  getDefaultProps: function() {\n    return {\n      a: \"a\",\n      b: \"b\",\n      c: \"c\"\n    };\n  },\n...\n});\n\nclass Component extends React.Component {\n  ...\n}\nComponent.defaultProps = {\n  a: \"a\",\n  b: \"b\",\n  c: \"c\"\n};\n\nclass Component extends React.Component {\n  static defaultProps = {\n    a: PropTypes.any,\n    b: PropTypes.any,\n    c: PropTypes.any\n  }\n  render() {\n    return <div />;\n  }\n}\n\nconst Component = (props) => (...);\nComponent.defaultProps = {\n  a: \"a\",\n  y: \"y\",\n  z: \"z\"\n};\n\nconst defaults = {\n  b: \"b\"\n};\nconst types = {\n  a: PropTypes.string,\n  b: PropTypes.string,\n  c: PropTypes.string'\n};\nfunction StatelessComponentWithSpreadInPropTypes({ a, b, c }) {\n  return <div>{a}{b}{c}</div>;\n}\nStatelessComponentWithSpreadInPropTypes.propTypes = types;\nStatelessComponentWithSpreadInPropTypes.defaultProps = {\n  a: \"a\",\n  c: \"c\",\n  ...defaults,\n};\n\nexport default class ClassWithSpreadInPropTypes extends BaseClass {\n  static propTypes = {\n    a: PropTypes.string,\n    b: PropTypes.string,\n    c: PropTypes.string,\n    d: PropTypes.string,\n    e: PropTypes.string,\n    f: PropTypes.string\n  }\n  static defaultProps = {\n    a: \"a\",\n    b: \"b\",\n    ...c.defaultProps,\n    e: \"e\",\n    f: \"f\",\n    ...d.defaultProps\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: ESLint Rule Configuration\nDESCRIPTION: Configuration options for the self-closing-comp rule showing how to enable/disable checking for component and HTML tags.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/self-closing-comp.md#2025-04-14_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n\"react/self-closing-comp\": [\"error\", {\n  \"component\": true,\n  \"html\": true\n}]\n```\n\n----------------------------------------\n\nTITLE: ESLint Rule Configuration Example\nDESCRIPTION: Configuration options for the require-default-props ESLint rule.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/require-default-props.md#2025-04-14_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n\"react/require-default-props\": [<enabled>, {\n  \"forbidDefaultForRequired\": <boolean>,\n  \"classes\": \"defaultProps\" | \"ignore\",\n  \"functions\": \"defaultProps\" | \"defaultArguments\" | \"ignore\"\n  // @deprecated Use `functions` option instead.\n  \"ignoreFunctionalComponents\": <boolean>,\n}]\n```\n\n----------------------------------------\n\nTITLE: Custom Component Spreading Example with 'custom' Option Set to 'ignore'\nDESCRIPTION: Example of correct JSX code when the 'custom' option is set to 'ignore', allowing spread operators in custom JSX components.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-props-no-spreading.md#2025-04-14_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<MyCustomComponent {...props} />\n```\n\n----------------------------------------\n\nTITLE: Correct JSX String Literal Usage with Curly Braces\nDESCRIPTION: Examples of correctly wrapping string literals in curly braces within JSX components to comply with the rule.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-no-literals.md#2025-04-14_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nvar Hello = <div>{'test'}</div>;\n```\n\nLANGUAGE: jsx\nCODE:\n```\nvar Hello = <div>\n  {'test'}\n</div>;\n```\n\n----------------------------------------\n\nTITLE: Correct JSX with required linebreaks (require configuration)\nDESCRIPTION: Examples of JSX code that follows the rule when configured with 'require' option. Shows JSX expressions with linebreaks directly inside curly braces as required.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-curly-newline.md#2025-04-14_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<div>\n  {\n    foo &&\n    foo.bar\n  }\n</div>\n\n<div>\n  {\n    foo\n  }\n</div>\n```\n\n----------------------------------------\n\nTITLE: Correct Event Handler Implementation - Example 2\nDESCRIPTION: Shows correct usage where the prop follows the 'on' prefix convention using props\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-handler-names.md#2025-04-14_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<MyComponent onChange={this.props.onFoo} />\n```\n\n----------------------------------------\n\nTITLE: Correct Usage with allowRequiredDefaults Option Enabled\nDESCRIPTION: Example showing correct usage when the rule is configured with allowRequiredDefaults:true, which permits default values for required props.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/default-props-match-prop-types.md#2025-04-14_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nfunction MyStatelessComponent({ foo, bar }) {\n  return <div>{foo}{bar}</div>;\n}\n\nMyStatelessComponent.propTypes = {\n  foo: React.PropTypes.string.isRequired,\n  bar: React.PropTypes.string\n};\n\nMyStatelessComponent.defaultProps = {\n  foo: \"foo\"\n};\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage with Parens Configuration\nDESCRIPTION: Example showing incorrect JSX formatting when the rule is configured with 'parens' or 'parens-new-line' option.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-wrap-multilines.md#2025-04-14_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nvar Hello = createReactClass({\n  render: function() {\n    return <div>\n      <p>Hello {this.props.name}</p>\n    </div>;\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Correct React Component Implementation\nDESCRIPTION: Example showing proper implementation without using isMounted, instead relying on props for event handling.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/no-is-mounted.md#2025-04-14_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nvar Hello = createReactClass({\n  render: function() {\n    return <div onClick={this.props.handleClick}>Hello</div>;\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: ESLint Rule Configuration Options\nDESCRIPTION: Configuration options for the checked-requires-onchange-or-readonly rule, including ignoreMissingProperties and ignoreExclusiveCheckedAttribute boolean flags.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/checked-requires-onchange-or-readonly.md#2025-04-14_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n\"react/checked-requires-onchange-or-readonly\": [<enabled>, {\n  \"ignoreMissingProperties\": <boolean>,\n  \"ignoreExclusiveCheckedAttribute\": <boolean>\n}]\n```\n\n----------------------------------------\n\nTITLE: Markdown Rules Table\nDESCRIPTION: A detailed table listing ESLint React plugin rules with their descriptions and configuration indicators. The table includes information about each rule's automatic fix capability, configuration status, and deprecation status.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/README.md#2025-04-14_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n| Name                                                                                         | Description                                                                                                                                  | 💼 | 🚫 | 🔧 | 💡 | ❌  |\n| :------------------------------------------------------------------------------------------- | :------------------------------------------------------------------------------------------------------------------------------------------- | :- | :- | :- | :- | :- |\n| [boolean-prop-naming](docs/rules/boolean-prop-naming.md)                                     | Enforces consistent naming for boolean props                                                                                                 |    |    |    |    |    |\n| [button-has-type](docs/rules/button-has-type.md)                                             | Disallow usage of `button` elements without an explicit `type` attribute                                                                     |    |    |    |    |    |\n```\n\n----------------------------------------\n\nTITLE: Dynamic Links with Never Enforcement in JSX\nDESCRIPTION: Example of correct usage when enforceDynamicLinks is set to 'never', allowing dynamic links without noreferrer.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-no-target-blank.md#2025-04-14_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nvar Hello = <a target='_blank' href={dynamicLink}></a>\n```\n\n----------------------------------------\n\nTITLE: ESLint Rule Configuration for jsx-no-duplicate-props\nDESCRIPTION: This snippet demonstrates how to configure the ESLint rule for preventing duplicate props in JSX. It includes an option to ignore case sensitivity.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-no-duplicate-props.md#2025-04-14_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n...\n\"react/jsx-no-duplicate-props\": [<enabled>, { \"ignoreCase\": <boolean> }]\n...\n```\n\n----------------------------------------\n\nTITLE: Incorrect JSX Indentation Examples\nDESCRIPTION: Examples of JSX code with incorrect indentation styles that would trigger the 'react/jsx-indent' rule. Shows examples with inconsistent spacing and tabbing that violate the default rule of 4 spaces.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-indent.md#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n// 2 spaces indentation\n<App>\n  <Hello />\n</App>\n\n// no indentation\n<App>\n<Hello />\n</App>\n\n// 1 tab indentation\n<App>\n  <Hello />\n</App>\n```\n\n----------------------------------------\n\nTITLE: ESLint Configuration for react/jsx-indent Rule\nDESCRIPTION: Shows how to configure the 'react/jsx-indent' rule in ESLint configuration. The rule takes options for specifying tab or space-based indentation, and whether to check attributes or indent logical expressions.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-indent.md#2025-04-14_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n...\n\"react/jsx-indent\": [<enabled>, 'tab'|<number>, {checkAttributes: <boolean>, indentLogicalExpressions: <boolean>}]\n...\n```\n\n----------------------------------------\n\nTITLE: Required First Option Example\nDESCRIPTION: Example showing required prop types listed before optional ones\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/sort-prop-types.md#2025-04-14_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nvar Component = createReactClass({\n  propTypes: {\n    barRequired: PropTypes.any.isRequired,\n    fooRequired: PropTypes.any.isRequired,\n    a: PropTypes.number,\n    z: PropTypes.string,\n  },\n...\n});\n```\n\n----------------------------------------\n\nTITLE: Correct JSX Prop Formatting with 'parens' Configuration\nDESCRIPTION: These snippets demonstrate the correct way to format JSX props when the rule is set to { prop: \"parens\" }. The JSX content in the prop is wrapped in parentheses, either on the same line or with a new line.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-wrap-multilines.md#2025-04-14_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<div foo={(<div>\n    <p>Hello</p>\n  </div>)}>\n  <p>Hello</p>\n</div>;\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<div foo={(\n  <div>\n    <p>Hello</p>\n  </div>\n)}>\n  <p>Hello</p>\n</div>;\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage with Custom Components\nDESCRIPTION: Examples of incorrect usage that will trigger warnings when using the custom component configuration.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-no-script-url.md#2025-04-14_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Link to=\"javascript:void(0)\"></Link>\n<Foo href=\"javascript:void(0)\"></Foo>\n<Foo to=\"javascript:void(0)\"></Foo>\n```\n\n----------------------------------------\n\nTITLE: Shorthand Last Example in JSX\nDESCRIPTION: Example showing correct ordering when shorthandLast option is enabled.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-sort-props.md#2025-04-14_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<Hello name=\"John\" tel={5555555} active validate />\n```\n\n----------------------------------------\n\nTITLE: Correct Usage with Parens Configuration\nDESCRIPTION: Example showing correct JSX formatting when configured with either 'parens' or 'parens-new-line' option.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-wrap-multilines.md#2025-04-14_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nvar singleLineJSX = <p>Hello</p>\n\nvar Hello = createReactClass({\n  render: function() {\n    return (\n      <div>\n        <p>Hello {this.props.name}</p>\n      </div>\n    );\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Correct Target Blank Usage in JSX\nDESCRIPTION: Examples of correct usage of target='_blank' with proper security attributes and relative paths.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-no-target-blank.md#2025-04-14_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nvar Hello = <p target=\"_blank\"></p>\nvar Hello = <a target=\"_blank\" rel=\"noreferrer\" href=\"https://example.com\"></a>\nvar Hello = <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://example.com\"></a>\nvar Hello = <a target=\"_blank\" href=\"relative/path/in/the/host\"></a>\nvar Hello = <a target=\"_blank\" href=\"/absolute/path/in/the/host\"></a>\nvar Hello = <a></a>\n```\n\n----------------------------------------\n\nTITLE: Incorrect Context Usage with Inline Function\nDESCRIPTION: Example demonstrating incorrect implementation where a new function is created on each render and passed as a context value.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-no-constructed-context-values.md#2025-04-14_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\n\nconst MyContext = React.createContext();\nfunction Component() {\n    function foo() {}\n    return (<MyContext value={foo}></MyContext>);\n}\n```\n\n----------------------------------------\n\nTITLE: Auto-fixable TypeScript Patterns\nDESCRIPTION: Examples of TypeScript patterns that can be successfully auto-fixed by the rule, including cases with constrained type parameters and multiple type parameters.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/function-component-definition.md#2025-04-14_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n// autofix to function expression with type annotation\n// [2, { \"namedComponents\": \"function-expression\" }]\nconst Component: React.FC<Props> = (props) => {\n  return <div />;\n};\n\n// autofix to arrow function with type annotation\n// [2, { \"namedComponents\": \"function-expression\" }]\nconst Component: React.FC<Props> = function (props) {\n  return <div />;\n};\n\n// autofix to named arrow function with one constrained type parameter\n// [2, { \"namedComponents\": \"arrow-function\" }]\nfunction Component<T extends {}>(props: Props<T>) {\n  return <div />;\n}\n\nconst Component = function <T extends {}>(props: Props<T>) {\n  return <div />;\n};\n\n// autofix to named arrow function with multiple type parameters\n// [2, { \"namedComponents\": \"arrow-function\" }]\nfunction Component<T1, T2>(props: Props<T1, T2>) {\n  return <div />;\n}\n\nconst Component = function <T1, T2>(props: Props<T2>) {\n  return <div />;\n};\n\n// autofix to unnamed arrow function with one constrained type parameter\n// [2, { \"unnamedComponents\": \"arrow-function\" }]\nfunction getComponent() {\n  return function <T extends {}> (props: Props<T>) => {\n    return <div />;\n  };\n}\n\n// autofix to unnamed arrow function with multiple type parameters\n// [2, { \"unnamedComponents\": \"arrow-function\" }]\nfunction getComponent() {\n  return function <T1, T2>(props: Props<T1, T2>) => {\n    return <div />;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect JSX Closing Bracket Examples with Various Rule Configurations\nDESCRIPTION: Examples of JSX code that violate different configurations of the closing bracket location rule.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-closing-bracket-location.md#2025-04-14_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n// 'jsx-closing-bracket-location': 1\n// 'jsx-closing-bracket-location': [1, 'tag-aligned']\n// 'jsx-closing-bracket-location': [1, 'line-aligned']\n<Hello\n  firstName=\"John\"\n  lastName=\"Smith\"\n  />;\n\n<Say\n  firstName=\"John\"\n  lastName=\"Smith\">\n  Hello\n</Say>;\n\n// 'jsx-closing-bracket-location': 1\n// 'jsx-closing-bracket-location': [1, 'tag-aligned']\nvar x = <Hello\n  firstName=\"John\"\n  lastName=\"Smith\"\n/>;\n\nvar x = function() {\n  return <Say\n    firstName=\"John\"\n    lastName=\"Smith\"\n  >\n    Hello\n  </Say>;\n};\n\n// 'jsx-closing-bracket-location': [1, 'line-aligned']\nvar x = <Hello\n  firstName=\"John\"\n  lastName=\"Smith\"\n        />;\n\nvar x = function() {\n  return <Say\n    firstName=\"John\"\n    lastName=\"Smith\"\n         >\n    Hello\n         </Say>;\n};\n\n// 'jsx-closing-bracket-location': [1, 'after-props']\n<Hello\n  firstName=\"John\"\n  lastName=\"Smith\" />;\n\n<Say\n  firstName=\"John\"\n  lastName=\"Smith\">\n  Hello\n</Say>;\n\n// 'jsx-closing-bracket-location': [1, 'props-aligned']\n<Hello\n  firstName=\"John\"\n  lastName=\"Smith\"\n  />;\n\n<Say\n  firstName=\"John\"\n  lastName=\"Smith\"\n  >\n  Hello\n</Say>;\n```\n\n----------------------------------------\n\nTITLE: Incorrect JSX Component Naming\nDESCRIPTION: Examples of component names that violate the PascalCase naming convention.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-pascal-case.md#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Test_component />\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<TEST_COMPONENT />\n```\n\n----------------------------------------\n\nTITLE: Correct Stateless React Component\nDESCRIPTION: Example showing correct implementation without setState, using props instead of local state management. The component is stateless and receives all data through props.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/no-set-state.md#2025-04-14_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nvar Hello = createReactClass({\n  render: function() {\n    return <div onClick={this.props.handleClick}>Hello {this.props.name}</div>;\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: JSX with Correct Curly Spacing (Never)\nDESCRIPTION: Examples of correct JSX code when the 'react/jsx-curly-spacing' rule is configured with 'when: never'. These examples show proper spacing inside curly braces.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-curly-spacing.md#2025-04-14_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\n<Hello name={firstname} />;\n<Hello name={{ firstname: 'John', lastname: 'Doe' }} />;\n<Hello name={\n  firstname\n} />;\n<Hello>{firstname}</Hello>;\n<Hello>{ firstname }</Hello>;\n<Hello>{\n  firstname\n}</Hello>;\n```\n\n----------------------------------------\n\nTITLE: Custom Component Spreading Example with 'html' Option Set to 'ignore'\nDESCRIPTION: Example of incorrect JSX code when the 'html' option is set to 'ignore', as it still enforces the rule on custom components.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-props-no-spreading.md#2025-04-14_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<MyCustomComponent {...props} />\n```\n\n----------------------------------------\n\nTITLE: Correct JSX Comment Usage\nDESCRIPTION: Examples demonstrating the proper way to include comments in JSX components, either as JSX comments or as attributes.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-no-comment-textnodes.md#2025-04-14_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nvar Hello = createReactClass({\n  displayName: 'Hello',\n  render: function() {\n    return <div>{/* empty div */}</div>;\n  }\n});\n\nvar Hello = createReactClass({\n  displayName: 'Hello',\n  render: function() {\n    return <div /* empty div */></div>;\n  }\n});\n\nvar Hello = createReactClass({\n  displayName: 'Hello',\n  render: function() {\n    return <div className={'foo' /* temp class */}</div>;\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Incorrect JSX spacing before closing bracket (always)\nDESCRIPTION: Examples of incorrect code when the rule is configured with 'always', showing JSX elements without spaces before the closing bracket.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-space-before-closing.md#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Hello/>\n<Hello firstname=\"John\"/>\n```\n\n----------------------------------------\n\nTITLE: Incorrect PropTypes Usage in React Components (JSX)\nDESCRIPTION: Examples of incorrect PropTypes usage that this ESLint rule aims to prevent. It shows various ways of defining PropTypes that use the forbidden types 'any', 'array', and 'object'.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/forbid-prop-types.md#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nvar Component = createReactClass({\n  propTypes: {\n    a: PropTypes.any,\n    r: PropTypes.array,\n    o: PropTypes.object\n  },\n...\n});\n\nclass Component extends React.Component {\n  ...\n}\nComponent.propTypes = {\n  a: PropTypes.any,\n  r: PropTypes.array,\n  o: PropTypes.object\n};\n\nclass Component extends React.Component {\n  static propTypes = {\n    a: PropTypes.any,\n    r: PropTypes.array,\n    o: PropTypes.object\n  }\n  render() {\n    return <div />;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Context Provider Implementation with Inline Object\nDESCRIPTION: Example showing problematic usage where an inline object is passed directly to Context.Provider, causing unnecessary rerenders on each render cycle.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-no-constructed-context-values.md#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nreturn (\n    <SomeContext.Provider value={{foo: 'bar'}}>\n        ...\n    </SomeContext.Provider>\n)\n```\n\n----------------------------------------\n\nTITLE: Incorrect Event Handler Implementation - Example 1\nDESCRIPTION: Shows incorrect usage where the handler prefix doesn't match the prop prefix convention\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-handler-names.md#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<MyComponent handleChange={this.handleChange} />\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage: defaultProps for Non-existent PropType in createClass Component\nDESCRIPTION: This example shows incorrect usage in a React.createClass component where 'baz' has a default value but no corresponding PropType definition.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/default-props-match-prop-types.md#2025-04-14_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nvar Greeting = React.createClass({\n  render: function() {\n    return <div>Hello {this.props.foo} {this.props.bar}</div>;\n  },\n\n  propTypes: {\n    foo: React.PropTypes.string,\n    bar: React.PropTypes.string\n  },\n\n  getDefaultProps: function() {\n    return {\n      baz: \"baz\"\n    };\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Incorrect Props Sorting Example in JSX\nDESCRIPTION: Example showing incorrect alphabetical ordering of props that would trigger the rule violation.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-sort-props.md#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Hello lastName=\"Smith\" firstName=\"John\" />;\n```\n\n----------------------------------------\n\nTITLE: Flow Type Props Definition\nDESCRIPTION: Shows a React component using Flow types for props definition that would trigger a warning since it's not using exact object types.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/prefer-exact-props.md#2025-04-14_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nclass Foo extends React.Component {\n  props: {\n    bar: string\n  }\n\n  render() {\n    return <p>{this.props.bar}</p>;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: JSX with Incorrect Curly Spacing (Never)\nDESCRIPTION: Examples of incorrect JSX code when the 'react/jsx-curly-spacing' rule is configured with 'when: never'. These examples show improper spacing inside curly braces.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-curly-spacing.md#2025-04-14_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<Hello name={ firstname } />;\n<Hello name={ firstname} />;\n<Hello name={firstname } />;\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage with Aliases - Create React Class\nDESCRIPTION: Example showing incorrect usage of lifecycle method aliases in createReactClass when checkAliases is true.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/no-unsafe.md#2025-04-14_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nconst Foo = createReactClass({\n  componentWillMount: function() {},\n  componentWillReceiveProps: function() {},\n  componentWillUpdate: function() {}\n});\n```\n\n----------------------------------------\n\nTITLE: Incorrect JSX Usage Examples with javascript: URLs\nDESCRIPTION: Examples showing incorrect usage of javascript: URLs in React components that will trigger the ESLint rule warning.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-no-script-url.md#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<a href=\"javascript:\"></a>\n<a href=\"javascript:void(0)\"></a>\n<a href=\"j\\n\\n\\na\\rv\\tascript:\"></a>\n```\n\n----------------------------------------\n\nTITLE: False Positive Fix Example\nDESCRIPTION: Example showing how to fix the false positive issue by destructuring props outside the SFC helper method.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/no-unused-prop-types.md#2025-04-14_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nfunction AComponent(props) {\n  const { bProp } = props\n  function helperRenderer(aProp) { // is considered SFC\n    return (\n      <span>{aProp}{bProp}</span>\n    );\n  }\n\n  return (\n    <div>\n      {helperRenderer(props.aProp)}\n    </div>\n  );\n}\n\nAComponent.propTypes = {\n  aProp: PropTypes.string,\n  bProp: PropTypes.string\n};\n```\n\n----------------------------------------\n\nTITLE: Correct Usage: Allowed complex 'id' prop on custom component in JSX\nDESCRIPTION: Example of correct code where a complex 'id' prop is used on a custom component, which is allowed even when forbidden on DOM elements.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/forbid-dom-props.md#2025-04-14_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Hello id={{color: 'red'}} />\n```\n\n----------------------------------------\n\nTITLE: Custom PropTypes Configuration\nDESCRIPTION: Example of configuring custom propTypeNames for boolean prop validation.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/boolean-prop-naming.md#2025-04-14_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n\"react/boolean-prop-naming\": [\"error\", { \"propTypeNames\": [\"bool\", \"mutuallyExclusiveTrueProps\"] }]\n```\n\n----------------------------------------\n\nTITLE: Exceptions Configuration Example\nDESCRIPTION: Example of configuring exceptions for the 'react/jsx-props-no-spreading' rule to allow spreading on specific components.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-props-no-spreading.md#2025-04-14_snippet_8\n\nLANGUAGE: js\nCODE:\n```\n{ \"exceptions\": [\"Image\", \"img\"] }\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage: defaultProps for Required PropType in Class Component\nDESCRIPTION: This example demonstrates incorrect usage in a class component where 'foo' is marked as required but also has a default value defined.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/default-props-match-prop-types.md#2025-04-14_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nclass Greeting extends React.Component {\n  render() {\n    return (\n      <h1>Hello, {this.props.foo} {this.props.bar}</h1>\n    );\n  }\n}\n\nGreeting.propTypes = {\n  foo: React.PropTypes.string.isRequired,\n  bar: React.PropTypes.string\n};\n\nGreeting.defaultProps = {\n  foo: \"foo\"\n};\n```\n\n----------------------------------------\n\nTITLE: Incorrect JSX Property Usage Examples\nDESCRIPTION: Examples demonstrating incorrect usage of DOM properties in JSX, including using HTML-style class attribute instead of className and invalid aria attributes.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/no-unknown-property.md#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nvar React = require('react');\n\nvar Hello = <div class=\"hello\">Hello World</div>;\nvar Alphabet = <div abc=\"something\">Alphabet</div>;\n\n// Invalid aria-* attribute\nvar IconButton = <div aria-foo=\"bar\" />;\n```\n\n----------------------------------------\n\nTITLE: Allowed Function Children Examples\nDESCRIPTION: Examples of acceptable patterns when using function children with allowFunctions option enabled.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/no-children-prop.md#2025-04-14_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<MyComponent children={data => data.value} />\nReact.createElement(MyComponent, { children: data => data.value })\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of dangerouslySetInnerHTML and Children in React.createElement\nDESCRIPTION: Examples demonstrating proper usage where dangerouslySetInnerHTML and children are used separately using React.createElement method.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/no-danger-with-children.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nReact.createElement(\"div\", { dangerouslySetInnerHTML: { __html: \"HTML\" } });\n\nReact.createElement(\"Hello\", { dangerouslySetInnerHTML: { __html: \"HTML\" } });\n\nReact.createElement(\"div\", {}, \"Children\");\n\nReact.createElement(\"Hello\", {}, \"Children\");\n```\n\n----------------------------------------\n\nTITLE: Correct JSX without Newlines\nDESCRIPTION: Example of JSX code that complies with the 'react/jsx-newline' rule when configured with { \"prevent\": true }. It demonstrates adjacent JSX elements and expressions without newlines between them.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-newline.md#2025-04-14_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<div>\n  <Button>{data.label}</Button>\n  <List />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Incorrect JSX Child Element Spacing - Bold Text Example\nDESCRIPTION: Another example of incorrect JSX where a bold text element is placed adjacent to regular text without explicit spacing, potentially causing rendering ambiguity.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-child-element-spacing.md#2025-04-14_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<div>\n  <b>This text</b>\n  is bold\n</div>\n```\n\n----------------------------------------\n\nTITLE: Form Target Blank Example in JSX\nDESCRIPTION: Example of form usage with target=\"_blank\" that would be flagged when forms option is enabled.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-no-target-blank.md#2025-04-14_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nvar Hello = <form target=\"_blank\" action=\"https://example.com/\"></form>;\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of ES6 Class Syntax in 'always' Mode\nDESCRIPTION: Shows the correct way to define a React component using ES6 class syntax when the rule is set to 'always' mode.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/prefer-es6-class.md#2025-04-14_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\nclass Hello extends React.Component {\n  render() {\n    return <div>Hello {this.props.name}</div>;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect JSX Comment Usage\nDESCRIPTION: Examples showing problematic ways of including comments in JSX that would be flagged by the rule. These patterns show comments being directly inserted as text nodes.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-no-comment-textnodes.md#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nvar Hello = createReactClass({\n  render: function() {\n    return (\n      <div>// empty div</div>\n    );\n  }\n});\n\nvar Hello = createReactClass({\n  render: function() {\n    return (\n      <div>\n        /* empty div */\n      </div>\n    );\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Multiline Props Examples in JSX\nDESCRIPTION: Examples showing multiline props ordering with different configuration options.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-sort-props.md#2025-04-14_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n// 'jsx-sort-props': [1, { multiline: 'first' }]\n<Hello\n  classes={{\n    greetings: classes.greetings,\n  }}\n  active\n  validate\n  name=\"John\"\n  tel={5555555}\n/>\n\n// 'jsx-sort-props': [1, { multiline: 'last' }]\n<Hello\n  active\n  validate\n  name=\"John\"\n  tel={5555555}\n  classes={{\n    greetings: classes.greetings,\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage with disallow-in-func Mode - Callback setState\nDESCRIPTION: Example showing incorrect usage under strict mode where setState is called within a callback in componentWillUpdate.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/no-will-update-set-state.md#2025-04-14_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nvar Hello = createReactClass({\n  componentWillUpdate: function() {\n    this.prepareHandler(function callback(newName) {\n      this.setState({\n        name: newName\n      });\n    });\n  },\n  render: function() {\n    return <div>Hello {this.state.name}</div>;\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of setState in componentDidMount (React JSX)\nDESCRIPTION: This example demonstrates incorrect usage of setState directly within the componentDidMount lifecycle method, which can lead to performance issues.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/no-did-mount-set-state.md#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nvar Hello = createReactClass({\n  componentDidMount: function() {\n    this.setState({\n      name: this.props.name.toUpperCase()\n    });\n  },\n  render: function() {\n    return <div>Hello {this.state.name}</div>;\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Correct JSX Bracket Spacing Examples with 'beforeClosing: always'\nDESCRIPTION: Examples of JSX code that comply with the 'beforeClosing: always' rule, showing proper spacing before the closing bracket of JSX elements.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-tag-spacing.md#2025-04-14_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\n<Hello ></Hello >\n<Hello\n  firstName=\"John\"\n>\n</Hello >\n```\n\n----------------------------------------\n\nTITLE: Correct JSX Property Placement - Always Config\nDESCRIPTION: Examples showing correct placement of first property when rule is configured with 'always' option.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-first-prop-new-line.md#2025-04-14_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Hello\n    personal />\n\n<Hello\n    personal\n/>\n```\n\n----------------------------------------\n\nTITLE: Incorrect JSX Usage Without React Import\nDESCRIPTION: An example of incorrect code where JSX is used without importing React.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/react-in-jsx-scope.md#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nvar Hello = <div>Hello {this.props.name}</div>;\n```\n\n----------------------------------------\n\nTITLE: Incorrect JSX Prop Formatting with 'never' Configuration\nDESCRIPTION: These snippets show incorrect ways of formatting JSX props when the rule is set to { prop: \"never\" }. The JSX content is wrapped in parentheses, which is not allowed in this configuration.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-wrap-multilines.md#2025-04-14_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n<div foo={(<div>\n    <p>Hello</p>\n  </div>)}>\n  <p>Hello</p>\n</div>;\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<div foo={(\n  <div>\n    <p>Hello</p>\n  </div>\n)}>\n  <p>Hello</p>\n</div>;\n```\n\n----------------------------------------\n\nTITLE: Correct JSX element placement with 'single-child' option in React\nDESCRIPTION: Examples of code that comply with the 'react/jsx-one-expression-per-line' rule when the 'allow' option is set to 'single-child'.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-one-expression-per-line.md#2025-04-14_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<App>Hello</App>\n\n<App>{\"Hello\"}</App>\n\n<App><Hello /></App>\n```\n\n----------------------------------------\n\nTITLE: Legitimate Comment Character Output\nDESCRIPTION: Example showing how to legitimately output comment characters as text nodes by wrapping them in curly braces and quotes.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-no-comment-textnodes.md#2025-04-14_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nvar Hello = createReactClass({\n  render: function() {\n    return (\n      <div>{'/* This will be output as a text node */'}</div>\n    );\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: ESLint Rule Configuration Example\nDESCRIPTION: Shows how the rule 'react/no-invalid-html-attribute' is configured by default to check the 'rel' attribute values for validity.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/no-invalid-html-attribute.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n[\"rel\"]\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage: Non-destructured useState Call in JavaScript\nDESCRIPTION: Example of incorrect code where the useState call is not destructured into a value and setter pair, but instead assigned to a single variable.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/hook-use-state.md#2025-04-14_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport React from 'react';\nexport default function useColor() {\n  // useState call is not destructured into value + setter pair\n  const useStateResult = React.useState();\n  return useStateResult;\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Boolean Prop Naming with TypeScript\nDESCRIPTION: Example of incorrect boolean prop naming that violates the naming convention using TypeScript type definitions.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/boolean-prop-naming.md#2025-04-14_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\ntype Props = {\n  enabled: boolean\n}\nconst Hello = (props: Props) => <div />;\n```\n\n----------------------------------------\n\nTITLE: Correct JSX Property Placement - Multiline-Multiprop Config\nDESCRIPTION: Examples showing correct placement of first property when rule is configured with 'multiline-multiprop' option.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-first-prop-new-line.md#2025-04-14_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n<Hello foo={{\n}} />\n\n<Hello\n    foo={{\n    }}\n    bar\n/>\n```\n\n----------------------------------------\n\nTITLE: Rule Configuration Options\nDESCRIPTION: Configuration options for the ESLint rule showing available settings.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-no-bind.md#2025-04-14_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n\"react/jsx-no-bind\": [<enabled>, {\n  \"ignoreDOMComponents\": <boolean> || false,\n  \"ignoreRefs\": <boolean> || false,\n  \"allowArrowFunctions\": <boolean> || false,\n  \"allowFunctions\": <boolean> || false,\n  \"allowBind\": <boolean> || false\n}]\n```\n\n----------------------------------------\n\nTITLE: Correct JSX spacing before closing bracket (always)\nDESCRIPTION: Examples of correct code when the rule is configured with 'always', demonstrating proper spacing before the closing bracket in various JSX element formats.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-space-before-closing.md#2025-04-14_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Hello />\n<Hello firstName=\"John\" />\n<Hello\n  firstName=\"John\"\n  lastName=\"Smith\"\n/>\n```\n\n----------------------------------------\n\nTITLE: ESLint Rule Configuration for jsx-key\nDESCRIPTION: Configuration syntax for the jsx-key rule in ESLint. Shows how to enable the rule and set the checkFragmentShorthand option.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-key.md#2025-04-14_snippet_8\n\nLANGUAGE: js\nCODE:\n```\n...\n\"react/jsx-key\": [<enabled>, { \"checkFragmentShorthand\": <boolean> }]\n...\n```\n\n----------------------------------------\n\nTITLE: Custom Error Message Configuration\nDESCRIPTION: Example of configuring a custom error message with template variables.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/boolean-prop-naming.md#2025-04-14_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nmessage: 'It is better if your prop ({{ propName }}) matches this pattern: ({{ pattern }})'\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of dangerouslySetInnerHTML with Children in React.createElement\nDESCRIPTION: Examples showing incorrect usage where both dangerouslySetInnerHTML and children are used simultaneously using React.createElement method.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/no-danger-with-children.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nReact.createElement(\"div\", { dangerouslySetInnerHTML: { __html: \"HTML\" } }, \"Children\");\n\nReact.createElement(\"Hello\", { dangerouslySetInnerHTML: { __html: \"HTML\" } }, \"Children\");\n```\n\n----------------------------------------\n\nTITLE: Incorrect JSX rendering with array length check\nDESCRIPTION: Example of problematic code where array length could render 0 instead of conditionally rendering the List component.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-no-leaked-render.md#2025-04-14_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nconst Component = ({ elements }) => {\n  return <div>{elements.length && <List elements={elements} />}</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring JSX Curly Spacing with Multiple Options\nDESCRIPTION: Example of configuring the 'react/jsx-curly-spacing' rule with multiple options, including 'allowMultiline' and custom spacing for object literals.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-curly-spacing.md#2025-04-14_snippet_5\n\nLANGUAGE: JSON\nCODE:\n```\n\"react/jsx-curly-spacing\": [2, \"never\", {\n  \"allowMultiline\": false,\n  \"spacing\": {\"objectLiterals\": \"always\"}\n}]\n```\n\n----------------------------------------\n\nTITLE: Incorrect JSX Props Indentation Examples\nDESCRIPTION: Examples showing improper indentation patterns that would trigger rule violations, including 2-space indentation, no indentation, and tab indentation scenarios.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-indent-props.md#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n// 2 spaces indentation\n<Hello\n  firstName=\"John\"\n/>\n\n// no indentation\n<Hello\nfirstName=\"John\"\n/>\n\n// 1 tab indentation\n<Hello\n  firstName=\"John\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Examples of Incorrect Code with react/forbid-elements Rule\nDESCRIPTION: Demonstrates various code patterns that would fail the react/forbid-elements rule, including direct element usage and React.createElement calls with forbidden elements.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/forbid-elements.md#2025-04-14_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n// [1, { \"forbid\": [\"button\"] }]\n<button />\nReact.createElement('button');\n\n// [1, { \"forbid\": [\"Modal\"] }]\n<Modal />\nReact.createElement(Modal);\n\n// [1, { \"forbid\": [\"Namespaced.Element\"] }]\n<Namespaced.Element />\nReact.createElement(Namespaced.Element);\n\n// [1, { \"forbid\": [{ \"element\": \"button\", \"message\": \"use <Button> instead\" }, \"input\"] }]\n<div><button /><input /></div>\nReact.createElement('div', {}, React.createElement('button', {}, React.createElement('input')));\n```\n\n----------------------------------------\n\nTITLE: Incorrect JSX with Duplicate Keys\nDESCRIPTION: An array of React elements with duplicate key values, which defeats the purpose of keys and is flagged when warnOnDuplicates option is enabled.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-key.md#2025-04-14_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\nconst spans = [\n    <span key=\"notunique\"/>,\n    <span key=\"notunique\"/>,\n];\n```\n\n----------------------------------------\n\nTITLE: Emotion Usage Example\nDESCRIPTION: Example of valid JSX code using Emotion's css prop after configuring the rule to ignore it.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/no-unknown-property.md#2025-04-14_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nvar StyledDiv = <div css={{ color: 'pink' }}></div>;\n```\n\n----------------------------------------\n\nTITLE: Incorrect JSX Property Placement - Always Config\nDESCRIPTION: Examples showing incorrect placement of first property when rule is configured with 'always' option.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-first-prop-new-line.md#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Hello personal={true} />\n\n<Hello personal={true}\n    foo=\"bar\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Incorrect JSX rendering with nested collection length check\nDESCRIPTION: Example of problematic code where nested collection length could render 0 instead of conditionally rendering the List component.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-no-leaked-render.md#2025-04-14_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nconst Component = ({ nestedCollection }) => {\n  return (\n    <div>\n      {nestedCollection.elements.length && <List elements={nestedCollection.elements} />}\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of ES5 Syntax in 'never' Mode\nDESCRIPTION: Demonstrates the correct way to define a React component using ES5 createReactClass method when the rule is set to 'never' mode.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/prefer-es6-class.md#2025-04-14_snippet_4\n\nLANGUAGE: JSX\nCODE:\n```\nvar Hello = createReactClass({\n  render: function() {\n    return <div>Hello {this.props.name}</div>;\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Correct JSX Props Usage Examples\nDESCRIPTION: Examples showing correct usage where props are properly distributed across multiple lines according to the rule.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-max-props-per-line.md#2025-04-14_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Hello\n  firstName=\"John\"\n  lastName=\"Smith\"\n/>;\n\n<Hello\n  {...this.props}\n  firstName=\"John\"\n  lastName=\"Smith\"\n/>;\n```\n\n----------------------------------------\n\nTITLE: Spread Attributes Example in JSX\nDESCRIPTION: Demonstration of spread attributes usage and how to properly handle them with security attributes.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-no-target-blank.md#2025-04-14_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nconst unsafeProps = {\n  href: \"https://example.com\",\n  target: \"_blank\",\n};\n\n<a {...unsafeProps}></a>\n```\n\n----------------------------------------\n\nTITLE: Rule Configuration Options\nDESCRIPTION: Configuration example showing how to enable the rule with an option to allow required props to have default values.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/default-props-match-prop-types.md#2025-04-14_snippet_9\n\nLANGUAGE: js\nCODE:\n```\n...\n\"react/default-props-match-prop-types\": [<enabled>, { \"allowRequiredDefaults\": <boolean> }]\n...\n```\n\n----------------------------------------\n\nTITLE: Incorrect Style Prop Usage with React.createElement\nDESCRIPTION: Examples of incorrect style prop usage using React.createElement() method where style values are not objects.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/style-prop-object.md#2025-04-14_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nReact.createElement(\"div\", { style: \"color: 'red'\" });\n\nReact.createElement(\"div\", { style: true });\n\nReact.createElement(\"Hello\", { style: true });\n\nconst styles = true;\nReact.createElement(\"div\", { style: styles });\n```\n\n----------------------------------------\n\nTITLE: Incorrect setState Usage in React Component\nDESCRIPTION: Example showing incorrect usage of setState and local component state management, which violates the no-set-state rule. The component maintains local state and uses setState to update it.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/no-set-state.md#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nvar Hello = createReactClass({\n  getInitialState: function() {\n    return {\n      name: this.props.name\n    };\n  },\n  handleClick: function() {\n    this.setState({\n      name: this.props.name.toUpperCase()\n    });\n  },\n  render: function() {\n    return <div onClick={this.handleClick.bind(this)}>Hello {this.state.name}</div>;\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Correct Usage - PureComponent Examples\nDESCRIPTION: Examples of valid PureComponent usage when ignorePureComponents option is enabled.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/prefer-stateless-function.md#2025-04-14_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nclass Foo extends React.PureComponent {\n  render() {\n    return <div>{this.props.foo}</div>;\n  }\n}\n\nclass Bar extends React.PureComponent {\n  render() {\n    return <div>Baz</div>;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect JSX element placement examples in React\nDESCRIPTION: Examples of code that violate the 'react/jsx-one-expression-per-line' rule, showing multiple JSX elements or expressions on the same line.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-one-expression-per-line.md#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<App><Hello /></App>\n\n<App><Hello />\n</App>\n\n<App>\n  <Hello>\n  </Hello></App>\n\n<App>\n  <Hello /> World\n</App>\n\n<App>\n  <Hello /> { 'World' }\n</App>\n\n<App>\n  <Hello /> { this.world() }\n</App>\n\n<App>\n  { 'Hello' }{ ' ' }{ 'World' }\n</App>\n\n<App\n  foo\n><Hello />\n</App>\n\n<App><Hello\n  foo\n/>\n</App>\n\n<App><Hello1 />\n     <Hello2 />\n     <Hello3 />\n</App>\n```\n\n----------------------------------------\n\nTITLE: Correct usage: Custom JSX pragma\nDESCRIPTION: This example demonstrates correct usage with a custom JSX pragma, where the appropriate variable is imported and used with JSX.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-uses-react.md#2025-04-14_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n/** @jsx Foo */\nvar Foo = require('foo');\n\nvar Hello = <div>Hello {this.props.name}</div>;\n```\n\n----------------------------------------\n\nTITLE: Batched setState Operations with Callback\nDESCRIPTION: Example showing how setState callbacks are properly evaluated in sequence with the correct state values.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/no-access-state-in-setstate.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nsetState({value: 1 + 1})\nsetState({value: 2 + 1})\n```\n\n----------------------------------------\n\nTITLE: Correct JSX Prop Formatting with 'never' Configuration\nDESCRIPTION: This snippet demonstrates the correct way to format JSX props when the rule is configured with { prop: \"never\" }. The JSX content in the prop is not wrapped in parentheses.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-wrap-multilines.md#2025-04-14_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\n<div foo={<div>\n    <p>Hello</p>\n  </div>}>\n  <p>Hello</p>\n</div>;\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of React Fragments in JSX (Element Mode)\nDESCRIPTION: This example shows incorrect usage of React fragments in JSX when the rule is set to 'element' mode. It demonstrates the use of shorthand syntax when the standard form is expected.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-fragments.md#2025-04-14_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<><Foo /></>\n```\n\n----------------------------------------\n\nTITLE: Correct TypeScript Props Interface\nDESCRIPTION: Example showing correctly ordered props in a TypeScript interface for a React component\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/sort-prop-types.md#2025-04-14_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\ntype Props = {\n  a: string,\n  b: any,\n  c: string,\n}\nclass Component extends React.Component<Props> {\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect String Ref Example\nDESCRIPTION: This example demonstrates the incorrect usage of string refs within a React component. The `ref` attribute is assigned a string value, which is considered legacy and discouraged in React. The component attempts to access the ref using `this.refs.hello`.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/no-string-refs.md#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nvar Hello = createReactClass({\n render: function() {\n  return <div ref=\"hello\">Hello, world.</div>;\n }\n});\n```\n\n----------------------------------------\n\nTITLE: ESLint Rule Configuration\nDESCRIPTION: JavaScript configuration example showing how to set up the jsx-indent-props rule in ESLint config.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-indent-props.md#2025-04-14_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n...\n\"react/jsx-indent-props\": [<enabled>, 'tab'|<number>|'first'|<object>]\n...\n```\n\n----------------------------------------\n\nTITLE: Correct JSX element placement with 'non-jsx' option in React\nDESCRIPTION: Examples of code that comply with the 'react/jsx-one-expression-per-line' rule when the 'allow' option is set to 'non-jsx'.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-one-expression-per-line.md#2025-04-14_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<App>Hello {someVariable}</App>\n\n<App>Hello {<Hello />} there!</App>\n```\n\n----------------------------------------\n\nTITLE: Incorrect Style Prop Usage in JSX\nDESCRIPTION: Examples of incorrect style prop usage in JSX where the style value is not an object. Shows cases with string literals, boolean values, and non-object variables.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/style-prop-object.md#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<div style=\"color: 'red'\" />\n\n<div style={true} />\n\n<Hello style={true} />\n\nconst styles = true;\n<div style={styles} />\n```\n\n----------------------------------------\n\nTITLE: Usage with destructureInSignature Option\nDESCRIPTION: Examples of correct and incorrect usage when destructureInSignature is set to 'always'.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/destructuring-assignment.md#2025-04-14_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Foo(props) {\n  const {a} = props;\n  return <>{a}</>\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Foo({a}) {\n  return <>{a}</>\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Foo(props) {\n  const {a} = props;\n  useProps(props); // NOTE: it is a bad practice to pass the props object anywhere else!\n  return <Goo a={a}/>\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect JSX Props Indentation with Different Configurations\nDESCRIPTION: Examples of incorrect prop indentation with various rule configurations including 2-space indentation, tab indentation, and first-prop alignment.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-indent-props.md#2025-04-14_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n// 2 spaces indentation\n// [2, 2]\n<Hello\n    firstName=\"John\"\n/>\n\n// tab indentation\n// [2, 'tab']\n<Hello\n  firstName=\"John\"\n/>\n\n// aligned with first prop\n// [2, 'first']\n<Hello\n  firstName=\"John\"\n    lastName=\"Doe\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Incorrect JSX closing tag location - misaligned indentation\nDESCRIPTION: Example of incorrect code where the closing tag is indented incorrectly, not aligning with the opening tag.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-closing-tag-location.md#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Hello>\n  marklar\n  </Hello>\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint rule for forbidding DOM props in JavaScript\nDESCRIPTION: Example of how to configure the 'react/forbid-dom-props' rule in an ESLint configuration file. It shows the structure for enabling the rule and specifying forbidden props.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/forbid-dom-props.md#2025-04-14_snippet_4\n\nLANGUAGE: js\nCODE:\n```\n...\n\"react/forbid-dom-props\": [<enabled>, { \"forbid\": [<string>|<object>] }]\n...\n```\n\n----------------------------------------\n\nTITLE: Incorrect JSX Indentation Examples with Various Configuration Options\nDESCRIPTION: Examples of JSX code with incorrect indentation that would violate the rule under specific configuration options including spaces, tabs, attribute checking, and logical expression indentation.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-indent.md#2025-04-14_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n// 2 spaces indentation\n// [2, 2]\n<App>\n    <Hello />\n</App>\n\n// tab indentation\n// [2, 'tab']\n<App>\n  <Hello />\n</App>\n\n// [2, 2, {checkAttributes: true}]\n<App render={\n  <Hello render={\n    (bar) => <div>hi</div>\n}\n  />\n  }>\n</App>\n\n// [2, 2, {indentLogicalExpressions: true}]\n<App>\n  {condition && (\n  <Hello />\n  )}\n</App>\n```\n\n----------------------------------------\n\nTITLE: Rule Configuration Options in JavaScript\nDESCRIPTION: Configuration syntax for the rule, showing how to set preferences for named and unnamed components. This defines the structure of the rule options object.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/function-component-definition.md#2025-04-14_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n...\n\"react/function-component-definition\": [<enabled>, {\n  \"namedComponents\": \"function-declaration\" | \"function-expression\" | \"arrow-function\" | Array<\"function-declaration\" | \"function-expression\" | \"arrow-function\">,\n  \"unnamedComponents\": \"function-expression\" | \"arrow-function\" | Array<\"function-expression\" | \"arrow-function\">\n}]\n...\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage When Reset Button Type is Disabled\nDESCRIPTION: Examples of code that violate the rule when the reset button type is specifically disabled in the configuration.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/button-has-type.md#2025-04-14_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nvar Hello = <button type=\"reset\">Hello</button>\nvar Hello = <button type={condition ? \"button\" : \"reset\"}>Hello</button>\n\nvar Hello = React.createElement('button', {type: 'reset'}, 'Hello')\nvar Hello = React.createElement('button', {type: condition ? \"button\" : \"reset\"}, 'Hello')\n```\n\n----------------------------------------\n\nTITLE: Incorrect JSX Child Element Spacing - Link Example\nDESCRIPTION: An example of incorrect JSX where a link element is placed adjacent to text without explicit spacing, which may lead to rendering issues.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-child-element-spacing.md#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<div>\n  Here is a\n  <a>link</a>\n</div>\n```\n\n----------------------------------------\n\nTITLE: ESLint Rule Configuration\nDESCRIPTION: Configuration options for the no-unescaped-entities rule showing how to customize forbidden characters.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/no-unescaped-entities.md#2025-04-14_snippet_6\n\nLANGUAGE: js\nCODE:\n```\n\"react/no-unescaped-entities\": [\"error\", {\"forbid\": [\">\", \"}\"]}],\n// or\n\"react/no-unescaped-entities\": [\"error\", {\"forbid\": [{\n  char: \">\",\n  alternatives: ['&gt;']\n}, {\n  char: \"}\",\n  alternatives: ['&#125;']\n}]}],\n```\n\n----------------------------------------\n\nTITLE: Style Prop Examples with Allowed Components\nDESCRIPTION: Examples showing incorrect and correct usage when specific components are allowed to have non-object style values through configuration.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/style-prop-object.md#2025-04-14_snippet_5\n\nLANGUAGE: js\nCODE:\n```\n<Hello style=\"a string\">\nReact.createElement(Hello, { style: \"some styling\" });\n\n<MyComponent style=\"a string\">\nReact.createElement(MyComponent, { style: \"some styling\" });\n```\n\n----------------------------------------\n\nTITLE: Incorrect TypeScript Props Interface\nDESCRIPTION: Example showing incorrectly ordered props in a TypeScript interface for a React component\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/sort-prop-types.md#2025-04-14_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\ntype Props = {\n  z: number,\n  a: any,\n  b: string\n}\nclass Component extends React.Component<Props> {\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Correct JSX spacing before closing bracket (never)\nDESCRIPTION: Examples of correct code when the rule is configured with 'never', demonstrating JSX elements without spaces before the closing bracket in various formats.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-space-before-closing.md#2025-04-14_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Hello/>\n<Hello firstname=\"John\"/>\n<Hello\n  firstName=\"John\"\n  lastName=\"Smith\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Basic PropTypes Definition Example\nDESCRIPTION: Demonstrates a basic React component with PropTypes definition that would trigger a warning since it's not using exact prop types.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/prefer-exact-props.md#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nclass Foo extends React.Component {\n  render() {\n    return <p>{this.props.bar}</p>;\n  }\n}\n\nFoo.propTypes = {\n  bar: PropTypes.string\n};\n```\n\n----------------------------------------\n\nTITLE: Correct JSX Bracket Spacing Examples with 'closingSlash: never'\nDESCRIPTION: Examples of JSX code that comply with the 'closingSlash: never' rule, showing proper spacing for self-closing tags and regular closing tags.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-tag-spacing.md#2025-04-14_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<App/>\n<input/>\n<Provider></Provider>\n```\n\n----------------------------------------\n\nTITLE: Configuring JSX Curly Spacing Rule in ESLint\nDESCRIPTION: Example of configuring the 'react/jsx-curly-spacing' rule in an ESLint configuration file. This snippet shows how to set the rule to enforce spaces inside curly braces.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-curly-spacing.md#2025-04-14_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n\"react/jsx-curly-spacing\": [2, {\"when\": \"always\"}]\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage with 'never' Setting\nDESCRIPTION: Examples of code that violate the rule when configured with 'never' setting.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/destructuring-assignment.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst MyComponent = ({id}) => {\n  return (<div id={id} />)\n};\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst MyComponent = (props) => {\n  const { id } = props;\n  return (<div id={id} />)\n};\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst Foo = class extends React.PureComponent {\n  render() {\n    const { title } = this.state;\n    return <div>{title}</div>;\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Correct Usage - Non-React Factory with Unsafe Method Names\nDESCRIPTION: Example showing allowed usage of similarly named methods in a non-React factory function.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/no-unsafe.md#2025-04-14_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nconst Foo = bar({\n  UNSAFE_componentWillMount: function() {},\n  UNSAFE_componentWillReceiveProps: function() {},\n  UNSAFE_componentWillUpdate: function() {}\n});\n```\n\n----------------------------------------\n\nTITLE: Incorrect Component Prop Usage - JSX\nDESCRIPTION: Examples of forbidden prop usage that will trigger rule violations. Shows components with className and style props.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/forbid-component-props.md#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Hello className='foo' />\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<Hello style={{color: 'red'}} />\n```\n\n----------------------------------------\n\nTITLE: Incorrect Boolean Prop Usage with always Configuration\nDESCRIPTION: Example showing incorrect usage of boolean props when rule is configured with 'always' or with 'never' and always:['personal'] setting.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-boolean-value.md#2025-04-14_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nvar Hello = <Hello personal />;\n```\n\n----------------------------------------\n\nTITLE: Incorrect React Render Method Implementation\nDESCRIPTION: Examples showing incorrect implementations of render methods that fail to return JSX content in both createReactClass and class component syntax.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/require-render-return.md#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nvar Hello = createReactClass({\n  render() {\n    <div>Hello</div>;\n  }\n});\n\nclass Hello extends React.Component {\n  render() {\n    <div>Hello</div>;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect JSX Props Usage Examples\nDESCRIPTION: Examples showing incorrect usage where too many props are placed on a single line, violating the rule.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-max-props-per-line.md#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Hello lastName=\"Smith\" firstName=\"John\" />;\n\n<Hello foo={{\n  bar\n}} baz />;\n```\n\n----------------------------------------\n\nTITLE: JSX with Incorrect Curly Spacing (Always)\nDESCRIPTION: Examples of incorrect JSX code when the 'react/jsx-curly-spacing' rule is configured with 'when: always'. These examples show improper spacing inside curly braces.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-curly-spacing.md#2025-04-14_snippet_3\n\nLANGUAGE: JSX\nCODE:\n```\n<Hello name={firstname} />;\n<Hello name={ firstname} />;\n<Hello name={firstname } />;\n```\n\n----------------------------------------\n\nTITLE: Incorrect JSX without required linebreaks (require configuration)\nDESCRIPTION: Examples of JSX code that violates the rule when configured with 'require' option. Shows instances where required linebreaks are missing inside curly braces.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-curly-newline.md#2025-04-14_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<div>\n  { foo &&\n    foo.bar }\n</div>\n\n<div>\n  { foo }\n</div>\n\n<div>\n  { foo\n  }\n</div>\n```\n\n----------------------------------------\n\nTITLE: Rule Configuration Options\nDESCRIPTION: Demonstrates the configuration options available for the jsx-handler-names rule including eventHandlerPrefix, eventHandlerPropPrefix, and other control flags\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-handler-names.md#2025-04-14_snippet_4\n\nLANGUAGE: js\nCODE:\n```\n\"react/jsx-handler-names\": [<enabled>, {\n  \"eventHandlerPrefix\": <eventHandlerPrefix>,\n  \"eventHandlerPropPrefix\": <eventHandlerPropPrefix>,\n  \"checkLocalVariables\": <boolean>,\n  \"checkInlineFunction\": <boolean>,\n  \"ignoreComponentNames\": Array<string>\n}]\n```\n\n----------------------------------------\n\nTITLE: Incorrect JSX Prop Formatting with 'parens' Configuration\nDESCRIPTION: This snippet shows an incorrect way of formatting JSX props when the rule is configured with { prop: \"parens\" }. The JSX content in the prop is not wrapped in parentheses.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-wrap-multilines.md#2025-04-14_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<div foo={<div>\n    <p>Hello</p>\n  </div>}>\n  <p>Hello</p>\n</div>;\n```\n\n----------------------------------------\n\nTITLE: Valid defaultProps Sorting Examples in React Components\nDESCRIPTION: Examples of React components with correctly sorted defaultProps declarations that comply with the ESLint rule requirements.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/sort-default-props.md#2025-04-14_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nvar Component = createReactClass({\n...\n  getDefaultProps: function() {\n    return {\n      a: \"a\",\n      b: \"b\",\n      c: \"c\"\n    };\n  },\n...\n});\n\nclass Component extends React.Component {\n  ...\n}\nComponent.defaultProps = {\n  a: \"a\",\n  b: \"b\",\n  c: \"c\"\n};\n\nclass Component extends React.Component {\n  static defaultProps = {\n    a: PropTypes.any,\n    b: PropTypes.any,\n    c: PropTypes.any\n  }\n  render() {\n    return <div />;\n  }\n}\n\nconst Component = (props) => (...);\nComponent.defaultProps = {\n  a: \"a\",\n  y: \"y\",\n  z: \"z\"\n};\n\nconst defaults = {\n  b: \"b\"\n};\nconst types = {\n  a: PropTypes.string,\n  b: PropTypes.string,\n  c: PropTypes.string'\n};\nfunction StatelessComponentWithSpreadInPropTypes({ a, b, c }) {\n  return <div>{a}{b}{c}</div>;\n}\nStatelessComponentWithSpreadInPropTypes.propTypes = types;\nStatelessComponentWithSpreadInPropTypes.defaultProps = {\n  a: \"a\",\n  c: \"c\",\n  ...defaults,\n};\n\nexport default class ClassWithSpreadInPropTypes extends BaseClass {\n  static propTypes = {\n    a: PropTypes.string,\n    b: PropTypes.string,\n    c: PropTypes.string,\n    d: PropTypes.string,\n    e: PropTypes.string,\n    f: PropTypes.string\n  }\n  static defaultProps = {\n    a: \"a\",\n    b: \"b\",\n    ...c.defaultProps,\n    e: \"e\",\n    f: \"f\",\n    ...d.defaultProps\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Function Component Definitions in JSX\nDESCRIPTION: Examples of function component definitions that would be flagged by the default rule configuration, which prefers function declarations for named components and function expressions for unnamed components.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/function-component-definition.md#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n// function expression for named component\nconst Component = function (props) {\n  return <div>{props.content}</div>;\n};\n\n// arrow function for named component\nconst Component = (props) => {\n  return <div>{props.content}</div>;\n};\n\n// arrow function for unnamed component\nfunction getComponent() {\n  return (props) => {\n    return <div>{props.content}</div>;\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect JSX rendering with complex condition and logical AND\nDESCRIPTION: Example of problematic code where a complex condition with OR operator could still result in falsy values when combined with AND operator.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-no-leaked-render.md#2025-04-14_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nconst Component = ({ numberA, numberB }) => {\n  return <div>{(numberA || numberB) && <Results>{numberA + numberB}</Results>}</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect JSX Property Placement - Multiline Config\nDESCRIPTION: Examples showing incorrect placement of first property when rule is configured with 'multiline' option.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-first-prop-new-line.md#2025-04-14_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<Hello personal\n    prop />\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<Hello foo={{\n}} />\n```\n\n----------------------------------------\n\nTITLE: Incorrect Event Handler Implementation - Example 2\nDESCRIPTION: Shows incorrect usage where the handler method doesn't follow the 'handle' prefix convention\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-handler-names.md#2025-04-14_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<MyComponent onChange={this.componentChanged} />\n```\n\n----------------------------------------\n\nTITLE: Incorrect JSX rendering with array index check\nDESCRIPTION: Example of problematic code where array index access could return falsy values leading to unexpected rendering.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-no-leaked-render.md#2025-04-14_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nconst Component = ({ elements }) => {\n  return <div>{elements[0] && <List elements={elements} />}</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of React Fragments in JSX (Syntax Mode)\nDESCRIPTION: This example demonstrates incorrect usage of React fragments in JSX when the rule is set to 'syntax' mode. It shows the use of the standard form when the shorthand syntax is expected.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-fragments.md#2025-04-14_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<React.Fragment><Foo /></React.Fragment>\n```\n\n----------------------------------------\n\nTITLE: Correct JSX Usage With Custom Pragma\nDESCRIPTION: An example of correct code where a custom pragma is used and the correct variable is imported.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/react-in-jsx-scope.md#2025-04-14_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n/** @jsx Foo.bar */\nvar Foo = require('foo');\n\nvar Hello = <div>Hello {this.props.name}</div>;\n```\n\n----------------------------------------\n\nTITLE: Mixed Stateless and Class Components Example\nDESCRIPTION: Example showing a combination of a stateless component with a class component, which is allowed when ignoreStateless is true.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/no-multi-comp.md#2025-04-14_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Hello(props) {\n  return <div>Hello {props.name}</div>;\n}\nclass HelloJohn extends React.Component {\n  render() {\n    return <Hello name=\"John\" />;\n  }\n}\nmodule.exports = HelloJohn;\n```\n\n----------------------------------------\n\nTITLE: Advanced Exceptions Configuration Example\nDESCRIPTION: Example of a more complex exceptions configuration that flips the behavior for specified components.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-props-no-spreading.md#2025-04-14_snippet_11\n\nLANGUAGE: js\nCODE:\n```\n{ \"html\": \"ignore\", \"exceptions\": [\"MyCustomComponent\", \"img\"] }\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of ES5 Syntax in 'always' Mode\nDESCRIPTION: Demonstrates an example of incorrect code when the rule is set to 'always' mode, using the ES5 createReactClass method instead of ES6 class syntax.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/prefer-es6-class.md#2025-04-14_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\nvar Hello = createReactClass({\n  render: function() {\n    return <div>Hello {this.props.name}</div>;\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Correct Usage - Non-React Class with Unsafe Method Names\nDESCRIPTION: Example showing allowed usage of similarly named methods in a non-React class.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/no-unsafe.md#2025-04-14_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nclass Foo extends Bar {\n  UNSAFE_componentWillMount() {}\n  UNSAFE_componentWillReceiveProps() {}\n  UNSAFE_componentWillUpdate() {}\n}\n```\n\n----------------------------------------\n\nTITLE: Unfixable Export Default Pattern in JavaScript\nDESCRIPTION: Example of a pattern that can't be auto-fixed by the rule because of JavaScript syntax constraints related to export default statements.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/function-component-definition.md#2025-04-14_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nexport default function getComponent () {\n  return <div />;\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Option Incorrect Examples\nDESCRIPTION: Examples of incorrect HTML tag usage when the html option is enabled.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/self-closing-comp.md#2025-04-14_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nvar contentContainer = <div className=\"content\"></div>;\n```\n\n----------------------------------------\n\nTITLE: Link Target Blank Example in JSX\nDESCRIPTION: Example of link usage with target=\"_blank\" that would be flagged when links option is enabled.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-no-target-blank.md#2025-04-14_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nvar Hello = <a target='_blank' href=\"https://example.com/\"></form>\n```\n\n----------------------------------------\n\nTITLE: Incorrect JSX Usage with Unescaped Characters\nDESCRIPTION: Example showing problematic JSX code where misplaced closing brackets lead to unintended text rendering.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/no-unescaped-entities.md#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<MyComponent\n  name=\"name\"\n  type=\"string\"\n  foo=\"bar\">  {/* oops! */}\n  x=\"y\">\n  Body Text\n</MyComponent>\n```\n\n----------------------------------------\n\nTITLE: Configuring react/jsx-no-undef Rule in ESLint\nDESCRIPTION: Example of how to configure the react/jsx-no-undef rule in an ESLint configuration file, including the allowGlobals option.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-no-undef.md#2025-04-14_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n...\n\"react/jsx-no-undef\": [<enabled>, { \"allowGlobals\": <boolean> }]\n...\n```\n\n----------------------------------------\n\nTITLE: Incorrect JSX with Unnecessary Newlines\nDESCRIPTION: Example of JSX code that violates the 'react/jsx-newline' rule when configured with { \"prevent\": true }. It shows unnecessary newlines between JSX elements and expressions.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-newline.md#2025-04-14_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<div>\n  <Button>{data.label}</Button>\n\n  <List />\n\n  <Button>\n    <IconPreview />\n    Button 2\n\n    <span></span>\n  </Button>\n\n  {showSomething === true && <Something />}\n\n  <Button>Button 3</Button>\n\n  {showSomethingElse === true ? (\n    <SomethingElse />\n  ) : (\n    <ErrorMessage />\n  )}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Custom render prop naming convention\nDESCRIPTION: This demonstrates how to specify an alternative naming pattern for render props using the `propNamePattern` option. Here, the rule is configured to allow component creation inside props that end with \"Renderer\", making components like `rowRenderer` valid.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/no-unstable-nested-components.md#2025-04-14_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\n<Table\n  rowRenderer={(rowData) => <Row data={rowData} />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Correct JSX Expression Usage\nDESCRIPTION: Example demonstrating how to use JSX expressions to include special characters safely.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/no-unescaped-entities.md#2025-04-14_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<div> {'>'} </div>\n```\n\n----------------------------------------\n\nTITLE: Incorrect Boolean Prop Usage with never Configuration\nDESCRIPTION: Example showing incorrect usage of boolean props when rule is configured with 'never' or with 'always' and never:['personal'] setting.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-boolean-value.md#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nvar Hello = <Hello personal={true} />;\n```\n\n----------------------------------------\n\nTITLE: Incorrect JSX Closing Bracket Placement\nDESCRIPTION: Examples of JSX code that violate the default rule settings for closing bracket location.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-closing-bracket-location.md#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Hello\n  lastName=\"Smith\"\n  firstName=\"John\" />;\n\n<Hello\n  lastName=\"Smith\"\n  firstName=\"John\"\n  />;\n```\n\n----------------------------------------\n\nTITLE: Incorrect code examples with different configurations\nDESCRIPTION: Examples of incorrect code based on different rule configurations, showing both tag-aligned and line-aligned errors.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-closing-tag-location.md#2025-04-14_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n// 'jsx-closing-tag-location': 1\n// 'jsx-closing-tag-location': [1, 'tag-aligned']\n// 'jsx-closing-tag-location': [1, {\"location\":'tag-aligned'}]\n<Say\n  firstName=\"John\"\n  lastName=\"Smith\">\n  Hello\n  </Say>;\n\n// 'jsx-closing-tag-location': [1, 'tag-aligned']\n// 'jsx-closing-tag-location': [1, {\"location\":'tag-aligned'}]\nconst App = <Bar>\n  Foo\n</Bar>;\n\n\n// 'jsx-closing-tag-location': [1, 'line-aligned']\n// 'jsx-closing-tag-location': [1, {\"location\":'line-aligned'}]\nconst App = <Bar>\n  Foo\n            </Bar>;\n\n\n```\n\n----------------------------------------\n\nTITLE: ESLint Rule Configuration\nDESCRIPTION: Configuration structure for the boolean-prop-naming rule showing available options and their format.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/boolean-prop-naming.md#2025-04-14_snippet_4\n\nLANGUAGE: js\nCODE:\n```\n\"react/boolean-prop-naming\": [<enabled>, {\n  \"propTypeNames\": Array<string>,\n  \"rule\": <string>,\n  \"message\": <string>,\n  \"validateNested\": <boolean>\n}]\n```\n\n----------------------------------------\n\nTITLE: Incorrect Fragment Shorthand in map() Without Keys\nDESCRIPTION: Using map() with fragment shorthand syntax without keys, which is flagged when checkFragmentShorthand option is enabled.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-key.md#2025-04-14_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\ndata.map(x => <>{x}</>);\n```\n\n----------------------------------------\n\nTITLE: ESLint Rule Configuration\nDESCRIPTION: Configuration options for the sort-prop-types ESLint rule\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/sort-prop-types.md#2025-04-14_snippet_6\n\nLANGUAGE: js\nCODE:\n```\n...\n\"react/sort-prop-types\": [<enabled>, {\n  \"callbacksLast\": <boolean>,\n  \"ignoreCase\": <boolean>,\n  \"requiredFirst\": <boolean>,\n  \"sortShapeProp\": <boolean>,\n  \"noSortAlphabetically\": <boolean>,\n  \"checkTypes\": <boolean>\n}]\n...\n```\n\n----------------------------------------\n\nTITLE: HTML Tag Spreading Example with 'custom' Option Set to 'ignore'\nDESCRIPTION: Example of incorrect JSX code when the 'custom' option is set to 'ignore', as it still enforces the rule on HTML tags.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-props-no-spreading.md#2025-04-14_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<img {...props} />\n```\n\n----------------------------------------\n\nTITLE: Incorrect JSX with Extra Space After Tag Name\nDESCRIPTION: This example shows JSX code with multiple spaces between the component name and the first prop, which violates the rule.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-props-no-multi-spaces.md#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<App  spacy />\n```\n\n----------------------------------------\n\nTITLE: Invalid Arrow Function Lifecycle Methods in React Components\nDESCRIPTION: Examples of React components using arrow functions for lifecycle methods, which are considered invalid by this rule. Shows both class component and createReactClass implementations.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/no-arrow-function-lifecycle.md#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nclass Hello extends React.Component {\n  render = () => {\n    return <div />;\n  }\n}\n\nvar AnotherHello = createReactClass({\n  render: () => {\n    return <div />;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Incorrect JSX Bracket Spacing Examples with 'beforeSelfClosing: never'\nDESCRIPTION: Examples of JSX code that violate the 'beforeSelfClosing: never' rule, which forbids spaces before the closing bracket of self-closing tags.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-tag-spacing.md#2025-04-14_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n<Hello />\n<Hello firstName=\"John\" />\n```\n\n----------------------------------------\n\nTITLE: Ref Props Exception Examples\nDESCRIPTION: Examples of allowed usage when ignoreRefs option is enabled.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-no-bind.md#2025-04-14_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<Foo ref={ref => { this._div = ref; }} />\n<Foo ref={this._refCallback.bind(this)} />\n```\n\n----------------------------------------\n\nTITLE: Incorrect JSX Bracket Spacing Examples with 'closingSlash: never'\nDESCRIPTION: Examples of JSX code that violate the 'closingSlash: never' rule, which forbids spaces between the closing slash and angle bracket in self-closing tags or closing tags.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-tag-spacing.md#2025-04-14_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<App/ >\n<input/\n>\n<Provider>< /Provider>\n```\n\n----------------------------------------\n\nTITLE: Invalid Namespace Usage in React Components\nDESCRIPTION: Examples of React component usage that violate the no-namespace rule by using namespace prefixes.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/no-namespace.md#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<ns:TestComponent />\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<Ns:TestComponent />\n```\n\n----------------------------------------\n\nTITLE: Rule Configuration Options\nDESCRIPTION: ESLint rule configuration object showing available options for the no-children-prop rule.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/no-children-prop.md#2025-04-14_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n\"react/no-children-prop\": [<enabled>, {\n  \"allowFunctions\": <boolean> || false\n}]\n```\n\n----------------------------------------\n\nTITLE: ESLint Rule Configuration for react/display-name\nDESCRIPTION: Configuration options for the react/display-name ESLint rule showing how to enable the rule and set options.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/display-name.md#2025-04-14_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n...\n\"react/display-name\": [<enabled>, { \"ignoreTranspilerName\": <boolean>, \"checkContextObjects\": <boolean> }]\n...\n```\n\n----------------------------------------\n\nTITLE: Defining rule options in TypeScript\nDESCRIPTION: TypeScript interface defining the configuration options for the react/jsx-curly-newline rule. It allows specifying linebreak behavior for both multiline and singleline JSX expressions.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-curly-newline.md#2025-04-14_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\n{\n  multiline: \"consistent\" | \"forbid\" | \"require\", // default to 'consistent'\n  singleline: \"consistent\" | \"forbid\" | \"require\", // default to 'consistent'\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Allowed Extensions for JSX\nDESCRIPTION: ESLint configuration to allow both .js and .jsx extensions for files containing JSX.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-filename-extension.md#2025-04-14_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n\"rules\": {\n  \"react/jsx-filename-extension\": [1, { \"extensions\": [\".js\", \".jsx\"] }]\n}\n```\n\n----------------------------------------\n\nTITLE: ESLint Rule Configuration\nDESCRIPTION: Example configuration for the react/jsx-no-literals rule with various options including noStrings, allowedStrings, ignoreProps, and noAttributeStrings.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-no-literals.md#2025-04-14_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n\"react/jsx-no-literals\": [<enabled>, {\"noStrings\": true, \"allowedStrings\": [\"allowed\"], \"ignoreProps\": false, \"noAttributeStrings\": true }]\n```\n\n----------------------------------------\n\nTITLE: Rule Configuration Options\nDESCRIPTION: JavaScript configuration examples showing how to set up the rule with different options.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-max-props-per-line.md#2025-04-14_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n...\n\"react/jsx-max-props-per-line\": [<enabled>, { \"maximum\": <number>, \"when\": <string> }]\n...\n\n// OR\n\n...\n\"react/jsx-max-props-per-line\": [<enabled>, { \"maximum\": { \"single\": <number>, \"multi\": <number> } }]\n...\n```\n\n----------------------------------------\n\nTITLE: Rule Configuration with Settings Integration\nDESCRIPTION: Configuration examples showing how to include global shared settings in the rule configuration.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-no-script-url.md#2025-04-14_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"react/jsx-no-script-url\": [\n    \"error\",\n    [\n      {\n        \"name\": \"Link\",\n        \"props\": [\"to\"]\n      },\n      {\n        \"name\": \"Foo\",\n        \"props\": [\"href\", \"to\"]\n      }\n    ],\n    { \"includeFromSettings\": true }\n  ]\n}\n```\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  // same as [\"error\", [], { \"includeFromSettings\": true }]\n  \"react/jsx-no-script-url\": [\"error\", { \"includeFromSettings\": true }]\n}\n```\n\n----------------------------------------\n\nTITLE: ESLint Rule Configuration for React PropTypes (JavaScript)\nDESCRIPTION: Configuration options for the ESLint rule. It shows how to enable the rule and specify which prop types to forbid, as well as options to check contextTypes and childContextTypes.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/forbid-prop-types.md#2025-04-14_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n...\n\"react/forbid-prop-types\": [<enabled>, { \"forbid\": [<string>], \"checkContextTypes\": <boolean>, \"checkChildContextTypes\": <boolean> }]\n...\n```\n\n----------------------------------------\n\nTITLE: Incorrect JSX Property Placement - Multiline-Multiprop Config\nDESCRIPTION: Examples showing incorrect placement of first property when rule is configured with 'multiline-multiprop' option.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-first-prop-new-line.md#2025-04-14_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<Hello foo={{\n    }}\n    bar />\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of ES6 Class Syntax in 'never' Mode\nDESCRIPTION: Illustrates an example of incorrect code when the rule is set to 'never' mode, using ES6 class syntax instead of ES5 createReactClass method.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/prefer-es6-class.md#2025-04-14_snippet_3\n\nLANGUAGE: JSX\nCODE:\n```\nclass Hello extends React.Component {\n  render() {\n    return <div>Hello {this.props.name}</div>;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Usage with Aliases - Non-React Factory\nDESCRIPTION: Example showing allowed usage of lifecycle method aliases in a non-React factory when checkAliases is true.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/no-unsafe.md#2025-04-14_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nconst Foo = bar({\n  componentWillMount: function() {},\n  componentWillReceiveProps: function() {},\n  componentWillUpdate: function() {}\n});\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage: defaultProps with Flow Type Annotations\nDESCRIPTION: This example shows incorrect usage with Flow type annotations where 'foo' is required but has a default value, contradicting the type definition.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/default-props-match-prop-types.md#2025-04-14_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\ntype Props = {\n  foo: string,\n  bar?: string\n};\n\nfunction MyStatelessComponent(props: Props) {\n  return <div>Hello {props.foo} {props.bar}</div>;\n}\n\nMyStatelessComponent.defaultProps = {\n  foo: \"foo\",\n  bar: \"bar\"\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect JSX with inconsistent linebreaks (consistent configuration)\nDESCRIPTION: Examples of JSX code that violates the rule when configured with 'consistent' option. The examples show inconsistent linebreak usage inside curly braces which is not allowed.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-curly-newline.md#2025-04-14_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<div>\n  { foo\n  }\n</div>\n\n<div>\n  {\n    foo }\n</div>\n\n<div>\n  { foo &&\n    foo.bar\n  }\n</div>\n```\n\n----------------------------------------\n\nTITLE: Rule Configuration Options\nDESCRIPTION: Example configuration object showing available options for the jsx-pascal-case rule.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-pascal-case.md#2025-04-14_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n...\n\"react/jsx-pascal-case\": [<enabled>, { allowAllCaps: <allowAllCaps>, allowNamespace: <allowNamespace>, allowLeadingUnderscore: <allowLeadingUnderscore>, ignore: <ignore> }]\n...\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage: Forbidden 'id' prop on DOM element in JSX\nDESCRIPTION: Example of incorrect code where the 'id' prop is used on a div element when it's forbidden by the rule configuration.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/forbid-dom-props.md#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<div id='Joe' />\n```\n\n----------------------------------------\n\nTITLE: Function Children Warning Examples\nDESCRIPTION: Examples of patterns that trigger warnings when using function children with allowFunctions option.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/no-children-prop.md#2025-04-14_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<MyComponent>{data => data.value}</MyComponent>\nReact.createElement(MyComponent, {}, data => data.value)\n```\n\n----------------------------------------\n\nTITLE: Incorrect JSX Spacing Examples with 'never' Option\nDESCRIPTION: Examples of JSX code that violate the 'react/jsx-equals-spacing' rule when configured with the 'never' option. These examples show incorrect spacing around equal signs in JSX attributes.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-equals-spacing.md#2025-04-14_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Hello name = {firstname} />;\n<Hello name ={firstname} />;\n<Hello name= {firstname} />;\n```\n\n----------------------------------------\n\nTITLE: Enabling React Plugin and JSX Support in ESLint\nDESCRIPTION: JSON configuration to enable the React plugin and JSX support in ESLint parser options.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/README.md#2025-04-14_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\n    \"react\"\n  ],\n  \"parserOptions\": {\n    \"ecmaFeatures\": {\n      \"jsx\": true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Template Literal Ref Example\nDESCRIPTION: This example demonstrates incorrect usage of template literals for refs when `noTemplateLiterals` is set to `true`. The `ref` attribute is assigned a template literal, which is flagged as an error by the rule.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/no-string-refs.md#2025-04-14_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nvar Hello = createReactClass({\n render: function() {\n  return <div ref={`hello`}>Hello, world.</div>;\n }\n});\n```\n\n----------------------------------------\n\nTITLE: Rule Configuration Format\nDESCRIPTION: JSON configuration format for the no-unsafe rule showing the checkAliases option.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/no-unsafe.md#2025-04-14_snippet_4\n\nLANGUAGE: json5\nCODE:\n```\n\"react/no-unsafe\": [<enabled>, { \"checkAliases\": <boolean> }]\n```\n\n----------------------------------------\n\nTITLE: Correct JSX one-line format\nDESCRIPTION: Example of correct code where the JSX element and its content are all on a single line.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-closing-tag-location.md#2025-04-14_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Hello>marklar</Hello>\n```\n\n----------------------------------------\n\nTITLE: HTML Option Correct Examples\nDESCRIPTION: Examples of correct HTML tag usage when the html option is enabled.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/self-closing-comp.md#2025-04-14_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nvar contentContainer = <div className=\"content\" />;\n\nvar contentContainer = <div className=\"content\"><div /></div>;\n\nvar intentionalSpace = <div>{' '}</div>;\n```\n\n----------------------------------------\n\nTITLE: Correct JSX without linebreaks (never configuration)\nDESCRIPTION: Examples of JSX code that follows the rule when configured with 'never' option. Shows JSX expressions without linebreaks directly inside curly braces.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-curly-newline.md#2025-04-14_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<div>\n  { foo &&\n    foo.bar }\n</div>\n\n<div>\n  { foo }\n</div>\n```\n\n----------------------------------------\n\nTITLE: Incorrect Examples with ignoreTranspilerName Option\nDESCRIPTION: Examples of React components that violate the display-name rule when ignoreTranspilerName option is set to true.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/display-name.md#2025-04-14_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nvar Hello = createReactClass({\n  render: function() {\n    return <div>Hello {this.props.name}</div>;\n  }\n});\nmodule.exports = Hello;\n```\n\nLANGUAGE: jsx\nCODE:\n```\nexport default class Hello extends React.Component {\n  render() {\n    return <div>Hello {this.props.name}</div>;\n  }\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nmodule.exports = createReactClass({\n  render: function() {\n    return <div>Hello {this.props.name}</div>;\n  }\n});\n```\n\nLANGUAGE: jsx\nCODE:\n```\nexport default class extends React.Component {\n  render() {\n    return <div>Hello {this.props.name}</div>;\n  }\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nfunction HelloComponent() {\n  return createReactClass({\n    render: function() {\n      return <div>Hello {this.props.name}</div>;\n    }\n  });\n}\nmodule.exports = HelloComponent();\n```\n\n----------------------------------------\n\nTITLE: Element Overrides with Nested Components\nDESCRIPTION: Example showing how to use elementOverrides with the Text component allowing nested HTML elements with string content.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-no-literals.md#2025-04-14_snippet_4\n\nLANGUAGE: js\nCODE:\n```\n// \"react/jsx-no-literals\": [<enabled>, {\"elementOverrides\": { \"Text\": {\"allowElement\": true} }}]\n\nvar World = <Text>Hello <a href=\"a\">world</a></Text>;\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of JSX in .jsx File\nDESCRIPTION: An example of correct code that follows the rule by using JSX in a .jsx file.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-filename-extension.md#2025-04-14_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n// filename: MyComponent.jsx\nfunction MyComponent() {\n  return <div />;\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect JSX Usage with Strict Configuration\nDESCRIPTION: Examples of code that violates the rule with a strict configuration including noStrings, noAttributeStrings, and ignoreProps options.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-no-literals.md#2025-04-14_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nvar Hello = <div>test</div>;\n```\n\nLANGUAGE: jsx\nCODE:\n```\nvar Hello = <div>{'test'}</div>;\n```\n\nLANGUAGE: jsx\nCODE:\n```\nvar Hello = <div>\n  {'test'}\n</div>;\n```\n\nLANGUAGE: jsx\nCODE:\n```\nvar Hello = <div>\n<img alt=\"test\"> </img>\n</div>;\n```\n\nLANGUAGE: jsx\nCODE:\n```\nvar Hello = <div class='xx' />;\n```\n\nLANGUAGE: jsx\nCODE:\n```\nvar Hello = <div class={'xx'} />;\n```\n\nLANGUAGE: jsx\nCODE:\n```\nvar Hello = <div class={`xx`} />;\n```\n\n----------------------------------------\n\nTITLE: Incorrect Flow Props Definition in React Components\nDESCRIPTION: Examples of incorrect prop type definitions in Flow that are not read-only. This includes class components, functional components, and arrow function components.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/prefer-read-only-props.md#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\ntype Props = {\n  name: string,\n}\nclass Hello extends React.Component<Props> {\n  render () {\n    return <div>Hello {this.props.name}</div>;\n  }\n}\n\nfunction Hello(props: {-name: string}) {\n  return <div>Hello {props.name}</div>;\n}\n\nconst Hello = (props: {|name: string|}) => (\n  <div>Hello {props.name}</div>\n);\n```\n\n----------------------------------------\n\nTITLE: Incorrect Unescaped Greater Than Symbol\nDESCRIPTION: Example of incorrect usage where the greater than symbol is not properly escaped in JSX.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/no-unescaped-entities.md#2025-04-14_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<div> > </div>\n```\n\n----------------------------------------\n\nTITLE: Incorrect JSX spacing before closing bracket (never)\nDESCRIPTION: Examples of incorrect code when the rule is configured with 'never', showing JSX elements with spaces before the closing bracket.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-space-before-closing.md#2025-04-14_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Hello />\n<Hello firstName=\"John\" />\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage: Forbidden 'style' prop on DOM element in JSX\nDESCRIPTION: Example of incorrect code where the 'style' prop is used on a div element when it's forbidden by the rule configuration.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/forbid-dom-props.md#2025-04-14_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<div style={{color: 'red'}} />\n```\n\n----------------------------------------\n\nTITLE: Incorrect PropTypes Usage - Unused Name Prop\nDESCRIPTION: Example showing a React component with an unused name propType definition, which violates the rule.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/no-unused-prop-types.md#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nclass Hello extends React.Component {\n  render() {\n    return <div>Hello Bob</div>;\n  }\n}\n\nHello.propTypes = {\n  name: PropTypes.string\n};\n```\n\n----------------------------------------\n\nTITLE: Incorrect JSX Bracket Spacing Examples with 'beforeSelfClosing: always'\nDESCRIPTION: Examples of JSX code that violate the 'beforeSelfClosing: always' rule, which requires a space before the closing bracket of self-closing tags.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-tag-spacing.md#2025-04-14_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<Hello/>\n<Hello firstname=\"John\"/>\n```\n\n----------------------------------------\n\nTITLE: Rule Configuration Options\nDESCRIPTION: Example showing the configuration syntax for the ESLint rule.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/no-will-update-set-state.md#2025-04-14_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n...\n\"react/no-will-update-set-state\": [<enabled>, <mode>]\n...\n```\n\n----------------------------------------\n\nTITLE: Incorrect JSX nesting with default depth limit\nDESCRIPTION: Example of JSX code that exceeds the default maximum depth limit, demonstrating deeply nested components that would violate the rule.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-max-depth.md#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<App>\n  <Foo>\n    <Bar>\n      <Baz />\n    </Bar>\n  </Foo>\n</App>\n\n```\n\n----------------------------------------\n\nTITLE: Incorrect JSX Usage With Custom Pragma\nDESCRIPTION: An example of incorrect code where JSX is used with a custom pragma, but the wrong variable is imported.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/react-in-jsx-scope.md#2025-04-14_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n/** @jsx Foo.bar */\nvar React = require('react');\n\nvar Hello = <div>Hello {this.props.name}</div>;\n```\n\n----------------------------------------\n\nTITLE: False Positive Example - SFC Helper Methods\nDESCRIPTION: Example demonstrating a known limitation where the rule produces false positives with Stateless Function Components helper methods.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/no-unused-prop-types.md#2025-04-14_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nfunction AComponent(props) {\n  function helperRenderer(aProp) { // is considered SFC\n    return (\n      <span>{aProp}{props.bProp}</span>\n    );\n  }\n\n  return (\n    <div>\n      {helperRenderer(props.aProp)}\n    </div>\n  );\n}\n\nAComponent.propTypes = {\n  aProp: PropTypes.string,\n  bProp: PropTypes.string // bProp is defined but never used\n};\n```\n\n----------------------------------------\n\nTITLE: Rule Configuration Example\nDESCRIPTION: Example of the rule configuration object showing how to set allowed components that can receive non-object style values.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/style-prop-object.md#2025-04-14_snippet_4\n\nLANGUAGE: js\nCODE:\n```\n{\n  \"allow\": [\"MyComponent\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Examples of incorrect defaultProps sorting in React components\nDESCRIPTION: Examples showing various ways of declaring defaultProps that violate the alphabetical sorting rule. Includes class components, functional components, and components with spread operators in their defaultProps.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-sort-default-props.md#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nvar Component = createReactClass({\n...\n  getDefaultProps: function() {\n    return {\n      z: \"z\",\n      a: \"a\",\n      b: \"b\"\n    };\n  },\n...\n});\n\nclass Component extends React.Component {\n  ...\n}\nComponent.defaultProps = {\n  z: \"z\",\n  a: \"a\",\n  b: \"b\"\n};\n\nclass Component extends React.Component {\n  static defaultProps = {\n    z: \"z\",\n    y: \"y\",\n    a: \"a\"\n  }\n  render() {\n    return <div />;\n  }\n}\n\nconst Component = (props) => (...);\nComponent.defaultProps = {\n  z: \"z\",\n  y: \"y\",\n  a: \"a\"\n};\n\nconst defaults = {\n  b: \"b\"\n};\nconst types = {\n  a: PropTypes.string,\n  b: PropTypes.string,\n  c: PropTypes.string'\n};\nfunction StatelessComponentWithSpreadInPropTypes({ a, b, c }) {\n  return <div>{a}{b}{c}</div>;\n}\nStatelessComponentWithSpreadInPropTypes.propTypes = types;\nStatelessComponentWithSpreadInPropTypes.defaultProps = {\n  c: \"c\",\n  a: \"a\",\n  ...defaults,\n};\n\nexport default class ClassWithSpreadInPropTypes extends BaseClass {\n  static propTypes = {\n    a: PropTypes.string,\n    b: PropTypes.string,\n    c: PropTypes.string,\n    d: PropTypes.string,\n    e: PropTypes.string,\n    f: PropTypes.string\n  }\n  static defaultProps = {\n    b: \"b\",\n    a: \"a\",\n    ...c.defaultProps,\n    f: \"f\",\n    e: \"e\",\n    ...d.defaultProps\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Example with Exceptions Configuration\nDESCRIPTION: Example of JSX code that violates the rule when exceptions are configured, as spreading is not allowed on non-excepted components.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-props-no-spreading.md#2025-04-14_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\n<MyCustomComponent {...props} />\n```\n\n----------------------------------------\n\nTITLE: Configuring the 'react/jsx-one-expression-per-line' rule in ESLint\nDESCRIPTION: Example of how to configure the 'react/jsx-one-expression-per-line' rule in an ESLint configuration file, including the 'allow' option.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-one-expression-per-line.md#2025-04-14_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n...\n\"react/jsx-one-expression-per-line\": [<enabled>, { \"allow\": \"none\"|\"literal\"|\"single-child\" }]\n...\n```\n\n----------------------------------------\n\nTITLE: Rule Configuration Options\nDESCRIPTION: JavaScript configuration example for the 'react/jsx-props-no-spreading' rule, showing available options for customizing rule behavior.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-props-no-spreading.md#2025-04-14_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n...\n\"react/jsx-props-no-spreading\": [<enabled>, {\n    \"html\": \"ignore\" | \"enforce\",\n    \"custom\": \"ignore\" | \"enforce\",\n    \"explicitSpread\": \"ignore\" | \"enforce\",\n    \"exceptions\": [<string>]\n}]\n...\n```\n\n----------------------------------------\n\nTITLE: Element Overrides with Control over Nested Elements\nDESCRIPTION: Example demonstrating how to configure elementOverrides with the applyToNestedElements option set to false.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-no-literals.md#2025-04-14_snippet_5\n\nLANGUAGE: js\nCODE:\n```\n// \"react/jsx-no-literals\": [<enabled>, {\"elementOverrides\": { \"Text\": {\"allowElement\": true, \"applyToNestedElements\": false} }}]\n\nvar linkText = 'world';\nvar World = <Text>Hello <a href=\"a\">{linkText}</a></Text>;\n```\n\n----------------------------------------\n\nTITLE: Enforcing State Initialization with Class Property - Incorrect Example\nDESCRIPTION: This snippet illustrates the improper initialization of state using a constructor in 'never' mode, which requires initialization with a class property instead.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/state-in-constructor.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nclass Foo extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = { bar: 0 }\n  }\n  render() {\n    return <div>Foo</div>\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Props Usage Across Components\nDESCRIPTION: Example showing prop type definitions shared between components where some props are unused in certain components.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/no-unused-prop-types.md#2025-04-14_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\ntype Props = {\n  firstname: string;\n  lastname: string;  // lastname isn't used by the Hello component\n};\n\nclass Hello extends React.Component<Props> {\n  render() {\n    return <div>Hello {this.props.firstname}</div>;\n  }\n}\n\nclass Greetings extends React.Component<Props> {\n  render() {\n    return <div>Greetings  {this.props.firstname} {this.props.lastname}</div>;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: ESLint Rule Configuration (JavaScript)\nDESCRIPTION: This snippet shows how to configure the 'no-did-mount-set-state' rule in ESLint settings. It allows enabling the rule and specifying the mode.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/no-did-mount-set-state.md#2025-04-14_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n...\n\"react/no-did-mount-set-state\": [<enabled>, <mode>]\n...\n```\n\n----------------------------------------\n\nTITLE: Callbacks Last Option Example\nDESCRIPTION: Example showing prop types ordered with callback props at the end\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/sort-prop-types.md#2025-04-14_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nvar Component = createReactClass({\n  propTypes: {\n    a: PropTypes.number,\n    z: PropTypes.string,\n    onBar: PropTypes.func,\n    onFoo: PropTypes.func,\n  },\n...\n});\n```\n\n----------------------------------------\n\nTITLE: Incorrect JSX with linebreaks (never configuration)\nDESCRIPTION: Examples of JSX code that violates the rule when configured with 'never' option. Shows instances where linebreaks are present inside curly braces, which is forbidden with this configuration.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-curly-newline.md#2025-04-14_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<div>\n  {\n    foo &&\n    foo.bar\n  }\n</div>\n\n<div>\n  {\n    foo\n  }\n</div>\n\n<div>\n  { foo\n  }\n</div>\n```\n\n----------------------------------------\n\nTITLE: ESLint Rule Configuration Options\nDESCRIPTION: Shows the available configuration options for the jsx-first-prop-new-line rule.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-first-prop-new-line.md#2025-04-14_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\n\"react/jsx-first-prop-new-line\": `\"always\" | \"never\" | \"multiline\" | \"multiprop\" | \"multiline-multiprop\"`\n```\n\n----------------------------------------\n\nTITLE: Is-Only Pattern Configuration\nDESCRIPTION: Configuration example for a naming pattern that only enforces the 'is' prefix.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/boolean-prop-naming.md#2025-04-14_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n\"react/boolean-prop-naming\": [\"error\", { \"rule\": \"^is[A-Z]([A-Za-z0-9]?)+\" }]\n```\n\n----------------------------------------\n\nTITLE: Invalid Usage - Unused Method in React Component\nDESCRIPTION: Example showing a React class component with an unused handleClick method, which triggers a warning from the rule.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/no-unused-class-component-methods.md#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nclass Foo extends React.Component {\n  handleClick() {}\n  render() {\n    return null;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect JSX Property Placement - Never Config\nDESCRIPTION: Examples showing incorrect placement of first property when rule is configured with 'never' option.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-first-prop-new-line.md#2025-04-14_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Hello\n    personal />\n\n<Hello\n    personal\n/>\n```\n\n----------------------------------------\n\nTITLE: Element Overrides with Different String Rules\nDESCRIPTION: Example showing how to override the noStrings option for specific components in the configuration.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-no-literals.md#2025-04-14_snippet_6\n\nLANGUAGE: js\nCODE:\n```\n// \"react/jsx-no-literals\": [<enabled>, {\"noStrings\": true, \"elementOverrides\": { \"Button\": {\"noStrings\": false} }}]\n// OR\n// \"react/jsx-no-literals\": [<enabled>, {\"noStrings\": true, \"elementOverrides\": { \"Button\": {} }}]\n\nvar test = 'test'\nvar Hello = <div>{test}</div>;\nvar World = <Button>{'test'}</Button>;\n```\n\n----------------------------------------\n\nTITLE: Incorrect Quotation Mark Placement\nDESCRIPTION: Example showing how misplaced closing brackets can lead to quotation marks being rendered as text.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/no-unescaped-entities.md#2025-04-14_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<MyComponent\n  a=\"b\">  {/* oops! */}\n  c=\"d\"\n  Intended body text\n</MyComponent>\n```\n\n----------------------------------------\n\nTITLE: Custom Event Handler Ordering Configuration\nDESCRIPTION: Example configuration that places event handlers before render method\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/sort-comp.md#2025-04-14_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n\"react/sort-comp\": [1, {\n  order: [\n    'static-methods',\n    'lifecycle',\n    '/^on.+$/',\n    'render',\n    'everything-else'\n  ]\n}]\n```\n\n----------------------------------------\n\nTITLE: Configuring JSX Newline Rule in ESLint\nDESCRIPTION: JSON configuration for the 'react/jsx-newline' rule in ESLint. It shows how to enable the rule and set options for preventing newlines and allowing multilines.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-newline.md#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"react/jsx-newline\": [<enabled>, { \"prevent\": <boolean>, \"allowMultilines\": <boolean> }]\n```\n\n----------------------------------------\n\nTITLE: Component Option Incorrect Examples\nDESCRIPTION: Examples of incorrect component usage when the component option is enabled.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/self-closing-comp.md#2025-04-14_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nvar HelloJohn = <Hello name=\"John\"></Hello>;\n```\n\n----------------------------------------\n\nTITLE: Maximum Props Example - Incorrect\nDESCRIPTION: Example showing incorrect usage with maximum prop limit set to 2.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-max-props-per-line.md#2025-04-14_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n// [1, { \"maximum\": 2 }]\n<Hello firstName=\"John\" lastName=\"Smith\" tel={5555555} />;\n```\n\n----------------------------------------\n\nTITLE: Incorrect Example with Advanced Exceptions Configuration\nDESCRIPTION: Example of JSX code that violates the rule when using advanced exceptions configuration.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-props-no-spreading.md#2025-04-14_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\n<img {...props} />\n```\n\n----------------------------------------\n\nTITLE: Rule Configuration Options\nDESCRIPTION: Example of how to configure the rule options in ESLint configuration.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/prefer-stateless-function.md#2025-04-14_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n...\n\"react/prefer-stateless-function\": [<enabled>, { \"ignorePureComponents\": <ignorePureComponents> }]\n...\n```\n\n----------------------------------------\n\nTITLE: Nested Validation Configuration\nDESCRIPTION: Configuration example for enabling validation of nested boolean props.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/boolean-prop-naming.md#2025-04-14_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\n\"react/boolean-prop-naming\": [\"error\", { \"validateNested\": true }]\n```\n\n----------------------------------------\n\nTITLE: Correct Usage - Class Component with Conditional Render\nDESCRIPTION: Example of a valid class component for React <15.0.0 that includes conditional rendering returning null.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/prefer-stateless-function.md#2025-04-14_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nclass Foo extends React.Component {\n  render() {\n    if (!this.props.foo) {\n      return null\n    }\n    return <div>{this.props.foo}</div>;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring the react/forbid-elements ESLint Rule\nDESCRIPTION: Shows the basic configuration format for the react/forbid-elements rule, which can be enabled with a list of forbidden elements.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/forbid-elements.md#2025-04-14_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n...\n\"react/forbid-elements\": [<enabled>, { \"forbid\": [<string|object>] }]\n...\n```\n\n----------------------------------------\n\nTITLE: Incorrect Fragment Shorthand Without Keys\nDESCRIPTION: Using fragment shorthand syntax in an array without keys, which requires keys when checkFragmentShorthand option is enabled.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-key.md#2025-04-14_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\n[<></>, <></>, <></>];\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage: defaultProps for Required PropType in Stateless Component\nDESCRIPTION: This example demonstrates incorrect usage where a required prop 'foo' also has a default value, which is contradictory. Additionally, 'bar' has a PropType but no default value.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/default-props-match-prop-types.md#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nfunction MyStatelessComponent({ foo, bar }) {\n  return <div>{foo}{bar}</div>;\n}\n\nMyStatelessComponent.propTypes = {\n  foo: React.PropTypes.string.isRequired,\n  bar: React.PropTypes.string\n};\n\nMyStatelessComponent.defaultProps = {\n  foo: \"foo\"\n};\n```\n\n----------------------------------------\n\nTITLE: Default Rule Pattern Configuration\nDESCRIPTION: Configuration example for the default naming pattern that enforces 'is' and 'has' prefixes.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/boolean-prop-naming.md#2025-04-14_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n\"react/boolean-prop-naming\": [\"error\", { \"rule\": \"^(is|has)[A-Z]([A-Za-z0-9]?)+\" }]\n```\n\n----------------------------------------\n\nTITLE: Correct React Components With displayName\nDESCRIPTION: Examples of React components that correctly implement the displayName property as required by the rule.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/display-name.md#2025-04-14_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nvar Hello = createReactClass({\n  displayName: 'Hello',\n  render: function() {\n    return <div>Hello {this.props.name}</div>;\n  }\n});\n\nconst Hello = React.memo(function Hello({ a }) {\n  return <>{a}</>\n})\n```\n\n----------------------------------------\n\nTITLE: Incorrect Boolean Prop Naming in React Class Component\nDESCRIPTION: Example of incorrect boolean prop naming that violates the naming convention using PropTypes in a class component.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/boolean-prop-naming.md#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nvar Hello = createReactClass({\n  propTypes: {\n    enabled: PropTypes.bool\n  },\n  render: function() { return <div />; };\n});\n```\n\n----------------------------------------\n\nTITLE: Incorrect usage: React import with custom JSX pragma\nDESCRIPTION: This example demonstrates incorrect code where React is imported but a custom JSX pragma is used, which would trigger the rule.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-uses-react.md#2025-04-14_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n/** @jsx Foo */\nvar React = require('react');\n\nvar Hello = <div>Hello {this.props.name}</div>;\n```\n\n----------------------------------------\n\nTITLE: Rule Exemption: Non-React Component Function\nDESCRIPTION: This example shows a function that isn't a React component but has propTypes defined, which is ignored by the rule since it's not rendering JSX.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/default-props-match-prop-types.md#2025-04-14_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nfunction NotAComponent({ foo, bar }) {}\n\nNotAComponent.propTypes = {\n  foo: React.PropTypes.string,\n  bar: React.PropTypes.string.isRequired\n};\n```\n\n----------------------------------------\n\nTITLE: Multiple Stateless Components Example\nDESCRIPTION: Example showing multiple stateless component definitions in one file, which is allowed when ignoreStateless option is true.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/no-multi-comp.md#2025-04-14_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Hello(props) {\n  return <div>Hello {props.name}</div>;\n}\nfunction HelloAgain(props) {\n  return <div>Hello again {props.name}</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuration options for react/jsx-sort-default-props rule\nDESCRIPTION: Configuration example for the ESLint rule showing how to enable it and set the ignoreCase option, which determines whether the rule should be case-sensitive when checking alphabetical order.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-sort-default-props.md#2025-04-14_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n...\n\"react/jsx-sort-default-props\": [<enabled>, {\n  \"ignoreCase\": <boolean>,\n}]\n...\n```\n\n----------------------------------------\n\nTITLE: ESLint Rule Configuration for react/no-danger\nDESCRIPTION: Configuration options for the ESLint rule, showing how to enable the rule and specify custom component names.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/no-danger.md#2025-04-14_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n...\n\"react/no-danger\": [<enabled>, {\n  \"customComponentNames\": Array<string>,\n}]\n...\n```\n\n----------------------------------------\n\nTITLE: ESLint Rule Configuration\nDESCRIPTION: Configuration options for the no-unknown-property rule, including enabling/disabling the rule and specifying properties to ignore.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/no-unknown-property.md#2025-04-14_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n...\n\"react/no-unknown-property\": [<enabled>, { ignore: <ignore>, requireDataLowercase: <requireDataLowercase> }]\n...\n```\n\n----------------------------------------\n\nTITLE: Detecting unstable nested component within a class component\nDESCRIPTION: This snippet illustrates the same problem within a class component. The UnstableNestedComponent is defined inside the render method of Component. This means every time Component re-renders, UnstableNestedComponent is redefined, leading to the same issues as the functional component example. Moving the definition outside the class would resolve this.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/no-unstable-nested-components.md#2025-04-14_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nclass Component extends React.Component {\n  render() {\n    function UnstableNestedComponent() {\n      return <div />;\n    }\n\n    return (\n      <div>\n        <UnstableNestedComponent />\n      </div>\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Rule Options Configuration\nDESCRIPTION: Complete configuration options for the destructuring-assignment rule.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/destructuring-assignment.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n\"react/destructuring-assignment\": [<enabled>, \"always\", { \"ignoreClassFields\": <boolean>, \"destructureInSignature\": \"always\" | \"ignore\" }]\n```\n\n----------------------------------------\n\nTITLE: Using Flat Configs in eslint.config.js\nDESCRIPTION: JavaScript configuration demonstrating the use of flat configs exported by eslint-plugin-react in the new ESLint config system.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/README.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst reactPlugin = require('eslint-plugin-react');\nconst globals = require('globals');\n\nmodule.exports = [\n  …\n  {\n    files: ['**/*.{js,mjs,cjs,jsx,mjsx,ts,tsx,mtsx}'],\n    ...reactPlugin.configs.flat.recommended,\n    languageOptions: {\n      ...reactPlugin.configs.flat.recommended.languageOptions,\n      globals: {\n        ...globals.serviceworker,\n        ...globals.browser,\n      },\n    },\n  },\n  …\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring complex forbid option for ESLint rule in JavaScript\nDESCRIPTION: Example of a complex configuration for the 'forbid' option, showing how to specify a prop name, custom message, and DOM nodes for which the prop is disallowed.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/forbid-dom-props.md#2025-04-14_snippet_5\n\nLANGUAGE: js\nCODE:\n```\n{\n  \"propName\": \"someProp\",\n  \"disallowedFor\": [\"DOMNode\", \"AnotherDOMNode\"],\n  \"message\": \"Avoid using someProp\"\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect JSX with Extra Line Between Props\nDESCRIPTION: This example shows JSX code with an empty line between props in a multi-line component, which violates the rule.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-props-no-multi-spaces.md#2025-04-14_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<App\n  prop1='abc'\n\n  prop2='def' />\n```\n\n----------------------------------------\n\nTITLE: Rule Configuration Options in JavaScript\nDESCRIPTION: Configuration schema showing available options for customizing the rule behavior.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-sort-props.md#2025-04-14_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n...\n\"react/jsx-sort-props\": [<enabled>, {\n  \"callbacksLast\": <boolean>,\n  \"shorthandFirst\": <boolean>,\n  \"shorthandLast\": <boolean>,\n  \"multiline\": \"ignore\" | \"first\" | \"last\",\n  \"ignoreCase\": <boolean>,\n  \"noSortAlphabetically\": <boolean>,\n  \"reservedFirst\": <boolean>|<array<string>>,\n  \"locale\": \"auto\" | \"any valid locale\"\n}]\n...\n```\n\n----------------------------------------\n\nTITLE: Incorrect JSX closing tag location - same line as content\nDESCRIPTION: Example of incorrect code where the closing tag is on the same line as the content rather than on its own line.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-closing-tag-location.md#2025-04-14_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Hello>\n  marklar</Hello>\n```\n\n----------------------------------------\n\nTITLE: Incorrect TypeScript Props Definition in React Components\nDESCRIPTION: Examples of incorrect prop type definitions in TypeScript that are not read-only. This includes class components with both type and interface definitions.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/prefer-read-only-props.md#2025-04-14_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\ntype Props = {\n  name: string;\n}\nclass Hello extends React.Component<Props> {\n  render () {\n    return <div>Hello {this.props.name}</div>;\n  }\n}\n\ninterface Props {\n  name: string;\n}\nclass Hello extends React.Component<Props> {\n  render () {\n    return <div>Hello {this.props.name}</div>;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: ESLint configuration for jsx-no-leaked-render rule\nDESCRIPTION: JSON configuration for the ESLint rule showing how to set the 'validStrategies' option to control which strategies are considered valid.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-no-leaked-render.md#2025-04-14_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n  // ...\n  \"react/jsx-no-leaked-render\": [<enabled>, { \"validStrategies\": [\"ternary\", \"coerce\"] }]\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Installing ESLint and eslint-plugin-react\nDESCRIPTION: Command to install ESLint and eslint-plugin-react as dev dependencies using npm.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/README.md#2025-04-14_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install eslint eslint-plugin-react --save-dev\n```\n\n----------------------------------------\n\nTITLE: Incorrect Static PropTypes\nDESCRIPTION: Example showing incorrectly ordered static propTypes in a React class component\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/sort-prop-types.md#2025-04-14_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nclass Component extends React.Component {\n  static propTypes = {\n    z: PropTypes.any,\n    y: PropTypes.any,\n    a: PropTypes.any\n  }\n  render() {\n    return <div />;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Correct JSX Property Placement - Multiline Config\nDESCRIPTION: Examples showing correct placement of first property when rule is configured with 'multiline' option.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-first-prop-new-line.md#2025-04-14_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<Hello personal={true} />\n\n<Hello\n    personal={true}\n    foo=\"bar\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Shorthand First Example in JSX\nDESCRIPTION: Example showing correct ordering when shorthandFirst option is enabled.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-sort-props.md#2025-04-14_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<Hello active validate name=\"John\" tel={5555555} />\n```\n\n----------------------------------------\n\nTITLE: Rule Options Configuration\nDESCRIPTION: This example shows the configuration options for the `react/no-string-refs` ESLint rule. It illustrates how to enable the rule and configure the `noTemplateLiterals` option to flag template literals used as refs.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/no-string-refs.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n\"react/no-string-refs\": [<enabled>, {\"noTemplateLiterals\": <boolean>}]\n```\n\n----------------------------------------\n\nTITLE: Incorrect JSX Bracket Spacing Examples with 'beforeSelfClosing: proportional-always'\nDESCRIPTION: Examples of JSX code that violate the 'beforeSelfClosing: proportional-always' rule, which requires consistent spacing before the closing bracket of multi-line self-closing tags.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-tag-spacing.md#2025-04-14_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\n<Hello\n  firstName=\"John\"\n  lastName=\"Smith\" />\n<Hello\n  firstName=\"John\"\n  lastName=\"Smith\"/>\n```\n\n----------------------------------------\n\nTITLE: Invalid Export Default Patterns in JavaScript\nDESCRIPTION: Examples of invalid JavaScript syntax that demonstrates why certain patterns cannot be auto-fixed when working with export default statements.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/function-component-definition.md#2025-04-14_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nexport default var getComponent = () => {\n  return <div />;\n}\n\nexport default var getComponent = function () {\n  return <div />;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring the no-unstable-nested-components rule\nDESCRIPTION: This configuration allows you to customize the `react/no-unstable-nested-components` rule. The `allowAsProps` option can be set to `true` or `false` to allow or disallow component creation inside component props. `customValidators` and `propNamePattern` can also be configured.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/no-unstable-nested-components.md#2025-04-14_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n...\n\"react/no-unstable-nested-components\": [\n  \"off\" | \"warn\" | \"error\",\n  {\n    \"allowAsProps\": true | false,\n    \"customValidators\": [] /* optional array of validators used for propTypes validation */\n    \"propNamePattern\": string\n  }\n]\n...\n```\n\n----------------------------------------\n\nTITLE: Incorrect JSX with Key After Spread\nDESCRIPTION: A React element with a key prop placed after a spread operator, which can cause createElement fallback issues.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-key.md#2025-04-14_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\n<span {...spread} key={\"key-after-spread\"} />;\n```\n\n----------------------------------------\n\nTITLE: Incorrect JSX Bracket Spacing Examples with 'afterOpening: always'\nDESCRIPTION: Examples of JSX code that violate the 'afterOpening: always' rule, which requires a space after the opening bracket of JSX elements.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-tag-spacing.md#2025-04-14_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\n<Hello></Hello>\n<Hello firstname=\"John\"/>\n<Hello\n  firstName=\"John\"\n  lastName=\"Smith\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring to Ignore Files Without Code\nDESCRIPTION: ESLint configuration to ignore files that do not contain code when applying the JSX filename extension rule.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-filename-extension.md#2025-04-14_snippet_4\n\nLANGUAGE: js\nCODE:\n```\n\"rules\": {\n  \"react/jsx-filename-extension\": [1, { \"ignoreFilesWithoutCode\": true }]\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect JSX Spacing Examples with 'always' Option\nDESCRIPTION: Examples of JSX code that violate the 'react/jsx-equals-spacing' rule when configured with the 'always' option. These examples show incorrect spacing around equal signs in JSX attributes.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-equals-spacing.md#2025-04-14_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Hello name={firstname} />;\n<Hello name ={firstname} />;\n<Hello name= {firstname} />;\n```\n\n----------------------------------------\n\nTITLE: Decorator Usage Example\nDESCRIPTION: Example of using allowed decorators with the rule configuration.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/require-optimization.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// ['pureRender']\n@pureRender\nclass Hello extends React.Component {}\n```\n\n----------------------------------------\n\nTITLE: When Option Example - Incorrect\nDESCRIPTION: Example showing incorrect usage with the 'when' option set to 'always'.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-max-props-per-line.md#2025-04-14_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n// [1, { \"when\": \"always\" }]\n<Hello firstName=\"John\" lastName=\"Smith\" />\n```\n\n----------------------------------------\n\nTITLE: Rule Configuration Format\nDESCRIPTION: ESLint configuration format for the require-optimization rule showing enabled state and decorator options.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/require-optimization.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n...\n\"react/require-optimization\": [<enabled>, { allowDecorators: [<allowDecorator>] }]\n...\n```\n\n----------------------------------------\n\nTITLE: Incorrect usage: React import without JSX\nDESCRIPTION: This snippet shows an example of incorrect code where React is imported but not used, which would trigger the rule.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-uses-react.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar React = require('react');\n\n// nothing to do with React\n```\n\n----------------------------------------\n\nTITLE: Configuring the 'forbid-foreign-prop-types' rule in ESLint\nDESCRIPTION: Configuration example showing how to enable the rule with its options in an ESLint configuration file.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/forbid-foreign-prop-types.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n...\n\"react/forbid-foreign-prop-types\": [<enabled>, { \"allowInPropTypes\": [<boolean>] }]\n...\n```\n\n----------------------------------------\n\nTITLE: Incorrect JSX with Newlines (Prevent and AllowMultilines)\nDESCRIPTION: Example of JSX code that violates the 'react/jsx-newline' rule when configured with { \"prevent\": true, \"allowMultilines\": true }. It shows an unnecessary newline between a single-line element and expression.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-newline.md#2025-04-14_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<div>\n  {showSomething === true && <Something />}\n\n  <Button>Button 3</Button>\n  {showSomethingElse === true ? (\n    <SomethingElse />\n  ) : (\n    <ErrorMessage />\n  )}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Correct Usage with allowGlobals Option\nDESCRIPTION: Example of code that is considered correct when the allowGlobals option is set to true, allowing the use of globally defined components.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-no-undef.md#2025-04-14_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nvar Text = require('./Text');\nvar Hello = React.createClass({\n  render: function() {\n    return <Text>Hello</Text>;\n  }\n});\nmodule.exports = Hello;\n```\n\n----------------------------------------\n\nTITLE: Project Name Reference in Markdown\nDESCRIPTION: Markdown code block showing the project name as inline code.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/README.md#2025-04-14_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n`eslint-plugin-react`\n```\n\n----------------------------------------\n\nTITLE: Correct Usage Example of Event Handler in JSX\nDESCRIPTION: Example showing the correct way to pass an event handler as a prop without using bind() or arrow functions.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-no-bind.md#2025-04-14_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Foo onClick={this._handleClick}></Foo>\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of JSX in .js File\nDESCRIPTION: An example of incorrect code that violates the rule by using JSX in a .js file.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-filename-extension.md#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n// filename: MyComponent.js\nfunction MyComponent() {\n  return <div />;\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Extra Closing Brace in JSX\nDESCRIPTION: Example demonstrating how an extra closing brace causes unintended character rendering in the output.\nSOURCE: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/no-unescaped-entities.md#2025-04-14_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<MyComponent>{'Text'}}</MyComponent>\n```"
  }
]