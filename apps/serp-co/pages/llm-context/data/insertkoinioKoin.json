[
  {
    "owner": "insertkoinio",
    "repo": "koin",
    "content": "TITLE: Defining Koin Framework Characteristics\nDESCRIPTION: A concise description of Koin's core features, highlighting it as a DSL (Domain Specific Language), a lightweight container, and having a pragmatic API.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/reference/introduction.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nKoin is a DSL, a light container and a pragmatic API\n```\n\n----------------------------------------\n\nTITLE: Declaring a Koin Module in Kotlin\nDESCRIPTION: Shows how to declare a basic Koin module using the 'module' function. This is the fundamental way to group related dependency definitions in Koin.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/reference/koin-core/modules.md#2025-04-23_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval myModule = module {\n    // Your definitions ...\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Koin with Module Configuration in Kotlin\nDESCRIPTION: This snippet demonstrates how to start a Koin container with modules using the startKoin function. It initializes a KoinApplication instance in the GlobalContext, configures logging, and declares the modules to be used.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/reference/koin-core/dsl.md#2025-04-23_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\n// start a KoinApplication in Global context\nstartKoin {\n    // declare used logger\n    logger()\n    // declare used modules\n    modules(coffeeAppModule)\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting Dependencies in Android Activity using Koin\nDESCRIPTION: This code demonstrates how to inject a UserPresenter into an Android Activity using Koin's by inject() delegate function.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/quickstart/android.md#2025-04-23_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MainActivity : AppCompatActivity() {\n\n    private val presenter: UserPresenter by inject()\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        \n        //...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring a Koin Module in Kotlin\nDESCRIPTION: Demonstrates how to create a basic Koin module using the 'module' function. This is the foundation for declaring dependencies in Koin.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/reference/koin-core/definitions.md#2025-04-23_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval myModule = module {\n   // your dependencies here\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Koin Module in Kotlin\nDESCRIPTION: This snippet shows how to create a basic Koin module that serves as a container for dependency definitions. The module function creates a space where dependencies can be declared for injection.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/reference/koin-core/dsl.md#2025-04-23_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval myModule = module {\n   // your dependencies here\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Koin in a Kotlin Application\nDESCRIPTION: Basic example showing how to initialize Koin in a Kotlin application's main function. This is the starting point for using Koin dependency injection in any Kotlin project.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/setup/koin.md#2025-04-23_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    startKoin {\n        modules(...)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Koin in Android Application Class\nDESCRIPTION: Initialization of Koin in the Application class's onCreate method, setting up the Android context, logger, and loading the application module for dependency injection.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/quickstart/android-viewmodel.md#2025-04-23_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MainApplication : Application(){\n    override fun onCreate() {\n        super.onCreate()\n        \n        startKoin{\n            androidLogger()\n            androidContext(this@MainApplication)\n            modules(appModule)\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Properties from Default Location in Koin\nDESCRIPTION: Demonstrates how to load properties from the default koin.properties file at application startup. This enables configuration via property files.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/reference/koin-core/start-koin.md#2025-04-23_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nstartKoin {\n    // Load properties from the default location\n    // (i.e. `/src/main/resources/koin.properties`)\n    fileProperties()\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Koin in an Android Application\nDESCRIPTION: Example showing how to initialize Koin in an Android application by extending the Application class. This setup is required to use Koin with Android-specific features.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/setup/koin.md#2025-04-23_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MainApplication : Application() {\n    override fun onCreate() {\n        super.onCreate()\n        \n        startKoin {\n            modules(appModule)\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Koin Android Dependency in Gradle\nDESCRIPTION: This snippet shows how to add the Koin Android dependency to the project's Gradle file.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/quickstart/android.md#2025-04-23_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\ndependencies {\n\n    // Koin for Android\n    implementation(\"io.insert-koin:koin-android:$koin_version\")\n}\n```\n\n----------------------------------------\n\nTITLE: Using Module Includes in Koin 3.2+\nDESCRIPTION: Introduces the 'includes' function for composing Koin modules. This feature allows for better organization of modules, especially in modularized projects, by including child modules within a parent module.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/reference/koin-core/modules.md#2025-04-23_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\n// `:feature` module\nval childModule1 = module {\n    /* Other definitions here. */\n}\nval childModule2 = module {\n    /* Other definitions here. */\n}\nval parentModule = module {\n    includes(childModule1, childModule2)\n}\n\n// `:app` module\nstartKoin { modules(parentModule) }\n```\n\n----------------------------------------\n\nTITLE: Initializing Koin Container in Kotlin\nDESCRIPTION: Shows how to initialize Koin with the startKoin function to create a container and load modules. This is the main entry point for setting up Koin in an application.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/reference/koin-core/start-koin.md#2025-04-23_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\n// start a KoinApplication in Global context\nstartKoin {\n    // declare used modules\n    modules(coffeeAppModule)\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Koin in a Kotlin Application\nDESCRIPTION: This snippet shows how to start Koin in a standard Kotlin application. It demonstrates the minimal setup required to initialize the Koin dependency injection container with modules.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/setup/why.md#2025-04-23_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() { \n  \n  // Just start Koin\n  startKoin {\n    modules(myModule)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Koin in Android Application\nDESCRIPTION: Initializing Koin in the Application class to set up the dependency injection framework with the application context and modules.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/quickstart/android-compose.md#2025-04-23_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MainApplication : Application(){\n    override fun onCreate() {\n        super.onCreate()\n        \n        startKoin{\n            androidLogger()\n            androidContext(this@MainApplication)\n            modules(appModule)\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Unloading Modules from Koin Container\nDESCRIPTION: Shows how to unload modules from the Koin container, which releases their instances and definitions. This allows for dynamically removing functionality from the container.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/reference/koin-core/start-koin.md#2025-04-23_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nunloadKoinModules(module1,module2 ...)\n```\n\n----------------------------------------\n\nTITLE: Registering Multiple Components in Koin Module\nDESCRIPTION: Complete Koin module with both UserRepository and UserService registered as singletons, demonstrating dependency resolution with get().\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/quickstart/kotlin.md#2025-04-23_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nval appModule = module {\n     single<UserRepository> { UserRepositoryImpl() }\n     single { UserService(get()) }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Koin with Multiple Modules\nDESCRIPTION: Shows how to initialize Koin with multiple modules. This is typically done at the start of an application to set up the dependency injection container.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/reference/koin-core/modules.md#2025-04-23_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\n// Start Koin with moduleA & moduleB\nstartKoin {\n    modules(moduleA,moduleB)\n}\n```\n\n----------------------------------------\n\nTITLE: Using Shared ViewModels in Activity and Fragments in Kotlin\nDESCRIPTION: Demonstrates how to use the same ViewModel instance across an Activity and its Fragments using activityViewModel() function.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/reference/koin-android/viewmodel.md#2025-04-23_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass WeatherActivity : AppCompatActivity() {\n\n    /*\n     * Declare WeatherViewModel with Koin and allow constructor dependency injection\n     */\n    private val weatherViewModel by viewModel<WeatherViewModel>()\n}\n\nclass WeatherHeaderFragment : Fragment() {\n\n    /*\n     * Declare shared WeatherViewModel with WeatherActivity\n     */\n    private val weatherViewModel by activityViewModel<WeatherViewModel>()\n}\n\nclass WeatherListFragment : Fragment() {\n\n    /*\n     * Declare shared WeatherViewModel with WeatherActivity\n     */\n    private val weatherViewModel by activityViewModel<WeatherViewModel>()\n}\n```\n\n----------------------------------------\n\nTITLE: Koin Android Context Configuration\nDESCRIPTION: Shows how to configure Koin with Android context in the Application class.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/reference/koin-android/get-instances.md#2025-04-23_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MainApplication : Application() {\n\n    override fun onCreate() {\n        super.onCreate()\n\n        startKoin {\n            // inject Android context\n            androidContext(this@MainApplication)\n            // ...\n        }\n        \n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Koin with Androidx Startup\nDESCRIPTION: Shows experimental integration with Androidx Startup using KoinStartup interface for better startup performance.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/reference/koin-android/start.md#2025-04-23_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MainApplication : Application(), KoinStartup {\n\n     override fun onKoinStartup() = koinConfiguration {\n        androidContext(this@MainApplication)\n        modules(appModule)\n    }\n\n    override fun onCreate() {\n        super.onCreate()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Module Linking Strategies in Koin\nDESCRIPTION: Demonstrates how to use modules to implement different strategy implementations, such as different datasource implementations for a repository. This showcases Koin's flexibility in managing dependencies.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/reference/koin-core/modules.md#2025-04-23_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nclass Repository(val datasource : Datasource)\ninterface Datasource\nclass LocalDatasource() : Datasource\nclass RemoteDatasource() : Datasource\n\nval repositoryModule = module {\n    single { Repository(get()) }\n}\n\nval localDatasourceModule = module {\n    single<Datasource> { LocalDatasource() }\n}\n\nval remoteDatasourceModule = module {\n    single<Datasource> { RemoteDatasource() }\n}\n\n// Load Repository + Local Datasource definitions\nstartKoin {\n    modules(repositoryModule,localDatasourceModule)\n}\n\n// Load Repository + Remote Datasource definitions\nstartKoin {\n    modules(repositoryModule,remoteDatasourceModule)\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Koin Plugin in Ktor Application\nDESCRIPTION: Demonstrates how to install the Koin plugin in a Ktor application. The snippet shows setting up Koin with a logger and specifying application modules to be used for dependency injection.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/reference/koin-ktor/ktor.md#2025-04-23_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nfun Application.main() {\n    // Install Koin\n    install(Koin) {\n        slf4jLogger()\n        modules(helloAppModule)\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Using withOptions for Module Definition Configuration in Kotlin\nDESCRIPTION: This snippet demonstrates the withOptions operator introduced in Koin 3.2 that allows specifying additional configuration options for dependency definitions, such as qualifiers, binding interfaces, and creation timing.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/reference/koin-core/dsl.md#2025-04-23_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nmodule {\n    single { ClassA(get()) } withOptions { \n        named(\"qualifier\")\n        createdAtStart()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Lazy and Eager Instance Retrieval\nDESCRIPTION: Simple code example showing the difference between lazy evaluation using 'by inject()' and direct instance access using 'get()'.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/reference/koin-core/koin-component.md#2025-04-23_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\n// is lazy evaluated\nval myService : MyService by inject()\n\n// retrieve directly the instance\nval myService : MyService = get()\n```\n\n----------------------------------------\n\nTITLE: Adding UserViewModel to Koin Module with viewModelOf\nDESCRIPTION: Extending the Koin module to include the UserViewModel using the viewModelOf function, which ensures proper lifecycle management of the ViewModel in Android.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/quickstart/android-viewmodel.md#2025-04-23_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nval appModule = module {\n    singleOf(::UserRepositoryImpl) { bind<UserRepository>() }\n    viewModelOf(::UserViewModel)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Factory in Koin Module\nDESCRIPTION: Demonstrates how to declare a factory component using the 'factory' function. This provides a new instance each time the component is requested.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/reference/koin-core/definitions.md#2025-04-23_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass Controller()\n\nval myModule = module {\n\n    // declare factory instance for Controller class\n    factory { Controller() }\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting UserStateHolder in Jetpack Compose\nDESCRIPTION: Using koinInject() function to inject the UserStateHolder into a Composable function.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/quickstart/android-compose.md#2025-04-23_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\n@Composable\nfun FactoryInject(userName : String, presenter: UserStateHolder = koinInject()){\n    Text(text = presenter.sayHello(userName), modifier = Modifier.padding(8.dp))\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing UserPresenter with Koin Factory in Kotlin\nDESCRIPTION: Creates a UserPresenter class that depends on UserRepository and is declared as a Koin factory to avoid memory leaks.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/quickstart/android-annotations.md#2025-04-23_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\n@Factory\nclass UserPresenter(private val repository: UserRepository) {\n\n    fun sayHello(name : String) : String{\n        val foundUser = repository.findUser(name)\n        return foundUser?.let { \"Hello '$it' from $this\" } ?: \"User '$name' not found!\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Reducing Startup Time with Background Module Loading in Koin\nDESCRIPTION: This code demonstrates how to use lazy module loading in Koin to reduce startup time. It shows the declaration of lazy modules, their inclusion in the Koin start process, and methods to handle the asynchronous loading.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/reference/koin-android/modules-android.md#2025-04-23_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\n// Lazy loaded module\nval m2 = lazyModule {\n    singleOf(::ClassB)\n}\n\nval m1 = module {\n    singleOf(::ClassA) { bind<IClassA>() }\n}\n\nstartKoin {\n    // sync module loading\n    modules(m1)\n    // load lazy Modules in background\n    lazyModules(m2)\n}\n\nval koin = KoinPlatform.getKoin()\n\n// wait for start completion\nkoin.waitAllStartJobs()\n\n// or run code after start\nkoin.runOnKoinStarted { koin ->\n    // run after background load complete\n}\n```\n\n----------------------------------------\n\nTITLE: Eager Injection in Android Activity\nDESCRIPTION: Demonstrates eager dependency injection using the get() function in an Activity's onCreate method.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/reference/koin-android/get-instances.md#2025-04-23_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\noverride fun onCreate(savedInstanceState: Bundle?) {\n    super.onCreate(savedInstanceState)\n\n    // Retrieve a Presenter instance\n    val presenter : Presenter = get()\n}\n```\n\n----------------------------------------\n\nTITLE: Binding Interfaces in Koin Module\nDESCRIPTION: Shows how to bind an interface to its implementation in a Koin module using the 'as' operator or generic type declaration.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/reference/koin-core/definitions.md#2025-04-23_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nval myModule = module {\n\n    // Will match type ServiceImp only\n    single { ServiceImp() }\n\n    // Will match type Service only\n    single { ServiceImp() as Service }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Koin in Android Application\nDESCRIPTION: This snippet shows how to start Koin in the main entry point of an Android application.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/quickstart/android.md#2025-04-23_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MainApplication : Application(){\n    override fun onCreate() {\n        super.onCreate()\n        \n        startKoin{\n            androidLogger()\n            androidContext(this@MainApplication)\n            modules(appModule)\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a TestApplication for Koin Dependency Overrides in Android Instrumented Tests\nDESCRIPTION: Custom Application class that initializes Koin with both production and test modules. This approach allows overriding production modules in instrumented tests.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/reference/koin-android/instrumented-testing.md#2025-04-23_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass TestApplication : Application() {\n    override fun onCreate() {\n        super.onCreate()\n        startKoin {\n            modules(productionModule, instrumentedTestModule)\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Named Definitions in Koin Module\nDESCRIPTION: Shows how to specify names for definitions to distinguish between multiple definitions of the same type in a Koin module.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/reference/koin-core/definitions.md#2025-04-23_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nval myModule = module {\n    single<Service>(named(\"default\")) { ServiceImpl() }\n    single<Service>(named(\"test\")) { ServiceImpl() }\n}\n\nval service : Service by inject(qualifier = named(\"default\"))\n```\n\n----------------------------------------\n\nTITLE: Implementing UserViewModel with Koin Dependency Injection\nDESCRIPTION: ViewModel that depends on UserRepository, displaying a greeting message for a user if found. It shows how to use constructor injection with Koin.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/quickstart/cmp.md#2025-04-23_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass UserViewModel(private val repository: UserRepository) : ViewModel() {\n\n    fun sayHello(name : String) : String{\n        val foundUser = repository.findUser(name)\n        val platform = getPlatform()\n        return foundUser?.let { \"Hello '$it' from ${platform.name}\" } ?: \"User '$name' not found!\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Dependency Injection in Composable Function\nDESCRIPTION: Shows how to fetch a dependency instance directly inside a Composable function using Koin's get() function. This approach retrieves the instance from the Koin container.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/reference/koin-android/compose.md#2025-04-23_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\n@Composable\nfun App() {\n    val myService = get<MyService>()\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting ViewModels into Android Components in Kotlin\nDESCRIPTION: Demonstrates how to inject a ViewModel into an Activity using lazy delegate properties or direct injection.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/reference/koin-android/viewmodel.md#2025-04-23_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass DetailActivity : AppCompatActivity() {\n\n    // Lazy inject ViewModel\n    val detailViewModel: DetailViewModel by viewModel()\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Isolated Koin Components in Kotlin\nDESCRIPTION: This snippet demonstrates how to test classes that use the isolated Koin context. It overrides the getKoin method in a test class and shows how to define a custom Koin module for testing.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/reference/koin-core/context-isolation.md#2025-04-23_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyClassTest : KoinTest {\n    // Koin Context used to retrieve dependencies\n    override fun getKoin(): Koin = MyIsolatedKoinContext.koin\n\n    @Before\n    fun setUp() {\n       // Define custom Koin module\n        val module = module {\n            // Register dependencies\n        }\n\n        koin.loadModules(listOf(module))\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Basic Scope Definition in Koin\nDESCRIPTION: Shows how to declare a basic scope for a specific type using the scope keyword in a Koin module.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/reference/koin-core/scopes.md#2025-04-23_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nmodule {\n    scope<MyType>{\n        scoped { Presenter() }\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing KoinIsolated Plugin in Ktor Application\nDESCRIPTION: This snippet shows how to install the KoinIsolated plugin in a Ktor application to set up an isolated Koin dependency injection container. It configures the container with a logger and application modules.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/reference/koin-ktor/ktor-isolated.md#2025-04-23_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nfun Application.main() {\n    // Install Koin plugin\n    install(KoinIsolated) {\n        slf4jLogger()\n        modules(helloAppModule)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Koin BOM and Core Dependencies with Kotlin DSL\nDESCRIPTION: Example of adding Koin dependencies using the Bill of Materials (BOM) approach with Kotlin DSL. This method simplifies version management by centralizing version information in the BOM.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/setup/koin.md#2025-04-23_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimplementation(project.dependencies.platform(\"io.insert-koin:koin-bom:$koin_version\"))\nimplementation(\"io.insert-koin:koin-core\")\n```\n\n----------------------------------------\n\nTITLE: Additional Type Binding in Koin Module\nDESCRIPTION: Demonstrates how to bind multiple types to a single definition using the 'bind' operator in a Koin module.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/reference/koin-core/definitions.md#2025-04-23_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nval myModule = module {\n\n    // Will match types ServiceImp & Service\n    single { ServiceImp() } bind Service::class\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting ViewModel in Android Activity with Koin\nDESCRIPTION: Shows how to inject a Koin-managed ViewModel (UserViewModel) into an Android Activity using the 'by viewModel()' delegate.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/quickstart/android-annotations.md#2025-04-23_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MainActivity : AppCompatActivity() {\n\n    private val viewModel: UserViewModel by viewModel()\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        \n        //...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Koin Application with CreateEagerInstances in Kotlin\nDESCRIPTION: Added the ability to use createEagerInstances() with the koinApplication function, allowing eager initialization of instances.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nkoinApplication {\n    createEagerInstances()\n}\n```\n\n----------------------------------------\n\nTITLE: Scoped Component Dependencies\nDESCRIPTION: Shows how to define and resolve dependencies within a scope including nested dependencies.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/reference/koin-core/scopes.md#2025-04-23_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\n// given the classes\nclass ComponentA\nclass ComponentB(val a : ComponentA)\n\n// module with scope\nmodule {\n    \n    scope<A> {\n        scoped { ComponentA() }\n        // will resolve from current scope instance\n        scoped { ComponentB(get()) }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Koin Lifecycle Events in Ktor\nDESCRIPTION: Shows how to listen to Koin application lifecycle events within a Ktor application. The snippet demonstrates subscribing to start, stop preparation, and stop events to perform custom actions.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/reference/koin-ktor/ktor.md#2025-04-23_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nfun Application.main() {\n    // ...\n\n    // Install Ktor features\n    environment.monitor.subscribe(KoinApplicationStarted) {\n        log.info(\"Koin started.\")\n    }\n\n    environment.monitor.subscribe(KoinApplicationStopPreparing) {\n        log.info(\"Koin stopping...\")\n    }\n\n    environment.monitor.subscribe(KoinApplicationStopped) {\n        log.info(\"Koin stopped.\")\n    }\n\n    //...\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Koin in Application Entry Point\nDESCRIPTION: Main function that initializes Koin with the application module and creates the UserApplication.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/quickstart/kotlin.md#2025-04-23_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    startKoin {\n        modules(appModule)\n    }\n\n    UserApplication().sayHello()\n}\n```\n\n----------------------------------------\n\nTITLE: Registering UserViewModel in Koin Module\nDESCRIPTION: Adding UserViewModel to the Koin module as a viewModelOf definition to integrate with Android lifecycle.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/quickstart/android-compose.md#2025-04-23_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nval appModule = module {\n     singleOf(::UserRepositoryImpl) { bind<UserRepository>() }\n    viewModelOf(::UserViewModel)\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Isolated Context in Compose Root\nDESCRIPTION: Configures the isolated Koin context in the Compose application using KoinIsolatedContext composable. This propagates the isolated Koin instance to all child composables.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/reference/koin-compose/isolated-context.md#2025-04-23_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\n@Composable\nfun App() {\n    // Set current Koin instance to Compose context\n    KoinIsolatedContext(context = MyIsolatedKoinContext.koinApp) {\n\n        MyScreen()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Isolated KoinComponent in Kotlin\nDESCRIPTION: This code shows how to use the IsolatedKoinComponent interface in a class. The MyKoinComponent class will use the isolated Koin context for dependency injection.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/reference/koin-core/context-isolation.md#2025-04-23_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyKoinComponent : IsolatedKoinComponent {\n    // inject & get will target MyKoinContext\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom AndroidJUnitRunner for Instrumented Tests with Koin\nDESCRIPTION: Custom test runner that uses the TestApplication class instead of the production Application. This enables test-specific dependency injection configurations.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/reference/koin-android/instrumented-testing.md#2025-04-23_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass InstrumentationTestRunner : AndroidJUnitRunner() {\n    override fun newApplication(\n        classLoader: ClassLoader?,\n        className: String?,\n        context: Context?\n    ): Application {\n        return super.newApplication(classLoader, TestApplication::class.java.name, context)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing UserViewModel with Repository Dependency\nDESCRIPTION: Creation of a UserViewModel class that depends on UserRepository to display user information. The ViewModel extends Android's ViewModel class and provides a sayHello function to interact with the repository.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/quickstart/android-viewmodel.md#2025-04-23_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nclass UserViewModel(private val repository: UserRepository) : ViewModel() {\n\n    fun sayHello(name : String) : String{\n        val foundUser = repository.findUser(name)\n        return foundUser?.let { \"Hello '$it' from $this\" } ?: \"User '$name' not found!\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Compact Koin Module Declaration with Constructor DSL\nDESCRIPTION: A more compact way to declare Koin modules using constructor references with the singleOf and viewModelOf functions, which automatically resolve dependencies.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/quickstart/android-viewmodel.md#2025-04-23_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\nval appModule = module {\n    singleOf(::UserRepositoryImpl) { bind<UserRepository>() }\n    viewModelOf(::UserViewModel)\n}\n```\n\n----------------------------------------\n\nTITLE: Using Module Includes in Koin for Module Composition\nDESCRIPTION: This snippet illustrates the use of the includes() function to compose Koin modules. It shows how to include child modules within a parent module and load them in the application.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/reference/koin-android/modules-android.md#2025-04-23_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\n// `:feature` module\nval childModule1 = module {\n    /* Other definitions here. */\n}\nval childModule2 = module {\n    /* Other definitions here. */\n}\nval parentModule = module {\n    includes(childModule1, childModule2)\n}\n\n// `:app` module\nstartKoin { modules(parentModule) }\n```\n\n----------------------------------------\n\nTITLE: Defining Isolated KoinComponent Interface in Kotlin\nDESCRIPTION: This snippet creates an IsolatedKoinComponent interface that extends KoinComponent. It overrides the getKoin method to use the isolated Koin instance from MyIsolatedKoinContext.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/reference/koin-core/context-isolation.md#2025-04-23_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\ninternal interface IsolatedKoinComponent : KoinComponent {\n\n    // Override default Koin instance\n    override fun getKoin(): Koin = MyIsolatedKoinContext.koin\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Mock Tests with Koin and Mockito\nDESCRIPTION: Creates a JUnit test that uses Koin with Mockito for mocking dependencies. The test sets up both a KoinTestRule and a MockProviderRule, then uses declareMock to create and configure a mock for the HelloService interface.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/quickstart/junit-test.md#2025-04-23_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass HelloMockTest : KoinTest {\n\n    @get:Rule\n    val koinTestRule = KoinTestRule.create {\n        printLogger(Level.DEBUG)\n        modules(helloModule)\n    }\n\n    @get:Rule\n    val mockProvider = MockProviderRule.create { clazz ->\n        Mockito.mock(clazz.java)\n    }\n\n    @Test\n    fun `mock test`() {\n        val service = declareMock<HelloService> {\n            given(hello()).willReturn(\"Hello Mock\")\n        }\n\n        HelloApplication().sayHello()\n\n        Mockito.verify(service,times(1)).hello()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring and Linking Koin Modules in Kotlin\nDESCRIPTION: This snippet demonstrates how to declare and link components in separate Koin modules. It shows the creation of two modules with interdependent components.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/reference/koin-android/modules-android.md#2025-04-23_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\n// ComponentB <- ComponentA\nclass ComponentA()\nclass ComponentB(val componentA : ComponentA)\n\nval moduleA = module {\n    // Singleton ComponentA\n    single { ComponentA() }\n}\n\nval moduleB = module {\n    // Singleton ComponentB with linked instance ComponentA\n    single { ComponentB(get()) }\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting ViewModel in Compose UI\nDESCRIPTION: Example of injecting a ViewModel in a Compose UI using Koin's koinViewModel function to retrieve the UserViewModel instance.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/quickstart/cmp.md#2025-04-23_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\n@Composable\nfun MainScreen() {\n\n    MaterialTheme {\n\n        val userViewModel = koinViewModel<UserViewModel>()\n        \n        //...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic JUnit Test with Koin Injection\nDESCRIPTION: Implements a JUnit test class that uses Koin for dependency injection. The test extends KoinTest to use the inject() operator and sets up a KoinTestRule to initialize the Koin context with the required module.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/quickstart/junit-test.md#2025-04-23_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass HelloAppTest : KoinTest {\n\n    val model by inject<HelloMessageData>()\n    val service by inject<HelloService>()\n\n    @get:Rule\n    val koinTestRule = KoinTestRule.create {\n        printLogger()\n        modules(helloModule)\n    }\n\n    @Test\n    fun `unit test`() {\n        val helloApp = HelloApplication()\n        helloApp.sayHello()\n\n        assertEquals(service, helloApp.helloService)\n        assertEquals(\"Hey, ${model.message}\", service.hello())\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Koin Module Declaration with Constructor DSL\nDESCRIPTION: Demonstrates how to declare Android components using Koin's new Constructor DSL. Shows the usage of singleOf, factoryOf, viewModelOf, scopedOf, and workerOf keywords for dependency injection.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/reference/koin-android/dsl-update.md#2025-04-23_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nmodule {\n    singleOf(::SimpleServiceImpl){ bind<SimpleService>() }\n\n    factoryOf(::FactoryPresenter)\n\n    viewModelOf(::SimpleViewModel)\n\n    scope<MyActivity>(){\n        scopedOf(::Session) \n    }\n\n    workerOf(::SimpleWorker)\n}\n```\n\n----------------------------------------\n\nTITLE: Using checkKoinModules() to Verify Koin Modules\nDESCRIPTION: Demonstrates an alternative approach to verify Koin modules using the checkKoinModules() function with a list of modules.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/reference/koin-test/checkmodules.md#2025-04-23_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass CheckModulesTest : KoinTest {\n\n    @Test\n    fun verifyKoinApp() {\n        \n        checkKoinModules(listOf(module1,module2))\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining and Injecting Parameters in Koin (Kotlin)\nDESCRIPTION: This snippet demonstrates how to define a module with injected parameters and how to use those parameters when injecting dependencies. It shows the usage of the 'parametersOf' function to pass values.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/reference/koin-core/injection-parameters.md#2025-04-23_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass Presenter(val a : A, val b : B)\n\nval myModule = module {\n    single { params -> Presenter(a = params.get(), b = params.get()) }\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyComponent : View, KoinComponent {\n\n    val a : A ...\n    val b : B ... \n\n    // inject this as View value\n    val presenter : Presenter by inject { parametersOf(a, b) }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Ktor with Koin Integration\nDESCRIPTION: Main application setup combining Ktor and Koin initialization.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/quickstart/ktor.md#2025-04-23_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\nfun Application.main() {\n    install(Koin) {\n        slf4jLogger()\n        modules(appModule)\n    }\n\n    // Lazy inject HelloService\n    val service by inject<UserService>()\n    service.saveDefaultUsers()\n\n    // Routing section\n    routing {\n        get(\"/hello\") {\n            call.respondText(service.sayHello())\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Properties from a Koin Module\nDESCRIPTION: Shows how to retrieve property values from within a Koin module definition using the getProperty function. This allows for externalized configuration of dependencies.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/reference/koin-core/start-koin.md#2025-04-23_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nval myModule = module {\n\n    // use the \"server_url\" key to retrieve its value\n    single { MyService(getProperty(\"server_url\")) }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Android Components with Kotlin Classes\nDESCRIPTION: Example classes showing different Android components including a service implementation, presenter, ViewModel, scoped session, and worker. Each class demonstrates different dependency injection scenarios.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/reference/koin-android/dsl-update.md#2025-04-23_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\n// A simple service\nclass SimpleServiceImpl() : SimpleService\n\n// a Presenter, using SimpleService and can receive \"id\" injected param\nclass FactoryPresenter(val id: String, val service: SimpleService)\n\n// a ViewModel that can receive \"id\" injected param, use SimpleService and get SavedStateHandle\nclass SimpleViewModel(val id: String, val service: SimpleService, val handle: SavedStateHandle) : ViewModel()\n\n// a scoped Session, that can received link to the MyActivity (from scope)\nclass Session(val activity: MyActivity)\n\n// a Worker, using SimpleService and getting Context & WorkerParameters\nclass SimpleWorker(\n    private val simpleService: SimpleService,\n    appContext: Context,\n    private val params: WorkerParameters\n) : CoroutineWorker(appContext, params)\n```\n\n----------------------------------------\n\nTITLE: Creating Named Definitions in a Koin Module\nDESCRIPTION: Example of defining components with specific names using the 'named' qualifier in a Koin module.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/reference/koin-core/koin-component.md#2025-04-23_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nval module = module {\n    single(named(\"A\")) { ComponentA() }\n    single(named(\"B\")) { ComponentB(get()) }\n}\n\nclass ComponentA\nclass ComponentB(val componentA: ComponentA)\n```\n\n----------------------------------------\n\nTITLE: Background Loading of Lazy Modules with Kotlin Coroutines\nDESCRIPTION: Shows how to load lazy modules in the background using Kotlin coroutines. Demonstrates initializing Koin with lazy modules, waiting for loading jobs to complete, and running code after loading is finished.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/reference/koin-core/lazy-modules.md#2025-04-23_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nstartKoin {\n    // load lazy Modules in background\n    lazyModules(m1)\n}\n\nval koin = KoinPlatform.getKoin()\n\n// wait for loading jobs to finish\nkoin.waitAllStartJobs()\n\n// or run code after loading is done\nkoin.runOnKoinStarted { koin ->\n    // run after background load complete\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Koin Application in Jetpack Compose\nDESCRIPTION: Initializes a new Koin application instance within a Composable function. This handles the start and stop of the Koin context based on the Compose lifecycle.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/reference/koin-compose/compose.md#2025-04-23_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\n@Composable\nfun App() {\n    KoinApplication(application = {\n        modules(...)\n    }) {\n        \n        // your screens here ...\n        MyScreen()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Koin in an Android Application\nDESCRIPTION: This snippet demonstrates how to integrate Koin into an Android application by initializing it in the Application class. It shows the standard pattern for setting up dependency injection for Android components.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/setup/why.md#2025-04-23_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyApplication : Application() {\n  override fun onCreate() {\n    super.onCreate()\n\n    startKoin {\n      modules(myModule)\n    }\n  } \n}\n```\n\n----------------------------------------\n\nTITLE: Android Scope Configuration\nDESCRIPTION: Illustrates how to configure scoped dependencies with Android context resolution.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/reference/koin-android/get-instances.md#2025-04-23_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyPresenter(val context : Context)\n\nstartKoin {\n  androidContext(context)\n  modules(\n    module {\n      scope<MyActivity> {\n        scoped { MyPresenter( <get() ???> ) }\n      }\n    }\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using Bind Operator with Constructor DSL\nDESCRIPTION: Simplified syntax for binding interfaces to implementations using the bind operator without a lambda expression.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/reference/koin-core/dsl-update.md#2025-04-23_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nmodule {\n    singleOf(::ClassA) bind InterfaceA::class\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting ViewModel with SavedStateHandle in Activity\nDESCRIPTION: Shows how to inject a ViewModel that uses SavedStateHandle into an Activity.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/reference/koin-android/viewmodel.md#2025-04-23_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\nclass DetailActivity : AppCompatActivity() {\n\n    // MyStateVM viewModel injected with SavedStateHandle\n    val myStateVM: MyStateVM by viewModel()\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Koin in Compose Application\nDESCRIPTION: Setting up Koin in the main Compose application function using KoinApplication to load the defined modules before rendering the UI.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/quickstart/cmp.md#2025-04-23_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nfun App() {\n    \n    KoinApplication(\n        application = {\n            modules(appModule)\n        }\n    )\n{\n// Compose content\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Android-Specific Koin Modules\nDESCRIPTION: Demonstrates how to test Koin modules for Android applications by providing mocked Android-specific dependencies. This example sets up necessary rules and mock instances.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/reference/koin-test/checkmodules.md#2025-04-23_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nclass CheckModulesTest {\n\n    @get:Rule\n    val rule: TestRule = InstantTaskExecutorRule()\n\n    @get:Rule\n    val mockProvider = MockProviderRule.create { clazz ->\n        Mockito.mock(clazz.java)\n    }\n\n    @Test\n    fun `test DI modules`(){\n        koinApplication {\n            modules(allModules)\n            checkModules(){\n                withInstance<Context>()\n                withInstance<Application>()\n                withInstance<SavedStateHandle>()\n                withInstance<WorkerParameters>()\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Koin Module Definition\nDESCRIPTION: Demonstrates how to define a basic Koin module with a Presenter factory definition.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/reference/koin-android/get-instances.md#2025-04-23_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nmodule {\n    // definition of Presenter\n    factory { Presenter() }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Injected Components in Swift UI\nDESCRIPTION: Demonstrates how to use Koin-injected components from Swift UI code. It creates an instance of a helper class that provides access to injected dependencies.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/reference/koin-mp/kmp.md#2025-04-23_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\nstruct ContentView: View {\n        // Create helper instance\n    let greet = GreetingHelper().greet()\n\n    var body: some View {\n        Text(greet)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting ViewModel with Parameters in Activity\nDESCRIPTION: Demonstrates how to inject a ViewModel with parameters into an Activity using the parametersOf function.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/reference/koin-android/viewmodel.md#2025-04-23_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nclass DetailActivity : AppCompatActivity() {\n\n    val id : String // id of the view\n\n    // Lazy inject ViewModel with id parameter\n    val detailViewModel: DetailViewModel by viewModel{ parametersOf(id)}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing HTTP Controller\nDESCRIPTION: Ktor routing configuration with dependency injection using Koin.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/quickstart/ktor.md#2025-04-23_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nfun Application.main() {\n\n    // Lazy inject HelloService\n    val service by inject<UserService>()\n\n    // Routing section\n    routing {\n        get(\"/hello\") {\n            call.respondText(service.sayHello())\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Additional WorkManagerFactories with Koin\nDESCRIPTION: Shows how to create and add extra WorkManagerFactories to Koin. These factories are added as delegates, with Koin's factory taking precedence if it can instantiate a ListenableWorker.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/reference/koin-android/workmanager.md#2025-04-23_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MainApplication : Application(), KoinComponent {\n\n    override fun onCreate() {\n        super.onCreate()\n\n        startKoin {\n           workManagerFactory(workFactory1, workFactory2)\n           . . .\n        }\n\n        setupWorkManagerFactory()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing AndroidScopeComponent for Custom Scope Handling\nDESCRIPTION: Demonstrates how to implement the AndroidScopeComponent interface to set up a custom scope for an Activity.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/reference/koin-android/scope.md#2025-04-23_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nabstract class ScopeActivity(\n    @LayoutRes contentLayoutId: Int = 0,\n) : AppCompatActivity(contentLayoutId), AndroidScopeComponent {\n\n    override val scope: Scope by activityScope()\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n\n        checkNotNull(scope)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Koin Module Verification with Type White-Listing\nDESCRIPTION: Demonstrates how to verify a Koin module while white-listing certain types that are used in definitions but not directly declared.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/reference/koin-test/verify.md#2025-04-23_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass NiaAppModuleCheck {\n\n    @Test\n    fun checkKoinModule() {\n\n        // Verify Koin configuration\n        niaAppModule.verify(\n            // List types used in definitions but not declared directly (like parameters injection)\n            extraTypes = listOf(MyType::class ...)\n        )\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Constructor DSL for SavedStateHandle ViewModel\nDESCRIPTION: Demonstrates using the Constructor DSL approach for declaring a ViewModel with SavedStateHandle.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/reference/koin-android/viewmodel.md#2025-04-23_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nviewModelOf(::MyStateVM)\n```\n\n----------------------------------------\n\nTITLE: Configuring Ktor HTTP Routes\nDESCRIPTION: Setting up HTTP routing with Ktor using injected UserService.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/quickstart/ktor-annotations.md#2025-04-23_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nfun Application.main() {\n\n    // Lazy inject HelloService\n    val service by inject<UserService>()\n\n    // Routing section\n    routing {\n        get(\"/hello\") {\n            call.respondText(service.sayHello())\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring a Fragment with Constructor Injection\nDESCRIPTION: This snippet demonstrates how to declare a Fragment class using constructor injection. It shows a MyFragment class that takes a MyService parameter in its constructor.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/reference/koin-android/fragment-factory.md#2025-04-23_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyFragment(val myService: MyService) : Fragment() {\n\n\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Factory Instance in Koin Module\nDESCRIPTION: Shows how to define a factory instance of a Presenter in a Koin module, which produces a new instance each time it's requested.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/reference/koin-android/scope.md#2025-04-23_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval androidModule = module {\n\n    // Factory instance of Presenter\n    factory { Presenter() }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Platform-Specific Modules in Koin\nDESCRIPTION: Demonstrates how to create platform-specific components using Kotlin Multiplatform with Koin. It includes a module definition and platform-specific implementations for iOS and Android.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/reference/koin-mp/kmp.md#2025-04-23_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\n// platform Module\nval platformModule = module {\n    singleOf(::Platform)\n}\n\n// KMP Class Definition\nexpect class Platform() {\n    val name: String\n}\n\n// iOS\nactual class Platform actual constructor() {\n    actual val name: String =\n        UIDevice.currentDevice.systemName() + \" \" + UIDevice.currentDevice.systemVersion\n}\n\n// Android\nactual class Platform actual constructor() {\n    actual val name: String = \"Android ${android.os.Build.VERSION.SDK_INT}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Classic Koin Module Declaration\nDESCRIPTION: Example of a classic style Koin module declaration, explicitly defining components and their dependencies using the get() function to resolve dependencies.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/quickstart/android-viewmodel.md#2025-04-23_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\nval appModule = module {\n    single<HelloRepository> { HelloRepositoryImpl() }\n    viewModel { MyViewModel(get()) }\n}\n```\n\n----------------------------------------\n\nTITLE: Comparing Classic and Constructor DSL in Koin Module Declaration\nDESCRIPTION: This code compares two ways of declaring a Koin module: the classic approach and the more compact constructor DSL.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/quickstart/android.md#2025-04-23_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nval appModule = module {\n    single<HelloRepository> { HelloRepositoryImpl() }\n    factory { MyPresenter(get()) }\n}\n\n// Constructor DSL\nval appModule = module {\n    singleOf(::UserRepositoryImpl) { bind<UserRepository>() }\n    factoryOf(::UserPresenter)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a JUnit Test to Verify Koin Modules\nDESCRIPTION: JUnit test class that implements KoinTest interface and uses the verify() function to check that all Koin module definitions are correctly configured without any missing dependencies.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/quickstart/android-viewmodel.md#2025-04-23_snippet_12\n\nLANGUAGE: kotlin\nCODE:\n```\nclass CheckModulesTest : KoinTest {\n\n    @Test\n    fun checkAllModules() {\n        appModule.verify()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Passing Parameters to ViewModel Constructor in Koin\nDESCRIPTION: Shows how to pass parameters to a ViewModel during declaration and injection, supporting dependency injection with parameters.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/reference/koin-android/viewmodel.md#2025-04-23_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nval appModule = module {\n\n    // ViewModel for Detail View with id as parameter injection\n    viewModel { parameters -> DetailViewModel(id = parameters.get(), get(), get()) }\n    // ViewModel for Detail View with id as parameter injection, resolved from graph\n    viewModel { DetailViewModel(get(), get(), get()) }\n    // or Constructor DSL\n    viewModelOf(::DetailViewModel)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradle Dependencies for Koin Testing in Kotlin\nDESCRIPTION: Sets up the necessary Gradle dependencies for Koin testing tools and JUnit integration. This snippet shows how to add Koin test and Koin test JUnit4 dependencies to a Kotlin project.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/quickstart/junit-test.md#2025-04-23_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\ndependencies {\n    // Koin testing tools\n    testCompile \"io.insert-koin:koin-test:$koin_version\"\n    // Needed JUnit version\n    testCompile \"io.insert-koin:koin-test-junit4:$koin_version\"\n}\n```\n\n----------------------------------------\n\nTITLE: Create Instances at Start in Koin Module\nDESCRIPTION: Demonstrates how to flag definitions or modules to be created at start using the 'createdAtStart' flag in Koin.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/reference/koin-core/definitions.md#2025-04-23_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\nval myModuleA = module {\n\n    single<Service> { ServiceImp() }\n}\n\nval myModuleB = module {\n\n    // eager creation for this definition\n    single<Service>(createdAtStart=true) { TestServiceImp() }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering UserRepository as a Singleton in Koin Module\nDESCRIPTION: Declaration of UserRepositoryImpl as a singleton in the Koin module, binding it to the UserRepository interface. This makes the repository available for injection throughout the application.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/quickstart/android-viewmodel.md#2025-04-23_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nval appModule = module {\n   singleOf(::UserRepositoryImpl) { bind<UserRepository>() }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up KoinFragmentFactory in Koin Application\nDESCRIPTION: This snippet shows how to set up the KoinFragmentFactory when initializing the Koin application. It uses the fragmentFactory() function to create a default KoinFragmentFactory instance.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/reference/koin-android/fragment-factory.md#2025-04-23_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nstartKoin {\n    // setup a KoinFragmentFactory instance\n    fragmentFactory()\n\n    modules(...)\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Koin Module with ViewModel Declaration\nDESCRIPTION: Enhanced Koin module that registers both the UserRepository singleton and the UserViewModel as a viewModelOf definition, which allows the native platform to manage its lifecycle.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/quickstart/cmp.md#2025-04-23_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nval appModule = module {\n    singleOf(::UserRepositoryImpl) { bind<UserRepository>() }\n    viewModelOf(::UserViewModel)\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up KoinFragmentFactory with Scope in Activity\nDESCRIPTION: This snippet demonstrates how to set up the KoinFragmentFactory with a specific scope in an Activity. It uses the setupKoinFragmentFactory() function with the lifecycleScope parameter.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/reference/koin-android/fragment-factory.md#2025-04-23_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyActivity : AppCompatActivity() {\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        // Koin Fragment Factory\n        setupKoinFragmentFactory(lifecycleScope)\n\n        super.onCreate(savedInstanceState)\n        //...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Classes with Dependencies in Kotlin\nDESCRIPTION: Example class definitions showing dependency relationships that will be used to demonstrate Koin's Constructor DSL.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/reference/koin-core/dsl-update.md#2025-04-23_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass ClassA(val b : ClassB, val c : ClassC)\nclass ClassB()\nclass ClassC()\n```\n\n----------------------------------------\n\nTITLE: Implementing Koin BOM Dependencies\nDESCRIPTION: Shows how to use Koin Bill of Materials (BOM) to manage dependency versions centrally, including various Koin modules and test dependencies.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/setup/koin.md#2025-04-23_snippet_13\n\nLANGUAGE: groovy\nCODE:\n```\ndependencies {\n    // Declare koin-bom version\n    implementation platform(\"io.insert-koin:koin-bom:$koin_bom\")\n    \n    // Declare the koin dependencies that you need\n    implementation(\"io.insert-koin:koin-android\")\n    implementation(\"io.insert-koin:koin-core-coroutines\")\n    implementation(\"io.insert-koin:koin-androidx-workmanager\")\n    \n    // If you need specify some version it's just point to desired version\n    implementation(\"io.insert-koin:koin-androidx-navigation:1.2.3-alpha03\")\n    \n    // Works with test libraries too!\n    testImplementation(\"io.insert-koin:koin-test-junit4\")\n    testImplementation(\"io.insert-koin:koin-android-test\")\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Android Scope with Koin\nDESCRIPTION: Demonstrates how to declare a scope for an Android Activity and define scoped dependencies within it.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/reference/koin-android/scope.md#2025-04-23_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyPresenter()\nclass MyAdapter(val presenter : MyPresenter)\n\nmodule {\n  // Declare scope for MyActivity\n  scope<MyActivity> {\n    // get MyPresenter instance from current scope \n    scoped { MyAdapter(get()) }\n    scoped { MyPresenter() }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Fragment with Bundle and Tag\nDESCRIPTION: This snippet demonstrates how to add a Fragment to the container with additional parameters such as a Bundle for arguments and a tag for identification.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/reference/koin-android/fragment-factory.md#2025-04-23_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nsupportFragmentManager.beginTransaction()\n            .replace<MyFragment>(\n                containerViewId = R.id.mvvm_frame,\n                args = MyBundle(),\n                tag = MyString()\n            )\n```\n\n----------------------------------------\n\nTITLE: Defining Koin Module with Multiple Dependencies\nDESCRIPTION: Example of creating a Koin module that includes multiple sub-modules and view model definitions.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/reference/koin-test/verify.md#2025-04-23_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval niaAppModule = module {\n    includes(\n        jankStatsKoinModule,\n        dataKoinModule,\n        syncWorkerKoinModule,\n        topicKoinModule,\n        authorKoinModule,\n        interestsKoinModule,\n        settingsKoinModule,\n        bookMarksKoinModule,\n        forYouKoinModule\n    )\n    viewModelOf(::MainActivityViewModel)\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Koin Android Extra Features Dependencies\nDESCRIPTION: Example showing how to add additional Koin Android dependencies for features like WorkManager, Navigation, and App Startup integration. These extend Koin's functionality with Android Jetpack components.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/setup/koin.md#2025-04-23_snippet_7\n\nLANGUAGE: groovy\nCODE:\n```\ndependencies {\n    // Java Compatibility\n    implementation(\"io.insert-koin:koin-android-compat:$koin_android_version\")\n    // Jetpack WorkManager\n    implementation(\"io.insert-koin:koin-androidx-workmanager:$koin_android_version\")\n    // Navigation Graph\n    implementation(\"io.insert-koin:koin-androidx-navigation:$koin_android_version\")\n    // App Startup\n    implementation(\"io.insert-koin:koin-androidx-startup:$koin_android_version\")\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Koin Modules with JUnit Test\nDESCRIPTION: Creating a JUnit test to verify that all Koin module definitions are correctly configured.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/quickstart/android-compose.md#2025-04-23_snippet_16\n\nLANGUAGE: kotlin\nCODE:\n```\nclass CheckModulesTest : KoinTest {\n\n    @Test\n    fun checkAllModules() {\n        appModule.verify()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting ViewModel in Android Activity\nDESCRIPTION: Example of injecting a UserViewModel into an Android Activity using the by viewModel() delegate function, which handles ViewModel creation and lifecycle management.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/quickstart/android-viewmodel.md#2025-04-23_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MainActivity : AppCompatActivity() {\n\n    private val viewModel: UserViewModel by viewModel()\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        \n        //...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up KoinFragmentFactory in Activity\nDESCRIPTION: This snippet demonstrates how to set up the KoinFragmentFactory in an Activity's onCreate method. It uses the setupKoinFragmentFactory() extension function.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/reference/koin-android/fragment-factory.md#2025-04-23_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyActivity : AppCompatActivity() {\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        // Koin Fragment Factory\n        setupKoinFragmentFactory()\n\n        super.onCreate(savedInstanceState)\n        //...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ScopeViewModel with Koin\nDESCRIPTION: Shows how to use ScopeViewModel to handle ViewModel scoping and inject scoped dependencies.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/reference/koin-android/scope.md#2025-04-23_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nmodule {\n    viewModelOf(::MyScopeViewModel)\n    scope<MyScopeViewModel> {\n        scopedOf(::Session)\n    }    \n}\n\nclass MyScopeViewModel : ScopeViewModel() {\n\n    // on onCleared, scope is closed\n    \n    // injected from current MyScopeViewModel's scope\n    val session by scope.inject<Session>()\n\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing User Repository in Kotlin\nDESCRIPTION: Interface and implementation for a UserRepository that manages a collection of Users, with methods to find and add users.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/quickstart/kotlin.md#2025-04-23_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\ninterface UserRepository {\n    fun findUser(name : String): User?\n    fun addUsers(users : List<User>)\n}\n\nclass UserRepositoryImpl : UserRepository {\n\n    private val _users = arrayListOf<User>()\n\n    override fun findUser(name: String): User? {\n        return _users.firstOrNull { it.name == name }\n    }\n\n    override fun addUsers(users : List<User>) {\n        _users.addAll(users)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring ViewModels with SavedStateHandle in Koin Module\nDESCRIPTION: Shows two approaches to declare a ViewModel with SavedStateHandle in a Koin module.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/reference/koin-android/viewmodel.md#2025-04-23_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nviewModel { MyStateVM(get(), get()) }\n```\n\n----------------------------------------\n\nTITLE: Loading Koin Properties from Android Assets\nDESCRIPTION: Demonstrates how to load Koin properties from assets/koin.properties file using androidFileProperties.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/reference/koin-android/start.md#2025-04-23_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nstartKoin {\n    // ...\n    // use properties from assets/koin.properties\n    androidFileProperties()   \n}\n```\n\n----------------------------------------\n\nTITLE: Using KoinTestRule in an Android Instrumented Test\nDESCRIPTION: Example of using the KoinTestRule in a test class to override dependencies with test-specific implementations. The rule manages loading test modules and cleaning up after tests complete.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/reference/koin-android/instrumented-testing.md#2025-04-23_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nprivate val instrumentedTestModule = module {\n    factory<Something> { FakeSomething() }\n}\n\n@get:Rule\nval koinTestRule = KoinTestRule(\n    modules = listOf(productionModule, instrumentedTestModule)\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing UserRepository Interface in Kotlin\nDESCRIPTION: This code defines a UserRepository interface and its implementation for managing a list of users.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/quickstart/android.md#2025-04-23_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\ninterface UserRepository {\n    fun findUser(name : String): User?\n    fun addUsers(users : List<User>)\n}\n\nclass UserRepositoryImpl : UserRepository {\n\n    private val _users = arrayListOf<User>()\n\n    override fun findUser(name: String): User? {\n        return _users.firstOrNull { it.name == name }\n    }\n\n    override fun addUsers(users : List<User>) {\n        _users.addAll(users)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering UserRepository as Singleton in Koin Module\nDESCRIPTION: Koin module configuration to declare UserRepository as a singleton component using UserRepositoryImpl implementation.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/quickstart/kotlin.md#2025-04-23_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nval appModule = module {\n    single<UserRepository> { UserRepositoryImpl() }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Koin Android Dependency with Gradle\nDESCRIPTION: Gradle configuration to add Koin Android dependency to your project. This dependency provides the core functionality for dependency injection in Android applications.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/quickstart/android-viewmodel.md#2025-04-23_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\ndependencies {\n\n    // Koin for Android\n    implementation(\"io.insert-koin:koin-android:$koin_version\")\n}\n```\n\n----------------------------------------\n\nTITLE: Providing Default String Values for Koin Module Testing\nDESCRIPTION: Demonstrates how to provide default values for all string parameters in Koin modules during testing. This allows testing modules that require string inputs.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/reference/koin-test/checkmodules.md#2025-04-23_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\n@Test\nfun `test DI modules`(){\n    koinApplication {\n        modules(allModules)\n        checkModules(){\n            withInstance(\"_ID_\")\n        }\n    }\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nmodule {\n    single { (i: String) -> Simple.ComponentC(i) }\n    factory { (id: String) -> FactoryPresenter(id) }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a KoinTestRule for Flexible Module Overriding in Tests\nDESCRIPTION: JUnit test rule that manages Koin module loading and unloading during tests. It initializes Koin if needed or loads additional modules into an existing Koin instance.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/reference/koin-android/instrumented-testing.md#2025-04-23_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass KoinTestRule(\n    private val modules: List<Module>\n) : TestWatcher() {\n    override fun starting(description: Description) {\n\n        if (getKoinApplicationOrNull() == null) {\n            startKoin {\n                androidContext(InstrumentationRegistry.getInstrumentation().targetContext.applicationContext)\n                modules(modules)\n            }\n        } else {\n            loadKoinModules(modules)\n        }\n    }\n\n    override fun finished(description: Description) {\n        unloadKoinModules(modules)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Common App Module in Koin\nDESCRIPTION: Shows how to gather Koin modules in a common function for reuse across platforms. This approach enables sharing dependency injection configuration between Android and iOS.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/reference/koin-mp/kmp.md#2025-04-23_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\n// Common App Definitions\nfun appModule() = listOf(commonModule, platformModule)\n```\n\n----------------------------------------\n\nTITLE: Declaring Shared ViewModels in Koin Module\nDESCRIPTION: Shows how to declare a ViewModel that will be shared between multiple components in a Koin module.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/reference/koin-android/viewmodel.md#2025-04-23_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nval weatherAppModule = module {\n\n    // WeatherViewModel declaration for Weather View components\n    viewModel { WeatherViewModel(get(), get()) }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing User Repository\nDESCRIPTION: Interface and implementation for managing user data with methods for finding and adding users.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/quickstart/ktor.md#2025-04-23_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\ninterface UserRepository {\n    fun findUser(name : String): User?\n    fun addUsers(users : List<User>)\n}\n\nclass UserRepositoryImpl : UserRepository {\n\n    private val _users = arrayListOf<User>()\n\n    override fun findUser(name: String): User? {\n        return _users.firstOrNull { it.name == name }\n    }\n\n    override fun addUsers(users : List<User>) {\n        _users.addAll(users)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Koin Modules with JUnit Test in Kotlin\nDESCRIPTION: Creates a JUnit test to verify the Koin module configuration using the androidVerify() function.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/quickstart/android-annotations.md#2025-04-23_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\nclass CheckModulesTest : KoinTest {\n\n    @Test\n    fun checkAllModules() {\n\n        AppModule().module.androidVerify()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting Dependencies in Ktor Routes\nDESCRIPTION: Shows how to inject a service dependency in a Ktor application and use it within routes. The example demonstrates accessing an injected HelloService instance in a GET endpoint.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/reference/koin-ktor/ktor.md#2025-04-23_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nfun Application.main() {\n\n    // inject HelloService\n    val service by inject<HelloService>()\n\n    routing {\n        get(\"/hello\") {\n            call.respondText(service.sayHello())\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Koin Android Logger\nDESCRIPTION: Shows how to set up Android-specific logging for Koin using androidLogger extension.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/reference/koin-android/start.md#2025-04-23_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nstartKoin {\n    // use Android logger - Level.INFO by default\n    androidLogger()\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Injection Parameters in Koin Module\nDESCRIPTION: Demonstrates how to use injection parameters in Koin definitions, allowing parameters to be passed during resolution.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/reference/koin-core/definitions.md#2025-04-23_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nclass Presenter(val view : View)\n\nval myModule = module {\n    single{ (view : View) -> Presenter(view) }\n}\n\nval presenter : Presenter by inject { parametersOf(view) }\n```\n\n----------------------------------------\n\nTITLE: Implementing UserService\nDESCRIPTION: Service class for handling user-related business logic with dependency on UserRepository.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/quickstart/ktor.md#2025-04-23_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nclass UserService(private val userRepository: UserRepository) {\n\n    fun getDefaultUser() : User = userRepository.findUser(DefaultData.DEFAULT_USER.name) ?: error(\"Can't find default user\")\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Koin Dependencies in Gradle\nDESCRIPTION: Adding the Koin Androidx Compose dependency to the project's Gradle build file for integration with Jetpack Compose.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/quickstart/android-compose.md#2025-04-23_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\ndependencies {\n\n    // Koin for Android\n    implementation \"io.insert-koin:koin-androidx-compose:$koin_version\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Scoped Instance in Koin Module\nDESCRIPTION: Illustrates how to define a scoped instance of a Presenter in a Koin module, which is tied to the lifecycle of DetailActivity.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/reference/koin-android/scope.md#2025-04-23_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nval androidModule = module {\n\n    scope<DetailActivity> {\n        scoped { Presenter() }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Koin Context in Jetpack Compose\nDESCRIPTION: Sets up the current Koin context for use in a Compose application. This is used when Koin is already started elsewhere in the application.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/reference/koin-compose/compose.md#2025-04-23_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\n@Composable\nfun App() {\n    // Set current Koin instance to Compose context\n    KoinContext() {\n\n        MyScreen()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Resolving Request-Scoped Dependencies in Ktor Routes\nDESCRIPTION: Shows how to retrieve request-scoped components within a Ktor route handler. For each new request, a new instance of the scoped component will be created.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/reference/koin-ktor/ktor.md#2025-04-23_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nrouting {\n    get(\"/hello\") {\n        val component = call.scope.get<ScopeComponent>()\n        // ... \n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing UserService\nDESCRIPTION: Service class handling user-related business logic with dependency on UserRepository.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/quickstart/ktor-annotations.md#2025-04-23_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nclass UserService(private val userRepository: UserRepository) {\n\n    fun getDefaultUser() : User = userRepository.findUser(DefaultData.DEFAULT_USER.name) ?: error(\"Can't find default user\")\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Koin Definitions in Different Modules\nDESCRIPTION: Illustrates how to override definitions in Koin 3.1.0+. It shows that the last definition for a given type will override previous ones when multiple modules are used.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/reference/koin-core/modules.md#2025-04-23_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nval myModuleA = module {\n    single<Service> { ServiceImp() }\n}\nval myModuleB = module {\n    single<Service> { TestServiceImp() }\n}\n\nstartKoin {\n    // TestServiceImp will override ServiceImp definition\n    modules(myModuleA,myModuleB)\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Isolated Koin Context Holder\nDESCRIPTION: Creates an isolated context holder as an Object class to store a dedicated Koin instance with its own module definitions. This allows separation of SDK/white label dependencies from the main application.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/reference/koin-compose/isolated-context.md#2025-04-23_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nobject MyIsolatedKoinContext {\n\n    val koinApp = koinApplication {\n        // declare used modules\n        modules(sdkAppModule)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Multiple Koin Modules in Android Application\nDESCRIPTION: This code shows how to load multiple Koin modules in an Android application's onCreate method. It demonstrates the use of the startKoin function to initialize the Koin container with multiple modules.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/reference/koin-android/modules-android.md#2025-04-23_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MainApplication : Application() {\n\n    override fun onCreate() {\n        super.onCreate()\n\n        startKoin {\n            // ...\n\n            // Load modules\n            modules(moduleA, moduleB)\n        }\n        \n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring AndroidManifest.xml for Custom WorkManager\nDESCRIPTION: Modifies the AndroidManifest.xml to prevent Android from initializing its default WorkManagerFactory. This configuration is crucial to avoid app crashes when using a custom WorkManager setup.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/reference/koin-android/workmanager.md#2025-04-23_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n    <application . . .>\n        . . .\n        <provider\n            android:name=\"androidx.startup.InitializationProvider\"\n            android:authorities=\"${applicationId}.androidx-startup\"\n            android:exported=\"false\"\n            tools:node=\"merge\">\n            <meta-data\n                android:name=\"androidx.work.WorkManagerInitializer\"\n                android:value=\"androidx.startup\"\n                tools:node=\"remove\" />\n        </provider>\n    </application>\n```\n\n----------------------------------------\n\nTITLE: Scope Source Value Implementation\nDESCRIPTION: Demonstrates how to use scope source values in definitions and resolve them efficiently.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/reference/koin-core/scopes.md#2025-04-23_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nclass A\nclass BofA(val a : A)\n\nmodule {\n    single { A() }\n    scope<A> {\n        scoped { BofA(getSource() /* or even get() */) }\n\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Resolving Injected Parameters by Index in Koin (Kotlin)\nDESCRIPTION: This snippet demonstrates how to resolve injected parameters by their index using the square bracket notation. It shows how to inject multiple parameters into a 'Presenter' class constructor.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/reference/koin-core/injection-parameters.md#2025-04-23_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass Presenter(val view : View)\n\nval myModule = module {\n    \n    single { p -> Presenter(p[0],p[1]) }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating UUID in Koin 4.0.3\nDESCRIPTION: Utilizes the new kotlin.uuid.uuid API to generate real UUIDs across platforms in Koin 4.0.3.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/support/releases.md#2025-04-23_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nKoinPlatformTools.generateId()\n```\n\n----------------------------------------\n\nTITLE: Using ScopeActivity in Android with Koin\nDESCRIPTION: Shows how to use the ScopeActivity class provided by Koin to automatically handle scoping for an Activity.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/reference/koin-android/scope.md#2025-04-23_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyActivity : ScopeActivity() {\n    \n    // MyPresenter is resolved from MyActivity's scope \n    val presenter : MyPresenter by inject()\n}\n```\n\n----------------------------------------\n\nTITLE: Scope Linking Implementation\nDESCRIPTION: Shows how to implement scope linking to allow resolution of definitions across different scopes.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/reference/koin-core/scopes.md#2025-04-23_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nmodule {\n    single { A() }\n    scope<A> {\n        scoped { B() }\n    }\n    scope<B> {\n        scoped { C() }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing KoinScopeComponent\nDESCRIPTION: Demonstrates how to implement the KoinScopeComponent interface to associate a scope with a class.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/reference/koin-core/scopes.md#2025-04-23_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass A : KoinScopeComponent {\n    override val scope: Scope by lazy { createScope(this) }\n}\n\nclass B\n```\n\n----------------------------------------\n\nTITLE: Installing Koin Feature in Ktor Application\nDESCRIPTION: Demonstrates how to install and configure Koin within a Ktor application, including setting up logging and modules.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/setup/koin.md#2025-04-23_snippet_12\n\nLANGUAGE: kotlin\nCODE:\n```\nfun Application.main() {\n    install(Koin) {\n        slf4jLogger()\n        modules(appModule)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Koin Properties File Format Example\nDESCRIPTION: Example of property definitions in a koin.properties file with key-value pairs. Shows the format used for defining properties that can be loaded by Koin.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/reference/koin-core/start-koin.md#2025-04-23_snippet_6\n\nLANGUAGE: java\nCODE:\n```\n// Key - value\nserver_url=http://service_url\n```\n\n----------------------------------------\n\nTITLE: Implementing onCloseScope in AndroidScopeComponent\nDESCRIPTION: Demonstrates how to override the onCloseScope function to execute code before a Koin Scope is destroyed.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/reference/koin-android/scope.md#2025-04-23_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyActivity() : AppCompatActivity(contentLayoutId), AndroidScopeComponent {\n\n    override val scope: Scope by activityScope()\n\n    override fun onCloseScope() {\n        // Called before closing the Scope\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Standard Koin Application in Kotlin\nDESCRIPTION: This snippet demonstrates how to start a Koin application and register it in the global context. It uses the startKoin function to declare and use modules.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/reference/koin-core/context-isolation.md#2025-04-23_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\n// start a KoinApplication and register it in Global context\nstartKoin {\n\n    // declare used modules\n    modules(...)\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Koin Testing Dependencies with Groovy DSL\nDESCRIPTION: Example showing how to add Koin testing dependencies including support for JUnit 4 and JUnit 5. These dependencies enable testing Koin modules and components.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/setup/koin.md#2025-04-23_snippet_4\n\nLANGUAGE: groovy\nCODE:\n```\ndependencies {\n    // Koin Test features\n    testImplementation(\"io.insert-koin:koin-test:$koin_version\")\n    // Koin for JUnit 4\n    testImplementation(\"io.insert-koin:koin-test-junit4:$koin_version\")\n    // Koin for JUnit 5\n    testImplementation(\"io.insert-koin:koin-test-junit5:$koin_version\")\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Koin in Shared Code\nDESCRIPTION: Creates a helper function to initialize Koin in the shared codebase. This function can be called from platform-specific entry points to set up dependency injection.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/reference/koin-mp/kmp.md#2025-04-23_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\n// Helper.kt\n\nfun initKoin(){\n    startKoin {\n        modules(appModule())\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Koin Modules with JUnit Test in Kotlin\nDESCRIPTION: This code demonstrates how to create a JUnit test to verify Koin module configurations.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/quickstart/android.md#2025-04-23_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\nclass CheckModulesTest : KoinTest {\n\n    @Test\n    fun checkAllModules() {\n        appModule.verify()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Koin Modules with Dynamic Parameters\nDESCRIPTION: Demonstrates how to verify Koin modules that use dynamic parameters by providing test values through the CheckKoinModules DSL.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/reference/koin-test/checkmodules.md#2025-04-23_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nval myModule = module {\n    factory { (id: String) -> FactoryPresenter(id) }\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nclass CheckModulesTest : KoinTest {\n\n    @Test\n    fun verifyKoinApp() {\n        \n        koinApplication {\n            modules(myModule)\n            checkModules(){\n                // value to add to Koin, used by definition\n                withInstance(\"_my_id_value\")\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Koin Android Dependencies with Groovy DSL\nDESCRIPTION: Example showing how to add the Koin Android dependency to an Android project. This dependency provides Android-specific Koin features and extensions.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/setup/koin.md#2025-04-23_snippet_5\n\nLANGUAGE: groovy\nCODE:\n```\ndependencies {\n    implementation(\"io.insert-koin:koin-android:$koin_android_version\")\n}\n```\n\n----------------------------------------\n\nTITLE: Linking Scopes for Koin Module Testing\nDESCRIPTION: Demonstrates how to link scopes during Koin module testing to allow injecting instances from one scope into another scope's definitions.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/reference/koin-test/checkmodules.md#2025-04-23_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\nval myModule = module {\n    scope(named(\"scope1\")) {\n        scoped { ComponentA() }\n    }\n    scope(named(\"scope2\")) {\n        scoped { ComponentB(get()) }\n    }\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\n@Test\nfun `test DI modules`(){\n    koinApplication {\n        modules(myModule)\n        checkModules(){\n            withScopeLink(named(\"scope2\"), named(\"scope1\"))\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Koin Logger Interface Implementation\nDESCRIPTION: The abstract Logger class used by Koin for logging activities. It defines the basic logging API with different severity levels (debug, info, error).\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/reference/koin-core/start-koin.md#2025-04-23_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nabstract class Logger(var level: Level = Level.INFO) {\n\n    abstract fun log(level: Level, msg: MESSAGE)\n\n    fun debug(msg: MESSAGE) {\n        log(Level.DEBUG, msg)\n    }\n\n    fun info(msg: MESSAGE) {\n        log(Level.INFO, msg)\n    }\n\n    fun error(msg: MESSAGE) {\n        log(Level.ERROR, msg)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Mocking Component Dependencies for Koin Module Testing\nDESCRIPTION: Shows how to use mocked instances with MockProviderRule to test Koin modules that require dependencies. This example uses Mockito for creating mock objects.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/reference/koin-test/checkmodules.md#2025-04-23_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nval myModule1 = module {\n    factory { (a : ComponentA) -> ComponentB(a) }\n}\n// or\nval myModule2 = module {\n    factory { ComponentB(get()) }\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nclass CheckModulesTest : KoinTest {\n    \n    @get:Rule\n    val mockProvider = MockProviderRule.create { clazz ->\n        // Setup your nock framework\n        Mockito.mock(clazz.java)\n    }\n\n    @Test\n    fun verifyKoinApp() {\n        \n        koinApplication {\n            modules(myModule1)\n            checkModules(){\n                // add a mock of ComponentA to Koin \n                withInstance<ComponentA>()\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Android Compose Integration\nDESCRIPTION: Integration of Koin with Android Compose UI\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/quickstart/kmp.md#2025-04-23_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nval greeting = koinInject<UserPresenter>().sayHello(\"Koin\")\n\nColumn(Modifier.fillMaxWidth(), horizontalAlignment = Alignment.CenterHorizontally) {\n    Image(painterResource(Res.drawable.compose_multiplatform), null)\n    Text(\"Compose: $greeting\")\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring and Using Shared Scope in Koin\nDESCRIPTION: Shows how to declare a shared scope and link it to multiple components for sharing instances across scopes.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/reference/koin-android/scope.md#2025-04-23_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\nmodule {\n    // Shared user session data\n    scope(named(\"session\")) {\n        scoped { UserSession() }\n    }\n}\n\nval ourSession = getKoin().createScope(\"ourSession\",named(\"session\"))\n\n// link ourSession scope to current `scope`, from ScopeActivity or ScopeFragment\nscope.linkTo(ourSession)\n```\n\n----------------------------------------\n\nTITLE: Providing Specific Parameter Values for Koin Module Testing\nDESCRIPTION: Shows how to provide specific parameter values for individual definitions during Koin module testing using withParameter and withParameters functions.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/reference/koin-test/checkmodules.md#2025-04-23_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\n@Test\nfun `test DI modules`(){\n    koinApplication {\n        modules(allModules)\n        checkModules(){\n            withParameter<FactoryPresenter> { \"_FactoryId_\" }\n            withParameters<FactoryPresenter> { parametersOf(\"_FactoryId_\",...) }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring a ViewModel in Koin Module\nDESCRIPTION: Shows two different ways to declare a ViewModel in a Koin module: using the viewModel builder directly or using the constructor DSL with viewModelOf. Both approaches register the ViewModel for injection.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/reference/koin-android/compose.md#2025-04-23_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nmodule {\n    viewModel { MyViewModel() }\n    // or constructor DSL\n    viewModelOf(::MyViewModel)\n}\n```\n\n----------------------------------------\n\nTITLE: Using checkKoinModules with Android Dependencies\nDESCRIPTION: Shows an alternative approach to test Android-specific Koin modules using the checkKoinModules function with mock Android dependencies.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/reference/koin-test/checkmodules.md#2025-04-23_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nclass CheckModulesTest {\n\n    @get:Rule\n    val rule: TestRule = InstantTaskExecutorRule()\n\n    @get:Rule\n    val mockProvider = MockProviderRule.create { clazz ->\n        Mockito.mock(clazz.java)\n    }\n\n    @Test\n    fun `test DI modules`(){\n        checkKoinModules(allModules) {\n            withInstance<Context>()\n            withInstance<Application>()\n            withInstance<SavedStateHandle>()\n            withInstance<WorkerParameters>()\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Koin Module with Classic DSL\nDESCRIPTION: Showing a Koin module declaration using the classic DSL syntax with single and viewModel functions.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/quickstart/android-compose.md#2025-04-23_snippet_13\n\nLANGUAGE: kotlin\nCODE:\n```\nval appModule = module {\n    single<HelloRepository> { HelloRepositoryImpl() }\n    viewModel { MyViewModel(get()) }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing UserViewModel with Koin Annotation in Kotlin\nDESCRIPTION: Creates a UserViewModel class that depends on UserRepository and is declared as a Koin ViewModel using the @KoinViewModel annotation.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/quickstart/android-annotations.md#2025-04-23_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\n@KoinViewModel\nclass UserViewModel(private val repository: UserRepository) : ViewModel() {\n\n    fun sayHello(name : String) : String{\n        val foundUser = repository.findUser(name)\n        return foundUser?.let { \"Hello '$it' from $this\" } ?: \"User '$name' not found!\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Retained Scope for Android Activity\nDESCRIPTION: Shows how to create a retained scope for an Activity using Koin, which is backed by a ViewModel lifecycle.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/reference/koin-android/scope.md#2025-04-23_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyActivity() : AppCompatActivity(contentLayoutId), AndroidScopeComponent {\n\n    override val scope: Scope by activityRetainedScope()\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Fragment and Service in Koin Module\nDESCRIPTION: This snippet shows how to declare a Fragment and its dependencies in a Koin module. It uses the fragment() function to declare the Fragment and the single() function to declare the Service.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/reference/koin-android/fragment-factory.md#2025-04-23_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nval appModule = module {\n    single { MyService() }\n    fragment { MyFragment(get()) }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing User Repository Pattern in Kotlin\nDESCRIPTION: Creation of a UserRepository interface and its implementation (UserRepositoryImpl) to manage a collection of users, including functions to find users by name and add new users to the collection.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/quickstart/android-viewmodel.md#2025-04-23_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\ninterface UserRepository {\n    fun findUser(name : String): User?\n    fun addUsers(users : List<User>)\n}\n\nclass UserRepositoryImpl : UserRepository {\n\n    private val _users = arrayListOf<User>()\n\n    override fun findUser(name: String): User? {\n        return _users.firstOrNull { it.name == name }\n    }\n\n    override fun addUsers(users : List<User>) {\n        _users.addAll(users)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting Dependencies in Compose Multiplatform\nDESCRIPTION: Showcases new functions for dependency injection in Compose Multiplatform projects using Koin.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/support/releases.md#2025-04-23_snippet_4\n\nLANGUAGE: Kotlin\nCODE:\n```\nkoinInject()\nrememberKoinInject()\nKoinApplication\n```\n\n----------------------------------------\n\nTITLE: Starting Koin in Android Application Class\nDESCRIPTION: Initializes Koin in the Android Application class, setting up the Android context and loading the generated Koin module.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/quickstart/android-annotations.md#2025-04-23_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\n// generated\nimport org.koin.ksp.generated.*\n\nclass MainApplication : Application(){\n    override fun onCreate() {\n        super.onCreate()\n        \n        startKoin{\n            androidLogger()\n            androidContext(this@MainApplication)\n            modules(AppModule().module)\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Functional Dependency Injection in Composable Parameters\nDESCRIPTION: Demonstrates the recommended approach for dependency injection in Jetpack Compose by injecting dependencies as function parameters with default values. This maintains the functional aspect of Compose while providing flexibility.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/reference/koin-android/compose.md#2025-04-23_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\n@Composable\nfun App(myService: MyService = get()) {\n}\n```\n\n----------------------------------------\n\nTITLE: Dealing with Generics in Koin Module\nDESCRIPTION: Shows how to handle generic types in Koin definitions by using named definitions to differentiate between similar types.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/reference/koin-core/definitions.md#2025-04-23_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\nmodule {\n    single(named(\"Ints\")) { ArrayList<Int>() }\n    single(named(\"Strings\")) { ArrayList<String>() }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Scoped Fragment in Koin Module\nDESCRIPTION: This snippet shows how to declare a Fragment within a Koin scope. It uses the scope<> function to create a scope for MyActivity and declares the Fragment as a scoped definition.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/reference/koin-android/fragment-factory.md#2025-04-23_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nval appModule = module {\n    scope<MyActivity> {\n        fragment { MyFragment(get()) }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing UserRepository Interface and Implementation in Kotlin\nDESCRIPTION: Definition of a repository interface for managing users and its implementation that handles storing, finding, and adding users to a collection.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/quickstart/cmp.md#2025-04-23_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ninterface UserRepository {\n    fun findUser(name : String): User?\n    fun addUsers(users : List<User>)\n}\n\nclass UserRepositoryImpl : UserRepository {\n\n    private val _users = arrayListOf<User>()\n\n    override fun findUser(name: String): User? {\n        return _users.firstOrNull { it.name == name }\n    }\n\n    override fun addUsers(users : List<User>) {\n        _users.addAll(users)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Koin Dependencies with Version Catalogs in Gradle\nDESCRIPTION: Example of setting up Koin dependencies using Gradle's version catalogs feature. This approach defines versions and libraries in a dedicated TOML file for better dependency management.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/setup/koin.md#2025-04-23_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[versions]\nkoin-bom = \"x.x.x\"\n...\n\n[libraries]\nkoin-bom = { module = \"io.insert-koin:koin-bom\", version.ref = \"koin-bom\" }\nkoin-core = { module = \"io.insert-koin:koin-core\" }\n...\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ndependencies {\n    implementation(project.dependencies.platform(libs.koin.bom))\n    implementation(libs.koin.core)\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Koin Module with Component Scanning in Kotlin\nDESCRIPTION: Creates a Koin module class using annotations to enable component scanning for a specific package.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/quickstart/android-annotations.md#2025-04-23_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\n@Module\n@ComponentScan(\"org.koin.sample\")\nclass AppModule\n```\n\n----------------------------------------\n\nTITLE: Main Application Entry Point\nDESCRIPTION: Application entry point for starting the Ktor server.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/quickstart/ktor.md#2025-04-23_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main(args: Array<String>) {\n    // Start Ktor\n    embeddedServer(Netty, commandLineEnvironment(args)).start(wait = true)\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Koin with Custom Android Context\nDESCRIPTION: Demonstrates how to initialize Koin from any Android class by providing a custom Android Context instance.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/reference/koin-android/start.md#2025-04-23_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nstartKoin {\n    //inject Android context\n    androidContext(/* your android context */)\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing User Repository Pattern in Kotlin\nDESCRIPTION: Creating a UserRepository interface and its implementation to manage a collection of users, including finding users by name and adding new users.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/quickstart/android-compose.md#2025-04-23_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\ninterface UserRepository {\n    fun findUser(name : String): User?\n    fun addUsers(users : List<User>)\n}\n\nclass UserRepositoryImpl : UserRepository {\n\n    private val _users = arrayListOf<User>()\n\n    override fun findUser(name: String): User? {\n        return _users.firstOrNull { it.name == name }\n    }\n\n    override fun addUsers(users : List<User>) {\n        _users.addAll(users)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Koin Module with Injected Parameters\nDESCRIPTION: Example showing how to verify a Koin module that uses parametersOf with explicit parameter type definitions.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/reference/koin-test/verify.md#2025-04-23_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass ModuleCheck {\n\n    // given a definition with an injected definition\n    val module = module {\n        single { (a: Simple.ComponentA) -> Simple.ComponentB(a) }\n    }\n\n    @Test\n    fun checkKoinModule() {\n        \n        // Verify and declare Injected Parameters\n        module.verify(\n            injections = injectedParameters(\n                definition<Simple.ComponentB>(Simple.ComponentA::class)\n            )\n        )\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Koin Module with Constructor DSL\nDESCRIPTION: Demonstrating a more compact way to declare Koin modules using the constructor DSL with singleOf and viewModelOf functions.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/quickstart/android-compose.md#2025-04-23_snippet_14\n\nLANGUAGE: kotlin\nCODE:\n```\nval appModule = module {\n    singleOf(::UserRepositoryImpl) { bind<UserRepository>() }\n    viewModelOf(::UserViewModel)\n}\n```\n\n----------------------------------------\n\nTITLE: Resolving a Named Component Instance\nDESCRIPTION: Shows how to retrieve a specifically named component instance from the Koin container using the 'named' qualifier.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/reference/koin-core/koin-component.md#2025-04-23_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\n// retrieve from given module\nval a = get<ComponentA>(named(\"A\"))\n```\n\n----------------------------------------\n\nTITLE: Injecting Dependencies in Jetpack Compose\nDESCRIPTION: Demonstrates how to inject a dependency into a Composable function using Koin. It shows both direct injection and injection as a function parameter.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/reference/koin-compose/compose.md#2025-04-23_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\n@Composable\nfun App() {\n    val myService = koinInject<MyService>()\n}\n\n@Composable\nfun App(myService: MyService = koinInject()) {\n\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing UserService with Dependency Injection\nDESCRIPTION: UserService class that depends on UserRepository to retrieve user data, demonstrating constructor injection.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/quickstart/kotlin.md#2025-04-23_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nclass UserService(private val userRepository: UserRepository) {\n\n    fun getDefaultUser() : User = userRepository.findUser(DefaultData.DEFAULT_USER.name) ?: error(\"Can't find default user\")\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Koin Dependencies for Ktor\nDESCRIPTION: Sets up the required dependencies for using Koin with Ktor, including the core Koin-Ktor integration and SLF4J logger.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/setup/koin.md#2025-04-23_snippet_11\n\nLANGUAGE: groovy\nCODE:\n```\ndependencies {\n    // Koin for Ktor \n    implementation(\"io.insert-koin:koin-ktor:$koin_ktor\")\n    // SLF4J Logger\n    implementation(\"io.insert-koin:koin-logger-slf4j:$koin_ktor\")\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing UserStateHolder Pattern\nDESCRIPTION: Creating a UserStateHolder class as an alternative to ViewModel for managing user state in composables.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/quickstart/android-compose.md#2025-04-23_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nclass UserStateHolder(private val repository: UserRepository) {\n\n    fun sayHello(name : String) : String{\n        val foundUser = repository.findUser(name)\n        return foundUser?.let { \"Hello '$it' from $this\" } ?: \"User '$name' not found!\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting Presenter in Android Activity using Koin\nDESCRIPTION: Demonstrates how to inject a Presenter into an Android Activity using Koin's property delegation.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/reference/koin-android/scope.md#2025-04-23_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass DetailActivity : AppCompatActivity() {\n\n    // injected Presenter\n    override val presenter : Presenter by inject()\n\n```\n\n----------------------------------------\n\nTITLE: Creating Empty Koin Module\nDESCRIPTION: Initial setup of an empty Koin module for dependency injection configuration.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/quickstart/ktor.md#2025-04-23_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nval appModule = module {\n    \n}\n```\n\n----------------------------------------\n\nTITLE: Implementing UserPresenter in Kotlin\nDESCRIPTION: This code defines a UserPresenter class that uses UserRepository to display user information.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/quickstart/android.md#2025-04-23_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nclass UserPresenter(private val repository: UserRepository) {\n\n    fun sayHello(name : String) : String{\n        val foundUser = repository.findUser(name)\n        return foundUser?.let { \"Hello '$it' from $this\" } ?: \"User '$name' not found!\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Koin Test Dependency in Gradle\nDESCRIPTION: This snippet shows how to add the Koin Test dependency for JUnit4 in the Gradle file.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/quickstart/android.md#2025-04-23_snippet_9\n\nLANGUAGE: groovy\nCODE:\n```\n// Add Maven Central to your repositories if needed\nrepositories {\n\tmavenCentral()    \n}\n\ndependencies {\n    \n    // Koin for Tests\n    testImplementation \"io.insert-koin:koin-test-junit4:$koin_version\"\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting ViewModel in Jetpack Compose\nDESCRIPTION: Using koinViewModel() function to inject the UserViewModel into a Composable function.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/quickstart/android-compose.md#2025-04-23_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\n@Composable\nfun ViewModelInject(userName : String, viewModel: UserViewModel = koinViewModel()){\n    Text(text = viewModel.sayHello(userName), modifier = Modifier.padding(8.dp))\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring the Custom Test Runner in Gradle\nDESCRIPTION: Gradle configuration to specify the custom InstrumentationTestRunner for Android instrumented tests.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/reference/koin-android/instrumented-testing.md#2025-04-23_snippet_2\n\nLANGUAGE: groovy\nCODE:\n```\ntestInstrumentationRunner \"com.example.myapplication.InstrumentationTestRunner\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradle for Koin Annotations in Android\nDESCRIPTION: Sets up the KSP plugin and adds Koin annotation dependencies to the Gradle build file. It also enables compile-time checks for Koin configuration.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/quickstart/android-annotations.md#2025-04-23_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\nplugins {\n    alias(libs.plugins.ksp)\n}\n\ndependencies {\n    // ...\n\n    implementation(libs.koin.annotations)\n    ksp(libs.koin.ksp)\n}\n\n// Compile time check\nksp {\n    arg(\"KOIN_CONFIG_CHECK\",\"true\")\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Koin Module with UserPresenter in Kotlin\nDESCRIPTION: This snippet updates the Koin module to include the UserPresenter as a factory definition.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/quickstart/android.md#2025-04-23_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nval appModule = module {\n    singleOf(::UserRepositoryImpl) { bind<UserRepository>() }\n    factoryOf(::UserStateHolder)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Module Context in Koin 0.2.x\nDESCRIPTION: Shows how to implement the new required context() function in a Module class to unlock the Koin DSL for dependency declaration.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/CHANGELOG.md#2025-04-23_snippet_5\n\nLANGUAGE: Kotlin\nCODE:\n```\nclass MykModule : Module() {\n    override fun context() = declareContext { ... }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering UserRepository as Singleton in Koin Module\nDESCRIPTION: Declaring UserRepositoryImpl as a singleton in the Koin module and binding it to the UserRepository interface.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/quickstart/android-compose.md#2025-04-23_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nval appModule = module {\n    singleOf(::UserRepositoryImpl) bind UserRepository::class\n}\n```\n\n----------------------------------------\n\nTITLE: Definition Termination in Koin Module\nDESCRIPTION: Shows how to add a closing callback to a definition using the 'onClose' function in a Koin module.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/reference/koin-core/definitions.md#2025-04-23_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nclass Presenter(val view : View)\n\nval myModule = module {\n    factory { (view : View) -> Presenter(view) } onClose { // closing callback - it is Presenter }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependencies for Koin in Kotlin Multiplatform\nDESCRIPTION: Defines version constants and dependencies for Koin in a Kotlin Multiplatform project. It includes core, test, and Android-specific dependencies.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/reference/koin-mp/kmp.md#2025-04-23_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\n// Dependencies.kt\n\nobject Versions {\n    const val koin = \"3.2.0\"\n}\n\nobject Deps {\n\n    object Koin {\n        const val core = \"io.insert-koin:koin-core:${Versions.koin}\"\n        const val test = \"io.insert-koin:koin-test:${Versions.koin}\"\n        const val android = \"io.insert-koin:koin-android:${Versions.koin}\"\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing User Presenter in Kotlin\nDESCRIPTION: Presenter component for handling user display logic with dependency injection\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/quickstart/kmp.md#2025-04-23_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass UserPresenter(private val repository: UserRepository) {\n\n    fun sayHello(name : String) : String{\n        val foundUser = repository.findUser(name)\n        val platform = getPlatform()\n        return foundUser?.let { \"Hello '$it' from ${platform.name}\" } ?: \"User '$name' not found!\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing User Repository\nDESCRIPTION: Interface and implementation for UserRepository managing user operations like finding and adding users.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/quickstart/ktor-annotations.md#2025-04-23_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\ninterface UserRepository {\n    fun findUser(name : String): User?\n    fun addUsers(users : List<User>)\n}\n\nclass UserRepositoryImpl : UserRepository {\n\n    private val _users = arrayListOf<User>()\n\n    override fun findUser(name: String): User? {\n        return _users.firstOrNull { it.name == name }\n    }\n\n    override fun addUsers(users : List<User>) {\n        _users.addAll(users)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining User Data Class in Kotlin\nDESCRIPTION: Basic data class definition for User entity\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/quickstart/kmp.md#2025-04-23_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class User(val name : String)\n```\n\n----------------------------------------\n\nTITLE: Declaring Empty Koin Module\nDESCRIPTION: Creating an empty Koin module that will be used to define injectable components.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/quickstart/android-compose.md#2025-04-23_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nval appModule = module {\n    \n}\n```\n\n----------------------------------------\n\nTITLE: Integrating Koin Context in Compose MainActivity\nDESCRIPTION: Setting up KoinAndroidContext in the MainActivity to connect Koin with the Compose application.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/quickstart/android-compose.md#2025-04-23_snippet_12\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MainActivity : AppCompatActivity() {\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContent {\n            MaterialTheme {\n                KoinAndroidContext {\n                    App()\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Koin Module Configuration\nDESCRIPTION: Full module configuration with UserRepository and UserPresenter declarations\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/quickstart/kmp.md#2025-04-23_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nval appModule = module {\n    singleOf(::UserRepositoryImpl) { bind<UserRepository>() }\n    factoryOf(::UserPresenter)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing UserRepository Interface in Kotlin\nDESCRIPTION: Defines an interface and implementation for managing a collection of Users, including methods to find and add users.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/quickstart/android-annotations.md#2025-04-23_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\ninterface UserRepository {\n    fun findUser(name : String): User?\n    fun addUsers(users : List<User>)\n}\n\nclass UserRepositoryImpl : UserRepository {\n\n    private val _users = arrayListOf<User>()\n\n    override fun findUser(name: String): User? {\n        return _users.firstOrNull { it.name == name }\n    }\n\n    override fun addUsers(users : List<User>) {\n        _users.addAll(users)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Empty Koin Module\nDESCRIPTION: Initial declaration of a Koin module without any component definitions.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/quickstart/kotlin.md#2025-04-23_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nval appModule = module {\n    \n}\n```\n\n----------------------------------------\n\nTITLE: Creating User Data Class in Kotlin\nDESCRIPTION: Defining a simple User data class that will be managed by the repository.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/quickstart/android-compose.md#2025-04-23_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class User(val name : String)\n```\n\n----------------------------------------\n\nTITLE: Using KoinContext in Compose for Android\nDESCRIPTION: Introduces the new KoinAndroidContext for binding to the current Koin context in Android environments using Jetpack Compose.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/support/releases.md#2025-04-23_snippet_3\n\nLANGUAGE: Kotlin\nCODE:\n```\nKoinAndroidContext\n```\n\n----------------------------------------\n\nTITLE: Native Platform Interface Definition\nDESCRIPTION: Platform-specific interface declaration for native implementations\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/quickstart/kmp.md#2025-04-23_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\ninterface Platform {\n    val name: String\n}\n\nexpect fun getPlatform(): Platform\n```\n\n----------------------------------------\n\nTITLE: Declaring Koin Module with UserRepository Singleton\nDESCRIPTION: Basic Koin module declaration that registers a UserRepositoryImpl as a singleton implementation of the UserRepository interface.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/quickstart/cmp.md#2025-04-23_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nmodule {\n    singleOf(::UserRepositoryImpl) { bind<UserRepository>() }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring ListenableWorker in Koin Module\nDESCRIPTION: Demonstrates how to declare a ListenableWorker in a Koin module. This snippet shows the declaration of a service and a worker in the same module.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/reference/koin-android/workmanager.md#2025-04-23_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nval appModule = module {\n    single { MyService() }\n    worker { MyListenableWorker(get()) }\n}\n```\n\n----------------------------------------\n\nTITLE: iOS Koin Initialization\nDESCRIPTION: Initialization setup for Koin in iOS application\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/quickstart/kmp.md#2025-04-23_snippet_9\n\nLANGUAGE: swift\nCODE:\n```\n@main\nstruct iOSApp: App {\n    \n    init() {\n        KoinAppKt.doInitKoin()\n    }\n\n    //...\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Koin in iOS Application\nDESCRIPTION: Shows how to initialize Koin from Swift code in an iOS application's entry point. It calls the shared initialization function from the app's init method.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/reference/koin-mp/kmp.md#2025-04-23_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\n@main\nstruct iOSApp: App {\n    \n    // KMM - Koin Call\n    init() {\n        HelperKt.doInitKoin()\n    }\n    \n    var body: some Scene {\n        WindowGroup {\n            ContentView()\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining User Data Class in Kotlin\nDESCRIPTION: This snippet defines a simple User data class with a name property.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/quickstart/android.md#2025-04-23_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class User(val name : String)\n```\n\n----------------------------------------\n\nTITLE: Declaring Koin Module for Dependency Injection\nDESCRIPTION: Module declaration for singleton UserRepository instance\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/quickstart/kmp.md#2025-04-23_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nmodule {\n    singleOf(::UserRepositoryImpl) { bind<UserRepository>() }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing WorkManager with Koin in Android Application\nDESCRIPTION: Sets up a custom WorkManager instance using Koin's workManagerFactory() in the Application class. This code should be placed in the onCreate() method of the Application class.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/reference/koin-android/workmanager.md#2025-04-23_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MainApplication : Application(), KoinComponent {\n\n    override fun onCreate() {\n        super.onCreate()\n\n        startKoin {\n            // setup a WorkManager instance\n            workManagerFactory()\n            modules(...)\n        }\n\n        setupWorkManagerFactory()\n}\n```\n\n----------------------------------------\n\nTITLE: iOS Integration Setup\nDESCRIPTION: Integration of Koin with iOS SwiftUI\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/quickstart/kmp.md#2025-04-23_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\nstruct ContentView: View {\n    let greet = KoinKt.getUserPresenter().sayHello(name: \"Koin\")\n}\n```\n\n----------------------------------------\n\nTITLE: Creating KoinComponent in Shared Code\nDESCRIPTION: Implements a helper class that uses KoinComponent to access injected dependencies. This allows Swift code to indirectly use Koin-managed instances.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/reference/koin-mp/kmp.md#2025-04-23_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\n// Injection Boostrap Helper\nclass GreetingHelper : KoinComponent {\n    private val greeting : Greeting by inject()\n    fun greet() : String = greeting.greeting()\n}\n```\n\n----------------------------------------\n\nTITLE: Using Different Parameter Types in Koin (Kotlin)\nDESCRIPTION: This snippet showcases the usage of different parameter types in Koin, including 'parameterArrayOf' for indexed access, 'parameterSetOf' for type-based access, and 'parametersOf' for combined functionality. It demonstrates how to access values from these parameter collections.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/reference/koin-core/injection-parameters.md#2025-04-23_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nval params = parameterArrayOf(1,2,3)\nparams.get<Int>() == 1\nparams.get<Int>() == 2\nparams.get<Int>() == 3\nparams.get<Int>() == 3\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nval params = parameterSetOf(\"a_string\", 42)\nparams.get<Int>() == 42\nparams.get<String>() == \"a_string\"\nparams.get<Int>() == 42\nparams.get<String>() == \"a_string\"\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nval params = parametersOf(1,2,\"a_string\")\nparams.get<String>() == \"a_string\"\nparams.get<Int>() == 1\nparams.get<Int>() == 2\nparams.get<Int>() == 2\nparams.get<String>() == \"a_string\"\n```\n\n----------------------------------------\n\nTITLE: Defining Koin Module with Dependencies for Testing\nDESCRIPTION: Declares a Koin module with singleton components for testing. The module registers a HelloMessageData class and a HelloServiceImpl that implements the HelloService interface.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/quickstart/junit-test.md#2025-04-23_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval helloModule = module {\n    single { HelloMessageData() }\n    single { HelloServiceImpl(get()) as HelloService }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring UserRepositoryImpl as Singleton\nDESCRIPTION: Marking UserRepositoryImpl as a singleton component using Koin's @Single annotation.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/quickstart/ktor-annotations.md#2025-04-23_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\n@Single\nclass UserRepositoryImpl : UserRepository\n```\n\n----------------------------------------\n\nTITLE: Android Koin Configuration\nDESCRIPTION: Configuration setup for Koin in Android application\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/quickstart/kmp.md#2025-04-23_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nfun koinAndroidConfiguration(context: Context) : KoinAppDeclaration = {\n    androidContext(context)\n    androidLogger()\n    koinSharedConfiguration()\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Shareable Koin Modules\nDESCRIPTION: Shows how to create shareable Koin modules using a function instead of a val. This approach avoids preallocating factories and is recommended for shared modules.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/reference/koin-core/modules.md#2025-04-23_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nfun sharedModule() = module {\n    // Your definitions ...\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Definition Override in Koin\nDESCRIPTION: Demonstrates how to disable the default behavior of allowing definition overrides in Koin. This can be useful to prevent accidental overrides in larger projects.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/reference/koin-core/modules.md#2025-04-23_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nstartKoin {\n    // Forbid definition override\n    allowOverride(false)\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Koin Modules from External Ktor Module\nDESCRIPTION: Demonstrates how to load specific Koin modules from an external Ktor module using the koin function. This allows modularizing both Ktor and Koin configurations.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/reference/koin-ktor/ktor.md#2025-04-23_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nfun Application.module2() {\n\n    koin {\n        // load koin modules\n        modules(appModule2)\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Manually Implementing ViewModel Scope\nDESCRIPTION: Demonstrates how to manually implement a ViewModel scope without using the ScopeViewModel class.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/reference/koin-android/scope.md#2025-04-23_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyScopeViewModel : ViewModel(), KoinScopeComponent {\n\n    override val scope: Scope = createScope(this)\n\n    // inject your dependency\n    val session by scope.inject<Session>()\n\n    // clear scope\n    override fun onCleared() {\n        super.onCleared()\n        scope.close()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Ktor Server\nDESCRIPTION: Main function to start the Ktor server using Netty engine.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/quickstart/ktor-annotations.md#2025-04-23_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main(args: Array<String>) {\n    // Start Ktor\n    embeddedServer(Netty, commandLineEnvironment(args)).start(wait = true)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing User Repository in Kotlin\nDESCRIPTION: Interface and implementation for managing user data with methods to find and add users\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/quickstart/kmp.md#2025-04-23_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ninterface UserRepository {\n    fun findUser(name : String): User?\n    fun addUsers(users : List<User>)\n}\n\nclass UserRepositoryImpl : UserRepository {\n\n    private val _users = arrayListOf<User>()\n\n    override fun findUser(name: String): User? {\n        return _users.firstOrNull { it.name == name }\n    }\n\n    override fun addUsers(users : List<User>) {\n        _users.addAll(users)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Linking Components in Separate Koin Modules\nDESCRIPTION: Demonstrates how to create and link components across different Koin modules. It shows the declaration of two classes and their corresponding modules, illustrating Koin's lazy resolution of dependencies.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/reference/koin-core/modules.md#2025-04-23_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\n// ComponentB <- ComponentA\nclass ComponentA()\nclass ComponentB(val componentA : ComponentA)\n\nval moduleA = module {\n    // Singleton ComponentA\n    single { ComponentA() }\n}\n\nval moduleB = module {\n    // Singleton ComponentB with linked instance ComponentA\n    single { ComponentB(get()) }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring UserService as Singleton\nDESCRIPTION: Marking UserService as a singleton component with dependency injection.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/quickstart/ktor-annotations.md#2025-04-23_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\n@Single\nclass UserService(private val userRepository: UserRepository)\n```\n\n----------------------------------------\n\nTITLE: Proposed DSL Improvement for WorkerFactory Declaration\nDESCRIPTION: Suggests an improved DSL for declaring WorkerFactories in a Koin module. This approach allows for more flexible and cleaner factory declarations.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/reference/koin-android/workmanager.md#2025-04-23_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nval workerFactoryModule = module {\n   factory<WorkerFactory> { WorkerFactory1() }\n   factory<WorkerFactory> { WorkerFactory2() }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Compose for iOS\nDESCRIPTION: Code that initializes the Compose UI for iOS by creating a view controller that hosts the Compose content.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/quickstart/cmp.md#2025-04-23_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\n// Koin.kt\n\nfun MainViewController() = ComposeUIViewController { App() }\n```\n\n----------------------------------------\n\nTITLE: Defining Classes with Injected Parameters\nDESCRIPTION: Example class that requires parameters to be injected during instantiation.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/reference/koin-core/dsl-update.md#2025-04-23_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyFactory(val id : String)\n```\n\n----------------------------------------\n\nTITLE: Loading Additional Modules After Koin Initialization\nDESCRIPTION: Demonstrates how to load additional Koin modules after the container has already been started. Useful for SDK developers who need to add modules without controlling the initial startKoin call.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/reference/koin-core/start-koin.md#2025-04-23_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nloadKoinModules(module1,module2 ...)\n```\n\n----------------------------------------\n\nTITLE: Declaring Koin Module with Component Scan\nDESCRIPTION: Module declaration using Koin annotations to scan and register components from a specific package.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/quickstart/ktor-annotations.md#2025-04-23_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\n@Module\n@ComponentScan(\"org.koin.sample\")\nclass AppModule\n```\n\n----------------------------------------\n\nTITLE: Defining Platform Interface for Platform-Specific Implementation\nDESCRIPTION: Definition of a platform interface with expect/actual pattern to handle platform-specific implementations for Android and iOS.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/quickstart/cmp.md#2025-04-23_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\ninterface Platform {\n    val name: String\n}\n\nexpect fun getPlatform(): Platform\n```\n\n----------------------------------------\n\nTITLE: Adding Koin Core for Kotlin Multiplatform\nDESCRIPTION: Example showing how to add the Koin Core dependency for a Kotlin Multiplatform project. This dependency is used in the shared Kotlin code that runs on multiple platforms.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/setup/koin.md#2025-04-23_snippet_10\n\nLANGUAGE: groovy\nCODE:\n```\ndependencies {\n    implementation(\"io.insert-koin:koin-core:$koin_version\")\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Constructor DSL Definitions with Options\nDESCRIPTION: Adding definition options to Constructor DSL declarations using a lambda expression to specify qualifiers, bindings, and creation timing.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/reference/koin-core/dsl-update.md#2025-04-23_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nmodule {\n    singleOf(::ClassA) { \n        // definition options\n        named(\"my_qualifier\")\n        bind<InterfaceA>()\n        createdAtStart()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Instance with Injected Parameters\nDESCRIPTION: Retrieving a factory instance with parameters injected at runtime using parametersOf function.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/reference/koin-core/dsl-update.md#2025-04-23_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nval id = \"a_factory_id\"\nval factory = koin.get<MyFactory> { parametersOf(id)}\n```\n\n----------------------------------------\n\nTITLE: Defining Apache License 2.0 Header for Koin Project\nDESCRIPTION: This code snippet contains the Apache License 2.0 header used in the Koin project. It includes copyright information, license terms, and conditions for use, modification, and distribution of the software.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/license_header.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n/*\n * Copyright 2017-2020 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n```\n\n----------------------------------------\n\nTITLE: Adding Koin Compose Dependencies for Multiplatform\nDESCRIPTION: Example showing how to add Koin Compose dependencies for multiplatform applications. These dependencies provide integration between Koin and Jetpack Compose or Compose Multiplatform.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/setup/koin.md#2025-04-23_snippet_8\n\nLANGUAGE: groovy\nCODE:\n```\ndependencies {\n    implementation(\"io.insert-koin:koin-compose:$koin_version\")\n    implementation(\"io.insert-koin:koin-compose-viewmodel:$koin_version\")\n    implementation(\"io.insert-koin:koin-compose-viewmodel-navigation:$koin_version\")\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Basic Modules in Koin with Kotlin\nDESCRIPTION: This snippet demonstrates how to declare a simple module in Koin, defining single instances of repositories and presenters. It shows the concise syntax for declaring dependencies using constructor reference notation.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/setup/why.md#2025-04-23_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyRepository()\nclass MyPresenter(val repository : MyRepository) \n\n// just declare it \nval myModule = module { \n  singleOf(::MyPresenter)\n  singleOf(::MyRepository)\n}\n```\n\n----------------------------------------\n\nTITLE: Marking Internal APIs in Koin\nDESCRIPTION: Annotation used to designate APIs that are intended only for internal use within the Koin framework. The @KoinInternalAPI annotation warns developers that these APIs are not part of the public contract and should be avoided in application code.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/support/api-stability.md#2025-04-23_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\n@KoinInternalAPI\n```\n\n----------------------------------------\n\nTITLE: Declaring an Empty Koin Module\nDESCRIPTION: Initial declaration of a Koin module, which will be used to define components for dependency injection. This is an empty module that will be populated later.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/quickstart/android-viewmodel.md#2025-04-23_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nval appModule = module {\n    \n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Fragment Using SupportFragmentManager\nDESCRIPTION: This snippet shows how to retrieve a Fragment instance using the SupportFragmentManager. It demonstrates the use of the replace<> function to add the Fragment to the container.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/reference/koin-android/fragment-factory.md#2025-04-23_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nsupportFragmentManager.beginTransaction()\n            .replace<MyFragment>(R.id.mvvm_frame)\n            .commit()\n```\n\n----------------------------------------\n\nTITLE: Loading Koin Modules with Coroutines in 3.5.6\nDESCRIPTION: Demonstrates new methods for loading Koin modules with options for eager instance creation in version 3.5.6.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/support/releases.md#2025-04-23_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\nfun loadKoinModules(module: Module, createEagerInstances: Boolean = false)\nfun loadKoinModules(modules: List<Module>, createEagerInstances: Boolean = false)\n```\n\n----------------------------------------\n\nTITLE: Marking Experimental APIs in Koin\nDESCRIPTION: Annotation used to mark APIs that are under active development and may change in future releases. Using @KoinExperimentalAPI indicates that an API is not yet stable and developers should expect potential breaking changes.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/support/api-stability.md#2025-04-23_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\n@KoinExperimentalAPI\n```\n\n----------------------------------------\n\nTITLE: Initializing Koin Application in 3.5.6\nDESCRIPTION: Shows the updated koinApplication function with various parameter options in Koin 3.5.6.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/support/releases.md#2025-04-23_snippet_2\n\nLANGUAGE: Kotlin\nCODE:\n```\nkoinApplication(createEagerInstances: Boolean = true, appDeclaration: KoinAppDeclaration? = null)\nkoinApplication(appDeclaration: KoinAppDeclaration?)\nkoinApplication(createEagerInstances: Boolean)\n```\n\n----------------------------------------\n\nTITLE: Deprecation Annotation in Koin\nDESCRIPTION: Standard Kotlin annotation used in Koin to mark APIs that are being phased out. @Deprecated annotations include messages indicating alternatives and can be paired with ReplaceWith to guide migration.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/support/api-stability.md#2025-04-23_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\n@Deprecated\n```\n\n----------------------------------------\n\nTITLE: Adding Koin Core Dependency in Gradle\nDESCRIPTION: Gradle dependency configuration to include the Koin Core library for Kotlin applications.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/quickstart/kotlin.md#2025-04-23_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\ndependencies {\n    \n    // Koin for Kotlin apps\n    compile \"io.insert-koin:koin-core:$koin_version\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using ReplaceWith for Deprecated APIs in Koin\nDESCRIPTION: Kotlin functionality used with @Deprecated to suggest replacement code for deprecated APIs. ReplaceWith provides automated migration suggestions to help developers update their code to use newer APIs.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/support/api-stability.md#2025-04-23_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nReplaceWith\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradle Dependencies for Koin and Ktor\nDESCRIPTION: Gradle configuration showing required dependencies for Koin integration with Ktor, including KSP compiler and annotations support.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/quickstart/ktor-annotations.md#2025-04-23_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nplugins {\n    id(\"com.google.devtools.ksp\") version kspVersion\n}\n\ndependencies {\n    // Koin for Kotlin apps\n    implementation(\"io.insert-koin:koin-ktor:$koin_version\")\n    implementation(\"io.insert-koin:koin-logger-slf4j:$koin_version\")\n\n    implementation(\"io.insert-koin:koin-annotations:$koinAnnotationsVersion\")\n    ksp(\"io.insert-koin:koin-ksp-compiler:$koinAnnotationsVersion\")\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a User Data Class in Kotlin\nDESCRIPTION: Definition of a simple User data class that will be used throughout the application to represent user entities.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/quickstart/android-viewmodel.md#2025-04-23_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class User(val name : String)\n```\n\n----------------------------------------\n\nTITLE: Defining User Data Class in Kotlin\nDESCRIPTION: A simple Kotlin data class that represents a User with a name property.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/quickstart/kotlin.md#2025-04-23_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class User(val name : String)\n```\n\n----------------------------------------\n\nTITLE: Defining User Data Class in Kotlin\nDESCRIPTION: Basic data class representing a user with a name property, used as the core data model in the application.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/quickstart/cmp.md#2025-04-23_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class User(val name : String)\n```\n\n----------------------------------------\n\nTITLE: Setting Up MockProviderRule for Koin Module Testing\nDESCRIPTION: Shows how to create a MockProviderRule to enable mock creation when testing Koin modules. This JUnit rule allows providing mock implementations for dependencies.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/reference/koin-test/checkmodules.md#2025-04-23_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\n@get:Rule\nval mockProvider = MockProviderRule.create { clazz ->\n    // Mock with your framework here given clazz \n}\n```\n\n----------------------------------------\n\nTITLE: Defining User Data Class in Kotlin\nDESCRIPTION: Creates a simple data class to represent a User in the application.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/quickstart/android-annotations.md#2025-04-23_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class User(val name : String)\n```\n\n----------------------------------------\n\nTITLE: Defining User Data Class\nDESCRIPTION: Simple data class representing a User entity with a name property.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/quickstart/ktor-annotations.md#2025-04-23_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class User(val name : String)\n```\n\n----------------------------------------\n\nTITLE: Registering Coroutines Engine Extension in Kotlin\nDESCRIPTION: This code demonstrates how to register a new extension (coroutinesEngine) with Koin. It checks if the extension already exists before registering a new one.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/reference/koin-core/extension-manager.md#2025-04-23_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nfun KoinApplication.coroutinesEngine() {\n    with(koin.extensionManager) {\n        if (getExtensionOrNull<KoinCoroutinesEngine>(EXTENSION_NAME) == null) {\n            registerExtension(EXTENSION_NAME, KoinCoroutinesEngine())\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Opt-In Annotations in Koin with Kotlin\nDESCRIPTION: Example of using Kotlin's @OptIn annotation to explicitly acknowledge usage of experimental or internal Koin APIs. This demonstrates how developers can consciously opt in to use APIs that may change in future releases.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/support/api-stability.md#2025-04-23_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\n@OptIn\n```\n\n----------------------------------------\n\nTITLE: Defining KoinExtension Interface in Kotlin\nDESCRIPTION: This snippet shows the KoinExtension interface definition. It requires implementing classes to have a Koin instance and an onClose method.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/reference/koin-core/extension-manager.md#2025-04-23_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ninterface KoinExtension {\n    \n    var koin : Koin\n    \n    fun onClose()\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Request-Scoped Components in Koin\nDESCRIPTION: Demonstrates how to declare components that live within the Ktor request scope timeline. Components defined in the requestScope will be instantiated for each new request and disposed after request completion.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/reference/koin-ktor/ktor.md#2025-04-23_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nrequestScope {\n    scopedOf(::ScopeComponent)\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting Dependencies in Android Components with Koin\nDESCRIPTION: This snippet shows how to retrieve dependencies in Android components using Koin's property delegation with the inject() function. It demonstrates the simplicity of accessing dependencies in Activities.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/setup/why.md#2025-04-23_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyActivity : AppCompatActivity() {\n\n  val myPresenter : MyPresenter by inject()\n\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up KoinContextAware in Android Applications\nDESCRIPTION: Demonstrates how to implement the KoinContextAware interface in an Android Application class for Koin integration.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/CHANGELOG.md#2025-04-23_snippet_8\n\nLANGUAGE: Kotlin\nCODE:\n```\nclass MainApplication : Application(), KoinContextAware {\n\n     /**\n     * Koin context\n     */\n    lateinit var context: KoinContext\n\n    /**\n     * KoinContextAware - Retrieve Koin Context\n     */\n    override fun getKoin(): KoinContext = context\n\n    override fun onCreate() {\n        super.onCreate()\n        // insert Koin !\n        context = Koin().init(this).build(MyModule()) \n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Module Paths for Scoping in Koin\nDESCRIPTION: Shows how to use the modulePath operator to declare scopes and provide scoped dependencies.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/CHANGELOG.md#2025-04-23_snippet_7\n\nLANGUAGE: Kotlin\nCODE:\n```\nclass MainActivityModule : Module() {\n    override fun context() =\n            declareContext {\n                // Scope MainActivity\n                modulePath { MainActivity::class }\n                // provided WeatherService\n                provide { WeatherService(get()) }\n            }\n}\n```\n\n----------------------------------------\n\nTITLE: Type Binding in Koin Module Definitions\nDESCRIPTION: Demonstrates how to bind additional types to a provided definition using the bind operator in the Koin DSL.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/CHANGELOG.md#2025-04-23_snippet_6\n\nLANGUAGE: Kotlin\nCODE:\n```\nclass MykModule : Module() {\n    override fun context() = declareContext { \n        provide { Processor() } bind { ProcessorInterface::class}\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Building Koin Context with Module Instances\nDESCRIPTION: Demonstrates the updated Koin builder syntax that now takes module instances instead of module classes.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/CHANGELOG.md#2025-04-23_snippet_10\n\nLANGUAGE: Kotlin\nCODE:\n```\n// fill applicationContext for Koin context\nval ctx = Koin().init(applicationContext).build(Module1(),Module2()...)\n```\n\n----------------------------------------\n\nTITLE: Using inject() Operator in Android Components\nDESCRIPTION: Shows how to use the by inject<>() function operator to inject dependencies in Android Activities or Fragments.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/CHANGELOG.md#2025-04-23_snippet_9\n\nLANGUAGE: Kotlin\nCODE:\n```\nclass MainActivity : AppCompatActivity() {\n\n    // inject my WeatherService \n    val weatherService by inject<WeatherService>()\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Koin Modules in Kotlin\nDESCRIPTION: Introduced new checkKoinModules function and DSL to help verify Koin modules, replacing the older checkModules function.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/CHANGELOG.md#2025-04-23_snippet_2\n\nLANGUAGE: Kotlin\nCODE:\n```\ncheckKoinModules {\n    // Module verification code\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Koin Singletons in Kotlin\nDESCRIPTION: Improved DSL allowing more concise singleton definitions without the need for get() function.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/CHANGELOG.md#2025-04-23_snippet_3\n\nLANGUAGE: Kotlin\nCODE:\n```\nsingle<MyType>()\n```\n\n----------------------------------------\n\nTITLE: Using Injected Parameters in Koin Definitions\nDESCRIPTION: New way of handling injected parameters in Koin definitions, replacing destructured declarations.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/CHANGELOG.md#2025-04-23_snippet_4\n\nLANGUAGE: Kotlin\nCODE:\n```\nsingle { params -> MyClass(params.get()) }\n```\n\n----------------------------------------\n\nTITLE: Defining User Data Class\nDESCRIPTION: Simple data class representing a User entity.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/quickstart/ktor.md#2025-04-23_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class User(val name : String)\n```\n\n----------------------------------------\n\nTITLE: Declaring Components with Constructor DSL in Koin\nDESCRIPTION: Using the Constructor DSL to directly target class constructors with the :: operator, eliminating the need for get() function calls.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/reference/koin-core/dsl-update.md#2025-04-23_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nmodule {\n    singleOf(::ClassA)\n    singleOf(::ClassB)\n    singleOf(::ClassC)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing KoinComponent for Dependency Injection\nDESCRIPTION: UserApplication class implementing KoinComponent to enable property injection with the by inject() delegate function.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/quickstart/kotlin.md#2025-04-23_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nclass UserApplication : KoinComponent {\n\n    private val userService : UserService by inject()\n\n    // display our data\n    fun sayHello(){\n        val user = userService.getDefaultUser()\n        val message = \"Hello '$user'!\"\n        println(message)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring ViewModels with Koin in Kotlin\nDESCRIPTION: Shows how to declare ViewModels in a Koin module using the viewModel DSL keyword or the viewModelOf function with constructor injection.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/reference/koin-android/viewmodel.md#2025-04-23_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval appModule = module {\n\n    // ViewModel for Detail View\n    viewModel { DetailViewModel(get(), get()) }\n\n    // or directly with constructor\n    viewModelOf(::DetailViewModel)\n\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting ViewModel as Composable Parameter\nDESCRIPTION: Shows the recommended approach for injecting ViewModels in Composable functions by using function parameters with default values. This maintains the functional aspect of Compose while providing ViewModel integration.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/reference/koin-android/compose.md#2025-04-23_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\n@Composable\nfun App(vm : MyViewModel = koinViewModel()) {\n\n}\n```\n\n----------------------------------------\n\nTITLE: Registering UserStateHolder in Koin Module\nDESCRIPTION: Adding UserStateHolder to the Koin module as a factoryOf definition to create a new instance each time it's requested.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/quickstart/android-compose.md#2025-04-23_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\nval appModule = module {\n    singleOf(::UserRepositoryImpl) { bind<UserRepository>() }\n    factoryOf(::UserStateHolder)\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Koin with Ktor\nDESCRIPTION: Setting up Koin dependency injection within Ktor application with logging and module configuration.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/quickstart/ktor-annotations.md#2025-04-23_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\nfun Application.main() {\n    install(Koin) {\n        slf4jLogger()\n        modules(AppModule().module)\n    }\n\n    // Lazy inject HelloService\n    val service by inject<UserService>()\n    service.saveDefaultUsers()\n\n    // Routing section\n    routing {\n        get(\"/hello\") {\n            call.respondText(service.sayHello())\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Koin Modules in Jetpack Compose\nDESCRIPTION: Demonstrates how to load Koin modules specifically for a Composable function. This allows for modular dependency injection tied to the lifecycle of the Composable.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/reference/koin-compose/compose.md#2025-04-23_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\n@Composable\n@Preview\nfun MyComponentComposable() {\n    // load module at first call of this component\n    rememberKoinModules(myModule)\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Koin Test Dependencies with Gradle\nDESCRIPTION: Gradle configuration to add Koin Test dependencies for unit testing, including setting up Maven Central repository if needed.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/quickstart/android-viewmodel.md#2025-04-23_snippet_11\n\nLANGUAGE: groovy\nCODE:\n```\n// Add Maven Central to your repositories if needed\nrepositories {\n\tmavenCentral()    \n}\n\ndependencies {\n    \n    // Koin for Tests\n    testImplementation \"io.insert-koin:koin-test-junit4:$koin_version\"\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Factory with Constructor DSL\nDESCRIPTION: Using Constructor DSL to declare a factory that requires injected parameters.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/reference/koin-core/dsl-update.md#2025-04-23_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nmodule {\n    factoryOf(::MyFactory)\n}\n```\n\n----------------------------------------\n\nTITLE: Using Android Context in Koin Module\nDESCRIPTION: Demonstrates how to use Android context within Koin module definitions to access resources.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/reference/koin-android/get-instances.md#2025-04-23_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nval appModule = module {\n\n    // create a Presenter instance with injection of R.string.mystring resources from Android\n    factory {\n        MyPresenter(androidContext().resources.getString(R.string.mystring))\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining and Including Lazy Modules in Koin\nDESCRIPTION: Demonstrates how to create lazy Koin modules that avoid triggering resource allocation until loaded. Shows how to define a lazy module and include it within another lazy module.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/reference/koin-core/lazy-modules.md#2025-04-23_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\n// Some lazy modules\nval m2 = lazyModule {\n    singleOf(::ClassB)\n}\n\n// include m2 lazy module\nval m1 = lazyModule {\n    includes(m2)\n    singleOf(::ClassA) { bind<IClassA>() }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Coroutines Engine Extension in Kotlin\nDESCRIPTION: This snippet shows how to access the coroutinesEngine extension from a Koin instance using a property delegate.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/reference/koin-core/extension-manager.md#2025-04-23_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nval Koin.coroutinesEngine: KoinCoroutinesEngine get() = extensionManager.getExtension(EXTENSION_NAME)\n```\n\n----------------------------------------\n\nTITLE: Configuring Koin Dependencies in Gradle\nDESCRIPTION: Gradle dependencies setup for integrating Koin with Ktor applications.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/quickstart/ktor.md#2025-04-23_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ndependencies {\n    // Koin for Kotlin apps\n    implementation(\"io.insert-koin:koin-ktor:$koin_version\")\n    implementation(\"io.insert-koin:koin-logger-slf4j:$koin_version\")\n}\n```\n\n----------------------------------------\n\nTITLE: Ktor Application Configuration\nDESCRIPTION: Application configuration for Ktor defining port and module settings.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/quickstart/ktor-annotations.md#2025-04-23_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nktor {\n    deployment {\n        port = 8080\n\n        // For dev purpose\n        //autoreload = true\n        //watch = [org.koin.sample]\n    }\n\n    application {\n        modules = [ org.koin.sample.UserApplicationKt.main ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Navigation Graph ViewModel in Fragment with Koin\nDESCRIPTION: Demonstrates how to scope a ViewModel to a Navigation graph using koinNavGraphViewModel function.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/reference/koin-android/viewmodel.md#2025-04-23_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\nclass NavFragment : Fragment() {\n\n    val mainViewModel: NavViewModel by koinNavGraphViewModel(R.id.my_graph)\n\n}\n```\n\n----------------------------------------\n\nTITLE: Lazy Injection in Android Activity\nDESCRIPTION: Shows how to implement lazy dependency injection in an Android Activity using the inject() delegate.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/reference/koin-android/get-instances.md#2025-04-23_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass DetailActivity : AppCompatActivity() {\n\n    // Lazy inject Presenter\n    override val presenter : Presenter by inject()\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        //...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Resolving Dependencies in Koin Module\nDESCRIPTION: Illustrates how to resolve and inject dependencies using the 'get()' function within a Koin module. This is typically used in constructor injection.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/reference/koin-core/definitions.md#2025-04-23_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\n// Presenter <- Service\nclass Service()\nclass Controller(val view : View)\n\nval myModule = module {\n\n    // declare Service as single instance\n    single { Service() }\n    // declare Controller as single instance, resolving View instance with get()\n    single { Controller(get()) }\n}\n```\n\n----------------------------------------\n\nTITLE: Proposed Internal Koin Setup for WorkManagerFactory\nDESCRIPTION: Suggests an internal Koin setup for handling WorkManagerFactory. This approach automatically collects all declared WorkerFactories and adds them to the delegating factory.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/reference/koin-android/workmanager.md#2025-04-23_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nfun Application.setupWorkManagerFactory(\n  // no vararg for WorkerFactory\n) {\n. . .\n            getKoin().getAll<WorkerFactory>()\n                .forEach {\n                    delegatingWorkerFactory.addFactory(it)\n                }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Ktor Application\nDESCRIPTION: Ktor application configuration settings including port and module setup.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/quickstart/ktor.md#2025-04-23_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nktor {\n    deployment {\n        port = 8080\n\n        // For dev purpose\n        //autoreload = true\n        //watch = [org.koin.sample]\n    }\n\n    application {\n        modules = [ org.koin.sample.UserApplicationKt.main ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Singleton in Koin Module\nDESCRIPTION: Shows how to declare a singleton component using the 'single' function within a Koin module. This ensures a unique instance is kept by the Koin container.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/reference/koin-core/definitions.md#2025-04-23_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyService()\n\nval myModule = module {\n\n    // declare single instance for MyService class\n    single { MyService() }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Specific Koin Core Version Dependency\nDESCRIPTION: Traditional approach for adding Koin dependencies by specifying the exact version for each dependency. This method is an alternative to using the BOM approach.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/setup/koin.md#2025-04-23_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\ndependencies {\n    implementation(\"io.insert-koin:koin-core:$koin_version\")\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Dependencies with KoinComponent\nDESCRIPTION: Demonstrates how to create an Initializer that depends on KoinInitializer for dependency injection setup.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/reference/koin-android/start.md#2025-04-23_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nclass CrashTrackerInitializer : Initializer<Unit>, KoinComponent {\n\n    private val crashTrackerService: CrashTrackerService by inject()\n\n    override fun create(context: Context) {\n        crashTrackerService.configure(context)\n    }\n\n    override fun dependencies(): List<Class<out Initializer<*>>> {\n        return listOf(KoinInitializer::class.java)\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring UserRepository in Koin Module\nDESCRIPTION: Koin module configuration for UserRepository singleton injection.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/quickstart/ktor.md#2025-04-23_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nval appModule = module {\n    singleOf(::UserRepositoryImpl) { bind<UserRepository>() }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Koin Module Verification Test\nDESCRIPTION: Simple test class demonstrating how to verify a Koin module configuration using the verify() extension function.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/reference/koin-test/verify.md#2025-04-23_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass NiaAppModuleCheck {\n\n    @Test\n    fun checkKoinModule() {\n\n        // Verify Koin configuration\n        niaAppModule.verify()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Injected Parameters with Different Syntaxes in Koin (Kotlin)\nDESCRIPTION: This snippet shows two ways of defining injected parameters in a Koin module: using the 'params' function argument and using destructured declaration. It demonstrates how to inject a 'view' parameter into a 'Presenter' class.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/reference/koin-core/injection-parameters.md#2025-04-23_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass Presenter(val view : View)\n\nval myModule = module {\n    single { params -> Presenter(view = params.get()) }\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nclass Presenter(val view : View)\n\nval myModule = module {\n    single { (view : View) -> Presenter(view) }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Maven Repository for Koin Embedded\nDESCRIPTION: Gradle configuration snippet to add the Kotzilla Maven repository for accessing embedded Koin packages.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/support/embedded.md#2025-04-23_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nmaven { 'https://repository.kotzilla.io/repository/kotzilla-platform/' }\n```\n\n----------------------------------------\n\nTITLE: Complete Koin Module Configuration\nDESCRIPTION: Final Koin module setup with all component declarations.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/quickstart/ktor.md#2025-04-23_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nval appModule = module {\n    singleOf(::UserRepositoryImpl) { bind<UserRepository>() }\n    singleOf(::UserService)\n}\n```\n\n----------------------------------------\n\nTITLE: Using KoinComponent with Lazy and Eager Injection\nDESCRIPTION: Example of a class implementing KoinComponent interface to access Koin container, showing both lazy injection with 'by inject()' and eager injection with 'get()'.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/reference/koin-core/koin-component.md#2025-04-23_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyComponent : KoinComponent {\n\n    // lazy inject Koin instance\n    val myService : MyService by inject()\n\n    // or\n    // eager inject Koin instance\n    val myService : MyService = get()\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring UserRepositoryImpl as Koin Singleton in Kotlin\nDESCRIPTION: Uses the @Single annotation to declare UserRepositoryImpl as a singleton in the Koin dependency injection container.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/quickstart/android-annotations.md#2025-04-23_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\n@Single\nclass UserRepositoryImpl : UserRepository {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Isolated Koin Context in Kotlin\nDESCRIPTION: This code defines a MyIsolatedKoinContext object that holds an isolated Koin instance. It uses koinApplication to create a new Koin application and declare modules.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/reference/koin-core/context-isolation.md#2025-04-23_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\n// Get a Context for your Koin instance\nobject MyIsolatedKoinContext {\n\n    private val koinApp = koinApplication {\n        // declare used modules\n        modules(coffeeAppModule)\n    }\n\n    val koin = koinApp.koin \n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Koin Module with UserRepository in Kotlin\nDESCRIPTION: This snippet shows how to declare a Koin module and define a singleton for UserRepository.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/quickstart/android.md#2025-04-23_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nval appModule = module {\n    singleOf(::UserRepositoryImpl) { bind<UserRepository>() }\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting ViewModel in Composable Function\nDESCRIPTION: Demonstrates how to inject a Koin-managed ViewModel into a Composable function using the koinViewModel() function. This approach retrieves a ViewModel instance that's scoped to the composable's lifecycle.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/reference/koin-android/compose.md#2025-04-23_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\n@Composable\nfun App() {\n    val vm = koinViewModel<MyViewModel>()\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Koin AndroidX Compose Dependencies\nDESCRIPTION: Example showing how to add Koin dependencies specifically for Android Jetpack Compose. These are used when developing with pure Android Jetpack Compose rather than Compose Multiplatform.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/setup/koin.md#2025-04-23_snippet_9\n\nLANGUAGE: groovy\nCODE:\n```\ndependencies {\n    implementation(\"io.insert-koin:koin-androidx-compose:$koin_version\")\n    implementation(\"io.insert-koin:koin-androidx-compose-navigation:$koin_version\")\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Koin Logging at Startup\nDESCRIPTION: Shows how to configure the Koin logger when starting the container. By default, Koin uses EmptyLogger, but this example configures it to use a standard logger with INFO level.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/reference/koin-core/start-koin.md#2025-04-23_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nstartKoin {\n    logger(LEVEL.INFO)\n}\n```\n\n----------------------------------------\n\nTITLE: Koin DI Performance Benchmark Results\nDESCRIPTION: Benchmark results showing average execution times for different Koin dependency injection operations. Measurements include empty start, flattening (both iterative and recursive), starting with 400 components, and injection operations with and without futures.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/examples/jvm-perfs/benchmark.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nBenchmarkClass.emptyStart            avgt   10  ≈ 10⁻⁴           ms/op\nBenchmarkClass.flattenIterative      avgt   10   0,484 ±  0,071  ms/op\nBenchmarkClass.flattenRecursive      avgt   10   0,320 ±  0,063  ms/op\nBenchmarkClass.start400              avgt   10   0,197 ±  0,001  ms/op\nBenchmarkClass.start400AndInject     avgt   10   0,195 ±  0,001  ms/op\nBenchmarkClass.start400AndInject_Fu  avgt   10   1,141 ±  0,030  ms/op\nBenchmarkClass.start400_Fu           avgt   10   1,133 ±  0,014  ms/op\n```\n\n----------------------------------------\n\nTITLE: Implementing UserViewModel with Repository Injection\nDESCRIPTION: Creating a UserViewModel class that depends on UserRepository and provides functionality to display user information.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/quickstart/android-compose.md#2025-04-23_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nclass UserViewModel(private val repository: UserRepository) : ViewModel() {\n\n    fun sayHello(name : String) : String{\n        val foundUser = repository.findUser(name)\n        return foundUser?.let { \"Hello '$it' from $this\" } ?: \"User '$name' not found!\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Module with MyService as a Singleton\nDESCRIPTION: This snippet shows how to create a simple module in Koin that defines a singleton instance of MyService.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/reference/koin-core/koin-component.md#2025-04-23_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyService\n\nval myModule = module {\n    // Define a singleton for MyService\n    single { MyService() }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ViewModel with SavedStateHandle in Kotlin\nDESCRIPTION: Shows how to create a ViewModel that uses SavedStateHandle for state management in Koin.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/reference/koin-android/viewmodel.md#2025-04-23_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyStateVM(val handle: SavedStateHandle, val myService : MyService) : ViewModel()\n```\n\n----------------------------------------\n\nTITLE: Injecting Dependencies in Android Activity with Koin\nDESCRIPTION: Demonstrates how to inject a Koin-managed dependency (UserPresenter) into an Android Activity using the 'by inject()' delegate.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/quickstart/android-annotations.md#2025-04-23_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MainActivity : AppCompatActivity() {\n\n    private val presenter: UserPresenter by inject()\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        \n        //...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Koin with a Module\nDESCRIPTION: This code demonstrates how to initialize Koin in the main function and load a module before creating a component that uses Koin.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/reference/koin-core/koin-component.md#2025-04-23_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main(vararg args : String){\n    // Start Koin\n    startKoin {\n        modules(myModule)\n    }\n\n    // Create MyComponent instance and inject from Koin container\n    MyComponent()\n}\n```\n\n----------------------------------------\n\nTITLE: Using Constructor DSL for Koin Module\nDESCRIPTION: Alternative, more compact way to define the Koin module using constructor references and binding.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/quickstart/kotlin.md#2025-04-23_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\nval appModule = module {\n    singleOf(::UserRepositoryImpl) { bind<UserRepository>() }\n    singleOf(::UserService)\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring a Service Component in Koin Module\nDESCRIPTION: Demonstrates how to define a module in Koin that declares a singleton service. This is the basic setup needed before you can inject components into your Composable functions.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/reference/koin-android/compose.md#2025-04-23_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval androidModule = module {\n\n    single { MyService() }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Koin in Android Application Class\nDESCRIPTION: Shows how to start Koin from an Android Application class using startKoin function with Android logger and context setup.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/reference/koin-android/start.md#2025-04-23_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MainApplication : Application() {\n\n    override fun onCreate() {\n        super.onCreate()\n\n        startKoin {\n            // Log Koin into Android logger\n            androidLogger()\n            // Reference Android context\n            androidContext(this@MainApplication)\n            // Load modules\n            modules(myAppModules)\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Koin Test Dependencies\nDESCRIPTION: Adding the Koin Test dependency for JUnit4 to verify Koin module configurations.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/quickstart/android-compose.md#2025-04-23_snippet_15\n\nLANGUAGE: groovy\nCODE:\n```\ndependencies {\n    \n    // Koin for Tests\n    testImplementation \"io.insert-koin:koin-test-junit4:$koin_version\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using Navigation Graph ViewModel in Android with Koin\nDESCRIPTION: New function koinNavGraphViewModel() added to scope a ViewModel for a given navigation graph in Android applications.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\nby koinNavGraphViewModel()\n```\n\n----------------------------------------\n\nTITLE: Adding Koin Test Dependencies in Gradle\nDESCRIPTION: Configures Gradle to include Koin test dependencies for JUnit tests.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/quickstart/android-annotations.md#2025-04-23_snippet_10\n\nLANGUAGE: groovy\nCODE:\n```\n// Add Maven Central to your repositories if needed\nrepositories {\n\tmavenCentral()    \n}\n\ndependencies {\n    \n    // Koin for Tests\n    testImplementation \"io.insert-koin:koin-test-junit4:$koin_version\"\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting ViewModel in Jetpack Compose\nDESCRIPTION: Shows how to inject a ViewModel instance into a Composable function using Koin. It demonstrates both direct injection and injection as a function parameter.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/reference/koin-compose/compose.md#2025-04-23_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\n@Composable\nfun App() {\n    val vm = koinViewModel<MyViewModel>()\n}\n\n@Composable\nfun App(vm : MyViewModel = koinViewModel()) {\n\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Scoped Dependencies\nDESCRIPTION: Shows how to define scoped dependencies in a Koin module for a specific component.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/reference/koin-core/scopes.md#2025-04-23_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nmodule {\n    scope<A> {\n        scoped { B() } // Tied to A's scope\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Scope Component Extensions\nDESCRIPTION: Demonstrates how to use scope component extensions for dependency resolution within a scoped component.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/reference/koin-core/scopes.md#2025-04-23_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass A : KoinScopeComponent {\n    override val scope: Scope by lazy { newScope(this) }\n\n    // resolve B as inject\n    val b : B by inject() // inject from scope\n\n    // Resolve B\n    fun doSomething(){\n        val b = get<B>()\n    }\n\n    fun close(){\n        scope.close() // don't forget to close current scope\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Koin Application Modules with checkModules()\nDESCRIPTION: Shows how to use the checkModules() function within a JUnit test to verify Koin configuration. This launches modules and tests each definition.\nSOURCE: https://github.com/insertkoinio/koin/blob/main/docs/reference/koin-test/checkmodules.md#2025-04-23_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass CheckModulesTest : KoinTest {\n\n    @Test\n    fun verifyKoinApp() {\n        \n        koinApplication {\n            modules(module1,module2)\n            checkModules()\n        }\n    }\n}\n```"
  }
]