[
  {
    "owner": "aws",
    "repo": "aws-advanced-jdbc-wrapper",
    "content": "TITLE: Defining AWS Advanced JDBC Driver Parameters Table in Markdown\nDESCRIPTION: This code snippet presents a markdown table that lists and describes various configuration parameters for the AWS Advanced JDBC Driver. It includes parameter names, value types, whether they are required, descriptions, and default values.\nSOURCE: https://github.com/aws/aws-advanced-jdbc-wrapper/blob/main/docs/using-the-jdbc-driver/UsingTheJdbcDriver.md#2025-04-21_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n| Parameter                       | Value     | Required | Description                                                                                                                                                                                                                                                                                                                          | Default Value |\n|---------------------------------|-----------|----------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|---------------|\n| `wrapperLoggerLevel`            | `String`  | No       | Logger level of the AWS JDBC Driver. <br><br/>If it is used, it must be one of the following values: `OFF`, `SEVERE`, `WARNING`, `INFO`, `CONFIG`, `FINE`, `FINER`, `FINEST`, `ALL`.                                                                                                                                                 | `null`        |\n| `database`                      | `String`  | No       | Database name.                                                                                                                                                                                                                                                                                                                       | `null`        |\n| `user`                          | `String`  | No       | Database username.                                                                                                                                                                                                                                                                                                                   | `null`        |\n| `password`                      | `String`  | No       | Database password.                                                                                                                                                                                                                                                                                                                   | `null`        |\n| `wrapperDialect`                | `String`  | No       | Please see [this page on database dialects](/docs/using-the-jdbc-driver/DatabaseDialects.md), and whether you should include it.                                                                                                                                                                                                     | `null`        |\n| `wrapperLogUnclosedConnections` | `Boolean` | No       | Allows the AWS JDBC Driver to capture a stacktrace for each connection that is opened. If the `finalize()` method is reached without the connection being closed, the stacktrace is printed to the log. This helps developers to detect and correct the source of potential connection leaks.                                        | `false`       |\n| `loginTimeout`                  | `Integer` | No       | Login timeout in milliseconds.                                                                                                                                                                                                                                                                                                       | `null`        |\n| `connectTimeout`                | `Integer` | No       | Socket connect timeout in milliseconds.                                                                                                                                                                                                                                                                                              | `null`        |\n| `socketTimeout`                 | `Integer` | No       | Socket timeout in milliseconds.                                                                                                                                                                                                                                                                                                      | `null`        |\n| `tcpKeepAlive`                  | `Boolean` | No       | Enable or disable TCP keep-alive probe.                                                                                                                                                                                                                                                                                              | `false`       |\n| `targetDriverAutoRegister`      | `Boolean` | No       | Allows the AWS JDBC Driver to register a target driver based on `wrapperTargetDriverDialect` configuration parameter or, if it's missed, on a connection url protocol.                                                                                                                                                               | `true`        |\n| `transferSessionStateOnSwitch`  | `Boolean` | No       | Enables transferring the session state to a new connection.                                                                                                                                                                                                                                                                          | `true`        |\n| `resetSessionStateOnClose`      | `Boolean` | No       | Enables resetting the session state before closing connection.                                                                                                                                                                                                                                                                       | `true`        |\n| `rollbackOnSwitch`              | `Boolean` | No       | Enables rolling back a current transaction, if any in effect, before switching to a new connection.                                                                                                                                                                                                                                  | `true`        |\n| `awsProfile`                    | `String`  | No       | Allows users to specify a profile name for AWS credentials. This parameter is used by plugins that require AWS credentials, like the [IAM Authentication Connection Plugin](./using-plugins/UsingTheIamAuthenticationPlugin.md) and the [AWS Secrets Manager Connection Plugin](./using-plugins/UsingTheAwsSecretsManagerPlugin.md). | `null`        |\n| `enableGreenNodeReplacement`                    | `Boolean`  | No       | Enables replacing a green node host name with the original host name when the green host DNS doesn't exist anymore after a blue/green switchover. Refer to [Overview of Amazon RDS Blue/Green Deployments](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/blue-green-deployments-overview.html) for more details about green and blue nodes.           | `false`       |\n```\n\n----------------------------------------\n\nTITLE: Using AWS Secrets Manager Plugin with AWS JDBC Driver for MySQL\nDESCRIPTION: This example demonstrates configuring the AWS Secrets Manager plugin with the AWS JDBC Driver for MySQL. It sets up the connection using the secrets manager factory class, specifies the secret ID and AWS region, connects to an RDS MySQL database, and runs a simple query.\nSOURCE: https://github.com/aws/aws-advanced-jdbc-wrapper/blob/main/docs/using-the-jdbc-driver/UsingTheJdbcDriver.md#2025-04-21_snippet_14\n\nLANGUAGE: java\nCODE:\n```\npublic static void main(String[] args) throws SQLException {\n    final Properties properties = new Properties();\n    properties.setProperty(\"connectionPluginFactories\", AWSSecretsManagerPluginFactory.class.getName());\n    properties.setProperty(\"secretsManagerSecretId\", \"secretId\");\n    properties.setProperty(\"secretsManagerRegion\", \"us-east-2\");\n\n    try (final Connection conn = DriverManager.getConnection(\n        \"jdbc:mysql:aws://db-identifier.cluster-XYZ.us-east-2.rds.amazonaws.com:3306\", properties);\n        final Statement statement = conn.createStatement();\n        final ResultSet result = statement.executeQuery(\"SELECT 1\")) {\n      System.out.println(Util.getResult(result));\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Setting Connection Plugin Properties in Java\nDESCRIPTION: Example of configuring wrapper plugins using properties. Shows how to specify plugins like IAM authentication and failover, or disable all plugins.\nSOURCE: https://github.com/aws/aws-advanced-jdbc-wrapper/blob/main/docs/using-the-jdbc-driver/UsingTheJdbcDriver.md#2025-04-21_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nproperties.setProperty(\"wrapperPlugins\", \"iam,failover\");\n```\n\nLANGUAGE: java\nCODE:\n```\nproperties.setProperty(\"wrapperPlugins\", \"\");\n```\n\n----------------------------------------\n\nTITLE: Using IAM Authentication with AWS JDBC Driver for MySQL\nDESCRIPTION: This example demonstrates how to set up a database connection using IAM authentication with the AWS JDBC Driver for MySQL. It configures the necessary properties, establishes a connection to an RDS MySQL database, executes a simple query, and prints the result.\nSOURCE: https://github.com/aws/aws-advanced-jdbc-wrapper/blob/main/docs/using-the-jdbc-driver/UsingTheJdbcDriver.md#2025-04-21_snippet_12\n\nLANGUAGE: java\nCODE:\n```\npublic static void main(String[] args) throws SQLException {\n    final Properties properties = new Properties();\n    properties.setProperty(\"useAwsIam\", \"true\");\n    properties.setProperty(\"user\", \"foo\");\n\n    try (final Connection conn = DriverManager.getConnection(\n        \"jdbc:mysql:aws://db-identifier.cluster-XYZ.us-east-2.rds.amazonaws.com:3306\", properties);\n        final Statement statement = conn.createStatement();\n        final ResultSet result = statement.executeQuery(\"SELECT 1\")) {\n      System.out.println(Util.getResult(result));\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Using IAM Authentication with AWS JDBC Driver\nDESCRIPTION: This example shows how to implement IAM authentication with the newer AWS JDBC Driver. It uses the 'wrapperPlugins' parameter to enable the IAM plugin, sets the IAM user, creates a connection to an RDS MySQL database, executes a query, and displays the result.\nSOURCE: https://github.com/aws/aws-advanced-jdbc-wrapper/blob/main/docs/using-the-jdbc-driver/UsingTheJdbcDriver.md#2025-04-21_snippet_13\n\nLANGUAGE: java\nCODE:\n```\npublic static void main(String[] args) throws SQLException {\n\n    final Properties properties = new Properties();\n    properties.setProperty(\"wrapperPlugins\", \"iam\");\n    properties.setProperty(\"user\", \"iam_user\");\n\n    try (Connection conn = DriverManager.getConnection(\"jdbc:aws-wrapper:mysql://db-identifier.XYZ.us-east-2.rds.amazonaws.com:3306\", properties);\n        Statement statement = conn.createStatement();\n        ResultSet result = statement.executeQuery(\"SELECT 1\")) {\n\n      System.out.println(Util.getResult(result));\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Using AWS Secrets Manager Plugin with AWS JDBC Driver\nDESCRIPTION: This example shows how to use the AWS Secrets Manager plugin with the newer AWS JDBC Driver. It configures the connection with the 'wrapperPlugins' parameter set to 'awsSecretsManagers', specifies the required secret ID and region, and establishes a connection to run a query.\nSOURCE: https://github.com/aws/aws-advanced-jdbc-wrapper/blob/main/docs/using-the-jdbc-driver/UsingTheJdbcDriver.md#2025-04-21_snippet_15\n\nLANGUAGE: java\nCODE:\n```\npublic static void main(String[] args) throws SQLException {\n\n    final Properties properties = new Properties();\n    properties.setProperty(\"wrapperPlugins\", \"awsSecretsManagers\");\n    properties.setProperty(\"secretsManagerSecretId\", \"secretId\");\n    properties.setProperty(\"secretsManagerRegion\", \"us-east-2\");\n\n    try (Connection conn = DriverManager.getConnection(\"jdbc:aws-wrapper:mysql://db-identifier.XYZ.us-east-2.rds.amazonaws.com:3306\", properties);\n        Statement statement = conn.createStatement();\n        ResultSet result = statement.executeQuery(\"SELECT 1\")) {\n\n      System.out.println(Util.getResult(result));\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Wrapper DataSource Properties\nDESCRIPTION: Demonstrates two methods of configuring the AwsWrapperDataSource: using individual connection properties or using a JDBC URL.\nSOURCE: https://github.com/aws/aws-advanced-jdbc-wrapper/blob/main/docs/using-the-jdbc-driver/DataSource.md#2025-04-21_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n// Note: jdbcProtocol is required when connecting via server name\nds.addDataSourceProperty(\"jdbcProtocol\", \"jdbc:postgresql:\");\nds.addDataSourceProperty(\"serverName\", \"db-identifier.cluster-XYZ.us-east-2.rds.amazonaws.com\");\nds.addDataSourceProperty(\"serverPort\", \"5432\");\nds.addDataSourceProperty(\"database\", \"postgres\");\n\n// Alternatively, the AwsWrapperDataSource can be configured with a JDBC URL instead of individual properties as seen above.\nds.addDataSourceProperty(\"jdbcUrl\", \"jdbc:aws-wrapper:postgresql://db-identifier.cluster-XYZ.us-east-2.rds.amazonaws.com:5432/postgres\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Spring Datasource with AWS JDBC Driver\nDESCRIPTION: YAML configuration for Spring datasource using AWS Advanced JDBC Driver, including Hikari connection pool settings and IAM authentication.\nSOURCE: https://github.com/aws/aws-advanced-jdbc-wrapper/blob/main/examples/SpringHibernateExample/README.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nspring:\n  datasource:\n    url: jdbc:aws-wrapper:postgresql://db-identifier.cluster-XYZ.us-east-2.rds.amazonaws.com:5432/db\n    username: jane_doe\n    driver-class-name: software.amazon.jdbc.Driver\n    hikari:\n      data-source-properties:\n        wrapperPlugins: iam,failover,efm2\n        iamRegion: us-east-2\n        iamExpiration: 1320\n      exception-override-class-name: software.amazon.jdbc.util.HikariCPSQLException\n      max-lifetime: 1260000\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradle Dependencies for AWS JDBC Driver and Spring Boot\nDESCRIPTION: This snippet shows the required Gradle dependencies for setting up a Spring Boot project with the AWS Advanced JDBC Driver, PostgreSQL, and Spring JDBC.\nSOURCE: https://github.com/aws/aws-advanced-jdbc-wrapper/blob/main/examples/SpringHibernateBalancedReaderTwoDataSourceExample/README.md#2025-04-21_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ndependencies {\n   implementation(\"org.springframework.boot:spring-boot-starter-jdbc\")\n   implementation(\"org.springframework.retry:spring-retry\")\n   implementation(\"org.postgresql:postgresql\")\n   implementation(\"software.amazon.jdbc:aws-advanced-jdbc-wrapper:latest\")\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Configuration Profiles in Java\nDESCRIPTION: Demonstrates how to create, set, and manage configuration profiles for the AWS JDBC Driver. Shows profile creation with custom plugins and profile inheritance.\nSOURCE: https://github.com/aws/aws-advanced-jdbc-wrapper/blob/main/docs/using-the-jdbc-driver/UsingTheJdbcDriver.md#2025-04-21_snippet_6\n\nLANGUAGE: java\nCODE:\n```\n// Create a new configuration profile with name \"testProfile\"\nConfigurationProfileBuilder.get()\n    .withName(\"testProfile\")\n    .withPluginFactories(Arrays.asList(\n        FailoverConnectionPluginFactory.class,\n        HostMonitoringConnectionPluginFactory.class,\n        CustomConnectionPluginFactory.class))\n    .buildAndSet();\n\n// Use the configuration profile \"testProfile\"\nproperties.setProperty(\"wrapperProfileName\", \"testProfile\");\n```\n\nLANGUAGE: java\nCODE:\n```\n// Create a new configuration profile with name \"newProfile\" based on \"existingProfileName\"\nConfigurationProfileBuilder.from(\"existingProfileName\")\n    .withName(\"newProfileName\")\n    .withDialect(new CustomDatabaseDialect())\n.buildAndSet();\n\n// Delete configuration profile \"testProfile\"\nDriverConfigurationProfiles.remove(\"testProfile\");\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS JDBC Driver Datasource in Wildfly XML\nDESCRIPTION: XML configuration for Wildfly standalone.xml that defines a datasource using the AWS JDBC wrapper with PostgreSQL. It includes connection details and security credentials for connecting to an Amazon RDS instance.\nSOURCE: https://github.com/aws/aws-advanced-jdbc-wrapper/blob/main/examples/SpringWildflyExample/README.md#2025-04-21_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<datasource jndi-name=\"java:jboss/datasources/AWSWrapper\" pool-name=\"AWSWrapper\" enabled=\"true\" use-java-context=\"true\" statistics-enabled=\"${wildfly.datasources.statistics-enabled:${wildfly.statistics-enabled:false}}\">\n   <connection-url>jdbc:aws-wrapper:postgresql://db-identifier.cluster-XYZ.us-east-2.rds.amazonaws.com:5432/db</connection-url>\n   <driver>wrapper</driver>\n   <security>\n      <user-name>foo</user-name>\n      <password>bar</password>\n   </security>\n</datasource>\n```\n\n----------------------------------------\n\nTITLE: Loading Read/Write Splitting Plugin Without Failover\nDESCRIPTION: Configures the JDBC driver to use only the read/write splitting plugin without the failover functionality.\nSOURCE: https://github.com/aws/aws-advanced-jdbc-wrapper/blob/main/docs/using-the-jdbc-driver/using-plugins/UsingTheReadWriteSplittingPlugin.md#2025-04-21_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nfinal Properties properties = new Properties();\nproperties.setProperty(PropertyDefinition.PLUGINS.name, \"readWriteSplitting\");\n```\n\n----------------------------------------\n\nTITLE: Including AWS JDBC Driver and PostgreSQL in Gradle Dependencies\nDESCRIPTION: Example of how to include the AWS JDBC Driver and PostgreSQL JDBC Driver as dependencies in a Gradle project by updating the build.gradle file.\nSOURCE: https://github.com/aws/aws-advanced-jdbc-wrapper/blob/main/docs/GettingStarted.md#2025-04-21_snippet_0\n\nLANGUAGE: gradle\nCODE:\n```\ndependencies {\n    implementation group: 'software.amazon.jdbc', name: 'aws-advanced-jdbc-wrapper', version: '2.5.5'\n    implementation group: 'org.postgresql', name: 'postgresql', version: '42.5.0'\n}\n```\n\n----------------------------------------\n\nTITLE: Simulating Exceptions During Connection Creation with AWS JDBC Wrapper Developer Plugin\nDESCRIPTION: This snippet demonstrates how to use ExceptionSimulatorManager to inject a SQLException when creating a new connection. After setting up the plugin and registering the exception, the next connection attempt will throw the specified exception while subsequent attempts will succeed normally.\nSOURCE: https://github.com/aws/aws-advanced-jdbc-wrapper/blob/main/docs/using-the-jdbc-driver/using-plugins/UsingTheDeveloperPlugin.md#2025-04-21_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nfinal Properties properties = new Properties();\nproperties.setProperty(PropertyDefinition.PLUGINS.name, \"dev\");\n\nfinal SQLException testExceptionToRaise = new SQLException(\"test\");\nExceptionSimulatorManager.raiseExceptionOnNextConnect(testExceptionToRaise);\n\nConnection connection = DriverManager.getConnection(\"jdbc:aws-wrapper:postgresql://db-host/\", properties); // that throws the exception\n\nConnection anotherConnection = DriverManager.getConnection(\"jdbc:aws-wrapper:postgresql://db-host/\", properties); // it goes normal with no exception\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Advanced JDBC Wrapper Connection URL\nDESCRIPTION: Example of new AWS Advanced JDBC Wrapper connection URL configuration with simplified plugin syntax.\nSOURCE: https://github.com/aws/aws-advanced-jdbc-wrapper/blob/main/docs/using-the-jdbc-driver/UsingTheJdbcDriver.md#2025-04-21_snippet_11\n\nLANGUAGE: java\nCODE:\n```\n\"jdbc:aws-wrapper:mysql://db-identifier.XYZ.us-east-2.rds.amazonaws.com:3306/db?wrapperPlugins=iam,failover\"\n```\n\n----------------------------------------\n\nTITLE: Handling Failover Exceptions in Read-Write Splitting for Postgres in Java\nDESCRIPTION: Example of error handling for failover situations when using read-write splitting with Postgres. This code snippet shows how to catch and handle FailoverSQLException for more robust database operations.\nSOURCE: https://github.com/aws/aws-advanced-jdbc-wrapper/blob/main/CHANGELOG.md#2025-04-21_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\n// See [Read-Write Splitting Postgres Example](./examples/AWSDriverExample/src/main/java/software/amazon/ReadWriteSplittingPostgresExample.java)\n```\n\n----------------------------------------\n\nTITLE: Configuring Transaction Management\nDESCRIPTION: Configuration class for setting up transaction management with retry capabilities.\nSOURCE: https://github.com/aws/aws-advanced-jdbc-wrapper/blob/main/examples/SpringTxFailoverExample/README.md#2025-04-21_snippet_5\n\nLANGUAGE: java\nCODE:\n```\npackage example;\n\nimport javax.sql.DataSource;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.jdbc.datasource.DataSourceTransactionManager;\nimport org.springframework.retry.annotation.EnableRetry;\n\n@Configuration\n@EnableRetry\npublic class ExampleConfiguration {\n\n  @Autowired\n  private DataSource dataSource;\n\n  @Bean\n  public DataSourceTransactionManager getDataSourceTransactionManager() {\n    return new DataSourceTransactionManager(dataSource);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring HikariCP Connection Pool with AWS JDBC Driver\nDESCRIPTION: Demonstrates the initialization and configuration of a HikariCP connection pool with the AWS JDBC Driver wrapper. Sets basic connection pool parameters including pool size, timeout, and credentials.\nSOURCE: https://github.com/aws/aws-advanced-jdbc-wrapper/blob/main/docs/using-the-jdbc-driver/DataSource.md#2025-04-21_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nHikariDataSource ds = new HikariDataSource();\n\n// Configure the connection pool:\nds.setMaximumPoolSize(5);\nds.setIdleTimeout(60000);\nds.setUsername(USER);\nds.setPassword(PASSWORD);\n```\n\n----------------------------------------\n\nTITLE: Initializing Read-Write Splitting with Spring JDBC Template in Java\nDESCRIPTION: Example of using the read-write splitting plugin with Spring JDBC template. This demonstrates how to set up connection handling for read-write operations in a Spring application using the AWS JDBC wrapper.\nSOURCE: https://github.com/aws/aws-advanced-jdbc-wrapper/blob/main/CHANGELOG.md#2025-04-21_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\n// See [Read-Write Splitting Spring JDBC Template Example](./examples/AWSDriverExample/src/main/java/software/amazon/ReadWriteSplittingSpringJdbcTemplateExample.java)\n```\n\n----------------------------------------\n\nTITLE: Configuring Datasource in YAML for Spring Boot and AWS JDBC Driver\nDESCRIPTION: Sets up the datasource configuration in application.yml, including Hikari and AWS JDBC Driver settings.\nSOURCE: https://github.com/aws/aws-advanced-jdbc-wrapper/blob/main/examples/SpringBootHikariExample/README.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nspring:\n  datasource:\n    url: jdbc:aws-wrapper:postgresql://db-identifier.cluster-XYZ.us-east-2.rds.amazonaws.com:5432/database-name\n    username: some_username\n    password: some_password\n    driver-class-name: software.amazon.jdbc.Driver\n    hikari:\n      data-source-properties:\n        wrapperPlugins: failover,efm2\n        wrapperDialect: aurora-pg\n      exception-override-class-name: software.amazon.jdbc.util.HikariCPSQLException\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry SDK for AWS JDBC Driver\nDESCRIPTION: Example code demonstrating how to set up trace and metrics recording for the AWS JDBC Driver telemetry feature. It configures OTLP exporters, trace and metric providers, and builds the OpenTelemetry SDK with appropriate settings.\nSOURCE: https://github.com/aws/aws-advanced-jdbc-wrapper/blob/main/docs/using-the-jdbc-driver/Telemetry.md#2025-04-21_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nOtlpGrpcSpanExporter spanExporter =\n    OtlpGrpcSpanExporter.builder().setEndpoint(System.getenv(\"OTEL_EXPORTER_OTLP_ENDPOINT\")).build();\nOtlpGrpcMetricExporter metricExporter =\n    OtlpGrpcMetricExporter.builder().setEndpoint(System.getenv(\"OTEL_EXPORTER_OTLP_ENDPOINT\")).build();\n\nSdkTracerProvider tracerProvider =\n    SdkTracerProvider.builder().addSpanProcessor(SimpleSpanProcessor.create(spanExporter)).build();\nSdkMeterProvider meterProvider = SdkMeterProvider.builder()\n    .registerMetricReader(PeriodicMetricReader.builder(metricExporter).setInterval(15, TimeUnit.SECONDS).build())\n    .build();\n\nOpenTelemetrySdk.builder()\n    .setTracerProvider(tracerProvider)\n    .setMeterProvider(meterProvider)\n    .setPropagators(ContextPropagators.create(W3CTraceContextPropagator.getInstance()))\n    .buildAndRegisterGlobal();\n```\n\n----------------------------------------\n\nTITLE: Adding AWS JDBC Driver Dependency in Maven\nDESCRIPTION: This XML snippet shows how to add the AWS JDBC Driver as a dependency in a Maven project's pom.xml file. It specifies the GroupId, ArtifactId, and suggests using the latest version.\nSOURCE: https://github.com/aws/aws-advanced-jdbc-wrapper/blob/main/README.md#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>software.amazon.jdbc</groupId>\n  <artifactId>aws-advanced-jdbc-wrapper</artifactId>\n  <version>LATEST</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Configuring Spring Datasource with AWS JDBC Driver\nDESCRIPTION: YAML configuration for setting up a load-balanced writer and reader datasource using the AWS JDBC Driver. It specifies the JDBC URL with wrapper profile and reader host selector strategy.\nSOURCE: https://github.com/aws/aws-advanced-jdbc-wrapper/blob/main/examples/SpringHibernateBalancedReaderOneDataSourceExample/README.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nspring:\n  datasource:\n    load-balanced-writer-and-reader-datasource:\n      url: jdbc:aws-wrapper:postgresql://test-cluster.cluster-XYZ.us-east-2.rds.amazonaws.com:5432/postgres?wrapperProfileName=F0&readerHostSelectorStrategy=roundRobin\n      username: dev_user\n      password: dev_password\n      driver-class-name: software.amazon.jdbc.Driver\n      type: org.springframework.jdbc.datasource.SimpleDriverDataSource\n```\n\n----------------------------------------\n\nTITLE: Configuring Hikari Connection Pooling for Read/Write Splitting\nDESCRIPTION: Creates a HikariPooledConnectionProvider with custom pool key generator to enable internal connection pooling. This allows efficient reuse of database connections when switching between reader and writer instances.\nSOURCE: https://github.com/aws/aws-advanced-jdbc-wrapper/blob/main/docs/using-the-jdbc-driver/using-plugins/UsingTheReadWriteSplittingPlugin.md#2025-04-21_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nprops.setProperty(\"somePropertyValue\", \"1\"); // used in getPoolKey\nfinal HikariPooledConnectionProvider connProvider =\n    new HikariPooledConnectionProvider(\n        ReadWriteSplittingPostgresExample::getHikariConfig,\n        ReadWriteSplittingPostgresExample::getPoolKey\n    );\nDriver.setCustomConnectionProvider(connProvider);\n\nprivate static String getPoolKey(HostSpec hostSpec, Properties props) {\n  // Include the URL, user, and somePropertyValue in the connection pool key so that a new\n  // connection pool will be opened for each different instance-user-somePropertyValue\n  // combination.\n  final String user = props.getProperty(PropertyDefinition.USER.name);\n  final String somePropertyValue = props.getProperty(\"somePropertyValue\");\n  return hostSpec.getUrl() + user + somePropertyValue;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Connection Pools in Vert.x\nDESCRIPTION: Sets up separate connection pools for read and write operations to an Aurora PostgreSQL database using the AWS JDBC wrapper. Configuration includes database URL, credentials, and connection pool properties.\nSOURCE: https://github.com/aws/aws-advanced-jdbc-wrapper/blob/main/examples/VertxExample/README.md#2025-04-21_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nfinal JsonObject writeConfig = new JsonObject()\n    .put(\"url\", \"jdbc:aws-wrapper:postgresql://db-identifier.cluster-XYZ.us-east-2.rds.amazonaws.com:5432/postgres\")\n    .put(\"driverClass\", \"software.amazon.jdbc.Driver\")\n    .put(\"user\", \"username\")\n    .put(\"password\", \"password\")\n    .put(\"testConnectionOnCheckout\", \"false\")\n    .put(\"testConnectionOnCheckin\", \"false\")\n    .put(\"idleConnectionTestPeriod\", \"30\")\n    .put(\"numHelperThreads\", \"10\")\n    .put(\"max_pool_size\", 20);\n\nfinal JsonObject readConfig = new JsonObject()\n    .put(\"url\", \"jdbc:aws-wrapper:postgresql://db-identifier.cluster-ro-XYZ.us-east-2.rds.amazonaws.com:5432/postgres\")\n    .put(\"driverClass\", \"software.amazon.jdbc.Driver\")\n    .put(\"user\", \"username\")\n    .put(\"password\", \"password\")\n    .put(\"testConnectionOnCheckout\", \"false\")\n    .put(\"testConnectionOnCheckin\", \"false\")\n    .put(\"idleConnectionTestPeriod\", \"30\")\n    .put(\"numHelperThreads\", \"10\")\n    .put(\"max_pool_size\", 20);\n\nJDBCPool write;\nJDBCPool read;\n```\n\n----------------------------------------\n\nTITLE: Configuring HikariCP DataSource for AWS JDBC Driver Failover\nDESCRIPTION: Configuration code for setting up HikariCP DataSource to work with AWS JDBC Driver's failover functionality by specifying a custom exception override class.\nSOURCE: https://github.com/aws/aws-advanced-jdbc-wrapper/blob/main/docs/using-the-jdbc-driver/using-plugins/UsingTheFailoverPlugin.md#2025-04-21_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nHikariDataSource ds = new HikariDataSource();\nds.setExceptionOverrideClassName(\"software.amazon.jdbc.util.HikariCPSQLException\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Reader Selection Strategy for Read/Write Splitting\nDESCRIPTION: Sets the reader host selection strategy for the read/write splitting plugin. This example uses the 'leastConnections' strategy to select reader instances with the fewest active connections.\nSOURCE: https://github.com/aws/aws-advanced-jdbc-wrapper/blob/main/docs/using-the-jdbc-driver/using-plugins/UsingTheReadWriteSplittingPlugin.md#2025-04-21_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nprops.setProperty(ReadWriteSplittingPlugin.READER_HOST_SELECTOR_STRATEGY.name, \"leastConnections\");\n```\n\n----------------------------------------\n\nTITLE: Implementing REST Controller\nDESCRIPTION: REST controller with failover retry capabilities for handling HTTP requests.\nSOURCE: https://github.com/aws/aws-advanced-jdbc-wrapper/blob/main/examples/SpringTxFailoverExample/README.md#2025-04-21_snippet_7\n\nLANGUAGE: java\nCODE:\n```\npackage example;\n\nimport java.util.List;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.retry.annotation.Backoff;\nimport org.springframework.retry.annotation.Retryable;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RestController;\nimport software.amazon.jdbc.plugin.failover.FailoverSQLException;\n\n@RestController\npublic class ApiController {\n\n  @Autowired\n  private ExampleService exampleService;\n\n  @GetMapping(value = \"/get\")\n  @Retryable(value = {FailoverSQLException.class}, maxAttempts = 3, backoff = @Backoff(delay = 5000))\n  public List<Example> get() {\n    return exampleService.get();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Secrets Manager Plugin Parameters for JDBC Connection\nDESCRIPTION: This snippet demonstrates the required parameters for using the AWS Secrets Manager Connection Plugin. It includes the secret ID, region, and optional endpoint override.\nSOURCE: https://github.com/aws/aws-advanced-jdbc-wrapper/blob/main/docs/using-the-jdbc-driver/using-plugins/UsingTheAwsSecretsManagerPlugin.md#2025-04-21_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nsecretsManagerSecretId=secretId\nsecretsManagerRegion=us-east-2\nsecretsManagerEndpoint=http://localhost:1234\n```\n\n----------------------------------------\n\nTITLE: Defining Example Entity for Hibernate\nDESCRIPTION: Java class representing the Example entity with JPA annotations for Hibernate ORM mapping.\nSOURCE: https://github.com/aws/aws-advanced-jdbc-wrapper/blob/main/examples/SpringHibernateExample/README.md#2025-04-21_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npackage example.data;\n\nimport javax.persistence.Entity;\nimport javax.persistence.GeneratedValue;\nimport javax.persistence.Id;\n\n@Entity\npublic class Example {\n\n   @Id\n   @GeneratedValue\n   private int id;\n\n   private int status;\n\n   public Example() {\n      super();\n   }\n\n   public Example(int id, int status) {\n      super();\n      this.id = id;\n      this.status = status;\n   }\n\n   public Example(int status) {\n      super();\n      this.status = status;\n   }\n\n   public int getId() {\n      return id;\n   }\n\n   public void setId(int id) {\n      this.id = id;\n   }\n\n   public int getStatus() {\n      return status;\n   }\n\n   public void setStatus(int name) {\n      this.status = name;\n   }\n\n   @Override\n   public String toString() {\n      return String.format(\"Example [id=%s, status=%s]\", id, status);\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting to PostgreSQL in Multi-AZ Cluster using AWS JDBC Driver\nDESCRIPTION: This code snippet shows how to establish a connection to a PostgreSQL database in a Multi-AZ Cluster using the AWS JDBC Driver. It uses the DriverManager to create a connection with the cluster writer endpoint.\nSOURCE: https://github.com/aws/aws-advanced-jdbc-wrapper/blob/main/docs/using-the-jdbc-driver/SupportForRDSMultiAzDBCluster.md#2025-04-21_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nConnection conn = DriverManager.getConnection(\"jdbc:aws-wrapper:postgresql://cluster-writer-endpoint[:port]/database\", props);\n```\n\n----------------------------------------\n\nTITLE: Federated Authentication Configuration Parameters Table\nDESCRIPTION: Markdown table documenting all available configuration parameters for the federated authentication plugin, including parameter names, types, requirements, descriptions, default values, and example values.\nSOURCE: https://github.com/aws/aws-advanced-jdbc-wrapper/blob/main/docs/using-the-jdbc-driver/using-plugins/UsingTheFederatedAuthPlugin.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Parameter                  |  Value  | Required | Description                                                                                                                                                                                                                                                                                                                                                        | Default Value            | Example Value                                          |\n|----------------------------|:-------:|:--------:|:-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|--------------------------|--------------------------------------------------------|\n| `dbUser`                   | String  |   Yes    | The user name of the IAM user with access to your database. <br>If you have previously used the IAM Authentication Plugin, this would be the same IAM user. <br>For information on how to connect to your Aurora Database with IAM, see this [documentation](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.Connecting.html). | `null`                   | `some_user_name`                                       |\n| `idpUsername`              | String  |   Yes    | The user name for the `idpEndpoint` server. If this parameter is not specified, the plugin will fallback to using the `user` parameter.                                                                                                                                                                                                                            | `null`                   | `jimbob@example.com`                                   |\n| `idpPassword`              | String  |   Yes    | The password associated with the `idpEndpoint` username. If this parameter is not specified, the plugin will fallback to using the `password` parameter.                                                                                                                                                                                                           | `null`                   | `someRandomPassword`                                   |\n| `idpEndpoint`              | String  |   Yes    | The hosting URL for the service that you are using to authenticate into AWS Aurora.                                                                                                                                                                                                                                                                                | `null`                   | `ec2amaz-ab3cdef.example.com`                          |\n| `iamRoleArn`               | String  |   Yes    | The ARN of the IAM Role that is to be assumed to access AWS Aurora.                                                                                                                                                                                                                                                                                                | `null`                   | `arn:aws:iam::123456789012:role/adfs_example_iam_role` |\n| `iamIdpArn`                | String  |   Yes    | The ARN of the Identity Provider.                                                                                                                                                                                                                                                                                                                                  | `null`                   | `arn:aws:iam::123456789012:saml-provider/adfs_example` |\n| `iamRegion`                | String  |   Yes    | The IAM region where the IAM token is generated.                                                                                                                                                                                                                                                                                                                   | `null`                   | `us-east-2`                                            |\n| `idpName`                  | String  |    No    | The name of the Identity Provider implementation used.                                                                                                                                                                                                                                                                                                             | `adfs`                   | `adfs`                                                 |\n| `idpPort`                  | String  |    No    | The port that the host for the authentication service listens at.                                                                                                                                                                                                                                                                                                  | `443`                    | `1234`                                                 |\n| `rpIdentifier`             | String  |    No    | The relaying party identifier.                                                                                                                                                                                                                                                                                                                                     | `urn:amazon:webservices` | `urn:amazon:webservices`                               |\n| `iamHost`                  | String  |    No    | Overrides the host that is used to generate the IAM token.                                                                                                                                                                                                                                                                                                         | `null`                   | `database.cluster-hash.us-east-1.rds.amazonaws.com`    |\n| `iamDefaultPort`           | String  |    No    | This property overrides the default port that is used to generate the IAM token. The default port is determined based on the underlying driver protocol. For now, there is support for `jdbc:postgresql:` and `jdbc:mysql:`. Target drivers with different protocols will require users to provide a default port.                                                 | `null`                   | `1234`                                                 |\n| `iamTokenExpiration`       | Integer |    No    | Overrides the default IAM token cache expiration in seconds                                                                                                                                                                                                                                                                                                        | `870`                    | `123`                                                  |\n| `httpClientSocketTimeout`  | Integer |    No    | The socket timeout value in milliseconds for the HttpClient used by the FederatedAuthenticationPlugin.                                                                                                                                                                                                                                                             | `60000`                  | `60000`                                                |\n| `httpClientConnectTimeout` | Integer |    No    | The connect timeout value in milliseconds for the HttpClient used by the FederatedAuthenticationPlugin.                                                                                                                                                                                                                                                            | `60000`                  | `60000`                                                |\n| `sslInsecure`              | Boolean |    No    | Indicates whether or not the SSL connection is secure or not. If not, it will allow SSL connections to be made without validating the server's certificates.                                                                                                                                                                                                       | `false`                  | `true`                                                 |\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS JDBC Driver for MySQL Connection URL\nDESCRIPTION: Example of legacy AWS JDBC Driver for MySQL connection URL configuration with plugin factories.\nSOURCE: https://github.com/aws/aws-advanced-jdbc-wrapper/blob/main/docs/using-the-jdbc-driver/UsingTheJdbcDriver.md#2025-04-21_snippet_10\n\nLANGUAGE: java\nCODE:\n```\n\"jdbc:mysql:aws://db-identifier.cluster-XYZ.us-east-2.rds.amazonaws.com:3306/db?connectionPluginFactories=com.mysql.cj.jdbc.ha.plugins.AWSSecretsManagerPluginFactory,com.mysql.cj.jdbc.ha.plugins.failover.FailoverConnectionPluginFactory,com.mysql.cj.jdbc.ha.plugins.NodeMonitoringConnectionPluginFactory\"\n```\n\n----------------------------------------\n\nTITLE: Connecting to MySQL in Multi-AZ Cluster using AWS JDBC Driver\nDESCRIPTION: This code snippet demonstrates how to establish a connection to a MySQL database in a Multi-AZ Cluster using the AWS JDBC Driver. It uses the DriverManager to create a connection with the cluster writer endpoint.\nSOURCE: https://github.com/aws/aws-advanced-jdbc-wrapper/blob/main/docs/using-the-jdbc-driver/SupportForRDSMultiAzDBCluster.md#2025-04-21_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nConnection conn = DriverManager.getConnection(\"jdbc:aws-wrapper:mysql://cluster-writer-endpoint[:port]/database\", props);\n```\n\n----------------------------------------\n\nTITLE: Setting Logger Level with Connection Parameter in Java\nDESCRIPTION: Example of setting the logging level for the AWS JDBC Driver using the wrapperLoggerLevel connection parameter in Java.\nSOURCE: https://github.com/aws/aws-advanced-jdbc-wrapper/blob/main/docs/using-the-jdbc-driver/UsingTheJdbcDriver.md#2025-04-21_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nfinal Properties properties = new Properties();\nproperties.setProperty(\"wrapperLoggerLevel\", \"finest\");\nConnection conn = DriverManager.getConnection(CONNECTION_STRING, properties);\n```\n\n----------------------------------------\n\nTITLE: Configuring Monitoring Connection Parameters in Java\nDESCRIPTION: This snippet demonstrates how to set different timeout values for monitoring connections and regular connections using the Properties object. It's important to provide non-zero timeout values to prevent indefinite waiting.\nSOURCE: https://github.com/aws/aws-advanced-jdbc-wrapper/blob/main/docs/using-the-jdbc-driver/using-plugins/UsingTheHostMonitoringPlugin.md#2025-04-21_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nfinal Properties properties = new Properties();\n// Configure the timeout values for all, non-monitoring connections.\nproperties.setProperty(\"connectTimeout\", \"30\");\nproperties.setProperty(\"socketTimeout\", \"30\");\n// Configure different timeout values for the monitoring connections.\nproperties.setProperty(\"monitoring-connectTimeout\", \"10\");\nproperties.setProperty(\"monitoring-socketTimeout\", \"10\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Spring Boot Logging for AWS JDBC Driver with Properties\nDESCRIPTION: Example properties configuration for enabling trace-level logging of the AWS JDBC Driver in Spring or Spring Boot applications.\nSOURCE: https://github.com/aws/aws-advanced-jdbc-wrapper/blob/main/docs/using-the-jdbc-driver/UsingTheJdbcDriver.md#2025-04-21_snippet_3\n\nLANGUAGE: properties\nCODE:\n```\nlogging.level.software.amazon.jdbc=trace\n```\n\n----------------------------------------\n\nTITLE: Creating IAM User for MySQL Database\nDESCRIPTION: SQL command to create a new user in a MySQL database that uses the AWS IAM Authentication Plugin for authentication. This command establishes a database user that will authenticate through IAM rather than traditional password authentication.\nSOURCE: https://github.com/aws/aws-advanced-jdbc-wrapper/blob/main/docs/using-the-jdbc-driver/using-plugins/UsingTheIamAuthenticationPlugin.md#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE USER example_user_name IDENTIFIED WITH AWSAuthenticationPlugin AS 'RDS';\n```\n\n----------------------------------------\n\nTITLE: Setting AWS Wrapper DataSource Class\nDESCRIPTION: Sets the DataSource class name to use the AWS JDBC wrapper implementation.\nSOURCE: https://github.com/aws/aws-advanced-jdbc-wrapper/blob/main/docs/using-the-jdbc-driver/DataSource.md#2025-04-21_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nds.setDataSourceClassName(AwsWrapperDataSource.class.getName());\n```\n\n----------------------------------------\n\nTITLE: Configuring Hibernate Dialect for PostgreSQL\nDESCRIPTION: This YAML snippet sets the Hibernate dialect to PostgreSQL, which is necessary for proper ORM functionality with a PostgreSQL database.\nSOURCE: https://github.com/aws/aws-advanced-jdbc-wrapper/blob/main/examples/SpringHibernateBalancedReaderTwoDataSourceExample/README.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\njpa:\n properties:\n   hibernate:\n     dialect: org.hibernate.dialect.PostgreSQLDialect\n```\n\n----------------------------------------\n\nTITLE: Configuring Additional DataSource Properties\nDESCRIPTION: Sets optional driver-specific and AWS JDBC Driver properties using a Properties object.\nSOURCE: https://github.com/aws/aws-advanced-jdbc-wrapper/blob/main/docs/using-the-jdbc-driver/DataSource.md#2025-04-21_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nProperties targetDataSourceProps = new Properties();\ntargetDataSourceProps.setProperty(\"socketTimeout\", \"10\");\ntargetDataSourceProps.setProperty(\"wrapperLoggerLevel\", \"ALL\");\nds.addDataSourceProperty(\"targetDataSourceProperties\", targetDataSourceProps);\n```\n\n----------------------------------------\n\nTITLE: Adding AWS JDBC Driver in Kotlin Gradle Build\nDESCRIPTION: Kotlin syntax for adding the AWS JDBC Driver as a dependency in a Gradle project using Kotlin DSL.\nSOURCE: https://github.com/aws/aws-advanced-jdbc-wrapper/blob/main/docs/GettingStarted.md#2025-04-21_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\ndependencies {\n    implementation(\"software.amazon.jdbc:aws-advanced-jdbc-wrapper:2.5.5\")\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Spring Datasources for AWS JDBC Driver\nDESCRIPTION: This YAML configuration sets up two datasources using the AWS JDBC Driver: a writer datasource and a load-balanced reader datasource. It includes connection URLs, credentials, and driver class names.\nSOURCE: https://github.com/aws/aws-advanced-jdbc-wrapper/blob/main/examples/SpringHibernateBalancedReaderTwoDataSourceExample/README.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nspring:\n  datasource:\n    writer-datasource:\n      url: jdbc:aws-wrapper:postgresql://db-identifier.cluster-XYZ.us-east-2.rds.amazonaws.com:5432/test_db?wrapperProfileName=SF_F0\n      username: dev_user\n      password: dev_password\n      driver-class-name: software.amazon.jdbc.Driver\n      type: org.springframework.jdbc.datasource.SimpleDriverDataSource\n    load-balanced-reader-datasource:\n      url: jdbc:aws-wrapper:postgresql://db-identifier.cluster-ro-XYZ.us-east-2.rds.amazonaws.com:5432/test_db?wrapperProfileName=SF_F0&readerInitialConnectionHostSelectorStrategy=roundRobin\n      username: dev_user\n      password: dev_password\n      driver-class-name: software.amazon.jdbc.Driver\n      type: org.springframework.jdbc.datasource.SimpleDriverDataSource\n```\n\n----------------------------------------\n\nTITLE: Setting Target DataSource Class\nDESCRIPTION: Specifies the underlying database-specific DataSource implementation to be used by the AWS JDBC wrapper.\nSOURCE: https://github.com/aws/aws-advanced-jdbc-wrapper/blob/main/docs/using-the-jdbc-driver/DataSource.md#2025-04-21_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nds.addDataSourceProperty(\"targetDataSourceClassName\", \"org.postgresql.ds.PGSimpleDataSource\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradle Dependencies for AWS JDBC Driver\nDESCRIPTION: Gradle dependency configuration to include Spring Boot, PostgreSQL, and AWS Advanced JDBC Wrapper dependencies.\nSOURCE: https://github.com/aws/aws-advanced-jdbc-wrapper/blob/main/examples/SpringHibernateExample/README.md#2025-04-21_snippet_3\n\nLANGUAGE: gradle\nCODE:\n```\ndependencies {\n   implementation(\"org.springframework.boot:spring-boot-starter-jdbc\")\n   implementation(\"org.springframework.boot:spring-boot-starter-web\")\n   implementation(\"org.postgresql:postgresql\")\n   implementation(\"software.amazon.jdbc:aws-advanced-jdbc-wrapper:latest\")\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Aurora Initial Connection Strategy Parameters in Java\nDESCRIPTION: Shows how to configure connection retry timeout for the Aurora Initial Connection Strategy Plugin using connection parameters.\nSOURCE: https://github.com/aws/aws-advanced-jdbc-wrapper/blob/main/docs/using-the-jdbc-driver/using-plugins/UsingTheAuroraInitialConnectionStrategyPlugin.md#2025-04-21_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nproperties.setProperty(\"openConnectionRetryTimeoutMs\", 40000);\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Dialect in AWS JDBC Driver\nDESCRIPTION: Example showing how to set a custom dialect implementation using the DialectManager class. This allows using custom database types not natively supported by the AWS JDBC Driver.\nSOURCE: https://github.com/aws/aws-advanced-jdbc-wrapper/blob/main/docs/using-the-jdbc-driver/DatabaseDialects.md#2025-04-21_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nDialect myDialect = new CustomDialect();\nDialectManager.setCustomDialect(myDialect);\n```\n\n----------------------------------------\n\nTITLE: Loading Read/Write Splitting Plugin with Failover and Host Monitoring Plugins\nDESCRIPTION: Configures the JDBC driver to use the read/write splitting plugin along with failover and efm (host monitoring) plugins. The read/write splitting plugin must be listed before these other plugins in the chain.\nSOURCE: https://github.com/aws/aws-advanced-jdbc-wrapper/blob/main/docs/using-the-jdbc-driver/using-plugins/UsingTheReadWriteSplittingPlugin.md#2025-04-21_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nfinal Properties properties = new Properties();\nproperties.setProperty(PropertyDefinition.PLUGINS.name, \"readWriteSplitting,failover,efm\");\n```\n\n----------------------------------------\n\nTITLE: Creating IAM User for PostgreSQL Database\nDESCRIPTION: SQL commands to create a new user in a PostgreSQL database and grant the necessary IAM authentication permissions. This creates a database user and assigns the rds_iam role required for IAM authentication.\nSOURCE: https://github.com/aws/aws-advanced-jdbc-wrapper/blob/main/docs/using-the-jdbc-driver/using-plugins/UsingTheIamAuthenticationPlugin.md#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCREATE USER db_userx;\nGRANT rds_iam TO db_userx;\n```\n\n----------------------------------------\n\nTITLE: Creating Wildfly Module XML for AWS JDBC Driver\nDESCRIPTION: Module definition for Wildfly that includes the AWS JDBC wrapper and PostgreSQL JDBC driver JAR files. This configuration makes the JDBC drivers available to the Wildfly application server.\nSOURCE: https://github.com/aws/aws-advanced-jdbc-wrapper/blob/main/examples/SpringWildflyExample/README.md#2025-04-21_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<module xmlns=\"urn:jboss:module:1.1\" name=\"software.amazon.jdbc\">\n\n  <resources>\n    <resource-root path=\"aws-advanced-jdbc-wrapper-2.5.4.jar\"/>\n    <resource-root path=\"postgresql-42.5.4.jar\"/>\n  </resources>\n</module>\n```\n\n----------------------------------------\n\nTITLE: Good Plugin Implementation Example in Java\nDESCRIPTION: An example of good practices in plugin implementation, demonstrating proper use of the plugin service, handling of host information, and correct connection establishment.\nSOURCE: https://github.com/aws/aws-advanced-jdbc-wrapper/blob/main/docs/development-guide/LoadablePlugins.md#2025-04-21_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic class GoodExample extends AbstractConnectionPlugin {\n    PluginService pluginService;\n    HostListProvider hostListProvider;\n    Properties props;\n\n    GoodExample(PluginService pluginService, Properties props) {\n        this.pluginService = pluginService;\n        this.props = props;\n    }\n\n    @Override\n    public Set<String> getSubscribedMethods() {\n        return new HashSet<>(Collections.singletonList(\"*\"));\n    }\n\n    @Override\n    public <T, E extends Exception> T execute(\n        final Class<T> resultClass,\n        final Class<E> exceptionClass,\n        final Object methodInvokeOn,\n        final String methodName,\n        final JdbcCallable<T, E> jdbcMethodFunc,\n        final Object[] jdbcMethodArgs)\n        throws E {\n      if (this.pluginService.getHosts().isEmpty()) {\n        // Re-fetch host information if it is empty.\n        this.pluginService.forceRefreshHostList();\n      }\n      return jdbcMethodFunc.call();\n    }\n\n    @Override\n    public Connection connect(String driverProtocol, HostSpec hostSpec, Properties props, boolean isInitialConnection,\n            JdbcCallable<Connection, SQLException> connectFunc) throws SQLException {\n        if (PropertyDefinition.USER.getString(props) == null) {\n            PropertyDefinition.TARGET_DRIVER_USER_PROPERTY_NAME.set(props, \"defaultUser\");\n        }\n\n        // Call the pipeline lambda to connect.\n        return connectFunc.call();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Spring Boot Logging for AWS JDBC Driver with YAML\nDESCRIPTION: Example YAML configuration for enabling trace-level logging of the AWS JDBC Driver in Spring or Spring Boot applications.\nSOURCE: https://github.com/aws/aws-advanced-jdbc-wrapper/blob/main/docs/using-the-jdbc-driver/UsingTheJdbcDriver.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nlogging:  \n  level:  \n    software.amazon.jdbc: TRACE\n```\n\n----------------------------------------\n\nTITLE: Configuring DataSource in YAML\nDESCRIPTION: Application configuration for HikariCP and AWS JDBC Driver including failover settings and connection properties.\nSOURCE: https://github.com/aws/aws-advanced-jdbc-wrapper/blob/main/examples/SpringTxFailoverExample/README.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nspring:\n  datasource:\n    url: jdbc:aws-wrapper:postgresql://db-identifier.cluster-XYZ.us-east-2.rds.amazonaws.com:5432/db\n    username: jane_doe\n    password: password\n    driver-class-name: software.amazon.jdbc.Driver\n    hikari:\n      exception-override-class-name: software.amazon.jdbc.util.HikariCPSQLException\n      max-lifetime: 1260000\n      auto-commit: false\n      maximum-pool-size: 3\n      data-source-properties:\n        keepSessionStateOnFailover: true\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Plugin in Java\nDESCRIPTION: Example of how to register a custom plugin using DriverConfigurationProfiles.addOrReplaceProfile(). This code sets the wrapper profile name and adds a new profile with a custom plugin factory.\nSOURCE: https://github.com/aws/aws-advanced-jdbc-wrapper/blob/main/docs/development-guide/LoadablePlugins.md#2025-04-21_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nproperties.setProperty(\"wrapperProfileName\", \"foo\");\nDriverConfigurationProfiles.addOrReplaceProfile(\"foo\", Collections.singletonList(FooPluginFactory.class));\n```\n\n----------------------------------------\n\nTITLE: Initializing Spring Boot Application with AWS JDBC Driver\nDESCRIPTION: Main application class that implements CommandLineRunner to fetch and log data from the repository using the AWS Advanced JDBC Driver.\nSOURCE: https://github.com/aws/aws-advanced-jdbc-wrapper/blob/main/examples/SpringHibernateExample/README.md#2025-04-21_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n@SpringBootApplication\npublic class SpringHibernateExampleApplication implements CommandLineRunner {\n  private final Logger LOGGER = LoggerFactory.getLogger(this.getClass());\n\n  @Autowired\n  ExampleRepository repository;\n\n  @Override\n  public void run(String... args) {\n    LOGGER.info(\"Example -> {}\", repository.findAll());\n  }\n\n  public static void main(String[] args) {\n    SpringApplication.run(SpringHibernateExampleApplication.class, args);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Spring Boot Application with JdbcTemplate\nDESCRIPTION: Main Spring Boot application class that uses JdbcTemplate to query data from the database through the AWS JDBC wrapper. It executes a simple SELECT query and maps the results to the Example class.\nSOURCE: https://github.com/aws/aws-advanced-jdbc-wrapper/blob/main/examples/SpringWildflyExample/README.md#2025-04-21_snippet_6\n\nLANGUAGE: java\nCODE:\n```\npackage example;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.CommandLineRunner;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.jdbc.core.JdbcTemplate;\n\n@SpringBootApplication\npublic class SpringWildflyExampleApplication implements CommandLineRunner {\n\n   private final Logger LOGGER = LoggerFactory.getLogger(this.getClass());\n\n   @Autowired\n   JdbcTemplate jdbcTemplate;\n\n   @Override\n   public void run(String... args) {\n      LOGGER.info(\"Example -> {}\", jdbcTemplate.query(\n              \"SELECT * FROM example LIMIT 10\",\n              (rs, rowNum) ->\n                      new Example(\n                              rs.getInt(\"status\"),\n                              rs.getInt(\"id\")\n                      )\n      ));\n   }\n\n   public static void main(String[] args) {\n      SpringApplication.run(SpringWildflyExampleApplication.class, args);\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating JPA Repository Interface\nDESCRIPTION: Interface extending JpaRepository to provide CRUD operations for the Example entity.\nSOURCE: https://github.com/aws/aws-advanced-jdbc-wrapper/blob/main/examples/SpringHibernateExample/README.md#2025-04-21_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npackage example.data;\n\nimport org.springframework.data.jpa.repository.JpaRepository;\n\npublic interface ExampleRepository extends JpaRepository<Example, Integer> {\n\n}\n```\n\n----------------------------------------\n\nTITLE: Example Connection String Format for PostgreSQL Hosts\nDESCRIPTION: Demonstrates the supported and unsupported connection string formats for the ConnectionStringHostListProvider when connecting to PostgreSQL databases with multiple hosts.\nSOURCE: https://github.com/aws/aws-advanced-jdbc-wrapper/blob/main/docs/development-guide/PluginService.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\njdbc:aws-wrapper:postgresql://hostname1,hostname2:8090/testDB\n```\n\nLANGUAGE: plaintext\nCODE:\n```\njdbc:aws-wrapper:postgresql://hostname1:8030,hostname2:8090/testDB\n```\n\n----------------------------------------\n\nTITLE: Implementing DAO Interface and Implementation\nDESCRIPTION: Data Access Object interface and implementation for database operations with Spring JDBC template.\nSOURCE: https://github.com/aws/aws-advanced-jdbc-wrapper/blob/main/examples/SpringTxFailoverExample/README.md#2025-04-21_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npackage example;\n\nimport java.util.List;\nimport java.util.Map;\n\npublic interface ExampleDao {\n  List<Map<String, Object>> getAll();\n}\n```\n\nLANGUAGE: java\nCODE:\n```\npackage example;\n\nimport java.util.List;\nimport java.util.Map;\nimport javax.sql.DataSource;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.jdbc.core.JdbcTemplate;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class ExampleDaoImpl implements ExampleDao {\n  @Autowired\n  private DataSource dataSource;\n\n  @Override\n  public List<Map<String, Object>> getAll() {\n    final String sql = \"SELECT * FROM EXAMPLE\";\n    final JdbcTemplate jdbcTemplate = new JdbcTemplate(dataSource);\n    return jdbcTemplate.queryForList(sql);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuration Parameters Table in Markdown\nDESCRIPTION: Markdown table showing the configuration parameters for the Custom Endpoint Plugin, including parameter names, value types, requirements, descriptions, default values, and examples.\nSOURCE: https://github.com/aws/aws-advanced-jdbc-wrapper/blob/main/docs/using-the-jdbc-driver/using-plugins/UsingTheCustomEndpointPlugin.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Parameter                            |  Value  | Required | Description                                                                                                                                                                                                                                                                                                                          | Default Value         | Example Value |\n|--------------------------------------|:-------:|:--------:|:---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|-----------------------|---------------|\n| `customEndpointRegion`               | String  |    No    | The region of the cluster's custom endpoints. If not specified, the region will be parsed from the URL.                                                                                                                                                                              | `null`                | `us-west-1`   |\n| `customEndpointInfoRefreshRateMs`    | Integer |    No    | Controls how frequently custom endpoint monitors fetch custom endpoint info, in milliseconds.                                                                                                                                                                                        | `30000`               | `20000`       |\n| `customEndpointMonitorExpirationMs`  | Integer |    No    | Controls how long a monitor should run without use before expiring and being removed, in milliseconds.                                                                                                                                                                               | `900000` (15 minutes) | `600000`      |\n| `waitForCustomEndpointInfo`          | Boolean |    No    | Controls whether to wait for custom endpoint info to become available before connecting or executing a method. Waiting is only necessary if a connection to a given custom endpoint has not been opened or used recently. Note that disabling this may result in occasional connections to instances outside of the custom endpoint. | `true`                | `true`        |\n| `waitForCustomEndpointInfoTimeoutMs` | Integer |    No    | Controls the maximum amount of time that the plugin will wait for custom endpoint info to be made available by the custom endpoint monitor, in milliseconds.                                                                                                                                                                         | `5000`                | `7000`        |\n```\n\n----------------------------------------\n\nTITLE: Implementing REST API with JDBC Template in Java\nDESCRIPTION: Creates a REST controller using Spring's @RestController and @GetMapping annotations, and uses JdbcTemplate to execute a simple SQL query.\nSOURCE: https://github.com/aws/aws-advanced-jdbc-wrapper/blob/main/examples/SpringBootHikariExample/README.md#2025-04-21_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npackage software.amazon.SpringBootHikariExample;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.jdbc.core.JdbcTemplate;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n@RestController\npublic class ApiController {\n\n  @Autowired\n  private JdbcTemplate jdbcTemplate;\n\n  @GetMapping(value = \"/select1\")\n  public Integer getOne() {\n    return jdbcTemplate.queryForObject(\"SELECT 1;\", Integer.class);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Connection Properties for AWS JDBC Driver Failover in Wildfly\nDESCRIPTION: XML snippet showing how to configure additional failover properties for the AWS JDBC wrapper in Wildfly. These properties control timeouts and intervals for database failover operations.\nSOURCE: https://github.com/aws/aws-advanced-jdbc-wrapper/blob/main/examples/SpringWildflyExample/README.md#2025-04-21_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<connection-property name=\"failoverTimeoutMs\">180000</connection-property>\n<connection-property name=\"failoverWriterReconnectIntervalMs\">2000</connection-property>\n<connection-property name=\"failoverReaderConnectTimeoutMs\">30000</connection-property>\n<connection-property name=\"failoverClusterTopologyRefreshRateMs\">2000</connection-property>\n```\n\n----------------------------------------\n\nTITLE: Adding Gradle Dependencies for AWS JDBC Driver and Spring Boot\nDESCRIPTION: Gradle dependencies required for the project, including Spring Boot JDBC starter, Spring Retry, PostgreSQL driver, and the AWS Advanced JDBC Wrapper.\nSOURCE: https://github.com/aws/aws-advanced-jdbc-wrapper/blob/main/examples/SpringHibernateBalancedReaderOneDataSourceExample/README.md#2025-04-21_snippet_0\n\nLANGUAGE: gradle\nCODE:\n```\ndependencies {\n   implementation(\"org.springframework.boot:spring-boot-starter-jdbc\")\n   implementation(\"org.springframework.retry:spring-retry\")\n   implementation(\"org.postgresql:postgresql\")\n   implementation(\"software.amazon.jdbc:aws-advanced-jdbc-wrapper:latest\")\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing the Vert.x Application Start Method\nDESCRIPTION: Configures the Vert.x application start method to initialize the router, connection pools, and HTTP server. The server listens on port 8888 and completes the promise when started successfully.\nSOURCE: https://github.com/aws/aws-advanced-jdbc-wrapper/blob/main/examples/VertxExample/README.md#2025-04-21_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n@Override\npublic void start(Promise<Void> startPromise) throws Exception {\n    Router router = Router.router(vertx);\n    router.get(\"/id\").handler(this::getCurrentInstance);\n    \n    write = JDBCPool.pool(vertx, writeConfig);\n    read = JDBCPool.pool(vertx, readConfig);\n    \n    vertx.createHttpServer()\n      .requestHandler(router)\n      .listen(8888, http -> {\n        if (http.succeeded()) {\n          try {\n            startPromise.complete();\n            System.out.println(\"HTTP server started on port 8888\");\n          } catch (IllegalStateException e) {\n            startPromise.fail(http.cause());\n          }\n        }\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Hibernate Dialect for PostgreSQL\nDESCRIPTION: YAML configuration to set the Hibernate dialect for PostgreSQL in a Spring Boot application.\nSOURCE: https://github.com/aws/aws-advanced-jdbc-wrapper/blob/main/examples/SpringHibernateBalancedReaderOneDataSourceExample/README.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\njpa:\n properties:\n   hibernate:\n     dialect: org.hibernate.dialect.PostgreSQLDialect\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradle Dependencies for AWS JDBC Driver\nDESCRIPTION: Gradle configuration that includes dependencies for Spring Boot JDBC, web components, PostgreSQL driver, and the AWS Advanced JDBC Wrapper. These dependencies are required for the application to connect to the database using the AWS wrapper.\nSOURCE: https://github.com/aws/aws-advanced-jdbc-wrapper/blob/main/examples/SpringWildflyExample/README.md#2025-04-21_snippet_1\n\nLANGUAGE: gradle\nCODE:\n```\ndependencies {\n   implementation(\"org.springframework.boot:spring-boot-starter-jdbc\")\n   implementation(\"org.springframework.boot:spring-boot-starter-web\")\n   runtimeOnly(\"org.springframework.boot:spring-boot-devtools\")\n   implementation(\"org.postgresql:postgresql\")\n   implementation(\"software.amazon.jdbc:aws-advanced-jdbc-wrapper:latest\")\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Database Query Handler in Vert.x\nDESCRIPTION: Defines a handler method that queries the database for instance information and returns the result as JSON. The method uses the write connection pool and handles both success and failure cases.\nSOURCE: https://github.com/aws/aws-advanced-jdbc-wrapper/blob/main/examples/VertxExample/README.md#2025-04-21_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nprivate void getCurrentInstance(RoutingContext routingContext) {\n    write.query(\"select aurora_db_instance_identifier() as id, case when pg_is_in_recovery() then 'reader' else 'writer' end as role\")\n    .execute()\n    .onSuccess(\n        rows -> {\n            for (Row row : rows) {\n                Instance instance = new Instance(\n                row.getString(\"id\"), row.getString(\"role\"));\n            \n                routingContext.response()\n                .putHeader(\"content-type\", \"application/json\")\n                .setStatusCode(200)\n                .end(Json.encodePrettily(instance));\n            }\n        })\n    .onFailure(e -> {\n    System.out.println(\"failure: \" + e);\n      // handle the failure\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Spring Boot to Use JNDI DataSource\nDESCRIPTION: Spring application.properties configuration that sets the application to use the JNDI datasource defined in Wildfly. This connects the Spring application to the AWS JDBC wrapper configured in the application server.\nSOURCE: https://github.com/aws/aws-advanced-jdbc-wrapper/blob/main/examples/SpringWildflyExample/README.md#2025-04-21_snippet_5\n\nLANGUAGE: properties\nCODE:\n```\nspring.datasource.jndi-name=java:jboss/datasources/AWSWrapper\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradle Dependencies for Spring Boot and AWS JDBC Driver\nDESCRIPTION: Adds the necessary dependencies to the build.gradle.kts file for Spring Boot, AWS JDBC Driver, and PostgreSQL.\nSOURCE: https://github.com/aws/aws-advanced-jdbc-wrapper/blob/main/examples/SpringBootHikariExample/README.md#2025-04-21_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ndependencies {\n\timplementation(\"org.springframework.boot:spring-boot-starter-data-jdbc\")\n\timplementation(\"org.springframework.boot:spring-boot-starter-web\")\n\timplementation(\"software.amazon.jdbc:aws-advanced-jdbc-wrapper:latest\")\n\timplementation(\"org.postgresql:postgresql:42.5.4\")\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Aurora Initial Connection Strategy Plugin in Java\nDESCRIPTION: Demonstrates how to enable the Aurora Initial Connection Strategy Plugin by setting the wrapperPlugins property.\nSOURCE: https://github.com/aws/aws-advanced-jdbc-wrapper/blob/main/docs/using-the-jdbc-driver/using-plugins/UsingTheAuroraInitialConnectionStrategyPlugin.md#2025-04-21_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nproperties.setProperty(\"wrapperPlugins\", \"initialConnection\");\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS JDBC Driver as Maven Dependency\nDESCRIPTION: XML configuration to add the AWS JDBC Driver as a dependency in a Maven project's POM file.\nSOURCE: https://github.com/aws/aws-advanced-jdbc-wrapper/blob/main/docs/GettingStarted.md#2025-04-21_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<dependencies>\n    <dependency>\n        <groupId>software.amazon.jdbc</groupId>\n        <artifactId>aws-advanced-jdbc-wrapper</artifactId>\n        <version>2.5.5</version>\n    </dependency>\n</dependencies>\n```\n\n----------------------------------------\n\nTITLE: Configuring Maven Dependency for AWS JDBC Wrapper Snapshot\nDESCRIPTION: Maven dependency configuration for using a snapshot version of the AWS Advanced JDBC Wrapper driver.\nSOURCE: https://github.com/aws/aws-advanced-jdbc-wrapper/blob/main/docs/using-the-jdbc-driver/UsingTheJdbcDriver.md#2025-04-21_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<dependencies>\n  <dependency>\n    <groupId>software.amazon.jdbc</groupId>\n    <artifactId>aws-advanced-jdbc-wrapper</artifactId>\n    <version>2.5.6-SNAPSHOT</version>\n    <scope>system</scope>\n    <systemPath>path-to-snapshot-jar</systemPath>\n  </dependency>\n</dependencies>\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradle Dependencies\nDESCRIPTION: Gradle dependencies configuration including Spring Boot, AWS JDBC Driver, and PostgreSQL dependencies.\nSOURCE: https://github.com/aws/aws-advanced-jdbc-wrapper/blob/main/examples/SpringTxFailoverExample/README.md#2025-04-21_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\ndependencies {\n\timplementation(\"org.springframework.boot:spring-boot-starter-data-jdbc\")\n\timplementation(\"org.springframework.boot:spring-boot-starter-web\")\n\timplementation(\"org.springframework.retry:spring-retry:1.3.4\")\n\timplementation(\"org.springframework:spring-aspects:5.3.29\")\n\timplementation(\"org.postgresql:postgresql:42.5.4\")\n\timplementation(\"software.amazon.awssdk:rds:2.29.23\")\n\timplementation(\"software.amazon.jdbc:aws-advanced-jdbc-wrapper:latest\")\n}\n```\n\n----------------------------------------\n\nTITLE: Bad Plugin Implementation Example in Java\nDESCRIPTION: An example of bad practices in plugin implementation, including keeping local copies of shared information, using driver-specific properties, and making direct connections.\nSOURCE: https://github.com/aws/aws-advanced-jdbc-wrapper/blob/main/docs/development-guide/LoadablePlugins.md#2025-04-21_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic class BadPlugin extends AbstractConnectionPlugin {\n    PluginService pluginService;\n    HostListProvider hostListProvider;\n    Properties props;\n\n    BadPlugin(PluginService pluginService, Properties props) {\n        this.pluginService = pluginService;\n        this.props = props;\n\n        // Bad Practice #1: keeping local copies of items\n        // Plugins should not keep local copies of the host list provider, the topology or the connection.\n        // Host list provider is kept in the Plugin Service and can be modified by other plugins,\n        // therefore it should be retrieved by calling pluginService.getHostListProvider() when it is needed.\n        this.hostListProvider = this.pluginService.getHostListProvider();\n    }\n\n    @Override\n    public Set<String> getSubscribedMethods() {\n        return new HashSet<>(Collections.singletonList(\"*\"));\n    }\n\n    @Override\n    public Connection connect(String driverProtocol, HostSpec hostSpec, Properties props, boolean isInitialConnection,\n            JdbcCallable<Connection, SQLException> connectFunc) throws SQLException {\n        // Bad Practice #2: using driver-specific objects.\n        // Not all drivers support the same configuration parameters. For instance, while MySQL Connector/J Supports \"database\",\n        // PGJDBC uses \"dbname\" for database names.\n        if (props.getProperty(\"database\") == null) {\n            props.setProperty(\"database\", \"defaultDatabase\");\n        }\n\n        // Bad Practice #3: Making direct connections\n        return DriverManager.getConnection(props.getProperty(\"url\"), props);\n    }    \n}\n```\n\n----------------------------------------\n\nTITLE: Downloading AWS JDBC Driver with wget\nDESCRIPTION: Command that uses wget to download the AWS JDBC Driver from GitHub Releases.\nSOURCE: https://github.com/aws/aws-advanced-jdbc-wrapper/blob/main/docs/GettingStarted.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nwget https://github.com/awslabs/aws-advanced-jdbc-wrapper/releases/download/2.5.5/aws-advanced-jdbc-wrapper-2.5.5.jar\n```\n\n----------------------------------------\n\nTITLE: HikariCP Custom Exception Override Implementation\nDESCRIPTION: Implementation of SQLExceptionOverride interface for HikariCP to properly handle AWS JDBC Driver's failover-related exceptions and prevent premature connection closure.\nSOURCE: https://github.com/aws/aws-advanced-jdbc-wrapper/blob/main/docs/using-the-jdbc-driver/using-plugins/UsingTheFailoverPlugin.md#2025-04-21_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport com.zaxxer.hikari.SQLExceptionOverride;\nimport java.sql.SQLException;\nimport software.amazon.jdbc.util.SqlState;\n\npublic class HikariCPSQLException implements SQLExceptionOverride {\n    public Override adjudicate(final SQLException sqlException) {\n        String sqlState = sqlException.getSQLState();\n        if (sqlState.equalsIgnoreCase(SqlState.COMMUNICATION_LINK_CHANGED.getState()) ||\n            sqlState.equalsIgnoreCase(SqlState.CONNECTION_FAILURE_DURING_TRANSACTION.getState())) {\n            return Override.DO_NOT_EVICT;\n        } else {\n            return Override.CONTINUE_EVICT;\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding AWS JDBC Driver to CLASSPATH\nDESCRIPTION: Command that adds the AWS JDBC Driver to the Java CLASSPATH environment variable.\nSOURCE: https://github.com/aws/aws-advanced-jdbc-wrapper/blob/main/docs/GettingStarted.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport CLASSPATH=$CLASSPATH:/home/userx/libs/aws-advanced-jdbc-wrapper-2.5.5.jar\n```\n\n----------------------------------------\n\nTITLE: Decoding Base64-encoded SAML 2.0 Response Document for AWS Authentication\nDESCRIPTION: A SAML 2.0 response document that facilitates federated authentication between an identity provider (Okta) and AWS. The response contains user attributes, role information, and authentication context necessary for establishing an AWS session.\nSOURCE: https://github.com/aws/aws-advanced-jdbc-wrapper/blob/main/wrapper/src/test/resources/okta/assertion.txt#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<saml2p:Response Destination=\"https://signin.aws.amazon.com/saml\" ID=\"id123456789\" IssueInstant=\"2024-04-04T07:20:04.055Z\" Version=\"2.0\"\n\txmlns:saml2p=\"urn:oasis:names:tc:SAML:2.0:protocol\"\n\txmlns:xs=\"http://www.w3.org/2001/XMLSchema\">\n\t<saml2:Issuer Format=\"urn:oasis:names:tc:SAML:2.0:nameid-format:entity\"\n\t\txmlns:saml2=\"urn:oasis:names:tc:SAML:2.0:assertion\">http://www.okta.com/abcd\n\t</saml2:Issuer>\n\t<ds:Signature\n\t\txmlns:ds=\"http://www.w3.org/2000/09/xmldsig#\">\n\t\t<ds:SignedInfo>\n\t\t\t<ds:CanonicalizationMethod Algorithm=\"http://www.w3.org/2001/10/xml-exc-c14n#\"/>\n\t\t\t<ds:SignatureMethod Algorithm=\"http://www.w3.org/2001/04/xmldsig-more#rsa-sha256\"/>\n\t\t\t<ds:Reference URI=\"#id8830521503841091104684961\">\n\t\t\t\t<ds:Transforms>\n\t\t\t\t\t<ds:Transform Algorithm=\"http://www.w3.org/2000/09/xmldsig#enveloped-signature\"/>\n\t\t\t\t\t<ds:Transform Algorithm=\"http://www.w3.org/2001/10/xml-exc-c14n#\">\n\t\t\t\t\t\t<ec:InclusiveNamespaces PrefixList=\"xs\"\n\t\t\t\t\t\t\txmlns:ec=\"http://www.w3.org/2001/10/xml-exc-c14n#\"/>\n\t\t\t\t\t\t</ds:Transform>\n\t\t\t\t\t</ds:Transforms>\n\t\t\t\t\t<ds:DigestMethod Algorithm=\"http://www.w3.org/2001/04/xmlenc#sha256\"/>\n\t\t\t\t\t<ds:DigestValue>digest=</ds:DigestValue>\n\t\t\t\t</ds:Reference>\n\t\t\t</ds:SignedInfo>\n\t\t\t<ds:SignatureValue>signature</ds:SignatureValue>\n\t\t\t<ds:KeyInfo>\n\t\t\t\t<ds:X509Data>\n\t\t\t\t\t<ds:X509Certificate>certificate</ds:X509Certificate>\n\t\t\t\t</ds:X509Data>\n\t\t\t</ds:KeyInfo>\n\t\t</ds:Signature>\n\t\t<saml2p:Status\n\t\t\txmlns:saml2p=\"urn:oasis:names:tc:SAML:2.0:protocol\">\n\t\t\t<saml2p:StatusCode Value=\"urn:oasis:names:tc:SAML:2.0:status:Success\"/>\n\t\t</saml2p:Status>\n\t\t<saml2:Assertion ID=\"id123456789\" IssueInstant=\"2024-04-04T07:20:04.055Z\" Version=\"2.0\"\n\t\t\txmlns:saml2=\"urn:oasis:names:tc:SAML:2.0:assertion\"\n\t\t\txmlns:xs=\"http://www.w3.org/2001/XMLSchema\">\n\t\t\t<saml2:Issuer Format=\"urn:oasis:names:tc:SAML:2.0:nameid-format:entity\"\n\t\t\t\txmlns:saml2=\"urn:oasis:names:tc:SAML:2.0:assertion\">http://www.okta.com/abcd\n\t\t\t</saml2:Issuer>\n\t\t\t<ds:Signature\n\t\t\t\txmlns:ds=\"http://www.w3.org/2000/09/xmldsig#\">\n\t\t\t\t<ds:SignedInfo>\n\t\t\t\t\t<ds:CanonicalizationMethod Algorithm=\"http://www.w3.org/2001/10/xml-exc-c14n#\"/>\n\t\t\t\t\t<ds:SignatureMethod Algorithm=\"http://www.w3.org/2001/04/xmldsig-more#rsa-sha256\"/>\n\t\t\t\t\t<ds:Reference URI=\"#id123456789\">\n\t\t\t\t\t\t<ds:Transforms>\n\t\t\t\t\t\t\t<ds:Transform Algorithm=\"http://www.w3.org/2000/09/xmldsig#enveloped-signature\"/>\n\t\t\t\t\t\t\t<ds:Transform Algorithm=\"http://www.w3.org/2001/10/xml-exc-c14n#\">\n\t\t\t\t\t\t\t\t<ec:InclusiveNamespaces PrefixList=\"xs\"\n\t\t\t\t\t\t\t\t\txmlns:ec=\"http://www.w3.org/2001/10/xml-exc-c14n#\"/>\n\t\t\t\t\t\t\t\t</ds:Transform>\n\t\t\t\t\t\t\t</ds:Transforms>\n\t\t\t\t\t\t\t<ds:DigestMethod Algorithm=\"http://www.w3.org/2001/04/xmlenc#sha256\"/>\n\t\t\t\t\t\t\t<ds:DigestValue>zpKVkkpKsArieWkH68u72wYJxctieLh+SZbDy/nRcHg=</ds:DigestValue>\n\t\t\t\t\t\t</ds:Reference>\n\t\t\t\t\t</ds:SignedInfo>\n\t\t\t\t\t<ds:SignatureValue>signature</ds:SignatureValue>\n\t\t\t\t\t<ds:KeyInfo>\n\t\t\t\t\t\t<ds:X509Data>\n\t\t\t\t\t\t\t<ds:X509Certificate>signature</ds:X509Certificate>\n\t\t\t\t\t\t</ds:X509Data>\n\t\t\t\t\t</ds:KeyInfo>\n\t\t\t\t</ds:Signature>\n\t\t\t\t<saml2:Subject\n\t\t\t\t\txmlns:saml2=\"urn:oasis:names:tc:SAML:2.0:assertion\">\n\t\t\t\t\t<saml2:NameID Format=\"urn:oasis:names:tc:SAML:2.0:nameid-format:unspecified\">user@example.com</saml2:NameID>\n\t\t\t\t\t<saml2:SubjectConfirmation Method=\"urn:oasis:names:tc:SAML:2.0:cm:bearer\">\n\t\t\t\t\t\t<saml2:SubjectConfirmationData NotOnOrAfter=\"2024-04-04T07:25:04.056Z\" Recipient=\"https://signin.aws.amazon.com/saml\"/>\n\t\t\t\t\t</saml2:SubjectConfirmation>\n\t\t\t\t</saml2:Subject>\n\t\t\t\t<saml2:Conditions NotBefore=\"2024-04-04T07:15:04.056Z\" NotOnOrAfter=\"2024-04-04T07:25:04.056Z\"\n\t\t\t\t\txmlns:saml2=\"urn:oasis:names:tc:SAML:2.0:assertion\">\n\t\t\t\t\t<saml2:AudienceRestriction>\n\t\t\t\t\t\t<saml2:Audience>urn:amazon:webservices</saml2:Audience>\n\t\t\t\t\t</saml2:AudienceRestriction>\n\t\t\t\t</saml2:Conditions>\n\t\t\t\t<saml2:AuthnStatement AuthnInstant=\"2024-04-04T07:20:04.055Z\" SessionIndex=\"id1712215204053.167475779\"\n\t\t\t\t\txmlns:saml2=\"urn:oasis:names:tc:SAML:2.0:assertion\">\n\t\t\t\t\t<saml2:AuthnContext>\n\t\t\t\t\t\t<saml2:AuthnContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport</saml2:AuthnContextClassRef>\n\t\t\t\t\t</saml2:AuthnContext>\n\t\t\t\t</saml2:AuthnStatement>\n\t\t\t\t<saml2:AttributeStatement\n\t\t\t\t\txmlns:saml2=\"urn:oasis:names:tc:SAML:2.0:assertion\">\n\t\t\t\t\t<saml2:Attribute Name=\"https://aws.amazon.com/SAML/Attributes/Role\" NameFormat=\"urn:oasis:names:tc:SAML:2.0:attrname-format:uri\">\n\t\t\t\t\t\t<saml2:AttributeValue\n\t\t\t\t\t\t\txmlns:xs=\"http://www.w3.org/2001/XMLSchema\"\n\t\t\t\t\t\t\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:type=\"xs:string\">arn:aws:iam::123456789:saml-provider/OktaSAMLIdp,arn:aws:iam::123456789:role/OktaAccessRole\n\t\t\t\t\t\t</saml2:AttributeValue>\n\t\t\t\t\t</saml2:Attribute>\n\t\t\t\t\t<saml2:Attribute Name=\"https://aws.amazon.com/SAML/Attributes/RoleSessionName\" NameFormat=\"urn:oasis:names:tc:SAML:2.0:attrname-format:basic\">\n\t\t\t\t\t\t<saml2:AttributeValue\n\t\t\t\t\t\t\txmlns:xs=\"http://www.w3.org/2001/XMLSchema\"\n\t\t\t\t\t\t\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:type=\"xs:string\">user@example.com\n\t\t\t\t\t\t</saml2:AttributeValue>\n\t\t\t\t\t</saml2:Attribute>\n\t\t\t\t\t<saml2:Attribute Name=\"https://aws.amazon.com/SAML/Attributes/SessionDuration\" NameFormat=\"urn:oasis:names:tc:SAML:2.0:attrname-format:basic\">\n\t\t\t\t\t\t<saml2:AttributeValue\n\t\t\t\t\t\t\txmlns:xs=\"http://www.w3.org/2001/XMLSchema\"\n\t\t\t\t\t\t\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:type=\"xs:string\">3600\n\t\t\t\t\t\t</saml2:AttributeValue>\n\t\t\t\t\t</saml2:Attribute>\n\t\t\t\t</saml2:AttributeStatement>\n\t\t\t</saml2:Assertion>\n\t\t</saml2p:Response>\n```\n\n----------------------------------------\n\nTITLE: AWS Secrets Manager ARN Format\nDESCRIPTION: The standard format for an AWS Secrets Manager ARN string, showing the required components including region, account ID, secret name and suffix.\nSOURCE: https://github.com/aws/aws-advanced-jdbc-wrapper/blob/main/README.md#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\narn:aws:secretsmanager:<Region>:<AccountId>:secret:SecretName-6RandomCharacters\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Connection Initialization in Java\nDESCRIPTION: Shows how to set up custom connection initialization logic using the Driver.setConnectionInitFunc method. Useful for running initial SQL queries or setting connection-specific configurations.\nSOURCE: https://github.com/aws/aws-advanced-jdbc-wrapper/blob/main/docs/using-the-jdbc-driver/UsingTheJdbcDriver.md#2025-04-21_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nDriver.setConnectionInitFunc((connection, protocol, hostSpec, props) -> {\n    // Set custom schema for connections to a test-database  \n    if (\"test-database\".equals(props.getProperty(\"database\"))) {\n        connection.setSchema(\"test-database-schema\");\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Documentation Index in Markdown\nDESCRIPTION: Hierarchical markdown structure showing the organization of AWS JDBC Driver documentation, including links to getting started guides, usage documentation, plugin documentation, and development resources.\nSOURCE: https://github.com/aws/aws-advanced-jdbc-wrapper/blob/main/docs/Documentation.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Documentation\n\n- [Getting Started](./GettingStarted.md)\n- [Using the AWS JDBC Driver](/docs/using-the-jdbc-driver/UsingTheJdbcDriver.md)\n  - [Data Sources](/docs/using-the-jdbc-driver/DataSource.md)\n  - [Logging](/docs/using-the-jdbc-driver/UsingTheJdbcDriver.md#logging)\n  - [Telemetry](/docs/using-the-jdbc-driver/Telemetry.md)\n  - [JDBC Wrapper Parameters](/docs/using-the-jdbc-driver/UsingTheJdbcDriver.md#aws-advanced-jdbc-driver-parameters)\n  - [Database Dialects](/docs/using-the-jdbc-driver/DatabaseDialects.md)\n  - [Target Driver Dialects](/docs/using-the-jdbc-driver/TargetDriverDialects.md)\n  - [Plugins](/docs/using-the-jdbc-driver/UsingTheJdbcDriver.md#plugins)\n    - [Failover Plugin](/docs/using-the-jdbc-driver/using-plugins/UsingTheFailoverPlugin.md)\n      - [Failover Configuration Guide](/docs/using-the-jdbc-driver/FailoverConfigurationGuide.md)\n    - [Failover Plugin v2](/docs/using-the-jdbc-driver/using-plugins/UsingTheFailover2Plugin.md)\n    - [Host Monitoring Plugin](/docs/using-the-jdbc-driver/using-plugins/UsingTheHostMonitoringPlugin.md)\n    - [IAM Authentication Plugin](/docs/using-the-jdbc-driver/using-plugins/UsingTheIamAuthenticationPlugin.md)\n    - [AWS Secrets Manager Plugin](/docs/using-the-jdbc-driver/using-plugins/UsingTheAwsSecretsManagerPlugin.md)\n    - [Aurora Connection Tracker Plugin](/docs/using-the-jdbc-driver/using-plugins/UsingTheAuroraConnectionTrackerPlugin.md)\n    - [Driver Metadata Connection Plugin](/docs/using-the-jdbc-driver/using-plugins/UsingTheDriverMetadataConnectionPlugin.md)\n    - [Read Write Splitting Plugin](/docs/using-the-jdbc-driver/using-plugins/UsingTheReadWriteSplittingPlugin.md)\n    - [Federated Authentication Plugin](/docs/using-the-jdbc-driver/using-plugins/UsingTheFederatedAuthPlugin.md)\n    - [Aurora Initial Connection Strategy Plugin](/docs/using-the-jdbc-driver/using-plugins/UsingTheAuroraInitialConnectionStrategyPlugin.md)\n  - [Host Availability Strategy](/docs/using-the-jdbc-driver/HostAvailabilityStrategy.md)\n- [Development Guide](./development-guide/DevelopmentGuide.md)\n  - [Setup](./development-guide/DevelopmentGuide.md#setup)\n  - [Building the AWS JDBC Driver](./development-guide/DevelopmentGuide.md#building-the-aws-advanced-jdbc-driver)\n  - [Testing Overview](./development-guide/DevelopmentGuide.md#testing-overview)\n    - [Performance Tests](./development-guide/DevelopmentGuide.md#performance-tests)\n  - [Running the Tests](./development-guide/DevelopmentGuide.md#running-the-tests)\n  - [Architecture](./development-guide/Architecture.md)\n    - [Plugin Manager](./development-guide/PluginManager.md)\n    - [Loadable Plugins](./development-guide/LoadablePlugins.md)\n    - [Plugin Pipeline Performance Results](./development-guide/PluginPipelinePerformanceResults.md)\n    - [Plugin Service](./development-guide/PluginService.md)\n    - [Pipelines](./development-guide/Pipelines.md)\n    - [Read-Write Splitting Plugin Performance Results](./development-guide/ReadWriteSplittingPluginPerformanceResults.md)\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry for Version 2.3.5\nDESCRIPTION: Release notes documenting added features, fixed issues and changes in version 2.3.5 including DBCP sample code configuration and PostgreSQL explicit locking improvements.\nSOURCE: https://github.com/aws/aws-advanced-jdbc-wrapper/blob/main/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## [2.3.5] - 2024-03-14\n\n### :magic_wand: Added\n- Sample code configuring the AWS JDBC Driver with DBCP ([PR #930](https://github.com/awslabs/aws-advanced-jdbc-wrapper/pull/930)).\n\n### :crab: Changed\n- Fix issue with deadlock while using prepared transactions and PostgreSQL Explicit Locking ([PR #918](https://github.com/awslabs/aws-advanced-jdbc-wrapper/pull/918)).\n- Removed `ConnectionStringHostListProvider#identifyConnection` since it is not used ([PR #920](https://github.com/awslabs/aws-advanced-jdbc-wrapper/pull/920)).\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Session State Handlers in Java for AWS JDBC Driver\nDESCRIPTION: Methods to set and reset custom handlers for session state management in the AWS JDBC Driver. These methods allow extending or replacing existing logic for resetting and transferring session states.\nSOURCE: https://github.com/aws/aws-advanced-jdbc-wrapper/blob/main/docs/using-the-jdbc-driver/SessionState.md#2025-04-21_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nsetResetSessionStateOnCloseFunc\nresetResetSessionStateOnCloseFunc\nsetTransferSessionStateOnSwitchFunc\nresetTransferSessionStateOnSwitchFunc\n```\n\n----------------------------------------\n\nTITLE: Running Integration Tests on macOS\nDESCRIPTION: Command to run all integration tests on macOS using Gradle. This command executes tests for all environments without using parallel execution or the Gradle daemon.\nSOURCE: https://github.com/aws/aws-advanced-jdbc-wrapper/blob/main/docs/development-guide/IntegrationTests.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew --no-parallel --no-daemon test-all-environments\n```\n\n----------------------------------------\n\nTITLE: Running Integration Tests on Windows\nDESCRIPTION: Command to run all integration tests on Windows using Gradle. This command executes tests for all environments without using parallel execution or the Gradle daemon.\nSOURCE: https://github.com/aws/aws-advanced-jdbc-wrapper/blob/main/docs/development-guide/IntegrationTests.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncmd /c ./gradlew --no-parallel --no-daemon test-all-environments\n```\n\n----------------------------------------\n\nTITLE: Simulating Exceptions on Existing Connections with AWS JDBC Wrapper Developer Plugin\nDESCRIPTION: This snippet shows how to inject exceptions into methods of an already established connection. After unwrapping the connection to access the ExceptionSimulator interface, developers can specify which method should throw an exception on its next call, allowing for targeted exception testing.\nSOURCE: https://github.com/aws/aws-advanced-jdbc-wrapper/blob/main/docs/using-the-jdbc-driver/using-plugins/UsingTheDeveloperPlugin.md#2025-04-21_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nfinal Properties properties = new Properties();\nproperties.setProperty(PropertyDefinition.PLUGINS.name, \"dev\");\n\nConnection connection = DriverManager.getConnection(\"jdbc:aws-wrapper:postgresql://db-host/\", properties);\n\nfinal ConnectionWrapper connectionWrapper = (ConnectionWrapper) connection;\nfinal ExceptionSimulator simulator = connectionWrapper.unwrap(ExceptionSimulator.class);\nfinal RuntimeException testExceptionToRaise = new RuntimeException(\"test\");\nsimulator.raiseExceptionOnNextCall(\"Connection.createStatement\", testExceptionToRaise);\n\nfinal Statement statement = connection.createStatement(); // that throws the exception\n\nfinal Statement anotherStatement = connection.createStatement(); // it goes normal with no exception\n```\n\n----------------------------------------\n\nTITLE: Running AWS Advanced JDBC Wrapper Benchmarks (Shell)\nDESCRIPTION: Command to execute the benchmarks using the generated JAR file. The version number in the filename may need to be adjusted based on the actual output.\nSOURCE: https://github.com/aws/aws-advanced-jdbc-wrapper/blob/main/benchmarks/README.md#2025-04-21_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\njava -jar build/libs/benchmarks-2.5.5-jmh.jar\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests (Mac/Unix)\nDESCRIPTION: Command to run unit tests for the AWS JDBC Driver on Mac/Unix systems.\nSOURCE: https://github.com/aws/aws-advanced-jdbc-wrapper/blob/main/docs/development-guide/DevelopmentGuide.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew test\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Configuration Profile Based on a Preset\nDESCRIPTION: Creates a new custom configuration profile called 'myNewProfile' based on the 'A2' configuration preset, then applies a custom database dialect to it, and sets it as the active profile. This demonstrates how to customize built-in presets.\nSOURCE: https://github.com/aws/aws-advanced-jdbc-wrapper/blob/main/docs/using-the-jdbc-driver/ConfigurationPresets.md#2025-04-21_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n// Create a new configuration profile \"myNewProfile\" based on \"A2\" configuration preset\nConfigurationProfileBuilder.from(\"A2\")\n    .withName(\"myNewProfile\")\n    .withDialect(new CustomDatabaseDialect())\n.buildAndSet();\n\nproperties.setProperty(\"wrapperProfileName\", \"myNewProfile\");\n```\n\n----------------------------------------\n\nTITLE: Authentication Response JSON from Okta for AWS Advanced JDBC Wrapper\nDESCRIPTION: JSON response from an Okta authentication endpoint containing a session token, user profile information, and hypermedia links. The response includes expiration time, user details, and action links for session management.\nSOURCE: https://github.com/aws/aws-advanced-jdbc-wrapper/blob/main/wrapper/src/test/resources/okta/session.txt#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\"expiresAt\":\"2024-04-04T06:30:59.000Z\",\"status\":\"SUCCESS\",\"sessionToken\":\"20111sTEtWA8_kJzLH-JQ87ScdVRZOa6NcaX9-letters\",\"_embedded\":{\"user\":{\"id\":\"someId\",\"passwordChanged\":\"2024-03-27T05:06:25.000Z\",\"profile\":{\"login\":\"user@example.com\",\"firstName\":\"test\",\"lastName\":\"test\",\"locale\":\"en_US\",\"timeZone\":\"America/Los_Angeles\"}}},\"_links\":{\"cancel\":{\"href\":\"https://example.okta.com/api/v1/authn/cancel\",\"hints\":{\"allow\":[\"POST\"]}}}}\n```\n\n----------------------------------------\n\nTITLE: Setting Configuration Preset in Java Properties\nDESCRIPTION: Sets the 'A2' configuration preset name using the wrapperProfileName property. This is the basic way to apply a built-in configuration preset to your JDBC connection.\nSOURCE: https://github.com/aws/aws-advanced-jdbc-wrapper/blob/main/docs/using-the-jdbc-driver/ConfigurationPresets.md#2025-04-21_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nproperties.setProperty(\"wrapperProfileName\", \"A2\");\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Target Driver Dialect in Java\nDESCRIPTION: This code snippet demonstrates how to set a custom target driver dialect for the AWS JDBC Driver using the TargetDriverDialectManager class. It creates an instance of a custom dialect and sets it using the setCustomDialect method.\nSOURCE: https://github.com/aws/aws-advanced-jdbc-wrapper/blob/main/docs/using-the-jdbc-driver/TargetDriverDialects.md#2025-04-21_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nTargetDriverDialect myTargetDriverDialect = new CustomTargetDriverDialect();\nTargetDriverDialectManager.setCustomDialect(myTargetDriverDialect);\n```\n\n----------------------------------------\n\nTITLE: Setting up Gradle Dependencies for AWS JDBC Driver with Vert.x\nDESCRIPTION: Configures the necessary dependencies in the build.gradle.kts file, including Vert.x components, PostgreSQL driver, and the AWS Advanced JDBC wrapper.\nSOURCE: https://github.com/aws/aws-advanced-jdbc-wrapper/blob/main/examples/VertxExample/README.md#2025-04-21_snippet_0\n\nLANGUAGE: gradle\nCODE:\n```\ndependencies {\n    implementation(platform(\"io.vertx:vertx-stack-depchain:4.4.2\"))\n    implementation(\"io.vertx:vertx-core\")\n    implementation(\"io.vertx:vertx-config\")\n    implementation(\"io.vertx:vertx-jdbc-client\")\n    implementation(\"io.vertx:vertx-web\")\n    implementation(\"com.fasterxml.jackson.core:jackson-databind:2.12.7.1\")\n    implementation(\"org.postgresql:postgresql:42.5.4\")\n    implementation(\"software.amazon.jdbc:aws-advanced-jdbc-wrapper:latest\")\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradle Dependency for AWS JDBC Wrapper Snapshot\nDESCRIPTION: Gradle dependency configuration for using a snapshot version of the AWS Advanced JDBC Wrapper driver.\nSOURCE: https://github.com/aws/aws-advanced-jdbc-wrapper/blob/main/docs/using-the-jdbc-driver/UsingTheJdbcDriver.md#2025-04-21_snippet_9\n\nLANGUAGE: gradle\nCODE:\n```\ndependencies {\n    implementation(files(\"path-to-snapshot-jar\"))\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Example POJO Class in Java\nDESCRIPTION: Defines a simple Example POJO class with status and id fields, getters, setters, and a toString method. This model is used to map database results in the Spring application.\nSOURCE: https://github.com/aws/aws-advanced-jdbc-wrapper/blob/main/examples/SpringWildflyExample/README.md#2025-04-21_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npackage example;\n\npublic class Example {\n\n  int status;\n  int id;\n\n  public Example(int status, int id) {\n    this.status = status;\n    this.id = id;\n  }\n\n  public int getStatus() {\n    return status;\n  }\n\n  public void setStatus(int status) {\n    this.status = status;\n  }\n\n  public int getId() {\n    return id;\n  }\n\n  public void setId(int id) {\n    this.id = id;\n  }\n\n  @Override\n  public String toString() {\n    return \"Example{\" +\n        \"status=\" + status +\n        \", id='\" + id +\n        '}\";\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests (Windows)\nDESCRIPTION: Command to run unit tests for the AWS JDBC Driver on Windows systems.\nSOURCE: https://github.com/aws/aws-advanced-jdbc-wrapper/blob/main/docs/development-guide/DevelopmentGuide.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew test\n```\n\n----------------------------------------\n\nTITLE: Building AWS JDBC Driver with Tests (Windows)\nDESCRIPTION: Command to build the AWS JDBC Driver and run tests on Windows systems.\nSOURCE: https://github.com/aws/aws-advanced-jdbc-wrapper/blob/main/docs/development-guide/DevelopmentGuide.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngradlew build\n```\n\n----------------------------------------\n\nTITLE: Setting up HTTP Routing in Vert.x\nDESCRIPTION: Creates a router to handle HTTP requests and maps the '/id' path to a handler method that returns database instance information.\nSOURCE: https://github.com/aws/aws-advanced-jdbc-wrapper/blob/main/examples/VertxExample/README.md#2025-04-21_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nRouter router = Router.router(vertx);\nrouter.get(\"/id\").handler(this::getCurrentInstance);\n```\n\n----------------------------------------\n\nTITLE: Displaying Note on AWS Java SDK RDS Dependency Size\nDESCRIPTION: This markdown snippet shows a note about the size of the AWS Java SDK RDS v2.x dependency and suggests alternatives for users with limited disk space.\nSOURCE: https://github.com/aws/aws-advanced-jdbc-wrapper/blob/main/docs/using-the-jdbc-driver/using-plugins/UsingTheOktaAuthPlugin.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n> [!NOTE]\\\n> Since [AWS Java SDK RDS v2.x](https://central.sonatype.com/artifact/software.amazon.awssdk/rds) size is around 5.4Mb (22Mb including all RDS SDK dependencies), some users may experience difficulties using the plugin due to limited available disk size.\n> In such cases, the [AWS Java SDK RDS v2.x](https://central.sonatype.com/artifact/software.amazon.awssdk/rds) dependency may be replaced with just two dependencies which have a smaller footprint (around 300Kb in total):\n> - [software.amazon.awssdk:http-client-spi](https://central.sonatype.com/artifact/software.amazon.awssdk/http-client-spi)\n> - [software.amazon.awssdk:auth](https://central.sonatype.com/artifact/software.amazon.awssdk/auth)\n>\n> It's recommended to use [AWS Java SDK RDS v2.x](https://central.sonatype.com/artifact/software.amazon.awssdk/rds) when it's possible.\n```\n\n----------------------------------------\n\nTITLE: Building AWS Advanced JDBC Wrapper Benchmarks (Shell)\nDESCRIPTION: Command to build the benchmarks using Gradle. This generates a JAR file in the build/libs directory.\nSOURCE: https://github.com/aws/aws-advanced-jdbc-wrapper/blob/main/benchmarks/README.md#2025-04-21_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n../gradlew jmhJar\n```\n\n----------------------------------------\n\nTITLE: Installing rds_tools Extension in PostgreSQL for RDS Multi-AZ Cluster\nDESCRIPTION: This SQL command creates the rds_tools extension in PostgreSQL, which is required for the AWS JDBC Driver to access topology information in RDS Multi-AZ Clusters. This step is necessary for PostgreSQL versions 13.12, 14.9, 15.4, or higher, starting from revision R3.\nSOURCE: https://github.com/aws/aws-advanced-jdbc-wrapper/blob/main/docs/using-the-jdbc-driver/SupportForRDSMultiAzDBCluster.md#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCREATE EXTENSION rds_tools;\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Connection Provider in Java\nDESCRIPTION: Demonstrates how to set a custom ConnectionProvider for the JDBC driver. This is used to customize the connection creation process in the connect pipeline.\nSOURCE: https://github.com/aws/aws-advanced-jdbc-wrapper/blob/main/docs/development-guide/Pipelines.md#2025-04-21_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nDriver.setCustomConnectionProvider(ConnectionProvider)\n```\n\n----------------------------------------\n\nTITLE: Initializing Spring Boot Application in Java\nDESCRIPTION: Creates the main Spring Boot application class with the @SpringBootApplication annotation and a main method to run the application.\nSOURCE: https://github.com/aws/aws-advanced-jdbc-wrapper/blob/main/examples/SpringBootHikariExample/README.md#2025-04-21_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npackage software.amazon.SpringBootHikariExample;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n@SpringBootApplication\npublic class SpringBootHikariExampleApplication {\n  public static void main(String[] args) {\n    SpringApplication.run(SpringBootHikariExampleApplication.class, args);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Spring Boot Application Class\nDESCRIPTION: Main application class that bootstraps the Spring Boot application with basic configuration.\nSOURCE: https://github.com/aws/aws-advanced-jdbc-wrapper/blob/main/examples/SpringTxFailoverExample/README.md#2025-04-21_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npackage example;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n@SpringBootApplication\npublic class SpringTxFailoverExampleApplication {\n  public static void main(String[] args) {\n    SpringApplication.run(SpringTxFailoverExampleApplication.class, args);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Service Layer\nDESCRIPTION: Service class implementing business logic with transaction and retry capabilities.\nSOURCE: https://github.com/aws/aws-advanced-jdbc-wrapper/blob/main/examples/SpringTxFailoverExample/README.md#2025-04-21_snippet_6\n\nLANGUAGE: java\nCODE:\n```\npackage example;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.retry.support.RetrySynchronizationManager;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\n@Service\n@Transactional\npublic class ExampleService {\n  private final Logger logger = LoggerFactory.getLogger(this.getClass());\n\n  @Autowired\n  private ExampleDao exampleDao;\n\n  public List<Example> get() {\n    logger.info(\"Retry Number : {}\", RetrySynchronizationManager.getContext().getRetryCount());\n    List<Map<String, Object>> rows = exampleDao.getAll();\n    List<Example> examples = new ArrayList<>();\n    for (Map row : rows) {\n      Example obj = new Example();\n      obj.setId(((Integer) row.get(\"ID\")));\n      obj.setStatus((Integer) row.get(\"STATUS\"));\n      examples.add(obj);\n    }\n    return examples;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Example Domain Model\nDESCRIPTION: Domain model class representing the Example entity with ID and status fields, including getters, setters and toString method.\nSOURCE: https://github.com/aws/aws-advanced-jdbc-wrapper/blob/main/examples/SpringTxFailoverExample/README.md#2025-04-21_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npackage example;\n\npublic class Example {\n\n  private int id;\n\n  private int status;\n\n  public Example() {\n    super();\n  }\n\n  public int getId() {\n    return id;\n  }\n\n  public void setId(int id) {\n    this.id = id;\n  }\n\n  public int getStatus() {\n    return status;\n  }\n\n  public void setStatus(int name) {\n    this.status = name;\n  }\n\n  @Override\n  public String toString() {\n    return String.format(\"Example [id=%s, status=%s]\", id, status);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Note on AWS IAM Database Authentication Requirement\nDESCRIPTION: This markdown snippet shows a note explaining that AWS IAM database authentication is required to use the Okta Authentication Plugin, and briefly describes the authentication process.\nSOURCE: https://github.com/aws/aws-advanced-jdbc-wrapper/blob/main/docs/using-the-jdbc-driver/using-plugins/UsingTheOktaAuthPlugin.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n> [!NOTE]\\\n> AWS IAM database authentication is needed to use the Okta Authentication Plugin. This is because after the plugin\n> acquires SAML assertion from the identity provider, the SAML Assertion is then used to acquire an AWS IAM token. The AWS\n> IAM token is then subsequently used to access the database.\n```\n\n----------------------------------------\n\nTITLE: Driver Metadata Connection Plugin Configuration Table\nDESCRIPTION: Configuration table showing the wrapperDriverName parameter that can be used to override the default driver name returned by DatabaseMetaData#getDriverName method.\nSOURCE: https://github.com/aws/aws-advanced-jdbc-wrapper/blob/main/docs/using-the-jdbc-driver/using-plugins/UsingTheDriverMetadataConnectionPlugin.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Parameter                | Value  | Required | Description                                             | Example            | Default Value |\n|--------------------------|:------:|:--------:|:--------------------------------------------------------|:-------------------|---------------|\n| `wrapperDriverName` | String |   Yes    | Override this value to return a specific driver name for the DatabaseMetaData#getDriverName method. | `CustomDriverName` | `Amazon Web Services (AWS) Advanced JDBC Wrapper`        |\n```\n\n----------------------------------------\n\nTITLE: Referencing Limitless PostgreSQL Example in Java\nDESCRIPTION: This snippet provides a reference to a sample Java file demonstrating the usage of the Limitless Connection Plugin with PostgreSQL. The example is located in the project's examples directory.\nSOURCE: https://github.com/aws/aws-advanced-jdbc-wrapper/blob/main/docs/using-the-jdbc-driver/using-plugins/UsingTheLimitlessConnectionPlugin.md#2025-04-21_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nLimitlessPostgresqlExample.java\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Credentials Provider in Java JDBC Wrapper\nDESCRIPTION: This file shows how to configure AWS credentials provider for authentication plugins. It uses DefaultCredentialsProvider by default and supports custom credential provider implementation through AwsCredentialsManager.setCustomHandler method.\nSOURCE: https://github.com/aws/aws-advanced-jdbc-wrapper/blob/main/docs/using-the-jdbc-driver/custom-configuration/AwsCredentialsConfiguration.md#2025-04-21_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nAwsCredentialsManager.setCustomHandler(() -> {\n    // Custom credentials provider logic here\n    return customCredentialsProvider;\n});\n```\n\n----------------------------------------\n\nTITLE: Using @Transactional(readOnly = True) Annotation in Java\nDESCRIPTION: This snippet demonstrates the use of the @Transactional(readOnly = True) annotation in Java. It's used to mark methods that perform read-only operations, allowing the system to optimize database access.\nSOURCE: https://github.com/aws/aws-advanced-jdbc-wrapper/blob/main/docs/using-the-jdbc-driver/using-plugins/UsingTheReadWriteSplittingPlugin.md#2025-04-21_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n@Transactional(readOnly = True)\n```\n\n----------------------------------------\n\nTITLE: Configuring Hibernate Dialect for PostgreSQL\nDESCRIPTION: YAML configuration to set the Hibernate dialect for PostgreSQL in a Spring Boot application.\nSOURCE: https://github.com/aws/aws-advanced-jdbc-wrapper/blob/main/examples/SpringHibernateExample/README.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nspring:\n  jpa:\n    properties:\n      hibernate:\n        dialect: org.hibernate.dialect.PostgreSQLDialect\n```\n\n----------------------------------------\n\nTITLE: Enabling AWS JDBC Driver Logging\nDESCRIPTION: Optional YAML configuration to enable TRACE level logging for the AWS JDBC Driver in a Spring Boot application.\nSOURCE: https://github.com/aws/aws-advanced-jdbc-wrapper/blob/main/examples/SpringHibernateExample/README.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nlogging:\n  level:\n    software.amazon.jdbc: TRACE\n```\n\n----------------------------------------\n\nTITLE: Configuring Logging for AWS JDBC Driver\nDESCRIPTION: This optional YAML configuration enables logging for the AWS JDBC Driver, which can be useful for debugging and monitoring the driver's behavior.\nSOURCE: https://github.com/aws/aws-advanced-jdbc-wrapper/blob/main/examples/SpringHibernateBalancedReaderTwoDataSourceExample/README.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nlogging:\n   level:\n     software:\n       amazon:\n         jdbc: INFO\n         jdbc.states: INFO\n     example: TRACE\n```\n\n----------------------------------------\n\nTITLE: Enabling AWS JDBC Driver Logging\nDESCRIPTION: Optional YAML configuration to enable logging for the AWS JDBC Driver and application components.\nSOURCE: https://github.com/aws/aws-advanced-jdbc-wrapper/blob/main/examples/SpringHibernateBalancedReaderOneDataSourceExample/README.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nlogging:\n   level:\n     software:\n       amazon:\n         jdbc: INFO\n         jdbc.states: INFO\n     example: TRACE\n```\n\n----------------------------------------\n\nTITLE: Configuring Java Util Logger using Properties File for AWS JDBC Driver\nDESCRIPTION: Example of a properties file configuration for logging with the AWS JDBC Driver. Sets logging levels for different components and configures console handler.\nSOURCE: https://github.com/aws/aws-advanced-jdbc-wrapper/blob/main/docs/using-the-jdbc-driver/UsingTheJdbcDriver.md#2025-04-21_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\n# Possible values for log level (from most detailed to less detailed): FINEST, FINER, FINE, CONFIG, INFO, WARNING, SEVERE\n.level=INFO\nhandlers=java.util.logging.ConsoleHandler\njava.util.logging.ConsoleHandler.level=ALL\nsoftware.amazon.jdbc.Driver.level=FINER\nsoftware.amazon.jdbc.plugin.level=FINER\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry for Version 2.3.4\nDESCRIPTION: Release notes documenting added features, fixed issues and changes in version 2.3.4 including new documentation, Spring Framework examples, and various bug fixes.\nSOURCE: https://github.com/aws/aws-advanced-jdbc-wrapper/blob/main/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## [2.3.4] - 2024-03-01\n### :magic_wand: Added\n- Documentation:\n  - Bundled Uber Jar for Federated Authentication.\n  - Using the Read Write Splitting Plugin's internal connection pool with Spring applications.\n- Spring Framework application code examples with load balanced access\n- New configuration preset `SF_` optimized for Spring Framework applications\n- Lightweight alternative for IAM token generator\n\n### :bug: Fixed\n- Fixes to session state transfer\n- Enhanced Host Monitoring Plugin (EFM) v2 plugin to use `ConcurrentHashMap`\n- Move lock location and skip executing `Statement.getConnection`\n- Remove Telemetry trace associated with a Monitor thread\n\n### :crab: Changed\n- HostSelector implementations to take into account HostAvailability\n- Reduced the number of Regular Expression checks\n- HostSpec class to not use a default lastUpdateTime\n- Moved Reader Selection Strategies documentation\n```\n\n----------------------------------------\n\nTITLE: Cloning AWS JDBC Driver Repository\nDESCRIPTION: Command to clone the AWS JDBC Driver repository from GitHub.\nSOURCE: https://github.com/aws/aws-advanced-jdbc-wrapper/blob/main/docs/development-guide/DevelopmentGuide.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/awslabs/aws-advanced-jdbc-wrapper.git\n```\n\n----------------------------------------\n\nTITLE: Building AWS JDBC Driver (Mac/Unix, Skip Tests)\nDESCRIPTION: Command to build the AWS JDBC Driver on Mac/Unix systems without running tests.\nSOURCE: https://github.com/aws/aws-advanced-jdbc-wrapper/blob/main/docs/development-guide/DevelopmentGuide.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew build -x test\n```\n\n----------------------------------------\n\nTITLE: Building AWS JDBC Driver (Windows, Skip Tests)\nDESCRIPTION: Command to build the AWS JDBC Driver on Windows systems without running tests.\nSOURCE: https://github.com/aws/aws-advanced-jdbc-wrapper/blob/main/docs/development-guide/DevelopmentGuide.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngradlew build -x test\n```\n\n----------------------------------------\n\nTITLE: Building AWS JDBC Driver with Tests (Mac/Unix)\nDESCRIPTION: Command to build the AWS JDBC Driver and run tests on Mac/Unix systems.\nSOURCE: https://github.com/aws/aws-advanced-jdbc-wrapper/blob/main/docs/development-guide/DevelopmentGuide.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew build\n```\n\n----------------------------------------\n\nTITLE: Adding AWS JDBC Driver as Gradle Dependency\nDESCRIPTION: Gradle configuration to add the AWS JDBC Driver as a dependency in a Gradle project's build.gradle file.\nSOURCE: https://github.com/aws/aws-advanced-jdbc-wrapper/blob/main/docs/GettingStarted.md#2025-04-21_snippet_4\n\nLANGUAGE: gradle\nCODE:\n```\ndependencies {\n    implementation group: 'software.amazon.jdbc', name: 'aws-advanced-jdbc-wrapper', version: '2.5.5'\n}\n```"
  }
]