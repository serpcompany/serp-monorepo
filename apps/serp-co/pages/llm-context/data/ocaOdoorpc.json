[
  {
    "owner": "oca",
    "repo": "odoorpc",
    "content": "TITLE: Connecting to Odoo Online (SaaS) Instance with Python\nDESCRIPTION: Code demonstrates how to establish a connection to an Odoo Online (SaaS) instance using the jsonrpc+ssl protocol on port 443. This is necessary when connecting to cloud-hosted Odoo instances.\nSOURCE: https://github.com/oca/odoorpc/blob/master/doc/source/faq.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> import odoorpc\n>>> odoo = odoorpc.ODOO('foobar.my.odoo.com', protocol='jsonrpc+ssl', port=443)\n>>> odoo.version\n'8.saas~5'\n```\n\n----------------------------------------\n\nTITLE: Basic OdooRPC Usage Example in Python\nDESCRIPTION: Demonstrates core functionality of OdooRPC including server connection, database listing, login, user operations, raw queries, model methods, and record updates. Shows how to interact with Odoo's data models and perform CRUD operations.\nSOURCE: https://github.com/oca/odoorpc/blob/master/README.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport odoorpc\n\n# Prepare the connection to the server\nodoo = odoorpc.ODOO('localhost', port=8069)\n\n# Check available databases\nprint(odoo.db.list())\n\n# Login\nodoo.login('db_name', 'user', 'passwd')\n\n# Current user\nuser = odoo.env.user\nprint(user.name)            # name of the user connected\nprint(user.company_id.name) # the name of its company\n\n# Simple 'raw' query\nuser_data = odoo.execute('res.users', 'read', [user.id])\nprint(user_data)\n\n# Use all methods of a model\nif 'sale.order' in odoo.env:\n    Order = odoo.env['sale.order']\n    order_ids = Order.search([])\n    for order in Order.browse(order_ids):\n        print(order.name)\n        products = [line.product_id.name for line in order.order_line]\n        print(products)\n\n# Update data through a record\nuser.name = \"Brian Jones\"\n```\n\n----------------------------------------\n\nTITLE: Connecting to Odoo Server and Performing Basic Operations with OdooRPC in Python\nDESCRIPTION: This code snippet demonstrates how to use OdooRPC to connect to an Odoo server, check available databases, login, access user information, execute raw queries, perform model operations, and update data. It showcases the main functionality of the package.\nSOURCE: https://github.com/oca/odoorpc/blob/master/doc/source/index.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport odoorpc\n\n# Prepare the connection to the server\nodoo = odoorpc.ODOO('localhost', port=8069)\n\n# Check available databases\nprint(odoo.db.list())\n\n# Login\nodoo.login('db_name', 'user', 'passwd')\n\n# Current user\nuser = odoo.env.user\nprint(user.name)            # name of the user connected\nprint(user.company_id.name) # the name of its company\n\n# Simple 'raw' query\nuser_data = odoo.execute('res.users', 'read', [user.id])\nprint(user_data)\n\n# Use all methods of a model\nif 'sale.order' in odoo.env:\n    Order = odoo.env['sale.order']\n    order_ids = Order.search([])\n    for order in Order.browse(order_ids):\n        print(order.name)\n        products = [line.product_id.name for line in order.order_line]\n        print(products)\n\n# Update data through a record\nuser.name = \"Brian Jones\"\n```\n\n----------------------------------------\n\nTITLE: Installing an Odoo Module via OdooRPC\nDESCRIPTION: Example showing how to search for and install the 'purchase' module using OdooRPC. This operation requires administrator privileges and demonstrates chaining model proxy methods.\nSOURCE: https://github.com/oca/odoorpc/blob/master/doc/source/tuto_rpc_queries.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> Module = odoo.env['ir.module.module']\n>>> module_ids = Module.search([('name', '=', 'purchase')])\n>>> Module.button_immediate_install(module_ids)\n```\n\n----------------------------------------\n\nTITLE: Authenticating to Odoo Database with OdooRPC\nDESCRIPTION: Uses the login method to authenticate to an Odoo database with username and password credentials. This establishes a cookie-based authentication for subsequent requests requiring user authentication.\nSOURCE: https://github.com/oca/odoorpc/blob/master/doc/source/tuto_login.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> odoo.login('tutorial', 'admin', 'password')\n```\n\n----------------------------------------\n\nTITLE: Accessing Odoo Environment Information after Login\nDESCRIPTION: Demonstrates how to access various environment properties after successful authentication. This includes retrieving the database name, context dictionary, user ID, language settings, user name, and company information.\nSOURCE: https://github.com/oca/odoorpc/blob/master/doc/source/tuto_login.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> odoo.env.db\n'tutorial'\n>>> odoo.env.context\n{'lang': 'fr_FR', 'tz': 'Europe/Brussels', 'uid': 1}\n>>> odoo.env.uid\n1\n>>> odoo.env.lang\n'fr_FR'\n>>> odoo.env.user.name              # name of the user\n'Mitchell Admin'\n>>> odoo.env.user.company_id.name   # the name of its company\n'YourCompany'\n```\n\n----------------------------------------\n\nTITLE: Batch Updates with write() Method\nDESCRIPTION: Updates multiple fields in a single RPC query using the write() method, which is more efficient than updating fields individually.\nSOURCE: https://github.com/oca/odoorpc/blob/master/doc/source/tuto_browse_update.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> partner.write({'name': \"MyContact\", 'website': 'http://example.net'})    # one RPC query\n```\n\n----------------------------------------\n\nTITLE: Browsing Single and Multiple Records with OdooRPC\nDESCRIPTION: Demonstrates how to fetch one or more records using the browse method on a model proxy, which returns recordset objects that can be easily manipulated.\nSOURCE: https://github.com/oca/odoorpc/blob/master/doc/source/tuto_browse.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> Partner = odoo.env['res.partner']\n>>> partner = Partner.browse(1)     # fetch one record, partner ID = 1\n>>> partner\nRecordset('res.partner', [1])\n>>> partner.name\n'YourCompany'\n>>> for partner in Partner.browse([1, 3]):  # fetch several records\n>>>     print(partner.name)\n...\nYourCompany\nMitchell Admin\n```\n\n----------------------------------------\n\nTITLE: Adapting Scripts to Different Odoo Versions using Version Comparison\nDESCRIPTION: Script demonstrating how to use the version comparison function to execute different code paths depending on the connected Odoo server version. The v() function enables semantic version comparison.\nSOURCE: https://github.com/oca/odoorpc/blob/master/doc/source/faq.rst#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport odoorpc\nfrom odoorpc.tools import v\n\nfor session in odoorpc.ODOO.list():\n    odoo = odoorpc.ODOO.load(session)\n    if v(odoo.version) < v('10.0'):\n        pass  # do some stuff\n    else:\n        pass  # do something else\n```\n\n----------------------------------------\n\nTITLE: Basic Record Update in OdooRPC\nDESCRIPTION: Demonstrates how to create a partner record and update its name. By default, changes are automatically sent to the server with each assignment operation.\nSOURCE: https://github.com/oca/odoorpc/blob/master/doc/source/tuto_browse_update.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> Partner = odoo.env['res.partner']\n>>> partner_id = Partner.create({'name': \"Contact Test\"})\n>>> partner = Partner.browse(partner_id)\n>>> partner.name = \"MyContact\"\n```\n\n----------------------------------------\n\nTITLE: Updating Basic Field Types in OdooRPC\nDESCRIPTION: Shows how to update basic field types like Char, Float, Integer, Boolean, Text, and Binary fields with a simple assignment operation.\nSOURCE: https://github.com/oca/odoorpc/blob/master/doc/source/tuto_browse_update.rst#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> partner.name = \"New Name\"\n```\n\n----------------------------------------\n\nTITLE: Updating Global Context in OdooRPC\nDESCRIPTION: Updates the global environment context to set language and timezone. All subsequent queries will use these context values for language localization and timezone calculations.\nSOURCE: https://github.com/oca/odoorpc/blob/master/doc/source/tuto_context.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> odoo.env.context['lang'] = 'en_US'\n>>> odoo.env.context['tz'] = 'Europe/Paris'\n```\n\n----------------------------------------\n\nTITLE: Updating Many2one Fields in OdooRPC\nDESCRIPTION: Shows how to update many2one relation fields using either an ID or a record object, with validation to ensure proper data integrity.\nSOURCE: https://github.com/oca/odoorpc/blob/master/doc/source/tuto_browse_update.rst#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n>>> partner.parent_id = 1                   # with an ID\n>>> partner.parent_id = Partner.browse(1)   # with a record object\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Class Methods vs Instance Methods in OdooRPC\nDESCRIPTION: This snippet demonstrates the difference between calling class methods directly on a model versus instance methods on record objects. It shows how to use browse() to get record instances and explains why certain method calls might fail depending on context.\nSOURCE: https://github.com/oca/odoorpc/blob/master/doc/source/tuto_browse_methods.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> User = odoo.env['res.users']\n>>> User.write([6], {'name': \"Dupont D.\"})  # Using the class method\nTrue\n>>> user = User.browse(6)\n>>> user.write({'name': \"Dupont D.\"})       # Using the instance method\n>>> user.mapped('company_id.partner_id.child_ids.name') # Another use of instance method \n['Chester Reed', 'Dwayne Newman']\n```\n\n----------------------------------------\n\nTITLE: Initializing OdooRPC Connection\nDESCRIPTION: Establishes a connection to an Odoo server using OdooRPC library. Demonstrates how to create an ODOO instance with server host, protocol, and port configuration.\nSOURCE: https://github.com/oca/odoorpc/blob/master/doc/source/tuto_create_db.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> import odoorpc\n>>> odoo = odoorpc.ODOO('localhost', 'jsonrpc', 8069)\n```\n\n----------------------------------------\n\nTITLE: Updating One2many/Many2many Fields with Records\nDESCRIPTION: Demonstrates how to update one2many and many2many fields by directly assigning a recordset of related objects.\nSOURCE: https://github.com/oca/odoorpc/blob/master/doc/source/tuto_browse_update.rst#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n>>> groups = odoo.env['res.groups'].browse([8, 5, 6, 4])\n>>> user.groups_id = groups\n```\n\n----------------------------------------\n\nTITLE: Creating New Odoo Database\nDESCRIPTION: Creates a new Odoo database with specified parameters including super admin password, database name, demo data, language, and admin password settings.\nSOURCE: https://github.com/oca/odoorpc/blob/master/doc/source/tuto_create_db.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> odoo.db.create('super_password', 'tutorial', demo=True, lang='fr_FR', admin_password='password')\n```\n\n----------------------------------------\n\nTITLE: Navigating Record Relationships in OdooRPC\nDESCRIPTION: Shows how to explore relationships between records by accessing relation fields, which automatically generate the related records on demand.\nSOURCE: https://github.com/oca/odoorpc/blob/master/doc/source/tuto_browse.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> partner = Partner.browse(1)\n>>> for child in partner.child_ids:\n...     print(\"%s (%s)\" % (child.name, child.parent_id.name))\n...\nChester Reed (YourCompany)\nDwayne Newman (YourCompany)\n```\n\n----------------------------------------\n\nTITLE: Updating Product Translations with Context\nDESCRIPTION: Demonstrates how to update translations for different languages using context. The example shows accessing a product record first in English, then creating a French context version to update the French translation.\nSOURCE: https://github.com/oca/odoorpc/blob/master/doc/source/tuto_context.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> Product = odoo.env['product.product']\n>>> product_en = Product.browse(1)\n>>> product_en.env.lang\n'en_US'\n>>> product_en.name = \"My product\"  # Update the english translation\n>>> product_fr = product_en.with_context(lang='fr_FR')\n>>> product_fr.env.lang\n'fr_FR'\n>>> product_fr.name = \"Mon produit\" # Update the french translation\n```\n\n----------------------------------------\n\nTITLE: Manual Commit Updates in OdooRPC\nDESCRIPTION: Demonstrates how to disable auto-commit mode, make multiple field updates, and then manually commit the changes with a single RPC call.\nSOURCE: https://github.com/oca/odoorpc/blob/master/doc/source/tuto_browse_update.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> odoo.config['auto_commit'] = False\n>>> partner.name = \"MyContact\"\n>>> partner.website = 'http://example.net'\n>>> partner.env.commit()    # one RPC by record modified\n```\n\n----------------------------------------\n\nTITLE: Listing Available Odoo Reports with Python\nDESCRIPTION: Lists all available reports on the Odoo server grouped by models using the report.list() method. Returns a dictionary with model names as keys and report details including name, report_name, and report_type as values.\nSOURCE: https://github.com/oca/odoorpc/blob/master/doc/source/tuto_report.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> from pprint import pprint\n>>> pprint(odoo.report.list())\n```\n\n----------------------------------------\n\nTITLE: Retrieving Records by External ID in OdooRPC\nDESCRIPTION: Shows how to get a record using its external ID with the ref method from the environment, which returns a recordset containing the requested record.\nSOURCE: https://github.com/oca/odoorpc/blob/master/doc/source/tuto_browse.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> lang_en = odoo.env.ref('base.lang_en')\n>>> lang_en\nRecordset('res.lang', [1])\n>>> lang_en.code\n'en_US'\n```\n\n----------------------------------------\n\nTITLE: Downloading Odoo Report to File\nDESCRIPTION: Downloads a specific report using report.download() method and saves it to the file system. Takes report name and record IDs as parameters and returns a file-like object that can be written to disk.\nSOURCE: https://github.com/oca/odoorpc/blob/master/doc/source/tuto_report.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> report = odoo.report.download('account.report_invoice', [1])\n>>> with open('invoice.pdf', 'wb') as report_file:\n...     report_file.write(report.read())\n...\n```\n\n----------------------------------------\n\nTITLE: Saving OdooRPC Credentials in Python\nDESCRIPTION: Demonstrates how to authenticate with an Odoo instance and save the credentials under a code name. This allows for quick instantiation of new ODOO classes in future sessions.\nSOURCE: https://github.com/oca/odoorpc/blob/master/doc/source/tuto_session.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> import odoorpc\n>>> odoo = odoorpc.ODOO('localhost')\n>>> user = odoo.login('tutorial', 'admin', 'admin')\n>>> odoo.save('tutorial')\n```\n\n----------------------------------------\n\nTITLE: Updating Selection Fields in OdooRPC\nDESCRIPTION: Demonstrates updating a selection field with valid values and shows the error when trying to use an invalid selection value.\nSOURCE: https://github.com/oca/odoorpc/blob/master/doc/source/tuto_browse_update.rst#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> partner.type = 'delivery'   # Ok\n>>> partner.type = 'foobar'     # Error!\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"odoorpc/service/model/fields.py\", line 148, in __set__\n    value = self.check_value(value)\n  File \"odoorpc/service/model/fields.py\", line 160, in check_value\n    field_name=self.name,\nValueError: The value 'foobar' supplied doesn't match with the possible values '['contact', 'invoice', 'delivery', 'other']' for the 'type' field\n```\n\n----------------------------------------\n\nTITLE: Many2one Field Validation in OdooRPC\nDESCRIPTION: Demonstrates the validation that occurs when trying to assign a record of the wrong model type to a many2one field.\nSOURCE: https://github.com/oca/odoorpc/blob/master/doc/source/tuto_browse_update.rst#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n>>> User = odoo.env['res.users']\n>>> user = User.browse(1)\n>>> partner = Partner.browse(2)\n>>> partner.parent_id = user\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"odoorpc/service/model/fields.py\", line 263, in __set__\n    o_rel = self.check_value(o_rel)\n  File \"odoorpc/service/model/fields.py\", line 275, in check_value\n    field_name=self.name))\nValueError: Instance of 'res.users' supplied doesn't match with the relation 'res.partner' of the 'parent_id' field.\n```\n\n----------------------------------------\n\nTITLE: Updating One2many/Many2many Fields with Tuples\nDESCRIPTION: Shows how to update one2many and many2many fields using the standard Odoo tuple format (6, 0, ids) to replace all records.\nSOURCE: https://github.com/oca/odoorpc/blob/master/doc/source/tuto_browse_update.rst#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n>>> user = odoo.env['res.users'].browse(1)\n>>> user.groups_id = [(6, 0, [8, 5, 6, 4])]\n```\n\n----------------------------------------\n\nTITLE: Updating One2many/Many2many Fields with IDs\nDESCRIPTION: Shows how to update one2many and many2many fields by directly assigning a list of record IDs.\nSOURCE: https://github.com/oca/odoorpc/blob/master/doc/source/tuto_browse_update.rst#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n>>> user.groups_id = [8, 5, 6, 4]\n```\n\n----------------------------------------\n\nTITLE: Using Model Proxy for Writing Data in OdooRPC\nDESCRIPTION: Shows how to get a model proxy for res.users and write data to it. This approach automatically includes the user context and provides a more Odoo-like API experience.\nSOURCE: https://github.com/oca/odoorpc/blob/master/doc/source/tuto_rpc_queries.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> User = odoo.env['res.users']\n>>> User.write([6], {'name': \"Dupont D.\"})\nTrue\n>>> odoo.env.context\n{'lang': 'fr_FR', 'tz': False}\n>>> Product = odoo.env['product.template']\n>>> Product.name_get([25])\n[[25, '[FURN_8220] Bureau Quatre Personnes']]\n```\n\n----------------------------------------\n\nTITLE: Listing Available Odoo Databases\nDESCRIPTION: Retrieves a list of available databases from the Odoo server using the db.list() method.\nSOURCE: https://github.com/oca/odoorpc/blob/master/doc/source/tuto_create_db.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> odoo.db.list()\n['tutorial']\n```\n\n----------------------------------------\n\nTITLE: Clearing One2many/Many2many Fields in OdooRPC\nDESCRIPTION: Demonstrates how to clear all relationships in one2many and many2many fields by assigning an empty list or False.\nSOURCE: https://github.com/oca/odoorpc/blob/master/doc/source/tuto_browse_update.rst#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n>>> user.groups_id = []\n>>> user.groups_id\nRecordset('res.group', [])\n>>> user.groups_id = False\n>>> user.groups_id\nRecordset('res.group', [])\n```\n\n----------------------------------------\n\nTITLE: Adding to One2many/Many2many Fields with += Operator\nDESCRIPTION: Shows how to add records to one2many and many2many fields using the += operator with recordsets or lists of IDs.\nSOURCE: https://github.com/oca/odoorpc/blob/master/doc/source/tuto_browse_update.rst#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n>>> groups = odoo.env['res.groups'].browse([4, 5])\nRecordset('res.group', [1, 2, 3])\n>>> user.groups_id += groups\n>>> user.groups_id\nRecordset('res.group', [1, 2, 3, 4, 5])\n```\n\n----------------------------------------\n\nTITLE: Adding to One2many/Many2many Fields with IDs\nDESCRIPTION: Demonstrates adding records to one2many and many2many fields using the += operator with a list of record IDs.\nSOURCE: https://github.com/oca/odoorpc/blob/master/doc/source/tuto_browse_update.rst#2025-04-23_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n>>> user.groups_id += [4, 5]\n>>> user.groups_id\nRecordset('res.group', [1, 2, 3, 4, 5])\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Records Including Archived Ones\nDESCRIPTION: Uses context to disable the active test filter when searching for records. This allows retrieving all records, including those that have been archived (active=False).\nSOURCE: https://github.com/oca/odoorpc/blob/master/doc/source/tuto_context.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> all_product_ids = Product.with_context(active_test=False).search([])\n```\n\n----------------------------------------\n\nTITLE: Removing from One2many/Many2many Fields with -= Operator\nDESCRIPTION: Shows how to remove records from one2many and many2many fields using the -= operator with a single ID.\nSOURCE: https://github.com/oca/odoorpc/blob/master/doc/source/tuto_browse_update.rst#2025-04-23_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n>>> user.groups_id -= 4\n>>> user.groups_id\nRecordset('res.group', [1, 2, 3, 5])\n```\n\n----------------------------------------\n\nTITLE: Removing from One2many/Many2many Fields with Record Objects\nDESCRIPTION: Demonstrates removing records from one2many and many2many fields using the -= operator with record objects.\nSOURCE: https://github.com/oca/odoorpc/blob/master/doc/source/tuto_browse_update.rst#2025-04-23_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n>>> group = odoo.env['res.groups'].browse(5)\n>>> user.groups_id -= group\n>>> user.groups_id\nRecordset('res.group', [1, 2, 3])\n```\n\n----------------------------------------\n\nTITLE: Executing Basic RPC Query in OdooRPC with execute Method\nDESCRIPTION: Demonstrates how to use the execute method to call the read function on a sale.order model. This example retrieves the name field for a specific order with ID 1.\nSOURCE: https://github.com/oca/odoorpc/blob/master/doc/source/tuto_rpc_queries.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> order_data = odoo.execute('sale.order', 'read', [1], ['name'])\n```\n\n----------------------------------------\n\nTITLE: Updating Reference Fields in OdooRPC\nDESCRIPTION: Shows how to update reference fields using either a string with the format 'model,id' or a record object.\nSOURCE: https://github.com/oca/odoorpc/blob/master/doc/source/tuto_browse_update.rst#2025-04-23_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n>>> IrActionServer = odoo.env['ir.actions.server']\n>>> action_server = IrActionServer.browse(8)\n>>> action_server.ref_object = 'res.partner,1'      # with a string with the format '{relation},{id}'\n>>> action_server.ref_object = Partner.browse(1)    # with a record object\n```\n\n----------------------------------------\n\nTITLE: Working with Date and Datetime Fields in OdooRPC\nDESCRIPTION: Illustrates how OdooRPC handles special data types like dates and datetimes, automatically converting them to Python's datetime objects.\nSOURCE: https://github.com/oca/odoorpc/blob/master/doc/source/tuto_browse.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> Purchase = odoo.env['purchase.order']\n>>> order = Purchase.browse(1)\n>>> order.date_order\ndatetime.datetime(2018, 10, 18, 8, 18, 56)\n```\n\n----------------------------------------\n\nTITLE: Implementing on_change Method Support for Odoo Records\nDESCRIPTION: Custom function to handle on_change methods in the old Odoo API. This helper function applies the on_change method result to a record by updating its fields with the returned values.\nSOURCE: https://github.com/oca/odoorpc/blob/master/doc/source/faq.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef on_change(record, method, args=None, kwargs=None):\n    \"\"\"Update `record` with the result of the on_change `method`\"\"\"\n    res = record._odoo.execute_kw(record._name, method, args, kwargs)\n    for k, v in res['value'].iteritems():\n        setattr(record, k, v)\n```\n\n----------------------------------------\n\nTITLE: Calling on_change Methods on Odoo Records\nDESCRIPTION: Example showing how to use the custom on_change helper function with a sale order record. Demonstrates passing arguments to the product_id_change method.\nSOURCE: https://github.com/oca/odoorpc/blob/master/doc/source/faq.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> order = odoo.get('sale.order').browse(42)\n>>> on_change(order, 'product_id_change', args=[ARGS], kwargs={KWARGS})\n```\n\n----------------------------------------\n\nTITLE: Handling Methods Without Context Parameter in Odoo\nDESCRIPTION: Example showing how to temporarily disable automatic context parameter sending when calling Odoo methods that don't accept it. Uses ir.sequence.get as an example.\nSOURCE: https://github.com/oca/odoorpc/blob/master/doc/source/faq.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> odoo.config['auto_context'] = False  # 'get()' method of 'ir.sequence' does not support the context parameter\n>>> next_seq = odoo.get('ir.sequence').get('stock.lot.serial')\n>>> odoo.config['auto_context'] = True  # Restore the configuration\n```\n\n----------------------------------------\n\nTITLE: Using write() Method for Record Updates\nDESCRIPTION: Shows how to use the write() method to update a record, which is equivalent to the direct assignment but can be more efficient when updating multiple fields at once.\nSOURCE: https://github.com/oca/odoorpc/blob/master/doc/source/tuto_browse_update.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> Partner.write([partner.id], {'name': \"MyContact\"})\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Docker\nDESCRIPTION: Commands for running OdooRPC tests using Docker containers, including version specification.\nSOURCE: https://github.com/oca/odoorpc/blob/master/doc/source/download_install.rst#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ ./run_tests_docker.sh\n$ ORPC_TEST_VERSION=11.0 ./run_tests_docker.sh\n```\n\n----------------------------------------\n\nTITLE: Loading OdooRPC Credentials in Python\nDESCRIPTION: Demonstrates how to load previously saved OdooRPC credentials using the ODOO.load() class method. This allows for quick authentication without re-entering credentials.\nSOURCE: https://github.com/oca/odoorpc/blob/master/doc/source/tuto_session.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> import odoorpc\n>>> odoo = odoorpc.ODOO.load('tutorial')\n```\n\n----------------------------------------\n\nTITLE: Updating Date/Datetime Fields with Python Objects\nDESCRIPTION: Shows how to update date and datetime fields using Python's datetime.date and datetime.datetime objects.\nSOURCE: https://github.com/oca/odoorpc/blob/master/doc/source/tuto_browse_update.rst#2025-04-23_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n>>> import datetime\n>>> Purchase = odoo.env['purchase.order']\n>>> order = Purchase.browse(1)\n>>> order.date_order = datetime.datetime(2018, 10, 18, 8, 18, 56)\n```\n\n----------------------------------------\n\nTITLE: Updating Date/Datetime Fields with Formatted Strings\nDESCRIPTION: Demonstrates updating date and datetime fields using properly formatted string values in the '%Y-%m-%d' or '%Y-%m-%d %H:%M:%S' formats.\nSOURCE: https://github.com/oca/odoorpc/blob/master/doc/source/tuto_browse_update.rst#2025-04-23_snippet_19\n\nLANGUAGE: python\nCODE:\n```\n>>> order.date_order = \"2018-11-07\"             # %Y-%m-%d\n>>> order.date_order = \"2018-11-07 12:31:24\"    # %Y-%m-%d %H:%M:%S\n```\n\n----------------------------------------\n\nTITLE: Understanding Class Method Restrictions on Record Instances in OdooRPC\nDESCRIPTION: This snippet illustrates why class methods like create() cannot be called directly on record instances. It shows the error that occurs when trying to call create() on a record instance and provides the workaround by accessing the class method through __class__ attribute.\nSOURCE: https://github.com/oca/odoorpc/blob/master/doc/source/tuto_browse_methods.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> User = odoo.env['res.users']\n>>> User.create({...})              # Works\n>>> user = User.browse(1)\n>>> user.ids\n[1]\n>>> user.create({...})              # Error, `create()` does not accept `ids` in first parameter\n>>> user.__class__.create({...})    # Works\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Environment Variables\nDESCRIPTION: Setting up environment variables for OdooRPC test configuration including server connection details and credentials.\nSOURCE: https://github.com/oca/odoorpc/blob/master/doc/source/download_install.rst#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ export ORPC_TEST_PROTOCOL=jsonrpc\n$ export ORPC_TEST_HOST=localhost\n$ export ORPC_TEST_PORT=8069\n$ export ORPC_TEST_DB=odoorpc_test\n$ export ORPC_TEST_USER=admin\n$ export ORPC_TEST_PWD=admin\n$ export ORPC_TEST_VERSION=12.0\n$ export ORPC_TEST_SUPER_PWD=admin\n$ python -m unittest discover -v\n```\n\n----------------------------------------\n\nTITLE: Saving OdooRPC Credentials to Custom File in Python\nDESCRIPTION: Shows how to save OdooRPC credentials to a custom file path instead of the default ~/.odoorpcrc file.\nSOURCE: https://github.com/oca/odoorpc/blob/master/doc/source/tuto_session.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> odoo.save('tutorial', '~/my_own_odoorpcrc')\n```\n\n----------------------------------------\n\nTITLE: Loading OdooRPC Credentials from Custom File in Python\nDESCRIPTION: Shows how to load OdooRPC credentials from a custom file path using the ODOO.load() class method.\nSOURCE: https://github.com/oca/odoorpc/blob/master/doc/source/tuto_session.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> odoo = odoorpc.ODOO.load('tutorial', '~/my_own_odoorpcrc')\n```\n\n----------------------------------------\n\nTITLE: Managing OdooRPC Sessions in Python\nDESCRIPTION: Demonstrates how to list available OdooRPC sessions and remove a specific session using ODOO class methods. This is useful for managing multiple saved credentials.\nSOURCE: https://github.com/oca/odoorpc/blob/master/doc/source/tuto_session.rst#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> odoorpc.ODOO.list()\n['tutorial']\n>>> odoorpc.ODOO.remove('tutorial')\n>>> 'tutorial' not in odoorpc.ODOO.list()\nTrue\n```\n\n----------------------------------------\n\nTITLE: Configuring Debug Logger for OdooRPC in Python\nDESCRIPTION: Sets up a basic logger for the odoorpc package with DEBUG level to capture all HTTP queries. Uses the Python logging module to configure the logger instance.\nSOURCE: https://github.com/oca/odoorpc/blob/master/doc/source/tuto_logging.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport logging\nlogging.basicConfig()\nlogger = logging.getLogger('odoorpc')\nlogger.setLevel(logging.DEBUG)\n```\n\n----------------------------------------\n\nTITLE: Installing OdooRPC from GitHub\nDESCRIPTION: Installing the latest development branch of OdooRPC directly from GitHub using pip.\nSOURCE: https://github.com/oca/odoorpc/blob/master/doc/source/download_install.rst#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install git+https://github.com/OCA/odoorpc.git@master\n```\n\n----------------------------------------\n\nTITLE: OdooRPC Login with Debug Logging Example\nDESCRIPTION: Demonstrates the debug output when performing a login operation with OdooRPC. Shows both the login code and the resulting debug log output including JSON-RPC request and response details.\nSOURCE: https://github.com/oca/odoorpc/blob/master/doc/source/tuto_logging.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport odoorpc\nodoo = odoorpc.ODOO()\nodoo.login('dbname', 'admin', 'admin')\n```\n\n----------------------------------------\n\nTITLE: Disabling Automatic Context in OdooRPC\nDESCRIPTION: Demonstrates how to disable the automatic inclusion of the user context in API calls by setting the auto_context configuration to False. This affects how model proxy methods handle data, particularly with language-specific content.\nSOURCE: https://github.com/oca/odoorpc/blob/master/doc/source/tuto_rpc_queries.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> odoo.config['auto_context'] = False\n>>> Product.name_get([25])   # Without context, lang 'en_US' by default\n[[25, '[FURN_8220] Four Person Desk']]\n```\n\n----------------------------------------\n\nTITLE: Installing OdooRPC from Source\nDESCRIPTION: Clone the repository and install from source code using setup.py.\nSOURCE: https://github.com/oca/odoorpc/blob/master/doc/source/download_install.rst#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone https://github.com/OCA/odoorpc.git\n$ cd odoorpc/ && python setup.py install\n```\n\n----------------------------------------\n\nTITLE: Configuring OdooRPC Timeout\nDESCRIPTION: Sets a custom timeout value for database operations to handle longer processing times. Shows how to modify the configuration and retry database creation.\nSOURCE: https://github.com/oca/odoorpc/blob/master/doc/source/tuto_create_db.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> odoo.config['timeout'] = 300    # Set the timeout to 300 seconds\n>>> odoo.db.create('super_password', 'tutorial', demo=True, lang='fr_FR', admin_password='password')\n```\n\n----------------------------------------\n\nTITLE: Reference Field Validation in OdooRPC\nDESCRIPTION: Demonstrates the validation that occurs when trying to assign an invalid model name to a reference field.\nSOURCE: https://github.com/oca/odoorpc/blob/master/doc/source/tuto_browse_update.rst#2025-04-23_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n>>> action_server.ref_object = 'foo.bar,42'\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"odoorpc/service/model/fields.py\", line 370, in __set__\n    value = self.check_value(value)\n  File \"odoorpc/service/model/fields.py\", line 400, in check_value\n    self._check_relation(relation)\n  File \"odoorpc/service/model/fields.py\", line 381, in _check_relation\n    field_name=self.name,\nValueError: The value 'foo.bar' supplied doesn't match with the possible values '[...]' for the 'ref_object' field\n```\n\n----------------------------------------\n\nTITLE: Date/Datetime Field Validation in OdooRPC\nDESCRIPTION: Shows the validation error that occurs when trying to assign an improperly formatted string to a date or datetime field.\nSOURCE: https://github.com/oca/odoorpc/blob/master/doc/source/tuto_browse_update.rst#2025-04-23_snippet_20\n\nLANGUAGE: python\nCODE:\n```\n>>> order.date_order = \"foobar\"\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"odoorpc/fields.py\", line 187, in setter\n    value = self.check_value(value)\n  File \"odoorpc/fields.py\", line 203, in check_value\n    self.pattern))\nValueError: Value not well formatted, expecting '%Y-%m-%d %H:%M:%S' format\n```\n\n----------------------------------------\n\nTITLE: Installing OdooRPC from PyPI\nDESCRIPTION: Simple pip command to install the OdooRPC package from PyPI repository.\nSOURCE: https://github.com/oca/odoorpc/blob/master/doc/source/download_install.rst#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install odoorpc\n```\n\n----------------------------------------\n\nTITLE: Setting up Pre-commit Hooks\nDESCRIPTION: Install and configure pre-commit hooks for code quality checks during development.\nSOURCE: https://github.com/oca/odoorpc/blob/master/doc/source/download_install.rst#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install pre-commit\n$ cd ./odoorpc/ && pre-commit install\n```\n\n----------------------------------------\n\nTITLE: Running OdooRPC Unit Tests\nDESCRIPTION: Commands for running all unit tests or specific test cases for OdooRPC.\nSOURCE: https://github.com/oca/odoorpc/blob/master/doc/source/download_install.rst#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ python -m unittest discover -v\n$ python -m unittest -v odoorpc.tests.test_init\n```\n\n----------------------------------------\n\nTITLE: Documenting ODOO Class with RestructuredText\nDESCRIPTION: RestructuredText directive for auto-generating class documentation from the odoorpc.ODOO class using Sphinx.\nSOURCE: https://github.com/oca/odoorpc/blob/master/doc/source/ref_odoo.rst#2025-04-23_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. autoclass:: odoorpc.ODOO\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Documentation Configuration for odoorpc.report Module in RST\nDESCRIPTION: This snippet configures the Sphinx documentation generator to automatically document the odoorpc.report module and all its members. It uses the RST (reStructuredText) format which is common for Python documentation.\nSOURCE: https://github.com/oca/odoorpc/blob/master/doc/source/ref_report.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: odoorpc.report\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Sphinx autodoc directive for odoorpc.session module\nDESCRIPTION: A Sphinx documentation directive that automatically includes documentation from the odoorpc.session module. The :members: option tells Sphinx to document all module members (functions, classes, etc.).\nSOURCE: https://github.com/oca/odoorpc/blob/master/doc/source/ref_session.rst#2025-04-23_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: odoorpc.session\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Generating Module Documentation for odoorpc.db in Python\nDESCRIPTION: This code snippet uses Sphinx's autodoc extension to automatically generate documentation for the odoorpc.db module. It includes all members of the module in the generated documentation.\nSOURCE: https://github.com/oca/odoorpc/blob/master/doc/source/ref_db.rst#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. automodule:: odoorpc.db\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Documentation Structure for odoorpc.models Module in RST\nDESCRIPTION: ReStructuredText directives for documenting the odoorpc.models module and the Model class. It includes instructions to document all members and special members, but excludes __hash__ and __metaclass__ methods.\nSOURCE: https://github.com/oca/odoorpc/blob/master/doc/source/ref_models.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\nodoorpc.models\n==============\n\n.. automodule:: odoorpc.models\n\n.. autoclass:: odoorpc.models.Model\n    :members:\n    :special-members:\n    :exclude-members: __hash__, __metaclass__\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation for odoorpc.error Module in Python\nDESCRIPTION: This code snippet uses Sphinx's automodule directive to automatically generate documentation for all members of the odoorpc.error module. This includes classes, functions, and other objects defined in the module.\nSOURCE: https://github.com/oca/odoorpc/blob/master/doc/source/ref_error.rst#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: odoorpc.error\n    :members:\n```"
  }
]