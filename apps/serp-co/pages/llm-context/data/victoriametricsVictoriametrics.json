[
  {
    "owner": "victoriametrics",
    "repo": "victoriametrics",
    "content": "TITLE: Running VictoriaMetrics Agent Help Command\nDESCRIPTION: Command to view the full list of vmagent command-line flags with their descriptions and default values. The output includes detailed information about configuration options for data collection, routing, and integration with various services.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmagent.md#2025-04-22_snippet_68\n\nLANGUAGE: shellhelp\nCODE:\n```\n./vmagent -help\n\nvmagent collects metrics data via popular data ingestion protocols and routes them to VictoriaMetrics.\n\nSee the docs at https://docs.victoriametrics.com/vmagent/ .\n\n  -blockcache.missesBeforeCaching int\n     The number of cache misses before putting the block into cache. Higher values may reduce indexdb/dataBlocks cache size at the cost of higher CPU and disk read usage (default 2)\n  -cacheExpireDuration duration\n     Items are removed from in-memory caches after they aren't accessed for this duration. Lower values may reduce memory usage at the cost of higher CPU usage. See also -prevCacheRemovalPercent (default 30m0s)\n  -configAuthKey value\n     Authorization key for accessing /config page. It must be passed via authKey query arg. It overrides -httpAuth.*\n     Flag value can be read from the given file when using -configAuthKey=file:///abs/path/to/file or -configAuthKey=file://./relative/path/to/file . Flag value can be read from the given http/https url when using -configAuthKey=http://host/path or -configAuthKey=https://host/path\n  -csvTrimTimestamp duration\n     Trim timestamps when importing csv data to this duration. Minimum practical duration is 1ms. Higher duration (i.e. 1s) may be used for reducing disk space usage for timestamp data (default 1ms)\n  -datadog.maxInsertRequestSize size\n     The maximum size in bytes of a single DataDog POST request to /datadog/api/v2/series\n     Supports the following optional suffixes for size values: KB, MB, GB, TB, KiB, MiB, GiB, TiB (default 67108864)\n  -datadog.sanitizeMetricName\n     Sanitize metric names for the ingested DataDog data to comply with DataDog behaviour described at https://docs.datadoghq.com/metrics/custom_metrics/#naming-custom-metrics (default true)\n  -denyQueryTracing\n     Whether to disable the ability to trace queries. See https://docs.victoriametrics.com/#query-tracing\n  -dryRun\n     Whether to check config files without running vmagent. The following files are checked: -promscrape.config, -remoteWrite.relabelConfig, -remoteWrite.urlRelabelConfig, -remoteWrite.streamAggr.config . Unknown config entries aren't allowed in -promscrape.config by default. This can be changed by passing -promscrape.config.strictParse=false command-line flag\n  -enableMultitenantHandlers\n     Whether to process incoming data via multitenant insert handlers according to https://docs.victoriametrics.com/cluster-victoriametrics/#url-format . By default incoming data is processed via single-node insert handlers according to https://docs.victoriametrics.com/#how-to-import-time-series-data .See https://docs.victoriametrics.com/vmagent/#multitenancy for details\n  -enableTCP6\n     Whether to enable IPv6 for listening and dialing. By default, only IPv4 TCP and UDP are used\n  -envflag.enable\n     Whether to enable reading flags from environment variables in addition to the command line. Command line flag values have priority over values from environment vars. Flags are read only from the command line if this flag isn't set. See https://docs.victoriametrics.com/#environment-variables for more details\n  -envflag.prefix string\n     Prefix for environment variables if -envflag.enable is set\n  -eula\n     Deprecated, please use -license or -licenseFile flags instead. By specifying this flag, you confirm that you have an enterprise license and accept the ESA https://victoriametrics.com/legal/esa/ . This flag is available only in Enterprise binaries. See https://docs.victoriametrics.com/enterprise/\n  -filestream.disableFadvise\n     Whether to disable fadvise() syscall when reading large data files. The fadvise() syscall prevents from eviction of recently accessed data from OS page cache during background merges and backups. In some rare cases it is better to disable the syscall if it uses too much CPU\n  -flagsAuthKey value\n     Auth key for /flags endpoint. It must be passed via authKey query arg. It overrides -httpAuth.*\n     Flag value can be read from the given file when using -flagsAuthKey=file:///abs/path/to/file or -flagsAuthKey=file://./relative/path/to/file . Flag value can be read from the given http/https url when using -flagsAuthKey=http://host/path or -flagsAuthKey=https://host/path\n  -fs.disableMmap\n     Whether to use pread() instead of mmap() for reading data files. By default, mmap() is used for 64-bit arches and pread() is used for 32-bit arches, since they cannot read data files bigger than 2^32 bytes in memory. mmap() is usually faster for reading small data chunks than pread()\n  -gcp.pubsub.publish.byteThreshold int\n     Publish a batch when its size in bytes reaches this value. See https://docs.victoriametrics.com/vmagent/#writing-metrics-to-pubsub . This flag is available only in Enterprise binaries. See https://docs.victoriametrics.com/enterprise/ (default 1000000)\n  -gcp.pubsub.publish.countThreshold int\n     Publish a batch when it has this many messages. See https://docs.victoriametrics.com/vmagent/#writing-metrics-to-pubsub . This flag is available only in Enterprise binaries. See https://docs.victoriametrics.com/enterprise/ (default 100)\n  -gcp.pubsub.publish.credentialsFile string\n     Path to file with GCP credentials to use for PubSub client. If not set, default credentials will be used (see Workload Identity for K8S or https://cloud.google.com/docs/authentication/application-default-credentials). See https://docs.victoriametrics.com/vmagent/#writing-metrics-to-pubsub . This flag is available only in Enterprise binaries. See https://docs.victoriametrics.com/enterprise/\n  -gcp.pubsub.publish.delayThreshold value\n     Publish a non-empty batch after this delay has passed. See https://docs.victoriametrics.com/vmagent/#writing-metrics-to-pubsub . This flag is available only in Enterprise binaries. See https://docs.victoriametrics.com/enterprise/\n     The following optional suffixes are supported: s (second), h (hour), d (day), w (week), y (year). If suffix isn't set, then the duration is counted in months (default 10ms)\n  -gcp.pubsub.publish.maxOutstandingBytes int\n     The maximum size of buffered messages to be published. If less than or equal to zero, this is disabled. See https://docs.victoriametrics.com/vmagent/#writing-metrics-to-pubsub . This flag is available only in Enterprise binaries. See https://docs.victoriametrics.com/enterprise/ (default -1)\n  -gcp.pubsub.publish.maxOutstandingMessages int\n     The maximum number of buffered messages to be published. If less than or equal to zero, this is disabled. See https://docs.victoriametrics.com/vmagent/#writing-metrics-to-pubsub . This flag is available only in Enterprise binaries. See https://docs.victoriametrics.com/enterprise/ (default 100)\n  -gcp.pubsub.publish.timeout value\n     The maximum time that the client will attempt to publish a bundle of messages. See https://docs.victoriametrics.com/vmagent/#writing-metrics-to-pubsub . This flag is available only in Enterprise binaries. See https://docs.victoriametrics.com/enterprise/\n     The following optional suffixes are supported: s (second), h (hour), d (day), w (week), y (year). If suffix isn't set, then the duration is counted in months (default 60s)\n  -gcp.pubsub.subscribe.credentialsFile string\n     Path to file with GCP credentials to use for PubSub client. If not set, default credentials are used (see Workload Identity for K8S or https://cloud.google.com/docs/authentication/application-default-credentials ). See https://docs.victoriametrics.com/vmagent/#reading-metrics-from-pubsub . This flag is available only in Enterprise binaries. See https://docs.victoriametrics.com/enterprise/\n  -gcp.pubsub.subscribe.defaultMessageFormat string\n     Default message format if -gcp.pubsub.subscribe.topicSubscription.messageFormat is missing. See https://docs.victoriametrics.com/vmagent/#reading-metrics-from-pubsub . This flag is available only in Enterprise binaries. See https://docs.victoriametrics.com/enterprise/ (default \"promremotewrite\")\n  -gcp.pubsub.subscribe.topicSubscription array\n     GCP PubSub topic subscription in the format: projects/<project-id>/subscriptions/<subscription-name>. See https://docs.victoriametrics.com/vmagent/#reading-metrics-from-pubsub . This flag is available only in Enterprise binaries. See https://docs.victoriametrics.com/enterprise/\n     Supports an array of values separated by comma or specified via multiple flags.\n     Value can contain comma inside single-quoted or double-quoted string, {}, [] and () braces.\n  -gcp.pubsub.subscribe.topicSubscription.concurrency array\n     The number of concurrently processed messages for topic subscription specified via -gcp.pubsub.subscribe.topicSubscription flag. See https://docs.victoriametrics.com/vmagent/#reading-metrics-from-pubsub . This flag is available only in Enterprise binaries. See https://docs.victoriametrics.com/enterprise/ (default 0)\n     Supports array of values separated by comma or specified via multiple flags.\n     Empty values are set to default value.\n  -gcp.pubsub.subscribe.topicSubscription.isGzipped array\n     Enables gzip decompression for messages payload at the corresponding -gcp.pubsub.subscribe.topicSubscription. Only prometheus, jsonline, graphite and influx formats accept gzipped messages. See https://docs.victoriametrics.com/vmagent/#reading-metrics-from-pubsub . This flag is available only in Enterprise binaries. See https://docs.victoriametrics.com/enterprise/\n     Supports array of values separated by comma or specified via multiple flags.\n     Empty values are set to false.\n  -gcp.pubsub.subscribe.topicSubscription.messageFormat array\n```\n\n----------------------------------------\n\nTITLE: OHLC Calculations with Rollup Candlestick Function in VictoriaMetrics\nDESCRIPTION: The `rollup_candlestick` function calculates open, high, low, and close values over the given lookbehind window `d`, returning them with labels like `rollup=\"open\"`, `rollup=\"high\"`, etc. It is useful in financial applications and can return a single calculation without a label when passed an optional second argument.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/MetricsQL.md#2025-04-22_snippet_51\n\nLANGUAGE: Other\nCODE:\n```\nrollup_candlestick(series_selector[d])\n```\n\n----------------------------------------\n\nTITLE: Configuring Prometheus Remote Write for VictoriaMetrics in YAML\nDESCRIPTION: This snippet shows how to configure Prometheus to send data to VictoriaMetrics using remote_write. It includes the basic configuration and an advanced setup for highly loaded Prometheus instances.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/README.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nremote_write:\n  - url: http://<victoriametrics-addr>:8428/api/v1/write\n```\n\nLANGUAGE: yaml\nCODE:\n```\nglobal:\n  external_labels:\n    datacenter: dc-123\n```\n\nLANGUAGE: yaml\nCODE:\n```\nremote_write:\n  - url: http://<victoriametrics-addr>:8428/api/v1/write\n    queue_config:\n      max_samples_per_send: 10000\n      capacity: 20000\n      max_shards: 30\n```\n\n----------------------------------------\n\nTITLE: Extract Data Patterns in LogSQL with VictoriaMetrics\nDESCRIPTION: Shows how to extract specific patterns from log fields using the `extract` pipe, and details the optional parameters like `keep_original_fields` and `skip_empty_results` for customizing behavior. It supports complex pattern matching to pull fields into new variables for subsequent operations. Inputs are expected to follow a defined pattern for `extract` to correctly populate new fields.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_84\n\nLANGUAGE: logsql\nCODE:\n```\n_time:1d error | extract \"ip=<ip> \" from _msg | top 10 (ip)\n```\n\nLANGUAGE: logsql\nCODE:\n```\n_time:1d error | extract \"ip=<ip> \" | top 10 (ip)\n```\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m | extract '\"ip\":\"<ip>\"'\n```\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m | extract 'ip=<ip> ' keep_original_fields\n```\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m | extract 'ip=<ip> ' from foo skip_empty_results\n```\n\n----------------------------------------\n\nTITLE: VictoriaMetrics CLI Configuration Parameters\nDESCRIPTION: Command-line configuration flags for VictoriaMetrics server, covering metrics pushing, authentication, data retention, search behavior, and resource limits. Each parameter includes detailed description and default values where applicable.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/README.md#2025-04-22_snippet_84\n\nLANGUAGE: plaintext\nCODE:\n```\n-pushmetrics.interval duration\n-pushmetrics.url array\n-relabelConfig string\n-reloadAuthKey value\n-metricNamesStatsResetAuthKey value\n-retentionFilter array\n-retentionPeriod value\n-retentionTimezoneOffset duration\n-search.cacheTimestampOffset duration\n-search.disableAutoCacheReset\n-search.disableCache\n-search.disableImplicitConversion\n-search.graphiteMaxPointsPerSeries int\n-search.graphiteStorageStep duration\n-search.ignoreExtraFiltersAtLabelsAPI\n-search.latencyOffset duration\n-search.logImplicitConversion\n-search.logQueryMemoryUsage size\n-search.logSlowQueryDuration duration\n-search.logSlowQueryStats duration\n-search.maxConcurrentRequests int\n-search.maxDeleteDuration duration\n-search.maxDeleteSeries int\n-search.maxTSDBStatusTopNSeries int\n-search.maxExportDuration duration\n-search.maxExportSeries int\n-search.maxFederateSeries int\n-search.maxGraphiteSeries int\n-search.maxGraphiteTagKeys int\n-search.maxGraphiteTagValues int\n-search.maxLabelsAPIDuration duration\n-search.maxLabelsAPISeries int\n-search.maxLookback duration\n-search.maxMemoryPerQuery size\n-search.maxPointsPerTimeseries int\n```\n\n----------------------------------------\n\nTITLE: Applying Holt-Winters Smoothing in Markdown\nDESCRIPTION: The 'holt_winters' function calculates the Holt-Winters value using double exponential smoothing over raw samples. It requires smoothing and trend factors to be within [0...1] and is supported by PromQL.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/MetricsQL.md#2025-04-22_snippet_30\n\nLANGUAGE: Markdown\nCODE:\n```\n`holt_winters(series_selector[d], sf, tf)` is a [rollup function](#rollup-functions), which calculates Holt-Winters value\\n(aka [double exponential smoothing](https://en.wikipedia.org/wiki/Exponential_smoothing#Double_exponential_smoothing)) for [raw samples](https://docs.victoriametrics.com/keyconcepts/#raw-samples)\\nover the given lookbehind window `d` using the given smoothing factor `sf` and the given trend factor `tf`.\n```\n\n----------------------------------------\n\nTITLE: Finding Top Words in Log Messages\nDESCRIPTION: Illustrates a complex query to find the top 5 most frequent words in log messages using unpack_words and unroll pipes.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_172\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m | unpack_words from _msg as words | unroll words | top 5 (words)\n```\n\n----------------------------------------\n\nTITLE: Executing an Instant Query using cURL\nDESCRIPTION: Demonstrates how to perform an instant query using a `curl` command targeting the VictoriaMetrics API endpoint (`/api/v1/query`). It requests the value of the `foo_bar` metric at the specific timestamp `2022-05-10T08:03:00.000Z` by setting the `query` and `time` parameters. The placeholder `<victoria-metrics-addr>` must be replaced with the actual server address.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/keyConcepts/keyConcepts.md#2025-04-22_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\ncurl \"http://<victoria-metrics-addr>/api/v1/query?query=foo_bar&time=2022-05-10T08:03:00.000Z\"\n```\n\n----------------------------------------\n\nTITLE: Implementing ValidatePattern in Go\nDESCRIPTION: ValidatePattern checks the validity of a pattern, ensuring compatibility with slash-based Match() or Glob() functions. This is primarily beneficial when user-entered patterns need verification before subsequent operations. The function expects patterns to use '/' regardless of system path separators.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/bmatcuk/doublestar/v4/README.md#2025-04-22_snippet_16\n\nLANGUAGE: go\nCODE:\n```\nfunc ValidatePattern(s string) bool\n```\n\n----------------------------------------\n\nTITLE: Adding VictoriaMetrics Helm Repository\nDESCRIPTION: Command to add the VictoriaMetrics Helm repository for installing VictoriaMetrics components.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/guides/k8s-monitoring-via-vm-cluster/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nhelm repo add vm https://victoriametrics.github.io/helm-charts/\n```\n\n----------------------------------------\n\nTITLE: Rate Calculation in PromQL\nDESCRIPTION: Calculates average per-second increase rate over a lookbehind window for time series. Useful for measuring change velocity in metrics.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/MetricsQL.md#2025-04-22_snippet_49\n\nLANGUAGE: promql\nCODE:\n```\nrate(series_selector[d])\n```\n\n----------------------------------------\n\nTITLE: Marshaling and Unmarshaling YAML in Go\nDESCRIPTION: This example demonstrates how to use the yaml.v3 package to unmarshal YAML data into Go structs and maps, and then marshal those structures back to YAML. It shows struct tag usage for field renaming and formatting control.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/gopkg.in/yaml.v3/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport (\n        \"fmt\"\n        \"log\"\n\n        \"gopkg.in/yaml.v3\"\n)\n\nvar data = `\na: Easy!\nb:\n  c: 2\n  d: [3, 4]\n`\n\n// Note: struct fields must be public in order for unmarshal to\n// correctly populate the data.\ntype T struct {\n        A string\n        B struct {\n                RenamedC int   `yaml:\"c\"`\n                D        []int `yaml:\",flow\"`\n        }\n}\n\nfunc main() {\n        t := T{}\n    \n        err := yaml.Unmarshal([]byte(data), &t)\n        if err != nil {\n                log.Fatalf(\"error: %v\", err)\n        }\n        fmt.Printf(\"--- t:\\n%v\\n\\n\", t)\n    \n        d, err := yaml.Marshal(&t)\n        if err != nil {\n                log.Fatalf(\"error: %v\", err)\n        }\n        fmt.Printf(\"--- t dump:\\n%s\\n\\n\", string(d))\n    \n        m := make(map[interface{}]interface{})\n    \n        err = yaml.Unmarshal([]byte(data), &m)\n        if err != nil {\n                log.Fatalf(\"error: %v\", err)\n        }\n        fmt.Printf(\"--- m:\\n%v\\n\\n\", m)\n    \n        d, err = yaml.Marshal(&m)\n        if err != nil {\n                log.Fatalf(\"error: %v\", err)\n        }\n        fmt.Printf(\"--- m dump:\\n%s\\n\\n\", string(d))\n}\n```\n\n----------------------------------------\n\nTITLE: Authenticating Kafka Producer with SASL Auth - Shell\nDESCRIPTION: This shell command launches vmagent in enterprise mode and sets it up to remotely write to a Kafka topic using SASL authentication with username and password. Key parameters passed as part of the -remoteWrite.url define Kafka protocol and authentication mechanism; credentials are provided via dedicated flags. Requires enterprise build, correctly configured Kafka server, and valid credentials.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmagent.md#2025-04-22_snippet_61\n\nLANGUAGE: shell\nCODE:\n```\n./bin/vmagent -remoteWrite.url='kafka://localhost:9092/?topic=prom-rw&security.protocol=SASL_SSL&sasl.mechanisms=PLAIN' \\\n    -remoteWrite.basicAuth.username=user \\\n    -remoteWrite.basicAuth.password=password\n```\n\n----------------------------------------\n\nTITLE: Defining Alerting Rule in VictoriaMetrics (YAML)\nDESCRIPTION: This snippet demonstrates how to define an alerting rule in VictoriaMetrics using vmalert. It includes the alert name, expression, optional duration parameters for firing and resolution delay, debug flag, and updates entry limit. It also specifies additional labels and annotations, utilizing Go templating to format outputs. Dependencies include VictoriaMetrics vmalert setup and familiarity with YAML and PromQL/MetricsQL.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmalert.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nalert: <string>\nexpr: <string>\n[ for: <duration> | default = 0s ]\n[ keep_firing_for: <duration> | default = 0s ]\n[ debug: <bool> | default = false ]\n[ update_entries_limit: <integer> | default 0 ]\nlabels:\n  [ <labelname>: <tmpl_string> ]\nannotations:\n  [ <labelname>: <tmpl_string> ]\n```\n\n----------------------------------------\n\nTITLE: Writing Metrics to VictoriaMetrics Using Curl and InfluxDB Line Protocol - Shell\nDESCRIPTION: Example command to submit data to a local VictoriaMetrics instance using curl and InfluxDB line protocol. Requires curl and VictoriaMetrics running on the specified host. The -d parameter contains the line protocol metric, and -X POST specifies HTTP POST. The endpoint /write accepts InfluxDB line protocol data.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/README.md#2025-04-22_snippet_15\n\nLANGUAGE: sh\nCODE:\n```\ncurl -d 'measurement,tag1=value1,tag2=value2 field1=123,field2=1.23' -X POST 'http://localhost:8428/write'\n```\n\n----------------------------------------\n\nTITLE: Configuring vmanomaly with Custom Model YAML\nDESCRIPTION: This YAML configuration file (`config.yaml`) defines settings for vmanomaly. It specifies scheduler intervals (`infer_every`, `fit_every`, `fit_window`), defines a custom model (`custom_model`) using the 'custom' class alias (or 'model.custom.CustomModel') with a 'percentage' parameter, configures the data reader to query VictoriaMetrics (`datasource_url`, `queries`), sets up the writer to push results back to VictoriaMetrics with a specific format (`metric_format`), and configures monitoring endpoints.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/anomaly-detection/components/models.md#2025-04-22_snippet_26\n\nLANGUAGE: yaml\nCODE:\n```\nschedulers:\n  s1:\n    infer_every: \"1m\"\n    fit_every: \"1m\"\n    fit_window: \"1d\"\n\nmodels:\n  custom_model:\n    class: \"custom\"  # or 'model.model.CustomModel' until v1.13.0\n    percentage: 0.9\n\n\nreader:\n  datasource_url: \"http://victoriametrics:8428/\"\n  sampling_period: '1m'\n  queries:\n    ingestion_rate: 'sum(rate(vm_rows_inserted_total)) by (type)'\n    churn_rate: 'sum(rate(vm_new_timeseries_created_total[5m]))'\n\nwriter:\n  datasource_url: \"http://victoriametrics:8428/\"\n  metric_format:\n    __name__: \"custom_$VAR\"\n    for: \"$QUERY_KEY\"\n    run: \"test-format\"\n\nmonitoring:\n  # /metrics server.\n  pull:\n    port: 8080\n  push:\n    url: \"http://victoriametrics:8428/\"\n    extra_labels:\n      job: \"vmanomaly-develop\"\n      config: \"custom.yaml\"\n```\n\n----------------------------------------\n\nTITLE: Defining descent_over_time in MetricsQL - Markdown\nDESCRIPTION: Describes the descent_over_time function, which calculates the total descent (drop) of raw sample values in a window, with utility in GPS height tracking scenarios. Documents handling of stripped metric names and relationship to ascent_over_time.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/MetricsQL.md#2025-04-22_snippet_22\n\nLANGUAGE: Markdown\nCODE:\n```\n#### descent_over_time\n\n`descent_over_time(series_selector[d])` is a [rollup function](#rollup-functions), which calculates descent of [raw sample](https://docs.victoriametrics.com/keyconcepts/#raw-samples)\nvalues on the given lookbehind window `d`. The calculations are performed individually per each time series returned\nfrom the given [series_selector](https://docs.victoriametrics.com/keyconcepts/#filtering).\n\nThis function is useful for tracking height loss in GPS tracking.\n\nMetric names are stripped from the resulting rollups. Add [keep_metric_names](#keep_metric_names) modifier in order to keep metric names.\n\nSee also [ascent_over_time](#ascent_over_time).\n\n```\n\n----------------------------------------\n\nTITLE: Selecting Logs with Time Filter in LogsQL\nDESCRIPTION: This query selects all logs from the last 5 minutes using the _time filter.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_19\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m\n```\n\n----------------------------------------\n\nTITLE: Customizing Facet Limits in LogSQL\nDESCRIPTION: This snippet shows how to customize the maximum number of unique values per field and the number of most frequent values to return when using the facets pipe.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_92\n\nLANGUAGE: logsql\nCODE:\n```\n_time:1h error | facets 15 max_values_per_field 100000\n```\n\n----------------------------------------\n\nTITLE: Configuring Load Balancing with Multiple URLs in vmauth (YAML)\nDESCRIPTION: This YAML snippet configures load balancing in vmauth by providing a list of backend URLs under `url_prefix`. vmauth will distribute incoming requests among the specified `vminsert` instances using a least-loaded round-robin policy by default. It automatically handles temporarily unavailable backends.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmauth.md#2025-04-22_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\nunauthorized_user:\n  url_prefix:\n  - 'http://vminsert-1:8480/insert/0/prometheus/'\n  - 'http://vminsert-2:8480/insert/0/prometheus/'\n  - 'http://vminsert-3:8480/insert/0/prometheus/'\n```\n\n----------------------------------------\n\nTITLE: Defining Stream Aggregation Configuration - VictoriaMetrics/vmagent (YAML)\nDESCRIPTION: This YAML snippet defines a stream aggregation configuration block for use with VictoriaMetrics and vmagent, specifying filters, intervals, deduplication, label transformations, and output aggregation types. Key fields include 'match' for series selection, 'interval' for aggregation frequency, optional deduplication parameters, and relabeling configurations for both input and output samples. Requires a running instance of VictoriaMetrics or vmagent that loads configurations from the YAML file using the '-streamAggr.config' or '-remoteWrite.streamAggr.config' command-line flags; each key parameter influences how incoming time series data are processed and aggregated before storage or forwarding.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/stream-aggregation.md#2025-04-22_snippet_33\n\nLANGUAGE: yaml\nCODE:\n```\n  # name is an optional name of the given streaming aggregation config.\n  #\n  # If it is set, then it is used as `name` label in the exposed metrics\n  # for the given aggregation config at /metrics page.\n  # See https://docs.victoriametrics.com/vmagent/#monitoring and https://docs.victoriametrics.com/#monitoring\n- name: 'foobar'\n\n  # match is an optional filter for incoming samples to aggregate.\n  # It can contain arbitrary Prometheus series selector\n  # according to https://docs.victoriametrics.com/keyconcepts/#filtering .\n  # If match isn't set, then all the incoming samples are aggregated.\n  #\n  # match also can contain a list of series selectors. Then the incoming samples are aggregated\n  # if they match at least a single series selector.\n  #\n  match: 'http_request_duration_seconds_bucket{env=~\"prod|staging\"}'\n\n  # interval is the interval for the aggregation.\n  # The aggregated stats is sent to remote storage once per interval.\n  #\n  interval: 1m\n\n  # dedup_interval is an optional interval for de-duplication of input samples before the aggregation.\n  # Samples are de-duplicated on a per-series basis. See https://docs.victoriametrics.com/keyconcepts/#time-series\n  # and https://docs.victoriametrics.com/#deduplication\n  # The deduplication is performed after input_relabel_configs relabeling is applied.\n  # By default, the deduplication is disabled unless -remoteWrite.streamAggr.dedupInterval or -streamAggr.dedupInterval\n  # command-line flags are set.\n  #\n  # dedup_interval: 30s\n\n  # enable_windows is a boolean option to enable fixed aggregation windows.\n  # See https://docs.victoriametrics.com/stream-aggregation#aggregation-windows\n  #\n  # enable_windows: true\n\n  # staleness_interval is an optional interval for resetting the per-series state if no new samples\n  # are received during this interval for the following outputs:\n  # - histogram_bucket\n  # - increase\n  # - increase_prometheus\n  # - rate_avg\n  # - rate_sum\n  # - total\n  # - total_prometheus\n  # See https://docs.victoriametrics.com/stream-aggregation/#staleness for more details.\n  #\n  # staleness_interval: 2m\n  \n  # no_align_flush_to_interval disables aligning of flush times for the aggregated data to multiples of interval.\n  # By default, flush times for the aggregated data is aligned to multiples of interval.\n  # For example:\n  # - if `interval: 1m` is set, then flushes happen at the end of every minute,\n  # - if `interval: 1h` is set, then flushes happen at the end of every hour\n  #\n  # no_align_flush_to_interval: false\n\n  # flush_on_shutdown instructs to flush aggregated data to the storage on the first and the last intervals\n  # during vmagent starts, restarts or configuration reloads.\n  # Incomplete aggregated data isn't flushed to the storage by default, since it is usually confusing.\n  #\n  # flush_on_shutdown: false\n\n  # without is an optional list of labels, which must be removed from the output aggregation.\n  # See https://docs.victoriametrics.com/stream-aggregation/#aggregating-by-labels\n  #\n  # without: [instance]\n\n  # by is an optional list of labels, which must be preserved in the output aggregation.\n  # See https://docs.victoriametrics.com/stream-aggregation/#aggregating-by-labels\n  #\n  # by: [job, vmrange]\n\n  # outputs is the list of unique aggregations to perform on the input data.\n  # See https://docs.victoriametrics.com/stream-aggregation/#aggregation-outputs\n  #\n  outputs: [total]\n\n  # keep_metric_names instructs keeping the original metric names for the aggregated samples.\n  # This option can't be enabled together with `-streamAggr.keepInput` or `-remoteWrite.streamAggr.keepInput`.\n  # This option can be set only if outputs list contains a single output.\n  # By default, a special suffix is added to original metric names in the aggregated samples.\n  # See https://docs.victoriametrics.com/stream-aggregation/#output-metric-names\n  #\n  # keep_metric_names: false\n\n  # ignore_old_samples instructs ignoring input samples with old timestamps outside the current aggregation interval.\n  # See https://docs.victoriametrics.com/stream-aggregation/#ignoring-old-samples\n  # See also -remoteWrite.streamAggr.ignoreOldSamples and -streamAggr.ignoreOldSamples command-line flag.\n  #\n  # ignore_old_samples: false\n\n  # ignore_first_intervals instructs ignoring the first N aggregation intervals after process start.\n  # See https://docs.victoriametrics.com/stream-aggregation/#ignore-aggregation-intervals-on-start\n  # See also -remoteWrite.streamAggr.ignoreFirstIntervals and -streamAggr.ignoreFirstIntervals command-line flags.\n  #\n  # ignore_first_intervals: N\n\n  # drop_input_labels instructs dropping the given labels from input samples.\n  # The labels' dropping is performed before input_relabel_configs are applied.\n  # This also means that the labels are dropped before de-duplication ( https://docs.victoriametrics.com/stream-aggregation/#deduplication )\n  # and stream aggregation.\n  #\n  # drop_input_labels: [replica, availability_zone]\n\n  # input_relabel_configs is an optional relabeling rules,\n  # which are applied to the incoming samples after they pass the match filter\n  # and before being aggregated.\n  # See https://docs.victoriametrics.com/stream-aggregation/#relabeling\n  #\n  input_relabel_configs:\n  - target_label: vmaggr\n    replacement: before\n\n  # output_relabel_configs is an optional relabeling rules,\n  # which are applied to the aggregated output metrics.\n  #\n  output_relabel_configs:\n  - target_label: vmaggr\n    replacement: after\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoTunedModel in VictoriaMetrics using YAML\nDESCRIPTION: This YAML snippet demonstrates how to define and tune an AutoTunedModel in VictoriaMetrics anomaly detection. It sets model class aliases, the model to tune (zscore), and provides optimization parameters like anomaly percentage, cross-validation folds, optimization trials, reproducibility seed, timeout for optimization, parallelization, and selection of business-specific parameters to optimize. Required parameters such as anomaly_percentage and tuned_class_name are supplied, and the configuration is compatible with VictoriaMetrics v1.13.0 and above. The expected input is the configuration itself, which is read by vmanomaly, triggering automated tuning and fitting during model training. The output is an automatically tuned anomaly detection model; note that custom, self-referential, or rolling models with on-disk storage are not supported in this mode.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/anomaly-detection/components/models.md#2025-04-22_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\n# ...\\nmodels:\\n  your_desired_alias_for_a_model:\\n    class: 'auto'  # or 'model.auto.AutoTunedModel' until v1.13.0\\n    tuned_class_name: 'zscore'  # or 'model.zscore.ZscoreModel' until v1.13.0\\n    optimization_params:\\n      anomaly_percentage: 0.004  # required. i.e. we expect <= 0.4% of anomalies to be present in training data\\n      seed: 42  # fix reproducibility & determinism\\n      n_splits: 4  # how much folds are created for internal cross-validation\\n      n_trials: 128  # how many configurations to sample from search space during optimization\\n      timeout: 10  # how many seconds to spend on optimization for each trained model during `fit` phase call\\n      n_jobs: 1  # how many jobs in parallel to launch. Consider making it > 1 only if you have fit window containing > 10000 datapoints for each series\\n      optimized_business_params: []  # business-specific params to include in optimization, if not set is empty list\\n  # ...\n```\n\n----------------------------------------\n\nTITLE: Using topk_min Aggregate Function in MetricsQL - MetricsQL\nDESCRIPTION: This snippet demonstrates the syntax for `topk_min`, which returns up to `k` time series with the largest minimums from a chosen metric or aggregate result. When an optional label argument is set, it sums the remaining series under a synthesized label. Required: VictoriaMetrics with MetricsQL support. Key parameters: `k` (number of series to return), `q` (query expression), and optional label. Inputs: metric or aggregation expression; Outputs: up to `k` series plus optionally grouped remainder. Intended for focusing on lowest-baseline outlier detection or summarization.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/MetricsQL.md#2025-04-22_snippet_118\n\nLANGUAGE: MetricsQL\nCODE:\n```\n`topk_min(k, q, \\\"other_label=other_value\\\")`\n```\n\n----------------------------------------\n\nTITLE: Starting VictoriaMetrics Single Node via Docker\nDESCRIPTION: This snippet demonstrates how to pull the latest VictoriaMetrics Docker image and run a single-node instance with data persistence and exposed port 8428.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/Quick-Start.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull victoriametrics/victoria-metrics:v1.115.0\ndocker run -it --rm -v `pwd`/victoria-metrics-data:/victoria-metrics-data -p 8428:8428 \\\n victoriametrics/victoria-metrics:v1.115.0 --selfScrapeInterval=5s -storageDataPath=victoria-metrics-data\n```\n\n----------------------------------------\n\nTITLE: Defining delta_prometheus in MetricsQL - Markdown\nDESCRIPTION: Describes the delta_prometheus function for computing differences between first and last samples in a time window, matching Prometheus's delta behavior. Notes metric name handling, cross-reference to delta, and principal parameters.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/MetricsQL.md#2025-04-22_snippet_19\n\nLANGUAGE: Markdown\nCODE:\n```\n#### delta_prometheus\n\n`delta_prometheus(series_selector[d])` is a [rollup function](#rollup-functions), which calculates the difference between\nthe first and the last samples at the given lookbehind window `d` per each time series returned\nfrom the given [series_selector](https://docs.victoriametrics.com/keyconcepts/#filtering).\n\nThe behaviour of `delta_prometheus()` is close to the behaviour of `delta()` function in Prometheus.\nSee [this article](https://medium.com/@romanhavronenko/victoriametrics-promql-compliance-d4318203f51e) for details.\n\nMetric names are stripped from the resulting rollups. Add [keep_metric_names](#keep_metric_names) modifier in order to keep metric names.\n\nSee also [delta](#delta).\n\n```\n\n----------------------------------------\n\nTITLE: Building Production Binaries\nDESCRIPTION: Command to build production-ready statically linked binaries for VictoriaMetrics cluster components.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/Cluster-VictoriaMetrics.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmake vminsert-prod vmselect-prod vmstorage-prod\n```\n\n----------------------------------------\n\nTITLE: Filtering Logs by String Range in LogsQL\nDESCRIPTION: Demonstrates the `string_range()` filter in LogsQL to select log entries where the specified field (`user.name`) has a string value lexicographically between the lower bound (inclusive, 'A') and the upper bound (exclusive, 'C'). This effectively matches values starting with 'A' or 'B'.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_71\n\nLANGUAGE: logsql\nCODE:\n```\nuser.name:string_range(A, C)\n```\n\n----------------------------------------\n\nTITLE: Starting VMGateway with Authentication\nDESCRIPTION: Shell command to start vmgateway with authentication enabled, pointing to a local VictoriaMetrics instance for both read and write operations.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmgateway.md#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n./bin/vmgateway -eula -enable.auth -read.url http://localhost:8428 --write.url http://localhost:8428\n```\n\n----------------------------------------\n\nTITLE: Querying Targets Near Series Limit with MetricsQL\nDESCRIPTION: This MetricsQL query detects targets whose number of unique series exposed so far is approaching the configured series limit. It calculates the ratio of `scrape_series_current` to `scrape_series_limit` and selects targets where this ratio exceeds 0.9 (90%). This requires the series limit to be configured.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmagent.md#2025-04-22_snippet_21\n\nLANGUAGE: metricsql\nCODE:\n```\nscrape_series_current / scrape_series_limit > 0.9\n```\n\n----------------------------------------\n\nTITLE: Querying Failing Scrapes with MetricsQL\nDESCRIPTION: This MetricsQL query identifies scrape targets that have failed. It selects time series where the automatically generated `up` metric has a value of `0`, indicating an unsuccessful scrape attempt.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmagent.md#2025-04-22_snippet_13\n\nLANGUAGE: metricsql\nCODE:\n```\nup == 0\n```\n\n----------------------------------------\n\nTITLE: Running vmagent with Remote Write Configuration\nDESCRIPTION: Command for configuring vmagent to receive metrics via push-based protocols and forward them to a single-node VictoriaMetrics instance.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmagent.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n/path/to/vmagent -remoteWrite.url=https://victoria-metrics-host:8428/api/v1/write\n```\n\n----------------------------------------\n\nTITLE: Removing Empty Series with PromQL\nDESCRIPTION: The `drop_empty_series(q)` function eliminates any empty series from the supplied dataset `q`. This is useful when applying operators like the `default` operator selectively on non-empty series, optimizing the data processing workflow and ensuring only relevant data is processed. The transform function is part of PromQL and supports cases like conditional data replacement.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_74\n\nLANGUAGE: PromQL\nCODE:\n```\n`drop_empty_series(q)`\n```\n\n----------------------------------------\n\nTITLE: Derivative Rollup Function\nDESCRIPTION: Calculates per-second derivatives for adjacent raw samples and returns min, max and avg values.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_41\n\nLANGUAGE: metricsql\nCODE:\n```\nrollup_deriv(series_selector[d])\n```\n\n----------------------------------------\n\nTITLE: VictoriaMetrics Cluster Data Ingestion URL Pattern\nDESCRIPTION: This URL pattern is used for sending data to the VictoriaMetrics cluster via the `vminsert` component. It requires specifying the `vminsert` hostname/IP, the target `accountID` (tenant ID, can be `accountID:projectID` or `multitenant`), and a `suffix` indicating the data format and protocol (e.g., `prometheus`, `influx/write`, `datadog/api/v1/series`, `opentelemetry/v1/metrics`). The specific suffix determines how the ingested data is parsed.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/Cluster-VictoriaMetrics.md#2025-04-22_snippet_12\n\nLANGUAGE: url\nCODE:\n```\nhttp://<vminsert>:8480/insert/<accountID>/<suffix>\n```\n\n----------------------------------------\n\nTITLE: Restoring VictoriaMetrics Backup from Storage\nDESCRIPTION: Command to restore a backup from a specified storage location to a local path. The command requires specifying the source backup location using a storage-specific URI format and the target local directory where data will be restored.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmrestore.md#2025-04-22_snippet_0\n\nLANGUAGE: shellhelp\nCODE:\n```\n./vmrestore -src=<storageType>://<path/to/backup> -storageDataPath=<local/path/to/restore>\n```\n\n----------------------------------------\n\nTITLE: Preserving Metric Names After Binary Operation (MetricsQL)\nDESCRIPTION: Illustrates the `keep_metric_names` modifier applied to a binary operation (`/`). This ensures that the metric names (`foo`, `bar`) from the left-hand side operand are retained in the output time series after the division.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_25\n\nLANGUAGE: MetricsQL\nCODE:\n```\n({__name__=~\"foo|bar\"} / 10) keep_metric_names\n```\n\n----------------------------------------\n\nTITLE: Installing VictoriaMetrics Helm Chart - Shell\nDESCRIPTION: These commands configure the Helm repository for VictoriaMetrics and install or update the Helm chart repository. Prerequisites: a Kubernetes cluster, Helm, and kubectl. It prepares the environment for subsequent VictoriaMetrics deployment.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/guides/getting-started-with-opentelemetry/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nhelm repo add vm https://victoriametrics.github.io/helm-charts/\\nhelm repo update\n```\n\n----------------------------------------\n\nTITLE: Calculating Min, Max, Avg with Rollup Function in VictoriaMetrics\nDESCRIPTION: The `rollup` function calculates minimum, maximum, and average values for the raw samples over a specified lookbehind window `d`. It returns results in time series format with additional labels such as `rollup=\"min\"`, `rollup=\"max\"`, and `rollup=\"avg\"`. This function is generally used with gauges, and an optional second argument can specify which single result to return without a label.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/MetricsQL.md#2025-04-22_snippet_50\n\nLANGUAGE: Other\nCODE:\n```\nrollup(series_selector[d])\n```\n\n----------------------------------------\n\nTITLE: Configuring vmalert for Cluster VictoriaMetrics\nDESCRIPTION: Illustrates configuring vmalert in a cluster mode environment with separate vminsert and vmselect components for handling write/read paths. Utilizes URLs for executing rule expressions and persisting alert states, requiring cluster mode components to be available.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmalert.md#2025-04-22_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\n./bin/vmalert -rule=rules.yml  \\                                # Path to the file with rules configuration. Supports wildcard\n    -datasource.url=http://vmselect:8481/select/0/prometheus    # vmselect addr for executing rules expressions\n    -remoteWrite.url=http://vminsert:8480/insert/0/prometheus   # vminsert addr to persist alerts state and recording rules results\n    -remoteRead.url=http://vmselect:8481/select/0/prometheus    # vmselect addr for restoring alerts state after restart\n    -notifier.url=http://alertmanager:9093                      # AlertManager addr to send alerts when they trigger\n```\n\n----------------------------------------\n\nTITLE: Defining Scrape Configurations in VictoriaMetrics YAML\nDESCRIPTION: This YAML snippet illustrates the structure and available options within the `scrape_configs` section for a VictoriaMetrics scraping configuration file. It includes parameters like `job_name`, `scrape_interval`, `scrape_timeout`, `metrics_path`, `honor_labels`, `relabel_configs`, `metric_relabel_configs`, and various other settings to control how targets are discovered, scraped, and how metrics are processed. Each option is commented with its purpose, default behavior, and references to relevant documentation.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/sd_configs.md#2025-04-22_snippet_27\n\nLANGUAGE: yaml\nCODE:\n```\nscrape_configs:\n  # job_name must contain value for `job` label, which is added\n  # to all the metrics collected from the configured and discovered scrape targets.\n  # See https://prometheus.io/docs/concepts/jobs_instances/ .\n  #\n- job_name: \"...\"\n\n  # scrape_interval is an optional interval to scrape targets.\n  # By default, the scrape_interval specified in `global` section is used.\n  # See https://prometheus.io/docs/prometheus/latest/configuration/configuration/#configuration-file\n  # If `global` section doesn't contain the `scrape_interval` option,\n  # then one minute interval is used.\n  # Example values:\n  # - \"30s\" - 30 seconds\n  # - \"2m\" - 2 minutes\n  # The scrape_interval can be set on a per-target basis by specifying `__scrape_interval__`\n  # label during target relabeling phase.\n  # See https://docs.victoriametrics.com/vmagent/#relabeling\n  #\n  # scrape_interval: <duration>\n\n  # scrape_timeout is an optional timeout when scraping the targets.\n  # By default, the scrape_timeout specified in `global` section is used.\n  # See https://prometheus.io/docs/prometheus/latest/configuration/configuration/#configuration-file\n  # If `global` section doesn't contain the `scrape_timeout` option,\n  # then 10 seconds interval is used.\n  # Example values:\n  # - \"30s\" - 30 seconds\n  # - \"2m\" - 2 minutes\n  # The `scrape_timeout` cannot exceed the `scrape_interval`.\n  # The scrape_timeout can be set on a per-target basis by specifying `__scrape_timeout__`\n  # label during target relabeling phase.\n  # See https://docs.victoriametrics.com/vmagent/#relabeling\n  #\n  # scrape_timeout: <duration>\n\n  # max_scrape_size is an optional parameter for limiting the response size in bytes from scraped targets.\n  # If max_scrape_size isn't set, then the limit from -promscrape.maxScrapeSize command-line flag is used instead.\n  # Example values:\n  # - \"10MiB\" - 10 * 1024 * 1024 bytes\n  # - \"100MB\" - 100 * 1000 * 1000 bytes\n  #\n  # max_scrape_size: <size>\n\n  # metrics_path is the path to fetch metrics from targets.\n  # By default, metrics are fetched from \"/metrics\" path.\n  #\n  # metrics_path: \"...\"\n\n  # honor_labels controls how to handle conflicts between labels that are\n  # already present in scraped data and labels that would be attached\n  # server-side \"job\" and \"instance\" labels, manually configured target\n  # labels, labels generated by service discovery, etc.\n  #\n  # If honor_labels is set to \"true\", label conflicts are resolved by keeping label\n  # values from the scraped data and ignoring the conflicting server-side labels.\n  #\n  # If honor_labels is set to \"false\", label conflicts are resolved by renaming\n  # conflicting labels in the scraped data to \"exported_<original-label>\" (for\n  # example \"exported_instance\", \"exported_job\") and then attaching server-side\n  # labels.\n  #\n  # Setting honor_labels to \"true\" is useful for use cases such as federation and\n  # scraping the Pushgateway, where all labels specified in the target should be\n  # preserved.\n  #\n  # By default, honor_labels is set to false for security and consistency reasons.\n  #\n  # honor_labels: <boolean>\n\n  # honor_timestamps controls whether to respect the timestamps present in scraped data.\n  #\n  # If honor_timestamps is set to \"true\", the timestamps of the metrics exposed\n  # by the target will be used.\n  #\n  # If honor_timestamps is set to \"false\", the timestamps of the metrics exposed\n  # by the target will be ignored.\n  #\n  # By default, honor_timestamps is set to false.\n  # See https://github.com/VictoriaMetrics/VictoriaMetrics/issues/4697#issuecomment-1656540535 for details.\n  #\n  # honor_timestamps: <boolean>\n\n  # scheme configures the protocol scheme used for requests.\n  # Supported values: http and https.\n  # By default, http is used.\n  #\n  # scheme: \"...\"\n\n  # Optional query arg parameters to add to scrape url.\n  #\n  # params:\n  #   \"param_name1\": [\"value1\", ..., \"valueN\"]\n  #   ...\n  #   \"param_nameM\": [\"valueM1\", ..., \"valueMN\"]\n\n  # relabel_configs is an optional relabeling configurations\n  # for the specified and discovered scrape targets.\n  # See https://docs.victoriametrics.com/vmagent/#relabeling\n  #\n  # relabel_configs:\n  # - <relabel_config> ...\n\n  # metric_relabel_configs is an optional relabeling configs\n  # for the collected metrics from active scrape targets.\n  # See https://docs.victoriametrics.com/vmagent/#relabeling\n  #\n  # metric_relabel_configs:\n  # - <relabel_config> ...\n\n  # sample_limit is an optional per-scrape limit on number\n  # of scraped samples that will be accepted.\n  # If more than this number of samples are present after metric relabeling\n  # the entire scrape will be treated as failed.\n  # By default, the limit is disabled.\n  # The sample_limit can be set on a per-target basis by specifying `__sample_limit__`\n  # label during target relabeling phase. Available starting from v1.103.0.\n  # See https://docs.victoriametrics.com/vmagent/#relabeling\n  #\n  # sample_limit: <int>\n\n  # disable_compression allows disabling HTTP compression for responses received from scrape targets.\n  # By default, scrape targets are queried with `Accept-Encoding: gzip` http request header,\n  # so targets could send compressed responses in order to save network bandwidth.\n  # See https://docs.victoriametrics.com/vmagent/#scrape_config-enhancements\n  #\n  # disable_compression: <boolean>\n\n  # disable_keepalive allows disabling HTTP keep-alive when scraping targets.\n  # By default, HTTP keep-alive is enabled, so TCP connections to scrape targets\n  # could be reused.\n  # See https://docs.victoriametrics.com/vmagent/#scrape_config-enhancements\n  #\n  # disable_keepalive: <boolean>\n\n  # stream_parse allows enabling stream parsing mode when scraping targets.\n  # By default, stream parsing mode is disabled for targets which return up to a few thousands samples.\n  # See https://docs.victoriametrics.com/vmagent/#stream-parsing-mode .\n  # The stream_parse can be set on a per-target basis by specifying `__stream_parse__`\n  # label during target relabeling phase.\n  # See https://docs.victoriametrics.com/vmagent/#relabeling\n  #\n  # stream_parse: <boolean>\n\n  # scrape_align_interval allows aligning scrapes to the given interval.\n  # Example values:\n  # - \"5m\" - align scrapes to every 5 minutes.\n  # - \"1h\" - align scrapes to every hour.\n  # See https://docs.victoriametrics.com/vmagent/#scrape_config-enhancements\n  #\n  # scrape_align_interval: <duration>\n\n  # scrape_offset allows specifying the exact offset for scrapes.\n  # Example values:\n  # - \"5m\" - align scrapes to every 5 minutes.\n  # - \"1h\" - align scrapes to every hour.\n  # See https://docs.victoriametrics.com/vmagent/#scrape_config-enhancements\n  #\n  # scrape_offset: <duration>\n\n  # series_limit is an optional limit on the number of unique time series\n  # a single target can expose during all the scrapes on the time window of 24h.\n  # By default, there is no limit on the number of exposed series.\n  # See https://docs.victoriametrics.com/vmagent/#cardinality-limiter .\n  # The series_limit can be set on a per-target basis by specifying `__series_limit__`\n  # label during target relabeling phase.\n  # See https://docs.victoriametrics.com/vmagent/#relabeling\n  #\n  # series_limit: ...\n\n  # no_stale_markers allows disabling staleness tracking.\n  # By default, staleness tracking is enabled for all the discovered scrape targets.\n  # See https://docs.victoriametrics.com/vmagent/#prometheus-staleness-markers\n  #\n  # no_stale_markers: <boolean>\n\n  # Additional HTTP client options for target scraping can be specified here.\n  # See https://docs.victoriametrics.com/sd_configs/#http-api-client-options\n```\n\n----------------------------------------\n\nTITLE: Example: Load Balancing vmselect Nodes in vmauth (YAML)\nDESCRIPTION: This YAML configuration provides a practical example of load balancing requests across three `vmselect` nodes in a VictoriaMetrics cluster. It uses a list of backend URLs in `url_prefix` and specifies that requests should be retried on other nodes if a backend returns an HTTP 500 or 502 status code.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmauth.md#2025-04-22_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\nunauthorized_user:\n  url_prefix:\n  - http://vmselect1:8481/\n  - http://vmselect2:8481/\n  - http://vmselect3:8481/\n  retry_status_codes: [500, 502]\n```\n\n----------------------------------------\n\nTITLE: Defining delta in MetricsQL - Markdown\nDESCRIPTION: Documents the delta rollup function which computes the difference between the last sample before and within a lookbehind window, noting special behavior vs Prometheus, metric name handling, PromQL support, and relevant inputs and outputs. Highlights cross-references to similar functions.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/MetricsQL.md#2025-04-22_snippet_18\n\nLANGUAGE: Markdown\nCODE:\n```\n#### delta\n\n`delta(series_selector[d])` is a [rollup function](#rollup-functions), which calculates the difference between\nthe last sample before the given lookbehind window `d` and the last sample at the given lookbehind window `d`\nper each time series returned from the given [series_selector](https://docs.victoriametrics.com/keyconcepts/#filtering).\n\nThe behaviour of `delta()` function in MetricsQL is slightly different to the behaviour of `delta()` function in Prometheus.\nSee [this article](https://medium.com/@romanhavronenko/victoriametrics-promql-compliance-d4318203f51e) for details.\n\nMetric names are stripped from the resulting rollups. Add [keep_metric_names](#keep_metric_names) modifier in order to keep metric names.\n\nThis function is supported by PromQL.\n\nSee also [increase](#increase) and [delta_prometheus](#delta_prometheus).\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Online Z-score Model in VictoriaMetrics (YAML)\nDESCRIPTION: This YAML snippet demonstrates how to configure the Online Z-score anomaly detection model within VictoriaMetrics, specifying model class, anomaly threshold, and minimum sample requirements. Dependencies include VictoriaMetrics vmanomaly component (>= v1.13.0 for alias support) and compatible YAML processing. Key parameters include 'class' (either 'zscore_online' or full class path), 'z_threshold' (score threshold), and 'min_n_samples_seen' (samples for scoring). Outputs like 'anomaly_score' and 'yhat' are selectable, and common arguments offer further tuning. Input is a YAML configuration; output is model behavior as configured.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/anomaly-detection/components/models.md#2025-04-22_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\nmodels:\n  your_desired_alias_for_a_model:\n    class: \"zscore_online\"  # or 'model.online.OnlineZscoreModel'\n    z_threshold: 3.5\n    min_n_samples_seen: 128  # i.e. calculate it as full seasonality / data freq\n    provide_series: ['anomaly_score', 'yhat']  # common arg example\n    # Common arguments for built-in model, if not set, default to\n    # See https://docs.victoriametrics.com/anomaly-detection/components/models/#common-args\n    #\n    # provide_series: ['anomaly_score', 'yhat', 'yhat_lower', 'yhat_upper']\n    # schedulers: [all scheduler aliases defined in `scheduler` section]\n    # queries: [all query aliases defined in `reader.queries` section]\n    # detection_direction: 'both'  # meaning both drops and spikes will be captured\n    # min_dev_from_expected: 0.0  # meaning, no minimal threshold is applied to prevent smaller anomalies\n    # scale: [1.0, 1.0]  # if needed, prediction intervals' width can be increased (>1) or narrowed (<1)\n    # clip_predictions: False  # if data_range for respective `queries` is set in reader, `yhat.*` columns will be clipped\n    # anomaly_score_outside_data_range: 1.01  # auto anomaly score (1.01) if `y` (real value) is outside of data_range, if set\n\n```\n\n----------------------------------------\n\nTITLE: Increase Calculation in PromQL-Compliant Markdown\nDESCRIPTION: 'increase' function calculates the increase, accounting the last sample before window 'd'. Compatible with counters and influenced by PromQL compliance debates.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/MetricsQL.md#2025-04-22_snippet_33\n\nLANGUAGE: Markdown\nCODE:\n```\n`increase(series_selector[d])` is a [rollup function](#rollup-functions), which calculates the increase over the given lookbehind window `d`\\nper each time series returned from the given [series_selector](https://docs.victoriametrics.com/keyconcepts/#filtering).\n```\n\n----------------------------------------\n\nTITLE: Using Histogram in Go with VictoriaMetrics\nDESCRIPTION: This Go code snippet illustrates how to instrument a Go application with a histogram to track the number of rows processed per query using the VictoriaMetrics metrics package. It defines and updates the histogram with the number of rows per query, incrementing associated counters.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/keyConcepts/keyConcepts.md#2025-04-22_snippet_7\n\nLANGUAGE: Go\nCODE:\n```\n\"// define the histogram\\nrowsReadPerQuery := metrics.NewHistogram(`vm_rows_read_per_query`)\\n\\n// use the histogram during processing\\nfor _, query := range queries {\\n    rowsReadPerQuery.Update(float64(len(query.Rows)))\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Mode Calculation in PromQL\nDESCRIPTION: Calculates statistical mode over raw samples within a lookbehind window for time series. Expects discrete values and is usually applied to gauges.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/MetricsQL.md#2025-04-22_snippet_46\n\nLANGUAGE: promql\nCODE:\n```\nmode_over_time(series_selector[d])\n```\n\n----------------------------------------\n\nTITLE: Performing Simple Linear Regression Over Range - MetricsQL (English)\nDESCRIPTION: The `range_linear_regression(q)` function applies simple linear regression across the points in each time series output by `q`. Useful for trend analysis, capacity planning, and forecasting in metrics data; accepts one input query per invocation.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/MetricsQL.md#2025-04-22_snippet_84\n\nLANGUAGE: MetricsQL\nCODE:\n```\n`range_linear_regression(q)`\n```\n\n----------------------------------------\n\nTITLE: Configuring File-based Service Discovery in YAML\nDESCRIPTION: Configuration example for file-based service discovery, demonstrating how to specify file patterns and URLs for target discovery.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/sd_configs.md#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nscrape_configs:\n- job_name: file\n  file_sd_configs:\n\n    # files must contain a list of file patterns for files with scrape targets.\n    # The last path segment can contain `*`, which matches any number of chars in file name.\n    #\n    # files may contain http/https urls additionally to local files. These urls cannot contain `*`.\n    #\n  - files:\n    - \"my/path/*.yaml\"\n    - \"another/path.json\"\n    - \"http://central-config-server/targets?type=foobar\"\n```\n\n----------------------------------------\n\nTITLE: InfluxDB Line Protocol Example for VictoriaMetrics Ingestion - InfluxTextMetric\nDESCRIPTION: Illustrates a canonical InfluxDB line protocol sample with measurement, tags, and numeric fields. This line demonstrates how time series data is represented before being ingested by VictoriaMetrics. Inputs consist of a measurement name, tag-value pairs, and field-value data. It is intended for use as a direct ingestion input or documentation reference.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/README.md#2025-04-22_snippet_13\n\nLANGUAGE: influxtextmetric\nCODE:\n```\nfoo,tag1=value1,tag2=value2 field1=12,field2=40\n```\n\n----------------------------------------\n\nTITLE: Applying mad_over_time Rollup Function - PromQL/Pseudocode\nDESCRIPTION: Calculates the Median Absolute Deviation (MAD) over raw samples within a specified window 'd' for each time series matching the series_selector. Requires access to VictoriaMetrics or compatible PromQL endpoint supporting this function. The parameter 'series_selector' filters the series to process, and 'd' defines the lookbehind window. The result is a per-series MAD value; typically applied to gauge metrics. Inputs: any time series; Output: per-series MAD numeric values.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_40\n\nLANGUAGE: pseudo-promql\nCODE:\n```\n`mad_over_time(series_selector[d])`\n```\n\n----------------------------------------\n\nTITLE: Unrolling JSON Arrays in VictoriaLogs Query\nDESCRIPTION: Demonstrates how to use the unroll pipe to expand JSON arrays from specific fields into separate rows.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_173\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m | unroll (timestamp, value)\n```\n\n----------------------------------------\n\nTITLE: Applying VictoriaMetrics Histogram in Markdown\nDESCRIPTION: The snippet demonstrates the use of the 'histogram_over_time' rollup function which calculates VictoriaMetrics histogram over raw samples for a given lookbehind window 'd'. The result is useful for calculating quantiles, such as the median temperature by country over 24 hours.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/MetricsQL.md#2025-04-22_snippet_27\n\nLANGUAGE: Markdown\nCODE:\n```\n`histogram_over_time(series_selector[d])` is a [rollup function](#rollup-functions), which calculates\\n[VictoriaMetrics histogram](https://godoc.org/github.com/VictoriaMetrics/metrics#Histogram) over [raw samples](https://docs.victoriametrics.com/keyconcepts/#raw-samples)\\non the given lookbehind window `d`.\n```\n\nLANGUAGE: Markdown\nCODE:\n```\n`histogram_quantile(0.5, sum(histogram_over_time(temperature[24h])) by (vmrange,country))`.\n```\n\n----------------------------------------\n\nTITLE: Loading vmagent Scrape Configs from Multiple Files (YAML)\nDESCRIPTION: Example YAML configuration for the main vmagent config file (`-promscrape.config`), demonstrating the use of `scrape_config_files` to load scrape job definitions from multiple sources, including directory patterns (`configs/*.yml`), a specific local file (`single_scrape_config.yml`), and a remote URL (`https://config-server/scrape_config.yml`).\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmagent.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nscrape_config_files:\n- configs/*.yml\n- single_scrape_config.yml\n- https://config-server/scrape_config.yml\n```\n\n----------------------------------------\n\nTITLE: Per-Second Rate Calculations with Rollup Rate Function in VictoriaMetrics\nDESCRIPTION: The `rollup_rate` function evaluates per-second change rates for raw samples and returns min, max, and avg rates for these changes. Calculated independently per time series, the function can also return a specific rate result without additional labels by specifying an optional argument.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/MetricsQL.md#2025-04-22_snippet_55\n\nLANGUAGE: Other\nCODE:\n```\nrollup_rate(series_selector[d])\n```\n\n----------------------------------------\n\nTITLE: Defining default_rollup in MetricsQL - Markdown\nDESCRIPTION: Describes default_rollup as a function that selects the last raw sample in a lookbehind window, with special handling for staleness markers, automatic window calculation if omitted, and behaviors that help prevent gaps in graphs. Explains relevant parameters and operational nuances.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/MetricsQL.md#2025-04-22_snippet_17\n\nLANGUAGE: Markdown\nCODE:\n```\n#### default_rollup\n\n`default_rollup(series_selector[d])` is a [rollup function](#rollup-functions), which returns the last [raw sample](https://docs.victoriametrics.com/keyconcepts/#raw-samples)\nvalue on the given lookbehind window `d` per each time series returned from the given [series_selector](https://docs.victoriametrics.com/keyconcepts/#filtering).\nCompared to [last_over_time](#last_over_time) it accounts for [staleness markers](https://docs.victoriametrics.com/vmagent/#prometheus-staleness-markers) to detect stale series.\n\nIf the lookbehind window is skipped in square brackets, then it is automatically calculated as `max(step, scrape_interval)`, where `step` is the query arg value\npassed to [/api/v1/query_range](https://docs.victoriametrics.com/keyconcepts/#range-query) or [/api/v1/query](https://docs.victoriametrics.com/keyconcepts/#instant-query),\nwhile `scrape_interval` is the interval between [raw samples](https://docs.victoriametrics.com/keyconcepts/#raw-samples) for the selected time series.\nThis allows avoiding unexpected gaps on the graph when `step` is smaller than the `scrape_interval`.\n\n```\n\n----------------------------------------\n\nTITLE: Predicting Future Trends with predict_linear - PromQL/Pseudocode\nDESCRIPTION: Estimates the value of a metric 't' seconds into the future using linear regression on raw samples in window 'd'. Requires two arguments: a time series selector and integer seconds 't'. Prediction is per series. Useful for trend analysis or capacity planning. Supported by PromQL.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_46\n\nLANGUAGE: pseudo-promql\nCODE:\n```\n`predict_linear(series_selector[d], t)`\n```\n\n----------------------------------------\n\nTITLE: Installing VictoriaMetrics Single Node Binary\nDESCRIPTION: This series of commands demonstrates how to install VictoriaMetrics as a single-node binary, create a system user, set up data storage, and configure it as a Linux service.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/Quick-Start.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo tar -xvf <victoriametrics-archive> -C /usr/local/bin\n\nsudo useradd -s /usr/sbin/nologin victoriametrics\n\nsudo mkdir -p /var/lib/victoria-metrics && sudo chown -R victoriametrics:victoriametrics /var/lib/victoria-metrics\n\nsudo bash -c 'cat <<END >/etc/systemd/system/victoriametrics.service\n[Unit]\nDescription=VictoriaMetrics service\nAfter=network.target\n\n[Service]\nType=simple\nUser=victoriametrics\nGroup=victoriametrics\nExecStart=/usr/local/bin/victoria-metrics-prod -storageDataPath=/var/lib/victoria-metrics -retentionPeriod=90d -selfScrapeInterval=10s\nSyslogIdentifier=victoriametrics\nRestart=always\n\nPrivateTmp=yes\nProtectHome=yes\nNoNewPrivileges=yes\n\nProtectSystem=full\n\n[Install]\nWantedBy=multi-user.target\nEND'\n\nsudo systemctl daemon-reload && sudo systemctl enable --now victoriametrics.service\n\nsudo systemctl status victoriametrics.service\n```\n\n----------------------------------------\n\nTITLE: Counting Stale Samples Over Time in VictoriaMetrics\nDESCRIPTION: The stale_samples_over_time function calculates the number of staleness markers within a specified time window for each time series matching the given selector.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/MetricsQL.md#2025-04-22_snippet_61\n\nLANGUAGE: metricsql\nCODE:\n```\nstale_samples_over_time(series_selector[d])\n```\n\n----------------------------------------\n\nTITLE: Format Pipe Basic Usage\nDESCRIPTION: Combines log fields according to a pattern and stores in result_field. Shows formatting IP and port into a message.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_103\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m | format \"request from <ip>:<port>\" as _msg\n```\n\n----------------------------------------\n\nTITLE: Using Limit Pipe in VictoriaLogs Query\nDESCRIPTION: This command demonstrates the use of the 'limit' pipe in the query to return up to 10 random log entries containing the 'error' word.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/querying/README.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncurl http://localhost:9428/select/logsql/query -d 'query=error | limit 10'\n```\n\n----------------------------------------\n\nTITLE: Calculating Histogram Over Time with VictoriaMetrics - PromQL\nDESCRIPTION: This PromQL example demonstrates how to compute a median temperature by country over the last 24 hours using the histogram_over_time and histogram_quantile rollup functions. It depends on a temperature time series metric and assumes VictoriaMetrics query processing. The key parameters include the quantile (e.g., 0.5 for median), the histogram rollup over a 24-hour window, and grouping by vmrange and country. The output is the median quantile calculated per group; ensure metric and labels exist as described.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_39\n\nLANGUAGE: promql\nCODE:\n```\nhistogram_quantile(0.5, sum(histogram_over_time(temperature[24h])) by (vmrange,country))\n```\n\n----------------------------------------\n\nTITLE: Calculating Quantile Over Range using range_quantile() in MetricsQL\nDESCRIPTION: The `range_quantile(phi, q)` transform function computes the specified `phi`-quantile across the data points within the selected time range for each time series returned by `q`. The `phi` parameter must be a value between 0 and 1, inclusive.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_105\n\nLANGUAGE: MetricsQL\nCODE:\n```\nrange_quantile(phi, q)\n```\n\n----------------------------------------\n\nTITLE: Generating Histogram Stats in LogsQL\nDESCRIPTION: Demonstrates how to generate histogram buckets for a field grouped by host over a 5-minute period, with options for processing duration and numeric values.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_185\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m | stats by (host) histogram(response_size)\n```\n\nLANGUAGE: json\nCODE:\n```\n[{\"vmrange\":\"...\",\"hits\":...},...,{\"vmrange\":\"...\",\"hits\":...}]\n```\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m\n  | stats histogram(response_size) as buckets\n  | unroll (buckets)\n  | unpack_json from buckets\n```\n\n----------------------------------------\n\nTITLE: Running vmalert with Basic Configuration\nDESCRIPTION: Example command to start vmalert with essential configuration parameters including rule file path, datasource URL, Alertmanager URL, remote write URL, remote read URL, and external labels for rule identification.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmalert.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n./bin/vmalert -rule=alert.rules \\            # Path to the file with rules configuration. Supports wildcard\n    -datasource.url=http://localhost:8428 \\  # Prometheus HTTP API compatible datasource\n    -notifier.url=http://localhost:9093 \\    # AlertManager URL (required if alerting rules are used)\n    -notifier.url=http://127.0.0.1:9093 \\    # AlertManager replica URL\n    -remoteWrite.url=http://localhost:8428 \\ # Remote write compatible storage to persist rules and alerts state info (required if recording rules are used)\n    -remoteRead.url=http://localhost:8428 \\  # MetricsQL compatible datasource to restore alerts state from\n    -external.label=cluster=east-1 \\         # External label to be applied for each rule\n    -external.label=replica=a                # Multiple external labels may be set\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Service Discovery in YAML\nDESCRIPTION: Example YAML configuration for Azure service discovery in VictoriaMetrics. It includes options for subscription ID, authentication method, tenant ID, client ID, and other Azure-specific settings.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/sd_configs.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nscrape_configs:\n- job_name: azure\n  azure_sd_configs:\n\n    # subscription_id is a mandatory subscription ID.\n    #\n  - subscription_id: \"...\"\n\n    # environment is an optional Azure environment. By default \"AzurePublicCloud\" is used.\n    #\n    # environment: \"...\"\n\n    # authentication_method is an optional authentication method, either OAuth or ManagedIdentity.\n    # See https://docs.microsoft.com/en-us/azure/active-directory/managed-identities-azure-resources/overview\n    # By default OAuth is used.\n    #\n    # authentication_method: \"...\"\n\n    # tenant_id is an optional tenant ID. Only required with authentication_method OAuth.\n    #\n    # tenant_id: \"...\"\n\n    # client_id is an optional client ID. Only required with authentication_method OAuth.\n    #\n    # client_id: \"...\"\n\n    # client_secret is an optional client secret. Only required with authentication_method OAuth.\n    #\n    # client_secret: \"...\"\n\n    # resource_group is an optional resource group name. Limits discovery to this resource group. \n    #\n    # resource_group: \"...\"\n\n    # port is an optional port to scrape metrics from.\n    # Port 80 is used by default.\n    #\n    # port: ...\n\n    # Additional HTTP API client options can be specified here.\n    # See https://docs.victoriametrics.com/sd_configs/#http-api-client-options\n```\n\n----------------------------------------\n\nTITLE: Querying Log Facets with VictoriaLogs HTTP API\nDESCRIPTION: Example of querying log facets for error logs over the last hour using the /select/logsql/facets endpoint. Returns most frequent values per field seen in matching logs.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/querying/README.md#2025-04-22_snippet_16\n\nLANGUAGE: sh\nCODE:\n```\ncurl http://localhost:9428/select/logsql/facets -d 'query=_time:1h error'\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"facets\": [\n    {\n      \"field_name\": \"kubernetes_container_name\",\n      \"values\": [\n        {\n          \"field_value\": \"victoria-logs\",\n          \"hits\": 442378\n        },\n        {\n          \"field_value\": \"victoria-metrics\",\n          \"hits\": 34783\n        }\n      ]\n    },\n    {\n      \"field_name\": \"kubernetes_pod_name\",\n      \"values\": [\n        {\n          \"field_value\": \"victoria-logs-0\",\n          \"hits\": 232385\n        }\n        {\n          \"field_value\": \"victoria-logs-1\",\n          \"hits\": 123898\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Environment Variables with Koanf in Go\nDESCRIPTION: This snippet demonstrates how to load configuration from a JSON file and merge it with environment variables using Koanf. It includes a custom function to transform environment variable names.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/knadh/koanf/v2/README.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"strings\"\n\n\t\"github.com/knadh/koanf/v2\"\n\t\"github.com/knadh/koanf/parsers/json\"\n\t\"github.com/knadh/koanf/providers/env\"\n\t\"github.com/knadh/koanf/providers/file\"\n)\n\n// Global koanf instance. Use . as the key path delimiter. This can be / or anything.\nvar k = koanf.New(\".\")\n\nfunc main() {\n\t// Load JSON config.\n\tif err := k.Load(file.Provider(\"mock/mock.json\"), json.Parser()); err != nil {\n\t\tlog.Fatalf(\"error loading config: %v\", err)\n\t}\n\n\t// Load environment variables and merge into the loaded config.\n\t// \"MYVAR\" is the prefix to filter the env vars by.\n\t// \".\" is the delimiter used to represent the key hierarchy in env vars.\n\t// The (optional, or can be nil) function can be used to transform\n\t// the env var names, for instance, to lowercase them.\n\t//\n\t// For example, env vars: MYVAR_TYPE and MYVAR_PARENT1_CHILD1_NAME\n\t// will be merged into the \"type\" and the nested \"parent1.child1.name\"\n\t// keys in the config file here as we lowercase the key, \n\t// replace `_` with `.` and strip the MYVAR_ prefix so that \n\t// only \"parent1.child1.name\" remains.\n\tk.Load(env.Provider(\"MYVAR_\", \".\", func(s string) string {\n\t\treturn strings.Replace(strings.ToLower(\n\t\t\tstrings.TrimPrefix(s, \"MYVAR_\")), \"_\", \".\", -1)\n\t}), nil)\n\n\tfmt.Println(\"name is = \", k.String(\"parent1.child1.name\"))\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Word Search in LogsQL\nDESCRIPTION: A simple LogsQL query that searches for the word 'error' in log messages. This is the most basic form of query in LogsQL.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_0\n\nLANGUAGE: logsql\nCODE:\n```\nerror\n```\n\n----------------------------------------\n\nTITLE: Outlier Removal Functions in MetricsQL\nDESCRIPTION: Set of functions for removing outliers from time series data using different statistical approaches, including median absolute deviation, z-score, and percentage-based trimming.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_124\n\nLANGUAGE: markdown\nCODE:\n```\n#### range_trim_outliers\n\n`range_trim_outliers(k, q)` is a [transform function](#transform-functions), which drops points located farther than `k*range_mad(q)`\nfrom the `range_median(q)`. E.g. it is equivalent to the following query: `q ifnot (abs(q - range_median(q)) > k*range_mad(q))`.\n\nSee also [range_trim_spikes](#range_trim_spikes) and [range_trim_zscore](#range_trim_zscore).\n```\n\nLANGUAGE: markdown\nCODE:\n```\n#### range_trim_spikes\n\n`range_trim_spikes(phi, q)` is a [transform function](#transform-functions), which drops `phi` percent of biggest spikes from time series returned by `q`.\nThe `phi` must be in the range `[0..1]`, where `0` means `0%` and `1` means `100%`.\n\nSee also [range_trim_outliers](#range_trim_outliers) and [range_trim_zscore](#range_trim_zscore).\n```\n\nLANGUAGE: markdown\nCODE:\n```\n#### range_trim_zscore\n\n`range_trim_zscore(z, q)` is a [transform function](#transform-functions), which drops points located farther than `z*range_stddev(q)`\nfrom the `range_avg(q)`. E.g. it is equivalent to the following query: `q ifnot (abs(q - range_avg(q)) > z*range_avg(q))`.\n\nSee also [range_trim_outliers](#range_trim_outliers) and [range_trim_spikes](#range_trim_spikes).\n```\n\nLANGUAGE: markdown\nCODE:\n```\n#### range_zscore\n\n`range_zscore(q)` is a [transform function](#transform-functions), which calculates [z-score](https://en.wikipedia.org/wiki/Standard_score)\nfor points returned by `q`, e.g. it is equivalent to the following query: `(q - range_avg(q)) / range_stddev(q)`.\n```\n\n----------------------------------------\n\nTITLE: Filtering Metrics Using Relabeling Config for Alternate Remote Write Destination - YAML\nDESCRIPTION: This YAML snippet configures vmagent to keep only metrics where the 'env' label equals 'prod'. It is used as a relabeling configuration file assigned to a specific remoteWrite.url destination, ensuring that only production environment metrics are routed to the corresponding output. The configuration works by specifying a 'keep' action, matching the 'env' label to 'prod', and should be assigned via the '-remoteWrite.urlRelabelConfig' flag; ensure this file is aligned in order with its URL. It has no special dependencies beyond core vmagent support for relabeling.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmagent.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n- action: keep\\n  source_labels: [env]\\n  regex: \\\"prod\\\"\n```\n\n----------------------------------------\n\nTITLE: Conditional Stats Query\nDESCRIPTION: Calculates counts of HTTP methods (GET, POST, PUT) and total logs over 5 minutes using conditional filters.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_144\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m | stats\n  count() if (GET) gets,\n  count() if (POST) posts,\n  count() if (PUT) puts,\n  count() total\n```\n\n----------------------------------------\n\nTITLE: Minimum Value Calculation in PromQL\nDESCRIPTION: Calculates minimum value over raw samples within a lookbehind window for time series. Standard PromQL function typically used with gauges.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/MetricsQL.md#2025-04-22_snippet_45\n\nLANGUAGE: promql\nCODE:\n```\nmin_over_time(series_selector[d])\n```\n\n----------------------------------------\n\nTITLE: Querying Multiple Metrics via API Export Endpoint - VictoriaMetrics - Shell\nDESCRIPTION: This 'curl' command retrieves multiple ingested time series from VictoriaMetrics by specifying multiple 'match[]' parameters in the HTTP GET request. The response will return JSON lines corresponding to each matched metric. The export API must be available on the provided URL for this operation.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/README.md#2025-04-22_snippet_31\n\nLANGUAGE: sh\nCODE:\n```\ncurl -G 'http://localhost:8428/api/v1/export' -d 'match[]=x.y.z' -d 'match[]=foo' -d 'match[]=bar'\n```\n\n----------------------------------------\n\nTITLE: Using Case-Insensitive Filters - LogsQL\nDESCRIPTION: Demonstrates using the i() wrapper in LogsQL for case-insensitive filtering of words, phrases, or prefixes. It covers its applications, limitations (such as handling superfluous affixes), and optimization tips for performance.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_66\n\nLANGUAGE: logsql\nCODE:\n```\ni(error)\n```\n\nLANGUAGE: logsql\nCODE:\n```\nlog.level:i(error)\n```\n\nLANGUAGE: logsql\nCODE:\n```\n\"log:level\":i(\"error\")\n```\n\n----------------------------------------\n\nTITLE: Calculating Average Temperature Over Time in PromQL\nDESCRIPTION: This snippet demonstrates how to use the avg_over_time function to calculate the average temperature over the last 24 hours for selected time series.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_23\n\nLANGUAGE: promql\nCODE:\n```\navg_over_time(temperature[24h])\n```\n\n----------------------------------------\n\nTITLE: Configuring vmagent with Custom Member Label in Shell\nDESCRIPTION: This shell command demonstrates how to configure a vmagent instance with a custom member label. It sets up the instance as part of a two-member cluster and adds a 'vmagent_instance' label to all scraped metrics.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmagent.md#2025-04-22_snippet_40\n\nLANGUAGE: sh\nCODE:\n```\n/path/to/vmagent -promscrape.cluster.membersCount=2 -promscrape.cluster.memberNum=0 -promscrape.cluster.memberLabel=vmagent_instance\n```\n\n----------------------------------------\n\nTITLE: Reading an Object from Google Cloud Storage Bucket in Go\nDESCRIPTION: This snippet shows how to read the content of an object named \"object1\" from a specified \"bucket\" using a previously initialized `storage.Client`. It obtains a reader for the object, reads the entire content using `io.ReadAll`, handles potential errors during reading, and ensures the reader is closed using `defer rc.Close()`. Dependencies include `io` and `log` packages, along with the storage client and context.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/cloud.google.com/go/storage/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n```go\n// Read the object1 from bucket.\nrc, err := client.Bucket(\"bucket\").Object(\"object1\").NewReader(ctx)\nif err != nil {\n\tlog.Fatal(err)\n}\ndefer rc.Close()\nbody, err := io.ReadAll(rc)\nif err != nil {\n\tlog.Fatal(err)\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Grafana Data Source URL for VictoriaMetrics\nDESCRIPTION: This URL is used to configure a Prometheus data source in Grafana that points to VictoriaMetrics. Replace <victoriametrics-addr> with the actual hostname or IP address of your VictoriaMetrics instance.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/README.md#2025-04-22_snippet_4\n\nLANGUAGE: url\nCODE:\n```\nhttp://<victoriametrics-addr>:8428\n```\n\n----------------------------------------\n\nTITLE: Field-Specific Search in LogsQL\nDESCRIPTION: A LogsQL query that searches for 'error' specifically in the log.level field rather than in the general message content.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_13\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m log.level:error -(buggy_app OR foobar)\n```\n\n----------------------------------------\n\nTITLE: Calculating Standard Variance Over Time in VictoriaMetrics\nDESCRIPTION: The stdvar_over_time function calculates the standard variance of raw samples over a specified time window for each time series returned by the given selector.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/MetricsQL.md#2025-04-22_snippet_63\n\nLANGUAGE: metricsql\nCODE:\n```\nstdvar_over_time(series_selector[d])\n```\n\n----------------------------------------\n\nTITLE: Bitwise AND Transformation for Time Series with VictoriaMetrics PromQL\nDESCRIPTION: The bitmap_and function applies a bitwise AND operation to each value v from the time series query q and the integer mask. It strips metric names unless keep_metric_names is used. Inputs are numeric time series and a mask value; outputs are the ANDed results. This is a specialized transform function in VictoriaMetrics.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_82\n\nLANGUAGE: PromQL\nCODE:\n```\n`bitmap_and(q, mask)`\n```\n\n----------------------------------------\n\nTITLE: Accessing vmalert Web UI - Markdown\nDESCRIPTION: Provides the URL format for accessing the vmalert user interface in a VictoriaMetrics cluster, emphasizing that the -vmalert.proxyURL flag must be set. The URL uses placeholders for the vmselect node address and accountID, offering a template for administrators integrating vmalert into their monitoring endpoints. No additional dependencies; users should substitute <vmselect> and <accountID> appropriately. Limitation: The URL works only when proxying for vmalert is enabled.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/Cluster-VictoriaMetrics.md#2025-04-22_snippet_20\n\nLANGUAGE: plaintext\nCODE:\n```\nhttp://<vmselect>:8481/select/<accountID>/prometheus/vmalert/\n```\n\n----------------------------------------\n\nTITLE: Querying Logs with Time Filter in LogsQL\nDESCRIPTION: Example of using a time filter to query log messages from the last hour containing the word 'error'.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_22\n\nLANGUAGE: logsql\nCODE:\n```\n_time:1h AND error\n```\n\n----------------------------------------\n\nTITLE: Ranking Sorted Logs in LogsQL\nDESCRIPTION: This query stores the rank for logs sorted by _time into a 'position' field for logs from the last 5 minutes.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_133\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m | sort by (_time) rank as position\n```\n\n----------------------------------------\n\nTITLE: Using Core Logger in Go with Zap\nDESCRIPTION: Example of using Zap's core Logger for high-performance structured logging with strongly typed Field values. This logger is optimized for performance and type safety but only supports structured logging.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/go.uber.org/zap/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nlogger, _ := zap.NewProduction()\ndefer logger.Sync()\nlogger.Info(\"failed to fetch URL\",\n  // Structured context as strongly typed Field values.\n  zap.String(\"url\", url),\n  zap.Int(\"attempt\", 3),\n  zap.Duration(\"backoff\", time.Second),\n)\n```\n\n----------------------------------------\n\nTITLE: Detecting Outliers Using IQR in PromQL\nDESCRIPTION: The outlier_iqr_over_time function detects outliers based on the Interquartile Range (IQR) over raw samples on a given lookbehind window. It's useful for identifying anomalies in gauge values.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_29\n\nLANGUAGE: promql\nCODE:\n```\noutlier_iqr_over_time(series_selector[d])\n```\n\n----------------------------------------\n\nTITLE: Pushing Data via JSON Import API using cURL (Shell)\nDESCRIPTION: This snippet demonstrates sending metrics to VictoriaMetrics using the push model via a simple HTTP POST request with `curl`. It sends a JSON payload containing the metric name, labels, values, and timestamps to the `/api/v1/import` endpoint. This requires a running VictoriaMetrics instance (single-node, vminsert, or vmagent) accessible at the specified address.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/keyConcepts/keyConcepts.md#2025-04-22_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\ncurl -d '{\"metric\":{\"__name__\":\"foo\",\"job\":\"node_exporter\"},\"values\":[0,1,2],\"timestamps\":[1549891472010,1549891487724,1549891503438]}' -X POST 'http://localhost:8428/api/v1/import'\n```\n\n----------------------------------------\n\nTITLE: Calculating Logarithm Base 10 - PromQL - PromQL\nDESCRIPTION: log10(q) computes log base 10 for all points in the input PromQL time series q. Metric names are removed unless keep_metric_names is used. Supported in PromQL. Requires a numeric input series.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_114\n\nLANGUAGE: PromQL\nCODE:\n```\n`log10(q)`\n```\n\n----------------------------------------\n\nTITLE: Constructing Kubernetes Scrape URLs with Relabeling - YAML\nDESCRIPTION: Demonstrates how to configure a scrape_config for Kubernetes pods that dynamically constructs scrape URLs using relabel_configs. This setup uses the pod name as host, sets a custom metrics path, switches to HTTPS, and passes the container name as a query argument via relabeling. Dependencies include VictoriaMetrics vmagent or VictoriaMetrics server and access to Kubernetes service discovery. Key parameters: job_name, kubernetes_sd_configs, relabel_configs. Input: discovered pods via K8s API; Output: scrape requests to URLs like https://<pod_name>/foo/bar?baz=<container_name>.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/relabeling.md#2025-04-22_snippet_15\n\nLANGUAGE: YAML\nCODE:\n```\nscrape_configs:\n- job_name: k8s\n  kubernetes_sd_configs:\n  - role: pod\n  metrics_path: /foo/bar\n  relabel_configs:\n  - target_label: __scheme__\n    replacement: https\n  - source_labels: [__meta_kubernetes_pod_name]\n    target_label: __address__\n  - source_labels: [__meta_kubernetes_pod_container_name]\n    target_label: __param_baz\n```\n\n----------------------------------------\n\nTITLE: Calculating Simple Linear Regression in PromQL\nDESCRIPTION: The range_linear_regression() function calculates simple linear regression over the selected time range for each time series returned by the query. It's useful for capacity planning and predictions.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_99\n\nLANGUAGE: promql\nCODE:\n```\nrange_linear_regression(q)\n```\n\n----------------------------------------\n\nTITLE: Installing Grafana with VictoriaMetrics Data Source and Dashboards\nDESCRIPTION: This YAML configuration installs Grafana using Helm, sets up VictoriaMetrics as a data source, and provisions two dashboards: one for VictoriaMetrics and another for Kubernetes cluster metrics. It defines the data source URL, dashboard providers, and specific dashboard configurations.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/guides/k8s-monitoring-via-vm-single/README.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\ncat <<EOF | helm install my-grafana grafana/grafana -f -\n  datasources:\n    datasources.yaml:\n      apiVersion: 1\n      datasources:\n        - name: victoriametrics\n          type: prometheus\n          orgId: 1\n          url: http://vmsingle-victoria-metrics-single-server.default.svc.cluster.local:8428\n          access: proxy\n          isDefault: true\n          updateIntervalSeconds: 10\n          editable: true\n\n  dashboardProviders:\n   dashboardproviders.yaml:\n     apiVersion: 1\n     providers:\n     - name: 'default'\n       orgId: 1\n       folder: ''\n       type: file\n       disableDeletion: true\n       editable: true\n       options:\n         path: /var/lib/grafana/dashboards/default\n\n  dashboards:\n    default:\n      victoriametrics:\n        gnetId: 10229\n        revision: 22\n        datasource: victoriametrics\n      kubernetes:\n        gnetId: 14205\n        revision: 1\n        datasource: victoriametrics\nEOF\n```\n\n----------------------------------------\n\nTITLE: Performing a Restore using vmbackupmanager CLI (Shell)\nDESCRIPTION: Example command to initiate the restore process using `vmbackupmanager restore`. It requires specifying the destination path (`-dst`), credentials file (`-credsFilePath`), and local storage data path (`-storageDataPath`). This command restores the backup specified by the previously created restore mark. Note that `vmsingle` or `vmstorage` must be stopped beforehand.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmbackupmanager.md#2025-04-22_snippet_18\n\nLANGUAGE: sh\nCODE:\n```\n$ /vmbackupmanager-prod restore -dst=gs://vmstorage-data/$NODE_IP -credsFilePath=credentials.json -storageDataPath=/vmstorage-data\n\n```\n\n----------------------------------------\n\nTITLE: Copying All Labels with Prefix in Many-to-One Operations using MetricsQL\nDESCRIPTION: Shows a MetricsQL query using `group_left(*)` with a `prefix` in a many-to-one vector match. This copies all labels (except those in `on()`) from the right-hand side (`kube_namespace_labels`) to the left-hand side (`kube_pod_info`), adding the specified prefix (`ns_`) to the copied label names.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_6\n\nLANGUAGE: metricsql\nCODE:\n```\nkube_pod_info * on(namespace) group_left(*) prefix \"ns_\" kube_namespace_labels\n```\n\n----------------------------------------\n\nTITLE: Minimum Telegraf Configuration without Authentication\nDESCRIPTION: Basic Telegraf output configuration for VictoriaMetrics with no authentication. Includes essential settings like URL, database name, and GZIP encoding.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/data-ingestion/Telegraf.md#2025-04-22_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[[outputs.influxdb]]\n  urls = [\"$victoriametrics_url\"]\n  database = \"victoriametrics\"\n  skip_database_creation = true\n  exclude_retention_policy_tag = true\n  content_encoding = \"gzip\"\n```\n\n----------------------------------------\n\nTITLE: Illustrating Time Series Causing Labelset Collision (Text)\nDESCRIPTION: Provides an example of two distinct time series returned by a rule expression (`expr: {__name__=~\"vmalert_alerts_.*\"} > 0`). Because the `__name__` label is typically dropped during rule evaluation, these two series would result in identical labelsets (`{job=\"vmalert\",alertname=\"HostContextSwitching\"}`), triggering the 'same labelset' error.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmalert.md#2025-04-22_snippet_22\n\nLANGUAGE: text\nCODE:\n```\n{__name__=\"vmalert_alerts_pending\",job=\"vmalert\",alertname=\"HostContextSwitching\"} 12\n{__name__=\"vmalert_alerts_firing\",job=\"vmalert\",alertname=\"HostContextSwitching\"} 0\n```\n\n----------------------------------------\n\nTITLE: Calculating Rate with Automatic Lookbehind Window in MetricsQL\nDESCRIPTION: Illustrates a MetricsQL query using the `rate()` function where the lookbehind window `[...]` is omitted. VictoriaMetrics automatically selects an appropriate window based on the query step and raw sample interval.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_1\n\nLANGUAGE: metricsql\nCODE:\n```\nrate(node_network_receive_bytes_total)\n```\n\n----------------------------------------\n\nTITLE: Example: Finding Top 3 Jobs by Minimum Memory Usage (MetricsQL)\nDESCRIPTION: This MetricsQL query demonstrates the usage of `topk_min`. It calculates the sum of `process_resident_memory_bytes` grouped by `job`, then returns the top 3 time series (jobs) with the largest minimum memory usage. Any remaining job series are summed together into a single series labeled `{job=\"other\"}`.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_149\n\nLANGUAGE: MetricsQL\nCODE:\n```\ntopk_min(3, sum(process_resident_memory_bytes) by (job), \"job=other\")\n```\n\n----------------------------------------\n\nTITLE: Defining the VictoriaMetrics Instant Query API Endpoint\nDESCRIPTION: Specifies the HTTP methods (GET or POST) and the API endpoint (`/api/v1/query`) for executing instant queries in VictoriaMetrics. It outlines the key query parameters: `query` (MetricsQL expression), `time` (evaluation timestamp), `step` (lookback interval for missing samples, default 5m), and `timeout` (query execution limit).\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/keyConcepts/keyConcepts.md#2025-04-22_snippet_9\n\nLANGUAGE: http\nCODE:\n```\nGET | POST /api/v1/query?query=...&time=...&step=...&timeout=...\n```\n\n----------------------------------------\n\nTITLE: Configuring vmagent to Push Metrics to VictoriaMetrics\nDESCRIPTION: Basic configuration for vmagent to send metrics to VictoriaMetrics using the Prometheus remote write protocol. The -remoteWrite.url flag specifies the destination URL.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/data-ingestion/vmagent.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n/path/to/vmagent -remoteWrite.url=https://<victoriametrics_url>/api/v1/write\n```\n\n----------------------------------------\n\nTITLE: Using labels_equal function in PromQL\nDESCRIPTION: Function that returns query series with identical values for the specified labels. Filters time series to only include those where all the listed labels have matching values.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_134\n\nLANGUAGE: promql\nCODE:\n```\nlabels_equal(q, \"label1\", \"label2\", ...)\n```\n\n----------------------------------------\n\nTITLE: Implicit default_rollup Wrapping: Simple Selector (MetricsQL)\nDESCRIPTION: A simple series selector `foo` used directly in a query. VictoriaMetrics implicitly wraps such selectors with `default_rollup` if they aren't already arguments to a rollup function.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_157\n\nLANGUAGE: MetricsQL\nCODE:\n```\nfoo\n```\n\n----------------------------------------\n\nTITLE: Running VictoriaMetrics Enterprise Binary with License Key\nDESCRIPTION: Commands to download, extract, and run the VictoriaMetrics Enterprise binary release with a license key specified via command-line flag.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/enterprise.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nwget https://github.com/VictoriaMetrics/VictoriaMetrics/releases/download/v1.115.0/victoria-metrics-linux-amd64-v1.115.0-enterprise.tar.gz\ntar -xzf victoria-metrics-linux-amd64-v1.115.0-enterprise.tar.gz\n./victoria-metrics-prod -license=BASE64_ENCODED_LICENSE_KEY\n```\n\n----------------------------------------\n\nTITLE: Conditionally Unpacking JSON Fields using LogSQL\nDESCRIPTION: This LogSQL query selects logs from the last 5 minutes (`_time:5m`) and conditionally applies the `unpack_json` pipe to the `foo` field. The unpacking only occurs if the `ip` field in the current log entry is not set or is empty (`if (ip:\"\")`). This allows selective parsing based on log entry content.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_156\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m | unpack_json if (ip:\"\") from foo\n```\n\n----------------------------------------\n\nTITLE: Example: Configuring AZ Failover with Load Balancing in vmauth (YAML)\nDESCRIPTION: This YAML snippet illustrates how to configure vmauth for availability zone (AZ) failover using the 'first_available' load balancing policy. Requests are primarily sent to `vmselect-az1`. If it becomes unavailable or returns a 500, 502, or 503 status code, requests are then sent to the fallback `vmselect-az2`. The `deny_partial_response=1` query argument is added to ensure full responses are required from backends.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmauth.md#2025-04-22_snippet_24\n\nLANGUAGE: yaml\nCODE:\n```\nunauthorized_user:\n  url_prefix:\n  - https://vmselect-az1/?deny_partial_response=1\n  - https://vmselect-az2/?deny_partial_response=1\n  retry_status_codes: [500, 502, 503]\n  load_balancing_policy: first_available\n```\n\n----------------------------------------\n\nTITLE: Limited Unique IP Values\nDESCRIPTION: Example showing how to get limited set (up to 100) of unique IP values from logs in last 5 minutes\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_200\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m | stats uniq_values(ip) limit 100 as unique_ips_100\n```\n\n----------------------------------------\n\nTITLE: VictoriaMetrics Command Line Parameters\nDESCRIPTION: Command line parameters for configuring VictoriaMetrics server including storage, caching, TLS, aggregation, and UI settings. Each parameter is documented with its purpose, default value, and optional format specifications.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/README.md#2025-04-22_snippet_85\n\nLANGUAGE: plaintext\nCODE:\n```\n-storage.cacheSizeMetricNamesStats size\n     Overrides max size for storage/metricNamesStatsTracker cache. See https://docs.victoriametrics.com/single-server-victoriametrics/#cache-tuning\n     Supports the following optional suffixes for size values: KB, MB, GB, TB, KiB, MiB, GiB, TiB (default 0)\n-storage.cacheSizeStorageTSID size\n     Overrides max size for storage/tsid cache. See https://docs.victoriametrics.com/single-server-victoriametrics/#cache-tuning\n     Supports the following optional suffixes for size values: KB, MB, GB, TB, KiB, MiB, GiB, TiB (default 0)\n```\n\n----------------------------------------\n\nTITLE: VictoriaMetrics Range Query Response Format\nDESCRIPTION: This snippet shows the JSON response format for a range query in VictoriaMetrics. It includes the status, result type, and an array of timestamp-value pairs for the queried metric over the specified time range.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/keyConcepts/keyConcepts.md#2025-04-22_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": \"success\",\n  \"data\": {\n    \"resultType\": \"matrix\",\n    \"result\": [\n      {\n        \"metric\": {\n          \"__name__\": \"foo_bar\"\n        },\n        \"values\": [\n          [\n            1652169600,\n            \"1\"\n          ],\n          [\n            1652169660,\n            \"2\"\n          ],\n          [\n            1652169720,\n            \"3\"\n          ],\n          [\n            1652169780,\n            \"3\"\n          ],\n          [\n            1652169840,\n            \"5\"\n          ],\n          [\n            1652169900,\n            \"5\"\n          ],\n          [\n            1652169960,\n            \"5.5\"\n          ],\n          [\n            1652170020,\n            \"5.5\"\n          ],\n          [\n            1652170080,\n            \"4\"\n          ],\n          [\n            1652170140,\n            \"4\"\n          ],\n          [\n            1652170260,\n            \"3.5\"\n          ],\n          [\n            1652170320,\n            \"3.25\"\n          ],\n          [\n            1652170380,\n            \"3\"\n          ],\n          [\n            1652170440,\n            \"2\"\n          ],\n          [\n            1652170500,\n            \"1\"\n          ],\n          [\n            1652170560,\n            \"4\"\n          ],\n          [\n            1652170620,\n            \"4\"\n          ]\n        ]\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Z-Score for Grouped Time Series (MetricsQL)\nDESCRIPTION: The `zscore(q) by (group_labels)` aggregate function computes the Z-score for each time series returned by query `q`, grouped by the specified `group_labels`. The calculation is performed independently for each timestamp across the series within a group, making it useful for anomaly detection within related time series.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_150\n\nLANGUAGE: MetricsQL\nCODE:\n```\nzscore(q) by (group_labels)\n```\n\n----------------------------------------\n\nTITLE: Customizing Alert Source Links via Shell Command-Line for vmalert\nDESCRIPTION: Shows a shell command for running vmalert with custom -external.url and -external.alert.source flags for integrating alert source links with external UIs (such as VMUI or Grafana). The command-line flags accept template expressions, enabling dynamic links using current alert context. Prerequisites: vmalert binary, valid external UI address. Output: vmalert notifications containing URLs as per defined template.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmalert.md#2025-04-22_snippet_7\n\nLANGUAGE: Shell\nCODE:\n```\n./bin/vmalert \\\n    -external.url=http://<vmui-addr> \\  # the hostname and port for datasource vmui \n    -external.alert.source='vmui/#/?g0.expr={{.Expr|queryEscape}}' # the path built using alert expr\n```\n\n----------------------------------------\n\nTITLE: Configuring vmagent Cluster with Replication in Shell\nDESCRIPTION: This shell script shows how to set up a cluster of three vmagent instances with a replication factor of 2. Each instance is configured with unique member numbers and shared settings for distributed scraping with redundancy.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmagent.md#2025-04-22_snippet_39\n\nLANGUAGE: sh\nCODE:\n```\n/path/to/vmagent -promscrape.cluster.membersCount=3 -promscrape.cluster.replicationFactor=2 -promscrape.cluster.memberNum=0 -promscrape.config=/path/to/config.yml ...\n/path/to/vmagent -promscrape.cluster.membersCount=3 -promscrape.cluster.replicationFactor=2 -promscrape.cluster.memberNum=1 -promscrape.config=/path/to/config.yml ...\n/path/to/vmagent -promscrape.cluster.membersCount=3 -promscrape.cluster.replicationFactor=2 -promscrape.cluster.memberNum=2 -promscrape.config=/path/to/config.yml ...\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry Exporter for VictoriaMetrics\nDESCRIPTION: YAML configuration for the OpenTelemetry HTTP exporter to send metrics to VictoriaMetrics. It specifies gzip compression and protobuf encoding with the appropriate endpoint.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/README.md#2025-04-22_snippet_61\n\nLANGUAGE: yaml\nCODE:\n```\nexporters:\n  otlphttp/victoriametrics:\n    compression: gzip\n    encoding: proto\n    endpoint: http://<collector/vmagent>.<namespace>.svc.cluster.local:<port>/opentelemetry\n```\n\n----------------------------------------\n\nTITLE: Conditional IP Extraction with extract_regexp Pipe in LogSQL\nDESCRIPTION: This snippet demonstrates how to use a conditional extract_regexp to extract the ip field only if it doesn't exist or is empty in the input log entry.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_89\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m | extract_regexp if (ip:\"\") \"ip=(?P<ip>([0-9]+[.]){3}[0-9]+)\"\n```\n\n----------------------------------------\n\nTITLE: Configuring vmagent with Bearer Token File\nDESCRIPTION: Setup for vmagent to use bearer token authentication, with the token stored in a separate file. This method is more secure as it doesn't expose the token in the command line.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/data-ingestion/vmagent.md#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n/path/to/vmagent -remoteWrite.url=https://<victoriametrics_url>/api/v1/write \\\n -remoteWrite.bearerTokenFile=/path/to/tokenfile\n```\n\n----------------------------------------\n\nTITLE: Median Stats Function in LogsQL\nDESCRIPTION: Shows how to calculate estimated median values for specified log fields.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_188\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m | stats median(duration) median_duration\n```\n\n----------------------------------------\n\nTITLE: Join Pipe Basic Usage\nDESCRIPTION: Joins results from two queries by specified fields, similar to SQL LEFT JOIN. Example shows joining user stats across two applications.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_106\n\nLANGUAGE: logsql\nCODE:\n```\n_time:1d {app=\"app1\"} | stats by (user) count() app1_hits\n  | join by (user) (\n    _time:1d {app=\"app2\"} | stats by (user) count() app2_hits\n  )\n```\n\n----------------------------------------\n\nTITLE: Authenticating Azure Resource Manager Client with DefaultAzureCredential (Go)\nDESCRIPTION: This Go code snippet demonstrates how to authenticate an Azure Resource Manager client (`armresources.NewResourceGroupsClient`) using `DefaultAzureCredential`. It first attempts to create a default credential, handling potential errors, and then uses this credential to initialize the client with a specific Azure subscription ID. `DefaultAzureCredential` simplifies authentication by trying multiple credential types commonly used in development and deployed environments.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/Azure/azure-sdk-for-go/sdk/azidentity/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\nif err != nil {\n  // handle error\n}\n\nclient := armresources.NewResourceGroupsClient(\"subscription ID\", cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Using Day Range Filter in LogsQL\nDESCRIPTION: Example of using a day range filter to query logs between 08:00 and 18:00 UTC every day.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_23\n\nLANGUAGE: logsql\nCODE:\n```\n_time:day_range[08:00, 18:00)\n```\n\n----------------------------------------\n\nTITLE: CSV Export Commands with Curl\nDESCRIPTION: Examples of exporting data in CSV format with custom time ranges.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/README.md#2025-04-22_snippet_44\n\nLANGUAGE: sh\nCODE:\n```\ncurl http://<victoriametrics-addr>:8428/api/v1/export/csv -d 'format=<format>' -d 'match[]=<timeseries_selector_for_export>' -d 'start=1654543486' -d 'end=1654543486'\ncurl http://<victoriametrics-addr>:8428/api/v1/export/csv -d 'format=<format>' -d 'match[]=<timeseries_selector_for_export>' -d 'start=2022-06-06T19:25:48' -d 'end=2022-06-06T19:29:07'\n```\n\n----------------------------------------\n\nTITLE: Running vmalert with mTLS Protection (Shell)\nDESCRIPTION: Demonstrates the command to start the Enterprise version of vmalert with mutual TLS (mTLS) enabled on its HTTP listener port (default 8880). The `-tls` flag enables TLS, and the `-mtls` flag requires clients to present a valid certificate signed by a trusted CA (system CA by default, configurable with `-mtlsCAFile`). Requires vmalert Enterprise.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmalert.md#2025-04-22_snippet_23\n\nLANGUAGE: sh\nCODE:\n```\n./vmalert -tls -mtls -remoteWrite.url=...\n```\n\n----------------------------------------\n\nTITLE: Configuring Online Seasonal Quantile Model in YAML\nDESCRIPTION: This YAML configuration example demonstrates how to set parameters for the OnlineQuantileModel used in VictoriaMetrics for online seasonal quantile estimation. Key parameters include class, quantiles, seasonal_interval, min_subseason, and compression. The configuration supports specifying expected outliers, data granularity, and allows for fine-tuning using parameters like scale and min_n_samples_seen.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/anomaly-detection/components/models.md#2025-04-22_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\nmodels:\n  your_desired_alias_for_a_model:\n    class: \"quantile_online\"  # or 'model.online.OnlineQuantileModel'\n    quantiles: [0.025, 0.5, 0.975]  # lowered to exclude anomalous edges, can be compensated by `scale` param > 1\n    seasonal_interval: '7d'  # longest seasonality (week, day) = week, starting from `season_starts_from`\n    min_subseason: '1h'  # smallest seasonality (week, day, hour) = hour, will have its own quantile estimates\n    min_n_samples_seen: 288 # 1440 / 5 - at least 1 full day, ideal = 1440 / 5 * 7 - one full week (seasonal_interval)\n    scale: 1.1  # to compensate lowered quantile boundaries with wider intervals\n    season_starts_from: '2024-01-01'  # interval calculation starting point, especially for uncommon seasonalities like '36h' or '12d'\n    compression: 100  # higher values mean higher accuracy but higher memory usage\n    provide_series: ['anomaly_score', 'yhat']  # common arg example\n    # Common arguments for built-in model, if not set, default to\n    # See https://docs.victoriametrics.com/anomaly-detection/components/models/#common-args\n    #\n    # provide_series: ['anomaly_score', 'yhat', 'yhat_lower', 'yhat_upper']\n    # schedulers: [all scheduler aliases defined in `scheduler` section]\n    # queries: [all query aliases defined in `reader.queries` section]\n    # detection_direction: 'both'  # meaning both drops and spikes will be captured\n    # min_dev_from_expected: 0.0  # meaning, no minimal threshold is applied to prevent smaller anomalies\n    # scale: [1.0, 1.0]  # if needed, prediction intervals' width can be increased (>1) or narrowed (<1)\n    # clip_predictions: False  # if data_range for respective `queries` is set in reader, `yhat.*` columns will be clipped\n    # anomaly_score_outside_data_range: 1.01  # auto anomaly score (1.01) if `y` (real value) is outside of data_range, if set\n```\n\n----------------------------------------\n\nTITLE: Keeping Original Host Header in vmauth (YAML)\nDESCRIPTION: YAML configuration example for `vmauth` showing how to preserve the original client `Host` header in proxied requests by setting `keep_original_host: true` under the `unauthorized_user` section in the `-auth.config` file. This is useful for backends that rely on host-based routing.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmauth.md#2025-04-22_snippet_31\n\nLANGUAGE: yaml\nCODE:\n```\nunauthorized_user:\n  url_prefix: \"http://backend:1234/\"\n  keep_original_host: true\n\n```\n\n----------------------------------------\n\nTITLE: Alerting Query for Hourly Series Limit in VictoriaMetrics (MetricsQL)\nDESCRIPTION: This MetricsQL query can be used for alerting when the number of unique series during the last hour exceeds 90% of the -storage.maxHourlySeries limit.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/README.md#2025-04-22_snippet_77\n\nLANGUAGE: metricsql\nCODE:\n```\nvm_hourly_series_limit_current_series / vm_hourly_series_limit_max_series > 0.9\n```\n\n----------------------------------------\n\nTITLE: Creating Regular Backup in Shell\nDESCRIPTION: This command creates a regular backup of VictoriaMetrics data to a Google Cloud Storage bucket. It uses an instant snapshot without stopping the VictoriaMetrics instance.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmbackup.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n./vmbackup -storageDataPath=</path/to/victoria-metrics-data> -snapshot.createURL=http://localhost:8428/snapshot/create -dst=gs://<bucket>/<path/to/new/backup>\n```\n\n----------------------------------------\n\nTITLE: Calculating 99th Percentile with MetricsQL\nDESCRIPTION: This MetricsQL query determines the 99th percentile for the number of rows read per query over the last hour. It leverages the increase function to compute per-bucket event counts and the histogram_quantile function to calculate the percentile.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/keyConcepts/keyConcepts.md#2025-04-22_snippet_5\n\nLANGUAGE: MetricsQL\nCODE:\n```\n\"histogram_quantile(0.99, sum(increase(vm_rows_read_per_query_bucket[1h])) by (vmrange))\"\n```\n\n----------------------------------------\n\nTITLE: Creating Histogram Buckets with `histogram_bucket` in MetricsQL\nDESCRIPTION: The `histogram_bucket` function generates VictoriaMetrics histogram buckets based on the input sample values over the given interval, primarily for gauge metrics. This MetricsQL query shows its equivalence to summing the `histogram_over_time` results, grouped by the VictoriaMetrics range (`vmrange`). Aggregation behavior for sporadic metrics can be adjusted using the `staleness_interval` option.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/stream-aggregation.md#2025-04-22_snippet_18\n\nLANGUAGE: metricsql\nCODE:\n```\nsum(histogram_over_time(some_histogram_bucket[interval])) by (vmrange)\n```\n\n----------------------------------------\n\nTITLE: Calculating Derivative Rollups (Min/Max/Avg) in MetricsQL\nDESCRIPTION: Calculates the minimum, maximum, and average of the per-second derivatives between adjacent raw samples within a lookbehind window `d`. Results include `rollup=\\\"min\\\"`, `rollup=\\\"max\\\"`, and `rollup=\\\"avg\\\"` labels. An optional second argument (\\\"min\\\", \\\"max\\\", or \\\"avg\\\") selects one result and omits the label. Metric names are stripped unless `keep_metric_names` is used.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_57\n\nLANGUAGE: metricsql\nCODE:\n```\nrollup_deriv(series_selector[d])\n```\n\n----------------------------------------\n\nTITLE: Retrieving field values count using field_values pipe in LogsQL\nDESCRIPTION: Alternative query that retrieves the count of each unique value for the level field in logs from the last 5 minutes using the field_values pipe.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/logsql-examples.md#2025-04-22_snippet_15\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m | field_values level\n```\n\n----------------------------------------\n\nTITLE: Renaming Series with alias Function\nDESCRIPTION: The alias function sets the given name to all time series returned by the query. For example, it can rename 'up' series to 'foobar' series.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_116\n\nLANGUAGE: metricsql\nCODE:\n```\nalias(q, \"name\")\n```\n\nLANGUAGE: metricsql\nCODE:\n```\nalias(up, \"foobar\")\n```\n\n----------------------------------------\n\nTITLE: Finding Minimum Value Over Time in PromQL\nDESCRIPTION: The min_over_time function calculates the minimum value over raw samples on a given lookbehind window for each time series. It is usually applied to gauges and is supported by PromQL.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_27\n\nLANGUAGE: promql\nCODE:\n```\nmin_over_time(series_selector[d])\n```\n\n----------------------------------------\n\nTITLE: Stats Query with Field Bucketing\nDESCRIPTION: Calculates number of requests for the last hour, bucketed by 10KB of request_size_bytes field.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_142\n\nLANGUAGE: logsql\nCODE:\n```\n_time:1h | stats by (request_size_bytes:10KB) count() requests\n```\n\n----------------------------------------\n\nTITLE: Estimating Histogram Bucket Shares in PromQL\nDESCRIPTION: With `histogram_share(le, buckets)`, users can compute the fraction of data within `buckets` that is below the `le` threshold. This is beneficial for calculating service level indicators/achievements. While similar to `histogram_quantile`, it estimates shares instead of percentiles.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_81\n\nLANGUAGE: PromQL\nCODE:\n```\n`histogram_share(le, buckets)`\n```\n\n----------------------------------------\n\nTITLE: Using 'order' Alias for Sorting Logs in LogsQL\nDESCRIPTION: This query uses the 'order' alias instead of 'sort' to sort logs by foo and bar fields in reverse order for the last 5 minutes.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_128\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m | order by (foo, bar) desc\n```\n\n----------------------------------------\n\nTITLE: Defining Recording Rules in vmalert with YAML\nDESCRIPTION: Outlines the structure for a recording rule in vmalert configuration using YAML. Demonstrates required and optional fields, including metric name, evaluation expression, label manipulation, debugging options, and update entry limits. Prerequisite: vmalert's -remoteWrite.url must be specified for rule persistence; labels section supports collision resolution by prefixing. Expected results are stored time series with customized labels and metric names.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmalert.md#2025-04-22_snippet_6\n\nLANGUAGE: YAML\nCODE:\n```\n# The name of the time series to output to. Must be a valid metric name.\nrecord: <string>\n\n# The expression to evaluate. The expression language depends on the type value.\n# By default, MetricsQL expression is used. If group.type=\\\"graphite\\\", then the expression\n# must contain valid Graphite expression.\nexpr: <string>\n\n# Labels to add or overwrite before storing the result.\n# In case of conflicts, original labels are kept with prefix `exported_`.\nlabels:\n  [ <labelname>: <labelvalue> ]\n\n# Whether to print debug information into logs.\n# Information includes requests sent to the datasource.\n# information - it will be printed to logs.\n# Logs are printed with INFO level, so make sure that -loggerLevel=INFO to see the output.\n[ debug: <bool> | default = false ]\n\n# Defines the number of rule's updates entries stored in memory\n# and available for view on rule's Details page.\n# Overrides `rule.updateEntriesLimit` value for this specific rule.\n[ update_entries_limit: <integer> | default 0 ]\n```\n\n----------------------------------------\n\nTITLE: Average Temperature Rollup Example - MetricsQL\nDESCRIPTION: Example showing how to calculate average temperature over a 24-hour window using avg_over_time function.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/MetricsQL.md#2025-04-22_snippet_10\n\nLANGUAGE: metricsql\nCODE:\n```\navg_over_time(temperature[24h])\n```\n\n----------------------------------------\n\nTITLE: Determining Applications with Most Logs in LogsQL\nDESCRIPTION: This query finds the top 10 application instances with the most logs over the last 5 minutes, using stats, sorting, and limiting.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/logsql-examples.md#2025-04-22_snippet_7\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m | stats by (_stream) count() as logs | sort by (logs desc) | limit 10\n```\n\n----------------------------------------\n\nTITLE: Configuring Telegraf for VictoriaMetrics\nDESCRIPTION: This TOML configuration snippet shows how to set up Telegraf to send data to VictoriaMetrics by specifying the VictoriaMetrics URL in the InfluxDB output plugin.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/guides/migrate-from-influx/README.md#2025-04-22_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n[[outputs.influxdb]]\n  urls = [\"http://<victoriametrics-addr>:8428\"]\n```\n\n----------------------------------------\n\nTITLE: Parsing and Multiplying Byte Units with Units Package in Go\nDESCRIPTION: Demonstrates how to parse human-readable byte amounts (e.g., '1KB') into their numeric representation using the ParseBase2Bytes function and perform arithmetic using provided unit constants such as units.Mebibyte. Requires the 'github.com/alecthomas/units' package as a dependency. The ParseBase2Bytes function accepts a string and returns its value in bytes and an error if parsing fails; units.Mebibyte is a constant representing 1 MiB. Inputs are string quantities (like '1KB'), and outputs are integer byte values. Error handling and standard Go idioms are featured.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/alecthomas/units/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nn, err := ParseBase2Bytes(\"1KB\")\\n// n == 1024\\nn = units.Mebibyte * 512\n```\n\n----------------------------------------\n\nTITLE: Example Scrape Config File Content for Multi-File Loading (YAML)\nDESCRIPTION: Illustrates the structure of a YAML file loaded via `scrape_config_files`. It contains multiple scrape job definitions (e.g., 'foo' with static targets and 'bar' using Kubernetes service discovery) directly as a list, without the top-level `scrape_configs:` key.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmagent.md#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n- job_name: foo\n  static_configs:\n  - targets: [\"vmagent:8429\"]\n- job_name: bar\n  kubernetes_sd_configs:\n  - role: pod\n```\n\n----------------------------------------\n\nTITLE: Querying Equivalent for 'total_prometheus' Aggregation in MetricsQL\nDESCRIPTION: This MetricsQL query demonstrates the approximate behavior of the `total_prometheus` stream aggregation function. It sums the running sum of increases calculated using `increase_prometheus`, which notably skips the first sample value for each time series, aligning with Prometheus counter behavior.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/stream-aggregation.md#2025-04-22_snippet_30\n\nLANGUAGE: metricsql\nCODE:\n```\nsum(running_sum(increase_prometheus(some_counter)))\n```\n\n----------------------------------------\n\nTITLE: Sending OpenTSDB Data to VictoriaMetrics via Netcat (Single-node, Shell)\nDESCRIPTION: This shell command pipes a data point in OpenTSDB telnet format to a locally running VictoriaMetrics instance using netcat (nc) on port 4242. Dependencies include VictoriaMetrics with the OpenTSDB receiver enabled (using the -opentsdbListenAddr flag) and netcat installed on the sender machine. Inputs include the metric name, current timestamp, value, and tags; output is the successful insertion of the data point into VictoriaMetrics. This approach is suitable for quick CLI-based data injection and testing.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/url-examples.md#2025-04-22_snippet_20\n\nLANGUAGE: sh\nCODE:\n```\necho \"put foo.bar.baz `date +%s` 123 tag1=value1 tag2=value2\" | nc -N localhost 4242\n```\n\n----------------------------------------\n\nTITLE: VictoriaMetrics Cluster Scrape Configuration\nDESCRIPTION: YAML configuration for a VictoriaMetrics instance to scrape metrics from vmcluster components for use with the rate limiter.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmgateway.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nscrape_configs:\n  - job_name: cluster\n    scrape_interval: 5s\n    static_configs:\n    - targets: ['127.0.0.1:8481','127.0.0.1:8482','127.0.0.1:8480']\n```\n\n----------------------------------------\n\nTITLE: Multi-line Regex Pattern for Readability - YAML\nDESCRIPTION: Shows how the 'regex' field in a relabeling rule can be defined as a single string containing alternations or as an array of strings to improve readability and maintainability. The underlying system joins the array using the '|' character. Works in any YAML config supporting VictoriaMetrics's enhancement. Input is a list of metric names or patterns; output is a composite regex evaluated as a logical OR. Ensures maintainability in complex matching scenarios.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmagent.md#2025-04-22_snippet_27\n\nLANGUAGE: YAML\nCODE:\n```\n- action: keep_metrics\n  regex: \"metric_a|metric_b|foo_.+\"\n```\n\nLANGUAGE: YAML\nCODE:\n```\n- action: keep_metrics\n  regex:\n  - \"metric_a\"\n  - \"metric_b\"\n  - \"foo_.+\"\n```\n\n----------------------------------------\n\nTITLE: Implicit default_rollup Wrapping: Aggregate Function Argument (MetricsQL)\nDESCRIPTION: Example `count(up)` where `up` is a series selector passed to an aggregate function (`count`). Since `count` is not a rollup function, the argument `up` is implicitly wrapped with `default_rollup`.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_161\n\nLANGUAGE: MetricsQL\nCODE:\n```\ncount(up)\n```\n\n----------------------------------------\n\nTITLE: Linear Prediction in PromQL\nDESCRIPTION: Predicts future values using linear interpolation over raw samples within a lookbehind window for time series.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/MetricsQL.md#2025-04-22_snippet_48\n\nLANGUAGE: promql\nCODE:\n```\npredict_linear(series_selector[d], t)\n```\n\n----------------------------------------\n\nTITLE: Using max_over_time Rollup Function - PromQL/Pseudocode\nDESCRIPTION: Returns the maximum value among raw samples within lookbehind window 'd' for each given series. Can be used in both VictoriaMetrics and PromQL environments. Arguments include a metric selector and a window duration. The output is the per-series maximum; often applied to gauges. Supported by PromQL-compatible tools.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_41\n\nLANGUAGE: pseudo-promql\nCODE:\n```\n`max_over_time(series_selector[d])`\n```\n\n----------------------------------------\n\nTITLE: Accessing a Single JSON Field in Go with fastjson\nDESCRIPTION: Demonstrates a concise way to extract a specific integer value from a nested JSON structure using the `fastjson.GetInt` helper function. This function takes the JSON byte slice and a path to the desired field as arguments.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/valyala/fastjson/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n\ts := []byte(`{\"foo\": [123, \"bar\"]}`)\n\tfmt.Printf(\"foo.0=%d\\n\", fastjson.GetInt(s, \"foo\", \"0\"))\n\n\t// Output:\n\t// foo.0=123\n```\n\n----------------------------------------\n\nTITLE: Sequence Filter in LogsQL\nDESCRIPTION: Demonstrates how to find log messages with words or phrases in a particular order using the seq() filter. Can be applied to specific fields and supports quoted field names for special characters.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_67\n\nLANGUAGE: logsql\nCODE:\n```\nseq(\"error\", \"open file\")\n```\n\nLANGUAGE: logsql\nCODE:\n```\nevent.original:seq(error, \"open file\")\n```\n\nLANGUAGE: logsql\nCODE:\n```\n\"event:original\":seq(error, \"open file\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Scraping for VictoriaMetrics Cluster Statistics in YAML\nDESCRIPTION: This YAML configuration sets up scraping for VictoriaMetrics cluster components (vmselect, vmstorage, vminsert) to collect per-tenant statistics. It defines the job name, scrape interval, and target endpoints.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/PerTenantStatistic.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nscrape_configs:\n  - job_name: cluster\n    scrape_interval: 10s\n    static_configs:\n    - targets: ['vmselect:8481','vmstorage:8482','vminsert:8480']\n```\n\n----------------------------------------\n\nTITLE: Migration from Thanos Using Remote Read Protocol\nDESCRIPTION: Complete vmctl command for migrating data from Thanos to VictoriaMetrics using the remote-read protocol. It specifies source address, time range, step interval, and concurrency settings.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmctl.md#2025-04-22_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\n./vmctl remote-read \\\n--remote-read-src-addr=http://127.0.0.1:10080 \\\n--remote-read-filter-time-start=2021-10-18T00:00:00Z \\\n--remote-read-step-interval=hour \\\n--vm-addr=http://127.0.0.1:8428 \\\n--vm-concurrency=6\n```\n\n----------------------------------------\n\nTITLE: Configuring Kafka Consumer Flags - Shell\nDESCRIPTION: Demonstrates available command-line flags for configuring vmagent's Kafka consumer in the VictoriaMetrics enterprise version. The flags control topics, broker addresses, concurrency, authentication (basic auth), accepted data formats, and compression options. Each flag supports arrays of values for multi-topic or parallel processing and must be used in enterprise builds of vmagent. Requires an enterprise build and Kafka access; all flags must be specified at process launch.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmagent.md#2025-04-22_snippet_58\n\nLANGUAGE: shell\nCODE:\n```\n  -kafka.consumer.topic array\n        Kafka topic names for data consumption. See https://docs.victoriametrics.com/vmagent/#reading-metrics-from-kafka . This flag is available only in Enterprise binaries. See https://docs.victoriametrics.com/enterprise/\n        Supports an array of values separated by comma or specified via multiple flags.\n  -kafka.consumer.topic.basicAuth.password array\n        Optional basic auth password for -kafka.consumer.topic.  Must be used in conjunction with any supported auth methods for kafka client, specified by flag -kafka.consumer.topic.options='security.protocol=SASL_SSL;sasl.mechanisms=PLAIN' . See https://docs.victoriametrics.com/vmagent/#reading-metrics-from-kafka . This flag is available only in Enterprise binaries. See https://docs.victoriametrics.com/enterprise/\n        Supports an array of values separated by comma or specified via multiple flags.\n  -kafka.consumer.topic.basicAuth.username array\n        Optional basic auth username for -kafka.consumer.topic. Must be used in conjunction with any supported auth methods for kafka client, specified by flag -kafka.consumer.topic.options='security.protocol=SASL_SSL;sasl.mechanisms=PLAIN' . See https://docs.victoriametrics.com/vmagent/#reading-metrics-from-kafka . This flag is available only in Enterprise binaries. See https://docs.victoriametrics.com/enterprise/\n        Supports an array of values separated by comma or specified via multiple flags.\n  -kafka.consumer.topic.brokers array\n        List of brokers to connect for given topic, e.g. -kafka.consumer.topic.broker=host-1:9092;host-2:9092 . See https://docs.victoriametrics.com/vmagent/#reading-metrics-from-kafka . This flag is available only in Enterprise binaries. See https://docs.victoriametrics.com/enterprise/\n        Supports an array of values separated by comma or specified via multiple flags.\n  -kafka.consumer.topic.concurrency array\n        Configures consumer concurrency for topic specified via -kafka.consumer.topic flag. See https://docs.victoriametrics.com/vmagent/#reading-metrics-from-kafka . This flag is available only in Enterprise binaries. See https://docs.victoriametrics.com/enterprise/ (default 1)\n        Supports array of values separated by comma or specified via multiple flags.\n  -kafka.consumer.topic.defaultFormat string\n        Expected data format in the topic if -kafka.consumer.topic.format is skipped. See https://docs.victoriametrics.com/vmagent/#reading-metrics-from-kafka . This flag is available only in Enterprise binaries. See https://docs.victoriametrics.com/enterprise/ (default \"promremotewrite\")\n  -kafka.consumer.topic.format array\n        data format for corresponding kafka topic. Valid formats: influx, prometheus, promremotewrite, graphite, jsonline . See https://docs.victoriametrics.com/vmagent/#reading-metrics-from-kafka . This flag is available only in Enterprise binaries. See https://docs.victoriametrics.com/enterprise/\n        Supports an array of values separated by comma or specified via multiple flags.\n  -kafka.consumer.topic.groupID array\n        Defines group.id for topic. See https://docs.victoriametrics.com/vmagent/#reading-metrics-from-kafka . This flag is available only in Enterprise binaries. See https://docs.victoriametrics.com/enterprise/\n        Supports an array of values separated by comma or specified via multiple flags.\n  -kafka.consumer.topic.isGzipped array\n        Enables gzip setting for topic messages payload. Only prometheus, jsonline, graphite and influx formats accept gzipped messages.See https://docs.victoriametrics.com/vmagent/#reading-metrics-from-kafka . This flag is available only in Enterprise binaries. See https://docs.victoriametrics.com/enterprise/\n        Supports array of values separated by comma or specified via multiple flags.\n  -kafka.consumer.topic.options array\n        Optional key=value;key1=value2 settings for topic consumer. See full configuration options at https://github.com/edenhill/librdkafka/blob/master/CONFIGURATION.md . See https://docs.victoriametrics.com/vmagent/#reading-metrics-from-kafka . This flag is available only in Enterprise binaries. See https://docs.victoriametrics.com/enterprise/\n        Supports an array of values separated by comma or specified via multiple flags.\n```\n\n----------------------------------------\n\nTITLE: Port-Forwarding VictoriaMetrics to Localhost - Shell\nDESCRIPTION: This forwards the VictoriaMetrics service's metrics port (8428) from Kubernetes to the local machine, enabling UI or API access for metric queries or exploration.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/guides/getting-started-with-opentelemetry/README.md#2025-04-22_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nkubectl port-forward svc/victoria-metrics-victoria-metrics-single-server 8428\n```\n\n----------------------------------------\n\nTITLE: Configuring Aggregation for Existing Histogram Buckets in VictoriaMetrics YAML\nDESCRIPTION: Defines a VictoriaMetrics stream aggregation rule to aggregate pre-existing histogram buckets (like those from Prometheus, identified by the `_bucket` suffix and `le` label). It matches `http_request_duration_seconds_bucket`, aggregates over a 5-minute `interval`, removes the `instance` label using `without`, enables aggregation windows (`enable_windows: true`) for potentially better accuracy, and calculates the sum of rates using `rate_sum`, which is suitable for aggregating counter types like histogram buckets.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/stream-aggregation.md#2025-04-22_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\n- match: 'http_request_duration_seconds_bucket'\n  interval: 5m\n  without: [instance]\n  enable_windows: true\n  outputs: [rate_sum]\n```\n\n----------------------------------------\n\nTITLE: Retrieving Timestamp of Last Sample with Metric Name in VictoriaMetrics\nDESCRIPTION: The timestamp_with_name function returns the timestamp in seconds with millisecond precision for the last raw sample within a specified time window, preserving metric names in the resulting rollups.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/MetricsQL.md#2025-04-22_snippet_70\n\nLANGUAGE: metricsql\nCODE:\n```\ntimestamp_with_name(series_selector[d])\n```\n\n----------------------------------------\n\nTITLE: Combined Vector Configuration for VictoriaMetrics and VictoriaLogs\nDESCRIPTION: Advanced Vector configuration that sends both metrics to VictoriaMetrics and logs to VictoriaLogs. Uses bearer authentication for metrics and configures Elasticsearch-compatible endpoint for logs.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/data-ingestion/Vector.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nsources:\n  host_metrics_source:\n    type: host_metrics\n  journald_source:\n    type: journald\nsinks:\n  victoriametrics_sink:\n    type: prometheus_remote_write\n    inputs:\n      - host_metrics_source\n    endpoint: \"https://<victoriametrics_url>/api/v1/write\"\n    auth:\n      strategy: \"bearer\"\n      token: \"<token>\"\n    healthcheck:\n      enabled: false\n  victorialogs_sink:\n    inputs:\n      - journald_source\n    type: elasticsearch\n    endpoints:\n      - \"https://<victorialogs_url>/insert/elasticsearch/\"\n    mode: bulk\n    api_version: \"v8\"\n    healthcheck:\n      enabled: false\n    query:\n      _msg_field: \"message\"\n      _time_field: \"timestamp\"\n      _stream_fields: \"host,container_name\"\n```\n\n----------------------------------------\n\nTITLE: Descending Numeric Label Sort in PromQL\nDESCRIPTION: Sorts series in descending order by labels using numeric sort (e.g., 101, 15, 2, 1).\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_162\n\nLANGUAGE: promql\nCODE:\n```\nsort_by_label_numeric_desc(q, \"label1\", ... \"labelN\")\n```\n\n----------------------------------------\n\nTITLE: Customizing OpenTelemetry Collector Values for VictoriaMetrics and VictoriaLogs - Shell\nDESCRIPTION: This creates a YAML file with advanced OTEL Collector configuration tailored for use with VictoriaMetrics and VictoriaLogs. It enables metrics and logs pipelines, configures an exporter with appropriate endpoints, and sets processors for metrics temporality conversion. The configuration disables TLS validation for testing purposes. Replace endpoints and pipeline details as needed for production.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/guides/getting-started-with-opentelemetry/README.md#2025-04-22_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\ncat << EOF > otel-values.yaml\\nmode: deployment\\nimage:\\n  repository: \\\"otel/opentelemetry-collector-contrib\\\"\\npresets:\\n  clusterMetrics:\\n    enabled: true\\n  logsCollection:\\n    enabled: true\\nconfig:\\n  # deltatocumulative processor is needed to convert metrics with delta temporality to cumulative temporality.\\n  # VictoriaMetrics doesn't support delta temporality. Skip this processor if you don't use delta temporality.\\n  processors:\\n    deltatocumulative:\\n      max_stale: 5m\\n  receivers:\\n    otlp:\\n      protocols:\\n        grpc:\\n          endpoint: 0.0.0.0:4317\\n        http:\\n          endpoint: 0.0.0.0:4318\\n  exporters:\\n    otlphttp/victoriametrics:\\n      compression: gzip\\n      encoding: proto\\n      # Setting below will work for sending data to VictoriaMetrics single-node version.\\n      # Cluster version of VictoriaMetrics will require a different URL - https://docs.victoriametrics.com/cluster-victoriametrics/#url-format\\n      metrics_endpoint: http://victoria-metrics-victoria-metrics-single-server.default.svc.cluster.local:8428/opentelemetry/v1/metrics\\n      logs_endpoint: http://victoria-logs-victoria-logs-single-server.default.svc.cluster.local:9428/insert/opentelemetry/v1/logs\\n      tls:\\n        insecure: true\\n  service:\\n    pipelines:\\n      logs:\\n        processors: []\\n        exporters: [otlphttp/victoriametrics]\\n      metrics:\\n        receivers: [otlp]\\n        processors: [deltatocumulative]\\n        exporters: [otlphttp/victoriametrics]\\nEOF\n```\n\n----------------------------------------\n\nTITLE: Calculating Sum of Rates with `rate_sum` in MetricsQL\nDESCRIPTION: The `rate_sum` function computes the sum of the average per-second rates of increase across all input counter time series over the specified interval. This MetricsQL query shows its equivalence to applying `sum` aggregation on the results of the `rate` function.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/stream-aggregation.md#2025-04-22_snippet_25\n\nLANGUAGE: metricsql\nCODE:\n```\nsum(rate(some_counter[interval]))\n```\n\n----------------------------------------\n\nTITLE: Applying contains_all Filter for Log Messages - LogsQL\nDESCRIPTION: Illustrates using the contains_all filter to find logs containing multiple specified words or phrases, equivalent to using AND logic. The snippet clarifies how arbitrary query inclusion within contains_all can refine results.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_63\n\nLANGUAGE: logsql\nCODE:\n```\ncontains_all(foo, \"bar baz\")\n```\n\nLANGUAGE: logsql\nCODE:\n```\nfoo AND \"bar baz\"\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Authentication Flow with ChainedTokenCredential (Go)\nDESCRIPTION: This Go code snippet illustrates creating a custom authentication flow using `ChainedTokenCredential`. It first attempts to create a `ManagedIdentityCredential` and an `AzureCLICredential`, handling errors for each. These credentials are then passed to `NewChainedTokenCredential`, which will try them sequentially (managed identity first, then Azure CLI). The resulting chained credential is used to authenticate an `armresources.NewResourceGroupsClient`. This approach provides fallback authentication mechanisms.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/Azure/azure-sdk-for-go/sdk/azidentity/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nmanaged, err := azidentity.NewManagedIdentityCredential(nil)\nif err != nil {\n  // handle error\n}\nazCLI, err := azidentity.NewAzureCLICredential(nil)\nif err != nil {\n  // handle error\n}\nchain, err := azidentity.NewChainedTokenCredential([]azcore.TokenCredential{managed, azCLI}, nil)\nif err != nil {\n  // handle error\n}\n\nclient := armresources.NewResourceGroupsClient(\"subscription ID\", chain, nil)\n```\n\n----------------------------------------\n\nTITLE: Configuring vmalert for High Availability - Shell\nDESCRIPTION: This shell script snippet configures multiple vmalert instances for high availability. It includes provisioning for rule files, datasource, remote write and read destinations, and alert notifier addresses. Proper deduplication settings need to be configured separately for ensuring consistent data storage and retrieval.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmalert.md#2025-04-22_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\n./bin/vmalert -rule=rules.yml \\                   # Path to the file with rules configuration. Supports wildcard\n    -datasource.url=http://victoriametrics:8428 \\   # VM-single addr for executing rules expressions\n    -remoteWrite.url=http://victoriametrics:8428 \\  # VM-single addr to persist alerts state and recording rules results\n    -remoteRead.url=http://victoriametrics:8428 \\   # VM-single addr for restoring alerts state after restart\n    -notifier.url=http://alertmanager1:9093 \\       # Multiple AlertManager addresses to send alerts when they trigger\n    -notifier.url=http://alertmanagerN:9093         # The same alert will be sent to all configured notifiers\n```\n\n----------------------------------------\n\nTITLE: Using Duration Literals Anywhere in MetricsQL Expressions\nDESCRIPTION: Illustrates that duration literals (like `1h`) can be used directly in arithmetic expressions within MetricsQL queries. `sum_over_time(m[1h]) / 1h` is equivalent to `sum_over_time(m[1h]) / 3600` as `1h` is evaluated to 3600 seconds.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_14\n\nLANGUAGE: MetricsQL\nCODE:\n```\nsum_over_time(m[1h]) / 1h\n```\n\nLANGUAGE: MetricsQL\nCODE:\n```\nsum_over_time(m[1h]) / 3600\n```\n\n----------------------------------------\n\nTITLE: Installing VictoriaMetrics Cluster with Helm on Kubernetes\nDESCRIPTION: This shell script is used to install the VictoriaMetrics cluster on a Kubernetes environment using Helm. It sets parameters like deduplication and replication factor, and configures Prometheus annotations for scraping metrics from the cluster's pods. Requirements include Helm and kubectl installed with the specified versions.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/guides/k8s-ha-monitoring-via-vm-cluster/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncat <<EOF | helm install vmcluster vm/victoria-metrics-cluster -f -\nvmselect:\n  extraArgs:\n    dedup.minScrapeInterval: 1ms\n    replicationFactor: 2\n  podAnnotations:\n    prometheus.io/scrape: \"true\"\n    prometheus.io/port: \"8481\"\n  replicaCount: 3\n\nvminsert:\n  extraArgs:\n    replicationFactor: 2\n  podAnnotations:\n    prometheus.io/scrape: \"true\"\n    prometheus.io/port: \"8480\"\n  replicaCount: 3\n\nvmstorage:\n  podAnnotations:\n    prometheus.io/scrape: \"true\"\n    prometheus.io/port: \"8482\"\n  replicaCount: 3\nEOF\n```\n\n----------------------------------------\n\nTITLE: Using Quoted Field Names and Filter Arguments in LogsQL\nDESCRIPTION: This example demonstrates how to use quotes for field names and filter arguments containing special characters in LogsQL queries.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_21\n\nLANGUAGE: logsql\nCODE:\n```\n\"some 'field':123\":i('some(\"value\")') AND `other\"value'`\n```\n\n----------------------------------------\n\nTITLE: Sorting Logs by Stream and Time in LogsQL\nDESCRIPTION: This query returns logs for the last 5 minutes sorted by _stream and _time fields using the sort pipe.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_124\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m | sort by (_stream, _time)\n```\n\n----------------------------------------\n\nTITLE: Configuring Explicit Label Aggregation via 'by' - VictoriaMetrics (YAML)\nDESCRIPTION: Creates a stream aggregation rule in YAML to sum input metric samples by a specific label (here, 'app'), reducing output series to one per app regardless of other labels like 'instance'. Requires only basic YAML support in VictoriaMetrics; key fields: 'interval', outputs', 'by'. The output will hold only the 'app' label, generating metrics like 'foo:1m_by_app_sum_samples{app=\"bar\"}'. No advanced dependencies needed.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/stream-aggregation.md#2025-04-22_snippet_39\n\nLANGUAGE: yaml\nCODE:\n```\n- interval: 1m\\n  by: [app]\\n  outputs: [sum_samples]\n```\n\n----------------------------------------\n\nTITLE: Summing Irregular Metrics with Stream Aggregation\nDESCRIPTION: This configuration sums metrics that are sent at irregular intervals, aggregating them into regular 1-minute intervals. This is useful for applications that report calculated event counts at unpredictable times.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/stream-aggregation.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n- match: '{__name__=~\"hits|clicks\"}'\n  interval: 1m\n  outputs: [sum_samples]\n```\n\n----------------------------------------\n\nTITLE: Listing vmbackup Command-Line Flags and Descriptions\nDESCRIPTION: This snippet shows the output of the `vmbackup -help` command. It lists all available command-line flags for the `vmbackup` utility, including their names, types (e.g., int, string, duration, size), default values, and descriptions. These flags allow configuration of various aspects like backup destination (`-dst`), concurrency (`-concurrency`), storage credentials (`-credsFilePath`, `-configFilePath`), S3 endpoint (`-customS3Endpoint`), logging behavior (`-logger*`), performance (`-maxBytesPerSecond`, `-memory.allowedBytes`), HTTP server settings (`-httpListenAddr`, `-httpAuth.*`), and enterprise license options (`-license`).\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmbackup.md#2025-04-22_snippet_15\n\nLANGUAGE: shellhelp\nCODE:\n```\n  -concurrency int\n     The number of concurrent workers. Higher concurrency may reduce backup duration (default 10)\n  -configFilePath string\n     Path to file with S3 configs. Configs are loaded from default location if not set.\n     See https://docs.aws.amazon.com/general/latest/gr/aws-security-credentials.html\n  -configProfile string\n     Profile name for S3 configs. If no set, the value of the environment variable will be loaded (AWS_PROFILE or AWS_DEFAULT_PROFILE), or if both not set, DefaultSharedConfigProfile is used\n  -credsFilePath string\n     Path to file with GCS or S3 credentials. Credentials are loaded from default locations if not set.\n     See https://cloud.google.com/iam/docs/creating-managing-service-account-keys and https://docs.aws.amazon.com/general/latest/gr/aws-security-credentials.html\n  -customS3Endpoint string\n     Custom S3 endpoint for use with S3-compatible storages (e.g. MinIO). S3 is used if not set\n  -deleteAllObjectVersions\n     Whether to prune previous object versions when deleting an object. By default, when object storage has versioning enabled deleting the file removes only current version. This option forces removal of all previous versions. See: https://docs.victoriametrics.com/vmbackup/#permanent-deletion-of-objects-in-s3-compatible-storages\n  -dst string\n     Where to put the backup on the remote storage. Example: gs://bucket/path/to/backup, s3://bucket/path/to/backup, azblob://container/path/to/backup or fs:///path/to/local/backup/dir\n     -dst can point to the previous backup. In this case incremental backup is performed, i.e. only changed data is uploaded\n  -enableTCP6\n     Whether to enable IPv6 for listening and dialing. By default, only IPv4 TCP and UDP are used\n  -envflag.enable\n     Whether to enable reading flags from environment variables in addition to the command line. Command line flag values have priority over values from environment vars. Flags are read only from the command line if this flag isn't set. See https://docs.victoriametrics.com/#environment-variables for more details\n  -envflag.prefix string\n     Prefix for environment variables if -envflag.enable is set\n  -eula\n     Deprecated, please use -license or -licenseFile flags instead. By specifying this flag, you confirm that you have an enterprise license and accept the ESA https://victoriametrics.com/legal/esa/ . This flag is available only in Enterprise binaries. See https://docs.victoriametrics.com/enterprise/\n  -filestream.disableFadvise\n     Whether to disable fadvise() syscall when reading large data files. The fadvise() syscall prevents from eviction of recently accessed data from OS page cache during background merges and backups. In some rare cases it is better to disable the syscall if it uses too much CPU\n  -flagsAuthKey value\n     Auth key for /flags endpoint. It must be passed via authKey query arg. It overrides -httpAuth.*\n     Flag value can be read from the given file when using -flagsAuthKey=file:///abs/path/to/file or -flagsAuthKey=file://./relative/path/to/file . Flag value can be read from the given http/https url when using -flagsAuthKey=http://host/path or -flagsAuthKey=https://host/path\n  -fs.disableMmap\n     Whether to use pread() instead of mmap() for reading data files. By default, mmap() is used for 64-bit arches and pread() is used for 32-bit arches, since they cannot read data files bigger than 2^32 bytes in memory. mmap() is usually faster for reading small data chunks than pread()\n  -http.connTimeout duration\n     Incoming connections to -httpListenAddr are closed after the configured timeout. This may help evenly spreading load among a cluster of services behind TCP-level load balancer. Zero value disables closing of incoming connections (default 2m0s)\n  -http.disableResponseCompression\n     Disable compression of HTTP responses to save CPU resources. By default, compression is enabled to save network bandwidth\n  -http.header.csp string\n     Value for 'Content-Security-Policy' header, recommended: \"default-src 'self'\"\n  -http.header.frameOptions string\n     Value for 'X-Frame-Options' header\n  -http.header.hsts string\n     Value for 'Strict-Transport-Security' header, recommended: 'max-age=31536000; includeSubDomains'\n  -http.idleConnTimeout duration\n     Timeout for incoming idle http connections (default 1m0s)\n  -http.maxGracefulShutdownDuration duration\n     The maximum duration for a graceful shutdown of the HTTP server. A highly loaded server may require increased value for a graceful shutdown (default 7s)\n  -http.pathPrefix string\n     An optional prefix to add to all the paths handled by http server. For example, if '-http.pathPrefix=/foo/bar' is set, then all the http requests will be handled on '/foo/bar/*' paths. This may be useful for proxied requests. See https://www.robustperception.io/using-external-urls-and-proxies-with-prometheus\n  -http.shutdownDelay duration\n     Optional delay before http server shutdown. During this delay, the server returns non-OK responses from /health page, so load balancers can route new requests to other servers\n  -httpAuth.password value\n     Password for HTTP server's Basic Auth. The authentication is disabled if -httpAuth.username is empty\n     Flag value can be read from the given file when using -httpAuth.password=file:///abs/path/to/file or -httpAuth.password=file://./relative/path/to/file . Flag value can be read from the given http/https url when using -httpAuth.password=http://host/path or -httpAuth.password=https://host/path\n  -httpAuth.username string\n     Username for HTTP server's Basic Auth. The authentication is disabled if empty. See also -httpAuth.password\n  -httpListenAddr string\n     TCP address for exporting metrics at /metrics page (default \":8420\")\n  -internStringCacheExpireDuration duration\n     The expiry duration for caches for interned strings. See https://en.wikipedia.org/wiki/String_interning . See also -internStringMaxLen and -internStringDisableCache (default 6m0s)\n  -internStringDisableCache\n     Whether to disable caches for interned strings. This may reduce memory usage at the cost of higher CPU usage. See https://en.wikipedia.org/wiki/String_interning . See also -internStringCacheExpireDuration and -internStringMaxLen\n  -internStringMaxLen int\n     The maximum length for strings to intern. A lower limit may save memory at the cost of higher CPU usage. See https://en.wikipedia.org/wiki/String_interning . See also -internStringDisableCache and -internStringCacheExpireDuration (default 500)\n  -license string\n     License key for VictoriaMetrics Enterprise. See https://victoriametrics.com/products/enterprise/ . Trial Enterprise license can be obtained from https://victoriametrics.com/products/enterprise/trial/ . This flag is available only in Enterprise binaries. The license key can be also passed via file specified by -licenseFile command-line flag\n  -license.forceOffline\n     Whether to enable offline verification for VictoriaMetrics Enterprise license key, which has been passed either via -license or via -licenseFile command-line flag. The issued license key must support offline verification feature. Contact info@victoriametrics.com if you need offline license verification. This flag is available only in Enterprise binaries\n  -licenseFile string\n     Path to file with license key for VictoriaMetrics Enterprise. See https://victoriametrics.com/products/enterprise/ . Trial Enterprise license can be obtained from https://victoriametrics.com/products/enterprise/trial/ . This flag is available only in Enterprise binaries. The license key can be also passed inline via -license command-line flag\n  -loggerDisableTimestamps\n     Whether to disable writing timestamps in logs\n  -loggerErrorsPerSecondLimit int\n     Per-second limit on the number of ERROR messages. If more than the given number of errors are emitted per second, the remaining errors are suppressed. Zero values disable the rate limit\n  -loggerFormat string\n     Format for logs. Possible values: default, json (default \"default\")\n  -loggerJSONFields string\n     Allows renaming fields in JSON formatted logs. Example: \"ts:timestamp,msg:message\" renames \"ts\" to \"timestamp\" and \"msg\" to \"message\". Supported fields: ts, level, caller, msg\n  -loggerLevel string\n     Minimum level of errors to log. Possible values: INFO, WARN, ERROR, FATAL, PANIC (default \"INFO\")\n  -loggerMaxArgLen int\n     The maximum length of a single logged argument. Longer arguments are replaced with 'arg_start..arg_end', where 'arg_start' and 'arg_end' is prefix and suffix of the arg with the length not exceeding -loggerMaxArgLen / 2 (default 1000)\n  -loggerOutput string\n     Output for the logs. Supported values: stderr, stdout (default \"stderr\")\n  -loggerTimezone string\n     Timezone to use for timestamps in logs. Timezone must be a valid IANA Time Zone. For example: America/New_York, Europe/Berlin, Etc/GMT+3 or Local (default \"UTC\")\n  -loggerWarnsPerSecondLimit int\n     Per-second limit on the number of WARN messages. If more than the given number of warns are emitted per second, then the remaining warns are suppressed. Zero values disable the rate limit\n  -maxBytesPerSecond size\n     The maximum upload speed. There is no limit if it is set to 0\n     Supports the following optional suffixes for size values: KB, MB, GB, TB, KiB, MiB, GiB, TiB (default 0)\n  -memory.allowedBytes size\n     Allowed size of system memory VictoriaMetrics caches may occupy. This option overrides -memory.allowedPercent if set to a non-zero value. Too low a value may increase the cache miss rate usually resulting in higher CPU and disk IO usage. Too high a value may evict too much data from the OS page cache resulting in higher disk IO usage\n     Supports the following optional suffixes for size values: KB, MB, GB, TB, KiB, MiB, GiB, TiB (default 0)\n  -memory.allowedPercent float\n```\n\n----------------------------------------\n\nTITLE: Using Multi-Exact Filter with OR Logic - LogsQL\nDESCRIPTION: This example demonstrates using multiple exact filters combined with an OR logical filter to match various log message values in the log.level field. It introduces the in() filter for simplifying and accelerating such queries.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_62\n\nLANGUAGE: logsql\nCODE:\n```\nlog.level:(=\"error\" OR =\"fatal\")\n```\n\nLANGUAGE: logsql\nCODE:\n```\nlog.level:in(\"error\", \"fatal\")\n```\n\n----------------------------------------\n\nTITLE: Counting Unique Values in PromQL\nDESCRIPTION: The count_values function counts the number of points with the same value and stores the counts in a time series with an additional label.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_143\n\nLANGUAGE: promql\nCODE:\n```\ncount_values(\"label\", q)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Timestamp of First Sample in VictoriaMetrics\nDESCRIPTION: The tfirst_over_time function returns the timestamp in seconds with millisecond precision for the first raw sample within a specified time window for each time series returned by the given selector.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/MetricsQL.md#2025-04-22_snippet_71\n\nLANGUAGE: metricsql\nCODE:\n```\ntfirst_over_time(series_selector[d])\n```\n\n----------------------------------------\n\nTITLE: Top 10 Logs by Request Duration in LogsQL\nDESCRIPTION: This query returns the top 10 log entries with the biggest values for the request_duration field during the last hour.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_129\n\nLANGUAGE: logsql\nCODE:\n```\n_time:1h | sort by (request_duration desc) limit 10\n```\n\n----------------------------------------\n\nTITLE: Computing Quantiles with quantile_over_time - PromQL/Pseudocode\nDESCRIPTION: Calculates a specified phi-quantile (0 to 1) for raw samples in the window 'd' over each selected series. Takes a quantile parameter and series selector; e.g. phi=0.95 for 95th percentile. Outputs a single value per series. Supported by PromQL and used for histogram-like aggregation.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_48\n\nLANGUAGE: pseudo-promql\nCODE:\n```\n`quantile_over_time(phi, series_selector[d])`\n```\n\n----------------------------------------\n\nTITLE: VMGateway with OpenID Discovery Endpoint for Azure AD\nDESCRIPTION: Shell command to start vmgateway using OpenID discovery endpoint from Azure Active Directory for JWT signature verification.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmgateway.md#2025-04-22_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\n/bin/vmgateway -eula \\\n  -enable.auth \\\n  -write.url=http://localhost:8480 \\\n  -read.url=http://localhost:8481 \\\n  -auth.oidcDiscoveryEndpoints=https://login.microsoftonline.com/common/v2.0/.well-known/openid-configuration\n```\n\n----------------------------------------\n\nTITLE: Partitioned Sorting and Limiting in LogsQL\nDESCRIPTION: This query returns up to 3 logs with the biggest request_duration per each host over the last hour using partitioned sorting.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_132\n\nLANGUAGE: logsql\nCODE:\n```\n_time:1h | sort by (request_duration desc) partition by (host) limit 3\n```\n\n----------------------------------------\n\nTITLE: Configuring DataDog Agent for VictoriaLogs\nDESCRIPTION: YAML configuration for DataDog Agent to send logs to VictoriaLogs. This setup specifies a custom URL for sending collected logs instead of the default one.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/data-ingestion/DataDogAgent.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nlogs_enabled: true\nlogs_config:\n  logs_dd_url: `<vmauth-base-url>`\n  use_http: true\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Alert for High Churn Rate in VictoriaMetrics\nDESCRIPTION: This YAML configuration defines an alert rule for detecting high churn rates in VictoriaMetrics. It calculates the ratio of new time series to inserted rows and triggers a warning if it exceeds 10% for 15 minutes.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/PerTenantStatistic.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n- alert: TooHighChurnRate\n  expr: |\n    (\n    sum(rate(vm_tenant_timeseries_created_total[5m])) by(accountID,projectID)\n    /\n    sum(rate(vm_tenant_inserted_rows_total[5m])) by(accountID,projectID)\n    ) > 0.1\n  for: 15m\n  labels:\n    severity: warning\n  annotations:\n    summary: \"Churn rate is more than 10% for the last 15m\"\n    description: \"VM constantly creates new time series in the tenant: {{ $labels.accountID }}:{{ $labels.projectID }}.\\n\n            This effect is known as Churn Rate.\\n\n            High Churn Rate is tightly connected with database performance and may\n            result in unexpected OOM's or slow queries.\"\n```\n\n----------------------------------------\n\nTITLE: Reloading vmagent Configuration via SIGHUP Signal (Shell)\nDESCRIPTION: Shell command demonstrating how to reload vmagent's configuration files (like those specified by `-promscrape.config`) by sending the SIGHUP signal to the running vmagent process. The `pidof vmagent` command is used to find the process ID.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmagent.md#2025-04-22_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\nkill -SIGHUP `pidof vmagent`\n```\n\n----------------------------------------\n\nTITLE: Enabling Automatic Backend IP Discovery in vmauth (YAML)\nDESCRIPTION: This YAML configuration demonstrates using the `discover_backend_ips: true` option. When enabled, vmauth automatically performs DNS lookups (A/AAAA records) for the hostname specified in `url_prefix` (`vmselect-service:8481`) and load balances requests across all discovered IP addresses. This simplifies configuration when backends scale or change IPs.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmauth.md#2025-04-22_snippet_27\n\nLANGUAGE: yaml\nCODE:\n```\nunauthorized_user:\n  url_prefix: http://vmselect-service:8481/select/0/prometheus/\n  discover_backend_ips: true\n```\n\n----------------------------------------\n\nTITLE: Applying Subqueries and Implicit Conversions in MetricsQL - MetricsQL\nDESCRIPTION: This example set demonstrates how VictoriaMetrics automatically transforms user queries to ensure explicit time windowing and default rollup wrapping for non-rollup functions. It illustrates various conversion rules, including wrapping series selectors and specifying default lookbehind windows (`1i`), and subquery step values, ensuring accurate aggregation semantics. No external dependencies beyond VictoriaMetrics/MetricsQL. Inputs: original user queries; Outputs: normalized queries with explicit subquery or rollup handling. Limitation: Implicit conversion may be disabled via configuration.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/MetricsQL.md#2025-04-22_snippet_120\n\nLANGUAGE: MetricsQL\nCODE:\n```\navg_over_time(temperature)   // transforms to avg_over_time(temperature[1i])\n```\n\nLANGUAGE: MetricsQL\nCODE:\n```\nfoo   // transforms to default_rollup(foo)\n```\n\nLANGUAGE: MetricsQL\nCODE:\n```\nfoo + bar   // transforms to default_rollup(foo) + default_rollup(bar)\n```\n\nLANGUAGE: MetricsQL\nCODE:\n```\ncount(up)   // transforms to count(default_rollup(up))\n```\n\nLANGUAGE: MetricsQL\nCODE:\n```\nabs(temperature)   // transforms to abs(default_rollup(temperature))\n```\n\nLANGUAGE: MetricsQL\nCODE:\n```\navg_over_time(rate(http_requests_total[5m])[1h])   // transforms to avg_over_time(rate(http_requests_total[5m])[1h:1i])\n```\n\nLANGUAGE: MetricsQL\nCODE:\n```\nrate(sum(up))   // transforms to rate((sum(default_rollup(up)))[1i:1i])\n```\n\n----------------------------------------\n\nTITLE: Enabling Graphite Receiver in VictoriaMetrics - Shell\nDESCRIPTION: Demonstrates how to launch VictoriaMetrics with support for Graphite protocol ingestion via a command-line flag. The -graphiteListenAddr=:2003 flag sets up the process to listen on TCP and UDP port 2003 for incoming Graphite-formatted metrics. Ensure VictoriaMetrics binary location is correct.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/README.md#2025-04-22_snippet_20\n\nLANGUAGE: sh\nCODE:\n```\n/path/to/victoria-metrics-prod -graphiteListenAddr=:2003\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenStack Service Discovery in YAML\nDESCRIPTION: This snippet shows how to configure OpenStack service discovery in VictoriaMetrics. It includes options for role, region, identity endpoint, credentials, and other OpenStack-specific settings.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/sd_configs.md#2025-04-22_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\nscrape_configs:\n- job_name: openstack\n  openstack_sd_configs:\n\n    # role must contain either `hypervisor` or `instance`.\n    # See docs below for details.\n    #\n  - role: \"...\"\n\n    # region must contain OpenStack region for targets' discovery.\n    #\n    region: \"...\"\n\n    # identity_endpoint is an optional HTTP Identity API endpoint.\n    # By default, it is read from OS_AUTH_URL environment variable.\n    #\n    # identity_endpoint: \"...\"\n\n    # username is an optional username to query Identity API.\n    # By default, it is read from OS_USERNAME environment variable.\n    #\n    # username: \"...\"\n\n    # userid is an optional userid to query Identity API.\n    # By default, it is read from OS_USERID environment variable.\n    #\n    # userid: \"...\"\n\n    # password is an optional password to query Identity API.\n    # By default, it is read from OS_PASSWORD environment variable.\n    #\n    # password: \"...\"\n\n    # At most one of domain_id and domain_name must be provided.\n    # By default, they are read from OS_DOMAIN_NAME and OS_DOMAIN_ID environment variables.\n    #\n    # domain_name: \"...\"\n    # domain_id: \"...\"\n\n    # project_name and project_id are optional project name and project id.\n    # By default, it is read from OS_PROJECT_NAME and OS_PROJECT_ID environment variables.\n    # If these vars are empty, then the options are read\n    # from OS_TENANT_NAME and OS_TENANT_ID environment variables.\n    #\n    # project_name: \"...\"\n    # project_id: \"...\"\n\n    # By default, these fields are read from OS_APPLICATION_CREDENTIAL_NAME\n    # and OS_APPLICATION_CREDENTIAL_ID environment variables\n    #\n    # application_credential_name: \"...\"\n    # application_credential_id: \"...\"\n\n    # By default, this field is read from OS_APPLICATION_CREDENTIAL_SECRET\n    #\n    # application_credential_secret: \"...\"\n\n    # all_tenants can be set to true if all instances in all projects must be discovered.\n    # It is only relevant for the 'role: instance' and usually requires admin permissions.\n    #\n    # all_tenants: ...\n\n    # port is an optional port to scrape metrics from.\n    # Port 80 is used by default.\n    #\n    # port: ...\n\n    # availability is the availability of the endpoint to connect to.\n    # Must be one of public, admin or internal.\n    # By default, it is set to public\n    #\n    # availability: \"...\"\n\n    # tls_config is an optional tls config.\n    # See https://prometheus.io/docs/prometheus/latest/configuration/configuration/#tls_config\n    #\n    # tls_config:\n    #   ...\n```\n\n----------------------------------------\n\nTITLE: Finding Top 5 Slowest Queries with VictoriaLogs\nDESCRIPTION: A LogSQL query that extracts query statistics from logs, calculates the maximum execution duration for each query, and returns the top 5 slowest queries sorted by execution time.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/query-stats.md#2025-04-22_snippet_1\n\nLANGUAGE: logsql\nCODE:\n```\nvm_slow_query_stats | extract 'vm_slow_query_stats <query_stats>' | unpack_logfmt from query_stats \n| stats by(query) max(execution_duration_ms) execution_duration_max \n| sort by(execution_duration_max) desc | limit 5\n```\n\n----------------------------------------\n\nTITLE: Filtering Log Entries with Exact Field Match - VictoriaLogs LogSQL\nDESCRIPTION: This snippet shows the use of an exact filter in LogsQL, selecting logs where the field 'app' is exactly 'nginx'. Requires VictoriaLogs environment and the field must be indexed. The filter operates similarly to the stream filter but may have different performance characteristics. Input is a field-value pair; output is matching log entries.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_31\n\nLANGUAGE: logsql\nCODE:\n```\napp:=\"nginx\"\n```\n\n----------------------------------------\n\nTITLE: Using sum_over_time in VictoriaMetrics Syntax - plaintext\nDESCRIPTION: The sum_over_time function calculates the sum of raw sample values over the specified window per time series, supporting PromQL compatibility. Accepts a series selector with a window specification. Outputs the total sum, and metric names are removed unless keep_metric_names is specified.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_55\n\nLANGUAGE: plaintext\nCODE:\n```\n`sum_over_time(series_selector[d])`\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Vector Setup with Prometheus Remote Write\nDESCRIPTION: Minimal configuration for sending host metrics to VictoriaMetrics using Vector. Defines a host metrics source and configures a Prometheus remote write sink without authentication.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/data-ingestion/Vector.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsources:\n  host_metrics_source:\n    type: host_metrics\nsinks:\n  victoriametrics_sink:\n    type: prometheus_remote_write\n    inputs:\n      - host_metrics_source\n    endpoint: \"https://<victoriametrics_url>/api/v1/write\"\n    healthcheck:\n      enabled: false\n```\n\n----------------------------------------\n\nTITLE: Starting VictoriaMetrics with mTLS Protection\nDESCRIPTION: Command to run VictoriaMetrics with mTLS (Mutual TLS) authentication enabled, requiring clients to present valid certificates for connection.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/README.md#2025-04-22_snippet_73\n\nLANGUAGE: bash\nCODE:\n```\n./victoria-metrics -tls -mtls\n```\n\n----------------------------------------\n\nTITLE: Configuring vmagent for Redundant Remote Write to VictoriaMetrics Instances (sh)\nDESCRIPTION: This shell snippet demonstrates how to launch vmagent with multiple \\\"-remoteWrite.url\\\" options, enabling simultaneous data push to VictoriaMetrics nodes in distinct availability zones for high availability. No external dependencies are needed beyond a working vmagent installation and addressable VictoriaMetrics backends. The two URL flags, each targeting a unique server, ensure all collected metrics are redundantly stored. The command expects vmagent to be on the execution path and requires live VictoriaMetrics hosts at the specified endpoints.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/README.md#2025-04-22_snippet_65\n\nLANGUAGE: sh\nCODE:\n```\n#!/bin/sh\n/path/to/vmagent \\\n  -remoteWrite.url=http://<vm-az1>:8428/api/v1/write \\\n  -remoteWrite.url=http://<vm-az2>:8428/api/v1/write\n```\n\n----------------------------------------\n\nTITLE: Configuring Anomaly Detection Direction in vmanomaly Models (YAML)\nDESCRIPTION: Demonstrates configuring the `detection_direction` argument (available since v1.13.0) for different models to refine anomaly detection based on whether higher values, lower values, or both are considered anomalous relative to expected values (`yhat`). This example shows three Z-score models, each linked to specific queries and configured for `above_expected`, `below_expected`, or `both` directions. The `reader` section defining the queries is also included for context. Note the class name format change prior to v1.13.0.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/anomaly-detection/components/models.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nmodels:\n  model_above_expected:\n    class: 'zscore' # or 'model.zscore.ZscoreModel' until v1.13.0\n    z_threshold: 3.0\n    # track only cases when y > yhat, otherwise anomaly_score would be explicitly set to 0\n    detection_direction: 'above_expected'\n    # for this query we do not need to track lower values, thus, set anomaly detection tracking for y > yhat (above_expected)\n    queries: ['query_values_the_lower_the_better']\n  model_below_expected:\n    class: 'zscore' # or 'model.zscore.ZscoreModel' until v1.13.0\n    z_threshold: 3.0\n    # track only cases when y < yhat, otherwise anomaly_score would be explicitly set to 0\n    detection_direction: 'below_expected'\n    # for this query we do not need to track higher values, thus, set anomaly detection tracking for y < yhat (above_expected)\n    queries: ['query_values_the_higher_the_better']\n  model_bidirectional_default:\n    class: 'zscore' # or 'model.zscore.ZscoreModel' until v1.13.0\n    z_threshold: 3.0\n    # track in both direction, same backward-compatible behavior in case this arg is missing\n    detection_direction: 'both'\n    # for this query both directions can be equally important for anomaly detection, thus, setting it bidirectional (both)\n    queries: ['query_values_both_direction_matters']\nreader:\n  # ...\n  queries:\n    query_values_the_lower_the_better: metricsql_expression1\n    query_values_the_higher_the_better: metricsql_expression2\n    query_values_both_direction_matters: metricsql_expression3\n# other components like writer, schedule, monitoring\n```\n\n----------------------------------------\n\nTITLE: Querying Slow Scrapes with MetricsQL\nDESCRIPTION: This MetricsQL query identifies scrape targets that are taking longer than a specified duration. It selects time series where the automatically generated `scrape_duration_seconds` metric is greater than 1.5 seconds.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmagent.md#2025-04-22_snippet_14\n\nLANGUAGE: metricsql\nCODE:\n```\nscrape_duration_seconds > 1.5\n```\n\n----------------------------------------\n\nTITLE: Calculating Average Rate with `rate_avg` in MetricsQL\nDESCRIPTION: The `rate_avg` function computes the average of the per-second rates of increase across all input counter time series over the specified interval. This MetricsQL query shows its equivalence to applying `avg` aggregation on the results of the `rate` function.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/stream-aggregation.md#2025-04-22_snippet_24\n\nLANGUAGE: metricsql\nCODE:\n```\navg(rate(some_counter[interval]))\n```\n\n----------------------------------------\n\nTITLE: Configuring Timezone-Aware Prophet Model in vmanomaly (YAML)\nDESCRIPTION: Shows a YAML configuration example for the Prophet model in `vmanomaly` tailored for timezone-aware time series (available from v1.18.0). It enables timezone features (`tz_aware`, `tz_use_cyclical_encoding`), defines specific timezone-aware seasonalities (`tz_seasonalities` for 'hod' and 'dow'), and includes common model settings (commented out) and Prophet arguments. Requires `vmanomaly` v1.18.0+ for timezone features.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/anomaly-detection/components/models.md#2025-04-22_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml\nmodels:\n  your_desired_alias_for_a_model:\n    class: 'prophet'  # or 'model.prophet.ProphetModel' until v1.13.0\n    provide_series: ['anomaly_score', 'yhat', 'yhat_lower', 'yhat_upper', 'trend']\n    # Common arguments for built-in model, if not set, default to\n    # See https://docs.victoriametrics.com/anomaly-detection/components/models/#common-args\n    #\n    # provide_series: ['anomaly_score', 'yhat', 'yhat_lower', 'yhat_upper', 'trend']\n    # schedulers: [all scheduler aliases defined in `scheduler` section]\n    # queries: [all query aliases defined in `reader.queries` section]\n    # detection_direction: 'both'  # meaning both drops and spikes will be captured\n    # min_dev_from_expected: 0.0  # meaning, no minimal threshold is applied to prevent smaller anomalies\n    # scale: [1.0, 1.0]  # if needed, prediction intervals' width can be increased (>1) or narrowed (<1)\n    # clip_predictions: False  # if data_range for respective `queries` is set in reader, `yhat.*` columns will be clipped\n    # anomaly_score_outside_data_range: 1.01  # auto anomaly score (1.01) if `y` (real value) is outside of data_range, if set\n    tz_aware: True\n    tz_use_cyclical_encoding: True\n    tz_seasonalities: # intra-day + intra-week seasonality, no intra-year / sub-hour seasonality\n      - name: 'hod'  # intra-day seasonality, hour of the day\n        fourier_order: 5  # keep it 3-8 based on intraday pattern complexity\n        prior_scale: 10\n      - name: 'dow'  # intra-week seasonality, time of the week\n        fourier_order: 2  # keep it 2-4, as dependencies are learned separately for each weekday\n    # inner model args (key-value pairs) accepted by\n    # https://facebook.github.io/prophet/docs/quick_start#python-api\n    args:\n      interval_width: 0.98  # see https://facebook.github.io/prophet/docs/uncertainty_intervals\n      country_holidays: 'US'\n```\n```\n\n----------------------------------------\n\nTITLE: Exporting Raw Samples in JSON Line Format from VictoriaMetrics\nDESCRIPTION: Examples for exporting raw samples from VictoriaMetrics in JSON line format. The curl commands demonstrate the export endpoint for both single-node and cluster deployments.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/url-examples.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncurl http://localhost:8428/api/v1/export -d 'match[]=vm_http_request_errors_total' > filename.json\n```\n\nLANGUAGE: sh\nCODE:\n```\ncurl http://<vmselect>:8481/select/0/prometheus/api/v1/export -d 'match[]=vm_http_request_errors_total' > filename.json\n```\n\n----------------------------------------\n\nTITLE: Multiple Histogram Quantiles Calculation\nDESCRIPTION: Calculates multiple quantiles over histogram buckets. Each quantile is returned in separate time series with corresponding label.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_90\n\nLANGUAGE: promql\nCODE:\n```\nhistogram_quantiles('le', 0.3, 0.5, sum(rate(http_request_duration_seconds_bucket[5m]) by (le))\n```\n\n----------------------------------------\n\nTITLE: Calculating Standard Variance Over Range using range_stdvar() in MetricsQL\nDESCRIPTION: The `range_stdvar(q)` transform function computes the standard variance of the data points over the selected time range for each time series returned by the query `q`.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_107\n\nLANGUAGE: MetricsQL\nCODE:\n```\nrange_stdvar(q)\n```\n\n----------------------------------------\n\nTITLE: Defining Alerting Rules in YAML for vmalert (YAML)\nDESCRIPTION: This YAML snippet defines alerting and recording rules for vmalert, which are instrumental for evaluating conditions such as service downtime. Required dependencies include a vmalert installation and a compatible metrics back-end (VictoriaMetrics Cloud). The snippet expects an appropriate metric (e.g., 'up') and triggers an alert ('instanceIsDown') if it remains zero for over a minute. Labels and annotations provide context for downstream alerting systems like Alertmanager.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics-cloud/alerting-vmalert-victoria-metrics-cloud.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ngroups:\n  - name: common\n    rules:\n    - alert: instanceIsDown\n      for: 1m\n      expr: up == 0\n      labels:\n        severity: critical\n      annotations:\n        summary: \"{{ $labels.job }} instance: {{$labels.instance }} is not up\"\n        description: \"Job {{ $labels.job }}  instance: {{$labels.instance }} is not up for the last 1 minute\"\n```\n\n----------------------------------------\n\nTITLE: Computing Histogram Quantile - PromQL - PromQL\nDESCRIPTION: The histogram_quantile(phi, buckets) function calculates the phi-quantile (percentile) for given histogram buckets. Phi parameter must be between 0 and 1. Optionally, a third argument can return bounds for the estimated percentile with a particular label. Supported in PromQL except for the boundsLabel argument. All supplied histograms must have identical bucket boundaries. No dependencies except that input must conform to histogram bucket structure.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_102\n\nLANGUAGE: PromQL\nCODE:\n```\n`histogram_quantile(phi, buckets)`\n```\n\n----------------------------------------\n\nTITLE: Exporting Raw Data from VictoriaMetrics API\nDESCRIPTION: This snippet demonstrates how to export raw, unprocessed samples from VictoriaMetrics using the /api/v1/export endpoint. It shows examples for both single-node and cluster setups, allowing users to verify the correctness of raw data for a given time range.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/Troubleshooting.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nsingle-node: curl http://victoriametrics:8428/api/v1/export -d 'match[]=http_requests_total' -d 'start=...' -d 'end=...' -d 'reduce_mem_usage=1'\n\ncluster: curl http://<vmselect>:8481/select/<tenantID>/prometheus/api/v1/export -d 'match[]=http_requests_total' -d 'start=...' -d 'end=...' -d 'reduce_mem_usage=1'\n```\n\n----------------------------------------\n\nTITLE: Calculating Union of Time Series in MetricsQL\nDESCRIPTION: A transform function that combines time series from multiple queries (`q1` to `qN`) into a single result set. The function name `union` is optional; `(q1, q2)` is equivalent to `union(q1, q2)`. Assumes unique label sets across queries; otherwise, only the first series with a given label set is kept. Use `alias` or `label_set` to ensure uniqueness.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_137\n\nLANGUAGE: metricsql\nCODE:\n```\nunion(q1, ..., qN)\n```\n\n----------------------------------------\n\nTITLE: Node Exporter Discovery in Kubernetes\nDESCRIPTION: Configuration for discovering and scraping node-exporter targets in Kubernetes using kubernetes_sd_configs with pod role and relabeling rules.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/scrape_config_examples.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nscrape_configs:\n- job_name: node-exporter\n  kubernetes_sd_configs:\n  - role: pod\n  relabel_configs:\n\n    # Leave only targets with `node-exporter` container name.\n    # If node-exporter containers have another name in your Kubernetes cluster,\n    # then adjust the regex value accordingly.\n    #\n  - source_labels: [__meta_kubernetes_pod_container_name]\n    regex: node-exporter\n    action: keep\n\n    # Copy node name into `node` label, so node-exporter targets\n    # can be attributed to a particular node.\n    #\n  - source_labels: [__meta_kubernetes_pod_node_name]\n    target_label: node\n```\n\n----------------------------------------\n\nTITLE: Setting Multiple HTTP Auth Headers in vmauth - Bash\nDESCRIPTION: This bash snippet extends the previous example to allow vmauth to read authentication tokens from multiple HTTP headers by specifying the -httpAuthHeader flag more than once. Requires vmauth binary and is useful when supporting several authentication mechanisms in parallel, improving compatibility with various upstream systems.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmauth.md#2025-04-22_snippet_43\n\nLANGUAGE: bash\nCODE:\n```\n./vmauth -httpAuthHeader='Authorization' -httpAuthHeader='X-Amz-Firehose-Access-Key'\n\n```\n\n----------------------------------------\n\nTITLE: Exporting Time Series Data in JSON Line Format\nDESCRIPTION: Example showing the JSON line format output from VictoriaMetrics export API. Each line contains samples for a single time series with metric name, labels, values and timestamps.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/README.md#2025-04-22_snippet_41\n\nLANGUAGE: json\nCODE:\n```\n{\"metric\":{\"__name__\":\"up\",\"job\":\"node_exporter\",\"instance\":\"localhost:9100\"},\"values\":[0,0,0],\"timestamps\":[1549891472010,1549891487724,1549891503438]}\n{\"metric\":{\"__name__\":\"up\",\"job\":\"prometheus\",\"instance\":\"localhost:9090\"},\"values\":[1,1,1],\"timestamps\":[1549891461511,1549891476511,1549891491511]}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Configuration Function in Go\nDESCRIPTION: Shows how to implement a 'newConfig' function that sets default values and applies options to create a configured 'config' struct.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n// newConfig returns an appropriately configured config.\nfunc newConfig(options ...Option) config {\n\t// Set default values for config.\n\tconfig := config{/* […] */}\n\tfor _, option := range options {\n\t\tconfig = option.apply(config)\n\t}\n\t// Perform any validation here.\n\treturn config\n}\n```\n\n----------------------------------------\n\nTITLE: Share Greater Than Over Time Calculation in VictoriaMetrics\nDESCRIPTION: The `share_gt_over_time` function determines the share of raw samples exceeding a threshold `gt`, expressed as a fraction within `[0...1]`. This calculation is useful for SLI/SLO assessments and is performed per time series over window `d`. Metric names are absent unless modified to keep them.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/MetricsQL.md#2025-04-22_snippet_58\n\nLANGUAGE: Other\nCODE:\n```\nshare_gt_over_time(series_selector[d], gt)\n```\n\n----------------------------------------\n\nTITLE: Getting Timezone Offset in MetricsQL\nDESCRIPTION: A transform function that returns the time offset in seconds for a specified timezone `tz` relative to UTC. Useful for timezone-aware calculations, e.g., `day_of_week(time()+timezone_offset(\"America/Los_Angeles\"))`. Use `Local` for the server's timezone.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_135\n\nLANGUAGE: metricsql\nCODE:\n```\ntimezone_offset(tz)\n```\n\n----------------------------------------\n\nTITLE: Calculating Absolute Value in MetricsQL\nDESCRIPTION: A transform function that computes the absolute value for each data point in the time series returned by the query `q`. If applied directly to a series selector, `default_rollup()` is implicitly used. It supports PromQL and can optionally retain metric names with `keep_metric_names`.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_65\n\nLANGUAGE: MetricsQL\nCODE:\n```\n`abs(q)`\n```\n\n----------------------------------------\n\nTITLE: Dropping Empty Series - PromQL - PromQL\nDESCRIPTION: The drop_empty_series() function in this snippet removes empty series from the evaluation result. Typically used when the default operator should only be applied to non-empty series. Useful for avoiding default value filling on all series. No additional dependencies. Returns only series with at least one non-empty sample.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_97\n\nLANGUAGE: PromQL\nCODE:\n```\n`drop_empty_series(q)`\n```\n\n----------------------------------------\n\nTITLE: Using zscore Aggregate Function in MetricsQL - MetricsQL\nDESCRIPTION: This snippet shows the `zscore` aggregate function template, which calculates standard scores per group for all time series returned by the query `q`. It operates per time-aligned groupings as specified. Dependencies: VictoriaMetrics/MetricsQL, group label specification. Inputs: `q` (query expression), group_labels (list); Outputs: z-scored time series for each group. Useful for anomaly detection in multi-series data. All parameters required.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/MetricsQL.md#2025-04-22_snippet_119\n\nLANGUAGE: MetricsQL\nCODE:\n```\n`zscore(q) by (group_labels)`\n```\n\n----------------------------------------\n\nTITLE: Using bottomk_avg Function with Labels in PromQL\nDESCRIPTION: Returns k series with smallest averages plus sum of remaining series with custom label.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/MetricsQL.md#2025-04-22_snippet_116\n\nLANGUAGE: PromQL\nCODE:\n```\nbottomk_avg(3, sum(process_resident_memory_bytes) by (job), \"job=other\")\n```\n\n----------------------------------------\n\nTITLE: Extracting IPv4 addresses from log messages using extract_regexp in LogsQL\nDESCRIPTION: Query that extracts IPv4 addresses from the _msg field using regular expressions, then calculates statistics for /16 subnets with the highest log counts in the last 5 minutes.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/logsql-examples.md#2025-04-22_snippet_13\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m | extract_regexp \"(?P<ip>([0-9]+[.]){3}[0-9]+)\" | stats by (ip:/16) count() rows | first 10 by (rows desc)\n```\n\n----------------------------------------\n\nTITLE: Using delta_prometheus Rollup Function in VictoriaMetrics\nDESCRIPTION: This function calculates the difference between the first and last samples at the given lookbehind window. It behaves similarly to Prometheus's delta function. Metric names are stripped unless keep_metric_names is added.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_15\n\nLANGUAGE: markdown\nCODE:\n```\ndelta_prometheus(series_selector[d])\n```\n\n----------------------------------------\n\nTITLE: Configuring Multi-Condition Routing in vmauth (YAML)\nDESCRIPTION: This YAML snippet shows how to configure a routing rule in vmauth that requires multiple conditions to be met simultaneously. It uses `src_paths`, `src_hosts`, `src_query_args`, and `src_headers` within a single `url_map` entry. The request is routed to `http://app1-backend/` only if the path matches `/app/.*`, the host matches `.*\\.bar\\.baz`, the query arguments include `db=abc`, and the `TenantID` header is `42`.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmauth.md#2025-04-22_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\nunauthorized_user:\n  url_map:\n  - src_paths: [\"/app/.*\"]\n    src_hosts: [\".+\\\\.bar\\\\.baz\"]\n    src_query_args: [\"db=abc\"]\n    src_headers: [\"TenantID: 42\"]\n    url_prefix: \"http://app1-backend/\"\n```\n\n----------------------------------------\n\nTITLE: Using Step Interval Syntax [Ni] for Lookbehind and Offset in MetricsQL\nDESCRIPTION: Demonstrates the `[Ni]` syntax in MetricsQL to specify lookbehind windows and offsets relative to the current step interval (like Grafana's `$__interval`). This query calculates a rate over 10 steps with an offset of 5 steps.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_10\n\nLANGUAGE: metricsql\nCODE:\n```\nrate(metric[10i] offset 5i)\n```\n\n----------------------------------------\n\nTITLE: Summing Values Greater Than Threshold Over Time in VictoriaMetrics\nDESCRIPTION: The sum_gt_over_time function calculates the sum of raw sample values greater than a specified threshold over a given time window for each time series returned by the selector.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/MetricsQL.md#2025-04-22_snippet_65\n\nLANGUAGE: metricsql\nCODE:\n```\nsum_gt_over_time(series_selector[d], gt)\n```\n\n----------------------------------------\n\nTITLE: Performing Mathematical Operations with math Pipe in LogSQL\nDESCRIPTION: The math pipe performs calculations on numeric field values. This example divides the duration_msecs field by 1000, rounds it to an integer, and stores the result in duration_secs.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_115\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m | math round(duration_msecs / 1000) as duration_secs\n```\n\n----------------------------------------\n\nTITLE: Calculating Histogram Standard Deviation - PromQL - PromQL\nDESCRIPTION: This snippet documents the histogram_stddev(buckets) function, which yields the standard deviation for provided histogram buckets by time series. Inputs must be histogram-formatted buckets. No external dependencies required, aside from histogram-compatible data.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_105\n\nLANGUAGE: PromQL\nCODE:\n```\n`histogram_stddev(buckets)`\n```\n\n----------------------------------------\n\nTITLE: Importing Native Format Data into VictoriaMetrics using Shell\nDESCRIPTION: Imports data in VictoriaMetrics' native binary format from the file `exported_data.bin` into a destination VictoriaMetrics instance (`destination-victoriametrics:8428`) via the `/api/v1/import/native` endpoint. This is the most efficient import method. Requires `curl` and the data file `exported_data.bin`. Extra labels can be added via the `extra_label` query parameter.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/README.md#2025-04-22_snippet_50\n\nLANGUAGE: sh\nCODE:\n```\n# Import the data to <destination-victoriametrics>:\ncurl -X POST http://destination-victoriametrics:8428/api/v1/import/native -T exported_data.bin\n```\n\n----------------------------------------\n\nTITLE: Registering and Exporting Metrics in Prometheus Format in Go\nDESCRIPTION: This Go snippet demonstrates how to register various metrics like counters, summaries, gauges, and histograms using the VictoriaMetrics package. The registered metrics can be exposed via HTTP or pushed to a remote storage in Prometheus text exposition format. Key dependencies include the VictoriaMetrics package and an HTTP server for endpoint exposure. The code shows registering metrics with labels, updating metrics based on function execution, and the configuration for pushing metrics to a remote endpoint.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/VictoriaMetrics/metrics/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nimport \"github.com/VictoriaMetrics/metrics\"\n\n// Register various metrics.\n// Metric name may contain labels in Prometheus format - see below.\nvar (\n\t// Register counter without labels.\n\trequestsTotal = metrics.NewCounter(\"requests_total\")\n\n\t// Register summary with a single label.\n\trequestDuration = metrics.NewSummary(`requests_duration_seconds{path=\"/foobar/baz\"}`)\n\n\t// Register gauge with two labels.\n\tqueueSize = metrics.NewGauge(`queue_size{queue=\"foobar\",topic=\"baz\"}`, func() float64 {\n\t\treturn float64(foobarQueue.Len())\n\t})\n\n\t// Register histogram with a single label.\n\tresponseSize = metrics.NewHistogram(`response_size{path=\"/foo/bar\"}`)\n)\n\n// ...\nfunc requestHandler() {\n\t// Increment requestTotal counter.\n\trequestsTotal.Inc()\n\n\tstartTime := time.Now()\n\tprocessRequest()\n\t// Update requestDuration summary.\n\trequestDuration.UpdateDuration(startTime)\n\n\t// Update responseSize histogram.\n\tresponseSize.Update(responseSize)\n}\n\n// Expose the registered metrics at `/metrics` path.\nhttp.HandleFunc(\"/metrics\", func(w http.ResponseWriter, req *http.Request) {\n\tmetrics.WritePrometheus(w, true)\n})\n\n// ... or push registered metrics every 10 seconds to http://victoria-metrics:8428/api/v1/import/prometheus\n// with the added `instance=\"foobar\"` label to all the pushed metrics.\nmetrics.InitPush(\"http://victoria-metrics:8428/api/v1/import/prometheus\", 10*time.Second, `instance=\"foobar\"`, true)\n```\n\n----------------------------------------\n\nTITLE: Defining deriv in MetricsQL - Markdown\nDESCRIPTION: Explains deriv rollup functionality for computing per-second derivatives via linear regression on data in a lookbehind window. Notes PromQL support, metric name handling, and the relevance for analyses needing change rates. Intended for advanced query operations.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/MetricsQL.md#2025-04-22_snippet_20\n\nLANGUAGE: Markdown\nCODE:\n```\n#### deriv\n\n`deriv(series_selector[d])` is a [rollup function](#rollup-functions), which calculates per-second derivative over the given lookbehind window `d`\nper each time series returned from the given [series_selector](https://docs.victoriametrics.com/keyconcepts/#filtering).\nThe derivative is calculated using linear regression.\n\nMetric names are stripped from the resulting rollups. Add [keep_metric_names](#keep_metric_names) modifier in order to keep metric names.\n\nThis function is supported by PromQL.\n\nSee also [deriv_fast](#deriv_fast) and [ideriv](#ideriv).\n\n```\n\n----------------------------------------\n\nTITLE: Querying Targets Near Sample Limit with MetricsQL\nDESCRIPTION: This MetricsQL query detects targets exposing a number of samples close to their configured limit (`sample_limit`). It calculates the ratio of `scrape_samples_scraped` to `scrape_samples_limit` and selects targets where this ratio exceeds 0.8 (80%). This requires `sample_limit` to be set in the scrape configuration.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmagent.md#2025-04-22_snippet_18\n\nLANGUAGE: metricsql\nCODE:\n```\nscrape_samples_scraped / scrape_samples_limit > 0.8\n```\n\n----------------------------------------\n\nTITLE: Configuring VictoriaLogs to Use Local Timestamps for UDP Syslog\nDESCRIPTION: Launches VictoriaLogs with UDP Syslog ingestion on port 514 and sets it to use local timestamps. This configuration is helpful when dealing with UDP Syslog messages with unreliable timestamps.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/data-ingestion/syslog.md#2025-04-22_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\n./victoria-logs -syslog.listenAddr.udp=:514 -syslog.useLocalTimestamp.udp\n```\n\n----------------------------------------\n\nTITLE: Configuring MAD (Median Absolute Deviation) Model in VictoriaMetrics (YAML)\nDESCRIPTION: This YAML example shows how to configure the MADModel for robust anomaly detection in VictoriaMetrics, specifying the model class (alias or full name) and threshold for anomaly identification. Dependencies include VictoriaMetrics anomaly-detection component (v1.13.0+ for class aliasing). Key parameters are 'class' and 'threshold', with optional outputs and additional tuning available via common arguments. Input is proper YAML; output is a model setup leveraging MAD for anomaly scoring.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/anomaly-detection/components/models.md#2025-04-22_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\nmodels:\n  your_desired_alias_for_a_model:\n    class: \"mad\"  # or 'model.mad.MADModel' until v1.13.0\n    threshold: 2.5\n    # Common arguments for built-in model, if not set, default to\n    # See https://docs.victoriametrics.com/anomaly-detection/components/models/#common-args\n    #\n    # provide_series: ['anomaly_score', 'yhat', 'yhat_lower', 'yhat_upper']\n    # schedulers: [all scheduler aliases defined in `scheduler` section]\n    # queries: [all query aliases defined in `reader.queries` section]\n    # detection_direction: 'both'  # meaning both drops and spikes will be captured\n    # min_dev_from_expected: 0.0  # meaning, no minimal threshold is applied to prevent smaller anomalies\n    # scale: [1.0, 1.0]  # if needed, prediction intervals' width can be increased (>1) or narrowed (<1)\n    # clip_predictions: False  # if data_range for respective `queries` is set in reader, `yhat.*` columns will be clipped\n    # anomaly_score_outside_data_range: 1.01  # auto anomaly score (1.01) if `y` (real value) is outside of data_range, if set\n\n```\n\n----------------------------------------\n\nTITLE: Querying Histogram Quantiles using MetricsQL\nDESCRIPTION: Demonstrates how to calculate estimated 50th and 99th percentiles from VictoriaMetrics histogram buckets using the `histogram_quantiles` function in MetricsQL. It sums the increase of histogram buckets (`request_duration_seconds:60s_histogram_bucket`) over the last hour (`[1h]`) grouped by the `vmrange` label before calculating the quantiles.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/stream-aggregation.md#2025-04-22_snippet_9\n\nLANGUAGE: metricsql\nCODE:\n```\nhistogram_quantiles(\"quantile\", 0.50, 0.99, sum(increase(request_duration_seconds:60s_histogram_bucket[1h])) by (vmrange))\n```\n\n----------------------------------------\n\nTITLE: Configuring Label Removal via 'without' - VictoriaMetrics (YAML)\nDESCRIPTION: Sets a stream aggregation config that sums input metric samples across all instances by excluding the 'instance' label with the 'without' list. Dependencies are basic VictoriaMetrics stream aggregation setup; parameters include 'interval', 'outputs', and 'without' (labels to drop, here 'instance'). The output merges instances under the same remaining labels, resulting in metrics like 'foo:1m_without_instance_sum_samples{app=\"bar\"}'. No additional inputs besides the YAML configuration are required.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/stream-aggregation.md#2025-04-22_snippet_38\n\nLANGUAGE: yaml\nCODE:\n```\n- interval: 1m\\n  without: [instance]\\n  outputs: [sum_samples]\n```\n\n----------------------------------------\n\nTITLE: Configuring Yandex Cloud Service Discovery in VictoriaMetrics\nDESCRIPTION: YAML configuration example for Yandex Cloud service discovery in VictoriaMetrics. This snippet shows how to configure yandexcloud_sd_configs with service selection, API endpoints, and authentication options.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/sd_configs.md#2025-04-22_snippet_25\n\nLANGUAGE: yaml\nCODE:\n```\nscrape_configs:\n- job_name: yandexcloud\n  yandexcloud_sd_configs:\n\n    # service is a mandatory option for yandexcloud service discovery\n    # currently only \"compute\" service is supported\n    #\n  - service: compute\n\n    # api_endpoint is an optional API endpoint for service discovery\n    # The https://api.cloud.yandex.net endpoint is used by default.\n    #\n    # api_endpoint: \"https://api.cloud.yandex.net\"\n\n    # yandex_passport_oauth_token is an optional OAuth token\n    # for querying yandexcloud API. See https://cloud.yandex.com/en-ru/docs/iam/concepts/authorization/oauth-token\n    #\n    # yandex_passport_oauth_token: \"...\"\n\n    # tls_config is an optional tls config.\n    # See https://prometheus.io/docs/prometheus/latest/configuration/configuration/#tls_config\n    #\n    # tls_config:\n    #   ...\n```\n\n----------------------------------------\n\nTITLE: Calculating Multiple Quantiles Over Time Series in MetricsQL\nDESCRIPTION: Added in v1.65.0, the `quantiles(\"phiLabel\", phi1, ..., phiN, q)` aggregate function in MetricsQL calculates multiple specified φ-quantiles (phi1 to phiN) over the time series returned by the query `q`. It expects input time series to have a label specified by `phiLabel` indicating the quantile value (φ).\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/changelog/CHANGELOG_2021.md#2025-04-22_snippet_13\n\nLANGUAGE: MetricsQL\nCODE:\n```\nquantiles(\"phiLabel\", phi1, ..., phiN, q)\n```\n\n----------------------------------------\n\nTITLE: Day Range Filter with Time Zone Offset in LogsQL\nDESCRIPTION: Example of using a day range filter with a time zone offset to query logs between 08:00 and 18:00 at +0200 time zone.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_24\n\nLANGUAGE: logsql\nCODE:\n```\n_time:day_range[08:00, 18:00) offset 2h\n```\n\n----------------------------------------\n\nTITLE: Multi-Backend Proxy Configuration\nDESCRIPTION: YAML configuration for vmauth to proxy requests to different backends based on path prefixes.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmauth.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nunauthorized_user:\n  url_map:\n  - src_paths:\n    - \"/app1/.*\"\n    drop_src_path_prefix_parts: 1\n    url_prefix: \"http://app1-backend/\"\n  - src_paths:\n    - \"/app2/.*\"\n    drop_src_path_prefix_parts: 1\n    url_prefix: \"http://app2-backend/\"\n  url_prefix: \"http://default-backed/\"\n```\n\n----------------------------------------\n\nTITLE: Data Import Example with Curl\nDESCRIPTION: Commands showing how to export data from source VictoriaMetrics instance and import it into destination instance.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/README.md#2025-04-22_snippet_46\n\nLANGUAGE: sh\nCODE:\n```\n# Export the data from <source-victoriametrics>:\ncurl http://source-victoriametrics:8428/api/v1/export -d 'match={__name__!\"\"}' > exported_data.jsonl\n\n# Import the data to <destination-victoriametrics>:\ncurl -X POST http://destination-victoriametrics:8428/api/v1/import -T exported_data.jsonl\n```\n\n----------------------------------------\n\nTITLE: Grouped Stats Calculation in LogsQL\nDESCRIPTION: This query calculates the number of logs and unique IP addresses over the last 5 minutes, grouped by host and path fields.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_138\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m | stats by (host, path) count() logs_total, count_uniq(ip) ips_total\n```\n\n----------------------------------------\n\nTITLE: Counting Series with `count_series` in MetricsQL\nDESCRIPTION: The `count_series` function counts the number of unique time series observed for a metric during the specified interval. This MetricsQL query demonstrates its equivalence to counting the result of `last_over_time` applied to the metric over the interval.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/stream-aggregation.md#2025-04-22_snippet_17\n\nLANGUAGE: metricsql\nCODE:\n```\ncount(last_over_time(some_metric[interval]))\n```\n\n----------------------------------------\n\nTITLE: Enabling Restore on Start in Kubernetes (YAML)\nDESCRIPTION: YAML configuration snippet for VictoriaMetrics operator (`VMStorage` or `VMSingle` custom resource) to enable automatic restore on pod startup. Setting `vmbackup.restore.onStart.enabled` to `\"true\"` configures an init container to run `vmbackupmanager restore`.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmbackupmanager.md#2025-04-22_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\n   vmbackup:\n     restore:\n       onStart:\n         enabled: \"true\"\n\n```\n\n----------------------------------------\n\nTITLE: Configuring VictoriaMetrics Single for Kubernetes\nDESCRIPTION: YAML configuration for VictoriaMetrics Single, including scrape configs for Kubernetes API servers, nodes, and cAdvisor. It sets up service discovery and relabeling for comprehensive cluster monitoring.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/guides/k8s-monitoring-via-vm-single/README.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nserver:\n  scrape:\n    enabled: true\n    configMap: \"\"\n    config:\n      global:\n        scrape_interval: 15s\n      scrape_configs:\n        - job_name: victoriametrics\n          static_configs:\n            - targets: [ \"localhost:8428\" ]\n        - job_name: \"kubernetes-apiservers\"\n          kubernetes_sd_configs:\n            - role: endpoints\n          scheme: https\n          tls_config:\n            ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt\n            insecure_skip_verify: true\n          bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token\n          relabel_configs:\n            - source_labels:\n                [\n                  __meta_kubernetes_namespace,\n                  __meta_kubernetes_service_name,\n                  __meta_kubernetes_endpoint_port_name,\n                ]\n              action: keep\n              regex: default;kubernetes;https\n        - job_name: \"kubernetes-nodes\"\n          scheme: https\n          tls_config:\n            ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt\n            insecure_skip_verify: true\n          bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token\n          kubernetes_sd_configs:\n            - role: node\n          relabel_configs:\n            - action: labelmap\n              regex: __meta_kubernetes_node_label_(.+)\n            - target_label: __address__\n              replacement: kubernetes.default.svc:443\n            - source_labels: [ __meta_kubernetes_node_name ]\n              regex: (.+)\n              target_label: __metrics_path__\n              replacement: /api/v1/nodes/$1/proxy/metrics\n        - job_name: \"kubernetes-nodes-cadvisor\"\n          scheme: https\n          tls_config:\n            ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt\n            insecure_skip_verify: true\n          bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token\n          kubernetes_sd_configs:\n            - role: node\n          relabel_configs:\n            - action: labelmap\n              regex: __meta_kubernetes_node_label_(.+)\n            - target_label: __address__\n              replacement: kubernetes.default.svc:443\n            - source_labels: [ __meta_kubernetes_node_name ]\n              regex: (.+)\n              target_label: __metrics_path__\n              replacement: /api/v1/nodes/$1/proxy/metrics/cadvisor\n          metric_relabel_configs:\n            - action: replace\n              source_labels: [pod]\n              regex: '(.+)'\n              target_label: pod_name\n              replacement: '${1}'\n            - action: replace\n              source_labels: [container]\n              regex: '(.+)'\n              target_label: container_name\n              replacement: '${1}'\n            - action: replace\n              target_label: name\n              replacement: k8s_stub\n            - action: replace\n              source_labels: [id]\n              regex: '^/system\\.slice/(.+)\\.service$'\n              target_label: systemd_service_name\n              replacement: '${1}'\n```\n\n----------------------------------------\n\nTITLE: Searching for a Phrase in Log Messages - VictoriaLogs LogSQL\nDESCRIPTION: This query searches for the phrase 'ssh: login fail' in log messages, matching even those with punctuation and whitespace. Dependencies include VictoriaLogs with phrase search capabilities. Input is the phrase (in quotes); output is messages containing the exact sequence. Differences from word queries: matches exact multi-word phrases.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_41\n\nLANGUAGE: logsql\nCODE:\n```\n\"ssh: login fail\"\n```\n\n----------------------------------------\n\nTITLE: Extracting IPv4 Addresses with extract_regexp Pipe in LogSQL\nDESCRIPTION: This snippet demonstrates how to use the extract_regexp pipe to extract IPv4 addresses from the _msg field and store them in the ip field for logs over the last 5 minutes.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_85\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m | extract_regexp \"(?P<ip>([0-9]+[.]){3}[0-9]+)\" from _msg\n```\n\n----------------------------------------\n\nTITLE: Configuring Multitenancy via Relabeling in vmagent YAML\nDESCRIPTION: This YAML configuration snippet demonstrates how to set up multitenancy in vmagent by using relabeling rules within a scrape configuration. It extracts the tenant ID from a Kubernetes pod annotation (`prometheus.io/account_id`) and assigns it to the `vm_account_id` label, directing metrics to the appropriate tenant (`<account_id>:0`) when sent to a multitenant VictoriaMetrics endpoint.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmagent.md#2025-04-22_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nscrape_configs:\n- kubernetes_sd_configs:\n  - role: pod\n  relabel_configs:\n  - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_account_id]\n    target_label: vm_account_id\n```\n\n----------------------------------------\n\nTITLE: Absolute Value Transformation with VictoriaMetrics PromQL\nDESCRIPTION: The abs function in PromQL returns the absolute value for every point of each time series provided by query q. It optionally accepts the keep_metric_names modifier and is compatible with PromQL. The function can be chained with other queries or used standalone to process metric results.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_74\n\nLANGUAGE: PromQL\nCODE:\n```\n`abs(q)`\n```\n\n----------------------------------------\n\nTITLE: Using multiple 'or' filters in MetricsQL series selectors\nDESCRIPTION: Shows how to use multiple 'or' filters in MetricsQL series selectors to select series with different label combinations.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/MetricsQL.md#2025-04-22_snippet_1\n\nLANGUAGE: metricsql\nCODE:\n```\n{env=\"prod\",job=\"a\" or env=\"dev\",job=\"b\"}\n```\n\n----------------------------------------\n\nTITLE: Computing Rate Over Sum in PromQL\nDESCRIPTION: The rate_over_sum function calculates the per-second rate over the sum of raw samples on a given lookbehind window for each time series. It's typically used with gauges.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_36\n\nLANGUAGE: promql\nCODE:\n```\nrate_over_sum(series_selector[d])\n```\n\n----------------------------------------\n\nTITLE: Collecting CPU Profile from VMAuth\nDESCRIPTION: Command to collect a CPU profile from VMAuth running on localhost port 8427. This command waits for 30 seconds to gather runtime data before returning the profile, which can be analyzed with go tool pprof.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmauth.md#2025-04-22_snippet_51\n\nLANGUAGE: sh\nCODE:\n```\ncurl http://0.0.0.0:8427/debug/pprof/profile > cpu.pprof\n```\n\n----------------------------------------\n\nTITLE: Calculating Share of Samples Greater Than Threshold in MetricsQL\nDESCRIPTION: Calculates the share (in the range `[0...1]`) of raw samples within a lookbehind window `d` that are greater than the specified threshold `gt`. This calculation is performed independently for each time series. Metric names are stripped unless `keep_metric_names` is used. Useful for SLI/SLO calculations, often applied to gauges.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_62\n\nLANGUAGE: metricsql\nCODE:\n```\nshare_gt_over_time(series_selector[d], gt)\n```\n\n----------------------------------------\n\nTITLE: Enabling Callback Unregistration via Registration Object in Go Metrics API\nDESCRIPTION: Modifies the `RegisterCallback` method of a `Meter` in `go.opentelemetry.io/otel/metric` to return a `Registration` object. This object provides a mechanism (`Unregister() error`) to subsequently unregister the previously registered callback.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-22_snippet_21\n\nLANGUAGE: Go\nCODE:\n```\ngo.opentelemetry.io/otel/metric\n// Method: Meter.RegisterCallback(...instrument.Asynchronous) (Registration, error)\n// Interface: Registration { Unregister() error }\n```\n\n----------------------------------------\n\nTITLE: Error Percentage Calculation\nDESCRIPTION: Arithmetic operation to calculate the percentage of error requests using total error and success metrics.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/keyConcepts/keyConcepts.md#2025-04-22_snippet_22\n\nLANGUAGE: metricsql\nCODE:\n```\n(requests_error_total / (requests_error_total + requests_success_total)) * 100\n```\n\n----------------------------------------\n\nTITLE: Migration from Mimir Using Remote Read Protocol\nDESCRIPTION: Command for migrating multi-tenant data from Mimir to VictoriaMetrics using the remote-read protocol with streaming enabled. Includes tenant authentication header and various configuration options.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmctl.md#2025-04-22_snippet_16\n\nLANGUAGE: sh\nCODE:\n```\n./vmctl remote-read \n--remote-read-src-addr=http://<mimir>:9009/prometheus \\\n--remote-read-filter-time-start=2021-10-18T00:00:00Z \\\n--remote-read-step-interval=hour \\\n--remote-read-headers=X-Scope-OrgID:demo \\\n--remote-read-use-stream=true \\\n--vm-addr=http://<victoria-metrics>:8428 \\\n```\n\n----------------------------------------\n\nTITLE: Using stdvar_over_time with VictoriaMetrics - Markdown - Syntax Reference\nDESCRIPTION: This snippet presents the stdvar_over_time rollup function for computing standard variance over a series of samples in the window d. Applied on gauges, the function strips metric names by default and works with PromQL. Parameters: series_selector (series filter), d (duration). Output: the variance for each matched series.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_60\n\nLANGUAGE: Markdown\nCODE:\n```\n`stdvar_over_time(series_selector[d])`\n```\n\n----------------------------------------\n\nTITLE: Calculating Prometheus-style Increase with `increase_prometheus` in MetricsQL\nDESCRIPTION: The `increase_prometheus` function calculates the increase of counter metric time series over the specified interval, mimicking Prometheus behavior by skipping the first observed sample value for each time series. This MetricsQL query shows its equivalence to summing the results of `increase_prometheus`. Behavior for sporadic metrics can be adjusted via `staleness_interval`.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/stream-aggregation.md#2025-04-22_snippet_20\n\nLANGUAGE: metricsql\nCODE:\n```\nsum(increase_prometheus(some_counter[interval]))\n```\n\n----------------------------------------\n\nTITLE: Configuring vmanomaly with Prophet Model in YAML\nDESCRIPTION: Example configuration file for vmanomaly that sets up periodic scheduling, Prophet model configuration, data source connection, metric queries, and monitoring endpoints. This configuration monitors CPU usage rates with anomaly detection.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/anomaly-detection/guides/guide-vmanomaly-vmalert/README.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nschedulers:\n  periodic:\n    infer_every: \"1m\"\n    fit_every: \"1h\"\n    fit_window: \"2d\" # 2d-14d based on the presence of weekly seasonality in your data\n\nmodels:\n  prophet:\n    class: \"prophet\" \n    args:\n      interval_width: 0.98\n      weekly_seasonality: False  # comment it if your data has weekly seasonality\n      yearly_seasonality: False\n\nreader:\n  datasource_url: \"http://victoriametrics:8428/\"\n  sampling_period: \"60s\"\n  queries:\n    node_cpu_rate: \n      expr: \"sum(rate(node_cpu_seconds_total[5m])) by (mode, instance, job)\"\n\nwriter:\n  datasource_url: \"http://victoriametrics:8428/\"\n\n\nmonitoring:\n  pull: # Enable /metrics endpoint.\n    addr: \"0.0.0.0\"\n    port: 8490\n```\n\n----------------------------------------\n\nTITLE: Configuring vmanomaly in Docker Compose - YAML\nDESCRIPTION: This YAML code block demonstrates how to define a vmanomaly container as a service within a docker-compose file. It mounts local license/config files as volumes and specifies the command line arguments for the container. Requires Docker Compose to be installed, and the volumes/paths must exist on the host system. Inputs include the image, volume mounts, and command; output is a running service upon 'docker-compose up'. This enables multi-container orchestration with externalized credentials and configuration.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/anomaly-detection/QuickStart.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n# docker-compose file\nservices:\n  # ...\n  vmanomaly:\n    image: victoriametrics/vmanomaly:v1.21.0\n    volumes:\n        $YOUR_LICENSE_FILE_PATH:/license\n        $YOUR_CONFIG_FILE_PATH:/config.yml\n    command:\n      - \"/config.yml\"\n      - \"--licenseFile=/license\"\n      - \"--loggerLevel=INFO\"\n    # ...\n```\n\n----------------------------------------\n\nTITLE: Summing Sample Values with `sum_samples` in MetricsQL\nDESCRIPTION: The `sum_samples` function calculates the sum of all input sample values for gauge metrics over the specified interval. This MetricsQL query demonstrates its equivalence to applying `sum` aggregation to the results of `sum_over_time`.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/stream-aggregation.md#2025-04-22_snippet_28\n\nLANGUAGE: metricsql\nCODE:\n```\nsum(sum_over_time(some_metric[interval]))\n```\n\n----------------------------------------\n\nTITLE: Calculating log counts per field value using stats in LogsQL\nDESCRIPTION: Query that calculates the number of logs for each unique value of the level field over the last 5 minutes using the stats pipe.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/logsql-examples.md#2025-04-22_snippet_14\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m | stats by (level) count() rows\n```\n\n----------------------------------------\n\nTITLE: Using any aggregate function in PromQL\nDESCRIPTION: Aggregate function that returns a single series per group from the time series returned by the query. Useful for selecting a representative series from each group.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_139\n\nLANGUAGE: promql\nCODE:\n```\nany(q) by (group_labels)\n```\n\n----------------------------------------\n\nTITLE: Viewing vmalert Debug Log Output (Shell Session)\nDESCRIPTION: Displays example log output from vmalert when debug mode is enabled for a specific rule (`debug: true`). The logs show detailed information about rule evaluation, datasource queries, number of samples returned, query latency, and alert state transitions (e.g., PENDING to FIRING). Sensitive info like credentials is stripped by default.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmalert.md#2025-04-22_snippet_19\n\nLANGUAGE: shell-session\nCODE:\n```\n2022-09-15T13:35:41.155Z  DEBUG alerting rule \"TestGroup\":\"Conns\" (2601299393013563564) at 2022-09-15T15:35:41+02:00: query returned 0 samples (elapsed: 5.896041ms, isPartial: false)\n2022-09-15T13:35:56.149Z  DEBUG datasource request: executing POST request with params \"denyPartialResponse=true&query=sum%28vm_tcplistener_conns%7Binstance%3D%22localhost%3A8429%22%7D%29+by%28instance%29+%3E+0&step=15s&time=1663248945\"\n2022-09-15T13:35:56.178Z  DEBUG alerting rule \"TestGroup\":\"Conns\" (2601299393013563564) at 2022-09-15T15:35:56+02:00: query returned 1 samples (elapsed: 28.368208ms, isPartial: false)\n2022-09-15T13:35:56.178Z  DEBUG datasource request: executing POST request with params \"denyPartialResponse=true&query=sum%28vm_tcplistener_conns%7Binstance%3D%22localhost%3A8429%22%7D%29&step=15s&time=1663248945\"\n2022-09-15T13:35:56.179Z  DEBUG alerting rule \"TestGroup\":\"Conns\" (2601299393013563564) at 2022-09-15T15:35:56+02:00: alert 10705778000901301787 {alertgroup=\"TestGroup\",alertname=\"Conns\",cluster=\"east-1\",instance=\"localhost:8429\",replica=\"a\"} created in state PENDING\n...\n2022-09-15T13:36:56.153Z  DEBUG alerting rule \"TestGroup\":\"Conns\" (2601299393013563564) at 2022-09-15T15:36:56+02:00: alert 10705778000901301787 {alertgroup=\"TestGroup\",alertname=\"Conns\",cluster=\"east-1\",instance=\"localhost:8429\",replica=\"a\"} PENDING => FIRING: 1m0s since becoming active at 2022-09-15 15:35:56.126006 +0200 CEST m=+39.384575417\n```\n\n----------------------------------------\n\nTITLE: Configuring Tenant and Label-Specific Retention Filter in VictoriaMetrics Enterprise (Bash)\nDESCRIPTION: Sets a retention period of 5 days for time series ingested with both the 'env=\"dev\"' label and a tenant 'vm_account_id' of 5 by passing a combined '-retentionFilter' flag to 'vmstorage'. This fine-grained policy relies on VictoriaMetrics enterprise features and is used in bash command-line setups at process start. Input is a specification string used by the process; output is that matching series will be retained for 5 days, subject to other global settings.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/Cluster-VictoriaMetrics.md#2025-04-22_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\n-retentionFilter='{vm_account_id=\"5\",env=\"dev\"}:5d'\n```\n\n----------------------------------------\n\nTITLE: Calculating JSON Array Length with json_array_len Pipe in LogSQL\nDESCRIPTION: This pipe calculates the length of a JSON array field and stores it in a result field. The example returns top 5 logs with the largest number of words in log messages from the last 5 minutes.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_108\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m | unpack_words _msg as words | json_array_len (words) as words_count | first 5 (words_count desc)\n```\n\n----------------------------------------\n\nTITLE: Calculating Range Average Across Series - MetricsQL (English)\nDESCRIPTION: The `range_avg(q)` function computes the average value across all points for each time series in the result of `q`. It requires a time series query and outputs averaged values for each individual series.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/MetricsQL.md#2025-04-22_snippet_81\n\nLANGUAGE: MetricsQL\nCODE:\n```\n`range_avg(q)`\n```\n\n----------------------------------------\n\nTITLE: Field Selection in LogsQL\nDESCRIPTION: A LogsQL query that returns only specific fields (_time, _stream, _msg) from error logs in the last 5 minutes using the fields pipe.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_8\n\nLANGUAGE: logsql\nCODE:\n```\nerror _time:5m | fields _time, _stream, _msg\n```\n\n----------------------------------------\n\nTITLE: Calculating Histogram Variance - PromQL - PromQL\nDESCRIPTION: histogram_stdvar(buckets) computes the standard variance across provided buckets, which can be used for variance or standard deviation analysis by group or time window. Inputs should be formatted as PromQL histogram buckets. No additional dependencies required. See example for calculating per-country temperature variance.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_106\n\nLANGUAGE: PromQL\nCODE:\n```\n`histogram_stdvar(buckets)`\n```\n\n----------------------------------------\n\nTITLE: Calculating Hyperbolic Cosine in MetricsQL\nDESCRIPTION: A transform function computing the hyperbolic cosine for each data point in the time series returned by `q`. If `q` is a series selector, `default_rollup()` is applied first. Metric names are stripped by default; use `keep_metric_names` to preserve them. Supported by PromQL.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_82\n\nLANGUAGE: MetricsQL\nCODE:\n```\n`cosh(q)`\n```\n\n----------------------------------------\n\nTITLE: Triggering Stream Aggregation Config Reload - VictoriaMetrics/vmagent (Shell)\nDESCRIPTION: This shell command sends the SIGHUP signal to all running 'vmagent' processes using the 'kill' and 'pidof' utilities, instructing them to reload their stream aggregation configurations from disk. Requires appropriate system permissions; should be executed on the host where 'vmagent' is running. The command does not provide output unless there are errors and is meant as a manual or scripted hot-reload mechanism when updating configuration files.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/stream-aggregation.md#2025-04-22_snippet_34\n\nLANGUAGE: sh\nCODE:\n```\nkill -SIGHUP `pidof vmagent`\n```\n\n----------------------------------------\n\nTITLE: Querying for Never-Firing Alerting Rules (MetricsQL)\nDESCRIPTION: Provides a MetricsQL (PromQL compatible) query expression to identify alerting rules in vmalert that consistently matched zero time series during their last evaluation. This utilizes the `vmalert_alerting_rules_last_evaluation_series_fetched` metric, where a value of 0 indicates the rule's selector found no matching series, potentially due to typos or incorrect labels. Requires vmalert v1.91.0 or newer.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmalert.md#2025-04-22_snippet_20\n\nLANGUAGE: metrics-query\nCODE:\n```\nmax(vmalert_alerting_rules_last_evaluation_series_fetched) by(group, alertname) == 0\n```\n\n----------------------------------------\n\nTITLE: VMGateway with OpenID Discovery Endpoint for Google\nDESCRIPTION: Shell command to start vmgateway using OpenID discovery endpoint from Google for JWT signature verification.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmgateway.md#2025-04-22_snippet_14\n\nLANGUAGE: sh\nCODE:\n```\n/bin/vmgateway -eula \\\n  -enable.auth \\\n  -write.url=http://localhost:8480 \\\n  -read.url=http://localhost:8481 \\\n  -auth.oidcDiscoveryEndpoints=https://accounts.google.com/.well-known/openid-configuration\n```\n\n----------------------------------------\n\nTITLE: Using sum2_over_time with VictoriaMetrics - Markdown - Syntax Reference\nDESCRIPTION: This snippet illustrates the sum2_over_time function which sums the squared values of all samples within window d for each series. The function is applied to gauges, strips metric names unless overridden, and requires parameters: series_selector and d (duration). Output: sum of squares for the given window and selector.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_65\n\nLANGUAGE: Markdown\nCODE:\n```\n`sum2_over_time(series_selector[d])`\n```\n\n----------------------------------------\n\nTITLE: Creating a New OTLP gRPC Driver in Go\nDESCRIPTION: Function that returns a ProtocolDriver maintaining a single gRPC connection to the collector.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-22_snippet_52\n\nLANGUAGE: Go\nCODE:\n```\nNewGRPCDriver\n```\n\n----------------------------------------\n\nTITLE: Applying Graphite Relabeling Rules in VictoriaMetrics\nDESCRIPTION: This YAML configuration demonstrates how to use 'action: graphite' relabeling rules to transform Graphite-style metrics into Prometheus-style metrics with custom labels.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmagent.md#2025-04-22_snippet_36\n\nLANGUAGE: yaml\nCODE:\n```\n- action: graphite\n  match: \"*.*.*.total\"\n  labels:\n    __name__: \"${3}_total\"\n    job: \"$1\"\n    instance: \"${2}:8080\"\n```\n\n----------------------------------------\n\nTITLE: Estimating Write Request Rate using MetricsQL - MetricsQL\nDESCRIPTION: This snippet provides a MetricsQL query to estimate the request (write) rate for vmagent's remote write feature. It sums up the per-second rate of remote write requests over a 1-minute window by aggregating the vmagent_remotewrite_requests_total metric. No dependencies other than a MetricsQL-compatible system with VictoriaMetrics metrics available are needed; output gives the approximate number of write requests per second.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmagent.md#2025-04-22_snippet_59\n\nLANGUAGE: metricsql\nCODE:\n```\nsum(rate(vmagent_remotewrite_requests_total{}[1m])) \n```\n\n----------------------------------------\n\nTITLE: Filtering by Numeric Range - VictoriaMetrics LogsQL - LogSQL\nDESCRIPTION: Applies a range comparison filter on the 'response_size' field to select logs where the value is greater than 10KiB (10,240 bytes). Dependencies: VictoriaMetrics LogsQL; Input: logs with numeric response_size field. Output: entries with response_size values above threshold.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_52\n\nLANGUAGE: logsql\nCODE:\n```\nresponse_size:>10KiB\n```\n\n----------------------------------------\n\nTITLE: Yandex Cloud Service Discovery with OAuth and Instance Service Account\nDESCRIPTION: YAML configuration example showing two approaches for Yandex Cloud service discovery authentication: using OAuth token and using instance service account. The snippet includes relabel_configs for proper target addressing.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/sd_configs.md#2025-04-22_snippet_26\n\nLANGUAGE: yaml\nCODE:\n```\nscrape_configs:\n- job_name: YC_with_oauth\n  yandexcloud_sd_configs:\n  - service: compute\n    yandex_passport_oauth_token: \"AQAAAAAsfasah<...>7E10SaotuL0\"\n  relabel_configs:\n  - source_labels: [__meta_yandexcloud_instance_public_ip_0]\n    target_label: __address__\n    replacement: \"$1:9100\"\n\n- job_name: YC_with_Instance_service_account\n  yandexcloud_sd_configs:\n  - service: compute\n  relabel_configs:\n  - source_labels: [__meta_yandexcloud_instance_private_ip_0]\n    target_label: __address__\n    replacement: \"$1:9100\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Scale Parameter for VictoriaMetrics Anomaly Detection Models\nDESCRIPTION: This YAML configuration demonstrates how to use the scale parameter to adjust the confidence intervals for anomaly detection models, allowing separate scaling for upper and lower bounds.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/anomaly-detection/components/models.md#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nmodels:\n  zscore_no_scale:\n    class: 'zscore'\n    z_threshold: 3\n  zscore_scaled:\n    class: 'zscore'\n    z_threshold: 3\n    scale: [1.2, 0.75]\n```\n\n----------------------------------------\n\nTITLE: Configuring vmagent with Bearer Token Authentication\nDESCRIPTION: Configuration for vmagent to use bearer token authentication when pushing metrics to VictoriaMetrics. The token is provided directly as a command-line argument.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/data-ingestion/vmagent.md#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n/path/to/vmagent -remoteWrite.url=https://<victoriametrics_url>/api/v1/write \\\n -remoteWrite.bearerToken=<token>\n```\n\n----------------------------------------\n\nTITLE: Label Joining with label_join Function in MetricsQL\nDESCRIPTION: The label_join function concatenates values from multiple source labels into a destination label using a specified separator.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_129\n\nLANGUAGE: MetricsQL\nCODE:\n```\nlabel_join(up{instance=\"xxx\",job=\"yyy\"}, \"foo\", \"-\", \"instance\", \"job\")\n```\n\n----------------------------------------\n\nTITLE: Calculating Standard Deviation Over Time in VictoriaMetrics\nDESCRIPTION: The stddev_over_time function calculates the standard deviation of raw samples over a specified time window for each time series returned by the given selector.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/MetricsQL.md#2025-04-22_snippet_62\n\nLANGUAGE: metricsql\nCODE:\n```\nstddev_over_time(series_selector[d])\n```\n\n----------------------------------------\n\nTITLE: Multiple Filters in the 'if' Section for Conditional Relabeling - YAML\nDESCRIPTION: Demonstrates the usage of multiple filter expressions in the 'if' clause, allowing the action to be triggered if any of the filters match. Each filter is a string representing a series selector. No other dependencies are needed beyond VictoriaMetrics's enhanced relabeling support. The key parameters are 'if' (list of selectors), 'target_label', and 'replacement'. The action (label addition) applies if any filter matches, providing composite conditional transformation for YAML configurations.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmagent.md#2025-04-22_snippet_26\n\nLANGUAGE: YAML\nCODE:\n```\n- target_label: foo\n  replacement: bar\n  if:\n  - '{job=\"foo\"}'\n  - '{instance=\"bar\"}'\n```\n\n----------------------------------------\n\nTITLE: Installing VictoriaLogs Using Pre-built Binaries\nDESCRIPTION: Commands to download, extract and run VictoriaLogs binary for Linux/amd64 architecture. Sets up VictoriaLogs with a data storage path for ingestion and querying on port 9428.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/QuickStart.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncurl -L -O https://github.com/VictoriaMetrics/VictoriaMetrics/releases/download/v1.19.0-victorialogs/victoria-logs-linux-amd64-v1.19.0-victorialogs.tar.gz\ntar xzf victoria-logs-linux-amd64-v1.19.0-victorialogs.tar.gz\n./victoria-logs-prod -storageDataPath=victoria-logs-data\n```\n\n----------------------------------------\n\nTITLE: Querying Log Messages with Exact Prefix - LogsQL\nDESCRIPTION: This snippet demonstrates how to use the exact prefix filter in LogsQL to match log messages starting with a specific prefix. It explains how the filter operates on the _msg field by default and how to specify other fields. It highlights the importance of case sensitivity by showing an example modification using a logical filter for varying cases.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_60\n\nLANGUAGE: logsql\nCODE:\n```\n=\"Processing request\"*\n```\n\n----------------------------------------\n\nTITLE: Calculating Median Over Range - MetricsQL (English)\nDESCRIPTION: The `range_median(q)` function determines the median value for every time series over its selected range. The median is computed from the sorted list of values per series, useful for identifying central tendencies robust to outliers.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/MetricsQL.md#2025-04-22_snippet_87\n\nLANGUAGE: MetricsQL\nCODE:\n```\n`range_median(q)`\n```\n\n----------------------------------------\n\nTITLE: Filtering Log Streams by Label - VictoriaLogs LogSQL\nDESCRIPTION: This snippet demonstrates how to use the LogsQL stream filter to select all logs where the 'app' field equals 'nginx'. No special dependencies are required other than access to the VictoriaLogs platform with LogsQL enabled. The parameter 'app' can be replaced by any label field, and the query returns all matching log entries. Performance may be affected by filter selectivity.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_30\n\nLANGUAGE: logsql\nCODE:\n```\n{app=\"nginx\"}\n```\n\n----------------------------------------\n\nTITLE: Starting vmagent with Deduplication Interval for Streams - Shell\nDESCRIPTION: This shell snippet shows how to start vmagent to deduplicate time series data by sending only the last sample per time series every 60 seconds, using the '-streamAggr.dedupInterval=60s' flag. The command also specifies the remote storage write URL via '-remoteWrite.url'. Deduplication intervals reduce outgoing data volume and ensure only the most recent value is forwarded per period. Requirements are vmagent binary and a valid remote storage URL; be aware that only the latest sample per interval per time series will be sent.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmagent.md#2025-04-22_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\n./vmagent -remoteWrite.url=http://remote-storage/api/v1/write -streamAggr.dedupInterval=60s\n```\n\n----------------------------------------\n\nTITLE: Creating VMAgent via CRD (sh/yaml)\nDESCRIPTION: This command uses a heredoc to apply a YAML manifest for a `VMAgent` custom resource named 'example-vmagent'. The spec configures VMAgent to discover scrape targets across various Kubernetes resources (services, pods, nodes) using empty selectors (`{}`) to match all within selected namespaces (defaulting to all namespaces). Crucially, it sets the `remoteWrite` URL to point to the `vminsert` service of the previously created VMCluster ('vminsert-example-vmcluster-persistent'), enabling VMAgent to send scraped metrics to the cluster.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/guides/getting-started-with-vm-operator/README.md#2025-04-22_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\ncat <<EOF | kubectl apply -f -\napiVersion: operator.victoriametrics.com/v1beta1\nkind: VMAgent\nmetadata:\n  name: example-vmagent\nspec:\n  serviceScrapeNamespaceSelector: {}\n  podScrapeNamespaceSelector: {}\n  podScrapeSelector: {}\n  serviceScrapeSelector: {}\n  nodeScrapeSelector: {}\n  nodeScrapeNamespaceSelector: {}\n  staticScrapeSelector: {}\n  staticScrapeNamespaceSelector: {}\n  replicaCount: 1\n  remoteWrite:\n    - url: \"http://vminsert-example-vmcluster-persistent.default.svc.cluster.local:8480/insert/0/prometheus/api/v1/write\"\nEOF\n```\n\n----------------------------------------\n\nTITLE: Filling Gaps with Next Values in PromQL\nDESCRIPTION: The `keep_next_value(q)` function uses the value of the next non-empty point for filling gaps within `q`. It focuses on forecasting data points based on future trends within series, keeping contextual progress intact.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_87\n\nLANGUAGE: PromQL\nCODE:\n```\n`keep_next_value(q)`\n```\n\n----------------------------------------\n\nTITLE: Configuring RBAC for Log Collection\nDESCRIPTION: This snippet sets up a ServiceAccount and ClusterRoleBindings in OpenShift to authorize log collection by Victoria Logs. It uses YAML configuration files for defining Kubernetes resources to manage cluster roles and permissions.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/guides/collecting-openshift-logs-with-victoria-logs/README.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nkind: ServiceAccount\napiVersion: v1\nmetadata:\n  name: victorialogs\n  namespace: openshift-logging\n---\nkind: ClusterRoleBinding\napiVersion: rbac.authorization.k8s.io/v1\nmetadata:\n  name: vl-collect-infra\nsubjects:\n  - kind: ServiceAccount\n    name: victorialogs\n    namespace: openshift-logging\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: collect-infrastructure-logs\n---\nkind: ClusterRoleBinding\napiVersion: rbac.authorization.k8s.io/v1\nmetadata:\n  name: vl-collect-audit\nsubjects:\n  - kind: ServiceAccount\n    name: victorialogs\n    namespace: openshift-logging\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: collect-audit-logs\n---\nkind: ClusterRoleBinding\napiVersion: rbac.authorization.k8s.io/v1\nmetadata:\n  name: vl-collect-application\nsubjects:\n  - kind: ServiceAccount\n    name: victorialogs\n    namespace: openshift-logging\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: collect-application-logs\n```\n\n----------------------------------------\n\nTITLE: Calculating Running Minimum Over Time Series - MetricsQL (English)\nDESCRIPTION: The `running_min(q)` function calculates the cumulative minimum value at each point for each time series returned by `q`, effectively tracking the lowest historical value observed up to every timestamp.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/MetricsQL.md#2025-04-22_snippet_103\n\nLANGUAGE: MetricsQL\nCODE:\n```\n`running_min(q)`\n```\n\n----------------------------------------\n\nTITLE: Configuring vmagent for VictoriaMetrics Cluster with Tenant ID\nDESCRIPTION: Configuration for vmagent to push data to a VictoriaMetrics cluster, including the tenant ID in the URL for multitenancy support.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/data-ingestion/vmagent.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n/path/to/vmagent -remoteWrite.url=https://<vminsert-addr>/insert/<tenant_id>/prometheus/api/v1/write\n```\n\n----------------------------------------\n\nTITLE: Calculating Tangent of Time Series Data - MetricsQL (English)\nDESCRIPTION: The `tan(q)` function calculates the tangent of every value in each point of every time series output by `q`. Metric names are generally stripped unless preserved with the relevant modifier. Available in MetricsQL.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/MetricsQL.md#2025-04-22_snippet_109\n\nLANGUAGE: MetricsQL\nCODE:\n```\n`tan(q)`\n```\n\n----------------------------------------\n\nTITLE: Querying High Churn Rate Targets with MetricsQL\nDESCRIPTION: This MetricsQL query identifies targets generating a large number of new time series over a period, indicating high churn rate. It calculates the sum of `scrape_series_added` over the last hour and selects targets where this sum exceeds 1000.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmagent.md#2025-04-22_snippet_20\n\nLANGUAGE: metricsql\nCODE:\n```\nsum_over_time(scrape_series_added[1h]) > 1000\n```\n\n----------------------------------------\n\nTITLE: Smoothing Data via Exponential Moving Average - MetricsQL (English)\nDESCRIPTION: The `smooth_exponential(q, sf)` function smooths each time series from `q` using exponential moving average, where `sf` is the smoothing factor controlling how rapidly historical contributions decay. Results in series with reduced volatility.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/MetricsQL.md#2025-04-22_snippet_111\n\nLANGUAGE: MetricsQL\nCODE:\n```\n`smooth_exponential(q, sf)`\n```\n\n----------------------------------------\n\nTITLE: Installing VictoriaMetrics Cluster Binaries\nDESCRIPTION: This snippet shows the initial steps for installing VictoriaMetrics cluster components as binaries on separate nodes, including downloading, extracting, and creating a system user.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/Quick-Start.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo tar -xvf <victoriametrics-archive> -C /usr/local/bin\n\nsudo useradd -s /usr/sbin/nologin victoriametrics\n```\n\n----------------------------------------\n\nTITLE: Performing Bitwise XOR Operation in MetricsQL\nDESCRIPTION: A transform function that calculates the bitwise XOR (`v ^ mask`) for every data point `v` in the time series returned by `q`, using the provided integer `mask`. If `q` is a series selector, `default_rollup()` is applied first. Metric names are stripped by default; use `keep_metric_names` to retain them.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_75\n\nLANGUAGE: MetricsQL\nCODE:\n```\n`bitmap_xor(q, mask)`\n```\n\n----------------------------------------\n\nTITLE: Default Rollup Function in MetricsQL\nDESCRIPTION: The default_rollup function returns the last raw sample value on a given lookbehind window for each time series, accounting for staleness markers to detect stale series.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_29\n\nLANGUAGE: MetricsQL\nCODE:\n```\ndefault_rollup(series_selector[d])\n```\n\n----------------------------------------\n\nTITLE: Calculating Multiple Quantiles with quantiles_over_time - PromQL/Pseudocode\nDESCRIPTION: Computes several quantiles in one function call by specifying multiple phi values and a label for output series. Accepts a label, one or more quantiles (phi1...phiN), and the time series selector with window 'd'. Returns a separate result series for each quantile. Metrics must be in [0,1] range for phi values. Useful for dashboards requiring comparative quantile analysis.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_49\n\nLANGUAGE: pseudo-promql\nCODE:\n```\n`quantiles_over_time(\"phiLabel\", phi1, ..., phiN, series_selector[d])`\n```\n\n----------------------------------------\n\nTITLE: Remote Read Command Help Output - VictoriaMetrics CLI\nDESCRIPTION: Displays all available command line flags for the remote-read command in vmctl. Includes options for concurrency, time filtering, authentication, HTTP headers, TLS configuration, and connection parameters.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmctl.md#2025-04-22_snippet_28\n\nLANGUAGE: shellhelp\nCODE:\n```\n./vmctl remote-read -help\n\n   --remote-read-concurrency value\n     Number of concurrently running remote read readers (default: 1)\n   --remote-read-filter-time-start value\n     The time filter in RFC3339 format to select timeseries with timestamp equal or higher than provided value. E.g. '2020-01-01T20:07:00Z'\n   --remote-read-filter-time-end value\n     The time filter in RFC3339 format to select timeseries with timestamp equal or lower than provided value. E.g. '2020-01-01T20:07:00Z'\n   --remote-read-filter-label value\n     Prometheus label name to filter timeseries by. E.g. '__name__' will filter timeseries by name. (default: \"__name__\")\n   --remote-read-filter-label-value value\n     Prometheus regular expression to filter label from \"remote-read-filter-label-value\" flag. (default: \".*\")\n   --remote-read\n     Use Prometheus remote read protocol (default: false)\n   --remote-read-use-stream\n     Defines whether to use SAMPLES or STREAMED_XOR_CHUNKS mode. By default, is uses SAMPLES mode. See https://prometheus.io/docs/prometheus/latest/querying/remote_read_api/#streamed-chunks (default: false)\n   --remote-read-step-interval value\n     The time interval to split the migration into steps. For example, to migrate 1y of data with '--remote-read-step-interval=month' vmctl will execute it in 12 separate requests from the beginning of the time range to its end. To reverse the order use '--remote-read-filter-time-reverse'. Requires setting '--remote-read-filter-time-start'. Valid values are 'month','week','day','hour','minute'.\n   --remote-read-filter-time-reverse\n     Whether to reverse the order of time intervals split by '--remote-read-step-interval' cmd-line flag. When set, the migration will start from the newest to the oldest data. (default: false)\n   --remote-read-src-addr value\n     Remote read address to perform read from.\n   --remote-read-user value\n     Remote read username for basic auth [$REMOTE_READ_USERNAME]\n   --remote-read-password value\n     Remote read password for basic auth [$REMOTE_READ_PASSWORD]\n   --remote-read-http-timeout value\n     Timeout defines timeout for HTTP requests made by remote read client (default: 0s)\n   --remote-read-headers value\n     Optional HTTP headers to send with each request to the corresponding remote source storage \n     For example, --remote-read-headers='My-Auth:foobar' would send 'My-Auth: foobar' HTTP header with every request to the corresponding remote source storage. \n     Multiple headers must be delimited by '^^': --remote-read-headers='header1:value1^^header2:value2'\n   --remote-read-cert-file value\n     Optional path to client-side TLS certificate file to use when connecting to -remote-read-src-addr\n   --remote-read-key-file value\n     Optional path to client-side TLS key to use when connecting to -remote-read-src-addr\n   --remote-read-CA-file value\n     Optional path to TLS CA file to use for verifying connections to -remote-read-src-addr. By default, system CA is used\n   --remote-read-server-name value\n     Optional TLS server name to use for connections to remoteReadSrcAddr. By default, the server name from -remote-read-src-addr is used\n   --remote-read-insecure-skip-verify\n     Whether to skip TLS certificate verification when connecting to the remote read address (default: false)\n   --remote-read-disable-path-append\n     Whether to disable automatic appending of the /api/v1/read suffix to --remote-read-src-addr (default: false)\n```\n\n----------------------------------------\n\nTITLE: Integrating Grafana Explore with vmalert Alert Source via Shell Command-Line\nDESCRIPTION: Provides an advanced example of setting the -external.url and -external.alert.source flags in the vmalert launcher script to route alert source links into the Grafana Explore page. Uses templating to inject metrics expressions and time window parameters dynamically from alert context. Prerequisite: a running Grafana instance accessible at the defined address; output will be alert notifications with deep-linked dashboard context.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmalert.md#2025-04-22_snippet_8\n\nLANGUAGE: Shell\nCODE:\n```\n./bin/vmalert \\\n    -external.url=http://<grafana-addr> \\  # the hostname and port for Grafana \n    -external.alert.source='explore?left={\"datasource\":\"VictoriaMetrics\",\"queries\":[{\"expr\":{{ .Expr|jsonEscape|queryEscape }},\"refId\":\"A\"}],\"range\":{\"from\":\"{{ .ActiveAt.UnixMilli }}\",\"to\":\"now\"}}'\n```\n\n----------------------------------------\n\nTITLE: Copying Kubernetes Pod Name to Custom Label - YAML\nDESCRIPTION: Shows how to copy the Kubernetes pod name meta-label to a custom label 'pod' for all discovered pods. This configuration uses source_labels and target_label in a relabeling rule to propagate metadata into a standard label used downstream. Requires VictoriaMetrics with Kubernetes service discovery. Key parameters: source_labels, target_label. Input: discovered pod meta-labels; Output: targets with an extra 'pod' label copied from discovery metadata.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/relabeling.md#2025-04-22_snippet_16\n\nLANGUAGE: YAML\nCODE:\n```\nscrape_configs:\n- job_name: k8s\n  kubernetes_sd_configs:\n  - role: pod\n  relabel_configs:\n  - source_labels: [__meta_kubernetes_pod_name]\n    target_label: pod\n```\n\n----------------------------------------\n\nTITLE: Renaming Time Series in MetricsQL\nDESCRIPTION: A label manipulation function that assigns a new metric name `name` to all time series returned by the query `q`. For instance, `alias(up, \"foobar\")` renames series with the metric name `up` to `foobar`. Implicitly applies `default_rollup()` if `q` is a series selector.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_140\n\nLANGUAGE: metricsql\nCODE:\n```\nalias(q, \"name\")\n```\n\n----------------------------------------\n\nTITLE: Calculating Standard Variance with `stdvar` in MetricsQL\nDESCRIPTION: The `stdvar` function calculates the standard variance of input sample values for gauge metrics over the specified interval. This MetricsQL query shows its approximate equivalence to applying `histogram_stdvar` to a histogram derived from the metric over the interval using `histogram_over_time` and grouped by `vmrange`.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/stream-aggregation.md#2025-04-22_snippet_27\n\nLANGUAGE: metricsql\nCODE:\n```\nhistogram_stdvar(sum(histogram_over_time(some_metric[interval])) by (vmrange))\n```\n\n----------------------------------------\n\nTITLE: Computing Histogram Share Below le - PromQL - PromQL\nDESCRIPTION: histogram_share(le, buckets) calculates the share (fraction in the range [0...1]) of data represented by the buckets below le. Optionally, it can return bounds for the estimated share with a bound label. Often used for SLI/SLO calculations. Inputs must be histogram buckets and an le threshold.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_104\n\nLANGUAGE: PromQL\nCODE:\n```\n`histogram_share(le, buckets)`\n```\n\n----------------------------------------\n\nTITLE: Calculating Standard Deviation and Variance with MetricsQL Functions\nDESCRIPTION: Introduces two new MetricsQL functions: `range_stddev` for calculating the standard deviation and `range_stdvar` for calculating the variance over a range.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/changelog/CHANGELOG_2022.md#2025-04-22_snippet_11\n\nLANGUAGE: metricsql\nCODE:\n```\nrange_stddev\n```\n\nLANGUAGE: metricsql\nCODE:\n```\nrange_stdvar\n```\n\n----------------------------------------\n\nTITLE: Limiting Histogram Buckets in MetricsQL\nDESCRIPTION: A transform function that limits the number of histogram buckets returned by the `buckets` query to the specified `limit`. This is useful for managing histogram data complexity when visualizing or further processing.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_76\n\nLANGUAGE: MetricsQL\nCODE:\n```\n`buckets_limit(limit, buckets)`\n```\n\n----------------------------------------\n\nTITLE: Sending Graphite Data to VictoriaMetrics via Netcat (Single-node, Shell)\nDESCRIPTION: This command sends a metrics line in Graphite plaintext protocol (with tags) to a single-node VictoriaMetrics instance using netcat to port 2003. Requires VictoriaMetrics running with the Graphite receiver flag (-graphiteListenAddr) and netcat available. The input format includes metric name, tags, value, and timestamp; upon execution, data is stored in VictoriaMetrics, useful for quick Graphite data injection.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/url-examples.md#2025-04-22_snippet_24\n\nLANGUAGE: sh\nCODE:\n```\necho \"foo.bar.baz;tag1=value1;tag2=value2 123 `date +%s`\" | nc -N localhost 2003\n```\n\n----------------------------------------\n\nTITLE: Configuring Downsampling in VictoriaMetrics\nDESCRIPTION: This Bash command sets the downsampling period for specific tenants based on their accountIDs, using pseudo-labels in the command-line flag. It requires the VictoriaMetrics enterprise version and the command applies to 'vmstorage' and 'vmselect' nodes. The pattern used in the code helps in aggregating or dropping time series data based on time intervals.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/Cluster-VictoriaMetrics.md#2025-04-22_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\n-downsampling.period='{vm_account_id=~\"12|42\"}:1h:1m'\n```\n\n----------------------------------------\n\nTITLE: Configuring Static Scrape Targets in YAML\nDESCRIPTION: This snippet shows how to define static scrape targets in a scrape.yaml file for VictoriaMetrics. It includes configurations for scraping a node-exporter and VictoriaMetrics itself.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/scrape_config_examples.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nscrape_configs:\n- job_name: node-exporter\n  static_configs:\n  - targets:\n    - localhost:9100\n- job_name: victoriametrics\n  static_configs:\n  - targets:\n    - http://localhost:8428/metrics\n```\n\n----------------------------------------\n\nTITLE: Searching with Quoted Field and Value - VictoriaLogs LogSQL\nDESCRIPTION: This example shows how to query fields and values containing special characters by wrapping them in quotes. The query searches for '1.2.3.45' in the field 'ip:remote'. Requires VictoriaLogs' support for quoted identifiers. Accommodates fields or values with punctuation.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_40\n\nLANGUAGE: logsql\nCODE:\n```\n\"ip:remote\":\"1.2.3.45\"\n```\n\n----------------------------------------\n\nTITLE: Using the 'ifnot' Binary Operator for Exclusion Filtering (MetricsQL)\nDESCRIPTION: Illustrates the `ifnot` binary operator in MetricsQL. `q1 ifnot q2` returns values from `q1` only for timestamps where `q2` does *not* have a value. Values from `q1` are removed if `q2` has a value at that timestamp.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_22\n\nLANGUAGE: MetricsQL\nCODE:\n```\nq1 ifnot q2\n```\n\n----------------------------------------\n\nTITLE: Implementing Subquery Filters - LogsQL\nDESCRIPTION: These snippets exhibit the use of subquery filters like field:in(<subquery>), field:contains_all(<subquery>), and field:contains_any(<subquery>) for dynamic log selection. Queries demonstrate matching log fields based on subquery results for user_id and admin path scanning.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_65\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m AND user_id:in(_time:1d AND path:admin | fields user_id)\n```\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m _msg:contains_all(_time:1d is_admin:true | fields user_id)\n```\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m _msg:contains_any(_time:1d is_admin:true | fields user_id)\n```\n\n----------------------------------------\n\nTITLE: Using zscore_over_time Function in PromQL\nDESCRIPTION: Calculates z-score for raw samples over a given lookbehind window. Applied independently per time series and typically used with gauges.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_69\n\nLANGUAGE: promql\nCODE:\n```\nzscore_over_time(series_selector[d])\n```\n\n----------------------------------------\n\nTITLE: Extracting Data from Text Log Messages in LogsQL\nDESCRIPTION: This query extracts 'username' and 'user_id' fields from text log messages over the last 5 minutes using the extract pipe.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/logsql-examples.md#2025-04-22_snippet_9\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m | extract \"username=<username>, user_id=<user_id>,\"\n```\n\n----------------------------------------\n\nTITLE: Starting VictoriaMetrics with Custom Scrape Config\nDESCRIPTION: This bash snippet demonstrates how to download, unpack, and start VictoriaMetrics with a custom scrape configuration file (scrape.yaml).\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/scrape_config_examples.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nwget https://github.com/VictoriaMetrics/VictoriaMetrics/releases/download/v1.115.0/victoria-metrics-linux-amd64-v1.115.0.tar.gz\ntar xzf victoria-metrics-linux-amd64-v1.115.0.tar.gz\n\n./victoria-metrics-prod -promscrape.config=scrape.yaml\n```\n\n----------------------------------------\n\nTITLE: Calculating Z-Score Over Range using range_zscore() in MetricsQL\nDESCRIPTION: The `range_zscore(q)` transform function calculates the z-score (standard score) for each data point in the time series returned by `q`. It is equivalent to `(q - range_avg(q)) / range_stddev(q)`, indicating how many standard deviations a point is from the range average.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_112\n\nLANGUAGE: MetricsQL\nCODE:\n```\nrange_zscore(q)\n```\n\nLANGUAGE: MetricsQL\nCODE:\n```\n(q - range_avg(q)) / range_stddev(q)\n```\n\n----------------------------------------\n\nTITLE: Selecting First Value in Range Across Series - MetricsQL (English)\nDESCRIPTION: The `range_first(q)` function returns the value of the first time point in each time series produced by the query `q`. Only the initial value per series is returned, useful for fixed-point comparisons.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/MetricsQL.md#2025-04-22_snippet_82\n\nLANGUAGE: MetricsQL\nCODE:\n```\n`range_first(q)`\n```\n\n----------------------------------------\n\nTITLE: Multiple Quantile Calculation with PromQL\nDESCRIPTION: The `histogram_quantiles(\"phiLabel\", phi1, ..., phiN, buckets)` function determines multiple `phi`-quantiles using the defined histogram `buckets`. Each calculated quantile is returned with a corresponding `phiLabel`. It is useful for detailed percentile analysis over defined histogram ranges.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_80\n\nLANGUAGE: PromQL\nCODE:\n```\n`histogram_quantiles(\"phiLabel\", phi1, ..., phiN, buckets)`\n```\n\n----------------------------------------\n\nTITLE: Launching VMAlert with Notifier Config\nDESCRIPTION: Command line example showing how to start VMAlert with a rules file and notifier configuration.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmalert.md#2025-04-22_snippet_30\n\nLANGUAGE: sh\nCODE:\n```\n./bin/vmalert -rule=app/vmalert/config/testdata/rules.good.rules \\\n  -datasource.url=http://localhost:8428 \\\n  -notifier.config=app/vmalert/notifier/testdata/consul.good.yaml\n```\n\n----------------------------------------\n\nTITLE: Importing Thanos Data with vmctl\nDESCRIPTION: Command for importing Thanos data into VictoriaMetrics using vmctl in prometheus mode. This imports historical data from a local Thanos snapshot to a VictoriaMetrics instance.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmctl.md#2025-04-22_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\nvmctl prometheus --prom-snapshot thanos-data --vm-addr http://victoria-metrics:8428\n```\n\n----------------------------------------\n\nTITLE: Share Greater Than Function\nDESCRIPTION: Returns share of raw samples that are bigger than specified threshold. Useful for SLI and SLO calculations.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_46\n\nLANGUAGE: metricsql\nCODE:\n```\nshare_gt_over_time(series_selector[d], gt)\n```\n\n----------------------------------------\n\nTITLE: Defining duration_over_time in MetricsQL - Markdown\nDESCRIPTION: Describes duration_over_time, which returns the duration in seconds that series data was present in a window, with a safeguard that intervals must not exceed max_interval. Indicates metric name handling and supplementary context. Useful for up-time analysis.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/MetricsQL.md#2025-04-22_snippet_24\n\nLANGUAGE: Markdown\nCODE:\n```\n#### duration_over_time\n\n`duration_over_time(series_selector[d], max_interval)` is a [rollup function](#rollup-functions), which returns the duration in seconds\nwhen time series returned from the given [series_selector](https://docs.victoriametrics.com/keyconcepts/#filtering) were present\nover the given lookbehind window `d`. It is expected that intervals between adjacent samples per each series don't exceed the `max_interval`.\nOtherwise, such intervals are considered as gaps and aren't counted.\n\nMetric names are stripped from the resulting rollups. Add [keep_metric_names](#keep_metric_names) modifier in order to keep metric names.\n\nSee also [lifetime](#lifetime) and [lag](#lag).\n\n```\n\n----------------------------------------\n\nTITLE: Configuring VictoriaMetrics Metrics Push\nDESCRIPTION: Command-line configuration example showing how to push VictoriaMetrics metrics to a remote storage endpoint with basic authentication and custom labels.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/README.md#2025-04-22_snippet_79\n\nLANGUAGE: shell\nCODE:\n```\n/path/to/victoria-metrics \\\n  -pushmetrics.url=https://user:pass@maas.victoriametrics.com/api/v1/import/prometheus \\\n  -pushmetrics.extraLabel='instance=\"foobar\"' \\\n  -pushmetrics.extraLabel='job=\"vm\"'\n```\n\n----------------------------------------\n\nTITLE: Installing VictoriaMetrics Single with Custom Values\nDESCRIPTION: Installs VictoriaMetrics Single using a custom values file. This command deploys VM Single with predefined configuration for Kubernetes monitoring.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/guides/k8s-monitoring-via-vm-single/README.md#2025-04-22_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nhelm install vmsingle vm/victoria-metrics-single -f https://docs.victoriametrics.com/guides/examples/guide-vmsingle-values.yaml\n```\n\n----------------------------------------\n\nTITLE: Sorted Time-Limited Search in LogsQL\nDESCRIPTION: A LogsQL query that adds sorting by timestamp to a time-limited error search, using the sort pipe operator.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_6\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m error | sort by (_time)\n```\n\n----------------------------------------\n\nTITLE: Replacing Substrings in Fields - LogSQL\nDESCRIPTION: The `replace` pipe substitutes occurrences of an old substring with a new substring in the specified field across log entries. It supports limiting replacement occurrences and conditional application via filters. Requires VictoriaMetrics and its field syntax. It allows customization through filters and limits, outputting modified log fields.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_122\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m | replace (\"secret-password\", \"***\") at _msg\n```\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m | replace (\"secret-password\", \"***\")\n```\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m | replace ('foo', 'bar') at baz limit 1\n```\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m | replace if (user_type:=admin) (\"secret\", \"***\") at password\n```\n\n----------------------------------------\n\nTITLE: Configuring VictoriaMetrics as Windows Service using WinSW\nDESCRIPTION: XML configuration for setting up VictoriaMetrics as a Windows service using WinSW. This configuration defines service properties, execution parameters, logging settings, and environment variables.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/README.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<service>\n  <id>VictoriaMetrics</id>\n  <name>VictoriaMetrics</name>\n  <description>VictoriaMetrics</description>\n  <executable>%BASE%\\victoria-metrics-windows-amd64-prod.exe\"</executable>\n\n  <onfailure action=\"restart\" delay=\"10 sec\"/>\n  <onfailure action=\"restart\" delay=\"20 sec\"/>\n\n  <resetfailure>1 hour</resetfailure>\n\n  <arguments>-envflag.enable</arguments>\n\n  <priority>Normal</priority>\n\n  <stoptimeout>15 sec</stoptimeout>\n\n  <stopparentprocessfirst>true</stopparentprocessfirst>\n    <startmode>Automatic</startmode>\n    <waithint>15 sec</waithint>\n    <sleeptime>1 sec</sleeptime>\n\n  <logpath>%BASE%\\logs</logpath>\n  <log mode=\"roll\">\n    <sizeThreshold>10240</sizeThreshold>\n    <keepFiles>8</keepFiles>\n  </log>\n\n  <env name=\"loggerFormat\" value=\"json\" />\n  <env name=\"loggerOutput\" value=\"stderr\" />\n  <env name=\"promscrape_config\" value=\"C:\\Program Files\\victoria-metrics\\promscrape.yml\" />\n\n</service>\n```\n\n----------------------------------------\n\nTITLE: Importing Prometheus Data using Pushgateway Format URL using Shell\nDESCRIPTION: Imports a single metric line (`metric{label=\"abc\"} 123`) using the Pushgateway URL format. Labels specified in the URL path (`job=\"my_app\", instance=\"host123\"`) are automatically added to the imported metrics, alongside any labels in the data itself. The endpoint is `/api/v1/import/prometheus/metrics/job/<job_name>/instance/<instance_name>`. Requires `curl`.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/README.md#2025-04-22_snippet_59\n\nLANGUAGE: sh\nCODE:\n```\ncurl -d 'metric{label=\"abc\"} 123' -X POST 'http://localhost:8428/api/v1/import/prometheus/metrics/job/my_app/instance/host123'\n```\n\n----------------------------------------\n\nTITLE: VictoriaMetrics Relabeling Configuration Example\nDESCRIPTION: YAML configuration for relabeling in VictoriaMetrics. The example shows how to add a cluster label to all metrics and how to drop metrics with a specific Kubernetes label.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/README.md#2025-04-22_snippet_64\n\nLANGUAGE: yaml\nCODE:\n```\n# Add {cluster=\"dev\"} label.\n- target_label: cluster\n  replacement: dev\n\n# Drop the metric (or scrape target) with `{__meta_kubernetes_pod_container_init=\"true\"}` label.\n- action: drop\n  source_labels: [__meta_kubernetes_pod_container_init]\n  regex: true\n```\n\n----------------------------------------\n\nTITLE: Stream-Based Filtering in LogsQL\nDESCRIPTION: A high-performance LogsQL query that uses stream-based filtering with a regular expression to exclude logs from specific applications.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_17\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m log.level:error {app!~\"buggy_app|foobar\"}\n```\n\n----------------------------------------\n\nTITLE: Calculating Median Value Over Range using range_median() in MetricsQL\nDESCRIPTION: The `range_median(q)` transform function calculates the median value across the data points within the selected time range for each time series returned by the query `q`.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_102\n\nLANGUAGE: MetricsQL\nCODE:\n```\nrange_median(q)\n```\n\n----------------------------------------\n\nTITLE: Querying Active Time Series in VictoriaMetrics\nDESCRIPTION: A MetricsQL query to get the maximum number of active time series in VictoriaMetrics over the last 24 hours. This is used for capacity planning and resource estimation.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/guides/understand-your-setup-size/README.md#2025-04-22_snippet_1\n\nLANGUAGE: metricsql\nCODE:\n```\nsum(max_over_time(vm_cache_entries{type=\"storage/hour_metric_ids\"}[24h]))\n```\n\n----------------------------------------\n\nTITLE: Unmarshaling Protobuf Messages to Go Structs Using easyproto - Go\nDESCRIPTION: These Go functions unmarshal a protobuf message (using easyproto) into Timeseries and Sample structs. They reset the struct fields, loop through each field in the proto message, decode by field number/type, and handle nested samples recursively. Errors are reported for decoding failures or missing fields. Required dependencies: github.com/VictoriaMetrics/easyproto and fmt. Inputs: protobuf binary message ([]byte). Outputs: populated struct or error. Designed for zero-allocation and direct field assignment; only proto3 supported.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/VictoriaMetrics/easyproto/README.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\n// UnmarshalProtobuf unmarshals ts from protobuf message at src.\nfunc (ts *Timeseries) UnmarshalProtobuf(src []byte) (err error) {\n\t// Set default Timeseries values\n\tts.Name = \"\"\n\tts.Samples = ts.Samples[:0]\n\n\t// Parse Timeseries message at src\n\tvar fc easyproto.FieldContext\n\tfor len(src) > 0 {\n\t\tsrc, err = fc.NextField(src)\n\t\tif err != nil {\n\t\t\treturn fmt.Errorf(\"cannot read next field in Timeseries message\")\n\t\t}\n\t\tswitch fc.FieldNum {\n\t\tcase 1:\n\t\t\tname, ok := fc.String()\n\t\t\tif !ok {\n\t\t\t\treturn fmt.Errorf(\"cannot read Timeseries name\")\n\t\t\t}\n\t\t\t// name refers to src. This means that the name changes when src changes.\n\t\t\t// Make a copy with strings.Clone(name) if needed.\n\t\t\tts.Name = name\n\t\tcase 2:\n\t\t\tdata, ok := fc.MessageData()\n\t\t\tif !ok {\n\t\t\t\treturn fmt.Errorf(\"cannot read Timeseries sample data\")\n\t\t\t}\n\t\t\tts.Samples = append(ts.Samples, Sample{})\n\t\t\ts := &ts.Samples[len(ts.Samples)-1]\n\t\t\tif err := s.UnmarshalProtobuf(data); err != nil {\n\t\t\t\treturn fmt.Errorf(\"cannot unmarshal sample: %w\", err)\n\t\t\t}\n\t\t}\n\t}\n\treturn nil\n}\n\n// UnmarshalProtobuf unmarshals s from protobuf message at src.\nfunc (s *Sample) UnmarshalProtobuf(src []byte) (err error) {\n\t// Set default Sample values\n\ts.Value = 0\n\ts.Timestamp = 0\n\n\t// Parse Sample message at src\n\tvar fc easyproto.FieldContext\n\tfor len(src) > 0 {\n\t\tsrc, err = fc.NextField(src)\n\t\tif err != nil {\n\t\t\treturn fmt.Errorf(\"cannot read next field in sample\")\n\t\t}\n\t\tswitch fc.FieldNum {\n\t\tcase 1:\n\t\t\tvalue, ok := fc.Double()\n\t\t\tif !ok {\n\t\t\t\treturn fmt.Errorf(\"cannot read sample value\")\n\t\t\t}\n\t\t\ts.Value = value\n\t\tcase 2:\n\t\t\ttimestamp, ok := fc.Int64()\n\t\t\tif !ok {\n\t\t\t\treturn fmt.Errorf(\"cannot read sample timestamp\")\n\t\t\t}\n\t\t\ts.Timestamp = timestamp\n\t\t}\n\t}\n\treturn nil\n}\n\n```\n\n----------------------------------------\n\nTITLE: Summing Squares of Values Over Time in VictoriaMetrics\nDESCRIPTION: The sum2_over_time function calculates the sum of squares for raw sample values over a specified time window for each time series returned by the given selector.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/MetricsQL.md#2025-04-22_snippet_68\n\nLANGUAGE: metricsql\nCODE:\n```\nsum2_over_time(series_selector[d])\n```\n\n----------------------------------------\n\nTITLE: Filtering Logs with filter Pipe in LogSQL\nDESCRIPTION: This snippet shows how to use the filter pipe to select hosts with more than 1,000 error logs in the last hour, using stats and count() functions.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_98\n\nLANGUAGE: logsql\nCODE:\n```\n_time:1h error | stats by (host) count() logs_count | filter logs_count:> 1_000\n```\n\n----------------------------------------\n\nTITLE: Counting Distinct Values Over Time in MetricsQL\nDESCRIPTION: The distinct_over_time function returns the number of unique raw sample values on a given lookbehind window for each time series.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_35\n\nLANGUAGE: MetricsQL\nCODE:\n```\ndistinct_over_time(series_selector[d])\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Models with Aliasing in vmanomaly (YAML)\nDESCRIPTION: Demonstrates the modern configuration format (since v1.10.0) for defining multiple anomaly detection models in `vmanomaly` using aliases under the `models` key. It shows examples for univariate (Z-score) and multivariate (Isolation Forest) models, specifying their class, parameters (`z_threshold`, `contamination`, `args`), and linking them to specific queries defined in the `reader` section using the `queries` argument. If `queries` is omitted, the model applies to all defined queries. Note the class name format change prior to v1.13.0.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/anomaly-detection/components/models.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nmodels:\n  model_univariate_1:\n    class: 'zscore' # or 'model.zscore.ZscoreModel' until v1.13.0\n    z_threshold: 2.5\n    queries: ['query_alias2']  # referencing queries defined in `reader` section\n  model_multivariate_1:\n    class: 'isolation_forest_multivariate'  # or model.isolation_forest.IsolationForestMultivariateModel until v1.13.0\n    contamination: 'auto'\n    args:\n      n_estimators: 100\n      # i.e. to assure reproducibility of produced results each time model is fit on the same input\n      random_state: 42\n    # if there is no explicit `queries` arg, then the model will be run on ALL queries found in reader section\n# ...\n```\n\n----------------------------------------\n\nTITLE: LogsQL Query Example for stream_context with Time Window\nDESCRIPTION: Example query showing how to use stream_context pipe with a custom time window to search for error logs and their surrounding context within a one-week window\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/CHANGELOG.md#2025-04-22_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\n_time:5m error | stream_context before 10 time_window 1w\n```\n\n----------------------------------------\n\nTITLE: Average Value Calculation with avg_over_time - MetricsQL - Markdown\nDESCRIPTION: Shows how to compute the average of raw sample values over a specified lookbehind window d using avg_over_time. Applied per time series and recommended for use with gauge metrics. Fully compliant with PromQL semantics and adaptable for related statistical rollups.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_3\n\nLANGUAGE: Markdown\nCODE:\n```\n`avg_over_time(series_selector[d])`\n```\n\n----------------------------------------\n\nTITLE: Limiting and Offsetting Series in PromQL\nDESCRIPTION: The `limit_offset(limit, offset, q)` function permits users to skip `offset` series from `q` and return `limit` series afterward. It is used in paging large datasets or in complex query optimizations where data partitioning improves processing times.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_88\n\nLANGUAGE: PromQL\nCODE:\n```\n`limit_offset(limit, offset, q)`\n```\n\n----------------------------------------\n\nTITLE: Using descent_over_time Rollup Function in VictoriaMetrics\nDESCRIPTION: This function calculates the descent of raw sample values over a lookbehind window for each time series. It's useful for tracking height loss in GPS tracking. Metric names are stripped unless keep_metric_names is added.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_18\n\nLANGUAGE: markdown\nCODE:\n```\ndescent_over_time(series_selector[d])\n```\n\n----------------------------------------\n\nTITLE: Model Error Log (Fit Stage)\nDESCRIPTION: Logs an error when the model fails during the 'fit' stage due to internal service issues or misconfiguration. This error increments the `vmanomaly_model_run_errors` metric. Placeholders `{{scheduler_alias}}`, `{{model_alias}}`, `{{query_key}}`, and `{{error_message}}` provide context.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/anomaly-detection/components/monitoring.md#2025-04-22_snippet_14\n\nLANGUAGE: text\nCODE:\n```\n[Scheduler {{scheduler_alias}}] Error during stage 'fit' for model '{{model_alias}}' (query_key: {{query_key}}): {{error_message}}\n```\n\n----------------------------------------\n\nTITLE: Implementing Exponential Backoff with Networking in Golang\nDESCRIPTION: This example uses the backoff library to handle connection retry logic with exponential backoff in a network operation. Key dependencies include the net and time packages, and the backoff library. The snippet retries a TCP connection every increasing amount of time according to the backoff duration.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/jpillora/backoff/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nb := &backoff.Backoff{\n    Max:    5 * time.Minute,\n}\n\nfor {\n\tconn, err := net.Dial(\"tcp\", \"example.com:5309\")\n\tif err != nil {\n\t\td := b.Duration()\n\t\tfmt.Printf(\"%s, reconnecting in %s\", err, d)\n\t\ttime.Sleep(d)\n\t\tcontinue\n\t}\n\t//connected\n\tb.Reset()\n\tconn.Write([]byte(\"hello world!\"))\n\t// ... Read ... Write ... etc\n\tconn.Close()\n\t//disconnected\n}\n```\n\n----------------------------------------\n\nTITLE: Measuring Churn Rate in VictoriaMetrics\nDESCRIPTION: A MetricsQL query to measure the churn rate (number of new time series created) in VictoriaMetrics over the last 24 hours. High churn rate affects resource requirements and system performance.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/guides/understand-your-setup-size/README.md#2025-04-22_snippet_2\n\nLANGUAGE: metricsql\nCODE:\n```\nsum(increase(vm_new_timeseries_created_total[24h]))\n```\n\n----------------------------------------\n\nTITLE: Adding Static Label with honor_labels Overriding - YAML\nDESCRIPTION: Illustrates label merging behavior when honor_labels: true is set. The configuration adds a foo=bar label to discovered pods, but incoming scraped metrics' foo label will override it. Shows interplay between relabeling and Prometheus-style honor_labels logic. Main fields: honor_labels, target_label, replacement.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/relabeling.md#2025-04-22_snippet_19\n\nLANGUAGE: YAML\nCODE:\n```\nscrape_configs:\n- job_name: k8s\n  kubernetes_sd_configs:\n  - role: pod\n  honor_labels: true\n  relabel_configs:\n  - target_label: \"foo\"\n    replacement: \"bar\"\n```\n\n----------------------------------------\n\nTITLE: Installing Grafana with VictoriaMetrics Datasource and Dashboards\nDESCRIPTION: Installs Grafana using Helm, configures a VictoriaMetrics datasource, and adds dashboards for VictoriaMetrics Cluster, VictoriaMetrics Agent, and Kubernetes monitoring.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/guides/k8s-monitoring-via-vm-cluster/README.md#2025-04-22_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\ncat <<EOF | helm install my-grafana grafana/grafana -f -\n  datasources:\n    datasources.yaml:\n      apiVersion: 1\n      datasources:\n        - name: victoriametrics\n          type: prometheus\n          orgId: 1\n          url: http://vmcluster-victoria-metrics-cluster-vmselect.default.svc.cluster.local:8481/select/0/prometheus/\n          access: proxy\n          isDefault: true\n          updateIntervalSeconds: 10\n          editable: true\n\n  dashboardProviders:\n   dashboardproviders.yaml:\n     apiVersion: 1\n     providers:\n     - name: 'default'\n       orgId: 1\n       folder: ''\n       type: file\n       disableDeletion: true\n       editable: true\n       options:\n         path: /var/lib/grafana/dashboards/default\n\n  dashboards:\n    default:\n      victoriametrics:\n        gnetId: 11176\n        revision: 18\n        datasource: victoriametrics\n      vmagent:\n        gnetId: 12683\n        revision: 7\n        datasource: victoriametrics\n      kubernetes:\n        gnetId: 14205\n        revision: 1\n        datasource: victoriametrics\nEOF\n```\n\n----------------------------------------\n\nTITLE: Annotating Alert Rules Using Template Functions in YAML for vmalert\nDESCRIPTION: Presents an example vmalert alert group configuration in YAML, showing how to use a template call within the annotations section for dynamic dashboard URLs. This integrates label-based filtering via reusable templates. Dependencies: vmalert configuration file, previously defined 'grafana.filter' template, and correct template invocation via the 'template' function and 'args' helper. Expected output is a dynamic dashboard link constructed per alert context.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmalert.md#2025-04-22_snippet_5\n\nLANGUAGE: YAML\nCODE:\n```\ngroups:\n  - name: AlertGroupName\n    rules:\n      - alert: AlertName\n        expr: any_metric > 100\n        for: 30s\n        labels:\n          alertname: 'Any metric is too high'\n          severity: 'warning'\n        annotations:\n          dashboard: '{{ $externalURL }}/d/dashboard?orgId=1{{ template \"grafana.filter\" (args .CommonLabels \"account_id\" \"any_label\") }}'\n```\n\n----------------------------------------\n\nTITLE: Ingesting Logs via Elasticsearch Bulk API\nDESCRIPTION: Example of pushing a single log line to VictoriaLogs using the Elasticsearch bulk API endpoint. The API accepts logs at http://localhost:9428/insert/elasticsearch/_bulk and supports timestamp fields in ISO8601/RFC3339 format or Unix timestamps.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/data-ingestion/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\necho '{\"create\":{}}\n{\"_msg\":\"cannot open file\",\"_time\":\"0\",\"host.name\":\"host123\"}\n' | curl -X POST -H 'Content-Type: application/json' --data-binary @- http://localhost:9428/insert/elasticsearch/_bulk\n```\n\n----------------------------------------\n\nTITLE: Alerting Query for Daily Series Limit in VictoriaMetrics (MetricsQL)\nDESCRIPTION: This MetricsQL query can be used for alerting when the number of unique series during the last day exceeds 90% of the -storage.maxDailySeries limit.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/README.md#2025-04-22_snippet_78\n\nLANGUAGE: metricsql\nCODE:\n```\nvm_daily_series_limit_current_series / vm_daily_series_limit_max_series > 0.9\n```\n\n----------------------------------------\n\nTITLE: Summing Rates with rate_over_sum Rollup Function - PromQL/Pseudocode\nDESCRIPTION: Computes the per-second rate over the sum of all raw samples in the window 'd', for each selected time series. Input parameters: series selector and window. Output is a rate, applied typically to gauge metrics. Metric names are removed unless explicitly retained.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_52\n\nLANGUAGE: pseudo-promql\nCODE:\n```\n`rate_over_sum(series_selector[d])`\n```\n\n----------------------------------------\n\nTITLE: Adding External Labels via Command Line in vmagent Shell\nDESCRIPTION: This shell command demonstrates how to start vmagent while adding a static label to all collected metrics before they are sent to remote storage. The `-remoteWrite.label` flag is used to specify the key-value pair (`datacenter=foobar`) which will be appended to every metric.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmagent.md#2025-04-22_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\n/path/to/vmagent -remoteWrite.label=datacenter=foobar ...\n```\n\n----------------------------------------\n\nTITLE: Using last Pipe with Partition in LogSQL\nDESCRIPTION: This example demonstrates using the last pipe with partition to group results. It returns up to 3 logs with the largest request_duration per each host over the last hour.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_111\n\nLANGUAGE: logsql\nCODE:\n```\n_time:1h | last 3 by (request_duration) partition by (host)\n```\n\n----------------------------------------\n\nTITLE: Configuring File-Based Target Discovery in YAML\nDESCRIPTION: This snippet demonstrates how to set up file-based target discovery using file_sd_configs in a scrape.yaml file for VictoriaMetrics. It references an external JSON file for target definitions.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/scrape_config_examples.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nscrape_configs:\n- job_name: node-exporter\n  file_sd_configs:\n  - files:\n    - node_exporter_targets.json\n```\n\n----------------------------------------\n\nTITLE: Deleting a Container with Connection String Authentication and Error Handling - Go\nDESCRIPTION: This Go snippet uses a storage account connection string to create an authenticated blob client and delete a specified container. It demonstrates how to handle known error cases, such as when a container is being deleted or does not exist, using the SDK's 'bloberror.HasCode' helper. The snippet is dependent on the 'azblob' and 'bloberror' packages, as well as 'context'. Parameters are the connection string and container name. Outputs include operation status, with error cases properly managed.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/README.md#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nconst (\n\tconnectionString = \"<connection_string>\"\n\tcontainerName    = \"sample-container\"\n)\n\n// create a client with the provided connection string\nclient, err := azblob.NewClientFromConnectionString(connectionString, nil)\n// TODO: handle error\n\n// try to delete the container, avoiding any potential race conditions with an in-progress or completed deletion\n_, err = client.DeleteContainer(context.TODO(), containerName, nil)\n\nif bloberror.HasCode(err, bloberror.ContainerBeingDeleted, bloberror.ContainerNotFound) {\n\t// ignore any errors if the container is being deleted or already has been deleted\n} else if err != nil {\n\t// TODO: some other error\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Telegraf HTTP Output for Influx Protocol to VictoriaMetrics - TOML\nDESCRIPTION: Provides a Telegraf HTTP output plugin configuration directing metrics in InfluxDB line protocol format to VictoriaMetrics. The config sets data format to 'influx' and points to the /influx/write endpoint. Specify the VictoriaMetrics address appropriately. This enables plain HTTP push of metrics from Telegraf using the defined endpoint and handles 400 status codes as non-retryable.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/README.md#2025-04-22_snippet_12\n\nLANGUAGE: toml\nCODE:\n```\n[[outputs.http]]\\n  url = \\\"http://<victoriametrics-addr>:8428/influx/write\\\"\\n  data_format = \\\"influx\\\"\\n  non_retryable_statuscodes = [400]\n```\n\n----------------------------------------\n\nTITLE: Enabling DataDog Dual Shipping via YAML Configuration - YAML\nDESCRIPTION: This YAML configuration sets up additional_endpoints for the DataDog agent, allowing metrics to be sent to both the default DataDog backend and to a VictoriaMetrics instance. The endpoint string is the VictoriaMetrics ingestion URL, and the list under it are the API keys required for authentication. This configuration is intended to be included within the DataDog agent's YAML config file.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/README.md#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nadditional_endpoints:\\n  \"http://victoriametrics:8428/datadog\":\\n  - apikey\n```\n\n----------------------------------------\n\nTITLE: Configuring vmalert for Downsampling with Multi-cluster Targets - Shell\nDESCRIPTION: This shell script configures vmalert to read from one cluster and write the downsampled or aggregated results to another cluster. It is particularly useful for setting up a hierarchical data storage system where 'hot' clusters are used for real-time operations and 'cold' clusters for long-term storage.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmalert.md#2025-04-22_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\n./bin/vmalert -rule=downsampling-rules.yml \\                                        # Path to the file with rules configuration. Supports wildcard\n    -datasource.url=http://raw-cluster-vmselect:8481/select/0/prometheus            # vmselect addr for executing recording rules expressions\n    -remoteWrite.url=http://aggregated-cluster-vminsert:8480/insert/0/prometheus    # vminsert addr to persist recording rules results\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Anomaly Detection Model in Python\nDESCRIPTION: This Python code snippet demonstrates how to define a custom anomaly detection model for the vmanomaly framework using the VictoriaMetrics Model base class. Key methods include initialization, fitting, inference, serialization, and deserialization. Dependencies include numpy, pandas, scipy.stats, and the vmanomaly model package. The model computes anomaly scores based on given parameters and input data.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/anomaly-detection/components/models.md#2025-04-22_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\nimport pandas as pd\nimport scipy.stats as st\nimport logging\nfrom pickle import dumps\n\nfrom model.model import (\n  PICKLE_PROTOCOL,\n  Model,\n  deserialize_basic\n)\n# from model.model import RollingModel  # inherit from it for your model to be of rolling type\nlogger = logging.getLogger(__name__)\n\n\nclass CustomModel(Model):\n  \"\"\"\n  Custom model implementation.\n  \"\"\"\n  # by default, each `Model` will be created as a univariate one\n  # uncomment line below for it to be of multivariate type\n  # is_multivariate = True\n  # by default, each `Model` will be created as offline\n  # uncomment line below for it to be of type online\n  # is_online = True\n  \n  def __init__(self, percentage: float = 0.95, **kwargs):\n    super().__init__(**kwargs)\n    self.percentage = percentage\n    self._mean = np.nan\n    self._std = np.nan\n\n  def fit(self, df: pd.DataFrame):\n    # Model fit process:\n    y = df['y']\n    self._mean = np.mean(y)\n    self._std = np.std(y)\n    if self._std == 0.0:\n      self._std = 1 / 65536\n\n  def infer(self, df: pd.DataFrame) -> np.array:\n    # Inference process:\n    y = df['y']\n    zscores = (y - self._mean) / self._std\n    anomaly_score_cdf = st.norm.cdf(np.abs(zscores))\n    df_pred = df[['timestamp', 'y']].copy()\n    df_pred['anomaly_score'] = anomaly_score_cdf > self.percentage\n    df_pred['anomaly_score'] = df_pred['anomaly_score'].astype('int32', errors='ignore')\n\n    return df_pred\n\n    def serialize(self) -> None:\n      return dumps(self, protocol=PICKLE_PROTOCOL)\n\n    @staticmethod\n    def deserialize(model: str | bytes) -> 'CustomModel':\n      return deserialize_basic(model)\n```\n\n----------------------------------------\n\nTITLE: Limiting Results with limit Pipe in LogSQL\nDESCRIPTION: The limit pipe restricts the number of logs returned by a query. This example returns up to 100 logs from the last 5 minutes.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_113\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m | limit 100\n```\n\n----------------------------------------\n\nTITLE: Calculating Derivative Over Time in MetricsQL\nDESCRIPTION: The deriv function calculates per-second derivative over a given lookbehind window for each time series using linear regression. This function is supported by PromQL.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_32\n\nLANGUAGE: MetricsQL\nCODE:\n```\nderiv(series_selector[d])\n```\n\n----------------------------------------\n\nTITLE: Configuring Backup Manager with Retention Policy\nDESCRIPTION: Example of launching vmbackupmanager with daily backup retention policy set to keep last 3 backups\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmbackupmanager.md#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nexport NODE_IP=192.168.0.10\nexport VMSTORAGE_ENDPOINT=http://127.0.0.1:8428\n./vmbackupmanager -dst=gs://vmstorage-data/$NODE_IP -credsFilePath=credentials.json -storageDataPath=/vmstorage-data -snapshot.createURL=$VMSTORAGE_ENDPOINT/snapshot/create\n-keepLastDaily=3 -eula\n```\n\n----------------------------------------\n\nTITLE: Calculating Maximum Value Over Range using range_max() in MetricsQL\nDESCRIPTION: The `range_max(q)` transform function determines the maximum value among the data points within the selected time range for each time series returned by the query `q`.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_101\n\nLANGUAGE: MetricsQL\nCODE:\n```\nrange_max(q)\n```\n\n----------------------------------------\n\nTITLE: Writing Multiple Data Points in One Request via OpenTSDB HTTP /api/put - VictoriaMetrics - Shell\nDESCRIPTION: This snippet posts multiple metric data points as a JSON array within a single HTTP request to the VictoriaMetrics OpenTSDB-compatible /api/put endpoint. Each object in the array contains at minimum a 'metric' name and a 'value'. Tags are optional per object. The server must be started with the HTTP receiver enabled.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/README.md#2025-04-22_snippet_30\n\nLANGUAGE: sh\nCODE:\n```\ncurl -H 'Content-Type: application/json' -d '[{\"metric\":\"foo\",\"value\":45.34},{\"metric\":\"bar\",\"value\":43}]' http://localhost:4242/api/put\n```\n\n----------------------------------------\n\nTITLE: Calculating logs per IPv4 subnet using stats by IPv4 bucket in LogsQL\nDESCRIPTION: Query that returns the top 10 /24 IPv4 subnetworks with the highest log counts in the last 5 minutes using the stats by IPv4 bucket functionality.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/logsql-examples.md#2025-04-22_snippet_12\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m | stats by (ip:/24) count() rows | last 10 by (rows)\n```\n\n----------------------------------------\n\nTITLE: Filtering Entry with Any Non-Empty Value - VictoriaMetrics LogsQL - LogSQL\nDESCRIPTION: Finds log entries where the 'host.hostname' field is present and contains any non-empty value. The asterisk * after the colon acts as a wildcard for non-empty data. Dependencies: VictoriaMetrics LogsQL; Input: logs; Output: logs with host.hostname filled.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_55\n\nLANGUAGE: logsql\nCODE:\n```\nhost.hostname:*\n```\n\n----------------------------------------\n\nTITLE: Calculating Running Sum Over Time Series - MetricsQL (English)\nDESCRIPTION: The `running_sum(q)` function returns the running sum at each data point for each time series returned by `q`. Each point in the output is the sum of all preceding and current points, creating a cumulative total.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/MetricsQL.md#2025-04-22_snippet_104\n\nLANGUAGE: MetricsQL\nCODE:\n```\n`running_sum(q)`\n```\n\n----------------------------------------\n\nTITLE: Using timestamp with VictoriaMetrics - Markdown - Syntax Reference\nDESCRIPTION: This snippet demonstrates the timestamp function, which returns the timestamp in seconds (with millisecond precision) of the last sample in the lookbehind window d for each time series. Supported by PromQL, this function by default strips metric names. Arguments: series_selector, d (duration window). Output: timestamp of the last sample for each series.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_66\n\nLANGUAGE: Markdown\nCODE:\n```\n`timestamp(series_selector[d])`\n```\n\n----------------------------------------\n\nTITLE: Configuring Telegraf Output to Ingest Metrics via InfluxDB Protocol - TOML\nDESCRIPTION: Shows sample Telegraf configuration for routing metrics to VictoriaMetrics via the InfluxDB output plugin. To use, adjust the url in the config to point to the running VictoriaMetrics instance. No other dependencies are required. Data written using this config will be ingested by VictoriaMetrics, supporting InfluxDB protocol semantics.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/README.md#2025-04-22_snippet_11\n\nLANGUAGE: toml\nCODE:\n```\n[[outputs.influxdb]]\\n  urls = [\\\"http://<victoriametrics-addr>:8428\\\"]\n```\n\n----------------------------------------\n\nTITLE: Generating Pseudo-Random Numbers (Uniform Distribution) - MetricsQL (English)\nDESCRIPTION: The `rand(seed)` function generates pseudo-random numbers in the range `[0...1]` with an even (uniform) distribution. The optional `seed` parameter can be supplied for repeatable results. The function is useful for introducing randomization in queries and testing.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/MetricsQL.md#2025-04-22_snippet_78\n\nLANGUAGE: MetricsQL\nCODE:\n```\n`rand(seed)`\n```\n\n----------------------------------------\n\nTITLE: Basic Rollup Function Example with avg_over_time\nDESCRIPTION: Example showing how to calculate average temperature over a 24-hour window using the avg_over_time rollup function\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_26\n\nLANGUAGE: promql\nCODE:\n```\navg_over_time(temperature[24h])\n```\n\n----------------------------------------\n\nTITLE: Reloading Prometheus Configuration via Shell Command\nDESCRIPTION: This shell command reloads the Prometheus configuration after making changes to the config file. It sends a SIGHUP signal to the Prometheus process.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/README.md#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nkill -HUP `pidof prometheus`\n```\n\n----------------------------------------\n\nTITLE: Selecting Series with Multiple OR Filters in MetricsQL\nDESCRIPTION: Demonstrates a MetricsQL series selector that uses multiple `or` conditions to combine different sets of label filters. This selects series matching either `{env=\"prod\",job=\"a\"}` or `{env=\"dev\",job=\"b\"}`.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_4\n\nLANGUAGE: metricsql\nCODE:\n```\n{env=\"prod\",job=\"a\" or env=\"dev\",job=\"b\"}\n```\n\n----------------------------------------\n\nTITLE: VictoriaMetrics OTEL Metrics Endpoint - Text\nDESCRIPTION: This output shows the internal Kubernetes URL for the VictoriaMetrics OpenTelemetry metrics endpoint, required when sending metrics directly or via a collector. It is protocol and environment-specific.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/guides/getting-started-with-opentelemetry/README.md#2025-04-22_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nhttp://victoria-metrics-victoria-metrics-single-server.default.svc.cluster.local.:8428/opentelemetry/v1/metrics\n```\n\n----------------------------------------\n\nTITLE: Calling outlier_iqr_over_time for Anomaly Detection - PromQL/Pseudocode\nDESCRIPTION: Detects if the most recent sample in the lookbehind window 'd' is an outlier based on the interquartile range. Requires time series selector and window. Uses 25th and 75th percentiles to determine IQR. If value exceeds q75+1.5*IQR or is less than q25-1.5*IQR, returns the sample as an outlier; else, output is empty. Primarily for anomaly detection on gauge metrics.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_45\n\nLANGUAGE: pseudo-promql\nCODE:\n```\n`outlier_iqr_over_time(series_selector[d])`\n```\n\n----------------------------------------\n\nTITLE: VictoriaLogs Backup Using rsync\nDESCRIPTION: Command for backing up VictoriaLogs data to a remote host using rsync. Includes progress tracking and deletion of files not present in source.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/README.md#2025-04-22_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nrsync -avh --progress --delete <path-to-victorialogs-data> <username>@<host>:<path-to-victorialogs-backup>\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Static Label to All Discovered Pods - YAML\nDESCRIPTION: Demonstrates how to add a static label (foo=bar) to each discovered pod target using the replacement field in relabel_configs. The label is added to all scraped metrics from these targets unless an exported metric provides a value for 'foo', in which case prefixing or honor_labels: true affect label resolution. Key fields: target_label, replacement. Dependencies: VictoriaMetrics relabeling support.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/relabeling.md#2025-04-22_snippet_18\n\nLANGUAGE: YAML\nCODE:\n```\nscrape_configs:\n- job_name: k8s\n  kubernetes_sd_configs:\n  - role: pod\n  relabel_configs:\n  - target_label: \"foo\"\n    replacement: \"bar\"\n```\n\n----------------------------------------\n\nTITLE: Share Less Than or Equal Function\nDESCRIPTION: Returns share of raw samples that are less than or equal to specified threshold. Useful for SLI and SLO calculations.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_47\n\nLANGUAGE: metricsql\nCODE:\n```\nshare_le_over_time(series_selector[d], le)\n```\n\n----------------------------------------\n\nTITLE: Configuring VMAuth for DataDog API Logs Requests\nDESCRIPTION: YAML configuration for VMAuth to append the required path prefix to DataDog API logs requests. This setup is necessary because DataDog Agent doesn't support custom path prefixes.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/data-ingestion/DataDogAgent.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nunauthorized_user:\n  url_map:\n    - src_paths:\n        - \"/api/v2/logs\"\n        - \"/api/v1/validate\"\n      url_prefix: `<victoria-logs-base-url>`/insert/datadog/\n    - src_paths:\n        - \"/api/v1/series\"\n        - \"/api/v2/series\"\n        - \"/api/beta/sketches\"\n        - \"/api/v1/validate\"\n        - \"/api/v1/check_run\"\n        - \"/intake\"\n        - \"/api/v1/metadata\"\n      url_prefix: `<victoria-metrics-base-url>`/datadog/\n```\n\n----------------------------------------\n\nTITLE: Setting Backend TLS Server Name per User in vmauth (YAML)\nDESCRIPTION: YAML configuration example for `vmauth` demonstrating how to set a specific TLS Server Name Indication (SNI) (`foo.bar.com`) for HTTPS backend connections for user `foo`. This is configured using the `tls_server_name` option within the user's definition, overriding any global setting.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmauth.md#2025-04-22_snippet_38\n\nLANGUAGE: yaml\nCODE:\n```\n- username: \"foo\"\n  url_prefix: \"https://localhost\"\n  tls_server_name: \"foo.bar.com\"\n\n```\n\n----------------------------------------\n\nTITLE: Configuring DataDog Agent Destination via YAML Configuration - YAML\nDESCRIPTION: This YAML snippet configures the DataDog agent to use VictoriaMetrics as a metrics destination by defining the dd_url setting. This is used in DataDog configuration files and allows metrics to be sent directly to VictoriaMetrics when running the agent. The parameter specifies the VictoriaMetrics ingestion endpoint, which must be correct for the deployment being used.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/README.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\ndd_url: http://victoriametrics:8428/datadog\n```\n\n----------------------------------------\n\nTITLE: Calculating Median Absolute Deviation Over Range using range_mad() in MetricsQL\nDESCRIPTION: The `range_mad(q)` transform function computes the Median Absolute Deviation (MAD) across the data points within the selected time range for each time series returned by `q`. MAD is a robust measure of statistical dispersion.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_100\n\nLANGUAGE: MetricsQL\nCODE:\n```\nrange_mad(q)\n```\n\n----------------------------------------\n\nTITLE: Delta Calculations with Rollup Delta Function in VictoriaMetrics\nDESCRIPTION: The `rollup_delta` function calculates differences between adjacent raw samples and returns min, max, and avg values of these differences. The calculations are performed per time series, stripping metric names from results unless a modifier is added to retain them. An optional second argument allows specifying a single value to keep and no label.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/MetricsQL.md#2025-04-22_snippet_52\n\nLANGUAGE: Other\nCODE:\n```\nrollup_delta(series_selector[d])\n```\n\n----------------------------------------\n\nTITLE: Configuring VictoriaMetrics Single Server Implicit Conversions\nDESCRIPTION: Command-line flags for disabling or logging implicit conversions for subqueries in vmsingle.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/changelog/CHANGELOG_2024.md#2025-04-22_snippet_22\n\nLANGUAGE: shell\nCODE:\n```\n-search.disableImplicitConversion\n```\n\nLANGUAGE: shell\nCODE:\n```\n-search.logImplicitConversion\n```\n\n----------------------------------------\n\nTITLE: Retrieving Field Values with field_values Pipe in LogSQL\nDESCRIPTION: This snippet shows how to use the field_values pipe to return all values for a specific field (level) with the number of logs per value over the last 5 minutes.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_94\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m | field_values level\n```\n\n----------------------------------------\n\nTITLE: Querying stream field values with VictoriaLogs HTTP API - Shell\nDESCRIPTION: Initiates an HTTP POST request to `/select/logsql/stream_field_values` endpoint using `curl` to obtain specific field values for log streams, filtered by query and assigned field name. Requires VictoriaMetrics API setup and connection. Returns JSON formatted field values based on the query conditions. Confirm API accessibility and response data structure.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/querying/README.md#2025-04-22_snippet_25\n\nLANGUAGE: sh\nCODE:\n```\ncurl http://localhost:9428/select/logsql/stream_field_values -d 'query=error' -d 'start=5m' -d 'field=host'\n```\n\n----------------------------------------\n\nTITLE: Combining Time and Day Range Filters in LogsQL\nDESCRIPTION: Example of combining a regular time filter with a day range filter to query logs between 08:00 and 20:00 every day for the last week.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_25\n\nLANGUAGE: logsql\nCODE:\n```\n_time:1w _time:day_range[08:00, 18:00)\n```\n\n----------------------------------------\n\nTITLE: Decompressing Byte Buffers with Cached Decoders Using klauspost/compress/zstd in Go\nDESCRIPTION: Illustrates how to decode in-memory buffers using a cached zstd decoder with concurrency control in Go. A zstd.Reader is initialized with nil and optional concurrency settings. The Decompress function takes a byte slice as input and returns a decompressed byte slice or error. Dependencies include github.com/klauspost/compress/zstd, and the decoder is designed to be reused for multiple concurrent decompressions. This method is efficient for repetitive, in-memory data decompression.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/klauspost/compress/zstd/README.md#2025-04-22_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\nimport \"github.com/klauspost/compress/zstd\"\n\n// Create a reader that caches decompressors.\n// For this operation type we supply a nil Reader.\nvar decoder, _ = zstd.NewReader(nil, zstd.WithDecoderConcurrency(0))\n\n// Decompress a buffer. We don't supply a destination buffer,\n// so it will be allocated by the decoder.\nfunc Decompress(src []byte) ([]byte, error) {\n    return decoder.DecodeAll(src, nil)\n} \n```\n\n----------------------------------------\n\nTITLE: Counter Manipulation and Running Operation Functions in MetricsQL\nDESCRIPTION: Functions for handling counter metrics and calculating running statistics, including running_sum, running_min, running_max, and running_avg.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_125\n\nLANGUAGE: markdown\nCODE:\n```\n#### remove_resets\n\n`remove_resets(q)` is a [transform function](#transform-functions), which removes counter resets from time series returned by `q`.\n```\n\nLANGUAGE: markdown\nCODE:\n```\n#### running_avg\n\n`running_avg(q)` is a [transform function](#transform-functions), which calculates the running avg per each time series returned by `q`.\n```\n\nLANGUAGE: markdown\nCODE:\n```\n#### running_max\n\n`running_max(q)` is a [transform function](#transform-functions), which calculates the running max per each time series returned by `q`.\n```\n\nLANGUAGE: markdown\nCODE:\n```\n#### running_min\n\n`running_min(q)` is a [transform function](#transform-functions), which calculates the running min per each time series returned by `q`.\n```\n\nLANGUAGE: markdown\nCODE:\n```\n#### running_sum\n\n`running_sum(q)` is a [transform function](#transform-functions), which calculates the running sum per each time series returned by `q`.\n```\n\n----------------------------------------\n\nTITLE: Example of Query Statistics Log Format in VictoriaMetrics\nDESCRIPTION: An example log entry showing the statistics captured for a slow query in VictoriaMetrics, including query type, execution duration, resource usage metrics, and query parameters.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/query-stats.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n2025-03-25T11:23:29.520Z        info    VictoriaMetrics/app/vmselect/promql/query_stats.go:60       vm_slow_query_stats type=instant query=\"vm_promscrape_config_last_reload_successful != 1\\nor\\nvmagent_relabel_config_last_reload_successful != 1\\n\" query_hash=1585303298 start_ms=1742901750000 end_ms=1742901750000 step_ms=300000 range_ms=0 tenant=\"0\" execution_duration_ms=0 series_fetched=2 samples_fetched=163 bytes=975 memory_estimated_bytes=2032\n```\n\n----------------------------------------\n\nTITLE: Configuring vmagent for Multi-Regional Write in VictoriaMetrics\nDESCRIPTION: This snippet shows how to configure vmagent to write data to multiple Ground Control regions in VictoriaMetrics. It uses the -remoteWrite.url parameter to specify multiple write endpoints.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/guides/multi-regional-setup-dedicated-regions/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n/path/to/vmagent-prod \\\n  -remoteWrite.url=<ground-control-1-remote-write> \\\n  -remoteWrite.url=<ground-control-2-remote-write>\n```\n\n----------------------------------------\n\nTITLE: Selecting Specific Fields with fields Pipe in LogSQL\nDESCRIPTION: This snippet shows how to use the fields pipe to select only specific fields (host and _msg) from logs over the last 5 minutes.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_96\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m | fields host, _msg\n```\n\n----------------------------------------\n\nTITLE: Normalizing Series to [0,1] Range - MetricsQL (English)\nDESCRIPTION: The `range_normalize(q1, ...)` function scales the values in all time series returned by the queries `q1, ...` such that each result falls within the `[0 ... 1]` range. This is ideal for direct correlation or comparison of series with differing original scales.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/MetricsQL.md#2025-04-22_snippet_89\n\nLANGUAGE: MetricsQL\nCODE:\n```\n`range_normalize(q1, ...)`\n```\n\n----------------------------------------\n\nTITLE: Configuring vmagent Remote Write to VictoriaMetrics Cloud (Shell)\nDESCRIPTION: This shell command demonstrates how to start `vmagent` and configure it to write metrics to a VictoriaMetrics Cloud deployment. It requires setting the `--remoteWrite.url` parameter to the deployment's specific access endpoint (including `/api/v1/write`) and the `--remoteWrite.bearerToken` parameter with a valid access token for authorization.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics-cloud/get-started/quickstart.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n./vmagent \\\n    --remoteWrite.url=https://<your_access_point>.cloud.victoriametrics.com/api/v1/write \\\n    --remoteWrite.bearerToken=********\n```\n\n----------------------------------------\n\nTITLE: Min Stats Function in LogsQL\nDESCRIPTION: Demonstrates how to find minimum values across specified log fields.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_189\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m | stats min(duration) min_duration\n```\n\n----------------------------------------\n\nTITLE: Defining the Token Structure in golang-jwt/jwt (Go)\nDESCRIPTION: This Go struct definition outlines the Token type as restructured in golang-jwt/jwt v5, clarifying how JWT data is stored and processed. The raw token, signed method, decoded header and claims, binary signature, and validity flag are all represented. Requires Go and github.com/golang-jwt/jwt/v5; used when parsing, validating, or inspecting JWT tokens directly.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/golang-jwt/jwt/v5/MIGRATION_GUIDE.md#2025-04-22_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\ntype Token struct {\n\tRaw       string                 // Raw contains the raw token\n\tMethod    SigningMethod          // Method is the signing method used or to be used\n\tHeader    map[string]interface{} // Header is the first segment of the token in decoded form\n\tClaims    Claims                 // Claims is the second segment of the token in decoded form\n\tSignature []byte                 // Signature is the third segment of the token in decoded form\n\tValid     bool                   // Valid specifies if the token is valid\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Metrics Using Relabeling Config for Remote Write Destination - YAML\nDESCRIPTION: This YAML snippet defines a relabeling action that keeps only metrics where the 'env' label matches the value 'dev'. It is intended for use with vmagent as the relabeling configuration for a specific remoteWrite.url destination, effectively filtering the forwarded metrics. The configuration consists of a single action ('keep'), requires the 'env' label in the input, and restricts output to matching metrics; ensure the file is referenced by the '-remoteWrite.urlRelabelConfig' command-line flag. It takes no dynamic parameters and simply processes input metrics by label matching.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmagent.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n- action: keep\\n  source_labels: [env]\\n  regex: \\\"dev\\\"\n```\n\n----------------------------------------\n\nTITLE: Combining Week Range and Day Range Filters in LogsQL\nDESCRIPTION: Example of combining week range and day range filters to query logs between 08:00 and 18:00 every weekday (Monday to Friday).\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_28\n\nLANGUAGE: logsql\nCODE:\n```\n_time:week_range[Mon, Fri] _time:day_range[08:00, 18:00)\n```\n\n----------------------------------------\n\nTITLE: Data Operations with JWT Authentication\nDESCRIPTION: cURL commands demonstrating how to ingest and read metrics using JWT token authentication with tenant information.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmgateway.md#2025-04-22_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\n# ingest simple metric to tenant 1:5\ncurl 'http://localhost:8431/api/v1/import/prometheus' -X POST  -d 'foo{bar=\"baz1\"}  123' -H 'Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2MjAxNjIwMDAwMDAsInZtX2FjY2VzcyI6eyJ0ZW5hbnRfaWQiOnsiYWNjb3VudF9pZCI6MTV9fX0.PB1_KXDKPUp-40pxOGk6lt_jt9Yq80PIMpWVJqSForQ'\n# read metric from tenant 1:5\ncurl 'http://localhost:8431/api/v1/labels' -H 'Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2MjAxNjIwMDAwMDAsInZtX2FjY2VzcyI6eyJ0ZW5hbnRfaWQiOnsiYWNjb3VudF9pZCI6MTV9fX0.PB1_KXDKPUp-40pxOGk6lt_jt9Yq80PIMpWVJqSForQ'\n\n# check rate limit\n```\n\n----------------------------------------\n\nTITLE: VictoriaMetrics Export API JSON Response for Graphite Ingestion - JSON\nDESCRIPTION: Provides a response example in JSON Lines format showing series and tags for a metric ingested via the Graphite protocol. Each entry includes a metric object with tags and values, consistent with Graphite ingestion mapping. Use to validate ingestion and API export.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/README.md#2025-04-22_snippet_23\n\nLANGUAGE: json\nCODE:\n```\n{\\\"metric\\\":{\\\"__name__\\\":\\\"foo.bar.baz\\\",\\\"tag1\\\":\\\"value1\\\",\\\"tag2\\\":\\\"value2\\\"},\\\"values\\\":[123],\\\"timestamps\\\":[1560277406000]}\n```\n\n----------------------------------------\n\nTITLE: Selecting Last N Entries with last Pipe in LogSQL\nDESCRIPTION: The last pipe returns the last N logs after sorting by specified fields. The first example returns the last 10 logs with the largest request_duration from the last 5 minutes.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_110\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m | last 10 by (request_duration)\n```\n\n----------------------------------------\n\nTITLE: Joining Multiple Source Labels with Custom Separator - YAML\nDESCRIPTION: Configures the joining of multiple Kubernetes meta-labels into a single target label using a custom separator. This snippet combines the pod name and container port number into a 'host_port' label using a colon as delimiter. Dependencies are the same as above. Key parameters: source_labels (multiple), separator, target_label. Output: each scrape target contains a host_port label like podname:portnumber.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/relabeling.md#2025-04-22_snippet_17\n\nLANGUAGE: YAML\nCODE:\n```\nscrape_configs:\n- job_name: k8s\n  kubernetes_sd_configs:\n  - role: pod\n  relabel_configs:\n  - source_labels: [__meta_kubernetes_pod_name, __meta_kubernetes_pod_container_port_number]\n    separator: \":\"\n    target_label: host_port\n```\n\n----------------------------------------\n\nTITLE: Using label_value Function in PromQL\nDESCRIPTION: Returns numeric values for a given label from time series. Example shows extracting numeric value 1.234 from the bar label.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/MetricsQL.md#2025-04-22_snippet_112\n\nLANGUAGE: PromQL\nCODE:\n```\nlabel_value(foo, \"bar\")\n```\n\n----------------------------------------\n\nTITLE: Calculating Minimum Value Over Range using range_min() in MetricsQL\nDESCRIPTION: The `range_min(q)` transform function finds the minimum value among the data points within the selected time range for each time series returned by the query `q`.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_103\n\nLANGUAGE: MetricsQL\nCODE:\n```\nrange_min(q)\n```\n\n----------------------------------------\n\nTITLE: Extracting Year from Timestamps with year Function\nDESCRIPTION: The year function returns the year for every point of every time series returned by the query. It expects that the query returns unix timestamps.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_115\n\nLANGUAGE: metricsql\nCODE:\n```\nyear(q)\n```\n\n----------------------------------------\n\nTITLE: MetricsQL Query for Persistent Queue Saturation\nDESCRIPTION: Alert rule to detect persistent queue saturation using write duration metrics.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/changelog/CHANGELOG_2021.md#2025-04-22_snippet_4\n\nLANGUAGE: metricsql\nCODE:\n```\nrate(vm_persistentqueue_write_duration_seconds_total) > 0.9\n```\n\n----------------------------------------\n\nTITLE: Test Group Configuration for vmalert-tool\nDESCRIPTION: YAML configuration for a test group in vmalert-tool. Includes interval, input_series, name, alert_rule_test, metricsql_expr_test, and external_labels sections.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmalert-tool.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n[ interval: <duration> | default = evaluation_interval ]\ninput_series:\n  [ - <series> ]\n\n[ name: <string> ]\n\nalert_rule_test:\n  [ - <alert_test_case> ]\n\nmetricsql_expr_test:\n  [ - <metricsql_expr_test> ]\n\nexternal_labels:\n  [ <labelname>: <string> ... ]\n```\n\n----------------------------------------\n\nTITLE: Extracting Day of Week from Timestamps in MetricsQL\nDESCRIPTION: A transform function that returns the day of the week (0 for Sunday to 6 for Saturday) for each data point in the time series returned by `q`, assuming the points represent Unix timestamps. If `q` is a series selector, `default_rollup()` is applied first. Metric names are stripped by default; use `keep_metric_names` to preserve them. Supported by PromQL.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_84\n\nLANGUAGE: MetricsQL\nCODE:\n```\n`day_of_week(q)`\n```\n\n----------------------------------------\n\nTITLE: YAML Configuration for Rule Groups in vmalert\nDESCRIPTION: YAML structure for defining rule groups in vmalert configuration files. Each file can contain multiple groups, and each group can have attributes like name, evaluation interval, offset, delay, result limits, and concurrency settings.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmalert.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ngroups:\n  [ - <rule_group> ]\n```\n\nLANGUAGE: yaml\nCODE:\n```\n# The name of the group. Must be unique within a file.\nname: <string>\n\n# How often rules in the group are evaluated.\n[ interval: <duration> | default = -evaluationInterval flag ]\n\n# Optional\n# Group will be evaluated at the exact offset in the range of [0...interval].\n# E.g. for Group with `interval: 1h` and `eval_offset: 5m` the evaluation will\n# start at 5th minute of the hour. See https://github.com/VictoriaMetrics/VictoriaMetrics/issues/3409\n# `interval` must be specified if `eval_offset` is used, and `eval_offset` cannot exceed `interval`.\n# `eval_offset` cannot be used with `eval_delay`, as group will be executed at the exact offset and `eval_delay` is ignored.\n[ eval_offset: <duration> ]\n\n# Optional\n# Adjust the `time` parameter of group evaluation requests to compensate intentional query delay from the datasource.\n# By default, the value is inherited from the `-rule.evalDelay` cmd-line flag - see its description for details.\n# If group has `latency_offset` set in `params`, then it is recommended to set `eval_delay` equal to `latency_offset`.\n# See https://github.com/VictoriaMetrics/VictoriaMetrics/issues/5155 and https://docs.victoriametrics.com/keyconcepts/#query-latency.\n[ eval_delay: <duration> ]\n\n# Limit limits the number of alerts or recording results the rule within this group can produce.\n# On exceeding the limit, rule will be marked with an error and all its results will be discarded.\n# 0 is no limit.\n[ limit: <integer> | default 0]\n\n# How many rules execute at once within a group. Increasing concurrency may speed\n# up group's evaluation duration (exposed via `vmalert_iteration_duration_seconds` metric).\n[ concurrency: <integer> | default = 1 ]\n```\n\n----------------------------------------\n\nTITLE: Integrating Logr for Logging in Jaeger and Zipkin Exporters in Go\nDESCRIPTION: Updates the Jaeger and Zipkin exporters to use `github.com/go-logr/logr` as the standard logging interface. A new `WithLogr` option is added to allow users to provide their own `logr.Logger` instance for exporter logging.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-22_snippet_19\n\nLANGUAGE: Go\nCODE:\n```\n// Jaeger Exporter (go.opentelemetry.io/otel/exporters/jaeger)\n// Zipkin Exporter (go.opentelemetry.io/otel/exporters/zipkin)\n// Dependency: github.com/go-logr/logr\n// Option: WithLogr(logr.Logger)\n```\n\n----------------------------------------\n\nTITLE: Limiting Output Series in Aggregate Functions using `limit N` in MetricsQL\nDESCRIPTION: Shows the use of the optional `limit N` suffix with aggregate functions in MetricsQL. This query calculates the sum of `x` grouped by `y`, but limits the number of output time series to the top 3.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_19\n\nLANGUAGE: metricsql\nCODE:\n```\nsum(x) by (y) limit 3\n```\n\n----------------------------------------\n\nTITLE: Defining geomean_over_time in MetricsQL - Markdown\nDESCRIPTION: Documents the geomean_over_time function for calculating the geometric mean of samples in a window, typically used with gauges. Describes inputs, the effect of the modifier keep_metric_names, and points to related rollup functions.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/MetricsQL.md#2025-04-22_snippet_26\n\nLANGUAGE: Markdown\nCODE:\n```\n#### geomean_over_time\n\n`geomean_over_time(series_selector[d])` is a [rollup function](#rollup-functions), which calculates [geometric mean](https://en.wikipedia.org/wiki/Geometric_mean)\nover [raw samples](https://docs.victoriametrics.com/keyconcepts/#raw-samples) on the given lookbehind window `d` per each time series returned\nfrom the given [series_selector](https://docs.victoriametrics.com/keyconcepts/#filtering).\n\nMetric names are stripped from the resulting rollups. Add [keep_metric_names](#keep_metric_names) modifier in order to keep metric names.\n\nThis function is usually applied to [gauges](https://docs.victoriametrics.com/keyconcepts/#gauge).\n\n```\n\n----------------------------------------\n\nTITLE: Starting vmauth with Configuration File\nDESCRIPTION: Command to start vmauth with a specified authentication configuration file.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmauth.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n/path/to/vmauth -auth.config=/path/to/auth/config.yml\n```\n\n----------------------------------------\n\nTITLE: Timestamp Retrieval Function in PromQL\nDESCRIPTION: Returns timestamp in seconds with millisecond precision for the last raw sample in the time window.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_67\n\nLANGUAGE: PromQL\nCODE:\n```\ntimestamp(series_selector[d])\n```\n\n----------------------------------------\n\nTITLE: Installing the Azure Identity SDK for Go - Bash\nDESCRIPTION: This Bash snippet installs the Azure Identity Go SDK using the 'go get' command. This SDK provides credential types for authenticating Azure SDK clients through Azure Active Directory. Running this command adds the 'azidentity' module to the Go project's dependencies, making it available for secure authentication routines.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/azidentity\n```\n\n----------------------------------------\n\nTITLE: Authenticating Azure Blob Storage Client with Azure AD - Go\nDESCRIPTION: This Go snippet illustrates how to construct an 'azblob.Client' for Azure Blob Storage authenticated with Azure Active Directory using Azure SDK's default credentials. It leverages 'azidentity.NewDefaultAzureCredential' to obtain credentials, and 'azblob.NewClient' to create the storage client. Required dependencies are 'github.com/Azure/azure-sdk-for-go/sdk/azidentity' and 'github.com/Azure/azure-sdk-for-go/sdk/storage/azblob'. The primary parameters are the Azure storage account URI and the credential object. Outputs include the initialized client and errors, which must be properly handled. Suitable for securely integrating with Azure resources.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/README.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n// create a credential for authenticating with Azure Active Directory\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n// TODO: handle err\n\n// create an azblob.Client for the specified storage account that uses the above credential\nclient, err := azblob.NewClient(\"https://MYSTORAGEACCOUNT.blob.core.windows.net/\", cred, nil)\n// TODO: handle err\n```\n\n----------------------------------------\n\nTITLE: Calculating error rate in logs using stats and math pipes in LogsQL\nDESCRIPTION: Query that calculates the ratio of error logs to total logs in the last 5 minutes using stats with conditional counting and the math pipe for ratio calculation.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/logsql-examples.md#2025-04-22_snippet_20\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m | stats count() logs, count() if (error) errors | math errors / logs\n```\n\n----------------------------------------\n\nTITLE: Starting vmagent for Merging by Dropping Input Labels and Deduplication - Shell\nDESCRIPTION: This shell snippet demonstrates starting vmagent while merging time series entries by removing the 'replica' label (via '-streamAggr.dropInputLabels=replica') and deduplicating with an interval of 60 seconds ('-streamAggr.dedupInterval=60s'). The '-remoteWrite' flag specifies the destination remote storage URL. This setup is useful for aggregating samples from multiple replicas, sending only a deduplicated, merged time series to the backend. Usage requires a working vmagent installation, a remote destination, and understanding that removed labels ('replica') will be excluded from forwarded samples.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmagent.md#2025-04-22_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\n./vmagent -remoteWrite=http://remote-storage/api/v1/write -streamAggr.dropInputLabels=replica -streamAggr.dedupInterval=60s\n```\n\n----------------------------------------\n\nTITLE: Configuring Alertmanager with Receivers and Routing - YAML\nDESCRIPTION: This YAML snippet demonstrates a sample Alertmanager configuration for VictoriaMetrics Cloud. It specifies alert routing rules with matchers, notification receivers (each using Slack integration), and includes configuration parameters such as `route`, `receivers`, repeat and group intervals, and custom Slack message formats using Go templating. Required dependencies include a running Alertmanager instance compatible with Prometheus specification; URLs and channels must be adapted to real environments. Inputs are Alertmanager configuration parameters; the output is operational alert routing and notification in the connected channels. File size is limited to 20mb and only allowed receiver types can be used; file-based sensitive parameters (those ending with `_file`) are prohibited.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics-cloud/alertmanager-setup-for-deployment.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nroute:\n receiver: slack-infra\n repeat_interval: 1m\n group_interval: 30s\n routes:\n - matchers:\n   - team = team-1 \n   receiver: dev-team-1\n   continue: true\n - matchers:\n   - team = team-2\n   receiver: dev-team-2\n   continue: true\nreceivers:\n- name: slack-infra\n  slack_configs:\n  - api_url: https://hooks.slack.com/services/valid-url\n    channel: infra\n    title: |-\n        [{{ .Status | toUpper -}}\n        {{ if eq .Status \"firing\" }}:{{ .Alerts.Firing | len }}{{- end -}}\n        ]\n        {{ if ne .Status \"firing\" -}}\n          :lgtm:\n          {{- else if eq .CommonLabels.severity \"critical\" -}}\n          :fire:\n          {{- else if eq .CommonLabels.severity \"warning\" -}}\n          :warning:\n          {{- else if eq .CommonLabels.severity \"info\" -}}\n          :information_source:\n          {{- else -}}\n          :question:\n        {{- end }}\n    text: |\n        {{ range .Alerts }}\n        {{- if .Annotations.summary }}\n           Summary:  {{ .Annotations.summary }}\n        {{- end }}\n        {{- if .Annotations.description }}\n            Description: {{ .Annotations.description }}\n        {{- end }}\n        {{- end }}\n    actions:\n    - type: button\n      text: 'Query :mag:'\n      url: '{{ (index .Alerts 0).GeneratorURL }}'\n    - type: button\n      text: 'Silence :no_bell:'\n      url: '{{ template \"__silenceURL\" . }}'\n- name: dev-team-1 \n  slack_configs:\n  - api_url: https://hooks.slack.com/services/valid-url\n    channel: dev-alerts\n- name: dev-team-2\n  slack_configs:\n  - api_url: https://hooks.slack.com/services/valid-url\n    channel: dev-alerts\n\n```\n\n----------------------------------------\n\nTITLE: Multiple Stats Calculation in LogsQL\nDESCRIPTION: This query calculates the total number of logs and unique streams for the last 5 minutes using count and count_uniq stats functions.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_135\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m | stats count() logs_total, count_uniq(_stream) streams_total\n```\n\n----------------------------------------\n\nTITLE: Explicit Subquery Calculation Example (MetricsQL)\nDESCRIPTION: This MetricsQL query demonstrates an explicit subquery: `max_over_time(rate(http_requests_total[5m])[1h:30s])`. VictoriaMetrics calculates the inner function `rate(http_requests_total[5m])` using the step (`30s`) defined in the subquery range `[1h:30s]`. The outer function `max_over_time` is then calculated over these results using the main query range step.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_153\n\nLANGUAGE: MetricsQL\nCODE:\n```\nmax_over_time(rate(http_requests_total[5m])[1h:30s])\n```\n\n----------------------------------------\n\nTITLE: Statistical Range Functions in MetricsQL\nDESCRIPTION: Set of functions that perform statistical calculations across all points in each time series, including average, min, max, median, standard deviation, and more.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_122\n\nLANGUAGE: markdown\nCODE:\n```\n#### range_avg\n\n`range_avg(q)` is a [transform function](#transform-functions), which calculates the avg value across points per each time series returned by `q`.\n```\n\nLANGUAGE: markdown\nCODE:\n```\n#### range_first\n\n`range_first(q)` is a [transform function](#transform-functions), which returns the value for the first point per each time series returned by `q`.\n```\n\nLANGUAGE: markdown\nCODE:\n```\n#### range_last\n\n`range_last(q)` is a [transform function](#transform-functions), which returns the value for the last point per each time series returned by `q`.\n```\n\nLANGUAGE: markdown\nCODE:\n```\n#### range_linear_regression\n\n`range_linear_regression(q)` is a [transform function](#transform-functions), which calculates [simple linear regression](https://en.wikipedia.org/wiki/Simple_linear_regression)\nover the selected time range per each time series returned by `q`. This function is useful for capacity planning and predictions.\n```\n\nLANGUAGE: markdown\nCODE:\n```\n#### range_mad\n\n`range_mad(q)` is a [transform function](#transform-functions), which calculates the [median absolute deviation](https://en.wikipedia.org/wiki/Median_absolute_deviation)\nacross points per each time series returned by `q`.\n\nSee also [mad](#mad) and [mad_over_time](#mad_over_time).\n```\n\nLANGUAGE: markdown\nCODE:\n```\n#### range_max\n\n`range_max(q)` is a [transform function](#transform-functions), which calculates the max value across points per each time series returned by `q`.\n```\n\nLANGUAGE: markdown\nCODE:\n```\n#### range_median\n\n`range_median(q)` is a [transform function](#transform-functions), which calculates the median value across points per each time series returned by `q`.\n```\n\nLANGUAGE: markdown\nCODE:\n```\n#### range_min\n\n`range_min(q)` is a [transform function](#transform-functions), which calculates the min value across points per each time series returned by `q`.\n```\n\nLANGUAGE: markdown\nCODE:\n```\n#### range_stddev\n\n`range_stddev(q)` is a [transform function](#transform-functions), which calculates [standard deviation](https://en.wikipedia.org/wiki/Standard_deviation)\nper each time series returned by `q` on the selected time range.\n```\n\nLANGUAGE: markdown\nCODE:\n```\n#### range_stdvar\n\n`range_stdvar(q)` is a [transform function](#transform-functions), which calculates [standard variance](https://en.wikipedia.org/wiki/Variance)\nper each time series returned by `q` on the selected time range.\n```\n\nLANGUAGE: markdown\nCODE:\n```\n#### range_sum\n\n`range_sum(q)` is a [transform function](#transform-functions), which calculates the sum of points per each time series returned by `q`.\n```\n\n----------------------------------------\n\nTITLE: Configuring VictoriaLogs Alert Rules with Default Time Filter\nDESCRIPTION: YAML configuration for setting up log alert rules with automatic 5-minute time filtering. Demonstrates how to configure alerts based on failed request percentages.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/vmalert.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ngroups:\n    - name: Requests\n      type: vlogs\n      interval: 5m\n      rules:\n        - alert: TooManyFailedRequest\n          expr: '* | extract \"ip=<ip> \" | extract \"status_code=<code>;\" | stats by (ip) count() if (code:~4.*) as failed, count() as total| math failed / total as failed_percentage| filter failed_percentage :> 0.01 | fields ip,failed_percentage'\n          annotations: \n            description: \"Connection from address {{$labels.ip}} has {{$value}}% failed requests in last 5 minutes\"\n```\n\n----------------------------------------\n\nTITLE: Grouping Graphite Metrics by Label Components in MetricsQL\nDESCRIPTION: A label manipulation function that modifies metric names from query `q` based on Graphite naming conventions. It replaces the original metric name with parts specified by `groupNum*`, concatenated with '.'. Useful for aggregating Graphite metrics. Implicitly applies `default_rollup()` if `q` is a series selector. Example: `label_graphite_group({__graphite__=\"foo*.bar.*\"}, 0, 2)` results in `foo<any_value>.<other_value>`.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_144\n\nLANGUAGE: metricsql\nCODE:\n```\nlabel_graphite_group(q, groupNum1, ... groupNumN)\n```\n\n----------------------------------------\n\nTITLE: Extracting Parts from Label Values using YAML\nDESCRIPTION: This config extracts specific parts from the Kubernetes container name label and stores it with a custom prefix in a new label. Dependencies include RE2 format regex support and Kubernetes.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/relabeling.md#2025-04-22_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\n- job_name: k8s\n  kubernetes_sd_configs:\n  - role: pod\n  relabel_configs:\n  - source_labels: [__meta_kubernetes_pod_container_name]\n    regex: \"[^/]+/(.+)\"\n    replacement: \"abc_$1\"\n    target_label: xyz\n```\n\n----------------------------------------\n\nTITLE: Calculating Running Maximum Over Time Series - MetricsQL (English)\nDESCRIPTION: The `running_max(q)` function computes and returns the maximum value seen up to each observation in every time series produced by `q`. This provides a non-decreasing, stepwise running maximum series.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/MetricsQL.md#2025-04-22_snippet_102\n\nLANGUAGE: MetricsQL\nCODE:\n```\n`running_max(q)`\n```\n\n----------------------------------------\n\nTITLE: Returning a Single-Value Series (Scalar) - MetricsQL/PromQL (English)\nDESCRIPTION: The `scalar(q)` function evaluates and returns `q` only if exactly one time series is contained in its result; otherwise, it returns no value. Useful for retrieving scalar output from aggregate queries. Supported in PromQL.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/MetricsQL.md#2025-04-22_snippet_105\n\nLANGUAGE: PromQL\nCODE:\n```\n`scalar(q)`\n```\n\n----------------------------------------\n\nTITLE: Calculating Geometric Mean in PromQL\nDESCRIPTION: The geomean function calculates the geometric mean per each group of points with the same timestamp.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_145\n\nLANGUAGE: promql\nCODE:\n```\ngeomean(q)\n```\n\n----------------------------------------\n\nTITLE: JSON Values Stats in LogsQL\nDESCRIPTION: Shows how to pack fields into JSON arrays per log entry, with examples of limiting results and grouping by application.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_186\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m | stats by (app) json_values(_time, _msg) as json_logs\n```\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m | stats json_values() as json_logs\n```\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m | stats by (host) json_values() limit 3 as json_logs\n```\n\n----------------------------------------\n\nTITLE: Rate Calculation with Time Window\nDESCRIPTION: Rate calculation with explicit 5-minute lookbehind window for smoother results.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/keyConcepts/keyConcepts.md#2025-04-22_snippet_26\n\nLANGUAGE: metricsql\nCODE:\n```\nrate(node_network_receive_bytes_total[5m])\n```\n\n----------------------------------------\n\nTITLE: Basic Prometheus Remote Write Configuration in Grafana Alloy\nDESCRIPTION: Simple configuration for pushing metrics to VictoriaMetrics using Prometheus remote write protocol. Specifies the endpoint URL for sending metrics data.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/data-ingestion/Alloy.md#2025-04-22_snippet_0\n\nLANGUAGE: Alloy\nCODE:\n```\nprometheus.remote_write \"victoriametrics\" {\n  endpoint {\n    url = \"https://<victoriametrics_url>/prometheus/api/v1/write\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Rounding Series Data Points - MetricsQL/PromQL (English)\nDESCRIPTION: The `round(q, nearest)` function rounds every point in every series in `q` to the specified `nearest` multiple. Without the `nearest` parameter, data is rounded to the nearest integer. Useful for reducing data granularity or preparing for display.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/MetricsQL.md#2025-04-22_snippet_99\n\nLANGUAGE: PromQL\nCODE:\n```\n`round(q, nearest)`\n```\n\n----------------------------------------\n\nTITLE: Normalizing Time Series with range_normalize in MetricsQL\nDESCRIPTION: Introduces the `range_normalize` MetricsQL function. This function normalizes multiple time series to a common value range of `[0...1]`, which is useful for correlation analysis across series with different scales.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/changelog/CHANGELOG_2022.md#2025-04-22_snippet_8\n\nLANGUAGE: metricsql\nCODE:\n```\nrange_normalize\n```\n\n----------------------------------------\n\nTITLE: Querying Active Time Series in Prometheus\nDESCRIPTION: A MetricsQL query to get the maximum number of active time series in Prometheus over the last 24 hours. This helps in capacity planning by determining the current scale of the monitoring system.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/guides/understand-your-setup-size/README.md#2025-04-22_snippet_0\n\nLANGUAGE: metricsql\nCODE:\n```\nsum(max_over_time(prometheus_tsdb_head_series[24h]))\n```\n\n----------------------------------------\n\nTITLE: Configuring vmagent with OAuth2 for authenticated remote write to VictoriaMetrics\nDESCRIPTION: Docker Compose service definition for vmagent configured with OAuth2 authentication for secure remote writes to VictoriaMetrics. Uses Keycloak as the identity provider with client credentials stored in a separate file.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/guides/grafana-vmgateway-openid-configuration/README.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n  vmagent:\n    image: victoriametrics/vmagent:v1.115.0\n    volumes:\n      - ./scrape.yaml:/etc/vmagent/config.yaml\n      - ./vmagent-client-secret:/etc/vmagent/oauth2-client-secret\n    command:\n      - -promscrape.config=/etc/vmagent/config.yaml\n      - -remoteWrite.url=http://vmgateway-cluster:8431/api/v1/write\n      - -remoteWrite.url=http://vmgateway-single:8431/api/v1/write\n      - -remoteWrite.oauth2.clientID={CLIENT_ID}\n      - -remoteWrite.oauth2.clientSecretFile=/etc/vmagent/oauth2-client-secret\n      - -remoteWrite.oauth2.tokenUrl=http://keycloak:8080/realms/master/protocol/openid-connect/token\n      - -remoteWrite.oauth2.scopes=openid\n```\n\n----------------------------------------\n\nTITLE: Compressing Data Blocks with Zstandard in Go\nDESCRIPTION: This snippet showcases the compression of data blocks using Zstandard in Go. It employs `EncodeAll` to compress buffer data and append it to a destination slice. Key features include the ability to run concurrently and reduction of allocations after initial setups. Dependencies include the `github.com/klauspost/compress/zstd` package.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/klauspost/compress/zstd/README.md#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nimport \"github.com/klauspost/compress/zstd\"\n\n// Create a writer that caches compressors.\n// For this operation type we supply a nil Reader.\nvar encoder, _ = zstd.NewWriter(nil)\n\n// Compress a buffer. \n// If you have a destination buffer, the allocation in the call can also be eliminated.\nfunc Compress(src []byte) []byte {\n    return encoder.EncodeAll(src, make([]byte, 0, len(src)))\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Fixed Label Values in MetricsQL\nDESCRIPTION: A label manipulation function that adds or overwrites specified labels (`label1` to `labelN`) with fixed values (`value1` to `valueN`) for all time series returned by `q`. Implicitly applies `default_rollup()` if `q` is a series selector.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_154\n\nLANGUAGE: metricsql\nCODE:\n```\nlabel_set(q, \"label1\", \"value1\", ..., \"labelN\", \"valueN\")\n```\n\n----------------------------------------\n\nTITLE: Filtering Logs by Prefix - VictoriaMetrics LogsQL - LogSQL\nDESCRIPTION: This query uses the prefix filter to find log messages containing words beginning with \\'err\\'. The asterisk * serves as a wildcard for any suffix. This filter is case-sensitive by default and applies to the _msg field unless specified otherwise. Dependencies: Requires VictoriaMetrics LogsQL environment. Input: logs; Output: messages matching the prefix. Limitation: Does not match capitalized or non-prefixed words.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_46\n\nLANGUAGE: logsql\nCODE:\n```\nerr*\n```\n\n----------------------------------------\n\nTITLE: Authenticating Kafka Producer with TLS Certificates - Shell\nDESCRIPTION: This snippet shows how to start vmagent to send remote write data to Kafka using TLS client certificates for authentication. The shell command passes required Kafka and TLS options, including CA certificate, client certificate, and key file flags. Assumes that certificates are present at indicated file paths and Kafka is configured for SSL connections; used with the enterprise build.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmagent.md#2025-04-22_snippet_62\n\nLANGUAGE: shell\nCODE:\n```\n./bin/vmagent -remoteWrite.url='kafka://localhost:9092/?topic=prom-rw&security.protocol=SSL' \\\n    -remoteWrite.tlsCAFile=/opt/ca.pem \\\n    -remoteWrite.tlsCertFile=/opt/cert.pem \\\n    -remoteWrite.tlsKeyFile=/opt/key.pem\n```\n\n----------------------------------------\n\nTITLE: Counting Greater-than Samples with count_gt_over_time - MetricsQL - Markdown\nDESCRIPTION: Outlines count_gt_over_time, which counts how many samples in the window exceed the threshold gt, per each series. Preferably applied to gauge metrics and supports keep_metric_names for name preservation in rollups.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_7\n\nLANGUAGE: Markdown\nCODE:\n```\n`count_gt_over_time(series_selector[d], gt)`\n```\n\n----------------------------------------\n\nTITLE: Calculating Resource Utilization using ru() in MetricsQL\nDESCRIPTION: The `ru(free, max)` transform function calculates the resource utilization percentage (0% to 100%) based on the provided `free` resource amount and the `max` total resource amount. For example, it can calculate memory utilization using `node_exporter` metrics.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_115\n\nLANGUAGE: MetricsQL\nCODE:\n```\nru(free, max)\n```\n\nLANGUAGE: MetricsQL\nCODE:\n```\nru(node_memory_MemFree_bytes, node_memory_MemTotal_bytes)\n```\n\n----------------------------------------\n\nTITLE: Utilizing mode_over_time Rollup Function - PromQL/Pseudocode\nDESCRIPTION: Computes the statistical mode (most frequent value) among raw samples for a time series window 'd'. Designed for discrete-valued gauge metrics in VictoriaMetrics. Inputs: time series selector and window 'd'. Outputs the most common value seen per series. Results are correct only for series with discrete raw sample values.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_44\n\nLANGUAGE: pseudo-promql\nCODE:\n```\n`mode_over_time(series_selector[d])`\n```\n\n----------------------------------------\n\nTITLE: Sample Time Series Data in InfluxDB Format\nDESCRIPTION: A sample dataset representing time series data for a measurement 'foo' with a field 'bar' and tag 'instance=localhost'. This data is used to demonstrate querying and visualization in both InfluxDB and VictoriaMetrics.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/guides/migrate-from-influx/README.md#2025-04-22_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nfoo,instance=localhost bar=1.00 1652169600000000000\nfoo,instance=localhost bar=2.00 1652169660000000000\nfoo,instance=localhost bar=3.00 1652169720000000000\nfoo,instance=localhost bar=5.00 1652169840000000000\nfoo,instance=localhost bar=5.50 1652169960000000000\nfoo,instance=localhost bar=5.50 1652170020000000000\nfoo,instance=localhost bar=4.00 1652170080000000000\nfoo,instance=localhost bar=3.50 1652170260000000000\nfoo,instance=localhost bar=3.25 1652170320000000000\nfoo,instance=localhost bar=3.00 1652170380000000000\nfoo,instance=localhost bar=2.00 1652170440000000000\nfoo,instance=localhost bar=1.00 1652170500000000000\nfoo,instance=localhost bar=4.00 1652170560000000000\n```\n\n----------------------------------------\n\nTITLE: Aligning TraceIDRatioBased Sampler Behavior in Go SDK\nDESCRIPTION: Modifies the `Sampler` returned by `TraceIDRatioBased` in `go.opentelemetry.io/otel/sdk/trace` to use the rightmost bits of the trace ID for sampling decisions. This aligns the Go implementation with other language SDKs and ensures correct random sampling, especially with ID generators like AWS X-Ray's.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-22_snippet_26\n\nLANGUAGE: Go\nCODE:\n```\ngo.opentelemetry.io/otel/sdk/trace\n// Function: TraceIDRatioBased(fraction float64) Sampler\n```\n\n----------------------------------------\n\nTITLE: Dropping Scrape Targets by Label Selector (action: drop) - YAML\nDESCRIPTION: Excludes discovered pod targets whose names start with 'foo' from being scraped. Uses 'if' with a PromQL selector and action: drop. All other discovered pods will be scraped. Main parameters: if, action: drop.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/relabeling.md#2025-04-22_snippet_21\n\nLANGUAGE: YAML\nCODE:\n```\nscrape_configs:\n- job_name: not_foo_pods\n  kubernetes_sd_configs:\n  - role: pod\n  relabel_configs:\n  - if: '{__meta_kubernetes_pod_name=~\"foo.*\"}'\n    action: drop\n```\n\n----------------------------------------\n\nTITLE: Counting Unique IP Addresses in LogsQL\nDESCRIPTION: This query returns the number of unique non-empty values for the 'ip' field over the last 5 minutes using the count_uniq stats function.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_180\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m | stats count_uniq(ip) ips\n```\n\n----------------------------------------\n\nTITLE: Retrieving Field Names with field_names Pipe in LogSQL\nDESCRIPTION: This snippet demonstrates how to use the field_names pipe to return all field names with an estimated number of logs per field name over the last 5 minutes.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_93\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m | field_names\n```\n\n----------------------------------------\n\nTITLE: Retrieving Query Trace in VictoriaMetrics (Shell)\nDESCRIPTION: This command sends a query to VictoriaMetrics with tracing enabled and extracts the trace information from the JSON response.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/README.md#2025-04-22_snippet_75\n\nLANGUAGE: sh\nCODE:\n```\ncurl http://localhost:8428/api/v1/query_range -d 'query=2*rand()' -d 'start=-1h' -d 'step=1m' -d 'trace=1' | jq '.trace'\n```\n\n----------------------------------------\n\nTITLE: Basic Filebeat Configuration for VictoriaLogs\nDESCRIPTION: Basic configuration for sending logs to VictoriaLogs using Elasticsearch output format. Specifies message field, timestamp field, and stream fields for log ingestion.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/data-ingestion/Filebeat.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\noutput.elasticsearch:\n  hosts: [\"http://localhost:9428/insert/elasticsearch/\"]\n  parameters:\n    _msg_field: \"message\"\n    _time_field: \"@timestamp\"\n    _stream_fields: \"host.hostname,log.file.path\"\n```\n\n----------------------------------------\n\nTITLE: Filling with Next Non-Empty Value - PromQL - PromQL\nDESCRIPTION: keep_next_value(q) fills nulls or gaps using the next non-empty value in the time series. No dependencies required. Input is any PromQL-compatible series. See also keep_last_value() and interpolate().\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_110\n\nLANGUAGE: PromQL\nCODE:\n```\n`keep_next_value(q)`\n```\n\n----------------------------------------\n\nTITLE: Retrieving Timestamp of Last Sample in VictoriaMetrics\nDESCRIPTION: The timestamp function returns the timestamp in seconds with millisecond precision for the last raw sample within a specified time window for each time series returned by the given selector.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/MetricsQL.md#2025-04-22_snippet_69\n\nLANGUAGE: metricsql\nCODE:\n```\ntimestamp(series_selector[d])\n```\n\n----------------------------------------\n\nTITLE: Checking VictoriaMetrics Cluster Pod Status (sh)\nDESCRIPTION: This command lists all pods in the current namespace and uses `grep` to filter for pods related to the created VictoriaMetrics cluster (whose names typically contain 'vmcluster'). This helps verify that the `vminsert`, `vmselect`, and `vmstorage` pods are starting or running.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/guides/getting-started-with-vm-operator/README.md#2025-04-22_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nkubectl get pods | grep vmcluster\n```\n\n----------------------------------------\n\nTITLE: Introducing Semantic Conventions v1.13.0 Package in Go\nDESCRIPTION: Adds the `go.opentelemetry.io/otel/semconv/v1.13.0` package, incorporating semantic conventions from the OpenTelemetry specification version 1.13.0. This version includes refactored functions for handling HTTP and network attributes, merging or replacing functionalities from v1.12.0 (e.g., using `httpconv.ClientRequest`, `httpconv.ServerRequest`, `netconv.Transport`, `httpconv.ClientStatus`).\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-22_snippet_11\n\nLANGUAGE: Go\nCODE:\n```\ngo.opentelemetry.io/otel/semconv/v1.13.0\n```\n\n----------------------------------------\n\nTITLE: Basic Notifier Configuration with Service Discovery\nDESCRIPTION: YAML configuration example showing static targets, Consul and DNS service discovery setup for alertmanager endpoints.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmalert.md#2025-04-22_snippet_31\n\nLANGUAGE: yaml\nCODE:\n```\nstatic_configs:\n  - targets:\n      # support using full url\n      - 'http://alertmanager:9093/test/api/v2/alerts'\n      - 'https://alertmanager:9093/api/v2/alerts'\n      # the following target with only host:port will be used as <scheme>://localhost:9093/<path_prefix>/api/v2/alerts\n      - localhost:9093\n\nconsul_sd_configs:\n  - server: localhost:8500\n    services:\n      - alertmanager\n\ndns_sd_configs:\n  - names:\n      - my.domain.com\n    type: 'A'\n    port: 9093\n```\n\n----------------------------------------\n\nTITLE: Configuring Authentication with autorest/adal in Go\nDESCRIPTION: This snippet demonstrates configuring the older `autorest/adal` library for Azure authentication in Go. It involves creating an `adal.OAuthConfig` specific to an Azure environment (e.g., Azure China) using the tenant ID and endpoint, and then using this config along with client ID and secret to obtain a `ServicePrincipalToken` for a specific resource audience.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/Azure/azure-sdk-for-go/sdk/azidentity/MIGRATION.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/Azure/go-autorest/autorest/adal\"\n\noauthCfg, err := adal.NewOAuthConfig(\"https://login.chinacloudapi.cn\", tenantID)\nhandle(err)\n\nspt, err := adal.NewServicePrincipalTokenWithSecret(\n    *oauthCfg, clientID, \"https://management.chinacloudapi.cn/\", &adal.ServicePrincipalTokenSecret{ClientSecret: secret},\n)\n```\n\n----------------------------------------\n\nTITLE: Implicit Subquery Formation from Rollup Function Argument (MetricsQL)\nDESCRIPTION: Illustrates the query `rate(sum(up))` where a non-selector expression (`sum(up)`) is passed to a rollup function (`rate`). VictoriaMetrics automatically converts this into a subquery.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_167\n\nLANGUAGE: MetricsQL\nCODE:\n```\nrate(sum(up))\n```\n\n----------------------------------------\n\nTITLE: Defining deriv_fast in MetricsQL - Markdown\nDESCRIPTION: Documents deriv_fast as a simplified derivative calculation using only first and last samples, aimed at efficiency. Notes handling of metric names, and relationships to deriv/ideriv and use cases requiring fast estimation.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/MetricsQL.md#2025-04-22_snippet_21\n\nLANGUAGE: Markdown\nCODE:\n```\n#### deriv_fast\n\n`deriv_fast(series_selector[d])` is a [rollup function](#rollup-functions), which calculates per-second derivative\nusing the first and the last [raw samples](https://docs.victoriametrics.com/keyconcepts/#raw-samples) on the given lookbehind window `d` per each time series returned\nfrom the given [series_selector](https://docs.victoriametrics.com/keyconcepts/#filtering).\n\nMetric names are stripped from the resulting rollups. Add [keep_metric_names](#keep_metric_names) modifier in order to keep metric names.\n\nSee also [deriv](#deriv) and [ideriv](#ideriv).\n\n```\n\n----------------------------------------\n\nTITLE: Creating Incremental Backup in Shell\nDESCRIPTION: This command performs an incremental backup by pointing to an existing backup destination. It uploads only new data, saving time and network bandwidth for large backups.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmbackup.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n./vmbackup -storageDataPath=</path/to/victoria-metrics-data> -snapshot.createURL=http://localhost:8428/snapshot/create -dst=gs://<bucket>/<path/to/existing/backup>\n```\n\n----------------------------------------\n\nTITLE: Unmarshalling Data with json-iterator in Go\nDESCRIPTION: This code replaces the standard encoding/json unmarshalling with json-iterator's high-performance implementation. The library is imported as jsoniter, with the configuration set for standard library compatibility, maintaining function signatures for seamless migration. Input parameters are the JSON byte slice input and a pointer to the destination structure \\u0026data. Dependency: github.com/json-iterator/go.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/json-iterator/go/README.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nimport jsoniter \\\"github.com/json-iterator/go\\\"\\n\\nvar json = jsoniter.ConfigCompatibleWithStandardLibrary\\njson.Unmarshal(input, \\u0026data)\n```\n\n----------------------------------------\n\nTITLE: MetricsQL Query with Regex Label Filtering\nDESCRIPTION: This snippet shows how to use regex matching in MetricsQL queries for label filtering. It demonstrates positive regex matching to select time series with label values matching a specific pattern.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/keyConcepts/keyConcepts.md#2025-04-22_snippet_17\n\nLANGUAGE: metricsql\nCODE:\n```\nrequests_total{code=~\"2.*\"}\n```\n\n----------------------------------------\n\nTITLE: Calculating Inverse Hyperbolic Sine in MetricsQL\nDESCRIPTION: A transform function computing the inverse hyperbolic sine for each data point in the time series returned by `q`. If applied directly to a series selector, `default_rollup()` is implicitly used. Metric names are stripped by default; use `keep_metric_names` to preserve them. Supported by PromQL.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_70\n\nLANGUAGE: MetricsQL\nCODE:\n```\n`asinh(q)`\n```\n\n----------------------------------------\n\nTITLE: Basic Stats Calculation in LogsQL\nDESCRIPTION: This query calculates the total number of logs for the last 5 minutes using the count stats function.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_134\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m | stats count() as logs_total\n```\n\n----------------------------------------\n\nTITLE: Periodic Scheduler Configuration Example\nDESCRIPTION: This YAML example provides a configuration for a periodic scheduler in VictoriaMetrics Anomaly Detection. The scheduler repeatedly trains models within a 14-day window and runs new inferences every hour and minute, respectively. Timezone and start time settings help customize initial execution timings. The setup requires a version of VictoriaMetrics that supports periodic schedulers with class aliases.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/anomaly-detection/components/scheduler.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nschedulers:\n  periodic_scheduler_alias:\n    class: \"periodic\"\n    # (or class: \"scheduler.periodic.PeriodicScheduler\" for versions before v1.13.0, without class alias support)\n    fit_window: \"14d\" \n    infer_every: \"1m\" \n    fit_every: \"1h\"\n    start_from: \"20:00\"  # If launched before 20:00 (local Kyiv time), the first run starts today at 20:00. Otherwise, it starts tomorrow at 20:00.\n    tz: \"Europe/Kyiv\"  # Defaults to 'UTC' if not specified.\n```\n\n----------------------------------------\n\nTITLE: OpenTelemetry Configuration\nDESCRIPTION: Basic OpenTelemetry configuration for sending metrics to VictoriaMetrics. Shows the complete pipeline from collection to export using OTLP HTTP protocol.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/data-ingestion/Alloy.md#2025-04-22_snippet_4\n\nLANGUAGE: Alloy\nCODE:\n```\nprometheus.exporter.unix \"nodeexporter\" {}\n\nprometheus.scrape \"nodeexporter\" {\n  targets = prometheus.exporter.unix.nodeexporter.targets\n  forward_to = [otelcol.receiver.prometheus.victoriametrics.receiver]\n}\n\notelcol.receiver.prometheus \"victoriametrics\" {\n  output {\n    metrics = [otelcol.processor.batch.batch.input]\n  }\n}\n\notelcol.processor.batch \"batch\" {\n  output {\n    metrics = [otelcol.exporter.otlphttp.victoriametrics.input]\n  }\n}\n\notelcol.exporter.otlphttp \"victoriametrics\" {\n  client {\n    endpoint = \"http://<victoriametrics_url>:<victoriametrics_port>/opentelemetry\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Migration with vmctl in VictoriaMetrics\nDESCRIPTION: This shell script demonstrates the process of migrating data from one VictoriaMetrics instance to another using the vmctl utility with the native binary protocol. It includes setting source and destination addresses, applying a metric name filter, and observing detailed log outputs. Dependencies include having vmctl installed and network access to both source and destination instances.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmctl.md#2025-04-22_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\n./vmctl vm-native \\\n    --vm-native-src-addr=http://127.0.0.1:8481/select/0/prometheus \\ # migrate from\n    --vm-native-dst-addr=http://localhost:8428 \\                     # migrate to\n    --vm-native-filter-time-start='2022-11-20T00:00:00Z' \\           # starting from\n    --vm-native-filter-match='{__name__!~\"vm_.*\"}'                   # match only metrics without `vm_` prefix\nVictoriaMetrics Native import mode\n\n2023/03/02 09:22:02 Initing import process from \"http://127.0.0.1:8481/select/0/prometheus/api/v1/export/native\" \n                    to \"http://localhost:8428/api/v1/import/native\" with filter \n        filter: match[]={__name__!~\"vm_.*\"}\n        start: 2022-11-20T00:00:00Z\n2023/03/02 09:22:02 Exploring metrics...\nFound 9 metrics to import. Continue? [Y/n] \n2023/03/02 09:22:04 Requests to make: 9\nRequests to make: 9 / 9 [█████████████████████████████████████████████████████████████████████████████████] 100.00%\n2023/03/02 09:22:06 Import finished!\n2023/03/02 09:22:06 VictoriaMetrics importer stats:\n  time spent while importing: 3.632638875s;\n  total bytes: 7.8 MB;\n  bytes/s: 2.1 MB;\n  requests: 9;\n  requests retries: 0;\n2023/03/02 09:22:06 Total time: 3.633127625s\n```\n\n----------------------------------------\n\nTITLE: Executing Range Query in VictoriaMetrics API\nDESCRIPTION: This snippet demonstrates how to execute a range query using the VictoriaMetrics API. It shows the GET request format and parameters for querying time series data over a specific time range with a given step interval.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/keyConcepts/keyConcepts.md#2025-04-22_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\ncurl \"http://<victoria-metrics-addr>/api/v1/query_range?query=foo_bar&step=1m&start=2022-05-10T07:59:00.000Z&end=2022-05-10T08:17:00.000Z\"\n```\n\n----------------------------------------\n\nTITLE: Enabling GCP Workload Identity for Kubernetes Service Accounts (YAML)\nDESCRIPTION: This YAML snippet configures a Kubernetes ServiceAccount for use with GCP Workload Identity by adding an annotation linking the KSA to a GCP service account. Prerequisites: setup of Workload Identity in GKE, correct GCP service account. The ServiceAccount should be referenced by pods needing GCP credentials. Inputs: ServiceAccount YAML; outputs: pods that can access GCP APIs via Workload Identity.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmbackup.md#2025-04-22_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\n---\\napiVersion: v1\\nkind: ServiceAccount\\nmetadata:\\n  name: monitoring-backups\\n  annotations:\\n    iam.gke.io/gcp-service-account: {sa_name}@{project_name}.iam.gserviceaccount.com\\n\n```\n\n----------------------------------------\n\nTITLE: Filtering Log Messages by Length Range in LogsQL\nDESCRIPTION: Shows how to use the `len_range()` filter in LogsQL to match log messages (`_msg` field by default) whose length falls within the specified range [5, 10] characters, inclusive. This filter applies to the entire log message content.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_72\n\nLANGUAGE: logsql\nCODE:\n```\nlen_range(5, 10)\n```\n\n----------------------------------------\n\nTITLE: Dropping Labels from Specific Targets using YAML\nDESCRIPTION: This configuration script discovers Kubernetes pod targets, maps pod-level labels to new labels prefixed with 'foo_', and then drops any labels that start with 'foo_bar_' for targets matching a certain regex condition. Dependencies include Kubernetes and proper RE2 format regex support.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/relabeling.md#2025-04-22_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\n- job_name: k8s\n  kubernetes_sd_configs:\n  - role: pod\n  relabel_configs:\n  - action: labelmap\n    regex: \"__meta_kubernetes_pod_label_(.+)\"\n    replacement: \"foo_$1\"\n  - action: labeldrop\n    if: '{__address__=~\"pod123.+\"}'\n    regex: \"foo_bar_.*\"\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry Collector for Elasticsearch Export to VictoriaLogs\nDESCRIPTION: This YAML configuration sets up an OpenTelemetry collector to export logs to VictoriaLogs using the Elasticsearch exporter. It includes settings for file log collection and resource attributes.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/data-ingestion/opentelemetry.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nexporters:\n  elasticsearch:\n    endpoints:\n      - http://victorialogs:9428/insert/elasticsearch\nreceivers:\n  filelog:\n    include: [/tmp/logs/*.log]\n    resource:\n      region: us-east-1\nservice:\n  pipelines:\n    logs:\n      receivers: [filelog]\n      exporters: [elasticsearch]\n```\n\n----------------------------------------\n\nTITLE: Using sum_le_over_time with VictoriaMetrics - Markdown - Syntax Reference\nDESCRIPTION: This snippet shows the sum_le_over_time rollup function, which sums all sample values less than or equal to le within the lookbehind window d for each series. It is applicable to gauges, strips metric names (unless keep_metric_names is used), and requires parameters: series_selector, d, and le (less-or-equal threshold). Output is the sum for values <= le.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_63\n\nLANGUAGE: Markdown\nCODE:\n```\n`sum_le_over_time(series_selector[d], le)`\n```\n\n----------------------------------------\n\nTITLE: Target scraping with time offset configuration in YAML\nDESCRIPTION: Configuration example demonstrating how to set a specific scraping offset within a time interval, configuring vmagent to scrape at 10 seconds of every minute.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmagent.md#2025-04-22_snippet_46\n\nLANGUAGE: yaml\nCODE:\n```\nscrape_configs:\n- job_name: foo\n  scrape_interval: 1m\n  scrape_offset: 10s\n```\n\n----------------------------------------\n\nTITLE: Calculating Average Over Range using range_avg() in MetricsQL\nDESCRIPTION: The `range_avg(q)` transform function computes the average value of data points over the selected time range for each time series returned by the query `q`.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_96\n\nLANGUAGE: MetricsQL\nCODE:\n```\nrange_avg(q)\n```\n\n----------------------------------------\n\nTITLE: Starting vmagent with URL Relabel Configs for Data Stream Splitting - Shell\nDESCRIPTION: This shell snippet demonstrates invoking vmagent with two remote write endpoints and their respective relabeling configuration files, effectively splitting data streams according to label-based filters. The command uses '-remoteWrite.url' to specify the destination URLs and '-remoteWrite.urlRelabelConfig' to assign the filtering YAML files created in previous steps. Flags must be ordered consistently such that each relabeling config matches its corresponding destination, and each destination will only receive metrics allowed by its filter. Requires vmagent binary, valid destination URLs, and YAML relabeling config files.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmagent.md#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n./vmagent \\\\\\n  -remoteWrite.url=http://<dev-url> -remoteWrite.urlRelabelConfig=relabelDev.yml \\\\\\n  -remoteWrite.url=http://<prod-url> -remoteWrite.urlRelabelConfig=relabelProd.yml \n```\n\n----------------------------------------\n\nTITLE: Ingesting Logs via JSON Stream API\nDESCRIPTION: Example of pushing multiple log lines to VictoriaLogs using the JSON stream (ndjson) API endpoint. The API accepts logs at http://localhost:9428/insert/jsonline with configurable field mappings via URL parameters.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/data-ingestion/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\necho '{ \"log\": { \"level\": \"info\", \"message\": \"hello world\" }, \"date\": \"0\", \"stream\": \"stream1\" }\n{ \"log\": { \"level\": \"error\", \"message\": \"oh no!\" }, \"date\": \"0\", \"stream\": \"stream1\" }\n{ \"log\": { \"level\": \"info\", \"message\": \"hello world\" }, \"date\": \"0\", \"stream\": \"stream2\" }\n' | curl -X POST -H 'Content-Type: application/stream+json' --data-binary @- 'http://localhost:9428/insert/jsonline?_stream_fields=stream&_time_field=date&_msg_field=log.message'\n```\n\n----------------------------------------\n\nTITLE: Multiple OR Filters in MetricsQL\nDESCRIPTION: Query demonstrating the use of multiple OR filters to select time series matching different label combinations.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/keyConcepts/keyConcepts.md#2025-04-22_snippet_20\n\nLANGUAGE: metricsql\nCODE:\n```\n{job=\"app1\",env=\"prod\" or job=\"app2\",env=\"dev\"}\n```\n\n----------------------------------------\n\nTITLE: Calculating Standard Variance Over Range - MetricsQL (English)\nDESCRIPTION: The `range_stdvar(q)` function finds the variance of points within each time series emitted by `q` for the time selection. This is useful for understanding dispersion and volatility within metrics.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/MetricsQL.md#2025-04-22_snippet_92\n\nLANGUAGE: MetricsQL\nCODE:\n```\n`range_stdvar(q)`\n```\n\n----------------------------------------\n\nTITLE: Calculating Standard Deviation Over Range - MetricsQL (English)\nDESCRIPTION: The `range_stddev(q)` function computes the statistical standard deviation for all data points of every time series output by `q` over the selected time window. Returns one stddev value per time series.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/MetricsQL.md#2025-04-22_snippet_91\n\nLANGUAGE: MetricsQL\nCODE:\n```\n`range_stddev(q)`\n```\n\n----------------------------------------\n\nTITLE: Using tlast_over_time with VictoriaMetrics - Markdown - Syntax Reference\nDESCRIPTION: This snippet presents tlast_over_time, an alias for timestamp in VictoriaMetrics, returning the timestamp of the last sample in the window d per series. It takes series_selector and duration d as arguments and shares the same behavior as timestamp. Metric names are stripped unless kept explicitly.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_70\n\nLANGUAGE: Markdown\nCODE:\n```\n`tlast_over_time(series_selector[d])`\n```\n\n----------------------------------------\n\nTITLE: Importing Data in Prometheus Text Format to VictoriaMetrics\nDESCRIPTION: Examples for importing data to VictoriaMetrics in Prometheus text exposition format. This allows importing metrics directly in the standard Prometheus format.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/url-examples.md#2025-04-22_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\ncurl -d 'metric_name{foo=\"bar\"} 123' -X POST http://localhost:8428/api/v1/import/prometheus\n```\n\nLANGUAGE: sh\nCODE:\n```\ncurl -d 'metric_name{foo=\"bar\"} 123' -X POST http://<vminsert>:8480/insert/0/prometheus/api/v1/import/prometheus\n```\n\n----------------------------------------\n\nTITLE: Detecting Frequent Logs with LogsQL in VictoriaLogs\nDESCRIPTION: LogsQL query to find the most frequently seen log messages over the last hour using the 'collapse_nums' pipe and 'top' function.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/FAQ.md#2025-04-22_snippet_2\n\nLANGUAGE: logsql\nCODE:\n```\n_time:1h | collapse_nums prettify | top 10 (_msg)\n```\n\n----------------------------------------\n\nTITLE: Variance Calculation over Histogram Buckets in PromQL\nDESCRIPTION: The `histogram_stdvar(buckets)` function calculates the standard variance for specified `buckets`, aiding in assessments of how measurements differ within a dataset. PromQL assists insights into data consistency over set durations with this function.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_83\n\nLANGUAGE: PromQL\nCODE:\n```\n`histogram_stdvar(buckets)`\n```\n\n----------------------------------------\n\nTITLE: Telegraf Configuration with Bearer Token Authentication\nDESCRIPTION: Telegraf output configuration using Bearer token authentication via HTTP headers for VictoriaMetrics access.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/data-ingestion/Telegraf.md#2025-04-22_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n[[outputs.influxdb]]\n  urls = [\"$victoriametrics_url\"]\n  http_headers = {\"Authorization\" = \"Bearer $victoriametrics_token\"}\n  database = \"victoriametrics\"\n  skip_database_creation = true\n  exclude_retention_policy_tag = true\n  content_encoding = \"gzip\"\n```\n\n----------------------------------------\n\nTITLE: Clamping Time Series to Minimum Value with VictoriaMetrics PromQL\nDESCRIPTION: The clamp_min function limits values in the time series q to a minimum value min. Any value below min is set to min. Supported in PromQL, this helps in preventing lower outliers in time series data.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_89\n\nLANGUAGE: PromQL\nCODE:\n```\n`clamp_min(q, min)`\n```\n\n----------------------------------------\n\nTITLE: Configuring vmanomaly Scheduler and Model\nDESCRIPTION: This YAML configuration snippet sets up the vmanomaly scheduler and model for anomaly detection. It includes fit windows and detection directions to identify anomalies using z-score online models. Important parameters include 'fit_every', 'fit_window', and 'detection_direction'. The configuration ensures that predictions remain within specified limits, while the 'provide_series' parameter defines output metrics for VictoriaMetrics.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/anomaly-detection/FAQ.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# other sections, like writer, monitoring ...\\nschedulers:\\n  periodic_http:\\n    class: periodic\\n    fit_every: 12w\\n    fit_window: 1w\\n    infer_every: 1m\\n  # other schedulers ...\\nreader:\\n  # other reader args, like datasource_url, tenant_id ...\\n  queries:\\n    percentage_4xx:\\n      expr: respective_metricsQL_expr\\n      data_range: [0, 0.05]  # to automatically trigger anomaly score > 1 for error rates > 5%\\n      step: 1m\\nmodels:\\n  # other models ...\\n  zscore:  # let it be online Z-score, for simplicity\\n    class: zscore_online  # online model update itself each infer call, resulting in resource-efficient setups\\n    z_threshold: 3.0\\n    schedulers: ['periodic_http']\\n    queries: ['percentage_4xx']\\n    detection_direction: 'above_expected'  # as interested only in spikes, drops are OK\\n    min_dev_from_expected: 0.005  # <0.5% deviations vs expected values should be neglected, generating anomaly score == 0\\n    # to align predictions to be within [0, 5%] interval, defined in reader.queries.percentage_4xx.data_range\\n    clip_predictions: True\\n    # specify output series produced by vmanomaly to be written to VictoriaMetrics in `writer`\\n    provide_series: ['anomaly_score', 'y', 'yhat', 'yhat_lower', 'yhat_upper']\n```\n\n----------------------------------------\n\nTITLE: Checking Presence of Samples in PromQL\nDESCRIPTION: The present_over_time function returns 1 if there is at least one raw sample in the given time window, otherwise it returns an empty result. It's supported by PromQL.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_44\n\nLANGUAGE: PromQL\nCODE:\n```\npresent_over_time(series_selector[d])\n```\n\n----------------------------------------\n\nTITLE: YAML Configuration for VictoriaMetrics Grafana Datasource Documentation\nDESCRIPTION: YAML frontmatter configuration that defines the documentation structure and metadata for the VictoriaMetrics Grafana datasource. Includes weight for ordering, menu identifiers, and URL aliases for backward compatibility.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/victoriametrics-datasource.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nweight: 40\neditLink: https://github.com/VictoriaMetrics/victoriametrics-datasource/blob/main/README.md\ntitle: Grafana datasource\nmenu:\n  docs:\n    identifier: victoriametrics-grafana-datasource\n    parent: victoriametrics\n    weight: 40\naliases:\n- /victoriametrics-datasource.html\n# old doc name before it was renamed\n- /grafana-datasource/\n- /grafana-datasource.html\n```\n\n----------------------------------------\n\nTITLE: Candlestick Rollup Function in PromQL\nDESCRIPTION: Calculates OHLC (open, high, low, close) values over a lookbehind window for financial applications.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_52\n\nLANGUAGE: promql\nCODE:\n```\nrollup_candlestick(series_selector[d])\n```\n\n----------------------------------------\n\nTITLE: Calculating Increase with `increase` in MetricsQL\nDESCRIPTION: The `increase` function calculates the total increase of counter metric time series over the specified interval. It assumes counters start at 0, including the first sample in the calculation. This MetricsQL query shows its equivalence to summing the results of `increase_pure`. Behavior for sporadic metrics can be adjusted via `staleness_interval`.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/stream-aggregation.md#2025-04-22_snippet_19\n\nLANGUAGE: metricsql\nCODE:\n```\nsum(increase_pure(some_counter[interval]))\n```\n\n----------------------------------------\n\nTITLE: Transforming Label Values with label_transform Function\nDESCRIPTION: The label_transform function substitutes all regexp occurrences by the given replacement in the specified label.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_130\n\nLANGUAGE: metricsql\nCODE:\n```\nlabel_transform(q, \"label\", \"regexp\", \"replacement\")\n```\n\n----------------------------------------\n\nTITLE: JWT Token Structure for VM Access Control (JSON Object Format)\nDESCRIPTION: Example JWT token payload with vm_access as a JSON object, demonstrating how to configure tenant access, extra labels, filters, and access mode for VictoriaMetrics authentication.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmgateway.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"exp\": 1617304574,\n  \"vm_access\": {\n      \"tenant_id\": {\n        \"account_id\": 1,\n        \"project_id\": 5\n      },\n      \"extra_labels\": {\n         \"team\": \"dev\",\n         \"project\": \"mobile\"\n      },\n      \"extra_filters\": [\"{env=~\\\"prod|dev\\\",team!=\\\"test\\\"}\"],\n      \"mode\": 1\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Running Average using running_avg() in MetricsQL\nDESCRIPTION: The `running_avg(q)` transform function computes the running average for each time series returned by the query `q`. Each output point represents the average of all preceding points in the series up to that time.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_116\n\nLANGUAGE: MetricsQL\nCODE:\n```\nrunning_avg(q)\n```\n\n----------------------------------------\n\nTITLE: Delta Calculation with IDelta in Markdown\nDESCRIPTION: 'idelta' calculates the difference between the last two raw samples over a lookbehind window 'd'. It strips metric names unless modified and is supported by PromQL.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/MetricsQL.md#2025-04-22_snippet_31\n\nLANGUAGE: Markdown\nCODE:\n```\n`idelta(series_selector[d])` is a [rollup function](#rollup-functions), which calculates the difference between the last two [raw samples](https://docs.victoriametrics.com/keyconcepts/#raw-samples)\\non the given lookbehind window `d` per each time series returned from the given [series_selector](https://docs.victoriametrics.com/keyconcepts/#filtering).\n```\n\n----------------------------------------\n\nTITLE: Converting Degrees to Radians in PromQL\nDESCRIPTION: The rad() function converts degrees to radians for every point of every time series returned by the query. It strips metric names from the resulting series unless the keep_metric_names modifier is used.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_96\n\nLANGUAGE: promql\nCODE:\n```\nrad(q)\n```\n\n----------------------------------------\n\nTITLE: Limiting and Offsetting Time Series Results - PromQL - PromQL\nDESCRIPTION: limit_offset(limit, offset, q) skips a number of time series (offset) and limits the returned set to 'limit' time series from the result of q. Typically used for pagination in result sets per group. Accepts integer limit, integer offset, and an input query q. No external dependencies except PromQL compatibility.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_111\n\nLANGUAGE: PromQL\nCODE:\n```\n`limit_offset(limit, offset, q)`\n```\n\n----------------------------------------\n\nTITLE: Filtering Logs by Subquery Stream IDs - VictoriaLogs LogSQL\nDESCRIPTION: This snippet demonstrates advanced subquery filtering, where a subquery extracts relevant stream IDs (e.g., from recent logs containing 'error'), and the outer query fetches logs for those streams. Dependencies include support for subqueries and nested filters in the LogsQL engine. Parameters must be adapted to the desired search. Output is all logs from streams that satisfy the subquery conditions.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_36\n\nLANGUAGE: logsql\nCODE:\n```\n_stream_id:in(_time:5m error | fields _stream_id)\n```\n\n----------------------------------------\n\nTITLE: Collecting CPU Profile in VictoriaMetrics\nDESCRIPTION: Command for collecting a CPU profile from a running VictoriaMetrics instance via HTTP. This command waits for 30 seconds to collect the profile, which can then be analyzed with 'go tool pprof'.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/README.md#2025-04-22_snippet_81\n\nLANGUAGE: sh\nCODE:\n```\ncurl http://0.0.0.0:8428/debug/pprof/profile > cpu.pprof\n```\n\n----------------------------------------\n\nTITLE: Configuring 1-Minute Sum Aggregation Output - VictoriaMetrics (YAML)\nDESCRIPTION: Defines a stream aggregation configuration in YAML that computes the sum of samples in 1-minute intervals, preserving all original labels from input metrics in the output. This example requires no label removal or further filtering by default. The key parameters are 'interval: 1m' for interval duration and 'outputs: [sum_samples]' to set the aggregation function, producing metrics like 'foo:1m_sum_samples{app=\"bar\",instance=\"host1\"}'.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/stream-aggregation.md#2025-04-22_snippet_37\n\nLANGUAGE: yaml\nCODE:\n```\n- interval: 1m\\n  outputs: [sum_samples]\n```\n\n----------------------------------------\n\nTITLE: Running vmselect with mTLS Enabled (Bash)\nDESCRIPTION: This command starts the `vmselect` component of VictoriaMetrics Enterprise, configured to accept only mutual TLS (mTLS) authenticated requests on its default listening port (8481). The `-tls` flag enables TLS, and `-mtls` enforces client certificate verification using the system-wide TLS Root CA by default. This feature requires the Enterprise version of VictoriaMetrics.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/Cluster-VictoriaMetrics.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n./vmselect -tls -mtls\n```\n\n----------------------------------------\n\nTITLE: Configuring DNS Service Discovery in VictoriaMetrics (YAML)\nDESCRIPTION: Example YAML configuration for `dns_sd_configs` in VictoriaMetrics scrape jobs. It shows the required `names` list for DNS domains to query and optional parameters like `type` (SRV, A, AAAA, MX; default SRV) and `port` (used if type is not SRV) for discovering scrape targets via DNS lookups.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/sd_configs.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nscrape_configs:\n- job_name: dns\n  dns_sd_configs:\n\n    # names must contain a list of DNS names to query.\n    #\n  - names: [\"...\", \"...\"]\n\n    # type is an optional type of DNS query to perform.\n    # Supported values are: SRV, A, AAAA or MX.\n    # By default, SRV is used.\n    #\n    # type: ...\n\n    # port is a port number to use if the query type is not SRV.\n    #\n    # port: ...\n```\n\n----------------------------------------\n\nTITLE: Selecting Logs with Specific Words in LogsQL\nDESCRIPTION: This query selects logs containing 'error', 'ERROR', or 'Error' words in the log message, filtered to the last hour and sorted by time.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/logsql-examples.md#2025-04-22_snippet_4\n\nLANGUAGE: logsql\nCODE:\n```\n(error or ERROR or Error) _time:1h | sort by (_time)\n```\n\n----------------------------------------\n\nTITLE: Detecting Outliers Using IQR in PromQL\nDESCRIPTION: The outlier_iqr_over_time function identifies outliers based on the Interquartile Range (IQR) method. It's useful for detecting anomalies in gauge values based on historical data.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_42\n\nLANGUAGE: PromQL\nCODE:\n```\noutlier_iqr_over_time(series_selector[d])\n```\n\n----------------------------------------\n\nTITLE: Regexp Filter in LogsQL\nDESCRIPTION: Shows how to use regular expressions with re2 syntax for log filtering. Supports case-sensitive and case-insensitive matching, with options for field-specific filtering.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_68\n\nLANGUAGE: logsql\nCODE:\n```\n~\"err|warn\"\n```\n\nLANGUAGE: logsql\nCODE:\n```\n'\"foo\":\"(bar|baz)\"'\n```\n\nLANGUAGE: logsql\nCODE:\n```\nevent.original:~\"err|warn\"\n```\n\nLANGUAGE: logsql\nCODE:\n```\n\"event:original\":~\"err|warn\"\n```\n\n----------------------------------------\n\nTITLE: Mapping Label Values with label_map Function\nDESCRIPTION: The label_map function maps label values from source values to destination values for all time series returned by the query.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_124\n\nLANGUAGE: metricsql\nCODE:\n```\nlabel_map(q, \"label\", \"src_value1\", \"dst_value1\", ..., \"src_valueN\", \"dst_valueN\")\n```\n\n----------------------------------------\n\nTITLE: Estimating Unique Host-Path Pairs with Hash in LogsQL\nDESCRIPTION: This query returns an estimated number of unique (host, path) pairs for the corresponding fields over the last 5 minutes using the count_uniq_hash stats function.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_184\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m | stats count_uniq_hash(host, path) unique_host_path_pairs\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of fasttemplate in Go\nDESCRIPTION: Demonstrates the basic usage of the `fasttemplate` library in Go. It shows how to create a new `fasttemplate` instance with a template string and custom delimiters (`{{`, `}}`). The `ExecuteString` method is then used to substitute placeholders defined in the template with values provided in a `map[string]interface{}`. The resulting string is printed to standard output. Requires the `fasttemplate`, `fmt`, and `net/url` (for QueryEscape) packages.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/valyala/fasttemplate/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n\ttemplate := \"http://{{host}}/?q={{query}}&foo={{bar}}{{bar}}\"\n\tt := fasttemplate.New(template, \"{{\", \"}}\")\n\ts := t.ExecuteString(map[string]interface{}{\n\t\t\"host\":  \"google.com\",\n\t\t\"query\": url.QueryEscape(\"hello=world\"),\n\t\t\"bar\":   \"foobar\",\n\t})\n\tfmt.Printf(\"%s\", s)\n\n\t// Output:\n\t// http://google.com/?q=hello%3Dworld&foo=foobarfoobar\n```\n\n----------------------------------------\n\nTITLE: Listing Backups using vmbackupmanager CLI (Shell)\nDESCRIPTION: Example usage of the `vmbackupmanager backup list` command. It contacts the vmbackupmanager API (defaulting to http://127.0.0.1:8300) and outputs a JSON array listing the backups available in the configured remote storage.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmbackupmanager.md#2025-04-22_snippet_14\n\nLANGUAGE: sh\nCODE:\n```\n$ ./vmbackupmanager backup list\n[{\"name\":\"daily/2023-04-07\",\"size_bytes\":318837,\"size\":\"311.4ki\",\"created_at\":\"2023-04-07T16:15:07+00:00\"},{\"name\":\"hourly/2023-04-07:11\",\"size_bytes\":318837,\"size\":\"311.4ki\",\"created_at\":\"2023-04-07T16:15:06+00:00\"},{\"name\":\"latest\",\"size_bytes\":318837,\"size\":\"311.4ki\",\"created_at\":\"2023-04-07T16:15:04+00:00\"},{\"name\":\"monthly/2023-04\",\"size_bytes\":318837,\"size\":\"311.4ki\",\"created_at\":\"2023-04-07T16:15:10+00:00\"},{\"name\":\"weekly/2023-14\",\"size_bytes\":318837,\"size\":\"311.4ki\",\"created_at\":\"2023-04-07T16:15:09+00:00\"}]\n\n```\n\n----------------------------------------\n\nTITLE: Mapping Label Values in MetricsQL\nDESCRIPTION: A label manipulation function that replaces values in a specified `label` based on provided mappings (`src_value*` to `dst_value*`) for all time series returned by `q`. Implicitly applies `default_rollup()` if `q` is a series selector.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_149\n\nLANGUAGE: metricsql\nCODE:\n```\nlabel_map(q, \"label\", \"src_value1\", \"dst_value1\", ..., \"src_valueN\", \"dst_valueN\")\n```\n\n----------------------------------------\n\nTITLE: Configuring VictoriaMetrics Alert Rules for Anomaly Detection\nDESCRIPTION: Example YAML configuration for vmalert that defines an alert rule triggered when the anomaly score exceeds 1.0. This configuration creates a warning alert for abnormal CPU behavior.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/anomaly-detection/guides/guide-vmanomaly-vmalert/README.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ngroups:\n- name: AnomalyExample\n  rules:\n  - alert: HighAnomalyScore\n    expr: 'anomaly_score > 1.0'\n    labels:\n      severity: warning\n    annotations:\n      summary: Anomaly Score exceeded 1.0. `sum(rate(node_cpu_seconds_total))` is showing abnormal behavior. \n```\n\n----------------------------------------\n\nTITLE: Replacing Characters in Metric Names in YAML\nDESCRIPTION: This YAML configuration shows how to replace all '-' characters with '_' in metric names across all scraped metrics.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/relabeling.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nscrape_configs:\n- job_name: test\n  static_configs:\n  - targets: [host123]\n  metric_relabel_configs:\n  - source_labels: [__name__]\n    action: replace_all\n    regex: '-'\n    replacement: '_'\n    target_label: __name__\n```\n\n----------------------------------------\n\nTITLE: Configuring Stream Aggregation for Recording Rules Alternative\nDESCRIPTION: This YAML configuration aggregates histogram bucket metrics without the instance label every 5 minutes, providing an alternative to resource-intensive recording rules for histogram quantile calculations.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/stream-aggregation.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- match: 'http_request_duration_seconds_bucket'\n  interval: 5m\n  without: [instance]\n  outputs: [total]\n```\n\n----------------------------------------\n\nTITLE: Querying Equivalent for 'total' Aggregation in MetricsQL\nDESCRIPTION: This MetricsQL query provides an approximate equivalent to the `total` stream aggregation function. It calculates the sum of the running sum of monotonic increases (`increase_pure`) for a given counter metric, effectively tracking the total increase over time, assuming counters start at 0.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/stream-aggregation.md#2025-04-22_snippet_29\n\nLANGUAGE: metricsql\nCODE:\n```\nsum(running_sum(increase_pure(some_counter)))\n```\n\n----------------------------------------\n\nTITLE: Finding unique field values using uniq pipe in LogsQL\nDESCRIPTION: Query that returns the unique values for the ip field from logs in the last 5 minutes using the uniq pipe.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/logsql-examples.md#2025-04-22_snippet_16\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m | uniq by (ip)\n```\n\n----------------------------------------\n\nTITLE: Querying Histogram Standard Deviation using MetricsQL\nDESCRIPTION: Shows how to calculate the estimated standard deviation from VictoriaMetrics histogram buckets using the `histogram_stddev` function in MetricsQL. It operates on the sum of the increase of histogram buckets (`request_duration_seconds:60s_histogram_bucket`) over the last hour (`[1h]`) grouped by the `vmrange` label.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/stream-aggregation.md#2025-04-22_snippet_10\n\nLANGUAGE: metricsql\nCODE:\n```\nhistogram_stddev(sum(increase(request_duration_seconds:60s_histogram_bucket[1h])) by (vmrange))\n```\n\n----------------------------------------\n\nTITLE: Calculating Integrals with Integrate in Markdown\nDESCRIPTION: 'integrate' finds the integral over raw samples in a lookbehind window, aiding in cumulative data analysis for gauges.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/MetricsQL.md#2025-04-22_snippet_37\n\nLANGUAGE: Markdown\nCODE:\n```\n`integrate(series_selector[d])` is a [rollup function](#rollup-functions), which calculates the integral over [raw samples](https://docs.victoriametrics.com/keyconcepts/#raw-samples)\\non the given lookbehind window `d`.\n```\n\n----------------------------------------\n\nTITLE: Retrieving Label Values in PromQL\nDESCRIPTION: The label_value function returns numeric values for a given label in time series returned by a query. It filters out non-numeric label values.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_132\n\nLANGUAGE: promql\nCODE:\n```\nlabel_value(foo, \"bar\")\n```\n\n----------------------------------------\n\nTITLE: Aggregation Over Time with Multiple Functions\nDESCRIPTION: Example demonstrating how to calculate multiple rollup functions simultaneously using aggr_over_time\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_27\n\nLANGUAGE: promql\nCODE:\n```\naggr_over_time((\"min_over_time\", \"max_over_time\", \"rate\"), m[d])\n```\n\n----------------------------------------\n\nTITLE: Keeping Targets If Target Label Contains Source Label Value with 'keep_if_contains' - YAML\nDESCRIPTION: Demonstrates a rule that keeps entries where the specified target label (e.g., '__meta_consul_tags') contains the values given by the source label(s) (e.g., 'required_consul_tag'). No dependencies except VictoriaMetrics relabeling. Uses 'action', 'target_label', and 'source_labels'. Input: sets of labels per target; output: retention based on label containment relationship. Use when controlling inclusion based on dynamic attributes.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmagent.md#2025-04-22_snippet_32\n\nLANGUAGE: YAML\nCODE:\n```\n- action: keep_if_contains\n  target_label: __meta_consul_tags\n  source_labels: [required_consul_tag]\n```\n\n----------------------------------------\n\nTITLE: Configuring Retention Filters in VictoriaMetrics Enterprise\nDESCRIPTION: This snippet demonstrates how to set up retention filters for different time series in VictoriaMetrics Enterprise. It configures 3 days retention for 'juniors' team, 30 days for 'dev' or 'staging' environments, and 1 year for all other time series.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/README.md#2025-04-22_snippet_67\n\nLANGUAGE: bash\nCODE:\n```\n-retentionFilter='{team=\"juniors\"}:3d' -retentionFilter='{env=~\"dev|staging\"}:30d' -retentionPeriod=1y\n```\n\n----------------------------------------\n\nTITLE: Median Absolute Deviation Calculation in PromQL\nDESCRIPTION: Calculates median absolute deviation over raw samples within a lookbehind window for time series. Usually applied to gauges.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/MetricsQL.md#2025-04-22_snippet_42\n\nLANGUAGE: promql\nCODE:\n```\nmad_over_time(series_selector[d])\n```\n\n----------------------------------------\n\nTITLE: Multiple Rollup Aggregation - MetricsQL\nDESCRIPTION: Example demonstrating how to calculate multiple rollup functions simultaneously using aggr_over_time.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/MetricsQL.md#2025-04-22_snippet_12\n\nLANGUAGE: metricsql\nCODE:\n```\naggr_over_time((\"min_over_time\", \"max_over_time\", \"rate\"), m[d])\n```\n\n----------------------------------------\n\nTITLE: Querying Log Stats with VictoriaLogs HTTP API\nDESCRIPTION: Example of querying log statistics for a specific day grouped by log level using the /select/logsql/stats_query endpoint. Returns Prometheus-compatible metrics format.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/querying/README.md#2025-04-22_snippet_17\n\nLANGUAGE: sh\nCODE:\n```\ncurl http://localhost:9428/select/logsql/stats_query -d 'query=_time:1d | stats by (level) count(*)' -d 'time=2024-01-02Z'\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": \"success\",\n  \"data\": {\n    \"resultType\": \"vector\",\n    \"result\": [\n      {\n        \"metric\": {\n          \"__name__\": \"count(*)\",\n          \"level\": \"info\"\n        },\n        \"value\": [\n          1704153600,\n          \"20395342\"\n        ]\n      },\n      {\n        \"metric\": {\n          \"__name__\": \"count(*)\",\n          \"level\": \"warn\"\n        },\n        \"value\": [\n          1704153600,\n          \"1239222\"\n        ]\n      },\n      {\n        \"metric\": {\n          \"__name__\": \"count(*)\",\n          \"level\": \"error\"\n        },\n        \"value\": [\n          1704153600,\n          \"832\"\n        ]\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Authentication with azidentity in Go\nDESCRIPTION: This snippet shows how to configure the newer `azidentity` library for Azure authentication in Go, particularly for sovereign clouds like Azure China. It uses `azcore.ClientOptions` with a predefined cloud configuration from `azcore/cloud` and passes these options when creating a credential type, such as `azidentity.NewClientSecretCredential`. Unlike `adal`, the audience is typically determined by the client requesting the token.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/Azure/azure-sdk-for-go/sdk/azidentity/MIGRATION.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"github.com/Azure/azure-sdk-for-go/sdk/azcore/cloud\"\n    \"github.com/Azure/azure-sdk-for-go/sdk/azidentity\"\n)\n\nclientOpts := azcore.ClientOptions{Cloud: cloud.AzureChina}\n\ncred, err := azidentity.NewClientSecretCredential(\n    tenantID, clientID, secret, &azidentity.ClientSecretCredentialOptions{ClientOptions: clientOpts},\n)\nhandle(err)\n```\n\n----------------------------------------\n\nTITLE: Displaying Help for vm-native Command in vmctl\nDESCRIPTION: Lists the available flags for the vm-native command in vmctl, including options for data filtering, time range selection, connection settings, authentication, and performance tuning for data migration between VictoriaMetrics instances.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmctl.md#2025-04-22_snippet_30\n\nLANGUAGE: shellhelp\nCODE:\n```\n./vmctl vm-native -help\n\n   --vm-native-filter-match value\n     Time series selector to match series for export. For example, select {instance!=\"localhost\"} will match all series with \"instance\" label different to \"localhost\".\n     See more details here https://github.com/VictoriaMetrics/VictoriaMetrics#how-to-export-data-in-native-format (default: \"{__name__!=\\\"\\\"}\")\n   --vm-native-filter-time-start value\n     The time filter may contain different timestamp formats. See more details here https://docs.victoriametrics.com/single-server-victoriametrics/#timestamp-formats\n   --vm-native-filter-time-end value\n     The time filter may contain different timestamp formats. See more details here https://docs.victoriametrics.com/single-server-victoriametrics/#timestamp-formats\n   --vm-native-step-interval value\n     The time interval to split the migration into steps. For example, to migrate 1y of data with '--vm-native-step-interval=month' vmctl will execute it in 12 separate requests from the beginning of the time range to its end. To reverse the order use '--vm-native-filter-time-reverse'. Requires setting '--vm-native-filter-time-start'. Valid values are 'month','week','day','hour','minute'. (default: \"month\")\n   --vm-native-filter-time-reverse\n     Whether to reverse the order of time intervals split by '--vm-native-step-interval' cmd-line flag. When set, the migration will start from the newest to the oldest data. (default: false)\n   --vm-native-disable-http-keep-alive\n     Disable HTTP persistent connections for requests made to VictoriaMetrics components during export (default: false)\n   --vm-native-src-addr value\n     VictoriaMetrics address to perform export from. \n     Should be the same as --httpListenAddr value for single-node version or vmselect component. If exporting from cluster version see https://docs.victoriametrics.com/cluster-victoriametrics/#url-format\n   --vm-native-src-user value\n     VictoriaMetrics username for basic auth [$VM_NATIVE_SRC_USERNAME]\n   --vm-native-src-password value\n     VictoriaMetrics password for basic auth [$VM_NATIVE_SRC_PASSWORD]\n   --vm-native-src-headers value\n     Optional HTTP headers to send with each request to the corresponding source address. \n     For example, --vm-native-src-headers='My-Auth:foobar' would send 'My-Auth: foobar' HTTP header with every request to the corresponding source address. \n     Multiple headers must be delimited by '^^': --vm-native-src-headers='header1:value1^^header2:value2'\n   --vm-native-src-bearer-token --vm-native-src-addr\n     Optional bearer auth token to use for the corresponding --vm-native-src-addr\n   --vm-native-src-cert-file --vm-native-src-addr\n     Optional path to client-side TLS certificate file to use when connecting to --vm-native-src-addr\n   --vm-native-src-key-file --vm-native-src-addr\n     Optional path to client-side TLS key to use when connecting to --vm-native-src-addr\n   --vm-native-src-ca-file --vm-native-src-addr\n     Optional path to TLS CA file to use for verifying connections to --vm-native-src-addr. By default, system CA is used\n   --vm-native-src-server-name --vm-native-src-addr\n     Optional TLS server name to use for connections to --vm-native-src-addr. By default, the server name from `--vm-native-src-addr` is used\n   --vm-native-src-insecure-skip-verify --vm-native-src-addr\n     Whether to skip TLS certificate verification when connecting to --vm-native-src-addr (default: false)\n   --vm-native-dst-addr value\n     VictoriaMetrics address to perform import to. \n     Should be the same as --httpListenAddr value for single-node version or vminsert component. \n     If importing into cluster version see https://docs.victoriametrics.com/cluster-victoriametrics/#url-format\n   --vm-native-dst-user value\n     VictoriaMetrics username for basic auth [$VM_NATIVE_DST_USERNAME]\n   --vm-native-dst-password value\n     VictoriaMetrics password for basic auth [$VM_NATIVE_DST_PASSWORD]\n   --vm-native-dst-headers value\n     Optional HTTP headers to send with each request to the corresponding destination address. \n     For example, --vm-native-dst-headers='My-Auth:foobar' would send 'My-Auth: foobar' HTTP header with every request to the corresponding destination address. \n     Multiple headers must be delimited by '^^': --vm-native-dst-headers='header1:value1^^header2:value2'\n   --vm-native-dst-bearer-token --vm-native-dst-addr\n     Optional bearer auth token to use for the corresponding --vm-native-dst-addr\n   --vm-native-dst-cert-file --vm-native-dst-addr\n     Optional path to client-side TLS certificate file to use when connecting to --vm-native-dst-addr\n   --vm-native-dst-key-file --vm-native-dst-addr\n     Optional path to client-side TLS key to use when connecting to --vm-native-dst-addr\n   --vm-native-dst-ca-file --vm-native-dst-addr\n     Optional path to TLS CA file to use for verifying connections to --vm-native-dst-addr. By default, system CA is used\n   --vm-native-dst-server-name --vm-native-dst-addr\n     Optional TLS server name to use for connections to --vm-native-dst-addr. By default, the server name from `--vm-native-dst-addr` is used\n   --vm-native-dst-insecure-skip-verify --vm-native-dst-addr\n     Whether to skip TLS certificate verification when connecting to --vm-native-dst-addr (default: false)\n   --vm-extra-label value [ --vm-extra-label value ]\n     Extra labels, that will be added to imported timeseries. In case of collision, label value defined by flagwill have priority. \n     Flag can be set multiple times, to add few additional labels.\n   --vm-rate-limit value\n     Optional data transfer rate limit in bytes per second.\n     By default, the rate limit is disabled. It can be useful for limiting load on source or destination databases.\n     Rate limit is applied per worker, see --vm-concurrency. (default: 0)\n   --vm-intercluster  Enables cluster-to-cluster migration mode with automatic tenants data migration.\n     In this mode --vm-native-src-addr flag format is: 'http://vmselect:8481/'. --vm-native-dst-addr flag format is: http://vminsert:8480/. \n     TenantID will be appended automatically after discovering tenants from src. (default: false)\n   --vm-concurrency value\n     Number of workers concurrently performing import requests to VM (default: 2)\n   --vm-native-disable-per-metric-migration\n     Defines whether to disable per-metric migration and migrate all data via one connection. \n     In this mode, vmctl makes less export/import requests, but can't provide a progress bar or retry failed requests. (default: false)\n   --vm-native-disable-binary-protocol\n     Whether to use https://docs.victoriametrics.com/#how-to-export-data-in-json-line-format instead of \n     https://docs.victoriametrics.com/#how-to-export-data-in-native-format API. \n     Binary export/import API protocol implies less network and resource usage, as it transfers compressed binary data blocks.\n     Non-binary export/import API is less efficient, but supports deduplication if it is configured on vm-native-src-addr side. (default: false)\n   --vm-native-backoff-retries value\n     How many export/import retries to perform before giving up. (default: 10)\n   --vm-native-backoff-factor value\n     Factor to multiply the base duration after each failed export/import retry. Must be greater than 1.0 (default: 1.8)\n   --vm-native-backoff-min-duration value\n     Minimum duration to wait before the first export/import retry. Each subsequent export/import retry will be multiplied by the '--vm-native-backoff-factor'. (default: 2s)\n```\n\n----------------------------------------\n\nTITLE: Using sum_le_over_time in VictoriaMetrics Syntax - plaintext\nDESCRIPTION: Explains sum_le_over_time for summing sample values less than or equal to 'le' across a lookbehind window. Requires a series_selector and a comparison value 'le'. Returns the result with metric names removed unless otherwise modified.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_54\n\nLANGUAGE: plaintext\nCODE:\n```\n`sum_le_over_time(series_selector[d], le)`\n```\n\n----------------------------------------\n\nTITLE: Querying Specific Tenant in VictoriaLogs\nDESCRIPTION: This command demonstrates how to query logs for a specific tenant by setting the AccountID and ProjectID HTTP headers. It searches for log messages in the tenant with AccountID=12 and ProjectID=34.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/querying/README.md#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ncurl http://localhost:9428/select/logsql/query -H 'AccountID: 12' -H 'ProjectID: 34' -d 'query=error'\n```\n\n----------------------------------------\n\nTITLE: Computing Multiple Histogram Quantiles - PromQL - PromQL\nDESCRIPTION: histogram_quantiles() calculates several quantiles (provided as phi1...phiN) for the provided histogram buckets, labeling them with the specified phiLabel. Each quantile is returned in a separate time series. All numerical phi* arguments must be within [0...1]. Input buckets must be compatible. No extra dependencies.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_103\n\nLANGUAGE: PromQL\nCODE:\n```\n`histogram_quantiles(\"phiLabel\", phi1, ..., phiN, buckets)`\n```\n\n----------------------------------------\n\nTITLE: Migrating Data Using Prometheus Remote Read API\nDESCRIPTION: This shell script snippet showcases how to migrate data from remote databases to VictoriaMetrics using `vmctl` in `remote-read` mode. It highlights important configuration flags such as data source address (`--remote-read-src-addr`), VictoriaMetrics address (`--vm-addr`), and time filters (`--remote-read-filter-time-start` and `--remote-read-filter-time-end`). The script processes data in chunks and provides progress and performance statistics upon completion.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmctl.md#2025-04-22_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\n./vmctl remote-read \\\n--remote-read-src-addr=http://<prometheus>:9091 \\\n--remote-read-filter-time-start=2021-10-18T00:00:00Z \\\n--remote-read-step-interval=hour \\\n--vm-addr=http://<victoria-metrics>:8428 \\\n--vm-concurrency=6\n\nSplit defined times into 8798 ranges to import. Continue? [Y/n]\nVM worker 0:↘ 127177 samples/s\nVM worker 1:↘ 140137 samples/s\nVM worker 2:↘ 151606 samples/s\nVM worker 3:↘ 130765 samples/s\nVM worker 4:↘ 131904 samples/s\nVM worker 5:↘ 132693 samples/s\nProcessing ranges: 8798 / 8798 [██████████████████████████████████████████████████████████████████████████████████████] 100.00%\n2022/10/19 16:45:37 Import finished!\n2022/10/19 16:45:37 VictoriaMetrics importer stats:\n  idle duration: 6m57.793987511s;\n  time spent while importing: 1m18.463744801s;\n  total samples: 25348208;\n  samples/s: 323056.31;\n  total bytes: 669.7 MB;\n  bytes/s: 8.5 MB;\n  import requests: 127;\n  import requests retries: 0;\n2022/10/19 16:45:37 Total time: 1m19.406283424s\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Multi-Tenant Rules in YAML\nDESCRIPTION: Defines rule groups for different tenants in VictoriaMetrics' vmalert configuration. This YAML configuration is used to specify tenant-specific rules where the 'tenant' field denotes the applicable account or project IDs. Requires enterprise version with `-clusterMode` enabled.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmalert.md#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\ngroups:\n- name: rules_for_tenant_456:789\n  params:\n     extra_label: [vm_account_id=456,vm_project_id=789]\n  rules:\n    # Rules for accountID=456, projectID=789\n```\n\nLANGUAGE: yaml\nCODE:\n```\ngroups:\n- name: rules_for_tenant_123\n  tenant: \"123\"\n  rules:\n    # Rules for accountID=123\n\n- name: rules_for_tenant_456:789\n  tenant: \"456:789\"\n  rules:\n    # Rules for accountID=456, projectID=789\n```\n\n----------------------------------------\n\nTITLE: IPv4 Range Filter in LogsQL\nDESCRIPTION: Shows how to filter IPv4 addresses using specific ranges or CIDR notation. Supports both individual IP addresses and IP ranges.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_70\n\nLANGUAGE: logsql\nCODE:\n```\nuser.ip:ipv4_range(127.0.0.0, 127.255.255.255)\n```\n\nLANGUAGE: logsql\nCODE:\n```\nuser.ip:ipv4_range(\"127.0.0.0/8\")\n```\n\nLANGUAGE: logsql\nCODE:\n```\nuser.ip:ipv4_range(\"1.2.3.4\")\n```\n\n----------------------------------------\n\nTITLE: Configuration Options for PubSub Producer in VictoriaMetrics Enterprise\nDESCRIPTION: Command-line flags available for configuring PubSub producer settings in the enterprise version of vmagent. These flags control batch publishing behavior, credentials, timeouts, and message buffering.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmagent.md#2025-04-22_snippet_53\n\nLANGUAGE: sh\nCODE:\n```\n  -gcp.pubsub.publish.byteThreshold int\n        Publish a batch when its size in bytes reaches this value. See https://docs.victoriametrics.com/vmagent/#writing-metrics-to-pubsub . This flag is available only in Enterprise binaries. See https://docs.victoriametrics.com/enterprise/ (default 1000000)\n  -gcp.pubsub.publish.countThreshold int\n        Publish a batch when it has this many messages. See https://docs.victoriametrics.com/vmagent/#writing-metrics-to-pubsub . This flag is available only in Enterprise binaries. See https://docs.victoriametrics.com/enterprise/ (default 100)\n  -gcp.pubsub.publish.credentialsFile string\n        Path to file with GCP credentials to use for PubSub client. If not set, default credentials will be used (see Workload Identity for K8S or https://cloud.google.com/docs/authentication/application-default-credentials). See https://docs.victoriametrics.com/vmagent/#writing-metrics-to-pubsub . This flag is available only in Enterprise binaries. See https://docs.victoriametrics.com/enterprise/\n  -gcp.pubsub.publish.delayThreshold value\n        Publish a non-empty batch after this delay has passed. See https://docs.victoriametrics.com/vmagent/#writing-metrics-to-pubsub . This flag is available only in Enterprise binaries. See https://docs.victoriametrics.com/enterprise/\n        The following optional suffixes are supported: s (second), h (hour), d (day), w (week), y (year). If suffix isn't set, then the duration is counted in months (default 10ms)\n  -gcp.pubsub.publish.maxOutstandingBytes int\n        The maximum size of buffered messages to be published. If less than or equal to zero, this is disabled. See https://docs.victoriametrics.com/vmagent/#writing-metrics-to-pubsub . This flag is available only in Enterprise binaries. See https://docs.victoriametrics.com/enterprise/ (default -1)\n  -gcp.pubsub.publish.maxOutstandingMessages int\n        The maximum number of buffered messages to be published. If less than or equal to zero, this is disabled. See https://docs.victoriametrics.com/vmagent/#writing-metrics-to-pubsub . This flag is available only in Enterprise binaries. See https://docs.victoriametrics.com/enterprise/ (default 100)\n  -gcp.pubsub.publish.timeout value\n        The maximum time that the client will attempt to publish a bundle of messages. See https://docs.victoriametrics.com/vmagent/#writing-metrics-to-pubsub . This flag is available only in Enterprise binaries. See https://docs.victoriametrics.com/enterprise/\n        The following optional suffixes are supported: s (second), h (hour), d (day), w (week), y (year). If suffix isn't set, then the duration is counted in months (default 60s)\n```\n\n----------------------------------------\n\nTITLE: Fluentbit Configuration with Compression for VictoriaLogs\nDESCRIPTION: Fluentbit configuration with gzip compression enabled to reduce network bandwidth usage when sending logs to VictoriaLogs. This is particularly useful for cross-datacenter data transmission and can reduce network costs by up to 5 times.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/data-ingestion/Fluentbit.md#2025-04-22_snippet_3\n\nLANGUAGE: fluentbit\nCODE:\n```\n[Output]\n     Name http\n     Match *\n     host localhost\n     port 9428\n     uri /insert/jsonline?_stream_fields=stream&_msg_field=log&_time_field=date\n     format json_lines\n     json_date_format iso8601\n     compress gzip\n```\n\n----------------------------------------\n\nTITLE: Selecting Metrics using Graphite Filter Syntax in MetricsQL\nDESCRIPTION: Demonstrates how to use Graphite-compatible wildcard patterns within a MetricsQL label selector to filter time series. The `__graphite__` pseudo-label allows matching metric names based on Graphite's dot-separated hierarchy and wildcard syntax.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_0\n\nLANGUAGE: MetricsQL\nCODE:\n```\n{__graphite__=\"foo.*.bar\"}\n```\n\n----------------------------------------\n\nTITLE: Stats Calculation with Default Field Names in LogsQL\nDESCRIPTION: This query calculates the same stats as the previous example but uses default field names based on the stats functions used.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_137\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m | count(), count_uniq(_stream)\n```\n\n----------------------------------------\n\nTITLE: Estimating Time To Full (TTF) in MetricsQL\nDESCRIPTION: A transform function that estimates the time in seconds until a resource measured by `free` is exhausted. For example, `ttf(node_filesystem_avail_byte)` estimates time until disk space runs out. Useful for capacity planning.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_136\n\nLANGUAGE: metricsql\nCODE:\n```\nttf(free)\n```\n\n----------------------------------------\n\nTITLE: Range Filter in LogsQL\nDESCRIPTION: Demonstrates numeric range filtering with inclusive and exclusive bounds. Useful for filtering numeric fields with specific value ranges.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_69\n\nLANGUAGE: logsql\nCODE:\n```\nrequest.duration:range(4.2, Inf)\n```\n\nLANGUAGE: logsql\nCODE:\n```\nrequest.duration:>4.2\n```\n\n----------------------------------------\n\nTITLE: Concatenating String Literals with WITH Templates (MetricsQL)\nDESCRIPTION: Shows how string literals can be concatenated using the `+` operator in MetricsQL, often used in conjunction with `WITH` templates for constructing metric or label names dynamically. This example defines a common prefix and appends different suffixes.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_23\n\nLANGUAGE: MetricsQL\nCODE:\n```\nWITH (commonPrefix=\"long_metric_prefix_\") {__name__=commonPrefix+\"suffix1\"} / {__name__=commonPrefix+\"suffix2\"}\n```\n\n----------------------------------------\n\nTITLE: Calculating Z-Score Over Range - MetricsQL (English)\nDESCRIPTION: The `range_zscore(q)` function computes the z-score for each point in every time series, as standardized by each series’ mean and standard deviation. Useful for normalization, outlier detection, and advanced statistical analysis.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/MetricsQL.md#2025-04-22_snippet_97\n\nLANGUAGE: MetricsQL\nCODE:\n```\n`range_zscore(q)`\n```\n\n----------------------------------------\n\nTITLE: Trimming Outliers Based on MAD - MetricsQL (English)\nDESCRIPTION: The `range_trim_outliers(k, q)` function removes points from each series where the value lies more than `k` times that series’ MAD away from its median. Useful for excluding extreme outliers before further analysis.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/MetricsQL.md#2025-04-22_snippet_94\n\nLANGUAGE: MetricsQL\nCODE:\n```\n`range_trim_outliers(k, q)`\n```\n\n----------------------------------------\n\nTITLE: Stale Samples Counter in PromQL\nDESCRIPTION: Counts staleness markers over a time window for each matching time series.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_65\n\nLANGUAGE: PromQL\nCODE:\n```\nstale_samples_over_time(series_selector[d])\n```\n\n----------------------------------------\n\nTITLE: Bitwise OR Transformation for Time Series with VictoriaMetrics PromQL\nDESCRIPTION: The bitmap_or function applies a bitwise OR between each value v from the query q and the integer mask value. Metric names are stripped unless overridden with keep_metric_names. Inputs include a time series and mask; outputs are per-point OR results.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_83\n\nLANGUAGE: PromQL\nCODE:\n```\n`bitmap_or(q, mask)`\n```\n\n----------------------------------------\n\nTITLE: Retrieving Data from VMGateway with JWT Token\nDESCRIPTION: cURL command demonstrating how to access the VictoriaMetrics API through vmgateway using a valid JWT token.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmgateway.md#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ncurl 'http://localhost:8431/api/v1/series/count' -H 'Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ2bV9hY2Nlc3MiOnsidGVuYW50X2lkIjp7fSwicm9sZSI6MX0sImV4cCI6MTkzOTM0NjIxMH0.5WUxEfdcV9hKo4CtQdtuZYOGpGXWwaqM9VuVivMMrVg'\n```\n\n----------------------------------------\n\nTITLE: Summing Values Less Than or Equal to Threshold Over Time in VictoriaMetrics\nDESCRIPTION: The sum_le_over_time function calculates the sum of raw sample values less than or equal to a specified threshold over a given time window for each time series returned by the selector.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/MetricsQL.md#2025-04-22_snippet_66\n\nLANGUAGE: metricsql\nCODE:\n```\nsum_le_over_time(series_selector[d], le)\n```\n\n----------------------------------------\n\nTITLE: Starting Loki Benchmark Suite using Make and Docker Compose\nDESCRIPTION: This shell command uses `make` to execute the `docker-up-loki` target. This target utilizes `docker-compose` with `docker-compose.yml` and `docker-compose-loki.yml` to launch the services required for the Loki vs. VictoriaLogs benchmark, including the log generator, rsyslog, Promtail, Loki, VictoriaLogs, and monitoring components.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/deployment/logs-benchmark/readme.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n```shell\n   make docker-up-loki\n   ```\n```\n\n----------------------------------------\n\nTITLE: Configuring VictoriaMetrics Reader in YAML\nDESCRIPTION: Example YAML configuration for setting up a VictoriaMetrics reader. It includes settings for the datasource URL, tenant ID, timezone, data range, and a sample query for ingestion rate.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/anomaly-detection/components/reader.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nreader:\n  class: \"vm\"  # or \"reader.vm.VmReader\" until v1.13.0\n  datasource_url: \"https://play.victoriametrics.com/\"\n  tenant_id: '0:0'\n  tz: 'America/New_York'\n  data_range: [1, 'inf']  # reader-level\n  queries:\n    ingestion_rate:\n      expr: 'sum(rate(vm_rows_inserted_total[5m])) by (type) > 0'\n      step: '1m' # can override reader-level `sampling_period` on per-query level\n      data_range: [0, 'inf']  # if set, overrides reader-level data_range\n```\n\n----------------------------------------\n\nTITLE: Using Compiled QuickTemplate in Go\nDESCRIPTION: Example Go code that imports and uses compiled QuickTemplate functions to generate output strings.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/valyala/quicktemplate/README.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"./templates\"\n)\n\nfunc main() {\n\tfmt.Printf(\"%s\\n\", templates.Hello(\"Foo\"))\n\tfmt.Printf(\"%s\\n\", templates.Hello(\"Bar\"))\n}\n```\n\n----------------------------------------\n\nTITLE: Fluentbit Configuration with Debugging Enabled for VictoriaLogs\nDESCRIPTION: Fluentbit configuration with debugging enabled to verify correct log field mapping. The debug=1 parameter in the URI allows inspecting how VictoriaLogs processes the incoming data, which helps validate stream fields and log structure.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/data-ingestion/Fluentbit.md#2025-04-22_snippet_1\n\nLANGUAGE: fluentbit\nCODE:\n```\n[Output]\n     Name http\n     Match *\n     host localhost\n     port 9428\n     uri /insert/jsonline?_stream_fields=stream&_msg_field=log&_time_field=date&debug=1\n     format json_lines\n     json_date_format iso8601\n```\n\n----------------------------------------\n\nTITLE: Using Unicode Characters in Metric and Label Names in MetricsQL\nDESCRIPTION: Illustrates that MetricsQL supports using any Unicode letters in metric names and label names, allowing for internationalized naming conventions. The example shows Georgian, Greek, and Cyrillic characters.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_17\n\nLANGUAGE: metricsql\nCODE:\n```\nტემპერატურა{πόλη=\"Київ\"}\n```\n\n----------------------------------------\n\nTITLE: Using the Glob Function with io/fs.FS in Go\nDESCRIPTION: This function signature defines `doublestar.Glob`. It operates on an `fs.FS` filesystem abstraction and returns a slice of strings representing all names matching the `pattern`. It accepts optional `GlobOption` arguments like `WithFailOnIOErrors`. By default, it ignores I/O errors and assumes `/` as the path separator, similar to `io/fs.Glob`. Returns `doublestar.ErrBadPattern` for malformed patterns. Patterns with `/./`, `/../` or starting with `/` yield no results.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/bmatcuk/doublestar/v4/README.md#2025-04-22_snippet_12\n\nLANGUAGE: go\nCODE:\n```\nfunc Glob(fsys fs.FS, pattern string, opts ...GlobOption) ([]string, error)\n```\n\n----------------------------------------\n\nTITLE: Dropping Input Labels Before Stream Aggregation - VictoriaMetrics (YAML)\nDESCRIPTION: Shows how to drop specific labels (here, 'replica') from input samples with a particular metric name prior to stream aggregation and calculation in VictoriaMetrics using YAML configuration. Uses 'match' to filter the metric name, 'drop_input_labels' to specify labels to remove, 'interval' for aggregation duration, 'outputs' for the aggregation type, and 'keep_metric_names' to retain the original metric name. Output metrics will not include the dropped labels and will provide an average over the interval.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/stream-aggregation.md#2025-04-22_snippet_40\n\nLANGUAGE: yaml\nCODE:\n```\n- match: process_resident_memory_bytes\\n  interval: 1m\\n  drop_input_labels: [replica]\\n  outputs: [avg]\\n  keep_metric_names: true\n```\n\n----------------------------------------\n\nTITLE: Running vmagent for Prometheus Target Scraping\nDESCRIPTION: Command for configuring vmagent to scrape Prometheus targets according to a prometheus.yml configuration file and forward the collected metrics to a VictoriaMetrics instance.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmagent.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n/path/to/vmagent -promscrape.config=/path/to/prometheus.yml -remoteWrite.url=https://victoria-metrics-host:8428/api/v1/write\n```\n\n----------------------------------------\n\nTITLE: Calculating Linear Regression with range_linear_regression in MetricsQL\nDESCRIPTION: Introduces the `range_linear_regression` MetricsQL function. It calculates a simple linear regression over the input time series for the selected time range, useful for predictions and capacity planning.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/changelog/CHANGELOG_2022.md#2025-04-22_snippet_9\n\nLANGUAGE: metricsql\nCODE:\n```\nrange_linear_regression\n```\n\n----------------------------------------\n\nTITLE: Using tlast_change_over_time in VictoriaMetrics Syntax - plaintext\nDESCRIPTION: tlast_change_over_time provides the timestamp of the last value change within the window for each series. Requires a proper series selector and lookbehind period. Returns a timestamp; metric names are not included in the output unless a modifier is used.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_60\n\nLANGUAGE: plaintext\nCODE:\n```\n`tlast_change_over_time(series_selector[d])`\n```\n\n----------------------------------------\n\nTITLE: Refactoring NewChainedTokenCredential in Go\nDESCRIPTION: This snippet demonstrates the updated usage of `NewChainedTokenCredential` after its signature change, reflecting the move to pass credentials as a slice and include a placeholder for options. This change requires the azcore package for token credential constructs.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/Azure/azure-sdk-for-go/sdk/azidentity/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// before\n  cred, err := NewChainedTokenCredential(credA, credB)\n\n  // after\n  cred, err := NewChainedTokenCredential([]azcore.TokenCredential{credA, credB}, nil)\n```\n\n----------------------------------------\n\nTITLE: Configuring Prometheus for Multiple Remote Write Targets (yaml)\nDESCRIPTION: This YAML snippet provides an example of configuring Prometheus's \\\"remote_write\\\" section to replicate metrics to two VictoriaMetrics instances for redundancy. Dependencies include a running Prometheus and reachable VictoriaMetrics servers at the provided URLs. Each item in the \\\"remote_write\\\" array points to a separate ingestion endpoint, enabling fail-over and duplicate storage of all scraped data. The configuration is placed within the Prometheus config file, with the URLs adjusted to match real server addresses.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/README.md#2025-04-22_snippet_66\n\nLANGUAGE: yaml\nCODE:\n```\nremote_write:\n  - url: http://<vm-az1>:8428/api/v1/write\n  - url: http://<vm-az2>:8428/api/v1/write\n```\n\n----------------------------------------\n\nTITLE: Stream Context Query Examples\nDESCRIPTION: Demonstrates various stream context queries for retrieving surrounding log entries with different time windows and directions.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_145\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m panic | stream_context after 10\n```\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m stacktrace | stream_context before 5\n```\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m error | stream_context before 2 after 5\n```\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m error | stream_context before 10 time_window 1w\n```\n\n----------------------------------------\n\nTITLE: Configuring vmanomaly Reader and Model with Timezone Support in YAML\nDESCRIPTION: This YAML configuration snippet demonstrates how to set up the vmanomaly service's 'reader' and 'models' sections with support for timezone handling. Required dependencies and prerequisites include an operational VictoriaMetrics instance and the vmanomaly service (enterprise package), as well as knowledge of specific query expressions and timezone identifiers. The example sets a default timezone at the global reader level and shows how to override it on a per-query basis; it further assigns a Prophet-based model to the query. Key parameters are 'datasource_url', global and per-query 'tz' (timezone), and model specifications. Inputs include the target metric and time series queries, while outputs are used for anomaly detection and scoring. This snippet is intended for use in vmanomaly's YAML config files and must be adapted for real deployment environments.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/anomaly-detection/FAQ.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nreader:\\n  datasource_url: 'your_victoriametrics_url'\\n  tz: 'America/New_York'  # global setting for all queries\\n  queries:\\n    your_query:\\n      expr: 'avg(your_metric)'\\n      tz: 'Europe/London'  # per-query override\\nmodels:\\n  seasonal_model:\\n    class: 'prophet'\\n    queries: ['your_query']\\n    # other model params ...\\n\n```\n\n----------------------------------------\n\nTITLE: Estimating Average Remote Write Block Size using MetricsQL - MetricsQL\nDESCRIPTION: This query estimates the average size of compressed blocks sent by vmagent's remote write by dividing total bytes written per second by the number of requests (both rates over a 1-minute window). It helps approximate the average Kafka message size if using the same compression and protocol. MetricsQL dependencies only; both relevant metrics are summed and divided to produce a bytes-per-request value.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmagent.md#2025-04-22_snippet_60\n\nLANGUAGE: metricsql\nCODE:\n```\nsum(rate(vmagent_remotewrite_conn_bytes_written_total{}[1m]))\n / \nsum(rate(vmagent_remotewrite_requests_total{}[1m])) \n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Service Discovery in YAML\nDESCRIPTION: Configuration example for HTTP-based service discovery that fetches targets from a specified URL endpoint. Includes URL configuration and additional HTTP client options.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/sd_configs.md#2025-04-22_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nscrape_configs:\n- job_name: http\n  http_sd_configs:\n\n    # url must contain the URL from which the targets are fetched.\n    #\n  - url: \"http://...\"\n\n    # Additional HTTP API client options can be specified here.\n    # See https://docs.victoriametrics.com/sd_configs/#http-api-client-options\n```\n\n----------------------------------------\n\nTITLE: Failed Backup Creation API Response (JSON)\nDESCRIPTION: Example JSON body returned by the `POST /api/v1/backups` endpoint when a backup creation fails, typically because another backup with the same name is already in progress. It returns a JSON object containing an error message with a 400 status code.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmbackupmanager.md#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n    {\"error\": \"backups <name> is in progress\"}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring vmagent Remote Write Retry Policy (Command-line)\nDESCRIPTION: Introduces command-line flags for `vmagent` to adjust the retry policy for failed remote write requests. `-remoteWrite.retryMinInterval` sets the minimum wait time, and `-remoteWrite.retryMaxTime` sets the maximum total time spent retrying.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/changelog/CHANGELOG_2024.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n-remoteWrite.retryMinInterval duration # e.g., 1s\n-remoteWrite.retryMaxTime duration   # e.g., 60s\n```\n\n----------------------------------------\n\nTITLE: Starting First vlstorage Node\nDESCRIPTION: Command to start the first vlstorage node, listening on port 9491 and storing data in victoria-logs-data-1 directory.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/cluster.md#2025-04-22_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\n./victoria-logs-prod -httpListenAddr=:9491 -storageDataPath=victoria-logs-data-1 &\n```\n\n----------------------------------------\n\nTITLE: Running Benchmark Tests for fastcache and Alternatives in Go\nDESCRIPTION: This snippet shows how to execute Go benchmark tests to compare the performance (inserts, gets, set+get) of fastcache, BigCache, the standard Go map, and sync.Map on a multicore (4-core) environment. The command sets the GOMAXPROCS to 4 to utilize all CPU cores and runs benchmarks matching the 'Set' or 'Get' keywords with a runtime of 10 seconds per test. Outputs include operation latency, throughput, memory allocations, and bytes allocated per operation. Requires Go toolchain and the fastcache package source.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/VictoriaMetrics/fastcache/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nGOMAXPROCS=4 go test github.com/VictoriaMetrics/fastcache -bench='Set|Get' -benchtime=10s\ngoos: linux\ngoarch: amd64\npkg: github.com/VictoriaMetrics/fastcache\nBenchmarkBigCacheSet-4       \\t    2000\\t  10566656 ns/op\\t   6.20 MB/s\\t 4660369 B/op\\t       6 allocs/op\nBenchmarkBigCacheGet-4       \\t    2000\\t   6902694 ns/op\\t   9.49 MB/s\\t  684169 B/op\\t  131076 allocs/op\nBenchmarkBigCacheSetGet-4    \\t    1000\\t  17579118 ns/op\\t   7.46 MB/s\\t 5046744 B/op\\t  131083 allocs/op\nBenchmarkCacheSet-4          \\t    5000\\t   3808874 ns/op\\t  17.21 MB/s\\t    1142 B/op\\t       2 allocs/op\nBenchmarkCacheGet-4          \\t    5000\\t   3293849 ns/op\\t  19.90 MB/s\\t    1140 B/op\\t       2 allocs/op\nBenchmarkCacheSetGet-4       \\t    2000\\t   8456061 ns/op\\t  15.50 MB/s\\t    2857 B/op\\t       5 allocs/op\nBenchmarkStdMapSet-4         \\t    2000\\t  10559382 ns/op\\t   6.21 MB/s\\t  268413 B/op\\t   65537 allocs/op\nBenchmarkStdMapGet-4         \\t    5000\\t   2687404 ns/op\\t  24.39 MB/s\\t    2558 B/op\\t      13 allocs/op\nBenchmarkStdMapSetGet-4      \\t     100\\t 154641257 ns/op\\t   0.85 MB/s\\t  387405 B/op\\t   65558 allocs/op\nBenchmarkSyncMapSet-4        \\t     500\\t  24703219 ns/op\\t   2.65 MB/s\\t 3426543 B/op\\t  262411 allocs/op\nBenchmarkSyncMapGet-4        \\t    5000\\t   2265892 ns/op\\t  28.92 MB/s\\t    2545 B/op\\t      79 allocs/op\nBenchmarkSyncMapSetGet-4     \\t    1000\\t  14595535 ns/op\\t   8.98 MB/s\\t 3417190 B/op\\t  262277 allocs/op\n```\n\n----------------------------------------\n\nTITLE: Rate Sum Stats Function in LogsQL\nDESCRIPTION: Shows how to calculate the average per-second rate of sums over numeric fields.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_192\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m | stats rate_sum(bytes_sent)\n```\n\n----------------------------------------\n\nTITLE: Configuring Per-Tenant Authorization and Routing in vmauth (YAML)\nDESCRIPTION: Demonstrates multi-tenant routing using Basic Auth credentials in `vmauth`. It defines two users, `tenant1` and `tenant2`. Based on the user and the request path (`src_paths`), requests are routed to different backend URLs corresponding to specific tenants (tenant `1` or tenant `2`) in a VictoriaMetrics cluster (vminsert/vmselect).\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmauth.md#2025-04-22_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nusers:\n- username: tenant1\n  password: \"***\"\n  url_map:\n  - src_paths:\n    - \"/api/v1/write\"\n    url_prefix: \"http://vminsert-backend:8480/insert/1/prometheus/\"\n  - src_paths:\n    - \"/api/v1/query\"\n    - \"/api/v1/query_range\"\n    - \"/api/v1/series\"\n    - \"/api/v1/labels\"\n    - \"/api/v1/label/.+/values\"\n    url_prefix: \"http://vmselect-backend:8481/select/1/prometheus/\"\n- username: tenant2\n  password: \"***\"\n  url_map:\n  - src_paths:\n    - \"/api/v1/write\"\n    url_prefix: \"http://vminsert-backend:8480/insert/2/prometheus/\"\n  - src_paths:\n    - \"/api/v1/query\"\n    - \"/api/v1/query_range\"\n    - \"/api/v1/series\"\n    - \"/api/v1/labels\"\n    - \"/api/v1/label/.+/values\"\n    url_prefix: \"http://vmselect-backend:8481/select/2/prometheus/\"\n```\n\n----------------------------------------\n\nTITLE: Running Cluster-to-Cluster Migration with vmctl\nDESCRIPTION: Command example for migrating data between VictoriaMetrics clusters using the intercluster mode. This command migrates specific metrics between source and destination clusters with time filtering.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmctl.md#2025-04-22_snippet_20\n\nLANGUAGE: sh\nCODE:\n```\n./vmctl vm-native --vm-native-src-addr=http://127.0.0.1:8481/ \\\n  --vm-native-dst-addr=http://127.0.0.1:8480/ \\\n  --vm-native-filter-match='{__name__=\"vm_app_uptime_seconds\"}' \\\n  --vm-native-filter-time-start='2023-02-01T00:00:00Z' \\\n  --vm-native-step-interval=day \\\n  --vm-intercluster\n```\n\n----------------------------------------\n\nTITLE: Configuring vmbackupmanager API Endpoint via CLI Flag (Shell)\nDESCRIPTION: Shows the `-apiURL` flag used with `vmbackupmanager` CLI commands to specify the address of the vmbackupmanager API endpoint. The default value is `http://127.0.0.1:8300`.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmbackupmanager.md#2025-04-22_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\n-apiURL string\n      vmbackupmanager address to perform API requests (default \"http://127.0.0.1:8300\")\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Consul Service Discovery in YAML\nDESCRIPTION: YAML configuration snippet for setting up Consul service discovery and relabeling in vmagent to convert Consul service tags to target labels.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/changelog/CHANGELOG_2022.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n- action: labelmap\n  regex: __meta_consul_tag_(.+)\n```\n\n----------------------------------------\n\nTITLE: Inverse Hyperbolic Cosine Transformation with VictoriaMetrics PromQL\nDESCRIPTION: The acosh function calculates the inverse hyperbolic cosine for every point of the query q. This transform function strips metric names unless keep_metric_names is used. Fully supported in PromQL, it takes a numeric time series as input and returns their acosh values.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_77\n\nLANGUAGE: PromQL\nCODE:\n```\n`acosh(q)`\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Host Header in vmauth (YAML)\nDESCRIPTION: YAML configuration snippet for `vmauth` demonstrating how to set a specific `Host` header (`Host: foobar`) when proxying requests to a backend. This is achieved using the `headers` option within the `unauthorized_user` section of the `-auth.config` file.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmauth.md#2025-04-22_snippet_32\n\nLANGUAGE: yaml\nCODE:\n```\nunauthorized_user:\n  url_prefix: \"http://backend:1234/\"\n  headers:\n  - \"Host: foobar\"\n\n```\n\n----------------------------------------\n\nTITLE: Using Time-Based Chunking for VictoriaMetrics Migration\nDESCRIPTION: This shell script illustrates the use of time-based chunking during the data migration process between VictoriaMetrics instances. The --vm-native-step-interval flag is utilized to chunk the migration based on a specified time period such as a month, reducing load and handling large datasets efficiently. It requires vmctl installed and network access to source and destination VM instances.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmctl.md#2025-04-22_snippet_19\n\nLANGUAGE: shell\nCODE:\n```\n./vmctl vm-native \\\n    --vm-native-src-addr=http://127.0.0.1:8481/select/0/prometheus \\ \n    --vm-native-dst-addr=http://localhost:8428 \\\n    --vm-native-filter-time-start='2022-11-20T00:00:00Z' \\\n    --vm-native-step-interval=month \\\n    --vm-native-filter-match='{__name__!~\"vm_.*\"}'    \nVictoriaMetrics Native import mode\n\n2023/03/02 09:18:05 Initing import process from \"http://127.0.0.1:8481/select/0/prometheus/api/v1/export/native\" to \"http://localhost:8428/api/v1/import/native\" with filter \n        filter: match[]={__name__!~\"vm_.*\"}\n        start: 2022-11-20T00:00:00Z\n2023/03/02 09:18:05 Exploring metrics...\nFound 9 metrics to import. Continue? [Y/n] \n2023/03/02 09:18:07 Selected time range will be split into 5 ranges according to \"month\" step. Requests to make: 45.\nRequests to make: 45 / 45 [██████████████████████████████████████████████████████████████████████████████████] 100.00%\n2023/03/02 09:18:12 Import finished!\n2023/03/02 09:18:12 VictoriaMetrics importer stats:\n  time spent while importing: 7.111870667s;\n  total bytes: 7.7 MB;\n  bytes/s: 1.1 MB;\n  requests: 45;\n  requests retries: 0;\n2023/03/02 09:18:12 Total time: 7.112405875s\n```\n\n----------------------------------------\n\nTITLE: LogsQL Field Search Query Examples\nDESCRIPTION: Demonstrates the difference between searching in a dedicated field versus searching in log messages. Using dedicated fields for search is typically more efficient than searching within message content.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/keyConcepts.md#2025-04-22_snippet_8\n\nLANGUAGE: logsql\nCODE:\n```\ntrace_id:=\"XXXX-YYYY-ZZZZ\"\n```\n\nLANGUAGE: logsql\nCODE:\n```\n_msg:\"trace_id=XXXX-YYYY-ZZZZ\"\n```\n\n----------------------------------------\n\nTITLE: Importing Prometheus Exposition Format Data using Shell\nDESCRIPTION: Imports a single metric line in Prometheus text exposition format (`foo{bar=\"baz\"} 123`) into VictoriaMetrics via a POST request to the `/api/v1/import/prometheus` endpoint. If no timestamp is provided in the line, the current time is used unless overridden by the `timestamp` query parameter. Requires `curl`.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/README.md#2025-04-22_snippet_56\n\nLANGUAGE: sh\nCODE:\n```\ncurl -d 'foo{bar=\"baz\"} 123' -X POST 'http://localhost:8428/api/v1/import/prometheus'\n```\n\n----------------------------------------\n\nTITLE: Simplified Multiple Stats Calculation in LogsQL\nDESCRIPTION: This query demonstrates a simplified syntax for calculating multiple stats (log count and unique stream count) for the last 5 minutes.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_136\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m | count() logs_total, count_uniq(_stream) streams_total\n```\n\n----------------------------------------\n\nTITLE: Configuring vlstorage with TLS and Basic Authentication\nDESCRIPTION: Command for configuring a vlstorage node with both TLS encryption and Basic Authentication. This provides both encryption and authentication for secure communications between cluster components.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/cluster.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n./victoria-logs-prod -httpListenAddr=... -storageDataPath=... -tls -tlsCertFile=... -tlsKeyFile=... -httpAuth.username=... -httpAuth.password=...\n```\n\n----------------------------------------\n\nTITLE: Example Output Metrics for Aggregated Histogram Buckets in VictoriaMetrics Text\nDESCRIPTION: Displays the structure of metrics resulting from aggregating existing histogram buckets using the `rate_sum` output over a 5m interval and removing the `instance` label. The metrics include the original bucket name, the aggregation details (`5m_without_instance_rate_sum`), and the original histogram bucket label (`le`).\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/stream-aggregation.md#2025-04-22_snippet_13\n\nLANGUAGE: text\nCODE:\n```\nhttp_request_duration_seconds_bucket:5m_without_instance_rate_sum{le=\"0.1\"}  value1\nhttp_request_duration_seconds_bucket:5m_without_instance_rate_sum{le=\"0.2\"}  value2\nhttp_request_duration_seconds_bucket:5m_without_instance_rate_sum{le=\"0.4\"}  value3\nhttp_request_duration_seconds_bucket:5m_without_instance_rate_sum{le=\"1\"}    value4\nhttp_request_duration_seconds_bucket:5m_without_instance_rate_sum{le=\"3\"}    value5\nhttp_request_duration_seconds_bucket:5m_without_instance_rate_sum{le=\"+Inf\"} value6\n```\n\n----------------------------------------\n\nTITLE: Configuring vmselect with Global Replication Factor\nDESCRIPTION: Command to run vmselect with a global replication factor of 2, ensuring the system continues returning full responses if any single vmstorage group is temporarily unavailable.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/Cluster-VictoriaMetrics.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n/path/to/vmselect \\\n -globalReplicationFactor=2 \\\n -storageNode=g1/host1,g1/host2,g1/host3 \\\n -storageNode=g2/host4,g2/host5,g2/host6 \\\n -storageNode=g3/host7,g3/host8,g3/host9\n```\n\n----------------------------------------\n\nTITLE: Modifying vmauth Request Headers (YAML)\nDESCRIPTION: YAML configuration snippet for `vmauth` demonstrating how to set (`TenantID: foobar`, `AccountID: 1`, `ProjectID: 0`) and remove (`X-Forwarded-For:`) HTTP request headers before proxying requests to backends. It uses the `headers` option under both the `unauthorized_user` section and a specific user (`foo`) within the `users` list in the `-auth.config` file.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmauth.md#2025-04-22_snippet_29\n\nLANGUAGE: yaml\nCODE:\n```\nunauthorized_user:\n  url_prefix: \"http://backend:1234/\"\n  headers:\n  - \"TenantID: foobar\"\n  - \"X-Forwarded-For:\"\n\nusers:\n  - username: \"foo\"\n    password: \"bar\"\n    dump_request_on_errors: true\n    url_map:\n      - src_paths: [\"/select/.*\"]\n        headers:\n          - \"AccountID: 1\"\n          - \"ProjectID: 0\"\n        url_prefix:\n          - \"http://backend:9428/\"\n\n```\n\n----------------------------------------\n\nTITLE: Creating Recording Rules for Data Aggregation - YAML\nDESCRIPTION: This YAML snippet illustrates a recording rule configuration to aggregate data over a specified time interval. It uses the avg_over_time MetricsQL function to calculate average HTTP requests over a 5-minute interval and logs the output to configured remote-write storage. Such configurations enable downsampling and data aggregation.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmalert.md#2025-04-22_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\n- record: http_requests:avg5m\n  expr: avg_over_time(http_requests[5m])\n```\n\n----------------------------------------\n\nTITLE: Using DNS SRV for Backend Discovery in vmauth (YAML)\nDESCRIPTION: This YAML snippet shows how to leverage DNS SRV record lookups for backend discovery by prefixing the hostname in `url_prefix` with `srv+` and setting `discover_backend_ips: true`. vmauth will query the SRV record for `vmselect`, discover the associated hostnames and TCP ports, and load balance requests across these discovered backend addresses. This is useful for backends running on non-standard or dynamic ports.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmauth.md#2025-04-22_snippet_28\n\nLANGUAGE: yaml\nCODE:\n```\nunauthorized_user:\n  url_prefix: \"http://srv+vmselect/select/0/prometheus\"\n  discover_backend_ips: true\n```\n\n----------------------------------------\n\nTITLE: Launching vmagent Cluster for Distributed Scraping in Shell\nDESCRIPTION: These shell commands demonstrate how to start a cluster of two vmagent instances for distributed scraping. Each instance is configured with a unique member number and shared configuration file.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmagent.md#2025-04-22_snippet_38\n\nLANGUAGE: sh\nCODE:\n```\n/path/to/vmagent -promscrape.cluster.membersCount=2 -promscrape.cluster.memberNum=0 -promscrape.config=/path/to/config.yml ...\n/path/to/vmagent -promscrape.cluster.membersCount=2 -promscrape.cluster.memberNum=1 -promscrape.config=/path/to/config.yml ...\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Portable Map in Go\nDESCRIPTION: The `concurrent.Map` is introduced as a backport of `sync.Map` for Go versions prior to 1.9, enabling portable concurrent map operations. It allows storing key-value pairs and retrieving them with thread safety. This snippet demonstrates the creation of a map, storing an element, and retrieving it.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/modern-go/concurrent/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nm := concurrent.NewMap()\nm.Store(\"hello\", \"world\")\nelem, found := m.Load(\"hello\")\n// elem will be \"world\"\n// found will be true\n```\n\n----------------------------------------\n\nTITLE: Port-Forwarding VictoriaMetrics and VictoriaLogs Pods for Direct Ingestion - Shell\nDESCRIPTION: These kubectl port-forward commands expose the metrics and logs ingestion ports of VictoriaMetrics and VictoriaLogs pods to localhost, allowing direct ingestion from applications running outside the cluster.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/guides/getting-started-with-opentelemetry/README.md#2025-04-22_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\n# port-forward victoriametrics to ingest metrics\\nkubectl port-forward victoria-metrics-victoria-metrics-single-server-0 8428\\n# port-forward victorialogs to ingest logs\\nkubectl port-forward victoria-logs-victoria-logs-single-server-0 9428\n```\n\n----------------------------------------\n\nTITLE: Starting VictoriaLogs with TCP and UDP Syslog Ingestion\nDESCRIPTION: Configures VictoriaLogs to accept Syslog format logs on both TCP and UDP ports 514. This setup allows for flexible log ingestion methods.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/data-ingestion/syslog.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n./victoria-logs -syslog.listenAddr.tcp=:514 -syslog.listenAddr.udp=:514\n```\n\n----------------------------------------\n\nTITLE: Remote Write URL Configuration Example\nDESCRIPTION: Example configuration showing how to set up multiple remote write URLs with authentication and parameters.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmagent.md#2025-04-22_snippet_43\n\nLANGUAGE: bash\nCODE:\n```\n-remoteWrite.url=http://example-1:8428/prometheus/api/v1/write?foo=bar#baz\n-remoteWrite.url=http://user:pass@example-2:8428/prometheus/api/v1/write?qux=quux#quuz\n```\n\n----------------------------------------\n\nTITLE: Summing Equal Values Over Time in VictoriaMetrics\nDESCRIPTION: The sum_eq_over_time function calculates the sum of raw sample values equal to a specified value over a given time window for each time series returned by the selector.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/MetricsQL.md#2025-04-22_snippet_64\n\nLANGUAGE: metricsql\nCODE:\n```\nsum_eq_over_time(series_selector[d], eq)\n```\n\n----------------------------------------\n\nTITLE: Join Pipe Inner Join\nDESCRIPTION: Performs inner join between two queries, returning only matching results across both queries. Shows joining user stats present in both applications.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_107\n\nLANGUAGE: logsql\nCODE:\n```\n_time:1d {app=\"app1\"} | stats by (user) count() app1_hits\n  | join by (user) (\n    _time:1d {app=\"app2\"} | stats by (user) count() app2_hits\n  ) inner\n```\n\n----------------------------------------\n\nTITLE: High Availability Configuration\nDESCRIPTION: YAML configuration for vmauth to implement high availability with standby backends.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmauth.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nunauthorized_user:\n  url_prefix:\n  - \"http://victoria-metrics-main:8428/\"\n  - \"http://victoria-metrics-standby1:8428/\"\n  - \"http://victoria-metrics-standby2:8428/\"\n  load_balancing_policy: first_available\n```\n\n----------------------------------------\n\nTITLE: Defining Recording Rules for VictoriaLogs in YAML\nDESCRIPTION: Examples of recording rules using LogsQL for VictoriaLogs, including rules for counting requests across different environments and services.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/vmalert.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ngroups:\n  - name: RequestCount\n    type: vlogs\n    interval: 5m\n    rules:\n      - record: nginxRequestCount\n        expr: 'env: \"test\" AND service: \"nginx\" | stats count(*) as requests'\n        annotations:\n          description: \"Service nginx on env test accepted {{$labels.requests}} requests in the last 5 minutes\"\n      - record: prodRequestCount\n        expr: 'env: \"prod\" | stats by (service) count(*) as requests'\n        annotations:\n          description: \"Service {{$labels.service}} on env prod accepted {{$labels.requests}} requests in the last 5 minutes\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Replacement with Label Placeholders - YAML\nDESCRIPTION: This YAML snippet demonstrates defining a relabeling rule in VictoriaMetrics where the target label value is dynamically constructed using template placeholders referencing existing label values (e.g., {{instance}} and {{job}}). No additional dependencies are required other than VictoriaMetrics or any compatible Prometheus-style agent. The key parameter, 'replacement', utilizes placeholder variables to create composite label values. Input labels 'instance' and 'job' are interpolated to produce the output 'instance-job'. The snippet is intended for YAML-based relabeling configurations.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmagent.md#2025-04-22_snippet_23\n\nLANGUAGE: YAML\nCODE:\n```\n- target_label: \"instance-job\"\n  replacement: \"{{instance}}-{{job}}\"\n```\n\n----------------------------------------\n\nTITLE: Summing Values Over Time in VictoriaMetrics\nDESCRIPTION: The sum_over_time function calculates the sum of raw sample values over a specified time window for each time series returned by the given selector. This function is supported by PromQL.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/MetricsQL.md#2025-04-22_snippet_67\n\nLANGUAGE: metricsql\nCODE:\n```\nsum_over_time(series_selector[d])\n```\n\n----------------------------------------\n\nTITLE: Calculating Quantile Over Range - MetricsQL (English)\nDESCRIPTION: The `range_quantile(phi, q)` function calculates the `phi`-quantile for each series produced by `q`, where `phi` must be between 0 and 1. It outputs the corresponding quantile value for each series; useful for percentile analysis.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/MetricsQL.md#2025-04-22_snippet_90\n\nLANGUAGE: MetricsQL\nCODE:\n```\n`range_quantile(phi, q)`\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP API Client Options for VictoriaMetrics in YAML\nDESCRIPTION: This YAML configuration snippet demonstrates various HTTP API client options that can be used in scrape_configs and service discovery configurations. It includes settings for authentication, TLS, proxies, and other HTTP-related parameters.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/sd_configs.md#2025-04-22_snippet_28\n\nLANGUAGE: yaml\nCODE:\n```\n    # authorization is an optional `Authorization` header configuration.\n    #\n    # authorization:\n    #   type: \"...\"  # default: Bearer\n    #   credentials: \"...\"\n    #   credentials_file: \"...\"\n\n    # basic_auth is an optional HTTP basic authentication configuration.\n    #\n    # basic_auth:\n    #   username: \"...\"\n    #   username_file: \"...\"  # is mutually-exclusive with username\n    #   password: \"...\"\n    #   password_file: \"...\"  # is mutually-exclusive with password\n\n    # bearer_token is an optional Bearer token to send in every HTTP API request during service discovery.\n    #\n    # bearer_token: \"...\"\n\n    # bearer_token_file is an optional path to file with Bearer token to send\n    # in every HTTP API request during service discovery.\n    # The file is re-read every second, so its contents can be updated without the need to restart the service discovery.\n    #\n    # bearer_token_file: \"...\"\n\n    # oauth2 is an optional OAuth 2.0 configuration.\n    # See https://prometheus.io/docs/prometheus/latest/configuration/configuration/#oauth2\n    #\n    # oauth2:\n    #   ...\n\n    # tls_config is an optional TLS configuration.\n    # See https://prometheus.io/docs/prometheus/latest/configuration/configuration/#tls_config\n    #\n    # tls_config:\n    #   ...\n\n    # headers is an optional HTTP headers to pass with each request.\n    #\n    # headers:\n    # - \"HeaderName1: HeaderValue\"\n    # - \"HeaderNameN: HeaderValueN\"\n\n    # proxy_url is an optional URL for the proxy to use for HTTP API queries during service discovery.\n    #\n    # proxy_url: \"...\"\n\n    # proxy_authorization is an optional `Authorization` header config for the proxy_url.\n    #\n    # proxy_authorization:\n    #   type: \"...\"  # default: Bearer\n    #   credentials: \"...\"\n    #   credentials_file: \"...\"\n\n    # proxy_basic_auth is an optional HTTP basic authentication configuration for the proxy_url.\n    #\n    # proxy_basic_auth:\n    #   username: \"...\"\n    #   username_file: \"...\"  # is mutually-exclusive with username\n    #   password: \"...\"\n    #   password_file: \"...\"  # is mutually-exclusive with password\n\n    # proxy_bearer_token is an optional Bearer token to send to proxy_url.\n    #\n    # proxy_bearer_token: \"...\"\n\n    # proxy_bearer_token_file is an optional path to file with Bearer token to send to proxy_url.\n    # The file is re-read every second, so its contents can be updated without the need to restart the service discovery.\n    #\n    # proxy_bearer_token_file: \"...\"\n\n    # proxy_oauth2 is an optional OAuth 2.0 configuration for the proxy_url.\n    # See https://prometheus.io/docs/prometheus/latest/configuration/configuration/#oauth2\n    #\n    # proxy_oauth2:\n    #   ...\n\n    # proxy_tls_config is an optional TLS configuration for the proxy_url.\n    # See https://prometheus.io/docs/prometheus/latest/configuration/configuration/#tls_config\n    #\n    # proxy_tls_config:\n    #   ...\n\n    # proxy_headers is an optional HTTP headers to pass to the proxy_url.\n    #\n    # proxy_headers:\n    # - \"HeaderName1: HeaderValue\"\n    # - \"HeaderNameN: HeaderValueN\"\n\n    # follow_redirects can be used for disallowing HTTP redirects.\n    # By default HTTP redirects are followed.\n    #\n    # follow_redirects: false\n```\n\n----------------------------------------\n\nTITLE: Skipping Results with offset Pipe in LogSQL\nDESCRIPTION: The offset pipe skips a specified number of logs after sorting. This example skips the first 100 logs from the last 5 minutes after sorting them by _time.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_118\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m | sort by (_time) | offset 100\n```\n\n----------------------------------------\n\nTITLE: Bitwise XOR Transformation for Time Series with VictoriaMetrics PromQL\nDESCRIPTION: The bitmap_xor function applies a bitwise XOR to each value from the input time series q and provided mask parameter. By default, metric names are stripped unless keep_metric_names is specified. Both input and mask are required; outputs represent per-point XOR values. This is a custom VictoriaMetrics transform.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_84\n\nLANGUAGE: PromQL\nCODE:\n```\n`bitmap_xor(q, mask)`\n```\n\n----------------------------------------\n\nTITLE: Configuring Proxy Settings for vmagent Scraping in YAML\nDESCRIPTION: This YAML configuration demonstrates how to set up proxy settings for vmagent scraping. It includes various proxy options such as authorization, TLS configuration, and custom headers.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmagent.md#2025-04-22_snippet_41\n\nLANGUAGE: yaml\nCODE:\n```\nscrape_configs:\n- job_name: foo\n  proxy_url: https://proxy-addr:1234\n  proxy_basic_auth:\n    username: foobar\n    password: secret\n  proxy_tls_config:\n    insecure_skip_verify: true\n    cert_file: /path/to/cert\n    key_file: /path/to/key\n    ca_file: /path/to/ca\n    server_name: real-server-name\n  proxy_headers:\n  - \"Proxy-Auth: top-secret\"\n```\n\n----------------------------------------\n\nTITLE: Exporting Gzipped Data with Curl\nDESCRIPTION: Command to export data with gzip compression enabled to reduce network bandwidth usage.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/README.md#2025-04-22_snippet_43\n\nLANGUAGE: sh\nCODE:\n```\ncurl -H 'Accept-Encoding: gzip' http://localhost:8428/api/v1/export -d 'match[]={__name__!\"\"}' > data.jsonl.gz\n```\n\n----------------------------------------\n\nTITLE: Applying offset Modifier After Aggregation in MetricsQL\nDESCRIPTION: Illustrates that the `offset` modifier in MetricsQL can be placed after other operations like aggregation functions. This query calculates `sum(foo)` and then shifts the resulting time series back by 24 hours.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_11\n\nLANGUAGE: MetricsQL\nCODE:\n```\nsum(foo) offset 24h\n```\n\n----------------------------------------\n\nTITLE: Configuring Quantile Calculation in VictoriaMetrics Stream Aggregation YAML\nDESCRIPTION: Defines a VictoriaMetrics stream aggregation rule to calculate the 50th and 99th quantiles for metrics matching `request_duration_seconds` or `response_size_bytes` every 30 seconds. The `match` field specifies the input metrics, `interval` sets the aggregation window, and `outputs` defines the aggregation function (`quantiles`) and its parameters (0.50, 0.99). Requires VictoriaMetrics or vmagent with stream aggregation enabled.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/stream-aggregation.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n- match:\n  - request_duration_seconds\n  - response_size_bytes\n  interval: 30s\n  outputs: [\"quantiles(0.50, 0.99)\"]\n```\n\n----------------------------------------\n\nTITLE: Result of Implicit default_rollup Wrapping for Simple Selector (MetricsQL)\nDESCRIPTION: Shows the result `default_rollup(foo)` after VictoriaMetrics implicitly wraps the bare series selector `foo`.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_158\n\nLANGUAGE: MetricsQL\nCODE:\n```\ndefault_rollup(foo)\n```\n\n----------------------------------------\n\nTITLE: Counting Changes with changes_prometheus - MetricsQL - Markdown\nDESCRIPTION: Illustrates the changes_prometheus rollup function, counting the number of value changes in the provided window similarly to Prometheus (does not consider changes from samples before d). Metric names are removed by default but can be retained with a modifier. Designed for PromQL compatibility.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_5\n\nLANGUAGE: Markdown\nCODE:\n```\n`changes_prometheus(series_selector[d])`\n```\n\n----------------------------------------\n\nTITLE: Calculating Running Average Over Time Series - MetricsQL (English)\nDESCRIPTION: The `running_avg(q)` function outputs the cumulative (running) average at each point in the time series data obtained from `q`. Each result point reflects the mean of all prior values up to that index.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/MetricsQL.md#2025-04-22_snippet_101\n\nLANGUAGE: MetricsQL\nCODE:\n```\n`running_avg(q)`\n```\n\n----------------------------------------\n\nTITLE: MetricsQL Unicode Expression Example\nDESCRIPTION: Example showing MetricsQL query using unicode letters in identifiers, demonstrating both escaped and unescaped syntax\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/changelog/CHANGELOG_2023.md#2025-04-22_snippet_24\n\nLANGUAGE: metricsql\nCODE:\n```\nтемпература{город=\"Київ\"}\n```\n\nLANGUAGE: metricsql\nCODE:\n```\n\\т\\е\\м\\п\\е\\р\\а\\т\\у\\р\\а{\\г\\о\\р\\о\\д=\"Киев\"}\n```\n\n----------------------------------------\n\nTITLE: Building VictoriaMetrics with Rootless Podman\nDESCRIPTION: Command for building VictoriaMetrics using Podman in rootless mode, which enables building without root privileges while preserving user namespace.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/README.md#2025-04-22_snippet_39\n\nLANGUAGE: sh\nCODE:\n```\nmake victoria-metrics-pure DOCKER=podman DOCKER_RUN=\"podman run --userns=keep-id\"\n```\n\n----------------------------------------\n\nTITLE: Telegraf Configuration with HTTP Basic Authentication\nDESCRIPTION: Telegraf output configuration using username and password authentication for VictoriaMetrics access.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/data-ingestion/Telegraf.md#2025-04-22_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[[outputs.influxdb]]\n  urls = [\"$victoriametrics_url\"]\n  username = \"$victoriametrics_user\"\n  password = \"$victoriametrics_password\"\n  database = \"victoriametrics\"\n  skip_database_creation = true\n  exclude_retention_policy_tag = true\n  content_encoding = \"gzip\"\n```\n\n----------------------------------------\n\nTITLE: Simple HTTP Proxy Configuration\nDESCRIPTION: YAML configuration for vmauth to proxy all incoming requests to a single backend.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmauth.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nunauthorized_user:\n  url_prefix: \"http://backend/\"\n```\n\n----------------------------------------\n\nTITLE: Filtering MetricsQL Series Using Multiple OR Conditions\nDESCRIPTION: Demonstrates the MetricsQL feature introduced in v1.92.0 allowing selection of time series that match at least one of several OR-combined label filter sets. This example query selects series that have either the label set `{env=\"prod\",job=\"a\"}` OR the label set `{env=\"dev\",job=\"b\"}`.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/changelog/CHANGELOG_2023.md#2025-04-22_snippet_10\n\nLANGUAGE: metricsql\nCODE:\n```\n{env=\"prod\",job=\"a\" or env=\"dev\",job=\"b\"}\n```\n\n----------------------------------------\n\nTITLE: Share Calculation for Histogram Buckets in MetricsQL\nDESCRIPTION: Example showing how to normalize histogram bucket shares into [0..1] range using the share() function with rate() and sum() aggregates.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_147\n\nLANGUAGE: metricsql\nCODE:\n```\nshare(\n  sum(\n    rate(http_request_duration_seconds_bucket[5m])\n  ) by (le, vmrange)\n)\n```\n\n----------------------------------------\n\nTITLE: Disabling Automatic Cache Reset on Old Sample Ingestion (Shell)\nDESCRIPTION: Introduced in v1.65.0, the `-search.disableAutoCacheReset` command-line option for VictoriaMetrics components (like vmselect) prevents the automatic resetting of response caches when a sample with an old timestamp is ingested. Use this if cache resets due to backfilled data are undesirable.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/changelog/CHANGELOG_2021.md#2025-04-22_snippet_12\n\nLANGUAGE: Shell\nCODE:\n```\n-search.disableAutoCacheReset\n```\n\n----------------------------------------\n\nTITLE: Average Scrape Interval Calculation with Scrape Interval Function in VictoriaMetrics\nDESCRIPTION: The `scrape_interval` function calculates the average interval between raw samples for a specified time window `d`, applied to each time series individually. By default, the function strips metric names from results, which can be retained with a specific modifier.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/MetricsQL.md#2025-04-22_snippet_57\n\nLANGUAGE: Other\nCODE:\n```\nscrape_interval(series_selector[d])\n```\n\n----------------------------------------\n\nTITLE: Unpacking JSON from Implicit Default Field using LogSQL\nDESCRIPTION: This LogSQL query selects logs from the last 5 minutes (`_time:5m`) and unpacks JSON key-value pairs from the `_msg` field. The `from _msg` part is omitted, as `_msg` is the default field for the `unpack_json` pipe. This is equivalent to specifying `from _msg` explicitly.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_150\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m | unpack_json\n```\n\n----------------------------------------\n\nTITLE: Installing VM Operator using Helm (sh)\nDESCRIPTION: This command installs the VictoriaMetrics Operator using Helm. It uses the chart named 'victoria-metrics-operator' from the 'vm' Helm repository (assumed to be added previously) and assigns the release name 'vmoperator'. This operator will manage VictoriaMetrics custom resources within the Kubernetes cluster.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/guides/getting-started-with-vm-operator/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nhelm install vmoperator vm/victoria-metrics-operator\n```\n\n----------------------------------------\n\nTITLE: Unique Value Queries\nDESCRIPTION: Shows different ways to retrieve unique field values with optional hit counts and limits.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_148\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m | uniq by (ip)\n```\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m | uniq by (host, path)\n```\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m | uniq by (host) with hits\n```\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m | uniq by (host, path) limit 100\n```\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m | uniq (host, path) limit 100\n```\n\n----------------------------------------\n\nTITLE: Executing PromQL Instant Query - Shell\nDESCRIPTION: This snippet demonstrates how to perform an instant query using PromQL/MetricsQL on both single-node and cluster versions of VictoriaMetrics. The instant query targets the metric 'vm_http_request_errors_total'. Dependencies include curl and a running VictoriaMetrics instance. The command uses HTTP POST to send the query and retrieve results immediately.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/url-examples.md#2025-04-22_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\ncurl http://localhost:8428/prometheus/api/v1/query -d 'query=vm_http_request_errors_total'\n```\n\nLANGUAGE: sh\nCODE:\n```\ncurl http://<vmselect>:8481/select/0/prometheus/api/v1/query -d 'query=vm_http_request_errors_total'\n```\n\n----------------------------------------\n\nTITLE: Migrating Data from Prometheus Snapshot Using vmctl\nDESCRIPTION: This shell script snippet demonstrates how to use the `vmctl` tool in `prometheus` mode to import data from a Prometheus snapshot to VictoriaMetrics. It outlines key flag settings such as `--prom-snapshot` to specify the Prometheus snapshot path and `--vm-addr` for the VictoriaMetrics address. The example imports data with specific concurrency and batch size settings, and outputs detailed import statistics.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmctl.md#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n./vmctl prometheus --prom-snapshot=/path/to/snapshot \\\n  --vm-concurrency=1 \\\n  --vm-batch-size=200000 \\\n  --prom-concurrency=3\nPrometheus import mode\nPrometheus snapshot stats:\n  blocks found: 14;\n  blocks skipped: 0;\n  min time: 1581288163058 (2020-02-09T22:42:43Z);\n  max time: 1582409128139 (2020-02-22T22:05:28Z);\n  samples: 32549106;\n  series: 27289.\nFound 14 blocks to import. Continue? [Y/n] y\n14 / 14 [-------------------------------------------------------------] 100.00% 0 p/s\n2020/02/23 15:50:03 Import finished!\n2020/02/23 15:50:03 VictoriaMetrics importer stats:\n  idle duration: 6.152953029s;\n  time spent while importing: 44.908522491s;\n  total samples: 32549106;\n  samples/s: 724786.84;\n  total bytes: 669.1 MB;\n  bytes/s: 14.9 MB;\n  import requests: 323;\n  import requests retries: 0;\n2020/02/23 15:50:03 Total time: 51.077451066s\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Discoverer Interface in Go\nDESCRIPTION: This code snippet demonstrates how to implement the Discoverer interface, which is responsible for discovering target groups in a service discovery mechanism. It requires the use of the Go programming language and the Prometheus targetgroup package. The `Run` method sends target groups through a channel, alerting of any changes by resending updated or new target groups.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/prometheus/prometheus/discovery/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\ntype Discoverer interface {\n\tRun(ctx context.Context, up chan<- []*targetgroup.Group)\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Single-node VictoriaMetrics with vmalert\nDESCRIPTION: Configures vmalert for single-node VictoriaMetrics to execute rules, store recording rule results, and manage alert states. Involves using command-line flags to define rule paths and data source URL targeting a VM single-node server.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmalert.md#2025-04-22_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\n./bin/vmalert -rule=rules.yml  \\                    # Path to the file with rules configuration. Supports wildcard\n    -datasource.url=http://victoriametrics:8428 \\   # VM-single addr for executing rules expressions\n    -remoteWrite.url=http://victoriametrics:8428 \\  # VM-single addr to persist alerts state and recording rules results\n    -remoteRead.url=http://victoriametrics:8428 \\   # VM-single addr for restoring alerts state after restart\n    -notifier.url=http://alertmanager:9093          # AlertManager addr to send alerts when they trigger\n```\n\n----------------------------------------\n\nTITLE: Configuring vmagent Kafka Integration with YAML for Kubernetes\nDESCRIPTION: Example showing how to configure vmagent to connect to multiple Kafka topics using YAML configuration for Kubernetes deployments with Helm charts or K8s operator. This demonstrates the proper syntax for extraArgs.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmagent.md#2025-04-22_snippet_55\n\nLANGUAGE: yaml\nCODE:\n```\nextraArgs:\n  \"kafka.consumer.topic\": \"topic-a,topic-b\"\n  \"kafka.consumer.topic.brokers\": \"host1:9092;host2:9092,host3:9092;host4:9092\"\n```\n\n----------------------------------------\n\nTITLE: Exporting Raw Samples in CSV Format from VictoriaMetrics\nDESCRIPTION: Examples for exporting raw samples from VictoriaMetrics in CSV format. The export format can be customized using the 'format' parameter to specify which fields to include in the output.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/url-examples.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncurl http://localhost:8428/api/v1/export/csv -d 'format=__name__,__value__,__timestamp__:unix_s' -d 'match[]=vm_http_request_errors_total' > filename.csv\n```\n\nLANGUAGE: sh\nCODE:\n```\ncurl http://<vmselect>:8481/select/0/prometheus/api/v1/export/csv -d 'format=__name__,__value__,__timestamp__:unix_s' -d 'match[]=vm_http_request_errors_total' > filename.csv\n```\n\n----------------------------------------\n\nTITLE: Maintaining Last Non-Empty Values in PromQL\nDESCRIPTION: The `keep_last_value(q)` function fills gaps using the value of the last non-empty point returned by `q`, ensuring that dataset continuity is maintained even with irregular data occurrences.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_86\n\nLANGUAGE: PromQL\nCODE:\n```\n`keep_last_value(q)`\n```\n\n----------------------------------------\n\nTITLE: Using Random Number Generation Functions in MetricsQL\nDESCRIPTION: Three functions for generating pseudo-random numbers with different distributions: rand() for uniform distribution, rand_normal() for normal distribution, and rand_exponential() for exponential distribution.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_121\n\nLANGUAGE: markdown\nCODE:\n```\n#### rand\n\n`rand(seed)` is a [transform function](#transform-functions), which returns pseudo-random numbers on the range `[0...1]` with even distribution.\nOptional `seed` can be used as a seed for pseudo-random number generator.\n\nSee also [rand_normal](#rand_normal) and [rand_exponential](#rand_exponential).\n```\n\nLANGUAGE: markdown\nCODE:\n```\n#### rand_exponential\n\n`rand_exponential(seed)` is a [transform function](#transform-functions), which returns pseudo-random numbers\nwith [exponential distribution](https://en.wikipedia.org/wiki/Exponential_distribution). Optional `seed` can be used as a seed for pseudo-random number generator.\n\nSee also [rand](#rand) and [rand_normal](#rand_normal).\n```\n\nLANGUAGE: markdown\nCODE:\n```\n#### rand_normal\n\n`rand_normal(seed)` is a [transform function](#transform-functions), which returns pseudo-random numbers\nwith [normal distribution](https://en.wikipedia.org/wiki/Normal_distribution). Optional `seed` can be used as a seed for pseudo-random number generator.\n\nSee also [rand](#rand) and [rand_exponential](#rand_exponential).\n```\n\n----------------------------------------\n\nTITLE: Normalizing Time Series Values in PromQL\nDESCRIPTION: The range_normalize() function normalizes values for time series returned by the queries into the [0 ... 1] range. This is useful for correlating time series with distinct value ranges.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_100\n\nLANGUAGE: promql\nCODE:\n```\nrange_normalize(q1, ...)\n```\n\n----------------------------------------\n\nTITLE: Searching for a Word in a Specific Field - VictoriaLogs LogSQL\nDESCRIPTION: This snippet filters log entries by matching the word 'error' within the 'log.level' field using field-specific syntax. Requires the 'log.level' field to be indexed in VictoriaLogs. Inputs are the field name and word; output is all entries where 'log.level' contains 'error'.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_38\n\nLANGUAGE: logsql\nCODE:\n```\nlog.level:error\n```\n\n----------------------------------------\n\nTITLE: Getting Day of Week from Timestamps with VictoriaMetrics PromQL\nDESCRIPTION: The day_of_week function returns the day-of-week (0=Sunday to 6=Saturday) for each unix timestamp in the time series q. Metric names are stripped by default. Inputs must be unix timestamp time series; outputs are integers 0-6. Supported by PromQL.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_93\n\nLANGUAGE: PromQL\nCODE:\n```\n`day_of_week(q)`\n```\n\n----------------------------------------\n\nTITLE: Configuring Alertmanager for VictoriaMetrics Alerts\nDESCRIPTION: YAML configuration for Alertmanager that defines a simple route and receiver for alerts generated by vmalert. This basic configuration silently handles all alerts without sending notifications.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/anomaly-detection/guides/guide-vmanomaly-vmalert/README.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nroute:\n  receiver: blackhole\n\nreceivers:\n  - name: blackhole\n```\n\n----------------------------------------\n\nTITLE: Configuring Live Tailing Delay in Bash\nDESCRIPTION: This example shows how to set a 30-second delay for delivering new logs during live tailing using the 'offset' parameter.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/querying/README.md#2025-04-22_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\ncurl -N http://localhost:9428/select/logsql/tail -d 'query=*' -d 'offset=30s'\n```\n\n----------------------------------------\n\nTITLE: Using sum_over_time with VictoriaMetrics - Markdown - Syntax Reference\nDESCRIPTION: This snippet gives the syntax for the sum_over_time function, which calculates the sum of all sample values over a window d. Supported by PromQL, it operates per time series and strips metric names by default. Key parameters: series_selector (filter), d (window duration). Output: single summed value for the specified range.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_64\n\nLANGUAGE: Markdown\nCODE:\n```\n`sum_over_time(series_selector[d])`\n```\n\n----------------------------------------\n\nTITLE: Displaying Anomaly Score Metrics in VictoriaMetrics\nDESCRIPTION: This code snippet shows examples of anomaly score metrics generated by VictoriaMetrics. Each metric includes labels for the monitored entity, preset, model alias, and scheduler alias. The anomaly scores are floating-point values representing the degree of anomaly detected.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/anomaly-detection/Presets.md#2025-04-22_snippet_2\n\nLANGUAGE: promtextmetric\nCODE:\n```\nanomaly_score{for=\"cpu_seconds_total\", instance=\"node-exporter:9100\", preset=\"node-exporter\", mode=\"system\", model_alias=\"prophet\", scheduler_alias=\"1d_1m\"} 0.23451242720277776\nanomaly_score{for=\"cpu_seconds_total\", instance=\"node-exporter:9100\", preset=\"node-exporter\", mode=\"user\", model_alias=\"prophet\", scheduler_alias=\"1d_1m\"} 0.2637952255694444\nanomaly_score{for=\"page_faults\", instance=\"node-exporter:9100\", job=\"node-exporter\", preset=\"node-exporter\", model_alias=\"prophet\", scheduler_alias=\"1d_1m\"} 0.00593712535\nanomaly_score{for=\"read_latency\", instance=\"node-exporter:9100\", preset=\"node-exporter\", model_alias=\"mad\", scheduler_alias=\"1d_1m\"} 0.27773362795333334\nanomaly_score{for=\"receive_bytes\", instance=\"node-exporter:9100\", preset=\"node-exporter\", model_alias=\"mad\", scheduler_alias=\"1d_1m\"} 0.037753486136666674\nanomaly_score{for=\"transmit_bytes\", instance=\"node-exporter:9100\", preset=\"node-exporter\", model_alias=\"mad\", scheduler_alias=\"1d_1m\"} 0.17633085235\nanomaly_score{for=\"write_latency\", instance=\"node-exporter:9100\", preset=\"node-exporter\", model_alias=\"mad\", scheduler_alias=\"1d_1m\"} 0.019314370926666668\nanomaly_score{for=\"cpu_seconds_total\", instance=\"node-exporter:9100\", preset=\"node-exporter\", mode=\"idle\", model_alias=\"mad\", scheduler_alias=\"1d_1m\"} 4.2323617935\nanomaly_score{for=\"cpu_seconds_total\", instance=\"node-exporter:9100\", preset=\"node-exporter\", mode=\"idle\", model_alias=\"mad\", scheduler_alias=\"2w_1m\"} 1.5261359215\nanomaly_score{for=\"cpu_seconds_total\", instance=\"node-exporter:9100\", preset=\"node-exporter\", mode=\"idle\", model_alias=\"prophet\", scheduler_alias=\"2w_1m\"} 0.5850743651\nanomaly_score{for=\"cpu_seconds_total\", instance=\"node-exporter:9100\", preset=\"node-exporter\", mode=\"idle\", model_alias=\"z-score\", scheduler_alias=\"1d_1m\"} 1.6496064663\nanomaly_score{for=\"cpu_seconds_total\", instance=\"node-exporter:9100\", preset=\"node-exporter\", mode=\"idle\", model_alias=\"z-score\", scheduler_alias=\"2w_1m\"} 0.924392581\nanomaly_score{for=\"cpu_seconds_total\", instance=\"node-exporter:9100\", preset=\"node-exporter\", mode=\"iowait\", model_alias=\"mad\", scheduler_alias=\"1d_1m\"} 0.8571428657\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring Retry Status Codes for Load Balancing in vmauth (YAML)\nDESCRIPTION: This YAML configuration shows how to specify custom HTTP status codes that trigger a retry attempt on other available backends when load balancing is enabled. In this example, if a request to one of the `vmselect` backends returns a 500 or 502 status code, vmauth will retry the request on a different backend from the list.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmauth.md#2025-04-22_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\nunauthorized_user:\n  url_prefix:\n  - http://vmselect1:8481/\n  - http://vmselect2:8481/\n  - http://vmselect3:8481/\n  retry_status_codes: [500, 502]\n```\n\n----------------------------------------\n\nTITLE: Configuring Marathon Service Discovery in YAML\nDESCRIPTION: This YAML configuration example demonstrates how to set up Marathon service discovery via its REST API. The setup requires specifying a list of server URLs to contact Marathon servers. This configuration supports HTTP API client options and requires a periodic refresh interval for discovered targets.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/sd_configs.md#2025-04-22_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\nscrape_configs:\n- job_name: marathon\n  marathon_sd_configs:\n    # List of URLs to be used to contact Marathon servers.\n    # You need to provide at least one server URL, but should provide URLs for\n    # all masters you have running.\n    #\n    servers:\n      - \"host1:port1\"\n      - \"host2:port2\"\n      - \"...\"\n    \n    # Additional HTTP API client options can be specified here.\n    # See https://docs.victoriametrics.com/sd_configs/#http-api-client-options\n```\n\n----------------------------------------\n\nTITLE: Command-line Flags for vmselect in VictoriaMetrics\nDESCRIPTION: Complete list of command-line flags for the vmselect component in VictoriaMetrics. These flags control various settings related to caching, TLS configuration, clustering capabilities, request handling, authentication, and performance tuning.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/Cluster-VictoriaMetrics.md#2025-04-22_snippet_29\n\nLANGUAGE: shellhelp\nCODE:\n```\n  -blockcache.missesBeforeCaching int\n     The number of cache misses before putting the block into cache. Higher values may reduce indexdb/dataBlocks cache size at the cost of higher CPU and disk read usage (default 2)\n  -cacheDataPath string\n     Path to directory for cache files and temporary query results. By default, the cache won't be persisted, and temporary query results will be placed under /tmp/searchResults. If set, the cache will be persisted under cacheDataPath/rollupResult, and temporary query results will be placed under cacheDataPath/tmp/searchResults.\n  -cacheExpireDuration duration\n     Items are removed from in-memory caches after they aren't accessed for this duration. Lower values may reduce memory usage at the cost of higher CPU usage. See also -prevCacheRemovalPercent (default 30m0s)\n  -cluster.tls\n     Whether to use TLS for connections to -storageNode. See https://docs.victoriametrics.com/cluster-victoriametrics/#mtls-protection . This flag is available only in VictoriaMetrics enterprise. See https://docs.victoriametrics.com/enterprise/\n  -cluster.tlsCAFile string\n     Path to TLS CA file to use for verifying certificates provided by -storageNode if -cluster.tls flag is set. By default system CA is used. See https://docs.victoriametrics.com/cluster-victoriametrics/#mtls-protection . This flag is available only in VictoriaMetrics enterprise. See https://docs.victoriametrics.com/enterprise/\n  -cluster.tlsCertFile string\n     Path to client-side TLS certificate file to use when connecting to -storageNode if -cluster.tls flag is set. See https://docs.victoriametrics.com/cluster-victoriametrics/#mtls-protection . This flag is available only in VictoriaMetrics enterprise. See https://docs.victoriametrics.com/enterprise/\n  -cluster.tlsInsecureSkipVerify\n     Whether to skip verification of TLS certificates provided by -storageNode nodes if -cluster.tls flag is set. Note that disabled TLS certificate verification breaks security. This flag is available only in VictoriaMetrics enterprise. See https://docs.victoriametrics.com/enterprise/\n  -cluster.tlsKeyFile string\n     Path to client-side TLS key file to use when connecting to -storageNode if -cluster.tls flag is set. See https://docs.victoriametrics.com/cluster-victoriametrics/#mtls-protection . This flag is available only in VictoriaMetrics enterprise. See https://docs.victoriametrics.com/enterprise/\n  -clusternative.disableCompression\n     Whether to disable compression of the data sent to vmselect via -clusternativeListenAddr. This reduces CPU usage at the cost of higher network bandwidth usage\n  -clusternative.maxConcurrentRequests int\n     The maximum number of concurrent vmselect requests the server can process at -clusternativeListenAddr. It shouldn't be high, since a single request usually saturates a CPU core at the underlying vmstorage nodes, and many concurrently executed requests may require high amounts of memory. See also -clusternative.maxQueueDuration\n  -clusternative.maxQueueDuration duration\n     The maximum time the incoming query to -clusternativeListenAddr waits for execution when -clusternative.maxConcurrentRequests limit is reached (default 10s)\n  -clusternative.maxTagKeys int\n     The maximum number of tag keys returned per search at -clusternativeListenAddr (default 100000)\n  -clusternative.maxTagValueSuffixesPerSearch int\n     The maximum number of tag value suffixes returned from /metrics/find at -clusternativeListenAddr (default 100000)\n  -clusternative.maxTagValues int\n     The maximum number of tag values returned per search at -clusternativeListenAddr (default 100000)\n  -clusternative.tls\n     Whether to use TLS when accepting connections at -clusternativeListenAddr. See https://docs.victoriametrics.com/cluster-victoriametrics/#mtls-protection . This flag is available only in VictoriaMetrics enterprise. See https://docs.victoriametrics.com/enterprise/\n  -clusternative.tlsCAFile string\n     Path to TLS CA file to use for verifying certificates provided by vmselect, which connects at -clusternativeListenAddr if -clusternative.tls flag is set. By default system CA is used. See https://docs.victoriametrics.com/cluster-victoriametrics/#mtls-protection . This flag is available only in VictoriaMetrics enterprise. See https://docs.victoriametrics.com/enterprise/\n  -clusternative.tlsCertFile string\n     Path to server-side TLS certificate file to use when accepting connections at -clusternativeListenAddr if -clusternative.tls flag is set. See https://docs.victoriametrics.com/cluster-victoriametrics/#mtls-protection . This flag is available only in VictoriaMetrics enterprise. See https://docs.victoriametrics.com/enterprise/\n  -clusternative.tlsCipherSuites array\n     Optional list of TLS cipher suites used for connections at -clusternativeListenAddr if -clusternative.tls flag is set. See the list of supported cipher suites at https://pkg.go.dev/crypto/tls#pkg-constants . This flag is available only in VictoriaMetrics enterprise. See https://docs.victoriametrics.com/enterprise/\n     Supports an array of values separated by comma or specified via multiple flags.\n     Value can contain comma inside single-quoted or double-quoted string, {}, [] and () braces.\n  -clusternative.tlsInsecureSkipVerify\n     Whether to skip verification of TLS certificates provided by vmselect, which connects to -clusternativeListenAddr if -clusternative.tls flag is set. Note that disabled TLS certificate verification breaks security. This flag is available only in VictoriaMetrics enterprise. See https://docs.victoriametrics.com/enterprise/\n  -clusternative.tlsKeyFile string\n     Path to server-side TLS key file to use when accepting connections at -clusternativeListenAddr if -clusternative.tls flag is set. See https://docs.victoriametrics.com/cluster-victoriametrics/#mtls-protection . This flag is available only in VictoriaMetrics enterprise. See https://docs.victoriametrics.com/enterprise/\n  -clusternativeListenAddr string\n     TCP address to listen for requests from other vmselect nodes in multi-level cluster setup. See https://docs.victoriametrics.com/cluster-victoriametrics/#multi-level-cluster-setup . Usually :8401 should be set to match default vmstorage port for vmselect. Disabled work if empty\n  -dedup.minScrapeInterval duration\n     Leave only the last sample in every time series per each discrete interval equal to -dedup.minScrapeInterval > 0. See https://docs.victoriametrics.com/#deduplication for details\n  -deleteAuthKey value\n     authKey for metrics' deletion via /prometheus/api/v1/admin/tsdb/delete_series and /graphite/tags/delSeries. It could be passed via authKey query arg.\n     Flag value can be read from the given file when using -deleteAuthKey=file:///abs/path/to/file or -deleteAuthKey=file://./relative/path/to/file . Flag value can be read from the given http/https url when using -deleteAuthKey=http://host/path or -deleteAuthKey=https://host/path\n  -denyQueryTracing\n     Whether to disable the ability to trace queries. See https://docs.victoriametrics.com/#query-tracing\n  -downsampling.period array\n     Comma-separated downsampling periods in the format 'offset:period'. For example, '30d:10m' instructs to leave a single sample per 10 minutes for samples older than 30 days. When setting multiple downsampling periods, it is necessary for the periods to be multiples of each other. See https://docs.victoriametrics.com/#downsampling for details. This flag is available only in VictoriaMetrics enterprise. See https://docs.victoriametrics.com/enterprise/\n     Supports an array of values separated by comma or specified via multiple flags.\n     Value can contain comma inside single-quoted or double-quoted string, {}, [] and () braces.\n  -enableTCP6\n     Whether to enable IPv6 for listening and dialing. By default, only IPv4 TCP and UDP are used\n  -envflag.enable\n     Whether to enable reading flags from environment variables in addition to the command line. Command line flag values have priority over values from environment vars. Flags are read only from the command line if this flag isn't set. See https://docs.victoriametrics.com/#environment-variables for more details\n  -envflag.prefix string\n     Prefix for environment variables if -envflag.enable is set\n  -eula\n     Deprecated, please use -license or -licenseFile flags instead. By specifying this flag, you confirm that you have an enterprise license and accept the ESA https://victoriametrics.com/legal/esa/ . This flag is available only in Enterprise binaries. See https://docs.victoriametrics.com/enterprise/\n  -filestream.disableFadvise\n     Whether to disable fadvise() syscall when reading large data files. The fadvise() syscall prevents from eviction of recently accessed data from OS page cache during background merges and backups. In some rare cases it is better to disable the syscall if it uses too much CPU\n  -flagsAuthKey value\n     Auth key for /flags endpoint. It must be passed via authKey query arg. It overrides -httpAuth.*\n     Flag value can be read from the given file when using -flagsAuthKey=file:///abs/path/to/file or -flagsAuthKey=file://./relative/path/to/file . Flag value can be read from the given http/https url when using -flagsAuthKey=http://host/path or -flagsAuthKey=https://host/path\n  -fs.disableMmap\n     Whether to use pread() instead of mmap() for reading data files. By default, mmap() is used for 64-bit arches and pread() is used for 32-bit arches, since they cannot read data files bigger than 2^32 bytes in memory. mmap() is usually faster for reading small data chunks than pread()\n  -globalReplicationFactor int\n\n```\n\n----------------------------------------\n\nTITLE: Defining Documentation Page Metadata with Frontmatter (Markdown/YAML)\nDESCRIPTION: This snippet sets up page metadata using YAML frontmatter at the top of a Markdown file, a standard pattern for static site generators like Hugo or Jekyll. Key parameters include the page title, navigation weight, menu structure, and URL aliases. These settings inform how the static site will render this page within site navigation and routing. Required dependencies include a static site generator capable of interpreting YAML frontmatter, and the parameters' values must match the site's navigation schema.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/anomaly-detection/_index.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\\ntitle: Anomaly Detection\\nweight: 50\\nmenu:\\n  docs:\\n    weight: 50\\n    identifier: anomaly-detection\\n    pageRef: /anomaly-detection/\\naliases:\\n- /anomaly-detection.html\\n- /vmanomaly.html\\n- /vmanomaly/\\n- /anomaly-detection/overview.html\\n- /anomaly-detection/overview/\\n---\n```\n\n----------------------------------------\n\nTITLE: Filtering Phrases by Prefix - VictoriaMetrics LogsQL - LogSQL\nDESCRIPTION: This snippet finds log messages containing phrases that start with \\'unexpected fail\\'. The phrase is quoted and followed by a wildcard *, matching messages like \\'unexpected fail: IO error\\'. Dependencies: VictoriaMetrics LogsQL support for phrase filter. Input: logs; Output: messages with matching phrase prefixes.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_47\n\nLANGUAGE: logsql\nCODE:\n```\n\"unexpected fail\"*\n```\n\n----------------------------------------\n\nTITLE: Using unicode characters in metric and label names\nDESCRIPTION: Demonstrates the use of unicode characters in metric and label names in MetricsQL expressions.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/MetricsQL.md#2025-04-22_snippet_6\n\nLANGUAGE: metricsql\nCODE:\n```\nტემპერატურა{πόλη=\"Київ\"}\n```\n\n----------------------------------------\n\nTITLE: Starting Docker Compose Services in Detached Mode (Shell)\nDESCRIPTION: This shell command navigates into one of the protocol-specific directories (e.g., loki, jsonline) and then uses Docker Compose to build, (re)create, start, and attach to containers for the services defined in the `docker-compose.yml` file found in that directory. The `-d` flag ensures the containers run in the background (detached mode).\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/deployment/docker/victorialogs/logstash/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndocker compose up -d \n```\n\n----------------------------------------\n\nTITLE: Filtering Logs by Stream ID and Time Window - VictoriaLogs LogSQL\nDESCRIPTION: This query combines a time filter with a _stream_id filter to return only the most recent logs (within the past hour) for a specified log stream. Dependencies include field indexes for both time and stream ID. '_time:1h' restricts results to the last hour; '_stream_id:...' isolates a specific log stream. Output is a tailored log list, useful for large streams.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_34\n\nLANGUAGE: logsql\nCODE:\n```\n_time:1h _stream_id:0000007b000001c850d9950ea6196b1a4812081265faa1c7\n```\n\n----------------------------------------\n\nTITLE: Querying Equivalent for 'quantiles' Aggregation in MetricsQL\nDESCRIPTION: This MetricsQL query replicates the functionality of the `quantiles(phi1, ..., phiN)` stream aggregation function. It calculates the specified quantiles (phi1 to phiN) by first creating a histogram over time (`histogram_over_time`) for the input metric (usually a gauge) and then applying the `histogram_quantiles` function.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/stream-aggregation.md#2025-04-22_snippet_32\n\nLANGUAGE: metricsql\nCODE:\n```\nhistogram_quantiles(\"quantile\", phi1, ..., phiN, sum(histogram_over_time(some_metric[interval])) by (vmrange))\n```\n\n----------------------------------------\n\nTITLE: Union Query\nDESCRIPTION: Demonstrates union operation combining results from two different queries.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_147\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m error | union (_time:1h panic)\n```\n\n----------------------------------------\n\nTITLE: Joining Label Values with label_join Function\nDESCRIPTION: The label_join function joins source label values with the given separator and stores the result in destination label. This is performed individually per each time series.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_121\n\nLANGUAGE: metricsql\nCODE:\n```\nlabel_join(q, \"dst_label\", \"separator\", \"src_label1\", ..., \"src_labelN\")\n```\n\nLANGUAGE: metricsql\nCODE:\n```\nlabel_join(up{instance=\"xxx\",job=\"yyy\"}, \"foo\", \"-\", \"instance\", \"job\")\n```\n\n----------------------------------------\n\nTITLE: Simplified IPv4 Extraction with extract_regexp Pipe in LogSQL\nDESCRIPTION: This snippet shows a simplified version of the previous query, omitting the 'from _msg' part as extraction from the _msg field is the default behavior.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_86\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m | extract_regexp \"(?P<ip>([0-9]+[.]){3}[0-9]+)\"\n```\n\n----------------------------------------\n\nTITLE: Copying labels with prefix in many-to-one operations\nDESCRIPTION: Shows how to copy all labels from one side of a many-to-one operation while adding a prefix to avoid name clashes.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/MetricsQL.md#2025-04-22_snippet_3\n\nLANGUAGE: metricsql\nCODE:\n```\nkube_pod_info * on(namespace) group_left(*) prefix \"ns_\" kube_namespace_labels\n```\n\n----------------------------------------\n\nTITLE: Configuring Nomad Service Discovery in YAML\nDESCRIPTION: This snippet demonstrates how to configure Nomad service discovery in VictoriaMetrics. It includes options for server, namespace, region, tag separator, and other HTTP API client options.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/sd_configs.md#2025-04-22_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\nscrape_configs:\n- job_name: nomad\n  nomad_sd_configs:\n\n    # server is an optional Nomad server to connect to.\n    # If the server isn't specified, then it is read from NOMAD_ADDR environment var.\n    # If the NOMAD_ADDR environment var isn't set, then localhost:4646 is used.\n    #\n  - server: \"localhost:4646\"\n\n    # namespace is an optional Nomad namespace.\n    # If the namespace isn't specified, then it is read from NOMAD_NAMESPACE environment var.\n    #\n    # namespace: \"...\"\n\n    # region is an optional Nomad region.\n    # If the region isn't specified, then it is read from NOMAD_REGION environment var.\n    # If NOMAD_REGION environment var isn't set, then \"global\" region is used\n    #\n    # region: \"...\"\n\n    # tag_separator is an optional string by which Nomad tags are joined into the __meta_nomad_tags label.\n    # By default, \",\" is used as a tag separator.\n    # Individual tags are also available via __meta_nomad_tag_<tagname> labels - see below.\n    #\n    # tag_separator: \"...\"\n\n    # allow_stale is an optional config, which allows stale Nomad results.\n    # See https://developer.hashicorp.com/consul/api-docs/features/consistency\n    # Reduces load on Nomad if set to true. By default, it is set to true.\n    #\n    # allow_stale: ...\n\n    # Additional HTTP API client options can be specified here.\n    # See https://docs.victoriametrics.com/sd_configs/#http-api-client-options\n```\n\n----------------------------------------\n\nTITLE: Calculating Resource Utilization - MetricsQL (English)\nDESCRIPTION: The `ru(free, max)` function calculates resource utilization as a percentage, given the amount of `free` and `max` resources. Typically used to derive ratios such as memory or CPU utilization, yielding a value in [0%, 100%].\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/MetricsQL.md#2025-04-22_snippet_100\n\nLANGUAGE: MetricsQL\nCODE:\n```\n`ru(free, max)`\n```\n\n----------------------------------------\n\nTITLE: Moving Label Values with label_move Function\nDESCRIPTION: The label_move function moves label values from source labels to destination labels for all time series returned by the query.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_127\n\nLANGUAGE: metricsql\nCODE:\n```\nlabel_move(q, \"src_label1\", \"dst_label1\", ..., \"src_labelN\", \"dst_labelN\")\n```\n\n----------------------------------------\n\nTITLE: Using Counter with xsync in Go\nDESCRIPTION: This snippet demonstrates the initialization and basic operations (`Inc`, `Dec`, `Value`) on a `Counter` using xsync. It effectively manages contention compared to single atomically updated counters.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/puzpuzpuz/xsync/v3/README.md#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nc := xsync.NewCounter()\n// increment and decrement the counter\nc.Inc()\nc.Dec()\n// read the current value\nv := c.Value()\n```\n\n----------------------------------------\n\nTITLE: vmagent Load Balancer Configuration\nDESCRIPTION: YAML configuration for vmauth to load balance specific paths to multiple vmagent instances.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmauth.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nunauthorized_user:\n  url_map:\n  - src_paths:\n    - \"/prometheus/api/v1/write\"\n    - \"/influx/write\"\n    - \"/api/v1/import\"\n    - \"/api/v1/import/.*\"\n    url_prefix:\n    - \"http://vmagent-1:8429/\"\n    - \"http://vmagent-2:8429/\"\n    - \"http://vmagent-3:8429/\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Log Forwarding in OpenShift\nDESCRIPTION: This YAML configuration example for a 'ClusterLogForwarder' in OpenShift specifies how to forward cluster logs to Victoria Logs, using Elasticsearch outputs with specific tuning parameters. It includes multiple pipelines for different log types.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/guides/collecting-openshift-logs-with-victoria-logs/README.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: observability.openshift.io/v1\nkind: ClusterLogForwarder\nmetadata:\n  name: logging\n  namespace: openshift-logging\nspec:\n  managementState: Managed\n  outputs:\n    - elasticsearch:\n        index: logs\n        url: \"http://vl-victoria-logs-single-server.vl.svc.cluster.local:9428/insert/elasticsearch/_bulk?_stream_fields=log_type,hostname,stream,kubernetes.pod_name,kubernetes.container_name,kubernetes.pod_namespace&_time_field=@timestamp&_msg_field=message,msg,_msg,log.msg,log.message,log&fake_field=1\"\n        version: 8\n        tuning:\n          compression: gzip\n      name: victorialogs\n      type: elasticsearch\n    - elasticsearch:\n        index: logs\n        url: \"http://vl-victoria-logs-single-server.vl.svc.cluster.local:9428/insert/elasticsearch/_bulk?_stream_fields=log_type,hostname,annotations.authorization.k8s.io/decision,hostname,verb&_time_field=@timestamp&_msg_field=annotations.authorization.k8s.io/reason&fake_field=1\"\n        version: 8\n        tuning:\n          compression: gzip\n      name: victorialogs-audit\n      type: elasticsearch\n    - elasticsearch:\n        index: logs\n        url: \"http://vl-victoria-logs-single-server.vl.svc.cluster.local:9428/insert/elasticsearch/_bulk?_stream_fields=log_type,hostname,tag,systemd.t.EXE,level&_time_field=@timestamp&_msg_field=message,msg,_msg,log.msg,log.message,log&fake_field=1\"\n        version: 8\n        tuning:\n          compression: gzip\n      name: victorialogs-infrastructure\n      type: elasticsearch\n  pipelines:\n    - inputRefs:\n        - application\n      name: application\n      outputRefs:\n        - victorialogs-audit\n    - inputRefs:\n        - infrastructure\n      name: infrastructure\n      outputRefs:\n        - victorialogs-infrastructure\n    - inputRefs:\n        - audit\n      name: audit\n      outputRefs:\n        - victorialogs\n  serviceAccount:\n    name: victorialogs\n```\n\n----------------------------------------\n\nTITLE: Comprehensive Rate Limiting Configuration\nDESCRIPTION: YAML configuration example defining various types of rate limits including queries, rows inserted, new series, and active series counts.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmgateway.md#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nlimits:\n  - type: queries\n    value: 100\n  - type: rows_inserted\n    value: 100000\n  - type: new_series\n    value: 1000\n  - type: active_series\n    value: 100000\n  - type: queries\n    value: 1\n    account_id: 15\n```\n\n----------------------------------------\n\nTITLE: Querying Specific Tenant for Live Tailing in Bash\nDESCRIPTION: This example demonstrates how to perform live tailing for a specific tenant by setting AccountID and ProjectID headers.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/querying/README.md#2025-04-22_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\ncurl -N http://localhost:9428/select/logsql/tail -H 'AccountID: 12' -H 'ProjectID: 34' -d 'query=error'\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Auth Proxy in vmauth (YAML)\nDESCRIPTION: Defines a user `foo` with password `bar` within the `vmauth` configuration. Requests containing the corresponding Basic Authentication header are proxied to the specified `url_prefix`, which points to a single-node VictoriaMetrics instance.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmauth.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nusers:\n- username: foo\n  password: bar\n  url_prefix: \"http://victoria-metrics:8428/\"\n```\n\n----------------------------------------\n\nTITLE: Calculating Scrape Interval Rollups (Min/Max/Avg) in MetricsQL\nDESCRIPTION: Calculates the minimum, maximum, and average interval (in seconds) between adjacent raw samples within a lookbehind window `d`. Results include `rollup=\\\"min\\\"`, `rollup=\\\"max\\\"`, and `rollup=\\\"avg\\\"` labels. An optional second argument (\\\"min\\\", \\\"max\\\", or \\\"avg\\\") selects one result and omits the label. Metric names are stripped unless `keep_metric_names` is used.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_60\n\nLANGUAGE: metricsql\nCODE:\n```\nrollup_scrape_interval(series_selector[d])\n```\n\n----------------------------------------\n\nTITLE: Concatenating String Literals in MetricsQL (WITH Example)\nDESCRIPTION: Illustrates string literal concatenation in MetricsQL, often useful within `WITH` templates. This snippet, part of a larger `WITH` expression, constructs metric names by concatenating a common prefix defined in the `WITH` clause with different suffixes.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_20\n\nLANGUAGE: metricsql\nCODE:\n```\nWITH (commonPrefix=\"long_metric_prefix_\") {__name__=commonPrefix+\"suffix1\"} / {__name__=commonPrefix+\"suffix2\"}\n```\n\n----------------------------------------\n\nTITLE: Getting Day of Month from Timestamps with VictoriaMetrics PromQL\nDESCRIPTION: The day_of_month function returns the day-of-month value for each unix timestamp point in query q. Expected range is [1...31]; results remove metric names unless using keep_metric_names. Supported in PromQL; inputs must be time series of unix timestamps.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_92\n\nLANGUAGE: PromQL\nCODE:\n```\n`day_of_month(q)`\n```\n\n----------------------------------------\n\nTITLE: Using share_eq_over_time with VictoriaMetrics - Markdown - Syntax Reference\nDESCRIPTION: This snippet demonstrates the syntax for applying the share_eq_over_time rollup function in VictoriaMetrics queries. It shows how to compute the portion of raw samples equal to a given value eq over a historic window d, evaluated per time series. This function operates on gauge metrics and strips metric names by default unless modified with keep_metric_names. Required parameters: series_selector (metric filter), d (lookbehind duration), eq (comparison value).\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_57\n\nLANGUAGE: Markdown\nCODE:\n```\n`share_eq_over_time(series_selector[d], eq)`\n```\n\n----------------------------------------\n\nTITLE: JSON Line Format for VictoriaMetrics Data Import/Export\nDESCRIPTION: Example of the JSON line format used by VictoriaMetrics for data import and export operations. The format includes metric name, labels, values array, and timestamps array in milliseconds.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/README.md#2025-04-22_snippet_63\n\nLANGUAGE: json\nCODE:\n```\n{\n  // metric contains metric name plus labels for a particular time series\n  \"metric\":{\n    \"__name__\": \"metric_name\",  // <- this is metric name\n\n    // Other labels for the time series\n\n    \"label1\": \"value1\",\n    \"label2\": \"value2\",\n    ...\n    \"labelN\": \"valueN\"\n  },\n\n  // values contains raw sample values for the given time series\n  \"values\": [1, 2.345, -678],\n\n  // timestamps contains raw sample UNIX timestamps in milliseconds for the given time series\n  // every timestamp is associated with the value at the corresponding position\n  \"timestamps\": [1549891472010,1549891487724,1549891503438]\n}\n```\n\n----------------------------------------\n\nTITLE: Using distinct aggregate function in PromQL\nDESCRIPTION: Aggregate function that calculates the number of unique values per each group of points with the same timestamp. Useful for cardinality measurement.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_149\n\nLANGUAGE: promql\nCODE:\n```\ndistinct(q)\n```\n\n----------------------------------------\n\nTITLE: Rounding Up Values with Ceil Transformation in VictoriaMetrics PromQL\nDESCRIPTION: The ceil function rounds up each value in the input time series q to the nearest upper integer. Supported by PromQL, this function is useful for processing decimal data into integer steps, and may be combined with other transformations.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_86\n\nLANGUAGE: PromQL\nCODE:\n```\n`ceil(q)`\n```\n\n----------------------------------------\n\nTITLE: Collecting Memory Profile from vminsert\nDESCRIPTION: This Bash command is used to obtain memory profiling data from the vminsert component. It utilizes curl to access and save the profile data locally. Substitute '0.0.0.0' with the proper hostname if necessary.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/Cluster-VictoriaMetrics.md#2025-04-22_snippet_27\n\nLANGUAGE: bash\nCODE:\n```\ncurl http://0.0.0.0:8480/debug/pprof/heap > mem.pprof\n```\n\n----------------------------------------\n\nTITLE: Calculating Increase Rollups (Min/Max/Avg) in MetricsQL\nDESCRIPTION: Calculates the minimum, maximum, and average of increases between adjacent raw samples within a lookbehind window `d`. Results include `rollup=\\\"min\\\"`, `rollup=\\\"max\\\"`, and `rollup=\\\"avg\\\"` labels. An optional second argument (\\\"min\\\", \\\"max\\\", or \\\"avg\\\") selects one result and omits the label. Metric names are stripped unless `keep_metric_names` is used. Typically applied to counters.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_58\n\nLANGUAGE: metricsql\nCODE:\n```\nrollup_increase(series_selector[d])\n```\n\n----------------------------------------\n\nTITLE: Standard Deviation Calculator in PromQL\nDESCRIPTION: Calculates standard deviation of raw samples over a time window.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_66\n\nLANGUAGE: PromQL\nCODE:\n```\nstddev_over_time(series_selector[d])\n```\n\n----------------------------------------\n\nTITLE: Filtering Log Streams by Label Using _stream Prefix - VictoriaLogs LogSQL\nDESCRIPTION: This snippet shows the use of the _stream: prefix with a stream filter to clearly indicate filtering on the '_stream' log field, functionally equivalent to a regular stream filter. Requires the VictoriaLogs platform with the relevant field in the dataset. Parameters and outputs are the same as the standard stream filter.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_32\n\nLANGUAGE: logsql\nCODE:\n```\n_stream:{app=\"nginx\"}\n```\n\n----------------------------------------\n\nTITLE: Raw Sample Format in Prometheus\nDESCRIPTION: Example of a raw sample with metric name, labels, value, and timestamp in Prometheus text exposition format.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/keyConcepts/keyConcepts.md#2025-04-22_snippet_2\n\nLANGUAGE: prometheus\nCODE:\n```\nrequests_total{path=\"/\", code=\"200\"} 123 4567890\n```\n\n----------------------------------------\n\nTITLE: Applying Aggregate Functions to Multiple Arguments in MetricsQL\nDESCRIPTION: Demonstrates that MetricsQL aggregate functions like `avg` can accept an arbitrary number of query arguments. This calculates the point-wise average across the time series returned by `q1`, `q2`, and `q3`.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_7\n\nLANGUAGE: MetricsQL\nCODE:\n```\navg(q1, q2, q3)\n```\n\n----------------------------------------\n\nTITLE: Prefix Filter with Escaped Double Quotes - VictoriaMetrics LogsQL - LogSQL\nDESCRIPTION: Demonstrates searching for log fields whose value is prefixed with a double-quoted string. The example uses single quotes to encapsulate the prefix when it contains double quotes. Dependencies: None beyond VictoriaMetrics LogsQL. Input: logs; Output: messages where relevant field starts with '\"foo\":\"bar'.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_48\n\nLANGUAGE: logsql\nCODE:\n```\n'\"foo\":\"bar'*\n```\n\n----------------------------------------\n\nTITLE: Multi-tenant HTTP Query Example\nDESCRIPTION: Example of using curl to query metrics with extra tenant filters via HTTP API.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/Cluster-VictoriaMetrics.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'http://vmselect:8481/select/multitenant/prometheus/api/v1/query' \\\n  -d 'query=up' \\\n  -d 'extra_filters[]={vm_account_id=\"7\",vm_project_id=\"9\"}' \\\n  -d 'extra_filters[]={vm_account_id=\"42\"}'\n```\n\n----------------------------------------\n\nTITLE: Keeping Targets If Source Labels Are Equal with 'keep_if_equal' - YAML\nDESCRIPTION: Demonstrates the 'keep_if_equal' action, which retains only those entries where all listed source labels (e.g., 'instance', 'host') have equal values. No external dependencies—only the enhanced relabeling engine is required. Parameters: 'action' and 'source_labels'. Input: label sets for each target; output: filtered targets where values of 'instance' and 'host' match. Applicable for fine-grained filtering in discovery setups.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmagent.md#2025-04-22_snippet_30\n\nLANGUAGE: YAML\nCODE:\n```\n- action: keep_if_equal\n  source_labels: [\"instance\", \"host\"]\n```\n\n----------------------------------------\n\nTITLE: Importing Data in DataDog v2 Format - Shell\nDESCRIPTION: This snippet demonstrates importing metric data in DataDog v2 format into VictoriaMetrics. Suitable for both single-node and clustered configurations, it uses curl with JSON metrics data to POST, including timestamped points and tags.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/url-examples.md#2025-04-22_snippet_15\n\nLANGUAGE: sh\nCODE:\n```\necho '\n{\n  \"series\": [\n    {\n      \"metric\": \"system.load.1\",\n      \"type\": 0,\n      \"points\": [\n        {\n          \"timestamp\": 0,\n          \"value\": 0.7\n        }\n      ],\n      \"resources\": [\n        {\n          \"name\": \"dummyhost\",\n          \"type\": \"host\"\n        }\n      ],\n      \"tags\": [\"environment:test\"]\n    }\n  ]\n}\n' | curl -X POST -H 'Content-Type: application/json' --data-binary @- http://localhost:8428/datadog/api/v2/series\n```\n\nLANGUAGE: sh\nCODE:\n```\necho '\n{\n  \"series\": [\n    {\n      \"metric\": \"system.load.1\",\n      \"type\": 0,\n      \"points\": [\n        {\n          \"timestamp\": 0,\n          \"value\": 0.7\n        }\n      ],\n      \"resources\": [\n        {\n          \"name\": \"dummyhost\",\n          \"type\": \"host\"\n        }\n      ],\n      \"tags\": [\"environment:test\"]\n    }\n  ]\n}\n' | curl -X POST -H 'Content-Type: application/json' --data-binary @- 'http://<vminsert>:8480/insert/0/datadog/api/v2/series'\n```\n\n----------------------------------------\n\nTITLE: Configuring Serverless DataDog Plugin for VictoriaMetrics Endpoint - YAML\nDESCRIPTION: This YAML snippet configures the DataDog plugin in a serverless deployment. It disables log ingestion (since it's unsupported), sets a dummy API key, and specifies the VictoriaMetrics endpoint via the DD_DD_URL environment variable. This configuration is needed for Serverless frameworks using DataDog plugin integration with VictoriaMetrics, and should be placed within serverless.yaml. Replace <<vm-url>> with your actual VictoriaMetrics endpoint.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/README.md#2025-04-22_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\ncustom:\\n  datadog:\\n    enableDDLogs: false             # Disabled not supported DD logs\\n    apiKey: fakekey                 # Set any key, otherwise plugin fails\\nprovider:\\n  environment:\\n    DD_DD_URL: <<vm-url>>/datadog   # VictoriaMetrics endpoint for DataDog\n```\n\n----------------------------------------\n\nTITLE: Base 10 Logarithm Calculation with PromQL\nDESCRIPTION: Using `log10(q)`, users calculate the log base 10 for each point within time series `q`. PromQL’s support proves advantageous in logarithmic-scale plotting of dataset trends.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_91\n\nLANGUAGE: PromQL\nCODE:\n```\n`log10(q)`\n```\n\n----------------------------------------\n\nTITLE: Calculating Sine of Time Series Data - MetricsQL (English)\nDESCRIPTION: The `sin(q)` function returns the sine of every data point in each time series in `q`. Useful for mathematical modeling or testing periodic signals. Metric names are usually stripped, unless `keep_metric_names` is specified. Supported by MetricsQL.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/MetricsQL.md#2025-04-22_snippet_107\n\nLANGUAGE: MetricsQL\nCODE:\n```\n`sin(q)`\n```\n\n----------------------------------------\n\nTITLE: Filtering Logs by Word Content\nDESCRIPTION: Examples of filtering logs containing specific words with time range limitations and sorting.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/logsql-examples.md#2025-04-22_snippet_1\n\nLANGUAGE: logsql\nCODE:\n```\nerror\n```\n\nLANGUAGE: logsql\nCODE:\n```\nerror _time:1h\n```\n\nLANGUAGE: logsql\nCODE:\n```\nerror -kubernetes _time:1h\n```\n\nLANGUAGE: logsql\nCODE:\n```\nerror _time:1h | sort by (_time)\n```\n\n----------------------------------------\n\nTITLE: Displaying InfluxDB migration options\nDESCRIPTION: This command shows the help information for the InfluxDB migration feature in vmctl, displaying both InfluxDB-specific options and VictoriaMetrics destination options.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmctl.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ ./vmctl influx --help\nOPTIONS:\n   --influx-addr value              InfluxDB server addr (default: \"http://localhost:8086\")\n   --influx-user value              InfluxDB user [$INFLUX_USERNAME]\n...\n   --vm-addr vmctl                             VictoriaMetrics address to perform import requests.\nShould be the same as --httpListenAddr value for single-node version or vminsert component.\nWhen importing into the clustered version do not forget to set additionally --vm-account-id flag.\nPlease note, that vmctl performs initial readiness check for the given address by checking `/health` endpoint. (default: \"http://localhost:8428\")\n   --vm-user value        VictoriaMetrics username for basic auth [$VM_USERNAME]\n   --vm-password value    VictoriaMetrics password for basic auth [$VM_PASSWORD]\n```\n\n----------------------------------------\n\nTITLE: Counting Matching Logs in LogsQL\nDESCRIPTION: This query demonstrates how to count the number of logs matching a specific query using the count() stats function.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/logsql-examples.md#2025-04-22_snippet_6\n\nLANGUAGE: logsql\nCODE:\n```\nyour_query_here | count()\n```\n\n----------------------------------------\n\nTITLE: Checking Ingestion Rate in VictoriaMetrics (Before Replication)\nDESCRIPTION: A MetricsQL query to determine the sample ingestion rate in VictoriaMetrics before replication over the last 24 hours. Used for capacity planning and performance monitoring.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/guides/understand-your-setup-size/README.md#2025-04-22_snippet_4\n\nLANGUAGE: metricsql\nCODE:\n```\nsum(rate(vm_rows_inserted_total[24h]))\n```\n\n----------------------------------------\n\nTITLE: Initializing a logr Logger in Go Main Function\nDESCRIPTION: Shows the typical setup in a Go application's `main` function where a concrete logging implementation (represented by `logimpl`) is chosen and instantiated to create the root `logr.Logger`. This logger instance is then intended to be passed down to other parts of the application. It depends on the chosen logging implementation (`logimpl` package) and the `logr` API.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/go-logr/logr/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n    func main() {\n        // ... other setup code ...\n\n        // Create the \"root\" logger.  We have chosen the \"logimpl\" implementation,\n        // which takes some initial parameters and returns a logr.Logger.\n        logger := logimpl.New(param1, param2)\n\n        // ... other setup code ...\n```\n```\n\n----------------------------------------\n\nTITLE: Limited Sorted Time-Limited Search in LogsQL\nDESCRIPTION: A LogsQL query that limits results to the most recent 10 error logs from the last 5 minutes, sorted in descending order by timestamp.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_7\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m error | sort by (_time) desc | limit 10\n```\n\n----------------------------------------\n\nTITLE: Getting Day of Year from Timestamps with VictoriaMetrics PromQL\nDESCRIPTION: The day_of_year function provides the day-of-year value (1 to 365, or 1 to 366 for leap years) for each unix timestamp in the query q. Metric names are removed unless keep_metric_names is specified. Inputs should be unix timestamp time series; output is integer day of year. Supported by PromQL.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_94\n\nLANGUAGE: PromQL\nCODE:\n```\n`day_of_year(q)`\n```\n\n----------------------------------------\n\nTITLE: Configuring Filtered Downsampling in VictoriaMetrics\nDESCRIPTION: Command-line flag that applies downsampling only to time series matching a specific filter. This example downsamples data with names starting with 'node_' or 'process_' prefixes to one-minute intervals for data older than one day.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/README.md#2025-04-22_snippet_70\n\nLANGUAGE: bash\nCODE:\n```\n-downsampling.period='{__name__=~\"(node|process)_.*\"}:1d:1m'\n```\n\n----------------------------------------\n\nTITLE: Retrieving Top Queries Stats Across All Tenants\nDESCRIPTION: This URL endpoint on the `vmselect` component retrieves statistics about query performance across all tenants in the VictoriaMetrics cluster. It lists the most frequently executed queries and the queries that consume the most time, providing insights into query load.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/Cluster-VictoriaMetrics.md#2025-04-22_snippet_17\n\nLANGUAGE: url\nCODE:\n```\nhttp://<vmselect>:8481/api/v1/status/top_queries\n```\n\n----------------------------------------\n\nTITLE: Delete Log Fields with LogSQL Command in VictoriaMetrics\nDESCRIPTION: Illustrates the usage of the `delete` pipe for removing specified fields from log data outputs. It provides alternatives like `drop`, `del`, and `rm` for syntax flexibility. Useful for cleaning log outputs by removing unnecessary fields, it effectively handles defined fields within log entries.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_82\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m | delete host, app\n```\n\n----------------------------------------\n\nTITLE: Querying Histogram Share Below Threshold using MetricsQL\nDESCRIPTION: Illustrates calculating the estimated fraction of values below a specific threshold (0.5 in this case) from VictoriaMetrics histogram buckets using the `histogram_share` function in MetricsQL. It aggregates the increase of the specified histogram buckets (`request_duration_seconds:60s_histogram_bucket`) over the last hour (`[1h]`) grouped by the `vmrange` label.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/stream-aggregation.md#2025-04-22_snippet_11\n\nLANGUAGE: metricsql\nCODE:\n```\nhistogram_share(0.5, sum(increase(request_duration_seconds:60s_histogram_bucket[1h])) by (vmrange))\n```\n\n----------------------------------------\n\nTITLE: Prometheus-Compatible Conditional 'keep' Rule - YAML\nDESCRIPTION: This snippet illustrates the Prometheus-compatible way of achieving conditional keep actions within relabeling rules, by leveraging 'source_labels', 'regex', and 'action'. It requires only Prometheus or compatible relabeling syntax. 'source_labels' define which labels to examine, 'regex' sets matching criteria (using a semicolon-delimited pattern), and 'action' specifies the transformation. Inputs are series with labels '__name__' and 'bar', and only those matching 'foo;baz' are kept. Suitable for YAML config files.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmagent.md#2025-04-22_snippet_25\n\nLANGUAGE: YAML\nCODE:\n```\n- action: keep\n  source_labels: [__name__, bar]\n  regex: 'foo;baz'\n```\n\n----------------------------------------\n\nTITLE: Unpacking JSON from Default Field using LogSQL\nDESCRIPTION: This LogSQL query selects logs from the last 5 minutes (`_time:5m`) and unpacks JSON key-value pairs found within the default `_msg` field into separate fields in the query results. Existing fields with the same names as the unpacked keys will be overwritten.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_149\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m | unpack_json from _msg\n```\n\n----------------------------------------\n\nTITLE: Verifying Imported Time Series Data in VictoriaMetrics Cluster using Shell\nDESCRIPTION: Sends a POST request using `curl` to the `vmselect` `/api/v1/export` endpoint with the `match[]` parameter for the specific time series (`node_memory_MemTotal_bytes`). This checks if the previously imported data with modified values is queryable and reflects the update.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/guides/guide-delete-or-replace-metrics/README.md#2025-04-22_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\ncurl -X POST -g http://vmselect:8481/select/0/prometheus/api/v1/export -d match[]=node_memory_MemTotal_bytes\n```\n\n----------------------------------------\n\nTITLE: Using MapCarrier for In-Memory Propagation in Go\nDESCRIPTION: Use the new MapCarrier in the propagation package to hold propagated cross-cutting concerns as a map[string]string in memory.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-22_snippet_47\n\nLANGUAGE: Go\nCODE:\n```\nimport \"go.opentelemetry.io/otel/propagation\"\n\ncarrier := propagation.MapCarrier{\n    \"key\": \"value\",\n}\n```\n\n----------------------------------------\n\nTITLE: Unpacking Logfmt from Specific Field using LogSQL\nDESCRIPTION: This LogSQL query selects logs from the last 5 minutes (`_time:5m`) and unpacks logfmt key-value pairs found within the specified `_msg` field into separate fields in the query results. Existing fields with the same names as the unpacked keys will be overwritten.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_157\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m | unpack_logfmt from _msg\n```\n\n----------------------------------------\n\nTITLE: Querying Quantiles from Aggregated Histogram Buckets using MetricsQL\nDESCRIPTION: Demonstrates querying the 90th percentile from histogram buckets that have been pre-aggregated using stream aggregation (specifically, the `rate_sum` output as shown in the previous example). It uses the `histogram_quantile` function, summing the aggregated bucket values (`http_request_duration_seconds_bucket:5m_without_instance_rate_sum`) grouped by the `le` label. This approach requires that the original histograms being aggregated had identically configured `le` labels.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/stream-aggregation.md#2025-04-22_snippet_14\n\nLANGUAGE: metricsql\nCODE:\n```\nhistogram_quantile(0.9, sum(http_request_duration_seconds_bucket:5m_without_instance_rate_sum) by(le))\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Implicit Subquery Expansion in MetricsQL - MetricsQL\nDESCRIPTION: This snippet illustrates how the query `rate(sum(some_metric))` is internally transformed by VictoriaMetrics into a MetricsQL subquery with `default_rollup` and range vector selectors. It explains implicit query conversion behavior, where a simple aggregation followed by a rate function results in more complex subquery logic that may not yield expected outcomes. No external dependencies are required, but understanding MetricsQL query semantics is necessary; the intended input is a time series metric, and the expanded query outputs the computed rate over the default interval. Users should be aware that such expansions may impact query performance and correctness.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/Troubleshooting.md#2025-04-22_snippet_2\n\nLANGUAGE: metricsql\nCODE:\n```\nrate(\n  sum(\n    default_rollup(some_metric[1i])\n  )[1i:1i]\n)\n```\n\n----------------------------------------\n\nTITLE: Using topk_min Aggregate Function in MetricsQL\nDESCRIPTION: The topk_min function returns up to k time series with the biggest minimums. It can optionally include a sum of remaining series with a specified label.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_153\n\nLANGUAGE: metricsql\nCODE:\n```\ntopk_min(3, sum(process_resident_memory_bytes) by (job), \"job=other\")\n```\n\n----------------------------------------\n\nTITLE: Defining Reusable Templates with Go text/template in vmalert\nDESCRIPTION: Defines a reusable template named 'grafana.filter' using Go's text/template syntax, suitable for reference in annotations or other templates within vmalert configuration. This snippet demonstrates label extraction and conditional formatting using template built-in functions and custom logic. Dependencies: vmalert with the -rule.templates flag; templates require .arg0 input, and their parameters are provided via the args helper.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmalert.md#2025-04-22_snippet_4\n\nLANGUAGE: Go (text/template)\nCODE:\n```\n{{ define \\\"grafana.filter\\\" -}}\n  {{- $labels := .arg0 -}}\n  {{- range $name, $label := . -}}\n    {{- if (ne $name \\\"arg0\\\") -}}\n      {{- ( or (index $labels $label) \\\"All\\\" ) | printf \\\"&var-%s=%s\\\" $label -}}\n    {{- end -}}\n  {{- end -}}\n{{- end -}}\n```\n\n----------------------------------------\n\nTITLE: Calculating Cosine in MetricsQL\nDESCRIPTION: A transform function computing the cosine for each data point `v` in the time series returned by `q`. If `q` is a series selector, `default_rollup()` is applied first. Metric names are stripped by default; use `keep_metric_names` to preserve them. Supported by PromQL.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_81\n\nLANGUAGE: MetricsQL\nCODE:\n```\n`cos(q)`\n```\n\n----------------------------------------\n\nTITLE: Configuring vmselect with Storage Node Groups and Replication Factor\nDESCRIPTION: Command to run vmselect with three vmstorage groups (g1, g2, g3), each containing three hosts. The replication factor of 2 ensures the system continues returning full responses if one node per group is unavailable.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/Cluster-VictoriaMetrics.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n/path/to/vmselect \\\n -replicationFactor=2 \\\n -storageNode=g1/host1,g1/host2,g1/host3 \\\n -storageNode=g2/host4,g2/host5,g2/host6 \\\n -storageNode=g3/host7,g3/host8,g3/host9\n```\n\n----------------------------------------\n\nTITLE: Unpacking JSON Fields with a Result Prefix using LogSQL\nDESCRIPTION: This LogSQL query selects logs from the last 5 minutes (`_time:5m`) and unpacks all fields from the JSON stored in the `foo` field. The `result_prefix \"foo_\"` option ensures that all unpacked field names are prefixed with `foo_`, helping to avoid naming collisions with existing fields.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_155\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m | unpack_json from foo result_prefix \"foo_\"\n```\n\n----------------------------------------\n\nTITLE: Importing Gzipped Prometheus Format Data from File using Shell\nDESCRIPTION: Imports Prometheus exposition format data from a gzipped file (`prometheus_data.gz`) into a destination VictoriaMetrics instance. The `Content-Encoding: gzip` header signals the compression, and the `-T` flag specifies the file upload via POST to the `/api/v1/import/prometheus` endpoint. Requires `curl` and the `prometheus_data.gz` file.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/README.md#2025-04-22_snippet_60\n\nLANGUAGE: sh\nCODE:\n```\n# Import gzipped data to <destination-victoriametrics>:\ncurl -X POST -H 'Content-Encoding: gzip' http://destination-victoriametrics:8428/api/v1/import/prometheus -T prometheus_data.gz\n```\n\n----------------------------------------\n\nTITLE: LogsQL Query Structure Example\nDESCRIPTION: Shows the simplified LogsQL query structure using filters and pipes.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/sql-to-logsql.md#2025-04-22_snippet_1\n\nLANGUAGE: logsql\nCODE:\n```\n<filters>\n  | <optional_pipe1>\n  | ...\n  | <optional_pipeN>\n```\n\n----------------------------------------\n\nTITLE: Efficiently Compressing a Single Buffer with S2 EncodeBuffer in Go\nDESCRIPTION: Shows a slightly more efficient way to compress a single block of data (`src []byte`) as an S2 stream using `enc.EncodeBuffer()`. The S2 encoder takes ownership of the input buffer `src` until `Flush` or `Close` is called. This method should typically be used only once per stream; for multiple blocks, use the standard `io.Writer` interface.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/klauspost/compress/s2/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc EncodeStream(src []byte, dst io.Writer) error {\n    enc := s2.NewWriter(dst)\n    // The encoder owns the buffer until Flush or Close is called.\n    err := enc.EncodeBuffer(src)\n    if err != nil {\n        enc.Close()\n        return err\n    }\n    // Blocks until compression is done.\n    return enc.Close()\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Median Absolute Deviation (MAD) Over Range - MetricsQL (English)\nDESCRIPTION: The `range_mad(q)` function computes the median absolute deviation for the values in each time series produced by `q`. MAD is a robust measure of variability and is less sensitive to outliers than standard deviation. Returns one MAD value per series.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/MetricsQL.md#2025-04-22_snippet_85\n\nLANGUAGE: MetricsQL\nCODE:\n```\n`range_mad(q)`\n```\n\n----------------------------------------\n\nTITLE: Searching Graphite Metrics - Shell\nDESCRIPTION: Illustrates how to search for Graphite metrics within VictoriaMetrics via HTTP POST. It is applicable for both single-node and clustered deployments. This assists in fetching specific metrics using Graphite-compatible servers.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/url-examples.md#2025-04-22_snippet_17\n\nLANGUAGE: sh\nCODE:\n```\ncurl http://localhost:8428/graphite/metrics/find -d 'query=vm_http_request_errors_total'\n```\n\nLANGUAGE: sh\nCODE:\n```\ncurl http://<vmselect>:8481/select/0/graphite/metrics/find -d 'query=vm_http_request_errors_total'\n```\n\n----------------------------------------\n\nTITLE: Querying Dropped Samples Due to Series Limit with MetricsQL\nDESCRIPTION: This MetricsQL query identifies targets that have dropped samples during scrapes because the unique series limit was exceeded. It sums the `scrape_series_limit_samples_dropped` metric over the last hour and alerts if the sum is greater than 0, indicating at least one sample was dropped. This requires the series limit to be configured.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmagent.md#2025-04-22_snippet_22\n\nLANGUAGE: metricsql\nCODE:\n```\nsum_over_time(scrape_series_limit_samples_dropped[1h]) > 0\n```\n\n----------------------------------------\n\nTITLE: Correcting Boolean Command-Line Flag Parsing\nDESCRIPTION: Highlights a bugfix preventing VictoriaMetrics components from starting if boolean command-line flags are improperly set using the format '-boolFlagName value'. The correct format '-boolFlagName=value' must be used instead to avoid silent incomplete parsing (issue #4845).\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/changelog/CHANGELOG_2023.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Incorrect format (leads to parsing issues)\n-boolFlagName value\n\n# Correct format\n-boolFlagName=value\n```\n\n----------------------------------------\n\nTITLE: Running VictoriaLogs in Docker Container\nDESCRIPTION: Docker command to run VictoriaLogs container with port mapping and volume mounting for data persistence.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/QuickStart.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ndocker run --rm -it -p 9428:9428 -v ./victoria-logs-data:/victoria-logs-data \\\n  docker.io/victoriametrics/victoria-logs:v1.19.0-victorialogs -storageDataPath=victoria-logs-data\n```\n\n----------------------------------------\n\nTITLE: Time-Limited Search with Implicit AND in LogsQL\nDESCRIPTION: A LogsQL query equivalent to the previous example but omitting the explicit AND operator, demonstrating LogsQL's implicit AND behavior.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_5\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m error\n```\n\n----------------------------------------\n\nTITLE: Configuring mTLS-Based Request Routing in vmauth Enterprise (YAML)\nDESCRIPTION: Illustrates an Enterprise feature of `vmauth` for routing requests based on client TLS certificate fields. This configuration routes requests based on the `organizational_unit` (OU) field in the certificate. Clients with `OU=finance` are directed to one backend, while clients with `OU=devops` are sent to another. This requires mTLS protection to be enabled.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmauth.md#2025-04-22_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nusers:\n- mtls:\n    organizational_unit: finance\n  url_prefix: \"http://victoriametrics-finance:8428\"\n- mtls:\n    organizational_unit: devops\n  url_prefix: \"http://victoriametrics-devops:8428\"\n```\n\n----------------------------------------\n\nTITLE: Modifying Labels with Regex Using label_replace Function\nDESCRIPTION: The label_replace function applies a regex to source label and stores the replacement in destination label if the regex matches. The replacement may contain references to regex captures like $1, $2.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_128\n\nLANGUAGE: metricsql\nCODE:\n```\nlabel_replace(q, \"dst_label\", \"replacement\", \"src_label\", \"regex\")\n```\n\nLANGUAGE: metricsql\nCODE:\n```\nlabel_replace(up{job=\"node-exporter\"}, \"foo\", \"bar-$1\", \"job\", \"node-(.+)\")\n```\n\n----------------------------------------\n\nTITLE: Mathematical Transform Functions in MetricsQL\nDESCRIPTION: Set of mathematical operations for time series data, including rounding functions (round, floor, ceil) and resource utilization calculation.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_126\n\nLANGUAGE: markdown\nCODE:\n```\n#### round\n\n`round(q, nearest)` is a [transform function](#transform-functions), which rounds every point of every time series returned by `q` to the `nearest` multiple.\nIf `nearest` is missing then the rounding is performed to the nearest integer.\n\nThis function is supported by PromQL.\n\nSee also [floor](#floor) and [ceil](#ceil).\n```\n\nLANGUAGE: markdown\nCODE:\n```\n#### ru\n\n`ru(free, max)` is a [transform function](#transform-functions), which calculates resource utilization in the range `[0%...100%]` for the given `free` and `max` resources.\nFor instance, `ru(node_memory_MemFree_bytes, node_memory_MemTotal_bytes)` returns memory utilization over [node_exporter](https://github.com/prometheus/node_exporter) metrics.\n```\n\nLANGUAGE: markdown\nCODE:\n```\n#### scalar\n\n`scalar(q)` is a [transform function](#transform-functions), which returns `q` if `q` contains only a single time series. Otherwise, it returns nothing.\n\nThis function is supported by PromQL.\n```\n\nLANGUAGE: markdown\nCODE:\n```\n#### sgn\n\n`sgn(q)` is a [transform function](#transform-functions), which returns `1` if `v>0`, `-1` if `v<0` and `0` if `v==0` for every point `v`\nof every time series returned by `q`.\n\nMetric names are stripped from the resulting series. Add [keep_metric_names](#keep_metric_names) modifier in order to keep metric names.\n\nThis function is supported by PromQL.\n```\n\n----------------------------------------\n\nTITLE: Data Smoothing Function in MetricsQL\nDESCRIPTION: The smooth_exponential function applies exponential moving average smoothing to time series data with a configurable smoothing factor.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_128\n\nLANGUAGE: markdown\nCODE:\n```\n#### smooth_exponential\n\n`smooth_exponential(q, sf)` is a [transform function](#transform-functions), which smooths points per each time series returned\nby `q` using [exponential moving average](https://en.wikipedia.org/wiki/Moving_average#Exponential_moving_average) with the given smooth factor `sf`.\n```\n\n----------------------------------------\n\nTITLE: Importing Data in DataDog v1 Format - Shell\nDESCRIPTION: Shows how to import metrics in DataDog v1 format into VictoriaMetrics for both single-node and clustered setups. This utilizes curl POST requests with data in JSON format to send metrics like 'system.load.1', supporting tags and data structure specific to DataDog v1 integration.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/url-examples.md#2025-04-22_snippet_14\n\nLANGUAGE: sh\nCODE:\n```\necho '\n{\n  \"series\": [\n    {\n      \"host\": \"test.example.com\",\n      \"interval\": 20,\n      \"metric\": \"system.load.1\",\n      \"points\": [[\n        0,\n        0.5\n      ]],\n      \"tags\": [\n        \"environment:test\"\n      ],\n      \"type\": \"rate\"\n    }\n  ]\n}\n' | curl -X POST -H 'Content-Type: application/json' --data-binary @- http://localhost:8428/datadog/api/v1/series\n```\n\nLANGUAGE: sh\nCODE:\n```\necho '\n{\n  \"series\": [\n    {\n      \"host\": \"test.example.com\",\n      \"interval\": 20,\n      \"metric\": \"system.load.1\",\n      \"points\": [[\n        0,\n        0.5\n      ]],\n      \"tags\": [\n        \"environment:test\"\n      ],\n      \"type\": \"rate\"\n    }\n  ]\n}\n' | curl -X POST -H 'Content-Type: application/json' --data-binary @- 'http://<vminsert>:8480/insert/0/datadog/api/v1/series'\n```\n\n----------------------------------------\n\nTITLE: Retrieving most recent logs with filtering in LogsQL\nDESCRIPTION: Query that returns the 10 most recent logs containing the word 'error' from the last 5 minutes, sorted by timestamp in descending order.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/logsql-examples.md#2025-04-22_snippet_18\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m error | first 10 by (_time desc)\n```\n\n----------------------------------------\n\nTITLE: Configuring URL Parameters for Rule Groups in vmalert\nDESCRIPTION: YAML configuration showing how to set additional URL parameters for specific groups of rules. This example sets denyPartialResponse and extra_label parameters which will override any conflicting parameters set in datasource.url.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmalert.md#2025-04-22_snippet_28\n\nLANGUAGE: yaml\nCODE:\n```\ngroups:\n  - name: TestGroup\n    params:\n      denyPartialResponse: [\"true\"]\n      extra_label: [\"env=dev\"]\n```\n\n----------------------------------------\n\nTITLE: Fluentd Configuration with Compression for VictoriaLogs\nDESCRIPTION: Configuration with GZIP compression enabled to reduce network bandwidth usage when sending logs across datacenters.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/data-ingestion/Fluentd.md#2025-04-22_snippet_3\n\nLANGUAGE: fluentd\nCODE:\n```\n<match **>\n  @type http\n  endpoint \"http://localhost:9428/insert/jsonline&ignore_fields=log.offset,event.original\"\n  headers {\"VL-Msg-Field\": \"log\", \"VL-Time-Field\": \"time\", \"VL-Stream-Fields\": \"path\"}\n  compress gzip\n</match>\n```\n\n----------------------------------------\n\nTITLE: Trimming Outliers Based on Z-Score - MetricsQL (English)\nDESCRIPTION: The `range_trim_zscore(z, q)` function removes data points from each time series where the absolute difference from average exceeds `z` times standard deviation. Used for robust cleaning and anomaly mitigation.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/MetricsQL.md#2025-04-22_snippet_96\n\nLANGUAGE: MetricsQL\nCODE:\n```\n`range_trim_zscore(z, q)`\n```\n\n----------------------------------------\n\nTITLE: Preserving Metric Names After a Binary Operation using `keep_metric_names` in MetricsQL\nDESCRIPTION: Shows the `keep_metric_names` modifier applied to a binary operation (`/`). This modifier ensures that the resulting time series retain their original metric names (`foo`, `bar`) after the division.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_22\n\nLANGUAGE: metricsql\nCODE:\n```\n({__name__=~\"foo|bar\"} / 10) keep_metric_names\n```\n\n----------------------------------------\n\nTITLE: Fluentbit Configuration with Multi-Tenancy for VictoriaLogs\nDESCRIPTION: Fluentbit configuration that specifies tenant information through HTTP headers. This configuration directs logs to a specific tenant (AccountID=12, ProjectID=23) in a multi-tenant VictoriaLogs setup.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/data-ingestion/Fluentbit.md#2025-04-22_snippet_4\n\nLANGUAGE: fluentbit\nCODE:\n```\n[Output]\n     Name http\n     Match *\n     host localhost\n     port 9428\n     uri /insert/jsonline?_stream_fields=stream&_msg_field=log&_time_field=date\n     format json_lines\n     json_date_format iso8601\n     header AccountID 12\n     header ProjectID 23\n```\n\n----------------------------------------\n\nTITLE: Generating Pseudo-Random Numbers (Normal Distribution) - MetricsQL (English)\nDESCRIPTION: The `rand_normal(seed)` function returns pseudo-random numbers distributed according to the normal (Gaussian) distribution. The optional `seed` argument allows for result reproducibility. Suitable for simulations and test loads requiring normally distributed values.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/MetricsQL.md#2025-04-22_snippet_80\n\nLANGUAGE: MetricsQL\nCODE:\n```\n`rand_normal(seed)`\n```\n\n----------------------------------------\n\nTITLE: Configuring Float64 Observer Callbacks using WithFloat64Callback in Go\nDESCRIPTION: Introduces the `WithFloat64Callback` option within the `go.opentelemetry.io/otel/metric/instrument` package. This option allows developers to provide and configure `float64` callback functions when creating Observer instruments.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-22_snippet_8\n\nLANGUAGE: Go\nCODE:\n```\ngo.opentelemetry.io/otel/metric/instrument\n// Option: WithFloat64Callback\n```\n\n----------------------------------------\n\nTITLE: Rounding Values Down with PromQL\nDESCRIPTION: The `floor(q)` function rounds each point in the time series from `q` down to the nearest integer. It is supported by PromQL and is used in scenarios where approximation to lower bounds is needed, such as quantifying incomplete sets.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_77\n\nLANGUAGE: PromQL\nCODE:\n```\n`floor(q)`\n```\n\n----------------------------------------\n\nTITLE: Calculating Average Duration in LogsQL\nDESCRIPTION: This query calculates the average value for the 'duration' field over logs for the last 5 minutes using the avg stats function.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_175\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m | stats avg(duration) avg_duration\n```\n\n----------------------------------------\n\nTITLE: Decompressing Data Streams with klauspost/compress/zstd in Go\nDESCRIPTION: Shows how to use the klauspost/compress/zstd Go package to decompress streaming data from an io.Reader and write the output to an io.Writer. The code demonstrates the acquisition and proper closing of the zstd Reader, concurrent decoding, and recommends closing the Reader to properly release internal resources and goroutines. Requires github.com/klauspost/compress/zstd as a dependency. Key parameters are the input and output streams; output is the decompressed stream, and errors are handled via Go's error reporting.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/klauspost/compress/zstd/README.md#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\nimport \"github.com/klauspost/compress/zstd\"\n\nfunc Decompress(in io.Reader, out io.Writer) error {\n    d, err := zstd.NewReader(in)\n    if err != nil {\n        return err\n    }\n    defer d.Close()\n    \n    // Copy content...\n    _, err = io.Copy(out, d)\n    return err\n}\n```\n\n----------------------------------------\n\nTITLE: Using eval Alias for math Pipe in LogSQL\nDESCRIPTION: The eval keyword can be used instead of math for convenience. This example calculates duration_msecs by multiplying duration_secs by 1000.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_117\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m | eval (duration_secs * 1000) as duration_msecs\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Client Secret using azidentity in Go\nDESCRIPTION: This Go snippet shows the modern way to authenticate using a client secret with the `azidentity` library. It directly creates a `ClientSecretCredential` using the tenant ID, client ID, and secret. This credential is then passed directly to the constructor of a newer Azure SDK client (e.g., `armsubscriptions.NewClient`).\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/Azure/azure-sdk-for-go/sdk/azidentity/MIGRATION.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"github.com/Azure/azure-sdk-for-go/sdk/azidentity\"\n    \"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/resources/armsubscriptions\"\n)\n\ncred, err := azidentity.NewClientSecretCredential(tenantID, clientID, secret, nil)\nhandle(err)\n\nclient, err := armsubscriptions.NewClient(cred, nil)\nhandle(err)\n```\n\n----------------------------------------\n\nTITLE: Sending Graphite Data to VictoriaMetrics Cluster via Netcat (Shell)\nDESCRIPTION: This shell command streams Graphite-format data to a VictoriaMetrics cluster's vminsert node via netcat on port 2003. The transfer requires VictoriaMetrics cluster mode with the Graphite receiver flag enabled, and assumes netcat is installed. The metric line includes the metric name, tags, value, and a generated timestamp; the target vminsert node is specified as the destination. On success, the Graphite data point is stored in the cluster.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/url-examples.md#2025-04-22_snippet_25\n\nLANGUAGE: sh\nCODE:\n```\necho \"foo.bar.baz;tag1=value1;tag2=value2 123 `date +%s`\" | nc -N http://<vminsert> 2003\n```\n\n----------------------------------------\n\nTITLE: Example Rules Configuration for vmalert-tool\nDESCRIPTION: YAML configuration file containing alerting and recording rules for use with vmalert-tool tests.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmalert-tool.md#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\ngroups:\n  - name: group1\n    rules:\n      - alert: InstanceDown\n        expr: up == 0\n        for: 5m\n        labels:\n          severity: page\n        annotations:\n          summary: \"Instance {{ $labels.instance }} down\"\n          description: \"{{ $labels.instance }} of job {{ $labels.job }} in cluster {{ $externalLabels.cluster }} has been down for more than 5 minutes.\"\n      - alert: AlwaysFiring\n        expr: 1\n\n  - name: group2\n    rules:\n      - record: job:test:count_over_time1m\n        expr: sum without(instance) (count_over_time(test[1m]))\n      - record: subquery_interval_test\n        expr: count_over_time(up[5m:])\n```\n\n----------------------------------------\n\nTITLE: Retrieving First Point in Range using range_first() in MetricsQL\nDESCRIPTION: The `range_first(q)` transform function returns the value of the very first data point within the selected time range for every time series specified by the query `q`.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_97\n\nLANGUAGE: MetricsQL\nCODE:\n```\nrange_first(q)\n```\n\n----------------------------------------\n\nTITLE: Calculating Lower Hoeffding Bound in Markdown\nDESCRIPTION: The snippet uses 'hoeffding_bound_lower' to compute the lower Hoeffding bound for a specified 'phi' in the range [0...1]. It is applicable for gauges and helps in statistical analysis of time series data.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/MetricsQL.md#2025-04-22_snippet_28\n\nLANGUAGE: Markdown\nCODE:\n```\n`hoeffding_bound_lower(phi, series_selector[d])` is a [rollup function](#rollup-functions), which calculates\\nlower [Hoeffding bound](https://en.wikipedia.org/wiki/Hoeffding%27s_inequality) for the given `phi` in the range `[0...1]`.\n```\n\n----------------------------------------\n\nTITLE: Using geomean_over_time Rollup Function in VictoriaMetrics\nDESCRIPTION: This function calculates the geometric mean over raw samples on the lookbehind window for each time series. It's typically applied to gauges and strips metric names unless keep_metric_names modifier is added.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_22\n\nLANGUAGE: markdown\nCODE:\n```\ngeomean_over_time(series_selector[d])\n```\n\n----------------------------------------\n\nTITLE: Replacing Substrings with Regular Expressions - LogSQL\nDESCRIPTION: The `replace_regexp` pipe replaces substrings matching a regular expression with a replacement string in a specified field. It supports RE2 syntax for regex and placeholder replacements. Dependencies include understanding of regex and VictoriaMetrics field syntax. Intended for detailed pattern matching and replacement across logs.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_123\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m | replace_regexp (\"host-(.+?)-foo\", \"$1\") at _msg\n```\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m | replace_regexp (\"host-(.+?)-foo\", \"$1\")\n```\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m | replace_regexp ('password: [^ ]+', '') at baz limit 1\n```\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m | replace_regexp if (user_type:=admin) (\"password: [^ ]+\", \"\") at foo\n```\n\n----------------------------------------\n\nTITLE: Share GT Over Time Function in PromQL\nDESCRIPTION: Returns share of raw samples greater than given threshold over a lookbehind window. Useful for SLI/SLO calculations.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_55\n\nLANGUAGE: promql\nCODE:\n```\nshare_gt_over_time(series_selector[d], gt)\n```\n\n----------------------------------------\n\nTITLE: Listing vmgateway Command-Line Flags (Shell Help Output)\nDESCRIPTION: Displays the help output generated by running the `./vmgateway -help` command. This output lists all available configuration flags, their data types, default values (where applicable), and a description of their function for customizing the vmgateway behavior. Flags cover authentication (JWT, OIDC, Public Key), datasource settings (URL, auth, TLS, query parameters), HTTP server configuration, rate limiting, and general operational parameters.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmgateway.md#2025-04-22_snippet_17\n\nLANGUAGE: shellhelp\nCODE:\n```\n  -auth.httpHeader string\n     HTTP header name to look for JWT authorization token (default \"Authorization\")\n  -auth.jwksEndpoints array\n     JWKS endpoints to fetch keys for JWT tokens signature verification\n     Supports an array of values separated by comma or specified via multiple flags.\n     Value can contain comma inside single-quoted or double-quoted string, {}, [] and () braces.\n  -auth.oidcDiscoveryEndpoints array\n     OpenID Connect discovery endpoints to fetch keys for JWT tokens signature verification\n     Supports an array of values separated by comma or specified via multiple flags.\n     Value can contain comma inside single-quoted or double-quoted string, {}, [] and () braces.\n  -auth.publicKeyFiles array\n     Path file with public key to verify JWT token signature\n     Supports an array of values separated by comma or specified via multiple flags.\n     Value can contain comma inside single-quoted or double-quoted string, {}, [] and () braces.\n  -auth.publicKeys array\n     Public keys to verify JWT token signature\n     Supports an array of values separated by comma or specified via multiple flags.\n     Value can contain comma inside single-quoted or double-quoted string, {}, [] and () braces.\n  -clusterMode\n     enable this for the cluster version\n  -datasource.appendTypePrefix\n     Whether to add type prefix to -datasource.url based on the query type. Set to true if sending different query types to the vmselect URL.\n  -datasource.basicAuth.password string\n     Optional basic auth password for -datasource.url\n  -datasource.basicAuth.passwordFile string\n     Optional path to basic auth password to use for -datasource.url\n  -datasource.basicAuth.username string\n     Optional basic auth username for -datasource.url\n  -datasource.bearerToken string\n     Optional bearer auth token to use for -datasource.url.\n  -datasource.bearerTokenFile string\n     Optional path to bearer token file to use for -datasource.url.\n  -datasource.disableKeepAlive\n     Whether to disable long-lived connections to the datasource. If true, disables HTTP keep-alive and will only use the connection to the server for a single HTTP request.\n  -datasource.disableStepParam\n     Whether to disable adding 'step' param to the issued instant queries. This might be useful when using vmalert with datasources that do not support 'step' param for instant queries, like Google Managed Prometheus. It is not recommended to enable this flag if you use vmalert with VictoriaMetrics.\n  -datasource.headers string\n     Optional HTTP extraHeaders to send with each request to the corresponding -datasource.url. For example, -datasource.headers='My-Auth:foobar' would send 'My-Auth: foobar' HTTP header with every request to the corresponding -datasource.url. Multiple headers must be delimited by '^^': -datasource.headers='header1:value1^^header2:value2'\n  -datasource.maxIdleConnections int\n     Defines the number of idle (keep-alive connections) to each configured datasource. Consider setting this value equal to the value: groups_total * group.concurrency. Too low a value may result in a high number of sockets in TIME_WAIT state. (default 100)\n  -datasource.oauth2.clientID string\n     Optional OAuth2 clientID to use for -datasource.url\n  -datasource.oauth2.clientSecret string\n     Optional OAuth2 clientSecret to use for -datasource.url\n  -datasource.oauth2.clientSecretFile string\n     Optional OAuth2 clientSecretFile to use for -datasource.url\n  -datasource.oauth2.endpointParams string\n     Optional OAuth2 endpoint parameters to use for -datasource.url . The endpoint parameters must be set in JSON format: {\"param1\":\"value1\",...,\"paramN\":\"valueN\"}\n  -datasource.oauth2.scopes string\n     Optional OAuth2 scopes to use for -datasource.url. Scopes must be delimited by ';'\n  -datasource.oauth2.tokenUrl string\n     Optional OAuth2 tokenURL to use for -datasource.url\n  -datasource.queryStep duration\n     How far a value can fallback to when evaluating queries. For example, if -datasource.queryStep=15s then param \"step\" with value \"15s\" will be added to every query. If set to 0, rule's evaluation interval will be used instead. (default 5m0s)\n  -datasource.roundDigits int\n     Adds \"round_digits\" GET param to datasource requests. In VM \"round_digits\" limits the number of digits after the decimal point in response values.\n  -datasource.showURL\n     Whether to avoid stripping sensitive information such as auth headers or passwords from URLs in log messages or UI and exported metrics. It is hidden by default, since it can contain sensitive info such as auth key\n  -datasource.tlsCAFile string\n     Optional path to TLS CA file to use for verifying connections to -datasource.url. By default, system CA is used\n  -datasource.tlsCertFile string\n     Optional path to client-side TLS certificate file to use when connecting to -datasource.url\n  -datasource.tlsInsecureSkipVerify\n     Whether to skip tls verification when connecting to -datasource.url\n  -datasource.tlsKeyFile string\n     Optional path to client-side TLS certificate key to use when connecting to -datasource.url\n  -datasource.tlsServerName string\n     Optional TLS server name to use for connections to -datasource.url. By default, the server name from -datasource.url is used\n  -datasource.url string\n     Datasource compatible with Prometheus HTTP API. It can be single node VictoriaMetrics or vmselect URL. Required parameter. E.g. http://127.0.0.1:8428 . See also -remoteRead.disablePathAppend and -datasource.showURL\n  -enable.auth\n     enables auth with jwt token\n  -enable.rateLimit\n     enables rate limiter\n  -enableTCP6\n     Whether to enable IPv6 for listening and dialing. By default, only IPv4 TCP and UDP are used\n  -envflag.enable\n     Whether to enable reading flags from environment variables in addition to the command line. Command line flag values have priority over values from environment vars. Flags are read only from the command line if this flag isn't set. See https://docs.victoriametrics.com/#environment-variables for more details\n  -envflag.prefix string\n     Prefix for environment variables if -envflag.enable is set\n  -eula\n     Deprecated, please use -license or -licenseFile flags instead. By specifying this flag, you confirm that you have an enterprise license and accept the ESA https://victoriametrics.com/legal/esa/ . This flag is available only in Enterprise binaries. See https://docs.victoriametrics.com/enterprise/\n  -filestream.disableFadvise\n     Whether to disable fadvise() syscall when reading large data files. The fadvise() syscall prevents from eviction of recently accessed data from OS page cache during background merges and backups. In some rare cases it is better to disable the syscall if it uses too much CPU\n  -flagsAuthKey value\n     Auth key for /flags endpoint. It must be passed via authKey query arg. It overrides -httpAuth.*\n     Flag value can be read from the given file when using -flagsAuthKey=file:///abs/path/to/file or -flagsAuthKey=file://./relative/path/to/file . Flag value can be read from the given http/https url when using -flagsAuthKey=http://host/path or -flagsAuthKey=https://host/path\n  -fs.disableMmap\n     Whether to use pread() instead of mmap() for reading data files. By default, mmap() is used for 64-bit arches and pread() is used for 32-bit arches, since they cannot read data files bigger than 2^32 bytes in memory. mmap() is usually faster for reading small data chunks than pread()\n  -http.connTimeout duration\n     Incoming connections to -httpListenAddr are closed after the configured timeout. This may help evenly spreading load among a cluster of services behind TCP-level load balancer. Zero value disables closing of incoming connections (default 2m0s)\n  -http.disableResponseCompression\n     Disable compression of HTTP responses to save CPU resources. By default, compression is enabled to save network bandwidth\n  -http.header.csp string\n     Value for 'Content-Security-Policy' header, recommended: \"default-src 'self'\"\n  -http.header.frameOptions string\n     Value for 'X-Frame-Options' header\n  -http.header.hsts string\n     Value for 'Strict-Transport-Security' header, recommended: 'max-age=31536000; includeSubDomains'\n  -http.idleConnTimeout duration\n     Timeout for incoming idle http connections (default 1m0s)\n  -http.maxGracefulShutdownDuration duration\n     The maximum duration for a graceful shutdown of the HTTP server. A highly loaded server may require increased value for a graceful shutdown (default 7s)\n  -http.pathPrefix string\n     An optional prefix to add to all the paths handled by http server. For example, if '-http.pathPrefix=/foo/bar' is set, then all the http requests will be handled on '/foo/bar/*' paths. This may be useful for proxied requests. See https://www.robustperception.io/using-external-urls-and-proxies-with-prometheus\n  -http.shutdownDelay duration\n     Optional delay before http server shutdown. During this delay, the server returns non-OK responses from /health page, so load balancers can route new requests to other servers\n  -httpAuth.password value\n     Password for HTTP server's Basic Auth. The authentication is disabled if -httpAuth.username is empty\n     Flag value can be read from the given file when using -httpAuth.password=file:///abs/path/to/file or -httpAuth.password=file://./relative/path/to/file . Flag value can be read from the given http/https url when using -httpAuth.password=http://host/path or -httpAuth.password=https://host/path\n  -httpAuth.username string\n     Username for HTTP server's Basic Auth. The authentication is disabled if empty. See also -httpAuth.password\n  -httpListenAddr array\n     TCP address to listen for incoming http requests. See also -httpListenAddr.useProxyProtocol\n     Supports an array of values separated by comma or specified via multiple flags.\n\n```\n\n----------------------------------------\n\nTITLE: Configuring vlstorage with TLS for HTTPS Communication\nDESCRIPTION: Command for configuring a vlstorage node to accept HTTPS connections by specifying TLS certificate and key files. This enables encrypted communication between cluster components when they communicate over untrusted networks.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/cluster.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n./victoria-logs-prod -httpListenAddr=... -storageDataPath=... -tls -tlsCertFile=/path/to/certfile -tlsKeyFile=/path/to/keyfile\n```\n\n----------------------------------------\n\nTITLE: Calculating Geometric Mean Over Time in MetricsQL\nDESCRIPTION: The geomean_over_time function calculates the geometric mean over raw samples on a given lookbehind window for each time series. It's typically used with gauge metrics.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_38\n\nLANGUAGE: MetricsQL\nCODE:\n```\ngeomean_over_time(series_selector[d])\n```\n\n----------------------------------------\n\nTITLE: Linear Interpolation for Series in PromQL\nDESCRIPTION: The `interpolate(q)` function fills gaps with interpolated values between the last and next non-empty points in series `q`. Suitable for constructing continuous datasets where discrete data entry is insufficient.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_85\n\nLANGUAGE: PromQL\nCODE:\n```\n`interpolate(q)`\n```\n\n----------------------------------------\n\nTITLE: Using SugaredLogger in Go with Zap\nDESCRIPTION: Example of using Zap's SugaredLogger for structured logging with loosely typed key-value pairs. This logger provides a balance between performance and convenience with support for both structured and printf-style logging.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/go.uber.org/zap/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nlogger, _ := zap.NewProduction()\ndefer logger.Sync() // flushes buffer, if any\nsugar := logger.Sugar()\nsugar.Infow(\"failed to fetch URL\",\n  // Structured context as loosely typed key-value pairs.\n  \"url\", url,\n  \"attempt\", 3,\n  \"backoff\", time.Second,\n)\nsugar.Infof(\"Failed to fetch URL: %s\", url)\n```\n\n----------------------------------------\n\nTITLE: Using fmt.Sprintf for Values in Structured logr Logs in Go\nDESCRIPTION: This Go example illustrates how to include dynamically formatted data, like a variable's type, within a logr structured log message. Instead of using format strings for the entire message or keys, fmt.Sprintf is used *only* for generating the value associated with a specific key (\"type\"), preserving the benefits of structured logging for the overall message and searchability.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/go-logr/logr/README.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nlogger.Info(\"unable to reflect over type\", \"type\", fmt.Sprintf(\"%T\"))\n```\n\n----------------------------------------\n\nTITLE: Unmarshalling and Marshalling with Koanf in Go\nDESCRIPTION: This snippet demonstrates how to unmarshal Koanf configuration into a struct and marshal it back to JSON. It shows both quick unmarshal and advanced unmarshal with custom configuration.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/knadh/koanf/v2/README.md#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\n\t\"github.com/knadh/koanf/v2\"\n\t\"github.com/knadh/koanf/parsers/json\"\n\t\"github.com/knadh/koanf/providers/file\"\n)\n\n// Global koanf instance. Use . as the key path delimiter. This can be / or anything.\nvar (\n\tk      = koanf.New(\".\")\n\tparser = json.Parser()\n)\n\nfunc main() {\n\t// Load JSON config.\n\tif err := k.Load(file.Provider(\"mock/mock.json\"), parser); err != nil {\n\t\tlog.Fatalf(\"error loading config: %v\", err)\n\t}\n\n\t// Structure to unmarshal nested conf to.\n\ttype childStruct struct {\n\t\tName       string            `koanf:\"name\"`\n\t\tType       string            `koanf:\"type\"`\n\t\tEmpty      map[string]string `koanf:\"empty\"`\n\t\tGrandChild struct {\n\t\t\tIds []int `koanf:\"ids\"`\n\t\t\tOn  bool  `koanf:\"on\"`\n\t\t} `koanf:\"grandchild1\"`\n\t}\n\n\tvar out childStruct\n\n\t// Quick unmarshal.\n\tk.Unmarshal(\"parent1.child1\", &out)\n\tfmt.Println(out)\n\n\t// Unmarshal with advanced config.\n\tout = childStruct{}\n\tk.UnmarshalWithConf(\"parent1.child1\", &out, koanf.UnmarshalConf{Tag: \"koanf\"})\n\tfmt.Println(out)\n\n\t// Marshal the instance back to JSON.\n\t// The parser instance can be anything, eg: json.Parser(), yaml.Parser() etc.\n\tb, _ := k.Marshal(parser)\n\tfmt.Println(string(b))\n}\n```\n\n----------------------------------------\n\nTITLE: Optimizing Global Error Handler with Atomic Value in Go\nDESCRIPTION: Changes the implementation of the global error handler to use an atomic value (`atomic.Value`) instead of a mutex (`sync.Mutex`) for managing the handler function. This potentially improves performance in highly concurrent scenarios by using lock-free operations.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-22_snippet_22\n\nLANGUAGE: Go\nCODE:\n```\n// Global Error Handler (package internal logic, likely within go.opentelemetry.io/otel/internal/global)\n// Change: Uses atomic.Value instead of sync.Mutex\n```\n\n----------------------------------------\n\nTITLE: Using aggr_over_time with Multiple Rollups - MetricsQL - Markdown\nDESCRIPTION: Shows the usage of aggr_over_time, which accepts a tuple of rollup function names and applies them to a specified series_selector over a lookbehind window d. Calculates each listed function per returned series and is compatible with any rollup function recognized by MetricsQL.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n`aggr_over_time((\"rollup_func1\", \"rollup_func2\", ...), series_selector[d])`\n```\n\nLANGUAGE: Markdown\nCODE:\n```\n`aggr_over_time((\"min_over_time\", \"max_over_time\", \"rate\"), m[d])`\n```\n\n----------------------------------------\n\nTITLE: Calculating Inverse Cosine (Arccos) in MetricsQL\nDESCRIPTION: A transform function computing the inverse cosine for each data point in the time series returned by `q`. If applied directly to a series selector, `default_rollup()` is implicitly used. Metric names are stripped by default; use `keep_metric_names` to preserve them. Supported by PromQL.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_67\n\nLANGUAGE: MetricsQL\nCODE:\n```\n`acos(q)`\n```\n\n----------------------------------------\n\nTITLE: Unpacking Logfmt Fields While Keeping Originals using LogSQL\nDESCRIPTION: This LogSQL query selects logs from the last 5 minutes (`_time:5m`), unpacks the `ip` and `host` fields from the logfmt string in the `foo` field, but uses the `keep_original_fields` option. This ensures that if `ip` or `host` fields already exist and are non-empty in the original log entry, their values are preserved instead of being overwritten by the unpacked values.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_160\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m | unpack_logfmt from foo fields (ip, host) keep_original_fields\n```\n\n----------------------------------------\n\nTITLE: Querying VictoriaLogs Field Values using curl (sh)\nDESCRIPTION: This curl command demonstrates querying the `/select/logsql/field_values` endpoint to get unique values and their hit counts for the 'host' field (`field=host`) from logs matching the query 'error' (`query=error`) in the last 5 minutes (`start=5m`). It targets the default tenant.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/querying/README.md#2025-04-22_snippet_30\n\nLANGUAGE: sh\nCODE:\n```\ncurl http://localhost:9428/select/logsql/field_values -d 'query=error' -d 'field=host' -d 'start=5m'\n```\n\n----------------------------------------\n\nTITLE: TLS Configuration Command Line Parameters\nDESCRIPTION: Command line flags for configuring TLS settings in VictoriaMetrics, including autocert hosts, certificate files, cipher suites, key files, and minimum TLS version specifications. Each parameter supports array values that can be comma-separated or specified via multiple flags.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmauth.md#2025-04-22_snippet_53\n\nLANGUAGE: plain\nCODE:\n```\n-tlsAutocertHosts array\n-tlsCertFile array\n-tlsCipherSuites array\n-tlsKeyFile array\n-tlsMinVersion array\n-version\n```\n\n----------------------------------------\n\nTITLE: Calculating Total Series Fetched by Query with VictoriaLogs\nDESCRIPTION: A LogSQL query snippet that shows how to calculate the sum of series fetched for each unique combination of query and query hash, useful for identifying resource-intensive queries.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/query-stats.md#2025-04-22_snippet_2\n\nLANGUAGE: logsql\nCODE:\n```\n| stats by(query,query_hash) sum(series_fetched) series_fetched_sum\n```\n\n----------------------------------------\n\nTITLE: Setting Backend TLS CA File per User in vmauth (YAML)\nDESCRIPTION: YAML configuration example for `vmauth` demonstrating how to specify a custom Certificate Authority (CA) file (`/path/to/tls/root/ca`) for verifying the backend's TLS certificate for user `foo`. This is configured using the `tls_ca_file` option within the user's definition, overriding any global setting.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmauth.md#2025-04-22_snippet_36\n\nLANGUAGE: yaml\nCODE:\n```\n- username: \"foo\"\n  url_prefix: \"https://localhost\"\n  tls_ca_file: \"/path/to/tls/root/ca\"\n\n```\n\n----------------------------------------\n\nTITLE: Example Output Metrics for Quantile Aggregation in VictoriaMetrics Text\nDESCRIPTION: Illustrates the naming convention and structure of metrics generated by the quantile stream aggregation configuration. The output metrics include the original metric name, the aggregation interval (`30s`), the aggregation type (`quantiles`), and a `quantile` label indicating the specific percentile calculated (e.g., \"0.50\", \"0.99\").\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/stream-aggregation.md#2025-04-22_snippet_6\n\nLANGUAGE: text\nCODE:\n```\nrequest_duration_seconds:30s_quantiles{quantile=\"0.50\"} value1\nrequest_duration_seconds:30s_quantiles{quantile=\"0.99\"} value2\n\nresponse_size_bytes:30s_quantiles{quantile=\"0.50\"} value1\nresponse_size_bytes:30s_quantiles{quantile=\"0.99\"} value2\n```\n\n----------------------------------------\n\nTITLE: Searching for a Phrase with Single Quotes for Escaping - VictoriaLogs LogSQL\nDESCRIPTION: This snippet demonstrates searching for phrases containing double quotes by wrapping the phrase in single quotes, thus avoiding the need for backslash escaping. Used for phrases like '\"foo\":\"bar\"' within logs. Supports logs with JSON-style messages or embedded quote marks.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_42\n\nLANGUAGE: logsql\nCODE:\n```\n'\"foo\":\"bar\"'\n```\n\n----------------------------------------\n\nTITLE: Selecting Top K Series by Minimum Value (MetricsQL)\nDESCRIPTION: The `topk_min` aggregate function selects up to `k` time series from the input query `q` that have the highest minimum values over the query range. An optional third argument `\"other_label=other_value\"` can be provided to create an additional time series that sums the values of all the remaining series not included in the top `k`, assigning the specified label to it.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_148\n\nLANGUAGE: MetricsQL\nCODE:\n```\ntopk_min(k, q, \"other_label=other_value\")\n```\n\n----------------------------------------\n\nTITLE: Native Format Export Commands\nDESCRIPTION: Examples of exporting data in VictoriaMetrics native format with time range specifications.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/README.md#2025-04-22_snippet_45\n\nLANGUAGE: sh\nCODE:\n```\ncurl http://<victoriametrics-addr>:8428/api/v1/export/native -d 'match[]=<timeseries_selector_for_export>' -d 'start=1654543486' -d 'end=1654543486'\ncurl http://<victoriametrics-addr>:8428/api/v1/export/native -d 'match[]=<timeseries_selector_for_export>' -d 'start=2022-06-06T19:25:48' -d 'end=2022-06-06T19:29:07'\n```\n\n----------------------------------------\n\nTITLE: Inverse Sine Transformation with VictoriaMetrics PromQL\nDESCRIPTION: The asin function computes the inverse sine for each point of the input time series. It is a transform function that drops metric names by default unless keep_metric_names is specified, and is supported by PromQL. The function expects numeric time series data and outputs their arcsin values.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_78\n\nLANGUAGE: PromQL\nCODE:\n```\n`asin(q)`\n```\n\n----------------------------------------\n\nTITLE: Setting Up Go Generate for QuickTemplate\nDESCRIPTION: Configuration for using go generate with QuickTemplate to automatically compile templates from a specified directory.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/valyala/quicktemplate/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n//go:generate go get -u github.com/valyala/quicktemplate/qtc\n//go:generate qtc -dir=app/views  \n```\n\n----------------------------------------\n\nTITLE: Share Less or Equal Over Time Calculation in VictoriaMetrics\nDESCRIPTION: The `share_le_over_time` function calculates the fraction of raw samples at most equal to `le`, returning a share within `[0...1]` applicable to each series over the specified duration `d`. This function is crucial for performance thresholds and demands manual metric name retention if needed.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/MetricsQL.md#2025-04-22_snippet_59\n\nLANGUAGE: Other\nCODE:\n```\nshare_le_over_time(series_selector[d], le)\n```\n\n----------------------------------------\n\nTITLE: Importing Gzipped JSON Lines Data into VictoriaMetrics using Shell\nDESCRIPTION: Imports gzipped data from the file `exported_data.jsonl.gz` into a destination VictoriaMetrics instance (`destination-victoriametrics:8428`) via the `/api/v1/import` endpoint. The `Content-Encoding: gzip` header indicates the uploaded data is compressed. Requires `curl` and the data file `exported_data.jsonl.gz`. Extra labels can be added via the `extra_label` query parameter.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/README.md#2025-04-22_snippet_48\n\nLANGUAGE: sh\nCODE:\n```\n# Import gzipped data to <destination-victoriametrics>:\ncurl -X POST -H 'Content-Encoding: gzip' http://destination-victoriametrics:8428/api/v1/import -T exported_data.jsonl.gz\n```\n\n----------------------------------------\n\nTITLE: Offline Z-score Model Configuration for VictoriaMetrics Anomaly Detection\nDESCRIPTION: Configuration for a traditional (offline) Z-score model in VictoriaMetrics Anomaly Detection. This setup performs regular model fitting every hour with a 2-day window of historical data.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/anomaly-detection/FAQ.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nschedulers:\n  periodic:\n    class: 'periodic'\n    fit_every: '1h'\n    fit_window: '2d'\n    infer_every: '1m'\n  # other schedulers ...\nmodels:\n  zscore_example:\n    class: 'zscore'\n    schedulers: ['periodic']\n    # other model params ...\n# other config sections ...\n```\n\n----------------------------------------\n\nTITLE: Using stale_samples_over_time with VictoriaMetrics - Markdown - Syntax Reference\nDESCRIPTION: This snippet demonstrates the syntax for the stale_samples_over_time rollup function in VictoriaMetrics. It is used to calculate the number of Prometheus staleness markers within a lookbehind window d for each matching series. By default, metric names are stripped from results. Parameters: series_selector (metric selection), d (duration window).\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_58\n\nLANGUAGE: Markdown\nCODE:\n```\n`stale_samples_over_time(series_selector[d])`\n```\n\n----------------------------------------\n\nTITLE: VictoriaMetrics Cluster Prometheus Querying API URL Pattern\nDESCRIPTION: This URL pattern is used for querying data from the VictoriaMetrics cluster using the Prometheus Querying API via the `vmselect` component. It requires specifying the `vmselect` hostname/IP, the target `accountID` (tenant ID) for the query namespace, and a `suffix` corresponding to a specific Prometheus API endpoint (e.g., `api/v1/query`, `api/v1/query_range`, `api/v1/series`, `api/v1/export`, `federate`).\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/Cluster-VictoriaMetrics.md#2025-04-22_snippet_14\n\nLANGUAGE: url\nCODE:\n```\nhttp://<vmselect>:8481/select/<accountID>/prometheus/<suffix>\n```\n\n----------------------------------------\n\nTITLE: Filtering Specific Field by Length Range in LogsQL\nDESCRIPTION: Demonstrates applying the `len_range()` filter to a specific field (`foo`) in LogsQL, selecting log entries where the length of the `foo` field's value is within the range [10, 20] characters, inclusive.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_74\n\nLANGUAGE: logsql\nCODE:\n```\nfoo:len_range(10, 20)\n```\n\n----------------------------------------\n\nTITLE: Calculating Sum Over Range - MetricsQL (English)\nDESCRIPTION: The `range_sum(q)` function outputs the sum of all points for each series in the result of `q`. Produces a single sum for each input series, enabling aggregate analysis.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/MetricsQL.md#2025-04-22_snippet_93\n\nLANGUAGE: MetricsQL\nCODE:\n```\n`range_sum(q)`\n```\n\n----------------------------------------\n\nTITLE: Calculating Median Value Over Time in PromQL\nDESCRIPTION: The median_over_time function computes the median value over raw samples for a given time window. It is typically used with gauge metrics.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_39\n\nLANGUAGE: PromQL\nCODE:\n```\nmedian_over_time(series_selector[d])\n```\n\n----------------------------------------\n\nTITLE: Detecting Sample Presence with present_over_time - PromQL/Pseudocode\nDESCRIPTION: Checks if at least one sample exists within lookbehind window 'd'. Input includes time series selector and window. Output is 1 if sample present, else empty. Metric names are removed in rollups unless explicitly retained. Useful for verifying data presence and supported by PromQL.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_47\n\nLANGUAGE: pseudo-promql\nCODE:\n```\n`present_over_time(series_selector[d])`\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Filtered Downsampling Rules in VictoriaMetrics\nDESCRIPTION: Command-line flags for configuring different downsampling rules for different time series. This example applies 30-second intervals to series with env=\"prod\" label and 5-minute intervals to other series with names starting with 'node_'.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/README.md#2025-04-22_snippet_71\n\nLANGUAGE: bash\nCODE:\n```\n-downsampling.period='{env=\"prod\"}:1d:30s,{__name__=~\"node_.*\"}:1d:5m'\n```\n\n----------------------------------------\n\nTITLE: Defining CSV Import Format in VictoriaMetrics\nDESCRIPTION: Specifies the format string structure used in the `format` query parameter for the `/api/v1/import/csv` endpoint. Each rule defines how a CSV column maps to a metric, label, or time field, using the `<column_pos>:<type>:<context>` syntax. Column numbering starts from 1.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/README.md#2025-04-22_snippet_51\n\nLANGUAGE: text\nCODE:\n```\n<column_pos>:<type>:<context>\n```\n\n----------------------------------------\n\nTITLE: Creating Daily Smart Backup in Shell\nDESCRIPTION: This command is the second part of the smart backup strategy, creating a full daily backup by performing a server-side copy from the 'latest' folder to a date-specific folder.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmbackup.md#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n./vmbackup -origin=gs://<bucket>/latest -dst=gs://<bucket>/<YYYYMMDD>\n```\n\n----------------------------------------\n\nTITLE: Calculating Duration Over Time in MetricsQL\nDESCRIPTION: The duration_over_time function returns the duration in seconds when time series were present over a given lookbehind window, considering intervals not exceeding a specified max_interval.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_36\n\nLANGUAGE: MetricsQL\nCODE:\n```\nduration_over_time(series_selector[d], max_interval)\n```\n\n----------------------------------------\n\nTITLE: Executing PromQL Range Query - Shell\nDESCRIPTION: This snippet shows how to perform a range query using PromQL/MetricsQL on VictoriaMetrics instances. It calculates the increase over the last 5 minutes of the 'vm_http_request_errors_total' metric on a 'job' labeled 'foo'. Intended for both single-node and cluster configurations, it requires curl and a VictoriaMetrics setup. The query needs start time and step duration as part of POST data.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/url-examples.md#2025-04-22_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\ncurl http://localhost:8428/prometheus/api/v1/query_range -d 'query=sum(increase(vm_http_request_errors_total{job=\"foo\"}[5m]))' -d 'start=-1d' -d 'step=1h'\n```\n\nLANGUAGE: sh\nCODE:\n```\ncurl http://<vmselect>:8481/select/0/prometheus/api/v1/query_range -d 'query=sum(increase(vm_http_request_errors_total{job=\"foo\"}[5m]))' -d 'start=-1d' -d 'step=1h'\n```\n\n----------------------------------------\n\nTITLE: Defining count_values_over_time in MetricsQL - Markdown\nDESCRIPTION: Documents the count_values_over_time rollup function, explaining its role in counting occurrences of unique sample values within a lookbehind window and attaching an extra label. Covers required arguments, typical usage (gauges), constraints, and handling of metric names. Provided in Markdown with MetricsQL reference.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/MetricsQL.md#2025-04-22_snippet_15\n\nLANGUAGE: Markdown\nCODE:\n```\n#### count_values_over_time\n\n`count_values_over_time(\"label\", series_selector[d])` is a [rollup function](#rollup-functions), which counts the number of [raw samples](https://docs.victoriametrics.com/keyconcepts/#raw-samples)\nwith the same value over the given lookbehind window and stores the counts in a time series with an additional `label`, which contains each initial value.\nThe results are calculated independently per each time series returned from the given [series_selector](https://docs.victoriametrics.com/keyconcepts/#filtering).\n\nMetric names are stripped from the resulting rollups. Add [keep_metric_names](#keep_metric_names) modifier in order to keep metric names.\n\nThis function is usually applied to [gauges](https://docs.victoriametrics.com/keyconcepts/#gauge).\n\nSee also [count_eq_over_time](#count_eq_over_time), [count_values](#count_values) and [distinct_over_time](#distinct_over_time) and [label_match](#label_match).\n\n```\n\n----------------------------------------\n\nTITLE: Calculating Standard Deviation Over Range using range_stddev() in MetricsQL\nDESCRIPTION: The `range_stddev(q)` transform function calculates the standard deviation of the data points over the selected time range for each time series returned by the query `q`.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_106\n\nLANGUAGE: MetricsQL\nCODE:\n```\nrange_stddev(q)\n```\n\n----------------------------------------\n\nTITLE: Max Stats Function in LogsQL\nDESCRIPTION: Demonstrates how to find maximum values across specified log fields.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_187\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m | stats max(duration) max_duration\n```\n\n----------------------------------------\n\nTITLE: Sample Equality Counting with count_eq_over_time - MetricsQL - Markdown\nDESCRIPTION: Demonstrates count_eq_over_time usage, counting raw samples equal to eq within the given time window d. Applies per time series extracted by the selector. Optimal for gauge-type metrics. By default, strips metric names from results; can retain with the keep_metric_names modifier.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_6\n\nLANGUAGE: Markdown\nCODE:\n```\n`count_eq_over_time(series_selector[d], eq)`\n```\n\n----------------------------------------\n\nTITLE: Calculating Ascent over Time with ascent_over_time - MetricsQL - Markdown\nDESCRIPTION: Explains the usage pattern for ascent_over_time, which computes the total positive change (ascent) in sample values over a lookbehind window d. Useful for GPS and movement metrics. Strips metric names by default; use keep_metric_names modifier to preserve them.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_2\n\nLANGUAGE: Markdown\nCODE:\n```\n`ascent_over_time(series_selector[d])`\n```\n\n----------------------------------------\n\nTITLE: Configuring Eureka Service Discovery in YAML\nDESCRIPTION: Configuration example for Eureka service discovery, showing how to connect to Eureka REST API server. Includes server URL configuration and HTTP API client options.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/sd_configs.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nscrape_configs:\n- job_name: eureka\n  eureka_sd_configs:\n\n    # server is an optional URL to connect to the Eureka server.\n    # By default, the http://localhost:8080/eureka/v2 is used.\n    #\n  - server: \"...\"\n\n    # Additional HTTP API client options can be specified here.\n    # See https://docs.victoriametrics.com/sd_configs/#http-api-client-options\n```\n\n----------------------------------------\n\nTITLE: Natural Logarithm Computation in PromQL\nDESCRIPTION: The `ln(q)` function determines the natural log of each value in the time series `q`. The output lacks metric names sans `keep_metric_names` usage. PromQL utilization allows straightforward application for exponential decay or growth predictions.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_89\n\nLANGUAGE: PromQL\nCODE:\n```\n`ln(q)`\n```\n\n----------------------------------------\n\nTITLE: Using default_rollup Function in VictoriaMetrics\nDESCRIPTION: This function returns the last raw sample value on the lookbehind window for each time series. Unlike last_over_time, it accounts for staleness markers to detect stale series. If no window is specified, it's automatically calculated based on step and scrape_interval.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_13\n\nLANGUAGE: markdown\nCODE:\n```\ndefault_rollup(series_selector[d])\n```\n\n----------------------------------------\n\nTITLE: Timestamped Log Entry Example\nDESCRIPTION: Example of a log entry with a timestamp in ISO8601 format using the _time field.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/keyConcepts.md#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"_msg\": \"some log message\",\n  \"_time\": \"2023-04-12T06:38:11.095Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Fluentbit Configuration with Field Filtering for VictoriaLogs\nDESCRIPTION: Fluentbit configuration that specifies which log fields to ignore during ingestion. The ignore_fields parameter in the URI excludes specific fields (log.offset and event.original) from being stored in VictoriaLogs.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/data-ingestion/Fluentbit.md#2025-04-22_snippet_2\n\nLANGUAGE: fluentbit\nCODE:\n```\n[Output]\n     Name http\n     Match *\n     host localhost\n     port 9428\n     uri /insert/jsonline?_stream_fields=stream&_msg_field=log&_time_field=date&ignore_fields=log.offset,event.original\n     format json_lines\n     json_date_format iso8601\n```\n\n----------------------------------------\n\nTITLE: Calculating Mode Over Time in PromQL\nDESCRIPTION: The mode_over_time function computes the mode for raw samples on a given lookbehind window for each time series. It expects discrete raw sample values and is typically used with gauges.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_28\n\nLANGUAGE: promql\nCODE:\n```\nmode_over_time(series_selector[d])\n```\n\n----------------------------------------\n\nTITLE: Predicting Memory Usage with range_linear_regression in MetricsQL\nDESCRIPTION: Provides an example MetricsQL query using `range_linear_regression`. This specific query predicts future memory usage based on past `process_resident_memory_bytes` data.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/changelog/CHANGELOG_2022.md#2025-04-22_snippet_10\n\nLANGUAGE: metricsql\nCODE:\n```\nrange_linear_regression(process_resident_memory_bytes)\n```\n\n----------------------------------------\n\nTITLE: Using bottomk_min aggregate function in PromQL\nDESCRIPTION: Aggregate function that returns up to k time series with the smallest minimum values. Can optionally include a sum of remaining series with a custom label.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_146\n\nLANGUAGE: promql\nCODE:\n```\nbottomk_min(k, q, \"other_label=other_value\")\n```\n\n----------------------------------------\n\nTITLE: Copy Log Fields with LogSQL in VictoriaMetrics\nDESCRIPTION: These snippets illustrate how to copy log fields using the `copy` pipe, allowing multiple fields to be duplicated under new names. The functionality has a shorthand version with `cp`, offering flexibility in syntax. No special dependencies are needed, and it supports creating copies of specified fields over a set time period. Results include both the original and the renamed fields.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_81\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m | copy host as server\n```\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m | copy _time as timestamp, _msg as message\n```\n\n----------------------------------------\n\nTITLE: Migrating data from OpenTSDB to VictoriaMetrics\nDESCRIPTION: This command migrates data from OpenTSDB to VictoriaMetrics, specifying the source OpenTSDB address, retention parameters, filters, and the destination VictoriaMetrics address.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmctl.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n$ ./vmctl opentsdb --otsdb-addr http://opentsdb:4242/ --otsdb-retentions sum-1m-avg:1h:1d --otsdb-filters system --otsdb-normalize --vm-addr http://victoria:8428/\nOpenTSDB import mode\n2021/04/09 11:52:50 Will collect data starting at TS 1617990770\n2021/04/09 11:52:50 Loading all metrics from OpenTSDB for filters:  [system]\nFound 9 metrics to import. Continue? [Y/n]\n2021/04/09 11:52:51 Starting work on system.load1\n23 / 402200 [>____________________________________________________________________________________________] 0.01% 2 p/s\n```\n\n----------------------------------------\n\nTITLE: Filtering Logs by Field Value Equality in LogsQL\nDESCRIPTION: Shows the `eq_field()` filter in LogsQL used to find log entries where the value of one specified field (`user_id`) is exactly equal to the value of another specified field (`customer_id`).\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_76\n\nLANGUAGE: logsql\nCODE:\n```\nuser_id:eq_field(customer_id)\n```\n\n----------------------------------------\n\nTITLE: Using Duration Literals in Arithmetic Expressions in MetricsQL\nDESCRIPTION: Illustrates that duration literals (like `1h`) can be used directly in arithmetic expressions within MetricsQL queries. The query divides the sum over time by the duration `1h` (which is equivalent to 3600 seconds).\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_14\n\nLANGUAGE: metricsql\nCODE:\n```\nsum_over_time(m[1h]) / 1h\n```\n\n----------------------------------------\n\nTITLE: Sending OpenTSDB Data to VictoriaMetrics Cluster via Netcat (Shell)\nDESCRIPTION: This shell snippet demonstrates sending OpenTSDB-format data to a VictoriaMetrics cluster deployment's vminsert component using netcat (nc) over port 4242. The command requires the OpenTSDB receiver enabled on vminsert (-opentsdbListenAddr) and expects the vminsert address to be reachable. Parameters mirror the single-node example but the destination host is the cluster's vminsert node. Outputs are similar—metric data insertion for cluster setups.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/url-examples.md#2025-04-22_snippet_21\n\nLANGUAGE: sh\nCODE:\n```\necho \"put foo.bar.baz `date +%s` 123  tag1=value1 tag2=value2\" | nc -N http://<vminsert> 4242\n```\n\n----------------------------------------\n\nTITLE: Calculating Average Rows Read with MetricsQL\nDESCRIPTION: This MetricsQL query calculates the average number of rows read per query during the past 5 minutes by dividing the increased sums by the increased counts of rows read.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/keyConcepts/keyConcepts.md#2025-04-22_snippet_6\n\nLANGUAGE: MetricsQL\nCODE:\n```\n\"increase(vm_rows_read_per_query_sum[5m]) / increase(vm_rows_read_per_query_count[5m])\"\n```\n\n----------------------------------------\n\nTITLE: Using sort_by_label_numeric_desc function in PromQL\nDESCRIPTION: Function that sorts series in descending order by the given set of labels using numeric sort. This ensures proper numerical ordering in reverse (e.g., 101, 15, 2, 1).\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_138\n\nLANGUAGE: promql\nCODE:\n```\nsort_by_label_numeric_desc(q, \"label1\", ... \"labelN\")\n```\n\n----------------------------------------\n\nTITLE: Limiting Field Values Results in LogSQL\nDESCRIPTION: This snippet demonstrates how to limit the number of returned values when using the field_values pipe for a specific field (user_id).\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_95\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m | field_values user_id limit 10\n```\n\n----------------------------------------\n\nTITLE: Configuring VictoriaLogs with Extended Future Retention\nDESCRIPTION: Command to start VictoriaLogs with an extended future retention period of 1 year. This allows the system to accept logs with timestamps up to a year in the future using the -futureRetention flag.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n/path/to/victoria-logs -futureRetention=1y\n```\n\n----------------------------------------\n\nTITLE: Nested JSON Flattening Example\nDESCRIPTION: Demonstration of how nested JSON objects are automatically flattened into single-level JSON using dot notation.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/keyConcepts.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"host\": {\n    \"name\": \"foobar\"\n    \"os\": {\n      \"version\": \"1.2.3\"\n    }\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"host.name\": \"foobar\",\n  \"host.os.version\": \"1.2.3\"\n}\n```\n\n----------------------------------------\n\nTITLE: Illustrating Potential Issue with Single Hostname Load Balancing (YAML)\nDESCRIPTION: This YAML configuration highlights a scenario where specifying a single service hostname (`vmselect-service`) in `url_prefix` might not achieve effective load balancing if that hostname resolves to multiple backend instances. vmauth might consistently route requests to the same underlying backend instance.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmauth.md#2025-04-22_snippet_25\n\nLANGUAGE: yaml\nCODE:\n```\nunauthorized_user:\n  url_prefix: http://vmselect-service/select/0/prometheus/\n```\n\n----------------------------------------\n\nTITLE: Configuring vmselect with Group-Specific Replication Factors\nDESCRIPTION: Command to run vmselect with different replication factors for each storage group: g1 has RF=3, g2 has RF=2, and g3 has RF=1. This provides different levels of redundancy for different storage groups.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/Cluster-VictoriaMetrics.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n/path/to/vmselect \\\n -replicationFactor=g1:3 \\\n -storageNode=g1/host1,g1/host2,g1/host3 \\\n -replicationFactor=g2:2 \\\n -storageNode=g2/host4,g2/host5,g2/host6 \\\n -replicationFactor=g3:1 \\\n -storageNode=g3/host4,g3/host5,g3/host6\n```\n\n----------------------------------------\n\nTITLE: Starting vmagent to Read InfluxDB Metrics from PubSub (sh)\nDESCRIPTION: This shell command starts the Enterprise `vmagent` to read metrics in InfluxDB line protocol format from a specified Google PubSub subscription (`projects/victoriametrics-vmagent-pub-sub-test/subscriptions/telegraf-testing`) and forwards them to a VictoriaMetrics remote write endpoint (`http://localhost:8428/api/v1/write`). It utilizes the `-gcp.pubsub.subscribe.topicSubscription` and `-gcp.pubsub.subscribe.topicSubscription.messageFormat` flags. Requires Enterprise `vmagent`.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmagent.md#2025-04-22_snippet_49\n\nLANGUAGE: sh\nCODE:\n```\n./bin/vmagent -remoteWrite.url=http://localhost:8428/api/v1/write \\\n       -gcp.pubsub.subscribe.topicSubscription=projects/victoriametrics-vmagent-pub-sub-test/subscriptions/telegraf-testing \\\n       -gcp.pubsub.subscribe.topicSubscription.messageFormat=influx\n```\n\n----------------------------------------\n\nTITLE: Routing Requests by Host Header using vmauth (YAML)\nDESCRIPTION: Configures `vmauth` to route requests based on the HTTP `Host` header for an `unauthorized_user`. The `src_hosts` field uses regular expressions to match the host. Requests for `app1.my-host.com` are proxied to `http://app1-backend/`, requests for `app2.my-host.com` to `http://app2-backend/`, and others fall back to `default_url`.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmauth.md#2025-04-22_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\nunauthorized_user:\n  url_map:\n  - src_hosts:\n    - \"app1\\\\.my-host\\\\.com\"\n    url_prefix: \"http://app1-backend/\"\n  - src_hosts:\n    - \"app2\\\\.my-host\\\\.com\"\n    url_prefix: \"http://app2-backend/\"\n  default_url: http://some-backend/404-page.html\n```\n\n----------------------------------------\n\nTITLE: LogsQL Query with Comments\nDESCRIPTION: Example showing how to use comments in LogsQL query while finding error logs and sorting them by count\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_202\n\nLANGUAGE: logsql\nCODE:\n```\nerror                       # find logs with `error` word\n  | stats by (_stream) logs # then count the number of logs per `_stream` label\n  | sort by (logs) desc     # then sort by the found logs in descending order\n  | limit 5                 # and show top 5 streams with the biggest number of logs\n```\n\n----------------------------------------\n\nTITLE: Setting Query Concurrency in LogsQL\nDESCRIPTION: This example demonstrates how to limit query execution to a specific number of CPU cores (2 in this case) using the concurrency option, which can help reduce RAM and CPU usage.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_203\n\nLANGUAGE: logsql\nCODE:\n```\noptions(concurrency=2) _time:1d | count_uniq(user_id)\n```\n\n----------------------------------------\n\nTITLE: Creating a Reusable Gzip Handler Wrapper with Custom Options in Go\nDESCRIPTION: This advanced Go server example demonstrates creating a custom, reusable Gzip compression wrapper with configurable options such as minimum compression size and compression level. It imports both the 'gzhttp' and 'gzip' packages and wraps a simple text handler. The 'NewWrapper' function, with options 'MinSize' and 'CompressionLevel', is used to create the customized wrapper. If instantiation fails, the error is logged and the program exits. The server responds on port 8000 using the customized Gzip compression. Required dependencies: 'io', 'log', 'net/http', 'github.com/klauspost/compress/gzhttp', 'github.com/klauspost/compress/gzip'. There are no route parameters, but the compression configuration can be adapted as needed.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/klauspost/compress/gzhttp/README.md#2025-04-22_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport (\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\n\t\n\t\"github.com/klauspost/compress/gzhttp\"\n\t\"github.com/klauspost/compress/gzip\"\n)\n\nfunc main() {\n\thandler := http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\tw.Header().Set(\"Content-Type\", \"text/plain\")\n\t\tio.WriteString(w, \"Hello, World\")\n\t})\n\t\n\t// Create a reusable wrapper with custom options.\n\twrapper, err := gzhttp.NewWrapper(gzhttp.MinSize(2000), gzhttp.CompressionLevel(gzip.BestSpeed))\n\tif err != nil {\n\t\tlog.Fatalln(err)\n\t}\n\t\n\thttp.Handle(\"/\", wrapper(handler))\n\thttp.ListenAndServe(\"0.0.0.0:8000\", nil)\n}\n\n```\n\n----------------------------------------\n\nTITLE: Filtering Data After Stats Calculation in LogsQL\nDESCRIPTION: This query calculates log counts per stream over the last 5 minutes, then filters to show only streams with more than 1000 logs.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/logsql-examples.md#2025-04-22_snippet_10\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m | stats by (_stream) count() rows | filter rows:>1000\n```\n\n----------------------------------------\n\nTITLE: cAdvisor Metrics Discovery in Kubernetes\nDESCRIPTION: Configuration for collecting cAdvisor metrics from Kubernetes nodes using node role discovery and API server proxy.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/scrape_config_examples.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nscrape_configs:\n- job_name: cadvisor\n  kubernetes_sd_configs:\n    # Cadvisor is installed on every Kubernetes node, so use `role: node` service discovery\n    #\n  - role: node\n\n  # This is needed for scraping cadvisor metrics from Kubernetes API server proxy.\n  # See relabel_configs below.\n  #\n  bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token\n  tls_config:\n    ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt\n\n  relabel_configs:\n    # Cadvisor metrics are better to scrape from Kubernetes API server proxy.\n    # There is no need to add container, pod and node labels to the scraped metrics,\n    # since cadvisor adds these labels on itself.\n    #\n  - source_labels: [__meta_kubernetes_node_name]\n    target_label: __address__\n    regex: '(.+)'\n    replacement: https://kubernetes.default.svc/api/v1/nodes/$1/proxy/metrics/cadvisor\n  - source_labels: [__meta_kubernetes_node_name]\n    target_label: instance\n```\n\n----------------------------------------\n\nTITLE: Statistical Analysis in LogsQL\nDESCRIPTION: A LogsQL query that uses the stats pipe to count the number of logs with the word 'error' from the last 5 minutes, naming the result 'logs_with_error'.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_18\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m error | stats count() logs_with_error\n```\n\n----------------------------------------\n\nTITLE: Using sort Function in MetricsQL\nDESCRIPTION: The sort function sorts series in ascending order by the last point in every time series returned by the query. This function is supported by PromQL.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_105\n\nLANGUAGE: metricsql\nCODE:\n```\nsort(q)\n```\n\n----------------------------------------\n\nTITLE: Model Skipped Run Log (No Unseen Data)\nDESCRIPTION: Logs a warning when an inference run is skipped because all received timestamps have already been processed, meaning no new anomaly scores need to be generated. This is indicated by the `vmanomaly_model_runs_skipped` metric. Placeholders `{{scheduler_alias}}`, `{{model_alias}}`, and `{{query_key}}` provide context.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/anomaly-detection/components/monitoring.md#2025-04-22_snippet_12\n\nLANGUAGE: text\nCODE:\n```\n[Scheduler {{scheduler_alias}}] Skipping run for stage 'infer' for model '{{model_alias}}' (query_key: {{query_key}}): No unseen data to infer on.\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom HTTP Headers for Zipkin Exporter in Go\nDESCRIPTION: The WithHeaders option is added to the Zipkin exporter to allow configuring custom HTTP headers when exporting spans.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nzipkin.WithHeaders(headers)\n```\n\n----------------------------------------\n\nTITLE: User Configuration with Additional Metric Labels\nDESCRIPTION: YAML configuration example showing how to add custom metric labels to user-specific metrics. This configuration defines datacenter and team labels in addition to the username label.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmauth.md#2025-04-22_snippet_48\n\nLANGUAGE: yaml\nCODE:\n```\nusers:\n- username: \"foobar\"\n  metric_labels:\n   dc: eu\n   team: dev\n  # other config options here\n```\n\n----------------------------------------\n\nTITLE: Counting Logs with Non-Empty Username in LogsQL\nDESCRIPTION: This query returns the number of logs with a non-empty 'username' field over the last 5 minutes using the count stats function.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_177\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m | stats count(username) logs_with_username\n```\n\n----------------------------------------\n\nTITLE: Using timestamp_with_name in VictoriaMetrics Syntax - plaintext\nDESCRIPTION: Demonstrates timestamp_with_name, which yields the timestamp of the last raw sample and preserves metric names. Takes a series_selector with window and outputs a timestamp with metric names intact. No external dependencies except VictoriaMetrics query support.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_58\n\nLANGUAGE: plaintext\nCODE:\n```\n`timestamp_with_name(series_selector[d])`\n```\n\n----------------------------------------\n\nTITLE: Verifying Exported VictoriaMetrics Data Blocks\nDESCRIPTION: Example showing how to export data blocks from VictoriaMetrics using the native format and then verify their integrity using vmctl's verify-block command.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmctl.md#2025-04-22_snippet_22\n\nLANGUAGE: sh\nCODE:\n```\n# export blocks from VictoriaMetrics\ncurl localhost:8428/api/v1/export/native -g -d 'match[]={__name__!=\"\"}' -o exported_data_block\n# verify block content\n./vmctl verify-block exported_data_block\n```\n\n----------------------------------------\n\nTITLE: Calculating Histogram Averages in PromQL\nDESCRIPTION: The `histogram_avg(buckets)` function evaluates the average value over specified histogram `buckets`. It allows users to calculate average values over time ranges for multiple series. An example use case includes measuring average response time by jobs over a period.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_78\n\nLANGUAGE: PromQL\nCODE:\n```\n`histogram_avg(buckets)`\n```\n\n----------------------------------------\n\nTITLE: Retrieving Unique Field Values with LogsQL in VictoriaLogs\nDESCRIPTION: LogsQL query to get all unique values for a specific field (level) across logs seen during the last hour using the 'field_values' pipe.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/FAQ.md#2025-04-22_snippet_4\n\nLANGUAGE: logsql\nCODE:\n```\n_time:1h | field_values level\n```\n\n----------------------------------------\n\nTITLE: Querying High Scrape Sample Counts with MetricsQL\nDESCRIPTION: This MetricsQL query identifies scrape targets that expose a high number of metric samples. It selects time series where the automatically generated `scrape_samples_scraped` metric is greater than 10,000.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmagent.md#2025-04-22_snippet_17\n\nLANGUAGE: metricsql\nCODE:\n```\nscrape_samples_scraped > 10000\n```\n\n----------------------------------------\n\nTITLE: Removing Counter Resets From Series - MetricsQL (English)\nDESCRIPTION: The `remove_resets(q)` function eliminates detected counter resets from the time series returned by `q`, producing a cleaned version where counter increments appear monotonically. This is often important for cumulative metrics collected via exporters.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/MetricsQL.md#2025-04-22_snippet_98\n\nLANGUAGE: MetricsQL\nCODE:\n```\n`remove_resets(q)`\n```\n\n----------------------------------------\n\nTITLE: Configuring Node-Exporter Preset for VMAnomalyDetection in YAML\nDESCRIPTION: YAML configuration for enabling the Node-Exporter preset in VictoriaMetrics anomaly detection. This configuration includes basic settings for the reader and writer components with placeholder URLs for VictoriaMetrics instances.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/anomaly-detection/Presets.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\npreset: \"node-exporter\"\nreader:\n  datasource_url: \"http://victoriametrics:8428/\" # source victoriametrics/prometheus\n  # tenant_id: '0:0'  # specify for cluster version\nwriter:\n  datasource_url: \"http://victoriametrics:8428/\" # destination victoriametrics/prometheus\n  # tenant_id: '0:0'  # specify for cluster version\n```\n\n----------------------------------------\n\nTITLE: Setting Per-User Concurrency Limits in vmauth (YAML)\nDESCRIPTION: YAML configuration example for `vmauth` illustrating how to limit the number of concurrent requests for a specific user (`foo`) to 10. This is done using the `max_concurrent_requests` option within the user's definition in the `users` list of the `-auth.config` file.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmauth.md#2025-04-22_snippet_34\n\nLANGUAGE: yaml\nCODE:\n```\nusers:\n- username: foo\n  password: bar\n  url_prefix: \"http://some-backend/\"\n  max_concurrent_requests: 10\n\n```\n\n----------------------------------------\n\nTITLE: Implementing FilepathGlob in Go\nDESCRIPTION: The FilepathGlob function returns names of files matching a pattern or nil if no matches are found. It simplifies path/filepath.Glob() usage by wrapping complex operations. This function ignores I/O errors by default but can be configured to abort via WithFailOnIOErrors. It requires handling of string patterns and io/fs to execute file path manipulations.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/bmatcuk/doublestar/v4/README.md#2025-04-22_snippet_14\n\nLANGUAGE: go\nCODE:\n```\nfunc FilepathGlob(pattern string, opts ...GlobOption) (matches []string, err error)\n```\n\n----------------------------------------\n\nTITLE: Defining count_over_time in MetricsQL - Markdown\nDESCRIPTION: Documents the count_over_time function, used for counting the number of raw samples within a lookbehind window for each time series. Notes PromQL compatibility, removal of metric names by default, and application scenarios. Languages: Markdown for documentation, MetricsQL for query context.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/MetricsQL.md#2025-04-22_snippet_14\n\nLANGUAGE: Markdown\nCODE:\n```\n#### count_over_time\n\n`count_over_time(series_selector[d])` is a [rollup function](#rollup-functions), which calculates the number of [raw samples](https://docs.victoriametrics.com/keyconcepts/#raw-samples)\non the given lookbehind window `d` per each time series returned from the given [series_selector](https://docs.victoriametrics.com/keyconcepts/#filtering).\n\nMetric names are stripped from the resulting rollups. Add [keep_metric_names](#keep_metric_names) modifier in order to keep metric names.\n\nThis function is supported by PromQL.\n\nSee also [count_le_over_time](#count_le_over_time), [count_gt_over_time](#count_gt_over_time), [count_eq_over_time](#count_eq_over_time) and [count_ne_over_time](#count_ne_over_time).\n\n```\n\n----------------------------------------\n\nTITLE: Conditional Collapse with LogSQL in VictoriaMetrics\nDESCRIPTION: This snippet demonstrates the use of a conditional `collapse_nums` pipe, which collapses numbers in a specific log field only when a condition is met. It requires a filter to determine when the condition applies, and targets logs where the `user_type` field is 'admin'. The input is log entries, and the output is aggregated numeric data linked to specified fields based on the filter provided.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_80\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m | collapse_nums if (user_type:=admin) at foo\n```\n\n----------------------------------------\n\nTITLE: HTTP Output Configuration for VictoriaLogs\nDESCRIPTION: Configuration using the HTTP output plugin to send logs to VictoriaLogs in JSON format with specified stream fields and message field.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/data-ingestion/Logstash.md#2025-04-22_snippet_5\n\nLANGUAGE: conf\nCODE:\n```\noutput {\n  url => \"http://victorialogs:9428/insert/jsonline?_stream_fields=host.ip,process.name&_msg_field=message&_time_field=@timestamp\"\n  format => \"json\"\n  http_method => \"post\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring IAM Roles for Service Accounts in AWS (YAML)\nDESCRIPTION: This YAML snippet creates a Kubernetes ServiceAccount with an annotation linking it to an AWS IAM role, enabling pods using this ServiceAccount to assume the given AWS role for secure access. Dependencies: EKS cluster with IAM roles for service accounts enabled, and an IAM role ARN. The ServiceAccount should be referenced by deployments to enable role-based authentication for vmbackup.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmbackup.md#2025-04-22_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\\nkind: ServiceAccount\\nmetadata:\\n  name: monitoring-backups\\n  annotations:\\n    eks.amazonaws.com/role-arn: arn:aws:iam::{ACCOUNT_ID}:role/{ROLE_NAME}\\n\n```\n\n----------------------------------------\n\nTITLE: Basic Rollup Function in PromQL\nDESCRIPTION: Calculates min, max and avg values for raw samples over a lookbehind window. Returns results with rollup labels.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_51\n\nLANGUAGE: promql\nCODE:\n```\nrollup(series_selector[d])\n```\n\n----------------------------------------\n\nTITLE: Querying Equivalent for 'unique_samples' Aggregation in MetricsQL\nDESCRIPTION: This MetricsQL query is equivalent to the `unique_samples` stream aggregation function. It counts the number of distinct values returned by `count_values_over_time` for a given metric (typically a gauge) over a specified interval, effectively determining the number of unique sample values seen.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/stream-aggregation.md#2025-04-22_snippet_31\n\nLANGUAGE: metricsql\nCODE:\n```\ncount(count_values_over_time(some_metric[interval]))\n```\n\n----------------------------------------\n\nTITLE: Returning Current Time - PromQL - PromQL\nDESCRIPTION: now() returns the current timestamp as a floating-point number in seconds. Takes no parameters and is commonly used for dynamic time calculations in PromQL. No dependencies required.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_117\n\nLANGUAGE: PromQL\nCODE:\n```\n`now()`\n```\n\n----------------------------------------\n\nTITLE: Configuring Header-Based Routing in vmauth (YAML)\nDESCRIPTION: This YAML configuration snippet demonstrates how to route requests in vmauth based on the value of an HTTP request header using the `src_headers` option within a `url_map`. Requests with `TenantID: 42` are routed to `app1-backend`, those with `TenantID: 123:456` go to `app2-backend`, and all others are directed to a default URL.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmauth.md#2025-04-22_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\nunauthorized_user:\n  url_map:\n  - src_headers: [\"TenantID: 42\"]\n    url_prefix: \"http://app1-backend/\"\n  - src_headers: [\"TenantID: 123:456\"]\n    url_prefix: \"http://app2-backend/\"\n  default_url: http://some-backend/404-page.html\n```\n\n----------------------------------------\n\nTITLE: Using tmin_over_time with VictoriaMetrics - Markdown - Syntax Reference\nDESCRIPTION: This snippet describes tmin_over_time, used to obtain the timestamp for the raw sample with the minimum value in window d for each series. It strips metric names by default; to keep them, use keep_metric_names. Arguments: series_selector and d (window). Output: timestamp for minimum value per time series.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_72\n\nLANGUAGE: Markdown\nCODE:\n```\n`tmin_over_time(series_selector[d])`\n```\n\n----------------------------------------\n\nTITLE: Configuring Group By for Multivariate Models in VictoriaMetrics Anomaly Detection\nDESCRIPTION: This YAML snippet shows how to use the groupby parameter with multivariate models to perform anomaly detection at the machine level, training separate models for each host.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/anomaly-detection/components/models.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nreader:\n  queries:\n    cpu: sum(rate(node_cpu_seconds_total[5m])) by (host, mode)\n    ram: |\n      (\n       (node_memory_MemTotal_bytes - node_memory_MemAvailable_bytes) \n       / node_memory_MemTotal_bytes\n      ) * 100 by (host)\n    network: |\n      sum(rate(node_network_receive_bytes_total[5m])) by (host) \n      + sum(rate(node_network_transmit_bytes_total[5m])) by (host)\n\nmodels:\n  iforest:\n    class: isolation_forest_multivariate\n    contamination: 0.01\n    queries: [cpu, ram, network]\n    groupby: [host]\n```\n\n----------------------------------------\n\nTITLE: Limiting Output Series from Aggregate Functions (MetricsQL)\nDESCRIPTION: Shows the optional `limit N` suffix for MetricsQL aggregate functions. This query calculates `sum(x) by (y)` but only returns the top 3 resulting time series, dropping any others.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_19\n\nLANGUAGE: MetricsQL\nCODE:\n```\nsum(x) by (y) limit 3\n```\n\n----------------------------------------\n\nTITLE: Using count_over_time Rollup Function in VictoriaMetrics\nDESCRIPTION: This function calculates the number of raw samples over a specified lookbehind window for each time series. It's supported by PromQL and strips metric names from the resulting rollups unless the keep_metric_names modifier is added.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\ncount_over_time(series_selector[d])\n```\n\n----------------------------------------\n\nTITLE: Replacing All Occurrences in Label Names Using 'labelmap_all' - YAML\nDESCRIPTION: Illustrates using 'labelmap_all' to replace regex-matched patterns (e.g., '-') in all label names with a replacement (e.g., '_'). Supported in VictoriaMetrics with enhanced relabeling. No dependencies except for the relabeling infrastructure. Main parameters: 'action', 'regex', and 'replacement'. Input: labels with dashes; output: the same labels with underscores replacing dashes. Facilitates uniform label names in YAML configurations.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmagent.md#2025-04-22_snippet_29\n\nLANGUAGE: YAML\nCODE:\n```\n- action: labelmap_all\n  regex: \"-\"\n  replacement: \"_\"\n```\n\n----------------------------------------\n\nTITLE: Calculating Rate Over Sum in PromQL\nDESCRIPTION: The rate_over_sum function computes the per-second rate over the sum of raw samples for a given time window. It's typically used with gauge metrics.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_49\n\nLANGUAGE: PromQL\nCODE:\n```\nrate_over_sum(series_selector[d])\n```\n\n----------------------------------------\n\nTITLE: Using rad() Transform Function in MetricsQL\nDESCRIPTION: Converts degrees to radians for every point in time series. Metric names are stripped by default unless keep_metric_names modifier is added.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_119\n\nLANGUAGE: markdown\nCODE:\n```\n#### rad\n\n`rad(q)` is a [transform function](#transform-functions), which converts [degrees to Radians](https://en.wikipedia.org/wiki/Radian#Conversions)\nfor every point of every time series returned by `q`.\n\nMetric names are stripped from the resulting series. Add [keep_metric_names](#keep_metric_names) modifier in order to keep metric names.\n\nThis function is supported by PromQL.\n\nSee also [deg](#deg).\n```\n\n----------------------------------------\n\nTITLE: Extracting Hour from Timestamps - PromQL - PromQL\nDESCRIPTION: The hour(q) function returns an integer representing the hour (0-23) for each point in the time series where q yields unix timestamps. Metric names are stripped unless keep_metric_names is specified. No external dependencies other than timestamp compliance. Supported by PromQL.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_107\n\nLANGUAGE: PromQL\nCODE:\n```\n`hour(q)`\n```\n\n----------------------------------------\n\nTITLE: Using the keep_metric_names modifier in MetricsQL\nDESCRIPTION: Shows how to use the keep_metric_names modifier to preserve metric names after applying functions or binary operators.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/MetricsQL.md#2025-04-22_snippet_9\n\nLANGUAGE: metricsql\nCODE:\n```\nrate({__name__=~\"foo|bar\"}) keep_metric_names\n```\n\nLANGUAGE: metricsql\nCODE:\n```\n({__name__=~\"foo|bar\"} / 10) keep_metric_names\n```\n\n----------------------------------------\n\nTITLE: Calculating Sum Over Range using range_sum() in MetricsQL\nDESCRIPTION: The `range_sum(q)` transform function calculates the sum of all data point values within the selected time range for each time series returned by the query `q`.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_108\n\nLANGUAGE: MetricsQL\nCODE:\n```\nrange_sum(q)\n```\n\n----------------------------------------\n\nTITLE: Sample YAML Configuration for OpenTelemetry Collector\nDESCRIPTION: Illustrates configuring the OpenTelemetry Collector with multiple configurations using YAML. It showcases initial settings in main.yaml and additional configuration in extra_extension.yaml, which can be merged to form a comprehensive setup using the confmap.enableMergeAppendOption.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/go.opentelemetry.io/collector/confmap/README.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# main.yaml\nreceivers:\n  otlp/in:\nprocessors:\n  attributes/example:\n    actions:\n      - key: key\n        value: \"value\"\n        action: upsert\n\nexporters:\n  otlp/out:\nextensions:\n  file_storage:\n\nservice:\n  pipelines:\n    traces:\n      receivers: [ otlp/in ]\n      processors: [ attributes/example ]\n      exporters: [ otlp/out ]\n  extensions: [ file_storage ]\n```\n\nLANGUAGE: yaml\nCODE:\n```\n# extra_extension.yaml\nprocessors:\n  batch:\nextensions:\n  healthcheckv2:\n\nservice:\n  extensions: [ healthcheckv2 ]\n  pipelines:\n    traces:\n      processors: [ batch ]\n```\n\n----------------------------------------\n\nTITLE: Initializing and Running Direct-Ingestion OTEL Go Application - Shell\nDESCRIPTION: This sequence of steps initializes a Go module, tidies dependencies, then starts an example web server that sends OTEL metrics and logs directly to VictoriaMetrics and VictoriaLogs, bypassing the collector. Access logs show server startup details.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/guides/getting-started-with-opentelemetry/README.md#2025-04-22_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\ngo mod init vm/otel\\ngo mod tidy\n```\n\nLANGUAGE: shell\nCODE:\n```\ngo run main.go \\n2024/03/25 19:27:41 Starting web server...\\n2024/03/25 19:27:41 web server started at localhost:8081.\n```\n\n----------------------------------------\n\nTITLE: Installing Google Cloud Compute Metadata Client Library in Go - Bash\nDESCRIPTION: This bash command installs the Go client library for Google Cloud Compute metadata using the 'go get' tool. The 'cloud.google.com/go/compute/metadata' package allows Go programs to interact with Google Cloud's metadata service. Users should have Go installed in their environment, and the command will retrieve and add the necessary package to the current or global Go module dependencies. This command does not require any additional arguments and outputs nothing unless errors occur.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/cloud.google.com/go/compute/metadata/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/compute/metadata\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Swarm SD in YAML\nDESCRIPTION: This YAML configuration snippet sets up service discovery for Docker Swarm targets. The configuration includes setting the Docker daemon address and specifying the role to determine the resources to discover. Depending on the role, different target labels are populated, and optional parameters like `port` and `filters` can be specified to tailor the discovery process. This setup requires VictoriaMetrics, and the roles determine if services, tasks, or nodes are discovered.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/sd_configs.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nscrape_configs:\n- job_name: dockerswarm\n  dockerswarm_sd_configs:\n\n    # host must contain the address of the Docker daemon.\n    #\n  - host: \"...\"\n\n    # role must contain `services`, `tasks` or `nodes` as described below.\n    #\n    role: ...\n\n    # port is an optional port to scrape metrics from, when `role` is nodes, and for discovered\n    # tasks and services that don't have published ports.\n    # By default, port 80 is used.\n    #\n    # port: ...\n\n    # filters is an optional filters to limit the discovery process to a subset of available resources.\n    # The available filters are listed in the upstream documentation:\n    # Services: https://docs.docker.com/engine/api/v1.40/#operation/ServiceList\n    # Tasks: https://docs.docker.com/engine/api/v1.40/#operation/TaskList\n    # Nodes: https://docs.docker.com/engine/api/v1.40/#operation/NodeList\n    #\n    # filters:\n    # - name: \"...\"\n    #   values: [\"...\", \"...\"]\n\n    # Additional HTTP API client options can be specified here.\n    # See https://docs.victoriametrics.com/sd_configs/#http-api-client-options\n\n```\n\n----------------------------------------\n\nTITLE: Using distinct_over_time Rollup Function in VictoriaMetrics\nDESCRIPTION: This function returns the number of unique raw sample values on the lookbehind window for each time series. Metric names are stripped from results unless keep_metric_names modifier is added.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_19\n\nLANGUAGE: markdown\nCODE:\n```\ndistinct_over_time(series_selector[d])\n```\n\n----------------------------------------\n\nTITLE: Reading from Struct with Koanf in Go\nDESCRIPTION: This snippet shows how to use the structs provider in Koanf to load configuration data from a Go struct. It demonstrates defining a complex nested struct and loading its data into Koanf.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/knadh/koanf/v2/README.md#2025-04-22_snippet_11\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/knadh/koanf/v2\"\n\t\"github.com/knadh/koanf/providers/structs\"\n)\n\n// Global koanf instance. Use \".\" as the key path delimiter. This can be \"/\" or any character.\nvar k = koanf.New(\".\")\n\ntype parentStruct struct {\n\tName   string      `koanf:\"name\"`\n\tID     int         `koanf:\"id\"`\n\tChild1 childStruct `koanf:\"child1\"`\n}\ntype childStruct struct {\n\tName        string            `koanf:\"name\"`\n\tType        string            `koanf:\"type\"`\n\tEmpty       map[string]string `koanf:\"empty\"`\n\tGrandchild1 grandchildStruct  `koanf:\"grandchild1\"`\n}\ntype grandchildStruct struct {\n\tIds []int `koanf:\"ids\"`\n\tOn  bool  `koanf:\"on\"`\n}\ntype sampleStruct struct {\n\tType    string            `koanf:\"type\"`\n\tEmpty   map[string]string `koanf:\"empty\"`\n\tParent1 parentStruct      `koanf:\"parent1\"`\n}\n\nfunc main() {\n\t// Load default values using the structs provider.\n\t// We provide a struct along with the struct tag `koanf` to the\n\t// provider.\n\tk.Load(structs.Provider(sampleStruct{\n\t\tType:  \"json\",\n\t\tEmpty: make(map[string]string),\n\t\tParent1: parentStruct{\n\t\t\tName: \"parent1\",\n\t\t\tID:   1234,\n\t\t\tChild1: childStruct{\n\t\t\t\tName:  \"child1\",\n\t\t\t\tType:  \"json\",\n\t\t\t\tEmpty: make(map[string]string),\n\t\t\t\tGrandchild1: grandchildStruct{\n\t\t\t\t\tIds: []int{1, 2, 3},\n\t\t\t\t\tOn:  true,\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t}, \"koanf\"), nil)\n\n\tfmt.Printf(\"name is = `%s`\\n\", k.String(\"parent1.child1.name\"))\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting Native Format Data from VictoriaMetrics using Shell\nDESCRIPTION: Exports all time series data (`match={__name__!=\"\"}`) from a source VictoriaMetrics instance (`source-victoriametrics:8428`) in VictoriaMetrics' native binary format via the `/api/v1/export/native` endpoint. The output is saved to `exported_data.bin`. Requires `curl`.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/README.md#2025-04-22_snippet_49\n\nLANGUAGE: sh\nCODE:\n```\n# Export the data from <source-victoriametrics>:\ncurl http://source-victoriametrics:8428/api/v1/export/native -d 'match={__name__!=\"\"}' > exported_data.bin\n```\n\n----------------------------------------\n\nTITLE: Exporting Gzipped JSON Lines Data from VictoriaMetrics using Shell\nDESCRIPTION: Exports all time series data (`match={__name__!=\"\"}`) from a source VictoriaMetrics instance (`source-victoriametrics:8428`) via the `/api/v1/export` endpoint. The `Accept-Encoding: gzip` header requests compressed output, which is saved to `exported_data.jsonl.gz`. Requires `curl` to be installed.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/README.md#2025-04-22_snippet_47\n\nLANGUAGE: sh\nCODE:\n```\n# Export gzipped data from <source-victoriametrics>:\ncurl -H 'Accept-Encoding: gzip' http://source-victoriametrics:8428/api/v1/export -d 'match={__name__!=\"\"}' > exported_data.jsonl.gz\n```\n\n----------------------------------------\n\nTITLE: Comprehensive Auth and Routing Configuration - vmauth - YAML\nDESCRIPTION: This YAML configuration illustrates multiple forms of user authentication (bearer, auth token, basic auth), routing destinations (single backend, round-robin load balancing), IP filtering, header manipulation, concurrency limits, retry strategies, proxy TLS settings, URL mapping, and support for unauthorized users. This snippet requires vmauth and is designed for complex deployments needing granular traffic control, failover, and security. Sensitive data can be injected using %{ENV_VAR} placeholders. Key parameters include user credentials, url_prefix, headers, response_headers, url_map with src_paths, ip_filters, and concurrency control. Outputs are proxy behaviors as defined per user.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmauth.md#2025-04-22_snippet_44\n\nLANGUAGE: yaml\nCODE:\n```\n# Arbitrary number of usernames may be put here.\n# It is possible to set multiple identical usernames with different passwords.\n# Such usernames can be differentiated by `name` option.\n\nusers:\n  # Requests with the 'Authorization: Bearer XXXX' and 'Authorization: Token XXXX'\n  # header are proxied to http://localhost:8428 .\n  # For example, http://vmauth:8427/api/v1/query is proxied to http://localhost:8428/api/v1/query\n  # Requests with the Basic Auth username=XXXX are proxied to http://localhost:8428 as well.\n- bearer_token: \"XXXX\"\n  url_prefix: \"http://localhost:8428\"\n\n  # Requests with the 'Authorization: Foo XXXX' header are proxied to http://localhosT:8428 .\n  # For example, http://vmauth:8427/api/v1/query is proxied to http://localhost:8428/api/v1/query\n- auth_token: \"Foo XXXX\"\n  url_prefix: \"http://localhost:8428\"\n\n  # Requests with the 'Authorization: Bearer YYY' header are proxied to http://localhost:8428 ,\n  # The `X-Scope-OrgID: foobar` http header is added to every proxied request.\n  # The `X-Server-Hostname` http header is removed from the proxied response.\n  # For example, http://vmauth:8427/api/v1/query is proxied to http://localhost:8428/api/v1/query\n- bearer_token: \"YYY\"\n  url_prefix: \"http://localhost:8428\"\n  # extra headers to add to the request or remove from the request (if header value is empty)\n  headers:\n    - \"X-Scope-OrgID: foobar\"\n  # extra headers to add to the response or remove from the response (if header value is empty)\n  response_headers:\n    - \"X-Server-Hostname:\" # empty value means the header will be removed from the response\n\n  # All the requests to http://vmauth:8427 with the given Basic Auth (username:password)\n  # are proxied to http://localhost:8428 .\n  # For example, http://vmauth:8427/api/v1/query is proxied to http://localhost:8428/api/v1/query\n  #\n  # The given user can send maximum 10 concurrent requests according to the provided max_concurrent_requests.\n  # Excess concurrent requests are rejected with 429 HTTP status code.\n  # See also -maxConcurrentPerUserRequests and -maxConcurrentRequests command-line flags.\n- username: \"local-single-node\"\n  password: \"***\"\n  url_prefix: \"http://localhost:8428\"\n  max_concurrent_requests: 10\n\n  # All the requests to http://vmauth:8427 with the given Basic Auth (username:password)\n  # are proxied to http://localhost:8428 with extra_label=team=dev query arg.\n  # For example, http://vmauth:8427/api/v1/query is proxied to http://localhost:8428/api/v1/query?extra_label=team=dev\n- username: \"local-single-node2\"\n  password: \"***\"\n  url_prefix: \"http://localhost:8428?extra_label=team=dev\"\n\n  # All the requests to http://vmauth:8427 with the given Basic Auth (username:password)\n  # are proxied to https://localhost:8428.\n  # For example, http://vmauth:8427/api/v1/query is proxied to https://localhost/api/v1/query\n  # TLS verification is skipped for https://localhost.\n- username: \"local-single-node-with-tls\"\n  password: \"***\"\n  url_prefix: \"https://localhost\"\n  tls_insecure_skip_verify: true\n\n  # All the requests to http://vmauth:8427 with the given Basic Auth (username:password)\n  # are load-balanced among http://vmselect1:8481/select/123/prometheus and http://vmselect2:8481/select/123/prometheus\n  # For example, http://vmauth:8427/api/v1/query is proxied to the following urls in a round-robin manner:\n  #   - http://vmselect1:8481/select/123/prometheus/api/v1/select\n  #   - http://vmselect2:8481/select/123/prometheus/api/v1/select\n- username: \"cluster-select-account-123\"\n  password: \"***\"\n  url_prefix:\n  - \"http://vmselect1:8481/select/123/prometheus\"\n  - \"http://vmselect2:8481/select/123/prometheus\"\n\n  # All the requests to http://vmauth:8427 with the given Basic Auth (username:password)\n  # are load-balanced between http://vminsert1:8480/insert/42/prometheus and http://vminsert2:8480/insert/42/prometheus\n  # For example, http://vmauth:8427/api/v1/write is proxied to the following urls in a round-robin manner:\n  #   - http://vminsert1:8480/insert/42/prometheus/api/v1/write\n  #   - http://vminsert2:8480/insert/42/prometheus/api/v1/write\n- username: \"cluster-insert-account-42\"\n  password: \"***\"\n  url_prefix:\n  - \"http://vminsert1:8480/insert/42/prometheus\"\n  - \"http://vminsert2:8480/insert/42/prometheus\"\n\n  # A single user for querying and inserting data:\n  #\n  # - Requests to http://vmauth:8427/api/v1/query, http://vmauth:8427/api/v1/query_range\n  #   and http://vmauth:8427/api/v1/label/<label_name>/values are proxied to the following urls in a round-robin manner:\n  #     - http://vmselect1:8481/select/42/prometheus\n  #     - http://vmselect2:8481/select/42/prometheus\n  #   For example, http://vmauth:8427/api/v1/query is proxied to http://vmselect1:8480/select/42/prometheus/api/v1/query\n  #   or to http://vmselect2:8480/select/42/prometheus/api/v1/query .\n  #   Requests are re-tried at other url_prefix backends if response status codes match 500 or 502.\n  #\n  # - Requests to http://vmauth:8427/api/v1/write are proxied to http://vminsert:8480/insert/42/prometheus/api/v1/write .\n  #   The \"X-Scope-OrgID: abc\" http header is added to these requests.\n  #   The \"X-Server-Hostname\" http header is removed from the proxied response.\n  #\n  # Request which do not match `src_paths` from the `url_map` are proxied to the urls from `default_url`\n  # in a round-robin manner. The original request path is passed in `request_path` query arg.\n  # For example, request to http://vmauth:8427/non/existing/path are proxied:\n  #  - to http://default1:8888/unsupported_url_handler?request_path=/non/existing/path\n  #  - or http://default2:8888/unsupported_url_handler?request_path=/non/existing/path\n  #\n  # Regular expressions are allowed in `src_paths` and `src_hosts` entries.\n- username: \"foobar\"\n  # log requests that failed url_map rules, for debugging purposes\n  dump_request_on_errors: true\n  url_map:\n  - src_paths:\n    - \"/api/v1/query\"\n    - \"/api/v1/query_range\"\n    - \"/api/v1/label/[^/]+/values\"\n    url_prefix:\n    - \"http://vmselect1:8481/select/42/prometheus\"\n    - \"http://vmselect2:8481/select/42/prometheus\"\n    retry_status_codes: [500, 502]\n  - src_paths: [\"/api/v1/write\"]\n    url_prefix: \"http://vminsert:8480/insert/42/prometheus\"\n    headers:\n    - \"X-Scope-OrgID: abc\"\n    response_headers:\n    - \"X-Server-Hostname:\" # empty value means the header will be removed from the response\n    ip_filters:\n      deny_list: [127.0.0.1]\n  default_url:\n  - \"http://default1:8888/unsupported_url_handler\"\n  - \"http://default2:8888/unsupported_url_handler\"\n\n# Requests without Authorization header are proxied according to `unauthorized_user` section.\n# Requests are proxied in round-robin fashion between `url_prefix` backends.\n# The deny_partial_response query arg is added to all the proxied requests.\n# The requests are re-tried if url_prefix backends send 500 or 503 response status codes.\n# Note that the unauthorized_user section takes precedence when processing a route without credentials,\n# even if such a route also exists in the users section (see https://github.com/VictoriaMetrics/VictoriaMetrics/issues/5236).\nunauthorized_user:\n  url_prefix:\n  - http://vmselect-az1/?deny_partial_response=1\n  - http://vmselect-az2/?deny_partial_response=1\n  retry_status_codes: [503, 500]\n\nip_filters:\n  allow_list: [\"1.2.3.0/24\", \"127.0.0.1\"]\n  deny_list:\n  - 10.1.0.1\n\n```\n\n----------------------------------------\n\nTITLE: Applying contains_any Filter for Log Messages - LogsQL\nDESCRIPTION: Demonstrates the use of the contains_any filter in LogsQL for matching logs containing any one of multiple specified words or phrases, illustrating its equivalence to OR logic.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_64\n\nLANGUAGE: logsql\nCODE:\n```\ncontains_any(foo, \"bar baz\")\n```\n\nLANGUAGE: logsql\nCODE:\n```\nfoo OR \"bar baz\"\n```\n\n----------------------------------------\n\nTITLE: Clock Package Documentation\nDESCRIPTION: Markdown documentation explaining the purpose and origin of the clock package, which provides time operation interfaces and testing capabilities. The package is copied from k8s.io/utils/clock to resolve circular dependency issues with k8s.io/klog.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/k8s.io/klog/v2/internal/clock/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Clock\n\nThis package provides an interface for time-based operations.  It allows\nmocking time for testing.\n\nThis is a copy of k8s.io/utils/clock. We have to copy it to avoid a circular\ndependency (k8s.io/klog -> k8s.io/utils -> k8s.io/klog).\n```\n\n----------------------------------------\n\nTITLE: Filtering Series by Label Regex Mismatch in MetricsQL\nDESCRIPTION: A label manipulation function that removes time series from `q` where the specified `label`'s value matches the given `regexp`. Useful after functions like `rollup`. See also `label_match` and `labels_equal`. Implicitly applies `default_rollup()` if `q` is a series selector.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_151\n\nLANGUAGE: metricsql\nCODE:\n```\nlabel_mismatch(q, \"label\", \"regexp\")\n```\n\n----------------------------------------\n\nTITLE: Writing Data with InfluxDB Line Protocol - Shell\nDESCRIPTION: This snippet writes metric data to VictoriaMetrics using InfluxDB line protocol, compatible with both single-node and cluster versions. It posts the measurement and associated tags/fields using curl, beneficial for integrations with InfluxDB-like client applications.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/url-examples.md#2025-04-22_snippet_18\n\nLANGUAGE: sh\nCODE:\n```\ncurl -d 'measurement,tag1=value1,tag2=value2 field1=123,field2=1.23' -X POST http://localhost:8428/write\n```\n\nLANGUAGE: sh\nCODE:\n```\ncurl -d 'measurement,tag1=value1,tag2=value2 field1=123,field2=1.23' -X POST http://<vminsert>:8480/insert/0/influx/write\n```\n\n----------------------------------------\n\nTITLE: Configuring journal-upload.conf for VictoriaLogs Integration\nDESCRIPTION: Basic configuration for systemd-journal-upload to send logs to VictoriaLogs. The URL should be modified to point to your VictoriaLogs server address and port.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/data-ingestion/Journald.md#2025-04-22_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[Upload]\nURL=http://localhost:9428/insert/journald\n```\n\n----------------------------------------\n\nTITLE: Running vmalert with Object Storage Rules\nDESCRIPTION: Demonstrates the command to run vmalert with alerting and recording rules fetched from S3 or GCS object storage. Commands use specific URL prefixes to read rule files, requiring network access to the stated bucket and potential credential configurations.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmalert.md#2025-04-22_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\n./bin/vmalert -rule=s3://bucket/dir/alert.rules\n```\n\nLANGUAGE: shell\nCODE:\n```\n./bin/vmalert -rule=gs://bucket/dir/alert.rules\n```\n\n----------------------------------------\n\nTITLE: Drop Empty Fields in LogSQL with VictoriaMetrics\nDESCRIPTION: This snippet demonstrates how to use the `drop_empty_fields` pipe to exclude fields with empty values from results. It effectively reduces log size by omitting redundant, empty fields from query outputs, streamlining resultant data for further processing.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_83\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m | extract 'email: <email>,' from foo | drop_empty_fields\n```\n\n----------------------------------------\n\nTITLE: Kube State Metrics Discovery in Kubernetes\nDESCRIPTION: Configuration for discovering and scraping kube-state-metrics in Kubernetes, including port selection and container filtering.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/scrape_config_examples.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nscrape_configs:\n- job_name: kube-state-metrics\n  kubernetes_sd_configs:\n  - role: pod\n  relabel_configs:\n\n    # Leave only targets with `kube-state-metrics` container name.\n    # If kube-state-metrics container has another name in your Kubernetes cluster,\n    # then adjust the regex value accordingly.\n  - source_labels: [__meta_kubernetes_pod_container_name]\n    regex: kube-state-metrics\n    action: keep\n\n    # kube-state-metrics container may expose multiple ports.\n    # We need scraping only the e.g. service port, and do not need scraping e.g. telemetry port.\n    # The kube-state-metrics service port usually equals to 8080.\n    # Modify the regex accordingly if you use other port for kube-state-metrics.\n    #\n  - source_labels: [__meta_kubernetes_pod_container_port_number]\n    regex: \"8080\"\n    action: keep\n```\n\n----------------------------------------\n\nTITLE: Memory Usage Aggregation by Job\nDESCRIPTION: Aggregation query to calculate total memory usage grouped by job label.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/keyConcepts/keyConcepts.md#2025-04-22_snippet_24\n\nLANGUAGE: metricsql\nCODE:\n```\nsum(process_resident_memory_bytes) by (job)\n```\n\n----------------------------------------\n\nTITLE: Writing a Single Data Point via OpenTSDB HTTP /api/put - VictoriaMetrics - Shell\nDESCRIPTION: This 'curl' command sends a single data point in JSON format to VictoriaMetrics using the OpenTSDB /api/put HTTP endpoint. The required fields are 'metric', 'value', and a 'tags' object. This operation requires the HTTP receiver to be running and accepting connections on the specified host and port.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/README.md#2025-04-22_snippet_29\n\nLANGUAGE: sh\nCODE:\n```\ncurl -H 'Content-Type: application/json' -d '{\"metric\":\"x.y.z\",\"value\":45.34,\"tags\":{\"t1\":\"v1\",\"t2\":\"v2\"}}' http://localhost:4242/api/put\n```\n\n----------------------------------------\n\nTITLE: Configuring Backtesting Scheduler with UNIX Time Format in YAML\nDESCRIPTION: Example YAML configuration for a backtesting scheduler using UNIX timestamp format. Defines overall timeframe, training window, and inference frequency with optional parallel execution settings.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/anomaly-detection/components/scheduler.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nschedulers:\n  backtesting_scheduler_alias:\n    class: \"backtesting\"\n    # (or class: \"scheduler.backtesting.BacktestingScheduler\" until v1.13.0 with class alias support)\n    from_s: 167253120\n    to_s: 167443200\n    fit_window: '14d'\n    fit_every: '1h'\n    n_jobs: 1  # default = 1 (sequential), set it up to # of CPUs for parallel execution\n```\n\n----------------------------------------\n\nTITLE: Conditionally Unpacking Logfmt Fields using LogSQL\nDESCRIPTION: This LogSQL query selects logs from the last 5 minutes (`_time:5m`) and conditionally applies the `unpack_logfmt` pipe to the `foo` field. The unpacking only occurs if the `ip` field in the current log entry is not set or is empty (`if (ip:\"\")`). This allows selective parsing based on log entry content.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_164\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m | unpack_logfmt if (ip:\"\") from foo\n```\n\n----------------------------------------\n\nTITLE: Using tmin_over_time in VictoriaMetrics Syntax - plaintext\nDESCRIPTION: tmin_over_time provides the timestamp for the raw sample with the lowest value in the window across each matching series. Operates on a given series_selector and window parameter. Output is a timestamp; metric names are excluded unless keep_metric_names is used.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_63\n\nLANGUAGE: plaintext\nCODE:\n```\n`tmin_over_time(series_selector[d])`\n```\n\n----------------------------------------\n\nTITLE: List Backups API Response (JSON)\nDESCRIPTION: Example JSON response from the `GET /api/v1/backups` endpoint, returning an array of backup objects available in the remote storage. Each object includes the backup name, size (in bytes and human-readable format), and creation timestamp in RFC3339 format.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmbackupmanager.md#2025-04-22_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n[{\"name\":\"daily/2023-04-07\",\"size_bytes\":318837,\"size\":\"311.4ki\",\"created_at\":\"2023-04-07T16:15:07+00:00\"},{\"name\":\"hourly/2023-04-07:11\",\"size_bytes\":318837,\"size\":\"311.4ki\",\"created_at\":\"2023-04-07T16:15:06+00:00\"},{\"name\":\"latest\",\"size_bytes\":318837,\"size\":\"311.4ki\",\"created_at\":\"2023-04-07T16:15:04+00:00\"},{\"name\":\"monthly/2023-04\",\"size_bytes\":318837,\"size\":\"311.4ki\",\"created_at\":\"2023-04-07T16:15:10+00:00\"},{\"name\":\"weekly/2023-14\",\"size_bytes\":318837,\"size\":\"311.4ki\",\"created_at\":\"2023-04-07T16:15:09+00:00\"}]\n\n```\n\n----------------------------------------\n\nTITLE: Querying Ingested Log Data\nDESCRIPTION: Example of querying logs from VictoriaLogs using the select endpoint with a simple search term.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/data-ingestion/README.md#2025-04-22_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ncurl http://localhost:9428/select/logsql/query -d 'query=fizzbuzz'\n```\n\n----------------------------------------\n\nTITLE: MetricsQL Query with Label Filtering\nDESCRIPTION: This snippet demonstrates how to use MetricsQL to filter time series data based on specific label values. It shows an example of selecting time series with a particular label value using the equality operator.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/keyConcepts/keyConcepts.md#2025-04-22_snippet_16\n\nLANGUAGE: metricsql\nCODE:\n```\nrequests_total{code=\"200\"}\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom Dashboard Path for vmui (Shell)\nDESCRIPTION: The `-vmui.customDashboardsPath` command-line flag allows users to specify a directory path containing configuration files for custom dashboards, which will then be loaded and displayed in the VictoriaMetrics UI (vmui). This feature was introduced in v1.86.2 to enhance UI customization.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/changelog/CHANGELOG_2023.md#2025-04-22_snippet_20\n\nLANGUAGE: shell\nCODE:\n```\n-vmui.customDashboardsPath\n```\n\n----------------------------------------\n\nTITLE: Using escaped characters in metric and label names\nDESCRIPTION: Shows how to use escaped characters in metric and label names in MetricsQL expressions.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/MetricsQL.md#2025-04-22_snippet_7\n\nLANGUAGE: metricsql\nCODE:\n```\nfoo\\-bar{baz\\=aa=\"b\"}\n```\n\n----------------------------------------\n\nTITLE: Debug Mode Elasticsearch Output Configuration\nDESCRIPTION: Logstash configuration with debug mode enabled for troubleshooting log ingestion. Includes all basic parameters plus debug flag for detailed logging.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/data-ingestion/Logstash.md#2025-04-22_snippet_1\n\nLANGUAGE: logstash\nCODE:\n```\noutput {\n  elasticsearch {\n    hosts => [\"http://localhost:9428/insert/elasticsearch/\"]\n    parameters => {\n        \"_msg_field\" => \"message\"\n        \"_time_field\" => \"@timestamp\"\n        \"_stream_fields\" => \"host.name,process.name\"\n        \"debug\" => \"1\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Hetzner Service Discovery in YAML\nDESCRIPTION: Configuration example for Hetzner service discovery, supporting both Hetzner Cloud and Robot platforms. Includes authentication settings, role specification, and optional port configuration.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/sd_configs.md#2025-04-22_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nscrape_configs:\n- job_name: hetzner\n  hetzner_sd_configs:\n\n    # The mandatory Hetzner role for entity discovery.\n    # Must be either 'robot' or 'hcloud'.\n    #\n    role: \"hcloud\"\n\n    # Required credentials for API server authentication for 'hcloud' role.\n    #\n    authorization:\n      credentials: \"...\"\n      # type: \"...\"  # default: Bearer\n      # credentials_file: \"...\"  # is mutually-exclusive with credentials\n\n    # Required credentials for API server authentication for 'robot' role.\n    #\n    # basic_auth:\n    #  username: \"...\"\n    #  username_file: \"...\"  # is mutually-exclusive with username\n    #  password: \"...\"\n    #  password_file: \"...\"  # is mutually-exclusive with password\n\n    # port is an optional port to scrape metrics from.\n    # By default, port 80 is used.\n    #\n    # port: ...\n```\n\n----------------------------------------\n\nTITLE: Matching Against Multiple Numeric Constants in MetricsQL\nDESCRIPTION: Illustrates how to check if a metric's value equals one of several numeric constants using the `== (C1, ..., CN)` syntax in MetricsQL. This example selects `status_code` metrics with values 300, 301, or 304.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_5\n\nLANGUAGE: metricsql\nCODE:\n```\nstatus_code == (300, 301, 304)\n```\n\n----------------------------------------\n\nTITLE: Generating Exponentially Distributed Random Numbers using rand_exponential() in MetricsQL\nDESCRIPTION: The `rand_exponential(seed)` transform function produces pseudo-random numbers following an exponential distribution. An optional `seed` can be supplied to control the pseudo-random number generation sequence.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_94\n\nLANGUAGE: MetricsQL\nCODE:\n```\nrand_exponential(seed)\n```\n\n----------------------------------------\n\nTITLE: Verifying VictoriaMetrics Pods Status\nDESCRIPTION: This shell command allows users to verify if the VictoriaMetrics cluster pods are running successfully. Users must have kubectl configured and connected to their Kubernetes cluster.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/guides/k8s-ha-monitoring-via-vm-cluster/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nkubectl get pods | grep vmcluster\n```\n\n----------------------------------------\n\nTITLE: Extracting a Single Field from Logfmt using LogSQL (Performance Tip)\nDESCRIPTION: This LogSQL query demonstrates using the `extract` pipe as a potentially faster alternative to `unpack_logfmt` when only a single field needs to be extracted from a logfmt line. It selects logs from the last 5 minutes (`_time:5m`) and extracts the value associated with the key `ip` (preceded by a space) from the `_msg` field into a new field named `ip`.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_162\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m | extract ' ip=<ip>'\n```\n\n----------------------------------------\n\nTITLE: Reading Configuration from S3 Bucket with Koanf in Go\nDESCRIPTION: This snippet demonstrates how to load a JSON configuration file from an S3 bucket using Koanf. It uses environment variables for AWS credentials and bucket information.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/knadh/koanf/v2/README.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\n// Load JSON config from s3.\nif err := k.Load(s3.Provider(s3.Config{\n\tAccessKey: os.Getenv(\"AWS_S3_ACCESS_KEY\"),\n\tSecretKey: os.Getenv(\"AWS_S3_SECRET_KEY\"),\n\tRegion:    os.Getenv(\"AWS_S3_REGION\"),\n\tBucket:    os.Getenv(\"AWS_S3_BUCKET\"),\n\tObjectKey: \"dir/config.json\",\n}), json.Parser()); err != nil {\n\tlog.Fatalf(\"error loading config: %v\", err)\n}\n```\n\n----------------------------------------\n\nTITLE: Testing ULID Go Library\nDESCRIPTION: Command to run all tests for the ULID library in Go. It verifies the correctness of the ULID implementation and should be run after any changes to the code.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/oklog/ulid/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngo test ./...\n```\n\n----------------------------------------\n\nTITLE: Fixing vmagent `proxy_url` Authorization for HTTPS (Configuration)\nDESCRIPTION: Corrects a bug in `vmagent` where proxy authorization details (like username/password) embedded within the `proxy_url` configuration were ignored when scraping targets over HTTPS (`https` scheme).\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/changelog/CHANGELOG_2024.md#2025-04-22_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\n# Example scrape_config entry\nscrape_configs:\n- job_name: 'proxied_https'\n  scheme: https\n  proxy_url: http://user:password@proxy.example.com:8080 # Authorization should now work for HTTPS targets\n  static_configs:\n  - targets: ['target.example.com']\n```\n\n----------------------------------------\n\nTITLE: Stats Query with Timezone Offset\nDESCRIPTION: Calculates per-day number of logs over the last week in UTC+02:00 timezone using stats aggregation.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_141\n\nLANGUAGE: logsql\nCODE:\n```\n_time:1w | stats by (_time:1d offset 2h) count() logs_total\n```\n\n----------------------------------------\n\nTITLE: Result of Implicit Step Addition in Subquery (MetricsQL)\nDESCRIPTION: Shows the explicit form `avg_over_time(rate(http_requests_total[5m])[1h:1i])` after VictoriaMetrics adds the default step `1i` to the subquery `avg_over_time(rate(http_requests_total[5m])[1h])`.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_166\n\nLANGUAGE: MetricsQL\nCODE:\n```\navg_over_time(rate(http_requests_total[5m])[1h:1i])\n```\n\n----------------------------------------\n\nTITLE: Using sum_eq_over_time in VictoriaMetrics Syntax - plaintext\nDESCRIPTION: Illustrates sum_eq_over_time for summing raw sample values equal to a specific value 'eq' across a time window per time series. Intended for use on gauges with a defined series_selector and comparison value. Metric names are excluded by default unless otherwise specified.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_52\n\nLANGUAGE: plaintext\nCODE:\n```\n`sum_eq_over_time(series_selector[d], eq)`\n```\n\n----------------------------------------\n\nTITLE: Update Backup Lock Status API Response (JSON)\nDESCRIPTION: Example JSON response from the `PUT /api/v1/backups/<BACKUP_NAME>` endpoint after successfully updating the backup's lock status. It returns the details of the updated backup, including the new 'locked' attribute value.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmbackupmanager.md#2025-04-22_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\"name\":\"daily/2023-04-07\",\"size_bytes\":318837,\"size\":\"311.4ki\",\"created_at\":\"2023-04-07T16:15:07+00:00\", \"locked\": true}\n\n```\n\n----------------------------------------\n\nTITLE: Port Forwarding VictoriaMetrics Select Service\nDESCRIPTION: This command sets up port forwarding for the VictoriaMetrics select service, making it accessible from the local machine on port 8481.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/guides/k8s-ha-monitoring-via-vm-cluster/README.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nkubectl port-forward svc/vmcluster-victoria-metrics-cluster-vmselect 8481:8481\n```\n\n----------------------------------------\n\nTITLE: Ingesting Logs from GitHub Archive\nDESCRIPTION: Command to ingest logs from GitHub archive into the VictoriaLogs cluster using the vlinsert node.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/cluster.md#2025-04-22_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\ncurl -s https://data.gharchive.org/$(date -d '2 days ago' '+%Y-%m-%d')-10.json.gz \\\n        | curl -T - -X POST -H 'Content-Encoding: gzip' 'http://localhost:9481/insert/jsonline?_time_field=created_at&_stream_fields=type'\n```\n\n----------------------------------------\n\nTITLE: Multi-tenant Query Examples\nDESCRIPTION: Examples of querying metrics across multiple tenants using vm_account_id and vm_project_id label selectors.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/Cluster-VictoriaMetrics.md#2025-04-22_snippet_3\n\nLANGUAGE: promtextmetric\nCODE:\n```\nup{vm_account_id=\"7\", vm_project_id=\"9\" or vm_account_id=\"42\"}\nup{vm_account_id!=\"42\"}\nup{vm_account_id=~\"4.*\"}\n```\n\n----------------------------------------\n\nTITLE: Quantile Stats Function in LogsQL\nDESCRIPTION: Shows how to calculate percentile values for specified log fields.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_190\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m | stats\n  quantile(0.5, request_duration_seconds) p50,\n  quantile(0.9, request_duration_seconds) p90,\n  quantile(0.99, request_duration_seconds) p99\n```\n\n----------------------------------------\n\nTITLE: Building Docker Image with Custom Base Image for VictoriaMetrics Backup Tool\nDESCRIPTION: This command demonstrates how to build a Docker image for the VictoriaMetrics backup tool (vmbackup) using a custom base image. It uses the 'scratch' image as an example, which can be replaced with any other desired base image.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmbackup.md#2025-04-22_snippet_17\n\nLANGUAGE: sh\nCODE:\n```\nROOT_IMAGE=scratch make package-vmbackup\n```\n\n----------------------------------------\n\nTITLE: Using the Match Function for Pattern Matching in Go\nDESCRIPTION: This function signature defines `doublestar.Match`. It checks if a given `name` string matches the specified `pattern`, treating both as paths separated by forward slashes (`/`). It returns `true` for a match and `false` otherwise. The only potential error returned is `doublestar.ErrBadPattern` if the pattern is malformed. It's intended as a replacement for `path.Match`.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/bmatcuk/doublestar/v4/README.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfunc Match(pattern, name string) (bool, error)\n```\n\n----------------------------------------\n\nTITLE: Using Arbitrary Subexpressions with @ Modifier in MetricsQL\nDESCRIPTION: Shows that the timestamp for the `@` modifier in MetricsQL can be an arbitrary expression. This query evaluates `foo` at a timestamp calculated as one hour before the end of the selected query range.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_9\n\nLANGUAGE: MetricsQL\nCODE:\n```\nfoo @ (end() - 1h)\n```\n\n----------------------------------------\n\nTITLE: Basic Fluentd HTTP Output Configuration for VictoriaLogs\nDESCRIPTION: Basic configuration for sending logs to VictoriaLogs using Fluentd's HTTP output plugin. Specifies the endpoint and necessary headers for log field mapping.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/data-ingestion/Fluentd.md#2025-04-22_snippet_0\n\nLANGUAGE: fluentd\nCODE:\n```\n<match **>\n  @type http\n  endpoint \"http://localhost:9428/insert/jsonline\"\n  headers {\"VL-Msg-Field\": \"log\", \"VL-Time-Field\": \"time\", \"VL-Stream-Fields\": \"path\"}\n</match>\n```\n\n----------------------------------------\n\nTITLE: Verifying VictoriaMetrics Pod Status\nDESCRIPTION: Checks the status of the VictoriaMetrics pod to ensure it's running correctly after installation. This command lists all pods in the current namespace.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/guides/k8s-monitoring-via-vm-single/README.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get pods\n```\n\n----------------------------------------\n\nTITLE: Querying stream_ids with VictoriaLogs HTTP API - Shell\nDESCRIPTION: Executes an HTTP POST request to `/select/logsql/stream_ids` endpoint using `curl` to retrieve `_stream_id` values filtered by the specified query and time range. Requires VictoriaMetrics HTTP API endpoint and accepts query string parameters. Primarily returns JSON-formatted data with stream IDs. Ensure the VictoriaMetrics API is accessible on the specified host and port.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/querying/README.md#2025-04-22_snippet_19\n\nLANGUAGE: sh\nCODE:\n```\ncurl http://localhost:9428/select/logsql/stream_ids -d 'query=error' -d 'start=5m'\n```\n\n----------------------------------------\n\nTITLE: Converting Recording Rules to Stream Aggregation in YAML\nDESCRIPTION: This snippet demonstrates how to convert multiple recording rules into a single, more efficient stream aggregation rule. It showcases the optimization of merging aggregations that only differ in match expressions.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/stream-aggregation.md#2025-04-22_snippet_41\n\nLANGUAGE: yaml\nCODE:\n```\n- expr: sum(rate(node_cpu_seconds_total{mode!=\"idle\",mode!=\"iowait\",mode!=\"steal\"}[3m])) BY (instance)\n  record: instance:node_cpu:rate:sum\n- expr: sum(rate(node_network_receive_bytes_total[3m])) BY (instance)\n  record: instance:node_network_receive_bytes:rate:sum\n- expr: sum(rate(node_network_transmit_bytes_total[3m])) BY (instance)\n  record: instance:node_network_transmit_bytes:rate:sum\n```\n\nLANGUAGE: yaml\nCODE:\n```\n- match:\n  - node_cpu_seconds_total{mode!=\"idle\",mode!=\"iowait\",mode!=\"steal\"}\n  - node_network_receive_bytes_total\n  - node_network_transmit_bytes_total\n  interval: 3m\n  outputs: [rate_sum]  \n  by:\n  - instance\n  output_relabel_configs:\n    - source_labels: [__name__]\n      target_label: __name__\n      regex: \"(.+):.+\"\n      replacement: \"instance:$1:rate:sum\"\n```\n\n----------------------------------------\n\nTITLE: Packing Fields into JSON - LogSQL\nDESCRIPTION: The `pack_json` pipe command is used to pack all fields of log entries returned by a query into a JSON object and stores it as a string in the given field name. Dependencies include VictoriaMetrics and its query syntax. It supports selecting specific fields or using prefixes. Parameters include the field name for storage and optional fields to pack. Outputs a JSON string, preserving all labels unless explicitly removed afterward.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_119\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m | pack_json as _msg\n```\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m | pack_json\n```\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m | pack_json fields (foo, bar) as baz\n```\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m | pack_json fields (foo.*, bar.*) as baz\n```\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m | pack_json as foo | fields foo\n```\n\n----------------------------------------\n\nTITLE: Installing VictoriaMetrics as Windows Service using PowerShell\nDESCRIPTION: PowerShell commands to install VictoriaMetrics as a Windows service using WinSW. This snippet installs the service using the XML configuration and starts it.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nwinsw install VictoriaMetrics.xml\nGet-Service VictoriaMetrics | Start-Service\n```\n\n----------------------------------------\n\nTITLE: Writer Multi-tenancy Warning Log (Missing Label)\nDESCRIPTION: Logs a warning (available from v1.16.2) when multi-tenancy is configured (`tenant_id='multitenant'`) but the `vm_account_id` label is missing from the query result's label set. Helps debug multi-tenant configuration issues. Placeholder `{{query_key}}` provides context.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/anomaly-detection/components/monitoring.md#2025-04-22_snippet_25\n\nLANGUAGE: text\nCODE:\n```\nThe label vm_account_id was not found in the label set of {{query_key}}, but tenant_id='multitenant' is set in writer...\n```\n\n----------------------------------------\n\nTITLE: Extracting a Single Field from JSON using LogSQL (Performance Tip)\nDESCRIPTION: This LogSQL query demonstrates using the `extract` pipe as a potentially faster alternative to `unpack_json` when only a single field needs to be extracted from a JSON structure. It selects logs from the last 5 minutes (`_time:5m`) and extracts the value associated with the key `\"ip\"` from the `_msg` field into a new field named `ip`.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_154\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m | extract '\"ip\":<ip>'\n```\n\n----------------------------------------\n\nTITLE: Computing Maximum Value Over Time in PromQL\nDESCRIPTION: The max_over_time function calculates the maximum value over raw samples on a given lookbehind window for each time series. It is usually applied to gauges and is supported by PromQL.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_25\n\nLANGUAGE: promql\nCODE:\n```\nmax_over_time(series_selector[d])\n```\n\n----------------------------------------\n\nTITLE: Defining Scrape Targets in JSON for File-Based Discovery\nDESCRIPTION: This JSON snippet shows how to define scrape targets in a separate file (node_exporter_targets.json) for use with file-based target discovery in VictoriaMetrics.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/scrape_config_examples.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"targets\": [\"host1:9100\", \"host2:9100\", \"http://host3:9100/metrics\", \"http://host4:9100/metrics\"]\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Invoking median_over_time Rollup Function - PromQL/Pseudocode\nDESCRIPTION: Computes the median value from raw samples over the time window 'd' for series determined by the selector. Works with VictoriaMetrics; input is a gauge metric selection and the lookbehind duration. Result is a numeric median per series, particularly useful for smoothing outliers. No PromQL limitation known.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_42\n\nLANGUAGE: pseudo-promql\nCODE:\n```\n`median_over_time(series_selector[d])`\n```\n\n----------------------------------------\n\nTITLE: Getting Timestamps with time Function\nDESCRIPTION: The time function returns unix timestamp for every returned point. This function is supported by PromQL.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_110\n\nLANGUAGE: metricsql\nCODE:\n```\ntime()\n```\n\n----------------------------------------\n\nTITLE: Extracting Day of Year from Timestamps in MetricsQL\nDESCRIPTION: A transform function that returns the day of the year (1-366) for each data point in the time series returned by `q`, assuming the points represent Unix timestamps. If `q` is a series selector, `default_rollup()` is applied first. Metric names are stripped by default; use `keep_metric_names` to preserve them. Supported by PromQL.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_85\n\nLANGUAGE: MetricsQL\nCODE:\n```\n`day_of_year(q)`\n```\n\n----------------------------------------\n\nTITLE: Pure Increase Calculation with Increase_Pure in Markdown\nDESCRIPTION: 'increase_pure' assumes counters start from zero and avoids ignoring large initial values, enhancing flexibility in edge cases.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/MetricsQL.md#2025-04-22_snippet_35\n\nLANGUAGE: Markdown\nCODE:\n```\n`increase_pure(series_selector[d])` is a [rollup function](#rollup-functions), which works the same as [increase](#increase) except\\nof the following corner case - it assumes that [counters](https://docs.victoriametrics.com/keyconcepts/#counter) always start from 0.\n```\n\n----------------------------------------\n\nTITLE: Building vmalert from Source with Git and Make\nDESCRIPTION: Shell commands to clone the VictoriaMetrics repository and build the vmalert binary from source code. The resulting binary will be located in the bin directory.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmalert.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/VictoriaMetrics/VictoriaMetrics\ncd VictoriaMetrics\nmake vmalert\n```\n\n----------------------------------------\n\nTITLE: Using geomean aggregate function in PromQL\nDESCRIPTION: Aggregate function that calculates the geometric mean per each group of points with the same timestamp. Useful when analyzing proportional growth rates.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_150\n\nLANGUAGE: promql\nCODE:\n```\ngeomean(q)\n```\n\n----------------------------------------\n\nTITLE: Decoding JSON to a Map in Go\nDESCRIPTION: Demonstrates decoding a JSON object to a map with dynamic type determination. This structure is read first by type, then using the mapstructure library to adapt further processing based on detected type field.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/go-viper/mapstructure/v2/README.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"person\",\n  \"name\": \"Mitchell\"\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Quantile Over Time in PromQL\nDESCRIPTION: The quantile_over_time function computes a specific quantile over raw samples on a given lookbehind window for each time series. It's typically used with gauges and supported by PromQL.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_32\n\nLANGUAGE: promql\nCODE:\n```\nquantile_over_time(phi, series_selector[d])\n```\n\n----------------------------------------\n\nTITLE: Estimating Unique IP Count with Hash in LogsQL\nDESCRIPTION: This query returns an estimated number of unique non-empty values for the 'ip' field over the last 5 minutes using the count_uniq_hash stats function.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_183\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m | stats count_uniq_hash(ip) unique_ips_count\n```\n\n----------------------------------------\n\nTITLE: Enabling OpenTSDB Receiver with Telnet Protocol - VictoriaMetrics - Shell\nDESCRIPTION: This snippet demonstrates how to launch VictoriaMetrics with the OpenTSDB receiver enabled on TCP and UDP port 4242 using the '-opentsdbListenAddr' flag. It allows the server to accept metric ingestion in the OpenTSDB 'telnet put' protocol. Requires specifying the correct binary path and port to match agent configuration.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/README.md#2025-04-22_snippet_24\n\nLANGUAGE: sh\nCODE:\n```\n/path/to/victoria-metrics-prod -opentsdbListenAddr=:4242\n```\n\n----------------------------------------\n\nTITLE: Implementing Functional Option in Go\nDESCRIPTION: Demonstrates how to implement a functional option for configuration in Go.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\ntype optionFunc func(config) config\n\nfunc (fn optionFunc) apply(c config) config {\n\treturn fn(c)\n}\n\n// WithMyType sets t as MyType.\nfunc WithMyType(t MyType) Option {\n\treturn optionFunc(func(c config) config {\n\t\tc.MyType = t\n        return c\n\t})\n}\n```\n\n----------------------------------------\n\nTITLE: Writing Data to VictoriaMetrics using InfluxDB Line Protocol\nDESCRIPTION: This curl command demonstrates how to write a measurement to VictoriaMetrics using the InfluxDB line protocol format via an HTTP POST request.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/guides/migrate-from-influx/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncurl -d 'census,location=klamath,scientist=anderson bees=23' -X POST 'http://<victoriametrics-addr>:8428/write'\n```\n\n----------------------------------------\n\nTITLE: Routing Requests by Query Argument using vmauth (YAML)\nDESCRIPTION: Demonstrates routing in `vmauth` based on request query arguments for an `unauthorized_user`. The `src_query_args` list defines matching criteria. Requests with `db=foo` are routed to `http://app1-backend/`, requests where `db` starts with `bar` (using regex `~bar.*`) go to `http://app2-backend/`, and others default to `default_url`.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmauth.md#2025-04-22_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\nunauthorized_user:\n  url_map:\n  - src_query_args: [\"db=foo\"]\n    url_prefix: \"http://app1-backend/\"\n  - src_query_args: [\"db=~bar.*\"]\n    url_prefix: \"http://app2-backend/\"\n  default_url: http://some-backend/404-page.html\n```\n\n----------------------------------------\n\nTITLE: VMagent Scrape Configurations with Custom Headers in YAML\nDESCRIPTION: This YAML snippet demonstrates how to configure vmagent to send additional HTTP headers to scrape targets. This setup is useful when targets require specific authentication headers. The snippet includes an example of adding 'My-Auth' and 'TenantID' headers to a static config target. Ensure that your VictoriaMetrics agent is correctly configured and the scrape target supports custom headers.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/changelog/CHANGELOG_2022.md#2025-04-22_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\nscrape_configs:\n- job_name: foo\n  headers:\n  - \"My-Auth: top-secret\"\n  - \"TenantID: FooBar\"\n  static_configs:\n  - targets: [\"host123:8080\"]\n```\n\n----------------------------------------\n\nTITLE: Using bottomk_max aggregate function in PromQL\nDESCRIPTION: Aggregate function that returns up to k time series with the smallest maximum values. Can optionally include a sum of remaining series with a custom label.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_144\n\nLANGUAGE: promql\nCODE:\n```\nbottomk_max(k, q, \"other_label=other_value\")\n```\n\n----------------------------------------\n\nTITLE: Importing CSV Data to VictoriaMetrics\nDESCRIPTION: Examples for importing CSV data to VictoriaMetrics. The format parameter specifies how each column in the CSV should be interpreted, either as a metric value or as a label.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/url-examples.md#2025-04-22_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ncurl -d \"GOOG,1.23,4.56,NYSE\" 'http://localhost:8428/api/v1/import/csv?format=2:metric:ask,3:metric:bid,1:label:ticker,4:label:market'\n```\n\nLANGUAGE: sh\nCODE:\n```\ncurl -X POST 'http://localhost:8428/api/v1/import/csv?format=2:metric:ask,3:metric:bid,1:label:ticker,4:label:market' -T exported_data.csv\n```\n\nLANGUAGE: sh\nCODE:\n```\ncurl -d \"GOOG,1.23,4.56,NYSE\" 'http://<vminsert>:8480/insert/0/prometheus/api/v1/import/csv?format=2:metric:ask,3:metric:bid,1:label:ticker,4:label:market'\n```\n\nLANGUAGE: sh\nCODE:\n```\ncurl -X POST 'http://<vminsert>:8480/insert/0/prometheus/api/v1/import/csv?format=2:metric:ask,3:metric:bid,1:label:ticker,4:label:market' -T exported_data.csv\n```\n\n----------------------------------------\n\nTITLE: Fetching the End Timestamp in PromQL\nDESCRIPTION: The `end()` function retrieves the Unix timestamp in seconds for the last point in a series. Utilized in PromQL queries as the `end` query argument for `query_range`, this function is suitable for determining endpoint time data when analyzing time series intervals.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_75\n\nLANGUAGE: PromQL\nCODE:\n```\n`end()`\n```\n\n----------------------------------------\n\nTITLE: Running NewRelic Infrastructure Agent with VictoriaMetrics Collector URL - Shell\nDESCRIPTION: This snippet shows how to launch the NewRelic infrastructure agent pointed at the VictoriaMetrics database by setting the 'COLLECTOR_URL' and 'NRIA_LICENSE_KEY' environment variables. 'COLLECTOR_URL' directs event data to the /newrelic endpoint on VictoriaMetrics. Both correct endpoint and license key are required for successful data transmission.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/README.md#2025-04-22_snippet_33\n\nLANGUAGE: sh\nCODE:\n```\nCOLLECTOR_URL=\"http://localhost:8428/newrelic\" NRIA_LICENSE_KEY=\"NEWRELIC_LICENSE_KEY\" ./newrelic-infra\n```\n\n----------------------------------------\n\nTITLE: VictoriaMetrics Auth Help Command Output\nDESCRIPTION: Complete command-line help output showing all available configuration options for vmauth, including authentication, TLS, HTTP, and backend configuration settings.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmauth.md#2025-04-22_snippet_52\n\nLANGUAGE: shellhelp\nCODE:\n```\n./vmauth -help\n\nvmauth authenticates and authorizes incoming requests and proxies them to VictoriaMetrics.\n\nSee the docs at https://docs.victoriametrics.com/vmauth/ .\n\n  -auth.config string\n     Path to auth config. It can point either to local file or to http url. See https://docs.victoriametrics.com/vmauth/ for details on the format of this auth config\n  -backend.TLSCAFile string\n     Optional path to TLS root CA file, which is used for TLS verification when connecting to backends over HTTPS. See https://docs.victoriametrics.com/vmauth/#backend-tls-setup\n  -backend.TLSCertFile string\n     Optional path to TLS client certificate file, which must be sent to HTTPS backend. See https://docs.victoriametrics.com/vmauth/#backend-tls-setup\n  -backend.TLSKeyFile string\n     Optional path to TLS client key file, which must be sent to HTTPS backend. See https://docs.victoriametrics.com/vmauth/#backend-tls-setup\n  -backend.TLSServerName string\n     Optional TLS ServerName, which must be sent to HTTPS backend. See https://docs.victoriametrics.com/vmauth/#backend-tls-setup\n  -backend.tlsInsecureSkipVerify\n     Whether to skip TLS verification when connecting to backends over HTTPS. See https://docs.victoriametrics.com/vmauth/#backend-tls-setup\n  -configCheckInterval duration\n     interval for config file re-read. Zero value disables config re-reading. By default, refreshing is disabled, send SIGHUP for config refresh.\n  -discoverBackendIPs\n     Whether to discover backend IPs via periodic DNS queries to hostnames specified in url_prefix. This may be useful when url_prefix points to a hostname with dynamically scaled instances behind it. See https://docs.victoriametrics.com/vmauth/#discovering-backend-ips\n  -discoverBackendIPsInterval duration\n     The interval for re-discovering backend IPs if -discoverBackendIPs command-line flag is set. Too low value may lead to DNS errors (default 10s)\n  -dryRun\n        Whether to check only config files without running vmauth. The auth configuration file is validated. The -auth.config flag must be specified.\n  -enableTCP6\n     Whether to enable IPv6 for listening and dialing. By default, only IPv4 TCP and UDP are used\n  -envflag.enable\n     Whether to enable reading flags from environment variables in addition to the command line. Command line flag values have priority over values from environment vars. Flags are read only from the command line if this flag isn't set. See https://docs.victoriametrics.com/#environment-variables for more details\n  -envflag.prefix string\n     Prefix for environment variables if -envflag.enable is set\n  -eula\n     Deprecated, please use -license or -licenseFile flags instead. By specifying this flag, you confirm that you have an enterprise license and accept the ESA https://victoriametrics.com/legal/esa/ . This flag is available only in Enterprise binaries. See https://docs.victoriametrics.com/enterprise/\n  -failTimeout duration\n     Sets a delay period for load balancing to skip a malfunctioning backend (default 3s)\n  -filestream.disableFadvise\n     Whether to disable fadvise() syscall when reading large data files. The fadvise() syscall prevents from eviction of recently accessed data from OS page cache during background merges and backups. In some rare cases it is better to disable the syscall if it uses too much CPU\n  -flagsAuthKey value\n     Auth key for /flags endpoint. It must be passed via authKey query arg. It overrides -httpAuth.*\n     Flag value can be read from the given file when using -flagsAuthKey=file:///abs/path/to/file or -flagsAuthKey=file://./relative/path/to/file . Flag value can be read from the given http/https url when using -flagsAuthKey=http://host/path or -flagsAuthKey=https://host/path\n  -fs.disableMmap\n     Whether to use pread() instead of mmap() for reading data files. By default, mmap() is used for 64-bit arches and pread() is used for 32-bit arches, since they cannot read data files bigger than 2^32 bytes in memory. mmap() is usually faster for reading small data chunks than pread()\n  -http.connTimeout duration\n     Incoming connections to -httpListenAddr are closed after the configured timeout. This may help evenly spreading load among a cluster of services behind TCP-level load balancer. Zero value disables closing of incoming connections (default 2m0s)\n  -http.disableResponseCompression\n     Disable compression of HTTP responses to save CPU resources. By default, compression is enabled to save network bandwidth\n  -http.header.csp string\n     Value for 'Content-Security-Policy' header, recommended: \"default-src 'self'\"\n  -http.header.frameOptions string\n     Value for 'X-Frame-Options' header\n  -http.header.hsts string\n     Value for 'Strict-Transport-Security' header, recommended: 'max-age=31536000; includeSubDomains'\n  -http.idleConnTimeout duration\n     Timeout for incoming idle http connections (default 1m0s)\n  -http.maxGracefulShutdownDuration duration\n     The maximum duration for a graceful shutdown of the HTTP server. A highly loaded server may require increased value for a graceful shutdown (default 7s)\n  -http.pathPrefix string\n     An optional prefix to add to all the paths handled by http server. For example, if '-http.pathPrefix=/foo/bar' is set, then all the http requests will be handled on '/foo/bar/*' paths. This may be useful for proxied requests. See https://www.robustperception.io/using-external-urls-and-proxies-with-prometheus\n  -http.shutdownDelay duration\n     Optional delay before http server shutdown. During this delay, the server returns non-OK responses from /health page, so load balancers can route new requests to other servers\n  -httpAuth.password value\n     Password for HTTP server's Basic Auth. The authentication is disabled if -httpAuth.username is empty\n     Flag value can be read from the given file when using -httpAuth.password=file:///abs/path/to/file or -httpAuth.password=file://./relative/path/to/file . Flag value can be read from the given http/https url when using -httpAuth.password=http://host/path or -httpAuth.password=https://host/path\n  -httpAuth.username string\n     Username for HTTP server's Basic Auth. The authentication is disabled if empty. See also -httpAuth.password\n  -httpAuthHeader array\n     HTTP request header to use for obtaining authorization tokens. By default auth tokens are read from Authorization request header\n     Supports an array of values separated by comma or specified via multiple flags.\n     Value can contain comma inside single-quoted or double-quoted string, {}, [] and () braces.\n  -httpInternalListenAddr array\n     TCP address to listen for incoming internal API http requests. Such as /health, /-/reload, /debug/pprof, etc.\n     If flag is set, vmauth no longer serves internal API at -httpListenAddr.\n     Supports an array of values separated by comma or specified via multiple flags.\n     Value can contain comma inside single-quoted or double-quoted string, {}, [] and () braces.\n  -httpListenAddr array\n     TCP address to listen for incoming http requests. By default, serves internal API and proxy requests.\n     See also -tls, -httpListenAddr.useProxyProtocol and -httpInternalListenAddr.\n     Supports an array of values separated by comma or specified via multiple flags.\n     Value can contain comma inside single-quoted or double-quoted string, {}, [] and () braces.\n  -httpListenAddr.useProxyProtocol array\n     Whether to use proxy protocol for connections accepted at the corresponding -httpListenAddr . See https://www.haproxy.org/download/1.8/doc/proxy-protocol.txt . With enabled proxy protocol http server cannot serve regular /metrics endpoint. Use -pushmetrics.url for metrics pushing\n     Supports array of values separated by comma or specified via multiple flags.\n     Empty values are set to false.\n -httpRealIPHeader string\n        HTTP request header to use for obtaining IP address of client for applying 'ip_filters'. By default vmauth uses IP address of TCP the client. Useful if vmauth is behind reverse-proxy\n  -idleConnTimeout duration\n    The timeout for HTTP keep-alive connections to backend services. It is recommended setting this value to values smaller than -http.idleConnTimeout set at backend services (default 50s)\n  -internStringCacheExpireDuration duration\n     The expiry duration for caches for interned strings. See https://en.wikipedia.org/wiki/String_interning . See also -internStringMaxLen and -internStringDisableCache (default 6m0s)\n  -internStringDisableCache\n     Whether to disable caches for interned strings. This may reduce memory usage at the cost of higher CPU usage. See https://en.wikipedia.org/wiki/String_interning . See also -internStringCacheExpireDuration and -internStringMaxLen\n  -internStringMaxLen int\n     The maximum length for strings to intern. A lower limit may save memory at the cost of higher CPU usage. See https://en.wikipedia.org/wiki/String_interning . See also -internStringDisableCache and -internStringCacheExpireDuration (default 500)\n  -license string\n     License key for VictoriaMetrics Enterprise. See https://victoriametrics.com/products/enterprise/ . Trial Enterprise license can be obtained from https://victoriametrics.com/products/enterprise/trial/ . This flag is available only in Enterprise binaries. The license key can be also passed via file specified by -licenseFile command-line flag\n  -license.forceOffline\n     Whether to enable offline verification for VictoriaMetrics Enterprise license key, which has been passed either via -license or via -licenseFile command-line flag. The issued license key must support offline verification feature. Contact info@victoriametrics.com if you need offline license verification. This flag is available only in Enterprise binaries\n  -licenseFile string\n```\n\n----------------------------------------\n\nTITLE: Configuring Per-User IP Filtering and Real IP Header - vmauth - YAML\nDESCRIPTION: This YAML snippet demonstrates per-user specification of allowed IP addresses and which HTTP header should be used for determining the real client IP (e.g., X-Forwarded-For, CF-Connecting-IP). Dependencies include vmauth version v1.107.0 or newer. Each user entry can define authentication credentials and IP filtering policy, enforcing access control based on the requester's source IP and specified header.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmauth.md#2025-04-22_snippet_41\n\nLANGUAGE: yaml\nCODE:\n```\nusers:\n- username: \"foobar\"\n  password: \"***\"\n  url_prefix: \"http://localhost:8428\"\n  ip_filters:\n    allow_list: [127.0.0.1]\n    real_ip_header: X-Forwarded-For\n- username: \"foobar\"\n  password: \"***\"\n  url_prefix: \"http://localhost:8428\"\n  ip_filters:\n    allow_list: [127.0.0.1]\n    real_ip_header: CF-Connecting-IP\n\n```\n\n----------------------------------------\n\nTITLE: Finding Maximum Value with `max` in MetricsQL\nDESCRIPTION: The `max` function returns the maximum sample value observed for a metric across all its time series within the specified interval. This MetricsQL query demonstrates its equivalence to applying `max` aggregation on the results of `max_over_time`.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/stream-aggregation.md#2025-04-22_snippet_22\n\nLANGUAGE: metricsql\nCODE:\n```\nmax(max_over_time(some_metric[interval]))\n```\n\n----------------------------------------\n\nTITLE: Checking Disk Space Usage with MetricsQL\nDESCRIPTION: This MetricsQL query evaluates the ratio of disk space used by the index database compared to total storage. It helps identify excessive disk space usage due to a high churn rate. Proper VictoriaMetrics monitoring setup is required.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/Troubleshooting.md#2025-04-22_snippet_3\n\nLANGUAGE: metricsql\nCODE:\n```\nsum(vm_data_size_bytes{type=~\"indexdb/.+\"}) without(type)\n    /\nsum(vm_data_size_bytes{type=~\"(storage|indexdb)/.+\"}) without(type)\n```\n\n----------------------------------------\n\nTITLE: Adjusting Live Tailing Refresh Interval in Bash\nDESCRIPTION: This command sets the refresh interval for checking new logs to 10 seconds using the 'refresh_interval' parameter.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/querying/README.md#2025-04-22_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\ncurl -N http://localhost:9428/select/logsql/tail -d 'query=*' -d 'refresh_interval=10s'\n```\n\n----------------------------------------\n\nTITLE: VictoriaLogs Recording Rules with Multiple Stats\nDESCRIPTION: YAML configuration for recording rules that capture multiple percentile statistics per service.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/vmalert.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\ngroups:\n  - name: requestDuration\n    type: vlogs\n    interval: 5m\n    rules:\n      - record: requestDurationQuantile\n        expr: '* | stats by (service) quantile(0.5, request_duration_seconds) p50, quantile(0.9, request_duration_seconds) p90, quantile(0.99, request_duration_seconds) p99'\n```\n\n----------------------------------------\n\nTITLE: Configuring Prometheus remote_write for VictoriaMetrics\nDESCRIPTION: YAML configuration snippet for setting up Prometheus to stream metrics to VictoriaMetrics using remote_write functionality. This enables real-time data streaming from Prometheus to VictoriaMetrics.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmctl.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nremote_write:\n- url: http://victoria-metrics:8428/api/v1/write\n```\n\n----------------------------------------\n\nTITLE: Simplified Filtering without Pipe Prefix in LogSQL\nDESCRIPTION: This snippet shows how to omit the filter prefix when the used filters do not clash with pipe names, achieving the same result as the previous queries.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_100\n\nLANGUAGE: logsql\nCODE:\n```\n_time:1h error | stats by (host) count() logs_count | logs_count:> 1_000\n```\n\n----------------------------------------\n\nTITLE: Selecting Bottom K Series by Average in PromQL\nDESCRIPTION: The bottomk_avg function returns up to k time series with the smallest averages, with an optional sum of remaining series.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_142\n\nLANGUAGE: promql\nCODE:\n```\nbottomk_avg(3, sum(process_resident_memory_bytes) by (job), \"job=other\")\n```\n\n----------------------------------------\n\nTITLE: Limiting Histogram Buckets with VictoriaMetrics PromQL\nDESCRIPTION: The buckets_limit function constrains the number of histogram buckets returned to the specified integer limit. It is used with bucketed time series data for visualization and further processing. Inputs are the bucket limit and the buckets query; outputs are trimmed histograms as per the limit.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_85\n\nLANGUAGE: PromQL\nCODE:\n```\n`buckets_limit(limit, buckets)`\n```\n\n----------------------------------------\n\nTITLE: Using SPSCQueue with xsync in Go\nDESCRIPTION: This snippet illustrates the creation and usage of a single-producer single-consumer queue using xsync. It showcases non-blocking `Enqueue` and `Dequeue` operations optimized for specific concurrency use-cases.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/puzpuzpuz/xsync/v3/README.md#2025-04-22_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\nq := xsync.NewSPSCQueue(1024)\n// producer inserts an item into the queue\n// optimistic insertion attempt; doesn't block\ninserted := q.TryEnqueue(\"bar\")\n// consumer obtains an item from the queue\n// optimistic obtain attempt; doesn't block\nitem, ok := q.TryDequeue() // interface{} pointing to a string\n```\n\nLANGUAGE: Go\nCODE:\n```\nq := xsync.NewSPSCQueueOf[string](1024)\ninserted := q.TryEnqueue(\"foo\")\nitem, ok := q.TryDequeue() // string\n```\n\n----------------------------------------\n\nTITLE: Calculating Upper Hoeffding Bound in Markdown\nDESCRIPTION: 'hoeffding_bound_upper' computes the upper Hoeffding bound for a specified 'phi'. It works in a similar capacity to the lower bound function, assisting in defining boundaries in statistical datasets.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/MetricsQL.md#2025-04-22_snippet_29\n\nLANGUAGE: Markdown\nCODE:\n```\n`hoeffding_bound_upper(phi, series_selector[d])` is a [rollup function](#rollup-functions), which calculates\\nupper [Hoeffding bound](https://en.wikipedia.org/wiki/Hoeffding%27s_inequality) for the given `phi` in the range `[0...1]`.\n```\n\n----------------------------------------\n\nTITLE: Configuring PuppetDB Service Discovery in VictoriaMetrics\nDESCRIPTION: YAML configuration for retrieving scrape targets from PuppetDB resources. Supports PQL queries to discover resources and can include resource parameters as target labels. Allows customization of port and other HTTP client options.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/sd_configs.md#2025-04-22_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\nscrape_configs:\n- job_name: puppetdb_job\n  puppetdb_sd_configs:\n    # The URL of the PuppetDB root query endpoint.\n    - url: <string>\n      \n      # Puppet Query Language (PQL) query. Only resources are supported.\n      # https://puppet.com/docs/puppetdb/latest/api/query/v4/pql.html\n      query: <string>\n\n      # Whether to include the parameters as meta labels.\n      # Due to the differences between parameter types and Prometheus labels,\n      # some parameters might not be rendered. The format of the parameters might\n      # also change in future releases.\n      #\n      # Note: Enabling this exposes parameters in the VMUI and API. Make sure\n      # that you don't have secrets exposed as parameters if you enable this.\n      # \n      # include_parameters: <boolean> | default false\n\n      # The port to scrape metrics from.\n      # \n      # port: <int> | default = 80\n\n      # Additional HTTP API client options can be specified here.\n      # See https://docs.victoriametrics.com/sd_configs.html#http-api-client-options\n```\n\n----------------------------------------\n\nTITLE: Filtering Logs by Field Value Type in LogsQL\nDESCRIPTION: Explains how to use the `value_type()` filter in LogsQL to select log entries based on the detected storage type of a specific field (`user_id`). This example filters for entries where `user_id` is stored internally as type `uint64`.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_75\n\nLANGUAGE: logsql\nCODE:\n```\nuser_id:value_type(uint64)\n```\n\n----------------------------------------\n\nTITLE: Calculating Quantile Over Time in PromQL\nDESCRIPTION: The quantile_over_time function computes a specified quantile over raw samples for a given time window. It's typically used with gauge metrics and is supported by PromQL.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_45\n\nLANGUAGE: PromQL\nCODE:\n```\nquantile_over_time(phi, series_selector[d])\n```\n\n----------------------------------------\n\nTITLE: Retrieving Label Names from VictoriaMetrics\nDESCRIPTION: Examples for getting a list of label names from VictoriaMetrics. By default, it returns labels from the last day, but an arbitrary time range can be specified using 'start' and 'end' query parameters.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/url-examples.md#2025-04-22_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\ncurl http://localhost:8428/prometheus/api/v1/labels\n```\n\nLANGUAGE: sh\nCODE:\n```\ncurl http://<vmselect>:8481/select/0/prometheus/api/v1/labels\n```\n\n----------------------------------------\n\nTITLE: Reverse Sorting Logs by Request Duration in LogsQL\nDESCRIPTION: This query sorts log fields in reverse order of the request_duration_seconds field for the last 5 minutes.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_125\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m | sort by (request_duration_seconds desc)\n```\n\n----------------------------------------\n\nTITLE: Starting VictoriaMetrics Components for Cluster Mode\nDESCRIPTION: Shell commands to start vmstorage, vmselect, and vminsert components for a VictoriaMetrics cluster setup.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmgateway.md#2025-04-22_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\n# start vmstorage, vmselect and vminsert\n./bin/vmstorage -eula\n./bin/vmselect -eula -storageNode 127.0.0.1:8401\n./bin/vminsert -eula -storageNode 127.0.0.1:8400\n```\n\n----------------------------------------\n\nTITLE: Retrieving Label Values from VictoriaMetrics\nDESCRIPTION: Examples for getting a list of values for a particular label from VictoriaMetrics. This example retrieves values for the 'job' label, and can also be customized with time range parameters.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/url-examples.md#2025-04-22_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\ncurl http://localhost:8428/prometheus/api/v1/label/job/values\n```\n\nLANGUAGE: sh\nCODE:\n```\ncurl http://<vmselect>:8481/select/0/prometheus/api/v1/label/job/values\n```\n\n----------------------------------------\n\nTITLE: Rate Stats Function in LogsQL\nDESCRIPTION: Demonstrates how to calculate the average per-second rate of matching logs.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_191\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m error | stats rate()\n```\n\n----------------------------------------\n\nTITLE: Resetting Rollup Cache - Shell\nDESCRIPTION: Shows the process of resetting the rollup result cache following data backfilling in both single-node and cluster setups. The curl request makes an HTTP HEAD call to clear cached query responses, thus ensuring freshness after data backfill.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/url-examples.md#2025-04-22_snippet_19\n\nLANGUAGE: sh\nCODE:\n```\ncurl -Is http://localhost:8428/internal/resetRollupResultCache\n```\n\nLANGUAGE: sh\nCODE:\n```\ncurl -Is http://<vmselect>:8481/internal/resetRollupResultCache\n```\n\n----------------------------------------\n\nTITLE: Initializing Go Module for OTEL Instrumented App - Shell\nDESCRIPTION: These commands initialize a new Go module and download dependencies for an OpenTelemetry-instrumented example Go application. To be run in the directory with your 'main.go' application source.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/guides/getting-started-with-opentelemetry/README.md#2025-04-22_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\ngo mod init vm/otel\\ngo mod tidy\n```\n\n----------------------------------------\n\nTITLE: Copying All Labels with Prefix in Many-to-One Operations (MetricsQL)\nDESCRIPTION: Shows the use of `group_left(*)` with a `prefix` in a many-to-one vector matching operation. This query joins `kube_pod_info` and `kube_namespace_labels` on the `namespace` label, copying all labels (except `namespace`) from the `kube_namespace_labels` (right side) to the result, prefixing them with `ns_`.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_6\n\nLANGUAGE: MetricsQL\nCODE:\n```\nkube_pod_info * on(namespace) group_left(*) prefix \"ns_\" kube_namespace_labels\n```\n\n----------------------------------------\n\nTITLE: Chaining Rule Groups with Evaluation Offsets in vmalert\nDESCRIPTION: YAML configuration demonstrating how to chain rule groups with specific execution order using eval_offset. This ensures dependent groups are evaluated after the results from previous groups are available in the datasource.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmalert.md#2025-04-22_snippet_29\n\nLANGUAGE: yaml\nCODE:\n```\ngroups:\n  - name: BaseGroup\n    interval: 1m\n    eval_offset: 10s\n    rules:\n      - record: http_server_request_duration_seconds:sum_rate:5m:http_get\n        expr: |\n          sum without(instance, pod) (\n            rate(\n              http_server_request_duration_seconds{\n                http_request_method=\"GET\"\n              }[5m]\n            )\n          )\n      - record: http_server_request_duration_seconds:sum_rate:5m:http_post\n        expr: |\n          sum without(instance, pod) (\n            rate(\n              http_server_request_duration_seconds{\n                http_request_method=\"POST\"\n              }[5m]\n            )\n          )\n  - name: TopGroup\n    interval: 1m\n    eval_offset: 40s\n    rules:\n      - record: http_server_request_duration_seconds:sum_rate:5m:merged\n        expr: |\n          http_server_request_duration_seconds:sum_rate:5m:http_get\n          or \n          http_server_request_duration_seconds:sum_rate:5m:http_post\n```\n\n----------------------------------------\n\nTITLE: Querying Log Range Stats with VictoriaLogs HTTP API\nDESCRIPTION: Example of querying log statistics over a time range with specific step intervals using the /select/logsql/stats_query_range endpoint. Returns time-series data in Prometheus format.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/querying/README.md#2025-04-22_snippet_18\n\nLANGUAGE: sh\nCODE:\n```\ncurl http://localhost:9428/select/logsql/stats_query_range -d 'query=* | stats by (level) count(*)' -d 'start=2024-01-01Z' -d 'end=2024-01-02Z' -d 'step=6h'\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": \"success\",\n  \"data\": {\n    \"resultType\": \"matrix\",\n    \"result\": [\n      {\n        \"metric\": {\n          \"__name__\": \"count(*)\",\n          \"level\": \"info\"\n        },\n        \"values\": [\n          [\n            1704067200,\n            \"103125\"\n          ],\n          [\n            1704088800,\n            \"102500\"\n          ],\n          [\n            1704110400,\n            \"103125\"\n          ],\n          [\n            1704132000,\n            \"102500\"\n          ]\n        ]\n      },\n      {\n        \"metric\": {\n          \"__name__\": \"count(*)\",\n          \"level\": \"error\"\n        },\n        \"values\": [\n          [\n            1704067200,\n            \"31\"\n          ],\n          [\n            1704088800,\n            \"25\"\n          ],\n          [\n            1704110400,\n            \"31\"\n          ],\n          [\n            1704132000,\n            \"125\"\n          ]\n        ]\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Metric Format Configuration for VmAnomaly\nDESCRIPTION: Complete YAML configuration for metric_format including both mandatory and custom labels. This configuration defines how metrics will be named and what additional labels they will have.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/anomaly-detection/components/writer.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nmetric_format:\n    __name__: \"PREFIX1_$VAR\"\n    for: \"PREFIX2_$QUERY_KEY\"\n    custom_label_1: label_name_1\n    custom_label_2: label_name_2\n```\n\n----------------------------------------\n\nTITLE: Conditional Drop Rule Configuration in YAML\nDESCRIPTION: Demonstrates how to configure a conditional drop rule using the new 'if' filter feature in relabeling. The rule drops targets matching the series selector 'foo{bar=\"baz\"}'.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/changelog/CHANGELOG_2022.md#2025-04-22_snippet_25\n\nLANGUAGE: yaml\nCODE:\n```\n- action: drop\n  if: 'foo{bar=\"baz\"}'\n```\n\n----------------------------------------\n\nTITLE: Calculating CPU Usage Rate per Mode using MetricsQL\nDESCRIPTION: Demonstrates a MetricsQL query to calculate the per-second rate of CPU time spent in different modes, aggregated by mode, instance, and job. This query transforms the raw counter data (`node_cpu_seconds_total`) from Node Exporter into a rate suitable for analysis and input into `vmanomaly`. It uses a 5-minute lookback window (`[5m]`) and sums the results.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/anomaly-detection/guides/guide-vmanomaly-vmalert/README.md#2025-04-22_snippet_1\n\nLANGUAGE: metricsql\nCODE:\n```\n`sum(rate(node_cpu_seconds_total[5m])) by (mode, instance, job)`\n```\n\n----------------------------------------\n\nTITLE: Exporting Data with Specific Labels from VictoriaMetrics using Shell\nDESCRIPTION: Exports data from VictoriaMetrics where the 'ticker' label is not empty using the `/api/v1/export` endpoint. This example shows how to verify data previously imported, such as from CSV. Requires `curl`.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/README.md#2025-04-22_snippet_54\n\nLANGUAGE: sh\nCODE:\n```\ncurl -G 'http://localhost:8428/api/v1/export' -d 'match[]={ticker!=\"\"}'\n```\n\n----------------------------------------\n\nTITLE: Joining Label Values in MetricsQL\nDESCRIPTION: A label manipulation function that concatenates the values of source labels (`src_label1` to `src_labelN`) using a specified `separator`, storing the result in a destination label `dst_label`. This operation is applied to each time series from query `q`. Example: `label_join(up{instance=\"xxx\",job=\"yyy\"}, \"foo\", \"-\", \"instance\", \"job\")` sets label `foo` to `xxx-yyy`. Supported by PromQL. Implicitly applies `default_rollup()` if `q` is a series selector.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_146\n\nLANGUAGE: metricsql\nCODE:\n```\nlabel_join(q, \"dst_label\", \"separator\", \"src_label1\", ..., \"src_labelN\")\n```\n\n----------------------------------------\n\nTITLE: Implicit Subquery Formation in MetricsQL\nDESCRIPTION: Shows how VictoriaMetrics automatically forms a subquery when a non-series selector is passed to a rollup function.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_158\n\nLANGUAGE: metricsql\nCODE:\n```\nrate(sum(up))\n```\n\n----------------------------------------\n\nTITLE: Filtering Logs by Field Value Comparison (<=) in LogsQL\nDESCRIPTION: Demonstrates the `le_field()` filter in LogsQL, which selects log entries where the value of the first specified field (`duration`) is less than or equal to the value of the second specified field (`max_duration`). This is useful for comparing numeric or potentially other ordered field types.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_77\n\nLANGUAGE: logsql\nCODE:\n```\nduration:le_field(max_duration)\n```\n\n----------------------------------------\n\nTITLE: Calculating Inverse Hyperbolic Tangent in MetricsQL\nDESCRIPTION: A transform function computing the inverse hyperbolic tangent for each data point in the time series returned by `q`. If applied directly to a series selector, `default_rollup()` is implicitly used. Metric names are stripped by default; use `keep_metric_names` to preserve them. Supported by PromQL.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_72\n\nLANGUAGE: MetricsQL\nCODE:\n```\n`atanh(q)`\n```\n\n----------------------------------------\n\nTITLE: Conditional Relabeling with 'if' Filter - YAML\nDESCRIPTION: This example showcases VictoriaMetrics's support for conditional relabeling using the 'if' filter. The action (e.g., 'keep') is performed only on series matching a specified filter expression, such as foo{bar=\"baz\"}. No additional dependencies are needed besides the application supporting enhanced relabeling syntax. Key parameters are 'if' for the selector and 'action' for the transformation. This enables fine-grained control over which series are retained or dropped, using familiar selector notation as input. Outputs include metrics selectively kept per condition.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmagent.md#2025-04-22_snippet_24\n\nLANGUAGE: YAML\nCODE:\n```\n- if: 'foo{bar=\"baz\"}'\n  action: keep\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Service Discovery in VictoriaMetrics (YAML)\nDESCRIPTION: Example YAML configuration for `docker_sd_configs` in VictoriaMetrics scrape jobs. It requires the Docker daemon `host` address and includes optional parameters like `port` (default 80), `host_networking_host` (default localhost), `match_first_network` (default true) to handle multiple networks, and `filters` to limit discovery based on Docker API criteria. Additional HTTP client options can also be included.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/sd_configs.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nscrape_configs:\n- job_name: docker\n  docker_sd_configs:\n\n    # host must contain the address of the Docker daemon.\n    #\n  - host: \"...\"\n\n    # port is an optional port to scrape metrics from.\n    # By default, port 80 is used.\n    #\n    # port: ...\n\n    # host_networking_host is an optional host to use if the container is in host networking mode.\n    # By default, localhost is used.\n    #\n    # host_networking_host: \"...\"\n\n    # Sort all networks in ascending order based on network name and\n    # get the first network if the container has multiple networks defined, \n    # thus avoiding collecting duplicate targets.\n    #\n    # match_first_network: \"<boolean>\" | default true\n\n    # filters is an optional filters to limit the discovery process to a subset of available resources.\n    # See https://docs.docker.com/engine/api/v1.40/#operation/ContainerList\n    #\n    # filters:\n    # - name: \"...\"\n    #   values: [\"...\", \"...\"]\n\n    # Additional HTTP API client options can be specified here.\n    # See https://docs.victoriametrics.com/sd_configs/#http-api-client-options\n```\n\n----------------------------------------\n\nTITLE: Configuring Consul Agent Service Discovery (consulagent_sd_configs) in YAML\nDESCRIPTION: Provides a YAML configuration example for `consulagent_sd_configs` within VictoriaMetrics' scrape_configs. It defines a job named 'consulagent' and illustrates how to specify the Consul Agent server address (defaulting to localhost:8500). It also includes commented-out examples for common options like token, datacenter, namespace, scheme, service filtering by name, tag separator, advanced filtering (Consul >= 1.14), and additional HTTP client settings. This configuration leverages the Consul Agent API, suitable for large clusters by discovering only locally registered services.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/sd_configs.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nscrape_configs:\n- job_name: consulagent\n  consulagent_sd_configs:\n\n    # server is an optional Consul Agent to connect to. By default, localhost:8500 is used\n    #\n  - server: \"localhost:8500\"\n\n    # token is an optional Consul API token.\n    # If the token isn't specified, then it is read from a file pointed by CONSUL_HTTP_TOKEN_FILE\n    # environment var or from the CONSUL_HTTP_TOKEN environment var.\n    #\n    # token: \"...\"\n\n    # datacenter is an optional Consul API datacenter.\n    # If the datacenter isn't specified, then it is read from Consul server.\n    # See https://www.consul.io/api-docs/agent#read-configuration\n    #\n    # datacenter: \"...\"\n\n    # namespace is an optional Consul namespace.\n    # See https://developer.hashicorp.com/consul/docs/enterprise/namespaces\n    # If the namespace isn't specified, then it is read from CONSUL_NAMESPACE environment var.\n    #\n    # namespace: \"...\"\n\n    # scheme is an optional scheme (http or https) to use for connecting to Consul server.\n    # By default, http scheme is used.\n    #\n    # scheme: \"...\"\n\n    # services is an optional list of services for which targets are retrieved.\n    # If omitted, all services are scraped.\n    # See https://www.consul.io/api-docs/catalog#list-nodes-for-service .\n    #\n    # services: [\"...\", \"...\"]\n\n    # tag_separator is an optional string by which Consul tags are joined into the __meta_consul_tags label.\n    # By default, \",\" is used as a tag separator.\n    # Individual tags are also available via __meta_consul_tag_<tagname> labels - see below.\n    #\n    # tag_separator: \"...\"\n\n    # filter is optional filter for service nodes discovery request.\n    # Replaces tags and node_metadata options.\n    # consul supports it since 1.14 version\n    # list of supported filters https://developer.hashicorp.com/consul/api-docs/catalog#filtering-1\n    # syntax examples https://developer.hashicorp.com/consul/api-docs/features/filtering\n    #\n    # filter: \"...\"\n\n    # Additional HTTP API client options can be specified here.\n    # See https://docs.victoriametrics.com/sd_configs/#http-api-client-options\n```\n\n----------------------------------------\n\nTITLE: Listing vmalert Command-Line Configuration Flags (ShellHelp)\nDESCRIPTION: Displays the help output for the `vmalert` command, listing all available command-line flags. Each flag is described with its purpose, data type (e.g., string, duration, int), and default value where applicable. These flags control various aspects of vmalert's operation, including datasource connections, rule evaluation, alerting behavior, remote storage interaction, security, and performance.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmalert.md#2025-04-22_snippet_26\n\nLANGUAGE: shellhelp\nCODE:\n```\n  -clusterMode\n     If clusterMode is enabled, then vmalert automatically adds the tenant specified in config groups to -datasource.url, -remoteWrite.url and -remoteRead.url. See https://docs.victoriametrics.com/vmalert/#multitenancy . This flag is available only in Enterprise binaries. See https://docs.victoriametrics.com/enterprise/\n  -configCheckInterval duration\n     Interval for checking for changes in '-rule' or '-notifier.config' files. By default, the checking is disabled. Send SIGHUP signal in order to force config check for changes.\n  -datasource.appendTypePrefix\n     Whether to add type prefix to -datasource.url based on the query type. Set to true if sending different query types to the vmselect URL.\n  -datasource.basicAuth.password string\n     Optional basic auth password for -datasource.url\n  -datasource.basicAuth.passwordFile string\n     Optional path to basic auth password to use for -datasource.url\n  -datasource.basicAuth.username string\n     Optional basic auth username for -datasource.url\n  -datasource.bearerToken string\n     Optional bearer auth token to use for -datasource.url.\n  -datasource.bearerTokenFile string\n     Optional path to bearer token file to use for -datasource.url.\n  -datasource.disableKeepAlive\n     Whether to disable long-lived connections to the datasource. If true, disables HTTP keep-alive and will only use the connection to the server for a single HTTP request.\n  -datasource.disableStepParam\n     Whether to disable adding 'step' param in instant queries to the configured -datasource.url and -remoteRead.url. Only valid for prometheus datasource. This might be useful when using vmalert with datasources that do not support 'step' param for instant queries, like Google Managed Prometheus. It is not recommended to enable this flag if you use vmalert with VictoriaMetrics.\n  -datasource.headers string\n     Optional HTTP extraHeaders to send with each request to the corresponding -datasource.url. For example, -datasource.headers='My-Auth:foobar' would send 'My-Auth: foobar' HTTP header with every request to the corresponding -datasource.url. Multiple headers must be delimited by '^^': -datasource.headers='header1:value1^^header2:value2'\n  -datasource.idleConnTimeout duration\n     Defines a duration for idle (keep-alive connections) to exist. Consider settings this value less to the value of \"-http.idleConnTimeout\". It must prevent possible \"write: broken pipe\" and \"read: connection reset by peer\" errors. (default 50s)\n  -datasource.maxIdleConnections int\n     Defines the number of idle (keep-alive connections) to each configured datasource. Consider setting this value equal to the value: groups_total * group.concurrency. Too low a value may result in a high number of sockets in TIME_WAIT state. (default 100)\n  -datasource.oauth2.clientID string\n     Optional OAuth2 clientID to use for -datasource.url\n  -datasource.oauth2.clientSecret string\n     Optional OAuth2 clientSecret to use for -datasource.url\n  -datasource.oauth2.clientSecretFile string\n     Optional OAuth2 clientSecretFile to use for -datasource.url\n  -datasource.oauth2.endpointParams string\n     Optional OAuth2 endpoint parameters to use for -datasource.url . The endpoint parameters must be set in JSON format: {\"param1\":\"value1\",...,\"paramN\":\"valueN\"}\n  -datasource.oauth2.scopes string\n     Optional OAuth2 scopes to use for -datasource.url. Scopes must be delimited by ';'\n  -datasource.oauth2.tokenUrl string\n     Optional OAuth2 tokenURL to use for -datasource.url\n  -datasource.queryStep duration\n     How far a value can fallback to when evaluating queries to the configured -datasource.url and -remoteRead.url. Only valid for prometheus datasource. For example, if -datasource.queryStep=15s then param \"step\" with value \"15s\" will be added to every query. If set to 0, rule's evaluation interval will be used instead. (default 5m0s)\n  -datasource.roundDigits int\n     Adds \"round_digits\" GET param to datasource requests which limits the number of digits after the decimal point in response values. Only valid for VictoriaMetrics as the datasource.\n  -datasource.showURL\n     Whether to avoid stripping sensitive information such as auth headers or passwords from URLs in log messages or UI and exported metrics. It is hidden by default, since it can contain sensitive info such as auth key\n  -datasource.tlsCAFile string\n     Optional path to TLS CA file to use for verifying connections to -datasource.url. By default, system CA is used\n  -datasource.tlsCertFile string\n     Optional path to client-side TLS certificate file to use when connecting to -datasource.url\n  -datasource.tlsInsecureSkipVerify\n     Whether to skip tls verification when connecting to -datasource.url\n  -datasource.tlsKeyFile string\n     Optional path to client-side TLS certificate key to use when connecting to -datasource.url\n  -datasource.tlsServerName string\n     Optional TLS server name to use for connections to -datasource.url. By default, the server name from -datasource.url is used\n  -datasource.url string\n     Datasource compatible with Prometheus HTTP API. It can be single node VictoriaMetrics or vmselect URL. Required parameter. Supports address in the form of IP address with a port (e.g., http://127.0.0.1:8428) or DNS SRV record. See also -remoteRead.disablePathAppend and -datasource.showURL\n  -defaultTenant.graphite string\n     Default tenant for Graphite alerting groups. See https://docs.victoriametrics.com/vmalert/#multitenancy .This flag is available only in Enterprise binaries. See https://docs.victoriametrics.com/enterprise/\n  -defaultTenant.prometheus string\n     Default tenant for Prometheus alerting groups. See https://docs.victoriametrics.com/vmalert/#multitenancy . This flag is available only in Enterprise binaries. See https://docs.victoriametrics.com/enterprise/\n  -disableAlertgroupLabel\n     Whether to disable adding group's Name as label to generated alerts and time series.\n  -dryRun\n     Whether to check only config files without running vmalert. The rules file are validated. The -rule flag must be specified.\n  -enableTCP6\n     Whether to enable IPv6 for listening and dialing. By default, only IPv4 TCP and UDP are used\n  -envflag.enable\n     Whether to enable reading flags from environment variables in addition to the command line. Command line flag values have priority over values from environment vars. Flags are read only from the command line if this flag isn't set. See https://docs.victoriametrics.com/#environment-variables for more details\n  -envflag.prefix string\n     Prefix for environment variables if -envflag.enable is set\n  -eula\n     Deprecated, please use -license or -licenseFile flags instead. By specifying this flag, you confirm that you have an enterprise license and accept the ESA https://victoriametrics.com/legal/esa/ . This flag is available only in Enterprise binaries. See https://docs.victoriametrics.com/enterprise/\n  -evaluationInterval duration\n     How often to evaluate the rules (default 1m0s)\n  -external.alert.source string\n     External Alert Source allows to override the Source link for alerts sent to AlertManager for cases where you want to build a custom link to Grafana, Prometheus or any other service. Supports templating - see https://docs.victoriametrics.com/vmalert/#templating . For example, link to Grafana: -external.alert.source='explore?orgId=1&left={\"datasource\":\"VictoriaMetrics\",\"queries\":[{\"expr\":{{.Expr|jsonEscape|queryEscape}},\"refId\":\"A\"}],\"range\":{\"from\":\"now-1h\",\"to\":\"now\"}}'. Link to VMUI: -external.alert.source='vmui/#/?g0.expr={{.Expr|queryEscape}}'. If empty 'vmalert/alert?group_id={{.GroupID}}&alert_id={{.AlertID}}' is used.\n  -external.label array\n     Optional label in the form 'Name=value' to add to all generated recording rules and alerts. In case of conflicts, original labels are kept with prefix `exported_`.\n     Supports an array of values separated by comma or specified via multiple flags.\n     Value can contain comma inside single-quoted or double-quoted string, {}, [] and () braces.\n  -external.url string\n     External URL is used as alert's source for sent alerts to the notifier. By default, hostname is used as address.\n  -filestream.disableFadvise\n     Whether to disable fadvise() syscall when reading large data files. The fadvise() syscall prevents from eviction of recently accessed data from OS page cache during background merges and backups. In some rare cases it is better to disable the syscall if it uses too much CPU\n  -flagsAuthKey value\n     Auth key for /flags endpoint. It must be passed via authKey query arg. It overrides -httpAuth.*\n     Flag value can be read from the given file when using -flagsAuthKey=file:///abs/path/to/file or -flagsAuthKey=file://./relative/path/to/file . Flag value can be read from the given http/https url when using -flagsAuthKey=http://host/path or -flagsAuthKey=https://host/path\n  -fs.disableMmap\n     Whether to use pread() instead of mmap() for reading data files. By default, mmap() is used for 64-bit arches and pread() is used for 32-bit arches, since they cannot read data files bigger than 2^32 bytes in memory. mmap() is usually faster for reading small data chunks than pread()\n  -http.connTimeout duration\n     Incoming connections to -httpListenAddr are closed after the configured timeout. This may help evenly spreading load among a cluster of services behind TCP-level load balancer. Zero value disables closing of incoming connections (default 2m0s)\n  -http.disableResponseCompression\n     Disable compression of HTTP responses to save CPU resources. By default, compression is enabled to save network bandwidth\n  -http.header.csp string\n     Value for 'Content-Security-Policy' header, recommended: \"default-src 'self'\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Restore Mark using vmbackupmanager CLI (Shell)\nDESCRIPTION: Example usage of the `vmbackupmanager restore create` command, specifying the name of the backup ('daily/2022-10-06') to be marked for restoration.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmbackupmanager.md#2025-04-22_snippet_15\n\nLANGUAGE: sh\nCODE:\n```\n$ ./vmbackupmanager restore create daily/2022-10-06\n\n```\n\n----------------------------------------\n\nTITLE: Uppercasing Label Values in MetricsQL\nDESCRIPTION: A label manipulation function that converts the values of the specified labels (`label1` to `labelN`) to uppercase for all time series returned by `q`. See also `label_lowercase`. Implicitly applies `default_rollup()` if `q` is a series selector.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_156\n\nLANGUAGE: metricsql\nCODE:\n```\nlabel_uppercase(q, \"label1\", ..., \"labelN\")\n```\n\n----------------------------------------\n\nTITLE: Grouping and Counting Series in PromQL\nDESCRIPTION: The count function returns the number of non-empty points per group for time series returned by a query. It can be used with 'by' and 'without' modifiers for grouping.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_138\n\nLANGUAGE: promql\nCODE:\n```\ncount(up) by (job)\n```\n\nLANGUAGE: promql\nCODE:\n```\ncount(up) without (instance)\n```\n\n----------------------------------------\n\nTITLE: Querying with Graphite-compatible filters in MetricsQL\nDESCRIPTION: Demonstrates how to use Graphite-compatible filters in MetricsQL queries using the __graphite__ syntax.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/MetricsQL.md#2025-04-22_snippet_0\n\nLANGUAGE: metricsql\nCODE:\n```\n{__graphite__=\"foo.*.bar\"}\n```\n\n----------------------------------------\n\nTITLE: VictoriaLogs Multitenancy Access Control Configuration\nDESCRIPTION: YAML configuration for vmauth to implement tenant access control in VictoriaLogs. Defines access rules for different users with specific tenant IDs and endpoint permissions.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/README.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nusers:\n  - username: \"foo\"\n    password: \"bar\"\n    url_map:\n      - src_paths:\n        - \"/select/.*\"\n        - \"/insert/.*\"\n        headers:\n          - \"AccountID: 1\"\n          - \"ProjectID: 0\"\n        url_prefix:\n          - \"http://localhost:9428/\"\n\n  - username: \"baz\"\n    password: \"bar\"\n    url_map:\n      - src_paths: [\"/select/.*\"]\n        headers:\n          - \"AccountID: 2\"\n          - \"ProjectID: 0\"\n        url_prefix:\n          - \"http://localhost:9428/\"\n```\n\n----------------------------------------\n\nTITLE: Identity Vector Function in MetricsQL\nDESCRIPTION: A transform function that returns its input query `q` unchanged. It primarily exists for PromQL compatibility.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_138\n\nLANGUAGE: metricsql\nCODE:\n```\nvector(q)\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker BuildX on MacOS\nDESCRIPTION: Commands for setting up Docker BuildX configuration for multi-platform builds on MacOS\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/Release-Guide.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ndocker buildx create --use --name=qemu\ndocker buildx inspect --bootstrap\n```\n\n----------------------------------------\n\nTITLE: Reading /proc Files Efficiently in Go\nDESCRIPTION: Provides a Go code example illustrating the recommended way to read files from the `/proc` filesystem. It uses the internal `util.ReadFileNoStat` function to read the entire file content (e.g., `/proc/cpuinfo`) without making a potentially inaccurate `stat` system call. The resulting byte slice is then wrapped in a `bytes.NewReader` and processed line by line using a `bufio.NewScanner`.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/prometheus/procfs/CONTRIBUTING.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n    data, err := util.ReadFileNoStat(\"/proc/cpuinfo\")\n    if err != nil {\n        return err\n    }\n    reader := bytes.NewReader(data)\n    scanner := bufio.NewScanner(reader)\n```\n\n----------------------------------------\n\nTITLE: Clamping Time Series to Maximum Value with VictoriaMetrics PromQL\nDESCRIPTION: The clamp_max function limits values in the time series q to a maximum value specified by max. Values greater than max are set to max. Supported by PromQL, it is useful for enforcing upper bounds in monitoring data.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_88\n\nLANGUAGE: PromQL\nCODE:\n```\n`clamp_max(q, max)`\n```\n\n----------------------------------------\n\nTITLE: Querying Exported Data via API - VictoriaMetrics - Shell\nDESCRIPTION: This snippet queries the VictoriaMetrics export API endpoint using 'curl' with a GET HTTP request to retrieve data for the specified metric. It adds a 'match' parameter for filtering. This requires the VictoriaMetrics API to be available on localhost:8428. The command retrieves ingested time series in JSON line format.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/README.md#2025-04-22_snippet_26\n\nLANGUAGE: sh\nCODE:\n```\ncurl -G 'http://localhost:8428/api/v1/export' -d 'match=foo.bar.baz'\n```\n\n----------------------------------------\n\nTITLE: Collecting CPU Profile in VictoriaLogs\nDESCRIPTION: Command to collect a CPU profile from VictoriaLogs using curl. The profile is saved to a file named cpu.pprof. The command waits for 30 seconds before returning. Replace 0.0.0.0 with the actual hostname if needed.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/README.md#2025-04-22_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\ncurl http://0.0.0.0:9428/debug/pprof/profile > cpu.pprof\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry HTTP Exporter for VictoriaLogs in Go\nDESCRIPTION: This snippet demonstrates how to set up an OpenTelemetry HTTP exporter for logs in Go, pointing to VictoriaLogs endpoint. It also shows how to customize stream fields using HTTP headers.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/data-ingestion/opentelemetry.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nlogExporter, err := otlploghttp.New(ctx,\n\totlploghttp.WithEndpointURL(\"http://victorialogs:9428/insert/opentelemetry/v1/logs\"),\n)\n```\n\nLANGUAGE: go\nCODE:\n```\nlogExporter, err := otlploghttp.New(ctx,\n\totlploghttp.WithEndpointURL(\"http://victorialogs:9428/insert/opentelemetry/v1/logs\"),\n\totlploghttp.WithHeaders(map[string]string{\n\t\t\"VL-Stream-Fields\": \"host,app\",\n\t}),\n)\n```\n\n----------------------------------------\n\nTITLE: Limiting output series in aggregate functions\nDESCRIPTION: Demonstrates how to limit the number of output series from aggregate functions using the 'limit' suffix.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/MetricsQL.md#2025-04-22_snippet_8\n\nLANGUAGE: metricsql\nCODE:\n```\nsum(x) by (y) limit 3\n```\n\n----------------------------------------\n\nTITLE: Launching VictoriaMetrics Backup Manager\nDESCRIPTION: Shell commands to configure and launch vmbackupmanager with GCS storage backend\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmbackupmanager.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nexport NODE_IP=192.168.0.10\nexport VMSTORAGE_ENDPOINT=http://127.0.0.1:8428\n./vmbackupmanager -dst=gs://vmstorage-data/$NODE_IP -credsFilePath=credentials.json -storageDataPath=/vmstorage-data -snapshot.createURL=$VMSTORAGE_ENDPOINT/snapshot/create -eula\n```\n\n----------------------------------------\n\nTITLE: Using count_values aggregate function in PromQL\nDESCRIPTION: Aggregate function that counts points with the same value and creates time series with those counts. Adds a label containing each value found in the input series.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_148\n\nLANGUAGE: promql\nCODE:\n```\ncount_values(\"label\", q)\n```\n\n----------------------------------------\n\nTITLE: Exclusion Filter with NOT in LogsQL\nDESCRIPTION: A LogsQL query that finds error logs from the last 5 minutes while excluding logs containing the word 'buggy_app'.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_9\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m error NOT buggy_app\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry Service Pipeline\nDESCRIPTION: YAML configuration for adding the VictoriaMetrics exporter to the OpenTelemetry service pipeline, connecting the OTLP receiver to the VictoriaMetrics export destination.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/README.md#2025-04-22_snippet_62\n\nLANGUAGE: yaml\nCODE:\n```\nservice:\n  pipelines:\n    metrics:\n      exporters:\n        - otlphttp/victoriametrics\n      receivers:\n        - otlp\n```\n\n----------------------------------------\n\nTITLE: Configuring DataDog Agent to Send Metrics via ENV Variable - Shell\nDESCRIPTION: This shell snippet sets the DD_DD_URL environment variable to point the DataDog agent to a VictoriaMetrics endpoint for metric ingestion. It is intended to be used in environments where configuration via ENV vars is preferred. This enables DataDog to send scraped metrics to the VictoriaMetrics server; replace the endpoint URL as needed. The expected input is the target URL for VictoriaMetrics compatible with the DataDog integration.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/README.md#2025-04-22_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nDD_DD_URL=http://victoriametrics:8428/datadog\n```\n\n----------------------------------------\n\nTITLE: Configuring Anomaly Detection Schedulers in YAML\nDESCRIPTION: Defines the scheduling parameters for the anomaly detection models, specifying classes, inference, and fitting schedules. It uses periodic scheduling with defined intervals for model operations.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/anomaly-detection/components/README.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# how and when to run the models is defined by schedulers\n# https://docs.victoriametrics.com/anomaly-detection/components/scheduler/\nschedulers:\n  periodic_1d:  # alias\n    class: 'periodic' # scheduler class\n    infer_every: \"30s\"\n    fit_every: \"10m\"\n    fit_window: \"24h\"\n  periodic_1w:\n    class: 'periodic'\n    infer_every: \"15m\"\n    fit_every: \"1h\"\n    fit_window: \"7d\"\n```\n\n----------------------------------------\n\nTITLE: Using sort_desc Function in MetricsQL\nDESCRIPTION: The sort_desc function sorts series in descending order by the last point in every time series returned by the query. This function is supported by PromQL.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_106\n\nLANGUAGE: metricsql\nCODE:\n```\nsort_desc(q)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Timestamp of Last Change in VictoriaMetrics\nDESCRIPTION: The tlast_change_over_time function returns the timestamp in seconds with millisecond precision for the last change within a specified time window for each time series returned by the given selector.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/MetricsQL.md#2025-04-22_snippet_72\n\nLANGUAGE: metricsql\nCODE:\n```\ntlast_change_over_time(series_selector[d])\n```\n\n----------------------------------------\n\nTITLE: Importing CSV Data via POST Request using Shell\nDESCRIPTION: Demonstrates importing individual CSV lines directly in the POST request body to the `/api/v1/import/csv` endpoint. The `format` query parameter specifies how to parse the CSV columns: column 2 is metric 'ask', 3 is metric 'bid', 1 is label 'ticker', and 4 is label 'market'. Requires `curl`.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/README.md#2025-04-22_snippet_52\n\nLANGUAGE: sh\nCODE:\n```\n# Import via POST data:\ncurl -d \"GOOG,1.23,4.56,NYSE\" 'http://localhost:8428/api/v1/import/csv?format=2:metric:ask,3:metric:bid,1:label:ticker,4:label:market'\ncurl -d \"MSFT,3.21,1.67,NASDAQ\" 'http://localhost:8428/api/v1/import/csv?format=2:metric:ask,3:metric:bid,1:label:ticker,4:label:market'\n```\n\n----------------------------------------\n\nTITLE: Load Balancing Configuration\nDESCRIPTION: YAML configuration for vmauth to load balance requests among multiple backend instances.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmauth.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nunauthorized_user:\n  url_prefix:\n  - \"http://app-instance-1/\"\n  - \"http://app-instance-2/\"\n  - \"http://app-instance-3/\"\n```\n\n----------------------------------------\n\nTITLE: Querying VictoriaLogs Field Names using curl (sh)\nDESCRIPTION: This curl command demonstrates how to query the `/select/logsql/field_names` endpoint in VictoriaLogs to retrieve field names and their hit counts for log entries matching the query 'error' within the last 5 minutes ('start=5m'). It sends a POST request to the default tenant.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/querying/README.md#2025-04-22_snippet_27\n\nLANGUAGE: sh\nCODE:\n```\ncurl http://localhost:9428/select/logsql/field_names -d 'query=error' -d 'start=5m'\n```\n\n----------------------------------------\n\nTITLE: Querying Minimum Duration with row_min\nDESCRIPTION: Example showing how to query log entry with minimum duration value from last 5 minutes using row_min stats function\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_195\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m | stats row_min(duration) as log_with_min_duration\n```\n\n----------------------------------------\n\nTITLE: JWT Token Structure for VM Access Control (String Format)\nDESCRIPTION: Example JWT token payload with vm_access as a string, containing the same access control information but formatted as an escaped JSON string.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmgateway.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"exp\": 1617304574,\n  \"vm_access\": \"{\\\"tenant_id\\\":{\\\"account_id\\\":1,\\\"project_id\\\":5},\\\"extra_labels\\\":{\\\"team\\\":\\\"dev\\\",\\\"project\\\":\\\"mobile\\\"},\\\"extra_filters\\\": [\\\"{env=~\\\\\\\"prod|dev\\\\\\\",team!=\\\\\\\"test\\\\\\\"}\\\"]\\\",\\\"mode\\\":1}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Debug Configuration for Fluentd VictoriaLogs Integration\nDESCRIPTION: Configuration with debug parameter enabled to verify log fields and stream fields processing. Useful for initial setup verification.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/data-ingestion/Fluentd.md#2025-04-22_snippet_1\n\nLANGUAGE: fluentd\nCODE:\n```\n<match **>\n  @type http\n  endpoint \"http://localhost:9428/insert/jsonline&debug=1\"\n  headers {\"VL-Msg-Field\": \"log\", \"VL-Time-Field\": \"time\", \"VL-Stream-Fields\": \"path\"}\n</match>\n```\n\n----------------------------------------\n\nTITLE: Inverse Hyperbolic Sine Transformation with VictoriaMetrics PromQL\nDESCRIPTION: The asinh function computes the inverse hyperbolic sine for every point in the given time series query q. It strips metric names unless otherwise specified with the keep_metric_names modifier. Inputs should be numeric time series; the function is supported in PromQL.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_79\n\nLANGUAGE: PromQL\nCODE:\n```\n`asinh(q)`\n```\n\n----------------------------------------\n\nTITLE: Reloading vmauth Configuration via HTTP Endpoint (HTTP)\nDESCRIPTION: Specifies the HTTP endpoint (`/-/reload`) used to trigger a reload of the vmauth configuration file specified by the `-auth.config` flag without restarting the vmauth process.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/changelog/CHANGELOG_2021.md#2025-04-22_snippet_24\n\nLANGUAGE: http\nCODE:\n```\n/-/reload\n```\n\n----------------------------------------\n\nTITLE: Test File Format for vmalert-tool\nDESCRIPTION: YAML configuration format for test files used with vmalert-tool. Includes rule_files, evaluation_interval, group_eval_order, and tests sections.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmalert-tool.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nrule_files:\n  [ - <string> ]\n\n[ evaluation_interval: <duration> | default = 1m ]\n\ngroup_eval_order:\n  [ - <string> ]\n\ntests:\n  [ - <test_group> ]\n```\n\n----------------------------------------\n\nTITLE: Importing Data in Native Format to VictoriaMetrics\nDESCRIPTION: Examples for importing data to VictoriaMetrics in native binary format. This format allows for efficient data transfers between VictoriaMetrics instances.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/url-examples.md#2025-04-22_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\ncurl -X POST http://localhost:8428/api/v1/import/native -T filename.bin\n```\n\nLANGUAGE: sh\nCODE:\n```\ncurl -X POST http://<vminsert>:8480/insert/0/prometheus/api/v1/import/native -T filename.bin\n```\n\n----------------------------------------\n\nTITLE: Linear Prediction in PromQL\nDESCRIPTION: The predict_linear function calculates a future value using linear interpolation over raw samples. It's supported by PromQL and useful for forecasting trends.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_43\n\nLANGUAGE: PromQL\nCODE:\n```\npredict_linear(series_selector[d], t)\n```\n\n----------------------------------------\n\nTITLE: Limiting Unique IP Count in LogsQL\nDESCRIPTION: This query counts up to 1,000,000 unique values for the 'ip' field over the last 5 minutes using the count_uniq stats function with a limit.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_182\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m | stats count_uniq(ip) limit 1_000_000 as ips_1_000_000\n```\n\n----------------------------------------\n\nTITLE: Expected Output for VMCluster Pod Status Check (sh)\nDESCRIPTION: This text block shows example output listing the pods belonging to the VictoriaMetrics cluster ('example-vmcluster-persistent'). It displays the names, readiness, status, restarts, and age for the `vminsert`, `vmselect`, and `vmstorage` pods, indicating they are running.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/guides/getting-started-with-vm-operator/README.md#2025-04-22_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nNAME                                                     READY   STATUS    RESTARTS   AGE\nvminsert-example-vmcluster-persistent-845849cb84-9vb6f   1/1     Running   0          5m15s\nvminsert-example-vmcluster-persistent-845849cb84-r7mmk   1/1     Running   0          5m15s\nvmselect-example-vmcluster-persistent-0                  1/1     Running   0          5m21s\nvmselect-example-vmcluster-persistent-1                  1/1     Running   0          5m21s\nvmstorage-example-vmcluster-persistent-0                 1/1     Running   0          5m25s\nvmstorage-example-vmcluster-persistent-1                 1/1     Running   0          5m25s\n```\n\n----------------------------------------\n\nTITLE: Applying min_over_time Rollup Function - PromQL/Pseudocode\nDESCRIPTION: Returns the minimum value across raw samples within a given window 'd', per time series selected. Usable in both VictoriaMetrics and PromQL environments. Key parameters: series_selector and window duration 'd'. Outputs the lowest metric value per gauge within the lookbehind period.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_43\n\nLANGUAGE: pseudo-promql\nCODE:\n```\n`min_over_time(series_selector[d])`\n```\n\n----------------------------------------\n\nTITLE: Manually Loading an S2 Index from Bytes in Go\nDESCRIPTION: Demonstrates how to manually load an s2 index from a byte slice (`idxBytes`) into an `s2.Index` struct. This is useful for parsing indexes stored separately or extracted from streams.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/klauspost/compress/s2/README.md#2025-04-22_snippet_19\n\nLANGUAGE: go\nCODE:\n```\n\tvar index s2.Index\n\t_, err = index.Load(idxBytes)\n```\n\n----------------------------------------\n\nTITLE: TLS Termination Proxy Command\nDESCRIPTION: Command to start vmauth as a TLS termination proxy with HTTPS support.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmauth.md#2025-04-22_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\n/path/to/vmauth -tls -tlsKeyFile=/path/to/tls_key_file -tlsCertFile=/path/to/tls_cert_file -httpListenAddr=0.0.0.0:443\n```\n\n----------------------------------------\n\nTITLE: Span Error Recording\nDESCRIPTION: Example of using the new `RecordError` method to add error events to spans\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-22_snippet_56\n\nLANGUAGE: go\nCODE:\n```\nspan.RecordError(err) // Simplified error recording on spans\n```\n\n----------------------------------------\n\nTITLE: Configuring YAML Frontmatter for VictoriaMetrics Articles Page\nDESCRIPTION: YAML configuration block that defines metadata for the articles documentation page, including weight for ordering, title, menu structure, and URL aliases.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/Articles.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nweight: 29\ntitle: Articles\nmenu:\n  docs:\n    parent: 'victoriametrics'\n    weight: 29\naliases:\n- /Articles.html\n- /articles/index.html\n- /articles/\n```\n\n----------------------------------------\n\nTITLE: Sorting Series by Label Values in Descending Order in PromQL\nDESCRIPTION: The sort_by_label_desc function sorts series in descending order based on the values of specified labels.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_135\n\nLANGUAGE: promql\nCODE:\n```\nsort_by_label_desc(foo, \"bar\")\n```\n\n----------------------------------------\n\nTITLE: Ensuring Resource Release on TracerProvider Shutdown in Go SDK\nDESCRIPTION: Updates the `Shutdown` method of the `TracerProvider` in `go.opentelemetry.io/otel/sdk/trace`. The change ensures that all associated computational resources are properly released when `Shutdown` is called for the first time, preventing potential leaks.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-22_snippet_25\n\nLANGUAGE: Go\nCODE:\n```\ngo.opentelemetry.io/otel/sdk/trace\n// Method: TracerProvider.Shutdown(ctx context.Context) error\n```\n\n----------------------------------------\n\nTITLE: IPv4 Network Stats Query\nDESCRIPTION: Returns number of log entries per /24 subnetwork from the ip field during last 5 minutes.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_143\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m | stats by (ip:/24) count() requests_per_subnet\n```\n\n----------------------------------------\n\nTITLE: Executing Live Tailing with curl in Bash\nDESCRIPTION: This snippet demonstrates how to use curl to perform live tailing of logs containing the word 'error' using VictoriaLogs' HTTP endpoint.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/querying/README.md#2025-04-22_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ncurl -N http://localhost:9428/select/logsql/tail -d 'query=error'\n```\n\n----------------------------------------\n\nTITLE: VMGateway with JWT Signature Verification\nDESCRIPTION: Shell command to start vmgateway with JWT signature verification enabled, loading public keys from files and command line for token validation.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmgateway.md#2025-04-22_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\n./bin/vmgateway -eula \\\n  -enable.auth \\\n  -write.url=http://localhost:8480 \\\n  -read.url=http://localhost:8481 \\\n  -auth.publicKeyFiles=public_key.pem \\\n  -auth.publicKeyFiles=public_key2.pem \\\n  -auth.publicKeys=`-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAu1SU1LfVLPHCozMxH2Mo\n4lgOEePzNm0tRgeLezV6ffAt0gunVTLw7onLRnrq0/IzW7yWR7QkrmBL7jTKEn5u\n+qKhbwKfBstIs+bMY2Zkp18gnTxKLxoS2tFczGkPLPgizskuemMghRniWaoLcyeh\nkd3qqGElvW/VDL5AaWTg0nLVkjRo9z+40RQzuVaE8AkAFmxZzow3x+VJYKdjykkJ\n0iT9wCS0DRTXu269V264Vf/3jvredZiKRkgwlL9xNAwxXFg0x/XFw005UWVRIkdg\ncKWTjpBP2dPwVZ4WWC+9aGVd+Gyn1o0CLelf4rEjGoXbAAEgAqeGUxrcIlbjXfbc\nmwIDAQAB\n-----END PUBLIC KEY-----\n`\n```\n\n----------------------------------------\n\nTITLE: Importing CSV Data from a File using Shell\nDESCRIPTION: Imports CSV data from a file (`exported_data.csv`) using a POST request to the `/api/v1/import/csv` endpoint. The `-T` flag specifies the file to upload. The `format` query parameter defines the parsing rules for the CSV columns, same as the POST data example. Requires `curl` and the `exported_data.csv` file.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/README.md#2025-04-22_snippet_53\n\nLANGUAGE: sh\nCODE:\n```\n# Import via file upload:\ncurl -X POST 'http://localhost:8428/api/v1/import/csv?format=2:metric:ask,3:metric:bid,1:label:ticker,4:label:market' -T exported_data.csv\n```\n\n----------------------------------------\n\nTITLE: Model Behavior Metrics in Prometheus Format\nDESCRIPTION: Core metrics tracking model execution, performance, and data processing including runs, duration, datapoints accepted/produced, active models, and errors. Each metric includes labels for stage, query_key, model_alias, scheduler_alias, and preset.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/anomaly-detection/components/monitoring.md#2025-04-22_snippet_3\n\nLANGUAGE: prometheus\nCODE:\n```\nvmanomaly_model_runs{stage=\"fit|infer|fit_infer\",query_key=\"...\",model_alias=\"...\",scheduler_alias=\"...\",preset=\"...\"}\nvmanomaly_model_run_duration_seconds{stage=\"fit|infer|fit_infer\",query_key=\"...\",model_alias=\"...\",scheduler_alias=\"...\",preset=\"...\"}\nvmanomaly_model_datapoints_accepted{stage=\"infer|fit_infer\",query_key=\"...\",model_alias=\"...\",scheduler_alias=\"...\",preset=\"...\"}\nvmanomaly_model_datapoints_produced{stage=\"infer|fit_infer\",query_key=\"...\",model_alias=\"...\",scheduler_alias=\"...\",preset=\"...\"}\nvmanomaly_models_active{query_key=\"...\",model_alias=\"...\",scheduler_alias=\"...\",preset=\"...\"}\nvmanomaly_model_runs_skipped{stage=\"fit|infer|fit_infer\",query_key=\"...\",model_alias=\"...\",scheduler_alias=\"...\",preset=\"...\"}\nvmanomaly_model_run_errors{stage=\"fit|infer|fit_infer\",query_key=\"...\",model_alias=\"...\",scheduler_alias=\"...\",preset=\"...\"}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Cardinality Stats - Shell\nDESCRIPTION: This snippet retrieves cardinality statistics from VictoriaMetrics using the /status/tsdb endpoint for both single-node and cluster configurations. It employs a basic curl GET request to fetch TSDB status data, providing insights into data sizing and cardinality at the time of the query.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/url-examples.md#2025-04-22_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\ncurl http://localhost:8428/prometheus/api/v1/status/tsdb\n```\n\nLANGUAGE: sh\nCODE:\n```\ncurl http://<vmselect>:8481/select/0/prometheus/api/v1/status/tsdb\n```\n\n----------------------------------------\n\nTITLE: Adding Custom HTTP Headers in vmagent Scrape Config (YAML)\nDESCRIPTION: Example YAML configuration for vmagent's scrape_configs section, showing how to add custom HTTP headers ('TenantID' and 'My-Auth') to be sent with each scrape request. This is useful for targets requiring specific authorization or authentication.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmagent.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nscrape_configs:\n- job_name: custom_headers\n  headers:\n  - \"TenantID: abc\"\n  - \"My-Auth: TopSecret\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Advanced Downsampling with Additional Filters\nDESCRIPTION: This Bash command demonstrates how to configure the downsampling period with additional filters by integrating pseudo-labels and real labels. This setup is used to retain specific sample data from certain tenants over defined long-term intervals.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/Cluster-VictoriaMetrics.md#2025-04-22_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\n-downsampling.period='{vm_account_id=\"5\",env=\"dev\"}:30d:1h'\n```\n\n----------------------------------------\n\nTITLE: Configuring Seasonal Trend Decomposition Model in YAML\nDESCRIPTION: This YAML configuration outlines how to set up the Seasonal Trend Decomposition Model, identified by its class name 'std', within the vmanomaly framework. It includes essential parameters such as period, which defines the number of data points in one season. The z_threshold parameter specifies the standard score threshold for anomaly scoring.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/anomaly-detection/components/models.md#2025-04-22_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\nmodels:\n  your_desired_alias_for_a_model:\n    class: \"std\"  # or 'model.std.StdModel' starting from v1.13.0\n    period: 2\n    # Common arguments for built-in model, if not set, default to\n    # See https://docs.victoriametrics.com/anomaly-detection/components/models/#common-args\n    #\n    # provide_series: ['anomaly_score', 'yhat', 'yhat_lower', 'yhat_upper']\n    # schedulers: [all scheduler aliases defined in `scheduler` section]\n    # queries: [all query aliases defined in `reader.queries` section]\n    # detection_direction: 'both'  # meaning both drops and spikes will be captured\n    # min_dev_from_expected: 0.0  # meaning, no minimal threshold is applied to prevent smaller anomalies\n    # scale: [1.0, 1.0]  # if needed, prediction intervals' width can be increased (>1) or narrowed (<1)\n    # clip_predictions: False  # if data_range for respective `queries` is set in reader, `yhat.*` columns will be clipped\n    # anomaly_score_outside_data_range: 1.01  # auto anomaly score (1.01) if `y` (real value) is outside of data_range, if set\n```\n\n----------------------------------------\n\nTITLE: Defining Reader Behavior Metrics for VictoriaMetrics Anomaly Detection\nDESCRIPTION: This snippet defines a table of reader behavior metrics for vmanomaly, including their types, descriptions, and associated labels. It covers metrics related to request duration, response counts, data parsing, and received data points.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/anomaly-detection/components/monitoring.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n<table class=\"params\">\n    <thead>\n        <tr>\n            <th>Metric</th>\n            <th>Type</th>\n            <th><span style=\"white-space: nowrap;\">Description</span></th>\n            <th>Labelnames</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>\n\n<span style=\"white-space: nowrap;\">`vmanomaly_reader_request_duration_seconds`</span>\n            </td>\n            <td>\n\n<span style=\"white-space: nowrap;\">`Histogram`</span> (was `Summary`{{% deprecated_from \"v1.17.0\" anomaly %}})</td>\n            <td>The total time (in seconds) taken by queries to VictoriaMetrics `url` for the `query_key` query within the specified scheduler `scheduler_alias`, in the `vmanomaly` service running in `preset` mode.</td>\n            <td>\n\n`url`, `query_key`, `scheduler_alias`, `preset`\n            </td>\n        </tr>\n        <tr>\n            <td>\n\n<span style=\"white-space: nowrap;\">`vmanomaly_reader_responses`</span> (named `vmanomaly_reader_response_count`{{% deprecated_from \"v1.17.0\" anomaly %}})\n            </td>\n            <td>\n\n`Counter`\n            </td>\n            <td>The count of responses received from VictoriaMetrics `url` for the `query_key` query, categorized by `code`, within the specified scheduler `scheduler_alias`, in the `vmanomaly` service running in `preset` mode.</td>\n            <td>\n\n`url`, `query_key`, `code`, `scheduler_alias`, `preset`\n            </td>\n        </tr>\n        <tr>\n            <td>\n\n<span style=\"white-space: nowrap;\">`vmanomaly_reader_received_bytes`</span>\n            </td>\n            <td>\n\n`Counter`\n            </td>\n            <td>The total number of bytes received in responses for the `query_key` query within the specified scheduler `scheduler_alias`, in the `vmanomaly` service running in `preset` mode.</td>\n            <td>\n\n`url`, `query_key`, <span style=\"white-space: nowrap;\">`scheduler_alias`</span>, `preset`\n            </td>\n        </tr>\n        <tr>\n            <td>\n\n<span style=\"white-space: nowrap;\">`vmanomaly_reader_response_parsing_seconds`</span>\n            </td>\n            <td>\n\n`Histogram` (was `Summary`{{% deprecated_from \"v1.17.0\" anomaly %}})\n            </td>\n            <td>The total time (in seconds) taken for data parsing at each `step` (json, dataframe) for the `query_key` query within the specified scheduler `scheduler_alias`, in the `vmanomaly` service running in `preset` mode.</td>\n            <td>\n\n`step`, `url`, `query_key`, `scheduler_alias`, `preset`\n            </td>\n        </tr>\n        <tr>\n            <td>\n\n<span style=\"white-space: nowrap;\">`vmanomaly_reader_timeseries_received`</span>\n            </td>\n            <td>\n\n`Counter`\n            </td>\n            <td>The total number of timeseries received from VictoriaMetrics for the `query_key` query within the specified scheduler `scheduler_alias`, in the `vmanomaly` service running in `preset` mode.</td>\n            <td>\n\n`url`, `query_key`, `scheduler_alias`, `preset`\n            </td>\n        </tr>\n        <tr>\n            <td>\n\n<span style=\"white-space: nowrap;\">`vmanomaly_reader_datapoints_received`</span>\n            </td>\n            <td>\n\n`Counter`\n            </td>\n            <td>The total number of datapoints received from VictoriaMetrics for the `query_key` query within the specified scheduler `scheduler_alias`, in the `vmanomaly` service running in `preset` mode.</td>\n            <td>\n\n`url`, `query_key`, `scheduler_alias`, `preset`\n            </td>\n        </tr>\n    </tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Calculating Histogram Average - PromQL - PromQL\nDESCRIPTION: histogram_avg() computes the average value for the given histogram buckets over multiple time series, typically aggregated by groupings such as job or time window. Inputs must be properly structured histogram buckets. Used for response time or similar metrics. No external dependencies required.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_101\n\nLANGUAGE: PromQL\nCODE:\n```\n`histogram_avg(buckets)`\n```\n\n----------------------------------------\n\nTITLE: Querying Graphite-Ingested Data from VictoriaMetrics as JSON - Shell\nDESCRIPTION: Example of querying data previously sent in Graphite format from VictoriaMetrics using the export API. Uses curl to fetch series matching a specified Graphite metric name. The output is in JSON Lines format.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/README.md#2025-04-22_snippet_22\n\nLANGUAGE: sh\nCODE:\n```\ncurl -G 'http://localhost:8428/api/v1/export' -d 'match=foo.bar.baz'\n```\n\n----------------------------------------\n\nTITLE: Calculating Sign Function using sgn() in MetricsQL/PromQL\nDESCRIPTION: The `sgn(q)` transform function returns the sign of each data point `v` in the time series `q`: 1 if v > 0, -1 if v < 0, and 0 if v = 0. Metric names are stripped unless `keep_metric_names` is used. This function is supported by both MetricsQL and PromQL.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_121\n\nLANGUAGE: MetricsQL\nCODE:\n```\nsgn(q)\n```\n\n----------------------------------------\n\nTITLE: Applying Logical OR to a Single Field in LogsQL\nDESCRIPTION: Shows a shorthand syntax in LogsQL for applying multiple filters combined with the `OR` logical operator to a single specified field (`field_name`). This is equivalent to writing `field_name:q1 OR field_name:q2 OR ... OR field_name:qN` but is more concise.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_79\n\nLANGUAGE: logsql\nCODE:\n```\nfield_name:(q1 OR q2 OR ... qN)\n```\n\n----------------------------------------\n\nTITLE: Querying logs with limit parameter using HTTP API\nDESCRIPTION: Shell command that queries VictoriaLogs HTTP API to retrieve the 10 most recent logs containing the word 'error' using the limit parameter.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/logsql-examples.md#2025-04-22_snippet_19\n\nLANGUAGE: sh\nCODE:\n```\ncurl http://localhost:9428/select/logsql/query -d 'query=error' -d 'limit=10'\n```\n\n----------------------------------------\n\nTITLE: Result of Implicit Lookbehind Window Addition (MetricsQL)\nDESCRIPTION: This is the explicit form `avg_over_time(temperature[1i])` after VictoriaMetrics automatically adds the default lookbehind window (`1i`) to the `avg_over_time(temperature)` query.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_156\n\nLANGUAGE: MetricsQL\nCODE:\n```\navg_over_time(temperature[1i])\n```\n\n----------------------------------------\n\nTITLE: Renaming Metrics with Prefix in YAML\nDESCRIPTION: This YAML configuration demonstrates how to rename metrics starting with 'foo_' to metrics starting with 'bar_' across all scraped metrics.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/relabeling.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nscrape_configs:\n- job_name: test\n  static_configs:\n  - targets: [host123]\n  metric_relabel_configs:\n  - source_labels: [__name__]\n    regex: 'foo_(.*)'\n    replacement: bar_$1\n    target_label: __name__\n```\n\n----------------------------------------\n\nTITLE: Renaming Scraped Metrics in YAML\nDESCRIPTION: This YAML configuration shows how to rename the 'foo' metric to 'bar' across all scraped metrics while leaving other metric names unchanged.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/relabeling.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nscrape_configs:\n- job_name: test\n  static_configs:\n  - targets: [host123]\n  metric_relabel_configs:\n  - if: 'foo'\n    replacement: bar\n    target_label: __name__\n```\n\n----------------------------------------\n\nTITLE: Extracting Day of Month from Timestamps in MetricsQL\nDESCRIPTION: A transform function that returns the day of the month (1-31) for each data point in the time series returned by `q`, assuming the points represent Unix timestamps. If `q` is a series selector, `default_rollup()` is applied first. Metric names are stripped by default; use `keep_metric_names` to preserve them. Supported by PromQL.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_83\n\nLANGUAGE: MetricsQL\nCODE:\n```\n`day_of_month(q)`\n```\n\n----------------------------------------\n\nTITLE: Ignoring Global Time Filter in LogsQL Subqueries\nDESCRIPTION: This example shows how to use the ignore_global_time_filter option to query logs from December 2024 regardless of the time range passed to the API endpoint, then count logs matching those user_ids in the global time range.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_204\n\nLANGUAGE: logsql\nCODE:\n```\nuser_id:in(options(ignore_global_time_filter=true) _time:2024-12Z | keep user_id) | count()\n```\n\n----------------------------------------\n\nTITLE: Migrating data from OpenTSDB to VictoriaMetrics cluster\nDESCRIPTION: This command demonstrates migration from OpenTSDB to a clustered VictoriaMetrics setup, which requires the additional vm-account-id parameter.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmctl.md#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n$ ./vmctl opentsdb --otsdb-addr http://opentsdb:4242/ --otsdb-retentions sum-1m-avg:1h:1d --otsdb-filters system --otsdb-normalize --vm-addr http://victoria:8480/ --vm-account-id 0\n```\n\n----------------------------------------\n\nTITLE: Label Value Extraction in PromQL\nDESCRIPTION: Returns numeric values for a given label from time series. For example, extracts 1.234 from foo{bar=\"1.234\"}.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_157\n\nLANGUAGE: promql\nCODE:\n```\nlabel_value(q, \"label\")\n```\n\n----------------------------------------\n\nTITLE: HTTP-based Target Discovery Configuration in YAML\nDESCRIPTION: Configuration for HTTP-based service discovery using http_sd_configs to fetch targets from a central config server.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/scrape_config_examples.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nscrape_configs:\n- job_name: node-exporter\n  http_sd_configs:\n  - url: \"http://central-config-server/targets?type=node-exporter\"\n```\n\n----------------------------------------\n\nTITLE: Compressing Data using gozstd Compress Function in Go\nDESCRIPTION: Shows the simplest way to compress a byte slice (`data`) using the `gozstd.Compress` function in Go. Passing `nil` as the first argument instructs the function to allocate a new destination buffer for the compressed data, which is then assigned to `compressedData`. This is suitable for compressing relatively small pieces of data in memory.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/valyala/gozstd/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n\tcompressedData := Compress(nil, data)\n```\n\n----------------------------------------\n\nTITLE: Configuring Minimal Deviation in YAML for VictoriaMetrics Anomaly Detection\nDESCRIPTION: This YAML configuration demonstrates how to use the min_dev_from_expected parameter in zscore models to reduce false positives for small absolute value deviations.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/anomaly-detection/components/models.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nreader:\n  queries:\n    need_to_include_min_dev: small_abs_values_metricsql_expression\n    normal_behavior: no_need_to_exclude_small_deviations_metricsql_expression\nmodels:\n  zscore_with_min_dev:\n    class: 'zscore'\n    z_threshold: 3\n    min_dev_from_expected: 5.0\n    queries: ['need_to_include_min_dev']\n  zscore_wo_min_dev:\n    class: 'zscore'\n    z_threshold: 3\n    queries: ['normal_behavior']\n```\n\n----------------------------------------\n\nTITLE: Extracting Hour from Timestamps with PromQL\nDESCRIPTION: The `hour(q)` function derives the hour (range 0-23) from Unix timestamps in series `q`, aiding time-based data categorization. It strips metric names unless `keep_metric_names` is used and is integrated within PromQL for temporal data analysis.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_84\n\nLANGUAGE: PromQL\nCODE:\n```\n`hour(q)`\n```\n\n----------------------------------------\n\nTITLE: Using head Syntax for Limit in LogSQL\nDESCRIPTION: The head keyword can be used instead of limit. This example returns up to 10 logs that contain the term 'error'.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_114\n\nLANGUAGE: logsql\nCODE:\n```\nerror | head\n```\n\n----------------------------------------\n\nTITLE: Verifying Imported Prometheus Data using Shell\nDESCRIPTION: Exports data from VictoriaMetrics, filtering for metrics with the name 'foo' (`match={__name__=~\"foo\"}`) using the `/api/v1/export` endpoint. This command helps verify that the data imported via `/api/v1/import/prometheus` was successfully ingested. Requires `curl`.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/README.md#2025-04-22_snippet_57\n\nLANGUAGE: sh\nCODE:\n```\ncurl -G 'http://localhost:8428/api/v1/export' -d 'match={__name__=~\"foo\"}'\n```\n\n----------------------------------------\n\nTITLE: Guidance on Using Sprintf for Values in Structured Logging (Go)\nDESCRIPTION: The text references `Sprintf()` (specifically `fmt.Sprintf` in Go context) to advise against its use for generating keys in structured logs. It strongly recommends using `Sprintf` only for formatting the *values* associated with constant keys to maintain log schema consistency and facilitate easier log processing and querying.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/go-logr/logr/README.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nSprintf()\n```\n\n----------------------------------------\n\nTITLE: Starting VictoriaLogs with TLS Encryption for Syslog\nDESCRIPTION: Configures VictoriaLogs to accept TLS-encrypted Syslog messages on TCP port 6514. This setup enhances security by encrypting the log data in transit.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/data-ingestion/syslog.md#2025-04-22_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\n./victoria-logs -syslog.listenAddr.tcp=:6514 -syslog.tls -syslog.tlsCertFile=/path/to/tls/cert -syslog.tlsKeyFile=/path/to/tls/key\n```\n\n----------------------------------------\n\nTITLE: Counting Counter Reset Events with resets - PromQL/Pseudocode\nDESCRIPTION: Returns the number of times a counter metric has reset (wrapped) in the specified lookbehind window 'd'. Takes a counter selector and lookbehind window as input. Result is a count per time series, used to track anomalies or data quality issues on counters. Supported in PromQL environments; output rollups strip metric names unless retained.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_53\n\nLANGUAGE: pseudo-promql\nCODE:\n```\n`resets(series_selector[d])`\n```\n\n----------------------------------------\n\nTITLE: Packing Fields into logfmt - LogSQL\nDESCRIPTION: The `pack_logfmt` pipe command packs all fields of log entries into a logfmt message string stored in the specified field name. It requires VictoriaMetrics setup and uses its query syntax. Fields can be selected or prefixed for packing. Outputs a logfmt string with all labels preserved unless modified with additional pipes.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_120\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m | pack_logfmt as _msg\n```\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m | pack_logfmt\n```\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m | pack_logfmt fields (foo, bar) as baz\n```\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m | pack_logfmt fields (foo.*, bar.*) as baz\n```\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m | pack_logfmt as foo | fields foo\n```\n\n----------------------------------------\n\nTITLE: Configuring vmagent with Basic Authentication\nDESCRIPTION: Setup for vmagent to use basic authentication when pushing metrics to VictoriaMetrics. Requires setting username and password flags.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/data-ingestion/vmagent.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n/path/to/vmagent -remoteWrite.url=https://<victoriametrics_url>/api/v1/write \\\n -remoteWrite.basicAuth.username=<username> \\\n -remoteWrite.basicAuth.password=<password>\n```\n\n----------------------------------------\n\nTITLE: Using azidentity Credentials with Older Azure SDK Packages in Go\nDESCRIPTION: This Go code snippet demonstrates how to use a modern `azidentity` credential (like `ClientSecretCredential`) with older Azure SDK clients that expect an `autorest.Authorizer`. It utilizes the `azidext.NewTokenCredentialAdapter` from the `github.com/jongio/azidext/go/azidext` module, passing the `azidentity` credential and the required OAuth 2.0 scopes (ending in `/.default`) to create a compatible authorizer.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/Azure/azure-sdk-for-go/sdk/azidentity/MIGRATION.md#2025-04-22_snippet_14\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"github.com/Azure/azure-sdk-for-go/sdk/azidentity\"\n    \"github.com/Azure/azure-sdk-for-go/services/resources/mgmt/2018-06-01/subscriptions\"\n    \"github.com/jongio/azidext/go/azidext\"\n)\n\ncred, err := azidentity.NewClientSecretCredential(tenantID, clientID, secret, nil)\nhandle(err)\n\nclient := subscriptions.NewClient()\nclient.Authorizer = azidext.NewTokenCredentialAdapter(cred, []string{\"https://management.azure.com//.default\"})\n```\n\n----------------------------------------\n\nTITLE: Instant Increase Rate Calculation with IRate in Markdown\nDESCRIPTION: 'irate' finds the per-second rate increase from the last two samples, assisting in momentary trend analysis for counters.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/MetricsQL.md#2025-04-22_snippet_38\n\nLANGUAGE: Markdown\nCODE:\n```\n`irate(series_selector[d])` is a [rollup function](#rollup-functions), which calculates the \"instant\" per-second increase rate over\\nthe last two [raw samples](https://docs.victoriametrics.com/keyconcepts/#raw-samples).\n```\n\n----------------------------------------\n\nTITLE: Pulling vmanomaly Docker Image Shell\nDESCRIPTION: This shell command uses Docker to pull a specific version (v1.21.0) of the official `vmanomaly` image from Docker Hub. This image contains the necessary application and environment to run the anomaly detection.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/anomaly-detection/components/models.md#2025-04-22_snippet_27\n\nLANGUAGE: sh\nCODE:\n```\ndocker pull victoriametrics/vmanomaly:v1.21.0\n```\n\n----------------------------------------\n\nTITLE: Top Results Queries\nDESCRIPTION: Shows different variations of top queries for retrieving most frequent field values with optional ranking.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_146\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m | top 7 by (_stream)\n```\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m | top by (ip)\n```\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m | fields ip | top\n```\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m | top by (path) hits as visits\n```\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m | top 10 by (ip) rank\n```\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m | top 10 by (ip) rank as position\n```\n\n----------------------------------------\n\nTITLE: Configuring VictoriaMetrics Cluster Fault Domain Awareness\nDESCRIPTION: Example command-line flag for configuring fault domain awareness in vmselect to return full responses if up to globalReplicationFactor - 1 fault domains are unavailable.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/changelog/CHANGELOG_2024.md#2025-04-22_snippet_21\n\nLANGUAGE: shell\nCODE:\n```\n-globalReplicationFactor - 1\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Claims With Application Validation in golang-jwt/jwt (Go)\nDESCRIPTION: This Go snippet shows the definition of a custom claims structure embedding standard registered claims and adding an application-specific field. The Validate() method implements logic to ensure custom conditions (e.g., \"Foo\" must have value \"bar\"). Requires Go, github.com/golang-jwt/jwt/v5, and proper embedding of jwt.RegisteredClaims; used when extending JWT validation beyond standard checks.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/golang-jwt/jwt/v5/MIGRATION_GUIDE.md#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\n// MyCustomClaims includes all registered claims, plus Foo.\ntype MyCustomClaims struct {\n\tFoo string `json:\"foo\"`\n\tjwt.RegisteredClaims\n}\n\n// Validate can be used to execute additional application-specific claims\n// validation.\nfunc (m MyCustomClaims) Validate() error {\n\tif m.Foo != \"bar\" {\n\t\treturn errors.New(\"must be foobar\")\n\t}\n\n\treturn nil\n}\n```\n\n----------------------------------------\n\nTITLE: Inverse Hyperbolic Tangent Transformation with VictoriaMetrics PromQL\nDESCRIPTION: The atanh function calculates the inverse hyperbolic tangent of each value in the query q time series. By default, it removes metric names unless keep_metric_names is specified; supported by PromQL. It operates on numerical values of time series.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_81\n\nLANGUAGE: PromQL\nCODE:\n```\n`atanh(q)`\n```\n\n----------------------------------------\n\nTITLE: MetricsQL Rollup Function With Aggregation Type Example\nDESCRIPTION: Example of using the rollup_rate function with a second argument to select only the maximum increase rates for a metric over specified intervals on a graph.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/changelog/CHANGELOG_2023.md#2025-04-22_snippet_15\n\nLANGUAGE: sql\nCODE:\n```\nrollup_rate(requests_total[1i], \"max\")\n```\n\n----------------------------------------\n\nTITLE: Checking VM Operator Pod Status (sh)\nDESCRIPTION: This command uses kubectl to check the status of the pods created by the VM Operator Helm installation. It filters pods in the 'default' namespace using the label 'app.kubernetes.io/instance=vmoperator', which is typically applied by the Helm chart.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/guides/getting-started-with-vm-operator/README.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace default get pods -l \"app.kubernetes.io/instance=vmoperator\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Compose for VictoriaMetrics Anomaly Detection\nDESCRIPTION: This Docker Compose configuration sets up various services including vmagent, VictoriaMetrics, Grafana, vmalert, vmanomaly, Alertmanager, and node-exporter. It defines volumes, networks, and specific configurations for each service.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/anomaly-detection/guides/guide-vmanomaly-vmalert/README.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  vmagent:\n    container_name: vmagent\n    image: victoriametrics/vmagent:v1.115.0\n    depends_on:\n      - \"victoriametrics\"\n    ports:\n      - 8429:8429\n    volumes:\n      - vmagentdata-guide-vmanomaly-vmalert:/vmagentdata\n      - ./prometheus.yml:/etc/prometheus/prometheus.yml\n    command:\n      - \"--promscrape.config=/etc/prometheus/prometheus.yml\"\n      - \"--remoteWrite.url=http://victoriametrics:8428/api/v1/write\"\n    networks:\n      - vm_net\n    restart: always\n\n  victoriametrics:\n    container_name: victoriametrics\n    image: victoriametrics/victoria-metrics:v1.115.0\n    ports:\n      - 8428:8428\n    volumes:\n      - vmdata-guide-vmanomaly-vmalert:/storage\n    command:\n      - \"--storageDataPath=/storage\"\n      - \"--httpListenAddr=:8428\"\n      - \"--vmalert.proxyURL=http://vmalert:8880\"\n      - \"-search.disableCache=1\" # for guide only, do not use in production\n    networks:\n      - vm_net\n    restart: always\n\n  grafana:\n    container_name: grafana\n    image: grafana/grafana-oss:10.2.1\n    depends_on:\n      - \"victoriametrics\"\n    ports:\n      - 3000:3000\n    volumes:\n      - grafanadata-guide-vmanomaly-vmalert:/var/lib/grafana\n      - ./provisioning/datasources:/etc/grafana/provisioning/datasources\n      - ./provisioning/dashboards:/etc/grafana/provisioning/dashboards\n      - ./vmanomaly_guide_dashboard.json:/var/lib/grafana/dashboards/vmanomaly_guide_dashboard.json\n    networks:\n      - vm_net\n    restart: always\n\n\n  vmalert:\n    container_name: vmalert\n    image: victoriametrics/vmalert:v1.115.0\n    depends_on:\n      - \"victoriametrics\"\n    ports:\n      - 8880:8880\n    volumes:\n      - ./vmalert_config.yml:/etc/alerts/alerts.yml\n    command:\n      - \"--datasource.url=http://victoriametrics:8428/\"\n      - \"--remoteRead.url=http://victoriametrics:8428/\"\n      - \"--remoteWrite.url=http://victoriametrics:8428/\"\n      - \"--notifier.url=http://alertmanager:9093/\"\n      - \"--rule=/etc/alerts/*.yml\"\n      # display source of alerts in grafana\n      - \"--external.url=http://127.0.0.1:3000\" #grafana outside container\n      # when copypaste the line be aware of '$$' for escaping in '$expr'\n      - '--external.alert.source=explore?orgId=1&left=[\"now-1h\",\"now\",\"VictoriaMetrics\",{\"expr\": },{\"mode\":\"Metrics\"},{\"ui\":[true,true,true,\"none\"]}]'\n    networks:\n      - vm_net\n    restart: always\n  vmanomaly:\n    container_name: vmanomaly\n    image: victoriametrics/vmanomaly:v1.21.0\n    depends_on:\n      - \"victoriametrics\"\n    ports:\n      - \"8490:8490\"\n    networks:\n      - vm_net\n    restart: always\n    volumes:\n      - ./vmanomaly_config.yml:/config.yaml\n      - ./vmanomaly_license:/license\n    platform: \"linux/amd64\"\n    command:\n      - \"/config.yaml\"\n      - \"--licenseFile=/license\"\n  alertmanager:\n    container_name: alertmanager\n    image: prom/alertmanager:v0.27.0\n    volumes:\n      - ./alertmanager.yml:/config/alertmanager.yml\n    command:\n      - \"--config.file=/config/alertmanager.yml\"\n    ports:\n      - 9093:9093\n    networks:\n      - vm_net\n    restart: always\n\n  node-exporter:\n    image: quay.io/prometheus/node-exporter:v1.7.0\n    container_name: node-exporter\n    ports:\n      - 9100:9100\n    pid: host\n    restart: unless-stopped\n    networks:\n      - vm_net\n\nvolumes:\n  vmagentdata-guide-vmanomaly-vmalert: {}\n  vmdata-guide-vmanomaly-vmalert: {}\n  grafanadata-guide-vmanomaly-vmalert: {}\nnetworks:\n  vm_net:\n```\n\n----------------------------------------\n\nTITLE: Transforming Label Values via Regex Substitution in MetricsQL\nDESCRIPTION: A label manipulation function that finds all occurrences of `regexp` within the value of the specified `label` and replaces them with the `replacement` string for all time series returned by `q`. Implicitly applies `default_rollup()` if `q` is a series selector.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_155\n\nLANGUAGE: metricsql\nCODE:\n```\nlabel_transform(q, \"label\", \"regexp\", \"replacement\")\n```\n\n----------------------------------------\n\nTITLE: Skipping Backend TLS Verification per User in vmauth (YAML)\nDESCRIPTION: YAML configuration snippet for `vmauth` showing how to disable TLS certificate verification for connections to a specific HTTPS backend (`https://localhost`) for user `foo`. This is configured by setting `tls_insecure_skip_verify: true` within the user's definition, overriding any global setting.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmauth.md#2025-04-22_snippet_35\n\nLANGUAGE: yaml\nCODE:\n```\n- username: \"foo\"\n  url_prefix: \"https://localhost\"\n  tls_insecure_skip_verify: true\n\n```\n\n----------------------------------------\n\nTITLE: Query Trace JSON Output in VictoriaMetrics\nDESCRIPTION: This JSON object represents the trace output for a sample query in VictoriaMetrics, showing the execution steps and their durations.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/README.md#2025-04-22_snippet_76\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"duration_msec\": 0.099,\n  \"message\": \"/api/v1/query_range: start=1654034340000, end=1654037880000, step=60000, query=\\\"2*rand()\\\": series=1\",\n  \"children\": [\n    {\n      \"duration_msec\": 0.034,\n      \"message\": \"eval: query=2 * rand(), timeRange=[1654034340000..1654037880000], step=60000, mayCache=true: series=1, points=60, pointsPerSeries=60\",\n      \"children\": [\n        {\n          \"duration_msec\": 0.032,\n          \"message\": \"binary op \\\"*\\\": series=1\",\n          \"children\": [\n            {\n              \"duration_msec\": 0.009,\n              \"message\": \"eval: query=2, timeRange=[1654034340000..1654037880000], step=60000, mayCache=true: series=1, points=60, pointsPerSeries=60\"\n            },\n            {\n              \"duration_msec\": 0.017,\n              \"message\": \"eval: query=rand(), timeRange=[1654034340000..1654037880000], step=60000, mayCache=true: series=1, points=60, pointsPerSeries=60\",\n              \"children\": [\n                {\n                  \"duration_msec\": 0.015,\n                  \"message\": \"transform rand(): series=1\"\n                }\n              ]\n            }\n          ]\n        }\n      ]\n    },\n    {\n      \"duration_msec\": 0.004,\n      \"message\": \"sort series by metric name and labels\"\n    },\n    {\n      \"duration_msec\": 0.044,\n      \"message\": \"generate /api/v1/query_range response for series=1, points=60\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Split Query Configuration for Alert Metrics in VictoriaMetrics Anomaly Detection\nDESCRIPTION: Alternative approach for handling large queries by splitting them into smaller ones with specific label filters. This workaround helps avoid hitting query limits in older versions of VictoriaMetrics Anomaly Detection.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/anomaly-detection/FAQ.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nreader:\n  # other reader args\n  queries:\n    sum_alerts_pending:\n      expr: 'sum(ALERTS{alertstate=\\'pending\\'}) by ()'\n    sum_alerts_firing:\n      expr: 'sum(ALERTS{alertstate=\\'firing\\'}) by ()'\nmodels:\n    prophet:\n      # other model args\n      queries: [\n        'sum_alerts_pending',\n        'sum_alerts_firing',\n      ]\n# other config sections\n```\n\n----------------------------------------\n\nTITLE: Tidying and Vendoring Go Dependencies\nDESCRIPTION: Shows the Bash commands to finalize dependency updates using Go modules. `go mod tidy` cleans up the `go.mod` and `go.sum` files by removing unused entries and adding necessary ones. `go mod vendor` populates the `vendor/` directory with the actual package code. The `GO111MODULE=on` environment variable forces module-aware mode, which might be needed depending on the project's location relative to `GOPATH`.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/prometheus/procfs/CONTRIBUTING.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# The GO111MODULE variable can be omitted when the code isn't located in GOPATH.\nGO111MODULE=on go mod tidy\n\nGO111MODULE=on go mod vendor\n```\n\n----------------------------------------\n\nTITLE: Adjusting Timezone Offset in Syslog Unpacking\nDESCRIPTION: Shows how to add a timezone offset when unpacking RFC3164 format Syslog timestamps.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_166\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m | unpack_syslog offset 5h30m\n```\n\n----------------------------------------\n\nTITLE: Deleting Time Series in VictoriaMetrics Cluster using Shell\nDESCRIPTION: Sends a request using `curl` to the `vmselect` `/api/v1/admin/tsdb/delete_series` endpoint to delete metrics. The `match[]` parameter specifies the time series selector (`process_cpu_cores_available`) for the series to be deleted. Note that deletion is asynchronous and space reclamation might require a forced merge.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/guides/guide-delete-or-replace-metrics/README.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncurl -s 'http://vmselect:8481/delete/0/prometheus/api/v1/admin/tsdb/delete_series?match[]=process_cpu_cores_available'\n```\n\n----------------------------------------\n\nTITLE: Format Pipe JSON Generation\nDESCRIPTION: Generates JSON object from log fields with proper escaping using q: prefix for quoted strings.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_104\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m | format '{\"_msg\":<q:_msg>,\"stacktrace\":<q:stacktrace>}' as my_json\n```\n\n----------------------------------------\n\nTITLE: Dropping Targets If Source Labels Are Equal with 'drop_if_equal' - YAML\nDESCRIPTION: Configures the 'drop_if_equal' action to exclude any entries whose specified source labels have the same value (e.g., 'instance' and 'host'). No dependencies aside from VictoriaMetrics's relabeling support. Uses 'source_labels' and 'action'. Input: label sets per target; removes those where specified labels are identical. Use in YAML files to suppress redundant entries.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmagent.md#2025-04-22_snippet_31\n\nLANGUAGE: YAML\nCODE:\n```\n- action: drop_if_equal\n  source_labels: [\"instance\", \"host\"]\n```\n\n----------------------------------------\n\nTITLE: VMGateway with JWKS Endpoint for Azure AD\nDESCRIPTION: Shell command to start vmgateway using JWKS endpoint from Azure Active Directory for JWT signature verification.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmgateway.md#2025-04-22_snippet_15\n\nLANGUAGE: sh\nCODE:\n```\n/bin/vmgateway -eula \\\n  -enable.auth \\\n  -write.url=http://localhost:8480 \\\n  -read.url=http://localhost:8481 \\\n  -auth.jwksEndpoints=https://login.microsoftonline.com/common/discovery/v2.0/keys\n```\n\n----------------------------------------\n\nTITLE: Model Skipped Run Log (Insufficient Data)\nDESCRIPTION: Logs a warning when a model run (fit stage) is skipped because there are not enough valid data points (at least 1 for online, 2 for offline models). This is indicated by the `vmanomaly_model_runs_skipped` metric. Placeholders `{{scheduler_alias}}`, `{{model_alias}}`, `{{query_key}}`, and `{{valid_values_cnt}}` provide context.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/anomaly-detection/components/monitoring.md#2025-04-22_snippet_11\n\nLANGUAGE: text\nCODE:\n```\n[Scheduler {{scheduler_alias}}] Skipping run for stage 'fit' for model '{{model_alias}}' (query_key: {{query_key}}): Not enough valid data to fit: {{valid_values_cnt}}\n```\n\n----------------------------------------\n\nTITLE: Querying Exported Data from VictoriaMetrics as JSON - Shell\nDESCRIPTION: Shell example for retrieving metrics from VictoriaMetrics using the /api/v1/export endpoint. The -G flag enables query-style requests while -d provides a regular expression to match metric names. The response will be in JSON line format, reflecting the stored metric names and their associated values and tags.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/README.md#2025-04-22_snippet_16\n\nLANGUAGE: sh\nCODE:\n```\ncurl -G 'http://localhost:8428/api/v1/export' -d 'match={__name__=~\\\"measurement_.*\\\"}'\n```\n\n----------------------------------------\n\nTITLE: Calculating Average Increase Rate in PromQL\nDESCRIPTION: The rate function calculates the average per-second increase rate over a given lookbehind window for each time series. It's supported by PromQL and commonly used for trend analysis.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_35\n\nLANGUAGE: promql\nCODE:\n```\nrate(series_selector[d])\n```\n\n----------------------------------------\n\nTITLE: Retrieving Grafana Admin Password\nDESCRIPTION: This command retrieves the auto-generated password for the Grafana admin user from the Kubernetes secret. It uses kubectl to get the secret and decodes the base64-encoded password.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/guides/k8s-monitoring-via-vm-single/README.md#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get secret --namespace default my-grafana -o jsonpath=\"{.data.admin-password}\" | base64 --decode ; echo\n```\n\n----------------------------------------\n\nTITLE: Enforcing Query Arguments via vmauth Configuration (YAML)\nDESCRIPTION: Shows how to configure `vmauth` to automatically add a specific query argument (`extra_label=foo=bar`) to all requests proxied under the `unauthorized_user` configuration. The modified request is then forwarded to the backend specified in `url_prefix`.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmauth.md#2025-04-22_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nunauthorized_user:\n  url_prefix: \"http://victoria-metrics:8428/?extra_label=foo=bar\"\n```\n\n----------------------------------------\n\nTITLE: Filtering Prometheus Data During Migration\nDESCRIPTION: This shell script snippet demonstrates how to apply filtering based on time and labels during data migration from a Prometheus snapshot using the `vmctl` tool. It uses time-based flags like `--prom-filter-time-start` and `--prom-filter-time-end` to restrict data to a specific time range, and label-based filtering flags to selectively migrate series based on specific label criteria.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmctl.md#2025-04-22_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\n./vmctl prometheus --prom-snapshot=/path/to/snapshot \\\n  --prom-filter-time-start=2020-02-07T00:07:01Z \\\n  --prom-filter-time-end=2020-02-11T00:07:01Z\nPrometheus import mode\nPrometheus snapshot stats:\n  blocks found: 2;\n  blocks skipped: 12;\n  min time: 1581288163058 (2020-02-09T22:42:43Z);\n  max time: 1581328800000 (2020-02-10T10:00:00Z);\n  samples: 1657698;\n  series: 3930.\nFound 2 blocks to import. Continue? [Y/n] y\n\n```\n\n----------------------------------------\n\nTITLE: Getting Point Timestamps in MetricsQL\nDESCRIPTION: A transform function that returns the Unix timestamp for each data point in the result. This function is supported by PromQL. See also `timestamp`, `now`, `start`, and `end`.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_134\n\nLANGUAGE: metricsql\nCODE:\n```\ntime()\n```\n\n----------------------------------------\n\nTITLE: Using Facets Pipe to Analyze Error Logs in LogSQL\nDESCRIPTION: This snippet shows how to use the facets pipe to return the most frequent values for every log field in error logs over the last hour.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_90\n\nLANGUAGE: logsql\nCODE:\n```\n_time:1h error | facets\n```\n\n----------------------------------------\n\nTITLE: Default vs Custom Anomaly Score Configuration in YAML\nDESCRIPTION: Example demonstrating default and custom anomaly score configurations for different models. Shows how to set explicit anomaly scores and default behavior.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/anomaly-detection/components/models.md#2025-04-22_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nmodels:\n  model_default_score:\n    class: 'zscore_online'\n    # default anomaly score (1.01) is applied when y is outside data_range, same as setting\n    # anomaly_score_outside_data_range: 1.01\n  model_higher_out_of_data_range_score:\n    class: 'zscore_online'\n    # explicitly set, takes priority over `settings`'s value\n    anomaly_score_outside_data_range: 3.0\n```\n\n----------------------------------------\n\nTITLE: Creating EXT4 Filesystem for Large VictoriaMetrics Deployments\nDESCRIPTION: Command for creating an ext4 filesystem optimized for storing large amounts of VictoriaMetrics data (>1TB). Uses the 64bit, huge_file, and extent options with huge filesystem type for optimal performance.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/BestPractices.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nmkfs.ext4 ... -O 64bit,huge_file,extent -T huge\n```\n\n----------------------------------------\n\nTITLE: Calculating Z-Score Using zscore Function in MetricsQL\nDESCRIPTION: The zscore function calculates z-score values for grouped time series, useful for detecting anomalies in related time series.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_154\n\nLANGUAGE: metricsql\nCODE:\n```\nzscore(q) by (group_labels)\n```\n\n----------------------------------------\n\nTITLE: Writing Data to VictoriaMetrics Using Graphite Protocol and Netcat - Shell\nDESCRIPTION: Shell command using echo and netcat (nc) to send a Graphite-formatted metric to VictoriaMetrics. The metric uses semicolon-delimited tags and a Unix timestamp, demonstrating plaintext protocol ingestion. VictoriaMetrics must be listening for Graphite data on the specified port.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/README.md#2025-04-22_snippet_21\n\nLANGUAGE: sh\nCODE:\n```\necho \\\"foo.bar.baz;tag1=value1;tag2=value2 123 `date +%s`\\\" | nc -N localhost 2003\n```\n\n----------------------------------------\n\nTITLE: Counting Unique Host-Path Pairs in LogsQL\nDESCRIPTION: This query returns the number of unique (host, path) pairs for the corresponding fields over the last 5 minutes using the count_uniq stats function.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_181\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m | stats count_uniq(host, path) unique_host_path_pairs\n```\n\n----------------------------------------\n\nTITLE: Debugging vmalert-tool Logs in Shell\nDESCRIPTION: This snippet shows log messages produced when vmalert-tool is run with debugging enabled. It details the steps to activate debugging and provides sample logs indicating rule evaluation outputs over time. Dependencies include vmalert-tool and log configuration settings. Expected input involves setting 'debug: true' and running the tool with '-loggerLevel=INFO'; expected output includes detailed logs of query execution.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmalert-tool.md#2025-04-22_snippet_10\n\nLANGUAGE: shell-session\nCODE:\n```\n2024-12-10T12:10:26.339Z\\tinfo\\tVictoriaMetrics/app/vmalert/rule/alerting.go:212\\tDEBUG rule \\\"TestGroup\\\":\\\"TestRule\\\" (14686524233356632740) at 1970-01-01T00:00:00Z: query returned 0 samples (elapsed: 2.148792ms)\n2024-12-10T12:10:26.339Z\\tinfo\\tVictoriaMetrics/app/vmalert/datasource/client.go:254\\tDEBUG datasource request: executing POST request with params \\\"http://127.0.0.1:8880/prometheus/api/v1/query?query=test_metric+%3E+0&step=300s&time=1970-01-01T00%3A01%3A00Z\\\"\n2024-12-10T12:10:26.339Z\\tinfo\\tVictoriaMetrics/app/vmalert/rule/alerting.go:212\\tDEBUG rule \\\"TestGroup\\\":\\\"TestRule\\\" (14686524233356632740) at 1970-01-01T00:01:00Z: query returned 0 samples (elapsed: 277µs)\n2024-12-10T12:10:26.339Z\\tinfo\\tVictoriaMetrics/app/vmalert/datasource/client.go:254\\tDEBUG datasource request: executing POST request with params \\\"http://127.0.0.1:8880/prometheus/api/v1/query?query=test_metric+%3E+0&step=300s&time=1970-01-01T00%3A02%3A00Z\\\"\n2024-12-10T12:10:26.340Z\\tinfo\\tVictoriaMetrics/app/vmalert/rule/alerting.go:212\\tDEBUG rule \\\"TestGroup\\\":\\\"TestRule\\\" (14686524233356632740) at 1970-01-01T00:02:00Z: query returned 1 samples (elapsed: 566.083µs)\n2024-12-10T12:10:26.340Z\\tinfo\\tVictoriaMetrics/app/vmalert/rule/alerting.go:212\\tDEBUG rule \\\"TestGroup\\\":\\\"TestRule\\\" (14686524233356632740) at 1970-01-01T00:02:00Z: alert 11669695145351808068 {alertgroup=\\\"TestGroup\\\",alertname=\\\"TestRule\\\"} created in state PENDING\n2024-12-10T12:10:26.343Z\\tinfo\\tVictoriaMetrics/app/vmalert/datasource/client.go:254\\tDEBUG datasource request: executing POST request with params \\\"http://127.0.0.1:8880/prometheus/api/v1/query?query=test_metric+%3E+0&step=300s&time=1970-01-01T00%3A03%3A00Z\\\"\n2024-12-10T12:10:26.344Z\\tinfo\\tVictoriaMetrics/app/vmalert/rule/alerting.go:212\\tDEBUG rule \\\"TestGroup\\\":\\\"TestRule\\\" (14686524233356632740) at 1970-01-01T00:03:00Z: query returned 1 samples (elapsed: 822.958µs)\n2024-12-10T12:10:26.344Z\\tinfo\\tVictoriaMetrics/app/vmalert/rule/alerting.go:212\\tDEBUG rule \\\"TestGroup\\\":\\\"TestRule\\\" (14686524233356632740) at 1970-01-01T00:03:00Z: alert 11669695145351808068 {alertgroup=\\\"TestGroup\\\",alertname=\\\"TestRule\\\"} PENDING => FIRING: 1m0s since becoming active at 1970-01-01 00:02:00 +0000 UTC\n```\n\n----------------------------------------\n\nTITLE: Rounding Values using round() in MetricsQL/PromQL\nDESCRIPTION: The `round(q, nearest)` transform function rounds each data point in the time series `q` to the nearest multiple specified by `nearest`. If `nearest` is omitted, values are rounded to the nearest integer. This function is supported by both MetricsQL and PromQL.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_114\n\nLANGUAGE: MetricsQL\nCODE:\n```\nround(q, nearest)\n```\n\n----------------------------------------\n\nTITLE: Using absent_over_time in MetricsQL - Markdown\nDESCRIPTION: Demonstrates how to use the absent_over_time rollup function in MetricsQL to detect the absence of raw samples over a specified lookbehind window d. Returns 1 if there are no samples in the window or an empty result otherwise. Functionality and usage context relevant for PromQL compliance.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n`absent_over_time(series_selector[d])`\n```\n\n----------------------------------------\n\nTITLE: Calculating Value Range Over Time in PromQL\nDESCRIPTION: The range_over_time function computes the difference between the maximum and minimum values over raw samples for a given time window. It's typically used with gauge metrics.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_47\n\nLANGUAGE: PromQL\nCODE:\n```\nrange_over_time(series_selector[d])\n```\n\n----------------------------------------\n\nTITLE: Dropping Metrics During Scrape in YAML\nDESCRIPTION: This YAML configuration shows how to drop all metrics obtained from a specific target that start with the 'foo_' prefix.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/relabeling.md#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nscrape_configs:\n- job_name: test\n  static_configs:\n  - targets: [host123]\n  metric_relabel_configs:\n  - if: '{__name__=~\"foo_.*\"}'\n    action: drop\n```\n\n----------------------------------------\n\nTITLE: Removing Labels from Scraped Metrics in YAML\nDESCRIPTION: This YAML configuration demonstrates how to drop labels with names starting with 'foo_' prefix from all metrics scraped from a specific target.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/relabeling.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nscrape_configs:\n- job_name: test\n  static_configs:\n  - targets: [host123]\n  metric_relabel_configs:\n  - action: labeldrop\n    regex: \"foo_.*\"\n```\n\n----------------------------------------\n\nTITLE: Rate Calculation with Metric Name Preservation\nDESCRIPTION: Rate calculation that preserves the original metric name using keep_metric_names modifier.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/keyConcepts/keyConcepts.md#2025-04-22_snippet_27\n\nLANGUAGE: metricsql\nCODE:\n```\nrate(node_network_receive_bytes_total) keep_metric_names\n```\n\n----------------------------------------\n\nTITLE: Filtering Metrics Using Graphite-compatible Syntax in MetricsQL\nDESCRIPTION: Example of using Graphite-compatible filters in MetricsQL queries with the new {__graphite__=\"pattern\"} syntax. This is equivalent to a regex pattern but optimized for Graphite-style dot notation.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/changelog/CHANGELOG_2021.md#2025-04-22_snippet_32\n\nLANGUAGE: markdown\nCODE:\n```\n{__graphite__=\"foo.*.bar\"}\n```\n\n----------------------------------------\n\nTITLE: Using the WithFailOnIOErrors Glob Option in Go\nDESCRIPTION: This function signature defines the `WithFailOnIOErrors` option for `Glob`, `GlobWalk`, or `FilepathGlob`. Passing this option causes the globbing operation to abort and return the specific I/O error encountered while traversing the filesystem, rather than ignoring it by default. Note that a pattern referencing a non-existent path is not considered an I/O error.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/bmatcuk/doublestar/v4/README.md#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nWithFailOnIOErrors()\n```\n\n----------------------------------------\n\nTITLE: Deleting Labels with label_del Function\nDESCRIPTION: The label_del function deletes the specified labels from all time series returned by the query.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_119\n\nLANGUAGE: metricsql\nCODE:\n```\nlabel_del(q, \"label1\", ..., \"labelN\")\n```\n\n----------------------------------------\n\nTITLE: Using tmax_over_time with VictoriaMetrics - Markdown - Syntax Reference\nDESCRIPTION: This snippet demonstrates tmax_over_time, a rollup function that returns the timestamp of the raw sample with the maximum value within window d for each selected series. Metric names are stripped by default. Parameters: series_selector, d (duration). Output: timestamp of max value per series.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_71\n\nLANGUAGE: Markdown\nCODE:\n```\n`tmax_over_time(series_selector[d])`\n```\n\n----------------------------------------\n\nTITLE: Hashing Data and Strings with xxhash in Go\nDESCRIPTION: Presents the public API functions and Digest type offered by the xxhash package for fast hashing in Go. No external dependencies are needed other than Go itself. The functions 'Sum64' and 'Sum64String' return the 64-bit hash of a byte slice or string, respectively. The 'Digest' type provides an incremental hashing interface via 'Write', 'WriteString', and 'Sum64' methods, which can be reused for hashing multiple values. Intended for high-performance non-cryptographic hashing tasks.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/klauspost/compress/zstd/internal/xxhash/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nfunc Sum64(b []byte) uint64\nfunc Sum64String(s string) uint64\ntype Digest struct{ ... }\n    func New() *Digest\n```\n\nLANGUAGE: Go\nCODE:\n```\nfunc (*Digest) Write([]byte) (int, error)\nfunc (*Digest) WriteString(string) (int, error)\nfunc (*Digest) Sum64() uint64\n```\n\n----------------------------------------\n\nTITLE: Updating Meter RegisterCallback Method Behavior in Go Metrics API\nDESCRIPTION: Modifies the `RegisterCallback` method on the `Meter` interface in `go.opentelemetry.io/otel/metric`. Changes include using the named `Callback` type, requiring the callback to return an error, passing an `Observer` parameter for recording observations, and accepting instruments as variadic arguments.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-22_snippet_30\n\nLANGUAGE: Go\nCODE:\n```\ngo.opentelemetry.io/otel/metric\n// Method: Meter.RegisterCallback(callback Callback, instruments ...instrument.Asynchronous) (Registration, error)\n// Callback Signature: func(context.Context, Observer) error\n// Parameter Type: Observer\n```\n\n----------------------------------------\n\nTITLE: Using tlast_over_time in VictoriaMetrics Syntax - plaintext\nDESCRIPTION: tlast_over_time is an alias for the timestamp function in VictoriaMetrics, giving the time of the last raw sample for the window. Works with a series_selector and window. Outputs a timestamp, metric names omitted unless a modifier is applied.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_61\n\nLANGUAGE: plaintext\nCODE:\n```\n`tlast_over_time(series_selector[d])`\n```\n\n----------------------------------------\n\nTITLE: Copying All Labels in MetricsQL Many-to-One Operations with Prefixing\nDESCRIPTION: Shows how to use `group_left(*)` in MetricsQL (feature from v1.92.0) to copy all labels from the 'one' side (`kube_namespace_labels`) in a many-to-one join operation (`* on(namespace)`). This example joins `kube_pod_info` with `kube_namespace_labels` on the `namespace` label, copies all labels from `kube_namespace_labels` to the result, and adds an `ns_` prefix to the copied label names (excluding the `namespace` label specified in `on()`).\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/changelog/CHANGELOG_2023.md#2025-04-22_snippet_12\n\nLANGUAGE: metricsql\nCODE:\n```\nkube_pod_info * on(namespace) group_left(*) prefix \"ns_\" kube_namespace_labels\n```\n\n----------------------------------------\n\nTITLE: Reducing Stored Series by Removing High-Cardinality Labels\nDESCRIPTION: This configuration reduces the number of stored time series by removing high-cardinality labels like 'path' and 'user' from HTTP request metrics, aggregating them every 30 seconds.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/stream-aggregation.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n- match: 'http_requests_total'\n  interval: 30s\n  without: [path, user]\n  outputs: [total]\n```\n\n----------------------------------------\n\nTITLE: Unpacking JSON Fields While Keeping Originals using LogSQL\nDESCRIPTION: This LogSQL query selects logs from the last 5 minutes (`_time:5m`), unpacks the `ip` and `host` fields from the JSON in the `foo` field, but uses the `keep_original_fields` option. This ensures that if `ip` or `host` fields already exist and are non-empty in the original log entry, their values are preserved instead of being overwritten by the unpacked values.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_152\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m | unpack_json from foo fields (ip, host) keep_original_fields\n```\n\n----------------------------------------\n\nTITLE: Checking VictoriaMetrics Pod Status in Kubernetes\nDESCRIPTION: This command lists all pods with 'victoria-metrics' in their name, showing the status of VictoriaMetrics services in the Kubernetes cluster.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/guides/k8s-ha-monitoring-via-vm-cluster/README.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get pods | grep victoria-metrics\n```\n\n----------------------------------------\n\nTITLE: Calculating Rate Rollups (Min/Max/Avg) in MetricsQL\nDESCRIPTION: Calculates the minimum, maximum, and average of per-second change rates between adjacent raw samples within a lookbehind window `d`. Results include `rollup=\\\"min\\\"`, `rollup=\\\"max\\\"`, and `rollup=\\\"avg\\\"` labels. An optional second argument (\\\"min\\\", \\\"max\\\", or \\\"avg\\\") selects one result and omits the label. Metric names are stripped unless `keep_metric_names` is used. Typically applied to counters.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_59\n\nLANGUAGE: metricsql\nCODE:\n```\nrollup_rate(series_selector[d])\n```\n\n----------------------------------------\n\nTITLE: Optimizing MetricsQL Binary Operations\nDESCRIPTION: Describes an optimization for MetricsQL binary operations like `expr1 op expr2`. If `expr1` returns an empty result and the operator `op` is not `or`, the execution of `expr2` is skipped as the final result will be empty according to PromQL matching rules.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/changelog/CHANGELOG_2022.md#2025-04-22_snippet_12\n\nLANGUAGE: metricsql\nCODE:\n```\nexpr1 op expr2\n```\n\nLANGUAGE: metricsql\nCODE:\n```\nop\n```\n\nLANGUAGE: metricsql\nCODE:\n```\nor\n```\n\n----------------------------------------\n\nTITLE: Configuring Grafana for OpenID Connect\nDESCRIPTION: Configures Grafana to use OpenID Connect for authentication. It involves enabling OAuth and setting up client ID and secret from the identity provider. This is required to forward JWT tokens to vmgateway.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/guides/grafana-vmgateway-openid-configuration/README.md#2025-04-22_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[auth.generic_oauth]\nenabled = true\nallow_sign_up = true\nname = keycloak\nclient_id = {CLIENT_ID_FROM_IDENTITY_PROVIDER}\nclient_secret = {SECRET_FROM_IDENTITY_PROVIDER}\nscopes = openid profile email\nauth_url = http://localhost:3001/realms/{KEYCLOAK_REALM}/protocol/openid-connect/auth\ntoken_url = http://localhost:3001/realms/{KEYCLOAK_REALM}/protocol/openid-connect/token\napi_url = http://localhost:3001/realms/{KEYCLOAK_REALM}/protocol/openid-connect/userinfo\n```\n\n----------------------------------------\n\nTITLE: Starting VictoriaLogs with TCP Syslog Ingestion\nDESCRIPTION: Launches VictoriaLogs to accept Syslog format logs on TCP port 514 for all network interfaces. This command may require root privileges or special capabilities for ports below 1024.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/data-ingestion/syslog.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n./victoria-logs -syslog.listenAddr.tcp=:514\n```\n\n----------------------------------------\n\nTITLE: Configuring vmselect In-Memory Buffer Size (Command-line)\nDESCRIPTION: Adds the `-search.inmemoryBufSizeBytes` command-line flag to `vmselect` in cluster mode. This flag configures the size of in-memory buffers used by `vmselect` while processing responses from `vmstorage`. A new metric `vm_tmp_blocks_inmemory_file_size_bytes` tracks the buffer size during requests.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/changelog/CHANGELOG_2024.md#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n-search.inmemoryBufSizeBytes N # Size in bytes\n```\n\nLANGUAGE: text\nCODE:\n```\n# New metric exposed by vmselect:\nvm_tmp_blocks_inmemory_file_size_bytes\n```\n\n----------------------------------------\n\nTITLE: Parsing MetricsQL Query in Go\nDESCRIPTION: This Go code snippet demonstrates using the metricsql package to parse a MetricsQL query string. The parsed query is converted into an expression represented as `*Expr` structs, which can be further processed. The snippet requires the `metricsql` package and handles potential parse errors in its implementation.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/VictoriaMetrics/metricsql/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\n    expr, err := metricsql.Parse(`sum(rate(foo{bar=\\\"baz\\\"}[5m])) by (job)`)\n    if err != nil {\n        // parse error\n    }\n    // Now expr contains parsed MetricsQL as `*Expr` structs.\n    // See Parse examples for more details.\n```\n\n----------------------------------------\n\nTITLE: Using Subqueries in LogsQL for VictoriaLogs\nDESCRIPTION: Complex LogsQL query demonstrating subquery usage to count unique user_ids across top 3 log streams with the most logs in the last hour.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/FAQ.md#2025-04-22_snippet_6\n\nLANGUAGE: logsql\nCODE:\n```\n_time:1h _stream_id:in(_time:1h | top 3 (_stream_id) | keep _stream_id) | count_uniq(user_id)\n```\n\n----------------------------------------\n\nTITLE: VictoriaMetrics Export API JSON Response Example - JSON\nDESCRIPTION: An example JSON line-formatted response from the /api/v1/export endpoint. Each line contains a 'metric' object with series name and tags, 'values' array, and 'timestamps' array. Returned after successfully querying metrics; typical output upon ingestion with the examples provided.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/README.md#2025-04-22_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\\\"metric\\\":{\\\"__name__\\\":\\\"measurement_field1\\\",\\\"tag1\\\":\\\"value1\\\",\\\"tag2\\\":\\\"value2\\\"},\\\"values\\\":[123],\\\"timestamps\\\":[1560272508147]}\\n{\\\"metric\\\":{\\\"__name__\\\":\\\"measurement_field2\\\",\\\"tag1\\\":\\\"value1\\\",\\\"tag2\\\":\\\"value2\\\"},\\\"values\\\":[1.23],\\\"timestamps\\\":[1560272508147]}\n```\n\n----------------------------------------\n\nTITLE: Exporting Data from VictoriaMetrics\nDESCRIPTION: This curl command shows how to export series matching a specific filter (location=\"klamath\") from VictoriaMetrics using an HTTP GET request.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/guides/migrate-from-influx/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncurl -G 'http://<victoriametrics-addr>:8428/api/v1/export' -d 'match={location=\"klamath\"}'\n```\n\n----------------------------------------\n\nTITLE: Preserving Original Field Values with extract_regexp Pipe in LogSQL\nDESCRIPTION: This snippet demonstrates how to use the keep_original_fields option to preserve original non-empty values of fields mentioned in the pattern instead of overwriting them with extracted values.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_87\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m | extract_regexp 'ip=(?P<ip>([0-9]+[.]){3}[0-9]+)' keep_original_fields\n```\n\n----------------------------------------\n\nTITLE: Querying High Post-Relabeling Sample Counts with MetricsQL\nDESCRIPTION: This MetricsQL query identifies targets with a high number of samples remaining after metric relabeling rules (`metric_relabel_configs`) have been applied. It selects time series where the `scrape_samples_post_metric_relabeling` metric exceeds 10,000.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmagent.md#2025-04-22_snippet_19\n\nLANGUAGE: metricsql\nCODE:\n```\nscrape_samples_post_metric_relabeling > 10000\n```\n\n----------------------------------------\n\nTITLE: Preserving Metric Names in MetricsQL Binary Operations\nDESCRIPTION: Illustrates the use of the `keep_metric_names` modifier in MetricsQL, added in v1.92.0. This modifier ensures that the original metric names (e.g., `foo`, `bar` matching the regex `foo|bar`) are retained in the result of the binary operation (division by 10 in this case), instead of the metric name being dropped.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/changelog/CHANGELOG_2023.md#2025-04-22_snippet_11\n\nLANGUAGE: metricsql\nCODE:\n```\n({__name__=~\"foo|bar\"} / 10) keep_metric_names\n```\n\n----------------------------------------\n\nTITLE: Manually Listing Backend IPs/Hostnames for Load Balancing (YAML)\nDESCRIPTION: This YAML snippet shows a method to ensure load balancing across multiple backend instances by explicitly listing each instance's unique hostname or IP address in the `url_prefix` list. While effective, this approach requires manual updates to the configuration file if the backend instances change.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmauth.md#2025-04-22_snippet_26\n\nLANGUAGE: yaml\nCODE:\n```\nunauthorized_user:\n  url_prefix:\n  - http://vmselect-1:8481/select/0/prometheus/\n  - http://vmselect-2:8481/select/0/prometheus/\n  - http://vmselect-3:8481/select/0/prometheus/\n```\n\n----------------------------------------\n\nTITLE: Using sort_by_label function in PromQL\nDESCRIPTION: Function that sorts series in ascending order by the given set of labels. It arranges the result set based on label values in alphabetical order.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_135\n\nLANGUAGE: promql\nCODE:\n```\nsort_by_label(q, \"label1\", ... \"labelN\")\n```\n\n----------------------------------------\n\nTITLE: Parsing and Comparing SemVer Versions in Go\nDESCRIPTION: Illustrates how to parse version strings into `version.Version` objects using `version.NewVersion`. It then shows an example of comparing two versions using the `LessThan` method. The `go-version` library also provides `GreaterThan`, `Equal`, and a general `Compare` method for flexible comparisons based on SemVer rules.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/hashicorp/go-version/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nv1, err := version.NewVersion(\"1.2\")\nv2, err := version.NewVersion(\"1.5+metadata\")\n\n// Comparison example. There is also GreaterThan, Equal, and just\n// a simple Compare that returns an int allowing easy >=, <=, etc.\nif v1.LessThan(v2) {\n    fmt.Printf(\"%s is less than %s\", v1, v2)\n}\n```\n\n----------------------------------------\n\nTITLE: Sending OpenTSDB Data to VictoriaMetrics via HTTP API (Single-node, Shell)\nDESCRIPTION: This shell command submits JSON-encoded metrics via the OpenTSDB HTTP API using curl to a locally running VictoriaMetrics instance at http://localhost:4242/api/put. Dependencies include VictoriaMetrics with the OpenTSDB HTTP receiver enabled (-opentsdbHTTPListenAddr) and curl available on the client system. The input is a JSON array of metric-value objects; the output is handled by the server per the OpenTSDB API specification.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/url-examples.md#2025-04-22_snippet_22\n\nLANGUAGE: sh\nCODE:\n```\ncurl -H 'Content-Type: application/json' -d '[{\"metric\":\"foo\",\"value\":45.34},{\"metric\":\"bar\",\"value\":43}]' http://localhost:4242/api/put\n```\n\n----------------------------------------\n\nTITLE: Using bottomk_avg aggregate function in PromQL\nDESCRIPTION: Aggregate function that returns up to k time series with the smallest averages. Can optionally include a sum of remaining series with a custom label.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_142\n\nLANGUAGE: promql\nCODE:\n```\nbottomk_avg(k, q, \"other_label=other_value\")\n```\n\n----------------------------------------\n\nTITLE: Getting Query Step Interval in MetricsQL\nDESCRIPTION: A transform function that returns the interval (step) in seconds between data points in the query result. This value corresponds to the `step` argument passed to the `/api/v1/query_range` endpoint. See also `start` and `end`.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_133\n\nLANGUAGE: metricsql\nCODE:\n```\nstep()\n```\n\n----------------------------------------\n\nTITLE: Specifying Empty Labels in vmalert-tool Configuration (YAML)\nDESCRIPTION: Demonstrates the YAML syntax `labels: '{}'` for specifying an empty set of labels within vmalert-tool rule configuration files. This feature, added in v1.105.0, allows for specifying empty labels similarly to promtool, enhancing compatibility between the tools.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/changelog/CHANGELOG_2024.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nlabels: '{}'\n```\n\n----------------------------------------\n\nTITLE: Memory Usage Threshold Filter\nDESCRIPTION: Comparison operation to filter processes with memory usage exceeding 100MB.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/keyConcepts/keyConcepts.md#2025-04-22_snippet_23\n\nLANGUAGE: metricsql\nCODE:\n```\nprocess_resident_memory_bytes > 100*1024*1024\n```\n\n----------------------------------------\n\nTITLE: Configuring Holt-Winters Model Using statsmodels in VictoriaMetrics (YAML)\nDESCRIPTION: This snippet configures the Holt-Winters Exponential Smoothing model in VictoriaMetrics via YAML, leveraging the statsmodels library for time-series forecasting and anomaly detection. It specifies key parameters such as 'class', 'seasonality', 'frequency', and inner 'args' for the underlying statsmodels implementation (e.g., 'seasonal', 'initialization_method'). Outputs can include prediction intervals and anomaly scores. Dependencies include a compatible VictoriaMetrics deployment and statsmodels (Python) at runtime, with required inputs being time-series data sampled at the specified frequency. Output is a configured Holt-Winters model per the YAML definition.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/anomaly-detection/components/models.md#2025-04-22_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\nmodels:\n  your_desired_alias_for_a_model:\n    class: \"holtwinters\"  # or 'model.holtwinters.HoltWinters' until v1.13.0\n    seasonality: '1d'\n    frequency: '1h'\n    # Inner model args (key-value pairs) accepted by statsmodels.tsa.holtwinters.ExponentialSmoothing\n    args:\n      seasonal: 'add'\n      initialization_method: 'estimated'\n    # Common arguments for built-in model, if not set, default to\n    # See https://docs.victoriametrics.com/anomaly-detection/components/models/#common-args\n    #\n    # provide_series: ['anomaly_score', 'yhat', 'yhat_lower', 'yhat_upper']\n    # schedulers: [all scheduler aliases defined in `scheduler` section]\n    # queries: [all query aliases defined in `reader.queries` section]\n    # detection_direction: 'both'  # meaning both drops and spikes will be captured\n    # min_dev_from_expected: 0.0  # meaning, no minimal threshold is applied to prevent smaller anomalies\n    # scale: [1.0, 1.0]  # if needed, prediction intervals' width can be increased (>1) or narrowed (<1)\n    # clip_predictions: False  # if data_range for respective `queries` is set in reader, `yhat.*` columns will be clipped\n    # anomaly_score_outside_data_range: 1.01  # auto anomaly score (1.01) if `y` (real value) is outside of data_range, if set\n\n```\n\n----------------------------------------\n\nTITLE: Starting VictoriaMetrics Single Node with Self-Scrape\nDESCRIPTION: Shell command to start a single VictoriaMetrics node with self-scraping enabled at 10-second intervals.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmgateway.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n# single\n# start node\n./bin/victoria-metrics --selfScrapeInterval=10s\n```\n\n----------------------------------------\n\nTITLE: Searching for a Phrase in a Specific Field - VictoriaLogs LogSQL\nDESCRIPTION: This filter finds log entries containing the phrase 'cannot open file' in the 'event.original' field using quoted syntax. Requires VictoriaLogs index on the custom field. Useful to search for multi-word messages in targeted fields.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_43\n\nLANGUAGE: logsql\nCODE:\n```\nevent.original:\"cannot open file\"\n```\n\n----------------------------------------\n\nTITLE: Limiting Facet Results in LogSQL\nDESCRIPTION: This snippet demonstrates how to limit the number of most frequently seen values returned per field when using the facets pipe.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_91\n\nLANGUAGE: logsql\nCODE:\n```\n_time:1h error | facets 3\n```\n\n----------------------------------------\n\nTITLE: Using vector Function in MetricsQL\nDESCRIPTION: The vector function returns its input unchanged - it does nothing in MetricsQL but is included for PromQL compatibility.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_114\n\nLANGUAGE: metricsql\nCODE:\n```\nvector(q)\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry v1.2.0\nDESCRIPTION: Version 1.2.0 changelog entry recording dependency updates.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/aws/aws-sdk-go-v2/feature/ec2/imds/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n# v1.2.0 (2021-06-25)\n\n* **Feature**: Updated `github.com/aws/smithy-go` to latest version\n* **Dependency Update**: Updated to the latest SDK module versions\n```\n\n----------------------------------------\n\nTITLE: Configuring Logger for Verbose Output in Go\nDESCRIPTION: Configure the logger to print verbose (V(1)) or debug (V(5)) logs in the OpenTelemetry Go SDK.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-22_snippet_42\n\nLANGUAGE: Go\nCODE:\n```\n// To enable verbose logs\nlogger.SetLevel(1)\n\n// To enable debug logs\nlogger.SetLevel(5)\n```\n\n----------------------------------------\n\nTITLE: Debug Configuration for VictoriaLogs\nDESCRIPTION: Configuration with debug parameter enabled to verify log fields and stream fields setup during initial configuration.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/data-ingestion/Filebeat.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\noutput.elasticsearch:\n  hosts: [\"http://localhost:9428/insert/elasticsearch/\"]\n  parameters:\n    _msg_field: \"message\"\n    _time_field: \"@timestamp\"\n    _stream_fields: \"host.hostname,log.file.path\"\n    debug: \"1\"\n```\n\n----------------------------------------\n\nTITLE: Function Syntax: holt_winters\nDESCRIPTION: Function signature for Holt-Winters double exponential smoothing calculation\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_36\n\nLANGUAGE: promql\nCODE:\n```\nholt_winters(series_selector[d], sf, tf)\n```\n\n----------------------------------------\n\nTITLE: Calculating Rate with Explicit Interval (Grafana Style) in PromQL/MetricsQL\nDESCRIPTION: Shows a `rate()` query typical in Grafana dashboards, explicitly using the `$__interval` variable for the lookbehind window. This contrasts with MetricsQL's ability to automatically determine the window.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_2\n\nLANGUAGE: metricsql\nCODE:\n```\nrate(node_network_receive_bytes_total[$__interval])\n```\n\n----------------------------------------\n\nTITLE: Relabeling Configuration in YAML\nDESCRIPTION: This YAML snippet demonstrates how to configure output relabeling for stream aggregation in VictoriaMetrics. It removes suffixes from metric names. Dependencies include a configured stream aggregation setup. The main parameter is 'output_relabel_configs', which specifies rules for relabeling output metrics. Inputs are metrics with potential suffixes, and expected outputs are metrics with suffixes removed.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/stream-aggregation.md#2025-04-22_snippet_35\n\nLANGUAGE: yaml\nCODE:\n```\n- interval: 1m\n  outputs: [sum_samples]\n  output_relabel_configs:\n  - source_labels: [__name__]\n    target_label: __name__\n    regex: \"(.+):.+\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Prometheus Scrape Targets for Anomaly Detection Stack\nDESCRIPTION: YAML configuration for vmagent that defines scrape targets for the complete anomaly detection stack, including vmanomaly, VictoriaMetrics database, vmalert, node-exporter, and other components.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/anomaly-detection/guides/guide-vmanomaly-vmalert/README.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nglobal:\n  scrape_interval: 10s\n\nscrape_configs:\n  - job_name: 'vmagent'\n    static_configs:\n      - targets: ['vmagent:8429']\n  - job_name: 'vmalert'\n    static_configs:\n      - targets: ['vmalert:8880']\n  - job_name: 'victoriametrics'\n    static_configs:\n      - targets: ['victoriametrics:8428']\n  - job_name: 'node-exporter'\n    static_configs:\n      - targets: ['node-exporter:9100']\n  - job_name: 'vmanomaly'\n    static_configs:\n      - targets: [ 'vmanomaly:8490' ]\n```\n\n----------------------------------------\n\nTITLE: Querying Hits Stats with Time Range in Bash\nDESCRIPTION: This command retrieves the number of log entries containing 'error' for the last 3 hours, grouped by 1-hour intervals.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/querying/README.md#2025-04-22_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\ncurl http://localhost:9428/select/logsql/hits -d 'query=error' -d 'start=3h' -d 'step=1h'\n```\n\n----------------------------------------\n\nTITLE: Creating Regular Backup with Server-Side Copy in Shell\nDESCRIPTION: This command creates a new backup while utilizing server-side copy from an existing backup in the same GCS bucket. It accelerates the backup process by copying shared data directly on the server.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmbackup.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n./vmbackup -storageDataPath=</path/to/victoria-metrics-data> -snapshot.createURL=http://localhost:8428/snapshot/create -dst=gs://<bucket>/<path/to/new/backup> -origin=gs://<bucket>/<path/to/existing/backup>\n```\n\n----------------------------------------\n\nTITLE: Computing Multiple Quantiles Over Time in PromQL\nDESCRIPTION: The quantiles_over_time function calculates multiple quantiles over raw samples on a given lookbehind window for each time series. It returns individual series for each quantile with a specific label.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_33\n\nLANGUAGE: promql\nCODE:\n```\nquantiles_over_time(\"phiLabel\", phi1, ..., phiN, series_selector[d])\n```\n\n----------------------------------------\n\nTITLE: Ejecting Create React App Configuration\nDESCRIPTION: Removes the single build dependency and copies all configuration files and dependencies directly into the project for full control. This is a one-way operation that cannot be reversed.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run eject\n```\n\n----------------------------------------\n\nTITLE: Generating Pseudo-Random Numbers in PromQL\nDESCRIPTION: The rand() function returns pseudo-random numbers on the range [0...1] with even distribution. An optional seed can be provided for the pseudo-random number generator.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_98\n\nLANGUAGE: promql\nCODE:\n```\nrand(seed)\n```\n\n----------------------------------------\n\nTITLE: Dropping Common Labels in MetricsQL\nDESCRIPTION: A label manipulation function that removes label pairs (`label=\"value\"`) that are identical across all time series returned by the input queries `q1` through `qN`. Implicitly applies `default_rollup()` if inputs are series selectors.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_141\n\nLANGUAGE: metricsql\nCODE:\n```\ndrop_common_labels(q1, ...., qN)\n```\n\n----------------------------------------\n\nTITLE: Starting VMGateway with Rate Limiting in Cluster Mode\nDESCRIPTION: Shell command to start vmgateway with rate limiting and authentication enabled in cluster mode, connecting to appropriate vminsert and vmselect endpoints.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmgateway.md#2025-04-22_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\n./bin/vmgateway -eula -enable.rateLimit -ratelimit.config limit.yaml -datasource.url http://localhost:8428 -enable.auth -clusterMode -write.url=http://localhost:8480 --read.url=http://localhost:8481\n```\n\n----------------------------------------\n\nTITLE: Configuring VictoriaLogs with Custom Timezone for Syslog Parsing\nDESCRIPTION: Starts VictoriaLogs with TCP Syslog ingestion on port 514 and sets the timezone for parsing RFC3164 timestamps to Europe/Berlin. This allows for accurate timestamp interpretation in different geographical locations.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/data-ingestion/syslog.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n./victoria-logs -syslog.listenAddr.tcp=:514 -syslog.timezone='Europe/Berlin'\n```\n\n----------------------------------------\n\nTITLE: Computing Log Base 2 in PromQL\nDESCRIPTION: The `log2(q)` function calculates the logarithm base 2 of values in time series `q`. Its capacity to provide consistent base 2 insights further integrates logical value operations within PromQL datasets for efficient binary scaling.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_90\n\nLANGUAGE: PromQL\nCODE:\n```\n`log2(q)`\n```\n\n----------------------------------------\n\nTITLE: HTTP Service Discovery Response Format in JSON\nDESCRIPTION: Example JSON response format required for HTTP-based service discovery. Shows the structure for defining targets and their associated labels.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/sd_configs.md#2025-04-22_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"targets\": [ \"<host>\", ... ],\n    \"labels\": {\n      \"<labelname>\": \"<labelvalue>\",\n      ...\n    }\n  },\n  ...\n]\n```\n\n----------------------------------------\n\nTITLE: Thanos Remote Read Proxy Logs\nDESCRIPTION: Log output from the thanos-remote-read proxy showing time range requests for data retrieval. The logs show the proxy handling requests with specific time ranges and matchers.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmctl.md#2025-04-22_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\nts=2022-10-19T15:05:04.193916Z caller=main.go:278 level=info traceID=00000000000000000000000000000000 msg=\"thanos request\" request=\"min_time:1666180800000 max_time:1666184399999 matchers:<type:RE value:\\\".*\\\" > aggregates:RAW \"\nts=2022-10-19T15:05:04.468852Z caller=main.go:278 level=info traceID=00000000000000000000000000000000 msg=\"thanos request\" request=\"min_time:1666184400000 max_time:1666187999999 matchers:<type:RE value:\\\".*\\\" > aggregates:RAW \"\nts=2022-10-19T15:05:04.553914Z caller=main.go:278 level=info traceID=00000000000000000000000000000000 msg=\"thanos request\" request=\"min_time:1666188000000 max_time:1666191364863 matchers:<type:RE value:\\\".*\\\" > aggregates:RAW \"\n```\n\n----------------------------------------\n\nTITLE: Calculating Logarithm Base 2 - PromQL - PromQL\nDESCRIPTION: log2(q) returns log base 2 of each point from the input time series q. Metric names are stripped unless overridden. Supported in PromQL. Requires numeric input, no external dependencies.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_113\n\nLANGUAGE: PromQL\nCODE:\n```\n`log2(q)`\n```\n\n----------------------------------------\n\nTITLE: Configuring Prediction Clipping in VictoriaMetrics Anomaly Detection\nDESCRIPTION: This YAML snippet illustrates how to use the clip_predictions parameter to align model predictions with defined data ranges, ensuring consistency in visualizations and expected data bounds.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/anomaly-detection/components/models.md#2025-04-22_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nreader:\n  queries:\n    q1_clipped: \n      expr: 'q1_metricsql'\n      data_range: [0, \"inf\"]\n    q2_no_clip:\n      expr: 'q2_metricsql'\nmodels:\n  zscore_mixed:\n    class: 'zscore'\n    z_threshold: 3\n    clip_predictions: True\n    queries: ['q1_clipped', 'q2_no_clip']\n  zscore_no_clip:\n    class: 'zscore'\n    z_threshold: 3\n    queries: ['q1_clipped', 'q2_no_clip']\n```\n\n----------------------------------------\n\nTITLE: Share LE Over Time Function in PromQL\nDESCRIPTION: Returns share of raw samples less than or equal to given threshold over a lookbehind window. Useful for SLI/SLO calculations.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_56\n\nLANGUAGE: promql\nCODE:\n```\nshare_le_over_time(series_selector[d], le)\n```\n\n----------------------------------------\n\nTITLE: Keeping Scrape Targets by Label Selector (action: keep) - YAML\nDESCRIPTION: Filters discovered pod targets to only those whose names start with 'foo'. Uses an 'if' PromQL selector and action: keep in relabel_configs, so only matching targets are kept. Key fields: if, action. Relies on correct label discovery from Kubernetes.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/relabeling.md#2025-04-22_snippet_20\n\nLANGUAGE: YAML\nCODE:\n```\nscrape_configs:\n- job_name: foo_pods\n  kubernetes_sd_configs:\n  - role: pod\n  relabel_configs:\n  - if: '{__meta_kubernetes_pod_name=~\"foo.*\"}'\n    action: keep\n```\n\n----------------------------------------\n\nTITLE: Old Configuration Format for VmReader\nDESCRIPTION: The old configuration snippet for setting up the VmReader in VictoriaMetrics prior to version 1.13.0. It demonstrates using a simple query structure before the introduction of per-query parameters.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/anomaly-detection/components/reader.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# other config sections ...\nreader:\n  class: 'vm'\n  datasource_url: 'http://localhost:8428'  # source victoriametrics/prometheus\n  sampling_period: \"10s\"  # set it <= min(infer_every) in schedulers section\n  queries:\n    # old format {query_alias: query_expr}, prior to 1.13, will be converted to a new format automatically\n    vmb: 'avg(vm_blocks)'\n```\n\n----------------------------------------\n\nTITLE: Calculating Delta Rollups (Min/Max/Avg) in MetricsQL\nDESCRIPTION: Calculates the minimum, maximum, and average of the differences between adjacent raw samples within a specified lookbehind window `d` for each selected time series. Results include `rollup=\\\"min\\\"`, `rollup=\\\"max\\\"`, and `rollup=\\\"avg\\\"` labels. An optional second argument (\\\"min\\\", \\\"max\\\", or \\\"avg\\\") selects one result and omits the label. Metric names are stripped unless `keep_metric_names` is used.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_56\n\nLANGUAGE: metricsql\nCODE:\n```\nrollup_delta(series_selector[d])\n```\n\n----------------------------------------\n\nTITLE: Expected Output after VMAgent Creation (text)\nDESCRIPTION: This text block shows the expected output after successfully applying the VMAgent CRD. It confirms that the `vmagent` resource named 'example-vmagent' has been created.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/guides/getting-started-with-vm-operator/README.md#2025-04-22_snippet_13\n\nLANGUAGE: text\nCODE:\n```\nvmagent.operator.victoriametrics.com/example-vmagent created\n```\n\n----------------------------------------\n\nTITLE: Example: Aggregating Graphite Metrics with label_graphite_group in MetricsQL\nDESCRIPTION: Demonstrates using `label_graphite_group` within a `sum by (__name__)` aggregation. This query calculates per-application memory usage by grouping metrics matching the pattern `app*.host*.memory_usage` based on the first component (`groupNum` 0, i.e., the app name).\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_145\n\nLANGUAGE: metricsql\nCODE:\n```\nsum by (__name__) (\n    label_graphite_group({__graphite__=\"app*.host*.memory_usage\"}, 0)\n)\n```\n\n----------------------------------------\n\nTITLE: Expected Output for VM Operator Pod Status Check (sh)\nDESCRIPTION: This text block displays the expected output when checking the VM Operator pod status. It shows the pod name, readiness status (e.g., 1/1), running status, restart count, and age, confirming the operator pod is running.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/guides/getting-started-with-vm-operator/README.md#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nNAME                                                    READY   STATUS    RESTARTS   AGE\nvmoperator-victoria-metrics-operator-67cff44cd6-s47n6   1/1     Running   0          77s\n```\n\n----------------------------------------\n\nTITLE: Computing Multiple Quantiles Over Time in PromQL\nDESCRIPTION: The quantiles_over_time function calculates multiple quantiles over raw samples for a specified time window. It returns individual series for each quantile with a custom label.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_46\n\nLANGUAGE: PromQL\nCODE:\n```\nquantiles_over_time(\"phiLabel\", phi1, ..., phiN, series_selector[d])\n```\n\n----------------------------------------\n\nTITLE: Filtering Logs by Multiple Stream IDs - VictoriaLogs LogSQL\nDESCRIPTION: This snippet applies the 'in(...)' operator to filter logs from multiple stream IDs in one query, improving efficiency when many stream IDs must be included. Prerequisites include a VictoriaLogs backend. The input is a comma-separated list of stream IDs; returned logs match any of them. This technique enhances bulk querying.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_35\n\nLANGUAGE: logsql\nCODE:\n```\n_stream_id:in(0000007b000001c850d9950ea6196b1a4812081265faa1c7, 1230007b456701c850d9950ea6196b1a4812081265fff2a9)\n```\n\n----------------------------------------\n\nTITLE: Disabling JSON Message Parsing in Promtail Configuration\nDESCRIPTION: This configuration disables automatic JSON parsing of log messages in VictoriaLogs by adding a query parameter to the ingestion URL.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/data-ingestion/Promtail.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nclients:\n  - url: \"http://localhost:9428/insert/loki/api/v1/push?disable_message_parsing=1\"\n```\n\n----------------------------------------\n\nTITLE: Compatibility Testing Matrix for OpenTelemetry Go SDK\nDESCRIPTION: Table showing the compatibility testing suite configurations across different operating systems, Go versions, and architectures used in the CI system.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-22_snippet_53\n\nLANGUAGE: Markdown\nCODE:\n```\n| OS      | Go Version | Architecture |\n| ------- | ---------- | ------------ |\n| Ubuntu  | 1.15       | amd64        |\n| Ubuntu  | 1.14       | amd64        |\n| Ubuntu  | 1.15       | 386          |\n| Ubuntu  | 1.14       | 386          |\n| MacOS   | 1.15       | amd64        |\n| MacOS   | 1.14       | amd64        |\n| Windows | 1.15       | amd64        |\n| Windows | 1.14       | amd64        |\n| Windows | 1.15       | 386          |\n| Windows | 1.14       | 386          |\n```\n\n----------------------------------------\n\nTITLE: Auto-converted Metric Selector - MetricsQL\nDESCRIPTION: Example showing how a basic metric selector is automatically converted to use default_rollup function.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/MetricsQL.md#2025-04-22_snippet_11\n\nLANGUAGE: metricsql\nCODE:\n```\nfoo{bar=\"baz\"}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Timestamp of Minimum Value in VictoriaMetrics\nDESCRIPTION: The tmin_over_time function returns the timestamp in seconds with millisecond precision for the raw sample with the minimum value within a specified time window for each time series.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/MetricsQL.md#2025-04-22_snippet_75\n\nLANGUAGE: metricsql\nCODE:\n```\ntmin_over_time(series_selector[d])\n```\n\n----------------------------------------\n\nTITLE: Installing vmagent with Helm on Kubernetes\nDESCRIPTION: This YAML configuration is used to install vmagent on a Kubernetes cluster via Helm. It sets up the configuration for vmagent to scrape and push metrics to VictoriaMetrics. Dependencies include the file 'guide-vmcluster-vmagent-values.yaml'.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/guides/k8s-ha-monitoring-via-vm-cluster/README.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nhelm install vmagent vm/victoria-metrics-agent -f https://docs.victoriametrics.com/guides/examples/guide-vmcluster-vmagent-values.yaml\n```\n\nLANGUAGE: yaml\nCODE:\n```\nremoteWrite:\n   - url: http://vmcluster-victoria-metrics-cluster-vminsert.default.svc.cluster.local:8480/insert/0/prometheus/\n   \nscrape_configs:\n    - job_name: vmagent\n      static_configs:\n        - targets: [\"localhost:8429\"]\n    - job_name: \"kubernetes-apiservers\"\n      kubernetes_sd_configs:\n        - role: endpoints\n      scheme: https\n      tls_config:\n        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt\n        insecure_skip_verify: true\n      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token\n      relabel_configs:\n        - source_labels:\n            [\n              __meta_kubernetes_namespace,\n              __meta_kubernetes_service_name,\n              __meta_kubernetes_endpoint_port_name,\n            ]\n          action: keep\n          regex: default;kubernetes;https\n    - job_name: \"kubernetes-nodes\"\n      scheme: https\n      tls_config:\n        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt\n        insecure_skip_verify: true\n      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token\n      kubernetes_sd_configs:\n        - role: node\n      relabel_configs:\n        - action: labelmap\n          regex: __meta_kubernetes_node_label_(.+)\n        - target_label: __address__\n          replacement: kubernetes.default.svc:443\n        - source_labels: [__meta_kubernetes_node_name]\n          regex: (.+)\n          target_label: __metrics_path__\n          replacement: /api/v1/nodes/$1/proxy/metrics\n    - job_name: \"kubernetes-nodes-cadvisor\"\n      scheme: https\n      tls_config:\n        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt\n        insecure_skip_verify: true\n      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token\n      kubernetes_sd_configs:\n        - role: node\n      relabel_configs:\n        - action: labelmap\n          regex: __meta_kubernetes_node_label_(.+)\n        - target_label: __address__\n          replacement: kubernetes.default.svc:443\n        - source_labels: [__meta_kubernetes_node_name]\n          regex: (.+)\n          target_label: __metrics_path__\n          replacement: /api/v1/nodes/$1/proxy/metrics/cadvisor\n      metric_relabel_configs:\n        - action: replace\n          source_labels: [pod]\n          regex: '(.+)'\n          target_label: pod_name\n          replacement: '${1}'\n        - action: replace\n          source_labels: [container]\n          regex: '(.+)'\n          target_label: container_name\n          replacement: '${1}'\n        - action: replace\n          target_label: name\n          replacement: k8s_stub\n        - action: replace\n          source_labels: [id]\n          regex: '^/system\\.slice/(.+)\\.service$'\n          target_label: systemd_service_name\n          replacement: '${1}'\n```\n\n----------------------------------------\n\nTITLE: Basic HTTP Output Configuration for Fluentbit to VictoriaLogs\nDESCRIPTION: Basic Fluentbit output configuration that sends collected logs to VictoriaLogs over HTTP. The configuration specifies host, port, format settings, and query parameters to properly map log fields in VictoriaLogs.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/data-ingestion/Fluentbit.md#2025-04-22_snippet_0\n\nLANGUAGE: fluentbit\nCODE:\n```\n[Output]\n     Name http\n     Match *\n     host localhost\n     port 9428\n     uri /insert/jsonline?_stream_fields=stream&_msg_field=log&_time_field=date\n     format json_lines\n     json_date_format iso8601\n```\n\n----------------------------------------\n\nTITLE: Triggering Forced Merge in VictoriaMetrics Cluster using Shell\nDESCRIPTION: Sends a POST request using `curl` to the `/internal/force_merge` endpoint on a `vmstorage` node. This initiates a background merge process which can help free up disk space occupied by deleted time series, especially for older data partitions.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/guides/guide-delete-or-replace-metrics/README.md#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncurl -v -X POST http://vmstorage:8482/internal/force_merge\n```\n\n----------------------------------------\n\nTITLE: Searching with Quoted Field Name Containing Special Characters - VictoriaLogs LogSQL\nDESCRIPTION: This snippet demonstrates how to query a field with a special character (colon) in the name ('some:message') for the phrase 'cannot open file'. Both field and value are quoted for proper syntax parsing. Applies to schemas with complex field naming conventions.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_45\n\nLANGUAGE: logsql\nCODE:\n```\n\"some:message\":\"cannot open file\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Storage Cache Size Command Line Flags\nDESCRIPTION: Command line flags for tuning the size of various in-memory caches in VictoriaMetrics storage, including TSID cache, index data blocks cache, and index blocks cache.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/changelog/CHANGELOG_2022.md#2025-04-22_snippet_27\n\nLANGUAGE: bash\nCODE:\n```\n-storage.cacheSizeStorageTSID\n-storage.cacheSizeIndexDBDataBlocks\n-storage.cacheSizeIndexDBIndexBlocks\n```\n\n----------------------------------------\n\nTITLE: Setting Variable Value with Type Checking using reflect2 in Go\nDESCRIPTION: Illustrates how to modify the value of a variable using the `reflect2` package's type-safe `Set` method. It first obtains the type using `reflect2.TypeOf` and then calls `Set` with pointers to the target variable (`&i`) and the new value (`&j`). This operation performs runtime type checking, ensuring type compatibility.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/modern-go/reflect2/README.md#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nvalType := reflect2.TypeOf(1)\ni := 1\nj := 10\nvalType.Set(&i, &j)\n// i will be 10\n```\n\n----------------------------------------\n\nTITLE: Simplified Grouped Stats Calculation in LogsQL\nDESCRIPTION: This query is equivalent to the previous one, demonstrating a simplified syntax for grouped stats calculation.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_139\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m | stats (host, path) count() logs_total, count_uniq(ip) ips_total\n```\n\n----------------------------------------\n\nTITLE: Handling Changes in Target Groups in Go\nDESCRIPTION: This snippet shows how to handle changes in target groups within a service discovery mechanism. It focuses on updating the channel with the changed targets when a target goes offline or all targets in a group become unavailable. The snippet emphasizes the necessity of providing unique group sources across updates.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/prometheus/prometheus/discovery/README.md#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\n&targetgroup.Group{\n\tTargets: []model.LabelSet{\n\t\t{\n\t\t\t\"__instance__\": \"10.11.122.11:6001\",\n\t\t\t\"hostname\":     \"demo-postgres-1\",\n\t\t\t\"test\":         \"simple-test\",\n\t\t},\n\t},\n\tLabels: model.LabelSet{\n\t\t\"job\": \"postgres\",\n\t},\n\t\"Source\": \"file2\",\n}\n```\n\nLANGUAGE: Go\nCODE:\n```\n&targetgroup.Group{\n\tTargets:  nil,\n\t\"Source\": \"file2\",\n}\n```\n\n----------------------------------------\n\nTITLE: Starting VictoriaLogs with Custom Retention Period\nDESCRIPTION: Command to start VictoriaLogs with a custom retention period of 8 weeks. This example demonstrates how to use the -retentionPeriod flag to set a specific data retention duration.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n/path/to/victoria-logs -retentionPeriod=8w\n```\n\n----------------------------------------\n\nTITLE: Using Extra Label Filters in VictoriaMetrics Queries\nDESCRIPTION: Example of adding additional label filters to queries via the extra_label query parameter in the HTTP API. This allows applying tenant filtering or other constraints to queries.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/changelog/CHANGELOG_2021.md#2025-04-22_snippet_33\n\nLANGUAGE: markdown\nCODE:\n```\n/api/v1/query_range?extra_label=tenant_id=123&query=<query>\n```\n\n----------------------------------------\n\nTITLE: Configuring Rolling Quantile Model in VictoriaMetrics\nDESCRIPTION: YAML configuration for the Rolling Quantile model, designed for data with short evolving patterns. The model adapts to changes over a rolling window and allows configuration of quantile value and window size.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/anomaly-detection/components/models.md#2025-04-22_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\nmodels:\n  your_desired_alias_for_a_model:\n    class: \"rolling_quantile\" # or 'model.rolling_quantile.RollingQuantileModel' until v1.13.0\n    quantile: 0.9\n    window_steps: 96\n    # Common arguments for built-in model, if not set, default to\n    # See https://docs.victoriametrics.com/anomaly-detection/components/models/#common-args\n    #\n    # provide_series: ['anomaly_score', 'yhat', 'yhat_lower', 'yhat_upper']\n    # schedulers: [all scheduler aliases defined in `scheduler` section]\n    # queries: [all query aliases defined in `reader.queries` section]\n    # detection_direction: 'both'  # meaning both drops and spikes will be captured\n    # min_dev_from_expected: 0.0  # meaning, no minimal threshold is applied to prevent smaller anomalies\n    # scale: [1.0, 1.0]  # if needed, prediction intervals' width can be increased (>1) or narrowed (<1)\n    # clip_predictions: False  # if data_range for respective `queries` is set in reader, `yhat.*` columns will be clipped\n    # anomaly_score_outside_data_range: 1.01  # auto anomaly score (1.01) if `y` (real value) is outside of data_range, if set\n```\n\n----------------------------------------\n\nTITLE: Modifying Exported VictoriaMetrics Data using sed\nDESCRIPTION: Uses the `sed` command with the `-i` flag for in-place editing of the `data.jsonl` file. The `s/old_value/new_value/g` pattern replaces all occurrences of the old metric value (`33604390912`) with the new value (`17179869184`). Requires the `sed` utility.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/guides/guide-delete-or-replace-metrics/README.md#2025-04-22_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nsed -i 's/33604390912/17179869184/g' data.jsonl\n```\n\n----------------------------------------\n\nTITLE: Checking Presence of Samples in PromQL\nDESCRIPTION: The present_over_time function returns 1 if there is at least one raw sample in the given lookbehind window, otherwise it returns an empty result. It's supported by PromQL.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_31\n\nLANGUAGE: promql\nCODE:\n```\npresent_over_time(series_selector[d])\n```\n\n----------------------------------------\n\nTITLE: Using EWMA Moving Averages in Go\nDESCRIPTION: This Go code snippet demonstrates initializing and using both SimpleEWMA and VariableEWMA from the github.com/VividCortex/ewma package. After importing the library, it creates a list of float64 samples, instantiates two different moving average variants, and iteratively adds samples to each. The code highlights the use of the Add and Value methods, and shows the difference in initializing the classes (with or without parameters). Required dependency: github.com/VividCortex/ewma library. Inputs are float64 samples, outputs are the computed moving average values. Both variants assume a fixed time interval between samples and will behave differently regarding memory, warm-up, and zero initialization.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/VividCortex/ewma/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport \"github.com/VividCortex/ewma\"\n\nfunc main() {\n\tsamples := [100]float64{\n\t\t4599, 5711, 4746, 4621, 5037, 4218, 4925, 4281, 5207, 5203, 5594, 5149,\n\t}\n\n\te := ewma.NewMovingAverage()  //=> Returns a SimpleEWMA if called without params\n\ta := ewma.NewMovingAverage(5) //=> returns a VariableEWMA with a decay of 2 / (5 + 1)\n\n\tfor _, f := range samples {\n\t\te.Add(f)\n\t\ta.Add(f)\n\t}\n\n\te.Value() //=> 13.577404704631077\n\ta.Value() //=> 1.5806140565521463e-12\n}\n```\n\n----------------------------------------\n\nTITLE: VictoriaMetrics Cluster URL Format Example\nDESCRIPTION: An example of how tenant URLs are structured in VictoriaMetrics cluster, showing the format for accessing the UI through vmselect service.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/Cluster-VictoriaMetrics.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nhttp://<vmselect>:8481/select/<accountID>/vmui/\n```\n\n----------------------------------------\n\nTITLE: Listing Backups via CLI (Restore Workflow Step 1) (Shell)\nDESCRIPTION: First step in the CLI restore workflow: using `vmbackupmanager backup list` to identify the name of the backup to be restored from the available backups in remote storage.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmbackupmanager.md#2025-04-22_snippet_19\n\nLANGUAGE: sh\nCODE:\n```\n$ /vmbackupmanager-prod backup list\n[{\"name\":\"daily/2023-04-07\",\"size_bytes\":318837,\"size\":\"311.4ki\",\"created_at\":\"2023-04-07T16:15:07+00:00\"},{\"name\":\"hourly/2023-04-07:11\",\"size_bytes\":318837,\"size\":\"311.4ki\",\"created_at\":\"2023-04-07T16:15:06+00:00\"},{\"name\":\"latest\",\"size_bytes\":318837,\"size\":\"311.4ki\",\"created_at\":\"2023-04-07T16:15:04+00:00\"},{\"name\":\"monthly/2023-04\",\"size_bytes\":318837,\"size\":\"311.4ki\",\"created_at\":\"2023-04-07T16:15:10+00:00\"},{\"name\":\"weekly/2023-14\",\"size_bytes\":318837,\"size\":\"311.4ki\",\"created_at\":\"2023-04-07T16:15:09+00:00\"}]\n\n```\n\n----------------------------------------\n\nTITLE: Opening Grafana Dashboard in Browser\nDESCRIPTION: Shell command to open the Grafana dashboard in the default web browser. The dashboard is accessible at http://127.0.0.1:3000/ after the Docker containers are up and running.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/deployment/docker/vmanomaly/vmanomaly-integration/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nopen http://127.0.0.1:3000/\n```\n\n----------------------------------------\n\nTITLE: Simplified Syntax for Sorting Logs in LogsQL\nDESCRIPTION: This query demonstrates a simplified syntax for sorting logs by foo and bar fields in reverse order for the last 5 minutes.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_127\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m | sort (foo, bar) desc\n```\n\n----------------------------------------\n\nTITLE: Displaying PkgGoDev Badge for Metric API in Markdown\nDESCRIPTION: This code snippet demonstrates how to include a PkgGoDev badge in a Markdown file. The badge links to the Go package documentation for the OpenTelemetry metric API.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/go.opentelemetry.io/otel/metric/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![PkgGoDev](https://pkg.go.dev/badge/go.opentelemetry.io/otel/metric)](https://pkg.go.dev/go.opentelemetry.io/otel/metric)\n```\n\n----------------------------------------\n\nTITLE: Extracting Minute from Timestamps - PromQL - PromQL\nDESCRIPTION: minute(q) calculates the minute (0-59) for every point in q, which should be a series of unix timestamps. Metric names are stripped by default. Supported in PromQL. No special dependencies required.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_115\n\nLANGUAGE: PromQL\nCODE:\n```\n`minute(q)`\n```\n\n----------------------------------------\n\nTITLE: MetricsQL Share Equal Over Time Function\nDESCRIPTION: Example of the new MetricsQL function share_eq_over_time() which calculates the share of raw samples equal to a given value over a time window. Returns values in the range [0...1].\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/changelog/CHANGELOG_2023.md#2025-04-22_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\nshare_eq_over_time(m[d], eq)\n```\n\n----------------------------------------\n\nTITLE: VictoriaMetrics CLI Arguments Configuration\nDESCRIPTION: Command line arguments documentation detailing various configuration options for VictoriaMetrics including rate limiting, TLS certificate settings, and retry mechanisms with exponential backoff.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmctl.md#2025-04-22_snippet_32\n\nLANGUAGE: plaintext\nCODE:\n```\n--vm-rate-limit value\n     Optional data transfer rate limit in bytes per second.\n     By default, the rate limit is disabled. It can be useful for limiting load on configured via '--vmAddr' destination. (default: 0)\n   --vm-cert-file value\n     Optional path to client-side TLS certificate file to use when connecting to '--vmAddr'\n   --vm-key-file value\n     Optional path to client-side TLS key to use when connecting to '--vmAddr'\n   --vm-CA-file value\n     Optional path to TLS CA file to use for verifying connections to '--vmAddr'. By default, system CA is used\n   --vm-server-name value\n     Optional TLS server name to use for connections to '--vmAddr'. By default, the server name from '--vmAddr' is used\n   --vm-insecure-skip-verify\n     Whether to skip tls verification when connecting to '--vmAddr' (default: false)\n   --vm-backoff-retries value\n     How many import retries to perform before giving up. (default: 10)\n   --vm-backoff-factor value\n     Factor to multiply the base duration after each failed import retry. Must be greater than 1.0 (default: 1.8)\n   --vm-backoff-min-duration value\n     Minimum duration to wait before the first import retry. Each subsequent import retry will be multiplied by the '--vm-backoff-factor'. (default: 2s)\n```\n\n----------------------------------------\n\nTITLE: Fixing Sum Aggregation for Filtered Asynchronous Instruments in Go\nDESCRIPTION: Corrects a bug in asynchronous instruments that use sum aggregators and attribute filters. The fix ensures that values from equivalent attribute sets that have been filtered out are still correctly aggregated into the total sum.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-22_snippet_32\n\nLANGUAGE: Go\nCODE:\n```\n// Affected: Asynchronous instruments (e.g., ObservableCounter) with sum aggregators and attribute filters.\n// Fix Location: Likely within go.opentelemetry.io/otel/sdk/metric implementation.\n```\n\n----------------------------------------\n\nTITLE: Example JSON output for stream field names - JSON\nDESCRIPTION: Displays an example of JSON output for queried stream field names, showcasing field names and their respective hits. The JSON structure presumes compatibility with VictoriaMetrics API.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/querying/README.md#2025-04-22_snippet_24\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"values\": [\n    {\n      \"value\": \"app\",\n      \"hits\": 1033300623\n    },\n    {\n      \"value\": \"container\",\n      \"hits\": 1033300623\n    },\n    {\n      \"value\": \"datacenter\",\n      \"hits\": 1033300623\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating vmselect Linux Service Configuration\nDESCRIPTION: Systemd service configuration for vmselect component that handles query processing with cache configuration.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/Quick-Start.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsudo bash -c 'cat <<END >/etc/systemd/system/vmselect.service\n[Unit]\nDescription=VictoriaMetrics vmselect service\nAfter=network.target\n\n[Service]\nType=simple\nUser=victoriametrics\nGroup=victoriametrics\nRestart=always\nExecStart=/usr/local/bin/vmselect-prod -storageNode=<list of vmstorages> -cacheDataPath=/var/lib/vmselect-cache\n\nPrivateTmp=yes\nNoNewPrivileges=yes\n\nProtectSystem=full\n\n[Install]\nWantedBy=multi-user.target\nEND'\n```\n\n----------------------------------------\n\nTITLE: Querying Ingested JSON Stream Data\nDESCRIPTION: Command to verify successful data ingestion by querying logs with log level criteria.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/data-ingestion/README.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncurl http://localhost:9428/select/logsql/query -d 'query=log.level:*'\n```\n\n----------------------------------------\n\nTITLE: VictoriaMetrics Cluster Version Setup\nDESCRIPTION: Command for running vmselect component with custom dashboards path.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n./vmselect -storageNode=:8418 --vmui.customDashboardsPath=/path/to/your/dashboards\n```\n\n----------------------------------------\n\nTITLE: Pushing Log Data via Loki JSON API\nDESCRIPTION: Example of sending a single log line to VictoriaLogs using the Loki JSON API endpoint. The request includes stream metadata and log values.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/data-ingestion/README.md#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ncurl -H \"Content-Type: application/json\" -XPOST \"http://localhost:9428/insert/loki/api/v1/push\" --data-raw \\\n  '{\"streams\": [{ \"stream\": { \"instance\": \"host123\", \"job\": \"app42\" }, \"values\": [ [ \"0\", \"foo fizzbuzz bar\" ] ] }]}'\n```\n\n----------------------------------------\n\nTITLE: Using count_values_over_time Rollup Function in VictoriaMetrics\nDESCRIPTION: This function counts samples with the same value over a lookbehind window and stores counts in time series with an additional label containing each value. It's typically applied to gauges and strips metric names unless keep_metric_names is added.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_11\n\nLANGUAGE: markdown\nCODE:\n```\ncount_values_over_time(\"label\", series_selector[d])\n```\n\n----------------------------------------\n\nTITLE: RPC Protocol Version Update Note\nDESCRIPTION: Documentation of a protocol version update from tsdbStatus_v5 to tsdbStatus_v6 for the TSDB status API, requiring version compatibility v1.116.0 or higher\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/changelog/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nUpdate Note 1: Updated the RPC cluster protocol version for the TSDB status API from `tsdbStatus_v5` to `tsdbStatus_v6`.\nThe TSDB Status API will be temporarily unavailable during the version upgrade process.\nThis update requires both vmselect and vmstorage components to be running version v1.116.0 or higher for full compatibility.\n```\n\n----------------------------------------\n\nTITLE: Using v1 API for Kubernetes Ingress/EndpointSlice Discovery (YAML)\nDESCRIPTION: In v1.65.0, vmagent's `kubernetes_sd_config` was updated to discover `role: ingress` and `role: endpointslice` using the Kubernetes v1 API when available, instead of the deprecated v1beta1 API. This ensures compatibility with Kubernetes v1.22+.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/changelog/CHANGELOG_2021.md#2025-04-22_snippet_9\n\nLANGUAGE: YAML\nCODE:\n```\nkubernetes_sd_configs:\n- role: ingress\n# or\n- role: endpointslice\n```\n\n----------------------------------------\n\nTITLE: Selecting Logs from Specific Application Instance in LogsQL\nDESCRIPTION: This query selects logs from a specific application instance using stream-level log fields, filtered to the last day and sorted by time.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/logsql-examples.md#2025-04-22_snippet_5\n\nLANGUAGE: logsql\nCODE:\n```\n{job=\"app-42\",instance=\"host-123:5678\"} _time:1d | sort by (_time)\n```\n\n----------------------------------------\n\nTITLE: Importing Data in JSON Line Format to VictoriaMetrics\nDESCRIPTION: Examples for importing data to VictoriaMetrics in JSON line format. The curl commands use POST method with Content-Type header set to application/json to import the data.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/url-examples.md#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ncurl -H 'Content-Type: application/json' --data-binary \"@filename.json\" -X POST http://localhost:8428/api/v1/import\n```\n\nLANGUAGE: sh\nCODE:\n```\ncurl -H 'Content-Type: application/json' --data-binary \"@filename.json\" -X POST http://<vminsert>:8480/insert/0/prometheus/api/v1/import\n```\n\n----------------------------------------\n\nTITLE: Sending OpenTSDB Data to VictoriaMetrics Cluster via HTTP API (Shell)\nDESCRIPTION: This shell snippet pushes metrics as a JSON payload using curl to the OpenTSDB-compatible HTTP API endpoint of a VictoriaMetrics cluster deployment. The target is the vminsert node's endpoint, typically at http://<vminsert>:4242/insert/42/opentsdb/api/put. Required is cluster-mode VictoriaMetrics with the OpenTSDB HTTP receiver active. Inputs follow the OpenTSDB API JSON format; outputs depend on server response and multi-tenancy configuration.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/url-examples.md#2025-04-22_snippet_23\n\nLANGUAGE: sh\nCODE:\n```\ncurl -H 'Content-Type: application/json' -d '[{\"metric\":\"foo\",\"value\":45.34},{\"metric\":\"bar\",\"value\":43}]' http://<vminsert>:4242/insert/42/opentsdb/api/put\n```\n\n----------------------------------------\n\nTITLE: Keeping Only Specified Labels with label_keep Function\nDESCRIPTION: The label_keep function deletes all labels except the specified ones in all time series returned by the query.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_122\n\nLANGUAGE: metricsql\nCODE:\n```\nlabel_keep(q, \"label1\", ..., \"labelN\")\n```\n\n----------------------------------------\n\nTITLE: Extracting Month from Timestamps in PromQL\nDESCRIPTION: The `month(q)` function deduces the month (1-12) from timestamps in `q`, fostering comprehensive analyses of data temporal distributions aligned with calendrical periods.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_93\n\nLANGUAGE: PromQL\nCODE:\n```\n`month(q)`\n```\n\n----------------------------------------\n\nTITLE: Elasticsearch Output with Field Filtering\nDESCRIPTION: Configuration demonstrating how to ignore specific fields during log ingestion using the ignore_fields parameter.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/data-ingestion/Logstash.md#2025-04-22_snippet_2\n\nLANGUAGE: logstash\nCODE:\n```\noutput {\n  elasticsearch {\n    hosts => [\"http://localhost:9428/insert/elasticsearch/\"]\n    parameters => {\n        \"_msg_field\" => \"message\"\n        \"_time_field\" => \"@timestamp\"\n        \"_stream_fields\" => \"host.hostname,process.name\"\n        \"ignore_fields\" => \"log.offset,event.original\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Logs by Field Value Comparison (<) in LogsQL\nDESCRIPTION: Illustrates the `lt_field()` filter in LogsQL for selecting log entries where the value of the first specified field (`duration`) is strictly less than the value of the second specified field (`max_duration`).\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_78\n\nLANGUAGE: logsql\nCODE:\n```\nduration:lt_field(max_duration)\n```\n\n----------------------------------------\n\nTITLE: Configuring Z-score Model in vmanomaly (YAML)\nDESCRIPTION: Demonstrates a basic YAML configuration for the Z-score model within `vmanomaly`. It specifies the model class (`zscore`), sets a custom `z_threshold` of 3.5 for defining anomaly boundaries based on standard deviations, and includes commented-out common `vmanomaly` arguments for reference. Requires `vmanomaly`.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/anomaly-detection/components/models.md#2025-04-22_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml\nmodels:\n  your_desired_alias_for_a_model:\n    class: \"zscore\"  # or 'model.zscore.ZscoreModel' until v1.13.0\n    z_threshold: 3.5\n    # Common arguments for built-in model, if not set, default to\n    # See https://docs.victoriametrics.com/anomaly-detection/components/models/#common-args\n    #\n    # provide_series: ['anomaly_score', 'yhat', 'yhat_lower', 'yhat_upper']\n    # schedulers: [all scheduler aliases defined in `scheduler` section]\n    # queries: [all query aliases defined in `reader.queries` section]\n    # detection_direction: 'both'  # meaning both drops and spikes will be captured\n    # min_dev_from_expected: 0.0  # meaning, no minimal threshold is applied to prevent smaller anomalies\n    # scale: [1.0, 1.0]  # if needed, prediction intervals' width can be increased (>1) or narrowed (<1)\n    # clip_predictions: False  # if data_range for respective `queries` is set in reader, `yhat.*` columns will be clipped\n    # anomaly_score_outside_data_range: 1.01  # auto anomaly score (1.01) if `y` (real value) is outside of data_range, if set\n```\n```\n\n----------------------------------------\n\nTITLE: Implicit Lookbehind Window Example (MetricsQL)\nDESCRIPTION: Shows a MetricsQL query `avg_over_time(temperature)` where the lookbehind window `[...]` is missing. VictoriaMetrics implicitly adds it based on the query step (`$__interval` or `1i`).\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_155\n\nLANGUAGE: MetricsQL\nCODE:\n```\navg_over_time(temperature)\n```\n\n----------------------------------------\n\nTITLE: Label Mapping with label_map Function in MetricsQL\nDESCRIPTION: The label_map function maps label values from source values to destination values for all time series returned by a query.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_130\n\nLANGUAGE: MetricsQL\nCODE:\n```\nlabel_map(q, \"label\", \"src_value1\", \"dst_value1\", ..., \"src_valueN\", \"dst_valueN\")\n```\n\n----------------------------------------\n\nTITLE: Querying streams with VictoriaLogs HTTP API - Shell\nDESCRIPTION: Executes an HTTP POST request to `/select/logsql/streams` endpoint using `curl` to retrieve stream details filtered by the specified query and time range. Requires VictoriaMetrics HTTP API endpoint and accepts query string parameters. Returns JSON-structured data containing streams and hit counts. API endpoint must be accessible on the specified host.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/querying/README.md#2025-04-22_snippet_21\n\nLANGUAGE: sh\nCODE:\n```\ncurl http://localhost:9428/select/logsql/streams -d 'query=error' -d 'start=5m'\n```\n\n----------------------------------------\n\nTITLE: Using Trailing Commas in Lists (Filters, Args, WITH) in MetricsQL\nDESCRIPTION: Demonstrates that MetricsQL allows trailing commas in various lists, including label filters (`m{foo=\"bar\",}`), function arguments (`f(a, b,)`), and `WITH` expressions (`WITH (x=y,) x`). This improves maintainability for multi-line queries.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_16\n\nLANGUAGE: metricsql\nCODE:\n```\nm{foo=\"bar\",}\n```\n\nLANGUAGE: metricsql\nCODE:\n```\nf(a, b,)\n```\n\nLANGUAGE: metricsql\nCODE:\n```\nWITH (x=y,) x\n```\n\n----------------------------------------\n\nTITLE: Writing Multi-tenant Metrics Example\nDESCRIPTION: Example showing how to write metrics with tenant labels vm_account_id and vm_project_id to store data for different tenants.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/Cluster-VictoriaMetrics.md#2025-04-22_snippet_2\n\nLANGUAGE: promtextmetric\nCODE:\n```\nhttp_requests_total{path=\"/foo\",vm_account_id=\"42\"} 12\nhttp_requests_total{path=\"/bar\",vm_account_id=\"7\",vm_project_id=\"9\"} 34\n```\n\n----------------------------------------\n\nTITLE: Verifying VictoriaMetrics Pods\nDESCRIPTION: Command to check the status of VictoriaMetrics cluster pods in Kubernetes.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/guides/k8s-monitoring-via-vm-cluster/README.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get pods\n```\n\n----------------------------------------\n\nTITLE: Correcting Content-Type Header for Submit Batch Requests - YAML\nDESCRIPTION: This transformation replaces the Content-Type string 'application/xml' with a multipart content type constant in JavaScript-style calls to req.SetBody. This ensures the correct header is set in HTTP requests for batch submission and is required for compatibility with Azure batch operations. The snippet expects the named method to appear within the Go client source files.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/internal/generated/autorest.md#2025-04-22_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n- from: \n  - zz_container_client.go\n  - zz_service_client.go\n  where: $\n  transform: >-\n    return $.\n      replace (/req.SetBody\\(body\\,\\s+\\\"application\\/xml\\\"\\)/g, `req.SetBody(body, multipartContentType)`);\n```\n\n----------------------------------------\n\nTITLE: Using sort_by_label_numeric function in PromQL\nDESCRIPTION: Function that sorts series in ascending order by the given set of labels using numeric sort. This ensures proper numerical ordering (e.g., 1, 2, 15, 101) rather than lexicographical ordering.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_137\n\nLANGUAGE: promql\nCODE:\n```\nsort_by_label_numeric(q, \"label1\", ... \"labelN\")\n```\n\n----------------------------------------\n\nTITLE: Starting vmagent to Read Metrics from Multiple PubSub Topics (sh)\nDESCRIPTION: This shell command demonstrates starting the Enterprise `vmagent` to consume metrics from two different Google PubSub subscriptions simultaneously. It reads plaintext InfluxDB formatted messages from `telegraf-testing` and gzipped JSON line formatted messages from `json-line-testing`, forwarding all metrics to the specified remote write URL. It uses multiple instances of `-gcp.pubsub.subscribe.topicSubscription` and associated format/gzipped flags. Requires Enterprise `vmagent`.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmagent.md#2025-04-22_snippet_51\n\nLANGUAGE: sh\nCODE:\n```\n./bin/vmagent -remoteWrite.url=http://localhost:8428/api/v1/write \\\n       -gcp.pubsub.subscribe.topicSubscription=projects/victoriametrics-vmagent-pub-sub-test/subscriptions/telegraf-testing \\\n       -gcp.pubsub.subscribe.topicSubscription.messageFormat=influx \\\n       -gcp.pubsub.subscribe.topicSubscription.isGzipped=false \\\n       -gcp.pubsub.subscribe.topicSubscription=projects/victoriametrics-vmagent-pub-sub-test/subscriptions/json-line-testing \\\n       -gcp.pubsub.subscribe.topicSubscription.messageFormat=jsonline \\\n       -gcp.pubsub.subscribe.topicSubscription.isGzipped=true\n```\n\n----------------------------------------\n\nTITLE: Importing smetrics Package in Go\nDESCRIPTION: Demonstrates how to import the 'smetrics' package into a Go application to access string metric algorithms. No additional dependencies are required besides Go's package management. This import brings all string comparison functions, such as WagnerFischer, Ukkonen, Jaro, JaroWinkler, Soundex, and Hamming, into scope for use in your Go code. The statement must appear in any Go file where these methods are called.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/xrash/smetrics/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport \\\"github.com/xrash/smetrics\\\"\n```\n\n----------------------------------------\n\nTITLE: Verifying VictoriaLogs Pod Status - Shell\nDESCRIPTION: This retrieves pod status for the VictoriaLogs single-server deployment to verify that it is running. Look for READY=1/1 and STATUS=Running.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/guides/getting-started-with-opentelemetry/README.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get pods\\n# NAME                                            READY   STATUS    RESTARTS   AGE\\n# victoria-logs-victoria-logs-single-server-0     1/1     Running   0          1m10s\n```\n\n----------------------------------------\n\nTITLE: Updating NewManagedIdentityCredential Usage in Go\nDESCRIPTION: This code snippet depicts the adjustments needed for initializing `NewManagedIdentityCredential` after the removal of the `id` parameter, now instead utilizing `ManagedIdentityCredentialOptions.ID`. It shows both the usage for client IDs and resource IDs, underscoring the requirement of defining the option ID explicitly.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/Azure/azure-sdk-for-go/sdk/azidentity/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// before\n  cred, err := NewManagedIdentityCredential(\"client-id\", nil)\n  // or, for a resource ID\n  opts := &ManagedIdentityCredentialOptions{ID: ResourceID}\n  cred, err := NewManagedIdentityCredential(\"/subscriptions/...\", opts)\n\n  // after\n  clientID := ClientID(\"7cf7db0d-...\")\n  opts := &ManagedIdentityCredentialOptions{ID: clientID}\n  // or, for a resource ID\n  resID: ResourceID(\"/subscriptions/...\")\n  opts := &ManagedIdentityCredentialOptions{ID: resID}\n  cred, err := NewManagedIdentityCredential(opts)\n```\n\n----------------------------------------\n\nTITLE: Visualizing Shares Using the share Aggregate - VictoriaMetrics MetricQL\nDESCRIPTION: Demonstrates the use of the `share` aggregate function to compute normalized shares per group, particularly for histogram buckets. This example sums the per-bucket rate of `http_request_duration_seconds_bucket` over a 5-minute window, groups by `le` and `vmrange`, and normalizes the result using `share`. Requires a VictoriaMetrics environment and uses the MetricQL query language. Output is a set of normalized time series per group, where shares sum to 1 at each timestamp.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_152\n\nLANGUAGE: metricsql\nCODE:\n```\nshare(\n  sum(\n    rate(http_request_duration_seconds_bucket[5m])\n  ) by (le, vmrange)\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Backend mTLS per User in vmauth (YAML)\nDESCRIPTION: YAML configuration snippet for `vmauth` showing how to configure mutual TLS (mTLS) for user `foo` when connecting to an HTTPS backend (`https://localhost`). It specifies the client certificate (`tls_cert_file`) and key (`tls_key_file`) files within the user's definition, overriding any global mTLS settings.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmauth.md#2025-04-22_snippet_37\n\nLANGUAGE: yaml\nCODE:\n```\n- username: \"foo\"\n  url_prefix: \"https://localhost\"\n  tls_cert_file: \"/path/to/tls/cert\"\n  tls_key_file: \"/path/to/tls/key\"\n\n```\n\n----------------------------------------\n\nTITLE: gRPC Client Configuration\nDESCRIPTION: Example showing gRPC client creation configuration using grpc.NewClient with DNS resolver in idle mode\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\ngrpc.NewClient\ngrpc.WithBlock\ngrpc.WithTimeout\ngrpc.WithReturnConnectionError\n```\n\n----------------------------------------\n\nTITLE: Starting Docker Compose Environment for Fluentd-VictoriaLogs Integration\nDESCRIPTION: This command starts the Docker Compose environment for the Fluentd-VictoriaLogs integration. It should be run from the directory of the specific protocol being used (e.g., loki, jsonline, datadog, or elasticsearch).\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/deployment/docker/victorialogs/fluentd/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Finding Minimum Value Over Time in PromQL\nDESCRIPTION: The min_over_time function determines the minimum value over raw samples for a specified time window. It is usually applied to gauge metrics and is supported by PromQL.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_40\n\nLANGUAGE: PromQL\nCODE:\n```\nmin_over_time(series_selector[d])\n```\n\n----------------------------------------\n\nTITLE: Running VictoriaMetrics Enterprise Binary with License File\nDESCRIPTION: Command to run the VictoriaMetrics Enterprise binary release with a license key stored in a file, specified via the -licenseFile flag.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/enterprise.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n./victoria-metrics-prod -licenseFile=/path/to/vm-license\n```\n\n----------------------------------------\n\nTITLE: Authenticating with User-Assigned Managed Identity using azidentity in Go\nDESCRIPTION: This Go snippet demonstrates specifying a user-assigned managed identity when using `azidentity`. It utilizes `azidentity.ManagedIdentityCredentialOptions` and sets the `ID` field with `azidentity.ClientID(\"...\")` before passing the options to `azidentity.NewManagedIdentityCredential`.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/Azure/azure-sdk-for-go/sdk/azidentity/MIGRATION.md#2025-04-22_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/Azure/azure-sdk-for-go/sdk/azidentity\"\n\nopts := azidentity.ManagedIdentityCredentialOptions{ID: azidentity.ClientID(\"...\")}\ncred, err := azidentity.NewManagedIdentityCredential(&opts)\nhandle(err)\n```\n\n----------------------------------------\n\nTITLE: Querying Replayed Alert States\nDESCRIPTION: PromQL query to check if a replayed alert has fired in the past by querying the alert state time series.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmalert.md#2025-04-22_snippet_18\n\nLANGUAGE: promql\nCODE:\n```\nALERTS{alertname=\"your_alertname\", alertstate=\"firing\"}\n```\n\n----------------------------------------\n\nTITLE: Setting Global Series Limit per Target in vmagent (Shell)\nDESCRIPTION: Introduced in v1.65.0, this vmagent command-line flag globally limits the number of unique time series scraped per target. It helps control cardinality and prevent excessive resource usage. A value must be provided.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/changelog/CHANGELOG_2021.md#2025-04-22_snippet_7\n\nLANGUAGE: Shell\nCODE:\n```\n-promscrape.seriesLimitPerTarget\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response for an Instant Query\nDESCRIPTION: Shows the structure of a successful JSON response from the VictoriaMetrics instant query API (`/api/v1/query`). The response indicates success (`\"status\": \"success\"`), specifies the result type as a vector (`\"resultType\": \"vector\"`), and includes the actual results in the `result` array. Each element contains the metric's labels and a single `value` array holding the queried timestamp and the corresponding metric value found (or interpolated) at that time.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/keyConcepts/keyConcepts.md#2025-04-22_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": \"success\",\n  \"data\": {\n    \"resultType\": \"vector\",\n    \"result\": [\n      {\n        \"metric\": {\n          \"__name__\": \"foo_bar\"\n        },\n        \"value\": [\n          1652169780, // 2022-05-10T08:03:00Z\n          \"3\"\n        ]\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Logs with Error Keyword in VictoriaLogs\nDESCRIPTION: This command queries VictoriaLogs for all log entries containing the 'error' word. It demonstrates the basic usage of the '/select/logsql/query' endpoint.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/querying/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncurl http://localhost:9428/select/logsql/query -d 'query=error'\n```\n\n----------------------------------------\n\nTITLE: Using RBMutex with xsync in Go\nDESCRIPTION: This snippet explains how to utilize `RBMutex`, a reader-biased mutex allowing multiple readers or a single writer. It highlights `Lock`, `Unlock`, `RLock`, and `RUnlock` operations tailored for reader-heavy workloads.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/puzpuzpuz/xsync/v3/README.md#2025-04-22_snippet_6\n\nLANGUAGE: Go\nCODE:\n```\nmu := xsync.NewRBMutex()\n// reader lock calls return a token\nt := mu.RLock()\n// the token must be later used to unlock the mutex\nmu.RUnlock(t)\n// writer locks are the same as in sync.RWMutex\nmu.Lock()\nmu.Unlock()\n```\n\nLANGUAGE: Go\nCODE:\n```\nmu := xsync.NewRBMutex()\nif locked, t := mu.TryRLock(); locked {\n\t// critical reader section...\n\tmu.RUnlock(t)\n}\nif mu.TryLock() {\n\t// critical writer section...\nmu.Unlock()\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Average with `avg` in MetricsQL\nDESCRIPTION: The `avg` function calculates the average of input sample values over a specified interval. It is primarily intended for use with gauge metrics. This MetricsQL query demonstrates how the result of `avg` is equivalent to calculating the total sum over time divided by the total count over time for the given metric and interval.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/stream-aggregation.md#2025-04-22_snippet_15\n\nLANGUAGE: metricsql\nCODE:\n```\nsum(sum_over_time(some_metric[interval])) / sum(count_over_time(some_metric[interval]))\n```\n\n----------------------------------------\n\nTITLE: Rate Calculation with OR Filters\nDESCRIPTION: Query showing how to calculate rate over time series matching multiple OR conditions using a 5-minute window.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/keyConcepts/keyConcepts.md#2025-04-22_snippet_21\n\nLANGUAGE: metricsql\nCODE:\n```\nrate({job=\"app1\",env=\"prod\" or job=\"app2\",env=\"dev\"}[5m])\n```\n\n----------------------------------------\n\nTITLE: First Pipe with Partition\nDESCRIPTION: Returns up to N logs per group of logs with same field values using partition by clause. Example shows 3 logs with smallest request_duration per host over 1 hour.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_102\n\nLANGUAGE: logsql\nCODE:\n```\n_time:1h | first 3 by (request_duration) partition by (host)\n```\n\n----------------------------------------\n\nTITLE: Configuring EC2 Service Discovery in YAML\nDESCRIPTION: Configuration example for AWS EC2 service discovery including optional parameters for region, endpoints, authentication, and filtering. Supports customization of AWS API access, port configuration, and instance filtering.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/sd_configs.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nscrape_configs:\n- job_name: ec2\n  ec2_sd_configs:\n\n    # region is an optional config for AWS region.\n    # By default, the region from the instance metadata is used.\n    #\n  - region: \"...\"\n\n    # endpoint is an optional custom AWS API endpoint to use.\n    # By default, the standard endpoint for the given region is used.\n    #\n    # endpoint: \"...\"\n\n    # sts_endpoint is an optional custom STS API endpoint to use.\n    # By default, the standard endpoint for the given region is used.\n    #\n    # sts_endpoint: \"...\"\n\n    # access_key is an optional AWS API access key.\n    # By default, the access key is loaded from AWS_ACCESS_KEY_ID environment var.\n    #\n    # access_key: \"...\"\n\n    # secret_key is an optional AWS API secret key.\n    # By default, the secret key is loaded from AWS_SECRET_ACCESS_KEY environment var.\n    #\n    # secret_key: \"...\"\n\n    # role_arn is an optional AWS Role ARN, an alternative to using AWS API keys.\n    #\n    # role_arn: \"...\"\n\n    # port is an optional port to scrape metrics from.\n    # By default, port 80 is used.\n    #\n    # port: ...\n\n    # filters is an optional filters for the instance list.\n    # Available filter criteria can be found here:\n    # https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeInstances.html\n    # Filter API documentation: https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_Filter.html\n    #\n    # filters:\n    # - name: \"...\"\n    #   values: [\"...\", \"...\"]\n\n    # az_filters is an optional filters for the availability zones list.\n    # Available filter criteria can be found here:\n    # https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeAvailabilityZones.html\n    # Filter API documentation: https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_Filter.html\n    #\n    # az_filters:\n    # - name: \"...\"\n    #   values: [\"...\", \"...\"]\n```\n\n----------------------------------------\n\nTITLE: Grouped Exclusion with OR in LogsQL\nDESCRIPTION: A LogsQL query that uses parentheses and OR to create a clearer exclusion filter, showing how to logically group conditions.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_12\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m error -(buggy_app OR foobar)\n```\n\n----------------------------------------\n\nTITLE: Performing Restore via CLI (Restore Workflow Step 4) (Shell)\nDESCRIPTION: Fourth step in the CLI restore workflow: executing `vmbackupmanager restore` with necessary parameters (`-credsFilePath`, `-storageDataPath`). This triggers the actual data restoration from the backup specified in the previously created restore mark. Requires `vmstorage` or `vmsingle` to be stopped.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmbackupmanager.md#2025-04-22_snippet_22\n\nLANGUAGE: sh\nCODE:\n```\n$ /vmbackupmanager-prod restore -credsFilePath=credentials.json -storageDataPath=/vmstorage-data\n\n```\n\n----------------------------------------\n\nTITLE: Multi-tenant Fluentd Configuration for VictoriaLogs\nDESCRIPTION: Configuration for sending logs to a specific tenant in VictoriaLogs using AccountID and ProjectID headers.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/data-ingestion/Fluentd.md#2025-04-22_snippet_4\n\nLANGUAGE: fluentd\nCODE:\n```\n<match **>\n  @type http\n  endpoint \"http://localhost:9428/insert/jsonline\"\n  headers {\"VL-Msg-Field\": \"log\", \"VL-Time-Field\": \"time\", \"VL-Stream-Fields\": \"path\"}\n  header AccountID 12\n  header ProjectID 23\n</match>\n```\n\n----------------------------------------\n\nTITLE: Configuring vlinsert/vlselect to Use TLS when Connecting to vlstorage\nDESCRIPTION: Command for configuring vlinsert or vlselect components to use HTTPS when connecting to vlstorage nodes. This enables secure communications over untrusted networks like the Internet.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/cluster.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n./victoria-logs-prod -storageNode=... -storageNode.tls\n```\n\n----------------------------------------\n\nTITLE: Result of Implicit default_rollup Wrapping for Transform Function Argument (MetricsQL)\nDESCRIPTION: Shows the result `abs(default_rollup(temperature))` after VictoriaMetrics implicitly wraps the series selector argument `temperature` within the `abs` transform function.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_164\n\nLANGUAGE: MetricsQL\nCODE:\n```\nabs(default_rollup(temperature))\n```\n\n----------------------------------------\n\nTITLE: Scrape Interval Calculation with Rollup Scrape Interval Function in VictoriaMetrics\nDESCRIPTION: The `rollup_scrape_interval` function computes time intervals in seconds between raw sample collections, providing min, max, and avg values per series. Metric names are removed from final outputs unless a modifier is used to preserve them.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/MetricsQL.md#2025-04-22_snippet_56\n\nLANGUAGE: Other\nCODE:\n```\nrollup_scrape_interval(series_selector[d])\n```\n\n----------------------------------------\n\nTITLE: Implementing GlobWalk in Go\nDESCRIPTION: The GlobWalk function applies a callback for each file matching a specified pattern. The pattern syntax is similar to Match() and Glob(), with particular constraints. This function may offer performance advantages by avoiding the allocation of match slices and providing access to fs.DirEntry objects. Users can abort on I/O errors using the WithFailOnIOErrors option. Dependencies include io/fs for handling directories and paths.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/bmatcuk/doublestar/v4/README.md#2025-04-22_snippet_13\n\nLANGUAGE: go\nCODE:\n```\ntype GlobWalkFunc func(path string, d fs.DirEntry) error\n\nfunc GlobWalk(fsys fs.FS, pattern string, fn GlobWalkFunc, opts ...GlobOption) error\n```\n\n----------------------------------------\n\nTITLE: Opening a URL in a Browser Window - Go\nDESCRIPTION: The OpenURL function enables opening a string URL in a new browser window from Go code. It takes a single string parameter (url) and returns an error if the attempt is unsuccessful. This function is useful for automating navigation to documentation, status pages, or user interfaces, and depends on the \\\"github.com/pkg/browser\\\" library. Any issues (such as an invalid URL) result in an error return.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/pkg/browser/README.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfunc OpenURL(url string) error\n```\n\n----------------------------------------\n\nTITLE: Adding InfluxDB Health Check Endpoint (API)\nDESCRIPTION: Introduces a new `/influx/health` HTTP endpoint. This allows InfluxDB clients to verify if the VictoriaMetrics server is healthy and ready for data ingestion via InfluxDB line protocol endpoints.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/changelog/CHANGELOG_2024.md#2025-04-22_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nGET /influx/health\n```\n\n----------------------------------------\n\nTITLE: VMGateway with JWKS Endpoint for Google\nDESCRIPTION: Shell command to start vmgateway using JWKS endpoint from Google for JWT signature verification.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmgateway.md#2025-04-22_snippet_16\n\nLANGUAGE: sh\nCODE:\n```\n/bin/vmgateway -eula \\\n  -enable.auth \\\n  -write.url=http://localhost:8480 \\\n  -read.url=http://localhost:8481 \\\n  -auth.jwksEndpoints=https://www.googleapis.com/oauth2/v3/certs\n```\n\n----------------------------------------\n\nTITLE: Managing Goroutines with Executor in Go\nDESCRIPTION: This snippet illustrates the use of `concurrent.Executor` to manage goroutines with explicit ownership and cancellation capabilities. By attaching goroutines to an executor instance, they can be stopped or cancelled with methods like `StopAndWaitForever`, minimizing the risk of unhandled panics and improving scalability.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/modern-go/concurrent/README.md#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nexecutor := concurrent.NewUnboundedExecutor()\nexecutor.Go(func(ctx context.Context) {\n    everyMillisecond := time.NewTicker(time.Millisecond)\n    for {\n        select {\n        case <-ctx.Done():\n            fmt.Println(\"goroutine exited\")\n            return\n        case <-everyMillisecond.C:\n            // do something\n        }\n    }\n})\ntime.Sleep(time.Second)\nexecutor.StopAndWaitForever()\nfmt.Println(\"executor stopped\")\n```\n\n----------------------------------------\n\nTITLE: Successful Model Fit Log (Non-Rolling)\nDESCRIPTION: Logs information about a successful model fit for non-rolling models, indicating the number of valid and total datapoints processed. Accompanied by metric updates like `vmanomaly_model_datapoints_accepted`. Placeholders `{{scheduler_alias}}`, `{{valid_values_cnt}}`, `{{total_values_cnt}}`, `{{query_key}}`, and `{{model_alias}}` provide context.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/anomaly-detection/components/monitoring.md#2025-04-22_snippet_17\n\nLANGUAGE: text\nCODE:\n```\n[Scheduler {{scheduler_alias}}] Fitting on {{valid_values_cnt}}/{{total_values_cnt}} valid datapoints for \"{{query_key}}\" using model \"{{model_alias}}\".\n```\n\n----------------------------------------\n\nTITLE: Marshalling Data with encoding/json in Go\nDESCRIPTION: This snippet demonstrates how to import the encoding/json standard package and perform JSON serialization (marshalling) on a data structure in Go. It serves as a baseline for comparison, showing the traditional approach before switching to json-iterator. No additional dependencies beyond the Go standard library are required. The input is the data structure reference \\u0026data, and the output is the JSON-encoded byte slice or error.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/json-iterator/go/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport \\\"encoding/json\\\"\\njson.Marshal(\\u0026data)\n```\n\n----------------------------------------\n\nTITLE: Shutting Down VictoriaMetrics Single Server Docker Compose Environment\nDESCRIPTION: Command to shut down the Docker Compose environment for VictoriaMetrics single server configuration.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/deployment/docker/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake docker-vm-single-down\n```\n\n----------------------------------------\n\nTITLE: Using s2sx Command Line Utility in Bash\nDESCRIPTION: This code snippet displays the usage options for the s2sx utility, which compresses files into self-extracting archives. It shows various command-line parameters including architecture selection, CPU usage, output size limits, and special features like untarring on destination.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/klauspost/compress/s2/README.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nUsage: s2sx [options] file1 file2\n\nCompresses all files supplied as input separately.\nIf files have '.s2' extension they are assumed to be compressed already.\nOutput files are written as 'filename.s2sx' and with '.exe' for windows targets.\nIf output is big, an additional file with \".more\" is written. This must be included as well.\nBy default output files will be overwritten.\n\nWildcards are accepted: testdir/*.txt will compress all files in testdir ending with .txt\nDirectories can be wildcards as well. testdir/*/*.txt will match testdir/subdir/b.txt\n\nOptions:\n  -arch string\n        Destination architecture (default \"amd64\")\n  -c    Write all output to stdout. Multiple input files will be concatenated\n  -cpu int\n        Compress using this amount of threads (default 32)\n  -help\n        Display help\n  -max string\n        Maximum executable size. Rest will be written to another file. (default \"1G\")\n  -os string\n        Destination operating system (default \"windows\")\n  -q    Don't write any output to terminal, except errors\n  -rm\n        Delete source file(s) after successful compression\n  -safe\n        Do not overwrite output files\n  -untar\n        Untar on destination\n```\n\n----------------------------------------\n\nTITLE: Querying Log Field Disk Space Usage with LogsQL in VictoriaLogs\nDESCRIPTION: LogsQL query to determine which log fields occupy the most disk space. It uses the 'block_stats' pipe and various aggregation functions.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/FAQ.md#2025-04-22_snippet_1\n\nLANGUAGE: logsql\nCODE:\n```\n_time:1d\n  | block_stats\n  | stats by (field)\n      sum(values_bytes) as values_bytes,\n      sum(bloom_bytes) as bloom_bytes,\n      sum(rows) as rows\n  | math\n      (values_bytes+bloom_bytes) as total_bytes,\n      round(total_bytes / rows, 0.01) as bytes_per_row\n  | first 10 (total_bytes desc)\n```\n\n----------------------------------------\n\nTITLE: Defining Option Interface for Configuration in Go\nDESCRIPTION: Illustrates how to create an 'Option' interface type for setting configuration values, with an unexported 'apply' method to prevent external use.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\ntype Option interface {\n\tapply(config) config\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Last Point in Range using range_last() in MetricsQL\nDESCRIPTION: The `range_last(q)` transform function yields the value of the final data point within the specified time range for each time series returned by the query `q`.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_98\n\nLANGUAGE: MetricsQL\nCODE:\n```\nrange_last(q)\n```\n\n----------------------------------------\n\nTITLE: Stopping and Removing the Docker Compose Environment (Shell)\nDESCRIPTION: These commands are used to shut down and clean up the Docker Compose environment. `docker compose down` stops the running containers, and `docker compose rm -f` forcibly removes the stopped containers defined in the `docker-compose.yml` file. Requires Docker and Docker Compose to be installed.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/deployment/docker/victorialogs/promtail/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndocker compose down\ndocker compose rm -f\n```\n\n----------------------------------------\n\nTITLE: Adding Prefix to Unpacked Syslog Fields\nDESCRIPTION: Demonstrates adding a prefix to all fields extracted from a Syslog message to avoid clashing with existing fields.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_168\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m | unpack_syslog from foo result_prefix \"foo_\"\n```\n\n----------------------------------------\n\nTITLE: Creating Separate Seek Index for S2/Snappy Stream in Go\nDESCRIPTION: Demonstrates creating an S2 or Snappy compatible stream and obtaining its seek index separately for external storage. An `s2.NewWriter` is created without special options. After writing data, `enc.CloseIndex()` is called instead of `Close()`. This method returns the index data (`[]byte`) and an error. The returned index can be stored independently and later used to seek within the stream without reading the entire stream content first. Note that `CloseIndex()` should only be called once. Requires `io` and `s2` packages.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/klauspost/compress/s2/README.md#2025-04-22_snippet_15\n\nLANGUAGE: Go\nCODE:\n```\n```\n\t// Get index for separate storage... \n\tenc := s2.NewWriter(w)\n\tio.Copy(enc, r)\n\tindex, err := enc.CloseIndex()\n```\n```\n\n----------------------------------------\n\nTITLE: Prometheus Migration Command-Line Flags\nDESCRIPTION: Details the specific flags for migrating time series data from Prometheus snapshots, including concurrency settings and filtering options by time range and labels.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmctl.md#2025-04-22_snippet_27\n\nLANGUAGE: shellhelp\nCODE:\n```\n./vmctl prometheus -help\n\n   --prom-snapshot value\n     Path to Prometheus snapshot. See for details https://www.robustperception.io/taking-snapshots-of-prometheus-data\n   --prom-concurrency value\n     Number of concurrently running snapshot readers (default: 1)\n   --prom-filter-time-start value\n     The time filter in RFC3339 format to select timeseries with timestamp equal or higher than provided value. E.g. '2020-01-01T20:07:00Z'\n   --prom-filter-time-end value\n     The time filter in RFC3339 format to select timeseries with timestamp equal or lower than provided value. E.g. '2020-01-01T20:07:00Z'\n   --prom-filter-label value\n     Prometheus label name to filter timeseries by. E.g. '__name__' will filter timeseries by name.\n   --prom-filter-label-value value\n     Prometheus regular expression to filter label from \"prom-filter-label\" flag. (default: \".*\")\n```\n\n----------------------------------------\n\nTITLE: Computing Hash Values with hash Pipe in LogSQL\nDESCRIPTION: This pipe calculates a hash value for a specified field and stores it in a result field. The example computes the hash value of the user_id field across logs from the last 5 minutes.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_109\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m | hash(user_id) as user_id_hash\n```\n\n----------------------------------------\n\nTITLE: Example JSON Lines Output for Imported Prometheus Data\nDESCRIPTION: Shows the expected JSON Lines output when exporting the metric imported in the Prometheus format example. It includes the metric name, labels, value, and the ingestion timestamp (represented here as milliseconds since epoch).\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/README.md#2025-04-22_snippet_58\n\nLANGUAGE: json\nCODE:\n```\n{\"metric\":{\"__name__\":\"foo\",\"bar\":\"baz\"},\"values\":[123],\"timestamps\":[1594370496905]}\n```\n\n----------------------------------------\n\nTITLE: Defining Durations Using MetricsQL WITH Templates (Simple)\nDESCRIPTION: Example of using MetricsQL `WITH` templates (feature from v1.92.0) to define a duration alias. The query `WITH (w = 5m) m[w]` defines an alias `w` representing the duration `5m` and uses it within the range vector selector `m[w]`. VictoriaMetrics automatically transforms this into the equivalent query `m[5m]`.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/changelog/CHANGELOG_2023.md#2025-04-22_snippet_13\n\nLANGUAGE: metricsql\nCODE:\n```\nWITH (w = 5m) m[w]\n```\n\n----------------------------------------\n\nTITLE: Global Reverse Sorting of Logs in LogsQL\nDESCRIPTION: This query applies reverse sorting globally to the foo and bar fields for logs in the last 5 minutes.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_126\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m | sort by (foo, bar) desc\n```\n\n----------------------------------------\n\nTITLE: Understanding `last_over_time` Behavior Change in MetricsQL\nDESCRIPTION: A bugfix in v1.64.1 modified the behavior of `last_over_time(m[d])` in MetricsQL. It no longer implicitly overrides the lookbehind window `[d]` if `d` is smaller than the interval between samples, respecting the explicitly set window.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/changelog/CHANGELOG_2021.md#2025-04-22_snippet_21\n\nLANGUAGE: MetricsQL\nCODE:\n```\nlast_over_time(m[d])\n```\n\n----------------------------------------\n\nTITLE: Converting Label Values to Lowercase with label_lowercase Function\nDESCRIPTION: The label_lowercase function converts values for the specified labels to lowercase in all time series returned by the query.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_123\n\nLANGUAGE: metricsql\nCODE:\n```\nlabel_lowercase(q, \"label1\", ..., \"labelN\")\n```\n\n----------------------------------------\n\nTITLE: Using a Subexpression with the @ Modifier in MetricsQL\nDESCRIPTION: Shows that MetricsQL allows an arbitrary subexpression as the timestamp for the `@` modifier. This query calculates the value of `foo` at a specific point in time: one hour before the `end()` of the selected query range.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_9\n\nLANGUAGE: metricsql\nCODE:\n```\nfoo @ (end() - 1h)\n```\n\n----------------------------------------\n\nTITLE: Starting vlinsert Node\nDESCRIPTION: Command to start the vlinsert node, accepting logs on port 9481 and distributing them to the two vlstorage nodes.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/cluster.md#2025-04-22_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\n./victoria-logs-prod -httpListenAddr=:9481 -storageNode=localhost:9491,localhost:9492 &\n```\n\n----------------------------------------\n\nTITLE: Writer Timeout Error Log\nDESCRIPTION: Logs an error when the writer fails to send data due to a request timeout. Details include the number of points (`N`), query key, target URL, and specific error message. Placeholders `{{scheduler_alias}}`, `{{N}}`, `{{query_key}}`, `{{url}}`, and `{{error_message}}` provide context.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/anomaly-detection/components/monitoring.md#2025-04-22_snippet_23\n\nLANGUAGE: text\nCODE:\n```\n[Scheduler {{scheduler_alias}}] Cannot write {{N}} points for {{query_key}}: timeout for {{url}} {{error_message}}\n```\n\n----------------------------------------\n\nTITLE: Filtering Logs by Field with Exact Prefix - LogsQL\nDESCRIPTION: This snippet shows how to combine field names with exact prefix filters in LogsQL. It explains the usage of UTF-8 characters in fields and queries, demonstrating with a filter on the log.level and log.დონე fields for specific prefixes.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_61\n\nLANGUAGE: logsql\nCODE:\n```\nlog.level:=\"err\"*\n```\n\nLANGUAGE: logsql\nCODE:\n```\nlog.დონე:=\"შეცდომა\"*\n```\n\nLANGUAGE: logsql\nCODE:\n```\n\"log:level\":=\"err\"*\n```\n\n----------------------------------------\n\nTITLE: Starting vmgateway with JWT Authentication\nDESCRIPTION: Starts the vmgateway binary with authentication and multi-tenant access enabled. It requires specifying URLs for reading and writing data, and optionally provides an endpoint for JWT token signature verification.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/guides/grafana-vmgateway-openid-configuration/README.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n./bin/vmgateway \\\n    -licenseFile=./vm-license.key\n    -enable.auth=true \\\n    -clusterMode=true \\\n    -write.url=http://localhost:8480 \\\n    -read.url=http://localhost:8481\n```\n\n----------------------------------------\n\nTITLE: Writing InfluxDB v2 Line Protocol to VictoriaMetrics Using Curl - Shell\nDESCRIPTION: Shell command for writing time series data using InfluxDB v2 protocol to VictoriaMetrics via curl. Sends a single line of measurement, tags, and fields data to the /api/v2/write endpoint via HTTP POST. Adjust host/IP and path as needed for your deployment.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/README.md#2025-04-22_snippet_18\n\nLANGUAGE: sh\nCODE:\n```\ncurl -d 'measurement,tag1=value1,tag2=value2 field1=123,field2=1.23' -X POST 'http://localhost:8428/api/v2/write'\n```\n\n----------------------------------------\n\nTITLE: Estimating Resource Exhaustion with ttf Function\nDESCRIPTION: The ttf function estimates the time in seconds needed to exhaust the free resources specified in the query. Useful for capacity planning.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_112\n\nLANGUAGE: metricsql\nCODE:\n```\nttf(free)\n```\n\nLANGUAGE: metricsql\nCODE:\n```\nttf(node_filesystem_avail_byte)\n```\n\n----------------------------------------\n\nTITLE: Using bottomk_last aggregate function in PromQL\nDESCRIPTION: Aggregate function that returns up to k time series with the smallest last values. Can optionally include a sum of remaining series with a custom label.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_143\n\nLANGUAGE: promql\nCODE:\n```\nbottomk_last(k, q, \"other_label=other_value\")\n```\n\n----------------------------------------\n\nTITLE: Helm Chart Version Update Structure - Chart.yaml\nDESCRIPTION: Structure showing the fields that need to be updated in Chart.yaml files for VictoriaMetrics Helm charts. Both appVersion and version fields must be updated according to the new release version and semantic versioning respectively.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/Release-Guide.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nappVersion: \"<new_release_version>\"\\nversion: \"<incremental_semver_version>\"\n```\n\n----------------------------------------\n\nTITLE: Using the PathMatchUnvalidated Function for Performance with System Paths in Go\nDESCRIPTION: This function signature defines `doublestar.PathMatchUnvalidated`. Similar to `MatchUnvalidated`, it performs pattern matching using the system's path separator like `PathMatch` but skips pattern validation for potential performance gains. It returns `true` for a match and `false` otherwise, without checking for pattern errors.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/bmatcuk/doublestar/v4/README.md#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nfunc PathMatchUnvalidated(pattern, name string) bool\n```\n\n----------------------------------------\n\nTITLE: Using label_value function in PromQL\nDESCRIPTION: Function that returns numeric values for a given label for every time series returned by a query. It only returns data for numeric label values.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_133\n\nLANGUAGE: promql\nCODE:\n```\nlabel_value(q, \"label\")\n```\n\n----------------------------------------\n\nTITLE: Quantile Calculation from Histogram Buckets in PromQL\nDESCRIPTION: The `histogram_quantile(phi, buckets)` function calculates the `phi`-percentile over specified histogram `buckets`, where `phi` ranges from 0 to 1, providing statistical insights like median request durations. The optional `boundsLabel` parameter adds estimated percentile bounds to the output.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_79\n\nLANGUAGE: PromQL\nCODE:\n```\n`histogram_quantile(phi, buckets)`\n```\n\n----------------------------------------\n\nTITLE: MetricsQL Query for Cache Capacity Alert\nDESCRIPTION: Query to determine if caches are reaching their capacity by comparing current size to maximum size.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/changelog/CHANGELOG_2021.md#2025-04-22_snippet_3\n\nLANGUAGE: metricsql\nCODE:\n```\nvm_cache_size_bytes / vm_cache_size_max_bytes > 0.9\n```\n\n----------------------------------------\n\nTITLE: Benchmarking JSON Parsing in Go\nDESCRIPTION: This code snippet shows the benchmark results for parsing JSON files of various sizes using different methods in Go. It compares the performance of standard library JSON parsing (map, struct, and empty struct) with fastjson parsing.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/valyala/fastjson/README.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n$ GOMAXPROCS=1 go test github.com/valyala/fastjson -bench='Parse$'\ngoos: linux\ngoarch: amd64\npkg: github.com/valyala/fastjson\nBenchmarkParse/small/stdjson-map         \t  200000\t      7305 ns/op\t  26.01 MB/s\t     960 B/op\t      51 allocs/op\nBenchmarkParse/small/stdjson-struct      \t  500000\t      3431 ns/op\t  55.37 MB/s\t     224 B/op\t       4 allocs/op\nBenchmarkParse/small/stdjson-empty-struct         \t  500000\t      2273 ns/op\t  83.58 MB/s\t     168 B/op\t       2 allocs/op\nBenchmarkParse/small/fastjson                     \t 5000000\t       347 ns/op\t 547.53 MB/s\t       0 B/op\t       0 allocs/op\nBenchmarkParse/small/fastjson-get                 \t 2000000\t       620 ns/op\t 306.39 MB/s\t       0 B/op\t       0 allocs/op\nBenchmarkParse/medium/stdjson-map                 \t   30000\t     40672 ns/op\t  57.26 MB/s\t   10196 B/op\t     208 allocs/op\nBenchmarkParse/medium/stdjson-struct              \t   30000\t     47792 ns/op\t  48.73 MB/s\t    9174 B/op\t     258 allocs/op\nBenchmarkParse/medium/stdjson-empty-struct        \t  100000\t     22096 ns/op\t 105.40 MB/s\t     280 B/op\t       5 allocs/op\nBenchmarkParse/medium/fastjson                    \t  500000\t      3025 ns/op\t 769.90 MB/s\t       0 B/op\t       0 allocs/op\nBenchmarkParse/medium/fastjson-get                \t  500000\t      3211 ns/op\t 725.20 MB/s\t       0 B/op\t       0 allocs/op\nBenchmarkParse/large/stdjson-map                  \t    2000\t    614079 ns/op\t  45.79 MB/s\t  210734 B/op\t    2785 allocs/op\nBenchmarkParse/large/stdjson-struct               \t    5000\t    298554 ns/op\t  94.18 MB/s\t   15616 B/op\t     353 allocs/op\nBenchmarkParse/large/stdjson-empty-struct         \t    5000\t    268577 ns/op\t 104.69 MB/s\t     280 B/op\t       5 allocs/op\nBenchmarkParse/large/fastjson                     \t   50000\t     35210 ns/op\t 798.56 MB/s\t       5 B/op\t       0 allocs/op\nBenchmarkParse/large/fastjson-get                 \t   50000\t     35171 ns/op\t 799.46 MB/s\t       5 B/op\t       0 allocs/op\nBenchmarkParse/canada/stdjson-map                 \t      20\t  68147307 ns/op\t  33.03 MB/s\t12260502 B/op\t  392539 allocs/op\nBenchmarkParse/canada/stdjson-struct              \t      20\t  68044518 ns/op\t  33.08 MB/s\t12260123 B/op\t  392534 allocs/op\nBenchmarkParse/canada/stdjson-empty-struct        \t     100\t  17709250 ns/op\t 127.11 MB/s\t     280 B/op\t       5 allocs/op\nBenchmarkParse/canada/fastjson                    \t     300\t   4182404 ns/op\t 538.22 MB/s\t  254902 B/op\t     381 allocs/op\nBenchmarkParse/canada/fastjson-get                \t     300\t   4274744 ns/op\t 526.60 MB/s\t  254902 B/op\t     381 allocs/op\nBenchmarkParse/citm/stdjson-map                   \t      50\t  27772612 ns/op\t  62.19 MB/s\t 5214163 B/op\t   95402 allocs/op\nBenchmarkParse/citm/stdjson-struct                \t     100\t  14936191 ns/op\t 115.64 MB/s\t    1989 B/op\t      75 allocs/op\nBenchmarkParse/citm/stdjson-empty-struct          \t     100\t  14946034 ns/op\t 115.56 MB/s\t     280 B/op\t       5 allocs/op\nBenchmarkParse/citm/fastjson                      \t    1000\t   1879714 ns/op\t 918.87 MB/s\t   17628 B/op\t      30 allocs/op\nBenchmarkParse/citm/fastjson-get                  \t    1000\t   1881598 ns/op\t 917.94 MB/s\t   17628 B/op\t      30 allocs/op\nBenchmarkParse/twitter/stdjson-map                \t     100\t  11289146 ns/op\t  55.94 MB/s\t 2187878 B/op\t   31266 allocs/op\nBenchmarkParse/twitter/stdjson-struct             \t     300\t   5779442 ns/op\t 109.27 MB/s\t     408 B/op\t       6 allocs/op\nBenchmarkParse/twitter/stdjson-empty-struct       \t     300\t   5738504 ns/op\t 110.05 MB/s\t     408 B/op\t       6 allocs/op\nBenchmarkParse/twitter/fastjson                   \t    2000\t    774042 ns/op\t 815.86 MB/s\t    2541 B/op\t       2 allocs/op\nBenchmarkParse/twitter/fastjson-get               \t    2000\t    777833 ns/op\t 811.89 MB/s\t    2541 B/op\t       2 allocs/op\n```\n\n----------------------------------------\n\nTITLE: Rebuilding the libzstd Static Library using Make\nDESCRIPTION: Explains how to rebuild the `libzstd*.a` static library files included in the repository using the provided Makefile. Running `make clean libzstd.a` first cleans any previous build artifacts and then compiles the zstd C source code into a static library for the host system's OS and architecture. This is useful if the pre-built binaries are untrusted or incompatible.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/valyala/gozstd/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmake clean libzstd.a\n```\n\n----------------------------------------\n\nTITLE: Implementing SplitPattern in Go\nDESCRIPTION: SplitPattern splits a given file path pattern into base and pattern parts, using slashes. This assists with operations like Glob(), where directory traversal needs specific path segmentation. Its utility extends to transforming paths for os.DirFS() usage, especially where patterns include meta characters.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/bmatcuk/doublestar/v4/README.md#2025-04-22_snippet_15\n\nLANGUAGE: go\nCODE:\n```\nfunc SplitPattern(p string) (base, pattern string)\n```\n\nLANGUAGE: go\nCODE:\n```\nbase, pattern := SplitPattern(\"../../path/to/meta*/**\")\nfsys := os.DirFS(base)\nmatches, err := Glob(fsys, pattern)\n```\n\n----------------------------------------\n\nTITLE: Configuring Filebeat Output for VictoriaLogs in YAML\nDESCRIPTION: This YAML snippet shows the `output.elasticsearch` section of a Filebeat configuration file (`filebeat-vlogs.yml`). It demonstrates how to specify the target host for sending logs, in this case, directing Filebeat to send logs to a VictoriaLogs instance listening at `http://vlogs:9428/insert/elasticsearch/` using the Elasticsearch-compatible API endpoint. The `hosts` field should be updated if VictoriaLogs is running elsewhere.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/deployment/logs-benchmark/readme.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml\noutput.elasticsearch:\n  hosts: [ \"http://vlogs:9428/insert/elasticsearch/\" ]\n```\n```\n\n----------------------------------------\n\nTITLE: Reloading vmauth Configuration via SIGHUP (Shell)\nDESCRIPTION: Shell command to dynamically reload the `vmauth` configuration file (`-auth.config`). It sends the SIGHUP signal to the running `vmauth` process, identified using the `pidof vmauth` command.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmauth.md#2025-04-22_snippet_33\n\nLANGUAGE: shell\nCODE:\n```\nkill -HUP `pidof vmauth`\n\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Go Get Command for Contrib Repository\nDESCRIPTION: This snippet illustrates how to use the go get command to fetch a specific version of a module from the contrib repository, including the major version number in the module path for versions v2 or higher.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/go.opentelemetry.io/otel/VERSIONING.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngo get go.opentelemetry.io/contrib/instrumentation/host/v2@v2.0.1\n```\n\n----------------------------------------\n\nTITLE: Unpacking Syslog Messages in VictoriaLogs Query\nDESCRIPTION: Demonstrates how to use the unpack_syslog pipe to parse Syslog messages from the _msg field for logs in the last 5 minutes.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_165\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m | unpack_syslog from _msg\n```\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m | unpack_syslog\n```\n\n----------------------------------------\n\nTITLE: Basic Elasticsearch Output Configuration for VictoriaLogs\nDESCRIPTION: Basic Logstash configuration for sending logs to VictoriaLogs using the Elasticsearch output plugin. Specifies message field, timestamp field, and stream fields for log processing.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/data-ingestion/Logstash.md#2025-04-22_snippet_0\n\nLANGUAGE: logstash\nCODE:\n```\noutput {\n  elasticsearch {\n    hosts => [\"http://localhost:9428/insert/elasticsearch/\"]\n    parameters => {\n        \"_msg_field\" => \"message\"\n        \"_time_field\" => \"@timestamp\"\n        \"_stream_fields\" => \"host.name,process.name\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Optimizing Binary Operations with Label Filters - MetricsQL\nDESCRIPTION: Demonstrates how missing label filters in binary operations can slow down queries by fetching excessive time series data. Adding explicit label filters to both operands improves performance by reducing unnecessary data fetches. This snippet is intended for MetricsQL users interested in optimizing their time series queries in VictoriaMetrics.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/changelog/CHANGELOG_2020.md#2025-04-22_snippet_2\n\nLANGUAGE: MetricsQL\nCODE:\n```\nnode_filesystem_files{ host=\"$host\", mountpoint=\"/\" } - node_filesystem_files_free\n```\n\n----------------------------------------\n\nTITLE: Authenticating with User-Assigned Managed Identity using autorest/adal in Go\nDESCRIPTION: This Go snippet shows how to specify a user-assigned managed identity's client ID when using `autorest/adal`. It involves setting the `ClientID` field within `adal.ManagedIdentityOptions` when calling `adal.NewServicePrincipalTokenFromManagedIdentity`.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/Azure/azure-sdk-for-go/sdk/azidentity/MIGRATION.md#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/Azure/go-autorest/autorest/adal\"\n\nopts := &adal.ManagedIdentityOptions{ClientID: \"...\"}\nspt, err := adal.NewServicePrincipalTokenFromManagedIdentity(\"https://management.azure.com/\")\nhandle(err)\n```\n\n----------------------------------------\n\nTITLE: Getting Last Value with `last` in MetricsQL\nDESCRIPTION: The `last` function returns the most recent (last) sample value received for a metric within the specified interval. This MetricsQL query shows its approximate equivalence to the `last_over_time` function.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/stream-aggregation.md#2025-04-22_snippet_21\n\nLANGUAGE: metricsql\nCODE:\n```\nlast_over_time(some_metric[interval])\n```\n\n----------------------------------------\n\nTITLE: Retrieving log context using stream_context pipe in LogsQL\nDESCRIPTION: Query that retrieves logs surrounding stacktrace entries, including 10 logs before and 100 logs after each occurrence, from the last 5 minutes.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/logsql-examples.md#2025-04-22_snippet_23\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m stacktrace | stream_context before 10 after 100\n```\n\n----------------------------------------\n\nTITLE: Selecting Last Value in Range Across Series - MetricsQL (English)\nDESCRIPTION: The `range_last(q)` function selects the last data point’s value in every time series returned by `q`. This can be used to extract the final sample for each series over a time range.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/MetricsQL.md#2025-04-22_snippet_83\n\nLANGUAGE: MetricsQL\nCODE:\n```\n`range_last(q)`\n```\n\n----------------------------------------\n\nTITLE: Configuring vmagent DNS SRV Remote Write URL\nDESCRIPTION: Example of using DNS SRV addresses in vmagent's remote write URL configuration.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/changelog/CHANGELOG_2024.md#2025-04-22_snippet_24\n\nLANGUAGE: shell\nCODE:\n```\n-remoteWrite.url=http://srv+victoria-metrics/api/v1/write\n```\n\n----------------------------------------\n\nTITLE: Calculating Median Value Over Time in PromQL\nDESCRIPTION: The median_over_time function computes the median value over raw samples on a given lookbehind window for each time series. It is typically used with gauges.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_26\n\nLANGUAGE: promql\nCODE:\n```\nmedian_over_time(series_selector[d])\n```\n\n----------------------------------------\n\nTITLE: Finding unique combinations of field values in LogsQL\nDESCRIPTION: Query that returns unique combinations of host and path field values from logs in the last 5 minutes using the uniq pipe with multiple fields.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/logsql-examples.md#2025-04-22_snippet_17\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m | uniq by (host, path)\n```\n\n----------------------------------------\n\nTITLE: Grouping Series in PromQL\nDESCRIPTION: The group function returns 1 per each group for time series returned by a query.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_146\n\nLANGUAGE: promql\nCODE:\n```\ngroup(q) by (group_labels)\n```\n\n----------------------------------------\n\nTITLE: Improving OTLP Exporter Retry Error Logging in Go\nDESCRIPTION: Enhances the exporters in `go.opentelemetry.io/otel/exporters/otlp`. When retry attempts time out, the final retryable error encountered will now be printed to the configured logger, providing more context on persistent export failures.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-22_snippet_28\n\nLANGUAGE: Go\nCODE:\n```\ngo.opentelemetry.io/otel/exporters/otlp\n// Change: Prints final retryable error on timeout.\n```\n\n----------------------------------------\n\nTITLE: Enabling Debug Mode in Promtail Configuration\nDESCRIPTION: This configuration enables debug mode for VictoriaLogs ingestion, which is useful for verifying the correct setup of log fields and stream fields.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/data-ingestion/Promtail.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nclients:\n  - url: \"http://localhost:9428/insert/loki/api/v1/push?debug=1\"\n```\n\n----------------------------------------\n\nTITLE: Creating Restore Mark via CLI in Kubernetes (Relative Path) (Shell)\nDESCRIPTION: Fourth step in the Kubernetes restore workflow: using `vmbackupmanager restore create` with a relative backup path inside the `vmbackupmanager` container to create a restore mark. This uses the currently configured remote storage.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmbackupmanager.md#2025-04-22_snippet_25\n\nLANGUAGE: sh\nCODE:\n```\n$ /vmbackupmanager-prod restore create daily/2023-04-07\n\n```\n\n----------------------------------------\n\nTITLE: Writer I/O Error Log\nDESCRIPTION: Logs an error when the writer fails to send data due to an I/O error during the write process. Details include the number of points (`N`), query key, target URL, and specific error message. Placeholders `{{scheduler_alias}}`, `{{N}}`, `{{query_key}}`, `{{url}}`, and `{{error_message}}` provide context.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/anomaly-detection/components/monitoring.md#2025-04-22_snippet_24\n\nLANGUAGE: text\nCODE:\n```\n[Scheduler {{scheduler_alias}}] Cannot write {{N}} points for {{query_key}}: I/O error for {{url}} {{error_message}}\n```\n\n----------------------------------------\n\nTITLE: Using the s2d Command-Line Decompression Tool\nDESCRIPTION: Displays the usage instructions and options for the `s2d` command-line tool. It decompresses specified `.s2` or `.snappy` files (including URLs or stdin), removing the extension for the output filename. Options include output redirection, offset/tail seeking (requires index), verification, and source file deletion.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/klauspost/compress/s2/README.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nUsage: s2d [options] file1 file2\n\nDecompresses all files supplied as input. Input files must end with '.s2' or '.snappy'.\nOutput file names have the extension removed. By default output files will be overwritten.\nUse - as the only file name to read from stdin and write to stdout.\n\nWildcards are accepted: testdir/*.txt will compress all files in testdir ending with .txt\nDirectories can be wildcards as well. testdir/*/*.txt will match testdir/subdir/b.txt\n\nFile names beginning with 'http://' and 'https://' will be downloaded and decompressed.\nExtensions on downloaded files are ignored. Only http response code 200 is accepted.\n\nOptions:\n  -bench int\n    \tRun benchmark n times. No output will be written\n  -c\tWrite all output to stdout. Multiple input files will be concatenated\n  -help\n    \tDisplay help\n  -o string\n        Write output to another file. Single input file only\n  -offset string\n        Start at offset. Examples: 92, 64K, 256K, 1M, 4M. Requires Index\n  -q    Don't write any output to terminal, except errors\n  -rm\n        Delete source file(s) after successful decompression\n  -safe\n        Do not overwrite output files\n  -tail string\n        Return last of compressed file. Examples: 92, 64K, 256K, 1M, 4M. Requires Index\n  -verify\n    \tVerify files, but do not write output                                      \n```\n\n----------------------------------------\n\nTITLE: Benchmark Results for MapOf vs. sync.Map\nDESCRIPTION: This plaintext snippet shows benchmark results for comparing MapOf and sync.Map implementations in Go under varying read and write loads. The benchmark evaluates the average time per operation with warm-up using varying CPU setups.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/puzpuzpuz/xsync/v3/BENCHMARKS.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n1,000 \\\"[int, int]\\\" entries with a warm-up, 100% Loads:\\nIntegerMapOf_WarmUp/reads=100%                  24.0ns ± 0%\\nIntegerMapOf_WarmUp/reads=100%-2                12.0ns ± 0%\\nIntegerMapOf_WarmUp/reads=100%-4                6.02ns ± 0%\\nIntegerMapOf_WarmUp/reads=100%-8                3.01ns ± 0%\\nIntegerMapOf_WarmUp/reads=100%-16               1.50ns ± 0%\\nIntegerMapOf_WarmUp/reads=100%-32               0.75ns ± 0%\\nIntegerMapOf_WarmUp/reads=100%-64               0.38ns ± 0%\\nIntegerMapStandard_WarmUp/reads=100%            55.3ns ± 0%\\nIntegerMapStandard_WarmUp/reads=100%-2          27.6ns ± 0%\\nIntegerMapStandard_WarmUp/reads=100%-4          16.1ns ± 3%\\nIntegerMapStandard_WarmUp/reads=100%-8          8.35ns ± 7%\\nIntegerMapStandard_WarmUp/reads=100%-16         4.24ns ± 7%\\nIntegerMapStandard_WarmUp/reads=100%-32         2.18ns ± 6%\\nIntegerMapStandard_WarmUp/reads=100%-64         1.11ns ± 3%\\n\\n1,000 \\\"[int, int]\\\" entries with a warm-up, 99% Loads, 0.5% Stores, 0.5% Deletes:\\nIntegerMapOf_WarmUp/reads=99%                   31.0ns ± 0%\\nIntegerMapOf_WarmUp/reads=99%-2                 16.4ns ± 1%\\nIntegerMapOf_WarmUp/reads=99%-4                 8.42ns ± 0%\\nIntegerMapOf_WarmUp/reads=99%-8                 4.41ns ± 0%\\nIntegerMapOf_WarmUp/reads=99%-16                2.38ns ± 2%\\nIntegerMapOf_WarmUp/reads=99%-32                1.37ns ± 4%\\nIntegerMapOf_WarmUp/reads=99%-64                0.85ns ± 2%\\nIntegerMapStandard_WarmUp/reads=99%              121ns ± 1%\\nIntegerMapStandard_WarmUp/reads=99%-2            109ns ± 3%\\nIntegerMapStandard_WarmUp/reads=99%-4            115ns ± 4%\\nIntegerMapStandard_WarmUp/reads=99%-8            114ns ± 2%\\nIntegerMapStandard_WarmUp/reads=99%-16           105ns ± 2%\\nIntegerMapStandard_WarmUp/reads=99%-32          97.0ns ± 3%\\nIntegerMapStandard_WarmUp/reads=99%-64          98.0ns ± 2%\\n\\n1,000 \\\"[int, int]\\\" entries with a warm-up, 75% Loads, 12.5% Stores, 12.5% Deletes:\\nIntegerMapOf_WarmUp/reads=75%-reads             46.2ns ± 1%\\nIntegerMapOf_WarmUp/reads=75%-reads-2           36.7ns ± 2%\\nIntegerMapOf_WarmUp/reads=75%-reads-4           22.0ns ± 1%\\nIntegerMapOf_WarmUp/reads=75%-reads-8           12.8ns ± 2%\\nIntegerMapOf_WarmUp/reads=75%-reads-16          7.69ns ± 1%\\nIntegerMapOf_WarmUp/reads=75%-reads-32          5.16ns ± 1%\\nIntegerMapOf_WarmUp/reads=75%-reads-64          4.91ns ± 1%\\nIntegerMapStandard_WarmUp/reads=75%-reads        156ns ± 0%\\nIntegerMapStandard_WarmUp/reads=75%-reads-2      177ns ± 1%\\nIntegerMapStandard_WarmUp/reads=75%-reads-4      197ns ± 1%\\nIntegerMapStandard_WarmUp/reads=75%-reads-8      221ns ± 2%\\nIntegerMapStandard_WarmUp/reads=75%-reads-16     242ns ± 1%\\nIntegerMapStandard_WarmUp/reads=75%-reads-32     258ns ± 1%\\nIntegerMapStandard_WarmUp/reads=75%-reads-64     264ns ± 1%\\n\n```\n\n----------------------------------------\n\nTITLE: Apache License 2.0 Boilerplate Notice Template (Plaintext)\nDESCRIPTION: This text block is the standard Apache License 2.0 boilerplate notice recommended for inclusion in source files, usually within comments. It requires replacing placeholders like `[yyyy]` with the copyright year(s) and `[name of copyright owner]` with the actual copyright holder's name. The notice asserts copyright and specifies the license terms under which the software is distributed, disclaiming warranties.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/aws/aws-sdk-go-v2/service/sts/LICENSE.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nCopyright [yyyy] [name of copyright owner]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Returning Value of Pi - PromQL - PromQL\nDESCRIPTION: pi() is a constant function that returns the mathematical constant Pi. No parameters or dependencies required. Supported by PromQL. Used for calculations involving circle, trigonometry, etc.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_118\n\nLANGUAGE: PromQL\nCODE:\n```\n`pi()`\n```\n\n----------------------------------------\n\nTITLE: Reducing Stored Samples with Stream Aggregation\nDESCRIPTION: This configuration downsamples metrics by reducing sample frequency to one per 5 minutes. It handles counter metrics (_total) differently from other metrics, applying appropriate aggregation functions.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/stream-aggregation.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n  # Aggregate metrics ending with _total with `total` output.\n  # See https://docs.victoriametrics.com/stream-aggregation/#aggregation-outputs\n- match: '{__name__=~\".+_total\"}'\n  interval: 5m\n  outputs: [total]\n\n  # Downsample other metrics with `count_samples`, `sum_samples`, `min` and `max` outputs\n  # See https://docs.victoriametrics.com/stream-aggregation/#aggregation-outputs\n- match: '{__name__!~\".+_total\"}'\n  interval: 5m\n  outputs: [count_samples, sum_samples, min, max]\n```\n\n----------------------------------------\n\nTITLE: Creating VictoriaMetrics Cluster via CRD (sh/yaml)\nDESCRIPTION: This command uses a heredoc (`cat << EOF ... EOF`) to pipe a YAML manifest directly into `kubectl apply`. The YAML defines a `VMCluster` custom resource named 'example-vmcluster-persistent'. It specifies a retention period of 12 months and sets the replica count for `vmstorage`, `vmselect`, and `vminsert` components to 2. This command instructs the VM Operator to create and manage the VictoriaMetrics Cluster components based on this specification.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/guides/getting-started-with-vm-operator/README.md#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ncat << EOF | kubectl apply -f -\napiVersion: operator.victoriametrics.com/v1beta1\nkind: VMCluster\nmetadata:\n  name: example-vmcluster-persistent\nspec:\n  # Add fields here\n  retentionPeriod: \"12\"\n  vmstorage:\n    replicaCount: 2\n  vmselect:\n    replicaCount: 2\n  vminsert:\n    replicaCount: 2\nEOF\n```\n\n----------------------------------------\n\nTITLE: Generating Normally Distributed Random Numbers using rand_normal() in MetricsQL\nDESCRIPTION: The `rand_normal(seed)` transform function generates pseudo-random numbers according to a normal (Gaussian) distribution. Providing an optional `seed` allows for deterministic random number generation.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_95\n\nLANGUAGE: MetricsQL\nCODE:\n```\nrand_normal(seed)\n```\n\n----------------------------------------\n\nTITLE: Installing UUID Package in Go\nDESCRIPTION: This snippet provides the shell command to install the google/uuid package for Go. The package allows users to generate and inspect UUIDs based on RFC 4122 and DCE 1.1 specifications. There are no specific prerequisites other than having a working Go environment.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/google/uuid/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/google/uuid\n```\n\n----------------------------------------\n\nTITLE: Installing VictoriaMetrics Cluster\nDESCRIPTION: Helm command to install VictoriaMetrics cluster with custom annotations for metric scraping configuration.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/guides/k8s-monitoring-via-vm-cluster/README.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncat <<EOF | helm install vmcluster vm/victoria-metrics-cluster -f -\nvmselect:\n  podAnnotations:\n      prometheus.io/scrape: \"true\"\n      prometheus.io/port: \"8481\"\n\nvminsert:\n  podAnnotations:\n      prometheus.io/scrape: \"true\"\n      prometheus.io/port: \"8480\"\n\nvmstorage:\n  podAnnotations:\n      prometheus.io/scrape: \"true\"\n      prometheus.io/port: \"8482\"\nEOF\n```\n\n----------------------------------------\n\nTITLE: OpenTSDB Migration Command-Line Flags\nDESCRIPTION: Lists the specific flags for migrating time series data from OpenTSDB, including server connection, concurrency settings, filtering options, time range selection, and TLS configuration.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmctl.md#2025-04-22_snippet_26\n\nLANGUAGE: shellhelp\nCODE:\n```\n./vmctl opentsdb -help\n\n   --otsdb-addr value\n     OpenTSDB server addr (default: \"http://localhost:4242\")\n   --otsdb-concurrency value\n     Number of concurrently running fetch queries to OpenTSDB per metric (default: 1)\n   --otsdb-retentions value [ --otsdb-retentions value ]\n     Retentions patterns to collect on. Each pattern should describe the aggregation performed for the query, \n     the row size (in HBase) that will define how long each individual query is, and the time range to query for. \n     e.g. sum-1m-avg:1h:3d. The first time range defined should be a multiple of the row size in HBase. \n     e.g. if the row size is 2 hours, 4h is good, 5h less so. We want each query to land on unique rows.\n   --otsdb-filters value [ --otsdb-filters value ]\n     Filters to process for discovering metrics in OpenTSDB (default: \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\")\n   --otsdb-offset-days value\n     Days to offset our 'starting' point for collecting data from OpenTSDB (default: 0)\n   --otsdb-hard-ts-start value\n     A specific timestamp to start from, will override using an offset (default: 0)\n   --otsdb-query-limit value\n     Result limit on meta queries to OpenTSDB (affects both metric name and tag value queries, recommended to use a value exceeding your largest series) (default: 100000000)\n   --otsdb-msecstime\n     Whether OpenTSDB is writing values in milliseconds or seconds (default: false)\n   --otsdb-normalize\n     Whether to normalize all data received to lower case before forwarding to VictoriaMetrics (default: false)\n   --otsdb-cert-file value\n     Optional path to client-side TLS certificate file to use when connecting to -otsdb-addr\n   --otsdb-key-file value\n     Optional path to client-side TLS key to use when connecting to -otsdb-addr\n   --otsdb-CA-file value\n     Optional path to TLS CA file to use for verifying connections to -otsdb-addr. By default, system CA is used\n   --otsdb-server-name value\n     Optional TLS server name to use for connections to -otsdb-addr. By default, the server name from -otsdb-addr is used\n   --otsdb-insecure-skip-verify\n     Whether to skip tls verification when connecting to -otsdb-addr (default: false)\n\n# There are flags available for influx, opentsdb, prometheus and remote-read commands. See below.\n```\n\n----------------------------------------\n\nTITLE: Interpolating Missing Data - PromQL - PromQL\nDESCRIPTION: interpolate(q) fills gaps in the input time series by linear interpolation between the previous and next non-empty points. No parameters except the source time series. Useful for smoothing or reconstructing missing data. No dependencies except PromQL-compatible data.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_108\n\nLANGUAGE: PromQL\nCODE:\n```\n`interpolate(q)`\n```\n\n----------------------------------------\n\nTITLE: Enabling Preset Mode in vmanomaly Configuration (YAML)\nDESCRIPTION: This YAML configuration snippet demonstrates how to activate a specific preset mode within the `vmanomaly` service. By setting the `preset` key to a chosen preset name (e.g., \"node-exporter\"), users can leverage preconfigured settings for anomaly detection, minimizing manual configuration effort. This setting is placed within the main `vmanomaly` configuration file.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/anomaly-detection/Presets.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\npreset: \"chosen_preset_name\"  # i.e. \"node-exporter\"\n```\n\n----------------------------------------\n\nTITLE: Constructing a Blob Client with Credentials - azblob - Go\nDESCRIPTION: Demonstrates how to initialize an azblob client by directly providing the storage account URL and a credential, following the updated constructor signature in the azblob module. This replaces the previous approach requiring a url.URL and a Pipeline. Dependencies: github.com/Azure/azure-sdk-for-go/sdk/storage/azblob, valid credential (e.g., azidentity or SharedKey). Parameters include the storage account URL string and credential object. Input: URL and credential; Output: azblob client object or error. Returns an error if parameters are invalid or the client cannot be constructed.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/migrationguide.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// new code\nclient, err := azblob.NewClient(\"<my storage account URL>\", cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Trimming Outliers Based on Z-Score using range_trim_zscore() in MetricsQL\nDESCRIPTION: The `range_trim_zscore(z, q)` transform function removes data points from time series `q` that are located farther than `z` standard deviations (`range_stddev(q)`) from the average (`range_avg(q)`). This is equivalent to `q ifnot (abs(q - range_avg(q)) > z*range_stddev(q))`.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_111\n\nLANGUAGE: MetricsQL\nCODE:\n```\nrange_trim_zscore(z, q)\n```\n\nLANGUAGE: MetricsQL\nCODE:\n```\nq ifnot (abs(q - range_avg(q)) > z*range_avg(q))\n```\n\n----------------------------------------\n\nTITLE: Defining AWS Credentials with Kubernetes Secrets (YAML)\nDESCRIPTION: This YAML snippet defines a Kubernetes Secret to securely store AWS S3 access and secret keys for vmbackup. The secret values should be base64 encoded. Prerequisites: a Kubernetes cluster and a properly configured AWS user. The secret is referenced by environment variables in related Deployments or Pods.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmbackup.md#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\\nkind: Secret\\nmetadata:\\n  name: vmbackup-credentials\\ndata:\\n  access_key: key\\n  secret_key: secret\\n\n```\n\n----------------------------------------\n\nTITLE: MetricsQL Query for Disk Saturation\nDESCRIPTION: Alert rule for detecting persistent disk saturation using filestream read duration metrics.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/changelog/CHANGELOG_2021.md#2025-04-22_snippet_5\n\nLANGUAGE: metricsql\nCODE:\n```\nrate(vm_filestream_read_duration_seconds_total) > 0.9\n```\n\n----------------------------------------\n\nTITLE: Configuration Example - MetricsQL Join Query\nDESCRIPTION: Example of a MetricsQL query demonstrating a join operation between Kubernetes pod resource requests and pod status metrics with filtering.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/changelog/CHANGELOG_2022.md#2025-04-22_snippet_22\n\nLANGUAGE: text\nCODE:\n```\nkube_pod_container_resource_requests{resource=\"cpu\"} * on (namespace,pod) group_left() (kube_pod_status_phase{phase=~\"Pending|Running\"}==1)\n```\n\n----------------------------------------\n\nTITLE: Applying Offset Modifier After an Aggregation in MetricsQL\nDESCRIPTION: Illustrates that the `offset` modifier in MetricsQL can be placed after an entire expression, including aggregations. This query calculates `sum(foo)` and then shifts the resulting time series back by 24 hours.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_11\n\nLANGUAGE: metricsql\nCODE:\n```\nsum(foo) offset 24h\n```\n\n----------------------------------------\n\nTITLE: Configuring VictoriaLogs Retention with Disk Space Limit\nDESCRIPTION: Command to start VictoriaLogs with specified disk space usage limit and retention period. Sets maximum disk space usage and long-term retention period to prevent data loss.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/README.md#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n/path/to/victoria-logs -retention.maxDiskSpaceUsageBytes=100GiB\n```\n\nLANGUAGE: sh\nCODE:\n```\n/path/to/victoria-logs -retention.maxDiskSpaceUsageBytes=10TiB -retentionPeriod=100y\n```\n\n----------------------------------------\n\nTITLE: Querying JSON with go-jmespath\nDESCRIPTION: This Go snippet demonstrates how to use the go-jmespath library to perform a JMESPath search on JSON data. Dependencies include the go-jmespath library and encoding/json for unmarshaling the JSON data into an interface. The example demonstrates querying an element from a nested JSON object, with the expected output being the element's value. Limitations include ensuring valid JSON input and ensuring the correct JMESPath expression is used.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/jmespath/go-jmespath/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n> import \"github.com/jmespath/go-jmespath\"\n>\n> var jsondata = []byte(`{\"foo\": {\"bar\": {\"baz\": [0, 1, 2, 3, 4]}}}`) // your data\n> var data interface{}\n> err := json.Unmarshal(jsondata, &data)\n> result, err := jmespath.Search(\"foo.bar.baz[2]\", data)\nresult = 2\n```\n\n----------------------------------------\n\nTITLE: Configuring On-Disk Mode with Docker Compose for VictoriaMetrics Anomaly Detection\nDESCRIPTION: Example configuration for setting up VictoriaMetrics Anomaly Detection with on-disk storage using docker-compose. This configuration maps host directories to container directories for model and data dumps, reducing RAM consumption through environment variables.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/anomaly-detection/FAQ.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  # ...\n  vmanomaly:\n    container_name: vmanomaly\n    image: victoriametrics/vmanomaly:v1.21.0\n    # ...\n    ports:\n      - \"8490:8490\"\n    restart: always\n    volumes:\n      - ./vmanomaly_config.yml:/config.yaml\n      - ./vmanomaly_license:/license\n      # map the host directory to the container directory\n      - vmanomaly_model_dump_dir:/vmanomaly/tmp/models\n      - vmanomaly_data_dump_dir:/vmanomaly/tmp/data\n    environment:\n      # set the environment variable for the model dump directory\n      - VMANOMALY_MODEL_DUMPS_DIR=/vmanomaly/tmp/models/\n      - VMANOMALY_DATA_DUMPS_DIR=/vmanomaly/tmp/data/\n    platform: \"linux/amd64\"\n    command:\n      - \"/config.yaml\"\n      - \"--licenseFile=/license\"\n\nvolumes:\n  # ...\n  vmanomaly_model_dump_dir: {}\n  vmanomaly_data_dump_dir: {}\n```\n\n----------------------------------------\n\nTITLE: Using tfirst_over_time with VictoriaMetrics - Markdown - Syntax Reference\nDESCRIPTION: This snippet refers to tfirst_over_time, which returns the timestamp (in seconds, millisecond precision) of the first sample within the window d for each series in VictoriaMetrics. The function strips metric names unless overridden. Parameters: series_selector, d (window duration). Output: timestamp of the first matching sample for each series.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_68\n\nLANGUAGE: Markdown\nCODE:\n```\n`tfirst_over_time(series_selector[d])`\n```\n\n----------------------------------------\n\nTITLE: Combining Time and Week Range Filters in LogsQL\nDESCRIPTION: Example of combining a regular time filter with a week range filter to query logs between Monday and Friday for the last 4 weeks.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_29\n\nLANGUAGE: logsql\nCODE:\n```\n_time:4w _time:week_range[Mon, Fri]\n```\n\n----------------------------------------\n\nTITLE: Deleting Time Series in VictoriaMetrics Cluster\nDESCRIPTION: This URL endpoint on `vmselect` is used to delete time series data for a specific tenant (`accountID`) matching the provided Prometheus time series selector (`match[]`). This operation should be used sparingly due to potential overhead, typically only for correcting accidentally ingested data.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/Cluster-VictoriaMetrics.md#2025-04-22_snippet_18\n\nLANGUAGE: url\nCODE:\n```\nhttp://<vmselect>:8481/delete/<accountID>/prometheus/api/v1/admin/tsdb/delete_series?match[]=<timeseries_selector_for_delete>\n```\n\n----------------------------------------\n\nTITLE: Calculating Average Values in PromQL\nDESCRIPTION: The avg function returns the average value per group for time series returned by a query.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_140\n\nLANGUAGE: promql\nCODE:\n```\navg(q) by (group_labels)\n```\n\n----------------------------------------\n\nTITLE: Filtering Series by Label Match with label_match Function\nDESCRIPTION: The label_match function drops time series from the query results where the specified label doesn't match the given regular expression.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_125\n\nLANGUAGE: metricsql\nCODE:\n```\nlabel_match(q, \"label\", \"regexp\")\n```\n\n----------------------------------------\n\nTITLE: Configuring vmalert-tool with Shell Parameters\nDESCRIPTION: This snippet outlines the command-line parameters available for configuring vmalert-tool unit tests. It includes file path specifications, alert label options, logging levels, and HTTP settings. Dependencies include access to vmalert-tool and related YAML configuration files. Parameters such as '-files' and '-loggerLevel' are used to specify input files and logging severity respectively; outputs include test execution with customized alert settings.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmalert-tool.md#2025-04-22_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\n  -files\n    File path or http url with test files. Supports an array of values separated by comma or specified via multiple flags. Supports hierarchical patterns and regexpes.\n      Examples:\n       -files=\\\"/path/to/file\\\". Path to a single test file.\n       -files=\\\"http://<some-server-addr>/path/to/test.yaml\\\". HTTP URL to a test file.\n       -files=\\\"dir/**/*.yaml\\\". Includes all the .yaml files in \\\"dir\\\" subfolders recursively.\n  -disableAlertgroupLabel\n    disable adding group's Name as label to generated alerts and time series. (default: false)\n  -external.label\n    Optional label in the form 'name=value' to add to all generated recording rules and alerts. Supports an array of values separated by comma or specified via multiple flags.\n  -external.url\n    Optional external URL to template in rule's labels or annotations.\n  -httpListenPort\n    Optional local port for incoming HTTP requests. If not specified, a random unoccupied port will be used.\n  -loggerLevel\n    Minimum level of errors to log. Possible values: INFO, WARN, ERROR, FATAL, PANIC (default \\\"ERROR\\\").\n```\n\n----------------------------------------\n\nTITLE: Creating a Snapshot Response in VictoriaMetrics (JSON)\nDESCRIPTION: JSON response returned by VictoriaMetrics when successfully creating a snapshot via the /snapshot/create endpoint. The response includes a status field and the name of the created snapshot.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/README.md#2025-04-22_snippet_40\n\nLANGUAGE: json\nCODE:\n```\n{\"status\":\"ok\",\"snapshot\":\"<snapshot-name>\"}\n```\n\n----------------------------------------\n\nTITLE: Configuring vlogsgenerator with Time Range and Stream Settings in Bash\nDESCRIPTION: Example command demonstrating how to configure vlogsgenerator with specific time range, number of streams, and logs per stream.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlogsgenerator/README.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nbin/vlogsgenerator \\\n  -start=2024-01-01 -end=2024-02-01 \\\n  -activeStreams=100 \\\n  -logsPerStream=10_000 \\\n  -addr=http://localhost:9428/insert/jsonline\n```\n\n----------------------------------------\n\nTITLE: Calculating Square Root in MetricsQL\nDESCRIPTION: A transform function that computes the square root for every data point in each time series returned by the query `q`. Metric names are removed from the results unless the `keep_metric_names` modifier is used. This function is supported by PromQL.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_131\n\nLANGUAGE: metricsql\nCODE:\n```\nsqrt(q)\n```\n\n----------------------------------------\n\nTITLE: Installing ULID Go Library\nDESCRIPTION: Demonstrates how to install the ULID library for Go using the 'go get' command. This is necessary for adding ULID functionality to your Go projects.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/oklog/ulid/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo get github.com/oklog/ulid\n```\n\n----------------------------------------\n\nTITLE: Calculating Delta Over Time in MetricsQL\nDESCRIPTION: The delta function calculates the difference between the last sample before and the last sample at a given lookbehind window for each time series. Its behavior differs slightly from Prometheus' delta function.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_30\n\nLANGUAGE: MetricsQL\nCODE:\n```\ndelta(series_selector[d])\n```\n\n----------------------------------------\n\nTITLE: Enabling mTLS for HTTP in vmagent Enterprise - Shell\nDESCRIPTION: This command runs vmagent so it accepts only mutually authenticated TLS (mTLS) connections on its HTTP endpoint, typically for use in closed networks. The flags -tls and -mtls activate TLS with required client certificates, and -remoteWrite.url specifies the remote write destination. A custom CA can be set with -mtlsCAFile if system-wide CA is not used. Requires enterprise vmagent and appropriate certs configured.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmagent.md#2025-04-22_snippet_63\n\nLANGUAGE: shell\nCODE:\n```\n./vmagent -tls -mtls -remoteWrite.url=...\n```\n\n----------------------------------------\n\nTITLE: Checking Feature Gate Status in Go\nDESCRIPTION: Demonstrates checking if a registered feature gate is enabled using its `IsEnabled()` method in Go. This allows conditional execution of code based on the feature's activation status. It's recommended to cache the result if checking repeatedly for performance reasons.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/go.opentelemetry.io/collector/featuregate/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n```go\nif myFeatureGate.IsEnabled() {\n\tsetupNewFeature()\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Verifying App Service Managed Identity Endpoint via curl - Shell Script\nDESCRIPTION: This shell snippet uses curl to request an access token from the Azure App Service managed identity endpoint, confirming it is set up correctly. It requires the environment variables IDENTITY_ENDPOINT and IDENTITY_HEADER to be present in the shell. The curl invocation passes a custom header, as required for managed identity authentication in App Service. The output contains credentials and should be kept secure.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/Azure/azure-sdk-for-go/sdk/azidentity/TROUBLESHOOTING.md#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncurl \"$IDENTITY_ENDPOINT?resource=https://management.core.windows.net&api-version=2019-08-01\" -H \"X-IDENTITY-HEADER: $IDENTITY_HEADER\"\n```\n\n----------------------------------------\n\nTITLE: Listing vminsert Command-Line Flags - VictoriaMetrics - ShellHelp\nDESCRIPTION: Presents the output of the vminsert binary with the -help parameter, providing a detailed listing of all supported command-line flags. Each line describes a flag, its usage, any accompanying parameters, default values where applicable, and additional documentation URLs. Intended for end users to aid in deploying and tuning vminsert. No code dependencies but requires the VictoriaMetrics vminsert binary to generate and interpret these flags. Inputs: none (for output), or any combination of documented flags for actual use. Output: details for each flag. Limitations: purely doc help, cannot validate flag correctness or compatibility.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/Cluster-VictoriaMetrics.md#2025-04-22_snippet_28\n\nLANGUAGE: shellhelp\nCODE:\n```\n  -blockcache.missesBeforeCaching int\\n     The number of cache misses before putting the block into cache. Higher values may reduce indexdb/dataBlocks cache size at the cost of higher CPU and disk read usage (default 2)\\n  -cacheExpireDuration duration\\n     Items are removed from in-memory caches after they aren't accessed for this duration. Lower values may reduce memory usage at the cost of higher CPU usage. See also -prevCacheRemovalPercent (default 30m0s)\\n  -cluster.tls\\n     Whether to use TLS for connections to -storageNode. See https://docs.victoriametrics.com/cluster-victoriametrics/#mtls-protection . This flag is available only in VictoriaMetrics enterprise. See https://docs.victoriametrics.com/enterprise/\\n  -cluster.tlsCAFile string\\n     Path to TLS CA file to use for verifying certificates provided by -storageNode if -cluster.tls flag is set. By default system CA is used. See https://docs.victoriametrics.com/cluster-victoriametrics/#mtls-protection . This flag is available only in VictoriaMetrics enterprise. See https://docs.victoriametrics.com/enterprise/\\n  -cluster.tlsCertFile string\\n     Path to client-side TLS certificate file to use when connecting to -storageNode if -cluster.tls flag is set. See https://docs.victoriametrics.com/cluster-victoriametrics/#mtls-protection . This flag is available only in VictoriaMetrics enterprise. See https://docs.victoriametrics.com/enterprise/\\n  -cluster.tlsInsecureSkipVerify\\n     Whether to skip verification of TLS certificates provided by -storageNode nodes if -cluster.tls flag is set. Note that disabled TLS certificate verification breaks security. This flag is available only in VictoriaMetrics enterprise. See https://docs.victoriametrics.com/enterprise/\\n  -cluster.tlsKeyFile string\\n     Path to client-side TLS key file to use when connecting to -storageNode if -cluster.tls flag is set. See https://docs.victoriametrics.com/cluster-victoriametrics/#mtls-protection . This flag is available only in VictoriaMetrics enterprise. See https://docs.victoriametrics.com/enterprise/\\n  -clusternative.vminsertConnsShutdownDuration duration\\n     The time needed for gradual closing of upstream vminsert connections during graceful shutdown. Bigger duration reduces spikes in CPU, RAM and disk IO load on the remaining lower-level clusters during rolling restart. Smaller duration reduces the time needed to close all the upstream vminsert connections, thus reducing the time for graceful shutdown. See https://docs.victoriametrics.com/cluster-victoriametrics/#improving-re-routing-performance-during-restart (default 25s)\\n  -clusternativeListenAddr string\\n     TCP address to listen for data from other vminsert nodes in multi-level cluster setup. See https://docs.victoriametrics.com/cluster-victoriametrics/#multi-level-cluster-setup . Usually :8400 should be set to match default vmstorage port for vminsert. Disabled work if empty\\n  -csvTrimTimestamp duration\\n     Trim timestamps when importing csv data to this duration. Minimum practical duration is 1ms. Higher duration (i.e. 1s) may be used for reducing disk space usage for timestamp data (default 1ms)\\n  -datadog.maxInsertRequestSize size\\n     The maximum size in bytes of a single DataDog POST request to /datadog/api/v2/series\\n     Supports the following optional suffixes for size values: KB, MB, GB, TB, KiB, MiB, GiB, TiB (default 67108864)\\n  -datadog.sanitizeMetricName\\n     Sanitize metric names for the ingested DataDog data to comply with DataDog behaviour described at https://docs.datadoghq.com/metrics/custom_metrics/#naming-custom-metrics (default true)\\n  -denyQueryTracing\\n     Whether to disable the ability to trace queries. See https://docs.victoriametrics.com/#query-tracing\\n  -disableRerouting\\n     Whether to disable re-routing when some of vmstorage nodes accept incoming data at slower speed compared to other storage nodes. Disabled re-routing limits the ingestion rate by the slowest vmstorage node. On the other side, disabled re-routing minimizes the number of active time series in the cluster during rolling restarts and during spikes in series churn rate. See also -disableReroutingOnUnavailable and -dropSamplesOnOverload (default true)\\n  -disableReroutingOnUnavailable\\n     Whether to disable re-routing when some of vmstorage nodes are unavailable. Disabled re-routing stops ingestion when some storage nodes are unavailable. On the other side, disabled re-routing minimizes the number of active time series in the cluster during rolling restarts and during spikes in series churn rate. See also -disableRerouting\\n  -dropSamplesOnOverload\\n     Whether to drop incoming samples if the destination vmstorage node is overloaded and/or unavailable. This prioritizes cluster availability over consistency, e.g. the cluster continues accepting all the ingested samples, but some of them may be dropped if vmstorage nodes are temporarily unavailable and/or overloaded. The drop of samples happens before the replication, so it's not recommended to use this flag with -replicationFactor enabled.\\n  -enableTCP6\\n     Whether to enable IPv6 for listening and dialing. By default, only IPv4 TCP and UDP are used\\n  -envflag.enable\\n     Whether to enable reading flags from environment variables in addition to the command line. Command line flag values have priority over values from environment vars. Flags are read only from the command line if this flag isn't set. See https://docs.victoriametrics.com/#environment-variables for more details\\n  -envflag.prefix string\\n     Prefix for environment variables if -envflag.enable is set\\n  -eula\\n     Deprecated, please use -license or -licenseFile flags instead. By specifying this flag, you confirm that you have an enterprise license and accept the ESA https://victoriametrics.com/legal/esa/ . This flag is available only in Enterprise binaries. See https://docs.victoriametrics.com/enterprise/\\n  -filestream.disableFadvise\\n     Whether to disable fadvise() syscall when reading large data files. The fadvise() syscall prevents from eviction of recently accessed data from OS page cache during background merges and backups. In some rare cases it is better to disable the syscall if it uses too much CPU\\n  -flagsAuthKey value\\n     Auth key for /flags endpoint. It must be passed via authKey query arg. It overrides -httpAuth.*\\n     Flag value can be read from the given file when using -flagsAuthKey=file:///abs/path/to/file or -flagsAuthKey=file://./relative/path/to/file . Flag value can be read from the given http/https url when using -flagsAuthKey=http://host/path or -flagsAuthKey=https://host/path\\n  -fs.disableMmap\\n     Whether to use pread() instead of mmap() for reading data files. By default, mmap() is used for 64-bit arches and pread() is used for 32-bit arches, since they cannot read data files bigger than 2^32 bytes in memory. mmap() is usually faster for reading small data chunks than pread()\\n  -graphite.sanitizeMetricName\\n     Sanitize metric names for the ingested Graphite data. See https://docs.victoriametrics.com/#how-to-send-data-from-graphite-compatible-agents-such-as-statsd\\n  -graphiteListenAddr string\\n     TCP and UDP address to listen for Graphite plaintext data. Usually :2003 must be set. Doesn't work if empty. See also -graphiteListenAddr.useProxyProtocol\\n  -graphiteListenAddr.useProxyProtocol\\n     Whether to use proxy protocol for connections accepted at -graphiteListenAddr . See https://www.haproxy.org/download/1.8/doc/proxy-protocol.txt\\n  -graphiteTrimTimestamp duration\\n     Trim timestamps for Graphite data to this duration. Minimum practical duration is 1s. Higher duration (i.e. 1m) may be used for reducing disk space usage for timestamp data (default 1s)\\n  -http.connTimeout duration\\n     Incoming connections to -httpListenAddr are closed after the configured timeout. This may help evenly spreading load among a cluster of services behind TCP-level load balancer. Zero value disables closing of incoming connections (default 2m0s)\\n  -http.disableResponseCompression\\n     Disable compression of HTTP responses to save CPU resources. By default, compression is enabled to save network bandwidth\\n  -http.header.csp string\\n     Value for 'Content-Security-Policy' header, recommended: \\\"default-src 'self'\\\"\\n  -http.header.frameOptions string\\n     Value for 'X-Frame-Options' header\\n  -http.header.hsts string\\n     Value for 'Strict-Transport-Security' header, recommended: 'max-age=31536000; includeSubDomains'\\n  -http.idleConnTimeout duration\\n     Timeout for incoming idle http connections (default 1m0s)\\n  -http.maxGracefulShutdownDuration duration\\n     The maximum duration for a graceful shutdown of the HTTP server. A highly loaded server may require increased value for a graceful shutdown (default 7s)\\n  -http.pathPrefix string\\n     An optional prefix to add to all the paths handled by http server. For example, if '-http.pathPrefix=/foo/bar' is set, then all the http requests will be handled on '/foo/bar/*' paths. This may be useful for proxied requests. See https://www.robustperception.io/using-external-urls-and-proxies-with-prometheus\\n  -http.shutdownDelay duration\\n     Optional delay before http server shutdown. During this delay, the server returns non-OK responses from /health page, so load balancers can route new requests to other servers\\n  -httpAuth.password value\\n     Password for HTTP server's Basic Auth. The authentication is disabled if -httpAuth.username is empty\\n     Flag value can be read from the given file when using -httpAuth.password=file:///abs/path/to/file or -httpAuth.password=file://./relative/path/to/file . Flag value can be read from the given http/https url when using -httpAuth.password=http://host/path or -httpAuth.password=https://host/path\\n  -httpAuth.username string\\n     Username for HTTP server's Basic Auth. The authentication is disabled if empty. See also -httpAuth.password\\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Rule Templates with glob patterns in vmalert\nDESCRIPTION: Examples showing different ways to specify paths to Go template definitions for rules annotations templating using the -rule.templates flag. Demonstrates single file paths, relative paths with glob patterns, and recursive directory patterns.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmalert.md#2025-04-22_snippet_27\n\nLANGUAGE: bash\nCODE:\n```\n-rule.templates=\"/path/to/file\". Path to a single file with go templates\n-rule.templates=\"dir/*.tpl\" -rule.templates=\"/*.tpl\". Relative path to all .tpl files in \"dir\" folder,\nabsolute path to all .tpl files in root.\n-rule.templates=\"dir/**/*.tpl\". Includes all the .tpl files in \"dir\" subfolders recursively.\n```\n\n----------------------------------------\n\nTITLE: Creating Restore Mark via CLI (Full Path) (Shell)\nDESCRIPTION: Alternative second step in the CLI restore workflow: using `vmbackupmanager restore create` with a full backup path ('azblob://test1/vmbackupmanager/daily/2023-04-07'). This allows restoring from any remote storage location, regardless of the current configuration.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmbackupmanager.md#2025-04-22_snippet_21\n\nLANGUAGE: sh\nCODE:\n```\n$ /vmbackupmanager-prod restore create azblob://test1/vmbackupmanager/daily/2023-04-07\n\n```\n\n----------------------------------------\n\nTITLE: First Pipe Basic Usage\nDESCRIPTION: Returns the first N logs from a query after sorting by specified fields. Example shows retrieving first 10 logs with smallest request_duration over 5 minutes.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_101\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m | first 10 by (request_duration)\n```\n\n----------------------------------------\n\nTITLE: Restricting Access with JWT Claims\nDESCRIPTION: Utilizes JWT claims to add additional filtering to metric queries. Claims like 'extra_labels' and 'extra_filters' are used to tailor metric access based on user attributes.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/guides/grafana-vmgateway-openid-configuration/README.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"vm_access\": {\n    \"extra_labels\": {\n      \"team\": \"dev\"\n    },\n    \"extra_filters\": [\"{env=~\\\"aws|gcp\\\",cluster!=\\\"production\\\"}\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example JSON Lines Output from VictoriaMetrics Export\nDESCRIPTION: Shows the expected JSON Lines format output when exporting the data imported in the previous CSV examples. Each line represents a time series with its metric name, labels, values, and timestamps.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/README.md#2025-04-22_snippet_55\n\nLANGUAGE: json\nCODE:\n```\n{\"metric\":{\"__name__\":\"bid\",\"market\":\"NASDAQ\",\"ticker\":\"MSFT\"},\"values\":[1.67],\"timestamps\":[1583865146520]}\n{\"metric\":{\"__name__\":\"bid\",\"market\":\"NYSE\",\"ticker\":\"GOOG\"},\"values\":[4.56],\"timestamps\":[1583865146495]}\n{\"metric\":{\"__name__\":\"ask\",\"market\":\"NASDAQ\",\"ticker\":\"MSFT\"},\"values\":[3.21],\"timestamps\":[1583865146520]}\n{\"metric\":{\"__name__\":\"ask\",\"market\":\"NYSE\",\"ticker\":\"GOOG\"},\"values\":[1.23],\"timestamps\":[1583865146495]}\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Compose for VictoriaMetrics Multi-tenant Access Testing\nDESCRIPTION: Docker Compose configuration for deploying a multi-tenant VictoriaMetrics environment with Keycloak, Grafana, vmagent, VictoriaMetrics in both cluster and single-node modes, and vmgateway instances for testing tenant access control.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/guides/grafana-vmgateway-openid-configuration/README.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\n\nservices:\n  keycloak:\n    image: quay.io/keycloak/keycloak:26.1\n    command:\n      - start-dev\n    ports:\n      - 3001:8080\n    environment:\n      KC_BOOTSTRAP_ADMIN_USERNAME: admin\n      KC_BOOTSTRAP_ADMIN_PASSWORD: change_me\n\n  grafana:\n    image: grafana/grafana:11.5.2\n    network_mode: host\n    volumes:\n      - ./grafana.ini:/etc/grafana/grafana.ini\n      - grafana_data:/var/lib/grafana/\n\n  vmsingle:\n    image: victoriametrics/victoria-metrics:v1.115.0\n    command:\n      - -httpListenAddr=0.0.0.0:8429\n\n  vmstorage:\n    image: victoriametrics/vmstorage:v1.115.0-cluster\n\n  vminsert:\n    image: victoriametrics/vminsert:v1.115.0-cluster\n    command:\n      - -storageNode=vmstorage:8400\n      - -httpListenAddr=0.0.0.0:8480\n\n  vmselect:\n    image: victoriametrics/vmselect:v1.115.0-cluster\n    command:\n      - -storageNode=vmstorage:8401\n      - -httpListenAddr=0.0.0.0:8481\n\n  vmagent:\n    image: victoriametrics/vmagent:v1.115.0\n    volumes:\n      - ./scrape.yaml:/etc/vmagent/config.yaml\n    command:\n      - -promscrape.config=/etc/vmagent/config.yaml\n      - -remoteWrite.url=http://vminsert:8480/insert/0/prometheus/api/v1/write\n      - -remoteWrite.url=http://vmsingle:8429/api/v1/write\n\n  vmgateway-cluster:\n    image: victoriametrics/vmgateway:v1.115.0-enterprise\n    ports:\n      - 8431:8431\n    volumes:\n      - ./vm-license.key:/opt/vm-license.key\n    command:\n      - -licenseFile=/opt/vm-license.key\n      - -license.forceOffline=true\n      - -enable.auth=true\n      - -clusterMode=true\n      - -write.url=http://vminsert:8480\n      - -read.url=http://vmselect:8481\n      - -httpListenAddr=0.0.0.0:8431\n      - -auth.oidcDiscoveryEndpoints=http://keycloak:8080/realms/master/.well-known/openid-configuration\n\n  vmgateway-single:\n    image: victoriametrics/vmgateway:v1.115.0-enterprise\n    ports:\n      - 8432:8431\n    volumes:\n      - ./vm-license.key:/opt/vm-license.key\n    command:\n      - -licenseFile=/opt/vm-license.key\n      - -enable.auth=true\n      - -write.url=http://vmsingle:8429\n      - -read.url=http://vmsingle:8429\n      - -httpListenAddr=0.0.0.0:8431\n      - -auth.oidcDiscoveryEndpoints=http://keycloak:8080/realms/master/.well-known/openid-configuration\n\nvolumes:\n  grafana_data:\n```\n\n----------------------------------------\n\nTITLE: Appending Seek Index to S2/Snappy Stream in Go\nDESCRIPTION: Shows how to create an S2 or Snappy compatible stream with an appended seek index. It initializes an `s2.NewWriter` with the `s2.WriterAddIndex()` option. When `enc.Close()` is called after writing data (e.g., using `io.Copy`), the seek index is automatically generated and appended to the end of the compressed stream as a skippable block, maintaining compatibility with standard decoders. Requires `io` and `s2` packages.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/klauspost/compress/s2/README.md#2025-04-22_snippet_14\n\nLANGUAGE: Go\nCODE:\n```\n```\n\t// Add Index to stream...\n\tenc := s2.NewWriter(w, s2.WriterAddIndex())\n\tio.Copy(enc, r)\n\tenc.Close()\n```\n```\n\n----------------------------------------\n\nTITLE: Label Replacement with label_replace Function in MetricsQL\nDESCRIPTION: The label_replace function applies a regex to a source label and stores the replacement in a destination label if the regex matches.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_131\n\nLANGUAGE: MetricsQL\nCODE:\n```\nlabel_replace(up{job=\"node-exporter\"}, \"foo\", \"bar-$1\", \"job\", \"node-(.+)\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Multi-tenancy in Promtail for VictoriaLogs\nDESCRIPTION: This configuration specifies a custom tenant for log storage in VictoriaLogs using the 'tenant_id' field with an 'AccountID:ProjectID' format.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/data-ingestion/Promtail.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nclients:\n  - url: \"http://localhost:9428/insert/loki/api/v1/push\"\n    tenant_id: \"12:34\"\n```\n\n----------------------------------------\n\nTITLE: Calculating Running Sum using running_sum() in MetricsQL\nDESCRIPTION: The `running_sum(q)` transform function computes the running sum for each time series returned by the query `q`. Each output point is the cumulative sum of all preceding points in the input series.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_119\n\nLANGUAGE: MetricsQL\nCODE:\n```\nrunning_sum(q)\n```\n\n----------------------------------------\n\nTITLE: Using Fractional Durations for Lookbehind and Offset in MetricsQL\nDESCRIPTION: Shows that MetricsQL supports fractional values in lookbehind window durations (`[...]`) and `offset` modifiers. This example calculates the rate over a 1.5-minute window, offset by 0.5 days.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_12\n\nLANGUAGE: metricsql\nCODE:\n```\nrate(node_network_receive_bytes_total[1.5m] offset 0.5d)\n```\n\n----------------------------------------\n\nTITLE: Fetching Series with Labels - Shell\nDESCRIPTION: This snippet fetches series names with their labels for a specified metric and time range on both single-node and cluster setups. It returns series observed during the last 24 hours by default. Custom time ranges can be specified using 'start' and 'end' parameters. It utilizes curl for making HTTP POST requests.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/url-examples.md#2025-04-22_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\ncurl http://localhost:8428/prometheus/api/v1/series -d 'match[]=vm_http_request_errors_total'\n```\n\nLANGUAGE: sh\nCODE:\n```\ncurl http://<vmselect>:8481/select/0/prometheus/api/v1/series -d 'match[]=vm_http_request_errors_total'\n```\n\n----------------------------------------\n\nTITLE: Listing Registered Tenants in VictoriaMetrics Cluster via API\nDESCRIPTION: Provides the API endpoint `http://<vmselect>:8481/admin/tenants` for retrieving a list of registered tenants in a VictoriaMetrics cluster setup. Requires access to a `vmselect` node.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/changelog/CHANGELOG_2022.md#2025-04-22_snippet_5\n\nLANGUAGE: http\nCODE:\n```\nhttp://<vmselect>:8481/admin/tenants\n```\n\n----------------------------------------\n\nTITLE: High-Performance Filebeat Configuration\nDESCRIPTION: Optimized configuration for high ingestion rates with increased worker count and bulk size settings.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/data-ingestion/Filebeat.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\noutput.elasticsearch:\n  hosts: [\"http://localhost:9428/insert/elasticsearch/\"]\n  parameters:\n    _msg_field: \"message\"\n    _time_field: \"@timestamp\"\n    _stream_fields: \"host.name,log.file.path\"\n  worker: 8\n  bulk_max_size: 1000\n```\n\n----------------------------------------\n\nTITLE: Calculating Inverse Tangent (Arctan) in MetricsQL\nDESCRIPTION: A transform function computing the inverse tangent for each data point in the time series returned by `q`. If applied directly to a series selector, `default_rollup()` is implicitly used. Metric names are stripped by default; use `keep_metric_names` to preserve them. Supported by PromQL.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_71\n\nLANGUAGE: MetricsQL\nCODE:\n```\n`atan(q)`\n```\n\n----------------------------------------\n\nTITLE: Retrieving Timestamp of Maximum Value in VictoriaMetrics\nDESCRIPTION: The tmax_over_time function returns the timestamp in seconds with millisecond precision for the raw sample with the maximum value within a specified time window for each time series.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/MetricsQL.md#2025-04-22_snippet_74\n\nLANGUAGE: metricsql\nCODE:\n```\ntmax_over_time(series_selector[d])\n```\n\n----------------------------------------\n\nTITLE: VictoriaMetrics Cluster Load Balancer Configuration\nDESCRIPTION: YAML configuration for vmauth to load balance insert and select requests for a VictoriaMetrics cluster.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmauth.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nunauthorized_user:\n  url_map:\n  - src_paths:\n    - \"/insert/.*\"\n    url_prefix:\n    - \"http://vminsert-1:8480/\"\n    - \"http://vminsert-2:8480/\"\n    - \"http://vminsert-3:8480/\"\n  - src_paths:\n    - \"/select/.*\"\n    url_prefix:\n    - \"http://vmselect-1:8481/\"\n    - \"http://vmselect-2:8481/\"\n```\n\n----------------------------------------\n\nTITLE: Including README Content in Documentation\nDESCRIPTION: Hugo shortcode for including content from README.md file into the current page.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/guides/migrate-from-influx/_index.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{{% content \"README.md\" %}}\n```\n\n----------------------------------------\n\nTITLE: Custom Container Discovery in Kubernetes\nDESCRIPTION: Configuration for discovering and scraping metrics from specific containers in Kubernetes with label preservation for metadata.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/scrape_config_examples.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nscrape_configs:\n- job_name: my-super-app\n  kubernetes_sd_configs:\n  - role: pod\n  relabel_configs:\n\n    # Leave only targets with the container name, which matches the `job_name` specified above\n    # See https://docs.victoriametrics.com/relabeling/#how-to-modify-instance-and-job for details on `job` label.\n    #\n  - source_labels: [__meta_kubernetes_pod_container_name]\n    target_label: job\n    action: keepequal\n\n    # Keep namespace, node, pod and container labels, so they can be used\n    # for joining additional `state` labels exposed by kube-state-metrics\n    # for the particular target.\n    #\n  - source_labels: [__meta_kubernetes_namespace]\n    target_label: namespace\n  - source_labels: [__meta_kubernetes_pod_node_name]\n    target_label: node\n  - source_labels: [__meta_kubernetes_pod_name]\n    target_label: pod\n  - source_labels: [__meta_kubernetes_pod_container_name]\n    target_label: container\n```\n\n----------------------------------------\n\nTITLE: Applying Exponential Smoothing using smooth_exponential() in MetricsQL\nDESCRIPTION: The `smooth_exponential(q, sf)` transform function applies exponential moving average smoothing to the data points of each time series returned by `q`, using the specified smoothing factor `sf`. This helps in reducing noise and highlighting trends.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_126\n\nLANGUAGE: MetricsQL\nCODE:\n```\nsmooth_exponential(q, sf)\n```\n\n----------------------------------------\n\nTITLE: Preserving Metric Names After Applying a Function using `keep_metric_names` in MetricsQL\nDESCRIPTION: Demonstrates the `keep_metric_names` modifier applied to a rollup function (`rate`). This modifier prevents the function from dropping the original metric names (`foo`, `bar`), which can avoid 'duplicate time series' errors when the function operates on series with different names but identical labels otherwise.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_21\n\nLANGUAGE: metricsql\nCODE:\n```\nrate({__name__=~\"foo|bar\"}) keep_metric_names\n```\n\n----------------------------------------\n\nTITLE: Environment Variables for OTLP Configuration\nDESCRIPTION: List of environment variables added for configuring OTLP/HTTP and OTLP/gRPC settings including endpoints, TLS certificates, headers, compression and timeouts.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-22_snippet_49\n\nLANGUAGE: plaintext\nCODE:\n```\nOTEL_EXPORTER_OTLP_ENDPOINT\nOTEL_EXPORTER_OTLP_TRACES_ENDPOINT\nOTEL_EXPORTER_OTLP_METRICS_ENDPOINT\nOTEL_EXPORTER_OTLP_HEADERS\nOTEL_EXPORTER_OTLP_TRACES_HEADERS\nOTEL_EXPORTER_OTLP_METRICS_HEADERS\nOTEL_EXPORTER_OTLP_COMPRESSION\nOTEL_EXPORTER_OTLP_TRACES_COMPRESSION\nOTEL_EXPORTER_OTLP_METRICS_COMPRESSION\nOTEL_EXPORTER_OTLP_TIMEOUT\nOTEL_EXPORTER_OTLP_TRACES_TIMEOUT\nOTEL_EXPORTER_OTLP_METRICS_TIMEOUT\nOTEL_EXPORTER_OTLP_CERTIFICATE\nOTEL_EXPORTER_OTLP_TRACES_CERTIFICATE\nOTEL_EXPORTER_OTLP_METRICS_CERTIFICATE\n```\n\n----------------------------------------\n\nTITLE: Enabling External Metric Producers with Producer Interface in Go SDK\nDESCRIPTION: Adds the `Producer` interface and the `Reader.RegisterProducer(Producer)` method to the `go.opentelemetry.io/otel/sdk/metric` package. This feature allows external systems or components to act as producers of metrics, integrating them into the OpenTelemetry SDK's metric collection pipeline via a registered `Reader`.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-22_snippet_9\n\nLANGUAGE: Go\nCODE:\n```\ngo.opentelemetry.io/otel/sdk/metric\n// Interface: Producer\n// Method: Reader.RegisterProducer(Producer)\n```\n\n----------------------------------------\n\nTITLE: Implicit Query Conversion for Missing Lookbehind Window in MetricsQL\nDESCRIPTION: Shows how VictoriaMetrics automatically adds a lookbehind window to rollup functions if it's missing.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_156\n\nLANGUAGE: metricsql\nCODE:\n```\navg_over_time(temperature)\n```\n\n----------------------------------------\n\nTITLE: Removing Prefixes from Label Names using YAML\nDESCRIPTION: The configuration removes '__meta_kubernetes_pod_label_' from pod-level label names, leaving just the core label. It utilizes 'labelmap' relabeling and requires regex support in RE2 format.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/relabeling.md#2025-04-22_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\n- job_name: k8s\n  kubernetes_sd_configs:\n  - role: pod\n  relabel_configs:\n  - action: labelmap\n    regex: \"__meta_kubernetes_pod_label_(.+)\"\n    replacement: \"$1\"\n```\n\n----------------------------------------\n\nTITLE: Running Blackfriday Markdown Processing in Go\nDESCRIPTION: This snippet demonstrates how to process Markdown input as a byte slice using Blackfriday's Run function in Go. The method returns the rendered output with the default set of extensions enabled. No additional dependencies are required beyond importing the Blackfriday library. The main input is a byte slice containing the Markdown text and the output is a rendered result, usually as HTML.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/russross/blackfriday/v2/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\noutput := blackfriday.Run(input)\n\n```\n\n----------------------------------------\n\nTITLE: Creating License Secret via kubectl\nDESCRIPTION: Command to create a Kubernetes secret for VictoriaMetrics license using kubectl.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/enterprise.md#2025-04-22_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nkubectl create secret generic vm-license --from-literal=license={BASE64_ENCODED_LICENSE_KEY}\n```\n\n----------------------------------------\n\nTITLE: Install uniseg Package\nDESCRIPTION: This command installs the 'uniseg' package which is used for Unicode text segmentation in Go. It requires Go to be installed on your system.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/rivo/uniseg/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/rivo/uniseg\n```\n\n----------------------------------------\n\nTITLE: Specifying Prometheus Scrape Configuration in vmsingle (Bash)\nDESCRIPTION: Refers to the `-promscrape.config` command-line flag used in `vmsingle`. This flag points to the configuration file defining Prometheus scrape targets. A bug fix in v1.113.0 addresses an issue related to applying global relabeling rules (from `-relabelConfig`) to metrics scraped via this configuration.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/changelog/CHANGELOG.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n-promscrape.config\n```\n\n----------------------------------------\n\nTITLE: Checking for Absence of Time Series Points in MetricsQL\nDESCRIPTION: A transform function that returns 1 if the input query `q` yields no time series points, and an empty result otherwise. If applied directly to a series selector, `default_rollup()` is implicitly used. This function is supported by PromQL.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_66\n\nLANGUAGE: MetricsQL\nCODE:\n```\n`absent(q)`\n```\n\n----------------------------------------\n\nTITLE: Posting NewRelic Events Payload to VictoriaMetrics Bulk Endpoint - Shell\nDESCRIPTION: This shell command posts the previously prepared 'newrelic.json' file as a request body to VictoriaMetrics' /newrelic/infra/v2/metrics/events/bulk endpoint using 'curl'. It sets the appropriate Content-Type header for JSON and uses --data-binary to preserve original formatting. The API endpoint must be reachable for successful ingestion.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/README.md#2025-04-22_snippet_35\n\nLANGUAGE: sh\nCODE:\n```\ncurl -X POST -H 'Content-Type: application/json' --data-binary @newrelic.json http://localhost:8428/newrelic/infra/v2/metrics/events/bulk\n```\n\n----------------------------------------\n\nTITLE: Identifying Labelset Collision Error Message (Text)\nDESCRIPTION: Shows the error message generated by vmalert when an alerting or recording rule evaluation produces multiple time series that have identical labelsets after processing. This commonly happens when labels like `__name__` are removed during evaluation.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmalert.md#2025-04-22_snippet_21\n\nLANGUAGE: text\nCODE:\n```\nresult contains metrics with the same labelset during evaluation\n```\n\n----------------------------------------\n\nTITLE: Installing jwt-go module using Go\nDESCRIPTION: This shell command installs the jwt-go module which is used for handling JSON Web Tokens in Go programs. Requires Go to be set up on your system. Once executed, jwt-go can be integrated into your Go application for JWT handling.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/golang-jwt/jwt/v5/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngo get -u github.com/golang-jwt/jwt/v5\n```\n\n----------------------------------------\n\nTITLE: Dropping Metrics by Name Pattern with 'drop_metrics' - YAML\nDESCRIPTION: Configures the 'drop_metrics' action to exclude metrics whose names match a given regex (e.g., 'foo|bar'). Requires VictoriaMetrics with support for custom relabeling actions. Main parameters: 'action' and 'regex'. Inputs: all metric names; output: metrics not matching the pattern. Use in YAML configurations for targeted exclusion of unwanted series.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmagent.md#2025-04-22_snippet_35\n\nLANGUAGE: YAML\nCODE:\n```\n- action: drop_metrics\n  regex: \"foo|bar\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes Service Discovery (`kubernetes_sd_configs`) in YAML\nDESCRIPTION: Example YAML configuration block for `kubernetes_sd_configs` within a VictoriaMetrics `scrape_configs` job. It shows options like `role`, `api_server`, `kubeconfig_file`, `namespaces`, `selectors`, and `attach_metadata` for discovering targets via the Kubernetes API. The `role` parameter determines the type of Kubernetes objects to discover (e.g., endpoints, service, pod, node, ingress).\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/sd_configs.md#2025-04-22_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\nscrape_configs:\n- job_name: kubernetes\n  kubernetes_sd_configs:\n\n    # role must contain the Kubernetes role of entities that should be discovered.\n    # It must have one of the following values:\n    # endpoints, endpointslice, service, pod, node or ingress.\n    # See docs below about each particular role.\n    #\n  - role: \"...\"\n\n    # api_server is an optional url for Kubernetes API server.\n    # By default, it is read from /var/run/secrets/kubernetes.io/serviceaccount/\n    #\n    # api_server: \"...\"\n\n    # kubeconfig_file is an optional path to a kubeconfig file.\n    # Note that api_server and kubeconfig_file are mutually exclusive.\n    #\n    # kubeconfig_file: \"...\"\n\n    # namespaces is an optional namespace for service discovery.\n    # By default, all namespaces are used.\n    # If own_namespace is set to true, then the current namespace is used for service discovery.\n    #\n    # namespaces:\n    #   own_namespace: <boolean>\n    #   names: [\"...\", \"...\"]\n\n    # selects is an optional label and field selectors to limit the discovery process to a subset of available resources.\n    # See https://kubernetes.io/docs/concepts/overview/working-with-objects/field-selectors/\n    # and https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/\n    # The `role: endpoints` supports pod, service and endpoints selectors.\n    # The `role: pod` supports node selectors when configured with `attach_metadata: {node: true}`.\n    # Other roles only support selectors matching the role itself (e.g. node role can only contain node selectors).\n    #\n    # selectors:\n    # - role: \"...\"\n    #   label: \"...\"\n    #   field: \"...\"\n\n    # attach_metadata is an optional metadata to attach to discovered targets.\n    # When `node` is set to true, then node metadata is attached to discovered targets.\n    # Valid for roles: pod, endpoints, endpointslice.\n    #\n    # Set `-promscrape.kubernetes.attachNodeMetadataAll` command-line flag\n    # for attaching `node` metadata for all the discovered targets.\n    #\n    # attach_metadata:\n    #   node: <boolean>\n\n    # Additional HTTP API client options can be specified here.\n    # See https://docs.victoriametrics.com/sd_configs/#http-api-client-options\n```\n\n----------------------------------------\n\nTITLE: Calculating Descent Over Time in MetricsQL\nDESCRIPTION: The descent_over_time function calculates the descent of raw sample values on a given lookbehind window for each time series. It's useful for tracking height loss in GPS tracking.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_34\n\nLANGUAGE: MetricsQL\nCODE:\n```\ndescent_over_time(series_selector[d])\n```\n\n----------------------------------------\n\nTITLE: Using Escaped Characters in Metric and Label Names (MetricsQL)\nDESCRIPTION: Demonstrates the use of backslash (`\\`) to escape special characters within metric names and label names/values in MetricsQL. This query selects time series named `foo-bar` with a label named `baz=aa` having the value `b`.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_18\n\nLANGUAGE: MetricsQL\nCODE:\n```\nfoo\\-bar{baz\\=aa=\"b\"}\n```\n\n----------------------------------------\n\nTITLE: Sorting Time Series Ascendingly in MetricsQL\nDESCRIPTION: A transform function that sorts time series returned by the query `q` in ascending order based on the value of their last data point. This function is supported by PromQL. See also `sort_desc` and `sort_by_label`.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_129\n\nLANGUAGE: metricsql\nCODE:\n```\nsort(q)\n```\n\n----------------------------------------\n\nTITLE: Enabling DataDog Dual Shipping via ENV Variable - Shell\nDESCRIPTION: This shell snippet sets DD_ADDITIONAL_ENDPOINTS as an environment variable with JSON-encoded data, configuring the DataDog agent to dual-ship metrics both to the default DataDog endpoint and to VictoriaMetrics. It requires the DataDog agent to be started in an environment where this variable is read. The value must be a valid JSON object; the key is the VictoriaMetrics endpoint and the value is the array of API keys to use.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/README.md#2025-04-22_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nDD_ADDITIONAL_ENDPOINTS='\\{\"http://victoriametrics:8428/datadog\": [\"apikey\"]}'\n```\n\n----------------------------------------\n\nTITLE: Checking Ingestion Rate in VictoriaMetrics (Including Replication)\nDESCRIPTION: A MetricsQL query to determine the total sample ingestion rate in VictoriaMetrics including replication factor over the last 24 hours. Important for complete resource estimation.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/guides/understand-your-setup-size/README.md#2025-04-22_snippet_5\n\nLANGUAGE: metricsql\nCODE:\n```\nsum(rate(vm_vminsert_metrics_read_total[24h]))\n```\n\n----------------------------------------\n\nTITLE: Smoothing Time Series Data in PromQL\nDESCRIPTION: The smooth_exponential() function smooths points for each time series returned by the query using exponential moving average with the given smooth factor.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_104\n\nLANGUAGE: promql\nCODE:\n```\nsmooth_exponential(q, sf)\n```\n\n----------------------------------------\n\nTITLE: Building VictoriaLogs from Source - Clone Repository\nDESCRIPTION: Git commands to clone the VictoriaMetrics repository containing VictoriaLogs source code.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/QuickStart.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/VictoriaMetrics/VictoriaMetrics\ncd VictoriaMetrics\n```\n\n----------------------------------------\n\nTITLE: Fixing `-streamAggr.dropInputLabels` Application (Command-line)\nDESCRIPTION: Corrects the application logic for the `-streamAggr.dropInputLabels` command-line flag. It is now correctly applied when global stream deduplication is enabled (via `-remoteWrite.streamAggr.dedupInterval`) without a specific `-streamAggr.config` file. Previously, the unrelated `-remoteWrite.streamAggr.dropInputLabels` flag was incorrectly consulted.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/changelog/CHANGELOG_2024.md#2025-04-22_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\n-streamAggr.dropInputLabels label1,label2 # This flag is now correctly used in global dedup scenarios\n```\n\n----------------------------------------\n\nTITLE: Calculating Running Minimum using running_min() in MetricsQL\nDESCRIPTION: The `running_min(q)` transform function calculates the running minimum for each time series returned by `q`. Each output point corresponds to the minimum value encountered up to that point in the input series.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_118\n\nLANGUAGE: MetricsQL\nCODE:\n```\nrunning_min(q)\n```\n\n----------------------------------------\n\nTITLE: Implicit Handling of Missing `schedulers` Argument in vmanomaly Model Config (YAML)\nDESCRIPTION: Illustrates the backward-compatible behavior (since v1.11.0) when the `schedulers` argument is omitted from a model's configuration. `vmanomaly` implicitly assigns the model to all schedulers defined in the `schedulers` section by automatically populating the `schedulers` argument with all available scheduler aliases.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/anomaly-detection/components/models.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nmodels:\n  model_alias_1:\n    # ...\n    # if not set, `schedulers` arg is created and propagated with all scheduler aliases found in `schedulers` section\n    schedulers: ['s1', 's2', 's3']  # i.e., if your `schedulers` section has exactly s1, s2, s3 aliases\n```\n\n----------------------------------------\n\nTITLE: Adding Conditional Labels to Scraped Metrics in YAML\nDESCRIPTION: This YAML configuration shows how to set a 'foo=\"bar\"' label only for metrics matching a specific series selector.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/relabeling.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nscrape_configs:\n- job_name: test\n  static_configs:\n  - targets: [host123]\n  metric_relabel_configs:\n  - if: '{job=~\"my-app-.*\",env!=\"dev\"}'\n    target_label: foo\n    replacement: bar\n```\n\n----------------------------------------\n\nTITLE: Current Timestamp Retrieval with PromQL\nDESCRIPTION: The `now()` function provides the current time as a floating-point value in seconds, capable of marking dataset real-time moments via PromQL.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_94\n\nLANGUAGE: PromQL\nCODE:\n```\n`now()`\n```\n\n----------------------------------------\n\nTITLE: Configuring vmagent to Read Metrics from Multiple Kafka Topics with Command-line Flags\nDESCRIPTION: Example showing how to configure vmagent to read metrics from multiple Kafka topics with different brokers using command-line flags. This setup connects to two different topics across four Kafka brokers.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmagent.md#2025-04-22_snippet_54\n\nLANGUAGE: sh\nCODE:\n```\n./bin/vmagent \n      -kafka.consumer.topic='topic-a' \n      -kafka.consumer.topic.brokers='host1:9092;host2:9092' \n      -kafka.consumer.topic='topic-b' \n      -kafka.consumer.topic.brokers='host3:9092;host4:9092'\n```\n\n----------------------------------------\n\nTITLE: Using timestamp in VictoriaMetrics Syntax - plaintext\nDESCRIPTION: The timestamp function returns the time (with millisecond precision) of the last raw sample in the window per series. Supported by PromQL, it operates on a series selector and lookbehind window. Returns the timestamp as a number; metric names are stripped unless otherwise preserved.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_57\n\nLANGUAGE: plaintext\nCODE:\n```\n`timestamp(series_selector[d])`\n```\n\n----------------------------------------\n\nTITLE: Enabling Stream Mode for InfluxDB HTTP Ingestion via Header\nDESCRIPTION: Specifies the HTTP header 'Stream-Mode: \"1\"' required to re-enable stream processing mode for data ingested via InfluxDB HTTP endpoints in vmsingle, vminsert, and vmagent components. This mode is disabled by default in v1.105.0 for HTTP endpoints to improve error handling and resiliency. Stream processing remains enabled for TCP and UDP ingestion.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/changelog/CHANGELOG_2024.md#2025-04-22_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nStream-Mode: \"1\"\n```\n\n----------------------------------------\n\nTITLE: Using the @ Modifier After an Aggregation in MetricsQL\nDESCRIPTION: Illustrates that the `@` timestamp modifier in MetricsQL can be placed after an entire expression, including aggregations. This query calculates `sum(foo)` specifically at the `end()` timestamp of the selected query range.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_8\n\nLANGUAGE: metricsql\nCODE:\n```\nsum(foo) @ end()\n```\n\n----------------------------------------\n\nTITLE: Calculating Standard Deviation with `stddev` in MetricsQL\nDESCRIPTION: The `stddev` function calculates the standard deviation of input sample values for gauge metrics over the specified interval. This MetricsQL query shows its approximate equivalence to applying `histogram_stddev` to a histogram derived from the metric over the interval using `histogram_over_time` and grouped by `vmrange`.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/stream-aggregation.md#2025-04-22_snippet_26\n\nLANGUAGE: metricsql\nCODE:\n```\nhistogram_stddev(sum(histogram_over_time(some_metric[interval])) by (vmrange))\n```\n\n----------------------------------------\n\nTITLE: Running Optimized vmagent in Go\nDESCRIPTION: Example command for running vmagent in an optimized mode with various performance-enhancing flags.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmagent.md#2025-04-22_snippet_64\n\nLANGUAGE: sh\nCODE:\n```\nGOGC=100 GOMAXPROCS=1 ./vmagent -promscrape.disableCompression -promscrape.dropOriginalLabels -promscrape.noStaleMarkers -memory.allowedBytes=1GiB -promscrape.disableKeepAlive ...\n```\n\n----------------------------------------\n\nTITLE: Basic Line Reading with ergochat/readline in Go\nDESCRIPTION: This Go example demonstrates the fundamental usage of the `ergochat/readline` library. It initializes a new readline instance with the prompt \"> \", reads lines from standard input within an infinite loop, handles potential errors (like EOF or user interrupt), and echoes the received line back to the standard output managed by the readline instance. It depends on the `fmt`, `log`, and `github.com/ergochat/readline` packages, and redirects log output to ensure correct prompt redrawing.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/ergochat/readline/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\n\t\"github.com/ergochat/readline\"\n)\n\nfunc main() {\n\t// see readline.NewFromConfig for advanced options:\n\trl, err := readline.New(\"> \")\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer rl.Close()\n\tlog.SetOutput(rl.Stderr()) // redraw the prompt correctly after log output\n\n\tfor {\n\t\tline, err := rl.ReadLine()\n\t\t// `err` is either nil, io.EOF, readline.ErrInterrupt, or an unexpected\n\t\t// condition in stdin:\n\t\tif err != nil {\n\t\t\treturn\n\t\t}\n\t\t// `line` is returned without the terminating \\n or CRLF:\n\t\tfmt.Fprintf(rl, \"you wrote: %s\\n\", line)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Building Docker Image for vmagent\nDESCRIPTION: Command to build a Docker image for vmagent with a custom base image.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmagent.md#2025-04-22_snippet_65\n\nLANGUAGE: sh\nCODE:\n```\nROOT_IMAGE=scratch make package-vmagent\n```\n\n----------------------------------------\n\nTITLE: Configuring OVH Cloud Service Discovery in VictoriaMetrics\nDESCRIPTION: YAML configuration for discovering OVH Cloud VPS and dedicated servers as monitoring targets. Includes settings for API endpoints, authentication credentials, and service type selection. Supports both VPS and dedicated server discovery.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/sd_configs.md#2025-04-22_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\nscrape_configs:\n- job_name: ovh_job\n  ovhcloud_sd_configs:\n\n  # (optional) depending on the API you want to use, you may set the endpoint to:\n  # `ovh-eu` for OVH Europe API (default).\n  # `ovh-us` for OVH US API.\n  # `ovh-ca` for OVH North-America API.\n  # `soyoustart-eu` for \"So you Start Europe API\".\n  # `soyoustart-ca` for \"So you Start North America API\".\n  # `kimsufi-eu` for Kimsufi Europe API.\n  # `kimsufi-ca` for Kimsufi North America API.\n  # See: https://github.com/ovh/go-ovh?tab=readme-ov-file#supported-apis\n  - endpoint: \"...\"\n\n    # (mandatory) application_key is a self generated tokens. \n    # create one by visiting: https://eu.api.ovh.com/createApp/\n    application_key: \"...\"\n\n    # (mandatory) application_secret holds the application secret key.\n    application_secret: \"...\"\n    \n    # (mandatory) consumer_key holds the user/app specific token. It must have been validated before use.\n    consumer_key: \"...\"\n\n    # (mandatory) service could be either `vps` or `dedicated_server`.\n    service: \"...\"\n\n    # Additional HTTP API client options can be specified here.\n    # See https://docs.victoriametrics.com/sd_configs.html#http-api-client-options\n```\n\n----------------------------------------\n\nTITLE: Exact Match on Specific Field - VictoriaMetrics LogsQL - LogSQL\nDESCRIPTION: Finds logs where the 'log.level' field has the exact value 'error'. The field is specified before the colon and equality operator. Dependencies: VictoriaMetrics LogsQL. Input: logs with 'log.level' field; Output: entries where log.level equals 'error'.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_57\n\nLANGUAGE: logsql\nCODE:\n```\nlog.level:=\"error\"\n```\n\n----------------------------------------\n\nTITLE: Running vmalert Container with Docker for Single-Node Setup (Shell/Bash)\nDESCRIPTION: This Docker command launches the vmalert container connecting it to VictoriaMetrics Cloud and Alertmanager for single-node deployments. It mounts local alert rules, maps port 8080, and provides necessary parameters using shell environment variables for secure and flexible configuration. Requires Docker, an alerts.yml rules file, and appropriate token and service endpoints.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics-cloud/alerting-vmalert-victoria-metrics-cloud.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nexport TOKEN=81e8226e-****-****-****-************ \nexport MANAGED_VM_URL=https://gw-c15-1c.cloud.victoriametrics.com\nexport ALERTMANAGER_URL=http://alertmanager:9093 \ndocker run -it -p 8080:8080 -v $(pwd)/alerts.yml:/etc/alerts/alerts.yml victoriametrics/vmalert:v1.87.1 -datasource.url=$MANAGED_VM_URL -datasource.bearerToken=$TOKEN -remoteRead.url=$MANAGED_VM_URL -remoteRead.bearerToken=$TOKEN  -remoteWrite.url=$MANAGED_VM_URL -remoteWrite.bearerToken=$TOKEN  -notifier.url=$ALERTMANAGER_URL -rule=\"/etc/alerts/*.yml\"\n```\n\n----------------------------------------\n\nTITLE: SQL Query Structure Example\nDESCRIPTION: Demonstrates the traditional SQL query structure with its various clauses and components.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/sql-to-logsql.md#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  <fields, aggregations, calculations, transformations>\nFROM <table>\n  <optional JOINs>\n  <optional filters with optional subqueries>\n  <optional GROUP BY>\n  <optional HAVING>\n  <optional ORDER BY>\n  <optional LIMIT / OFFSET>\n  <optional UNION>\n```\n\n----------------------------------------\n\nTITLE: Marshaling and Unmarshaling YAML in Go\nDESCRIPTION: This example demonstrates how to use the yaml.v2 package to unmarshal YAML data into Go structs and maps, and marshal those structures back to YAML format. It showcases struct field mapping, tag usage for customizing field names, and flow style for sequences.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/gopkg.in/yaml.v2/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport (\n        \"fmt\"\n        \"log\"\n\n        \"gopkg.in/yaml.v2\"\n)\n\nvar data = `\na: Easy!\nb:\n  c: 2\n  d: [3, 4]\n`\n\n// Note: struct fields must be public in order for unmarshal to\n// correctly populate the data.\ntype T struct {\n        A string\n        B struct {\n                RenamedC int   `yaml:\"c\"`\n                D        []int `yaml:\",flow\"`\n        }\n}\n\nfunc main() {\n        t := T{}\n    \n        err := yaml.Unmarshal([]byte(data), &t)\n        if err != nil {\n                log.Fatalf(\"error: %v\", err)\n        }\n        fmt.Printf(\"--- t:\\n%v\\n\\n\", t)\n    \n        d, err := yaml.Marshal(&t)\n        if err != nil {\n                log.Fatalf(\"error: %v\", err)\n        }\n        fmt.Printf(\"--- t dump:\\n%s\\n\\n\", string(d))\n    \n        m := make(map[interface{}]interface{})\n    \n        err = yaml.Unmarshal([]byte(data), &m)\n        if err != nil {\n                log.Fatalf(\"error: %v\", err)\n        }\n        fmt.Printf(\"--- m:\\n%v\\n\\n\", m)\n    \n        d, err = yaml.Marshal(&m)\n        if err != nil {\n                log.Fatalf(\"error: %v\", err)\n        }\n        fmt.Printf(\"--- m dump:\\n%s\\n\\n\", string(d))\n}\n```\n\n----------------------------------------\n\nTITLE: Converted Prometheus Metrics from Ingested InfluxDB Line - PromTextMetric\nDESCRIPTION: Demonstrates the conversion of InfluxDB metric lines into Prometheus-compatible time series after ingestion. Each output line shows the new metric name format and preserved tags. The numeric values are mapped per field as illustrated. This format is available via querying the appropriate API endpoints.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/README.md#2025-04-22_snippet_14\n\nLANGUAGE: promtextmetric\nCODE:\n```\nfoo_field1{tag1=\\\"value1\\\", tag2=\\\"value2\\\"} 12\\nfoo_field2{tag1=\\\"value1\\\", tag2=\\\"value2\\\"} 40\n```\n\n----------------------------------------\n\nTITLE: Updating Prometheus Exporter Creation in Go\nDESCRIPTION: The New function for creating a Prometheus exporter now returns an error if registration fails. It can be configured with a custom registerer using the WithRegisterer option.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-22_snippet_34\n\nLANGUAGE: Go\nCODE:\n```\nexporter, err := prometheus.New(prometheus.WithRegisterer(customRegisterer))\nif err != nil {\n    // Handle error\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Hyperbolic Sine of Series Data - MetricsQL (English)\nDESCRIPTION: The `sinh(q)` function computes the hyperbolic sine for every data point in every series returned by `q`. As with other similar transforms, it removes metric names by default and is usable within MetricsQL.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/MetricsQL.md#2025-04-22_snippet_108\n\nLANGUAGE: MetricsQL\nCODE:\n```\n`sinh(q)`\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Schedulers in YAML\nDESCRIPTION: This YAML snippet illustrates how to define multiple schedulers in the configuration for VictoriaMetrics Anomaly Detection. Each scheduler uses a periodic class with specified intervals for inference and fitting the model, controlling how frequently anomaly detection processes should occur. Dependencies include the VictoriaMetrics Anomaly Detection suite version v1.11.0 or later.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/anomaly-detection/components/scheduler.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nschedulers:\n  scheduler_periodic_1m:\n    # class: \"periodic\" # or class: \"scheduler.periodic.PeriodicScheduler\" until v1.13.0 with class alias support)\n    infer_every: \"1m\"\n    fit_every: \"2m\"\n    fit_window: \"3h\"\n  scheduler_periodic_5m:\n    # class: \"periodic\" # or class: \"scheduler.periodic.PeriodicScheduler\" until v1.13.0 with class alias support)\n    infer_every: \"5m\"\n    fit_every: \"10m\"\n    fit_window: \"3h\"\n...\n```\n\n----------------------------------------\n\nTITLE: Converting Degrees to Radians using rad() in MetricsQL\nDESCRIPTION: The `rad(q)` transform function converts degree values to radians for every data point in each time series returned by the query `q`. Metric names are removed by default; use `keep_metric_names` to preserve them. This function is also supported in PromQL.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_91\n\nLANGUAGE: MetricsQL\nCODE:\n```\nrad(q)\n```\n\n----------------------------------------\n\nTITLE: Setting GOGC Environment Variable for VictoriaMetrics\nDESCRIPTION: Command-line environment variable setting to adjust garbage collection behavior in VictoriaMetrics components. Increasing GOGC value from default 30 to 100 can reduce CPU usage at the cost of higher memory consumption.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/Troubleshooting.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nGOGC=100\n```\n\n----------------------------------------\n\nTITLE: Rate Rollup Function\nDESCRIPTION: Calculates per-second change rates for adjacent raw samples. Returns min, max and avg values.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_43\n\nLANGUAGE: metricsql\nCODE:\n```\nrollup_rate(series_selector[d])\n```\n\n----------------------------------------\n\nTITLE: Using smetrics String Distance Functions in Go\nDESCRIPTION: Shows example usage of multiple smetrics functions, including WagnerFischer, Ukkonen, Jaro, JaroWinkler, Soundex, and Hamming, to compute distances and similarities between strings. The snippet demonstrates calling each method with typical parameters, such as two input strings and function-specific arguments (costs, prefix scaling, etc.). Inputs are string pairs for comparison; outputs are numeric or string values representing computed metrics. Most functions return the calculated distance or similarity, with limitations based on string length and method suitability.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/xrash/smetrics/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\\\"github.com/xrash/smetrics\\\"\n)\n\nfunc main() {\n\tsmetrics.WagnerFischer(\\\"POTATO\\\", \\\"POTATTO\\\", 1, 1, 2)\n\tsmetrics.WagnerFischer(\\\"MOUSE\\\", \\\"HOUSE\\\", 2, 2, 4)\n\n\tsmetrics.Ukkonen(\\\"POTATO\\\", \\\"POTATTO\\\", 1, 1, 2)\n\tsmetrics.Ukkonen(\\\"MOUSE\\\", \\\"HOUSE\\\", 2, 2, 4)\n\n\tsmetrics.Jaro(\\\"AL\\\", \\\"AL\\\")\n\tsmetrics.Jaro(\\\"MARTHA\\\", \\\"MARHTA\\\")\n\n\tsmetrics.JaroWinkler(\\\"AL\\\", \\\"AL\\\", 0.7, 4)\n\tsmetrics.JaroWinkler(\\\"MARTHA\\\", \\\"MARHTA\\\", 0.7, 4)\n\n\tsmetrics.Soundex(\\\"Euler\\\")\n\tsmetrics.Soundex(\\\"Ellery\\\")\n\n\tsmetrics.Hamming(\\\"aaa\\\", \\\"aaa\\\")\n\tsmetrics.Hamming(\\\"aaa\\\", \\\"aab\\\")\n}\n```\n\n----------------------------------------\n\nTITLE: Problematic YAML Configuration with Null Map\nDESCRIPTION: An example of a configuration file (B.yaml) with a null map for processors that will override the processors from the first configuration.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/go.opentelemetry.io/collector/confmap/README.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nprocessors:\n```\n\n----------------------------------------\n\nTITLE: Installing Koanf and Plugins in Go\nDESCRIPTION: Install Koanf core library and any required Providers and Parsers for configuration management in Go. Dependencies such as file provider and TOML parser are also installed using Go modules.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/knadh/koanf/v2/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Install the core.\ngo get -u github.com/knadh/koanf/v2\n\n# Install the necessary Provider(s).\n# Available: file, env, posflag, basicflag, confmap, rawbytes,\n#            structs, fs, s3, appconfig/v2, consul/v2, etcd/v2, vault/v2, parameterstore/v2\n# eg: go get -u github.com/knadh/koanf/providers/s3\n# eg: go get -u github.com/knadh/koanf/providers/consul/v2\n\ngo get -u github.com/knadh/koanf/providers/file\n\n\n# Install the necessary Parser(s).\n# Available: toml, toml/v2, json, yaml, dotenv, hcl, hjson, nestedtext\n# go get -u github.com/knadh/koanf/parsers/$parser\n\ngo get -u github.com/knadh/koanf/parsers/toml\n```\n\n----------------------------------------\n\nTITLE: Candlestick Rollup Function\nDESCRIPTION: Calculates OHLC (open, high, low, close) values over raw samples. Useful for financial applications.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_39\n\nLANGUAGE: metricsql\nCODE:\n```\nrollup_candlestick(series_selector[d])\n```\n\n----------------------------------------\n\nTITLE: Configuring vmctl for Prometheus to VictoriaMetrics Migration\nDESCRIPTION: This shell script snippet provides a command to display all the available configuration options for the `vmctl` tool when migrating data from Prometheus to VictoriaMetrics. Running this command will give users a detailed list of flags and their purposes.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmctl.md#2025-04-22_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\n./vmctl prometheus --help\n\n```\n\n----------------------------------------\n\nTITLE: Filebeat Configuration with Field Filtering\nDESCRIPTION: Configuration that demonstrates how to ignore specific log fields during data ingestion using the ignore_fields parameter.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/data-ingestion/Filebeat.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\noutput.elasticsearch:\n  hosts: [\"http://localhost:9428/insert/elasticsearch/\"]\n  parameters:\n    _msg_field: \"message\"\n    _time_field: \"@timestamp\"\n    _stream_fields: \"host.name,log.file.path\"\n    ignore_fields: \"log.offset,event.original\"\n```\n\n----------------------------------------\n\nTITLE: Cosine Transformation for Time Series with VictoriaMetrics PromQL\nDESCRIPTION: The cos function computes the cosine of each value in the input time series q. Metric names are stripped from results unless keep_metric_names is specified. Inputs are numeric time series; outputs are their cosine values. Supported by PromQL.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_90\n\nLANGUAGE: PromQL\nCODE:\n```\n`cos(q)`\n```\n\n----------------------------------------\n\nTITLE: Installing Backoff Library Using go get\nDESCRIPTION: The snippet shows the command to install the backoff library via the Go package manager. This is a prerequisite for using the backoff package in a Golang project.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/jpillora/backoff/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ go get -v github.com/jpillora/backoff\n```\n\n----------------------------------------\n\nTITLE: Documenting vmstorage HTTP Endpoints - Markdown\nDESCRIPTION: Enumerates and describes the RESTful HTTP endpoints vmstorage nodes expose on port 8482. Each endpoint is presented as a string path and is commented inline regarding its function—such as creating, listing, or deleting snapshots, and initiating forced compactions. No code is directly executed but endpoints are for system integration and curl-based queries. Inputs are HTTP requests to each path; outputs depend on the endpoint (successful snapshot management or compaction requests). Requires operational VictoriaMetrics cluster and network access.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/Cluster-VictoriaMetrics.md#2025-04-22_snippet_21\n\nLANGUAGE: plaintext\nCODE:\n```\n/internal/force_merge\n/snapshot/create\n/snapshot/list\n/snapshot/delete?snapshot=<id>\n/snapshot/delete_all\n```\n\n----------------------------------------\n\nTITLE: Decompressing Data using gozstd Decompress Function in Go\nDESCRIPTION: Illustrates the basic method for decompressing a zstd-compressed byte slice (`compressedData`) using the `gozstd.Decompress` function in Go. Passing `nil` as the first argument causes the function to allocate a buffer for the decompressed data. The function returns the decompressed byte slice (`data`) and an error (`err`) if decompression fails.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/valyala/gozstd/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n\tdata, err := Decompress(nil, compressedData)\n```\n\n----------------------------------------\n\nTITLE: Checking Version Constraints in Go\nDESCRIPTION: Shows how to define and check version constraints using the `go-version` library. First, a version string is parsed using `version.NewVersion`. Then, constraint rules (e.g., \">= 1.0, < 1.4\") are parsed using `version.NewConstraint`. Finally, the `Check` method verifies if the parsed version satisfies the specified constraints.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/hashicorp/go-version/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nv1, err := version.NewVersion(\"1.2\")\n\n// Constraints example.\nconstraints, err := version.NewConstraint(\">= 1.0, < 1.4\")\nif constraints.Check(v1) {\n\tfmt.Printf(\"%s satisfies constraints %s\", v1, constraints)\n}\n```\n\n----------------------------------------\n\nTITLE: Kubernetes init container filtering relabeling rule in YAML\nDESCRIPTION: Relabeling configuration to drop Kubernetes init container pods from being scraped, useful for preventing duplicate scrape target errors in Kubernetes environments.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmagent.md#2025-04-22_snippet_48\n\nLANGUAGE: yaml\nCODE:\n```\n- action: drop\n  source_labels: [__meta_kubernetes_pod_container_init]\n  regex: true\n```\n\n----------------------------------------\n\nTITLE: Telegraf Configuration with Metric Filtering\nDESCRIPTION: Telegraf output configuration that routes only specific metrics to VictoriaMetrics using the namepass option.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/data-ingestion/Telegraf.md#2025-04-22_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\n[[outputs.influxdb]]\n  urls = [\"$victoriametrics_url\"]\n  username = \"$victoriametrics_user\"\n  password = \"$victoriametrics_password\"\n  database = \"victoriametrics\"\n  skip_database_creation = true\n  exclude_retention_policy_tag = true\n  content_encoding = \"gzip\"\n  namepass = [\"cpu\",\"disk\",\"measurement1\",\"measurement2\"]\n```\n\n----------------------------------------\n\nTITLE: Sample Configuration for vmalert-tool\nDESCRIPTION: YAML configuration for an expected sample in vmalert-tool. Includes labels and value sections.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmalert-tool.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nlabels: <string>\n\nvalue: <number>\n```\n\n----------------------------------------\n\nTITLE: Checking VMAgent Pod Status (sh)\nDESCRIPTION: This command lists all pods in the current namespace and uses `grep` to filter for pods related to the created VMAgent instance (whose names typically contain 'vmagent'). This verifies if the VMAgent pod(s) are running.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/guides/getting-started-with-vm-operator/README.md#2025-04-22_snippet_14\n\nLANGUAGE: sh\nCODE:\n```\nkubectl get pods | grep vmagent\n```\n\n----------------------------------------\n\nTITLE: Label-based Sorting in PromQL\nDESCRIPTION: Sorts series in ascending order by the given set of labels.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_159\n\nLANGUAGE: promql\nCODE:\n```\nsort_by_label(q, \"label1\", ... \"labelN\")\n```\n\n----------------------------------------\n\nTITLE: Running VMAuth with mTLS Protection\nDESCRIPTION: Command to run VMAuth with mutual TLS authentication enabled. This requires both the -tls and -mtls flags to be specified along with the authentication configuration.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmauth.md#2025-04-22_snippet_45\n\nLANGUAGE: sh\nCODE:\n```\n./vmauth -tls -mtls -auth.config=...\n```\n\n----------------------------------------\n\nTITLE: Dropping Specific Labels using YAML\nDESCRIPTION: This configuration script is designed to drop all labels with names matching the specified regex, after mapping original Kubernetes pod labels with 'foo_' prefix. It requires Kubernetes and regex patterns in RE2 format.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/relabeling.md#2025-04-22_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\n- job_name: k8s\n  kubernetes_sd_configs:\n  - role: pod\n  relabel_configs:\n  - action: labelmap\n    regex: \"__meta_kubernetes_pod_label_(.+)\"\n    replacement: \"foo_$1\"\n  - action: labeldrop\n    regex: \"foo_bar_.*\"\n```\n\n----------------------------------------\n\nTITLE: Expected output from vmagent pod status check\nDESCRIPTION: Sample output showing a successfully running vmagent pod after installation, displaying the pod name, readiness status, and runtime information.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/guides/k8s-monitoring-via-vm-cluster/README.md#2025-04-22_snippet_8\n\nLANGUAGE: text\nCODE:\n```\nvmagent-victoria-metrics-agent-69974b95b4-mhjph                1/1     Running   0          11m\n```\n\n----------------------------------------\n\nTITLE: Returning Number of Days in Month - PromQL - PromQL\nDESCRIPTION: The snippet demonstrates the usage of the days_in_month() transform function, which returns the number of days in the month corresponding to each point in the input time series, where q yields unix timestamps. Metric names are stripped unless keep_metric_names is used. The output is in the range [28...31]. No external dependencies are required except that the input must be unix timestamps. This is supported by PromQL.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_95\n\nLANGUAGE: PromQL\nCODE:\n```\n`days_in_month(q)`\n```\n\n----------------------------------------\n\nTITLE: Calculating Z-Score Over Time with VictoriaMetrics PromQL\nDESCRIPTION: This function signature demonstrates the use of zscore_over_time in PromQL for VictoriaMetrics, which computes the standard score across raw samples over a defined lookbehind window. It requires passing a series selector and a window duration d. Expected parameters include the metric selector and window; outputs are z-scores for each time series, and metric names are removed unless the keep_metric_names modifier is used.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_73\n\nLANGUAGE: PromQL\nCODE:\n```\n`zscore_over_time(series_selector[d])`\n```\n\n----------------------------------------\n\nTITLE: Listing Available vmctl Commands\nDESCRIPTION: Shows the available migration commands in vmctl for different data sources including InfluxDB, OpenTSDB, Prometheus, remote-read protocol, and VictoriaMetrics Native format.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmctl.md#2025-04-22_snippet_23\n\nLANGUAGE: shellhelp\nCODE:\n```\n  influx\n     Migrate time series from InfluxDB\n  opentsdb\n     Migrate time series from OpenTSDB.\n  prometheus\n     Migrate time series from Prometheus.\n  remote-read\n     Migrate time series via Prometheus remote-read protocol.\n  verify-block\n     Verifies exported block with VictoriaMetrics Native format.\n  vm-native\n     Migrate time series between VictoriaMetrics installations.\n```\n\n----------------------------------------\n\nTITLE: Retrieve Last Sample with Last_Over_Time in Markdown\nDESCRIPTION: Using 'last_over_time', this function returns the last raw sample found in a given window 'd', contributing to time series continuity.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/MetricsQL.md#2025-04-22_snippet_40\n\nLANGUAGE: Markdown\nCODE:\n```\n`last_over_time(series_selector[d])` is a [rollup function](#rollup-functions), which returns the last [raw sample](https://docs.victoriametrics.com/keyconcepts/#raw-samples)\\nvalue.\n```\n\n----------------------------------------\n\nTITLE: Illustrating Directory Structure for Doublestar Patterns (Bash)\nDESCRIPTION: This snippet shows an example directory structure (`grandparent/parent/child1`, `grandparent/parent/child2`) used to illustrate how doublestar patterns like `**/child*`, `grandparent/**/child?`, `**/parent/*`, or `**` can match files and directories recursively.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/bmatcuk/doublestar/v4/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngrandparent\n`-- parent\n    |-- child1\n    `-- child2\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple HTTP Listen Addresses\nDESCRIPTION: Example of starting VictoriaMetrics with multiple HTTP listen addresses to accept requests on different TCP endpoints.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/changelog/CHANGELOG_2024.md#2025-04-22_snippet_30\n\nLANGUAGE: bash\nCODE:\n```\n./victoria-metrics -httpListenAddr=some-host:12345 -httpListenAddr=localhost:8428\n```\n\n----------------------------------------\n\nTITLE: Searching for a Phrase in a Non-English Field - VictoriaLogs LogSQL\nDESCRIPTION: This example shows searching for a non-English phrase, demonstrating full utf-8 compatibility in both field and value. The query checks the Georgian field 'შეტყობინება' for the Greek phrase 'Το αρχείο δεν μπορεί να ανοίξει'. Prerequisites include utf-8 log ingestion and field/phrase definition support. Enables cross-language log search.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_44\n\nLANGUAGE: logsql\nCODE:\n```\nშეტყობინება:\"Το αρχείο δεν μπορεί να ανοίξει\"\n```\n\n----------------------------------------\n\nTITLE: Filtering Log Messages by Minimum Length in LogsQL\nDESCRIPTION: Illustrates using `inf` as the upper bound in the `len_range()` filter in LogsQL to select log messages (`_msg` field by default) with a length greater than or equal to the specified lower bound (5 characters).\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_73\n\nLANGUAGE: logsql\nCODE:\n```\nlen_range(5, inf)\n```\n\n----------------------------------------\n\nTITLE: Data Export Commands with Curl\nDESCRIPTION: Shell commands demonstrating how to export data using curl with different timestamp formats and optional parameters.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/README.md#2025-04-22_snippet_42\n\nLANGUAGE: sh\nCODE:\n```\ncurl http://<victoriametrics-addr>:8428/api/v1/export -d 'match[]=<timeseries_selector_for_export>' -d 'start=1654543486' -d 'end=1654543486'\ncurl http://<victoriametrics-addr>:8428/api/v1/export -d 'match[]=<timeseries_selector_for_export>' -d 'start=2022-06-06T19:25:48' -d 'end=2022-06-06T19:29:07'\n```\n\n----------------------------------------\n\nTITLE: Performing Bitmap Operations in MetricsQL\nDESCRIPTION: Introduced in v1.64.1, the `bitmap_and(q, mask)`, `bitmap_or(q, mask)`, and `bitmap_xor(q, mask)` functions in MetricsQL allow performing bitwise AND, OR, and XOR operations, respectively. These functions operate on the data points of time series returned by query `q`, using `mask` as the bitmask.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/changelog/CHANGELOG_2021.md#2025-04-22_snippet_16\n\nLANGUAGE: MetricsQL\nCODE:\n```\nbitmap_and(q, mask)\n```\n\nLANGUAGE: MetricsQL\nCODE:\n```\nbitmap_or(q, mask)\n```\n\nLANGUAGE: MetricsQL\nCODE:\n```\nbitmap_xor(q, mask) # Note: Release note had typo 'bitmak_xor'\n```\n\n----------------------------------------\n\nTITLE: Hyperbolic Cosine Transformation for Time Series with VictoriaMetrics PromQL\nDESCRIPTION: The cosh function computes the hyperbolic cosine for all points in the input time series q. Metric names are removed unless keep_metric_names is specified. Supported by PromQL, the function operates on numeric values.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_91\n\nLANGUAGE: PromQL\nCODE:\n```\n`cosh(q)`\n```\n\n----------------------------------------\n\nTITLE: Inspecting Generated Logs with jq in Bash\nDESCRIPTION: Command to view the first few lines of the generated logs using head and jq for JSON formatting.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlogsgenerator/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nhead logs.json | jq .\n```\n\n----------------------------------------\n\nTITLE: Clamping Time Series Values to a Minimum in MetricsQL\nDESCRIPTION: A transform function that constrains every data point in the time series returned by `q` to be no less than the specified `min` value. Values below `min` become `min`. If `q` is a series selector, `default_rollup()` is applied first. Supported by PromQL.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_80\n\nLANGUAGE: MetricsQL\nCODE:\n```\n`clamp_min(q, min)`\n```\n\n----------------------------------------\n\nTITLE: Searching for a Word in Log Messages - VictoriaLogs LogSQL\nDESCRIPTION: This query searches for logs containing the exact word 'error' in the '_msg' field by default. No dependencies except VictoriaLogs with searchable log fields. The word is case-sensitive and limited to exact word matches unless otherwise specified. Input is the word; output is matching log entries, with limitations on case and exactness.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_37\n\nLANGUAGE: logsql\nCODE:\n```\nerror\n```\n\n----------------------------------------\n\nTITLE: Retrieving Timestamp of Last Sample (Alias) in VictoriaMetrics\nDESCRIPTION: The tlast_over_time function is an alias for the timestamp function, returning the timestamp of the last raw sample within a specified time window.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/MetricsQL.md#2025-04-22_snippet_73\n\nLANGUAGE: metricsql\nCODE:\n```\ntlast_over_time(series_selector[d])\n```\n\n----------------------------------------\n\nTITLE: Parsing and Accessing Multiple JSON Fields in Go with fastjson\nDESCRIPTION: Illustrates how to parse a JSON string using `fastjson.Parser` and access various data types (string, integer, float, boolean, array element) from the parsed structure. It includes basic error handling after the parsing step.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/valyala/fastjson/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n        var p fastjson.Parser\n        v, err := p.Parse(`{\n                \"str\": \"bar\",\n                \"int\": 123,\n                \"float\": 1.23,\n                \"bool\": true,\n                \"arr\": [1, \"foo\", {}]\n        }`)\n        if err != nil {\n                log.Fatal(err)\n        }\n        fmt.Printf(\"foo=%s\\n\", v.GetStringBytes(\"str\"))\n        fmt.Printf(\"int=%d\\n\", v.GetInt(\"int\"))\n        fmt.Printf(\"float=%f\\n\", v.GetFloat64(\"float\"))\n        fmt.Printf(\"bool=%v\\n\", v.GetBool(\"bool\"))\n        fmt.Printf(\"arr.1=%s\\n\", v.GetStringBytes(\"arr\", \"1\"))\n\n        // Output:\n        // foo=bar\n        // int=123\n        // float=1.230000\n        // bool=true\n        // arr.1=foo\n```\n\n----------------------------------------\n\nTITLE: Starting VictoriaMetrics Cluster via Docker\nDESCRIPTION: This snippet shows how to clone the VictoriaMetrics repository and start a Docker-based cluster environment using a make command.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/Quick-Start.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/VictoriaMetrics/VictoriaMetrics && cd VictoriaMetrics\nmake docker-cluster-up\n```\n\n----------------------------------------\n\nTITLE: Configuring vmalert Startup Behavior on Restore Errors (Shell/CLI)\nDESCRIPTION: Command-line flags for vmalert to control its behavior upon encountering state restore errors during startup. Setting to `true` logs the errors and continues, while `false` stops the process. This is useful when waiting for dependent services like VictoriaMetrics to become ready.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/changelog/CHANGELOG_2021.md#2025-04-22_snippet_22\n\nLANGUAGE: shell\nCODE:\n```\n-remoteRead.ignoreRestoreErrors=true\n```\n\nLANGUAGE: shell\nCODE:\n```\n-remoteRead.ignoreRestoreErrors=false\n```\n\n----------------------------------------\n\nTITLE: Phrase Search in LogsQL\nDESCRIPTION: A LogsQL query that searches for a specific phrase 'error: cannot find file' within log messages by using quotes.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_3\n\nLANGUAGE: logsql\nCODE:\n```\n\"error: cannot find file\"\n```\n\n----------------------------------------\n\nTITLE: Basic Log Entry Structure in JSON\nDESCRIPTION: Example showing basic structured log entry format with multiple fields including job, instance, level, and message information.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/keyConcepts.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"job\": \"my-app\",\n  \"instance\": \"host123:4567\",\n  \"level\": \"error\",\n  \"client_ip\": \"1.2.3.4\",\n  \"trace_id\": \"1234-56789-abcdef\",\n  \"_msg\": \"failed to serve the client request\"\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Stale Marker Handling in Queries (Shell)\nDESCRIPTION: Added in v1.64.1, the `-search.noStaleMarkers` command-line flag for vmselect disables the processing of stale markers during query execution. This may save CPU time if the queried data is known not to contain stale markers.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/changelog/CHANGELOG_2021.md#2025-04-22_snippet_20\n\nLANGUAGE: Shell\nCODE:\n```\n-search.noStaleMarkers\n```\n\n----------------------------------------\n\nTITLE: Configuring Telegraf Output to Google PubSub (yaml)\nDESCRIPTION: This YAML configuration snippet defines a Telegraf `outputs.cloud_pubsub` plugin instance. It configures Telegraf to send metrics to the specified Google Cloud PubSub project (`victoriametrics-vmagent-pub-sub-test`) and topic (`telegraf-testing`) using the InfluxDB line protocol format (`data_format = \"influx\"`). This setup is intended to feed data into a `vmagent` instance configured to read from this PubSub subscription.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmagent.md#2025-04-22_snippet_50\n\nLANGUAGE: yaml\nCODE:\n```\n[[outputs.cloud_pubsub]]\n  project = \"victoriametrics-vmagent-pub-sub-test\"\n  topic = \"telegraf-testing\"\n  data_format = \"influx\"\n```\n\n----------------------------------------\n\nTITLE: Label Copying with label_copy Function in MetricsQL\nDESCRIPTION: The label_copy function copies label values from source labels to destination labels for all time series returned by a query.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_128\n\nLANGUAGE: MetricsQL\nCODE:\n```\nlabel_copy(q, \"src_label1\", \"dst_label1\", ..., \"src_labelN\", \"dst_labelN\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Promtail Client for VictoriaLogs in YAML\nDESCRIPTION: This snippet shows the basic configuration for Promtail to send logs to VictoriaLogs. It specifies the URL endpoint for log ingestion.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/data-ingestion/Promtail.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nclients:\n  - url: \"http://localhost:9428/insert/loki/api/v1/push\"\n```\n\n----------------------------------------\n\nTITLE: Calculating Value Range Over Time in PromQL\nDESCRIPTION: The range_over_time function computes the value range over raw samples on a given lookbehind window for each time series. It's typically used with gauges.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_34\n\nLANGUAGE: promql\nCODE:\n```\nrange_over_time(series_selector[d])\n```\n\n----------------------------------------\n\nTITLE: Filtering logs by time ranges and work days in LogsQL\nDESCRIPTION: Query that selects logs from Monday to Friday between 8:00 and 18:00 over the last 4 weeks using week_range and day_range filters.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/logsql-examples.md#2025-04-22_snippet_21\n\nLANGUAGE: logsql\nCODE:\n```\n_time:4w _time:week_range[Mon, Fri] _time:day_range[08:00, 18:00)\n```\n\n----------------------------------------\n\nTITLE: Acquiring a Token Manually with azidentity in Go\nDESCRIPTION: This Go snippet shows how to explicitly acquire an authentication token using an `azidentity` credential. Any credential type (e.g., `ClientSecretCredential`) has a `GetToken` method. This method requires a `context` and `policy.TokenRequestOptions` specifying the required OAuth 2.0 scopes (e.g., `https://vault.azure.net/.default`). The acquired token string is available in the `Token` field of the returned `azcore.AccessToken`.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/Azure/azure-sdk-for-go/sdk/azidentity/MIGRATION.md#2025-04-22_snippet_13\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"context\"\n    \"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy\"\n    \"github.com/Azure/azure-sdk-for-go/sdk/azidentity\"\n)\n\ncred, err := azidentity.NewClientSecretCredential(tenantID, clientID, secret, nil)\nhandle(err)\n\ntk, err := cred.GetToken(\n    context.TODO(), policy.TokenRequestOptions{Scopes: []string{\"https://vault.azure.net/.default\"}},\n)\nif err == nil {\n    token := tk.Token\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Retention Filters in VictoriaMetrics Enterprise (Bash)\nDESCRIPTION: Defines retention periods for multiple tenant and label groupings by passing several '-retentionFilter' flags to the vmstorage process alongside the global '-retentionPeriod'. The first flag applies a 1-day retention for tenants whose 'vm_account_id' starts with '42', the second applies a 3-day retention to series with 'env' labels matching 'dev' or 'staging', and the default retention is set to 4 weeks. These settings require VictoriaMetrics enterprise version; prerequisites include correct deployment of 'vmstorage'. The input is bash command-line arguments, and the expected outcome is differentiated retention policies applied at time series ingestion.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/Cluster-VictoriaMetrics.md#2025-04-22_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\n-retentionFilter='{vm_account_id=~\"42.*\"}:1d' -retentionFilter='{env=~\"dev|staging\"}:3d' -retentionPeriod=4w\n```\n\n----------------------------------------\n\nTITLE: Calculating Running Maximum using running_max() in MetricsQL\nDESCRIPTION: The `running_max(q)` transform function calculates the running maximum for each time series returned by `q`. Each point in the output series represents the maximum value seen so far in the input series.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_117\n\nLANGUAGE: MetricsQL\nCODE:\n```\nrunning_max(q)\n```\n\n----------------------------------------\n\nTITLE: User Configuration with Custom Username Label\nDESCRIPTION: YAML configuration example showing how to override the username label in metrics with a custom name field. This allows using a friendly name in metrics while maintaining a different authentication username.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmauth.md#2025-04-22_snippet_47\n\nLANGUAGE: yaml\nCODE:\n```\nusers:\n- username: \"secret_user\"\n  name: \"foobar\"\n  # other config options here\n```\n\n----------------------------------------\n\nTITLE: Implicit default_rollup Wrapping: Binary Operation (MetricsQL)\nDESCRIPTION: An expression `foo + bar` involving series selectors. VictoriaMetrics implicitly wraps each selector operand with `default_rollup` before performing the operation.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_159\n\nLANGUAGE: MetricsQL\nCODE:\n```\nfoo + bar\n```\n\n----------------------------------------\n\nTITLE: Configuring vlogsgenerator with Churn Rate in Bash\nDESCRIPTION: Command to run vlogsgenerator with a specified churn rate by setting total streams higher than active streams.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlogsgenerator/README.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nbin/vlogsgenerator \\\n  -start=2024-01-01 -end=2024-02-01 \\\n  -activeStreams=100 \\\n  -totalStreams=1_000 \\\n  -logsPerStream=10_000 \\\n  -addr=http://localhost:9428/insert/jsonline\n```\n\n----------------------------------------\n\nTITLE: Collecting vmalert Memory Profile (Shell)\nDESCRIPTION: Provides a shell command using `curl` to retrieve a Go memory (heap) profile from a running vmalert instance. The profile is fetched from the `/debug/pprof/heap` endpoint on vmalert's HTTP listener address (default `0.0.0.0:8880`) and saved to a file named `mem.pprof`. This file can be analyzed using `go tool pprof`.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmalert.md#2025-04-22_snippet_24\n\nLANGUAGE: sh\nCODE:\n```\ncurl http://0.0.0.0:8880/debug/pprof/heap > mem.pprof\n```\n\n----------------------------------------\n\nTITLE: Configuring Vultr Service Discovery in VictoriaMetrics\nDESCRIPTION: YAML configuration example for Vultr service discovery in VictoriaMetrics. This snippet demonstrates how to set up scrape_configs with vultr_sd_configs, including authorization tokens, filter options, and port settings.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/sd_configs.md#2025-04-22_snippet_24\n\nLANGUAGE: yaml\nCODE:\n```\nscrape_configs:\n- job_name: vultr\n  vultr_sd_configs:\n\n    # bearer_token is a Bearer token to send in every HTTP API request during service discovery (mandatory).\n    # See: https://my.vultr.com/settings/#settingsapi\n  - bearer_token: \"...\"\n\n    # Vultr provides query arguments to filter instances.\n    # See: https://www.vultr.com/api/#tag/instances\n\n    # label is an optional query arguments to filter instances by label.\n    #\n    # label: \"...\"\n\n    # main_ip is an optional query arguments to filter instances by main ip address.\n    #\n    # main_ip: \"...\"\n\n    # region is an optional query arguments to filter instances by region id.\n    #\n    # region: \"...\"\n\n    # firewall_group_id is an optional query arguments to filter instances by firewall group id.\n    #\n    # firewall_group_id: \"...\"\n\n    # hostname is an optional query arguments to filter instances by hostname.\n    #\n    # hostname: \"...\"\n\n    # port is an optional port to scrape metrics from.\n    # By default, port 80 is used.\n    #\n    # port: ...\n\n    # Additional HTTP API client options can be specified here.\n    # See https://docs.victoriametrics.com/sd_configs.html#http-api-client-options\n\n\n```\n\n----------------------------------------\n\nTITLE: Using delta Rollup Function in VictoriaMetrics\nDESCRIPTION: This function calculates the difference between the last sample before the lookbehind window and the last sample at the lookbehind window. Its behavior differs slightly from Prometheus's delta function. Metric names are stripped unless keep_metric_names is added.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_14\n\nLANGUAGE: markdown\nCODE:\n```\ndelta(series_selector[d])\n```\n\n----------------------------------------\n\nTITLE: Querying Hits Stats with Timezone Offset in Bash\nDESCRIPTION: This example retrieves per-day log counts with 'error' over the last week, adjusted for New York time zone.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/querying/README.md#2025-04-22_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\ncurl http://localhost:9428/select/logsql/hits -d 'query=error' -d 'start=1w' -d 'step=1d' -d 'offset=-4h'\n```\n\n----------------------------------------\n\nTITLE: Cross-Compiling a Go Project using gozstd with CGO\nDESCRIPTION: Provides the command-line instruction to successfully cross-compile a Go application (`./main.go`) that uses the `gozstd` package. It involves setting environment variables: `CC` specifies the C cross-compiler (e.g., `arm-linux-gnueabi-gcc`), `GOOS` sets the target operating system (`linux`), `GOARCH` sets the target architecture (`arm`), and `CGO_ENABLED=1` enables CGO, which is necessary for linking against the C zstd library.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/valyala/gozstd/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nenv CC=arm-linux-gnueabi-gcc GOOS=linux GOARCH=arm CGO_ENABLED=1 go build ./main.go \n```\n\n----------------------------------------\n\nTITLE: Configuring License Key via Secret in Helm Values\nDESCRIPTION: Configuration for VictoriaMetrics single-node Helm chart using an existing secret for license key.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/enterprise.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nserver:\n  image:\n    tag: v1.115.0-enterprise\n\nlicense:\n  secret:\n    name: vm-license\n    key: license\n```\n\n----------------------------------------\n\nTITLE: Querying Recent Logs with Time Filter\nDESCRIPTION: Examples of querying recent logs using _time filter, with optional sorting and limiting results.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/logsql-examples.md#2025-04-22_snippet_0\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m\n```\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m | sort by (_time)\n```\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m | first 10 by (_time desc)\n```\n\n----------------------------------------\n\nTITLE: Building VictoriaMetrics Backup from Source\nDESCRIPTION: Instructions for building the vmbackup binary from source code. Requires Go installation and access to the VictoriaMetrics repository.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmbackup.md#2025-04-22_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nmake vmbackup\n```\n\n----------------------------------------\n\nTITLE: VictoriaMetrics Cluster Graphite Metrics API URL Pattern\nDESCRIPTION: This URL pattern provides access to the Graphite Metrics API compatibility layer within VictoriaMetrics cluster via the `vmselect` component. It requires the `vmselect` hostname/IP, the `accountID` (tenant ID) for the query namespace, and a `suffix` corresponding to a Graphite API function (e.g., `render`, `metrics/find`, `tags/findSeries`).\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/Cluster-VictoriaMetrics.md#2025-04-22_snippet_15\n\nLANGUAGE: url\nCODE:\n```\nhttp://<vmselect>:8481/select/<accountID>/graphite/<suffix>\n```\n\n----------------------------------------\n\nTITLE: Installing the Doublestar Package using Go Get (Bash)\nDESCRIPTION: This command demonstrates how to install version 4 of the `doublestar` package using the `go get` command-line tool. This makes the package available for use in Go projects.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/bmatcuk/doublestar/v4/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/bmatcuk/doublestar/v4\n```\n\n----------------------------------------\n\nTITLE: Defining the Negotiate Function for Content Type Selection in Go\nDESCRIPTION: Declares the `Negotiate` function signature in Go. This function takes an HTTP `Accept` header string and a slice of available content type strings (`alternatives`) as input. It is designed to return the single `content_type` string that is most appropriate according to the negotiation rules, based on the client's preferences specified in the header and the server's offerings.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/munnerz/goautoneg/README.txt#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nfunc Negotiate(header string, alternatives []string) (content_type string)\n```\n\n----------------------------------------\n\nTITLE: Trigonometric and Hyperbolic Functions in MetricsQL\nDESCRIPTION: Set of trigonometric and hyperbolic functions including sin, cos, tan, sinh, cosh, and tanh that operate on each point in time series data.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_127\n\nLANGUAGE: markdown\nCODE:\n```\n#### sin\n\n`sin(q)` is a [transform function](#transform-functions), which returns `sin(v)` for every `v` point of every time series returned by `q`.\n\nMetric names are stripped from the resulting series. Add [keep_metric_names](#keep_metric_names) modifier in order to keep metric names.\n\nThis function is supported by MetricsQL.\n\nSee also [cos](#cos).\n```\n\nLANGUAGE: markdown\nCODE:\n```\n#### sinh\n\n`sinh(q)` is a [transform function](#transform-functions), which returns [hyperbolic sine](https://en.wikipedia.org/wiki/Hyperbolic_functions)\nfor every point of every time series returned by `q`.\n\nMetric names are stripped from the resulting series. Add [keep_metric_names](#keep_metric_names) modifier in order to keep metric names.\n\nThis function is supported by MetricsQL.\n\nSee also [cosh](#cosh).\n```\n\nLANGUAGE: markdown\nCODE:\n```\n#### tan\n\n`tan(q)` is a [transform function](#transform-functions), which returns `tan(v)` for every `v` point of every time series returned by `q`.\n\nMetric names are stripped from the resulting series. Add [keep_metric_names](#keep_metric_names) modifier in order to keep metric names.\n\nThis function is supported by MetricsQL.\n\nSee also [atan](#atan).\n```\n\nLANGUAGE: markdown\nCODE:\n```\n#### tanh\n\n`tanh(q)` is a [transform function](#transform-functions), which returns [hyperbolic tangent](https://en.wikipedia.org/wiki/Hyperbolic_functions)\nfor every point of every time series returned by `q`.\n\nMetric names are stripped from the resulting series. Add [keep_metric_names](#keep_metric_names) modifier in order to keep metric names.\n\nThis function is supported by MetricsQL.\n\nSee also [atanh](#atanh).\n```\n\n----------------------------------------\n\nTITLE: Measuring Time Lags with Lag in Markdown\nDESCRIPTION: 'lag' returns the time difference in seconds between the last sample in a window and current point, for independent time series analysis.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/MetricsQL.md#2025-04-22_snippet_39\n\nLANGUAGE: Markdown\nCODE:\n```\n`lag(series_selector[d])` is a [rollup function](#rollup-functions), which returns the duration in seconds between the last sample\\non the given lookbehind window `d` and the timestamp of the current point.\n```\n\n----------------------------------------\n\nTITLE: Configuring vlogsgenerator with Multiple Workers in Bash\nDESCRIPTION: Command to run vlogsgenerator with 16 workers for improved performance during benchmarks.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlogsgenerator/README.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nbin/vlogsgenerator \\\n  -start=2024-01-01 -end=2024-02-01 \\\n  -activeStreams=100 \\\n  -logsPerStream=10_000 \\\n  -addr=http://localhost:9428/insert/jsonline \\\n  -workers=16\n```\n\n----------------------------------------\n\nTITLE: Configuring YAML Frontmatter for Changelog Page\nDESCRIPTION: YAML frontmatter defining metadata for the changelog page, including weight, title, search settings, menu structure, and aliases.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/changelog/CHANGELOG_2022.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nweight: 5\ntitle: Year 2022\nsearch:\n  weight: 0.1\nmenu:\n  docs:\n    identifier: vm-changelog-2022\n    parent: vm-changelog\n    weight: 5\naliases:\n- /CHANGELOG_2022.html\n- /changelog_2022\n- /changelog/changelog_2022/index.html\n- /changelog/changelog_2022/\n---\n```\n\n----------------------------------------\n\nTITLE: Keeping Metrics by Name Pattern with 'keep_metrics' - YAML\nDESCRIPTION: Configures the 'keep_metrics' action to retain only metrics whose names match a regular expression (e.g., 'foo|bar'). Relies on the enhanced relabeling feature of VictoriaMetrics; no other dependencies required. Parameters: 'action' and 'regex'. Input: collection of metric names; output: subset matching specified patterns. Essential for reducing data volume via pattern matching in YAML relabeling.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmagent.md#2025-04-22_snippet_34\n\nLANGUAGE: YAML\nCODE:\n```\n- action: keep_metrics\n  regex: \"foo|bar\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Telegraf HTTP Output for VictoriaLogs\nDESCRIPTION: Configuration snippet for Telegraf using HTTP output to send logs to VictoriaLogs. Shows input configuration and HTTP output setup with specific query parameters for message field, time field, and stream fields.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/data-ingestion/Telegraf.md#2025-04-22_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[[inputs.tail]]\n  files = [\"/tmp/telegraf.log\"]\n  from_beginning = false\n  interval = \"10s\"\n  pipe = false\n  watch_method = \"inotify\"\n  data_format = \"value\"\n  data_type = \"string\"\n  character_encoding = \"utf-8\"\n  [inputs.tail.tags]\n     metric_type = \"logs\"\n     log_source = \"telegraf\"\n\n[[outputs.http]]\n  url = \"http://localhost:9428/insert/jsonline?_msg_field=fields.message&_time_field=timestamp,_stream_fields=tags.log_source,tags.metric_type\"\n  data_format = \"json\"\n  namepass = [\"docker_log\"]\n  use_batch_format = false\n```\n\n----------------------------------------\n\nTITLE: Updating x-ms-content-crc64 Header Client Name in Swagger - YAML\nDESCRIPTION: This snippet sets the 'x-ms-client-name' property of the 'x-ms-content-crc64' header to 'ContentCRC64' within all HTTP response headers in the Swagger document. It is applied via a JSONPath-like query to the OpenAPI document and used for customizing client-side property names in the generated SDK code. Requires the presence of the relevant Swagger elements to have effect.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/internal/generated/autorest.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n- from: swagger-document\n  where: $.x-ms-paths.*.*.responses.*.headers.x-ms-content-crc64\n  transform: >\n    $[\"x-ms-client-name\"] = \"ContentCRC64\"\n```\n\n----------------------------------------\n\nTITLE: Calculating Sum of Duration Values\nDESCRIPTION: Example showing how to calculate sum of duration values from logs in last 5 minutes\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_197\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m | stats sum(duration) sum_duration\n```\n\n----------------------------------------\n\nTITLE: Calculating Increases with Rollup Increase Function in VictoriaMetrics\nDESCRIPTION: The `rollup_increase` function measures increases for raw samples, providing min, max, and avg values in structured time series data over the window `d`. This function applies mainly to counters and can output a single calculated result based on an optional second argument.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/MetricsQL.md#2025-04-22_snippet_54\n\nLANGUAGE: Other\nCODE:\n```\nrollup_increase(series_selector[d])\n```\n\n----------------------------------------\n\nTITLE: Verifying Modified VictoriaMetrics Data using Shell and jq\nDESCRIPTION: Uses `cat` to read the contents of the modified `data.jsonl` file and pipes it to `jq` for pretty-printing. This confirms that the `sed` command successfully replaced the values in the file.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/guides/guide-delete-or-replace-metrics/README.md#2025-04-22_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\ncat data.jsonl | jq\n```\n\n----------------------------------------\n\nTITLE: Querying Metrics with Label Filters in VictoriaMetrics\nDESCRIPTION: Example of a query using metric name and label filters in VictoriaMetrics. This type of query is now optimized for faster matching of time series.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/changelog/CHANGELOG_2021.md#2025-04-22_snippet_30\n\nLANGUAGE: promql\nCODE:\n```\nup{job=\"foobar\"}\n```\n\n----------------------------------------\n\nTITLE: Preserving Metric Names After Function Application (MetricsQL)\nDESCRIPTION: Demonstrates the `keep_metric_names` modifier applied to a rollup function (`rate`). By default, functions drop the `__name__` label; this modifier prevents that, keeping the original metric names (`foo` and `bar`) in the result.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_24\n\nLANGUAGE: MetricsQL\nCODE:\n```\nrate({__name__=~\"foo|bar\"}) keep_metric_names\n```\n\n----------------------------------------\n\nTITLE: Creating vminsert Linux Service Configuration\nDESCRIPTION: Systemd service configuration for vminsert component that handles data ingestion and connects to vmstorage nodes.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/Quick-Start.md#2025-04-22_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nsudo bash -c 'cat <<END >/etc/systemd/system/vminsert.service\n[Unit]\nDescription=VictoriaMetrics vminsert service\nAfter=network.target\n\n[Service]\nType=simple\nUser=victoriametrics\nGroup=victoriametrics\nRestart=always\nExecStart=/usr/local/bin/vminsert-prod -storageNode=<list of vmstorages>\n\nPrivateTmp=yes\nNoNewPrivileges=yes\nProtectSystem=full\n\n[Install]\nWantedBy=multi-user.target\nEND'\n```\n\n----------------------------------------\n\nTITLE: Retrieving Type Information by Name using reflect2 in Go\nDESCRIPTION: Demonstrates using `reflect2.TypeByName` to obtain a type object from its fully qualified name string (e.g., \"awesome-package.MyStruct\"). It depends on the `reflect2` package. Note that the type must be referenced somewhere in the code; otherwise, the compiler might eliminate it, making it unavailable at runtime.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/modern-go/reflect2/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\n// given package is github.com/your/awesome-package\ntype MyStruct struct {\n\t// ...\n}\n\n// will return the type\nreflect2.TypeByName(\"awesome-package.MyStruct\")\n// however, if the type has not been used\n// it will be eliminated by compiler, so we can not get it in runtime\n```\n\n----------------------------------------\n\nTITLE: Preventing Conflicting Stream Aggregation Options (Configuration)\nDESCRIPTION: VictoriaMetrics stream aggregation now prevents enabling both the `-streamAggr.keepInput` command-line flag and the `keep_metric_names: true` option within the stream aggregation configuration file simultaneously. This restriction avoids potential time series collisions.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/changelog/CHANGELOG_2024.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n-streamAggr.keepInput\n```\n\nLANGUAGE: yaml\nCODE:\n```\n# In stream aggregation config file:\n# - match: '{__name__=\"input_metric\"}'\n#   outputs:\n#   - ...\n#   keep_metric_names: true # Cannot be used if -streamAggr.keepInput is also true\n```\n\n----------------------------------------\n\nTITLE: Filtering Logs by Substring - VictoriaMetrics LogsQL - LogSQL\nDESCRIPTION: Uses the substring filter (~\"ampl\") to match log messages in which the substring 'ampl' appears anywhere within the _msg field. The filter is case-sensitive and does not match uppercase substrings. Inputs: logs; Outputs: messages containing 'ampl'. Limitation: Case-insensitive searches may be slower.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_51\n\nLANGUAGE: logsql\nCODE:\n```\n~\"ampl\"\n```\n\n----------------------------------------\n\nTITLE: Sorting with Offset and Limit in LogsQL\nDESCRIPTION: This query skips the first 10 logs with the biggest request_duration field, then returns the next 20 sorted logs for the last hour.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_131\n\nLANGUAGE: logsql\nCODE:\n```\n_time:1h | sort by (request_duration desc) offset 10 limit 20\n```\n\n----------------------------------------\n\nTITLE: Converting VictoriaMetrics Histogram Buckets to Prometheus Buckets - MetricsQL (English)\nDESCRIPTION: The `prometheus_buckets(buckets)` function transforms VictoriaMetrics histogram buckets with `vmrange` labels into standard Prometheus histogram buckets with `le` labels. This conversion simplifies creating heatmaps in Grafana and relies on a time series input that matches VictoriaMetrics histogram conventions.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/MetricsQL.md#2025-04-22_snippet_77\n\nLANGUAGE: MetricsQL\nCODE:\n```\n`prometheus_buckets(buckets)`\n```\n\n----------------------------------------\n\nTITLE: Exact Match for UTF-8 Field and Value - VictoriaMetrics LogsQL - LogSQL\nDESCRIPTION: Shows an exact filter using both UTF-8 field name ('log.დონე') and UTF-8 value ('შეცდომა'). Supports arbitrary Unicode characters for advanced localization or internationalization needs. Dependencies: VictoriaMetrics LogsQL with UTF-8 support. Input: logs; Output: entries where the specified field equals the given string.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_58\n\nLANGUAGE: logsql\nCODE:\n```\nlog.დონე:=\"შეცდომა\"\n```\n\n----------------------------------------\n\nTITLE: Using sum_gt_over_time with VictoriaMetrics - Markdown - Syntax Reference\nDESCRIPTION: This snippet highlights the sum_gt_over_time rollup function in VictoriaMetrics, designed to sum all sample values greater than gt within the window d for each time series. It is typically used on gauges and strips metric names by default. Parameters required: series_selector (series filter), d (window), gt (greater-than threshold). Output: sum for values above gt.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_62\n\nLANGUAGE: Markdown\nCODE:\n```\n`sum_gt_over_time(series_selector[d], gt)`\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Identity Module using Go Get (Shell)\nDESCRIPTION: This shell command installs or updates the Azure Identity module for Go using the `go get` command with the `-u` flag for updating. This is a prerequisite for using the azidentity package in a Go project.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/Azure/azure-sdk-for-go/sdk/azidentity/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngo get -u github.com/Azure/azure-sdk-for-go/sdk/azidentity\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom VictoriaLogs Endpoint\nDESCRIPTION: Example showing how to configure vlogscli to use a custom VictoriaLogs endpoint using the -datasource.url flag.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/querying/vlogscli.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n./vlogscli -datasource.url='https://victoria-logs.some-domain.com/select/logsql/query'\n```\n\n----------------------------------------\n\nTITLE: Overriding vmagent Sample Limit per Target (Configuration)\nDESCRIPTION: Enables overriding the `sample_limit` setting defined in `scrape_configs` on a per-target basis. This is achieved by setting the `__sample_limit__` label on the specific target.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/changelog/CHANGELOG_2024.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n# Example relabeling rule to set the limit\nrelabel_configs:\n- source_labels: [__address__]\n  target_label: __sample_limit__\n  replacement: \"50000\" # Sets sample limit to 50000 for this target\n```\n\nLANGUAGE: text\nCODE:\n```\n__sample_limit__\n```\n\n----------------------------------------\n\nTITLE: Time-Bucketed Stats Calculation in LogsQL\nDESCRIPTION: This query calculates per-minute number of logs and unique IP addresses over the last 5 minutes using time buckets.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_140\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m | stats by (_time:1m) count() logs_total, count_uniq(ip) ips_total\n```\n\n----------------------------------------\n\nTITLE: Disabling Downsampling for Specific Time Series in VictoriaMetrics\nDESCRIPTION: Command-line flag to disable downsampling for specific time series matching a filter. This example prevents downsampling for any series with the env=\"prod\" label.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/README.md#2025-04-22_snippet_72\n\nLANGUAGE: bash\nCODE:\n```\n-downsampling.period='{env=\"prod\"}:0s:0s'\n```\n\n----------------------------------------\n\nTITLE: Basic Rollup Function\nDESCRIPTION: Calculates min, max and avg values for raw samples on a given lookbehind window. Returns results with rollup labels.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_38\n\nLANGUAGE: metricsql\nCODE:\n```\nrollup(series_selector[d])\n```\n\n----------------------------------------\n\nTITLE: Shutting Down VictoriaMetrics Cluster Docker Compose Environment\nDESCRIPTION: Command to shut down the Docker Compose environment for VictoriaMetrics cluster configuration.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/deployment/docker/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmake docker-vm-cluster-down\n```\n\n----------------------------------------\n\nTITLE: Using range_over_time to Measure Variability - PromQL/Pseudocode\nDESCRIPTION: Computes the difference between the maximum and minimum values (i.e., range) of raw samples in the window 'd'. Inputs are a series selector and time window. The output quantifies variability over the lookbehind period. Metric names are stripped in outputs by default. Applied to gauge-type metrics.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_50\n\nLANGUAGE: pseudo-promql\nCODE:\n```\n`range_over_time(series_selector[d])`\n```\n\n----------------------------------------\n\nTITLE: Retrieving Field Names with LogsQL in VictoriaLogs\nDESCRIPTION: LogsQL query to get all field names seen across logs during the last hour using the 'field_names' pipe.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/FAQ.md#2025-04-22_snippet_3\n\nLANGUAGE: logsql\nCODE:\n```\n_time:1h | field_names | sort by (name)\n```\n\n----------------------------------------\n\nTITLE: Example YAML Configuration for vmanomaly Monitoring Section\nDESCRIPTION: This YAML snippet exemplifies the configuration for the `monitoring` section in `vmanomaly`. It sets up both pull monitoring (listening on `0.0.0.0:8080`) and push monitoring (sending metrics to `http://localhost:8480/`). The push configuration includes parameters for tenant ID (for cluster versions), basic authentication (`USERNAME`/`PASSWORD`), disables TLS verification (`verify_tls: False`), sets a request timeout (`5s`), specifies a scheduled push frequency (`15m`), and adds custom extra labels.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/anomaly-detection/components/monitoring.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n``` yaml\nmonitoring:\n  pull: # Enable /metrics endpoint.\n    addr: \"0.0.0.0\"\n    port: 8080\n  push:\n    url: \"http://localhost:8480/\"\n    tenant_id: \"0:0\" # For cluster version only\n    user: \"USERNAME\"\n    password: \"PASSWORD\"\n    verify_tls: False\n    timeout: \"5s\"\n    push_frequency: \"15m\"  # set to \"\" to disable scheduled pushes and leave only fit/infer based\n    extra_labels:\n      job: \"vmanomaly-push\"\n      test: \"test-1\"\n```\n```\n\n----------------------------------------\n\nTITLE: Querying VictoriaLogs Field Names for Specific Tenant using curl (sh)\nDESCRIPTION: Shows how to query the `/select/logsql/field_names` endpoint for a specific VictoriaLogs tenant (AccountID 12, ProjectID 34) by passing tenant IDs via HTTP headers (`-H 'AccountID: 12' -H 'ProjectID: 34'`). The query retrieves field names statistics for logs within the last 5 minutes (`query=_time:5m`).\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/querying/README.md#2025-04-22_snippet_29\n\nLANGUAGE: sh\nCODE:\n```\ncurl http://localhost:9428/select/logsql/field_names -H 'AccountID: 12' -H 'ProjectID: 34' -d 'query=_time:5m'\n```\n\n----------------------------------------\n\nTITLE: Configuring GCE Service Discovery in YAML\nDESCRIPTION: Configuration example for GCE service discovery in VictoriaMetrics. Includes optional settings for project, zone, filter, port, and tag separator. Used for discovering scrape targets from GCP GCE instances.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/sd_configs.md#2025-04-22_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nscrape_configs:\n- job_name: gce\n  gce_sd_configs:\n\n    # project is an optional GCE project where targets must be discovered.\n    # By default, the local project is used.\n    #\n  - project: \"...\"\n\n    # zone is an optional zone where targets must be discovered.\n    # By default, the local zone is used.\n    # If zone equals to '*', then targets in all the zones for the given project are discovered.\n    # The zone may contain a list of zones: zone[\"us-east1-a\", \"us-east1-b\"]\n    #\n    # zone: \"...\"\n\n    # filter is an optional filter for the instance list.\n    # See https://cloud.google.com/compute/docs/reference/latest/instances/list\n    #\n    # filter: \"...\"\n\n    # port is an optional port to scrape metrics from.\n    # By default, port 80 is used.\n    #\n    # port: ...\n\n    # tag_separator is an optional separator for tags in `__meta_gce_tags` label.\n    # By default, \",\" is used.\n    #\n    # tag_separator: \"...\"\n```\n\n----------------------------------------\n\nTITLE: Filtering Discovered vmstorage Nodes using Command-Line Flag\nDESCRIPTION: Introduces the `-storageNode.filter` command-line flag for VictoriaMetrics enterprise edition. This flag allows filtering of automatically discovered `vmstorage` nodes using regular expressions.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/changelog/CHANGELOG_2022.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n-storageNode.filter\n```\n\n----------------------------------------\n\nTITLE: Configuring TCP Address for VictoriaMetrics Select Service\nDESCRIPTION: This command-line option sets the TCP address for accepting connections from vmselect services. The default address is ':8401'.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/Cluster-VictoriaMetrics.md#2025-04-22_snippet_32\n\nLANGUAGE: plaintext\nCODE:\n```\n-vmselectAddr string\n```\n\n----------------------------------------\n\nTITLE: Filtering Series by Label Regex Match in MetricsQL\nDESCRIPTION: A label manipulation function that keeps only those time series from `q` where the specified `label`'s value matches the given `regexp`. Useful after functions like `rollup` that might generate multiple series per input. See also `label_mismatch` and `labels_equal`. Implicitly applies `default_rollup()` if `q` is a series selector.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_150\n\nLANGUAGE: metricsql\nCODE:\n```\nlabel_match(q, \"label\", \"regexp\")\n```\n\n----------------------------------------\n\nTITLE: Filtering Logs by Stream ID - VictoriaLogs LogSQL\nDESCRIPTION: This LogsQL snippet filters logs by a specific _stream_id, selecting all log entries for a particular log stream. It requires knowledge of the log stream's unique identifier and a VictoriaLogs instance with LogsQL capabilities. The parameter is the hexadecimal ID; output is all logs pertaining to that stream. Limitation: if the stream contains many logs, performance or result size may be a concern.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_33\n\nLANGUAGE: logsql\nCODE:\n```\n_stream_id:0000007b000001c850d9950ea6196b1a4812081265faa1c7\n```\n\n----------------------------------------\n\nTITLE: Using deriv_fast Rollup Function in VictoriaMetrics\nDESCRIPTION: This function calculates per-second derivative using only the first and last raw samples on the lookbehind window. Metric names are stripped from results unless keep_metric_names modifier is added.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_17\n\nLANGUAGE: markdown\nCODE:\n```\nderiv_fast(series_selector[d])\n```\n\n----------------------------------------\n\nTITLE: Subquery Example with max_over_time in MetricsQL\nDESCRIPTION: Demonstrates a subquery where the inner function is calculated with a specific step value, and the outer function uses the results.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_155\n\nLANGUAGE: metricsql\nCODE:\n```\nmax_over_time(rate(http_requests_total[5m])[1h:30s])\n```\n\n----------------------------------------\n\nTITLE: Parsing JSON in Log Messages using LogsQL\nDESCRIPTION: This query demonstrates how to unpack JSON stored in the _msg field of logs from the last 5 minutes using the unpack_json pipe.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/logsql-examples.md#2025-04-22_snippet_8\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m | unpack_json\n```\n\n----------------------------------------\n\nTITLE: Function Syntax: hoeffding_bound_lower\nDESCRIPTION: Function signature for calculating lower Hoeffding bound\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_34\n\nLANGUAGE: promql\nCODE:\n```\nhoeffding_bound_lower(phi, series_selector[d])\n```\n\n----------------------------------------\n\nTITLE: Sorting Series by Label Values in PromQL\nDESCRIPTION: The sort_by_label function sorts series in ascending order based on the values of specified labels.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_134\n\nLANGUAGE: promql\nCODE:\n```\nsort_by_label(foo, \"bar\")\n```\n\n----------------------------------------\n\nTITLE: Using FirstWordInString for Word Segmentation\nDESCRIPTION: Example of using 'FirstWordInString' function to iterate over words in a string, which is part of the uniseg package. Efficient for word segmentation tasks in Go.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/rivo/uniseg/README.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nstr := \"Hello, world!\"\nstate := -1\nvar c string\nfor len(str) > 0 {\n\tc, str, state = uniseg.FirstWordInString(str, state)\n\tfmt.Printf(\"(%s)\\n\", c)\n}\n// (Hello)\n// (,)\n// ( )\n// (world)\n// (!)\n```\n\n----------------------------------------\n\nTITLE: Derivate Calculation with IDeriv in Markdown\nDESCRIPTION: 'ideriv' computes the per-second derivative from the last two raw samples for each time series. Metric names are stripped without modification. It seamlessly supports derivative analysis.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/MetricsQL.md#2025-04-22_snippet_32\n\nLANGUAGE: Markdown\nCODE:\n```\n`ideriv(series_selector[d])` is a [rollup function](#rollup-functions), which calculates the per-second derivative based\\non the last two [raw samples](https://docs.victoriametrics.com/keyconcepts/#raw-samples)\\nover the given lookbehind window `d`.\n```\n\n----------------------------------------\n\nTITLE: OpenTelemetry Import Paths\nDESCRIPTION: Various import paths used in the OpenTelemetry Go SDK for exporters and bridges.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-22_snippet_38\n\nLANGUAGE: go\nCODE:\n```\ngo.opentelemetry.io/otel/exporters/otlptrace/otlptracegrpc\ngo.opentelemetry.io/otel/exporters/otlptrace/otlptracehttp\ngo.opentelemetry.io/otel/exporters/otlpmetric/otlpmetricgrpc\ngo.opentelemetry.io/otel/exporters/otlpmetric/otlpmetrichttp\ngo.opentelemetry.io/otel/bridge/opentracing\ngo.opentelemetry.io/otel/bridge/opencensus\n```\n\n----------------------------------------\n\nTITLE: Installing VictoriaMetrics via Snap Package (Ubuntu)\nDESCRIPTION: Command to install the single-node VictoriaMetrics using the Snap package manager on Ubuntu systems.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/changelog/CHANGELOG_2020.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nsnap install victoriametrics\n```\n\n----------------------------------------\n\nTITLE: Wrapping HTTP Client Transport for Faster Gzip Decompression in Go\nDESCRIPTION: This Go code sample demonstrates how to wrap the standard HTTP client's Transport with 'gzhttp.Transport' to provide faster Gzip decompression for HTTP responses. It replaces the default transport, creates a new client, issues a GET request, and reads the decompressed response. Dependencies include the 'net/http', 'fmt', 'io/ioutil', and 'github.com/klauspost/compress/gzhttp' packages. The key input is a URL for the HTTP GET; the output is the response body, printed as a string. Errors are handled with early returns, and resources are properly closed using 'defer'.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/klauspost/compress/gzhttp/README.md#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nfunc ExampleTransport() {\n\t// Get an HTTP client.\n\tclient := http.Client{\n\t\t// Wrap the transport:\n\t\tTransport: gzhttp.Transport(http.DefaultTransport),\n\t}\n\n\tresp, err := client.Get(\"https://google.com\")\n\tif err != nil {\n\t\treturn\n\t}\n\tdefer resp.Body.Close()\n\t\n\tbody, _ := ioutil.ReadAll(resp.Body)\n\tfmt.Println(\"body:\", string(body))\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Snapshot URLs for vmbackup (Shell)\nDESCRIPTION: These command-line flags (`-snapshot.createURL`, `-snapshot.deleteURL`) are used with the `vmbackup` tool to define the endpoints for creating and deleting snapshots. Version 1.86.2 fixed a security issue where basic authentication passwords included in these URLs were exposed in logs. Ensure sensitive information is handled securely when using these flags.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/changelog/CHANGELOG_2023.md#2025-04-22_snippet_19\n\nLANGUAGE: shell\nCODE:\n```\n-snapshot.createURL\n```\n\nLANGUAGE: shell\nCODE:\n```\n-snapshot.deleteURL\n```\n\n----------------------------------------\n\nTITLE: Configuring Vector Elasticsearch Sink with Field Ignoring\nDESCRIPTION: This YAML configuration demonstrates how to ignore specific log fields during data ingestion. It adds the ignore_fields parameter to skip 'log.offset' and 'event.original' fields in the ingested logs.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/data-ingestion/Vector.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nsinks:\n  vlogs:\n    inputs:\n      - your_input\n    type: elasticsearch\n    endpoints:\n      - http://localhost:9428/insert/elasticsearch/\n    api_version: v8\n    compression: gzip\n    healthcheck:\n      enabled: false\n    query:\n      _msg_field: message\n      _time_field: timestamp\n      _stream_fields: host,container_name\n      ignore_fields: log.offset,event.original\n```\n\n----------------------------------------\n\nTITLE: Calculating Average Scrape Interval in MetricsQL\nDESCRIPTION: Calculates the average interval (in seconds) between raw samples within a lookbehind window `d` for each selected time series. Metric names are stripped by default unless the `keep_metric_names` modifier is added.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_61\n\nLANGUAGE: metricsql\nCODE:\n```\nscrape_interval(series_selector[d])\n```\n\n----------------------------------------\n\nTITLE: Updating CORS XML Struct Tag Case in Go Source Files - YAML\nDESCRIPTION: This snippet corrects the struct tag for XML marshalling from 'xml:\"CORS>CORSRule\"' to 'xml:\"Cors>CorsRule\"', complying with the expected XML schema. It operates on Go source files using a simple regex replacement and is intended for automatic fixup of code-generated struct tags.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/internal/generated/autorest.md#2025-04-22_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n  - from: source-file-go\n    where: $\n    transform: >-\n      return $.\n        replace(/xml:\"CORS>CORSRule\"/g, \"xml:\\\"Cors>CorsRule\\\"\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Backtesting Scheduler with ISO Format in YAML\nDESCRIPTION: Example YAML configuration for a backtesting scheduler using ISO 8601 datetime format. Defines overall timeframe, training window, and inference frequency with optional parallel execution settings.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/anomaly-detection/components/scheduler.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nschedulers:\n  backtesting_scheduler_alias:\n    class: \"backtesting\"\n    # (or class: \"scheduler.backtesting.BacktestingScheduler\" until v1.13.0 with class alias support)\n    from_iso: '2021-01-01T00:00:00Z'\n    to_iso: '2021-01-14T00:00:00Z'\n    fit_window: 'P14D'\n    fit_every: 'PT1H'\n    n_jobs: 1  # default = 1 (sequential), set it up to # of CPUs for parallel execution\n```\n\n----------------------------------------\n\nTITLE: Exact Match on Whole Message - VictoriaMetrics LogsQL - LogSQL\nDESCRIPTION: Performs an exact match on the entire log message, returning only entries whose content is exactly 'fatal error: cannot find /foo/bar'. The equal sign (=) triggers this mode. Dependencies: VictoriaMetrics LogsQL. Input: logs; Output: exactly matching entries. Limitations: Case-sensitive; requires exact text match.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_56\n\nLANGUAGE: logsql\nCODE:\n```\n=\"fatal error: cannot find /foo/bar\"\n```\n\n----------------------------------------\n\nTITLE: Filtering Specific Field by Prefix - VictoriaMetrics LogsQL - LogSQL\nDESCRIPTION: Filters logs where the 'log.level' field contains any word beginning with 'err'. The syntax prepends the field name (log.level) prior to the colon and the prefix filter. Dependencies: VictoriaMetrics LogsQL implementation. Input: logs with 'log.level' field; Output: entries matching the prefix.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_49\n\nLANGUAGE: logsql\nCODE:\n```\nlog.level:err*\n```\n\n----------------------------------------\n\nTITLE: Counting Error Messages with Stats Pipe in LogsQL\nDESCRIPTION: This query counts the number of log messages containing the word 'error' in the last 5 minutes using the _time filter and stats pipe.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_20\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m error | stats count() errors\n```\n\n----------------------------------------\n\nTITLE: Configuring License Key in Helm Values\nDESCRIPTION: Configuration for VictoriaMetrics single-node Helm chart with plain-text license key specification.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/enterprise.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nserver:\n  image:\n    tag: v1.115.0-enterprise\n\nlicense:\n  key: {BASE64_ENCODED_LICENSE_KEY}\n```\n\n----------------------------------------\n\nTITLE: Disabling Alert Group Label in vmalert (Shell)\nDESCRIPTION: Added in v1.65.0, the `-disableAlertgroupLabel` command-line flag for vmalert prevents the addition of the `alertgroup` label to generated alerts. This can be useful for ensuring proper deduplication in Alertmanager based on other labels.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/changelog/CHANGELOG_2021.md#2025-04-22_snippet_11\n\nLANGUAGE: Shell\nCODE:\n```\n-disableAlertgroupLabel\n```\n\n----------------------------------------\n\nTITLE: Count Total Samples Over Time in PromQL\nDESCRIPTION: Calculates the total number of raw samples in a lookbehind window for each time series. Standard PromQL function that returns sample counts.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_30\n\nLANGUAGE: promql\nCODE:\n```\ncount_over_time(series_selector[d])\n```\n\n----------------------------------------\n\nTITLE: Building Docker Images with Custom Base\nDESCRIPTION: Command to build Docker images for cluster components using a custom base image.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/Cluster-VictoriaMetrics.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nROOT_IMAGE=scratch make package\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Client Certificate using autorest/adal in Go\nDESCRIPTION: This Go code snippet illustrates client certificate authentication using the `autorest/adal` library. It involves reading certificate data (e.g., from a PFX file), decoding it, creating an `adal.OAuthConfig`, obtaining a `ServicePrincipalToken` using the certificate details and resource audience, and finally assigning an `autorest.Authorizer` to an older SDK client.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/Azure/azure-sdk-for-go/sdk/azidentity/MIGRATION.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"os\"\n\n    \"github.com/Azure/azure-sdk-for-go/services/resources/mgmt/2018-06-01/subscriptions\"\n    \"github.com/Azure/go-autorest/autorest\"\n    \"github.com/Azure/go-autorest/autorest/adal\"\n)\ncertData, err := os.ReadFile(\"./example.pfx\")\nhandle(err)\n\ncertificate, rsaPrivateKey, err := decodePkcs12(certData, \"\")\nhandle(err)\n\noauthCfg, err := adal.NewOAuthConfig(\"https://login.microsoftonline.com\", tenantID)\nhandle(err)\n\nspt, err := adal.NewServicePrincipalTokenFromCertificate(\n    *oauthConfig, clientID, certificate, rsaPrivateKey, \"https://management.azure.com/\",\n)\n\nclient := subscriptions.NewClient()\nclient.Authorizer = autorest.NewBearerAuthorizer(spt)\n```\n\n----------------------------------------\n\nTITLE: Decoding Uncompressed Offsets from S2 Index (Pseudocode)\nDESCRIPTION: Pseudocode illustrating the logic for decoding uncompressed offsets stored within an s2 index. It shows how each offset is calculated based on the previous entry's offset, the estimated block size (`EstBlockSize`), and a delta value read from the stream (`uOff`), considering whether full uncompressed offsets are present (`HasUncompressedOffsets`).\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/klauspost/compress/s2/README.md#2025-04-22_snippet_23\n\nLANGUAGE: pseudocode\nCODE:\n```\n// Read Uncompressed entries.\n// Each assumes EstBlockSize delta from previous.\nfor each entry {\n    uOff = 0\n    if HasUncompressedOffsets == 1 {\n        uOff = ReadVarInt // Read value from stream\n    }\n   \n    // Except for the first entry, use previous values.\n    if entryNum == 0 {\n        entry[entryNum].UncompressedOffset = uOff\n        continue\n    }\n    \n    // Uncompressed uses previous offset and adds EstBlockSize\n    entry[entryNum].UncompressedOffset = entry[entryNum-1].UncompressedOffset + EstBlockSize + uOff\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing `-remoteWrite.streamAggr.ignoreFirstIntervals` Application (Command-line)\nDESCRIPTION: Modifies the `-remoteWrite.streamAggr.ignoreFirstIntervals` command-line flag to accept multiple duration values. Each value corresponds to the respective `-remoteWrite.url` defined at the same position, allowing per-URL configuration. Previously, it only accepted a single value applied globally.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/changelog/CHANGELOG_2024.md#2025-04-22_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\n-remoteWrite.url http://vm1 -remoteWrite.url http://vm2 -remoteWrite.streamAggr.ignoreFirstIntervals 10s,5s\n```\n\n----------------------------------------\n\nTITLE: Configuring Reader Time and Query Settings in YAML\nDESCRIPTION: Basic configuration for a VmReader including timezone, sampling period, and query behavior options. The configuration sets the timezone to Australia/Sydney and configures query behavior to start from the last seen timestamp with a latency offset.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/anomaly-detection/components/reader.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n  tz: 'Australia/Sydney'  # if set, overrides reader-level tz\n  # tenant_id: '1:0'  # if set, overrides reader-level tenant_id\nsampling_period: '1m'\nquery_from_last_seen_timestamp: True  # false by default\nlatency_offset: '1ms'\n```\n\n----------------------------------------\n\nTITLE: Delta Rollup Function\nDESCRIPTION: Calculates differences between adjacent raw samples and returns min, max and avg values of the differences.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_40\n\nLANGUAGE: metricsql\nCODE:\n```\nrollup_delta(series_selector[d])\n```\n\n----------------------------------------\n\nTITLE: Configuring vmselect with Mixed Replication Factors\nDESCRIPTION: Command to run vmselect with both a global replication factor of 2 and a node replication factor of 3, providing redundancy at both the group and node levels.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/Cluster-VictoriaMetrics.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n/path/to/vmselect \\\n -globalReplicationFactor=2 \\\n -replicationFactor=3 \\\n -storageNode=g1/host1,g1/host2,g1/host3 \\\n -storageNode=g2/host4,g2/host5,g2/host6 \\\n -storageNode=g3/host7,g3/host8,g3/host9\n```\n\n----------------------------------------\n\nTITLE: Finding Maximum Value Over Range - MetricsQL (English)\nDESCRIPTION: The `range_max(q)` function calculates the maximum observed value across all points in each time series resulting from `q`. It outputs a scalar per series, representing that series’ peak value in the time range.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/MetricsQL.md#2025-04-22_snippet_86\n\nLANGUAGE: MetricsQL\nCODE:\n```\n`range_max(q)`\n```\n\n----------------------------------------\n\nTITLE: Minimal Log Entry Example\nDESCRIPTION: Demonstration of the minimal required log entry structure containing only the _msg field.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/keyConcepts.md#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"_msg\": \"some log message\"\n}\n```\n\n----------------------------------------\n\nTITLE: Format Pipe Case Transformation\nDESCRIPTION: Demonstrates uppercase and lowercase field value transformation using uc: and lc: prefixes.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_105\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m | format 'uppercase foo: <uc:foo>, lowercase bar: <lc:bar>' as result\n```\n\n----------------------------------------\n\nTITLE: Fluentd Configuration with Field Filtering for VictoriaLogs\nDESCRIPTION: Configuration that ignores specific log fields during ingestion using the ignore_fields parameter.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/data-ingestion/Fluentd.md#2025-04-22_snippet_2\n\nLANGUAGE: fluentd\nCODE:\n```\n<match **>\n  @type http\n  endpoint \"http://localhost:9428/insert/jsonline&ignore_fields=log.offset,event.original\"\n  headers {\"VL-Msg-Field\": \"log\", \"VL-Time-Field\": \"time\", \"VL-Stream-Fields\": \"path\"}\n</match>\n```\n\n----------------------------------------\n\nTITLE: Counting Unique Log Streams with LogsQL in VictoriaLogs\nDESCRIPTION: LogsQL query to count the number of unique log streams across all logs over the last day using the 'count_uniq' pipe.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/FAQ.md#2025-04-22_snippet_5\n\nLANGUAGE: logsql\nCODE:\n```\n_time:1d | count_uniq(_stream)\n```\n\n----------------------------------------\n\nTITLE: Deleting the Restore Mark using vmbackupmanager CLI (Shell)\nDESCRIPTION: Example usage of the `vmbackupmanager restore delete` command. This command removes any existing restore mark.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmbackupmanager.md#2025-04-22_snippet_17\n\nLANGUAGE: sh\nCODE:\n```\n$ ./vmbackupmanager restore delete\n\n```\n\n----------------------------------------\n\nTITLE: Counting Counter Resets in PromQL\nDESCRIPTION: The resets function returns the number of counter resets over a given lookbehind window for each time series. It's usually applied to counters and is supported by PromQL.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_37\n\nLANGUAGE: promql\nCODE:\n```\nresets(series_selector[d])\n```\n\n----------------------------------------\n\nTITLE: Enabling Metric Name Usage Tracking in VictoriaMetrics Components (Bash)\nDESCRIPTION: Introduces the `--storage.trackMetricNamesStats` command-line flag for `vmsingle` and `vmstorage` components. When enabled, it allows tracking how often ingested metric names are used in queries, providing insights via the `/api/v1/status/metric_names_stats` API.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/changelog/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n--storage.trackMetricNamesStats\n```\n\n----------------------------------------\n\nTITLE: Calculating Inverse Sine (Arcsin) in MetricsQL\nDESCRIPTION: A transform function computing the inverse sine for each data point in the time series returned by `q`. If applied directly to a series selector, `default_rollup()` is implicitly used. Metric names are stripped by default; use `keep_metric_names` to preserve them. Supported by PromQL.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_69\n\nLANGUAGE: MetricsQL\nCODE:\n```\n`asin(q)`\n```\n\n----------------------------------------\n\nTITLE: Numeric Sorting of Series by Label Values in PromQL\nDESCRIPTION: The sort_by_label_numeric function sorts series in ascending order using numeric sort on the values of specified labels.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_136\n\nLANGUAGE: promql\nCODE:\n```\nsort_by_label_numeric(foo, \"bar\")\n```\n\n----------------------------------------\n\nTITLE: Prometheus Metrics for License Monitoring in VictoriaMetrics - Prometheus\nDESCRIPTION: This code block exposes license expiration metrics in Prometheus exposition format for monitoring via Prometheus-based tools. These metrics ('vm_license_expires_at' and 'vm_license_expires_in_seconds') allow alerting when the VictoriaMetrics Enterprise license is close to expiring. The block is intended for scraping by Prometheus or compatible systems; no external dependencies except Prometheus are required. The output provides timestamp and duration until license expiry; input is handled internally by vmanomaly.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/anomaly-detection/QuickStart.md#2025-04-22_snippet_1\n\nLANGUAGE: prometheus\nCODE:\n```\n# HELP vm_license_expires_at When the license expires as a Unix timestamp in seconds\n# TYPE vm_license_expires_at gauge\nvm_license_expires_at 1.6963776e+09\n# HELP vm_license_expires_in_seconds Amount of seconds until the license expires\n# TYPE vm_license_expires_in_seconds gauge\nvm_license_expires_in_seconds 4.886608e+06\n```\n\n----------------------------------------\n\nTITLE: GCS Service Account Credentials Configuration\nDESCRIPTION: JSON structure for Google Cloud Storage service account credentials required for authentication\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmbackupmanager.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"service_account\",\n  \"project_id\": \"<project>\",\n  \"private_key_id\": \"\",\n  \"private_key\": \"-----BEGIN PRIVATE KEY-----\\-----END PRIVATE KEY-----\\n\",\n  \"client_email\": \"test@<project>.iam.gserviceaccount.com\",\n  \"client_id\": \"\",\n  \"auth_uri\": \"https://accounts.google.com/o/oauth2/auth\",\n  \"token_uri\": \"https://oauth2.googleapis.com/token\",\n  \"auth_provider_x509_cert_url\": \"https://www.googleapis.com/oauth2/v1/certs\",\n  \"client_x509_cert_url\": \"https://www.googleapis.com/robot/v1/metadata/x509/test%40<project>.iam.gserviceaccount.com\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Static Targets in VictoriaMetrics\nDESCRIPTION: YAML configuration for specifying static scrape targets in VictoriaMetrics. Allows defining a list of targets with host:port format and optional custom labels. Supports customization of scheme, path, and other target properties.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/sd_configs.md#2025-04-22_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\nscrape_configs:\n- job_name: static\n  static_configs:\n\n    # targets must contain a list of `host:port` targets to scrape.\n    # The `http://host:port/metrics` endpoint is scraped per each configured target then.\n    # The `http` scheme can be changed to `https` by setting it via `scheme` field at `scrape_config` level.\n    # The `/metrics` path can be changed to arbitrary path via `metrics_path` field at `scrape_config` level.\n    # See https://docs.victoriametrics.com/sd_configs/#scrape_configs .\n    #\n    # Alternatively the scheme and path can be changed via `relabel_configs` section at `scrape_config` level.\n    # See https://docs.victoriametrics.com/vmagent/#relabeling .\n    #\n    # It is also possible specifying full target urls here, e.g. \"http://host:port/metrics/path?query_args\"\n    #\n  - targets:\n    - \"vmsingle1:8428\"\n    - \"vmsingleN:8428\"\n\n    # labels is an optional labels to add to all the targets.\n    #\n    # labels:\n    #   <labelname1>: \"<labelvalue1>\"\n    #   ...\n    #   <labelnameN>: \"<labelvalueN>\"\n```\n\n----------------------------------------\n\nTITLE: Configuring vmagent Remote Write OAuth2 Authorization (Shell/CLI)\nDESCRIPTION: Pattern representing command-line configuration parameters (`-remoteWrite.oauth2.*`) for vmagent. These parameters are used to configure OAuth2 authorization when vmagent writes data to a remote storage system specified by `-remoteWrite.url`. Specific parameters can be found via vmagent help.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/changelog/CHANGELOG_2021.md#2025-04-22_snippet_27\n\nLANGUAGE: shell\nCODE:\n```\n-remoteWrite.oauth2.*\n```\n\n----------------------------------------\n\nTITLE: Calculating OHLC Candlestick Rollups in MetricsQL\nDESCRIPTION: Calculates the open, high, low, and close (OHLC) values for raw samples within a specified lookbehind window `d` for each selected time series, useful for financial data. Results are returned with `rollup=\\\"open\\\"`, `rollup=\\\"high\\\"`, `rollup=\\\"low\\\"`, and `rollup=\\\"close\\\"` labels. An optional second argument (\\\"open\\\", \\\"high\\\", \\\"low\\\", or \\\"close\\\") can select a single result and omit the label. Typically used with gauges.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_55\n\nLANGUAGE: metricsql\nCODE:\n```\nrollup_candlestick(series_selector[d])\n```\n\n----------------------------------------\n\nTITLE: Sorting SemVer Versions in Go\nDESCRIPTION: Demonstrates sorting a slice of version strings according to SemVer rules. It involves parsing each raw version string into a `*version.Version` object, creating a slice of these objects, and then using the standard Go `sort.Sort` function with `version.Collection` to perform the sort in place. This correctly handles pre-release identifiers and numeric components.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/hashicorp/go-version/README.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nversionsRaw := []string{\"1.1\", \"0.7.1\", \"1.4-beta\", \"1.4\", \"2\"}\nversions := make([]*version.Version, len(versionsRaw))\nfor i, raw := range versionsRaw {\n    v, _ := version.NewVersion(raw)\n    versions[i] = v\n}\n\n// After this, the versions are properly sorted\nsort.Sort(version.Collection(versions))\n```\n\n----------------------------------------\n\nTITLE: Using sum_eq_over_time with VictoriaMetrics - Markdown - Syntax Reference\nDESCRIPTION: This snippet demonstrates how to use the sum_eq_over_time function in VictoriaMetrics, which sums all sample values equal to eq within window d per each series. It strips metric names unless instructed otherwise and is generally for gauges. Required parameters: series_selector (metric match), d (duration), eq (equality value). Output: sum for samples matching eq.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_61\n\nLANGUAGE: Markdown\nCODE:\n```\n`sum_eq_over_time(series_selector[d], eq)`\n```\n\n----------------------------------------\n\nTITLE: Use StepString Function for Grapheme Clusters\nDESCRIPTION: Iterate over grapheme clusters using the 'StepString' function, which is efficient as it doesn’t allocate new Graphemes objects. Requires 'uniseg' and the handling of states.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/rivo/uniseg/README.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nstr := \"🇩🇪🏳️‍🌈\"\nstate := -1\nvar c string\nfor len(str) > 0 {\n\tc, str, _, state = uniseg.StepString(str, state)\n\tfmt.Printf(\"%x \", []rune(c))\n}\n// [1f1e9 1f1ea] [1f3f3 fe0f 200d 1f308]\n```\n\n----------------------------------------\n\nTITLE: Getting Query Step Interval with step Function\nDESCRIPTION: The step function returns the step in seconds (interval) between the returned points. It corresponds to the 'step' query arg passed to /api/v1/query_range endpoint.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_109\n\nLANGUAGE: metricsql\nCODE:\n```\nstep()\n```\n\n----------------------------------------\n\nTITLE: Filtering Logs with Multiple Words\nDESCRIPTION: Examples of selecting logs containing multiple specific words using AND logical filter with additional constraints.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/logsql-examples.md#2025-04-22_snippet_3\n\nLANGUAGE: logsql\nCODE:\n```\nerror kubernetes\n```\n\nLANGUAGE: logsql\nCODE:\n```\nerror kubernetes _time:1h\n```\n\nLANGUAGE: logsql\nCODE:\n```\nerror kubernetes {container=\"my-app\"} _time:1h\n```\n\nLANGUAGE: logsql\nCODE:\n```\nerror kubernetes _time:1h | sort by (_time)\n```\n\n----------------------------------------\n\nTITLE: Unpacking Specific Logfmt Fields using LogSQL\nDESCRIPTION: This LogSQL query selects logs from the last 5 minutes (`_time:5m`) and unpacks only the `foo` and `bar` fields from the logfmt string stored in the `my_logfmt` field. Other key-value pairs within the logfmt string are ignored. The `fields (...)` clause specifies which fields to extract.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_159\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m | unpack_logfmt from my_logfmt fields (foo, bar)\n```\n\n----------------------------------------\n\nTITLE: Migration from Cortex with Remote Read Protocol\nDESCRIPTION: Command for migrating data from Cortex to VictoriaMetrics using the remote-read protocol. Specifies the Cortex Prometheus endpoint, time range, and VictoriaMetrics target.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmctl.md#2025-04-22_snippet_14\n\nLANGUAGE: sh\nCODE:\n```\n./vmctl remote-read \\ \n--remote-read-src-addr=http://127.0.0.1:9009/prometheus \\\n--remote-read-filter-time-start=2021-10-18T00:00:00Z \\\n--remote-read-step-interval=hour \\\n--vm-addr=http://127.0.0.1:8428 \\\n--vm-concurrency=6 \n```\n\n----------------------------------------\n\nTITLE: Configuring Elasticsearch Exporter with Custom Message Field for VictoriaLogs\nDESCRIPTION: This YAML snippet shows how to configure the Elasticsearch exporter to use a custom field for the log message, using the 'VL-Msg-Field' HTTP header.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/data-ingestion/opentelemetry.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nexporters:\n  elasticsearch:\n    endpoints:\n      - http://victorialogs:9428/insert/elasticsearch\n    headers:\n      VL-Msg-Field: Body\n```\n\n----------------------------------------\n\nTITLE: Resolved YAML Configuration with Merging Strategy\nDESCRIPTION: Shows the consolidated YAML configuration demonstrating the effects of the experimental confmap.enableMergeAppendOption, which appends lists from multiple configuration sources.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/go.opentelemetry.io/collector/confmap/README.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# main.yaml\nreceivers:\n  otlp/in:\nprocessors:\n  attributes/example:\n    actions:\n      - key: key\n        value: \"value\"\n        action: upsert\n  batch:\nexporters:\n  otlp/out:\nextensions:\n  file_storage:\n  healthcheckv2:\n\nservice:\n  pipelines:\n    traces:\n      receivers: [ otlp/in ]\n      processors: [ attributes/example, batch ]\n      exporters: [ otlp/out ]\n  extensions: [ file_storage, healthcheckv2 ]\n```\n\n----------------------------------------\n\nTITLE: Using tlast_change_over_time with VictoriaMetrics - Markdown - Syntax Reference\nDESCRIPTION: This snippet documents tlast_change_over_time, which provides the timestamp (seconds with millisecond precision) of the last change detected in each series for the window d. Metric names are stripped unless keep_metric_names is applied. It takes a series_selector and d (duration window) as its parameters.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_69\n\nLANGUAGE: Markdown\nCODE:\n```\n`tlast_change_over_time(series_selector[d])`\n```\n\n----------------------------------------\n\nTITLE: Using gRPC ClientConn for OTLP Exporters in Go\nDESCRIPTION: The OTLP gRPC exporters now use the underlying gRPC ClientConn for connection management, including name resolution, connection establishment, and error handling.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-22_snippet_45\n\nLANGUAGE: Go\nCODE:\n```\nimport \"go.opentelemetry.io/otel/exporter/otel/otlptrace/otlptracegrpc\"\n\nclient := otlptracegrpc.NewClient(\n    // ClientConn will handle connection management\n)\n```\n\n----------------------------------------\n\nTITLE: Maximum Value Calculation in PromQL\nDESCRIPTION: Calculates maximum value over raw samples within a lookbehind window for time series. Standard PromQL function typically used with gauges.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/MetricsQL.md#2025-04-22_snippet_43\n\nLANGUAGE: promql\nCODE:\n```\nmax_over_time(series_selector[d])\n```\n\n----------------------------------------\n\nTITLE: Example Cross-Compilation Error in Go\nDESCRIPTION: Shows a typical error message encountered when attempting to cross-compile a Go project that depends on `gozstd` without properly enabling CGO or specifying a cross-compiler. The error indicates that C types (`CDict`, `Writer`) required by the underlying C library (`zstd`) are undefined during the Go build process.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/valyala/gozstd/README.md#2025-04-22_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n# github.com/valyala/gozstd\n/go/pkg/mod/github.com/valyala/gozstd@v1.6.2/stream.go:31:59: undefined: CDict\n/go/pkg/mod/github.com/valyala/gozstd@v1.6.2/stream.go:35:64: undefined: CDict\n/go/pkg/mod/github.com/valyala/gozstd@v1.6.2/stream.go:47:20: undefined: Writer\n```\n\n----------------------------------------\n\nTITLE: Starting the Docker Compose Environment (Shell)\nDESCRIPTION: This command starts the Docker Compose services defined in the `docker-compose.yml` file in detached mode (`-d`). It should be executed within a directory containing the configuration file (e.g., `./aws` or `./gcp`) to launch the integrated environment including dd-proxy, lambda, victorialogs, and victoriametrics. Requires Docker and Docker Compose to be installed.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/deployment/docker/victorialogs/datadog-serverless/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndocker compose up -d \n```\n\n----------------------------------------\n\nTITLE: Correcting URL Encoding for Go HTTP Request Query Parameters - YAML\nDESCRIPTION: This snippet adjusts URL encoding by replacing '+' with '%20' in the encoded query string assigned to the HTTP request's RawQuery field in Go code. The regex targets calls to Encode() and wraps them in a strings.Replace operation, avoiding improper handling of space characters by Go's net/url package. It applies to ZZ client Go files and expects those methods to exist; outputs corrected query parameter encoding for Azure service compatibility.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/internal/generated/autorest.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n- from: \n  - zz_service_client.go\n  - zz_container_client.go\n  where: $\n  transform: >-\n    return $.\n      replace(/req.Raw\\(\\).URL.RawQuery \\= reqQP.Encode\\(\\)/g, `req.Raw().URL.RawQuery = strings.Replace(reqQP.Encode(), \"+\", \"%20\", -1)`);\n```\n\n----------------------------------------\n\nTITLE: Configuring Oneoff Scheduler with UNIX Time Format in YAML\nDESCRIPTION: Example YAML configuration for a oneoff scheduler using UNIX timestamp format (seconds since epoch). Defines fitting and inference time ranges with explicit start and end times.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/anomaly-detection/components/scheduler.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nschedulers:\n  oneoff_scheduler_alias:\n    class: \"oneoff\"\n    # (or class: \"scheduler.oneoff.OneoffScheduler\" until v1.13.0 with class alias support)\n    fit_start_s: 1648771200\n    fit_end_s: 1649548800\n    infer_start_s: 1649635200\n    infer_end_s: 1649894400\n```\n\n----------------------------------------\n\nTITLE: Fixing vmalert Notifier Headers Application (Configuration)\nDESCRIPTION: Resolves an issue in `vmalert` where HTTP headers specified within a notifier configuration file were mistakenly ignored. These headers should now be correctly applied to every request sent to the respective notifiers.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/changelog/CHANGELOG_2024.md#2025-04-22_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\n# Example notifier configuration file segment\nnotifiers:\n- url: \"http://alertmanager.example.com/api/v1/alerts\"\n  # Headers defined here were previously ignored but are now respected\n  headers:\n    Authorization: \"Bearer mysecrettoken\"\n    X-Custom-Source: \"vmalert-prod\"\n```\n\n----------------------------------------\n\nTITLE: Release Update - Smithy-Go v1.22.0\nDESCRIPTION: Addition of HTTP client metrics functionality.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/aws/smithy-go/CHANGELOG.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ngithub.com/aws/smithy-go@v1.22.0\n```\n\n----------------------------------------\n\nTITLE: System Call Entry Points in Assembly Implementation\nDESCRIPTION: Assembly file implementation with three main entry points for system call dispatch: Syscall, Syscall6, and RawSyscall. These functions differ in the number of arguments that can be passed to the kernel and whether they notify the scheduler.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/golang.org/x/sys/unix/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n  func Syscall(trap, a1, a2, a3 uintptr) (r1, r2, err uintptr)\n  func Syscall6(trap, a1, a2, a3, a4, a5, a6 uintptr) (r1, r2, err uintptr)\n  func RawSyscall(trap, a1, a2, a3 uintptr) (r1, r2, err uintptr)\n```\n\n----------------------------------------\n\nTITLE: Displaying PkgGoDev Badge for OpenTelemetry Semantic Conventions in Markdown\nDESCRIPTION: This code snippet shows how to include a PkgGoDev badge in a Markdown file. The badge links to the documentation for the OpenTelemetry Semantic Conventions package version 1.20.0 on pkg.go.dev.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/go.opentelemetry.io/otel/semconv/v1.20.0/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![PkgGoDev](https://pkg.go.dev/badge/go.opentelemetry.io/otel/semconv/v1.20.0)](https://pkg.go.dev/go.opentelemetry.io/otel/semconv/v1.20.0)\n```\n\n----------------------------------------\n\nTITLE: Wrapping an HTTP Handler with Default Gzip Compression (Go Server Example)\nDESCRIPTION: This Go server application shows how to wrap an 'http.Handler' using 'gzhttp.GzipHandler' to provide automatic Gzip compression for HTTP responses. The main function sets up an HTTP handler that responds with plain text and wraps it with the 'GzipHandler' for use with 'http.Handle'. It listens on all interfaces at port 8000. Dependencies include 'io', 'net/http', and 'github.com/klauspost/compress/gzhttp'. There are no parameters; the server will serve compressed responses to compatible clients by default.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/klauspost/compress/gzhttp/README.md#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport (\n\t\"io\"\n\t\"net/http\"\n\t\"github.com/klauspost/compress/gzhttp\"\n)\n\nfunc main() {\n\thandler := http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\tw.Header().Set(\"Content-Type\", \"text/plain\")\n\t\tio.WriteString(w, \"Hello, World\")\n\t})\n    \n\thttp.Handle(\"/\", gzhttp.GzipHandler(handler))\n\thttp.ListenAndServe(\"0.0.0.0:8000\", nil)\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Vector HTTP Sink with Debug Option\nDESCRIPTION: This YAML configuration extends the HTTP sink example by adding a debug query parameter to the URI. This allows for verifying the correctness of log fields and stream fields in the initial setup.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/data-ingestion/Vector.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nsinks:\n  vlogs:\n    inputs:\n      - your_input\n    type: http\n    uri: http://localhost:9428/insert/jsonline?_stream_fields=host,container_name&_msg_field=message&_time_field=timestamp&debug=1\n    compression: gzip\n    encoding:\n      codec: json\n    framing:\n      method: newline_delimited\n    healthcheck:\n      enabled: false\n```\n\n----------------------------------------\n\nTITLE: Using labels_equal Function in PromQL\nDESCRIPTION: Returns series with identical values for specified labels.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/MetricsQL.md#2025-04-22_snippet_113\n\nLANGUAGE: PromQL\nCODE:\n```\nlabels_equal(q, \"label1\", \"label2\")\n```\n\n----------------------------------------\n\nTITLE: Applying Random Output Jitter with gzhttp in Go\nDESCRIPTION: This snippet demonstrates how to apply random output jitter using the gzhttp.RandomJitter function in Go. It explains two invocation modes: one dependent on a content buffer for determining the range of jitter bytes, and one with fully random output jitter. The option \"gzhttp.RandomJitter(maxJitter, bufferSize)\" adds between 1 and maxJitter bytes to the output; if bufferSize is positive, it uses content from the output up to bufferSize bytes, whereas -1 uses random jitter. The main parameters are maxJitter (max bytes to jitter) and bufferSize (content size window for analysis). Outputs include perturbed payload sizes and varied response buffers. Limitations include reduced security with random jitter and performance costs for larger buffers or paranoid mode.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/klauspost/compress/gzhttp/README.md#2025-04-22_snippet_5\n\nLANGUAGE: Go\nCODE:\n```\ngzhttp.RandomJitter(32, 50000)\n```\n\nLANGUAGE: Go\nCODE:\n```\ngzhttp.RandomJitter(32, -1)\n```\n\n----------------------------------------\n\nTITLE: Quoted Field Name for Prefix Filter - VictoriaMetrics LogsQL - LogSQL\nDESCRIPTION: This query matches logs where a field named 'log:level' contains any word starting with 'err'. Field names with special characters are quoted. Dependencies: VictoriaMetrics LogsQL. Input: logs; Output: entries whose 'log:level' field matches the prefix.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_50\n\nLANGUAGE: logsql\nCODE:\n```\n\"log:level\":err*\n```\n\n----------------------------------------\n\nTITLE: Sum Over Time Function in PromQL\nDESCRIPTION: Calculates sum of raw sample values over specified time window.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_68\n\nLANGUAGE: PromQL\nCODE:\n```\nsum_over_time(series_selector[d])\n```\n\n----------------------------------------\n\nTITLE: Replacing All Occurrences in Metric Names Using 'replace_all' - YAML\nDESCRIPTION: This snippet configures a relabeling action ('replace_all') to substitute all instances of a specified regex pattern (e.g., '-') within the values of specified source labels (e.g., '__name__') with a replacement string (e.g., '_'). Dependencies: VictoriaMetrics with enhanced relabeling; no external libraries. Parameters include 'action', 'source_labels', 'target_label', 'regex', and 'replacement'. Input: metrics with names containing dashes; output: those names with dashes replaced by underscores. Applicable in YAML relabeling configs for normalization.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmagent.md#2025-04-22_snippet_28\n\nLANGUAGE: YAML\nCODE:\n```\n- action: replace_all\n  source_labels: [\"__name__\"]\n  target_label: \"__name__\"\n  regex: \"-\"\n  replacement: \"_\"\n```\n\n----------------------------------------\n\nTITLE: Using timestamp_with_name with VictoriaMetrics - Markdown - Syntax Reference\nDESCRIPTION: This snippet references timestamp_with_name, which behaves like timestamp but preserves metric names in the result. It returns the timestamp (seconds, with millisecond precision) of the last sample in window d. Parameters: series_selector, d (duration). Output: timestamp with original metric name retained.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_67\n\nLANGUAGE: Markdown\nCODE:\n```\n`timestamp_with_name(series_selector[d])`\n```\n\n----------------------------------------\n\nTITLE: Converting Radians to Degrees - PromQL - PromQL\nDESCRIPTION: This snippet illustrates the deg() transform function, which converts every point of input time series from radians to degrees. It expects q to yield numeric values (in radians). Metric names are stripped by default; use keep_metric_names modifier to retain metric names. Supported in PromQL. No external dependencies required.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_96\n\nLANGUAGE: PromQL\nCODE:\n```\n`deg(q)`\n```\n\n----------------------------------------\n\nTITLE: Fixing vmagent `-usePromCompatibleNaming` for Remote Write (Command-line)\nDESCRIPTION: Corrects an issue in `vmagent` where the `-usePromCompatibleNaming` command-line flag was not properly considered during the process of pushing metrics data to remote storage systems via remote write.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/changelog/CHANGELOG_2024.md#2025-04-22_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\n-usePromCompatibleNaming # Ensures Prometheus-compatible naming is used for remote write\n```\n\n----------------------------------------\n\nTITLE: Benchmarking with GOMAXPROCS=4 in Go\nDESCRIPTION: Conducts benchmark tests on the fastrand library with GOMAXPROCS set to 4, to analyze the performance when utilizing four threads. Highlights the efficiency gain for parallel computing and measures across different RNG methods.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/valyala/fastrand/README.md#2025-04-22_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n$ GOMAXPROCS=4 go test -bench=. github.com/valyala/fastrand\\ngoos: linux\\ngoarch: amd64\\npkg: github.com/valyala/fastrand\\nBenchmarkUint32n-4                     \\t100000000\\t        14.2 ns/op\\nBenchmarkRNGUint32n-4                  \\t500000000\\t         3.30 ns/op\\nBenchmarkRNGUint32nWithLock-4          \\t20000000\\t        88.7 ns/op\\nBenchmarkMathRandInt31n-4              \\t10000000\\t       145 ns/op\\nBenchmarkMathRandRNGInt31n-4           \\t200000000\\t         8.35 ns/op\\nBenchmarkMathRandRNGInt31nWithLock-4   \\t20000000\\t       102 ns/op\\nPASS\\nok   \\tgithub.com/valyala/fastrand\\t11.534s\n```\n\n----------------------------------------\n\nTITLE: Creating Hourly Smart Backup in Shell\nDESCRIPTION: This command is part of a smart backup strategy, creating an incremental hourly backup in the 'latest' folder. It should be run every hour as part of the backup routine.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmbackup.md#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n./vmbackup -storageDataPath=</path/to/victoria-metrics-data> -snapshot.createURL=http://localhost:8428/snapshot/create -dst=gs://<bucket>/latest\n```\n\n----------------------------------------\n\nTITLE: Searching for a Word with Non-English Characters - VictoriaLogs LogSQL\nDESCRIPTION: This query demonstrates LogsQL's support for utf-8 encoded field names and words, enabling multi-language log searches. It matches logs where the field named in Georgian ('სფერო') contains the word in Greek ('τιμή'). VictoriaLogs must support utf-8 storage and querying. Useful for internationalized logs.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_39\n\nLANGUAGE: logsql\nCODE:\n```\nსფერო:τιμή\n```\n\n----------------------------------------\n\nTITLE: Converting Degrees to Radians - MetricsQL/PromQL (English)\nDESCRIPTION: The `rad(q)` function computes the radian value for every point of every time series obtained from the query `q`. It is a transform function for MetricsQL and PromQL that strips metric names unless the `keep_metric_names` modifier is used. It expects a query argument, returns points in radian units, and relies on the appropriate MetricsQL/PromQL engine.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/MetricsQL.md#2025-04-22_snippet_76\n\nLANGUAGE: MetricsQL\nCODE:\n```\n`rad(q)`\n```\n\n----------------------------------------\n\nTITLE: Configuring VmWriter Exporter in YAML\nDESCRIPTION: This YAML configuration snippet sets up the VmWriter component for exporting anomaly scores to VictoriaMetrics. It includes configuration parameters like datasource URL, tenant ID, metric format, import path, and authentication details. This setup allows users to export anomaly detection results while preserving the existing labelset, with options for configuring additional labels.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/anomaly-detection/components/writer.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nwriter:\n  class: \"vm\"  # or \"writer.vm.VmWriter\" until v1.13.0\n  datasource_url: \"http://localhost:8428/\"\n  tenant_id: \"0:0\"\n  metric_format:\n    __name__: \"vmanomaly_$VAR\"\n    for: \"$QUERY_KEY\"\n    run: \"test_metric_format\"\n    config: \"io_vm_single.yaml\"\n  import_json_path: \"/api/v1/import\"\n  health_path: \"health\"\n  user: \"foo\"\n  password: \"bar\"\n\n```\n\n----------------------------------------\n\nTITLE: Defining JWT Claims for Access Control\nDESCRIPTION: Defines the JSON Web Token (JWT) claims necessary for specifying tenant access in vmgateway. The 'vm_access' claim is crucial for controlling metric access based on tenant IDs. JWT tokens must include these claims for successful authentication.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/guides/grafana-vmgateway-openid-configuration/README.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"vm_access\": {\n    \"tenant_id\": {\n      \"account_id\": 0,\n      \"project_id\": 0\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Failed Authentication Examples for VMGateway\nDESCRIPTION: cURL commands showing failed attempts to access VMGateway endpoints when using no token or an incorrect token.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmgateway.md#2025-04-22_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ncurl 'http://localhost:8431/api/v1/series/count'\n\ncurl 'http://localhost:8431/api/v1/series/count' -H 'Authorization: Bearer incorrect-token'\n```\n\n----------------------------------------\n\nTITLE: Custom Stream Fields Configuration\nDESCRIPTION: Example of ingesting logs with custom stream field configuration using the _stream_fields parameter to specify which fields should be treated as stream fields.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/data-ingestion/README.md#2025-04-22_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\ncurl -H \"Content-Type: application/json\" -XPOST \"http://localhost:9428/insert/loki/api/v1/push?_stream_fields=instance\" --data-raw \\\n  '{\"streams\": [{ \"stream\": { \"instance\": \"host123\", \"ip\": \"foo\", \"trace_id\": \"bar\" }, \"values\": [ [ \"0\", \"foo fizzbuzz bar\" ] ] }]}'\n```\n\n----------------------------------------\n\nTITLE: Starting Docker Compose Environment for Journald-VictoriaLogs Integration\nDESCRIPTION: This command starts the Docker Compose environment for integrating Journald with VictoriaLogs. It should be run from the directory containing the docker-compose.yml file.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/deployment/docker/victorialogs/journald/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose up -d \n```\n\n----------------------------------------\n\nTITLE: VictoriaLogs Multi-tenant Group Configuration\nDESCRIPTION: YAML configuration showing how to set up multi-tenancy using headers in group configuration.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/vmalert.md#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n    groups:\n    - name: MyGroup\n      headers:\n      - \"AccountID: 1\"\n      - \"ProjectID: 2\"\n      rules: ...\n```\n\n----------------------------------------\n\nTITLE: Result of Implicit default_rollup Wrapping for Aggregate Function Argument (MetricsQL)\nDESCRIPTION: Shows the result `count(default_rollup(up))` after VictoriaMetrics implicitly wraps the series selector argument `up` within the `count` aggregate function.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_162\n\nLANGUAGE: MetricsQL\nCODE:\n```\ncount(default_rollup(up))\n```\n\n----------------------------------------\n\nTITLE: Creating Backups for VictoriaMetrics Cluster in Shell\nDESCRIPTION: These commands show how to create backups for a VictoriaMetrics cluster with multiple vmstorage nodes. Each command should be run on a separate vmstorage node.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmbackup.md#2025-04-22_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nvmstorage-1$ /vmbackup -storageDataPath=</path/to/vmstorage-data> -snapshot.createURL=http://vmstorage1:8482/snapshot/create -dst=gs://<bucket>/vmstorage-1\nvmstorage-2$ /vmbackup -storageDataPath=</path/to/vmstorage-data> -snapshot.createURL=http://vmstorage2:8482/snapshot/create -dst=gs://<bucket>/vmstorage-2\nvmstorage-3$ /vmbackup -storageDataPath=</path/to/vmstorage-data> -snapshot.createURL=http://vmstorage3:8482/snapshot/create -dst=gs://<bucket>/vmstorage-3\n```\n\n----------------------------------------\n\nTITLE: Tracking vmagent Configuration Reloads via Metrics\nDESCRIPTION: Lists the new metrics exposed by `vmagent` to track hot-reloads of relabel and scrape configurations. These metrics (`vmagent_relabel_config_*`, `vm_relabel_config_*`, `vm_promscrape_config_*`) help monitor configuration update status.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/changelog/CHANGELOG_2022.md#2025-04-22_snippet_14\n\nLANGUAGE: plaintext\nCODE:\n```\nvmagent_relabel_config_*\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nvm_relabel_config_*\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nvm_promscrape_config_*\n```\n\n----------------------------------------\n\nTITLE: Unpacking Logfmt Fields with a Result Prefix using LogSQL\nDESCRIPTION: This LogSQL query selects logs from the last 5 minutes (`_time:5m`) and unpacks all fields from the logfmt string stored in the `foo` field. The `result_prefix \"foo_\"` option ensures that all unpacked field names are prefixed with `foo_`, helping to avoid naming collisions with existing fields.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_163\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m | unpack_logfmt from foo result_prefix \"foo_\"\n```\n\n----------------------------------------\n\nTITLE: Fetching the Minute from Timestamps in PromQL\nDESCRIPTION: The `minute(q)` function extracts the minute (0-59) from Unix timestamps in time series `q`, providing detailed temporal data characterizations for analytics.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_92\n\nLANGUAGE: PromQL\nCODE:\n```\n`minute(q)`\n```\n\n----------------------------------------\n\nTITLE: Adding Grafana Helm Repository\nDESCRIPTION: Adds the Grafana Helm repository and updates the local repository cache.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/guides/k8s-monitoring-via-vm-cluster/README.md#2025-04-22_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nhelm repo add grafana https://grafana.github.io/helm-charts\nhelm repo update\n```\n\n----------------------------------------\n\nTITLE: Getting the Restore Mark using vmbackupmanager CLI (Shell)\nDESCRIPTION: Example usage of the `vmbackupmanager restore get` command. It retrieves and displays the currently set restore mark, outputting a JSON object with the backup name if a mark exists.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmbackupmanager.md#2025-04-22_snippet_16\n\nLANGUAGE: sh\nCODE:\n```\n$ ./vmbackupmanager restore get\n{\"backup\":\"daily/2022-10-06\"}\n\n```\n\n----------------------------------------\n\nTITLE: Enabling OpenTSDB HTTP Receiver - VictoriaMetrics - Shell\nDESCRIPTION: This snippet launches VictoriaMetrics with the OpenTSDB HTTP receiver enabled via the '-opentsdbHTTPListenAddr' flag, binding to port 4242. It is used to allow agents to send HTTP /api/put requests for data ingestion. Proper configuration ensures compatibility with OpenTSDB HTTP clients.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/README.md#2025-04-22_snippet_28\n\nLANGUAGE: sh\nCODE:\n```\n/path/to/victoria-metrics-prod -opentsdbHTTPListenAddr=:4242\n```\n\n----------------------------------------\n\nTITLE: vmalert Alert Relabeling Configuration\nDESCRIPTION: Configuration reference for alert relabeling in vmalert before sending to notifiers using the -notifier.config option.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/changelog/CHANGELOG_2022.md#2025-04-22_snippet_23\n\nLANGUAGE: properties\nCODE:\n```\nalert_relabel_configs\n```\n\n----------------------------------------\n\nTITLE: Using MPMCQueue with xsync in Go\nDESCRIPTION: The snippet showcases a multi-producer multi-consumer queue using xsync, designed for high-parallelism scenarios. It describes non-blocking `Enqueue` and `Dequeue` operations, utilizing a ticket-based algorithm.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/puzpuzpuz/xsync/v3/README.md#2025-04-22_snippet_5\n\nLANGUAGE: Go\nCODE:\n```\nq := xsync.NewMPMCQueue(1024)\n// producer optimistically inserts an item into the queue\n// optimistic insertion attempt; doesn't block\ninserted := q.TryEnqueue(\"bar\")\n// consumer obtains an item from the queue\n// optimistic obtain attempt; doesn't block\nitem, ok := q.TryDequeue() // interface{} pointing to a string\n```\n\nLANGUAGE: Go\nCODE:\n```\nq := xsync.NewMPMCQueueOf[string](1024)\ninserted := q.TryEnqueue(\"foo\")\nitem, ok := q.TryDequeue() // string\n```\n\n----------------------------------------\n\nTITLE: Getting Query Start Time with start Function\nDESCRIPTION: The start function returns unix timestamp in seconds for the first point. It corresponds to the 'start' query arg passed to /api/v1/query_range endpoint.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_108\n\nLANGUAGE: metricsql\nCODE:\n```\nstart()\n```\n\n----------------------------------------\n\nTITLE: Getting All IP Values\nDESCRIPTION: Example showing how to get all IP values (including empty ones) from logs in last 5 minutes\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_201\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m | stats values(ip) ips\n```\n\n----------------------------------------\n\nTITLE: Calculating Rate with Automatic Lookbehind Window in MetricsQL\nDESCRIPTION: Illustrates the MetricsQL feature where the lookbehind window (time range in square brackets) for rollup functions like `rate()` can be omitted. VictoriaMetrics automatically determines an appropriate window based on the query's `step` parameter and the data's scrape interval.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_1\n\nLANGUAGE: MetricsQL\nCODE:\n```\nrate(node_network_receive_bytes_total)\n```\n\n----------------------------------------\n\nTITLE: Refining Instrument Configuration Options in Go Metrics API\nDESCRIPTION: Splits the generic instrument configuration in `go.opentelemetry.io/otel/metric/instrument` into type-specific options. Introduces `Int64Option`, `Float64Option`, `Int64ObserverOption`, and `Float64ObserverOption` for configuring synchronous integer, synchronous float, asynchronous integer, and asynchronous float instruments respectively, improving type safety and clarity.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-22_snippet_20\n\nLANGUAGE: Go\nCODE:\n```\ngo.opentelemetry.io/otel/metric/instrument\n// Option Types:\n// - Int64Option\n// - Float64Option\n// - Int64ObserverOption\n// - Float64ObserverOption\n```\n\n----------------------------------------\n\nTITLE: Configuring Log Rotation with Lumberjack in Go\nDESCRIPTION: Integration example showing how to configure log rotation using the lumberjack package with zap logger. Demonstrates setting up file rotation parameters and creating a new logger instance.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/go.uber.org/zap/FAQ.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nw := zapcore.AddSync(&lumberjack.Logger{\n  Filename:   \"/var/log/myapp/foo.log\",\n  MaxSize:    500, // megabytes\n  MaxBackups: 3,\n  MaxAge:     28, // days\n})\ncore := zapcore.NewCore(\n  zapcore.NewJSONEncoder(zap.NewProductionEncoderConfig()),\n  w,\n  zap.InfoLevel,\n)\nlogger := zap.New(core)\n```\n\n----------------------------------------\n\nTITLE: Including README Content in VictoriaMetrics Documentation\nDESCRIPTION: This snippet uses a custom shortcode or template function to include the content of the README.md file in the documentation page.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/_index.md#2025-04-22_snippet_1\n\nLANGUAGE: go-template\nCODE:\n```\n{{% content \"README.md\" %}}\n```\n\n----------------------------------------\n\nTITLE: Sample Output of VmAnomaly Metrics with Custom Formatting\nDESCRIPTION: Example of how metrics appear after being processed by VmAnomaly with custom formatting. Shows both the original input labels and the custom labels defined in the configuration.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/anomaly-detection/components/writer.md#2025-04-22_snippet_6\n\nLANGUAGE: promtextmetric\nCODE:\n```\n{__name__=\"PREFIX1_anomaly_score\", for=\"PREFIX2_query_name_1\", custom_label_1=\"label_name_1\", custom_label_2=\"label_name_2\", cpu=1, device=\"eth0\", instance=\"node-exporter:9100\"}\n{__name__=\"PREFIX1_yhat_lower\", for=\"PREFIX2_query_name_1\", custom_label_1=\"label_name_1\", custom_label_2=\"label_name_2\", cpu=1, device=\"eth0\", instance=\"node-exporter:9100\"}\n{__name__=\"PREFIX1_anomaly_score\", for=\"PREFIX2_query_name_2\", custom_label_1=\"label_name_1\", custom_label_2=\"label_name_2\", cpu=1, device=\"eth0\", instance=\"node-exporter:9100\"}\n{__name__=\"PREFIX1_yhat_lower\", for=\"PREFIX2_query_name_2\", custom_label_1=\"label_name_1\", custom_label_2=\"label_name_2\", cpu=1, device=\"eth0\", instance=\"node-exporter:9100\"}\n```\n\n----------------------------------------\n\nTITLE: Unpacking Words from Log Messages in VictoriaLogs\nDESCRIPTION: Demonstrates using the unpack_words pipe to extract words from log messages into a separate field.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_170\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m | unpack_words from _msg as words\n```\n\n----------------------------------------\n\nTITLE: Collecting vmalert CPU Profile (Shell)\nDESCRIPTION: Provides a shell command using `curl` to retrieve a Go CPU profile from a running vmalert instance. The profile is fetched from the `/debug/pprof/profile` endpoint on vmalert's HTTP listener address (default `0.0.0.0:8880`) and saved to a file named `cpu.pprof`. The command runs for 30 seconds by default to collect CPU usage data. This file can be analyzed using `go tool pprof`.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmalert.md#2025-04-22_snippet_25\n\nLANGUAGE: sh\nCODE:\n```\ncurl http://0.0.0.0:8880/debug/pprof/profile > cpu.pprof\n```\n\n----------------------------------------\n\nTITLE: Running Blackfriday with No Extensions in Go\nDESCRIPTION: This snippet shows how to render Markdown input using Blackfriday but with no additional extensions, adhering closely to the basic Markdown specification. It uses the WithNoExtensions option to disable all optional features. Required inputs are a byte slice of Markdown, and typical output is HTML without any extended syntax support.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/russross/blackfriday/v2/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\noutput := blackfriday.Run(input, blackfriday.WithNoExtensions())\n\n```\n\n----------------------------------------\n\nTITLE: Applying Aggregate Functions to Multiple Arguments in MetricsQL\nDESCRIPTION: Demonstrates that MetricsQL aggregate functions like `avg` can accept an arbitrary number of query arguments. This query calculates the average across the time series returned by `q1`, `q2`, and `q3` for each timestamp.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_7\n\nLANGUAGE: metricsql\nCODE:\n```\navg(q1, q2, q3)\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry OTLP/HTTP Exporter for VictoriaLogs\nDESCRIPTION: This YAML configuration sets up the OTLP/HTTP exporter to send logs to VictoriaLogs. It includes the logs endpoint and demonstrates how to use custom HTTP headers for data ingestion.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/data-ingestion/opentelemetry.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nexporters:\n  otlphttp:\n    logs_endpoint: http://localhost:9428/insert/opentelemetry/v1/logs\n```\n\nLANGUAGE: yaml\nCODE:\n```\nexporters:\n  otlphttp:\n    logs_endpoint: http://localhost:9428/insert/opentelemetry/v1/logs\n    headers:\n      VL-Ignore-Fields: foo,bar\n```\n\n----------------------------------------\n\nTITLE: Filtering Series with Identical Label Values in PromQL\nDESCRIPTION: The labels_equal function returns series from a query where specified labels have identical values across all series.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_133\n\nLANGUAGE: promql\nCODE:\n```\nlabels_equal(q, \"label1\", \"label2\", ...)\n```\n\n----------------------------------------\n\nTITLE: Running vmanomaly Docker Container with License File - Shell\nDESCRIPTION: This shell snippet demonstrates how to launch a vmanomaly Docker container, mounting license and config files from the host file system as Docker volumes. Environment variables are used for file paths; the Docker CLI options set interactive mode (-it) and pass necessary arguments to vmanomaly. Inputs are the environment variables for license/config, and files must exist at the given paths. Output is a running vmanomaly container configured with external licensing and logging level. Docker and a valid Enterprise license are required.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/anomaly-detection/QuickStart.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nexport YOUR_LICENSE_FILE_PATH=path/to/license/file\nexport YOUR_CONFIG_FILE_PATH=path/to/config/file\ndocker run -it -v $YOUR_LICENSE_FILE_PATH:/license \\\n               -v $YOUR_CONFIG_FILE_PATH:/config.yml \\\n               vmanomaly /config.yml \\\n               --licenseFile=/license \\\n               --loggerLevel=INFO\n```\n\n----------------------------------------\n\nTITLE: Benchmarking Uvarint Performance vs Standard Library (Text)\nDESCRIPTION: Presents benchmark results comparing the performance (nanoseconds per operation) of this package's optimized `Uvarint` implementation ('new ns/op') against Go's standard `binary.Uvarint` ('old ns/op'). The benchmarks cover various input sizes (indicated by numbers 1-9 and 'large' variants), consistently showing significant speed improvements (percentage delta) for the optimized version.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/dennwc/varint/README.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nbenchmark                      old ns/op     new ns/op     delta\nBenchmarkUvarint/1-8           4.13          2.85          -30.99%\nBenchmarkUvarint/1_large-8     4.01          2.28          -43.14%\nBenchmarkUvarint/2-8           6.23          2.87          -53.93%\nBenchmarkUvarint/2_large-8     5.60          2.86          -48.93%\nBenchmarkUvarint/3-8           6.55          3.44          -47.48%\nBenchmarkUvarint/3_large-8     6.54          2.86          -56.27%\nBenchmarkUvarint/4-8           7.30          3.71          -49.18%\nBenchmarkUvarint/4_large-8     7.46          3.10          -58.45%\nBenchmarkUvarint/5-8           8.31          4.12          -50.42%\nBenchmarkUvarint/5_large-8     8.56          3.48          -59.35%\nBenchmarkUvarint/6-8           9.42          4.66          -50.53%\nBenchmarkUvarint/6_large-8     9.91          4.07          -58.93%\nBenchmarkUvarint/7-8           10.6          5.28          -50.19%\nBenchmarkUvarint/7_large-8     11.0          4.70          -57.27%\nBenchmarkUvarint/8-8           11.7          6.02          -48.55%\nBenchmarkUvarint/8_large-8     12.1          5.19          -57.11%\nBenchmarkUvarint/9-8           12.9          6.83          -47.05%\nBenchmarkUvarint/9_large-8     13.1          5.71          -56.41%\n```\n\n----------------------------------------\n\nTITLE: Using a logr Logger within a Go Application Component\nDESCRIPTION: Demonstrates how a `logr.Logger` instance, previously created and passed down (e.g., during object creation), is stored as a field within a custom struct (`appObject`). The `Run` method then uses this logger (`app.logger`) to emit an informational log message using the `Info` method, including key-value pairs for structured context. It requires `logr` and potentially the `time` package.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/go-logr/logr/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n```\n    type appObject struct {\n        // ... other fields ...\n        logger logr.Logger\n        // ... other fields ...\n    }\n\n    func (app *appObject) Run() {\n        app.logger.Info(\"starting up\", \"timestamp\", time.Now())\n\n        // ... app code ...\n```\n```\n\n----------------------------------------\n\nTITLE: Matching Multiple Numeric Constants in MetricsQL\nDESCRIPTION: Illustrates how to compare a metric's value against a set of numeric constants using the `== (C1, ..., CN)` syntax in MetricsQL. This query returns `status_code` time series where the value is exactly 300, 301, or 304.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_5\n\nLANGUAGE: MetricsQL\nCODE:\n```\nstatus_code == (300, 301, 304)\n```\n\n----------------------------------------\n\nTITLE: Using the 'if' Binary Operator for Conditional Filtering (MetricsQL)\nDESCRIPTION: Demonstrates the `if` binary operator in MetricsQL. `q1 if q2` returns values from `q1` only for timestamps where `q2` also has a value. Values from `q1` are removed if `q2` has a gap at that timestamp.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_21\n\nLANGUAGE: MetricsQL\nCODE:\n```\nq1 if q2\n```\n\n----------------------------------------\n\nTITLE: Applying VMalert CRD for VMOperator in Cluster Mode (Shell/Bash)\nDESCRIPTION: Employing kubectl and a here-document, this script applies a VMAlert CRD for VMOperator-managed cluster deployments in VictoriaMetrics Cloud. It provisions secrets for bearer tokens and configures CRD fields for cluster-mode: read and write endpoints are explicitly separated. Requires Kubernetes, VMOperator, and pre-set environment variables.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics-cloud/alerting-vmalert-victoria-metrics-cloud.md#2025-04-22_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nexport TOKEN=76bc5470-****-****-****-************\nexport MANAGED_VM_READ_URL=https://gw-c15-1a.cloud.victoriametrics.com/select/0/prometheus/\nexport MANAGED_VM_WRITE_URL=https://gw-c15-1a.cloud.victoriametrics.com/insert/0/prometheus/\nexport ALERTMANAGER=http://alertmanager:9093\ncat << EOF | kubectl apply -f -\napiVersion: operator.victoriametrics.com/v1beta1\nkind: VMAlert\nmetadata:\n name: vmalert-managed-vm\nspec:\n replicaCount: 1\n datasource:\n   url: $MANAGED_VM_READ_URL\n   bearerTokenSecret:\n     name: managed-token\n     key: token\n remoteWrite:\n   url: $MANAGED_VM_WRITE_URL\n   bearerTokenSecret:\n     name: managed-token\n     key: token\n remoteRead:\n   url: $MANAGED_VM_READ_URL\n   bearerTokenSecret:\n     name: managed-token\n     key: token\n notifier:\n   url: $ALERTMANAGER\n ruleSelector:\n   matchLabels:\n     type: managed\n---\napiVersion: v1\nkind: Secret\nmetadata:\n name: managed-token\nstringData:\n token: $TOKEN\nEOF\n```\n\n----------------------------------------\n\nTITLE: Skipping Empty Results with extract_regexp Pipe in LogSQL\nDESCRIPTION: This snippet shows how to use the skip_empty_results option to prevent overwriting existing values with empty values when extracting from a specific field.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_88\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m | extract_regexp 'ip=(?P<ip>([0-9]+[.]){3}[0-9]+)' from foo skip_empty_results\n```\n\n----------------------------------------\n\nTITLE: Returning Range End Timestamp - PromQL - PromQL\nDESCRIPTION: The end() transform function retrieves the unix timestamp (in seconds) for the final point in the selected range. Commonly used in time-based queries with /api/v1/query_range. Requires no input. Returns a floating-point unix timestamp. Related to start(), time(), and now(). Supported by PromQL.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_98\n\nLANGUAGE: PromQL\nCODE:\n```\n`end()`\n```\n\n----------------------------------------\n\nTITLE: Renaming `sign` Function to `sgn` in MetricsQL\nDESCRIPTION: In v1.65.0, the MetricsQL function `sign` was renamed to `sgn` to align with PromQL naming conventions. The `sgn` function returns -1 for negative inputs, +1 for positive inputs, and 0 for zero.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/changelog/CHANGELOG_2021.md#2025-04-22_snippet_14\n\nLANGUAGE: MetricsQL\nCODE:\n```\nsgn(v)\n```\n\n----------------------------------------\n\nTITLE: Configuring scrape_targets with full URLs - YAML\nDESCRIPTION: This YAML snippet demonstrates the use of full URLs as targets within the scrape_configs section of vmagent's configuration, introduced with v1.83.0. The configuration allows specifying direct HTTP(S) URLs in the targets list, alongside legacy host:port syntax, providing flexibility for various deployment environments and schemes. Prerequisites include a functional VictoriaMetrics 'vmagent' setup and familiarity with Prometheus-style job configuration syntax; outputs include correct scheduling and scraping of specified endpoints.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/changelog/CHANGELOG_2022.md#2025-04-22_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\nscrape_configs:\n- job_name: abc\n  metrics_path: /foo/bar\n  scheme: https\n  static_configs:\n  - targets:\n    # the following targets are scraped by the provided full urls\n    - 'http://host1/metric/path1'\n    - 'https://host2/metric/path2'\n    - 'http://host3:1234/metric/path3?arg1=value1'\n    # the following target is scraped by <scheme>://host4:1234<metrics_path>\n    - host4:1234\n```\n\n----------------------------------------\n\nTITLE: QuickTemplate JSON and XML Marshalling Implementation\nDESCRIPTION: Example demonstrating how to implement JSON and XML marshalling using QuickTemplate. This includes data structure definition and template functions for generating both formats.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/valyala/quicktemplate/README.md#2025-04-22_snippet_9\n\nLANGUAGE: qtpl\nCODE:\n```\n{% code\ntype MarshalRow struct {\n\tMsg string\n\tN int\n}\n\ntype MarshalData struct {\n\tFoo int\n\tBar string\n\tRows []MarshalRow\n}\n%}\n\n// JSON marshaling\n{% stripspace %}\n{% func (d *MarshalData) JSON() %}\n{\n\t\"Foo\": {%d d.Foo %},\n\t\"Bar\": {%q= d.Bar %},\n\t\"Rows\":[\n\t\t{% for i, r := range d.Rows %}\n\t\t\t{\n\t\t\t\t\"Msg\": {%q= r.Msg %},\n\t\t\t\t\"N\": {%d r.N %}\n\t\t\t}\n\t\t\t{% if i + 1 < len(d.Rows) %},{% endif %}\n\t\t{% endfor %}\n\t]\n}\n{% endfunc %}\n{% endstripspace %}\n\n// XML marshalling\n{% stripspace %}\n{% func (d *MarshalData) XML() %}\n<MarshalData>\n\t<Foo>{%d d.Foo %}</Foo>\n\t<Bar>{%s d.Bar %}</Bar>\n\t<Rows>\n\t{% for _, r := range d.Rows %}\n\t\t<Row>\n\t\t\t<Msg>{%s r.Msg %}</Msg>\n\t\t\t<N>{%d r.N %}</N>\n\t\t</Row>\n\t{% endfor %}\n\t</Rows>\n</MarshalData>\n{% endfunc %}\n{% endstripspace %}\n```\n\n----------------------------------------\n\nTITLE: Filtering Empty Field Value - VictoriaMetrics LogsQL - LogSQL\nDESCRIPTION: Matches log entries where 'host.hostname' field is either missing or explicitly empty (\"\"). Useful for identifying incomplete or malformed log entries. Dependencies: VictoriaMetrics LogsQL. Input: logs; Output: entries with empty host.hostname.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_54\n\nLANGUAGE: logsql\nCODE:\n```\nhost.hostname:\"\"\n```\n\n----------------------------------------\n\nTITLE: Dropping Targets If Target Label Contains Source Label Value with 'drop_if_contains' - YAML\nDESCRIPTION: This snippet configures 'drop_if_contains' to remove entries where the target label contains the value of the specified source label(s). No external dependencies are needed. Main parameters: 'action', 'target_label', and 'source_labels'. Input: labels per target; output: removal of entries where label inclusion matches the criteria. Use in dynamic filtering scenarios within YAML config files.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmagent.md#2025-04-22_snippet_33\n\nLANGUAGE: YAML\nCODE:\n```\n- action: drop_if_contains\n  target_label: __meta_consul_tags\n  source_labels: [denied_consul_tag]\n```\n\n----------------------------------------\n\nTITLE: Complete Notifier Configuration Specification\nDESCRIPTION: Detailed YAML specification showing all available configuration options for VMAlert notifier including authentication, TLS, and relabeling configs.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmalert.md#2025-04-22_snippet_32\n\nLANGUAGE: yaml\nCODE:\n```\n# Per-target Notifier timeout when pushing alerts.\n[ timeout: <duration> | default = 10s ]\n\n# Prefix for the HTTP path alerts are pushed to.\n[ path_prefix: <path> | default = / ]\n\n# Configures the protocol scheme used for requests.\n[ scheme: <scheme> | default = http ]\n\n# Sets the `Authorization` header on every request with the\n# configured username and password.\n# password and password_file are mutually exclusive.\nbasic_auth:\n  [ username: <string> ]\n  [ password: <string> ]\n  [ password_file: <string> ]\n\n# Optional `Authorization` header configuration.\nauthorization:\n  # Sets the authentication type.\n  [ type: <string> | default: Bearer ]\n  # Sets the credentials. It is mutually exclusive with\n  # `credentials_file`.\n  [ credentials: <secret> ]\n  # Sets the credentials to the credentials read from the configured file.\n  # It is mutually exclusive with `credentials`.\n  [ credentials_file: <filename> ]\n\n# Configures the scrape request's TLS settings.\n# see https://prometheus.io/docs/prometheus/latest/configuration/configuration/#tls_config\ntls_config:\n  [ <tls_config> ]\n\n# Configures Bearer authentication token via string\nbearer_token: <string>\n# or by passing path to the file with token.\nbearer_token_file: <string>\n\n# Configures OAuth 2.0 authentication\n# see https://prometheus.io/docs/prometheus/latest/configuration/configuration/#oauth2\noauth2:\n  [ <oauth2_config> ]\n  \n# Optional list of HTTP headers in form `header-name: value`\n# applied for all requests to notifiers\n# For example:\n#  headers:\n#    - \"CustomHeader: foo\"\n#    - \"CustomHeader2: bar\"\nheaders:\n  [ <string>, ...]\n\n# List of labeled statically configured Notifiers.\n#\n# Each list of targets may be additionally instructed with\n# authorization params. Target's authorization params will\n# inherit params from global authorization params if there\n# are no conflicts.\nstatic_configs:\n  [ - targets: ]\n      [ - '<host>' ]\n      [ oauth2 ]\n      [ basic_auth ]\n      [ authorization ]\n      [ tls_config ]\n      [ bearer_token ]\n      [ bearer_token_file ]\n      [ headers ]\n\n# List of Consul service discovery configurations.\n# See https://prometheus.io/docs/prometheus/latest/configuration/configuration/#consul_sd_config\nconsul_sd_configs:\n  [ - <consul_sd_config> ... ]\n\n# List of DNS service discovery configurations.\n# See https://prometheus.io/docs/prometheus/latest/configuration/configuration/#dns_sd_config\ndns_sd_configs:\n  [ - <dns_sd_config> ... ]\n\n# List of relabel configurations for entities discovered via service discovery.\n# Supports the same relabeling features as the rest of VictoriaMetrics components.\n# See https://docs.victoriametrics.com/vmagent/#relabeling\nrelabel_configs:\n  [ - <relabel_config> ... ]\n\n# List of relabel configurations for alert labels sent via Notifier.\n# Supports the same relabeling features as the rest of VictoriaMetrics components.\n# See https://docs.victoriametrics.com/vmagent/#relabeling\nalert_relabel_configs:\n  [ - <relabel_config> ... ]\n```\n\n----------------------------------------\n\nTITLE: Transformed Label Manipulation Query\nDESCRIPTION: The transformed version of the label manipulation query showing how filters are propagated\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/changelog/CHANGELOG_2024.md#2025-04-22_snippet_29\n\nLANGUAGE: metricsql\nCODE:\n```\nlabel_del(some_metric{job=\"foo\",pod=\"bar\"}, \"instance\") + other_metric{job=\"foo\",pod=\"bar\"}\n```\n\n----------------------------------------\n\nTITLE: Reading Command Line Arguments with Koanf in Go\nDESCRIPTION: Illustrates using the posflag.Provider within Koanf to load command line arguments using the spf13/pflag library in Go. This example demonstrates how to merge command line configuration with file-based configurations.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/knadh/koanf/v2/README.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"os\"\n\n\t\"github.com/knadh/koanf/v2\"\n\t\"github.com/knadh/koanf/parsers/toml\"\n\n\t// TOML version 2 is available at:\n\t// \"github.com/knadh/koanf/parsers/toml/v2\"\n\n\t\"github.com/knadh/koanf/providers/file\"\n\t\"github.com/knadh/koanf/providers/posflag\"\n\tflag \"github.com/spf13/pflag\"\n)\n\n// Global koanf instance. Use \".\" as the key path delimiter. This can be \"/\" or any character.\nvar k = koanf.New(\".\")\n\nfunc main() {\n\t// Use the POSIX compliant pflag lib instead of Go's flag lib.\n\tf := flag.NewFlagSet(\"config\", flag.ContinueOnError)\n\tf.Usage = func() {\n\t\tfmt.Println(f.FlagUsages())\n\t\tos.Exit(0)\n\t}\n\t// Path to one or more config files to load into koanf along with some config params.\n\tf.StringSlice(\"conf\", []string{\"mock/mock.toml\"}, \"path to one or more .toml config files\")\n\tf.String(\"time\", \"2020-01-01\", \"a time string\")\n\tf.String(\"type\", \"xxx\", \"type of the app\")\n\tf.Parse(os.Args[1:])\n\n\t// Load the config files provided in the commandline.\n\tcFiles, _ := f.GetStringSlice(\"conf\")\n\tfor _, c := range cFiles {\n\t\tif err := k.Load(file.Provider(c), toml.Parser()); err != nil {\n\t\t\tlog.Fatalf(\"error loading file: %v\", err)\n\t\t}\n\t}\n\n\t// \"time\" and \"type\" may have been loaded from the config file, but\n\t// they can still be overridden with the values from the command line.\n\t// The bundled posflag.Provider takes a flagset from the spf13/pflag lib.\n\t// Passing the Koanf instance to posflag helps it deal with default command\n\t// line flag values that are not present in conf maps from previously loaded\n\t// providers.\n\tif err := k.Load(posflag.Provider(f, \".\", k), nil); err != nil {\n\t\tlog.Fatalf(\"error loading config: %v\", err)\n\t}\n\n\tfmt.Println(\"time is = \", k.String(\"time\"))\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Custom HTTP Auth Header in vmauth - Bash\nDESCRIPTION: This bash snippet shows how to override the default Authorization header in vmauth to use a custom header, like X-Amz-Firehose-Access-Key, for retrieving authentication tokens. The provided command-line flags are passed to the vmauth executable, which must be available in the user's PATH. It demonstrates targeted use of the -httpAuthHeader flag for single or multiple custom headers.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmauth.md#2025-04-22_snippet_42\n\nLANGUAGE: bash\nCODE:\n```\n./vmauth -httpAuthHeader='X-Amz-Firehose-Access-Key'\n\n```\n\n----------------------------------------\n\nTITLE: Using keep Alias for fields Pipe in LogSQL\nDESCRIPTION: This snippet demonstrates the use of the keep alias instead of fields to select specific fields (host and _msg) from logs over the last 5 minutes.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_97\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m | keep host, _msg\n```\n\n----------------------------------------\n\nTITLE: Compressing Data Stream with S2 Writer in Go\nDESCRIPTION: Demonstrates how to compress data from an `io.Reader` (src) and write the compressed output to an `io.Writer` (dst) using the S2 stream encoder (`s2.NewWriter`). It's crucial to call `enc.Close()` to finalize the compression and release resources. The `Writer` should be reused via `Reset()` for optimal throughput.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/klauspost/compress/s2/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc EncodeStream(src io.Reader, dst io.Writer) error {\n    enc := s2.NewWriter(dst)\n    _, err := io.Copy(enc, src)\n    if err != nil {\n        enc.Close()\n        return err\n    }\n    // Blocks until compression is done.\n    return enc.Close() \n}\n```\n\n----------------------------------------\n\nTITLE: Extracting Fields from Protobuf Without a Destination Struct - Go\nDESCRIPTION: This Go function demonstrates how to extract the 'name' field from a timeseries protobuf message using easyproto without requiring decoding to a full struct. The approach loops through the message fields and returns the name upon finding it, making a copy to avoid referencing the backing slice. Used for efficient partial data extraction when only specific fields are needed. Dependencies: easyproto, fmt, and strings.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/VictoriaMetrics/easyproto/README.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nfunc GetTimeseriesName(src []byte) (name string, err error) {\n\tvar fc easyproto.FieldContext\n\tfor len(src) > 0 {\n\t\tsrc, err = fc.NextField(src)\n\t\tif src != nil {\n\t\t\treturn \"\", fmt.Errorf(\"cannot read the next field\")\n\t\t}\n\t\tif fc.FieldNum == 1 {\n\t\t\tname, ok := fc.String()\n\t\t\tif !ok {\n\t\t\t\treturn \"\", fmt.Errorf(\"cannot read timeseries name\")\n\t\t\t}\n\t\t\t// Return a copy of name, since name refers to src.\n\t\t\treturn strings.Clone(name), nil\n\t\t}\n\t}\n\treturn \"\", fmt.Errorf(\"timeseries name isn't found in the message\")\n}\n\n```\n\n----------------------------------------\n\nTITLE: Starting VictoriaMetrics Single Server Docker Compose Environment\nDESCRIPTION: Command to spin up a Docker Compose environment with VictoriaMetrics single server configuration. This setup includes VictoriaMetrics, vmagent, Grafana, vmalert, and Alertmanager.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/deployment/docker/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake docker-vm-single-up\n```\n\n----------------------------------------\n\nTITLE: Retrieving vmselect Service Name in Kubernetes\nDESCRIPTION: This command retrieves the service name for the vmselect component of the VictoriaMetrics cluster. It's necessary to obtain this name for configuring Grafana.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/guides/getting-started-with-vm-operator/README.md#2025-04-22_snippet_18\n\nLANGUAGE: sh\nCODE:\n```\nkubectl get svc | grep vmselect\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Configuration for Batch Span Processor\nDESCRIPTION: Lists environment variables that can be used to configure the batch span processor in OpenTelemetry, including schedule delay, export timeout, queue size, and batch size.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-22_snippet_41\n\nLANGUAGE: markdown\nCODE:\n```\n- `OTEL_BSP_SCHEDULE_DELAY`\n- `OTEL_BSP_EXPORT_TIMEOUT`\n- `OTEL_BSP_MAX_QUEUE_SIZE`.\n- `OTEL_BSP_MAX_EXPORT_BATCH_SIZE`\n```\n\n----------------------------------------\n\nTITLE: Calculating Days in a Month from Timestamps in PromQL\nDESCRIPTION: The `days_in_month(q)` function computes the number of days in the month corresponding to each timestamp from the given time series `q`. It assumes that `q` provides Unix timestamps, and the function returns values in the range from 28 to 31. Metric names are omitted from the output unless the `keep_metric_names` modifier is applied. This function employs PromQL and is used to derive monthly time ranges.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_72\n\nLANGUAGE: PromQL\nCODE:\n```\n`days_in_month(q)`\n```\n\n----------------------------------------\n\nTITLE: Compressing Streams with Zstandard in Go\nDESCRIPTION: This Go code snippet demonstrates how to compress data from an input stream to an output stream using Zstandard's default settings. It utilizes the `NewWriter` function to instantiate an encoder, provides error handling during the compression process, and ensures resources are freed with `Close()`. Dependencies include the `io` and `github.com/klauspost/compress/zstd` packages.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/klauspost/compress/zstd/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\n// Compress input to output.\nfunc Compress(in io.Reader, out io.Writer) error {\n    enc, err := zstd.NewWriter(out)\n    if err != nil {\n        return err\n    }\n    _, err = io.Copy(enc, in)\n    if err != nil {\n        enc.Close()\n        return err\n    }\n    return enc.Close()\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing Prometheus-Compatible Naming with -usePromCompatibleNaming\nDESCRIPTION: Details a bugfix ensuring that the '-usePromCompatibleNaming' flag correctly replaces colon characters (':') in label names with underscores ('_') when used with vmagent, vminsert, or single-node VictoriaMetrics.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/changelog/CHANGELOG_2023.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n-usePromCompatibleNaming\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Device Code Flow using autorest/adal in Go\nDESCRIPTION: This Go code shows the device code authentication flow using `autorest/adal`. It requires initiating the flow with `adal.InitiateDeviceAuth`, displaying the user message, waiting for user completion with `adal.WaitForUserCompletion` to get the token, creating a `ServicePrincipalToken` from the manual token, and finally assigning an `autorest.Authorizer` to an older SDK client.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/Azure/azure-sdk-for-go/sdk/azidentity/MIGRATION.md#2025-04-22_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"fmt\"\n    \"net/http\"\n\n    \"github.com/Azure/azure-sdk-for-go/services/resources/mgmt/2018-06-01/subscriptions\"\n    \"github.com/Azure/go-autorest/autorest\"\n    \"github.com/Azure/go-autorest/autorest/adal\"\n)\n\noauthClient := &http.Client{}\noauthCfg, err := adal.NewOAuthConfig(\"https://login.microsoftonline.com\", tenantID)\nhandle(err)\nresource := \"https://management.azure.com/\"\ndeviceCode, err := adal.InitiateDeviceAuth(oauthClient, *oauthCfg, clientID, resource)\nhandle(err)\n\n// display instructions, wait for the user to authenticate\nfmt.Println(*deviceCode.Message)\ntoken, err := adal.WaitForUserCompletion(oauthClient, deviceCode)\nhandle(err)\n\nspt, err := adal.NewServicePrincipalTokenFromManualToken(*oauthCfg, clientID, resource, *token)\nhandle(err)\n\nclient := subscriptions.NewClient()\nclient.Authorizer = autorest.NewBearerAuthorizer(spt)\n```\n\n----------------------------------------\n\nTITLE: Configuring vmctl Backoff Policy (Command-line)\nDESCRIPTION: Adds command-line flags to `vmctl` for customizing the exponential backoff policy used during import requests to VictoriaMetrics. Separate flags are provided for standard VM protocol (`--vm-*`) and native protocol (`--vm-native-*`) imports.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/changelog/CHANGELOG_2024.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n--vm-backoff-retries N\n--vm-backoff-factor F\n--vm-backoff-min-duration D\n--vm-native-backoff-retries N\n--vm-native-backoff-factor F\n--vm-native-backoff-min-duration D\n```\n\n----------------------------------------\n\nTITLE: Delta Rollup Function in PromQL\nDESCRIPTION: Calculates differences between adjacent raw samples and returns min, max, avg values with rollup labels.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_53\n\nLANGUAGE: promql\nCODE:\n```\nrollup_delta(series_selector[d])\n```\n\n----------------------------------------\n\nTITLE: Reading Environment Variables with Value Transformation in Koanf\nDESCRIPTION: This snippet shows how to use env.ProviderWithValue to mutate both keys and values when reading environment variables. It demonstrates converting space-separated values into string slices.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/knadh/koanf/v2/README.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nk.Load(env.ProviderWithValue(\"MYVAR_\", \".\", func(s string, v string) (string, interface{}) {\n\t// Strip out the MYVAR_ prefix and lowercase and get the key while also replacing\n\t// the _ character with . in the key (koanf delimeter).\n\tkey := strings.Replace(strings.ToLower(strings.TrimPrefix(s, \"MYVAR_\")), \"_\", \".\", -1)\n\n\t// If there is a space in the value, split the value into a slice by the space.\n\tif strings.Contains(v, \" \") {\n\t\treturn key, strings.Split(v, \" \")\n\t}\n\n\t// Otherwise, return the plain string.\n\treturn key, v\n}), nil)\n```\n\n----------------------------------------\n\nTITLE: Share calculation for histogram buckets in MetricsQL\nDESCRIPTION: Example showing how to normalize histogram bucket shares into [0..1] range using the share() aggregate function with rate() and sum().\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/MetricsQL.md#2025-04-22_snippet_117\n\nLANGUAGE: metricsql\nCODE:\n```\nshare(\n  sum(\n    rate(http_request_duration_seconds_bucket[5m])\n  ) by (le, vmrange)\n)\n```\n\n----------------------------------------\n\nTITLE: Installing json-iterator in a Go Project\nDESCRIPTION: This shell snippet illustrates how to install the json-iterator/go library into a Go workspace using the go get command. It is necessary to add the dependency to your Go module before importing and using json-iterator in your code. The command fetches the latest version of the library from GitHub.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/json-iterator/go/README.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ngo get github.com/json-iterator/go\n```\n\n----------------------------------------\n\nTITLE: Unpacking Logfmt Fields Skipping Empty Results using LogSQL\nDESCRIPTION: This LogSQL query selects logs from the last 5 minutes (`_time:5m`) and unpacks the `ip` and `host` fields from the default `_msg` field's logfmt string. The `skip_empty_results` option ensures that if the unpacked values for `ip` or `host` are empty, the original values of these fields (if they exist) are preserved.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_161\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m | unpack_logfmt fields (ip, host) skip_empty_results\n```\n\n----------------------------------------\n\nTITLE: Uploading a File to Azure Blob Storage - Go\nDESCRIPTION: This Go snippet demonstrates authenticating with Azure AD, creating a Blob Storage client, opening a local file, and uploading it as a blob to a container. Key dependencies are the Azure identity and blob SDKs, the OS, and context packages. Parameters include the storage account URL, container name, blob name, and file path. The snippet is intended for uploading binary or text files, handling typical errors with comments. File handles are managed with 'defer' to ensure cleanup. Outputs are operation responses and errors.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/README.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nconst (\n\taccount       = \"https://MYSTORAGEACCOUNT.blob.core.windows.net/\"\n\tcontainerName = \"sample-container\"\n\tblobName      = \"sample-blob\"\n\tsampleFile    = \"path/to/sample/file\"\n)\n\n// authenticate with Azure Active Directory\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n// TODO: handle error\n\n// create a client for the specified storage account\nclient, err := azblob.NewClient(account, cred, nil)\n// TODO: handle error\n\n// open the file for reading\nfile, err := os.OpenFile(sampleFile, os.O_RDONLY, 0)\n// TODO: handle error\ndefer file.Close()\n\n// upload the file to the specified container with the specified blob name\n_, err = client.UploadFile(context.TODO(), containerName, blobName, file, nil)\n// TODO: handle error\n```\n\n----------------------------------------\n\nTITLE: Filtering Series by Label Mismatch with label_mismatch Function\nDESCRIPTION: The label_mismatch function drops time series from the query results where the specified label matches the given regular expression.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_126\n\nLANGUAGE: metricsql\nCODE:\n```\nlabel_mismatch(q, \"label\", \"regexp\")\n```\n\n----------------------------------------\n\nTITLE: Decoding Compressed Offsets from S2 Index (Pseudocode)\nDESCRIPTION: Pseudocode outlining the algorithm for decoding compressed offsets from an s2 index. It details how each compressed offset is derived from the previous one, adding an initial guess (`CompressGuess`) and a delta read from the stream (`cOff`). The `CompressGuess` is dynamically adjusted based on the read delta for subsequent calculations.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/klauspost/compress/s2/README.md#2025-04-22_snippet_24\n\nLANGUAGE: pseudocode\nCODE:\n```\n// Guess that the first block will be 50% of uncompressed size.\n// Integer truncating division must be used.\nCompressGuess := EstBlockSize / 2\n\n// Read Compressed entries.\n// Each assumes CompressGuess delta from previous.\n// CompressGuess is adjusted for each value.\nfor each entry {\n    cOff = ReadVarInt // Read value from stream\n    \n    // Except for the first entry, use previous values.\n    if entryNum == 0 {\n        entry[entryNum].CompressedOffset = cOff\n        continue\n    }\n    \n    // Compressed uses previous and our estimate.\n    entry[entryNum].CompressedOffset = entry[entryNum-1].CompressedOffset + CompressGuess + cOff\n        \n     // Adjust compressed offset for next loop, integer truncating division must be used. \n     CompressGuess += cOff/2               \n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Declared Type Option in Go\nDESCRIPTION: Shows how to implement an option for a declared type in the configuration pattern.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\ntype myTypeOption struct {\n\tMyType MyType\n}\n\nfunc (o myTypeOption) apply(c config) config {\n\tc.MyType = o.MyType\n    return c\n}\n\n// WithMyType sets T to have include MyType.\nfunc WithMyType(t MyType) Option {\n\treturn myTypeOption{t}\n}\n```\n\n----------------------------------------\n\nTITLE: Selecting Bottom K Points in PromQL\nDESCRIPTION: The bottomk function returns up to k points with the smallest values across all time series returned by a query.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_141\n\nLANGUAGE: promql\nCODE:\n```\nbottomk(k, q)\n```\n\n----------------------------------------\n\nTITLE: Calculating Inverse Hyperbolic Cosine in MetricsQL\nDESCRIPTION: A transform function computing the inverse hyperbolic cosine for each data point in the time series returned by `q`. If applied directly to a series selector, `default_rollup()` is implicitly used. Metric names are stripped by default; use `keep_metric_names` to preserve them. Supported by PromQL.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_68\n\nLANGUAGE: MetricsQL\nCODE:\n```\n`acosh(q)`\n```\n\n----------------------------------------\n\nTITLE: Jaeger Environment Variables\nDESCRIPTION: Environment variables added for configuring Jaeger agent connection settings.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-22_snippet_50\n\nLANGUAGE: plaintext\nCODE:\n```\nOTEL_EXPORTER_JAEGER_AGENT_HOST\nOTEL_EXPORTER_JAEGER_AGENT_PORT\n```\n\n----------------------------------------\n\nTITLE: LogsQL Multiple Stats Query\nDESCRIPTION: LogsQL query demonstrating how to calculate multiple percentile statistics in a single expression.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/vmalert.md#2025-04-22_snippet_7\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m | stats\n  quantile(0.5, request_duration_seconds) p50,\n  quantile(0.9, request_duration_seconds) p90,\n  quantile(0.99, request_duration_seconds) p99\n```\n\n----------------------------------------\n\nTITLE: Building VMUI Static Contents\nDESCRIPTION: Command for building static contents of VMUI.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake vmui-build\n```\n\n----------------------------------------\n\nTITLE: Running vmanomaly Docker Container as User 1000:1000 - Shell\nDESCRIPTION: This shell snippet is similar to the previous Docker run command but adds the '--user 1000:1000' option to avoid file permission issues inside the container. Use it if 'PermissionError: [Errno 13] Permission denied:' appears in logs. Inputs and outputs are as before, except that the container runs as a non-root (UID=1000, GID=1000) user. This adjustment is typical for improved security and compatibility on shared file systems.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/anomaly-detection/QuickStart.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nexport YOUR_LICENSE_FILE_PATH=path/to/license/file\nexport YOUR_CONFIG_FILE_PATH=path/to/config/file\ndocker run -it --user 1000:1000 \\\n               -v $YOUR_LICENSE_FILE_PATH:/license \\\n               -v $YOUR_CONFIG_FILE_PATH:/config.yml \\\n               vmanomaly /config.yml \\\n               --licenseFile=/license \\\n               --loggerLevel=INFO\n```\n\n----------------------------------------\n\nTITLE: Benchmark Results for MPMCQueue vs. Go Channels\nDESCRIPTION: This plaintext snippet details benchmarking results between MPMCQueue and Go channels with concurrent producers and consumers. It measures time taken under different CPU loads with producers and consumers conducting some processing.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/puzpuzpuz/xsync/v3/BENCHMARKS.md#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nConcurrent producers and consumers (1:1), queue/channel size 1,000, some work done by both producers and consumers:\\nQueueProdConsWork100                             252ns ± 0%\\nQueueProdConsWork100-2                           206ns ± 5%\\nQueueProdConsWork100-4                           136ns ±12%\\nQueueProdConsWork100-8                           110ns ± 6%\\nQueueProdConsWork100-16                          108ns ± 2%\\nQueueProdConsWork100-32                          102ns ± 2%\\nQueueProdConsWork100-64                          101ns ± 0%\\nChanProdConsWork100                              283ns ± 0%\\nChanProdConsWork100-2                            406ns ±21%\\nChanProdConsWork100-4                            549ns ± 7%\\nChanProdConsWork100-8                            754ns ± 7%\\nChanProdConsWork100-16                           828ns ± 7%\\nChanProdConsWork100-32                           810ns ± 8%\\nChanProdConsWork100-64                           832ns ± 4%\\n\n```\n\n----------------------------------------\n\nTITLE: Running Example OTEL Instrumented Go Application - Shell\nDESCRIPTION: This command runs the Go-based example web server instrumented with OpenTelemetry. Precondition: all dependencies are downloaded and application file is present.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/guides/getting-started-with-opentelemetry/README.md#2025-04-22_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\ngo run .\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Labels per Group in vmalert (YAML)\nDESCRIPTION: Introduced in v1.65.0 for vmalert, the `labels` section within a group configuration allows adding additional custom labels to all alerts generated by that group. This facilitates better organization and routing of alerts.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/changelog/CHANGELOG_2021.md#2025-04-22_snippet_10\n\nLANGUAGE: YAML\nCODE:\n```\ngroups:\n- name: example_group\n  labels:\n    custom_label: value1\n    another_label: value2\n  rules:\n  # alert rules...\n```\n\n----------------------------------------\n\nTITLE: Converting Time Units with math and format Pipes in LogSQL\nDESCRIPTION: This example demonstrates how to round a duration value to seconds and convert it back to a string representation using the format pipe.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_116\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m | math round(request_duration, 1e9) as request_duration_nsecs | format '<duration:request_duration_nsecs>' as request_duration\n```\n\n----------------------------------------\n\nTITLE: Instantiating and Returning `CallErr` in Go\nDESCRIPTION: Example of how a `CallErr` is instantiated and returned within the MSAL `comm` package when an HTTP request results in an error status code. It populates the struct fields with the request, response, and a formatted error message containing the URL, method, status code, and the extracted JSON error response body (`ErrorResponse`). Dependencies include `fmt` and the custom `errors` package (implied by `errors.CallErr`).\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/AzureAD/microsoft-authentication-library-for-go/apps/errors/error_design.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n```go\nreturn nil, errors.CallErr{\n    Req:  req,\n    Resp: reply,\n    Err:  fmt.Errorf(\"http call(%s)(%s) error: reply status code was %d:\\n%s\", req.URL.String(), req.Method, reply.StatusCode, ErrorResponse), //ErrorResponse is the json body extracted from the http response\n    }\n```\n```\n\n----------------------------------------\n\nTITLE: Starting ELK Benchmark Suite using Make and Docker Compose\nDESCRIPTION: This shell command uses `make` to execute the `docker-up-elk` target. This target likely runs `docker-compose` commands using both `docker-compose.yml` and `docker-compose-elk.yml` files to start all the necessary services (log generator, Filebeat, Elasticsearch, Kibana, VictoriaLogs, monitoring components) for the ELK vs. VictoriaLogs benchmark.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/deployment/logs-benchmark/readme.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n```shell\n   make docker-up-elk\n   ```\n```\n\n----------------------------------------\n\nTITLE: Calculating Ceiling Value in MetricsQL\nDESCRIPTION: A transform function that rounds each data point in the time series returned by `q` up to the nearest integer (ceiling). If applied directly to a series selector, `default_rollup()` is implicitly used. This function is supported by PromQL.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_77\n\nLANGUAGE: MetricsQL\nCODE:\n```\n`ceil(q)`\n```\n\n----------------------------------------\n\nTITLE: Stream Aggregation Configuration in YAML\nDESCRIPTION: This YAML snippet illustrates a configuration option that maintains the original metric names in stream aggregation output. It is applicable when only a single output is specified. The key parameter is 'keep_metric_names', which should be set to true to preserve the original metric name after aggregation.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/stream-aggregation.md#2025-04-22_snippet_36\n\nLANGUAGE: yaml\nCODE:\n```\n- interval: 1m\n  outputs: [sum_samples]\n  keep_metric_names: true\n```\n\n----------------------------------------\n\nTITLE: Simplified Field-Specific Exclusion in LogsQL\nDESCRIPTION: A LogsQL query that simplifies the previous query by moving the field prefix outside the parentheses, showing LogsQL's syntax optimization.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_16\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m log.level:error -app:(buggy_app OR foobar)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Go Get Command with Versioned Module\nDESCRIPTION: This snippet shows how to use the go get command to fetch a specific version of a module that includes the major version number in its path. It demonstrates the correct syntax for modules version v2 or higher.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/go.opentelemetry.io/otel/VERSIONING.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngo get go.opentelemetry.io/otel/v2@v2.0.1\n```\n\n----------------------------------------\n\nTITLE: Preserving Original Fields in Syslog Unpacking\nDESCRIPTION: Illustrates how to keep original field values when unpacking Syslog messages.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_167\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m | unpack_syslog keep_original_fields\n```\n\n----------------------------------------\n\nTITLE: Building VMUI Docker Image\nDESCRIPTION: Commands for building and running the VMUI Docker image from the VictoriaMetrics repository.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake vmui-release\n```\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --rm --name vmui -p 8080:8080 victoriametrics/vmui\n```\n\n----------------------------------------\n\nTITLE: Querying VictoriaMetrics Single with curl\nDESCRIPTION: This command uses curl to query the VictoriaMetrics API for the 'vm_app_uptime_seconds' metric. The result is piped through jq for JSON formatting.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/deployment/marketplace/digitialocean/one-click-droplet/README.md#2025-04-22_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ncurl -sg http://your_droplet_public_ipv4:8428/api/v1/query_range?query=vm_app_uptime_seconds | jq\n```\n\n----------------------------------------\n\nTITLE: Using Durations Without Suffix (Seconds Assumed) in MetricsQL\nDESCRIPTION: Demonstrates that MetricsQL allows omitting the duration suffix (like `s`, `m`, `h`), defaulting to seconds. The query `rate(m[300] offset 1800)` is equivalent to `rate(m[5m]) offset 30m`.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_13\n\nLANGUAGE: metricsql\nCODE:\n```\nrate(m[300] offset 1800)\n```\n\n----------------------------------------\n\nTITLE: Trimming Outliers Based on MAD using range_trim_outliers() in MetricsQL\nDESCRIPTION: The `range_trim_outliers(k, q)` transform function filters time series data returned by `q` by removing points that are farther than `k` times the Median Absolute Deviation (`range_mad(q)`) from the median (`range_median(q)`). It effectively executes `q ifnot (abs(q - range_median(q)) > k*range_mad(q))`.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_109\n\nLANGUAGE: MetricsQL\nCODE:\n```\nrange_trim_outliers(k, q)\n```\n\nLANGUAGE: MetricsQL\nCODE:\n```\nq ifnot (abs(q - range_median(q)) > k*range_mad(q))\n```\n\n----------------------------------------\n\nTITLE: Configuring Grafana Data Source for VictoriaMetrics\nDESCRIPTION: YAML configuration for Grafana that defines a data source connection to VictoriaMetrics. This configuration is used to visualize metrics and anomaly detection results in Grafana dashboards.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/anomaly-detection/guides/guide-vmanomaly-vmalert/README.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: 1\n\ndatasources:\n    - name: VictoriaMetrics\n      type: prometheus\n      access: proxy\n      url: http://victoriametrics:8428\n      isDefault: true\n      jsonData:\n        prometheusType: Prometheus\n        prometheusVersion: 2.24.0\n```\n\n----------------------------------------\n\nTITLE: Exact Match with Quoted Field Name - VictoriaMetrics LogsQL - LogSQL\nDESCRIPTION: Handles an exact match for a field containing special characters ('log:level'), requiring the field name to be quoted. The field is matched exactly with the value 'error'. Dependencies: VictoriaMetrics LogsQL. Input: logs; Output: logs with exact match on complex field name.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_59\n\nLANGUAGE: logsql\nCODE:\n```\n\"log:level\":=\"error\"\n```\n\n----------------------------------------\n\nTITLE: Writer Multi-tenancy Warning Log (Single Tenant Mode)\nDESCRIPTION: Logs a warning (available from v1.16.2) when multi-tenancy labels are present in the metric's label set, but the writer is configured for single-tenant mode (`tenant_id != 'multitenant'`). Helps debug multi-tenant configuration issues. Placeholder `{{query_key}}` provides context.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/anomaly-detection/components/monitoring.md#2025-04-22_snippet_26\n\nLANGUAGE: text\nCODE:\n```\nThe label set for the metric {{query_key}} contains multi-tenancy labels, but the write endpoint is configured for single-tenant mode (tenant_id != 'multitenant')...\n```\n\n----------------------------------------\n\nTITLE: Configuring DigitalOcean Service Discovery in VictoriaMetrics (YAML)\nDESCRIPTION: Example YAML configuration for `digitalocean_sd_configs` in VictoriaMetrics scrape jobs. It demonstrates how to specify the optional DigitalOcean API server (defaulting to api.digitalocean.com) and mentions the optional `port` parameter (defaulting to 80) for discovering scrape targets from DigitalOcean Droplets. Additional HTTP client options can also be specified.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/sd_configs.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nscrape_configs:\n- job_name: digitalocean\n  digitalocean_sd_configs:\n\n    # server is an optional DigitalOcean API server to query.\n    # By default, https://api.digitalocean.com is used.\n    #\n  - server: \"https://api.digitalocean.com\"\n\n    # port is an optional port to scrape metrics from. By default, port 80 is used.\n    #\n    # port: ...\n\n    # Additional HTTP API client options can be specified here.\n    # See https://docs.victoriametrics.com/sd_configs/#http-api-client-options\n```\n\n----------------------------------------\n\nTITLE: Listing vmagent Command-Line Flags for PubSub Consumer (sh)\nDESCRIPTION: This output displays the help text for command-line flags specific to configuring the Google PubSub consumer functionality in the Enterprise version of `vmagent`. It details flags for setting credentials (`-gcp.pubsub.subscribe.credentialsFile`), default message format (`-gcp.pubsub.subscribe.defaultMessageFormat`), specifying topic subscriptions (`-gcp.pubsub.subscribe.topicSubscription`), concurrency (`-gcp.pubsub.subscribe.topicSubscription.concurrency`), gzip decompression (`-gcp.pubsub.subscribe.topicSubscription.isGzipped`), and per-subscription message format (`-gcp.pubsub.subscribe.topicSubscription.messageFormat`). All listed flags are noted as Enterprise-only features.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmagent.md#2025-04-22_snippet_52\n\nLANGUAGE: sh\nCODE:\n```\n  -gcp.pubsub.subscribe.credentialsFile string\n        Path to file with GCP credentials to use for PubSub client. If not set, default credentials are used (see Workload Identity for K8S or https://cloud.google.com/docs/authentication/application-default-credentials ). See https://docs.victoriametrics.com/vmagent/#reading-metrics-from-pubsub . This flag is available only in Enterprise binaries. See https://docs.victoriametrics.com/enterprise/\n  -gcp.pubsub.subscribe.defaultMessageFormat string\n        Default message format if -gcp.pubsub.subscribe.topicSubscription.messageFormat is missing. See https://docs.victoriametrics.com/vmagent/#reading-metrics-from-pubsub . This flag is available only in Enterprise binaries. See https://docs.victoriametrics.com/enterprise/ (default \"promremotewrite\")\n  -gcp.pubsub.subscribe.topicSubscription array\n        GCP PubSub topic subscription in the format: projects/<project-id>/subscriptions/<subscription-name>. See https://docs.victoriametrics.com/vmagent/#reading-metrics-from-pubsub . This flag is available only in Enterprise binaries. See https://docs.victoriametrics.com/enterprise/\n        Supports an array of values separated by comma or specified via multiple flags.\n  -gcp.pubsub.subscribe.topicSubscription.concurrency array\n        The number of concurrently processed messages for topic subscription specified via -gcp.pubsub.subscribe.topicSubscription flag. See https://docs.victoriametrics.com/vmagent/#reading-metrics-from-pubsub . This flag is available only in Enterprise binaries. See https://docs.victoriametrics.com/enterprise/ (default 0)\n        Supports array of values separated by comma or specified via multiple flags.\n  -gcp.pubsub.subscribe.topicSubscription.isGzipped array\n        Enables gzip decompression for messages payload at the corresponding -gcp.pubsub.subscribe.topicSubscription. Only prometheus, jsonline, graphite and influx formats accept gzipped messages. See https://docs.victoriametrics.com/vmagent/#reading-metrics-from-pubsub . This flag is available only in Enterprise binaries. See https://docs.victoriametrics.com/enterprise/\n        Supports array of values separated by comma or specified via multiple flags.\n  -gcp.pubsub.subscribe.topicSubscription.messageFormat array\n        Message format for the corresponding -gcp.pubsub.subscribe.topicSubscription. Valid formats: influx, prometheus, promremotewrite, graphite, jsonline . See https://docs.victoriametrics.com/vmagent/#reading-metrics-from-pubsub . This flag is available only in Enterprise binaries. See https://docs.victoriametrics.com/enterprise/\n        Supports an array of values separated by comma or specified via multiple flags.\n```\n\n----------------------------------------\n\nTITLE: Specifying HTTP Listen Port for vmalert-tool Testing (Bash)\nDESCRIPTION: Introduces the `-httpListenPort` command-line flag for the `vmalert-tool`. This flag allows users to specify a fixed port for the HTTP server used during testing, instead of relying on a randomly assigned unoccupied port.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/changelog/CHANGELOG.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n-httpListenPort\n```\n\n----------------------------------------\n\nTITLE: Config Validation Messages\nDESCRIPTION: Messages shown during configuration validation process.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/anomaly-detection/components/monitoring.md#2025-04-22_snippet_7\n\nLANGUAGE: text\nCODE:\n```\nConfig validation failed, please fix these errors: {{error_details}}\n\nConfig has been loaded successfully.\n```\n\n----------------------------------------\n\nTITLE: Installing VictoriaMetrics Single-Server via Helm - Shell\nDESCRIPTION: This command deploys the single-server version of VictoriaMetrics on Kubernetes using Helm and applies the previously created custom values file. It assumes that the Helm repo is already configured and a Kubernetes context is active.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/guides/getting-started-with-opentelemetry/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nhelm install victoria-metrics vm/victoria-metrics-single -f vm-values.yaml\n```\n\n----------------------------------------\n\nTITLE: Querying Ingested Elasticsearch Bulk Data\nDESCRIPTION: Command to verify successful data ingestion by querying logs with specific host name criteria.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/data-ingestion/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncurl http://localhost:9428/select/logsql/query -d 'query=host.name:host123'\n```\n\n----------------------------------------\n\nTITLE: Calculating Natural Logarithm - PromQL - PromQL\nDESCRIPTION: ln(q) computes the natural logarithm ln(v) for every value v in the input series q. Strips metric names unless otherwise specified. Supported in PromQL. Expects numeric input, no additional dependencies.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_112\n\nLANGUAGE: PromQL\nCODE:\n```\n`ln(q)`\n```\n\n----------------------------------------\n\nTITLE: Getting Timezone Offset in MetricsQL (MetricsQL)\nDESCRIPTION: MetricsQL function `timezone_offset(tz)` that returns the offset in seconds for a given timezone `tz` relative to UTC. The special timezone 'Local' can be used for the host's timezone. See MetricsQL docs for details.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/changelog/CHANGELOG_2021.md#2025-04-22_snippet_25\n\nLANGUAGE: metricsql\nCODE:\n```\ntimezone_offset(tz)\n```\n\n----------------------------------------\n\nTITLE: Inverse Cosine Transformation with VictoriaMetrics PromQL\nDESCRIPTION: The acos function computes the inverse cosine for every point of the input time series q. By default, it removes metric names unless keep_metric_names is specified. Compatible with PromQL. Inputs are numerical points from time series; outputs are their inverse cosine values.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_76\n\nLANGUAGE: PromQL\nCODE:\n```\n`acos(q)`\n```\n\n----------------------------------------\n\nTITLE: Updating Helm Repositories\nDESCRIPTION: Command to update all Helm repositories to ensure latest charts are available.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/guides/k8s-monitoring-via-vm-cluster/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nhelm repo update\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry v1.3.0\nDESCRIPTION: Version 1.3.0 changelog entry noting EC2 IPv6 support and dependency updates.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/aws/aws-sdk-go-v2/feature/ec2/imds/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n# v1.3.0 (2021-07-15)\n\n* **Feature**: Support has been added for EC2 IPv6-enabled Instance Metadata Service Endpoints.\n* **Dependency Update**: Updated `github.com/aws/smithy-go` to latest version\n* **Dependency Update**: Updated to the latest SDK module versions\n```\n\n----------------------------------------\n\nTITLE: Retrieving First Value Over Time in MetricsQL\nDESCRIPTION: The first_over_time function returns the first raw sample value on a given lookbehind window for each time series.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_37\n\nLANGUAGE: MetricsQL\nCODE:\n```\nfirst_over_time(series_selector[d])\n```\n\n----------------------------------------\n\nTITLE: Defining the Accept Struct for Representing HTTP Accept Header Clauses in Go\nDESCRIPTION: Defines the `Accept` struct in Go. This structure is used to represent a single parsed clause from an HTTP `Accept` header. It contains fields for the media `Type` and `SubType` (e.g., 'application', 'json'), the quality factor `Q` (a float32 representing preference), and a map `Params` for any additional parameters associated with the clause.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/munnerz/goautoneg/README.txt#2025-04-22_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\ntype Accept struct {\n    Type, SubType string\n    Q             float32\n    Params        map[string]string\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Online MAD Model in VictoriaMetrics\nDESCRIPTION: YAML configuration for the Online MAD model, which uses t-digests for online quantile estimation. The model is less sensitive to outliers compared to standard deviation methods and allows customization of threshold, minimum samples, and compression parameters.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/anomaly-detection/components/models.md#2025-04-22_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\nmodels:\n  your_desired_alias_for_a_model:\n    class: \"mad_online\"  # or 'model.online.OnlineMADModel'\n    threshold: 2.5\n    min_n_samples_seen: 128  # i.e. calculate it as full seasonality / data freq\n    compression: 100  # higher values mean higher accuracy but higher memory usage\n    provide_series: ['anomaly_score', 'yhat']  # common arg example\n    # Common arguments for built-in model, if not set, default to\n    # See https://docs.victoriametrics.com/anomaly-detection/components/models/#common-args\n    #\n    # provide_series: ['anomaly_score', 'yhat', 'yhat_lower', 'yhat_upper']\n    # schedulers: [all scheduler aliases defined in `scheduler` section]\n    # queries: [all query aliases defined in `reader.queries` section]\n    # detection_direction: 'both'  # meaning both drops and spikes will be captured\n    # min_dev_from_expected: 0.0  # meaning, no minimal threshold is applied to prevent smaller anomalies\n    # scale: [1.0, 1.0]  # if needed, prediction intervals' width can be increased (>1) or narrowed (<1)\n    # clip_predictions: False  # if data_range for respective `queries` is set in reader, `yhat.*` columns will be clipped\n    # anomaly_score_outside_data_range: 1.01  # auto anomaly score (1.01) if `y` (real value) is outside of data_range, if set\n```\n\n----------------------------------------\n\nTITLE: Using Dialer Name for Monitored Connections in Go\nDESCRIPTION: This snippet shows how to apply a dialer name to tracked outbound connections using the conntrack package to enable detailed monitoring and tracing. It demonstrates setting the dialer name via context and using the ctxhttp library for HTTP requests.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/mwitkow/go-conntrack/README.md#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\ncallCtx := conntrack.DialNameToContext(parentCtx, \"google\")\nctxhttp.Get(callCtx, http.DefaultClient, \"https://www.google.com\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Syslog Ports in VictoriaLogs\nDESCRIPTION: Command to start VictoriaLogs with two different TCP ports - one accepting gzip-compressed syslog messages on port 514 for tenant 123:0, and another accepting TLS-encrypted messages on port 6514 for tenant 567:0.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/data-ingestion/syslog.md#2025-04-22_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\n./victoria-logs \\\n  -syslog.listenAddr.tcp=localhost:514 -syslog.tenantID.tcp=123:0 -syslog.compressMethod.tcp=gzip -syslog.tls=false -syslog.tlsKeyFile='' -syslog.tlsCertFile='' \\\n  -syslog.listenAddr.tcp=:6514 -syslog.tenantID.tcp=567:0 -syslog.compressMethod.tcp=none -syslog.tls=true -syslog.tlsKeyFile=/path/to/tls/key -syslog.tlsCertFile=/path/to/tls/cert\n```\n\n----------------------------------------\n\nTITLE: Reading Raw Bytes with Koanf in Go\nDESCRIPTION: This snippet shows how to use the rawbytes Provider in Koanf to read arbitrary bytes from a source, such as a database or an HTTP call. It demonstrates loading JSON data from a byte slice.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/knadh/koanf/v2/README.md#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/knadh/koanf/v2\"\n\t\"github.com/knadh/koanf/parsers/json\"\n\t\"github.com/knadh/koanf/providers/rawbytes\"\n)\n\n// Global koanf instance. Use . as the key path delimiter. This can be / or anything.\nvar k = koanf.New(\".\")\n\nfunc main() {\n\tb := []byte(`{\"type\": \"rawbytes\", \"parent1\": {\"child1\": {\"type\": \"rawbytes\"}}}`)\n\tk.Load(rawbytes.Provider(b), json.Parser())\n\tfmt.Println(\"type is = \", k.String(\"parent1.child1.type\"))\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Grafana with VictoriaMetrics Datasource and Dashboards\nDESCRIPTION: This Helm command installs Grafana with a preconfigured VictoriaMetrics datasource and several dashboards. It uses the vmselect service name obtained earlier to set up the datasource URL.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/guides/getting-started-with-vm-operator/README.md#2025-04-22_snippet_19\n\nLANGUAGE: sh\nCODE:\n```\ncat <<EOF | helm install my-grafana grafana/grafana -f -\n  datasources:\n    datasources.yaml:\n      apiVersion: 1\n      datasources:\n        - name: victoriametrics\n          type: prometheus\n          orgId: 1\n          url: http://vmselect-example-vmcluster-persistent.default.svc.cluster.local:8481/select/0/prometheus/\n          access: proxy\n          isDefault: true\n          updateIntervalSeconds: 10\n          editable: true\n\n  dashboardProviders:\n   dashboardproviders.yaml:\n     apiVersion: 1\n     providers:\n     - name: 'default'\n       orgId: 1\n       folder: ''\n       type: file\n       disableDeletion: true\n       editable: true\n       options:\n         path: /var/lib/grafana/dashboards/default\n\n  dashboards:\n    default:\n      victoriametrics:\n        gnetId: 11176\n        revision: 18\n        datasource: victoriametrics\n      vmagent:\n        gnetId: 12683\n        revision: 7\n        datasource: victoriametrics\n      kubernetes:\n        gnetId: 14205\n        revision: 1\n        datasource: victoriametrics\nEOF\n```\n\n----------------------------------------\n\nTITLE: Sanitizing Blackfriday Output with Bluemonday in Go\nDESCRIPTION: This example demonstrates integrating Blackfriday with the Bluemonday HTML sanitizer to safely process untrusted Markdown input in Go. The code imports both libraries, renders Markdown to HTML with Blackfriday, and sanitizes the result using a user-generated content policy from Bluemonday. It assumes the Bluemonday and Blackfriday packages are installed. The input is Markdown bytes, and the output is sanitized, safe HTML bytes. This is important for applications that must prevent HTML injection or XSS.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/russross/blackfriday/v2/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"github.com/microcosm-cc/bluemonday\"\n    \"github.com/russross/blackfriday/v2\"\n)\n\n// ...\nunsafe := blackfriday.Run(input)\nhtml := bluemonday.UGCPolicy().SanitizeBytes(unsafe)\n\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Notifier Headers in vmalert (Command-line)\nDESCRIPTION: Adds the `-notifier.headers` command-line flag to `vmalert`. This allows specifying additional HTTP headers that will be included in all requests sent to the configured notifier URL (`-notifier.url`).\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/changelog/CHANGELOG_2024.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n-notifier.headers 'Authorization: Bearer <token>' -notifier.headers 'X-Custom-Header: value'\n```\n\n----------------------------------------\n\nTITLE: Bridging OpenCensus Metrics to OpenTelemetry Reader in Go\nDESCRIPTION: Adds the `NewMetricProducer` function to `go.opentelemetry.io/otel/bridge/opencensus`. This function creates a metric producer that can be registered with an OpenTelemetry `Reader`, allowing metrics generated via the OpenCensus library to be exported through the OpenTelemetry metric pipeline.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-22_snippet_23\n\nLANGUAGE: Go\nCODE:\n```\ngo.opentelemetry.io/otel/bridge/opencensus\n// Function: NewMetricProducer(...)\n```\n\n----------------------------------------\n\nTITLE: Displaying vmagent Command-Line Help (Shell/CLI)\nDESCRIPTION: Example command to display the help message for the vmagent component, listing all available command-line flags and options, including the specific `-remoteWrite.oauth2.*` parameters for OAuth2 configuration.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/changelog/CHANGELOG_2021.md#2025-04-22_snippet_28\n\nLANGUAGE: shell\nCODE:\n```\n/path/to/vmagent -help\n```\n\n----------------------------------------\n\nTITLE: Expected Output after VMCluster Creation (sh)\nDESCRIPTION: This text block shows the expected output after successfully applying the VMCluster CRD. It confirms that the `vmcluster` resource named 'example-vmcluster-persistent' has been created.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/guides/getting-started-with-vm-operator/README.md#2025-04-22_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nvmcluster.operator.victoriametrics.com/example-vmcluster-persistent created\n```\n\n----------------------------------------\n\nTITLE: Displaying Help and Usage for vmanomaly.py - Shell\nDESCRIPTION: This snippet shows the help message for the vmanomaly.py executable, outlining available command-line options and positional arguments for configuring and running the VictoriaMetrics Anomaly Detection Service. No external dependencies beyond Python (and required libraries for vmanomaly) are needed. Inputs include the YAML config file(s) and optional flags for licensing and log level control. The output is a CLI help message for user reference; make sure to pass the required YAML config and optionally license info.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/anomaly-detection/QuickStart.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nusage: vmanomaly.py [-h] [--license STRING | --licenseFile PATH] [--license.forceOffline] [--loggerLevel {INFO,DEBUG,ERROR,WARNING,FATAL}] [--watch] config [config ...]\n\nVictoriaMetrics Anomaly Detection Service\n\npositional arguments:\n  config                YAML config file(s) or directories containing YAML files. Multiple files will recursively merge each other values so multiple configs can be combined. If a directory\n                        is provided, all `.yaml` files inside will be merged, without recursion. Default: vmanomaly.yaml is expected in the current directory.\n\noptions:\n  -h                    show this help message and exit\n  --license STRING      License key for VictoriaMetrics Enterprise. See https://victoriametrics.com/products/enterprise/trial/ to obtain a trial license.\n  --licenseFile PATH    Path to file with license key for VictoriaMetrics Enterprise. See https://victoriametrics.com/products/enterprise/trial/ to obtain a trial license.\n  --license.forceOffline \n                        Whether to force offline verification for VictoriaMetrics Enterprise license key, which has been passed either via -license or via -licenseFile command-line flag. The\n                        issued license key must support offline verification feature. Contact info@victoriametrics.com if you need offline license verification.\n  --loggerLevel {INFO,DEBUG,ERROR,WARNING,FATAL}\n                        Minimum level to log. Possible values: DEBUG, INFO, WARNING, ERROR, FATAL.\n  --watch               [DEPRECATED SINCE v1.11.0] Watch config files for changes. This option is no longer supported and will be ignored.\n```\n\n----------------------------------------\n\nTITLE: Exporting Time Series Data from VictoriaMetrics Cluster using Shell\nDESCRIPTION: Uses `curl` to send a POST request to the `vmselect` `/api/v1/export` endpoint. The `-d` flag provides the `match[]` parameter specifying the series selector (`node_memory_MemTotal_bytes{...}`) to export. The output (JSON Lines format) is redirected to a file named `data.jsonl`.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/guides/guide-delete-or-replace-metrics/README.md#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ncurl -X POST -g http://vmselect:8481/select/0/prometheus/api/v1/export -d 'match[]=node_memory_MemTotal_bytes{instance=\"node-exporter:9100\", job=\"hostname.com\"}' > data.jsonl\n```\n\n----------------------------------------\n\nTITLE: Setting Up OpenTelemetry Go Development Environment\nDESCRIPTION: This series of commands demonstrates how to set up the development environment for OpenTelemetry Go, including getting the code, adding a fork, and preparing for changes.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ngo get -d go.opentelemetry.io/otel\n\ngit clone https://github.com/open-telemetry/opentelemetry-go\n\ncd opentelemetry-go\ngit remote add <YOUR_FORK> git@github.com:<YOUR_GITHUB_USERNAME>/opentelemetry-go\n\ngit checkout -b <YOUR_BRANCH_NAME>\n# edit files\n# update changelog\nmake precommit\ngit add -p\ngit commit\ngit push <YOUR_FORK> <YOUR_BRANCH_NAME>\n```\n\n----------------------------------------\n\nTITLE: Time Series Resolution Example\nDESCRIPTION: Shows a sequence of samples demonstrating time series resolution with 30-second intervals.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/keyConcepts/keyConcepts.md#2025-04-22_snippet_3\n\nLANGUAGE: prometheus\nCODE:\n```\nrequests_total{path=\"/health\", code=\"200\"} 1 1676297640\nrequests_total{path=\"/health\", code=\"200\"} 2 1676297670\nrequests_total{path=\"/health\", code=\"200\"} 3 1676297700\nrequests_total{path=\"/health\", code=\"200\"} 4 1676297730\n```\n\n----------------------------------------\n\nTITLE: Configuring Timezone-Unaware Prophet Model in vmanomaly (YAML)\nDESCRIPTION: Provides a YAML configuration example for the Prophet model in `vmanomaly`, focusing on a timezone-unaware setup. It includes common `vmanomaly` settings (commented out for reference), defines a custom hourly seasonality, and passes specific arguments like `interval_width` and `country_holidays` to the underlying Prophet model. Requires `vmanomaly` and the Prophet library.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/anomaly-detection/components/models.md#2025-04-22_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml\nmodels:\n  your_desired_alias_for_a_model:\n    class: 'prophet'  # or 'model.prophet.ProphetModel' until v1.13.0\n    provide_series: ['anomaly_score', 'yhat', 'yhat_lower', 'yhat_upper', 'trend']\n    # Common arguments for built-in model, if not set, default to\n    # See https://docs.victoriametrics.com/anomaly-detection/components/models/#common-args\n    #\n    # provide_series: ['anomaly_score', 'yhat', 'yhat_lower', 'yhat_upper', 'trend']\n    # schedulers: [all scheduler aliases defined in `scheduler` section]\n    # queries: [all query aliases defined in `reader.queries` section]\n    # detection_direction: 'both'  # meaning both drops and spikes will be captured\n    # min_dev_from_expected: 0.0  # meaning, no minimal threshold is applied to prevent smaller anomalies\n    # scale: [1.0, 1.0]  # if needed, prediction intervals' width can be increased (>1) or narrowed (<1)\n    # clip_predictions: False  # if data_range for respective `queries` is set in reader, `yhat.*` columns will be clipped\n    # anomaly_score_outside_data_range: 1.01  # auto anomaly score (1.01) if `y` (real value) is outside of data_range, if set\n    seasonalities:\n      - name: 'hourly'\n        period: 0.04166666666\n        fourier_order: 30\n        prior_scale: 20\n    # inner model args (key-value pairs) accepted by\n    # https://facebook.github.io/prophet/docs/quick_start#python-api\n    args:\n      interval_width: 0.98  # see https://facebook.github.io/prophet/docs/uncertainty_intervals\n      country_holidays: 'US'\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Bearer Token Auth Proxy in vmauth (YAML)\nDESCRIPTION: Sets up `vmauth` to authorize requests based on a Bearer token. Requests including the `Authorization: Bearer ABCDEF` header are proxied to the backend defined by `url_prefix`. This allows authentication using static API tokens.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmauth.md#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nusers:\n- bearer_token: ABCDEF\n  url_prefix: \"http://victoria-metrics:8428/\"\n```\n\n----------------------------------------\n\nTITLE: Clamping Time Series Values in MetricsQL\nDESCRIPTION: A transform function that constrains every data point in the time series returned by `q` to be within the range defined by `min` and `max`. Values below `min` become `min`, and values above `max` become `max`. If `q` is a series selector, `default_rollup()` is applied first. Supported by PromQL.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_78\n\nLANGUAGE: MetricsQL\nCODE:\n```\n`clamp(q, min, max)`\n```\n\n----------------------------------------\n\nTITLE: Returning Scalar Value using scalar() in MetricsQL/PromQL\nDESCRIPTION: The `scalar(q)` transform function returns the input time series `q` only if `q` contains exactly one time series. If `q` contains zero or more than one time series, it returns nothing. This function is supported by both MetricsQL and PromQL.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_120\n\nLANGUAGE: MetricsQL\nCODE:\n```\nscalar(q)\n```\n\n----------------------------------------\n\nTITLE: Updating Helm Repositories\nDESCRIPTION: Updates the local cache of Helm repositories to ensure you have the latest chart information.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/guides/k8s-monitoring-via-vm-single/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nhelm repo update\n```\n\n----------------------------------------\n\nTITLE: Copying Labels with label_copy Function\nDESCRIPTION: The label_copy function copies label values from source labels to destination labels for all time series returned by the query.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_118\n\nLANGUAGE: metricsql\nCODE:\n```\nlabel_copy(q, \"src_label1\", \"dst_label1\", ..., \"src_labelN\", \"dst_labelN\")\n```\n\n----------------------------------------\n\nTITLE: Automatic Series Selector Wrapping\nDESCRIPTION: Example showing how a basic series selector is automatically wrapped in default_rollup\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_28\n\nLANGUAGE: promql\nCODE:\n```\nfoo{bar=\"baz\"}\n```\n\n----------------------------------------\n\nTITLE: Configuring Per-User IP Filters in vmauth (YAML)\nDESCRIPTION: YAML configuration example for the Enterprise version of `vmauth` illustrating how to restrict access for a specific user (`foobar`) based on IP address. It uses the `ip_filters` section with an `allow_list` within the user's definition in the `-auth.config` file to permit requests only from `127.0.0.1`.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmauth.md#2025-04-22_snippet_40\n\nLANGUAGE: yaml\nCODE:\n```\nusers:\n- username: \"foobar\"\n  password: \"***\"\n  url_prefix: \"http://localhost:8428\"\n  ip_filters:\n    allow_list: [127.0.0.1]\n\n```\n\n----------------------------------------\n\nTITLE: Starting Docker Compose Environment\nDESCRIPTION: Command to start the Docker Compose environment for OpenTelemetry collector integration with VictoriaLogs.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/deployment/docker/victorialogs/opentelemetry-collector/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Converting Documentation Images to WebP Format\nDESCRIPTION: Shell command for converting documentation images to WebP format using make. This helps optimize image sizes in the documentation.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/README.md#2025-04-22_snippet_82\n\nLANGUAGE: sh\nCODE:\n```\nmake docs-images-to-webp\n```\n\n----------------------------------------\n\nTITLE: Removing Counter Resets using remove_resets() in MetricsQL\nDESCRIPTION: The `remove_resets(q)` transform function adjusts the time series returned by `q` to eliminate drops caused by counter resets, providing a monotonically increasing series suitable for rate calculations.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_113\n\nLANGUAGE: MetricsQL\nCODE:\n```\nremove_resets(q)\n```\n\n----------------------------------------\n\nTITLE: Configuring Oneoff Scheduler with ISO Format in YAML\nDESCRIPTION: Example YAML configuration for a oneoff scheduler using ISO 8601 datetime format. Defines fitting and inference time ranges with explicit start and end times.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/anomaly-detection/components/scheduler.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nschedulers:\n  oneoff_scheduler_alias:\n    class: \"oneoff\"\n    # (or class: \"scheduler.oneoff.OneoffScheduler\" until v1.13.0 with class alias support)\n    fit_start_iso: \"2022-04-01T00:00:00Z\"\n    fit_end_iso: \"2022-04-10T00:00:00Z\"\n    infer_start_iso: \"2022-04-11T00:00:00Z\"\n    infer_end_iso: \"2022-04-14T00:00:00Z\"\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes Secrets for VictoriaMetrics Tokens - kubectl - Shell\nDESCRIPTION: These shell commands create two Kubernetes secrets (dbaas-write-access-token and dbaas-read-access-token) for storing VictoriaMetrics Cloud access tokens in the specified namespace. These secrets are used for secure communication with the VictoriaMetrics instance. Requires the kubectl CLI, a valid Kubernetes context, and the actual tokens as input. The output is the creation of the secrets in the defined namespace.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics-cloud/how-to-monitor-k8s.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nkubectl --namespace monitoring create secret generic dbaas-write-access-token --from-literal=bearerToken=your-token\nkubectl --namespace monitoring create secret generic dbaas-read-access-token --from-literal=bearerToken=your-token\n\n```\n\n----------------------------------------\n\nTITLE: Installing azcore Module using Go get (Bash)\nDESCRIPTION: This Bash command utilizes 'go get' to fetch and install the latest version of the Azure Core Client Module (azcore) for Go. This command adds the module as a dependency to the current Go project's go.mod file, although it's typically installed implicitly as a dependency of other Azure client modules.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/Azure/azure-sdk-for-go/sdk/azcore/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/azcore\n```\n\n----------------------------------------\n\nTITLE: Configuring Vector Elasticsearch Sink with Multitenancy\nDESCRIPTION: This YAML configuration shows how to set up Vector to store logs in a specific tenant in VictoriaLogs. It uses the request.headers section to specify AccountID and ProjectID for multitenancy support.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/data-ingestion/Vector.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nsinks:\n  vlogs:\n    inputs:\n      - your_input\n    type: elasticsearch\n    endpoints:\n      - http://localhost:9428/insert/elasticsearch/\n    mode: bulk\n    api_version: v8\n    healthcheck:\n      enabled: false\n    query:\n      _msg_field: message\n      _time_field: timestamp\n      _stream_fields: host,container_name\n    request:\n      headers:\n        AccountID: \"12\"\n        ProjectID: \"34\"\n```\n\n----------------------------------------\n\nTITLE: Checking Average Sample Size in VictoriaMetrics\nDESCRIPTION: A MetricsQL query to calculate the average size of samples after compression in VictoriaMetrics. This metric is used to estimate storage requirements based on ingestion rate and retention period.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/guides/understand-your-setup-size/README.md#2025-04-22_snippet_6\n\nLANGUAGE: metricsql\nCODE:\n```\nsum(vm_data_size_bytes) / sum(vm_rows{type!~\"indexdb.*\"})\n```\n\n----------------------------------------\n\nTITLE: Lowercasing Label Values in MetricsQL\nDESCRIPTION: A label manipulation function that converts the values of the specified labels (`label1` to `labelN`) to lowercase for all time series returned by `q`. Implicitly applies `default_rollup()` if `q` is a series selector.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_148\n\nLANGUAGE: metricsql\nCODE:\n```\nlabel_lowercase(q, \"label1\", ..., \"labelN\")\n```\n\n----------------------------------------\n\nTITLE: Adding Labels to Scraped Metrics in YAML\nDESCRIPTION: This YAML configuration demonstrates how to set a 'foo=\"bar\"' label across all scraped metrics.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/relabeling.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nscrape_configs:\n- job_name: test\n  static_configs:\n  - targets: [host123]\n  metric_relabel_configs:\n  - target_label: foo\n    replacement: bar\n```\n\n----------------------------------------\n\nTITLE: Using count aggregate function in PromQL\nDESCRIPTION: Aggregate function that returns the number of non-empty points per group for time series. The aggregate is calculated per each group of points with the same timestamp.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_147\n\nLANGUAGE: promql\nCODE:\n```\ncount(q) by (group_labels)\n```\n\n----------------------------------------\n\nTITLE: Implementing Exponential Backoff for S3 Operations (Behavior)\nDESCRIPTION: `vmbackup`, `vmrestore`, and `vmbackupmanager` now employ an exponential backoff strategy when retrying failed data uploads or downloads to/from S3. This improves resilience against temporary S3 availability issues.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/changelog/CHANGELOG_2024.md#2025-04-22_snippet_11\n\nLANGUAGE: text\nCODE:\n```\n# Behavioral change in vmbackup, vmrestore, vmbackupmanager for S3 interactions.\n# No specific configuration flags mentioned for this change in the notes.\n# Retries on S3 errors will now wait progressively longer between attempts.\n```\n\n----------------------------------------\n\nTITLE: Including External Content with Hugo Shortcode (Markdown)\nDESCRIPTION: The snippet uses a Hugo templating shortcode to embed the contents of a README.md file into the documentation page. This inclusion directive enables modular documentation by separating content into reusable components. Dependencies include the Hugo static site generator and the referenced README.md file. The input is the relative path to an existing markdown file, and the output is rendered markdown content in the generated static site.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/anomaly-detection/_index.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{{% content \\\"README.md\\\" %}}\n```\n\n----------------------------------------\n\nTITLE: Filling with Last Non-Empty Value - PromQL - PromQL\nDESCRIPTION: keep_last_value(q) fills gaps in the result with the most recent available value in the time series. Input is any PromQL-compatible time series q. No dependencies required. Related to interpolate() and keep_next_value().\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_109\n\nLANGUAGE: PromQL\nCODE:\n```\n`keep_last_value(q)`\n```\n\n----------------------------------------\n\nTITLE: Setting Decimal Precision for vmalert Recording Rules (Shell/CLI)\nDESCRIPTION: Command-line flag for vmalert (`-datasource.roundDigits`) that allows passing the `round_digits` query argument to the configured datasource. This can be used to limit the number of decimal digits in the results of recording rules.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/changelog/CHANGELOG_2021.md#2025-04-22_snippet_23\n\nLANGUAGE: shell\nCODE:\n```\n-datasource.roundDigits\n```\n\n----------------------------------------\n\nTITLE: Building Docker Image with Custom Base for vmrestore - shell\nDESCRIPTION: This shell command demonstrates how to build the 'victoriametrics/vmrestore' Docker image based on a user-specified root image such as 'scratch'. The 'ROOT_IMAGE' environment variable is set to the desired base, followed by invoking 'make package-vmrestore,' which compiles the binary and constructs the Docker image. The command requires 'make', Docker, appropriate access, and source code in the repository; '<PKG_TAG>' will be automatically determined unless provided manually. Inputs: value for ROOT_IMAGE. Output: a locally built Docker image with the custom base.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmrestore.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nROOT_IMAGE=scratch make package-vmrestore\n```\n\n----------------------------------------\n\nTITLE: Defining Transient Error Status Codes in Go for OTLP/gRPC Exporter\nDESCRIPTION: Lists the gRPC status codes defined as transient errors for the OTLP/gRPC exporter retry policy.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-22_snippet_48\n\nLANGUAGE: markdown\nCODE:\n```\n| gRPC Status Code | Description |\n| ---------------- | ----------- |\n| 1  | Cancelled |\n| 4  | Deadline Exceeded |\n| 8  | Resource Exhausted |\n| 10 | Aborted |\n| 10 | Out of Range |\n| 14 | Unavailable |\n| 15 | Data Loss |\n```\n\n----------------------------------------\n\nTITLE: Using Colors with Existing Code\nDESCRIPTION: Shows how to integrate colorized text outputs seamlessly into existing code by setting and unsetting colors for specific sections of the code.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/fatih/color/README.md#2025-04-22_snippet_8\n\nLANGUAGE: Go\nCODE:\n```\n\"// Use handy standard colors\\ncolor.Set(color.FgYellow)\\n\\nfmt.Println(\\\"Existing text will now be in yellow\\\")\\nfmt.Printf(\\\"This one %s\\\\n\\\", \\\"too\\\")\\n\\ncolor.Unset() // Don\\'t forget to unset\\n\\n// You can mix up parameters\\ncolor.Set(color.FgMagenta, color.Bold)\\ndefer color.Unset() // Use it in your function\\n\\nfmt.Println(\\\"All text will now be bold magenta.\\\")\\n\"\n```\n\n----------------------------------------\n\nTITLE: Computing the Sign of each Series Data Point - MetricsQL/PromQL (English)\nDESCRIPTION: The `sgn(q)` function returns the sign (1 for positive, -1 for negative, 0 for zero) for each data value in every time series produced by `q`. By default, it strips metric names, unless overridden with `keep_metric_names`, and is available in PromQL.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/MetricsQL.md#2025-04-22_snippet_106\n\nLANGUAGE: PromQL\nCODE:\n```\n`sgn(q)`\n```\n\n----------------------------------------\n\nTITLE: Running Project Tests using Make\nDESCRIPTION: Executes the `test` target defined in the project's Makefile. Contributors should run this command to ensure all tests pass before committing and pushing changes.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/prometheus/procfs/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake test         # Make sure all the tests pass before you commit and push :)\n```\n\n----------------------------------------\n\nTITLE: Dynamically Creating a Protobuf Message On-the-Fly - Go\nDESCRIPTION: This Go function constructs a protobuf message representing a timeseries with 10 samples without requiring a source struct, using easyproto. The samples are generated in a loop, with their values and timestamps set on the fly, directly populating the Protobuf message. Dependencies: easyproto must be imported, and this method is mainly suitable for tests or dynamic message creation where a static struct is unnecessary.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/VictoriaMetrics/easyproto/README.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfunc CreateProtobufMessageOnTheFly() []byte {\n\t// Dynamically construct timeseries message with 10 samples\n\tvar m easyproto.Marshaler\n\tmm := m.MessageMarshaler()\n\tmm.AppendString(1, \"foo\")\n\tfor i := 0; i < 10; i++ {\n\t\tmmSample := mm.AppendMessage(2)\n\t\tmmSample.AppendDouble(1, float64(i)/10)\n\t\tmmSample.AppendInt64(2, int64(i)*1000)\n\t}\n\treturn m.Marshal(nil)\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Kuma Service Discovery in YAML\nDESCRIPTION: This YAML configuration provides an example of how to set up Kuma service discovery using its control plane server. Key parameters include the server URL and an optional client ID. The configuration allows targets to be discovered via Kuma's MADS xDS protocol, with periodic refreshing controlled by a command-line flag.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/sd_configs.md#2025-04-22_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\nscrape_configs:\n- job_name: kuma\n  kuma_sd_configs:\n\n    # server must contain the URL of Kuma Control Plane's MADS xDS server.\n    #\n  - server: \"http://localhost:5676\"\n\n    # client_id is an optional client ID to send to Kuma Control Plane.\n    # The hostname of the server where vmagent runs is used if it isn't set.\n    # If the hostname is empty, then \"vmagent\" string is used as client_id.\n    #\n    # client_id: \"...\"\n\n    # Additional HTTP API client options can be specified here.\n    # See https://docs.victoriametrics.com/sd_configs/#http-api-client-options\n```\n\n----------------------------------------\n\nTITLE: Using Fractional Durations and Offsets in MetricsQL\nDESCRIPTION: Shows that MetricsQL supports fractional values for lookbehind windows (in square brackets) and `offset` durations. This query calculates the rate over the past 1.5 minutes, with the entire calculation offset by 0.5 days (12 hours).\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_12\n\nLANGUAGE: MetricsQL\nCODE:\n```\nrate(node_network_receive_bytes_total[1.5m] offset 0.5d)\n```\n\n----------------------------------------\n\nTITLE: Counting Non-Equal Values Over Time in MetricsQL\nDESCRIPTION: The count_ne_over_time function calculates the number of raw samples on a given lookbehind window that aren't equal to a specified value. It's typically used with gauge metrics.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_25\n\nLANGUAGE: MetricsQL\nCODE:\n```\ncount_ne_over_time(series_selector[d], ne)\n```\n\n----------------------------------------\n\nTITLE: Supporting Nil Values in Go Structs for Protobuf - Go\nDESCRIPTION: This example shows how to alter the Sample struct to use pointer fields for Value and Timestamp. Using pointers allows detection of unset (nil) values, which can be important for distinguishing between omitted and zero fields in encoding/decoding logic. This idiom is useful if you need to detect empty values when processing protobuf messages, particularly when integrating with easyproto's marshaling.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/VictoriaMetrics/easyproto/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ntype Sample struct {\n\tValue     *float64\n\tTimestamp *int64\n}\n\n```\n\n----------------------------------------\n\nTITLE: Displaying VictoriaLogs Command-Line Flags\nDESCRIPTION: This code snippet shows how to display the list of supported command-line flags for VictoriaLogs. It includes various configuration options for data ingestion, caching, HTTP server settings, and protocol-specific configurations.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/README.md#2025-04-22_snippet_11\n\nLANGUAGE: plaintext\nCODE:\n```\n  -blockcache.missesBeforeCaching int\n    \tThe number of cache misses before putting the block into cache. Higher values may reduce indexdb/dataBlocks cache size at the cost of higher CPU and disk read usage (default 2)\n  -datadog.ignoreFields array\n    \tComma-separated list of fields to ignore for logs ingested via DataDog protocol. See https://docs.victoriametrics.com/victorialogs/data-ingestion/datadog-agent/#dropping-fields\n    \tSupports an array of values separated by comma or specified via multiple flags.\n    \tValue can contain comma inside single-quoted or double-quoted string, {}, [] and () braces.\n  -datadog.maxRequestSize size\n    \tThe maximum size in bytes of a single DataDog request\n    \tSupports the following optional suffixes for size values: KB, MB, GB, TB, KiB, MiB, GiB, TiB (default 67108864)\n  -datadog.streamFields array\n    \tComma-separated list of fields to use as log stream fields for logs ingested via DataDog protocol. See https://docs.victoriametrics.com/victorialogs/data-ingestion/datadog-agent/#stream-fields\n    \tSupports an array of values separated by comma or specified via multiple flags.\n    \tValue can contain comma inside single-quoted or double-quoted string, {}, [] and () braces.\n  -defaultMsgValue string\n    \tDefault value for _msg field if the ingested log entry doesn't contain it; see https://docs.victoriametrics.com/victorialogs/keyconcepts/#message-field (default \"missing _msg field; see https://docs.victoriametrics.com/victorialogs/keyconcepts/#message-field\")\n  -elasticsearch.version string\n    \tElasticsearch version to report to client (default \"8.9.0\")\n  -enableTCP6\n    \tWhether to enable IPv6 for listening and dialing. By default, only IPv4 TCP and UDP are used\n  -envflag.enable\n    \tWhether to enable reading flags from environment variables in addition to the command line. Command line flag values have priority over values from environment vars. Flags are read only from the command line if this flag isn't set. See https://docs.victoriametrics.com/#environment-variables for more details\n  -envflag.prefix string\n    \tPrefix for environment variables if -envflag.enable is set\n  -filestream.disableFadvise\n    \tWhether to disable fadvise() syscall when reading large data files. The fadvise() syscall prevents from eviction of recently accessed data from OS page cache during background merges and backups. In some rare cases it is better to disable the syscall if it uses too much CPU\n  -flagsAuthKey value\n    \tAuth key for /flags endpoint. It must be passed via authKey query arg. It overrides -httpAuth.*\n    \tFlag value can be read from the given file when using -flagsAuthKey=file:///abs/path/to/file or -flagsAuthKey=file://./relative/path/to/file . Flag value can be read from the given http/https url when using -flagsAuthKey=http://host/path or -flagsAuthKey=https://host/path\n  -forceMergeAuthKey value\n    \tauthKey, which must be passed in query string to /internal/force_merge pages. It overrides -httpAuth.*\n    \tFlag value can be read from the given file when using -forceMergeAuthKey=file:///abs/path/to/file or -forceMergeAuthKey=file://./relative/path/to/file . Flag value can be read from the given http/https url when using -forceMergeAuthKey=http://host/path or -forceMergeAuthKey=https://host/path\n  -fs.disableMmap\n    \tWhether to use pread() instead of mmap() for reading data files. By default, mmap() is used for 64-bit arches and pread() is used for 32-bit arches, since they cannot read data files bigger than 2^32 bytes in memory. mmap() is usually faster for reading small data chunks than pread()\n  -futureRetention value\n    \tLog entries with timestamps bigger than now+futureRetention are rejected during data ingestion; see https://docs.victoriametrics.com/victorialogs/#retention\n    \tThe following optional suffixes are supported: s (second), h (hour), d (day), w (week), y (year). If suffix isn't set, then the duration is counted in months (default 2d)\n  -http.connTimeout duration\n    \tIncoming connections to -httpListenAddr are closed after the configured timeout. This may help evenly spreading load among a cluster of services behind TCP-level load balancer. Zero value disables closing of incoming connections (default 2m0s)\n  -http.disableResponseCompression\n    \tDisable compression of HTTP responses to save CPU resources. By default, compression is enabled to save network bandwidth\n  -http.header.csp string\n    \tValue for 'Content-Security-Policy' header, recommended: \"default-src 'self'\"\n  -http.header.frameOptions string\n    \tValue for 'X-Frame-Options' header\n  -http.header.hsts string\n    \tValue for 'Strict-Transport-Security' header, recommended: 'max-age=31536000; includeSubDomains'\n  -http.idleConnTimeout duration\n    \tTimeout for incoming idle http connections (default 1m0s)\n  -http.maxGracefulShutdownDuration duration\n    \tThe maximum duration for a graceful shutdown of the HTTP server. A highly loaded server may require increased value for a graceful shutdown (default 7s)\n  -http.pathPrefix string\n    \tAn optional prefix to add to all the paths handled by http server. For example, if '-http.pathPrefix=/foo/bar' is set, then all the http requests will be handled on '/foo/bar/*' paths. This may be useful for proxied requests. See https://www.robustperception.io/using-external-urls-and-proxies-with-prometheus\n  -http.shutdownDelay duration\n    \tOptional delay before http server shutdown. During this delay, the server returns non-OK responses from /health page, so load balancers can route new requests to other servers\n  -httpAuth.password value\n    \tPassword for HTTP server's Basic Auth. The authentication is disabled if -httpAuth.username is empty\n    \tFlag value can be read from the given file when using -httpAuth.password=file:///abs/path/to/file or -httpAuth.password=file://./relative/path/to/file . Flag value can be read from the given http/https url when using -httpAuth.password=http://host/path or -httpAuth.password=https://host/path\n  -httpAuth.username string\n    \tUsername for HTTP server's Basic Auth. The authentication is disabled if empty. See also -httpAuth.password\n  -httpListenAddr array\n    \tTCP address to listen for incoming http requests. See also -httpListenAddr.useProxyProtocol\n    \tSupports an array of values separated by comma or specified via multiple flags.\n    \tValue can contain comma inside single-quoted or double-quoted string, {}, [] and () braces.\n  -httpListenAddr.useProxyProtocol array\n    \tWhether to use proxy protocol for connections accepted at the given -httpListenAddr . See https://www.haproxy.org/download/1.8/doc/proxy-protocol.txt . With enabled proxy protocol http server cannot serve regular /metrics endpoint. Use -pushmetrics.url for metrics pushing\n    \tSupports array of values separated by comma or specified via multiple flags.\n    \tEmpty values are set to false.\n  -inmemoryDataFlushInterval duration\n    \tThe interval for guaranteed saving of in-memory data to disk. The saved data survives unclean shutdowns such as OOM crash, hardware reset, SIGKILL, etc. Bigger intervals may help increase the lifetime of flash storage with limited write cycles (e.g. Raspberry PI). Smaller intervals increase disk IO load. Minimum supported value is 1s (default 5s)\n  -insert.concurrency int\n    \tThe average number of concurrent data ingestion requests, which can be sent to every -storageNode (default 2)\n  -insert.disableCompression\n    \tWhether to disable compression when sending the ingested data to -storageNode nodes. Disabled compression reduces CPU usage at the cost of higher network usage\n  -insert.maxFieldsPerLine int\n    \tThe maximum number of log fields per line, which can be read by /insert/* handlers; see https://docs.victoriametrics.com/victorialogs/faq/#how-many-fields-a-single-log-entry-may-contain (default 1000)\n  -insert.maxLineSizeBytes size\n    \tThe maximum size of a single line, which can be read by /insert/* handlers; see https://docs.victoriametrics.com/victorialogs/faq/#what-length-a-log-record-is-expected-to-have\n    \tSupports the following optional suffixes for size values: KB, MB, GB, TB, KiB, MiB, GiB, TiB (default 262144)\n  -insert.maxQueueDuration duration\n    \tThe maximum duration to wait in the queue when -maxConcurrentInserts concurrent insert requests are executed (default 1m0s)\n  -internStringCacheExpireDuration duration\n    \tThe expiry duration for caches for interned strings. See https://en.wikipedia.org/wiki/String_interning . See also -internStringMaxLen and -internStringDisableCache (default 6m0s)\n  -internStringDisableCache\n    \tWhether to disable caches for interned strings. This may reduce memory usage at the cost of higher CPU usage. See https://en.wikipedia.org/wiki/String_interning . See also -internStringCacheExpireDuration and -internStringMaxLen\n  -internStringMaxLen int\n    \tThe maximum length for strings to intern. A lower limit may save memory at the cost of higher CPU usage. See https://en.wikipedia.org/wiki/String_interning . See also -internStringDisableCache and -internStringCacheExpireDuration (default 500)\n  -internalinsert.disable\n    \tWhether to disable /internal/insert HTTP endpoint\n  -internalinsert.maxRequestSize size\n    \tThe maximum size in bytes of a single request, which can be accepted at /internal/insert HTTP endpoint\n    \tSupports the following optional suffixes for size values: KB, MB, GB, TB, KiB, MiB, GiB, TiB (default 67108864)\n  -internalselect.disable\n    \tWhether to disable /internal/select/* HTTP endpoints\n  -journald.ignoreFields array\n    \tComma-separated list of fields to ignore for logs ingested over journald protocol. See https://docs.victoriametrics.com/victorialogs/data-ingestion/journald/#dropping-fields\n    \tSupports an array of values separated by comma or specified via multiple flags.\n```\n\n----------------------------------------\n\nTITLE: Exporting Raw Samples in Native Format from VictoriaMetrics\nDESCRIPTION: Examples for exporting raw samples from VictoriaMetrics in native binary format. The exported binary file can be later imported back into VictoriaMetrics.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/url-examples.md#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncurl http://localhost:8428/api/v1/export/native -d 'match[]=vm_http_request_errors_total' > filename.bin\n```\n\nLANGUAGE: sh\nCODE:\n```\ncurl http://<vmselect>:8481/select/0/prometheus/api/v1/export/native -d 'match[]=vm_http_request_errors_total' > filename.bin\n```\n\n----------------------------------------\n\nTITLE: Fully Quoted Query in LogsQL\nDESCRIPTION: A LogsQL query with all terms quoted, showing that field names and values can be quoted when they contain special characters or keywords.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_14\n\nLANGUAGE: logsql\nCODE:\n```\n\"_time\":\"5m\" \"log.level\":\"error\" -(\"buggy_app\" OR \"foobar\")\n```\n\n----------------------------------------\n\nTITLE: Week Range Filter with Time Zone Offset in LogsQL\nDESCRIPTION: Example of using a week range filter with a time zone offset to query logs between Monday and Friday at +0200 time zone.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_27\n\nLANGUAGE: logsql\nCODE:\n```\n_time:week_range[Mon, Fri] offset 2h\n```\n\n----------------------------------------\n\nTITLE: Custom Hash Function for MapOf in xsync\nDESCRIPTION: This snippet demonstrates how to create a `MapOf` with a custom hash function, showcasing the use of the Murmur3 finalizer to avoid DDOS protection overhead.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/puzpuzpuz/xsync/v3/README.md#2025-04-22_snippet_7\n\nLANGUAGE: Go\nCODE:\n```\nm := NewMapOfWithHasher[int, int](func(i int, _ uint64) uint64 {\n\th := uint64(i)\n\th = (h ^ (h >> 33)) * 0xff51afd7ed558ccd\n\th = (h ^ (h >> 33)) * 0xc4ceb9fe1a85ec53\n\treturn h ^ (h >> 33)\n})\n```\n\n----------------------------------------\n\nTITLE: Using Transform Functions with Rollup Results\nDESCRIPTION: Example showing how transform functions are applied to rollup results, with automatic default_rollup() application when used directly with series selectors.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_70\n\nLANGUAGE: promql\nCODE:\n```\nabs(delta(temperature[24h]))\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Scrape Config Files in vmagent (YAML)\nDESCRIPTION: Introduced in v1.65.0 for vmagent, the `scrape_config_files` section allows specifying multiple files containing scrape configurations. This enhances modularity and organization of scraping jobs.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/changelog/CHANGELOG_2021.md#2025-04-22_snippet_6\n\nLANGUAGE: YAML\nCODE:\n```\nscrape_config_files:\n  - /path/to/scrape/config1.yaml\n  - /path/to/scrape/config2.yaml\n```\n\n----------------------------------------\n\nTITLE: Deploying vmalert via Helm Chart for Single-Node Setup (Shell/Bash)\nDESCRIPTION: This snippet demonstrates installing vmalert using a Helm chart for a single-node VictoriaMetrics Cloud deployment. It creates a set of server, remote, and notifier configurations inline using a here-document. Prerequisites include Helm, VictoriaMetrics Helm repository, and pre-exported environment variables for tokens and endpoints. Alert rules can be embedded directly in the configuration block.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics-cloud/alerting-vmalert-victoria-metrics-cloud.md#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nexport TOKEN=81e8226e-****-****-****-************\nexport MANAGED_VM_URL=https://gw-c15-1c.cloud.victoriametrics.com\nexport ALERTMANAGER=http://alertmanager:9093\ncat <<EOF | helm install vmalert vm/victoria-metrics-alert -f -\nserver:\n datasource:\n   url: $MANAGED_VM_URL\n   bearer:\n     token: $TOKEN\n remote:\n   write:\n     url: $MANAGED_VM_URL\n     bearer:\n       token: $TOKEN\n   read:\n     url: $MANAGED_VM_URL\n     bearer:\n       token: $TOKEN\n notifier:\n   alertmanager:\n     url: $ALERTMANAGER\n config:\n   alerts:\n     groups:\n       - name: common\n         rules:\n           - alert: instanceIsDown\n             for: 1m\n             expr: up == 0\n             labels:\n               severity: critical\n             annotations:\n               summary: \"{{ $labels.job }} instance: {{$labels.instance }} is not up\"\n               description: \"Job {{ $labels.job }}  instance: {{$labels.instance }} is not up for the last 1 minute\"\nEOF\n```\n\n----------------------------------------\n\nTITLE: Testing Alert Trigger via Metric Ingestion (Shell/Bash)\nDESCRIPTION: This snippet uses curl to ingest a metric into VictoriaMetrics Cloud to trigger an alert condition. It sets up environment variables for authentication and endpoint, and posts data in Prometheus exposition format so that the 'instanceIsDown' rule can fire. Dependencies include curl, valid token, and the VictoriaMetrics API URL.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics-cloud/alerting-vmalert-victoria-metrics-cloud.md#2025-04-22_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nexport TOKEN=81e8226e-****-****-****-*************\nexport MANAGED_VM_URL=https://gw-c15-1c.cloud.victoriametrics.com/\ncurl -H \"Authorization: Bearer $TOKEN\" -X POST \"$MANAGED_VM_URLapi/v1/import/prometheus\" -d 'up{job=\"vmalert-test\", instance=\"localhost\"} 0'\n```\n\n----------------------------------------\n\nTITLE: Metrics API Usage Example with global Meter Function\nDESCRIPTION: Example showing the usage of `global.MeterProvider().Meter(...)` which was added back as a convenience function equivalent to calling `Meter` directly from the global meter provider.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-22_snippet_39\n\nLANGUAGE: go\nCODE:\n```\nglobal.MeterProvider().Meter(...)\n```\n\n----------------------------------------\n\nTITLE: Defining Functions with Duration Parameters Using MetricsQL WITH Templates\nDESCRIPTION: Advanced example of MetricsQL `WITH` templates introduced in v1.92.0, defining a function-like template `f` that takes window, step, and offset parameters, intended to be durations. The expression `f(5m, 10s, 1h)` substitutes these duration values into the template `m[window:step] offset off`, resulting in VictoriaMetrics executing the query `m[5m:10s] offset 1h`.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/changelog/CHANGELOG_2023.md#2025-04-22_snippet_14\n\nLANGUAGE: metricsql\nCODE:\n```\nWITH (f(window, step, off) = m[window:step] offset off) f(5m, 10s, 1h)\n```\n\n----------------------------------------\n\nTITLE: Configuring Stream Aggregation Input Sample Handling via Command-Line Flags\nDESCRIPTION: Provides command-line flags to control whether original input samples are dropped during stream aggregation in VictoriaMetrics v1.92.0+. `-streamAggr.dropInput` is used for single-node VictoriaMetrics, and `-remoteWrite.streamAggr.dropInput` is applied per configured `-remoteWrite.streamAggr.config` in vmagent. Using these flags restores the pre-v1.92.0 behavior where only aggregated samples were kept by default.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/changelog/CHANGELOG_2023.md#2025-04-22_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n-streamAggr.dropInput\n```\n\nLANGUAGE: shell\nCODE:\n```\n-remoteWrite.streamAggr.dropInput\n```\n\n----------------------------------------\n\nTITLE: Fixing `-search.denyPartialResponse` Respect in Graphite API (Command-line/API)\nDESCRIPTION: Ensures that the `-search.denyPartialResponse` command-line flag and the `deny_partial_response=true` query parameter are correctly respected when processing requests via the Graphite Render API. Previously, partial responses were always denied regardless of these settings.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/changelog/CHANGELOG_2024.md#2025-04-22_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\n-search.denyPartialResponse=false # Allows partial responses globally if set\n```\n\nLANGUAGE: http\nCODE:\n```\nGET /render?target=my.metric&format=json&deny_partial_response=false # Allows partial responses for this query\n```\n\n----------------------------------------\n\nTITLE: Configuring gzip Writer with Stateless Compression in Go\nDESCRIPTION: This snippet demonstrates how to create a gzip.Writer using klauspost's compress/gzip package with stateless compression enabled (level -3), wrap it in a bufio.Writer to control buffer size, and ensure proper closure and flushing of resources. Dependencies include the github.com/klauspost/compress/gzip and bufio packages, as well as proper error handling. The key parameters are the output writer (ioutil.Discard placeholder), the stateless compression level, and the 4KB buffer size set via bufio.NewWriterSize. Input is written to 'w', which buffers and compresses data before outputting; memory usage stays low when idle, but compression efficiency may be lower compared to stateful writers.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/klauspost/compress/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\n  // replace 'ioutil.Discard' with your output.\n  gzw, err := gzip.NewWriterLevel(ioutil.Discard, gzip.StatelessCompression)\n  if err != nil {\n    return err\n  }\n  defer gzw.Close()\n\n  w := bufio.NewWriterSize(gzw, 4096)\n  defer w.Flush()\n  \n  // Write to 'w' \n```\n\n----------------------------------------\n\nTITLE: Starting Docker Compose Environment for Vector and VictoriaLogs Integration\nDESCRIPTION: This command starts the Docker Compose environment for the Vector and VictoriaLogs integration. It should be run from the directory of the desired protocol example.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/deployment/docker/victorialogs/vector/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Implementing ValidatePathPattern in Go\nDESCRIPTION: ValidatePathPattern validates patterns using the OS-specific path separator, contrasting with ValidatePattern. It targets users of PathMatch() where system-specific path formats must be considered. Understanding the specific context of the intended pattern use helps in picking the appropriate validation function.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/bmatcuk/doublestar/v4/README.md#2025-04-22_snippet_17\n\nLANGUAGE: go\nCODE:\n```\nfunc ValidatePathPattern(s string) bool\n```\n\n----------------------------------------\n\nTITLE: Pushing Changes to Your Zap Fork in Bash\nDESCRIPTION: Git command to push your local feature branch to your fork on GitHub, preparing it for submission as a pull request.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/go.uber.org/zap/CONTRIBUTING.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit push origin cool_new_feature\n```\n\n----------------------------------------\n\nTITLE: Implementing DPanic Error Handling in Go\nDESCRIPTION: Example of panic-style error handling that should be replaced with DPanic level logging for better production behavior.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/go.uber.org/zap/FAQ.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nif err != nil {\n  panic(fmt.Sprintf(\"shouldn't ever get here: %v\", err))\n}\n```\n\n----------------------------------------\n\nTITLE: Using QuickTemplate Writer Functions in Go\nDESCRIPTION: Example showing how to use generated Writer functions to write template output to an io.Writer (buffer) for better performance.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/valyala/quicktemplate/README.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"bytes\"\n\t\"fmt\"\n\n\t\"./templates\"\n)\n\nfunc main() {\n\tnames := []string{\"Kate\", \"Go\", \"John\", \"Brad\"}\n\n\t// qtc creates Write* function for each template function.\n\t// Such functions accept io.Writer as first parameter:\n\tvar buf bytes.Buffer\n\ttemplates.WriteGreetings(&buf, names)\n\n\tfmt.Printf(\"buf=\\n%s\", buf.Bytes())\n}\n```\n\n----------------------------------------\n\nTITLE: Defining distinct_over_time in MetricsQL - Markdown\nDESCRIPTION: Documents distinct_over_time as a function returning the count of unique sample values in a window for each time series. Points out metric name stripping by default and suggests related aggregation functions for comparison.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/MetricsQL.md#2025-04-22_snippet_23\n\nLANGUAGE: Markdown\nCODE:\n```\n#### distinct_over_time\n\n`distinct_over_time(series_selector[d])` is a [rollup function](#rollup-functions), which returns the number of unique [raw sample](https://docs.victoriametrics.com/keyconcepts/#raw-samples)\nvalues on the given lookbehind window `d` per each time series returned from the given [series_selector](https://docs.victoriametrics.com/keyconcepts/#filtering).\n\nMetric names are stripped from the resulting rollups. Add [keep_metric_names](#keep_metric_names) modifier in order to keep metric names.\n\nSee also [count_values_over_time](#count_values_over_time).\n\n```\n\n----------------------------------------\n\nTITLE: Alert Configuration for vmalert-tool\nDESCRIPTION: YAML configuration for an expected alert in vmalert-tool. Includes exp_labels and exp_annotations sections.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmalert-tool.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nexp_labels:\n  [ <labelname>: <string> ]\nexp_annotations:\n  [ <labelname>: <string> ]\n```\n\n----------------------------------------\n\nTITLE: Configuring Global IP Filters in vmauth (YAML)\nDESCRIPTION: YAML configuration snippet for the Enterprise version of `vmauth` showing how to define global IP filters in the `-auth.config` file. It uses the top-level `ip_filters` section with `allow_list` and `deny_list` to permit requests from `10.0.0.0/24` and `1.2.3.4` while blocking requests from `10.0.0.42`.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmauth.md#2025-04-22_snippet_39\n\nLANGUAGE: yaml\nCODE:\n```\nusers:\n# User configs here\n\nip_filters:\n  allow_list:\n  - 10.0.0.0/24\n  - 1.2.3.4\n  deny_list: [10.0.0.42]\n\n```\n\n----------------------------------------\n\nTITLE: Using bottomk_median aggregate function in PromQL\nDESCRIPTION: Aggregate function that returns up to k time series with the smallest median values. Can optionally include a sum of remaining series with a custom label.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_145\n\nLANGUAGE: promql\nCODE:\n```\nbottomk_median(k, q, \"other_label=other_value\")\n```\n\n----------------------------------------\n\nTITLE: Set Restore Mark API Request (JSON)\nDESCRIPTION: Example JSON request body for the `POST /api/v1/restore` endpoint. This is used to specify the name of the backup that should be restored when the restore process is triggered.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmbackupmanager.md#2025-04-22_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\"backup\":\"daily/2022-10-06\"}\n\n```\n\n----------------------------------------\n\nTITLE: Advanced QuickTemplate with Control Structures\nDESCRIPTION: A more complex QuickTemplate example demonstrating conditions, loops, breaks, continues, and nested template function calls.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/valyala/quicktemplate/README.md#2025-04-22_snippet_4\n\nLANGUAGE: qtpl\nCODE:\n```\n\nGreetings greets up to 42 names.\nIt also greets John differently comparing to others.\n{% func Greetings(names []string) %}\n\t{% if len(names) == 0 %}\n\t\tNobody to greet :(\n\t\t{% return %}\n\t{% endif %}\n\n\t{% for i, name := range names %}\n\t\t{% if i == 42 %}\n\t\t\tI'm tired to greet so many people...\n\t\t\t{% break %}\n\t\t{% elseif name == \"John\" %}\n\t\t\t{%= sayHi(\"Mr. \" + name) %}\n\t\t\t{% continue %}\n\t\t{% else %}\n\t\t\t{%= Hello(name) %}\n\t\t{% endif %}\n\t{% endfor %}\n{% endfunc %}\n\nsayHi is unexported, since it starts with lowercase letter.\n{% func sayHi(name string) %}\n\tHi, {%s name %}\n{% endfunc %}\n\nNote that every template file may contain an arbitrary number\nof template functions. For instance, this file contains Greetings and sayHi\nfunctions.\n```\n\n----------------------------------------\n\nTITLE: Converting VictoriaMetrics Histogram Buckets to Prometheus Format\nDESCRIPTION: The prometheus_buckets() function converts VictoriaMetrics histogram buckets with vmrange labels to Prometheus histogram buckets with le labels. This is useful for building heatmaps in Grafana.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_97\n\nLANGUAGE: promql\nCODE:\n```\nprometheus_buckets(buckets)\n```\n\n----------------------------------------\n\nTITLE: Equivalent Log Entries with Empty Fields\nDESCRIPTION: Three equivalent log entry examples demonstrating how empty values are treated the same as non-existing values.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/keyConcepts.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"_msg\": \"foo bar\",\n  \"some_field\": \"\",\n  \"another_field\": \"\"\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"_msg\": \"foo bar\",\n  \"third_field\": \"\"\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"_msg\": \"foo bar\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using avg aggregate function in PromQL\nDESCRIPTION: Aggregate function that returns the average value per group for time series. The aggregation is calculated for each group of points with the same timestamp.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_140\n\nLANGUAGE: promql\nCODE:\n```\navg(q) by (group_labels)\n```\n\n----------------------------------------\n\nTITLE: Starting VictoriaLogs Cluster Docker Compose Environment\nDESCRIPTION: Command to spin up a Docker Compose environment with VictoriaLogs cluster configuration. This setup includes vlinsert, vlstorage, vlselect, vmauth, Vector, VictoriaMetrics, Grafana, vmalert, and Alertmanager.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/deployment/docker/README.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nmake docker-vl-cluster-up\n```\n\n----------------------------------------\n\nTITLE: Including External Content in VictoriaMetrics Documentation\nDESCRIPTION: This Markdown snippet uses a shortcode to include content from an external README.md file into the documentation page. This allows for centralized content management and reuse across different parts of the documentation.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/data-ingestion/_index.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{{% content \"README.md\" %}}\n```\n\n----------------------------------------\n\nTITLE: Configuring Anomaly Detection Models in YAML\nDESCRIPTION: Specifies various anomaly detection models with their parameters and schedules. Uses model-specific settings such as thresholds, detection direction, and custom args for prediction.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/anomaly-detection/components/README.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# what model types and with what hyperparams to run on your data\n# https://docs.victoriametrics.com/anomaly-detection/components/models/\nmodels:\n  zscore:  # we can set up alias for model\n    class: 'zscore'  # model class\n    z_threshold: 3.5\n    provide_series: ['anomaly_score']  # what series to produce\n    queries: ['host_network_receive_errors']  # what queries to run particular model on\n    schedulers: ['periodic_1d']  # will be attached to 1-day schedule, fit every 10m and infer every 30s\n    min_dev_from_expected: 0.0  # turned off. if |y - yhat| < min_dev_from_expected, anomaly score will be 0\n    detection_direction: 'above_expected' # detect anomalies only when y > yhat, \"peaks\"\n  prophet: # we can set up alias for model\n    class: 'prophet'\n    provide_series: ['anomaly_score', 'yhat', 'yhat_lower', 'yhat_upper']\n    queries: ['cpu_seconds_total']\n    schedulers: ['periodic_1w']  # will be attached to 1-week schedule, fit every 1h and infer every 15m\n    min_dev_from_expected: 0.01  # if |y - yhat| < 0.01, anomaly score will be 0\n    detection_direction: 'above_expected'\n    args:  # model-specific arguments\n      interval_width: 0.98\n```\n\n----------------------------------------\n\nTITLE: Enabling Restore on Start for Cluster Restore (YAML)\nDESCRIPTION: First step in restoring one Kubernetes cluster ('source') into another ('destination'): ensure the destination cluster's `VMStorage` configuration includes this YAML snippet to enable restore on start. This is crucial for the restore process when pods restart.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmbackupmanager.md#2025-04-22_snippet_27\n\nLANGUAGE: yaml\nCODE:\n```\n   vmbackup:\n     restore:\n       onStart:\n         enabled: \"true\"\n\n```\n\n----------------------------------------\n\nTITLE: Numeric Label Sort in PromQL\nDESCRIPTION: Sorts series in ascending order by labels using numeric sort (e.g., 1, 2, 15, 101).\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_161\n\nLANGUAGE: promql\nCODE:\n```\nsort_by_label_numeric(q, \"label1\", ... \"labelN\")\n```\n\n----------------------------------------\n\nTITLE: Calculating Rate with Explicit Interval (Grafana Style) in MetricsQL\nDESCRIPTION: Shows the equivalent Grafana query syntax for calculating rate, explicitly using the `$__interval` variable for the lookbehind window. This contrasts with MetricsQL's ability to infer this window automatically.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_2\n\nLANGUAGE: MetricsQL\nCODE:\n```\nrate(node_network_receive_bytes_total[$__interval])\n```\n\n----------------------------------------\n\nTITLE: Configuring YAML Front Matter for VictoriaMetrics Single-Node Documentation\nDESCRIPTION: This YAML snippet defines the configuration for a documentation page about the single-node version of VictoriaMetrics. It sets the menu structure, weight, title, and aliases for the page.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/Single-server-VictoriaMetrics.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nweight: 1\nmenu:\n  docs:\n    identifier: vm-single-version\n    parent: victoriametrics\n    weight: 1\ntitle: Single-node version\naliases:\n  - /Single-server-VictoriaMetrics.html\n  - /single-server-victoriametrics/index.html\n  - /single-server-victoriametrics/\n---\n```\n\n----------------------------------------\n\nTITLE: Query with Hash Pipe Example\nDESCRIPTION: Example of using hash pipe to split user_id fields into 4 buckets\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: LogsQL\nCODE:\n```\n_time:5m | hash(user_id) as h | math h%4 as bucket | stats by (bucket) count()\n```\n\n----------------------------------------\n\nTITLE: Starting VictoriaMetrics Cluster Docker Compose Environment\nDESCRIPTION: Command to spin up a Docker Compose environment with VictoriaMetrics cluster configuration. This setup includes vminsert, vmstorage, vmselect, vmauth, vmagent, Grafana, vmalert, and Alertmanager.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/deployment/docker/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmake docker-vm-cluster-up\n```\n\n----------------------------------------\n\nTITLE: Inner Function of a Subquery Example (MetricsQL)\nDESCRIPTION: Represents the inner part, `rate(http_requests_total[5m])`, of the subquery example `max_over_time(rate(http_requests_total[5m])[1h:30s])`. In the context of that specific subquery, this inner `rate` function is calculated with a step of `30s`.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_154\n\nLANGUAGE: MetricsQL\nCODE:\n```\nrate(http_requests_total[5m])\n```\n\n----------------------------------------\n\nTITLE: MetricsQL Duration Format Examples\nDESCRIPTION: Examples of duration formats supported in MetricsQL, including uppercase suffixes\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/changelog/CHANGELOG_2023.md#2025-04-22_snippet_26\n\nLANGUAGE: text\nCODE:\n```\n10S\n5MS\n1W\n```\n\n----------------------------------------\n\nTITLE: Setting Custom S3 Endpoint for MinIO (Shell)\nDESCRIPTION: This shell snippet demonstrates configuring a custom S3-compatible endpoint for MinIO in vmbackup by using the -customS3Endpoint flag. Prerequisites: MinIO or another S3 API-compatible storage running at the specified endpoint. This setting should be passed to the vmbackup/run command. The input is a shell command-line argument; the output is modified backup behavior for targeting a non-standard S3 endpoint.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmbackup.md#2025-04-22_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\n-customS3Endpoint=http://localhost:9000\\n\n```\n\n----------------------------------------\n\nTITLE: Installing OpenTelemetry Go modules with WithBatchTimeout in Go\nDESCRIPTION: Example code showing the correct usage of WithBatchTimeout with time.Second units. This was changed to ensure proper time unit specification.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-22_snippet_51\n\nLANGUAGE: Go\nCODE:\n```\nWithBatchTimeout(5 * time.Second)\n```\n\n----------------------------------------\n\nTITLE: Listing Azure Developer CLI Configuration via azd - Shell Script\nDESCRIPTION: This command lists all configuration settings for the Azure Developer CLI (azd). It is used to check which Azure account is currently authenticated. Requires azd to be installed and present in the system PATH. The output lists configuration in a readable format. No sensitive credentials are exposed by this command.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/Azure/azure-sdk-for-go/sdk/azidentity/TROUBLESHOOTING.md#2025-04-22_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nazd config list\n```\n\n----------------------------------------\n\nTITLE: Using Step Interval Multiples for Durations and Offsets in MetricsQL\nDESCRIPTION: Demonstrates the `[Ni]` syntax in MetricsQL, where `N` is a number and `i` represents the current query step (like Grafana's `$__interval`). This query calculates the rate over a range covering 10 steps, offset by 5 steps into the past.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_10\n\nLANGUAGE: MetricsQL\nCODE:\n```\nrate(metric[10i] offset 5i)\n```\n\n----------------------------------------\n\nTITLE: Benchmarking JSON Validation in Go\nDESCRIPTION: This code snippet presents benchmark results for JSON validation using the standard library and fastjson package in Go. It compares the performance of validation across different JSON file sizes.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/valyala/fastjson/README.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\n$ GOMAXPROCS=1 go test github.com/valyala/fastjson -bench='Validate$'\ngoos: linux\ngoarch: amd64\npkg: github.com/valyala/fastjson\nBenchmarkValidate/small/stdjson \t 2000000\t       955 ns/op\t 198.83 MB/s\t      72 B/op\t       2 allocs/op\nBenchmarkValidate/small/fastjson         \t 5000000\t       384 ns/op\t 493.60 MB/s\t       0 B/op\t       0 allocs/op\nBenchmarkValidate/medium/stdjson         \t  200000\t     10799 ns/op\t 215.66 MB/s\t     184 B/op\t       5 allocs/op\nBenchmarkValidate/medium/fastjson        \t  300000\t      3809 ns/op\t 611.30 MB/s\t       0 B/op\t       0 allocs/op\nBenchmarkValidate/large/stdjson          \t   10000\t    133064 ns/op\t 211.31 MB/s\t     184 B/op\t       5 allocs/op\nBenchmarkValidate/large/fastjson         \t   30000\t     45268 ns/op\t 621.14 MB/s\t       0 B/op\t       0 allocs/op\nBenchmarkValidate/canada/stdjson         \t     200\t   8470904 ns/op\t 265.74 MB/s\t     184 B/op\t       5 allocs/op\nBenchmarkValidate/canada/fastjson        \t     500\t   2973377 ns/op\t 757.07 MB/s\t       0 B/op\t       0 allocs/op\nBenchmarkValidate/citm/stdjson           \t     200\t   7273172 ns/op\t 237.48 MB/s\t     184 B/op\t       5 allocs/op\nBenchmarkValidate/citm/fastjson          \t    1000\t   1684430 ns/op\t1025.39 MB/s\t       0 B/op\t       0 allocs/op\nBenchmarkValidate/twitter/stdjson        \t     500\t   2849439 ns/op\t 221.63 MB/s\t     312 B/op\t       6 allocs/op\nBenchmarkValidate/twitter/fastjson       \t    2000\t   1036796 ns/op\t 609.10 MB/s\t       0 B/op\t       0 allocs/op\n```\n\n----------------------------------------\n\nTITLE: Adding External Label/URL Flags to vmalert-tool (Command-line)\nDESCRIPTION: Introduces `-external.label` and `-external.url` command-line flags to `vmalert-tool`. This aligns its configuration options with `vmalert` for consistency, especially relevant as `external_labels` in test files is being deprecated.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/changelog/CHANGELOG_2024.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n-external.label key=value\n-external.url http://external.alertmanager.url\n```\n\n----------------------------------------\n\nTITLE: Installing vmagent using Helm chart with custom configuration\nDESCRIPTION: Helm command to install vmagent with a predefined configuration file that sets up scraping for Kubernetes metrics and remote write to a VictoriaMetrics cluster.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/guides/k8s-monitoring-via-vm-cluster/README.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nhelm install vmagent vm/victoria-metrics-agent -f https://docs.victoriametrics.com/guides/examples/guide-vmcluster-vmagent-values.yaml\n```\n\n----------------------------------------\n\nTITLE: Configuring VictoriaLogs to Drop Specific Syslog Fields\nDESCRIPTION: Launches VictoriaLogs with TCP Syslog ingestion on port 514 and configures it to drop 'proc_id' and 'msg_id' fields from incoming logs. This setup allows for selective field ingestion.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/data-ingestion/syslog.md#2025-04-22_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\n./victoria-logs -syslog.listenAddr.tcp=:514 -syslog.ignoreFields.tcp='[\"prod_id\",\"msg_id\"]'\n```\n\n----------------------------------------\n\nTITLE: Configuring Data Reader for Anomaly Detection in YAML\nDESCRIPTION: Sets up the source from which data will be read for anomaly detection. Requires datasource URL, tenant ID, sampling period, and query definitions with expected values.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/anomaly-detection/components/README.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# where to read data from\n# https://docs.victoriametrics.com/anomaly-detection/components/reader/#vm-reader\nreader:\n  datasource_url: \"https://play.victoriametrics.com/\"\n  tenant_id: \"0:0\"\n  class: 'vm'\n  sampling_period: \"30s\"  # what data resolution to fetch from VictoriaMetrics' /query_range endpoint\n  latency_offset: '1ms'\n  query_from_last_seen_timestamp: False\n  queries:  # aliases to MetricsQL expressions\n    cpu_seconds_total:\n      expr: 'avg(rate(node_cpu_seconds_total[5m])) by (mode)'\n      # step: '30s'  # if not set, will be equal to sampling_period\n      data_range: [0, 'inf']  # expected value range, anomaly_score > 1 if y (real value) is outside\n    host_network_receive_errors:\n      expr: 'rate(node_network_receive_errs_total[3m]) / rate(node_network_receive_packets_total[3m])'\n      step: '15m'  # here we override per-query `sampling_period` to request way less data from VM TSDB\n      data_range: [0, 'inf']\n```\n\n----------------------------------------\n\nTITLE: Function Syntax: histogram_over_time\nDESCRIPTION: Function signature for histogram_over_time calculation over a time window\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_33\n\nLANGUAGE: promql\nCODE:\n```\nhistogram_over_time(series_selector[d])\n```\n\n----------------------------------------\n\nTITLE: Configuring VictoriaLogs to Use Local Timestamps for TCP Syslog\nDESCRIPTION: Starts VictoriaLogs with TCP Syslog ingestion on port 514 and configures it to use local timestamps instead of the ones in the Syslog messages. This is useful when ingested messages contain incorrect timestamps.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/data-ingestion/syslog.md#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n./victoria-logs -syslog.listenAddr.tcp=:514 -syslog.useLocalTimestamp.tcp\n```\n\n----------------------------------------\n\nTITLE: Quoted Word Search Alternative in LogsQL\nDESCRIPTION: A LogsQL query that demonstrates wrapping any word in quotes, even when not required. This example searches for 'error'.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_2\n\nLANGUAGE: logsql\nCODE:\n```\n\"error\"\n```\n\n----------------------------------------\n\nTITLE: Configuring File SD Check Interval\nDESCRIPTION: Command line flag for setting the interval to check for updates in file_sd_configs, matching Prometheus default behavior.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/changelog/CHANGELOG_2022.md#2025-04-22_snippet_29\n\nLANGUAGE: bash\nCODE:\n```\n-promscrape.fileSDCheckInterval\n```\n\n----------------------------------------\n\nTITLE: Introducing Semantic Conventions v1.16.0 Package in Go\nDESCRIPTION: Adds the `go.opentelemetry.io/otel/semconv/v1.16.0` package. This package contains semantic conventions based on the `v1.16.0` version of the OpenTelemetry specification.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-22_snippet_14\n\nLANGUAGE: Go\nCODE:\n```\ngo.opentelemetry.io/otel/semconv/v1.16.0\n```\n\n----------------------------------------\n\nTITLE: Running Spell Check Command for VictoriaMetrics Documentation\nDESCRIPTION: This command executes the spell check process for the VictoriaMetrics documentation. It requires Docker to build a 'spellcheck' image and run the spell checks.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/codespell/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nmake spellcheck\n```\n\n----------------------------------------\n\nTITLE: Getting Query Range Start Time in MetricsQL\nDESCRIPTION: A transform function that returns the Unix timestamp (in seconds) corresponding to the start of the query range. This value is equivalent to the `start` argument passed to the `/api/v1/query_range` endpoint. See also `end`, `time`, and `now`.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_132\n\nLANGUAGE: metricsql\nCODE:\n```\nstart()\n```\n\n----------------------------------------\n\nTITLE: Regenerating Protobuf Go Code with protoc and goimports - Shell Script\nDESCRIPTION: This shell snippet provides the commands to regenerate Go code from the 'error.proto' file using the 'protoc' compiler and the Go protobuf plugin. It requires a local copy of 'googleapis', with its path assigned to the 'GOOGLEAPIS' environment variable, along with 'protoc', the Go plugin, and 'goimports'. The first command invokes 'protoc' to generate Go code in the current directory, ensuring the module path is set, while the second command formats the generated code with 'goimports'. Both commands are meant to be executed from the directory containing 'error.proto'.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/googleapis/gax-go/v2/apierror/internal/proto/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nprotoc -I $GOOGLEAPIS -I. --go_out=. --go_opt=module=github.com/googleapis/gax-go/v2/apierror/internal/proto error.proto\ngoimports -w .\n```\n\n----------------------------------------\n\nTITLE: Field-Specific Exclusion in LogsQL\nDESCRIPTION: A LogsQL query that excludes logs based on values in a specific field (app), rather than searching in general message content.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_15\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m log.level:error -(app:buggy_app OR app:foobar)\n```\n\n----------------------------------------\n\nTITLE: Go Module Requirements\nDESCRIPTION: Dependency declarations for AWS SDK v2 and supporting packages with specific version constraints and go version requirements.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/modules.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n## explicit; go 1.21\ngithub.com/aws/aws-sdk-go-v2/aws\ngithub.com/aws/aws-sdk-go-v2/aws/arn\ngithub.com/aws/aws-sdk-go-v2/aws/defaults\ngithub.com/aws/aws-sdk-go-v2/aws/middleware\ngithub.com/aws/aws-sdk-go-v2/aws/protocol/query\ngithub.com/aws/aws-sdk-go-v2/aws/protocol/restjson\ngithub.com/aws/aws-sdk-go-v2/aws/protocol/xml\ngithub.com/aws/aws-sdk-go-v2/aws/ratelimit\ngithub.com/aws/aws-sdk-go-v2/aws/retry\ngithub.com/aws/aws-sdk-go-v2/aws/signer/internal/v4\ngithub.com/aws/aws-sdk-go-v2/aws/signer/v4\ngithub.com/aws/aws-sdk-go-v2/aws/transport/http\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Device Code Flow using azidentity in Go\nDESCRIPTION: This Go snippet illustrates the simpler device code authentication flow using `azidentity`. It creates a `DeviceCodeCredential` using `azidentity.NewDeviceCodeCredential`. This credential handles the user interaction (printing instructions to the console by default) and token acquisition automatically when passed to a new Azure SDK client constructor.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/Azure/azure-sdk-for-go/sdk/azidentity/MIGRATION.md#2025-04-22_snippet_11\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"github.com/Azure/azure-sdk-for-go/sdk/azidentity\"\n    \"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/resources/armsubscriptions\"\n)\n\ncred, err := azidentity.NewDeviceCodeCredential(nil)\nhandle(err)\n\nclient, err := armsubscriptions.NewSubscriptionsClient(cred, nil)\nhandle(err)\n```\n\n----------------------------------------\n\nTITLE: Configuring vmgateway for JWT Signature Verification\nDESCRIPTION: Enables JWT token signature verification in vmgateway using an OpenID Connect discovery endpoint. Fetches public keys automatically for verifying signatures.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/guides/grafana-vmgateway-openid-configuration/README.md#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n./bin/vmgateway \\\n    -licenseFile=./vm-license.key\n    -enable.auth=true \\\n    -clusterMode=true \\\n    -write.url=http://localhost:8480 \\\n    -read.url=http://localhost:8481\n    -auth.oidcDiscoveryEndpoints=http://localhost:3001/realms/master/.well-known/openid-configuration\n```\n\n----------------------------------------\n\nTITLE: Collecting CPU Profile from vmstorage\nDESCRIPTION: This Bash command captures the CPU profile of the vmstorage component of VictoriaMetrics. It uses curl to request and redirect profiling data into a local file. Ensure you replace '0.0.0.0' with the actual hostname as required.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/Cluster-VictoriaMetrics.md#2025-04-22_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\ncurl http://0.0.0.0:8482/debug/pprof/profile > cpu.pprof\n```\n\n----------------------------------------\n\nTITLE: Bash Script for Identifying Leaky Tests\nDESCRIPTION: A bash script to run individual tests and identify which ones are causing goroutine leaks when using TestMain.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/go.uber.org/goleak/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Create a test binary which will be used to run each test individually\n$ go test -c -o tests\n\n# Run each test individually, printing \".\" for successful tests, or the test name\n# for failing tests.\n$ for test in $(go test -list . | grep -E \"^(Test|Example)\"); do ./tests -test.run \"^$test\\$\" &>/dev/null && echo -n \".\" || echo -e \"\\n$test failed\"; done\n```\n\n----------------------------------------\n\nTITLE: Running vlogsgenerator with Default Output in Bash\nDESCRIPTION: Command to run vlogsgenerator and output generated logs to stdout.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlogsgenerator/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbin/vlogsgenerator\n```\n\n----------------------------------------\n\nTITLE: Executing VictoriaMetrics Backup Manager Help Command\nDESCRIPTION: Command to display all supported flags and options for vmbackupmanager\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmbackupmanager.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n./vmbackupmanager --help\n```\n\n----------------------------------------\n\nTITLE: Collecting Memory Profile in VictoriaLogs\nDESCRIPTION: Command to collect a memory profile from VictoriaLogs using curl. The profile is saved to a file named mem.pprof. Replace 0.0.0.0 with the actual hostname if needed.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/README.md#2025-04-22_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\ncurl http://0.0.0.0:9428/debug/pprof/heap > mem.pprof\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes Service Discovery in vmagent using YAML\nDESCRIPTION: This YAML snippet demonstrates how to configure vmagent's pod discovery to only observe pods in the namespace where vmagent itself runs. To use, place this under the scrape_configs section of your vmagent configuration file. 'job_name' identifies the scrape job, while 'kubernetes_sd_configs' specifies discovery roles and limits to the local namespace with 'own_namespace: true'. Input is a YAML config file, and the output is that vmagent restricts scraping to pods in its own namespace. Ensure vmagent runs with proper permissions in your Kubernetes cluster.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/changelog/CHANGELOG_2022.md#2025-04-22_snippet_30\n\nLANGUAGE: yaml\nCODE:\n```\n  scrape_configs:\n  - job_name: 'kubernetes-pods'\n    kubernetes_sd_configs:\n    - role: pod\n      namespaces:\n        own_namespace: true\n\n```\n\n----------------------------------------\n\nTITLE: Standard Deviation from Histogram Buckets in PromQL\nDESCRIPTION: The `histogram_stddev(buckets)` function computes the standard deviation across given `buckets`, ideal for evaluating data variability. It helps in understanding how much individual values deviate from the mean within time series datasets.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_82\n\nLANGUAGE: PromQL\nCODE:\n```\n`histogram_stddev(buckets)`\n```\n\n----------------------------------------\n\nTITLE: Using Week Range Filter in LogsQL\nDESCRIPTION: Example of using a week range filter to query logs between Monday and Friday UTC every week.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_26\n\nLANGUAGE: logsql\nCODE:\n```\n_time:week_range[Mon, Fri]\n```\n\n----------------------------------------\n\nTITLE: Counting Changes with changes Function - MetricsQL - Markdown\nDESCRIPTION: Exemplifies the use of changes to count the number of value transitions in time-series data over window d. Differs from Prometheus by including changes from the last sample before the window. Default output strips metric names; keep_metric_names modifier can retain them. PromQL-compatible.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_4\n\nLANGUAGE: Markdown\nCODE:\n```\n`changes(series_selector[d])`\n```\n\n----------------------------------------\n\nTITLE: Starting React Development Server\nDESCRIPTION: Runs the React application in development mode on port 3000 with hot reloading and error reporting.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Starting Docker Compose Environment\nDESCRIPTION: Command to start the Docker compose environment for FluentBit and VictoriaLogs integration\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/deployment/docker/victorialogs/fluentbit/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Configuring Prometheus Remote Write to VictoriaMetrics Cloud (YAML)\nDESCRIPTION: This YAML snippet shows the configuration block for Prometheus's `remote_write` feature to send scraped metrics to VictoriaMetrics Cloud. The `url` field should be set to the deployment's write API endpoint (`/api/v1/write`), and the `authorization.credentials` field should contain the corresponding access token.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics-cloud/get-started/quickstart.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nremote_write:\n  - url: https://<your_access_point>.cloud-test.victoriametrics.com/api/v1/write\n    authorization:\n      credentials: ********\n```\n\n----------------------------------------\n\nTITLE: Applying Hyperbolic Functions in MetricsQL\nDESCRIPTION: The sinh(), cosh(), tanh() functions apply hyperbolic operations to every point of every time series returned by the query. Metric names are stripped unless the keep_metric_names modifier is used.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_103\n\nLANGUAGE: metricsql\nCODE:\n```\nsinh(q)\n```\n\nLANGUAGE: metricsql\nCODE:\n```\ncosh(q)\n```\n\nLANGUAGE: metricsql\nCODE:\n```\ntanh(q)\n```\n\n----------------------------------------\n\nTITLE: Configuring VictoriaMetrics Command Line Options\nDESCRIPTION: Extensive list of command-line flags for configuring VictoriaMetrics server including settings for caching, authentication, data ingestion, HTTP servers, and various operational parameters. Each flag includes detailed description of its purpose and default values where applicable.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/README.md#2025-04-22_snippet_83\n\nLANGUAGE: shellhelp\nCODE:\n```\n  -bigMergeConcurrency int\n     Deprecated: this flag does nothing\n  -blockcache.missesBeforeCaching int\n     The number of cache misses before putting the block into cache. Higher values may reduce indexdb/dataBlocks cache size at the cost of higher CPU and disk read usage (default 2)\n  -cacheExpireDuration duration\n     Items are removed from in-memory caches after they aren't accessed for this duration. Lower values may reduce memory usage at the cost of higher CPU usage. See also -prevCacheRemovalPercent (default 30m0s)\n  -configAuthKey value\n     Authorization key for accessing /config page. It must be passed via authKey query arg. It overrides -httpAuth.*\n     Flag value can be read from the given file when using -configAuthKey=file:///abs/path/to/file or -configAuthKey=file://./relative/path/to/file . Flag value can be read from the given http/https url when using -configAuthKey=http://host/path or -configAuthKey=https://host/path\n  -csvTrimTimestamp duration\n     Trim timestamps when importing csv data to this duration. Minimum practical duration is 1ms. Higher duration (i.e. 1s) may be used for reducing disk space usage for timestamp data (default 1ms)\n  -datadog.maxInsertRequestSize size\n     The maximum size in bytes of a single DataDog POST request to /datadog/api/v2/series\n     Supports the following optional suffixes for size values: KB, MB, GB, TB, KiB, MiB, GiB, TiB (default 67108864)\n  -datadog.sanitizeMetricName\n     Sanitize metric names for the ingested DataDog data to comply with DataDog behaviour described at https://docs.datadoghq.com/metrics/custom_metrics/#naming-custom-metrics (default true)\n  -dedup.minScrapeInterval duration\n     Leave only the last sample in every time series per each discrete interval equal to -dedup.minScrapeInterval > 0. See also -streamAggr.dedupInterval and https://docs.victoriametrics.com/#deduplication\n  -deleteAuthKey value\n     authKey for metrics' deletion via /api/v1/admin/tsdb/delete_series and /tags/delSeries. It could be passed via authKey query arg.\n     Flag value can be read from the given file when using -deleteAuthKey=file:///abs/path/to/file or -deleteAuthKey=file://./relative/path/to/file . Flag value can be read from the given http/https url when using -deleteAuthKey=http://host/path or -deleteAuthKey=https://host/path\n  -denyQueriesOutsideRetention\n     Whether to deny queries outside the configured -retentionPeriod. When set, then /api/v1/query_range would return '503 Service Unavailable' error for queries with 'from' value outside -retentionPeriod. This may be useful when multiple data sources with distinct retentions are hidden behind query-tee\n  -denyQueryTracing\n     Whether to disable the ability to trace queries. See https://docs.victoriametrics.com/#query-tracing\n  -downsampling.period array\n     Comma-separated downsampling periods in the format 'offset:period'. For example, '30d:10m' instructs to leave a single sample per 10 minutes for samples older than 30 days. When setting multiple downsampling periods, it is necessary for the periods to be multiples of each other. See https://docs.victoriametrics.com/#downsampling for details. This flag is available only in VictoriaMetrics enterprise. See https://docs.victoriametrics.com/enterprise/\n     Supports an array of values separated by comma or specified via multiple flags.\n     Value can contain comma inside single-quoted or double-quoted string, {}, [] and () braces.\n  -dryRun\n     Whether to check config files without running VictoriaMetrics. The following config files are checked: -promscrape.config, -relabelConfig and -streamAggr.config. Unknown config entries aren't allowed in -promscrape.config by default. This can be changed with -promscrape.config.strictParse=false command-line flag\n  -enableTCP6\n     Whether to enable IPv6 for listening and dialing. By default, only IPv4 TCP and UDP are used\n  -envflag.enable\n     Whether to enable reading flags from environment variables in addition to the command line. Command line flag values have priority over values from environment vars. Flags are read only from the command line if this flag isn't set. See https://docs.victoriametrics.com/#environment-variables for more details\n  -envflag.prefix string\n     Prefix for environment variables if -envflag.enable is set\n  -eula\n     Deprecated, please use -license or -licenseFile flags instead. By specifying this flag, you confirm that you have an enterprise license and accept the ESA https://victoriametrics.com/legal/esa/ . This flag is available only in Enterprise binaries. See https://docs.victoriametrics.com/enterprise/\n  -filestream.disableFadvise\n     Whether to disable fadvise() syscall when reading large data files. The fadvise() syscall prevents from eviction of recently accessed data from OS page cache during background merges and backups. In some rare cases it is better to disable the syscall if it uses too much CPU\n  -finalMergeDelay duration\n     Deprecated: this flag does nothing\n  -flagsAuthKey value\n     Auth key for /flags endpoint. It must be passed via authKey query arg. It overrides -httpAuth.*\n     Flag value can be read from the given file when using -flagsAuthKey=file:///abs/path/to/file or -flagsAuthKey=file://./relative/path/to/file . Flag value can be read from the given http/https url when using -flagsAuthKey=http://host/path or -flagsAuthKey=https://host/path\n  -forceFlushAuthKey value\n     authKey, which must be passed in query string to /internal/force_flush pages\n     Flag value can be read from the given file when using -forceFlushAuthKey=file:///abs/path/to/file or -forceFlushAuthKey=file://./relative/path/to/file . Flag value can be read from the given http/https url when using -forceFlushAuthKey=http://host/path or -forceFlushAuthKey=https://host/path\n  -forceMergeAuthKey value\n     authKey, which must be passed in query string to /internal/force_merge pages\n     Flag value can be read from the given file when using -forceMergeAuthKey=file:///abs/path/to/file or -forceMergeAuthKey=file://./relative/path/to/file . Flag value can be read from the given http/https url when using -forceMergeAuthKey=http://host/path or -forceMergeAuthKey=https://host/path\n  -fs.disableMmap\n     Whether to use pread() instead of mmap() for reading data files. By default, mmap() is used for 64-bit arches and pread() is used for 32-bit arches, since they cannot read data files bigger than 2^32 bytes in memory. mmap() is usually faster for reading small data chunks than pread()\n  -graphite.sanitizeMetricName\n     Sanitize metric names for the ingested Graphite data. See https://docs.victoriametrics.com/#how-to-send-data-from-graphite-compatible-agents-such-as-statsd\n  -graphiteListenAddr string\n     TCP and UDP address to listen for Graphite plaintext data. Usually :2003 must be set. Doesn't work if empty. See also -graphiteListenAddr.useProxyProtocol\n  -graphiteListenAddr.useProxyProtocol\n     Whether to use proxy protocol for connections accepted at -graphiteListenAddr . See https://www.haproxy.org/download/1.8/doc/proxy-protocol.txt\n  -graphiteTrimTimestamp duration\n     Trim timestamps for Graphite data to this duration. Minimum practical duration is 1s. Higher duration (i.e. 1m) may be used for reducing disk space usage for timestamp data (default 1s)\n  -http.connTimeout duration\n     Incoming connections to -httpListenAddr are closed after the configured timeout. This may help evenly spreading load among a cluster of services behind TCP-level load balancer. Zero value disables closing of incoming connections (default 2m0s)\n  -http.disableResponseCompression\n     Disable compression of HTTP responses to save CPU resources. By default, compression is enabled to save network bandwidth\n  -http.header.csp string\n     Value for 'Content-Security-Policy' header, recommended: \"default-src 'self'\"\n  -http.header.frameOptions string\n     Value for 'X-Frame-Options' header\n  -http.header.hsts string\n     Value for 'Strict-Transport-Security' header, recommended: 'max-age=31536000; includeSubDomains'\n  -http.idleConnTimeout duration\n     Timeout for incoming idle http connections (default 1m0s)\n  -http.maxGracefulShutdownDuration duration\n     The maximum duration for a graceful shutdown of the HTTP server. A highly loaded server may require increased value for a graceful shutdown (default 7s)\n  -http.pathPrefix string\n     An optional prefix to add to all the paths handled by http server. For example, if '-http.pathPrefix=/foo/bar' is set, then all the http requests will be handled on '/foo/bar/*' paths. This may be useful for proxied requests. See https://www.robustperception.io/using-external-urls-and-proxies-with-prometheus\n  -http.shutdownDelay duration\n     Optional delay before http server shutdown. During this delay, the server returns non-OK responses from /health page, so load balancers can route new requests to other servers\n  -httpAuth.password value\n     Password for HTTP server's Basic Auth. The authentication is disabled if -httpAuth.username is empty\n     Flag value can be read from the given file when using -httpAuth.password=file:///abs/path/to/file or -httpAuth.password=file://./relative/path/to/file . Flag value can be read from the given http/https url when using -httpAuth.password=http://host/path or -httpAuth.password=https://host/path\n  -httpAuth.username string\n     Username for HTTP server's Basic Auth. The authentication is disabled if empty. See also -httpAuth.password\n  -httpListenAddr array\n     TCP addresses to listen for incoming http requests. See also -tls and -httpListenAddr.useProxyProtocol\n     Supports an array of values separated by comma or specified via multiple flags.\n     Value can contain comma inside single-quoted or double-quoted string, {}, [] and () braces.\n```\n\n----------------------------------------\n\nTITLE: Using group aggregate function in PromQL\nDESCRIPTION: Aggregate function that returns the value 1 for each group from the time series. Used to count the number of distinct combinations of label values.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_151\n\nLANGUAGE: promql\nCODE:\n```\ngroup(q) by (group_labels)\n```\n\n----------------------------------------\n\nTITLE: Setting Default Timezone in VictoriaMetrics\nDESCRIPTION: This Shell command initializes the VictoriaMetrics service with a default timezone setting for the user interface. The timezone is set using the --vmui.defaultTimezone flag. If unspecified or invalid, the user's browser local timezone is used instead. User-selected timezones will override this default.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/README.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n./victoria-metrics --vmui.defaultTimezone=\"America/New_York\"\n```\n\n----------------------------------------\n\nTITLE: Referencing Default vmalert Alert Rules File\nDESCRIPTION: Specifies the path to the default alert rules file for vmalert's own metrics within the VictoriaMetrics project structure. This file contains predefined alerting rules.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/changelog/CHANGELOG_2022.md#2025-04-22_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nalerts-vmalert.yml\n```\n\n----------------------------------------\n\nTITLE: Configuring Logging in Azure SDK for Go\nDESCRIPTION: The Go code snippet demonstrates how to configure logging for Azure SDK modules using azcore/log. It sets a listener to print log messages to stdout and filters for events related to azidentity authentication. This configuration allows developers to monitor the GetToken operations including successes and failures without exposing sensitive information.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/Azure/azure-sdk-for-go/sdk/azidentity/README.md#2025-04-22_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\nimport azlog \"github.com/Azure/azure-sdk-for-go/sdk/azcore/log\"\n\n// print log output to stdout\nazlog.SetListener(func(event azlog.Event, s string) {\n    fmt.Println(s)\n})\n\n// include only azidentity credential logs\nazlog.SetEvents(azidentity.EventAuthentication)\n```\n\n----------------------------------------\n\nTITLE: JSON Response for Grouped Hits Stats\nDESCRIPTION: This snippet demonstrates the JSON output format when hits stats are grouped by a field, showing separate results for different field values.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/querying/README.md#2025-04-22_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"hits\": [\n    {\n      \"fields\": {\n        \"level\": \"error\"\n      },\n      \"timestamps\": [\n        \"2024-01-01T00:00:00Z\",\n        \"2024-01-01T01:00:00Z\",\n        \"2024-01-01T02:00:00Z\"\n      ],\n      \"values\": [\n        25,\n        20,\n        15\n      ],\n      \"total\": 60\n    },\n    {\n      \"fields\": {\n        \"level\": \"info\"\n      },\n      \"timestamps\": [\n        \"2024-01-01T00:00:00Z\",\n        \"2024-01-01T01:00:00Z\",\n        \"2024-01-01T02:00:00Z\"\n      ],\n      \"values\": [\n        25625,\n        35043,\n        25230\n      ],\n      \"total\": 85898\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Implicit Query Conversion for Series Selectors in MetricsQL\nDESCRIPTION: Demonstrates how VictoriaMetrics automatically wraps series selectors in default_rollup function.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_157\n\nLANGUAGE: metricsql\nCODE:\n```\nfoo + bar\n```\n\n----------------------------------------\n\nTITLE: Series Configuration for vmalert-tool\nDESCRIPTION: YAML configuration for a series in vmalert-tool. Includes series name with labels and values with special equations for generating sample data.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmalert-tool.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nseries: <string>\n\nvalues: <string>\n```\n\n----------------------------------------\n\nTITLE: VictoriaMetrics Export Response\nDESCRIPTION: This JSON snippet demonstrates the expected response format when exporting data from VictoriaMetrics, including metric name, labels, values, and timestamps.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/guides/migrate-from-influx/README.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"metric\": {\n    \"__name__\": \"census_bees\",\n    \"location\": \"klamath\",\n    \"scientist\": \"anderson\"\n  },\n  \"values\": [\n    23\n  ],\n  \"timestamps\": [\n    1566079200000\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Release Tags for OpenTelemetry Go\nDESCRIPTION: This snippet shows how to add release tags for each module set using the add-tags make target. It requires specifying the module set and optionally the commit hash.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/go.opentelemetry.io/otel/RELEASING.md#2025-04-22_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nmake add-tags MODSET=<module set> COMMIT=<commit hash>\n```\n\n----------------------------------------\n\nTITLE: Grouping Hits Stats by Field in Bash\nDESCRIPTION: This command groups hits stats by the 'level' field in addition to the provided time step.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/querying/README.md#2025-04-22_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\ncurl http://localhost:9428/select/logsql/hits -d 'query=*' -d 'start=3h' -d 'step=1h' -d 'field=level'\n```\n\n----------------------------------------\n\nTITLE: Using Megabyte Suffixes in MetricsQL Constants (MetricsQL)\nDESCRIPTION: In MetricsQL, `M` and `Mi` suffixes can be used with numeric constants (e.g., `1M`, `1Mi`) to represent a multiplier of 1,000,000 (1e6). A bug affecting the parsing of these suffixes, introduced in v1.86.0, was fixed in v1.86.2, restoring the correct interpretation of these constants.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/changelog/CHANGELOG_2023.md#2025-04-22_snippet_22\n\nLANGUAGE: metricsql\nCODE:\n```\n1M\n```\n\nLANGUAGE: metricsql\nCODE:\n```\n1Mi\n```\n\n----------------------------------------\n\nTITLE: Using the WithFilesOnly Glob Option in Go\nDESCRIPTION: This function signature defines the `WithFilesOnly` option for `Glob`, `GlobWalk`, or `FilepathGlob`. When used, the globbing function will only return results that are considered 'files' (i.e., not directories or symlinks to directories). If combined with `WithNoFollow`, symlinks pointing to directories might be included as they won't be resolved.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/bmatcuk/doublestar/v4/README.md#2025-04-22_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nWithFilesOnly()\n```\n\n----------------------------------------\n\nTITLE: Handling Shared Configuration in Go\nDESCRIPTION: Illustrates how to handle shared configuration between multiple complex structs using a common config and distinct option interfaces.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#2025-04-22_snippet_9\n\nLANGUAGE: go\nCODE:\n```\n// config holds options for all animals.\ntype config struct {\n\tWeight      float64\n\tColor       string\n\tMaxAltitude float64\n}\n\n// DogOption apply Dog specific options.\ntype DogOption interface {\n\tapplyDog(config) config\n}\n\n// BirdOption apply Bird specific options.\ntype BirdOption interface {\n\tapplyBird(config) config\n}\n\n// Option apply options for all animals.\ntype Option interface {\n\tBirdOption\n\tDogOption\n}\n\ntype weightOption float64\n\nfunc (o weightOption) applyDog(c config) config {\n\tc.Weight = float64(o)\n\treturn c\n}\n\nfunc (o weightOption) applyBird(c config) config {\n\tc.Weight = float64(o)\n\treturn c\n}\n\nfunc WithWeight(w float64) Option { return weightOption(w) }\n\ntype furColorOption string\n\nfunc (o furColorOption) applyDog(c config) config {\n\tc.Color = string(o)\n\treturn c\n}\n\nfunc WithFurColor(c string) DogOption { return furColorOption(c) }\n\ntype maxAltitudeOption float64\n\nfunc (o maxAltitudeOption) applyBird(c config) config {\n\tc.MaxAltitude = float64(o)\n\treturn c\n}\n\nfunc WithMaxAltitude(a float64) BirdOption { return maxAltitudeOption(a) }\n\nfunc NewDog(name string, o ...DogOption) Dog    {…}\nfunc NewBird(name string, o ...BirdOption) Bird {…}\n```\n\n----------------------------------------\n\nTITLE: Configuring VictoriaLogs for Compressed Syslog Ingestion\nDESCRIPTION: Starts VictoriaLogs to accept gzip-compressed Syslog messages on TCP port 514. This configuration allows for efficient network usage by compressing log data.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/data-ingestion/syslog.md#2025-04-22_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\n./victoria-logs -syslog.listenAddr.tcp=:514 -syslog.compressMethod.tcp=gzip\n```\n\n----------------------------------------\n\nTITLE: Median Value Calculation in PromQL\nDESCRIPTION: Calculates median value over raw samples within a lookbehind window for time series. Usually applied to gauges.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/MetricsQL.md#2025-04-22_snippet_44\n\nLANGUAGE: promql\nCODE:\n```\nmedian_over_time(series_selector[d])\n```\n\n----------------------------------------\n\nTITLE: Compressed Elasticsearch Output Configuration\nDESCRIPTION: Configuration with HTTP compression enabled to reduce network bandwidth usage when sending logs across datacenters.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/data-ingestion/Logstash.md#2025-04-22_snippet_3\n\nLANGUAGE: logstash\nCODE:\n```\noutput {\n  elasticsearch {\n    hosts => [\"http://localhost:9428/insert/elasticsearch/\"]\n    parameters => {\n        \"_msg_field\" => \"message\"\n        \"_time_field\" => \"@timestamp\"\n        \"_stream_fields\" => \"host.hostname,process.name\"\n    }\n    http_compression => true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running vmalert-tool for Unit Testing\nDESCRIPTION: Command to run vmalert-tool with one or multiple test files using the --files flag. Supports file paths with hierarchical patterns, regexps, and HTTP URLs.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmalert-tool.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./vmalert-tool unittest --files /path/to/file --files http://<some-server-addr>/path/to/test.yaml\n```\n\n----------------------------------------\n\nTITLE: Rounding Down Values - PromQL - PromQL\nDESCRIPTION: The floor() function rounds every point in each time series down to the nearest lower integer. It takes any numeric PromQL-compatible time series as input. No external dependencies required. This function is also supported in PromQL. See ceil() and round() for related rounding operations.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_100\n\nLANGUAGE: PromQL\nCODE:\n```\n`floor(q)`\n```\n\n----------------------------------------\n\nTITLE: Calculating Sine using sin() in MetricsQL\nDESCRIPTION: The `sin(q)` transform function computes the sine of each data point `v` in every time series returned by `q`. Metric names are removed by default; use `keep_metric_names` to retain them. This function is specific to MetricsQL.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_122\n\nLANGUAGE: MetricsQL\nCODE:\n```\nsin(q)\n```\n\n----------------------------------------\n\nTITLE: Using Implicit Second Units for Durations in MetricsQL\nDESCRIPTION: Demonstrates that duration suffixes (like `m` for minutes, `h` for hours) are optional in MetricsQL; if omitted, the value is treated as seconds. `rate(m[300] offset 1800)` is equivalent to `rate(m[5m]) offset 30m`.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_13\n\nLANGUAGE: MetricsQL\nCODE:\n```\nrate(m[300] offset 1800)\n```\n\nLANGUAGE: MetricsQL\nCODE:\n```\nrate(m[5m]) offset 30m\n```\n\n----------------------------------------\n\nTITLE: Retrieving Grafana Admin Password and Port Forwarding\nDESCRIPTION: Retrieves the Grafana admin password from Kubernetes secrets and sets up port forwarding to access Grafana on localhost:3000.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/guides/k8s-monitoring-via-vm-cluster/README.md#2025-04-22_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get secret --namespace default my-grafana -o jsonpath=\"{.data.admin-password}\" | base64 --decode ; echo\n\nexport POD_NAME=$(kubectl get pods --namespace default -l \"app.kubernetes.io/name=grafana,app.kubernetes.io/instance=my-grafana\" -o jsonpath=\"{.items[0].metadata.name}\")\n\nkubectl --namespace default port-forward $POD_NAME 3000\n```\n\n----------------------------------------\n\nTITLE: Defining a Single Backend URL in vmauth (YAML)\nDESCRIPTION: This YAML configuration demonstrates the basic usage of `url_prefix` for an `unauthorized_user`. It specifies a single backend URL, causing vmauth to proxy all requests for this user directly to `http://vminsert:8480/insert/0/prometheus/` without any load balancing.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmauth.md#2025-04-22_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\nunauthorized_user:\n  url_prefix: 'http://vminsert:8480/insert/0/prometheus/`\n```\n\n----------------------------------------\n\nTITLE: Basic Glog Usage Examples\nDESCRIPTION: Demonstrates basic logging patterns using glog including simple logging and conditional verbose logging based on log levels.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/k8s.io/klog/v2/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nglog.Info(\"Prepare to repel boarders\")\n\nglog.Fatalf(\"Initialization failed: %s\", err)\n\nif glog.V(2) {\n    glog.Info(\"Starting transaction...\")\n}\n\nglog.V(2).Infoln(\"Processed\", nItems, \"elements\")\n```\n\n----------------------------------------\n\nTITLE: Accessing the ErrBadPattern Error Variable in Go\nDESCRIPTION: This snippet shows how to reference the `ErrBadPattern` error variable from the `doublestar` package. This error is returned by various functions like `Match` and `Glob` to indicate a malformed pattern. While currently equivalent to `path.ErrBadPattern`, users should reference `doublestar.ErrBadPattern` for portability.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/bmatcuk/doublestar/v4/README.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ndoublestar.ErrBadPattern\n```\n\n----------------------------------------\n\nTITLE: Bug Fix Changelog Entry\nDESCRIPTION: Example changelog entry showing a bug fix with version and date\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/aws/aws-sdk-go-v2/service/internal/presigned-url/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n# v1.11.5 (2024-03-07)\n\n* **Bug Fix**: Remove dependency on go-cmp.\n* **Dependency Update**: Updated to the latest SDK module versions\n```\n\n----------------------------------------\n\nTITLE: Example URL Pattern for vmalert External Alert Source\nDESCRIPTION: Configuration example showing how to set the external alert source URL pattern for vmalert using the command-line flag\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/changelog/CHANGELOG_2022.md#2025-04-22_snippet_18\n\nLANGUAGE: plaintext\nCODE:\n```\n-external.alert.source=vmalert/api/v1/alert?group_id={{.GroupID}}&alert_id={{.AlertID}}\n```\n\n----------------------------------------\n\nTITLE: Setting InfluxDB Label Override Flag\nDESCRIPTION: Command line flag for customizing the 'db' label name when importing data via InfluxDB line protocol.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/changelog/CHANGELOG_2022.md#2025-04-22_snippet_28\n\nLANGUAGE: bash\nCODE:\n```\n-influxDBLabel\n```\n\n----------------------------------------\n\nTITLE: Release Update - Smithy-Go v1.22.3\nDESCRIPTION: Latest SDK module version updates including HTTP metrics data race fixes and replacement of deprecated ioutil package.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/aws/smithy-go/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ngithub.com/aws/smithy-go@v1.22.3\n```\n\n----------------------------------------\n\nTITLE: Backtesting Anomaly Detection Configuration\nDESCRIPTION: This YAML snippet configures the backtesting of anomaly detection using the BacktestingScheduler component in VictoriaMetrics. The configuration includes parameters for specifying the historical period and model fit behavior. Essential fields include 'from_iso', 'to_iso', and 'fit_window', which define the duration and frequency of backtesting intervals.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/anomaly-detection/FAQ.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nschedulers:\\n  scheduler_alias:\\n    class: 'backtesting' # or \\\"scheduler.backtesting.BacktestingScheduler\\\" until v1.13.0\\n    # define historical period to backtest on\\n    # should be bigger than at least (fit_window + fit_every) time range\\n    from_iso: '2024-01-01T00:00:00Z'\\n    to_iso: '2024-01-15T00:00:00Z'\\n    # copy these from your PeriodicScheduler args\\n    fit_window: 'P14D'\\n    fit_every: 'PT1H'\\n    # number of parallel jobs to run. Default is 1, each job is a separate OneOffScheduler fit/inference run.\\n    n_jobs: 1\\n\\nmodels:\\n  model_alias1:\\n    # ...\\n    schedulers: ['scheduler_alias']  # if omitted, all the defined schedulers will be attached\\n    queries: ['query_alias1']  # if omitted, all the defined queries will be attached\\n    # https://docs.victoriametrics.com/anomaly-detection/components/models/#provide-series\\n    provide_series: ['anomaly_score']  \\n  # ... other models\\n\\nreader:\\n  datasource_url: 'some_url_to_read_data_from'\\n  queries:\\n    query_alias1: 'some_metricsql_query'\\n  sampling_frequency: '1m'  # change to whatever you need in data granularity\\n  # other params if needed\\n  # https://docs.victoriametrics.com/anomaly-detection/components/reader/#vm-reader\\n\\nwriter:\\n  datasource_url: 'some_url_to_write_produced_data_to'\\n  # other params if needed\\n  # https://docs.victoriametrics.com/anomaly-detection/components/writer/#vm-writer\\n\\n# optional monitoring section if needed\\n# https://docs.victoriametrics.com/anomaly-detection/components/monitoring/\n```\n\n----------------------------------------\n\nTITLE: Adding/Updating Go Dependencies using go get\nDESCRIPTION: Demonstrates using the `go get` command within a Bash shell to add or update Go module dependencies for the project. The first command fetches the latest tagged release of a package, while the second command fetches a specific version (`vX.Y.Z`).\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/prometheus/procfs/CONTRIBUTING.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Pick the latest tagged release.\ngo get example.com/some/module/pkg\n\n# Pick a specific version.\ngo get example.com/some/module/pkg@vX.Y.Z\n```\n\n----------------------------------------\n\nTITLE: Verifying vmagent pod status\nDESCRIPTION: Shell command to check if the vmagent pod is running correctly by listing all pods and filtering for vmagent in the output.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/guides/k8s-monitoring-via-vm-cluster/README.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get pods | grep vmagent\n```\n\n----------------------------------------\n\nTITLE: Keeping Specific Labels in MetricsQL\nDESCRIPTION: A label manipulation function that removes all labels except for those specified (`label1` to `labelN`) from every time series returned by the query `q`. Implicitly applies `default_rollup()` if `q` is a series selector.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_147\n\nLANGUAGE: metricsql\nCODE:\n```\nlabel_keep(q, \"label1\", ..., \"labelN\")\n```\n\n----------------------------------------\n\nTITLE: Ingesting JSON Log Entry with Multiple Message Fields in VictoriaLogs\nDESCRIPTION: Example of ingesting a JSON log entry with multiple message field candidates into VictoriaLogs. The '_msg' field is set based on the '_msg_field' parameter.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/FAQ.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"message\": \"foo bar in message\",\n  \"body\": \"foo bar in body\"\n}\n```\n\n----------------------------------------\n\nTITLE: AWS S3 SDK Version History Markdown\nDESCRIPTION: Release notes documenting changes, features, bug fixes and dependency updates across multiple SDK versions.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/aws/aws-sdk-go-v2/service/s3/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# v1.47.5 (2023-12-08)\n\n* **Bug Fix**: Add non-vhostable buckets to request path when using legacy V1 endpoint resolver.\n* **Bug Fix**: Improve uniqueness of default S3Express sesssion credentials cache keying to prevent collision in multi-credential scenarios.\n* **Bug Fix**: Reinstate presence of default Retryer in functional options, but still respect max attempts set therein.\n\n# v1.47.4 (2023-12-07)\n\n* **Dependency Update**: Updated to the latest SDK module versions\n```\n\n----------------------------------------\n\nTITLE: Running React Test Suite\nDESCRIPTION: Launches the test runner in interactive watch mode for running application tests.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm test\n```\n\n----------------------------------------\n\nTITLE: vmagent configuration for Kubernetes metrics collection\nDESCRIPTION: YAML configuration for vmagent that defines remote write to vminsert and sets up scrape jobs for various Kubernetes resources including API servers, nodes, cAdvisor, service endpoints, and pods. Includes relabeling rules for proper metric identification.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/guides/k8s-monitoring-via-vm-cluster/README.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nremoteWrite:\n  - url: http://vmcluster-victoria-metrics-cluster-vminsert.default.svc.cluster.local:8480/insert/0/prometheus/\n\nconfig:\n  global:\n    scrape_interval: 10s\n\n  scrape_configs:\n    - job_name: vmagent\n      static_configs:\n        - targets: [\"localhost:8429\"]\n    - job_name: \"kubernetes-apiservers\"\n      kubernetes_sd_configs:\n        - role: endpoints\n      scheme: https\n      tls_config:\n        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt\n        insecure_skip_verify: true\n      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token\n      relabel_configs:\n        - source_labels:\n            [\n              __meta_kubernetes_namespace,\n              __meta_kubernetes_service_name,\n              __meta_kubernetes_endpoint_port_name,\n            ]\n          action: keep\n          regex: default;kubernetes;https\n    - job_name: \"kubernetes-nodes\"\n      scheme: https\n      tls_config:\n        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt\n        insecure_skip_verify: true\n      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token\n      kubernetes_sd_configs:\n        - role: node\n      relabel_configs:\n        - action: labelmap\n          regex: __meta_kubernetes_node_label_(.+)\n        - target_label: __address__\n          replacement: kubernetes.default.svc:443\n        - source_labels: [__meta_kubernetes_node_name]\n          regex: (.+)\n          target_label: __metrics_path__\n          replacement: /api/v1/nodes/$1/proxy/metrics\n    - job_name: \"kubernetes-nodes-cadvisor\"\n      scheme: https\n      tls_config:\n        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt\n        insecure_skip_verify: true\n      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token\n      kubernetes_sd_configs:\n        - role: node\n      relabel_configs:\n        - action: labelmap\n          regex: __meta_kubernetes_node_label_(.+)\n        - target_label: __address__\n          replacement: kubernetes.default.svc:443\n        - source_labels: [__meta_kubernetes_node_name]\n          regex: (.+)\n          target_label: __metrics_path__\n          replacement: /api/v1/nodes/$1/proxy/metrics/cadvisor\n      metric_relabel_configs:\n        - action: replace\n          source_labels: [pod]\n          regex: '(.+)'\n          target_label: pod_name\n          replacement: '${1}'\n        - action: replace\n          source_labels: [container]\n          regex: '(.+)'\n          target_label: container_name\n          replacement: '${1}'\n        - action: replace\n          target_label: name\n          replacement: k8s_stub\n        - action: replace\n          source_labels: [id]\n          regex: '^/system\\.slice/(.+)\\.service$'\n          target_label: systemd_service_name\n          replacement: '${1}'\n    - job_name: \"kubernetes-service-endpoints\"\n      kubernetes_sd_configs:\n        - role: endpoints\n      relabel_configs:\n        - action: drop\n          source_labels: [__meta_kubernetes_pod_container_init]\n          regex: true\n        - action: keep_if_equal\n          source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_port, __meta_kubernetes_pod_container_port_number]\n        - source_labels:\n            [__meta_kubernetes_service_annotation_prometheus_io_scrape]\n          action: keep\n          regex: true\n        - source_labels:\n            [__meta_kubernetes_service_annotation_prometheus_io_scheme]\n          action: replace\n          target_label: __scheme__\n          regex: (https?)\n        - source_labels:\n            [__meta_kubernetes_service_annotation_prometheus_io_path]\n          action: replace\n          target_label: __metrics_path__\n          regex: (.+)\n        - source_labels:\n            [\n              __address__,\n              __meta_kubernetes_service_annotation_prometheus_io_port,\n            ]\n          action: replace\n          target_label: __address__\n          regex: ([^:]+)(?::\\d+)?;(\\d+)\n          replacement: $1:$2\n        - action: labelmap\n          regex: __meta_kubernetes_service_label_(.+)\n        - source_labels: [__meta_kubernetes_namespace]\n          action: replace\n          target_label: kubernetes_namespace\n        - source_labels: [__meta_kubernetes_service_name]\n          action: replace\n          target_label: kubernetes_name\n        - source_labels: [__meta_kubernetes_pod_node_name]\n          action: replace\n          target_label: kubernetes_node\n    - job_name: \"kubernetes-service-endpoints-slow\"\n      scrape_interval: 5m\n      scrape_timeout: 30s\n      kubernetes_sd_configs:\n        - role: endpoints\n      relabel_configs:\n        - action: drop\n          source_labels: [__meta_kubernetes_pod_container_init]\n          regex: true\n        - action: keep_if_equal\n          source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_port, __meta_kubernetes_pod_container_port_number]\n        - source_labels:\n            [__meta_kubernetes_service_annotation_prometheus_io_scrape_slow]\n          action: keep\n          regex: true\n        - source_labels:\n            [__meta_kubernetes_service_annotation_prometheus_io_scheme]\n          action: replace\n          target_label: __scheme__\n          regex: (https?)\n        - source_labels:\n            [__meta_kubernetes_service_annotation_prometheus_io_path]\n          action: replace\n          target_label: __metrics_path__\n          regex: (.+)\n        - source_labels:\n            [\n              __address__,\n              __meta_kubernetes_service_annotation_prometheus_io_port,\n            ]\n          action: replace\n          target_label: __address__\n          regex: ([^:]+)(?::\\d+)?;(\\d+)\n          replacement: $1:$2\n        - action: labelmap\n          regex: __meta_kubernetes_service_label_(.+)\n        - source_labels: [__meta_kubernetes_namespace]\n          action: replace\n          target_label: kubernetes_namespace\n        - source_labels: [__meta_kubernetes_service_name]\n          action: replace\n          target_label: kubernetes_name\n        - source_labels: [__meta_kubernetes_pod_node_name]\n          action: replace\n          target_label: kubernetes_node\n    - job_name: \"kubernetes-services\"\n      metrics_path: /probe\n      params:\n        module: [http_2xx]\n      kubernetes_sd_configs:\n        - role: service\n      relabel_configs:\n        - source_labels:\n            [__meta_kubernetes_service_annotation_prometheus_io_probe]\n          action: keep\n          regex: true\n        - source_labels: [__address__]\n          target_label: __param_target\n        - target_label: __address__\n          replacement: blackbox\n        - source_labels: [__param_target]\n          target_label: instance\n        - action: labelmap\n          regex: __meta_kubernetes_service_label_(.+)\n        - source_labels: [__meta_kubernetes_namespace]\n          target_label: kubernetes_namespace\n        - source_labels: [__meta_kubernetes_service_name]\n          target_label: kubernetes_name\n    - job_name: \"kubernetes-pods\"\n      kubernetes_sd_configs:\n        - role: pod\n      relabel_configs:\n        - action: drop\n          source_labels: [__meta_kubernetes_pod_container_init]\n          regex: true\n        - action: keep_if_equal\n          source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_port, __meta_kubernetes_pod_container_port_number]\n        - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]\n          action: keep\n          regex: true\n        - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]\n          action: replace\n          target_label: __metrics_path__\n          regex: (.+)\n        - source_labels:\n            [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]\n          action: replace\n          regex: ([^:]+)(?::\\d+)?;(\\d+)\n          replacement: $1:$2\n          target_label: __address__\n        - action: labelmap\n          regex: __meta_kubernetes_pod_label_(.+)\n        - source_labels: [__meta_kubernetes_namespace]\n          action: replace\n          target_label: kubernetes_namespace\n        - source_labels: [__meta_kubernetes_pod_name]\n          action: replace\n          target_label: kubernetes_pod_name\n```\n\n----------------------------------------\n\nTITLE: Querying Log Count from Individual vlstorage Node\nDESCRIPTION: Command to query the number of logs stored in a specific vlstorage node of the VictoriaLogs cluster.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/cluster.md#2025-04-22_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\ncurl http://localhost:9491/select/logsql/query -d 'query=* | count()'\n```\n\n----------------------------------------\n\nTITLE: Adding and Updating Helm Repositories - Helm CLI - Shell\nDESCRIPTION: This snippet adds required Helm repositories (grafana, prometheus-community, vm) and updates Helm's repository cache. It prepares your Helm setup to access and deploy relevant charts. Prerequisites include having the Helm CLI installed and network access to the repositories. There are no parameters aside from the repository names and URLs; the output updates your local chart catalog.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics-cloud/how-to-monitor-k8s.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nhelm repo add grafana https://grafana.github.io/helm-charts\nhelm repo add prometheus-community https://prometheus-community.github.io/helm-charts\nhelm repo add vm https://victoriametrics.github.io/helm-charts\nhelm repo update\n\n```\n\n----------------------------------------\n\nTITLE: Telegraf Configuration for Writing Metrics to Kafka in InfluxDB Format\nDESCRIPTION: YAML configuration for Telegraf to send metrics to a Kafka topic in InfluxDB format, which can then be consumed by vmagent. This example sends data to a broker on localhost port 9092.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmagent.md#2025-04-22_snippet_57\n\nLANGUAGE: yaml\nCODE:\n```\n[[outputs.kafka]]\nbrokers = [\"localhost:9092\"]\ntopic = \"influx\"\ndata_format = \"influx\"\n```\n\n----------------------------------------\n\nTITLE: Example Exported Metric (OpenTSDB put) - VictoriaMetrics - JSON\nDESCRIPTION: This output shows the JSON response format for a query retrieving a single metric with two tags from the VictoriaMetrics database. The 'metric' object contains the metric name and tags, while 'values' and 'timestamps' arrays hold the corresponding data points. The response is compatible with automated consumption for further processing or analysis.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/README.md#2025-04-22_snippet_27\n\nLANGUAGE: json\nCODE:\n```\n{\"metric\":{\"__name__\":\"foo.bar.baz\",\"tag1\":\"value1\",\"tag2\":\"value2\"},\"values\":[123],\"timestamps\":[1560277292000]}\n```\n\n----------------------------------------\n\nTITLE: Calculating Share of Samples Less Than/Equal To Threshold in MetricsQL\nDESCRIPTION: Calculates the share (in the range `[0...1]`) of raw samples within a lookbehind window `d` that are smaller than or equal to the specified threshold `le`. This calculation is performed independently for each time series. Metric names are stripped unless `keep_metric_names` is used. Useful for SLI/SLO calculations, often applied to gauges.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_63\n\nLANGUAGE: metricsql\nCODE:\n```\nshare_le_over_time(series_selector[d], le)\n```\n\n----------------------------------------\n\nTITLE: Example JSON Output for VictoriaMetrics Series Check\nDESCRIPTION: Illustrates the typical JSON response structure from the `/api/v1/series` endpoint query. It includes a `status`, `isPartial` flag, and a `data` array containing objects, each representing a time series with its labels (`__name__`, `job`, `instance`).\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/guides/guide-delete-or-replace-metrics/README.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": \"success\",\n  \"isPartial\": false,\n  \"data\": [\n    {\n      \"__name__\": \"process_cpu_cores_available\",\n      \"job\": \"vminsert\",\n      \"instance\": \"vminsert:8480\"\n    },\n    {\n      \"__name__\": \"process_cpu_cores_available\",\n      \"job\": \"vmselect\",\n      \"instance\": \"vmselect:8481\"\n    },\n    {\n      \"__name__\": \"process_cpu_cores_available\",\n      \"job\": \"vmstorage\",\n      \"instance\": \"vmstorage:8482\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Isolation Forest in YAML\nDESCRIPTION: This YAML configuration snippet sets up an Isolation Forest Model for anomaly detection using the vmanomaly framework. Key parameters include class definition, contamination level, seasonal features, and model arguments. Dependencies include the scikit-learn library and configuration should conform to the supported parameters and formatting in VictoriaMetrics.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/anomaly-detection/components/models.md#2025-04-22_snippet_24\n\nLANGUAGE: yaml\nCODE:\n```\nmodels:\n  your_desired_alias_for_a_model:\n    # To use univariate model, substitute class argument with \"model.isolation_forest.IsolationForestModel\".\n    class: \"isolation_forest_multivariate\" # or 'model.isolation_forest.IsolationForestMultivariateModel' until v1.13.0\n    contamination: \"0.01\"\n    provide_series: ['anomaly_score']\n    seasonal_features: ['dow', 'hod']\n    args:\n      n_estimators: 100\n      # i.e. to assure reproducibility of produced results each time model is fit on the same input\n      random_state: 42\n    # Common arguments for built-in model, if not set, default to\n    # See https://docs.victoriametrics.com/anomaly-detection/components/models/#common-args\n    #\n    # provide_series: ['anomaly_score', 'yhat', 'yhat_lower', 'yhat_upper']\n    # schedulers: [all scheduler aliases defined in `scheduler` section]\n    # queries: [all query aliases defined in `reader.queries` section]\n    # anomaly_score_outside_data_range: 1.01  # auto anomaly score (1.01) if `y` (real value) is outside of data_range, if set\n```\n\n----------------------------------------\n\nTITLE: Radians to Degrees Conversion\nDESCRIPTION: Converts radians to degrees for every point in time series.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_87\n\nLANGUAGE: promql\nCODE:\n```\ndeg(q)\n```\n\n----------------------------------------\n\nTITLE: Using timestamp_with_name Function in PromQL\nDESCRIPTION: Example of using the new timestamp_with_name function in a PromQL query that matches multiple time series names.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/changelog/CHANGELOG_2021.md#2025-04-22_snippet_2\n\nLANGUAGE: promql\nCODE:\n```\ntimestamp_with_name({foo=\"bar\"}[1h])\n```\n\n----------------------------------------\n\nTITLE: Multi-Tenant Configuration\nDESCRIPTION: Configuration for storing logs in a specific tenant using AccountID and ProjectID headers.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/data-ingestion/Filebeat.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\noutput.elasticsearch:\n  hosts: [\"http://localhost:9428/insert/elasticsearch/\"]\n  headers:\n    AccountID: 12\n    ProjectID: 34\n  parameters:\n    _msg_field: \"message\"\n    _time_field: \"@timestamp\"\n    _stream_fields: \"host.name,log.file.path\"\n```\n\n----------------------------------------\n\nTITLE: Telegraf Configuration with TLS Skip Verify\nDESCRIPTION: Telegraf output configuration that skips TLS certificate verification. Note: This is not recommended for production use as it reduces security.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/data-ingestion/Telegraf.md#2025-04-22_snippet_5\n\nLANGUAGE: toml\nCODE:\n```\n[[outputs.influxdb]]\n  urls = [\"$victoriametrics_url\"]\n  username = \"$victoriametrics_user\"\n  password = \"$victoriametrics_password\"\n  database = \"victoriametrics\"\n  skip_database_creation = true\n  exclude_retention_policy_tag = true\n  content_encoding = \"gzip\"\n  insecure_skip_verify = true\n```\n\n----------------------------------------\n\nTITLE: Setting Query Timeout in VictoriaLogs\nDESCRIPTION: This example shows how to set a custom timeout for query execution using the 'timeout' query parameter. It limits the query execution time to 4.2 seconds.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/querying/README.md#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncurl http://localhost:9428/select/logsql/query -d 'query=error' -d 'timeout=4.2s'\n```\n\n----------------------------------------\n\nTITLE: Configuring VictoriaLogs for Multitenancy with Syslog\nDESCRIPTION: Launches VictoriaLogs with TCP Syslog ingestion on port 514 and configures it to store logs in a specific tenant (AccountID=12, ProjectID=34). This setup is useful for multi-tenant environments.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/data-ingestion/syslog.md#2025-04-22_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\n./victoria-logs -syslog.listenAddr.tcp=:514 -syslog.tenantID.tcp=12:34\n```\n\n----------------------------------------\n\nTITLE: Creating vmstorage Linux Service Configuration\nDESCRIPTION: Systemd service configuration for vmstorage component with data retention period of 90 days and specified storage path.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/Quick-Start.md#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nsudo bash -c 'cat <<END >/etc/systemd/system/vmstorage.service\n[Unit]\nDescription=VictoriaMetrics vmstorage service\nAfter=network.target\n\n[Service]\nType=simple\nUser=victoriametrics\nGroup=victoriametrics\nRestart=always\nExecStart=/usr/local/bin/vmstorage-prod -retentionPeriod=90d -storageDataPath=/var/lib/vmstorage\n\nPrivateTmp=yes\nNoNewPrivileges=yes\nProtectSystem=full\n\n[Install]\nWantedBy=multi-user.target\nEND'\n```\n\n----------------------------------------\n\nTITLE: Configuring Consul Catalog Service Discovery (consul_sd_configs) in YAML\nDESCRIPTION: Provides a YAML configuration example for `consul_sd_configs` in VictoriaMetrics' scrape_configs. It demonstrates how to specify the Consul server address (defaulting to localhost:8500) and includes commented-out examples for various optional options like authentication token, datacenter, namespace, partition, connection scheme, service filtering (by name, tags, node metadata, or advanced filter), tag separator, staleness allowance, and additional HTTP client settings. This configuration uses the Consul Catalog API for target discovery.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/sd_configs.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nscrape_configs:\n- job_name: consul\n  consul_sd_configs:\n\n    # server is an optional Consul server to connect to. By default, localhost:8500 is used\n    #\n  - server: \"localhost:8500\"\n\n    # token is an optional Consul API token.\n    # If the token isn't specified, then it is read from a file pointed by CONSUL_HTTP_TOKEN_FILE\n    # environment var or from the CONSUL_HTTP_TOKEN environment var.\n    #\n    # token: \"...\"\n\n    # datacenter is an optional Consul API datacenter.\n    # If the datacenter isn't specified, then it is read from Consul server.\n    # See https://www.consul.io/api-docs/agent#read-configuration\n    #\n    # datacenter: \"...\"\n\n    # namespace is an optional Consul namespace.\n    # See https://developer.hashicorp.com/consul/docs/enterprise/namespaces\n    # If the namespace isn't specified, then it is read from CONSUL_NAMESPACE environment var.\n    #\n    # namespace: \"...\"\n\n    # partition is an optional Consul partition.\n    # See https://developer.hashicorp.com/consul/docs/enterprise/admin-partitions\n    # If partition isn't specified, then the default partition is used.\n    #\n    # partition: \"...\"\n\n    # scheme is an optional scheme (http or https) to use for connecting to Consul server.\n    # By default, http scheme is used.\n    #\n    # scheme: \"...\"\n\n    # services is an optional list of services for which targets are retrieved.\n    # If omitted, all services are scraped.\n    # See https://www.consul.io/api-docs/catalog#list-nodes-for-service .\n    #\n    # services: [\"...\", \"...\"]\n\n    # tags is an optional list of tags used to filter nodes for a given service.\n    # Services must contain all tags in the list.\n    # Deprecated: use filter instead with ServiceTags selector.\n    #\n    # tags: [\"...\", \"...\"]\n\n    # node_meta is an optional node metadata key/value pairs to filter nodes for a given service.\n    # Deprecated: use filter instead with NodeMeta selector.\n    #\n    # node_meta:\n    #   \"...\": \"...\"\n\n    # tag_separator is an optional string by which Consul tags are joined into the __meta_consul_tags label.\n    # By default, \",\" is used as a tag separator.\n    # Individual tags are also available via __meta_consul_tag_<tagname> labels - see below.\n    #\n    # tag_separator: \"...\"\n\n    # filter is an optional filter for service discovery.\n    # Replaces tags and node_meta options.\n    # Consul supports it since 1.14 version.\n    # See the list of supported filters at https://developer.hashicorp.com/consul/api-docs/catalog#filtering-1\n    # See filter examples at https://developer.hashicorp.com/consul/api-docs/features/filtering\n    #\n    # filter: \"...\"\n\n    # allow_stale is an optional config, which allows stale Consul results.\n    # See https://developer.hashicorp.com/consul/api-docs/features/consistency\n    # Reduce load on Consul if set to true. By default, it is set to true.\n    #\n    # allow_stale: ...\n\n    # Additional HTTP API client options can be specified here.\n    # See https://docs.victoriametrics.com/sd_configs/#http-api-client-options\n```\n\n----------------------------------------\n\nTITLE: Calculating Field Length with len Pipe in LogSQL\nDESCRIPTION: The len pipe calculates the byte length of a field value. This example shows the top 5 log entries with the maximum byte length of the _msg field from the last 5 minutes.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_112\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m | len(_msg) as msg_len | sort by (msg_len desc) | limit 5\n```\n\n----------------------------------------\n\nTITLE: Describing vmbackupmanager Command-Line Flags - VictoriaMetrics - Text\nDESCRIPTION: This text snippet provides CLI documentation for 'vmbackupmanager', detailing its subcommands and a comprehensive list of supported command-line flags with explanations for each. No programming logic is present; instead, it serves as reference material for configuring and running regular backups through the binary. Users are guided regarding required and optional parameters, links to cloud and security configuration references, and behavioral notes for specific flags. Intended for sysadmins or users integrating backup and restore processes in VictoriaMetrics environments.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmbackupmanager.md#2025-04-22_snippet_30\n\nLANGUAGE: text\nCODE:\n```\nvmbackupmanager performs regular backups according to the provided configs.\n\nsubcommands:\n backup: provides auxiliary backup-related commands\n restore: restores backup specified by restore mark if it exists\n\ncommand-line flags:\n  -apiURL string\n     vmbackupmanager address to perform API requests (default \"http://127.0.0.1:8300\")\n  -backupInterval duration\n     Interval between backups. If set to 0 interval is set to 1h if hourly backups are enabled and 24h otherwise\n  -concurrency int\n     The number of concurrent workers. Higher concurrency may reduce backup duration (default 10)\n  -configFilePath string\n     Path to file with S3 configs. Configs are loaded from default location if not set.\n     See https://docs.aws.amazon.com/general/latest/gr/aws-security-credentials.html\n  -configProfile string\n     Profile name for S3 configs. If no set, the value of the environment variable will be loaded (AWS_PROFILE or AWS_DEFAULT_PROFILE), or if both not set, DefaultSharedConfigProfile is used\n  -credsFilePath string\n     Path to file with GCS or S3 credentials. Credentials are loaded from default locations if not set.\n     See https://cloud.google.com/iam/docs/creating-managing-service-account-keys and https://docs.aws.amazon.com/general/latest/gr/aws-security-credentials.html\n  -customS3Endpoint string\n     Custom S3 endpoint for use with S3-compatible storages (e.g. MinIO). S3 is used if not set\n  -deleteAllObjectVersions\n     Whether to prune previous object versions when deleting an object. By default, when object storage has versioning enabled deleting the file removes only current version. This option forces removal of all previous versions. See: https://docs.victoriametrics.com/vmbackup/#permanent-deletion-of-objects-in-s3-compatible-storages\n  -disableDaily\n     Disable daily run. Default false\n  -disableHourly\n     Disable hourly run. Default false\n  -disableMonthly\n     Disable monthly run. Default false\n  -disableWeekly\n     Disable weekly run. Default false\n  -dst string\n     The root folder of Victoria Metrics backups. Example: gs://bucket/path/to/backup/dir, s3://bucket/path/to/backup/dir or fs:///path/to/local/backup/dir\n  -enableTCP6\n     Whether to enable IPv6 for listening and dialing. By default, only IPv4 TCP and UDP are used\n  -envflag.enable\n     Whether to enable reading flags from environment variables in addition to the command line. Command line flag values have priority over values from environment vars. Flags are read only from the command line if this flag isn't set. See https://docs.victoriametrics.com/#environment-variables for more details\n  -envflag.prefix string\n     Prefix for environment variables if -envflag.enable is set\n  -eula\n     Deprecated, please use -license or -licenseFile flags instead. By specifying this flag, you confirm that you have an enterprise license and accept the ESA https://victoriametrics.com/legal/esa/ . This flag is available only in Enterprise binaries. See https://docs.victoriametrics.com/enterprise/\n  -filestream.disableFadvise\n     Whether to disable fadvise() syscall when reading large data files. The fadvise() syscall prevents from eviction of recently accessed data from OS page cache during background merges and backups. In some rare cases it is better to disable the syscall if it uses too much CPU\n  -flagsAuthKey value\n     Auth key for /flags endpoint. It must be passed via authKey query arg. It overrides -httpAuth.*\n     Flag value can be read from the given file when using -flagsAuthKey=file:///abs/path/to/file or -flagsAuthKey=file://./relative/path/to/file . Flag value can be read from the given http/https url when using -flagsAuthKey=http://host/path or -flagsAuthKey=https://host/path\n  -fs.disableMmap\n     Whether to use pread() instead of mmap() for reading data files. By default, mmap() is used for 64-bit arches and pread() is used for 32-bit arches, since they cannot read data files bigger than 2^32 bytes in memory. mmap() is usually faster for reading small data chunks than pread()\n  -http.connTimeout duration\n     Incoming connections to -httpListenAddr are closed after the configured timeout. This may help evenly spreading load among a cluster of services behind TCP-level load balancer. Zero value disables closing of incoming connections (default 2m0s)\n  -http.disableResponseCompression\n     Disable compression of HTTP responses to save CPU resources. By default, compression is enabled to save network bandwidth\n  -http.header.csp string\n     Value for 'Content-Security-Policy' header, recommended: \"default-src 'self'\"\n  -http.header.frameOptions string\n     Value for 'X-Frame-Options' header\n  -http.header.hsts string\n     Value for 'Strict-Transport-Security' header, recommended: 'max-age=31536000; includeSubDomains'\n  -http.idleConnTimeout duration\n     Timeout for incoming idle http connections (default 1m0s)\n  -http.maxGracefulShutdownDuration duration\n     The maximum duration for a graceful shutdown of the HTTP server. A highly loaded server may require increased value for a graceful shutdown (default 7s)\n  -http.pathPrefix string\n     An optional prefix to add to all the paths handled by http server. For example, if '-http.pathPrefix=/foo/bar' is set, then all the http requests will be handled on '/foo/bar/*' paths. This may be useful for proxied requests. See https://www.robustperception.io/using-external-urls-and-proxies-with-prometheus\n  -http.shutdownDelay duration\n     Optional delay before http server shutdown. During this delay, the server returns non-OK responses from /health page, so load balancers can route new requests to other servers\n  -httpAuth.password value\n     Password for HTTP server's Basic Auth. The authentication is disabled if -httpAuth.username is empty\n     Flag value can be read from the given file when using -httpAuth.password=file:///abs/path/to/file or -httpAuth.password=file://./relative/path/to/file . Flag value can be read from the given http/https url when using -httpAuth.password=http://host/path or -httpAuth.password=https://host/path\n  -httpAuth.username string\n     Username for HTTP server's Basic Auth. The authentication is disabled if empty. See also -httpAuth.password\n  -httpListenAddr array\n     Address to listen for incoming http requests\n     Supports an array of values separated by comma or specified via multiple flags.\n     Value can contain comma inside single-quoted or double-quoted string, {}, [] and () braces.\n  -internStringCacheExpireDuration duration\n     The expiry duration for caches for interned strings. See https://en.wikipedia.org/wiki/String_interning . See also -internStringMaxLen and -internStringDisableCache (default 6m0s)\n  -internStringDisableCache\n     Whether to disable caches for interned strings. This may reduce memory usage at the cost of higher CPU usage. See https://en.wikipedia.org/wiki/String_interning . See also -internStringCacheExpireDuration and -internStringMaxLen\n  -internStringMaxLen int\n     The maximum length for strings to intern. A lower limit may save memory at the cost of higher CPU usage. See https://en.wikipedia.org/wiki/String_interning . See also -internStringDisableCache and -internStringCacheExpireDuration (default 500)\n  -keepLastDaily int\n     Keep last N daily backups. If 0 is specified next retention cycle removes all backups for given time period. (default -1)\n  -keepLastHourly int\n     Keep last N hourly backups. If 0 is specified next retention cycle removes all backups for given time period. (default -1)\n  -keepLastMonthly int\n     Keep last N monthly backups. If 0 is specified next retention cycle removes all backups for given time period. (default -1)\n  -keepLastWeekly int\n     Keep last N weekly backups. If 0 is specified next retention cycle removes all backups for given time period. (default -1)\n  -license string\n     License key for VictoriaMetrics Enterprise. See https://victoriametrics.com/products/enterprise/ . Trial Enterprise license can be obtained from https://victoriametrics.com/products/enterprise/trial/ . This flag is available only in Enterprise binaries. The license key can be also passed via file specified by -licenseFile command-line flag\n  -license.forceOffline\n     Whether to enable offline verification for VictoriaMetrics Enterprise license key, which has been passed either via -license or via -licenseFile command-line flag. The issued license key must support offline verification feature. Contact info@victoriametrics.com if you need offline license verification. This flag is available only in Enterprise binaries\n  -licenseFile string\n     Path to file with license key for VictoriaMetrics Enterprise. See https://victoriametrics.com/products/enterprise/ . Trial Enterprise license can be obtained from https://victoriametrics.com/products/enterprise/trial/ . This flag is available only in Enterprise binaries. The license key can be also passed inline via -license command-line flag\n  -loggerDisableTimestamps\n     Whether to disable writing timestamps in logs\n  -loggerErrorsPerSecondLimit int\n     Per-second limit on the number of ERROR messages. If more than the given number of errors are emitted per second, the remaining errors are suppressed. Zero values disable the rate limit\n  -loggerFormat string\n     Format for logs. Possible values: default, json (default \"default\")\n  -loggerJSONFields string\n     Allows renaming fields in JSON formatted logs. Example: \"ts:timestamp,msg:message\" renames \"ts\" to \"timestamp\" and \"msg\" to \"message\". Supported fields: ts, level, caller, msg\n  -loggerLevel string\n     Minimum level of errors to log. Possible values: INFO, WARN, ERROR, FATAL, PANIC (default \"INFO\")\n  -loggerMaxArgLen int\n```\n\n----------------------------------------\n\nTITLE: Downloading a Public Blob to a Local File - Go\nDESCRIPTION: This Go snippet shows downloading a public blob from Azure Blob Storage to a local file without authentication. It utilizes the 'azblob.NewClientWithNoCredential' constructor for anonymous access. The snippet creates a local file, downloads the blob content into it, and provides comments for error handling. Required dependencies are the Azure Blob SDK, OS, and context packages. Intended for blobs with public access, the snippet outputs success or error, with 'defer' ensuring file closure.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/README.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\n// this example accesses a public blob via anonymous access, so no credentials are required\nclient, err := azblob.NewClientWithNoCredential(\"https://azurestoragesamples.blob.core.windows.net/\", nil)\n// TODO: handle error\n\n// create or open a local file where we can download the blob\nfile, err := os.Create(\"cloud.jpg\")\n// TODO: handle error\ndefer file.Close()\n\n// download the blob\n_, err = client.DownloadFile(context.TODO(), \"samples\", \"cloud.jpg\", file, nil)\n// TODO: handle error\n```\n\n----------------------------------------\n\nTITLE: Result of Implicit Subquery Formation from Rollup Function Argument (MetricsQL)\nDESCRIPTION: Shows the explicit subquery `rate((sum(default_rollup(up)))[1i:1i])` resulting from the implicit conversion of `rate(sum(up))`. The conversion wraps the inner argument `sum(up)` (first applying `default_rollup` to `up`) and adds default subquery range/step `[1i:1i]`.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_168\n\nLANGUAGE: MetricsQL\nCODE:\n```\nrate((sum(default_rollup(up)))[1i:1i])\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response for VictoriaLogs Field Values Query (json)\nDESCRIPTION: Illustrates the JSON structure returned by the `/select/logsql/field_values` endpoint. It provides a 'values' array containing objects, each listing a unique value found for the specified field ('value') and its corresponding hit count ('hits').\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/querying/README.md#2025-04-22_snippet_31\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"values\": [\n    {\n      \"value\": \"host-1\",\n      \"hits\": 69426656\n    },\n    {\n      \"value\": \"host-2\",\n      \"hits\": 66507749\n    },\n    {\n      \"value\": \"host-3\",\n      \"hits\": 65454351\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Labels in MetricsQL\nDESCRIPTION: A label manipulation function that removes the specified labels (`label1` to `labelN`) from all time series returned by the query `q`. Implicitly applies `default_rollup()` if `q` is a series selector.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_143\n\nLANGUAGE: metricsql\nCODE:\n```\nlabel_del(q, \"label1\", ..., \"labelN\")\n```\n\n----------------------------------------\n\nTITLE: Special Characters and Unicode Encoding\nDESCRIPTION: Example of how special characters and Unicode text are encoded in log entries using JSON string encoding and UTF-8.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/keyConcepts.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"field with whitespace\": \"value\\nwith\\nnewlines\",\n  \"Поле\": \"价值\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using the MatchUnvalidated Function for Performance in Go\nDESCRIPTION: This function signature defines `doublestar.MatchUnvalidated`. It performs pattern matching like `Match` but skips pattern validation, potentially offering a minor performance boost if the pattern's validity is already known or irrelevant. It returns `true` for a match and `false` otherwise, without returning an error for malformed patterns.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/bmatcuk/doublestar/v4/README.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nfunc MatchUnvalidated(pattern, name string) bool\n```\n\n----------------------------------------\n\nTITLE: Ingesting Test Metric via Curl (Shell)\nDESCRIPTION: This shell script exports an authentication token and a managed VictoriaMetrics write URL as environment variables. It then uses curl to send a POST request to the specified URL's Prometheus import endpoint (/api/v1/import/prometheus), authenticating with a Bearer token and sending the metric 'up{job=\\\"vmalert-test\\\", instance=\\\"localhost\\\"} 0' in the request body. This action is intended to ingest a metric that will trigger a configured alert for testing purposes.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics-cloud/alerting-vmalert-victoria-metrics-cloud.md#2025-04-22_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\nexport TOKEN=76bc5470-****-****-****-************\nexport MANAGED_VM_WRITE_URL=https://gw-c15-1a.cloud.victoriametrics.com/insert/0/prometheus/\ncurl -H \"Authorization: Bearer $TOKEN\" -X POST \"$MANAGED_VM_WRITE_URLapi/v1/import/prometheus\" -d 'up{job=\"vmalert-test\", instance=\"localhost\"} 0'\n```\n\n----------------------------------------\n\nTITLE: Configuring mTLS for VmAnomaly with VictoriaMetrics\nDESCRIPTION: Example configuration for enabling mutual TLS (mTLS) authentication between VmAnomaly components and a VictoriaMetrics instance. Specifies the paths to CA bundle, client certificate, and private key files required for secure authentication.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/anomaly-detection/components/reader.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nreader:\n  class: \"vm\"\n  datasource_url: \"https://your-victoriametrics-instance-with-mtls\"\n  # tenant_id: \"0:0\" uncomment and set for cluster version\n  queries:\n    vm_blocks_example:\n      expr: 'avg(rate(vm_blocks[5m]))'\n      step: 30s\n  sampling_period: 30s\n  verify_tls: \"path/to/ca.crt\"  # path to CA bundle for TLS verification\n  tls_cert_file: \"path/to/client.crt\"  # path to the client certificate\n  tls_key_file:  \"path/to/client.key\"  # path to the client certificate key\n  # additional reader parameters ...\n```\n\n----------------------------------------\n\nTITLE: Starting vlselect Node\nDESCRIPTION: Command to start the vlselect node, accepting queries on port 9471 and fetching data from the vlstorage nodes.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/cluster.md#2025-04-22_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\n./victoria-logs-prod -httpListenAddr=:9471 -storageNode=localhost:9491,localhost:9492 &\n```\n\n----------------------------------------\n\nTITLE: Alert Test Case Configuration for vmalert-tool\nDESCRIPTION: YAML configuration for an alert test case in vmalert-tool. Includes eval_time, groupname, alertname, and exp_alerts sections.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmalert-tool.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\neval_time: <duration>\n\ngroupname: <string>\n\nalertname: <string>\n\nexp_alerts:\n  [ - <alert> ]\n```\n\n----------------------------------------\n\nTITLE: Matching against multiple numeric constants in MetricsQL\nDESCRIPTION: Demonstrates the syntax for matching against multiple numeric constants in MetricsQL queries.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/MetricsQL.md#2025-04-22_snippet_2\n\nLANGUAGE: metricsql\nCODE:\n```\nstatus_code == (300, 301, 304)\n```\n\n----------------------------------------\n\nTITLE: Providing S3 Credentials via Credentials File (Shell)\nDESCRIPTION: This shell snippet shows the format of an AWS S3 credentials file for use with the -credsFilePath flag in vmbackup. It uses standard INI format with access key ID and secret access key under the [default] profile. Prerequisites: AWS S3 compatible storage and correct permissions. The file should be correctly referenced in the -credsFilePath argument.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmbackup.md#2025-04-22_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\n[default]\\naws_access_key_id=theaccesskey\\naws_secret_access_key=thesecretaccesskeyvalue\\n\n```\n\n----------------------------------------\n\nTITLE: Implicit Conversion of Old Model Configuration in vmanomaly (YAML)\nDESCRIPTION: Shows how an old-style configuration (using the `model` key) is automatically converted to the modern format by `vmanomaly`. The single model is placed under the `models` key with a default alias (`default_model`), and the `queries` argument is implicitly populated with all query aliases found in the `reader` section, ensuring backward compatibility.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/anomaly-detection/components/models.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nmodels:\n  default_model:  # default model alias, backward compatibility\n    class: \"model.zscore.ZscoreModel\"\n    z_threshold: 3.0\n    # queries arg is created and propagated with all query aliases found in `queries` arg of `reader` section\n    queries: ['q1', 'q2', 'q3']  # i.e., if your `queries` in `reader` section has exactly q1, q2, q3 aliases\n# ...\n```\n\n----------------------------------------\n\nTITLE: Importing Pushgateway Data via Prometheus Import API Endpoint\nDESCRIPTION: Specifies the API endpoint `/api/v1/import/prometheus` used for importing data in the Prometheus Pushgateway format into VictoriaMetrics. This feature allows ingestion of metrics pushed to a gateway.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/changelog/CHANGELOG_2022.md#2025-04-22_snippet_4\n\nLANGUAGE: http\nCODE:\n```\n/api/v1/import/prometheus\n```\n\n----------------------------------------\n\nTITLE: QuickTemplate with Import and Formatting Examples\nDESCRIPTION: Example showing how to import Go packages into QuickTemplate files and use Go expressions in output tags.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/valyala/quicktemplate/README.md#2025-04-22_snippet_6\n\nLANGUAGE: qtpl\nCODE:\n```\nImport fmt for fmt.Sprintf()\n{% import \"fmt\" %}\n\nFmtFunc uses fmt.Sprintf() inside output tag\n{% func FmtFunc(s string) %}\n\t{%s fmt.Sprintf(\"FmtFunc accepted %q string\", s) %}\n{% endfunc %}\n```\n\n----------------------------------------\n\nTITLE: Declaring the goautoneg Package and Importing Dependencies in Go\nDESCRIPTION: This snippet declares the Go package named `goautoneg` and imports the corresponding library from `bitbucket.org/ww/goautoneg`. This establishes the package context for the subsequent functions and types related to HTTP content negotiation.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/munnerz/goautoneg/README.txt#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\npackage goautoneg\nimport \"bitbucket.org/ww/goautoneg\"\n```\n\n----------------------------------------\n\nTITLE: Radians to Degrees Conversion in PromQL\nDESCRIPTION: The `deg(q)` function converts radian values to degrees for each point in the time series returned by `q`. As with other transform functions, metric names are removed unless specified otherwise using the `keep_metric_names` modifier. Supported by PromQL, this function is instrumental in converting angular measurements for analysis.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_73\n\nLANGUAGE: PromQL\nCODE:\n```\n`deg(q)`\n```\n\n----------------------------------------\n\nTITLE: Data Normalization Functions in MetricsQL\nDESCRIPTION: Functions for normalizing and transforming data, including range_normalize which scales values to a [0...1] range, useful for correlating time series with different value ranges.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_123\n\nLANGUAGE: markdown\nCODE:\n```\n#### range_normalize\n\n`range_normalize(q1, ...)` is a [transform function](#transform-functions), which normalizes values for time series returned by `q1, ...` into `[0 ... 1]` range.\nThis function is useful for correlating time series with distinct value ranges.\n\nSee also [share](#share).\n```\n\nLANGUAGE: markdown\nCODE:\n```\n#### range_quantile\n\n`range_quantile(phi, q)` is a [transform function](#transform-functions), which returns `phi`-quantile across points per each time series returned by `q`.\n`phi` must be in the range `[0...1]`.\n```\n\n----------------------------------------\n\nTITLE: Setting up Zap Development Environment in Bash\nDESCRIPTION: Commands to set up a local development environment for contributing to Zap. This includes forking the repository, cloning it to the proper GOPATH location, and configuring the upstream remote.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/go.uber.org/zap/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p $GOPATH/src/go.uber.org\ncd $GOPATH/src/go.uber.org\ngit clone git@github.com:your_github_username/zap.git\ncd zap\ngit remote add upstream https://github.com/uber-go/zap.git\ngit fetch upstream\n```\n\n----------------------------------------\n\nTITLE: Including README Content in Hugo Template\nDESCRIPTION: Hugo shortcode that includes content from README.md file into the current page. This shortcode helps maintain documentation in a single source while reusing it across different pages.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics-cloud/_index.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n{{% content \"README.md\" %}}\n```\n\n----------------------------------------\n\nTITLE: Configuring Per-Target Series Limit in vmagent (YAML)\nDESCRIPTION: Introduced in v1.65.0 for vmagent, the `series_limit` option within a `scrape_config` section allows setting a limit on the number of unique time series scraped for that specific target. This provides fine-grained cardinality control compared to the global flag.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/changelog/CHANGELOG_2021.md#2025-04-22_snippet_8\n\nLANGUAGE: YAML\nCODE:\n```\nscrape_configs:\n- job_name: 'example'\n  series_limit: 10000\n  # other scrape config options...\n```\n\n----------------------------------------\n\nTITLE: Dropping Request Path Prefix in vmauth Routing (YAML)\nDESCRIPTION: Configures `vmauth` to route requests and drop parts of the original request path before proxying. Requests starting with `/vmagent/` are sent to the vmagent backend, removing `/vmagent/` (1 part). Requests starting with `/vmalert/` go to the vmalert backend, removing `/vmalert/` (1 part). The `drop_src_path_prefix_parts` parameter specifies how many prefix parts to remove.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmauth.md#2025-04-22_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nunauthorized_user:\n  url_map:\n\n    # proxy all the requests, which start with `/vmagent/`, to vmagent backend\n  - src_paths:\n    - \"/vmagent/.*\"\n\n    # drop /vmagent/ path prefix from the original request before proxying it to url_prefix.\n    drop_src_path_prefix_parts: 1\n    url_prefix: \"http://vmagent-backend:8429/\"\n\n    # proxy all the requests, which start with `/vmalert`, to vmalert backend\n  - src_paths:\n    - \"/vmalert/.*\"\n\n    # drop /vmalert/ path prefix from the original request before proxying it to url_prefix.\n    drop_src_path_prefix_parts: 1\n    url_prefix: \"http://vmalert-backend:8880/\"\n```\n\n----------------------------------------\n\nTITLE: VictoriaMetrics Enterprise Docker Compose Configuration\nDESCRIPTION: Example Docker Compose configuration for running VictoriaMetrics Enterprise, including volume mounts for data storage and license file.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/enterprise.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nversion: \"3.5\"\nservices:\n  victoriametrics:\n    container_name: victoriametrics\n    image: victoriametrics/victoria-metrics:v1.115.0\n    ports:\n      - 8428:8428\n    volumes:\n      - vmdata:/storage\n      - /vm-license:/vm-license\n    command:\n      - \"-storageDataPath=/storage\"\n      - \"-licenseFile=/vm-license\"\nvolumes:\n  vmdata: {}\n```\n\n----------------------------------------\n\nTITLE: Querying Large Scrape Responses with MetricsQL\nDESCRIPTION: This MetricsQL query identifies scrape targets that return large responses. It selects time series where the automatically generated `scrape_response_size_bytes` metric exceeds 10 MiB (10 * 1024 * 1024 bytes).\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmagent.md#2025-04-22_snippet_16\n\nLANGUAGE: metricsql\nCODE:\n```\nscrape_response_size_bytes > 10MiB\n```\n\n----------------------------------------\n\nTITLE: Getting Timezone Offset with timezone_offset Function\nDESCRIPTION: The timezone_offset function returns offset in seconds for the given timezone relative to UTC. This is useful when combining with datetime-related functions.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_111\n\nLANGUAGE: metricsql\nCODE:\n```\ntimezone_offset(tz)\n```\n\nLANGUAGE: metricsql\nCODE:\n```\nday_of_week(time()+timezone_offset(\"America/Los_Angeles\"))\n```\n\n----------------------------------------\n\nTITLE: Derivatives Calculation with Rollup Deriv Function in VictoriaMetrics\nDESCRIPTION: The `rollup_deriv` function computes per-second derivatives for raw samples over a given interval `d` and yields min, max, and avg values for these derivatives. Used widely with metrics lacking strong regularity, the function can also take an optional second argument to return a single selected result without labels.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/MetricsQL.md#2025-04-22_snippet_53\n\nLANGUAGE: Other\nCODE:\n```\nrollup_deriv(series_selector[d])\n```\n\n----------------------------------------\n\nTITLE: Counting Unique Values Over Time in MetricsQL\nDESCRIPTION: The count_values_over_time function counts the number of raw samples with the same value over a given lookbehind window, storing counts in a time series with an additional label. It's typically used with gauge metrics.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_27\n\nLANGUAGE: MetricsQL\nCODE:\n```\ncount_values_over_time(\"label\", series_selector[d])\n```\n\n----------------------------------------\n\nTITLE: Successful Model Fit Completion Log (Non-Rolling)\nDESCRIPTION: Logs the completion time for a successful model fit for non-rolling models. Accompanied by metric updates like `vmanomaly_model_run_duration_seconds`. Placeholders `{{scheduler_alias}}`, `{{model_alias}}`, `{{model_run_duration}}`, and `{{query_key}}` provide context.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/anomaly-detection/components/monitoring.md#2025-04-22_snippet_18\n\nLANGUAGE: text\nCODE:\n```\n[Scheduler {{scheduler_alias}}] Model '{{model_alias}}' fit completed in {{model_run_duration}} seconds for {{query_key}}.\n```\n\n----------------------------------------\n\nTITLE: Online Z-score Model Configuration for VictoriaMetrics Anomaly Detection\nDESCRIPTION: Configuration for an online Z-score model that updates incrementally with each inference call. This approach reduces resource consumption by requiring only an initial fit and then updating continuously during inference.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/anomaly-detection/FAQ.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nschedulers:\n  periodic:\n    class: 'periodic'\n    fit_every: '180d'  # we need only initial fit to start\n    fit_window: '4h'  # reduced window, especially if the data doesn't have strong seasonality\n    infer_every: '1m'  # the model will be updated during each infer call\n  # other schedulers ...\nmodels:\n  zscore_example:\n    class: 'zscore_online'\n    min_n_samples_seen: 120  # i.e. minimal relevant seasonality or (initial) fit_window / sampling_frequency\n    schedulers: ['periodic']\n    # other model params ...\n# other config sections ...\n```\n\n----------------------------------------\n\nTITLE: Using sum_gt_over_time in VictoriaMetrics Syntax - plaintext\nDESCRIPTION: Shows sum_gt_over_time, a rollup function for summing values greater than 'gt' in a time window per series. Expects a valid selector and a 'gt' threshold. Major dependency is VictoriaMetrics query processor; output is the total sum meeting the condition. Metric names are removed unless keep_metric_names is applied.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_53\n\nLANGUAGE: plaintext\nCODE:\n```\n`sum_gt_over_time(series_selector[d], gt)`\n```\n\n----------------------------------------\n\nTITLE: Syslog-ng Configuration for VictoriaLogs\nDESCRIPTION: Configuration block for syslog-ng to forward logs to VictoriaLogs server on port 29514.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/data-ingestion/syslog.md#2025-04-22_snippet_14\n\nLANGUAGE: plaintext\nCODE:\n```\ndestination d_remote {\n tcp(\"victoria-logs-server\" port(29514));\n};\n```\n\n----------------------------------------\n\nTITLE: Assessing Sample Lifetime with Lifetime in Markdown\nDESCRIPTION: 'lifetime' calculates the sample duration between first and last records in 'd', revealing time series lifespan insights.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/MetricsQL.md#2025-04-22_snippet_41\n\nLANGUAGE: Markdown\nCODE:\n```\n`lifetime(series_selector[d])` is a [rollup function](#rollup-functions), which returns the duration in seconds between the last and the first sample\\non the given lookbehind window `d`.\n```\n\n----------------------------------------\n\nTITLE: Enabling Monitoring for Anomaly Detection in YAML\nDESCRIPTION: Configures self-monitoring capabilities for the anomaly detection service, allowing metrics to be polled or pushed. Specifies address and port for enabling the metrics endpoint.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/anomaly-detection/components/README.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n# enable self-monitoring in pull and/or push mode\n# https://docs.victoriametrics.com/anomaly-detection/components/monitoring/\nmonitoring:\n  pull: # Enable /metrics endpoint.\n    addr: \"0.0.0.0\"\n    port: 8490\n```\n\n----------------------------------------\n\nTITLE: Displaying VictoriaLogs Help Information\nDESCRIPTION: Command to show available command-line flags with descriptions and default values.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/QuickStart.md#2025-04-22_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\n/path/to/victoria-logs -help\n```\n\n----------------------------------------\n\nTITLE: Multiple Exclusions in LogsQL\nDESCRIPTION: A LogsQL query that excludes logs from multiple sources by using multiple minus operators, filtering out both 'buggy_app' and 'foobar'.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_11\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m error -buggy_app -foobar\n```\n\n----------------------------------------\n\nTITLE: Descending Label Sort in PromQL\nDESCRIPTION: Sorts series in descending order by the given set of labels.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_160\n\nLANGUAGE: promql\nCODE:\n```\nsort_by_label_desc(q, \"label1\", ... \"labelN\")\n```\n\n----------------------------------------\n\nTITLE: Opening a File in a Browser Window - Go\nDESCRIPTION: The OpenFile function accepts a string file path and attempts to open this file in a new browser window. It likely invokes system-level commands to interact with the user\\'s preferred browser, using facilities provided by the \\\"github.com/pkg/browser\\\" package. Returns an error if the operation fails (e.g., if the path does not exist or can\\'t be opened by the browser). Parameter: path - the location of the file on disk. Output is handled through the browser, error output through Stderr if needed.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/pkg/browser/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc OpenFile(path string) error\n```\n\n----------------------------------------\n\nTITLE: Configuring TCP Address for VictoriaMetrics Insert Service\nDESCRIPTION: This command-line option sets the TCP address for accepting connections from vminsert services. The default address is ':8400'.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/Cluster-VictoriaMetrics.md#2025-04-22_snippet_31\n\nLANGUAGE: plaintext\nCODE:\n```\n-vminsertAddr string\n```\n\n----------------------------------------\n\nTITLE: Counting Logs in LogsQL\nDESCRIPTION: This query returns the number of logs over the last 5 minutes using the count stats function.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_176\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m | stats count() logs\n```\n\n----------------------------------------\n\nTITLE: Configuring Stream Aggregation Interval Skipping\nDESCRIPTION: Command-line flags for skipping the first N aggregation intervals in stream aggregation for single-node VictoriaMetrics and vmagent.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/changelog/CHANGELOG_2024.md#2025-04-22_snippet_25\n\nLANGUAGE: shell\nCODE:\n```\n-streamAggr.ignoreFirstIntervals\n```\n\nLANGUAGE: shell\nCODE:\n```\n-remoteWrite.streamAggr.ignoreFirstIntervals\n```\n\n----------------------------------------\n\nTITLE: Updating VMUI in VictoriaMetrics\nDESCRIPTION: Commands for updating and running VMUI embedded in VictoriaMetrics.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmake vmui-update\nmake victoria-metrics\nbin/victoria-metrics -selfScrapeInterval=5s\n```\n\n----------------------------------------\n\nTITLE: Basic Transform Function Example\nDESCRIPTION: Example showing implicit conversion of a direct series selector with a transform function.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_71\n\nLANGUAGE: promql\nCODE:\n```\nabs(temperature)\n```\n\n----------------------------------------\n\nTITLE: VictoriaLogs Rules Backfilling Command\nDESCRIPTION: Shell command for backfilling VictoriaLogs rules, showing how to replay historical data with specified time ranges.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/vmalert.md#2025-04-22_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\n./bin/vmalert -rule=path/to/your.rules \\\n    -datasource.url=http://localhost:9428 \\\n    -rule.defaultRuleType=vlogs \\\n    -remoteWrite.url=http://localhost:8428 \\\n    -replay.timeFrom=2021-05-11T07:21:43Z \\\n    -replay.timeTo=2021-05-29T18:40:43Z\n```\n\n----------------------------------------\n\nTITLE: Fast Derivative Calculation in MetricsQL\nDESCRIPTION: The deriv_fast function calculates per-second derivative using the first and last raw samples on a given lookbehind window for each time series.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_33\n\nLANGUAGE: MetricsQL\nCODE:\n```\nderiv_fast(series_selector[d])\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Log Entry Example\nDESCRIPTION: Example of a structured log entry from a Kubernetes environment with namespace, node, pod, and container information.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/keyConcepts.md#2025-04-22_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"kubernetes.namespace\": \"some-namespace\",\n  \"kubernetes.node.name\": \"some-node\",\n  \"kubernetes.pod.name\": \"some-pod\",\n  \"kubernetes.container.name\": \"some-container\",\n  \"_msg\": \"some log message\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Output with io.Writer\nDESCRIPTION: Shows how to use custom io.Writer outputs with the 'color' package in Go to direct colorized output to different writers.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/fatih/color/README.md#2025-04-22_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\n\"// Use your own io.Writer output\\ncolor.New(color.FgBlue).Fprintln(myWriter, \\\"blue color!\\\")\\n\\nblue := color.New(color.FgBlue)\\nblue.Fprint(writer, \\\"This will print text in blue.\\\")\\n\"\n```\n\n----------------------------------------\n\nTITLE: Strict Configuration Merging in Go\nDESCRIPTION: Example showing how to implement strict configuration merging with Koanf, including error handling for type mismatches between different config sources\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/knadh/koanf/v2/README.md#2025-04-22_snippet_14\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"errors\"\n\t\"log\"\n\n\t\"github.com/knadh/koanf/v2\"\n\t\"github.com/knadh/koanf/maps\"\n\t\"github.com/knadh/koanf/parsers/json\"\n\t\"github.com/knadh/koanf/parsers/yaml\"\n\t\"github.com/knadh/koanf/providers/file\"\n)\n\nvar conf = koanf.Conf{\n\tDelim:       \".\",\n\tStrictMerge: true,\n}\nvar k = koanf.NewWithConf(conf)\n\nfunc main() {\n\tyamlPath := \"mock/mock.yml\"\n\tif err := k.Load(file.Provider(yamlPath), yaml.Parser()); err != nil {\n\t\tlog.Fatalf(\"error loading config: %v\", err)\n\t}\n\n\tjsonPath := \"mock/mock.json\"\n\tif err := k.Load(file.Provider(jsonPath), json.Parser()); err != nil {\n\t\tlog.Fatalf(\"error loading config: %v\", err)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Prometheus-Style Increase with Increase_Prometheus in Markdown\nDESCRIPTION: 'increase_prometheus' mimics Prometheus by disregarding the last sample before the lookbehind window 'd', focusing on counters.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/MetricsQL.md#2025-04-22_snippet_34\n\nLANGUAGE: Markdown\nCODE:\n```\n`increase_prometheus(series_selector[d])` is a [rollup function](#rollup-functions), which calculates the increase\\nover the given lookbehind window `d` per each time series returned from the given [series_selector](https://docs.victoriametrics.com/keyconcepts/#filtering).\n```\n\n----------------------------------------\n\nTITLE: Removing Common Labels with drop_common_labels Function\nDESCRIPTION: The drop_common_labels function drops common label=value pairs among time series returned from multiple queries.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_117\n\nLANGUAGE: metricsql\nCODE:\n```\ndrop_common_labels(q1, ...., qN)\n```\n\n----------------------------------------\n\nTITLE: Opening an io.Reader in a Browser Window - Go\nDESCRIPTION: The OpenReader function takes an io.Reader as input, reads its contents, and displays them in a new browser window. This approach abstracts the source (it could be a file, buffer, or any data stream), allowing dynamic data to be easily previewed in the browser. Requires the \\\"github.com/pkg/browser\\\" package and may rely on temporary file or data URI strategies. Returns an error if the operation or reading the input fails.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/pkg/browser/README.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfunc OpenReader(r io.Reader) error\n```\n\n----------------------------------------\n\nTITLE: MetricsQL Expression Test Configuration for vmalert-tool\nDESCRIPTION: YAML configuration for a MetricsQL expression test in vmalert-tool. Includes expr, eval_time, and exp_samples sections.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmalert-tool.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nexpr: <string>\n\neval_time: <duration>\n\nexp_samples:\n  [ - <sample> ]\n```\n\n----------------------------------------\n\nTITLE: Starting the Telegraf-VictoriaLogs Docker Compose Environment (Shell)\nDESCRIPTION: This command starts the Docker Compose services defined in the `docker-compose.yml` file within the current directory (one of the protocol-specific directories like `./elasticsearch`). The `-d` flag runs the containers in detached mode (background). This spins up Telegraf, VictoriaLogs, and VictoriaMetrics containers for the integration example.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/deployment/docker/victorialogs/telegraf/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndocker compose up -d \n```\n\n----------------------------------------\n\nTITLE: OpenTSDB Multitenant Data Ingestion Endpoint\nDESCRIPTION: HTTP endpoint pattern for accepting multitenant data via OpenTSDB protocol in vmagent\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/changelog/CHANGELOG_2022.md#2025-04-22_snippet_19\n\nLANGUAGE: plaintext\nCODE:\n```\n/insert/<tenantID>/opentsdb/api/put\n```\n\n----------------------------------------\n\nTITLE: Basic vmagent Persistence Directory Structure\nDESCRIPTION: Shows the folder structure for vmagent's persistent queue storage system where pending data is stored.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmagent.md#2025-04-22_snippet_42\n\nLANGUAGE: bash\nCODE:\n```\n<remoteWrite.tmpDataPath>\n└── persistent-queue\n    └── 1_B9EB7BE220B91E9D\n```\n\n----------------------------------------\n\nTITLE: Configuring Vector with Bearer Token Authentication\nDESCRIPTION: Vector configuration using bearer token authentication for sending metrics to VictoriaMetrics. Implements token-based authentication strategy.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/data-ingestion/Vector.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nsources:\n  host_metrics_source:\n    type: host_metrics\nsinks:\n  victoriametrics_sink:\n    type: prometheus_remote_write\n    inputs:\n      - host_metrics_source\n    endpoint: \"https://<victoriametrics_url>/api/v1/write\"\n    auth:\n      strategy: \"bearer\"\n      token: \"<victoriametrics_token>\"\n    healthcheck:\n      enabled: false\n```\n\n----------------------------------------\n\nTITLE: Querying Ingested NewRelic Events Data via Export API - VictoriaMetrics - Shell\nDESCRIPTION: This 'curl' command queries the VictoriaMetrics export endpoint to retrieve all ingested metrics labeled with eventType='SystemSample'. It uses a MetricsQL match selector in the POST data. The output will consist of JSON lines, each describing a separate time series and its associated data points.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/README.md#2025-04-22_snippet_36\n\nLANGUAGE: sh\nCODE:\n```\ncurl http://localhost:8428/api/v1/export -d 'match={eventType=\"SystemSample\"}'\n```\n\n----------------------------------------\n\nTITLE: Conditional Unrolling in VictoriaLogs Query\nDESCRIPTION: Shows how to conditionally unroll a field based on a filter condition.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_174\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m | unroll if (value_type:=\"json_array\") (value)\n```\n\n----------------------------------------\n\nTITLE: Apache License 2.0 Boilerplate Notice Template\nDESCRIPTION: Standard boilerplate notice template to be included in source files when applying the Apache License 2.0. Developers should replace the placeholder fields with their own copyright information.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/aws/aws-sdk-go-v2/internal/configsources/LICENSE.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nCopyright [yyyy] [name of copyright owner]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Benchmarking xxHash Implementations using Go Test and Benchstat\nDESCRIPTION: Demonstrates the shell commands used to run benchmarks for the xxHash Go library. The first command benchmarks the pure Go implementation using the `purego` build tag, while the second benchmarks the default (potentially assembly-optimized) implementation. Both use `go test` with specific flags (`-benchtime`, `-count`, `-bench`) piped to `benchstat` for analysis.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/cespare/xxhash/v2/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nbenchstat <(go test -tags purego -benchtime 500ms -count 15 -bench 'Sum64$')\nbenchstat <(go test -benchtime 500ms -count 15 -bench 'Sum64$')\n```\n\n----------------------------------------\n\nTITLE: Disabling Prometheus Stale Markers in vmagent (Shell)\nDESCRIPTION: Introduced in v1.64.1, the `-promscrape.noStaleMarkers` command-line flag for vmagent disables the sending of Prometheus stale markers for metrics from scrape targets that have disappeared. This can reduce memory usage when staleness tracking is not required.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/changelog/CHANGELOG_2021.md#2025-04-22_snippet_19\n\nLANGUAGE: Shell\nCODE:\n```\n-promscrape.noStaleMarkers\n```\n\n----------------------------------------\n\nTITLE: Enforcing Meter Scope for Callback Registration in Go SDK\nDESCRIPTION: Fixes the `RegisterCallback` method in `go.opentelemetry.io/otel/sdk/metric` to strictly enforce scope. It now only allows registering callbacks for asynchronous instruments created by the *same* `Meter` instance. Attempting to register instruments from a different `Meter` will result in an error.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-22_snippet_33\n\nLANGUAGE: Go\nCODE:\n```\ngo.opentelemetry.io/otel/sdk/metric\n// Method: Meter.RegisterCallback\n// Fix: Enforces that registered instruments belong to the calling Meter.\n```\n\n----------------------------------------\n\nTITLE: Installing VictoriaMetrics Using yum Package Manager - Shell\nDESCRIPTION: This shell script shows how to install VictoriaMetrics on a RHEL/CentOS-based system with yum. It installs the 'yum-plugin-copr', enables the COPR repository for VictoriaMetrics, updates local cache, installs the victoriametrics package, and starts the service with systemd. Prerequisites include a compatible RHEL/CentOS Linux, root privileges, and network access to external package repositories. The commands perform repository addition and software installation, and will fail if permissions or network connectivity are insufficient.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/package/rpm/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nyum -y install yum-plugin-copr\\n\\nyum copr enable antonpatsev/VictoriaMetrics\\n\\nyum makecache\\n\\nyum -y install victoriametrics\\n\\nsystemctl start victoriametrics\n```\n\n----------------------------------------\n\nTITLE: Feature Addition Changelog Entry\nDESCRIPTION: Example changelog entry showing a new feature addition with version and date\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/aws/aws-sdk-go-v2/service/internal/presigned-url/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n# v1.12.0 (2024-10-04)\n\n* **Feature**: Add support for HTTP client metrics.\n* **Dependency Update**: Updated to the latest SDK module versions\n```\n\n----------------------------------------\n\nTITLE: Verifying PVE Metrics Query\nDESCRIPTION: PromQL query to verify that Proxmox Virtual Environment metrics are being successfully sent to VictoriaMetrics. This query returns system uptime metrics for all nodes in the PVE cluster.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/data-ingestion/Proxmox.md#2025-04-22_snippet_0\n\nLANGUAGE: promql\nCODE:\n```\nsystem_uptime{object=\"nodes\"}\n```\n\n----------------------------------------\n\nTITLE: Resolving Configuration with Provider in Terminal\nDESCRIPTION: Terminal-based conceptual diagram depicting the resolution of initial and partial configurations by the Resolver using the Provider. It graphically demonstrates the sequence of operations involved in retrieving and merging configuration data.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/go.opentelemetry.io/collector/confmap/README.md#2025-04-22_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\n              Resolver                   Provider\n   Resolve       │                          │\n────────────────►│                          │\n                 │                          │\n              ┌─ │        Retrieve          │\n              │  ├─────────────────────────►│\n              │  │          Conf            │\n              │  │◄─────────────────────────┤\n  foreach     │  │                          │\n  configURI   │  ├───┐                      │\n              │  │   │Merge                 │\n              │  │◄──┘                      │\n              └─ │                          │\n              ┌─ │        Retrieve          │\n              │  ├─────────────────────────►│\n              │  │    Partial Conf Value    │\n              │  │◄─────────────────────────┤\n  foreach     │  │                          │\n  embedded    │  │                          │\n  configURI   │  ├───┐                      │\n              │  │   │Replace               │\n              │  │◄──┘                      │\n              └─ │                          │\n                 │            Converter     │\n              ┌─ │     Convert    │         │\n              │  ├───────────────►│         │\n    foreach   │  │                │         │\n   Converter  │  │◄───────────────┤         │\n              └─ │                          │\n                 │                          │\n◄────────────────┤                          │\n```\n\n----------------------------------------\n\nTITLE: Cortex Migration Completion Summary\nDESCRIPTION: Output of vmctl showing successful completion of data migration from Cortex to VictoriaMetrics. It provides import statistics including samples processed, throughput, and total migration time.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmctl.md#2025-04-22_snippet_15\n\nLANGUAGE: sh\nCODE:\n```\nSplit defined times into 8842 ranges to import. Continue? [Y/n]\nVM worker 0:↗ 3863 samples/s\nVM worker 1:↗ 2686 samples/s\nVM worker 2:↗ 2620 samples/s\nVM worker 3:↗ 2705 samples/s\nVM worker 4:↗ 2643 samples/s\nVM worker 5:↗ 2593 samples/s\nProcessing ranges: 8842 / 8842 [█████████████████████████████████████████████████████████████████████████████] 100.00%\n2022/10/21 12:09:49 Import finished!\n2022/10/21 12:09:49 VictoriaMetrics importer stats:\n  idle duration: 0s;\n  time spent while importing: 3.82640757s;\n  total samples: 160232;\n  samples/s: 41875.31;\n  total bytes: 11.3 MB;\n  bytes/s: 3.0 MB;\n  import requests: 6;\n  import requests retries: 0;\n2022/10/21 12:09:49 Total time: 4.71824253s\n```\n\n----------------------------------------\n\nTITLE: Initializing Environment and Launching vmalert Binary (Shell/Bash)\nDESCRIPTION: This shell snippet sets essential environment variables (TOKEN, MANAGED_VM_URL, ALERTMANAGER_URL) and launches vmalert in single-node mode using these configurations. vmalert is started with the rule file, remote read/write, and notifier URLs configured to interact with VictoriaMetrics Cloud and Alertmanager. All values are parameterized for easy modification and require the vmalert binary in the working directory.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics-cloud/alerting-vmalert-victoria-metrics-cloud.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nexport TOKEN=81e8226e-****-****-****-************ \nexport MANAGED_VM_URL=https://gw-c15-1c.cloud.victoriametrics.com\nexport ALERTMANAGER_URL=http://localhost:9093 \n./vmalert -rule=alerts.yml -datasource.url=$MANAGED_VM_URL -datasource.bearerToken=$TOKEN -notifier.url=$ALERTMANAGER_URL -remoteWrite.url=$MANAGED_VM_URL -remoteWrite.bearerToken=$TOKEN -remoteRead.url=$MANAGED_VM_URL -remoteRead.bearerToken=$TOKEN\n```\n\n----------------------------------------\n\nTITLE: Configuring Stream Parsing for Large Federated Prometheus Targets in YAML\nDESCRIPTION: This YAML configuration enables stream parsing for a job named 'big-federate' that scrapes metrics from large Prometheus instances. It uses static configs to define targets and sets up federation parameters.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmagent.md#2025-04-22_snippet_37\n\nLANGUAGE: yaml\nCODE:\n```\nscrape_configs:\n- job_name: 'big-federate'\n  stream_parse: true\n  static_configs:\n  - targets:\n    - big-prometheus1\n    - big-prometheus2\n  honor_labels: true\n  metrics_path: /federate\n  params:\n    'match[]': ['{__name__!=\"\"}']\n```\n\n----------------------------------------\n\nTITLE: Thanos Migration Completion Summary\nDESCRIPTION: Final output from vmctl showing successful completion of data migration from Thanos to VictoriaMetrics. It includes import statistics like sample count, throughput, and total time.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmctl.md#2025-04-22_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\nSplit defined times into 8799 ranges to import. Continue? [Y/n]\nVM worker 0:↓ 98183 samples/s\nVM worker 1:↓ 114640 samples/s\nVM worker 2:↓ 131710 samples/s\nVM worker 3:↓ 114256 samples/s\nVM worker 4:↓ 105671 samples/s\nVM worker 5:↓ 124000 samples/s\nProcessing ranges: 8799 / 8799 [██████████████████████████████████████████████████████████████████████████████] 100.00%\n2022/10/19 18:05:07 Import finished!\n2022/10/19 18:05:07 VictoriaMetrics importer stats:\n  idle duration: 52m13.987637229s;\n  time spent while importing: 9m1.728983776s;\n  total samples: 70836111;\n  samples/s: 130759.32;\n  total bytes: 2.2 GB;\n  bytes/s: 4.0 MB;\n  import requests: 356;\n  import requests retries: 0;\n2022/10/19 18:05:07 Total time: 9m2.607521618s\n```\n\n----------------------------------------\n\nTITLE: Collecting Memory Profile for vmagent\nDESCRIPTION: Command to collect a memory profile from a running vmagent instance.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmagent.md#2025-04-22_snippet_66\n\nLANGUAGE: sh\nCODE:\n```\ncurl http://0.0.0.0:8429/debug/pprof/heap > mem.pprof\n```\n\n----------------------------------------\n\nTITLE: Histogram Percentile Calculation\nDESCRIPTION: Calculates phi-percentile over histogram buckets. Phi must be in range [0...1]. Returns percentile bounds when boundsLabel is provided.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_89\n\nLANGUAGE: promql\nCODE:\n```\nhistogram_quantile(0.5, sum(rate(http_request_duration_seconds_bucket[5m])) by (le))\n```\n\n----------------------------------------\n\nTITLE: Installing or Upgrading OpenTelemetry Collector via Helm - Shell\nDESCRIPTION: This command installs or upgrades the OpenTelemetry collector release on your Kubernetes cluster using the previously specified configuration YAML. It connects telemetry pipelines to VictoriaMetrics and VictoriaLogs.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/guides/getting-started-with-opentelemetry/README.md#2025-04-22_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nhelm upgrade -i otel open-telemetry/opentelemetry-collector -f otel-values.yaml\n```\n\n----------------------------------------\n\nTITLE: Configuring vmanomaly with Facebook Prophet Model in YAML\nDESCRIPTION: This YAML configuration sets up vmanomaly to use the Facebook Prophet model for anomaly detection. It configures the scheduler, model parameters, data reader, and writer for use with VictoriaMetrics.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/anomaly-detection/QuickStart.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nschedulers:\n  1d_1m:\n    # https://docs.victoriametrics.com/anomaly-detection/components/scheduler/#periodic-scheduler\n    class: 'periodic'\n    infer_every: '1m'\n    fit_every: '1d'\n    fit_window: '2w'\n\nmodels:\n  # https://docs.victoriametrics.com/anomaly-detection/components/models/#prophet\n  prophet_model:\n    class: 'prophet'\n    provide_series: ['anomaly_score', 'yhat', 'yhat_lower', 'yhat_upper']  # for debugging\n    tz_aware: True\n    tz_use_cyclical_encoding: True\n    tz_seasonalities: # intra-day + intra-week seasonality\n      - name: 'hod'  # intra-day seasonality, hour of the day\n        fourier_order: 4  # keep it 3-8 based on intraday pattern complexity\n        prior_scale: 10\n      - name: 'dow'  # intra-week seasonality, time of the week\n        fourier_order: 2  # keep it 2-4, as dependencies are learned separately for each weekday\n    # inner model args (key-value pairs) accepted by\n    # https://facebook.github.io/prophet/docs/quick_start#python-api\n    args:\n      interval_width: 0.98  # see https://facebook.github.io/prophet/docs/uncertainty_intervals\n\nreader:\n  # https://docs.victoriametrics.com/anomaly-detection/components/reader/#vm-reader\n  datasource_url: \"http://victoriametrics:8428/\" # [YOUR_DATASOURCE_URL]\n  sampling_period: \"1m\"\n  queries: \n    # define your queries with MetricsQL - https://docs.victoriametrics.com/metricsql/\n    cache: \"sum(rate(vm_cache_entries))\"\n\nwriter:\n  # https://docs.victoriametrics.com/anomaly-detection/components/writer/#vm-writer\n  datasource_url:  \"http://victoriametrics:8428/\" # [YOUR_DATASOURCE_URL]\n```\n\n----------------------------------------\n\nTITLE: Pushing Release Tags for OpenTelemetry Go\nDESCRIPTION: This snippet demonstrates how to push the release tags to the upstream remote repository for the main module and all submodules.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/go.opentelemetry.io/otel/RELEASING.md#2025-04-22_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\ngit push upstream <new tag>\ngit push upstream <submodules-path/new tag>\n...\n```\n\n----------------------------------------\n\nTITLE: Collecting Memory Profile in VictoriaMetrics\nDESCRIPTION: Command for collecting a memory profile from a running VictoriaMetrics instance via HTTP. This profile can be analyzed with 'go tool pprof' for debugging memory usage issues.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/README.md#2025-04-22_snippet_80\n\nLANGUAGE: bash\nCODE:\n```\ncurl http://0.0.0.0:8428/debug/pprof/heap > mem.pprof\n```\n\n----------------------------------------\n\nTITLE: Configuring Vector Elasticsearch Sink with Debug Option\nDESCRIPTION: This YAML configuration extends the previous example by adding a debug parameter to the query section. This allows for inspecting VictoriaLogs logs to verify the correctness of log fields and stream fields.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/data-ingestion/Vector.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsinks:\n  vlogs:\n    inputs:\n      - your_input\n    type: elasticsearch\n    endpoints:\n      - http://localhost:9428/insert/elasticsearch/\n    api_version: v8\n    compression: gzip\n    healthcheck:\n      enabled: false\n    query:\n      _msg_field: message\n      _time_field: timestamp\n      _stream_fields: host,container_name\n      debug: \"1\"\n```\n\n----------------------------------------\n\nTITLE: Defining Page Metadata using Hugo Front Matter (YAML)\nDESCRIPTION: This YAML block defines front matter for a Hugo page. It sets the page's weight for ordering, its title, its position within the 'docs' menu under the 'guides' parent, and provides an alias for URL redirection.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/guides/guide-vmcluster-multiple-retention-setup/_index.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nweight: 10\ntitle: Multi Retention Setup within VictoriaMetrics Cluster\nmenu:\n  docs:\n    parent: \"guides\"\n    weight: 10\naliases:\n- /guides/guide-vmcluster-multiple-retention-setup.html\n---\n```\n\n----------------------------------------\n\nTITLE: Equivalent Query Using 'last' Pipe in LogsQL\nDESCRIPTION: This query is equivalent to the previous one, using the 'last' pipe to get the top 10 log entries with the biggest request_duration values.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_130\n\nLANGUAGE: logsql\nCODE:\n```\n_time:1h | last 10 by (request_duration)\n```\n\n----------------------------------------\n\nTITLE: Label Manipulation Example in MetricsQL\nDESCRIPTION: Example showing how label filters are propagated through label manipulation functions in MetricsQL\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/changelog/CHANGELOG_2024.md#2025-04-22_snippet_28\n\nLANGUAGE: metricsql\nCODE:\n```\nlabel_del(some_metric{job=\"foo\"}, \"instance\") + other_metric{pod=\"bar\"}\n```\n\n----------------------------------------\n\nTITLE: Version Links in Markdown\nDESCRIPTION: Markdown links to version release tags and LTS release documentation\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/changelog/CHANGELOG_2023.md#2025-04-22_snippet_17\n\nLANGUAGE: markdown\nCODE:\n```\n## [v1.87.6](https://github.com/VictoriaMetrics/VictoriaMetrics/releases/tag/v1.87.6)\n## [v1.87.5](https://github.com/VictoriaMetrics/VictoriaMetrics/releases/tag/v1.87.5)\n## [v1.87.4](https://github.com/VictoriaMetrics/VictoriaMetrics/releases/tag/v1.87.4)\n```\n\n----------------------------------------\n\nTITLE: Rate Limiting Configuration YAML for VMGateway\nDESCRIPTION: YAML configuration example for setting rate limits in vmgateway, showing global limits and tenant-specific limits for different metrics and time windows.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmgateway.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nlimits:\n  - type: queries\n    value: 1000\n    resolution: minute\n  - type: queries\n    value: 10000\n    resolution: hour\n  - type: queries\n    value: 10\n    resolution: minute\n    project_id: 5\n    account_id: 1\n```\n\n----------------------------------------\n\nTITLE: Verifying Data Ingestion in VictoriaLogs using cURL\nDESCRIPTION: This command uses cURL to query VictoriaLogs via the HTTP query API, selecting all ingested data and displaying the first 10 log lines. It helps verify successful data ingestion.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/data-ingestion/README.md#2025-04-22_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\ncurl http://localhost:9428/select/logsql/query -d 'query=*' | head\n```\n\n----------------------------------------\n\nTITLE: Configuring vmauth DNS SRV URL Prefix\nDESCRIPTION: Example of using DNS SRV addresses in vmauth's url_prefix configuration for automatic discovering and load balancing.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/changelog/CHANGELOG_2024.md#2025-04-22_snippet_26\n\nLANGUAGE: plaintext\nCODE:\n```\nhttp://srv+addr/path\n```\n\n----------------------------------------\n\nTITLE: Configuring Vector HTTP Sink for VictoriaLogs JSON Stream API\nDESCRIPTION: This YAML configuration sets up Vector to send logs to VictoriaLogs using the HTTP sink type and JSON stream API format. It specifies the URI, compression, encoding, and framing method for log transmission.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/data-ingestion/Vector.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nsinks:\n  vlogs:\n    inputs:\n      - your_input\n    type: http\n    uri: http://localhost:9428/insert/jsonline?_stream_fields=host,container_name&_msg_field=message&_time_field=timestamp\n    compression: gzip\n    encoding:\n      codec: json\n    framing:\n      method: newline_delimited\n    healthcheck:\n      enabled: false\n```\n\n----------------------------------------\n\nTITLE: Optimized QuickTemplate String Construction Example\nDESCRIPTION: An optimized approach to constructing complex strings in QuickTemplate by creating separate function templates and using stripspace to eliminate unnecessary whitespace.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/valyala/quicktemplate/README.md#2025-04-22_snippet_8\n\nLANGUAGE: qtpl\nCODE:\n```\n{% func Foo(n int) %}\n    complex string = {%= complexStr(n) %}\n{% endfunc %}\n\n// Wrap complexStr func into stripspace for stripping unnesessary space\n// between tags and lines.\n{% stripspace %}\n{% func complexStr(n int) %}\n    {% for i := 0; i < n; i++ %}\n        num{% space %}{%d i %}{% newline %}\n    {% endfor %}\n{% endfunc %}\n{% endstripspace %}\n```\n\n----------------------------------------\n\nTITLE: Setting HTTP Headers for Tenant Access\nDESCRIPTION: Command demonstrating how to set HTTP headers for accessing specific tenant data in VictoriaLogs.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/querying/vlogscli.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n./vlogscli -header='AccountID: 123' -header='ProjectID: 456'\n```\n\n----------------------------------------\n\nTITLE: Checking Absence of a Time Series with VictoriaMetrics PromQL\nDESCRIPTION: The absent function checks if the provided query q returns any data points; if not, it returns 1, else it returns an empty result. This is used for detecting the absence of a time series and is supported by PromQL for conditional monitoring.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_75\n\nLANGUAGE: PromQL\nCODE:\n```\n`absent(q)`\n```\n\n----------------------------------------\n\nTITLE: File Service Discovery JSON Format Example\nDESCRIPTION: Example of JSON format for file-based service discovery target configuration, showing structure for targets and labels.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/sd_configs.md#2025-04-22_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"targets\": [\"<host>\", ... ],\n    \"labels\": {\n      \"<labelname>\": \"<labelvalue>\",\n      ...,\n    }\n  },\n  ...\n]\n```\n\n----------------------------------------\n\nTITLE: Introducing Semantic Conventions v1.14.0 Package in Go\nDESCRIPTION: Adds the `go.opentelemetry.io/otel/semconv/v1.14.0` package. This package contains semantic conventions based on the `v1.14.0` version of the OpenTelemetry specification.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-22_snippet_12\n\nLANGUAGE: Go\nCODE:\n```\ngo.opentelemetry.io/otel/semconv/v1.14.0\n```\n\n----------------------------------------\n\nTITLE: Adding Extra Fields to Syslog Logs in VictoriaLogs\nDESCRIPTION: Starts VictoriaLogs with TCP Syslog ingestion on port 514 and adds extra fields ('source=foo' and 'abc=def') to incoming logs. This allows for enriching log data with additional context.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/data-ingestion/syslog.md#2025-04-22_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\n./victoria-logs -syslog.listenAddr.tcp=:514 -syslog.extraFields.tcp='{\"source\":\"foo\",\"abc\":\"def\"}'\n```\n\n----------------------------------------\n\nTITLE: Setting Load Balancing Policy to First Available in vmauth (YAML)\nDESCRIPTION: This YAML snippet demonstrates how to change the load balancing strategy from the default 'least_loaded' to 'first_available' using the `load_balancing_policy` option. With this policy, vmauth sends all requests to the first URL (`http://victoria-metrics-main:8428/`) as long as it's available, only failing over to the second URL (`http://victoria-metrics-standby:8428/`) if the first one becomes unavailable.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmauth.md#2025-04-22_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\nunauthorized_user:\n  url_prefix:\n  - http://victoria-metrics-main:8428/\n  - http://victoria-metrics-standby:8428/\n  load_balancing_policy: first_available\n```\n\n----------------------------------------\n\nTITLE: Configuring Scrape Timestamps in vmagent\nDESCRIPTION: Configuration example for controlling timestamp handling in vmagent's scrape configs. Setting honor_timestamps to true makes vmagent use timestamps provided by scrape targets instead of local timestamps.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/changelog/CHANGELOG_2023.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nhonor_timestamps: true\n```\n\n----------------------------------------\n\nTITLE: Using Jitter with Backoff in Golang\nDESCRIPTION: The snippet depicts how to integrate jitter to introduce randomness into backoff intervals, making use of the math/rand package for seeding. Jitter can help avoid collisions in a distributed system. The snippet seeds the random number generator to ensure predictable outcomes for demonstration purposes.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/jpillora/backoff/README.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nimport \"math/rand\"\n\nb := &backoff.Backoff{\n\tJitter: true,\n}\n\nrand.Seed(42)\n\nfmt.Printf(\"%s\\n\", b.Duration())\nfmt.Printf(\"%s\\n\", b.Duration())\nfmt.Printf(\"%s\\n\", b.Duration())\n\nfmt.Printf(\"Reset!\\n\")\nb.Reset()\n\nfmt.Printf(\"%s\\n\", b.Duration())\nfmt.Printf(\"%s\\n\", b.Duration())\nfmt.Printf(\"%s\\n\", b.Duration())\n```\n\n----------------------------------------\n\nTITLE: Building Docker Images with Custom Base Image\nDESCRIPTION: Shell command to build a VMAuth Docker image with a custom base image. This example shows how to use a scratch container as the base instead of the default alpine image.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmauth.md#2025-04-22_snippet_49\n\nLANGUAGE: sh\nCODE:\n```\nROOT_IMAGE=scratch make package-vmauth\n```\n\n----------------------------------------\n\nTITLE: Running Local Go Documentation Server\nDESCRIPTION: This snippet shows how to install and run a local Go documentation server using pkgsite, which is useful for viewing and verifying package documentation.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ngo install golang.org/x/pkgsite/cmd/pkgsite@latest\npkgsite\n```\n\n----------------------------------------\n\nTITLE: Redirecting vlogsgenerator Output to File in Bash\nDESCRIPTION: Command to run vlogsgenerator and write generated logs to a file named logs.json.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlogsgenerator/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbin/vlogsgenerator > logs.json\n```\n\n----------------------------------------\n\nTITLE: Setting Global Replication Factor in VictoriaMetrics Cluster (CLI)\nDESCRIPTION: Illustrates the command-line flag usage `-replicationFactor=2` to configure the global replication factor for data storage across nodes in a VictoriaMetrics cluster. A bug fix in v1.105.0 ensures this global setting is now correctly applied even when specific storage node groups are configured.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/changelog/CHANGELOG_2024.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n-replicationFactor=2\n```\n\n----------------------------------------\n\nTITLE: VictoriaMetrics Cluster Multi-tenant Ingestion via Labels URL\nDESCRIPTION: This specific ingestion URL allows sending data for multiple tenants in a single request by setting the `<accountID>` path parameter to the literal string `multitenant`. Individual data points within the request payload must then specify their target tenant using `vm_account_id` and optional `vm_project_id` labels. The `<suffix>` indicates the data format/protocol.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/Cluster-VictoriaMetrics.md#2025-04-22_snippet_13\n\nLANGUAGE: url\nCODE:\n```\nhttp://<vminsert>:8480/insert/multitenant/<suffix>\n```\n\n----------------------------------------\n\nTITLE: Creating S2 Dictionary from Sample File in Go\nDESCRIPTION: Demonstrates how to create an S2 compression dictionary directly from a sample file if the input data is very uniform. It reads a sample file, uses `s2.MakeDict` to create the dictionary, shows how to get the dictionary bytes for later storage/reload using `dict.Bytes()` and `s2.NewDict(b)`, and exemplifies encoding and decoding data using the created dictionary. Requires the `os` and `s2` packages.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/klauspost/compress/s2/README.md#2025-04-22_snippet_12\n\nLANGUAGE: Go\nCODE:\n```\n```Go\n    // Read a sample\n    sample, err := os.ReadFile(\"sample.json\")\n\n    // Create a dictionary.\n    dict := s2.MakeDict(sample, nil)\n\t\n    // b := dict.Bytes() will provide a dictionary that can be saved\n    // and reloaded with s2.NewDict(b).\n\t\n    // To encode:\n    encoded := dict.Encode(nil, file)\n\n    // To decode:\n    decoded, err := dict.Decode(nil, file)\n```\n```\n\n----------------------------------------\n\nTITLE: Old-Style Scheduler Configuration in YAML\nDESCRIPTION: This YAML snippet outlines the deprecated configuration format for defining schedulers in VictoriaMetrics Anomaly Detection. It highlights the implicit conversion from the old style to the new alias-supported format, necessary when upgrading from versions prior to v1.11.0.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/anomaly-detection/components/scheduler.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nscheduler:\n  # class: \"periodic\" # or class: \"scheduler.periodic.PeriodicScheduler\" until v1.13.0 with class alias support)\n  infer_every: \"1m\"\n  fit_every: \"2m\"\n  fit_window: \"3h\"\n...\n```\n\n----------------------------------------\n\nTITLE: Verifying vmagent Pod Status\nDESCRIPTION: This shell command is used to verify if the vmagent pod is running successfully on your Kubernetes cluster. It requires kubectl configured and connected to the target cluster.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/guides/k8s-ha-monitoring-via-vm-cluster/README.md#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nkubectl get pods | grep vmagent\n```\n\n----------------------------------------\n\nTITLE: Writer No Valid Data Log\nDESCRIPTION: Logs a warning when the writer component finds no valid datapoints (e.g., all NaN or Inf) to send to VictoriaMetrics for a specific metric query key. Indicates that no data will be written. Placeholders `{{scheduler_alias}}` and `{{query_key}}` provide context.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/anomaly-detection/components/monitoring.md#2025-04-22_snippet_21\n\nLANGUAGE: text\nCODE:\n```\n[Scheduler {{scheduler_alias}}] No valid datapoints to save for metric: {{query_key}}\n```\n\n----------------------------------------\n\nTITLE: Running VMAnomaly Docker Container with Sharding\nDESCRIPTION: This bash script demonstrates how to run a VMAnomaly Docker container with sharding enabled. It sets up the first shard in a two-shard configuration without replication.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/anomaly-detection/Scaling vmanomaly.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n#!/usr/bin/env bash\nset -x -e\ncd \"$(dirname \"$0\")/..\" || exit 1\n\n# run the first shard (VMANOMALY_MEMBER_NUM=0) in a two-shard setup (VMANOMALY_MEMBERS_COUNT=2)\ndocker run -i -t --rm \\\n    --user=\"$(id -u):$(id -g)\" \\\n    --cap-drop=ALL \\\n    -e \"VM_LICENSE_FILE=/.secret/license\" \\\n    -e \"VMANOMALY_MEMBERS_COUNT=2\" \\\n    -e \"VMANOMALY_MEMBER_NUM=0\" \\\n    -e \"VMANOMALY_REPLICATION_FACTOR=1\"\n    -e \"VMANOMALY_SPLIT_BY=COMPLETE\" \\\n    -v \"$PWD/global_config.yaml\":/global_config.yaml \\\n    -v \"$PWD/.secret/license\":/.secret/license \\\n    -p 8080:8080 \\\n    -p 8490:8490 \\\n    vmanomaly:v1.21.0 \\\n    /global_config.yaml \\\n    --loggerLevel=INFO\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Labels in YAML for Anomaly Detection\nDESCRIPTION: Example of adding custom labels to anomaly detection metrics. These labels will be added to all metrics output by the anomaly detection system.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/anomaly-detection/components/writer.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ncustom_label_1: label_name_1\ncustom_label_2: label_name_2\n```\n\n----------------------------------------\n\nTITLE: Migrating to golang-jwt/jwt v4+ via go get and go mod (sh)\nDESCRIPTION: This shell code snippet demonstrates the standard steps for updating project dependencies to golang-jwt/jwt v4 or later. The commands fetch the new library version and update the Go module file, ensuring backward compatibility. Use within a Go workspace leveraged by modules; requires an existing go.mod file and network access.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/golang-jwt/jwt/v5/MIGRATION_GUIDE.md#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/golang-jwt/jwt/v4\ngo mod tidy\n```\n\n----------------------------------------\n\nTITLE: Displaying Help for verify-block Command in vmctl\nDESCRIPTION: Shows the available flags for the verify-block command in vmctl, which includes an option for GNU zip decompression of exported blocks.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmctl.md#2025-04-22_snippet_29\n\nLANGUAGE: shellhelp\nCODE:\n```\n./vmctl verify-block -help\n\n   --gunzip\n     Use GNU zip decompression for exported block (default: false)\n```\n\n----------------------------------------\n\nTITLE: Configuring a Single Model (Old Style) in vmanomaly (YAML)\nDESCRIPTION: Illustrates the older, deprecated configuration format (before v1.10.0) for defining a single anomaly detection model using the `model` key. This example configures a Z-score model with a specific threshold. This format lacks explicit query assignment and will be implicitly converted to the newer format. Note the class name format change prior to v1.13.0.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/anomaly-detection/components/models.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nmodel:\n    class: \"zscore\"  # or 'model.zscore.ZscoreModel' until v1.13.0\n    z_threshold: 3.0\n    # no explicit `queries` arg is provided\n# ...\n```\n\n----------------------------------------\n\nTITLE: Calculating Median Absolute Deviation in PromQL\nDESCRIPTION: The mad_over_time function calculates the median absolute deviation over raw samples for a given time window. It is typically used with gauge metrics.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_37\n\nLANGUAGE: PromQL\nCODE:\n```\nmad_over_time(series_selector[d])\n```\n\n----------------------------------------\n\nTITLE: Calculating Median Temperature by Country with Histogram Functions in PromQL\nDESCRIPTION: This query calculates the median temperature by country over the last 24 hours using histogram_quantile and histogram_over_time functions.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_23\n\nLANGUAGE: promql\nCODE:\n```\nhistogram_quantile(0.5, sum(histogram_over_time(temperature[24h])) by (vmrange,country))\n```\n\n----------------------------------------\n\nTITLE: Benchmarking Stream Decoding Performance in Go\nDESCRIPTION: This Go language snippet contains performance benchmarks for a stream decoder. It demonstrates stream decoding process under various file conditions and record performance metrics such as time per operation and memory utilization. This snippet does not require additional dependencies beyond the Go standard library. It primarily takes various input files and measures decoding speed and efficiency, highlighting significant performance results achieved under specific hardware conditions.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/klauspost/compress/zstd/README.md#2025-04-22_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\nBenchmarkDecoderSilesia-32 \t                   5\t 206878840 ns/op\t1024.50 MB/s\t   49808 B/op\t      43 allocs/op\nBenchmarkDecoderEnwik9-32                          1\t1271809000 ns/op\t 786.28 MB/s\t   72048 B/op\t      52 allocs/op\n\nConcurrent blocks, performance:\n\nBenchmarkDecoder_DecodeAllParallel/kppkn.gtb.zst-32          \t   67356\t     17857 ns/op\t10321.96 MB/s\t        22.48 pct\t     102 B/op\t       0 allocs/op\nBenchmarkDecoder_DecodeAllParallel/geo.protodata.zst-32      \t  266656\t      4421 ns/op\t26823.21 MB/s\t        11.89 pct\t      19 B/op\t       0 allocs/op\nBenchmarkDecoder_DecodeAllParallel/plrabn12.txt.zst-32       \t   20992\t     56842 ns/op\t8477.17 MB/s\t        39.90 pct\t     754 B/op\t       0 allocs/op\nBenchmarkDecoder_DecodeAllParallel/lcet10.txt.zst-32         \t   27456\t     43932 ns/op\t9714.01 MB/s\t        33.27 pct\t     524 B/op\t       0 allocs/op\nBenchmarkDecoder_DecodeAllParallel/asyoulik.txt.zst-32       \t   78432\t     15047 ns/op\t8319.15 MB/s\t        40.34 pct\t      66 B/op\t       0 allocs/op\nBenchmarkDecoder_DecodeAllParallel/alice29.txt.zst-32        \t   65800\t     18436 ns/op\t8249.63 MB/s\t        37.75 pct\t      88 B/op\t       0 allocs/op\nBenchmarkDecoder_DecodeAllParallel/html_x_4.zst-32           \t  102993\t     11523 ns/op\t35546.09 MB/s\t         3.637 pct\t     143 B/op\t       0 allocs/op\nBenchmarkDecoder_DecodeAllParallel/paper-100k.pdf.zst-32     \t 1000000\t      1070 ns/op\t95720.98 MB/s\t        80.53 pct\t       3 B/op\t       0 allocs/op\nBenchmarkDecoder_DecodeAllParallel/fireworks.jpeg.zst-32    \t  749802\t      1752 ns/op\t70272.35 MB/s\t       100.0 pct\t       5 B/op\t       0 allocs/op\nBenchmarkDecoder_DecodeAllParallel/urls.10K.zst-32           \t   22640\t     52934 ns/op\t13263.37 MB/s\t        26.25 pct\t    1014 B/op\t       0 allocs/op\nBenchmarkDecoder_DecodeAllParallel/html.zst-32               \t  226412\t      5232 ns/op\t19572.27 MB/s\t        14.49 pct\t      20 B/op\t       0 allocs/op\nBenchmarkDecoder_DecodeAllParallel/comp-data.bin.zst-32      \t  923041\t      1276 ns/op\t3194.71 MB/s\t        31.26 pct\t       0 B/op\t       0 allocs/op\n```\n\n----------------------------------------\n\nTITLE: Configuring Metric Format in YAML for Anomaly Detection\nDESCRIPTION: Basic YAML configuration for metric_format showing the mandatory parameters __name__ and for. These parameters control how metrics are named and labeled in the anomaly detection output.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/anomaly-detection/components/writer.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n__name__: PREFIX1_$VAR\nfor: PREFIX2_$QUERY_KEY\n```\n\n----------------------------------------\n\nTITLE: Wrapping OTLP Trace Exporter Errors in Go\nDESCRIPTION: Changes error handling in OTLP trace exporters (`go.opentelemetry.io/otel/exporters/otlp/otlptrace`). Errors returned by these exporters are now wrapped with an outer error indicating the signal type (trace). Users needing the original error must now use `errors.Unwrap()`.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-22_snippet_27\n\nLANGUAGE: Go\nCODE:\n```\ngo.opentelemetry.io/otel/exporters/otlp/otlptrace\n// Change: Errors are wrapped. Use errors.Unwrap() to access underlying errors.\n```\n\n----------------------------------------\n\nTITLE: Using WithRetry Option for HTTP Metric Exporter in Go\nDESCRIPTION: Specify retry behavior for the OTLP HTTP metric exporter using the WithRetry option and RetryConfig type.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-22_snippet_43\n\nLANGUAGE: Go\nCODE:\n```\nimport \"go.opentelemetry.io/otel/exporter/otel/otlpmetric/otlpmetrichttp\"\n\nexporter := otlpmetrichttp.New(\n    otlpmetrichttp.WithRetry(RetryConfig{\n        // Configure retry settings\n    }),\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Startup Metrics for VictoriaMetrics Anomaly Detection\nDESCRIPTION: This snippet defines a table of startup metrics for vmanomaly, including their types and descriptions. It covers metrics related to start time, version information, available resources, and configuration entities.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/anomaly-detection/components/monitoring.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<table class=\"params\">\n    <thead>\n        <tr>\n            <th>Metric</th>\n            <th><span style=\"white-space: nowrap;\">Type</span></th>\n            <th><span style=\"white-space: nowrap;\">Description</span></th>  \n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>\n\n<span style=\"white-space: nowrap;\">`vmanomaly_start_time_seconds`</span>\n            </td>\n            <td>\n\n<span style=\"white-space: nowrap;\">Gauge</span>\n        </td>\n            <td>vmanomaly start time in UNIX time</td>\n        </tr>\n        <tr>\n            <td>\n\n<span style=\"white-space: nowrap;\">`vmanomaly_version_info`</span>\n            </td>\n            <td>Gauge</td>\n            <td>vmanomaly version information, contained in `version` label{{% available_from \"v1.17.2\" anomaly %}}.</td>\n        </tr>\n        <tr>\n            <td>\n\n<span style=\"white-space: nowrap;\">`vmanomaly_ui_version_info`</span>\n            </td>\n            <td>Gauge</td>\n            <td>vmanomaly UI version information, contained in `version` label{{% available_from \"v1.17.2\" anomaly %}}.</td>\n        </tr>\n        <tr>\n            <td>\n\n<span style=\"white-space: nowrap;\">`vmanomaly_available_memory_bytes`</span>\n            </td>\n            <td>Gauge</td>\n            <td>Virtual memory size in bytes, available to the process{{% available_from \"v1.18.4\" anomaly %}}.</td>\n        </tr>\n        <tr>\n            <td>\n\n<span style=\"white-space: nowrap;\">`vmanomaly_cpu_cores_available`</span>\n            </td>\n            <td>Gauge</td>\n            <td>Number of (logical) CPU cores available to the process{{% available_from \"v1.18.4\" anomaly %}}.</td>\n        </tr>\n        <tr>\n            <td>\n\n<span style=\"white-space: nowrap;\">`vmanomaly_config_entities`</span>\n            </td>\n            <td>Gauge</td>\n            <td>Number of [sub-configs](https://docs.victoriametrics.com/anomaly-detection/scaling-vmanomaly#sub-configuration) **available** (`{scope=\"total\"}`) and **used** for particular [shard](https://docs.victoriametrics.com/anomaly-detection/scaling-vmanomaly#horizontal-scalability) (`{scope=\"shard\"}`) {{% available_from \"v1.21.0\" anomaly %}}</td>\n        </tr>\n    </tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Numeric Sorting of Series by Label Values in Descending Order in PromQL\nDESCRIPTION: The sort_by_label_numeric_desc function sorts series in descending order using numeric sort on the values of specified labels.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_137\n\nLANGUAGE: promql\nCODE:\n```\nsort_by_label_numeric_desc(foo, \"bar\")\n```\n\n----------------------------------------\n\nTITLE: Example: Using Custom Remote Write URL in vmalert (Shell)\nDESCRIPTION: This example command for vmalert (v1.64.1+) demonstrates using `-remoteWrite.disablePathAppend` to send data directly to `http://foo.bar/a/b/c?d=e` instead of the default `.../api/v1/write` endpoint.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/changelog/CHANGELOG_2021.md#2025-04-22_snippet_18\n\nLANGUAGE: Shell\nCODE:\n```\n./vmalert -disablePathAppend -remoteWrite.url='http://foo.bar/a/b/c?d=e'\n```\n\n----------------------------------------\n\nTITLE: Counting Logs with Empty Username in LogsQL\nDESCRIPTION: This query calculates the number of logs with an empty 'username' field during the last 5 minutes using the count_empty stats function.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_179\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m | stats count_empty(username) logs_with_missing_username\n```\n\n----------------------------------------\n\nTITLE: Configuring VictoriaLogs Alert Rules with Custom Time Filter\nDESCRIPTION: YAML configuration showing how to set up log alert rules with a custom 10-minute time window while maintaining 5-minute evaluation intervals.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/vmalert.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ngroups:\n    - name: Requests\n      type: vlogs\n      interval: 5m\n      rules:\n        - alert: TooManyFailedRequest\n          expr: '_time: 10m | extract \"ip=<ip> \" | extract \"status_code=<code>;\" | stats by (ip) count() if (code:~4.*) as failed, count() as total| math failed / total as failed_percentage| filter failed_percentage :> 0.01 | fields ip,failed_percentage'\n          annotations:\n           description: \"Connection from address {{$labels.ip}} has {{$value}}% failed requests in last 10 minutes\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Conntrack Dialer with Default HTTP Client in Go\nDESCRIPTION: The snippet demonstrates how to configure the default HTTP transport's dial context to enable Prometheus monitoring and x/net/trace tracing for outbound connections using the conntrack package. It requires the conntrack package and a setup of Go standard library HTTP client.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/mwitkow/go-conntrack/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nhttp.DefaultTransport.(*http.Transport).DialContext = conntrack.NewDialContextFunc(\n    conntrack.DialWithTracing(),\n    conntrack.DialWithDialer(&net.Dialer{\n        Timeout:   30 * time.Second,\n        KeepAlive: 30 * time.Second,\n    }),\n)\n```\n\n----------------------------------------\n\nTITLE: Computing Maximum Value Over Time in PromQL\nDESCRIPTION: The max_over_time function calculates the maximum value over raw samples for a specified time window. It is commonly applied to gauge metrics and is supported by PromQL.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_38\n\nLANGUAGE: PromQL\nCODE:\n```\nmax_over_time(series_selector[d])\n```\n\n----------------------------------------\n\nTITLE: Extracting Unique Words from Log Fields\nDESCRIPTION: Shows how to unpack unique words from a specific field using the drop_duplicates option.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_171\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m | unpack_words from text as words drop_duplicates\n```\n\n----------------------------------------\n\nTITLE: Configuring vmagent Data Replication\nDESCRIPTION: Command-line flags for setting up data replication among failure domains in vmagent when the replication factor is smaller than the number of failure domains.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/changelog/CHANGELOG_2024.md#2025-04-22_snippet_23\n\nLANGUAGE: shell\nCODE:\n```\n-remoteWrite.shardByURLReplicas=N\n```\n\nLANGUAGE: shell\nCODE:\n```\n-remoteWrite.shardByURL\n```\n\n----------------------------------------\n\nTITLE: Listing Blobs with Pager Pattern - azblob - Go\nDESCRIPTION: Demonstrates how to list blobs using the Pager pattern in the azblob module, replacing earlier explicit use of Marker types. Shows how to iterate through pages of results within a container using the NewListBlobsFlatPager method. Dependencies: github.com/Azure/azure-sdk-for-go/sdk/storage/azblob, context. Parameters: container name. Input: container name string; Output: paginated blob lists. Must be used within a valid context; errors can be returned by NextPage.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/migrationguide.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n// new code\npager := client.NewListBlobsFlatPager(\"my-container\", nil)\nfor pager.More() {\n\tpage, err := pager.NextPage(context.TODO())\n\t// process results\n}\n```\n\n----------------------------------------\n\nTITLE: Installing QuickTemplate and QuickTemplate Compiler\nDESCRIPTION: Commands to install the QuickTemplate package and compiler (qtc) using Go's package manager.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/valyala/quicktemplate/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get -u github.com/valyala/quicktemplate\ngo get -u github.com/valyala/quicktemplate/qtc\n```\n\n----------------------------------------\n\nTITLE: Providing GCP Credentials via Credentials File (JSON)\nDESCRIPTION: This JSON snippet illustrates the structure of a GCP service account key file, required for authenticating vmbackup to Google Cloud Storage. It should be specified via the -credsFilePath flag or the GOOGLE_APPLICATION_CREDENTIALS environment variable. The file must contain valid fields for service account keys, including private_key and client_email. Inputs are standard for GCP JSON credentials; outputs are access to GCP storage APIs.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmbackup.md#2025-04-22_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\\n       \\\"type\\\": \\\"service_account\\\",\\n       \\\"project_id\\\": \\\"project-id\\\",\\n       \\\"private_key_id\\\": \\\"key-id\\\",\\n       \\\"private_key\\\": \\\"-----BEGIN PRIVATE KEY-----\\\\nprivate-key\\\\n-----END PRIVATE KEY-----\\\\n\\\",\\n       \\\"client_email\\\": \\\"service-account-email\\\",\\n       \\\"client_id\\\": \\\"client-id\\\",\\n       \\\"auth_uri\\\": \\\"https://accounts.google.com/o/oauth2/auth\\\",\\n       \\\"token_uri\\\": \\\"https://accounts.google.com/o/oauth2/token\\\",\\n       \\\"auth_provider_x509_cert_url\\\": \\\"https://www.googleapis.com/oauth2/v1/certs\\\",\\n       \\\"client_x509_cert_url\\\": \\\"https://www.googleapis.com/robot/v1/metadata/x509/service-account-email\\\"\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: File Service Discovery YAML Format Example\nDESCRIPTION: Example of YAML format for file-based service discovery target configuration, showing structure for targets and labels.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/sd_configs.md#2025-04-22_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\n- targets: [\"<host>\", ... ]\n  labels:\n    <labelname>: <labelvalue>\n    ...\n  ...\n```\n\n----------------------------------------\n\nTITLE: Module Dependencies Declaration in Go\nDESCRIPTION: Dependency declaration file listing required cloud storage and authentication SDKs with their specific versions and sub-packages, including Google Cloud, Azure, and AWS SDKs with explicit version constraints and module replacements.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/modules.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n# cloud.google.com/go v0.120.0\n## explicit; go 1.23.0\ncloud.google.com/go/internal\ncloud.google.com/go/internal/optional\ncloud.google.com/go/internal/trace\ncloud.google.com/go/internal/version\n# cloud.google.com/go/storage v1.51.0 => cloud.google.com/go/storage v1.43.0\n## explicit; go 1.20\ncloud.google.com/go/storage\ncloud.google.com/go/storage/internal\ncloud.google.com/go/storage/internal/apiv2\ncloud.google.com/go/storage/internal/apiv2/storagepb\n```\n\n----------------------------------------\n\nTITLE: Aligning Metric Instrument Kind Names with API in Go SDK\nDESCRIPTION: Updates the instrument kind names used within `go.opentelemetry.io/otel/sdk/metric` to match the terminology used in the public API (`go.opentelemetry.io/otel/metric/instrument`). Renames include `Sync*` to non-prefixed names (e.g., `InstrumentKindSyncCounter` to `InstrumentKindCounter`) and `Async*` to `Observable*` (e.g., `InstrumentKindAsyncGauge` to `InstrumentKindObservableGauge`).\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-22_snippet_29\n\nLANGUAGE: Go\nCODE:\n```\ngo.opentelemetry.io/otel/sdk/metric\n// Renames:\n// - InstrumentKindSyncCounter -> InstrumentKindCounter\n// - InstrumentKindSyncUpDownCounter -> InstrumentKindUpDownCounter\n// - InstrumentKindSyncHistogram -> InstrumentKindHistogram\n// - InstrumentKindAsyncCounter -> InstrumentKindObservableCounter\n// - InstrumentKindAsyncUpDownCounter -> InstrumentKindObservableUpDownCounter\n// - InstrumentKindAsyncGauge -> InstrumentKindObservableGauge\n```\n\n----------------------------------------\n\nTITLE: OpenTelemetry with Bearer Authentication\nDESCRIPTION: OpenTelemetry configuration using bearer token authentication. Shows how to configure token-based authentication for the OTLP export pipeline.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/data-ingestion/Alloy.md#2025-04-22_snippet_6\n\nLANGUAGE: Alloy\nCODE:\n```\nprometheus.exporter.unix \"nodeexporter\" {}\n\nprometheus.scrape \"nodeexporter\" {\n  targets = prometheus.exporter.unix.nodeexporter.targets\n  forward_to = [otelcol.receiver.prometheus.victoriametrics.receiver]\n}\n\notelcol.auth.bearer \"otel_auth\" {\n  token = \"<token>\"  \n}\n\notelcol.receiver.prometheus \"victoriametrics\" {\n  output {\n    metrics = [otelcol.processor.batch.batch.input]\n  }\n}\n\notelcol.processor.batch \"batch\" {\n  output {\n    metrics = [otelcol.exporter.otlphttp.victoriametrics.input]\n  }\n}\n\notelcol.exporter.otlphttp \"victoriametrics\" {\n  client {\n    endpoint = \"https://<victoriametrics_url>:<victoriametrics_port>/opentelemetry\"\n    auth = otelcol.auth.bearer.otel_auth.handler\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example NewRelic Events JSON for Ingestion - VictoriaMetrics - JSON\nDESCRIPTION: This JSON array represents a typical payload sent from the NewRelic agent to VictoriaMetrics. The 'Events' array contains a 'SystemSample' event with various numeric metrics and string attributes. Each element is mapped to individual time series during ingestion, and string fields become labels. Timestamps are inherited from the NewRelic event structure.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/README.md#2025-04-22_snippet_34\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"Events\":[\n      {\n        \"eventType\":\"SystemSample\",\n        \"entityKey\":\"macbook-pro.local\",\n        \"cpuPercent\":25.056660790748904,\n        \"cpuUserPercent\":8.687987912389374,\n        \"cpuSystemPercent\":16.36867287835953,\n        \"cpuIOWaitPercent\":0,\n        \"cpuIdlePercent\":74.94333920925109,\n        \"cpuStealPercent\":0,\n        \"loadAverageOneMinute\":5.42333984375,\n        \"loadAverageFiveMinute\":4.099609375,\n        \"loadAverageFifteenMinute\":3.58203125\n      }\n    ]\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Using alias Function in MetricsQL\nDESCRIPTION: The alias function sets a given name to all time series returned by a query. It's useful for renaming series.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_127\n\nLANGUAGE: MetricsQL\nCODE:\n```\nalias(up, \"foobar\")\n```\n\n----------------------------------------\n\nTITLE: Finding Minimum Value with `min` in MetricsQL\nDESCRIPTION: The `min` function returns the minimum sample value observed for a metric across all its time series within the specified interval. This MetricsQL query demonstrates its equivalence to applying `min` aggregation on the results of `min_over_time`.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/stream-aggregation.md#2025-04-22_snippet_23\n\nLANGUAGE: metricsql\nCODE:\n```\nmin(min_over_time(some_metric[interval]))\n```\n\n----------------------------------------\n\nTITLE: Converting Zstandard Dictionary to S2 Dictionary in Go\nDESCRIPTION: Illustrates converting a pre-existing Zstandard dictionary into an S2 dictionary. It uses `zstd.InspectDictionary` to access the Zstandard dictionary content, then `s2.MakeDict` to create the S2 dictionary, optionally providing a common prefix byte slice to potentially optimize the dictionary size. It shows how to obtain the S2 dictionary bytes for storage (`dict.Bytes()`) and reload (`s2.NewDict(b)`), which removes the `zstd` dependency for subsequent use. Finally, it demonstrates encoding and decoding with the resulting S2 dictionary. Requires the `zstd` and `s2` packages for conversion, but only `s2` for using the saved dictionary.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/klauspost/compress/s2/README.md#2025-04-22_snippet_13\n\nLANGUAGE: Go\nCODE:\n```\n```Go\n    // Decode the Zstandard dictionary.\n    insp, err := zstd.InspectDictionary(zdict)\n    if err != nil {\n        panic(err)\n    }\n\t\n    // We are only interested in the contents.\n    // Assume that files start with \"// Copyright (c) 2023\".\n    // Search for the longest match for that.\n    // This may save a few bytes.\n    dict := s2.MakeDict(insp.Content(), []byte(\"// Copyright (c) 2023\"))\n\n    // b := dict.Bytes() will provide a dictionary that can be saved\n    // and reloaded with s2.NewDict(b).\n\n    // We can now encode using this dictionary\n    encodedWithDict := dict.Encode(nil, payload)\n\n    // To decode content:\n    decoded, err := dict.Decode(nil, encodedWithDict)\n```\n```\n\n----------------------------------------\n\nTITLE: Using count Function with Grouping in PromQL\nDESCRIPTION: Counts non-empty points grouped by job label.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/MetricsQL.md#2025-04-22_snippet_115\n\nLANGUAGE: PromQL\nCODE:\n```\ncount(up) by (job)\n```\n\n----------------------------------------\n\nTITLE: Configuring Int64 Observer Callbacks using WithInt64Callback in Go\nDESCRIPTION: Introduces the `WithInt64Callback` option within the `go.opentelemetry.io/otel/metric/instrument` package. This option allows developers to provide and configure `int64` callback functions when creating Observer instruments.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-22_snippet_7\n\nLANGUAGE: Go\nCODE:\n```\ngo.opentelemetry.io/otel/metric/instrument\n// Option: WithInt64Callback\n```\n\n----------------------------------------\n\nTITLE: VictoriaLogs OTEL Logs Endpoint - Text\nDESCRIPTION: This is the HTTP write endpoint within Kubernetes for OpenTelemetry logs ingestion into VictoriaLogs, used in configuration of exporters or for direct ingestion.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/guides/getting-started-with-opentelemetry/README.md#2025-04-22_snippet_7\n\nLANGUAGE: text\nCODE:\n```\nhttp://victoria-logs-victoria-logs-single-server.default.svc.cluster.local.:9428/insert/opentelemetry/v1/logs\n```\n\n----------------------------------------\n\nTITLE: Viewing Commits Since Last Tag for OpenTelemetry Go\nDESCRIPTION: This snippet demonstrates how to view all commits since the last tag, which is useful for updating the changelog.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/go.opentelemetry.io/otel/RELEASING.md#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ngit --no-pager log --pretty=oneline \"<last tag>..HEAD\"\n```\n\n----------------------------------------\n\nTITLE: Modifying vmauth Response Headers (YAML)\nDESCRIPTION: YAML configuration snippet for `vmauth` illustrating how to set (`Foo: bar`) and remove (`Server:`) HTTP response headers using the `response_headers` option within the `unauthorized_user` section. These modifications are applied before sending the response from the backend back to the client.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmauth.md#2025-04-22_snippet_30\n\nLANGUAGE: yaml\nCODE:\n```\nunauthorized_user:\n  url_prefix: \"http://backend:1234/\"\n  response_headers:\n  - \"Foo: bar\"\n  - \"Server:\"\n\n```\n\n----------------------------------------\n\nTITLE: Basic Logging with Klog\nDESCRIPTION: Example showing how to initialize and use klog for basic logging operations by replacing glog imports and initializing flags.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/k8s.io/klog/v2/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n\"k8s.io/klog/v2\"\nklog.InitFlags(nil)\n```\n\n----------------------------------------\n\nTITLE: Specifying codespell package version for VictoriaMetrics project\nDESCRIPTION: This snippet defines the version of the codespell package to be used in the VictoriaMetrics project. It specifies version 2.4.1 of codespell, which is likely used for spell checking in the project's codebase or documentation.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/go.opentelemetry.io/otel/requirements.txt#2025-04-22_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\ncodespell==2.4.1\n```\n\n----------------------------------------\n\nTITLE: Defining Configuration Struct in Go\nDESCRIPTION: Demonstrates how to create a configuration struct named 'config' to hold configuration options for a package or specific type.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n// config contains configuration options for a thing.\ntype config struct {\n\t// options ...\n}\n```\n\n----------------------------------------\n\nTITLE: Row Max Stats Function in LogsQL\nDESCRIPTION: Shows how to return log entries with maximum values for specified fields.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_194\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m | stats row_max(duration) as log_with_max_duration\n```\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m | stats row_max(duration, _time, path, duration) as time_and_path_with_max_duration\n```\n\n----------------------------------------\n\nTITLE: Markdown Link References\nDESCRIPTION: Reference-style link definitions used in the Code of Conduct document to link to the Contributor Covenant homepage.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/CODE_OF_CONDUCT.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[homepage]: https://www.contributor-covenant.org\n```\n\n----------------------------------------\n\nTITLE: Retrieving Verbose Go Error Details (Using Custom Function)\nDESCRIPTION: Shows how to potentially retrieve a more detailed error message using a hypothetical `errors.Verbose(err)` function, presumably part of a custom MSAL errors package. This function would likely check the error type and call its `Verbose()` method if available, like the one defined on `CallErr`.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/AzureAD/microsoft-authentication-library-for-go/apps/errors/error_design.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n```go\nfmt.Println(errors.Verbose(err))\n```\n```\n\n----------------------------------------\n\nTITLE: Getting VMCluster Resource Status (sh)\nDESCRIPTION: This command uses `kubectl get vmclusters` to query the status of the custom resource `VMCluster` itself, as managed by the VM Operator. It provides a high-level overview of the cluster state.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/guides/getting-started-with-vm-operator/README.md#2025-04-22_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nkubectl get vmclusters\n```\n\n----------------------------------------\n\nTITLE: Installing vlogscli from Release Binary\nDESCRIPTION: Commands to download and extract the vlogscli binary from GitHub releases.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/querying/vlogscli.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncurl -L -O https://github.com/VictoriaMetrics/VictoriaMetrics/releases/download/v1.19.0-victorialogs/vlogscli-linux-amd64-v1.19.0-victorialogs.tar.gz\ntar xzf vlogscli-linux-amd64-v1.19.0-victorialogs.tar.gz\n./vlogscli-prod\n```\n\n----------------------------------------\n\nTITLE: Starting VictoriaLogs Single Server Docker Compose Environment\nDESCRIPTION: Command to spin up a Docker Compose environment with VictoriaLogs single server configuration. This setup includes VictoriaLogs, Vector, VictoriaMetrics, Grafana, vmalert, and Alertmanager.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/deployment/docker/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmake docker-vl-single-up\n```\n\n----------------------------------------\n\nTITLE: Displaying VictoriaMetrics Version Information (Command Line)\nDESCRIPTION: This command line flag is used to show the version of VictoriaMetrics. When executed, it will display the current version information of the VictoriaMetrics application.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmagent.md#2025-04-22_snippet_69\n\nLANGUAGE: plaintext\nCODE:\n```\n-version\n```\n\n----------------------------------------\n\nTITLE: Removing Labels from Metrics Subset in YAML\nDESCRIPTION: This YAML configuration demonstrates how to remove labels with names starting with 'foo_' prefix from metrics matching the 'a{b=\"c\"}' series selector.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/relabeling.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nscrape_configs:\n- job_name: test\n  static_configs:\n  - targets: [host123]\n  metric_relabel_configs:\n  - action: labeldrop\n    if: 'a{b=\"c\"}'\n    regex: \"foo_.*\"\n```\n\n----------------------------------------\n\nTITLE: Selecting a Single Series per Group in PromQL\nDESCRIPTION: The any function returns a single series per group from the time series returned by a query.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_139\n\nLANGUAGE: promql\nCODE:\n```\nany(q) by (group_labels)\n```\n\n----------------------------------------\n\nTITLE: Using bottomk aggregate function in PromQL\nDESCRIPTION: Aggregate function that returns up to k points with the smallest values across all time series. Operates on each group of points with the same timestamp independently.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_141\n\nLANGUAGE: promql\nCODE:\n```\nbottomk(k, q)\n```\n\n----------------------------------------\n\nTITLE: Using Map with xsync in Go\nDESCRIPTION: The snippet illustrates the usage of `Map` in xsync, showing operations like `Store`, `Load`, and `Size`. It provides enhancements like `Compute` over `sync.Map`, designed for high-performance scenarios with string keys.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/puzpuzpuz/xsync/v3/README.md#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\nm := xsync.NewMap()\nm.Store(\"foo\", \"bar\")\nv, ok := m.Load(\"foo\")\ns := m.Size()\n```\n\n----------------------------------------\n\nTITLE: Configuring vmanomaly YAML File\nDESCRIPTION: This YAML configuration snippet showcases the setup for vmanomaly, specifying scheduler, model, reader, and writer components. Dependencies include a suitable YAML parser and VictoriaMetrics for data access and anomaly analysis. Key parameters include the scheduler class, model class, data source URLs, and query expressions. Expected inputs are YAML configuration files, and it outputs configured services for anomaly detection.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/anomaly-detection/Scaling vmanomaly.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# https://docs.victoriametrics.com/anomaly-detection/components/scheduler/\\nschedulers:\\n  periodic_1d:  # alias\\n    class: 'periodic' # scheduler class\\n    infer_every: \"30s\"\\n    fit_every: \"1h\"\\n    fit_window: \"24h\"\\n\\n# https://docs.victoriametrics.com/anomaly-detection/components/models/\\nmodels:\\n  zscore:  # we can set up alias for model\\n    class: 'zscore'  # model class\\n    z_threshold: 3.5\\n    queries: ['cpu_seconds_total', 'host_network_receive_errors']\\n\\n# https://docs.victoriametrics.com/anomaly-detection/components/reader/#vm-reader\\nreader:\\n  datasource_url: \"https://play.victoriametrics.com/\"\\n  tenant_id: \"0:0\"\\n  class: 'vm'\\n  sampling_period: \"30s\"  # what data resolution to fetch from VictoriaMetrics' /query_range endpoint\\n  queries:  # aliases to MetricsQL expressions\\n    cpu_seconds_total:\\n      expr: 'avg(rate(node_cpu_seconds_total[5m])) by (mode)'\\n    host_network_receive_errors:\\n      expr: 'rate(node_network_receive_errs_total[3m]) / rate(node_network_receive_packets_total[3m])'\\n\\n# https://docs.victoriametrics.com/anomaly-detection/components/writer/\\nwriter:\\n  datasource_url: \"http://victoriametrics:8428/\"\n```\n\n----------------------------------------\n\nTITLE: Determining Span Status from HTTP Status Code in Go\nDESCRIPTION: Use SpanStatusFromHTTPStatusCodeAndSpanKind to determine span status based on HTTP status code and span kind, excluding 4XX errors for server spans.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-22_snippet_44\n\nLANGUAGE: Go\nCODE:\n```\nimport \"go.opentelemetry.io/otel/semconv\"\n\nstatus := semconv.SpanStatusFromHTTPStatusCodeAndSpanKind(httpStatusCode, spanKind)\n```\n\n----------------------------------------\n\nTITLE: Go Version Security Upgrade\nDESCRIPTION: Upgrade of Go builder from Go1.21.6 to Go1.22.0 for security improvements and bug fixes.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/changelog/CHANGELOG_2024.md#2025-04-22_snippet_33\n\nLANGUAGE: go\nCODE:\n```\n1.22.0\n```\n\n----------------------------------------\n\nTITLE: Quoted Word Search in LogsQL\nDESCRIPTION: A LogsQL query that searches for the word 'and' by wrapping it in quotes to prevent conflict with LogsQL keywords.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_1\n\nLANGUAGE: logsql\nCODE:\n```\n\"and\"\n```\n\n----------------------------------------\n\nTITLE: Shutting Down Docker Compose Environment for DataDog and VictoriaLogs Integration\nDESCRIPTION: These commands stop the Docker Compose environment and remove the containers. This ensures a clean shutdown of all services.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/deployment/docker/victorialogs/datadog-agent/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose down\ndocker compose rm -f\n```\n\n----------------------------------------\n\nTITLE: Finding logs with specific phrases using phrase filter in LogsQL\nDESCRIPTION: Query that finds logs containing the exact phrase 'cannot open file' from the last 5 minutes using phrase filter.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/logsql-examples.md#2025-04-22_snippet_22\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m \"cannot open file\"\n```\n\n----------------------------------------\n\nTITLE: Remote Write with Basic Authentication\nDESCRIPTION: Configuration for remote write with basic authentication credentials. Includes username and password configuration for secure metrics forwarding.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/data-ingestion/Alloy.md#2025-04-22_snippet_2\n\nLANGUAGE: Alloy\nCODE:\n```\nprometheus.exporter.unix \"nodeexporter\" {}\n\nprometheus.scrape \"nodeexporter\" {\n  targets = prometheus.exporter.unix.nodeexporter.targets\n  forward_to = [prometheus.remote_write.victoriametrics.receiver]\n}\n\nprometheus.remote_write \"victoriametrics\" {\n  endpoint {\n    url = \"https://<victoriametrics_url>/prometheus/api/v1/write\"\n    basic_auth {\n      username = \"<victoriametrics_user>\"\n      password = \"<victoriametrics_password>\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Go Structs for Protobuf Messages - Go\nDESCRIPTION: This snippet defines Go structs for the timeseries and sample protobuf messages. The 'Timeseries' struct contains a Name (string) and Samples ([]Sample), while 'Sample' contains a Value (float64) and Timestamp (int64). These fields correspond to their proto message counterparts and enable manual marshaling and unmarshaling with easyproto. No external dependencies needed at this stage.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/VictoriaMetrics/easyproto/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype Timeseries struct {\n\tName    string\n\tSamples []Sample\n}\n\ntype Sample struct {\n\tValue     float64\n\tTimestamp int64\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Vector Elasticsearch Sink for VictoriaLogs\nDESCRIPTION: This YAML configuration sets up Vector to send logs to VictoriaLogs using the Elasticsearch sink type. It specifies the endpoint, API version, compression, and query parameters for log field mapping.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/data-ingestion/Vector.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsinks:\n  vlogs:\n    inputs:\n      - your_input\n    type: elasticsearch\n    endpoints:\n      - http://localhost:9428/insert/elasticsearch/\n    api_version: v8\n    compression: gzip\n    healthcheck:\n      enabled: false\n    query:\n      _msg_field: message\n      _time_field: timestamp\n      _stream_fields: host,container_name\n```\n\n----------------------------------------\n\nTITLE: Renaming Log Fields - LogSQL\nDESCRIPTION: The `rename` pipe allows renaming of log fields from one name to another within the results of a query. It can handle multiple fields at once and supports the optional keyword 'as' for clarity. Dependencies involve using VictoriaMetrics with its syntax for accessing log data.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_121\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m | rename host as server\n```\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m | rename host as instance, app as job\n```\n\n----------------------------------------\n\nTITLE: Fixing vmagent Label Handling with -remoteWrite.label\nDESCRIPTION: Explains a bugfix ensuring labels specified via the '-remoteWrite.label' command-line flag in vmagent are applied *after* relabeling ('-remoteWrite.urlRelabelConfigs') and stream aggregation ('-remoteWrite.streamAggr.config'), just before sending samples to '-remoteWrite.url'. This prevents labels from being lost or incorrectly transformed and facilitates vmagent instance identification in cluster mode (issue #4247).\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/changelog/CHANGELOG_2023.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# Flag to add labels just before remote write\n-remoteWrite.label\n\n# Configuration flags for processing stages before label addition\n-remoteWrite.urlRelabelConfigs\n-remoteWrite.streamAggr.config\n-remoteWrite.url\n```\n\n----------------------------------------\n\nTITLE: Downloading and Extracting VictoriaLogs Release\nDESCRIPTION: Commands to download the latest VictoriaLogs release and extract it on a Linux system.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/cluster.md#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ncurl -L -O https://github.com/VictoriaMetrics/VictoriaMetrics/releases/download/v1.19.0-victorialogs/victoria-logs-linux-amd64-v1.19.0-victorialogs.tar.gz\ntar xzf victoria-logs-linux-amd64-v1.19.0-victorialogs.tar.gz\n```\n\n----------------------------------------\n\nTITLE: Reverse String Preserving Grapheme Clusters\nDESCRIPTION: This snippet shows how to reverse a string while preserving grapheme clusters using 'ReverseString' function from the uniseg package. Requires the package in a Go environment.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/rivo/uniseg/README.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nfmt.Println(uniseg.ReverseString(\"🇩🇪🏳️‍🌈\"))\n// 🏳️‍🌈🇩🇪\n```\n\n----------------------------------------\n\nTITLE: Example Export Output After VictoriaMetrics Data Update\nDESCRIPTION: Illustrates the expected JSON Lines output when exporting the metric after the update process (export, modify, delete, import). The `values` array should reflect the new, modified values (`17179869184`), confirming the update was successful.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/guides/guide-delete-or-replace-metrics/README.md#2025-04-22_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"metric\": {\n    \"__name__\": \"node_memory_MemTotal_bytes\",\n    \"job\": \"hostname.com\",\n    \"instance\": \"node-exporter:9100\"\n  },\n  \"values\": [\n    17179869184,\n    17179869184,\n    17179869184,\n    17179869184\n  ],\n  \"timestamps\": [\n    1656669031378,\n    1656669032378,\n    1656669033378,\n    1656669034378\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Using Escaped Characters in Metric and Label Names in MetricsQL\nDESCRIPTION: Demonstrates the use of backslash-escaped characters in metric names and label names within MetricsQL. The example `foo\\-bar{baz\\=aa=\"b\"}` selects a time series named `foo-bar` with a label `baz=aa` set to `\"b\"`. It also mentions support for `\\xXX` and `\\uXXXX` escape sequences.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_18\n\nLANGUAGE: metricsql\nCODE:\n```\nfoo\\-bar{baz\\=aa=\"b\"}\n```\n\n----------------------------------------\n\nTITLE: Initializing procfs and Reading /proc/stat in Go\nDESCRIPTION: This Go snippet shows how to initialize the `procfs` filesystem by mounting `/proc` using `procfs.NewFS`. It then demonstrates reading system statistics (like those found in `/proc/stat`) using the `Stat()` method on the initialized filesystem handle (`fs`). Requires the `github.com/prometheus/procfs` package.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/prometheus/procfs/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n```go\nfs, err := procfs.NewFS(\"/proc\")\nstats, err := fs.Stat()\n```\n```\n\n----------------------------------------\n\nTITLE: Model Skipped Run Log (No Valid Output)\nDESCRIPTION: Logs a warning when an inference run is skipped because the model failed to produce any valid or finite outputs (e.g., anomaly scores). This is indicated by the `vmanomaly_model_runs_skipped` metric. Placeholders `{{scheduler_alias}}`, `{{model_alias}}`, and `{{query_key}}` provide context.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/anomaly-detection/components/monitoring.md#2025-04-22_snippet_13\n\nLANGUAGE: text\nCODE:\n```\n[Scheduler {{scheduler_alias}}] Skipping run for stage 'infer' for model '{{model_alias}}' (query_key: {{query_key}}): No (valid) datapoints produced.\n```\n\n----------------------------------------\n\nTITLE: Introducing Named Callback Function Type for Meter Registration in Go\nDESCRIPTION: Adds the `Callback` function type to the `go.opentelemetry.io/otel/metric` package. This named type is used when registering callbacks with a `Meter`, replacing previous inline function definitions.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-22_snippet_10\n\nLANGUAGE: Go\nCODE:\n```\ngo.opentelemetry.io/otel/metric\n// Type: Callback func(context.Context, Observer) error\n```\n\n----------------------------------------\n\nTITLE: Querying Metric Names Usage Statistics via VictoriaMetrics API Endpoint - JSON\nDESCRIPTION: This snippet shows a sample JSON response from the API endpoint that returns metric names usage statistics in VictoriaMetrics. It includes the status, record count, and individual metric records with metric name, query request count, and last request timestamp. There are no dependencies for this snippet as it is a response format; the response will contain the queried metric names, counts, and timestamps, with field names indicating their meaning.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/README.md#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \"status\": \"success\",\\n  \"statsSollectedSince\": 1737534094,\\n  \"statsCollectedRecordsTotal\": 2,\\n  \"records\": [\\n    {\\n      \"metricName\": \"node_disk_writes_completed_total\",\\n      \"queryRequests\": 50,\\n      \"lastRequestTimestamp\": 1737534262\\n    },\\n    {\\n      \"metricName\": \"node_network_transmit_errs_total\",\\n      \"queryRequestsCount\": 100,\\n      \"lastRequestTimestamp\": 1737534262\\n    }\\n  ]\\n}\n```\n\n----------------------------------------\n\nTITLE: Using step intervals in MetricsQL queries\nDESCRIPTION: Shows how to use step intervals (i) in offset and lookbehind window specifications in MetricsQL queries.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/MetricsQL.md#2025-04-22_snippet_5\n\nLANGUAGE: metricsql\nCODE:\n```\nrate(metric[10i] offset 5i)\n```\n\n----------------------------------------\n\nTITLE: Building VictoriaLogs from Source - Run Binary\nDESCRIPTION: Command to run the built VictoriaLogs binary with specified data storage path.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/QuickStart.md#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nbin/victoria-logs -storageDataPath=victoria-logs-data\n```\n\n----------------------------------------\n\nTITLE: Running vmanomaly Docker Container Shell\nDESCRIPTION: This shell command runs the `vmanomaly` Docker container interactively. It mounts the license file, the custom Python model file (`custom_model.py` mapped to `/vmanomaly/model/custom.py` inside the container), and the YAML configuration file (`custom.yaml`) as volumes using the `-v` flag. The configuration file path (`/config.yaml`) and the license file path (`/license`) are passed as arguments to the `vmanomaly` command within the container.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/anomaly-detection/components/models.md#2025-04-22_snippet_28\n\nLANGUAGE: sh\nCODE:\n```\ndocker run -it \\\n-v $(PWD)/license:/license \\\n-v $(PWD)/custom_model.py:/vmanomaly/model/custom.py \\\n-v $(PWD)/custom.yaml:/config.yaml \\\nvictoriametrics/vmanomaly:v1.21.0 /config.yaml \\\n--licenseFile=/license\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Go Module Versioning in go.mod and Import Statements\nDESCRIPTION: This snippet illustrates how to include the major version number in module paths and import statements for Go modules version v2 or higher. It shows the correct format for go.mod files and import statements.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/go.opentelemetry.io/otel/VERSIONING.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule go.opentelemetry.io/otel/v2\nrequire go.opentelemetry.io/otel/v2 v2.0.1\n\nimport \"go.opentelemetry.io/otel/v2/trace\"\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Print Functions in Go\nDESCRIPTION: Demonstrates how to create custom print functions using the 'color' package, which provides convenience functions for printing text with specific color attributes.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/fatih/color/README.md#2025-04-22_snippet_5\n\nLANGUAGE: Go\nCODE:\n```\n\"// Create a custom print function for convenience\\nred := color.New(color.FgRed).PrintfFunc()\\nred(\\\"Warning\\\")\\nred(\\\"Error: %s\\\", err)\\n\\n// Mix up multiple attributes\\nnotice := color.New(color.Bold, color.FgGreen).PrintlnFunc()\\nnotice(\\\"Don\\'t forget this...\\\")\\n\"\n```\n\n----------------------------------------\n\nTITLE: Basic usage of Uber's atomic package with uint32\nDESCRIPTION: Example showing how to use the atomic package to perform atomic operations on a uint32 value, including store, subtract, and compare-and-swap operations.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/go.uber.org/atomic/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nvar atom atomic.Uint32\natom.Store(42)\natom.Sub(2)\natom.CAS(40, 11)\n```\n\n----------------------------------------\n\nTITLE: Outlier Detection using IQR in PromQL\nDESCRIPTION: Detects outliers using Interquartile Range method over raw samples within a lookbehind window for time series. Useful for anomaly detection in gauge values.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/MetricsQL.md#2025-04-22_snippet_47\n\nLANGUAGE: promql\nCODE:\n```\noutlier_iqr_over_time(series_selector[d])\n```\n\n----------------------------------------\n\nTITLE: Updating Zipkin Exporter Semantic Conventions Usage in Go\nDESCRIPTION: Updates the Zipkin exporter (`go.opentelemetry.io/otel/exporters/zipkin`) to utilize semantic conventions from `v1.16.0`. Consequently, it now relies on `net.sock.peer.*` attributes for determining the remote endpoint instead of the removed `net.peer.ip` or `http.host` attributes.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-22_snippet_31\n\nLANGUAGE: Go\nCODE:\n```\ngo.opentelemetry.io/otel/exporters/zipkin\n// Change: Uses semconv v1.16.0 (net.sock.peer.* attributes for remote endpoint).\n```\n\n----------------------------------------\n\nTITLE: Logging Informational Messages with V-Level and Key-Value Pairs using logr in Go\nDESCRIPTION: This Go code demonstrates logging an informational message with logr at verbosity level 4 (V(4)). It converts a format-string based log (like klog.Infof) into a structured one by using a constant message string and appending relevant data (retries, seconds, url) as key-value pairs. This allows for easier querying and filtering based on these keys.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/go-logr/logr/README.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nlogger.V(4).Info(\"got a retry-after response when requesting url\", \"attempt\", retries, \"after seconds\", seconds, \"url\", url)\n```\n\n----------------------------------------\n\nTITLE: Overview of vmbackupmanager CLI Commands (Shell)\nDESCRIPTION: Summary of the available `vmbackupmanager` CLI commands for interacting with backups and restores. Includes subcommands for listing, locking, unlocking backups, and creating, getting, deleting restore marks, as well as initiating a restore.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmbackupmanager.md#2025-04-22_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\nvmbackupmanager backup \n\n  vmbackupmanager backup list \n    List backups in remote storage\n\n  vmbackupmanager backup lock\n    Locks backup in remote storage against deletion\n\n  vmbackupmanager backup unlock\n    Unlocks backup in remote storage for deletion\n\nvmbackupmanager restore\n  Restore backup specified by restore mark if it exists\n\n  vmbackupmanager restore get \n    Get restore mark if it exists\n\n  vmbackupmanager restore delete \n    Delete restore mark if it exists\n\n  vmbackupmanager restore create [backup_name]\n    Create restore mark\n\n```\n\n----------------------------------------\n\nTITLE: Performing Bitwise OR Operation in MetricsQL\nDESCRIPTION: A transform function that calculates the bitwise OR (`v | mask`) for every data point `v` in the time series returned by `q`, using the provided integer `mask`. If `q` is a series selector, `default_rollup()` is applied first. Metric names are stripped by default; use `keep_metric_names` to retain them.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_74\n\nLANGUAGE: MetricsQL\nCODE:\n```\n`bitmap_or(q, mask)`\n```\n\n----------------------------------------\n\nTITLE: Using sort_by_label Function in PromQL\nDESCRIPTION: Sorts series in ascending order by given label values.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/MetricsQL.md#2025-04-22_snippet_114\n\nLANGUAGE: PromQL\nCODE:\n```\nsort_by_label(foo, \"bar\")\n```\n\n----------------------------------------\n\nTITLE: Counting Less-than-or-Equal Samples with count_le_over_time - MetricsQL - Markdown\nDESCRIPTION: Describes count_le_over_time, which counts sample values not exceeding le in the lookbehind window of each extracted series. Designed for gauge type use cases, and like similar rollups, removes metric names unless instructed by a modifier.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_8\n\nLANGUAGE: Markdown\nCODE:\n```\n`count_le_over_time(series_selector[d], le)`\n```\n\n----------------------------------------\n\nTITLE: Configuring Multitenancy Settings\nDESCRIPTION: Example showing how to set AccountID and ProjectID for multitenancy support using command-line flags.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/querying/vlogscli.md#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n./vlogscli -accountID=123 -projectID=456\n```\n\n----------------------------------------\n\nTITLE: Using Standard Colors in Go\nDESCRIPTION: Examples of using standard colors from the 'color' package to print text in different colors using default helper functions. These functions automatically add a newline at the end and make use of default foreground colors.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/fatih/color/README.md#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\n\"// Print with default helper functions\\ncolor.Cyan(\\\"Prints text in cyan.\\\")\\n\\n// A newline will be appended automatically\\ncolor.Blue(\\\"Prints %s in blue.\\\", \\\"text\\\")\\n\\n// These are using the default foreground colors\\ncolor.Red(\\\"We have red\\\")\\ncolor.Magenta(\\\"And many others ..\\\")\\n\"\n```\n\n----------------------------------------\n\nTITLE: Example JSON output for stream_ids - JSON\nDESCRIPTION: Demonstrates the JSON output format returned when querying stream IDs. The output includes an array of objects, each containing the stream ID and the number of hits for each ID. Expects the API to return data in this structure.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/querying/README.md#2025-04-22_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"values\": [\n    {\n      \"value\": \"0000000000000000106955b1744a71b78bd3a88c755751e8\",\n      \"hits\": 442953\n    },\n    {\n      \"value\": \"0000000000000000b80988e6012df3520a8e20cd5353c52b\",\n      \"hits\": 59349\n    },\n    {\n      \"value\": \"0000000000000000f8d02151e40a6cbbb1edb2050ea910ba\",\n      \"hits\": 59277\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Small /sys Files in Go\nDESCRIPTION: Demonstrates reading a small file typically found in the `/sys` filesystem (e.g., `/sys/class/power_supply/BAT0/capacity`) using the internal `util.SysReadFile` utility function in Go. This function is optimized for reading these small, often single-value files without checking the file size beforehand.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/prometheus/procfs/CONTRIBUTING.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n    data, err := util.SysReadFile(\"/sys/class/power_supply/BAT0/capacity\")\n```\n\n----------------------------------------\n\nTITLE: Implicit default_rollup Wrapping: Transform Function Argument (MetricsQL)\nDESCRIPTION: Example `abs(temperature)` where `temperature` is a series selector passed to a transform function (`abs`). Since `abs` is not a rollup function, the argument `temperature` is implicitly wrapped with `default_rollup`.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_163\n\nLANGUAGE: MetricsQL\nCODE:\n```\nabs(temperature)\n```\n\n----------------------------------------\n\nTITLE: Go Module Dependencies Declaration\nDESCRIPTION: List of Go module dependencies with explicit version requirements and import paths. Each entry specifies the module path, version constraint, and any specific Go version requirements.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/modules.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ngithub.com/grafana/regexp\ngithub.com/grafana/regexp/syntax\n# github.com/hashicorp/go-version v1.7.0\n## explicit\ngithub.com/hashicorp/go-version\n# github.com/influxdata/influxdb v1.11.8\n## explicit; go 1.22\ngithub.com/influxdata/influxdb/client/v2\ngithub.com/influxdata/influxdb/models\ngithub.com/influxdata/influxdb/pkg/escape\n```\n\n----------------------------------------\n\nTITLE: Ignoring Specific Fields in Promtail Configuration\nDESCRIPTION: This snippet shows how to configure VictoriaLogs to ignore specific fields ('filename' and 'stream') during log ingestion.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/data-ingestion/Promtail.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nclients:\n  - url: 'http://localhost:9428/insert/loki/api/v1/push?ignore_fields=filename,stream'\n```\n\n----------------------------------------\n\nTITLE: Collecting Memory Profile from VMAuth\nDESCRIPTION: Command to collect a memory heap profile from VMAuth running on localhost port 8427. The profile can be later analyzed with go tool pprof to investigate memory usage patterns.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmauth.md#2025-04-22_snippet_50\n\nLANGUAGE: sh\nCODE:\n```\ncurl http://0.0.0.0:8427/debug/pprof/heap > mem.pprof\n```\n\n----------------------------------------\n\nTITLE: Specifying Stream Fields in Promtail Configuration\nDESCRIPTION: This snippet demonstrates how to override the default stream fields used by VictoriaLogs, limiting them to 'instance' and 'job'.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/data-ingestion/Promtail.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nclients:\n  - url: \"http://localhost:9428/insert/loki/api/v1/push?_stream_fields=instance,job\"\n```\n\n----------------------------------------\n\nTITLE: Configuring vmagent to Ignore TLS/SSL Errors\nDESCRIPTION: Configuration for vmagent to ignore TLS/SSL certificate errors when connecting to VictoriaMetrics. This is useful for self-signed certificates but poses a security risk.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/data-ingestion/vmagent.md#2025-04-22_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\n/path/to/vmagent -remoteWrite.url=https://<victoriametrics_url>/api/v1/write \\\n -remoteWrite.tlsInsecureSkipVerify\n```\n\n----------------------------------------\n\nTITLE: Adding Random Jitter for BREACH Mitigation in Go Gzip Middleware\nDESCRIPTION: This code snippet illustrates a config option for improving security against BREACH attacks in compressed HTTP responses. The 'RandomJitter' function returns an option to add 1 to n random bytes to the Gzip output, potentially using a content-buffered approach and optional 'paranoid' hashing. Parameters include 'n' (jitter size), 'buffer' (size of data to buffer before applying jitter), and 'paranoid' (security toggle for hashing method). Inputs set how much random data and buffer length are used; the function outputs a Gzip wrapper option for use in configuration. Limitations: negative buffer disables content dependence, reducing security. Proper integration in a Gzip handler setup is required to activate this mitigation.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/klauspost/compress/gzhttp/README.md#2025-04-22_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\n// RandomJitter adds 1->n random bytes to output based on checksum of payload.\n// Specify the amount of input to buffer before applying jitter.\n// This should cover the sensitive part of your response.\n// This can be used to obfuscate the exact compressed size.\n// Specifying 0 will use a buffer size of 64KB.\n// 'paranoid' will use a slower hashing function, that MAY provide more safety. \n// If a negative buffer is given, the amount of jitter will not be content dependent.\n// This provides *less* security than applying content based jitter.\nfunc RandomJitter(n, buffer int, paranoid bool) option\n...\n```\n\n----------------------------------------\n\nTITLE: Using where Alias for filter Pipe in LogSQL\nDESCRIPTION: This snippet demonstrates the use of the where alias instead of filter to achieve the same result as the previous query.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_99\n\nLANGUAGE: logsql\nCODE:\n```\n_time:1h error | stats by (host) count() logs_count | where logs_count:> 1_000\n```\n\n----------------------------------------\n\nTITLE: Data Type Conversion Example\nDESCRIPTION: Example showing how arrays, numbers, and boolean values are converted to strings for full-text search compatibility.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/keyConcepts.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"tags\": [\"foo\", \"bar\"],\n  \"offset\": 12345,\n  \"is_error\": false\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"tags\": \"[\\\"foo\\\", \\\"bar\\\"]\",\n  \"offset\": \"12345\",\n  \"is_error\": \"false\"\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Exported VictoriaMetrics Data using Shell and jq\nDESCRIPTION: Uses `cat` to read the contents of the `data.jsonl` file (created in the previous step) and pipes it to `jq` for pretty-printing the JSON Lines data. This allows verification of the exported time series data.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/guides/guide-delete-or-replace-metrics/README.md#2025-04-22_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ncat data.jsonl | jq\n```\n\n----------------------------------------\n\nTITLE: Common vmctl Command-Line Flags\nDESCRIPTION: Lists flags available for all vmctl commands including silent mode, verbosity settings, and progress bar configuration options.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmctl.md#2025-04-22_snippet_24\n\nLANGUAGE: shellhelp\nCODE:\n```\n  -s\n     Whether to run in silent mode. If set to true no confirmation prompts will appear. (default false)\n  -verbose\n     Whether to enable verbosity in logs output. (default false)\n  -disable-progress-bar\n     Whether to disable progress bar during the import. (default false)\n```\n\n----------------------------------------\n\nTITLE: Installing S2 Command-Line Tools (s2c, s2d) using Go Install\nDESCRIPTION: Installs the `s2c` (S2 compressor) and `s2d` (S2 decompressor) command-line tools globally using `go install`. Requires Go to be installed and configured in the system's PATH.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/klauspost/compress/s2/README.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ngo install github.com/klauspost/compress/s2/cmd/s2c@latest && go install github.com/klauspost/compress/s2/cmd/s2d@latest\n```\n\n----------------------------------------\n\nTITLE: Checking Ingestion Rate in Prometheus\nDESCRIPTION: A MetricsQL query to determine the sample ingestion rate in Prometheus over the last 24 hours. This metric is crucial for storage and resource planning.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/guides/understand-your-setup-size/README.md#2025-04-22_snippet_3\n\nLANGUAGE: metricsql\nCODE:\n```\nsum(rate(prometheus_tsdb_head_samples_appended_total[24h]))\n```\n\n----------------------------------------\n\nTITLE: Example Exported Metrics (HTTP /api/put) - VictoriaMetrics - JSON\nDESCRIPTION: These JSON lines represent the output from the export API after ingesting multiple metrics with the OpenTSDB HTTP protocol. Each line corresponds to a single ingested time series, including metric name, optional tags, values array, and timestamps array. Partial data (such as missing tags) can occur depending on what was sent during ingestion.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/README.md#2025-04-22_snippet_32\n\nLANGUAGE: json\nCODE:\n```\n{\"metric\":{\"__name__\":\"foo\"},\"values\":[45.34],\"timestamps\":[1566464846000]}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\"metric\":{\"__name__\":\"bar\"},\"values\":[43],\"timestamps\":[1566464846000]}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\"metric\":{\"__name__\":\"x.y.z\",\"t1\":\"v1\",\"t2\":\"v2\"},\"values\":[45.34],\"timestamps\":[1566464763000]}\n```\n\n----------------------------------------\n\nTITLE: Authenticating with System-Assigned Managed Identity using autorest/adal in Go\nDESCRIPTION: This Go snippet shows how to authenticate using a system-assigned managed identity with the `autorest/adal` library. It uses `adal.NewServicePrincipalTokenFromManagedIdentity` specifying the resource audience, and then assigns the resulting token provider to an older SDK client via `autorest.NewBearerAuthorizer`.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/Azure/azure-sdk-for-go/sdk/azidentity/MIGRATION.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"github.com/Azure/azure-sdk-for-go/services/resources/mgmt/2018-06-01/subscriptions\"\n    \"github.com/Azure/go-autorest/autorest\"\n    \"github.com/Azure/go-autorest/autorest/adal\"\n)\n\nspt, err := adal.NewServicePrincipalTokenFromManagedIdentity(\"https://management.azure.com/\", nil)\nhandle(err)\n\nclient := subscriptions.NewClient()\nclient.Authorizer = autorest.NewBearerAuthorizer(spt)\n```\n\n----------------------------------------\n\nTITLE: Building Production Docker Images with Custom Base Image\nDESCRIPTION: Command for building a VictoriaMetrics Docker image using a custom base image instead of the default Alpine Linux.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/README.md#2025-04-22_snippet_38\n\nLANGUAGE: sh\nCODE:\n```\nROOT_IMAGE=scratch make package-victoria-metrics\n```\n\n----------------------------------------\n\nTITLE: Configuring vmbackupmanager Backup Interval\nDESCRIPTION: Command-line flag for specifying a custom backup interval in vmbackupmanager.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/changelog/CHANGELOG_2024.md#2025-04-22_snippet_27\n\nLANGUAGE: shell\nCODE:\n```\n-backupInterval\n```\n\n----------------------------------------\n\nTITLE: Scaling Down VictoriaMetrics Storage Replicas\nDESCRIPTION: This command scales down the number of VictoriaMetrics storage replicas to 2, used for testing high availability.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/guides/k8s-ha-monitoring-via-vm-cluster/README.md#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nkubectl scale sts vmcluster-victoria-metrics-cluster-vmstorage --replicas=2\n```\n\n----------------------------------------\n\nTITLE: Unpacking JSON Fields Skipping Empty Results using LogSQL\nDESCRIPTION: This LogSQL query selects logs from the last 5 minutes (`_time:5m`) and unpacks the `ip` and `host` fields from the default `_msg` field's JSON. The `skip_empty_results` option ensures that if the unpacked values for `ip` or `host` are empty, the original values of these fields (if they exist) are preserved.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_153\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m | unpack_json fields (ip, host) skip_empty_results\n```\n\n----------------------------------------\n\nTITLE: Row Any Stats Function in LogsQL\nDESCRIPTION: Demonstrates how to return arbitrary log entries per stats group.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_193\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m | stats by (_stream) row_any() as sample_row\n```\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m | stats row_any(_time, path) as time_and_path_sample\n```\n\n----------------------------------------\n\nTITLE: Defining Alerts for License Expiry with vmalert - YAML\nDESCRIPTION: This YAML snippet provides Prometheus-style alerting rules usable with vmalert for monitoring close license expiration. The 'groups' section defines alerting rules ('LicenseExpiresInLessThan30Days' and 'LicenseExpiresInLessThan7Days') with severity, summary, and description annotations. Requires the Prometheus metric 'vm_license_expires_in_seconds' to be configured (typically by vmanomaly). Rule parameters control the time thresholds (30 days, 7 days) for warning and critical notification. The YAML is expected as part of vmalert configuration.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/anomaly-detection/QuickStart.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ngroups:\n  - name: vm-license\n    # note the `job` label and update accordingly to your setup\n    rules:\n      - alert: LicenseExpiresInLessThan30Days\n        expr: vm_license_expires_in_seconds < 30 * 24 * 3600\n        labels:\n          severity: warning\n        annotations:\n          summary: \"{{ $labels.job }} instance {{ $labels.instance }} license expires in less than 30 days\"\n          description: \"{{ $labels.instance }} of job {{ $labels.job }} license expires in {{ $value | humanizeDuration }}. \n            Please make sure to update the license before it expires.\"\n\n      - alert: LicenseExpiresInLessThan7Days\n        expr: vm_license_expires_in_seconds < 7 * 24 * 3600\n        labels:\n          severity: critical\n        annotations:\n          summary: \"{{ $labels.job }} instance {{ $labels.instance }} license expires in less than 7 days\"\n          description: \"{{ $labels.instance }} of job {{ $labels.job }} license expires in {{ $value | humanizeDuration }}. \n            Please make sure to update the license before it expires.\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Historical Logs with Live Tailing in Bash\nDESCRIPTION: This command retrieves historical logs from the past hour before starting live tailing using the 'start_offset' parameter.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/querying/README.md#2025-04-22_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\ncurl -N http://localhost:9428/select/logsql/tail -d 'query=*' -d 'start_offset=1h'\n```\n\n----------------------------------------\n\nTITLE: Counting Distinct Values in PromQL\nDESCRIPTION: The distinct function calculates the number of unique values per each group of points with the same timestamp.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_144\n\nLANGUAGE: promql\nCODE:\n```\ndistinct(q)\n```\n\n----------------------------------------\n\nTITLE: Building VMAlert Docker Image\nDESCRIPTION: Shell commands for building and pushing a custom VMAlert docker image to a private repository.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmalert.md#2025-04-22_snippet_33\n\nLANGUAGE: sh\nCODE:\n```\nmake package-vmalert\ndocker tag victoria-metrics/vmalert:version my-repo:my-version-name\ndocker push my-repo:my-version-name\n```\n\n----------------------------------------\n\nTITLE: Declaring Standard Error Output Variable - Go\nDESCRIPTION: This variable declaration assigns io.Writer representing the operating system\\'s standard error stream to Stderr. It allows functions in this package or applications using this package to redirect error output by replacing the default os.Stderr writer. The variable is global and can be reassigned if custom error handling is needed.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/pkg/browser/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nvar Stderr io.Writer = os.Stderr\n```\n\n----------------------------------------\n\nTITLE: Filtering Metrics by Name Pattern using MetricsQL\nDESCRIPTION: Query to filter multiple metrics using regex pattern matching on the __name__ label. Returns series matching 'requests_error_total' and 'requests_success_total'.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/keyConcepts/keyConcepts.md#2025-04-22_snippet_19\n\nLANGUAGE: metricsql\nCODE:\n```\n{__name__=~\"requests_(error|success)_total\"}\n```\n\n----------------------------------------\n\nTITLE: Importing gRPC Package in Go\nDESCRIPTION: The basic import statement needed to use gRPC in Go applications. This simple import will trigger the Go build system to automatically fetch the necessary dependencies when building, running, or testing your code.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/google.golang.org/grpc/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport \"google.golang.org/grpc\"\n```\n\n----------------------------------------\n\nTITLE: Counting Event-based Metrics with Stream Aggregation\nDESCRIPTION: This configuration counts the number of event-based metrics (hits and clicks) in 30-second intervals, useful for applications that generate individual metrics for each event.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/stream-aggregation.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n- match: '{__name__=~\"hits|clicks\"}'\n  interval: 30s\n  outputs: [count_samples]\n```\n\n----------------------------------------\n\nTITLE: Unmarshalling with Flat Paths in Koanf\nDESCRIPTION: This snippet demonstrates how to unmarshal nested structures into a flat target structure using the UnmarshalConf.FlatPaths flag in Koanf. It shows examples of unmarshalling the whole root and a child structure.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/knadh/koanf/v2/README.md#2025-04-22_snippet_9\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\n\t\"github.com/knadh/koanf/v2\"\n\t\"github.com/knadh/koanf/parsers/json\"\n\t\"github.com/knadh/koanf/providers/file\"\n)\n\n// Global koanf instance. Use . as the key path delimiter. This can be / or anything.\nvar k = koanf.New(\".\")\n\nfunc main() {\n\t// Load JSON config.\n\tif err := k.Load(file.Provider(\"mock/mock.json\"), json.Parser()); err != nil {\n\t\tlog.Fatalf(\"error loading config: %v\", err)\n\t}\n\n\ttype rootFlat struct {\n\t\tType                        string            `koanf:\"type\"`\n\t\tEmpty                       map[string]string `koanf:\"empty\"`\n\t\tParent1Name                 string            `koanf:\"parent1.name\"`\n\t\tParent1ID                   int               `koanf:\"parent1.id\"`\n\t\tParent1Child1Name           string            `koanf:\"parent1.child1.name\"`\n\t\tParent1Child1Type           string            `koanf:\"parent1.child1.type\"`\n\t\tParent1Child1Empty          map[string]string `koanf:\"parent1.child1.empty\"`\n\t\tParent1Child1Grandchild1IDs []int             `koanf:\"parent1.child1.grandchild1.ids\"`\n\t\tParent1Child1Grandchild1On  bool              `koanf:\"parent1.child1.grandchild1.on\"`\n\t}\n\n\t// Unmarshal the whole root with FlatPaths: True.\n\tvar o1 rootFlat\n\tk.UnmarshalWithConf(\"\", &o1, koanf.UnmarshalConf{Tag: \"koanf\", FlatPaths: true})\n\tfmt.Println(o1)\n\n\t// Unmarshal a child structure of \"parent1\".\n\ttype subFlat struct {\n\t\tName                 string            `koanf:\"name\"`\n\t\tID                   int               `koanf:\"id\"`\n\t\tChild1Name           string            `koanf:\"child1.name\"`\n\t\tChild1Type           string            `koanf:\"child1.type\"`\n\t\tChild1Empty          map[string]string `koanf:\"child1.empty\"`\n\t\tChild1Grandchild1IDs []int             `koanf:\"child1.grandchild1.ids\"`\n\t\tChild1Grandchild1On  bool              `koanf:\"child1.grandchild1.on\"`\n\t}\n\n\tvar o2 subFlat\n\tk.UnmarshalWithConf(\"parent1\", &o2, koanf.UnmarshalConf{Tag: \"koanf\", FlatPaths: true})\n\tfmt.Println(o2)\n}\n```\n\n----------------------------------------\n\nTITLE: Common Flags for influx, opentsdb, prometheus, and remote-read Commands in vmctl\nDESCRIPTION: Describes common flags available for the influx, opentsdb, prometheus, and remote-read commands in vmctl. These flags control connection settings, authentication, data compression, and import behavior when migrating data to VictoriaMetrics.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmctl.md#2025-04-22_snippet_31\n\nLANGUAGE: shellhelp\nCODE:\n```\n   --vm-addr vmctl\n     VictoriaMetrics address to perform import requests. \n     Should be the same as --httpListenAddr value for single-node version or vminsert component. \n     When importing into the clustered version do not forget to set additionally --vm-account-id flag. \n     Please note, that vmctl performs initial readiness check for the given address by checking `/health` endpoint. (default: \"http://localhost:8428\")\n   --vm-user value\n     VictoriaMetrics username for basic auth [$VM_USERNAME]\n   --vm-password value\n     VictoriaMetrics password for basic auth [$VM_PASSWORD]\n   --vm-account-id value\n     AccountID is an arbitrary 32-bit integer identifying namespace for data ingestion (aka tenant). \n     AccountID is required when importing into the clustered version of VictoriaMetrics. \n     It is possible to set it as accountID:projectID, where projectID is also arbitrary 32-bit integer. \n     If projectID isn't set, then it equals to 0\n   --vm-concurrency value\n     Number of workers concurrently performing import requests to VM (default: 2)\n   --vm-compress\n     Whether to apply gzip compression to import requests (default: true)\n   --vm-batch-size value\n     How many samples importer collects before sending the import request to VM (default: 200000)\n   --vm-significant-figures value\n     The number of significant figures to leave in metric values before importing. See https://en.wikipedia.org/wiki/Significant_figures.\n     Zero value saves all the significant figures. This option may be used for increasing on-disk compression level for the stored metrics.\n     See also --vm-round-digits option (default: 0)\n   --vm-round-digits value\n     Round metric values to the given number of decimal digits after the point. This option may be used for increasing \n     on-disk compression level for the stored metrics (default: 100)\n   --vm-extra-label value [ --vm-extra-label value ]\n```\n\n----------------------------------------\n\nTITLE: Verifying VictoriaMetrics Storage Pod Count\nDESCRIPTION: This command lists the running VictoriaMetrics storage pods after scaling down, to confirm the new replica count.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/guides/k8s-ha-monitoring-via-vm-cluster/README.md#2025-04-22_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get pods  | grep vmstorage\n```\n\n----------------------------------------\n\nTITLE: Using Runewidth to determine string width in Go\nDESCRIPTION: The code snippet demonstrates the usage of the go-runewidth library to calculate the visual width of the string 'つのだ☆HIRO'. The runewidth.StringWidth function is employed here, returning a value of 12, which indicates the fixed terminal width of the input string. This function is pivotal in text rendering where precise alignment is crucial. There are no specified dependencies other than the Go standard library and the go-runewidth package.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/mattn/go-runewidth/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nrunewidth.StringWidth(\"つのだ☆HIRO\") == 12\n```\n\n----------------------------------------\n\nTITLE: Listing Source Cluster Backups via CLI (Cluster Restore Step 3) (Shell)\nDESCRIPTION: Third step in the cluster-to-cluster restore workflow: executing `vmbackupmanager backup list` inside the `vmbackupmanager` container of the *source* cluster to identify the backups needed for restoration.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmbackupmanager.md#2025-04-22_snippet_28\n\nLANGUAGE: sh\nCODE:\n```\n$ /vmbackupmanager-prod backup list\n[{\"name\":\"daily/2023-04-07\",\"size_bytes\":318837,\"size\":\"311.4ki\",\"created_at\":\"2023-04-07T16:15:07+00:00\"},{\"name\":\"hourly/2023-04-07:11\",\"size_bytes\":318837,\"size\":\"311.4ki\",\"created_at\":\"2023-04-07T16:15:06+00:00\"},{\"name\":\"latest\",\"size_bytes\":318837,\"size\":\"311.4ki\",\"created_at\":\"2023-04-07T16:15:04+00:00\"},{\"name\":\"monthly/2023-04\",\"size_bytes\":318837,\"size\":\"311.4ki\",\"created_at\":\"2023-04-07T16:15:10+00:00\"},{\"name\":\"weekly/2023-14\",\"size_bytes\":318837,\"size\":\"311.4ki\",\"created_at\":\"2023-04-07T16:15:09+00:00\"}]\n\n```\n\n----------------------------------------\n\nTITLE: Calculating Tangent using tan() in MetricsQL\nDESCRIPTION: The `tan(q)` transform function computes the tangent of each data point `v` in every time series returned by `q`. By default, metric names are removed; use `keep_metric_names` to keep them. This function is part of MetricsQL.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_124\n\nLANGUAGE: MetricsQL\nCODE:\n```\ntan(q)\n```\n\n----------------------------------------\n\nTITLE: Using Underscore Separators for Numeric Literals in MetricsQL\nDESCRIPTION: Shows how MetricsQL allows underscores (`_`) within numeric literals for improved readability, similar to features in some programming languages. `1_234_567_890` is functionally identical to `1234567890`.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_3\n\nLANGUAGE: MetricsQL\nCODE:\n```\n1_234_567_890\n```\n\nLANGUAGE: MetricsQL\nCODE:\n```\n1234567890\n```\n\n----------------------------------------\n\nTITLE: Model Configuration with Scheduler Assignment\nDESCRIPTION: Example showing the new model configuration format with scheduler assignments and query filtering.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/anomaly-detection/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nmodel:\n  model_alias:\n    args:\n      schedulers: [\"scheduler1\", \"scheduler2\"]\n      queries: [\"query1\", \"query2\"]\n```\n\n----------------------------------------\n\nTITLE: Scrape Interval Rollup Function\nDESCRIPTION: Calculates interval between adjacent raw samples in seconds. Returns min, max and avg values.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_44\n\nLANGUAGE: metricsql\nCODE:\n```\nrollup_scrape_interval(series_selector[d])\n```\n\n----------------------------------------\n\nTITLE: Example JSON output for streams - JSON\nDESCRIPTION: Illustrates the JSON output format from the streams query, listing stream attributes and hit counts in JSON array format. This expected format assumes API compatibility and correct endpoint setup.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/querying/README.md#2025-04-22_snippet_22\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"values\": [\n    {\n      \"value\": \"{host=\\\"host-123\\\",app=\\\"foo\\\"}\",\n      \"hits\": 34980\n    },\n    {\n      \"value\": \"{host=\\\"host-124\\\",app=\\\"bar\\\"}\",\n      \"hits\": 32892\n    },\n    {\n      \"value\": \"{host=\\\"host-125\\\",app=\\\"baz\\\"}\",\n      \"hits\": 32877\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Instrumenting HTTP Server Listener with Conntrack in Go\nDESCRIPTION: This snippet configures a net.Listener for an HTTP server to track inbound connections by organizing them by listener name for monitoring and tracing purposes using the conntrack package. The setup requires net and conntrack packages.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/mwitkow/go-conntrack/README.md#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\nlistener, err := net.Listen(\"tcp\", fmt.Sprintf(\":%d\", *port))\nlistener = conntrack.NewListener(listener, \n    conntrack.TrackWithName(\"http\"), \n    conntrack.TrackWithTracing(),\n    conntrack.TrackWithTcpKeepAlive(5 * time.Minutes))\nhttpServer.Serve(listener)\n```\n\n----------------------------------------\n\nTITLE: Time-Limited Search with AND Operator in LogsQL\nDESCRIPTION: A LogsQL query that combines a word search with a time filter using the AND operator to find logs with 'error' from the last 5 minutes.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_4\n\nLANGUAGE: logsql\nCODE:\n```\nerror AND _time:5m\n```\n\n----------------------------------------\n\nTITLE: Docker Setup for Config Splitting\nDESCRIPTION: Docker commands for pulling vmanomaly image and running the config splitter utility with proper volume mounts and permissions.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/anomaly-detection/FAQ.md#2025-04-22_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\ndocker pull victoriametrics/vmanomaly:v1.21.0 && docker image tag victoriametrics/vmanomaly:v1.21.0 vmanomaly\n```\n\nLANGUAGE: sh\nCODE:\n```\nexport INPUT_CONFIG_PATH=/absolute/path/to/input/config.yml\nexport OUTPUT_DIR_PATH=/absolute/path/to/output/directory\n\ndocker run -it --rm \\\n    --user=\"$(id -u):$(id -g)\" \\\n    --cap-drop=ALL \\\n    -e \"VM_LICENSE_FILE=/.secret/license\" \\\n    -v \"$PWD/.secret/license\":/.secret/license \\\n    -v \"$INPUT_CONFIG_PATH\":/vmanomaly/input_config.yml \\\n    -v \"$OUTPUT_DIR_PATH\":/vmanomaly/output \\\n    --entrypoint python3 \\\n    vmanomaly:latest \\\n    -m config_splitter \\\n    /vmanomaly/input_config.yml \\\n    --splitBy=extra_filters \\\n    --outputDir=/vmanomaly/output \\\n    --fileNameFormat=raw \\\n    --loggerLevel=INFO\n```\n\n----------------------------------------\n\nTITLE: Adding URL Verification in vmalert/vmctl/Snapshot API (Behavior)\nDESCRIPTION: `vmalert`, `vmctl`, and the snapshot creation API now perform validation on URLs provided through command-line flags before attempting to execute HTTP requests. This prevents errors caused by malformed URLs.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/changelog/CHANGELOG_2024.md#2025-04-22_snippet_20\n\nLANGUAGE: text\nCODE:\n```\n# Behavioral change: Components like vmalert and vmctl now validate URLs provided\n# via flags (e.g., -datasource.url, -vm.addr) before making requests.\n# Malformed URLs will likely result in an earlier error during startup or execution.\n```\n\n----------------------------------------\n\nTITLE: Defining and Using Histogram Buckets in VictoriaMetrics\nDESCRIPTION: This code snippet demonstrates the format for defining histogram buckets in VictoriaMetrics, which are used for tracking distributions of query metrics, such as the number of rows read per query. The buckets allow for percentile calculations using the histogram_quantile function.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/keyConcepts/keyConcepts.md#2025-04-22_snippet_4\n\nLANGUAGE: MetricsQL\nCODE:\n```\n\"vm_rows_read_per_query_bucket{vmrange=\\\"4.084e+02...4.642e+02\\\"} 2\\nvm_rows_read_per_query_bucket{vmrange=\\\"5.275e+02...5.995e+02\\\"} 1\\nvm_rows_read_per_query_bucket{vmrange=\\\"8.799e+02...1.000e+03\\\"} 1\\nvm_rows_read_per_query_bucket{vmrange=\\\"1.468e+03...1.668e+03\\\"} 3\\nvm_rows_read_per_query_bucket{vmrange=\\\"1.896e+03...2.154e+03\\\"} 4\\nvm_rows_read_per_query_sum 15582\\nvm_rows_read_per_query_count 11\"\n```\n\n----------------------------------------\n\nTITLE: Configuring YAML Frontmatter for VictoriaMetrics Data Ingestion Documentation\nDESCRIPTION: This YAML snippet defines the metadata for a documentation page about data ingestion in VictoriaMetrics. It specifies the title, weight for ordering, menu structure, and URL aliases.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/data-ingestion/_index.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Data Ingestion \nweight: 0\nmenu:\n  docs:\n    parent: 'victoriametrics'\n    identifier: 'data-ingestion'\n    weight: 26\naliases:\n- /data-ingestion.html\n- /data-ingestion.html\n- /data-ingestion/index.html\n- /data-ingestion/\n- /dataingestion/\n---\n```\n\n----------------------------------------\n\nTITLE: Checking vmanomaly Logs\nDESCRIPTION: This command displays the logs of the vmanomaly container, allowing you to monitor its status and output.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/anomaly-detection/guides/guide-vmanomaly-vmalert/README.md#2025-04-22_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\ndocker logs vmanomaly -f\n```\n\n----------------------------------------\n\nTITLE: Querying stream field names with VictoriaLogs HTTP API - Shell\nDESCRIPTION: Performs an HTTP POST request to `/select/logsql/stream_field_names` endpoint via `curl` to fetch log stream field names based on the query and time range. Utilizes VictoriaMetrics API, adhering to parameters specified in the query. Returns JSON data with field names and hit counts. Ensure the endpoint URL is reachable and correct.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/querying/README.md#2025-04-22_snippet_23\n\nLANGUAGE: sh\nCODE:\n```\ncurl http://localhost:9428/select/logsql/stream_field_names -d 'query=error' -d 'start=5m'\n```\n\n----------------------------------------\n\nTITLE: Limiting Query Results in VictoriaLogs\nDESCRIPTION: This example shows how to limit the number of returned log entries to 10 using the 'limit' query parameter. It retrieves the 10 most recent log entries containing the 'error' word.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/querying/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncurl http://localhost:9428/select/logsql/query -d 'query=error' -d 'limit=10'\n```\n\n----------------------------------------\n\nTITLE: Mimir Migration Completion Summary\nDESCRIPTION: Output showing successful data migration from Mimir to VictoriaMetrics. Provides import statistics including samples processed, throughput, and total operation time.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmctl.md#2025-04-22_snippet_17\n\nLANGUAGE: sh\nCODE:\n```\nSplit defined times into 8847 ranges to import. Continue? [Y/n]\nVM worker 0:→ 12176 samples/s\nVM worker 1:→ 11918 samples/s\nVM worker 2:→ 11261 samples/s\nVM worker 3:→ 12861 samples/s\nVM worker 4:→ 11096 samples/s\nVM worker 5:→ 11575 samples/s\nProcessing ranges: 8847 / 8847 [█████████████████████████████████████████████████████████████████████████████] 100.00%\n2022/10/21 17:22:23 Import finished!\n2022/10/21 17:22:23 VictoriaMetrics importer stats:\n  idle duration: 0s;\n  time spent while importing: 15.379614356s;\n  total samples: 81243;\n  samples/s: 5282.51;\n  total bytes: 6.1 MB;\n  bytes/s: 397.8 kB;\n  import requests: 6;\n  import requests retries: 0;\n2022/10/21 17:22:23 Total time: 16.287405248s\n```\n\n----------------------------------------\n\nTITLE: New Configuration Format for VmReader\nDESCRIPTION: The updated configuration snippet illustrates how queries can be configured for VmReader using the new, flexible format introduced in version 1.13.0. It highlights the inclusion of per-query parameters such as 'expr', 'step', 'data_range', and others to tailor data fetching.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/anomaly-detection/components/reader.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# other config sections ...\nreader:\n  class: 'vm'\n  datasource_url: 'http://localhost:8428'  # source victoriametrics/prometheus\n  sampling_period: '10s'\n  queries:\n    # old format {query_alias: query_expr}, prior to 1.13, will be converted to a new format automatically\n    vmb:\n      expr: 'avg(vm_blocks)'  # initial MetricsQL expression\n      step: '10s'  # individual step for this query, will be filled with `sampling_period` from the root level\n      data_range: ['-inf', 'inf']  # by default, no constraints applied on data range\n      tz: 'UTC'  # by default, tz-free data is used throughout the model lifecycle\n      # new query-level arguments will be added in backward-compatible way in future releases\n```\n\n----------------------------------------\n\nTITLE: Making Blob 'where' Parameter Required in Swagger - YAML\nDESCRIPTION: This transformation sets the required property of the 'FilterBlobsWhere' parameter to true in the Swagger document. It is intended to enforce API contract correctness by marking the parameter as mandatory at code generation time. The operation applies only if the parameter exists and has not already been marked required.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/internal/generated/autorest.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n- from: swagger-document\n  where: $.parameters.FilterBlobsWhere\n  transform: >\n    $.required = true;\n```\n\n----------------------------------------\n\nTITLE: Handling Large Queries with max_points_per_query in VictoriaMetrics Anomaly Detection\nDESCRIPTION: Configuration example showing how to use the max_points_per_query parameter to handle large queries in VictoriaMetrics Anomaly Detection. This helps avoid hitting server limits by splitting long queries into smaller sub-intervals.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/anomaly-detection/FAQ.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nreader:\n  # other reader args\n  max_points_per_query: 10000  # reader-level constraint\n  queries:\n    sum_alerts:\n      expr: 'sum(ALERTS{alertstate=~\\'(pending|firing)\\'}) by (alertstate)'\n      max_points_per_query: 5000  # query-level override\nmodels:\n    prophet:\n      # other model args\n      queries: [\n        'sum_alerts',\n      ]\n# other config sections\n```\n\n----------------------------------------\n\nTITLE: Installing VictoriaLogs via Helm - Shell\nDESCRIPTION: This command uses Helm to deploy the single-server version of VictoriaLogs on Kubernetes. Ensure the required repo is added and access permissions are in place.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/guides/getting-started-with-opentelemetry/README.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nhelm install victoria-logs vm/victoria-logs-single\n```\n\n----------------------------------------\n\nTITLE: Initializing a Validator with Leeway in golang-jwt/jwt (Go)\nDESCRIPTION: This Go example demonstrates how to instantiate a Validator with a specified clock leeway and apply it to a Claims object. The Validator uses parser options like WithLeeway to enable flexible claim validation according to project requirements. Dependencies include Go, github.com/golang-jwt/jwt/v5, and a claims object matching the required interface; inputs are the leeway duration and the claims to validate, with errors returned if validation fails.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/golang-jwt/jwt/v5/MIGRATION_GUIDE.md#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nvar v = jwt.NewValidator(jwt.WithLeeway(5*time.Second))\nv.Validate(myClaims)\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Go Error Type\nDESCRIPTION: Demonstrates creating a custom error type in Go by defining a struct (`MyCustomErr`) and implementing the `Error()` method. This satisfies the built-in `error` interface, allowing the struct to be used as an error value while carrying custom data (`Msg`).\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/AzureAD/microsoft-authentication-library-for-go/apps/errors/error_design.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n```go\ntype MyCustomErr struct {\n  Msg string\n}\nfunc (m MyCustomErr) Error() string { // This implements \"error\"\n  return m.Msg\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Authenticating with System-Assigned Managed Identity using azidentity in Go\nDESCRIPTION: This Go code demonstrates authentication using a system-assigned managed identity with the `azidentity` library. It creates a `ManagedIdentityCredential` using `azidentity.NewManagedIdentityCredential` (passing `nil` for options uses the system-assigned identity) and passes this credential directly to a new Azure SDK client.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/Azure/azure-sdk-for-go/sdk/azidentity/MIGRATION.md#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"github.com/Azure/azure-sdk-for-go/sdk/azidentity\"\n    \"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/resources/armsubscriptions\"\n)\n\ncred, err := azidentity.NewManagedIdentityCredential(nil)\nhandle(err)\n\nclient, err := armsubscriptions.NewClient(cred, nil)\nhandle(err)\n```\n\n----------------------------------------\n\nTITLE: Using Binary Prefixes (K, Ki, M, Mi, etc.) in Numeric Literals in MetricsQL\nDESCRIPTION: Shows examples of numeric literals using SI (K, M, G, T) and binary (Ki, Mi, Gi, Ti) suffixes in MetricsQL. For example, `8K` equals `8000`, and `1.2Mi` equals `1.2 * 1024 * 1024`.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_15\n\nLANGUAGE: metricsql\nCODE:\n```\n8K\n```\n\nLANGUAGE: metricsql\nCODE:\n```\n1.2Mi\n```\n\n----------------------------------------\n\nTITLE: Dependency Version Update - Go Module\nDESCRIPTION: Update of golang.org/x/sys/unix dependency to address security vulnerability GO-2022-0493.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-22_snippet_37\n\nLANGUAGE: go\nCODE:\n```\ngolang.org/x/sys/unix v0.0.0-20220919091848-fb04ddd9f9c8\n```\n\n----------------------------------------\n\nTITLE: Getting Help with vmctl Native Mode\nDESCRIPTION: Command to display all available configuration options for the vm-native mode of vmctl, which provides detailed information about parameters and flags.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmctl.md#2025-04-22_snippet_21\n\nLANGUAGE: sh\nCODE:\n```\n./vmctl vm-native --help\n```\n\n----------------------------------------\n\nTITLE: Creating Namespace for Victoria Logs\nDESCRIPTION: This Bash command creates a new Kubernetes namespace named 'vl' for deploying Victoria Logs within the OpenShift environment.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/guides/collecting-openshift-logs-with-victoria-logs/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create namespace vl\n```\n\n----------------------------------------\n\nTITLE: Scheduler Initialization Messages\nDESCRIPTION: Messages shown during scheduler initialization and setup.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/anomaly-detection/components/monitoring.md#2025-04-22_snippet_9\n\nLANGUAGE: text\nCODE:\n```\nScheduler {{scheduler_alias}} wrapped and initialized with {{N}} model spec(s).\nNo model spec(s) found for scheduler `{{scheduler_alias}}`, skipping setting it up.\nActive schedulers: {{list_of_schedulers}}.\n```\n\n----------------------------------------\n\nTITLE: Build Error Example for macOS Keychain Access\nDESCRIPTION: Example of a build error that occurs when cgo is not enabled when trying to access the macOS Keychain for token caching. The error shows undefined accessor symbols indicating missing cgo compilation.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/Azure/azure-sdk-for-go/sdk/azidentity/TROUBLESHOOTING.md#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n$ GOOS=darwin go build\n# github.com/Azure/azure-sdk-for-go/sdk/azidentity/cache\n../../go/pkg/mod/github.com/!azure/azure-sdk-for-go/sdk/azidentity/cache@v0.3.0/darwin.go:18:19: undefined: accessor.New\n../../go/pkg/mod/github.com/!azure/azure-sdk-for-go/sdk/azidentity/cache@v0.3.0/darwin.go:18:38: undefined: accessor.WithAccount\n```\n\n----------------------------------------\n\nTITLE: Correcting Typos in StorageErrorCode in Azure Go SDK - YAML\nDESCRIPTION: This snippet fixes a known typo in a constant identifier by replacing 'IncrementalCopyOfEralierVersionSnapshotNotAllowed' with 'IncrementalCopyOfEarlierVersionSnapshotNotAllowed' in 'zz_constants.go'. It uses a straightforward regex replacement with no dependencies besides the pattern existing in the target file. It ensures error codes are spelled correctly for downstream consumers.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/internal/generated/autorest.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n- from: zz_constants.go\n  where: $\n  transform: >-\n    return $.\n      replace(/IncrementalCopyOfEralierVersionSnapshotNotAllowed/g, \"IncrementalCopyOfEarlierVersionSnapshotNotAllowed\");\n```\n\n----------------------------------------\n\nTITLE: Marshaling Go Structs to Protobuf Messages Using easyproto - Go\nDESCRIPTION: This snippet provides a set of Go functions for marshaling Timeseries and Sample structs into protobuf messages with easyproto. The main function adds all fields to the protobuf message and appends it to dst, using a Marshaler pool for memory efficiency. It avoids allocations on repeated calls and supports arbitrary field types. Dependencies: github.com/VictoriaMetrics/easyproto must be imported; the caller must populate the structs before marshaling, and only proto3 encoding is supported.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/VictoriaMetrics/easyproto/README.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"github.com/VictoriaMetrics/easyproto\"\n)\n\n// MarshalProtobuf marshals ts into protobuf message, appends this message to dst and returns the result.\n//\n// This function doesn't allocate memory on repeated calls.\nfunc (ts *Timeseries) MarshalProtobuf(dst []byte) []byte {\n\tm := mp.Get()\n\tts.marshalProtobuf(m.MessageMarshaler())\n\tdst = m.Marshal(dst)\n\tmp.Put(m)\n\treturn dst\n}\n\nfunc (ts *Timeseries) marshalProtobuf(mm *easyproto.MessageMarshaler) {\n\tmm.AppendString(1, ts.Name)\n\tfor _, s := range ts.Samples {\n\t\ts.marshalProtobuf(mm.AppendMessage(2))\n\t}\n}\n\nfunc (s *Sample) marshalProtobuf(mm *easyproto.MessageMarshaler) {\n\tmm.AppendDouble(1, s.Value)\n\tmm.AppendInt64(2, s.Timestamp)\n}\n\nvar mp easyproto.MarshalerPool\n\n```\n\n----------------------------------------\n\nTITLE: Calculating Weekday for a Specific Timezone in MetricsQL (MetricsQL)\nDESCRIPTION: Example MetricsQL query demonstrating the use of `timezone_offset` combined with `time()` and `day_of_week` to calculate the current day of the week in the 'America/Los_Angeles' timezone.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/changelog/CHANGELOG_2021.md#2025-04-22_snippet_26\n\nLANGUAGE: metricsql\nCODE:\n```\nday_of_week(time()+timezone_offset(\"America/Los_Angeles\"))\n```\n\n----------------------------------------\n\nTITLE: Script for Migrating Import Paths to mapstructure v2\nDESCRIPTION: This shell command assists in migrating Go files from the older mapstructure package to the blessed fork at github.com/go-viper/mapstructure/v2. It replaces the import paths in all Go files found in the current directory and its subdirectories.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/go-viper/mapstructure/v2/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nsed -i 's/github.com\\/mitchellh\\/mapstructure/github.com\\/go-viper\\/mapstructure\\/v2/g' $(find . -type f -name '*.go')\n```\n\n----------------------------------------\n\nTITLE: Creating Restore Mark via CLI in Kubernetes (Full Path) (Shell)\nDESCRIPTION: Alternative fourth step in the Kubernetes restore workflow: using `vmbackupmanager restore create` with a full backup path inside the `vmbackupmanager` container. This allows specifying a backup from any remote storage.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmbackupmanager.md#2025-04-22_snippet_26\n\nLANGUAGE: sh\nCODE:\n```\n$ /vmbackupmanager-prod restore create azblob://test1/vmbackupmanager/daily/2023-04-07\n\n```\n\n----------------------------------------\n\nTITLE: Using Numeric Suffixes in MetricsQL Queries\nDESCRIPTION: Illustrates the usage of numeric values with binary (Ki, Mi, Gi, Ti) and decimal (K, M, G, T) suffixes within MetricsQL queries. For example, `8Ki` evaluates to 8192 and `8.2M` evaluates to 8,200,000.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/changelog/CHANGELOG_2022.md#2025-04-22_snippet_7\n\nLANGUAGE: metricsql\nCODE:\n```\n8Ki\n```\n\nLANGUAGE: metricsql\nCODE:\n```\n8.2M\n```\n\n----------------------------------------\n\nTITLE: Logging Errors with Structured Data using logr in Go\nDESCRIPTION: This Go snippet shows how to log an error message using the logr library. It converts a traditional format string log (like klog.Infof) into a structured log by passing the error object directly to logger.Error and providing additional context (responseCode) as a key-value pair (\"code\", responseCode). The error object itself is implicitly added with the key \"err\".\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/go-logr/logr/README.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nlogger.Error(err, \"client returned an error\", \"code\", responseCode)\n```\n\n----------------------------------------\n\nTITLE: Using count_ne_over_time Rollup Function in VictoriaMetrics\nDESCRIPTION: This function counts samples that aren't equal to a specified value over a lookbehind window. It operates independently for each time series returned by the series selector and is typically applied to gauges.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\ncount_ne_over_time(series_selector[d], ne)\n```\n\n----------------------------------------\n\nTITLE: Multitenancy Warning for Missing vm_account_id Label\nDESCRIPTION: Warning message displayed when writer.tenant_id is set to 'multitenant' but the vm_account_id label is missing in the data. In this case, data is written to the default tenant 0:0.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/anomaly-detection/components/writer.md#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nThe label `vm_account_id` was not found in the label set of {query_result.key}, \nbut tenant_id='multitenant' is set in writer. The data will be written to the default tenant 0:0. \nEnsure that the query retains the necessary multi-tenant labels, \nor adjust the aggregation settings to preserve `vm_account_id` key in the label set.\n```\n\n----------------------------------------\n\nTITLE: Controlling Feature Gates via CLI using Shell\nDESCRIPTION: Explains how to control feature gates at runtime using the `--feature-gates` command-line flag in a shell environment. Gates are specified in a comma-delimited list; prefixing with `-` disables the gate, while `+` or no prefix enables it.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/go.opentelemetry.io/collector/featuregate/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n```shell\notelcol --config=config.yaml --feature-gates=gate1,-gate2,+gate3\n```\n```\n\n----------------------------------------\n\nTITLE: Example JSON output for stream field values - JSON\nDESCRIPTION: Provides an example JSON structure returned from querying stream field values, including values and hit counts for a specified field name. This format aligns with VictoriaMetrics API conventions and endpoint behavior.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/querying/README.md#2025-04-22_snippet_26\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"values\": [\n    {\n      \"value\": \"host-1\",\n      \"hits\": 69426656\n    },\n    {\n      \"value\": \"host-2\",\n      \"hits\": 66507749\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating S2 Reader Ignoring Stream Identifier in Go\nDESCRIPTION: Illustrates how to initialize an `s2.NewReader` with the `s2.ReaderIgnoreStreamIdentifier()` option. This is necessary when starting decoding from an arbitrary `compressedOffset` within the stream, rather than from the beginning, as the standard stream identifier will be absent.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/klauspost/compress/s2/README.md#2025-04-22_snippet_21\n\nLANGUAGE: go\nCODE:\n```\n\tdec := s2.NewReader(r, s2.ReaderIgnoreStreamIdentifier())\n```\n\n----------------------------------------\n\nTITLE: Example Modified VictoriaMetrics Data in JSON Lines Format\nDESCRIPTION: Illustrates the `data.jsonl` content after the `sed` command execution. The `values` array now contains the updated numeric values (`17179869184`) while the `metric` and `timestamps` remain the same.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/guides/guide-delete-or-replace-metrics/README.md#2025-04-22_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"metric\": {\n    \"__name__\": \"node_memory_MemTotal_bytes\",\n    \"job\": \"hostname.com\",\n    \"instance\": \"node-exporter:9100\"\n  },\n  \"values\": [\n    17179869184,\n    17179869184,\n    17179869184,\n    17179869184\n  ],\n  \"timestamps\": [\n    1656669031378,\n    1656669032378,\n    1656669033378,\n    1656669034378\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multi-level Downsampling in VictoriaMetrics\nDESCRIPTION: Command-line flag for configuring multi-level downsampling with different time ranges. This example creates two levels of downsampling: 5-minute intervals for data older than 30 days and 1-hour intervals for data older than 180 days.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/README.md#2025-04-22_snippet_69\n\nLANGUAGE: bash\nCODE:\n```\n-downsampling.period=30d:5m,180d:1h\n```\n\n----------------------------------------\n\nTITLE: Version Compatibility Configuration\nDESCRIPTION: Configuration that bypasses Elasticsearch version compatibility check for VictoriaLogs integration.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/data-ingestion/Filebeat.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\noutput.elasticsearch:\n  hosts: [ \"http://localhost:9428/insert/elasticsearch/\" ]\n  parameters:\n    _msg_field: \"message\"\n    _time_field: \"@timestamp\"\n    _stream_fields: \"host.name,log.file.path\"\n  allow_older_versions: true\n```\n\n----------------------------------------\n\nTITLE: Applying go-codegen Plugin for Smithy\nDESCRIPTION: This JSON snippet demonstrates how to configure the `go-codegen` build plugin for generating Go client code from Smithy models. It specifies dependencies, service settings, module information, and Go directive. The snippet assumes that the Smithy model is stored in a 'models' directory and requires the smithy-go-codegen dependency. It outputs a JSON configuration for Smithy CLI integration.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/aws/smithy-go/README.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"version\": \"1.0\",\n  \"sources\": [\n    \"models\"\n  ],\n  \"maven\": {\n    \"dependencies\": [\n      \"software.amazon.smithy.go:smithy-go-codegen:0.1.0\"\n    ]\n  },\n  \"plugins\": {\n    \"go-codegen\": {\n      \"service\": \"example.weather#Weather\",\n      \"module\": \"github.com/example/weather\",\n      \"generateGoMod\": true,\n      \"goDirective\": \"1.20\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Expected Output for VMCluster Resource Status (text)\nDESCRIPTION: This text block shows the expected output from `kubectl get vmclusters`. It lists the cluster name, the counts of insert, storage, and select components, its age, and its overall status (e.g., 'operational').\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/guides/getting-started-with-vm-operator/README.md#2025-04-22_snippet_9\n\nLANGUAGE: text\nCODE:\n```\nNAME                           INSERT COUNT   STORAGE COUNT   SELECT COUNT   AGE     STATUS\nexample-vmcluster-persistent   2              2               2              5m53s   operational\n```\n\n----------------------------------------\n\nTITLE: Running vmalert in Replay Mode\nDESCRIPTION: Command line configuration for running vmalert in replay mode to process historical data between specified time ranges. Requires path to rules, datasource URL, and remote write URL.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmalert.md#2025-04-22_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\n./bin/vmalert -rule=path/to/your.rules \\\n    -datasource.url=http://localhost:8428 \\\n    -remoteWrite.url=http://localhost:8428 \\\n    -replay.timeFrom=2021-05-11T07:21:43Z \\\n    -replay.timeTo=2021-05-29T18:40:43Z\n```\n\n----------------------------------------\n\nTITLE: Benchmarking with GOMAXPROCS=1 in Go\nDESCRIPTION: Runs a series of benchmark tests for the fastrand package using the GOMAXPROCS=1 setting to demonstrate single-thread performance. Key metric comparisons include execution time per operation in nanoseconds, emphasizing the speed of the RNG functions.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/valyala/fastrand/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n$ GOMAXPROCS=1 go test -bench=. github.com/valyala/fastrand\\ngoos: linux\\ngoarch: amd64\\npkg: github.com/valyala/fastrand\\nBenchmarkUint32n                   \\t50000000\\t        29.7 ns/op\\nBenchmarkRNGUint32n                \\t200000000\\t         6.50 ns/op\\nBenchmarkRNGUint32nWithLock        \\t100000000\\t        21.5 ns/op\\nBenchmarkMathRandInt31n            \\t50000000\\t        31.8 ns/op\\nBenchmarkMathRandRNGInt31n         \\t100000000\\t        17.9 ns/op\\nBenchmarkMathRandRNGInt31nWithLock \\t50000000\\t        30.2 ns/op\\nPASS\\nok   \\tgithub.com/valyala/fastrand\\t10.634s\n```\n\n----------------------------------------\n\nTITLE: VMSingle Custom Resource with Secret Reference\nDESCRIPTION: Kubernetes operator custom resource definition for VictoriaMetrics single-node using secret reference for license.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/enterprise.md#2025-04-22_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: operator.victoriametrics.com/v1beta1\nkind: VMSingle\nmetadata:\n  name: example-vmsingle\nspec:\n  retentionPeriod: \"1\"\n  license:\n    keyRef:\n      name: vm-license\n      key: license\n  image:\n    tag: v1.115.0-enterprise\n```\n\n----------------------------------------\n\nTITLE: Defining Alerting Rules for VictoriaLogs in YAML\nDESCRIPTION: Examples of alerting rules using LogsQL for VictoriaLogs, including rules for detecting error logs and failed requests.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/vmalert.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ngroups:\n  - name: ServiceLog\n    type: vlogs\n    interval: 5m\n    rules:\n      - alert: HasErrorLog\n        expr: 'env: \"prod\" AND status:~\"error|warn\" | stats by (service, kubernetes.pod) count() as errorLog | filter errorLog:>0'\n        annotations:\n          description: 'Service {{$labels.service}} (pod {{ index $labels \"kubernetes.pod\" }}) generated {{$labels.errorLog}} error logs in the last 5 minutes'\n\n  - name: ServiceRequest\n    type: vlogs\n    interval: 5m\n    rules:\n      - alert: TooManyFailedRequest\n        expr: '* | extract \"ip=<ip> \" | extract \"status_code=<code>;\" | stats by (ip) count() if (code:~4.*) as failed, count() as total| math failed / total as failed_percentage| filter failed_percentage :> 0.01 | fields ip,failed_percentage'\n        annotations:\n          description: \"Connection from address {{$labels.ip}} has {{$value}}% failed requests in last 5 minutes\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Delta to Cumulative Processor with OpenTelemetry in YAML\nDESCRIPTION: This YAML snippet demonstrates how to configure the `deltatocumulative` processor in an OpenTelemetry Collector pipeline. It sets key parameters such as `max_stale`, which determines how long inactive series are retained, and `max_streams`, which limits the number of tracked streams to prevent resource exhaustion. Required dependencies include the OpenTelemetry Collector and the processor must be referenced in your pipeline. Inputs are configuration entries; outputs affect metrics processing at runtime. The snippet expects durations (e.g. 5m) and integer values for limits. Only these two configuration options are available, and the delta-to-cumulative conversion works automatically without further setup.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/open-telemetry/opentelemetry-collector-contrib/processor/deltatocumulativeprocessor/README.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nprocessors:\n    deltatocumulative:\n        # how long until a series not receiving new samples is removed\n        [ max_stale: <duration> | default = 5m ]\n \n        # upper limit of streams to track. new streams exceeding this limit\n        # will be dropped\n        [ max_streams: <int> | default = 9223372036854775807 (max int) ]\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Serverless DataDog Plugin for VictoriaLogs\nDESCRIPTION: YAML configuration for the Serverless DataDog plugin to set the VictoriaLogs endpoint using the LOGS_DD_URL environment variable.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/data-ingestion/DataDogAgent.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ncustom:\n  datadog:\n    apiKey: fakekey                 # Set any key, otherwise plugin fails\nprovider:\n  environment:\n    DD_DD_URL: `<vmauth-base-url>`/   # VMAuth endpoint for DataDog\n```\n\n----------------------------------------\n\nTITLE: Creating ULID Example in Go\nDESCRIPTION: An example function demonstrating the creation of a ULID using a specific time and entropy source in Go. Requires the 'time' and 'math/rand' packages for defining the timestamp and entropy.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/oklog/ulid/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc ExampleULID() {\n\tt := time.Unix(1000000, 0)\n\tentropy := ulid.Monotonic(rand.New(rand.NewSource(t.UnixNano())), 0)\n\tfmt.Println(ulid.MustNew(ulid.Timestamp(t), entropy))\n\t// Output: 0000XSNJG0MQJHBF4QX1EFD6Y3\n}\n```\n\n----------------------------------------\n\nTITLE: Forward Seeking with Implicit Index Read in Go\nDESCRIPTION: Demonstrates creating an s2 reader and obtaining a forward-only `ReadSeeker`. The index is read implicitly from the underlying reader `r`, which must support the `io.Seeker` interface since no index is provided explicitly. The code then seeks to a specific offset.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/klauspost/compress/s2/README.md#2025-04-22_snippet_16\n\nLANGUAGE: go\nCODE:\n```\n\tdec := s2.NewReader(r)\n\trs, err := dec.ReadSeeker(false, nil)\n\trs.Seek(wantOffset, io.SeekStart)\t\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry v1.1.0\nDESCRIPTION: Version 1.1.0 changelog entry documenting runtime version inspection feature and dependency updates.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/aws/aws-sdk-go-v2/feature/ec2/imds/CHANGELOG.md#2025-04-22_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n# v1.1.0 (2021-05-14)\n\n* **Feature**: Constant has been added to modules to enable runtime version inspection for reporting.\n* **Dependency Update**: Updated to the latest SDK module versions\n```\n\n----------------------------------------\n\nTITLE: Using Backoff in Golang for Simple Duration Calculation\nDESCRIPTION: This snippet demonstrates creating a backoff.Backoff object with default values and calculating time.Duration with increasing values until a reset is invoked. The dependencies include the backoff library and the time package.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/jpillora/backoff/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nb := &backoff.Backoff{\n\t//These are the defaults\n\tMin:    100 * time.Millisecond,\n\tMax:    10 * time.Second,\n\tFactor: 2,\n\tJitter: false,\n}\n\nfmt.Printf(\"%s\\n\", b.Duration())\nfmt.Printf(\"%s\\n\", b.Duration())\nfmt.Printf(\"%s\\n\", b.Duration())\n\nfmt.Printf(\"Reset!\\n\")\nb.Reset()\n\nfmt.Printf(\"%s\\n\", b.Duration())\n```\n\n----------------------------------------\n\nTITLE: Searching VictoriaMetrics Helm Charts\nDESCRIPTION: Command to search and list all available VictoriaMetrics Helm charts in the repository.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/guides/k8s-monitoring-via-vm-cluster/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nhelm search repo vm/\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes Namespace - kubectl - Shell\nDESCRIPTION: This shell snippet creates a unique Kubernetes namespace (e.g., 'monitoring') using the kubectl CLI. The namespace helps isolate monitoring resources in your cluster. No special dependencies other than kubectl and relevant cluster credentials are required. There is no input parameter beyond the namespace name, and the command outputs a namespace creation confirmation.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics-cloud/how-to-monitor-k8s.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nkubectl create namespace monitoring\n\n```\n\n----------------------------------------\n\nTITLE: Implicit Handling of Missing `queries` Argument in vmanomaly Model Config (YAML)\nDESCRIPTION: Demonstrates the implicit behavior when the `queries` argument is omitted from a model's configuration within the `models` section. In this case, `vmanomaly` automatically creates the `queries` argument and populates it with all query aliases defined in the `reader` section, applying the model to all available queries.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/anomaly-detection/components/models.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nmodels:\n  model_alias_1:\n    # ...\n    # if not set, `queries` arg is created and propagated with all query aliases found in `queries` arg of `reader` section\n    queries: ['q1', 'q2', 'q3']  # i.e., if your `queries` in `reader` section has exactly q1, q2, q3 aliases\n```\n\n----------------------------------------\n\nTITLE: Label Setting with label_set Function in MetricsQL\nDESCRIPTION: The label_set function sets specified label-value pairs to all time series returned by a query.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_132\n\nLANGUAGE: MetricsQL\nCODE:\n```\nlabel_set(q, \"label1\", \"value1\", ..., \"labelN\", \"valueN\")\n```\n\n----------------------------------------\n\nTITLE: Using Unicode Characters in Metric and Label Names (MetricsQL)\nDESCRIPTION: Illustrates MetricsQL's support for arbitrary Unicode letters in metric names and label names, enabling non-ASCII identifiers. The example shows a metric named `ტემპერატურა` with a label `πόλη` set to `Київ`.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_17\n\nLANGUAGE: MetricsQL\nCODE:\n```\nტემპერატურა{πόλη=\"Київ\"}\n```\n\n----------------------------------------\n\nTITLE: Adding Victoria Metrics Helm Repository\nDESCRIPTION: This Bash command adds the Victoria Metrics Helm repository, enabling the installation of Victoria Logs using Helm charts.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/guides/collecting-openshift-logs-with-victoria-logs/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add vm https://victoriametrics.github.io/helm-charts/\n```\n\n----------------------------------------\n\nTITLE: VictoriaMetrics Single Version Setup\nDESCRIPTION: Command for running VictoriaMetrics with custom dashboards path.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n./victoria-metrics  --vmui.customDashboardsPath=/path/to/your/dashboards\n```\n\n----------------------------------------\n\nTITLE: Applying VMalert CRD via kubectl for Single-Node VMOperator (Shell/Bash)\nDESCRIPTION: This shell script uses a here-document to apply a Kubernetes VMAlert CRD that integrates vmalert with VictoriaMetrics Cloud in a single-node deployment managed by VMOperator. It provisions secrets, sets token references, and points remote read/write and alerting URLs to the required endpoints. Requires Kubernetes, VMOperator installed, and valid environment variables for secrets and service URLs.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics-cloud/alerting-vmalert-victoria-metrics-cloud.md#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nexport TOKEN=81e8226e-****-****-****-************\nexport MANAGED_VM_URL=https://gw-c15-1c.cloud.victoriametrics.com\nexport ALERTMANAGER=http://alertmanager:9093\ncat << EOF | kubectl apply -f -\napiVersion: operator.victoriametrics.com/v1beta1\nkind: VMAlert\nmetadata:\n name: vmalert-managed-vm\nspec:\n replicaCount: 1\n datasource:\n   url: $MANAGED_VM_URL\n   bearerTokenSecret:\n     name: managed-token\n     key: token\n remoteWrite:\n   url: $MANAGED_VM_URL\n   bearerTokenSecret:\n     name: managed-token\n     key: token\n remoteRead:\n   url: $MANAGED_VM_URL\n   bearerTokenSecret:\n     name: managed-token\n     key: token\n notifier:\n   url: $ALERTMANAGER\n ruleSelector:\n   matchLabels:\n     type: managed\n---\napiVersion: v1\nkind: Secret\nmetadata:\n name: managed-token\nstringData:\n token: $TOKEN\nEOF\n```\n\n----------------------------------------\n\nTITLE: Writer Connection Error Log\nDESCRIPTION: Logs an error when the writer fails to send data due to a connection error (e.g., network issues, wrong URL, unavailable VictoriaMetrics). Details include the number of points (`N`), query key, target URL, and specific error message. Placeholders `{{scheduler_alias}}`, `{{N}}`, `{{query_key}}`, `{{url}}`, and `{{error_message}}` provide context.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/anomaly-detection/components/monitoring.md#2025-04-22_snippet_22\n\nLANGUAGE: text\nCODE:\n```\n[Scheduler {{scheduler_alias}}] Cannot write {{N}} points for {{query_key}}: connection error {{url}} {{error_message}}\n```\n\n----------------------------------------\n\nTITLE: Implicit Step Addition in Subquery (MetricsQL)\nDESCRIPTION: Example of a subquery `avg_over_time(rate(http_requests_total[5m])[1h])` where the step specification after the colon is missing. VictoriaMetrics automatically adds the default step `1i`.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_165\n\nLANGUAGE: MetricsQL\nCODE:\n```\navg_over_time(rate(http_requests_total[5m])[1h])\n```\n\n----------------------------------------\n\nTITLE: Obtaining Azure Access Token via Azure CLI - Azure CLI\nDESCRIPTION: This Azure CLI snippet retrieves an OAuth2 access token for the specified resource (Azure management endpoint) and displays the result as JSON. The command requires a valid login (via az login) and az CLI installed. The --output json flag ensures the token information is machine-readable. The output contains an access token and should be handled securely.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/Azure/azure-sdk-for-go/sdk/azidentity/TROUBLESHOOTING.md#2025-04-22_snippet_5\n\nLANGUAGE: azurecli\nCODE:\n```\naz account get-access-token --output json --resource https://management.core.windows.net\n```\n\n----------------------------------------\n\nTITLE: Fixing SignedOid and SignedTid Casing in Model Definitions - YAML\nDESCRIPTION: This directive corrects the casing of SignedOid and SignedTid fields in Go model definitions, ensuring they are written as SignedOID and SignedTID. It targets 'zz_models.go' and uses regex replacement for schema consistency. Expected input is Go code with original field names, and output is structurally unchanged except for the updated field name capitalization.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/internal/generated/autorest.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n- from: zz_models.go\n  where: $\n  transform: >-\n    return $.\n      replace(/SignedOid\\s+\\*string/g, `SignedOID *string`).\n      replace(/SignedTid\\s+\\*string/g, `SignedTID *string`);\n```\n\n----------------------------------------\n\nTITLE: Executing Range Vector Queries in MetricsQL (MetricsQL)\nDESCRIPTION: This is an example of a MetricsQL range vector query (`up[5m]`) which selects all raw samples for the metric `up` over the preceding 5 minutes from the evaluation time. A bug fix in v1.86.2 ensures `vmui` correctly displays the results of such range queries in its `Table` view.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/changelog/CHANGELOG_2023.md#2025-04-22_snippet_23\n\nLANGUAGE: metricsql\nCODE:\n```\nup[5m]\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry v1.4.0\nDESCRIPTION: Version 1.4.0 changelog entry documenting error handling improvements and dependency updates.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/aws/aws-sdk-go-v2/feature/ec2/imds/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# v1.4.0 (2021-08-04)\n\n* **Feature**: adds error handling for defered close calls\n* **Dependency Update**: Updated `github.com/aws/smithy-go` to latest version.\n* **Dependency Update**: Updated to the latest SDK module versions\n```\n\n----------------------------------------\n\nTITLE: Sample Time Series Data for Instant Query Demonstration\nDESCRIPTION: Provides sample data for a time series named `foo_bar` in a text-based format, showing metric values and their corresponding timestamps in milliseconds since the epoch. This data includes intentionally missed points to illustrate how VictoriaMetrics handles data retrieval with the `step` parameter during instant queries.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/keyConcepts/keyConcepts.md#2025-04-22_snippet_10\n\nLANGUAGE: text\nCODE:\n```\nfoo_bar 1.00 1652169600000 # 2022-05-10T08:00:00Z\nfoo_bar 2.00 1652169660000 # 2022-05-10T08:01:00Z\nfoo_bar 3.00 1652169720000 # 2022-05-10T08:02:00Z\nfoo_bar 5.00 1652169840000 # 2022-05-10T08:04:00Z, one point missed\nfoo_bar 5.50 1652169960000 # 2022-05-10T08:06:00Z, one point missed\nfoo_bar 5.50 1652170020000 # 2022-05-10T08:07:00Z\nfoo_bar 4.00 1652170080000 # 2022-05-10T08:08:00Z\nfoo_bar 3.50 1652170260000 # 2022-05-10T08:11:00Z, two points missed\nfoo_bar 3.25 1652170320000 # 2022-05-10T08:12:00Z\nfoo_bar 3.00 1652170380000 # 2022-05-10T08:13:00Z\nfoo_bar 2.00 1652170440000 # 2022-05-10T08:14:00Z\nfoo_bar 1.00 1652170500000 # 2022-05-10T08:15:00Z\nfoo_bar 4.00 1652170560000 # 2022-05-10T08:16:00Z\n```\n\n----------------------------------------\n\nTITLE: Forward Seeking with Custom Index in Go\nDESCRIPTION: Illustrates creating an s2 reader and getting a forward-only `ReadSeeker` using a provided custom `index` byte slice. Since the index is supplied externally, the underlying reader `r` does not need to implement `io.Seeker` for forward-only seeking. The seeker is then positioned to the desired offset.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/klauspost/compress/s2/README.md#2025-04-22_snippet_17\n\nLANGUAGE: go\nCODE:\n```\n\tdec := s2.NewReader(r)\n\trs, err := dec.ReadSeeker(false, index)\n\trs.Seek(wantOffset, io.SeekStart)\t\n```\n\n----------------------------------------\n\nTITLE: Including README Content with Hugo Shortcode\nDESCRIPTION: Hugo shortcode that includes the content of README.md file in the documentation page. This allows maintaining documentation in markdown format separately while displaying it on the website.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/_index.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{{% content \"README.md\" %}}\n```\n\n----------------------------------------\n\nTITLE: Installing go-version library using go get (Bash)\nDESCRIPTION: Demonstrates how to install the `go-version` package using the standard Go toolchain command `go get`. This command downloads and installs the package from its GitHub repository, making it available for use in Go projects.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/hashicorp/go-version/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ go get github.com/hashicorp/go-version\n```\n\n----------------------------------------\n\nTITLE: Using the s2c Command-Line Compression Tool\nDESCRIPTION: Displays the usage instructions and options for the `s2c` command-line tool. It compresses specified files (including URLs or stdin) into `.s2` or `.snappy` format, offering options for concurrency, compression level, block size, output handling, verification, and more.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/klauspost/compress/s2/README.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nUsage: s2c [options] file1 file2\n\nCompresses all files supplied as input separately.\nOutput files are written as 'filename.ext.s2' or 'filename.ext.snappy'.\nBy default output files will be overwritten.\nUse - as the only file name to read from stdin and write to stdout.\n\nWildcards are accepted: testdir/*.txt will compress all files in testdir ending with .txt\nDirectories can be wildcards as well. testdir/*/*.txt will match testdir/subdir/b.txt\n\nFile names beginning with 'http://' and 'https://' will be downloaded and compressed.\nOnly http response code 200 is accepted.\n\nOptions:\n  -bench int\n    \tRun benchmark n times. No output will be written\n  -blocksize string\n    \tMax  block size. Examples: 64K, 256K, 1M, 4M. Must be power of two and <= 4MB (default \"4M\")\n  -c\tWrite all output to stdout. Multiple input files will be concatenated\n  -cpu int\n    \tCompress using this amount of threads (default 32)\n  -faster\n    \tCompress faster, but with a minor compression loss\n  -help\n    \tDisplay help\n  -index\n        Add seek index (default true)    \t\n  -o string\n        Write output to another file. Single input file only\n  -pad string\n    \tPad size to a multiple of this value, Examples: 500, 64K, 256K, 1M, 4M, etc (default \"1\")\n  -q\tDon't write any output to terminal, except errors\n  -rm\n    \tDelete source file(s) after successful compression\n  -safe\n    \tDo not overwrite output files\n  -slower\n    \tCompress more, but a lot slower\n  -snappy\n        Generate Snappy compatible output stream\n  -verify\n    \tVerify written files  \n```\n\n----------------------------------------\n\nTITLE: Adding Grafana Helm Repository\nDESCRIPTION: These commands add the Grafana Helm repository and update the local repository cache. This is a prerequisite for installing Grafana using Helm.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/guides/k8s-monitoring-via-vm-single/README.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nhelm repo add grafana https://grafana.github.io/helm-charts\nhelm repo update\n```\n\n----------------------------------------\n\nTITLE: Pulling vmanomaly Docker Image - Shell\nDESCRIPTION: This command retrieves the VictoriaMetrics Anomaly Detection Docker image from DockerHub. It requires Docker to be installed and network access to DockerHub. The image tag specifies the exact version ('v1.20.1') to pull; no parameters required beyond the desired tag/version. Output is the local availability of the Docker image for subsequent use.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/anomaly-detection/QuickStart.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndocker pull victoriametrics/vmanomaly:v1.20.1\n```\n\n----------------------------------------\n\nTITLE: Reading Configuration from Files using Koanf in Go\nDESCRIPTION: Demonstrates how to use the Koanf library to load and merge configurations from JSON and YAML files. A global Koanf instance is created and used to read configuration values using key path syntax. No extra dependencies are required for basic usage.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/knadh/koanf/v2/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\n\t\"github.com/knadh/koanf/v2\"\n\t\"github.com/knadh/koanf/parsers/json\"\n\t\"github.com/knadh/koanf/parsers/yaml\"\n\t\"github.com/knadh/koanf/providers/file\"\n)\n\n// Global koanf instance. Use \".\" as the key path delimiter. This can be \"/\" or any character.\nvar k = koanf.New(\".\")\n\nfunc main() {\n\t// Load JSON config.\n\tif err := k.Load(file.Provider(\"mock/mock.json\"), json.Parser()); err != nil {\n\t\tlog.Fatalf(\"error loading config: %v\", err)\n\t}\n\n\t// Load YAML config and merge into the previously loaded config (because we can).\n\tk.Load(file.Provider(\"mock/mock.yml\"), yaml.Parser())\n\n\tfmt.Println(\"parent's name is = \", k.String(\"parent1.name\"))\n\tfmt.Println(\"parent's ID is = \", k.Int(\"parent1.id\"))\n}\n```\n\n----------------------------------------\n\nTITLE: Graphite Query Filter in VictoriaMetrics\nDESCRIPTION: Example of a Graphite query filter with wildcards in VictoriaMetrics. A bug fix in v1.53.1 ensures proper searching for such filters.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/changelog/CHANGELOG_2021.md#2025-04-22_snippet_31\n\nLANGUAGE: graphite\nCODE:\n```\n{__graphite__=\"foo.*.bar\"}\n```\n\n----------------------------------------\n\nTITLE: Config Splitter CLI Usage\nDESCRIPTION: Command line interface documentation for the config_splitter utility that enables splitting vmanomaly YAML configurations into multiple sub-configurations based on logical entities.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/anomaly-detection/FAQ.md#2025-04-22_snippet_9\n\nLANGUAGE: shellhelp\nCODE:\n```\nusage: config_splitter.py [-h] --splitBy {schedulers,models,queries,extra_filters,complete} --outputDir OUTPUT_DIR [--fileNameFormat {raw,hash,int}] [--loggerLevel {WARNING,ERROR,FATAL,INFO,DEBUG}]\n                          config [config ...]\n\nSplits the configuration of VictoriaMetrics Anomaly Detection service by a logical entity.\n\npositional arguments:\n  config                YAML config files to be combined into a single configuration.\n\noptions:\n  -h                    show this help message and exit\n  --splitBy {schedulers,models,queries,extra_filters,complete}\n                        The logical entity to split by. Choices: ['schedulers', 'models', 'queries', 'extra_filters', 'complete']. `complete` produces configurations based on combinations of\n                        (scheduler, model, queries). Default: complete.\n  --outputDir output_dir\n                        Directory where the split configuration files will be saved.\n  --fileNameFormat {raw,hash,int}\n                        The naming format for the output configuration files. Choices: raw (use the entity alias), hash (use hashed alias), int (use a sequential integer from 0 to N for N produced\n                        sub-configs). Default: raw.\n  --loggerLevel {WARNING,ERROR,FATAL,INFO,DEBUG}\n                        Minimum level to log. Default: INFO\n```\n\n----------------------------------------\n\nTITLE: Importing jwt-go package in Go\nDESCRIPTION: This Go import statement allows you to use the jwt-go library functionalities like parsing and verifying JWTs. Ensure that jwt-go is installed in your Go environment before importing it. The package provides methods for JWT creation, validation, and signing with several algorithms.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/golang-jwt/jwt/v5/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/golang-jwt/jwt/v5\"\n```\n\n----------------------------------------\n\nTITLE: Expected Output for Finding vminsert Service (sh)\nDESCRIPTION: This text block shows the expected output when searching for the `vminsert` service. It displays the service name (e.g., 'vminsert-example-vmcluster-persistent'), type, cluster IP, external IP (if applicable), ports, and age.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/guides/getting-started-with-vm-operator/README.md#2025-04-22_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\nvminsert-example-vmcluster-persistent    ClusterIP   10.107.47.136   <none>        8480/TCP                     5m58s\n```\n\n----------------------------------------\n\nTITLE: Complete Remote Write Setup with Node Exporter\nDESCRIPTION: Full configuration example showing node exporter metrics collection and forwarding to VictoriaMetrics using remote write protocol. Includes scrape target configuration and metrics forwarding setup.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/data-ingestion/Alloy.md#2025-04-22_snippet_1\n\nLANGUAGE: Alloy\nCODE:\n```\nprometheus.exporter.unix \"nodeexporter\" {}\n\nprometheus.scrape \"nodeexporter\" {\n  targets = prometheus.exporter.unix.nodeexporter.targets\n  forward_to = [prometheus.remote_write.victoriametrics.receiver]\n}\n\nprometheus.remote_write \"victoriametrics\" {\n  endpoint {\n    url = \"https://<victoriametrics_url>/prometheus/api/v1/write\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing the Gzip Compression Package with go get (bash)\nDESCRIPTION: This bash command demonstrates how to fetch and install the 'github.com/klauspost/compress' Go package, which is required to use the HTTP Gzip middleware and its extensions. Running this command downloads the latest version of the package and places it in the GOPATH for use in Go projects. There are no input or output parameters and it should be executed from the command line in your project directory.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/klauspost/compress/gzhttp/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get -u github.com/klauspost/compress\n\n```\n\n----------------------------------------\n\nTITLE: Generating Traffic to /rolldice for Metrics Testing - Shell\nDESCRIPTION: This shell loop initiates 20 HTTP requests to the '/rolldice' endpoint of the example Go web server, simulating application usage and generating OpenTelemetry metrics and logs. Modify endpoint or loop count as required.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/guides/getting-started-with-opentelemetry/README.md#2025-04-22_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\nfor i in `seq 1 20`; do curl http://localhost:8080/rolldice; done\n```\n\n----------------------------------------\n\nTITLE: MetricsQL Query with Multiple Label Filters\nDESCRIPTION: This snippet illustrates how to combine multiple label filters in a MetricsQL query. It shows an example of selecting time series that match specific values for multiple labels simultaneously.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/keyConcepts/keyConcepts.md#2025-04-22_snippet_18\n\nLANGUAGE: metricsql\nCODE:\n```\nrequests_total{code=~\"200\", path=\"/home\"}\n```\n\n----------------------------------------\n\nTITLE: Transforming ETag Handling with azcore in Azure Go SDK - YAML\nDESCRIPTION: This snippet updates Go source files to use azcore.ETag in place of string pointers for ETag-related fields in models, responses, and client operations. It performs multiple regex replacements to adjust import statements, signature types, and assignments, ensuring the correct azcore types and utility functions are used. Dependencies include the Azure Go SDK and correct placement of the azcore import; the snippet expects file patterns and model field names as shown, and output is transformed Go code with improved type safety for ETags.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/internal/generated/autorest.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n- from:\n  - zz_models.go\n  - zz_options.go\n  where: $\n  transform: >-\n    return $.\n      replace(/import \"time\"/, `import (\\n\\t\"time\"\\n\\t\"github.com/Azure/azure-sdk-for-go/sdk/azcore\"\\n)`).\n      replace(/Etag\\s+\\*string/g, `ETag *azcore.ETag`).\n      replace(/IfMatch\\s+\\*string/g, `IfMatch *azcore.ETag`).\n      replace(/IfNoneMatch\\s+\\*string/g, `IfNoneMatch *azcore.ETag`).\n      replace(/SourceIfMatch\\s+\\*string/g, `SourceIfMatch *azcore.ETag`).\n      replace(/SourceIfNoneMatch\\s+\\*string/g, `SourceIfNoneMatch *azcore.ETag`);\n\n- from: zz_responses.go\n  where: $\n  transform: >-\n    return $.\n      replace(/\"time\"/, `\"time\"\\n\\t\"github.com/Azure/azure-sdk-for-go/sdk/azcore\"`).\n      replace(/ETag\\s+\\*string/g, `ETag *azcore.ETag`);\n\n- from:\n  - zz_appendblob_client.go\n  - zz_blob_client.go\n  - zz_blockblob_client.go\n  - zz_container_client.go\n  - zz_pageblob_client.go\n  where: $\n  transform: >-\n    return $.\n      replace(/\"github\\.com\\/Azure\\/azure\\-sdk\\-for\\-go\\/sdk\\/azcore\\/policy\"/, `\"github.com/Azure/azure-sdk-for-go/sdk/azcore\"\\n\\t\"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy\"`).\n      replace(/result\\.ETag\\s+=\\s+&val/g, `result.ETag = (*azcore.ETag)(&val)`).\n      replace(/\\*modifiedAccessConditions.IfMatch/g, `string(*modifiedAccessConditions.IfMatch)`).\n      replace(/\\*modifiedAccessConditions.IfNoneMatch/g, `string(*modifiedAccessConditions.IfNoneMatch)`).\n      replace(/\\*sourceModifiedAccessConditions.SourceIfMatch/g, `string(*sourceModifiedAccessConditions.SourceIfMatch)`).\n      replace(/\\*sourceModifiedAccessConditions.SourceIfNoneMatch/g, `string(*sourceModifiedAccessConditions.SourceIfNoneMatch)`);\n```\n\n----------------------------------------\n\nTITLE: Defining Prometheus Alerting Rules - YAML\nDESCRIPTION: This YAML code provides an example alerting rules file for Prometheus or VictoriaMetrics vmalert. It defines a group of two rules, each with an alert name, expression, duration threshold (`for`), severity label, and annotation for summary or description. The dependencies are a Prometheus-compatible alert manager (like vmalert); the configuration must be uploaded to the deployment and adhere to limits (max 100 rules per deployment, max 20mb per file, and unique group names). Inputs are metric expressions in the `expr` fields and outputs are alert triggers according to evaluated conditions.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics-cloud/alertmanager-setup-for-deployment.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ngroups:\n  - name: examples\n    concurrency: 2\n    interval: 10s\n    rules:\n      - alert: never-firing\n        expr: foobar > 0\n        for: 30s\n        labels:\n          severity: warning\n        annotations:\n          summary: empty result rule\n      - alert: always-firing\n        expr: vector(1) > 0 \n        for: 30s\n        labels:\n          severity: critical\n        annotations:\n          summary: \"rule must be always at firing state\"\n\n```\n\n----------------------------------------\n\nTITLE: Building VictoriaLogs from Source - Build Binary\nDESCRIPTION: Make command to build VictoriaLogs binary from source code. Requires Go 1.22.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/QuickStart.md#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nmake victoria-logs\n```\n\n----------------------------------------\n\nTITLE: Mixed Content Block Compression Comparison\nDESCRIPTION: Markdown table comparing different compression algorithms' performance on mixed content blocks, showing input/output sizes, reduction percentages, and throughput.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/klauspost/compress/s2/README.md#2025-04-22_snippet_11\n\nLANGUAGE: markdown\nCODE:\n```\n| *                 | Input      | Output     | Reduction  | MB/s       |\n|-------------------|------------|------------|------------|------------|\n| S2                | 4014735833 | 1059723369 | 73.60%     | **936.73** |\n```\n\n----------------------------------------\n\nTITLE: Update Backup Lock Status API Request (JSON)\nDESCRIPTION: Example JSON request body for the `PUT /api/v1/backups/<BACKUP_NAME>` endpoint. This is used to update the 'locked' attribute of a specific backup, preventing or allowing its deletion. Setting `locked` to `true` locks the backup.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmbackupmanager.md#2025-04-22_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\"locked\":true}\n\n```\n\n----------------------------------------\n\nTITLE: Rebuilding libzstd.a with Custom Build Flags using Make\nDESCRIPTION: Shows how to pass custom compilation flags to the C compiler when rebuilding the `libzstd*.a` library using the `make` command. The `MOREFLAGS` environment variable is used to specify additional flags, such as `-fPIC` (Position Independent Code), which might be required in certain linking scenarios. The command `MOREFLAGS=-fPIC make clean libzstd.a` sets the flag before cleaning and building.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/valyala/gozstd/README.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nMOREFLAGS=-fPIC make clean libzstd.a\n```\n\n----------------------------------------\n\nTITLE: Verifying Managed Identity Endpoint via curl - Shell Script\nDESCRIPTION: This snippet demonstrates how to use the curl command in a Linux shell to check if the Azure Managed Identity endpoint (IMDS) is reachable on a virtual machine. It requires access to the target VM and assumes curl is installed. The command queries the local metadata endpoint for an OAuth2 token. It outputs a JSON response that contains a sensitive access token (which MUST be kept confidential). The endpoint and headers are specific to Azure's managed identity metadata service.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/Azure/azure-sdk-for-go/sdk/azidentity/TROUBLESHOOTING.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncurl 'http://169.254.169.254/metadata/identity/oauth2/token?resource=https://management.core.windows.net&api-version=2018-02-01' -H \"Metadata: true\"\n```\n\n----------------------------------------\n\nTITLE: Calculate Monospace String Width using uniseg\nDESCRIPTION: This snippet calculates the width of a given string in a monospace font using the uniseg package’s StringWidth function. Requires the 'uniseg' package in a Go environment.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/rivo/uniseg/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nwidth := uniseg.StringWidth(\"🇩🇪🏳️‍🌈!\")\nfmt.Println(width)\n// 5\n```\n\n----------------------------------------\n\nTITLE: Installing multierr Go Library\nDESCRIPTION: This command installs the latest version of the multierr library using Go's package management system. It fetches the package from the go.uber.org/multierr repository.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/go.uber.org/multierr/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get -u go.uber.org/multierr@latest\n```\n\n----------------------------------------\n\nTITLE: Conditional Label Value Modification in YAML\nDESCRIPTION: This YAML configuration shows how to add a 'foo_' prefix to 'job' label values only for metrics matching a specific series selector.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/relabeling.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nscrape_configs:\n- job_name: test\n  static_configs:\n  - targets: [host123]\n  metric_relabel_configs:\n  - if: '{job=~\"my-app-.*\",env!=\"dev\"}'\n    source_labels: [job]\n    target_label: job\n    replacement: foo_$1\n```\n\n----------------------------------------\n\nTITLE: Successful Backup Creation API Response (JSON)\nDESCRIPTION: Example JSON body returned by the `POST /api/v1/backups` endpoint upon successfully scheduling or creating a backup. It returns an empty JSON object with a 201 status code.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmbackupmanager.md#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n    {}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Downsampling in VictoriaMetrics\nDESCRIPTION: Command-line flag for configuring basic downsampling in VictoriaMetrics Enterprise. This example instructs the system to leave the last sample per each 5-minute interval for samples older than 30 days.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/README.md#2025-04-22_snippet_68\n\nLANGUAGE: bash\nCODE:\n```\n-downsampling.period=30d:5m\n```\n\n----------------------------------------\n\nTITLE: Inefficient QuickTemplate String Construction Example\nDESCRIPTION: Example showing a less efficient approach to constructing complex strings in QuickTemplate by manually building strings before passing them to the template output.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/valyala/quicktemplate/README.md#2025-04-22_snippet_7\n\nLANGUAGE: qtpl\nCODE:\n```\n{% func Foo(n int) %}\n    {% code\n    // construct complex string\n    complexStr := \"\"\n    for i := 0; i < n; i++ {\n        complexStr += fmt.Sprintf(\"num %d,\", i)\n    }\n    %}\n    complex string = {%s= complexStr %}\n{% endfunc %}\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Client Secret using autorest/adal in Go\nDESCRIPTION: This Go code demonstrates authenticating to Azure using a client secret with the `autorest/adal` library. It involves creating an `adal.OAuthConfig`, obtaining a `ServicePrincipalToken` using the client ID, secret, and resource audience, and then creating an `autorest.Authorizer` to assign to the `Authorizer` field of an older Azure SDK client (e.g., `subscriptions.NewClient`).\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/Azure/azure-sdk-for-go/sdk/azidentity/MIGRATION.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"github.com/Azure/azure-sdk-for-go/services/resources/mgmt/2018-06-01/subscriptions\"\n    \"github.com/Azure/go-autorest/autorest\"\n    \"github.com/Azure/go-autorest/autorest/adal\"\n)\n\noauthCfg, err := adal.NewOAuthConfig(\"https://login.microsoftonline.com\", tenantID)\nhandle(err)\nspt, err := adal.NewServicePrincipalTokenWithSecret(\n    *oauthCfg, clientID, \"https://management.azure.com/\", &adal.ServicePrincipalTokenSecret{ClientSecret: secret},\n)\nhandle(err)\n\nclient := subscriptions.NewClient()\nclient.Authorizer = autorest.NewBearerAuthorizer(spt)\n```\n\n----------------------------------------\n\nTITLE: LogsQL Top N Query Examples\nDESCRIPTION: Demonstrates two equivalent LogsQL queries for finding top 5 user_ids, using both shorthand and full syntax.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/sql-to-logsql.md#2025-04-22_snippet_3\n\nLANGUAGE: logsql\nCODE:\n```\n* | top 5 (user_id)\n```\n\nLANGUAGE: logsql\nCODE:\n```\n* | by (user_id) count() hits | sort by (hits desc) limit 5\n```\n\n----------------------------------------\n\nTITLE: Deploying vmalert via Helm Chart for Cluster Mode (Shell/Bash)\nDESCRIPTION: This Helm-based script deploys vmalert for VictoriaMetrics Cloud in cluster mode, differentiating read and write endpoints. It uses a here-document for inline configuration, with environment variables for token and endpoint management. Relies on Helm, VictoriaMetrics Helm chart, and pre-configured cluster endpoints and tokens.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics-cloud/alerting-vmalert-victoria-metrics-cloud.md#2025-04-22_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nexport TOKEN=76bc5470-****-****-****-************\nexport MANAGED_VM_READ_URL=https://gw-c15-1a.cloud.victoriametrics.com/select/0/prometheus/\nexport MANAGED_VM_WRITE_URL=https://gw-c15-1a.cloud.victoriametrics.com/insert/0/prometheus/\nexport ALERTMANAGER=http://alertmanager:9093\ncat <<EOF | helm install vmalert vm/victoria-metrics-alert -f -\nserver:\n datasource:\n   url: $MANAGED_VM_READ_URL\n   bearer:\n     token: $TOKEN\n remote:\n   write:\n     url: $MANAGED_VM_WRITE_URL\n     bearer:\n       token: $TOKEN\n   read:\n     url: $MANAGED_VM_READ_URL\n     bearer:\n       token: $TOKEN\n notifier:\n   alertmanager:\n     url: $ALERTMANAGER\n config:\n   alerts:\n     groups:\n       - name: common\n         rules:\n           - alert: instanceIsDown\n             for: 1m\n             expr: up == 0\n             labels:\n               severity: critical\n             annotations:\n               summary: \"{{ $labels.job }} instance: {{$labels.instance }} is not up\"\n               description: \"Job {{ $labels.job }}  instance: {{$labels.instance }} is not up for the last 1 minute\"\nEOF\n```\n\n----------------------------------------\n\nTITLE: QuickTemplate JSON and XML Marshalling Benchmark Results\nDESCRIPTION: Benchmark results comparing the performance of QuickTemplate-based JSON and XML marshalling against standard library implementations. Shows significant performance advantages for QuickTemplate.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/valyala/quicktemplate/README.md#2025-04-22_snippet_10\n\nLANGUAGE: go\nCODE:\n```\ngo test -bench=Marshal -benchmem github.com/valyala/quicktemplate/tests\nBenchmarkMarshalJSONStd1-4                \t 3000000\t       480 ns/op\t       8 B/op\t       1 allocs/op\nBenchmarkMarshalJSONStd10-4               \t 1000000\t      1842 ns/op\t       8 B/op\t       1 allocs/op\nBenchmarkMarshalJSONStd100-4              \t  100000\t     15820 ns/op\t       8 B/op\t       1 allocs/op\nBenchmarkMarshalJSONStd1000-4             \t   10000\t    159327 ns/op\t      59 B/op\t       1 allocs/op\nBenchmarkMarshalJSONQuickTemplate1-4      \t10000000\t       162 ns/op\t       0 B/op\t       0 allocs/op\nBenchmarkMarshalJSONQuickTemplate10-4     \t 2000000\t       748 ns/op\t       0 B/op\t       0 allocs/op\nBenchmarkMarshalJSONQuickTemplate100-4    \t  200000\t      6572 ns/op\t       0 B/op\t       0 allocs/op\nBenchmarkMarshalJSONQuickTemplate1000-4   \t   20000\t     66784 ns/op\t      29 B/op\t       0 allocs/op\nBenchmarkMarshalXMLStd1-4                 \t 1000000\t      1652 ns/op\t       2 B/op\t       2 allocs/op\nBenchmarkMarshalXMLStd10-4                \t  200000\t      7533 ns/op\t      11 B/op\t      11 allocs/op\nBenchmarkMarshalXMLStd100-4               \t   20000\t     65763 ns/op\t     195 B/op\t     101 allocs/op\nBenchmarkMarshalXMLStd1000-4              \t    2000\t    663373 ns/op\t    3522 B/op\t    1002 allocs/op\nBenchmarkMarshalXMLQuickTemplate1-4       \t10000000\t       145 ns/op\t       0 B/op\t       0 allocs/op\nBenchmarkMarshalXMLQuickTemplate10-4      \t 3000000\t       597 ns/op\t       0 B/op\t       0 allocs/op\nBenchmarkMarshalXMLQuickTemplate100-4     \t  300000\t      5833 ns/op\t       0 B/op\t       0 allocs/op\nBenchmarkMarshalXMLQuickTemplate1000-4    \t   30000\t     53000 ns/op\t      32 B/op\t       0 allocs/op\n```\n\n----------------------------------------\n\nTITLE: Implementing Boolean Option in Go\nDESCRIPTION: Demonstrates how to implement boolean options for configuration, including both default false and default true cases.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\ntype defaultFalseOption bool\n\nfunc (o defaultFalseOption) apply(c config) config {\n\tc.Bool = bool(o)\n    return c\n}\n\n// WithOption sets a T to have an option included.\nfunc WithOption() Option {\n\treturn defaultFalseOption(true)\n}\n```\n\nLANGUAGE: go\nCODE:\n```\ntype defaultTrueOption bool\n\nfunc (o defaultTrueOption) apply(c config) config {\n\tc.Bool = bool(o)\n    return c\n}\n\n// WithoutOption sets a T to have Bool option excluded.\nfunc WithoutOption() Option {\n\treturn defaultTrueOption(false)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring VictoriaLogs Storage Path\nDESCRIPTION: Command to specify custom storage path for VictoriaLogs data. Allows changing the default storage location to a specified directory path.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/README.md#2025-04-22_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\n/path/to/victoria-logs -storageDataPath=/var/lib/victoria-logs\n```\n\n----------------------------------------\n\nTITLE: Successful Model Fit-Infer Log (Rolling)\nDESCRIPTION: Logs information about a successful combined fit-infer operation for rolling models, indicating the number of datapoints processed. Accompanied by metric updates. Placeholders `{{scheduler_alias}}`, `{{datapoint_count}}`, `{{query_key}}`, and `{{model_alias}}` provide context.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/anomaly-detection/components/monitoring.md#2025-04-22_snippet_19\n\nLANGUAGE: text\nCODE:\n```\n[Scheduler {{scheduler_alias}}] Fit-Infer on {{datapoint_count}} points for \"{{query_key}}\" using model \"{{model_alias}}\".\n```\n\n----------------------------------------\n\nTITLE: Model Instance Creation Log (Inference)\nDESCRIPTION: Logs a debug message when an online model instance is created dynamically during the inference stage (without a prior fit, available from v1.15.2). This helps track dynamically created models. Placeholders `{{scheduler_alias}}`, `{{model_alias}}`, and `{{query_key}}` provide context.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/anomaly-detection/components/monitoring.md#2025-04-22_snippet_16\n\nLANGUAGE: text\nCODE:\n```\n[Scheduler {{scheduler_alias}}] Model instance '{{model_alias}}' created for '{{query_key}}' during inference.\n```\n\n----------------------------------------\n\nTITLE: Using stddev_over_time with VictoriaMetrics - Markdown - Syntax Reference\nDESCRIPTION: This snippet shows the stddev_over_time rollup function, which computes the standard deviation of raw samples in a given window d for each series. Typically applied to gauge metrics, it strips metric names unless keep_metric_names is used, and is compatible with PromQL. Arguments: series_selector (metric expression), d (time window). Output is the standard deviation value for each time series.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_59\n\nLANGUAGE: Markdown\nCODE:\n```\n`stddev_over_time(series_selector[d])`\n```\n\n----------------------------------------\n\nTITLE: Custom Merge Strategy Implementation in Go\nDESCRIPTION: Demonstrates how to implement a custom merge strategy using WithMergeFunc for handling configuration merging between different sources\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/knadh/koanf/v2/README.md#2025-04-22_snippet_15\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"errors\"\n\t\"log\"\n\n\t\"github.com/knadh/koanf/v2\"\n\t\"github.com/knadh/koanf/maps\"\n\t\"github.com/knadh/koanf/parsers/json\"\n\t\"github.com/knadh/koanf/parsers/yaml\"\n\t\"github.com/knadh/koanf/providers/file\"\n)\n\nvar conf = koanf.Conf{\n\tDelim:       \".\",\n\tStrictMerge: true,\n}\nvar k = koanf.NewWithConf(conf)\n\nfunc main() {\n\tyamlPath := \"mock/mock.yml\"\n\tif err := k.Load(file.Provider(yamlPath), yaml.Parser()); err != nil {\n\t\tlog.Fatalf(\"error loading config: %v\", err)\n\t}\n\n\tjsonPath := \"mock/mock.json\"\n\tif err := k.Load(file.Provider(jsonPath), json.Parser(), koanf.WithMergeFunc(func(src, dest map[string]interface{}) error {\n     // Your custom logic, copying values from src into dst\n     return nil\n    })); err != nil {\n\t\tlog.Fatalf(\"error loading config: %v\", err)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Shutting Down VictoriaLogs Cluster Docker Compose Environment\nDESCRIPTION: Command to shut down the Docker Compose environment for VictoriaLogs cluster configuration.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/deployment/docker/README.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nmake docker-vl-cluster-down\n```\n\n----------------------------------------\n\nTITLE: Multitenancy Warning for Single-tenant Mode with vm_account_id\nDESCRIPTION: Warning message shown when writing data with vm_account_id labels to a non-multitenant endpoint. This indicates a configuration mismatch between reader and writer components.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/anomaly-detection/components/writer.md#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nThe label set for the metric {query_result.key} contains multi-tenancy labels, \nbut the write endpoint is configured for single-tenant mode (tenant_id != 'multitenant'). \nEither adjust the query in the reader to avoid multi-tenancy labels \nor ensure that reserved key `vm_account_id` is not explicitly set for single-tenant environments.\n```\n\n----------------------------------------\n\nTITLE: Advanced JMESPath Queries in Go\nDESCRIPTION: This snippet illustrates advanced querying using go-jmespath, showing query functionalities like nested field retrieval, filtering based on conditions, and using wildcards. Required dependencies are the go-jmespath library and the encoding/json package for handling JSON data. It demonstrates selecting sub-objects, array elements, and filtering entries based on conditions. Ensuring correct path expressions for intended data retrieval is crucial.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/jmespath/go-jmespath/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n> var jsondata = []byte(`{\"foo\": {\"bar\": {\"baz\": [0, 1, 2, 3, 4]}}}`) // your data\n> var data interface{}\n> err := json.Unmarshal(jsondata, &data)\n> result, err := jmespath.search(\"foo.bar\", data)\nresult = { \"baz\": [ 0, 1, 2, 3, 4 ] }\n\n\n> var jsondata  = []byte(`{\"foo\": [{\"first\": \"a\", \"last\": \"b\"},\n                           {\"first\": \"c\", \"last\": \"d\"}]}`) // your data\n> var data interface{}\n> err := json.Unmarshal(jsondata, &data)\n> result, err := jmespath.search({\"foo[*].first\", data)\nresult [ 'a', 'c' ]\n\n\n> var jsondata = []byte(`{\"foo\": [{\"age\": 20}, {\"age\": 25},\n                           {\"age\": 30}, {\"age\": 35},\n                           {\"age\": 40}]}`) // your data\n> var data interface{}\n> err := json.Unmarshal(jsondata, &data)\n> result, err := jmespath.search(\"foo[?age > `30`]\")\nresult = [ { age: 35 }, { age: 40 } ]\n```\n\n----------------------------------------\n\nTITLE: Changelog JSON Format Example\nDESCRIPTION: Example JSON structure for changelog entries that must be included with pull requests. The file should be placed in the .changelog directory and includes fields for ID, type, collapse status, description, and affected modules.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/aws/smithy-go/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": \"12345678-1234-1234-1234-123456789012\"\n    \"type\": \"bugfix\"\n    \"collapse\": true\n    \"description\": \"Fix improper use of printf-style functions.\",\n    \"modules\": [\n        \".\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Trimming Top Percentage Spikes - MetricsQL (English)\nDESCRIPTION: The `range_trim_spikes(phi, q)` function removes the largest `phi` (0-1) fraction of points from each time series, filtering out extreme spikes. Useful for healthcare, anomaly detection, or robust statistics.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/MetricsQL.md#2025-04-22_snippet_95\n\nLANGUAGE: MetricsQL\nCODE:\n```\n`range_trim_spikes(phi, q)`\n```\n\n----------------------------------------\n\nTITLE: Minimal OpenShift Configuration for Victoria Logs\nDESCRIPTION: This YAML configuration defines security settings for running Victoria Logs in OpenShift. It sets the security context for Pods, requiring non-root execution and disabling privilege escalation.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/guides/collecting-openshift-logs-with-victoria-logs/README.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nsecurityContext:\n  enabled: true\n  allowPrivilegeEscalation: false\n  capabilities:\n    drop:\n      - ALL\n  readOnlyRootFilesystem: true\n\npodSecurityContext:\n  enabled: true\n  runAsNonRoot: true\n```\n\n----------------------------------------\n\nTITLE: Listing All Command-Line Options for vmrestore (Shell)\nDESCRIPTION: Lists and documents all available command-line flags for the vmrestore utility using the '-help' flag. This snippet is a shell command output sample, showing operational flags such as concurrency, config paths, authentication and security settings, HTTP server options, and logging preferences. No external dependencies are required apart from vmrestore; users run 'vmrestore -help' to see these options directly. Inputs are command-line arguments, and outputs are the resulting help text; some options require file or URL paths, and some flags are only available in Enterprise binaries.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmrestore.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n  -concurrency int\n     The number of concurrent workers. Higher concurrency may reduce restore duration (default 10)\n  -configFilePath string\n     Path to file with S3 configs. Configs are loaded from default location if not set.\n     See https://docs.aws.amazon.com/general/latest/gr/aws-security-credentials.html\n  -configProfile string\n     Profile name for S3 configs. If no set, the value of the environment variable will be loaded (AWS_PROFILE or AWS_DEFAULT_PROFILE), or if both not set, DefaultSharedConfigProfile is used\n  -credsFilePath string\n     Path to file with GCS or S3 credentials. Credentials are loaded from default locations if not set.\n     See https://cloud.google.com/iam/docs/creating-managing-service-account-keys and https://docs.aws.amazon.com/general/latest/gr/aws-security-credentials.html\n  -customS3Endpoint string\n     Custom S3 endpoint for use with S3-compatible storages (e.g. MinIO). S3 is used if not set\n  -deleteAllObjectVersions\n     Whether to prune previous object versions when deleting an object. By default, when object storage has versioning enabled deleting the file removes only current version. This option forces removal of all previous versions. See: https://docs.victoriametrics.com/vmbackup/#permanent-deletion-of-objects-in-s3-compatible-storages\n  -enableTCP6\n     Whether to enable IPv6 for listening and dialing. By default, only IPv4 TCP and UDP are used\n  -envflag.enable\n     Whether to enable reading flags from environment variables in addition to the command line. Command line flag values have priority over values from environment vars. Flags are read only from the command line if this flag isn't set. See https://docs.victoriametrics.com/#environment-variables for more details\n  -envflag.prefix string\n     Prefix for environment variables if -envflag.enable is set\n  -eula\n     Deprecated, please use -license or -licenseFile flags instead. By specifying this flag, you confirm that you have an enterprise license and accept the ESA https://victoriametrics.com/legal/esa/ . This flag is available only in Enterprise binaries. See https://docs.victoriametrics.com/enterprise/\n  -filestream.disableFadvise\n     Whether to disable fadvise() syscall when reading large data files. The fadvise() syscall prevents from eviction of recently accessed data from OS page cache during background merges and backups. In some rare cases it is better to disable the syscall if it uses too much CPU\n  -flagsAuthKey value\n     Auth key for /flags endpoint. It must be passed via authKey query arg. It overrides -httpAuth.*\n     Flag value can be read from the given file when using -flagsAuthKey=file:///abs/path/to/file or -flagsAuthKey=file://./relative/path/to/file . Flag value can be read from the given http/https url when using -flagsAuthKey=http://host/path or -flagsAuthKey=https://host/path\n  -fs.disableMmap\n     Whether to use pread() instead of mmap() for reading data files. By default, mmap() is used for 64-bit arches and pread() is used for 32-bit arches, since they cannot read data files bigger than 2^32 bytes in memory. mmap() is usually faster for reading small data chunks than pread()\n  -http.connTimeout duration\n     Incoming connections to -httpListenAddr are closed after the configured timeout. This may help evenly spreading load among a cluster of services behind TCP-level load balancer. Zero value disables closing of incoming connections (default 2m0s)\n  -http.disableResponseCompression\n     Disable compression of HTTP responses to save CPU resources. By default, compression is enabled to save network bandwidth\n  -http.header.csp string\n     Value for 'Content-Security-Policy' header, recommended: \"default-src 'self'\"\n  -http.header.frameOptions string\n     Value for 'X-Frame-Options' header\n  -http.header.hsts string\n     Value for 'Strict-Transport-Security' header, recommended: 'max-age=31536000; includeSubDomains'\n  -http.idleConnTimeout duration\n     Timeout for incoming idle http connections (default 1m0s)\n  -http.maxGracefulShutdownDuration duration\n     The maximum duration for a graceful shutdown of the HTTP server. A highly loaded server may require increased value for a graceful shutdown (default 7s)\n  -http.pathPrefix string\n     An optional prefix to add to all the paths handled by http server. For example, if '-http.pathPrefix=/foo/bar' is set, then all the http requests will be handled on '/foo/bar/*' paths. This may be useful for proxied requests. See https://www.robustperception.io/using-external-urls-and-proxies-with-prometheus\n  -http.shutdownDelay duration\n     Optional delay before http server shutdown. During this delay, the server returns non-OK responses from /health page, so load balancers can route new requests to other servers\n  -httpAuth.password value\n     Password for HTTP server's Basic Auth. The authentication is disabled if -httpAuth.username is empty\n     Flag value can be read from the given file when using -httpAuth.password=file:///abs/path/to/file or -httpAuth.password=file://./relative/path/to/file . Flag value can be read from the given http/https url when using -httpAuth.password=http://host/path or -httpAuth.password=https://host/path\n  -httpAuth.username string\n     Username for HTTP server's Basic Auth. The authentication is disabled if empty. See also -httpAuth.password\n  -httpListenAddr string\n     TCP address for exporting metrics at /metrics page (default \":8421\")\n  -internStringCacheExpireDuration duration\n     The expiry duration for caches for interned strings. See https://en.wikipedia.org/wiki/String_interning . See also -internStringMaxLen and -internStringDisableCache (default 6m0s)\n  -internStringDisableCache\n     Whether to disable caches for interned strings. This may reduce memory usage at the cost of higher CPU usage. See https://en.wikipedia.org/wiki/String_interning . See also -internStringCacheExpireDuration and -internStringMaxLen\n  -internStringMaxLen int\n     The maximum length for strings to intern. A lower limit may save memory at the cost of higher CPU usage. See https://en.wikipedia.org/wiki/String_interning . See also -internStringDisableCache and -internStringCacheExpireDuration (default 500)\n  -license string\n     License key for VictoriaMetrics Enterprise. See https://victoriametrics.com/products/enterprise/ . Trial Enterprise license can be obtained from https://victoriametrics.com/products/enterprise/trial/ . This flag is available only in Enterprise binaries. The license key can be also passed via file specified by -licenseFile command-line flag\n  -license.forceOffline\n     Whether to enable offline verification for VictoriaMetrics Enterprise license key, which has been passed either via -license or via -licenseFile command-line flag. The issued license key must support offline verification feature. Contact info@victoriametrics.com if you need offline license verification. This flag is available only in Enterprise binaries\n  -licenseFile string\n     Path to file with license key for VictoriaMetrics Enterprise. See https://victoriametrics.com/products/enterprise/ . Trial Enterprise license can be obtained from https://victoriametrics.com/products/enterprise/trial/ . This flag is available only in Enterprise binaries. The license key can be also passed inline via -license command-line flag\n  -loggerDisableTimestamps\n     Whether to disable writing timestamps in logs\n  -loggerErrorsPerSecondLimit int\n     Per-second limit on the number of ERROR messages. If more than the given number of errors are emitted per second, the remaining errors are suppressed. Zero values disable the rate limit\n  -loggerFormat string\n     Format for logs. Possible values: default, json (default \"default\")\n  -loggerJSONFields string\n     Allows renaming fields in JSON formatted logs. Example: \"ts:timestamp,msg:message\" renames \"ts\" to \"timestamp\" and \"msg\" to \"message\". Supported fields: ts, level, caller, msg\n  -loggerLevel string\n     Minimum level of errors to log. Possible values: INFO, WARN, ERROR, FATAL, PANIC (default \"INFO\")\n  -loggerMaxArgLen int\n     The maximum length of a single logged argument. Longer arguments are replaced with 'arg_start..arg_end', where 'arg_start' and 'arg_end' is prefix and suffix of the arg with the length not exceeding -loggerMaxArgLen / 2 (default 1000)\n  -loggerOutput string\n     Output for the logs. Supported values: stderr, stdout (default \"stderr\")\n  -loggerTimezone string\n     Timezone to use for timestamps in logs. Timezone must be a valid IANA Time Zone. For example: America/New_York, Europe/Berlin, Etc/GMT+3 or Local (default \"UTC\")\n  -loggerWarnsPerSecondLimit int\n     Per-second limit on the number of WARN messages. If more than the given number of warns are emitted per second, then the remaining warns are suppressed. Zero values disable the rate limit\n  -maxBytesPerSecond size\n     The maximum download speed. There is no limit if it is set to 0\n     Supports the following optional suffixes for size values: KB, MB, GB, TB, KiB, MiB, GiB, TiB (default 0)\n  -memory.allowedBytes size\n     Allowed size of system memory VictoriaMetrics caches may occupy. This option overrides -memory.allowedPercent if set to a non-zero value. Too low a value may increase the cache miss rate usually resulting in higher CPU and disk IO usage. Too high a value may evict too much data from the OS page cache resulting in higher disk IO usage\n     Supports the following optional suffixes for size values: KB, MB, GB, TB, KiB, MiB, GiB, TiB (default 0)\n  -memory.allowedPercent float\n```\n\n----------------------------------------\n\nTITLE: Expected Output for Port-Forwarding (text)\nDESCRIPTION: This text block shows the typical output when the `kubectl port-forward` command successfully establishes the connection. It indicates that forwarding is active from localhost (both IPv4 and IPv6) port 8429 to the VMAgent service's port 8429.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/guides/getting-started-with-vm-operator/README.md#2025-04-22_snippet_17\n\nLANGUAGE: text\nCODE:\n```\nForwarding from 127.0.0.1:8429 -> 8429\nForwarding from [::1]:8429 -> 8429\n```\n\n----------------------------------------\n\nTITLE: Key vmalert Configuration Flags for VictoriaLogs Integration\nDESCRIPTION: Important command-line flags for configuring vmalert to work with VictoriaLogs, including datasource URL, notifier URL, remote write/read URLs, and rule file paths.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/vmalert.md#2025-04-22_snippet_1\n\nLANGUAGE: shellhelp\nCODE:\n```\n-datasource.url string\n   Datasource address supporting log stats APIs, which can be a single VictoriaLogs node or a proxy in front of VictoriaLogs. Supports address in the form of IP address with a port (e.g., http://127.0.0.1:8428) or DNS SRV record.\n-notifier.url array\n   Prometheus Alertmanager URL, e.g. http://127.0.0.1:9093. List all Alertmanager URLs if it runs in the cluster mode to ensure high availability.\n   Supports an array of values separated by comma or specified via multiple flags.\n   Value can contain comma inside single-quoted or double-quoted string, {}, [] and () braces.\n-remoteWrite.url string\n   Optional URL to VictoriaMetrics or vminsert where to persist alerts state and recording rules results in form of timeseries. Supports address in the form of IP address with a port (e.g., http://127.0.0.1:8428) or DNS SRV record. For example, if -remoteWrite.url=http://127.0.0.1:8428 is specified, then the alerts state will be written to http://127.0.0.1:8428/api/v1/write . See also -remoteWrite.disablePathAppend, '-remoteWrite.showURL'.\n-remoteRead.url string\n   Optional URL to datasource compatible with MetricsQL. It can be single node VictoriaMetrics or vmselect.Remote read is used to restore alerts state.This configuration makes sense only if vmalert was configured with `remoteWrite.url` before and has been successfully persisted its state. Supports address in the form of IP address with a port (e.g., http://127.0.0.1:8428) or DNS SRV record. See also '-remoteRead.disablePathAppend', '-remoteRead.showURL'.\n-rule array\n   Path to the files or http url with alerting and/or recording rules in YAML format.\n   Supports hierarchical patterns and regexpes.\n   Examples:\n    -rule=\"/path/to/file\". Path to a single file with alerting rules.\n    -rule=\"http://<some-server-addr>/path/to/rules\". HTTP URL to a page with alerting rules.\n    -rule=\"dir/*.yaml\" -rule=\"/*.yaml\" -rule=\"gcs://vmalert-rules/tenant_%{TENANT_ID}/prod\".\n    -rule=\"dir/**/*.yaml\". Includes all the .yaml files in \"dir\" subfolders recursively.\n   Rule files support YAML multi-document. Files may contain %{ENV_VAR} placeholders, which are substituted by the corresponding env vars.\n   Enterprise version of vmalert supports S3 and GCS paths to rules.\n   For example: gs://bucket/path/to/rules, s3://bucket/path/to/rules\n   S3 and GCS paths support only matching by prefix, e.g. s3://bucket/dir/rule_ matches\n   all files with prefix rule_ in folder dir.\n   Supports an array of values separated by comma or specified via multiple flags.\n   Value can contain comma inside single-quoted or double-quoted string, {}, [] and () braces.\n-rule.defaultRuleType\n   Default type for rule expressions, can be overridden by type parameter inside the rule group. Supported values: \"graphite\", \"prometheus\" and \"vlogs\".\n   Default is \"prometheus\", change it to \"vlogs\" if all of the rules are written with LogsQL.\n-rule.evalDelay time\n   Adjustment of the time parameter for rule evaluation requests to compensate intentional data delay from the datasource. Normally, should be equal to `-search.latencyOffset` (cm d-line flag configured for VictoriaMetrics single-node or vmselect).\n   Since there is no intentional search delay in VictoriaLogs, `-rule.evalDelay` can be reduced to a few seconds to accommodate network and ingestion time.\n```\n\n----------------------------------------\n\nTITLE: Calculating Hyperbolic Tangent of Series Data - MetricsQL (English)\nDESCRIPTION: The `tanh(q)` function computes the hyperbolic tangent for all values in each series returned by `q`. As with similar math functions, metric names are removed unless otherwise kept, and it is available in MetricsQL.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/MetricsQL.md#2025-04-22_snippet_110\n\nLANGUAGE: MetricsQL\nCODE:\n```\n`tanh(q)`\n```\n\n----------------------------------------\n\nTITLE: vmagent StatefulSet Pod Naming Pattern\nDESCRIPTION: Example of vmagent pod naming convention for StatefulSets when using cluster member numbering.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/changelog/CHANGELOG_2022.md#2025-04-22_snippet_24\n\nLANGUAGE: text\nCODE:\n```\nvmagent-0, vmagent-1\n```\n\n----------------------------------------\n\nTITLE: Calculating Logs per Interval in LogsQL\nDESCRIPTION: This query calculates the hourly count of logs containing 'error' over the last day, using stats by time bucket and sorting by time.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/logsql-examples.md#2025-04-22_snippet_11\n\nLANGUAGE: logsql\nCODE:\n```\n_time:1d error | stats by (_time:1h) count() rows | sort by (_time)\n```\n\n----------------------------------------\n\nTITLE: Modifying NewClientCertificateCredential in Go\nDESCRIPTION: This snippet illustrates how to adapt the `NewClientCertificateCredential` initialization to utilize x509 certificates directly instead of file paths. It includes reading certificate data from a file and parsing it using the `ParseCertificates` function, requiring the os package for file operations and crypto for key management.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/Azure/azure-sdk-for-go/sdk/azidentity/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// before\n  cred, err := NewClientCertificateCredential(\"tenant\", \"client-id\", \"/cert.pem\", nil)\n\n  // after\n  certData, err := os.ReadFile(\"/cert.pem\")\n  certs, key, err := ParseCertificates(certData, password)\n  cred, err := NewClientCertificateCredential(tenantID, clientID, certs, key, nil)\n```\n\n----------------------------------------\n\nTITLE: Passing and Using a logr Logger in Go\nDESCRIPTION: Demonstrates how a `logr.Logger` instance, previously created (e.g., in `main`), is passed to other application components (like `createTheAppObject`) and subsequently used for logging within those components. This illustrates the pattern of dependency injection for the logger.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/go-logr/logr/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n```\n    app := createTheAppObject(logger)\n    app.Run()\n```\n```\n\n----------------------------------------\n\nTITLE: Decompression Performance Table\nDESCRIPTION: Markdown table showing decompression performance comparison between S2 and Snappy across various test files with throughput measurements and relative performance ratios.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/klauspost/compress/s2/README.md#2025-04-22_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n| File                           | S2 Throughput | vs. Snappy | Better Throughput | vs. Snappy |\n|--------------------------------|---------------|------------|-------------------|------------|\n| rawstudio-mint14.tar           | 2117 MB/s     | 1.14x      | 1738 MB/s         | 0.94x      |\n```\n\n----------------------------------------\n\nTITLE: Installing the Azure Blob Storage SDK for Go - Bash\nDESCRIPTION: This Bash snippet provides the Go command to download and install the Azure Blob Storage client SDK. The 'go get' utility fetches the specified module and its dependencies, integrating it into the Go workspace. The command must be run in a Go project directory and requires Go 1.18 or later installed. After execution, the 'azblob' module can be imported and used within Go applications.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/storage/azblob\n```\n\n----------------------------------------\n\nTITLE: Counting Samples with `count_samples` in MetricsQL\nDESCRIPTION: The `count_samples` function counts the total number of raw input samples received for a metric within the specified interval. This MetricsQL query shows its equivalence to summing the results of `count_over_time` for the metric over the interval.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/stream-aggregation.md#2025-04-22_snippet_16\n\nLANGUAGE: metricsql\nCODE:\n```\nsum(count_over_time(some_metric[interval]))\n```\n\n----------------------------------------\n\nTITLE: Using RGB Colors in Go\nDESCRIPTION: Illustrates how to use 24-bit RGB color codes with the 'color' package if the terminal supports them. This lets users set precise foreground and background colors.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/fatih/color/README.md#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\n\"color.RGB(255, 128, 0).Println(\\\"foreground orange\\\")\\ncolor.RGB(230, 42, 42).Println(\\\"foreground red\\\")\\n\\ncolor.BgRGB(255, 128, 0).Println(\\\"background orange\\\")\\ncolor.BgRGB(230, 42, 42).Println(\\\"background red\\\")\\n\"\n```\n\n----------------------------------------\n\nTITLE: Adding OpenTelemetry Helm Repo - Shell\nDESCRIPTION: These commands register the OpenTelemetry collector Helm charts repo and update the local Helm repo index to include it. Required before installing via Helm.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/guides/getting-started-with-opentelemetry/README.md#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nhelm repo add open-telemetry https://open-telemetry.github.io/opentelemetry-helm-charts\\nhelm repo update\n```\n\n----------------------------------------\n\nTITLE: Refreshing procfs Test Fixtures using Bash and Make\nDESCRIPTION: This Bash snippet provides commands to prepare the test fixtures directory for updates within the `procfs` project. It first removes the existing `testdata/fixtures` directory using `rm -rf` and then runs `make test`, which is expected to unpack the latest fixtures archive into that directory. This ensures a clean state before modifying test data.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/prometheus/procfs/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n```bash\nrm -rf testdata/fixtures\nmake test\n```\n```\n\n----------------------------------------\n\nTITLE: VictoriaMetrics Export API JSON Response for InfluxDB v2 Ingestion - JSON\nDESCRIPTION: Shows example output of querying metrics ingested via InfluxDB v2 line protocol from the /api/v1/export endpoint. The structure matches previous JSON export examples, including metric name, tags, value(s), and timestamps. Useful for verifying successful ingestion and retrieval.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/README.md#2025-04-22_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\\\"metric\\\":{\\\"__name__\\\":\\\"measurement_field1\\\",\\\"tag1\\\":\\\"value1\\\",\\\"tag2\\\":\\\"value2\\\"},\\\"values\\\":[123],\\\"timestamps\\\":[1695902762311]}\\n{\\\"metric\\\":{\\\"__name__\\\":\\\"measurement_field2\\\",\\\"tag1\\\":\\\"value1\\\",\\\"tag2\\\":\\\"value2\\\"},\\\"values\\\":[1.23],\\\"timestamps\\\":[1695902762311]}\n```\n\n----------------------------------------\n\nTITLE: Using tmax_over_time in VictoriaMetrics Syntax - plaintext\nDESCRIPTION: tmax_over_time returns the timestamp for the raw sample with the highest value over the given window for each series. Requires a valid series selector; outputs the relevant timestamp. Metric names are stripped by default.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_62\n\nLANGUAGE: plaintext\nCODE:\n```\n`tmax_over_time(series_selector[d])`\n```\n\n----------------------------------------\n\nTITLE: Traditional Drop Rule Configuration in YAML\nDESCRIPTION: Shows the equivalent traditional relabeling configuration that drops targets matching foo metrics with bar=baz. This is the older, less clear way of achieving the same result as the if-based rule.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/changelog/CHANGELOG_2022.md#2025-04-22_snippet_26\n\nLANGUAGE: yaml\nCODE:\n```\n- action: drop\n  source_labels: [__name__, bar]\n  regex: 'foo;baz'\n```\n\n----------------------------------------\n\nTITLE: Setting Label Values with label_set Function\nDESCRIPTION: The label_set function sets the specified label-value pairs to all time series returned by the query.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_129\n\nLANGUAGE: metricsql\nCODE:\n```\nlabel_set(q, \"label1\", \"value1\", ..., \"labelN\", \"valueN\")\n```\n\n----------------------------------------\n\nTITLE: Filtering by String Range - VictoriaMetrics LogsQL - LogSQL\nDESCRIPTION: Queries logs where the 'username' field contains string values lexicographically less than 'John'. Field values and comparison target are both quoted. Dependencies: VictoriaMetrics LogsQL. Input: logs with username field; Output: matching entries by string range.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_53\n\nLANGUAGE: logsql\nCODE:\n```\nusername:<\"John\"\n```\n\n----------------------------------------\n\nTITLE: Creating Restore Marks for Destination Cluster Pods (Cluster Restore Step 4) (Shell)\nDESCRIPTION: Fourth step in the cluster-to-cluster restore workflow: using `vmbackupmanager restore create` on each pod of the *destination* cluster to create a restore mark pointing to the corresponding backup from the *source* cluster storage. Example shows creating a mark for `vmstorage-destination-0` using the backup from `vmstorage-source-0`.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmbackupmanager.md#2025-04-22_snippet_29\n\nLANGUAGE: sh\nCODE:\n```\n$ /vmbackupmanager-prod restore create s3://source_cluster/vmstorage-source-0/daily/2023-04-07\n\n```\n\n----------------------------------------\n\nTITLE: Example Exported Metrics (NewRelic Events) - VictoriaMetrics - JSON\nDESCRIPTION: These JSON lines show the data structure returned by the export API after ingesting NewRelic Events data. Each line contains metric name, labels for entityKey and eventType, an array of values, and an array of Unix millisecond timestamps. This format enables further analysis or dashboard integration.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/README.md#2025-04-22_snippet_37\n\nLANGUAGE: json\nCODE:\n```\n{\"metric\":{\"__name__\":\"cpuStealPercent\",\"entityKey\":\"macbook-pro.local\",\"eventType\":\"SystemSample\"},\"values\":[0],\"timestamps\":[1697407970000]}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\"metric\":{\"__name__\":\"loadAverageFiveMinute\",\"entityKey\":\"macbook-pro.local\",\"eventType\":\"SystemSample\"},\"values\":[4.099609375],\"timestamps\":[1697407970000]}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\"metric\":{\"__name__\":\"cpuIOWaitPercent\",\"entityKey\":\"macbook-pro.local\",\"eventType\":\"SystemSample\"},\"values\":[0],\"timestamps\":[1697407970000]}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\"metric\":{\"__name__\":\"cpuSystemPercent\",\"entityKey\":\"macbook-pro.local\",\"eventType\":\"SystemSample\"},\"values\":[16.368672878359],\"timestamps\":[1697407970000]}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\"metric\":{\"__name__\":\"loadAverageOneMinute\",\"entityKey\":\"macbook-pro.local\",\"eventType\":\"SystemSample\"},\"values\":[5.42333984375],\"timestamps\":[1697407970000]}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\"metric\":{\"__name__\":\"cpuUserPercent\",\"entityKey\":\"macbook-pro.local\",\"eventType\":\"SystemSample\"},\"values\":[8.687987912389],\"timestamps\":[1697407970000]}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\"metric\":{\"__name__\":\"cpuIdlePercent\",\"entityKey\":\"macbook-pro.local\",\"eventType\":\"SystemSample\"},\"values\":[74.9433392092],\"timestamps\":[1697407970000]}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\"metric\":{\"__name__\":\"loadAverageFifteenMinute\",\"entityKey\":\"macbook-pro.local\",\"eventType\":\"SystemSample\"},\"values\":[3.58203125],\"timestamps\":[1697407970000]}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\"metric\":{\"__name__\":\"cpuPercent\",\"entityKey\":\"macbook-pro.local\",\"eventType\":\"SystemSample\"},\"values\":[25.056660790748],\"timestamps\":[1697407970000]}\n```\n\n----------------------------------------\n\nTITLE: Optimizing Global Logger with Atomic Value in Go\nDESCRIPTION: Changes the implementation of the global logger to use an atomic value (`atomic.Value`) instead of a mutex (`sync.Mutex`) for managing the logger instance. Similar to the error handler change, this aims to improve performance under high concurrency.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-22_snippet_24\n\nLANGUAGE: Go\nCODE:\n```\n// Global Logger (package internal logic, likely within go.opentelemetry.io/otel/internal/global)\n// Change: Uses atomic.Value instead of sync.Mutex\n```\n\n----------------------------------------\n\nTITLE: Implicit Subquery Formation Example (MetricsQL)\nDESCRIPTION: Illustrates a MetricsQL expression `delta(sum(m))` where nested rollup functions (`delta` applied to the result of `sum`) lead to an implicit subquery formation. VictoriaMetrics automatically converts this.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_151\n\nLANGUAGE: MetricsQL\nCODE:\n```\ndelta(sum(m))\n```\n\n----------------------------------------\n\nTITLE: Random Seeking with Custom Index in Go\nDESCRIPTION: Shows how to create an s2 reader and obtain a `ReadSeeker` capable of random seeking using a custom `index`. Because random seeking (`true`) is requested, the underlying input reader `r` must implement the `io.Seeker` interface. The code seeks to the target offset.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/klauspost/compress/s2/README.md#2025-04-22_snippet_18\n\nLANGUAGE: go\nCODE:\n```\n\tdec := s2.NewReader(r)\n\trs, err := dec.ReadSeeker(true, index)\n\trs.Seek(wantOffset, io.SeekStart)\t\n```\n\n----------------------------------------\n\nTITLE: Verifying OpenTelemetry Collector Pod Status - Shell\nDESCRIPTION: Use this command to confirm that the OTEL collector pod is running and deployed. Substitute pod names as appropriate for your deployment.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/guides/getting-started-with-opentelemetry/README.md#2025-04-22_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get pod\\n# NAME                                            READY   STATUS    RESTARTS   AGE\\n# otel-opentelemetry-collector-7467bbb559-2pq2n   1/1     Running   0          23m\n```\n\n----------------------------------------\n\nTITLE: Querying VictoriaLogs Field Values for Specific Tenant using curl (sh)\nDESCRIPTION: Demonstrates querying the `/select/logsql/field_values` endpoint for a specific VictoriaLogs tenant (AccountID 12, ProjectID 34) using HTTP headers (`-H 'AccountID: 12' -H 'ProjectID: 34'`). It retrieves field value statistics based on the query `_time:5m` for logs within the last 5 minutes.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/querying/README.md#2025-04-22_snippet_32\n\nLANGUAGE: sh\nCODE:\n```\ncurl http://localhost:9428/select/logsql/field_values -H 'AccountID: 12' -H 'ProjectID: 34' -d 'query=_time:5m'\n```\n\n----------------------------------------\n\nTITLE: Fetching Federated Metrics - Shell\nDESCRIPTION: Demonstrates fetching federated metrics from VictoriaMetrics using HTTP POST with 'match' parameters. This process suits both single-node and cluster setups, helping extend monitoring across distributed systems.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/url-examples.md#2025-04-22_snippet_16\n\nLANGUAGE: sh\nCODE:\n```\ncurl http://localhost:8428/federate -d 'match[]=vm_http_request_errors_total'\n```\n\nLANGUAGE: sh\nCODE:\n```\ncurl http://<vmselect>:8481/select/0/prometheus/federate -d 'match[]=vm_http_request_errors_total'\n```\n\n----------------------------------------\n\nTITLE: Marshalling Data with json-iterator in Go\nDESCRIPTION: This snippet replaces the standard encoding/json with the json-iterator/go library by importing it as jsoniter and configuring it for compatibility with the standard library. The json.Marshal function is used in the same way as the standard package, preserving API similarity for ease of migration. Dependency: github.com/json-iterator/go. Input is the data structure reference \\u0026data, and the output is the JSON-encoded byte slice or error. The ConfigCompatibleWithStandardLibrary ensures drop-in replacement without breaking changes.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/json-iterator/go/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nimport jsoniter \\\"github.com/json-iterator/go\\\"\\n\\nvar json = jsoniter.ConfigCompatibleWithStandardLibrary\\njson.Marshal(\\u0026data)\n```\n\n----------------------------------------\n\nTITLE: Running VictoriaMetrics Enterprise Docker Image with License File\nDESCRIPTION: Docker command to run the VictoriaMetrics Enterprise image with a license key stored in a file, mounted as a volume and specified via the -licenseFile flag.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/enterprise.md#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ndocker run --name=victoria-metrics -v /vm-license:/vm-license  victoriametrics/victoria-metrics:v1.115.0-enterprise -licenseFile=/path/to/vm-license\n```\n\n----------------------------------------\n\nTITLE: Model and Data Directory Setup Messages\nDESCRIPTION: Messages indicating storage configuration for models and data.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/anomaly-detection/components/monitoring.md#2025-04-22_snippet_8\n\nLANGUAGE: text\nCODE:\n```\nUsing ENV MODEL_DUMP_DIR=`{{model_dump_dir}}` to store anomaly detection models.\nENV MODEL_DUMP_DIR is not set. Models will be kept in RAM between consecutive `fit` calls.\nUsing ENV DATA_DUMP_DIR=`{{data_dump_dir}}` to store anomaly detection data.\nENV DATA_DUMP_DIR is not set. Models' training data will be stored in RAM.\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Pipeline via ClientOptions - azblob - Go\nDESCRIPTION: Shows the configuration of the HTTP pipeline at client construction time using the azcore.ClientOptions embedded within azblob.ClientOptions. This approach supersedes explicit pipeline construction seen in older SDKs. Dependencies: github.com/Azure/azure-sdk-for-go/sdk/azcore, github.com/Azure/azure-sdk-for-go/sdk/storage/azblob. Key parameters: account, credential, configuration options for the HTTP client. Input: account, credential, ClientOptions struct. Output: configured azblob client or error. Allows flexible HTTP configuration like retry policy, logging, etc.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/migrationguide.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n// new code\nclient, err := azblob.NewClient(account, cred, &azblob.ClientOptions{\n\tClientOptions: azcore.ClientOptions{\n\t\t// configure HTTP pipeline options here\n\t},\n})\n```\n\n----------------------------------------\n\nTITLE: Inserting Color into Noncolor Strings\nDESCRIPTION: Demonstrates how to integrate colorized strings into non-colorized strings using Sprint functions, allowing seamless integration of colored text within standard formatted outputs.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/fatih/color/README.md#2025-04-22_snippet_7\n\nLANGUAGE: Go\nCODE:\n```\n\"// Create SprintXxx functions to mix strings with other non-colorized strings:\\nyellow := color.New(color.FgYellow).SprintFunc()\\nred := color.New(color.FgRed).SprintFunc()\\nfmt.Printf(\\\"This is a %s and this is %s.\\\\n\\\", yellow(\\\"warning\\\"), red(\\\"error\\\"))\\n\\ninfo := color.New(color.FgWhite, color.BgGreen).SprintFunc()\\nfmt.Printf(\\\"This %s rocks!\\\\n\\\", info(\\\"package\\\"))\\n\\n// Use helper functions\\nfmt.Println(\\\"This\\\", color.RedString(\\\"warning\\\"), \\\"should be not neglected.\\\")\\nfmt.Printf(\\\"%v %v\\\\n\\\", color.GreenString(\\\"Info:\\\"), \\\"an important message.\\\")\\n\\n// Windows supported too! Just don\\'t forget to change the output to color.Output\\nfmt.Fprintf(color.Output, \\\"Windows support: %s\\\", color.GreenString(\\\"PASS\\\"))\\n\"\n```\n\n----------------------------------------\n\nTITLE: Writing Logs Directly to VictoriaLogs in Bash\nDESCRIPTION: Command to run vlogsgenerator and send generated logs directly to VictoriaLogs running on localhost.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlogsgenerator/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nbin/vlogsgenerator -addr=http://localhost:9428/insert/jsonline\n```\n\n----------------------------------------\n\nTITLE: App Mode Configuration\nDESCRIPTION: Example JSON and HTML configuration for VMUI app mode settings including custom colors and server URL.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/README.md#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"serverURL\": \"http://localhost:8428\",\n  \"useTenantID\": true,\n  \"headerStyles\": {\n    \"background\": \"#FFFFFF\",\n    \"color\": \"#538DE8\"\n  },\n  \"palette\": {\n    \"primary\": \"#538DE8\",\n    \"secondary\": \"#F76F8E\",\n    \"error\": \"#FD151B\",\n    \"warning\": \"#FFB30F\",\n    \"success\": \"#7BE622\",\n    \"info\": \"#0F5BFF\"\n  }\n}\n```\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"root\" data-params='{\"serverURL\":\"http://localhost:8428\",\"useTenantID\":true,\"headerStyles\":{\"background\":\"#FFFFFF\",\"color\":\"#538DE8\"},\"palette\":{\"primary\":\"#538DE8\",\"secondary\":\"#F76F8E\",\"error\":\"#FD151B\",\"warning\":\"#FFB30F\",\"success\":\"#7BE622\",\"info\":\"#0F5BFF\"}}'></div>\n```\n\n----------------------------------------\n\nTITLE: Advanced Usage of fasttemplate with Custom Tag Function in Go\nDESCRIPTION: Illustrates advanced usage of `fasttemplate` using `NewTemplate` for potentially error-prone template parsing with custom delimiters (`[`, `]`). It utilizes the `ExecuteFuncString` method, which accepts a callback function. This function receives an `io.Writer` and the tag name, allowing for dynamic value generation or custom logic (like handling unknown tags) for each placeholder during template execution. Requires `fasttemplate`, `io`, `log`, and `fmt` packages.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/valyala/fasttemplate/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n\ttemplate := \"Hello, [user]! You won [prize]!!! [foobar]\"\n\tt, err := fasttemplate.NewTemplate(template, \"[\", \"]\")\n\tif err != nil {\n\t\tlog.Fatalf(\"unexpected error when parsing template: %s\", err)\n\t}\n\ts := t.ExecuteFuncString(func(w io.Writer, tag string) (int, error) {\n\t\tswitch tag {\n\t\tcase \"user\":\n\t\t\treturn w.Write([]byte(\"John\"))\n\t\tcase \"prize\":\n\t\t\treturn w.Write([]byte(\"$100500\"))\n\t\tdefault:\n\t\t\treturn w.Write([]byte(fmt.Sprintf(\"[unknown tag %q]\", tag)))\n\t\t}\n\t})\n\tfmt.Printf(\"%s\", s)\n\n\t// Output:\n\t// Hello, John! You won $100500!!! [unknown tag \"foobar\"]\n```\n\n----------------------------------------\n\nTITLE: Starting Docker Compose Environment for Filebeat and VictoriaLogs Integration\nDESCRIPTION: This command starts the Docker Compose environment for the Filebeat and VictoriaLogs integration. It should be run from the directory of the chosen protocol (syslog or elasticsearch).\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/deployment/docker/victorialogs/filebeat/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Tagging vmanomaly Docker Image Locally - Shell\nDESCRIPTION: This command tags an existing local vmanomaly Docker image with a custom name ('vmanomaly') for convenient reference. Requires Docker to be installed and the specified image to already be pulled. Inputs are the current image and desired tag; output is an updated local Docker image tag. No external dependencies besides Docker are needed.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/anomaly-detection/QuickStart.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ndocker image tag victoriametrics/vmanomaly:v1.20.1 vmanomaly\n```\n\n----------------------------------------\n\nTITLE: Exposing Grafana Service Locally\nDESCRIPTION: These commands find the Grafana pod and set up port forwarding to make Grafana accessible on localhost:3000. It first exports the pod name to a variable, then uses kubectl port-forward to expose the service.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/guides/k8s-monitoring-via-vm-single/README.md#2025-04-22_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nexport POD_NAME=$(kubectl get pods --namespace default -l \"app.kubernetes.io/name=grafana,app.kubernetes.io/instance=my-grafana\" -o jsonpath=\"{.items[0].metadata.name}\")\n\nkubectl --namespace default port-forward $POD_NAME 3000\n```\n\n----------------------------------------\n\nTITLE: Running VictoriaMetrics Enterprise Docker Image with License Key\nDESCRIPTION: Docker command to run the VictoriaMetrics Enterprise image with a license key specified via command-line flag.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/enterprise.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ndocker run --name=victoria-metrics victoriametrics/victoria-metrics:v1.115.0-enterprise -license=BASE64_ENCODED_LICENSE_KEY\n```\n\n----------------------------------------\n\nTITLE: Filtering Metrics using Graphite-compatible Syntax in MetricsQL\nDESCRIPTION: Demonstrates how to use Graphite-compatible filters within MetricsQL series selectors using the `{__graphite__=...}` syntax. This allows selecting metrics based on Graphite's wildcard patterns.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_0\n\nLANGUAGE: metricsql\nCODE:\n```\n{__graphite__=\"foo.*.bar\"}\n```\n\n----------------------------------------\n\nTITLE: Defining xxHash Digest Methods in Go\nDESCRIPTION: Shows the key methods of the `Digest` type, which implements the `hash.Hash64` interface in Go. The `Write` and `WriteString` methods allow for feeding data (byte slices or strings) incrementally into the hash state, while `Sum64` retrieves the final 64-bit hash value.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/cespare/xxhash/v2/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc (*Digest) Write([]byte) (int, error)\nfunc (*Digest) WriteString(string) (int, error)\nfunc (*Digest) Sum64() uint64\n```\n\n----------------------------------------\n\nTITLE: Fixing vmselect Handling of /select/multitenant Requests\nDESCRIPTION: Details a bugfix in vmselect to correctly reject requests using the '/select/multitenant' path prefix, which is not supported. Previously, such requests caused a panic (issue #4910).\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/changelog/CHANGELOG_2023.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n/select/multitenant\n```\n\n----------------------------------------\n\nTITLE: VictoriaMetrics Tenant List Endpoint\nDESCRIPTION: The endpoint URL for retrieving the list of registered tenants in the VictoriaMetrics cluster.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/Cluster-VictoriaMetrics.md#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nhttp://<vmselect>:8481/admin/tenants\n```\n\n----------------------------------------\n\nTITLE: Importing xsync Library in Go\nDESCRIPTION: The snippet shows how to import the xsync library for concurrent data structures, specifying version 3 which is the latest major version. Users are advised to upgrade to v3 due to discontinued support for earlier versions.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/puzpuzpuz/xsync/v3/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nimport (\n\t\"github.com/puzpuzpuz/xsync/v3\"\n)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Match Pattern in Doublestar v4\nDESCRIPTION: Example showing how the Match function works with directory patterns in Doublestar v4, illustrating that path/to/a/** now matches path/to/a.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/bmatcuk/doublestar/v4/UPGRADING.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nMatch(\"path/to/a/**\", \"path/to/a\")\n```\n\n----------------------------------------\n\nTITLE: YAML Configuration Example - Second File\nDESCRIPTION: Example YAML configuration showing string value that overrides previous array\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/knadh/koanf/v2/README.md#2025-04-22_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nkey: 'string'\n```\n\n----------------------------------------\n\nTITLE: Verifying Azure CLI Account via az - Azure CLI\nDESCRIPTION: This Azure CLI command checks the currently authenticated Azure account. It is run in a shell or command prompt with Azure CLI (az) installed. The output provides JSON-formatted account information (e.g., user, tenant, subscription), verifying the login state. No additional dependencies required besides az CLI and user authentication.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/Azure/azure-sdk-for-go/sdk/azidentity/TROUBLESHOOTING.md#2025-04-22_snippet_4\n\nLANGUAGE: azurecli\nCODE:\n```\naz account show\n```\n\n----------------------------------------\n\nTITLE: Configuring Histogram Bucket Calculation in VictoriaMetrics Stream Aggregation YAML\nDESCRIPTION: Defines a VictoriaMetrics stream aggregation rule to create histogram buckets for metrics matching `request_duration_seconds` or `response_size_bytes` every 60 seconds. The `match` field selects input metrics, `interval` sets the aggregation period, and `outputs` specifies the `histogram_bucket` function to generate VictoriaMetrics-specific histogram buckets. Requires VictoriaMetrics or vmagent with stream aggregation enabled.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/stream-aggregation.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n- match:\n  - request_duration_seconds\n  - response_size_bytes\n  interval: 60s\n  outputs: [histogram_bucket]\n```\n\n----------------------------------------\n\nTITLE: Using Goleak in TestMain for Package-wide Leak Detection\nDESCRIPTION: Example of implementing TestMain to run goleak checks after all tests in a package have completed.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/go.uber.org/goleak/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc TestMain(m *testing.M) {\n\tgoleak.VerifyTestMain(m)\n}\n```\n\n----------------------------------------\n\nTITLE: Running vmctl help command\nDESCRIPTION: This command displays the help information for vmctl, showing the available commands and basic usage instructions.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmctl.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ ./vmctl --help\nNAME:\n   vmctl - VictoriaMetrics command-line tool\n\nUSAGE:\n   vmctl [global options] command [command options] [arguments...]\n\nCOMMANDS:\n   opentsdb    Migrate timeseries from OpenTSDB\n   influx      Migrate timeseries from InfluxDB\n   prometheus  Migrate timeseries from Prometheus\n   vm-native   Migrate time series between VictoriaMetrics installations via native binary format\n   remote-read Migrate timeseries by Prometheus remote read protocol\n   verify-block  Verifies correctness of data blocks exported via VictoriaMetrics Native format. See https://docs.victoriametrics.com/#how-to-export-data-in-native-format\n```\n\n----------------------------------------\n\nTITLE: Benchmark Results for RBMutex vs. sync.RWMutex\nDESCRIPTION: This plaintext snippet features a comparison of RBMutex and sync.RWMutex benchmarking results. It examines the efficiency of both mutex implementations by measuring time taken per writer lock with some work done in critical sections.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/puzpuzpuz/xsync/v3/BENCHMARKS.md#2025-04-22_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nThe writer locks on each 100,000 iteration with some work in the critical section for both readers and the writer:\\nRBMutexWorkWrite100000                           146ns ± 0%\\nRBMutexWorkWrite100000-2                        73.3ns ± 0%\\nRBMutexWorkWrite100000-4                        36.7ns ± 0%\\nRBMutexWorkWrite100000-8                        18.6ns ± 0%\\nRBMutexWorkWrite100000-16                       9.83ns ± 3%\\nRBMutexWorkWrite100000-32                       5.53ns ± 0%\\nRBMutexWorkWrite100000-64                       4.04ns ± 3%\\nRWMutexWorkWrite100000                           121ns ± 0%\\nRWMutexWorkWrite100000-2                         128ns ± 1%\\nRWMutexWorkWrite100000-4                         124ns ± 2%\\nRWMutexWorkWrite100000-8                         101ns ± 1%\\nRWMutexWorkWrite100000-16                       92.9ns ± 1%\\nRWMutexWorkWrite100000-32                       89.9ns ± 1%\\nRWMutexWorkWrite100000-64                       88.4ns ± 1%\\n\n```\n\n----------------------------------------\n\nTITLE: Installing go-fuzz for Fuzz Testing\nDESCRIPTION: Bash command to install the `go-fuzz` tool and its build utility using `go get`. This tool is used for fuzz testing Go programs, including the `fastjson` library.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/valyala/fastjson/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngo get -u github.com/dvyukov/go-fuzz/go-fuzz github.com/dvyukov/go-fuzz/go-fuzz-build\n```\n\n----------------------------------------\n\nTITLE: Version Release Headers\nDESCRIPTION: Release date and LTS version notice text\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/changelog/CHANGELOG_2023.md#2025-04-22_snippet_18\n\nLANGUAGE: markdown\nCODE:\n```\nReleased at 2023-05-18\n\n**v1.87.x is a line of [LTS releases](https://docs.victoriametrics.com/lts-releases/). It contains important up-to-date bugfixes.\nThe v1.87.x line will be supported for at least 12 months since [v1.87.0](https://docs.victoriametrics.com/changelog/#v1870) release**\n```\n\n----------------------------------------\n\nTITLE: Setting Custom S3 Endpoint for AWS Gov Region (Shell)\nDESCRIPTION: This shell snippet demonstrates how to specify an AWS S3 endpoint suitable for AWS GovCloud regions using the -customS3Endpoint flag. Required for compatibility with regionally restricted endpoints in US government accounts. Set this flag in the vmbackup command for compliance and correct connectivity. Input: command-line argument; output: backup targets appropriate S3 endpoint.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmbackup.md#2025-04-22_snippet_14\n\nLANGUAGE: sh\nCODE:\n```\n-customS3Endpoint=https://s3-fips.us-gov-west-1.amazonaws.com\\n\n```\n\n----------------------------------------\n\nTITLE: Converting Label Values to Uppercase with label_uppercase Function\nDESCRIPTION: The label_uppercase function converts values for the specified labels to uppercase in all time series returned by the query.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_131\n\nLANGUAGE: metricsql\nCODE:\n```\nlabel_uppercase(q, \"label1\", ..., \"labelN\")\n```\n\n----------------------------------------\n\nTITLE: Verifying No Goroutine Leaks in Individual Go Tests\nDESCRIPTION: Example of using goleak.VerifyNone() to check for unexpected goroutines at the end of a Go test function.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/go.uber.org/goleak/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc TestA(t *testing.T) {\n\tdefer goleak.VerifyNone(t)\n\n\t// test logic here.\n}\n```\n\n----------------------------------------\n\nTITLE: Querying VictoriaMetrics Metrics Using cURL\nDESCRIPTION: This command sends a query to VictoriaMetrics' API to retrieve the count of 'vmselect' pods over the last 10 minutes, with a 1-minute step.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/guides/k8s-ha-monitoring-via-vm-cluster/README.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ncurl -sg 'http://127.0.0.1:8481/select/0/prometheus/api/v1/query_range?query=count(up{kubernetes_pod_name=~\".*vmselect.*\"})&start=-10m&step=1m' | jq\n```\n\n----------------------------------------\n\nTITLE: Fixing vmagent User-Agent Header Consistency\nDESCRIPTION: Describes a bugfix in vmagent ensuring the 'User-Agent' header is consistently set to 'vm_promscrape' during scraping, regardless of whether stream parsing mode is enabled or disabled. This resolves inconsistencies mentioned in issue #4884.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/changelog/CHANGELOG_2023.md#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nUser-Agent: vm_promscrape\n```\n\n----------------------------------------\n\nTITLE: Routing Requests by Path using vmauth (YAML)\nDESCRIPTION: Defines routing rules for `vmauth` based on the request path for an `unauthorized_user`. It uses `src_paths` with regular expressions to match incoming paths. Requests matching `/app1/.*` are sent to `http://app1-backend/`, those matching `/app2/.*` go to `http://app2-backend/`, and any other requests are directed to `default_url`.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmauth.md#2025-04-22_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nunauthorized_user:\n  url_map:\n  - src_paths:\n    - \"/app1/.*\"\n    url_prefix: \"http://app1-backend/\"\n  - src_paths:\n    - \"/app2/.*\"\n    url_prefix: \"http://app2-backend/\"\n  default_url: http://some-backend/404-page.html\n```\n\n----------------------------------------\n\nTITLE: Decoding URL-encoded Resource Attributes in Go\nDESCRIPTION: The OTEL_RESOURCE_ATTRIBUTES environment variable values are now properly URL-decoded when parsed.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-22_snippet_35\n\nLANGUAGE: Go\nCODE:\n```\n// Internal SDK code\ndecodedValue, err := url.QueryUnescape(value)\nif err != nil {\n    // Handle error\n}\n// Use decodedValue\n```\n\n----------------------------------------\n\nTITLE: Finding Offsets Using a Loaded S2 Index in Go\nDESCRIPTION: Shows how to use a loaded `s2.Index` to find the corresponding compressed stream offset (`compressedOffset`) and the starting uncompressed offset (`uncompressedOffset`) for a desired target uncompressed offset (`wantOffset`). This is crucial for manually forwarding streams.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/klauspost/compress/s2/README.md#2025-04-22_snippet_20\n\nLANGUAGE: go\nCODE:\n```\n\tcompressedOffset, uncompressedOffset, err := index.Find(wantOffset)\n```\n\n----------------------------------------\n\nTITLE: License Expiration Alert Rules\nDESCRIPTION: VictoriaMetrics alert rules for monitoring license expiration using vmalert.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/enterprise.md#2025-04-22_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\ngroups:\n  - name: vm-license\n    # note the `job` label and update accordingly to your setup\n    rules:\n      - alert: LicenseExpiresInLessThan30Days\n        expr: vm_license_expires_in_seconds < 30 * 24 * 3600\n        labels:\n          severity: warning\n        annotations:\n          summary: \"{{ $labels.job }} instance {{ $labels.instance }} license expires in less than 30 days\"\n          description: \"{{ $labels.instance }} of job {{ $labels.job }} license expires in {{ $value | humanizeDuration }}. \n            Please make sure to update the license before it expires.\"\n\n      - alert: LicenseExpiresInLessThan7Days\n        expr: vm_license_expires_in_seconds < 7 * 24 * 3600\n        labels:\n          severity: critical\n        annotations:\n          summary: \"{{ $labels.job }} instance {{ $labels.instance }} license expires in less than 7 days\"\n          description: \"{{ $labels.instance }} of job {{ $labels.job }} license expires in {{ $value | humanizeDuration }}. \n            Please make sure to update the license before it expires.\"\n```\n\n----------------------------------------\n\nTITLE: Acquiring a Token Manually with autorest/adal in Go\nDESCRIPTION: This Go code demonstrates how to explicitly acquire or refresh an authentication token using `autorest/adal`. After obtaining a `ServicePrincipalToken` (e.g., via `NewServicePrincipalTokenWithSecret`), the `Refresh()` method can be called to ensure a valid token is available in `spt.Token`.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/Azure/azure-sdk-for-go/sdk/azidentity/MIGRATION.md#2025-04-22_snippet_12\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/Azure/go-autorest/autorest/adal\"\n\noauthCfg, err := adal.NewOAuthConfig(\"https://login.microsoftonline.com\", tenantID)\nhandle(err)\n\nspt, err := adal.NewServicePrincipalTokenWithSecret(\n    *oauthCfg, clientID, \"https://vault.azure.net\", &adal.ServicePrincipalTokenSecret{ClientSecret: secret},\n)\n\nerr = spt.Refresh()\nif err == nil {\n    token := spt.Token\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Protobuf Message Schemas in proto3 - Proto\nDESCRIPTION: This snippet defines protobuf message schemas for a timeseries and its samples using proto3 syntax. 'timeseries' includes a string 'name' and a repeated field of type 'sample', each sample containing a double 'value' and int64 'timestamp'. This schema serves as the foundation for corresponding Go struct definitions for serialization/deserialization. Requires a proto3-compatible parser if used directly.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/VictoriaMetrics/easyproto/README.md#2025-04-22_snippet_0\n\nLANGUAGE: proto\nCODE:\n```\nmessage timeseries {\n  string name = 1;\n  repeated sample samples = 2;\n}\n\nmessage sample {\n  double value = 1;\n  int64 timestamp = 2;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Get Restore Mark API Response (JSON)\nDESCRIPTION: Example JSON response from the `GET /api/v1/restore` endpoint. It returns the name of the backup currently marked for restore, if such a mark exists.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmbackupmanager.md#2025-04-22_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\"backup\":\"daily/2022-10-06\"}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Grafana Dashboard Provider\nDESCRIPTION: YAML configuration for Grafana that defines a dashboard provider to automatically load dashboards from the file system. This enables persistent storage of dashboards across container restarts.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/anomaly-detection/guides/guide-vmanomaly-vmalert/README.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: 1\n\nproviders:\n- name: Prometheus\n  orgId: 1\n  folder: ''\n  type: file\n  options:\n    path: /var/lib/grafana/dashboards\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Frontmatter for VictoriaLogs Documentation\nDESCRIPTION: YAML frontmatter that configures the documentation page for VictoriaLogs. It sets the title, weight for ordering, menu structure with identifier and page reference, and defines URL aliases for the documentation.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/_index.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: VictoriaLogs\nweight: 0\nmenu:\n  docs:\n    weight: 15\n    identifier: victorialogs\n    pageRef: /victorialogs/\naliases:\n- /victorialogs/\n- /victorialogs/index.html\n---\n```\n\n----------------------------------------\n\nTITLE: Monitoring Configuration Updates with Resolver in Terminal\nDESCRIPTION: A terminal-based flow chart depicting the process of using Resolver to watch for updates in configuration by employing the Provider and invoking the onChange function.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/go.opentelemetry.io/collector/confmap/README.md#2025-04-22_snippet_3\n\nLANGUAGE: terminal\nCODE:\n```\n         Resolver              Provider\n            │                     │\n   Watch    │                     │\n───────────►│                     │\n            │                     │\n            .                     .\n            .                     .\n            .                     .\n            │      onChange       │\n            │◄────────────────────┤\n◄───────────┤                     │\n            |                     |\n  Resolve   │                     │\n───────────►│                     │\n            │                     │\n            │      Retrieve       │\n            ├────────────────────►│\n            │        Conf         │\n            │◄────────────────────┤\n◄───────────┤                     │\n```\n\n----------------------------------------\n\nTITLE: Exclusion Filter with Minus Operator in LogsQL\nDESCRIPTION: A LogsQL query equivalent to the previous example but using the minus operator instead of NOT for excluding 'buggy_app' logs.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_10\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m error -buggy_app\n```\n\n----------------------------------------\n\nTITLE: Example Node Exporter CPU Metrics Output (Text)\nDESCRIPTION: Provides a sample output from Node Exporter showing the `node_cpu_seconds_total` counter metric for different CPU modes (idle, iowait, system, user, etc.) and cores. This raw data represents the total seconds spent in each mode and serves as input for calculating CPU usage rates.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/anomaly-detection/guides/guide-vmanomaly-vmalert/README.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n```text\n# HELP node_cpu_seconds_total Seconds the CPUs spent in each mode.\n# TYPE node_cpu_seconds_total counter\nnode_cpu_seconds_total{cpu=\"0\",mode=\"idle\"} 94965.14\nnode_cpu_seconds_total{cpu=\"0\",mode=\"iowait\"} 51.25\nnode_cpu_seconds_total{cpu=\"0\",mode=\"irq\"} 0\nnode_cpu_seconds_total{cpu=\"0\",mode=\"nice\"} 0\nnode_cpu_seconds_total{cpu=\"0\",mode=\"softirq\"} 1682.18\nnode_cpu_seconds_total{cpu=\"0\",mode=\"steal\"} 0\nnode_cpu_seconds_total{cpu=\"0\",mode=\"system\"} 995.37\nnode_cpu_seconds_total{cpu=\"0\",mode=\"user\"} 12378.05\nnode_cpu_seconds_total{cpu=\"1\",mode=\"idle\"} 94386.53\nnode_cpu_seconds_total{cpu=\"1\",mode=\"iowait\"} 51.22\n...\n```\n```\n\n----------------------------------------\n\nTITLE: Running go-fuzz on fastjson\nDESCRIPTION: Bash commands to set up a working directory, optionally copy a corpus, build the `fastjson` fuzz target using `go-fuzz-build`, and then run `go-fuzz` to perform fuzz testing on the library.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/valyala/fastjson/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p workdir/corpus\ncp $GOPATH/src/github.com/dvyukov/go-fuzz-corpus/json/corpus/* workdir/corpus\ngo-fuzz-build github.com/valyala/fastjson\ngo-fuzz -bin=fastjson-fuzz.zip -workdir=workdir\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes Secret for License\nDESCRIPTION: Kubernetes secret definition containing the VictoriaMetrics Enterprise license key.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/enterprise.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Secret\nmetadata:\n  name: vm-license\ntype: Opaque\ndata:\n  license: {BASE64_ENCODED_LICENSE_KEY}\n```\n\n----------------------------------------\n\nTITLE: Modifying 'job' Label using YAML\nDESCRIPTION: Overrides the default 'job' label value from 'k8s' to 'foo' for discovered Kubernetes pod targets. Prerequisites include Kubernetes and familiarity with config structures in VictoriaMetrics.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/relabeling.md#2025-04-22_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\n- job_name: k8s\n  kubernetes_sd_configs:\n  - role: pod\n  relabel_configs:\n  - target_label: job\n    replacement: foo\n```\n\n----------------------------------------\n\nTITLE: Extracting Month from Timestamps - PromQL - PromQL\nDESCRIPTION: month(q) yields the month (1-12) for each value in input q, which must be unix timestamp-based. Strip metric names by default. Supported by PromQL. Requires only that input is a compatible timestamp series.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_116\n\nLANGUAGE: PromQL\nCODE:\n```\n`month(q)`\n```\n\n----------------------------------------\n\nTITLE: Port-Forwarding to VMAgent Service (sh)\nDESCRIPTION: This command uses `kubectl port-forward` to forward traffic from local port 8429 to port 8429 on the VMAgent service (`svc/vmagent-example-vmagent`). This allows accessing the VMAgent's web interface (e.g., for checking scrape targets) from the local machine via `http://127.0.0.1:8429`.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/guides/getting-started-with-vm-operator/README.md#2025-04-22_snippet_16\n\nLANGUAGE: sh\nCODE:\n```\nkubectl port-forward svc/vmagent-example-vmagent 8429:8429\n```\n\n----------------------------------------\n\nTITLE: Installing VictoriaMetrics Kubernetes Stack via Helm - Shell\nDESCRIPTION: This shell command installs the VictoriaMetrics monitoring stack in the specified namespace using the customized values YAML file and Helm. Dependencies include the Helm CLI, prepared repositories, and an existing namespace. Input parameters are the namespace and values file; output is the deployment of the Helm release vm/victoria-metrics-k8s-stack.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics-cloud/how-to-monitor-k8s.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nhelm --namespace monitoring install vm vm/victoria-metrics-k8s-stack -f dbaas.yaml -n monitoring\n\n```\n\n----------------------------------------\n\nTITLE: Running Pre-release Step for OpenTelemetry Go\nDESCRIPTION: This snippet shows how to execute the pre-release step for OpenTelemetry Go. It creates a new branch containing all release changes for a specific module set.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/go.opentelemetry.io/otel/RELEASING.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nmake prerelease MODSET=<module set>\n```\n\n----------------------------------------\n\nTITLE: Listing VictoriaMetrics Select Service in Kubernetes\nDESCRIPTION: This command displays the services related to VictoriaMetrics' select component, showing the ClusterIP and port information.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/guides/k8s-ha-monitoring-via-vm-cluster/README.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get svc | grep vmselect\n```\n\n----------------------------------------\n\nTITLE: Basic Environment Variable Setup for Linux\nDESCRIPTION: Example of storing Telegraf configuration variables in /etc/default/telegraf on Linux systems. Shows how to define connection URLs, credentials and tokens.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/data-ingestion/Telegraf.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nvictoriametrics_url=\"https://victoriametrics_url\"\nvictoriametrics_user=\"telegraf\"\nvictoriametrics_password=\"password\"\nvictoriametrics_token=\"my_token\"\n```\n\n----------------------------------------\n\nTITLE: Working Around Import Issues with Go Modules\nDESCRIPTION: A shell script showing how to use Go module's replace feature to alias golang.org packages when facing access issues. This approach helps developers in regions where google.golang.org might be blocked by creating local references to GitHub-hosted repositories.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/google.golang.org/grpc/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngo mod edit -replace=google.golang.org/grpc=github.com/grpc/grpc-go@latest\ngo mod tidy\ngo mod vendor\ngo build -mod=vendor\n```\n\n----------------------------------------\n\nTITLE: Using first_over_time Rollup Function in VictoriaMetrics\nDESCRIPTION: This function returns the first raw sample value on the given lookbehind window for each time series returned from the series selector.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_21\n\nLANGUAGE: markdown\nCODE:\n```\nfirst_over_time(series_selector[d])\n```\n\n----------------------------------------\n\nTITLE: Release Update - Smithy-Go v1.22.2\nDESCRIPTION: SDK module updates with HTTP metrics data race fixes and deprecated ioutil package replacements.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/aws/smithy-go/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ngithub.com/aws/smithy-go@v1.22.2\n```\n\n----------------------------------------\n\nTITLE: Installing Uber's atomic package using Go modules\nDESCRIPTION: Command to install the atomic package using Go's package manager. The @v1 suffix specifies version 1 of the package.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/go.uber.org/atomic/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ go get -u go.uber.org/atomic@v1\n```\n\n----------------------------------------\n\nTITLE: Using Underscore Delimiters in Numeric Literals in MetricsQL\nDESCRIPTION: Shows an example of a numeric literal using underscores (`_`) as delimiters for improved readability in MetricsQL queries. This feature allows writing large numbers more clearly.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_3\n\nLANGUAGE: metricsql\nCODE:\n```\n1_234_567_890\n```\n\n----------------------------------------\n\nTITLE: Configuring URL in vmauth Command-Line Flag\nDESCRIPTION: Example of specifying HTTP and HTTPS URLs in the -auth.config command-line flag for vmauth.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/changelog/CHANGELOG_2021.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n-auth.config http://example.com/config.yml\n```\n\nLANGUAGE: bash\nCODE:\n```\n-auth.config https://example.com/config.yml\n```\n\n----------------------------------------\n\nTITLE: Calculating Linear Regression Over Range using range_linear_regression() in MetricsQL\nDESCRIPTION: The `range_linear_regression(q)` transform function performs a simple linear regression analysis over the selected time range for each time series returned by `q`. This is useful for trend analysis, capacity planning, and forecasting.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_99\n\nLANGUAGE: MetricsQL\nCODE:\n```\nrange_linear_regression(q)\n```\n\n----------------------------------------\n\nTITLE: Querying Ingested Logs in VictoriaLogs\nDESCRIPTION: Demonstrates how to query ingested logs from VictoriaLogs using the logs querying API. This example retrieves logs from the last 5 minutes using a time filter.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/data-ingestion/syslog.md#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncurl http://localhost:9428/select/logsql/query -d 'query=_time:5m'\n```\n\n----------------------------------------\n\nTITLE: Injecting AWS Credentials from Secret to Pod Environment (YAML)\nDESCRIPTION: This YAML snippet shows how to inject AWS S3 credentials stored in a Kubernetes Secret into a Pod's environment variables for authentication. Each env section references the corresponding secret key and name. Dependencies: an existing Secret named vmbackup-credentials with the required keys. Inputs: pod or deployment YAML; outputs: pods with AWS environment variables set.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmbackup.md#2025-04-22_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\n...\\nenv:\\n- name: AWS_ACCESS_KEY_ID\\n  valueFrom:\\n    secretKeyRef:\\n      key: access_key\\n      name: vmbackup-credentials\\n- name: AWS_SECRET_ACCESS_KEY\\n  valueFrom:\\n    secretKeyRef:\\n      key: secret_key\\n      name: vmbackup-credentials\\n...\\n\n```\n\n----------------------------------------\n\nTITLE: Replay Mode Output Example\nDESCRIPTION: Example output showing the progress and results of replay mode execution, including group processing details and import statistics.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmalert.md#2025-04-22_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nReplay mode:\nfrom:   2021-05-11 07:21:43 +0000 UTC   # set by -replay.timeFrom\nto:     2021-05-29 18:40:43 +0000 UTC   # set by -replay.timeTo\nmax data points per request: 1000       # set by -replay.maxDatapointsPerQuery\n\nGroup \"ReplayGroup\"\ninterval:       1m0s\nrequests to make:       27\nmax range per request:  16h40m0s\n> Rule \"type:vm_cache_entries:rate5m\" (ID: 1792509946081842725)\n27 / 27 [----------------------------------------------------------------------------------------------------] 100.00% 78 p/s\n> Rule \"go_cgo_calls_count:rate5m\" (ID: 17958425467471411582)\n27 / 27 [-----------------------------------------------------------------------------------------------------] 100.00% ? p/s\n\nGroup \"vmsingleReplay\"\ninterval:       30s\nrequests to make:       54\nmax range per request:  8h20m0s\n> Rule \"RequestErrorsToAPI\" (ID: 17645863024999990222)\n54 / 54 [-----------------------------------------------------------------------------------------------------] 100.00% ? p/s\n> Rule \"TooManyLogs\" (ID: 9042195394653477652)\n54 / 54 [-----------------------------------------------------------------------------------------------------] 100.00% ? p/s\n2021-06-07T09:59:12.098Z        info    app/vmalert/replay.go:68        replay finished! Imported 511734 samples\n```\n\n----------------------------------------\n\nTITLE: Defining count_ne_over_time in MetricsQL - Markdown\nDESCRIPTION: Documents the count_ne_over_time rollup function in MetricsQL, explaining its use for counting raw samples not equal to a specified value within a lookbehind window. Describes required parameters, the effect of modifiers, usage context (typically gauges), and stripped metric names by default. No code dependencies, intended for query writers using VictoriaMetrics.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/MetricsQL.md#2025-04-22_snippet_13\n\nLANGUAGE: Markdown\nCODE:\n```\n#### count_ne_over_time\n\n`count_ne_over_time(series_selector[d], ne)` is a [rollup function](#rollup-functions), which calculates the number of [raw samples](https://docs.victoriametrics.com/keyconcepts/#raw-samples)\non the given lookbehind window `d`, which aren't equal to `ne`. It is calculated independently per each time series returned\nfrom the given [series_selector](https://docs.victoriametrics.com/keyconcepts/#filtering).\n\nMetric names are stripped from the resulting rollups. Add [keep_metric_names](#keep_metric_names) modifier in order to keep metric names.\n\nThis function is usually applied to [gauges](https://docs.victoriametrics.com/keyconcepts/#gauge).\n\nSee also [count_over_time](#count_over_time) and [count_eq_over_time](#count_eq_over_time).\n\n```\n\n----------------------------------------\n\nTITLE: Using sum2_over_time in VictoriaMetrics Syntax - plaintext\nDESCRIPTION: sum2_over_time computes the sum of squares of all raw sample values in the provided lookbehind window, typically for gauge metrics. Expects a proper series selector. Returns the sum of squares, omitting metric names unless kept by a modifier.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_56\n\nLANGUAGE: plaintext\nCODE:\n```\n`sum2_over_time(series_selector[d])`\n```\n\n----------------------------------------\n\nTITLE: Verifying PBS Metrics Query\nDESCRIPTION: PromQL query to verify that Proxmox Backup Server metrics are being successfully sent to VictoriaMetrics. This query returns CPU idle statistics for the host system.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/data-ingestion/Proxmox.md#2025-04-22_snippet_1\n\nLANGUAGE: promql\nCODE:\n```\ncpustat_idle{object=\"host\"}\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter Configuration for VictoriaMetrics 2023 Changelog\nDESCRIPTION: Defines the navigation structure, weights, and aliases for the 2023 changelog documentation page. Includes menu configuration and search weights for proper documentation organization.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/changelog/CHANGELOG_2023.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nweight: 4\ntitle: Year 2023\nsearch:\n  weight: 0.1\nmenu:\n  docs:\n    identifier: vm-changelog-2023\n    parent: vm-changelog\n    weight: 4\naliases:\n- /CHANGELOG_2023.html\n- /changelog_2023\n- /changelog/changelog_2023/index.html\n- /changelog/changelog_2023/\n```\n\n----------------------------------------\n\nTITLE: Running vmalert Docker Container in Cluster Mode (Shell/Bash)\nDESCRIPTION: This Docker command launches the vmalert container for use with a clustered VictoriaMetrics Cloud setup. It mounts local rule files, exposes the web UI, and sets distances between read/write endpoints and authentication using shell variables. Requires Docker, pre-set environment variables, and an accessible Alertmanager instance.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics-cloud/alerting-vmalert-victoria-metrics-cloud.md#2025-04-22_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nexport TOKEN=76bc5470-****-****-****-************\nexport MANAGED_VM_READ_URL=https://gw-c15-1a.cloud.victoriametrics.com/select/0/prometheus/\nexport MANAGED_VM_WRITE_URL=https://gw-c15-1a.cloud.victoriametrics.com/insert/0/prometheus/\nexport ALERTMANAGER_URL=http://alertmanager:9093 \ndocker run -it -p 8080:8080 -v $(pwd)/alerts.yml:/etc/alerts/alerts.yml victoriametrics/vmalert:v1.87.1 -datasource.url=$MANAGED_VM_READ_URL -datasource.bearerToken=$TOKEN -remoteRead.url=$MANAGED_VM_READ_URL -remoteRead.bearerToken=$TOKEN  -remoteWrite.url=$MANAGED_VM_WRITE_URL -remoteWrite.bearerToken=$TOKEN  -notifier.url=$ALERTMANAGER_URL -rule=\"/etc/alerts/*.yml\"\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Configuration for OTEL Span Limits\nDESCRIPTION: Lists environment variables that can be used to configure span limits in OpenTelemetry, including attribute counts, event counts, link counts, and attribute value length limits.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-22_snippet_40\n\nLANGUAGE: markdown\nCODE:\n```\n- `OTEL_SPAN_ATTRIBUTE_VALUE_LENGTH_LIMIT`\n- `OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT`\n- `OTEL_SPAN_EVENT_COUNT_LIMIT`\n- `OTEL_EVENT_ATTRIBUTE_COUNT_LIMIT`\n- `OTEL_SPAN_LINK_COUNT_LIMIT`\n- `OTEL_LINK_ATTRIBUTE_COUNT_LIMIT`\n```\n\n----------------------------------------\n\nTITLE: Configuring Data Writer for Anomaly Detection in YAML\nDESCRIPTION: Defines where the processed data will be written after detection. Requires the destination URL for writing the anomaly detection results.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/anomaly-detection/components/README.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# where to write data to\n# https://docs.victoriametrics.com/anomaly-detection/components/writer/\nwriter:\n  datasource_url: \"http://victoriametrics:8428/\"\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Frontmatter for Documentation Page\nDESCRIPTION: YAML frontmatter block defining metadata for the documentation page, including title, weight, menu placement, and aliases.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/guides/migrate-from-influx/_index.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Migrate from InfluxDB to VictoriaMetrics\nweight: 8\nmenu:\n  docs:\n    parent: \"guides\"\n    weight: 8\naliases:\n- /guides/migrate-from-influx.html\n---\n```\n\n----------------------------------------\n\nTITLE: Benchmarking fasttemplate Performance in Go\nDESCRIPTION: Presents benchmark results obtained by running `go test -bench=. -benchmem`, demonstrating the performance advantage of `fasttemplate` for template substitution tasks compared to other standard Go methods like `text/template`, `strings.Replace`, `strings.Replacer`, and `fmt.Fprintf`. The results show `fasttemplate` operations (ExecuteFunc, Execute) are significantly faster and allocate less memory.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/valyala/fasttemplate/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ go test -bench=. -benchmem\nPASS\nBenchmarkFmtFprintf-4                   \t 2000000\t       790 ns/op\t       0 B/op\t       0 allocs/op\nBenchmarkStringsReplace-4               \t  500000\t      3474 ns/op\t    2112 B/op\t      14 allocs/op\nBenchmarkStringsReplacer-4              \t  500000\t      2657 ns/op\t    2256 B/op\t      23 allocs/op\nBenchmarkTextTemplate-4                 \t  500000\t      3333 ns/op\t     336 B/op\t      19 allocs/op\nBenchmarkFastTemplateExecuteFunc-4      \t 5000000\t       349 ns/op\t       0 B/op\t       0 allocs/op\nBenchmarkFastTemplateExecute-4          \t 3000000\t       383 ns/op\t       0 B/op\t       0 allocs/op\nBenchmarkFastTemplateExecuteFuncString-4\t 3000000\t       549 ns/op\t     144 B/op\t       1 allocs/op\nBenchmarkFastTemplateExecuteString-4    \t 3000000\t       572 ns/op\t     144 B/op\t       1 allocs/op\nBenchmarkFastTemplateExecuteTagFunc-4   \t 2000000\t       743 ns/op\t     144 B/op\t       3 allocs/op\n```\n\n----------------------------------------\n\nTITLE: Querying VictoriaMetrics API Using Curl\nDESCRIPTION: Command to query time series data from VictoriaMetrics using the HTTP API and format the JSON response using jq.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/deployment/marketplace/vultr/README.md#2025-04-22_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ncurl -sg http://your_server_public_ipv4:8428/api/v1/query_range?query=vm_app_uptime_seconds | jq\n```\n\n----------------------------------------\n\nTITLE: Writer Request Start Log\nDESCRIPTION: Logs a debug message when the writer component begins sending data (e.g., anomaly scores) to VictoriaMetrics, detailing the target URL, datapoint count (`N`), payload size (`M`), and query key. Useful for tracking write request initiation and payload details. Placeholders `{{scheduler_alias}}`, `{{url}}`, `{{N}}`, `{{M}}`, and `{{query_key}}` provide context.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/anomaly-detection/components/monitoring.md#2025-04-22_snippet_20\n\nLANGUAGE: text\nCODE:\n```\n[Scheduler {{scheduler_alias}}] POST {{url}} with {{N}} datapoints, {{M}} bytes of payload, for {{query_key}}\n```\n\n----------------------------------------\n\nTITLE: Merging Pre-release Changes for OpenTelemetry Go\nDESCRIPTION: This snippet shows how to merge the pre-release changes into the current branch if they are correct.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/go.opentelemetry.io/otel/RELEASING.md#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ngit merge prerelease_<module set>_<new tag>\n```\n\n----------------------------------------\n\nTITLE: Using Binary Prefixes for Numeric Literals in MetricsQL\nDESCRIPTION: Shows MetricsQL's support for standard (`K`, `M`, `G`, `T`) and binary (`Ki`, `Mi`, `Gi`, `Ti`) suffixes for large numeric literals. `8K` equals `8000`, while `1.2Mi` equals `1.2 * 1024 * 1024`.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_15\n\nLANGUAGE: MetricsQL\nCODE:\n```\n8K\n```\n\nLANGUAGE: MetricsQL\nCODE:\n```\n1.2Mi\n```\n\n----------------------------------------\n\nTITLE: Installing Victoria Logs Using Helm\nDESCRIPTION: This command installs Victoria Logs in the 'vl' namespace using Helm, applying configurations from 'vl.yaml'. Helm automates the deployment and management of the application in the Kubernetes cluster.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/guides/collecting-openshift-logs-with-victoria-logs/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade --namespace vl --install vl vm/victoria-logs-single -f vl.yaml\n```\n\n----------------------------------------\n\nTITLE: Configuring ext4 Filesystem for Large Data Storage\nDESCRIPTION: Command to create an ext4 filesystem optimized for storing large amounts of data (>1TB) with support for huge files and 64-bit features.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/README.md#2025-04-22_snippet_74\n\nLANGUAGE: sh\nCODE:\n```\nmkfs.ext4 ... -O 64bit,huge_file,extent -T huge\n```\n\n----------------------------------------\n\nTITLE: Converting VictoriaMetrics Histogram Buckets using prometheus_buckets() in MetricsQL\nDESCRIPTION: The `prometheus_buckets(buckets)` transform function converts VictoriaMetrics histogram buckets (using `vmrange` labels) into Prometheus-compatible histogram buckets (using `le` labels). This is useful for visualizing histograms as heatmaps in tools like Grafana. The input `buckets` refers to the VictoriaMetrics histogram data.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_92\n\nLANGUAGE: MetricsQL\nCODE:\n```\nprometheus_buckets(buckets)\n```\n\n----------------------------------------\n\nTITLE: Configuring vlogsgenerator Statistics Interval in Bash\nDESCRIPTION: Command to run vlogsgenerator with a custom statistics output interval of 2 seconds.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlogsgenerator/README.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nbin/vlogsgenerator \\\n  -start=2024-01-01 -end=2024-02-01 \\\n  -activeStreams=100 \\\n  -logsPerStream=10_000 \\\n  -addr=http://localhost:9428/insert/jsonline \\\n  -statInterval=2s\n```\n\n----------------------------------------\n\nTITLE: Configuring Anomaly Score Override Settings in YAML\nDESCRIPTION: Example showing how to configure anomaly score settings at both global and model-specific levels. Demonstrates inheritance and override behavior for anomaly_score_outside_data_range parameter.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/anomaly-detection/components/models.md#2025-04-22_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nsettings:\n  # other parameters ...\n  # all the models in `models` section will inherit this value unless overridden at the model level\n  anomaly_score_outside_data_range: 1.2\n\nmodels:\n  model_score_override:\n    class: 'zscore_online'\n    # explicitly set, takes priority over `settings`'s value\n    anomaly_score_outside_data_range: 1.5\n  model_score_from_settings_level:\n    class: 'zscore_online'\n    # inherits from `settings`, will be `1.2`, same as setting\n    # anomaly_score_outside_data_range: 1.2\n```\n\n----------------------------------------\n\nTITLE: VMSingle Custom Resource with Plain License Key\nDESCRIPTION: Kubernetes operator custom resource definition for VictoriaMetrics single-node with direct license key specification.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/enterprise.md#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: operator.victoriametrics.com/v1beta1\nkind: VMSingle\nmetadata:\n  name: example-vmsingle\nspec:\n  retentionPeriod: \"1\"\n  license:\n    key: {BASE64_ENCODED_LICENSE_KEY}\n  image:\n    tag: v1.115.0-enterprise\n```\n\n----------------------------------------\n\nTITLE: Remote Write with Bearer Authentication\nDESCRIPTION: Configuration for remote write using bearer token authentication. Demonstrates how to set up token-based authentication for secure metrics transmission.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/data-ingestion/Alloy.md#2025-04-22_snippet_3\n\nLANGUAGE: Alloy\nCODE:\n```\nprometheus.exporter.unix \"nodeexporter\" {}\n\nprometheus.scrape \"nodeexporter\" {\n  targets = prometheus.exporter.unix.nodeexporter.targets\n  forward_to = [prometheus.remote_write.victoriametrics.receiver]\n}\n\nprometheus.remote_write \"victoriametrics\" {\n  endpoint {\n    url = \"https://<victoriametrics_url>/prometheus/api/v1/write\"\n    bearer_token  = \"<token>\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Uppercasing CPK Acronym in Go Source Files - YAML\nDESCRIPTION: This snippet replaces instances of 'Cpk' with 'CPK' throughout Go source files to ensure correct capitalization for the acronym as per Azure storage terminology. It targets files matched as 'source-file-go' and uses a global regex replacement. The expected input is code using 'Cpk' in identifiers or comments.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/internal/generated/autorest.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n  - from: source-file-go\n    where: $\n    transform: >-\n      return $.\n        replace(/Cpk/g, \"CPK\");\n```\n\n----------------------------------------\n\nTITLE: Configuring VictoriaMetrics for Prometheus-Compatible OTEL Metrics - Shell\nDESCRIPTION: This snippet creates a Helm values YAML file to set VictoriaMetrics to use Prometheus naming convention for OpenTelemetry metrics. It is required to ensure metric names are Prometheus-compatible for downstream processing.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/guides/getting-started-with-opentelemetry/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncat << EOF > vm-values.yaml\\nserver:\\n  extraArgs:\\n    opentelemetry.usePrometheusNaming: true\\nEOF\n```\n\n----------------------------------------\n\nTITLE: Limiting Output Series with `provide_series` in vmanomaly Model Config (YAML)\nDESCRIPTION: Shows how to use the `provide_series` argument (available since v1.12.0) within a model's configuration to specify which output time series should be generated and written by `vmanomaly`. In this example, only the `anomaly_score` series will be written. If omitted, the model produces its default set of output series. The `timestamp` column is always implicitly included.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/anomaly-detection/components/models.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nmodels:\n  model_alias_1:\n    # ...\n    provide_series: ['anomaly_score']  # only `anomaly_score` metric will be available for writing back to the database\n```\n\n----------------------------------------\n\nTITLE: Installing Color Package in Go\nDESCRIPTION: This snippet shows the installation command to add the 'color' library to a Go project using 'go get'. It is a prerequisite to using colorized text outputs in Go.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/fatih/color/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\n\"go get github.com/fatih/color\"\n```\n\n----------------------------------------\n\nTITLE: Benchmarking xxhash Implementations in Bash\nDESCRIPTION: Demonstrates how to benchmark the pure-Go versus assembly implementations of Sum64 using Go's testing tools and 'benchstat' for comparing results. Requires Go (1.19.2 or later recommended) and 'benchstat' as dependencies. The commands measure hashing performance for different implementations and print comparative statistics for optimization or regression tracking.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/klauspost/compress/zstd/internal/xxhash/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbenchstat <(go test -tags purego -benchtime 500ms -count 15 -bench 'Sum64$')\n```\n\nLANGUAGE: bash\nCODE:\n```\nbenchstat <(go test -benchtime 500ms -count 15 -bench 'Sum64$')\n```\n\n----------------------------------------\n\nTITLE: Stopping and Removing the Docker Compose Environment (Shell)\nDESCRIPTION: These commands are used to shut down and clean up the Docker Compose environment. `docker compose down` stops and removes containers, networks, and default volumes created by `up`. `docker compose rm -f` forcefully removes stopped service containers. Requires Docker and Docker Compose.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/deployment/docker/victorialogs/datadog-serverless/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndocker compose down\ndocker compose rm -f\n```\n\n----------------------------------------\n\nTITLE: InfluxDB Migration Command-Line Flags\nDESCRIPTION: Details the specific flags for migrating time series data from InfluxDB, including connection parameters, authentication, filtering options, and TLS configuration.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmctl.md#2025-04-22_snippet_25\n\nLANGUAGE: shellhelp\nCODE:\n```\n./vmctl influx -help\n\n   --influx-addr value\n     InfluxDB server addr (default: \"http://localhost:8086\")\n   --influx-user value\n     InfluxDB user [$INFLUX_USERNAME]\n   --influx-password value\n     InfluxDB user password [$INFLUX_PASSWORD]\n   --influx-database value\n     InfluxDB database\n   --influx-retention-policy value\n     InfluxDB retention policy (default: \"autogen\")\n   --influx-chunk-size value\n     The chunkSize defines max amount of series to be returned in one chunk (default: 10000)\n   --influx-concurrency value\n     Number of concurrently running fetch queries to InfluxDB (default: 1)\n   --influx-filter-series value\n     InfluxDB filter expression to select series. E.g. \"from cpu where arch='x86' AND hostname='host_2753'\".\n     See for details https://docs.influxdata.com/influxdb/v1.7/query_language/schema_exploration#show-series\n   --influx-filter-time-start value\n     The time filter to select timeseries with timestamp equal or higher than provided value. E.g. '2020-01-01T20:07:00Z'\n   --influx-filter-time-end value\n     The time filter to select timeseries with timestamp equal or lower than provided value. E.g. '2020-01-01T20:07:00Z'\n   --influx-measurement-field-separator value\n     The {separator} symbol used to concatenate {measurement} and {field} names into series name {measurement}{separator}{field}. (default: \"_\")\n   --influx-skip-database-label\n     Whether to skip adding the label 'db' to timeseries. (default: false)\n   --influx-prometheus-mode\n     Whether to restore the original timeseries name previously written from Prometheus to InfluxDB v1 via remote_write. (default: false)\n   --influx-cert-file value\n     Optional path to client-side TLS certificate file to use when connecting to -influx-addr\n   --influx-key-file value\n     Optional path to client-side TLS key to use when connecting to -influx-addr\n   --influx-CA-file value\n     Optional path to TLS CA file to use for verifying connections to -influx-addr. By default, system CA is used\n   --influx-server-name value\n     Optional TLS server name to use for connections to -influx-addr. By default, the server name from -influx-addr is used\n   --influx-insecure-skip-verify\n     Whether to skip tls verification when connecting to -influx-addr (default: false)\n\n# There are flags available for influx, opentsdb, prometheus and remote-read commands. See below.\n```\n\n----------------------------------------\n\nTITLE: Go Version Downgrade Fix\nDESCRIPTION: Downgrade of Go builder from 1.22.0 to 1.21.7 to address a bug causing deadlocked HTTP connections in vmagent.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/changelog/CHANGELOG_2024.md#2025-04-22_snippet_32\n\nLANGUAGE: go\nCODE:\n```\n1.21.7\n```\n\n----------------------------------------\n\nTITLE: Checking Time Series Existence in VictoriaMetrics Cluster using Shell\nDESCRIPTION: Uses `curl` to query the `vmselect` `/api/v1/series` endpoint with a `match[]` parameter specifying the time series selector (`process_cpu_cores_available` in this case). The output is piped to `jq` for pretty-printing the JSON response, which lists matching series. Requires a running VictoriaMetrics Cluster and the `jq` tool.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/guides/guide-delete-or-replace-metrics/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncurl -s 'http://vmselect:8481/select/0/prometheus/api/v1/series?match[]=process_cpu_cores_available' | jq\n```\n\n----------------------------------------\n\nTITLE: Renaming Models in Swagger Document - YAML\nDESCRIPTION: This directive instructs the code generation pipeline to rename two internal models, BlobItemInternal and BlobPropertiesInternal, to BlobItem and BlobProperties, respectively. It is a declarative command for the model renaming phase in the code generator and expects these models to be present in the Swagger definition. Outputs renames in the generated code, improving public API semantics.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/internal/generated/autorest.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n- rename-model:\n    from: BlobItemInternal\n    to: BlobItem\n- rename-model:\n    from: BlobPropertiesInternal\n    to: BlobProperties\n```\n\n----------------------------------------\n\nTITLE: Performing Server-Side Backup Copy in Shell\nDESCRIPTION: This command demonstrates how to make a server-side copy of an existing backup from one location to another within the same storage bucket.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmbackup.md#2025-04-22_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\n./vmbackup -origin=gs://bucket/foo -dst=gs://bucket/bar\n```\n\n----------------------------------------\n\nTITLE: Allowing All Web Crawlers in robots.txt\nDESCRIPTION: This `robots.txt` configuration uses the wildcard `*` for `User-agent` to apply the rule to all web crawlers. The empty `Disallow:` directive signifies that no parts of the site are restricted, effectively allowing full access to all compliant robots. The comment links to the official documentation for the protocol.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/public/robots.txt#2025-04-22_snippet_0\n\nLANGUAGE: robots.txt\nCODE:\n```\n# https://www.robotstxt.org/robotstxt.html\nUser-agent: *\nDisallow:\n```\n\n----------------------------------------\n\nTITLE: Referencing Metric Name in vmalert Alerting Annotations - Shell\nDESCRIPTION: This snippet demonstrates how to use the Prometheus metric name label (`__name__`) and the `instance` label in vmalert alert annotations. The template syntax uses Go templating variables to reference metric label values inside an alert's annotation text. There are no external dependencies, but the snippet is contextually used within alert rule definitions in vmalert-compatible YAML configurations. The template expects `$labels` to be defined in the context and outputs a string combining the metric name with an alert description.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/changelog/CHANGELOG_2022.md#2025-04-22_snippet_21\n\nLANGUAGE: sh\nCODE:\n```\n{{ $labels.__name__ }}: Too high connection number for \"{{ $labels.instance }}\n\n```\n\n----------------------------------------\n\nTITLE: VictoriaMetrics Helm Chart Values Configuration - YAML\nDESCRIPTION: This YAML configuration file sets the values for the VictoriaMetrics Kubernetes Helm chart with integration to a DBaaS cloud setup. It configures external remote read/write URLs, activation of vmalert and vmagent, evaluation and scrape intervals, cluster labels, and enables Grafana. Dependencies include presence of Kubernetes secrets and proper chart repositories. Key inputs are URL endpoints, bearer tokens, and cluster names. The output is a ready-to-use dbaas.yaml for Helm.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics-cloud/how-to-monitor-k8s.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nexternalVM:\n  read:\n    url: <reading url, you can find it in examples on Access page>\n    bearerTokenSecret:\n      name: dbaas-write-access-token\n      key: bearerToken\n  write:\n    url: <reading url, you can find it in examples on Access page>\n    bearerTokenSecret:\n      name: dbaas-read-access-token\n      key: bearerToken\n\nvmsingle:\n  enabled: false\n\nvmcluster:\n  enabled: false\n\nvmalert:\n  enabled: true\n  spec:\n    evaluationInterval: 15s\n\nvmagent:\n  enabled: true\n\n  spec:\n    scrapeInterval: 30s\n    externalLabels:\n      cluster: <your cluster name>\n\n# dependencies  \n# Grafana dependency chart configuration. For possible values refer to https://github.com/grafana/helm-charts/tree/main/charts/grafana#configuration\ngrafana:\n  enabled: true\n\n```\n\n----------------------------------------\n\nTITLE: Benchmark Results for Counter vs. Atomic Int64\nDESCRIPTION: This plaintext snippet contains benchmark results comparing a custom Counter implementation to atomic int64 operations in Go. Each result details the time spent per operation s executed under different CPU load scenarios, demonstrating the scalability and performance dynamics.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/puzpuzpuz/xsync/v3/BENCHMARKS.md#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nname                                            time/op\\nCounter                                         27.3ns ± 1%\\nCounter-2                                       27.2ns ±11%\\nCounter-4                                       15.3ns ± 8%\\nCounter-8                                       7.43ns ± 7%\\nCounter-16                                      3.70ns ±10%\\nCounter-32                                      1.77ns ± 3%\\nCounter-64                                      0.96ns ±10%\\nAtomicInt64                                     7.60ns ± 0%\\nAtomicInt64-2                                   12.6ns ±13%\\nAtomicInt64-4                                   13.5ns ±14%\\nAtomicInt64-8                                   12.7ns ± 9%\\nAtomicInt64-16                                  12.8ns ± 8%\\nAtomicInt64-32                                  13.0ns ± 6%\\nAtomicInt64-64                                  12.9ns ± 7%\\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Logrus with go-colorable on Windows (Go)\nDESCRIPTION: This snippet demonstrates how to configure the logrus logging library to force colorized output on any OS, utilizing the go-colorable package for proper ANSI escape code handling on Windows. It sets a text formatter, replaces the logrus output with a colorable writer, and emits several log levels to standard output. Dependencies include the logrus and go-colorable Go packages. Inputs are log messages; outputs are colored logs appropriately displayed in the console. Intended for cross-platform Go logging with color support.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/mattn/go-colorable/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nlogrus.SetFormatter(&logrus.TextFormatter{ForceColors: true})\\nlogrus.SetOutput(colorable.NewColorableStdout())\\n\\nlogrus.Info(\"succeeded\")\\nlogrus.Warn(\"not correct\")\\nlogrus.Error(\"something error\")\\nlogrus.Fatal(\"panic\")\n```\n\n----------------------------------------\n\nTITLE: Setting Empty Command-line Flag Values\nDESCRIPTION: Example of using short array notation for command-line flags with empty values, where default values are applied.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/changelog/CHANGELOG_2024.md#2025-04-22_snippet_31\n\nLANGUAGE: bash\nCODE:\n```\n-remoteWrite.sendTimeout=',20s,'\n```\n\n----------------------------------------\n\nTITLE: Listing Command-Line Flags via Shell Help - VictoriaMetrics vmstorage - shellhelp\nDESCRIPTION: This code snippet presents the full shell help output for the 'vmstorage' binary, displaying every available command-line flag, their types, default values, and in-line documentation. No dependencies are required other than executing the 'vmstorage' binary with the '-help' flag. Users can copy these flags for use in production and test deployments. Expected output is descriptive help text per flag, and some flags may only be available in the enterprise edition. Flags cover configuration for networking, TLS, caching, HTTP server, authentication, tuning, and feature toggles. All entries are structured for shell usage.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/Cluster-VictoriaMetrics.md#2025-04-22_snippet_30\n\nLANGUAGE: shellhelp\nCODE:\n```\n  -bigMergeConcurrency int\n     Deprecated: this flag does nothing\n  -blockcache.missesBeforeCaching int\n     The number of cache misses before putting the block into cache. Higher values may reduce indexdb/dataBlocks cache size at the cost of higher CPU and disk read usage (default 2)\n  -cacheExpireDuration duration\n     Items are removed from in-memory caches after they aren't accessed for this duration. Lower values may reduce memory usage at the cost of higher CPU usage. See also -prevCacheRemovalPercent (default 30m0s)\n  -cluster.tls\n     Whether to use TLS when accepting connections from vminsert and vmselect. See https://docs.victoriametrics.com/cluster-victoriametrics/#mtls-protection . This flag is available only in VictoriaMetrics enterprise. See https://docs.victoriametrics.com/enterprise/\n  -cluster.tlsCAFile string\n     Path to TLS CA file to use for verifying certificates provided by vminsert and vmselect if -cluster.tls flag is set. By default system CA is used. See https://docs.victoriametrics.com/cluster-victoriametrics/#mtls-protection . This flag is available only in VictoriaMetrics enterprise. See https://docs.victoriametrics.com/enterprise/\n  -cluster.tlsCertFile string\n     Path to server-side TLS certificate file to use when accepting connections from vminsert and vmselect if -cluster.tls flag is set. See https://docs.victoriametrics.com/cluster-victoriametrics/#mtls-protection . This flag is available only in VictoriaMetrics enterprise. See https://docs.victoriametrics.com/enterprise/\n  -cluster.tlsCipherSuites array\n     Optional list of TLS cipher suites used for connections from vminsert and vmselect if -cluster.tls flag is set. See the list of supported cipher suites at https://pkg.go.dev/crypto/tls#pkg-constants . This flag is available only in VictoriaMetrics enterprise. See https://docs.victoriametrics.com/enterprise/\n     Supports an array of values separated by comma or specified via multiple flags.\n     Value can contain comma inside single-quoted or double-quoted string, {}, [] and () braces.\n  -cluster.tlsInsecureSkipVerify\n     Whether to skip verification of TLS certificates provided by vminsert and vmselect if -cluster.tls flag is set. Note that disabled TLS certificate verification breaks security. This flag is available only in VictoriaMetrics enterprise. See https://docs.victoriametrics.com/enterprise/\n  -cluster.tlsKeyFile string\n     Path to server-side TLS key file to use when accepting connections from vminsert and vmselect if -cluster.tls flag is set. See https://docs.victoriametrics.com/cluster-victoriametrics/#mtls-protection . This flag is available only in VictoriaMetrics enterprise. See https://docs.victoriametrics.com/enterprise/\n  -dedup.minScrapeInterval duration\n     Leave only the last sample in every time series per each discrete interval equal to -dedup.minScrapeInterval > 0. See https://docs.victoriametrics.com/#deduplication for details\n  -denyQueriesOutsideRetention\n     Whether to deny queries outside of the configured -retentionPeriod. When set, then /api/v1/query_range would return '503 Service Unavailable' error for queries with 'from' value outside -retentionPeriod. This may be useful when multiple data sources with distinct retentions are hidden behind query-tee\n  -denyQueryTracing\n     Whether to disable the ability to trace queries. See https://docs.victoriametrics.com/#query-tracing\n  -downsampling.period array\n     Comma-separated downsampling periods in the format 'offset:period'. For example, '30d:10m' instructs to leave a single sample per 10 minutes for samples older than 30 days. When setting multiple downsampling periods, it is necessary for the periods to be multiples of each other. See https://docs.victoriametrics.com/#downsampling for details. This flag is available only in VictoriaMetrics enterprise. See https://docs.victoriametrics.com/enterprise/\n     Supports an array of values separated by comma or specified via multiple flags.\n     Value can contain comma inside single-quoted or double-quoted string, {}, [] and () braces.\n  -enableTCP6\n     Whether to enable IPv6 for listening and dialing. By default, only IPv4 TCP and UDP are used\n  -envflag.enable\n     Whether to enable reading flags from environment variables in addition to the command line. Command line flag values have priority over values from environment vars. Flags are read only from the command line if this flag isn't set. See https://docs.victoriametrics.com/#environment-variables for more details\n  -envflag.prefix string\n     Prefix for environment variables if -envflag.enable is set\n  -eula\n     Deprecated, please use -license or -licenseFile flags instead. By specifying this flag, you confirm that you have an enterprise license and accept the ESA https://victoriametrics.com/legal/esa/ . This flag is available only in Enterprise binaries. See https://docs.victoriametrics.com/enterprise/\n  -filestream.disableFadvise\n     Whether to disable fadvise() syscall when reading large data files. The fadvise() syscall prevents from eviction of recently accessed data from OS page cache during background merges and backups. In some rare cases it is better to disable the syscall if it uses too much CPU\n  -finalMergeDelay duration\n     Deprecated: this flag does nothing\n  -flagsAuthKey value\n     Auth key for /flags endpoint. It must be passed via authKey query arg. It overrides -httpAuth.*\n     Flag value can be read from the given file when using -flagsAuthKey=file:///abs/path/to/file or -flagsAuthKey=file://./relative/path/to/file . Flag value can be read from the given http/https url when using -flagsAuthKey=http://host/path or -flagsAuthKey=https://host/path\n  -forceFlushAuthKey value\n     authKey, which must be passed in query string to /internal/force_flush pages\n     Flag value can be read from the given file when using -forceFlushAuthKey=file:///abs/path/to/file or -forceFlushAuthKey=file://./relative/path/to/file . Flag value can be read from the given http/https url when using -forceFlushAuthKey=http://host/path or -forceFlushAuthKey=https://host/path\n  -forceMergeAuthKey value\n     authKey, which must be passed in query string to /internal/force_merge pages\n     Flag value can be read from the given file when using -forceMergeAuthKey=file:///abs/path/to/file or -forceMergeAuthKey=file://./relative/path/to/file . Flag value can be read from the given http/https url when using -forceMergeAuthKey=http://host/path or -forceMergeAuthKey=https://host/path\n  -fs.disableMmap\n     Whether to use pread() instead of mmap() for reading data files. By default, mmap() is used for 64-bit arches and pread() is used for 32-bit arches, since they cannot read data files bigger than 2^32 bytes in memory. mmap() is usually faster for reading small data chunks than pread()\n  -http.connTimeout duration\n     Incoming connections to -httpListenAddr are closed after the configured timeout. This may help evenly spreading load among a cluster of services behind TCP-level load balancer. Zero value disables closing of incoming connections (default 2m0s)\n  -http.disableResponseCompression\n     Disable compression of HTTP responses to save CPU resources. By default, compression is enabled to save network bandwidth\n  -http.header.csp string\n     Value for 'Content-Security-Policy' header, recommended: \"default-src 'self'\"\n  -http.header.frameOptions string\n     Value for 'X-Frame-Options' header\n  -http.header.hsts string\n     Value for 'Strict-Transport-Security' header, recommended: 'max-age=31536000; includeSubDomains'\n  -http.idleConnTimeout duration\n     Timeout for incoming idle http connections (default 1m0s)\n  -http.maxGracefulShutdownDuration duration\n     The maximum duration for a graceful shutdown of the HTTP server. A highly loaded server may require increased value for a graceful shutdown (default 7s)\n  -http.pathPrefix string\n     An optional prefix to add to all the paths handled by http server. For example, if '-http.pathPrefix=/foo/bar' is set, then all the http requests will be handled on '/foo/bar/*' paths. This may be useful for proxied requests. See https://www.robustperception.io/using-external-urls-and-proxies-with-prometheus\n  -http.shutdownDelay duration\n     Optional delay before http server shutdown. During this delay, the server returns non-OK responses from /health page, so load balancers can route new requests to other servers\n  -httpAuth.password value\n     Password for HTTP server's Basic Auth. The authentication is disabled if -httpAuth.username is empty\n     Flag value can be read from the given file when using -httpAuth.password=file:///abs/path/to/file or -httpAuth.password=file://./relative/path/to/file . Flag value can be read from the given http/https url when using -httpAuth.password=http://host/path or -httpAuth.password=https://host/path\n  -httpAuth.username string\n     Username for HTTP server's Basic Auth. The authentication is disabled if empty. See also -httpAuth.password\n  -httpListenAddr array\n     Address to listen for incoming http requests. See also -httpListenAddr.useProxyProtocol\n     Supports an array of values separated by comma or specified via multiple flags.\n     Value can contain comma inside single-quoted or double-quoted string, {}, [] and () braces.\n  -httpListenAddr.useProxyProtocol array\n     Whether to use proxy protocol for connections accepted at the given -httpListenAddr . See https://www.haproxy.org/download/1.8/doc/proxy-protocol.txt . With enabled proxy protocol http server cannot serve regular /metrics endpoint. Use -pushmetrics.url for metrics pushing\n     Supports array of values separated by comma or specified via multiple flags.\n     Empty values are set to false.\n  -inmemoryDataFlushInterval duration\n```\n\n----------------------------------------\n\nTITLE: Reference Log File Sizes after Unarchiving\nDESCRIPTION: This snippet displays the approximate disk space consumed by each major log file after it has been unarchived by the `download.sh` script. This information helps users manage disk space, especially if they choose to download only a subset of the available logs for the benchmark.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/deployment/logs-benchmark/readme.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n```shell\n2.3M Linux.log\n 73M SSH.log\n 32G Thunderbird.log\n5.1M Apache.log\n 13G hadoop-*.log\n```\n```\n\n----------------------------------------\n\nTITLE: Creating Tables in Markdown\nDESCRIPTION: Demonstrates how to create simple tables using Markdown syntax supported by Blackfriday.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/russross/blackfriday/v2/README.md#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\nName    | Age\n--------|------\nBob     | 27\nAlice   | 23\n```\n\n----------------------------------------\n\nTITLE: Label Equality Comparison in PromQL\nDESCRIPTION: Returns series with identical values for the specified labels.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_158\n\nLANGUAGE: promql\nCODE:\n```\nlabels_equal(q, \"label1\", \"label2\", ...)\n```\n\n----------------------------------------\n\nTITLE: Copying Label Values in MetricsQL\nDESCRIPTION: A label manipulation function that copies values from source labels (`src_label*`) to destination labels (`dst_label*`) for all time series returned by `q`. If a `src_label` is empty, the corresponding `dst_label` remains unchanged. Implicitly applies `default_rollup()` if `q` is a series selector.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_142\n\nLANGUAGE: metricsql\nCODE:\n```\nlabel_copy(q, \"src_label1\", \"dst_label1\", ..., \"src_labelN\", \"dst_labelN\")\n```\n\n----------------------------------------\n\nTITLE: VictoriaLogs Data Restoration Using rsync\nDESCRIPTION: Command for restoring VictoriaLogs data from a remote backup using rsync. Includes progress tracking and synchronization of all files.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/README.md#2025-04-22_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nrsync -avh --progress --delete <username>@<host>:<path-to-victorialogs-backup> <path-to-victorialogs-data>\n```\n\n----------------------------------------\n\nTITLE: Building VictoriaMetrics Vultr Server Image with Packer\nDESCRIPTION: Command to build a VictoriaMetrics server snapshot for Vultr Marketplace using Packer. Requires VULTR_API_KEY and VM_VERSION environment variables to be set. The API key should be obtained from Vultr dashboard settings.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/deployment/marketplace/vultr/RELEASE_GUIDE.md#2025-04-22_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nmake release-victoria-metrics-vultr-server VULTR_API_KEY=\"5FI5J9PZCCN1TAXPHI8UMDH5ZX8JIHJKTSLB\" VM_VERSION=\"1.90.0\"\n```\n\n----------------------------------------\n\nTITLE: Adding VictoriaMetrics User to OpenBSD Infrastructure List - Plaintext\nDESCRIPTION: This snippet demonstrates the addition of a dedicated VictoriaMetrics system user and group for OpenBSD by inserting a new line into the \"/usr/ports/infrastructure/db/user.list\" file. This is required to isolate VictoriaMetrics processes and provide proper permissions for database management. The three columns specify the user ID, username/group name, and the relevant directory path within the OpenBSD ports tree. No special dependencies are needed, but this change must be made as root and takes effect after a rebuild of the affected port.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/ports/OpenBSD/README.md#2025-04-22_snippet_0\n\nLANGUAGE: none\nCODE:\n```\n866 _vmetrics            _vmetrics       databases/VictoriaMetrics\n```\n\n----------------------------------------\n\nTITLE: Writer Behavior Metrics in Prometheus Format\nDESCRIPTION: Metrics tracking writer performance and behavior including request duration, response codes, bytes sent, serialization time, and data point/timeseries counts. Each metric includes labels for url, query_key, scheduler_alias, and preset.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/anomaly-detection/components/monitoring.md#2025-04-22_snippet_4\n\nLANGUAGE: prometheus\nCODE:\n```\nvmanomaly_writer_request_duration_seconds{url=\"...\",query_key=\"...\",scheduler_alias=\"...\",preset=\"...\"}\nvmanomaly_writer_responses{url=\"...\",code=\"...\",query_key=\"...\",scheduler_alias=\"...\",preset=\"...\"}\nvmanomaly_writer_sent_bytes{url=\"...\",query_key=\"...\",scheduler_alias=\"...\",preset=\"...\"}\nvmanomaly_writer_request_serialize_seconds{url=\"...\",query_key=\"...\",scheduler_alias=\"...\",preset=\"...\"}\nvmanomaly_writer_datapoints_sent{url=\"...\",query_key=\"...\",scheduler_alias=\"...\",preset=\"...\"}\nvmanomaly_writer_timeseries_sent{url=\"...\",query_key=\"...\",scheduler_alias=\"...\",preset=\"...\"}\n```\n\n----------------------------------------\n\nTITLE: SQL Top N Query Example\nDESCRIPTION: Shows a SQL query for finding top 5 user_ids by frequency.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/sql-to-logsql.md#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT user_id, count(*) hits FROM table GROUP BY user_id ORDER BY hits DESC LIMIT 5\n```\n\n----------------------------------------\n\nTITLE: Building vlogsgenerator in Bash\nDESCRIPTION: Command to build the vlogsgenerator binary from the repository root.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlogsgenerator/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake vlogsgenerator\n```\n\n----------------------------------------\n\nTITLE: Collecting CPU Profile for vmagent\nDESCRIPTION: Command to collect a CPU profile from a running vmagent instance. This command waits for 30 seconds before returning.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmagent.md#2025-04-22_snippet_67\n\nLANGUAGE: sh\nCODE:\n```\ncurl http://0.0.0.0:8429/debug/pprof/profile > cpu.pprof\n```\n\n----------------------------------------\n\nTITLE: Accessing Metric Name Usage Statistics via HTTP API (HTTP)\nDESCRIPTION: Specifies the new HTTP API endpoint `/api/v1/status/metric_names_stats`. This endpoint is available on `vmsingle` and `vmstorage` (when tracking is enabled with `--storage.trackMetricNamesStats`) to retrieve statistics about the frequency of metric name usage during queries.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/changelog/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: http\nCODE:\n```\n/api/v1/status/metric_names_stats\n```\n\n----------------------------------------\n\nTITLE: Building Custom victoria-logs Docker Image using Make\nDESCRIPTION: This shell command uses `make` to execute the `package-victoria-logs` target defined in the project's Makefile. This typically triggers the process of building a Docker image for the `victoria-logs` component locally, allowing users to test custom builds within the benchmark environment.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/deployment/logs-benchmark/readme.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n```shell\nmake package-victoria-logs\n```\n```\n\n----------------------------------------\n\nTITLE: Modifying Label Values in Scraped Metrics in YAML\nDESCRIPTION: This YAML configuration demonstrates how to add a 'foo_' prefix to all values of the 'job' label across all scraped metrics.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/relabeling.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nscrape_configs:\n- job_name: test\n  static_configs:\n  - targets: [host123]\n  metric_relabel_configs:\n  - source_labels: [job]\n    target_label: job\n    replacement: foo_$1\n```\n\n----------------------------------------\n\nTITLE: Shutting Down Docker Compose Environment for Filebeat and VictoriaLogs Integration\nDESCRIPTION: These commands stop and remove the Docker Compose environment for the Filebeat and VictoriaLogs integration. They ensure a clean shutdown of all services.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/deployment/docker/victorialogs/filebeat/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndocker compose down\ndocker compose rm -f\n```\n\n----------------------------------------\n\nTITLE: Release Update - Smithy-Go v1.22.1\nDESCRIPTION: SDK module update fixing URI path segment replacement when names overlap.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/aws/smithy-go/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ngithub.com/aws/smithy-go@v1.22.1\n```\n\n----------------------------------------\n\nTITLE: Creating Synchronous Gauge Instruments in Go\nDESCRIPTION: Int64 or float64 synchronous gauge instruments can now be created from a Meter in the metric API.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\nmeter.Int64ObservableGauge(\"name\")\nmeter.Float64ObservableGauge(\"name\")\n```\n\n----------------------------------------\n\nTITLE: Stopping and Removing the Telegraf-VictoriaLogs Docker Compose Environment (Shell)\nDESCRIPTION: These commands are used sequentially to shut down the Docker Compose environment. `docker compose down` stops the running containers defined in the configuration, and `docker compose rm -f` forcefully removes the stopped containers and associated networks. This cleans up the resources created by `docker compose up`.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/deployment/docker/victorialogs/telegraf/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndocker compose down\ndocker compose rm -f\n```\n\n----------------------------------------\n\nTITLE: Basic Label Usage in Prometheus Format\nDESCRIPTION: Demonstrates how to define metrics with labels for tracking HTTP requests with different paths and status codes.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/keyConcepts/keyConcepts.md#2025-04-22_snippet_0\n\nLANGUAGE: prometheus\nCODE:\n```\nrequests_total{path=\"/\", code=\"200\"}\nrequests_total{path=\"/\", code=\"403\"}\n```\n\n----------------------------------------\n\nTITLE: Version Updates Documentation\nDESCRIPTION: Markdown changelog entries documenting version history for VictoriaMetrics AWS SDK module, including dependency updates, feature additions, and breaking changes.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/aws/aws-sdk-go-v2/service/internal/s3shared/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# v1.18.8 (2025-01-09)\n\n* **Dependency Update**: Updated to the latest SDK module versions\n\n# v1.18.7 (2024-12-19)\n\n* **Dependency Update**: Updated to the latest SDK module versions\n```\n\n----------------------------------------\n\nTITLE: Finding the vminsert Service Name (sh)\nDESCRIPTION: This command lists all Kubernetes services in the current namespace and filters for those related to `vminsert` using `grep`. The output helps identify the exact service name needed for configuring VMAgent's `remoteWrite` URL, as this service receives the ingested metrics.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/guides/getting-started-with-vm-operator/README.md#2025-04-22_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\nkubectl get svc | grep vminsert\n```\n\n----------------------------------------\n\nTITLE: Calculating Sum of Message Lengths\nDESCRIPTION: Example showing how to calculate total byte length of _msg fields across logs in last 5 minutes\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_198\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m | stats sum_len(_msg) messages_len\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS Server with Conntrack Listener in Go\nDESCRIPTION: This code snippet demonstrates how to configure a TLS-enabled HTTP server with a tracked net.Listener using conntrack and connhelpers to manage TLS configuration for secure connections. It requires net, tls, conntrack, and connhelpers packages.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/mwitkow/go-conntrack/README.md#2025-04-22_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\nlistener, err := net.Listen(\"tcp\", fmt.Sprintf(\":%d\", *port))\nlistener = conntrack.NewListener(listener, \n    conntrack.TrackWithName(\"https\"), \n    conntrack.TrackWithTracing(),\n    conntrack.TrackWithTcpKeepAlive(5 * time.Minutes))\ntlsConfig, err := connhelpers.TlsConfigForServerCerts(*tlsCertFilePath, *tlsKeyFilePath)\ntlsConfig, err = connhelpers.TlsConfigWithHttp2Enabled(tlsConfig)\ntlsListener := tls.NewListener(listener, tlsConfig)\nhttpServer.Serve(listener)\n```\n\n----------------------------------------\n\nTITLE: Configuring YAML Front Matter for VictoriaMetrics Documentation\nDESCRIPTION: This YAML snippet defines the front matter for the VictoriaMetrics documentation page. It sets the title, menu location, weight, identifier, and page reference for the documentation structure.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/_index.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: VictoriaMetrics\nmenu:\n  docs:\n    weight: 10\n    identifier: victoriametrics\n    pageRef: \"/\"\n---\n```\n\n----------------------------------------\n\nTITLE: Unpacking Logfmt from Implicit Default Field using LogSQL\nDESCRIPTION: This LogSQL query selects logs from the last 5 minutes (`_time:5m`) and unpacks logfmt key-value pairs from the `_msg` field. The `from _msg` part is omitted, as `_msg` is the default field for the `unpack_logfmt` pipe. This is equivalent to specifying `from _msg` explicitly.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_158\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m | unpack_logfmt\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Robot Access Rules\nDESCRIPTION: Basic robots.txt configuration that allows unrestricted access to all web crawlers and user agents. Uses standard robots.txt syntax with wildcard user-agent and empty disallow directive.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlselect/vmui/robots.txt#2025-04-22_snippet_0\n\nLANGUAGE: robotstxt\nCODE:\n```\nUser-agent: *\nDisallow:\n```\n\n----------------------------------------\n\nTITLE: Time Series Calculations with days_in_month\nDESCRIPTION: Returns the number of days in the month for given unix timestamps. Returns values in range [28...31].\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_86\n\nLANGUAGE: promql\nCODE:\n```\ndays_in_month(q)\n```\n\n----------------------------------------\n\nTITLE: Count Unique Values Over Time in PromQL\nDESCRIPTION: Counts occurrences of unique sample values over a lookbehind window, storing results with a custom label. Useful for value distribution analysis.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_31\n\nLANGUAGE: promql\nCODE:\n```\ncount_values_over_time(\"label\", series_selector[d])\n```\n\n----------------------------------------\n\nTITLE: Using the PathMatch Function for System Path Separators in Go\nDESCRIPTION: This function signature defines `doublestar.PathMatch`. It checks if a `name` matches a `pattern`, automatically using the operating system's native path separator (e.g., `\\` on Windows) for splitting. Escaping is disabled on systems using `\\`. It serves as a drop-in replacement for `filepath.Match`, assuming both inputs use the system separator. The only potential error is `doublestar.ErrBadPattern`.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/bmatcuk/doublestar/v4/README.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nfunc PathMatch(pattern, name string) (bool, error)\n```\n\n----------------------------------------\n\nTITLE: Protected Interfaces in OpenTelemetry Go SDK\nDESCRIPTION: List of interfaces that are prevented from being implemented by end-users, ensuring API stability and proper usage of the library.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-22_snippet_54\n\nLANGUAGE: Go\nCODE:\n```\n\"otel/exporters/otlp/otlphttp\".Option\n\"otel/exporters/stdout\".Option\n\"otel/oteltest\".Option\n\"otel/trace\".TracerOption\n\"otel/trace\".SpanOption\n\"otel/trace\".EventOption\n\"otel/trace\".LifeCycleOption\n\"otel/trace\".InstrumentationOption\n\"otel/sdk/resource\".Option\n\"otel/sdk/trace\".ParentBasedSamplerOption\n\"otel/sdk/trace\".ReadOnlySpan\n\"otel/sdk/trace\".ReadWriteSpan\n```\n\n----------------------------------------\n\nTITLE: Displaying PkgGoDev Badge for OpenTelemetry Attribute Package in Markdown\nDESCRIPTION: This code snippet shows how to embed a PkgGoDev badge in a Markdown file. The badge links to the documentation for the OpenTelemetry Go attribute package on pkg.go.dev.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/go.opentelemetry.io/otel/attribute/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![PkgGoDev](https://pkg.go.dev/badge/go.opentelemetry.io/otel/attribute)](https://pkg.go.dev/go.opentelemetry.io/otel/attribute)\n```\n\n----------------------------------------\n\nTITLE: Version Tags and Release Information\nDESCRIPTION: Release version tags and dates for VictoriaMetrics v1.87.8 and v1.87.7, including LTS release information.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/changelog/CHANGELOG_2023.md#2025-04-22_snippet_16\n\nLANGUAGE: markdown\nCODE:\n```\n## [v1.87.8](https://github.com/VictoriaMetrics/VictoriaMetrics/releases/tag/v1.87.8)\n\nReleased at 2023-09-01\n\n## [v1.87.7](https://github.com/VictoriaMetrics/VictoriaMetrics/releases/tag/v1.87.7)\n\nReleased at 2023-08-12\n```\n\n----------------------------------------\n\nTITLE: Starting the Docker Compose Environment (Shell)\nDESCRIPTION: This command is executed within a specific protocol subdirectory (e.g., 'loki') to start the services defined in the corresponding `docker-compose.yml` file (Promtail, VictoriaLogs, VictoriaMetrics) in detached mode (`-d`). Requires Docker and Docker Compose to be installed.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/deployment/docker/victorialogs/promtail/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Setting Variable Value Unsafely using reflect2 in Go\nDESCRIPTION: Shows how to set a variable's value using `reflect2.UnsafeSet`, which operates on `unsafe.Pointer` and bypasses runtime type checking for potential performance gains. It requires obtaining the type via `reflect2.TypeOf` and passing pointers cast to `unsafe.Pointer` (e.g., `unsafe.Pointer(&i)`, `unsafe.Pointer(&j)`) to `UnsafeSet`. Use this method with caution due to the lack of type safety.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/modern-go/reflect2/README.md#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\nvalType := reflect2.TypeOf(1)\ni := 1\nj := 10\nvalType.UnsafeSet(unsafe.Pointer(&i), unsafe.Pointer(&j))\n// i will be 10\n```\n\n----------------------------------------\n\nTITLE: Example Test Configuration for vmalert-tool\nDESCRIPTION: Complete YAML example of a test configuration file for vmalert-tool, including rule files, evaluation interval, input series, MetricsQL expression tests, and alert rule tests.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmalert-tool.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nrule_files:\n  - rules.yaml\n\nevaluation_interval: 1m\n\ntests:\n  - interval: 1m\n    input_series:\n      - series: 'up{job=\"prometheus\", instance=\"localhost:9090\"}'\n        values: \"0+0x1440\"\n\n    metricsql_expr_test:\n      - expr: subquery_interval_test\n        eval_time: 4m\n        exp_samples:\n          - labels: '{__name__=\"subquery_interval_test\", cluster=\"prod\", instance=\"localhost:9090\", job=\"prometheus\"}'\n            value: 1\n\n    alert_rule_test:\n      - eval_time: 2h\n        groupname: group1\n        alertname: InstanceDown\n        exp_alerts:\n          - exp_labels:\n              job: prometheus\n              severity: page\n              instance: localhost:9090\n              cluster: prod\n            exp_annotations:\n              summary: \"Instance localhost:9090 down\"\n              description: \"localhost:9090 of job prometheus in cluster prod has been down for more than 5 minutes.\"\n\n      - eval_time: 0\n        groupname: group1\n        alertname: AlwaysFiring\n        exp_alerts:\n          - exp_labels:\n              cluster: prod\n\n      - eval_time: 0\n        groupname: group1\n        alertname: InstanceDown\n        exp_alerts: []\n```\n\n----------------------------------------\n\nTITLE: Pi Number Reference in PromQL\nDESCRIPTION: The `pi()` function provides the mathematical constant pi (π), useful for circular or periodic calculations within time series data processing in PromQL.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_95\n\nLANGUAGE: PromQL\nCODE:\n```\n`pi()`\n```\n\n----------------------------------------\n\nTITLE: Applying Apache License 2.0 Boilerplate Notice\nDESCRIPTION: Standard boilerplate notice text that should be added to files when applying the Apache License 2.0. It includes placeholders for copyright year and owner information, along with the license details and permissions notice.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/aws/aws-sdk-go-v2/internal/ini/LICENSE.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nCopyright [yyyy] [name of copyright owner]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Finding Minimum Value Over Range - MetricsQL (English)\nDESCRIPTION: The `range_min(q)` function finds the smallest (minimum) value over all the points in each time series produced by `q`. Each output value represents the series’ minimum within the specified time range.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/MetricsQL.md#2025-04-22_snippet_88\n\nLANGUAGE: MetricsQL\nCODE:\n```\n`range_min(q)`\n```\n\n----------------------------------------\n\nTITLE: Building DigitalOcean Droplet Image for VictoriaMetrics using Make and Packer\nDESCRIPTION: This console command executes a Make target to build a VictoriaMetrics snapshot image for a DigitalOcean 1-ClickApp Droplet. It requires 'make' and 'packer' to be installed. The command passes the necessary DigitalOcean API token and the desired VictoriaMetrics version as environment variables to the packer build process.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/deployment/marketplace/digitialocean/one-click-droplet/RELEASE_GUIDE.md#2025-04-22_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nmake release-victoria-metrics-digitalocean-oneclick-droplet DIGITALOCEAN_API_TOKEN=\"dop_v23_2e46f4759ceeeba0d0248\" VM_VERSION=\"1.94.0\"\n```\n\n----------------------------------------\n\nTITLE: Calculating Rate with rate Rollup Function - PromQL/Pseudocode\nDESCRIPTION: Returns the average per-second increase rate over raw samples in lookbehind window 'd'. Accepts a series selector and duration. When no window is provided, auto-calculates a suitable window using query parameters. Strips metric names by default. Compatible with PromQL and crucial for counter metrics.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_51\n\nLANGUAGE: pseudo-promql\nCODE:\n```\n`rate(series_selector[d])`\n```\n\n----------------------------------------\n\nTITLE: Starting Docker Compose Services\nDESCRIPTION: This command starts all the services defined in the Docker Compose file in detached mode.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/anomaly-detection/guides/guide-vmanomaly-vmalert/README.md#2025-04-22_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\ndocker-compose up -d\n```\n\n----------------------------------------\n\nTITLE: Model Error Log (Infer Stage)\nDESCRIPTION: Logs an error when the model fails during the 'infer' stage due to internal service issues or misconfiguration. This error increments the `vmanomaly_model_run_errors` metric. Placeholders `{{scheduler_alias}}`, `{{model_alias}}`, `{{query_key}}`, and `{{error_message}}` provide context.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/anomaly-detection/components/monitoring.md#2025-04-22_snippet_15\n\nLANGUAGE: text\nCODE:\n```\n[Scheduler {{scheduler_alias}}] Error during stage 'infer' for model '{{model_alias}}' (query_key: {{query_key}}): {{error_message}}\n```\n\n----------------------------------------\n\nTITLE: Monitoring Sub-configurations in vmanomaly\nDESCRIPTION: This shell snippet shows how to access the self-monitoring metrics of vmanomaly to determine the number of available and assigned sub-configurations per shard. Dependencies include access to a shell environment and vmanomaly's monitoring system. Key parameter includes the metric 'vmanomaly_config_entities'. Outputs include gauge metrics indicating the distribution of sub-configurations across shards.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/anomaly-detection/Scaling vmanomaly.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# HELP vmanomaly_config_entities Number of sub-configs (entities) in the configuration available for sharding.\\nScope: total - total number of entities, shard - number of entities used on the current shard.\\n# TYPE vmanomaly_config_entities gauge\\nvmanomaly_config_entities{preset=\"default\",scope=\"total\"} 8.0\\nvmanomaly_config_entities{preset=\"default\",scope=\"shard\"} 4.0\n```\n\n----------------------------------------\n\nTITLE: Counting Logs with Non-Empty Username or Password in LogsQL\nDESCRIPTION: This query returns the number of logs with non-empty 'username' or 'password' fields over the last 5 minutes using the count stats function.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_178\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m | stats count(username, password) logs_with_username_or_password\n```\n\n----------------------------------------\n\nTITLE: Fixing Response Status Code Check in Submit Batch Endpoint - YAML\nDESCRIPTION: This snippet modifies response status code checking logic to validate against 'http.StatusAccepted' instead of 'http.StatusOK' in Go client's batch submission methods. The regex targets if-statements and the block that generates and returns errors, ensuring compliance with Azure REST API's expected status codes. It expects the exact matching patterns in the generated Go client codebase.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/internal/generated/autorest.md#2025-04-22_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n- from: zz_service_client.go\n  where: $\n  transform: >-\n    return $.\n      replace(/if\\s+!runtime\\.HasStatusCode\\(httpResp,\\s+http\\.StatusOK\\)\\s+\\{\\s+err\\s+=\\s+runtime\\.NewResponseError\\(httpResp\\)\\s+return ServiceClientSubmitBatchResponse\\{\\},\\s+err\\s+}/g, \n      `if !runtime.HasStatusCode(httpResp, http.StatusAccepted) {\\n\\t\\terr = runtime.NewResponseError(httpResp)\\n\\t\\treturn ServiceClientSubmitBatchResponse{}, err\\n\\t}`);\n```\n\n----------------------------------------\n\nTITLE: Defining the ParseAccept Function for HTTP Accept Header Parsing in Go\nDESCRIPTION: Declares the `ParseAccept` function signature in Go. This function accepts an HTTP `Accept` header string as input. Its purpose is to parse this header according to RFC 2616 and return a sorted slice of `Accept` structs, where each struct represents a clause (media range and associated parameters like 'q' value) from the header.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/munnerz/goautoneg/README.txt#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\nfunc ParseAccept(header string) (accept []Accept)\n```\n\n----------------------------------------\n\nTITLE: Shutting Down Docker Compose Environment for Fluentd-VictoriaLogs Integration\nDESCRIPTION: These commands stop and remove the Docker Compose environment for the Fluentd-VictoriaLogs integration. They ensure a clean shutdown and removal of all associated containers.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/deployment/docker/victorialogs/fluentd/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose down\ndocker compose rm -f\n```\n\n----------------------------------------\n\nTITLE: Displaying PkgGoDev Badge for Trace Embedded Package in Markdown\nDESCRIPTION: This snippet shows how to include a PkgGoDev badge in a Markdown file. The badge links to the documentation for the Trace Embedded package on pkg.go.dev.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/go.opentelemetry.io/otel/trace/embedded/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![PkgGoDev](https://pkg.go.dev/badge/go.opentelemetry.io/otel/trace/embedded)](https://pkg.go.dev/go.opentelemetry.io/otel/trace/embedded)\n```\n\n----------------------------------------\n\nTITLE: Target scraping alignment configuration in YAML\nDESCRIPTION: Configuration example showing how to align hourly scrapes to the beginning of each hour using the scrape_align_interval option in vmagent's configuration.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmagent.md#2025-04-22_snippet_45\n\nLANGUAGE: yaml\nCODE:\n```\nscrape_configs:\n- job_name: foo\n  scrape_interval: 1h\n  scrape_align_interval: 1h\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Output from vlogsgenerator\nDESCRIPTION: Example of two JSON log entries generated by vlogsgenerator, showcasing the structure and fields of the output.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlogsgenerator/README.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"_time\": \"2024-05-08T14:34:00.854Z\",\n  \"_msg\": \"message for the stream 8 and worker 0; ip=185.69.136.129; uuid=b4fe8f1a-c93c-dea3-ba11-5b9f0509291e; u64=8996587920687045253\",\n  \"host\": \"host_8\",\n  \"worker_id\": \"0\",\n  \"run_id\": \"f9b3deee-e6b6-7f56-5deb-1586e4e81725\",\n  \"const_0\": \"some value 0 8\",\n  \"const_1\": \"some value 1 8\",\n  \"const_2\": \"some value 2 8\",\n  \"var_0\": \"some value 0 12752539384823438260\",\n  \"dict_0\": \"warn\",\n  \"dict_1\": \"info\",\n  \"u8_0\": \"6\",\n  \"u16_0\": \"35202\",\n  \"u32_0\": \"1964973739\",\n  \"u64_0\": \"4810489083243239145\",\n  \"float_0\": \"1.868\",\n  \"ip_0\": \"250.34.75.125\",\n  \"timestamp_0\": \"1799-03-16T01:34:18.311Z\",\n  \"json_0\": \"{\\\"foo\\\":\\\"bar_3\\\",\\\"baz\\\":{\\\"a\\\":[\\\"x\\\",\\\"y\\\"]},\\\"f3\\\":NaN,\\\"f4\\\":32}\"\n}\n{\n  \"_time\": \"2024-05-08T14:34:00.854Z\",\n  \"_msg\": \"message for the stream 9 and worker 0; ip=164.244.254.194; uuid=7e8373b1-ce0d-1ce7-8e96-4bcab8955598; u64=13949903463741076522\",\n  \"host\": \"host_9\",\n  \"worker_id\": \"0\",\n  \"run_id\": \"f9b3deee-e6b6-7f56-5deb-1586e4e81725\",\n  \"const_0\": \"some value 0 9\",\n  \"const_1\": \"some value 1 9\",\n  \"const_2\": \"some value 2 9\",\n  \"var_0\": \"some value 0 5371555382075206134\",\n  \"dict_0\": \"INFO\",\n  \"dict_1\": \"FATAL\",\n  \"u8_0\": \"219\",\n  \"u16_0\": \"31459\",\n  \"u32_0\": \"3918836777\",\n  \"u64_0\": \"6593354256620219850\",\n  \"float_0\": \"1.085\",\n  \"ip_0\": \"253.151.88.158\",\n  \"timestamp_0\": \"2042-10-05T16:42:57.082Z\",\n  \"json_0\": \"{\\\"foo\\\":\\\"bar_5\\\",\\\"baz\\\":{\\\"a\\\":[\\\"x\\\",\\\"y\\\"]},\\\"f3\\\":NaN,\\\"f4\\\":27}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying PkgGoDev Badge for OpenTelemetry Trace Noop Package in Markdown\nDESCRIPTION: This code snippet shows how to embed a PkgGoDev badge in Markdown, linking to the GoDoc page for the OpenTelemetry trace/noop package.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/go.opentelemetry.io/otel/trace/noop/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![PkgGoDev](https://pkg.go.dev/badge/go.opentelemetry.io/otel/trace/noop)](https://pkg.go.dev/go.opentelemetry.io/otel/trace/noop)\n```\n\n----------------------------------------\n\nTITLE: Label Filter Pattern Update\nDESCRIPTION: Example showing the updated label filter pattern to match both old and new indexdb metric types. The filter {type=\"indexdb\"} must be replaced with {type=~\"indexdb.*\"} to maintain compatibility.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/changelog/CHANGELOG_2022.md#2025-04-22_snippet_2\n\nLANGUAGE: promql\nCODE:\n```\n{type=~\"indexdb.*\"}\n```\n\n----------------------------------------\n\nTITLE: License Check Error Message\nDESCRIPTION: Error message displayed when no license key or file is provided for vmanomaly service startup.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/anomaly-detection/components/monitoring.md#2025-04-22_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nPlease provide a license code using --license or --licenseFile arg, or as VM_LICENSE_FILE env. See https://victoriametrics.com/products/enterprise/trial/ to obtain a trial license.\n```\n\n----------------------------------------\n\nTITLE: Generating Go Lexer File from Promlex\nDESCRIPTION: After editing the promlex.l file, this command generates a new Go lexer file by using the 'golex' tool. The command outputs the processed lexer file with a .go extension, ensuring compatibility with the Go language project.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/prometheus/prometheus/model/textparse/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngolex -o=promlex.l.go promlex.l\n```\n\n----------------------------------------\n\nTITLE: Basic Scrape Interval Function\nDESCRIPTION: Calculates average interval between raw samples in seconds over the lookbehind window.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_45\n\nLANGUAGE: metricsql\nCODE:\n```\nscrape_interval(series_selector[d])\n```\n\n----------------------------------------\n\nTITLE: Sample Target Groups in Prometheus SD Mechanism in Go\nDESCRIPTION: This example illustrates how target groups are structured within the service discovery implementation, providing two distinct groups each identified by a unique source. The snippet shows the inclusion of essential metadata like instance addresses and job labels. The code assumes familiarity with Prometheus model labels and Go struct syntax.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/prometheus/prometheus/discovery/README.md#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\n[]targetgroup.Group{\n\t{\n\t\tTargets: []model.LabelSet{\n\t\t\t{\n\t\t\t\t\"__instance__\": \"10.11.150.1:7870\",\n\t\t\t\t\"hostname\":     \"demo-target-1\",\n\t\t\t\t\"test\":         \"simple-test\",\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"__instance__\": \"10.11.150.4:7870\",\n\t\t\t\t\"hostname\":     \"demo-target-2\",\n\t\t\t\t\"test\":         \"simple-test\",\n\t\t\t},\n\t\t},\n\t\tLabels: model.LabelSet{\n\t\t\t\"job\": \"mysql\",\n\t\t},\n\t\t\"Source\": \"file1\",\n\t},\n\t{\n\t\tTargets: []model.LabelSet{\n\t\t\t{\n\t\t\t\t\"__instance__\": \"10.11.122.11:6001\",\n\t\t\t\t\"hostname\":     \"demo-postgres-1\",\n\t\t\t\t\"test\":         \"simple-test\",\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"__instance__\": \"10.11.122.15:6001\",\n\t\t\t\t\"hostname\":     \"demo-postgres-2\",\n\t\t\t\t\"test\":         \"simple-test\",\n\t\t\t},\n\t\t},\n\t\tLabels: model.LabelSet{\n\t\t\t\"job\": \"postgres\",\n\t\t},\n\t\t\"Source\": \"file2\",\n\t},\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Fprint Functions in Go\nDESCRIPTION: Explains how to create custom Fprint functions similar to standard print functions but designed to direct colorized text to specific io.Writer outputs.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/fatih/color/README.md#2025-04-22_snippet_6\n\nLANGUAGE: Go\nCODE:\n```\n\"blue := color.New(color.FgBlue).FprintfFunc()\\nblue(myWriter, \\\"important notice: %s\\\", stars)\\n\\n// Mix up with multiple attributes\\nsuccess := color.New(color.Bold, color.FgGreen).FprintlnFunc()\\nsuccess(myWriter, \\\"Don\\'t forget this...\\\")\\n\"\n```\n\n----------------------------------------\n\nTITLE: Enabling azidentity Logging in Go\nDESCRIPTION: This Go code snippet demonstrates how to configure logging for the Azure SDK's `azidentity` module to aid in debugging authentication issues. It uses `azlog.SetListener` to direct log messages to standard output via `fmt.Println` and `azlog.SetEvents` to filter for authentication-specific events (`azidentity.EventAuthentication`). This requires importing the `azlog` package from `github.com/Azure/azure-sdk-for-go/sdk/azcore/log` and referencing `azidentity.EventAuthentication`.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/Azure/azure-sdk-for-go/sdk/azidentity/TROUBLESHOOTING.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nimport azlog \"github.com/Azure/azure-sdk-for-go/sdk/azcore/log\"\n\n// print log output to stdout\nazlog.SetListener(func(event azlog.Event, s string) {\n    fmt.Println(s)\n})\n\n// include only azidentity credential logs\nazlog.SetEvents(azidentity.EventAuthentication)\n```\n\n----------------------------------------\n\nTITLE: Defining first_over_time in MetricsQL - Markdown\nDESCRIPTION: Documents first_over_time, which retrieves the first raw sample observed in the specified lookbehind window for each series. Indicates usage, expectations for output, and related rollup functions for completeness.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/MetricsQL.md#2025-04-22_snippet_25\n\nLANGUAGE: Markdown\nCODE:\n```\n#### first_over_time\n\n`first_over_time(series_selector[d])` is a [rollup function](#rollup-functions), which returns the first [raw sample](https://docs.victoriametrics.com/keyconcepts/#raw-samples)\nvalue on the given lookbehind window `d` per each time series returned from the given [series_selector](https://docs.victoriametrics.com/keyconcepts/#filtering).\n\nSee also [last_over_time](#last_over_time) and [tfirst_over_time](#tfirst_over_time).\n\n```\n\n----------------------------------------\n\nTITLE: Using stddev_over_time in VictoriaMetrics Syntax - plaintext\nDESCRIPTION: Applies stddev_over_time to compute the standard deviation over raw samples within a specified lookbehind window for each returned time series. Supported in both VictoriaMetrics and PromQL. Requires a valid series selector; input: 'series_selector[d]'. Output is the standard deviation value. Metric names are stripped unless a modifier is used.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_50\n\nLANGUAGE: plaintext\nCODE:\n```\n`stddev_over_time(series_selector[d])`\n```\n\n----------------------------------------\n\nTITLE: Release Notes - Features and Bugfixes\nDESCRIPTION: Changelog entries documenting new features and bug fixes across VictoriaMetrics components including vmui, MetricsQL, vmgateway, vmagent, and vmalert\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/changelog/CHANGELOG_2022.md#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n* FEATURE: [vmui]: allow changing timezones for the requested data\n* FEATURE: [vmui]: provide fast path for hiding results\n* FEATURE: [MetricsQL]: add range_trim_spikes(phi, q) function\n* FEATURE: [MetricsQL]: allow passing inf arg into limitk, topk, bottomk\n* FEATURE: [vmgateway]: add support for JWT token signature verification\n* FEATURE: put the version of VictoriaMetrics in query trace\n\n* BUGFIX: [vmagent]: fix Azure target discovery error\n* BUGFIX: [vmalert]: properly pass HTTP headers during alert state restore\n* BUGFIX: [vmalert]: properly specify rule evaluation step\n* BUGFIX: [vmalert]: properly return remote-write error messages\n* BUGFIX: [vmui]: fix sticky tooltip sizing\n* BUGFIX: [vmui]: properly handle multi-line queries in URLs\n* BUGFIX: [vmui]: correctly handle up/down keypresses in multi-line queries\n```\n\n----------------------------------------\n\nTITLE: OpenTelemetry Go Code References\nDESCRIPTION: Various code path references and package imports for OpenTelemetry Go SDK components including exporters, bridges, and semantic conventions.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\ngo.opentelemetry.io/otel/exporters/otlp/otlpmetric/otlpmetrichttp\ngo.opentelemetry.io/otel/exporters/otlp/otlpmetric/otlptracehttp\ngo.opentelemetry.io/otel/trace\ngo.opentelemetry.io/otel/log\ngo.opentelemetry.io/otel/log/global\ngo.opentelemetry.io/otel/exporters/zipkin\ngo.opentelemetry.io/otel/bridge/opencensus\n```\n\n----------------------------------------\n\nTITLE: Configuring YAML Metadata for Kubernetes Monitoring Documentation\nDESCRIPTION: This YAML snippet defines metadata for a documentation page about Kubernetes monitoring with VictoriaMetrics Single. It includes weight for ordering, title, menu structure, and aliases for URL handling.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/guides/k8s-monitoring-via-vm-single/_index.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nweight: 2\ntitle: Kubernetes monitoring via VictoriaMetrics Single\nmenu:\n  docs:\n    parent: \"guides\"\n    weight: 2\naliases:\n- /guides/k8s-monitoring-via-vm-single.html\n```\n\n----------------------------------------\n\nTITLE: Configuring Hugo Front Matter for VictoriaMetrics Key Concepts Page\nDESCRIPTION: This YAML snippet defines the Hugo front matter for a documentation page about key concepts in VictoriaMetrics. It sets the page weight, title, menu location, and URL aliases.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/keyConcepts/_index.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nweight: 34\ntitle: Key concepts\nmenu:\n  docs:\n    identifier: vm-key-concepts\n    parent: victoriametrics\n    weight: 34\naliases:\n  - /keyConcepts.html\n  - /keyсoncepts.html\n  - /keyconcepts/index.html\n  - /keyconcepts/\n---\n```\n\n----------------------------------------\n\nTITLE: Calculating Square Root with sqrt Function in MetricsQL\nDESCRIPTION: The sqrt function calculates square root for every point of every time series returned by the query. Metric names are stripped from the resulting series unless keep_metric_names modifier is added.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_107\n\nLANGUAGE: metricsql\nCODE:\n```\nsqrt(q)\n```\n\n----------------------------------------\n\nTITLE: Apache License 2.0 Boilerplate Notice Template\nDESCRIPTION: Standard boilerplate notice text for applying the Apache License 2.0 to a project. Includes placeholders for copyright year and owner name, along with standard license disclaimers and reference to the full license.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/aws/aws-sdk-go-v2/service/internal/s3shared/LICENSE.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nCopyright [yyyy] [name of copyright owner]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Decompressing S2 Data Stream with S2 Reader in Go\nDESCRIPTION: Illustrates how to decompress an S2 data stream from an `io.Reader` (src) and write the uncompressed data to an `io.Writer` (dst) using `s2.NewReader`. The `io.Copy` function handles the data transfer. Similar to the `Writer`, the `Reader` can be reused using its `Reset` method.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/klauspost/compress/s2/README.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfunc DecodeStream(src io.Reader, dst io.Writer) error {\n    dec := s2.NewReader(src)\n    _, err := io.Copy(dst, dec)\n    return err\n}\n```\n\n----------------------------------------\n\nTITLE: Apache License Boilerplate Template\nDESCRIPTION: Standard boilerplate notice template for applying the Apache License to a project, including copyright notice and license terms.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/aws/aws-sdk-go-v2/service/ssooidc/LICENSE.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nCopyright [yyyy] [name of copyright owner]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Displaying PkgGoDev Badge for OpenTelemetry Baggage Package in Markdown\nDESCRIPTION: This code snippet shows how to embed a PkgGoDev badge in a Markdown file. The badge links to the documentation for the OpenTelemetry Baggage package on pkg.go.dev.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/go.opentelemetry.io/otel/baggage/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![PkgGoDev](https://pkg.go.dev/badge/go.opentelemetry.io/otel/baggage)](https://pkg.go.dev/go.opentelemetry.io/otel/baggage)\n```\n\n----------------------------------------\n\nTITLE: Finding Unique IP Values\nDESCRIPTION: Example showing how to get unique IP values from logs in last 5 minutes\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_199\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m | stats uniq_values(ip) unique_ips\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response for VictoriaLogs Field Names Query (json)\nDESCRIPTION: Illustrates the JSON structure returned by the `/select/logsql/field_names` endpoint. It contains a 'values' array where each object specifies a field name ('value') and the number of log entries ('hits') containing that field within the query results.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/querying/README.md#2025-04-22_snippet_28\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"values\": [\n    {\n      \"value\": \"_msg\",\n      \"hits\": 1033300623\n    },\n    {\n      \"value\": \"_stream\",\n      \"hits\": 1033300623\n    },\n    {\n      \"value\": \"_time\",\n      \"hits\": 1033300623\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Time Series Data with InfluxQL\nDESCRIPTION: An InfluxQL query to select the last value of the 'bar' field from the 'foo' measurement, filtered by instance and time, and grouped by 1-minute intervals. This query is used to visualize the sample data in Grafana when using InfluxDB.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/guides/migrate-from-influx/README.md#2025-04-22_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nSELECT last (\"bar\")\nFROM \"foo\"\nWHERE (\"instance\" = 'localhost')\n  AND $timeFilter\nGROUP BY time (1m)\n```\n\n----------------------------------------\n\nTITLE: Installing Goleak using Go Get\nDESCRIPTION: Command to install the latest version of goleak using go get.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/go.uber.org/goleak/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get -u go.uber.org/goleak\n```\n\n----------------------------------------\n\nTITLE: Change Log Entry Markdown\nDESCRIPTION: Markdown formatted version history entries documenting changes, updates and fixes for AWS SDK Go V2.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/aws/aws-sdk-go-v2/service/ssooidc/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n# v1.14.1 (2023-02-03)\\n\\n* **Dependency Update**: Updated to the latest SDK module versions\\n\\n# v1.14.0 (2023-01-05)\\n\\n* **Feature**: Add `ErrorCodeOverride` field to all error structs (aws/smithy-go#401).\n```\n\n----------------------------------------\n\nTITLE: VictoriaMetrics Partition Creation Log\nDESCRIPTION: Example log output showing VictoriaMetrics creating a new partition for storing time series data. The logs indicate successful partition creation with paths for small and big parts.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmctl.md#2025-04-22_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\n2020-04-27T18:38:46.474Z info VictoriaMetrics/lib/storage/partition.go:207 creating a partition \"2020_04\" with smallPartsPath=\"/victoria-metrics-data/data/small/2020_04\", bigPartsPath=\"/victoria-metrics-data/data/big/2020_04\"\n2020-04-27T18:38:46.506Z info VictoriaMetrics/lib/storage/partition.go:222 partition \"2020_04\" has been created\n```\n\n----------------------------------------\n\nTITLE: Calculating Value Decreases Over Time in MetricsQL\nDESCRIPTION: The decreases_over_time function calculates the number of raw sample value decreases over a given lookbehind window for each time series.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_28\n\nLANGUAGE: MetricsQL\nCODE:\n```\ndecreases_over_time(series_selector[d])\n```\n\n----------------------------------------\n\nTITLE: Counting Counter Resets in PromQL\nDESCRIPTION: The resets function returns the number of counter resets over a specified time window. It's typically used with counter metrics and is supported by PromQL.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_50\n\nLANGUAGE: PromQL\nCODE:\n```\nresets(series_selector[d])\n```\n\n----------------------------------------\n\nTITLE: Running vmalert Binary in Cluster Mode (Shell/Bash)\nDESCRIPTION: This shell code sets up environment variables for read/write endpoints and launches vmalert in cluster mode, segregating read and write URLs for robust VictoriaMetrics Cloud cluster deployments. Rules file and notifier URLs are specified, all via parameterized environment variables, ensuring security and flexibility. The vmalert binary must be present.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics-cloud/alerting-vmalert-victoria-metrics-cloud.md#2025-04-22_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nexport TOKEN=76bc5470-****-****-****-************\nexport MANAGED_VM_READ_URL=https://gw-c15-1a.cloud.victoriametrics.com/select/0/prometheus/\nexport MANAGED_VM_WRITE_URL=https://gw-c15-1a.cloud.victoriametrics.com/insert/0/prometheus/\nexport ALERTMANAGER_URL=http://localhost:9093 \n./vmalert -rule=alerts.yml -datasource.url=$MANAGED_VM_READ_URL -datasource.bearerToken=$TOKEN -notifier.url=$ALERTMANAGER_URL -remoteWrite.url=$MANAGED_VM_WRITE_URL -remoteWrite.bearerToken=$TOKEN -remoteRead.url=$MANAGED_VM_READ_URL -remoteRead.bearerToken=$TOKEN\n```\n\n----------------------------------------\n\nTITLE: Prometheus-Compatible Delta Calculation in MetricsQL\nDESCRIPTION: The delta_prometheus function calculates the difference between the first and last samples at a given lookbehind window for each time series, mimicking Prometheus' delta function behavior.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_31\n\nLANGUAGE: MetricsQL\nCODE:\n```\ndelta_prometheus(series_selector[d])\n```\n\n----------------------------------------\n\nTITLE: Iterate Over Grapheme Clusters Using NewGraphemes\nDESCRIPTION: Demonstrates how to iterate over grapheme clusters using the 'Graphemes' class in uniseg. It requires handling the state of the iteration and the package itself in Go.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/rivo/uniseg/README.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ngr := uniseg.NewGraphemes(\"👍🏼!\")\nfor gr.Next() {\n\tfmt.Printf(\"%x \", gr.Runes())\n}\n// [1f44d 1f3fc] [21]\n```\n\n----------------------------------------\n\nTITLE: Disabling and Enabling Color in Go\nDESCRIPTION: Explains how to disable or enable color output in Go applications using both global settings and local settings for specific color objects.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/fatih/color/README.md#2025-04-22_snippet_9\n\nLANGUAGE: Go\nCODE:\n```\n\"var flagNoColor = flag.Bool(\\\"no-color\\\", false, \\\"Disable color output\\\")\\n\\nif *flagNoColor {\\n\\tcolor.NoColor = true // disables colorized output\\n}\\n\"\n```\n\nLANGUAGE: Go\nCODE:\n```\n\"c := color.New(color.FgCyan)\\nc.Println(\\\"Prints cyan text\\\")\\n\\nc.DisableColor()\\nc.Println(\\\"This is printed without any color\\\")\\n\\nc.EnableColor()\\nc.Println(\\\"This prints again cyan...\\\")\\n\"\n```\n\n----------------------------------------\n\nTITLE: Using the WithFailOnPatternNotExist Glob Option in Go\nDESCRIPTION: This function signature defines the `WithFailOnPatternNotExist` option for `Glob`, `GlobWalk`, or `FilepathGlob`. If passed, the globbing operation will abort and return `doublestar.ErrPatternNotExist` if the fixed part of the pattern (before any meta characters like `*` or `**`) refers to a path that does not exist. This check occurs after brace expansions (`{a,b}`).\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/bmatcuk/doublestar/v4/README.md#2025-04-22_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nWithFailOnPatternNotExist()\n```\n\n----------------------------------------\n\nTITLE: Reader Healthcheck Messages\nDESCRIPTION: Messages related to reader component healthcheck operations.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/anomaly-detection/components/monitoring.md#2025-04-22_snippet_10\n\nLANGUAGE: text\nCODE:\n```\n[Scheduler {{scheduler_alias}}] Max points per timeseries set as: {{vm_max_datapoints_per_ts}}\n[Scheduler {{scheduler_alias}}] Reader endpoint SSL error {{url}}: {{error_message}}\n[Scheduler {{scheduler_alias}}] Reader endpoint inaccessible {{url}}: {{error_message}}\n[Scheduler {{scheduler_alias}}] Reader endpoint timeout {{url}}: {{error_message}}\n```\n\n----------------------------------------\n\nTITLE: Configuring Vector with Basic Authentication\nDESCRIPTION: Vector configuration that implements basic authentication for sending metrics to VictoriaMetrics. Includes username and password authentication strategy.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/data-ingestion/Vector.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsources:\n  host_metrics_source:\n    type: host_metrics\nsinks:\n  victoriametrics_sink:\n    type: prometheus_remote_write\n    inputs:\n      - host_metrics_source\n    endpoint: \"https://<victoriametrics_url>/api/v1/write\"\n    auth:\n      strategy: \"basic\"\n      user: \"<victoriametrics_user\"\n      password: \"<victoriametrics_password>\"\n    healthcheck:\n      enabled: false\n```\n\n----------------------------------------\n\nTITLE: Building React Production Bundle\nDESCRIPTION: Creates an optimized production build in the build folder with minified bundles and hashed filenames.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Verifying Pre-release Changes for OpenTelemetry Go\nDESCRIPTION: This snippet demonstrates how to verify the changes made during the pre-release step. It shows the diff between the current branch and the pre-release branch.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/go.opentelemetry.io/otel/RELEASING.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ngit diff ...prerelease_<module set>_<new tag>\n```\n\n----------------------------------------\n\nTITLE: Adding a replace directive for legacy import path\nDESCRIPTION: Command to add a replace directive in go.mod file to downgrade the legacy import path to an older version, necessary for compatibility with code that still uses the old import path.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/go.uber.org/atomic/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ go mod edit -replace github.com/uber-go/atomic=github.com/uber-go/atomic@v1.4.0\n```\n\n----------------------------------------\n\nTITLE: Obtaining Azure AD Token via Azure Developer CLI - Shell Script\nDESCRIPTION: This shell command uses the Azure Developer CLI (azd) to acquire an access token for the specified Azure resource scope. Requires login via azd and the azd command to be installed. The --output json flag returns the token as structured data. Output contains a sensitive authentication token and must not be shared.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/Azure/azure-sdk-for-go/sdk/azidentity/TROUBLESHOOTING.md#2025-04-22_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nazd auth token --output json --scope https://management.core.windows.net/.default\n```\n\n----------------------------------------\n\nTITLE: Installing Golex Tool for Go\nDESCRIPTION: This command is used to install the 'golex' tool, which is required to process and compile lexer files in the VictoriaMetrics project. It retrieves the tool using the Go package manager.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/prometheus/prometheus/model/textparse/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get -u modernc.org/golex\n```\n\n----------------------------------------\n\nTITLE: Introducing VLogs CLI for VictoriaLogs Querying in Markdown\nDESCRIPTION: This markdown snippet introduces vlogscli, a command-line utility for querying VictoriaLogs. It provides a link to the official VictoriaLogs documentation and another link to specific documentation for the vlogscli tool.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlogscli/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# vlogscli\n\nCommand-line utility for querying [VictoriaLogs](https://docs.victoriametrics.com/victorialogs/).\n\nSee [these docs](https://docs.victoriametrics.com/victorialogs/querying/vlogscli/).\n```\n\n----------------------------------------\n\nTITLE: Refactoring Metric Instruments in Go OpenTelemetry API\nDESCRIPTION: Consolidates metric instruments into the main `go.opentelemetry.io/otel/metric/instrument` package, deprecating the specific `asyncfloat64`, `asyncint64`, `syncfloat64`, and `syncint64` sub-packages. Provides direct replacements like `Float64ObservableCounter` for `asyncfloat64.Counter`, `Float64Counter` for `syncfloat64.Counter`, etc., simplifying the API surface.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-22_snippet_15\n\nLANGUAGE: Go\nCODE:\n```\ngo.opentelemetry.io/otel/metric/instrument\n// Instruments:\n// - Float64ObservableCounter (replaces asyncfloat64.Counter)\n// - Float64ObservableUpDownCounter (replaces asyncfloat64.UpDownCounter)\n// - Float64ObservableGauge (replaces asyncfloat64.Gauge)\n// - Int64ObservableCounter (replaces asyncint64.Counter)\n// - Int64ObservableUpDownCounter (replaces asyncint64.UpDownCounter)\n// - Int64ObservableGauge (replaces asyncint64.Gauge)\n// - Float64Counter (replaces syncfloat64.Counter)\n// - Float64UpDownCounter (replaces syncfloat64.UpDownCounter)\n// - Float64Histogram (replaces syncfloat64.Histogram)\n// - Int64Counter (replaces syncint64.Counter)\n// - Int64UpDownCounter (replaces syncint64.UpDownCounter)\n// - Int64Histogram (replaces syncint64.Histogram)\n```\n\n----------------------------------------\n\nTITLE: Using stale_samples_over_time in VictoriaMetrics Syntax - plaintext\nDESCRIPTION: Shows the stale_samples_over_time rollup function, which counts staleness markers over a lookbehind window for each selected time series. Applied in VictoriaMetrics queries for monitoring sample freshness. Input is 'series_selector[d]'; output is the count of staleness markers, with metric names typically stripped.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_49\n\nLANGUAGE: plaintext\nCODE:\n```\n`stale_samples_over_time(series_selector[d])`\n```\n\n----------------------------------------\n\nTITLE: Moving Label Values in MetricsQL\nDESCRIPTION: A label manipulation function that renames labels by moving values from source labels (`src_label*`) to destination labels (`dst_label*`) for all time series returned by `q`. The source labels are effectively removed. If `src_label` is empty, `dst_label` is unchanged. Implicitly applies `default_rollup()` if `q` is a series selector.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_152\n\nLANGUAGE: metricsql\nCODE:\n```\nlabel_move(q, \"src_label1\", \"dst_label1\", ..., \"src_labelN\", \"dst_labelN\")\n```\n\n----------------------------------------\n\nTITLE: Including Markdown Content with Hugo Shortcode\nDESCRIPTION: This snippet employs the Hugo `content` shortcode to embed the full content of the specified 'README.md' file directly into this page. This allows for modular documentation where guide content is maintained separately but displayed within the site's structure.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/anomaly-detection/guides/_index.md#2025-04-22_snippet_0\n\nLANGUAGE: hugo\nCODE:\n```\n{{% content \"README.md\" %}}\n```\n\n----------------------------------------\n\nTITLE: Introducing Semantic Conventions v1.15.0 Package in Go\nDESCRIPTION: Adds the `go.opentelemetry.io/otel/semconv/v1.15.0` package. This package contains semantic conventions based on the `v1.15.0` version of the OpenTelemetry specification.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-22_snippet_13\n\nLANGUAGE: Go\nCODE:\n```\ngo.opentelemetry.io/otel/semconv/v1.15.0\n```\n\n----------------------------------------\n\nTITLE: Building S2 Command-Line Tool Binaries using Go Build\nDESCRIPTION: Builds the `s2c` and `s2d` command-line tool binaries in the current directory using `go build`. This is useful for creating local executables without global installation.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/klauspost/compress/s2/README.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ngo build github.com/klauspost/compress/s2/cmd/s2c && go build github.com/klauspost/compress/s2/cmd/s2d\n```\n\n----------------------------------------\n\nTITLE: Exponentiation e^v Calculation - PromQL - PromQL\nDESCRIPTION: This snippet documents exp(), which computes e to the power of each point in the time series returned by q. Metric names are stripped unless keep_metric_names is set. This function is directly available in PromQL. No extra dependencies required; inputs are expected to be numeric.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_99\n\nLANGUAGE: PromQL\nCODE:\n```\n`exp(q)`\n```\n\n----------------------------------------\n\nTITLE: Creating an Azure Storage Account with Azure CLI - Bash\nDESCRIPTION: This Bash snippet demonstrates how to create a new Azure Storage Account using the Azure CLI. It requires the Azure CLI to be installed and authenticated with an Azure subscription. The command parameters specify the storage account name, resource group, geographic location, and SKU type. The output is confirmation of account creation. The snippet is essential for provisioning Azure storage resources before interacting with them via SDKs.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\naz storage account create --name MyStorageAccount --resource-group MyResourceGroup --location westus --sku Standard_LRS\n```\n\n----------------------------------------\n\nTITLE: Excluding Logs with Specific Words\nDESCRIPTION: Examples of filtering out logs containing specific words using NOT logical filter with time constraints.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/logsql-examples.md#2025-04-22_snippet_2\n\nLANGUAGE: logsql\nCODE:\n```\n-INFO\n```\n\nLANGUAGE: logsql\nCODE:\n```\n-INFO _time:1h\n```\n\nLANGUAGE: logsql\nCODE:\n```\n-INFO error _time:1h\n```\n\nLANGUAGE: logsql\nCODE:\n```\n-INFO _time:1h | sort by (_time)\n```\n\n----------------------------------------\n\nTITLE: Performing Bitwise AND Operation in MetricsQL\nDESCRIPTION: A transform function that calculates the bitwise AND (`v & mask`) for every data point `v` in the time series returned by `q`, using the provided integer `mask`. If `q` is a series selector, `default_rollup()` is applied first. Metric names are stripped by default; use `keep_metric_names` to retain them.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_73\n\nLANGUAGE: MetricsQL\nCODE:\n```\n`bitmap_and(q, mask)`\n```\n\n----------------------------------------\n\nTITLE: Counting Samples Over Time in MetricsQL\nDESCRIPTION: The count_over_time function calculates the number of raw samples on a given lookbehind window for each time series. This function is supported by PromQL.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_26\n\nLANGUAGE: MetricsQL\nCODE:\n```\ncount_over_time(series_selector[d])\n```\n\n----------------------------------------\n\nTITLE: Uppercasing CORS Acronym in Go Source Files - YAML\nDESCRIPTION: This directive replaces all occurrences of 'Cors' with 'CORS' across Go source files to meet acronym casing standards for 'Cross-Origin Resource Sharing'. Applied during source file processing, it uses regex replacement and affects both code and comments where 'Cors' is used.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/internal/generated/autorest.md#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n  - from: source-file-go\n    where: $\n    transform: >-\n      return $.\n        replace(/Cors/g, \"CORS\");\n```\n\n----------------------------------------\n\nTITLE: Expected Output for VMAgent Pod Status Check (text)\nDESCRIPTION: This text block displays example output for the VMAgent pod status check. It shows the pod name, readiness status (e.g., 2/2 indicating VMAgent and a config-reloader sidecar), running status, restarts, and age.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/guides/getting-started-with-vm-operator/README.md#2025-04-22_snippet_15\n\nLANGUAGE: text\nCODE:\n```\nvmagent-example-vmagent-7996844b5f-b5rzs                 2/2     Running   0          9s\n```\n\n----------------------------------------\n\nTITLE: Reading from Nested Maps with Koanf in Go\nDESCRIPTION: This snippet demonstrates how to use the confmap provider in Koanf to load configuration from a nested map. It shows loading default values, then overriding with JSON and YAML configs.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/knadh/koanf/v2/README.md#2025-04-22_snippet_10\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\n\t\"github.com/knadh/koanf/v2\"\n\t\"github.com/knadh/koanf/providers/confmap\"\n\t\"github.com/knadh/koanf/providers/file\"\n\t\"github.com/knadh/koanf/parsers/json\"\n\t\"github.com/knadh/koanf/parsers/yaml\"\n)\n\n// Global koanf instance. Use \".\" as the key path delimiter. This can be \"/\" or any character.\nvar k = koanf.New(\".\")\n\nfunc main() {\n\t// Load default values using the confmap provider.\n\t// We provide a flat map with the \".\" delimiter.\n\t// A nested map can be loaded by setting the delimiter to an empty string \"\".\n\tk.Load(confmap.Provider(map[string]interface{}{\n\t\t\"parent1.name\": \"Default Name\",\n\t\t\"parent3.name\": \"New name here\",\n\t}, \".\"), nil)\n\n\t// Load JSON config on top of the default values.\n\tif err := k.Load(file.Provider(\"mock/mock.json\"), json.Parser()); err != nil {\n\t\tlog.Fatalf(\"error loading config: %v\", err)\n\t}\n\n\t// Load YAML config and merge into the previously loaded config (because we can).\n\tk.Load(file.Provider(\"mock/mock.yml\"), yaml.Parser())\n\n\tfmt.Println(\"parent's name is = \", k.String(\"parent1.name\"))\n\tfmt.Println(\"parent's ID is = \", k.Int(\"parent1.id\"))\n}\n```\n\n----------------------------------------\n\nTITLE: Running Docker Compose for VManomaly Integration\nDESCRIPTION: Command to start the Docker Compose setup for VManomaly integration with VictoriaMetrics and Grafana. This command runs the containers in detached mode.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/deployment/docker/vmanomaly/vmanomaly-integration/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Converting Time to GMT for HTTP Conditional Headers in Go - YAML\nDESCRIPTION: This transformation updates code that sets conditional HTTP headers (e.g., If-Modified-Since) by ensuring the times are formatted using GMT via .In(gmt).Format(time.RFC1123). Applies to multiple Go client files and uses chained regex replacements for each individual header assignment. Dependencies include the presence of the relevant access condition objects and a defined GMT location variable in the source context.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/internal/generated/autorest.md#2025-04-22_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n- from: \n  - zz_container_client.go\n  - zz_blob_client.go\n  - zz_appendblob_client.go\n  - zz_blockblob_client.go\n  - zz_pageblob_client.go\n  where: $\n  transform: >-\n    return $.\n      replace (/req\\.Raw\\(\\)\\.Header\\[\"If-Modified-Since\"\\]\\s+=\\s+\\[\\]string\\{modifiedAccessConditions\\.IfModifiedSince\\.Format\\(time\\.RFC1123\\)\\}/g, \n      `req.Raw().Header[\"If-Modified-Since\"] = []string{(*modifiedAccessConditions.IfModifiedSince).In(gmt).Format(time.RFC1123)}`).\n      replace (/req\\.Raw\\(\\)\\.Header\\[\"If-Unmodified-Since\"\\]\\s+=\\s+\\[\\]string\\{modifiedAccessConditions\\.IfUnmodifiedSince\\.Format\\(time\\.RFC1123\\)\\}/g, \n      `req.Raw().Header[\"If-Unmodified-Since\"] = []string{(*modifiedAccessConditions.IfUnmodifiedSince).In(gmt).Format(time.RFC1123)}`).\n      replace (/req\\.Raw\\(\\)\\.Header\\[\"x-ms-source-if-modified-since\"\\]\\s+=\\s+\\[\\]string\\{sourceModifiedAccessConditions\\.SourceIfModifiedSince\\.Format\\(time\\.RFC1123\\)\\}/g, \n      `req.Raw().Header[\"x-ms-source-if-modified-since\"] = []string{(*sourceModifiedAccessConditions.SourceIfModifiedSince).In(gmt).Format(time.RFC1123)}`).\n      replace (/req\\.Raw\\(\\)\\.Header\\[\"x-ms-source-if-unmodified-since\"\\]\\s+=\\s+\\[\\]string\\{sourceModifiedAccessConditions\\.SourceIfUnmodifiedSince\\.Format\\(time\\.RFC1123\\)\\}/g, \n      `req.Raw().Header[\"x-ms-source-if-unmodified-since\"] = []string{(*sourceModifiedAccessConditions.SourceIfUnmodifiedSince).In(gmt).Format(time.RFC1123)}`).\n      replace (/req\\.Raw\\(\\)\\.Header\\[\"x-ms-immutability-policy-until-date\"\\]\\s+=\\s+\\[\\]string\\{options\\.ImmutabilityPolicyExpiry\\.Format\\(time\\.RFC1123\\)\\}/g, \n      `req.Raw().Header[\"x-ms-immutability-policy-until-date\"] = []string{(*options.ImmutabilityPolicyExpiry).In(gmt).Format(time.RFC1123)}`);\n```\n\n----------------------------------------\n\nTITLE: Displaying PkgGoDev Badge for Trace API in Markdown\nDESCRIPTION: This code snippet shows how to embed a PkgGoDev badge in Markdown, linking to the Go package documentation for the Trace API. It uses an image link with alt text and a URL.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/go.opentelemetry.io/otel/trace/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![PkgGoDev](https://pkg.go.dev/badge/go.opentelemetry.io/otel/trace)](https://pkg.go.dev/go.opentelemetry.io/otel/trace)\n```\n\n----------------------------------------\n\nTITLE: Concurrent Stream Decompression Benchmarks\nDESCRIPTION: Markdown table displaying concurrent decompression performance across different CPU core counts, comparing S2 and Snappy implementations.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/klauspost/compress/s2/README.md#2025-04-22_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\n| Input                                     | `-cpu=1`   | `-cpu=2`   | `-cpu=4`   | `-cpu=8`   | `-cpu=16`   |\n|-------------------------------------------|------------|------------|------------|------------|-------------|\n| enwik10.snappy                            | 1098.6MB/s | 1819.8MB/s | 3625.6MB/s | 6910.6MB/s | 10818.2MB/s |\n```\n\n----------------------------------------\n\nTITLE: Declaring Standard Output Variable - Go\nDESCRIPTION: This variable declaration sets up Stdout as an io.Writer mapped to the system\\'s standard output stream. It enables both package functions and third-party code to override where standard output is written (for example, redirecting output to a file), by reassigning from the default os.Stdout. This pattern is commonly used to abstract output destinations in CLI applications.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/pkg/browser/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nvar Stdout io.Writer = os.Stdout\n```\n\n----------------------------------------\n\nTITLE: Using share_eq_over_time in VictoriaMetrics Syntax - plaintext\nDESCRIPTION: Demonstrates the use of the share_eq_over_time rollup function to calculate the portion of raw samples equal to a given value within a lookbehind window for each matching time series. Depends on VictoriaMetrics query language and the rollup function framework. Expects 'series_selector[d]' to select the input series and 'eq' is the equality value; outputs a share in [0, 1]. Metric names may be stripped unless keep_metric_names is applied.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_48\n\nLANGUAGE: plaintext\nCODE:\n```\n`share_eq_over_time(series_selector[d], eq)`\n```\n\n----------------------------------------\n\nTITLE: YAML Configuration Example - First File\nDESCRIPTION: Example YAML configuration showing array value\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/knadh/koanf/v2/README.md#2025-04-22_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nkey: [1,2,3]\n```\n\n----------------------------------------\n\nTITLE: Displaying PkgGoDev Badge for OpenTelemetry Go Metric Embedded Package\nDESCRIPTION: This markdown snippet displays a badge linking to the pkg.go.dev documentation for the go.opentelemetry.io/otel/metric/embedded package. It provides a quick way for users to access the package documentation.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/go.opentelemetry.io/otel/metric/embedded/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![PkgGoDev](https://pkg.go.dev/badge/go.opentelemetry.io/otel/metric/embedded)](https://pkg.go.dev/go.opentelemetry.io/otel/metric/embedded)\n```\n\n----------------------------------------\n\nTITLE: Calculating Hyperbolic Sine using sinh() in MetricsQL\nDESCRIPTION: The `sinh(q)` transform function calculates the hyperbolic sine for every data point in each time series returned by `q`. Metric names are stripped by default; add `keep_metric_names` to preserve them. This function is supported by MetricsQL.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_123\n\nLANGUAGE: MetricsQL\nCODE:\n```\nsinh(q)\n```\n\n----------------------------------------\n\nTITLE: Displaying PkgGoDev Badge for OpenTelemetry Metric Noop Package in Markdown\nDESCRIPTION: This code snippet uses Markdown syntax to display a badge from pkg.go.dev for the OpenTelemetry metric noop package. The badge provides a visual link to the package documentation.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/go.opentelemetry.io/otel/metric/noop/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![PkgGoDev](https://pkg.go.dev/badge/go.opentelemetry.io/otel/metric/noop)](https://pkg.go.dev/go.opentelemetry.io/otel/metric/noop)\n```\n\n----------------------------------------\n\nTITLE: Function Syntax: hoeffding_bound_upper\nDESCRIPTION: Function signature for calculating upper Hoeffding bound\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_35\n\nLANGUAGE: promql\nCODE:\n```\nhoeffding_bound_upper(phi, series_selector[d])\n```\n\n----------------------------------------\n\nTITLE: Exposing Consul Partition Label in vmagent\nDESCRIPTION: Details a feature addition in `vmagent` where it now exposes the `__meta_consul_partition` label for targets discovered via `consul_sd_configs`. This aligns its behavior with Prometheus 2.40.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/changelog/CHANGELOG_2022.md#2025-04-22_snippet_16\n\nLANGUAGE: plaintext\nCODE:\n```\n__meta_consul_partition\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS for Incoming HTTP Requests\nDESCRIPTION: Command-line flags for enabling HTTPS with TLS for VMAuth. These options configure the TLS certificate and key files for securing HTTP connections.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmauth.md#2025-04-22_snippet_46\n\nLANGUAGE: sh\nCODE:\n```\n  -tls\n     Whether to enable TLS for incoming HTTP requests at -httpListenAddr (aka https). -tlsCertFile and -tlsKeyFile must be set if -tls is set\n  -tlsCertFile string\n     Path to file with TLS certificate. Used only if -tls is set. Prefer ECDSA certs instead of RSA certs, since RSA certs are slow\n  -tlsKeyFile string\n     Path to file with TLS key. Used only if -tls is set\n```\n\n----------------------------------------\n\nTITLE: Alternative Label Notations in Prometheus Format\nDESCRIPTION: Shows different ways to write the same metric using explicit __name__ label and simplified notation.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/keyConcepts/keyConcepts.md#2025-04-22_snippet_1\n\nLANGUAGE: prometheus\nCODE:\n```\nrequests_total{path=\"/\", code=\"200\"}\n{__name__=\"requests_total\", path=\"/\", code=\"200\"}\n{\"requests_total\", path=\"/\", code=\"200\"}\n```\n\n----------------------------------------\n\nTITLE: SDK Configuration Code Example\nDESCRIPTION: Example of initializing OpenTelemetry SDK with new `AlwaysSampler` default configuration and renamed sampler types.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-22_snippet_55\n\nLANGUAGE: go\nCODE:\n```\n// Configure trace sampler\nconfig := sdktrace.Config{\n    DefaultSampler: sdktrace.AlwaysOnSampler(), // Renamed from AlwaysSampleSampler\n    // Use AlwaysOffSampler() for never sampling (renamed from NeverSampleSampler)\n}\n```\n\n----------------------------------------\n\nTITLE: Installing the gozstd Package using Go Get\nDESCRIPTION: Demonstrates how to install or update the `gozstd` Go package using the `go get` command with the `-u` flag for updating. This command downloads the source code and installs the package along with its dependencies.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/valyala/gozstd/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get -u github.com/valyala/gozstd\n```\n\n----------------------------------------\n\nTITLE: Implementing MSAL Service Error Type (`CallErr`) in Go\nDESCRIPTION: Defines the `CallErr` struct used in MSAL Go to represent errors originating from HTTP service calls. It embeds the `http.Request`, `http.Response`, and the underlying `error`. It implements the `error` interface via the `Error()` method and provides a `Verbose()` method for detailed debugging output, including request and response details (after clearing potentially large TLS info). Requires `net/http` and `fmt` packages.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/AzureAD/microsoft-authentication-library-for-go/apps/errors/error_design.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n```go\n// CallErr represents an HTTP call error. Has a Verbose() method that allows getting the\n// http.Request and Response objects. Implements error.\ntype CallErr struct {\n    Req  *http.Request\n    Resp *http.Response\n    Err  error\n}\n\n// Errors implements error.Error().\nfunc (e CallErr) Error() string {\n    return e.Err.Error()\n}\n\n// Verbose prints a versbose error message with the request or response.\nfunc (e CallErr) Verbose() string {\n    e.Resp.Request = nil // This brings in a bunch of TLS stuff we don't need\n    e.Resp.TLS = nil     // Same\n    return fmt.Sprintf(\"%s:\\nRequest:\\n%s\\nResponse:\\n%s\", e.Err, prettyConf.Sprint(e.Req), prettyConf.Sprint(e.Resp))\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Making Lease Duration Parameter Required in Swagger - YAML\nDESCRIPTION: This directive sets the required property of the 'LeaseDuration' parameter to true in the Swagger document, ensuring clients must provide this parameter in calls where relevant. It is used during the OpenAPI-to-SDK code generation process and only affects the document if the parameter node exists.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/internal/generated/autorest.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n- from: swagger-document\n  where: $.parameters.LeaseDuration\n  transform: >\n    $.required = true;\n```\n\n----------------------------------------\n\nTITLE: Applying Trigonometric Functions in MetricsQL\nDESCRIPTION: The sin(), cos(), tan() functions apply trigonometric operations to every point of every time series returned by the query. Metric names are stripped unless the keep_metric_names modifier is used.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_102\n\nLANGUAGE: metricsql\nCODE:\n```\nsin(q)\n```\n\nLANGUAGE: metricsql\nCODE:\n```\ncos(q)\n```\n\nLANGUAGE: metricsql\nCODE:\n```\ntan(q)\n```\n\n----------------------------------------\n\nTITLE: Calculating Hyperbolic Tangent using tanh() in MetricsQL\nDESCRIPTION: The `tanh(q)` transform function calculates the hyperbolic tangent for every data point in each time series returned by `q`. Metric names are stripped unless `keep_metric_names` is used. This function is available in MetricsQL.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_125\n\nLANGUAGE: MetricsQL\nCODE:\n```\ntanh(q)\n```\n\n----------------------------------------\n\nTITLE: Downloading Benchmark Log Data using Shell Script\nDESCRIPTION: This shell command sequence navigates into the `source_logs` directory and executes the `download.sh` script. This script is responsible for downloading and unarchiving the necessary log files from external sources, which will be used as input for the log generator in the benchmark setup. Sufficient disk space (around 49GB) is required.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/deployment/logs-benchmark/readme.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n```shell\ncd source_logs \nbash download.sh\n```\n```\n\n----------------------------------------\n\nTITLE: Alerting Rule for Dropped Logs in VictoriaLogs\nDESCRIPTION: MetricsQL query for setting up an alerting rule to detect when logs with wrong timestamps are being ingested into VictoriaLogs. This rule monitors the rate of dropped rows over a 5-minute period.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/README.md#2025-04-22_snippet_3\n\nLANGUAGE: metricsql\nCODE:\n```\nrate(vl_rows_dropped_total[5m]) > 0\n```\n\n----------------------------------------\n\nTITLE: HTTP Propagator Configuration\nDESCRIPTION: Example demonstrating the new HTTP propagator interfaces for context propagation\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-22_snippet_57\n\nLANGUAGE: go\nCODE:\n```\npropagator := propagation.New(\n    propagation.WithInjectors(injectors...),\n    propagation.WithExtractors(extractors...)\n)\nctx = propagation.ExtractHTTP(ctx, propagator, req.Header)\npropagation.InjectHTTP(ctx, propagator, req.Header)\n```\n\n----------------------------------------\n\nTITLE: Listing Tenants with Data in a Time Range\nDESCRIPTION: This administrative URL endpoint on `vmselect` lists tenants (`accountID`s) that have ingested data within a specified time range. The `start` and `end` query parameters define the range (optional; omitting them returns all tenants with any stored data).\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/Cluster-VictoriaMetrics.md#2025-04-22_snippet_19\n\nLANGUAGE: url\nCODE:\n```\nhttp://<vmselect>:8481/admin/tenants?start=...&end=...\n```\n\n----------------------------------------\n\nTITLE: Defining decreases_over_time in MetricsQL - Markdown\nDESCRIPTION: Documents decreases_over_time, which quantifies how many times raw sample values decrease within a specified lookbehind window. Focuses on its windowed analysis, handling of metric names, and linkage to function increases_over_time. Intended audience includes query authors working with VictoriaMetrics telemetry.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/MetricsQL.md#2025-04-22_snippet_16\n\nLANGUAGE: Markdown\nCODE:\n```\n#### decreases_over_time\n\n`decreases_over_time(series_selector[d])` is a [rollup function](#rollup-functions), which calculates the number of [raw sample](https://docs.victoriametrics.com/keyconcepts/#raw-samples)\nvalue decreases over the given lookbehind window `d` per each time series returned from the given [series_selector](https://docs.victoriametrics.com/keyconcepts/#filtering).\n\nMetric names are stripped from the resulting rollups. Add [keep_metric_names](#keep_metric_names) modifier in order to keep metric names.\n\nSee also [increases_over_time](#increases_over_time).\n\n```\n\n----------------------------------------\n\nTITLE: Constructing a Blob Client with No Credential (Anonymous/SAS) - azblob - Go\nDESCRIPTION: Illustrates how to instantiate an azblob client for anonymous access or using a Shared Access Signature (SAS), utilizing the NewClientWithNoCredential constructor. This replaces the old pattern of using NewAnonymousCredential. Dependencies: github.com/Azure/azure-sdk-for-go/sdk/storage/azblob. Parameters: public blob or SAS URL, optional client options. Inputs: URL string; Output: azblob client or error. Only accessible for public blobs or SAS-authenticated blobs.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/migrationguide.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// new code\nclient, err := azblob.NewClientWithNoCredential(\"<public blob or blob with SAS URL>\", nil)\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Enterprise Remote\nDESCRIPTION: Command to add enterprise remote repository to git configuration\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/Release-Guide.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit remote add enterprise <url>\n```\n\n----------------------------------------\n\nTITLE: Introducing Semantic Conventions v1.17.0 Package in Go\nDESCRIPTION: Adds the `go.opentelemetry.io/otel/semconv/v1.17.0` package. This package contains semantic conventions based on the `v1.17.0` version of the OpenTelemetry specification.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-22_snippet_18\n\nLANGUAGE: Go\nCODE:\n```\ngo.opentelemetry.io/otel/semconv/v1.17.0\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Client Certificate using azidentity in Go\nDESCRIPTION: This Go code demonstrates client certificate authentication using the `azidentity` library. It reads the certificate data, parses it using `azidentity.ParseCertificates`, creates a `ClientCertificateCredential` with the tenant ID, client ID, parsed certificates, and private key, and then passes this credential directly to a new Azure SDK client.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/Azure/azure-sdk-for-go/sdk/azidentity/MIGRATION.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"os\"\n\n    \"github.com/Azure/azure-sdk-for-go/sdk/azidentity\"\n    \"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/resources/armsubscriptions\"\n)\n\ncertData, err := os.ReadFile(\"./example.pfx\")\nhandle(err)\n\ncerts, key, err := azidentity.ParseCertificates(certData, nil)\nhandle(err)\n\ncred, err = azidentity.NewClientCertificateCredential(tenantID, clientID, certs, key, nil)\nhandle(err)\n\nclient, err := armsubscriptions.NewClient(cred, nil)\nhandle(err)\n```\n\n----------------------------------------\n\nTITLE: Handling Offset Exceeding Series Count in limit_offset\nDESCRIPTION: Mentions a bugfix for the `limit_offset` MetricsQL function. It now correctly returns an empty result if the provided `offset` argument is larger than the number of input time series.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/changelog/CHANGELOG_2022.md#2025-04-22_snippet_15\n\nLANGUAGE: metricsql\nCODE:\n```\nlimit_offset\n```\n\n----------------------------------------\n\nTITLE: Result of Implicit Subquery Conversion (MetricsQL)\nDESCRIPTION: Shows the explicit form `delta(sum(default_rollup(m))[1i:1i])` after VictoriaMetrics implicitly converts `delta(sum(m))`. This conversion wraps the inner argument with `default_rollup` and adds default subquery parameters `[1i:1i]`, making it an explicit subquery.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_152\n\nLANGUAGE: MetricsQL\nCODE:\n```\ndelta(sum(default_rollup(m))[1i:1i])\n```\n\n----------------------------------------\n\nTITLE: Unpacking Specific JSON Fields using LogSQL\nDESCRIPTION: This LogSQL query selects logs from the last 5 minutes (`_time:5m`) and unpacks only the `foo` and `bar` fields from the JSON structure stored in the `my_json` field. Other fields within the JSON are ignored. The `fields (...)` clause specifies which fields to extract.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_151\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m | unpack_json from my_json fields (foo, bar)\n```\n\n----------------------------------------\n\nTITLE: Running Benchmark Tests in Go\nDESCRIPTION: This Bash script executes performance tests for Go code to generate benchmarking statistics. It uses 'go test' to run benchmarks with various CPU configurations and outputs results to files via 'tee'. Dependencies include Go 1.19.3 or higher.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/puzpuzpuz/xsync/v3/BENCHMARKS.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ go test -run='^$' -cpu=1,2,4,8,16,32,64 -bench . -count=30 -timeout=0 | tee bench.txt\\n$ benchstat bench.txt | tee benchstat.txt\\n\n```\n\n----------------------------------------\n\nTITLE: Predefined Dashboard Configuration\nDESCRIPTION: Example JSON configuration for predefined dashboards showing resource usage metrics.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/README.md#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"title\": \"Example\",\n  \"rows\": [\n    {\n      \"title\": \"Per-job resource usage\",\n      \"panels\": [\n        {\n          \"title\": \"Per-job CPU usage\",\n          \"width\": 6,\n          \"expr\": [\n            \"sum(rate(process_cpu_seconds_total)) by (job)\"\n          ]\n        },\n        {\n          \"title\": \"Per-job RSS usage\",\n          \"width\": 6,\n          \"expr\": [\n            \"sum(process_resident_memory_bytes) by (job)\"\n          ]\n        },\n        {\n          \"title\": \"Per-job disk read\",\n          \"width\": 6,\n          \"expr\": [\n            \"sum(rate(process_io_storage_read_bytes_total)) by (job)\"\n          ]\n        },\n        {\n          \"title\": \"Per-job disk write\",\n          \"width\": 6,\n          \"expr\": [\n            \"sum(rate(process_io_storage_written_bytes_total)) by (job)\"\n          ]\n        }\n      ]\n    },\n    {\n      \"title\": \"Free/used disk space\",\n      \"panels\": [\n        {\n          \"unit\": \"MB\",\n          \"expr\": [\n            \"sum(vm_data_size_bytes{type!=\\\"indexdb\\\"}) / 1024 / 1024\",\n            \"vm_free_disk_space_bytes / 1024 / 1024\"\n          ],\n          \"alias\": [\n            \"usage space\",\n            \"free space\"\n          ]\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Multitenancy Elasticsearch Output Configuration\nDESCRIPTION: Configuration showing how to specify custom tenant IDs for log storage using custom headers in the Elasticsearch output.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/data-ingestion/Logstash.md#2025-04-22_snippet_4\n\nLANGUAGE: logstash\nCODE:\n```\noutput {\n  elasticsearch {\n    hosts => [\"http://localhost:9428/insert/elasticsearch/\"]\n    custom_headers => {\n        \"AccountID\" => \"1\"\n        \"ProjectID\" => \"2\"\n    }\n    parameters => {\n        \"_msg_field\" => \"message\"\n        \"_time_field\" => \"@timestamp\"\n        \"_stream_fields\" => \"host.hostname,process.name\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Port-Forwarding Grafana Service for Local Access - kubectl - Shell\nDESCRIPTION: This command port-forwards Grafana's service (vm-grafana) on port 80 in the monitoring namespace to local port 3000, enabling browser access to the web UI via localhost. It depends on kubectl, proper access rights, and an existing Grafana service. Input parameters are the namespace, service name, and port mapping; output is a locally accessible Grafana dashboard at http://localhost:3000.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics-cloud/how-to-monitor-k8s.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nkubectl --namespace monitoring port-forward service/vm-grafana 3000:80\n\n```\n\n----------------------------------------\n\nTITLE: Replacing Label Values via Regex in MetricsQL\nDESCRIPTION: A label manipulation function that matches a `regex` against the value of `src_label`. If it matches, it creates or overwrites `dst_label` with the `replacement` string, substituting regex captures (`$1`, `$2`, etc.). Example: `label_replace(up{job=\"node-exporter\"}, \"foo\", \"bar-$1\", \"job\", \"node-(.+)\")` sets `foo` to `bar-exporter`. Supported by PromQL. Implicitly applies `default_rollup()` if `q` is a series selector.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_153\n\nLANGUAGE: metricsql\nCODE:\n```\nlabel_replace(q, \"dst_label\", \"replacement\", \"src_label\", \"regex\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Telegraf Elasticsearch Output for VictoriaLogs\nDESCRIPTION: Configuration snippet for Telegraf using Elasticsearch output to send logs to VictoriaLogs. Includes both output and input configuration with custom headers for message field, time field, and stream fields specification.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/data-ingestion/Telegraf.md#2025-04-22_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[[outputs.elasticsearch]]\n  urls = [\"http://localhost:9428/insert/elasticsearch\"]\n  timeout = \"1m\"\n  flush_interval = \"30s\"\n  enable_sniffer = false\n  health_check_interval = \"0s\"\n  index_name = \"device_log-%Y.%m.%d\"\n  manage_template = false\n  template_name = \"telegraf\"\n  overwrite_template = false\n  namepass = [\"tail\"]\n  [outputs.elasticsearch.headers]\n    \"VL-Msg-Field\" = \"tail.value\"\n    \"VL-Time-Field\" = \"@timestamp\"\n    \"VL-Stream-Fields\" = \"tag.log_source,tag.metric_type\"\n\n[[inputs.tail]]\n  files = [\"/tmp/telegraf.log\"]\n  from_beginning = false\n  interval = \"10s\"\n  pipe = false\n  watch_method = \"inotify\"\n  data_format = \"value\"\n  data_type = \"string\"\n  character_encoding = \"utf-8\"\n  [inputs.tail.tags]\n     metric_type = \"logs\"\n     log_source = \"telegraf\"\n```\n\n----------------------------------------\n\nTITLE: Displaying OpenTelemetry Propagation Package Badge in Markdown\nDESCRIPTION: This snippet shows how to create a Markdown badge that links to the Go documentation for the OpenTelemetry propagation package. It uses the pkg.go.dev badge service to show the package status.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/go.opentelemetry.io/otel/propagation/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Propagation\n\n[![PkgGoDev](https://pkg.go.dev/badge/go.opentelemetry.io/otel/propagation)](https://pkg.go.dev/go.opentelemetry.io/otel/propagation)\n```\n\n----------------------------------------\n\nTITLE: Benchmarking with GOMAXPROCS=2 in Go\nDESCRIPTION: Executes benchmark tests for the fastrand package using GOMAXPROCS set to 2, evaluating dual-threaded performance. Focuses on variations in operation times as the capacity for concurrent processing is doubled.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/valyala/fastrand/README.md#2025-04-22_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n$ GOMAXPROCS=2 go test -bench=. github.com/valyala/fastrand\\ngoos: linux\\ngoarch: amd64\\npkg: github.com/valyala/fastrand\\nBenchmarkUint32n-2                     \\t100000000\\t        17.6 ns/op\\nBenchmarkRNGUint32n-2                  \\t500000000\\t         3.36 ns/op\\nBenchmarkRNGUint32nWithLock-2          \\t50000000\\t        32.0 ns/op\\nBenchmarkMathRandInt31n-2              \\t20000000\\t        51.2 ns/op\\nBenchmarkMathRandRNGInt31n-2           \\t100000000\\t        11.0 ns/op\\nBenchmarkMathRandRNGInt31nWithLock-2   \\t20000000\\t        91.0 ns/op\\nPASS\\nok   \\tgithub.com/valyala/fastrand\\t9.543s\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter Configuration\nDESCRIPTION: YAML configuration block defining metadata for the changelog page including weight, title, search settings and menu structure.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/changelog/CHANGELOG_2020.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nweight: 7\ntitle: Year 2020\nsearch:\n  weight: 0.1\nmenu:\n  docs:\n    identifier: vm-changelog-2020\n    parent: vm-changelog\n    weight: 7\naliases:\n- /CHANGELOG_2020.html\n- /changelog_2020\n- /changelog/changelog_2020/index.html\n- /changelog/changelog_2020/\n```\n\n----------------------------------------\n\nTITLE: Calculating Min/Max/Avg Rollups in MetricsQL\nDESCRIPTION: Calculates the minimum, maximum, and average values for raw samples within a specified lookbehind window `d` for each selected time series. Results are returned with additional `rollup=\\\"min\\\"`, `rollup=\\\"max\\\"`, and `rollup=\\\"avg\\\"` labels. An optional second argument (\\\"min\\\", \\\"max\\\", or \\\"avg\\\") can select a single result and omit the label. Typically used with gauges.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_54\n\nLANGUAGE: metricsql\nCODE:\n```\nrollup(series_selector[d])\n```\n\n----------------------------------------\n\nTITLE: Installing go-colorable Dependency (Shell)\nDESCRIPTION: This shell command uses the 'go get' tool to download and install the go-colorable library from GitHub. It must be run in a terminal where Go is set up, and it adds the go-colorable package to the current module's dependencies, making it available for import and use in Go source code. No parameters are needed. The output is an updated local Go module configuration.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/mattn/go-colorable/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ go get github.com/mattn/go-colorable\n```\n\n----------------------------------------\n\nTITLE: Compressed Data Transfer Configuration\nDESCRIPTION: Configuration with compression enabled to reduce network bandwidth usage when sending logs across datacenters.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/data-ingestion/Filebeat.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\noutput.elasticsearch:\n  hosts: [\"http://localhost:9428/insert/elasticsearch/\"]\n  parameters:\n    _msg_field: \"message\"\n    _time_field: \"@timestamp\"\n    _stream_fields: \"host.name,log.file.path\"\n  compression_level: 1\n```\n\n----------------------------------------\n\nTITLE: Removing Default Port Addition for vmagent Scrape URLs (Behavior)\nDESCRIPTION: Modifies the behavior of `vmagent` and single-node VictoriaMetrics. They will no longer automatically append default ports (80 for http, 443 for https) to scrape URLs that lack an explicit port. The `instance` label will retain the port for backward compatibility.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/changelog/CHANGELOG_2024.md#2025-04-22_snippet_7\n\nLANGUAGE: text\nCODE:\n```\n# Behavior change: URLs like 'http://example.com/metrics' are scraped as is.\n# Previously might have been treated as 'http://example.com:80/metrics'.\n# The 'instance' label derived will still typically include the port (e.g., 'example.com:80').\n```\n\n----------------------------------------\n\nTITLE: Querying Log Count via vlselect\nDESCRIPTION: Command to query the total number of logs stored in the VictoriaLogs cluster using the vlselect node.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/cluster.md#2025-04-22_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\ncurl http://localhost:9471/select/logsql/query -d 'query=* | count()'\n```\n\n----------------------------------------\n\nTITLE: Count Non-Equal Values Over Time in PromQL\nDESCRIPTION: Calculates the number of raw samples in a lookbehind window that aren't equal to a specific value. Applied to time series data, typically used with gauges.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_29\n\nLANGUAGE: promql\nCODE:\n```\ncount_ne_over_time(series_selector[d], ne)\n```\n\n----------------------------------------\n\nTITLE: Defining JWT Claims Interface in golang-jwt/jwt (Go)\nDESCRIPTION: This Go code snippet defines the core Claims interface for use with the golang-jwt/jwt library v5 and later. The interface replaces prior validation-focused methods with strongly-typed getters for each claim, supporting extensibility and improved semantics. Requires Go and the github.com/golang-jwt/jwt/v5 package; implementers should provide concrete logic for all getters to support JWT field access and validation.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/golang-jwt/jwt/v5/MIGRATION_GUIDE.md#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\ntype Claims interface {\n\tGetExpirationTime() (*NumericDate, error)\n\tGetIssuedAt() (*NumericDate, error)\n\tGetNotBefore() (*NumericDate, error)\n\tGetIssuer() (string, error)\n\tGetSubject() (string, error)\n\tGetAudience() (ClaimStrings, error)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Hugo Front Matter for VictoriaMetrics 2025 Changelog\nDESCRIPTION: YAML front matter configuration for Hugo documentation page. Sets up the page title, weight, search parameters, menu structure and URL aliases for the 2025 changelog documentation.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/changelog/CHANGELOG_2025.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nweight: 2\ntitle: Year 2025\nsearch:\n  weight: 0.1\nmenu:\n  docs:\n    identifier: vm-changelog-2025\n    parent: vm-changelog\n    weight: 2\naliases:\n  - /CHANGELOG_2025.html\n  - /changelog_2025\n  - /changelog/changelog_2025/index.html\n  - /changelog/changelog_2025/\n```\n\n----------------------------------------\n\nTITLE: Defining Config Interface and DiscovererOptions Struct in Go\nDESCRIPTION: This snippet defines the Config interface for implementing a service discovery mechanism in Prometheus. It also includes the DiscovererOptions struct used for creating a new Discoverer.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/prometheus/prometheus/discovery/README.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ntype Config interface {\n\t// Name returns the name of the discovery mechanism.\n\tName() string\n\n\t// NewDiscoverer returns a Discoverer for the Config\n\t// with the given DiscovererOptions.\n\tNewDiscoverer(DiscovererOptions) (Discoverer, error)\n}\n\ntype DiscovererOptions struct {\n\tLogger *slog.Logger\n\n\t// A registerer for the Discoverer's metrics.\n\tRegisterer prometheus.Registerer\n\t\n\tHTTPClientOptions []config.HTTPClientOption\n}\n```\n\n----------------------------------------\n\nTITLE: Example Azure Identity Authentication Error Response\nDESCRIPTION: This shows a sample JSON error response returned by Microsoft Entra ID when `ClientSecretCredential` authentication fails due to an invalid client secret (AADSTS7000215). It includes key details like the error description, trace ID, correlation ID, and timestamp, which are useful for debugging authentication failures.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/Azure/azure-sdk-for-go/sdk/azidentity/TROUBLESHOOTING.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nClientSecretCredential authentication failed\nPOST https://login.microsoftonline.com/3c631bb7-a9f7-4343-a5ba-a615913/oauth2/v2.0/token\n--------------------------------------------------------------------------------\nRESPONSE 401 Unauthorized\n--------------------------------------------------------------------------------\n{\n  \"error\": \"invalid_client\",\n  \"error_description\": \"AADSTS7000215: Invalid client secret provided. Ensure the secret being sent in the request is the client secret value, not the client secret ID, for a secret added to app '86be4c01-505b-45e9-bfc0-9b825fd84'.\\r\\nTrace ID: 03da4b8e-5ffe-48ca-9754-aff4276f0100\\r\\nCorrelation ID: 7b12f9bb-2eef-42e3-ad75-eee69ec9088d\\r\\nTimestamp: 2022-03-02 18:25:26Z\",\n  \"error_codes\": [\n    7000215\n  ],\n  \"timestamp\": \"2022-03-02 18:25:26Z\",\n  \"trace_id\": \"03da4b8e-5ffe-48ca-9754-aff4276f0100\",\n  \"correlation_id\": \"7b12f9bb-2eef-42e3-ad75-eee69ec9088d\",\n  \"error_uri\": \"https://login.microsoftonline.com/error?code=7000215\"\n}\n--------------------------------------------------------------------------------\n```\n\n----------------------------------------\n\nTITLE: Deprecating `external_labels` in vmalert-tool Test Files (Configuration)\nDESCRIPTION: The `external_labels` field within vmalert-tool test files is scheduled for deprecation. Users should migrate to using the `-external.label` command-line flag for consistency with vmalert configuration.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/changelog/CHANGELOG_2024.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# Example context within a vmalert-tool test file\nexternal_labels:\n  key: value # This field will be deprecated\n```\n\n----------------------------------------\n\nTITLE: Skipping Initial Uncompressed Bytes in Go\nDESCRIPTION: Demonstrates using the `dec.Skip()` method on an s2 reader to discard a specific number of initial uncompressed bytes. This step is required after seeking to a `compressedOffset` to align the reader precisely at the `wantOffset` within the uncompressed data stream.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/klauspost/compress/s2/README.md#2025-04-22_snippet_22\n\nLANGUAGE: go\nCODE:\n```\n\terr = dec.Skip(wantOffset - uncompressedOffset)\n```\n\n----------------------------------------\n\nTITLE: Applying Global Relabeling Configuration in vmsingle (Bash)\nDESCRIPTION: Refers to the `-relabelConfig` command-line flag used in `vmsingle`. This flag specifies a file containing global relabeling rules. A bug fix in v1.113.0 ensures these rules are correctly applied to metrics scraped using the `-promscrape.config` flag.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/changelog/CHANGELOG.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n-relabelConfig\n```\n\n----------------------------------------\n\nTITLE: Version Update Note in Release v1.102.15\nDESCRIPTION: Important update note regarding IPv6 address escaping changes in Kubernetes service discovery for vmsingle and vmagent components.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/changelog/CHANGELOG.md#2025-04-22_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n**Update note 1: [vmsingle](https://docs.victoriametrics.com/single-server-victoriametrics/) and [vmagent](https://docs.victoriametrics.com/vmagent/) include a fix which enforces IPv6 addresses escaping for containers discovered with [Kubernetes service-discovery](https://docs.victoriametrics.com/sd_configs/#kubernetes_sd_configs) and `role: pod` which do not have exposed ports defined. This means that `address` for these containers will always be wrapped in square brackets, this might affect some relabeling rules which were relying on previous behaviour.**\n```\n\n----------------------------------------\n\nTITLE: Single Query Configuration for Alert Metrics in VictoriaMetrics Anomaly Detection\nDESCRIPTION: Example of a configuration with a single query that aggregates all alert states (pending and firing) in VictoriaMetrics Anomaly Detection. This approach may encounter issues with large query results.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/anomaly-detection/FAQ.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nreader:\n  # other reader args\n  queries:\n    sum_alerts:\n      expr: 'sum(ALERTS{alertstate=~\\'(pending|firing)\\'}) by (alertstate)'\nmodels:\n    prophet:\n      # other model args\n      queries: [\n        'sum_alerts',\n      ]\n# other config sections\n```\n\n----------------------------------------\n\nTITLE: Registering a Feature Gate in Go\nDESCRIPTION: Shows how to register a feature gate using `featuregate.GlobalRegistry().MustRegister` in Go. It demonstrates setting the gate's unique identifier, stability stage, description, reference URL, and applicable version range. Registration typically occurs within an `init()` function.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/go.opentelemetry.io/collector/featuregate/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n```go\nvar myFeatureGate = featuregate.GlobalRegistry().MustRegister(\n\t\"namespaced.uniqueIdentifier\",\n\tfeaturegate.Stable,\n    featuregate.WithRegisterFromVersion(\"v0.65.0\")\n\tfeaturegate.WithRegisterDescription(\"A brief description of what the gate controls\"),\n\tfeaturegate.WithRegisterReferenceURL(\"https://github.com/open-telemetry/opentelemetry-collector/issues/6167\"),\n\tfeaturegate.WithRegisterToVersion(\"v0.70.0\"))\n```\n```\n\n----------------------------------------\n\nTITLE: Unmarshalling Data with encoding/json in Go\nDESCRIPTION: This snippet uses the encoding/json standard package to convert JSON-formatted input data into a Go data structure, demonstrating the traditional unmarshalling process in Go. It highlights the API used before adopting json-iterator. The snippet requires only the Go standard library. Inputs are the JSON byte slice input and a pointer to the target data structure \\u0026data.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/json-iterator/go/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nimport \\\"encoding/json\\\"\\njson.Unmarshal(input, \\u0026data)\n```\n\n----------------------------------------\n\nTITLE: Defining State Function Type in Go for State Machines\nDESCRIPTION: This snippet defines the Go type `stateFn`. It represents a function that takes no arguments and returns another function of the same type (`stateFn`) representing the next state, and an error. This type signature is the core building block for the state machine pattern used in the custom JSON marshalling/unmarshalling logic, as described in the 'State Machines' section.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/AzureAD/microsoft-authentication-library-for-go/apps/internal/json/design.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype stateFn func() (stateFn, error)\n```\n\n----------------------------------------\n\nTITLE: Creating Restore Mark via CLI (Relative Path) (Shell)\nDESCRIPTION: Second step in the CLI restore workflow: using `vmbackupmanager restore create` with a relative backup path ('daily/2023-04-07') to create a restore mark. This assumes the backup exists in the currently configured remote storage.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmbackupmanager.md#2025-04-22_snippet_20\n\nLANGUAGE: sh\nCODE:\n```\n$ /vmbackupmanager-prod restore create daily/2023-04-07\n\n```\n\n----------------------------------------\n\nTITLE: Using tfirst_over_time in VictoriaMetrics Syntax - plaintext\nDESCRIPTION: Shows tfirst_over_time, returning the timestamp of the first raw sample in the window per series. Relies on VictoriaMetrics rollup functions and behaves like an aggregation function. Expects a valid series selector as input; outputs a timestamp, metric names excluded unless modified.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_59\n\nLANGUAGE: plaintext\nCODE:\n```\n`tfirst_over_time(series_selector[d])`\n```\n\n----------------------------------------\n\nTITLE: Disabling Remote Write Path Appending in vmalert (Shell)\nDESCRIPTION: Added in v1.64.1, the `-remoteWrite.disablePathAppend` command-line flag for vmalert prevents the default `/api/v1/write` path from being appended to the URL specified by `-remoteWrite.url`. This allows specifying a complete, custom remote write endpoint URL.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/changelog/CHANGELOG_2021.md#2025-04-22_snippet_17\n\nLANGUAGE: Shell\nCODE:\n```\n-remoteWrite.disablePathAppend\n```\n\n----------------------------------------\n\nTITLE: Per-Query Configuration Example for VmReader\nDESCRIPTION: An example of setting up multiple queries in VmReader with specific parameters for each query. Demonstrates the flexibility in defining expressions, step sizes, data ranges, maximum points per query, timezone adjustments, and tenant IDs to optimize the anomaly detection process.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/anomaly-detection/components/reader.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nreader:\n  class: 'vm'\n  sampling_period: '1m'\n  max_points_per_query: 10000\n  data_range: [0, 'inf']\n  tenant_id: 'multitenant'\n  # other reader params ...\n  queries:\n    ingestion_rate_t1:\n      expr: 'sum(rate(vm_rows_inserted_total[5m])) by (type) > 0'\n      step: '2m'  # overrides global `sampling_period` of 1m\n      data_range: [10, 'inf']  # meaning only positive values > 10 are expected, i.e. a value `y` < 10 will trigger anomaly score > 1\n      max_points_per_query: 5000 # overrides reader-level value of 10000 for `ingestion_rate` query\n      tz: 'America/New_York'  # to override reader-wise `tz`\n      tenant_id: '1:0'  # overriding tenant_id to isolate data\n    ingestion_rate_t2:\n      expr: 'sum(rate(vm_rows_inserted_total[5m])) by (type) > 0'\n      step: '2m'  # overrides global `sampling_period` of 1m\n      data_range: [10, 'inf']  # meaning only positive values > 10 are expected, i.e. a value `y` < 10 will trigger anomaly score > 1\n      max_points_per_query: 5000 # overrides reader-level value of 10000 for `ingestion_rate` query\n      tz: 'America/New_York'  # to override reader-wise `tz`\n      tenant_id: '2:0'  # overriding tenant_id to isolate data\n```\n\n----------------------------------------\n\nTITLE: Installing Required MacOS Utilities\nDESCRIPTION: Commands for installing and configuring necessary GNU utilities on MacOS including coreutils and gnu-tar, and setting up the PATH\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/Release-Guide.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nbrew install coreutils\nbrew install gnu-tar\nexport PATH=\"/usr/local/opt/coreutils/libexec/gnubin:$PATH\"\n```\n\n----------------------------------------\n\nTITLE: Using stdvar_over_time in VictoriaMetrics Syntax - plaintext\nDESCRIPTION: Demonstrates stdvar_over_time, which calculates sample variance within a lookbehind window for each returned series. Supported by both VictoriaMetrics and PromQL. Input is 'series_selector[d]'; the result is the computed variance. Metric names are removed unless the keep_metric_names modifier is present.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_51\n\nLANGUAGE: plaintext\nCODE:\n```\n`stdvar_over_time(series_selector[d])`\n```\n\n----------------------------------------\n\nTITLE: Calculating Z-score over time in MetricsQL\nDESCRIPTION: A rollup function that computes the Z-score for raw samples within a specified lookbehind window `d` for each time series matched by `series_selector`. Metric names are removed unless the `keep_metric_names` modifier is used. This function is typically applied to gauge metrics.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_64\n\nLANGUAGE: MetricsQL\nCODE:\n```\n`zscore_over_time(series_selector[d])`\n```\n\n----------------------------------------\n\nTITLE: Using duration_over_time Rollup Function in VictoriaMetrics\nDESCRIPTION: This function returns the duration in seconds when time series were present over the lookbehind window. Intervals between samples that exceed max_interval are considered gaps and aren't counted. Metric names are stripped unless keep_metric_names is added.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_20\n\nLANGUAGE: markdown\nCODE:\n```\nduration_over_time(series_selector[d], max_interval)\n```\n\n----------------------------------------\n\nTITLE: Representing Min/Max Metric Values with Extrema Type in Go SDK\nDESCRIPTION: Adds the `Extrema` type to the `go.opentelemetry.io/otel/sdk/metric/metricdata` package. This type is used within `HistogramDataPoint`'s `Min` and `Max` fields to represent minimum and maximum values while distinctly handling unset versus zero values, replacing the previous `*float64` representation.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-22_snippet_17\n\nLANGUAGE: Go\nCODE:\n```\ngo.opentelemetry.io/otel/sdk/metric/metricdata\n// Type: Extrema\n```\n\n----------------------------------------\n\nTITLE: Stopping Docker Compose Environment\nDESCRIPTION: Commands to stop and clean up the Docker compose environment\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/deployment/docker/victorialogs/fluentbit/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose down\ndocker compose rm -f\n```\n\n----------------------------------------\n\nTITLE: Defining xxHash Core Functions in Go\nDESCRIPTION: Provides the Go function signatures for calculating the XXH64 hash directly from byte slices (`Sum64`) or strings (`Sum64String`), and for creating a new `Digest` object (`New`) for incremental hashing. These are the primary entry points for using the xxhash library.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/cespare/xxhash/v2/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc Sum64(b []byte) uint64\nfunc Sum64String(s string) uint64\ntype Digest struct{ ... }\n    func New() *Digest\n```\n\n----------------------------------------\n\nTITLE: Initializing blockdevice Sub-package for Disk Stats in Go\nDESCRIPTION: This Go code demonstrates initializing the `blockdevice` sub-package of `procfs`, which requires access to both `/proc` and `/sys`. It uses `blockdevice.NewFS` to create a filesystem handle and then calls `ProcDiskstats()` to retrieve disk statistics. Requires the `github.com/prometheus/procfs/blockdevice` package.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/prometheus/procfs/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n```go\n    fs, err := blockdevice.NewFS(\"/proc\", \"/sys\")\n    stats, err := fs.ProcDiskstats()\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring VictoriaMetrics Command Line Flags\nDESCRIPTION: Comprehensive list of command line flags for configuring VictoriaMetrics instance including logging, memory, metrics, TLS, authentication, and backup settings. Each flag includes detailed explanation of its purpose and default values where applicable.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmbackupmanager.md#2025-04-22_snippet_31\n\nLANGUAGE: config\nCODE:\n```\n-loggerMaxArgLen\n-loggerOutput string\n-loggerTimezone string\n-loggerWarnsPerSecondLimit int\n-maxBytesPerSecond int\n-memory.allowedBytes size\n-memory.allowedPercent float\n-metrics.exposeMetadata\n-metricsAuthKey value\n-mtls array\n-mtlsCAFile array\n-pprofAuthKey value\n-pushmetrics.disableCompression\n-pushmetrics.extraLabel array\n-pushmetrics.header array\n-pushmetrics.interval duration\n-pushmetrics.url array\n-runOnStart\n-s3ForcePathStyle\n-s3StorageClass string\n-s3TLSInsecureSkipVerify\n-snapshot.createURL string\n-snapshot.deleteURL string\n-storageDataPath string\n-tls array\n-tlsAutocertCacheDir string\n-tlsAutocertEmail string\n-tlsAutocertHosts array\n-tlsCertFile array\n-tlsCipherSuites array\n-tlsKeyFile array\n-tlsMinVersion array\n-version\n```\n\n----------------------------------------\n\nTITLE: Setting Up vmagent to Read InfluxDB Format Metrics from Kafka\nDESCRIPTION: Command-line example showing how to configure vmagent to read metrics in InfluxDB line protocol format from a Kafka topic and forward them to a VictoriaMetrics instance for storage.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmagent.md#2025-04-22_snippet_56\n\nLANGUAGE: sh\nCODE:\n```\n./bin/vmagent -remoteWrite.url=http://localhost:8428/api/v1/write \\\n       -kafka.consumer.topic.brokers=localhost:9092 \\\n       -kafka.consumer.topic.format=influx \\\n       -kafka.consumer.topic=metrics-by-telegraf \\\n       -kafka.consumer.topic.groupID=some-id\n```\n\n----------------------------------------\n\nTITLE: Deploying Sharded VMAnomaly with Docker Compose\nDESCRIPTION: This Docker Compose configuration sets up two VMAnomaly shards without replication. Each shard is assigned a unique subset of the global configuration.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/anomaly-detection/Scaling vmanomaly.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# other sections ...\n\nservices:\n  # other services ...\n  vmanomaly-1:\n    image: victoriametrics/vmanomaly:v1.21.0\n    user: \"1000:1000\"\n    restart: always\n    healthcheck:\n      test: [\"CMD\", \"curl\", \"-f\", \"http://127.0.0.1:8490/health\"]\n      interval: 30s\n      timeout: 10s\n      retries: 5\n    volumes:\n      - ./vmanomaly-config:/config\n    command:\n      - \"/config/global_config.yml\"\n      - \"--license=YOUR_LICENSE\"\n    environment:\n      VMANOMALY_MEMBERS_COUNT: 2\n      VMANOMALY_MEMBER_NUM: 0\n      VMANOMALY_REPLICATION_FACTOR: 1\n      VMANOMALY_SPLIT_BY: \"COMPLETE\"\n\n  vmanomaly-2:\n    image: victoriametrics/vmanomaly:v1.21.0\n    user: \"1000:1000\"\n    restart: always\n    healthcheck:\n      test: [\"CMD\", \"curl\", \"-f\", \"http://127.0.0.1:8490/health\"]\n      interval: 30s\n      timeout: 10s\n      retries: 5\n    volumes:\n      - ./vmanomaly-config:/config\n    command:\n      - \"/config/global_config.yml\"  # Fixed to match vmanomaly-1\n      - \"--license=YOUR_LICENSE\"\n    environment:\n      VMANOMALY_MEMBERS_COUNT: 2\n      VMANOMALY_MEMBER_NUM: 1\n      VMANOMALY_REPLICATION_FACTOR: 1\n      VMANOMALY_SPLIT_BY: \"COMPLETE\"\n```\n\n----------------------------------------\n\nTITLE: Listing Backups via CLI in Kubernetes (Restore Workflow Step 3) (Shell)\nDESCRIPTION: Third step in the Kubernetes restore workflow: executing `vmbackupmanager backup list` inside the `vmbackupmanager` container to list available backups.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmbackupmanager.md#2025-04-22_snippet_24\n\nLANGUAGE: sh\nCODE:\n```\n$ /vmbackupmanager-prod backup list\n[{\"name\":\"daily/2023-04-07\",\"size_bytes\":318837,\"size\":\"311.4ki\",\"created_at\":\"2023-04-07T16:15:07+00:00\"},{\"name\":\"hourly/2023-04-07:11\",\"size_bytes\":318837,\"size\":\"311.4ki\",\"created_at\":\"2023-04-07T16:15:06+00:00\"},{\"name\":\"latest\",\"size_bytes\":318837,\"size\":\"311.4ki\",\"created_at\":\"2023-04-07T16:15:04+00:00\"},{\"name\":\"monthly/2023-04\",\"size_bytes\":318837,\"size\":\"311.4ki\",\"created_at\":\"2023-04-07T16:15:10+00:00\"},{\"name\":\"weekly/2023-14\",\"size_bytes\":318837,\"size\":\"311.4ki\",\"created_at\":\"2023-04-07T16:15:09+00:00\"}]\n\n```\n\n----------------------------------------\n\nTITLE: Including External Content using Hugo Shortcode (Markdown)\nDESCRIPTION: This Hugo shortcode (`content`) dynamically includes the content of the specified file ('README.md') into the current page at the location where the shortcode is placed. The '% ' delimiters indicate that the included content should also be processed for Markdown.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/guides/guide-vmcluster-multiple-retention-setup/_index.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{{% content \"README.md\" %}}\n```\n\n----------------------------------------\n\nTITLE: Stopping and Removing Docker Compose Services (Shell)\nDESCRIPTION: This sequence of shell commands is used to shut down the Docker Compose environment. `docker compose down` stops and removes the containers, networks, volumes, and images created by `up`. `docker compose rm -f` forcibly removes stopped service containers, ensuring a clean state.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/deployment/docker/victorialogs/logstash/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndocker compose down\ndocker compose rm -f\n```\n\n----------------------------------------\n\nTITLE: Clamping Time Series Values to a Maximum in MetricsQL\nDESCRIPTION: A transform function that constrains every data point in the time series returned by `q` to be no greater than the specified `max` value. Values above `max` become `max`. If `q` is a series selector, `default_rollup()` is applied first. Supported by PromQL.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_79\n\nLANGUAGE: MetricsQL\nCODE:\n```\n`clamp_max(q, max)`\n```\n\n----------------------------------------\n\nTITLE: Normalizing Time Series Values Over Range using range_normalize() in MetricsQL\nDESCRIPTION: The `range_normalize(q1, ...)` transform function scales the values of the time series returned by queries `q1, ...` to fall within the range of 0 to 1. This is beneficial for comparing or correlating time series with different value scales.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_104\n\nLANGUAGE: MetricsQL\nCODE:\n```\nrange_normalize(q1, ...)\n```\n\n----------------------------------------\n\nTITLE: Mixing and Reusing Colors in Go\nDESCRIPTION: Demonstrates creating custom color objects with the 'color' package. These examples show how to mix foreground and background colors, including using RGB color codes, and how to create, reuse, and mix colorized text styles.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/fatih/color/README.md#2025-04-22_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\n\"// Create a new color object\\nc := color.New(color.FgCyan).Add(color.Underline)\\nc.Println(\\\"Prints cyan text with an underline.\\\")\\n\\n// Or just add them to New()\\nd := color.New(color.FgCyan, color.Bold)\\nd.Printf(\\\"This prints bold cyan %s\\\\n\\\", \\\"too!.\\\")\\n\\n// Mix up foreground and background colors, create new mixes!\\nred := color.New(color.FgRed)\\n\\nboldRed := red.Add(color.Bold)\\nboldRed.Println(\\\"This will print text in bold red.\\\")\\n\\nwhiteBackground := red.Add(color.BgWhite)\\nwhiteBackground.Println(\\\"Red text with white background.\\\")\\n\\n// Mix with RGB color codes\\ncolor.RGB(255, 128, 0).AddBgRGB(0, 0, 0).Println(\\\"orange with black background\\\")\\n\\ncolor.BgRGB(255, 128, 0).AddRGB(255, 255, 255).Println(\\\"orange background with white foreground\\\")\\n\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Supported VictoriaMetrics Versions in Markdown Table\nDESCRIPTION: This code snippet shows a markdown table that lists the supported versions of VictoriaMetrics for security updates. It includes the latest release and specific LTS (Long Term Support) lines.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/SECURITY.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Version | Supported          |\n|---------|--------------------|\\n| [latest release](https://docs.victoriametrics.com/changelog/) | :white_check_mark: |\n| v1.102.x [LTS line](https://docs.victoriametrics.com/lts-releases/) | :white_check_mark: |\n| v1.110.x [LTS line](https://docs.victoriametrics.com/lts-releases/) | :white_check_mark: |\n| other releases  | :x:                |\n```\n\n----------------------------------------\n\nTITLE: Building vmagent for Windows in Go\nDESCRIPTION: Command to build vmagent for Windows with CGO disabled. This provides initial Windows support for vmagent.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/changelog/CHANGELOG_2021.md#2025-04-22_snippet_29\n\nLANGUAGE: shell\nCODE:\n```\nCGO_ENABLED=0 GOOS=windows go build ./app/vmagent\n```\n\n----------------------------------------\n\nTITLE: Using MapOf with xsync in Go\nDESCRIPTION: The snippet provides examples of using `MapOf` with parametrized key and value types. In contrast to `Map`, `MapOf` supports arbitrary keys and leverages design ideas from Java and C++ for reduced overhead.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/puzpuzpuz/xsync/v3/README.md#2025-04-22_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\nm := xsync.NewMapOf[string, string]()\nm.Store(\"foo\", \"bar\")\nv, ok := m.Load(\"foo\")\n```\n\nLANGUAGE: Go\nCODE:\n```\ntype Point struct {\n\tx int32\n\ty int32\n}\nm := NewMapOf[Point, int]()\nm.Store(Point{42, 42}, 42)\nv, ok := m.Load(point{42, 42})\n```\n\n----------------------------------------\n\nTITLE: Combining Series with union Function\nDESCRIPTION: The union function returns a union of time series from multiple queries. The function name can be skipped - (q1, q2) is equivalent to union(q1, q2).\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_113\n\nLANGUAGE: metricsql\nCODE:\n```\nunion(q1, ..., qN)\n```\n\nLANGUAGE: metricsql\nCODE:\n```\n(q1, q2)\n```\n\n----------------------------------------\n\nTITLE: Supporting Both `endpointslice` and `endpointslices` Roles in Kubernetes SD (YAML)\nDESCRIPTION: As of v1.65.0, vmagent's `kubernetes_sd_config` supports both `role: endpointslice` (correct, Prometheus-compatible) and the previously used incorrect name `role: endpointslices` for backward compatibility during Kubernetes service discovery.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/changelog/CHANGELOG_2021.md#2025-04-22_snippet_15\n\nLANGUAGE: YAML\nCODE:\n```\nkubernetes_sd_configs:\n- role: endpointslice # Preferred\n# or\n- role: endpointslices # Supported for backward compatibility\n```\n\n----------------------------------------\n\nTITLE: Managing Backup Protection Commands\nDESCRIPTION: Commands for locking and unlocking backups to protect them from retention policy deletion\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmbackupmanager.md#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n./vmbackupmanager backup lock daily/2021-02-13 -dst=<DST_PATH> -storageDataPath=/vmstorage-data -eula\n\n./vmbackupmanager backup list -dst=<DST_PATH> -storageDataPath=/vmstorage-data -eula\n\n./vmbackupmanager backup unlock daily/2021-02-13 -dst=<DST_PATH> -storageDataPath=/vmstorage-data -eula\n```\n\n----------------------------------------\n\nTITLE: OpenTelemetry with Basic Authentication\nDESCRIPTION: OpenTelemetry configuration with basic authentication support. Includes authentication handler configuration for secure metric transmission.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/data-ingestion/Alloy.md#2025-04-22_snippet_5\n\nLANGUAGE: Alloy\nCODE:\n```\nprometheus.exporter.unix \"nodeexporter\" {}\n\nprometheus.scrape \"nodeexporter\" {\n  targets = prometheus.exporter.unix.nodeexporter.targets\n  forward_to = [otelcol.receiver.prometheus.victoriametrics.receiver]\n}\n\notelcol.auth.basic \"otel_auth\" {\n  username = \"<user>\"\n  password = \"<password>\"\n}\n\notelcol.receiver.prometheus \"victoriametrics\" {\n  output {\n    metrics = [otelcol.processor.batch.batch.input]\n  }\n}\n\notelcol.processor.batch \"batch\" {\n  output {\n    metrics = [otelcol.exporter.otlphttp.victoriametrics.input]\n  }\n}\n\notelcol.exporter.otlphttp \"victoriametrics\" {\n  client {\n    endpoint = \"https://<victoriametrics_url:<victoriametrics_port>/opentelemetry\"\n    auth = otelcol.auth.basic.otel_auth.handler\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using decreases_over_time Rollup Function in VictoriaMetrics\nDESCRIPTION: This function calculates the number of sample value decreases over the given lookbehind window per each time series. Metric names are stripped from results unless keep_metric_names modifier is added.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_12\n\nLANGUAGE: markdown\nCODE:\n```\ndecreases_over_time(series_selector[d])\n```\n\n----------------------------------------\n\nTITLE: Error Message from Null Map Configuration Issue\nDESCRIPTION: The error message shown when the null map in the second configuration overrides the processors from the first configuration, breaking pipeline references.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/go.opentelemetry.io/collector/confmap/README.md#2025-04-22_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\nError: invalid configuration: service::pipelines::traces: references processor \"nop\" which is not configured\n2024/06/10 14:37:14 collector server run finished with error: invalid configuration: service::pipelines::traces: references processor \"nop\" which is not configured\n```\n\n----------------------------------------\n\nTITLE: Trimming Spikes Based on Percentage using range_trim_spikes() in MetricsQL\nDESCRIPTION: The `range_trim_spikes(phi, q)` transform function removes the largest `phi` percent of spikes from each time series returned by `q`. The `phi` value must be between 0 (0%) and 1 (100%).\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_110\n\nLANGUAGE: MetricsQL\nCODE:\n```\nrange_trim_spikes(phi, q)\n```\n\n----------------------------------------\n\nTITLE: JSON Response for Hits Stats Query\nDESCRIPTION: This snippet shows an example JSON output returned from the hits stats query endpoint, including timestamps and hit counts.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/querying/README.md#2025-04-22_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"hits\": [\n    {\n      \"fields\": {},\n      \"timestamps\": [\n        \"2024-01-01T00:00:00Z\",\n        \"2024-01-01T01:00:00Z\",\n        \"2024-01-01T02:00:00Z\"\n      ],\n      \"values\": [\n        410339,\n        450311,\n        899506\n      ],\n      \"total\": 1760176\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: SSH Access to VictoriaMetrics Server\nDESCRIPTION: This command demonstrates how to SSH into the VictoriaMetrics server as the root user. Replace 'your_droplet_public_ipv4' with the actual IP address of your DigitalOcean droplet.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/deployment/marketplace/digitialocean/one-click-droplet/README.md#2025-04-22_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nssh root@your_droplet_public_ipv4\n```\n\n----------------------------------------\n\nTITLE: Constructing a Blob Client with AAD Token Credential - azblob - Go\nDESCRIPTION: Shows how to create an azblob client with an Azure Active Directory (AAD) token credential created via the azidentity module. Useful for scenarios requiring OAuth authentication. Dependencies: github.com/Azure/azure-sdk-for-go/sdk/azidentity, github.com/Azure/azure-sdk-for-go/sdk/storage/azblob. Key parameters: storage account URL, AAD token credential, optional client options. Inputs: URL string, cred; Output: azblob client or error. Invalid credentials or URL result in an error.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/migrationguide.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// new code.  cred is an AAD token credential created from the azidentity module\nclient, err := azblob.NewClient(\"<my storage account URL>\", cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Importing Modified Time Series Data into VictoriaMetrics Cluster using Shell\nDESCRIPTION: Uses `curl` to send a POST request to the `vminsert` `/api/v1/import` endpoint. The `-T` flag specifies the file (`data.jsonl`) whose content will be sent as the request body. This imports the modified time series data (in JSON Lines format) back into VictoriaMetrics. This process is known as backfilling.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/guides/guide-delete-or-replace-metrics/README.md#2025-04-22_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\ncurl -v -X POST http://vminsert:8480/insert/0/prometheus/api/v1/import -T data.jsonl\n```\n\n----------------------------------------\n\nTITLE: Creating ext4 Filesystem for Large Data Storage\nDESCRIPTION: Command for creating an ext4 filesystem optimized for storing more than 1TB of data or extending beyond 16TB. It uses specific options to enable 64-bit support, huge file handling, and extent-based allocation.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmkfs.ext4 ... -O 64bit,huge_file,extent -T huge\n```\n\n----------------------------------------\n\nTITLE: Configuring Hugo Front Matter for VictoriaMetrics Cloud Documentation\nDESCRIPTION: YAML front matter for a Hugo documentation page that sets up the VictoriaMetrics Cloud section. It configures the page title, weight for sorting, menu structure with identifier and page reference, and defines URL aliases for redirects.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics-cloud/_index.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: VictoriaMetrics Cloud\nweight: 40\nmenu:\n  docs:\n    weight: 40\n    identifier: cloud\n    pageRef: /victoriametrics-cloud/\naliases:\n  - /victoriametrics-cloud/index.html\n  - /managed-victoriametrics/index.html\n---\n```\n\n----------------------------------------\n\nTITLE: Illustrating Contrib Repository Module Versioning\nDESCRIPTION: This example demonstrates the module path and import statement format for the contrib repository when using version v2 or higher. It shows how to include the major version number in both the module declaration and import path.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/go.opentelemetry.io/otel/VERSIONING.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nmodule go.opentelemetry.io/contrib/instrumentation/host/v2\nrequire go.opentelemetry.io/contrib/instrumentation/host/v2 v2.0.1\n\nimport \"go.opentelemetry.io/contrib/instrumentation/host/v2\"\n```\n\n----------------------------------------\n\nTITLE: Generating Pseudo-Random Numbers using rand() in MetricsQL\nDESCRIPTION: The `rand(seed)` transform function generates pseudo-random numbers between 0 and 1 (inclusive) with an even distribution. An optional `seed` argument can be provided to initialize the pseudo-random number generator for reproducible results.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_93\n\nLANGUAGE: MetricsQL\nCODE:\n```\nrand(seed)\n```\n\n----------------------------------------\n\nTITLE: Generating Semantic Conventions for OpenTelemetry Go\nDESCRIPTION: This snippet demonstrates how to generate new versions of the semconv package based on OpenTelemetry Semantic Conventions. It sets the TAG environment variable to the desired semantic convention version and runs the semconv-generate make target.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/go.opentelemetry.io/otel/RELEASING.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nexport TAG=\"v1.30.0\" # Change to the release version you are generating.\nmake semconv-generate # Uses the exported TAG.\n```\n\n----------------------------------------\n\nTITLE: Configuring vmalert for VictoriaLogs Integration\nDESCRIPTION: Command-line configuration for running vmalert with VictoriaLogs as the datasource, AlertManager for notifications, and VictoriaMetrics for persisting state.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/vmalert.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n./bin/vmalert -rule=alert.rules                  \\  # Path to the files or http url with alerting and/or recording rules in YAML format.\n    -datasource.url=http://victorialogs:9428     \\  # VictoriaLogs address.\n    -notifier.url=http://alertmanager:9093       \\  # AlertManager URL (required if alerting rules are used)\n    -remoteWrite.url=http://victoriametrics:8428 \\  # Remote write compatible storage to persist recording rules and alerts state info\n    -remoteRead.url=http://victoriametrics:8428  \\  # Prometheus HTTP API compatible datasource to restore alerts state from\n```\n\n----------------------------------------\n\nTITLE: Using the 'default' Binary Operator for Gap Filling (MetricsQL)\nDESCRIPTION: Illustrates the `default` binary operator in MetricsQL. `q1 default q2` returns the time series from `q1`, but for any timestamp where `q1` has no value (a gap), it takes the corresponding value from `q2`.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_20\n\nLANGUAGE: MetricsQL\nCODE:\n```\nq1 default q2\n```\n\n----------------------------------------\n\nTITLE: Inverse Tangent Transformation with VictoriaMetrics PromQL\nDESCRIPTION: The atan function calculates the inverse tangent for each point in the input time series query q. Metric names are stripped unless the keep_metric_names modifier is provided. This function is supported by PromQL and expects numeric data inputs.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_80\n\nLANGUAGE: PromQL\nCODE:\n```\n`atan(q)`\n```\n\n----------------------------------------\n\nTITLE: Configuring vlinsert/vlselect with TLS and Basic Authentication Credentials\nDESCRIPTION: Command for configuring vlinsert or vlselect components to use both HTTPS and Basic Authentication when connecting to vlstorage nodes. This ensures both encrypted and authorized communication over untrusted networks.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/cluster.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n./victoria-logs-prod -storageNode=... -storageNode.tls -storageNode.username=... -storageNode.password=...\n```\n\n----------------------------------------\n\nTITLE: Counting Grapheme Clusters in a String with uniseg\nDESCRIPTION: This code snippet demonstrates how to count the number of grapheme clusters in a string using the uniseg package. It outputs the number of user-perceived characters in the string. Requires 'uniseg' package and Go language.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/rivo/uniseg/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nn := uniseg.GraphemeClusterCount(\"🇩🇪🏳️‍🌈\")\nfmt.Println(n)\n// 2\n```\n\n----------------------------------------\n\nTITLE: Extracting Year from Timestamps in MetricsQL\nDESCRIPTION: A transform function that extracts the year from each data point in the time series returned by `q`, assuming `q` returns Unix timestamps. Metric names are stripped unless `keep_metric_names` is used. This function is supported by PromQL.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_139\n\nLANGUAGE: metricsql\nCODE:\n```\nyear(q)\n```\n\n----------------------------------------\n\nTITLE: Generating Pseudo-Random Numbers (Exponential Distribution) - MetricsQL (English)\nDESCRIPTION: The `rand_exponential(seed)` function produces pseudo-random numbers following the exponential probability distribution. The `seed` parameter is optional and can be used for deterministic results. Use cases include stochastic modeling in time series data.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/MetricsQL.md#2025-04-22_snippet_79\n\nLANGUAGE: MetricsQL\nCODE:\n```\n`rand_exponential(seed)`\n```\n\n----------------------------------------\n\nTITLE: Querying Hits Stats for Specific Tenant in Bash\nDESCRIPTION: This example shows how to query hits stats for a specific tenant by setting AccountID and ProjectID headers.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/querying/README.md#2025-04-22_snippet_15\n\nLANGUAGE: sh\nCODE:\n```\ncurl http://localhost:9428/select/logsql/hits -H 'AccountID: 12' -H 'ProjectID: 34' -d 'query=error'\n```\n\n----------------------------------------\n\nTITLE: Share Equal Over Time Function in PromQL\nDESCRIPTION: Calculates the share of raw samples equal to a specific value over a time window. Returns values in range [0...1].\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_64\n\nLANGUAGE: PromQL\nCODE:\n```\nshare_eq_over_time(series_selector[d], eq)\n```\n\n----------------------------------------\n\nTITLE: Calculating Resource Utilization in PromQL\nDESCRIPTION: The ru() function calculates resource utilization in the range [0%...100%] for the given free and max resources. It's useful for computing metrics like memory utilization from node_exporter data.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_101\n\nLANGUAGE: promql\nCODE:\n```\nru(free, max)\n```\n\n----------------------------------------\n\nTITLE: Example JSON Lines Format for VictoriaMetrics Export/Import\nDESCRIPTION: Illustrates the structure of a single line in the JSON Lines export format. Each line is a JSON object containing the metric's labels (`metric`), an array of data point values (`values`), and a corresponding array of timestamps (`timestamps`) in milliseconds.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/guides/guide-delete-or-replace-metrics/README.md#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"metric\": {\n    \"__name__\": \"node_memory_MemTotal_bytes\",\n    \"job\": \"hostname.com\",\n    \"instance\": \"node-exporter:9100\"\n  },\n  \"values\": [\n    33604390912,\n    33604390912,\n    33604390912,\n    33604390912\n  ],\n  \"timestamps\": [\n    1656669031378,\n    1656669032378,\n    1656669033378,\n    1656669034378\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Clamping Time Series Values with VictoriaMetrics PromQL\nDESCRIPTION: The clamp function restricts the values of a time series q to lie within the specified minimum and maximum bounds. Supported in PromQL, it is useful for bounding observed values or preventing outliers. The function expects q, min, and max parameters.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_87\n\nLANGUAGE: PromQL\nCODE:\n```\n`clamp(q, min, max)`\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter Configuration for Documentation Page\nDESCRIPTION: YAML configuration block that defines the metadata for a documentation page about VictoriaMetrics multi-regional setup. Includes weight for ordering, title, menu structure, and aliases for URL routing.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/guides/multi-regional-setup-dedicated-regions/_index.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nweight: 11\ntitle: 'VictoriaMetrics Multi-Regional Setup: Dedicated Monitoring'\nmenu:\n  docs:\n    parent: guides\n    weight: 11\naliases:\n- /guides/multi-regional-setup-dedicated-regions.html\n```\n\n----------------------------------------\n\nTITLE: Using deriv Rollup Function in VictoriaMetrics\nDESCRIPTION: This function calculates per-second derivative over the lookbehind window using linear regression. It's supported by PromQL and strips metric names unless keep_metric_names modifier is added.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_16\n\nLANGUAGE: markdown\nCODE:\n```\nderiv(series_selector[d])\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter Configuration for VictoriaLogs Documentation\nDESCRIPTION: YAML configuration block defining metadata for a documentation page about VictoriaLogs data ingestion. Includes title, weight for ordering, menu structure configuration, and URL aliases.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/data-ingestion/_index.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntitle: Data ingestion\nweight: 3\nmenu:\n  docs:\n    identifier: victorialogs-data-ingestion\n    parent: \"victorialogs\"\n    weight: 3\naliases:\n  - /victorialogs/data-ingestion/\n  - /victorialogs/data-ingestion/index.html\n```\n\n----------------------------------------\n\nTITLE: Linear Prediction in PromQL\nDESCRIPTION: The predict_linear function calculates a future value using linear interpolation over raw samples on a given lookbehind window. It's supported by PromQL and useful for trend analysis.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_30\n\nLANGUAGE: promql\nCODE:\n```\npredict_linear(series_selector[d], t)\n```\n\n----------------------------------------\n\nTITLE: Querying Scrapes Approaching Timeout with MetricsQL\nDESCRIPTION: This MetricsQL query detects scrape targets whose scrape duration is close to their configured timeout. It calculates the ratio of `scrape_duration_seconds` to `scrape_timeout_seconds` and selects targets where this ratio exceeds 0.8 (80%).\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmagent.md#2025-04-22_snippet_15\n\nLANGUAGE: metricsql\nCODE:\n```\nscrape_duration_seconds / scrape_timeout_seconds > 0.8\n```\n\n----------------------------------------\n\nTITLE: Shutting Down Docker Compose Environment for Journald-VictoriaLogs Integration\nDESCRIPTION: These commands stop and remove the Docker Compose environment used for integrating Journald with VictoriaLogs. They ensure that all containers and resources are properly cleaned up.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/deployment/docker/victorialogs/journald/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose down\ndocker compose rm -f\n```\n\n----------------------------------------\n\nTITLE: Selecting Series with Multiple OR Filters in MetricsQL\nDESCRIPTION: Demonstrates MetricsQL's extended syntax for series selectors, allowing multiple `or` conditions across different label combinations. This query selects series that match either `{env=\"prod\",job=\"a\"}` or `{env=\"dev\",job=\"b\"}`.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_4\n\nLANGUAGE: MetricsQL\nCODE:\n```\n{env=\"prod\",job=\"a\" or env=\"dev\",job=\"b\"}\n```\n\n----------------------------------------\n\nTITLE: Calculating Median Absolute Deviation in PromQL\nDESCRIPTION: The mad_over_time function calculates the median absolute deviation over raw samples on a given lookbehind window for each time series. It is typically applied to gauges.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_24\n\nLANGUAGE: promql\nCODE:\n```\nmad_over_time(series_selector[d])\n```\n\n----------------------------------------\n\nTITLE: Suppressing Scrape Errors in vmagent (Shell)\nDESCRIPTION: The `-promscrape.suppressScrapeErrors` command-line flag for `vmagent` is used to prevent scrape errors from being logged, reducing log noise. Version 1.86.2 fixed a bug where some errors were still logged despite this flag being set, ensuring consistent error suppression.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/changelog/CHANGELOG_2023.md#2025-04-22_snippet_21\n\nLANGUAGE: shell\nCODE:\n```\n-promscrape.suppressScrapeErrors\n```\n\n----------------------------------------\n\nTITLE: Using sort_by_label_desc function in PromQL\nDESCRIPTION: Function that sorts series in descending order by the given set of labels. It arranges the result set based on label values in reverse alphabetical order.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_136\n\nLANGUAGE: promql\nCODE:\n```\nsort_by_label_desc(q, \"label1\", ... \"labelN\")\n```\n\n----------------------------------------\n\nTITLE: Configuring vmagent scrape targets with team-based relabeling for multi-tenant testing\nDESCRIPTION: YAML configuration for vmagent scrape targets with metric relabeling rules that add team labels to facilitate multi-tenant access testing, directing metrics from different sources to appropriate teams (admin and dev).\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/guides/grafana-vmgateway-openid-configuration/README.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nscrape_configs:\n  - job_name: stat\n    metric_relabel_configs:\n      - if: \"{instance =~ 'vmgateway.*'}\"\n        action: replace\n        target_label: team\n        replacement: admin\n      - if: \"{instance =~ 'localhost.*'}\"\n        action: replace\n        target_label: team\n        replacement: dev\n    static_configs:\n      - targets:\n          - localhost:8429\n          - vmgateway-single:8431\n          - vmgateway-cluster:8431\n```\n\n----------------------------------------\n\nTITLE: Listing Blobs in a Container with Pagination - Go\nDESCRIPTION: This Go snippet illustrates how to authenticate with Azure AD, create a blob client, and enumerate all blobs within a container using the SDK's pagination mechanism. Dependencies include the Azure SDK packages for identity and blob operations, and the Go 'fmt' and 'context' packages. The snippet initializes a paging object and iterates through pages, printing blob names for each. Inputs are the storage account URL and container name. Outputs include printed blob names and handled errors.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/README.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nconst (\n\taccount       = \"https://MYSTORAGEACCOUNT.blob.core.windows.net/\"\n\tcontainerName = \"sample-container\"\n)\n\n// authenticate with Azure Active Directory\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n// TODO: handle error\n\n// create a client for the specified storage account\nclient, err := azblob.NewClient(account, cred, nil)\n// TODO: handle error\n\n// blob listings are returned across multiple pages\npager := client.NewListBlobsFlatPager(containerName, nil)\n\n// continue fetching pages until no more remain\nfor pager.More() {\n  // advance to the next page\n\tpage, err := pager.NextPage(context.TODO())\n\t// TODO: handle error\n\n\t// print the blob names for this page\n\tfor _, blob := range page.Segment.BlobItems {\n\t\tfmt.Println(*blob.Name)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: File Change Watching with Koanf in Go\nDESCRIPTION: Shows how to use the Watch method from Koanf providers to monitor configuration file changes in Go and dynamically reload the configuration. This process is not goroutine safe if concurrent *Get() calls occur during a Load().\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/knadh/koanf/v2/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\n\t\"github.com/knadh/koanf/v2\"\n\t\"github.com/knadh/koanf/parsers/json\"\n\t\"github.com/knadh/koanf/parsers/yaml\"\n\t\"github.com/knadh/koanf/providers/file\"\n)\n\n// Global koanf instance. Use \".\" as the key path delimiter. This can be \"/\" or any character.\nvar k = koanf.New(\".\")\n\nfunc main() {\n\t// Load JSON config.\n\tf := file.Provider(\"mock/mock.json\")\n\tif err := k.Load(f, json.Parser()); err != nil {\n\t\tlog.Fatalf(\"error loading config: %v\", err)\n\t}\n\n\t// Load YAML config and merge into the previously loaded config (because we can).\n\tk.Load(file.Provider(\"mock/mock.yml\"), yaml.Parser())\n\n\tfmt.Println(\"parent's name is = \", k.String(\"parent1.name\"))\n\tfmt.Println(\"parent's ID is = \", k.Int(\"parent1.id\"))\n\n\t// Watch the file and get a callback on change. The callback can do whatever,\n\t// like re-load the configuration.\n\t// File provider always returns a nil `event`.\n\tf.Watch(func(event interface{}, err error) {\n\t\tif err != nil {\n\t\t\tlog.Printf(\"watch error: %v\", err)\n\t\t\treturn\n\t\t}\n\n\t\t// Throw away the old config and load a fresh copy.\n\t\tlog.Println(\"config changed. Reloading ...\")\n\t\tk = koanf.New(\".\")\n\t\tk.Load(f, json.Parser())\n\t\tk.Print()\n\t})\n\n\t// To stop a file watcher, call:\n\t// f.Unwatch()\n\n\t// Block forever (and manually make a change to mock/mock.json) to\n\t// reload the config.\n\tlog.Println(\"waiting forever. Try making a change to mock/mock.json to live reload\")\n\t<-make(chan bool)\n}\n```\n\n----------------------------------------\n\nTITLE: Standard Subquery Filter in LogsQL\nDESCRIPTION: This example demonstrates a standard subquery that only considers user_id values at the intersection of December 2024 and the global time range passed to the API endpoint.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_205\n\nLANGUAGE: logsql\nCODE:\n```\nuser_id:in(_time:2024-12Z | keep user_id) | count()\n```\n\n----------------------------------------\n\nTITLE: Split Configuration Examples\nDESCRIPTION: Example YAML configurations showing how to split vmanomaly configuration based on extra_filters for different regions.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/anomaly-detection/FAQ.md#2025-04-22_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\n# config file #1, for 1st vmanomaly instance\n# ...\nreader:\n  # ...\n  queries:\n    extra_big_query: metricsql_expression_returning_too_many_timeseries\n    extra_filters:\n      # suppose you have a label `region` with values to deterministically define such subsets\n      - '{env=\"region_name_1\"}'\n      # ...\n```\n\nLANGUAGE: yaml\nCODE:\n```\n# config file #2, for 2nd vmanomaly instance\n# ...\nreader:\n  # ...\n  queries:\n    extra_big_query: metricsql_expression_returning_too_many_timeseries\n    extra_filters:\n      # suppose you have a label `region` with values to deterministically define such subsets\n      - '{region=\"region_name_2\"}'\n      # ...\n```\n\n----------------------------------------\n\nTITLE: Tracking Sample Increases with Increases_Over_Time in Markdown\nDESCRIPTION: 'increases_over_time' calculates the number of raw sample increases within a lookbehind window. Suitable for detailed time series analysis.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/MetricsQL.md#2025-04-22_snippet_36\n\nLANGUAGE: Markdown\nCODE:\n```\n`increases_over_time(series_selector[d])` is a [rollup function](#rollup-functions), which calculates the number of [raw sample](https://docs.victoriametrics.com/keyconcepts/#raw-samples)\\nvalue increases over the given lookbehind window `d`.\n```\n\n----------------------------------------\n\nTITLE: Aggregating Multiple Rollup Functions in PromQL\nDESCRIPTION: This example shows how to use the aggr_over_time function to calculate multiple rollup functions (min, max, and rate) for a metric over a given time window.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_24\n\nLANGUAGE: promql\nCODE:\n```\naggr_over_time((\"min_over_time\", \"max_over_time\", \"rate\"), m[d])\n```\n\n----------------------------------------\n\nTITLE: Customizing Stream Fields for Syslog in VictoriaLogs\nDESCRIPTION: Starts VictoriaLogs with TCP Syslog ingestion on port 514 and configures custom stream fields (hostname and app_name) for log streams. This allows for flexible log stream identification.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/data-ingestion/syslog.md#2025-04-22_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\n./victoria-logs -syslog.listenAddr.tcp=:514 -syslog.streamFields.tcp='[\"hostname\",\"app_name\"]'\n```\n\n----------------------------------------\n\nTITLE: Example vmanomaly Output Metrics Text\nDESCRIPTION: This text snippet shows the format of the output metrics generated by the configured `vmanomaly` instance running the custom model. Based on the `config.yaml` and the example queries, two time series representing anomaly scores will be produced, one for `ingestion_rate` and one for `churn_rate`. The metrics include labels specified in the `writer.metric_format` section (`__name__`, `for`, `run`) and default labels added by `vmanomaly` (`model_alias`, `scheduler_alias`).\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/anomaly-detection/components/models.md#2025-04-22_snippet_29\n\nLANGUAGE: text\nCODE:\n```\n{__name__=\"custom_anomaly_score\", for=\"ingestion_rate\", model_alias=\"custom_model\", scheduler_alias=\"s1\", run=\"test-format\"},\n{__name__=\"custom_anomaly_score\", for=\"churn_rate\",     model_alias=\"custom_model\", scheduler_alias=\"s1\", run=\"test-format\"}\n```\n\n----------------------------------------\n\nTITLE: Querying Specific Fields with row_min\nDESCRIPTION: Example showing how to query specific fields (_time, path, duration) from log entry with minimum duration\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_196\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m | stats row_min(duration, _time, path, duration) as time_and_path_with_min_duration\n```\n\n----------------------------------------\n\nTITLE: Starting Docker Compose Environment for DataDog and VictoriaLogs Integration\nDESCRIPTION: This command starts the Docker Compose environment in detached mode, setting up the DataDog agent, VictoriaLogs, and VictoriaMetrics services.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/deployment/docker/victorialogs/datadog-agent/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Port-Forwarding VictoriaLogs to Localhost - Shell\nDESCRIPTION: This forwards the VictoriaLogs service port (9428) to the local machine, allowing examination of collected logs using local tools or web UI.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/guides/getting-started-with-opentelemetry/README.md#2025-04-22_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\nkubectl port-forward svc/victoria-logs-victoria-logs-single-server 9428\n```\n\n----------------------------------------\n\nTITLE: Calculating Share of Equal Samples Over Time in VictoriaMetrics\nDESCRIPTION: The share_eq_over_time function calculates the share of raw samples equal to a given value over a specified time window. It operates on time series data and returns values in the range [0...1].\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/MetricsQL.md#2025-04-22_snippet_60\n\nLANGUAGE: metricsql\nCODE:\n```\nshare_eq_over_time(series_selector[d], eq)\n```\n\n----------------------------------------\n\nTITLE: Kubernetes port filtering relabeling rule in YAML\nDESCRIPTION: Relabeling configuration to filter out Kubernetes pods with unneeded ports by keeping only pods where the prometheus.io/port annotation matches the container port number.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmagent.md#2025-04-22_snippet_47\n\nLANGUAGE: yaml\nCODE:\n```\n- action: keep_if_equal\n  source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_port, __meta_kubernetes_pod_container_port_number]\n```\n\n----------------------------------------\n\nTITLE: YAML Configuration with Null Maps Issue Example\nDESCRIPTION: An example of a minimal valid configuration file (A.yaml) with 'nop' components that will be affected by null maps in another configuration.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/go.opentelemetry.io/collector/confmap/README.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nreceivers:\n    nop:\n\nprocessors:\n    nop:\n\nexporters:\n    nop:\n\nextensions:\n    nop:\n\nservice:\n    extensions: [nop]\n    pipelines:\n        traces:\n            receivers: [nop]\n            processors: [nop]\n            exporters: [nop]\n```\n\n----------------------------------------\n\nTITLE: Allowing Trailing Commas in Lists (MetricsQL)\nDESCRIPTION: Demonstrates that MetricsQL permits trailing commas in label filter lists (`{}`), function argument lists (`()`), and `WITH` expression lists. This enhances maintainability for multi-line queries.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_16\n\nLANGUAGE: MetricsQL\nCODE:\n```\nm{foo=\"bar\",}\n```\n\nLANGUAGE: MetricsQL\nCODE:\n```\nf(a, b,)\n```\n\nLANGUAGE: MetricsQL\nCODE:\n```\nWITH (x=y,) x\n```\n\n----------------------------------------\n\nTITLE: Correcting vmbackup Destination Path Validation\nDESCRIPTION: Describes a bugfix in vmbackup ensuring that the destination path specified by '-dst' is correctly validated to be within the specified source data path '-storageDataPath' (issue #4837).\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/changelog/CHANGELOG_2023.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n# vmbackup flags for destination and source data path\n-dst\n-storageDataPath\n```\n\n----------------------------------------\n\nTITLE: Running Test Commands for VictoriaMetrics in Shell\nDESCRIPTION: Commands for running various test suites before submitting a PR. Includes running vet checks, standard tests, and race condition tests with specific CPU and timeout parameters.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/google.golang.org/grpc/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n./scripts/vet.sh\n```\n\nLANGUAGE: shell\nCODE:\n```\ngo test -cpu 1,4 -timeout 7m ./...\n```\n\nLANGUAGE: shell\nCODE:\n```\ngo test -race -cpu 1,4 -timeout 7m ./...\n```\n\n----------------------------------------\n\nTITLE: Increase Rollup Function\nDESCRIPTION: Calculates increases for adjacent raw samples and returns min, max and avg values. Typically used with counters.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_42\n\nLANGUAGE: metricsql\nCODE:\n```\nrollup_increase(series_selector[d])\n```\n\n----------------------------------------\n\nTITLE: Installing Google Auth Library for Go\nDESCRIPTION: Provides the command to install the latest version of the Google Auth Library using 'go get'. This is a prerequisite for utilizing the library's features in Go applications.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/cloud.google.com/go/auth/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/auth@latest\n```\n\n----------------------------------------\n\nTITLE: LogsQL Query Example for collapse_nums Pipe\nDESCRIPTION: Example query demonstrating the usage of collapse_nums pipe to find top 5 log message patterns from the last hour by replacing numbers with <N>\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\n_time:1h | collapse_nums | top 5 by (_msg)\n```\n\n----------------------------------------\n\nTITLE: License File Read Error\nDESCRIPTION: Error message template shown when license file cannot be read.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/anomaly-detection/components/monitoring.md#2025-04-22_snippet_6\n\nLANGUAGE: text\nCODE:\n```\nfailed to read file {{args.license_file}}: {{error_message}}\n```\n\n----------------------------------------\n\nTITLE: Running Zap Tests and Linters in Bash\nDESCRIPTION: Commands to verify that the Zap project tests and linters pass in your local environment, which is required before submitting changes.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/go.uber.org/zap/CONTRIBUTING.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake test\nmake lint\n```\n\n----------------------------------------\n\nTITLE: Accessing VictoriaMetrics Cluster Web UI (VMUI)\nDESCRIPTION: This URL provides access to the VictoriaMetrics basic Web UI (VMUI) for a specific tenant within the cluster. Access is routed through the `vmselect` component and requires specifying the target `accountID` (tenant ID) in the path.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/Cluster-VictoriaMetrics.md#2025-04-22_snippet_16\n\nLANGUAGE: url\nCODE:\n```\nhttp://<vmselect>:8481/select/<accountID>/vmui/\n```\n\n----------------------------------------\n\nTITLE: Stopping Docker Compose Environment\nDESCRIPTION: Commands to stop and clean up the Docker Compose environment, including removing all containers.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/deployment/docker/victorialogs/opentelemetry-collector/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose down\ndocker compose rm -f\n```\n\n----------------------------------------\n\nTITLE: Verifying VictoriaMetrics Pod Status - Shell\nDESCRIPTION: This command retrieves the current status of Kubernetes pods to confirm that the VictoriaMetrics single-server pod is running. Expect a READY and STATUS of Running if setup is successful.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/guides/getting-started-with-opentelemetry/README.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get pods\\n# NAME                                                READY   STATUS    RESTARTS   AGE\\n# victoria-metrics-victoria-metrics-single-server-0   1/1     Running   0          3m1s\n```\n\n----------------------------------------\n\nTITLE: Query Response Format\nDESCRIPTION: Example response format showing the structure of returned log data including message, stream information, and timestamp.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/data-ingestion/README.md#2025-04-22_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\n{\"_msg\":\"foo fizzbuzz bar\",\"_stream\":\"{instance=\\\"host123\\\",job=\\\"app42\\\"}\",\"_time\":\"2023-07-20T23:01:19.288676497Z\"}\n```\n\n----------------------------------------\n\nTITLE: Using Graphite Groups with label_graphite_group Function\nDESCRIPTION: The label_graphite_group function replaces metric names with the specified Graphite group values concatenated via dot character, useful for aggregating Graphite metrics.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_120\n\nLANGUAGE: metricsql\nCODE:\n```\nlabel_graphite_group(q, groupNum1, ... groupNumN)\n```\n\nLANGUAGE: metricsql\nCODE:\n```\nlabel_graphite_group({__graphite__=\"foo*.bar.*\"}, 0, 2)\n```\n\nLANGUAGE: metricsql\nCODE:\n```\nsum by (__name__) (\n    label_graphite_group({__graphite__=\"app*.host*.memory_usage\"}, 0)\n)\n```\n\n----------------------------------------\n\nTITLE: Computing Average Increase Rate in PromQL\nDESCRIPTION: The rate function calculates the average per-second increase rate over a specified time window. It's supported by PromQL and automatically adjusts the window size if not specified.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_48\n\nLANGUAGE: PromQL\nCODE:\n```\nrate(series_selector[d])\n```\n\n----------------------------------------\n\nTITLE: Searching VictoriaMetrics Helm Charts\nDESCRIPTION: Searches for available VictoriaMetrics charts in the added repository. This command lists all VM-related charts with their versions and descriptions.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/guides/k8s-monitoring-via-vm-single/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nhelm search repo vm/\n```\n\n----------------------------------------\n\nTITLE: Installing the mapstructure Library in Go\nDESCRIPTION: This shell command installs version 2 of the mapstructure library, enabling the decoding of map values in Go applications. To install, execute this command in your terminal.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/go-viper/mapstructure/v2/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo get github.com/go-viper/mapstructure/v2\n```\n\n----------------------------------------\n\nTITLE: Preserving Fenced Code Block Classes with Bluemonday HTML Sanitizer\nDESCRIPTION: Demonstrates how to use the Bluemonday HTML sanitizer to preserve classes of fenced code blocks while ensuring safety.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/russross/blackfriday/v2/README.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\np := bluemonday.UGCPolicy()\np.AllowAttrs(\"class\").Matching(regexp.MustCompile(\"^language-[a-zA-Z0-9]+$\")).OnElements(\"code\")\nhtml := p.SanitizeBytes(unsafe)\n```\n\n----------------------------------------\n\nTITLE: Sending a Data Point via OpenTSDB 'telnet put' Protocol - VictoriaMetrics - Shell\nDESCRIPTION: This snippet sends a single metric data point to VictoriaMetrics using the OpenTSDB 'put' syntax piped into 'nc' (netcat). The timestamp is dynamically set using the 'date' command. It requires the OpenTSDB receiver to be running and listening on the specified localhost port 4242. The example demonstrates how to include two tags alongside the metric value.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/README.md#2025-04-22_snippet_25\n\nLANGUAGE: sh\nCODE:\n```\necho \"put foo.bar.baz `date +%s` 123 tag1=value1 tag2=value2\" | nc -N localhost 4242\n```\n\n----------------------------------------\n\nTITLE: Calculating Mode Over Time in PromQL\nDESCRIPTION: The mode_over_time function computes the mode (most frequent value) for raw samples over a given time window. It expects discrete values and is typically used with gauge metrics.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_41\n\nLANGUAGE: PromQL\nCODE:\n```\nmode_over_time(series_selector[d])\n```\n\n----------------------------------------\n\nTITLE: Creating Decoded Baggage Member in Go\nDESCRIPTION: The baggage.NewMember function now decodes the value parameter to comply with W3C specifications.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-22_snippet_36\n\nLANGUAGE: Go\nCODE:\n```\nmember, err := baggage.NewMember(\"key\", url.QueryEscape(\"value\"))\nif err != nil {\n    // Handle error\n}\n```\n\n----------------------------------------\n\nTITLE: Basic QuickTemplate Example\nDESCRIPTION: A simple QuickTemplate example showing how to define a template function that outputs a greeting.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/valyala/quicktemplate/README.md#2025-04-22_snippet_2\n\nLANGUAGE: qtpl\nCODE:\n```\nAll text outside function templates is treated as comments,\ni.e. it is just ignored by quicktemplate compiler (`qtc`). It is for humans.\n\nHello is a simple template function.\n{% func Hello(name string) %}\n\tHello, {%s name %}!\n{% endfunc %}\n```\n\n----------------------------------------\n\nTITLE: Floating Point Number Parsing Examples\nDESCRIPTION: Examples of floating point number formats supported during data import, including numbers without integer or fractional parts\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/changelog/CHANGELOG_2023.md#2025-04-22_snippet_25\n\nLANGUAGE: text\nCODE:\n```\n.123\n20.\n```\n\n----------------------------------------\n\nTITLE: Derivative Rollup Function in PromQL\nDESCRIPTION: Calculates per-second derivatives for adjacent samples and returns min, max, avg values with rollup labels.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_54\n\nLANGUAGE: promql\nCODE:\n```\nrollup_deriv(series_selector[d])\n```\n\n----------------------------------------\n\nTITLE: Displaying Package Documentation Badge in Markdown\nDESCRIPTION: This code snippet shows how to include a badge linking to the package documentation on pkg.go.dev using Markdown syntax.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/go.opentelemetry.io/otel/semconv/v1.26.0/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![PkgGoDev](https://pkg.go.dev/badge/go.opentelemetry.io/otel/semconv/v1.26.0)](https://pkg.go.dev/go.opentelemetry.io/otel/semconv/v1.26.0)\n```\n\n----------------------------------------\n\nTITLE: Importing the Doublestar Package in Go\nDESCRIPTION: This Go code snippet shows the necessary import statement to use the `doublestar/v4` package within a Go source file. This allows access to the functions and types provided by the library.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/bmatcuk/doublestar/v4/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/bmatcuk/doublestar/v4\"\n```\n\n----------------------------------------\n\nTITLE: Generated Persistence Queue Folders\nDESCRIPTION: Example showing how vmagent generates persistent queue folder names based on URL hash and sequence order.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/vmagent.md#2025-04-22_snippet_44\n\nLANGUAGE: bash\nCODE:\n```\n# 1_<hash(http://example-1:8428/prometheus/api/v1/write)>, query parameters foo=bar and fragment baz are removed.\n1_BA6E4303DCFA0D45\n# 2_<hash(http://user:pass@example-2:8428/prometheus/api/v1/write)>, query parameters qux=quux and fragment quuz are removed.\n2_0AAFDF53E314A72A\n```\n\n----------------------------------------\n\nTITLE: Using @ Modifier Anywhere with end() in MetricsQL\nDESCRIPTION: Illustrates the flexibility of the `@` timestamp modifier in MetricsQL, allowing it to be placed after a function call. This query calculates `sum(foo)` specifically at the end timestamp of the selected query range.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_8\n\nLANGUAGE: MetricsQL\nCODE:\n```\nsum(foo) @ end()\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry v1.1.1\nDESCRIPTION: Version 1.1.1 changelog entry noting SDK module updates.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/aws/aws-sdk-go-v2/feature/ec2/imds/CHANGELOG.md#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n# v1.1.1 (2021-05-20)\n\n* **Dependency Update**: Updated to the latest SDK module versions\n```\n\n----------------------------------------\n\nTITLE: Shutting Down Docker Compose Environment for Vector and VictoriaLogs Integration\nDESCRIPTION: These commands stop and remove the Docker Compose environment for the Vector and VictoriaLogs integration.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/deployment/docker/victorialogs/vector/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose down\ndocker compose rm -f\n```\n\n----------------------------------------\n\nTITLE: Conditional Syslog Unpacking in VictoriaLogs\nDESCRIPTION: Shows how to conditionally unpack Syslog messages based on a filter condition.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/LogsQL.md#2025-04-22_snippet_169\n\nLANGUAGE: logsql\nCODE:\n```\n_time:5m | unpack_syslog if (hostname:\"\") from foo\n```\n\n----------------------------------------\n\nTITLE: Applying Value Length Limits to Log Records in Go\nDESCRIPTION: Apply configured value length limits to Record attributes in the logging SDK.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-22_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\nsdk.NewLoggerProvider(\n  sdk.WithAttributeValueLengthLimit(256)\n)\n```\n\n----------------------------------------\n\nTITLE: Fenced Code Blocks in Go with Syntax Highlighting\nDESCRIPTION: Shows how to create fenced code blocks with language-specific syntax highlighting using Blackfriday's Markdown extensions.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/russross/blackfriday/v2/README.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n```go\nfunc getTrue() bool {\n    return true\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Version History Changelog Entry\nDESCRIPTION: Example changelog entry showing version number, date and changes made\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/aws/aws-sdk-go-v2/service/internal/presigned-url/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# v1.12.8 (2025-01-09)\n\n* **Dependency Update**: Updated to the latest SDK module versions\n```\n\n----------------------------------------\n\nTITLE: Checking for Empty Instrument in Go\nDESCRIPTION: The IsEmpty method is added to the Instrument type in the metric SDK to check if an Instrument instance is a zero-value.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\ninstrument.IsEmpty()\n```\n\n----------------------------------------\n\nTITLE: Creating WrapperTracer Instances using NewTracerProvider in Go OpenTracing Bridge\nDESCRIPTION: Introduces the `NewTracerProvider` function in the `go.opentelemetry.io/otel/bridge/opentracing` package. This function facilitates the creation of `WrapperTracer` instances directly from an OpenTelemetry `TracerProvider`, simplifying the bridging between OpenTracing and OpenTelemetry.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-22_snippet_16\n\nLANGUAGE: Go\nCODE:\n```\ngo.opentelemetry.io/otel/bridge/opentracing\n// Function: NewTracerProvider(tracerProvider trace.TracerProvider, opts ...WrapperTracerOption) *WrapperTracerProvider\n```\n\n----------------------------------------\n\nTITLE: Pre-compiling JMESPath Queries in Go\nDESCRIPTION: Demonstrates pre-compiling a JMESPath expression using go-jmespath for repeated query efficiency. This code uses the Compile function from the go-jmespath library, requiring the encoding/json package for JSON unmarshaling. It shows setting up a compiled query to be used multiple times for performance gains, with error handling for compilation steps being necessary. The output depends on the compiled expression and input data.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/jmespath/go-jmespath/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n\t> var jsondata = []byte(`{\"foo\": \"bar\"}`)\n\t> var data interface{}\n    > err := json.Unmarshal(jsondata, &data)\n\t> precompiled, err := Compile(\"foo\")\n\t> if err != nil{\n    >   // ... handle the error\n    > }\n    > result, err := precompiled.Search(data)\n\tresult = \"bar\"\n```\n\n----------------------------------------\n\nTITLE: Installing S2 Compression Library using Go Get\nDESCRIPTION: Installs the S2 compression library package from GitHub using the `go get` command. The `-u` flag ensures the latest version is fetched.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/klauspost/compress/s2/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo get -u github.com/klauspost/compress/s2\n```\n\n----------------------------------------\n\nTITLE: Using @ modifier with subexpressions in MetricsQL\nDESCRIPTION: Demonstrates how to use the @ modifier with arbitrary subexpressions in MetricsQL queries.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/MetricsQL.md#2025-04-22_snippet_4\n\nLANGUAGE: metricsql\nCODE:\n```\nfoo @ (end() - 1h)\n```\n\n----------------------------------------\n\nTITLE: Network Receive Rate Calculation\nDESCRIPTION: Basic rate calculation for network receive bytes without explicit time window.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/keyConcepts/keyConcepts.md#2025-04-22_snippet_25\n\nLANGUAGE: metricsql\nCODE:\n```\nrate(node_network_receive_bytes_total)\n```\n\n----------------------------------------\n\nTITLE: Shutting Down VictoriaLogs Single Server Docker Compose Environment\nDESCRIPTION: Command to shut down the Docker Compose environment for VictoriaLogs single server configuration.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/deployment/docker/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmake docker-vl-single-down\n```\n\n----------------------------------------\n\nTITLE: Rsyslog Configuration for VictoriaLogs\nDESCRIPTION: Configuration line for rsyslog to forward logs to VictoriaLogs server on port 29514.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/data-ingestion/syslog.md#2025-04-22_snippet_13\n\nLANGUAGE: plaintext\nCODE:\n```\n*.* @@victoria-logs-server:29514\n```\n\n----------------------------------------\n\nTITLE: Log Stream Filter Example\nDESCRIPTION: Example of applying multiple log stream filters to match specific field values\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: LogsQL\nCODE:\n```\n{foo=\"bar\"} AND {baz=\"x\"}\n```\n\n----------------------------------------\n\nTITLE: Cloning OpenTelemetry Go Repository\nDESCRIPTION: This snippet shows how to clone the OpenTelemetry Go repository using git. It's the first step for contributors to get the source code locally.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/open-telemetry/opentelemetry-go.git\n```\n\n----------------------------------------\n\nTITLE: SSH Access to VictoriaMetrics Server\nDESCRIPTION: Command to establish SSH connection to the VictoriaMetrics server as root user.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/deployment/marketplace/vultr/README.md#2025-04-22_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nssh root@your_server_public_ipv4\n```\n\n----------------------------------------\n\nTITLE: Deleting Time Series via Admin TSDB API in VictoriaMetrics\nDESCRIPTION: Example of deleting time series from VictoriaMetrics using the admin TSDB API. The example shows both single-node and cluster usage, and returns HTTP 204 when successful.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/url-examples.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncurl -v http://localhost:8428/api/v1/admin/tsdb/delete_series -d 'match[]=vm_http_request_errors_total'\n```\n\nLANGUAGE: sh\nCODE:\n```\n*   Trying 127.0.0.1:8428...\n* Connected to 127.0.0.1 (127.0.0.1) port 8428 (#0)\n> GET /api/v1/admin/tsdb/delete_series?match[]=vm_http_request_errors_total HTTP/1.1\n> Host: 127.0.0.1:8428\n> User-Agent: curl/7.81.0\n> Accept: */*\n>\n* Mark bundle as not supporting multiuse\n< HTTP/1.1 204 No Content\n< X-Server-Hostname: eba075fb0e1a\n< Date: Tue, 21 Jun 2022 07:33:35 GMT\n<\n* Connection #0 to host 127.0.0.1 left intact\n```\n\nLANGUAGE: sh\nCODE:\n```\ncurl -v http://<vmselect>:8481/delete/0/prometheus/api/v1/admin/tsdb/delete_series -d 'match[]=vm_http_request_errors_total'\n```\n\nLANGUAGE: sh\nCODE:\n```\n*   Trying 127.0.0.1:8481...\n* Connected to 127.0.0.1 (127.0.0.1) port 8481 (#0)\n> GET /delete/0/prometheus/api/v1/admin/tsdb/delete_series?match[]=vm_http_request_errors_total HTTP/1.1\n> Host: 127.0.0.1:8481\n> User-Agent: curl/7.81.0\n> Accept: */*\n>\n* Mark bundle as not supporting multiuse\n< HTTP/1.1 204 No Content\n< X-Server-Hostname: 101ed7a45c94\n< Date: Tue, 21 Jun 2022 07:21:36 GMT\n<\n* Connection #0 to host 127.0.0.1 left intact\n```\n\n----------------------------------------\n\nTITLE: Creating a Feature Branch for Zap Contributions in Bash\nDESCRIPTION: Git commands to create a new branch for developing features or fixes in Zap. This ensures changes are made on top of the latest upstream master branch.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/go.uber.org/zap/CONTRIBUTING.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd $GOPATH/src/go.uber.org/zap\ngit checkout master\ngit fetch upstream\ngit rebase upstream/master\ngit checkout -b cool_new_feature\n```\n\n----------------------------------------\n\nTITLE: Basic MetricsQL Query for Metric Retrieval\nDESCRIPTION: This snippet shows a basic MetricsQL query to retrieve data for a specific metric. It demonstrates how to query a single metric name without any additional filtering.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/keyConcepts/keyConcepts.md#2025-04-22_snippet_15\n\nLANGUAGE: metricsql\nCODE:\n```\nfoo_bar\n```\n\n----------------------------------------\n\nTITLE: YAML Configuration for Documentation Page\nDESCRIPTION: YAML frontmatter configuration that defines the documentation page properties including weight, title, menu structure and aliases.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/guides/k8s-monitoring-via-vm-cluster/_index.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nweight: 3\ntitle: Kubernetes monitoring with VictoriaMetrics Cluster\nmenu:\n  docs:\n    parent: \"guides\"\n    weight: 3\naliases:\n- /guides/k8s-monitoring-via-vm-cluster.html\n```\n\n----------------------------------------\n\nTITLE: Example Output Metrics for Histogram Bucket Aggregation in VictoriaMetrics Text\nDESCRIPTION: Shows the format of metrics generated by the `histogram_bucket` stream aggregation configuration. Output metrics include the original name, aggregation interval (`60s`), aggregation type (`histogram_bucket`), and a `vmrange` label specifying the bucket's range (e.g., \"start1...end1\"). Each metric represents the count of values falling within that specific range during the interval.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/stream-aggregation.md#2025-04-22_snippet_8\n\nLANGUAGE: text\nCODE:\n```\nrequest_duration_seconds:60s_histogram_bucket{vmrange=\"start1...end1\"} count1\nrequest_duration_seconds:60s_histogram_bucket{vmrange=\"start2...end2\"} count2\n...\nrequest_duration_seconds:60s_histogram_bucket{vmrange=\"startN...endN\"} countN\n\nresponse_size_bytes:60s_histogram_bucket{vmrange=\"start1...end1\"} count1\nresponse_size_bytes:60s_histogram_bucket{vmrange=\"start2...end2\"} count2\n...\nresponse_size_bytes:60s_histogram_bucket{vmrange=\"startN...endN\"} countN\n```\n\n----------------------------------------\n\nTITLE: Setting Default Resource in Go OpenTelemetry SDK\nDESCRIPTION: Change resource.Default to be evaluated on first call instead of import, allowing for runtime configuration of OTEL_RESOURCE_ATTRIBUTES.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-22_snippet_46\n\nLANGUAGE: Go\nCODE:\n```\nimport (\n    \"os\"\n    \"go.opentelemetry.io/otel/sdk/resource\"\n)\n\nos.Setenv(\"OTEL_RESOURCE_ATTRIBUTES\", \"key=value\")\nres := resource.Default()\n```\n\n----------------------------------------\n\nTITLE: Starting Second vlstorage Node\nDESCRIPTION: Command to start the second vlstorage node, listening on port 9492 and storing data in victoria-logs-data-2 directory.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victorialogs/cluster.md#2025-04-22_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\n./victoria-logs-prod -httpListenAddr=:9492 -storageDataPath=victoria-logs-data-2 &\n```\n\n----------------------------------------\n\nTITLE: Expected Output after VM Operator Helm Install (sh)\nDESCRIPTION: This text block shows the typical output after successfully running the Helm command to install the VictoriaMetrics Operator. It confirms the deployment status, namespace, revision, and provides follow-up commands to check pod status and links to further documentation.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/guides/getting-started-with-vm-operator/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nNAME: vmoperator\nLAST DEPLOYED: Fri Mar 21 12:01:52 2025\nNAMESPACE: default\nSTATUS: deployed\nREVISION: 1\nTEST SUITE: None\nNOTES:\nvictoria-metrics-operator has been installed. Check its status by running:\n  kubectl --namespace default get pods -l \"app.kubernetes.io/instance=vmoperator\"\n\nGet more information on https://github.com/VictoriaMetrics/helm-charts/tree/master/charts/victoria-metrics-operator.\nSee \"Getting started guide for VM Operator\" on https://docs.victoriametrics.com/guides/getting-started-with-vm-operator\n```\n\n----------------------------------------\n\nTITLE: Declaring Explicit Go Module Dependencies - Go\nDESCRIPTION: This snippet lists Go module dependencies and package import paths, including module versions and explicit Go version requirements. It is intended to document, configure, or enforce dependency versions and structure, commonly used by dependency management or build tooling (such as Go modules, vendoring tools, or build systems). There are no executable statements or inputs/outputs, and no special dependencies are required beyond the standard Go toolchain and the specified modules. Its main constraint is that it is declarative-only, not containing executable code, and is designed for tooling consumption rather than runtime behavior.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/modules.txt#2025-04-22_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\n## explicit; go 1.23.0\\ngo.opentelemetry.io/collector/pdata/internal\\ngo.opentelemetry.io/collector/pdata/internal/data\\ngo.opentelemetry.io/collector/pdata/internal/data/protogen/collector/logs/v1\\ngo.opentelemetry.io/collector/pdata/internal/data/protogen/collector/metrics/v1\\ngo.opentelemetry.io/collector/pdata/internal/data/protogen/collector/profiles/v1development\\ngo.opentelemetry.io/collector/pdata/internal/data/protogen/collector/trace/v1\\ngo.opentelemetry.io/collector/pdata/internal/data/protogen/common/v1\\ngo.opentelemetry.io/collector/pdata/internal/data/protogen/logs/v1\\ngo.opentelemetry.io/collector/pdata/internal/data/protogen/metrics/v1\\ngo.opentelemetry.io/collector/pdata/internal/data/protogen/profiles/v1development\\ngo.opentelemetry.io/collector/pdata/internal/data/protogen/resource/v1\\ngo.opentelemetry.io/collector/pdata/internal/data/protogen/trace/v1\\ngo.opentelemetry.io/collector/pdata/internal/json\\ngo.opentelemetry.io/collector/pdata/internal/otlp\\ngo.opentelemetry.io/collector/pdata/pcommon\\ngo.opentelemetry.io/collector/pdata/plog\\ngo.opentelemetry.io/collector/pdata/pmetric\\ngo.opentelemetry.io/collector/pdata/pmetric/pmetricotlp\\ngo.opentelemetry.io/collector/pdata/ptrace\\n# go.opentelemetry.io/collector/pipeline v0.122.1\\n## explicit; go 1.23.0\\ngo.opentelemetry.io/collector/pipeline\\ngo.opentelemetry.io/collector/pipeline/internal/globalsignal\\n# go.opentelemetry.io/collector/processor v0.122.1\\n## explicit; go 1.23.0\\ngo.opentelemetry.io/collector/processor\\ngo.opentelemetry.io/collector/processor/internal\\n# go.opentelemetry.io/collector/semconv v0.122.1\\n## explicit; go 1.23.0\\ngo.opentelemetry.io/collector/semconv/v1.6.1\\n# go.opentelemetry.io/contrib/instrumentation/google.golang.org/grpc/otelgrpc v0.60.0\\n## explicit; go 1.22.0\\ngo.opentelemetry.io/contrib/instrumentation/google.golang.org/grpc/otelgrpc\\ngo.opentelemetry.io/contrib/instrumentation/google.golang.org/grpc/otelgrpc/internal\\n# go.opentelemetry.io/contrib/instrumentation/net/http/httptrace/otelhttptrace v0.60.0\\n## explicit; go 1.22.0\\ngo.opentelemetry.io/contrib/instrumentation/net/http/httptrace/otelhttptrace\\ngo.opentelemetry.io/contrib/instrumentation/net/http/httptrace/otelhttptrace/internal/semconv\\ngo.opentelemetry.io/contrib/instrumentation/net/http/httptrace/otelhttptrace/internal/semconvutil\\n# go.opentelemetry.io/contrib/instrumentation/net/http/otelhttp v0.60.0\\n## explicit; go 1.22.0\\ngo.opentelemetry.io/contrib/instrumentation/net/http/otelhttp\\ngo.opentelemetry.io/contrib/instrumentation/net/http/otelhttp/internal/request\\ngo.opentelemetry.io/contrib/instrumentation/net/http/otelhttp/internal/semconv\\ngo.opentelemetry.io/contrib/instrumentation/net/http/otelhttp/internal/semconvutil\\n# go.opentelemetry.io/otel v1.35.0\\n## explicit; go 1.22.0\\ngo.opentelemetry.io/otel\\ngo.opentelemetry.io/otel/attribute\\ngo.opentelemetry.io/otel/baggage\\ngo.opentelemetry.io/otel/codes\\ngo.opentelemetry.io/otel/internal\\ngo.opentelemetry.io/otel/internal/attribute\\ngo.opentelemetry.io/otel/internal/baggage\\ngo.opentelemetry.io/otel/internal/global\\ngo.opentelemetry.io/otel/propagation\\ngo.opentelemetry.io/otel/semconv/v1.17.0\\ngo.opentelemetry.io/otel/semconv/v1.20.0\\ngo.opentelemetry.io/otel/semconv/v1.21.0\\ngo.opentelemetry.io/otel/semconv/v1.26.0\\n# go.opentelemetry.io/otel/metric v1.35.0\\n## explicit; go 1.22.0\\ngo.opentelemetry.io/otel/metric\\ngo.opentelemetry.io/otel/metric/embedded\\ngo.opentelemetry.io/otel/metric/noop\\n# go.opentelemetry.io/otel/trace v1.35.0\\n## explicit; go 1.22.0\\ngo.opentelemetry.io/otel/trace\\ngo.opentelemetry.io/otel/trace/embedded\\ngo.opentelemetry.io/otel/trace/internal/telemetry\\ngo.opentelemetry.io/otel/trace/noop\\n# go.uber.org/atomic v1.11.0\\n## explicit; go 1.18\\ngo.uber.org/atomic\\n# go.uber.org/goleak v1.3.0\\n## explicit; go 1.20\\ngo.uber.org/goleak\\ngo.uber.org/goleak/internal/stack\\n# go.uber.org/multierr v1.11.0\\n## explicit; go 1.19\\ngo.uber.org/multierr\\n# go.uber.org/zap v1.27.0\\n## explicit; go 1.19\\ngo.uber.org/zap\\ngo.uber.org/zap/buffer\\ngo.uber.org/zap/internal\\ngo.uber.org/zap/internal/bufferpool\\ngo.uber.org/zap/internal/color\\ngo.uber.org/zap/internal/exit\\ngo.uber.org/zap/internal/pool\\ngo.uber.org/zap/internal/stacktrace\\ngo.uber.org/zap/zapcore\\n# golang.org/x/crypto v0.36.0\\n## explicit; go 1.23.0\\ngolang.org/x/crypto/chacha20\\ngolang.org/x/crypto/chacha20poly1305\\ngolang.org/x/crypto/cryptobyte\\ngolang.org/x/crypto/cryptobyte/asn1\\ngolang.org/x/crypto/hkdf\\ngolang.org/x/crypto/internal/alias\\ngolang.org/x/crypto/internal/poly1305\\ngolang.org/x/crypto/pkcs12\\ngolang.org/x/crypto/pkcs12/internal/rc2\\n# golang.org/x/exp v0.0.0-20250305212735-054e65f0b394\\n## explicit; go 1.23.0\\ngolang.org/x/exp/constraints\\n# golang.org/x/net v0.38.0\\n## explicit; go 1.23.0\\ngolang.org/x/net/http/httpguts\\ngolang.org/x/net/http/httpproxy\\ngolang.org/x/net/http2\\ngolang.org/x/net/http2/hpack\\ngolang.org/x/net/idna\\ngolang.org/x/net/internal/httpcommon\\ngolang.org/x/net/internal/socks\\ngolang.org/x/net/internal/timeseries\\ngolang.org/x/net/proxy\\ngolang.org/x/net/trace\\n# golang.org/x/oauth2 v0.28.0\\n## explicit; go 1.23.0\\ngolang.org/x/oauth2\\ngolang.org/x/oauth2/authhandler\\ngolang.org/x/oauth2/clientcredentials\\ngolang.org/x/oauth2/google\\ngolang.org/x/oauth2/google/externalaccount\\ngolang.org/x/oauth2/google/internal/externalaccountauthorizeduser\\ngolang.org/x/oauth2/google/internal/impersonate\\ngolang.org/x/oauth2/google/internal/stsexchange\\ngolang.org/x/oauth2/internal\\ngolang.org/x/oauth2/jws\\ngolang.org/x/oauth2/jwt\\n# golang.org/x/sync v0.12.0\\n## explicit; go 1.23.0\\ngolang.org/x/sync/errgroup\\ngolang.org/x/sync/semaphore\\n# golang.org/x/sys v0.31.0\\n## explicit; go 1.23.0\\ngolang.org/x/sys/cpu\\ngolang.org/x/sys/plan9\\ngolang.org/x/sys/unix\\ngolang.org/x/sys/windows\\ngolang.org/x/sys/windows/registry\\n# golang.org/x/text v0.23.0\\n## explicit; go 1.23.0\\ngolang.org/x/text/secure/bidirule\\ngolang.org/x/text/transform\\ngolang.org/x/text/unicode/bidi\\ngolang.org/x/text/unicode/norm\\ngolang.org/x/text/width\\n# golang.org/x/time v0.11.0\\n## explicit; go 1.23.0\\ngolang.org/x/time/rate\\n# google.golang.org/api v0.228.0\\n## explicit; go 1.23.0\\ngoogle.golang.org/api/googleapi\\ngoogle.golang.org/api/googleapi/transport\\ngoogle.golang.org/api/iamcredentials/v1\\ngoogle.golang.org/api/internal\\ngoogle.golang.org/api/internal/cert\\ngoogle.golang.org/api/internal/gensupport\\ngoogle.golang.org/api/internal/impersonate\\ngoogle.golang.org/api/internal/third_party/uritemplates\\ngoogle.golang.org/api/iterator\\ngoogle.golang.org/api/option\\ngoogle.golang.org/api/option/internaloption\\ngoogle.golang.org/api/storage/v1\\ngoogle.golang.org/api/transport\\ngoogle.golang.org/api/transport/grpc\\ngoogle.golang.org/api/transport/http\\n# google.golang.org/genproto v0.0.0-20250324211829-b45e905df463\\n## explicit; go 1.23.0\\ngoogle.golang.org/genproto/googleapis/type/date\\ngoogle.golang.org/genproto/googleapis/type/expr\\n# google.golang.org/genproto/googleapis/api v0.0.0-20250324211829-b45e905df463\\n## explicit; go 1.23.0\\ngoogle.golang.org/genproto/googleapis/api\\ngoogle.golang.org/genproto/googleapis/api/annotations\\n# google.golang.org/genproto/googleapis/rpc v0.0.0-20250324211829-b45e905df463\\n## explicit; go 1.23.0\\ngoogle.golang.org/genproto/googleapis/rpc/code\\ngoogle.golang.org/genproto/googleapis/rpc/errdetails\\ngoogle.golang.org/genproto/googleapis/rpc/status\\n# google.golang.org/grpc v1.71.0\n```\n\n----------------------------------------\n\nTITLE: Sorting Time Series Descendingly in MetricsQL\nDESCRIPTION: A transform function that sorts time series returned by the query `q` in descending order based on the value of their last data point. This function is supported by PromQL. See also `sort` and `sort_by_label_desc`.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_130\n\nLANGUAGE: metricsql\nCODE:\n```\nsort_desc(q)\n```\n\n----------------------------------------\n\nTITLE: Changelog Version Entries\nDESCRIPTION: The changelog contains version entries in markdown format, documenting changes across AWS SDK module versions. Each entry includes version number, date, and change details categorized as Features, Bug Fixes, or Dependency Updates.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/aws/aws-sdk-go-v2/service/ssooidc/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# v1.28.8 (2025-01-09)\n\n* **Dependency Update**: Updated to the latest SDK module versions\n\n# v1.28.7 (2024-12-19)\n\n* **Dependency Update**: Updated to the latest SDK module versions\n```\n\n----------------------------------------\n\nTITLE: Benchmarking UvarintSize Performance (Text)\nDESCRIPTION: Displays benchmark results for the package's `UvarintSize` function, which calculates the number of bytes required to varint-encode an integer. The results ('new ns/op') show high efficiency (sub-nanosecond to ~1ns operation time) across different input magnitudes (1-9), indicating substantial performance improvements ('delta' percentage) compared to potentially less optimized calculation methods ('old ns/op').\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/dennwc/varint/README.md#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nbenchmark                    old ns/op     new ns/op     delta\nBenchmarkUvarintSize/1-8     1.71          0.43          -74.85%\nBenchmarkUvarintSize/2-8     2.56          0.57          -77.73%\nBenchmarkUvarintSize/3-8     3.22          0.72          -77.64%\nBenchmarkUvarintSize/4-8     3.74          0.72          -80.75%\nBenchmarkUvarintSize/5-8     4.29          0.57          -86.71%\nBenchmarkUvarintSize/6-8     4.85          0.58          -88.04%\nBenchmarkUvarintSize/7-8     5.43          0.71          -86.92%\nBenchmarkUvarintSize/8-8     6.01          0.86          -85.69%\nBenchmarkUvarintSize/9-8     6.64          1.00          -84.94%\n```\n\n----------------------------------------\n\nTITLE: Getting Grafana Admin Password from Kubernetes Secret - kubectl - Shell\nDESCRIPTION: This shell command retrieves and decodes the Grafana admin password from a Kubernetes secret (vm-grafana) in the monitoring namespace. It is used for initial Grafana login after deployment. Dependencies are kubectl, base64, and the relevant Kubernetes context. The only input is the namespace and secret name; output is the decoded admin password to use for web login.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics-cloud/how-to-monitor-k8s.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nkubectl --namespace monitoring get secret vm-grafana  -o jsonpath=\"{.data.admin-password}\" | base64 -d\n\n```\n\n----------------------------------------\n\nTITLE: Using Grafana Multi-Value Template Variables in GraphiteMertic\nDESCRIPTION: Example of using Grafana multi-value template variables inside the __graphite__ pseudo-label, which gets automatically expanded.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/victoriametrics/changelog/CHANGELOG_2021.md#2025-04-22_snippet_1\n\nLANGUAGE: promql\nCODE:\n```\n{__graphite__=~\"foo.($bar)\"}\n```\n\n----------------------------------------\n\nTITLE: Exponential Calculation with PromQL\nDESCRIPTION: The `exp(q)` function calculates the exponential `e^v` for each point `v` in the time series given by `q`. As a transform function supported by PromQL, it lacks metric names in the output unless customized with the `keep_metric_names` modifier. Primarily, it is used for exponential growth calculations.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_76\n\nLANGUAGE: PromQL\nCODE:\n```\n`exp(q)`\n```\n\n----------------------------------------\n\nTITLE: Using Go Modules Replace Feature for Temporary Migration\nDESCRIPTION: This configuration line uses the Go modules replace feature to redirect the old mapstructure import path to the new version, allowing gradual migration without immediate code changes.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/go-viper/mapstructure/v2/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nreplace github.com/mitchellh/mapstructure => github.com/go-viper/mapstructure v1.6.0\n```\n\n----------------------------------------\n\nTITLE: Reader Configuration Example with Extra Filters\nDESCRIPTION: Example showing the reader configuration with extra_filters parameter that allows applying global filters to all queries, along with TLS and authentication options.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/anomaly-detection/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nreader:\n  extra_filters: \"job=~\\\".*\\\"\"\n  verify_tls: false\n  bearer_token: \"secret-token\"\n  workers: 4\n```\n\n----------------------------------------\n\nTITLE: Checking for Specific Go Error Type (`CallErr`)\nDESCRIPTION: Illustrates how to determine if an error variable (`err`) is of the specific custom type `CallErr` using `errors.As` from the standard Go `errors` package. This allows for type-specific handling of service-side errors.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/AzureAD/microsoft-authentication-library-for-go/apps/errors/error_design.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n```go\nvar callErr CallErr\nif errors.As(err, &callErr) {\n  ...\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Adding VictoriaMetrics Helm Repository\nDESCRIPTION: Adds the VictoriaMetrics Helm repository to install VictoriaMetrics components. This command adds the repository URL to your local Helm configuration.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/docs/guides/k8s-monitoring-via-vm-single/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nhelm repo add vm https://victoriametrics.github.io/helm-charts/\n```\n\n----------------------------------------\n\nTITLE: Using the WithNoFollow Glob Option in Go\nDESCRIPTION: This function signature defines the `WithNoFollow` option for `Glob`, `GlobWalk`, or `FilepathGlob`. This prevents the globbing operation from following symbolic links during filesystem traversal. However, due to `io/fs` limitations, symlinks specified in the non-wildcard part of the pattern (e.g., `path/to/symlink/*`) will still be followed.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/github.com/bmatcuk/doublestar/v4/README.md#2025-04-22_snippet_11\n\nLANGUAGE: go\nCODE:\n```\nWithNoFollow()\n```\n\n----------------------------------------\n\nTITLE: Disabling Timestamps in Stdout Log Exporter in Go\nDESCRIPTION: The stdout log exporter won't print timestamps when the WithoutTimestamps option is set.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-22_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\nstdoutlog.New(stdoutlog.WithoutTimestamps())\n```\n\n----------------------------------------\n\nTITLE: Using prometheus_buckets() Transform Function in MetricsQL\nDESCRIPTION: Converts VictoriaMetrics histogram buckets with vmrange labels to Prometheus histogram buckets with le labels, useful for building heatmaps in Grafana.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_120\n\nLANGUAGE: markdown\nCODE:\n```\n#### prometheus_buckets\n\n`prometheus_buckets(buckets)` is a [transform function](#transform-functions), which converts\n[VictoriaMetrics histogram buckets](https://valyala.medium.com/improving-histogram-usability-for-prometheus-and-grafana-bc7e5df0e350) with `vmrange` labels\nto Prometheus histogram buckets with `le` labels. This may be useful for building heatmaps in Grafana.\n\nSee also [histogram_quantile](#histogram_quantile) and [buckets_limit](#buckets_limit).\n```\n\n----------------------------------------\n\nTITLE: Initializing Google Cloud Storage Client in Go\nDESCRIPTION: This snippet demonstrates how to create a new Google Cloud Storage client using `storage.NewClient`. It requires a `context` (ctx) and handles potential errors during client initialization by logging a fatal error.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/vendor/cloud.google.com/go/storage/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n```go\nclient, err := storage.NewClient(ctx)\nif err != nil {\n\tlog.Fatal(err)\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Result of Implicit default_rollup Wrapping for Binary Operation (MetricsQL)\nDESCRIPTION: Shows the result `default_rollup(foo) + default_rollup(bar)` after VictoriaMetrics implicitly wraps the selectors in the expression `foo + bar`.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmui/packages/vmui/src/assets/MetricsQL.md#2025-04-22_snippet_160\n\nLANGUAGE: MetricsQL\nCODE:\n```\ndefault_rollup(foo) + default_rollup(bar)\n```\n\n----------------------------------------\n\nTITLE: Empty Series Removal\nDESCRIPTION: Drops empty series from the query results. Useful when default operator should only apply to non-empty series.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vlselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_88\n\nLANGUAGE: promql\nCODE:\n```\ndrop_empty_series(temperature < 30) default 42\n```\n\n----------------------------------------\n\nTITLE: Using histogram_over_time with histogram_quantile\nDESCRIPTION: Calculates median temperature by country over 24 hours using histogram quantiles\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmselect/vmui/assets/MetricsQL-DGylhASK.md#2025-04-22_snippet_32\n\nLANGUAGE: promql\nCODE:\n```\nhistogram_quantile(0.5, sum(histogram_over_time(temperature[24h])) by (vmrange,country))\n```\n\n----------------------------------------\n\nTITLE: Configuring Robot.txt for Unrestricted Web Crawler Access\nDESCRIPTION: This snippet configures the robots.txt file to allow unrestricted access to all web crawlers. It specifies that all user agents are permitted and no paths are disallowed.\nSOURCE: https://github.com/victoriametrics/victoriametrics/blob/master/app/vmselect/vmui/robots.txt#2025-04-22_snippet_0\n\nLANGUAGE: robotstxt\nCODE:\n```\n# https://www.robotstxt.org/robotstxt.html\nUser-agent: *\nDisallow:\n```"
  }
]