[
  {
    "owner": "timefoldai",
    "repo": "timefold-solver",
    "content": "TITLE: Solving with Timefold Solver in Python\nDESCRIPTION: This Python code demonstrates how to solve a planning problem using Timefold Solver. It creates a `SolverConfig`, sets the solution and entity classes, configures the score director factory with the constraint provider, and sets a termination condition. A `SolverFactory` is used to build the solver, which is then used to solve the problem.\nSOURCE: https://github.com/timefoldai/timefold-solver/blob/main/python/README.md#_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nfrom timefold.solver import SolverFactory\nfrom timefold.solver.config import SolverConfig, TerminationConfig, ScoreDirectorFactoryConfig, Duration\nfrom constraints import define_constraints\nfrom domain import TimeTable, Lesson, generate_problem\n\nsolver_config = SolverConfig(\n    solution_class=TimeTable,\n    entity_class_list=[Lesson],\n    score_director_factory_config=ScoreDirectorFactoryConfig(\n        constraint_provider_function=define_constraints\n    ),\n    termination_config=TerminationConfig(\n        spent_limit=Duration(seconds=30)\n    )\n)\n\nsolver = SolverFactory.create(solver_config).build_solver()\nsolution = solver.solve(generate_problem())\n```\n\n----------------------------------------\n\nTITLE: Defining Constraints in Python\nDESCRIPTION: This Python code defines constraints using the `ConstraintFactory`. The `define_constraints` function is decorated with `@constraint_provider` and returns a list of constraints. The `room_conflict` function creates a constraint that penalizes having two lessons in the same room at the same time.\nSOURCE: https://github.com/timefoldai/timefold-solver/blob/main/python/README.md#_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nfrom domain import Lesson\nfrom timefold.solver.score import (Joiners, HardSoftScore, ConstraintFactory,\n                                   Constraint, constraint_provider)\n\n@constraint_provider\ndef define_constraints(constraint_factory: ConstraintFactory) -> list[Constraint]:\n    return [\n        # Hard constraints\n        room_conflict(constraint_factory),\n        # Other constraints here...\n    ]\n\ndef room_conflict(constraint_factory: ConstraintFactory) -> Constraint:\n    # A room can accommodate at most one lesson at the same time.\n    return (\n        constraint_factory.for_each_unique_pair(Lesson,\n                # ... in the same timeslot ...\n                Joiners.equal(lambda lesson: lesson.timeslot),\n                # ... in the same room ...\n                Joiners.equal(lambda lesson: lesson.room))\n            .penalize(HardSoftScore.ONE_HARD)\n            .as_constraint(\"Room conflict\")\n    )\n```\n\n----------------------------------------\n\nTITLE: Defining Planning Entities in Python\nDESCRIPTION: This Python code defines a `Lesson` class as a Planning Entity using the `@planning_entity` decorator. Planning Entities have planning variables that the solver can modify. `PlanningId` is used to uniquely identify entity, and `PlanningVariable` specifies which fields the solver can change.\nSOURCE: https://github.com/timefoldai/timefold-solver/blob/main/python/README.md#_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nfrom dataclasses import dataclass, field\nfrom typing import Annotated\nfrom timefold.solver.domain import planning_entity, PlanningId, PlanningVariable\n\n@planning_entity\n@dataclass\nclass Lesson:\n    id: Annotated[int, PlanningId]\n    subject: str\n    teacher: str\n    student_group: str\n    timeslot: Annotated[Timeslot, PlanningVariable] = field(default=None)\n    room: Annotated[Room, PlanningVariable] = field(default=None)\n```\n\n----------------------------------------\n\nTITLE: Defining Planning Solution in Python\nDESCRIPTION: This Python code defines a `TimeTable` class as a Planning Solution using the `@planning_solution` decorator.  The `ValueRangeProvider`, `ProblemFactCollectionProperty`, `PlanningEntityCollectionProperty`, and `PlanningScore` annotations are used to denote fields containing possible planning values, problem facts, planning entities, and the solution's score, respectively. The solver will set the PlanningScore during execution.\nSOURCE: https://github.com/timefoldai/timefold-solver/blob/main/python/README.md#_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nfrom dataclasses import dataclass, field\nfrom typing import Annotated\nfrom timefold.solver.domain import (planning_solution, ProblemFactCollectionProperty, ValueRangeProvider,\n                                    PlanningEntityCollectionProperty, PlanningScore)\nfrom timefold.solver.score import HardSoftScore\n\n@planning_solution\n@dataclass\nclass TimeTable:\n    timeslots: Annotated[list[Timeslot], ProblemFactCollectionProperty, ValueRangeProvider]\n    rooms: Annotated[list[Room], ProblemFactCollectionProperty, ValueRangeProvider]\n    lessons: Annotated[list[Lesson], PlanningEntityCollectionProperty]\n    score: Annotated[HardSoftScore, PlanningScore] = field(default=None)\n```\n\n----------------------------------------\n\nTITLE: Defining Problem Facts in Python\nDESCRIPTION: This Python code defines a `Timeslot` class as a Problem Fact using the `dataclass` decorator. Problem Facts represent unchanging data within the problem domain. The class includes attributes for ID, day of the week, start time, and end time.\nSOURCE: https://github.com/timefoldai/timefold-solver/blob/main/python/README.md#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nfrom dataclasses import dataclass\nfrom datetime import time\n\n@dataclass\nclass Timeslot:\n    id: int\n    day_of_week: str\n    start_time: time\n    end_time: time\n```\n\n----------------------------------------\n\nTITLE: Installing Java with Sdkman (Shell)\nDESCRIPTION: This snippet demonstrates how to install JDK 17 or later using Sdkman. The `JAVA_HOME` environment variable must be configured to point to the JDK installation directory for Timefold Solver to work correctly.\nSOURCE: https://github.com/timefoldai/timefold-solver/blob/main/python/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n$ sdk install java\n```\n\n----------------------------------------\n\nTITLE: Installing Timefold Solver from Git (Shell)\nDESCRIPTION: This shell command installs Timefold Solver directly from the GitHub repository. It's intended for scenarios where you've built Timefold Solver from source. Requires git and pip.\nSOURCE: https://github.com/timefoldai/timefold-solver/blob/main/python/README.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n$ pip install git+https://github.com/TimefoldAI/timefold-solver.git\n```"
  }
]