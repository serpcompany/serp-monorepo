[
  {
    "owner": "mervinpraison",
    "repo": "praisonai",
    "content": "TITLE: Setting Up Your Environment with Python and PraisonAI\nDESCRIPTION: This Python snippet shows how to set up your development environment by importing the necessary package and configuring the OpenAI API key. It highlights setting environment variables as a recommended practice.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/course/agents/11-creating-your-first-agent.mdx#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom praisonaiagents import Agent\n\n# Set your API key\n# Option 1: Set it in your environment (recommended)\n# export OPENAI_API_KEY=your_key_here\n\n# Option 2: Set it in your code (not recommended for production)\n# os.environ[\"OPENAI_API_KEY\"] = \"your_key_here\"\n```\n\n----------------------------------------\n\nTITLE: Initializing a Multi-Agent System in PraisonAI with Python\nDESCRIPTION: Using the PraisonAI library, this code snippet demonstrates how to initialize a multi-agent system. It defines three distinct agents with specialized tasks and begins the collaborative process. Dependencies: PraisonAI library, Agent, and PraisonAIAgents classes.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/course/agents/07-multi-agent-systems.mdx#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent, PraisonAIAgents\n\n# Create individual agents\nresearch_agent = Agent(\n    name=\\\"Researcher\\\",\n    instructions=\\\"Research the latest trends in renewable energy\\\"\n)\n\nanalysis_agent = Agent(\n    name=\\\"Analyst\\\",\n    instructions=\\\"Analyze the research findings and identify key insights\\\"\n)\n\nwriting_agent = Agent(\n    name=\\\"Writer\\\", \n    instructions=\\\"Create a clear, engaging report based on the analysis\\\"\n)\n\n# Create a multi-agent system\nagents = PraisonAIAgents(\n    agents=[research_agent, analysis_agent, writing_agent]\n)\n\n# Start the agents\nagents.start()\n```\n\n----------------------------------------\n\nTITLE: Creating Single Agent in Python\nDESCRIPTION: Implementation of a single AI agent for text summarization using PraisonAI Agents in Python.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/quickstart.mdx#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent, PraisonAIAgents\n\n# Create a simple agent\nsummarise_agent = Agent(instructions=\"Summarise Photosynthesis\")\n\n# Run the agent\nagents = PraisonAIAgents(agents=[summarise_agent])\nagents.start()\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Web Search Tool in Python\nDESCRIPTION: This snippet demonstrates how to create a simple web search tool within an AI agent framework. The function takes a query string as input and returns a formatted string indicating the search results. This serves as a basic implementation of how agents can utilize external capabilities to fetch information.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/course/agents/05-agent-tools.mdx#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent\n\ndef web_search(query):\n    # Simplified example\n    return f\"Results for: {query}\"\n\nagent = Agent(\n    instructions=\"Research assistant\",\n    tools=[web_search]\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Agent Process (Text)\nDESCRIPTION: This text snippet demonstrates a good example of defining the process an agent should follow. It outlines the specific steps to be taken, from data analysis to risk assessment and recommendations, guiding the agent's approach. It gives a clear order of operations.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/course/agents/04-agent-instructions.mdx#2025-04-19_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nFirst analyze the data trends, then identify key risk factors, and finally make recommendations based on the client's risk tolerance.\n```\n\n----------------------------------------\n\nTITLE: Installing PraisonAI Agents\nDESCRIPTION: Installs the core PraisonAI agent package using pip. This is the first step to use the PraisonAI agents and it is a prerequisite for all other code snippets.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/quickstart.mdx#2025-04-19_snippet_9\n\nLANGUAGE: Terminal\nCODE:\n```\npip install praisonaiagents\n```\n\n----------------------------------------\n\nTITLE: Multiple Agents Implementation in JavaScript\nDESCRIPTION: Creating and running multiple AI agents for research and summarization using PraisonAI in JavaScript.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/quickstart.mdx#2025-04-19_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst { Agent, PraisonAIAgents } = require('praisonai');\n\nconst researchAgent = new Agent({ instructions: 'Research about AI' });\nconst summariseAgent = new Agent({ instructions: 'Summarise research agent\\'s findings' });\n\nconst agents = new PraisonAIAgents({ agents: [researchAgent, summariseAgent] });\nagents.start();\n```\n\n----------------------------------------\n\nTITLE: Installing duckduckgo_search\nDESCRIPTION: Instruction for installing the duckduckgo_search python package for internet search capability.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/mini.mdx#2025-04-19_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\npip install duckduckgo_search\n```\n\n----------------------------------------\n\nTITLE: Starting the AI Agent to Answer Queries\nDESCRIPTION: This snippet illustrates how to initiate the AI agent to process a specific user query. It also shows displaying the agent's response, assuming correct setup and internet connectivity.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/course/agents/11-creating-your-first-agent.mdx#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Start the agent with a specific query\nresponse = research_assistant.start(\"Explain how solar panels work in simple terms\")\n\n# Print the response\nprint(response)\n```\n\n----------------------------------------\n\nTITLE: Initializing Basic PraisonAI Agent\nDESCRIPTION: Python code to create and use a basic AI agent for generating content\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/introduction.mdx#2025-04-19_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent\nagent = Agent(instructions=\"Your are a helpful AI assistant\")\nagent.chat(\"Write a movie script about a robot in Mars\")\n```\n\n----------------------------------------\n\nTITLE: Configuring a Tool with Parameters in PraisonAI\nDESCRIPTION: This snippet demonstrates how to define a configurable tool in PraisonAI using Python. It showcases the use of type hints and docstrings to clearly define input parameters (query, max_results, timeout) and their expected types, as well as the return type.  This ensures clarity and ease of use for the tool.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/concepts/tools.mdx#2025-04-19_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ndef configured_tool(\n    query: str,\n    max_results: int = 5,\n    timeout: int = 10\n) -> List[Dict]:\n    \"\"\"\n    Example of a configurable tool\n    \n    Args:\n        query (str): Search query\n        max_results (int): Maximum number of results\n        timeout (int): Request timeout in seconds\n        \n    Returns:\n        List[Dict]: Search results\n    \"\"\"\n    # Tool implementation\n    pass\n```\n\n----------------------------------------\n\nTITLE: Creating a Travel Planning Agent in Python\nDESCRIPTION: Complete Python script for setting up a Travel Planning Agent that can search for flights and hotels, generate travel plans, and save the results to a file.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/agents/planning.mdx#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent, Tools\nfrom praisonaiagents.tools import duckduckgo\n\n# Create Planning Agent\nplanning_agent = Agent(\n    name=\"TravelPlanner\",\n    role=\"Travel Planning Specialist\",\n    goal=\"Create comprehensive travel plans and itineraries\",\n    instructions=\"You are a Planning Agent\",\n    tools=[duckduckgo]\n)\n\n# Generate travel plan\nresponse = planning_agent.start(\n    \"I want to go to London next week, find me a good hotel and flight\"\n)\n\n# Save plan\nwith open('travel_plan.txt', 'w') as f:\n    f.write(response)\n```\n\n----------------------------------------\n\nTITLE: Efficient Asynchronous Processing with Resource Management\nDESCRIPTION: This function illustrates how to manage resources efficiently during asynchronous processing using a semaphore. It limits the number of concurrent asynchronous operations, preventing resource exhaustion and ensuring stable performance.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/async.mdx#2025-04-19_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nasync def efficient_processing():\n    semaphore = asyncio.Semaphore(5)\n    async with semaphore:\n        result = await agent.achat(\"Process within limits\")\n    return result\n```\n\n----------------------------------------\n\nTITLE: Installing PraisonAI Package with pip (Python)\nDESCRIPTION: Alternative installation method for the PraisonAI package using pip for Python environments. Suitable for general Python development.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/installation.mdx#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install praisonai\n```\n\n----------------------------------------\n\nTITLE: Initializing and Running PraisonAI Analysis\nDESCRIPTION: Main execution code that sets up PraisonAI instance with YAML configuration, configures OpenAI API credentials, and runs the analysis process.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/cookbooks/yaml/reddit_search_analysis_agents.ipynb#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom praisonai import PraisonAI\nfrom google.colab import userdata\n\n# Create a PraisonAI instance with the agent_yaml content\npraisonai = PraisonAI(agent_yaml=agent_yaml, tools=[RedditSearchRun])\n\n# Add OPENAI_API_KEY Secrets to Google Colab on the Left Hand Side 🔑 or Enter Manually Below\nos.environ[\"OPENAI_API_KEY\"] = userdata.get('OPENAI_API_KEY') or \"ENTER OPENAI_API_KEY HERE\"\nos.environ[\"OPENAI_MODEL_NAME\"] = \"gpt-4o-mini\"\n\n# Run PraisonAI\nresult = praisonai.run()\n\n# Print the result\nprint(result) # 2/10\n```\n\n----------------------------------------\n\nTITLE: Agent Configuration Example\nDESCRIPTION: This code snippet shows an example of configuring an agent with a specific role, goal, and set of tools.  This example is useful to show how an agent could be configured with a variety of tools.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/pandas_tools.mdx#2025-04-19_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nAgent(\n        name=\"DataScientist\",\n        role=\"Data Analysis Specialist\",\n        goal=\"Extract meaningful insights from data\",\n        tools=[read_csv, read_excel, write_csv, write_excel, filter_data, get_summary, group_by, pivot_table]\n    )\n```\n\n----------------------------------------\n\nTITLE: Running Python Script for Agents\nDESCRIPTION: This snippet describes how to execute the Python script containing the setup for PraisonAI agents, enabling them to start their workflows.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/langchain.mdx#2025-04-19_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npython app.py\n```\n\n----------------------------------------\n\nTITLE: Integrating Tools into an AI Agent\nDESCRIPTION: This snippet demonstrates the complete process of integrating tools into an AI agent. It iterates through a list of tool names, retrieves the corresponding definitions from `tools_dict`, separates the callable function, stores the function for execution, stores the API definition, and grants the agent access to the functions. Finally it creates a `Task` with the `task_tools` for OpenAI, and the agent with access to the `role_tools`.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/praisonai/ui/tools.md#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n```python\n# Initialize empty lists\nrole_tools = []  # For executable functions\ntask_tools = []  # For OpenAI API definitions\n\n# Process each tool\nfor tool_name in tools_list:\n    if tool_name in tools_dict:\n        # 1. Get the tool definition\n        tool_def = tools_dict[tool_name].copy()\n        \n        # 2. Separate the callable function\n        callable_func = tool_def.pop(\"callable\")\n        \n        # 3. Store the function for execution\n        role_tools.append(callable_func)\n        \n        # 4. Store the API definition\n        task_tools.append(tool_def)\n        \n        # 5. Give agent access to functions\n        agent.tools = role_tools\n\n# Create task with API definitions\ntask = Task(\n    description=\"...\",\n    tools=task_tools,  # OpenAI API will use these\n    agent=agent,       # Agent has access to callable functions\n    # ... other parameters ...\n)\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring PraisonAI Agent with Detailed LLM Settings in Python\nDESCRIPTION: Demonstrates how to create a PraisonAI Agent with a detailed LLM configuration. This example includes various parameters for fine-tuning the language model's behavior, such as temperature, timeout, and response format.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/models.mdx#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent\n\nllm_config = {\n    \"model\": \"gemini/gemini-1.5-flash-latest\",  # Model name without provider prefix\n    \n    # Core settings\n    \"temperature\": 0.7,                # Controls randomness (like temperature)\n    \"timeout\": 30,                 # Timeout in seconds\n    \"top_p\": 0.9,                    # Nucleus sampling parameter\n    \"max_tokens\": 1000,               # Max tokens in response\n    \n    # Advanced parameters\n    \"presence_penalty\": 0.1,         # Penalize repetition of topics (-2.0 to 2.0)\n    \"frequency_penalty\": 0.1,        # Penalize token repetition (-2.0 to 2.0)\n    \n    # API settings (optional)\n    \"api_key\": None,                 # Your API key (or use environment variable)\n    \"base_url\": None,                # Custom API endpoint if needed\n    \n    # Response formatting\n    \"response_format\": {             # Force specific response format\n        \"type\": \"text\"               # Options: \"text\", \"json_object\"\n    },\n    \n    # Additional controls\n    \"seed\": 42,                      # For reproducible responses\n    \"stop_phrases\": [\"##\", \"END\"],   # Custom stop sequences\n}\n\nagent = Agent(\n    instructions=\"You are a helpful Assistant.\"\n    llm=llm_config\n)\nagent.start()\n```\n\n----------------------------------------\n\nTITLE: Chaining Tools in PraisonAI\nDESCRIPTION: This example illustrates how to chain multiple tools together within PraisonAI. It shows the sequential execution of `internet_search_tool`, `process_tool`, and `format_tool`, where the output of one tool becomes the input for the next.  This enables complex workflows by combining simpler, specialized tools.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/concepts/tools.mdx#2025-04-19_snippet_11\n\nLANGUAGE: python\nCODE:\n```\ndef chain_tools(input_data: str) -> Dict:\n    \"\"\"\n    Example of chaining multiple tools\n    \n    Args:\n        input_data (str): Input data\n        \n    Returns:\n        Dict: Processed results\n    \"\"\"\n    # 1. Search for data\n    search_results = internet_search_tool(input_data)\n    \n    # 2. Process results\n    processed_data = process_tool(search_results)\n    \n    # 3. Format output\n    return format_tool(processed_data)\n```\n\n----------------------------------------\n\nTITLE: Implementing Research Agent Script\nDESCRIPTION: Complete Python script for creating and using a research agent to conduct research and save findings to a file. Uses DuckDuckGo for web searches and includes agent configuration.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/agents/research.mdx#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent, Tools\nfrom praisonaiagents.tools import duckduckgo\n\n# Create Research Agent\nresearch_agent = Agent(\n    name=\"ResearchAssistant\",\n    role=\"Research Specialist\",\n    goal=\"Conduct comprehensive research and analysis\",\n    instructions=\"You are a Research Agent\",\n    tools=[duckduckgo]\n)\n\n# Conduct research\nresponse = research_agent.start(\n    \"Research about AI developments in 2024\"\n)\n\n# Save research findings\nwith open('research_report.md', 'w') as f:\n    f.write(response)\n```\n\n----------------------------------------\n\nTITLE: Run Single Asynchronous Task\nDESCRIPTION: This function demonstrates running a single asynchronous task using PraisonAIAgents. It initializes an agent and task, then executes them sequentially, printing the result.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/async.mdx#2025-04-19_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nasync def run_single_task():\n    \"\"\"Run single async task\"\"\"\n    print(\"\\nRunning Single Async Task...\")\n    agents = PraisonAIAgents(\n        agents=[async_agent],\n        tasks=[async_task],\n        verbose=1,\n        process=\"sequential\"\n    )\n    result = await agents.astart()\n    print(f\"Single Task Result: {result}\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Conversational Agent in Python\nDESCRIPTION: Initializes a conversational agent with specific instructions for maintaining a friendly and helpful interaction. Demonstrates starting and continuing a conversation with context preservation.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/course/agents/14-conversational-agents.mdx#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent\n\n# Create a conversational agent\nchat_agent = Agent(\n    name=\"Conversational Assistant\",\n    instructions=\"\"\"\n    You are a friendly, helpful conversational assistant.\n    \n    When chatting with users:\n    1. Maintain a warm, friendly tone\n    2. Remember information shared earlier in the conversation\n    3. Ask clarifying questions when needed\n    4. Keep responses concise but informative\n    5. Be helpful while respecting boundaries\n    \"\"\"\n)\n\n# Start a conversation\nresponse = chat_agent.start(\"Hi there! My name is Jamie.\")\nprint(response)\n\n# Continue the conversation\nresponse = chat_agent.continue(\"What can you help me with today?\")\nprint(response)\n\n# The agent should remember the user's name\nresponse = chat_agent.continue(\"Can you remember my name?\")\nprint(response)\n```\n\n----------------------------------------\n\nTITLE: Setting up Multi-Agent System with PraisonAI\nDESCRIPTION: Creates a complex multi-agent knowledge system using PraisonAI for task-driven information retrieval from PDFs through vector store integration.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/chat-with-pdf.mdx#2025-04-19_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent, Task, PraisonAIAgents\nimport logging\nimport os\n\n# Configure logging\nlogging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')\nlogger = logging.getLogger(__name__)\n\n# Define the configuration for the Knowledge instance\nconfig = {\n    \"vector_store\": {\n        \"provider\": \"chroma\",\n        \"config\": {\n            \"collection_name\": \"praison\",\n            \"path\": \".praison\",\n        }\n    }\n}\n\n# Create an agent with knowledge capabilities\nknowledge_agent = Agent(\n    name=\"KnowledgeAgent\",\n    role=\"Information Specialist\",\n    goal=\"Store and retrieve knowledge efficiently\",\n    backstory=\"Expert in managing and utilizing stored knowledge\",\n    knowledge=[\"sample.pdf\"], # Indexing\n    knowledge_config=config, # Configuration\n    verbose=True\n)\n\n# Define a task for the agent\nknowledge_task = Task(\n    name=\"knowledge_task\",\n    description=\"Who is Mervin Praison?\",\n    expected_output=\"Answer to the question\",\n    agent=knowledge_agent # Agent\n)\n\n# Create and start the agents\nagents = PraisonAIAgents(\n    agents=[knowledge_agent],\n    tasks=[knowledge_task],\n    process=\"sequential\",\n    user_id=\"user1\" # User ID\n)\n\n# Start execution\nresult = agents.start() # Retrieval\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic RAG Agent in Python\nDESCRIPTION: This Python snippet illustrates how to initialize a basic RAG agent with specific roles and configuration for performing knowledge retrieval tasks.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/rag.mdx#2025-04-19_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent, Task, PraisonAIAgents\n\n# Define the configuration for the Knowledge instance\nconfig = {\n    \"vector_store\": {\n        \"provider\": \"chroma\",\n        \"config\": {\n            \"collection_name\": \"praison\",\n            \"path\": \".praison\"\n        }\n    }\n}\n\n# Create an agent\nrag_agent = Agent(\n    name=\"RAG Agent\",\n    role=\"Information Specialist\",\n    goal=\"Retrieve knowledge efficiently\",\n    llm=\"gpt-4o-mini\"\n)\n\n# Define a task for the agent\nrag_task = Task(\n    name=\"RAG Task\",\n    description=\"What is KAG?\",\n    expected_output=\"Answer to the question\",\n    agent=rag_agent,\n    context=[config] # Retrieval : Vector Database provided as context\n)\n\n# Build Agents\nagents = PraisonAIAgents(\n    agents=[rag_agent],\n    tasks=[rag_task],\n    user_id=\"user1\"\n)\n\n# Start Agents\nagents.start()\n```\n\n----------------------------------------\n\nTITLE: Single Agent Implementation in JavaScript\nDESCRIPTION: Creating and running a single AI assistant agent using PraisonAI in JavaScript.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/quickstart.mdx#2025-04-19_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst { Agent } = require('praisonai');\nconst agent = new Agent({ instructions: 'You are a helpful AI assistant' });\nagent.start('Write a movie script about a robot in Mars');\n```\n\n----------------------------------------\n\nTITLE: Creating Python Application - Python\nDESCRIPTION: This code snippet outlines the basic setup for an application that creates AI agents which can write and execute Python code. It includes agent creation, task definition, and execution handling with error management.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/codeagent.mdx#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent, Task, PraisonAIAgents\nfrom e2b_code_interpreter import Sandbox\n\ndef code_interpreter(code: str):\n    print(f\"\\n{'='*50}\\n> Running following AI-generated code:\\n{code}\\n{'='*50}\")\n    exec_result = Sandbox().run_code(code)\n    if exec_result.error:\n        print(\"[Code Interpreter error]\", exec_result.error)\n        return {\"error\": str(exec_result.error)}\n    else:\n        results = []\n        for result in exec_result.results:\n            if hasattr(result, '__iter__'):\n                results.extend(list(result))\n            else:\n                results.append(str(result))\n        logs = {\"stdout\": list(exec_result.logs.stdout), \"stderr\": list(exec_result.logs.stderr)}\n        return json.dumps({\"results\": results, \"logs\": logs})\n\n# Create code agent\ncode_agent = Agent(\n    role=\"Code Developer\",\n    goal=\"Write and execute Python code\",\n    backstory=\"Expert Python developer with strong coding skills\",\n    tools=[code_interpreter],\n    verbose=True\n)\n\n# Create a task\ntask = Task(\n    description=\"Write and execute a Python script to analyze data\",\n    expected_output=\"Working Python script with execution results\",\n    agent=code_agent\n)\n\n# Create and start the agents\nagents = PraisonAIAgents(\n    agents=[code_agent],\n    tasks=[task],\n    process=\"sequential\",\n    verbose=2\n)\n\n# Start execution\nagents.start()\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Agents\nDESCRIPTION: Create multiple AI agents that work together. The `research_agent` uses the internet search tool to research about AI in 2024, and the `summarise_agent` summarizes the findings.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/mini.mdx#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Agent with Internet Search Tool\nfrom praisonaiagents import Agent, PraisonAIAgents\nresearch_agent = Agent(instructions=\"Research about AI 2024\", tools=[Tools.internet_search])\nsummarise_agent = Agent(instructions=\"Summarise research agent's findings\")\nagents = PraisonAIAgents(agents=[research_agent, summarise_agent])\nagents.start()\n```\n\n----------------------------------------\n\nTITLE: Defining Workflow for Multi-Agent Collaboration\nDESCRIPTION: This snippet outlines the workflow for how the agents will interact to create a blog post on a defined topic. It specifies the tasks assigned to each agent in the content creation process.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/course/agents/13-building-multi-agent-system.mdx#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Define a topic\ntopic = \"The Benefits of Regular Exercise\"\n\n# Start the multi-agent process\nresults = content_team.start(\n    f\"\"\"\n    Task: Create a comprehensive blog post about {topic}\n    \n    Process:\n    1. Researcher: Research {topic} and provide key information including:\n       - Main benefits of exercise (physical and mental)\n       - Recommended exercise guidelines\n       - Scientific studies supporting the benefits\n       - Common misconceptions\n    \n    2. Writer: Use the research to create a 500-word blog post about {topic} with:\n       - An engaging introduction\n       - Clear sections with headings\n       - Practical advice for readers\n       - A compelling conclusion\n    \n    3. Editor: Review and improve the blog post by:\n       - Correcting any errors\n       - Enhancing clarity and flow\n       - Ensuring a consistent tone\n       - Making the content more engaging\n    \"\"\"\n)\n\n# Print the final result\nprint(results)\n```\n\n----------------------------------------\n\nTITLE: Creating a Configuration File for Agents - YAML\nDESCRIPTION: This YAML configuration specifies the details for an agent that writes a movie script, including its role, goals, and the tools it can use.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/tools.mdx#2025-04-19_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nframework: praisonai\ntopic: create movie script about cat in mars\nroles:\n  scriptwriter:\n    backstory: Expert in dialogue and script structure, translating concepts into\n      scripts.\n    goal: Write a movie script about a cat in Mars\n    role: Scriptwriter\n    tools:\n      - internet_search_tool # <-- Tool assigned to Agent here\n    tasks:\n      scriptwriting_task:\n        description: Turn the story concept into a production-ready movie script,\n          including dialogue and scene details.\n        expected_output: Final movie script with dialogue and scene details.\n```\n\n----------------------------------------\n\nTITLE: Advanced Async Tasks and Tools in Python\nDESCRIPTION: This Python snippet demonstrates advanced use of async tasks, including custom tool definitions with DuckDuckGo, use of asyncio for simulated delays, and task callbacks for processing output. Dependencies include praisonaiagents, duckduckgo_search, and pydantic.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/async.mdx#2025-04-19_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nimport time\nfrom typing import List, Dict\nfrom praisonaiagents import Agent, Task, PraisonAIAgents, TaskOutput\nfrom duckduckgo_search import DDGS\nfrom pydantic import BaseModel\n\n# 1. Define async tool\nclass SearchResult(BaseModel):\n    query: str\n    results: List[Dict[str, str]]\n    total_results: int\n\nasync def async_search_tool(query: str) -> Dict:\n    \"\"\"\n    Asynchronous search using DuckDuckGo.\n    Args:\n        query (str): The search query.\n    Returns:\n        dict: Search results in SearchResult model format\n    \"\"\"\n    await asyncio.sleep(1)  # Simulate network delay\n    try:\n        results = []\n        ddgs = DDGS()\n        for result in ddgs.text(keywords=query, max_results=5):\n            results.append({\n                \"title\": result.get(\"title\", \"\"),\n                \"url\": result.get(\"href\", \"\"),\n                \"snippet\": result.get(\"body\", \"\")\n            })\n        \n        # Format response to match SearchResult model\n        return {\n            \"query\": query,\n            \"results\": results,\n            \"total_results\": len(results)\n        }\n    except Exception as e:\n        print(f\"Error during async search: {e}\")\n        return {\n            \"query\": query,\n            \"results\": [],\n            \"total_results\": 0\n        }\n\n# 2. Define async callback\nasync def async_callback(output: TaskOutput):\n    await asyncio.sleep(1)  # Simulate processing\n    if output.output_format == \"JSON\":\n        print(f\"Processed JSON result: {output.json_dict}\")\n    elif output.output_format == \"Pydantic\":\n        print(f\"Processed Pydantic result: {output.pydantic}\")\n\n# 3. Create specialized agents\nasync_agent = Agent(\n    name=\"AsyncSearchAgent\",\n    role=\"Asynchronous Search Specialist\",\n    goal=\"Perform fast and efficient asynchronous searches with structured results\",\n    backstory=\"Expert in parallel search operations and data retrieval\",\n    tools=[async_search_tool],\n    self_reflect=False,\n    verbose=True,\n    markdown=True\n)\n\nsummary_agent = Agent(\n    name=\"SummaryAgent\",\n    role=\"Research Synthesizer\",\n    goal=\"Create comprehensive summaries and identify patterns across multiple search results\",\n    backstory=\"\"\"Expert in analyzing and synthesizing information from multiple sources.\nSkilled at identifying patterns, trends, and connections between different topics.\nSpecializes in creating clear, structured summaries that highlight key insights.\"\"\",\n    self_reflect=True,  # Enable self-reflection for better summary quality\n    verbose=True,\n    markdown=True\n)\n\n# 4. Create async tasks\nasync_task = Task(\n    name=\"async_search\",\n    description=\"\"\"Search for 'Async programming' and return results in the following JSON format:\n{\n    \"query\": \"the search query\",\n    \"results\": [\n        {\n            \"title\": \"result title\",\n            \"url\": \"result url\",\n            \"snippet\": \"result snippet\"\n        }\n    ],\n    \"total_results\": number of results\n}\"\"\",\n    expected_output=\"SearchResult model with query details and results\",\n    agent=async_agent,\n    async_execution=True,\n    callback=async_callback,\n    output_pydantic=SearchResult\n)\n```\n\n----------------------------------------\n\nTITLE: Installing PraisonAI Package with npm\nDESCRIPTION: Command to install the PraisonAI package from npm, which is required before running any of the examples.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/src/praisonai-ts/examples/concepts/README.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install praisonai\n```\n\n----------------------------------------\n\nTITLE: Initializing PraisonAI Agent with Internet Search Tool\nDESCRIPTION: Python code to create and use an AI agent with internet search capabilities\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/introduction.mdx#2025-04-19_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent, Tools\nagent = Agent(instructions=\"Your are a helpful AI assistant\", tools=[Tools.internet_search])\nagent.chat(\"Write a movie script about a robot in Mars\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Python Agent - Python\nDESCRIPTION: Defines a Python execution agent with a specific role, goal, and tools for executing Python code. This agent is set up to perform tasks related to Python code execution while having expert knowledge in the area.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/python_tools.mdx#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\npython_agent = Agent(\n    name=\"PythonExecutor\",\n    role=\"Python Code Specialist\",\n    goal=\"Execute Python code efficiently and safely.\",\n    backstory=\"Expert in Python programming and code execution.\",\n    tools=[\n        execute_code, analyze_code, format_code,\n        lint_code, disassemble_code\n    ],\n    self_reflect=False\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Multi-Agent System with Memory in Python\nDESCRIPTION: This Python snippet shows how to initialize a multi-agent system with memory, using the PraisonAI framework to configure agents for research and report generation tasks, enabling detailed interactions and contextual memory sharing.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/concepts/memory.mdx#2025-04-19_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent, Task, PraisonAIAgents\nfrom praisonaiagents.tools import duckduckgo\n\n# Create first agent for research\nresearcher = Agent(\n    role=\"Research Analyst\",\n    goal=\"Research and analyze market trends\",\n    backstory=\"Expert in market research and data analysis\",\n    tools=[duckduckgo],\n    verbose=True\n)\n\n# Create second agent for report writing\nwriter = Agent(\n    role=\"Report Writer\",\n    goal=\"Create comprehensive market reports\",\n    backstory=\"Expert in technical writing and report creation\",\n    verbose=True\n)\n\n# Create research task\nresearch_task = Task(\n    description=\"Research current market trends\",\n    expected_output=\"Detailed market analysis\",\n    agent=researcher\n)\n\n# Create writing task\nreport_task = Task(\n    description=\"Create a market report based on research\",\n    expected_output=\"Comprehensive market report\",\n    agent=writer\n)\n\n# Create and start the agents with memory\nagents = PraisonAIAgents(\n    agents=[researcher, writer],\n    tasks=[research_task, report_task],\n    memory=True,\n    process=\"sequential\"\n)\n\n# Start execution\nresult = agents.start()\n```\n\n----------------------------------------\n\nTITLE: Initializing a Basic Research Agent with praisonaiagents\nDESCRIPTION: This snippet demonstrates how to create a basic research agent using the praisonaiagents library. It initializes an agent with specific instructions for finding and summarizing information and then uses it to research a topic.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/course/agents/15-research-agents.mdx#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent\n\n# Create a basic research agent\nresearch_agent = Agent(\n    name=\"ResearchAgent\",\n    instructions=\"\"\"\n    You are a research specialist who finds and summarizes information.\n    \n    When researching topics:\n    1. Focus on finding accurate, current information\n    2. Organize findings in a logical structure\n    3. Identify key points and insights\n    4. Cite sources when available\n    5. Present information in a clear, concise format\n    \"\"\"\n)\n\n# Use the research agent\nresearch_results = research_agent.start(\"Research the impact of renewable energy on reducing carbon emissions\")\nprint(research_results)\n```\n\n----------------------------------------\n\nTITLE: Implementing Internet Search Tool Class\nDESCRIPTION: Python class definition for InternetSearchTool that inherits from BaseTool, implementing DuckDuckGo search functionality\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/custom.mdx#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom duckduckgo_search import DDGS\nfrom praisonai_tools import BaseTool\n\nclass InternetSearchTool(BaseTool):\n    name: str = \"Internet Search Tool\"\n    description: str = \"Search Internet for relevant information based on a query or latest news\"\n\n    def _run(self, query: str):\n        ddgs = DDGS()\n        results = ddgs.text(keywords=query, region='wt-wt', safesearch='moderate', max_results=5)\n        return results\n```\n\n----------------------------------------\n\nTITLE: Configuring File Management Agent in Python\nDESCRIPTION: Defines a FileManager agent with specific tools for file system operations, including reading, writing, listing, and manipulating files\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/file_tools.mdx#2025-04-19_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nAgent(\n    name=\"FileManager\",\n    role=\"File System Specialist\",\n    goal=\"Manage files efficiently and safely\",\n    tools=[read_file, write_file, list_files, get_file_info, copy_file, move_file, delete_file]\n)\n```\n\n----------------------------------------\n\nTITLE: Creating and Starting Multiple Agents - Python\nDESCRIPTION: This snippet illustrates how to create multiple agents for collaborative purposes, where one agent conducts research and another agent summarizes the findings. It uses the PraisonAIAgents class to manage multiple agents.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/concepts/agents.mdx#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent, PraisonAIAgents\\\n\\\nresearch_agent = Agent(instructions=\\\"Research about AI\\\")\\\nsummarise_agent = Agent(instructions=\\\"Summarise research agent's findings\\\")\\\n\\\nagents = PraisonAIAgents(agents=[research_agent, summarise_agent])\\\nagents.start()\n```\n\n----------------------------------------\n\nTITLE: Installing Required Packages - Bash\nDESCRIPTION: This snippet provides the command to install the required Python packages for the project, specifically 'praisonaiagents' and 'e2b_code_interpreter'.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/codeagent.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install praisonaiagents e2b_code_interpreter\n```\n\n----------------------------------------\n\nTITLE: Defining Autonomous Agent Workflow\nDESCRIPTION: This Python script defines the structure of an autonomous agent workflow using the PraisonAI Agents package. It includes defining agents with specific roles and goals, creating tasks for environment monitoring, action execution, and feedback processing, and setting up a workflow to manage the interactions between these agents and tasks.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/autonomous-workflow.mdx#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n\"from praisonaiagents import Agent, Task, PraisonAIAgents\nimport time\n\n        def get_environment_state():\n            \\\"\\\"\\\"Simulates getting current environment state\\\"\\\"\\\"        \n            current_time = int(time.time())\n            states = [\\\"normal\\\", \\\"critical\\\", \\\"optimal\\\"]\n            state = states[current_time % 3]\n            print(f\\\"Environment state: {state}\\\")\n            return state\n\n        def perform_action(state: str):\n            \\\"\\\"\\\"Simulates performing an action based on state\\\"\\\"\\\"\n            actions = {\n                \\\"normal\\\": \\\"maintain\\\",\n                \\\"critical\\\": \\\"fix\\\",\n                \\\"optimal\\\": \\\"enhance\\\"\n            }\n            action = actions.get(state, \\\"observe\\\")\n            print(f\\\"Performing action: {action} for state: {state}\\\")\n            return action\n\n        def get_feedback():\n            \\\"\\\"\\\"Simulates environment feedback\\\"\\\"\\\"\n            current_time = int(time.time())\n            feedback = \\\"positive\\\" if current_time % 2 == 0 else \\\"negative\\\"\n            print(f\\\"Feedback received: {feedback}\\\")\n            return feedback\n\n        # Create specialized agents\n        llm_caller = Agent(\n            name=\\\"Environment Monitor\\\",\n            role=\\\"State analyzer\\\",\n            goal=\\\"Monitor environment and analyze state\\\",\n            instructions=\\\"Check environment state and provide analysis\\\",\n            tools=[get_environment_state]\n        )\n\n        action_agent = Agent(\n            name=\\\"Action Executor\\\",\n            role=\\\"Action performer\\\",\n            goal=\\\"Execute appropriate actions based on state\\\",\n            instructions=\\\"Determine and perform actions based on environment state\\\",\n            tools=[perform_action]\n        )\n\n        feedback_agent = Agent(\n            name=\\\"Feedback Processor\\\",\n            role=\\\"Feedback analyzer\\\",\n            goal=\\\"Process environment feedback and adapt strategy\\\",\n            instructions=\\\"Analyze feedback and provide adaptation recommendations\\\",\n            tools=[get_feedback]\n        )\n\n        # Create tasks for autonomous workflow\n        monitor_task = Task(\n            name=\\\"monitor_environment\\\",\n            description=\\\"Monitor and analyze environment state\\\",\n            expected_output=\\\"Current environment state analysis\\\",\n            agent=llm_caller,\n            is_start=True,\n            task_type=\\\"decision\\\",\n            next_tasks=[\\\"execute_action\\\"],\n            condition={\n                \\\"normal\\\": [\\\"execute_action\\\"],\n                \\\"critical\\\": [\\\"execute_action\\\"],\n                \\\"optimal\\\": \\\"exit\\\"\n            }\n        )\n\n        action_task = Task(\n            name=\\\"execute_action\\\",\n            description=\\\"Execute appropriate action based on state\\\",\n            expected_output=\\\"Action execution result\\\",\n            agent=action_agent,\n            next_tasks=[\\\"process_feedback\\\"]\n        )\n\n        feedback_task = Task(\n            name=\\\"process_feedback\\\",\n            description=\\\"Process feedback and adapt strategy\\\",\n            expected_output=\\\"Strategy adaptation based on feedback\\\",\n            agent=feedback_agent,\n            next_tasks=[\\\"monitor_environment\\\"],  # Create feedback loop\n            context=[monitor_task, action_task]  # Access to previous states and actions\n        )\n\n        # Create workflow manager\n        workflow = PraisonAIAgents(\n            agents=[llm_caller, action_agent, feedback_agent],\n            tasks=[monitor_task, action_task, feedback_task],\n            process=\\\"workflow\\\",\n            verbose=True\n        )\n\n        def main():\n            print(\\\"\\nStarting Autonomous Agent Workflow...\\\")\n            print(\\\"=\\\" * 50)\n            \n            # Run autonomous workflow\n            results = workflow.start()\n            \n            # Print results\n            print(\\\"\\nAutonomous Agent Results:\\\")\n            print(\\\"=\\\" * 50)\n            for task_id, result in results[\\\"task_results\\\"] .items():\n                if result:\n                    task_name = result.description\n                    print(f\\\"\\nTask: {task_name}\\\")\n                    print(f\\\"Result: {result.raw}\\\")\n                    print(\\\"-\\\" * 50)\n\n        if __name__ == \\\"__main__\\\":\n            main()\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Advanced PraisonAI Agents with Comprehensive Callbacks\nDESCRIPTION: Complete example showcasing PraisonAI Agents implementation with comprehensive logging, multiple agents, tool integration, and various callback types. The code sets up researcher and writer agents with defined tasks and demonstrates proper callback registration for different event types.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/callbacks.mdx#2025-04-19_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent, Task, PraisonAIAgents, error_logs, register_display_callback\nfrom duckduckgo_search import DDGS\nfrom rich.console import Console\nimport json\nfrom datetime import datetime\nimport logging\n\n# Setup logging\nlogging.basicConfig(\n    filename='ai_interactions.log',\n    level=logging.INFO,\n    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'\n)\n\n# Callback functions for different display types\ndef interaction_callback(message=None, response=None, markdown=None, generation_time=None):\n    \"\"\"Callback for display_interaction\"\"\"\n    logging.info(f\"\"\"\n    === INTERACTION ===\n    Time: {datetime.now()}\n    Generation Time: {generation_time}s\n    Message: {message}\n    Response: {response}\n    Markdown: {markdown}\n    \"\"\")\n\ndef error_callback(message=None):\n    \"\"\"Callback for display_error\"\"\"\n    logging.error(f\"\"\"\n    === ERROR ===\n    Time: {datetime.now()}\n    Message: {message}\n    \"\"\")\n\ndef tool_call_callback(message=None):\n    \"\"\"Callback for display_tool_call\"\"\"\n    logging.info(f\"\"\"\n    === TOOL CALL ===\n    Time: {datetime.now()}\n    Message: {message}\n    \"\"\")\n\ndef instruction_callback(message=None):\n    \"\"\"Callback for display_instruction\"\"\"\n    logging.info(f\"\"\"\n    === INSTRUCTION ===\n    Time: {datetime.now()}\n    Message: {message}\n    \"\"\")\n\ndef self_reflection_callback(message=None):\n    \"\"\"Callback for display_self_reflection\"\"\"\n    logging.info(f\"\"\"\n    === SELF REFLECTION ===\n    Time: {datetime.now()}\n    Message: {message}\n    \"\"\")\n\ndef generating_callback(content=None, elapsed_time=None):\n    \"\"\"Callback for display_generating\"\"\"\n    logging.info(f\"\"\"\n    === GENERATING ===\n    Time: {datetime.now()}\n    Content: {content}\n    Elapsed Time: {elapsed_time}\n    \"\"\")\n\n# Register all callbacks\nregister_display_callback('interaction', interaction_callback)\nregister_display_callback('error', error_callback)\nregister_display_callback('tool_call', tool_call_callback)\nregister_display_callback('instruction', instruction_callback)\nregister_display_callback('self_reflection', self_reflection_callback)\n# register_display_callback('generating', generating_callback)\n\ndef task_callback(output):\n    \"\"\"Callback for task completion\"\"\"\n    logging.info(f\"\"\"\n    === TASK COMPLETED ===\n    Time: {datetime.now()}\n    Description: {output.description}\n    Agent: {output.agent}\n    Output: {output.raw[:200]}...\n    \"\"\")\n\ndef internet_search_tool(query) -> list:\n    \"\"\"\n    Perform a search using DuckDuckGo.\n\n    Args:\n        query (str): The search query.\n\n    Returns:\n        list: A list of search result titles and URLs.\n    \"\"\"\n    try:\n        results = []\n        ddgs = DDGS()\n        for result in ddgs.text(keywords=query, max_results=10):\n            results.append({\n                \"title\": result.get(\"title\", \"\"),\n                \"url\": result.get(\"href\", \"\"),\n                \"snippet\": result.get(\"body\", \"\")\n            })\n        return results\n\n    except Exception as e:\n        print(f\"Error during DuckDuckGo search: {e}\")\n        return []\n\ndef main():\n    # Create agents\n    researcher = Agent(\n        name=\"Researcher\",\n        role=\"Senior Research Analyst\",\n        goal=\"Uncover cutting-edge developments in AI and data science\",\n        backstory=\"\"\"You are an expert at a technology research group, \n        skilled in identifying trends and analyzing complex data.\"\"\",\n        verbose=True,\n        allow_delegation=False,\n        tools=[internet_search_tool],\n        llm=\"gpt-4o\",\n        markdown=True,\n        reflect_llm=\"gpt-4o\",\n        min_reflect=2,\n        max_reflect=4\n    )\n    \n    writer = Agent(\n        name=\"Writer\",\n        role=\"Tech Content Strategist\",\n        goal=\"Craft compelling content on tech advancements\",\n        backstory=\"\"\"You are a content strategist known for \n        making complex tech topics interesting and easy to understand.\"\"\",\n        verbose=True,\n        allow_delegation=True,\n        llm=\"gpt-4o\",\n        tools=[],\n        markdown=True\n    )\n\n    # Create tasks with callbacks\n    task1 = Task(\n        name=\"research_task\",\n        description=\"\"\"Analyze 2024's AI advancements. \n        Find major trends, new technologies, and their effects.\"\"\",\n        expected_output=\"\"\"A detailed report on 2024 AI advancements\"\"\",\n        agent=researcher,\n        tools=[internet_search_tool],\n        callback=task_callback\n    )\n\n    task2 = Task(\n        name=\"writing_task\",\n        description=\"\"\"Create a blog post about major AI advancements using the insights you have.\n        Make it interesting, clear, and suited for tech enthusiasts. \n        It should be at least 4 paragraphs long.\"\"\",\n        expected_output=\"A blog post of at least 4 paragraphs\",\n        agent=writer,\n        context=[task1],\n        callback=task_callback,\n        tools=[]\n    )\n\n    task3 = Task(\n        name=\"json_task\",\n        description=\"\"\"Create a json object with a title of \"My Task\" and content of \"My content\".\"\"\",\n        expected_output=\"\"\"JSON output with title and content\"\"\",\n        agent=researcher,\n        callback=task_callback\n    )\n\n    task4 = Task(\n        name=\"save_output_task\",\n        description=\"\"\"Save the AI blog post to a file\"\"\",\n        expected_output=\"\"\"File saved successfully\"\"\",\n        agent=writer,\n        context=[task2],\n        output_file='test.txt',\n        create_directory=True,\n        callback=task_callback\n    )\n\n    # Create and run agents manager\n    agents = PraisonAIAgents(\n        agents=[researcher, writer],\n        tasks=[task1, task2, task3, task4],\n        verbose=True,\n        process=\"sequential\",\n        manager_llm=\"gpt-4o\"\n    )\n\n    agents.start()\n\nif __name__ == \"__main__\":\n    main()\n```\n\n----------------------------------------\n\nTITLE: Creating Specialized Agents\nDESCRIPTION: This snippet demonstrates the creation of three specialized agents: a research agent, a writing agent, and an editing agent. Each agent is defined with specific instructions to perform their roles effectively.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/course/agents/13-building-multi-agent-system.mdx#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Research Agent\nresearch_agent = Agent(\n    name=\"Researcher\",\n    instructions=\"\"\"\n    You are a research specialist who excels at finding relevant information.\n    Your job is to:\n    1. Thoroughly research the given topic\n    2. Identify key facts, statistics, and insights\n    3. Organize the information in a clear, structured format\n    4. Provide accurate information with no fabrications\n    5. Focus on the most relevant and current information\n    \"\"\"\n)\n\n# Writing Agent\nwriting_agent = Agent(\n    name=\"Writer\",\n    instructions=\"\"\"\n    You are a content writer who creates engaging, reader-friendly content.\n    Your job is to:\n    1. Use the research provided to create well-structured content\n    2. Write in a clear, engaging style\n    3. Include an attention-grabbing introduction\n    4. Organize the content with appropriate headings\n    5. Conclude with a summary and call-to-action when appropriate\n    \"\"\"\n)\n\n# Editing Agent\nediting_agent = Agent(\n    name=\"Editor\",\n    instructions=\"\"\"\n    You are an editor who refines and improves content.\n    Your job is to:\n    1. Correct any grammatical or spelling errors\n    2. Improve clarity and flow\n    3. Ensure consistency in tone and style\n    4. Check for logical structure and organization\n    5. Enhance readability for the target audience\n    \"\"\"\n)\n```\n\n----------------------------------------\n\nTITLE: Creating and Starting a Single Agent - Python\nDESCRIPTION: This snippet shows how to import the Agent class and create a simple agent that assists in writing a movie script. It outlines the initialization and the starting of the agent.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/concepts/agents.mdx#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent\\\n\\\nagent = Agent(instructions=\\\"Your are a helpful AI assistant\\\")\\\nagent.start(\\\"Write a movie script about a robot in Mars\\\")\n```\n\n----------------------------------------\n\nTITLE: Multi-Agent System Example in TypeScript\nDESCRIPTION: Describes how to create and initiate a multi-agent system that includes narrative and summary tasks, using PraisonAI in TypeScript.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/js/typescript.mdx#2025-04-19_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Agent, PraisonAIAgents } from 'praisonai';\n\n// Create story agent\nconst storyAgent = new Agent({\n  instructions: \"You are a storyteller. Write a very short story (2-3 sentences) about a given topic.\",\n  name: \"StoryAgent\",\n  verbose: true\n});\n\n// Create summary agent\nconst summaryAgent = new Agent({\n  instructions: \"You are an editor. Create a one-sentence summary of the given story.\",\n  name: \"SummaryAgent\",\n  verbose: true\n});\n\n// Create and start agents\nconst agents = new PraisonAIAgents({\n  agents: [storyAgent, summaryAgent],\n  tasks: [\n    \"Write a short story about a cat\",\n    \"{previous_result}\"  // This will be replaced with the story\n  ],\n  verbose: true\n});\n\nagents.start()\n  .then(results => {\n    console.log('\\nStory:', results[0]);\n    console.log('\\nSummary:', results[1]);\n  })\n  .catch(error => console.error('Error:', error));\n```\n\n----------------------------------------\n\nTITLE: SerpAPI Integration for Web Search\nDESCRIPTION: Create a PraisonAI agent using SerpAPIWrapper for web search and combine it with an editor agent for content generation.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/langchain_tools.mdx#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent, PraisonAIAgents\nfrom langchain_community.utilities import SerpAPIWrapper\n\ndata_agent = Agent(instructions=\"Search about AI job trends in 2025\", tools=[SerpAPIWrapper])\neditor_agent = Agent(instructions=\"Write a blog article\")\n\nagents = PraisonAIAgents(agents=[data_agent, editor_agent])\nagents.start()\n```\n\n----------------------------------------\n\nTITLE: Initializing Blog Post Agent with praisonaiagents\nDESCRIPTION: This snippet demonstrates how to create a specialized agent for writing blog posts. The agent's instructions emphasize attention-grabbing headlines, compelling introductions, structured content with subheadings, relevant examples, and a clear call-to-action. The agent also uses Markdown formatting to ensure readability and structure.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/course/agents/16-content-creation-agents.mdx#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nblog_agent = Agent(\n    name=\"BlogWriter\",\n    instructions=\"\"\"\n    You are a blog post writer who creates engaging, informative articles.\n    \n    When writing blog posts:\n    1. Create attention-grabbing headlines\n    2. Start with a compelling introduction\n    3. Use subheadings to organize content\n    4. Include relevant examples and evidence\n    5. Incorporate a clear call-to-action at the end\n    \n    Format your content with proper Markdown formatting including:\n    - Headings (## for main sections, ### for subsections)\n    - Bullet points for lists\n    - *Italic* for emphasis\n    - **Bold** for important points\n    - > Blockquotes for notable quotes\n    \"\"\"\n)\n\n# Use the blog agent\nblog_content = blog_agent.start(\n    \"\"\"\n    Topic: 5 Ways to Improve Your Productivity\n    Target audience: Remote workers\n    Style: Practical, actionable advice\n    Length: 800 words\n    Include: Tips, examples, and research-backed information\n    \"\"\"\n)\nprint(blog_content)\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Personal Assistant Agent with PraisonAI\nDESCRIPTION: This code snippet demonstrates how to create a basic personal assistant agent using the `Agent` class from the `praisonaiagents` library. The agent is initialized with a name, instructions, and an LLM. It then responds to a user's request to plan a meeting.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/course/agents/19-personal-assistant-agents.mdx#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent\n\n# Create a basic personal assistant agent\nassistant_agent = Agent(\n    name=\"PersonalAssistant\",\n    instructions=\"\"\"\n    You are a helpful personal assistant who helps users manage tasks and information.\n    \n    When assisting users:\n    1. Be concise and efficient in your responses\n    2. Prioritize user requests based on importance and urgency\n    3. Maintain a helpful, friendly tone\n    4. Remember important information the user shares\n    5. Proactively suggest relevant information when appropriate\n    \"\"\",\n    llm=\"gpt-4o-mini\"  # Using the specified model\n)\n\n# Use the personal assistant agent\nresponse = assistant_agent.start(\"I need to plan a meeting with my team next Tuesday at 2 PM\")\nprint(response)\n```\n\n----------------------------------------\n\nTITLE: Creating a Decision Support Assistant with PraisonAI\nDESCRIPTION: This code snippet demonstrates the creation of a decision support assistant using the `Agent` class from the `praisonaiagents` library. The agent helps users make informed choices by clarifying the decision, identifying relevant criteria, and presenting pros and cons for each option. It helps with a decision of whether to buy a new laptop now or wait.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/course/agents/19-personal-assistant-agents.mdx#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndecision_agent = Agent(\n    name=\"DecisionSupport\",\n    instructions=\"\"\"\n    You are a decision support assistant who helps users make informed choices.\n    \n    When supporting decisions:\n    1. Help clarify the decision to be made\n    2. Identify relevant criteria and factors\n    3. Present pros and cons for each option\n    4. Ask questions to understand preferences and priorities\n    5. Provide a structured analysis without making the final decision\n    \n    Present options with balanced information to help the user make their own informed choice.\n    \"\"\",\n    llm=\"gpt-4o-mini\"  # Using the specified model\n)\n\n# Use the decision support agent\ndecision_response = decision_agent.start(\n    \"\"\"\n    I'm trying to decide whether to buy a new laptop now or wait 3 months. \n    \n    Current situation:\n    - My current laptop is 4 years old and running slow\n    - It still works but has battery issues\n    - I use it daily for work (programming and video calls)\n    - I've heard new models are coming out in 3 months\n    - My budget is around $1,500\n    \n    What should I consider in making this decision?\n    \"\"\"\n)\nprint(decision_response)\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Agent in PraisonAI\nDESCRIPTION: This snippet showcases how to create and start a simple AI agent using the PraisonAI framework. The agent is initialized with specific instructions related to renewable energy research.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/course/agents/03-agent-architecture.mdx#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent\n\n# Create a simple agent\nresearch_agent = Agent(\n    instructions=\"Research the latest developments in renewable energy\",\n    name=\"ResearchAgent\"\n)\n\n# Start the agent\nresearch_agent.start()\n```\n\n----------------------------------------\n\nTITLE: Creating Agent Configuration with Custom Tool in YAML\nDESCRIPTION: The YAML configuration file `agents.yaml` specifies a framework for creating agents, including roles, goals, and tasks. It assigns the `internet_search_tool` as a tool for an agent tasked with writing a movie script. This file offers a structured approach to defining agent behaviors and tool assignments.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/course/agents/12-adding-tools-to-agents.mdx#2025-04-19_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nframework: praisonai\ntopic: create movie script about cat in mars\nroles:\n  scriptwriter:\n    backstory: Expert in dialogue and script structure, translating concepts into\n      scripts.\n    goal: Write a movie script about a cat in Mars\n    role: Scriptwriter\n    tools:\n      - internet_search_tool # <-- Tool assigned to Agent here\n    tasks:\n      scriptwriting_task:\n        description: Turn the story concept into a production-ready movie script,\n          including dialogue and scene details.\n        expected_output: Final movie script with dialogue and scene details.\n```\n\n----------------------------------------\n\nTITLE: Defining an Advanced Task in Python\nDESCRIPTION: This code snippet shows how to create a more complex task in PraisonAI, including tool usage and asynchronous execution. It highlights additional parameters for better task handling.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/concepts/tasks.mdx#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ntask = Task(\n    description=\"Analyze market data\",\n    expected_output=\"Detailed analysis\",\n    agent=analyst_agent,\n    tools=[AnalysisTool()],\n    output_file=\"analysis.md\",\n    async_execution=True\n)\n```\n\n----------------------------------------\n\nTITLE: Executing YouTube Search Analysis Agent with PraisonAI\nDESCRIPTION: Sets up and runs the PraisonAI instance with the defined YAML configuration and YouTubeSearchTool. It uses the OpenAI API key from Google Colab secrets or manual input, sets the model name, and executes the analysis.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/cookbooks/yaml/youtube_search_analysis_agents.ipynb#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom praisonai import PraisonAI\nfrom google.colab import userdata\n\n# Create a PraisonAI instance with the agent_yaml content\npraisonai = PraisonAI(agent_yaml=agent_yaml, tools=[YouTubeSearchTool])\n\n# Add OPENAI_API_KEY Secrets to Google Colab on the Left Hand Side 🔑 or Enter Manually Below\nos.environ[\"OPENAI_API_KEY\"] = userdata.get('OPENAI_API_KEY') or \"ENTER OPENAI_API_KEY HERE\"\nos.environ[\"OPENAI_MODEL_NAME\"] = \"gpt-4o-mini\"\n\n# Run PraisonAI\nresult = praisonai.run()\n\n# Print the result\nprint(result) # 8/10\n```\n\n----------------------------------------\n\nTITLE: Creating a Climate Analysis Application\nDESCRIPTION: Provides a comprehensive Python setup for creating AI agents with PraisonAI to conduct climate impact analysis. This includes data collection, urban analysis, microclimate modeling, impact prediction, and strategy generation.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/examples/climate-impact.mdx#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent, Task, PraisonAIAgents\nimport time\nfrom typing import Dict, List\nimport asyncio\n\ndef collect_environmental_data():\n    \"\"\"Simulates environmental data collection\"\"\"\n    data = {\n        \"temperature\": {\n            \"current\": 25 + (time.time() % 10),\n            \"historical\": [24, 25, 26, 24, 23],\n            \"trend\": \"increasing\"\n        },\n        \"humidity\": {\n            \"current\": 60 + (time.time() % 20),\n            \"historical\": [65, 62, 58, 63, 61],\n            \"trend\": \"stable\"\n        },\n        \"air_quality\": {\n            \"pm25\": 35 + (time.time() % 15),\n            \"co2\": 415 + (time.time() % 30),\n            \"trend\": \"deteriorating\"\n        }\n    }\n    return data\n\ndef analyze_urban_factors():\n    \"\"\"Simulates urban environment analysis\"\"\"\n    factors = {\n        \"building_density\": 75 + (time.time() % 20),\n        \"green_spaces\": 25 + (time.time() % 10),\n        \"traffic_flow\": {\n            \"peak_hours\": [8, 17],\n            \"congestion_level\": \"high\"\n        },\n        \"heat_islands\": [\n            {\"location\": \"downtown\", \"intensity\": \"high\"},\n            {\"location\": \"industrial\", \"intensity\": \"medium\"}\n        ]\n    }\n    return factors\n\ndef model_microclimate(env_data: Dict, urban_factors: Dict):\n    \"\"\"Models microclimate conditions\"\"\"\n    models = []\n    locations = [\"downtown\", \"residential\", \"industrial\", \"parks\"]\n    \n    for location in locations:\n        models.append({\n            \"location\": location,\n            \"temperature_delta\": 2 + (time.time() % 3),\n            \"air_quality_impact\": \"moderate\" if \"park\" in location else \"significant\",\n            \"humidity_variation\": 5 + (time.time() % 5)\n        })\n    return models\n\ndef predict_impacts(models: List[Dict]):\n    \"\"\"Predicts climate impacts\"\"\"\n    predictions = []\n    for model in models:\n        predictions.append({\n            \"location\": model[\"location\"],\n            \"health_impact\": \"high\" if model[\"air_quality_impact\"] == \"significant\" else \"medium\",\n            \"energy_consumption\": {\n                \"cooling_need\": model[\"temperature_delta\"] * 10,\n                \"trend\": \"increasing\" if model[\"temperature_delta\"] > 2.5 else \"stable\"\n            },\n            \"livability_score\": 70 - (model[\"temperature_delta\"] * 5)\n        })\n    return predictions\n\ndef generate_adaptation_strategies(predictions: List[Dict]):\n    \"\"\"Generates adaptation strategies\"\"\"\n    strategies = []\n    for pred in predictions:\n        if pred[\"health_impact\"] == \"high\":\n            strategies.append({\n                \"location\": pred[\"location\"],\n                \"actions\": [\n                    \"increase_green_spaces\",\n                    \"traffic_reduction\",\n                    \"building_retrofitting\"\n                ],\n                \"priority\": \"immediate\",\n                \"cost_estimate\": \"high\"\n            })\n        else:\n            strategies.append({\n                \"location\": pred[\"location\"],\n                \"actions\": [\n                    \"tree_planting\",\n                    \"cool_roofs\"\n                ],\n                \"priority\": \"medium\",\n                \"cost_estimate\": \"moderate\"\n            })\n    return strategies\n\n# Create specialized agents\nenvironmental_monitor = Agent(\n    name=\"Environmental Monitor\",\n    role=\"Data Collection\",\n    goal=\"Collect environmental data\",\n    instructions=\"Monitor and collect climate data\",\n    tools=[collect_environmental_data]\n)\n\nurban_analyzer = Agent(\n    name=\"Urban Analyzer\",\n    role=\"Urban Analysis\",\n    goal=\"Analyze urban environment\",\n    instructions=\"Assess urban factors affecting climate\",\n    tools=[analyze_urban_factors]\n)\n\nclimate_modeler = Agent(\n    name=\"Climate Modeler\",\n    role=\"Climate Modeling\",\n    goal=\"Model microclimate conditions\",\n    instructions=\"Create detailed climate models\",\n    tools=[model_microclimate]\n)\n\nimpact_predictor = Agent(\n    name=\"Impact Predictor\",\n    role=\"Impact Analysis\",\n    goal=\"Predict climate impacts\",\n    instructions=\"Assess potential climate impacts\",\n    tools=[predict_impacts]\n)\n\nstrategy_generator = Agent(\n    name=\"Strategy Generator\",\n    role=\"Strategy Development\",\n    goal=\"Generate adaptation strategies\",\n    instructions=\"Develop climate adaptation strategies\",\n    tools=[generate_adaptation_strategies]\n)\n\n# Create workflow tasks\nmonitoring_task = Task(\n    name=\"collect_data\",\n    description=\"Collect environmental data\",\n    expected_output=\"Environmental measurements\",\n    agent=environmental_monitor,\n    is_start=True,\n    next_tasks=[\"analyze_urban\"]\n)\n\nurban_task = Task(\n    name=\"analyze_urban\",\n    description=\"Analyze urban factors\",\n    expected_output=\"Urban analysis\",\n    agent=urban_analyzer,\n    next_tasks=[\"model_climate\"]\n)\n\nmodeling_task = Task(\n    name=\"model_climate\",\n    description=\"Model microclimate\",\n    expected_output=\"Climate models\",\n    agent=climate_modeler,\n    context=[monitoring_task, urban_task],\n    next_tasks=[\"predict_impacts\"]\n)\n\nprediction_task = Task(\n    name=\"predict_impacts\",\n    description=\"Predict climate impacts\",\n    expected_output=\"Impact predictions\",\n    agent=impact_predictor,\n    next_tasks=[\"generate_strategies\"]\n)\n\nstrategy_task = Task(\n    name=\"generate_strategies\",\n    description=\"Generate adaptation strategies\",\n    expected_output=\"Adaptation strategies\",\n    agent=strategy_generator,\n    task_type=\"decision\",\n    condition={\n        \"immediate\": [\"collect_data\"],  # Continuous monitoring for high priority\n        \"medium\": \"\",  # End workflow for medium priority\n        \"low\": \"\"  # End workflow for low priority\n    }\n)\n\n# Create workflow\nworkflow = PraisonAIAgents(\n    agents=[environmental_monitor, urban_analyzer, climate_modeler,\n            impact_predictor, strategy_generator],\n    tasks=[monitoring_task, urban_task, modeling_task,\n           prediction_task, strategy_task],\n    process=\"workflow\",\n    verbose=True\n)\n\nasync def main():\n    print(\"\\nStarting Climate Impact Prediction Workflow...\")\n    print(\"=\" * 50)\n    \n    # Run workflow\n    results = await workflow.astart()\n    \n    # Print results\n    print(\"\\nClimate Impact Analysis Results:\")\n    print(\"=\" * 50)\n    for task_id, result in results[\"task_results\"].items():\n        if result:\n            print(f\"\\nTask: {task_id}\")\n            print(f\"Result: {result.raw}\")\n            print(\"-\" * 50)\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Creating Customer Data Analysis Agent with Python\nDESCRIPTION: This snippet illustrates the creation of a customer data analysis agent that specializes in analyzing customer behavior and providing insights for retention strategies.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/course/agents/17-data-analysis-agents.mdx#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ncustomer_analysis_agent = Agent(\n    name=\"CustomerAnalyst\",\n    instructions=\"\"\"\n    You are a customer data analyst who specializes in understanding customer behavior.\n    \n    When analyzing customer data:\n    1. Identify customer segments and patterns\n    2. Analyze purchasing behavior\n    3. Evaluate customer satisfaction metrics\n    4. Identify opportunities to improve customer experience\n    5. Recommend strategies for customer retention and growth\n    \n    Present your analysis with sections for:\n    - Customer Segmentation\n    - Behavior Patterns\n    - Key Insights\n    - Recommended Actions\n    \"\"\",\n    tools=[stats_tool]\n)\n\n# Use the customer analysis agent\ncustomer_data = \"\"\"\nCustomer Segments by Age:\n18-24: 15% of customers (Avg. Purchase: $45)\n25-34: 32% of customers (Avg. Purchase: $78)\n35-44: 28% of customers (Avg. Purchase: $92)\n45-54: 18% of customers (Avg. Purchase: $85)\n55+: 7% of customers (Avg. Purchase: $65)\n\nCustomer Satisfaction:\nVery Satisfied: 42%\nSatisfied: 35%\nNeutral: 15%\nDissatisfied: 6%\nVery Dissatisfied: 2%\n\nRepeat Purchase Rate:\nOne-time: 40%\n2-5 purchases: 35%\n6-10 purchases: 15%\n10+ purchases: 10%\n\"\"\"\n\ncustomer_analysis = customer_analysis_agent.start(\n    f\"\"\"\n    Analyze the following customer data:\n    \n    {customer_data}\n    \n    Provide insights on customer segments, behavior patterns, and recommendations to improve customer retention.\n    \"\"\"\n)\nprint(customer_analysis)\n```\n\n----------------------------------------\n\nTITLE: Installing and Running PraisonAI Base\nDESCRIPTION: Basic installation and setup of PraisonAI with core functionality. Requires OpenAI API key for operation.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/nocode/tldr.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Install with CrewAI support\npip install praisonai\n\n# Set your API key\nexport OPENAI_API_KEY=\"Enter your API key\"\n\n# Initialize and run\npraisonai --init \"create a movie script about dog in moon\"\npraisonai\n```\n\n----------------------------------------\n\nTITLE: Installing and Running PraisonAI Agents - Python\nDESCRIPTION: This snippet demonstrates how to install the PraisonAI Python package, set up an API key, create an `app.py` file, and define and start single or multiple AI agents using Python. Agents perform tasks based on provided instructions. Ensure Python and pip are installed.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/index.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install praisonaiagents\n```\n\nLANGUAGE: bash\nCODE:\n```\nexport OPENAI_API_KEY=xxxxxxxxxxxxxxxxxxxxxx\n```\n\nLANGUAGE: bash\nCODE:\n```\npython app.py\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent\n\nagent = Agent(instructions=\"Your are a helpful AI assistant\")\nagent.start(\"Write a movie script about a robot in Mars\")\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent, PraisonAIAgents\n\nresearch_agent = Agent(instructions=\"Research about AI\")\nsummarise_agent = Agent(instructions=\"Summarise research agent's findings\")\n\nagents = PraisonAIAgents(agents=[research_agent, summarise_agent])\nagents.start()\n```\n\n----------------------------------------\n\nTITLE: Structured Output Research Agent with praisonaiagents\nDESCRIPTION: This snippet demonstrates how to create a research agent that provides structured output using the praisonaiagents library. It initializes an agent with specific instructions to structure its response in a predefined format, including a summary, key facts, analysis, and sources.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/course/agents/15-research-agents.mdx#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nstructured_research_agent = Agent(\n    name=\"StructuredResearchAgent\",\n    instructions=\"\"\"\n    You are a research specialist who finds and organizes information.\n    \n    When researching topics:\n    1. Use available tools to find current information\n    2. Analyze and synthesize the findings\n    \n    Always structure your response in this format:\n    \n    ## Summary\n    [Brief 2-3 sentence overview of the topic]\n    \n    ## Key Facts\n    - [Important fact 1]\n    - [Important fact 2]\n    - [Important fact 3]\n    \n    ## Analysis\n    [Deeper analysis of the information, including implications]\n    \n    ## Sources\n    [List of sources if available]\n    \"\"\",\n    tools=[search_tool]\n)\n\n# Use the structured research agent\nstructured_results = structured_research_agent.start(\"Research the latest advancements in quantum computing\")\nprint(structured_results)\n```\n\n----------------------------------------\n\nTITLE: Space Mission Planning with PraisonAI Agents\nDESCRIPTION: This Python code defines functions for analyzing mission parameters, calculating resource requirements, planning contingencies, optimizing resource allocation, and simulating mission scenarios. It then creates specialized agents and tasks using the PraisonAIAgents framework, and runs a workflow to simulate space mission planning and resource optimization.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/examples/space-mission.mdx#2025-04-19_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\n```python\nfrom praisonaiagents import Agent, Task, PraisonAIAgents\nimport time\nfrom typing import Dict, List\nimport asyncio\n\ndef analyze_mission_parameters():\n    \"\"\"Simulates mission parameter analysis\"\"\"\n    parameters = {\n        \"duration\": 180,  # days\n        \"crew_size\": 4,\n        \"orbital_parameters\": {\n            \"altitude\": 400,  # km\n            \"inclination\": 51.6,  # degrees\n            \"period\": 92.68  # minutes\n        },\n        \"mission_objectives\": [\n            \"scientific_research\",\n            \"satellite_deployment\",\n            \"space_station_maintenance\"\n        ]\n    }\n    return parameters\n\ndef calculate_resource_requirements(params: Dict):\n    \"\"\"Calculates required resources\"\"\"\n    requirements = {\n        \"life_support\": {\n            \"oxygen\": params[\"duration\"] * params[\"crew_size\"] * 0.84,  # kg\n            \"water\": params[\"duration\"] * params[\"crew_size\"] * 2.5,  # liters\n            \"food\": params[\"duration\"] * params[\"crew_size\"] * 1.8   # kg\n        },\n        \"power\": {\n            \"daily_consumption\": 30 + (params[\"crew_size\"] * 5),  # kWh\n            \"peak_demand\": 45 + (params[\"crew_size\"] * 8),  # kW\n            \"backup_capacity\": 72  # hours\n        },\n        \"propellant\": {\n            \"main_engine\": 2000,  # kg\n            \"attitude_control\": 500,  # kg\n            \"reserve\": 300  # kg\n        }\n    }\n    return requirements\n\ndef plan_contingencies(requirements: Dict):\n    \"\"\"Plans contingency scenarios\"\"\"\n    contingencies = [\n        {\n            \"scenario\": \"power_failure\",\n            \"probability\": 0.05,\n            \"impact\": \"critical\",\n            \"resources_needed\": {\n                \"backup_power\": requirements[\"power\"][\"daily_consumption\"] * 3,\n                \"repair_equipment\": [\"solar_panel_kit\", \"power_distribution_unit\"]\n            }\n        },\n        {\n            \"scenario\": \"life_support_malfunction\",\n            \"probability\": 0.03,\n            \"impact\": \"severe\",\n            \"resources_needed\": {\n                \"oxygen_reserve\": requirements[\"life_support\"][\"oxygen\"] * 0.2,\n                \"repair_parts\": [\"filter_system\", \"pressure_regulators\"]\n            }\n        }\n    ]\n    return contingencies[int(time.time()) % 2]\n\ndef optimize_allocation(requirements: Dict, contingencies: Dict):\n    \"\"\"Optimizes resource allocation\"\"\"\n    allocation = {\n        \"primary_resources\": {\n            \"life_support\": {\n                \"nominal\": requirements[\"life_support\"],\n                \"buffer\": 0.15  # 15% buffer\n            },\n            \"power\": {\n                \"nominal\": requirements[\"power\"],\n                \"buffer\": 0.2   # 20% buffer\n            }\n        },\n        \"contingency_resources\": {\n            \"type\": contingencies[\"scenario\"],\n            \"allocation\": contingencies[\"resources_needed\"],\n            \"priority\": \"high\" if contingencies[\"impact\"] == \"critical\" else \"medium\"\n        }\n    }\n    return allocation\n\ndef simulate_mission_scenarios(allocation: Dict):\n    \"\"\"Simulates various mission scenarios\"\"\"\n    scenarios = {\n        \"nominal_operations\": {\n            \"success_rate\": 0.95,\n            \"resource_utilization\": 0.85,\n            \"efficiency_rating\": 0.9\n        },\n        \"emergency_scenarios\": [\n            {\n                \"type\": \"power_reduction\",\n                \"duration\": 48,  # hours\n                \"impact\": \"moderate\",\n                \"resolution_success\": 0.88\n            },\n            {\n                \"type\": \"life_support_adjustment\",\n                \"duration\": 24,  # hours\n                \"impact\": \"minor\",\n                \"resolution_success\": 0.92\n            }\n        ]\n    }\n    return scenarios\n\n# Create specialized agents\nmission_analyzer = Agent(\n    name=\"Mission Analyzer\",\n    role=\"Mission Analysis\",\n    goal=\"Analyze mission parameters\",\n    instructions=\"Evaluate mission requirements and constraints\",\n    tools=[analyze_mission_parameters]\n)\n\nresource_calculator = Agent(\n    name=\"Resource Calculator\",\n    role=\"Resource Calculation\",\n    goal=\"Calculate resource requirements\",\n    instructions=\"Determine required resources for mission\",\n    tools=[calculate_resource_requirements]\n)\n\ncontingency_planner = Agent(\n    name=\"Contingency Planner\",\n    role=\"Contingency Planning\",\n    goal=\"Plan for contingencies\",\n    instructions=\"Develop contingency scenarios and plans\",\n    tools=[plan_contingencies]\n)\n\nresource_optimizer = Agent(\n    name=\"Resource Optimizer\",\n    role=\"Resource Optimization\",\n    goal=\"Optimize resource allocation\",\n    instructions=\"Optimize resource distribution\",\n    tools=[optimize_allocation]\n)\n\nscenario_simulator = Agent(\n    name=\"Scenario Simulator\",\n    role=\"Scenario Simulation\",\n    goal=\"Simulate mission scenarios\",\n    instructions=\"Simulate various mission scenarios\",\n    tools=[simulate_mission_scenarios]\n)\n\n# Create workflow tasks\nmission_task = Task(\n    name=\"analyze_mission\",\n    description=\"Analyze mission parameters\",\n    expected_output=\"Mission parameters\",\n    agent=mission_analyzer,\n    is_start=True,\n    next_tasks=[\"calculate_resources\"]\n)\n\nresource_task = Task(\n    name=\"calculate_resources\",\n    description=\"Calculate resource requirements\",\n    expected_output=\"Resource requirements\",\n    agent=resource_calculator,\n    next_tasks=[\"plan_contingencies\"]\n)\n\ncontingency_task = Task(\n    name=\"plan_contingencies\",\n    description=\"Plan contingencies\",\n    expected_output=\"Contingency plans\",\n    agent=contingency_planner,\n    context=[resource_task],\n    next_tasks=[\"optimize_resources\"]\n)\n\noptimization_task = Task(\n    name=\"optimize_resources\",\n    description=\"Optimize resource allocation\",\n    expected_output=\"Resource allocation\",\n    agent=resource_optimizer,\n    context=[resource_task, contingency_task],\n    next_tasks=[\"simulate_scenarios\"]\n)\n\nsimulation_task = Task(\n    name=\"simulate_scenarios\",\n    description=\"Simulate scenarios\",\n    expected_output=\"Simulation results\",\n    agent=scenario_simulator,\n    task_type=\"decision\",\n    condition={\n        \"nominal_operations\": \"\",  # End workflow if nominal\n        \"emergency_scenarios\": [\"optimize_resources\"]  # Reoptimize if emergency\n    }\n)\n\n# Create workflow\nworkflow = PraisonAIAgents(\n    agents=[mission_analyzer, resource_calculator, contingency_planner,\n            resource_optimizer, scenario_simulator],\n    tasks=[mission_task, resource_task, contingency_task,\n           optimization_task, simulation_task],\n    process=\"workflow\",\n    verbose=True\n)\n\nasync def main():\n    print(\"\\nStarting Space Mission Resource Optimization Workflow...\")\n    print(\"=\" * 50)\n    \n    # Run workflow\n    results = await workflow.astart()\n    \n    # Print results\n    print(\"\\nResource Optimization Results:\")\n    print(\"=\" * 50)\n    for task_id, result in results[\"task_results\"].items():\n        if result:\n            print(f\"\\nTask: {task_id}\")\n            print(f\"Result: {result.raw}\")\n            print(\"-\" * 50)\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n```\n```\n\n----------------------------------------\n\nTITLE: Creating an Agent with Code Interpreter in Python\nDESCRIPTION: Initializes an AI agent configured as a 'Code Developer' with Python code execution capabilities. The agent uses GPT-4o as its language model and has verbose logging enabled for debugging.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/codeagent.mdx#2025-04-19_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nagent = Agent(\n    role=\"Code Developer\",\n    goal=\"Write and execute Python code\",\n    backstory=\"Expert in Python development\",\n    tools=[code_interpreter],\n    verbose=True,  # Enable detailed logging\n    llm=\"gpt-4o\"  # Language model to use\n)\n```\n\n----------------------------------------\n\nTITLE: Integrating Tavily Search with PraisonAI in Python\nDESCRIPTION: This snippet defines a tool for integrating Tavily search capabilities using the TavilySearchAPIWrapper within the PraisonAI framework. It requires the praisonai_tools and langchain.utilities.tavily_search packages. The _run method executes a search query and returns relevant results, limiting output to five entries. The key input is the search query string, and outputs are Tavily search results.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/tavily.mdx#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonai_tools import BaseTool\\nfrom langchain.utilities.tavily_search import TavilySearchAPIWrapper\\n\\nclass TavilyTool(BaseTool):\\n    name: str = \\\"TavilyTool\\\"\\n    description: str = \\\"Search Tavily for relevant information based on a query.\\\"\\n\\n    def _run(self, query: str):\\n        api_wrapper = TavilySearchAPIWrapper()\\n        results = api_wrapper.results(query=query, max_results=5)\\n        return results\n```\n\n----------------------------------------\n\nTITLE: Installing PraisonAI Basic Package\nDESCRIPTION: This command installs the basic PraisonAI package, which includes default agent support.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/nocode/installation.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install praisonai\n```\n\n----------------------------------------\n\nTITLE: Vulnerability Detection Workflow in Python with PraisonAI Agents\nDESCRIPTION: This Python script demonstrates a vulnerability detection workflow using PraisonAI Agents. It includes simulated functions for code pattern scanning, attack vector analysis, exploit simulation, signature generation, and finding validation. The script defines agents and tasks for each stage of the workflow and uses the `PraisonAIAgents` class to orchestrate the process. The workflow is executed asynchronously, and the results are printed to the console.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/examples/vulnerability-detection.mdx#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent, Task, PraisonAIAgents\nimport time\nfrom typing import Dict, List\nimport asyncio\n\ndef scan_code_patterns():\n    \"\"\"Simulates code pattern scanning\"\"\"\n    patterns = [\n        {\n            \"type\": \"buffer_overflow\",\n            \"severity\": \"critical\",\n            \"location\": \"memory_management\",\n            \"frequency\": 3\n        },\n        {\n            \"type\": \"sql_injection\",\n            \"severity\": \"high\",\n            \"location\": \"database_interface\",\n            \"frequency\": 2\n        },\n        {\n            \"type\": \"race_condition\",\n            \"severity\": \"medium\",\n            \"location\": \"thread_handling\",\n            \"frequency\": 1\n        }\n    ]\n    return patterns[int(time.time()) % 3]\n\ndef analyze_attack_vectors(pattern: Dict):\n    \"\"\"Analyzes potential attack vectors\"\"\"\n    vectors = []\n    severity_scores = {\"critical\": 9.5, \"high\": 8.0, \"medium\": 6.5}\n    base_score = severity_scores[pattern[\"type\"]]\n    \n    vectors.append({\n        \"type\": pattern[\"type\"],\n        \"attack_path\": f\"exploit_{pattern['location']}\",\n        \"complexity\": \"high\" if pattern[\"frequency\"] < 2 else \"medium\",\n        \"cvss_score\": base_score + (time.time() % 1)\n    })\n    return vectors\n\ndef simulate_exploitation(vectors: List[Dict]):\n    \"\"\"Simulates exploitation attempts\"\"\"\n    results = []\n    for vector in vectors:\n        results.append({\n            \"vector\": vector[\"type\"],\n            \"success_rate\": 0.7 + (time.time() % 3) / 10,\n            \"detection_time\": 100 + (int(time.time()) % 50),\n            \"mitigation_possible\": vector[\"complexity\"] != \"high\"\n        })\n    return results\n\ndef generate_signatures(results: List[Dict]):\n    \"\"\"Generates vulnerability signatures\"\"\"\n    signatures = []\n    for result in results:\n        signatures.append({\n            \"pattern\": f\"signature_{result['vector']}\",\n            \"reliability\": result['success_rate'],\n            \"false_positive_rate\": 0.1 + (time.time() % 2) / 10,\n            \"detection_speed\": result['detection_time']\n        })\n    return signatures\n\ndef validate_findings(signatures: List[Dict]):\n    \"\"\"Validates vulnerability findings\"\"\"\n    validations = []\n    for sig in signatures:\n        validations.append({\n            \"signature\": sig[\"pattern\"],\n            \"confidence\": sig[\"reliability\"] * (1 - sig[\"false_positive_rate\"]),\n            \"reproducibility\": 0.8 + (time.time() % 2) / 10,\n            \"severity\": \"critical\" if sig[\"reliability\"] > 0.8 else \"high\"\n        })\n    return validations\n\n# Create specialized agents\npattern_scanner = Agent(\n    name=\"Pattern Scanner\",\n    role=\"Code Analysis\",\n    goal=\"Scan for suspicious patterns\",\n    instructions=\"Analyze code for potential vulnerabilities\",\n    tools=[scan_code_patterns]\n)\n\nvector_analyzer = Agent(\n    name=\"Vector Analyzer\",\n    role=\"Attack Vector Analysis\",\n    goal=\"Analyze attack vectors\",\n    instructions=\"Identify potential attack paths\",\n    tools=[analyze_attack_vectors]\n)\n\nexploit_simulator = Agent(\n    name=\"Exploit Simulator\",\n    role=\"Exploitation Testing\",\n    goal=\"Simulate exploitation attempts\",\n    instructions=\"Test potential vulnerabilities\",\n    tools=[simulate_exploitation]\n)\n\nsignature_generator = Agent(\n    name=\"Signature Generator\",\n    role=\"Signature Creation\",\n    goal=\"Generate vulnerability signatures\",\n    instructions=\"Create detection signatures\",\n    tools=[generate_signatures]\n)\n\nfinding_validator = Agent(\n    name=\"Finding Validator\",\n    role=\"Validation\",\n    goal=\"Validate findings\",\n    instructions=\"Verify vulnerability findings\",\n    tools=[validate_findings]\n)\n\n# Create workflow tasks\nscanning_task = Task(\n    name=\"scan_patterns\",\n    description=\"Scan code patterns\",\n    expected_output=\"Suspicious patterns\",\n    agent=pattern_scanner,\n    is_start=True,\n    next_tasks=[\"analyze_vectors\"]\n)\n\nvector_task = Task(\n    name=\"analyze_vectors\",\n    description=\"Analyze attack vectors\",\n    expected_output=\"Attack vectors\",\n    agent=vector_analyzer,\n    next_tasks=[\"simulate_exploits\"]\n)\n\nsimulation_task = Task(\n    name=\"simulate_exploits\",\n    description=\"Simulate exploits\",\n    expected_output=\"Exploitation results\",\n    agent=exploit_simulator,\n    next_tasks=[\"generate_signatures\"]\n)\n\nsignature_task = Task(\n    name=\"generate_signatures\",\n    description=\"Generate signatures\",\n    expected_output=\"Vulnerability signatures\",\n    agent=signature_generator,\n    next_tasks=[\"validate_findings\"]\n)\n\nvalidation_task = Task(\n    name=\"validate_findings\",\n    description=\"Validate findings\",\n    expected_output=\"Validation results\",\n    agent=finding_validator,\n    task_type=\"decision\",\n    condition={\n        \"critical\": [\"scan_patterns\"],  # Continue scanning if critical\n        \"high\": [\"analyze_vectors\"],  # Reanalyze if high\n        \"medium\": \"\"  # End workflow if medium\n    }\n)\n\n# Create workflow\nworkflow = PraisonAIAgents(\n    agents=[pattern_scanner, vector_analyzer, exploit_simulator,\n            signature_generator, finding_validator],\n    tasks=[scanning_task, vector_task, simulation_task,\n           signature_task, validation_task],\n    process=\"workflow\",\n    verbose=True\n)\n\nasync def main():\n    print(\"\\nStarting Vulnerability Detection Workflow...\")\n    print(\"=\" * 50)\n    \n    # Run workflow\n    results = await workflow.astart()\n    \n    # Print results\n    print(\"\\nVulnerability Detection Results:\")\n    print(\"=\" * 50)\n    for task_id, result in results[\"task_results\"].items():\n        if result:\n            print(f\"\\nTask: {task_id}\")\n            print(f\"Result: {result.raw}\")\n            print(\"-\" * 50)\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Agents - Python\nDESCRIPTION: This Python snippet demonstrates how to create multiple agents with specific roles using the PraisonAI framework. It shows how to initialize and start agents that have distinct instructions.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/introduction.mdx#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent, PraisonAIAgents\n\n# Create agents with specific roles\ndiet_agent = Agent(\n    instructions=\"Give me 5 healthy food recipes\",\n)\n\nblog_agent = Agent(\n    instructions=\"Write a blog post about the food recipes\",\n)\n\n# Run multiple agents\nagents = PraisonAIAgents(agents=[diet_agent, blog_agent])\nagents.start()\n```\n\n----------------------------------------\n\nTITLE: Setting Up a Multi-Agent Knowledge System in Python\nDESCRIPTION: This Python snippet outlines how to set up a multi-agent knowledge system using the PraisonAIAgents class, which allows for the execution of multiple knowledgeable agents sequentially, handling specific tasks.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/rag.mdx#2025-04-19_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent, Task, PraisonAIAgents\nimport logging\nimport os\n\n# Configure logging\nlogging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')\nlogger = logging.getLogger(__name__)\n\n# Define the configuration for the Knowledge instance\nconfig = {\n    \"vector_store\": {\n        \"provider\": \"chroma\",\n        \"config\": {\n            \"collection_name\": \"praison\",\n            \"path\": \".praison\",\n        }\n    }\n}\n\n# Create an agent with knowledge capabilities\nknowledge_agent = Agent(\n    name=\"KnowledgeAgent\",\n    role=\"Information Specialist\",\n    goal=\"Store and retrieve knowledge efficiently\",\n    backstory=\"Expert in managing and utilizing stored knowledge\",\n    knowledge=[\"sample.pdf\"], # Indexing\n    knowledge_config=config, # Configuration\n    verbose=True\n)\n\n# Define a task for the agent\nknowledge_task = Task(\n    name=\"knowledge_task\",\n    description=\"Who is Mervin Praison?\",\n    expected_output=\"Answer to the question\",\n    agent=knowledge_agent # Agent\n)\n\n# Create and start the agents\nagents = PraisonAIAgents(\n    agents=[knowledge_agent],\n    tasks=[knowledge_task],\n    process=\"sequential\",\n    user_id=\"user1\" # User ID\n)\n\n# Start execution\nresult = agents.start() # Retrieval\n```\n\n----------------------------------------\n\nTITLE: Creating AI Agents with Pydantic  - Python\nDESCRIPTION: This code snippet creates an AI agent using the PraisonAI library and Pydantic models for structured outputs, defining data structures and tasks for the agent to perform.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/structured.mdx#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent, Task, PraisonAIAgents, Tools\nfrom pydantic import BaseModel\n\n# Define your data structure\nclass AnalysisReport(BaseModel):\n    title: str\n    findings: str\n    summary: str\n\n# Create agent\nanalyst = Agent(\n    role=\"Data Analyst\",\n    goal=\"Analyze data and provide structured insights\",\n    backstory=\"Expert in data analysis and insights generation\",\n    tools=[Tools.internet_search],\n    verbose=True\n)\n\n# Create task with structured output\ntask = Task(\n    description=\"Analyze recent AI developments\",\n    expected_output=\"Structured analysis report\",\n    agent=analyst,\n    output_pydantic=AnalysisReport\n)\n\n# Create and start the agents\nagents = PraisonAIAgents(\n    agents=[analyst],\n    tasks=[task],\n    process=\"sequential\",\n    verbose=2\n)\n\n# Start execution\nresult = agents.start()\nprint(result.pydantic.title)\nprint(result.pydantic.findings)\nprint(result.pydantic.summary)\n```\n\n----------------------------------------\n\nTITLE: Creating Multi-Agent System in Python\nDESCRIPTION: In this Python code snippet, two agents are created for image analysis and content writing. The code sets up tasks for each agent and starts their sequential processing.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/multimodal.mdx#2025-04-19_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent, Task, PraisonAIAgents\n\n# Create first agent for image analysis\nvision_agent = Agent(\n    role=\"Image Analyst\",\n    goal=\"Analyze visual content and extract key information\",\n    backstory=\"Expert in visual analysis and image understanding\",\n    llm=\"gpt-4o-mini\",\n    self_reflect=False\n)\n\n# Create second agent for content writing\nwriter_agent = Agent(\n    role=\"Content Writer\",\n    goal=\"Create engaging content based on image analysis\",\n    backstory=\"Expert in creating compelling content from visual insights\",\n    llm=\"gpt-4o-mini\"\n)\n\n# Create tasks for different media types\ndocument_task = Task(\n    description=\"Extract and summarize text from this document image\",\n    expected_output=\"Structured text content with key information highlighted\",\n    agent=vision_agent,\n    images=[\"document.jpg\"]\n)\n\nwriting_task = Task(\n    description=\"Create engaging content based on image analysis\",\n    expected_output=\"Compelling article incorporating visual insights\",\n    agent=writer_agent\n)\n\n# Create and start the agents\nagents = PraisonAIAgents(\n    agents=[vision_agent, writer_agent],\n    tasks=[document_task, writing_task],\n    process=\"sequential\"\n)\n\nresult = agents.start()\n```\n\n----------------------------------------\n\nTITLE: Initializing and Running PraisonAI News Analysis System\nDESCRIPTION: Main execution code that initializes PraisonAI with the configured agents and tools, sets up API keys, and runs the news analysis system.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/cookbooks/yaml/news_retreival_rag_agents.ipynb#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom praisonai import PraisonAI\nfrom google.colab import userdata\n\n# Create a PraisonAI instance with the agent_yaml content\npraisonai = PraisonAI(agent_yaml=agent_yaml, tools=[NewsDBTool, RetrieveNewsTool, InternetSearchTool])\n\n# Add OPENAI_API_KEY Secrets to Google Colab on the Left Hand Side 🔑 or Enter Manually Below\nos.environ[\"OPENAI_API_KEY\"] = userdata.get('OPENAI_API_KEY') or \"ENTER OPENAI_API_KEY HERE\"\nos.environ[\"OPENAI_MODEL_NAME\"] = \"gpt-4o-mini\"\n\n# Run PraisonAI\nresult = praisonai.run()\n\n# Print the result\nprint(result) # 10/10\n```\n\n----------------------------------------\n\nTITLE: Defining an Agent - Python\nDESCRIPTION: This snippet demonstrates how to create an instance of an Agent in PraisonAI with specific attributes such as name, role, goal, and backstory. The 'verbose' option can be enabled for detailed logging, and 'llm' specifies the language model to be used.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/concepts/agents.mdx#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nagent = Agent(\\\n    name=\\\"Researcher\\\",\\\n    role=\\\"Senior Research Analyst\\\",\\\n    goal=\\\"Uncover cutting-edge developments in AI\\\",\\\n    backstory=\\\"You are an expert at a technology research group\\\",\\\n    verbose=True,\\\n    llm=\\\"gpt-4o\\\",\\\n    markdown=True\\\n)\n```\n\n----------------------------------------\n\nTITLE: Deploy Agent as Web App in Python\nDESCRIPTION: This snippet shows how to deploy an AI agent as part of a Flask web application. It creates an `Agent` object when the app starts and exposes an API endpoint `/api/support` that accepts a user query as input, processes it with the agent, and returns the agent's response as a JSON object. Error handling is included to catch exceptions and return appropriate error responses.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/course/agents/20-deploying-agents.mdx#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom flask import Flask, request, jsonify\nfrom praisonaiagents import Agent\nimport os\n\napp = Flask(__name__)\n\n# Create agent once at startup\nsupport_agent = Agent(\n    name=\"SupportAgent\",\n    instructions=\"You are a customer support agent that helps users with product questions.\",\n    llm=\"gpt-4o-mini\"  # Using the specified model\n)\n\n@app.route('/api/support', methods=['POST'])\ndef get_support():\n    data = request.json\n    user_query = data.get('query', '')\n    \n    if not user_query:\n        return jsonify({\"error\": \"No query provided\"}), 400\n    \n    try:\n        response = support_agent.start(user_query)\n        return jsonify({\"response\": response})\n    except Exception as e:\n        return jsonify({\"error\": str(e)}), 500\n\nif __name__ == \"__main__\":\n    app.run(debug=True, port=5000)\n```\n\n----------------------------------------\n\nTITLE: Implementing Image Analysis Agent\nDESCRIPTION: Complete Python script showing how to create and configure an image analysis agent with multiple tasks for analyzing different types of images.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/agents/image.mdx#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent, Task, PraisonAIAgents\n\n# Create Image Analysis Agent\nimage_agent = Agent(\n    name=\"ImageAnalyst\",\n    role=\"Image Analysis Specialist\",\n    goal=\"Analyze images and videos to extract meaningful information\",\n    backstory=\"\"\"You are an expert in computer vision and image analysis.\n    You excel at describing images, detecting objects, and understanding visual content.\"\"\",\n    llm=\"gpt-4o-mini\",\n    self_reflect=False\n)\n\n# Create tasks for different types of analysis\ntask1 = Task(\n    name=\"analyze_landmark\",\n    description=\"Describe this famous landmark and its architectural features.\",\n    expected_output=\"Detailed description of the landmark's architecture and significance\",\n    agent=image_agent,\n    images=[\"https://example.com/landmark.jpg\"]\n)\n\ntask2 = Task(\n    name=\"analyze_local_image\",\n    description=\"What objects can you see in this image? Describe their arrangement.\",\n    expected_output=\"Detailed description of objects and their spatial relationships\",\n    agent=image_agent,\n    images=[\"local_image.jpg\"]\n)\n\n# Create PraisonAIAgents instance\nagents = PraisonAIAgents(\n    agents=[image_agent],\n    tasks=[task1, task2],\n    process=\"sequential\",\n    verbose=1\n)\n\n# Run analysis\nagents.start()\n```\n\n----------------------------------------\n\nTITLE: Adding Web Search to Research Agent with praisonaiagents\nDESCRIPTION: This code snippet enhances a research agent by adding web search capability using a simulated web search function and the praisonaiagents library. It defines a web search tool and integrates it into the agent to find and summarize information from the web.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/course/agents/15-research-agents.mdx#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent, Tool\n\n# Define a web search function (simulated for this example)\ndef web_search(query):\n    \"\"\"\n    Simulated web search function.\n    In a real application, this would connect to a search API.\n    \n    Args:\n        query (str): The search query\n        \n    Returns:\n        str: Search results\n    \"\"\"\n    # This is just a simulation - in a real application, you'd call a search API\n    if \"renewable energy\" in query.lower():\n        return \"\"\"\n        Search results for 'renewable energy carbon emissions':\n        \n        1. According to the IEA, renewable energy prevented 2.1 billion tonnes of CO2 emissions in 2022.\n        \n        2. Solar and wind power generate electricity with 95-98% lower carbon emissions than coal-based electricity.\n        \n        3. The IPCC reports that renewable energy could deliver more than half of the emission reductions needed by 2030.\n        \"\"\"\n    else:\n        return f\"Search results for '{query}' (simulated data)\"\n\n# Create the web search tool\nsearch_tool = Tool(\n    name=\"web_search\",\n    function=web_search,\n    description=\"Search the web for current information on a topic\"\n)\n\n# Create a research agent with web search capability\nenhanced_research_agent = Agent(\n    name=\"EnhancedResearchAgent\",\n    instructions=\"\"\"\n    You are a research specialist who finds and summarizes information.\n    \n    When researching topics:\n    1. Use the web_search tool to find current information\n    2. Analyze and synthesize the search results\n    3. Organize findings in a logical structure\n    4. Identify key points and insights\n    5. Present information in a clear, concise format\n    \"\"\",\n    tools=[search_tool]\n)\n\n# Use the enhanced research agent\nenhanced_results = enhanced_research_agent.start(\"What is the impact of renewable energy on carbon emissions?\")\nprint(enhanced_results)\n```\n\n----------------------------------------\n\nTITLE: Implementing PraisonAI Agents in Custom Code\nDESCRIPTION: Example TypeScript code demonstrating how to use PraisonAI in custom applications. Shows the creation of an agent, task definition, and execution of the agent system with proper configuration parameters.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/src/praisonai-ts/examples/concepts/README.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Agent, Task, PraisonAIAgents } from 'praisonai';\n\n// Create an agent\nconst agent = new Agent({\n    name: \"MyAgent\",\n    role: \"Custom Role\",\n    goal: \"Achieve something specific\",\n    backstory: \"Relevant background\",\n    verbose: true\n});\n\n// Create a task\nconst task = new Task({\n    name: \"my_task\",\n    description: \"Do something specific\",\n    expected_output: \"Expected result\",\n    agent: agent\n});\n\n// Run the agent\nconst system = new PraisonAIAgents({\n    agents: [agent],\n    tasks: [task],\n    verbose: true\n});\n\nconst result = await system.start();\n```\n\n----------------------------------------\n\nTITLE: Configuring Agents in YAML Without Code\nDESCRIPTION: YAML configuration for setting up AI agents within the PraisonAI framework, specifying roles, goals, memory settings, and tasks. It supports a no-code approach to define agent behaviors and interactions for market research and report creation.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/concepts/memory.mdx#2025-04-19_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nframework: praisonai\nprocess: sequential\nmemory: true\nroles:\n  researcher:\n    backstory: Expert in market research and data analysis.\n    goal: Research and analyze market trends\n    role: Research Analyst\n    tools:\n      - duckduckgo\n    tasks:\n      research_task:\n        description: Research current market trends.\n        expected_output: Detailed market analysis.\n\n  writer:\n    backstory: Expert in technical writing and report creation.\n    goal: Create comprehensive market reports\n    role: Report Writer\n    tasks:\n      report_task:\n        description: Create a market report based on research.\n        expected_output: Comprehensive market report.\n```\n\n----------------------------------------\n\nTITLE: Creating Python Script with Single Tool\nDESCRIPTION: This code sets up a Python script to create a PraisonAI agent with a Wikipedia tool, aiming to perform research tasks by fetching data from Wikipedia.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/langchain.mdx#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent, Task, PraisonAIAgents\nfrom langchain_community.utilities import WikipediaAPIWrapper\n\n# Create an agent with Wikipedia tool\nagent = Agent(\n    name=\"WikiAgent\",\n    role=\"Research Assistant\",\n    goal=\"Search Wikipedia for accurate information\",\n    backstory=\"I am an AI assistant specialized in Wikipedia research\",\n    tools=[WikipediaAPIWrapper],\n    self_reflect=False\n)\n\n# Create a research task\ntask = Task(\n    name=\"wiki_search\",\n    description=\"Research 'Artificial Intelligence' on Wikipedia\",\n    expected_output=\"Comprehensive information from Wikipedia articles\",\n    agent=agent\n)\n\n# Create and start the workflow\nagents = PraisonAIAgents(\n    agents=[agent],\n    tasks=[task],\n    verbose=True\n)\n\nagents.start()\n```\n\n----------------------------------------\n\nTITLE: Initializing and Running PraisonAI System\nDESCRIPTION: Main execution script that initializes the PraisonAI system with the configured agents and tools, sets up OpenAI API credentials, and runs the travel planning process.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/cookbooks/yaml/surprise_trip_planner_and_itinerary_agents.ipynb#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom praisonai import PraisonAI\nfrom google.colab import userdata\n\n# Create a PraisonAI instance with the agent_yaml content\npraisonai = PraisonAI(agent_yaml=agent_yaml, tools=[InternetSearchTool, WebContentReaderTool])\n\n# Add OPENAI_API_KEY Secrets to Google Colab on the Left Hand Side 🔑 or Enter Manually Below\nos.environ[\"OPENAI_API_KEY\"] = userdata.get('OPENAI_API_KEY') or \"ENTER OPENAI_API_KEY HERE\"\nos.environ[\"OPENAI_MODEL_NAME\"] = \"gpt-4o-mini\"\n\n# Run PraisonAI\nresult = praisonai.run()\n\n# Print the result\nprint(result) # 8/10\n```\n\n----------------------------------------\n\nTITLE: Implementing Wikipedia Search Tool with Langchain\nDESCRIPTION: This Python code defines a custom tool, `WikipediaSearchTool`, that leverages the `WikipediaAPIWrapper` from `langchain_community` to search Wikipedia for relevant information based on a query. The `_run` method executes the search and returns the results. The tool limits the results to the top 4 and a maximum of 100 characters per document.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/wikipedia.mdx#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# tools.py\nfrom langchain_community.utilities import WikipediaAPIWrapper\nclass WikipediaSearchTool(BaseTool):\n    name: str = \"WikipediaSearchTool\"\n    description: str = \"Search Wikipedia for relevant information based on a query.\"\n\n    def _run(self, query: str):\n        api_wrapper = WikipediaAPIWrapper(top_k_results=4, doc_content_chars_max=100)\n        results = api_wrapper.load(query=query)\n        return results\n```\n\n----------------------------------------\n\nTITLE: Comparison Research Agent with praisonaiagents\nDESCRIPTION: This snippet demonstrates how to create a specialized comparison research agent using the praisonaiagents library. It configures the agent to compare different options based on key criteria and present findings in a structured format, such as a table.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/course/agents/15-research-agents.mdx#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ncomparison_agent = Agent(\n    name=\"ComparisonAgent\",\n    instructions=\"\"\"\n    You are a research specialist who compares different options or topics.\n    \n    When comparing items:\n    1. Identify the key criteria for comparison\n    2. Research each option thoroughly\n    3. Create a clear side-by-side comparison\n    4. Highlight advantages and disadvantages of each option\n    5. Provide a balanced conclusion\n    \n    Present your findings in a structured table format when appropriate.\n    \"\"\",\n    tools=[search_tool]\n)\n\n# Use the comparison agent\ncomparison_results = comparison_agent.start(\"Compare solar and wind energy for residential use\")\nprint(comparison_results)\n```\n\n----------------------------------------\n\nTITLE: Installing PraisonAI Basic Package\nDESCRIPTION: Command to install the basic PraisonAI agents package using pip\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/introduction.mdx#2025-04-19_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\npip install praisonaiagents\n```\n\n----------------------------------------\n\nTITLE: Using PraisonAI in Auto Mode with Command Line\nDESCRIPTION: Commands to install PraisonAI package, set up API key, and run an AI agent in auto mode from the command line.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/README.md#2025-04-19_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npip install praisonai\nexport OPENAI_API_KEY=xxxxxxxxxxxxxxxxxxxxxx\npraisonai --auto create a movie script about Robots in Mars\n```\n\n----------------------------------------\n\nTITLE: Advanced Python Operations with Multiple Agents Example - Python\nDESCRIPTION: Illustrates the setup of multiple agents: one for code execution and another for monitoring, showcasing the use of the PraisonAI Agents framework to manage complex AI behaviors during code execution.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/python_tools.mdx#2025-04-19_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nexecutor_agent = Agent(\n    name=\"CodeExecutor\",\n    role=\"Code Execution Specialist\",\n    goal=\"Execute Python code efficiently.\",\n    tools=[\n        execute_code, analyze_code, format_code,\n        lint_code, disassemble_code\n    ],\n    self_reflect=False\n)\n\nmonitor_agent = Agent(\n    name=\"CodeMonitor\",\n    role=\"Execution Monitor\",\n    goal=\"Monitor code execution and handle errors.\",\n    backstory=\"Expert in code monitoring and error handling.\",\n    self_reflect=False\n)\n\nexecution_task = Task(\n    description=\"Execute Python scripts.\",\n    agent=executor_agent,\n    name=\"code_execution\"\n)\n\nmonitoring_task = Task(\n    description=\"Monitor execution and handle errors.\",\n    agent=monitor_agent,\n    name=\"execution_monitoring\"\n)\n\nagents = PraisonAIAgents(\n    agents=[executor_agent, monitor_agent],\n    tasks=[execution_task, monitoring_task],\n    process=\"sequential\"\n)\nagents.start()\n```\n\n----------------------------------------\n\nTITLE: Defining CrewAI YAML Configuration for Job Hunt Agents\nDESCRIPTION: Creates a YAML configuration string that defines four agents: Job Searcher, Skills Development Advisor, Interview Preparation Coach, and Career Advisor. Each agent has specific roles, goals, and tasks related to job hunting and career development.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/cookbooks/yaml/job_hunt_agents.ipynb#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nagent_yaml = \"\"\"\nframework: \"crewai\"\ntopic: \"Job Search Assistance and Career Advisory\"\nroles:\n  job_searcher_agent:\n    role: \"Job Searcher\"\n    backstory: |\n      An experienced job searcher actively seeking new opportunities in the specified field. Skilled in identifying job listings relevant to the user's qualifications.\n    goal: |\n      Conduct job searches for specified roles and locations, focusing on discovering relevant listings that match the user's skills and interests.\n    verbose: true\n    allow_delegation: true\n    tools:\n      - \"JobSearchTool\"\n    tasks:\n      job_search_task:\n        description: |\n          Search for job openings in a specified role and location using the Job Search tool. Fetch a specified number of results.\n        expected_output: |\n          List of relevant job listings with titles, companies, locations, and short descriptions.\n  skills_development_agent:\n    role: \"Skills Development Advisor\"\n    backstory: |\n      A dedicated advisor identifying key skills required for job roles and providing guidance on skill enhancement methods.\n    goal: |\n      Analyze job listings to identify essential skills for each position, recommending resources and methods to develop those skills.\n    verbose: true\n    allow_delegation: true\n    tools: []\n    tasks:\n      skills_highlighting_task:\n        description: |\n          Analyze job listings for skills requirements. Provide recommendations for candidates on acquiring these skills through online courses, self-study, or hands-on experience.\n        expected_output: |\n          List of key skills for each job and corresponding skill development resources.\n  interview_preparation_coach:\n    role: \"Interview Preparation Coach\"\n    backstory: |\n      An expert in preparing candidates for interviews by simulating interview scenarios, coaching on communication skills, and providing feedback.\n    goal: |\n      Conduct mock interviews, focusing on enhancing the candidate's responses, presentation, and communication.\n    verbose: true\n    allow_delegation: true\n    tools: []\n    tasks:\n      interview_preparation_task:\n        description: |\n          Prepare candidates for interviews by conducting mock interview sessions. Offer feedback on responses, presentation, and communication skills specific to the roles applied.\n        expected_output: |\n          Feedback on candidate's interview responses, including strengths and areas for improvement.\n  career_advisor:\n    role: \"Career Advisor\"\n    backstory: |\n      Experienced in guiding job seekers through resume enhancement, LinkedIn profile optimization, and effective networking techniques.\n    goal: |\n      Provide comprehensive career advice, including resume building, LinkedIn profile optimization, and networking strategies.\n    verbose: true\n    allow_delegation: true\n    tools: []\n    tasks:\n      career_advisory_task:\n        description: |\n          Offer guidance on building resumes, optimizing LinkedIn profiles, and networking strategies to strengthen job applications.\n        expected_output: |\n          Detailed suggestions for resume improvement, LinkedIn profile optimization, and networking strategies for job seekers.\ndependencies: []\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Knowledge Agent with PraisonAI in Python\nDESCRIPTION: This Python snippet demonstrates how to initialize a knowledge agent using the PraisonAI framework. It uses the `Agent` class, providing a name and instructions, along with loading a specific knowledge base file. Requires the `praisonaiagents` package. The snippet assigns a PDF document to the knowledge base which the agent uses to respond to user queries.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/course/agents/09-knowledge-bases.mdx#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent\n\nagent = Agent(\n    name=\"Knowledge Agent\",\n    instructions=\"You answer questions based on the provided knowledge.\",\n    knowledge=[\"small.pdf\"]\n)\n\nagent.start(\"What is KAG in one line?\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Knowledge Agent in Python\nDESCRIPTION: This Python snippet shows how to create a Knowledge Agent capable of answering questions based on indexed knowledge. It initializes the agent with specific instructions and begins a question retrieval process.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/rag.mdx#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent\n\nagent = Agent(\n    name=\"Knowledge Agent\",\n    instructions=\"You answer questions based on the provided knowledge.\",\n    knowledge=[\"small.pdf\"], # Indexing\n)\n\nagent.start(\"What is KAG in one line?\") # Retrieval\n```\n\n----------------------------------------\n\nTITLE: Installing and Running PraisonAI Agents - TypeScript\nDESCRIPTION: Details how to set up the PraisonAI package with TypeScript, configure an API key, and execute agent scripts in a TypeScript environment. Incorporates both single and multiple agent examples, requiring npm/yarn and TypeScript.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/index.mdx#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install praisonai\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add praisonai\n```\n\nLANGUAGE: bash\nCODE:\n```\nexport OPENAI_API_KEY=xxxxxxxxxxxxxxxxxxxxxx\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx ts-node app.ts\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Agent } from 'praisonai';\n\nconst agent = new Agent({ \n  instructions: `You are a creative writer who writes short stories with emojis.`,\n  name: \"StoryWriter\"\n});\n\nagent.start(\"Write a story about a time traveler\")\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Agent, PraisonAIAgents } from 'praisonai';\n\nconst storyAgent = new Agent({\n  instructions: \"Generate a very short story (2-3 sentences) about artificial intelligence with emojis.\",\n  name: \"StoryAgent\"\n});\n\nconst summaryAgent = new Agent({\n  instructions: \"Summarize the provided AI story in one sentence with emojis.\",\n  name: \"SummaryAgent\"\n});\n\nconst agents = new PraisonAIAgents({\n  agents: [storyAgent, summaryAgent]\n});\n\nagents.start()\n```\n\n----------------------------------------\n\nTITLE: Installing PraisonAI with Both CrewAI and AG2 Support\nDESCRIPTION: This command installs PraisonAI with support for both CrewAI and AG2 frameworks, combining their respective features and capabilities.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/nocode/installation.mdx#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npip install \"praisonai[crewai,autogen]\"\n```\n\n----------------------------------------\n\nTITLE: Installing PraisonAI with AG2 Support\nDESCRIPTION: This command installs PraisonAI with AG2 framework support, including tools integration, multi-agent conversation capabilities, and code execution environment.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/nocode/installation.mdx#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npip install \"praisonai[autogen]\"\n```\n\n----------------------------------------\n\nTITLE: Creating an AI Agent with OpenRouter and Airbnb MCP Integration in Python\nDESCRIPTION: Creates a PraisonAI agent that uses the OpenRouter API to access Google's Gemini model and integrates with Airbnb through MCP for searching accommodations. The agent is configured to understand natural language queries for booking apartments.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/mcp/openrouter.mdx#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent, MCP\n\nsearch_agent = Agent(\n    instructions=\"\"\"You help book apartments on Airbnb.\"\"\",\n    llm=\"openrouter/google/gemini-2.0-flash-exp:free\",\n    tools=MCP(\"npx -y @openbnb/mcp-server-airbnb --ignore-robots-txt\")\n)\n\nsearch_agent.start(\"MUST USE airbnb_search Tool to Search. Search for Apartments in Paris for 2 nights. 04/28 - 04/30 for 2 adults. All Your Preference\")\n```\n\n----------------------------------------\n\nTITLE: Creating Advanced PraisonAI Agent with Gemini Model in Python\nDESCRIPTION: Demonstrates the creation of a PraisonAI Agent with advanced configuration options. This example includes detailed LLM settings, self-reflection capabilities, and markdown formatting for responses.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/models.mdx#2025-04-19_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent\n\n# Detailed LLM configuration\nllm_config = {\n    \"model\": \"gemini/gemini-1.5-flash-latest\",  # Model name without provider prefix\n    \n    # Core settings\n    \"temperature\": 0.7,                # Controls randomness (like temperature)\n    \"timeout\": 30,                 # Timeout in seconds\n    \"top_p\": 0.9,                    # Nucleus sampling parameter\n    \"max_tokens\": 1000,               # Max tokens in response\n    \n    # Advanced parameters\n    \"presence_penalty\": 0.1,         # Penalize repetition of topics (-2.0 to 2.0)\n    \"frequency_penalty\": 0.1,        # Penalize token repetition (-2.0 to 2.0)\n    \n    # API settings (optional)\n    \"api_key\": None,                 # Your API key (or use environment variable)\n    \"base_url\": None,                # Custom API endpoint if needed\n    \n    # Response formatting\n    \"response_format\": {             # Force specific response format\n        \"type\": \"text\"               # Options: \"text\", \"json_object\"\n    },\n    \n    # Additional controls\n    \"seed\": 42,                      # For reproducible responses\n    \"stop_phrases\": [\"##\", \"END\"],   # Custom stop sequences\n}\n\nagent = Agent(\n    instructions=\"You are a helpful Assistant specialized in scientific explanations. \"\n                \"Provide clear, accurate, and engaging responses.\",\n    llm=llm_config,                  # Pass the detailed configuration\n    verbose=True,                    # Enable detailed output\n    markdown=True,                   # Format responses in markdown\n    self_reflect=True,              # Enable self-reflection\n    max_reflect=3,                  # Maximum reflection iterations\n    min_reflect=1                   # Minimum reflection iterations\n)\n\n# Test the agent\nresponse = agent.start(\"Why is the sky blue? Please explain in simple terms.\")\n```\n\n----------------------------------------\n\nTITLE: Using YAML for Configuring AI Agents\nDESCRIPTION: An example of creating an `agents.yaml` configuration file to run multiple AI agents. This approach allows defining roles and instructions for each agent, executed with the PraisonAI command-line tool. Requires PraisonAI package installed.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/index.mdx#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npraisonai --init \"your task description\"\n```\n\nLANGUAGE: yaml\nCODE:\n```\nroles:\n  summarise_agent:\n    instructions: Summarise Photosynthesis\n```\n\nLANGUAGE: yaml\nCODE:\n```\nroles:\n  diet_agent:\n    instructions: Give me 5 healthy food recipes\n  blog_agent:\n    instructions: Write a blog post about the food recipes\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic PDF Chat Agent\nDESCRIPTION: Demonstrates how to set up a basic PDF chat agent using the PraisonAI framework with minimal configuration using a pre-indexed PDF file.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/chat-with-pdf.mdx#2025-04-19_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent\n\nagent = Agent(\n    name=\"PDF Chat Agent\",\n    instructions=\"You answer questions based on the provided PDF document.\",\n    knowledge=[\"document.pdf\"] # PDF Indexing\n)\n\nagent.start(\"What are the key points in this document?\") # Chat Query\n```\n\n----------------------------------------\n\nTITLE: Setting up PraisonAI with CrewAI Framework\nDESCRIPTION: Installation and configuration of PraisonAI with CrewAI support. Includes specific framework initialization commands.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/nocode/tldr.mdx#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Install with CrewAI support\npip install \"praisonai[crewai]\"\n\n# Set your API key\nexport OPENAI_API_KEY=\"Enter your API key\"\n\n# Initialize and run\npraisonai --framework crewai --init \"create a movie script about dog in moon\"\npraisonai --framework crewai\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Agents in Python\nDESCRIPTION: This code snippet demonstrates the creation of multiple agents, each with their own tasks, within the PraisonAI framework. It includes their attributes and executes the agents in a hierarchical process.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/concepts/tasks.mdx#2025-04-19_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent, Task, PraisonAIAgents\n\n# Create multiple agents\nresearcher = Agent(\n    name=\"Researcher\",\n    role=\"Senior Research Analyst\",\n    goal=\"Uncover cutting-edge developments in AI\",\n    backstory=\"You are an expert at a technology research group\",\n    verbose=True,\n    llm=\"gpt-4o\",\n    markdown=True\n)\n\nwriter = Agent(\n    name=\"Writer\",\n    role=\"Tech Content Strategist\",\n    goal=\"Craft compelling content on tech advancements\",\n    backstory=\"You are a content strategist\",\n    llm=\"gpt-4o\",\n    markdown=True\n)\n\n# Define multiple tasks\ntask1 = Task(\n    name=\"research_task\",\n    description=\"Analyze 2024's AI advancements\",\n    expected_output=\"A detailed report\",\n    agent=researcher\n)\n\ntask2 = Task(\n    name=\"writing_task\",\n    description=\"Create a blog post about AI advancements\",\n    expected_output=\"A blog post\",\n    agent=writer\n)\n\n# Run with hierarchical process\nagents = PraisonAIAgents(\n    agents=[researcher, writer],\n    tasks=[task1, task2],\n    verbose=False,\n    process=\"hierarchical\",\n    manager_llm=\"gpt-4o\"\n)\n\nresult = agents.start()\n```\n\n----------------------------------------\n\nTITLE: Sequential Process Example for AutoAgents in Python\nDESCRIPTION: This Python code sets up an AutoAgents instance that processes tasks sequentially. It demonstrates creating an agent with outlined instructions specifying the sequential process type for task execution.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/autoagents.mdx#2025-04-19_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n# Tasks are executed in sequence\nagents = AutoAgents(\n    instructions=\"Your task\",\n    process=\"sequential\"\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Spider Agent with Tools in Python\nDESCRIPTION: This Python code demonstrates creating a specialized scraping agent using the `Agent` class. It showcases how to configure the agent with a set of tools for various scraping operations such as page scraping, content extraction, link crawling, HTML parsing, and data structuring.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/spider_tools.mdx#2025-04-19_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n```python\nAgent(tools=[scrape_page, extract_content, crawl_links, parse_html, structure_data])\n```\n```\n\n----------------------------------------\n\nTITLE: Setting Up Complete Python Execution Pipeline in PraisonAI\nDESCRIPTION: Demonstrates a full implementation of a Python code execution pipeline with executor and monitor agents. The snippet shows how to configure agents with specific roles, define execution and monitoring tasks, and run the workflow using the PraisonAIAgents framework.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/python_tools.mdx#2025-04-19_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n# Execution agent\nexecutor = Agent(\n    name=\"Executor\",\n    role=\"Code Executor\",\n    tools=[\n        execute_code, analyze_code, format_code,\n        lint_code, disassemble_code\n    ]\n)\n\n# Monitor agent\nmonitor = Agent(\n    name=\"Monitor\",\n    role=\"Execution Monitor\"\n)\n\n# Define tasks\nexecute_task = Task(\n    description=\"Execute Python code\",\n    agent=executor\n)\n\nmonitor_task = Task(\n    description=\"Monitor execution\",\n    agent=monitor\n)\n\n# Run workflow\nagents = PraisonAIAgents(\n    agents=[executor, monitor],\n    tasks=[execute_task, monitor_task]\n)\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Research Assistant Agent\nDESCRIPTION: This code snippet defines a simple research assistant agent using the PraisonAI library. It outlines the agent's instructions for providing concise and clear information, specifying key functionalities without dependencies other than praisonaiagents.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/course/agents/11-creating-your-first-agent.mdx#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Create a research assistant agent\nresearch_assistant = Agent(\n    name=\"ResearchAssistant\",\n    instructions=\"\"\"\n    You are a helpful research assistant that provides clear, \n    accurate information on various topics. When answering:\n    \n    1. Be concise and to the point\n    2. Explain complex concepts in simple terms\n    3. When appropriate, organize information with bullet points\n    4. If you don't know something, admit it instead of guessing\n    \"\"\"\n)\n```\n\n----------------------------------------\n\nTITLE: Process Multiple Tasks Asynchronously\nDESCRIPTION: This function processes multiple tasks in parallel using `asyncio.gather`. It creates a list of tasks and then uses an agent to execute each task asynchronously, returning the results.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/async.mdx#2025-04-19_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nasync def process_multiple_tasks():\n    tasks = [\n        Task(\n            name=f\"task_{i}\",\n            description=f\"Process item {i}\",\n            async_execution=True\n        ) for i in range(5)\n    ]\n    \n    results = await asyncio.gather(\n        *[agent.achat(task.description) for task in tasks]\n    )\n    return results\n```\n\n----------------------------------------\n\nTITLE: Implementing a Single Agent with PraisonAI in TypeScript\nDESCRIPTION: Example of creating and running a single AI agent that provides information about photosynthesis. Demonstrates the basic agent setup and execution pattern.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/src/praisonai-ts/README.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Agent, PraisonAIAgents } from 'praisonai';\n\nasync function main() {\n    // Create a simple agent (no task specified)\n    const agent = new Agent({\n        name: \"BiologyExpert\",\n        instructions: \"Explain the process of photosynthesis in detail.\",\n        verbose: true\n    });\n\n    // Run the agent\n    const praisonAI = new PraisonAIAgents({\n        agents: [agent],\n        tasks: [\"Explain the process of photosynthesis in detail.\"],\n        verbose: true\n    });\n\n    try {\n        console.log('Starting single agent example...');\n        const results = await praisonAI.start();\n        console.log('\\nFinal Results:', results);\n    } catch (error) {\n        console.error('Error:', error);\n    }\n}\n\nmain();\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Video Analysis Agent\nDESCRIPTION: Complete implementation of a video analysis agent including agent creation, task definition, and execution setup. Uses GPT-4 Mini for processing.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/agents/video.mdx#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent, Task, PraisonAIAgents\n\n# Create Video Analysis Agent\nvideo_agent = Agent(\n    name=\"VideoAnalyst\",\n    role=\"Video Analysis Specialist\",\n    goal=\"Analyze videos to extract meaningful information\",\n    backstory=\"\"\"You are an expert in computer vision and video analysis.\n    You excel at describing content, detecting objects, and understanding context.\"\"\",\n    llm=\"gpt-4o-mini\",\n    self_reflect=False\n)\n\n# Create video analysis task\nanalysis_task = Task(\n    name=\"analyze_video\",\n    description=\"\"\"Analyze this video and provide:\n        1. Summary of main events\n        2. Key objects and people\n        3. Text and important information\n        4. Context and setting\"\"\",\n    expected_output=\"Comprehensive video analysis\",\n    agent=video_agent,\n    images=[\"video.mp4\"]\n)\n\n# Create PraisonAIAgents instance\nagents = PraisonAIAgents(\n    agents=[video_agent],\n    tasks=[analysis_task],\n    process=\"sequential\",\n    verbose=1\n)\n\n# Run analysis\nagents.start()\n```\n\n----------------------------------------\n\nTITLE: Implementing Synchronous Agent Start Method in Python\nDESCRIPTION: Method to start agents synchronously, creating tasks based on instructions and returning task status and results dictionary.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/api/praisonaiagents/agents/autoagents.mdx#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef start(self):\n    \"\"\"\n    Creates tasks based on the instructions, then starts execution.\n    Returns the task status and results dictionary.\n    \"\"\"\n    return super().start()\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple Agents with Memory in Python\nDESCRIPTION: A Python snippet illustrating the setup of multiple agents with memory capabilities using the PraisonAI framework. The example features a research agent and a blog writer agent, showcasing task definition and memory configuration.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/concepts/memory.mdx#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents.agents.agents import Agent, Task, PraisonAIAgents\nfrom praisonaiagents.tools import duckduckgo\n\n# Create research agent with memory\nresearch_agent = Agent(\n    role=\"Research Analyst\",\n    goal=\"Research and document key information about topics\",\n    backstory=\"Expert at analyzing and storing information in memory\",\n    llm=\"gpt-4o-mini\",\n    tools=[duckduckgo]\n)\n\n# Create blog writer agent\nblog_agent = Agent(\n    role=\"Blog Writer\",\n    goal=\"Write a blog post about the research\",\n    backstory=\"Expert at writing blog posts\",\n    llm=\"gpt-4o-mini\"\n)\n\n# Create research task\nresearch_task = Task(\n    description=\"Research and document key information about AI trends\",\n    expected_output=\"Detailed research findings about AI trends\",\n    agent=research_agent\n)\n\n# Create blog writing task\nblog_task = Task(\n    description=\"Write a blog post about the research findings\",\n    expected_output=\"Well-written blog post based on research\",\n    agent=blog_agent\n)\n\n# Create and start the agents with advanced memory configuration\nagents = PraisonAIAgents(\n    agents=[research_agent, blog_agent],\n    tasks=[research_task, blog_task],\n    memory=True\n)   \n\n# Start execution\nresult = agents.start()\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Implementing Data Analysis Agent\nDESCRIPTION: Python script showing the initialization and configuration of a Data Analyst Agent with various data analysis tools and capabilities.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/agents/data-analyst.mdx#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent, Tools\nfrom praisonaiagents.tools import (\n    read_csv, read_excel, write_csv, write_excel,\n    filter_data, get_summary, group_by, pivot_table\n)\n\nagent = Agent(\n    instructions=\"You are a Data Analyst Agent\",\n    tools=[\n        read_csv, read_excel, write_csv, write_excel,\n        filter_data, get_summary, group_by, pivot_table\n    ]\n)\n\n# Start analysis with a specific task\nagent.start(f\"\"\"\n    Read the data from the csv file {os.path.join(os.path.dirname(__file__), \"tesla-stock-price.csv\")}\n    Analyse the data and give me the insights\n    read_csv to read the file\n\"\"\")\n```\n\n----------------------------------------\n\nTITLE: Creating Async AI Agent Config in YAML\nDESCRIPTION: This YAML configuration outlines an async AI agent setup using PraisonAI. It details roles and tasks with async execution enabled. Ensure PraisonAI is installed and configured as per the process section.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/async.mdx#2025-04-19_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nframework: praisonai\nprocess: sequential\ntopic: async operations\nroles:\n  assistant:\n    name: AsyncAgent\n    role: Assistant\n    goal: Help with tasks\n    backstory: Expert in async operations\n    tasks:\n      hello_task:\n        description: Say hello and introduce yourself\n        expected_output: Answer to the question\n        async_execution: true\n```\n\n----------------------------------------\n\nTITLE: Task Definition Example\nDESCRIPTION: This code provides an example of defining a specific task for YAML operations.  The `Task` is created with a description and expected output related to parsing and validating deployment configurations.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/yaml_tools.mdx#2025-04-19_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nTask(\n        description=\"Parse and validate deployment configurations\",\n        expected_output=\"Validated configuration set\"\n    )\n```\n\n----------------------------------------\n\nTITLE: Implementing Asynchronous AI Agent Operations in Python\nDESCRIPTION: Demonstrates the asynchronous usage of the Agent class, showing how to create and interact with an AI agent using async/await patterns. The example includes agent initialization with basic parameters and async chat interaction.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/api/praisonaiagents/agent/agent.mdx#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nasync def main():\n    agent = Agent(\n        name=\"AsyncAgent\",\n        role=\"Async Specialist\",\n        goal=\"Handle async operations\",\n        backstory=\"Expert in async processing\"\n    )\n    \n    # Use async chat\n    result = await agent.achat(\n        prompt=\"Your prompt here\",\n        tools=your_tools,\n        output_json=your_schema\n    )\n    print(result)\n\nasyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Implementing Web Page Scraper Tool with Firecrawl in Python\nDESCRIPTION: A custom tool for extracting and cleaning web page content using Firecrawl, with advanced text processing techniques including URL removal, content filtering, and word limit management\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/firecrawl.mdx#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom firecrawl import FirecrawlApp\nfrom praisonai_tools import BaseTool\nimport re\n\nclass WebPageScraperTool(BaseTool):\n    name: str = \"Web Page Scraper Tool\"\n    description: str = \"Scrape and extract information from a given web page URL.\"\n\n    def _run(self, url: str) -> str:\n        app = FirecrawlApp(api_url='http://localhost:3002')\n        response = app.scrape_url(url=url)\n        content = response[\"content\"]\n        # Remove all content above the line \"========================================================\"\n        if \"========================================================\" in content:\n            content = content.split(\"========================================================\", 1)[1]\n\n        # Remove all menu items and similar patterns\n        content = re.sub(r'\\*\\s+\\[.*?\\]\\(.*?\\)', '', content)\n        content = re.sub(r'\\[Skip to the content\\]\\(.*?\\)', '', content)\n        content = re.sub(r'\\[.*?\\]\\(.*?\\)', '', content)\n        content = re.sub(r'\\s*Menu\\s*', '', content)\n        content = re.sub(r'\\s*Search\\s*', '', content)\n        content = re.sub(r'Categories\\s*', '', content)\n\n        # Remove all URLs\n        content = re.sub(r'http\\S+', '', content)\n        \n        # Remove empty lines or lines with only whitespace\n        content = '\\n'.join([line for line in content.split('\\n') if line.strip()])\n\n        # Limit to the first 1000 words\n        words = content.split()\n        if len(words) > 1000:\n            content = ' '.join(words[:1000])\n        \n        return content\n```\n\n----------------------------------------\n\nTITLE: Main Asynchronous Execution\nDESCRIPTION: This function serves as the main entry point for the asynchronous examples. It runs the single and parallel task functions within a try-except block to handle potential errors.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/async.mdx#2025-04-19_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nasync def main():\n    \"\"\"Main execution function\"\"\"\n    print(\"Starting Async AI Agents Examples...\")\n    \n    try:\n        # Run different async patterns\n        await run_single_task()\n        await run_parallel_tasks()\n    except Exception as e:\n        print(f\"Error in main execution: {e}\")\n```\n\n----------------------------------------\n\nTITLE: Creating AutoAgents Instance for Task Management in Python\nDESCRIPTION: This Python code demonstrates how to instantiate the AutoAgents class, where the agent's instructions, tools used, processing type, verbose logging, and maximum agents to create are specified. It references the PraisonAI library for agent management.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/autoagents.mdx#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import AutoAgents\nfrom praisonaiagents.tools import duckduckgo\n\n# Create AutoAgents instance\nagents = AutoAgents(\n    instructions=\"Search for information about AI Agents\",\n    tools=[duckduckgo],\n    process=\"sequential\",\n    verbose=True,\n    max_agents=3  # Maximum number of agents to create\n)\n\n# Start the agents\nresult = agents.start()\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Simplified Recommendation Agent Example in Python\nDESCRIPTION: A simplified example showing how to create and use a recommendation agent with the DuckDuckGo tool for generating personalized movie recommendations.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/agents/recommendation.mdx#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# Example: Get personalized recommendations\nfrom praisonaiagents import Agent, Tools\nfrom praisonaiagents.tools import duckduckgo\n\nagent = Agent(instructions=\"You are a Recommendation Agent\", tools=[duckduckgo])\nagent.start(\"Recommend me a good movie to watch in 2025\")\n```\n\n----------------------------------------\n\nTITLE: Multiple Agents Hierarchical Process in PraisonAI (Python)\nDESCRIPTION: This Python code illustrates a hierarchical process in PraisonAI involving multiple agents. It creates a researcher agent and a writer agent, defines tasks for each, and configures `PraisonAIAgents` to run the tasks in a hierarchical manner, specifying a `manager_llm` for coordination.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/concepts/process.mdx#2025-04-19_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent, Task, PraisonAIAgents\n\n# Create multiple agents \nresearcher = Agent(\n    name=\"Researcher\",\n    role=\"Senior Research Analyst\",\n    goal=\"Uncover cutting-edge developments in AI\",\n    backstory=\"You are an expert at a technology research group\",\n    verbose=True,\n    llm=\"gpt-4o\",\n    markdown=True\n)\n\nwriter = Agent(\n    name=\"Writer\",\n    role=\"Tech Content Strategist\",\n    goal=\"Craft compelling content on tech advancements\",\n    backstory=\"You are a content strategist\",\n    llm=\"gpt-4o\",\n    markdown=True\n)\n\n# Define multiple tasks\ntask1 = Task(\n    name=\"research_task\",\n    description=\"Analyze 2024's AI advancements\",\n    expected_output=\"A detailed report\",\n    agent=researcher\n)\n\ntask2 = Task(\n    name=\"writing_task\",\n    description=\"Create a blog post about AI advancements\",\n    expected_output=\"A blog post\",\n    agent=writer\n)\n\n# Run with hierarchical process\nagents = PraisonAIAgents(\n    agents=[researcher, writer],\n    tasks=[task1, task2],\n    verbose=False,\n    process=\"hierarchical\",\n    manager_llm=\"gpt-4o\"\n)\n\nresult = agents.start()\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Agents with Assigned Tools in Python\nDESCRIPTION: This Python code creates two agents: one for searching online and another for writing a blog based on the search results. It demonstrates the assignment of tools and starts the agents using `PraisonAIAgents`.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/course/agents/12-adding-tools-to-agents.mdx#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent, PraisonAIAgents\nfrom duckduckgo_search import DDGS\n\n# 1. Define the tool\ndef internet_search_tool(query: str):\n    results = []\n    ddgs = DDGS()\n    for result in ddgs.text(keywords=query, max_results=5):\n        results.append({\n            \"title\": result.get(\"title\", \"\"),\n            \"url\": result.get(\"href\", \"\"),\n            \"snippet\": result.get(\"body\", \"\")\n        })\n    return results\n\n# 2. Assign the tool to an agent\nsearch_agent = Agent(\n    instructions=\"Search about AI job trends in 2025\",\n    tools=[internet_search_tool] # <--- Tool Assignment\n)\n\nblog_agent = Agent(\n    instructions=\"Write a blog article based on the previous agent's search results.\"\n)\n\n# 3. Start Agents\nagents = PraisonAIAgents(agents=[search_agent, blog_agent])\nagents.start()\n```\n\n----------------------------------------\n\nTITLE: Creating a Redis-Enabled AI Agent\nDESCRIPTION: Python code example demonstrating how to create an AI agent that can interact with Redis using the Model Context Protocol (MCP). This includes setting up Redis connection and configuring the agent with appropriate instructions and tools.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/mcp/redis.mdx#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent, MCP\nimport os\n\n# Redis connection string\nredis_url = \"redis://localhost:6379\"\n\n# Use a single string command with Redis configuration\nredis_agent = Agent(\n    instructions=\"\"\"You are a helpful assistant that can interact with Redis.\n    Use the available tools when relevant to manage Redis operations.\"\"\",\n    llm=\"gpt-4o-mini\",\n    tools=MCP(\"npx -y @modelcontextprotocol/server-redis\", args=[redis_url])\n)\n\nredis_agent.start(\"Set a key-value pair in Redis\")\n```\n\n----------------------------------------\n\nTITLE: Selecting Tools for AutoAgents in Python\nDESCRIPTION: This Python code snippet exemplifies how to provide relevant tools for the agents, ensuring that each selected tool serves a specific purpose related to the task instructions, thus increasing the effectiveness of agent operations.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/autoagents.mdx#2025-04-19_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n# Provide relevant tools for the task\nagents = AutoAgents(\n    instructions=\"Research task\",\n    tools=[\n        SerperDevTool,  # For web search\n        WikipediaTools,  # For background info\n        CustomTool  # Your custom tool\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Advanced Math Agent in Python\nDESCRIPTION: Demonstrates the creation of an advanced Math Expert agent in Python with detailed logging. Specifies the use of tools for mathematical analysis and selects a language model.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/mathagent.mdx#2025-04-19_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# Create an agent with advanced math configuration\nagent = Agent(\n    role=\"Math Expert\",\n    goal=\"Perform complex mathematical analysis\",\n    backstory=\"Expert in mathematical computations\",\n    tools=[\n        evaluate,\n        solve_equation,\n        convert_units,\n        calculate_statistics,\n        calculate_financial\n    ],\n    verbose=True,  # Enable detailed logging\n    llm=\"gpt-4o\"  # Language model to use\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Orchestrator and Worker Agents with PraisonAI Agents\nDESCRIPTION: This Python code demonstrates how to create and configure an orchestrator-worker pattern using the PraisonAI Agents package.  It defines a router agent, multiple worker agents, and a synthesizer agent, then connects them via tasks within a PraisonAIAgents workflow.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/orchestrator-worker.mdx#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n```python\nfrom praisonaiagents import Agent, Task, PraisonAIAgents\nimport time\n\n        def get_time_check():\n            current_time = int(time.time())\n            if current_time % 3 == 0:\n                result = 1\n            elif current_time % 3 == 1:\n                result = 2\n            else:\n                result = 3\n            print(f\"Time: {current_time}, Result: {result}\")\n            return result\n\n        # Create orchestrator and worker agents\n        router = Agent(\n            name=\"Router\",\n            role=\"Task router\",\n            goal=\"Distribute tasks to based on response from get_time_check\",\n            tools=[get_time_check]\n        )\n\n        worker1 = Agent(\n            name=\"Worker 1\",\n            role=\"Specialized worker\",\n            goal=\"Handle specific subtask type 1\",\n        )\n\n        worker2 = Agent(\n            name=\"Worker 2\",\n            role=\"Specialized worker\",\n            goal=\"Handle specific subtask type 2\",\n        )\n\n        worker3 = Agent(\n            name=\"Worker 3\",\n            role=\"Specialized worker\",\n            goal=\"Handle specific subtask type 3\",\n        )\n\n        synthesizer = Agent(\n            name=\"Synthesizer\",\n            role=\"Result synthesizer\",\n            goal=\"Combine and synthesize worker outputs\",\n        )\n\n        # Create orchestrated workflow tasks\n        router_task = Task(\n            name=\"route_task\",\n            description=\"Analyze input from get_time_check and route to appropriate workers\",\n            expected_output=\"Task routing decision, 1 , 2 or 3\",\n            agent=router,\n            is_start=True,\n            task_type=\"decision\",\n            next_tasks=[\"worker1_task\", \"worker2_task\", \"worker3_task\"],\n            condition={\n                \"1\": [\"worker1_task\"],\n                \"2\": [\"worker2_task\"],\n                \"3\": [\"worker3_task\"]\n            }\n        )\n\n        worker1_task = Task(\n            name=\"worker1_task\",\n            description=\"Process type 1 operation\",\n            expected_output=\"Worker 1 result\",\n            agent=worker1,\n            next_tasks=[\"synthesize_task\"]\n        )\n\n        worker2_task = Task(\n            name=\"worker2_task\",\n            description=\"Process type 2 operation\",\n            expected_output=\"Worker 2 result\",\n            agent=worker2,\n            next_tasks=[\"synthesize_task\"]\n        )\n\n        worker3_task = Task(\n            name=\"worker3_task\",\n            description=\"Process type 3 operation\",\n            expected_output=\"Worker 3 result\",\n            agent=worker3,\n            next_tasks=[\"synthesize_task\"]\n        )\n\n        synthesize_task = Task(\n            name=\"synthesize_task\",\n            description=\"Synthesize worker results into final output\",\n            expected_output=\"Final synthesized result\",\n            agent=synthesizer,\n            context=[worker1_task, worker2_task, worker3_task]\n        )\n\n        # Create workflow manager\n        workflow = PraisonAIAgents(\n            agents=[router, worker1, worker2, worker3, synthesizer],\n            tasks=[router_task, worker1_task, worker2_task, worker3_task, synthesize_task],\n            process=\"workflow\",\n            verbose=True\n        )\n\n        # Run orchestrated workflow\n        results = workflow.start()\n\n        # Print results\n        print(\"\\nOrchestrator-Workers Results:\")\n        for task_id, result in results[\"task_results\"].items():\n            if result:\n                print(f\"Task {task_id}: {result.raw}\")\n```\n```\n\n----------------------------------------\n\nTITLE: Advanced JSON Operations with Multiple Agents in Python\nDESCRIPTION: This example demonstrates using multiple agents for advanced JSON operations such as validation and transformation. It creates separate agents for validation and transformation, each with specific tools. The code defines tasks for each agent and then runs them sequentially using the PraisonAIAgents framework.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/json_tools.mdx#2025-04-19_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n# Create JSON validation agent\nvalidation_agent = Agent(\n    name=\"Validator\",\n    role=\"JSON Validation Specialist\",\n    goal=\"Ensure JSON data integrity and schema compliance.\",\n    tools=[validate_json, analyze_json],\n    self_reflect=False\n)\n\n# Create JSON transformation agent\ntransform_agent = Agent(\n    name=\"Transformer\",\n    role=\"JSON Transformation Specialist\",\n    goal=\"Transform and merge JSON data structures.\",\n    tools=[transform_json, merge_json],\n    self_reflect=False\n)\n\n# Define tasks\nvalidation_task = Task(\n    description=\"Validate JSON data\",\n    agent=validation_agent,\n    name=\"json_validation\"\n)   \n\ntransform_task = Task(\n    description=\"Transform JSON data\",\n    agent=transform_agent,\n    name=\"json_transformation\"\n)   \n\n# Run agents\nagents = PraisonAIAgents(\n    agents=[validation_agent, transform_agent],\n    tasks=[validation_task, transform_task],\n    process=\"sequential\"\n)\nagents.start()\n```\n\n----------------------------------------\n\nTITLE: Sequential Process Usage in PraisonAI\nDESCRIPTION: This Python code snippet demonstrates how to configure and run a sequential process in PraisonAI. It initializes `PraisonAIAgents` with a list of agents and tasks, specifying the process type as \"sequential\". The code defines the agents and tasks to be executed in a linear order.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/concepts/process.mdx#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nagents = PraisonAIAgents(\n    agents=[agent1, agent2],\n    tasks=[task1, task2, task3],\n    process=\"sequential\"\n)\n```\n\n----------------------------------------\n\nTITLE: Enhancing Data Analysis Agent with Processing Tools in Python\nDESCRIPTION: This snippet enhances the data analysis agent by adding a tool for calculating statistics from numerical data, demonstrating how to incorporate functionality into the agent.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/course/agents/17-data-analysis-agents.mdx#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent, Tool\n\n# Define a simple calculation tool\ndef calculate_statistics(data_string):\n    \"\"\"\n    Calculate basic statistics from a string of numbers.\n    \n    Args:\n        data_string (str): A string with numbers separated by commas\n        \n    Returns:\n        str: Statistical summary\n    \"\"\"\n    try:\n        # Convert string to list of numbers\n        data = [float(x.strip()) for x in data_string.split(',')]\n        \n        # Calculate statistics\n        total = sum(data)\n        average = total / len(data)\n        minimum = min(data)\n        maximum = max(data)\n        \n        return f\"\"\"\n        Statistical summary:\n        - Count: {len(data)}\n        - Sum: {total}\n        - Average: {average:.2f}\n        - Minimum: {minimum}\n        - Maximum: {maximum}\n        - Range: {maximum - minimum}\n        \"\"\"\n    except Exception as e:\n        return f\"Error processing data: {str(e)}\"\n\n# Create the tool\nstats_tool = Tool(\n    name=\"calculate_statistics\",\n    function=calculate_statistics,\n    description=\"Calculate basic statistics from a list of numbers (comma-separated)\"\n)\n\n# Create an agent with the statistics tool\nenhanced_data_agent = Agent(\n    name=\"EnhancedDataAnalyst\",\n    instructions=\"\"\"\n    You are a data analysis specialist who interprets and explains data.\n    \n    When analyzing data:\n    1. First understand what the data represents\n    2. Use the calculate_statistics tool for numerical data\n    3. Identify key patterns, trends, or anomalies\n    4. Generate meaningful insights\n    5. Explain findings in simple, clear language\n    6. Provide actionable recommendations when appropriate\n    \"\"\",\n    tools=[stats_tool]\n)\n\n# Use the enhanced data agent\nnumerical_data = \"12500, 13200, 15800, 14300, 16700, 18900\"\nenhanced_analysis = enhanced_data_agent.start(\n    f\"\"\"\n    Analyze the following monthly sales data for the first half of 2024:\n    \n    {numerical_data}\n    \n    Provide a complete analysis with trends and recommendations.\n    \"\"\"\n)\nprint(enhanced_analysis)\n```\n\n----------------------------------------\n\nTITLE: Research Pipeline Implementation\nDESCRIPTION: This code creates a research pipeline using two agents: a researcher and an analyzer.  Each agent is assigned specific tools, and tasks are defined to utilize these agents. This structure enables a modular and efficient workflow for complex research scenarios.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/wikipedia_tools.mdx#2025-04-19_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n# Research agent\nresearcher = Agent(\n    name=\"Researcher\",\n    role=\"Wiki Researcher\",\n    tools=[wiki_search, wiki_summary, wiki_page]\n)\n\n# Analysis agent\nanalyzer = Agent(\n    name=\"Analyzer\",\n    role=\"Content Analyzer\",\n    tools=[wiki_summary, wiki_page]\n)\n\n# Define tasks\nresearch_task = Task(\n    description=\"Research topic\",\n    agent=researcher\n)\n\nanalyze_task = Task(\n    description=\"Analyze findings\",\n    agent=analyzer\n)\n\n# Run workflow\nagents = PraisonAIAgents(\n    agents=[researcher, analyzer],\n    tasks=[research_task, analyze_task]\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a GitHub-Enabled AI Agent with PraisonAI and MCP\nDESCRIPTION: This Python script creates an AI agent that can interact with GitHub using the MCP. It sets up the agent with specific instructions, uses the GPT-4 model, and configures the GitHub MCP tool with the necessary environment variables.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/mcp/github.mdx#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent, MCP\nimport os\n\n# Use the API key from environment or set it directly\ngithub_token = os.getenv(\"GITHUB_PERSONAL_ACCESS_TOKEN\")\n\n# Use a single string command with environment variables\ngithub_agent = Agent(\n    instructions=\"\"\"You are a helpful assistant that can interact with GitHub.\n    Use the available tools when relevant to answer user questions.\"\"\",\n    llm=\"gpt-4o-mini\",\n    tools=MCP(\"npx -y @modelcontextprotocol/server-github\", \n            env={\"GITHUB_PERSONAL_ACCESS_TOKEN\": github_token})\n)\n\ngithub_agent.start(\"List my GitHub repositories\")\n```\n\n----------------------------------------\n\nTITLE: Hierarchical Process Example for AutoAgents in Python\nDESCRIPTION: This code instantiates an AutoAgents instance configured to handle tasks hierarchically. It includes the specification of a manager agent type for coordinating sub-agents, illustrating more complex task management.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/autoagents.mdx#2025-04-19_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n# Manager agent coordinates other agents\nagents = AutoAgents(\n    instructions=\"Your task\",\n    process=\"hierarchical\",\n    manager_llm=\"gpt-4o\"  # Specify LLM for manager\n)\n```\n\n----------------------------------------\n\nTITLE: Advanced File Operations Implementation\nDESCRIPTION: Complete example showing multiple agents handling different file operation responsibilities.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/file_tools.mdx#2025-04-19_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# Create file IO agent\nio_agent = Agent(\n    name=\"FileIO\",\n    role=\"File IO Specialist\",\n    goal=\"Handle file read/write operations efficiently.\",\n    tools=[read_file, write_file],\n    self_reflect=False\n)\n\n# Create file management agent\nmanagement_agent = Agent(\n    name=\"FileManager\",\n    role=\"File Management Specialist\",\n    goal=\"Handle file organization and movement.\",\n    tools=[list_files, get_file_info, copy_file, move_file, delete_file],\n    self_reflect=False\n)\n\n# Define tasks\nio_task = Task(\n    description=\"Read and write files.\",\n    expected_output=\"File operations completed successfully.\",\n    agent=io_agent,\n    name=\"file_io\"\n)\n\nmanagement_task = Task(\n    description=\"Organize and move files.\",\n    expected_output=\"File management completed successfully.\",\n    agent=management_agent,\n    name=\"file_management\"\n)\n\n# Run agents\nagents = PraisonAIAgents(\n    agents=[io_agent, management_agent],\n    tasks=[io_task, management_task],\n    process=\"sequential\"\n)\nagents.start()\n```\n\n----------------------------------------\n\nTITLE: Creating Airbnb Search Agent with Gemini Integration\nDESCRIPTION: Implements a PraisonAI agent that uses Google's Gemini 2.5 Pro model to process natural language queries and interact with Airbnb through the Model Context Protocol (MCP). The code retrieves the API key from environment variables and configures a search agent with specific instructions.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/mcp/gemini.mdx#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent, MCP\nimport os\n\n# Get API key from environment variable\ngoogle_api_key = os.environ.get(\"GOOGLE_API_KEY\")\n\nsearch_agent = Agent(\n    instructions=\"\"\"You help book apartments on Airbnb.\"\"\",\n    llm=\"gemini/gemini-2.5-pro-exp-03-25\",\n    tools=MCP(\n        command=\"npx\",\n        args=[\"-y\", \"@openbnb/mcp-server-airbnb\", \"--ignore-robots-txt\"],\n        env={\"GOOGLE_API_KEY\": google_api_key}\n    )\n)\n\nsearch_agent.start(\"MUST USE airbnb_search Tool to Search. Search for Apartments in Paris for 2 nights. 04/28 - 04/30 for 2 adults. All Your Preference\")\n```\n\n----------------------------------------\n\nTITLE: Main Execution Script for Email Workflow Agents\nDESCRIPTION: Initializes PraisonAI with configured YAML, sets up API keys, and runs the email workflow management process\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/cookbooks/yaml/email_workflow_management_agents.ipynb#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom praisonai import PraisonAI\nfrom google.colab import userdata\n\npraisonai = PraisonAI(agent_yaml=agent_yaml, tools=[GmailSearchTool, GmailGetThreadTool,\n                                                    TavilySearchResultsTool, CreateDraftTool, EmailContextAnalyzerTool])\n\nos.environ[\"OPENAI_API_KEY\"] = userdata.get('OPENAI_API_KEY') or \"ENTER OPENAI_API_KEY HERE\"\nos.environ[\"TAVILY_API_KEY\"] = userdata.get('TAVILY_API_KEY') or \"ENTER TAVILY_API_KEY HERE\"\nos.environ[\"OPENAI_MODEL_NAME\"] = \"gpt-4o-mini\"\n\nresult = praisonai.run()\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Creating Agents Configuration - YAML\nDESCRIPTION: This YAML snippet defines the configuration for the PraisonAI agents, specifying roles, tasks, and expected outputs using structured data.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/structured.mdx#2025-04-19_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nframework: praisonai\nprocess: sequential\ntopic: analyze AI developments with structured output\nroles:\n  analyst:\n    backstory: Expert in data analysis and insights generation.\n    goal: Analyze data and provide structured insights\n    role: Data Analyst\n    tools:\n      - internet_search\n    tasks:\n      analysis_task:\n        description: Analyze recent AI developments.\n        expected_output: Structured analysis report.\n        output_structure:\n          type: pydantic\n          model:\n            title: str\n            findings: str\n            summary: str\n```\n\n----------------------------------------\n\nTITLE: Creating Multi-Agent Reasoning System in Python\nDESCRIPTION: This Python snippet illustrates the setup of a multi-agent system using the PraisonAI framework. It includes creating two different agents with their own roles, goals, and tasks, demonstrating the capability of the framework to handle complex scenarios through inter-agent collaboration.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/reasoning.mdx#2025-04-19_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nfrom praisonaiagents import Agent, Task, PraisonAIAgents, Tools\n\n# Create first agent for analysis\nanalyst = Agent(\n    role=\"Business Analyst\",\n    goal=\"Analyze business problems and identify key issues\",\n    backstory=\"Expert in business analysis and problem identification\",\n    tools=[Tools.internet_search],\n    verbose=True\n)\n\n# Create second agent for solution development\nsolver = Agent(\n    role=\"Solution Architect\",\n    goal=\"Develop comprehensive solutions to business problems\",\n    backstory=\"Expert in solution design and implementation\",\n    verbose=True\n)\n\n# Create first task\nanalysis_task = Task(\n    description=\"Analyze the current market challenges\",\n    expected_output=\"Detailed analysis of key issues\",\n    agent=analyst\n)\n\n# Create second task\nsolution_task = Task(\n    description=\"Develop solutions for identified challenges\",\n    expected_output=\"Comprehensive solution strategy\",\n    agent=solver\n)\n\n# Create and start the agents\nagents = PraisonAIAgents(\n    agents=[analyst, solver],\n    tasks=[analysis_task, solution_task],\n    process=\"sequential\"\n)\n\n# Start execution\nresult = agents.start()\n```\n\n----------------------------------------\n\nTITLE: Implementing Hackathon Project Evaluation in Python with PraisonAI\nDESCRIPTION: This Python code initializes an AI agent using PraisonAI to evaluate hackathon projects by analyzing video demonstrations. Key steps include setting up the environment, defining the evaluation criteria, and executing the agent for comprehensive feedback.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/examples/hackathon-judge.mdx#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent, Task, PraisonAIAgents\nfrom pydantic import BaseModel\nfrom typing import List, Dict\nimport os\nimport json\n\nclass ProjectEvaluation(BaseModel):\n    innovation_score: int  # 0-100\n    technical_complexity: int # 0-100  \n    presentation_quality: int # 0-100\n    user_experience: int # 0-100\n    completeness: int # 0-100\n    overall_score: int # 0-100\n    key_strengths: List[str]\n    areas_for_improvement: List[str]\n    notable_features: List[str]\n    technical_highlights: List[str]\n    recommendations: List[str]\n    market_potential: str\n    scalability_assessment: str\n\n# Create Vision Analysis Agent\nhackathon_judge = Agent(\n    name=\"HackathonJudge\",\n    role=\"Technical Project Evaluator\",\n    goal=\"Evaluate hackathon projects through video demonstrations\",\n    backstory=\"\"\"You are an experienced hackathon judge and technical expert.\n    You excel at evaluating innovation, technical implementation, and presentation quality.\n    You provide constructive feedback and identify both strengths and areas for improvement.\"\"\",\n    llm=\"gpt-4o-mini\",  # Using vision-capable model\n    self_reflect=False,\n    knowledge=\"\"\n)\n\ndef evaluate_project(video_path: str) -> ProjectEvaluation:\n    \"\"\"\n    Evaluate a hackathon project based on its video demonstration\n    \"\"\"\n    evaluation_task = Task(\n        name=\"project_evaluation\",\n        description=\"\"\"Analyze this hackathon project video demonstration and provide a comprehensive evaluation:\n        \n        1. Score the following aspects (0-100):\n           - Innovation and Creativity\n           - Technical Complexity\n           - Presentation Quality\n           - User Experience\n           - Project Completeness\n           \n        2. Identify:\n           - Key strengths and standout features\n           - Areas that could be improved\n           - Notable technical implementations\n           - Market potential and scalability\n           \n        3. Provide:\n           - Specific recommendations for improvement\n           - Technical suggestions\n           - Potential future enhancements\"\"\",\n        expected_output=\"Detailed project evaluation with scores and feedback\",\n        agent=hackathon_judge,\n        output_pydantic=ProjectEvaluation,\n        images=[video_path]  # Video input for multimodal analysis\n    )\n\n    # Initialize and run evaluation\n    agents = PraisonAIAgents(\n        agents=[hackathon_judge],\n        tasks=[evaluation_task],\n        process=\"sequential\",\n        verbose=True\n    )\n    \n    response = agents.start()\n    \n    try:\n        # If response contains task_results, extract the Pydantic model directly\n        if isinstance(response, dict) and 'task_results' in response:\n            task_output = response['task_results'][0]\n            if hasattr(task_output, 'pydantic'):\n                return task_output.pydantic\n            elif hasattr(task_output, 'raw'):\n                # Extract JSON from raw string if it's wrapped in ```json\n                raw_text = task_output.raw\n                if raw_text.startswith('```json'):\n                    raw_text = raw_text.split('\\n', 1)[1].rsplit('\\n', 1)[0]\n                evaluation_data = json.loads(raw_text)\n            else:\n                evaluation_data = json.loads(task_output) if isinstance(task_output, str) else task_output\n        # If response is a string, try to parse it as JSON\n        elif isinstance(response, str):\n            evaluation_data = json.loads(response)\n        # If response is a dict with task_status\n        elif isinstance(response, dict) and 'task_status' in response:\n            content = response['task_status']\n            if isinstance(content, dict):\n                evaluation_data = content\n            else:\n                evaluation_data = json.loads(content) if isinstance(content, str) else content\n        else:\n            evaluation_data = response\n            \n        print(f\"Debug - Parsed evaluation_data: {evaluation_data}\")\n        \n        # Create and return ProjectEvaluation instance\n        return ProjectEvaluation(\n            innovation_score=int(evaluation_data.get('innovation_score', 0)),\n            technical_complexity=int(evaluation_data.get('technical_complexity', 0)),\n            presentation_quality=int(evaluation_data.get('presentation_quality', 0)),\n            user_experience=int(evaluation_data.get('user_experience', 0)),\n            completeness=int(evaluation_data.get('completeness', 0)),\n            overall_score=int(evaluation_data.get('overall_score', 0)),\n            key_strengths=evaluation_data.get('key_strengths', []),\n            areas_for_improvement=evaluation_data.get('areas_for_improvement', []),\n            notable_features=evaluation_data.get('notable_features', []),\n            technical_highlights=evaluation_data.get('technical_highlights', []),\n            recommendations=evaluation_data.get('recommendations', []),\n            market_potential=str(evaluation_data.get('market_potential', '')),\n            scalability_assessment=str(evaluation_data.get('scalability_assessment', ''))\n        )\n    except Exception as e:\n        print(f\"Debug - Raw response: {response}\")\n        print(f\"Error processing response: {e}\")\n        raise\n\nif __name__ == \"__main__\":\n    # Example usage\n    current_dir = os.path.dirname(os.path.abspath(__file__))\n    video_path = os.path.join(current_dir, \"presentation.mp4\")\n    result = evaluate_project(video_path)  # Now returns ProjectEvaluation directly\n    \n    print(\"\\nHackathon Project Evaluation\")\n    print(\"===========================\")\n    print(f\"\\nOverall Score: {result.overall_score}/100\")\n    print(\"\\nDetailed Scores:\")\n    print(f\"Innovation: {result.innovation_score}/100\")\n    print(f\"Technical Complexity: {result.technical_complexity}/100\")\n    print(f\"Presentation: {result.presentation_quality}/100\")\n    print(f\"User Experience: {result.user_experience}/100\")\n    print(f\"Completeness: {result.completeness}/100\")\n    \n    print(\"\\nKey Strengths:\")\n    for strength in result.key_strengths:\n        print(f\"- {strength}\")\n        \n    print(\"\\nAreas for Improvement:\")\n    for area in result.areas_for_improvement:\n        print(f\"- {area}\")\n        \n    print(\"\\nTechnical Highlights:\")\n    for highlight in result.technical_highlights:\n        print(f\"- {highlight}\")\n        \n    print(\"\\nRecommendations:\")\n    for rec in result.recommendations:\n        print(f\"- {rec}\")\n        \n    print(f\"\\nMarket Potential: {result.market_potential}\")\n    print(f\"\\nScalability Assessment: {result.scalability_assessment}\")\n```\n\n----------------------------------------\n\nTITLE: Multilingual Content Generation Setup\nDESCRIPTION: This Python code defines a multilingual content generation workflow using the PraisonAI Agents package. It includes agent definitions for content generation, translation, cultural context verification, content adaptation, and quality assessment. It also defines tasks that are then assembled into a complete workflow using the `PraisonAIAgents` class, demonstrating a complete workflow.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/examples/multilingual-content.mdx#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n\"from praisonaiagents import Agent, Task, PraisonAIAgents\nimport time\nfrom typing import Dict, List\n\ndef generate_base_content():\n    \\\"\\\"\\\"Simulates base content generation\\\"\\\"\\\"\n    content_types = [\n        {\\\"type\\\": \\\"marketing\\\", \\\"tone\\\": \\\"professional\\\", \\\"length\\\": \\\"medium\\\"},\n        {\\\"type\\\": \\\"technical\\\", \\\"tone\\\": \\\"formal\\\", \\\"length\\\": \\\"long\\\"},\n        {\\\"type\\\": \\\"social\\\", \\\"tone\\\": \\\"casual\\\", \\\"length\\\": \\\"short\\\"}\n    ]\n    return content_types[int(time.time()) % 3]\n\ndef translate_content(content: Dict):\n    \\\"\\\"\\\"Simulates content translation\\\"\\\"\\\"\n    languages = [\\\"spanish\\\", \\\"french\\\", \\\"german\\\", \\\"japanese\\\", \\\"chinese\\\"]\n    translations = {lang: f\\\"Translated content in {lang}\\\" for lang in languages}\n    return translations\n\ndef check_cultural_context(translations: Dict):\n    \\\"\\\"\\\"Simulates cultural context verification\\\"\\\"\\\"\n    cultural_issues = {\n        \\\"spanish\\\": [],\n        \\\"french\\\": [\\\"idiom_mismatch\\\"],\n        \\\"german\\\": [],\n        \\\"japanese\\\": [\\\"formality_level\\\"],\n        \\\"chinese\\\": [\\\"cultural_reference\\\"]\n    }\n    return cultural_issues\n\ndef adapt_content(issues: Dict):\n    \\\"\\\"\\\"Simulates content adaptation\\\"\\\"\\\"\n    adaptations = {\n        \\\"idiom_mismatch\\\": \\\"localized_expression\\\",\n        \\\"formality_level\\\": \\\"adjusted_tone\\\",\n        \\\"cultural_reference\\\": \\\"localized_reference\\\"\n    }\n    return {lang: [adaptations[issue] for issue in issues] \n            for lang, issues in issues.items() if issues}\n\ndef quality_check():\n    \\\"\\\"\\\"Simulates quality assessment\\\"\\\"\\\"\n    quality_levels = [\\\"high\\\", \\\"medium\\\", \\\"needs_revision\\\"]\n    return quality_levels[int(time.time()) % 3]\n\n# Create specialized agents\ncontent_generator = Agent(\n    name=\\\"Content Generator\\\",\n    role=\\\"Base Content Creation\\\",\n    goal=\\\"Generate high-quality base content\\\",\n    instructions=\\\"Create engaging base content\\\",\n    tools=[generate_base_content]\n)\n\ntranslator = Agent(\n    name=\\\"Content Translator\\\",\n    role=\\\"Translation\\\",\n    goal=\\\"Translate content accurately\\\",\n    instructions=\\\"Translate content while maintaining meaning\\\",\n    tools=[translate_content]\n)\n\ncultural_checker = Agent(\n    name=\\\"Cultural Checker\\\",\n    role=\\\"Cultural Verification\\\",\n    goal=\\\"Verify cultural appropriateness\\\",\n    instructions=\\\"Check for cultural sensitivities\\\",\n    tools=[check_cultural_context]\n)\n\ncontent_adapter = Agent(\n    name=\\\"Content Adapter\\\",\n    role=\\\"Content Adaptation\\\",\n    goal=\\\"Adapt content for cultural fit\\\",\n    instructions=\\\"Modify content based on cultural context\\\",\n    tools=[adapt_content]\n)\n\nquality_assessor = Agent(\n    name=\\\"Quality Assessor\\\",\n    role=\\\"Quality Assessment\\\",\n    goal=\\\"Ensure content quality\\\",\n    instructions=\\\"Assess overall content quality\\\",\n    tools=[quality_check]\n)\n\n# Create workflow tasks\ngeneration_task = Task(\n    name=\\\"generate_content\\\",\n    description=\\\"Generate base content\\\",\n    expected_output=\\\"Base content for translation\\\",\n    agent=content_generator,\n    is_start=True,\n    next_tasks=[\\\"translate_content\\\"]\n)\n\ntranslation_task = Task(\n    name=\\\"translate_content\\\",\n    description=\\\"Translate content to target languages\\\",\n    expected_output=\\\"Translated content\\\",\n    agent=translator,\n    next_tasks=[\\\"check_cultural\\\"]\n)\n\ncultural_task = Task(\n    name=\\\"check_cultural\\\",\n    description=\\\"Check cultural appropriateness\\\",\n    expected_output=\\\"Cultural context issues\\\",\n    agent=cultural_checker,\n    next_tasks=[\\\"adapt_content\\\"]\n)\n\nadaptation_task = Task(\n    name=\\\"adapt_content\\\",\n    description=\\\"Adapt content for cultural fit\\\",\n    expected_output=\\\"Culturally adapted content\\\",\n    agent=content_adapter,\n    next_tasks=[\\\"assess_quality\\\"]\n)\n\nquality_task = Task(\n    name=\\\"assess_quality\\\",\n    description=\\\"Assess content quality\\\",\n    expected_output=\\\"Quality assessment\\\",\n    agent=quality_assessor,\n    task_type=\\\"decision\\\",\n    condition={\n        \\\"high\\\": \\\"\\\",  # Complete workflow\n        \\\"medium\\\": [\\\"adapt_content\\\"],  # Minor revisions needed\n        \\\"needs_revision\\\": [\\\"translate_content\\\"]  # Major revisions needed\n    }\n)\n\n# Create workflow\nworkflow = PraisonAIAgents(\n    agents=[content_generator, translator, cultural_checker, \n            content_adapter, quality_assessor],\n    tasks=[generation_task, translation_task, cultural_task, \n           adaptation_task, quality_task],\n    process=\\\"workflow\\\",\n    verbose=True\n)\n\ndef main():\n    print(\\\"\\nStarting Multilingual Content Generation Workflow...\\\")\n    print(\\\"=\\\" * 50)\n    \n    # Run workflow\n    results = workflow.start()\n    \n    # Print results\n    print(\\\"\\nContent Generation Results:\\\")\n    print(\\\"=\\\" * 50)\n    for task_id, result in results[\\\"task_results\\\"].items():\n        if result:\n            print(f\\\"\\nTask: {task_id}\\\")\n            print(f\\\"Result: {result.raw}\\\")\n            print(\\\"-\\\" * 50)\n\nif __name__ == \\\"__main__\\\":\n    main()\"\n```\n\n----------------------------------------\n\nTITLE: Creating Multi-tool Agents in Python\nDESCRIPTION: This snippet describes how to create multiple agents using different tools for comprehensive research tasks. It shows a setup with one agent using YouTube and another with Wikipedia, both created using the PraisonAIAgents framework, to gather information on AI advancements from different sources.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/langchain_tools.mdx#2025-04-19_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent, Task, PraisonAIAgents\nfrom langchain_community.tools import YouTubeSearchTool\nfrom langchain_community.utilities import WikipediaAPIWrapper\n\n# Create YouTube search agent\nagent = Agent(\n    name=\"SearchAgent\",\n    role=\"Research Assistant\",\n    goal=\"Search for information from YouTube\",\n    backstory=\"I am an AI assistant that can search YouTube for relevant videos.\",\n    tools=[YouTubeSearchTool],\n    self_reflect=False\n)\n\n# Create Wikipedia research agent\nagent2 = Agent(\n    name=\"WikiAgent\",\n    role=\"Research Assistant\",\n    goal=\"Search for information from Wikipedia\",\n    backstory=\"I am an AI assistant that can search Wikipedia for accurate information.\",\n    tools=[WikipediaAPIWrapper],\n    self_reflect=False\n)\n\n# Create YouTube search task\ntask = Task(\n    name=\"search_task\",\n    description=\"Search for information about 'AI advancements' on YouTube\",\n    expected_output=\"Relevant information from YouTube videos\",\n    agent=agent\n)\n\n# Create Wikipedia research task\ntask2 = Task(\n    name=\"wiki_task\",\n    description=\"Search for information about 'AI advancements' on Wikipedia\",\n    expected_output=\"Comprehensive information from Wikipedia articles\",\n    agent=agent2\n)\n\n# Create and start the workflow\nagents = PraisonAIAgents(\n    agents=[agent, agent2],\n    tasks=[task, task2],\n    verbose=True\n)\n\nagents.start()\n```\n\n----------------------------------------\n\nTITLE: Creating AI Agents for Diagnosis Process in Python\nDESCRIPTION: This code creates different AI agents like Symptom Analyzer, Lab Processor, History Analyzer, etc., each designed to handle distinct portions of the diagnosis workflow, leveraging functions for analyses and recommendations.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/examples/healthcare-diagnosis.mdx#2025-04-19_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n# Create specialized agents\nsymptom_analyzer = Agent(\n    name=\"Symptom Analyzer\",\n    role=\"Symptom Analysis\",\n    goal=\"Analyze patient symptoms\",\n    instructions=\"Evaluate reported symptoms and their severity\",\n    tools=[analyze_symptoms]\n)\n\nlab_processor = Agent(\n    name=\"Lab Processor\",\n    role=\"Lab Analysis\",\n    goal=\"Process laboratory results\",\n    instructions=\"Analyze and interpret lab test results\",\n    tools=[process_lab_results]\n)\n\nhistory_analyzer = Agent(\n    name=\"History Analyzer\",\n    role=\"Medical History Analysis\",\n    goal=\"Analyze patient medical history\",\n    instructions=\"Review and assess patient medical history\",\n    tools=[analyze_medical_history]\n)\n\ndiagnosis_generator = Agent(\n    name=\"Diagnosis Generator\",\n    role=\"Diagnosis Generation\",\n    goal=\"Generate comprehensive diagnosis\",\n    instructions=\"Combine all inputs to generate diagnosis\",\n    tools=[generate_diagnosis]\n)\n\ntreatment_recommender = Agent(\n    name=\"Treatment Recommender\",\n    role=\"Treatment Planning\",\n    goal=\"Recommend appropriate treatment\",\n    instructions=\"Suggest treatment based on diagnosis\",\n    tools=[recommend_treatment]\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Wiki Agent with Tools\nDESCRIPTION: This snippet demonstrates how to create a specialized research agent by passing a list of Wikipedia tools to the `Agent` constructor. The tools enable the agent to search, summarize, retrieve pages, find random articles, and support multiple languages.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/wikipedia_tools.mdx#2025-04-19_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nAgent(tools=[wiki_search, wiki_summary, wiki_page, wiki_random, wiki_language])\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic WhatsApp Agent in Python\nDESCRIPTION: Python code to create a basic WhatsApp agent using PraisonAI agents. The agent uses GPT-4o-mini as the LLM and connects to the WhatsApp MCP server to send messages.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/mcp/whatsapp.mdx#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent, MCP\n\nwhatsapp_agent = Agent(\n    instructions=\"Whatsapp Agent\",\n    llm=\"gpt-4o-mini\",\n    tools=MCP(\"python /path/to/whatsapp-mcp/whatsapp-mcp-server/main.py\")\n)\n\nwhatsapp_agent.start(\"Send Hello to Mervin Praison\")\n```\n\n----------------------------------------\n\nTITLE: Mermaid Diagram\nDESCRIPTION: A flowchart depicting the parallel execution of tasks by multiple LLM calls, with an aggregator combining the results. This diagram illustrates the core concept of agentic parallelization where tasks are distributed and then consolidated.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/parallelisation.mdx#2025-04-19_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n    In[In] --> LLM2[LLM Call 2]\n    In --> LLM1[LLM Call 1]\n    In --> LLM3[LLM Call 3]\n    LLM1 --> Aggregator[Aggregator]\n    LLM2 --> Aggregator\n    LLM3 --> Aggregator\n    Aggregator --> Out[Out]\n    \n    style In fill:#8B0000,color:#fff\n    style LLM1 fill:#2E8B57,color:#fff\n    style LLM2 fill:#2E8B57,color:#fff\n    style LLM3 fill:#2E8B57,color:#fff\n    style Aggregator fill:#fff,color:#000\n    style Out fill:#8B0000,color:#fff\n```\n\n----------------------------------------\n\nTITLE: Create the Streamlit App\nDESCRIPTION: This Python code defines a Streamlit application for analyzing code repositories using AI agents. It defines Pydantic models for code metrics and analysis reports, functions for analyzing code and displaying metrics, and a main function that creates the user interface and handles user input.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/ui/streamlit/code-analysis-streamlit.mdx#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n\"import streamlit as st\nfrom praisonaiagents import Agent, Task, PraisonAIAgents\nfrom pydantic import BaseModel\nfrom typing import List, Dict, Any\nfrom gitingest import ingest\n\n# Import the same classes and code from code-analysis-agents.py\nclass CodeMetrics(BaseModel):\n    category: str\n    score: int\n    findings: List[str]\n\nclass CodeAnalysisReport(BaseModel):\n    overall_quality: int\n    code_metrics: List[CodeMetrics]\n    architecture_score: int\n    maintainability_score: int\n    performance_score: int\n    security_score: int\n    test_coverage: int\n    key_strengths: List[str]\n    improvement_areas: List[str]\n    tech_stack: List[str]\n    recommendations: List[str]\n    complexity_metrics: Dict[str, int]\n    best_practices: List[Dict[str, str]]\n    potential_risks: List[str]\n    documentation_quality: int\n\ndef analyze_code(code_source: str) -> CodeAnalysisReport:\n    \"\"\"\n    Analyze code from directory path or GitHub URL\n    \"\"\"\n    # Create code analyzer agent\n    code_analyzer = Agent(\n        role=\"Code Analysis Expert\",\n        goal=\"Provide comprehensive code evaluation and recommendations\",\n        backstory=\\\"\"Expert code analyst specializing in architecture review, \n        best practices, and technical debt assessment.\\\"\"\",\n        verbose=True\n    )\n\n    # Create analysis task\n    code_analysis_task = Task(\n        description=\\\"\"Analyze code repository and provide structured evaluation:\n        \n        1. Overall Quality (0-100)\n        2. Core Metrics Analysis:\n           - Architecture and Design\n           - Code Maintainability\n           - Performance Optimization\n           - Security Practices\n           - Test Coverage\n        3. Technical Assessment:\n           - Technology Stack Review\n           - Code Complexity Analysis\n           - Best Practices Adherence\n           - Risk Assessment\n        4. Recommendations:\n           - Key Improvements\n           - Architecture Suggestions\n           - Security Enhancements\\\"\"\",\n        expected_output=\"Detailed code analysis report with metrics and recommendations\",\n        agent=code_analyzer,\n        output_pydantic=CodeAnalysisReport\n    )\n\n    # Ingest code content\n    summary, tree, content = ingest(code_source)\n    \n    # Concatenate context into structured format\n    context_text = f\"\"\"\n    CODE REPOSITORY ANALYSIS\n    =======================\n    \n    SUMMARY\n    -------\n    {summary}\n    \n    REPOSITORY STRUCTURE\n    -------------------\n    {tree}\n    \n    SOURCE CODE\n    -----------\n    {content}\n    \"\"\"\n    \n    # Initialize and run analysis\n    agents = PraisonAIAgents(\n        agents=[code_analyzer],\n        tasks=[code_analysis_task]\n    )\n    \n    result = agents.start(context_text)\n    \n    # Extract the Pydantic model from the result\n    if isinstance(result, dict) and 'task_results' in result:\n        # Get the first task result's pydantic output\n        analysis_result = result['task_results'][0].pydantic\n        if isinstance(analysis_result, CodeAnalysisReport):\n            return analysis_result\n    \n    # If we can't get the Pydantic model, create one from the raw data\n    return CodeAnalysisReport(**result)\n\ndef display_code_metrics(metrics, cols):\n    \"\"\"Display code metrics in columns with color-coded scores\"\"\"\n    for i, metric in enumerate(metrics):\n        score = metric.score\n        color = \"red\" if score < 60 else \"orange\" if score < 75 else \"green\"\n        \n        # Use modulo to alternate between columns\n        with cols[i % len(cols)]:\n            st.markdown(f\"### {metric.category}\")\n            st.markdown(f\"**Score:** :{color}[{score}%]\")\n            for finding in metric.findings:\n                st.markdown(f\"• {finding}\")\n\ndef display_section(title: str, items: list, icon: str = \"•\"):\n    \"\"\"Display a section with items in a consistent format\"\"\"\n    st.markdown(f\"### {title}\")\n    for item in items:\n        if isinstance(item, dict):\n            for key, value in item.items():\n                st.markdown(f\"{icon} **{key}**: {value}\")\n        else:\n            st.markdown(f\"{icon} {item}\")\n\ndef main():\n    st.set_page_config(\n        page_title=\"Code Analysis Agent\",\n        layout=\"wide\",\n        initial_sidebar_state=\"expanded\"\n    )\n    \n    st.title(\"Code Analysis Agent\")\n    \n    with st.sidebar:\n        st.header(\"Input\")\n        code_source = st.text_input(\n            \"GitHub URL or Local Path\",\n            placeholder=\"https://github.com/username/repo or /path/to/directory\"\n        )\n        analyze_button = st.button(\"Analyze Code\", type=\"primary\")\n    \n    if analyze_button and code_source:\n        try:\n            with st.spinner(\"Analyzing code...\"):\n                result = analyze_code(code_source)\n                \n                # Overall Metrics\n                st.header(\"Overall Metrics\")\n                cols = st.columns(6)\n                metrics = {\n                    \"Overall Quality\": result.overall_quality,\n                    \"Architecture\": result.architecture_score,\n                    \"Maintainability\": result.maintainability_score,\n                    \"Performance\": result.performance_score,\n                    \"Security\": result.security_score,\n                    \"Test Coverage\": result.test_coverage\n                }\n                \n                for (metric, value), col in zip(metrics.items(), cols):\n                    color = \"red\" if value < 60 else \"orange\" if value < 75 else \"green\"\n                    col.metric(metric, f\"{value}%\" )\n                    col.markdown(f\":{color}[{'●' * (value // 20)}]\")\n                \n                # Detailed Analysis\n                st.header(\"Detailed Analysis\")\n                metric_cols = st.columns(2)\n                display_code_metrics(result.code_metrics, metric_cols)\n                \n                # Technology Stack\n                col1, col2 = st.columns(2)\n                with col1:\n                    st.header(\"Technology Stack\")\n                    for tech in result.tech_stack:\n                        st.markdown(f\"🔧 {tech}\")\n                \n                with col2:\n                    st.header(\"Complexity Metrics\")\n                    for metric, value in result.complexity_metrics.items():\n                        st.metric(metric.replace('_', ' ').title(), value)\n                \n                # Key Findings\n                st.header(\"Key Findings\")\n                cols = st.columns(2)\n                \n                with cols[0]:\n                    display_section(\"✅ Strengths\", result.key_strengths)\n                    display_section(\"🔄 Best Practices\", result.best_practices)\n                \n                with cols[1]:\n                    display_section(\"⚠️ Areas for Improvement\", result.improvement_areas)\n                    display_section(\"❗ Potential Risks\", result.potential_risks)\n                \n                # Recommendations\n                st.header(\"Recommendations\")\n                for i, rec in enumerate(result.recommendations, 1):\n                    st.markdown(f\"**{i}.** {rec}\")\n                \n                # Documentation Quality\n                st.header(\"Documentation\")\n                doc_score = result.documentation_quality\n                color = \"red\" if doc_score < 60 else \"orange\" if doc_score < 75 else \"green\"\n                st.markdown(f\"Documentation Quality: :{color}[{doc_score}%]\")\n                \n        except Exception as e:\n            st.error(f\"Error analyzing code: {str(e)}\")\n            st.exception(e)\n    \n    elif analyze_button:\n        st.warning(\"Please enter a GitHub URL or local path\")\n\nif __name__ == \"__main__\":\n    main()\"\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Agents in Python\nDESCRIPTION: Implementation of multiple AI agents with specific roles for diet planning and blog writing using PraisonAI Agents.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/quickstart.mdx#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent, PraisonAIAgents\n\n# Create agents with specific roles\ndiet_agent = Agent(\n    instructions=\"Give me 5 healthy food recipes\",\n)\n\nblog_agent = Agent(\n    instructions=\"Write a blog post about the food recipes\",\n)\n\n# Run multiple agents\nagents = PraisonAIAgents(agents=[diet_agent, blog_agent])\nagents.start()\n```\n\n----------------------------------------\n\nTITLE: Example Wikipedia Research Implementation\nDESCRIPTION: Simplified example showing how to create and use a Wikipedia Agent for researching a scientific topic with essential tools and self-reflection capabilities.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/agents/wikipedia.mdx#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# Example: Research a scientific topic\nfrom praisonaiagents import Agent\nfrom praisonaiagents.tools import wiki_search, wiki_summary, wiki_page, wiki_random, wiki_language\n\nagent = Agent(\n    instructions=\"You are a Wikipedia Agent\", \n    tools=[wiki_search, wiki_summary, wiki_page, wiki_random, wiki_language],\n    self_reflect=True,\n    min_reflect=3,\n    max_reflect=5,\n)\nagent.start(\n    \"What is the history of AI?\"\n    \"First search the history of AI\"\n    \"Read the page of the history of AI\"\n    \"Get the summary of the page\"\n)\n```\n\n----------------------------------------\n\nTITLE: Task-Based Agents Example in TypeScript\nDESCRIPTION: Example of creating agents with specific tasks involving recipe creation and blog writing, and highlighting the use of PraisonAI for these purposes.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/js/typescript.mdx#2025-04-19_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Agent, PraisonAIAgents } from 'praisonai';\n\n// Create recipe agent\nconst recipeAgent = new Agent({\n  instructions: `You are a professional chef and nutritionist. Create 5 healthy food recipes that are both nutritious and delicious.\nEach recipe should include:\n1. Recipe name\n2. List of ingredients with quantities\n3. Step-by-step cooking instructions\n4. Nutritional information\n5. Health benefits\n\nFormat your response in markdown.`,\n  name: \"RecipeAgent\",\n  verbose: true\n});\n\n// Create blog agent\nconst blogAgent = new Agent({\n  instructions: `You are a food and health blogger. Write an engaging blog post about the provided recipes.\nThe blog post should:\n1. Have an engaging title\n2. Include an introduction about healthy eating\n3. Discuss each recipe and its unique health benefits\n4. Include tips for meal planning and preparation\n5. End with a conclusion encouraging healthy eating habits\n\nHere are the recipes to write about:\n{previous_result}\n\nFormat your response in markdown.`,\n  name: \"BlogAgent\",\n  verbose: true\n});\n\n// Create PraisonAIAgents instance with tasks\nconst agents = new PraisonAIAgents({\n  agents: [recipeAgent, blogAgent],\n  tasks: [\n    \"Create 5 healthy and delicious recipes\",\n    \"Write a blog post about the recipes\"\n  ],\n  verbose: true\n});\n\n// Start the agents\nagents.start()\n  .then(results => {\n    console.log('\\nFinal Results:');\n    console.log('\\nRecipe Task Results:');\n    console.log(results[0]);\n    console.log('\\nBlog Task Results:');\n    console.log(results[1]);\n  })\n  .catch(error => {\n    console.error('Error:', error);\n  });\n```\n\n----------------------------------------\n\nTITLE: YAML Agent Definition\nDESCRIPTION: This code snippet defines a YAML agent using the `Agent` class. The agent is configured with a set of YAML processing tools for reading, writing, validating, merging, and converting YAML data.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/yaml_tools.mdx#2025-04-19_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nAgent(tools=[read_yaml, write_yaml, validate_yaml, merge_yaml, convert_yaml])\n```\n\n----------------------------------------\n\nTITLE: Creating Agent System in PraisonAI with Python\nDESCRIPTION: This snippet demonstrates how to create a multi-agent system in PraisonAI by defining individual agents and initiating a process. It specifies the agents' roles and instructions for task execution.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/course/agents/08-agent-process.mdx#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent, Process, PraisonAIAgents\n\n# Create agents\nresearch_agent = Agent(\n    name=\"Researcher\",\n    instructions=\"Research the topic and gather key information about AI\"\n)\n\nwriting_agent = Agent(\n    name=\"Writer\",\n    instructions=\"Create content based on the research\"\n)\n\nediting_agent = Agent(\n    name=\"Editor\",\n    instructions=\"Review and improve the content\"\n)\n\n# Create the multi-agent system with the process\nagents = PraisonAIAgents(\n    agents=[research_agent, writing_agent, editing_agent],\n    process=\"hierarchical\"\n)\n\n# Start the process\nagents.start()\n```\n\n----------------------------------------\n\nTITLE: Creating a PraisonAI Agent with self-reflection in Python\nDESCRIPTION: This code snippet demonstrates how to create a PraisonAI agent with self-reflection enabled using the `praisonaiagents` library.  It defines an agent with a specific role, goal, and backstory, and then enables self-reflection, creates a task for the agent, and starts the agents.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/selfreflection.mdx#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent, Task, PraisonAIAgents\n\n# Create an agent with self-reflection\nagent = Agent(\n    role=\"Senior Research Analyst\",\n    goal=\"Analyze and provide insights on given topics\",\n    backstory=\"You are an expert analyst with strong critical thinking skills\",\n    self_reflect=True  # Enable self-reflection\n)\n\n# Create a task\ntask = Task(\n    description=\"Analyze recent developments in AI\",\n    expected_output=\"A detailed analysis report\",\n    agent=agent\n)\n\n# Create and start the agents\nagents = PraisonAIAgents(\n    agents=[agent],\n    tasks=[task],\n    process=\"sequential\",\n    verbose=2\n)\n\n# Start execution\nagents.start()\n```\n\n----------------------------------------\n\nTITLE: Creating a Single Agent with Tool Assignment - Python\nDESCRIPTION: This code snippet demonstrates creating an AI agent that utilizes the defined internet search tool. The agent is instructed to perform a specific search and is initiated to start the task.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/tools.mdx#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nsearch_agent = Agent(\n    instructions=\"Perform internet searches to collect relevant information.\",\n    tools=[internet_search_tool] # <--- Tool Assignment\n)\n\n# 3. Start Agent\nsearch_agent.start(\"Search about AI job trends in 2025\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Resource Management for AutoAgents in Python\nDESCRIPTION: This code focuses on configuring resource limits such as maximum requests per minute and maximum execution time to manage agent performance effectively, allowing control over the resource utilization during execution.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/autoagents.mdx#2025-04-19_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n# Configure resource limits\nagents = AutoAgents(\n    instructions=\"Your task\",\n    max_rpm=60,  # Rate limiting\n    max_execution_time=300,  # Timeout\n    max_agents=3  # Agent limit\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Sequential Process with PraisonAI\nDESCRIPTION: This code initializes `PraisonAIAgents` with a \"sequential\" process, enabling asynchronous mode for I/O-heavy tasks that need to be executed in order without blocking. The `astart()` method is then called to start the agents asynchronously.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/concepts/process.mdx#2025-04-19_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nasync def main():\n    agents = PraisonAIAgents(\n        process=\"sequential\",\n        async_mode=True\n    )\n    await agents.astart()\n```\n\n----------------------------------------\n\nTITLE: Implementing AgentQL Web Data Extraction\nDESCRIPTION: Python implementation for structured data extraction using AgentQL and PraisonAI agents. Sets up an agent to extract product information from an e-commerce website including names, descriptions, prices, and additional details.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/external/agentql-toolkit.mdx#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent, PraisonAIAgents\nfrom langchain_agentql.tools import ExtractWebDataTool\nfrom dotenv import load_dotenv\n\nimport os\n\nos.environ[\"AGENTQL_API_KEY\"] = os.getenv('AGENTQL_API_KEY')\n\ndef extract_web_data_tool(url, query):\n    agentql_tool = ExtractWebDataTool().invoke(\n        {\n            \"url\": url,\n            \"prompt\": query,\n        },)\n    return agentql_tool\n\n# Create agent with web extraction instructions\norchestration_agent = Agent(\n    instructions=\"\"\"Extract All 37 products from the url https://www.colorbarcosmetics.com/bestsellers along with its name, overview, description, price and additional information by recursively clicking on each product\"\"\",\n    tools=[extract_web_data_tool]\n)\n\n# Initialize and run agents\nagents = PraisonAIAgents(agents=[orchestration_agent])\nagents.start()\n```\n\n----------------------------------------\n\nTITLE: Implementing Async Methods in PraisonAIAgents Class\nDESCRIPTION: Core async implementation of the PraisonAIAgents class showing the main asynchronous methods for task execution. Includes astart(), aexecute_task(), arun_task(), and arun_all_tasks() methods.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/api/praisonaiagents/agents/agents.mdx#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass PraisonAIAgents:\n    async def astart(self):\n        \"\"\"Async version of start method\"\"\"\n        await self.arun_all_tasks()\n        return {\n            \"task_status\": self.get_all_tasks_status(),\n            \"task_results\": self.get_task_results()\n        }\n        \n    async def aexecute_task(self, task_id):\n        \"\"\"Async version of execute_task method\"\"\"\n        # Async task execution implementation\n        \n    async def arun_task(self, task_id):\n        \"\"\"Async version of run_task method\"\"\"\n        # Async task running with retries\n        \n    async def arun_all_tasks(self):\n        \"\"\"Async version of run_all_tasks method\"\"\"\n        # Async execution of all tasks\n```\n\n----------------------------------------\n\nTITLE: Advanced Agent Configuration with Self-Reflection in Python\nDESCRIPTION: This code snippet demonstrates advanced configuration options for a PraisonAI agent with self-reflection.  It sets parameters such as `verbose` for detailed logging, `llm` to specify the language model (gpt-4o), and `allow_delegation` to enable task delegation, in addition to enabling self-reflection.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/selfreflection.mdx#2025-04-19_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n# Create an agent with advanced self-reflection configuration\nagent = Agent(\n    role=\"Research Analyst\",\n    goal=\"Provide comprehensive analysis\",\n    backstory=\"Expert analyst with critical thinking skills\",\n    self_reflect=True,  # Enable self-reflection\n    verbose=True,  # Enable detailed logging\n    llm=\"gpt-4o\",  # Language model to use\n    allow_delegation=True  # Allow task delegation\n)\n```\n\n----------------------------------------\n\nTITLE: Example Internet Search Tool Implementation\nDESCRIPTION: Complete example of InternetSearchTool class implementation with DuckDuckGo integration\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/custom.mdx#2025-04-19_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom duckduckgo_search import DDGS\nfrom praisonai_tools import BaseTool\n\nclass InternetSearchTool(BaseTool):\n    name: str = \"InternetSearchTool\"\n    description: str = \"Search Internet for relevant information based on a query or latest news\"\n\n    def _run(self, query: str):\n        ddgs = DDGS()\n        results = ddgs.text(keywords=query, region='wt-wt', safesearch='moderate', max_results=5)\n        return results\n```\n\n----------------------------------------\n\nTITLE: Decision Task Definition in Python\nDESCRIPTION: This snippet demonstrates how to create a decision task that includes conditions for success and failure, thereby guiding the flow based on outcomes.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/course/agents/10-agent-tasks.mdx#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndecision_task = Task(\n    type=\"decision\",\n    conditions={\n        \"success\": [\"next_task\"],\n        \"failure\": [\"error_task\"]\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Run PraisonAI using YAML config\nDESCRIPTION: Runs agents defined in a YAML file. This allows for more complex scenarios and agent configurations.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/cli.mdx#2025-04-19_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n\"praisonai agents.yaml\"\n```\n\n----------------------------------------\n\nTITLE: Integrating Google Serper Search with PraisonAI Agents\nDESCRIPTION: This snippet demonstrates how to integrate the Google Serper API wrapper with PraisonAI agents. It initializes the GoogleSerperAPIWrapper, creates two agents (data_agent and editor_agent) with specific instructions and tools, and starts the agents using PraisonAIAgents.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/external/google-serper-search.mdx#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent, PraisonAIAgents\nfrom langchain_community.utilities import GoogleSerperAPIWrapper\nimport os\nfrom dotenv import load_dotenv\n\nload_dotenv()\n\nos.environ['SERPER_API_KEY'] = os.getenv('SERPER_API_KEY')\n\nsearch = GoogleSerperAPIWrapper()\n\ndata_agent = Agent(instructions=\"Suggest me top 5 most visited websites for Dosa Recipe\", tools=[search])\neditor_agent = Agent(instructions=\"List out the websites with their url and a short description\")\nagents = PraisonAIAgents(agents=[data_agent, editor_agent])\nagents.start()\n```\n\n----------------------------------------\n\nTITLE: Developing Personalized Medicine Protocol Script\nDESCRIPTION: This Python script sets up a workflow using PraisonAI agents for personalized medicine protocol generation. It defines several functions that simulate the analysis of genetic markers and patient history, evaluates drug interactions, and generates treatment protocols. The script uses classes like `Agent` and `Task` from the praisonaiagents package and runs an asynchronous main function to execute the workflow, printing outputs for each task in the protocol generation process.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/examples/medicine-protocol.mdx#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent, Task, PraisonAIAgents\nimport time\nfrom typing import Dict, List\nimport asyncio\n\ndef analyze_genetic_markers():\n    \"\"\"Simulates genetic marker analysis\"\"\"\n    markers = {\n        \"metabolism_genes\": {\n            \"CYP2D6\": \"rapid_metabolizer\",\n            \"CYP2C19\": \"normal_metabolizer\",\n            \"DPYD\": \"poor_metabolizer\"\n        },\n        \"risk_factors\": {\n            \"cardiovascular\": \"elevated\",\n            \"diabetes\": \"low\",\n            \"autoimmune\": \"moderate\"\n        },\n        \"drug_response_markers\": {\n            \"TPMT\": \"high_sensitivity\",\n            \"HLA-B*5701\": \"negative\",\n            \"UGT1A1\": \"normal\"\n        }\n    }\n    return markers\n\ndef evaluate_patient_history():\n    \"\"\"Simulates patient history evaluation\"\"\"\n    history = {\n        \"conditions\": [\n            {\"name\": \"hypertension\", \"duration\": \"5_years\", \"severity\": \"moderate\"},\n            {\"name\": \"arthritis\", \"duration\": \"2_years\", \"severity\": \"mild\"}\n        ],\n        \"medications\": [\n            {\"name\": \"lisinopril\", \"response\": \"good\", \"side_effects\": \"minimal\"},\n            {\"name\": \"methotrexate\", \"response\": \"moderate\", \"side_effects\": \"mild\"}\n        ],\n        \"allergies\": [\"penicillin\", \"sulfa\"],\n        \"family_history\": [\"diabetes\", \"heart_disease\"]\n    }\n    return history\n\ndef analyze_drug_interactions(genetic_data: Dict, patient_history: Dict):\n    \"\"\"Analyzes potential drug interactions\"\"\"\n    interactions = []\n    medications = [med[\"name\"] for med in patient_history[\"medications\"]]\n    \n    for med in medications:\n        interactions.append({\n            \"medication\": med,\n            \"genetic_impact\": \"significant\" if genetic_data[\"metabolism_genes\"][\"CYP2D6\"] == \"rapid_metabolizer\" else \"normal\",\n            \"risk_level\": \"high\" if med in patient_history[\"allergies\"] else \"low\",\n            \"monitoring_needed\": True if genetic_data[\"metabolism_genes\"][\"DPYD\"] == \"poor_metabolizer\" else False\n        })\n    return interactions\n\ndef generate_protocol(genetic_data: Dict, interactions: List[Dict]):\n    \"\"\"Generates treatment protocol\"\"\"\n    protocol = {\n        \"primary_treatment\": {\n            \"medication\": \"custom_formulation_A\",\n            \"dosage\": \"adjusted_based_on_metabolism\",\n            \"frequency\": \"twice_daily\",\n            \"monitoring\": {\n                \"type\": \"blood_levels\",\n                \"frequency\": \"weekly\"\n            }\n        },\n        \"alternatives\": [\n            {\n                \"medication\": \"custom_formulation_B\",\n                \"conditions\": [\"genetic_compatibility\", \"no_interactions\"]\n            }\n        ],\n        \"precautions\": []\n    }\n    \n    if genetic_data[\"metabolism_genes\"][\"CYP2D6\"] == \"rapid_metabolizer\":\n        protocol[\"precautions\"].append(\"increase_monitoring_frequency\")\n    \n    if any(i[\"risk_level\"] == \"high\" for i in interactions):\n        protocol[\"precautions\"].append(\"alternative_medication_needed\")\n    \n    return protocol\n\ndef simulate_effectiveness(protocol: Dict):\n    \"\"\"Simulates treatment effectiveness\"\"\"\n    simulation = {\n        \"efficacy_prediction\": 0.85 + (time.time() % 2) / 10,\n        \"side_effect_risk\": 0.15 + (time.time() % 1) / 10,\n        \"adherence_probability\": 0.9 + (time.time() % 1) / 10,\n        \"expected_outcomes\": [\n            \"symptom_reduction_80_percent\",\n            \"minimal_side_effects\",\n            \"good_tolerance\"\n        ]\n    }\n    return simulation\n\n# Create specialized agents\ngenetic_analyzer = Agent(\n    name=\"Genetic Analyzer\",\n    role=\"Genetic Analysis\",\n    goal=\"Analyze genetic markers\",\n    instructions=\"Evaluate genetic markers and variants\",\n    tools=[analyze_genetic_markers]\n)\n\nhistory_analyzer = Agent(\n    name=\"History Analyzer\",\n    role=\"History Analysis\",\n    goal=\"Analyze patient history\",\n    instructions=\"Evaluate medical history and conditions\",\n    tools=[evaluate_patient_history]\n)\n\ninteraction_analyzer = Agent(\n    name=\"Interaction Analyzer\",\n    role=\"Drug Interaction\",\n    goal=\"Analyze drug interactions\",\n    instructions=\"Evaluate potential drug interactions\",\n    tools=[analyze_drug_interactions]\n)\n\nprotocol_generator = Agent(\n    name=\"Protocol Generator\",\n    role=\"Protocol Generation\",\n    goal=\"Generate treatment protocol\",\n    instructions=\"Create personalized treatment protocol\",\n    tools=[generate_protocol]\n)\n\neffectiveness_simulator = Agent(\n    name=\"Effectiveness Simulator\",\n    role=\"Treatment Simulation\",\n    goal=\"Simulate treatment effectiveness\",\n    instructions=\"Predict treatment outcomes\",\n    tools=[simulate_effectiveness]\n)\n\n# Create workflow tasks\ngenetic_task = Task(\n    name=\"analyze_genetics\",\n    description=\"Analyze genetic markers\",\n    expected_output=\"Genetic analysis\",\n    agent=genetic_analyzer,\n    is_start=True,\n    next_tasks=[\"analyze_history\"]\n)\n\nhistory_task = Task(\n    name=\"analyze_history\",\n    description=\"Analyze patient history\",\n    expected_output=\"History analysis\",\n    agent=history_analyzer,\n    next_tasks=[\"analyze_interactions\"]\n)\n\ninteraction_task = Task(\n    name=\"analyze_interactions\",\n    description=\"Analyze drug interactions\",\n    expected_output=\"Interaction analysis\",\n    agent=interaction_analyzer,\n    context=[genetic_task, history_task],\n    next_tasks=[\"generate_protocol\"]\n)\n\nprotocol_task = Task(\n    name=\"generate_protocol\",\n    description=\"Generate treatment protocol\",\n    expected_output=\"Treatment protocol\",\n    agent=protocol_generator,\n    context=[genetic_task, interaction_task],\n    next_tasks=[\"simulate_effectiveness\"]\n)\n\nsimulation_task = Task(\n    name=\"simulate_effectiveness\",\n    description=\"Simulate treatment effectiveness\",\n    expected_output=\"Effectiveness simulation\",\n    agent=effectiveness_simulator,\n    task_type=\"decision\",\n    condition={\n        \"high\": \"\",  # End workflow if high effectiveness\n        \"medium\": [\"generate_protocol\"],  # Adjust protocol if medium\n        \"low\": [\"analyze_interactions\"]  # Reanalyze if low\n    }\n)\n\n# Create workflow\nworkflow = PraisonAIAgents(\n    agents=[genetic_analyzer, history_analyzer, interaction_analyzer,\n            protocol_generator, effectiveness_simulator],\n    tasks=[genetic_task, history_task, interaction_task,\n           protocol_task, simulation_task],\n    process=\"workflow\",\n    verbose=True\n)\n\nasync def main():\n    print(\"\\nStarting Personalized Medicine Protocol Generation...\")\n    print(\"=\" * 50)\n    \n    # Run workflow\n    results = await workflow.astart()\n    \n    # Print results\n    print(\"\\nProtocol Generation Results:\")\n    print(\"=\" * 50)\n    for task_id, result in results[\"task_results\"].items():\n        if result:\n            print(f\"\\nTask: {task_id}\")\n            print(f\"Result: {result.raw}\")\n            print(\"-\" * 50)\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Complete Gemini 2.0 Flash Thinking Implementation\nDESCRIPTION: Full implementation of an agent using the Gemini 2.0 Flash Thinking experimental model, including configuration, initialization, and execution with a sample query.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/models/google.mdx#2025-04-19_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent\n\nllm_config = {\"model\": \"gemini/gemini-2.0-flash-thinking-exp-01-21\",\"response_format\": {\"type\": \"text\"}}\n\nagent = Agent(\n    instructions=\"You are a helpful assistant\",\n    llm=llm_config\n)\n\nresult = agent.start(\"Why sky is Blue?\")\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Basic Knowledge Agent Implementation\nDESCRIPTION: Demonstrates the creation of a simple knowledge-based AI agent using PraisonAI. The agent is initialized with a name and instructions for handling queries based on specific knowledge documents.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/concepts/knowledge.mdx#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent\n\nagent = Agent(\n    name=\"Knowledge Agent\",\n    instructions=\"You answer questions based on the provided knowledge.\",\n    knowledge=[\"small.pdf\"]\n)\n\nagent.start(\"What is KAG in one line?\")\n```\n\n----------------------------------------\n\nTITLE: Defining Workflow Tasks in Python\nDESCRIPTION: This segment defines specific tasks in the healthcare diagnosis workflow, such as symptom analysis and lab processing, linking each task to an AI agent and dictating the expected outputs and flow logic.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/examples/healthcare-diagnosis.mdx#2025-04-19_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n# Create workflow tasks\nsymptom_task = Task(\n    name=\"analyze_symptoms\",\n    description=\"Analyze patient symptoms\",\n    expected_output=\"Symptom analysis\",\n    agent=symptom_analyzer,\n    is_start=True,\n    task_type=\"decision\",\n    condition={\n        \"high\": [\"process_labs\", \"analyze_history\"],\n        \"medium\": [\"process_labs\", \"analyze_history\"],\n        \"low\": [\"process_labs\"]\n    }\n)\n\nlab_task = Task(\n    name=\"process_labs\",\n    description=\"Process lab results\",\n    expected_output=\"Lab analysis\",\n    agent=lab_processor,\n    next_tasks=[\"generate_diagnosis\"]\n)\n\nhistory_task = Task(\n    name=\"analyze_history\",\n    description=\"Analyze medical history\",\n    expected_output=\"History analysis\",\n    agent=history_analyzer,\n    next_tasks=[\"generate_diagnosis\"]\n)\n\ndiagnosis_task = Task(\n    name=\"generate_diagnosis\",\n    description=\"Generate diagnosis\",\n    expected_output=\"Diagnosis and confidence level\",\n    agent=diagnosis_generator,\n    next_tasks=[\"recommend_treatment\"],\n    context=[symptom_task, lab_task, history_task]\n)\n\ntreatment_task = Task(\n    name=\"recommend_treatment\",\n    description=\"Recommend treatment\",\n    expected_output=\"Treatment recommendations\",\n    agent=treatment_recommender,\n    context=[diagnosis_task]\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing GoogleSearch with PraisonAI Agents\nDESCRIPTION: Python implementation showing how to create and configure PraisonAI agents with GoogleSearch functionality for web searching and content creation.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/external/google-search.mdx#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport os \nfrom langchain_google_community import GoogleSearchAPIWrapper\nfrom praisonaiagents import Agent, PraisonAIAgents\n\ndata_agent = Agent(instructions=\"Search about best places to visit in India during Summer\", tools=[GoogleSearchAPIWrapper])\neditor_agent = Agent(instructions=\"Write a blog article\")\nagents = PraisonAIAgents(agents=[data_agent, editor_agent], process='hierarchical')\nagents.start()\n```\n\n----------------------------------------\n\nTITLE: Building a Gradio UI for Airbnb Search Agent\nDESCRIPTION: Python code that creates a Gradio web interface for the Airbnb search agent. The interface includes a text input for queries and displays Markdown-formatted search results.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/mcp/openai.mdx#2025-04-19_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent, MCP\nimport gradio as gr\nimport os\n\n# Get API key from environment variable\nopenai_api_key = os.environ.get(\"OPENAI_API_KEY\")\n\ndef search_airbnb(query):\n    agent = Agent(\n        instructions=\"You help book apartments on Airbnb.\",\n        llm=\"gpt-4o-mini\",\n        tools=MCP(\n            command=\"npx\",\n            args=[\"-y\", \"@openbnb/mcp-server-airbnb\", \"--ignore-robots-txt\"],\n            env={\"OPENAI_API_KEY\": openai_api_key}\n        )\n    )\n    result = agent.start(query)\n    return f\"## Airbnb Search Results\\n\\n{result}\"\n\ndemo = gr.Interface(\n    fn=search_airbnb,\n    inputs=gr.Textbox(placeholder=\"I want to book an apartment in Paris for 2 nights...\"),\n    outputs=gr.Markdown(),\n    title=\"Airbnb Booking Assistant\",\n    description=\"Enter your booking requirements below:\"\n)\n\nif __name__ == \"__main__\":\n    demo.launch()\n```\n\n----------------------------------------\n\nTITLE: Executing You Search Analysis Agent with PraisonAI in Python\nDESCRIPTION: This main script creates a PraisonAI instance with the defined YAML configuration and YouSearchTool. It sets up the OpenAI API key, specifies the model, and runs the PraisonAI instance to perform the lung disease research task.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/cookbooks/yaml/you_search_analysis_agents.ipynb#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom praisonai import PraisonAI\nfrom google.colab import userdata\n\n# Create a PraisonAI instance with the agent_yaml content\npraisonai = PraisonAI(agent_yaml=agent_yaml, tools=[YouSearchTool])\n\n# Add OPENAI_API_KEY Secrets to Google Colab on the Left Hand Side 🔑 or Enter Manually Below\nos.environ[\"OPENAI_API_KEY\"] = userdata.get('OPENAI_API_KEY') or \"ENTER OPENAI_API_KEY HERE\"\nos.environ[\"OPENAI_MODEL_NAME\"] = \"gpt-4o-mini\"\n\n# Run PraisonAI\nresult = praisonai.run()\n\n# Print the result\nprint(result) # 8/10\n```\n\n----------------------------------------\n\nTITLE: Initializing Workflow Process with PraisonAI\nDESCRIPTION: This code initializes `PraisonAIAgents` with a \"workflow\" process, enabling asynchronous mode and parallel task execution for independent tasks with branching and merging capabilities. The `astart()` method is then called to start the agents asynchronously, leveraging `parallel_tasks=True`.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/concepts/process.mdx#2025-04-19_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nasync def main():\n    agents = PraisonAIAgents(\n        process=\"workflow\",\n        async_mode=True,\n        parallel_tasks=True\n    )\n    await agents.astart()\n```\n\n----------------------------------------\n\nTITLE: Creating a Programming Agent with PraisonAI\nDESCRIPTION: Complete Python script that creates a Programming Agent with tools for code execution, analysis, formatting, and system interactions. The agent is configured to help with writing a script using yfinance to find Tesla's stock price.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/agents/programming.mdx#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent, Tools\nfrom praisonaiagents.tools import execute_code, analyze_code, format_code, lint_code, disassemble_code # Code Tools\nfrom praisonaiagents.tools import execute_command, list_processes, kill_process, get_system_info # Shell Tools\nfrom praisonaiagents.tools import duckduckgo # Web Search Tool\n\nagent = Agent(\n    instructions=\"You are a Programming Agent\", self_reflect=True, min_reflect=5, max_reflect=10, \n    tools=[execute_code, analyze_code, format_code, lint_code, disassemble_code, execute_command, list_processes, kill_process, get_system_info, duckduckgo]\n)\nagent.start(\n    \"Write a python script using yfinance to find the stock price of Tesla\"\n    \"First check if required packages are installed\"\n    \"Run it using execute_code\"\n    \"execute_command if you want to run any terminal command\"\n    \"search internet using duckduckgo if you want to know update python package information\"\n    \"Analyse the output using analyze_code and fix error if required\"\n    \"if no package is installed, install it\"\n    \"then run the code\"\n)\n```\n\n----------------------------------------\n\nTITLE: Creating and Starting PraisonAI Agents with SerpAPI\nDESCRIPTION: This Python code demonstrates how to create and start PraisonAI agents that utilize the SerpAPI for web searches. It initializes two agents: one for data retrieval related to the decline of recruitment due to AI, and another for writing a blog article about jobs at risk from AI. The agents are combined into a PraisonAIAgents instance and started.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/external/serp-search.mdx#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n```python\nfrom praisonaiagents import Agent, PraisonAIAgents\nfrom langchain_community.utilities import SerpAPIWrapper\n\ndata_agent = Agent(instructions=\"Search about decline of recruitment across various industries with the rise of AI\", tools=[SerpAPIWrapper])\neditor_agent = Agent(instructions=\"Write a blog article pointing out the jobs most at rish due to the rise of AI\")\nagents = PraisonAIAgents(agents=[data_agent, editor_agent])\nagents.start()\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Agent Roles and Tasks in YAML\nDESCRIPTION: YAML configuration defining different AI agent roles including analyst, strategist, engineer, and editor with their respective tasks and tools\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/cookbooks/yaml/landing_page_generator_agents.ipynb#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nagent_yaml = \"\"\"\nframework: \"crewai\"\ntopic: \"Landing Page Creation for Project Ideas\"\nroles:\n  senior_idea_analyst:\n    role: \"Senior Idea Analyst\"\n    backstory: |\n      A thought leader with deep analytical skills, focused on ensuring ideas address real pain points and appeal to broader audiences.\n    goal: |\n      Analyze, understand, and expand upon the essence of ideas, making sure they are impactful and tailored for a successful landing page.\n    verbose: true\n    allow_delegation: false\n    tools:\n      - \"InternetSearchTool\"\n      - \"BrowserSummarizeTool\"\n    tasks:\n      expand_idea_task:\n        description: |\n          Analyze and expand the given idea, exploring key pain points, desired outcomes, and how it might resonate with users.\n        expected_output: |\n          A well-documented expansion of the idea, including insights on pain points, target audience motivations, and how this aligns with the project's goals.\n  senior_strategist:\n    role: \"Senior Communications Strategist\"\n    backstory: |\n      An expert in storytelling and brand communication, focused on crafting narratives that inspire and captivate audiences.\n    goal: |\n      Use the Golden Circle method to create a compelling storyline for the landing page that clearly conveys the 'why' behind the idea.\n    verbose: true\n    allow_delegation: false\n    tools:\n      - \"InternetSearchTool\"\n      - \"BrowserSummarizeTool\"\n    tasks:\n      refine_idea_task:\n        description: |\n          Refine the idea's narrative, focusing on the 'why,' 'how,' and 'what' to ensure it is aligned with audience expectations and interests.\n        expected_output: |\n          A strong narrative framework that captures the unique value of the idea, structured around the Golden Circle approach.\n  senior_react_engineer:\n    role: \"Senior React Engineer\"\n    backstory: |\n      A skilled developer and design enthusiast known for building visually stunning and high-converting landing pages using React and Tailwind.\n    goal: |\n      Build a visually appealing, user-friendly landing page that aligns with the selected template and reflects the idea's value proposition.\n    verbose: true\n    allow_delegation: false\n    tools:\n      - \"InternetSearchTool\"\n      - \"BrowserSummarizeTool\"\n      - \"TemplateSelectionTool\"\n      - \"ProjectFolderCopyTool\"\n      - \"WriteFileTool\"\n      - \"FileReadTool\"\n    tasks:\n      choose_template_task:\n        description: |\n          Based on the expanded idea, select the most fitting TailwindUI template that complements the idea's tone and objectives.\n        expected_output: |\n          The chosen template name and folder path, with reasoning for selection based on idea requirements.\n      update_page_task:\n        description: |\n          Adapt the chosen template to create a landing page for the idea, ensuring that all visual elements and user interactions reflect the desired aesthetic.\n        expected_output: |\n          A ready-to-launch landing page based on the template, with updated design elements that showcase the project's essence.\n  senior_content_editor:\n    role: \"Senior Content Editor\"\n    backstory: |\n      A detail-oriented content specialist with a knack for transforming bland text into captivating, audience-targeted messaging.\n    goal: |\n      Edit and refine the landing page content for clarity, engagement, and brand alignment.\n    verbose: true\n    allow_delegation: true\n    tools:\n      - \"InternetSearchTool\"\n      - \"BrowserSummarizeTool\"\n      - \"FileReadTool\"\n    tasks:\n      create_content_task:\n        description: |\n          Develop or edit content for the landing page that aligns with the expanded idea and the project's voice.\n        expected_output: |\n          Engaging, brand-aligned landing page content that clearly communicates the idea's core value.\ndependencies: []\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: File Organization Workflow in PraisonAI\nDESCRIPTION: Implements a complete file management workflow with multiple agents (Organizer and Cleaner) and tasks for file organization and cleanup\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/file_tools.mdx#2025-04-19_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n# Organization agent\norganizer = Agent(\n    name=\"Organizer\",\n    role=\"File Organizer\",\n    tools=[read_file, write_file, list_files, get_file_info, copy_file, move_file, delete_file]\n)\n\n# Cleanup agent\ncleaner = Agent(\n    name=\"Cleaner\",\n    role=\"File Cleaner\"\n)\n\n# Define tasks\norganize_task = Task(\n    description=\"Organize files by type\",\n    agent=organizer\n)\n\ncleanup_task = Task(\n    description=\"Remove temporary files\",\n    agent=cleaner\n)\n\n# Run workflow\nagents = PraisonAIAgents(\n    agents=[organizer, cleaner],\n    tasks=[organize_task, cleanup_task]\n)\n```\n\n----------------------------------------\n\nTITLE: AI Agent Flow Diagram in Mermaid\nDESCRIPTION: Visualizes the basic workflow of an AI agent, illustrating the cyclical process of perceiving information, making decisions, and taking actions.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/course/agents/01-introduction.mdx#2025-04-19_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD\\n    A[Perceive Information] --> B[Make Decisions]\\n    B --> C[Take Actions]\\n    C --> A\n```\n\n----------------------------------------\n\nTITLE: Basic JSON Processing Agent in Python\nDESCRIPTION: This code demonstrates creating a basic JSON processing agent with tools for reading, writing, and validating JSON. It defines a task for validating configuration files and then runs the agent to execute the task using the PraisonAIAgents framework. The `process` is set to sequential.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/json_tools.mdx#2025-04-19_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent, Task, PraisonAIAgents\nfrom praisonaiagents.tools import read_json, write_json, validate_json\n\n# Create JSON processing agent\njson_agent = Agent(\n    name=\"JSONExpert\",\n    role=\"JSON Processor\",\n    goal=\"Process and validate JSON data efficiently.\",\n    backstory=\"Expert in JSON processing and validation.\",\n    tools=[read_json, write_json, validate_json],\n    self_reflect=False\n)\n\n# Define JSON task\njson_task = Task(\n    description=\"Process and validate configuration files.\",\n    expected_output=\"Validated JSON configuration.\",\n    agent=json_agent,\n    name=\"config_validation\"\n)\n\n# Run agent\nagents = PraisonAIAgents(\n    agents=[json_agent],\n    tasks=[json_task],\n    process=\"sequential\"\n)\nagents.start()\n```\n\n----------------------------------------\n\nTITLE: Running CrewAI in Auto Mode using Bash\nDESCRIPTION: This snippet executes a CrewAI task in auto mode using the PraisonAI interface. It requires PraisonAI and CrewAI installation and automates task execution based on the provided task description.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/framework/crewai.mdx#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npraisonai --framework crewai --auto \"Create a Movie Script About Cat in Mars\"\n```\n\n----------------------------------------\n\nTITLE: Installing PraisonAI with AG2 Framework\nDESCRIPTION: Setup instructions for PraisonAI with AG2 (AutoGen) framework support. Includes framework-specific initialization commands.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/nocode/tldr.mdx#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Install with AG2 support\npip install \"praisonai[autogen]\"\n\n# Set your API key\nexport OPENAI_API_KEY=\"Enter your API key\"\n\n# Initialize and run\npraisonai --framework autogen --init \"create a movie script about dog in moon\"\npraisonai --framework autogen\n```\n\n----------------------------------------\n\nTITLE: Creating and Starting PraisonAI Agents for Wikipedia Search\nDESCRIPTION: This code snippet creates two PraisonAI agents: one to gather data about Messi's records in LaLiga using the WikipediaAPIWrapper, and another to summarize the retrieved data. It then initializes and starts these agents using the PraisonAIAgents framework.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/external/wikipedia-search.mdx#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent, PraisonAIAgents\nfrom langchain_community.utilities import WikipediaAPIWrapper\n\ndata_agent = Agent(instructions=\"Gather all of Messi's record in LaLiga\", tools=[WikipediaAPIWrapper])\nsummarise_agent = Agent(instructions=\"Summarize the data into a well structured format\")\nagents = PraisonAIAgents(agents=[data_agent, summarise_agent])\nagents.start()\n```\n\n----------------------------------------\n\nTITLE: CSV Processing Pipeline Setup\nDESCRIPTION: Example of setting up a complete CSV processing pipeline with processor and analyzer agents.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/csv_tools.mdx#2025-04-19_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n# Processing agent\nprocessor = Agent(\n    name=\"Processor\",\n    role=\"CSV Processor\",\n    tools=[read_csv, write_csv, merge_csv]\n)\n\n# Analysis agent\nanalyzer = Agent(\n    name=\"Analyzer\",\n    role=\"Data Analyst\"\n)\n\n# Define tasks\nprocess_task = Task(\n    description=\"Process CSV files\",\n    agent=processor\n)\n\nanalyze_task = Task(\n    description=\"Analyze processed data\",\n    agent=analyzer\n)\n\n# Run workflow\nagents = PraisonAIAgents(\n    agents=[processor, analyzer],\n    tasks=[process_task, analyze_task]\n)\n```\n\n----------------------------------------\n\nTITLE: Example YAML Configuration for PraisonAI Agent\nDESCRIPTION: This snippet provides example content for configuring an agent within the PraisonAI framework using YAML format. It defines the framework, topic, roles, and tasks for an agent designed for space exploration. This configuration allows the integration of the InternetSearchTool and describes the expected output from the agent's tasks.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/developers/wrapper-tools.mdx#2025-04-19_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nagent_yaml = \"\"\"\nframework: \"crewai\"\ntopic: \"Space Exploration\"\n\nroles:\n  astronomer:\n    role: \"Space Researcher\"\n    goal: \"Discover new insights about {topic}\"\n    backstory: \"You are a curious and dedicated astronomer with a passion for unraveling the mysteries of the cosmos.\"\n    tasks:\n      investigate_exoplanets:\n        description: \"Research and compile information about exoplanets discovered in the last decade.\"\n        expected_output: \"A summarized report on exoplanet discoveries, including their size, potential habitability, and distance from Earth.\"\n    tools:\n      - \"InternetSearchTool\"\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Single Agent in Python\nDESCRIPTION: This code snippet shows how to create an agent and define a task in the PraisonAI framework. It includes agent attributes and task initialization, followed by running the agents.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/concepts/tasks.mdx#2025-04-19_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent, Task, PraisonAIAgents\n\n# Create an agent\nresearcher = Agent(\n    name=\"Researcher\",\n    role=\"Senior Research Analyst\",\n    goal=\"Uncover cutting-edge developments in AI\",\n    backstory=\"You are an expert at a technology research group\",\n    verbose=True,\n    llm=\"gpt-4o\"\n)\n\n# Define a task\n.task = Task(\n    name=\"research_task\",\n    description=\"Analyze 2024's AI advancements\",\n    expected_output=\"A detailed report\",\n    agent=researcher\n)\n\n# Run the agents\nagents = PraisonAIAgents(\n    agents=[researcher],\n    tasks=[task],\n    verbose=False\n)\n\nresult = agents.start()\n```\n\n----------------------------------------\n\nTITLE: Initializing Reasoning and Processing Agents in Python\nDESCRIPTION: Creating AI agents with specialized reasoning and processing capabilities using PraisonAIAgents framework\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/reasoning-extract.mdx#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent, Task, PraisonAIAgents\n\nreasoning_agent = Agent(\n    role=\"Helpful Assistant\", \n    reasoning_steps=True, \n    llm=\"deepseek/deepseek-reasoner\"\n)\n\nsmall_agent = Agent(\n    role=\"Helpful Assistant\", \n    llm=\"gpt-3.5-turbo\"\n)\n\nreasoning_task = Task(\n    description=\"How many r's in the word 'Strawberry'?\", \n    agent=reasoning_agent\n)\n\nsmall_task = Task(\n    description=\"With the provided reasoning tell me how many r's in the word 'Strawberry'?\", \n    agent=small_agent\n)\n\nagents = PraisonAIAgents(\n    agents=[reasoning_agent, small_agent],\n    tasks=[reasoning_task, small_task]\n)\n\nagents.start()\n```\n\n----------------------------------------\n\nTITLE: Setting OpenAI API Key in the Terminal\nDESCRIPTION: A bash command to set the OpenAI API key as an environment variable. This is a prerequisite for running the Python application that interacts with the OpenAI platform.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/routing.mdx#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport OPENAI_API_KEY=your_api_key_here\n```\n\n----------------------------------------\n\nTITLE: Enhancing Support Agent with Knowledge Base in Python\nDESCRIPTION: Creates a knowledge base-powered support agent that can answer frequently asked questions using a predefined FAQ database, covering account, subscription, and technical issues.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/course/agents/18-customer-support-agents.mdx#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent, KnowledgeBase\n\n# Create a simple knowledge base\nfaq_kb = KnowledgeBase()\n\n# Add FAQ content (in a real scenario, you would load this from files)\nfaq_kb.add_text(\"\"\"\n# Frequently Asked Questions\n\n## Account Issues\n\n### How do I reset my password?\nTo reset your password:\n1. Go to the login page\n2. Click on \"Forgot Password\"\n3. Enter your email address\n4. Follow the instructions sent to your email\n\n### How do I change my email address?\nTo change your email address:\n1. Log in to your account\n2. Go to Settings > Account\n3. Click on \"Change Email\"\n4. Enter your new email and confirm with your password\n\n## Subscription and Billing\n\n### What subscription plans do you offer?\nWe offer three plans:\n- Basic: $9.99/month - Includes core features for individuals\n- Pro: $19.99/month - Includes advanced features and team capabilities for up to 5 users\n- Enterprise: Custom pricing - Full feature set with advanced security and support\n\n### How do I cancel my subscription?\nTo cancel your subscription:\n1. Log in to your account\n2. Go to Settings > Billing\n3. Click \"Cancel Subscription\"\n4. Follow the confirmation steps\n\n## Technical Issues\n\n### Why isn't my calendar syncing?\nCommon reasons for calendar sync issues:\n1. Outdated app version - Try updating the app\n2. Account permission issues - Check sync permissions in Settings > Integrations\n3. Internet connectivity problems - Ensure you have a stable connection\n\n### How do I export my data?\nTo export your data:\n1. Go to Settings > Data\n2. Click \"Export Data\"\n3. Choose the data types you want to export\n4. Select your preferred format (CSV or JSON)\n5. Click \"Export\" and save the file\n\"\"\")\n\n# Create an agent with the knowledge base\nkb_support_agent = Agent(\n    name=\"KnowledgeBaseAgent\",\n    instructions=\"\"\"\n    You are a helpful customer support representative with access to our FAQ knowledge base.\n    \n    When helping customers:\n    1. Greet them professionally and warmly\n    2. Search the knowledge base for relevant information\n    3. Provide clear, accurate answers based on the knowledge base\n    4. If the knowledge base doesn't cover the question, provide general helpful guidance\n    5. Maintain a friendly, supportive tone throughout\n    \"\"\",\n    knowledge_base=faq_kb\n)\n\n# Use the knowledge base support agent\nkb_response = kb_support_agent.start(\"How do I cancel my subscription?\")\nprint(kb_response)\n```\n\n----------------------------------------\n\nTITLE: Basic Usage Example of AutoAgents in Python\nDESCRIPTION: This code snippet shows the basic usage of the AutoAgents class with default settings. It outlines how to create an agent for a high-level task description without advanced configuration.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/autoagents.mdx#2025-04-19_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# Basic usage with default settings\nagents = AutoAgents(\n    instructions=\"Your high-level task description\",\n    tools=[tool1, tool2]\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Task in Python\nDESCRIPTION: This snippet demonstrates how to create a basic task using the Task class in Python, providing a description of the task, the expected output, and specifying the agent responsible for its execution.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/course/agents/10-agent-tasks.mdx#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ntask = Task(\n    description=\"Research AI trends\",\n    expected_output=\"Summary report\",\n    agent=research_agent\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Internet Search and Web Content Reader Tools\nDESCRIPTION: Defines two custom tools: InternetSearchTool for performing DuckDuckGo searches and WebContentReaderTool for extracting content from web pages. Both inherit from BaseTool and implement specific functionality for data gathering.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/cookbooks/yaml/comprehensive_research_report_agents.ipynb#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport requests\nfrom bs4 import BeautifulSoup\nfrom duckduckgo_search import DDGS\nfrom praisonai_tools import BaseTool\n\nclass InternetSearchTool(BaseTool):\n    name: str = \"InternetSearchTool\"\n    description: str = \"Search Internet for relevant information based on a query or latest news\"\n\n    def _run(self, query: str):\n        ddgs = DDGS()\n        results = ddgs.text(keywords=query, region='wt-wt', safesearch='moderate', max_results=5)\n        return results\n\n\nclass WebContentReaderTool(BaseTool):\n    name: str = \"WebContentReaderTool\"\n    description: str = \"Fetches and reads the main text content from a specified webpage URL.\"\n\n    def _run(self, url: str) -> str:\n        \"\"\"Reads the content of a webpage and returns up to 5000 characters of text.\"\"\"\n        try:\n            response = requests.get(url, headers={'User-Agent': 'Mozilla/5.0'})\n            response.raise_for_status()\n            soup = BeautifulSoup(response.content, 'html.parser')\n\n            # Extract and clean the text content\n            text_content = soup.get_text(separator=\"\\n\", strip=True)\n            return text_content[:5000]  # Limit content to 5000 characters for brevity\n        except requests.exceptions.RequestException as e:\n            return f\"Failed to retrieve content from {url}: {e}\"\n```\n\n----------------------------------------\n\nTITLE: Implementing DuckDuckGo Search Tool Class\nDESCRIPTION: Python implementation of a custom InternetSearchTool class that extends BaseTool to provide DuckDuckGo search functionality. The tool performs web searches with configurable parameters for region, safe search, and result limits.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/duckduckgo.mdx#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# example tools.py\nfrom duckduckgo_search import DDGS\nfrom praisonai_tools import BaseTool\n\nclass InternetSearchTool(BaseTool):\n    name: str = \"InternetSearchTool\"\n    description: str = \"Search Internet for relevant information based on a query or latest news\"\n\n    def _run(self, query: str):\n        ddgs = DDGS()\n        results = ddgs.text(keywords=query, region='wt-wt', safesearch='moderate', max_results=5)\n        return results\n```\n\n----------------------------------------\n\nTITLE: Task-Based Agent Example\nDESCRIPTION: This snippet illustrates the creation of a task-based AI agent, which accepts specific tasks with dependencies and executes them, demonstrating structured task management.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/js/js.mdx#2025-04-19_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst { Agent, Task } = require('praisonai');\n\n// Create a task-based agent\nconst agent = new Agent({\n  name: \"TaskMaster\",\n  role: \"Assistant\",\n  goal: \"Complete tasks efficiently\",\n  backstory: \"You are an AI assistant that helps complete tasks step by step.\"\n});\n\n// Create a task with dependencies\nconst mainTask = new Task({\n  name: \"Write Blog Post\",\n  description: \"Write a blog post about artificial intelligence\",\n  expected_output: \"A complete blog post\",\n  dependencies: []\n});\n\n// Execute the task\nagent.execute(mainTask)\n  .then(response => {\n    console.log('\\nBlog Post:');\n    console.log(response);\n  })\n  .catch(error => console.error('Error:', error));\n```\n\n----------------------------------------\n\nTITLE: Creating a PostgreSQL-Enabled AI Agent with PraisonAI\nDESCRIPTION: Python code for creating an AI agent that can interact with PostgreSQL databases using MCP. The agent is configured with specific instructions and uses gpt-4o-mini as its language model.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/mcp/postgres.mdx#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent, MCP\nimport os\n\n# PostgreSQL connection string\npostgres_url = \"postgresql://localhost/mydb\"\n\n# Use a single string command with PostgreSQL configuration\npostgres_agent = Agent(\n    instructions=\"\"\"You are a helpful assistant that can interact with PostgreSQL databases.\n    Use the available tools when relevant to manage database operations.\"\"\",\n    llm=\"gpt-4o-mini\",\n    tools=MCP(\"npx -y @modelcontextprotocol/server-postgres\", args=[postgres_url])\n)\n\npostgres_agent.start(\"List all tables in the database\")\n```\n\n----------------------------------------\n\nTITLE: Creating Knowledge Agent with Advanced Configuration in Python\nDESCRIPTION: This Python snippet demonstrates how to configure a Knowledge Agent with a specific vector store configuration, enabling more control over knowledge retrieval features.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/rag.mdx#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent\n\nconfig = {\n    \"vector_store\": {\n        \"provider\": \"chroma\",\n        \"config\": {\n            \"collection_name\": \"praison\",\n            \"path\": \".praison\",\n        }\n    }\n}\n\nagent = Agent(\n    name=\"Knowledge Agent\",\n    instructions=\"You answer questions based on the provided knowledge.\",\n    knowledge=[\"small.pdf\"], # Indexing\n    knowledge_config=config # Configuration\n)\n\nagent.start(\"What is KAG in one line?\") # Retrieval\n```\n\n----------------------------------------\n\nTITLE: Creating Reasoning Agent in Python\nDESCRIPTION: This Python snippet demonstrates the creation of a reasoning agent using the PraisonAI framework, including setting its role, goal, backstory, and tools for problem-solving. It also includes the setup of a task for the agent to complete, and how to start the agent.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/reasoning.mdx#2025-04-19_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nfrom praisonaiagents import Agent, Task, PraisonAIAgents, Tools\n\n# Create reasoning agent\nreasoner = Agent(\n    role=\"Problem Solver\",\n    goal=\"Solve complex problems using logical reasoning\",\n    backstory=\"Expert in logical analysis and problem-solving\",\n    tools=[Tools.internet_search],\n    verbose=True\n)\n\n# Create task\ntask = Task(\n    description=\"Analyze and solve a complex business problem\",\n    expected_output=\"Detailed solution with reasoning steps\",\n    agent=reasoner\n)\n\n# Create and start the agents\nagents = PraisonAIAgents(\n    agents=[reasoner],\n    tasks=[task],\n    process=\"sequential\",\n    verbose=2\n)\n\n# Start execution\nresult = agents.start()\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Providing Clear Instructions to AutoAgents in Python\nDESCRIPTION: This snippet demonstrates how to provide clear and structured instructions to the AutoAgents, which includes detailed bullet points outlining what actions the agents should focus on during execution for effective task management.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/autoagents.mdx#2025-04-19_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n# Good instruction example\nagents = AutoAgents(\n    instructions=\"\"\"\n    Research the latest developments in AI for 2024:\n    1. Focus on breakthrough technologies\n    2. Include real-world applications\n    3. Consider future implications\n    \"\"\"\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Stock Price Assistant with Ollama and Python MCP\nDESCRIPTION: Python code creating a stock price assistant agent using PraisonAI's Agent class with Ollama's llama3.2 model. The agent is connected to a stock price MCP tool that can retrieve stock information.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/mcp/ollama-python.mdx#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent, MCP\n\nstock_agent = Agent(\n    instructions=\"\"\"You are a Stock Price Assistant.\"\"\",\n    llm=\"ollama/llama3.2\",\n    tools=MCP(\"/Users/praison/miniconda3/envs/mcp/bin/python /Users/praison/stockprice/app.py\")\n)\n\n# NOTE: Python Path replace with yours: /Users/praison/miniconda3/envs/mcp/bin/python\n# NOTE: app.py file path, replace it with yours: /Users/praison/stockprice/app.py\n\nstock_agent.start(\"What is the Stock Price of Apple?\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Data Analysis Script with Programming Agent\nDESCRIPTION: Example code showing how to use the Programming Agent to create and run a data analysis script that utilizes pandas, reads a CSV file, performs statistics, and creates visualizations.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/agents/programming.mdx#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# Example: Create and run a data analysis script\nresponse = agent.start(\"\"\"\n    1. Create a script that:\n       - Uses pandas for data analysis\n       - Reads a CSV file\n       - Performs basic statistics\n       - Creates a visualization\n    2. Check and install required packages\n    3. Execute and analyze the results\n\"\"\")\n```\n\n----------------------------------------\n\nTITLE: Managing API Keys Securely with Environment Variables\nDESCRIPTION: Demonstrates secure handling of API keys and credentials using environment variables. This approach prevents credentials from being hardcoded in source code and potentially exposed.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/tools.mdx#2025-04-19_snippet_20\n\nLANGUAGE: python\nCODE:\n```\n# Use environment variables\napi_key = os.getenv('API_KEY')\nif not api_key:\n    raise ConfigError(\"API key not found\")\n```\n\n----------------------------------------\n\nTITLE: Research Assistant Workflow Implementation\nDESCRIPTION: This Python code defines the functions and agents needed to simulate a research analysis workflow using PraisonAI Agents. It includes functions for analyzing research papers, identifying gaps, designing experiments, validating methodologies, and predicting impact, as well as the creation of specialized agents and tasks that are combined into a workflow.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/examples/research-assistant.mdx#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n```python\nfrom praisonaiagents import Agent, Task, PraisonAIAgents\nimport time\nfrom typing import Dict, List\nimport asyncio\n\ndef analyze_research_papers():\n    \"\"\"Simulates research paper analysis\"\"\"\n    papers = [\n        {\n            \"topic\": \"quantum_computing\",\n            \"gaps\": [\"error_correction\", \"scalability\"],\n            \"methodology\": \"experimental\",\n            \"impact_factor\": 8.5\n        },\n        {\n            \"topic\": \"machine_learning\",\n            \"gaps\": [\"interpretability\", \"robustness\"],\n            \"methodology\": \"theoretical\",\n            \"impact_factor\": 7.8\n        }\n    ]\n    return papers[int(time.time()) % 2]\n\ndef identify_knowledge_gaps(papers: Dict):\n    \"\"\"Identifies research gaps\"\"\"\n    gaps = []\n    for gap in papers[\"gaps\"]:\n        gaps.append({\n            \"area\": gap,\n            \"significance\": \"high\" if papers[\"impact_factor\"] > 8 else \"medium\",\n            \"research_potential\": 0.8 + (time.time() % 2) / 10\n        })\n    return gaps\n\ndef design_experiment(gaps: List[Dict]):\n    \"\"\"Designs experimental methodology\"\"\"\n    experiments = []\n    for gap in gaps:\n        experiments.append({\n            \"area\": gap[\"area\"],\n            \"methodology\": {\n                \"type\": \"quantitative\",\n                \"duration\": \"3_months\",\n                \"resources_needed\": [\"equipment_A\", \"dataset_B\"],\n                \"expected_outcome\": \"validation_metrics\"\n            },\n            \"priority\": gap[\"significance\"]\n        })\n    return experiments\n\ndef validate_methodology(experiments: List[Dict]):\n    \"\"\"Validates experimental design\"\"\"\n    validations = []\n    for exp in experiments:\n        validations.append({\n            \"area\": exp[\"area\"],\n            \"statistical_power\": 0.9 + (time.time() % 1) / 10,\n            \"resource_feasibility\": 0.8 + (time.time() % 1) / 10,\n            \"ethical_compliance\": True,\n            \"recommendations\": []\n        })\n    return validations\n\ndef predict_impact(experiments: List[Dict], validations: List[Dict]):\n    \"\"\"Predicts research impact\"\"\"\n    predictions = []\n    for exp, val in zip(experiments, validations):\n        predictions.append({\n            \"area\": exp[\"area\"],\n            \"potential_impact\": val[\"statistical_power\"] * 10,\n            \"novelty_score\": 0.7 + (time.time() % 3) / 10,\n            \"breakthrough_probability\": 0.5 + (time.time() % 4) / 10\n        })\n    return predictions\n\n# Create specialized agents\npaper_analyzer = Agent(\n    name=\"Paper Analyzer\",\n    role=\"Research Analysis\",\n    goal=\"Analyze research papers\",\n    instructions=\"Review and analyze scientific papers\",\n    tools=[analyze_research_papers]\n)\n\ngap_identifier = Agent(\n    name=\"Gap Identifier\",\n    role=\"Gap Analysis\",\n    goal=\"Identify knowledge gaps\",\n    instructions=\"Identify research opportunities\",\n    tools=[identify_knowledge_gaps]\n)\n\nexperiment_designer = Agent(\n    name=\"Experiment Designer\",\n    role=\"Experimental Design\",\n    goal=\"Design research experiments\",\n    instructions=\"Create experimental methodologies\",\n    tools=[design_experiment]\n)\n\nmethodology_validator = Agent(\n    name=\"Methodology Validator\",\n    role=\"Validation\",\n    goal=\"Validate experimental design\",\n    instructions=\"Ensure methodology validity\",\n    tools=[validate_methodology]\n)\n\nimpact_predictor = Agent(\n    name=\"Impact Predictor\",\n    role=\"Impact Analysis\",\n    goal=\"Predict research impact\",\n    instructions=\"Assess potential impact\",\n    tools=[predict_impact]\n)\n\n# Create workflow tasks\nanalysis_task = Task(\n    name=\"analyze_papers\",\n    description=\"Analyze research papers\",\n    expected_output=\"Paper analysis results\",\n    agent=paper_analyzer,\n    is_start=True,\n    next_tasks=[\"identify_gaps\"]\n)\n\ngap_task = Task(\n    name=\"identify_gaps\",\n    description=\"Identify knowledge gaps\",\n    expected_output=\"Research gaps\",\n    agent=gap_identifier,\n    next_tasks=[\"design_experiments\"]\n)\n\ndesign_task = Task(\n    name=\"design_experiments\",\n    description=\"Design experiments\",\n    expected_output=\"Experimental designs\",\n    agent=experiment_designer,\n    next_tasks=[\"validate_methodology\"]\n)\n\nvalidation_task = Task(\n    name=\"validate_methodology\",\n    description=\"Validate methodology\",\n    expected_output=\"Validation results\",\n    agent=methodology_validator,\n    next_tasks=[\"predict_impact\"]\n)\n\nprediction_task = Task(\n    name=\"predict_impact\",\n    description=\"Predict research impact\",\n    expected_output=\"Impact predictions\",\n    agent=impact_predictor,\n    task_type=\"decision\",\n    condition={\n        \"high\": \"\",  # End workflow if high impact\n        \"medium\": [\"design_experiments\"],  # Refine if medium impact\n        \"low\": [\"identify_gaps\"]  # Restart if low impact\n    },\n    context=[design_task, validation_task]\n)\n\n# Create workflow\nworkflow = PraisonAIAgents(\n    agents=[paper_analyzer, gap_identifier, experiment_designer,\n            methodology_validator, impact_predictor],\n    tasks=[analysis_task, gap_task, design_task,\n           validation_task, prediction_task],\n    process=\"workflow\",\n    verbose=True\n)\n\nasync def main():\n    print(\"\\nStarting Research Assistant Workflow...\")\n    print(\"=\" * 50)\n    \n    # Run workflow\n    results = await workflow.astart()\n    \n    # Print results\n    print(\"\\nResearch Analysis Results:\")\n    print(\"=\" * 50)\n    for task_id, result in results[\"task_results\"].items():\n        if result:\n            print(f\"\\nTask: {task_id}\")\n            print(f\"Result: {result.raw}\")\n            print(\"-\" * 50)\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n```\n```\n\n----------------------------------------\n\nTITLE: YAML Processing Pipeline Example\nDESCRIPTION: This example shows a YAML processing pipeline using two agents: a processor and a validator. The processor agent handles processing tasks, while the validator agent focuses on validating the processed data.  The code defines the agents and their respective tasks, then runs them using `PraisonAIAgents`.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/yaml_tools.mdx#2025-04-19_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n# Processing agent\nprocessor = Agent(\n    name=\"Processor\",\n    role=\"YAML Processor\",\n    tools=[read_yaml, write_yaml, convert_yaml]\n)\n\n# Validation agent\nvalidator = Agent(\n    name=\"Validator\",\n    role=\"Data Validator\",\n    tools=[validate_yaml, merge_yaml]\n)\n\n# Define tasks\nprocess_task = Task(\n    description=\"Process YAML files\",\n    agent=processor\n)\n\nvalidate_task = Task(\n    description=\"Validate processed data\",\n    agent=validator\n)\n\n# Run workflow\nagents = PraisonAIAgents(\n    agents=[processor, validator],\n    tasks=[process_task, validate_task]\n)\n```\n\n----------------------------------------\n\nTITLE: Multi-Agent Knowledge System Setup\nDESCRIPTION: Shows how to construct a more complex knowledge management system using multiple agents with specialized roles and objectives. This setups logging and task definitions to efficiently manage the agents' activities.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/concepts/knowledge.mdx#2025-04-19_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent, Task, PraisonAIAgents\nimport logging\nimport os\n\n# Configure logging\nlogging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')\nlogger = logging.getLogger(__name__)\n\n# Define the configuration for the Knowledge instance\nconfig = {\n    \"vector_store\": {\n        \"provider\": \"chroma\",\n        \"config\": {\n            \"collection_name\": \"knowledge_test\",\n            \"path\": \".praison\",\n        }\n    }\n}\n\n# Create an agent with knowledge capabilities\nknowledge_agent = Agent(\n    name=\"KnowledgeAgent\",\n    role=\"Information Specialist\",\n    goal=\"Store and retrieve knowledge efficiently\",\n    backstory=\"Expert in managing and utilizing stored knowledge\",\n    knowledge=[\"sample.pdf\"],\n    knowledge_config=config,\n    verbose=True\n)\n\n# Define a task for the agent\nknowledge_task = Task(\n    name=\"knowledge_task\",\n    description=\"Who is Mervin Praison?\",\n    expected_output=\"Answer to the question\",\n    agent=knowledge_agent\n)\n\n# Create and start the agents\nagents = PraisonAIAgents(\n    agents=[knowledge_agent],\n    tasks=[knowledge_task],\n    process=\"sequential\",\n    user_id=\"user1\"\n)\n\n# Start execution\nresult = agents.start()\n```\n\n----------------------------------------\n\nTITLE: Web Scraping Pipeline Example in Python\nDESCRIPTION: This Python code demonstrates a web scraping pipeline using two agents: a scraper and a processor. The scraper agent is responsible for extracting web content, while the processor agent analyzes and structures the scraped data. Tasks are defined for each agent, and a workflow is set up to run them sequentially.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/spider_tools.mdx#2025-04-19_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n```python\n# Scraping agent\nscraper = Agent(\n    name=\"Scraper\",\n    role=\"Web Scraper\",\n    tools=[scrape_page, crawl_links, parse_html]\n)\n\n# Processing agent\nprocessor = Agent(\n    name=\"Processor\",\n    role=\"Data Processor\",\n    tools=[extract_content, structure_data]\n)\n\n# Define tasks\nscrape_task = Task(\n    description=\"Scrape website content\",\n    agent=scraper\n)\n\nprocess_task = Task(\n    description=\"Process scraped content\",\n    agent=processor\n)\n\n# Run workflow\nagents = PraisonAIAgents(\n    agents=[scraper, processor],\n    tasks=[scrape_task, process_task]\n)\n```\n```\n\n----------------------------------------\n\nTITLE: Creating a Neural Architecture Workflow using Python\nDESCRIPTION: This code snippet defines functions and classes for creating agents and tasks in a neural architecture search workflow. It utilizes the PraisonAI framework to manage hardware analysis, architecture generation, hyperparameter tuning, performance estimation, and deployment optimization.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/examples/neural-architecture.mdx#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent, Task, PraisonAIAgents\nimport time\nfrom typing import Dict, List\nimport asyncio\n\ndef analyze_hardware_constraints():\n    \"\"\"Simulates hardware analysis\"\"\"\n    constraints = {\n        \"gpu_memory\": 16 * 1024,  # MB\n        \"compute_capability\": \"7.5\",\n        \"memory_bandwidth\": 900,  # GB/s\n        \"tensor_cores\": True,\n        \"max_power_consumption\": 300,  # Watts\n        \"thermal_limits\": 85  # Celsius\n    }\n    return constraints\n\ndef generate_architecture_candidates():\n    \"\"\"Generates candidate architectures\"\"\"\n    candidates = [\n        {\n            \"type\": \"transformer\",\n            \"layers\": 12 + (int(time.time()) % 6),\n            \"attention_heads\": 8,\n            \"embedding_dim\": 512,\n            \"estimated_params\": 125_000_000\n        },\n        {\n            \"type\": \"cnn\",\n            \"layers\": 50 + (int(time.time()) % 50),\n            \"filters\": [64, 128, 256, 512],\n            \"estimated_params\": 25_000_000\n        }\n    ]\n    return candidates[int(time.time()) % 2]\n\ndef optimize_hyperparameters(architecture: Dict):\n    \"\"\"Optimizes hyperparameters\"\"\"\n    optimization = {\n        \"learning_rate\": 0.001 + (time.time() % 9) / 10000,\n        \"batch_size\": 32 * (1 + int(time.time()) % 4),\n        \"optimizer\": \"adam\",\n        \"weight_decay\": 0.0001,\n        \"dropout_rate\": 0.1 + (time.time() % 3) / 10,\n        \"activation\": \"gelu\" if architecture[\"type\"] == \"transformer\" else \"relu\"\n    }\n    return optimization\n\ndef estimate_performance(architecture: Dict, hyperparams: Dict):\n    \"\"\"Estimates model performance\"\"\"\n    performance = {\n        \"estimated_accuracy\": 0.85 + (time.time() % 10) / 100,\n        \"estimated_training_time\": {\n            \"hours\": 24 + (int(time.time()) % 24),\n            \"gpu_hours\": 96\n        },\n        \"memory_requirements\": {\n            \"training\": architecture[\"estimated_params\"] * 4 / (1024 * 1024),  # GB\n            \"inference\": architecture[\"estimated_params\"] * 2 / (1024 * 1024)  # GB\n        },\n        \"flops_count\": architecture[\"estimated_params\"] * 2\n    }\n    return performance\n\ndef optimize_deployment(architecture: Dict, performance: Dict):\n    \"\"\"Optimizes deployment configuration\"\"\"\n    deployment = {\n        \"quantization\": {\n            \"method\": \"dynamic\",\n            \"precision\": \"int8\",\n            \"estimated_speedup\": 2.5\n        },\n        \"pruning\": {\n            \"method\": \"magnitude\",\n            \"target_sparsity\": 0.3,\n            \"estimated_size_reduction\": 0.6\n        },\n        \"batching\": {\n            \"max_batch_size\": 32,\n            \"dynamic_batching\": True\n        }\n    }\n    return deployment\n\n# Create specialized agents\nhardware_analyzer = Agent(\n    name=\"Hardware Analyzer\",\n    role=\"Hardware Analysis\",\n    goal=\"Analyze hardware constraints\",\n    instructions=\"Evaluate available hardware resources\",\n    tools=[analyze_hardware_constraints]\n)\n\narchitecture_generator = Agent(\n    name=\"Architecture Generator\",\n    role=\"Architecture Generation\",\n    goal=\"Generate neural architectures\",\n    instructions=\"Create candidate neural architectures\",\n    tools=[generate_architecture_candidates]\n)\n\nhyperparameter_optimizer = Agent(\n    name=\"Hyperparameter Optimizer\",\n    role=\"Hyperparameter Optimization\",\n    goal=\"Optimize hyperparameters\",\n    instructions=\"Find optimal hyperparameter settings\",\n    tools=[optimize_hyperparameters]\n)\n\nperformance_estimator = Agent(\n    name=\"Performance Estimator\",\n    role=\"Performance Estimation\",\n    goal=\"Estimate model performance\",\n    instructions=\"Predict model performance metrics\",\n    tools=[estimate_performance]\n)\n\ndeployment_optimizer = Agent(\n    name=\"Deployment Optimizer\",\n    role=\"Deployment Optimization\",\n    goal=\"Optimize deployment settings\",\n    instructions=\"Configure optimal deployment\",\n    tools=[optimize_deployment]\n)\n\n# Create workflow tasks\nhardware_task = Task(\n    name=\"analyze_hardware\",\n    description=\"Analyze hardware constraints\",\n    expected_output=\"Hardware analysis\",\n    agent=hardware_analyzer,\n    is_start=True,\n    next_tasks=[\"generate_architecture\"]\n)\n\narchitecture_task = Task(\n    name=\"generate_architecture\",\n    description=\"Generate architecture candidates\",\n    expected_output=\"Architecture candidates\",\n    agent=architecture_generator,\n    next_tasks=[\"optimize_hyperparameters\"]\n)\n\nhyperparameter_task = Task(\n    name=\"optimize_hyperparameters\",\n    description=\"Optimize hyperparameters\",\n    expected_output=\"Hyperparameter settings\",\n    agent=hyperparameter_optimizer,\n    context=[architecture_task],\n    next_tasks=[\"estimate_performance\"]\n)\n\nperformance_task = Task(\n    name=\"estimate_performance\",\n    description=\"Estimate performance\",\n    expected_output=\"Performance estimates\",\n    agent=performance_estimator,\n    context=[architecture_task, hyperparameter_task],\n    next_tasks=[\"optimize_deployment\"]\n)\n\ndeployment_task = Task(\n    name=\"optimize_deployment\",\n    description=\"Optimize deployment\",\n    expected_output=\"Deployment configuration\",\n    agent=deployment_optimizer,\n    context=[architecture_task, performance_task],\n    task_type=\"decision\",\n    condition={\n        \"success\": [\"generate_architecture\"],  # Try new architecture\n        \"failure\": [\"optimize_hyperparameters\"]  # Reoptimize hyperparameters\n    }\n)\n\n# Create workflow\nworkflow = PraisonAIAgents(\n    agents=[hardware_analyzer, architecture_generator, hyperparameter_optimizer,\n            performance_estimator, deployment_optimizer],\n    tasks=[hardware_task, architecture_task, hyperparameter_task,\n           performance_task, deployment_task],\n    process=\"workflow\",\n    verbose=True\n)\n\nasync def main():\n    print(\"\\nStarting Neural Architecture Search Workflow...\")\n    print(\"=\" * 50)\n    \n    # Run workflow\n    results = await workflow.astart()\n    \n    # Print results\n    print(\"\\nArchitecture Search Results:\")\n    print(\"=\" * 50)\n    for task_id, result in results[\"task_results\"].items():\n        if result:\n            print(f\"\\nTask: {task_id}\")\n            print(f\"Result: {result.raw}\")\n            print(\"-\" * 50)\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Configuring a Router Agent in Python\nDESCRIPTION: A Python example of configuring a router agent using PraisonAI. The router agent evaluates input and determines the routing path. It includes a custom tool for decision making and is configured with verbose output for detailed logging, aiding in debugging and monitoring.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/routing.mdx#2025-04-19_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# Create a router agent\nrouter = Agent(\n    name=\"Router\",\n    role=\"Input Router\",\n    goal=\"Evaluate input and determine routing path\",\n    instructions=\"Analyze input and decide whether to proceed or exit\",\n    tools=[get_time_check],  # Custom tools for routing decisions\n    verbose=True  # Enable detailed logging\n)\n\n# Task with routing configuration\nrouting_task = Task(\n    name=\"initial_routing\",\n    description=\"Route based on conditions\",\n    expected_output=\"Routing decision\",\n    agent=router,\n    is_start=True,\n    task_type=\"decision\",\n    condition={\n        \"pass\": [\"next_task\"],\n        \"fail\": [\"alternate_task\"]\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Visualizing Emergency Response Workflow with Mermaid\nDESCRIPTION: This snippet is a Mermaid flowchart visualization that outlines the AI workflow for handling emergency responses, ranging from initial assessments to monitoring and dispatching resources. The flowchart illustrates how agents interact at each stage of the emergency response process.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/examples/emergency-response.mdx#2025-04-19_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n    In[In] --> Router[Emergency Router]\n    Router -->|critical/high| Dispatcher[Resource Dispatcher]\n    Router -->|medium/low| Dispatcher\n    Dispatcher --> Monitor[Response Monitor]\n    Monitor -->|ongoing| Coordinator[Response Coordinator]\n    Monitor -->|completed| Out[Out]\n    Coordinator --> Out\n    \n    style In fill:#8B0000,color:#fff\n    style Router fill:#2E8B57,color:#fff\n    style Dispatcher fill:#2E8B57,color:#fff\n    style Monitor fill:#2E8B57,color:#fff\n    style Coordinator fill:#2E8B57,color:#fff\n    style Out fill:#8B0000,color:#fff\n```\n\n----------------------------------------\n\nTITLE: Generating Agent Configuration Method in Python\nDESCRIPTION: Internal method to generate configuration for agents and tasks based on provided instructions.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/api/praisonaiagents/agents/autoagents.mdx#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef _generate_config(self) -> AutoAgentsConfig:\n    \"\"\"\n    Generate the configuration for agents and tasks based on instructions.\n    Returns AutoAgentsConfig object containing agent and task configurations.\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Creating AutoAgents with Advanced Configuration in Python\nDESCRIPTION: This code demonstrates how to set up the AutoAgents with detailed configuration options including execution properties like request limits, timeout settings, and other advanced features. These parameters enhance the performance and capability of the agents.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/autoagents.mdx#2025-04-19_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# Create AutoAgents with advanced configuration\nagents = AutoAgents(\n    instructions=\"Research and summarize recent AI developments\",\n    tools=[SerperDevTool, WikipediaTools],\n    max_agents=3,  # Maximum number of agents to create\n    verbose=True,  # Enable detailed logging\n    process=\"hierarchical\",  # Use hierarchical process\n    memory=True,  # Enable memory for agents\n    allow_delegation=True,  # Allow task delegation\n    max_rpm=60,  # Maximum requests per minute\n    max_execution_time=300,  # Maximum execution time in seconds\n    allow_code_execution=True,  # Allow code execution\n    code_execution_mode=\"safe\",  # Use safe mode for code execution\n    self_reflect=True,  # Enable agent self-reflection\n    markdown=True  # Enable markdown formatting\n)\n```\n\n----------------------------------------\n\nTITLE: Installing PraisonAI with AutoGen Support\nDESCRIPTION: Pip installation command for PraisonAI with AutoGen framework, enabling multi-agent and tool integration capabilities\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/framework/autogen.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install \"praisonai[autogen]\"\n```\n\n----------------------------------------\n\nTITLE: Creating Internet Search Tool with PraisonAI\nDESCRIPTION: This snippet defines a custom internet search tool that utilizes the DuckDuckGo Search API to fetch relevant information based on a user query. It inherits from BaseTool, making it compatible with the PraisonAI framework. This snippet requires the praisonai and duckduckgo_search libraries to function correctly. The primary method, _run, takes a string query as input and returns a list of search results.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/developers/wrapper-tools.mdx#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonai import PraisonAI\nfrom duckduckgo_search import DDGS\nfrom praisonai_tools import BaseTool\n\nclass InternetSearchTool(BaseTool):\n    name: str = \"InternetSearchTool\"\n    description: str = \"Search Internet for relevant information based on a query or latest news\"\n\n    def _run(self, query: str):\n        ddgs = DDGS()\n        results = ddgs.text(keywords=query, region='wt-wt', safesearch='moderate', max_results=5)\n        return results\n```\n\n----------------------------------------\n\nTITLE: Creating an XML Processing Agent - Python\nDESCRIPTION: This snippet shows how to create an instance of an Agent specifically designed for XML processing. It sets up various parameters to define the agent's role and capabilities in processing XML files.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/xml_tools.mdx#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nxml_agent = Agent(\n    name=\"XMLProcessor\",\n    role=\"XML Processing Specialist\",\n    goal=\"Process XML files efficiently and accurately.\",\n    backstory=\"Expert in XML file manipulation and validation.\",\n    tools=[read_xml, write_xml, transform_xml, validate_xml, xml_to_dict, dict_to_xml],\n    self_reflect=False\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Single Agent with Internet Search Tool in Python\nDESCRIPTION: This Python code snippet shows how to create a single agent with a tool for performing internet searches using `duckduckgo-search`. The tool is defined to search and retrieve results based on a query, and it is then assigned to an agent tasked with searching AI job trends.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/course/agents/12-adding-tools-to-agents.mdx#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent\nfrom duckduckgo_search import DDGS\n\n# 1. Define the tool\ndef internet_search_tool(query: str):\n    results = []\n    ddgs = DDGS()\n    for result in ddgs.text(keywords=query, max_results=5):\n        results.append({\n            \"title\": result.get(\"title\", \"\"),\n            \"url\": result.get(\"href\", \"\"),\n            \"snippet\": result.get(\"body\", \"\")\n        })\n    return results\n\n# 2. Assign the tool to an agent\nsearch_agent = Agent(\n    instructions=\"Perform internet searches to collect relevant information.\",\n    tools=[internet_search_tool] # <--- Tool Assignment\n)\n\n# 3. Start Agent\nsearch_agent.start(\"Search about AI job trends in 2025\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Python Executor Agent in PraisonAI\nDESCRIPTION: Demonstrates how to configure an agent specifically for Python code execution with the appropriate tools. This agent is specialized for executing, analyzing, formatting, linting, and disassembling Python code.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/python_tools.mdx#2025-04-19_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nAgent(\n    name=\"PythonExecutor\",\n    role=\"Code Execution Specialist\",\n    goal=\"Execute code safely and efficiently\",\n    tools=[\n        execute_code, analyze_code, format_code,\n        lint_code, disassemble_code\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Input Validation for Security\nDESCRIPTION: Demonstrates proper input validation and sanitization to prevent security vulnerabilities. The function checks input type and sanitizes content before processing to prevent injection attacks.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/tools.mdx#2025-04-19_snippet_18\n\nLANGUAGE: python\nCODE:\n```\ndef process_user_input(data: str) -> str:\n    if not isinstance(data, str):\n        raise ValueError(\"Input must be string\")\n    return sanitize_input(data.strip())\n```\n\n----------------------------------------\n\nTITLE: Multi-Agent Setup with Gemini Model\nDESCRIPTION: Implementation of multiple agents working together using the PraisonAIAgents framework with Gemini. Creates an agent and assigns it a task, then starts execution through the multi-agent controller.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/models/google.mdx#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent, Task, PraisonAIAgents\n\nagent = Agent(\n    instructions=\"You are a helpful assistant\",\n    llm=\"gemini/gemini-1.5-flash-8b\",\n    self_reflect=True,\n    verbose=True\n)\n\ntask = Task(\n    description=\"Why sky is Blue?\",\n    agent=agent,\n)\n\nagents = PraisonAIAgents(\n  agents=[agent],\n  tasks=[task],\n)\n\nagents.start()\n```\n\n----------------------------------------\n\nTITLE: Creating Sequential Thinking Agent with MCP Integration in Python\nDESCRIPTION: Python code to create an AI agent with sequential thinking capabilities using the PraisonAI agents library and MCP. The agent is configured to break down complex problems step-by-step using the gpt-4o-mini model.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/mcp/sequential-thinking.mdx#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent, MCP\nimport os\n\n# Use a single string command with Sequential Thinking configuration\nsequential_agent = Agent(\n    instructions=\"\"\"You are a helpful assistant that can break down complex problems.\n    Use the available tools when relevant to perform step-by-step analysis.\"\"\",\n    llm=\"gpt-4o-mini\",\n    tools=MCP(\"npx -y @modelcontextprotocol/server-sequential-thinking\")\n)\n\nsequential_agent.start(\"Break down the process of making a cup of tea\")\n```\n\n----------------------------------------\n\nTITLE: Defining Agent Configuration in YAML\nDESCRIPTION: YAML configuration defining the AI research system structure with two roles: Research Analyst and Content Creator. Specifies their goals, tasks, and available tools.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/cookbooks/yaml/research_report_generation_agents.ipynb#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nagent_yaml = \"\"\"\nframework: \"crewai\"\ntopic: \"research about the latest AI News and prepare a detailed report\"\nroles:\n  research_analyst:\n    role: \"Research Analyst\"\n    backstory: \"Experienced in gathering and analyzing data related to AI news trends.\"\n    goal: \"Analyze AI News trends\"\n    tasks:\n      gather_data:\n        description: \"Conduct in-depth research on the latest AI News trends from reputable sources.\"\n        expected_output: \"Comprehensive report on current AI News trends.\"\n    tools:\n      - \"TavilyTool\"\n  content_creator:\n    role: \"Content Creator\"\n    backstory: \"Skilled in writing informative and engaging content about AI News.\"\n    goal: \"Create detailed reports on AI News\"\n    tasks:\n      compile_report:\n        description: \"Compile all gathered data into a detailed report with analysis and insights.\"\n        expected_output: \"Well-structured report on the latest AI News with key insights.\"\n    tools: []\ndependencies: []\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Data Analysis Agent with Python\nDESCRIPTION: This snippet shows how to create a basic data analysis agent using the praisonaiagents library, which interprets data and provides insights based on a sample sales data input.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/course/agents/17-data-analysis-agents.mdx#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent\n\n# Create a basic data analysis agent\ndata_analysis_agent = Agent(\n    name=\"DataAnalyst\",\n    instructions=\"\"\"\n    You are a data analysis specialist who interprets and explains data.\n    \n    When analyzing data:\n    1. First understand what the data represents\n    2. Identify key patterns, trends, or anomalies\n    3. Generate meaningful insights\n    4. Explain findings in simple, clear language\n    5. Provide actionable recommendations when appropriate\n    \"\"\"\n)\n\n# Use the data analysis agent with sample data\nsample_data = \"\"\"\nMonthly Sales Data (2024):\nJanuary: $12,500\nFebruary: $13,200\nMarch: $15,800\nApril: $14,300\nMay: $16,700\nJune: $18,900\n\"\"\"\n\nanalysis = data_analysis_agent.start(\n    f\"\"\"\n    Analyze the following sales data and provide insights:\n    \n    {sample_data}\n    \n    Questions to answer:\n    1. What is the overall sales trend?\n    2. Which month had the highest sales?\n    3. What is the average monthly sales?\n    4. What recommendations would you make based on this data?\n    \"\"\"\n)\nprint(analysis)\n```\n\n----------------------------------------\n\nTITLE: Running Multiple Agents with PraisonAI in TypeScript\nDESCRIPTION: Demonstrates creating and managing multiple agents with distinct roles using PraisonAI. Each agent has a specific instruction, and agents work in sequence with results being passed along. Requires 'Agent' and 'PraisonAIAgents' imports. Outputs consolidated results of the agents' operations.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/js/typescript-async.mdx#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Agent, PraisonAIAgents } from 'praisonai';\n\nasync function main() {\n    // Create multiple agents with different roles\n    const researchAgent = new Agent({\n        name: \"ResearchAgent\",\n        instructions: \"Research and provide detailed information about renewable energy sources.\",\n        verbose: true\n    });\n\n    const summaryAgent = new Agent({\n        name: \"SummaryAgent\",\n        instructions: \"Create a concise summary of the research findings about renewable energy sources. Use {previous_result} as input.\",\n        verbose: true\n    });\n\n    const recommendationAgent = new Agent({\n        name: \"RecommendationAgent\",\n        instructions: \"Based on the summary in {previous_result}, provide specific recommendations for implementing renewable energy solutions.\",\n        verbose: true\n    });\n\n    // Run the agents in sequence\n    const praisonAI = new PraisonAIAgents({\n        agents: [researchAgent, summaryAgent, recommendationAgent],\n        tasks: [\n            \"Research and analyze current renewable energy technologies and their implementation.\",\n            \"Summarize the key findings from the research.\",\n            \"Provide actionable recommendations based on the summary.\"\n        ],\n        verbose: true\n    });\n\n    try {\n        console.log('Starting multi-agent example...');\n        const results = await praisonAI.start();\n        console.log('\\nFinal Results:', results);\n    } catch (error) {\n        console.error('Error:', error);\n    }\n}\n\nmain();\n```\n\n----------------------------------------\n\nTITLE: Creating and Running a Single Agent - TypeScript\nDESCRIPTION: Demonstrates how to create a single AI agent that is specialized in science explanations and runs it with a query.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/js/nodejs.mdx#2025-04-19_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Agent } from 'praisonai';\nconst agent = new Agent({ instructions: `You are a science expert who explains complex phenomena in simple terms.\nProvide clear, accurate, and easy-to-understand explanations.`, name: 'ScienceExplainer', verbose: true });\nagent.start('Why is the sky blue?')\n  .then(response => {\n    console.log('\\nExplanation:');\n    console.log(response);\n  })\n  .catch(error => {\n    console.error('Error:', error);\n  });\n```\n\n----------------------------------------\n\nTITLE: Single Agent Example in TypeScript\nDESCRIPTION: Demonstrates creating and running a single AI agent that explains scientific phenomena, leveraging the PraisonAI framework in TypeScript.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/js/typescript.mdx#2025-04-19_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Agent } from 'praisonai';\n\n// Single agent example - Science Explainer\nconst agent = new Agent({ \n  instructions: `You are a science expert who explains complex phenomena in simple terms.\nProvide clear, accurate, and easy-to-understand explanations.`,\n  name: \"ScienceExplainer\",\n  verbose: true\n});\n\nagent.start(\"Why is the sky blue?\")\n  .then(response => {\n    console.log('\\nExplanation:');\n    console.log(response);\n  })\n  .catch(error => {\n    console.error('Error:', error);\n  });\n```\n\n----------------------------------------\n\nTITLE: Creating and Running a Routing Workflow in Python\nDESCRIPTION: A Python script for setting up a routing workflow using the PraisonAI library. It involves creating agents and tasks with specific roles and behaviors, and executing them in a structured workflow. The code leverages time-based conditions for routing decisions. Key dependencies include 'praisonaiagents'. Assumes Python 3.10+ and an OpenAI API key.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/routing.mdx#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents.agent import Agent\nfrom praisonaiagents.task import Task\nfrom praisonaiagents.agents import PraisonAIAgents\nimport time\n\ndef get_time_check():\n    current_time = int(time.time())\n    result = \"even\" if current_time % 2 == 0 else \"odd\"\n    print(f\"Time check: {current_time} is {result}\")\n    return result\n\n# Create specialized agents\nrouter = Agent(\n    name=\"Router\",\n    role=\"Input Router\",\n    goal=\"Evaluate input and determine routing path\",\n    instructions=\"Analyze input and decide whether to proceed or exit\",\n    tools=[get_time_check]\n)\n\nprocessor1 = Agent(\n    name=\"Processor 1\",\n    role=\"Secondary Processor\",\n    goal=\"Process valid inputs that passed initial check\",\n    instructions=\"Process data that passed the routing check\"\n)\n\nprocessor2 = Agent(\n    name=\"Processor 2\",\n    role=\"Final Processor\",\n    goal=\"Perform final processing on validated data\",\n    instructions=\"Generate final output for processed data\"\n)\n\n# Create tasks with routing logic\nrouting_task = Task(\n    name=\"initial_routing\",\n    description=\"check the time and return according to what is returned\",\n    expected_output=\"pass or fail based on what is returned\",\n    agent=router,\n    is_start=True,\n    task_type=\"decision\",\n    condition={\n        \"pass\": [\"process_valid\"],\n        \"fail\": [\"process_invalid\"]\n    }\n)\n\nprocessing_task = Task(\n    name=\"process_valid\",\n    description=\"Process validated input\",\n    expected_output=\"Processed data ready for final step\",\n    agent=processor1,\n)\n\nfinal_task = Task(\n    name=\"process_invalid\",\n    description=\"Generate final output\",\n    expected_output=\"Final processed result\",\n    agent=processor2\n)\n\n# Create and run workflow\nworkflow = PraisonAIAgents(\n    agents=[router, processor1, processor2],\n    tasks=[routing_task, processing_task, final_task],\n    process=\"workflow\",\n    verbose=True\n)\n\nprint(\"\\nStarting Routing Workflow...\")\nprint(\"=\" * 50)\n\nresults = workflow.start()\n\nprint(\"\\nWorkflow Results:\")\nprint(\"=\" * 50)\nfor task_id, result in results[\"task_results\"].items():\n    if result:\n        task_name = result.description\n        print(f\"\\nTask: {task_name}\")\n        print(f\"Result: {result.raw}\")\n        print(\"-\" * 50)\n```\n\n----------------------------------------\n\nTITLE: Create Versioned Agent Class in Python\nDESCRIPTION: This snippet creates a `VersionedAgent` class to implement version control for AI agents. The class initializes an `Agent` object with a name that includes the version number. The `get_response` method processes a query with the agent and returns a dictionary containing the agent's name, version, response, and a timestamp.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/course/agents/20-deploying-agents.mdx#2025-04-19_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nclass VersionedAgent:\n    def __init__(self, name, version, instructions):\n        self.name = name\n        self.version = version\n        self.agent = Agent(\n            name=f\"{name}_v{version}\",\n            instructions=instructions,\n            llm=\"gpt-4o-mini\"  # Using the specified model\n        )\n    \n    def get_response(self, query):\n        response = self.agent.start(query)\n        return {\n            \"agent_name\": self.name,\n            \"version\": self.version,\n            \"response\": response,\n            \"timestamp\": datetime.now().isoformat()\n        }\n```\n\n----------------------------------------\n\nTITLE: Creating a Complete Recommendation System Script in Python\nDESCRIPTION: A full script that creates a recommendation agent, sets it up with the DuckDuckGo tool, processes a query, and saves the results to a file.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/agents/recommendation.mdx#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent, Tools\nfrom praisonaiagents.tools import duckduckgo\n\n# Create Recommendation Agent\nrecommendation_agent = Agent(\n    name=\"RecommendationEngine\",\n    role=\"Recommendation Specialist\",\n    goal=\"Generate personalized recommendations based on preferences\",\n    instructions=\"You are a Recommendation Agent\",\n    tools=[duckduckgo]\n)\n\n# Get recommendations\nresponse = recommendation_agent.start(\n    \"Recommend me a good movie to watch in 2025\"\n)\n\n# Save recommendations\nwith open('recommendations.txt', 'w') as f:\n    f.write(response)\n```\n\n----------------------------------------\n\nTITLE: Creating DuckDB Database Agent\nDESCRIPTION: Initialize a database agent with specific role and tools for database management.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/duckdb_tools.mdx#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndb_agent = Agent(\n    name=\"DBProcessor\",\n    role=\"Database Management Specialist\",\n    goal=\"Manage and query databases efficiently.\",\n    backstory=\"Expert in database operations and SQL.\",\n    tools=[execute_query, load_csv, export_csv],\n    self_reflect=False\n)\n```\n\n----------------------------------------\n\nTITLE: Creating PraisonAI Agent with Anthropic and Airbnb MCP (Python)\nDESCRIPTION: Demonstrates how to create a PraisonAI agent that uses Anthropic's Claude model and integrates with Airbnb using MCP. The agent is configured to search for apartments on Airbnb based on user instructions.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/mcp/anthropic.mdx#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent, MCP\nimport os\n\n# Get API key from environment variable\nanthropic_api_key = os.environ.get(\"ANTHROPIC_API_KEY\")\n\nsearch_agent = Agent(\n    instructions=\"\"\"You help book apartments on Airbnb.\"\"\",\n    llm=\"anthropic/claude-3-7-sonnet-20250219\",\n    tools=MCP(\n        command=\"npx\",\n        args=[\"-y\", \"@openbnb/mcp-server-airbnb\", \"--ignore-robots-txt\"],\n        env={\"ANTHROPIC_API_KEY\": anthropic_api_key}\n    )\n)\n\nsearch_agent.start(\"MUST USE airbnb_search Tool to Search. Search for Apartments in Paris for 2 nights. 04/28 - 04/30 for 2 adults. All Your Preference\")\n```\n\n----------------------------------------\n\nTITLE: Rate Limiting API Calls in PraisonAI\nDESCRIPTION: This snippet illustrates how to implement rate limiting for API calls to prevent abuse in PraisonAI. The `@rate_limit` decorator restricts the number of calls to `api_call` to 100 within a 60-second period, protecting the API from excessive usage.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/concepts/tools.mdx#2025-04-19_snippet_22\n\nLANGUAGE: python\nCODE:\n```\n@rate_limit(calls=100, period=60)\nasync def api_call():\n    return await make_request()\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Calculator Tool in Python\nDESCRIPTION: This snippet illustrates how to define and use a simple calculator tool that evaluates mathematical expressions. The tool format includes error handling to ensure robustness, returning either the calculated result or an error message in case of a malfunction. An agent is instantiated with this tool for instructional purposes.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/course/agents/05-agent-tools.mdx#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent\n\n# Define a simple calculator tool\ndef calculator(expression):\n    try:\n        return str(eval(expression))\n    except:\n        return \"Error: Could not calculate\"\n\n# Create an agent with the tool\nmath_agent = Agent(\n    instructions=\"You are a math tutor helping students solve problems\",\n    tools=[calculator]\n)\n\n# Use the agent\nmath_agent.start(\"Calculate 24 * 17 and explain the steps\")\n```\n\n----------------------------------------\n\nTITLE: Creating an Async AI Agent in Python\nDESCRIPTION: This Python code demonstrates creating an async AI agent using PraisonAI libraries. It imports necessary modules, configures agent and task attributes, initializes PraisonAIAgents, and executes the main async function to start the agent. Prerequisites include Python 3.10 and setting the environment variable for the API key.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/async.mdx#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nfrom praisonaiagents import Agent, Task, PraisonAIAgents\n\n# Create an agent\nagent = Agent(\n    name=\"AsyncAgent\",\n    role=\"Assistant\",\n    goal=\"Help with tasks\",\n    backstory=\"Expert in async operations\"\n)\n\n# Create a task\ntask = Task(\n    name=\"hello_task\",\n    description=\"Say hello and introduce yourself\",\n    agent=agent,\n    async_execution=True,\n    expected_output=\"Answer to the question\"\n)\n\n# Create agents manager\nagents = PraisonAIAgents(\n    agents=[agent],\n    tasks=[task],\n    process=\"sequential\"\n)\n\n# Main async function\nasync def main():\n    result = await agents.astart()\n    print(result)\n\n# Run the program\nif __name__ == \"__main__\":\n    asyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Running YAML Configured Agents with PraisonAI\nDESCRIPTION: This command runs the PraisonAI framework with a YAML configuration file called 'agents.yaml', initiating the process defined in the configuration.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/langchain_tools.mdx#2025-04-19_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\npraisonai agents.yaml\n```\n\n----------------------------------------\n\nTITLE: Configuring Agents and Tasks with PraisonAI\nDESCRIPTION: These code snippets demonstrate how to configure agents and tasks using the PraisonAI library. It shows how to define an agent with specific tools and roles and create tasks with conditions and feedback loops, creating an autonomous workflow.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/autonomous-workflow.mdx#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n\"# Create a monitor agent\nmonitor = Agent(\n    name=\\\"Environment Monitor\\\",\n    role=\\\"State analyzer\\\",\n    goal=\\\"Monitor and analyze state\\\",\n    tools=[get_environment_state],  # Environment monitoring tools\n    verbose=True  # Enable detailed logging\n)\n\n# Create an action agent\naction = Agent(\n    name=\\\"Action Executor\\\",\n    role=\\\"Action performer\\\",\n    goal=\\\"Execute appropriate actions\\\",\n    tools=[perform_action]  # Action execution tools\n)\n\n# Create monitoring task\nmonitor_task = Task(\n    name=\\\"monitor_environment\\\",\n    description=\\\"Monitor environment state\\\",\n    agent=monitor,\n    is_start=True,\n    task_type=\\\"decision\\\",\n    condition={\n        \\\"normal\\\": [\\\"execute_action\\\"],\n        \\\"critical\\\": [\\\"execute_action\\\"],\n        \\\"optimal\\\": \\\"exit\\\"\n    }\n)\n\n# Create feedback loop task\nfeedback_task = Task(\n    name=\\\"process_feedback\\\",\n    description=\\\"Process and adapt\\\",\n    agent=feedback_agent,\n    next_tasks=[\\\"monitor_environment\\\"],  # Create feedback loop\n    context=[monitor_task, action_task]  # Access history\n)\"\n```\n\n----------------------------------------\n\nTITLE: Configuring a Python Tool\nDESCRIPTION: This snippet demonstrates how to define a configurable tool in Python, including parameters for query, maximum results, and timeout.  It showcases how to structure a function with type hints and a docstring to clearly define the tool's purpose and arguments. The function takes a search query as input and returns a list of dictionaries containing search results.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/tools.mdx#2025-04-19_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndef configured_tool(\n    query: str,\n    max_results: int = 5,\n    timeout: int = 10\n) -> List[Dict]:\n    \"\"\"\n    Example of a configurable tool\n    \n    Args:\n        query (str): Search query\n        max_results (int): Maximum number of results\n        timeout (int): Request timeout in seconds\n        \n    Returns:\n        List[Dict]: Search results\n    \"\"\"\n    # Tool implementation\n    pass\n```\n\n----------------------------------------\n\nTITLE: Initializing Fraud Detection Workflow in Python\nDESCRIPTION: Comprehensive Python script for creating an AI-powered fraud detection workflow with multiple specialized agents and tasks\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/examples/fraud-detection.mdx#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent, Task, PraisonAIAgents\nimport time\nfrom typing import Dict, List\nimport asyncio\n```\n\n----------------------------------------\n\nTITLE: Creating an Asynchronous Image Agent in Python\nDESCRIPTION: This Python script demonstrates creating an asynchronous Image Agent using PraisonAI. It uses asyncio for concurrency, and the ImageAgent is initialized with DALL-E capabilities. The script executes an asynchronous generation request and prints the result.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/image-generation.mdx#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nfrom praisonaiagents import ImageAgent\n\nasync def main():\n    agent = ImageAgent(\n        name=\"ImageCreator\",\n        llm=\"dall-e-3\",\n        style=\"natural\"\n    )\n\n    result = await agent.achat(\"A cute baby sea otter playing with a laptop\")\n    print(f\"Image generation result: {result}\")\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Executing Trip Planner with PraisonAI\nDESCRIPTION: Main execution script that initializes PraisonAI with the configured agents and tools, sets up OpenAI credentials, and runs the trip planning process.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/cookbooks/yaml/trip_planner_agents.ipynb#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom praisonai import PraisonAI\nfrom google.colab import userdata\n\n# Create a PraisonAI instance with the agent_yaml content\npraisonai = PraisonAI(agent_yaml=agent_yaml, tools=[InternetSearchTool, WebContentReaderTool, CalculatorTools])\n\n# Add OPENAI_API_KEY Secrets to Google Colab on the Left Hand Side 🔑 or Enter Manually Below\nos.environ[\"OPENAI_API_KEY\"] = userdata.get('OPENAI_API_KEY') or \"ENTER OPENAI_API_KEY HERE\"\nos.environ[\"OPENAI_MODEL_NAME\"] = \"gpt-4o-mini\"\n\n# Run PraisonAI\nresult = praisonai.run()\n\n# Print the result\nprint(result) # 10/10\n```\n\n----------------------------------------\n\nTITLE: Implementing an Internet Search Tool with DuckDuckGo\nDESCRIPTION: Creates a custom search tool by extending the BaseTool class from praisonai_tools. This tool uses the DuckDuckGo search API to retrieve information based on a query, returning up to 5 results.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/cookbooks/yaml/article_generation_agents.ipynb#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom duckduckgo_search import DDGS\nfrom praisonai_tools import BaseTool\n\nclass InternetSearchTool(BaseTool):\n    name: str = \"InternetSearchTool\"\n    description: str = \"Search Internet for relevant information based on a query or latest news\"\n\n    def _run(self, query: str):\n        ddgs = DDGS()\n        results = ddgs.text(keywords=query, region='wt-wt', safesearch='moderate', max_results=5)\n        return results\n```\n\n----------------------------------------\n\nTITLE: Advanced Scraping with Multiple Agents in Python\nDESCRIPTION: This Python example demonstrates advanced scraping using multiple agents for content scraping and analysis. It creates separate agents for scraping and analyzing content, defines corresponding tasks, and runs them sequentially. The example showcases the division of responsibilities between agents for a more structured and efficient scraping process.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/spider_tools.mdx#2025-04-19_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n```python\n# Create scraping agent\nscraper_agent = Agent(\n    name=\"Scraper\",\n    role=\"Content Scraper\",\n    goal=\"Extract web content systematically.\",\n    tools=[scrape_page, crawl_links, parse_html],\n    self_reflect=False\n)\n\n# Create analysis agent\nanalysis_agent = Agent(\n    name=\"Analyzer\",\n    role=\"Content Analyst\",\n    goal=\"Analyze and structure scraped content.\",\n    backstory=\"Expert in data analysis and organization.\",\n    tools=[extract_content, structure_data],\n    self_reflect=False\n)\n\n# Define tasks\nscraping_task = Task(\n    description=\"Scrape product data from multiple pages.\",\n    agent=scraper_agent,\n    name=\"product_scraping\"\n)\n\nanalysis_task = Task(\n    description=\"Analyze and structure the scraped product data.\",\n    agent=analysis_agent,\n    name=\"data_analysis\"\n)\n\n# Run agents\nagents = PraisonAIAgents(\n    agents=[scraper_agent, analysis_agent],\n    tasks=[scraping_task, analysis_task],\n    process=\"sequential\"\n)\nagents.start()\n```\n```\n\n----------------------------------------\n\nTITLE: Parallel Task Execution Setup\nDESCRIPTION: This upcoming feature illustrates how to configure tasks for parallel execution in the PraisonAI framework. It indicates asynchronous execution settings for multiple tasks and ensures a final task waits for their completion. Inputs include task descriptions and async flags. Outputs are based on task dependencies.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/framework/praisonaiagents.mdx#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ntask1 = Task(\n    description=\"Research task 1\",\n    async_execution=True\n)\n\ntask2 = Task(\n    description=\"Research task 2\",\n    async_execution=True\n)\n\nfinal_task = Task(\n    description=\"Compile results\",\n    context=[task1, task2]  # Waits for both tasks\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Agent Setup in Python\nDESCRIPTION: This Python code sets up a basic agent using PraisonAIAgents, focusing on creating a single tool agent for Wikipedia research. It defines an agent with a specific goal and utilizes the WikipediaAPIWrapper tool to perform research tasks.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/langchain_tools.mdx#2025-04-19_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent, Task, PraisonAIAgents\nfrom langchain_community.utilities import WikipediaAPIWrapper\n\n# Create an agent with Wikipedia tool\nagent = Agent(\n    name=\"WikiAgent\",\n    role=\"Research Assistant\",\n    goal=\"Search Wikipedia for accurate information\",\n    backstory=\"I am an AI assistant specialized in Wikipedia research\",\n    tools=[WikipediaAPIWrapper],\n    self_reflect=False\n)\n\n# Create a research task\ntask = Task(\n    name=\"wiki_search\",\n    description=\"Research 'Artificial Intelligence' on Wikipedia\",\n    expected_output=\"Comprehensive information from Wikipedia articles\",\n    agent=agent\n)\n\n# Create and start the workflow\nagents = PraisonAIAgents(\n    agents=[agent],\n    tasks=[task],\n    verbose=True\n)\n\nagents.start()\n```\n\n----------------------------------------\n\nTITLE: Creating a Daily Planning Assistant with PraisonAI\nDESCRIPTION: This code snippet creates a daily planning assistant using the `Agent` class. The agent helps users organize their day by prioritizing tasks, considering time constraints, and suggesting efficient scheduling.  The agent is provided with a list of tasks and time commitments for the following day.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/course/agents/19-personal-assistant-agents.mdx#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nplanning_agent = Agent(\n    name=\"DailyPlanner\",\n    instructions=\"\"\"\n    You are a daily planning assistant who helps users organize their day efficiently.\n    \n    When helping with daily planning:\n    1. Prioritize tasks based on importance and deadlines\n    2. Consider time constraints and commitments\n    3. Suggest efficient scheduling\n    4. Allow for breaks and transitions\n    5. Balance work tasks with personal needs\n    \n    Create a structured daily plan with time blocks and priorities.\n    \"\"\",\n    llm=\"gpt-4o-mini\"  # Using the specified model\n)\n\n# Use the daily planning agent\nplanning_response = planning_agent.start(\n    \"\"\"\n    Help me plan my day tomorrow. I have:\n    \n    - A team meeting from 9:30-10:30 AM\n    - A report due by end of day\n    - Emails to catch up on (about 1 hour's worth)\n    - Lunch with a colleague at 12:30 PM\n    - A dentist appointment at 3:00 PM (will take about 1 hour including travel)\n    - Need to prepare a presentation for Friday\n    \n    I typically work from 8:30 AM to 5:30 PM and prefer to have short breaks between tasks.\n    \"\"\"\n)\nprint(planning_response)\n```\n\n----------------------------------------\n\nTITLE: Working Memory Graph (Mermaid)\nDESCRIPTION: This Mermaid diagram illustrates how working memory integrates current input with both short-term and long-term memory to generate an agent response. It shows the combination of various memory types within the working memory component to produce contextually relevant agent outputs.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/course/agents/06-agent-memory.mdx#2025-04-19_snippet_3\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD\n    A[Current Input] --> D[Working Memory]\n    B[Short-Term Memory] --> D\n    C[Long-Term Memory] --> D\n    D --> E[Agent Response]\n```\n\n----------------------------------------\n\nTITLE: Chaining Multiple Python Tools\nDESCRIPTION: This code demonstrates how to chain multiple tools together in Python to perform a sequence of operations.  The example involves searching for data, processing the results, and formatting the output. It takes an input data string, utilizes other tools (internet_search_tool, process_tool, and format_tool, assumed to be defined elsewhere), and returns a dictionary of processed results.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/tools.mdx#2025-04-19_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ndef chain_tools(input_data: str) -> Dict:\n    \"\"\"\n    Example of chaining multiple tools\n    \n    Args:\n        input_data (str): Input data\n        \n    Returns:\n        Dict: Processed results\n    \"\"\"\n    # 1. Search for data\n    search_results = internet_search_tool(input_data)\n    \n    # 2. Process results\n    processed_data = process_tool(search_results)\n    \n    # 3. Format output\n    return format_tool(processed_data)\n```\n\n----------------------------------------\n\nTITLE: Simplified Example of Travel Planning Agent Usage\nDESCRIPTION: A minimal example showing how to use the Planning Agent to create a weekend trip plan with hotel and flight recommendations.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/agents/planning.mdx#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# Example: Create a weekend trip plan\nfrom praisonaiagents import Agent, Tools\nfrom praisonaiagents.tools import duckduckgo\n\nagent = Agent(instructions=\"You are a Planning Agent\", tools=[duckduckgo])\nagent.start(\"I want to go London next week, find me a good hotel and flight\")\n```\n\n----------------------------------------\n\nTITLE: Async AutoAgents Usage Example in Python\nDESCRIPTION: Example demonstrating asynchronous usage of AutoAgents with hierarchical processing.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/api/praisonaiagents/agents/autoagents.mdx#2025-04-19_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nasync def main():\n    agents = AutoAgents(\n        instructions=\"Research recent AI developments\",\n        tools=[SerperDevTool()],\n        process=\"hierarchical\"\n    )\n    result = await agents.astart()\n\nimport asyncio\nasyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Creating a Customized Conversational Agent with Settings\nDESCRIPTION: Demonstrates creating an agent with customized settings like memory size and response creativity, allowing fine-tuned control over conversational behavior.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/course/agents/14-conversational-agents.mdx#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Create an agent with specific conversation settings\ncustom_chat_agent = Agent(\n    name=\"Custom Chat Assistant\",\n    instructions=\"You are a helpful assistant\",\n    memory_size=10,  # Remember the last 10 messages\n    temperature=0.7  # Slightly more creative in responses\n)\n```\n\n----------------------------------------\n\nTITLE: Advanced Topic Research Implementation\nDESCRIPTION: Extended example showing how to use the web search agent for detailed topic research with specific search criteria.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/agents/websearch.mdx#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# Example: Perform topic research\nfrom praisonaiagents import Agent, Tools\nfrom praisonaiagents.tools import duckduckgo\n\nagent = Agent(\n    instructions=\"You are a Web Search Agent\",\n    tools=[duckduckgo]\n)\n\n# Research specific topic\nresponse = agent.start(\"\"\"\n    Search for information about quantum computing:\n    - Recent breakthroughs\n    - Leading companies\n    - Current applications\n    - Future predictions\n\"\"\")\n\n# Save research results\nwith open('quantum_computing_research.md', 'w') as f:\n    f.write(response)\n```\n\n----------------------------------------\n\nTITLE: YAML Configuration for No-Code Agent Setup\nDESCRIPTION: Define agent configuration using YAML for a sequential search agent with multiple tools and predefined tasks.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/langchain_tools.mdx#2025-04-19_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nframework: praisonai\nprocess: sequential\nroles:\n  researcher:\n    name: SearchAgent\n    role: Research Assistant\n    goal: Search for information from multiple sources\n    backstory: I am an AI assistant that can search YouTube and Wikipedia.\n    tools:\n      - youtube_search\n      - wikipedia\n    tasks:\n      search_task:\n        name: search_task\n        description: Search for information about 'AI advancements' on both YouTube and Wikipedia\n        expected_output: Combined information from YouTube videos and Wikipedia articles\n```\n\n----------------------------------------\n\nTITLE: Basic Agent Initialization with Default Memory in PraisonAI (Python)\nDESCRIPTION: This snippet demonstrates creating a basic agent in PraisonAI that automatically maintains conversation history using default memory handling. It initializes an agent with instructions to be a helpful assistant and showcases how the agent remembers past interactions during a conversation.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/course/agents/06-agent-memory.mdx#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent\n\n# Basic agent with default memory handling\nagent = Agent(\n    instructions=\"You are a helpful assistant that remembers our conversations\"\n)\n\n# The conversation history is maintained automatically\nagent.start(\"My name is Alex\")\nagent.continue(\"What's my name?\")# Note: TODO: This Feature yet to be developed  # Agent will remember \"Alex\"\n```\n\n----------------------------------------\n\nTITLE: Python Tool with Dependencies\nDESCRIPTION: This code illustrates how to create a Python tool that depends on external libraries. It uses a try-except block to handle potential ImportError exceptions, ensuring that the tool can gracefully handle missing dependencies. The function takes a dictionary as input and returns a dictionary of processed data, provided the required_library is installed.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/tools.mdx#2025-04-19_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n# Tool with dependencies\ndef advanced_tool(data: Dict) -> Dict:\n    \"\"\"\n    Tool that depends on external libraries\n    \n    Args:\n        data (Dict): Input data\n        \n    Returns:\n        Dict: Processed data\n    \"\"\"\n    try:\n        import required_library\n        # Tool implementation\n        return processed_result\n    except ImportError:\n        raise Exception(\"Required library not installed\")\n```\n\n----------------------------------------\n\nTITLE: Create Parallel Processing Agents and Tasks\nDESCRIPTION: This Python code snippet demonstrates the creation of multiple agents and tasks to be executed in parallel using the PraisonAI Agents package.  It defines agents responsible for collecting the current time, an aggregator agent, and configures asynchronous tasks that use the agents to process time and combine the results. The example sets up the agents, tasks, and a workflow to demonstrate parallel processing and result aggregation.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/parallelisation.mdx#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent, Task, PraisonAIAgents\nfrom datetime import datetime\nimport asyncio\n\ndef process_time():\n    \"\"\"Simulate processing\"\"\"\n    current_time = datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n    print(f\"Processing at: {current_time}\")\n    return f\"Processed at {current_time}\"\n\n# Create parallel processing agents\nagent1 = Agent(\n    name=\"Processor 1\",\n    role=\"Time collector\",\n    goal=\"Get the time and return it\",\n    tools=[process_time]\n)\n\nagent2 = Agent(\n    name=\"Processor 2\",\n    role=\"Time collector\",\n    goal=\"Get the time and return it\",\n    tools=[process_time]\n)\n\nagent3 = Agent(\n    name=\"Processor 3\",\n    role=\"Time collector\",\n    goal=\"Get the time and return it\",\n    tools=[process_time]\n)\n\naggregator = Agent(\n    name=\"Aggregator\",\n    role=\"Result aggregator\",\n    goal=\"Collect all the processed time from all tasks\"\n)\n\n# Create parallel tasks with memory disabled\ntask1 = Task(\n    name=\"process_1\",\n    description=\"Use process_time tool to get the time\",\n    expected_output=\"processed time\",\n    agent=agent1,\n    is_start=True,\n    async_execution=True\n)\n\ntask2 = Task(\n    name=\"process_2\",\n    description=\"Use process_time tool to get the time\",\n    expected_output=\"processed time\",\n    agent=agent2,\n    is_start=True,\n    async_execution=True\n)\n\ntask3 = Task(\n    name=\"process_3\",\n    description=\"Use process_time tool to get the time\",\n    expected_output=\"processed time\",\n    agent=agent3,\n    is_start=True,\n    async_execution=True\n)\n\naggregate_task = Task(\n    name=\"aggregate\",\n    description=\"Collect all the processed time from all tasks\",\n    expected_output=\"Output all the processed time from all tasks and just the time\",\n    agent=aggregator,\n    context=[task1, task2, task3]\n)\n\nasync def main():\n\n    # Create workflow manager\n    workflow = PraisonAIAgents(\n        agents=[agent1, agent2, agent3, aggregator],\n        tasks=[task1, task2, task3, aggregate_task],\n        process=\"workflow\"\n    )\n\n    # Run parallel workflow\n    results = await workflow.astart()\n\n    # Print results\n    print(\"\\nParallel Processing Results:\")\n    for task_id, result in results[\"task_results\"].items():\n        if result:\n            print(f\"Task {task_id}: {result.raw\")\n\n# Run the async main function\nif __name__ == \"__main__\":\n    asyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Creating and Running AI Agents with PraisonAI\nDESCRIPTION: This Python code demonstrates how to initialize and run AI agents using the PraisonAI Agents framework. It includes creating agents and tasks, setting their attributes, and running the agents. The script requires the 'praisonaiagents' package to be installed. Key parameters include agent roles, goals, and task descriptions.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/framework/praisonaiagents.mdx#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent, Task, PraisonAIAgents\n\n# Create agents\nresearcher = Agent(\n    name=\"Researcher\",\n    role=\"Senior Research Analyst\",\n    goal=\"Uncover cutting-edge developments in AI and data science\",\n    backstory=\"\"\"You are an expert at a technology research group, \n    skilled in identifying trends and analyzing complex data.\"\"\",\n    verbose=True,\n    llm=\"gpt-4o\",\n    markdown=True\n)\n\nwriter = Agent(\n    name=\"Writer\",\n    role=\"Tech Content Strategist\",\n    goal=\"Craft compelling content on tech advancements\",\n    backstory=\"\"\"You are a content strategist known for \n    making complex tech topics interesting and easy to understand.\"\"\",\n    llm=\"gpt-4o\",\n    markdown=True\n)\n\n# Create tasks\nresearch_task = Task(\n    description=\"Research the latest developments in AI and data science\",\n    expected_output=\"A comprehensive report on recent AI trends and breakthroughs\",\n    agent=researcher\n)\n\nwriting_task = Task(\n    description=\"Create an engaging blog post about the research findings\",\n    expected_output=\"A well-structured blog post explaining AI developments\",\n    agent=writer,\n    context=[research_task]  # This task depends on research_task output\n)\n\n# Create and run the agents\nagents = PraisonAIAgents(\n    agents=[researcher, writer],\n    tasks=[research_task, writing_task],\n    verbose=True\n)\n\nresult = agents.start()\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Agent Creation and Task Management with PraisonAI in Python\nDESCRIPTION: These Python snippets illustrate how to create agents and define tasks within the PraisonAI framework. Dependencies include the `praisonaiagents` library. Agents require attributes like name, role, and goals, and tasks are defined with descriptions and outputs. The output is the result of the agents’ execution of tasks.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/home.mdx#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent, Task, PraisonAIAgents\n\n# Create an agent\nresearcher = Agent(\n    name=\"Researcher\",\n    role=\"Senior Research Analyst\",\n    goal=\"Uncover cutting-edge developments in AI\",\n    backstory=\"You are an expert at a technology research group\",\n    verbose=True,\n    llm=\"gpt-4o\"\n)\n\n# Define a task\ntask = Task(\n    name=\"research_task\",\n    description=\"Analyze 2024's AI advancements\",\n    expected_output=\"A detailed report\",\n    agent=researcher\n)\n\n# Run the agents\nagents = PraisonAIAgents(\n    agents=[researcher],\n    tasks=[task],\n    verbose=False\n)\n\nresult = agents.start()\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent, Task, PraisonAIAgents\n\n# Create multiple agents\nresearcher = Agent(\n    name=\"Researcher\",\n    role=\"Senior Research Analyst\",\n    goal=\"Uncover cutting-edge developments in AI\",\n    backstory=\"You are an expert at a technology research group\",\n    verbose=True,\n    llm=\"gpt-4o\",\n    markdown=True\n)\n\nwriter = Agent(\n    name=\"Writer\",\n    role=\"Tech Content Strategist\",\n    goal=\"Craft compelling content on tech advancements\",\n    backstory=\"You are a content strategist\",\n    llm=\"gpt-4o\",\n    markdown=True\n)\n\n# Define multiple tasks\ntask1 = Task(\n    name=\"research_task\",\n    description=\"Analyze 2024's AI advancements\",\n    expected_output=\"A detailed report\",\n    agent=researcher\n)\n\ntask2 = Task(\n    name=\"writing_task\",\n    description=\"Create a blog post about AI advancements\",\n    expected_output=\"A blog post\",\n    agent=writer\n)\n\n# Run with hierarchical process\nagents = PraisonAIAgents(\n    agents=[researcher, writer],\n    tasks=[task1, task2],\n    verbose=False,\n    process=\"hierarchical\",\n    manager_llm=\"gpt-4o\"\n)\n\nresult = agents.start()\n```\n\n----------------------------------------\n\nTITLE: Creating Visualization Recommendations Agent with Python\nDESCRIPTION: This snippet showcases the creation of a visualization recommendation agent that advises on best practices for visually representing data based on its characteristics.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/course/agents/17-data-analysis-agents.mdx#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nvisualization_agent = Agent(\n    name=\"VisualizationAdvisor\",\n    instructions=\"\"\"\n    You are a data visualization specialist who helps select the best ways to visually represent data.\n    \n    When recommending visualizations:\n    1. Understand the nature of the data (categorical, numerical, time-series, etc.)\n    2. Consider the key relationships or patterns to highlight\n    3. Recommend the most appropriate chart or graph type\n    4. Explain why your recommendation is effective\n    5. Provide suggestions for layout, color scheme, and labeling\n    \n    Common visualization types to consider:\n    - Line charts (for trends over time)\n    - Bar charts (for comparing categories)\n    - Pie charts (for showing composition, use sparingly)\n    - Scatter plots (for showing relationships between variables)\n    - Heatmaps (for showing patterns in complex data)\n    - Box plots (for showing distributions)\n    \"\"\"\n)\n\n# Use the visualization agent\nviz_recommendations = visualization_agent.start(\n    \"\"\"\n    I have the following data and need visualization recommendations:\n    \n    1. Monthly sales data for the past year\n    2. Customer satisfaction ratings across 5 product categories\n    3. Market share compared to 3 competitors\n    4. Customer age distribution\n    \n    What visualizations would you recommend for each of these datasets and why?\n    \"\"\"\n)\nprint(viz_recommendations)\n```\n\n----------------------------------------\n\nTITLE: Creating Multi-Agent System in JavaScript\nDESCRIPTION: Example code to demonstrate a multi-agent system with agents performing storytelling and summary functions using the PraisonAI framework.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/js/typescript.mdx#2025-04-19_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Agent, PraisonAIAgents } from 'praisonai';\n\nconst storyAgent = new Agent({\n  instructions: \"Generate a very short story (2-3 sentences) about artificial intelligence with emojis.\",\n  name: \"StoryAgent\"\n});\n\nconst summaryAgent = new Agent({\n  instructions: \"Summarize the provided AI story in one sentence with emojis.\",\n  name: \"SummaryAgent\"\n});\n\nconst agents = new PraisonAIAgents({\n  agents: [storyAgent, summaryAgent]\n});\n\nagents.start()\n```\n\n----------------------------------------\n\nTITLE: Creating and Running Single Agent in JavaScript\nDESCRIPTION: Example code to initialize and run a single AI agent using the PraisonAI library. This agent is set up to write creative stories.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/js/typescript.mdx#2025-04-19_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Agent } from 'praisonai';\n\nconst agent = new Agent({ \n  instructions: `You are a creative writer who writes short stories with emojis.`,\n  name: \"StoryWriter\"\n});\n\nagent.start(\"Write a story about a time traveler\")\n```\n\n----------------------------------------\n\nTITLE: Implementing TavilySearch with PraisonAI Agents\nDESCRIPTION: Python implementation showing how to create a search tool function and integrate it with PraisonAI agents for web searching and analysis. The code demonstrates setting up multiple agents for data collection and analysis using TavilySearch.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/external/tavily-search.mdx#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent, PraisonAIAgents\nfrom langchain_community.tools import TavilySearchResults\n\ndef search_tool(query: str):\n    tool = TavilySearchResults(\n        max_results=5,\n        search_depth=\"advanced\",\n        include_answer=True,\n        include_raw_content=True,\n        include_images=True\n    )\n    return tool.run(query)\n\ndata_agent = Agent(instructions=\"I am looking for the top google searches on AI tools of 2025\", tools=[search_tool])\neditor_agent = Agent(instructions=\"Analyze the data and rank the tools based on their popularity\")\n\nagents = PraisonAIAgents(agents=[data_agent, editor_agent])\nagents.start()\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Callback Function\nDESCRIPTION: This code defines an asynchronous callback function that processes and saves the output of a task. The function takes the output as input, processes it using `process_result`, and saves it to a database using `save_to_database`.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/async.mdx#2025-04-19_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nasync def async_callback(output):\n      await process_result(output)\n      await save_to_database(output)\n```\n\n----------------------------------------\n\nTITLE: Configuring PraisonAI Agents in YAML\nDESCRIPTION: This YAML configuration defines a PraisonAI agent for scriptwriting with self-reflection enabled. It specifies the framework, process, topic, role, backstory, goal, tasks, and tools for the agent. It uses the `praisonai` framework and sets up a sequential process.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/selfreflection.mdx#2025-04-19_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nframework: praisonai\nprocess: sequential\ntopic: create movie script about cat in mars\nroles:\n  scriptwriter:\n    backstory: Expert in dialogue and script structure, translating concepts into\n      scripts.\n    goal: Write a movie script about a cat in Mars\n    role: Scriptwriter\n    self_reflect: true\n    min_reflect: 1\n    max_reflect: 2\n    tasks:\n      scriptwriting_task:\n        description: Turn the story concept into a production-ready movie script,\n          including dialogue and scene details.\n        expected_output: Final movie script with dialogue and scene details.\n    tools:\n    - search_tool\n```\n\n----------------------------------------\n\nTITLE: Running PraisonAI in Google Colab\nDESCRIPTION: This code snippet illustrates how to import necessary modules, configure PraisonAI with an agent YAML, set the OpenAI API key, and execute the PraisonAI agent in a Google Colab environment.  It utilizes the `google.colab.userdata` module to securely retrieve the OpenAI API key from Colab secrets or prompts the user to enter it manually if not found.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/developers/googlecolab.mdx#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n\"import os\nimport yaml\nfrom praisonai import PraisonAI\nfrom google.colab import userdata\n\n# Example agent_yaml content\nagent_yaml = \\\"\"\\\nframework: \\\"crewai\\\"\\\ntopic: \\\"Space Exploration\\\"\\\n\nroles:\n  astronomer:\n    role: \\\"Space Researcher\\\"\\\n    goal: \\\"Discover new insights about {topic}\\\"\\\n    backstory: \\\"You are a curious and dedicated astronomer with a passion for unraveling the mysteries of the cosmos.\\\"\\\n    tasks:\n      investigate_exoplanets:\n        description: \\\"Research and compile information about exoplanets discovered in the last decade.\\\"\\\n        expected_output: \\\"A summarized report on exoplanet discoveries, including their size, potential habitability, and distance from Earth.\\\"\\\n\\\"\"\"\n\n# Create a PraisonAI instance with the agent_yaml content\npraisonai = PraisonAI(agent_yaml=agent_yaml)\n\n# Add OPENAI_API_KEY Secrets to Google Colab on the Left Hand Side 🔑 or Enter Manually Below\nos.environ[\\\"OPENAI_API_KEY\\\"] = userdata.get('OPENAI_API_KEY') or \\\"ENTER OPENAI_API_KEY HERE\\\" \n\n# Run PraisonAI\nresult = praisonai.run()\"\n```\n\n----------------------------------------\n\nTITLE: Example Stock Analysis with Finance Agent - Python\nDESCRIPTION: This Python example shows how to instruct the Finance Agent to perform specific tasks related to stock analysis and provide investment recommendations.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/agents/finance.mdx#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nagent.start(\"\"\"\n    1. Get current prices for AAPL and GOOGL\n    2. Retrieve company information\n    3. Analyze 6-month historical data\n    4. Provide investment recommendations\n\"\"\")\n```\n\n----------------------------------------\n\nTITLE: Basic Web Scraping Agent Example in Python\nDESCRIPTION: This Python example demonstrates a basic web scraping agent setup using the `Agent`, `Task`, and `PraisonAIAgents` classes. It creates an agent, defines a task to scrape content from a specific URL, and then runs the agent to perform the scraping operation. It imports necessary modules and sets up a sequential process.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/spider_tools.mdx#2025-04-19_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n```python\nfrom praisonaiagents import Agent, Task, PraisonAIAgents\nfrom praisonaiagents.tools import scrape_page, extract_links, crawl, extract_text\n\n# Create search agent\nagent = Agent(\n    name=\"WebCrawler\",\n    role=\"Web Scraping Specialist\",\n    goal=\"Extract and analyze web content efficiently.\",\n    backstory=\"Expert in web scraping and content extraction.\",\n    tools=[scrape_page, extract_links, crawl, extract_text],\n    self_reflect=False\n)\n\n# Define task\ntask = Task(\n    description=\"Scrape and analyze the content from 'https://example.com'\",\n    expected_output=\"Extracted content with links and text analysis\",\n    agent=agent,\n    name=\"web_scraping\"\n)\n\n# Run agent\nagents = PraisonAIAgents(\n    agents=[agent],\n    tasks=[task],\n    process=\"sequential\"\n)\nagents.start()\n```\n```\n\n----------------------------------------\n\nTITLE: Executing Python Code with PraisonAI Agent\nDESCRIPTION: This Python snippet demonstrates how to set up and start a PraisonAI agent using the Jina Code Interpreter tool to execute a simple Python script that counts the letter 'R' in the word 'strawberry'. It requires importing the praisonaiagents module, along with setting up the necessary tools such as ExecPython. The output will display the count of the letter 'R'.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/external/jina-code-interpreter.mdx#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent, PraisonAIAgents\nfrom langchain_community.tools.riza.command import ExecPython\n\ncoder_agent = Agent(instructions=\"\"\"word = \\\"strawberry\\\"\n                                    count = word.count(\\\"r\\\")\n                                    print(f\\\"There are {count}'R's in the word 'Strawberry'\\\")\"\"\", tools=[ExecPython])\n\nagents = PraisonAIAgents(agents=[coder_agent])\nagents.start()\n```\n\n----------------------------------------\n\nTITLE: Creating and Starting Multiple Agents - JavaScript\nDESCRIPTION: Creates multiple agents, each with distinct instructions, and manages them using the PraisonAIAgents class to perform interconnected tasks.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/js/nodejs.mdx#2025-04-19_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst { Agent, PraisonAIAgents } = require('praisonai');\nconst researchAgent = new Agent({ instructions: 'Research about AI' });\nconst summariseAgent = new Agent({ instructions: 'Summarise research agent's findings' });\nconst agents = new PraisonAIAgents({ agents: [researchAgent, summariseAgent] });\nagents.start();\n```\n\n----------------------------------------\n\nTITLE: Implementing News Retrieval Tools\nDESCRIPTION: Defines three custom tools for news processing: InternetSearchTool for web searches, NewsDBTool for fetching and storing articles, and RetrieveNewsTool for querying stored articles.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/cookbooks/yaml/news_retreival_rag_agents.ipynb#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom google.colab import userdata\n\nimport requests\nimport os\nfrom langchain_community.document_loaders import WebBaseLoader\nfrom langchain.text_splitter import RecursiveCharacterTextSplitter\nfrom langchain_openai import OpenAIEmbeddings\nfrom langchain_community.vectorstores import Chroma\nfrom praisonai_tools import BaseTool\nfrom duckduckgo_search import DDGS\n\n\nclass InternetSearchTool(BaseTool):\n    name: str = \"InternetSearchTool\"\n    description: str = \"Search Internet for relevant information based on a query or latest news\"\n\n    def _run(self, query: str):\n        ddgs = DDGS()\n        results = ddgs.text(keywords=query, region='wt-wt', safesearch='moderate', max_results=5)\n        return results\n\n\nclass NewsDBTool(BaseTool):\n    name: str = \"NewsDBTool\"\n    description: str = \"Fetches and stores news articles based on a specified query in a local database\"\n\n    def _run(self, query: str):\n        NEWSAPI_KEY = userdata.get('NEWSAPI_KEY') or \"ENTER NEWSAPI_KEY HERE\"\n        base_url = \"https://newsapi.org/v2/everything\"\n\n        params = {\n            'q': query,\n            'sortBy': 'publishedAt',\n            'apiKey': NEWSAPI_KEY,\n            'language': 'en',\n            'pageSize': 5,\n        }\n\n        response = requests.get(base_url, params=params)\n        if response.status_code != 200:\n            return \"Failed to retrieve news.\"\n\n        articles = response.json().get('articles', [])\n        if not articles:\n            return \"No articles found.\"\n\n        all_splits = []\n\n        for article in articles:\n            loader = WebBaseLoader(article['url'])\n            docs = loader.load()\n\n            text_splitter = RecursiveCharacterTextSplitter(chunk_size=1000, chunk_overlap=200)\n            splits = text_splitter.split_documents(docs)\n            all_splits.extend(splits)\n\n        if all_splits:\n            embedding_function = OpenAIEmbeddings()\n            vectorstore = Chroma.from_documents(all_splits, embedding=embedding_function, persist_directory=\"./chroma_db\")\n            vectorstore.persist()\n            return \"News articles processed and stored in the database.\"\n        else:\n            return \"No content available for processing.\"\n\n\n\nclass RetrieveNewsTool(BaseTool):\n    name: str = \"RetrieveNewsTool\"\n    description: str = \"Retrieves news articles from the local database using a search query\"\n\n    def _run(self, query: str):\n        embedding_function = OpenAIEmbeddings()\n        vectorstore = Chroma(persist_directory=\"./chroma_db\", embedding_function=embedding_function)\n\n        retriever = vectorstore.similarity_search(query)\n\n        if retriever:\n            return [{\"content\": result.page_content, \"metadata\": result.metadata} for result in retriever]\n        else:\n            return \"No relevant articles found in the database.\"\n```\n\n----------------------------------------\n\nTITLE: Implementing a Web Automation Agent with Puppeteer MCP\nDESCRIPTION: Python code example that creates an AI agent integrated with Puppeteer MCP to perform web automation tasks. This agent uses GPT-4o-mini and can navigate to websites and interact with web elements based on natural language commands.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/mcp/puppeteer.mdx#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent, MCP\nimport os\n\n# Use a single string command with Puppeteer configuration\npuppeteer_agent = Agent(\n    instructions=\"\"\"You are a helpful assistant that can automate web browser interactions.\n    Use the available tools when relevant to perform web automation tasks.\"\"\",\n    llm=\"gpt-4o-mini\",\n    tools=MCP(\"npx -y @modelcontextprotocol/server-puppeteer\")\n)\n\npuppeteer_agent.start(\"Navigate to example.com and take a screenshot\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Stock Price MCP Server in Python\nDESCRIPTION: Complete implementation of a Python MCP server that provides stock price information. Uses yfinance library to fetch real-time stock data and implements a get_stock_price tool that returns formatted price information for a given ticker symbol.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/mcp/custom-python-server.mdx#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport yfinance as yf\nfrom mcp.server.fastmcp import FastMCP\n\nmcp = FastMCP(\"stock_prices\")\n\n@mcp.tool()\nasync def get_stock_price(ticker: str) -> str:\n    \"\"\"Get the current stock price for a given ticker symbol.\n    \n    Args:\n        ticker: Stock ticker symbol (e.g., AAPL, MSFT, GOOG)\n        \n    Returns:\n        Current stock price as a string\n    \"\"\"\n    if not ticker:\n        return \"No ticker provided\"\n    try:\n        stock = yf.Ticker(ticker)\n        info = stock.info\n        current_price = info.get('currentPrice') or info.get('regularMarketPrice')\n        if not current_price:\n            return f\"Could not retrieve price for {ticker}\"\n        return f\"${current_price:.2f}\"\n        \n    except Exception as e:\n        return f\"Error: {str(e)}\"\n\nif __name__ == \"__main__\":\n    mcp.run(transport='stdio')\n```\n\n----------------------------------------\n\nTITLE: Implementing Memory Management Tools with Mem0 and PraisonAI in Python\nDESCRIPTION: A collection of Python classes that extend BaseTool to provide memory management functionality. Includes tools for adding new memories, retrieving all memories, searching specific memories, updating existing memories, and accessing memory history. Each tool is designed to work with the Mem0 system and requires user identification for most operations.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/mem0.mdx#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom mem0 import Memory\nfrom praisonai_tools import BaseTool\n\nclass AddMemoryTool(BaseTool):\n    name: str = \"Add Memory Tool\"\n    description: str = (\"This tool allows storing a new memory with user ID and optional metadata.\\n\"\n                        \"Example:\\n\"\n                        \"   - Input: text='I am working on improving my tennis skills. Suggest some online courses.', user_id='alice', metadata={'category': 'hobbies'}\\n\"\n                        \"   - Output: Memory added with summary 'Improving her tennis skills. Looking for online suggestions.'\")\n\n    def _run(self, text: str, user_id: str, metadata: dict = None):\n        m = Memory()\n        result = m.add(text, user_id=user_id, metadata=metadata)\n        return result\n\nclass GetAllMemoriesTool(BaseTool):\n    name: str = \"Get All Memories Tool\"\n    description: str = (\"This tool retrieves all stored memories.\\n\"\n                        \"Example:\\n\"\n                        \"   - Input: action='get_all'\\n\"\n                        \"   - Output: List of all stored memories.\")\n\n    def _run(self):\n        m = Memory()\n        result = m.get_all()\n        return result\n\nclass SearchMemoryTool(BaseTool):\n    name: str = \"Search Memory Tool\"\n    description: str = (\"This tool searches for specific memories based on a query and user ID.\\n\"\n                        \"Example:\\n\"\n                        \"   - Input: query='What are Alice's hobbies?', user_id='alice'\\n\"\n                        \"   - Output: Search results related to Alice's hobbies.\")\n\n    def _run(self, query: str, user_id: str):\n        m = Memory()\n        result = m.search(query=query, user_id=user_id)\n        return result\n\nclass UpdateMemoryTool(BaseTool):\n    name: str = \"Update Memory Tool\"\n    description: str = (\"This tool updates an existing memory by memory ID and new data.\\n\"\n                        \"Example:\\n\"\n                        \"   - Input: memory_id='cb032b42-0703-4b9c-954d-77c36abdd660', data='Likes to play tennis on weekends'\\n\"\n                        \"   - Output: Memory updated to 'Likes to play tennis on weekends.'\")\n\n    def _run(self, memory_id: str, data: str):\n        m = Memory()\n        result = m.update(memory_id=memory_id, data=data)\n        return result\n\nclass MemoryHistoryTool(BaseTool):\n    name: str = \"Memory History Tool\"\n    description: str = (\"This tool gets the history of changes made to a specific memory by memory ID.\\n\"\n                        \"Example:\\n\"\n                        \"   - Input: memory_id='cb032b42-0703-4b9c-954d-77c36abdd660'\\n\"\n                        \"   - Output: History of the specified memory.\")\n\n    def _run(self, memory_id: str):\n        m = Memory()\n        result = m.history(memory_id=memory_id)\n        return result\n```\n\n----------------------------------------\n\nTITLE: Adding Python Tools to an Agent\nDESCRIPTION: This snippet demonstrates how to integrate multiple Python tools into an agent.  The Agent class is initialized with a name and a list of tools (internet_search_tool, file_processing_tool, and api_integration_tool, assumed to be defined elsewhere). The created Agent instance, named \"MultiTool Agent\", is capable of utilizing the specified tools for its intended tasks.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/tools.mdx#2025-04-19_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n# Multiple tools\nagent = Agent(\n    name=\"MultiTool Agent\",\n    tools=[\n        internet_search_tool,\n        file_processing_tool,\n        api_integration_tool\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Google Calendar API Integration in Python\nDESCRIPTION: A comprehensive Python module that implements Google Calendar API integration with multiple event management functions. Includes OAuth2 authentication, logging configuration, and various calendar operation handlers for checking, adding, listing, updating, and deleting events.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/googlecalendar.mdx#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom google.oauth2.credentials import Credentials\nfrom googleapiclient.discovery import build\nfrom google.auth.transport.requests import Request\nfrom google_auth_oauthlib.flow import Flow\nfrom google_auth_oauthlib.flow import InstalledAppFlow\nimport os\nimport json\nimport webbrowser\nfrom http.server import HTTPServer, BaseHTTPRequestHandler\nfrom urllib.parse import urlparse, parse_qs\nimport threading\nfrom datetime import datetime, timedelta\nimport logging\n\n# Set up logging\nlog_level = os.getenv('LOGLEVEL', 'INFO').upper()\nlogging.basicConfig(level=log_level)\nlogger = logging.getLogger(__name__)\nlogger.setLevel(log_level)\n\n# Set up Google Calendar API\nSCOPES = ['https://www.googleapis.com/auth/calendar']\n\ndef get_calendar_service():\n    logger.debug(\"Getting calendar service\")\n    creds = None\n    token_dir = os.path.join(os.path.expanduser('~'), '.praison')\n    token_path = os.path.join(token_dir, 'token.json')\n    credentials_path = os.path.join(os.getcwd(), 'credentials.json')\n\n    if os.path.exists(token_path):\n        creds = Credentials.from_authorized_user_file(token_path, SCOPES)\n        logger.debug(f\"Credentials loaded from {token_path}\")\n\n    if not creds or not creds.valid:\n        if creds and creds.expired and creds.refresh_token:\n            logger.debug(f\"Refreshing credentials\")\n            creds.refresh(Request())\n        else:\n            logger.debug(f\"Starting new OAuth 2.0 flow\")\n            flow = InstalledAppFlow.from_client_secrets_file(credentials_path, SCOPES)\n            logger.debug(f\"Credentials path: {credentials_path}\")\n            creds = flow.run_local_server(port=8090)\n            logger.debug(f\"Setting up flow from {credentials_path}\")\n\n        os.makedirs(os.path.dirname(token_path), exist_ok=True)\n        logger.debug(f\"Saving credentials to {token_path}\")\n        with open(token_path, 'w') as token:\n            token.write(creds.to_json())\n\n    logger.debug(\"Building calendar service\")\n    return build('calendar', 'v3', credentials=creds)\n\n# ... [rest of the calendar operation functions] ...\n\ntools = [\n    check_calendar,\n    add_calendar_event,\n    list_calendar_events,\n    update_calendar_event,\n    delete_calendar_event,\n]\n```\n\n----------------------------------------\n\nTITLE: Creating a PDF Chat Agent in Python\nDESCRIPTION: Defines a basic `Agent` using the `PraisonAI` framework to engage in Q&A based on a given PDF file. Requires `praisonaiagents` library and an indexed PDF document.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/chat-with-pdf.mdx#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent\n\nagent = Agent(\n    name=\"PDF Chat Agent\",\n    instructions=\"You answer questions based on the provided PDF document.\",\n    knowledge=[\"document.pdf\"], # PDF Indexing\n)\n\nagent.start(\"What is the main topic of this PDF?\") # Chat Query\n```\n\n----------------------------------------\n\nTITLE: Creating Vision Analysis Agent in Python\nDESCRIPTION: Defines a Vision Analysis Agent to analyze images and videos. The agent's tasks include describing landmarks. It utilizes the PraisonAI Agents library.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/multimodal.mdx#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent, Task, PraisonAIAgents\n\n# Create Vision Analysis Agent\nvision_agent = Agent(\n    name=\"VisionAnalyst\",\n    role=\"Computer Vision Specialist\",\n    goal=\"Analyze images and videos to extract meaningful information\",\n    backstory=\"\"\"You are an expert in computer vision and image analysis.\n    You excel at describing images, detecting objects, and understanding visual content.\"\"\",\n    llm=\"gpt-4o-mini\",\n    self_reflect=False\n)\n\n# Create tasks with different media types\ntask = Task(\n    name=\"analyze_landmark\",\n    description=\"Describe this famous landmark and its architectural features.\",\n    expected_output=\"Detailed description of the landmark's architecture and significance\",\n    agent=vision_agent,\n    images=[\"https://upload.wikimedia.org/wikipedia/commons/b/bf/Krakow_-_Kosciol_Mariacki.jpg\"]\n)\n\n# Run the agents\nagents = PraisonAIAgents(\n    agents=[vision_agent],\n    tasks=[task],\n    process=\"sequential\",\n    verbose=True\n)\n\nagents.start()\n```\n\n----------------------------------------\n\nTITLE: Basic Wikipedia Research Agent Implementation\nDESCRIPTION: This code implements a basic Wikipedia research agent using `praisonaiagents`. It creates an agent and a task, then runs the agent to research scientific discoveries. The agent is initialized with a name, role, goal, backstory, and a set of Wikipedia tools.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/wikipedia_tools.mdx#2025-04-19_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent, Task, PraisonAIAgents\nfrom praisonaiagents.tools import wiki_search, wiki_summary, wiki_page, wiki_random, wiki_language\n\n# Create Wikipedia agent\nwiki_agent = Agent(\n    name=\"WikiExpert\",\n    role=\"Research Specialist\",\n    goal=\"Research topics efficiently and accurately.\",\n    backstory=\"Expert in information gathering and analysis.\",\n    tools=[wiki_search, wiki_summary, wiki_page, wiki_random, wiki_language],\n    self_reflect=False\n)\n\n# Define research task\nresearch_task = Task(\n    description=\"Research scientific discoveries and breakthroughs.\",\n    expected_output=\"Detailed research report with references.\",\n    agent=wiki_agent,\n    name=\"science_research\"\n)\n\n# Run agent\nagents = PraisonAIAgents(\n    agents=[wiki_agent],\n    tasks=[research_task],\n    process=\"sequential\"\n)\nagents.start()\n```\n\n----------------------------------------\n\nTITLE: Building a Conversational Support Agent in Python\nDESCRIPTION: Implements a multi-turn conversational support agent capable of maintaining context, asking follow-up questions, and providing comprehensive assistance for a mobile banking app.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/course/agents/18-customer-support-agents.mdx#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nconversational_support = Agent(\n    name=\"ConversationalSupport\",\n    instructions=\"\"\"\n    You are a customer support representative who handles support conversations.\n    \n    When handling support conversations:\n    1. Maintain context throughout the conversation\n    2. Ask follow-up questions when needed\n    3. Verify understanding before providing solutions\n    4. Be patient with users who may be frustrated\n    5. Summarize the conversation and next steps at the end\n    \n    Our product is a mobile banking app with features for:\n    - Account balance checking\n    - Money transfers\n    - Bill payments\n    - Mobile check deposits\n    - Budget tracking\n    \"\"\"\n)\n\n# Start a support conversation\ninitial_response = conversational_support.start(\"I can't find where to deposit checks in the app\")\nprint(\"Initial Response:\", initial_response)\n\n# Continue the conversation\nfollow_up_response = conversational_support.continue(\"I'm using version 2.5 of the app on Android\")\nprint(\"Follow-up Response:\", follow_up_response)\n\n# Further continuation\nresolution_response = conversational_support.continue(\"I found the deposit button now, but it's giving me an error when I try to take a photo\")\nprint(\"Resolution Response:\", resolution_response)\n```\n\n----------------------------------------\n\nTITLE: Visualizing Planning Agent Workflow with Mermaid Diagram\nDESCRIPTION: A flowchart diagram showing the workflow of the Planning Agent, illustrating how it processes a request through web search, options analysis, and plan generation to create an itinerary.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/agents/planning.mdx#2025-04-19_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n    In[Request] --> Search[Web Search]\n    Search --> Analyzer[Options Analyzer]\n    Analyzer --> Generator[Plan Generator]\n    Generator --> Out[Itinerary]\n    \n    style In fill:#8B0000,color:#fff\n    style Search fill:#2E8B57,color:#fff\n    style Analyzer fill:#2E8B57,color:#fff\n    style Generator fill:#2E8B57,color:#fff\n    style Out fill:#8B0000,color:#fff\n```\n\n----------------------------------------\n\nTITLE: Defining and Using Internet Search Tool in Python\nDESCRIPTION: This Python code snippet demonstrates the creation of an internet search tool function and its assignment to a data agent. The tool is designed to handle search queries and is integrated with the agent to perform searches about AI job trends.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/course/agents/12-adding-tools-to-agents.mdx#2025-04-19_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom duckduckgo_search import DDGS\n\ndef internet_search_tool(query: str):\n    results = []\n    ddgs = DDGS()\n    for result in ddgs.text(keywords=query, max_results=5):\n        results.append({\n            \"title\": result.get(\"title\", \"\"),\n            \"url\": result.get(\"href\", \"\"),\n            \"snippet\": result.get(\"body\", \"\")\n        })\n    return results\n\n```\n\nLANGUAGE: python\nCODE:\n```\n    data_agent = Agent(\n        instructions=\"Search about AI job trends in 2025\",\n        tools=[internet_search_tool], # <-- Tool Assignment\n    )\n```\n\n----------------------------------------\n\nTITLE: Advanced XML Processing with Multiple Agents - Python\nDESCRIPTION: This example demonstrates the setup of multiple agents for XML processing and validation. It showcases the definition of distinct tasks for each agent, highlighting the versatility of the PraisonAI framework in managing complex workflows.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/xml_tools.mdx#2025-04-19_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# Create XML processing agent\nprocessor_agent = Agent(\n    name=\"Processor\",\n    role=\"XML Processor\",\n    goal=\"Process XML files systematically.\",\n    tools=[read_xml, write_xml, transform_xml],\n    self_reflect=False\n)\n\n# Create validation agent\nvalidator_agent = Agent(\n    name=\"Validator\",\n    role=\"Data Validator\",\n    goal=\"Validate XML structure and content.\",\n    backstory=\"Expert in data validation and verification.\",\n    tools=[validate_xml, xml_to_dict, dict_to_xml],\n    self_reflect=False\n)\n\n# Define tasks\nprocessing_task = Task(\n    description=\"Process and transform XML configurations.\",\n    agent=processor_agent,\n    name=\"xml_processing\"\n)\n\nvalidation_task = Task(\n    description=\"Validate processed XML data.\",\n    agent=validator_agent,\n    name=\"data_validation\"\n)\n\n# Run agents\nagents = PraisonAIAgents(\n    agents=[processor_agent, validator_agent],\n    tasks=[processing_task, validation_task],\n    process=\"sequential\"\n)\nagents.start()\n```\n\n----------------------------------------\n\nTITLE: Initializing and Running Financial Agents\nDESCRIPTION: Set up and start PraisonAI agents with sequential processing, enabling coordinated financial data retrieval and analysis across multiple agents and tasks.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/yfinance_tools.mdx#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nagents = PraisonAIAgents(\n    agents=[finance_agent],\n    tasks=[finance_task],\n    process=\"sequential\"\n)\nagents.start()\n```\n\n----------------------------------------\n\nTITLE: Creating Airbnb Search Agent in Python\nDESCRIPTION: This Python script creates an AI agent for Airbnb searches using PraisonAI and MCP. It sets up the agent with specific instructions and tools, then initiates a search query.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/mcp/airbnb.mdx#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent, MCP\n\nsearch_agent = Agent(\n    instructions=\"\"\"You help book apartments on Airbnb.\"\"\",\n    llm=\"gpt-4o-mini\",\n    tools=MCP(\"npx -y @openbnb/mcp-server-airbnb --ignore-robots-txt\")\n)\n\nsearch_agent.start(\"I want to book an apartment in Paris for 2 nights. 03/28 - 03/30 for 2 adults\")\n```\n\n----------------------------------------\n\nTITLE: Task-Based Agent Implementation with PraisonAI in TypeScript\nDESCRIPTION: Shows how to set up agents and tasks with specific dependencies using PraisonAI. Tasks are created, with one dependent on the completion of another. 'Agent', 'Task', and 'PraisonAIAgents' are imported as dependencies. Outputs task results after execution.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/js/typescript-async.mdx#2025-04-19_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Agent, Task, PraisonAIAgents } from 'praisonai';\n\nasync function main() {\n    // Create agents first\n    const dietAgent = new Agent({\n        name: \"DietAgent\",\n        role: \"Nutrition Expert\",\n        goal: \"Create healthy and delicious recipes\",\n        backstory: \"You are a certified nutritionist with years of experience in creating balanced meal plans.\",\n        verbose: true,\n        instructions: `You are a professional chef and nutritionist. Create 5 healthy food recipes that are both nutritious and delicious.\nEach recipe should include:\n1. Recipe name\n2. List of ingredients with quantities\n3. Step-by-step cooking instructions\n4. Nutritional information\n5. Health benefits\n\nFormat your response in markdown.`\n    });\n\n    const blogAgent = new Agent({\n        name: \"BlogAgent\",\n        role: \"Food Blogger\",\n        goal: \"Write engaging blog posts about food and recipes\",\n        backstory: \"You are a successful food blogger known for your ability to make recipes sound delicious and approachable.\",\n        verbose: true,\n        instructions: `You are a food and health blogger. Write an engaging blog post about the provided recipes.\nThe blog post should:\n1. Have an engaging title\n2. Include an introduction about healthy eating`\n    });\n\n    // Create tasks\n    const createRecipesTask = new Task({\n        name: \"Create Recipes\",\n        description: \"Create 5 healthy and delicious recipes\",\n        agent: dietAgent\n    });\n\n    const writeBlogTask = new Task({\n        name: \"Write Blog\",\n        description: \"Write a blog post about the recipes\",\n        agent: blogAgent,\n        dependencies: [createRecipesTask]  // This task depends on the recipes being created first\n    });\n\n    // Run the tasks\n    const praisonAI = new PraisonAIAgents({\n        tasks: [createRecipesTask, writeBlogTask],\n        verbose: true\n    });\n\n    try {\n        console.log('Starting task-based example...');\n        const results = await praisonAI.start();\n        console.log('\\nFinal Results:', results);\n    } catch (error) {\n        console.error('Error:', error);\n    }\n}\n\nmain();\n```\n\n----------------------------------------\n\nTITLE: Defining Analysis Task\nDESCRIPTION: Create a task definition for data analysis with specific objectives and expected outputs.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/pandas_tools.mdx#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nanalysis_task = Task(\n    description=\"Analyze sales data to identify trends and patterns.\",\n    expected_output=\"Statistical summary and key insights.\",\n    agent=data_agent,\n    name=\"sales_analysis\"\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Code Analysis Script in Python\nDESCRIPTION: This snippet presents a Python script that defines the necessary classes for code metrics reporting, configures an AI agent for code analysis, and defines a function to analyze code from a directory or GitHub URL. The agent provides a detailed structured report on code quality and recommendations.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/examples/code-analysis.mdx#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent, Task, PraisonAIAgents\\nfrom pydantic import BaseModel\\nfrom typing import List, Dict\\nfrom gitingest import ingest\\n\\nclass CodeMetrics(BaseModel):\\n    category: str\\n    score: int\\n    findings: List[str]\\n\\nclass CodeAnalysisReport(BaseModel):\\n    overall_quality: int\\n    code_metrics: List[CodeMetrics]\\n    architecture_score: int\\n    maintainability_score: int\\n    performance_score: int\\n    security_score: int\\n    test_coverage: int\\n    key_strengths: List[str]\\n    improvement_areas: List[str]\\n    tech_stack: List[str]\\n    recommendations: List[str]\\n    complexity_metrics: Dict[str, int]\\n    best_practices: List[Dict[str, str]]\\n    potential_risks: List[str]\\n    documentation_quality: int\\n\\ncode_analyzer = Agent(\\n    role=\"Code Analysis Expert\",\\n    goal=\"Provide comprehensive code evaluation and recommendations\",\\n    backstory=\"\"\"Expert code analyst specializing in architecture review, \\n    best practices, and technical debt assessment.\"\"\",\\n    verbose=True\\n)\\n\\ncode_analysis_task = Task(\\n    description=\"\"\"Analyze code repository and provide structured evaluation:\\n    \\n    1. Overall Quality (0-100)\\n    2. Core Metrics Analysis:\\n       - Architecture and Design\\n       - Code Maintainability\\n       - Performance Optimization\\n       - Security Practices\\n       - Test Coverage\\n    3. Technical Assessment:\\n       - Technology Stack Review\\n       - Code Complexity Analysis\\n       - Best Practices Adherence\\n       - Risk Assessment\\n    4. Recommendations:\\n       - Key Improvements\\n       - Architecture Suggestions\\n       - Security Enhancements\"\"\",\\n    expected_output=\"Detailed code analysis report with metrics and recommendations\",\\n    agent=code_analyzer,\\n    output_pydantic=CodeAnalysisReport\\n)\\n\\ndef analyze_code(code_source: str) -> CodeAnalysisReport:\\n    \"\"\"Analyze code from directory path or GitHub URL\"\"\"\\n    # Ingest code content\\n    summary, tree, content = ingest(code_source)\\n    \\n    # Concatenate context into structured format\\n    context_text = f\"\"\"\\n    CODE REPOSITORY ANALYSIS\\n    =======================\\n    \\n    SUMMARY\\n    -------\\n    {summary}\\n    \\n    REPOSITORY STRUCTURE\\n    -------------------\\n    {tree}\\n    \\n    SOURCE CODE\\n    -----------\\n    {content}\\n    \"\"\"\\n    # Initialize and run analysis\\n    agents = PraisonAIAgents(\\n        agents=[code_analyzer],\\n        tasks=[code_analysis_task]\\n    )\\n    \\n    return agents.start(context_text)\\n\\nif __name__ == \"__main__\":\\n    # Example usage\\n    code_source = \"https://github.com/openai/openai-python/tree/main/src/openai/cli/_api/chat\"  # GitHub URL or local directory\\n    result = analyze_code(code_source)\\n    print(result)\n```\n\n----------------------------------------\n\nTITLE: Creating Shopping Assistant Script\nDESCRIPTION: Python script demonstrating how to create and configure a shopping assistant agent with DuckDuckGo integration for price comparison.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/agents/shopping.mdx#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent, Tools\nfrom praisonaiagents.tools import duckduckgo\n\n# Create Shopping Agent\nshopping_agent = Agent(\n    name=\"ShoppingAssistant\",\n    role=\"Shopping Specialist\",\n    goal=\"Find the best prices and deals across stores\",\n    instructions=\"You are a Shopping Agent\",\n    tools=[duckduckgo]\n)\n\n# Search for product prices\nresponse = shopping_agent.start(\n    \"I want to buy iPhone 16 Pro Max, check 5 stores and give me price in table\"\n)\n\n# Save price comparison\nwith open('price_comparison.md', 'w') as f:\n    f.write(response)\n```\n\n----------------------------------------\n\nTITLE: Creating a Wikipedia Search Tool in Python\nDESCRIPTION: Defines a custom WikipediaSearchTool class that inherits from BaseTool in praisonai_tools. This tool uses the WikipediaAPIWrapper from langchain_community to search Wikipedia and retrieve information based on a query.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/cookbooks/yaml/wikipedia_search_analysis_agents.ipynb#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# ToDo: Model unable to retreive Wikipidea Python Package\nfrom langchain_community.utilities import WikipediaAPIWrapper\nfrom praisonai_tools import BaseTool\n\nclass WikipediaSearchTool(BaseTool):\n    name: str = \"WikipediaSearchTool\"\n    description: str = \"Search Wikipedia for relevant information based on a query.\"\n\n    def _run(self, query: str):\n        api_wrapper = WikipediaAPIWrapper(top_k_results=4, doc_content_chars_max=100)\n        results = api_wrapper.load(query=query)\n        return results\n```\n\n----------------------------------------\n\nTITLE: JSON Processing Pipeline in Python\nDESCRIPTION: This code demonstrates a JSON processing pipeline using PraisonAI Agents. It creates a processing agent and a validation agent. It then defines tasks for processing JSON files and validating the processed data. Finally, it runs the workflow with both agents and tasks using the PraisonAIAgents framework.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/json_tools.mdx#2025-04-19_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n# Processing agent\nprocessor = Agent(\n    name=\"Processor\",\n    role=\"JSON Processor\",\n    tools=[read_json, write_json, merge_json, validate_json, analyze_json, transform_json]\n)\n\n# Validation agent\nvalidator = Agent(\n    name=\"Validator\",\n    role=\"Data Validator\"\n)\n\n# Define tasks\nprocess_task = Task(\n    description=\"Process JSON files\",\n    agent=processor\n)\n\nvalidate_task = Task(\n    description=\"Validate processed data\",\n    agent=validator\n)\n\n# Run workflow\nagents = PraisonAIAgents(\n    agents=[processor, validator],\n    tasks=[process_task, validate_task]\n)\n```\n\n----------------------------------------\n\nTITLE: Creating and Starting a Single Agent - JavaScript\nDESCRIPTION: Creates an instance of a single AI agent that is designed to act as a helpful assistant and starts its operation with a specific task.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/js/nodejs.mdx#2025-04-19_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst { Agent } = require('praisonai');\nconst agent = new Agent({ instructions: 'You are a helpful AI assistant' });\nagents.start('Write a movie script about a robot in Mars');\n```\n\n----------------------------------------\n\nTITLE: Creating a Technical Troubleshooting Agent in Python\nDESCRIPTION: Develops a specialized technical support agent designed to help users diagnose and resolve various software and application issues through systematic troubleshooting approaches.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/course/agents/18-customer-support-agents.mdx#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ntroubleshooting_agent = Agent(\n    name=\"TroubleshootingAgent\",\n    instructions=\"\"\"\n    You are a technical support specialist who helps users troubleshoot problems.\n    \n    When troubleshooting:\n    1. Ask clarifying questions to understand the exact issue\n    2. Identify the most likely causes of the problem\n    3. Provide step-by-step solutions, starting with the simplest fixes\n    4. Explain what each step does and why it might help\n    5. Confirm if the issue is resolved or suggest next steps\n    \n    Common troubleshooting areas:\n    - Login and account access issues\n    - App installation and updates\n    - Feature functionality problems\n    - Data synchronization\n    - Performance issues\n    \"\"\"\n)\n\n# Use the troubleshooting agent\ntroublehooting_response = troubleshooting_agent.start(\"The app keeps crashing when I try to open it on my iPhone\")\nprint(troubleshooting_response)\n```\n\n----------------------------------------\n\nTITLE: Initializing JSON Agent in Python\nDESCRIPTION: This code snippet initializes a PraisonAI Agent with a set of tools designed for JSON processing. The tools include functions for reading, writing, merging, validating, analyzing, and transforming JSON data. This agent can then be used to perform various JSON-related tasks.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/json_tools.mdx#2025-04-19_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nAgent(tools=[read_json, write_json, merge_json, validate_json, analyze_json, transform_json])\n```\n\n----------------------------------------\n\nTITLE: Creating a Task Management Assistant with PraisonAI\nDESCRIPTION: This code snippet shows how to create a task management assistant using the `Agent` class from the `praisonaiagents` library.  The agent is initialized with instructions tailored for task management and is used to organize a list of tasks provided by the user.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/course/agents/19-personal-assistant-agents.mdx#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ntask_agent = Agent(\n    name=\"TaskManager\",\n    instructions=\"\"\"\n    You are a task management assistant who helps users organize and prioritize tasks.\n    \n    When managing tasks:\n    1. Help identify and clarify tasks\n    2. Assist with prioritization\n    3. Break down complex tasks into manageable steps\n    4. Track deadlines and progress\n    5. Provide reminders and follow-ups\n    \n    For each task, collect:\n    - Task description\n    - Priority (High, Medium, Low)\n    - Deadline (if applicable)\n    - Dependencies (other tasks that must be completed first)\n    - Estimated time required\n    \"\"\",\n    llm=\"gpt-4o-mini\"  # Using the specified model\n)\n\n# Use the task management agent\ntask_response = task_agent.start(\n    \"\"\"\n    I need help organizing these tasks for the week:\n    \n    - Prepare quarterly report (due Friday)\n    - Meet with client about new project (Wednesday, 2 PM)\n    - Review team's project proposals\n    - Finish budget planning for next quarter\n    - Send feedback on marketing materials\n    \"\"\"\n)\nprint(task_response)\n```\n\n----------------------------------------\n\nTITLE: Simple CrewAI Playbook Example in YAML\nDESCRIPTION: This example demonstrates a basic CrewAI agent playbook using YAML. It defines a single role, 'screenwriter', with a backstory, goal, role, and a scriptwriting task. The task includes a description and the expected output.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/developers/agents-playbook.mdx#2025-04-19_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml\nframework: crewai\ntopic: Artificial Intelligence\nroles:\n  screenwriter:\n    backstory: 'Skilled in crafting scripts with engaging dialogue about {topic}.'\n    goal: Create scripts from concepts.\n    role: Screenwriter\n    tasks:\n      scriptwriting_task:\n        description: 'Develop scripts with compelling characters and dialogue about {topic}.'\n        expected_output: 'Complete script ready for production.'\n```\n```\n\n----------------------------------------\n\nTITLE: PraisonAI Agents Callback Implementation\nDESCRIPTION: This Python code demonstrates how to register synchronous and asynchronous callbacks to monitor agent interactions. It includes creating an agent, a task, and starting the PraisonAIAgents system.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/callbacks.mdx#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n\"from praisonaiagents import (\n    register_display_callback,\n    Agent, \n    Task, \n    PraisonAIAgents\n)\n\ndef simple_callback(message=None, response=None, **kwargs):\n    print(f\\\"Received message: {message}\\\")\n    print(f\\\"Got response: {response}\\\")\n\n# Register as synchronous callback\nregister_display_callback('interaction', simple_callback, is_async=False)\n\n# For async callbacks\nasync def async_simple_callback(message=None, response=None, **kwargs):\n    await asyncio.sleep(0)  # Non-blocking pause\n    print(f\\\"Received message: {message}\\\")\n    print(f\\\"Got response: {response}\\\")\n\n# Register as async callback\nregister_display_callback('interaction', async_simple_callback, is_async=True)\n\n# Create an agent\nagent = Agent(\n    name=\\\"MyAgent\\\",\n    role=\\\"Assistant\\\",\n    goal=\\\"Help with tasks\\\",\n    backstory=\\\"I am a helpful assistant\\\",\n    verbose=True  # Enable verbose mode to see callbacks in action\n)\n\n# Create a task\ntask = Task(\n    name=\\\"simple_task\\\",\n    description=\\\"Say hello\\\",\n    agent=agent,\n    expected_output=\\\"A greeting\\\"\n)\n\n# Run the agent\nagents = PraisonAIAgents(\n    agents=[agent],\n    tasks=[task]\n)\nagents.start()\"\n```\n\n----------------------------------------\n\nTITLE: Python Configuration with PraisonAI Agents\nDESCRIPTION: Illustrates the setup and configuration of generator and evaluator agents along with tasks for a feedback loop in Python using PraisonAI.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/evaluator-optimiser.mdx#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# Create a generator agent\ngenerator = Agent(\n    name=\"Generator\",\n    role=\"Solution generator\",\n    goal=\"Generate and improve solutions\",\n    instructions=\"Step-by-step instructions for generation\",\n    verbose=True  # Enable detailed logging\n)\n\n# Create an evaluator agent\nevaluator = Agent(\n    name=\"Evaluator\",\n    role=\"Solution evaluator\",\n    goal=\"Evaluate and provide feedback\",\n    instructions=\"Evaluation criteria and feedback format\"\n)\n\n# Create tasks with feedback loop\ngenerate_task = Task(\n    name=\"generate\",\n    description=\"Generate solution\",\n    agent=generator,\n    is_start=True,\n    task_type=\"decision\",\n    next_tasks=[\"evaluate\"]\n)\n\nevaluate_task = Task(\n    name=\"evaluate\",\n    description=\"Evaluate solution\",\n    agent=evaluator,\n    context=[generate_task],\n    task_type=\"decision\",\n    condition={\n        \"more\": [\"generate\"],  # Continue optimization\n        \"done\": [\"\"]  # Exit when complete\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: TypeScript Implementation of AI Agents\nDESCRIPTION: Creating story generation and summarization agents using PraisonAI in TypeScript with type safety.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/quickstart.mdx#2025-04-19_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Agent, PraisonAIAgents } from 'praisonai';\n\nconst storyAgent = new Agent({\n  instructions: \"Generate a very short story (2-3 sentences) about artificial intelligence with emojis.\",\n  name: \"StoryAgent\"\n});\n\nconst summaryAgent = new Agent({\n  instructions: \"Summarize the provided AI story in one sentence with emojis.\",\n  name: \"SummaryAgent\"\n});\n\nconst agents = new PraisonAIAgents({\n  agents: [storyAgent, summaryAgent]\n});\n\nagents.start()\n```\n\n----------------------------------------\n\nTITLE: Initializing and Running PraisonAI Script Generation\nDESCRIPTION: Main execution script that sets up the PraisonAI instance with the defined YAML configuration and tools, configures OpenAI API credentials, and runs the script generation process.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/cookbooks/yaml/business_product_launch_agents.ipynb#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom praisonai import PraisonAI\nfrom google.colab import userdata\n\n# Create a PraisonAI instance with the agent_yaml content\npraisonai = PraisonAI(agent_yaml=agent_yaml, tools=[InternetSearchTool, ScrapeWebsiteTool]) # Add InstagramSearchTool once scripted\n\n# Add OPENAI_API_KEY Secrets to Google Colab on the Left Hand Side 🔑 or Enter Manually Below\nos.environ[\"OPENAI_API_KEY\"] = userdata.get('OPENAI_API_KEY') or \"ENTER OPENAI_API_KEY HERE\"\nos.environ[\"OPENAI_MODEL_NAME\"] = \"gpt-4o-mini\"\n\n# Run PraisonAI\nresult = praisonai.run()\n\n# Print the result\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Orchestrator Worker Flowchart\nDESCRIPTION: This Mermaid code defines a flowchart representing the orchestrator-worker pattern. It shows a central router LLM distributing tasks to multiple worker LLMs, and a synthesizer combining their outputs.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/orchestrator-worker.mdx#2025-04-19_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\n```mermaid\nflowchart LR\n    In[In] --> Router[LLM Call Router]\n    Router --> LLM1[LLM Call 1]\n    Router --> LLM2[LLM Call 2]\n    Router --> LLM3[LLM Call 3]\n    LLM1 --> Synthesizer[Synthesizer]\n    LLM2 --> Synthesizer\n    LLM3 --> Synthesizer\n    Synthesizer --> Out[Out]\n    \n    style In fill:#8B0000,color:#fff\n    style Router fill:#2E8B57,color:#fff\n    style LLM1 fill:#2E8B57,color:#fff\n    style LLM2 fill:#2E8B57,color:#fff\n    style LLM3 fill:#2E8B57,color:#fff\n    style Synthesizer fill:#2E8B57,color:#fff\n    style Out fill:#8B0000,color:#fff\n```\n```\n\n----------------------------------------\n\nTITLE: Hierarchical Process Configuration in PraisonAI\nDESCRIPTION: This Python code configures a hierarchical process in PraisonAI using `PraisonAIAgents`. It defines a manager agent and worker agents to coordinate tasks, setting the `process` parameter to \"hierarchical\" and specifying the `manager_llm` to use for the manager agent.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/concepts/process.mdx#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nagents = PraisonAIAgents(\n    agents=[manager_agent, worker_agent1, worker_agent2],\n    tasks=[task1, task2],\n    process=\"hierarchical\",\n    manager_llm=\"gpt-4o\"\n)\n```\n\n----------------------------------------\n\nTITLE: Multi-Agent Coordination Example\nDESCRIPTION: This snippet shows how to create a system of multiple agents that collaborate to create a story and provide a summary of it. It includes error handling for robustness.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/js/js.mdx#2025-04-19_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst { PraisonAIAgents, Agent } = require('praisonai');\n\n// Create a story agent and a summary agent\nconst storyAgent = new Agent({\n  instructions: \"You are a creative storyteller. Create engaging stories.\",\n  name: \"Storyteller\"\n});\n\nconst summaryAgent = new Agent({\n  instructions: \"You summarize stories into brief, engaging summaries.\",\n  name: \"Summarizer\"\n});\n\n// Create multi-agent system\nconst agents = new PraisonAIAgents({\n  agents: [storyAgent, summaryAgent],\n  tasks: [\n    \"Create a short story about a magical forest\",\n    \"Summarize the story in 2 sentences\"\n  ]\n});\n\n// Run the agents\nagents.start()\n  .then(responses => {\n    console.log('\\nStory:');\n    console.log(responses[0]);\n    console.log('\\nSummary:');\n    console.log(responses[1]);\n  })\n  .catch(error => console.error('Error:', error));\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Markdown Agent in Python\nDESCRIPTION: Python script demonstrating how to create a Markdown Agent, generate content, and save it to a file. This example shows the basic setup and usage of the agent.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/agents/markdown.mdx#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent\n\n# Create Markdown Agent\nmarkdown_agent = Agent(\n    name=\"MarkdownWriter\",\n    role=\"Markdown Content Specialist\",\n    goal=\"Generate well-formatted content in Markdown syntax\",\n    instructions=\"You are a Markdown Agent, output in markdown format\",\n    llm=\"gpt-4o-mini\",\n    self_reflect=False\n)\n\n# Generate content\nresponse = markdown_agent.start(\n    \"Write a blog post about artificial intelligence\"\n)\n\n# Save to file\nwith open('blog_post.md', 'w') as f:\n    f.write(response)\n```\n\n----------------------------------------\n\nTITLE: Implementing Gradio UI for Airbnb Search in Python\nDESCRIPTION: This Python script creates a Gradio interface for the Airbnb search agent, allowing users to input queries through a web UI. It includes the agent setup, search function, and Gradio UI configuration.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/mcp/airbnb.mdx#2025-04-19_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent, MCP\nimport gradio as gr\n\ndef search_airbnb(query):\n    agent = Agent(\n        instructions=\"You help book apartments on Airbnb.\",\n        llm=\"gpt-4o-mini\",\n        tools=MCP(\"npx -y @openbnb/mcp-server-airbnb --ignore-robots-txt\")\n    )\n    result = agent.start(query)\n    return f\"## Airbnb Search Results\\n\\n{result}\"\n\ndemo = gr.Interface(\n    fn=search_airbnb,\n    inputs=gr.Textbox(placeholder=\"I want to book an apartment in Paris for 2 nights...\"),\n    outputs=gr.Markdown(),\n    title=\"Airbnb Booking Assistant\",\n    description=\"Enter your booking requirements below:\"\n)\n\nif __name__ == \"__main__\":\n    demo.launch()\n```\n\n----------------------------------------\n\nTITLE: Creating Data IO and Analysis Agents\nDESCRIPTION: This snippet defines two agents: `DataIO` for handling data import/export and `Analyzer` for performing complex data analysis. Each agent is configured with specific tools relevant to their role. The `self_reflect` parameter is set to `False` for both agents.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/pandas_tools.mdx#2025-04-19_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n# Create data import/export agent\nio_agent = Agent(\n    name=\"DataIO\",\n    role=\"Data IO Specialist\",\n    goal=\"Handle data import and export operations.\",\n    tools=[read_csv, read_excel, write_csv, write_excel],\n    self_reflect=False\n)\n\n# Create analysis agent\nanalysis_agent = Agent(\n    name=\"Analyzer\",\n    role=\"Data Analysis Specialist\",\n    goal=\"Perform complex data analysis.\",\n    tools=[filter_data, get_summary, group_by, pivot_table],\n    self_reflect=False\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Image-to-Text Agent and Tasks\nDESCRIPTION: Python script demonstrating how to create and configure an Image-to-Text agent with extraction and description tasks using PraisonAI Agents.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/agents/image-to-text.mdx#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent, Task, PraisonAIAgents\n\n# Create Image-to-Text Agent\nimage_text_agent = Agent(\n    name=\"ImageTextConverter\",\n    role=\"Image Text Extraction Specialist\",\n    goal=\"Convert image content to textual descriptions and extract text\",\n    backstory=\"\"\"You are an expert in OCR and image understanding.\n    You excel at extracting text from images and generating detailed descriptions.\"\"\",\n    llm=\"gpt-4o-mini\",\n    self_reflect=False\n)\n\n# Create text extraction task\nextraction_task = Task(\n    name=\"extract_text\",\n    description=\"Extract all text from this image and describe its layout.\",\n    expected_output=\"Extracted text and layout description\",\n    agent=image_text_agent,\n    images=[\"document.jpg\"]\n)\n\n# Create description task\ndescription_task = Task(\n    name=\"generate_description\",\n    description=\"Generate a detailed description of the image content.\",\n    expected_output=\"Comprehensive description of visual elements\",\n    agent=image_text_agent,\n    images=[\"scene.jpg\"]\n)\n\n# Create PraisonAIAgents instance\nagents = PraisonAIAgents(\n    agents=[image_text_agent],\n    tasks=[extraction_task, description_task],\n    process=\"sequential\",\n    verbose=1\n)\n\n# Run analysis\nagents.start()\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Agents with Tool Usage - Python\nDESCRIPTION: This code illustrates how to create multiple agents in the PraisonAI framework, with one agent performing a search and another writing a blog article based on the search results.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/tools.mdx#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nsearch_agent = Agent(\n    instructions=\"Search about AI job trends in 2025\",\n    tools=[internet_search_tool] # <--- Tool Assignment\n)\n\nblog_agent = Agent(\n    instructions=\"Write a blog article based on the previous agent's search results.\"\n)\n\n# 3. Start Agents\nagents = PraisonAIAgents(agents=[search_agent, blog_agent])\nagents.start()\n```\n\n----------------------------------------\n\nTITLE: Initializing and Running PraisonAI with Job Hunt Agents\nDESCRIPTION: Sets up the PraisonAI instance using the agent YAML configuration and JobSearchTool, configures the OpenAI API key from Google Colab secrets, and runs the system. The model is set to gpt-4o-mini for executing the agent tasks.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/cookbooks/yaml/job_hunt_agents.ipynb#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom praisonai import PraisonAI\nfrom google.colab import userdata\n\n# Create a PraisonAI instance with the agent_yaml content\npraisonai = PraisonAI(agent_yaml=agent_yaml, tools=[JobSearchTool])\n\n# Add OPENAI_API_KEY Secrets to Google Colab on the Left Hand Side 🔑 or Enter Manually Below\nos.environ[\"OPENAI_API_KEY\"] = userdata.get('OPENAI_API_KEY') or \"ENTER OPENAI_API_KEY HERE\"\nos.environ[\"OPENAI_MODEL_NAME\"] = \"gpt-4o-mini\"\n\n# Run PraisonAI\nresult = praisonai.run()\n\n# Print the result\nprint(result) # 1/10\n```\n\n----------------------------------------\n\nTITLE: YAML Configuration for Multi-Agent Development - YAML\nDESCRIPTION: This YAML configuration lays out a multi-agent setup where separate roles for writing and executing Python code are configured, along with their respective tasks.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/codeagent.mdx#2025-04-19_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nframework: praisonai\nprocess: sequential\ntopic: develop and execute Python code\nroles:\n  writer:\n    backstory: Expert Python developer specializing in code writing.\n    goal: Write efficient Python code\n    role: Code Writer\n    tasks:\n      writing_task:\n        description: Write a Python script for data analysis.\n        expected_output: Complete Python script.\n\n  executor:\n    backstory: Expert in code execution and testing.\n    goal: Execute and validate Python code\n    role: Code Executor\n    tools:\n      - code_interpreter\n    tasks:\n      execution_task:\n        description: Execute and validate the Python script.\n        expected_output: Execution results and validation.\n```\n\n----------------------------------------\n\nTITLE: Creating and Running Task-Based Agents - TypeScript\nDESCRIPTION: Sets up agents for specific tasks involving recipe creation and blogging, highlighting the chaining of tasks and output formatting.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/js/nodejs.mdx#2025-04-19_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Agent, PraisonAIAgents } from 'praisonai';\nconst recipeAgent = new Agent({ instructions: `You are a professional chef and nutritionist. Create 5 healthy food recipes that are both nutritious and delicious. Each recipe should include: 1. Recipe name 2. List of ingredients with quantities 3. Step-by-step cooking instructions 4. Nutritional information 5. Health benefits Format your response in markdown.`, name: 'RecipeAgent', verbose: true });\nconst blogAgent = new Agent({ instructions: `You are a food and health blogger. Write an engaging blog post about the provided recipes. The blog post should: 1. Have an engaging title 2. Include an introduction about healthy eating 3. Discuss each recipe and its unique health benefits 4. Include tips for meal planning and preparation 5. End with a conclusion encouraging healthy eating habits Here are the recipes to write about: {previous_result} Format your response in markdown.`, name: 'BlogAgent', verbose: true });\nconst agents = new PraisonAIAgents({ agents: [recipeAgent, blogAgent], tasks: ['Create 5 healthy and delicious recipes', 'Write a blog post about the recipes'], verbose: true });\nagents.start()\n  .then(results => {\n    console.log('\\nFinal Results:');\n    console.log('\\nRecipe Task Results:');\n    console.log(results[0]);\n    console.log('\\nBlog Task Results:');\n    console.log(results[1]);\n  })\n  .catch(error => {\n    console.error('Error:', error);\n  });\n```\n\n----------------------------------------\n\nTITLE: Interaction Display Function - Python\nDESCRIPTION: Function to display interaction between user and agent with options for markdown formatting and generation timing.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/api/praisonaiagents/index.mdx#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndisplay_interaction(message, response, markdown=True, generation_time=None, console=None)\n```\n\n----------------------------------------\n\nTITLE: Resource Management with Async Context Managers in PraisonAI\nDESCRIPTION: This snippet exemplifies resource management using async context managers in PraisonAI, specifically with `aiohttp.ClientSession`. The `async with` statement ensures that resources are properly allocated and released, even in case of exceptions, automatically managing the client session.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/concepts/tools.mdx#2025-04-19_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nasync with aiohttp.ClientSession() as session:\n    # Resource automatically managed\n    await process_data(session)\n```\n\n----------------------------------------\n\nTITLE: Assigning the Internet Search Tool to an Agent in Python\nDESCRIPTION: This snippet shows how to create an `Agent` object using the `praisonaiagents` library and assign the `internet_search_tool` to it. The agent is configured with a name, role, goal, and backstory. The `tools` parameter is used to specify the list of tools the agent can use.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/concepts/tools.mdx#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n    data_agent = Agent(\n        name=\"DataCollector\",\n        role=\"Search Specialist\",\n        goal=\"Perform internet searches to collect relevant information.\",\n        backstory=\"Expert in finding and organising internet data.\",\n        tools=[internet_search_tool], ## Add the tool to the agent i.e the function name\n    )\n```\n\n----------------------------------------\n\nTITLE: Defining Agent Roles and Tasks in YAML Configuration\nDESCRIPTION: Creates a YAML configuration string that defines the CrewAI framework structure with three roles: Data Collector, Data Analyst, and Report Preparer. Each role has specific goals, tasks, and tool access for researching Nvidia's growth.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/cookbooks/yaml/wikipedia_search_analysis_agents.ipynb#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nagent_yaml = \"\"\"\nframework: \"crewai\"\ntopic: \"research about Nvidia growth\"\nroles:\n  data_collector:\n    role: \"Data Collector\"\n    backstory: \"An experienced researcher with the ability to efficiently collect and organize vast amounts of data.\"\n    goal: \"Gather information on Nvidia's growth by providing the Ticket Symbol to YahooFinanceNewsTool\"\n    tasks:\n      data_collection_task:\n        description: \"Collect data on Nvidia's growth from various sources such as financial reports, news articles, and company announcements.\"\n        expected_output: \"A comprehensive document detailing data points on Nvidia's growth over the years.\"\n    tools:\n      - \"WikipediaSearchTool\"\n  data_analyst:\n    role: \"Data Analyst\"\n    backstory: \"Specializes in extracting insights from large datasets, proficient in quantitative and qualitative analysis.\"\n    goal: \"Analyze the collected data to identify trends and patterns\"\n    tasks:\n      data_analysis_task:\n        description: \"Analyze the collected data to identify key trends and patterns in Nvidia's growth.\"\n        expected_output: \"An analytical report summarizing trends, patterns, and key growth metrics of Nvidia.\"\n    tools: []\n  report_preparer:\n    role: \"Report Preparer\"\n    backstory: \"Experienced in creating detailed reports and presentations, turning analytical data into actionable insights.\"\n    goal: \"Generate a final report on Nvidia's growth\"\n    tasks:\n      report_preparation_task:\n        description: \"Create a detailed report based on the analysis, highlighting Nvidia's growth trajectory.\"\n        expected_output: \"A polished, comprehensive report summarizing Nvidia's growth with visual aids and key insights.\"\n    tools: []\ndependencies: []\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Run PraisonAI Agent\nDESCRIPTION: This code initializes and starts the YAML processing agent using the `PraisonAIAgents` class. It sets up the environment with the defined agent and task, specifies sequential processing, and initiates the agent's execution.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/yaml_tools.mdx#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nagents = PraisonAIAgents(\n        agents=[yaml_agent],\n        tasks=[yaml_task],\n        process=\"sequential\"\n    )\n    agents.start()\n```\n\n----------------------------------------\n\nTITLE: Implementing Task-Based Agents with Dependencies in PraisonAI\nDESCRIPTION: Example of a more complex system where agents are assigned specific tasks with dependencies between them. Shows how to create a workflow where one agent creates recipes and another writes a blog post about them.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/src/praisonai-ts/README.md#2025-04-19_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Agent, Task, PraisonAIAgents } from 'praisonai';\n\nasync function main() {\n    // Create agents first\n    const dietAgent = new Agent({\n        name: \"DietAgent\",\n        role: \"Nutrition Expert\",\n        goal: \"Create healthy and delicious recipes\",\n        backstory: \"You are a certified nutritionist with years of experience in creating balanced meal plans.\",\n        verbose: true,  // Enable streaming output\n        instructions: `You are a professional chef and nutritionist. Create 5 healthy food recipes that are both nutritious and delicious.\nEach recipe should include:\n1. Recipe name\n2. List of ingredients with quantities\n3. Step-by-step cooking instructions\n4. Nutritional information\n5. Health benefits\n\nFormat your response in markdown.`\n    });\n\n    const blogAgent = new Agent({\n        name: \"BlogAgent\",\n        role: \"Food Blogger\",\n        goal: \"Write engaging blog posts about food and recipes\",\n        backstory: \"You are a successful food blogger known for your ability to make recipes sound delicious and approachable.\",\n        verbose: true,  // Enable streaming output\n        instructions: `You are a food and health blogger. Write an engaging blog post about the provided recipes.\nThe blog post should:\n1. Have an engaging title\n2. Include an introduction about healthy eating`\n    });\n\n    // Create tasks\n    const createRecipesTask = new Task({\n        name: \"Create Recipes\",\n        description: \"Create 5 healthy and delicious recipes\",\n        agent: dietAgent\n    });\n\n    const writeBlogTask = new Task({\n        name: \"Write Blog\",\n        description: \"Write a blog post about the recipes\",\n        agent: blogAgent,\n        dependencies: [createRecipesTask]  // This task depends on the recipes being created first\n    });\n\n    // Run the tasks\n    const praisonAI = new PraisonAIAgents({\n        tasks: [createRecipesTask, writeBlogTask],\n        verbose: true\n    });\n\n    try {\n        console.log('Starting task-based example...');\n        const results = await praisonAI.start();\n        console.log('\\nFinal Results:', results);\n    } catch (error) {\n        console.error('Error:', error);\n    }\n}\n\nmain();\n```\n\n----------------------------------------\n\nTITLE: Creating a Synchronous Image Agent in Python\nDESCRIPTION: This Python script initializes a PraisonAI ImageAgent and generates an image based on a natural language description. The script imports the ImageAgent from the praisonaiagents package, requires a set OpenAI API key, and uses the 'dall-e-3' as the large language model for image generation.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/image-generation.mdx#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents.agent.image_agent import ImageAgent\n\n# Create an image agent\nagent = ImageAgent(\n    llm=\"dall-e-3\",\n    verbose=True\n)\n\n# Generate an image\nresult = agent.chat(\"A cute baby sea otter playing with a laptop\")\nprint(\"Image generation result:\", result)\n```\n\n----------------------------------------\n\nTITLE: Direct Function Tools Example in TypeScript\nDESCRIPTION: Illustrates the creation of an AI agent with direct function tools to provide weather and time information for specified locations, using the PraisonAI framework.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/js/typescript.mdx#2025-04-19_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Agent } from 'praisonai';\n\nasync function getWeather(location: string) {\n  console.log(`Getting weather for ${location}...`);\n  return `${Math.floor(Math.random() * 30)}°C`;\n}\n\nasync function getTime(location: string) {\n  console.log(`Getting time for ${location}...`);\n  const now = new Date();\n  return `${now.getHours()}:${now.getMinutes()}`;\n}\n\nconst agent = new Agent({ \n  instructions: `You provide the current weather and time for requested locations.`,\n  name: \"DirectFunctionAgent\",\n  tools: [getWeather, getTime]\n});\n\nagent.start(\"What's the weather and time in Paris, France and Tokyo, Japan?\");\n```\n\n----------------------------------------\n\nTITLE: Customizing Agent Interactions\nDESCRIPTION: This snippet illustrates how to customize the interactions between agents by introducing feedback loops in the process of creating content. The adjustments allow for iterative reviews and enhancements.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/course/agents/13-building-multi-agent-system.mdx#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nprocess_with_feedback = \"\"\"\nTask: Create a comprehensive blog post about {topic}\n\nProcess:\n1. Researcher: Research {topic} and provide key information\n\n2. Writer: Use the research to create a blog post\n\n3. Editor: Review the blog post and provide feedback\n\n4. Writer: Revise the blog post based on the editor's feedback\n\n5. Editor: Make final improvements to the revised blog post\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Structured Output for an Agent - Python\nDESCRIPTION: This snippet illustrates how to configure an agent to produce structured outputs using Pydantic data models, enabling detailed analysis reports.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/structured.mdx#2025-04-19_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# Create an agent with structured output configuration\nagent = Agent(\n    role=\"Data Analyst\",\n    goal=\"Provide structured analysis\",\n    backstory=\"Expert in data analysis\",\n    tools=[Tools.internet_search],\n    verbose=True,  # Enable detailed logging\n    llm=\"gpt-4o\"  # Language model to use\n)\n\n# Task with Pydantic output\ntask = Task(\n    description=\"Analyze data\",\n    expected_output=\"Structured report\",\n    agent=agent,\n    output_pydantic=AnalysisReport  # Use Pydantic model\n    # or output_json=AnalysisReport  # Use JSON output\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Web Scraping Tool for Content Research\nDESCRIPTION: Custom implementation of a web scraping tool (ScrapeWebsiteTool) that inherits from BaseTool to fetch and process webpage content using BeautifulSoup.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/cookbooks/yaml/book_writing_agents.ipynb#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport os\nimport time\nimport urllib\nimport requests\nfrom bs4 import BeautifulSoup\n\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.firefox.options import Options\nfrom duckduckgo_search import DDGS\nfrom praisonai_tools import BaseTool, SerperDevTool, FileReadTool\n\nclass ScrapeWebsiteTool(BaseTool):\n    name: str = \"WebContentReaderTool\"\n    description: str = \"Fetches and reads the main text content from a specified webpage URL.\"\n\n    def _run(self, url: str) -> str:\n        \"\"\"Reads the content of a webpage and returns up to 5000 characters of text.\"\"\"\n        try:\n            response = requests.get(url, headers={'User-Agent': 'Mozilla/5.0'})\n            response.raise_for_status()\n            soup = BeautifulSoup(response.content, 'html.parser')\n\n            # Extract and clean the text content\n            text_content = soup.get_text(separator=\"\\n\", strip=True)\n            return text_content[:5000]  # Limit content to 5000 characters for brevity\n        except requests.exceptions.RequestException as e:\n            return f\"Failed to retrieve content from {url}: {e}\"\n```\n\n----------------------------------------\n\nTITLE: Creating an Agent and Task with Internet Search Tool in Python\nDESCRIPTION: This code demonstrates the complete implementation of an agent that uses the `internet_search_tool` to perform a specific task. It includes the tool definition, agent instantiation, task definition, and agent execution using the `PraisonAIAgents` class.  It defines a task to collect information on \"AI job trends in 2024\" and assigns it to the data_agent. The `self_reflect` parameter is also set to `False`.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/concepts/tools.mdx#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent, Task, PraisonAIAgents\nfrom duckduckgo_search import DDGS\nfrom typing import List, Dict\n\n# 1. Tool Implementation\ndef internet_search_tool(query: str) -> List[Dict]:\n    \"\"\"\n    Perform Internet Search using DuckDuckGo\n    \n    Args:\n        query (str): The search query string\n        \n    Returns:\n        List[Dict]: List of search results containing title, URL, and snippet\n    \"\"\"\n    results = []\n    ddgs = DDGS()\n    for result in ddgs.text(keywords=query, max_results=5):\n        results.append({\n            \"title\": result.get(\"title\", \"\"),\n            \"url\": result.get(\"href\", \"\"),\n            \"snippet\": result.get(\"body\", \"\")\n        })\n    return results\n\n# 2. Assign the tool to an agent\ndata_agent = Agent(\n    name=\"DataCollector\",\n    role=\"Search Specialist\",\n    goal=\"Perform internet searches to collect relevant information.\",\n    backstory=\"Expert in finding and organising internet data.\",\n    tools=[internet_search_tool],\n    self_reflect=False\n)\n\n# 3. Task Definition\ncollect_task = Task(\n    description=\"Perform an internet search using the query: 'AI job trends in 2024'. Return results as a list of title, URL, and snippet.\",\n    expected_output=\"List of search results with titles, URLs, and snippets.\",\n    agent=data_agent,\n    name=\"collect_data\",\n)\n\n# 4. Start Agents\nagents = PraisonAIAgents(\n    agents=[data_agent],\n    tasks=[collect_task],\n    process=\"sequential\"\n)\n\nagents.start()\n```\n\n----------------------------------------\n\nTITLE: Python Prompt Chaining Workflow with PraisonAI Agents\nDESCRIPTION: Complete implementation of a multi-agent workflow with time-based decision making and sequential task processing\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/promptchaining.mdx#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent, Task, PraisonAIAgents\nimport time\n\ndef get_time_check():\n    current_time = int(time.time())\n    result = \"even\" if current_time % 2 == 0 else \"odd\"\n    print(f\"Time check: {current_time} is {result}\")\n    return result\n\n# Create agents for each step in the chain\nagent1 = Agent(\n    name=\"Time Checker\",\n    role=\"Time checker\",\n    goal=\"Check if the time is even or odd\",\n    instructions=\"Check if the time is even or odd\",\n    tools=[get_time_check]\n)\n\nagent2 = Agent(\n    name=\"Advanced Analyzer\",\n    role=\"Advanced data analyzer\",\n    goal=\"Perform in-depth analysis of processed data\",\n    instructions=\"Analyze the processed data in detail\"\n)\n\nagent3 = Agent(\n    name=\"Final Processor\",\n    role=\"Final data processor\",\n    goal=\"Generate final output based on analysis\",\n    instructions=\"Create final output based on analyzed data\"\n)\n\n# Create tasks for each step\ninitial_task = Task(\n    name=\"time_check\",\n    description=\"Getting time check and checking if it is even or odd\",\n    expected_output=\"Getting time check and checking if it is even or odd\",\n    agent=agent1,\n    is_start=True,  # Mark as the starting task\n    task_type=\"decision\",  # This task will make a decision\n    next_tasks=[\"advanced_analysis\"],  # Next task if condition passes\n    condition={\n        \"even\": [\"advanced_analysis\"],  # If passes, go to advanced analysis\n        \"odd\": \"\"  # If fails, exit the chain\n    }\n)\n\nanalysis_task = Task(\n    name=\"advanced_analysis\",\n    description=\"Perform advanced analysis on the processed data\",\n    expected_output=\"Analyzed data ready for final processing\",\n    agent=agent2,\n    next_tasks=[\"final_processing\"]\n)\n\nfinal_task = Task(\n    name=\"final_processing\",\n    description=\"Generate final output\",\n    expected_output=\"Final processed result\",\n    agent=agent3\n)\n\n# Create the workflow manager\nworkflow = PraisonAIAgents(\n    agents=[agent1, agent2, agent3],\n    tasks=[initial_task, analysis_task, final_task],\n    process=\"workflow\",  # Use workflow process type\n    verbose=True\n)\n\n# Run the workflow\nresults = workflow.start()\n\n# Print results\nprint(\"\\nWorkflow Results:\")\nfor task_id, result in results[\"task_results\"].items():\n    if result:\n        print(f\"Task {task_id}: {result.raw}\")\n```\n\n----------------------------------------\n\nTITLE: Create YAML Processing Agent\nDESCRIPTION: This code defines an agent specialized for processing YAML files. It initializes an `Agent` object with a name, role, goal, backstory, and a set of tools specifically designed for YAML manipulation, including reading, writing, validating, merging, and converting YAML data. The `self_reflect` parameter is set to `False`.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/yaml_tools.mdx#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nyaml_agent = Agent(\n        name=\"YAMLProcessor\",\n        role=\"YAML Processing Specialist\",\n        goal=\"Process YAML files efficiently and accurately.\",\n        backstory=\"Expert in YAML file manipulation and validation.\",\n        tools=[read_yaml, write_yaml, validate_yaml, merge_yaml, convert_yaml],\n        self_reflect=False\n    )\n```\n\n----------------------------------------\n\nTITLE: Defining Agent Roles and Tasks YAML Configuration\nDESCRIPTION: YAML configuration defining three AI agent roles (movie concept creator, screenwriter, and editor) with their respective backstories, goals, and tasks for movie script creation.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/cookbooks/yaml/movie_script_writer_agents.ipynb#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nagent_yaml = \"\"\"\nframework: crewai\ntopic: Artificial Intelligence\nroles:\n  movie_concept_creator:\n    backstory: 'Creative thinker with a deep understanding of cinematic storytelling,\n      capable of using AI-generated storylines to create unique and compelling movie\n      ideas.'\n    goal: Generate engaging movie concepts using AI storylines\n    role: Movie Concept Creator\n    tasks:\n      movie_concept_development:\n        description: 'Develop movie concepts from AI-generated storylines, ensuring\n          they are engaging and have strong narrative arcs.'\n        expected_output: 'Well-structured movie concept document with character\n          bios, settings, and plot outlines.'\n  screenwriter:\n    backstory: 'Expert in writing engaging dialogue and script structure, able to\n      turn movie concepts into production-ready scripts.'\n    goal: Write compelling scripts based on movie concepts\n    role: Screenwriter\n    tasks:\n      scriptwriting_task:\n        description: 'Turn movie concepts into polished scripts with well-developed\n          characters, strong dialogue, and effective scene transitions.'\n        expected_output: 'Production-ready script with a beginning, middle, and\n          end, along with character development and engaging dialogues.'\n  editor:\n    backstory: 'Adept at identifying inconsistencies, improving language usage,\n      and maintaining the overall flow of the script.'\n    goal: Refine the scripts and ensure continuity of the movie storyline\n    role: Editor\n    tasks:\n      editing_task:\n        description: 'Review, edit, and refine the scripts to ensure they are cohesive\n          and follow a well-structured narrative.'\n        expected_output: 'A polished final draft of the script with no inconsistencies,\n          strong character development, and effective dialogue.'\ndependencies: []\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Creating Card Group for Next Steps\nDESCRIPTION: This snippet creates a card group containing two cards that link to further resources for learning about auto-generated AI agents and mini agents, aimed at guiding users towards deeper understanding and exploration.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/structured.mdx#2025-04-19_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n<CardGroup cols={2}>\\n  <Card title=\"AutoAgents\" icon=\"robot\" href=\"./autoagents\">\\n    Learn about automatically created and managed AI agents\\n  </Card>\\n  <Card title=\"Mini Agents\" icon=\"microchip\" href=\"./mini\">\\n    Explore lightweight, focused AI agents\\n  </Card>\\n</CardGroup>\n```\n\n----------------------------------------\n\nTITLE: Developing Multi Agents with TypeScript\nDESCRIPTION: This snippet shows how to create a multi-agent setup using TypeScript and the praisonai library. It includes two custom functions, 'getWeather' and 'getTime', which provide current weather and time, respectively. Ensure the 'praisonai' package is installed. Inputs are location strings, and the outputs are a temperature string and a time string formatted as hours:minutes.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/js/customtools.mdx#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Agent } from 'praisonai';\n\nasync function getWeather(location: string) {\n  console.log(`Getting weather for ${location}...`);\n  return `${Math.floor(Math.random() * 30)}°C`;\n}\n\nasync function getTime(location: string) {\n  console.log(`Getting time for ${location}...`);\n  const now = new Date();\n  return `${now.getHours()}:${now.getMinutes()}`;\n}\n\nconst agent = new Agent({ \n  instructions: `You provide the current weather and time for requested locations.`,\n  name: \"DirectFunctionAgent\",\n  tools: [getWeather, getTime]\n});\n\nagent.start(\"What's the weather and time in Paris, France and Tokyo, Japan?\");\n```\n\n----------------------------------------\n\nTITLE: Executing PraisonAI Marketing Campaign System\nDESCRIPTION: Initializes and runs the PraisonAI system with configured agents and tools, using OpenAI API key from Google Colab environment.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/cookbooks/yaml/marketing_campaign_development_agents.ipynb#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom praisonai import PraisonAI\nfrom google.colab import userdata\n\n# Create a PraisonAI instance with the agent_yaml content\npraisonai = PraisonAI(agent_yaml=agent_yaml, tools=[InternetSearchTool])\n\n# Add OPENAI_API_KEY Secrets to Google Colab on the Left Hand Side 🔑 or Enter Manually Below\nos.environ[\"OPENAI_API_KEY\"] = userdata.get('OPENAI_API_KEY')\n\n# Run PraisonAI\nresult = praisonai.run()\n\n# Print the result\nprint(result) # 10/10\n```\n\n----------------------------------------\n\nTITLE: Creating a Single Agent\nDESCRIPTION: Defines a single agent with a role, goal, and backstory, and then creates a task for that agent.  The `PraisonAIAgents` class is used to manage and start the agent and its assigned task. The example uses `gpt-4o` model.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/quickstart.mdx#2025-04-19_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent, Task, PraisonAIAgents\n\n# Create an agent\nresearcher = Agent(\n    name=\"Researcher\",\n    role=\"Senior Research Analyst\",\n    goal=\"Uncover cutting-edge developments in AI\",\n    backstory=\"You are an expert at a technology research group\",\n    verbose=True,\n    llm=\"gpt-4o\"\n)\n\n# Define a task\ntask = Task(\n    name=\"research_task\",\n    description=\"Analyze 2024's AI advancements\",\n    expected_output=\"A detailed report\",\n    agent=researcher\n)\n\n# Run the agents\nagents = PraisonAIAgents(\n    agents=[researcher],\n    tasks=[task],\n    verbose=False\n)\n\nresult = agents.start()\n```\n\n----------------------------------------\n\nTITLE: Basic YAML Processing Agent Example\nDESCRIPTION: This example demonstrates creating a basic YAML processing agent and task, then running it using `PraisonAIAgents`.  It includes importing necessary modules, defining an agent with YAML processing tools, defining a task for parsing and validating configuration files, and running the agent.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/yaml_tools.mdx#2025-04-19_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent, Task, PraisonAIAgents\nfrom praisonaiagents.tools import read_yaml, write_yaml, validate_yaml, merge_yaml, convert_yaml\n\n# Create YAML agent\nyaml_agent = Agent(\n    name=\"YAMLExpert\",\n    role=\"YAML Processing Specialist\",\n    goal=\"Process YAML files efficiently and accurately.\",\n    backstory=\"Expert in YAML file handling and validation.\",\n    tools=[read_yaml, write_yaml, validate_yaml, merge_yaml, convert_yaml],\n    self_reflect=False\n)\n\n# Define YAML task\nyaml_task = Task(\n    description=\"Parse and validate configuration files.\",\n    expected_output=\"Processed and validated YAML data.\",\n    agent=yaml_agent,\n    name=\"config_processing\"\n)\n\n# Run agent\nagents = PraisonAIAgents(\n    agents=[yaml_agent],\n    tasks=[yaml_task],\n    process=\"sequential\"\n)\nagents.start()\n```\n\n----------------------------------------\n\nTITLE: Initializing PraisonAI Agents with Python\nDESCRIPTION: This snippet illustrates how to create and start PraisonAI agents using the SerpAPI tool. Two agents are initialized: one for searching AI job trends in 2025 using the SerpAPIWrapper tool and another for writing a blog article. The 'praisonaiaagents' package and 'langchain-community' utilities are utilized.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/external/serp-api.mdx#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent, PraisonAIAgents\nfrom langchain_community.utilities import SerpAPIWrapper\n\ndata_agent = Agent(instructions=\"Search about AI job trends in 2025\", tools=[SerpAPIWrapper])\neditor_agent = Agent(instructions=\"Write a blog article\")\n\nagents = PraisonAIAgents(agents=[data_agent, editor_agent])\nagents.start()\n```\n\n----------------------------------------\n\nTITLE: Setting Up Asynchronous Callbacks with PraisonAI in Python\nDESCRIPTION: This snippet demonstrates how to set up and use asynchronous callbacks with the PraisonAI framework. It involves creating agents and tasks with async capabilities, registering async callbacks for interactions, errors, and task completions, and starting agents asynchronously. Key dependencies include asyncio and the praisonaiagents package. The main function orchestrates these setups and initiates the agent execution asynchronously.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/callbacks.mdx#2025-04-19_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nfrom praisonaiagents import Agent, Task, PraisonAIAgents, register_display_callback\nimport logging\nfrom datetime import datetime\n\n# Setup async logging\nasync def setup_async_logging():\n    logging.basicConfig(\n        filename='async_ai_interactions.log',\n        level=logging.INFO,\n        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'\n    )\n\n# Async callbacks\nasync def async_interaction_callback(message=None, response=None, markdown=None, generation_time=None):\n    await asyncio.sleep(0)\n    logging.info(f\"\"\"\n    === ASYNC INTERACTION ===\n    Time: {datetime.now()}\n    Generation Time: {generation_time}s\n    Message: {message}\n    Response: {response}\n    \"\"\")\n\nasync def async_error_callback(message=None):\n    await asyncio.sleep(0)\n    logging.error(f\"\"\"\n    === ASYNC ERROR ===\n    Time: {datetime.now()}\n    Message: {message}\n    \"\"\")\n\n# Register async callbacks\nregister_display_callback('interaction', async_interaction_callback, is_async=True)\nregister_display_callback('error', async_error_callback, is_async=True)\n\n# Create async task callback\nasync def async_task_callback(output):\n    await asyncio.sleep(0)\n    logging.info(f\"\"\"\n    === ASYNC TASK COMPLETED ===\n    Time: {datetime.now()}\n    Description: {output.description}\n    Agent: {output.agent}\n    Output: {output.raw[:200]}...\n    \"\"\")\n\nasync def main():\n    await setup_async_logging()\n    \n    # Create agent with async capabilities\n    agent = Agent(\n        name=\"AsyncAgent\",\n        role=\"Assistant\",\n        goal=\"Demonstrate async callbacks\",\n        backstory=\"I am an async-capable assistant\",\n        verbose=True\n    )\n\n    # Create task with async callback\n    task = Task(\n        name=\"async_task\",\n        description=\"Demonstrate async callbacks\",\n        agent=agent,\n        expected_output=\"Async demonstration complete\",\n        callback=async_task_callback\n    )\n\n    # Create and run agents with async support\n    agents = PraisonAIAgents(\n        agents=[agent],\n        tasks=[task],\n        verbose=True\n    )\n\n    await agents.start_async()\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Smart City Resource Management with PraisonAI Agents\nDESCRIPTION: This Python script demonstrates a smart city resource management workflow using the PraisonAI Agents package. It defines functions to simulate utility monitoring, pattern analysis, resource optimization, implementation of changes, and feedback monitoring, integrating these functions into an agent-based workflow managed by `PraisonAIAgents`. The script creates specialized agents and tasks, then orchestrates them to simulate and optimize city resources.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/examples/smart-city.mdx#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent, Task, PraisonAIAgents\nimport time\nfrom typing import Dict, List\n\ndef monitor_utilities():\n    \"\"\"Simulates utility usage monitoring\"\"\"\n    readings = {\n        \"power\": {\n            \"consumption\": int(time.time()) % 1000,\n            \"peak_hours\": [\"morning\", \"evening\"],\n            \"grid_load\": \"medium\"\n        },\n        \"water\": {\n            \"consumption\": int(time.time()) % 500,\n            \"pressure\": \"normal\",\n            \"quality\": \"good\"\n        },\n        \"traffic\": {\n            \"congestion\": \"high\",\n            \"peak_zones\": [\"downtown\", \"industrial\"],\n            \"incidents\": 2\n        }\n    }\n    return readings\n\ndef analyze_patterns():\n    \"\"\"Simulates usage pattern analysis\"\"\"\n    patterns = [\n        {\"type\": \"daily_cycle\", \"confidence\": 0.85, \"trend\": \"increasing\"},\n        {\"type\": \"weekly_cycle\", \"confidence\": 0.92, \"trend\": \"stable\"},\n        {\"type\": \"seasonal\", \"confidence\": 0.78, \"trend\": \"decreasing\"}\n    ]\n    return patterns[int(time.time()) % 3]\n\ndef optimize_resources(readings: Dict, patterns: Dict):\n    \"\"\"Simulates resource optimization\"\"\"\n    optimizations = {\n        \"power\": {\n            \"action\": \"load_balancing\",\n            \"target_zones\": [\"residential\", \"commercial\"],\n            \"expected_savings\": \"15%\"\n        },\n        \"water\": {\n            \"action\": \"pressure_adjustment\",\n            \"target_zones\": [\"industrial\"],\n            \"expected_savings\": \"8%\"\n        },\n        \"traffic\": {\n            \"action\": \"signal_timing\",\n            \"target_zones\": [\"downtown\"],\n            \"expected_impact\": \"20% reduction\"\n        }\n    }\n    return optimizations\n\ndef implement_changes(optimizations: Dict):\n    \"\"\"Simulates implementation of optimization changes\"\"\"\n    success_rates = {\n        \"load_balancing\": 0.95,\n        \"pressure_adjustment\": 0.88,\n        \"signal_timing\": 0.85\n    }\n    return {\"status\": \"implemented\", \"success_rate\": success_rates[optimizations[\"power\"][\"action\"]]}\n\ndef monitor_feedback():\n    \"\"\"Simulates monitoring of optimization feedback\"\"\"\n    feedbacks = [\"positive\", \"neutral\", \"negative\"]\n    return feedbacks[int(time.time()) % 3]\n\n# Create specialized agents\nutility_monitor = Agent(\n    name=\"Utility Monitor\",\n    role=\"Resource Monitoring\",\n    goal=\"Monitor city utility usage\",\n    instructions=\"Track and report utility consumption patterns\",\n    tools=[monitor_utilities]\n)\n\npattern_analyzer = Agent(\n    name=\"Pattern Analyzer\",\n    role=\"Pattern Analysis\",\n    goal=\"Analyze usage patterns\",\n    instructions=\"Identify and analyze resource usage patterns\",\n    tools=[analyze_patterns]\n)\n\nresource_optimizer = Agent(\n    name=\"Resource Optimizer\",\n    role=\"Resource Optimization\",\n    goal=\"Optimize resource allocation\",\n    instructions=\"Generate resource optimization strategies\",\n    tools=[optimize_resources]\n)\n\nimplementation_agent = Agent(\n    name=\"Implementation Agent\",\n    role=\"Change Implementation\",\n    goal=\"Implement optimization changes\",\n    instructions=\"Execute optimization strategies\",\n    tools=[implement_changes]\n)\n\nfeedback_monitor = Agent(\n    name=\"Feedback Monitor\",\n    role=\"Feedback Monitoring\",\n    goal=\"Monitor optimization results\",\n    instructions=\"Track and analyze optimization feedback\",\n    tools=[monitor_feedback]\n)\n\n# Create workflow tasks\nmonitoring_task = Task(\n    name=\"monitor_utilities\",\n    description=\"Monitor utility usage\",\n    expected_output=\"Current utility readings\",\n    agent=utility_monitor,\n    is_start=True,\n    next_tasks=[\"analyze_patterns\"]\n)\n\npattern_task = Task(\n    name=\"analyze_patterns\",\n    description=\"Analyze usage patterns\",\n    expected_output=\"Usage patterns analysis\",\n    agent=pattern_analyzer,\n    next_tasks=[\"optimize_resources\"]\n)\n\noptimization_task = Task(\n    name=\"optimize_resources\",\n    description=\"Generate optimization strategies\",\n    expected_output=\"Resource optimization plans\",\n    agent=resource_optimizer,\n    next_tasks=[\"implement_changes\"],\n    context=[monitoring_task, pattern_task]\n)\n\nimplementation_task = Task(\n    name=\"implement_changes\",\n    description=\"Implement optimization changes\",\n    expected_output=\"Implementation status\",\n    agent=implementation_agent,\n    next_tasks=[\"monitor_feedback\"]\n)\n\nfeedback_task = Task(\n    name=\"monitor_feedback\",\n    description=\"Monitor optimization feedback\",\n    expected_output=\"Optimization feedback\",\n    agent=feedback_monitor,\n    task_type=\"decision\",\n    condition={\n        \"negative\": [\"monitor_utilities\"],  # Start over if negative feedback\n        \"neutral\": [\"optimize_resources\"],  # Adjust optimization if neutral\n        \"positive\": \"\"  # End workflow if positive\n    }\n)\n\n# Create workflow\nworkflow = PraisonAIAgents(\n    agents=[utility_monitor, pattern_analyzer, resource_optimizer, \n            implementation_agent, feedback_monitor],\n    tasks=[monitoring_task, pattern_task, optimization_task, \n           implementation_task, feedback_task],\n    process=\"workflow\",\n    verbose=True\n)\n\ndef main():\n    print(\"\\nStarting Smart City Resource Optimization Workflow...\")\n    print(\"=\" * 50)\n    \n    # Run workflow\n    results = workflow.start()\n    \n    # Print results\n    print(\"\\nOptimization Results:\")\n    print(\"=\" * 50)\n    for task_id, result in results[\"task_results\"].items():\n        if result:\n            print(f\"\\nTask: {task_id}\")\n            print(f\"Result: {result.raw}\")\n            print(\"-\" * 50)\n\nif __name__ == \"__main__\":\n    main()\n```\n\n----------------------------------------\n\nTITLE: Initializing an Agent\nDESCRIPTION: Example of initializing an `Agent` object with a role description. This agent's role is determined by the given instructions.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/mini.mdx#2025-04-19_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nAgent(instructions=\"Your agent's role description\")\n```\n\n----------------------------------------\n\nTITLE: Initializing Email Campaign Agent with praisonaiagents\nDESCRIPTION: This snippet creates a specialized agent for crafting effective email campaigns. The agent's instructions prioritize compelling subject lines, engaging openings, concise content, clear calls-to-action, and a tone appropriate for the brand and audience. It emphasizes structuring emails with a subject line, greeting, opening hook, main content, call-to-action, and sign-off.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/course/agents/16-content-creation-agents.mdx#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nemail_agent = Agent(\n    name=\"EmailWriter\",\n    instructions=\"\"\"\n    You are an email marketing specialist who creates effective email campaigns.\n    \n    When writing marketing emails:\n    1. Create compelling subject lines that increase open rates\n    2. Write engaging opening lines that hook the reader\n    3. Keep content concise and focused on a single main message\n    4. Include clear calls-to-action\n    5. Use a tone appropriate for the brand and audience\n    \n    Structure your emails with:\n    - Subject line\n    - Greeting\n    - Opening hook\n    - Main content (2-3 paragraphs maximum)\n    - Call-to-action\n    - Sign-off\n    \"\"\"\n)\n\n# Use the email agent\nemail_content = email_agent.start(\n    \"\"\"\n    Create a promotional email for:\n    \n    Product: Premium Fitness Subscription\n    Key benefit: Personalized workout plans and nutrition advice\n    Special offer: 30% off first 3 months\n    Target audience: Health-conscious professionals aged 25-45\n    CTA: Sign up for the discounted offer\n    Tone: Motivational but not aggressive\n    \"\"\"\n)\nprint(email_content)\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Task in Python\nDESCRIPTION: This snippet demonstrates how to create a basic task in the PraisonAI framework using Python. It initializes a Task object with a description and expected output.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/concepts/tasks.mdx#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ntask = Task(\n    description=\"Research AI trends\",\n    expected_output=\"Summary report\",\n    agent=research_agent\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Ollama Agent in YAML\nDESCRIPTION: Defines an AI agent configuration using the CrewAI framework for creating a movie script about a cat on Mars. Specifies the agent's role, goals, tasks, and LLM model settings using Ollama.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/models/ollama.mdx#2025-04-19_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nframework: crewai\ntopic: create movie script about cat in mars\nroles:\n  researcher:\n    backstory: Skilled in finding and organizing information, with a focus on research\n      efficiency.\n    goal: Gather information about Mars and cats\n    role: Researcher\n    llm:  \n      model: \"ollama/llama3\"\n    tasks:\n      gather_research:\n        description: Research and gather information about Mars, its environment,\n          and cats, including their behavior and characteristics.\n        expected_output: Document with research findings, including interesting facts\n          and information.\n    tools:\n    - ''\n```\n\n----------------------------------------\n\nTITLE: Initializing and Running Agents in Python\nDESCRIPTION: This Python code initializes and starts the AI agents using the `PraisonAIAgents` class. It configures the agents with a list of agents (`spider_agent`), a list of tasks (`scraping_task`), and specifies that the tasks should be processed sequentially. The `agents.start()` method initiates the execution of the defined tasks.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/spider_tools.mdx#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n```python\nagents = PraisonAIAgents(\n        agents=[spider_agent],\n        tasks=[scraping_task],\n        process=\"sequential\"\n    )\nagents.start()\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring PraisonAI Agents with DuckDuckGo Search\nDESCRIPTION: Example implementation showing how to create and configure PraisonAI agents with DuckDuckGo search capability for researching DNA mutation. The code creates two agents: one for searching and reading research papers, and another for writing scientific findings.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/external/duckduckgo-search.mdx#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent, PraisonAIAgents\nfrom praisonaiagents.tools import duckduckgo\n\ndata_agent = Agent(instructions=\"Search and Read Research Papers on DNA Mutation\", tools=[duckduckgo])\neditor_agent = Agent(instructions=\"Write a scientifically researched outcome and findings about DNA Mutation\")\nagents = PraisonAIAgents(agents=[data_agent, editor_agent])\nagents.start()\n```\n\n----------------------------------------\n\nTITLE: Basic Python Execution Agent Example - Python\nDESCRIPTION: Provides an example of creating a Python execution agent, defining a task, and running the agent sequentially to execute Python scripts, demonstrating the core functionalities provided by the package.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/python_tools.mdx#2025-04-19_snippet_11\n\nLANGUAGE: python\nCODE:\n```\npython_agent = Agent(\n    name=\"PythonExpert\",\n    role=\"Code Execution Specialist\",\n    goal=\"Execute Python code efficiently and safely.\",\n    backstory=\"Expert in Python programming and execution.\",\n    tools=[\n        execute_code, analyze_code, format_code,\n        lint_code, disassemble_code\n    ],\n    self_reflect=False\n)\n\npython_task = Task(\n    description=\"Execute data processing scripts.\",\n    expected_output=\"Processing results.\",\n    agent=python_agent,\n    name=\"data_processing\"\n)\n\nagents = PraisonAIAgents(\n    agents=[python_agent],\n    tasks=[python_task],\n    process=\"sequential\"\n)\nagents.start()\n```\n\n----------------------------------------\n\nTITLE: Executing PraisonAI System\nDESCRIPTION: Main execution script that initializes PraisonAI with the defined configuration and tools, sets up environment variables, and runs the system.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/cookbooks/yaml/model_fee_retreival_agents.ipynb#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom praisonai import PraisonAI\nfrom google.colab import userdata\n\n# Create a PraisonAI instance with the agent_yaml content\npraisonai = PraisonAI(agent_yaml=agent_yaml, tools=[ModelFeeTool])\n\n# Add OPENAI_API_KEY Secrets to Google Colab on the Left Hand Side 🔑 or Enter Manually Below\nos.environ[\"OPENAI_API_KEY\"] = userdata.get('OPENAI_API_KEY') or \"ENTER OPENAI_API_KEY HERE\"\nos.environ[\"OPENAI_MODEL_NAME\"] = \"gpt-4o-mini\"\n\n# Run PraisonAI\nresult = praisonai.run()\n\n# Print the result\nprint(result) # 2/10\n```\n\n----------------------------------------\n\nTITLE: Reddit Search with Multi Agents in Python\nDESCRIPTION: This Python snippet demonstrates how to create and start a PraisonAI agent that uses the RedditSearchRun tool to search Reddit for information in a multi-agent setup. It initializes an agent with specific instructions and tools, creates a task for the agent, and then starts the agent to perform a search task within the specified subreddit.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/reddit.mdx#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n\"from praisonaiagents import Agent, Task, PraisonAIAgents\nfrom langchain_community.tools.reddit_search.tool import RedditSearchRun\n\nagent = Agent(name=\\\"RedditSearchAgent\\\",instructions=\\\"Search Reddit for information\\\", tools=[RedditSearchRun],)\n\ntask = Task(description=\\\"Search Reddit for information about the latest AI news in subreddit all\\\", agent=agent)\n\nagents = PraisonAIAgents(agents=[agent],tasks=[task])\n\nagents.start()\"\n```\n\n----------------------------------------\n\nTITLE: Literature Review Agent with praisonaiagents\nDESCRIPTION: This code snippet shows how to create a specialized literature review agent using the praisonaiagents library. It configures the agent to review academic literature, summarize findings, identify trends, and evaluate evidence in a clear, academic format.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/course/agents/15-research-agents.mdx#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nliterature_agent = Agent(\n    name=\"LiteratureAgent\",\n    instructions=\"\"\"\n    You are a research specialist who reviews academic and professional literature.\n    \n    When reviewing literature:\n    1. Identify key papers, articles, and studies on the topic\n    2. Summarize the main findings and methodologies\n    3. Identify trends, agreements, and contradictions\n    4. Evaluate the strength of evidence\n    5. Highlight gaps in current research\n    \n    Structure your review in a clear, academic format.\n    \"\"\",\n    tools=[search_tool]\n)\n\n# Use the literature review agent\nliterature_results = literature_agent.start(\"Review recent research on artificial intelligence in healthcare\")\nprint(literature_results)\n```\n\n----------------------------------------\n\nTITLE: Setting up Callbacks with Logging in PraisonAI using Python\nDESCRIPTION: This Python code sets up and registers interaction, error, and tool call callbacks, using the praisonai framework. It implements logging to track interactions, errors, and tool calls with detailed timestamps and messages. Dependencies include the 'praisonaiagents' package and Python's 'logging' module. Inputs involve messages and responses, and the output is logged information capturing interactions and errors.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/callbacks.mdx#2025-04-19_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent, Task, PraisonAIAgents, register_display_callback\nimport logging\nfrom datetime import datetime\n\n# Setup logging\nlogging.basicConfig(\n    filename='ai_interactions.log',\n    level=logging.INFO,\n    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'\n)\n\n# Interaction callback\ndef interaction_callback(message=None, response=None, markdown=None, generation_time=None):\n    logging.info(f\"\"\"\n    === INTERACTION ===\n    Time: {datetime.now()}\n    Generation Time: {generation_time}s\n    Message: {message}\n    Response: {response}\n    Markdown: {markdown}\n    \"\"\")\n\n# Error callback\ndef error_callback(message=None):\n    logging.error(f\"\"\"\n    === ERROR ===\n    Time: {datetime.now()}\n    Message: {message}\n    \"\"\")\n\n# Tool call callback\ndef tool_call_callback(message=None):\n    logging.info(f\"\"\"\n    === TOOL CALL ===\n    Time: {datetime.now()}\n    Message: {message}\n    \"\"\")\n\n# Register callbacks\nregister_display_callback('interaction', interaction_callback)\nregister_display_callback('error', error_callback)\nregister_display_callback('tool_call', tool_call_callback)\n\nagent = Agent(\n    name=\"CallbackAgent\",\n    role=\"Assistant\",\n    goal=\"Demonstrate callbacks\",\n    backstory=\"I am a helpful assistant\",\n    verbose=True\n)\n\ntask = Task(\n    name=\"callback_task\",\n    description=\"Show how callbacks work\",\n    agent=agent,\n    expected_output=\"Demonstration complete\"\n)\n\nagents = PraisonAIAgents(\n    agents=[agent],\n    tasks=[task],\n    verbose=True\n)\n\nagents.start()\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Callbacks for Tasks\nDESCRIPTION: This code snippet demonstrates how to define a callback function for task completion in the PraisonAI framework. The callback function executes post-task and provides output handling. The snippet is implemented in Python and is dependent on the PraisonAI framework to run tasks with callback functionality.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/framework/praisonaiagents.mdx#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef task_completed(output):\n    print(f\"Task completed: {output.description}\")\n    print(f\"Output: {output.raw}\")\n\ntask = Task(\n    description=\"Analysis task\",\n    callback=task_completed\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Financial Data Agent in Python\nDESCRIPTION: Instantiate a specialized finance agent with defined role, goal, and financial data retrieval tools. Configures an agent for efficient market analysis and data processing.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/yfinance_tools.mdx#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfinance_agent = Agent(\n    name=\"FinanceAnalyst\",\n    role=\"Financial Data Specialist\",\n    goal=\"Retrieve and analyze financial data efficiently.\",\n    backstory=\"Expert in financial data analysis and market research.\",\n    tools=[get_stock_price, get_stock_info, get_historical_data],\n    self_reflect=False\n)\n```\n\n----------------------------------------\n\nTITLE: YAML Configuration for Game Development Agents\nDESCRIPTION: Defines the CrewAI framework configuration in YAML format, specifying three agent roles: Senior Software Engineer for game development, QA Engineer for code review, and Chief QA Engineer for final validation.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/cookbooks/yaml/game_development_agents.ipynb#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nagent_yaml = \"\"\"\nframework: \"crewai\"\ntopic: \"Game Development and Quality Assurance\"\nroles:\n  senior_engineer_agent:\n    role: \"Senior Software Engineer\"\n    backstory: |\n      You are a Senior Software Engineer at a leading tech think tank. Known for your expertise in Python, you take pride in producing high-quality code that meets all requirements.\n    goal: \"Develop a functional game according to the provided specifications.\"\n    tasks:\n      code_task:\n        description: |\n          Your task is to create a game using Python, based on detailed instructions. The game requirements may vary from creating classic arcade games like Pac-Man to interactive puzzles.\n\n          Example Instructions:\n          - Create a Pac-Man game where the player controls Pac-Man through a maze, collecting pellets and avoiding ghosts.\n          - Pac-Man moves up, down, left, and right using keyboard arrows, gains points by eating pellets, and loses lives if caught by ghosts.\n          - Complete each level to progress to the next, where game difficulty increases.\n        expected_output: |\n          Your final answer must be the complete Python code implementing the game, with no extraneous commentary or explanation.\n    tools: []\n\n  qa_engineer_agent:\n    role: \"Software Quality Control Engineer\"\n    backstory: |\n      You are a Software Quality Control Engineer specializing in meticulous code review. Known for your attention to detail, you can spot even the most elusive bugs, syntax errors, and logic flaws.\n    goal: \"Identify and report any errors, vulnerabilities, or inconsistencies in the code.\"\n    tasks:\n      review_task:\n        description: |\n          You will review the Python code developed for the game, following the specified instructions. Check for syntax errors, missing imports, logic errors, and any potential security vulnerabilities.\n\n          Example Instructions:\n          - Verify that the code accurately handles player inputs, game mechanics, and error handling.\n          - Ensure all variables are properly declared, brackets are matched, and imports are complete.\n        expected_output: |\n          A revised version of the code, with any necessary corrections, ensuring it adheres to coding standards and meets all specified requirements.\n    tools: []\n\n  chief_qa_engineer_agent:\n    role: \"Chief Software Quality Control Engineer\"\n    backstory: |\n      As the Chief Quality Control Engineer, you ensure the game not only runs error-free but also meets all functional and gameplay requirements. Your attention to quality sets a high standard in code reliability.\n    goal: \"Validate that the code fulfills the intended game functionality and user experience.\"\n    tasks:\n      evaluate_task:\n        description: |\n          Evaluate the final code to confirm that it meets the full game requirements, from mechanics to gameplay experience. Ensure that the code follows best practices and performs as intended.\n\n          Example Instructions:\n          - Verify that the game achieves all objectives, such as progressing through levels and handling player lives.\n          - Ensure that game mechanics align with the design specifications and that the player experience is smooth and bug-free.\n        expected_output: |\n          A final, approved version of the Python code, confirming its functionality and completeness for release.\n    tools: []\ndependencies: []\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Excel Writing Function Implementation\nDESCRIPTION: Implementation details for writing data to Excel files with various formatting options\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/excel_tools.mdx#2025-04-19_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# Write single sheet\ndata = [\n    {\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\"},\n    {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\"}\n]\nsuccess = write_excel(\"output.xlsx\", data, sheet_name=\"Employees\")\n\n# Write multiple sheets\ndata = {\n    \"Employees\": [\n        {\"name\": \"Alice\", \"age\": 25},\n        {\"name\": \"Bob\", \"age\": 30}\n    ],\n    \"Departments\": [\n        {\"name\": \"Engineering\", \"count\": 50},\n        {\"name\": \"Sales\", \"count\": 30}\n    ]\n}\nsuccess = write_excel(\n    \"company.xlsx\",\n    data,\n    index=False,\n    header=True,\n    mode='w'\n)\n```\n\n----------------------------------------\n\nTITLE: Alternative Agent Configurations\nDESCRIPTION: This snippet showcases different configurations for organizing multi-agent systems. It presents examples of parallel processing and an expert panel setup for more efficient task handling.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/course/agents/13-building-multi-agent-system.mdx#2025-04-19_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nparallel_process = \"\"\"\nTask: Create a marketing campaign for a new product\n\nProcess:\n1. Market Researcher: Research the target market and competitors\n   Content Researcher: Research the product features and benefits\n   [These tasks happen in parallel]\n\n2. Strategy Agent: Use both research results to create a marketing strategy\n\n3. Content Creator: Create the marketing materials based on the strategy\n\"\"\"\n\nexpert_panel = \"\"\"\nTask: Evaluate a business idea\n\nProcess:\n1. Financial Expert: Analyze financial viability\n   Market Expert: Analyze market potential\n   Technical Expert: Analyze technical feasibility\n   [These assessments happen in parallel]\n\n2. Coordinator: Compile all expert opinions into a final recommendation\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Internet Search Tool in Python\nDESCRIPTION: This Python script in the `tools.py` file defines a function to perform internet searches using `duckduckgo-search`. The tool is designed to return a list of search results with titles, URLs, and snippets. It is intended for use with agents requiring online information retrieval capabilities.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/course/agents/12-adding-tools-to-agents.mdx#2025-04-19_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom duckduckgo_search import DDGS\nfrom typing import List, Dict\n\n# 1. Tool\ndef internet_search_tool(query: str) -> List[Dict]:\n    \"\"\"\n    Perform Internet Search\n    \"\"\"\n    results = []\n    ddgs = DDGS()\n    for result in ddgs.text(keywords=query, max_results=5):\n        results.append({\n            \"title\": result.get(\"title\", \"\"),\n            \"url\": result.get(\"href\", \"\"),\n            \"snippet\": result.get(\"body\", \"\")\n        })\n    return results  \n```\n\n----------------------------------------\n\nTITLE: Run Parallel Asynchronous Tasks\nDESCRIPTION: This function showcases running multiple asynchronous tasks in parallel with a subsequent summarization task. It defines search tasks with different topics, creates a summary task, and uses PraisonAIAgents to orchestrate the execution, finally returning the results in a serializable format.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/async.mdx#2025-04-19_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nasync def run_parallel_tasks():\n    \"\"\"Run multiple async tasks in parallel\"\"\"\n    print(\"\\nRunning Parallel Async Tasks...\")\n    \n    # Define different search topics\n    search_topics = [\n        \"Latest AI Developments 2024\",\n        \"Machine Learning Best Practices\",\n        \"Neural Networks Architecture\"\n    ]\n    \n    # Create tasks for different topics\n    parallel_tasks = [\n        Task(\n            name=f\"search_task_{i}\",\n            description=f\"\"\"Search for '{topic}' and return results in the following JSON format:\n{{\n    \"query\": \"{topic}\",\n    \"results\": [\n        {{\n            \"title\": \"result title\",\n            \"url\": \"result url\",\n            \"snippet\": \"result snippet\"\n        }}\n    ],\n    \"total_results\": number of results\n}}\"\"\",\n            expected_output=\"SearchResult model with detailed information\",\n            agent=async_agent,\n            async_execution=True,\n            callback=async_callback,\n            output_pydantic=SearchResult\n        ) for i, topic in enumerate(search_topics)\n    ]\n    \n    # Create summarization task with the specialized summary agent\n    summary_task = Task(\n        name=\"summary_task\",\n        description=\"\"\"As a Research Synthesizer, analyze the search results and create a comprehensive summary. Your task:\n\n1. Analyze Results:\n   - Review all search results thoroughly\n   - Extract key findings from each topic\n   - Identify main themes and concepts\n\n2. Find Connections:\n   - Identify relationships between topics\n   - Spot common patterns or contradictions\n   - Note emerging trends across sources\n\n3. Create Structured Summary:\n   - Main findings per topic\n   - Cross-cutting themes\n   - Emerging trends\n   - Practical implications\n   - Future directions\n\n4. Quality Checks:\n   - Ensure all topics are covered\n   - Verify accuracy of connections\n   - Confirm clarity of insights\n   - Validate practical relevance\n\nPresent the summary in a clear, structured format with sections for findings, patterns, trends, and implications.\"\"\",\n        expected_output=\"\"\"A comprehensive research synthesis containing:\n- Detailed findings from each search topic\n- Cross-topic patterns and relationships\n- Emerging trends and their implications\n- Practical applications and future directions\"\"\",\n        agent=summary_agent,  # Use the specialized summary agent\n        async_execution=False,  # Run synchronously after search tasks\n        callback=async_callback\n    )\n    \n    # Create a single PraisonAIAgents instance with both agents\n    agents = PraisonAIAgents(\n        agents=[async_agent, summary_agent],  # Include both agents\n        tasks=parallel_tasks + [summary_task],  # Include all tasks\n        verbose=1,\n        process=\"sequential\"  # Tasks will run in sequence, with parallel tasks running first\n    )\n    \n    # Run all tasks\n    results = await agents.astart()\n    print(f\"Tasks Results: {results}\")\n    \n    # Return results in a serializable format\n    return {\n        \"search_results\": {\n            \"task_status\": {k: v for k, v in results[\"task_status\"].items() if k != summary_task.id},\n            \"task_results\": [str(results[\"task_results\"][i]) if results[\"task_results\"][i] else None \n                           for i in range(len(parallel_tasks))]\n        },\n        \"summary\": str(results[\"task_results\"][summary_task.id]) if results[\"task_results\"].get(summary_task.id) else None,\n        \"topics\": search_topics\n    }\n```\n\n----------------------------------------\n\nTITLE: Creating Repetitive Agent Setup - Python\nDESCRIPTION: This Python snippet initializes a Looping Agent and defines a task for it to execute. It represents the base setup for creating a `repetitive_agent.py` file that will run the agent in a loop using provided tasks.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/repetitive.mdx#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent, Task, PraisonAIAgents\n\nagent = Agent(\n    instructions=\"You are a loop agent that creating a loop of tasks.\"\n)\n\ntask = Task(\n    description=\"Create the list of tasks to be looped through.\",\n    agent=agent,\n    task_type=\"loop\",\n    input_file=\"tasks.csv\"\n)\n\nagents = PraisonAIAgents(\n    agents=[agent],\n    tasks=[task],\n    process=\"workflow\",\n    max_iter=30\n)\n\nagents.start()\n```\n\n----------------------------------------\n\nTITLE: Creating a Knowledge Agent with Streamlit UI\nDESCRIPTION: This Python script creates a Streamlit application that integrates with an Ollama-powered knowledge agent for question answering.  It initializes the agent with configurations for the vector store, LLM, and embedder, then sets up a chat interface where users can ask questions and receive responses from the agent. The chat history is maintained using Streamlit's session state.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/ui/streamlit/ollama-streamlit.mdx#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\nfrom praisonaiagents import Agent\n\ndef init_agent():\n    config = {\n        \"vector_store\": {\n            \"provider\": \"chroma\",\n            \"config\": {\n                \"collection_name\": \"praison\",\n                \"path\": \".praison\"\n            }\n        },\n        \"llm\": {\n            \"provider\": \"ollama\",\n            \"config\": {\n                \"model\": \"deepseek-r1:latest\",\n                \"temperature\": 0,\n                \"max_tokens\": 8000,\n                \"ollama_base_url\": \"http://localhost:11434\",\n            },\n        },\n        \"embedder\": {\n            \"provider\": \"ollama\",\n            \"config\": {\n                \"model\": \"nomic-embed-text:latest\",\n                \"ollama_base_url\": \"http://localhost:11434\",\n                \"embedding_dims\": 1536\n            },\n        },\n    }\n    \n    return Agent(\n        name=\"Knowledge Agent\",\n        instructions=\"You answer questions based on the provided knowledge.\",\n        knowledge=[\"kag-research-paper.pdf\"],\n        knowledge_config=config,\n        user_id=\"user1\",\n        llm=\"deepseek-r1\"\n    )\n\nst.title(\"Knowledge Agent Chat\")\n\nif \"agent\" not in st.session_state:\n    st.session_state.agent = init_agent()\n    st.session_state.messages = []\n\nif \"messages\" in st.session_state:\n    for message in st.session_state.messages:\n        with st.chat_message(message[\"role\"]):\n            st.markdown(message[\"content\"])\n\nprompt = st.chat_input(\"Ask a question...\")\n\nif prompt:\n    st.session_state.messages.append({\"role\": \"user\", \"content\": prompt})\n    with st.chat_message(\"user\"):\n        st.markdown(prompt)\n\n    with st.chat_message(\"assistant\"):\n        response = st.session_state.agent.start(prompt)\n        st.markdown(response)\n        st.session_state.messages.append({\"role\": \"assistant\", \"content\": response}) \n```\n\n----------------------------------------\n\nTITLE: Retrieving System Information\nDESCRIPTION: Demonstrates the get_system_info function from praisonaiagents.tools to retrieve comprehensive system information such as CPU statistics, memory usage, and platform details.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/shell_tools.mdx#2025-04-19_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n# Get system information\ninfo = get_system_info()\n\n# Access specific metrics\nprint(f\"CPU Usage: {info['cpu']['percent']}%\")\nprint(f\"Memory Free: {info['memory']['free']} bytes\")\n\n# Returns: Dict[str, Union[float, int, str, Dict]]\n# Example output:\n# {\n#     'cpu': {\n#         'percent': 45.2,\n#         'cores': 8,\n#         'physical_cores': 4\n#     },\n#     'memory': {\n#         'total': 16000000000,\n#         'available': 8000000000,\n#         'percent': 50.0,\n#         'used': 8000000000,\n#         'free': 4000000000\n#     },\n#     'disk': {\n#         'total': 500000000000,\n#         'used': 250000000000,\n#         'free': 250000000000,\n#         'percent': 50.0\n#     },\n#     'boot_time': 1641544800,\n#     'platform': 'Darwin'\n# }\n```\n\n----------------------------------------\n\nTITLE: Fetching and Searching 10-Q Filings in Python\nDESCRIPTION: Introduces the `SEC10QTool` class for fetching and searching 10-Q form content specific to a stock ticker. The implementation utilizes the `sec_api` for filing access and `html2text` for parsing. Key operations include retrieval of 10-Q filing links and text extraction.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/cookbooks/yaml/stock_analysis_agents.ipynb#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"\nclass FixedSEC10QToolSchema(BaseModel):\n    \"\"\"Input schema for SEC10QTool.\"\"\"\n    search_query: str = Field(\n        ..., description=\"The query string to search within the 10-Q report content.\"\n    )\n\n\nclass SEC10QTool(BaseTool):\n    name: str = \"SEC10QTool\"\n    description: str = \"Fetches and searches through the latest 10-Q form content for a specified stock ticker.\"\n    args_schema: Type[BaseModel] = FixedSEC10QToolSchema\n\n    def __init__(self, stock_name: Optional[str] = None, **kwargs):\n        super().__init__(**kwargs)\n        if stock_name:\n            content = self.get_10q_url_content(stock_name)\n            if content:\n                self.add(content)\n                self.description = f\"Search within {stock_name}'s latest 10-Q form content.\"\n\n    def get_10q_url_content(self, stock_name: str) -> Optional[str]:\n        \"\"\"Fetches the latest 10-Q form for the specified stock ticker.\"\"\"\n        try:\n            queryApi = QueryApi(api_key=os.environ['SEC_API_API_KEY'])\n            query = {\n                \"query\": {\"query_string\": {\"query\": f\"ticker:{stock_name} AND formType:\\\"10-Q\\\"\"}},\n                \"from\": \"0\",\n                \"size\": \"1\",\n                \"sort\": [{\"filedAt\": {\"order\": \"desc\"}}]\n            }\n            filings = queryApi.get_filings(query)['filings']\n            if not filings:\n                return None\n\n            url = filings[0]['linkToFilingDetails']\n            headers = {\"User-Agent\": \"crewai.com\", \"Accept-Encoding\": \"gzip, deflate\"}\n            response = requests.get(url, headers=headers)\n            response.raise_for_status()\n\n            text = html2text.HTML2Text().handle(response.text)\n            return re.sub(r\"[^a-zA-Z$0-9\\s\\n]\", \"\", text)\n        except requests.exceptions.RequestException as e:\n            return f\"Failed to fetch 10-Q form: {e}\"\n        except Exception as e:\n            return f\"Error processing 10-Q form content: {e}\"\n\n    def add(self, *args: Any, **kwargs: Any) -> None:\n        kwargs[\"data_type\"] = DataType.TEXT\n        super().add(*args, **kwargs)\n\n    def _run(self, search_query: str) -> str:\n        \"\"\"Searches through the 10-Q form content.\"\"\"\n        return super()._run(query=search_query)\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: PraisonAI YAML Configuration\nDESCRIPTION: This YAML configuration defines an AI agent with a simple task and a callback for interactions. It specifies the framework, process, roles, tasks, tools, and callback settings, including the log file.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/callbacks.mdx#2025-04-19_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n\"framework: praisonai\nprocess: sequential\ntopic: demonstrate basic callbacks\nroles:\n  assistant:\n    backstory: I am a helpful assistant focused on demonstrating callback functionality\n    goal: Help demonstrate callback functionality\n    role: Assistant\n    tasks:\n      simple_task:\n        description: Say hello and demonstrate basic callbacks\n        expected_output: A greeting with callback logs\n    tools:\n    - basic_tool\ncallbacks:\n  interaction:\n    type: sync\n    enabled: true\n    log_file: interactions.log\"\n```\n\n----------------------------------------\n\nTITLE: Running the XML Agent - Python\nDESCRIPTION: This snippet initializes and runs the XML processing agent along with its assigned task. It sets the processing type to sequential, crucial for managing the workflow of agents and tasks within the PraisonAI framework.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/xml_tools.mdx#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nagents = PraisonAIAgents(\n    agents=[xml_agent],\n    tasks=[xml_task],\n    process=\"sequential\"\n)\nagents.start()\n```\n\n----------------------------------------\n\nTITLE: Agent Configuration in YAML\nDESCRIPTION: Defines five specialized agents (spam filter, discussion analyst, script writer, formatter, and scorer) with their roles, backstories, goals, and tasks for screenplay processing.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/cookbooks/yaml/screenplay_writer_agents.ipynb#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nagent_yaml = \"\"\"\nframework: \"crewai\"\ntopic: \"Newsgroup Post Processing and Formatting\"\nroles:\n  spamfilter:\n    role: \"Spam Filter\"\n    backstory: |\n      You are an expert spam filter with years of experience. You DETEST advertisements, newsletters, and vulgar language.\n    goal: \"Decide whether a text is spam or not.\"\n    tasks:\n      filter_spam:\n        description: |\n          Read the following newsgroup post. If this contains vulgar language or is spam, reply with \"STOP\".\n          Otherwise, let it pass for further processing.\n        expected_output: \"Either 'STOP' if the post contains vulgar language or is spam, or no response if it does not.\"\n    tools: []\n  analyst:\n    role: \"Discussion Analyst\"\n    backstory: |\n      An expert in analyzing discussions, with a keen ability to distill arguments and identify who said what.\n      Able to rephrase content while maintaining the core points of the discussion.\n    goal: \"Distill all arguments from the discussion members, identifying who said what.\"\n    tasks:\n      analyze_discussion:\n        description: |\n          Analyze in detail the following discussion, identifying who said what and rewording if necessary, while maintaining the main discussion points.\n        expected_output: \"A detailed analysis of the discussion, identifying who said what and rewording as needed.\"\n    tools: []\n  scriptwriter:\n    role: \"Script Writer\"\n    backstory: |\n      An expert in transforming conversations into movie script dialogues with a focus on natural dialogue,\n      avoiding situational descriptions, actions, or parentheticals.\n    goal: \"Turn a conversation into a movie script with only dialogue.\"\n    tasks:\n      create_script:\n        description: |\n          Create a dialogue-heavy screenplay from the discussion, formatted as a conversation between two persons.\n          Do NOT write parentheticals, wrylies, or directional notes.\n        expected_output: \"A screenplay dialogue with only the conversation parts, without parentheticals or directional notes.\"\n    tools: []\n  formatter:\n    role: \"Text Formatter\"\n    backstory: |\n      A formatting expert skilled at ensuring text meets specified structure and style requirements,\n      particularly removing extraneous information such as actions or directions within brackets.\n    goal: \"Format text according to specified style, leaving out actions within brackets.\"\n    tasks:\n      format_script:\n        description: |\n          Format the script exactly like this:\n            ## (person 1):\n            (first text line from person 1)\n\n            ## (person 2):\n            (first text line from person 2)\n\n            ## (person 1):\n            (second text line from person 1)\n\n            ## (person 2):\n            (second text line from person 2)\n        expected_output: \"A formatted script with the specified structure, ensuring each line is formatted according to the provided template.\"\n    tools: []\n  scorer:\n    role: \"Dialogue Scorer\"\n    backstory: |\n      A dialogue scoring expert with a keen eye for clarity, engagement, and coherence, skilled at assessing the quality of a conversation.\n    goal: \"Score a dialogue on various aspects including clarity, conciseness, engagement, and relevance.\"\n    tasks:\n      score_dialogue:\n        description: |\n          Score the following script based on clarity, relevance, conciseness, politeness, engagement, flow, coherence, responsiveness, language use, and emotional intelligence.\n          Use a scale from 1 to 10, where 1 is the lowest performance and 10 is the highest.\n        expected_output: \"The Entire Screenplay along with a score from 1 to 10, indicating how well the script achieves clarity, coherence, and engagement.\"\n    tools: []\ndependencies: []\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Implementing File Uploader and Project Evaluation Interface in Streamlit Python\nDESCRIPTION: This code creates a Streamlit interface that handles video file uploads, processes them through an AI evaluator, and displays comprehensive evaluation results. It manages temporary file storage, displays various metrics and qualitative feedback, and implements proper error handling and cleanup.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/ui/streamlit/hackathon-judge-streamlit.mdx#2025-04-19_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# File uploader\nuploaded_file = st.file_uploader(\"Choose a video file\", type=['mp4', 'avi', 'mov', 'mkv'])\n\nif uploaded_file:\n    # Create a temporary file to store the video\n    with tempfile.NamedTemporaryFile(delete=False, suffix='.'+uploaded_file.name.split('.')[-1]) as tmp_file:\n        tmp_file.write(uploaded_file.getvalue())\n        video_path = tmp_file.name\n\n    with st.spinner(\"🤖 AI is evaluating your project...\"):\n        try:\n            # Evaluate the project\n            result = evaluate_project(video_path)\n            \n            # Display results\n            st.header(\"Overall Score\")\n            st.metric(\"Overall Score\", f\"{result.overall_score}/100\")\n            \n            # Display detailed scores\n            st.header(\"Detailed Scores\")\n            col1, col2, col3 = st.columns(3)\n            with col1:\n                st.metric(\"Innovation\", f\"{result.innovation_score}/100\")\n                st.metric(\"Technical Complexity\", f\"{result.technical_complexity}/100\")\n            with col2:\n                st.metric(\"Presentation\", f\"{result.presentation_quality}/100\")\n                st.metric(\"User Experience\", f\"{result.user_experience}/100\")\n            with col3:\n                st.metric(\"Completeness\", f\"{result.completeness}/100\")\n\n            # Display qualitative feedback\n            st.header(\"Key Strengths\")\n            for strength in result.key_strengths:\n                st.write(f\"• {strength}\")\n            \n            st.header(\"Areas for Improvement\")\n            for area in result.areas_for_improvement:\n                st.write(f\"• {area}\")\n            \n            st.header(\"Technical Highlights\")\n            for highlight in result.technical_highlights:\n                st.write(f\"• {highlight}\")\n            \n            st.header(\"Notable Features\")\n            for feature in result.notable_features:\n                st.write(f\"• {feature}\")\n            \n            st.header(\"Recommendations\")\n            for rec in result.recommendations:\n                st.write(f\"• {rec}\")\n            \n            # Market Analysis\n            st.header(\"Market Analysis\")\n            col1, col2 = st.columns(2)\n            with col1:\n                st.subheader(\"Market Potential\")\n                st.write(result.market_potential)\n            with col2:\n                st.subheader(\"Scalability Assessment\")\n                st.write(result.scalability_assessment)\n\n        except Exception as e:\n            st.error(f\"Error evaluating the project: {str(e)}\")\n        finally:\n            # Clean up the temporary file\n            os.unlink(video_path)\nelse:\n    # Display placeholder content\n    st.info(\"👆 Upload a video file to get started!\")\n```\n\n----------------------------------------\n\nTITLE: Initializing Basic Content Creation Agent with praisonaiagents\nDESCRIPTION: This snippet creates a basic content creation agent using the `praisonaiagents` library. It defines the agent's name and provides instructions on how to create engaging and well-structured content for various purposes and target audiences. The agent is then used to generate a blog post about the benefits of meditation.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/course/agents/16-content-creation-agents.mdx#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent\n\n# Create a basic content creation agent\ncontent_agent = Agent(\n    name=\"ContentCreator\",\n    instructions=\"\"\"\n    You are a versatile content creator who specializes in writing engaging material.\n    \n    When creating content:\n    1. Understand the purpose and target audience\n    2. Create a logical structure with clear sections\n    3. Use an engaging, appropriate writing style\n    4. Include a strong introduction and conclusion\n    5. Format content for easy readability\n    \"\"\"\n)\n\n# Use the content creation agent\nblog_post = content_agent.start(\n    \"\"\"\n    Create a blog post about the benefits of meditation.\n    Target audience: Busy professionals\n    Length: Approximately 500 words\n    Tone: Informative but conversational\n    \"\"\"\n)\nprint(blog_post)\n```\n\n----------------------------------------\n\nTITLE: Implementing Search and Web Content Tools\nDESCRIPTION: Definition of custom tools for internet searching using DuckDuckGo and web content extraction using BeautifulSoup. These tools are used by the AI agents for gathering travel-related information.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/cookbooks/yaml/surprise_trip_planner_and_itinerary_agents.ipynb#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport requests\nfrom bs4 import BeautifulSoup\nfrom duckduckgo_search import DDGS\nfrom praisonai_tools import BaseTool, SerperDevTool\nfrom langchain.tools import tool\n\n\nclass InternetSearchTool(BaseTool):\n    name: str = \"InternetSearchTool\"\n    description: str = \"Search Internet for relevant information based on a query or latest news\"\n\n    def _run(self, query: str):\n        ddgs = DDGS()\n        results = ddgs.text(keywords=query, region='wt-wt', safesearch='moderate', max_results=5)\n        return results\n\n\nclass WebContentReaderTool(BaseTool):\n    name: str = \"WebContentReaderTool\"\n    description: str = \"Fetches and reads the main text content from a specified webpage URL.\"\n\n    def _run(self, url: str) -> str:\n        \"\"\"Reads the content of a webpage and returns up to 5000 characters of text.\"\"\"\n        try:\n            response = requests.get(url, headers={'User-Agent': 'Mozilla/5.0'})\n            response.raise_for_status()\n            soup = BeautifulSoup(response.content, 'html.parser')\n\n            # Extract and clean the text content\n            text_content = soup.get_text(separator=\"\\n\", strip=True)\n            return text_content[:5000]  # Limit content to 5000 characters for brevity\n        except requests.exceptions.RequestException as e:\n            return f\"Failed to retrieve content from {url}: {e}\"\n```\n\n----------------------------------------\n\nTITLE: Running Agents Sequentially\nDESCRIPTION: This snippet demonstrates how to run agents sequentially using the `PraisonAIAgents` class. It initializes the class with a list of agents, a list of tasks, and the process type set to \"sequential\". The `start()` method is then called to begin the agent execution.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/pandas_tools.mdx#2025-04-19_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n# Run agent\nagents = PraisonAIAgents(\n    agents=[data_agent],\n    tasks=[analysis_task],\n    process=\"sequential\"\n)\nagents.start()\n```\n\n----------------------------------------\n\nTITLE: Basic Web Search Agent Implementation\nDESCRIPTION: Python script demonstrating the creation and usage of a basic web search agent that performs searches and saves results to a file.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/agents/websearch.mdx#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent, Tools\nfrom praisonaiagents.tools import duckduckgo\n\n# Create Web Search Agent\nsearch_agent = Agent(\n    name=\"WebSearcher\",\n    role=\"Web Search Specialist\",\n    goal=\"Perform intelligent web searches and gather information\",\n    instructions=\"You are a Web Search Agent\",\n    tools=[duckduckgo]\n)\n\n# Perform search\nresponse = search_agent.start(\n    \"Search about AI developments in 2024\"\n)\n\n# Save search results\nwith open('search_results.md', 'w') as f:\n    f.write(response)\n```\n\n----------------------------------------\n\nTITLE: Setting up Literature Search Agent in Python\nDESCRIPTION: Configures a specialized agent for searching academic literature with access to arXiv-related tools for paper discovery and retrieval\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/arxiv_tools.mdx#2025-04-19_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nsearcher = Agent(\n    name=\"Searcher\",\n    role=\"Literature Specialist\",\n    tools=[search_arxiv, get_arxiv_paper, get_papers_by_author, get_papers_by_category]\n)\n```\n\n----------------------------------------\n\nTITLE: Multiple Tools Agent with Wikipedia and YouTube Search\nDESCRIPTION: Create multiple PraisonAI agents with different tools and combine them using PraisonAIAgents for comprehensive research.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/langchain_tools.mdx#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent, PraisonAIAgents\nfrom langchain_community.utilities import WikipediaAPIWrapper\nfrom langchain_community.tools import YouTubeSearchTool\n\nyoutube_agent = Agent(\n    instructions=\"Search for information about 'AI advancements' on YouTube\",\n    tools=[YouTubeSearchTool]\n)\n\nwiki_agent = Agent(\n    instructions=\"Research 'Artificial Intelligence' on Wikipedia\",\n    tools=[WikipediaAPIWrapper]\n)\n\nagents = PraisonAIAgents(agents=[youtube_agent, wiki_agent])\nagents.start()\n```\n\n----------------------------------------\n\nTITLE: Configuring Agent Roles and Tasks in YAML\nDESCRIPTION: YAML configuration defining the roles of Project Manager, Senior Researcher, and Writer, along with their respective tasks and tools for creating a comprehensive research report about AI in healthcare.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/cookbooks/yaml/comprehensive_research_report_agents.ipynb#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nagent_yaml = \"\"\"\nframework: \"crewai\"\ntopic: \"AI in Healthcare Research and Storytelling\"\nroles:\n  manager:\n    role: \"Project Manager\"\n    backstory: |\n      With a strategic mindset and a knack for leadership, you excel at guiding teams towards their goals, ensuring projects not only meet but exceed expectations.\n    goal: |\n      Coordinate the project to ensure a seamless integration of research findings into compelling narratives.\n    verbose: true\n    allow_delegation: true\n    tools: []\n\n  researcher:\n    role: \"Senior Researcher\"\n    backstory: |\n      Driven by curiosity, you're at the forefront of innovation, eager to explore and share knowledge that could change the world.\n    goal: |\n      Uncover groundbreaking technologies and historical insights around AI in healthcare.\n    verbose: true\n    allow_delegation: true\n    tools:\n      - \"InternetSearchTool\"\n      - \"WebContentReaderTool\"\n\n  writer:\n    role: \"Writer\"\n    backstory: |\n      With a flair for simplifying complex topics, you craft engaging narratives that captivate and educate, bringing new discoveries to light in an accessible manner.\n    goal: |\n      Narrate compelling tech stories around AI in healthcare.\n    verbose: true\n    allow_delegation: true\n    tools:\n      - \"InternetSearchTool\"\n      - \"WebContentReaderTool\"\n\ntasks:\n  list_ideas:\n    description: |\n      List 5 interesting ideas to explore for an article about AI in healthcare.\n    expected_output: |\n      Bullet point list of 5 ideas for an article.\n    agent: researcher\n    tools:\n      - \"InternetSearchTool\"\n      - \"WebContentReaderTool\"\n    async_execution: true\n\n  list_important_history:\n    description: |\n      Research the history of AI in healthcare and identify the 5 most important events.\n    expected_output: |\n      Bullet point list of 5 important events.\n    agent: researcher\n    tools:\n      - \"InternetSearchTool\"\n      - \"WebContentReaderTool\"\n    async_execution: true\n  write_article:\n    description: |\n      Compose an insightful article on AI in healthcare, including its history and the latest interesting ideas.\n    expected_output: |\n      A 4-paragraph article about AI in healthcare.\n    agent: writer\n    context:\n      - \"list_ideas\"\n      - \"list_important_history\"\n    tools:\n      - \"InternetSearchTool\"\n      - \"WebContentReaderTool\"\n    callback: callback_function\n  manager_task:\n    description: |\n      Oversee the integration of research findings and narrative development to produce a final comprehensive report on AI in healthcare. Ensure the research is accurately represented, and the narrative is engaging and informative.\n    expected_output: |\n      A final comprehensive report that combines the research findings and narrative on AI in healthcare.\n    agent: manager\n    tools: []\ndependencies: []\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Running and Printing Results of PraisonAI in Python\nDESCRIPTION: This snippet runs the PraisonAI model and prints the resulting outcome. It assumes that the PraisonAI library is installed and properly configured to utilize the set environment variables.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/cookbooks/yaml/book_writing_agents.ipynb#2025-04-19_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nresult = praisonai.run()\n\n# Print the result\nprint(result) # 10/10\n```\n\n----------------------------------------\n\nTITLE: Creating Adaptive Learning Workflow with PraisonAI in Python\nDESCRIPTION: This Python script sets up an adaptive learning system by defining agents and tasks using the PraisonAI framework. It simulates the processes of student level assessment, content generation, evaluation, and difficulty adaptation to provide a personalized learning experience. The script requires Python 3.10 or higher and an OpenAI API key.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/examples/adaptive-learning.mdx#2025-04-19_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nfrom praisonaiagents import Agent, Task, PraisonAIAgents\nimport time\nfrom typing import Dict\n\ndef assess_student_level():\n    \"\"\"Simulates student assessment\"\"\"\n    levels = [\"beginner\", \"intermediate\", \"advanced\"]\n    current_time = int(time.time())\n    return levels[current_time % 3]\n\ndef generate_content(level: str):\n    \"\"\"Simulates content generation\"\"\"\n    content_types = {\n        \"beginner\": \"basic concepts and examples\",\n        \"intermediate\": \"practice problems and applications\",\n        \"advanced\": \"complex scenarios and projects\"\n    }\n    return content_types.get(level, \"basic concepts\")\n\ndef evaluate_performance():\n    \"\"\"Simulates performance evaluation\"\"\"\n    scores = [\"low\", \"medium\", \"high\"]\n    current_time = int(time.time())\n    return scores[current_time % 3]\n\ndef adapt_difficulty(performance: str):\n    \"\"\"Simulates difficulty adaptation\"\"\"\n    adaptations = {\n        \"low\": \"decrease\",\n        \"medium\": \"maintain\",\n        \"high\": \"increase\"\n    }\n    return adaptations.get(performance, \"maintain\")\n\n# Create specialized agents\nassessor = Agent(\n    name=\"Student Assessor\",\n    role=\"Level Assessment\",\n    goal=\"Assess student's current level\",\n    instructions=\"Evaluate student's knowledge and skills\",\n    tools=[assess_student_level]\n)\n\ngenerator = Agent(\n    name=\"Content Generator\",\n    role=\"Content Creation\",\n    goal=\"Generate appropriate learning content\",\n    instructions=\"Create content based on student's level\",\n    tools=[generate_content]\n)\n\nevaluator = Agent(\n    name=\"Performance Evaluator\",\n    role=\"Performance Assessment\",\n    goal=\"Evaluate student's performance\",\n    instructions=\"Assess learning outcomes\",\n    tools=[evaluate_performance]\n)\n\nadapter = Agent(\n    name=\"Difficulty Adapter\",\n    role=\"Content Adaptation\",\n    goal=\"Adapt content difficulty\",\n    instructions=\"Adjust difficulty based on performance\",\n    tools=[adapt_difficulty]\n)\n\n# Create workflow tasks\nassessment_task = Task(\n    name=\"assess_level\",\n    description=\"Assess student's current level\",\n    expected_output=\"Student's proficiency level\",\n    agent=assessor,\n    is_start=True,\n    next_tasks=[\"generate_content\"]\n)\n\ngeneration_task = Task(\n    name=\"generate_content\",\n    description=\"Generate appropriate content\",\n    expected_output=\"Learning content\",\n    agent=generator,\n    next_tasks=[\"evaluate_performance\"]\n)\n\nevaluation_task = Task(\n    name=\"evaluate_performance\",\n    description=\"Evaluate student's performance\",\n    expected_output=\"Performance assessment\",\n    agent=evaluator,\n    next_tasks=[\"adapt_difficulty\"]\n)\n\nadaptation_task = Task(\n    name=\"adapt_difficulty\",\n    description=\"Adapt content difficulty\",\n    expected_output=\"Difficulty adjustment\",\n    agent=adapter,\n    task_type=\"decision\",\n    condition={\n        \"decrease\": [\"generate_content\"],\n        \"maintain\": \"\",\n        \"increase\": [\"generate_content\"]\n    }\n)\n\n# Create workflow\nworkflow = PraisonAIAgents(\n    agents=[assessor, generator, evaluator, adapter],\n    tasks=[assessment_task, generation_task, evaluation_task, adaptation_task],\n    process=\"workflow\",\n    verbose=True\n)\n\ndef main():\n    print(\"\\nStarting Adaptive Learning Workflow...\")\n    print(\"=\" * 50)\n    \n    # Run workflow\n    results = workflow.start()\n    \n    # Print results\n    print(\"\\nAdaptive Learning Results:\")\n    print(\"=\" * 50)\n    for task_id, result in results[\"task_results\"].items():\n        if result:\n            print(f\"\\nTask: {task_id}\")\n            print(f\"Result: {result.raw}\")\n            print(\"-\" * 50)\n\nif __name__ == \"__main__\":\n    main()\n```\n\n----------------------------------------\n\nTITLE: Advanced Excel Processing with Multiple Agents\nDESCRIPTION: Example of complex Excel processing setup using multiple specialized agents\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/excel_tools.mdx#2025-04-19_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n# Create data processing agent\nprocessor_agent = Agent(\n    name=\"Processor\",\n    role=\"Data Processor\",\n    goal=\"Process Excel data systematically.\",\n    tools=[read_excel, write_excel, merge_excel],\n    self_reflect=False\n)\n\n# Create analysis agent\nanalysis_agent = Agent(\n    name=\"Analyzer\",\n    role=\"Data Analyst\",\n    goal=\"Analyze processed Excel data.\",\n    backstory=\"Expert in data analysis and reporting.\",\n    self_reflect=False\n)\n\n# Define tasks\nprocessing_task = Task(\n    description=\"Process sales spreadsheets.\",\n    agent=processor_agent,\n    name=\"data_processing\"\n)\n\nanalysis_task = Task(\n    description=\"Analyze sales trends and patterns.\",\n    agent=analysis_agent,\n    name=\"data_analysis\"\n)\n\n# Run agents\nagents = PraisonAIAgents(\n    agents=[processor_agent, analysis_agent],\n    tasks=[processing_task, analysis_task],\n    process=\"sequential\"\n)\nagents.start()\n```\n\n----------------------------------------\n\nTITLE: Configure Parallel Task\nDESCRIPTION: This Python code configures a parallel task within the PraisonAI Agents framework by setting `async_execution=True`.  It creates a Task object with specified name, description, expected output, agent, and flags it as a starting task that should be executed asynchronously.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/parallelisation.mdx#2025-04-19_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# Create a parallel task\ntask = Task(\n    name=\"parallel_task\",\n    description=\"Task to run in parallel\",\n    expected_output=\"Task result\",\n    agent=agent,\n    is_start=True,\n    async_execution=True  # Enable parallel execution\n)\n```\n\n----------------------------------------\n\nTITLE: Creating an OpenAI-Powered Airbnb Search Agent\nDESCRIPTION: Python code to create a basic AI agent that uses OpenAI's GPT-4o-mini model with Airbnb's MCP tool. The agent helps users book apartments on Airbnb using natural language queries.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/mcp/openai.mdx#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent, MCP\nimport os\n\n# Get API key from environment variable\nopenai_api_key = os.environ.get(\"OPENAI_API_KEY\")\n\nsearch_agent = Agent(\n    instructions=\"\"\"You help book apartments on Airbnb.\"\"\",\n    llm=\"gpt-4o-mini\",\n    tools=MCP(\n        command=\"npx\",\n        args=[\"-y\", \"@openbnb/mcp-server-airbnb\", \"--ignore-robots-txt\"],\n        env={\"OPENAI_API_KEY\": openai_api_key}\n    )\n)\n\nsearch_agent.start(\"I want to book an apartment in Paris for 2 nights. 03/28 - 03/30 for 2 adults\")\n```\n\n----------------------------------------\n\nTITLE: Implementing PraisonAI Filesystem Agent\nDESCRIPTION: Python implementation of a filesystem agent using PraisonAI and MCP. Configures allowed directories and creates an agent with filesystem capabilities.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/mcp/filesystem.mdx#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent, MCP\nimport os\n\n# Define allowed directories for filesystem access\nallowed_dirs = [\n    \"/Users/username/Desktop\",\n    \"/path/to/other/allowed/dir\"\n]\n\n# Use a single string command with allowed directories\nfilesystem_agent = Agent(\n    instructions=\"\"\"You are a helpful assistant that can interact with the filesystem.\n    Use the available tools when relevant to manage files and directories.\"\"\",\n    llm=\"gpt-4o-mini\",\n    tools=MCP(\"npx -y @modelcontextprotocol/server-filesystem\", args=allowed_dirs)\n)\n\nfilesystem_agent.start(\"List files in the allowed directories\")\n```\n\n----------------------------------------\n\nTITLE: Managing Task Context in Python\nDESCRIPTION: This Python code snippet illustrates how to manage the context between tasks. It shows how one task can utilize the output from another task, ensuring proper data flow within the PraisonAI framework.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/concepts/tasks.mdx#2025-04-19_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ntask_a = Task(name=\"research\")\ntask_b = Task(\n    name=\"analyze\",\n    context=[task_a]  # Uses task_a's output\n)\n```\n\n----------------------------------------\n\nTITLE: Running IO and Analysis Agents\nDESCRIPTION: This snippet demonstrates running two agents (`io_agent` and `analysis_agent`) sequentially using `PraisonAIAgents`. It initializes the class with the agents and their respective tasks, and then starts the execution.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/pandas_tools.mdx#2025-04-19_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n# Run agents\nagents = PraisonAIAgents(\n    agents=[io_agent, analysis_agent],\n    tasks=[io_task, analysis_task],\n    process=\"sequential\"\n)\nagents.start()\n```\n\n----------------------------------------\n\nTITLE: Implementing Async Process Methods in Python\nDESCRIPTION: Defines the async counterparts for workflow, sequential and hierarchical process execution methods in the Process class. These methods enable non-blocking execution and return AsyncGenerator objects.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/api/praisonaiagents/process/process.mdx#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass Process:\n    async def aworkflow(self):\n        \"\"\"Async workflow process execution\"\"\"\n        # Async workflow implementation\n        \n    async def asequential(self):\n        \"\"\"Async sequential process execution\"\"\"\n        # Async sequential implementation\n        \n    async def ahierarchical(self):\n        \"\"\"Async hierarchical process execution\"\"\"\n        # Async hierarchical implementation\n```\n\n----------------------------------------\n\nTITLE: PraisonAI Agent Initialization (Python) - Detailed Example\nDESCRIPTION: This Python snippet demonstrates a more detailed example of initializing an agent in PraisonAI. It initializes an agent, sets its name and instructions, which include role, goal, process, and format. The agent is tasked with content creation for digital marketing.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/course/agents/04-agent-instructions.mdx#2025-04-19_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent\n\ncontent_agent = Agent(\n    name=\"ContentCreator\",\n    instructions=\"\"\"\n    You are a content creation specialist with expertise in digital marketing.\n    \n    Your goal is to create engaging blog content that drives traffic and conversions.\n    \n    When creating content:\n    1. Research the target keyword thoroughly\n    2. Create an attention-grabbing headline\n    3. Develop well-structured content with clear sections\n    4. Include actionable takeaways for readers\n    \n    Present content in markdown format with proper headings, bullet points, and emphasis where appropriate.\n    \n    Additional guidelines:\n    - Maintain a conversational but professional tone\n    - Include 2-3 relevant statistics to support key points\n    - Add a call-to-action at the end of each piece\n    \"\"\"\n)\n\ncontent_agent.start(\"Create a blog post about sustainable living tips\")\n```\n\n----------------------------------------\n\nTITLE: Creating Multi-Agent Configuration - YAML\nDESCRIPTION: This YAML snippet sets up configurations for multiple agents, detailing roles, tasks, and expected outputs for a project focused on quantum computing.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/structured.mdx#2025-04-19_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nframework: praisonai\nprocess: sequential\ntopic: research and analyze quantum computing\nroles:\n  researcher:\n    backstory: Expert in research and data collection.\n    goal: Gather and structure research data\n    role: Research Analyst\n    tools:\n      - internet_search\n    tasks:\n      research_task:\n        description: Research quantum computing developments.\n        expected_output: Structured research findings.\n        output_structure:\n          type: pydantic\n          model:\n            topic: str\n            findings: str\n            sources: list[str]\n\n  analyst:\n    backstory: Expert in data analysis and insights generation.\n    goal: Analyze research and provide structured insights\n    role: Data Analyst\n    tasks:\n      analysis_task:\n        description: Analyze research implications.\n        expected_output: Structured analysis report.\n        output_structure:\n          type: pydantic\n          model:\n            key_points: list[str]\n            implications: str\n            recommendations: str\n```\n\n----------------------------------------\n\nTITLE: Creating Math Agent Configuration in YAML\nDESCRIPTION: Defines a YAML configuration for AI agents using the PraisonAI framework. It specifies agent roles, tools, and tasks for performing mathematical and financial analysis.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/mathagent.mdx#2025-04-19_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nframework: praisonai\nprocess: sequential\ntopic: perform mathematical analysis\nroles:\n  mathematician:\n    backstory: Expert in mathematical computations and analysis.\n    goal: Perform complex mathematical calculations\n    role: Math Expert\n    tools:\n      - evaluate\n      - solve_equation\n      - convert_units\n      - calculate_statistics\n      - calculate_financial\n    tasks:\n      math_task:\n        description: Calculate compound interest and perform statistical analysis.\n        expected_output: Detailed mathematical analysis with results.\n```\n\n----------------------------------------\n\nTITLE: Configuring Review Agent in Python\nDESCRIPTION: Creates an agent specialized in reviewing and analyzing research papers\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/arxiv_tools.mdx#2025-04-19_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nreviewer = Agent(\n    name=\"Reviewer\",\n    role=\"Research Reviewer\"\n)\n```\n\n----------------------------------------\n\nTITLE: Running the AI Agents in Python\nDESCRIPTION: This command executes the Python script (`app.py`) containing the definitions and configurations of the AI agents for code review. It initiates the code review workflow defined in the script. It requires Python 3.10 or higher.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/examples/code-review.mdx#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n\"python app.py\"\n```\n\n----------------------------------------\n\nTITLE: Agent Configuration in Python\nDESCRIPTION: This snippet shows how to configure a PraisonAI agent specifically for JSON processing.  The agent is given a name, role, goal, and set of tools to handle JSON tasks, which include reading, writing, merging, validating, analyzing, and transforming JSON data.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/json_tools.mdx#2025-04-19_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nAgent(\n        name=\"JSONProcessor\",\n        role=\"JSON Processing Specialist\",\n        goal=\"Process JSON files accurately and safely\",\n        tools=[read_json, write_json, merge_json, validate_json, analyze_json, transform_json]\n    )\n```\n\n----------------------------------------\n\nTITLE: Defining Agent Roles and Tasks with YAML Configuration\nDESCRIPTION: Configures a multi-agent system using YAML format. Defines two agents: a researcher who gathers information on AI advancements and a writer who creates content based on that research. Each agent has defined roles, goals, and specific tasks.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/cookbooks/yaml/article_generation_agents.ipynb#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nagent_yaml = \"\"\"framework: \"crewai\"\ntopic: \"AI Advancements in 2024\"\nroles:\n  researcher:\n    role: \"Senior Research Analyst\"\n    backstory: |\n      You are an expert at a technology research group, skilled in identifying trends and analyzing complex data.\n    goal: \"Uncover cutting-edge developments in AI and data science\"\n    verbose: true\n    allow_delegation: false\n    tools:\n      - \"InternetSearchTool\"\n    tasks:\n      task1:\n        description: |\n          Analyze 2024's AI advancements. Find major trends, new technologies, and their effects. Provide a detailed report.\n        expected_output: \"A detailed report on major AI trends, new technologies, and their effects in 2024.\"\n  writer:\n    role: \"Tech Content Strategist\"\n    backstory: |\n      You are a content strategist known for making complex tech topics interesting and easy to understand.\n    goal: \"Craft compelling content on tech advancements\"\n    verbose: true\n    allow_delegation: true\n    tasks:\n      task2:\n        description: |\n          Create a blog post about major AI advancements using your insights. Make it interesting, clear, and suited for tech enthusiasts. It should be at least 4 paragraphs long.\n        expected_output: \"An engaging blog post of at least 4 paragraphs about major AI advancements, suitable for tech enthusiasts.\"\ndependencies: []\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Implementing PraisonAI with Composio Integration\nDESCRIPTION: Complete Python implementation showing how to integrate Composio's SERPAPI tool with PraisonAI, including configuration setup and execution. Uses CrewAI framework for research tasks.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/composio.mdx#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonai import PraisonAI\nfrom composio_praisonai import Action, ComposioToolSet\n\n# Initialize Composio's Toolset\ncomposio_toolset = ComposioToolSet()\n\n# Get the SERPAPI tool\ntools = composio_toolset.get_tools(actions=[Action.SERPAPI_SEARCH])\n\n# Get the tool string for agent_yaml\ntool_section_str = composio_toolset.get_tools_section(tools)\n\n# Example configuration\nagent_yaml = \"\"\"\nframework: \"crewai\"\ntopic: \"Research\"\n\nroles:\n  researcher:\n    role: \"Researcher\"\n    goal: \"Search the internet for the information requested\"\n    backstory: \"A researcher tasked with finding and analyzing information on various topics using available tools.\"\n    tasks:\n      research_task:\n        description: \"Research about open source LLMs vs closed source LLMs.\"\n        expected_output: \"A full analysis report on the topic.\"\n\"\"\" + tool_section_str\n\n# Create PraisonAI instance with the agent_yaml content\npraison_ai = PraisonAI(agent_yaml=agent_yaml)\n\n# Run PraisonAI\nresult = praison_ai.main()\n\n# Print the result\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Creating a Web Scraping Agent in Python\nDESCRIPTION: This Python code defines an AI agent specialized for web scraping using the `Agent` class from `praisonaiagents`. It configures the agent with a name, role, goal, backstory, and a set of tools for scraping and analyzing web content. The `self_reflect` parameter is set to `False` to disable self-reflection for this agent.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/spider_tools.mdx#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n```python\nspider_agent = Agent(\n        name=\"WebSpider\",\n        role=\"Web Scraping Specialist\",\n        goal=\"Extract and analyze web content efficiently.\",\n        backstory=\"Expert in web scraping and content extraction.\",\n        tools=[scrape_page, extract_links, crawl, extract_text],\n        self_reflect=False\n    )\n```\n```\n\n----------------------------------------\n\nTITLE: Creating Knowledge Agent with Configuration\nDESCRIPTION: Illustrates how to set up an advanced knowledge-based agent with configurable options such as specifying a vector store provider. This customization allows for precise control over knowledge management.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/concepts/knowledge.mdx#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent\n\nconfig = {\n    \"vector_store\": {\n        \"provider\": \"chroma\",\n        \"config\": {\n            \"collection_name\": \"custom_knowledge\",\n            \"path\": \".praison\",\n        }\n    }\n}\n\nagent = Agent(\n    name=\"Knowledge Agent\",\n    instructions=\"You answer questions based on the provided knowledge.\",\n    knowledge=[\"small.pdf\"],\n    knowledge_config=config\n)\n\nagent.start(\"What is KAG in one line?\")\n```\n\n----------------------------------------\n\nTITLE: Multi-Turn Educational Conversation Agent\nDESCRIPTION: Implements an educational agent designed to provide patient, adaptive tutoring by gauging student understanding, explaining concepts, and offering progressive learning support.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/course/agents/14-conversational-agents.mdx#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ntutor_agent = Agent(\n    name=\"Math Tutor\",\n    instructions=\"\"\"\n    You are a patient, encouraging math tutor.\n    \n    When teaching:\n    1. Gauge the student's current understanding\n    2. Explain concepts using clear, simple language\n    3. Provide examples to illustrate points\n    4. Ask questions to check understanding\n    5. Give positive reinforcement for progress\n    \n    Adapt your explanations based on the student's responses.\n    \"\"\"\n)\n\n# Example tutoring session\nprint(tutor_agent.start(\"Can you help me understand algebra?\"))\nprint(tutor_agent.continue(\"I'm struggling with equations like 2x + 5 = 13\"))\nprint(tutor_agent.continue(\"So I subtract 5 from both sides first?\"))\nprint(tutor_agent.continue(\"Then I divide by 2 to get x = 4?\"))\nprint(tutor_agent.continue(\"Could you give me another example to practice?\"))\n```\n\n----------------------------------------\n\nTITLE: Configure Aggregator Task\nDESCRIPTION: This Python code configures an aggregator task within the PraisonAI Agents framework, referencing parallel tasks (task1, task2, task3) in its context.  This allows the aggregator to collect and combine results from these tasks.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/parallelisation.mdx#2025-04-19_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# Create an aggregator task\naggregator_task = Task(\n    name=\"aggregate\",\n    description=\"Aggregate results from parallel tasks\",\n    expected_output=\"Combined results\",\n    agent=aggregator,\n    context=[task1, task2, task3]  # Reference parallel tasks\n)\n```\n\n----------------------------------------\n\nTITLE: Context Sharing Between Tasks in Python\nDESCRIPTION: This snippet showcases how to define dependencies between tasks through context sharing, allowing one task to utilize the output from another.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/course/agents/10-agent-tasks.mdx#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ntask_a = Task(name=\"research\")\ntask_b = Task(\n    name=\"analyze\",\n    context=[task_a]  # Uses task_a's output\n)\n```\n\n----------------------------------------\n\nTITLE: Example Agent Configuration - Python\nDESCRIPTION: Demonstrates the creation of an agent for Python development along with the necessary tools to assist in executing Python code, making it suitable for automated development tasks.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/python_tools.mdx#2025-04-19_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nagent = Agent(\n    name=\"PythonDeveloper\",\n    description=\"An agent that helps with Python development\",\n    tools=[\n        execute_code, analyze_code, format_code,\n        lint_code, disassemble_code\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing and Running Excel Agent\nDESCRIPTION: Setup and execution of Excel processing agent with defined tasks\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/excel_tools.mdx#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nagents = PraisonAIAgents(\n    agents=[excel_agent],\n    tasks=[excel_task],\n    process=\"sequential\"\n)\nagents.start()\n```\n\n----------------------------------------\n\nTITLE: Implementing TranslatorTool Class in Python\nDESCRIPTION: This code defines a TranslatorTool class that extends BaseTool from praisonai_tools. It provides functionality to translate text from one language to another using a local translation server.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/cookbooks/yaml/language_translator_agents.ipynb#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport requests\nfrom praisonai_tools import BaseTool\n\nclass TranslatorTool(BaseTool):\n    name: str = \"Translator Tool\"\n    description: str = \"Translate text from one language to another.\"\n\n    def _run(self, q: str, target: str):\n        url = \"http://127.0.0.1:5000/translate\"\n        payload = {\n            \"q\": q,\n            \"source\": \"auto\",\n            \"target\": target\n        }\n        headers = {\n            \"Content-Type\": \"application/json\"\n        }\n\n        response = requests.post(url, json=payload, headers=headers)\n\n        if response.status_code == 200:\n            try:\n                data = response.json()\n                return data\n            except requests.exceptions.JSONDecodeError:\n                return \"Failed to decode JSON from the response.\"\n        else:\n            return f\"Request failed with status code: {response.status_code}\"\n```\n\n----------------------------------------\n\nTITLE: Basic FastMCP Class Implementation Example\nDESCRIPTION: Demonstrates how to create a simple MCP server using the FastMCP class with a custom tool. Shows the proper way to define a tool with documentation, type hints, and run the server with stdio transport.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/mcp/custom.mdx#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom mcp.server.fastmcp import FastMCP\n\n# Create an MCP server with a name\nmcp = FastMCP(\"my_tools\")\n\n# Define a tool using the @mcp.tool decorator\n@mcp.tool()\nasync def my_tool(param1: str, param2: int) -> str:\n    \"\"\"Tool description with clear documentation.\n    \n    Args:\n        param1: Description of param1\n        param2: Description of param2\n        \n    Returns:\n        Description of the return value\n    \"\"\"\n    # Tool implementation\n    return f\"Processed {param1} with {param2}\"\n\n# Run the server with stdio transport\nif __name__ == \"__main__\":\n    mcp.run(transport='stdio')\n```\n\n----------------------------------------\n\nTITLE: Installing Python Packages\nDESCRIPTION: These code snippets demonstrate the installation of the PraisonAI packages using pip, setting environment variables for API keys, and executing scripts to manage agent tasks. Dependencies include Python and `pip` for installation, and configuration of environment variables for API access.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/home.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install praisonai\n```\n\nLANGUAGE: bash\nCODE:\n```\nexport OPENAI_API_KEY=xxxxxxxxxxxxxxxxxxxxxx\n```\n\nLANGUAGE: bash\nCODE:\n```\npraisonai --auto create a movie script about Robots in Mars\n```\n\nLANGUAGE: bash\nCODE:\n```\npip install praisonaiagents\n```\n\nLANGUAGE: bash\nCODE:\n```\npython app.py\n```\n\n----------------------------------------\n\nTITLE: Advanced Agent Instructions\nDESCRIPTION: Example of providing detailed and specific instructions to an AI agent for research. The agent is tasked with gathering information on AI developments, machine learning breakthroughs, and industry applications.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/mini.mdx#2025-04-19_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n# Detailed instructions\nresearch_agent = Agent(\n    instructions=\"\"\"\n    You are a research agent focused on gathering information about:\n    1. Latest AI developments in 2024\n    2. Major breakthroughs in machine learning\n    3. New AI applications in industry\n    \n    Provide detailed and accurate information from reliable sources.\n    \"\"\"\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing and Running JSON Processing Agents\nDESCRIPTION: Set up and start JSON processing agents with sequential task processing\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/json_tools.mdx#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nagents = PraisonAIAgents(\n    agents=[json_agent],\n    tasks=[json_task],\n    process=\"sequential\"\n)\nagents.start()\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic XML Processing Agent - Python\nDESCRIPTION: This example illustrates the creation and execution of a basic XML processing agent with a defined task. It showcases the agent's setup and functionality within the context of PraisonAI, demonstrating a simple use case.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/xml_tools.mdx#2025-04-19_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent, Task, PraisonAIAgents\nfrom praisonaiagents.tools import read_xml, write_xml, transform_xml, validate_xml, xml_to_dict, dict_to_xml\n\n# Create XML agent\nxml_agent = Agent(\n    name=\"XMLExpert\",\n    role=\"XML Processing Specialist\",\n    goal=\"Process XML files efficiently and accurately.\",\n    backstory=\"Expert in XML file handling and validation.\",\n    tools=[read_xml, write_xml, transform_xml, validate_xml, xml_to_dict, dict_to_xml],\n    self_reflect=False\n)\n\n# Define XML task\nxml_task = Task(\n    description=\"Parse and validate XML configurations.\",\n    expected_output=\"Processed and validated XML data.\",\n    agent=xml_agent,\n    name=\"config_processing\"\n)\n\n# Run agent\nagents = PraisonAIAgents(\n    agents=[xml_agent],\n    tasks=[xml_task],\n    process=\"sequential\"\n)\nagents.start()\n```\n\n----------------------------------------\n\nTITLE: Creating Config File for Multiple Agents - YAML\nDESCRIPTION: This YAML snippet delineates how to configure multiple agents with respective roles and instructions in PraisonAI. It's a setup for predefined tasks for each agent.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/introduction.mdx#2025-04-19_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nroles:\n  diet_agent:\n    instructions: Give me 5 healthy food recipes\n  blog_agent:\n    instructions: Write a blog post about the food recipes\n```\n\n----------------------------------------\n\nTITLE: Implementing Presentation Video Analysis\nDESCRIPTION: Specialized implementation for analyzing presentation videos, including extraction of key points, slide content, and speaker arguments.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/agents/video.mdx#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent, Task, PraisonAIAgents\n\nvideo_agent = Agent(\n    name=\"VideoAnalyst\",\n    role=\"Video Analysis Specialist\",\n    goal=\"Extract information from presentation videos\",\n    llm=\"gpt-4o-mini\"\n)\n\n# Create presentation analysis task\npresentation_task = Task(\n    name=\"analyze_presentation\",\n    description=\"\"\"Analyze this presentation video:\n        1. Extract key points\n        2. Capture slide content\n        3. Note speaker's main arguments\n        4. Summarize Q&A session\"\"\",\n    expected_output=\"Detailed presentation summary\",\n    agent=video_agent,\n    images=[\"presentation.mp4\"]\n)\n\n# Run analysis\nagents = PraisonAIAgents(\n    agents=[video_agent],\n    tasks=[presentation_task],\n    process=\"sequential\"\n)\nagents.start()\n```\n\n----------------------------------------\n\nTITLE: Creating a Single AI Agent in Python\nDESCRIPTION: Python code example that demonstrates how to create and use a single AI agent to perform a task.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/README.md#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent\nagent = Agent(instructions=\"Your are a helpful AI assistant\")\nagent.start(\"Write a movie script about a robot in Mars\")\n```\n\n----------------------------------------\n\nTITLE: Integrating PraisonAI with RAW YAML Configuration in Python\nDESCRIPTION: This snippet demonstrates how to integrate and run the PraisonAI package using a raw YAML configuration within the script. It imports the package, sets up a YAML configuration, runs the instance, and prints the result. No additional files are required beyond the PraisonAI package.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/developers/wrapper.mdx#2025-04-19_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom praisonai import PraisonAI\n\n# Example agent_yaml content\nagent_yaml = \"\"\"\nframework: \"crewai\"\ntopic: \"Space Exploration\"\n\nroles:\n  astronomer:\n    role: \"Space Researcher\"\n    goal: \"Discover new insights about {topic}\"\n    backstory: \"You are a curious and dedicated astronomer with a passion for unraveling the mysteries of the cosmos.\"\n    tasks:\n      investigate_exoplanets:\n        description: \"Research and compile information about exoplanets discovered in the last decade.\"\n        expected_output: \"A summarized report on exoplanet discoveries, including their size, potential habitability, and distance from Earth.\"\n\"\"\"\n\n# Create a PraisonAI instance with the agent_yaml content\npraisonai = PraisonAI(agent_yaml=agent_yaml)\n\n# Run PraisonAI\nresult = praisonai.run()\n\n# Print the result\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Configuring Stock Analysis Agents in YAML\nDESCRIPTION: This YAML configuration defines a framework and roles for automated stock analysis, targeting financial analysis and investment recommendations. It specifies roles with tasks, goals, and the tools they should employ, aiding in structured automation of stock analytics.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/cookbooks/yaml/stock_analysis_agents.ipynb#2025-04-19_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"\nagent_yaml = \"\"\"\nframework: \"crewai\"\ntopic: \"Automated Stock Analysis and Investment Recommendation\"\nroles:\n  financial_analyst:\n    role: \"The Best Financial Analyst\"\n    backstory: |\n      A seasoned financial analyst with deep expertise in stock market analysis and investment\n      strategies, working to impress a highly important customer.\n    goal: \"Deliver impressive financial data and market trends analysis.\"\n    tasks:\n      financial_analysis:\n        description: |\n          Conduct a thorough analysis of NVIDIA's financial health and market performance.\n          Examine key financial metrics such as P/E ratio, EPS growth, revenue trends, and debt-to-equity ratio.\n          Analyze the stock's performance relative to its industry peers and overall market trends.\n        expected_output: |\n          The final report must expand on the initial summary, providing a clear assessment of the stock's financial standing,\n          strengths and weaknesses, and comparison with competitors in the current market. Use the most recent data available.\n    tools:\n      - \"ScrapeWebsiteTool\"\n      - \"WebsiteSearchTool\"\n      - \"CalculatorTool\"\n      - \"SEC10QTool\"\n      - \"SEC10KTool\"\n\n  research_analyst:\n    role: \"Staff Research Analyst\"\n    backstory: |\n      Known as the top research analyst, skilled in interpreting data, tracking company news,\n      and uncovering market sentiments. Working on a critical analysis for an important client.\n    goal: \"Excel in gathering and interpreting data to impress the customer.\"\n    tasks:\n      research:\n        description: |\n          Collect and summarize recent news articles, press releases, and market analyses related to NVIDIA\n          and its industry. Pay attention to significant events, market sentiments, and analyst opinions.\n          Include upcoming events like earnings and others.\n        expected_output: |\n          A report that includes a comprehensive summary of recent news, notable shifts in market sentiment,\n          and potential impacts on the stock. Include the stock ticker as NVIDIA. Use the most current data available.\n    tools:\n      - \"ScrapeWebsiteTool\"\n      - \"SEC10QTool\"\n      - \"SEC10KTool\"\n\n  investment_advisor:\n    role: \"Private Investment Advisor\"\n    backstory: |\n      An experienced investment advisor who integrates various analytical insights to create strategic\n      investment advice, aiming to impress a highly important client.\n    goal: \"Provide a comprehensive analysis and investment recommendation for the customer.\"\n    tasks:\n      recommend:\n        description: |\n          Review and synthesize analyses from the Financial Analyst and Research Analyst. Combine these insights\n          into a comprehensive investment recommendation, considering all aspects, including financial health,\n          market sentiment, and qualitative data from EDGAR filings. Include insider trading activity and upcoming events like earnings.\n        expected_output: |\n          The final recommendation must be a super detailed report, offering a clear investment stance and strategy with supporting evidence.\n          Ensure it is well-formatted and visually appealing for the customer.\n    tools:\n      - \"ScrapeWebsiteTool\"\n      - \"WebsiteSearchTool\"\n      - \"CalculatorTool\"\n\ndependencies: []\n\"\"\"\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Defining Agent Roles and Tasks in YAML\nDESCRIPTION: YAML configuration defining three AI agents: a personalized activity planner, restaurant scout, and itinerary compiler. Each agent has specific roles, goals, and tasks for creating a comprehensive travel plan.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/cookbooks/yaml/surprise_trip_planner_and_itinerary_agents.ipynb#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nagent_yaml = \"\"\"\nframework: \"crewai\"\ntopic: \"Surprise Travel Planning and Itinerary Compilation\"\nroles:\n  personalized_activity_planner:\n    role: \"Personalized Activity Planner\"\n    backstory: |\n      A specialist in creating personalized activities based on traveler preferences and interests. You excel at tailoring unique experiences that enhance the traveler's trip.\n    goal: |\n      Plan personalized activities that align with the traveler's interests, ensuring a memorable and engaging travel experience.\n    verbose: true\n    allow_delegation: false\n    tools:\n      - \"SerperDevTool\"\n      - \"WebContentReaderTool\"\n    tasks:\n      personalized_activity_planning_task:\n        description: |\n          Develop a customized list of activities for each day of the trip based on the traveler's interests and preferences. Ensure that the activities are diverse, engaging, and suitable for the destination.\n        expected_output: \"A detailed list of personalized activities for each day, including descriptions, locations, and reasons for their selection.\"\n  restaurant_scout:\n    role: \"Restaurant Scout\"\n    backstory: |\n      An expert in discovering the best dining spots in the city. You have extensive knowledge of local cuisines, hidden gems, and top-rated restaurants that cater to various tastes and preferences.\n    goal: |\n      Identify and recommend the best restaurants and scenic dining locations that match the traveler's culinary preferences and enhance their overall trip experience.\n    verbose: true\n    allow_delegation: false\n    tools:\n      - \"SerperDevTool\"\n      - \"WebContentReaderTool\"\n    tasks:\n      restaurant_scenic_location_scout_task:\n        description: |\n          Research and compile a list of top restaurants and scenic dining locations in the destination. Include details such as cuisine type, location, ambiance, and why each spot is suitable for the traveler.\n        expected_output: \"A curated list of recommended restaurants and scenic dining locations with detailed descriptions and justifications for each recommendation.\"\n  itinerary_compiler:\n    role: \"Itinerary Compiler\"\n    backstory: |\n      A master planner skilled in organizing comprehensive travel itineraries. You seamlessly integrate activities, dining, and logistics to create a cohesive and enjoyable travel plan.\n    goal: |\n      Compile all planned activities and restaurant recommendations into a structured 14-day itinerary, ensuring optimal flow and balance between different types of engagements.\n    verbose: true\n    allow_delegation: false\n    tools:\n      - \"SerperDevTool\"\n    tasks:\n      itinerary_compilation_task:\n        description: |\n          Consolidate the personalized activities and restaurant recommendations into a detailed 14-day itinerary. Include daily schedules, locations, descriptions, and any necessary logistical information.\n        expected_output: \"A complete 14-day travel itinerary in JSON format, detailing daily activities, dining options, and logistical information.\"\ndependencies: []\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Context Managers for Resource Management\nDESCRIPTION: Shows how to use context managers (with/async with) to properly handle resource allocation and cleanup. This pattern ensures resources are correctly released even when exceptions occur.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/tools.mdx#2025-04-19_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nasync with aiohttp.ClientSession() as session:\n    # Resource automatically managed\n    await process_data(session)\n```\n\n----------------------------------------\n\nTITLE: Implementing JinaSearch with PraisonAI Agents\nDESCRIPTION: Complete implementation of JinaSearch functionality using PraisonAI agents, including a search function and agent configuration for generating a listicle blog about coding websites.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/external/jina-search.mdx#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent, PraisonAIAgents\nfrom langchain_community.tools import JinaSearch\nimport os \n\ndef invoke_jina_search(query: str):\n    JinaSearchTool = JinaSearch()\n    model_generated_tool_call = {\n        \"args\": {\"query\": query},\n        \"id\": \"1\",\n        \"name\": JinaSearchTool.name,\n        \"type\": \"tool_call\",\n    }\n    tool_msg = JinaSearchTool.invoke(model_generated_tool_call)\n    return(tool_msg.content[:1000])\n\ndata_agent = Agent(instructions=\"Find 10 websites where I can learn coding for free\", tools=[invoke_jina_search])\neditor_agent = Agent(instructions=\"write a listicle blog ranking the best websites. The blog should contain a proper intro and conclusion\")\nagents = PraisonAIAgents(agents=[data_agent, editor_agent], process='hierarchical')\nagents.start()\n```\n\n----------------------------------------\n\nTITLE: Configuring Agent YAML\nDESCRIPTION: YAML configuration for setting up the research agent with InternetSearchTool integration\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/custom.mdx#2025-04-19_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nframework: crewai\ntopic: research about the causes of lung disease\nroles:\n  research_analyst:\n    backstory: Experienced in analyzing scientific data related to respiratory health.\n    goal: Analyze data on lung diseases\n    role: Research Analyst\n    tasks:\n      data_analysis:\n        description: Gather and analyze data on the causes and risk factors of lung diseases.\n        expected_output: Report detailing key findings on lung disease causes.\n    tools:\n    - InternetSearchTool\n```\n\n----------------------------------------\n\nTITLE: Starting Multiple AI Agents\nDESCRIPTION: This example illustrates how to create and start multiple AI agents working in coordination to perform a research task and summarize the findings using the PraisonAI framework.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/js/js.mdx#2025-04-19_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst { Agent, PraisonAIAgents } = require('praisonai');\n\nconst researchAgent = new Agent({ instructions: 'Research about AI' });\nconst summariseAgent = new Agent({ instructions: 'Summarise research agent\\'s findings' });\n\nconst agents = new PraisonAIAgents({ agents: [researchAgent, summariseAgent] });\nagents.start();\n```\n\n----------------------------------------\n\nTITLE: Initializing and Executing PraisonAI with Python\nDESCRIPTION: Sets up a PraisonAI instance using Google Colab's user data and the 'agent_yaml'. It requires 'praisonai', and verifies OpenAI API credentials before running the tool for tweet generation and verification.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/cookbooks/yaml/shakespearean_tweets_generation_agents.ipynb#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom praisonai import PraisonAI\nfrom google.colab import userdata\n\n# Create a PraisonAI instance with the agent_yaml content\npraisonai = PraisonAI(agent_yaml=agent_yaml, tools=[CharacterCounterTool])\n\n# Add OPENAI_API_KEY Secrets to Google Colab on the Left Hand Side 🔑 or Enter Manually Below\nos.environ[\"OPENAI_API_KEY\"] = userdata.get('OPENAI_API_KEY') or \"ENTER OPENAI_API_KEY HERE\"\nos.environ[\"OPENAI_MODEL_NAME\"] = \"gpt-4o-mini\"\n\n# Run PraisonAI\nresult = praisonai.run()\n\n# Print the result\nprint(result) # 10/10\n\n```\n\n----------------------------------------\n\nTITLE: Custom Memory Implementation in PraisonAI (Python)\nDESCRIPTION: This snippet shows how to implement a custom memory system within the PraisonAI framework. It involves creating a `Memory` object, adding specific information to it, and then initializing an agent with this custom memory, allowing the agent to access and utilize the stored information during interactions.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/course/agents/06-agent-memory.mdx#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Note: TODO: This Feature yet to be tested\nfrom praisonaiagents import Agent, Memory\n\n# Create a simple memory store\nmemory = Memory()\n\n# Add information to memory\nmemory.add(\"user_name\", \"Alex\")\nmemory.add(\"favorite_color\", \"blue\")\n\n# Create agent with this memory\nagent = Agent(\n    instructions=\"You are a personal assistant\",\n    memory=memory\n)\n\n# The agent can now access these memories\nagent.start(\"What's my favorite color?\")  # Agent should respond \"blue\"\n```\n\n----------------------------------------\n\nTITLE: YAML Configuration for Multi-Agent System\nDESCRIPTION: Sets up a YAML configuration for a multi-agent system, detailing roles and tasks for each agent involved in a document analysis and content creation process.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/multimodal.mdx#2025-04-19_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nframework: praisonai\nprocess: sequential\ntopic: document analysis and content creation\nroles:\n  vision_analyst:\n    role: Image Analyst\n    goal: Analyze visual content and extract key information\n    backstory: Expert in visual analysis and image understanding\n    llm: gpt-4o-mini\n    self_reflect: false\n    tasks:\n      document_task:\n        description: Extract and summarize text from this document image\n        expected_output: Structured text content with key information highlighted\n        images:\n          - document.jpg\n\n  content_writer:\n    role: Content Writer\n    goal: Create engaging content based on image analysis\n    backstory: Expert in creating compelling content from visual insights\n    llm: gpt-4o-mini\n    tasks:\n      writing_task:\n        description: Create engaging content based on image analysis\n        expected_output: Compelling article incorporating visual insights\n```\n\n----------------------------------------\n\nTITLE: Generating Technical Documentation with Markdown Agent\nDESCRIPTION: Example of using the Markdown Agent to generate technical documentation for a REST API. This demonstrates a more complex use case for content generation.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/agents/markdown.mdx#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# Example: Generate a technical documentation\nagent = Agent(\n    instructions=\"You are a Markdown Agent, output in markdown format\"\n)\n\n# Generate API documentation\nresponse = agent.start(\"\"\"\n    Create technical documentation for a REST API with:\n    - Introduction\n    - Authentication\n    - Endpoints\n    - Examples\n\"\"\")\n\n# Save documentation\nwith open('api_docs.md', 'w') as f:\n    f.write(response)\n```\n\n----------------------------------------\n\nTITLE: Configuring PraisonAI Agents with YAML\nDESCRIPTION: YAML configuration for PraisonAI Agents showing how to set up agents, tasks, and callbacks without code. This approach allows declarative configuration of the framework, defining researcher and writer roles with their respective tasks and comprehensive callback logging.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/callbacks.mdx#2025-04-19_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\nframework: praisonai\nprocess: sequential\ntopic: demonstrate advanced callback features\nroles:\n  researcher:\n    backstory: Expert at a technology research group specializing in AI trends\n    goal: Uncover cutting-edge developments in AI and data science\n    role: Senior Research Analyst\n    tasks:\n      research_task:\n        description: Analyze 2024's AI advancements\n        expected_output: A detailed report on 2024 AI advancements\n    tools:\n    - internet_search_tool\n  writer:\n    backstory: Content strategist skilled in technical communication\n    goal: Craft compelling content on tech advancements\n    role: Tech Content Strategist\n    tasks:\n      writing_task:\n        description: Create a blog post about major AI advancements\n        expected_output: A blog post of at least 4 paragraphs\n      save_output_task:\n        description: Save the AI blog post to a file\n        expected_output: File saved successfully\n    tools:\n    - file_tool\ncallbacks:\n  interaction:\n    type: sync\n    enabled: true\n    log_file: advanced_interactions.log\n  error:\n    type: sync\n    enabled: true\n    log_file: advanced_errors.log\n  tool_call:\n    type: sync\n    enabled: true\n    log_file: advanced_tools.log\n  instruction:\n    type: sync\n    enabled: true\n    log_file: advanced_instructions.log\n  self_reflection:\n    type: sync\n    enabled: true\n    log_file: advanced_reflections.log\n  generating:\n    type: sync\n    enabled: true\n    log_file: advanced_generating.log\n```\n\n----------------------------------------\n\nTITLE: Single Agent Sequential Process in PraisonAI (Python)\nDESCRIPTION: This Python code demonstrates creating a single agent and running a sequential process in PraisonAI. It defines an agent with a role, goal, and backstory, then creates a task for the agent. Finally, it initializes `PraisonAIAgents` to run the task sequentially and starts the process.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/concepts/process.mdx#2025-04-19_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent, Task, PraisonAIAgents\n\n# Create an agent\nresearcher = Agent(\n    name=\"Researcher\",\n    role=\"Senior Research Analyst\",\n    goal=\"Uncover cutting-edge developments in AI\",\n    backstory=\"You are an expert at a technology research group\",\n    verbose=True,\n    llm=\"gpt-4o\"\n)\n\n# Define a task\ntask = Task(\n    name=\"research_task\",\n    description=\"Analyze 2024's AI advancements\",\n    expected_output=\"A detailed report\",\n    agent=researcher\n)\n\n# Run the agents\nagents = PraisonAIAgents(\n    agents=[researcher],\n    tasks=[task],\n    verbose=False,\n    process=\"sequential\"\n)\n\nresult = agents.start()\n```\n\n----------------------------------------\n\nTITLE: Defining an Internet Search Tool - Python\nDESCRIPTION: This snippet defines a Python function that performs an internet search using the DuckDuckGo API. It takes a search query as input and returns a list of results containing titles, URLs, and snippets.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/tools.mdx#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef internet_search_tool(query: str):\n    results = []\n    ddgs = DDGS()\n    for result in ddgs.text(keywords=query, max_results=5):\n        results.append({\n            \"title\": result.get(\"title\", \"\"),\n            \"url\": result.get(\"href\", \"\"),\n            \"snippet\": result.get(\"body\", \"\")\n        })\n    return results\n```\n\n----------------------------------------\n\nTITLE: Analyzing Code Structure Function - Python\nDESCRIPTION: Analyzes a given Python code snippet to extract its structural components, including functions, classes, and their respective details, as well as overall complexity metrics.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/python_tools.mdx#2025-04-19_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nanalysis = analyze_code(\"\"\"\ndef greet(name):\n    return f\"Hello, {name}!\"\n\nclass Person:\n    def __init__(self, name):\n        self.name = name\n\"\"\")\n```\n\n----------------------------------------\n\nTITLE: Advanced AutoAgents Configuration Example in Python\nDESCRIPTION: Example showing advanced configuration of AutoAgents with multiple parameters including reflection and delegation.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/api/praisonaiagents/agents/autoagents.mdx#2025-04-19_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nagents = AutoAgents(\n    instructions=\"Complex research task\",\n    tools=[SerperDevTool()],\n    max_agents=5,\n    process=\"hierarchical\",\n    manager_llm=\"gpt-4o\",\n    memory=True,\n    allow_delegation=True,\n    max_execution_time=600,\n    self_reflect=True\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Python Script with Multiple Tools\nDESCRIPTION: This code demonstrates creating a Python script with multiple PraisonAI agents equipped with YouTube and Wikipedia tools, designed for searching and aggregating information from these platforms.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/langchain.mdx#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent, Task, PraisonAIAgents\nfrom langchain_community.tools import YouTubeSearchTool\nfrom langchain_community.utilities import WikipediaAPIWrapper\n\n# Create YouTube search agent\nagent = Agent(\n    name=\"SearchAgent\",\n    role=\"Research Assistant\",\n    goal=\"Search for information from YouTube\",\n    backstory=\"I am an AI assistant that can search YouTube for relevant videos.\",\n    tools=[YouTubeSearchTool],\n    self_reflect=False\n)\n\n# Create Wikipedia research agent\nagent2 = Agent(\n    name=\"WikiAgent\",\n    role=\"Research Assistant\",\n    goal=\"Search for information from Wikipedia\",\n    backstory=\"I am an AI assistant that can search Wikipedia for accurate information.\",\n    tools=[WikipediaAPIWrapper],\n    self_reflect=False\n)\n\n# Create YouTube search task\ntask = Task(\n    name=\"search_task\",\n    description=\"Search for information about 'AI advancements' on YouTube\",\n    expected_output=\"Relevant information from YouTube videos\",\n    agent=agent\n)\n\n# Create Wikipedia research task\ntask2 = Task(\n    name=\"wiki_task\",\n    description=\"Search for information about 'AI advancements' on Wikipedia\",\n    expected_output=\"Comprehensive information from Wikipedia articles\",\n    agent=agent2\n)\n\n# Create and start the workflow\nagents = PraisonAIAgents(\n    agents=[agent, agent2],\n    tasks=[task, task2],\n    verbose=True\n)\n\nagents.start()\n```\n\n----------------------------------------\n\nTITLE: Basic CSV File Reading Example\nDESCRIPTION: Examples of reading CSV files with basic and advanced options using the read_csv function.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/csv_tools.mdx#2025-04-19_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# Basic usage\ndata = read_csv(\"data.csv\")\n\n# Advanced usage with options\ndata = read_csv(\n    \"data.csv\",\n    encoding='utf-8',\n    delimiter=',',\n    header=0,\n    usecols=['name', 'age', 'city'],\n    dtype={'age': 'int32'},\n    parse_dates=['birth_date'],\n    na_values=['N/A', 'missing'],\n    nrows=1000\n)\n```\n\n----------------------------------------\n\nTITLE: Tool Integration with DuckDuckGo Search\nDESCRIPTION: The snippet shows how to integrate a custom web search tool using DuckDuckGo within the PraisonAI framework. It performs a search and returns results in a structured format. The integration relies on the 'duckduckgo_search' package, which must be installed. Inputs are search queries as strings, and outputs are lists of dictionaries with results.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/framework/praisonaiagents.mdx#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom duckduckgo_search import DDGS\n\ndef search_tool(query: str) -> list:\n    \"\"\"\n    Perform a web search using DuckDuckGo and return relevant results.\n\n    Args:\n        query (str): The search query string to look up information about.\n\n    Returns:\n        list: A list of dictionaries containing search results with the following keys:\n            - title (str): The title of the search result\n            - url (str): The URL of the search result\n            - snippet (str): A brief excerpt or description of the search result\n    \"\"\"\n    results = []\n    ddgs = DDGS()\n    for result in ddgs.text(keywords=query, max_results=10):\n        results.append({\n            \"title\": result.get(\"title\", \"\"),\n            \"url\": result.get(\"href\", \"\"),\n            \"snippet\": result.get(\"body\", \"\"),\n        })\n    return results\n\nagent = Agent(\n    name=\"Researcher\",\n    tools=[search_tool]\n)\n```\n\n----------------------------------------\n\nTITLE: Starting a Single AI Agent\nDESCRIPTION: This snippet demonstrates how to create and run a single AI agent that takes a set of instructions and executes a defined task, specifically writing a movie script.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/js/js.mdx#2025-04-19_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst { Agent } = require('praisonai');\nconst agent = new Agent({ instructions: 'You are a helpful AI assistant' });\nagent.start('Write a movie script about a robot in Mars');\n```\n\n----------------------------------------\n\nTITLE: Loop Task Definition in Python\nDESCRIPTION: This code snippet illustrates the creation of a loop task which processes each item within a data list, thus automating repetitive operations.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/course/agents/10-agent-tasks.mdx#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nloop_task = Task(\n    type=\"loop\",\n    items=data_list,\n    operation=\"process_item\"\n)\n```\n\n----------------------------------------\n\nTITLE: Python Implementation of Synthetic Reasoning Data Generation Workflow\nDESCRIPTION: Comprehensive Python script utilizing PraisonAI Agents for generating, evaluating, and uploading chain-of-thought reasoning data with specialized agents and task workflows\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/generate-reasoning.mdx#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent, Task, PraisonAIAgents\nfrom praisonaiagents.tools import cot_save, cot_upload_to_huggingface\nfrom pydantic import BaseModel\nimport os\n\n# Define Pydantic model for structured output\nclass DecisionModel(BaseModel):\n    response: str\n    decision: str\n\ndef write_csv(file_path, data):\n    \"\"\"Write data to CSV file.\"\"\"\n    if not os.path.exists(file_path):\n        with open(file_path, 'w') as file:\n            file.write(data + '\\n')\n    else:\n        with open(file_path, 'a') as file:\n            file.write(data + '\\n')\n    return f\"Data appended to {file_path}\"\n\ndef count_questions(file_path):\n    \"\"\"Count lines in file.\"\"\"\n    with open(file_path, 'r') as file:\n        return sum(1 for _ in file)\n\n# Create specialized agents\nqa_generator = Agent(\n    name=\"Generator\",\n    role=\"Question Creator\",\n    goal=\"Create challenging math and logic questions\",\n    backstory=\"Expert in educational content creation\",\n    llm=\"gpt-4o-mini\",\n    tools=[write_csv, count_questions]\n)\n\n# Additional agent definitions and task configurations...\n\n# Initialize workflow\nagents = PraisonAIAgents(\n    agents=[qa_generator, total_questions_evaluator, cot_generator, upload_to_huggingface],\n    tasks=[generate_task, evaluate_total_questions_task, generate_cot_task, upload_to_huggingface_task],\n    process=\"workflow\",\n    max_iter=30,\n    verbose=False\n)\n\nagents.start()\n```\n\n----------------------------------------\n\nTITLE: Executing PraisonAI in Different Modes with Python\nDESCRIPTION: Demonstrates the use of the PraisonAI package across multiple execution modes: basic, advanced with options, and automatic. It showcases how to pass additional parameters like framework and automate tasks through scripting. This snippet requires 'agents.yaml' and supports the 'autogen' framework for advanced modes.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/developers/wrapper.mdx#2025-04-19_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nfrom praisonai import PraisonAI\n\ndef basic(): # Basic Mode\n    praisonai = PraisonAI(agent_file=\"agents.yaml\")\n    praisonai.run()\n    \ndef advanced(): # Advanced Mode with options\n    praisonai = PraisonAI(\n        agent_file=\"agents.yaml\",\n        framework=\"autogen\", # use AG2 framework (Formerly AutoGen)\n    )\n    praisonai.run()\n    \ndef auto(): # Full Automatic Mode\n    praisonai = PraisonAI(\n        auto=\"Create a movie script about car in mars\",\n        framework=\"autogen\" # use AG2 framework\n    )\n    print(praisonai.framework)\n    praisonai.run()\n\nif __name__ == \"__main__\":\n    basic()\n    advanced()\n    auto()\n```\n\n----------------------------------------\n\nTITLE: Implementing YouSearchTool for You.com API Integration in Python\nDESCRIPTION: This code defines a YouSearchTool class that extends BaseTool to integrate You.com search functionality. It uses the YouSearchAPIWrapper from langchain_community to perform searches based on user queries.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/cookbooks/yaml/you_search_analysis_agents.ipynb#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonai_tools import BaseTool\nfrom langchain_community.utilities.you import YouSearchAPIWrapper\n\nclass YouSearchTool(BaseTool):\n    name: str = \"You Search Tool\"\n    description: str = \"Search You.com for relevant information based on a query.\"\n\n    def _run(self, query: str):\n        api_wrapper = YouSearchAPIWrapper()\n        results = api_wrapper.results(query=query, max_results=5)\n        return results\n```\n\n----------------------------------------\n\nTITLE: Initializing and Running DuckDB Agent\nDESCRIPTION: Configure and start the AI agents for database operations in sequential mode.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/duckdb_tools.mdx#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nagents = PraisonAIAgents(\n    agents=[db_agent],\n    tasks=[db_task],\n    process=\"sequential\"\n)\nagents.start()\n```\n\n----------------------------------------\n\nTITLE: Creating AI Agents for Code Review in Python\nDESCRIPTION: This Python code defines and configures AI agents for code analysis, fix suggestion, and fix application using the PraisonAI Agents package. It sets up a workflow that simulates code review, proposes fixes, and applies them automatically based on predefined conditions. The workflow includes an analyzer, a suggester, and an applier agents.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/examples/code-review.mdx#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n\"from praisonaiagents import Agent, Task, PraisonAIAgents\nimport time\nfrom typing import List, Dict\n\n        def analyze_code_changes():\n            \\\"\\\"\\\"Simulates code analysis\\\"\\\"\\\"    \n            issues = [\n                {\"type\": \"style\", \"severity\": \"low\", \"file\": \"main.py\"},\n                {\"type\": \"security\", \"severity\": \"high\", \"file\": \"auth.py\"},\n                {\"type\": \"performance\", \"severity\": \"medium\", \"file\": \"data.py\"}\n            ]\n            return issues[int(time.time()) % 3]\n\n        def suggest_fixes(issue: Dict):\n            \\\"\\\"\\\"Simulates fix suggestions\\\"\\\"\\\"    \n            fixes = {\n                \"style\": \"Apply PEP 8 formatting\",\n                \"security\": \"Implement input validation\",\n                \"performance\": \"Use list comprehension\"\n            }\n            return fixes.get(issue[\"type\"], \"Review manually\")\n\n        def apply_automated_fix(fix: str):\n            \\\"\\\"\\\"Simulates applying automated fixes\\\"\\\"\\\"    \n            success = int(time.time()) % 2 == 0\n            return \"fixed\" if success else \"manual_review\"\n\n        # Create specialized agents\n        analyzer = Agent(\n            name=\"Code Analyzer\",\n            role=\"Code analysis\",\n            goal=\"Analyze code changes and identify issues\",\n            instructions=\"Review code changes and report issues\",\n            tools=[analyze_code_changes]\n        )\n\n        fix_suggester = Agent(\n            name=\"Fix Suggester\",\n            role=\"Solution provider\",\n            goal=\"Suggest fixes for identified issues\",\n            instructions=\"Provide appropriate fix suggestions\",\n            tools=[suggest_fixes]\n        )\n\n        fix_applier = Agent(\n            name=\"Fix Applier\",\n            role=\"Fix implementation\",\n            goal=\"Apply suggested fixes automatically when possible\",\n            instructions=\"Implement suggested fixes and report results\",\n            tools=[apply_automated_fix]\n        )\n\n        # Create workflow tasks\n        analysis_task = Task(\n            name=\"analyze_code\",\n            description=\"Analyze code changes for issues\",\n            expected_output=\"Identified code issues\",\n            agent=analyzer,\n            is_start=True,\n            next_tasks=[\"suggest_fixes\"]\n        )\n\n        suggestion_task = Task(\n            name=\"suggest_fixes\",\n            description=\"Suggest fixes for identified issues\",\n            expected_output=\"Fix suggestions\",\n            agent=fix_suggester,\n            next_tasks=[\"apply_fixes\"]\n        )\n\n        fix_task = Task(\n            name=\"apply_fixes\",\n            description=\"Apply suggested fixes\",\n            expected_output=\"Fix application status\",\n            agent=fix_applier,\n            task_type=\"decision\",\n            condition={\n                \"fixed\": \"\",\n                \"manual_review\": [\"suggest_fixes\"]  # Loop back for manual review\n            }\n        )\n\n        # Create workflow\n        workflow = PraisonAIAgents(\n            agents=[analyzer, fix_suggester, fix_applier],\n            tasks=[analysis_task, suggestion_task, fix_task],\n            process=\"workflow\",\n            verbose=True\n        )\n\n        def main():\n            print(\"\\nStarting Code Review Workflow...\")\n            print(\"=\" * 50)\n            \n            # Run workflow\n            results = workflow.start()\n            \n            # Print results\n            print(\"\\nCode Review Results:\")\n            print(\"=\" * 50)\n            for task_id, result in results[\"task_results\"].items():\n                if result:\n                    print(f\"\\nTask: {task_id}\")\n                    print(f\"Result: {result.raw}\")\n                    print(\"-\" * 50)\n\n        if __name__ == \"__main__\":\n            main()\"\n```\n\n----------------------------------------\n\nTITLE: Using Asynchronous Operations for I/O-bound Tasks\nDESCRIPTION: Shows implementation of asynchronous programming with async/await for I/O-bound operations. This approach improves performance by allowing concurrent execution of network requests.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/tools.mdx#2025-04-19_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nasync def fetch_data(urls: List[str]):\n    async with aiohttp.ClientSession() as session:\n        tasks = [fetch_url(session, url) for url in urls]\n        return await asyncio.gather(*tasks)\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Task Definition with Callback\nDESCRIPTION: This code defines an asynchronous task with a specified callback function.  The `Task` is configured to run asynchronously and trigger the provided callback after completion, facilitating post-processing and data persistence.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/async.mdx#2025-04-19_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n# Create an async task with callback\n  async_task = Task(\n      name=\"weather_task\",\n      description=\"Check weather conditions\",\n      agent=agent,\n      async_execution=True,\n      callback=async_callback\n  )\n```\n\n----------------------------------------\n\nTITLE: Creating a Slack-Enabled AI Agent with PraisonAI\nDESCRIPTION: Creates a Python script that initializes an AI agent with Slack integration capabilities using MCP. The agent can send messages to Slack channels and perform other Slack operations.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/mcp/slack.mdx#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent, MCP\nimport os\n\n# Get Slack credentials from environment\nslack_token = os.getenv(\"SLACK_BOT_TOKEN\")\nslack_team_id = os.getenv(\"SLACK_TEAM_ID\")\n\n# Use a single string command with Slack configuration\nslack_agent = Agent(\n    instructions=\"\"\"You are a helpful assistant that can interact with Slack.\n    Use the available tools when relevant to manage Slack communications.\"\"\",\n    llm=\"gpt-4o-mini\",\n    tools=MCP(\"npx -y @modelcontextprotocol/server-slack\",\n            env={\n                \"SLACK_BOT_TOKEN\": slack_token,\n                \"SLACK_TEAM_ID\": slack_team_id\n            })\n)\n\nslack_agent.start(\"Send a message to the general channel\")\n```\n\n----------------------------------------\n\nTITLE: Multiple Callback Types Implementation\nDESCRIPTION: This Python code demonstrates how to register multiple callback types, specifically for errors and tool calls. It defines separate callback functions for each event and registers them using `register_display_callback`.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/callbacks.mdx#2025-04-19_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n\"# Error callback\ndef error_callback(message=None):\n    logging.error(f\\\"Error occurred: {message}\\\")\n\n# Tool call callback\ndef tool_callback(message=None):\n    logging.info(f\\\"Tool called: {message}\\\")\n\n# Register multiple callbacks\nregister_display_callback('error', error_callback)\nregister_display_callback('tool_call', tool_callback)\"\n```\n\n----------------------------------------\n\nTITLE: Defining CrewAI Agent Roles and Tasks in YAML\nDESCRIPTION: Configures a YAML-based definition for the CrewAI framework, specifying five agent roles (story outliner, writer, image generator, formatter, and PDF converter) with their respective backstories, goals, tasks, and required tools.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/cookbooks/yaml/story_book_author_agents.ipynb#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nagent_yaml = \"\"\"\nframework: crewai\ntopic: \"Children's Storybook Creation\"\nroles:\n  story_outliner:\n    role: \"Story Outliner\"\n    backstory: \"An imaginative creator who lays the foundation of captivating stories for children.\"\n    goal: \"Develop an outline for a children's storybook about Animals, including chapter titles and characters for 5 chapters.\"\n    tasks:\n      outline_development:\n        description: \"Create an outline for the children's storybook about Animals, detailing chapter titles and character descriptions for 5 chapters.\"\n        expected_output: \"A structured outline document containing 5 chapter titles, with detailed character descriptions and the main plot points for each chapter.\"\n  story_writer:\n    role: \"Story Writer\"\n    backstory: \"A talented storyteller who brings to life the world and characters outlined, crafting engaging and imaginative tales for children.\"\n    goal: \"Write the full content of the story for all 5 chapters, each chapter 100 words, weaving together the narratives and characters outlined.\"\n    tasks:\n      story_content_creation:\n        description: \"Using the outline provided, write the full story content for all chapters, ensuring a cohesive and engaging narrative for children. Each chapter should have 100 words.\"\n        expected_output: \"A complete manuscript of the children's storybook about Animals with 5 chapters, each containing approximately 100 words, following the provided outline.\"\n  image_generator:\n    role: \"Image Generator\"\n    backstory: \"A creative AI specialized in visual storytelling, bringing each chapter to life through imaginative imagery.\"\n    goal: \"Generate one image per chapter content provided by the story outliner. Generate a total of 5 images sequentially.\"\n    tasks:\n      image_creation:\n        description: \"Generate 5 images that capture the essence of the children's storybook about Animals, aligning with the themes, characters, and narrative outlined for the chapters.\"\n        expected_output: \"A set of 5 digital image files that visually represent the story, incorporating elements from the characters and plot as described in the outline.\"\n    tools:\n      - GenerateImageTool\n  content_formatter:\n    role: \"Content Formatter\"\n    backstory: \"A meticulous formatter who enhances the readability and presentation of the storybook.\"\n    goal: \"Format the written story content in markdown, including images at the beginning of each chapter.\"\n    tasks:\n      content_formatting:\n        description: \"Format the story content in markdown, including an image at the beginning of each chapter.\"\n        expected_output: \"The entire storybook content formatted in markdown, with each chapter title followed by the corresponding image and the chapter content.\"\n    tools:\n      - FileReadTool\n  markdown_to_pdf_creator:\n    role: \"PDF Converter\"\n    backstory: \"An efficient converter that transforms Markdown files into professionally formatted PDF documents.\"\n    goal: \"Convert the Markdown file to a PDF document. Ensure the file story.md is converted.\"\n    tasks:\n      pdf_conversion:\n        description: \"Convert a Markdown file to a PDF document, ensuring the preservation of formatting, structure, and embedded images using the mdpdf library.\"\n        expected_output: \"A PDF file generated from the Markdown input, accurately reflecting the content with proper formatting.\"\n    tools:\n      - MarkdownToPDFTool\ndependencies: []\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Social Media Content Agent with praisonaiagents\nDESCRIPTION: This snippet creates a specialized agent for creating social media content. The agent's instructions focus on concise, engaging content tailored to specific platforms (Twitter/X, LinkedIn, Instagram, Facebook). It emphasizes the use of relevant hashtags and the creation of content that encourages engagement.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/course/agents/16-content-creation-agents.mdx#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nsocial_media_agent = Agent(\n    name=\"SocialMediaCreator\",\n    instructions=\"\"\"\n    You are a social media content creator who crafts engaging posts.\n    \n    When creating social media content:\n    1. Create attention-grabbing, concise content\n    2. Adapt to the specific platform requirements\n    3. Include relevant hashtags when appropriate\n    4. Craft content that encourages engagement\n    5. Consider visual elements that would pair well with the text\n    \n    For each platform, follow these guidelines:\n    - Twitter/X: 280 characters max, punchy, relevant hashtags\n    - LinkedIn: Professional tone, industry insights, 1-3 paragraphs\n    - Instagram: Visual-focused descriptions, emoji-friendly, hashtags\n    - Facebook: Conversational, can be longer, question-based engagement\n    \"\"\"\n)\n\n# Use the social media agent\nsocial_content = social_media_agent.start(\n    \"\"\"\n    Create posts for Twitter, LinkedIn, and Facebook announcing:\n    \n    Event: Free Webinar on \"Future of AI in Business\"\n    Date: March 15, 2025\n    Time: 2:00 PM EST\n    Registration link: example.com/webinar\n    Key speakers: Dr. Jane Smith, AI Ethics Expert & Tom Johnson, Business AI Implementation Specialist\n    \"\"\"\n)\nprint(social_content)\n```\n\n----------------------------------------\n\nTITLE: Agent Configuration YAML\nDESCRIPTION: Defines the agent's configuration in YAML format, specifying the framework, topic, roles, and tasks. This configuration file is used to define agents in a no-code manner. It defines a scriptwriter agent with a goal to write a movie script about a cat in Mars, along with scriptwriting task.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/quickstart.mdx#2025-04-19_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\nframework: praisonai\ntopic: create movie script about cat in mars\nroles:\n  scriptwriter:\n    backstory: Expert in dialogue and script structure, translating concepts into\n      scripts.\n    goal: Write a movie script about a cat in Mars\n    role: Scriptwriter\n    tasks:\n      scriptwriting_task:\n        description: Turn the story concept into a production-ready movie script,\n          including dialogue and scene details.\n        expected_output: Final movie script with dialogue and scene details.\n```\n\n----------------------------------------\n\nTITLE: Running Agents with YAML Configuration\nDESCRIPTION: Command to run the agents using the configuration defined in 'agents.yaml'. This will process the tasks as specified in the YAML file.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/multimodal.mdx#2025-04-19_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npraisonai agents.yaml\n```\n\n----------------------------------------\n\nTITLE: Implementing Exa Search with PraisonAI Agents\nDESCRIPTION: Python implementation showing how to create agents that use Exa search functionality to find and process job listings. Includes a search function and agent configuration for finding video editor positions.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/external/exa-search.mdx#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent, PraisonAIAgents\nfrom exa_py import Exa\nimport os\n\nexa = Exa(api_key=os.environ[\"EXA_API_KEY\"])\n\ndef search_and_contents(query: str):\n    \"\"\"Search for webpages based on the query and retrieve their contents.\"\"\"\n    # This combines two API endpoints: search and contents retrieval\n    return str(exa.search_and_contents(\n        query, use_autoprompt=False, num_results=5, text=True, highlights=True\n    ))\n\ndata_agent = Agent(instructions=\"Find the latest jobs for Video Editor in New York at startups\", tools=[search_and_contents])\neditor_agent = Agent(instructions=\"Curate the available jobs at startups and their email for the candidate to apply based on his skills on Canva, Adobe Premiere Pro, and Adobe After Effects\")\nagents = PraisonAIAgents(agents=[data_agent, editor_agent], process='hierarchical')\nagents.start()\n```\n\n----------------------------------------\n\nTITLE: Executing Healthcare Diagnosis Workflow in Python\nDESCRIPTION: The main function initializes and executes the healthcare diagnosis workflow, managing the sequence of operational tasks, printing results for symptoms, labs, history analysis, and providing diagnosis and treatment suggestions.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/examples/healthcare-diagnosis.mdx#2025-04-19_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n# Create workflow\nworkflow = PraisonAIAgents(\n    agents=[symptom_analyzer, lab_processor, history_analyzer, \n            diagnosis_generator, treatment_recommender],\n    tasks=[symptom_task, lab_task, history_task, diagnosis_task, treatment_task],\n    process=\"workflow\",\n    verbose=True\n)\n\ndef main():\n    print(\"\\nStarting Healthcare Diagnosis Workflow...\")\n    print(\"=\" * 50)\n    \n    # Run workflow\n    results = workflow.start()\n    \n    # Print results\n    print(\"\\nDiagnosis Results:\")\n    print(\"=\" * 50)\n    for task_id, result in results[\"task_results\"].items():\n        if result:\n            print(f\"\\nTask: {task_id}\")\n            print(f\"Result: {result.raw}\")\n            print(\"-\" * 50)\n\nif __name__ == \"__main__\":\n    main()\n```\n\n----------------------------------------\n\nTITLE: Initializing PraisonAI Instance with Tools in Python\nDESCRIPTION: This snippet initializes a PraisonAI instance with a configuration provided in 'agent_yaml'. It also specifies a list of tools that the instance can utilize, such as web scraping and document analysis tools.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/cookbooks/yaml/stock_analysis_agents.ipynb#2025-04-19_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\n# Create a PraisonAI instance with the agent_yaml content\npraisonai = PraisonAI(agent_yaml=agent_yaml, tools=[ScrapeWebsiteTool, WebsiteSearchTool,\n                                                    CalculatorTool, SEC10QTool, SEC10KTool])\n```\n\n----------------------------------------\n\nTITLE: Creating PraisonAI Agent with Groq Integration for Airbnb Search\nDESCRIPTION: Initializes a PraisonAI agent that uses the Groq Llama 3.2 model and connects to Airbnb via MCP. The agent is instructed to help book apartments and demonstrate search capabilities.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/mcp/groq.mdx#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent, MCP\n\nsearch_agent = Agent(\n    instructions=\"\"\"You help book apartments on Airbnb.\"\"\",\n    llm=\"groq/llama-3.2-90b-vision-preview\",\n    tools=MCP(\"npx -y @openbnb/mcp-server-airbnb --ignore-robots-txt\")\n)\n\nsearch_agent.start(\"MUST USE airbnb_search Tool to Search. Search for Apartments in Paris for 2 nights. 04/28 - 04/30 for 2 adults. All Your Preference\")\n```\n\n----------------------------------------\n\nTITLE: Agent Playbook Configuration in YAML\nDESCRIPTION: Define an AI agent's role, backstory, and task specifications using a declarative YAML configuration\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/README.md#2025-04-19_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\nframework: praisonai\ntopic: Artificial Intelligence\nroles:\n  screenwriter:\n    backstory: \"Skilled in crafting scripts with engaging dialogue about {topic}.\"\n    goal: Create scripts from concepts.\n    role: Screenwriter\n    tasks:\n      scriptwriting_task:\n        description: \"Develop scripts with compelling characters and dialogue about {topic}.\"\n        expected_output: \"Complete script ready for production.\"\n```\n\n----------------------------------------\n\nTITLE: Advanced Usage Configuration of AutoAgents in Python\nDESCRIPTION: This advanced configuration example demonstrates how to instantiate the AutoAgents with various custom settings including the instruction, tools, agent limits, process type, and additional options to enhance functionality such as logging and memory.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/autoagents.mdx#2025-04-19_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# Advanced usage with custom settings\nagents = AutoAgents(\n    instructions=\"Your task description\",\n    tools=[tool1, tool2],\n    max_agents=3,\n    process=\"hierarchical\",\n    verbose=True,\n    memory=True,\n    allow_delegation=True\n)\n```\n\n----------------------------------------\n\nTITLE: Creating an Agent with Multi-Modal Configuration in Python\nDESCRIPTION: This example demonstrates how to create an agent capable of analyzing multiple types of media. It outlines the requirements for task descriptions and expected outputs.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/multimodal.mdx#2025-04-19_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n# Create an agent with multimodal configuration\nagent = Agent(\n    role=\"Media Analyst\",\n    goal=\"Process multiple types of media\",\n    backstory=\"Expert in multimedia analysis\",\n    llm=\"gpt-4o-mini\",  # Must support vision capabilities\n    verbose=True,  # Enable detailed logging\n    self_reflect=False  # Optional: disable self-reflection\n)\n\n# Task with media requirements\ntask = Task(\n    description=\"Analyze media content\",\n    expected_output=\"Comprehensive analysis\",\n    agent=agent,\n    images=[  # Support multiple media sources\n        \"https://example.com/image1.jpg\",\n        \"path/to/local/image.jpg\",\n        \"path/to/video.mp4\"\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing PraisonAI with Candidate Evaluation Agents\nDESCRIPTION: Sets up PraisonAI instance using the predefined YAML configuration, retrieves OpenAI API key from Google Colab secrets, and runs the AI agents for job candidate processing\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/cookbooks/yaml/job_candidate_evaluation.ipynb#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom praisonai import PraisonAI\nfrom google.colab import userdata\n\n# Create a PraisonAI instance with the agent_yaml content\npraisonai = PraisonAI(agent_yaml=agent_yaml)\n\n# Add OPENAI_API_KEY Secrets to Google Colab on the Left Hand Side 🔑 or Enter Manually Below\nos.environ[\"OPENAI_API_KEY\"] = userdata.get('OPENAI_API_KEY')\n\n# Run PraisonAI\nresult = praisonai.run()\n\n# Print the result\nprint(result) # 8/10\n```\n\n----------------------------------------\n\nTITLE: Configuring Agents in YAML for Research\nDESCRIPTION: This YAML configuration defines the framework and roles for a research agent tasked with analyzing lung disease data. It specifies the agent's backstory, goals, tasks, and the use of the YouTubeSearchTool for gathering information.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/youtube.mdx#2025-04-19_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# agents.yaml\nframework: crewai\ntopic: research about the causes of lung disease\nroles:\n  research_analyst:\n    backstory: Experienced in analyzing scientific data related to respiratory health.\n    goal: Analyze data on lung diseases\n    role: Research Analyst\n    tasks:\n      data_analysis:\n        description: Gather and analyze data on the causes and risk factors of lung\n          diseases.\n        expected_output: Report detailing key findings on lung disease causes.\n    tools:\n    - 'YouTubeSearchTool'\n```\n\n----------------------------------------\n\nTITLE: Defining AI Agent Workflow with Mermaid\nDESCRIPTION: This Mermaid diagram illustrates the workflow of AI agents in the PraisonAI framework, showcasing the sequence of tasks processed by agents and the use of tools within different agent subgraphs.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/js/typescript.mdx#2025-04-19_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph LR\n    %% Define the main flow\n    Start([▶ Start]) --> Agent1\n    Agent1 --> Process[⚙ Process]\n    Process --> Agent2\n    Agent2 --> Output([✓ Output])\n    Process -.-> Agent1\n    \n    %% Define subgraphs for agents and their tasks\n    subgraph Agent1[ ]\n        Task1[📋 Task]\n        AgentIcon1[🤖 AI Agent]\n        Tools1[🔧 Tools]\n        \n        Task1 --- AgentIcon1\n        AgentIcon1 --- Tools1\n    end\n    \n    subgraph Agent2[ ]\n        Task2[📋 Task]\n        AgentIcon2[🤖 AI Agent]\n        Tools2[🔧 Tools]\n        \n        Task2 --- AgentIcon2\n        AgentIcon2 --- Tools2\n    end\n\n    classDef input fill:#8B0000,stroke:#7C90A0,color:#fff\n    classDef process fill:#189AB4,stroke:#7C90A0,color:#fff\n    classDef tools fill:#2E8B57,stroke:#7C90A0,color:#fff\n    classDef transparent fill:none,stroke:none\n\n    class Start,Output,Task1,Task2 input\n    class Process,AgentIcon1,AgentIcon2 process\n    class Tools1,Tools2 tools\n    class Agent1,Agent2 transparent\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Tools for Internet Search, Slack, and Trello Integration\nDESCRIPTION: Defines three custom tools that inherit from BaseTool: InternetSearchTool for web searches using DuckDuckGo, SlackNotificationTool for sending messages to Slack channels, and TrelloIntegrationTool for creating Trello cards from task lists.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/cookbooks/yaml/meeting_prep_using_slack_and_trello_agents.ipynb#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n#ToDO: Code has been tested without Slack or Trello SDK, Carry out the testing once the integration of Slack and Trello is completed\n\nimport os\nimport requests\nfrom bs4 import BeautifulSoup\nfrom praisonai_tools import BaseTool\nfrom langchain.tools import tool\nfrom duckduckgo_search import DDGS\nfrom slack_sdk import WebClient\nfrom slack_sdk.errors import SlackApiError\nfrom dotenv import load_dotenv\nfrom typing import List\n\nload_dotenv()\n\n\nclass InternetSearchTool(BaseTool):\n    name: str = \"InternetSearchTool\"\n    description: str = \"Searches the internet for relevant information based on a query or for the latest news.\"\n\n    def _run(self, query: str):\n        ddgs = DDGS()\n        results = ddgs.text(keywords=query, region='wt-wt', safesearch='moderate', max_results=5)\n        return results\n\n\nclass SlackNotificationTool(BaseTool):\n    name: str = \"SlackNotificationTool\"\n    description: str = \"Sends notifications to a Slack channel.\"\n\n    def _run(self, text: str):\n        # Get Slack token and channel ID from environment variables\n        SLACK_TOKEN = os.getenv(\"SLACK_TOKEN\")\n        SLACK_CHANNEL_ID = os.getenv(\"SLACK_CHANNEL_ID\")\n        client = WebClient(token=SLACK_TOKEN)\n\n        try:\n            # Send a message to the Slack channel\n            response = client.chat_postMessage(channel=SLACK_CHANNEL_ID, text=text)\n            print(\"Message sent successfully!\")\n            return response\n        except SlackApiError as e:\n            error_message = f\"Error sending message: {e.response['error']}\"\n            print(error_message)\n            return error_message\n\n\nclass TrelloIntegrationTool(BaseTool):\n    name: str = \"TrelloIntegrationTool\"\n    description: str = \"Creates Trello cards based on tasks provided, adding them to a specified Trello list.\"\n\n    def _run(self, tasks: List[dict]):\n        \"\"\"\n        Accepts a list of tasks and creates a Trello card for each task.\n        Each task should be a dictionary with 'name' and 'description' keys.\n        \"\"\"\n        API_KEY = os.getenv(\"TRELLO_API_KEY\")\n        TOKEN = os.getenv(\"TRELLO_TOKEN\")\n        LIST_ID = os.getenv(\"TRELLO_LIST_ID\")\n\n        def create_trello_card(task_title, task_description):\n            url = \"https://api.trello.com/1/cards\"\n            query = {\n                \"key\": API_KEY,\n                \"token\": TOKEN,\n                \"idList\": LIST_ID,\n                \"name\": task_title,\n                \"desc\": task_description,\n            }\n            response = requests.post(url, params=query)\n            if response.status_code == 200:\n                print(f\"Task '{task_title}' successfully created in Trello.\")\n                return response\n            else:\n                error_message = f\"Failed to create task '{task_title}' in Trello: {response.text}\"\n                print(error_message)\n                return error_message\n\n        for task in tasks:\n            task_title = task.get(\"name\")\n            task_description = task.get(\"description\")\n            if task_title and task_description:\n                create_trello_card(task_title, task_description)\n            else:\n                print(\"Task missing title or description. Skipping...\")\n```\n\n----------------------------------------\n\nTITLE: Defining a Python Execution Task - Python\nDESCRIPTION: Creates a task associated with the previously defined Python agent to manage Python code execution and specify the expected output from the execution process.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/python_tools.mdx#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\npython_task = Task(\n    description=\"Execute and manage Python code.\",\n    expected_output=\"Code execution results.\",\n    agent=python_agent,\n    name=\"code_execution\"\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Shell Command Pipeline with Multi-Agent Workflow\nDESCRIPTION: Establishes a comprehensive workflow with command and monitoring agents, defining tasks and coordinating system interaction and process tracking\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/shell_tools.mdx#2025-04-19_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n# Command agent\ncommander = Agent(\n    name=\"Commander\",\n    role=\"Shell Commander\",\n    tools=[execute_command]\n)\n\n# Monitor agent\nmonitor = Agent(\n    name=\"Monitor\",\n    role=\"Process Monitor\"\n)\n\n# Define tasks\ncommand_task = Task(\n    description=\"Execute maintenance commands\",\n    agent=commander\n)\n\nmonitor_task = Task(\n    description=\"Monitor command execution\",\n    agent=monitor\n)\n\n# Run workflow\nagents = PraisonAIAgents(\n    agents=[commander, monitor],\n    tasks=[command_task, monitor_task]\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing AWS KB Retrieval Agent with PraisonAI and MCP\nDESCRIPTION: Python script to create an AI agent that can interact with AWS Knowledge Base using PraisonAI and MCP. It configures the agent with AWS credentials and sets up the MCP tool for KB retrieval.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/mcp/aws-kb-retrieval.mdx#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent, MCP\nimport os\n\n# Get AWS credentials from environment\naws_access_key = os.getenv(\"AWS_ACCESS_KEY_ID\")\naws_secret_key = os.getenv(\"AWS_SECRET_ACCESS_KEY\")\naws_region = os.getenv(\"AWS_REGION\")\n\n# Use a single string command with AWS KB Retrieval configuration\naws_kb_agent = Agent(\n    instructions=\"\"\"You are a helpful assistant that can interact with AWS Knowledge Base.\n    Use the available tools when relevant to retrieve and process AWS information.\"\"\",\n    llm=\"gpt-4o-mini\",\n    tools=MCP(\"npx -y @modelcontextprotocol/server-aws-kb-retrieval\",\n            env={\n                \"AWS_ACCESS_KEY_ID\": aws_access_key,\n                \"AWS_SECRET_ACCESS_KEY\": aws_secret_key,\n                \"AWS_REGION\": aws_region\n            })\n)\n\naws_kb_agent.start(\"Search AWS documentation about EC2 instances\")\n```\n\n----------------------------------------\n\nTITLE: Error Masking for Security in PraisonAI\nDESCRIPTION: This snippet illustrates how to mask sensitive information in error messages to prevent information leakage in PraisonAI. It logs detailed errors internally using `logger.error` but raises a sanitized `PublicError` to the user, hiding sensitive implementation details.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/concepts/tools.mdx#2025-04-19_snippet_24\n\nLANGUAGE: python\nCODE:\n```\ntry:\n    result = process_sensitive_data()\nexcept Exception as e:\n    # Log detailed error internally\n    logger.error(f\"Detailed error: {str(e)}\")\n    # Return sanitized error to user\n    raise PublicError(\"Processing failed\")\n```\n\n----------------------------------------\n\nTITLE: PraisonAI Agent Configuration and Execution in Google Colab\nDESCRIPTION: Sets up a PraisonAI agent with a YAML configuration for a space exploration research task, configures OpenAI API key, and runs the agent to generate research output\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/developers/googlecolab-tools.mdx#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport os\\nimport yaml\\nfrom praisonai import PraisonAI\\nfrom google.colab import userdata\\n\\n# Example agent_yaml content\\nagent_yaml = \"\"\"\\nframework: \\\"crewai\\\"\\ntopic: \\\"Space Exploration\\\"\\n\\nroles:\\n  astronomer:\\n    role: \\\"Space Researcher\\\"\\n    goal: \\\"Discover new insights about {topic}\\\"\\n    backstory: \\\"You are a curious and dedicated astronomer with a passion for unraveling the mysteries of the cosmos.\\\"\\n    tasks:\\n      investigate_exoplanets:\\n        description: \\\"Research and compile information about exoplanets discovered in the last decade.\\\"\\n        expected_output: \\\"A summarized report on exoplanet discoveries, including their size, potential habitability, and distance from Earth.\\\"\\n    tools:\\n      - \\\"InternetSearchTool\\\"\\n\"\"\"\\n\\n# Create a PraisonAI instance with the agent_yaml content\\npraisonai = PraisonAI(agent_yaml=agent_yaml)\\n\\n# Add OPENAI_API_KEY Secrets to Google Colab on the Left Hand Side 🔑 or Enter Manually Below\\nos.environ[\\\"OPENAI_API_KEY\\\"] = userdata.get('OPENAI_API_KEY') or \\\"ENTER OPENAI_API_KEY HERE\\\"\\n\\n# Run PraisonAI\\nresult = praisonai.run()\n```\n\n----------------------------------------\n\nTITLE: Creating Job Search Tool with Adzuna API Integration\nDESCRIPTION: Implements a JobSearchTool class that interfaces with the Adzuna API to fetch job listings based on specified role, location, and number of results. The tool accepts JSON input and returns formatted job listings with titles, companies, locations, and brief descriptions.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/cookbooks/yaml/job_hunt_agents.ipynb#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n#ToDo: Test Pending, Test with Adzuna API Key\nimport json, requests, os\nfrom praisonai_tools import BaseTool\n\nclass JobSearchTool(BaseTool):\n    name: str = \"JobSearchTool\"\n    description: str = (\n        \"This tool searches for job listings using the Adzuna API.\\n\"\n        \"Provide JSON input with 'role', 'location', and 'num_results'.\\n\"\n        \"Example:\\n\"\n        \"   - Input: {'role': 'Data Scientist', 'location': 'New York', 'num_results': 5}\\n\"\n        \"   - Output: List of job titles, companies, locations, and brief descriptions.\"\n    )\n\n    def _run(self, input_json: str) -> str:\n        # Parse input JSON string\n        try:\n            input_data = json.loads(input_json)\n            role = input_data['role']\n            location = input_data['location']\n            num_results = input_data['num_results']\n        except (json.JSONDecodeError, KeyError) as e:\n            return \"Invalid input format. Ensure JSON format: {'role': '<role>', 'location': '<location>', 'num_results': <number>}.\"\n\n        # Adzuna API parameters\n        app_id = os.getenv('ADZUNA_APP_ID')\n        api_key = os.getenv('ADZUNA_API_KEY')\n        base_url = \"http://api.adzuna.com/v1/api/jobs\"\n        url = f\"{base_url}/us/search/1?app_id={app_id}&app_key={api_key}&results_per_page={num_results}&what={role}&where={location}&content-type=application/json\"\n\n        try:\n            response = requests.get(url)\n            response.raise_for_status()\n            jobs_data = response.json()\n\n            job_listings = []\n            for job in jobs_data.get('results', []):\n                job_details = f\"Title: {job['title']}, Company: {job['company']['display_name']}, Location: {job['location']['display_name']}, Description: {job['description'][:100]}...\"\n                job_listings.append(job_details)\n            return '\\n'.join(job_listings)\n        except requests.exceptions.HTTPError as err:\n            return f\"HTTP Error: {err}\"\n        except requests.exceptions.RequestException as e:\n            return f\"Request Error: {e}\"\n```\n\n----------------------------------------\n\nTITLE: Defining Agent Roles and Tasks in YAML\nDESCRIPTION: Configures the marketing campaign development system with detailed role definitions, tasks, and dependencies using YAML format.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/cookbooks/yaml/marketing_campaign_development_agents.ipynb#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nagent_yaml = \"\"\"\nframework: \"crewai\"\ntopic: \"Comprehensive Marketing Campaign Development for CrewAI\"\nroles:\n  lead_market_analyst:\n    role: \"Lead Market Analyst\"\n    backstory: |\n      An expert market analyst at a premier digital marketing firm, specializing in thorough analysis of products and competitors within the online business landscape.\n    goal: |\n      Conduct comprehensive analysis of the products and competitors, providing insights to guide the marketing strategies.\n    verbose: true\n    allow_delegation: false\n    tools:\n      - \"InternetSearchTool\"\n    tasks:\n      research_task:\n        description: |\n          Conduct a thorough research about the customer and competitors within the context of CrewAI's focus on AI and automation solutions.\n          Gather relevant information given the current year is 2024.\n          We are working on a project to create a comprehensive marketing campaign to boost awareness and adoption of CrewAI's services among enterprise clients.\n        expected_output: |\n          A complete report covering the customer, their target customers, and competitors, including demographics, preferences, market positioning, and audience engagement.\n  chief_marketing_strategist:\n    role: \"Chief Marketing Strategist\"\n    backstory: |\n      Chief Marketing Strategist at a leading digital marketing agency, renowned for crafting unique strategies that drive success.\n    goal: |\n      Formulate a high-level marketing strategy based on insights from the market research and project understanding tasks.\n    verbose: true\n    allow_delegation: false\n    tools:\n      - \"InternetSearchTool\"\n    tasks:\n      project_understanding_task:\n        description: |\n          Develop a clear understanding of CrewAI's project details and its target audience.\n          Review any available materials and gather additional information as necessary.\n        expected_output: |\n          A detailed summary of CrewAI's project and a comprehensive profile of the target audience.\n      marketing_strategy_task:\n        description: |\n          Formulate a comprehensive marketing strategy for CrewAI's project, including details about the target audience, key messages, and proposed tactics.\n        expected_output: |\n          A complete marketing strategy document that includes goals, audience insights, key messaging, channels, tactics, and KPIs for measuring success.\n  creative_content_creator:\n    role: \"Creative Content Creator\"\n    backstory: |\n      A skilled storyteller and content creator at a top-tier digital marketing agency, with expertise in creating high-impact narratives for social media and ad campaigns.\n    goal: |\n      Develop innovative and compelling content for social media campaigns with an emphasis on creating impactful ad copy.\n    verbose: true\n    allow_delegation: false\n    tasks:\n      campaign_idea_task:\n        description: |\n          Create original and engaging campaign ideas for CrewAI's marketing campaign.\n          Ensure ideas are aligned with the overarching marketing strategy and resonate with the target audience.\n        expected_output: |\n          A list of 5 unique campaign ideas, each with a short description and expected impact.\n      copy_creation_task:\n        description: |\n          Write compelling marketing copy for each approved campaign idea related to CrewAI's project.\n          Ensure the copy aligns with the campaign goals and resonates with the target audience.\n        expected_output: |\n          Engaging marketing copy for each campaign idea, tailored to CrewAI's target audience.\n  chief_creative_director:\n    role: \"Chief Creative Director\"\n    backstory: |\n      A Chief Content Officer at a leading digital marketing agency, known for ensuring that all creative content aligns with product goals and maintains high standards.\n    goal: |\n      Review, approve, and oversee all creative work to ensure alignment with product goals and maintain the highest quality.\n    verbose: true\n    allow_delegation: true\n    tasks:\n      project_overview_review:\n        description: |\n          Review the overall project understanding, market strategy, and campaign ideas to confirm alignment with CrewAI's goals.\n        expected_output: |\n          Approval or feedback on the project overview and strategy, with suggestions for improvement if necessary.\n      campaign_approval:\n        description: |\n          Review and approve the final campaign ideas and marketing copy created by the Creative Content Creator.\n        expected_output: |\n          Approved campaign concepts and copy, or detailed feedback and requests for revision if improvements are needed.\ndependencies: []\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Task in Python\nDESCRIPTION: This snippet defines a JSON task using the PraisonAI Agents framework. The task is initialized with a description of the JSON operation to be performed. This task can then be assigned to a specific agent for execution.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/json_tools.mdx#2025-04-19_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nTask(description=\"json_operation\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Single Agent\nDESCRIPTION: Create a single AI agent using the `Agent` class from the `praisonaiagents` library. This agent is initialized with instructions to summarize photosynthesis.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/mini.mdx#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent, PraisonAIAgents\nsummarise_agent = Agent(instructions=\"Summarise Photosynthesis\")\nagents = PraisonAIAgents(agents=[summarise_agent])\nagents.start()\n```\n\n----------------------------------------\n\nTITLE: Common Patterns in XML Processing - Python\nDESCRIPTION: This snippet illustrates common patterns for setting up XML processing and validation agents in sequence. It defines specific tasks for each agent and highlights effective workflow execution in the PraisonAI framework.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/xml_tools.mdx#2025-04-19_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# Processing agent\nprocessor = Agent(\n    name=\"Processor\",\n    role=\"XML Processor\",\n    tools=[read_xml, write_xml, transform_xml]\n)\n\n# Validation agent\nvalidator = Agent(\n    name=\"Validator\",\n    role=\"Data Validator\",\n    tools=[validate_xml, xml_to_dict, dict_to_xml]\n)\n\n# Define tasks\nprocess_task = Task(\n    description=\"Process XML files\",\n    agent=processor\n)\n\nvalidate_task = Task(\n    description=\"Validate processed data\",\n    agent=validator\n)\n\n# Run workflow\nagents = PraisonAIAgents(\n    agents=[processor, validator],\n    tasks=[process_task, validate_task]\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring CrewAI Agents for Recruitment Workflow in YAML\nDESCRIPTION: Defines a YAML configuration for CrewAI agents, including roles for job candidate researcher, matcher and scorer, outreach strategist, and reporting specialist. Specifies tasks, tools, and expected outputs for each role in the recruitment process.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/cookbooks/yaml/recruitment_flow_agents.ipynb#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nagent_yaml = \"\"\"\nframework: \"crewai\"\ntopic: \"Automated Recruitment Workflow for Candidate Sourcing and Outreach\"\nroles:\n  researcher:\n    role: \"Job Candidate Researcher\"\n    backstory: |\n      You are adept at finding the right candidates by exploring various online resources. Your skill in identifying suitable candidates ensures the best match for job positions.\n    goal: \"Find potential candidates for the job.\"\n    tools:\n      - \"SerperDevTool\"\n      - \"ScrapeWebsiteTool\"\n      - \"LinkedInTool\"\n      - \"FileReadTool\"\n    tasks:\n      research_candidates_task:\n        description: |\n          Conduct thorough research to find potential candidates for the specified job.\n          Utilize various online resources and databases to gather a comprehensive list of potential candidates.\n          Ensure that the candidates meet the job requirements provided.\n\n          Job Requirements:\n          /content/JobRequirement.txt\n        expected_output: \"A list of 10 potential candidates with their contact information and brief profiles highlighting their suitability.\"\n\n  matcher:\n    role: \"Candidate Matcher and Scorer\"\n    backstory: |\n      You have a knack for matching the right candidates to the right job positions using advanced algorithms and scoring techniques. Your scores help prioritize the best candidates for outreach.\n    goal: \"Match the candidates to the best jobs and score them.\"\n    tools:\n      - \"SerperDevTool\"\n      - \"ScrapeWebsiteTool\"\n    tasks:\n      match_and_score_candidates_task:\n        description: |\n          Evaluate and match the candidates to the best job positions based on their qualifications and suitability.\n          Score each candidate to reflect their alignment with the job requirements, ensuring a fair and transparent assessment process.\n          Don't try to scrape people's LinkedIn, since you don't have access to it.\n          Job Requirements:\n          /content/JobRequirement.txt\n        expected_output: \"A ranked list of candidates with detailed scores and justifications for each job position.\"\n  communicator:\n    role: \"Candidate Outreach Strategist\"\n    backstory: |\n      You are skilled at creating effective outreach strategies and templates to engage candidates. Your communication tactics ensure high response rates from potential candidates.\n    goal: \"Develop outreach strategies for the selected candidates.\"\n    tools:\n      - \"FileReadTool\"\n      - \"SerperDevTool\"\n      - \"ScrapeWebsiteTool\"\n    tasks:\n      outreach_strategy_task:\n        description: |\n          Develop a comprehensive strategy to reach out to the selected candidates.\n          Create effective outreach methods and templates that can engage the candidates and encourage them to consider the job opportunity.\n          Job Requirements:\n          /content/JobRequirement.txt\n        expected_output: \"A detailed list of outreach methods and templates ready for implementation, including communication strategies and engagement tactics.\"\n  reporter:\n    role: \"Candidate Reporting Specialist\"\n    backstory: |\n      You are proficient at compiling and presenting detailed reports for recruiters. Your reports provide clear insights into the best candidates to pursue.\n    goal: \"Report the best candidates to the recruiters.\"\n    tools: []\n    tasks:\n      report_candidates_task:\n        description: |\n          Compile a comprehensive report for recruiters on the best candidates to put forward.\n          Summarize the findings from the previous tasks and provide clear recommendations based on the job requirements.\n        expected_output: |\n          A detailed report with the best candidates to pursue, no need to include the job requirements, formatted as markdown without '```', including profiles, scores, and outreach strategies.\ndependencies: []\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Research and Analysis Pattern Implementation\nDESCRIPTION: Common pattern for implementing research and analysis workflow using multiple agents\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/duckduckgo_tools.mdx#2025-04-19_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# Research agent\nresearcher = Agent(\n    name=\"Researcher\",\n    role=\"Search Specialist\",\n    tools=[duckduckgo]\n)\n\n# Analysis agent\nanalyst = Agent(\n    name=\"Analyst\",\n    role=\"Information Analyst\"\n)\n\n# Define tasks\nresearch_task = Task(\n    description=\"Research quantum computing advances\",\n    agent=researcher\n)\n\nanalysis_task = Task(\n    description=\"Analyze research findings\",\n    agent=analyst\n)\n\n# Run workflow\nagents = PraisonAIAgents(\n    agents=[researcher, analyst],\n    tasks=[research_task, analysis_task]\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Tool Class in Python\nDESCRIPTION: This Python snippet showcases the definition of a custom tool class, demonstrating how to configure and run operations while encapsulating functionality for reusability.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/tools_class.mdx#2025-04-19_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# Create a custom tool class\nclass CustomTool(BaseModel):\n    \"\"\"Custom tool with configuration options.\"\"\"\n    api_url: str = Field(default=\"https://api.example.com\")\n    headers: Dict[str, str] = Field(default_factory=dict)\n    max_retries: int = Field(default=3)\n\n    def run(self, input_data: str) -> str:\n        \"\"\"Main execution method.\"\"\"\n        # Tool implementation\n        return \"Result\"\n\n    def configure(self, **kwargs):\n        \"\"\"Update tool configuration.\"\"\"\n        for key, value in kwargs.items():\n            if hasattr(self, key):\n                setattr(self, key, value)\n\n# Use the tool with an agent\nagent = Agent(\n    name=\"CustomAgent\",\n    role=\"Tool User\",\n    goal=\"Use custom tool functionality\",\n    tools=[CustomTool],\n    verbose=True\n)\n```\n\n----------------------------------------\n\nTITLE: Executing PraisonAI Script Generation\nDESCRIPTION: Main execution code that initializes PraisonAI with the YAML configuration, sets up OpenAI API key from Google Colab secrets, and runs the script generation process.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/cookbooks/yaml/movie_script_writer_agents.ipynb#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom praisonai import PraisonAI\nfrom google.colab import userdata\n\n# Create a PraisonAI instance with the agent_yaml content\npraisonai = PraisonAI(agent_yaml=agent_yaml)\n\n# Add OPENAI_API_KEY Secrets to Google Colab on the Left Hand Side 🔑 or Enter Manually Below\nos.environ[\"OPENAI_API_KEY\"] = userdata.get('OPENAI_API_KEY')\n\n# Run PraisonAI\nresult = praisonai.run()\n\n# Print the result\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Defining CrewAI Agent Configuration in YAML\nDESCRIPTION: Creates a YAML configuration for the CrewAI framework that specifies a Meeting Transcript Analysis Agent. The agent is configured to analyze meeting transcripts, extract actionable items, and use the custom tools for internet search, Slack notifications, and Trello card creation.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/cookbooks/yaml/meeting_prep_using_slack_and_trello_agents.ipynb#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nagent_yaml = \"\"\"\nframework: \"crewai\"\ntopic: \"Meeting Preparation and Task Analysis\"\nroles:\n  meeting_analyzer:\n    role: \"Meeting Transcript Analysis Agent\"\n    backstory: |\n      An expert in analyzing meeting transcripts to identify and extract actionable tasks and issues.\n      Known for breaking down complex discussions into structured tasks that teams can follow up on effectively.\n    goal: \"Analyze the meeting transcript to extract tasks and actionable items.\"\n    tasks:\n      analyze_meeting:\n        description: \"Analyze the provided meeting transcript to identify tasks, issues, and relevant action items. Organize the findings into actionable points with clear details and criteria for each task.\"\n        expected_output: \"JSON-formatted list of tasks, including titles, descriptions, and detailed criteria for each task.\"\n    tools:\n      - \"InternetSearchTool\"\n      - \"SlackNotificationTool\"\n      - \"TrelloIntegrationTool\"\ndependencies: []\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Building a Toolbox with Multiple Tools in Python\nDESCRIPTION: This snippet shows how to create a collection of diverse tools for an agent, including weather, translation, and reminder functionalities. Each tool is defined as a function with descriptive capabilities, and incorporated into an agent to enhance its assistance potential.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/course/agents/05-agent-tools.mdx#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent, Tool\n\n# Define multiple tools\ndef weather(location):\n    return f\"Weather in {location}: Sunny, 75°F\"\n\ndef translator(text, target_language):\n    return f\"Translated to {target_language}: {text} (placeholder)\"\n\ndef reminder(message, time):\n    return f\"Reminder set for {time}: {message}\"\n\n# Create tool collection\ntools = [\n    Tool(name=\"weather\", function=weather, description=\"Get weather for a location\"),\n    Tool(name=\"translator\", function=translator, description=\"Translate text\"),\n    Tool(name=\"reminder\", function=reminder, description=\"Set a reminder\")\n]\n\n# Create agent with multiple tools\nassistant = Agent(\n    instructions=\"You are a helpful personal assistant\",\n    tools=tools\n)\n```\n\n----------------------------------------\n\nTITLE: Registering Tools Using Pre-defined Tool Definitions in TypeScript\nDESCRIPTION: Demonstrates how to register tools in PraisonAI using pre-defined tool definitions with detailed schema information. Functions are registered globally and then referenced in tool definitions.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/src/praisonai-ts/examples/README-tool-examples.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Agent } from 'praisonai';\n\n// Define the functions\nasync function getWeather(location: string) {\n  console.log(`Getting weather for ${location}...`);\n  return `${Math.floor(Math.random() * 30)}°C`;\n}\n\nasync function getTime(location: string) {\n  console.log(`Getting time for ${location}...`);\n  const now = new Date();\n  return `${now.getHours()}:${now.getMinutes()}`;\n}\n\n// Register functions globally\nimport { registerFunction } from 'praisonai';\nregisterFunction('get_weather', getWeather);\nregisterFunction('get_time', getTime);\n\n// Define tool definitions\nconst weatherTool = {\n  type: \"function\",\n  function: {\n    name: \"get_weather\",\n    description: \"Get the current weather for a location\",\n    parameters: {\n      type: \"object\",\n      properties: {\n        location: {\n          type: \"string\",\n          description: \"The location to get weather for\"\n        }\n      },\n      required: [\"location\"]\n    }\n  }\n};\n\nconst timeTool = {\n  type: \"function\",\n  function: {\n    name: \"get_time\",\n    description: \"Get the current time for a location\",\n    parameters: {\n      type: \"object\",\n      properties: {\n        location: {\n          type: \"string\",\n          description: \"The location to get time for\"\n        }\n      },\n      required: [\"location\"]\n    }\n  }\n};\n\n// Create an agent with pre-defined tool definitions\nconst agent = new Agent({ \n  instructions: `You provide the current weather and time for requested locations.`,\n  name: \"ToolDefinitionAgent\",\n  // Register pre-defined tool definitions\n  tools: [weatherTool, timeTool]\n});\n\n// Start the agent with a prompt that will trigger tool usage\nagent.start(\"What's the weather and time in Paris, France?\");\n```\n\n----------------------------------------\n\nTITLE: Defining Agent System Configuration in YAML\nDESCRIPTION: YAML configuration defining three agents (Research Specialist, Content Writer, and Content Reviewer) with their roles, goals, and tasks for job posting creation.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/cookbooks/yaml/job_posting_agents.ipynb#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nagent_yaml = \"\"\"\nframework: \"crewai\"\ntopic: \"Job Posting Creation and Industry Analysis\"\nroles\n  research_agent:\n    role: \"Research Specialist\"\n    backstory: |\n      You are a dedicated Research Specialist, responsible for gathering insights into the company's culture, role requirements, and industry context to support the job posting process.\n    goal: |\n      Collect, analyze, and summarize information about the company's culture, the role requirements, and industry trends to support targeted job posting development.\n    verbose: true\n    allow_delegation: false\n    tools:\n      - \"InternetSearchTool\"\n      - \"SerperDevTool\"\n    tasks:\n      research_company_culture_task:\n        description: |\n          Analyze the provided company website and hiring manager's domain, focusing on culture, values, and mission. Identify unique points, specific projects, or achievements that can be highlighted.\n        expected_output: |\n          A comprehensive report detailing the company's culture, values, mission, and unique selling points relevant to the job role, with suggestions on leveraging these insights for the job posting.\n      research_role_requirements_task:\n        description: |\n          Based on hiring needs, identify key skills, experiences, and qualities ideal for the candidate. Align with company projects, industry trends, and competitive positioning.\n        expected_output: |\n          A list of recommended skills, experiences, and qualities aligned with company culture, projects, and the role requirements.\n  writer_agent:\n    role: \"Content Writer\"\n    backstory: |\n      As a Content Writer, you excel in drafting engaging and clear job postings that accurately reflect the role and resonate with potential candidates.\n    goal: |\n      Use research insights to draft an appealing job posting that highlights the role's unique attributes, aligned with the company's culture and values.\n    verbose: true\n    allow_delegation: true\n    tools:\n      - \"InternetSearchTool\"\n      - \"SerperDevTool\"\n      - \"FileReadTool\"\n    tasks:\n      draft_job_posting_task:\n        description: |\n          Draft a job posting based on hiring needs with a compelling introduction and detailed role description. Ensure alignment with company description and include benefits specific_benefits.\n        expected_output: |\n          A detailed, engaging job posting with an introduction, role description, responsibilities, requirements, and unique company benefits, resonating with the company's culture.\n  review_agent:\n    role: \"Content Reviewer\"\n    backstory: |\n      You are an experienced Content Reviewer responsible for refining job postings to ensure they are clear, accurate, and engaging for the right candidates.\n    goal: |\n      Review and edit the draft job posting for clarity, engagement, and alignment with company culture, ensuring it speaks directly to ideal candidates.\n    verbose: true\n    allow_delegation: false\n    tools:\n      - \"InternetSearchTool\"\n      - \"SerperDevTool\"\n      - \"FileReadTool\"\n    tasks:\n      review_and_edit_job_posting_task:\n        description: |\n          Review the draft job posting for clarity, engagement, and accuracy, and refine as needed. Ensure it aligns with the company's culture and values, providing feedback for improvements.\n        expected_output: |\n          A polished, error-free job posting aligned with company values and targeted to attract ideal candidates, along with feedback on further enhancements.\ndependencies: []\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Initializing PraisonAI Agent in Python\nDESCRIPTION: Basic example showing how to initialize and start a PraisonAI agent with custom instructions. The code demonstrates agent creation and task execution using the praisonaiagents library.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/agents/agents.mdx#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent\n\n# Create an agent with specific instructions\nagent = Agent(instructions=\"Your task-specific instructions\")\n\n# Start the agent with a task\nresponse = agent.start(\"Your task description\")\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Agent Processing - Python\nDESCRIPTION: This code snippet demonstrates how to define an asynchronous agent, perform async operations, and show the expected behavior of listing tasks in a parallel execution context.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/concepts/agents.mdx#2025-04-19_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\\\nfrom praisonaiagents import Agent, Task, PraisonAIAgents\\\n\\\nasync def main():\\\n    async_agent = Agent(\\\n        name=\\\"AsyncAgent\\\",\\\n        role=\\\"Async Task Specialist\\\",\\\n        goal=\\\"Perform async operations\\\",\\\n        backstory=\\\"Expert in async operations\\\",\\\n        tools=[async_search_tool],  # Your async tool\\\n        verbose=True\\\n    )\\\n    async_task = Task(\\\n        description=\\\"Perform async operation\\\",\\\n        expected_output=\\\"Async result\\\",\\\n        agent=async_agent,\\\n        async_execution=True  # Enable async execution\\\n    )\\\n    agents = PraisonAIAgents(\\\n        agents=[async_agent],\\\n        tasks=[async_task],\\\n        verbose=True\\\n    )\\\n    result = await agents.astart()\\\n    print(result)\\\n\\\nif __name__ == \\\"__main__\\\":\\\n    asyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Setting Process Type in Python\nDESCRIPTION: This code sets the processing type for PraisonAI Agents. The `process` parameter can be set to either \"sequential\" or \"parallel\" to control how tasks are executed. Setting it to \"sequential\" ensures that tasks are executed one after the other.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/json_tools.mdx#2025-04-19_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nprocess=\"sequential\"\n```\n\n----------------------------------------\n\nTITLE: Defining a Decision Task in Python\nDESCRIPTION: This Python snippet illustrates how to create a decision task in the PraisonAI framework, using conditions to define possible paths based on success or failure outcomes.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/concepts/tasks.mdx#2025-04-19_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndecision_task = Task(\n    type=\"decision\",\n    conditions={\n        \"success\": [\"next_task\"],\n        \"failure\": [\"error_task\"]\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Memory Management Tools in Python\nDESCRIPTION: This set of classes defines various memory management tools using the PraisonAI framework, including functionality for adding, retrieving, searching, updating, and tracking memory history. Each class extends BaseTool and implements a specific memory operation.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/cookbooks/yaml/memory_management_and_knowledge_retreival_agents.ipynb#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom mem0 import Memory\nfrom praisonai_tools import BaseTool\nfrom duckduckgo_search import DDGS\nfrom praisonai_tools import BaseTool\n\nclass AddMemoryTool(BaseTool):\n    name: str = \"Add Memory Tool\"\n    description: str = (\"This tool allows storing a new memory with user ID and optional metadata.\\n\"\n                        \"Example:\\n\"\n                        \"   - Input: text='I am working on improving my tennis skills. Suggest some online courses.', user_id='alice', metadata={'category': 'hobbies'}\\n\"\n                        \"   - Output: Memory added with summary 'Improving her tennis skills. Looking for online suggestions.'\")\n\n    def _run(self, text: str, user_id: str, metadata: dict = None):\n        m = Memory()\n        result = m.add(text, user_id=user_id, metadata=metadata)\n        return result\n\nclass GetAllMemoriesTool(BaseTool):\n    name: str = \"Get All Memories Tool\"\n    description: str = (\"This tool retrieves all stored memories.\\n\"\n                        \"Example:\\n\"\n                        \"   - Input: action='get_all'\\n\"\n                        \"   - Output: List of all stored memories.\")\n\n    def _run(self):\n        m = Memory()\n        result = m.get_all()\n        return result\n\nclass SearchMemoryTool(BaseTool):\n    name: str = \"Search Memory Tool\"\n    description: str = (\"This tool searches for specific memories based on a query and user ID.\\n\"\n                        \"Example:\\n\"\n                        \"   - Input: query='What are Alice's hobbies?', user_id='alice'\\n\"\n                        \"   - Output: Search results related to Alice's hobbies.\")\n\n    def _run(self, query: str, user_id: str):\n        m = Memory()\n        result = m.search(query=query, user_id=user_id)\n        return result\n\nclass UpdateMemoryTool(BaseTool):\n    name: str = \"Update Memory Tool\"\n    description: str = (\"This tool updates an existing memory by memory ID and new data.\\n\"\n                        \"Example:\\n\"\n                        \"   - Input: memory_id='cb032b42-0703-4b9c-954d-77c36abdd660', data='Likes to play tennis on weekends'\\n\"\n                        \"   - Output: Memory updated to 'Likes to play tennis on weekends.'\")\n\n    def _run(self, memory_id: str, data: str):\n        m = Memory()\n        result = m.update(memory_id=memory_id, data=data)\n        return result\n\nclass MemoryHistoryTool(BaseTool):\n    name: str = \"Memory History Tool\"\n    description: str = (\"This tool gets the history of changes made to a specific memory by memory ID.\\n\"\n                        \"Example:\\n\"\n                        \"   - Input: memory_id='cb032b42-0703-4b9c-954d-77c36abdd660'\\n\"\n                        \"   - Output: History of the specified memory.\")\n\n    def _run(self, memory_id: str):\n        m = Memory()\n        result = m.history(memory_id=memory_id)\n        return result\n\nclass InternetSearchTool(BaseTool):\n    name: str = \"InternetSearchTool\"\n    description: str = \"Search Internet for relevant information based on a query or latest news\"\n\n    def _run(self, query: str):\n        ddgs = DDGS()\n        results = ddgs.text(keywords=query, region='wt-wt', safesearch='moderate', max_results=5)\n        return results\n```\n\n----------------------------------------\n\nTITLE: Implementing Asynchronous Callbacks in PraisonAI\nDESCRIPTION: Example of implementing asynchronous callbacks in PraisonAI Agents. This code demonstrates how to register an async callback function for handling interaction events non-blockingly, which is useful for long-running operations or when dealing with multiple agents simultaneously.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/callbacks.mdx#2025-04-19_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nfrom praisonaiagents import register_display_callback\n\nasync def async_interaction_callback(message=None, response=None, **kwargs):\n    \"\"\"Async callback for handling interactions\"\"\"\n    await asyncio.sleep(0)  # Non-blocking pause\n    print(f\"Async processing - Message: {message}\")\n    print(f\"Response: {response}\")\n\n# Register the async callback\nregister_display_callback('interaction', async_interaction_callback)\n```\n\n----------------------------------------\n\nTITLE: Initializing PraisonAI Agent with Groq Model in Python\nDESCRIPTION: Creates a PraisonAI Agent using a Groq language model. This example demonstrates how to initialize an agent with specific instructions and a chosen language model.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/models.mdx#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent\n\nagent = Agent(\n    instructions=\"You are a helpful assistant\",\n    llm=\"llama-3.1-8b-instant\",\n)\n\nagent.start(\"Why sky is Blue?\")\n```\n\n----------------------------------------\n\nTITLE: Implementing API Rate Limiting with Decorators\nDESCRIPTION: Shows how to implement rate limiting for API calls using decorators. This prevents abuse of services and helps manage resource consumption by limiting the frequency of requests.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/tools.mdx#2025-04-19_snippet_19\n\nLANGUAGE: python\nCODE:\n```\n@rate_limit(calls=100, period=60)\nasync def api_call():\n    return await make_request()\n```\n\n----------------------------------------\n\nTITLE: Predictive Maintenance Workflow Visualization\nDESCRIPTION: Mermaid flowchart illustrating the workflow of sensor monitoring, performance analysis, anomaly detection, failure prediction, and maintenance scheduling\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/examples/predictive-maintenance.mdx#2025-04-19_snippet_3\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n    In[In] --> Monitor[Sensor Monitor]\n    Monitor --> Analyzer[Performance Analyzer]\n    Analyzer --> Detector[Anomaly Detector]\n    Detector --> Predictor[Failure Predictor]\n    Predictor -->|critical| Scheduler[Maintenance Scheduler]\n    Predictor -->|warning| Scheduler\n    Predictor -->|normal| Out[Out]\n    Scheduler --> Out\n    \n    style In fill:#8B0000,color:#fff\n    style Out fill:#8B0000,color:#fff\n    style Monitor fill:#2E8B57,color:#fff\n    style Analyzer fill:#2E8B57,color:#fff\n    style Detector fill:#2E8B57,color:#fff\n    style Predictor fill:#2E8B57,color:#fff\n    style Scheduler fill:#2E8B57,color:#fff\n```\n\n----------------------------------------\n\nTITLE: Input Validation in PraisonAI\nDESCRIPTION: This snippet demonstrates input validation to prevent security vulnerabilities in PraisonAI. The `process_user_input` function checks if the input is a string and then sanitizes the input using `sanitize_input` and `strip`, enhancing the security of the tool.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/concepts/tools.mdx#2025-04-19_snippet_21\n\nLANGUAGE: python\nCODE:\n```\ndef process_user_input(data: str) -> str:\n    if not isinstance(data, str):\n        raise ValueError(\"Input must be string\")\n    return sanitize_input(data.strip())\n```\n\n----------------------------------------\n\nTITLE: Defining Agent and Task in YAML\nDESCRIPTION: This snippet demonstrates how to define an agent and a task using a YAML file. The agent is defined with a backstory, goal, role, and a list of tools it can use, in this case, the `internet_search_tool`.  A task is defined with a description and expected output and is associated with the defined agent.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/concepts/tools.mdx#2025-04-19_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nframework: praisonai\ntopic: create movie script about cat in mars\nroles:\n  scriptwriter:\n    backstory: Expert in dialogue and script structure, translating concepts into\n      scripts.\n    goal: Write a movie script about a cat in Mars\n    role: Scriptwriter\n    tools:\n      - internet_search_tool # <-- Tool assigned to Agent here\n    tasks:\n      scriptwriting_task:\n        description: Turn the story concept into a production-ready movie script, including dialogue and scene details.\n        expected_output: Final movie script with dialogue and scene details.\n```\n\n----------------------------------------\n\nTITLE: Creating Agents and Tasks Method in Python\nDESCRIPTION: Internal method to create agents and tasks from provided configuration, returning a tuple of agents and tasks lists.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/api/praisonaiagents/agents/autoagents.mdx#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef _create_agents_and_tasks(self, config: AutoAgentsConfig) -> tuple[List[Agent], List[Task]]:\n    \"\"\"\n    Create agents and tasks based on the generated configuration.\n    Returns tuple of (agents, tasks).\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Running Calculator Agent\nDESCRIPTION: Initializes and executes the calculator agent with defined tasks.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/calculator_tools.mdx#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nagents = PraisonAIAgents(\n    agents=[calculator_agent],\n    tasks=[calc_task],\n    process=\"sequential\"\n)\nagents.start()\n```\n\n----------------------------------------\n\nTITLE: Modifying AI Agent Behavior and Instructions\nDESCRIPTION: This Python snippet describes how to create a new agent with different behavior by providing specific instructions. The example defines a creative writer capable of producing short stories, demonstrating the versatility of the PraisonAI library.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/course/agents/11-creating-your-first-agent.mdx#2025-04-19_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# Create an agent with different instructions\ncreative_writer = Agent(\n    name=\"CreativeWriter\",\n    instructions=\"\"\"\n    You are a creative writer that specializes in short, engaging stories.\n    Your writing should:\n    \n    1. Include vivid descriptions\n    2. Have interesting characters\n    3. Include some dialogue\n    4. Have a clear beginning, middle, and end\n    \"\"\"\n)\n\n# Ask for a story\nstory = creative_writer.start(\"Write a short story about a lost dog finding its way home\")\nprint(story)\n```\n\n----------------------------------------\n\nTITLE: Analyzing Medical History with Python\nDESCRIPTION: A Python snippet simulating the analysis of patient medical history, considering chronic conditions, allergies, and risk factors, giving comprehensive context for diagnosis generation.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/examples/healthcare-diagnosis.mdx#2025-04-19_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef analyze_medical_history():\n    \"\"\"Simulates medical history analysis\"\"\"\n    histories = [\n        {\"chronic_conditions\": True, \"allergies\": True, \"risk_factors\": \"high\"},\n        {\"chronic_conditions\": False, \"allergies\": True, \"risk_factors\": \"medium\"},\n        {\"chronic_conditions\": False, \"allergies\": False, \"risk_factors\": \"low\"}\n    ]\n    return histories[int(time.time()) % 3]\n```\n\n----------------------------------------\n\nTITLE: Efficient Processing with Generators in PraisonAI\nDESCRIPTION: This snippet demonstrates efficient processing using generators for large datasets within PraisonAI. The `process_large_data` function utilizes a generator pattern to process data in chunks, avoiding loading the entire dataset into memory at once, optimizing memory usage.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/concepts/tools.mdx#2025-04-19_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n# Use generators for large datasets\ndef process_large_data():\n    for chunk in data_generator():\n        yield process_chunk(chunk)\n```\n\n----------------------------------------\n\nTITLE: Implementing Asynchronous Display Calls in Python\nDESCRIPTION: This code demonstrates how to implement asynchronous display calls using the praisonaiagents library in Python. It illustrates handling async interactions, tool calls, and errors using try-catch blocks and logging. These best practices ensure non-blocking operations and efficient error handling.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/callbacks.mdx#2025-04-19_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nfrom praisonaiagents import (\n    adisplay_interaction,\n    adisplay_error,\n    adisplay_tool_call\n)\n\nasync def main():\n    # Display an interaction\n    await adisplay_interaction(\n        message=\"What's the weather?\",\n        response=\"Let me check that for you.\",\n        generation_time=0.5\n    )\n\n    # Display a tool call\n    await adisplay_tool_call(\n        \"Calling weather API for location data...\"\n    )\n\n    # Handle an error\n    try:\n        raise Exception(\"API connection failed\")\n    except Exception as e:\n        await adisplay_error(str(e))\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Defining Python Task in PraisonAI\nDESCRIPTION: Shows how to define a specific task for Python data processing with clear expectations. This task definition specifies the operation to perform and the expected output format.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/python_tools.mdx#2025-04-19_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nTask(\n    description=\"Execute data processing scripts\",\n    expected_output=\"Processing results\"\n)\n```\n\n----------------------------------------\n\nTITLE: Agent Configuration Example in Python\nDESCRIPTION: This Python code snippet illustrates how to configure an AI agent with a specific role, goal, and set of tools for web scraping. The `Agent` class is used to define the agent's capabilities and focus, emphasizing ethical and efficient content extraction.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/spider_tools.mdx#2025-04-19_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n```python\nAgent(\n        name=\"WebScraper\",\n        role=\"Content Extraction Specialist\",\n        goal=\"Extract web content ethically and efficiently\",\n        tools=[scrape_page, extract_content, crawl_links, parse_html, structure_data]\n    )\n```\n```\n\n----------------------------------------\n\nTITLE: Basic Logging Callback Implementation\nDESCRIPTION: This Python code demonstrates a basic logging callback for AI agent messages. It sets up logging and registers a synchronous and asynchronous callback that logs agent messages.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/callbacks.mdx#2025-04-19_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n\"import logging\n\n# Setup logging\nlogging.basicConfig(level=logging.INFO)\n\ndef log_callback(message=None, **kwargs):\n    logging.info(f\\\"Agent message: {message}\\\")\n\n# Register synchronous callback\nregister_display_callback('interaction', log_callback, is_async=False)\n\n# Register asynchronous callback\nasync def async_log_callback(message=None, **kwargs):\n    await asyncio.sleep(0)\n    logging.info(f\\\"Agent message: {message}\\\")\n\n# Register as async callback\nregister_display_callback('interaction', async_log_callback, is_async=True)\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Agent Roles and Tasks in YAML\nDESCRIPTION: YAML configuration defining two agent roles: News Researcher and News Content Writer, along with their respective tasks and tool assignments.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/cookbooks/yaml/news_retreival_rag_agents.ipynb#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nagent_yaml = \"\"\"\nframework: \"crewai\"\ntopic: \"News Analysis and Reporting\"\nroles:\n  news_search_agent:\n    role: \"News Researcher\"\n    backstory: |\n      You are an experienced News Researcher, skilled in finding and summarizing key points from the latest news articles.\n    goal: |\n      Conduct in-depth searches on the latest news, summarize key points for each article, and make the information available for further review.\n    verbose: true\n    allow_delegation: true\n    tools:\n      - \"NewsDBTool\"\n      - \"RetrieveNewsTool\"\n    tasks:\n      search_and_summarize_news_task:\n        description: |\n          Search for the latest news articles based on a specified topic, process them, and generate key points for each article.\n        expected_output: |\n          A list of key points from recent articles related to the specified topic, ready for further summarization.\n  writer_agent:\n    role: \"News Content Writer\"\n    backstory: |\n      As a News Content Writer, you specialize in transforming raw news data into detailed summaries, adding depth and clarity.\n    goal: |\n      Review the collected news data, verify its relevance, search for additional context, and create comprehensive summaries for each topic.\n    verbose: true\n    allow_delegation: true\n    tools:\n      - \"RetrieveNewsTool\"\n      - \"InternetSearchTool\"\n    tasks:\n      analyze_and_write_news_task:\n        description: |\n          Identify each topic, verify relevance using the retrieved data, then conduct additional web searches to add depth. Summarize each topic in detail.\n        expected_output: |\n          An in-depth summary of each identified news topic, incorporating all relevant information retrieved from the database and online searches.\ndependencies: []\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Agent Configuration Example\nDESCRIPTION: This code demonstrates how to configure an agent with a clear focus on YAML processing. The `Agent` is defined with a specific role, goal, and the necessary YAML processing tools.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/yaml_tools.mdx#2025-04-19_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nAgent(\n        name=\"YAMLProcessor\",\n        role=\"YAML Processing Specialist\",\n        goal=\"Process YAML files accurately and safely\",\n        tools=[read_yaml, write_yaml, validate_yaml, merge_yaml, convert_yaml]\n    )\n```\n\n----------------------------------------\n\nTITLE: Configuring Agent Roles and Tasks in YAML\nDESCRIPTION: YAML configuration defining multiple AI agent roles including market analyst, strategist, content creator, photographer, and creative director, along with their respective tasks and tools.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/cookbooks/yaml/instagram_post_agents.ipynb#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nagent_yaml = \"\"\"\nframework: \"crewai\"\ntopic: \"Marketing Analysis and Strategy Development\"\nroles:\n  lead_market_analyst:\n    role: \"Lead Market Analyst\"\n    backstory: |\n      As the Lead Market Analyst at a premier digital marketing firm, you specialize in dissecting online business landscapes.\n    goal: |\n      Conduct an in-depth analysis of products and competitors to guide marketing strategies with actionable insights.\n    verbose: true\n    allow_delegation: false\n    tools:\n      - \"ScrapeWebsiteTool\"\n      - \"InternetSearchTool\"\n    tasks:\n      product_analysis:\n        description: |\n          Analyze product and competitor landscape for key trends, strengths, and areas of opportunity in the market.\n        expected_output: \"Detailed report with insights on competitors, market trends, and potential strategy alignments.\"\n  chief_marketing_strategist:\n    role: \"Chief Marketing Strategist\"\n    backstory: |\n      You are the Chief Marketing Strategist at a leading digital marketing agency, known for crafting bespoke strategies that drive success.\n    goal: |\n      Formulate comprehensive marketing strategies based on product analysis and market insights.\n    verbose: true\n    allow_delegation: false\n    tools:\n      - \"ScrapeWebsiteTool\"\n      - \"InternetSearchTool\"\n      - \"InstagramSearchTool\"\n    tasks:\n      strategy_formulation:\n        description: |\n          Synthesize insights from product analysis to develop impactful marketing strategies.\n        expected_output: \"Strategic recommendations for marketing based on product insights and competitor landscape.\"\n  creative_content_creator:\n    role: \"Creative Content Creator\"\n    backstory: |\n      As a Creative Content Creator at a top-tier digital marketing agency, you excel in crafting narratives that resonate with audiences on social media. Your expertise lies in turning strategies into engaging stories and visual content.\n    goal: |\n      Create compelling social media content for campaigns, focusing on high-impact Instagram ad copies.\n    verbose: true\n    allow_delegation: true\n    tools:\n      - \"ScrapeWebsiteTool\"\n      - \"InternetSearchTool\"\n      - \"InstagramSearchTool\"\n    tasks:\n      content_creation:\n        description: |\n          Develop social media content that aligns with the marketing strategy and captures the target audience's attention.\n        expected_output: \"Engaging social media content, optimized for platforms like Instagram, to enhance campaign reach.\"\n  senior_photographer:\n    role: \"Senior Photographer\"\n    backstory: |\n      As a Senior Photographer at a leading digital marketing agency, you are an expert in capturing photographs that inspire and engage. You are currently working on an important campaign to take standout visuals.\n    goal: |\n      Capture high-quality photographs for Instagram ads that convey emotion and resonate with the audience.\n    verbose: true\n    allow_delegation: false\n    tools:\n      - \"InstagramSearchTool\"\n    tasks:\n      photography:\n        description: |\n          Produce visually compelling photographs that align with the campaign's objectives and enhance the ad's impact.\n        expected_output: \"High-quality photographs suitable for Instagram ads that capture audience attention and engagement.\"\n  chief_creative_director:\n    role: \"Chief Creative Director\"\n    backstory: |\n      You're the Chief Content Officer of a leading digital marketing agency specializing in product branding. You ensure that your team delivers top-tier content aligned with client goals.\n    goal: |\n      Oversee and refine content produced by the team, ensuring alignment with the brand's objectives and quality standards.\n    verbose: true\n    allow_delegation: true\n    tools:\n      - \"ScrapeWebsiteTool\"\n      - \"InternetSearchTool\"\n      - \"InstagramSearchTool\"\n    tasks:\n      review_content:\n        description: |\n          Evaluate content produced by team members, provide feedback, and approve or request refinements as needed.\n        expected_output: \"Reviewed and refined content aligned with campaign and client goals.\"\ndependencies: []\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Initializing and Running PraisonAI Email Responder\nDESCRIPTION: Sets up and executes the PraisonAI instance with configured agents and tools. Requires OpenAI API key setup in Google Colab environment.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/cookbooks/yaml/auto_email_responder_agents.ipynb#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom praisonai import PraisonAI\nfrom google.colab import userdata\n\n# Create a PraisonAI instance with the agent_yaml content\npraisonai = PraisonAI(agent_yaml=agent_yaml, tools=[TavilySearchResults, GmailGetThread, CreateDraftTool, SerperDevTool])\n\n# Add OPENAI_API_KEY Secrets to Google Colab on the Left Hand Side 🔑 or Enter Manually Below\nos.environ[\"OPENAI_API_KEY\"] = userdata.get('OPENAI_API_KEY') or \"ENTER OPENAI_API_KEY HERE\"\nos.environ[\"OPENAI_MODEL_NAME\"] = \"gpt-4o-mini\"\n\n# Run PraisonAI\nresult = praisonai.run()\n\n# Print the result\nprint(result) # 8/10\n```\n\n----------------------------------------\n\nTITLE: Preparing Tools for Function Execution\nDESCRIPTION: This snippet shows how to prepare the tool for execution by the agent. It creates a list called `role_tools` and stores the actual Python function (`callable_func`) in it. Then, it assigns this list to the `agent.tools` property, granting the agent access to the executable function.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/praisonai/ui/tools.md#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n```python\n# role_tools: What your code executes\nrole_tools = []\nrole_tools.append(callable_func)  # Store the actual function\nagent.tools = role_tools  # Give agent access to executable functions\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Email Response Tools\nDESCRIPTION: Defines custom tool classes for Tavily search, Gmail thread retrieval, and email draft creation. Includes error handling and specific formatting requirements for email drafts.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/cookbooks/yaml/auto_email_responder_agents.ipynb#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom praisonai_tools import BaseTool, SerperDevTool\nfrom langchain.tools import tool\n\nfrom langchain_community.agent_toolkits import GmailToolkit\nfrom langchain_community.tools.gmail.create_draft import GmailCreateDraft\nfrom langchain_community.tools.gmail.get_thread import GmailGetThread\nfrom langchain.utilities.tavily_search import TavilySearchAPIWrapper\n\n\nclass TavilySearchResults(BaseTool):\n    name: str = \"TavilyTool\"\n    description: str = \"Search Tavily for relevant information based on a query, particularly useful for topic-specific research.\"\n\n    def _run(self, query: str):\n        api_wrapper = TavilySearchAPIWrapper()\n        results = api_wrapper.results(query=query, max_results=5)\n        return results\n\n\nclass GmailGetThreadTool(BaseTool):\n    name: str = \"GmailGetThreadTool\"\n    description: str = \"Retrieve the complete thread of an email for context analysis, given a thread ID.\"\n\n    def _run(self, thread_id: str):\n        gmail_toolkit = GmailToolkit()\n        get_thread = GmailGetThread(api_resource=gmail_toolkit.api_resource)\n        thread = get_thread(thread_id)\n        return thread\n\n\nclass CreateDraftTool(BaseTool):\n    name: str = \"CreateDraftTool\"\n    description: str = (\n        \"Creates an email draft given recipient email, subject, and message content, \"\n        \"formatted as a pipe-separated string: email|subject|message.\"\n    )\n    def _run(self, data: str) -> str:\n        \"\"\"\n        Creates an email draft.\n\n        The input should be a pipe (|) separated text of length 3 (three), representing:\n        - recipient email\n        - subject of the email\n        - the message body of the email.\n\n        Example format: `example@example.com|Nice To Meet You|It was great meeting you.`\n        \"\"\"\n        try:\n            email, subject, message = data.split(\"|\")\n            gmail = GmailToolkit()\n            draft = GmailCreateDraft(api_resource=gmail.api_resource)\n            result = draft({\"to\": [email], \"subject\": subject, \"message\": message})\n            return f\"Draft created: {result}\"\n        except Exception as e:\n            return f\"Failed to create draft: {str(e)}\"\n```\n\n----------------------------------------\n\nTITLE: Defining ProjectEvaluation Pydantic Model\nDESCRIPTION: This Python code defines a Pydantic model named `ProjectEvaluation` to structure the output of the AI agent. It specifies the fields that will be included in the evaluation, such as innovation score, technical complexity, and areas for improvement. Pydantic is used for data validation and type hinting.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/ui/streamlit/hackathon-judge-streamlit.mdx#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n\"from pydantic import BaseModel\nfrom typing import List, Dict\nimport tempfile\nimport json\n\nclass ProjectEvaluation(BaseModel):\n    innovation_score: int  # 0-100\n    technical_complexity: int # 0-100  \n    presentation_quality: int # 0-100\n    user_experience: int # 0-100\n    completeness: int # 0-100\n    overall_score: int # 0-100\n    key_strengths: List[str]\n    areas_for_improvement: List[str]\n    notable_features: List[str]\n    technical_highlights: List[str]\n    recommendations: List[str]\n    market_potential: str\n    scalability_assessment: str\"\n```\n\n----------------------------------------\n\nTITLE: Creating a PraisonAI Agent with Google Maps Integration\nDESCRIPTION: Creates a Python script that initializes an AI agent with Google Maps capabilities using MCP. The agent is configured to interact with Google Maps for location-based queries.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/mcp/google-maps.mdx#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent, MCP\nimport os\n\n# Get the API key from environment\nmaps_api_key = os.getenv(\"GOOGLE_MAPS_API_KEY\")\n\n# Use a single string command with Google Maps configuration\nmaps_agent = Agent(\n    instructions=\"\"\"You are a helpful assistant that can interact with Google Maps.\n    Use the available tools when relevant to handle location-based queries.\"\"\",\n    llm=\"gpt-4o-mini\",\n    tools=MCP(\"npx -y @modelcontextprotocol/server-google-maps\",\n            env={\"GOOGLE_MAPS_API_KEY\": maps_api_key})\n)\n\nmaps_agent.start(\"Find nearby restaurants in London\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Internet Search Tool Class\nDESCRIPTION: Custom implementation of an internet search tool using DuckDuckGo API that extends BaseTool class for web searches\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/cookbooks/yaml/landing_page_generator_agents.ipynb#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom duckduckgo_search import DDGS\nfrom praisonai_tools import BaseTool, FileReadTool\nfrom langchain_community.tools.file_management.write import WriteFileTool\n\n\nclass InternetSearchTool(BaseTool):\n    name: str = \"InternetSearchTool\"\n    description: str = \"Search Internet for relevant information based on a query or latest news\"\n\n    def _run(self, query: str):\n        ddgs = DDGS()\n        results = ddgs.text(keywords=query, region='wt-wt', safesearch='moderate', max_results=5)\n        return results\n```\n\n----------------------------------------\n\nTITLE: Async Operations with asyncio and aiohttp in PraisonAI\nDESCRIPTION: This snippet demonstrates asynchronous I/O operations using `asyncio` and `aiohttp` within PraisonAI. The `fetch_data` function asynchronously fetches data from multiple URLs using `aiohttp.ClientSession` and `asyncio.gather`, improving performance for I/O-bound tasks.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/concepts/tools.mdx#2025-04-19_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nasync def fetch_data(urls: List[str]):\n    async with aiohttp.ClientSession() as session:\n        tasks = [fetch_url(session, url) for url in urls]\n        return await asyncio.gather(*tasks)\n```\n\n----------------------------------------\n\nTITLE: Task Definition with PraisonAI Agents\nDESCRIPTION: This code defines a specific research task using the `Task` constructor. It includes a description of the research objective and the expected output, which helps guide the agent's actions.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/wikipedia_tools.mdx#2025-04-19_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nTask(\n        description=\"Research historical events and gather sources\",\n        expected_output=\"Detailed research summary\"\n    )\n```\n\n----------------------------------------\n\nTITLE: Detailed CrewAI Playbook Example in YAML\nDESCRIPTION: This example demonstrates a more detailed CrewAI agent playbook using YAML. It defines multiple roles: 'movie_concept_creator', 'screenwriter', and 'editor', each with their own backstory, goal, role, and associated tasks. Each task includes a detailed description and the expected output.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/developers/agents-playbook.mdx#2025-04-19_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml\nframework: crewai\ntopic: Artificial Intelligence\nroles:\n  movie_concept_creator:\n    backstory: 'Creative thinker with a deep understanding of cinematic storytelling,\n      capable of using AI-generated storylines to create unique and compelling movie\n      ideas.'\n    goal: Generate engaging movie concepts using AI storylines\n    role: Movie Concept Creator\n    tasks:\n      movie_concept_development:\n        description: 'Develop movie concepts from AI-generated storylines, ensuring\n          they are engaging and have strong narrative arcs.'\n        expected_output: 'Well-structured movie concept document with character\n          bios, settings, and plot outlines.'\n  screenwriter:\n    backstory: 'Expert in writing engaging dialogue and script structure, able to\n      turn movie concepts into production-ready scripts.'\n    goal: Write compelling scripts based on movie concepts\n    role: Screenwriter\n    tasks:\n      scriptwriting_task:\n        description: 'Turn movie concepts into polished scripts with well-developed\n          characters, strong dialogue, and effective scene transitions.'\n        expected_output: 'Production-ready script with a beginning, middle, and\n          end, along with character development and engaging dialogues.'\n  editor:\n    backstory: 'Adept at identifying inconsistencies, improving language usage,\n      and maintaining the overall flow of the script.'\n    goal: Refine the scripts and ensure continuity of the movie storyline\n    role: Editor\n    tasks:\n      editing_task:\n        description: 'Review, edit, and refine the scripts to ensure they are cohesive\n          and follow a well-structured narrative.'\n        expected_output: 'A polished final draft of the script with no inconsistencies,\n          strong character development, and effective dialogue.'\ndependencies: []\n```\n```\n\n----------------------------------------\n\nTITLE: Initializing Hierarchical Process with PraisonAI\nDESCRIPTION: This code initializes `PraisonAIAgents` with a \"hierarchical\" process, enabling asynchronous mode, dynamic assignment of worker tasks, and parallel subtask execution with manager delegation.  The `astart()` method is then called to start the agents asynchronously, utilizing `dynamic_assignment=True`.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/concepts/process.mdx#2025-04-19_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nasync def main():\n    agents = PraisonAIAgents(\n        process=\"hierarchical\",\n        async_mode=True,\n        dynamic_assignment=True\n    )\n    await agents.astart()\n```\n\n----------------------------------------\n\nTITLE: Visualizing AI Memory Architecture\nDESCRIPTION: This mermaid code snippet visualizes the architecture of AI agents with memory, illustrating components like short-term and long-term memory and their interactions with agents and storage. It provides a schematic representation to aid understanding of memory flows and dependencies.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/concepts/memory.mdx#2025-04-19_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TB\n    subgraph Memory\n        direction TB\n        STM[Short Term]\n        LTM[Long Term]\n    end\n\n    subgraph Store\n        direction TB\n        DB[(Vector DB)]\n    end\n\n    Input[Input] ---> Agents\n    subgraph Agents\n        direction LR\n        A1[Agent 1]\n        A2[Agent 2]\n        A3[Agent 3]\n    end\n    Agents ---> Output[Output]\n\n    Memory <--> Store\n    Store <--> A1\n    Store <--> A2\n    Store <--> A3\n\n    style Memory fill:#189AB4,color:#fff\n    style Store fill:#2E8B57,color:#fff\n    style Agents fill:#8B0000,color:#fff\n    style Input fill:#8B0000,color:#fff\n    style Output fill:#8B0000,color:#fff\n```\n\n----------------------------------------\n\nTITLE: Aggregating News Content in Python\nDESCRIPTION: This snippet defines a function `aggregate_news` that aggregates news articles from multiple categories.  It retrieves news sources for each category, fetches articles from the top 3 sources, and extends the `all_articles` list. Finally it calls the defined function with a list of categories and stores results in `news` variable.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/newspaper_tools.mdx#2025-04-19_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n# Aggregate news from multiple sources\ndef aggregate_news(categories):\n    all_articles = []\n    for category in categories:\n        sources = get_news_sources(category=category)\n        for source in sources[:3]:  # Top 3 sources per category\n            articles = get_articles_from_source(\n                source[\"url\"],\n                limit=3\n            )\n            all_articles.extend(articles)\n    return all_articles\n\nnews = aggregate_news([\"technology\", \"business\", \"science\"])\n```\n\n----------------------------------------\n\nTITLE: Initializing and Running PraisonAI System\nDESCRIPTION: Sets up the PraisonAI instance with configuration, API keys, and executes the meeting preparation system with the defined tools and agents.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/cookbooks/yaml/meeting_prep_and_strategy_agents.ipynb#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom praisonai import PraisonAI\nfrom google.colab import userdata\n\n# Create a PraisonAI instance with the agent_yaml content\npraisonai = PraisonAI(agent_yaml=agent_yaml, tools=[InternetSearchTool])\n\n# Add OPENAI_API_KEY Secrets to Google Colab on the Left Hand Side 🔑 or Enter Manually Below\nos.environ[\"OPENAI_API_KEY\"] = userdata.get('OPENAI_API_KEY') or \"ENTER OPENAI_API_KEY HERE\"\nos.environ[\"EXA_API_KEY\"] = userdata.get('EXA_API_KEY') or \"ENTER EXA_API_KEY HERE\"\nos.environ[\"OPENAI_MODEL_NAME\"] = \"gpt-4o-mini\"\n\n# Run PraisonAI\nresult = praisonai.run()\n\n# Print the result\nprint(result) # 10/10\n```\n\n----------------------------------------\n\nTITLE: Installing PraisonAI Framework Options\nDESCRIPTION: Installation commands for PraisonAI with different framework options including standalone, CrewAI integration, AG2 integration, or both frameworks together.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/nocode/auto.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# For PraisonAI Agents\npip install praisonai\n\n# For CrewAI\npip install \"praisonai[crewai]\"\n\n# For AG2 (Formerly AutoGen)\npip install \"praisonai[autogen]\"\n\n# For both frameworks\npip install \"praisonai[crewai,autogen]\"\n```\n\n----------------------------------------\n\nTITLE: Visualizing Knowledge Retrieval Process in Mermaid\nDESCRIPTION: This graph in Mermaid shows the process of knowledge retrieval. It delineates steps from query processing, searching the knowledge base, ranking results, to synthesizing an answer. The graph requires a rendering environment that supports Mermaid syntax.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/course/agents/09-knowledge-bases.mdx#2025-04-19_snippet_4\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph LR\n    A[User Question] --> B[Query Processing]\n    B --> C[Search Knowledge Base]\n    C --> D[Rank Results]\n    D --> E[Synthesize Answer]\n```\n\n----------------------------------------\n\nTITLE: Defining Task for Agent\nDESCRIPTION: Defines a task that utilizes the data agent to perform an internet search for 'AI job trends in 2024'.  The task specifies the expected output format.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/quickstart.mdx#2025-04-19_snippet_21\n\nLANGUAGE: python\nCODE:\n```\n# 3. Tasks\ncollect_task = Task(\n    description=\"Perform an internet search using the query: 'AI job trends in 2024'. Return results as a list of title, URL, and snippet.\",\n    expected_output=\"List of search results with titles, URLs, and snippets.\",\n    agent=data_agent,\n    name=\"collect_data\",\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Wikipedia Research Agent\nDESCRIPTION: This code creates an `Agent` instance for Wikipedia research using the `praisonaiagents` library.  The agent is configured with a name, role, goal, backstory, and a list of Wikipedia tools it can use. `self_reflect` is set to `False`.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/wikipedia_tools.mdx#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nwiki_agent = Agent(\n        name=\"WikiResearcher\",\n        role=\"Wikipedia Research Specialist\",\n        goal=\"Research and analyze Wikipedia content efficiently.\",\n        backstory=\"Expert in information retrieval and content analysis.\",\n        tools=[wiki_search, wiki_summary, wiki_page, wiki_random, wiki_language],\n        self_reflect=False\n    )\n```\n\n----------------------------------------\n\nTITLE: Advanced Market Analysis with Multiple Agents\nDESCRIPTION: Create a comprehensive market analysis workflow using multiple specialized agents for data collection and trend analysis, demonstrating advanced financial data processing capabilities.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/yfinance_tools.mdx#2025-04-19_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndata_agent = Agent(\n    name=\"DataCollector\",\n    role=\"Market Data Collector\",\n    goal=\"Retrieve financial data systematically.\",\n    tools=[get_stock_price, get_historical_data],\n    self_reflect=False\n)\n\nanalysis_agent = Agent(\n    name=\"Analyst\",\n    role=\"Market Analyst\",\n    goal=\"Analyze market trends and patterns.\",\n    backstory=\"Expert in financial market analysis.\",\n    tools=[get_stock_info],\n    self_reflect=False\n)\n\ndata_task = Task(\n    description=\"Collect historical market data for analysis.\",\n    agent=data_agent,\n    name=\"data_collection\"\n)\n\nanalysis_task = Task(\n    description=\"Analyze collected market data for insights.\",\n    agent=analysis_agent,\n    name=\"trend_analysis\"\n)\n\nagents = PraisonAIAgents(\n    agents=[data_agent, analysis_agent],\n    tasks=[data_task, analysis_task],\n    process=\"sequential\"\n)\nagents.start()\n```\n\n----------------------------------------\n\nTITLE: Advanced Logging Callback Implementation\nDESCRIPTION: This Python code demonstrates an advanced logging callback that includes timestamps, detailed messages, and file output. It sets up logging to a file and registers a synchronous callback that logs detailed information about agent interactions.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/callbacks.mdx#2025-04-19_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n\"import logging\nfrom datetime import datetime\n\n# Setup logging with file output\nlogging.basicConfig(\n    filename='ai_interactions.log',\n    level=logging.INFO,\n    format='%(asctime)s - %(levelname)s - %(message)s'\n)\n\ndef detailed_callback(message=None, response=None, **kwargs):\n    logging.info(f\\\"\\\"\\\"\n    Time: {datetime.now()}\n    Message: {message}\n    Response: {response}\n    Additional Info: {kwargs}\n    \\\"\\\"\\\")\n\nregister_display_callback('interaction', detailed_callback)\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Agent Roles and Tasks in YAML\nDESCRIPTION: Defines the structure of different AI agent roles (Research Specialist, Industry Analyst, Meeting Strategy Advisor, and Briefing Coordinator) with their respective tasks and responsibilities in YAML format.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/cookbooks/yaml/meeting_prep_and_strategy_agents.ipynb#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nagent_yaml = \"\"\"\nframework: \"crewai\"\ntopic: \"Meeting Preparation and Strategy Development\"\nroles:\n  research_specialist:\n    role: \"Research Specialist\"\n    backstory: |\n      As a Research Specialist, you are dedicated to uncovering detailed information\n      about the individuals and entities involved in the meeting. Your insights lay\n      the groundwork for strategic preparation and effective engagement.\n    goal: \"Conduct thorough research on meeting participants and organizations.\"\n    tasks:\n      research_task:\n        description: |\n          Conduct comprehensive research on each of the individuals and companies involved in the upcoming meeting.\n          Gather information on recent news, achievements, professional background, and relevant business activities.\n          Participants: [\"John Doe - CEO, Tech Innovations Inc.\", \"Jane Smith - Head of AI Research, NextGen AI Labs\", \"Emily Carter - Chief Strategist, FutureTech Partners\"]\n          Meeting Context: \"Discussing recent AI advancements, strategic partnerships, and potential collaborative projects in the tech industry.\"\n        expected_output: |\n          A detailed report summarizing key findings about each participant and company,\n          highlighting information that could be relevant for the meeting.\n    tools:\n      - \"InternetSearchTool\"\n  industry_analyst:\n    role: \"Industry Analyst\"\n    backstory: |\n      As an Industry Analyst, your focus is on identifying key industry trends, challenges, and opportunities.\n      Your analysis provides a comprehensive industry overview that can be leveraged strategically in the meeting.\n    goal: \"Analyze the current industry trends, challenges, and opportunities.\"\n    tasks:\n      industry_analysis_task:\n        description: |\n          Analyze current industry trends, challenges, and opportunities relevant to the meeting's context.\n          Review market reports, recent developments, and expert opinions to provide a comprehensive industry landscape.\n          Participants: [\"John Doe - CEO, Tech Innovations Inc.\", \"Jane Smith - Head of AI Research, NextGen AI Labs\", \"Emily Carter - Chief Strategist, FutureTech Partners\"]\n          Meeting Context: \"Discussing recent AI advancements, strategic partnerships, and potential collaborative projects in the tech industry.\"\n        expected_output: |\n          An insightful analysis that identifies major trends, potential challenges, and strategic opportunities.\n    tools:\n      - \"InternetSearchTool\"\n  meeting_strategy_advisor:\n    role: \"Meeting Strategy Advisor\"\n    backstory: |\n      As a Strategy Advisor, you specialize in developing talking points, questions, and discussion angles to ensure\n      the meeting's objectives are achieved. Your expertise supports the meeting's strategic direction.\n    goal: \"Develop talking points, questions, and strategic angles for the meeting.\"\n    tasks:\n      meeting_strategy_task:\n        description: |\n          Develop strategic talking points, questions, and discussion angles for the meeting based on the research and industry analysis conducted.\n          Meeting Context: \"Discussing recent AI advancements, strategic partnerships, and potential collaborative projects in the tech industry.\"\n          Meeting Objective: \"Establishing partnership opportunities, aligning goals in AI research, and identifying key collaboration areas to strengthen market positioning.\"\n        expected_output: |\n          Complete report with a list of key talking points, strategic questions to ask, and angles to approach to help achieve the meeting's objectives.\n    tools:\n      - \"InternetSearchTool\"\n  briefing_coordinator:\n    role: \"Briefing Coordinator\"\n    backstory: |\n      As the Briefing Coordinator, your role is to consolidate all research findings, analysis, and strategic insights.\n      You provide a structured, easy-to-digest briefing that equips participants with necessary information and strategies.\n    goal: \"Compile all gathered information into a concise, informative briefing document.\"\n    tasks:\n      summary_and_briefing_task:\n        description: |\n          Compile all research findings, industry analysis, and strategic talking points into a concise, comprehensive briefing document.\n          Ensure the briefing is structured and accessible to equip meeting participants with all necessary information and strategies.\n          Meeting Context: \"Discussing recent AI advancements, strategic partnerships, and potential collaborative projects in the tech industry.\"\n          Meeting Objective: \"Establishing partnership opportunities, aligning goals in AI research, and identifying key collaboration areas to strengthen market positioning.\"\n        expected_output: |\n          A well-structured briefing document that includes sections for\n          participant bios, industry overview, talking points, and strategic recommendations.\n    tools:\n      - \"InternetSearchTool\"\ndependencies: []\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Agent for Lung Disease Research\nDESCRIPTION: YAML configuration for a research analyst agent using YouTubeSearchTool to investigate lung disease causes.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/langchain.mdx#2025-04-19_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nframework: crewai\ntopic: research about the causes of lung disease\nroles:\n  research_analyst:\n    backstory: Experienced in analyzing scientific data related to respiratory health.\n    goal: Analyze data on lung diseases\n    role: Research Analyst\n    tasks:\n      data_analysis:\n        description: Gather and analyze data on the causes and risk factors of lung\n          diseases.\n        expected_output: Report detailing key findings on lung disease causes.\n    tools:\n    - 'YouTubeSearchTool'\n```\n\n----------------------------------------\n\nTITLE: Implementing Gemini AI Agent with Streamlit\nDESCRIPTION: This Python script sets up an interactive chat UI using Streamlit that integrates with the Gemini model. It initializes an AI agent with specific model instructions and uses a text area for input queries. The setup includes a cache-efficient initialization, an input area, and a response display.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/ui/streamlit/gemini-streamlit.mdx#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\nfrom praisonaiagents import Agent\n\nst.title(\"Gemini 2.0 Thinking AI Agent\")\n\n# Initialize the agent\n@st.cache_resource\ndef get_agent():\n    llm_config = {\n        \"model\": \"gemini/gemini-2.0-flash-thinking-exp-01-21\",\n        \"response_format\": {\"type\": \"text\"}\n    }\n    \n    return Agent(\n        instructions=\"You are a helpful assistant\",\n        llm=llm_config\n    )\n\nagent = get_agent()\n\n# Create text area input field\nuser_question = st.text_area(\"Ask your question:\", height=150)\n\n# Add ask button\nif st.button(\"Ask\"):\n    if user_question:\n        with st.spinner('Thinking...'):\n            result = agent.start(user_question)\n            st.write(\"### Answer\")\n            st.write(result)\n    else:\n        st.warning(\"Please enter a question\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Multi-Agent System\nDESCRIPTION: This snippet combines the specialized agents into a single multi-agent system. The 'PraisonAIAgents' class is used to manage the collaboration of the defined agents.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/course/agents/13-building-multi-agent-system.mdx#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Create a multi-agent system\ncontent_team = PraisonAIAgents(\n    agents=[research_agent, writing_agent, editing_agent]\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Tools for Web Scraping and LinkedIn Integration in Python\nDESCRIPTION: Implements custom tools including ScrapeWebsiteTool for web content extraction, Driver for web navigation, Client for LinkedIn interaction, and LinkedInTool for LinkedIn profile retrieval based on skills.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/cookbooks/yaml/recruitment_flow_agents.ipynb#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# TODo: Resolve Issue for LinkedinClient Error in output\nimport os\nimport time\nimport urllib\nimport requests\nfrom bs4 import BeautifulSoup\n\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.firefox.options import Options\nfrom duckduckgo_search import DDGS\nfrom praisonai_tools import BaseTool, SerperDevTool, FileReadTool\n\nclass ScrapeWebsiteTool(BaseTool):\n    name: str = \"WebContentReaderTool\"\n    description: str = \"Fetches and reads the main text content from a specified webpage URL.\"\n\n    def _run(self, url: str) -> str:\n        \"\"\"Reads the content of a webpage and returns up to 5000 characters of text.\"\"\"\n        try:\n            response = requests.get(url, headers={'User-Agent': 'Mozilla/5.0'})\n            response.raise_for_status()\n            soup = BeautifulSoup(response.content, 'html.parser')\n\n            # Extract and clean the text content\n            text_content = soup.get_text(separator=\"\\n\", strip=True)\n            return text_content[:5000]  # Limit content to 5000 characters for brevity\n        except requests.exceptions.RequestException as e:\n            return f\"Failed to retrieve content from {url}: {e}\"\n\n\nclass Driver:\n    def __init__(self, url, cookie=None):\n        self.driver = self._create_driver(url, cookie)\n\n    def navigate(self, url, wait=3):\n        self.driver.get(url)\n        time.sleep(wait)\n\n    def scroll_to_bottom(self, wait=3):\n        self.driver.execute_script(\"window.scrollTo(0, document.body.scrollHeight);\")\n        time.sleep(wait)\n        self.driver.execute_script(\"window.scrollTo(0, document.body.scrollHeight);\")\n        time.sleep(wait)\n\n    def get_element(self, selector):\n        return self.driver.find_element(By.CSS_SELECTOR, selector)\n\n    def get_elements(self, selector):\n        return self.driver.find_elements(By.CSS_SELECTOR, selector)\n\n    def fill_text_field(self, selector, text):\n        element = self.get_element(selector)\n        element.clear()\n        element.send_keys(text)\n\n    def click_button(self, selector):\n        element = self.get_element(selector)\n        element.click()\n\n    def _create_driver(self, url, cookie):\n        options = Options()\n        # options.add_argument(\"--headless\")\n        driver = webdriver.Firefox(options=options)\n        driver.get(url)\n        if cookie:\n            driver.add_cookie(cookie)\n        return driver\n\n    def close(self):\n        self.driver.close()\nclass Client:\n  def __init__(self):\n    url = 'https://linkedin.com/'\n    cookie = {\n      \"name\": \"li_at\",\n      \"value\": os.environ[\"LINKEDIN_COOKIE\"],\n      \"domain\": \".linkedin.com\"\n    }\n\n    self.driver = Driver(url, cookie)\n\n  def find_people(self, skills):\n    skills = skills.split(\",\")\n    search = \" \".join(skills)\n    encoded_string = urllib.parse.quote(search.lower())\n    url = f\"https://www.linkedin.com/search/results/people/?keywords={encoded_string}\"\n    self.driver.navigate(url)\n\n    people = self.driver.get_elements(\"ul li div div.linked-area\")\n\n    results = []\n    for person in people:\n      try:\n        result = {}\n        result[\"name\"] = person.find_element(By.CSS_SELECTOR, \"span.entity-result__title-line\").text\n        result[\"position\"] = person.find_element(By.CSS_SELECTOR, \"div.entity-result__primary-subtitle\").text\n        result[\"location\"] = person.find_element(By.CSS_SELECTOR, \"div.entity-result__secondary-subtitle\").text\n        result[\"profile_link\"] = person.find_element(By.CSS_SELECTOR, \"a.app-aware-link\").get_attribute(\"href\")\n      except Exception as e:\n        print(e)\n        continue\n      results.append(result)\n    return results\n\n  def close(self):\n    self.driver.close()\n\n\nclass LinkedInTool(BaseTool):\n    name: str = \"LinkedInTool\"\n    description: str = \"Retrieves LinkedIn profiles given a list of skills, specified as a comma-separated string.\"\n\n    def _run(self, skills: str) -> str:\n        \"\"\"\n        Searches LinkedIn for profiles matching the provided skills.\n\n        Parameters:\n        - skills (str): A comma-separated string of skills to search for on LinkedIn.\n\n        Returns:\n        - str: A formatted string containing profile details for each result.\n        \"\"\"\n        try:\n            # Initialize LinkedIn client and search\n            linkedin_client = LinkedInClient()\n            people = linkedin_client.find_people(skills)\n            linkedin_client.close()\n\n            # Format and return the results\n            return self._format_profiles(people)\n\n        except Exception as e:\n            return f\"An error occurred: {str(e)}\"\n\n    def _format_profiles(self, people: list) -> str:\n        \"\"\"\n        Formats the LinkedIn profile information into a readable text format.\n\n        Parameters:\n        - people (list): List of dictionaries containing profile details.\n\n        Returns:\n        - str: Formatted profile information.\n        \"\"\"\n        formatted_profiles = [\n            \"\\n\".join([\n                \"Person Profile\",\n                \"-------------\",\n                f\"Name: {p['name']}\",\n                f\"Position: {p['position']}\",\n                f\"Location: {p['location']}\",\n                f\"Profile Link: {p['profile_link']}\",\n            ])\n            for p in people\n        ]\n        return \"\\n\\n\".join(formatted_profiles)\n```\n\n----------------------------------------\n\nTITLE: Create Simple Chat Interface in Python\nDESCRIPTION: This snippet creates a simple command-line chat interface for interacting with an AI agent. It initializes the `Agent` with instructions for conversational context. It then enters a loop, taking user input, processing it with the agent using either `agent.start` for the first message or `agent.continue` for subsequent messages, and printing the agent's response.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/course/agents/20-deploying-agents.mdx#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom praisonaiagents import Agent\n\ndef create_chat_interface():\n    # Initialize agent\n    agent = Agent(\n        name=\"ChatAgent\",\n        instructions=\"\"\"\n        You are a conversational assistant that maintains context throughout the conversation.\n        Respond in a helpful, concise manner.\n        \"\"\",\n        llm=\"gpt-4o-mini\"  # Using the specified model\n    )\n    \n    print(\"Chat with AI Assistant (type 'exit' to quit)\")\n    print(\"-\" * 50)\n    \n    # Start conversation\n    conversation_active = True\n    first_message = True\n    \n    while conversation_active:\n        # Get user input\n        user_message = input(\"You: \")\n        \n        # Check if user wants to exit\n        if user_message.lower() == 'exit':\n            print(\"Goodbye!\")\n            conversation_active = False\n            continue\n        \n        # Get agent response\n        try:\n            if first_message:\n                response = agent.start(user_message)\n                first_message = False\n            else:\n                response = agent.continue(user_message)\n            \n            print(\"\\nAssistant:\", response)\n            print(\"\\n\" + \"-\" * 50)\n        except Exception as e:\n            print(f\"Error: {str(e)}\")\n    \nif __name__ == \"__main__\":\n    create_chat_interface()\n```\n\n----------------------------------------\n\nTITLE: Setting Up Symptom Analysis with Python\nDESCRIPTION: This Python function simulates the analysis of symptoms, providing mock cases with diverse symptom profiles, severity levels, and durations, reflecting realistic data that an AI system might analyze.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/examples/healthcare-diagnosis.mdx#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef analyze_symptoms():\n    \"\"\"Simulates symptom analysis\"\"\"\n    cases = [\n        {\"symptoms\": [\"fever\", \"cough\", \"fatigue\"], \"severity\": \"high\", \"duration\": \"5_days\"},\n        {\"symptoms\": [\"headache\", \"nausea\"], \"severity\": \"medium\", \"duration\": \"2_days\"},\n        {\"symptoms\": [\"rash\", \"itching\"], \"severity\": \"low\", \"duration\": \"1_week\"}\n    ]\n    return cases[int(time.time()) % 3]\n```\n\n----------------------------------------\n\nTITLE: Describing Callback Systems with YAML\nDESCRIPTION: This YAML configuration file outlines a praisonai-based callback system, specifying the framework and processes involved. The document configures a callback agent, detailing its role, backstory, and tasks like demonstrating callback types. It defines callbacks for interactions, errors, and tool calls with specific logging levels and formats. It's meant for configuring callback behavior in a system.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/callbacks.mdx#2025-04-19_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nframework: praisonai\nprocess: sequential\ntopic: demonstrate complete callback system\nroles:\n  callback_agent:\n    backstory: Expert in comprehensive callback implementation\n    goal: Demonstrate a complete callback system\n    role: Callback Expert\n    tasks:\n      callback_demo:\n        description: Show how callbacks work in a complete system\n        expected_output: Demonstration of all callback types\n    tools:\n    - callback_tool\ncallbacks:\n  interaction:\n    type: sync\n    enabled: true\n    log_file: ai_interactions.log\n    format: \"%(asctime)s - %(name)s - %(levelname)s - %(message)s\"\n    level: INFO\n  error:\n    type: sync\n    enabled: true\n    log_file: ai_interactions.log\n    level: ERROR\n  tool_call:\n    type: sync\n    enabled: true\n    log_file: ai_interactions.log\n    level: INFO\n```\n\n----------------------------------------\n\nTITLE: Defining a Loop Task in Python\nDESCRIPTION: This snippet demonstrates how to create a loop task that processes a list of items in the PraisonAI framework. It highlights how to specify the operation to be performed on each item.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/concepts/tasks.mdx#2025-04-19_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nloop_task = Task(\n    type=\"loop\",\n    items=data_list,\n    operation=\"process_item\"\n)\n```\n\n----------------------------------------\n\nTITLE: Tool Usage for Summary Agent\nDESCRIPTION: Demonstrates how a summary agent is configured without the internet search tool. Since the agent only needs to summarize findings, it doesn't need to search the internet.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/mini.mdx#2025-04-19_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n# Summary agent doesn't need search\nsummary_agent = Agent(\n    instructions=\"Summarize findings\"\n)\n```\n\n----------------------------------------\n\nTITLE: Performing Calculations with Simple Python Tool\nDESCRIPTION: Implements a simple Python decorator-powered tool `CalculatorTool` that performs mathematical calculations. It accepts mathematical expressions like `200*7` and uses Python's `eval` function for computation, encapsulated by error handling to manage invalid inputs.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/cookbooks/yaml/stock_analysis_agents.ipynb#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"\nclass CalculatorTool():\n    @tool(\"Make a calculation\")\n    def calculate(operation: str) -> str:\n        \"\"\"Performs mathematical calculations. Accepts expressions like `200*7` or `5000/2*10`.\"\"\"\n        try:\n            return str(eval(operation))\n        except Exception as e:\n            return f\"Error: {e}\"\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Generating Diagnosis with Python\nDESCRIPTION: This Python function provides a simulated approach to diagnosis generation by evaluating symptom severity and lab results to determine and return a diagnosis with a confidence level.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/examples/healthcare-diagnosis.mdx#2025-04-19_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndef generate_diagnosis(symptoms: Dict, lab_results: Dict, history: Dict):\n    \"\"\"Simulates diagnosis generation\"\"\"\n    if symptoms[\"severity\"] == \"high\" and lab_results[\"markers\"] == \"elevated\":\n        return {\"diagnosis\": \"serious_condition\", \"confidence\": \"high\"}\n    elif symptoms[\"severity\"] == \"medium\" or lab_results[\"inflammation\"] == \"medium\":\n        return {\"diagnosis\": \"moderate_condition\", \"confidence\": \"medium\"}\n    return {\"diagnosis\": \"mild_condition\", \"confidence\": \"high\"}\n```\n\n----------------------------------------\n\nTITLE: Configuring Asynchronous Callbacks in PraisonAI with YAML\nDESCRIPTION: YAML configuration for setting up asynchronous callbacks in PraisonAI. This approach defines an async handler agent with a demonstration task and configures an asynchronous interaction callback with non-blocking behavior and specified logging options.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/callbacks.mdx#2025-04-19_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\nframework: praisonai\nprocess: sequential\ntopic: demonstrate basic async callbacks\nroles:\n  async_handler:\n    backstory: Specialized in asynchronous operations and callbacks\n    goal: Demonstrate basic async callback functionality\n    role: Async Specialist\n    tasks:\n      async_demo:\n        description: Show basic async callback functionality\n        expected_output: Demonstration of async callbacks\n    tools:\n    - async_tool\ncallbacks:\n  interaction:\n    type: async\n    enabled: true\n    log_file: async_interactions.log\n    format: \"%(asctime)s - %(levelname)s - %(message)s\"\n    level: INFO\n    non_blocking: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Memory System in PraisonAI\nDESCRIPTION: Detailed configuration of memory providers, storage paths, and settings for PraisonAI agents. Supports different memory providers like RAG, mem0, and custom storage options with embedding and time-to-live settings.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/concepts/memory.mdx#2025-04-19_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nmemory_config = {\n    \"provider\": \"rag\",        # Options: \"rag\", \"mem0\", \"none\"\n    \"use_embedding\": True,    # Enable semantic search with embeddings\n    \n    # Storage Paths\n    \"short_db\": \".praison/short_term.db\",  # Short-term memory SQLite DB\n    \"long_db\": \".praison/long_term.db\",    # Long-term memory SQLite DB\n    \"rag_db_path\": \".praison/chroma_db\",   # Vector database path\n    \n    # Memory Settings\n    \"ttl\": 3600,             # Time to live for memory items (in seconds)\n    \n    # Optional Mem0 Config (if using mem0 provider)\n    \"config\": {\n        \"api_key\": \"...\",    # Mem0 API key\n        \"org_id\": \"...\",     # Organization ID\n        \"project_id\": \"...\"  # Project ID\n    }\n}\n\n# Create agents with memory configuration\nagents = PraisonAIAgents(\n    agents=[agent],\n    tasks=[task],\n    memory=True,\n    memory_config=memory_config\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Multi-Agent Setup - Python\nDESCRIPTION: This Python snippet outlines the setup for multiple agents working in conjunction, showing the creation and execution of research and analysis tasks with structured outputs.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/structured.mdx#2025-04-19_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent, Task, PraisonAIAgents, Tools\nfrom pydantic import BaseModel\n\n# Define output structures\nclass ResearchReport(BaseModel):\n    topic: str\n    findings: str\n    sources: list[str]\n\nclass Analysis(BaseModel):\n    key_points: list[str]\n    implications: str\n    recommendations: str\n\n# Create first agent for research\nresearcher = Agent(\n    role=\"Research Analyst\",\n    goal=\"Gather and structure research data\",\n    backstory=\"Expert in research and data collection\",\n    tools=[Tools.internet_search],\n    verbose=True\n)\n\n# Create second agent for analysis\nanalyst = Agent(\n    role=\"Data Analyst\",\n    goal=\"Analyze research and provide structured insights\",\n    backstory=\"Expert in data analysis and insights generation\",\n    verbose=True\n)\n\n# Create first task\nresearch_task = Task(\n    description=\"Research quantum computing developments\",\n    expected_output=\"Structured research findings\",\n    agent=researcher,\n    output_pydantic=ResearchReport\n)\n\n# Create second task\nanalysis_task = Task(\n    description=\"Analyze research implications\",\n    expected_output=\"Structured analysis report\",\n    agent=analyst,\n    output_pydantic=Analysis\n)\n\n# Create and start the agents\nagents = PraisonAIAgents(\n    agents=[researcher, analyst],\n    tasks=[research_task, analysis_task],\n    process=\"sequential\"\n)\n\n# Start execution\nresult = agents.start()\n```\n\n----------------------------------------\n\nTITLE: Creating an Information Organization Assistant with PraisonAI\nDESCRIPTION: This snippet demonstrates how to create an information organization assistant using `Agent` from `praisonaiagents`. The agent structures and categorizes information based on provided instructions. It helps organize research notes on climate change in this example.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/course/agents/19-personal-assistant-agents.mdx#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ninfo_agent = Agent(\n    name=\"InformationOrganizer\",\n    instructions=\"\"\"\n    You are an information organization assistant who helps users structure and categorize information.\n    \n    When organizing information:\n    1. Identify the main categories and topics\n    2. Create logical groupings\n    3. Suggest clear labels and headers\n    4. Establish relationships between different pieces of information\n    5. Present information in a structured, easily navigable format\n    \"\"\",\n    llm=\"gpt-4o-mini\"  # Using the specified model\n)\n\n# Use the information organization agent\ninfo_response = info_agent.start(\n    \"\"\"\n    Help me organize my research notes on climate change:\n    \n    - Rising sea levels affecting coastal cities\n    - Carbon dioxide levels increasing annually\n    - Renewable energy adoption statistics by country\n    - Impact of deforestation on carbon sequestration\n    - Climate policy differences between EU and US\n    - Economic impacts of extreme weather events\n    - Public opinion polls on climate action\n    - Arctic ice sheet measurements over 50 years\n    - Agricultural adaptations to changing climate\n    \"\"\"\n)\nprint(info_response)\n```\n\n----------------------------------------\n\nTITLE: Displaying Asynchronous Instructions with PraisonAI in Python\nDESCRIPTION: This code snippet includes async functions for displaying instructions, tool calls, and error messages. These functions are used to handle interactions asynchronously with optional console outputs, showcasing how to enhance real-time user experiences with the PraisonAI framework.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/callbacks.mdx#2025-04-19_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nasync def adisplay_instruction(\n    message: str, \n    console=None\n)\n\nasync def adisplay_tool_call(\n    message: str, \n    console=None\n)\n\nasync def adisplay_error(\n    message: str, \n    console=None\n)\n\nasync def adisplay_generating(\n    content: str = \"\", \n    start_time: Optional[float] = None\n)\n```\n\n----------------------------------------\n\nTITLE: YAML-based Shakespearean Tweet Agent Configuration\nDESCRIPTION: Includes a YAML configuration for creating and verifying Shakespearean-style tweets using 'crewai'. It defines roles, backstories, goals, and tasks for agents like 'Shakespearean Bard' and 'X Post Verifier', using 'CharacterCounterTool'.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/cookbooks/yaml/shakespearean_tweets_generation_agents.ipynb#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nagent_yaml = \"\"\"\nframework: \"crewai\"\ntopic: \"Shakespearean-Style X Post Generation and Verification\"\nroles:\n  shakespearean_bard:\n    role: \"Shakespearean Bard\"\n    backstory: |\n      A witty bard, renowned for turning the mundane into the magnificent with playful jests and biting sarcasm.\n      Armed with wit and wisdom, you revel in creating humorous quips most pleasing to the ear.\n    goal: |\n      Craft sarcastic and playful hot takes in the style of Shakespeare that fit within modern social media constraints.\n    verbose: true\n    allow_delegation: false\n    tools:\n      - \"CharacterCounterTool\"\n    tasks:\n      write_x_post:\n        description: |\n          Given the topic '{topic}', compose a humorous hot take in the style of Shakespeare.\n          The tone should be sarcastic and playful. The final post must be over 200 characters and not exceed 280 characters, with no emojis.\n          If feedback is provided, incorporate it into the new version.\n        expected_output: \"A witty, Shakespearean hot take between 200 and 280 characters, free of emojis.\"\n\n  x_post_verifier:\n    role: \"X Post Verifier\"\n    backstory: |\n      A careful reviewer skilled at ensuring content meets guidelines while retaining clarity and brevity.\n      You meticulously verify that posts are within character limits, free of emojis, and adhere to the prescribed format.\n    goal: |\n      Verify that X posts comply with character limits, content guidelines, and style requirements.\n    verbose: true\n    allow_delegation: false\n    tools:\n      - \"CharacterCounterTool\"\n    tasks:\n      verify_x_post:\n        description: |\n          Ensure the given X post meets the following criteria:\n          - It is between 200 and 280 characters inclusive.\n          - It contains no emojis.\n          - It follows the 1-3-1 rule:\n            - 1 bold statement to hook the reader.\n            - 3 lines of supporting information.\n            - 1 sentence to summarize the post.\n\n          If any issues are found, provide actionable feedback. If all criteria are met, the post is considered valid.\n        expected_output: |\n          Final Tweet, Pass: True/False, Feedback: Commentary here if failed.\ndependencies: []\n\"\"\"\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Agent with YAML Prompt\nDESCRIPTION: Defines the YAML configuration for the CLI Operations agent using the CrewAI framework. The configuration specifies the agent's role as a Software Engineer with CLI expertise, tasks to perform, and required tools.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/cookbooks/yaml/cli_operation_agents.ipynb#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nagent_yaml = \"\"\"\nframework: crewai\ntopic: \"CLI Operations\"\nroles:\n  cli_agent:\n    role: \"Software Engineer\"\n    backstory: \"Expert in command line operations, creating and executing code.\"\n    goal: \"Always use Executor Tool. Ability to perform CLI operations, write programs, and execute using Executor Tool.\"\n    tasks:\n      cli_task_execution:\n        description: \"Identify the OS and then empty the recycle bin.\"\n        expected_output: \"Successful execution of CLI commands to identify the OS and clear the recycle bin.\"\n    tools:\n      - CLIExecutorTool\ndependencies: []\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Implementing AI-Driven Customer Service Workflow in Python\nDESCRIPTION: The Python script defines an automated workflow using the PraisonAI Agents library. It creates agents for query classification, handling, evaluation, and optimization, and orchestrates their interactions in a structured workflow to enhance customer service operations.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/examples/customer-service.mdx#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent, Task, PraisonAIAgents\nimport time\nfrom typing import Dict, List\n\ndef classify_query():\n    \"\"\"Simulates query classification\"\"\"\n    query_types = [\n        {\"type\": \"technical\", \"priority\": \"high\", \"complexity\": \"complex\"},\n        {\"type\": \"billing\", \"priority\": \"medium\", \"complexity\": \"simple\"},\n        {\"type\": \"general\", \"priority\": \"low\", \"complexity\": \"simple\"}\n    ]\n    return query_types[int(time.time()) % 3]\n\ndef handle_query(query: Dict):\n    \"\"\"Simulates query handling\"\"\"\n    responses = {\n        \"technical\": \"Technical support solution provided\",\n        \"billing\": \"Billing inquiry resolved\",\n        \"general\": \"General information provided\"\n    }\n    return responses.get(query[\"type\"], \"Query forwarded to specialist\")\n\ndef evaluate_satisfaction():\n    \"\"\"Simulates satisfaction evaluation\"\"\"\n    scores = [\"satisfied\", \"neutral\", \"unsatisfied\"]\n    return scores[int(time.time()) % 3]\n\ndef optimize_response(satisfaction: str):\n    \"\"\"Simulates response optimization\"\"\"\n    optimizations = {\n        \"satisfied\": \"maintain_approach\",\n        \"neutral\": \"minor_adjustments\",\n        \"unsatisfied\": \"major_revision\"\n    }\n    return optimizations.get(satisfaction, \"review_process\")\n\n# Create specialized agents\nclassifier = Agent(\n    name=\"Query Classifier\",\n    role=\"Query Classification\",\n    goal=\"Classify incoming customer queries\",\n    instructions=\"Analyze and categorize customer queries\",\n    tools=[classify_query]\n)\n\nhandler = Agent(\n    name=\"Query Handler\",\n    role=\"Query Resolution\",\n    goal=\"Handle customer queries appropriately\",\n    instructions=\"Provide appropriate responses to queries\",\n    tools=[handle_query]\n)\n\nevaluator = Agent(\n    name=\"Satisfaction Evaluator\",\n    role=\"Satisfaction Assessment\",\n    goal=\"Evaluate customer satisfaction\",\n    instructions=\"Assess response effectiveness\",\n    tools=[evaluate_satisfaction]\n)\n\noptimizer = Agent(\n    name=\"Response Optimizer\",\n    role=\"Service Optimization\",\n    goal=\"Optimize service based on feedback\",\n    instructions=\"Improve response strategies\",\n    tools=[optimize_response]\n)\n\n# Create workflow tasks\nclassification_task = Task(\n    name=\"classify_query\",\n    description=\"Classify customer query\",\n    expected_output=\"Query classification\",\n    agent=classifier,\n    is_start=True,\n    task_type=\"decision\",\n    condition={\n        \"high\": [\"handle_query\", \"evaluate_satisfaction\"],\n        \"medium\": [\"handle_query\", \"evaluate_satisfaction\"],\n        \"low\": [\"handle_query\"]\n    }\n)\n\nhandling_task = Task(\n    name=\"handle_query\",\n    description=\"Handle customer query\",\n    expected_output=\"Query response\",\n    agent=handler,\n    next_tasks=[\"evaluate_satisfaction\"]\n)\n\nevaluation_task = Task(\n    name=\"evaluate_satisfaction\",\n    description=\"Evaluate customer satisfaction\",\n    expected_output=\"Satisfaction level\",\n    agent=evaluator,\n    next_tasks=[\"optimize_response\"]\n)\n\noptimization_task = Task(\n    name=\"optimize_response\",\n    description=\"Optimize response strategy\",\n    expected_output=\"Optimization recommendations\",\n    agent=optimizer,\n    task_type=\"decision\",\n    condition={\n        \"major_revision\": [\"classify_query\"],\n        \"minor_adjustments\": \"\",\n        \"maintain_approach\": \"\"\n    }\n)\n\n# Create workflow\nworkflow = PraisonAIAgents(\n    agents=[classifier, handler, evaluator, optimizer],\n    tasks=[classification_task, handling_task, evaluation_task, optimization_task],\n    process=\"workflow\",\n    verbose=True\n)\n\ndef main():\n    print(\"\\nStarting Customer Service Optimization Workflow...\")\n    print(\"=\" * 50)\n    \n    # Run workflow\n    results = workflow.start()\n    \n    # Print results\n    print(\"\\nCustomer Service Results:\")\n    print(\"=\" * 50)\n    for task_id, result in results[\"task_results\"].items():\n        if result:\n            print(f\"\\nTask: {task_id}\")\n            print(f\"Result: {result.raw}\")\n            print(\"-\" * 50)\n\nif __name__ == \"__main__\":\n    main()\n```\n\n----------------------------------------\n\nTITLE: Main Execution Script with OpenAI Integration\nDESCRIPTION: Main script that initializes PraisonAI with the YAML configuration, sets up OpenAI API key, and executes the landing page generation process\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/cookbooks/yaml/landing_page_generator_agents.ipynb#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom praisonai import PraisonAI\nfrom google.colab import userdata\n\n# Create a PraisonAI instance with the agent_yaml content\npraisonai = PraisonAI(agent_yaml=agent_yaml, tools=[InternetSearchTool, WriteFileTool, FileReadTool])\n\n# Add OPENAI_API_KEY Secrets to Google Colab on the Left Hand Side 🔑 or Enter Manually Below\nos.environ[\"OPENAI_API_KEY\"] = userdata.get('OPENAI_API_KEY')\n\n# Run PraisonAI\nresult = praisonai.run()\n\n# Print the result\nprint(result) # 2/10\n```\n\n----------------------------------------\n\nTITLE: Run Data Preparation and Analysis Workflow\nDESCRIPTION: This snippet shows how to create a workflow using `PraisonAIAgents` that runs the `prep_agent` and `analyst` sequentially. The workflow includes the preparation and analysis tasks.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/pandas_tools.mdx#2025-04-19_snippet_22\n\nLANGUAGE: python\nCODE:\n```\n# Run workflow\nagents = PraisonAIAgents(\n    agents=[prep_agent, analyst],\n    tasks=[prep_task, analysis_task]\n)\n```\n\n----------------------------------------\n\nTITLE: Creating and Running a PraisonAI Instance\nDESCRIPTION: This snippet demonstrates how to create an instance of PraisonAI using the agent_yaml configuration, and execute it to obtain results. The created instance leverages the defined agent's tasks and tools. The run method is called to initiate processing, and the results are printed to the console.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/developers/wrapper-tools.mdx#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Create a PraisonAI instance with the agent_yaml content\npraisonai = PraisonAI(agent_yaml=agent_yaml)\n\n# Run PraisonAI\nresult = praisonai.run()\n\n# Print the result\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Data Preparation Agent\nDESCRIPTION: This snippet creates an agent designed for data preparation tasks. The agent has access to tools for reading, writing, filtering, summarizing, grouping, and creating pivot tables from data.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/pandas_tools.mdx#2025-04-19_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n# Data preparation agent\nprep_agent = Agent(\n    name=\"Preparer\",\n    role=\"Data Preparation\",\n    tools=[read_csv, read_excel, write_csv, write_excel, filter_data, get_summary, group_by, pivot_table]\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Market Trend Analysis Agent with Python\nDESCRIPTION: This snippet demonstrates the creation of a market trend analysis agent which specializes in identifying market patterns and making strategic recommendations based on provided growth data.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/course/agents/17-data-analysis-agents.mdx#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nmarket_analysis_agent = Agent(\n    name=\"MarketAnalyst\",\n    instructions=\"\"\"\n    You are a market trend analyst who specializes in identifying patterns and making predictions.\n    \n    When analyzing market data:\n    1. Identify long-term trends and short-term patterns\n    2. Compare data points to industry benchmarks\n    3. Identify potential causes for changes\n    4. Assess future implications\n    5. Provide strategic recommendations\n    \n    Present your analysis with clear sections for:\n    - Overall Market Assessment\n    - Key Trends Identified\n    - Growth Opportunities\n    - Risk Factors\n    - Strategic Recommendations\n    \"\"\",\n    tools=[stats_tool]\n)\n\n# Use the market analysis agent\nmarket_data = \"\"\"\nIndustry Growth Rates (2021-2024):\n2021: 3.2%\n2022: 2.8%\n2023: 4.5%\n2024: 5.1%\n\nOur Company Growth:\n2021: 2.9%\n2022: 3.1%\n2023: 4.8%\n2024: 6.3%\n\nCompetitor A Growth:\n2021: 3.5%\n2022: 3.7%\n2023: 4.2%\n2024: 4.5%\n\nCompetitor B Growth:\n2021: 3.0%\n2022: 2.5%\n2023: 5.0%\n2024: 5.8%\n\"\"\"\n\nmarket_analysis = market_analysis_agent.start(\n    f\"\"\"\n    Analyze the following market and company growth data:\n    \n    {market_data}\n    \n    Provide a comprehensive market analysis and strategic recommendations.\n    \"\"\"\n)\nprint(market_analysis)\n```\n\n----------------------------------------\n\nTITLE: Basic Agent Configuration YAML\nDESCRIPTION: YAML configuration for a single research agent defining its backstory, goals, and tasks focused on Mars and cats research.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/models/openai.mdx#2025-04-19_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nframework: crewai\ntopic: create movie script about cat in mars\nroles:\n  researcher:\n    backstory: Skilled in finding and organizing information, with a focus on research\n      efficiency.\n    goal: Gather information about Mars and cats\n    role: Researcher\n    tasks:\n      gather_research:\n        description: Research and gather information about Mars, its environment,\n          and cats, including their behavior and characteristics.\n        expected_output: Document with research findings, including interesting facts\n          and information.\n    tools:\n    - ''\n```\n\n----------------------------------------\n\nTITLE: Flowchart for Hackathon Project Evaluation\nDESCRIPTION: This Mermaid flowchart defines the workflow of a Hackathon project evaluation process, detailing steps from judging to providing recommendations. It visualizes the evaluation stages and their sequences.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/examples/hackathon-judge.mdx#2025-04-19_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n    In[In] --> Judge[Hackathon Judge]\n    Judge --> Scores[Project Scores]\n    Scores --> Analysis[Detailed Analysis]\n    Analysis --> Feedback[Feedback]\n    Feedback --> Recommendations[Recommendations]\n    Recommendations --> Out[Out]\n    \n    style In fill:#8B0000,color:#fff\n    style Judge fill:#2E8B57,color:#fff\n    style Scores fill:#2E8B57,color:#fff\n    style Analysis fill:#2E8B57,color:#fff\n    style Feedback fill:#2E8B57,color:#fff\n    style Recommendations fill:#2E8B57,color:#fff\n    style Out fill:#8B0000,color:#fff\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Tool (No Code)\nDESCRIPTION: Defines a custom internet search tool using DuckDuckGo. This tool can be integrated into agents configured via YAML files. This code requires `duckduckgo_search` package to be installed.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/quickstart.mdx#2025-04-19_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nfrom duckduckgo_search import DDGS\nfrom typing import List, Dict\n\n# 1. Tool\ndef internet_search_tool(query: str) -> List[Dict]:\n    \"\"\"\n    Perform Internet Search\n    \"\"\"\n    results = []\n    ddgs = DDGS()\n    for result in ddgs.text(keywords=query, max_results=5):\n        results.append({\n            \"title\": result.get(\"title\", \"\"),\n            \"url\": result.get(\"href\", \"\"),\n            \"snippet\": result.get(\"body\", \"\")\n        })\n    return results  \n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Customer Support Agent in Python\nDESCRIPTION: Initializes a customer support agent with predefined instructions for handling customer inquiries professionally and providing assistance for a software company's productivity app.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/course/agents/18-customer-support-agents.mdx#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent\n\n# Create a basic customer support agent\nsupport_agent = Agent(\n    name=\"SupportAgent\",\n    instructions=\"\"\"\n    You are a helpful customer support representative for a software company.\n    \n    When helping customers:\n    1. Greet them professionally and warmly\n    2. Understand their issue completely before attempting to solve it\n    3. Provide clear, step-by-step solutions when possible\n    4. Maintain a friendly, patient tone throughout\n    5. If you cannot solve the issue, explain how to escalate it\n    \n    Our software product is a productivity app with features for:\n    - Task management\n    - Calendar scheduling\n    - Note-taking\n    - Team collaboration\n    \"\"\"\n)\n\n# Use the support agent\nresponse = support_agent.start(\"I'm having trouble syncing my calendar with my phone. Can you help?\")\nprint(response)\n```\n\n----------------------------------------\n\nTITLE: Implementing You Search Tool - Python\nDESCRIPTION: This snippet defines a Python class, YouSearchTool, which extends BaseTool to provide search functionality using the You.com Search API. The class utilizes the YouSearchAPIWrapper to fetch the search results based on a user-defined query. It returns up to 5 relevant results from the API. The required dependency is 'langchain_community'.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/you.com.mdx#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom langchain_community.utilities.you import YouSearchAPIWrapper\nclass YouSearchTool(BaseTool):\n    name: str = \"You Search Tool\"\n    description: str = \"Search You.com for relevant information based on a query.\"\n\n    def _run(self, query: str):\n        api_wrapper = YouSearchAPIWrapper()\n        results = api_wrapper.results(query=query, max_results=5)\n        return results\n```\n\n----------------------------------------\n\nTITLE: YAML Configuration for Multiple Callbacks\nDESCRIPTION: This YAML configuration showcases the setup for handling multiple callback types within a PraisonAI agent. It defines distinct callbacks for error and tool_call events, each configured with its own logging level and file.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/callbacks.mdx#2025-04-19_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\n\"framework: praisonai\nprocess: sequential\ntopic: demonstrate multiple callback types\nroles:\n  multi_agent:\n    backstory: Specialized in demonstrating various callback functionalities\n    goal: Show different types of callbacks in action\n    role: Callback Specialist\n    tasks:\n      multi_callback_task:\n        description: Trigger different types of callbacks\n        expected_output: Logs showing various callback types in action\n    tools:\n    - error_tool\n    - callback_tool\ncallbacks:\n  error:\n    type: sync\n    enabled: true\n    log_file: ai_interactions.log\n    level: ERROR\n  tool_call:\n    type: sync\n    enabled: true\n    log_file: ai_interactions.log\n    level: INFO\"\n```\n\n----------------------------------------\n\nTITLE: Defining Multi-Agent System with Multiple LLMs in YAML\nDESCRIPTION: Configures a multi-agent system for PraisonAI using different language models for each agent. This YAML file defines roles, tasks, and specific LLM configurations for a research project on lung diseases.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/models.mdx#2025-04-19_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nframework: crewai\ntopic: research about the causes of lung disease\nroles:\n  research_analyst:\n    backstory: Experienced in analyzing scientific data related to respiratory health.\n    goal: Analyze data on lung diseases\n    role: Research Analyst\n    llm:  \n      model: \"groq/llama3-70b-8192\"\n    function_calling_llm: \n      model: \"google/gemini-1.5-flash-001\"\n    tasks:\n      data_analysis:\n        description: Gather and analyze data on the causes and risk factors of lung\n          diseases.\n        expected_output: Report detailing key findings on lung disease causes.\n    tools:\n    - 'InternetSearchTool'\n  medical_writer:\n    backstory: Skilled in translating complex medical information into accessible\n      content.\n    goal: Compile comprehensive content on lung disease causes\n    role: Medical Writer\n    llm:  \n      model: \"anthropic/claude-3-haiku-20240307\"\n    function_calling_llm: \n      model: \"openai/gpt-4o\"\n    tasks:\n      content_creation:\n        description: Create detailed content summarizing the research findings on\n          lung disease causes.\n        expected_output: Document outlining various causes and risk factors of lung\n          diseases.\n    tools:\n    - ''\n  editor:\n    backstory: Proficient in editing medical content for accuracy and clarity.\n    goal: Review and refine content on lung disease causes\n    role: Editor\n    llm:  \n      model: \"cohere/command-r\"\n    tasks:\n      content_review:\n        description: Edit and refine the compiled content on lung disease causes for\n          accuracy and coherence.\n        expected_output: Finalized document on lung disease causes ready for dissemination.\n    tools:\n    - ''\ndependencies: []\n```\n\n----------------------------------------\n\nTITLE: Vulnerability Detection Workflow Diagram\nDESCRIPTION: This Mermaid code defines a flowchart that illustrates the vulnerability detection workflow. The workflow consists of several stages, including Pattern Scanning, Vector Analyzer, Exploit Simulator, Signature Generator, and Finding Validator. This diagram visually represents the flow of data and processes within the vulnerability detection system.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/examples/vulnerability-detection.mdx#2025-04-19_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n    In[In] --> Scanner[Pattern Scanner]\n    Scanner --> Vector[Vector Analyzer]\n    Vector --> Simulator[Exploit Simulator]\n    Simulator --> Generator[Signature Generator]\n    Generator --> Validator[Finding Validator]\n    Validator --> Out[Out]\n    \n    style In fill:#8B0000,color:#fff\n    style Scanner fill:#2E8B57,color:#fff\n    style Vector fill:#2E8B57,color:#fff\n    style Simulator fill:#2E8B57,color:#fff\n    style Generator fill:#2E8B57,color:#fff\n    style Validator fill:#2E8B57,color:#fff\n    style Out fill:#8B0000,color:#fff\n```\n\n----------------------------------------\n\nTITLE: Excel Reading Function Implementation\nDESCRIPTION: Detailed implementation of Excel file reading function with various configuration options\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/excel_tools.mdx#2025-04-19_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# Basic usage - read first sheet\ndata = read_excel(\"data.xlsx\")\n\n# Read specific sheets\ndata = read_excel(\n    \"data.xlsx\",\n    sheet_name=['Sheet1', 'Sheet2'],\n    header=0,\n    usecols=['A', 'B', 'C'],\n    skiprows=[0, 1],\n    na_values=['NA', 'missing'],\n    dtype={'age': 'int32', 'salary': 'float64'}\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Data Analysis Agent\nDESCRIPTION: This snippet defines a data analysis agent using the `Agent` class. It specifies the agent's name, role, goal, backstory, and the tools it can use. The `self_reflect` parameter is set to `False` to prevent the agent from reflecting on its own performance.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/pandas_tools.mdx#2025-04-19_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n# Create data analysis agent\ndata_agent = Agent(\n    name=\"DataExpert\",\n    role=\"Data Analyst\",\n    goal=\"Process and analyze data efficiently.\",\n    backstory=\"Expert in data analysis and statistical methods.\",\n    tools=[read_csv, filter_data, get_summary, group_by],\n    self_reflect=False\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Internet Search Tool\nDESCRIPTION: Defines a custom tool for performing internet searches using the DuckDuckGo search engine. It takes a query string as input and returns a list of search results with titles, URLs, and snippets.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/quickstart.mdx#2025-04-19_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nfrom duckduckgo_search import DDGS\nfrom typing import List, Dict\n\n# 1. Tool\ndef internet_search_tool(query: str) -> List[Dict]:\n    \"\"\"\n    Perform Internet Search\n    \"\"\"\n    results = []\n    ddgs = DDGS()\n    for result in ddgs.text(keywords=query, max_results=5):\n        results.append({\n            \"title\": result.get(\"title\", \"\"),\n            \"url\": result.get(\"href\", \"\"),\n            \"snippet\": result.get(\"body\", \"\")\n        })\n    return results\n```\n\n----------------------------------------\n\nTITLE: Creating File Management Agent\nDESCRIPTION: Configuration for creating a specialized file management agent with defined role and tools.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/file_tools.mdx#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfile_agent = Agent(\n    name=\"FileManager\",\n    role=\"File System Specialist\",\n    goal=\"Manage files and directories efficiently.\",\n    backstory=\"Expert in file system operations and organization.\",\n    tools=[read_file, write_file, list_files, get_file_info, copy_file, move_file, delete_file],\n    self_reflect=False\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Collaborating AI Agents in Python\nDESCRIPTION: Python code example showing how to create multiple AI agents that collaborate, including a research agent and a summarizing agent.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/README.md#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent, PraisonAIAgents\n\nresearch_agent = Agent(instructions=\"Research about AI\")\nsummarise_agent = Agent(instructions=\"Summarise research agent's findings\")\nagents = PraisonAIAgents(agents=[research_agent, summarise_agent])\nagents.start()\n```\n\n----------------------------------------\n\nTITLE: Configuring Agent Roles and Tasks in YAML\nDESCRIPTION: YAML configuration defining different agent roles including email filter, action, response writer, and followup agents. Specifies their backstories, goals, tasks, and available tools.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/cookbooks/yaml/auto_email_responder_agents.ipynb#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nagent_yaml = \"\"\"\nframework: \"crewai\"\ntopic: \"Automated Email Management and Response\"\nroles:\n  email_filter_agent:\n    role: \"Email Filter Agent\"\n    backstory: |\n      An expert in filtering and identifying important emails from various inbox threads.\n      Capable of distinguishing relevant emails and prioritizing them based on content and context.\n    goal: \"Analyze and filter emails based on urgency and relevance, marking emails that require action.\"\n    tasks:\n      filter_emails:\n        description: \"Filter incoming emails to identify those that require immediate action or attention.\"\n        expected_output: \"A list of emails categorized by urgency and action required.\"\n    tools:\n      - \"SerperDevTool\"\n  email_action_agent:\n    role: \"Email Action Agent\"\n    backstory: |\n      Specialist in gathering and compiling important information from email threads, ensuring all critical details\n      are available for decision-making and response generation.\n    goal: \"Gather actionable information from email threads to determine the necessary follow-up steps.\"\n    tasks:\n      action_required_emails:\n        description: \"Identify and extract actionable content from emails that require follow-up or attention.\"\n        expected_output: \"A structured summary of action-required emails, with clear next steps.\"\n    tools:\n      - \"GmailGetThread\"\n      - \"TavilySearchResults\"\n  email_response_writer:\n    role: \"Email Response Writer\"\n    backstory: |\n      Skilled in drafting professional and courteous responses to emails based on gathered information and context.\n      Ensures that responses align with the organization's tone and objectives.\n    goal: \"Compose personalized and relevant email responses based on the thread context and required actions.\"\n    tasks:\n      draft_responses:\n        description: |\n          Generate draft responses for emails that require follow-up. Drafts should be clear, professional,\n          and aligned with the intended purpose of each email thread.\n        expected_output: \"A set of response drafts ready for final review and dispatch.\"\n    tools:\n      - \"TavilySearchResults\"\n      - \"GmailGetThread\"\n      - \"CreateDraftTool\"\n  email_followup_agent:\n    role: \"HR Coordinator\"\n    backstory: |\n      An HR professional skilled in crafting follow-up emails for job candidates. Known for maintaining a respectful\n      and professional tone, ensuring positive candidate experiences throughout the recruitment process.\n    goal: \"Compose personalized follow-up emails to candidates, requesting their availability or sending polite rejections.\"\n    tasks:\n      send_followup_email:\n        description: |\n          Compose follow-up emails for candidates applying for a specific job. For proceeding candidates, request Zoom call availability.\n          For non-proceeding candidates, send a professional rejection.\n        expected_output: |\n          A personalized email, either requesting availability for a Zoom call or delivering a polite rejection message.\n    tools: []\ndependencies: []\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Running the Meeting Preparation Automation with PraisonAI\nDESCRIPTION: Initializes and runs the PraisonAI system with the defined YAML configuration and tools. Sets up the OpenAI API key from Google Colab secrets and configures the AI model to use GPT-4o-mini for processing meeting transcripts and creating actionable items.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/cookbooks/yaml/meeting_prep_using_slack_and_trello_agents.ipynb#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom praisonai import PraisonAI\nfrom google.colab import userdata\n\n# Create a PraisonAI instance with the agent_yaml content\npraisonai = PraisonAI(agent_yaml=agent_yaml, tools=[InternetSearchTool])\n\n# Add OPENAI_API_KEY Secrets to Google Colab on the Left Hand Side 🔑 or Enter Manually Below\nos.environ[\"OPENAI_API_KEY\"] = userdata.get('OPENAI_API_KEY') or \"ENTER OPENAI_API_KEY HERE\"\nos.environ[\"OPENAI_MODEL_NAME\"] = \"gpt-4o-mini\"\n\n# Run PraisonAI\nresult = praisonai.run()\n\n# Print the result\nprint(result) # 5/10\n```\n\n----------------------------------------\n\nTITLE: Basic Agent Instructions\nDESCRIPTION: Example of providing simple instructions to an AI agent for researching climate change.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/mini.mdx#2025-04-19_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n# Simple instructions\nresearch_agent = Agent(\n    instructions=\"Research about climate change\"\n)\n```\n\n----------------------------------------\n\nTITLE: Executing PraisonAI Instance for Language Translation in Python\nDESCRIPTION: This main script creates a PraisonAI instance using the YAML configuration, sets up the OpenAI API key, and runs the AI article writing and translation tasks. It requires setting up the OPENAI_API_KEY in Google Colab secrets or manually.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/cookbooks/yaml/language_translator_agents.ipynb#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom praisonai import PraisonAI\nfrom google.colab import userdata\n\n# Create a PraisonAI instance with the agent_yaml content\npraisonai = PraisonAI(agent_yaml=agent_yaml, tools=[TranslatorTool])\n\n# Add OPENAI_API_KEY Secrets to Google Colab on the Left Hand Side 🔑 or Enter Manually Below\nos.environ[\"OPENAI_API_KEY\"] = userdata.get('OPENAI_API_KEY') or \"ENTER OPENAI_API_KEY HERE\"\nos.environ[\"OPENAI_MODEL_NAME\"] = \"gpt-4o-mini\"\n\n# Run PraisonAI\nresult = praisonai.run()\n\n# Print the result\nprint(result) # 1/10\n```\n\n----------------------------------------\n\nTITLE: Defining Stock Tools using Class-Based Approach - Python\nDESCRIPTION: This snippet defines a class that encapsulates multiple methods for retrieving stock prices and information. It is suitable for tools that require memory and manage resources efficiently.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/src/praisonai-agents/praisonaiagents/tools/README.md#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass StockTools:\n    def get_stock_price(self, symbol):\n        # Get current stock price\n        return price\n        \n    def get_stock_info(self, symbol):\n        # Get detailed stock information\n        return info\n```\n\n----------------------------------------\n\nTITLE: Execute Async Workflow\nDESCRIPTION: This Python code snippet defines and executes an asynchronous workflow using PraisonAI Agents.  It initializes the PraisonAIAgents class with specified agents and tasks, sets the process type to \"workflow,\" and enables verbose output. The `astart()` method is called to initiate the workflow asynchronously, and the results are stored in the `results` variable.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/parallelisation.mdx#2025-04-19_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# Async workflow execution\nasync def run_workflow():\n    workflow = PraisonAIAgents(\n        agents=[agent1, agent2, aggregator],\n        tasks=[task1, task2, aggregator_task],\n        process=\"workflow\",\n        verbose=True\n    )\n    results = await workflow.astart()\n```\n\n----------------------------------------\n\nTITLE: Basic Research Agent Usage Example\nDESCRIPTION: Simplified example showing basic usage of the research agent with minimal configuration.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/agents/research.mdx#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent, Tools\nfrom praisonaiagents.tools import duckduckgo\n\nagent = Agent(instructions=\"You are a Research Agent\", tools=[duckduckgo])\nagent.start(\"Research about AI 2024\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Internet Search Tool Class\nDESCRIPTION: Defines a custom InternetSearchTool class that extends BaseTool to enable internet searches using the DuckDuckGo search API.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/cookbooks/yaml/job_posting_agents.ipynb#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom duckduckgo_search import DDGS\nfrom langchain.tools import tool\nfrom praisonai_tools import BaseTool, FileReadTool, SerperDevTool\n\nclass InternetSearchTool(BaseTool):\n    name: str = \"InternetSearchTool\"\n    description: str = \"Search Internet for relevant information based on a query or latest news\"\n\n    def _run(self, query: str):\n        ddgs = DDGS()\n        results = ddgs.text(keywords=query, region='wt-wt', safesearch='moderate', max_results=5)\n        return results\n```\n\n----------------------------------------\n\nTITLE: Creating Math Agent Application in Python\nDESCRIPTION: Creates a Python application to set up math agents using PraisonAI. The script initializes an Agent and Task with the required tools for mathematical calculations and starts execution.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/mathagent.mdx#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent, Task, PraisonAIAgents\nfrom praisonaiagents.tools import (\n    evaluate, solve_equation, convert_units,\n    calculate_statistics, calculate_financial\n)\n\n# Create math agent\nmath_agent = Agent(\n    role=\"Math Expert\",\n    goal=\"Perform complex mathematical calculations\",\n    backstory=\"Expert in mathematical computations and analysis\",\n    tools=[\n        evaluate, solve_equation, convert_units,\n        calculate_statistics, calculate_financial\n    ],\n    verbose=True\n)\n\n# Create a task\ntask = Task(\n    description=\"Calculate compound interest and statistical analysis\",\n    expected_output=\"Detailed mathematical analysis\",\n    agent=math_agent\n)\n\n# Create and start the agents\nagents = PraisonAIAgents(\n    agents=[math_agent],\n    tasks=[task],\n    process=\"sequential\",\n    verbose=2\n)\n\n# Start execution\nagents.start()\n```\n\n----------------------------------------\n\nTITLE: Defining Agent Roles and Tasks in YAML\nDESCRIPTION: YAML configuration defining three AI agents (movie concept creator, screenwriter, and editor) with their respective roles, goals, and tasks for the script generation process.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/cookbooks/yaml/business_product_launch_agents.ipynb#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nagent_yaml = \"\"\"\nframework: crewai\ntopic: Artificial Intelligence\nroles:\n  movie_concept_creator:\n    backstory: 'Creative thinker with a deep understanding of cinematic storytelling,\n      capable of using AI-generated storylines to create unique and compelling movie\n      ideas.'\n    goal: Generate engaging movie concepts using AI storylines\n    role: Movie Concept Creator\n    tasks:\n      movie_concept_development:\n        description: 'Develop movie concepts from AI-generated storylines, ensuring\n          they are engaging and have strong narrative arcs.'\n        expected_output: 'Well-structured movie concept document with character\n          bios, settings, and plot outlines.'\n  screenwriter:\n    backstory: 'Expert in writing engaging dialogue and script structure, able to\n      turn movie concepts into production-ready scripts.'\n    goal: Write compelling scripts based on movie concepts\n    role: Screenwriter\n    tasks:\n      scriptwriting_task:\n        description: 'Turn movie concepts into polished scripts with well-developed\n          characters, strong dialogue, and effective scene transitions.'\n        expected_output: 'Production-ready script with a beginning, middle, and\n          end, along with character development and engaging dialogues.'\n  editor:\n    backstory: 'Adept at identifying inconsistencies, improving language usage,\n      and maintaining the overall flow of the script.'\n    goal: Refine the scripts and ensure continuity of the movie storyline\n    role: Editor\n    tasks:\n      editing_task:\n        description: 'Review, edit, and refine the scripts to ensure they are cohesive\n          and follow a well-structured narrative.'\n        expected_output: 'A polished final draft of the script with no inconsistencies,\n          strong character development, and effective dialogue.'\ndependencies: []\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Defining a Single Agent with YAML\nDESCRIPTION: Define a single AI agent using a YAML configuration file. This agent is designed to summarize photosynthesis. The YAML file should be named `agents.yaml`.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/mini.mdx#2025-04-19_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n# Create a new file `agents.yaml` with the following content:\nroles:\n  summarise_agent\n    instructions: Summarise Photosynthesis\n```\n\n----------------------------------------\n\nTITLE: Initializing Predictive Maintenance Python Script\nDESCRIPTION: Full Python script for creating a predictive maintenance system using AI agents with sensor monitoring, performance analysis, anomaly detection, and maintenance scheduling\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/examples/predictive-maintenance.mdx#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent, Task, PraisonAIAgents\nimport time\nfrom typing import Dict, List\nimport asyncio\n\ndef collect_sensor_data():\n    \"\"\"Simulates sensor data collection\"\"\"\n    sensor_readings = {\n        \"temperature\": 75 + (int(time.time()) % 20),\n        \"vibration\": 0.5 + (int(time.time()) % 10) / 10,\n        \"pressure\": 100 + (int(time.time()) % 50),\n        \"noise_level\": 60 + (int(time.time()) % 30)\n    }\n    return sensor_readings\n\n# Additional function implementations and agent creation omitted for brevity\n\nasync def main():\n    print(\"\\nStarting Predictive Maintenance Workflow...\")\n    print(\"=\" * 50)\n    \n    # Run workflow\n    results = await workflow.astart()\n    \n    # Print results\n    print(\"\\nMaintenance Planning Results:\")\n    print(\"=\" * 50)\n    for task_id, result in results[\"task_results\"].items():\n        if result:\n            print(f\"\\nTask: {task_id}\")\n            print(f\"Result: {result.raw}\")\n            print(\"-\" * 50)\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Defining a Scraping Task in Python\nDESCRIPTION: This Python code defines a specific scraping task using the `Task` class from `praisonaiagents`. It configures the task with a description, expected output, the agent responsible for performing the task (`spider_agent`), and a name for the task.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/spider_tools.mdx#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n```python\nscraping_task = Task(\n        description=\"Scrape product information from an e-commerce website.\",\n        expected_output=\"Structured product data with prices and descriptions.\",\n        agent=spider_agent,\n        name=\"product_scraping\"\n    )\n```\n```\n\n----------------------------------------\n\nTITLE: Tool Usage for Research Agent\nDESCRIPTION: Demonstrates how a research agent is configured to use internet search to research AI.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/mini.mdx#2025-04-19_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n# Research agent needs search\nresearch_agent = Agent(\n    instructions=\"Research AI\",\n    tools=[Tools.internet_search]\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing AI Agent with EXA Search Tool in Python\nDESCRIPTION: This Python snippet defines an AI agent with an embedded EXA Search Tool, demonstrating how to build and use tools that interface with an API. It includes methods for executing searches and parsing results.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/tools_class.mdx#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent, Task, PraisonAIAgents\nimport os\nimport requests\nfrom typing import Any, Dict, List, Optional\nfrom pydantic import BaseModel, Field\n\nclass EXASearchTool(BaseModel):\n    \"\"\"Wrapper for EXA Search API.\"\"\"\n    search_url: str = \"https://api.exa.ai/search\"\n    headers: Dict = {\n        \"accept\": \"application/json\",\n        \"content-type\": \"application/json\",\n    }\n    max_results: Optional[int] = None\n\n    def run(self, query: str) -> str:\n        \"\"\"Run query through EXA and return concatenated results.\"\"\"\n        payload = {\n            \"query\": query,\n            \"type\": \"magic\",\n        }\n\n        headers = self.headers.copy()\n        headers[\"x-api-key\"] = os.environ['EXA_API_KEY']\n\n        response = requests.post(self.search_url, json=payload, headers=headers)\n        results = response.json()\n        \n        if 'results' in results:\n            return self._parse_results(results['results'])\n        return \"\"\n\n    def results(self, query: str, max_results: Optional[int] = None) -> List[Dict[str, Any]]:\n        \"\"\"Run query through EXA and return metadata.\"\"\"\n        payload = {\n            \"query\": query,\n            \"type\": \"magic\",\n        }\n\n        headers = self.headers.copy()\n        headers[\"x-api-key\"] = os.environ['EXA_API_KEY']\n\n        response = requests.post(self.search_url, json=payload, headers=headers)\n        results = response.json()\n        \n        if 'results' in results:\n            return results['results'][:max_results] if max_results else results['results']\n        return []\n\n    def _parse_results(self, results: List[Dict[str, Any]]) -> str:\n        \"\"\"Parse results into a readable string format.\"\"\"\n        strings = []\n        for result in results:\n            try:\n                strings.append('\\n'.join([\n                    f\"Title: {result['title']}\",\n                    f\"Score: {result['score']}\",\n                    f\"Url: {result['url']}\",\n                    f\"ID: {result['id']}\",\n                    \"---\"\n                ]))\n            except KeyError:\n                continue\n\n        content = '\\n'.join(strings)\n        return f\"\\nSearch results: {content}\\n\"\n\n# Create an agent with the tool\nagent = Agent(\n    name=\"SearchAgent\",\n    role=\"Research Assistant\",\n    goal=\"Search for information about 'AI Agents Framework'\",\n    backstory=\"I am an AI assistant that can search GitHub.\",\n    tools=[EXASearchTool],\n    self_reflect=False\n)\n\n# Create task to demonstrate the tool\ntask = Task(\n    name=\"search_task\",\n    description=\"Search for information about 'AI Agents Framework'\",\n    expected_output=\"Information about AI Agents Framework\",\n    agent=agent\n)\n\n# Create and start the workflow\nagents = PraisonAIAgents(\n    agents=[agent],\n    tasks=[task],\n    verbose=True\n)\n\nagents.start()\n```\n\n----------------------------------------\n\nTITLE: Visualizing Agent Workflow Using Mermaid\nDESCRIPTION: This Mermaid diagram illustrates the workflow of the AutoAgents framework, depicting the creation of AI agents, tool assignment, and execution flow. It shows the relationship between the various components within the system.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/autoagents.mdx#2025-04-19_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n    In[In] --> Plan[Plan Tasks]\n    \n    subgraph Creation[Automatic Agent Creation]\n        Plan --> Agent1[AI Agent 1]\n        Plan --> Agent2[AI Agent 2]\n        Plan --> Agent3[AI Agent 3]\n    end\n    \n    subgraph Tools[Automatic Tool Assignment]\n        Agent1 --> Tool1[Tools 1]\n        Agent2 --> Tool2[Tools 2]\n        Agent3 --> Tool3[Tools 3]\n    end\n    \n    Tools --> Execution\n    \n    subgraph Execution[Execution]\n        Exec1[AI Agent 1] --> Exec2[AI Agent 2]\n        Exec2 --> Exec3[AI Agent 3]\n    end\n    \n    Exec3 --> Out[Out]\n    \n    style In fill:#8B0000,color:#fff\n    style Plan fill:#2E8B57,color:#fff\n    style Agent1 fill:#2E8B57,color:#fff\n    style Agent2 fill:#2E8B57,color:#fff\n    style Agent3 fill:#2E8B57,color:#fff\n    style Tool1 fill:#2E8B57,color:#fff\n    style Tool2 fill:#2E8B57,color:#fff\n    style Tool3 fill:#2E8B57,color:#fff\n    style Exec1 fill:#2E8B57,color:#fff\n    style Exec2 fill:#2E8B57,color:#fff\n    style Exec3 fill:#2E8B57,color:#fff\n    style Out fill:#8B0000,color:#fff\n```\n\n----------------------------------------\n\nTITLE: Creating a Workflow for Finance Agent - Mermaid\nDESCRIPTION: This Mermaid diagram illustrates the workflow of how the Finance Agent processes stock market data to provide investment advice.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/agents/finance.mdx#2025-04-19_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n    In[Request] --> Price[Stock Price]\n    Price --> Info[Stock Info]\n    Info --> History[Historical Data]\n    History --> Out[Investment Advice]\n    \n    style In fill:#8B0000,color:#fff\n    style Price fill:#2E8B57,color:#fff\n    style Info fill:#2E8B57,color:#fff\n    style History fill:#2E8B57,color:#fff\n    style Out fill:#8B0000,color:#fff\n```\n\n----------------------------------------\n\nTITLE: Task Definition Example\nDESCRIPTION: This code snippet shows an example of defining a task with a specific description and expected output.  This task defines what the agent needs to do and output.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/pandas_tools.mdx#2025-04-19_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nTask(\n        description=\"Analyze sales trends and forecast future growth\",\n        expected_output=\"Growth analysis with forecasts\"\n    )\n```\n\n----------------------------------------\n\nTITLE: Customer Support Specialized Conversational Agent\nDESCRIPTION: Creates a specialized agent for customer support with specific instructions focusing on professional assistance, empathy, and problem resolution.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/course/agents/14-conversational-agents.mdx#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nsupport_agent = Agent(\n    name=\"Support Agent\",\n    instructions=\"\"\"\n    You are a customer support specialist for a tech company.\n    \n    When helping customers:\n    1. Greet them professionally\n    2. Show empathy for their issues\n    3. Ask for necessary information to troubleshoot\n    4. Provide clear step-by-step solutions\n    5. Confirm if the issue is resolved\n    6. End with an offer for additional help\n    \n    Remember product details and customer information throughout the conversation.\n    \"\"\"\n)\n\n# Example conversation\nprint(support_agent.start(\"Hi, I'm having trouble logging into my account.\"))\nprint(support_agent.continue(\"My username is user123.\"))\nprint(support_agent.continue(\"I've tried resetting my password but I'm not receiving the email.\"))\n```\n\n----------------------------------------\n\nTITLE: Implementing Advanced Multi-Agent Search\nDESCRIPTION: Create and configure multiple agents for complex search and analysis tasks\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/duckduckgo_tools.mdx#2025-04-19_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# Create search agent\nsearch_agent = Agent(\n    name=\"Researcher\",\n    role=\"Search Specialist\",\n    goal=\"Gather comprehensive information about topics.\",\n    tools=[duckduckgo],\n    self_reflect=False\n)\n\n# Create analysis agent\nanalysis_agent = Agent(\n    name=\"Analyzer\",\n    role=\"Data Analyst\",\n    goal=\"Analyze and synthesize search results.\",\n    backstory=\"Expert in data analysis and trend identification.\",\n    self_reflect=False\n)\n\n# Define tasks\nsearch_task = Task(\n    description=\"Search for latest AI developments in healthcare.\",\n    agent=search_agent,\n    name=\"healthcare_search\"\n)\n\nanalysis_task = Task(\n    description=\"Analyze the search results and identify key trends.\",\n    agent=analysis_agent,\n    name=\"trend_analysis\"\n)\n\n# Run agents\nagents = PraisonAIAgents(\n    agents=[search_agent, analysis_agent],\n    tasks=[search_task, analysis_task],\n    process=\"sequential\"\n)\nagents.start()\n```\n\n----------------------------------------\n\nTITLE: Create Supply Chain Risk Management Workflow\nDESCRIPTION: This Python code defines a workflow for supply chain risk management using the `praisonaiagents` library. It includes functions to simulate monitoring global events, analyzing their impact, and generating mitigation strategies. It also creates specialized agents, defines tasks, and orchestrates the workflow using `PraisonAIAgents`.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/examples/supply-chain.mdx#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n```python\nfrom praisonaiagents import Agent, Task, PraisonAIAgents\nimport time\nfrom typing import Dict, List\n\n        def monitor_global_events():\n            \"\"\"Simulates monitoring of global events\"\"\"\n            events = [\n                {\"type\": \"natural_disaster\", \"severity\": \"high\", \"region\": \"Asia\"},\n                {\"type\": \"political_unrest\", \"severity\": \"medium\", \"region\": \"Europe\"},\n                {\"type\": \"economic_crisis\", \"severity\": \"critical\", \"region\": \"Americas\"}\n            ]\n            return events[int(time.time()) % 3]\n\n        def analyze_supply_impact(event: Dict):\n            \"\"\"Simulates impact analysis on supply chain\"\"\"\n            impact_matrix = {\n                \"natural_disaster\": {\"delay\": \"severe\", \"cost\": \"high\", \"risk_level\": 9},\n                \"political_unrest\": {\"delay\": \"moderate\", \"cost\": \"medium\", \"risk_level\": 6},\n                \"economic_crisis\": {\"delay\": \"significant\", \"cost\": \"extreme\", \"risk_level\": 8}\n            }\n            return impact_matrix.get(event[\"type\"])\n\n        def generate_mitigation_strategies(impact: Dict):\n            \"\"\"Simulates generation of mitigation strategies\"\"\"\n            strategies = {\n                \"severe\": [\"activate_backup_suppliers\", \"emergency_logistics_routing\"],\n                \"moderate\": [\"increase_buffer_stock\", \"alternative_transport\"],\n                \"significant\": [\"diversify_suppliers\", \"hedge_currency_risks\"]\n            }\n            return strategies.get(impact[\"delay\"], [\"review_supply_chain\"])\n\n        # Create specialized agents\n        monitor_agent = Agent(\n            name=\"Global Monitor\",\n            role=\"Event Monitoring\",\n            goal=\"Monitor and identify global events affecting supply chain\",\n            instructions=\"Track and report significant global events\",\n            tools=[monitor_global_events]\n        )\n\n        impact_analyzer = Agent(\n            name=\"Impact Analyzer\",\n            role=\"Impact Assessment\",\n            goal=\"Analyze event impact on supply chain\",\n            instructions=\"Assess potential disruptions and risks\",\n            tools=[analyze_supply_impact]\n        )\n\n        strategy_generator = Agent(\n            name=\"Strategy Generator\",\n            role=\"Strategy Development\",\n            goal=\"Generate mitigation strategies\",\n            instructions=\"Develop strategies to address identified risks\",\n            tools=[generate_mitigation_strategies]\n        )\n\n        # Create workflow tasks\n        monitoring_task = Task(\n            name=\"monitor_events\",\n            description=\"Monitor global events affecting supply chain\",\n            expected_output=\"Identified global events\",\n            agent=monitor_agent,\n            is_start=True,\n            task_type=\"decision\",\n            condition={\n                \"high\": [\"analyze_impact\"],\n                \"medium\": [\"analyze_impact\"],\n                \"critical\": [\"analyze_impact\"]\n            }\n        )\n\n        impact_task = Task(\n            name=\"analyze_impact\",\n            description=\"Analyze impact on supply chain\",\n            expected_output=\"Impact assessment\",\n            agent=impact_analyzer,\n            next_tasks=[\"generate_strategies\"]\n        )\n\n        strategy_task = Task(\n            name=\"generate_strategies\",\n            description=\"Generate mitigation strategies\",\n            expected_output=\"List of mitigation strategies\",\n            agent=strategy_generator,\n            context=[monitoring_task, impact_task]\n        )\n\n        # Create workflow\n        workflow = PraisonAIAgents(\n            agents=[monitor_agent, impact_analyzer, strategy_generator],\n            tasks=[monitoring_task, impact_task, strategy_task],\n            process=\"workflow\",\n            verbose=True\n        )\n\n        def main():\n            print(\"\\nStarting Supply Chain Risk Management Workflow...\")\n            print(\"=\" * 50)\n            \n            # Run workflow\n            results = workflow.start()\n            \n            # Print results\n            print(\"\\nRisk Management Results:\")\n            print(\"=\" * 50)\n            for task_id, result in results[\"task_results\"].items():\n                if result:\n                    print(f\"\\nTask: {task_id}\")\n                    print(f\"Result: {result.raw}\")\n                    print(\"-\" * 50)\n\n        if __name__ == \"__main__\":\n            main()\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Project Evaluation Function\nDESCRIPTION: This Python code defines the `evaluate_project` function, which takes a video path as input and returns a `ProjectEvaluation` object. It retrieves the HackathonJudge agent, defines a task for evaluating the video, and initializes and runs the agent. It also includes error handling and response parsing to ensure that the evaluation data is correctly extracted and formatted.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/ui/streamlit/hackathon-judge-streamlit.mdx#2025-04-19_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n\"def evaluate_project(video_path: str) -> ProjectEvaluation:\n    \\\"\\\"\\\" \n    Evaluate a hackathon project based on its video demonstration\n    \\\"\\\"\\\" \n    hackathon_judge = get_hackathon_judge()\n    \n    evaluation_task = Task(\n        name=\\\"project_evaluation\\\",\n        description=\\\"\\\"\\\"Analyze this hackathon project video demonstration and provide a comprehensive evaluation:\n        \n        1. Score the following aspects (0-100):\n           - Innovation and Creativity\n           - Technical Complexity\n           - Presentation Quality\n           - User Experience\n           - Project Completeness\n           \n        2. Identify:\n           - Key strengths and standout features\n           - Areas that could be improved\n           - Notable technical implementations\n           - Market potential and scalability\n           \n        3. Provide:\n           - Specific recommendations for improvement\n           - Technical suggestions\n           - Potential future enhancements\\\"\\\"\\\",\n        expected_output=\\\"Detailed project evaluation with scores and feedback\\\",\n        agent=hackathon_judge,\n        output_pydantic=ProjectEvaluation,\n        images=[video_path]  # Video input for multimodal analysis\n    )\n\n    # Initialize and run evaluation\n    agents = PraisonAIAgents(\n        agents=[hackathon_judge],\n        tasks=[evaluation_task],\n        process=\\\"sequential\\\",\n        verbose=True\n    )\n    \n    response = agents.start()\n    \n    try:\n        # If response contains task_results, extract the Pydantic model directly\n        if isinstance(response, dict) and 'task_results' in response:\n            task_output = response['task_results'][0]\n            if hasattr(task_output, 'pydantic'):\n                return task_output.pydantic\n            elif hasattr(task_output, 'raw'):\n                # Extract JSON from raw string if it's wrapped in ```json\n                raw_text = task_output.raw\n                if raw_text.startswith('```json'):\n                    raw_text = raw_text.split('\\\\n', 1)[1].rsplit('\\\\n', 1)[0]\n                evaluation_data = json.loads(raw_text)\n            else:\n                evaluation_data = json.loads(task_output) if isinstance(task_output, str) else task_output\n        elif isinstance(response, str):\n            evaluation_data = json.loads(response)\n        elif isinstance(response, dict) and 'task_status' in response:\n            content = response['task_status']\n            if isinstance(content, dict):\n                evaluation_data = content\n            else:\n                evaluation_data = json.loads(content) if isinstance(content, str) else content\n        else:\n            evaluation_data = response\n            \n        # Create and return ProjectEvaluation instance\n        return ProjectEvaluation(\n            innovation_score=int(evaluation_data.get('innovation_score', 0)),\n            technical_complexity=int(evaluation_data.get('technical_complexity', 0)),\n            presentation_quality=int(evaluation_data.get('presentation_quality', 0)),\n            user_experience=int(evaluation_data.get('user_experience', 0)),\n            completeness=int(evaluation_data.get('completeness', 0)),\n            overall_score=int(evaluation_data.get('overall_score', 0)),\n            key_strengths=evaluation_data.get('key_strengths', []),\n            areas_for_improvement=evaluation_data.get('areas_for_improvement', []),\n            notable_features=evaluation_data.get('notable_features', []),\n            technical_highlights=evaluation_data.get('technical_highlights', []),\n            recommendations=evaluation_data.get('recommendations', []),\n            market_potential=str(evaluation_data.get('market_potential', '')),\n            scalability_assessment=str(evaluation_data.get('scalability_assessment', ''))\n        )\n    except Exception as e:\n        print(f\\\"Debug - Raw response: {response}\\\")\n        print(f\\\"Error processing response: {e}\\\")\n        raise\"\n```\n\n----------------------------------------\n\nTITLE: Visualizing DeFi Market Making Workflow\nDESCRIPTION: A mermaid diagram illustrating the workflow of a DeFi market making process, showing interactions between market analyzers, arbitrage detectors, liquidity optimizers, risk assessors, and trade executors. Nodes are styled for visual distinction.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/examples/defi-market-maker.mdx#2025-04-19_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\\n    In[In] --> Market[Market Analyzer]\\n    Market --> Arbitrage[Arbitrage Detector]\\n    Market --> Liquidity[Liquidity Optimizer]\\n    Arbitrage --> Risk[Risk Assessor]\\n    Liquidity --> Risk\\n    Risk --> Executor[Trade Executor]\\n    Executor --> Out[Out]\\n    \\n    style In fill:#8B0000,color:#fff\\n    style Market fill:#2E8B57,color:#fff\\n    style Arbitrage fill:#2E8B57,color:#fff\\n    style Liquidity fill:#2E8B57,color:#fff\\n    style Risk fill:#2E8B57,color:#fff\\n    style Executor fill:#2E8B57,color:#fff\\n    style Out fill:#8B0000,color:#fff\n```\n\n----------------------------------------\n\nTITLE: Terminating Processes with Kill Function\nDESCRIPTION: Illustrates the use of kill_process from praisonaiagents.tools to terminate system processes either gracefully or forcefully and handle access or error issues appropriately.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/shell_tools.mdx#2025-04-19_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n# Graceful termination\nresult = kill_process(1234)\n\n# Force kill\nresult = kill_process(\n    pid=1234,\n    force=True  # Use SIGKILL\n)\n\n# Returns: Dict[str, Union[bool, str]]\n# Example output:\n# {\n#     'success': True,\n#     'message': 'Process 1234 killed successfully'\n# }\n# or\n# {\n#     'success': False,\n#     'message': 'Access denied to kill process 1234'\n# }\n```\n\n----------------------------------------\n\nTITLE: Creating YAML Configuration for Agents\nDESCRIPTION: Defines the configuration for agents in a YAML file, including their roles, goals, and tasks. This setup is used for running agents in a predefined manner.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/multimodal.mdx#2025-04-19_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nframework: praisonai\nprocess: sequential\ntopic: analyze landmark image\nroles:\n  vision_analyst:\n    name: VisionAnalyst\n    role: Computer Vision Specialist\n    goal: Analyze images and videos to extract meaningful information\n    backstory: |\n      You are an expert in computer vision and image analysis.\n      You excel at describing images, detecting objects, and understanding visual content.\n    llm: gpt-4o-mini\n    self_reflect: false\n    tasks:\n      analyze_landmark:\n        description: Describe this famous landmark and its architectural features.\n        expected_output: Detailed description of the landmark's architecture and significance\n        images:\n          - https://upload.wikimedia.org/wikipedia/commons/b/bf/Krakow_-_Kosciol_Mariacki.jpg\n```\n\n----------------------------------------\n\nTITLE: Defining Internet Search Tool Class\nDESCRIPTION: Implements an InternetSearchTool class extending BaseTool for performing web searches using DuckDuckGo's search API. Includes environment variable setup for API keys.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/cookbooks/yaml/instagram_post_agents.ipynb#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom duckduckgo_search import DDGS\nfrom langchain.tools import tool\nfrom praisonai_tools import BaseTool, ScrapeWebsiteTool\n\nclass InternetSearchTool(BaseTool):\n    name: str = \"InternetSearchTool\"\n    description: str = \"Search Internet for relevant information based on a query or latest news\"\n\n    def _run(self, query: str):\n        ddgs = DDGS()\n        results = ddgs.text(keywords=query, region='wt-wt', safesearch='moderate', max_results=5)\n        return results\n\nos.environ[\"SERPER_API_KEY\"] = \"ENTER SERPER_API_KEY HERE\"\nos.environ[\"BROWSERLESS_API_KEY\"] = \"ENTER BROWSERLESS_API_KEY HERE\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Everart Agent in Python\nDESCRIPTION: Python implementation showing how to create an AI agent with Everart integration using MCP. The code includes environment variable handling and agent configuration with specific instructions for art generation.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/mcp/everart.mdx#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent, MCP\nimport os\n\n# Get Everart API key from environment\neverart_api_key = os.getenv(\"EVERART_API_KEY\")\n\n# Use a single string command with Everart configuration\neverart_agent = Agent(\n    instructions=\"\"\"You are a helpful assistant that can interact with Everart.\n    Use the available tools when relevant to generate and manage art.\"\"\",\n    llm=\"gpt-4o-mini\",\n    tools=MCP(\"npx -y @modelcontextprotocol/server-everart\",\n            env={\"EVERART_API_KEY\": everart_api_key})\n)\n\neverart_agent.start(\"Generate an artistic image of a sunset\")\n```\n\n----------------------------------------\n\nTITLE: Creating a PraisonAI Agent with Mistral and Airbnb MCP Integration\nDESCRIPTION: This code creates an AI agent that leverages Mistral's large language model and integrates with Airbnb through MCP. The agent is configured to help book apartments on Airbnb by using natural language instructions.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/mcp/mistral.mdx#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent, MCP\nimport os\n\n# Get API key from environment variable\nmistral_api_key = os.environ.get(\"MISTRAL_API_KEY\")\n\nsearch_agent = Agent(\n    instructions=\"\"\"You help book apartments on Airbnb.\"\"\",\n    llm=\"mistral/mistral-large-latest\",\n    tools=MCP(\n        command=\"npx\",\n        args=[\"-y\", \"@openbnb/mcp-server-airbnb\", \"--ignore-robots-txt\"],\n        env={\"MISTRAL_API_KEY\": mistral_api_key}\n    )\n)\n\nsearch_agent.start(\"MUST USE airbnb_search Tool to Search. Search for Apartments in Paris for 2 nights. 04/28 - 04/30 for 2 adults. All Your Preference\")\n```\n\n----------------------------------------\n\nTITLE: Installing Required Packages\nDESCRIPTION: Installs the necessary Python packages for using BraveSearch and Google Search Results with Langchain.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/external/brave-search.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install langchain-community google-search-results\n```\n\n----------------------------------------\n\nTITLE: Defining an Internet Search Tool using Function-Based Approach - Python\nDESCRIPTION: This snippet defines a simple function that performs internet searches based on a given query. It does not retain information or share it across calls, making it ideal for straightforward operations.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/src/praisonai-agents/praisonaiagents/tools/README.md#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef internet_search(query: str):\n    # Search the internet and return results\n    return search_results\n```\n\n----------------------------------------\n\nTITLE: YAML Configuration for Multiple Agents\nDESCRIPTION: No-code approach using YAML configuration for creating multiple agents with different roles.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/quickstart.mdx#2025-04-19_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nroles:\n  diet_agent:\n    instructions: Give me 5 healthy food recipes\n  blog_agent:\n    instructions: Write a blog post about the food recipes\n```\n\n----------------------------------------\n\nTITLE: Main Execution Script\nDESCRIPTION: Sets up and executes the PraisonAI instance with required API keys and configurations. Handles environment variables and runs the report generation process.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/cookbooks/yaml/research_report_generation_agents.ipynb#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom praisonai import PraisonAI\nfrom google.colab import userdata\n\n# Create a PraisonAI instance with the agent_yaml content\npraisonai = PraisonAI(agent_yaml=agent_yaml, tools=[TavilyTool])\n\n# Add OPENAI_API_KEY Secrets to Google Colab on the Left Hand Side 🔑 or Enter Manually Below\nos.environ[\"OPENAI_API_KEY\"] = userdata.get('OPENAI_API_KEY') or \"ENTER OPENAI_API_KEY HERE\"\nos.environ[\"TAVILY_API_KEY\"] = userdata.get('TAVILY_API_KEY') or \"ENTER TAVILY_API_KEY HERE\"\nos.environ[\"OPENAI_MODEL_NAME\"] = \"gpt-4o-mini\"\n\n# Run PraisonAI\nresult = praisonai.run()\n\n# Print the result\nprint(result) # 10/10\n```\n\n----------------------------------------\n\nTITLE: Running PraisonAI with Game Development Agents\nDESCRIPTION: Initializes and runs the PraisonAI instance with the defined agent configuration. Sets up environment variables for OpenAI API access and uses the gpt-4o-mini model for execution.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/cookbooks/yaml/game_development_agents.ipynb#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom praisonai import PraisonAI\nfrom google.colab import userdata\n\n# Create a PraisonAI instance with the agent_yaml content\npraisonai = PraisonAI(agent_yaml=agent_yaml, tools=[])\n\n# Add OPENAI_API_KEY Secrets to Google Colab on the Left Hand Side 🔑 or Enter Manually Below\nos.environ[\"OPENAI_API_KEY\"] = userdata.get('OPENAI_API_KEY') or \"ENTER OPENAI_API_KEY HERE\"\nos.environ[\"OPENAI_MODEL_NAME\"] = \"gpt-4o-mini\"\n\n# Run PraisonAI\nresult = praisonai.run()\n\n# Print the result\nprint(result) # 10/10\n```\n\n----------------------------------------\n\nTITLE: Clear Interfaces with Type Hints in PraisonAI\nDESCRIPTION: This snippet demonstrates the importance of clear interfaces for tools in PraisonAI, particularly the use of type hints.  The `search_tool` function explicitly defines the types of its input parameters (query: str, max_results: int) and its return type (List[Dict[str, Any]]), promoting clarity and maintainability.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/concepts/tools.mdx#2025-04-19_snippet_15\n\nLANGUAGE: python\nCODE:\n```\ndef search_tool(\n    query: str,\n    max_results: int = 10\n) -> List[Dict[str, Any]]:\n    \"\"\"\n    Search for information with clear parameters\n    \"\"\"\n    pass\n```\n\n----------------------------------------\n\nTITLE: Initializing Template-Based Content Creation Agent with praisonaiagents\nDESCRIPTION: This snippet creates an agent that works with templates to generate consistent content. The agent's instructions emphasize maintaining the template structure, replacing placeholders with relevant content, ensuring consistency in tone and style, adapting content to specific requirements, and reviewing for coherence. The code provides an example template for a product review.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/course/agents/16-content-creation-agents.mdx#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ntemplate_agent = Agent(\n    name=\"TemplateWriter\",\n    instructions=\"\"\"\n    You are a content creator who works with templates to create consistent content.\n    \n    When filling a template:\n    1. Maintain the overall structure of the template\n    2. Replace placeholder text with appropriate content\n    3. Ensure consistency in tone and style\n    4. Adapt content to the specific requirements\n    5. Review for coherence and flow\n    \n    Always preserve formatting elements like headings, lists, and emphasis.\n    \"\"\"\n)\n\n# Example template\nproduct_review_template = \"\"\"\n# {Product Name} Review: {Brief Opinion}\n\n## Quick Summary\n**Rating:** {Rating}/10\n**Price:** {Price Range}\n**Recommended For:** {Target User}\n\n## What We Liked\n- {Positive Point 1}\n- {Positive Point 2}\n- {Positive Point 3}\n\n## What Could Be Better\n- {Negative Point 1}\n- {Negative Point 2}\n\n## Bottom Line\n{Conclusion Paragraph}\n\n\"\"\"\n\n# Use the template agent\nfilled_template = template_agent.start(\n    f\"\"\"\n    Fill the following template for a product review:\n    \n    {product_review_template}\n    \n    Product: Wireless Noise-Cancelling Headphones XZ200\n    Key features: 30-hour battery life, active noise cancellation, voice assistant integration\n    Price: $249.99\n    Target audience: Commuters and office workers\n    Notable pros: Sound quality, comfort, battery life\n    Notable cons: Price, occasional Bluetooth connectivity issues\n    \"\"\"\n)\nprint(filled_template)\n```\n\n----------------------------------------\n\nTITLE: Configuring Roles for PraisonAI Agents - YAML\nDESCRIPTION: This snippet describes the YAML configuration for setting up an agent role within the PraisonAI framework. It specifies the research topic, the role of a research analyst, and the tasks assigned to the role, including data analysis on lung disease causes. It also links to the YouSearchTool for enhanced functionality.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/you.com.mdx#2025-04-19_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nframework: crewai\ntopic: research about the causes of lung disease\nroles:\n  research_analyst:\n    backstory: Experienced in analyzing scientific data related to respiratory health.\n    goal: Analyze data on lung diseases\n    role: Research Analyst\n    tasks:\n      data_analysis:\n        description: Gather and analyze data on the causes and risk factors of lung\n          diseases.\n        expected_output: Report detailing key findings on lung disease causes.\n    tools:\n    - 'YouSearchTool'\n```\n\n----------------------------------------\n\nTITLE: Creating Stock Price MCP Server\nDESCRIPTION: Python script that creates an MCP server with a tool to fetch stock prices using yfinance library.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/mcp/stockprice.mdx#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport yfinance as yf\nfrom mcp.server.fastmcp import FastMCP\n\nmcp = FastMCP(\"stock_prices\")\n\n@mcp.tool()\nasync def get_stock_price(ticker: str) -> str:\n    \"\"\"Get the current stock price for a given ticker symbol.\n    \n    Args:\n        ticker: Stock ticker symbol (e.g., AAPL, MSFT, GOOG)\n        \n    Returns:\n        Current stock price as a string\n    \"\"\"\n    if not ticker:\n        return \"No ticker provided\"\n    try:\n        stock = yf.Ticker(ticker)\n        info = stock.info\n        current_price = info.get('currentPrice') or info.get('regularMarketPrice')\n        if not current_price:\n            return f\"Could not retrieve price for {ticker}\"\n        return f\"${current_price:.2f}\"\n        \n    except Exception as e:\n        return f\"Error: {str(e)}\"\n\nif __name__ == \"__main__\":\n    mcp.run(transport='stdio')\n```\n\n----------------------------------------\n\nTITLE: Email Processing Tools and Custom Agent Classes\nDESCRIPTION: Defines custom tool classes for Gmail interaction, email analysis, and search functionality using LangChain and custom BaseTool\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/cookbooks/yaml/email_workflow_management_agents.ipynb#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass GmailGetThreadTool(BaseTool):\n    name: str = \"GmailGetThreadTool\"\n    description: str = \"Retrieve the complete email thread for a given thread ID to provide contextual analysis.\"\n\n    def _run(self, thread_id: str):\n        gmail_toolkit = GmailToolkit()\n        get_thread = GmailGetThread(api_resource=gmail_toolkit.api_resource)\n        thread = get_thread(thread_id)\n        return thread\n```\n\n----------------------------------------\n\nTITLE: Implementing Internet Search Tool Class\nDESCRIPTION: Defines a custom tool class that inherits from BaseTool to perform internet searches using DuckDuckGo's search API, returning up to 5 relevant results for a given query.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/cookbooks/yaml/business_product_launch_agents.ipynb#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonai_tools import BaseTool, FileReadTool, SerperDevTool, ScrapeWebsiteTool\nfrom langchain_community.tools.file_management.write import WriteFileTool\nfrom duckduckgo_search import DDGS\nfrom langchain.tools import tool\n\nclass InternetSearchTool(BaseTool):\n    name: str = \"InternetSearchTool\"\n    description: str = \"Search Internet for relevant information based on a query or latest news\"\n\n    def _run(self, query: str):\n        ddgs = DDGS()\n        results = ddgs.text(keywords=query, region='wt-wt', safesearch='moderate', max_results=5)\n        return results\n```\n\n----------------------------------------\n\nTITLE: Visualizing AI Agent Workflow with Mermaid\nDESCRIPTION: A flow diagram showing the interaction between AI agents, tasks, and tools in a processing pipeline. The diagram illustrates the flow from start to output with two agent subgraphs containing tasks and tools.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/agents/agents.mdx#2025-04-19_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph LR\n    %% Define the main flow\n    Start([▶ Start]) --> Agent1\n    Agent1 --> Process[⚙ Process]\n    Process --> Agent2\n    Agent2 --> Output([✓ Output])\n    Process -.-> Agent1\n    \n    %% Define subgraphs for agents and their tasks\n    subgraph Agent1[ ]\n        Task1[📋 Task]\n        AgentIcon1[🤖 AI Agent]\n        Tools1[🔧 Tools]\n        \n        Task1 --- AgentIcon1\n        AgentIcon1 --- Tools1\n    end\n    \n    subgraph Agent2[ ]\n        Task2[📋 Task]\n        AgentIcon2[🤖 AI Agent]\n        Tools2[🔧 Tools]\n        \n        Task2 --- AgentIcon2\n        AgentIcon2 --- Tools2\n    end\n\n    classDef input fill:#8B0000,stroke:#7C90A0,color:#fff\n    classDef process fill:#189AB4,stroke:#7C90A0,color:#fff\n    classDef tools fill:#2E8B57,stroke:#7C90A0,color:#fff\n    classDef transparent fill:none,stroke:none\n\n    class Start,Output,Task1,Task2 input\n    class Process,AgentIcon1,AgentIcon2 process\n    class Tools1,Tools2 tools\n    class Agent1,Agent2 transparent\n```\n\n----------------------------------------\n\nTITLE: Example Usage of PraisonAIAgents Async Implementation\nDESCRIPTION: Demonstrates how to use the async capabilities of PraisonAIAgents class, including initialization and execution of async workflows.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/api/praisonaiagents/agents/agents.mdx#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nasync def main():\n    # Initialize agents and tasks\n    agents = PraisonAIAgents(\n        agents=[async_agent1, async_agent2],\n        tasks=[async_task1, async_task2],\n        process=\"workflow\"\n    )\n    \n    # Start async execution\n    result = await agents.astart()\n    print(result)\n\n# Run the async workflow\nasyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Basic AutoAgents Usage Example in Python\nDESCRIPTION: Example showing basic usage of AutoAgents class for researching AI developments using SerperDevTool.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/api/praisonaiagents/agents/autoagents.mdx#2025-04-19_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import AutoAgents\nfrom praisonaiagents.tools import SerperDevTool\n\nagents = AutoAgents(\n    instructions=\"Research recent AI developments\",\n    tools=[SerperDevTool()],\n    verbose=True\n)\nresult = agents.start()\n```\n\n----------------------------------------\n\nTITLE: Initializing and Running the Agent\nDESCRIPTION: This code initializes the `PraisonAIAgents` environment with the created agent and task, setting the processing mode to \"sequential\". The `agents.start()` method then initiates the agent's workflow to perform the defined task.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/wikipedia_tools.mdx#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nagents = PraisonAIAgents(\n        agents=[wiki_agent],\n        tasks=[research_task],\n        process=\"sequential\"\n    )\nagents.start()\n```\n\n----------------------------------------\n\nTITLE: Creating and Caching Hackathon Judge Agent\nDESCRIPTION: This Python code defines a function `get_hackathon_judge` that creates an AI agent using the `Agent` class from the `praisonaiagents` library. The `@st.cache_resource` decorator caches the agent to prevent it from being recreated on every run. The agent is configured with a name, role, goal, backstory, and language model.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/ui/streamlit/hackathon-judge-streamlit.mdx#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n\"# Create Vision Analysis Agent\n@st.cache_resource\ndef get_hackathon_judge():\n    return Agent(\n        name=\\\"HackathonJudge\\\",\n        role=\\\"Technical Project Evaluator\\\",\n        goal=\\\"Evaluate hackathon projects through video demonstrations\\\",\n        backstory=\\\"\\\"\\\"You are an experienced hackathon judge and technical expert.\\n        You excel at evaluating innovation, technical implementation, and presentation quality.\\n        You provide constructive feedback and identify both strengths and areas for improvement.\\\"\\\"\\\",\n        llm=\\\"gpt-4o-mini\\\",  # Using vision-capable model\n        self_reflect=False,\n        knowledge=\\\"\\\"\n    )\"\n```\n\n----------------------------------------\n\nTITLE: Visualizing Agentic Routing Workflow using Mermaid\nDESCRIPTION: Mermaid diagram showing a routing workflow where an LLM router dynamically directs tasks to specialized LLM instances. This allows for intelligent task distribution based on agent specialization.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/index.mdx#2025-04-19_snippet_9\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n    In[In] --> Router[LLM Call Router]\n    Router --> LLM1[LLM Call 1]\n    Router --> LLM2[LLM Call 2]\n    Router --> LLM3[LLM Call 3]\n    LLM1 --> Out[Out]\n    LLM2 --> Out\n    LLM3 --> Out\n    \n    style In fill:#8B0000,color:#fff\n    style Router fill:#2E8B57,color:#fff\n    style LLM1 fill:#2E8B57,color:#fff\n    style LLM2 fill:#2E8B57,color:#fff\n    style LLM3 fill:#2E8B57,color:#fff\n    style Out fill:#8B0000,color:#fff\n```\n\n----------------------------------------\n\nTITLE: Implementing SearchApi with PraisonAI Agents\nDESCRIPTION: Demonstrates how to create and configure PraisonAI agents with SearchApi integration. Creates a data agent for searching and an editor agent for analysis, then combines them into a multi-agent system.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/external/searchapi-search.mdx#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent, PraisonAIAgents\nfrom langchain_community.utilities import SearchApiAPIWrapper\n\ndata_agent = Agent(instructions=\"I am looking for the top google searches of 2025\", tools=[SearchApiAPIWrapper])\neditor_agent = Agent(instructions=\"Analyze the data and derive insights\")\n\nagents = PraisonAIAgents(agents=[data_agent, editor_agent])\nagents.start()\n```\n\n----------------------------------------\n\nTITLE: Import PraisonAI Components\nDESCRIPTION: This code snippet imports the necessary components from the `praisonaiagents` package.  It includes classes for creating agents, tasks, and managing the agent environment, as well as specific tools for interacting with YAML files such as reading, writing, validating, merging, and converting.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/yaml_tools.mdx#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent, Task, PraisonAIAgents\nfrom praisonaiagents.tools import read_yaml, write_yaml, validate_yaml, merge_yaml, convert_yaml\n```\n\n----------------------------------------\n\nTITLE: Installing PraisonAI Agents Package\nDESCRIPTION: This command installs the PraisonAI Agents package using pip, which is a prerequisite for using the code review automation features described in the guide. This package provides the necessary classes and functions for creating and managing AI agents for code analysis and fix application.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/examples/code-review.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"pip install praisonaiagents\"\n```\n\n----------------------------------------\n\nTITLE: Installing and Running PraisonAI Agents - JavaScript\nDESCRIPTION: Instructions to install the PraisonAI package for JavaScript, set an API key, and implement AI agents in a Node.js environment. Agents execute tasks based on specific instructions given in `app.js`. Requires npm and Node.js.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/index.mdx#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install praisonai\n```\n\nLANGUAGE: bash\nCODE:\n```\nexport OPENAI_API_KEY=xxxxxxxxxxxxxxxxxxxxxx\n```\n\nLANGUAGE: bash\nCODE:\n```\nnode app.js\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst { Agent } = require('praisonai');\nconst agent = new Agent({ instructions: 'You are a helpful AI assistant' });\nagent.start('Write a movie script about a robot in Mars');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst { Agent, PraisonAIAgents } = require('praisonai');\n\nconst researchAgent = new Agent({ instructions: 'Research about AI' });\nconst summariseAgent = new Agent({ instructions: 'Summarise research agent\\'s findings' });\n\nconst agents = new PraisonAIAgents({ agents: [researchAgent, summariseAgent] });\nagents.start();\n```\n\n----------------------------------------\n\nTITLE: Defining Agent Roles and Tasks in YAML\nDESCRIPTION: YAML configuration defining the structure and behavior of book writing agents including researcher, outliner, and writer roles with their respective tasks and goals.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/cookbooks/yaml/book_writing_agents.ipynb#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nagent_yaml = \"\"\"\nframework: \"crewai\"\ntopic: \"Automated Book Writing on The Metaphorical Tree of Life\"\nroles:\n  researcher:\n    role: \"Research Agent\"\n    backstory: |\n      A seasoned researcher, known for gathering the best sources and understanding the key elements of any topic.\n      Your skill lies in collecting relevant information to support both the book outline and chapter writing process.\n    goal: \"Gather comprehensive information to support book outline creation and chapter content.\"\n    tasks:\n      research_topic:\n        description: |\n          Research the topic of \"The Metaphorical Tree of Life\" to gather the most important information that will\n          be useful in creating a well-organized book outline. Focus on high-quality, reliable sources.\n\n          The goal of this book is to explore the metaphor of the Tree of Life, delving into its symbolism across cultures,\n          its representation of growth, interconnectedness, and resilience, and how it relates to the human experience\n          and natural world. The book aims to provide readers with insights into the Tree of Life as a powerful metaphor\n          for understanding life's complexities, personal development, and interconnectedness.\n        expected_output: \"A set of key points and important information about 'The Metaphorical Tree of Life' to be used in creating the outline.\"\n      research_chapter:\n        description: |\n          Research the provided chapter topic, title, and outline to gather additional content that will be helpful in writing the chapter.\n          Ensure you focus on reliable, high-quality sources of information.\n\n          The goal of this book is to explore the metaphor of the Tree of Life, delving into its symbolism across cultures,\n          its representation of growth, interconnectedness, and resilience, and how it relates to the human experience\n          and natural world. The book aims to provide readers with insights into the Tree of Life as a powerful metaphor\n          for understanding life's complexities, personal development, and interconnectedness.\n\n          Here is the outline description for the chapter:\n\n          **\"An exploration of the roots as the foundation of the Tree of Life, symbolizing the origins of existence, connection to heritage, and the grounding principles that shape individual identity. This chapter delves into how roots anchor the tree and sustain growth, representing the importance of understanding one's own beginnings and cultural heritage.\"**\n\n          When researching, consider the following key points:\n          - Gather enough information to write a 3,000-word chapter.\n          - Ensure the chapter content aligns with the rest of the book.\n\n          Here is the outline of the entire book:\n\n          - **Chapter 1: Roots and Beginnings**\n            An exploration of the roots as the foundation of the Tree of Life, symbolizing origins, connection to heritage, and grounding principles.\n\n          - **Chapter 2: The Trunk – Stability and Growth**\n            Examines the trunk as the support system of the tree, representing resilience, stability, and the journey of personal growth.\n\n          - **Chapter 3: Branches of Knowledge**\n            Discusses branches as pathways of exploration, illustrating how experiences, learning, and relationships expand one's reach.\n\n          - **Chapter 4: Leaves – Diversity and Change**\n            Leaves symbolize individuality, diversity, and change, representing the unique qualities each person contributes to the world.\n\n          - **Chapter 5: Fruits – Achievement and Legacy**\n            Reflects on fruits as manifestations of effort and achievements, the legacy one leaves behind.\n\n          - **Chapter 6: Seasons of Life**\n            Analyzes the changing seasons as phases of life, symbolizing the cyclical nature of growth, dormancy, and renewal.\n        expected_output: \"A set of additional insights and information to be used in writing the chapter.\"\n    tools:\n      - \"SerperDevTool\"\n\n  outliner:\n    role: \"Book Outlining Agent\"\n    backstory: |\n      An expert organizer, skilled at turning scattered information into a structured book outline.\n      You create clear, concise chapter outlines that guide the entire book-writing process.\n    goal: \"Generate a well-organized book outline with chapter titles and descriptions.\"\n    tasks:\n      generate_outline:\n        description: |\n          Create a book outline with chapters in sequential order based on the research findings.\n          Ensure each chapter has a title and a brief description that highlights the topics and subtopics to be covered.\n          Each chapter should be 3,000 words or less. Avoid duplicating chapters or topics in the outline.\n\n          The goal of this book is to explore the metaphor of the Tree of Life, delving into its symbolism across cultures,\n          its representation of growth, interconnectedness, and resilience, and how it relates to the human experience\n          and natural world. The book aims to provide readers with insights into the Tree of Life as a powerful metaphor\n          for understanding life's complexities, personal development, and interconnectedness.\n        expected_output: \"An outline of chapters, including titles and descriptions for each chapter's content.\"\n    tools: []\n\n  writer:\n    role: \"Chapter Writer\"\n    backstory: |\n      A talented writer known for producing engaging, well-researched, and informative content.\n      You excel at transforming complex ideas into readable and well-organized chapters in markdown format.\n    goal: \"Write well-structured chapters in markdown format, based on the provided chapter title and outline.\"\n    tasks:\n      write_chapter:\n        description: |\n          Write a well-structured chapter based on the chapter title, goal, and outline description.\n          Each chapter should be written in markdown and should contain around 3,000 words.\n\n          Here is the topic for the book: \"The Metaphorical Tree of Life\"\n          Here is the title of the chapter: \"Roots and Beginnings\"\n\n          **Chapter Description:**\n          \"An exploration of the roots as the foundation of the Tree of Life, symbolizing the origins of existence, connection to heritage, and the grounding principles that shape individual identity. This chapter delves into how roots anchor the tree and sustain growth, representing the importance of understanding one's own beginnings and cultural heritage.\"\n\n          Important notes:\n          - The chapter you are writing needs to fit well with the other chapters in the book.\n          - Ensure the content aligns with the overarching book structure.\n\n          **Book Outline:**\n          - **Chapter 1: Roots and Beginnings**\n            An exploration of the roots as the foundation of the Tree of Life, symbolizing origins, connection to heritage, and grounding principles.\n\n          - **Chapter 2: The Trunk – Stability and Growth**\n            Examines the trunk as the support system of the tree, representing resilience, stability, and the journey of personal growth.\n\n          - **Chapter 3: Branches of Knowledge**\n            Discusses branches as pathways of exploration, illustrating how experiences, learning, and relationships expand one's reach.\n\n          - **Chapter 4: Leaves – Diversity and Change**\n            Leaves symbolize individuality, diversity, and change, representing the unique qualities each person contributes to the world.\n\n          - **Chapter 5: Fruits – Achievement and Legacy**\n            Reflects on fruits as manifestations of effort and achievements, the legacy one leaves behind.\n\n          - **Chapter 6: Seasons of Life**\n            Analyzes the changing seasons as phases of life, symbolizing the cyclical nature of growth, dormancy, and renewal.\n        expected_output: \"A markdown-formatted chapter of around 3,000 words that covers the provided chapter title and outline.\"\n    tools: []\ndependencies: []\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Google Drive Agent in Python\nDESCRIPTION: Python script that creates an AI agent capable of interacting with Google Drive using MCP. Includes configuration for credentials and agent initialization with specific instructions.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/mcp/gdrive.mdx#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent, MCP\nimport os\n\n# Get the credentials path from environment\ngdrive_credentials = os.getenv(\"GDRIVE_CREDENTIALS_PATH\", \"servers/gcp-oauth.keys.json\")\n\n# Use a single string command with Google Drive configuration\ngdrive_agent = Agent(\n    instructions=\"\"\"You are a helpful assistant that can interact with Google Drive.\n    Use the available tools when relevant to manage files and folders.\"\"\",\n    llm=\"gpt-4o-mini\",\n    tools=MCP(\"npx -y @modelcontextprotocol/server-gdrive\",\n            env={\"GDRIVE_CREDENTIALS_PATH\": gdrive_credentials})\n)\n\ngdrive_agent.start(\"List files in my Google Drive\")\n```\n\n----------------------------------------\n\nTITLE: PraisonAI Automatic Mode Operation\nDESCRIPTION: Shows how to run PraisonAI in automatic mode with a specific task prompt\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/nocode/run.mdx#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npraisonai --auto create a movie script about Dog in Moon\n```\n\n----------------------------------------\n\nTITLE: Creating a Multi-Agent System with PraisonAI in TypeScript\nDESCRIPTION: Example of configuring multiple specialized agents that work in sequence to research, summarize, and provide recommendations on renewable energy. Demonstrates agent chain coordination.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/src/praisonai-ts/README.md#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Agent, PraisonAIAgents } from 'praisonai';\n\nasync function main() {\n    // Create multiple agents with different roles\n    const researchAgent = new Agent({\n        name: \"ResearchAgent\",\n        instructions: \"Research and provide detailed information about renewable energy sources.\",\n        verbose: true\n    });\n\n    const summaryAgent = new Agent({\n        name: \"SummaryAgent\",\n        instructions: \"Create a concise summary of the research findings about renewable energy sources. Use {previous_result} as input.\",\n        verbose: true\n    });\n\n    const recommendationAgent = new Agent({\n        name: \"RecommendationAgent\",\n        instructions: \"Based on the summary in {previous_result}, provide specific recommendations for implementing renewable energy solutions.\",\n        verbose: true\n    });\n\n    // Run the agents in sequence\n    const praisonAI = new PraisonAIAgents({\n        agents: [researchAgent, summaryAgent, recommendationAgent],\n        tasks: [\n            \"Research and analyze current renewable energy technologies and their implementation.\",\n            \"Summarize the key findings from the research.\",\n            \"Provide actionable recommendations based on the summary.\"\n        ],\n        verbose: true\n    });\n\n    try {\n        console.log('Starting multi-agent example...');\n        const results = await praisonAI.start();\n        console.log('\\nFinal Results:', results);\n    } catch (error) {\n        console.error('Error:', error);\n    }\n}\n\nmain();\n```\n\n----------------------------------------\n\nTITLE: Initializing and Running Agent\nDESCRIPTION: Setup and execution of PraisonAI agents with sequential processing.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/file_tools.mdx#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nagents = PraisonAIAgents(\n    agents=[file_agent],\n    tasks=[file_task],\n    process=\"sequential\"\n)\nagents.start()\n```\n\n----------------------------------------\n\nTITLE: Starting the Python Reasoning Agent\nDESCRIPTION: This Bash command snippet shows users how to execute the previously created Python script to initialize and run the reasoning agents defined within it.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/reasoning.mdx#2025-04-19_snippet_4\n\nLANGUAGE: Bash\nCODE:\n```\npython app.py\n```\n\n----------------------------------------\n\nTITLE: Defining a CLI Executor Tool Class\nDESCRIPTION: Creates a custom tool class extending BaseTool to execute command-line commands using Open Interpreter. The tool captures the command output or returns an error message if execution fails.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/cookbooks/yaml/cli_operation_agents.ipynb#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Failed due to environment limitations, Test code on local setting\nfrom praisonai_tools import BaseTool\nfrom interpreter import interpreter\n\nclass CLIExecutorTool(BaseTool):\n    name: str = \"CLIExecutorTool\"\n    description: str = \"Execute command-line commands and return the output.\"\n\n    def _run(self, command: str):\n        \"\"\"Executes a command-line command using Open Interpreter and returns the output.\"\"\"\n        try:\n            result = interpreter.chat(command)\n            return result\n        except Exception as e:\n            return f\"An error occurred while executing the command: {e}\"\n```\n\n----------------------------------------\n\nTITLE: Using Groq LLM with WhatsApp in Python\nDESCRIPTION: Python code that configures a WhatsApp agent using Groq's Llama-3.2-90b model instead of OpenAI. This demonstrates alternative LLM integration with the WhatsApp MCP.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/mcp/whatsapp.mdx#2025-04-19_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent, MCP\n\nwhatsapp_agent = Agent(\n    instructions=\"Whatsapp Agent\",\n    llm=\"groq/llama-3.2-90b-vision-preview\",\n    tools=MCP(\"python /path/to/whatsapp-mcp/whatsapp-mcp-server/main.py\")\n)\n\nwhatsapp_agent.start(\"Send Hello to Mervin Praison\")\n```\n\n----------------------------------------\n\nTITLE: Example Agent Configuration\nDESCRIPTION: Provides a basic setup of an AI agent configured to manage system processes and execute commands using predefined tools from the praisonaiagents package.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/shell_tools.mdx#2025-04-19_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent\nfrom praisonaiagents.tools import (\n    execute_command, list_processes,\n    kill_process, get_system_info\n)\n\nagent = Agent(\n    name=\"SystemManager\",\n    description=\"An agent that manages system processes and executes commands\",\n    tools=[\n        execute_command, list_processes,\n        kill_process, get_system_info\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Monitoring Tech News in Python\nDESCRIPTION: This snippet retrieves news sources for the \"technology\" category, fetches articles from each source, and prints the title of articles containing the keyword \"ai\". It uses the `get_news_sources` and `get_articles_from_source` functions.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/newspaper_tools.mdx#2025-04-19_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nsources = get_news_sources(category=\"technology\")\nfor source in sources:\n    articles = get_articles_from_source(\n        source[\"url\"],\n        limit=5\n    )\n    for article in articles:\n        if \"ai\" in article.get(\"keywords\", []):\n            print(f\"AI article found: {article['title']}\")\n```\n\n----------------------------------------\n\nTITLE: Installing Required Dependencies\nDESCRIPTION: Installs the PraisonAI agents package with LLM support using pip. This is a prerequisite for using Gemini models with the PraisonAI framework.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/mcp/gemini.mdx#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npip install \"praisonaiagents[llm]\"\n```\n\n----------------------------------------\n\nTITLE: Creating Agent Configuration in Python\nDESCRIPTION: This Python snippet demonstrates how to initialize an agent with specific reasoning configurations, such as role, goal, and language model to utilize for logical processing. This snippet shows the flexibility of the framework to cater to different needs in agent design.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/reasoning.mdx#2025-04-19_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\n# Create an agent with reasoning configuration\nagent = Agent(\n    role=\"Problem Solver\",\n    goal=\"Solve complex problems\",\n    backstory=\"Expert in problem-solving\",\n    tools=[Tools.internet_search],\n    verbose=True,  # Enable detailed logging\n    llm=\"gpt-4o\"  # Language model to use\n)\n\n# Task with reasoning requirements\ntask = Task(\n    description=\"Solve complex problem\",\n    expected_output=\"Detailed solution\",\n    agent=agent\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Research Agent\nDESCRIPTION: Configuration of an AI agent specialized in scientific literature research\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/arxiv_tools.mdx#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nresearch_agent = Agent(\n    name=\"ResearchAgent\",\n    role=\"Scientific Literature Specialist\",\n    goal=\"Find and analyze relevant scientific papers.\",\n    backstory=\"Expert in academic research and literature review.\",\n    tools=[search_arxiv, get_arxiv_paper, get_papers_by_author, get_papers_by_category],\n    self_reflect=False\n)\n```\n\n----------------------------------------\n\nTITLE: Setting OpenAI API Key\nDESCRIPTION: Environment variable configuration for OpenAI API authentication.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/quickstart.mdx#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport OPENAI_API_KEY=your_openai_key\n```\n\n----------------------------------------\n\nTITLE: Configuring Multi-Agent setup with self-reflection in YAML\nDESCRIPTION: This YAML configuration defines a multi-agent PraisonAI setup for creating technical documentation about AI trends. It specifies the framework, process, topic, roles (researcher and writer), backstories, goals, tasks, and tools for each agent. It includes self-reflection configuration for the researcher and uses DuckDuckGo as a tool.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/selfreflection.mdx#2025-04-19_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nframework: praisonai\nprocess: sequential\ntopic: create technical documentation about AI trends\nroles:\n  researcher:\n    backstory: Expert analyst specializing in AI trends and their implications.\n    goal: Research and analyze current AI developments\n    role: Senior Research Analyst\n    self_reflect: true\n    min_reflect: 1\n    max_reflect: 2\n    tasks:\n      research_task:\n        description: Research and analyze recent developments in AI technology.\n        expected_output: Comprehensive analysis of current AI trends.\n    tools:\n    - duckduckgo\n\n  writer:\n    backstory: Experienced technical writer skilled in creating clear documentation.\n    goal: Transform research into accessible documentation\n    role: Technical Writer\n    tasks:\n      documentation_task:\n        description: Create technical documentation from research findings.\n        expected_output: Well-structured technical documentation.\n```\n\n----------------------------------------\n\nTITLE: Implementing BraveSearch with PraisonAI Agents\nDESCRIPTION: Python implementation showing how to create a search function using BraveSearch API and integrate it with PraisonAI agents. The code sets up two agents - one for searching AI job trends and another for writing blog articles.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/external/brave-search.mdx#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent, PraisonAIAgents\nfrom langchain_community.tools import BraveSearch\nimport os\n\n\ndef search_brave(query: str):\n    \"\"\"Searches using BraveSearch and returns results.\"\"\"\n    api_key = os.environ['BRAVE_SEARCH_API']\n    tool = BraveSearch.from_api_key(api_key=api_key, search_kwargs={\"count\": 3})\n    return tool.run(query)\n\ndata_agent = Agent(instructions=\"Search about AI job trends in 2025\", tools=[search_brave])\neditor_agent = Agent(instructions=\"Write a blog article\")\nagents = PraisonAIAgents(agents=[data_agent, editor_agent])\nagents.start()\n```\n\n----------------------------------------\n\nTITLE: Executing PraisonAI Instagram Agents\nDESCRIPTION: Main execution code that initializes PraisonAI with the configured agents and tools, sets up OpenAI API credentials, and runs the agent system.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/cookbooks/yaml/instagram_post_agents.ipynb#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom praisonai import PraisonAI\nfrom google.colab import userdata\n\n# Create a PraisonAI instance with the agent_yaml content\npraisonai = PraisonAI(agent_yaml=agent_yaml, tools=[InternetSearchTool, ScrapeWebsiteTool]) # Add InstagramSearchTool once scripted\n\n# Add OPENAI_API_KEY Secrets to Google Colab on the Left Hand Side 🔑 or Enter Manually Below\nos.environ[\"OPENAI_API_KEY\"] = userdata.get('OPENAI_API_KEY') or \"ENTER OPENAI_API_KEY HERE\"\nos.environ[\"OPENAI_MODEL_NAME\"] = \"gpt-4o-mini\"\n\n# Run PraisonAI\nresult = praisonai.run()\n\n# Print the result\nprint(result) # 2/10\n```\n\n----------------------------------------\n\nTITLE: Defining Agent Roles and Tasks in YAML\nDESCRIPTION: YAML configuration defining three agent roles (Research Analyst, Medical Writer, and Editor) with their respective tasks and tools for analyzing lung disease causes.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/cookbooks/yaml/reddit_search_analysis_agents.ipynb#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nagent_yaml = \"\"\"\nframework: \"crewai\"\ntopic: \"research about the causes of lung disease\"\nroles:\n  research_analyst:\n    role: \"Research Analyst\"\n    backstory: \"Experienced in analyzing scientific data related to respiratory health.\"\n    goal: \"Analyze data on lung diseases\"\n    tasks:\n      data_analysis:\n        description: \"Gather and analyze data on the causes and risk factors of lung diseases.\"\n        expected_output: \"Report detailing key findings on lung disease causes.\"\n    tools:\n      - \"RedditSearchRun\"\n  medical_writer:\n    role: \"Medical Writer\"\n    backstory: \"Skilled in translating complex medical information into accessible content.\"\n    goal: \"Compile comprehensive content on lung disease causes\"\n    tasks:\n      content_creation:\n        description: \"Create detailed content summarizing the research findings on lung disease causes.\"\n        expected_output: \"Document outlining various causes and risk factors of lung diseases.\"\n    tools: []\n  editor:\n    role: \"Editor\"\n    backstory: \"Proficient in editing medical content for accuracy and clarity.\"\n    goal: \"Review and refine content on lung disease causes\"\n    tasks:\n      content_review:\n        description: \"Edit and refine the compiled content on lung disease causes for accuracy and coherence.\"\n        expected_output: \"Finalized document on lung disease causes ready for dissemination.\"\n    tools: []\ndependencies: []\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Multi-Agent Setup for Code Development - Python\nDESCRIPTION: This snippet shows how to create two roles: a code writer and a code executor, each with their respective tasks defined for writing and executing Python scripts. It initializes their agents and starts the execution process.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/codeagent.mdx#2025-04-19_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent, Task, PraisonAIAgents\nfrom e2b_code_interpreter import Sandbox\n\ndef code_interpreter(code: str):\n    # Implementation as defined earlier\n    pass\n\n# Create first agent for writing code\ncode_writer = Agent(\n    role=\"Code Writer\",\n    goal=\"Write efficient Python code\",\n    backstory=\"Expert Python developer specializing in code writing\",\n    verbose=True\n)\n\n# Create second agent for code execution\ncode_executor = Agent(\n    role=\"Code Executor\",\n    goal=\"Execute and validate Python code\",\n    backstory=\"Expert in code execution and testing\",\n    tools=[code_interpreter],\n    verbose=True\n)\n\n# Create first task\nwriting_task = Task(\n    description=\"Write a Python script for data analysis\",\n    expected_output=\"Complete Python script\",\n    agent=code_writer\n)\n\n# Create second task\nexecution_task = Task(\n    description=\"Execute and validate the Python script\",\n    expected_output=\"Execution results and validation\",\n    agent=code_executor\n)\n\n# Create and start the agents\nagents = PraisonAIAgents(\n    agents=[code_writer, code_executor],\n    tasks=[writing_task, execution_task],\n    process=\"sequential\"\n)\n\n# Start execution\nagents.start()\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Tools for Trip Planning\nDESCRIPTION: Definition of custom tools including InternetSearchTool for web searches, CalculatorTools for mathematical operations, and WebContentReaderTool for webpage content extraction.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/cookbooks/yaml/trip_planner_agents.ipynb#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport requests\nfrom bs4 import BeautifulSoup\nfrom duckduckgo_search import DDGS\nfrom praisonai_tools import BaseTool\nfrom langchain.tools import tool\nimport ast\nimport operator as op\n\nclass InternetSearchTool(BaseTool):\n    name: str = \"InternetSearchTool\"\n    description: str = \"Search Internet for relevant information based on a query or latest news\"\n\n    def _run(self, query: str):\n        ddgs = DDGS()\n        results = ddgs.text(keywords=query, region='wt-wt', safesearch='moderate', max_results=5)\n        return results\n\n\nclass CalculatorTools():\n    @tool(\"Make a calculation\")\n    def calculate(operation):\n        \"\"\"Useful to perform any mathematical calculations,\n        like sum, minus, multiplication, division, etc.\n        The input to this tool should be a mathematical\n        expression, a couple examples are `200*7` or `5000/2*10`\n        \"\"\"\n        try:\n            return eval(operation)\n        except SyntaxError:\n            return \"Error: Invalid syntax in mathematical expression\"\n\n\nclass WebContentReaderTool(BaseTool):\n    name: str = \"WebContentReaderTool\"\n    description: str = \"Fetches and reads the main text content from a specified webpage URL.\"\n\n    def _run(self, url: str) -> str:\n        \"\"\"Reads the content of a webpage and returns up to 5000 characters of text.\"\"\"\n        try:\n            response = requests.get(url, headers={'User-Agent': 'Mozilla/5.0'})\n            response.raise_for_status()\n            soup = BeautifulSoup(response.content, 'html.parser')\n\n            # Extract and clean the text content\n            text_content = soup.get_text(separator=\"\\n\", strip=True)\n            return text_content[:5000]  # Limit content to 5000 characters for brevity\n        except requests.exceptions.RequestException as e:\n            return f\"Failed to retrieve content from {url}: {e}\"\n```\n\n----------------------------------------\n\nTITLE: Depicting Expert Panel Pattern with Mermaid\nDESCRIPTION: This Mermaid diagram illustrates the Expert Panel Pattern where multiple agents specializing in different areas work simultaneously, and their results are merged by a Coordination Agent.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/course/agents/07-multi-agent-systems.mdx#2025-04-19_snippet_2\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD\n    Task --> A[Expert Agent 1]\n    Task --> B[Expert Agent 2]\n    Task --> C[Expert Agent 3]\n    A --> D[Coordination Agent]\n    B --> D\n    C --> D\n    D --> Result\n```\n\n----------------------------------------\n\nTITLE: Initializing OpenAI Client for AI Agent Interaction\nDESCRIPTION: Demonstrates creating an OpenAI client and generating a chat completion using the GPT-3.5 turbo model. Shows basic interaction with AI language model for generating responses.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/course/agents/01-introduction.mdx#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport openai\\n\\nclient = openai.OpenAI()\\nresult = client.chat.completions.create(\\n    model=\"gpt-3.5-turbo\",\\n    messages=[\\n        {\"role\": \"user\", \"content\": \"Hello World\"}\\n    ]\\n)\\n\\nprint(result.choices[0].message.content)\n```\n\n----------------------------------------\n\nTITLE: Running the Mistral Airbnb Integration Script\nDESCRIPTION: Command to execute the Python script that creates and runs the Mistral-powered Airbnb search agent.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/mcp/mistral.mdx#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npython mistral_airbnb.py\n```\n\n----------------------------------------\n\nTITLE: Executing PraisonAI Job Posting Generation\nDESCRIPTION: Main execution script that initializes PraisonAI with the YAML configuration, sets up OpenAI API key, and runs the job posting generation process.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/cookbooks/yaml/job_posting_agents.ipynb#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom praisonai import PraisonAI\nfrom google.colab import userdata\n\n# Create a PraisonAI instance with the agent_yaml content\npraisonai = PraisonAI(agent_yaml=agent_yaml, tools=[InternetSearchTool, SerperDevTool, FileReadTool])\n\n# Add OPENAI_API_KEY Secrets to Google Colab on the Left Hand Side 🔑 or Enter Manually Below\nos.environ[\"OPENAI_API_KEY\"] = userdata.get('OPENAI_API_KEY')\n\n# Run PraisonAI\nresult = praisonai.run()\n\n# Print the result\nprint(result) # 7/10\n```\n\n----------------------------------------\n\nTITLE: Creating Card Group for Troubleshooting\nDESCRIPTION: This snippet creates a card group containing two cards that display troubleshooting tips for validation errors and output formats within a React application.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/structured.mdx#2025-04-19_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n<CardGroup cols={2}>\\n  <Card title=\"Validation Errors\" icon=\"triangle-exclamation\">\\n    If model validation fails:\\n    - Check data types match model\\n    - Verify required fields\\n    - Enable verbose mode for debugging\\n  </Card>\\n\\n  <Card title=\"Output Format\" icon=\"code\">\\n    If output format is incorrect:\\n    - Verify model definition\\n    - Check output_pydantic vs output_json\\n    - Review field specifications\\n  </Card>\\n</CardGroup>\n```\n\n----------------------------------------\n\nTITLE: Documentation with Docstrings in PraisonAI\nDESCRIPTION: This snippet showcases the importance of detailed documentation, using docstrings, for tools in PraisonAI. The `analyze_text` function includes a docstring explaining the function's purpose, arguments (text, language), and return value (Dict with sentiment scores), enhancing the tool's usability and maintainability.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/concepts/tools.mdx#2025-04-19_snippet_16\n\nLANGUAGE: python\nCODE:\n```\ndef analyze_text(\n    text: str,\n    language: str = \"en\"\n) -> Dict[str, float]:\n    \"\"\"\n    Analyze text sentiment and emotions.\n    \n    Args:\n        text: Input text to analyze\n        language: ISO language code\n        \n    Returns:\n        Dict with sentiment scores\n    \"\"\"\n    pass\n```\n\n----------------------------------------\n\nTITLE: Pydantic Note for Model Accuracy\nDESCRIPTION: This snippet provides a note to users emphasizing the importance of properly defining Pydantic models to achieve optimal output structure.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/structured.mdx#2025-04-19_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n<Note>\\n  For optimal results, ensure your Pydantic models accurately represent your desired output structure.\\n</Note>\n```\n\n----------------------------------------\n\nTITLE: Defining Agent Role (Text)\nDESCRIPTION: This text snippet demonstrates a good example of defining an agent's role. It specifies the agent's expertise and area of focus, providing clear context for its tasks. The agent is defined as a financial analyst with expertise in market trends and investment strategies.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/course/agents/04-agent-instructions.mdx#2025-04-19_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nYou are a financial analyst with expertise in market trends and investment strategies.\n```\n\n----------------------------------------\n\nTITLE: Implementing Brave Search Agent with MCP in Python\nDESCRIPTION: Python code for creating an AI agent with Brave Search capabilities using the Model Context Protocol. The code initializes an agent with search instructions, configures it to use GPT-4o-mini, and connects it to the Brave Search MCP tool with the appropriate API key.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/mcp/bravesearch.mdx#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent, MCP\nimport os\n\n# Use the API key from environment or set it directly\nbrave_api_key = os.getenv(\"BRAVE_API_KEY\") or \"your_brave_api_key_here\"\n\n# Use a single string command with environment variables\nsearch_agent = Agent(\n    instructions=\"\"\"You are a helpful assistant that can search the web for information.\n    Use the available tools when relevant to answer user questions.\"\"\",\n    llm=\"gpt-4o-mini\",\n    tools=MCP(\"npx -y @modelcontextprotocol/server-brave-search\", env={\"BRAVE_API_KEY\": brave_api_key})\n)\n\nsearch_agent.start(\"Search more information about AI News\")\n```\n\n----------------------------------------\n\nTITLE: Creating Agents Configuration File in YAML\nDESCRIPTION: This YAML configuration file sets up PraisonAI agents using a sequential process approach, defining roles and tasks for searching information via YouTube and Wikipedia.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/langchain.mdx#2025-04-19_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nframework: praisonai\nprocess: sequential\nroles:\n  researcher:\n    name: SearchAgent\n    role: Research Assistant\n    goal: Search for information from multiple sources\n    backstory: I am an AI assistant that can search YouTube and Wikipedia.\n    tools:\n      - youtube_search\n      - wikipedia\n    tasks:\n      search_task:\n        name: search_task\n        description: Search for information about 'AI advancements' on both YouTube and Wikipedia\n        expected_output: Combined information from YouTube videos and Wikipedia articles\n```\n\n----------------------------------------\n\nTITLE: Initializing and Running PraisonAI Agent System\nDESCRIPTION: Sets up the PraisonAI instance with the configured YAML and tools, configures OpenAI API credentials, and executes the agent system to generate the research report.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/cookbooks/yaml/comprehensive_research_report_agents.ipynb#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom praisonai import PraisonAI\nfrom google.colab import userdata\n\n# Create a PraisonAI instance with the agent_yaml content\npraisonai = PraisonAI(agent_yaml=agent_yaml, tools=[InternetSearchTool, WebContentReaderTool])\n\n# Add OPENAI_API_KEY Secrets to Google Colab on the Left Hand Side 🔑 or Enter Manually Below\nos.environ[\"OPENAI_API_KEY\"] = userdata.get('OPENAI_API_KEY') or \"ENTER OPENAI_API_KEY HERE\"\nos.environ[\"OPENAI_MODEL_NAME\"] = \"gpt-4o-mini\"\n\n# Run PraisonAI\nresult = praisonai.run()\n\n# Print the result\nprint(result) # 1/10\n```\n\n----------------------------------------\n\nTITLE: Agent Memory Configuration in Python\nDESCRIPTION: This snippet provides Python code for configuring AI agents with memory options, specifying parameters like memory type, databases for short-term and long-term storage, and embedding usage, enhancing search and retrieval capabilities.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/concepts/memory.mdx#2025-04-19_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# Create an agent with memory configuration\nagent = Agent(\n    role=\"Research Analyst\",\n    goal=\"Research and retain information\",\n    backstory=\"Expert in research and analysis\",\n    tools=[duckduckgo],\n    verbose=True,  # Enable detailed logging\n    llm=\"gpt-4o\"  # Language model to use\n)\n\n# Create agents with memory options\nagents = PraisonAIAgents(\n    agents=[agent],\n    tasks=[task],\n    memory=True,  # Enable memory\n    memory_config={\n        \"provider\": \"rag\",  # Use RAG for semantic search\n        \"use_embedding\": True,  # Enable embeddings for better search\n        \"short_db\": \".praison/short_term.db\",  # Path for short-term memory\n        \"long_db\": \".praison/long_term.db\",    # Path for long-term memory\n        \"rag_db_path\": \".praison/chroma_db\"    # Path for vector database\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Calculation Task\nDESCRIPTION: Sets up a specific calculation task for the agent to perform.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/calculator_tools.mdx#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ncalc_task = Task(\n    description=\"Calculate the area of a circle with radius 5\",\n    expected_output=\"The area of the circle in square units\",\n    agent=calculator_agent,\n    name=\"circle_area\"\n)\n```\n\n----------------------------------------\n\nTITLE: Defining a Spider Task in Python\nDESCRIPTION: This Python code demonstrates how to define a scraping task using the `Task` class.  It highlights the configuration of the task with a description, which represents the scraping query or objective.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/spider_tools.mdx#2025-04-19_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n```python\nTask(description=\"scraping_query\")\n```\n```\n\n----------------------------------------\n\nTITLE: Creating an AI Agent with XAI Grok and Airbnb MCP Integration\nDESCRIPTION: Python code that creates an AI agent using PraisonAI's framework with XAI's Grok model and Airbnb MCP integration. The agent is configured to search for apartments on Airbnb based on user queries.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/mcp/xai.mdx#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent, MCP\n\nsearch_agent = Agent(\n    instructions=\"\"\"You help book apartments on Airbnb.\"\"\",\n    llm=\"xai/grok-2-latest\",\n    tools=MCP(\"npx -y @openbnb/mcp-server-airbnb --ignore-robots-txt\")\n)\n\nsearch_agent.start(\"MUST USE airbnb_search Tool to Search. Search for Apartments in Paris for 2 nights. 04/28 - 04/30 for 2 adults. All Your Preference\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Internet Search Tool Class\nDESCRIPTION: Creates a custom search tool class that inherits from BaseTool to perform internet searches using DuckDuckGo's search API.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/cookbooks/yaml/marketing_campaign_development_agents.ipynb#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom duckduckgo_search import DDGS\nfrom praisonai_tools import BaseTool\n\nclass InternetSearchTool(BaseTool):\n    name: str = \"InternetSearchTool\"\n    description: str = \"Search Internet for relevant information based on a query or latest news\"\n\n    def _run(self, query: str):\n        ddgs = DDGS()\n        results = ddgs.text(keywords=query, region='wt-wt', safesearch='moderate', max_results=5)\n        return results\n```\n\n----------------------------------------\n\nTITLE: Creating Multi-Agent setup with self-reflection in Python\nDESCRIPTION: This code snippet demonstrates how to create a multi-agent PraisonAI setup with self-reflection enabled using the `praisonaiagents` library.  It defines two agents (researcher and writer) with specific roles, goals, and backstories, enables self-reflection for both, creates tasks for each agent, and starts the agents sequentially.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/selfreflection.mdx#2025-04-19_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent, Task, PraisonAIAgents\n\n# Create first agent with self-reflection\nresearcher = Agent(\n    role=\"Senior Research Analyst\",\n    goal=\"Research and analyze AI developments\",\n    backstory=\"Expert analyst specializing in AI trends and impacts\",\n    self_reflect=True,\n    verbose=True\n)\n\n# Create second agent with self-reflection\nwriter = Agent(\n    role=\"Technical Writer\",\n    goal=\"Transform research into clear documentation\",\n    backstory=\"Experienced in creating technical content and documentation\",\n    self_reflect=True,\n    verbose=True\n)\n\n# Create first task\nresearch_task = Task(\n    description=\"Research and analyze recent AI developments\",\n    expected_output=\"Comprehensive analysis of AI trends\",\n    agent=researcher\n)\n\n# Create second task\ndocumentation_task = Task(\n    description=\"Create technical documentation from research findings\",\n    expected_output=\"Well-structured technical documentation\",\n    agent=writer\n)\n\n# Create and start the agents\nagents = PraisonAIAgents(\n    agents=[researcher, writer],\n    tasks=[research_task, documentation_task],\n    process=\"sequential\"\n)\n\n# Start execution\nagents.start()\n```\n\n----------------------------------------\n\nTITLE: Creating a JSON Processing Agent\nDESCRIPTION: Initialize an AI agent specialized in JSON processing with predefined tools and capabilities\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/json_tools.mdx#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\njson_agent = Agent(\n    name=\"JSONProcessor\",\n    role=\"JSON Processing Specialist\",\n    goal=\"Process JSON files efficiently and accurately.\",\n    backstory=\"Expert in JSON file manipulation and validation.\",\n    tools=[\n        read_json, write_json, merge_json,\n        validate_json, analyze_json, transform_json\n    ],\n    self_reflect=False\n)\n```\n\n----------------------------------------\n\nTITLE: Visualizing Task Relationship and Flow with Mermaid\nDESCRIPTION: This Mermaid diagram illustrates the relationship between inputs, tasks, roles, goals, and expected outputs. It provides a visual representation of how tasks operate within the PraisonAI framework.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/concepts/tasks.mdx#2025-04-19_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph LR\n    Input[Input] ---> Task\n    \n    subgraph Task\n        direction LR\n        Role[Role]\n        Goal[Goal]\n        Story[Backstory]\n        Expected[Expected Output]\n        \n        Role --> Goal\n        Goal --> Story\n        Story --> Expected\n    end\n    \n    Task ---> Output[Output]\n\n    classDef input fill:#8B0000,stroke:#7C90A0,color:#fff\n    classDef process fill:#189AB4,stroke:#7C90A0,color:#fff\n    classDef tools fill:#2E8B57,stroke:#7C90A0,color:#fff\n    classDef transparent fill:none,stroke:none\n\n    class Input,Output input\n    class Role,Goal,Story,Expected process\n    class Task transparent\n```\n\n----------------------------------------\n\nTITLE: Adding Knowledge to RAG Agents in Python\nDESCRIPTION: This Python snippet displays how to add knowledge configuration to a RAG agent while initializing it for retrieval tasks.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/rag.mdx#2025-04-19_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent\n\nconfig = {\n    \"vector_store\": {\n        \"provider\": \"chroma\",\n        \"config\": {\n            \"collection_name\": \"praison\",\n            \"path\": \".praison\",\n        }\n    }\n}\n\nagent = Agent(\n    name=\"Knowledge Agent\",\n    instructions=\"You answer questions based on the provided knowledge.\",\n    knowledge=[\"small.pdf\"], # Indexing\n    knowledge_config=config # Configuration\n)\n\nagent.start(\"What is KAG in one line?\") # Retrieval\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Configuration for Job Matching in Python\nDESCRIPTION: This YAML configuration snippet describes the roles and tasks for agents involved in matching CVs to jobs. It outlines expectations for input and output at each step of the CV reading and job matching process.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/cookbooks/yaml/job_profile_matching_agents.ipynb#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nagent_yaml = \"\"\"\nframework: \"crewai\"\ntopic: \"CV Matching to Job Opportunities\"\nroles:\n  cv_reader:\n    role: \"CV Reader\"\n    goal: |\n      Extract relevant information from the CV, such as skills, experience, and education.\n    backstory: |\n      With years of experience in HR, you excel at quickly identifying key qualifications in resumes.\n    verbose: true\n    allow_delegation: false\n    tools:\n      - \"FileReadTool\"\n    tasks:\n      read_cv_task:\n        description: |\n          Extract relevant information from the given CV. Focus on skills, experience, education, and key achievements.\n          Ensure to capture the candidate's professional summary, technical skills, work history, and educational background.\n\n          CV file: /content/cv.md\n        expected_output: |\n          A structured summary of the CV, including:\n          - Professional Summary\n          - Technical Skills\n          - Work History\n          - Education\n          - Key Achievements\n\n  matcher:\n    role: \"Matcher\"\n    goal: |\n      Match the CV to the job opportunities based on skills and experience.\n    backstory: |\n      A seasoned recruiter, you specialize in finding the perfect fit between candidates and job roles.\n    verbose: true\n    allow_delegation: false\n    tools:\n      - \"FileReadTool\"\n      - \"CSVSearchTool\"\n    tasks:\n      match_cv_task:\n        description: |\n          Match the CV to the job opportunities based on skills, experience, and key achievements.\n          Evaluate how well the candidate's profile fits each job description, focusing on the alignment of skills, work history, and key achievements with the job requirements.\n\n          Jobs CSV file: /content/jobs.csv\n          CV file: /content/cv.md\n        expected_output: |\n          A ranked list of job opportunities that best match the CV, including:\n          - Job Title\n          - Match Score (based on skills and experience)\n          - Key Matching Points\n\n  job_opportunities_parser:\n    role: \"Job Opportunities Parser\"\n    goal: |\n      Extract job descriptions from the CSV file, including job title, required skills, and responsibilities.\n    backstory: |\n      A data analyst who has transitioned into HR, you have a knack for organizing and interpreting job data.\n    verbose: true\n    allow_delegation: false\n    tools:\n      - \"CSVSearchTool\"\ndependencies: []\n\"\"\"\n\n```\n\n----------------------------------------\n\nTITLE: Example Price Comparison Implementation\nDESCRIPTION: Simplified example showing how to use the shopping agent for product price comparison across stores.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/agents/shopping.mdx#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# Example: Compare product prices\nfrom praisonaiagents import Agent, Tools\nfrom praisonaiagents.tools import duckduckgo\n\nagent = Agent(instructions=\"You are a Shopping Agent\", tools=[duckduckgo])\nagent.start(\"I want to buy iPhone 16 Pro Max, check 5 stores and give me price in table\")\n```\n\n----------------------------------------\n\nTITLE: Example Stock Data Analysis\nDESCRIPTION: Example showing how to use the Data Analyst Agent for analyzing stock data with specific analysis steps.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/agents/data-analyst.mdx#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# Example: Analyzing stock data\nagent.start(\"\"\"\n    1. Read 'stock_data.csv'\n    2. Filter data for the last 30 days\n    3. Calculate daily returns\n    4. Generate summary statistics\n    5. Export results to 'analysis_results.xlsx'\n\"\"\")\n```\n\n----------------------------------------\n\nTITLE: Adding Tools to Agents in PraisonAI\nDESCRIPTION: This snippet demonstrates how to integrate multiple tools into an agent within PraisonAI. It showcases the `Agent` class, which takes a list of tool functions (`internet_search_tool`, `file_processing_tool`, `api_integration_tool`) as input. This allows the agent to leverage various capabilities through these tools.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/concepts/tools.mdx#2025-04-19_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n# Multiple tools\nagent = Agent(\n    name=\"MultiTool Agent\",\n    tools=[\n        internet_search_tool,\n        file_processing_tool,\n        api_integration_tool\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Running the Python Agents Script\nDESCRIPTION: A bash command to execute a Python script named 'app.py', which starts the PraisonAI routing agents workflow described in the provided Python snippet.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/routing.mdx#2025-04-19_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npython app.py\n```\n\n----------------------------------------\n\nTITLE: Integrating MCP Server with PraisonAI Agent\nDESCRIPTION: Shows how to integrate a custom MCP server with a PraisonAI agent by specifying the command to run the Python script. This example demonstrates the proper way to connect the agent to the custom tools.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/mcp/custom.mdx#2025-04-19_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent, MCP\n\nagent = Agent(\n    instructions=\"Agent instructions\",\n    llm=\"gpt-4o-mini\",\n    tools=MCP(\n        command=\"python\",  # Or full path to Python\n        args=[\"path/to/your/mcp_server.py\"]  # Path to your MCP server script\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Advanced Research with Multiple Agents Implementation\nDESCRIPTION: This code shows an advanced example using multiple agents for research and analysis. It creates a researcher agent and an analysis agent, defines separate tasks for each, and then runs them sequentially using `PraisonAIAgents`. This allows for a more structured research workflow.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/wikipedia_tools.mdx#2025-04-19_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n# Create research agent\nresearcher_agent = Agent(\n    name=\"Researcher\",\n    role=\"Content Researcher\",\n    goal=\"Research topics systematically.\",\n    tools=[wiki_search, wiki_summary, wiki_page],\n    self_reflect=False\n)\n\n# Create analysis agent\nanalysis_agent = Agent(\n    name=\"Analyzer\",\n    role=\"Content Analyst\",\n    goal=\"Analyze and summarize research findings.\",\n    backstory=\"Expert in content analysis and synthesis.\",\n    tools=[wiki_summary, wiki_page],\n    self_reflect=False\n)\n\n# Define tasks\nresearch_task = Task(\n    description=\"Research technological advancements.\",\n    agent=researcher_agent,\n    name=\"tech_research\"\n)\n\nanalysis_task = Task(\n    description=\"Analyze and synthesize research findings.\",\n    agent=analysis_agent,\n    name=\"content_analysis\"\n)\n\n# Run agents\nagents = PraisonAIAgents(\n    agents=[researcher_agent, analysis_agent],\n    tasks=[research_task, analysis_task],\n    process=\"sequential\"\n)\nagents.start()\n```\n\n----------------------------------------\n\nTITLE: Creating Wikipedia Assistant Script\nDESCRIPTION: Complete Python script demonstrating the creation and usage of a Wikipedia Agent with various tools for searching, summarizing, and accessing Wikipedia content.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/agents/wikipedia.mdx#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent, Task, PraisonAIAgents\nfrom praisonaiagents.tools import (\n    wiki_search,\n    wiki_summary,\n    wiki_page,\n    wiki_random,\n    wiki_language\n)\n\n# Create Wikipedia Agent\nwiki_agent = Agent(\n    name=\"WikipediaAssistant\",\n    role=\"Wikipedia Research Specialist\",\n    goal=\"Extract and summarize Wikipedia content\",\n    instructions=\"You are a Wikipedia Agent\",\n    tools=[\n        wiki_search,\n        wiki_summary,\n        wiki_page,\n        wiki_random,\n        wiki_language\n    ],\n    self_reflect=True,\n    min_reflect=3,\n    max_reflect=5\n)\n\n# Research a topic\nresponse = wiki_agent.start(\"\"\"\n    What is the history of AI?\n    First search the history of AI\n    Read the page of the history of AI\n    Get the summary of the page\n\"\"\")\n\n# Save research results\nwith open('ai_history.md', 'w') as f:\n    f.write(response)\n```\n\n----------------------------------------\n\nTITLE: Registering Tools Using Direct Function Array in TypeScript\nDESCRIPTION: Demonstrates how to create a PraisonAI agent with tools registered directly as functions in an array. It includes helper functions for getting weather and time information that are registered directly.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/src/praisonai-ts/examples/README-tool-examples.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Agent } from 'praisonai';\n\n// Define the functions directly\nasync function getWeather(location: string) {\n  console.log(`Getting weather for ${location}...`);\n  return `${Math.floor(Math.random() * 30)}°C`;\n}\n\nasync function getTime(location: string) {\n  console.log(`Getting time for ${location}...`);\n  const now = new Date();\n  return `${now.getHours()}:${now.getMinutes()}`;\n}\n\n// Create an agent with directly registered functions\nconst agent = new Agent({ \n  instructions: `You provide the current weather and time for requested locations.`,\n  name: \"DirectFunctionAgent\",\n  // Register functions directly as an array\n  tools: [getWeather, getTime]\n});\n\n// Start the agent with a prompt that will trigger tool usage\nagent.start(\"What's the weather and time in Paris, France?\");\n```\n\n----------------------------------------\n\nTITLE: Modeling PDF-Agent Workflow with Mermaid\nDESCRIPTION: This diagram represents the workflow of interacting with PDF documents using a chat agent and vector database. It outlines the process of querying and retrieving information from documents.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/chat-with-pdf.mdx#2025-04-19_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n    PDF[PDF Document] --> PDFAgent[(\"PDF Chat Agent\")]\n    VDB[(Vector DB)] --> PDFAgent\n    PDFAgent --> Chat[Chat Interface]\n    Chat --> |Query| VDB\n    Chat --> Out[Response]\n    \n    style PDF fill:#8B0000,color:#fff\n    style PDFAgent fill:#2E8B57,color:#fff,shape:circle\n    style VDB fill:#4169E1,color:#fff,shape:cylinder\n    style Chat fill:#2E8B57,color:#fff\n    style Out fill:#8B0000,color:#fff\n```\n\n----------------------------------------\n\nTITLE: Workflow Process Implementation in PraisonAI\nDESCRIPTION: This Python code snippet shows an example of a task workflow implemented as a dictionary, which defines the structure of a workflow process in PraisonAI. It demonstrates how to define the `start_task` and `decision_task`, including conditional branching using the `conditions` key.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/concepts/process.mdx#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ntask_workflow = {\n    \"start_task\": {\n        \"next\": [\"decision_task\"],\n        \"type\": \"task\"\n    },\n    \"decision_task\": {\n        \"type\": \"decision\",\n        \"conditions\": {\n            \"success\": [\"process_task\"],\n            \"failure\": [\"error_task\"]\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with Conda\nDESCRIPTION: Commands to create a conda environment and install required packages for the stock price integration.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/mcp/stockprice.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nzsh -c \"source $(conda info --base)/etc/profile.d/conda.sh && conda create -n windsurf python=3.10 -y\"\nzsh -c \"source $(conda info --base)/etc/profile.d/conda.sh && conda activate windsurf && pip install praisonaiagents mcp yfinance\"\n```\n\n----------------------------------------\n\nTITLE: Executing PraisonAI Markdown Validation\nDESCRIPTION: Main execution code that sets up PraisonAI instance with the YAML configuration, configures OpenAI API credentials, and runs the markdown validation\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/cookbooks/yaml/markdown_validator_agents.ipynb#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom praisonai import PraisonAI\nfrom google.colab import userdata\n\n# Create a PraisonAI instance with the agent_yaml content\npraisonai = PraisonAI(agent_yaml=agent_yaml, tools=[MarkdownValidationTool])\n\n# Add OPENAI_API_KEY Secrets to Google Colab on the Left Hand Side 🔑 or Enter Manually Below\nos.environ[\"OPENAI_API_KEY\"] = userdata.get('OPENAI_API_KEY') or \"ENTER OPENAI_API_KEY HERE\"\nos.environ[\"OPENAI_MODEL_NAME\"] = \"gpt-4o-mini\"\n\n# Run PraisonAI\nresult = praisonai.run()\n\n# Print the result\nprint(result) # 2/10\n```\n\n----------------------------------------\n\nTITLE: Defining CrewAI Agent Roles and Tasks in YAML\nDESCRIPTION: Creates a YAML string defining the CrewAI framework configuration, including roles (Research Analyst, Medical Writer, Editor), their tasks, and tools for analyzing lung disease causes.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/cookbooks/yaml/youtube_search_analysis_agents.ipynb#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nagent_yaml = \"\"\"\nframework: \"crewai\"\ntopic: \"research about the causes of lung disease\"\nroles:\n  research_analyst:\n    role: \"Research Analyst\"\n    backstory: \"Experienced in analyzing scientific data related to respiratory health.\"\n    goal: \"Analyze data on lung diseases\"\n    tasks:\n      data_analysis:\n        description: \"Gather and analyze data on the causes and risk factors of lung diseases.\"\n        expected_output: \"Report detailing key findings on lung disease causes.\"\n    tools:\n      - \"YouTubeSearchTool\"\n  medical_writer:\n    role: \"Medical Writer\"\n    backstory: \"Skilled in translating complex medical information into accessible content.\"\n    goal: \"Compile comprehensive content on lung disease causes\"\n    tasks:\n      content_creation:\n        description: \"Create detailed content summarizing the research findings on lung disease causes.\"\n        expected_output: \"Document outlining various causes and risk factors of lung diseases.\"\n    tools: []\n  editor:\n    role: \"Editor\"\n    backstory: \"Proficient in editing medical content for accuracy and clarity.\"\n    goal: \"Review and refine content on lung disease causes\"\n    tasks:\n      content_review:\n        description: \"Edit and refine the compiled content on lung disease causes for accuracy and coherence.\"\n        expected_output: \"Finalized document on lung disease causes ready for dissemination.\"\n    tools: []\ndependencies: []\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Flowchart of Evaluator-Optimizer Workflow using Mermaid\nDESCRIPTION: Illustrates the feedback loop workflow where LLM-generated outputs are evaluated and optimized iteratively to enhance accuracy and relevance. Nodes represent different stages of generation and evaluation, and their transitions.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/evaluator-optimiser.mdx#2025-04-19_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n    In[In] --> Generator[LLM Call Generator] \n    Generator -->|SOLUTION| Evaluator[LLM Call Evaluator] -->|ACCEPTED| Out[Out]\n    Evaluator -->|REJECTED + FEEDBACK| Generator\n    \n    style In fill:#8B0000,color:#fff\n    style Generator fill:#2E8B57,color:#fff\n    style Evaluator fill:#2E8B57,color:#fff\n    style Out fill:#8B0000,color:#fff\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Tavily Search Tool\nDESCRIPTION: Defines a custom TavilyTool class that extends BaseTool for performing web searches using the Tavily API. Implements both synchronous and asynchronous search methods with error handling.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/cookbooks/yaml/research_report_generation_agents.ipynb#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonai_tools import BaseTool\nfrom langchain_community.tools.tavily_search import TavilySearchResults\nfrom langchain.utilities.tavily_search import TavilySearchAPIWrapper\n\n\nclass TavilyTool(BaseTool):\n    name: str = \"TavilyTool\"\n    description: str = \"Search Tavily for relevant information based on a query.\"\n\n    def _run(self, query: str):\n        api_wrapper = TavilySearchAPIWrapper()\n        try:\n            results = api_wrapper.results(query=query, max_results=5)\n            return results\n        except Exception as e:\n            return repr(e)\n\n    async def _arun(self, query: str):\n        api_wrapper = TavilySearchAPIWrapper()\n        try:\n            results = await api_wrapper.results_async(query=query, max_results=5)\n            return results\n        except Exception as e:\n            return repr(e)\n```\n\n----------------------------------------\n\nTITLE: Modeling Medicine Protocol Workflow\nDESCRIPTION: This mermaid diagram illustrates the workflow of a personalized medicine protocol generation system. It starts with input processing from genetic and patient history analyzers, followed by drug interaction analysis, protocol generation, and simulation of treatment effectiveness. Each block represents a process in the overall workflow, with connections indicating data flow. The nodes are styled to differentiate input/output and analytic components.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/examples/medicine-protocol.mdx#2025-04-19_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n    In[In] --> Genetic[Genetic Analyzer]\n    In --> History[Patient History]\n    Genetic --> Interaction[Drug Interaction]\n    History --> Interaction\n    Interaction --> Protocol[Protocol Generator]\n    Protocol --> Simulation[Effectiveness Simulator]\n    Simulation --> Out[Out]\n    \n    style In fill:#8B0000,color:#fff\n    style Genetic fill:#2E8B57,color:#fff\n    style History fill:#2E8B57,color:#fff\n    style Interaction fill:#2E8B57,color:#fff\n    style Protocol fill:#2E8B57,color:#fff\n    style Simulation fill:#2E8B57,color:#fff\n    style Out fill:#8B0000,color:#fff\n```\n\n----------------------------------------\n\nTITLE: Guiding Through Interface Setup Steps\nDESCRIPTION: Utilizes a Steps component to guide users through the process of selecting and setting up an appropriate interface for PraisonAI applications. This snippet is intended for an environment that includes Steps and Step components.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/ui/overview.mdx#2025-04-19_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Steps>\\n  <Step title=\\\"Choose Interface\\\">\\n    Select the interface that best matches your use case from the table above.\\n  </Step>\\n  <Step title=\\\"Install Dependencies\\\">\\n    Each interface has its own installation requirements. Follow the specific guide.\\n  </Step>\\n  <Step title=\\\"Create Application\\\">\\n    Use the provided examples and templates to build your application.\\n  </Step>\\n  <Step title=\\\"Customize\\\">\\n    Add features and styling to match your needs using the interface's components.\\n  </Step>\\n</Steps>\n```\n\n----------------------------------------\n\nTITLE: API Key Management with Environment Variables in PraisonAI\nDESCRIPTION: This snippet demonstrates secure API key management using environment variables in PraisonAI. The `os.getenv('API_KEY')` function retrieves the API key from the environment, and an error is raised if the API key is not found, preventing hardcoding of sensitive information.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/concepts/tools.mdx#2025-04-19_snippet_23\n\nLANGUAGE: python\nCODE:\n```\n# Use environment variables\napi_key = os.getenv('API_KEY')\nif not api_key:\n    raise ConfigError(\"API key not found\")\n```\n\n----------------------------------------\n\nTITLE: Safe Asynchronous Operation with Error Handling\nDESCRIPTION: This function demonstrates how to perform an asynchronous operation safely by wrapping it in a try-except block. It attempts to execute an asynchronous task and logs any exceptions that occur, ensuring that errors are handled gracefully.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/async.mdx#2025-04-19_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nasync def safe_async_operation():\n    try:\n        result = await agent.achat(\"Process this\")\n        return result\n    except Exception as e:\n        logging.error(f\"Error: {e}\")\n        return None\n```\n\n----------------------------------------\n\nTITLE: Initializing Agent and Building Streamlit App\nDESCRIPTION: This Python code defines a Streamlit application that utilizes the `praisonaiagents` library to create a knowledge agent. It configures the agent with ChromaDB for vector storage, Deepseek models for language generation and embeddings via Ollama, and then implements a chat interface with session state management to maintain chat history.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/ui/streamlit/deepseek-streamlit.mdx#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\nfrom praisonaiagents import Agent\n\ndef init_agent():\n    config = {\n        \"vector_store\": {\n            \"provider\": \"chroma\",\n            \"config\": {\n                \"collection_name\": \"praison\",\n                \"path\": \".praison\"\n            }\n        },\n        \"llm\": {\n            \"provider\": \"ollama\",\n            \"config\": {\n                \"model\": \"deepseek-r1:latest\",\n                \"temperature\": 0,\n                \"max_tokens\": 8000,\n                \"ollama_base_url\": \"http://localhost:11434\",\n            },\n        },\n        \"embedder\": {\n            \"provider\": \"ollama\",\n            \"config\": {\n                \"model\": \"nomic-embed-text:latest\",\n                \"ollama_base_url\": \"http://localhost:11434\",\n                \"embedding_dims\": 1536\n            },\n        },\n    }\n    \n    return Agent(\n        name=\"Knowledge Agent\",\n        instructions=\"You answer questions based on the provided knowledge.\",\n        knowledge=[\"kag-research-paper.pdf\"],\n        knowledge_config=config,\n        user_id=\"user1\",\n        llm=\"deepseek-r1\"\n    )\n\nst.title(\"Knowledge Agent Chat\")\n\nif \"agent\" not in st.session_state:\n    st.session_state.agent = init_agent()\n    st.session_state.messages = []\n\nif \"messages\" in st.session_state:\n    for message in st.session_state.messages:\n        with st.chat_message(message[\"role\"]):\n            st.markdown(message[\"content\"])\n\nprompt = st.chat_input(\"Ask a question...\")\n\nif prompt:\n    st.session_state.messages.append({\"role\": \"user\", \"content\": prompt})\n    with st.chat_message(\"user\"):\n        st.markdown(prompt)\n\n    with st.chat_message(\"assistant\"):\n        response = st.session_state.agent.start(prompt)\n        st.markdown(response)\n        st.session_state.messages.append({\"role\": \"assistant\", \"content\": response}) \n```\n\n----------------------------------------\n\nTITLE: Executing the CLI Operations Agent\nDESCRIPTION: Creates a PraisonAI instance with the configured YAML prompt and CLI executor tool, sets up environment variables for OpenAI API credentials, and runs the agent. The result is then printed to output.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/cookbooks/yaml/cli_operation_agents.ipynb#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom praisonai import PraisonAI\nfrom google.colab import userdata\n\n# Create a PraisonAI instance with the agent_yaml content\npraisonai = PraisonAI(agent_yaml=agent_yaml, tools=[CLIExecutorTool]) # Add InstagramSearchTool once scripted\n\n# Add OPENAI_API_KEY Secrets to Google Colab on the Left Hand Side 🔑 or Enter Manually Below\nos.environ[\"OPENAI_API_KEY\"] = userdata.get('OPENAI_API_KEY') or \"ENTER OPENAI_API_KEY HERE\"\nos.environ[\"OPENAI_MODEL_NAME\"] = \"gpt-4o-mini\"\n\n# Run PraisonAI\nresult = praisonai.run()\n\n# Print the result\nprint(result) # 2/10\n```\n\n----------------------------------------\n\nTITLE: Advanced YAML Processing with Multiple Agents\nDESCRIPTION: This example demonstrates advanced YAML processing using multiple agents for processing and validation. It defines two agents, a processor and a validator, each with specific roles and tools.  The agents are then assigned to tasks for processing and validating YAML data.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/yaml_tools.mdx#2025-04-19_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n# Create YAML processing agent\nprocessor_agent = Agent(\n    name=\"Processor\",\n    role=\"YAML Processor\",\n    goal=\"Process YAML files systematically.\",\n    tools=[read_yaml, write_yaml, convert_yaml],\n    self_reflect=False\n)\n\n# Create validation agent\nvalidator_agent = Agent(\n    name=\"Validator\",\n    role=\"Data Validator\",\n    goal=\"Validate YAML structure and content.\",\n    backstory=\"Expert in data validation and verification.\",\n    tools=[validate_yaml, merge_yaml],\n    self_reflect=False\n)\n\n# Define tasks\nprocessing_task = Task(\n    description=\"Process and transform YAML configurations.\",\n    agent=processor_agent,\n    name=\"yaml_processing\"\n)\n\nvalidation_task = Task(\n    description=\"Validate processed YAML data.\",\n    agent=validator_agent,\n    name=\"data_validation\"\n)\n\n# Run agents\nagents = PraisonAIAgents(\n    agents=[processor_agent, validator_agent],\n    tasks=[processing_task, validation_task],\n    process=\"sequential\"\n)\nagents.start()\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Agents\nDESCRIPTION: Defines multiple agents (Researcher and Writer) each with a role, goal, and backstory.  It also defines multiple tasks and assigns each task to a specific agent. The `PraisonAIAgents` class is used to manage and start the agents and their tasks using hierarchical process. The example uses `gpt-4o` model.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/quickstart.mdx#2025-04-19_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent, Task, PraisonAIAgents\n\n# Create multiple agents\nresearcher = Agent(\n    name=\"Researcher\",\n    role=\"Senior Research Analyst\",\n    goal=\"Uncover cutting-edge developments in AI\",\n    backstory=\"You are an expert at a technology research group\",\n    verbose=True,\n    llm=\"gpt-4o\",\n    markdown=True\n)\n\nwriter = Agent(\n    name=\"Writer\",\n    role=\"Tech Content Strategist\",\n    goal=\"Craft compelling content on tech advancements\",\n    backstory=\"You are a content strategist\",\n    llm=\"gpt-4o\",\n    markdown=True\n)\n\n# Define multiple tasks\ntask1 = Task(\n    name=\"research_task\",\n    description=\"Analyze 2024's AI advancements\",\n    expected_output=\"A detailed report\",\n    agent=researcher\n)\n\ntask2 = Task(\n    name=\"writing_task\",\n    description=\"Create a blog post about AI advancements\",\n    expected_output=\"A blog post\",\n    agent=writer\n)\n\n# Run with hierarchical process\nagents = PraisonAIAgents(\n    agents=[researcher, writer],\n    tasks=[task1, task2],\n    verbose=False,\n    process=\"hierarchical\",\n    manager_llm=\"gpt-4o\"\n)\n\nresult = agents.start()\n```\n\n----------------------------------------\n\nTITLE: Running the Gemini Airbnb Agent\nDESCRIPTION: Executes the Python script that contains the Gemini-powered Airbnb search agent. This command runs the agent which will process the natural language query and interact with Airbnb.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/mcp/gemini.mdx#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npython gemini_airbnb.py\n```\n\n----------------------------------------\n\nTITLE: Configuring PraisonAI Agents with Google Trends\nDESCRIPTION: Python implementation showing how to create and configure PraisonAI agents with Google Trends integration. Creates a research agent to analyze trending AI topics and a summarization agent to process the findings.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/external/google-trends.mdx#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom langchain_community.utilities.google_trends import GoogleTrendsAPIWrapper\nfrom praisonaiagents import Agent, PraisonAIAgents\n\nresearch_agent = Agent(\n    instructions=\"Research trending topics related to AI\",\n    tools=[GoogleTrendsAPIWrapper]\n)\n\nsummarise_agent = Agent(\n    instructions=\"Summarise findings from the research agent\",\n)\n\nagents = PraisonAIAgents(agents=[research_agent, summarise_agent])\nagents.start()\n```\n\n----------------------------------------\n\nTITLE: Creating Dockerfile for Flask Application\nDESCRIPTION: Defines a Dockerfile for running a Flask application in a development environment with Python 3.11. It installs necessary dependencies such as Flask and praisonai, and sets up Flask to run in development mode. The application is exposed on port 5555.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/developers/local-development.mdx#2025-04-19_snippet_2\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM python:3.11-slim\n\nWORKDIR /app\n\nCOPY . .\n\nRUN pip install flask praisonai==2.0.18 watchdog\n\nEXPOSE 5555\n\nENV FLASK_ENV=development\n\nCMD [\"flask\", \"run\", \"--host=0.0.0.0\"]\n```\n\n----------------------------------------\n\nTITLE: Creating Perplexity Search Agent with PraisonAI\nDESCRIPTION: Initializes an AI agent using GPT-4o-mini with Perplexity MCP search tool integration, configured with Sonar model for web search capabilities\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/mcp/perplexity.mdx#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent, MCP\nimport os\n\n# Get API key from environment variable\napi_key = os.getenv(\"PERPLEXITY_API_KEY\")\n\nagent = Agent(\n    instructions=\"You are a helpful assistant that can search the web for information. Use the available tools when relevant to answer user questions.\",\n    llm=\"gpt-4o-mini\",\n    tools=MCP(\"uvx perplexity-mcp\", \n        env={\"PERPLEXITY_API_KEY\": api_key, \"PERPLEXITY_MODEL\": \"sonar\" })\n)\n\nresult = agent.start(\"What is the latest news on AI?, Pass only the query parameter to the tool\")\n\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Single Agent Usage Example\nDESCRIPTION: This code demonstrates a usage example where a single agent is created to explain scientific concepts based on a user query.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/js/js.mdx#2025-04-19_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst { Agent } = require('praisonai');\n\n// Create a simple science explainer agent\nconst agent = new Agent({\n  instructions: \"You are a science expert who explains complex phenomena in simple terms.\",\n  name: \"ScienceExplainer\",\n  verbose: true\n});\n\n// Ask a question\nagent.start(\"Why is the sky blue?\")\n  .then(response => {\n    console.log('\\nExplanation:');\n    console.log(response);\n  })\n  .catch(error => console.error('Error:', error));\n```\n\n----------------------------------------\n\nTITLE: YAML Configuration for Memory Management Agent in Python\nDESCRIPTION: This snippet defines a YAML configuration for a memory management agent. It specifies the agent's roles, goals, tasks, and expected outputs for managing memories and conducting internet searches.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/cookbooks/yaml/memory_management_and_knowledge_retreival_agents.ipynb#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nagent_yaml = \"\"\"\nframework: \"crewai\"\ntopic: \"Memory Management and Knowledge Retrieval\"\nroles:\n  memory_agent:\n    role: \"Memory Manager\"\n    backstory: |\n      You are responsible for managing user memories efficiently, including storing, retrieving, searching, and updating memories based on user queries.\n    goal: |\n      Handle and maintain user memories by adding new memories, retrieving all stored memories, searching specific memories based on queries, updating memories, and accessing memory history for review.\n    verbose: true\n    allow_delegation: true\n    tools:\n      - \"AddMemoryTool\"\n      - \"GetAllMemoriesTool\"\n      - \"SearchMemoryTool\"\n      - \"UpdateMemoryTool\"\n      - \"MemoryHistoryTool\"\n    tasks:\n      add_memory_task:\n        description: |\n          Add a new memory for a specific user based on input text and optional metadata.\n        expected_output: |\n          Confirmation that the memory was successfully added with a summary of the input text.\n      retrieve_all_memories_task:\n        description: |\n          Retrieve all stored memories for overview and analysis.\n        expected_output: |\n          A list of all memories stored in the system.\n      search_memory_task:\n        description: |\n          Search for memories associated with a specific user and query.\n        expected_output: |\n          Relevant memories that match the query for the specified user.\n      update_memory_task:\n        description: |\n          Update an existing memory with new information, specified by memory ID.\n        expected_output: |\n          Confirmation that the memory has been updated with the new data.\n      get_memory_history_task:\n        description: |\n          Retrieve the history of changes made to a specific memory by memory ID.\n        expected_output: |\n          Detailed history of updates made to the specified memory, including timestamps and previous data versions.\n  knowledge_retriever:\n    role: \"Knowledge Retriever\"\n    backstory: |\n      You are skilled at finding and retrieving the most relevant information on the internet based on user queries.\n    goal: |\n      Perform internet searches to fetch information on specific topics or the latest news, providing summarized results as needed.\n    verbose: true\n    allow_delegation: true\n    tools:\n      - \"InternetSearchTool\"\n    tasks:\n      internet_search_task:\n        description: |\n          Conduct an internet search based on a user-specified query and retrieve the top results.\n        expected_output: |\n          A summary of the top 5 results from the internet search, including titles, links, and snippets of relevant content.\ndependencies: []\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: PraisonAI Agent Configuration (YAML)\nDESCRIPTION: This YAML configuration defines an asynchronous search agent within the PraisonAI framework. It specifies the agent's role, goal, backstory, tools, and task details, including asynchronous execution settings and expected output.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/async.mdx#2025-04-19_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\nframework: praisonai\nprocess: sequential\ntopic: async operations\nroles:\n  async_agent:\n    name: AsyncSearchAgent\n    role: Asynchronous Search Specialist\n    goal: Perform fast and efficient asynchronous searches\n    backstory: Expert in parallel search operations\n    tools:\n      - async_search_tool\n    tasks:\n      search_task:\n        description: Perform async search operations\n        expected_output: Structured search results\n        async_execution: true\n```\n\n----------------------------------------\n\nTITLE: Setting Reddit API Credentials\nDESCRIPTION: This snippet demonstrates how to set environment variables for Reddit API credentials, including the user agent, client secret, and client ID. These credentials are required to authenticate and authorize PraisonAI agents to access Reddit's search API.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/reddit.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"export REDDIT_USER_AGENT=[USER]\nexport REDDIT_CLIENT_SECRET=xxxxxx\nexport REDDIT_CLIENT_ID=xxxxxx\"\n```\n\n----------------------------------------\n\nTITLE: Creating Airbnb Search Agent with PraisonAI\nDESCRIPTION: Python code to create an AI agent that uses Ollama LLM and MCP for Airbnb searches. The agent is configured with specific instructions and tools for apartment searching.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/mcp/ollama.mdx#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent, MCP\n\nsearch_agent = Agent(\n    instructions=\"\"\"You help book apartments on Airbnb.\"\"\",\n    llm=\"ollama/llama3.2\",\n    tools=MCP(\"npx -y @openbnb/mcp-server-airbnb --ignore-robots-txt\")\n)\n\nsearch_agent.start(\"MUST USE airbnb_search Tool to Search. Search for Apartments in Paris for 2 nights. 04/28 - 04/30 for 2 adults. All Your Preference\")\n```\n\n----------------------------------------\n\nTITLE: Run Agent Locally in Python\nDESCRIPTION: This snippet demonstrates how to run an AI agent locally. It initializes an `Agent` object with a name, instructions, and LLM, then enters a loop to accept user input, process it with the agent, and print the agent's response. The loop continues until the user types 'exit'.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/course/agents/20-deploying-agents.mdx#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent\n\ndef run_local_agent():\n    agent = Agent(\n        name=\"SimpleAgent\",\n        instructions=\"You are a helpful assistant that answers questions concisely.\",\n        llm=\"gpt-4o-mini\"  # Using the specified model\n    )\n    \n    while True:\n        user_input = input(\"Ask a question (type 'exit' to quit): \")\n        if user_input.lower() == 'exit':\n            break\n        \n        response = agent.start(user_input)\n        print(\"\\nAgent response:\")\n        print(response)\n        print(\"\\n\" + \"-\"*50 + \"\\n\")\n\nif __name__ == \"__main__\":\n    run_local_agent()\n```\n\n----------------------------------------\n\nTITLE: Task Definition Example in Python\nDESCRIPTION: This Python code snippet demonstrates how to define a specific scraping task using the `Task` class. It emphasizes the importance of setting a clear objective and expected output for the scraping task, such as extracting product information from an e-commerce site and structuring it into a database.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/spider_tools.mdx#2025-04-19_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n```python\nTask(\n        description=\"Extract product prices and descriptions from e-commerce site\",\n        expected_output=\"Structured product database\"\n    )\n```\n```\n\n----------------------------------------\n\nTITLE: Error Handling Example\nDESCRIPTION: Demonstrates the error handling capabilities of the calculator tools.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/calculator_tools.mdx#2025-04-19_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n# Returns success result\n{\"result\": 8.0}\n\n# Returns error message\n{\"error\": \"Invalid expression\"}\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Agents with YAML\nDESCRIPTION: Define multiple AI agents using a YAML configuration file.  One agent researches AI in 2024 using internet search, and another summarizes the research. The YAML file should be named `agents.yaml`.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/mini.mdx#2025-04-19_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n# Create a new file `agents.yaml` with the following content:\n# Agent with Internet Search Tool\nroles:\n  research_agent\n    instructions: Research about AI 2024\n    tools:\n      - internet_search\n  summarise_agent\n    instructions: Summarise research agent's findings\n```\n\n----------------------------------------\n\nTITLE: Research and Analysis Pattern\nDESCRIPTION: A common pattern using a research agent to find information and an analyst agent to explain the findings.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/mini.mdx#2025-04-19_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n# Research agent\nresearcher = Agent(\n    instructions=\"Research latest developments in quantum computing\",\n    tools=[Tools.internet_search]\n)\n\n# Analysis agent\nanalyst = Agent(\n    instructions=\"Analyze and explain the research findings in simple terms\"\n)\n\nagents = Agents(agents=[researcher, analyst])\n```\n\n----------------------------------------\n\nTITLE: Memory Quality Control and Storage in PraisonAI\nDESCRIPTION: Advanced memory storage mechanism with quality metrics for evaluating and filtering stored information. Includes completeness, relevance, clarity, and accuracy scoring with customizable weights.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/concepts/memory.mdx#2025-04-19_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n# Example of storing with quality metrics\nagents.memory.store_long_term(\n    text=\"Important information to remember\",\n    metadata={\n        \"task_id\": \"task_123\",\n        \"agent\": \"research_agent\"\n    },\n    completeness=0.9,    # How complete is the information\n    relevance=0.85,      # How relevant to the task\n    clarity=0.95,        # How clear and well-structured\n    accuracy=0.9,        # How accurate is the information\n    weights={            # Custom weights for quality score\n        \"completeness\": 0.3,\n        \"relevance\": 0.3,\n        \"clarity\": 0.2,\n        \"accuracy\": 0.2\n    }\n)\n\n# Search with quality filter\nresults = agents.memory.search_long_term(\n    query=\"search query\",\n    min_quality=0.8,     # Only return high-quality matches\n    limit=5              # Maximum number of results\n)\n```\n\n----------------------------------------\n\nTITLE: Importing Necessary Modules for Multi-Agent System\nDESCRIPTION: This snippet imports the required modules for setting up a multi-agent system in Python. Ensure that the OPENAI API key is set in your environment for proper functionality.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/course/agents/13-building-multi-agent-system.mdx#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent, PraisonAIAgents\n\n# Make sure your API key is set in your environment:\n# export OPENAI_API_KEY=your_openai_key\n```\n\n----------------------------------------\n\nTITLE: Setting Up the Environment for Gemini Streamlit UI\nDESCRIPTION: A bash command to set the GOOGLE_API_KEY environment variable necessary for accessing Google's Gemini models. The API key can be obtained from the Google AI Studio.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/ui/streamlit/gemini-streamlit.mdx#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport GOOGLE_API_KEY=your-api-key\n```\n\n----------------------------------------\n\nTITLE: Running PraisonAI and Printing Result\nDESCRIPTION: Executes the PraisonAI run method and prints the returned result, with a commented rating indicating successful execution.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/cookbooks/yaml/recruitment_flow_agents.ipynb#2025-04-19_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nresult = praisonai.run()\n\nprint(result) # 9/10\n```\n\n----------------------------------------\n\nTITLE: Define YAML Processing Task\nDESCRIPTION: This snippet defines a task for the YAML processing agent. It creates a `Task` object that describes the operation to be performed, the expected output, the agent responsible for the task, and a name for the task.  This task focuses on parsing and validating configuration files.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/yaml_tools.mdx#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nyaml_task = Task(\n        description=\"Parse and validate configuration files.\",\n        expected_output=\"Validated and processed YAML configurations.\",\n        agent=yaml_agent,\n        name=\"yaml_processing\"\n    )\n```\n\n----------------------------------------\n\nTITLE: Importing Agents Generator Module\nDESCRIPTION: Import for framework-specific agent generation and orchestration supporting CrewAI and AG2\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/api.mdx#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonai.agents_generator import AgentsGenerator\n```\n\n----------------------------------------\n\nTITLE: Installing PraisonAI Agents Package - Bash\nDESCRIPTION: This snippet demonstrates how to install the PraisonAI Agents package using pip, a package management system for Python.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/structured.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install praisonaiagents\n```\n\n----------------------------------------\n\nTITLE: Implementing Wikipedia Search Tool\nDESCRIPTION: Custom implementation of Wikipedia search tool using Langchain wrapper, limiting results to 4 entries with 100 characters per document.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/langchain.mdx#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom langchain_community.utilities import WikipediaAPIWrapper\nclass WikipediaSearchTool(BaseTool):\n    name: str = \"WikipediaSearchTool\"\n    description: str = \"Search Wikipedia for relevant information based on a query.\"\n\n    def _run(self, query: str):\n        api_wrapper = WikipediaAPIWrapper(top_k_results=4, doc_content_chars_max=100)\n        results = api_wrapper.load(query=query)\n        return results\n```\n\n----------------------------------------\n\nTITLE: Defining CrewAI Agent Configuration\nDESCRIPTION: YAML configuration for setting up a research agent that will create a movie script about a cat on Mars. Defines the agent's backstory, goals, and tasks using the CrewAI framework.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/models/mistral.mdx#2025-04-19_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nframework: crewai\ntopic: create movie script about cat in mars\nroles:\n  researcher:\n    backstory: Skilled in finding and organizing information, with a focus on research\n      efficiency.\n    goal: Gather information about Mars and cats\n    role: Researcher\n    tasks:\n      gather_research:\n        description: Research and gather information about Mars, its environment,\n          and cats, including their behavior and characteristics.\n        expected_output: Document with research findings, including interesting facts\n          and information.\n    tools:\n    - ''\n```\n\n----------------------------------------\n\nTITLE: Example Landmark Analysis Implementation\nDESCRIPTION: Example code showing how to create and run a specific task for analyzing a landmark image.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/agents/image.mdx#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# Example: Analyzing a landmark image\nlandmark_task = Task(\n    name=\"analyze_famous_landmark\",\n    description=\"Analyze this historical landmark\",\n    expected_output=\"Architectural details and historical significance\",\n    agent=image_agent,\n    images=[\"https://example.com/landmark.jpg\"]\n)\n\n# Run single task\nagents = PraisonAIAgents(\n    agents=[image_agent],\n    tasks=[landmark_task],\n    process=\"sequential\"\n)\nagents.start()\n```\n\n----------------------------------------\n\nTITLE: Initializing and Running PraisonAI for Recruitment Workflow in Python\nDESCRIPTION: Creates a PraisonAI instance with the defined YAML configuration and custom tools. Sets up the environment for executing the automated recruitment workflow.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/cookbooks/yaml/recruitment_flow_agents.ipynb#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom praisonai import PraisonAI\nfrom google.colab import userdata\n\n# Create a PraisonAI instance with the agent_yaml content\npraisonai = PraisonAI(agent_yaml=agent_yaml, tools=[SerperDevTool, ScrapeWebsiteTool,\n                                                    FileReadTool, LinkedInTool])\n```\n\n----------------------------------------\n\nTITLE: Deploy Agent as Serverless Function in Python\nDESCRIPTION: This snippet demonstrates deploying an AI agent as an AWS Lambda function.  It initializes the `Agent` object outside the handler for reuse across invocations, gets the user query from the event body, processes it with the agent, and returns the agent's response in a JSON format. It includes error handling to manage exceptions and return appropriate status codes.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/course/agents/20-deploying-agents.mdx#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Example AWS Lambda function\nimport json\nfrom praisonaiagents import Agent\n\n# Initialize agent outside the handler for reuse across invocations\nagent = Agent(\n    name=\"ServerlessAgent\",\n    instructions=\"You provide concise, helpful responses to user questions.\",\n    llm=\"gpt-4o-mini\"  # Using the specified model\n)\n\ndef lambda_handler(event, context):\n    try:\n        # Get the user query from the event\n        body = json.loads(event.get('body', '{}'))\n        user_query = body.get('query', '')\n        \n        if not user_query:\n            return {\n                'statusCode': 400,\n                'body': json.dumps({'error': 'No query provided'})\n            }\n        \n        # Process with the agent\n        response = agent.start(user_query)\n        \n        return {\n            'statusCode': 200,\n            'body': json.dumps({'response': response})\n        }\n    except Exception as e:\n        return {\n            'statusCode': 500,\n            'body': json.dumps({'error': str(e)})\n        }\n```\n\n----------------------------------------\n\nTITLE: Agent and Task Configuration in PraisonAI Agents\nDESCRIPTION: This Python code shows examples of configuring agents and tasks within the PraisonAI Agents framework.  It demonstrates setting agent roles, goals, tools, and verbosity, as well as defining task dependencies and routing conditions.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/orchestrator-worker.mdx#2025-04-19_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n```python\n# Create an orchestrator agent\nrouter = Agent(\n    name=\"Router\",\n    role=\"Task router\",\n    goal=\"Distribute tasks based on conditions\",\n    tools=[get_time_check],  # Tools for routing decisions\n    verbose=True  # Enable detailed logging\n)\n\n# Create a worker agent\nworker = Agent(\n    name=\"Worker\",\n    role=\"Specialized worker\",\n    goal=\"Handle specific task type\",\n    instructions=\"Processing instructions\"\n)\n\n# Create routing task\nrouter_task = Task(\n    name=\"route_task\",\n    description=\"Route tasks to workers\",\n    agent=router,\n    is_start=True,\n    task_type=\"decision\",\n    condition={\n        \"1\": [\"worker1_task\"],\n        \"2\": [\"worker2_task\"]\n    }\n)\n\n# Create synthesis task\nsynthesis_task = Task(\n    name=\"synthesize\",\n    description=\"Combine worker results\",\n    agent=synthesizer,\n    context=[worker1_task, worker2_task]  # Reference worker tasks\n)\n```\n```\n\n----------------------------------------\n\nTITLE: Running PraisonAI Instance in Python\nDESCRIPTION: This snippet demonstrates how to create and run a PraisonAI instance using the previously defined agent_yaml configuration. It also handles setting up API keys for OpenAI in a Google Colab environment.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/cookbooks/yaml/memory_management_and_knowledge_retreival_agents.ipynb#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom praisonai import PraisonAI\nfrom google.colab import userdata\n\n# Create a PraisonAI instance with the agent_yaml content\npraisonai = PraisonAI(agent_yaml=agent_yaml, tools=[AddMemoryTool, GetAllMemoriesTool, SearchMemoryTool,\n                                                    UpdateMemoryTool, MemoryHistoryTool, InternetSearchTool])\n\n# Add OPENAI_API_KEY Secrets to Google Colab on the Left Hand Side 🔑 or Enter Manually Below\nos.environ[\"OPENAI_API_KEY\"] = userdata.get('OPENAI_API_KEY') or \"ENTER OPENAI_API_KEY HERE\"\nos.environ[\"OPENAI_MODEL_NAME\"] = \"gpt-4o-mini\"\n\n# Run PraisonAI\nresult = praisonai.run()\n\n# Print the result\nprint(result) # 1/10\n```\n\n----------------------------------------\n\nTITLE: Creating Agent with Custom Tool\nDESCRIPTION: Creates an agent named 'DataCollector' that utilizes the `internet_search_tool`. The agent is configured to perform internet searches and collect relevant information.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/quickstart.mdx#2025-04-19_snippet_20\n\nLANGUAGE: python\nCODE:\n```\n# 2. Agent\ndata_agent = Agent(\n    name=\"DataCollector\",\n    role=\"Search Specialist\",\n    goal=\"Perform internet searches to collect relevant information.\",\n    backstory=\"Expert in finding and organising internet data.\",\n    tools=[internet_search_tool],\n    self_reflect=False\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Agent for Nvidia Research\nDESCRIPTION: YAML configuration for a data collector agent using WikipediaSearchTool to research Nvidia's growth.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/langchain.mdx#2025-04-19_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nframework: crewai\ntopic: research about nvidia growth\nroles:\n  data_collector:\n    backstory: An experienced researcher with the ability to efficiently collect and\n      organize vast amounts of data.\n    goal: Gather information on Nvidia's growth by providing the Ticket Symbol to YahooFinanceNewsTool\n    role: Data Collector\n    tasks:\n      data_collection_task:\n        description: Collect data on Nvidia's growth from various sources such as\n          financial reports, news articles, and company announcements.\n        expected_output: A comprehensive document detailing data points on Nvidia's\n          growth over the years.\n    tools:\n    - 'WikipediaSearchTool'\n```\n\n----------------------------------------\n\nTITLE: Configuring PraisonAI Agents with YouSearchAPI\nDESCRIPTION: Example showing how to create and configure PraisonAI agents using YouSearchAPI for web searching. Creates a data gathering agent and an editor agent to process weather information for Barcelona\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/external/you-search.mdx#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent, PraisonAIAgents\nfrom langchain_community.utilities.you import YouSearchAPIWrapper\n\ndata_agent = Agent(instructions=\"Gather the weather data for Barcelona\", tools=[YouSearchAPIWrapper])\neditor_agent = Agent(instructions=\"Breifly describe the weather in Barcelona\")\n\nagents = PraisonAIAgents(agents=[data_agent, editor_agent])\nagents.start()\n```\n\n----------------------------------------\n\nTITLE: Creating Stock Price Agent\nDESCRIPTION: Python script that creates an AI agent capable of checking stock prices using the MCP tool.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/mcp/stockprice.mdx#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent, MCP\nimport os\n\n# Get the path to your Python interpreter and the server file\npython_path = os.getenv(\"PYTHON_PATH\", \"/path/to/your/python\")\nserver_path = os.getenv(\"SERVER_PATH\", \"/path/to/your/stock_price_server.py\")\n\n# Create the agent with the stock price MCP tool\nagent = Agent(\n    instructions=\"\"\"You are a helpful assistant that can check stock prices.\n    Use the available tools when relevant to answer user questions.\"\"\",\n    llm=\"gpt-4o-mini\",\n    tools=MCP(f\"{python_path} {server_path}\")\n)\n\nagent.start(\"What is the stock price of Tesla?\")\n```\n\n----------------------------------------\n\nTITLE: Setting OpenRouter API Key\nDESCRIPTION: This snippet shows how to set the OpenRouter API key as an environment variable. This key is required to authenticate requests to the OpenRouter API.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/models/openrouter.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport OPENROUTER_API_KEY=xxxxxxxxxx\n```\n\n----------------------------------------\n\nTITLE: Configuring CrewAI Agent with Groq Model\nDESCRIPTION: YAML configuration for setting up a research agent using Groq's llama3-70b model within the CrewAI framework. Defines agent roles, goals, and tasks for creating a movie script about a cat on Mars.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/models/groq.mdx#2025-04-19_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nframework: crewai\ntopic: create movie script about cat in mars\nroles:\n  researcher:\n    backstory: Skilled in finding and organizing information, with a focus on research\n      efficiency.\n    goal: Gather information about Mars and cats\n    role: Researcher\n    llm:  \n      model: \"groq/llama3-70b-8192\"\n    tasks:\n      gather_research:\n        description: Research and gather information about Mars, its environment,\n          and cats, including their behavior and characteristics.\n        expected_output: Document with research findings, including interesting facts\n          and information.\n    tools:\n    - ''\n```\n\n----------------------------------------\n\nTITLE: Implementing Bearly Code Interpreter with PraisonAI Agents\nDESCRIPTION: Python code demonstrating how to create a PraisonAI agent with Bearly Code Interpreter tool integration. Creates an agent that executes a simple loop printing numbers from 0 to 9.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/external/bearly-code-interpreter.mdx#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent, PraisonAIAgents\nfrom langchain_community.tools import BearlyInterpreterTool\n\ncoder_agent = Agent(instructions=\"\"\"for i in range(0,10):\n                                        print(f'The number is {i}')\"\"\", tools=[BearlyInterpreterTool])\n\nagents = PraisonAIAgents(agents=[coder_agent])\nagents.start()\n```\n\n----------------------------------------\n\nTITLE: Fetching and Searching 10-K Filings in Python\nDESCRIPTION: Defines a Python class `SEC10KTool` that fetches and searches 10-K form content for a specific stock ticker. It uses the `sec_api` package for querying filings and `html2text` to parse content. Dependencies include `requests`, `pydantic`, and `bs4`. Users provide a stock ticker to retrieve and search its latest 10-K filing.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/cookbooks/yaml/stock_analysis_agents.ipynb#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"\n#ToDo: Add fix for the Output Error regarding BaseModel\nimport os\nimport re\nimport requests\nimport html2text\nfrom bs4 import BeautifulSoup\nfrom typing import Any, Optional, Type\nfrom pydantic import BaseModel, Field\nfrom praisonai_tools import BaseTool\nfrom sec_api import QueryApi\nfrom embedchain.models.data_type import DataType\nfrom langchain.tools import tool\n\n\nclass FixedSEC10KToolSchema(BaseModel):\n    \"\"\"Input schema for SEC10KTool.\"\"\"\n    search_query: str = Field(\n        ..., description=\"The query string to search within the 10-K report content.\"\n    )\n\n\nclass SEC10KTool(BaseTool):\n    name: str = \"SEC10KTool\"\n    description: str = \"Fetches and searches through the latest 10-K form content for a specified stock ticker.\"\n    args_schema: Type[BaseModel] = FixedSEC10KToolSchema\n\n    def __init__(self, stock_name: Optional[str] = None, **kwargs):\n        super().__init__(**kwargs)\n        if stock_name:\n            content = self.get_10k_url_content(stock_name)\n            if content:\n                self.add(content)\n                self.description = f\"Search within {stock_name}'s latest 10-K form content.\"\n\n    def get_10k_url_content(self, stock_name: str) -> Optional[str]:\n        \"\"\"Fetches the latest 10-K form for the specified stock ticker.\"\"\"\n        try:\n            queryApi = QueryApi(api_key=os.environ['SEC_API_API_KEY'])\n            query = {\n                \"query\": {\"query_string\": {\"query\": f\"ticker:{stock_name} AND formType:\\\"10-K\\\"\"}},\n                \"from\": \"0\",\n                \"size\": \"1\",\n                \"sort\": [{\"filedAt\": {\"order\": \"desc\"}}]\n            }\n            filings = queryApi.get_filings(query)['filings']\n            if not filings:\n                return None\n\n            url = filings[0]['linkToFilingDetails']\n            headers = {\"User-Agent\": \"crewai.com\", \"Accept-Encoding\": \"gzip, deflate\"}\n            response = requests.get(url, headers=headers)\n            response.raise_for_status()\n\n            text = html2text.HTML2Text().handle(response.text)\n            return re.sub(r\"[^a-zA-Z$0-9\\s\\n]\", \"\", text)\n        except requests.exceptions.RequestException as e:\n            return f\"Failed to fetch 10-K form: {e}\"\n        except Exception as e:\n            return f\"Error processing 10-K form content: {e}\"\n\n    def add(self, *args: Any, **kwargs: Any) -> None:\n        kwargs[\"data_type\"] = DataType.TEXT\n        super().add(*args, **kwargs)\n\n    def _run(self, search_query: str) -> str:\n        \"\"\"Searches through the 10-K form content.\"\"\"\n        return super()._run(query=search_query)\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Initializing PraisonAI Agent with Gemini Model in Python\nDESCRIPTION: Creates a PraisonAI Agent using Google's Gemini model. This example shows how to use a Litellm-compatible model name and enable additional features like self-reflection and verbose output.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/models.mdx#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent\n\nagent = Agent(\n    instructions=\"You are a helpful assistant\",\n    llm=\"gemini/gemini-1.5-flash-8b\",\n    self_reflect=True,\n    verbose=True\n)\n\nagent.start(\"Why sky is Blue?\")\n```\n\n----------------------------------------\n\nTITLE: Setting up DeFi Market Making in Python\nDESCRIPTION: Python code for creating a file `app.py` that sets up the main components and control flow for DeFi market making using PraisonAI. The code defines functions for market analysis, arbitrage detection, liquidity optimization, risk assessment, and trade execution, utilizing a series of agent tasks to achieve automated trading decisions.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/examples/defi-market-maker.mdx#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent, Task, PraisonAIAgents\\nimport time\\nfrom typing import Dict, List\\nimport asyncio\\n\\ndef analyze_market_conditions():\\n    \"\"\"Simulates market analysis\"\"\"\\n    conditions = {\\n        \"liquidity_pools\": {\\n            \"pool_A\": {\\n                \"token_0\": {\"balance\": 1000000, \"price\": 1.0},\\n                \"token_1\": {\"balance\": 500000, \"price\": 2.0},\\n                \"total_value_locked\": 2000000\\n            },\\n            \"pool_B\": {\\n                \"token_0\": {\"balance\": 800000, \"price\": 1.0},\\n                \"token_1\": {\"balance\": 400000, \"price\": 2.0},\\n                \"total_value_locked\": 1600000\\n            }\\n        },\\n        \"market_volatility\": 0.15 + (time.time() % 10) / 100,\\n        \"trading_volume_24h\": 5000000 + (time.time() % 1000000),\\n        \"gas_prices\": 50 + (time.time() % 30)\\n    }\\n    return conditions\\n\\ndef detect_arbitrage():\\n    \"\"\"Simulates arbitrage opportunity detection\"\"\"\\n    opportunities = [\\n        {\\n            \"path\": [\"pool_A\", \"pool_B\"],\\n            \"profit_potential\": 0.02 + (time.time() % 5) / 100,\\n            \"required_capital\": 10000,\\n            \"execution_cost\": 50,\\n            \"risk_level\": \"low\"\\n        },\\n        {\\n            \"path\": [\"pool_B\", \"pool_C\"],\\n            \"profit_potential\": 0.03 + (time.time() % 5) / 100,\\n            \"required_capital\": 20000,\\n            \"execution_cost\": 75,\\n            \"risk_level\": \"medium\"\\n        }\\n    ]\\n    return opportunities[int(time.time()) % 2]\\n\\ndef optimize_liquidity(market_conditions: Dict):\\n    \"\"\"Optimizes liquidity distribution\"\"\"\\n    optimizations = {\\n        \"pool_A\": {\\n            \"target_ratio\": 2.0,\\n            \"suggested_actions\": [\\n                {\\n                    \"action\": \"rebalance\",\\n                    \"token\": \"token_1\",\\n                    \"amount\": 10000,\\n                    \"direction\": \"add\"\\n                }\\n            ],\\n            \"expected_improvement\": 0.05\\n        },\\n        \"pool_B\": {\\n            \"target_ratio\": 1.8,\\n            \"suggested_actions\": [\\n                {\\n                    \"action\": \"rebalance\",\\n                    \"token\": \"token_0\",\\n                    \"amount\": 5000,\\n                    \"direction\": \"remove\"\\n                }\\n            ],\\n            \"expected_improvement\": 0.03\\n        }\\n    }\\n    return optimizations\\n\\ndef assess_risks(arbitrage: Dict, optimizations: Dict):\\n    \"\"\"Assesses potential risks\"\"\"\\n    risk_assessment = {\\n        \"impermanent_loss_risk\": 0.1 + (time.time() % 5) / 100,\\n        \"smart_contract_risk\": \"low\",\\n        \"market_manipulation_risk\": \"medium\" if arbitrage[\"profit_potential\"] > 0.025 else \"low\",\\n        \"gas_price_risk\": \"high\" if arbitrage[\"execution_cost\"] > 60 else \"medium\",\\n        \"mitigation_strategies\": [\\n            \"implement_slippage_protection\",\\n            \"set_maximum_gas_price\",\\n            \"use_multiple_liquidity_sources\"\\n        ]\\n    }\\n    return risk_assessment\\n\\ndef execute_trades(arbitrage: Dict, risks: Dict):\\n    \"\"\"Simulates trade execution\"\"\"\\n    execution_results = {\\n        \"status\": \"success\" if time.time() % 2 == 0 else \"failed\",\\n        \"executed_volume\": arbitrage[\"required_capital\"] * 0.95,\\n        \"actual_profit\": arbitrage[\"profit_potential\"] * 0.9,\\n        \"gas_used\": arbitrage[\"execution_cost\"] * 1.1,\\n        \"timestamp\": time.time()\\n    }\\n    return execution_results\\n\\n# Create specialized agents\\nmarket_analyzer = Agent(\\n    name=\"Market Analyzer\",\\n    role=\"Market Analysis\",\\n    goal=\"Analyze market conditions\",\\n    instructions=\"Monitor and analyze DeFi market conditions\",\\n    tools=[analyze_market_conditions]\\n)\\n\\narbitrage_detector = Agent(\\n    name=\"Arbitrage Detector\",\\n    role=\"Arbitrage Detection\",\\n    goal=\"Detect arbitrage opportunities\",\\n    instructions=\"Identify profitable trading opportunities\",\\n    tools=[detect_arbitrage]\\n)\\n\\nliquidity_optimizer = Agent(\\n    name=\"Liquidity Optimizer\",\\n    role=\"Liquidity Optimization\",\\n    goal=\"Optimize liquidity distribution\",\\n    instructions=\"Optimize pool liquidity ratios\",\\n    tools=[optimize_liquidity]\\n)\\n\\nrisk_assessor = Agent(\\n    name=\"Risk Assessor\",\\n    role=\"Risk Assessment\",\\n    goal=\"Assess trading risks\",\\n    instructions=\"Evaluate potential risks and mitigation strategies\",\\n    tools=[assess_risks]\\n)\\n\\ntrade_executor = Agent(\\n    name=\"Trade Executor\",\\n    role=\"Trade Execution\",\\n    goal=\"Execute optimized trades\",\\n    instructions=\"Execute trades based on analysis\",\\n    tools=[execute_trades]\\n)\\n\\n# Create workflow tasks\\nmarket_task = Task(\\n    name=\"analyze_market\",\\n    description=\"Analyze market conditions\",\\n    expected_output=\"Market analysis\",\\n    agent=market_analyzer,\\n    is_start=True,\\n    next_tasks=[\"detect_arbitrage\", \"optimize_liquidity\"]\\n)\\n\\narbitrage_task = Task(\\n    name=\"detect_arbitrage\",\\n    description=\"Detect arbitrage opportunities\",\\n    expected_output=\"Arbitrage opportunities\",\\n    agent=arbitrage_detector,\\n    next_tasks=[\"assess_risks\"]\\n)\\n\\nliquidity_task = Task(\\n    name=\"optimize_liquidity\",\\n    description=\"Optimize liquidity\",\\n    expected_output=\"Liquidity optimization\",\\n    agent=liquidity_optimizer,\\n    context=[market_task],\\n    next_tasks=[\"assess_risks\"]\\n)\\n\\nrisk_task = Task(\\n    name=\"assess_risks\",\\n    description=\"Assess trading risks\",\\n    expected_output=\"Risk assessment\",\\n    agent=risk_assessor,\\n    context=[arbitrage_task, liquidity_task],\\n    next_tasks=[\"execute_trades\"]\\n)\\n\\nexecution_task = Task(\\n    name=\"execute_trades\",\\n    description=\"Execute trades\",\\n    expected_output=\"Trade execution results\",\\n    agent=trade_executor,\\n    task_type=\"decision\",\\n    condition={\\n        \"success\": [\"analyze_market\"],  # Continue monitoring if successful\\n        \"failed\": [\"optimize_liquidity\"]  # Reoptimize if failed\\n    }\\n)\\n\\n# Create workflow\\nworkflow = PraisonAIAgents(\\n    agents=[market_analyzer, arbitrage_detector, liquidity_optimizer,\\n            risk_assessor, trade_executor],\\n    tasks=[market_task, arbitrage_task, liquidity_task,\\n           risk_task, execution_task],\\n    process=\"workflow\",\\n    verbose=True\\n)\\n\\nasync def main():\\n    print(\"\\nStarting DeFi Market Making Workflow...\")\\n    print(\"=\" * 50)\\n    \\n    # Run workflow\\n    results = await workflow.astart()\\n    \\n    # Print results\\n    print(\"\\nMarket Making Results:\")\\n    print(\"=\" * 50)\\n    for task_id, result in results[\"task_results\"].items():\\n        if result:\\n            print(f\"\\nTask: {task_id}\")\\n            print(f\"Result: {result.raw}\")\\n            print(\"-\" * 50)\\n\\nif __name__ == \"__main__\":\\n    asyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Running Math Agent Python Application\nDESCRIPTION: Executes the Python script to start the AI agents. Ensure the Python file app.py exists and is correctly set up.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/mathagent.mdx#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npython app.py\n```\n\n----------------------------------------\n\nTITLE: Illustrating AI Agent Workflow with Mermaid Diagram\nDESCRIPTION: This Mermaid diagram visualizes the workflow behind the AI agent's processing of instructions and queries. It provides a visual understanding of the agent's information flow from input to output.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/course/agents/11-creating-your-first-agent.mdx#2025-04-19_snippet_7\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD\n    A[Your Instructions] --> B[Agent]\n    C[Your Query] --> B\n    B --> D[Language Model]\n    D --> E[Generated Response]\n    E --> F[Output to You]\n```\n\n----------------------------------------\n\nTITLE: Creating AI Agents and Workflow in Python\nDESCRIPTION: The Python script sets up an emergency response workflow using PraisonAI Agents. It defines agents for assessing emergencies, dispatching resources, and monitoring responses. The main function simulates an emergency incident and runs the workflow, printing results.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/examples/emergency-response.mdx#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent, Task, PraisonAIAgents\nimport time\nfrom typing import Dict, List\n\ndef assess_emergency(incident: Dict):\n    \"\"\"Simulates emergency assessment\"\"\"\n    severity_levels = [\"low\", \"medium\", \"high\", \"critical\"]\n    current_time = int(time.time())\n    severity = severity_levels[current_time % 4]\n    print(f\"Incident assessed with {severity} severity\")\n    return severity\n\ndef dispatch_resources(severity: str):\n    \"\"\"Simulates resource dispatch\"\"\"\n    resources = {\n        \"low\": [\"local_police\"],\n        \"medium\": [\"local_police\", \"ambulance\"],\n        \"high\": [\"local_police\", \"ambulance\", \"fire\"],\n        \"critical\": [\"local_police\", \"ambulance\", \"fire\", \"special_units\"]\n    }\n    dispatched = resources.get(severity, [\"local_police\"])\n    print(f\"Dispatching resources: {dispatched}\")\n    return dispatched\n\ndef monitor_response():\n    \"\"\"Simulates response monitoring\"\"\"\n    current_time = int(time.time())\n    status = \"completed\" if current_time % 3 == 0 else \"ongoing\"\n    return status\n\n# Create specialized agents\nrouter = Agent(\n    name=\"Emergency Router\",\n    role=\"Emergency Assessment\",\n    goal=\"Evaluate emergency severity and type\",\n    instructions=\"Assess incident and determine required response\",\n    tools=[assess_emergency]\n)\n\ndispatcher = Agent(\n    name=\"Resource Dispatcher\",\n    role=\"Resource Management\",\n    goal=\"Coordinate and dispatch appropriate resources\",\n    instructions=\"Deploy resources based on emergency assessment\",\n    tools=[dispatch_resources]\n)\n\nmonitor = Agent(\n    name=\"Response Monitor\",\n    role=\"Response Tracking\",\n    goal=\"Track response progress and effectiveness\",\n    instructions=\"Monitor ongoing response and provide status updates\",\n    tools=[monitor_response]\n)\n\nsynthesizer = Agent(\n    name=\"Response Coordinator\",\n    role=\"Response Synthesis\",\n    goal=\"Coordinate multi-agency response\",\n    instructions=\"Synthesize information and coordinate overall response\"\n)\n\n# Create workflow tasks\nassessment_task = Task(\n    name=\"assess_emergency\",\n    description=\"Evaluate emergency severity and type\",\n    expected_output=\"Emergency severity level\",\n    agent=router,\n    is_start=True,\n    task_type=\"decision\",\n    condition={\n        \"critical\": [\"dispatch_resources\", \"monitor_response\"],\n        \"high\": [\"dispatch_resources\", \"monitor_response\"],\n        \"medium\": [\"dispatch_resources\"],\n        \"low\": [\"dispatch_resources\"]\n    }\n)\n\ndispatch_task = Task(\n    name=\"dispatch_resources\",\n    description=\"Deploy appropriate emergency resources\",\n    expected_output=\"List of dispatched resources\",\n    agent=dispatcher,\n    next_tasks=[\"monitor_response\"]\n)\n\nmonitor_task = Task(\n    name=\"monitor_response\",\n    description=\"Track response progress\",\n    expected_output=\"Response status\",\n    agent=monitor,\n    task_type=\"decision\",\n    condition={\n        \"ongoing\": [\"coordinate_response\"],\n        \"completed\": \"\"\n    }\n)\n\ncoordinate_task = Task(\n    name=\"coordinate_response\",\n    description=\"Coordinate overall emergency response\",\n    expected_output=\"Coordinated response plan\",\n    agent=synthesizer,\n    context=[assessment_task, dispatch_task, monitor_task]\n)\n\n# Create workflow\nworkflow = PraisonAIAgents(\n    agents=[router, dispatcher, monitor, synthesizer],\n    tasks=[assessment_task, dispatch_task, monitor_task, coordinate_task],\n    process=\"workflow\",\n    verbose=True\n)\n\ndef main():\n    # Simulate emergency incident\n    incident = {\n        \"type\": \"fire\",\n        \"location\": \"123 Main St\",\n        \"reported_time\": time.time()\n    }\n    \n    print(\"\\nStarting Emergency Response Workflow...\")\n    print(\"=\" * 50)\n    \n    # Run workflow\n    results = workflow.start(initial_input=incident)\n    \n    # Print results\n    print(\"\\nEmergency Response Results:\")\n    print(\"=\" * 50)\n    for task_id, result in results[\"task_results\"].items():\n        if result:\n            print(f\"\\nTask: {task_id}\")\n            print(f\"Result: {result.raw}\")\n            print(\"-\" * 50)\n\nif __name__ == \"__main__\":\n    main()\n```\n\n----------------------------------------\n\nTITLE: Defining Financial Analysis Task\nDESCRIPTION: Create a specialized task for financial data analysis with specific description, expected output, and assigned agent. Enables targeted market research and insights generation.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/yfinance_tools.mdx#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfinance_task = Task(\n    description=\"Analyze stock performance and market trends.\",\n    expected_output=\"Detailed financial analysis with market insights.\",\n    agent=finance_agent,\n    name=\"market_analysis\"\n)\n```\n\n----------------------------------------\n\nTITLE: Excel Merging Function Implementation\nDESCRIPTION: Implementation of Excel file merging functionality with various joining options\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/excel_tools.mdx#2025-04-19_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# Merge two files on a common column\nsuccess = merge_excel(\n    files=[\"employees.xlsx\", \"salaries.xlsx\"],\n    output_file=\"merged.xlsx\",\n    how='inner',\n    on='employee_id'\n)\n\n# Advanced merge with multiple keys and custom suffixes\nsuccess = merge_excel(\n    files=[\"data2022.xlsx\", \"data2023.xlsx\"],\n    output_file=\"combined.xlsx\",\n    how='outer',\n    on=['id', 'department'],\n    suffixes=('_2022', '_2023')\n)\n```\n\n----------------------------------------\n\nTITLE: Handling Tool Dependencies in PraisonAI\nDESCRIPTION: This example illustrates how to manage tool dependencies in PraisonAI, specifically handling missing external libraries. It uses a `try...except` block to import a `required_library` and gracefully handles the `ImportError` if the library is not installed, raising an exception to indicate the missing dependency.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/concepts/tools.mdx#2025-04-19_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n# Tool with dependencies\ndef advanced_tool(data: Dict) -> Dict:\n    \"\"\"\n    Tool that depends on external libraries\n    \n    Args:\n        data (Dict): Input data\n        \n    Returns:\n        Dict: Processed data\n    \"\"\"\n    try:\n        import required_library\n        # Tool implementation\n        return processed_result\n    except ImportError:\n        raise Exception(\"Required library not installed\")\n```\n\n----------------------------------------\n\nTITLE: Agent Configuration with Model Specification\nDESCRIPTION: Enhanced YAML configuration that includes explicit model specification for the agent using GPT-4.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/models/openai.mdx#2025-04-19_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nframework: crewai\ntopic: create movie script about cat in mars\nroles:\n  researcher:\n    backstory: Skilled in finding and organizing information, with a focus on research\n      efficiency.\n    goal: Gather information about Mars and cats\n    role: Researcher\n    llm:  \n      model: \"gpt-4o\"\n    tasks:\n      gather_research:\n        description: Research and gather information about Mars, its environment,\n          and cats, including their behavior and characteristics.\n        expected_output: Document with research findings, including interesting facts\n          and information.\n    tools:\n    - ''\n```\n\n----------------------------------------\n\nTITLE: Setting Cohere API Key as Environment Variable\nDESCRIPTION: Command to set the Cohere API key as an environment variable, which is required for authenticating with Cohere's API services.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/models/cohere.mdx#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport COHERE_API_KEY=xxxxxxxxxx\n```\n\n----------------------------------------\n\nTITLE: Executing Python Script\nDESCRIPTION: This command executes the Python script `app.py`, which contains the code for the autonomous agent workflow.  It initiates the agent interactions and prints the results to the console.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/autonomous-workflow.mdx#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n\"python app.py\"\n```\n\n----------------------------------------\n\nTITLE: Run PraisonAI in auto mode\nDESCRIPTION: Runs PraisonAI in auto mode, which automatically creates and configures agents based on the task. This mode analyzes the task and sets up appropriate agents automatically.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/cli.mdx#2025-04-19_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n\"praisonai --auto \\\"Create a movie script about AI\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Creating a GitLab-Enabled AI Agent with Python\nDESCRIPTION: Python code to initialize and run a PraisonAI agent with GitLab integration using MCP. The code sets up environment variables, configures the agent with appropriate instructions, and runs a sample query to list GitLab projects.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/mcp/gitlab.mdx#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent, MCP\nimport os\n\n# Use the API token and URL from environment or set directly\ngitlab_token = os.getenv(\"GITLAB_PERSONAL_ACCESS_TOKEN\")\ngitlab_api_url = os.getenv(\"GITLAB_API_URL\", \"https://gitlab.com/api/v4\")\n\n# Use a single string command with environment variables\ngitlab_agent = Agent(\n    instructions=\"\"\"You are a helpful assistant that can interact with GitLab.\n    Use the available tools when relevant to answer user questions.\"\"\",\n    llm=\"gpt-4o-mini\",\n    tools=MCP(\"npx -y @modelcontextprotocol/server-gitlab\", \n            env={\n                \"GITLAB_PERSONAL_ACCESS_TOKEN\": gitlab_token,\n                \"GITLAB_API_URL\": gitlab_api_url\n            })\n)\n\ngitlab_agent.start(\"List my GitLab projects\")\n```\n\n----------------------------------------\n\nTITLE: Agent Configuration with PraisonAI Agents\nDESCRIPTION: This example shows how to configure an agent with a clear research focus using the PraisonAI Agents framework. The agent is given a name, role, goal, and a set of Wikipedia tools to enable efficient and accurate research.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/wikipedia_tools.mdx#2025-04-19_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nAgent(\n        name=\"WikiResearcher\",\n        role=\"Research Specialist\",\n        goal=\"Research topics accurately and efficiently\",\n        tools=[wiki_search, wiki_summary, wiki_page, wiki_random, wiki_language]\n    )\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Setting API Keys\nDESCRIPTION: This snippet installs the required Python packages (langchain-community, python-dotenv) using pip. It also sets the SERPER_API_KEY and OPENAI_API_KEY environment variables, which are necessary for authenticating with the Google Serper API and OpenAI API respectively.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/external/google-serper-search.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install langchain-community python-dotenv\nexport SERPER_API_KEY=your_api_key_here\nexport OPENAI_API_KEY=your_api_key_here\n```\n\n----------------------------------------\n\nTITLE: Install Dependencies with pip\nDESCRIPTION: This command installs the necessary packages for YAML processing with PraisonAI agents. It installs the `praisonaiagents` and `pyyaml` packages using pip.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/yaml_tools.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install praisonaiagents pyyaml\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Internet Search Tool in PraisonAI\nDESCRIPTION: Implements a custom InternetSearchTool using DuckDuckGo search API, inheriting from BaseTool to enable internet search functionality for agents\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/developers/googlecolab-tools.mdx#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom duckduckgo_search import DDGS\\nfrom praisonai_tools import BaseTool\\n\\nclass InternetSearchTool(BaseTool):\\n    name: str = \"InternetSearchTool\"\\n    description: str = \"Search Internet for relevant information based on a query or latest news\"\\n\\n    def _run(self, query: str):\\n        ddgs = DDGS()\\n        results = ddgs.text(keywords=query, region='wt-wt', safesearch='moderate', max_results=5)\\n        return results\n```\n\n----------------------------------------\n\nTITLE: Creating an Agent Integration with Custom MCP Tool\nDESCRIPTION: Example script that creates a PraisonAI agent with integrated custom MCP server for checking stock prices. It defines an agent with specific instructions and connects it to the custom MCP server.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/mcp/custom.mdx#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent, MCP\n\nagent = Agent(\n    instructions=\"\"\"You are a helpful assistant that can check stock prices and perform other tasks.\n    Use the available tools when relevant to answer user questions.\"\"\",\n    llm=\"gpt-4o-mini\",\n    tools = MCP(\"/path/to/python /path/to/app.py\")\n)\n\n# NOTE: Replace with your actual Python path and app.py file path\n\nagent.start(\"What is the stock price of Tesla?\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Content Generation Agent\nDESCRIPTION: Python script demonstrating the creation and use of a content generation agent to write a short story about a future world with advanced AI and human collaboration.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/agents/single.mdx#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Example: Create a content generation agent\nfrom praisonaiagents import Agent\n\n# Create content agent\nagent = Agent(\n    instructions=\"You are a Content Generation Agent, create engaging content\"\n)\n\n# Generate content\nresponse = agent.start(\"\"\"\n    Write a short story about:\n    - A future world\n    - With advanced AI\n    - And human collaboration\n\"\"\")\n\n# Save the story\nwith open('ai_story.txt', 'w') as f:\n    f.write(response)\n```\n\n----------------------------------------\n\nTITLE: Main Script Execution\nDESCRIPTION: Initializes PraisonAI with the agent configuration, sets up OpenAI API credentials, and executes the screenplay processing pipeline.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/cookbooks/yaml/screenplay_writer_agents.ipynb#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom praisonai import PraisonAI\nfrom google.colab import userdata\n\n# Create a PraisonAI instance with the agent_yaml content\npraisonai = PraisonAI(agent_yaml=agent_yaml, tools=[])\n\n# Add OPENAI_API_KEY Secrets to Google Colab on the Left Hand Side 🔑 or Enter Manually Below\nos.environ[\"OPENAI_API_KEY\"] = userdata.get('OPENAI_API_KEY') or \"ENTER OPENAI_API_KEY HERE\"\nos.environ[\"OPENAI_MODEL_NAME\"] = \"gpt-4o-mini\"\n\n# Run PraisonAI\nresult = praisonai.run()\n\n# Print the result\nprint(result) # 10/10\n```\n\n----------------------------------------\n\nTITLE: Running the Groq-Enabled Airbnb Search Agent\nDESCRIPTION: Executes the Python script that initializes and runs the PraisonAI agent with Groq integration for Airbnb searches.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/mcp/groq.mdx#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npython groq_airbnb.py\n```\n\n----------------------------------------\n\nTITLE: Agent Configuration YAML with Custom Tool\nDESCRIPTION: Configures an agent in YAML format and assigns the custom `internet_search_tool` to it. This allows the agent to use the custom tool during its tasks. This configuration defines that `scriptwriter` agent uses `internet_search_tool`.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/quickstart.mdx#2025-04-19_snippet_24\n\nLANGUAGE: yaml\nCODE:\n```\nframework: praisonai\ntopic: create movie script about cat in mars\nroles:\n  scriptwriter:\n    backstory: Expert in dialogue and script structure, translating concepts into\n      scripts.\n    goal: Write a movie script about a cat in Mars\n    role: Scriptwriter\n    tools:\n      - internet_search_tool # <-- Tool assigned to Agent here\n    tasks:\n      scriptwriting_task:\n        description: Turn the story concept into a production-ready movie script,\n          including dialogue and scene details.\n        expected_output: Final movie script with dialogue and scene details.\n```\n\n----------------------------------------\n\nTITLE: Flowchart of Gemini Streamlit UI\nDESCRIPTION: This mermaid diagram visually represents the flow of input through a Streamlit UI utilizing Gemini models and a vector database to provide an output. It illustrates how the components interact to form a chat-based interface.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/ui/streamlit/gemini-streamlit.mdx#2025-04-19_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n    In[Input] --> UI[(\"Streamlit UI\")]\n    VDB[(Vector DB)] --> Agent\n    Gemini[(\"Gemini\")] --> Agent\n    UI --> Agent[(\"Knowledge Agent\")]\n    Agent --> |Query| VDB\n    Agent --> Out[Output]\n    Out --> UI\n    \n    style In fill:#8B0000,color:#fff\n    style UI fill:#FF4B4B,color:#fff,shape:circle\n    style Gemini fill:#4169E1,color:#fff,shape:circle\n    style Agent fill:#2E8B57,color:#fff,shape:circle\n    style VDB fill:#4169E1,color:#fff,shape:cylinder\n    style Out fill:#8B0000,color:#fff\n```\n\n----------------------------------------\n\nTITLE: Creating and Running Multiple Agents - TypeScript\nDESCRIPTION: Illustrates the creation of multiple collaborative agents for storytelling and summarization, managing their interactions and responses.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/js/nodejs.mdx#2025-04-19_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Agent, PraisonAIAgents } from 'praisonai';\nconst storyAgent = new Agent({ instructions: 'You are a storyteller. Write a very short story (2-3 sentences) about a given topic.', name: 'StoryAgent', verbose: true });\nconst summaryAgent = new Agent({ instructions: 'You are an editor. Create a one-sentence summary of the given story.', name: 'SummaryAgent', verbose: true });\nconst agents = new PraisonAIAgents({ agents: [storyAgent, summaryAgent], tasks: ['Write a short story about a cat', '{previous_result}'], verbose: true });\nagents.start()\n  .then(results => {\n    console.log('\\nStory:', results[0]);\n    console.log('\\nSummary:', results[1]);\n  })\n  .catch(error => console.error('Error:', error));\n```\n\n----------------------------------------\n\nTITLE: Brave Search Integration without Wrapper\nDESCRIPTION: Implement a custom search function using BraveSearch tool and integrate it into a PraisonAI multi-agent workflow.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/langchain_tools.mdx#2025-04-19_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent, PraisonAIAgents\nfrom langchain_community.tools import BraveSearch\nimport os\n\ndef search_brave(query: str):\n    \"\"\"Searches using BraveSearch and returns results.\"\"\"\n    api_key = os.environ['BRAVE_SEARCH_API']\n    tool = BraveSearch.from_api_key(api_key=api_key, search_kwargs={\"count\": 3})\n    return tool.run(query)\n\ndata_agent = Agent(instructions=\"Search about AI job trends in 2025\", tools=[search_brave])\neditor_agent = Agent(instructions=\"Write a blog article\")\nagents = PraisonAIAgents(agents=[data_agent, editor_agent])\nagents.start()\n```\n\n----------------------------------------\n\nTITLE: Data Filtering Operations\nDESCRIPTION: Functions for filtering DataFrame content using query strings with SQL-like syntax.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/pandas_tools.mdx#2025-04-19_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# Basic filtering\nfiltered_df = filter_data(df, \"age > 25\")\n\n# Complex conditions\nfiltered_df = filter_data(\n    df,\n    \"age > 25 and salary >= 50000 and city == 'New York'\"\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Markdown Agent\nDESCRIPTION: Python script to create a simple Markdown agent that generates a blog post about AI.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/agents/single.mdx#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent\n\nagent = Agent(instructions=\"You are a Markdown Agent, output in markdown format\")\nagent.start(\"Write a blog post about AI\")\n```\n\n----------------------------------------\n\nTITLE: Installing PraisonAI and DuckDuckGo Search Dependencies\nDESCRIPTION: Installs required Python packages for PraisonAI and internet search functionality using pip in a quiet mode\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/developers/googlecolab-tools.mdx#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n!pip install -Uq praisonai duckduckgo_search\n```\n\n----------------------------------------\n\nTITLE: Integrating ArXiv Tools in Custom Code\nDESCRIPTION: Code example showing how to import and use ArXiv tools in custom TypeScript applications. It demonstrates creating search and download tool instances, searching for papers with a query and limit, and downloading a paper by its ID.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/src/praisonai-ts/examples/tools/README.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ArxivSearchTool, ArxivDownloadTool } from 'praisonai';\n\n// Create tool instances\nconst searchTool = new ArxivSearchTool();\nconst downloadTool = new ArxivDownloadTool();\n\n// Search for papers\nconst papers = await searchTool.execute('your search query', 5);\n\n// Download a paper\nconst pdfBuffer = await downloadTool.execute(papers[0].id);\n```\n\n----------------------------------------\n\nTITLE: Defining Search Task\nDESCRIPTION: Create a task definition for the search agent to execute\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/duckduckgo_tools.mdx#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nsearch_task = Task(\n    description=\"Search for 'AI trends 2024' and analyze the results.\",\n    expected_output=\"List of key AI trends with sources.\",\n    agent=search_agent,\n    name=\"search_trends\"\n)\n```\n\n----------------------------------------\n\nTITLE: Setting OpenAI API Key and Initializing AG2 Framework\nDESCRIPTION: Environment configuration for OpenAI authentication and initializing PraisonAI with AG2 framework for a specific task\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/framework/autogen.mdx#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport OPENAI_API_KEY=xxxxxxxxxx\n\npraisonai --framework autogen --init \"Create a Movie Script About Cat in Mars\"\n```\n\n----------------------------------------\n\nTITLE: Advanced Expression Evaluation\nDESCRIPTION: Shows complex expression evaluation including trigonometric functions and variables.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/calculator_tools.mdx#2025-04-19_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n# Basic arithmetic\nresult = evaluate(\"2 + 2 * 3\")\n\n# With mathematical functions\nresult = evaluate(\"sin(pi/2) + sqrt(16)\")\n\n# With variables\nresult = evaluate(\n    \"x^2 + y\",\n    variables={\"x\": 3, \"y\": 4}\n)\n```\n\n----------------------------------------\n\nTITLE: YAML Configuration for Logging Callbacks\nDESCRIPTION: This YAML configuration defines an AI agent focused on demonstrating logging callbacks. It specifies the agent's role, goal, tasks, and a logging callback with file output and formatting options.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/callbacks.mdx#2025-04-19_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n\"framework: praisonai\nprocess: sequential\ntopic: demonstrate logging callbacks\nroles:\n  logger:\n    backstory: Expert in logging and monitoring system interactions\n    goal: Demonstrate comprehensive logging capabilities\n    role: Logging Specialist\n    tasks:\n      logging_task:\n        description: Perform actions that trigger various log events\n        expected_output: Comprehensive log entries for different events\n    tools:\n    - logging_tool\ncallbacks:\n  logging:\n    type: sync\n    enabled: true\n    log_file: ai_interactions.log\n    format: \\\"%(asctime)s - %(levelname)s - %(message)s\\\"\n    level: INFO\n    handlers:\n      - type: file\n        filename: ai_interactions.log\n      - type: console\n    events:\n      - interaction\n      - error\n      - tool_call\"\n```\n\n----------------------------------------\n\nTITLE: Test Agent Functionality in Python\nDESCRIPTION: This snippet demonstrates testing the basic functionality of an AI agent with various inputs. It initializes an `Agent` object, defines a list of test cases, and iterates through each test case, processing it with the agent and printing the response. It also includes an assertion to validate that the response is not empty.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/course/agents/20-deploying-agents.mdx#2025-04-19_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef test_agent_functionality():\n    \"\"\"Test basic agent functionality with various inputs\"\"\"\n    agent = Agent(\n        name=\"TestAgent\",\n        instructions=\"You are a helpful assistant for testing.\",\n        llm=\"gpt-4o-mini\"  # Using the specified model\n    )\n    \n    test_cases = [\n        \"What is artificial intelligence?\",\n        \"How do I reset my password?\",\n        \"Tell me about machine learning\"\n    ]\n    \n    for test_case in test_cases:\n        print(f\"\\nTesting: {test_case}\")\n        response = agent.start(test_case)\n        print(f\"Response: {response[:100]}...\")  # Print first 100 chars\n        \n        # Add assertions or validation logic here\n        assert len(response) > 0, \"Response should not be empty\"\n```\n\n----------------------------------------\n\nTITLE: Agentic Autonomous Workflow Diagram in Mermaid\nDESCRIPTION: Mermaid diagram illustrating an autonomous agent workflow that interacts with the environment and adapts based on feedback.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/README.md#2025-04-19_snippet_16\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n    Human[Human] <--> LLM[LLM Call]\n    LLM -->|ACTION| Environment[Environment]\n    Environment -->|FEEDBACK| LLM\n    LLM --> Stop[Stop]\n    \n    style Human fill:#8B0000,color:#fff\n    style LLM fill:#2E8B57,color:#fff\n    style Environment fill:#8B0000,color:#fff\n    style Stop fill:#333,color:#fff\n```\n\n----------------------------------------\n\nTITLE: Creating Agent Configuration with YAML\nDESCRIPTION: This YAML configuration sets up a PraisonAI framework with a sequential process and roles indicating an agent capable of using both YouTube and Wikipedia tools. It specifies tasks and expected outputs for a comprehensive search activity.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/langchain_tools.mdx#2025-04-19_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nframework: praisonai\nprocess: sequential\nroles:\n  researcher:\n    name: SearchAgent\n    role: Research Assistant\n    goal: Search for information from multiple sources\n    backstory: I am an AI assistant that can search YouTube and Wikipedia.\n    tools:\n      - youtube_search\n      - wikipedia\n    tasks:\n      search_task:\n        name: search_task\n        description: Search for information about 'AI advancements' on both YouTube and Wikipedia\n        expected_output: Combined information from YouTube videos and Wikipedia articles\n```\n\n----------------------------------------\n\nTITLE: Assigning Tools to Agent Method in Python\nDESCRIPTION: Internal method to assign appropriate tools to an agent based on its role and tasks.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/api/praisonaiagents/agents/autoagents.mdx#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef _assign_tools_to_agent(self, agent_config: AgentConfig) -> List[Any]:\n    \"\"\"\n    Assign tools to an agent based on its role and tasks.\n    Returns list of assigned tools.\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Excel Processing\nDESCRIPTION: Command to install required Python packages for Excel processing functionality\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/excel_tools.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install praisonaiagents openpyxl\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Markdown Validation Tool\nDESCRIPTION: Defines a custom MarkdownValidationTool class that inherits from BaseTool to check markdown files for syntax errors using markdownlint-cli2\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/cookbooks/yaml/markdown_validator_agents.ipynb#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport subprocess\nfrom praisonai_tools import BaseTool\n\nclass MarkdownValidationTool(BaseTool):\n    name: str = \"MarkdownValidationTool\"\n    description: str = \"Checks markdown files for syntax errors and provides suggestions to fix them.\"\n\n    def _run(self, file_path: str) -> str:\n        try:\n            # Run markdownlint on the file\n            result = subprocess.run(\n                [\"markdownlint-cli2\", file_path],\n                capture_output=True,\n                text=True\n            )\n\n            # Check for errors\n            if result.returncode == 0:\n                return \"No markdown syntax issues found.\"\n            else:\n                return result.stdout\n\n        except FileNotFoundError:\n            return f\"File not found: {file_path}\"\n        except Exception as e:\n            return f\"An error occurred: {str(e)}\"\n```\n\n----------------------------------------\n\nTITLE: Securely Load API Key from Env in Python\nDESCRIPTION: This snippet demonstrates how to securely load an API key from an environment variable using the `dotenv` library. It loads the environment variables from a `.env` file, accesses the API key, and passes it to the `Agent` object during initialization. This prevents hardcoding the API key directly in the code.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/course/agents/20-deploying-agents.mdx#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom dotenv import load_dotenv\nfrom praisonaiagents import Agent\n\n# Load environment variables from .env file\nload_dotenv()\n\n# Access API key from environment variable\napi_key = os.getenv(\"OPENAI_API_KEY\")\n\n# Create agent with API key\nagent = Agent(\n    name=\"SecureAgent\",\n    instructions=\"You are a helpful assistant.\",\n    llm=\"gpt-4o-mini\",  # Using the specified model\n    api_key=api_key  # Pass API key securely\n)\n```\n\n----------------------------------------\n\nTITLE: Defining a Tool Function in Python\nDESCRIPTION: This snippet defines a simple tool function `search_tool` using DuckDuckGo. It takes a search query as input and returns a list of search results. The function includes a docstring that specifies the arguments and return values, making it understandable for both human readers and AI models.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/praisonai/ui/tools.md#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n```python\n# Example tool definition in tools.py\ndef search_tool(query: str) -> list:\n    \"\"\"\n    Perform a web search using DuckDuckGo.\n\n    Args:\n        query (str): The search query string.\n\n    Returns:\n        list: Search results with title, url, and snippet.\n    \"\"\"\n    # Function implementation...\n```\n```\n\n----------------------------------------\n\nTITLE: AG2 Auto Mode Execution\nDESCRIPTION: Automated mode for PraisonAI's AG2 framework, enabling direct task specification and agent-driven resolution\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/framework/autogen.mdx#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npraisonai --framework autogen --auto \"Create a Movie Script About Cat in Mars\"\n```\n\n----------------------------------------\n\nTITLE: Start PraisonAI Agents\nDESCRIPTION: This command executes the `app.py` script using the Python interpreter, which will initiate the PraisonAI Agents and run the defined workflow. This assumes that the OpenAI API key has been properly set as an environment variable and that the `praisonaiagents` package is installed.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/parallelisation.mdx#2025-04-19_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npython app.py\n```\n\n----------------------------------------\n\nTITLE: Processing Multi-sheet Excel Data\nDESCRIPTION: This snippet reads a multi-sheet Excel file, processes each sheet's records individually, and writes the processed data back to a new Excel file. The 'read_excel' function must support reading multiple sheets and 'write_excel' must handle the output. Key parameters include 'sheet_name' and the output filename.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/excel_tools.mdx#2025-04-19_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n# Read multiple sheets\ndata = read_excel(\n    \"company_data.xlsx\",\n    sheet_name=None  # Read all sheets\n)\n\n# Process each sheet\nprocessed = {\n    sheet: [process_record(record) for record in records]\n    for sheet, records in data.items()\n}\n\n# Write back to new file\nwrite_excel(\"processed_data.xlsx\", processed)\n```\n\n----------------------------------------\n\nTITLE: Installing PraisonAI Agents Package\nDESCRIPTION: Command to install the PraisonAI Agents package using pip.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/agents/single.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install praisonaiagents\n```\n\n----------------------------------------\n\nTITLE: Integrating PraisonAI Using Separate YAML File in Python\nDESCRIPTION: Shows how to use the PraisonAI package by specifying a pre-existing 'agents.yaml' file. The snippet defines a basic execution function that initializes and runs PraisonAI. Users must have an 'agents.yaml' file ready for this setup to work.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/developers/wrapper.mdx#2025-04-19_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfrom praisonai import PraisonAI\n\ndef basic(): # Basic Mode\n    praisonai = PraisonAI(agent_file=\"agents.yaml\")\n    praisonai.run()\n\nif __name__ == \"__main__\":\n    basic()\n```\n\n----------------------------------------\n\nTITLE: Environment Configuration for API Access\nDESCRIPTION: This snippet configures the environment for accessing PraisonAI’s APIs by setting the base URL and API key. It requires the OpenAI credentials and network access permissions.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/home.mdx#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport OPENAI_BASE_URL=http://localhost:11434/v1\n```\n\nLANGUAGE: bash\nCODE:\n```\nexport OPENAI_API_KEY=xxxxxxxxxxx\nexport OPENAI_BASE_URL=https://api.groq.com/openai/v1\n```\n\nLANGUAGE: bash\nCODE:\n```\n# Basic logging\nexport LOGLEVEL=info\n\n# Advanced logging\nexport LOGLEVEL=debug\n```\n\n----------------------------------------\n\nTITLE: Using Ollama LLM with WhatsApp in Python\nDESCRIPTION: Python code that configures a WhatsApp agent using Ollama's Llama3.2 model. This example includes explicit instructions for the agent to use the send_message tool with required parameters.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/mcp/whatsapp.mdx#2025-04-19_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent, MCP\n\nwhatsapp_agent = Agent(\n    instructions=\"Whatsapp Agent\",\n    llm=\"ollama/llama3.2\",\n    tools=MCP(\"python /path/to/whatsapp-mcp/whatsapp-mcp-server/main.py\")\n)\n\nwhatsapp_agent.start(\"Send Hello to Mervin Praison. Use send_message tool, recipient and message are the required parameters.\")\n```\n\n----------------------------------------\n\nTITLE: Installing DuckDB Dependencies with pip\nDESCRIPTION: Install required packages for DuckDB Tools including praisonaiagents and duckdb.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/duckdb_tools.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install praisonaiagents duckdb\n```\n\n----------------------------------------\n\nTITLE: Reddit Search with Single Agent in Python\nDESCRIPTION: This Python snippet demonstrates how to create and start a PraisonAI agent that uses the RedditSearchRun tool to search Reddit for information. It initializes an agent with specific instructions and tools, then starts the agent to perform a search task within the specified subreddit.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/reddit.mdx#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n\"from praisonaiagents import Agent\nfrom langchain_community.tools.reddit_search.tool import RedditSearchRun\n\nagent = Agent(name=\\\"RedditSearchAgent\\\",instructions=\\\"Search Reddit for information\\\", tools=[RedditSearchRun],)\n\nagent.start(\\\"Search Reddit for information about the latest AI advancements in subreddit all\\\")\"\n```\n\n----------------------------------------\n\nTITLE: Defining CrewAI Agent Configuration in YAML for Lung Disease Research\nDESCRIPTION: This YAML configuration defines the structure and roles for a CrewAI-based research project on lung disease causes. It specifies three roles: Research Analyst, Medical Writer, and Editor, each with their own tasks and tools.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/cookbooks/yaml/you_search_analysis_agents.ipynb#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nagent_yaml = \"\"\"\nframework: \"crewai\"\ntopic: \"research about the causes of lung disease\"\nroles:\n  research_analyst:\n    role: \"Research Analyst\"\n    backstory: \"Experienced in analyzing scientific data related to respiratory health.\"\n    goal: \"Analyze data on lung diseases\"\n    tasks:\n      data_analysis:\n        description: \"Gather and analyze data on the causes and risk factors of lung diseases.\"\n        expected_output: \"Report detailing key findings on lung disease causes.\"\n    tools:\n      - \"YouSearchTool\"\n  medical_writer:\n    role: \"Medical Writer\"\n    backstory: \"Skilled in translating complex medical information into accessible content.\"\n    goal: \"Compile comprehensive content on lung disease causes\"\n    tasks:\n      content_creation:\n        description: \"Create detailed content summarizing the research findings on lung disease causes.\"\n        expected_output: \"Document outlining various causes and risk factors of lung diseases.\"\n    tools: []\n  editor:\n    role: \"Editor\"\n    backstory: \"Proficient in editing medical content for accuracy and clarity.\"\n    goal: \"Review and refine content on lung disease causes\"\n    tasks:\n      content_review:\n        description: \"Edit and refine the compiled content on lung disease causes for accuracy and coherence.\"\n        expected_output: \"Finalized document on lung disease causes ready for dissemination.\"\n    tools: []\ndependencies: []\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Visualizing Sequential Process Workflow using Mermaid\nDESCRIPTION: Mermaid diagram showing a sequential workflow where agents execute tasks one after another in a linear fashion. This is the simplest form of task execution pattern for AI agents.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/index.mdx#2025-04-19_snippet_6\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph LR\n    Input[Input] --> A1\n    subgraph Agents\n        direction LR\n        A1[Agent 1] --> A2[Agent 2] --> A3[Agent 3]\n    end\n    A3 --> Output[Output]\n\n    classDef input fill:#8B0000,stroke:#7C90A0,color:#fff\n    classDef process fill:#189AB4,stroke:#7C90A0,color:#fff\n    classDef transparent fill:none,stroke:none\n\n    class Input,Output input\n    class A1,A2,A3 process\n    class Agents transparent\n```\n\n----------------------------------------\n\nTITLE: Single Tool Agent with Wikipedia Research\nDESCRIPTION: Create a PraisonAI agent using the WikipediaAPIWrapper to research a specific topic with predefined instructions.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/langchain_tools.mdx#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent\nfrom langchain_community.utilities import WikipediaAPIWrapper\n\nwiki_agent = Agent(\n    instructions=\"You are a wikipedia research Agent\",\n    tools=[WikipediaAPIWrapper]\n)\n\nwiki_agent.start(\"Research 'Artificial Intelligence' on Wikipedia\")\n```\n\n----------------------------------------\n\nTITLE: Disassembling Code Function - Python\nDESCRIPTION: Disassembles given Python code into its bytecode representation, which can be useful for performance analysis, debugging, and optimization tasks.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/python_tools.mdx#2025-04-19_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nbytecode = disassemble_code(\"\"\"\ndef add(a, b):\n    return a + b\n\"\"\")\n```\n\n----------------------------------------\n\nTITLE: Installing PraisonAI and DuckDuckGo Search via pip\nDESCRIPTION: This snippet demonstrates how to install the `praisonaiagents` and `duckduckgo-search` packages using pip. These packages are required to use the PraisonAI framework and the DuckDuckGo search tool. These packages must be installed before running the subsequent Python code.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/concepts/tools.mdx#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npip install praisonaiagents duckduckgo-search\n```\n\n----------------------------------------\n\nTITLE: Building Single Agent with TypeScript\nDESCRIPTION: This code snippet demonstrates how to create a single agent using the praisonai library in TypeScript. The agent is configured to provide the current weather for a given location using a custom tool 'getWeather'. Ensure the 'praisonai' package is installed. The only input to this agent is a location string, and it outputs a formatted temperature string.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/js/customtools.mdx#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Agent } from 'praisonai';\n\nasync function getWeather(location: string) {\n  console.log(`Getting weather for ${location}...`);\n  return `${Math.floor(Math.random() * 30)}°C`;\n}\n\nconst agent = new Agent({ \n  instructions: `You provide the current weather for requested locations.`,\n  name: \"DirectFunctionAgent\",\n  tools: [getWeather]\n});\n\nagent.start(\"What's the weather in Paris, France?\");\n```\n\n----------------------------------------\n\nTITLE: Running the Agent Script - Python\nDESCRIPTION: This snippet shows how to execute the Python script that contains the PraisonAI agent. This command runs the script named 'app.py'.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/introduction.mdx#2025-04-19_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npython app.py\n```\n\n----------------------------------------\n\nTITLE: Running the GitLab Agent Script\nDESCRIPTION: Command to execute the Python script that initializes and runs the GitLab-enabled AI agent.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/mcp/gitlab.mdx#2025-04-19_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npython gitlab_agent.py\n```\n\n----------------------------------------\n\nTITLE: Defining File Management Task\nDESCRIPTION: Task definition for file organization with expected outputs and agent assignment.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/file_tools.mdx#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfile_task = Task(\n    description=\"Organize files in the downloads directory by file type.\",\n    expected_output=\"Organized directory structure with categorized files.\",\n    agent=file_agent,\n    name=\"organize_files\"\n)\n```\n\n----------------------------------------\n\nTITLE: Importing Components from PraisonAI - Python\nDESCRIPTION: This snippet demonstrates how to import necessary classes and functions from the PraisonAI Agents package for XML data processing. These imports are critical for building the functionality of the agents and tasks.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/xml_tools.mdx#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent, Task, PraisonAIAgents\nfrom praisonaiagents.tools import read_xml, write_xml, transform_xml, validate_xml, xml_to_dict, dict_to_xml\n```\n\n----------------------------------------\n\nTITLE: Synchronous vs Asynchronous Execution in Python\nDESCRIPTION: These Python snippets highlight the difference between synchronous (blocking) and asynchronous (non-blocking) task execution using a hypothetical AI agent's chat method. Requires understanding of Python async/await syntax.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/async.mdx#2025-04-19_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# Synchronous execution (blocks until complete)\nresult = agent.chat(\"Hello\")\n```\n\nLANGUAGE: python\nCODE:\n```\n# Asynchronous execution (non-blocking)\nresult = await agent.achat(\"Hello\")\n```\n\n----------------------------------------\n\nTITLE: Task Definition in Python\nDESCRIPTION: This code defines a specific task for parsing and validating API response data. The task includes a description and the expected output, which is a validated data structure. This task definition is part of the PraisonAI Agents framework.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/json_tools.mdx#2025-04-19_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nTask(\n        description=\"Parse and validate API response data\",\n        expected_output=\"Validated data structure\"\n    )\n```\n\n----------------------------------------\n\nTITLE: Executing a Shell Command with Execution Function\nDESCRIPTION: Demonstrates basic and advanced usage of the execute_command function from praisonaiagents.tools to run shell commands with optional parameters such as working directory, environment, and execution timeout.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/shell_tools.mdx#2025-04-19_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# Basic command execution\nresult = execute_command(\"ls -la\")\n\n# Advanced execution\nresult = execute_command(\n    \"python script.py\",\n    cwd=\"/path/to/scripts\",\n    timeout=60,\n    env={\"PYTHONPATH\": \"/custom/path\"},\n    shell=True\n)\n\n# Returns: Dict[str, Union[str, int, bool]]\n# Example output:\n# {\n#     'stdout': 'command output...',\n#     'stderr': 'error output if any',\n#     'exit_code': 0,\n#     'success': True,\n#     'execution_time': 0.123\n# }\n```\n\n----------------------------------------\n\nTITLE: AI Agents Flow Diagram in Mermaid\nDESCRIPTION: Mermaid diagram showing the flow between AI agents, processes, and tasks.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/README.md#2025-04-19_snippet_8\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph LR\n    %% Define the main flow\n    Start([▶ Start]) --> Agent1\n    Agent1 --> Process[⚙ Process]\n    Process --> Agent2\n    Agent2 --> Output([✓ Output])\n    Process -.-> Agent1\n    \n    %% Define subgraphs for agents and their tasks\n    subgraph Agent1[ ]\n        Task1[📋 Task]\n        AgentIcon1[🤖 AI Agent]\n        Tools1[🔧 Tools]\n        \n        Task1 --- AgentIcon1\n        AgentIcon1 --- Tools1\n    end\n    \n    subgraph Agent2[ ]\n        Task2[📋 Task]\n        AgentIcon2[🤖 AI Agent]\n        Tools2[🔧 Tools]\n        \n        Task2 --- AgentIcon2\n        AgentIcon2 --- Tools2\n    end\n\n    classDef input fill:#8B0000,stroke:#7C90A0,color:#fff\n    classDef process fill:#189AB4,stroke:#7C90A0,color:#fff\n    classDef tools fill:#2E8B57,stroke:#7C90A0,color:#fff\n    classDef transparent fill:none,stroke:none\n\n    class Start,Output,Task1,Task2 input\n    class Process,AgentIcon1,AgentIcon2 process\n    class Tools1,Tools2 tools\n    class Agent1,Agent2 transparent\n```\n\n----------------------------------------\n\nTITLE: Creating Single Agent with Memory in Python\nDESCRIPTION: This Python snippet demonstrates setting up a single AI agent configured to write a blog post about AI with memory capabilities enabled. It defines agent roles and tasks and initiates the execution using PraisonAI libraries.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/concepts/memory.mdx#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents.agents.agents import Agent, Task, PraisonAIAgents\n\n# Create blog writer agent\nblog_agent = Agent(\n    role=\"Blog Writer\",\n    goal=\"Write a blog post about AI\",\n    backstory=\"Expert at writing blog posts\",\n    llm=\"gpt-4o-mini\"\n)\n\n# Create blog writing task\nblog_task = Task(\n    description=\"Write a blog post about AI trends\",\n    expected_output=\"Well-written blog post about AI trends\",\n    agent=blog_agent\n)\n\n# Create and start the agents with memory enabled\nagents = PraisonAIAgents(\n    agents=[blog_agent],\n    tasks=[blog_task],\n    memory=True\n)   \n\n# Start execution\nresult = agents.start()\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Pulling Ollama Models\nDESCRIPTION: Downloads the specified language model and embedding model from Ollama.  This command pulls the `deepseek-r1` language model and the `nomic-embed-text` embedding model, which are used for question answering and generating embeddings for the knowledge base, respectively.  The models need to be available locally for the agent to function.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/ui/streamlit/ollama-streamlit.mdx#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Large Language Model\nollama pull deepseek-r1\n\n# Embedding Model\nollama pull nomic-embed-text\n```\n\n----------------------------------------\n\nTITLE: Configuration Options for Exiting Workflow Chain\nDESCRIPTION: Multiple task configuration methods demonstrating different ways to exit a workflow based on conditions\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/promptchaining.mdx#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ntask = Task(\n    name=\"time_check\",\n    description=\"Check time and make decision\",\n    expected_output=\"Time check result\",\n    agent=agent,\n    is_start=True,\n    task_type=\"decision\",\n    next_tasks=[\"next_step\"],\n    condition={\n        \"even\": [\"next_step\"],\n        \"odd\": \"\"\n    }\n)\n```\n\nLANGUAGE: python\nCODE:\n```\ntask = Task(\n    name=\"time_check\",\n    description=\"Check time and make decision\",\n    expected_output=\"Time check result\",\n    agent=agent,\n    is_start=True,\n    task_type=\"decision\",\n    next_tasks=[\"next_step\"],\n    condition={\n        \"even\": [\"next_step\"],\n        \"odd\": \"exit\"\n    }\n)\n```\n\nLANGUAGE: python\nCODE:\n```\ntask = Task(\n    name=\"time_check\",\n    description=\"Check time and make decision\",\n    expected_output=\"Time check result\",\n    agent=agent,\n    is_start=True,\n    task_type=\"decision\",\n    next_tasks=[\"next_step\"],\n    condition={\n        \"even\": [\"next_step\"],\n        \"odd\": [\"exit\"]\n    }\n)\n```\n\nLANGUAGE: python\nCODE:\n```\ntask = Task(\n    name=\"time_check\",\n    description=\"Check time and make decision\",\n    expected_output=\"Time check result\",\n    agent=agent,\n    is_start=True,\n    task_type=\"decision\",\n    next_tasks=[\"next_step\"],\n    condition={\n        \"even\": [\"next_step\"],\n        \"odd\": [\"\"]\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Defining an XML Processing Task - Python\nDESCRIPTION: This snippet defines a Task associated with the XML processing agent. It specifies the task's description, expected output, and the agent responsible for executing it, which is foundational for workflow management.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/xml_tools.mdx#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nxml_task = Task(\n    description=\"Parse and validate XML configuration files.\",\n    expected_output=\"Validated and processed XML data.\",\n    agent=xml_agent,\n    name=\"xml_processing\"\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables\nDESCRIPTION: Configures the environment variables required for the application to connect to the Ollama server. Sets `OPENAI_BASE_URL` to the address where the Ollama server is running and `OPENAI_API_KEY` to a placeholder value as it's not required for local Ollama instances. These variables allow the application to find and authenticate with the Ollama service.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/ui/streamlit/ollama-streamlit.mdx#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport OPENAI_BASE_URL=http://localhost:11434/v1\nexport OPENAI_API_KEY=fake-key\n```\n\n----------------------------------------\n\nTITLE: Installing PraisonAI with Yarn\nDESCRIPTION: Installs the PraisonAI framework using Yarn. This command should be run in a terminal in the project's directory. No input parameters are required.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/js/typescript-async.mdx#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add praisonai\n```\n\n----------------------------------------\n\nTITLE: Getting Stock Price with Python\nDESCRIPTION: This snippet defines a tool for retrieving the current stock price using the yfinance library. It specifies the expected parameters and implements the functionality to fetch and return the stock price for a given ticker symbol.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/call.mdx#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport yfinance as yf\n\n# Get Stock Price definition\nget_stock_price_def = {\n    \"name\": \"get_stock_price\",\n    \"description\": \"Get the current stock price for a given ticker symbol\",\n    \"parameters\": {\n        \"type\": \"object\", \n        \"properties\": {\n            \"ticker_symbol\": {\n                \"type\": \"string\", \n                \"description\": \"The ticker symbol of the stock (e.g., AAPL, GOOGL)\"\n            }\n        }, \n        \"required\": [\"ticker_symbol\"]\n    }\n}\n\n# Get Stock Price function / Tool\nasync def get_stock_price_handler(ticker_symbol):\n    try:\n        stock = yf.Ticker(ticker_symbol)\n        hist = stock.history(period=\"1d\")\n        if hist.empty:\n            return {\"error\": f\"No data found for ticker {ticker_symbol}\"}\n        current_price = hist['Close'].iloc[-1]  # Using -1 is safer than 0\n        return {\"price\": str(current_price)}\n    except Exception as e:\n        return {\"error\": str(e)}\n\n\nget_stock_price = (get_stock_price_def, get_stock_price_handler)\ntools = [\n    get_stock_price\n]\n```\n\n----------------------------------------\n\nTITLE: Good Agent Instructions\nDESCRIPTION: Demonstrates well defined instructions for an agent to research and analyze the latest AI developments in 2024. Clear instructions help the agent to perform more effectively.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/mini.mdx#2025-04-19_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n# Good\nAgent(instructions=\"Research and analyze the latest AI developments in 2024\")\n```\n\n----------------------------------------\n\nTITLE: Support Ticket Creation Agent in Python\nDESCRIPTION: Develops an agent specialized in gathering and structuring customer support ticket information, collecting key details like contact information, issue description, and technical context.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/course/agents/18-customer-support-agents.mdx#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nticket_agent = Agent(\n    name=\"TicketCreationAgent\",\n    instructions=\"\"\"\n    You are a support ticket creation specialist who gathers the necessary information to create support tickets.\n    \n    When creating a ticket:\n    1. Collect the customer's name and contact information\n    2. Identify the category of the issue\n    3. Gather a detailed description of the problem\n    4. Determine the severity level\n    5. Collect relevant technical details (device, software version, etc.)\n    6. Organize all information in a structured ticket format\n    \n    Present the final ticket in a clearly formatted structure.\n    \"\"\"\n)\n\n# Use the ticket creation agent\nticket = ticket_agent.start(\n    \"\"\"\n    Create a support ticket for the following issue:\n    \n    Customer: Jane Smith\n    Email: jane.smith@example.com\n    Issue: Cannot access premium features after payment\n    Details: Completed payment yesterday, received confirmation email, but premium features are still locked in the app\n    Using: iPhone 13, app version 3.2.1\n    \"\"\"\n)\nprint(ticket)\n```\n\n----------------------------------------\n\nTITLE: Writing CSV Files\nDESCRIPTION: Functions for writing DataFrames to CSV files with formatting options.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/pandas_tools.mdx#2025-04-19_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# Basic usage\nsuccess = write_csv(df, \"output.csv\")\n\n# With formatting options\nsuccess = write_csv(\n    df,\n    \"output.csv\",\n    index=False,\n    encoding=\"utf-8\",\n    sep=\",\",\n    date_format=\"%Y-%m-%d\"\n)\n```\n\n----------------------------------------\n\nTITLE: Installing PraisonAI Agents Package with pip\nDESCRIPTION: This command installs the PraisonAI Agents package using pip, which is necessary for using the agent-based functionalities described in the documentation. It's a prerequisite for running the provided code examples.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/selfreflection.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install praisonaiagents\n```\n\n----------------------------------------\n\nTITLE: Using Generators for Efficient Data Processing\nDESCRIPTION: Demonstrates the use of generators for handling large datasets efficiently. Generators process data in chunks, reducing memory usage for large-scale operations.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/tools.mdx#2025-04-19_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n# Use generators for large datasets\ndef process_large_data():\n    for chunk in data_generator():\n        yield process_chunk(chunk)\n```\n\n----------------------------------------\n\nTITLE: Starting Agents with Custom Tool\nDESCRIPTION: Starts the PraisonAI agents, including the agent with the custom internet search tool, using sequential process.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/quickstart.mdx#2025-04-19_snippet_22\n\nLANGUAGE: python\nCODE:\n```\n# 4. Start Agents\nagents = PraisonAIAgents(\n    agents=[data_agent],\n    tasks=[collect_task],\n    process=\"sequential\"\n)\n\nagents.start()\n```\n\n----------------------------------------\n\nTITLE: Caching with Memoization in PraisonAI\nDESCRIPTION: This example shows how to implement caching for frequently accessed data using memoization in PraisonAI. The `@cache.memoize` decorator with a specified timeout (`timeout=300`) caches the results of the `expensive_operation` function, reducing the need to recompute the same results within the timeout period.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/concepts/tools.mdx#2025-04-19_snippet_19\n\nLANGUAGE: python\nCODE:\n```\n@cache.memoize(timeout=300)\ndef expensive_operation(data: str) -> Dict:\n    return process_expensive(data)\n```\n\n----------------------------------------\n\nTITLE: Installing PraisonAI Agents\nDESCRIPTION: This bash command installs the PraisonAI agents package, which is required for setting up AI agents that handle genetic analysis, patient history evaluation, drug interaction analysis, protocol generation, and simulation tasks. This package is a prerequisite for running the provided Python script for personalized medicine protocol generation.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/examples/medicine-protocol.mdx#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install praisonaiagents\n```\n\n----------------------------------------\n\nTITLE: Creating and Running AI Agents with PraisonAIAgents in Python\nDESCRIPTION: Demonstrates creating and executing AI agents for generating and evaluating solutions using the PraisonAIAgents library. It includes setting up agents, tasks, and workflow for the optimization process.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/evaluator-optimiser.mdx#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent, Task, PraisonAIAgents\n\n# Create generator and evaluator agents\ngenerator = Agent(\n    name=\"Generator\",\n    role=\"Solution generator\",\n    goal=\"Generate initial solutions and incorporate feedback\",\n    instructions=(\n        \"1. Look at the context from previous tasks.\\n\"\n        \"2. If you see that you have already produced 2 points, then add another 2 new points \"\n        \"   so that the total becomes 10.\\n\"\n        \"3. Otherwise, just produce the first 2 points.\\n\"\n        \"4. Return only the final list of points, with no extra explanation.\"\n    )\n)\n\nevaluator = Agent(\n    name=\"Evaluator\",\n    role=\"Solution evaluator\",\n    goal=\"Evaluate solutions and provide improvement feedback\",\n    instructions=(\n        \"1. Count how many lines in the response start with a number and a period (like '1. ' or '2. ').\\n\"\n        \"2. If there are 10 or more, respond with 'done'.\\n\"\n        \"3. Otherwise, respond with 'more'.\\n\"\n        \"4. Return only the single word: 'done' or 'more'.\"\n    )\n)\n\n# Create tasks for the feedback loop\ngenerate_task = Task(\n    name=\"generate\",\n    description=\"Write 2 points about AI incuding if anything exiting from previous points\",\n    expected_output=\"2 points\",\n    agent=generator,\n    is_start=True,\n    task_type=\"decision\",\n    next_tasks=[\"evaluate\"]\n)\n\nevaluate_task = Task(\n    name=\"evaluate\",\n    description=\"Check if there are 10 points about AI\",\n    expected_output=\"more or done\",\n    agent=evaluator,\n    next_tasks=[\"generate\"],\n    context=[generate_task],\n    task_type=\"decision\",\n    condition={\n        \"more\": [\"generate\"],  # Continue to generate\n        \"done\": [\"\"]  # Exit when optimization complete\n    }\n)\n\n# Create workflow manager\nworkflow = PraisonAIAgents(\n    agents=[generator, evaluator],\n    tasks=[generate_task, evaluate_task],\n    process=\"workflow\",\n    verbose=True\n)\n\n# Run optimization workflow\nresults = workflow.start()\n\n# Print results\nprint(\"\\nEvaluator-Optimizer Results:\")\nfor task_id, result in results[\"task_results\"].items():\n    if result:\n        print(f\"Task {task_id}: {result.raw}\")\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Internet Search Tool with DuckDuckGo in Python\nDESCRIPTION: This snippet defines a function `internet_search_tool` that uses the DuckDuckGo search engine to perform internet searches based on a given query. It retrieves the title, URL, and snippet from the search results and returns them as a list of dictionaries. This tool can be used by AI agents to gather information from the internet.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/concepts/tools.mdx#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom duckduckgo_search import DDGS\nfrom typing import List, Dict\n\n# Tool Implementation\ndef internet_search_tool(query: str) -> List[Dict]:\n    \"\"\"\n    Perform Internet Search using DuckDuckGo\n    \n    Args:\n        query (str): The search query string\n        \n    Returns:\n        List[Dict]: List of search results containing title, URL, and snippet\n    \"\"\"\n    results = []\n    ddgs = DDGS()\n    for result in ddgs.text(keywords=query, max_results=5):\n        results.append({\n            \"title\": result.get(\"title\", \"\"),\n            \"url\": result.get(\"href\", \"\"),\n            \"snippet\": result.get(\"body\", \"\")\n        })\n    return results\n```\n\n----------------------------------------\n\nTITLE: Starting Repetitive Agents - Bash\nDESCRIPTION: This command runs the `repetitive_agent.py` script in the terminal to initiate the agent workflow defined in the Python code snippet.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/repetitive.mdx#2025-04-19_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npython repetitive_agent.py\n```\n\n----------------------------------------\n\nTITLE: Information Processing Pattern\nDESCRIPTION: A pattern using a collector agent to gather information, a summarizer to condense the information, and a writer to create a report.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/mini.mdx#2025-04-19_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n# Data collector\ncollector = Agent(\n    instructions=\"Collect information about renewable energy\",\n    tools=[Tools.internet_search]\n)\n\n# Summarizer\nsummarizer = Agent(\n    instructions=\"Create a concise summary of the collected information\"\n)\n\n# Report writer\nwriter = Agent(\n    instructions=\"Write a detailed report based on the summary\"\n)\n\nagents = Agents(agents=[collector, summarizer, writer])\n```\n\n----------------------------------------\n\nTITLE: Setting Up OpenAI API Key in Python\nDESCRIPTION: This snippet sets environment variables for OpenAI API credentials, utilizing either a pre-existing user key or a placeholder if no key is provided. Both API key and model name are configured for accessing OpenAI's services.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/cookbooks/yaml/stock_analysis_agents.ipynb#2025-04-19_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\n# Add OPENAI_API_KEY Secrets to Google Colab on the Left Hand Side 🔑 or Enter Manually Below\nos.environ[\"OPENAI_API_KEY\"] = userdata.get('OPENAI_API_KEY') or \"ENTER OPENAI_API_KEY HERE\"\nos.environ[\"OPENAI_MODEL_NAME\"] = \"gpt-4o-mini\"\n```\n\n----------------------------------------\n\nTITLE: Starting the Agents Script in Python\nDESCRIPTION: Command to execute the Python script that initializes and runs the agents defined in 'app.py'. Ensure that all dependencies are installed and the API key is set.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/multimodal.mdx#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npython app.py\n```\n\n----------------------------------------\n\nTITLE: Defining HR Agents Configuration with YAML\nDESCRIPTION: Creates a YAML configuration defining two AI agents for HR tasks: email follow-up and candidate evaluation, with specific roles, goals, and task descriptions\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/cookbooks/yaml/job_candidate_evaluation.ipynb#2025-04-19_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nagent_yaml = \"\"\"\nframework: \"crewai\"\ntopic: \"Candidate Evaluation and Follow-up Process\"\nroles:\n  email_followup_agent:\n    role: \"HR Coordinator\"\n    backstory: |\n      An HR professional named Sarah at CrewAI with excellent communication skills, dedicated to crafting personalized, thoughtful emails for job candidates.\n    goal: |\n      Compose personalized follow-up emails based on the candidate's bio and whether they are being pursued for the job, maintaining a positive and professional tone.\n    verbose: true\n    allow_delegation: false\n    tasks:\n      send_followup_email:\n        description: |\n          Compose personalized follow-up emails for candidates based on their bio and job progress status.\n          If the candidate is being pursued, request their availability for a Zoom call; otherwise, send a polite rejection email.\n        expected_output: |\n          A respectful, personalized email inviting the candidate for a Zoom call or politely declining their application.\n  hr_evaluation_agent:\n    role: \"Senior HR Evaluation Expert\"\n    backstory: |\n      An experienced HR expert known for effectively assessing candidate profiles, scoring them based on skills, experience, and alignment with the job description.\n    goal: |\n      Evaluate candidates' qualifications against the job description, providing detailed reasoning for each score.\n    verbose: true\n    allow_delegation: false\n    tasks:\n      evaluate_candidate:\n        description: |\n          Evaluate a candidate's bio against the job description, considering skill alignment, experience, cultural fit, and growth potential.\n        expected_output: |\n          A specific score (1 to 100) and detailed reasoning covering the candidate's skill match, experience, cultural fit, and growth potential.\ndependencies: []\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Installing PraisonAI Agents Package\nDESCRIPTION: This command shows how to install the `praisonaiagents` Python package using pip. This package is required to run the research assistant workflow described in the document.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/examples/research-assistant.mdx#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n```bash\npip install praisonaiagents\n```\n```\n\n----------------------------------------\n\nTITLE: Starting YAML Configured Agents - Bash\nDESCRIPTION: This command demonstrates how to run the agents with the configuration specified in 'agents.yaml'.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/codeagent.mdx#2025-04-19_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npraisonai agents.yaml\n```\n\n----------------------------------------\n\nTITLE: Flowchart Representation of Reasoning Agents using Mermaid\nDESCRIPTION: This code snippet visualizes the flow of reasoning agents through a flowchart using Mermaid syntax. It demonstrates the process of an AI agent's decision-making steps from input to action output.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/reasoning.mdx#2025-04-19_snippet_0\n\nLANGUAGE: Mermaid\nCODE:\n```\nflowchart LR\n    In[In] --> Agent[AI Agent]\n    Agent --> Think[Think]\n    Think --> Decide[Decide]\n    Decide --> Act[Act]\n    Act --> Out[Out]\n    \n    style In fill:#8B0000,color:#fff\n    style Agent fill:#2E8B57,color:#fff\n    style Think fill:#2E8B57,color:#fff\n    style Decide fill:#2E8B57,color:#fff\n    style Act fill:#2E8B57,color:#fff\n    style Out fill:#8B0000,color:#fff\n```\n\n----------------------------------------\n\nTITLE: Installing PraisonAI and LangChain Dependencies\nDESCRIPTION: Install required packages for PraisonAI agents and LangChain community tools, including Wikipedia and YouTube search utilities.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/langchain_tools.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install praisonaiagents langchain-community wikipedia youtube-search\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Python MCP Client\nDESCRIPTION: This command installs the required packages for the Python MCP client implementation. It includes the praisonaiagents package for AI agent capabilities and the mcp package for MCP protocol support.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/mcp/custom-python-client.mdx#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install praisonaiagents mcp\n```\n\n----------------------------------------\n\nTITLE: Defining File Organization Task in Python\nDESCRIPTION: Creates a task with a specific description for cleaning up and organizing files in a downloads folder, specifying the expected output\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/file_tools.mdx#2025-04-19_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nTask(\n    description=\"Clean up downloads folder and organize by file type\",\n    expected_output=\"Organized directory structure\"\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Trip Planning Agents using YAML\nDESCRIPTION: YAML configuration defining three AI agents (city selection expert, local expert, and travel concierge) with their roles, goals, and tasks for trip planning.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/cookbooks/yaml/trip_planner_agents.ipynb#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nagent_yaml = \"\"\"\nframework: \"crewai\"\ntopic: \"Trip Planning and Itinerary Development\"\nroles:\n  city_selection_expert:\n    role: \"City Selection Expert\"\n    backstory: |\n      An expert in analyzing travel data to pick ideal destinations.\n    goal: |\n      Select the best city based on weather, seasonal events, and travel costs.\n    verbose: true\n    allow_delegation: false\n    tools:\n      - \"InternetSearchTool\"\n      - \"WebContentReaderTool\"\n    tasks:\n      identify_city:\n        description: |\n          Analyze and select the best city for the trip based on specific criteria such as weather patterns, seasonal events, and travel costs. This task involves comparing multiple cities, considering factors like current weather conditions, upcoming cultural or seasonal events, and overall travel expenses. Your final answer must be a detailed report on the chosen city, and everything you found out about it, including the actual flight costs, weather forecast, and attractions.\n        expected_output: \"Detailed report on the chosen city including flight costs, weather forecast, and attractions.\"\n  local_expert:\n    role: \"Local Expert at this City\"\n    backstory: |\n      A knowledgeable local guide with extensive information about the city, its attractions, and customs.\n    goal: |\n      Provide the BEST insights about the selected city.\n    verbose: true\n    allow_delegation: false\n    tools:\n      - \"InternetSearchTool\"\n      - \"WebContentReaderTool\"\n    tasks:\n      gather_information:\n        description: |\n          As a local expert on this city, you must compile an in-depth guide for someone traveling there and wanting to have THE BEST trip ever! Gather information about key attractions, local customs, special events, and daily activity recommendations. Find the best spots to go to, the kind of places only a local would know. This guide should provide a thorough overview of what the city has to offer, including hidden gems, cultural hotspots, must-visit landmarks, weather forecasts, and high-level costs. The final answer must be a comprehensive city guide, rich in cultural insights and practical tips, tailored to enhance the travel experience.\n        expected_output: \"Comprehensive city guide including hidden gems, cultural hotspots, and practical travel tips.\"\n  travel_concierge:\n    role: \"Amazing Travel Concierge\"\n    backstory: |\n      Specialist in travel planning and logistics with decades of experience.\n    goal: |\n      Create the most amazing travel itineraries with budget and packing suggestions for the city.\n    verbose: true\n    allow_delegation: false\n    tools:\n      - \"InternetSearchTool\"\n      - \"WebContentReaderTool\"\n      - \"CalculatorTools\"\n    tasks:\n      plan_itinerary:\n        description: |\n          Expand this guide into a full 7-day travel itinerary with detailed per-day plans, including weather forecasts, places to eat, packing suggestions, and a budget breakdown.\n\n          You MUST suggest actual places to visit, actual hotels to stay, and actual restaurants to go to.\n\n          This itinerary should cover all aspects of the trip, from arrival to departure, integrating the city guide information with practical travel logistics.\n\n          Your final answer MUST be a complete expanded travel plan, formatted as markdown, encompassing a daily schedule, anticipated weather conditions, recommended clothing and items to pack, and a detailed budget, ensuring THE BEST TRIP EVER. Be specific and give it a reason why you picked each place, what makes them special!\n        expected_output: \"Complete expanded travel plan with daily schedule, weather conditions, packing suggestions, and budget breakdown.\"\ndependencies: []\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Running Python Application for Healthcare Diagnosis\nDESCRIPTION: To start the healthcare diagnosis system, execute the Python application `app.py`, which initializes and runs all task workflows related to medical diagnosis and treatment processes.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/examples/healthcare-diagnosis.mdx#2025-04-19_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\npython app.py\n```\n\n----------------------------------------\n\nTITLE: Visualizing Agentic Prompt Chaining using Mermaid\nDESCRIPTION: Mermaid diagram showing sequential prompt chaining with conditional gates. This pattern enables complex workflows where each agent's output is passed to the next agent with validation checks.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/index.mdx#2025-04-19_snippet_13\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n    In[In] --> LLM1[LLM Call 1] --> Gate{Gate}\n    Gate -->|Pass| LLM2[LLM Call 2] -->|Output 2| LLM3[LLM Call 3] --> Out[Out]\n    Gate -->|Fail| Exit[Exit]\n    \n    style In fill:#8B0000,color:#fff\n    style LLM1 fill:#2E8B57,color:#fff\n    style LLM2 fill:#2E8B57,color:#fff\n    style LLM3 fill:#2E8B57,color:#fff\n    style Out fill:#8B0000,color:#fff\n    style Exit fill:#8B0000,color:#fff\n```\n\n----------------------------------------\n\nTITLE: Creating an Advanced Task in Python\nDESCRIPTION: This snippet shows how to configure an advanced task in Python with additional parameters such as tools utilized, output file specification, and enabling asynchronous execution.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/course/agents/10-agent-tasks.mdx#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ntask = Task(\n    description=\"Analyze market data\",\n    expected_output=\"Detailed analysis\",\n    agent=analyst_agent,\n    tools=[AnalysisTool()],\n    output_file=\"analysis.md\",\n    async_execution=True\n)\n```\n\n----------------------------------------\n\nTITLE: Displaying Interface Types with CardGroup\nDESCRIPTION: Renders a set of cards using the CardGroup component, displaying different types of user interfaces available. No specific dependencies mentioned, but it assumes a UI framework that supports Card and CardGroup components.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/ui/overview.mdx#2025-04-19_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n<CardGroup cols={2}>\\n<Card title=\\\"Web Applications\\\" icon=\\\"browser\\\">\\n  Create full-featured web interfaces with Streamlit and Gradio.\\n</Card>\\n<Card title=\\\"Chat Interfaces\\\" icon=\\\"messages\\\">\\n  Build conversational experiences with Chat and Chainlit.\\n</Card>\\n<Card title=\\\"Code Interaction\\\" icon=\\\"code\\\">\\n  Interact with codebases using the Code interface.\\n</Card>\\n<Card title=\\\"Multi-Agent Systems\\\" icon=\\\"users\\\">\\n  Orchestrate multiple agents with UI framework.\\n</Card>\\n</CardGroup>\n```\n\n----------------------------------------\n\nTITLE: Defining Database Task\nDESCRIPTION: Create a task definition for database operations with expected outputs.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/duckdb_tools.mdx#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndb_task = Task(\n    description=\"Query and analyze database data.\",\n    expected_output=\"Query results and analysis.\",\n    agent=db_agent,\n    name=\"db_analysis\"\n)\n```\n\n----------------------------------------\n\nTITLE: Building and Pushing Docker Image\nDESCRIPTION: Builds a Docker image for the PraisonAI application, tags it for the Google Cloud artifact repository, and pushes the image to the repository.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/deploy.mdx#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nPROJECT_ID=$(gcloud config get-value project)\nTAG=\"latest\"\ndocker build --platform linux/amd64 -t gcr.io/${PROJECT_ID}/praisonai-app:${TAG} .\ndocker tag gcr.io/${PROJECT_ID}/praisonai-app:${TAG} us-central1-docker.pkg.dev/${PROJECT_ID}/praisonai-repository/praisonai-app:${TAG}\ndocker push us-central1-docker.pkg.dev/${PROJECT_ID}/praisonai-repository/praisonai-app:${TAG}\n```\n\n----------------------------------------\n\nTITLE: Running a Single Agent with PraisonAI in TypeScript\nDESCRIPTION: Demonstrates creating and running a single agent using the PraisonAI framework. Dependencies include importing 'Agent' and 'PraisonAIAgents' from 'praisonai'. No prior task is specified for this agent, and it is set to perform a given instruction verbosely. The output includes the final results from the agent's execution.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/js/typescript-async.mdx#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Agent, PraisonAIAgents } from 'praisonai';\n\nasync function main() {\n    // Create a simple agent (no task specified)\n    const agent = new Agent({\n        name: \"BiologyExpert\",\n        instructions: \"Explain the process of photosynthesis in detail.\",\n        verbose: true\n    });\n\n    // Run the agent\n    const praisonAI = new PraisonAIAgents({\n        agents: [agent],\n        tasks: [\"Explain the process of photosynthesis in detail.\"],\n        verbose: true\n    });\n\n    try {\n        console.log('Starting single agent example...');\n        const results = await praisonAI.start();\n        console.log('\\nFinal Results:', results);\n    } catch (error) {\n        console.error('Error:', error);\n    }\n}\n\nmain();\n```\n\n----------------------------------------\n\nTITLE: Flowchart Visualization using Mermaid\nDESCRIPTION: A flowchart representing a routing mechanism using Mermaid. It visually illustrates how an input is passed through a routing agent that directs it to one of three LLM instances, with each instance eventually leading to an output. This visualization aids in understanding the routing flow between different agents.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/routing.mdx#2025-04-19_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n    In[In] --> Router[LLM Call Router]\n    Router --> LLM1[LLM Call 1]\n    Router --> LLM2[LLM Call 2]\n    Router --> LLM3[LLM Call 3]\n    LLM1 --> Out[Out]\n    LLM2 --> Out\n    LLM3 --> Out\n    \n    style In fill:#8B0000,color:#fff\n    style Router fill:#2E8B57,color:#fff\n    style LLM1 fill:#2E8B57,color:#fff\n    style LLM2 fill:#2E8B57,color:#fff\n    style LLM3 fill:#2E8B57,color:#fff\n    style Out fill:#8B0000,color:#fff\n```\n\n----------------------------------------\n\nTITLE: Running PraisonAI Agents with YAML configuration\nDESCRIPTION: This command executes the PraisonAI agents defined in the `agents.yaml` file. It utilizes the `praisonai` command-line tool to start the agents based on the configuration specified in the YAML file.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/selfreflection.mdx#2025-04-19_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npraisonai agents.yaml\n```\n\n----------------------------------------\n\nTITLE: CSV File Writing Example\nDESCRIPTION: Examples of writing data to CSV files with formatting options using the write_csv function.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/csv_tools.mdx#2025-04-19_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# Basic usage\ndata = [\n    {\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\"},\n    {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\"}\n]\nsuccess = write_csv(\"output.csv\", data)\n\n# Advanced usage with formatting\nsuccess = write_csv(\n    \"output.csv\",\n    data,\n    encoding='utf-8',\n    delimiter=',',\n    index=False,\n    header=True,\n    float_format='%.2f',\n    date_format='%Y-%m-%d',\n    mode='w'\n)\n```\n\n----------------------------------------\n\nTITLE: Installing PraisonAI and DuckDuckGo Search with pip\nDESCRIPTION: This command installs the PraisonAI package along with the `duckduckgo_search` package using pip. This is needed for the no-code multi-agent example, specifically for enabling one of the agents to use DuckDuckGo as a search tool.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/selfreflection.mdx#2025-04-19_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\npip install praisonai duckduckgo_search\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for News Retrieval System\nDESCRIPTION: Sets up required Python packages including langchain_community, praisonai, duckduckgo_search, and requests using pip install commands.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/cookbooks/yaml/news_retreival_rag_agents.ipynb#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n%pip install langchain_community > /dev/null\n%pip install praisonai[crewai] > /dev/null\n%pip install duckduckgo_search > /dev/null\n%pip install requests > /dev/null\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Wikipedia Search Analysis Agents in Python\nDESCRIPTION: Installs required Python packages including langchain_community, praisonai with crewai extension, and crawl4ai. Output is suppressed using '> /dev/null' to keep the notebook clean.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/cookbooks/yaml/wikipedia_search_analysis_agents.ipynb#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Install dependencies without output\n%pip install langchain_community > /dev/null\n%pip install praisonai[crewai] > /dev/null\n%pip install crawl4ai > /dev/null\n```\n\n----------------------------------------\n\nTITLE: Creating Gradio UI for Stock Price Agent\nDESCRIPTION: Python script that creates a web interface for the stock price agent using Gradio.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/mcp/stockprice.mdx#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent, MCP\nimport gradio as gr\nimport os\n\n# Get the path to your Python interpreter and the server file\npython_path = os.getenv(\"PYTHON_PATH\", \"/path/to/your/python\")\nserver_path = os.getenv(\"SERVER_PATH\", \"/path/to/your/stock_price_server.py\")\n\n# Create the agent with the stock price MCP tool\nagent = Agent(\n    instructions=\"\"\"You are a helpful assistant that can check stock prices.\n    Use the available tools when relevant to answer user questions.\"\"\",\n    llm=\"gpt-4o-mini\",\n    tools=MCP(f\"{python_path} {server_path}\")\n)\n\ndef chat(message, history):\n    return agent.chat(message)\n\ndemo = gr.ChatInterface(\n    chat,\n    title=\"Stock Price Assistant\",\n    description=\"Ask about any stock price and get real-time information\",\n    theme=\"soft\"\n)\n\nif __name__ == \"__main__\":\n    demo.launch()\n```\n\n----------------------------------------\n\nTITLE: Installing PraisonAI Package Using Yarn\nDESCRIPTION: Installs the PraisonAI package using Yarn as an alternative package manager for setting up the environment.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/js/nodejs.mdx#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add praisonai\n```\n\n----------------------------------------\n\nTITLE: Setting OpenAI API Key for PraisonAI\nDESCRIPTION: Sets the OpenAI API key as an environment variable for PraisonAI to use for API authentication. The API key needs to be obtained from the OpenAI platform.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/nocode/initialise.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport OPENAI_API_KEY=\"Enter your API key\"\n```\n\n----------------------------------------\n\nTITLE: Workflow Initialization with PraisonAI Agents\nDESCRIPTION: Creates specialized AI agents for different stages of cryptographic validation, including analysis, attack simulation, performance benchmarking, implementation assessment, and compliance validation\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/examples/crypto-validator.mdx#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ncrypto_analyzer = Agent(\n    name=\"Crypto Analyzer\",\n    role=\"Cryptographic Analysis\",\n    goal=\"Analyze cryptographic schemes\",\n    instructions=\"Evaluate quantum-resistant cryptographic schemes\",\n    tools=[analyze_cryptographic_scheme]\n)\n\nattack_simulator = Agent(\n    name=\"Attack Simulator\",\n    role=\"Attack Simulation\",\n    goal=\"Simulate quantum attacks\",\n    instructions=\"Test resistance against quantum attacks\",\n    tools=[simulate_quantum_attacks]\n)\n```\n\n----------------------------------------\n\nTITLE: Visualizing AI Agent Architecture with Mermaid Flowchart\nDESCRIPTION: A flowchart diagram showing the relationship between inputs, the AI Agent, the Airbnb MCP tool, and outputs. The diagram visualizes the data flow in the XAI integration process.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/mcp/xai.mdx#2025-04-19_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n    In[In] --> Agent[AI Agent]\n    Agent --> Tool[Airbnb MCP]\n    Tool --> Agent\n    Agent --> Out[Out]\n    \n    style In fill:#8B0000,color:#fff\n    style Agent fill:#2E8B57,color:#fff\n    style Tool fill:#FF5A5F,color:#fff\n    style Out fill:#8B0000,color:#fff\n```\n\n----------------------------------------\n\nTITLE: Basic Agent Setup with Gemini Model\nDESCRIPTION: Python code that initializes a basic agent using the Gemini 1.5 Flash model and starts a conversation with it. The agent is configured with self-reflection capability and verbose output.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/models/google.mdx#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent\n\nagent = Agent(\n    instructions=\"You are a helpful assistant\",\n    llm=\"gemini/gemini-1.5-flash-8b\",\n    self_reflect=True,\n    verbose=True\n)\n\nagent.start(\"Why sky is Blue?\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Streamlit Page\nDESCRIPTION: This Python code configures the Streamlit page settings. It sets the page title, icon, and layout. The layout is set to \"wide\" to utilize the full screen width. Streamlit is used for creating the user interface.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/ui/streamlit/hackathon-judge-streamlit.mdx#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n\"# Set page config\nst.set_page_config(\n    page_title=\\\"Hackathon Project Evaluator\\\",\n    page_icon=\\\"🏆\\\",\n    layout=\\\"wide\\\"\n)\"\n```\n\n----------------------------------------\n\nTITLE: Importing Components in Python\nDESCRIPTION: This Python code imports the required classes and functions from the `praisonaiagents` library.  It includes modules for creating agents, defining tasks, managing agent processes, and specific tools for web scraping, such as `scrape_page`, `extract_links`, `crawl`, and `extract_text`.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/spider_tools.mdx#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n```python\nfrom praisonaiagents import Agent, Task, PraisonAIAgents\nfrom praisonaiagents.tools import scrape_page, extract_links, crawl, extract_text\n```\n```\n\n----------------------------------------\n\nTITLE: Initializing and Running CSV Agent\nDESCRIPTION: Setup and execution of CSV processing agents with sequential processing.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/csv_tools.mdx#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nagents = PraisonAIAgents(\n    agents=[csv_agent],\n    tasks=[csv_task],\n    process=\"sequential\"\n)\nagents.start()\n```\n\n----------------------------------------\n\nTITLE: Setting OpenAI API Key as Environment Variable\nDESCRIPTION: This bash command sets the OpenAI API key as an environment variable. This is necessary for the praisonaiagents library to authenticate with OpenAI's services. Replace `your_api_key_here` with your actual OpenAI API key.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/ui/streamlit/hackathon-judge-streamlit.mdx#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n\"export OPENAI_API_KEY=your_api_key_here\"\n```\n\n----------------------------------------\n\nTITLE: Running the PraisonAI Agent Script (Bash)\nDESCRIPTION: Executes the Python script that creates and runs the PraisonAI agent with Anthropic and Airbnb MCP integration.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/mcp/anthropic.mdx#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npython anthropic_airbnb.py\n```\n\n----------------------------------------\n\nTITLE: Visualizing RAG Agent Workflow using Mermaid\nDESCRIPTION: This Mermaid diagram illustrates the workflow of RAG agents interacting with vector databases for knowledge tasks and output generation.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/rag.mdx#2025-04-19_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n    In[Input] --> RAGAgent[(\"RAG Agent\")]\n    VDB[(Vector DB)] --> RAGAgent\n    RAGAgent --> Task[Knowledge Task]\n    Task --> |Query| VDB\n    Task --> Out[Output]\n    \n    style In fill:#8B0000,color:#fff\n    style RAGAgent fill:#2E8B57,color:#fff,shape:circle\n    style VDB fill:#4169E1,color:#fff,shape:cylinder\n    style Task fill:#2E8B57,color:#fff\n    style Out fill:#8B0000,color:#fff\n```\n\n----------------------------------------\n\nTITLE: Gradio UI Integration for WhatsApp and Airbnb in Python\nDESCRIPTION: Python code that creates a Gradio web interface for the WhatsApp and Airbnb integration. Users can input booking requirements, which are processed by both agents, with results sent via WhatsApp and displayed in the UI.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/mcp/whatsapp.mdx#2025-04-19_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent, Agents, MCP\nimport gradio as gr\n\ndef search_airbnb(query):\n    airbnb_agent = Agent(\n        instructions=query+\" on Airbnb\",\n        llm=\"gpt-4o-mini\",\n        tools=MCP(\"npx -y @openbnb/mcp-server-airbnb --ignore-robots-txt\")\n    )\n\n    whatsapp_agent = Agent(\n        instructions=\"\"\"Send AirBnb Search Result to 'Mervin Praison'. Don't include Phone Number in Response, but include the AirBnb Search Result\"\"\",\n        llm=\"gpt-4o-mini\",\n        tools=MCP(\"python /path/to/whatsapp-mcp/whatsapp-mcp-server/main.py\")\n    )\n\n    agents = Agents(agents=[airbnb_agent, whatsapp_agent])\n\n    result = agents.start()\n    return f\"## Airbnb Search Results\\n\\n{result}\"\n\ndemo = gr.Interface(\n    fn=search_airbnb,\n    inputs=gr.Textbox(placeholder=\"I want to book an apartment in Paris for 2 nights...\"),\n    outputs=gr.Markdown(),\n    title=\"WhatsApp MCP Agent\",\n    description=\"Enter your booking requirements below:\"\n)\n\nif __name__ == \"__main__\":\n    demo.launch()\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Setting Environment Variables\nDESCRIPTION: Instructions for installing required Python packages and setting up API keys for Exa and OpenAI services.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/external/exa-search.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install praisonaiagents exa-py\nexport EXA_API_KEY=your_api_key_here\nexport OPENAI_API_KEY=your_api_key_here\n```\n\n----------------------------------------\n\nTITLE: Defining News Task\nDESCRIPTION: Create a task for analyzing AI-related news articles.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/newspaper_tools.mdx#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nnews_task = Task(\n    description=\"Analyze news articles about 'AI developments' from major tech news sources.\",\n    expected_output=\"Summary of key AI developments with source articles.\",\n    agent=news_agent,\n    name=\"ai_news\"\n)\n```\n\n----------------------------------------\n\nTITLE: Running Streamlit Application\nDESCRIPTION: Starts the Streamlit application from the command line. The `streamlit run app.py` command executes the Python script `app.py`, launching the Streamlit UI in a web browser. This command assumes that Streamlit and the other dependencies are correctly installed and the environment is configured.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/ui/streamlit/ollama-streamlit.mdx#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nstreamlit run app.py\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Multi-Agent Architecture with Mermaid\nDESCRIPTION: This Mermaid diagram showcases a basic multi-agent architecture where different agents work in sequence to complete a complex task. It visually represents the flow from Research Agent to Final Output.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/course/agents/07-multi-agent-systems.mdx#2025-04-19_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph LR\n    A[Research Agent] --> B[Analysis Agent]\n    B --> C[Writing Agent]\n    C --> D[Final Output]\n```\n\n----------------------------------------\n\nTITLE: Using Async Process Workflow Example in Python\nDESCRIPTION: Demonstrates how to create and use a Process instance with async workflow execution, handling both synchronous and asynchronous tasks through an async iterator pattern.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/api/praisonaiagents/process/process.mdx#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Create process instance\nprocess = Process(tasks=tasks, agents=agents)\n\n# Use async workflow\nasync for task_id in process.aworkflow():\n    # Handle task execution\n    if tasks[task_id].async_execution:\n        await handle_async_task(task_id)\n    else:\n        handle_sync_task(task_id)\n```\n\n----------------------------------------\n\nTITLE: Visualizing Agentic Evaluator Optimizer using Mermaid\nDESCRIPTION: Mermaid diagram illustrating an evaluator-optimizer pattern where solutions are iteratively improved through feedback. This pattern enables continuous refinement of AI-generated solutions.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/index.mdx#2025-04-19_snippet_14\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n    In[In] --> Generator[LLM Call Generator] \n    Generator -->|SOLUTION| Evaluator[LLM Call Evaluator] -->|ACCEPTED| Out[Out]\n    Evaluator -->|REJECTED + FEEDBACK| Generator\n    \n    style In fill:#8B0000,color:#fff\n    style Generator fill:#2E8B57,color:#fff\n    style Evaluator fill:#2E8B57,color:#fff\n    style Out fill:#8B0000,color:#fff\n```\n\n----------------------------------------\n\nTITLE: Defining CSV Processing Task\nDESCRIPTION: Task definition for CSV processing with expected outputs and agent assignment.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/csv_tools.mdx#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ncsv_task = Task(\n    description=\"Process and analyze CSV data files.\",\n    expected_output=\"Processed CSV data with analysis.\",\n    agent=csv_agent,\n    name=\"csv_processing\"\n)\n```\n\n----------------------------------------\n\nTITLE: Executing SQL Queries with Parameters\nDESCRIPTION: Examples of executing SQL queries with different parameter types and returning results as DataFrame.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/duckdb_tools.mdx#2025-04-19_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# Basic SELECT query\nresults = execute_query(\"SELECT * FROM employees\")\n\n# Parameterized query\nresults = execute_query(\n    \"SELECT * FROM employees WHERE department = ? AND salary > ?\",\n    params=('Engineering', 75000)\n)\n\n# Named parameters\nresults = execute_query(\n    \"SELECT * FROM employees WHERE department = :dept\",\n    params={'dept': 'Engineering'}\n)\n```\n\n----------------------------------------\n\nTITLE: Agentic Orchestrator Worker Diagram in Mermaid\nDESCRIPTION: Mermaid diagram showing how an orchestrator agent distributes tasks among specialized workers and synthesizes results.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/README.md#2025-04-19_snippet_15\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n    In[In] --> Router[LLM Call Router]\n    Router --> LLM1[LLM Call 1]\n    Router --> LLM2[LLM Call 2]\n    Router --> LLM3[LLM Call 3]\n    LLM1 --> Synthesizer[Synthesizer]\n    LLM2 --> Synthesizer\n    LLM3 --> Synthesizer\n    Synthesizer --> Out[Out]\n    \n    style In fill:#8B0000,color:#fff\n    style Router fill:#2E8B57,color:#fff\n    style LLM1 fill:#2E8B57,color:#fff\n    style LLM2 fill:#2E8B57,color:#fff\n    style LLM3 fill:#2E8B57,color:#fff\n    style Synthesizer fill:#2E8B57,color:#fff\n    style Out fill:#8B0000,color:#fff\n```\n\n----------------------------------------\n\nTITLE: Initializing PraisonAI Workflow in Python\nDESCRIPTION: Creates and configures the main workflow combining the agents and their tasks for execution\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/arxiv_tools.mdx#2025-04-19_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nagents = PraisonAIAgents(\n    agents=[searcher, reviewer],\n    tasks=[search_task, review_task]\n)\n```\n\n----------------------------------------\n\nTITLE: Installing PraisonAI Agents - Python\nDESCRIPTION: This snippet shows how to install the PraisonAI Agents package using pip for Python applications. This is the first step to leveraging the PraisonAI framework for agent-based tasks.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/introduction.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install praisonaiagents\n```\n\n----------------------------------------\n\nTITLE: Initialize a new agents.yaml file\nDESCRIPTION: Initializes a new `agents.yaml` file for your project. This command creates a YAML file with predefined configuration based on the given task.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/cli.mdx#2025-04-19_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n\"praisonai --init \\\"Create a movie script about AI\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Multi-Agent Integration with Airbnb and WhatsApp in Python\nDESCRIPTION: Python code that combines an Airbnb search agent with a WhatsApp agent. The Airbnb agent searches for apartments, and the WhatsApp agent sends the results to a contact.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/mcp/whatsapp.mdx#2025-04-19_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent, Agents, MCP\n\nairbnb_agent = Agent(\n    instructions=\"\"\"Search for Apartments in Paris for 2 nights on Airbnb. 04/28 - 04/30 for 2 adults\"\"\",\n    llm=\"gpt-4o-mini\",\n    tools=MCP(\"npx -y @openbnb/mcp-server-airbnb --ignore-robots-txt\")\n)\n\nwhatsapp_agent = Agent(\n    instructions=\"\"\"Send AirBnb Search Result to 'Mervin Praison'\"\"\",\n    llm=\"gpt-4o-mini\",\n    tools=MCP(\"python /path/to/whatsapp-mcp/whatsapp-mcp-server/main.py\")\n)\n\nagents = Agents(agents=[airbnb_agent, whatsapp_agent])\n\nagents.start()\n```\n\n----------------------------------------\n\nTITLE: Configuring a CrewAI Agent with Anthropic's Claude Model\nDESCRIPTION: YAML configuration for setting up a researcher agent using Anthropic's Claude-3-Haiku model within the CrewAI framework. The agent is tasked with gathering information about Mars and cats for a movie script.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/models/anthropic.mdx#2025-04-19_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nframework: crewai\ntopic: create movie script about cat in mars\nroles:\n  researcher:\n    backstory: Skilled in finding and organizing information, with a focus on research\n      efficiency.\n    goal: Gather information about Mars and cats\n    role: Researcher\n    llm:  \n      model: \"anthropic/claude-3-haiku-20240307\"\n    tasks:\n      gather_research:\n        description: Research and gather information about Mars, its environment,\n          and cats, including their behavior and characteristics.\n        expected_output: Document with research findings, including interesting facts\n          and information.\n    tools:\n    - ''\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenAI and Serper API Keys in Python\nDESCRIPTION: Sets environment variables for OpenAI and Serper API keys using Google Colab's userdata, with manual entry fallback option. Specifies the OpenAI model to be used.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/cookbooks/yaml/recruitment_flow_agents.ipynb#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nos.environ[\"OPENAI_API_KEY\"] = userdata.get('OPENAI_API_KEY') or \"ENTER OPENAI_API_KEY HERE\"\nos.environ[\"SERPER_API_KEY\"] = userdata.get('SERPER_API_KEY') or \"ENTER SERPER_API_KEY HERE\"\nos.environ[\"OPENAI_MODEL_NAME\"] = \"gpt-4o-mini\"\n```\n\n----------------------------------------\n\nTITLE: Installing PraisonAI with AgentOps Integration\nDESCRIPTION: Installs the PraisonAI package with AgentOps monitoring capabilities using pip package manager.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/monitoring/agentops.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install \"praisonai[agentops]\"\n```\n\n----------------------------------------\n\nTITLE: Installing Required Dependencies in Bash\nDESCRIPTION: Commands to install the necessary Python packages for the WhatsApp MCP integration, including PraisonAI agents with LLM support, MCP, and Gradio for the UI.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/mcp/whatsapp.mdx#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npip install \"praisonaiagents[llm]\" mcp gradio\n```\n\n----------------------------------------\n\nTITLE: Docker and Artifact Repository Configuration\nDESCRIPTION: Authenticates Docker with Google Cloud, creates an artifact repository, and prepares for building and pushing a Docker image to the repository.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/deploy.mdx#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyes | gcloud auth configure-docker us-central1-docker.pkg.dev \ngcloud artifacts repositories create praisonai-repository --repository-format=docker --location=us-central1\n```\n\n----------------------------------------\n\nTITLE: Configuring Knowledge Agent with Vector Store in Python\nDESCRIPTION: This Python code configures a knowledge agent to use a vector store for enhanced knowledge retrieval. It demonstrates setting up a configuration dictionary and initializing the agent with the custom configuration. This requires the `praisonaiagents` package and configures a local path for persistent storage.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/course/agents/09-knowledge-bases.mdx#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent\n\nconfig = {\n    \"vector_store\": {\n        \"provider\": \"chroma\",\n        \"config\": {\n            \"collection_name\": \"custom_knowledge\",\n            \"path\": \".praison\",\n        }\n    }\n}\n\nagent = Agent(\n    name=\"Knowledge Agent\",\n    instructions=\"You answer questions based on the provided knowledge.\",\n    knowledge=[\"small.pdf\"],\n    knowledge_config=config\n)\n\nagent.start(\"What is KAG in one line?\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Language Model Endpoints in PraisonAI\nDESCRIPTION: Environment variable configurations for connecting different language model services including Ollama, FastChat, LM Studio, and Mistral API. Each configuration specifies the API base URL, model name, and API key requirements.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/models/other.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Ollama\nOPENAI_API_BASE='http://localhost:11434/v1'\nOPENAI_MODEL_NAME='mistral'\nOPENAI_API_KEY='NA'\n\n# FastChat\nOPENAI_API_BASE=\"http://localhost:8001/v1\"\nOPENAI_MODEL_NAME='oh-2.5m7b-q51'\nOPENAI_API_KEY=NA\n\n# LM Studio\nOPENAI_API_BASE=\"http://localhost:1234/v1\"\nOPENAI_MODEL_NAME=NA\nOPENAI_API_KEY=NA\n\n# Mistral API\nOPENAI_API_BASE=https://api.mistral.ai/v1\nOPENAI_MODEL_NAME=\"mistral-small\"\nOPENAI_API_KEY=your-mistral-api-key\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenAI API Key\nDESCRIPTION: This Bash snippet sets the OpenAI API key as an environment variable, which is a prerequisite for accessing OpenAI services while running reasoning agents.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/reasoning.mdx#2025-04-19_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\nexport OPENAI_API_KEY=your_api_key_here\n```\n\n----------------------------------------\n\nTITLE: Multi-Agent Setup Commands\nDESCRIPTION: Installation of required package and API key configuration for multi-agent setup.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/models/openai.mdx#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npip install langchain-openai\nexport OPENAI_API_KEY=xxxxxxxxxx\n```\n\n----------------------------------------\n\nTITLE: Generation Status Display - Python\nDESCRIPTION: Function to display generation status with optional timing information.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/api/praisonaiagents/index.mdx#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndisplay_generating(content: str = '', start_time: float | None = None)\n```\n\n----------------------------------------\n\nTITLE: Configuring Agent to Use Wikipedia Search Tool in YAML\nDESCRIPTION: This YAML configuration defines an agent named `data_collector` within a `crewai` framework. The agent's goal is to gather information on Nvidia's growth, and it utilizes the `WikipediaSearchTool` to achieve this. The `data_collection_task` describes the specific task for the agent, detailing the expected output as a comprehensive document on Nvidia's growth.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/wikipedia.mdx#2025-04-19_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# agents.yaml\nframework: crewai\ntopic: research about nvidia growth\nroles:\n  data_collector:\n    backstory: An experienced researcher with the ability to efficiently collect and\n      organize vast amounts of data.\n    goal: Gather information on Nvidia's growth by providing the Ticket Symbol to YahooFinanceNewsTool\n    role: Data Collector\n    tasks:\n      data_collection_task:\n        description: Collect data on Nvidia's growth from various sources such as\n          financial reports, news articles, and company announcements.\n        expected_output: A comprehensive document detailing data points on Nvidia's\n          growth over the years.\n    tools:\n    - 'WikipediaSearchTool'\n```\n\n----------------------------------------\n\nTITLE: Setting OpenAI API Key\nDESCRIPTION: Environment variable setup to authenticate the AI agents to access OpenAI services, necessary for functioning of the agents.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/js/typescript.mdx#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport OPENAI_API_KEY=xxxxxxxxxxxxxxxxxxxxxx\n```\n\n----------------------------------------\n\nTITLE: Importing YouTube Search Tool from LangChain\nDESCRIPTION: Imports the YouTubeSearchTool from langchain_community.tools. This tool will be used for YouTube search functionality in the agent.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/cookbooks/yaml/youtube_search_analysis_agents.ipynb#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom langchain_community.tools import YouTubeSearchTool\n```\n\n----------------------------------------\n\nTITLE: Configuring CrewAI Agent with Cohere Model in YAML\nDESCRIPTION: YAML configuration for setting up a CrewAI agent that uses Cohere's command-r model. The configuration defines a researcher role focused on gathering information about Mars and cats for a movie script.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/models/cohere.mdx#2025-04-19_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nframework: crewai\ntopic: create movie script about cat in mars\nroles:\n  researcher:\n    backstory: Skilled in finding and organizing information, with a focus on research\n      efficiency.\n    goal: Gather information about Mars and cats\n    role: Researcher\n    llm:  \n      model: \"cohere/command-r\"\n    tasks:\n      gather_research:\n        description: Research and gather information about Mars, its environment,\n          and cats, including their behavior and characteristics.\n        expected_output: Document with research findings, including interesting facts\n          and information.\n    tools:\n    - ''\n```\n\n----------------------------------------\n\nTITLE: Run Supply Chain Risk Management Agents\nDESCRIPTION: This command executes the Python script `app.py`, which initializes and starts the AI agents for supply chain risk management.  Ensure that the `app.py` file is in the current directory and that all necessary dependencies are installed.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/examples/supply-chain.mdx#2025-04-19_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n```bash\npython app.py\n```\n```\n\n----------------------------------------\n\nTITLE: Running AI Agents - Bash\nDESCRIPTION: This snippet describes the command to execute the Python script that initiates the AI agents created previously.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/structured.mdx#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npython app.py\n```\n\n----------------------------------------\n\nTITLE: Workflow Diagram for Reasoning Agents\nDESCRIPTION: Mermaid flowchart illustrating the process of input, reasoning, and output generation by AI agents\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/reasoning-extract.mdx#2025-04-19_snippet_3\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n    In[Input] --> RA[(\"Reasoning Agent\")]\n    RA --> Steps[Reasoning Steps]\n    Steps --> SA[(\"Small Agent\")]\n    SA --> Out[Output]\n    \n    style In fill:#8B0000,color:#fff\n    style RA fill:#2E8B57,color:#fff,shape:circle\n    style Steps fill:#4169E1,color:#fff\n    style SA fill:#2E8B57,color:#fff,shape:circle\n    style Out fill:#8B0000,color:#fff\n```\n\n----------------------------------------\n\nTITLE: Enabling Memory Management for Agents\nDESCRIPTION: This future feature shows how to enable and configure memory management for agents within PraisonAI. It demonstrates setting memory attributes to allow agents to remember session details across interactions. Requires specifying memory type and token limits. It's suitable for tasks needing continuity over sessions.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/framework/praisonaiagents.mdx#2025-04-19_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nagent = Agent(\n    name=\"Analyst\",\n    memory=True,  # Enable memory\n    memory_config={\n        \"type\": \"short_term\",\n        \"max_tokens\": 4000\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Setting OpenAI Environment Variables\nDESCRIPTION: Configuration of essential OpenAI environment variables including API key and model name for single agent setup.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/models/openai.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport OPENAI_API_KEY=xxxxxxxxxx\nexport OPENAI_MODEL_NAME=gpt-4o\n```\n\n----------------------------------------\n\nTITLE: Visualizing Document Query Process in Mermaid\nDESCRIPTION: This Mermaid graph illustrates the process of querying a collection of documents in a knowledge base. It starts from accepting a query, searching through documents, finding relevant content, and generating a response. No specific dependencies are required for visualization, but integration in a web context might need a support for rendering Mermaid graphs.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/course/agents/09-knowledge-bases.mdx#2025-04-19_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD\n    A[Query] --> B[Search Documents]\n    B --> C[Find Relevant Content]\n    C --> D[Generate Response]\n```\n\n----------------------------------------\n\nTITLE: Configuring Advanced PDF Chat Agent\nDESCRIPTION: Shows how to configure a PDF chat agent with custom vector store settings, using `PraisonAI`. Requires understanding of `praisonaiagents` library.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/chat-with-pdf.mdx#2025-04-19_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent\n\nconfig = {\n    \"vector_store\": {\n        \"provider\": \"chroma\",\n        \"config\": {\n            \"collection_name\": \"praison\",\n            \"path\": \".praison\",\n        }\n    }\n}\n\nagent = Agent(\n    name=\"PDF Chat Agent\",\n    instructions=\"You answer questions based on the provided PDF document.\",\n    knowledge=[\"document.pdf\"], # PDF Indexing\n    knowledge_config=config # Configuration\n)\n\nagent.start(\"What is the main topic of this PDF?\") # Chat Query\n```\n\n----------------------------------------\n\nTITLE: Streaming Text Response Delta in OpenAI API\nDESCRIPTION: Example of a response.text.delta event in the OpenAI API event stream. This event is emitted when there is an update to the streaming text response, providing a delta of new text that should be appended to the existing text.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/praisonai/ui/realtimeclient/realtimedocs.txt#2025-04-19_snippet_26\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"event_id\": \"event_4142\",\n    \"type\": \"response.text.delta\",\n    \"response_id\": \"resp_001\",\n    \"item_id\": \"msg_007\",\n    \"output_index\": 0,\n    \"content_index\": 0,\n    \"delta\": \"Sure, I can h\"\n}\n```\n\n----------------------------------------\n\nTITLE: Drawing Flowchart for Looping Agent - Mermaid\nDESCRIPTION: This snippet defines a flowchart that illustrates how the Looping Agent processes tasks through an automated loop. It visually represents the flow from input to output, highlighting the looping mechanism.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/repetitive.mdx#2025-04-19_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n    In[Input] --> LoopAgent[(\"Looping Agent\")]\n    LoopAgent --> Task[Task]\n    Task --> |Next iteration| LoopAgent\n    Task --> |Done| Out[Output]\n    \n    style In fill:#8B0000,color:#fff\n    style LoopAgent fill:#2E8B57,color:#fff,shape:circle\n    style Task fill:#2E8B57,color:#fff\n    style Out fill:#8B0000,color:#fff\n```\n\n----------------------------------------\n\nTITLE: Creating Python MCP Client for Stock Price Retrieval\nDESCRIPTION: This code creates a PraisonAI agent that connects to a custom Python MCP server to retrieve real-time stock information. It configures the agent with specific instructions and connects it to a stock price server using the MCP tool.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/mcp/custom-python-client.mdx#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent, MCP\n\nagent = Agent(\n    instructions=\"\"\"You are a helpful assistant that can check stock prices and perform other tasks.\n    Use the available tools when relevant to answer user questions.\"\"\",\n    llm=\"gpt-4o-mini\",\n    tools = MCP(\"/Users/praison/miniconda3/envs/mcp/bin/python /Users/praison/stockprice/custom-python-server.py\")\n)\n\n# NOTE: Python Path replace with yours: /Users/praison/miniconda3/envs/mcp/bin/python\n# NOTE: custom-python-server.py file path, replace it with yours: /Users/praison/stockprice/custom-python-server.py\n\nagent.start(\"What is the stock price of Tesla?\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Card Group in React\nDESCRIPTION: This snippet defines a CardGroup component using React for organizing different UI cards that represent various functionalities of the PraisonAI tool. It utilizes JSX syntax for rendering the UI elements and can be embedded within a larger component structure.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/index.mdx#2025-04-19_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\n<CardGroup cols={3}>\\n  <Card title=\"Multi Agents UI\" icon=\"users\" href=\"/ui/ui\">\\n    Work with CrewAI or AG2 multi-agent systems\\n  </Card>\\n  <Card title=\"Chat Interface\" icon=\"comments\" href=\"/ui/chat\">\\n    Chat with 100+ LLMs using a single AI Agent\\n  </Card>\\n  <Card title=\"Code Interface\" icon=\"code\" href=\"/ui/code\">\\n    Interact with your entire codebase\\n  </Card>\\n</CardGroup>\n```\n\n----------------------------------------\n\nTITLE: Importing JSON Tool Components in Python\nDESCRIPTION: Import necessary components and tools for JSON processing from PraisonAI Agents library\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/json_tools.mdx#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent, Task, PraisonAIAgents\nfrom praisonaiagents.tools import (\n    read_json, write_json, merge_json,\n    validate_json, analyze_json, transform_json\n)\n```\n\n----------------------------------------\n\nTITLE: Text Cleaning Function - Python\nDESCRIPTION: Function to remove triple backticks from text output.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/api/praisonaiagents/index.mdx#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclean_triple_backticks(text: str) → str\n```\n\n----------------------------------------\n\nTITLE: Setting OpenAI API Key\nDESCRIPTION: Command to set the OpenAI API key as an environment variable.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/agents/single.mdx#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport OPENAI_API_KEY=your_api_key_here\n```\n\n----------------------------------------\n\nTITLE: Python Cryptographic Scheme Analysis Function\nDESCRIPTION: Function that simulates cryptographic scheme analysis by defining sample lattice-based and multivariate cryptographic schemes with their key parameters and security characteristics\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/examples/crypto-validator.mdx#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef analyze_cryptographic_scheme():\n    \"\"\"Simulates cryptographic scheme analysis\"\"\"\n    schemes = [\n        {\n            \"name\": \"lattice_based\",\n            \"type\": \"encryption\",\n            \"key_size\": 2048,\n            \"security_level\": \"AES-256 equivalent\",\n            \"parameters\": {\n                \"lattice_dimension\": 1024,\n                \"modulus\": \"q = 2^32 - 1\",\n                \"error_distribution\": \"discrete_gaussian\"\n            }\n        },\n        {\n            \"name\": \"multivariate\",\n            \"type\": \"signature\",\n            \"key_size\": 4096,\n            \"security_level\": \"SHA-384 equivalent\",\n            \"parameters\": {\n                \"variables\": 128,\n                \"equations\": 128,\n                \"field_size\": \"2^8\"\n            }\n        }\n    ]\n    return schemes[int(time.time()) % 2]\n```\n\n----------------------------------------\n\nTITLE: Customizing Scraping Parameters in Python\nDESCRIPTION: This Python code demonstrates customizing scraping parameters such as `max_depth` and `delay`. These parameters are used to control the depth of crawling and the delay between requests, helping to avoid overloading the target website.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/spider_tools.mdx#2025-04-19_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n```python\nmax_depth=2, delay=1\n```\n```\n\n----------------------------------------\n\nTITLE: Recommending Treatment with Python\nDESCRIPTION: A function that proposes treatment plans based on diagnosis, providing suitable interventions or follow-up actions according to the severity of the condition identified.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/examples/healthcare-diagnosis.mdx#2025-04-19_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndef recommend_treatment(diagnosis: Dict):\n    \"\"\"Simulates treatment recommendation\"\"\"\n    treatments = {\n        \"serious_condition\": [\"immediate_intervention\", \"specialist_referral\"],\n        \"moderate_condition\": [\"medication\", \"follow_up\"],\n        \"mild_condition\": [\"rest\", \"observation\"]\n    }\n    return treatments.get(diagnosis[\"diagnosis\"], [\"general_care\"])\n```\n\n----------------------------------------\n\nTITLE: Setting OpenAI API Key in Bash\nDESCRIPTION: This Bash command sets the OpenAI API key as an environment variable, which is required for authorizing requests made by the RAG agents.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/rag.mdx#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport OPENAI_API_KEY=xxxxx\n```\n\n----------------------------------------\n\nTITLE: Installing PraisonAI with CrewAI Integration\nDESCRIPTION: Command to install PraisonAI package with CrewAI integration support. This installation provides access to task delegation, sequential/parallel execution, built-in tools, and structured workflows.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/api-reference/index.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install \"praisonai[crewai]\"\n```\n\n----------------------------------------\n\nTITLE: Hierarchical Process Diagram in Mermaid\nDESCRIPTION: Mermaid diagram showing a hierarchical agent process with a manager agent coordinating multiple worker agents.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/README.md#2025-04-19_snippet_12\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TB\n    Input[Input] --> Manager\n    \n    subgraph Agents\n        Manager[Manager Agent]\n        \n        subgraph Workers\n            direction LR\n            W1[Worker 1]\n            W2[Worker 2]\n            W3[Worker 3]\n        end\n        \n        Manager --> W1\n        Manager --> W2\n        Manager --> W3\n    end\n    \n    W1 --> Manager\n    W2 --> Manager\n    W3 --> Manager\n    Manager --> Output[Output]\n\n    classDef input fill:#8B0000,stroke:#7C90A0,color:#fff\n    classDef process fill:#189AB4,stroke:#7C90A0,color:#fff\n    classDef transparent fill:none,stroke:none\n\n    class Input,Output input\n    class Manager,W1,W2,W3 process\n    class Agents,Workers transparent\n```\n\n----------------------------------------\n\nTITLE: Creating Simple Knowledge Base in Python\nDESCRIPTION: This snippet illustrates adding a text document to a knowledge base using a Python object. It starts with creating a `KnowledgeBase` object and adds a file containing FAQs. Requires understanding of file operations and assumes the existence of the file `company_faq.txt`.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/course/agents/09-knowledge-bases.mdx#2025-04-19_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nkb = KnowledgeBase()\nkb.add_document(\"company_faq.txt\")\n```\n\n----------------------------------------\n\nTITLE: Implementing a Stock Price MCP Server in Python\nDESCRIPTION: Creates a custom MCP server that provides a tool to retrieve current stock prices using the yfinance library. The server is implemented using the FastMCP class from the mcp-python-sdk package.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/mcp/custom.mdx#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport yfinance as yf\nfrom mcp.server.fastmcp import FastMCP\n\nmcp = FastMCP(\"stock_prices\")\n\n@mcp.tool()\nasync def get_stock_price(ticker: str) -> str:\n    \"\"\"Get the current stock price for a given ticker symbol.\n    \n    Args:\n        ticker: Stock ticker symbol (e.g., AAPL, MSFT, GOOG)\n        \n    Returns:\n        Current stock price as a string\n    \"\"\"\n    if not ticker:\n        return \"No ticker provided\"\n    try:\n        stock = yf.Ticker(ticker)\n        info = stock.info\n        current_price = info.get('currentPrice') or info.get('regularMarketPrice')\n        if not current_price:\n            return f\"Could not retrieve price for {ticker}\"\n        return f\"${current_price:.2f}\"\n        \n    except Exception as e:\n        return f\"Error: {str(e)}\"\n\nif __name__ == \"__main__\":\n    mcp.run(transport='stdio')\n```\n\n----------------------------------------\n\nTITLE: Visualizing Healthcare Workflow using Mermaid\nDESCRIPTION: The Mermaid flowchart is used to visually represent the workflow of the automated healthcare diagnosis system. It covers several stages from symptom analysis to treatment recommendations, providing a clear path of operations and component interactions.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/examples/healthcare-diagnosis.mdx#2025-04-19_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n    In[In] --> Symptoms[Symptom Analyzer]\n    Symptoms --> Labs[Lab Processor]\n    Symptoms --> History[History Analyzer]\n    Labs --> Diagnosis[Diagnosis Generator]\n    History --> Diagnosis\n    Diagnosis --> Treatment[Treatment Recommender]\n    Treatment --> Out[Out]\n    \n    style In fill:#8B0000,color:#fff\n    style Symptoms fill:#2E8B57,color:#fff\n    style Labs fill:#2E8B57,color:#fff\n    style History fill:#2E8B57,color:#fff\n    style Diagnosis fill:#2E8B57,color:#fff\n    style Treatment fill:#2E8B57,color:#fff\n    style Out fill:#8B0000,color:#fff\n```\n\n----------------------------------------\n\nTITLE: Installing PraisonAI Agents with pip (Python)\nDESCRIPTION: Install the core PraisonAI package for Python development using pip package manager. Requires Python 3.10 or higher and a virtual environment is recommended.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/installation.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install praisonaiagents\n```\n\n----------------------------------------\n\nTITLE: Visualizing Image-to-Text Workflow with Mermaid\nDESCRIPTION: A flowchart showing the process flow from image input through text extraction, content analysis, and description generation to final text output.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/agents/image-to-text.mdx#2025-04-19_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n    In[Image Input] --> OCR[Text Extractor]\n    OCR --> Analyzer[Content Analyzer]\n    Analyzer --> Generator[Description Generator]\n    Generator --> Out[Text Output]\n    \n    style In fill:#8B0000,color:#fff\n    style OCR fill:#2E8B57,color:#fff\n    style Analyzer fill:#2E8B57,color:#fff\n    style Generator fill:#2E8B57,color:#fff\n    style Out fill:#8B0000,color:#fff\n```\n\n----------------------------------------\n\nTITLE: Defining Shell Operation Task in Python\nDESCRIPTION: Creates a task with a specific goal of system optimization, focusing on storage cleanup and performance enhancement\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/shell_tools.mdx#2025-04-19_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nTask(\n    description=\"Clean up system temp files and optimize storage\",\n    expected_output=\"Optimized system storage\"\n)\n```\n\n----------------------------------------\n\nTITLE: Function Call Arguments Completion in OpenAI API\nDESCRIPTION: Example of a response.function_call_arguments.done event in the OpenAI API event stream. This event indicates that function call arguments are fully generated and contains the complete JSON arguments.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/praisonai/ui/realtimeclient/realtimedocs.txt#2025-04-19_snippet_33\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"event_id\": \"event_5556\",\n    \"type\": \"response.function_call_arguments.done\",\n    \"response_id\": \"resp_002\",\n    \"item_id\": \"fc_001\",\n    \"output_index\": 0,\n    \"call_id\": \"call_001\",\n    \"arguments\": \"{\\\"location\\\": \\\"San Francisco\\\"}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing PraisonAI with Tools\nDESCRIPTION: Command to install PraisonAI agents package with additional tools support\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/introduction.mdx#2025-04-19_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\npip install praisonaiagents duckduckgo_search\n```\n\n----------------------------------------\n\nTITLE: Creating YAML Configuration - YAML\nDESCRIPTION: This YAML configuration defines how to set up roles and tasks for agents in the PraisonAI framework. It includes details about roles for writing and executing Python code.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/codeagent.mdx#2025-04-19_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nframework: praisonai\nprocess: sequential\ntopic: write and execute Python code\nroles:\n  developer:\n    backstory: Expert Python developer with strong coding skills.\n    goal: Write and execute Python code safely\n    role: Code Developer\n    tools:\n      - code_interpreter\n    tasks:\n      coding_task:\n        description: Write and execute a Python script to analyze data.\n        expected_output: Working Python script with execution results.\n```\n\n----------------------------------------\n\nTITLE: Setting API Key for OpenAI\nDESCRIPTION: This bash command sets the OpenAI API key as an environment variable named OPENAI_API_KEY. Replace 'your_api_key_here' with your actual OpenAI API key, a prerequisite for accessing OpenAI services.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/async.mdx#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport OPENAI_API_KEY=your_api_key_here\n```\n\n----------------------------------------\n\nTITLE: News Monitoring Configuration\nDESCRIPTION: Set up a news monitoring workflow with multiple agents.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/newspaper_tools.mdx#2025-04-19_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n# News monitor agent\nmonitor = Agent(\n    name=\"Monitor\",\n    role=\"News Monitor\",\n    tools=[get_article, get_news_sources, get_articles_from_source, get_trending_topics]\n)\n\n# Analysis agent\nanalyst = Agent(\n    name=\"Analyst\",\n    role=\"News Analyst\"\n)\n\n# Define tasks\nmonitor_task = Task(\n    description=\"Monitor tech news sources\",\n    agent=monitor\n)\n\nanalysis_task = Task(\n    description=\"Analyze news trends\",\n    agent=analyst\n)\n\n# Run workflow\nagents = PraisonAIAgents(\n    agents=[monitor, analyst],\n    tasks=[monitor_task, analysis_task]\n)\n```\n\n----------------------------------------\n\nTITLE: Mermaid Workflow Diagram for Prompt Chaining\nDESCRIPTION: Visual representation of a sequential LLM workflow with decision gate and multiple processing steps\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/promptchaining.mdx#2025-04-19_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n    In[In] --> LLM1[LLM Call 1] --> Gate{Gate}\n    Gate -->|Pass| LLM2[LLM Call 2] -->|Output 2| LLM3[LLM Call 3] --> Out[Out]\n    Gate -->|Fail| Exit[Exit]\n    \n    style In fill:#8B0000,color:#fff\n    style LLM1 fill:#2E8B57,color:#fff\n    style LLM2 fill:#2E8B57,color:#fff\n    style LLM3 fill:#2E8B57,color:#fff\n    style Out fill:#8B0000,color:#fff\n    style Exit fill:#8B0000,color:#fff\n```\n\n----------------------------------------\n\nTITLE: Visualizing Hierarchical Process Workflow using Mermaid\nDESCRIPTION: Mermaid diagram illustrating a hierarchical workflow where a manager agent coordinates multiple worker agents. This pattern allows for better task delegation and coordination between specialized agents.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/index.mdx#2025-04-19_snippet_7\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TB\n    Input[Input] --> Manager\n    \n    subgraph Agents\n        Manager[Manager Agent]\n        \n        subgraph Workers\n            direction LR\n            W1[Worker 1]\n            W2[Worker 2]\n            W3[Worker 3]\n        end\n        \n        Manager --> W1\n        Manager --> W2\n        Manager --> W3\n    end\n    \n    W1 --> Manager\n    W2 --> Manager\n    W3 --> Manager\n    Manager --> Output[Output]\n\n    classDef input fill:#8B0000,stroke:#7C90A0,color:#fff\n    classDef process fill:#189AB4,stroke:#7C90A0,color:#fff\n    classDef transparent fill:none,stroke:none\n\n    class Input,Output input\n    class Manager,W1,W2,W3 process\n    class Agents,Workers transparent\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for PraisonAI\nDESCRIPTION: Sets an environment variable to store the API key required by PraisonAI. This is crucial for authenticating requests to the AI service. The variable must be stored before running any agent.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/js/typescript-async.mdx#2025-04-19_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nexport OPENAI_API_KEY='your-api-key'\n```\n\n----------------------------------------\n\nTITLE: Article Extraction Function Examples\nDESCRIPTION: Demonstrate usage of get_article function with various parameters.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/newspaper_tools.mdx#2025-04-19_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# Basic usage\narticle = get_article(\"https://example.com/article\")\n\n# With language specification\narticle = get_article(\n    \"https://lemonde.fr/article\",\n    language=\"fr\"\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Response\nDESCRIPTION: This JSON snippet outlines how to trigger a response generation with specified configurations, including modalities and tools with their parameters.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/praisonai/ui/realtimeclient/realtimedocs.txt#2025-04-19_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"event_id\": \"event_234\",\n    \"type\": \"response.create\",\n    \"response\": {\n        \"modalities\": [\"text\", \"audio\"],\n        \"instructions\": \"Please assist the user.\",\n        \"voice\": \"alloy\",\n        \"output_audio_format\": \"pcm16\",\n        \"tools\": [\n            {\n                \"type\": \"function\",\n                \"name\": \"calculate_sum\",\n                \"description\": \"Calculates the sum of two numbers.\",\n                \"parameters\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"a\": { \"type\": \"number\" },\n                        \"b\": { \"type\": \"number\" }\n                    },\n                    \"required\": [\"a\", \"b\"]\n                }\n            }\n        ],\n        \"tool_choice\": \"auto\",\n        \"temperature\": 0.7,\n        \"max_output_tokens\": 150\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Visualizing Google Drive MCP Flow with Mermaid\nDESCRIPTION: A flowchart diagram showing the data flow between Query, AI Agent, Google Drive MCP, and Answer components of the system.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/mcp/gdrive.mdx#2025-04-19_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n    In[Query] --> Agent[AI Agent]\n    Agent --> Tool[Google Drive MCP]\n    Tool --> Agent\n    Agent --> Out[Answer]\n    \n    style In fill:#8B0000,color:#fff\n    style Agent fill:#2E8B57,color:#fff\n    style Tool fill:#0F9D58,color:#fff\n    style Out fill:#8B0000,color:#fff\n```\n\n----------------------------------------\n\nTITLE: Creating and Running a PraisonAI Instance in Python\nDESCRIPTION: This snippet demonstrates how to create an instance of the PraisonAI class using the previously defined YAML configuration and the necessary tools. It also handles environment variables to set API keys and runs the PraisonAI instance to obtain results.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/cookbooks/yaml/job_profile_matching_agents.ipynb#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom praisonai import PraisonAI\nfrom google.colab import userdata\n\n# Create a PraisonAI instance with the agent_yaml content\npraisonai = PraisonAI(agent_yaml=agent_yaml, tools=[CSVSearchTool, FileReadTool])\n\n# Add OPENAI_API_KEY Secrets to Google Colab on the Left Hand Side 🔑 or Enter Manually Below\nos.environ[\"OPENAI_API_KEY\"] = userdata.get('OPENAI_API_KEY') or \"ENTER OPENAI_API_KEY HERE\"\nos.environ[\"OPENAI_MODEL_NAME\"] = \"gpt-4o-mini\"\n\n# Run PraisonAI\nresult = praisonai.run()\n\n# Print the result\nprint(result) # 10/10\n\n```\n\n----------------------------------------\n\nTITLE: Visualizing Simple Reflex Agent Functionality Using Mermaid\nDESCRIPTION: This Mermaid diagram visualizes the operation of a Simple Reflex Agent, illustrating how it reacts to sensor input based on defined if-then rules. The diagram shows how sensor input is processed through conditions to trigger actions.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/course/agents/02-types-of-agents.mdx#2025-04-19_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\n```mermaid\ngraph LR\n    A[Sensor Input] --> B{If-Then Rules}\n    B --> C[Action]\n```\n```\n\n----------------------------------------\n\nTITLE: Running Search Agent\nDESCRIPTION: Initialize and execute the search agent with defined tasks\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/duckduckgo_tools.mdx#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nagents = PraisonAIAgents(\n    agents=[search_agent],\n    tasks=[search_task],\n    process=\"sequential\"\n)\nagents.start()\n```\n\n----------------------------------------\n\nTITLE: Running Python Agents Script\nDESCRIPTION: This command runs the Python script 'app.py' which contains the setup for PraisonAI agents. It assumes 'app.py' has been created and configured with agent and task information.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/langchain_tools.mdx#2025-04-19_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\npython app.py\n```\n\n----------------------------------------\n\nTITLE: Visualizing Vector Database Query Process in Mermaid\nDESCRIPTION: This Mermaid graph represents the semantic search process using vector databases. It covers converting user questions to vectors, finding similar vectors, retrieving related information, and generating an answer. Rendering requires Mermaid support.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/course/agents/09-knowledge-bases.mdx#2025-04-19_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD\n    A[User Question] --> B[Convert to Vector]\n    B --> C[Find Similar Vectors]\n    C --> D[Retrieve Related Information]\n    D --> E[Generate Answer]\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for GitHub and OpenAI API Keys\nDESCRIPTION: These commands set the GitHub Personal Access Token and OpenAI API key as environment variables. This is crucial for authenticating with GitHub and OpenAI services in the agent script.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/mcp/github.mdx#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport GITHUB_PERSONAL_ACCESS_TOKEN=your_github_token_here\nexport OPENAI_API_KEY=your_openai_api_key_here\n```\n\n----------------------------------------\n\nTITLE: Setting OpenAI API Key in Bash\nDESCRIPTION: This snippet sets the OpenAI API key as an environment variable, which is required for using OpenAI's API services with PraisonAI agents.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/langchain.mdx#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport OPENAI_API_KEY=your_api_key_here\n```\n\n----------------------------------------\n\nTITLE: Experimenting with AI Agent Queries\nDESCRIPTION: This Python snippet demonstrates changing user queries to test the AI agent's ability to respond to various topics. It requires the setup defined in earlier steps.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/course/agents/11-creating-your-first-agent.mdx#2025-04-19_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# Try different questions\nresponse = research_assistant.start(\"What are the benefits of exercise?\")\n# or\nresponse = research_assistant.start(\"How does artificial intelligence work?\")\n```\n\n----------------------------------------\n\nTITLE: Initializing Shell Management Agent in Python\nDESCRIPTION: Configures a specialized agent for safe and efficient shell command execution with predefined tools for system interaction and management\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/shell_tools.mdx#2025-04-19_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nAgent(\n    name=\"ShellManager\",\n    role=\"Command Line Specialist\",\n    goal=\"Execute shell commands safely and efficiently\",\n    tools=[execute_command, list_processes, kill_process, get_system_info]\n)\n```\n\n----------------------------------------\n\nTITLE: Monitoring Process Execution in PraisonAI\nDESCRIPTION: This snippet shows how to monitor the execution of processes in the PraisonAI system, enabling detailed logging of the process steps and their outcomes. It illustrates the importance of tracking inputs, outputs, and errors during execution.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/course/agents/08-agent-process.mdx#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nagents = PraisonAIAgents(\n    agents=[research_agent, writing_agent, editing_agent],\n    process=content_process,\n    verbose=True  # Enables detailed logging\n)\n```\n\n----------------------------------------\n\nTITLE: Framework Selection for PraisonAI\nDESCRIPTION: Demonstrates how to specify a particular agent framework (e.g., autogen) when running PraisonAI\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/nocode/run.mdx#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npraisonai --framework autogen\n```\n\n----------------------------------------\n\nTITLE: Installing PraisonAI - JavaScript\nDESCRIPTION: This command illustrates how to install the PraisonAI package using npm for JavaScript applications. This is essential for any project that will utilize PraisonAI.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/introduction.mdx#2025-04-19_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpm install praisonai\n```\n\n----------------------------------------\n\nTITLE: Installing PraisonAI via pip\nDESCRIPTION: This bash command is used to install the PraisonAI Agents package from PyPI using pip, the Python package installer. This step is a prerequisite for using the PraisonAI library.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/concepts/process.mdx#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npip install praisonaiagents\n```\n\n----------------------------------------\n\nTITLE: Visualizing Image Generation Process with Mermaid\nDESCRIPTION: This mermaid diagram visually represents the flow of the image generation process in PraisonAI. It highlights the steps from starting with an image description to using an Image Agent to produce an image URL. No dependencies are required for visual representation, but understanding of Mermaid syntax is needed.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/image-generation.mdx#2025-04-19_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n    In[Start] --> Process[Image Description]\n    Process --> Agent[Image Agent]\n    Agent --> Out[Image URL]\n    \n    style In fill:#8B0000,color:#fff\n    style Process fill:#2E8B57,color:#fff\n    style Agent fill:#2E8B57,color:#fff\n    style Out fill:#8B0000,color:#fff\n```\n\n----------------------------------------\n\nTITLE: Installing PraisonAI with Realtime Dependencies\nDESCRIPTION: The snippet provides the command to install PraisonAI along with its real-time dependencies. Ensure that you have Python and pip installed on your machine before executing this command.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/ui/realtime.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install \"praisonai[realtime]\"\n```\n\n----------------------------------------\n\nTITLE: Registering Tools Using Name-Function Pairs in TypeScript\nDESCRIPTION: Shows how to register tools in PraisonAI using the toolFunctions object with name-function pairs. This approach allows assigning custom names to the tool functions.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/src/praisonai-ts/examples/README-tool-examples.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Agent } from 'praisonai';\n\n// Define the functions directly\nasync function getWeather(location: string) {\n  console.log(`Getting weather for ${location}...`);\n  return `${Math.floor(Math.random() * 30)}°C`;\n}\n\nasync function getTime(location: string) {\n  console.log(`Getting time for ${location}...`);\n  const now = new Date();\n  return `${now.getHours()}:${now.getMinutes()}`;\n}\n\n// Create an agent with directly registered functions\nconst agent = new Agent({ \n  instructions: `You provide the current weather and time for requested locations.`,\n  name: \"DirectFunctionAgent\",\n  // Register functions with custom names\n  toolFunctions: {\n    get_weather: getWeather,\n    get_time: getTime\n  }\n});\n\n// Start the agent with a prompt that will trigger tool usage\nagent.start(\"What's the weather and time in Paris, France?\");\n```\n\n----------------------------------------\n\nTITLE: Configure Chainlit Authentication\nDESCRIPTION: This snippet describes creating a .env file to configure username and password details for Chainlit UI access.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/ui/ui.mdx#2025-04-19_snippet_2\n\nLANGUAGE: \nCODE:\n```\nCHAINLIT_USERNAME=admin\nCHAINLIT_USERNAME=admin\n```\n\n----------------------------------------\n\nTITLE: Visualizing Programming Agent Workflow with Mermaid\nDESCRIPTION: A flowchart diagram showing the workflow of a Programming Agent, illustrating how code requests flow through analysis, generation, execution, and debugging stages before producing output.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/agents/programming.mdx#2025-04-19_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n    In[Code Request] --> Analyzer[Code Analyzer]\n    Analyzer --> Generator[Code Generator]\n    Generator --> Executor[Code Executor]\n    Executor --> Debugger[Code Debugger]\n    Debugger --> Out[Output]\n    \n    style In fill:#8B0000,color:#fff\n    style Analyzer fill:#2E8B57,color:#fff\n    style Generator fill:#2E8B57,color:#fff\n    style Executor fill:#2E8B57,color:#fff\n    style Debugger fill:#2E8B57,color:#fff\n    style Out fill:#8B0000,color:#fff\n```\n\n----------------------------------------\n\nTITLE: Defining Agent Goal (Text)\nDESCRIPTION: This text snippet provides a good example of defining an agent's goal. It clearly states what the agent should accomplish by analyzing company quarterly reports and providing actionable investment insights. This clarity helps the agent focus on the intended objective.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/course/agents/04-agent-instructions.mdx#2025-04-19_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nYour goal is to analyze company quarterly reports and provide actionable investment insights.\n```\n\n----------------------------------------\n\nTITLE: Scraping Webpage Content in Python\nDESCRIPTION: The `ScrapeWebsiteTool` class is designed to fetch and parse the main text from a specified webpage URL. Using the `requests` library for HTTP requests and BeautifulSoup for parsing HTML, it extracts up to 5000 characters from the page's text content, ensuring usability of the tool in broad scenarios of web data extraction.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/cookbooks/yaml/stock_analysis_agents.ipynb#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"\nclass ScrapeWebsiteTool(BaseTool):\n    name: str = \"WebContentReaderTool\"\n    description: str = \"Fetches and reads the main text content from a specified webpage URL.\"\n\n    def _run(self, url: str) -> str:\n        \"\"\"Reads the content of a webpage and returns up to 5000 characters of text.\"\"\"\n        try:\n            response = requests.get(url, headers={'User-Agent': 'Mozilla/5.0'})\n            response.raise_for_status()\n            soup = BeautifulSoup(response.content, 'html.parser')\n            text_content = soup.get_text(separator=\"\\n\", strip=True)\n            return text_content[:5000]\n        except requests.exceptions.RequestException as e:\n            return f\"Failed to retrieve content from {url}: {e}\"\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables via Bash\nDESCRIPTION: In this bash command, the OpenAI API key is set as an environment variable. This is necessary for authenticating requests to the OpenAI API when using the PraisonAI framework.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/concepts/tasks.mdx#2025-04-19_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nexport OPENAI_API_KEY=your_openai_key\n```\n\n----------------------------------------\n\nTITLE: Implementing Function Caching with Memoization\nDESCRIPTION: Demonstrates how to implement caching for expensive operations using the memoize decorator. Caching improves performance by storing results of function calls to avoid redundant calculations.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/tools.mdx#2025-04-19_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n@cache.memoize(timeout=300)\ndef expensive_operation(data: str) -> Dict:\n    return process_expensive(data)\n```\n\n----------------------------------------\n\nTITLE: Defining a Shell Task\nDESCRIPTION: Sets up a task for an AI agent that involves organizing files in the current directory and expects a detailed listing as output.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/shell_tools.mdx#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nshell_task = Task(\n    description=\"List and organize files in the current directory.\",\n    expected_output=\"Organized file structure with detailed listing.\",\n    agent=shell_agent,\n    name=\"file_organization\"\n)\n```\n\n----------------------------------------\n\nTITLE: Setting OpenAI API Key\nDESCRIPTION: This snippet sets an environment variable with the user's OpenAI API key, which is required to use features within the PraisonAI Agents for completing the diagnosis tasks.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/examples/healthcare-diagnosis.mdx#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport OPENAI_API_KEY=your_api_key_here\n```\n\n----------------------------------------\n\nTITLE: Creating a Shell Command Agent\nDESCRIPTION: Defines an AI agent specifically for executing shell commands with a set of tools specified for command execution, process management, and system information retrieval.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/shell_tools.mdx#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nshell_agent = Agent(\n    name=\"ShellCommander\",\n    role=\"Shell Command Specialist\",\n    goal=\"Execute shell commands efficiently and safely.\",\n    backstory=\"Expert in command-line operations and automation.\",\n    tools=[execute_command, list_processes, kill_process, get_system_info],\n    self_reflect=False\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Task Callback Types in Python\nDESCRIPTION: Shows the type definition for task callbacks, supporting both synchronous and asynchronous callback functions using Union types.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/api/praisonaiagents/task/task.mdx#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Type definition\ncallback: Optional[Union[\n    Callable[[TaskOutput], Any],  # Sync callback\n    Callable[[TaskOutput], Coroutine[Any, Any, Any]]  # Async callback\n]]\n```\n\n----------------------------------------\n\nTITLE: AI Agents Flow Visualization - Mermaid\nDESCRIPTION: A visual flowchart using Mermaid syntax depicting the flow of tasks between AI agents, subprocesses, and outputs. Helps in understanding and communicating the interaction between tasks and agents.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/index.mdx#2025-04-19_snippet_4\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph LR\n    %% Define the main flow\n    Start([▶ Start]) --> Agent1\n    Agent1 --> Process[⚙ Process]\n    Process --> Agent2\n    Agent2 --> Output([✓ Output])\n    Process -.-> Agent1\n    \n    %% Define subgraphs for agents and their tasks\n    subgraph Agent1[ ]\n        Task1[📋 Task]\n        AgentIcon1[🤖 AI Agent]\n        Tools1[🔧 Tools]\n        \n        Task1 --- AgentIcon1\n        AgentIcon1 --- Tools1\n    end\n    \n    subgraph Agent2[ ]\n        Task2[📋 Task]\n        AgentIcon2[🤖 AI Agent]\n        Tools2[🔧 Tools]\n        \n        Task2 --- AgentIcon2\n        AgentIcon2 --- Tools2\n    end\n\n    classDef input fill:#8B0000,stroke:#7C90A0,color:#fff\n    classDef process fill:#189AB4,stroke:#7C90A0,color:#fff\n    classDef tools fill:#2E8B57,stroke:#7C90A0,color:#fff\n    classDef transparent fill:none,stroke:none\n\n    class Start,Output,Task1,Task2 input\n    class Process,AgentIcon1,AgentIcon2 process\n    class Tools1,Tools2 tools\n    class Agent1,Agent2 transparent\n```\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TB\n    subgraph Tools\n        direction TB\n        T3[Internet Search]\n        T1[Code Execution]\n        T2[Formatting]\n    end\n\n    Input[Input] ---> Agents\n    subgraph Agents\n        direction LR\n        A1[Agent 1]\n        A2[Agent 2]\n        A3[Agent 3]\n    end\n    Agents ---> Output[Output]\n\n    T3 --> A1\n    T1 --> A2\n    T2 --> A3\n\n    style Tools fill:#189AB4,color:#fff\n    style Agents fill:#8B0000,color:#fff\n    style Input fill:#8B0000,color:#fff\n    style Output fill:#8B0000,color:#fff\n```\n\n----------------------------------------\n\nTITLE: Setting OpenAI API Key\nDESCRIPTION: This snippet shows how to set the OpenAI API key as an environment variable. This API key is required to use the PraisonAI agents, as they often rely on OpenAI's models for natural language processing and other AI-related tasks.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/reddit.mdx#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n\"export OPENAI_API_KEY=\\\"Enter your API key\\\"\"\n```\n\n----------------------------------------\n\nTITLE: YAML Configuration for Email Workflow Agents\nDESCRIPTION: Defines a CrewAI framework configuration specifying roles, goals, and tasks for email management agents\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/cookbooks/yaml/email_workflow_management_agents.ipynb#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nagent_yaml = \"\"\"\nframework: \"crewai\"\ntopic: \"Automated Email Workflow Management\"\nroles:\n  email_filter_agent:\n    role: \"Senior Email Analyst\"\n    backstory: |\n      An experienced professional in email content analysis...\n    goal: |\n      Filter out non-essential emails such as newsletters...\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Recommendation Assistant with PraisonAI\nDESCRIPTION: This code creates a recommendation assistant using the `Agent` class. The agent is designed to provide personalized suggestions based on user preferences and requirements. In this example, the agent recommends books based on the user's expressed tastes.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/course/agents/19-personal-assistant-agents.mdx#2025-04-19_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nrecommendation_agent = Agent(\n    name=\"RecommendationAssistant\",\n    instructions=\"\"\"\n    You are a recommendation assistant who provides personalized suggestions.\n    \n    When making recommendations:\n    1. Understand the user's preferences and requirements\n    2. Consider constraints (budget, time, location, etc.)\n    3. Provide diverse options that match the criteria\n    4. Explain why each recommendation might be suitable\n    5. Give enough detail for the user to evaluate options\n    \n    For each recommendation, include:\n    - A brief description\n    - Key features or highlights\n    - Why it matches the user's needs\n    \"\"\",\n    llm=\"gpt-4o-mini\"  # Using the specified model\n)\n\n# Use the recommendation agent\nrecommendation_response = recommendation_agent.start(\n    \"\"\"\n    Can you recommend some books for me? I enjoy:\n    \n    - Science fiction and fantasy\n    - Books with complex, morally gray characters\n    - Intricate world-building\n    - Books that explore philosophical themes\n    \n    I've recently read and enjoyed:\n    - \"The Fifth Season\" by N.K. Jemisin\n    - \"Dune\" by Frank Herbert\n    - \"The Lies of Locke Lamora\" by Scott Lynch\n    \"\"\"\n)\nprint(recommendation_response)\n```\n\n----------------------------------------\n\nTITLE: Cancelling Response\nDESCRIPTION: This JSON snippet describes how to cancel an ongoing response with an optional client-generated ID.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/praisonai/ui/realtimeclient/realtimedocs.txt#2025-04-19_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"event_id\": \"event_567\",\n    \"type\": \"response.cancel\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring CrewAI Research Task with YAML\nDESCRIPTION: This YAML configuration specifies a research task using the CrewAI framework, focusing on analyzing data related to lung diseases. The example illustrates the roles and tools involved, highlighting the use of the WebsiteSearchTool for gathering data. Key dependencies include an understanding of YAML syntax and the CrewAI framework structure.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools.mdx#2025-04-19_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nframework: crewai\ntopic: research about the causes of lung disease\nroles:\n  research_analyst:\n    backstory: Experienced in analyzing scientific data related to respiratory health.\n    goal: Analyze data on lung diseases\n    role: Research Analyst\n    tasks:\n      data_analysis:\n        description: Gather and analyze data on the causes and risk factors of lung diseases.\n        expected_output: Report detailing key findings on lung disease causes.\n    tools:\n    - WebsiteSearchTool\n```\n\n----------------------------------------\n\nTITLE: Installing PraisonAI Agents Package\nDESCRIPTION: This snippet provides Bash commands for installing PraisonAI Agents and setting the OpenAI API key. It requires Python and pip to be pre-installed. By executing these commands, users can install the package and configure the required API key for usage.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/framework/praisonaiagents.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install praisonaiagents\nexport OPENAI_API_KEY=xxxxxxxxxxxxxxxxxxxxxx\n```\n\n----------------------------------------\n\nTITLE: Visualizing Filesystem MCP Flow with Mermaid\nDESCRIPTION: A flowchart showing the data flow between Query, AI Agent, Filesystem MCP Tool, and Answer output.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/mcp/filesystem.mdx#2025-04-19_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n    In[Query] --> Agent[AI Agent]\n    Agent --> Tool[Filesystem MCP]\n    Tool --> Agent\n    Agent --> Out[Answer]\n    \n    style In fill:#8B0000,color:#fff\n    style Agent fill:#2E8B57,color:#fff\n    style Tool fill:#FFA500,color:#fff\n    style Out fill:#8B0000,color:#fff\n```\n\n----------------------------------------\n\nTITLE: Specifying Sequential Processing in Python\nDESCRIPTION: This Python code snippet shows how to specify the processing type for AI agents, indicating that tasks should be executed sequentially. The `process` parameter is set to \"sequential\" to ensure tasks are performed one after the other.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/spider_tools.mdx#2025-04-19_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n```python\nprocess=\"sequential\"\n```\n```\n\n----------------------------------------\n\nTITLE: Visualizing Adaptive Learning Workflow with Mermaid Diagram\nDESCRIPTION: This Mermaid diagram visualizes the workflow of an adaptive learning system, showing the interactions between different components such as student assessment, content generation, performance evaluation, and difficulty adaptation. The diagram highlights the potential outcomes of each step and the flow of data between elements.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/examples/adaptive-learning.mdx#2025-04-19_snippet_0\n\nLANGUAGE: Mermaid\nCODE:\n```\nflowchart LR\n    In[In] --> Assessor[Student Assessor]\n    Assessor --> Generator[Content Generator]\n    Generator --> Evaluator[Performance Evaluator]\n    Evaluator --> Adapter[Difficulty Adapter]\n    Adapter --> |decrease/increase| Generator\n    Adapter --> |maintain| Out[Out]\n    \n    style In fill:#8B0000,color:#fff\n    style Assessor fill:#2E8B57,color:#fff\n    style Generator fill:#2E8B57,color:#fff\n    style Evaluator fill:#2E8B57,color:#fff\n    style Adapter fill:#2E8B57,color:#fff\n    style Out fill:#8B0000,color:#fff\n\n```\n\n----------------------------------------\n\nTITLE: Setting OpenAI API Key\nDESCRIPTION: Command to set the OpenAI API key as an environment variable for authentication.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/agents/wikipedia.mdx#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport OPENAI_API_KEY=your_api_key_here\n```\n\n----------------------------------------\n\nTITLE: Supply Chain Workflow Diagram\nDESCRIPTION: This Mermaid diagram illustrates the flow of information and processes within the supply chain risk management system. It depicts the progression from monitoring global events to analyzing their impact and generating mitigation strategies.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/examples/supply-chain.mdx#2025-04-19_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\n```mermaid\nflowchart LR\n    In[In] --> Monitor[Global Monitor]\n    Monitor -->|high/medium/critical| Analyzer[Impact Analyzer]\n    Analyzer --> Generator[Strategy Generator]\n    Generator --> Out[Out]\n    \n    style In fill:#8B0000,color:#fff\n    style Monitor fill:#2E8B57,color:#fff\n    style Analyzer fill:#2E8B57,color:#fff\n    style Generator fill:#2E8B57,color:#fff\n    style Out fill:#8B0000,color:#fff\n```\n```\n\n----------------------------------------\n\nTITLE: Installing PraisonAI Agents Package\nDESCRIPTION: This bash command installs the PraisonAI Agents package, a dependency necessary to implement asynchronous AI agents. Ensure Python's package manager, pip, is installed and accessible in the environment.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/async.mdx#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install praisonaiagents\n```\n\n----------------------------------------\n\nTITLE: Using PraisonAI with CrewAI Framework\nDESCRIPTION: Command to run PraisonAI specifically using the CrewAI framework for task execution.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/nocode/auto.mdx#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npraisonai --framework crewai --auto \"create a movie script about Dog in Moon\"\n```\n\n----------------------------------------\n\nTITLE: Using PraisonAI with Default Agents\nDESCRIPTION: Command to run PraisonAI using the default agent framework for automatic task execution.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/nocode/auto.mdx#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npraisonai --auto \"create a movie script about Dog in Moon\"\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Python MCP Server\nDESCRIPTION: Command to install the required Python packages (yfinance and mcp) using pip package manager.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/mcp/custom-python-server.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install yfinance mcp\n```\n\n----------------------------------------\n\nTITLE: Defining Data IO and Analysis Tasks\nDESCRIPTION: This snippet defines two tasks: `data_io` for importing and exporting data, and `data_analysis` for analyzing data. Each task is associated with a specific agent responsible for its execution.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/pandas_tools.mdx#2025-04-19_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n# Define tasks\nio_task = Task(\n    description=\"Import and export data\",\n    agent=io_agent,\n    name=\"data_io\"\n)\n\nanalysis_task = Task(\n    description=\"Analyze data\",\n    agent=analysis_agent,\n    name=\"data_analysis\"\n)   \n```\n\n----------------------------------------\n\nTITLE: Installing Required Dependencies\nDESCRIPTION: Installation of necessary Python packages including langchain_community, praisonai, and crawl4ai using pip.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/cookbooks/yaml/model_fee_retreival_agents.ipynb#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n%pip install langchain_community > /dev/null\n%pip install praisonai[crewai] > /dev/null\n%pip install crawl4ai > /dev/null\n```\n\n----------------------------------------\n\nTITLE: Data Summary Generation\nDESCRIPTION: Functions for generating comprehensive data summaries including statistics and metadata.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/pandas_tools.mdx#2025-04-19_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n# Get data summary\nsummary = get_summary(df)\n```\n\n----------------------------------------\n\nTITLE: Creating Excel Processing Agent\nDESCRIPTION: Configuration for creating a specialized Excel processing agent with defined role and tools\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/excel_tools.mdx#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nexcel_agent = Agent(\n    name=\"ExcelProcessor\",\n    role=\"Excel Processing Specialist\",\n    goal=\"Process Excel files efficiently and accurately.\",\n    backstory=\"Expert in Excel file manipulation and analysis.\",\n    tools=[read_excel, write_excel, merge_excel],\n    self_reflect=False\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Pandas Agent\nDESCRIPTION: Install the required Python packages including PraisonAI Agents and pandas.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/pandas_tools.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install praisonaiagents pandas\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Setting Environment Variables\nDESCRIPTION: This code snippet shows how to install the necessary Python packages (langchain-community and google-search-results) and set the required environment variables (SERPAPI_API_KEY and OPENAI_API_KEY).  These environment variables are essential for authenticating with the SerpAPI and OpenAI services. The installation is done using pip and environment variables are set using the export command.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/external/serp-search.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n```bash\npip install langchain-community google-search-results\nexport SERPAPI_API_KEY=your_api_key_here\nexport OPENAI_API_KEY=your_api_key_here\n```\n```\n\n----------------------------------------\n\nTITLE: Setting Anthropic API Key Environment Variable\nDESCRIPTION: Command to set the ANTHROPIC_API_KEY environment variable, which is required for authenticating with Anthropic's API services.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/models/anthropic.mdx#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport ANTHROPIC_API_KEY=xxxxxxxxxx\n```\n\n----------------------------------------\n\nTITLE: Setting OpenAI API Key as Environment Variable in Bash\nDESCRIPTION: This bash script sets the OpenAI API key as an environment variable. It assumes you have acquired your API key and can be set in environments that support bash commands. The key is necessary for authenticating requests to the OpenAI API.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/image-generation.mdx#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport OPENAI_API_KEY=your_api_key_here\n```\n\n----------------------------------------\n\nTITLE: Importing YouTubeSearchTool in Python\nDESCRIPTION: This snippet demonstrates importing the YouTubeSearchTool from the langchain_community tools in a Python module named tools.py. This tool is essential for performing YouTube searches within the PraisonAI framework.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/youtube.mdx#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# tools.py\nfrom langchain_community.tools import YouTubeSearchTool\n```\n\n----------------------------------------\n\nTITLE: Setting OpenAI API Key\nDESCRIPTION: This command demonstrates how to set the OpenAI API key as an environment variable. This API key is necessary to authenticate and authorize requests to the OpenAI API when using PraisonAI Agents.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/examples/research-assistant.mdx#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n```bash\nexport OPENAI_API_KEY=your_api_key_here\n```\n```\n\n----------------------------------------\n\nTITLE: Creating CSV Processing Agent\nDESCRIPTION: Configuration for creating a specialized CSV processing agent with defined role and tools.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/csv_tools.mdx#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ncsv_agent = Agent(\n    name=\"CSVProcessor\",\n    role=\"CSV Processing Specialist\",\n    goal=\"Process CSV files efficiently and accurately.\",\n    backstory=\"Expert in CSV file manipulation and analysis.\",\n    tools=[read_csv, write_csv, merge_csv],\n    self_reflect=False\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment for PraisonAI - Bash\nDESCRIPTION: This snippet demonstrates how to set up the OpenAI API key environment variable needed for using advanced features of PraisonAI. Replace 'your_openai_key' with an actual key obtained from OpenAI.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/concepts/agents.mdx#2025-04-19_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nexport OPENAI_API_KEY=your_openai_key\n```\n\n----------------------------------------\n\nTITLE: Configuring Python MCP Client with Environment Variables\nDESCRIPTION: This enhanced implementation of the Python MCP client uses environment variables for better security and flexibility. It retrieves Python path and server path from environment variables with fallback to default values.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/mcp/custom-python-client.mdx#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom praisonaiagents import Agent, MCP\n\n# Get paths from environment variables or use defaults\npython_path = os.getenv(\"PYTHON_PATH\", \"/path/to/python\")\nserver_path = os.getenv(\"SERVER_PATH\", \"/path/to/server.py\")\n\nagent = Agent(\n    instructions=\"\"\"You are a helpful assistant that can check stock prices and perform other tasks.\n    Use the available tools when relevant to answer user questions.\"\"\",\n    llm=\"gpt-4o-mini\",\n    tools=MCP(f\"{python_path} {server_path}\")\n)\n\nagent.start(\"What is the stock price of Tesla?\")\n```\n\n----------------------------------------\n\nTITLE: Installing PraisonAI Agent Dependencies with Pip\nDESCRIPTION: Installs the PraisonAI agents package with LLM support, which is required for using OpenRouter models with the agent.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/mcp/openrouter.mdx#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npip install \"praisonaiagents[llm]\"\n```\n\n----------------------------------------\n\nTITLE: AI News Research Agent Configuration\nDESCRIPTION: YAML configuration for setting up an AI news research agent with InternetSearchTool\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/custom.mdx#2025-04-19_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nframework: crewai\ntopic: research about the latest AI News and prepare a detailed report\nroles:\n  research_analyst:\n    backstory: Experienced in gathering and analyzing data related to AI news trends.\n    goal: Analyze AI News trends\n    role: Research Analyst\n    tasks:\n      gather_data:\n        description: Conduct in-depth research on the latest AI News trends from reputable sources.\n        expected_output: Comprehensive report on current AI News trends.\n    tools:\n    - InternetSearchTool\n```\n\n----------------------------------------\n\nTITLE: Session Updated Event\nDESCRIPTION: This JSON snippet is emitted when an existing session is updated and includes the updated session configuration.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/praisonai/ui/realtimeclient/realtimedocs.txt#2025-04-19_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"event_id\": \"event_5678\",\n    \"type\": \"session.updated\",\n    \"session\": {\n        \"id\": \"sess_001\",\n        \"object\": \"realtime.session\",\n        \"model\": \"gpt-4o-realtime-preview-2024-10-01\",\n        \"modalities\": [\"text\"],\n        \"instructions\": \"New instructions\",\n        \"voice\": \"alloy\",\n        \"input_audio_format\": \"pcm16\",\n        \"output_audio_format\": \"pcm16\",\n        \"input_audio_transcription\": {\n            \"enabled\": true,\n            \"model\": \"whisper-1\"\n        },\n        \"turn_detection\": {\n            \"type\": \"none\"\n        },\n        \"tools\": [],\n        \"tool_choice\": \"none\",\n        \"temperature\": 0.7,\n        \"max_output_tokens\": 200\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Single Responsibility Principle in PraisonAI\nDESCRIPTION: This snippet emphasizes the Single Responsibility Principle for tool design in PraisonAI. It provides a good example of a function `process_image` with a single, clear purpose and contrasts it with an example function `process_and_save_and_upload` that attempts to do too many things, which should be avoided.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/concepts/tools.mdx#2025-04-19_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n# Good Example\ndef process_image(image: np.array) -> np.array:\n    return processed_image\n\n# Avoid\ndef process_and_save_and_upload(image):\n    # Too many responsibilities\n    pass\n```\n\n----------------------------------------\n\nTITLE: Setting AgentQL API Key\nDESCRIPTION: Command to set the AgentQL API key as an environment variable\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/external/agentql-toolkit.mdx#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nos.environ[\"AGENTQL_API_KEY\"] = \"your_api_key_here\"\n```\n\n----------------------------------------\n\nTITLE: Visualizing PostgreSQL MCP Integration Flow with Mermaid\nDESCRIPTION: A flowchart diagram illustrating the data flow between a user query, AI agent, PostgreSQL MCP tool, and the final answer output.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/mcp/postgres.mdx#2025-04-19_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n    In[Query] --> Agent[AI Agent]\n    Agent --> Tool[PostgreSQL MCP]\n    Tool --> Agent\n    Agent --> Out[Answer]\n    \n    style In fill:#8B0000,color:#fff\n    style Agent fill:#2E8B57,color:#fff\n    style Tool fill:#336791,color:#fff\n    style Out fill:#8B0000,color:#fff\n```\n\n----------------------------------------\n\nTITLE: Installing PraisonAI with PDF Support\nDESCRIPTION: Installs the `PraisonAI` library with additional support for PDF document interaction. This requires `pip`, a package manager for Python.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/chat-with-pdf.mdx#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install \"praisonaiagents[knowledge]\"\n```\n\n----------------------------------------\n\nTITLE: Financial Calculations\nDESCRIPTION: Demonstrates basic financial calculations with parameters.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/calculator_tools.mdx#2025-04-19_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nresult = calculate_financial(1000, 5, 2)\n```\n\n----------------------------------------\n\nTITLE: Setting OpenAI API Key\nDESCRIPTION: This command sets the OpenAI API key as an environment variable. The API key is required for the PraisonAI agents to interact with the OpenAI API to perform code analysis and generate suggestions. It is a crucial step to authenticate the agent and enable its functionality.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/examples/code-review.mdx#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n\"export OPENAI_API_KEY=your_api_key_here\"\n```\n\n----------------------------------------\n\nTITLE: Function Call Arguments Delta in OpenAI API\nDESCRIPTION: Example of a response.function_call_arguments.delta event in the OpenAI API event stream. This event provides updates to the model-generated function call arguments as they're being streamed.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/praisonai/ui/realtimeclient/realtimedocs.txt#2025-04-19_snippet_32\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"event_id\": \"event_5354\",\n    \"type\": \"response.function_call_arguments.delta\",\n    \"response_id\": \"resp_002\",\n    \"item_id\": \"fc_001\",\n    \"output_index\": 0,\n    \"call_id\": \"call_001\",\n    \"delta\": \"{\\\"location\\\": \\\"San\\\"}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Clear Interfaces with Type Hints\nDESCRIPTION: Shows how to create explicit function interfaces with proper type annotations, clear parameter naming, and return type declarations. This approach improves code readability and maintainability.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/tools.mdx#2025-04-19_snippet_12\n\nLANGUAGE: python\nCODE:\n```\ndef search_tool(\n    query: str,\n    max_results: int = 10\n) -> List[Dict[str, Any]]:\n    \"\"\"\n    Search for information with clear parameters\n    \"\"\"\n    pass\n```\n\n----------------------------------------\n\nTITLE: Starting the AI Agents\nDESCRIPTION: Run this command in your terminal to initiate the AI agents that were set up with the previously defined configurations.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/tools_class.mdx#2025-04-19_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npython app.py\n```\n\n----------------------------------------\n\nTITLE: Configuring Agent with RedditSearchRun in YAML (crewai)\nDESCRIPTION: This YAML snippet demonstrates how to configure a crewai agent to use the RedditSearchRun tool for a research task. It defines an agent with a specific role, goal, and tasks, and assigns the `RedditSearchRun` tool to the agent for gathering and analyzing data on the causes and risk factors of lung diseases.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/reddit.mdx#2025-04-19_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n\"framework: crewai\ntopic: research about the causes of lung disease\nroles:\n  research_analyst:\n    backstory: Experienced in analyzing scientific data related to respiratory health.\n    goal: Analyze data on lung diseases\n    role: Research Analyst\n    tasks:\n      data_analysis:\n        description: Gather and analyze data on the causes and risk factors of lung\n          diseases.\n        expected_output: Report detailing key findings on lung disease causes.\n    tools:\n    - 'RedditSearchRun'\"\n```\n\n----------------------------------------\n\nTITLE: Defining Research Tasks in Python\nDESCRIPTION: Sets up specific tasks for paper search and review, assigning them to appropriate agents\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/arxiv_tools.mdx#2025-04-19_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nsearch_task = Task(\n    description=\"Find papers on AI ethics\",\n    agent=searcher\n)\n\nreview_task = Task(\n    description=\"Review and summarize findings\",\n    agent=reviewer\n)\n```\n\n----------------------------------------\n\nTITLE: Installing PraisonAI Agents with LLM Support in Bash\nDESCRIPTION: Installs the PraisonAI Agents package with additional LLM support. This command is necessary for using Litellm-compatible models and configurations.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/models.mdx#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npip install \"praisonaiagents[llm]\"\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for You Search Analysis Agent in Python\nDESCRIPTION: This snippet installs the required dependencies for the project, including langchain_community, praisonai[crewai], and duckduckgo_search, using pip in a Jupyter notebook environment.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/cookbooks/yaml/you_search_analysis_agents.ipynb#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Install dependencies without output\n%pip install langchain_community > /dev/null\n%pip install praisonai[crewai] > /dev/null\n%pip install duckduckgo_search > /dev/null\n```\n\n----------------------------------------\n\nTITLE: Installing PraisonAI Agents in Bash\nDESCRIPTION: The command installs the PraisonAI Agents package required for running the customer service automation. It is executed using the package manager to facilitate dependency management.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/examples/customer-service.mdx#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install praisonaiagents\n```\n\n----------------------------------------\n\nTITLE: Data Preparation Task\nDESCRIPTION: This snippet defines a task for cleaning and preparing data, assigned to the `prep_agent`.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/pandas_tools.mdx#2025-04-19_snippet_20\n\nLANGUAGE: python\nCODE:\n```\n# Define tasks\nprep_task = Task(\n    description=\"Clean and prepare data\",\n    agent=prep_agent\n)\n```\n\n----------------------------------------\n\nTITLE: Installing PraisonAI Agents\nDESCRIPTION: Install the `praisonaiagents` package and the `duckduckgo_search` package, which is a dependency for using the internet search tool.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/mini.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install praisonaiagents duckduckgo_search\n```\n\n----------------------------------------\n\nTITLE: Merging Monthly Reports Using Excel\nDESCRIPTION: This snippet merges multiple monthly Excel files into a single report. It uses the 'merge_excel' function, specifying the output filename and how to handle duplicate transaction IDs. Dependencies should include any libraries necessary for Excel manipulation, like pandas.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/excel_tools.mdx#2025-04-19_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nmonthly_files = [\"jan.xlsx\", \"feb.xlsx\", \"mar.xlsx\"]\nmerge_excel(\n    files=monthly_files,\n    output_file=\"q1_report.xlsx\",\n    how='outer',\n    on='transaction_id'\n)\n```\n\n----------------------------------------\n\nTITLE: Executing Code Function - Python\nDESCRIPTION: Safely executes provided Python code within an isolated environment while capturing output and handling errors, with options for defining custom execution environments.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/python_tools.mdx#2025-04-19_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nresult = execute_code(\"print('Hello, World!')\")\n\n# With custom environment\nresult = execute_code(\n    \"\"\"\n    x = 10\n    y = 20\n    print(f'Sum: {x + y}')\n    \"\"\",\n    globals_dict={'__builtins__': __builtins__},\n    timeout=5\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Knowledge Workflow Diagram\nDESCRIPTION: This Mermaid flowchart illustrates the process flow of AI agents from input via knowledge base vector store to output through agents. It includes input sources, processing through a vector store, and output agents, highlighting process visualization.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/concepts/knowledge.mdx#2025-04-19_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n    subgraph In[Input]\n        PDF[PDF]\n        TXT[TXT]\n        MD[MD]\n    end\n\n    subgraph Router[Vector Store]\n        DB[(Vector DB)]\n    end\n    \n    subgraph Out[Agents]\n        A1[Agent 1]\n        A2[Agent 2]\n        A3[Agent 3]\n    end\n\n    In --> Router\n    Router --> A1\n    Router --> A2\n    Router --> A3\n\n    style In fill:#8B0000,color:#fff\n    style Router fill:#2E8B57,color:#fff\n    style Out fill:#8B0000,color:#fff\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Agents - TypeScript\nDESCRIPTION: This TypeScript snippet showcases creating multiple agents with specific instructions and names, demonstrating how to utilize PraisonAI for more complex tasks.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/introduction.mdx#2025-04-19_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Agent, PraisonAIAgents } from 'praisonai';\n\nconst storyAgent = new Agent({\n  instructions: \"Generate a very short story (2-3 sentences) about artificial intelligence with emojis.\",\n  name: \"StoryAgent\"\n});\n\nconst summaryAgent = new Agent({\n  instructions: \"Summarize the provided AI story in one sentence with emojis.\",\n  name: \"SummaryAgent\"\n});\n\nconst agents = new PraisonAIAgents({\n  agents: [storyAgent, summaryAgent]\n});\n\nagents.start()\n```\n\n----------------------------------------\n\nTITLE: Creating Data Analysis Agent\nDESCRIPTION: Initialize an AI agent specialized for data analysis with specific tools and configurations.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/pandas_tools.mdx#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndata_agent = Agent(\n    name=\"DataAnalyst\",\n    role=\"Data Analysis Specialist\",\n    goal=\"Analyze and transform data efficiently.\",\n    backstory=\"Expert in data manipulation and statistical analysis.\",\n    tools=[read_csv, read_excel, write_csv, write_excel, filter_data, get_summary, group_by, pivot_table],\n    self_reflect=False\n)\n```\n\n----------------------------------------\n\nTITLE: Installing PraisonAI Agents with LLM Support using Bash\nDESCRIPTION: This snippet shows the command to install the PraisonAI Agents package with support for large language models (LLMs) such as DALL-E. It requires pip to be installed in your environment. The command is executed in a bash shell.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/image-generation.mdx#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install \"praisonaiagents[llm]\"\n```\n\n----------------------------------------\n\nTITLE: Setting OpenAI API Key\nDESCRIPTION: Sets the environment variable for the OpenAI API key, important for enabling AI functionalities. Replace `xxxxx` with the actual key.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/concepts/knowledge.mdx#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport OPENAI_API_KEY=xxxxx\n```\n\n----------------------------------------\n\nTITLE: Visualizing Agentic Orchestrator Worker using Mermaid\nDESCRIPTION: Mermaid diagram illustrating an orchestrator pattern where an LLM router distributes tasks to specialized workers and a synthesizer combines their outputs. This pattern enables coordination and aggregation of specialized processing.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/index.mdx#2025-04-19_snippet_10\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n    In[In] --> Router[LLM Call Router]\n    Router --> LLM1[LLM Call 1]\n    Router --> LLM2[LLM Call 2]\n    Router --> LLM3[LLM Call 3]\n    LLM1 --> Synthesizer[Synthesizer]\n    LLM2 --> Synthesizer\n    LLM3 --> Synthesizer\n    Synthesizer --> Out[Out]\n    \n    style In fill:#8B0000,color:#fff\n    style Router fill:#2E8B57,color:#fff\n    style LLM1 fill:#2E8B57,color:#fff\n    style LLM2 fill:#2E8B57,color:#fff\n    style LLM3 fill:#2E8B57,color:#fff\n    style Synthesizer fill:#2E8B57,color:#fff\n    style Out fill:#8B0000,color:#fff\n```\n\n----------------------------------------\n\nTITLE: Setting OpenAI API Key\nDESCRIPTION: Command to set the OpenAI API key as an environment variable.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/agents/video.mdx#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport OPENAI_API_KEY=your_api_key_here\n```\n\n----------------------------------------\n\nTITLE: Importing Components - Python\nDESCRIPTION: Imports essential classes and functions from the PraisonAI Agents package, enabling the use of code execution, analysis, formatting, linting, and disassembly features in Python projects.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/python_tools.mdx#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent, Task, PraisonAIAgents\nfrom praisonaiagents.tools import (\n    execute_code, analyze_code, format_code,\n    lint_code, disassemble_code\n)\n```\n\n----------------------------------------\n\nTITLE: Running PraisonAI Example Scenarios\nDESCRIPTION: Commands for running the provided example scripts that demonstrate different PraisonAI capabilities, requiring the OpenAI API key to be set.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/src/praisonai-ts/README.md#2025-04-19_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nexport OPENAI_API_KEY='your-api-key'\nnpx ts-node examples/simple/single-agent.ts\nnpx ts-node examples/simple/multi-agent.ts\n```\n\n----------------------------------------\n\nTITLE: Implementing Asynchronous Agent Start Method in Python\nDESCRIPTION: Asynchronous version of the start method that creates tasks and executes them, returning task status and results dictionary.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/api/praisonaiagents/agents/autoagents.mdx#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nasync def astart(self):\n    \"\"\"\n    Async version of start() method.\n    Creates tasks based on the instructions, then starts execution.\n    Returns the task status and results dictionary.\n    \"\"\"\n    return await super().astart()\n```\n\n----------------------------------------\n\nTITLE: Installing Required Dependencies for GitLab Integration\nDESCRIPTION: Command to install the PraisonAI agents and MCP packages needed for GitLab integration.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/mcp/gitlab.mdx#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install praisonaiagents mcp\n```\n\n----------------------------------------\n\nTITLE: Visualizing Environmental Monitoring Workflow\nDESCRIPTION: This Mermaid chart illustrates the flow of data and analysis through a series of AI agents designed for climate impact analysis. It visualizes the transition from data collection to strategy generation.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/examples/climate-impact.mdx#2025-04-19_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n    In[In] --> Monitor[Environmental Monitor]\n    Monitor --> Urban[Urban Analyzer]\n    Urban --> Climate[Climate Modeler]\n    Climate --> Impact[Impact Predictor]\n    Impact --> Strategy[Strategy Generator]\n    Strategy --> Out[Out]\n    \n    style In fill:#8B0000,color:#fff\n    style Monitor fill:#2E8B57,color:#fff\n    style Urban fill:#2E8B57,color:#fff\n    style Climate fill:#2E8B57,color:#fff\n    style Impact fill:#2E8B57,color:#fff\n    style Strategy fill:#2E8B57,color:#fff\n    style Out fill:#8B0000,color:#fff\n```\n\n----------------------------------------\n\nTITLE: Implementing Single Responsibility in Python Tools\nDESCRIPTION: Demonstrates the principle of single responsibility where each function should have one clear purpose. The example contrasts a well-designed function with a poor implementation that combines multiple responsibilities.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/tools.mdx#2025-04-19_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n# Good Example\ndef process_image(image: np.array) -> np.array:\n    return processed_image\n\n# Avoid\ndef process_and_save_and_upload(image):\n    # Too many responsibilities\n    pass\n```\n\n----------------------------------------\n\nTITLE: Installing the PraisonAI Agents Package\nDESCRIPTION: Use this bash command to install the PraisonAI Agents package which is essential for the setup of AI agents in your project.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/tools_class.mdx#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install praisonaiagents\n```\n\n----------------------------------------\n\nTITLE: Config.yaml Example\nDESCRIPTION: This YAML configuration file provides the settings for training a model with PraisonAI. It includes parameters for model selection, dataset configuration, training parameters, and quantization methods.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/train.mdx#2025-04-19_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nollama_save: \"true\"\nhuggingface_save: \"true\"\ntrain: \"true\"\n\nmodel_name: \"unsloth/Meta-Llama-3.1-8B-Instruct-bnb-4bit\"\nhf_model_name: \"mervinpraison/llama-3.1-instruct\"\nollama_model: \"mervinpraison/llama3.1-instruct\"\nmodel_parameters: \"8b\"\n\ndataset:\n  - name: \"yahma/alpaca-cleaned\"\n    split_type: \"train\"\n    processing_func: \"format_prompts\"\n    rename:\n      input: \"input\"\n      output: \"output\"\n      instruction: \"instruction\"\n    filter_data: false\n    filter_column_value: \"id\"\n    filter_value: \"alpaca\"\n    num_samples: 20000\n\ndataset_text_field: \"text\"\ndataset_num_proc: 2\npacking: false\n\nmax_seq_length: 2048\nload_in_4bit: true\nlora_r: 16\nlora_target_modules: \n  - \"q_proj\"\n  - \"k_proj\"\n  - \"v_proj\"\n  - \"o_proj\"\n  - \"gate_proj\"\n  - \"up_proj\"\n  - \"down_proj\"\nlora_alpha: 16\nlora_dropout: 0\nlora_bias: \"none\"\nuse_gradient_checkpointing: \"unsloth\"\nrandom_state: 3407\nuse_rslora: false\nloftq_config: null\n\nper_device_train_batch_size: 2\ngradient_accumulation_steps: 2\nwarmup_steps: 5\nnum_train_epochs: 1\nmax_steps: 10\nlearning_rate: 2.0e-4\nlogging_steps: 1\noptim: \"adamw_8bit\"\nweight_decay: 0.01\nlr_scheduler_type: \"linear\"\nseed: 3407\noutput_dir: \"outputs\"\n\nquantization_method: \n  - \"q4_k_m\"\n\n```\n\n----------------------------------------\n\nTITLE: Basic Equation Solving\nDESCRIPTION: Shows how to solve a simple mathematical equation.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/calculator_tools.mdx#2025-04-19_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nresult = solve_equation(\"2*x + 3 = 7\")\n```\n\n----------------------------------------\n\nTITLE: Running the Shell Agent\nDESCRIPTION: Executes the agent with a defined set of tasks in a sequential process. The agent is expected to perform the tasks using its tools.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/shell_tools.mdx#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nagents = PraisonAIAgents(\n    agents=[shell_agent],\n    tasks=[shell_task],\n    process=\"sequential\"\n)\nagents.start()\n```\n\n----------------------------------------\n\nTITLE: Importing AI Agent Components\nDESCRIPTION: Demonstrates how to import essential classes and functions from the praisonaiagents package needed for creating agents and utilizing shell tools.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/shell_tools.mdx#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent, Task, PraisonAIAgents\nfrom praisonaiagents.tools import execute_command, list_processes, kill_process, get_system_info\n```\n\n----------------------------------------\n\nTITLE: Jupyter Notebook Configuration for Google Colab\nDESCRIPTION: Specifies Jupyter notebook configuration with GPU acceleration and Python 3 kernel for Google Colab environment\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/developers/googlecolab-tools.mdx#2025-04-19_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\njupyter:\\n  accelerator: GPU\\n  colab:\\n    gpuType: T4\\n  kernelspec:\\n    display_name: Python 3\\n    name: python3\\n  language_info:\\n    name: python\\n  nbformat: 4\\n  nbformat_minor: 0\n```\n\n----------------------------------------\n\nTITLE: Running Your Agent Script - Bash\nDESCRIPTION: This snippet shows how to execute the Python script containing your agent's code. Running this command will initiate the agent and handle its associated tasks.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/concepts/agents.mdx#2025-04-19_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npython app.py\n```\n\n----------------------------------------\n\nTITLE: Creating a Docker Compose configuration\nDESCRIPTION: This docker-compose.yml file sets up two services: one for the application and one for file watching. It allows for live reload during local development.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/ui/chat.mdx#2025-04-19_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3.8'\n\nservices:\n  app:\n    build:\n      context: .\n      dockerfile: Dockerfile.dev\n    volumes:\n      - .:/app\n    ports:\n      - \"5555:5555\"\n    environment:\n      FLASK_ENV: development\n    command: flask run --host=0.0.0.0\n\n  watch:\n    image: alpine:latest\n    volumes:\n      - .:/app\n    command: sh -c \"apk add --no-cache inotify-tools && while inotifywait -r -e modify,create,delete /app; do kill -HUP 1; done\"\n```\n\n----------------------------------------\n\nTITLE: Flowchart Representation of Neural Architecture Process using Mermaid\nDESCRIPTION: This code snippet visualizes the workflow of the Neural Architecture process using Mermaid syntax. The flowchart outlines the data flow from input analysis through different stages including hardware analysis, architecture generation, hyperparameter optimization, performance estimation, and deployment optimization.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/examples/neural-architecture.mdx#2025-04-19_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n    In[In] --> Hardware[Hardware Analyzer]\n    Hardware --> Generator[Architecture Generator]\n    Generator --> Hyperparams[Hyperparameter Optimizer]\n    Hyperparams --> Performance[Performance Estimator]\n    Performance --> Deployment[Deployment Optimizer]\n    Deployment --> Out[Out]\n    \n    style In fill:#8B0000,color:#fff\n    style Hardware fill:#2E8B57,color:#fff\n    style Generator fill:#2E8B57,color:#fff\n    style Hyperparams fill:#2E8B57,color:#fff\n    style Performance fill:#2E8B57,color:#fff\n    style Deployment fill:#2E8B57,color:#fff\n    style Out fill:#8B0000,color:#fff\n```\n\n----------------------------------------\n\nTITLE: Configuring Groq with OpenAI-Compatible Endpoint in Bash\nDESCRIPTION: Sets environment variables to use Groq's API with an OpenAI-compatible endpoint. This configuration allows PraisonAI to use Groq's language models through the OpenAI interface.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/models.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport OPENAI_API_KEY=groq-api-key\nexport OPENAI_BASE_URL=https://api.groq.com/openai/v1\n```\n\n----------------------------------------\n\nTITLE: Running Airbnb Search Script in Python\nDESCRIPTION: This command executes the Python script containing the Airbnb search agent, initiating the search process.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/mcp/airbnb.mdx#2025-04-19_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npython airbnb_search.py\n```\n\n----------------------------------------\n\nTITLE: Installing Required Packages with pip\nDESCRIPTION: This snippet shows how to install necessary Python packages using pip, including praisonaiagents, langchain-community, and wikipedia. These packages are prerequisites for setting up and running PraisonAI agents. Required to execute any subsequent code depending on these libraries.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/langchain_tools.mdx#2025-04-19_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npip install praisonaiagents langchain-community wikipedia\n```\n\n----------------------------------------\n\nTITLE: Data Analysis Task\nDESCRIPTION: This snippet defines a task for analyzing prepared data, assigned to the `analyst` agent.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/pandas_tools.mdx#2025-04-19_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nanalysis_task = Task(\n    description=\"Analyze prepared data\",\n    agent=analyst\n)\n```\n\n----------------------------------------\n\nTITLE: Installing PraisonAI Framework in TypeScript\nDESCRIPTION: Commands to install the PraisonAI framework using npm or yarn, facilitating the quick setup of AI agent projects.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/js/typescript.mdx#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install praisonai\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add praisonai\n```\n\n----------------------------------------\n\nTITLE: Implementing Search Tools Classes and Functions\nDESCRIPTION: Defines custom search tool classes including ExaSearchTool and InternetSearchTool with methods for web searching, finding similar content, and retrieving webpage contents.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/cookbooks/yaml/meeting_prep_and_strategy_agents.ipynb#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport os\nimport requests\nfrom bs4 import BeautifulSoup\nfrom praisonai_tools import BaseTool\nfrom langchain.tools import tool\nfrom exa_py import Exa\n\nfrom duckduckgo_search import DDGS\n\n\nclass ExaSearchTool(BaseTool):\n    name: str = \"ExaSearchTool\"\n    description: str = \"A tool to search for and retrieve webpages or similar content based on a query or URL.\"\n\n    def _run(self, query: str) -> str:\n        \"\"\"Default method for running a simple search.\"\"\"\n        return self.search(query)\n\n    @classmethod\n    def tools(cls):\n        \"\"\"Returns all tool functions as a list.\"\"\"\n        return [search_tool, find_similar_tool, get_contents_tool]\n\n\n@tool(\"Search Webpages\")\ndef search_tool(query: str) -> str:\n    \"\"\"Searches for webpages based on the query string and returns up to 3 results.\"\"\"\n    exa_instance = Exa(api_key=os.environ[\"EXA_API_KEY\"])\n    return exa_instance.search(query, use_autoprompt=True, num_results=3)\n\n\n@tool(\"Find Similar Webpages\")\ndef find_similar_tool(url: str) -> str:\n    \"\"\"Finds webpages similar to a specified URL and returns up to 3 results.\"\"\"\n    exa_instance = Exa(api_key=os.environ[\"EXA_API_KEY\"])\n    return exa_instance.find_similar(url, num_results=3)\n\n\n@tool(\"Get Webpage Contents\")\ndef get_contents_tool(ids: str) -> str:\n    \"\"\"Retrieves the contents of specified webpage IDs (as a list) and returns up to 1000 characters per page.\"\"\"\n    exa_instance = Exa(api_key=os.environ[\"EXA_API_KEY\"])\n    ids_list = eval(ids)  # Convert string input to a list\n    contents = exa_instance.get_contents(ids_list)\n    formatted_contents = [\n        content[:1000] for content in str(contents).split(\"URL:\")  # Limit each content to 1000 characters\n    ]\n    return \"\\n\\n\".join(formatted_contents)\n\n\nclass InternetSearchTool(BaseTool):\n    name: str = \"InternetSearchTool\"\n    description: str = \"Search Internet for relevant information based on a query or latest news\"\n\n    def _run(self, query: str):\n        ddgs = DDGS()\n        results = ddgs.text(keywords=query, region='wt-wt', safesearch='moderate', max_results=5)\n        return results\n```\n\n----------------------------------------\n\nTITLE: Response Completed Event in JSON\nDESCRIPTION: Example of an event object returned when a Response is done streaming. It includes the event ID, event type, and the complete response details including output content and token usage information.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/praisonai/ui/realtimeclient/realtimedocs.txt#2025-04-19_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"event_id\": \"event_3132\",\n    \"type\": \"response.done\",\n    \"response\": {\n        \"id\": \"resp_001\",\n        \"object\": \"realtime.response\",\n        \"status\": \"completed\",\n        \"status_details\": null,\n        \"output\": [\n            {\n                \"id\": \"msg_006\",\n                \"object\": \"realtime.item\",\n                \"type\": \"message\",\n                \"status\": \"completed\",\n                \"role\": \"assistant\",\n                \"content\": [\n                    {\n                        \"type\": \"text\",\n                        \"text\": \"Sure, how can I assist you today?\"\n                    }\n                ]\n            }\n        ],\n        \"usage\": {\n            \"total_tokens\": 50,\n            \"input_tokens\": 20,\n            \"output_tokens\": 30\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Reddit Search Analysis\nDESCRIPTION: Installation of required Python packages including langchain_community, praisonai with crewai extension, and duckduckgo_search using pip installer.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/cookbooks/yaml/reddit_search_analysis_agents.ipynb#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n%pip install langchain_community > /dev/null\n%pip install praisonai[crewai] > /dev/null\n%pip install duckduckgo_search > /dev/null\n```\n\n----------------------------------------\n\nTITLE: Installing PraisonAI with AutoGen Integration\nDESCRIPTION: Command to install PraisonAI package with AG2 (formerly AutoGen) integration support. This installation enables multi-agent conversations, code execution capabilities, built-in tools, and flexible interactions.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/api-reference/index.mdx#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install \"praisonai[autogen]\"\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Agents - JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates the creation of multiple agents with distinct roles using the PraisonAI framework. It showcases how to initialize and group agents effectively.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/introduction.mdx#2025-04-19_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst { Agent, PraisonAIAgents } = require('praisonai');\n\nconst researchAgent = new Agent({ instructions: 'Research about AI' });\nconst summariseAgent = new Agent({ instructions: 'Summarise research agent\\'s findings' });\n\nconst agents = new PraisonAIAgents({ agents: [researchAgent, summariseAgent] });\nagents.start();\n```\n\n----------------------------------------\n\nTITLE: Creating Python Virtual Environment on Mac/Linux\nDESCRIPTION: Steps to create and activate a virtual environment for Python development on Mac and Linux systems. Provides isolation for project dependencies.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/installation.mdx#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npython -m venv praisonai-env\nsource praisonai-env/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Running Research Agent\nDESCRIPTION: Initialization and execution of the research agent system\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/arxiv_tools.mdx#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nagents = PraisonAIAgents(\n    agents=[research_agent],\n    tasks=[research_task],\n    process=\"sequential\"\n)\nagents.start()\n```\n\n----------------------------------------\n\nTITLE: Visualizing Agentic Parallelization using Mermaid\nDESCRIPTION: Mermaid diagram illustrating parallel execution of multiple LLM calls followed by aggregation. This pattern improves performance by distributing tasks across multiple agents simultaneously.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/index.mdx#2025-04-19_snippet_12\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n    In[In] --> LLM2[LLM Call 2]\n    In --> LLM1[LLM Call 1]\n    In --> LLM3[LLM Call 3]\n    LLM1 --> Aggregator[Aggregator]\n    LLM2 --> Aggregator\n    LLM3 --> Aggregator\n    Aggregator --> Out[Out]\n    \n    style In fill:#8B0000,color:#fff\n    style LLM1 fill:#2E8B57,color:#fff\n    style LLM2 fill:#2E8B57,color:#fff\n    style LLM3 fill:#2E8B57,color:#fff\n    style Aggregator fill:#fff,color:#000\n    style Out fill:#8B0000,color:#fff\n```\n\n----------------------------------------\n\nTITLE: Setting OpenAI API Key as Environment Variable\nDESCRIPTION: This snippet demonstrates how to set an OpenAI API key as an environment variable in the terminal. This API key is necessary for making authenticated requests to OpenAI services during agent execution.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/langchain_tools.mdx#2025-04-19_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nexport OPENAI_API_KEY=your_api_key_here\n```\n\n----------------------------------------\n\nTITLE: Importing YFinance Tools in Python\nDESCRIPTION: Import essential components from PraisonAI and YFinance for creating financial data agents and tasks. Includes agent, task, and specific financial data retrieval tools.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/yfinance_tools.mdx#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent, Task, PraisonAIAgents\nfrom praisonaiagents.tools import get_stock_price, get_stock_info, get_historical_data\n```\n\n----------------------------------------\n\nTITLE: Setting OpenAI API Key in Environment\nDESCRIPTION: This Bash command sets the OpenAI API key as an environment variable to allow the AutoAgents framework to authenticate and use OpenAI services. It must be executed in the terminal before running the AI agents.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/autoagents.mdx#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport OPENAI_API_KEY=your_api_key_here\n```\n\n----------------------------------------\n\nTITLE: Running the XAI-Airbnb Integration Script\nDESCRIPTION: A bash command to execute the Python script that creates and runs the AI agent. This launches the application that uses XAI's Grok model to process Airbnb search queries.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/mcp/xai.mdx#2025-04-19_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npython xai_airbnb.py\n```\n\n----------------------------------------\n\nTITLE: Configuring Various LLM Providers for PraisonAI in Bash\nDESCRIPTION: Provides environment variable configurations for different LLM providers including Ollama, Groq, Google Gemini, Jan AI, LM Studio, and OpenRouter. These configurations allow PraisonAI to use various language models through OpenAI-compatible endpoints.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/models.mdx#2025-04-19_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nexport OPENAI_BASE_URL=http://localhost:11434/v1\n```\n\nLANGUAGE: bash\nCODE:\n```\nexport OPENAI_API_KEY=xxxxxxxxxxx\nexport OPENAI_BASE_URL=https://api.groq.com/openai/v1\n```\n\nLANGUAGE: bash\nCODE:\n```\nexport OPENAI_API_KEY=xxxxxxxxxxx\nexport OPENAI_BASE_URL=https://generativelanguage.googleapis.com/v1beta/openai/\n```\n\nLANGUAGE: bash\nCODE:\n```\nexport OPENAI_BASE_URL=http://localhost:1337/v1\n```\n\nLANGUAGE: bash\nCODE:\n```\nexport OPENAI_BASE_URL=http://localhost:1234/v1\n```\n\nLANGUAGE: bash\nCODE:\n```\nexport OPENAI_API_KEY=xxxxxxxxxxx\nexport OPENAI_BASE_URL=https://openrouter.ai/api/v1\n```\n\n----------------------------------------\n\nTITLE: Conditional Process Flow in Mermaid\nDESCRIPTION: This snippet depicts a conditional process flow in Mermaid, illustrating how the workflow can change based on decision points. It's useful for tasks requiring varying approaches depending on circumstances.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/course/agents/08-agent-process.mdx#2025-04-19_snippet_4\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD\n    A[Start] --> B{Decision Point}\n    B -->|Condition A| C[Agent 1]\n    B -->|Condition B| D[Agent 2]\n    C --> E[Complete]\n    D --> E\n```\n\n----------------------------------------\n\nTITLE: PraisonAI Installation Commands\nDESCRIPTION: Various installation commands for PraisonAI including basic installation, framework-specific installations, and additional features\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/api.mdx#2025-04-19_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# Basic installation\npip install praisonai\n\n# Framework-specific installations\npip install \"praisonai[crewai]\"    # Install with CrewAI support\npip install \"praisonai[autogen]\"   # Install with AG2 support\npip install \"praisonai[crewai,autogen]\"  # Install both frameworks\n\n# Additional features\npip install \"praisonai[ui]\"        # Install UI support\npip install \"praisonai[chat]\"      # Install Chat interface\npip install \"praisonai[code]\"      # Install Code interface\npip install \"praisonai[realtime]\"  # Install Realtime voice interaction\npip install \"praisonai[call]\"      # Install Call feature\n```\n\n----------------------------------------\n\nTITLE: Running the Streamlit Application\nDESCRIPTION: Command to start the Streamlit application named 'app.py'. This command launches the UI in the default web browser.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/ui/streamlit/gemini-streamlit.mdx#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nstreamlit run app.py\n```\n\n----------------------------------------\n\nTITLE: Setting OpenAI API Key as Environment Variable\nDESCRIPTION: Command to set the OpenAI API key as an environment variable, which is required for the PraisonAI agent to function properly.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/agents/programming.mdx#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport OPENAI_API_KEY=your_api_key_here\n```\n\n----------------------------------------\n\nTITLE: Running Pandas Agent\nDESCRIPTION: Initialize and execute the data analysis agent with defined tasks.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/pandas_tools.mdx#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nagents = PraisonAIAgents(\n    agents=[data_agent],\n    tasks=[analysis_task],\n    process=\"sequential\"\n)\nagents.start()\n```\n\n----------------------------------------\n\nTITLE: Running ArXiv Tools Examples via Command Line\nDESCRIPTION: Command line instruction to execute the ArXiv tools example file using ts-node. This allows users to run the example that demonstrates searching and downloading papers from ArXiv.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/src/praisonai-ts/examples/tools/README.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx ts-node examples/tools/arxiv-tools.ts\n```\n\n----------------------------------------\n\nTITLE: Accessing Internet Search Tool\nDESCRIPTION: Example of referencing the internet search tool within the PraisonAI Agents library.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/mini.mdx#2025-04-19_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nTools.internet_search\n```\n\n----------------------------------------\n\nTITLE: Printing Result in Python\nDESCRIPTION: This snippet prints the value stored in the `result` variable to the standard output. The `result` variable is expected to contain the final answer/output of the exoplanet research task, as indicated by the surrounding text. The task output details exoplanet discoveries.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/developers/googlecolab.mdx#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n\"print(result)\"\n```\n\n----------------------------------------\n\nTITLE: Installing DuckDuckGo Search Package\nDESCRIPTION: Command to install the DuckDuckGo search package via pip package manager\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/duckduckgo.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install duckduckgo_search\n```\n\n----------------------------------------\n\nTITLE: Launching PraisonAI Chat\nDESCRIPTION: This command launches the PraisonAI Chat application. Ensure that the previous steps have been completed successfully before executing this command.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/ui/chat.mdx#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npraisonai chat\n```\n\n----------------------------------------\n\nTITLE: Visualizing Recommendation Agent Workflow with Mermaid\nDESCRIPTION: A flowchart demonstrating the recommendation process flow from user preferences through content search, preference analysis, and recommendation generation to final output.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/agents/recommendation.mdx#2025-04-19_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n    In[User Preferences] --> Search[Content Search]\n    Search --> Analyzer[Preference Analyzer]\n    Analyzer --> Generator[Recommendation Generator]\n    Generator --> Out[Recommendations]\n    \n    style In fill:#8B0000,color:#fff\n    style Search fill:#2E8B57,color:#fff\n    style Analyzer fill:#2E8B57,color:#fff\n    style Generator fill:#2E8B57,color:#fff\n    style Out fill:#8B0000,color:#fff\n```\n\n----------------------------------------\n\nTITLE: Running the PraisonAI Article Generation System\nDESCRIPTION: Initializes and runs the PraisonAI system with the defined YAML configuration and custom search tool. Sets the OpenAI API key from Google Colab secrets or manual entry, configures the model to use gpt-4o-mini, and executes the article generation process.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/cookbooks/yaml/article_generation_agents.ipynb#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom praisonai import PraisonAI\nfrom google.colab import userdata\n\n# Create a PraisonAI instance with the agent_yaml content\npraisonai = PraisonAI(agent_yaml=agent_yaml, tools=[InternetSearchTool])\n\n# Add OPENAI_API_KEY Secrets to Google Colab on the Left Hand Side 🔑 or Enter Manually Below\nos.environ[\"OPENAI_API_KEY\"] = userdata.get('OPENAI_API_KEY') or \"ENTER OPENAI_API_KEY HERE\"\nos.environ[\"OPENAI_MODEL_NAME\"] = \"gpt-4o-mini\"\n\n# Run PraisonAI\nresult = praisonai.run()\n\n# Print the result\nprint(result) # 10/10\n```\n\n----------------------------------------\n\nTITLE: No-Code YAML Configuration for Gemini Agent\nDESCRIPTION: YAML configuration for a CrewAI-based agent using Google's Gemini model to create a movie script about a cat on Mars, including role definition, LLM configuration, and task description.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/models/google.mdx#2025-04-19_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nframework: crewai\ntopic: create movie script about cat in mars\nroles:\n  researcher:\n    backstory: Skilled in finding and organizing information, with a focus on research\n      efficiency.\n    goal: Gather information about Mars and cats\n    role: Researcher\n    llm:  \n      model: \"google/gemini-1.5-flash-001\"\n    tasks:\n      gather_research:\n        description: Research and gather information about Mars, its environment,\n          and cats, including their behavior and characteristics.\n        expected_output: Document with research findings, including interesting facts\n          and information.\n    tools:\n    - ''\n```\n\n----------------------------------------\n\nTITLE: Importing Newspaper Components\nDESCRIPTION: Import required classes and functions from praisonaiagents package.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/newspaper_tools.mdx#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent, Task, PraisonAIAgents\nfrom praisonaiagents.tools import get_article, get_news_sources, get_articles_from_source, get_trending_topics\n```\n\n----------------------------------------\n\nTITLE: Running the Filesystem Agent\nDESCRIPTION: Command to execute the Python script containing the filesystem agent implementation.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/mcp/filesystem.mdx#2025-04-19_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npython filesystem_agent.py\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies - Bash\nDESCRIPTION: Installs the necessary PraisonAI Agents package using pip. This step is essential before utilizing the code execution tools provided in this documentation.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/python_tools.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install praisonaiagents\n```\n\n----------------------------------------\n\nTITLE: Executing the Python Script in Bash\nDESCRIPTION: This snippet shows how to execute the `app.py` Python script from the command line using the `python` interpreter. This command will run the script and start the AI agents defined within it.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/concepts/tools.mdx#2025-04-19_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npython app.py\n```\n\n----------------------------------------\n\nTITLE: Importing Calculator Components\nDESCRIPTION: Imports necessary components from praisonaiagents library including Agent, Task, and calculation tools.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/calculator_tools.mdx#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent, Task, PraisonAIAgents\nfrom praisonaiagents.tools import (\n    evaluate, solve_equation, convert_units,\n    calculate_statistics, calculate_financial\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Tools for CrewAI Storybook Agents\nDESCRIPTION: Defines three custom tools: GenerateImageTool for creating illustrations using DALL-E based on chapter content, FileReadTool (imported, not defined), and MarkdownToPDFTool for converting the final markdown story to PDF using the mdpdf command-line utility.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/cookbooks/yaml/story_book_author_agents.ipynb#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n#ToDo: Resolve File Read Issue\nimport os\nimport requests\nimport re\nimport subprocess\nfrom openai import OpenAI\nfrom crewai_tools import tool\nfrom praisonai_tools import FileReadTool\n\n\n# Tool to generate an image from a chapter's content and character details\n@tool\ndef GenerateImageTool(chapter_content_and_character_details: str) -> str:\n    \"\"\"\n    Generates an image for a given chapter content, including character and location details.\n    Uses the OpenAI image generation API, saves it in the current folder, and returns the image path.\n\n    Args:\n        chapter_content_and_character_details (str): Description for the image generation.\n\n    Returns:\n        str: Path to the saved image.\n    \"\"\"\n    client = OpenAI(api_key=os.getenv(\"OPENAI_API_KEY\"))\n\n    response = client.images.generate(\n        model=\"dall-e-3\",\n        prompt=f\"Image is about: {chapter_content_and_character_details}. Style: Illustration. Create an illustration incorporating a vivid palette with an emphasis on shades of azure and emerald, augmented by splashes of gold for contrast and visual interest. The style should evoke the intricate detail and whimsy of early 20th-century storybook illustrations, blending realism with fantastical elements to create a sense of wonder and enchantment. The composition should be rich in texture, with a soft, luminous lighting that enhances the magical atmosphere. Attention to the interplay of light and shadow will add depth and dimensionality, inviting the viewer to delve into the scene. DON'T include ANY text in this image. DON'T include colour palettes in this image.\",\n        size=\"1024x1024\",\n        quality=\"standard\",\n        n=1,\n    )\n\n    # Get image URL and save it locally\n    image_url = response.data[0].url\n    words = chapter_content_and_character_details.split()[:5]\n    safe_words = [re.sub(r'[^a-zA-Z0-9_]', '', word) for word in words]\n    filename = \"_\".join(safe_words).lower() + \".png\"\n    filepath = os.path.join(os.getcwd(), filename)\n\n    # Download the image from the generated URL\n    image_response = requests.get(image_url)\n    if image_response.status_code == 200:\n        with open(filepath, 'wb') as file:\n            file.write(image_response.content)\n    else:\n        print(\"Failed to download the image.\")\n        return \"\"\n\n    return filepath\n\n@tool\ndef MarkdownToPDFTool(markdownfile_name: str) -> str:\n    \"\"\"\n    Converts a Markdown file to a PDF document using the mdpdf command line application.\n\n    Args:\n        markdownfile_name (str): Path to the input Markdown file.\n\n    Returns:\n        str: Path to the generated PDF file.\n    \"\"\"\n    output_file = os.path.splitext(markdownfile_name)[0] + '.pdf'\n\n    # Command to convert markdown to PDF using mdpdf\n    cmd = ['mdpdf', '--output', output_file, markdownfile_name]\n\n    # Execute the command and handle errors if any\n    try:\n        subprocess.run(cmd, check=True)\n    except subprocess.CalledProcessError as e:\n        print(f\"Error during PDF conversion: {e}\")\n        return \"\"\n\n    return output_file\n```\n\n----------------------------------------\n\nTITLE: Installing PraisonAI Package\nDESCRIPTION: This Bash snippet installs the PraisonAI Agents package, which is necessary to construct the healthcare diagnosis agents used in the Python script.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/examples/healthcare-diagnosis.mdx#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install praisonaiagents\n```\n\n----------------------------------------\n\nTITLE: Running the Script - JavaScript\nDESCRIPTION: This command shows how to execute a JavaScript file that employs the PraisonAI framework. This is done via Node.js for executing 'app.js'.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/introduction.mdx#2025-04-19_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nnode app.js\n```\n\n----------------------------------------\n\nTITLE: Setup and Run PraisonAI UI\nDESCRIPTION: The snippet demonstrates how to set environment variables and run the PraisonAI UI, leveraging Chainlit for additional features like secret management.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/ui/ui.mdx#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport OPENAI_API_KEY=\"Enter your API key\"\nchainlit create-secret\nexport CHAINLIT_AUTH_SECRET=xxxxxxxx\npraisonai ui\n```\n\nLANGUAGE: bash\nCODE:\n```\npython -m praisonai ui\n```\n\n----------------------------------------\n\nTITLE: Implementing Pipeline Pattern in Mermaid\nDESCRIPTION: This Mermaid diagram depicts the Pipeline Pattern where agents operate in a sequential manner to accomplish distinct stages of a task, with each agent being responsible for a specific part.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/course/agents/07-multi-agent-systems.mdx#2025-04-19_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph LR\n    A[Agent 1] --> B[Agent 2]\n    B --> C[Agent 3]\n```\n\n----------------------------------------\n\nTITLE: Starting Agents from YAML Configuration\nDESCRIPTION: This snippet shows how to start the agents defined in the `agents.yaml` file using the `praisonai` command. This command parses the YAML file and creates and starts the agents and tasks defined within it.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/concepts/tools.mdx#2025-04-19_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\npraisonai agents.yaml\n```\n\n----------------------------------------\n\nTITLE: Setting OpenAI API Key for Sequential Thinking Agent\nDESCRIPTION: Command to set the OpenAI API key as an environment variable in the terminal, which is required for the agent to function.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/mcp/sequential-thinking.mdx#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport OPENAI_API_KEY=your_openai_api_key_here\n```\n\n----------------------------------------\n\nTITLE: Parallel Process Flow in Mermaid\nDESCRIPTION: This snippet represents a parallel process flow using Mermaid, allowing multiple agents to work simultaneously on different parts of a task. It is optimal for tasks that can be divided into independent sections.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/course/agents/08-agent-process.mdx#2025-04-19_snippet_3\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD\n    A[Start] --> B[Agent 1]\n    A --> C[Agent 2]\n    A --> D[Agent 3]\n    B --> E[Combine Results]\n    C --> E\n    D --> E\n    E --> F[Complete]\n```\n\n----------------------------------------\n\nTITLE: Creating Calculator Agent\nDESCRIPTION: Creates an AI agent specialized in mathematical computations with specific tools and configurations.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/calculator_tools.mdx#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ncalculator_agent = Agent(\n    name=\"MathAssistant\",\n    role=\"Mathematical Computation Specialist\",\n    goal=\"Perform accurate mathematical calculations and solve equations.\",\n    backstory=\"Expert in mathematical computations and problem-solving.\",\n    tools=[\n        evaluate, solve_equation, convert_units,\n        calculate_statistics, calculate_financial\n    ],\n    self_reflect=False\n)\n```\n\n----------------------------------------\n\nTITLE: Setting OpenAI API Key - Bash\nDESCRIPTION: This command sets the OpenAI API key as an environment variable in the terminal, which is required for the agents to function properly.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/repetitive.mdx#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport OPENAI_API_KEY=your_api_key_here\n```\n\n----------------------------------------\n\nTITLE: Visualizing Shopping Agent Workflow with Mermaid\nDESCRIPTION: A flowchart showing the data flow of the shopping agent from product query through store search, price analysis, and comparison to final report.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/agents/shopping.mdx#2025-04-19_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n    In[Product Query] --> Search[Store Search]\n    Search --> Analyzer[Price Analyzer]\n    Analyzer --> Comparator[Price Comparator]\n    Comparator --> Out[Price Report]\n    \n    style In fill:#8B0000,color:#fff\n    style Search fill:#2E8B57,color:#fff\n    style Analyzer fill:#2E8B57,color:#fff\n    style Comparator fill:#2E8B57,color:#fff\n    style Out fill:#8B0000,color:#fff\n```\n\n----------------------------------------\n\nTITLE: Installing Required Dependencies for Azure Container Apps\nDESCRIPTION: Installs the necessary Python packages including langchain components and Azure dynamic sessions support.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/external/azure-code-interpreter.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install langchain-azure-dynamic-sessions langchain-openai langchainhub langchain langchain-community\n```\n\n----------------------------------------\n\nTITLE: Visualizing Customer Service Workflow with Mermaid\nDESCRIPTION: This Mermaid flowchart visualizes the customer service workflow, illustrating the sequence of operations from query classification to response optimization. It helps in understanding the agent interactions in a structured format.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/examples/customer-service.mdx#2025-04-19_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n  In[In] --> Classifier[Query Classifier]\n  Classifier --> Handler[Query Handler]\n  Handler --> Evaluator[Satisfaction Evaluator]\n  Evaluator --> Optimizer[Response Optimizer]\n  Optimizer --> Out[Out]\n  Optimizer --> Classifier\n  \n  style In fill:#8B0000,color:#fff\n  style Out fill:#8B0000,color:#fff\n  style Classifier fill:#2E8B57,color:#fff\n  style Handler fill:#2E8B57,color:#fff\n  style Evaluator fill:#2E8B57,color:#fff\n  style Optimizer fill:#2E8B57,color:#fff\n```\n\n----------------------------------------\n\nTITLE: Configuring Groq API via OpenAI Compatibility Layer\nDESCRIPTION: Sets up environment variables to use Groq's API through OpenAI compatibility layer. Configures the API key and base URL for making requests to Groq's API endpoint.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/models/groq.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport OPENAI_API_KEY=xxxxxxxxxxx\nexport OPENAI_BASE_URL=https://api.groq.com/openai/v1\n```\n\n----------------------------------------\n\nTITLE: Install PraisonAI with DuckDuckGo Search\nDESCRIPTION: Installs PraisonAI agents and the DuckDuckGo search package. This is necessary for enabling agents to perform internet searches.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/quickstart.mdx#2025-04-19_snippet_18\n\nLANGUAGE: Terminal\nCODE:\n```\npip install praisonai duckduckgo_search\n```\n\n----------------------------------------\n\nTITLE: Running Customer Service Automation in Bash\nDESCRIPTION: This command executes the Python application to start the customer service workflow process defined in `app.py`. It kickstarts the automated handling of customer queries.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/examples/customer-service.mdx#2025-04-19_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npython app.py\n```\n\n----------------------------------------\n\nTITLE: Setting Max Tokens with Environment Variables\nDESCRIPTION: This command sets the `PRAISONAI_MAX_TOKENS` environment variable, which controls the maximum number of tokens used by PraisonAI Code. This limits the computational resources used. Change the number to suit your needs.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/ui/code.mdx#2025-04-19_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n\"export PRAISONAI_MAX_TOKENS=1000000\"\n```\n\n----------------------------------------\n\nTITLE: Exporting Query Results to CSV\nDESCRIPTION: Examples of exporting query results to CSV files with parameter support.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/duckdb_tools.mdx#2025-04-19_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# Export simple query results\nsuccess = export_csv(\n    \"SELECT * FROM employees\",\n    \"exported_employees.csv\"\n)\n\n# Export filtered data with parameters\nsuccess = export_csv(\n    \"SELECT * FROM employees WHERE department = ? AND year = ?\",\n    \"eng_2023.csv\",\n    params=('Engineering', 2023)\n)\n```\n\n----------------------------------------\n\nTITLE: Running the Python MCP Client\nDESCRIPTION: This command executes the Python MCP client script to start the agent and connect to the MCP server for retrieving stock information.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/mcp/custom-python-client.mdx#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npython custom-python-client.py\n```\n\n----------------------------------------\n\nTITLE: Setting OpenAI API Key Environment Variable\nDESCRIPTION: Configure the OpenAI API key as an environment variable. Required for authenticating and using OpenAI services in PraisonAI.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/installation.mdx#2025-04-19_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nexport OPENAI_API_KEY=your_openai_key\n```\n\n----------------------------------------\n\nTITLE: Processing Lab Results with Python\nDESCRIPTION: A function that simulates laboratory result processing, generating varied results that categorize blood counts, inflammation levels, and additional markers. This is used to emulate the type of data an AI might process.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/examples/healthcare-diagnosis.mdx#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef process_lab_results():\n    \"\"\"Simulates lab result processing\"\"\"\n    results = [\n        {\"blood_count\": \"abnormal\", \"inflammation\": \"high\", \"markers\": \"elevated\"},\n        {\"blood_count\": \"normal\", \"inflammation\": \"low\", \"markers\": \"normal\"},\n        {\"blood_count\": \"normal\", \"inflammation\": \"medium\", \"markers\": \"elevated\"}\n    ]\n    return results[int(time.time()) % 3]\n```\n\n----------------------------------------\n\nTITLE: Running TypeScript AI Agent Script\nDESCRIPTION: Command to run the TypeScript file `app.ts` using ts-node, allowing the execution of scripts that employ PraisonAI agents.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/js/typescript.mdx#2025-04-19_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpx ts-node app.ts\n```\n\n----------------------------------------\n\nTITLE: Visualizing Video Analysis Workflow with Mermaid\nDESCRIPTION: A flowchart showing the video analysis pipeline from input through analysis, detection, transcription to final output.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/agents/video.mdx#2025-04-19_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n    In[Video Input] --> Analyzer[Content Analyzer]\n    Analyzer --> Detector[Object Detector]\n    Detector --> Transcriber[Text Transcriber]\n    Transcriber --> Out[Analysis Report]\n    \n    style In fill:#8B0000,color:#fff\n    style Analyzer fill:#2E8B57,color:#fff\n    style Detector fill:#2E8B57,color:#fff\n    style Transcriber fill:#2E8B57,color:#fff\n    style Out fill:#8B0000,color:#fff\n```\n\n----------------------------------------\n\nTITLE: Setting Google API Environment Variables\nDESCRIPTION: Configuration of environment variables for Google Custom Search Engine ID and API key authentication.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/external/google-search.mdx#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nos.environ[\"GOOGLE_CSE_ID\"] = \"YOUR_API_KEY\"\nos.environ[\"GOOGLE_API_KEY\"] = \"YOUR_API_KEY\"\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Slack Integration\nDESCRIPTION: Sets the required environment variables for Slack integration, including the Slack Bot Token, Slack Team ID, and OpenAI API Key.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/mcp/slack.mdx#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport SLACK_BOT_TOKEN=your_slack_bot_token_here\nexport SLACK_TEAM_ID=your_slack_team_id_here\nexport OPENAI_API_KEY=your_openai_api_key_here\n```\n\n----------------------------------------\n\nTITLE: Installing PraisonAI Agents Dependency\nDESCRIPTION: Installs the praisonaiagents package which is required to utilize the provided functionalities such as shell command execution and agent management.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/shell_tools.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install praisonaiagents\n```\n\n----------------------------------------\n\nTITLE: Creating an AI Agent with JavaScript\nDESCRIPTION: JavaScript code example showing how to create and use an AI agent.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/README.md#2025-04-19_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst { Agent } = require('praisonai');\nconst agent = new Agent({ instructions: 'You are a helpful AI assistant' });\nagent.start('Write a movie script about a robot in Mars');\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for MCP Server\nDESCRIPTION: Command to install the required Python packages (yfinance and mcp) for the custom MCP server implementation.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/mcp/custom.mdx#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install yfinance mcp\n```\n\n----------------------------------------\n\nTITLE: Setting Hugging Face Token in Bash\nDESCRIPTION: This bash command sets the Hugging Face token as an environment variable. This token is required to authenticate and upload models to the Hugging Face Hub.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/train.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport HF_TOKEN=xxxxxxxxxxxxxx\n```\n\n----------------------------------------\n\nTITLE: Installing PraisonAI Agents Package\nDESCRIPTION: Package installation for PraisonAI agents with LLM dependencies using pip\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/reasoning-extract.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install \"praisonaiagents[llm]\"\n```\n\n----------------------------------------\n\nTITLE: Setting OpenAI API Key\nDESCRIPTION: Command to set the OpenAI API key as an environment variable, which is required for the Markdown Agent to function.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/agents/markdown.mdx#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport OPENAI_API_KEY=your_api_key_here\n```\n\n----------------------------------------\n\nTITLE: Configuring Google API Key for PraisonAI in Bash\nDESCRIPTION: Sets the Google API key as an environment variable for use with PraisonAI. This step is necessary when using Google's language models like Gemini.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/models.mdx#2025-04-19_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nexport GOOGLE_API_KEY=your-api-key\n```\n\n----------------------------------------\n\nTITLE: Defining Excel Processing Task\nDESCRIPTION: Task definition for Excel processing operations with expected outputs\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/excel_tools.mdx#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nexcel_task = Task(\n    description=\"Process and analyze Excel spreadsheets.\",\n    expected_output=\"Processed Excel data with analysis.\",\n    agent=excel_agent,\n    name=\"excel_processing\"\n)\n```\n\n----------------------------------------\n\nTITLE: Installing PraisonAI Agents Package\nDESCRIPTION: Installs the necessary Python packages for creating AI agents with PraisonAI. Dependencies include praisonaiagents, sympy, and pint.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/mathagent.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install praisonaiagents sympy pint\n```\n\n----------------------------------------\n\nTITLE: Run PraisonAI with LLM option\nDESCRIPTION: Runs a PraisonAI command and specifies a different LLM model. The `--llm` option allows the user to choose from different models for their specific needs.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/cli.mdx#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n\"praisonai \\\"write a movie script in 3 lines\\\" --llm gpt-4o-mini\"\n```\n\n----------------------------------------\n\nTITLE: YAML Task Definition\nDESCRIPTION: This code defines a task associated with YAML operations using the `Task` class. The task is given a description indicating the type of YAML operation to be performed.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/yaml_tools.mdx#2025-04-19_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nTask(description=\"yaml_operation\")\n```\n\n----------------------------------------\n\nTITLE: Setting Gemini API Key Environment Variable\nDESCRIPTION: This command sets the Gemini API key as an environment variable. This allows PraisonAI Code to use the Gemini 1.5 model. Replace 'xxxxxxxxx' with your actual Gemini API key.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/ui/code.mdx#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n\"export GEMINI_API_KEY=xxxxxxxxx\"\n```\n\n----------------------------------------\n\nTITLE: Running PraisonAI Configuration File\nDESCRIPTION: This snippet explains how to execute a PraisonAI configuration file defined in YAML, which initiates the specified agent process.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/langchain.mdx#2025-04-19_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npraisonai agents.yaml\n```\n\n----------------------------------------\n\nTITLE: Set OpenAI API Key\nDESCRIPTION: This command sets the OpenAI API key as an environment variable, which is required to authenticate with the OpenAI API when using the PraisonAI Agents. Ensure to replace `your_api_key_here` with your actual OpenAI API key.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/parallelisation.mdx#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport OPENAI_API_KEY=your_api_key_here\n```\n\n----------------------------------------\n\nTITLE: Visualizing Airbnb MCP Integration Flow with Mermaid\nDESCRIPTION: This diagram illustrates the flow of data between the input, AI agent, Airbnb MCP tool, and output using Mermaid syntax.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/mcp/airbnb.mdx#2025-04-19_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n    In[In] --> Agent[AI Agent]\n    Agent --> Tool[Airbnb MCP]\n    Tool --> Agent\n    Agent --> Out[Out]\n    \n    style In fill:#8B0000,color:#fff\n    style Agent fill:#2E8B57,color:#fff\n    style Tool fill:#FF5A5F,color:#fff\n    style Out fill:#8B0000,color:#fff\n```\n\n----------------------------------------\n\nTITLE: Installing Stock Analysis Dependencies in Python\nDESCRIPTION: This code snippet demonstrates how to install necessary Python packages for stock analysis, such as langchain_community and praisonai, using Jupyter notebook's pip magic command. The installation is done without displaying output, ensuring the environment is set up with essential libraries for stock analysis tools and utilities.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/cookbooks/yaml/stock_analysis_agents.ipynb#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"\n# Install dependencies without output\n%pip install langchain_community > /dev/null\n%pip install praisonai[crewai] > /dev/null\n%pip install duckduckgo-search > /dev/null\n%pip install sec-api > /dev/null\n%pip install embedchain > /dev/null\n%pip install html2text > /dev/null\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Visualizing Brave Search MCP Integration Flow with Mermaid\nDESCRIPTION: A flowchart diagram illustrating the data flow between a query, the AI agent, the Brave Search MCP tool, and the final answer output. The diagram visualizes how the components interact within the integration architecture.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/mcp/bravesearch.mdx#2025-04-19_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n    In[Query] --> Agent[AI Agent]\n    Agent --> Tool[Brave Search MCP]\n    Tool --> Agent\n    Agent --> Out[Answer]\n    \n    style In fill:#8B0000,color:#fff\n    style Agent fill:#2E8B57,color:#fff\n    style Tool fill:#4169E1,color:#fff\n    style Out fill:#8B0000,color:#fff\n```\n\n----------------------------------------\n\nTITLE: Installing Python Dependencies with pip\nDESCRIPTION: This bash command installs the required Python packages for the Hackathon Judge Streamlit app. It uses pip, the Python package installer, to install Streamlit, praisonaiagents, OpenCV, and MoviePy. These packages are essential for the application to function correctly.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/ui/streamlit/hackathon-judge-streamlit.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"pip install streamlit praisonaiagents opencv-python moviepy\"\n```\n\n----------------------------------------\n\nTITLE: Initializing PraisonAI Configuration\nDESCRIPTION: Creates an initial agents.yaml configuration file using the praisonai CLI tool. This command generates a configuration based on a sample creative writing prompt.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/nocode/initialise.mdx#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npraisonai --init create a movie script about dog in moon\n```\n\n----------------------------------------\n\nTITLE: Installing PraisonAI Agents Package\nDESCRIPTION: Installation command for the PraisonAI Agents package using pip\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/examples/predictive-maintenance.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install praisonaiagents\n```\n\n----------------------------------------\n\nTITLE: Interactive Code Editor iFrame Implementation - HTML\nDESCRIPTION: HTML iframe implementation for embedding a code execution environment. Configures the sandbox with specific permissions and loads a pre-configured Python example.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/playground.mdx#2025-04-19_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<iframe \n  id=\"codeExecutionFrame\"\n  src=\"https://code-execution-server-praisonai.replit.app/?code=import%20openai%0A%0Aclient%20%3D%20openai.OpenAI()%0Aresult%20%3D%20client.chat.completions.create(%0A%20%20%20%20model%3D%22gpt-3.5-turbo%22%2C%0A%20%20%20%20messages%3D%5B%0A%20%20%20%20%20%20%20%20%7B%22role%22%3A%20%22user%22%2C%20%22content%22%3A%20%22Hello%20World%22%7D%0A%20%20%20%20%5D%0A)%0A%0Aprint(result.choices%5B0%5D.message.content)\" \n  width=\"100%\" \n  height=\"800px\" \n  frameborder=\"0\"\n  allow=\"clipboard-read; clipboard-write\"\n  scrolling=\"yes\"\n  onload=\"resizeIframe(this)\"\n></iframe>\n```\n\n----------------------------------------\n\nTITLE: Installing PraisonAI Agents Package\nDESCRIPTION: Instructs on installing the PraisonAI Agents package using pip to enable AI agent functionalities.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/evaluator-optimiser.mdx#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install praisonaiagents\n```\n\n----------------------------------------\n\nTITLE: Building JavaScript Package using NPM\nDESCRIPTION: This snippet builds the PraisonAI project using npm. It compiles the TypeScript code and bundles the package for distribution. Ensure the project has been properly configured and all dependencies installed.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/js/development.mdx#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Creating a Single Agent - JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to create a single agent using the PraisonAI framework. It includes necessary imports and an instruction to start the agent.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/introduction.mdx#2025-04-19_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst { Agent } = require('praisonai');\nconst agent = new Agent({ instructions: 'You are a helpful AI assistant' });\nagent.start('Write a movie script about a robot in Mars');\n```\n\n----------------------------------------\n\nTITLE: Setting up PraisonAI User Interface\nDESCRIPTION: Instructions for installing and configuring the PraisonAI UI component. Requires additional Chainlit authentication setup.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/nocode/tldr.mdx#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Install UI support\npip install \"praisonai[ui]\"\n\n# Set up environment\nexport OPENAI_API_KEY=\"Enter your API key\"\nchainlit create-secret\nexport CHAINLIT_AUTH_SECRET=xxxxxxxx\n\n# Run UI\npraisonai ui\n```\n\n----------------------------------------\n\nTITLE: Visualizing Workflow Process with Conditions using Mermaid\nDESCRIPTION: Mermaid diagram showing an advanced workflow process with conditional execution paths. This pattern supports complex task relationships and decision-based routing between different agent paths.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/index.mdx#2025-04-19_snippet_8\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph LR\n    Input[Input] --> Start\n    \n    subgraph Workflow\n        direction LR\n        Start[Start] --> C1{Condition}\n        C1 --> |Yes| A1[Agent 1]\n        C1 --> |No| A2[Agent 2]\n        A1 --> Join\n        A2 --> Join\n        Join --> A3[Agent 3]\n    end\n    \n    A3 --> Output[Output]\n\n    classDef input fill:#8B0000,stroke:#7C90A0,color:#fff\n    classDef process fill:#189AB4,stroke:#7C90A0,color:#fff\n    classDef decision fill:#2E8B57,stroke:#7C90A0,color:#fff\n    classDef transparent fill:none,stroke:none\n\n    class Input,Output input\n    class Start,A1,A2,A3,Join process\n    class C1 decision\n    class Workflow transparent\n```\n\n----------------------------------------\n\nTITLE: Running the Wikipedia Search Analysis Pipeline in Python\nDESCRIPTION: Initializes and runs the PraisonAI instance with the defined agent configuration and tools. Sets up environment variables for the OpenAI API key and model, then executes the analysis pipeline and prints the results.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/cookbooks/yaml/wikipedia_search_analysis_agents.ipynb#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom praisonai import PraisonAI\nfrom google.colab import userdata\n\n# Create a PraisonAI instance with the agent_yaml content\npraisonai = PraisonAI(agent_yaml=agent_yaml, tools=[WikipediaSearchTool])\n\n# Add OPENAI_API_KEY Secrets to Google Colab on the Left Hand Side 🔑 or Enter Manually Below\nos.environ[\"OPENAI_API_KEY\"] = userdata.get('OPENAI_API_KEY') or \"ENTER OPENAI_API_KEY HERE\"\nos.environ[\"OPENAI_MODEL_NAME\"] = \"gpt-4o-mini\"\n\n# Run PraisonAI\nresult = praisonai.run()\n\n# Print the result\nprint(result) # 2/10\n```\n\n----------------------------------------\n\nTITLE: Advanced CSV Processing with Multiple Agents\nDESCRIPTION: Example of setting up multiple agents for processing and analyzing CSV data.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/csv_tools.mdx#2025-04-19_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n# Create data processing agent\nprocessor_agent = Agent(\n    name=\"Processor\",\n    role=\"Data Processor\",\n    goal=\"Process CSV data systematically.\",\n    tools=[read_csv, write_csv, merge_csv],\n    self_reflect=False\n)\n\n# Create analysis agent\nanalysis_agent = Agent(\n    name=\"Analyzer\",\n    role=\"Data Analyst\",\n    goal=\"Analyze processed CSV data.\",\n    backstory=\"Expert in data analysis and reporting.\",\n    self_reflect=False\n)\n\n# Define tasks\nprocessing_task = Task(\n    description=\"Process customer data files.\",\n    agent=processor_agent,\n    name=\"data_processing\"\n)\n\nanalysis_task = Task(\n    description=\"Analyze customer trends and patterns.\",\n    agent=analysis_agent,\n    name=\"data_analysis\"\n)\n\n# Run agents\nagents = PraisonAIAgents(\n    agents=[processor_agent, analysis_agent],\n    tasks=[processing_task, analysis_task],\n    process=\"sequential\"\n)\nagents.start()\n```\n\n----------------------------------------\n\nTITLE: Installing PraisonAI Agents\nDESCRIPTION: This bash snippet installs the PraisonAI Agents package along with the duckduckgo_search tool, necessary for executing examples with multiple agents. It ensures the required environment is set up before proceeding with agent configurations.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/concepts/memory.mdx#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install \"praisonaiagents[memory]\" duckduckgo_search\n```\n\n----------------------------------------\n\nTITLE: Formatting Code Function - Python\nDESCRIPTION: Formats Python code according to specified style guidelines, such as 'black' or PEP 8, while also allowing for control over line length for improved readability.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/python_tools.mdx#2025-04-19_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nformatted = format_code(\"\"\"\ndef messy_function(x,y,   z):\n    if x>0:\n     return y+z\n    else:\n     return y-z\n\"\"\")\n```\n\n----------------------------------------\n\nTITLE: Installing PraisonAI Agents with LLM Dependencies\nDESCRIPTION: Installs the PraisonAI agents package with LLM support, which is required for the integration with Groq models.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/mcp/groq.mdx#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npip install \"praisonaiagents[llm]\"\n```\n\n----------------------------------------\n\nTITLE: Gemini 2.0 Flash Thinking LLM Configuration\nDESCRIPTION: Configuration dictionary for the Gemini 2.0 Flash Thinking experimental model, specifying the model name and response format as text since JSON object format is not supported.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/models/google.mdx#2025-04-19_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nllm_config = {\n  \"model\": \"gemini/gemini-2.0-flash-thinking-exp-01-21\",\n  \"response_format\": {\"type\": \"text\"} # type is text, because json_object is not supported\n}\n```\n\n----------------------------------------\n\nTITLE: Installing PraisonAI Agents Package\nDESCRIPTION: Install the required package for JSON processing tools using pip\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/json_tools.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install praisonaiagents\n```\n\n----------------------------------------\n\nTITLE: Setting AgentOps API Key\nDESCRIPTION: Configures the AgentOps API key as an environment variable for authentication and monitoring setup.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/monitoring/agentops.mdx#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport AGENTOPS_API_KEY=xxxxxxxx\n```\n\n----------------------------------------\n\nTITLE: Installing Required Dependencies for Brave Search Integration\nDESCRIPTION: Command for installing the necessary Python packages to implement Brave Search with PraisonAI agents. The installation requires both the praisonaiagents package and the mcp package.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/mcp/bravesearch.mdx#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install praisonaiagents mcp\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for YFinance Agent\nDESCRIPTION: Install required packages for financial data analysis using PraisonAI and YFinance tools. Prerequisites include Python 3.10+ and package installation.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/yfinance_tools.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install praisonaiagents yfinance\n```\n\n----------------------------------------\n\nTITLE: Deploying to Google Cloud Run\nDESCRIPTION: Deploys the PraisonAI application to Google Cloud Run using the previously built and pushed Docker image. Configures service settings and environment variables.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/deploy.mdx#2025-04-19_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngcloud run deploy praisonai-service \\\n    --image us-central1-docker.pkg.dev/${PROJECT_ID}/praisonai-repository/praisonai-app:${TAG} \\\n    --platform managed \\\n    --region us-central1 \\\n    --allow-unauthenticated \\\n    --set-env-vars OPENAI_MODEL_NAME=${OPENAI_MODEL_NAME},OPENAI_API_KEY=${OPENAI_API_KEY},OPENAI_API_BASE=${OPENAI_API_BASE}\n```\n\n----------------------------------------\n\nTITLE: Statistical Calculations\nDESCRIPTION: Shows how to perform basic statistical calculations on a dataset.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/calculator_tools.mdx#2025-04-19_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nresult = calculate_statistics([1, 2, 3, 4, 5])\n```\n\n----------------------------------------\n\nTITLE: Installing PraisonAI Chat using pip\nDESCRIPTION: This snippet installs the PraisonAI Chat package via pip, including the optional chat features. Ensure you have Python and pip installed on your machine.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/ui/chat.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install \"praisonai[chat]\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Mistral API Environment Variables\nDESCRIPTION: Sets up the required environment variables for using Mistral AI's API, including the API key, model name, and base URL configuration.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/models/mistral.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport OPENAI_API_KEY=xxxxxxxxxx\nexport OPENAI_MODEL_NAME=mistral-large\nexport OPENAI_API_BASE=\"https://api.mistral.ai/v1\"\n```\n\n----------------------------------------\n\nTITLE: Sequential Processing Definition\nDESCRIPTION: This code snippet sets the processing type to sequential. This configuration ensures that tasks are executed one after the other.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/yaml_tools.mdx#2025-04-19_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nprocess=\"sequential\"\n```\n\n----------------------------------------\n\nTITLE: Visualizing Agentic Autonomous Workflow using Mermaid\nDESCRIPTION: Mermaid diagram showing an autonomous agent workflow with environment feedback. This pattern enables AI agents to monitor, act, and adapt based on feedback from their environment.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/index.mdx#2025-04-19_snippet_11\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n    Human[Human] <--> LLM[LLM Call]\n    LLM -->|ACTION| Environment[Environment]\n    Environment -->|FEEDBACK| LLM\n    LLM --> Stop[Stop]\n    \n    style Human fill:#8B0000,color:#fff\n    style LLM fill:#2E8B57,color:#fff\n    style Environment fill:#8B0000,color:#fff\n    style Stop fill:#333,color:#fff\n```\n\n----------------------------------------\n\nTITLE: Running the Example - Set Environment Variables\nDESCRIPTION: Illustrates the setup of environment variables necessary for running the provided examples that interact with the OpenAI API.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/js/nodejs.mdx#2025-04-19_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nexport OPENAI_API_KEY='your-api-key'\n```\n\n----------------------------------------\n\nTITLE: Installing PraisonAI Code with pip\nDESCRIPTION: This command installs PraisonAI Code along with the 'code' extra dependencies using pip. This enables the functionality to interact with your codebase via AI. Ensure pip is installed and configured correctly.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/ui/code.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"pip install \\\"praisonai[code]\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for PraisonAI Script Generation\nDESCRIPTION: Sets up required Python packages including langchain_community, praisonai with crewai extension, and duckduckgo_search for the script generation system.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/cookbooks/yaml/business_product_launch_agents.ipynb#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n%pip install langchain_community > /dev/null\n%pip install praisonai[crewai] > /dev/null\n%pip install duckduckgo_search > /dev/null\n```\n\n----------------------------------------\n\nTITLE: Visualizing GitLab MCP Integration Flow with Mermaid\nDESCRIPTION: A flowchart diagram showing the data flow between a user query, AI agent, GitLab MCP tool, and the final answer output.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/mcp/gitlab.mdx#2025-04-19_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n    In[Query] --> Agent[AI Agent]\n    Agent --> Tool[GitLab MCP]\n    Tool --> Agent\n    Agent --> Out[Answer]\n    \n    style In fill:#8B0000,color:#fff\n    style Agent fill:#2E8B57,color:#fff\n    style Tool fill:#FC6D26,color:#fff\n    style Out fill:#8B0000,color:#fff\n```\n\n----------------------------------------\n\nTITLE: YAML Options Definition\nDESCRIPTION: This code shows how to customize YAML parameters such as enabling safe loading and setting the encoding to UTF-8.  These options are used when reading or writing YAML files.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/yaml_tools.mdx#2025-04-19_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nsafe_load=True, encoding=\"utf-8\"\n```\n\n----------------------------------------\n\nTITLE: Alternative Setup Using Environment Variables for Google Gemini\nDESCRIPTION: Setting environment variables to use the Google Gemini API through the OpenAI-compatible endpoint, requiring both an API key and base URL.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/models/google.mdx#2025-04-19_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nexport OPENAI_API_KEY=xxxxxxxxxxx\nexport OPENAI_BASE_URL=https://generativelanguage.googleapis.com/v1beta/openai/\n```\n\n----------------------------------------\n\nTITLE: Installing PraisonAI No Code Package\nDESCRIPTION: Installs the 'praisonai' package using pip, enabling the no-code approach to defining and running agents. This command is prerequisite for the No Code functionality.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/quickstart.mdx#2025-04-19_snippet_14\n\nLANGUAGE: Terminal\nCODE:\n```\npip install praisonai\n```\n\n----------------------------------------\n\nTITLE: Setting OpenAI API Key - Bash\nDESCRIPTION: This Bash command sets the OpenAI API key as an environment variable necessary for authentication when using the PraisonAI toolset.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/agents/finance.mdx#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport OPENAI_API_KEY=your_api_key_here\n```\n\n----------------------------------------\n\nTITLE: Installing PraisonAI Agents Package\nDESCRIPTION: Commands to install the PraisonAI Agents package using pip and npm package managers.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/quickstart.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install praisonaiagents\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install praisonai\n```\n\n----------------------------------------\n\nTITLE: Setting OpenAI API Key\nDESCRIPTION: Guides through setting the OpenAI API key as an environment variable to authenticate API requests.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/evaluator-optimiser.mdx#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport OPENAI_API_KEY=your_api_key_here\n```\n\n----------------------------------------\n\nTITLE: Running the OpenAI Airbnb Agent Script\nDESCRIPTION: Terminal command to execute the Python script that contains the Airbnb search agent, initiating the agent to process booking requests.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/mcp/openai.mdx#2025-04-19_snippet_4\n\nLANGUAGE: zsh\nCODE:\n```\npython openai_airbnb.py\n```\n\n----------------------------------------\n\nTITLE: Installing PraisonAI Agents Package\nDESCRIPTION: Command to install the required PraisonAI agents package via pip.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/csv_tools.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install praisonaiagents\n```\n\n----------------------------------------\n\nTITLE: Running PraisonAI Training\nDESCRIPTION: This bash command initiates the PraisonAI training process with specified model, dataset, and output locations. It allows users to train a model and upload it to both Hugging Face and Ollama.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/train.mdx#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npraisonai train \\\n    --model unsloth/Meta-Llama-3.1-8B-Instruct-bnb-4bit \\\n    --dataset yahma/alpaca-cleaned \\\n    --hf mervinpraison/llama3.1-instruct \\\n    --ollama mervinpraison/llama3.1-instruct\n```\n\n----------------------------------------\n\nTITLE: Session Created Event\nDESCRIPTION: This JSON snippet is emitted when a session is created and includes session configuration details.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/praisonai/ui/realtimeclient/realtimedocs.txt#2025-04-19_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"event_id\": \"event_1234\",\n    \"type\": \"session.created\",\n    \"session\": {\n        \"id\": \"sess_001\",\n        \"object\": \"realtime.session\",\n        \"model\": \"gpt-4o-realtime-preview-2024-10-01\",\n        \"modalities\": [\"text\", \"audio\"],\n        \"instructions\": \"\",\n        \"voice\": \"alloy\",\n        \"input_audio_format\": \"pcm16\",\n        \"output_audio_format\": \"pcm16\",\n        \"input_audio_transcription\": null,\n        \"turn_detection\": {\n            \"type\": \"server_vad\",\n            \"threshold\": 0.5,\n            \"prefix_padding_ms\": 300,\n            \"silence_duration_ms\": 200\n        },\n        \"tools\": [],\n        \"tool_choice\": \"auto\",\n        \"temperature\": 0.8,\n        \"max_output_tokens\": null\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Required Packages for Langchain Direct Tools\nDESCRIPTION: Install necessary Python packages for using Langchain tools with PraisonAI, including youtube_search and langchain components.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/langchain.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install youtube_search praisonai langchain_community langchain\n```\n\n----------------------------------------\n\nTITLE: Setting OpenAI API Key\nDESCRIPTION: Sets the OpenAI API key as an environment variable needed for authentication with the OpenAI service.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/js/nodejs.mdx#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport OPENAI_API_KEY=xxxxxxxxxxxxxxxxxxxxxx\n```\n\n----------------------------------------\n\nTITLE: Setting OpenAI API Key as Environment Variable\nDESCRIPTION: Command to set the OpenAI API key as an environment variable, which is required for the Planning Agent to function properly.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/agents/planning.mdx#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport OPENAI_API_KEY=your_api_key_here\n```\n\n----------------------------------------\n\nTITLE: Initializing PraisonAI Instance\nDESCRIPTION: Main execution setup that creates a PraisonAI instance using the defined YAML configuration.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/cookbooks/yaml/book_writing_agents.ipynb#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom praisonai import PraisonAI\nfrom google.colab import userdata\n\n# Create a PraisonAI instance with the agent_yaml content\npraisonai = PraisonAI(agent_yaml=agent_yaml, tools=[])\n```\n\n----------------------------------------\n\nTITLE: Installing Required Packages in Bash\nDESCRIPTION: This snippet demonstrates how to install the necessary Python packages using pip for setting up PraisonAI agents and LangChain integration.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/langchain.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install praisonaiagents langchain-community wikipedia\n```\n\n----------------------------------------\n\nTITLE: Setting OpenAI API Key in Bash\nDESCRIPTION: This command sets the OpenAI API key as an environment variable in the terminal, which is required for the AI agent to function.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/mcp/airbnb.mdx#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport OPENAI_API_KEY=your_openai_api_key_here\n```\n\n----------------------------------------\n\nTITLE: Advanced Logging in Bash\nDESCRIPTION: Exports an environment variable to switch the log level to 'debug' for more detailed application logs.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/developers/local-development.mdx#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport LOGLEVEL=debug\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables\nDESCRIPTION: These commands set the necessary environment variables for the application.  `OPENAI_BASE_URL` specifies the base URL for the Ollama server, and `OPENAI_API_KEY` is a placeholder key. These configurations enable the application to connect to and utilize the Deepseek models hosted by Ollama.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/ui/streamlit/deepseek-streamlit.mdx#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport OPENAI_BASE_URL=http://localhost:11434/v1\nexport OPENAI_API_KEY=fake-key\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for OpenAI in Python\nDESCRIPTION: This snippet sets the OpenAI API key and model name as environment variables. The API key can be provided via user data or manually entered in the code. These variables are crucial for interacting with OpenAI's API services.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/cookbooks/yaml/book_writing_agents.ipynb#2025-04-19_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nos.environ[\"OPENAI_API_KEY\"] = userdata.get('OPENAI_API_KEY') or \"ENTER OPENAI_API_KEY HERE\"\nos.environ[\"OPENAI_MODEL_NAME\"] = \"gpt-4o-mini\"\n```\n\n----------------------------------------\n\nTITLE: CSV File Merging Example\nDESCRIPTION: Examples of merging multiple CSV files with various join options using the merge_csv function.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/csv_tools.mdx#2025-04-19_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# Merge two files on a common column\nsuccess = merge_csv(\n    files=[\"employees.csv\", \"salaries.csv\"],\n    output_file=\"merged.csv\",\n    how='inner',\n    on='employee_id'\n)\n\n# Advanced merge with multiple columns and custom suffixes\nsuccess = merge_csv(\n    files=[\"data1.csv\", \"data2.csv\", \"data3.csv\"],\n    output_file=\"merged.csv\",\n    how='outer',\n    on=['id', 'department'],\n    suffixes=('_2022', '_2023')\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for PraisonAI Article Generation\nDESCRIPTION: Installs the required Python packages: langchain_community, praisonai with crewai components, and duckduckgo_search. The outputs are suppressed for cleaner notebook display.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/cookbooks/yaml/article_generation_agents.ipynb#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Install dependencies without output\n%pip install langchain_community > /dev/null\n%pip install praisonai[crewai] > /dev/null\n%pip install duckduckgo_search > /dev/null\n```\n\n----------------------------------------\n\nTITLE: Setting OpenAI API Key as Environment Variable\nDESCRIPTION: Sets the OpenAI API key as an environment variable required for accessing OpenAI's API. Ensure the key is correctly set.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/mathagent.mdx#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport OPENAI_API_KEY=your_api_key_here\n```\n\n----------------------------------------\n\nTITLE: Creating a Single Agent - TypeScript\nDESCRIPTION: This TypeScript snippet illustrates how to create a single agent, defining its instructions and name, and then starting it. It's important for authoring custom behavior.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/introduction.mdx#2025-04-19_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Agent } from 'praisonai';\n\nconst agent = new Agent({ \n  instructions: `You are a creative writer who writes short stories with emojis.`,\n  name: \"StoryWriter\"\n});\n\nagent.start(\"Write a story about a time traveler\")\n```\n\n----------------------------------------\n\nTITLE: Importing CSV Components\nDESCRIPTION: Import statements for required PraisonAI agent components and CSV tools.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/csv_tools.mdx#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent, Task, PraisonAIAgents\nfrom praisonaiagents.tools import read_csv, write_csv, merge_csv\n```\n\n----------------------------------------\n\nTITLE: Running the Stock Price Agent\nDESCRIPTION: Bash command to execute the Python script that starts the Ollama-powered stock price assistant agent.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/mcp/ollama-python.mdx#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npython ollama_stock.py\n```\n\n----------------------------------------\n\nTITLE: Creating a Dockerfile for Local Development\nDESCRIPTION: This Dockerfile creates an environment for developing the PraisonAI Chat application with Flask in a Python 3.11-slim container. It installs necessary dependencies and sets the working directory.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/ui/chat.mdx#2025-04-19_snippet_4\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM python:3.11-slim\n\nWORKDIR /app\n\nCOPY . .\n\nRUN pip install flask praisonai==2.0.18 watchdog\n\nEXPOSE 5555\n\nENV FLASK_ENV=development\n\nCMD [\"flask\", \"run\", \"--host=0.0.0.0\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring Groq Integration\nDESCRIPTION: Bash commands to set up Groq integration by configuring the OpenAI API key and base URL. This enables the use of Groq's LLM services for AI agent implementations.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/index.mdx#2025-04-19_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nexport OPENAI_API_KEY=xxxxxxxxxxx\nexport OPENAI_BASE_URL=https://api.groq.com/openai/v1\n```\n\n----------------------------------------\n\nTITLE: Importing PraisonAI Agents Components\nDESCRIPTION: This snippet imports the necessary modules from the `praisonaiagents` package and its tools submodule.  It includes modules for creating agents, tasks, and specific Wikipedia tools like `wiki_search`, `wiki_summary`, `wiki_page`, `wiki_random`, and `wiki_language`.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/wikipedia_tools.mdx#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent, Task, PraisonAIAgents\nfrom praisonaiagents.tools import wiki_search, wiki_summary, wiki_page, wiki_random, wiki_language\n```\n\n----------------------------------------\n\nTITLE: Example .praisoncontext File\nDESCRIPTION: This is an example `.praisoncontext` file, which specifies files and directories to be the *only* files to be included in the context for analysis. This is an exclusive inclusion list, overriding the default behavior.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/ui/code.mdx#2025-04-19_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n\"projectfiles\\ndocs\"\n```\n\n----------------------------------------\n\nTITLE: Installing and Setting Up PraisonAI for JavaScript\nDESCRIPTION: Commands to install the PraisonAI npm package and set up the OpenAI API key for JavaScript usage.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/README.md#2025-04-19_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpm install praisonai\nexport OPENAI_API_KEY=xxxxxxxxxxxxxxxxxxxxxx\n```\n\n----------------------------------------\n\nTITLE: Importing Pandas Agent Components\nDESCRIPTION: Import necessary classes and tools from PraisonAI Agents package.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/pandas_tools.mdx#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent, Task, PraisonAIAgents\nfrom praisonaiagents.tools import read_csv, read_excel, write_csv, write_excel, filter_data, get_summary, group_by, pivot_table\n```\n\n----------------------------------------\n\nTITLE: Running the Redis Agent Script\nDESCRIPTION: Shell command for executing the Python script that contains the Redis-enabled AI agent configuration.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/mcp/redis.mdx#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npython redis_agent.py\n```\n\n----------------------------------------\n\nTITLE: Audio Generation Completion in OpenAI API\nDESCRIPTION: Example of a response.audio.done event in the OpenAI API event stream. This event indicates that the model-generated audio is complete or the response was interrupted.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/praisonai/ui/realtimeclient/realtimedocs.txt#2025-04-19_snippet_31\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"event_id\": \"event_5152\",\n    \"type\": \"response.audio.done\",\n    \"response_id\": \"resp_001\",\n    \"item_id\": \"msg_008\",\n    \"output_index\": 0,\n    \"content_index\": 0\n}\n```\n\n----------------------------------------\n\nTITLE: Installing PraisonAI Agents\nDESCRIPTION: This bash command installs the PraisonAI Agents package using pip.  It's a prerequisite for using the agentic orchestration framework.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/orchestrator-worker.mdx#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n```bash\npip install praisonaiagents\n```\n```\n\n----------------------------------------\n\nTITLE: Installing PraisonAI Dependencies\nDESCRIPTION: Installs the necessary Python packages for PraisonAI library with LLM support using pip package manager\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/mcp/perplexity.mdx#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npip install \"praisonaiagents[llm]\"\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Search Agent\nDESCRIPTION: Initialize a search agent with DuckDuckGo capabilities\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/duckduckgo_tools.mdx#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nsearch_agent = Agent(\n    name=\"SearchAgent\",\n    role=\"Internet Search Specialist\",\n    goal=\"Perform accurate internet searches and extract relevant information.\",\n    backstory=\"Expert in finding and organizing internet data.\",\n    tools=[duckduckgo],\n    self_reflect=False\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenAI API Key\nDESCRIPTION: Setting environment variable for OpenAI API authentication\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/reasoning-extract.mdx#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport OPENAI_API_KEY=your_api_key_here\n```\n\n----------------------------------------\n\nTITLE: Handling Error Event\nDESCRIPTION: This JSON snippet outlines the structure of an error event that includes information about the error type and details.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/praisonai/ui/realtimeclient/realtimedocs.txt#2025-04-19_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"event_id\": \"event_890\",\n    \"type\": \"error\",\n    \"error\": {\n        \"type\": \"invalid_request_error\",\n        \"code\": \"invalid_event\",\n        \"message\": \"The 'type' field is missing.\",\n        \"param\": null,\n        \"event_id\": \"event_567\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Shell Management with Multiple Agents\nDESCRIPTION: Illustrates the setup of multiple agents with distinct roles, such as command execution and process monitoring, for more sophisticated shell task management.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/shell_tools.mdx#2025-04-19_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# Create command agent\ncommand_agent = Agent(\n    name=\"Commander\",\n    role=\"Command Executor\",\n    goal=\"Execute shell commands systematically.\",\n    tools=[execute_command, list_processes, kill_process, get_system_info],\n    self_reflect=False\n)\n\n# Create monitoring agent\nmonitor_agent = Agent(\n    name=\"Monitor\",\n    role=\"Process Monitor\",\n    goal=\"Monitor and manage running processes.\",\n    backstory=\"Expert in system monitoring and process control.\",\n    self_reflect=False\n)\n\n# Define tasks\ncommand_task = Task(\n    description=\"Execute system maintenance commands.\",\n    agent=command_agent,\n    name=\"system_maintenance\"\n)\n\nmonitor_task = Task(\n    description=\"Monitor system resources and processes.\",\n    agent=monitor_agent,\n    name=\"process_monitoring\"\n)\n\n# Run agents\nagents = PraisonAIAgents(\n    agents=[command_agent, monitor_agent],\n    tasks=[command_task, monitor_task],\n    process=\"sequential\"\n)\nagents.start()\n```\n\n----------------------------------------\n\nTITLE: Visualizing AI Agents Workflow with Mermaid\nDESCRIPTION: This mermaid code visualizes an async workflow of AI agents. The flowchart illustrates how multiple AI agents process input asynchronously and generate output, highlighting the sequential flow between agents.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/async.mdx#2025-04-19_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n    In[In] --> Agent1[AI Agent]\n    Agent1 --> Agent2[AI Agent]\n    Agent1 --> Agent3[AI Agent]\n    Agent1 --> Agent4[AI Agent]\n    Agent2 --> Out[Out]\n    Agent3 --> Out\n    Agent4 --> Out\n    \n    style In fill:#8B0000,color:#fff\n    style Agent1 fill:#2E8B57,color:#fff\n    style Agent2 fill:#2E8B57,color:#fff\n    style Agent3 fill:#2E8B57,color:#fff\n    style Agent4 fill:#2E8B57,color:#fff\n    style Out fill:#8B0000,color:#fff\n```\n\n----------------------------------------\n\nTITLE: Installing PraisonAI UI Package\nDESCRIPTION: The snippet shows how to install the PraisonAI UI package via pip. This is necessary for using the interface to create multi-agent systems.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/ui/ui.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install -U \"praisonai[ui]\"\n```\n\n----------------------------------------\n\nTITLE: Running the Puppeteer Agent Script\nDESCRIPTION: Command to execute the Python script that implements the Puppeteer web automation agent. This will start the agent, which will perform the requested web automation task.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/mcp/puppeteer.mdx#2025-04-19_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npython puppeteer_agent.py\n```\n\n----------------------------------------\n\nTITLE: Setting OpenAI API Key for PraisonAI Agents\nDESCRIPTION: This snippet sets the OpenAI API key as an environment variable, essential for enabling AI capabilities in the hackathon judge script.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/examples/hackathon-judge.mdx#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport OPENAI_API_KEY=your_api_key_here\n```\n\n----------------------------------------\n\nTITLE: Running a Script with Node.js\nDESCRIPTION: This snippet provides the command to run the JavaScript file containing the agent code using Node.js.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/js/js.mdx#2025-04-19_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnode app.js\n```\n\n----------------------------------------\n\nTITLE: Running the Config File - Bash\nDESCRIPTION: This bash command snippet shows how to execute a configuration file for agents in PraisonAI. It allows users to run agents defined in a YAML file.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/introduction.mdx#2025-04-19_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npraisonai agents.yaml\n```\n\n----------------------------------------\n\nTITLE: Set OpenAI API Key\nDESCRIPTION: This bash command sets the OpenAI API key as an environment variable.  The API key is required for authenticating with OpenAI's services, which are utilized by the AI agents for various tasks. Replace `your_api_key_here` with your actual OpenAI API key.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/examples/smart-city.mdx#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport OPENAI_API_KEY=your_api_key_here\n```\n\n----------------------------------------\n\nTITLE: Analyzing Trending Topics in Python\nDESCRIPTION: This snippet retrieves trending topics using the `get_trending_topics` function and prints them with their index. It is assumed that `get_trending_topics` returns a list of trending topics.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/newspaper_tools.mdx#2025-04-19_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n# Analyze trending topics\ntopics = get_trending_topics(limit=10)\nprint(\"Current hot topics:\")\nfor i, topic in enumerate(topics, 1):\n    print(f\"{i}. {topic}\")\n```\n\n----------------------------------------\n\nTITLE: Installing Required Python Packages\nDESCRIPTION: This snippet shows how to install the necessary Python packages for integrating Reddit search with PraisonAI, including `praisonai`, `langchain_community`, and `praw`. These packages provide the tools and functionalities required for building and running PraisonAI agents with Reddit search capabilities.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/reddit.mdx#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n\"pip install praisonai langchain_community praw\"\n```\n\n----------------------------------------\n\nTITLE: Vague Agent Instructions\nDESCRIPTION: Demonstrates vague instructions that can lead to poor agent performance.  More specific instructions are better.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/mini.mdx#2025-04-19_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n# Too vague\nAgent(instructions=\"Research AI\")\n```\n\n----------------------------------------\n\nTITLE: Reading CSV Files\nDESCRIPTION: Functions for reading CSV files with various options and error handling.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/pandas_tools.mdx#2025-04-19_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# Basic usage\ndf = read_csv(\"data.csv\")\n\n# With additional options\ndf = read_csv(\n    \"data.csv\",\n    encoding=\"utf-8\",\n    sep=\",\",\n    header=0,\n    usecols=[\"name\", \"age\", \"salary\"]\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Newspaper Agent\nDESCRIPTION: Install required Python packages including praisonaiagents and newspaper3k.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/newspaper_tools.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install praisonaiagents newspaper3k\n```\n\n----------------------------------------\n\nTITLE: Setting OpenAI API Key\nDESCRIPTION: Command to set the OpenAI API key as an environment variable.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/mcp/stockprice.mdx#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport OPENAI_API_KEY=your_openai_api_key_here\n```\n\n----------------------------------------\n\nTITLE: Sequential Process Diagram in Mermaid\nDESCRIPTION: Mermaid diagram illustrating a sequential task execution process where agents perform tasks one after another.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/README.md#2025-04-19_snippet_11\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph LR\n    Input[Input] --> A1\n    subgraph Agents\n        direction LR\n        A1[Agent 1] --> A2[Agent 2] --> A3[Agent 3]\n    end\n    A3 --> Output[Output]\n\n    classDef input fill:#8B0000,stroke:#7C90A0,color:#fff\n    classDef process fill:#189AB4,stroke:#7C90A0,color:#fff\n    classDef transparent fill:none,stroke:none\n\n    class Input,Output input\n    class A1,A2,A3 process\n    class Agents transparent\n```\n\n----------------------------------------\n\nTITLE: Presenting Hierarchical Pattern Using Mermaid\nDESCRIPTION: This Mermaid diagram displays the Hierarchical Pattern where a Manager Agent delegates and oversees tasks, coordinating with multiple Worker Agents.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/course/agents/07-multi-agent-systems.mdx#2025-04-19_snippet_3\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD\n    A[Manager Agent] --> B[Worker Agent 1]\n    A --> C[Worker Agent 2]\n    A --> D[Worker Agent 3]\n    B --> A\n    C --> A\n    D --> A\n```\n\n----------------------------------------\n\nTITLE: Installing Langchain Community and Setting OpenAI API Key\nDESCRIPTION: This snippet demonstrates how to install the langchain-community package using pip and set the OpenAI API key as an environment variable, which is required for using language models.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/external/wikipedia-search.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install langchain-community\nexport OPENAI_API_KEY=your_api_key_here\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Email Workflow Management\nDESCRIPTION: Installs required Python libraries for email processing and AI workflow management\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/cookbooks/yaml/email_workflow_management_agents.ipynb#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n%pip install langchain_community > /dev/null\n%pip install praisonai[crewai] > /dev/null\n```\n\n----------------------------------------\n\nTITLE: Importing Libraries from PraisonAI in Python\nDESCRIPTION: This snippet imports required classes from the PraisonAI library. These classes are used to drill down into the functionalities necessary for reading CVs and searching through job CSV files.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/cookbooks/yaml/job_profile_matching_agents.ipynb#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonai_tools import BaseTool, FileReadTool, CSVSearchTool\n\n```\n\n----------------------------------------\n\nTITLE: YAML Configuration for Single Agent\nDESCRIPTION: No-code approach using YAML configuration for creating a single summarization agent.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/quickstart.mdx#2025-04-19_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nroles:\n  summarise_agent:\n    instructions: Summarise Photosynthesis\n```\n\n----------------------------------------\n\nTITLE: Using the Internet Search Tool\nDESCRIPTION: Example of how to use the internet search tool with an agent. The `Tools.internet_search` enum is added to the agent's list of tools.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/mini.mdx#2025-04-19_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ntools=[Tools.internet_search]\n```\n\n----------------------------------------\n\nTITLE: Example .praisonignore File\nDESCRIPTION: This is an example of a `.praisonignore` file, which specifies files and directories that PraisonAI Code should ignore when analyzing the codebase.  This helps to reduce noise and improve performance. The file uses glob patterns for matching.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/ui/code.mdx#2025-04-19_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n\".*\\n*.pyc\\npycache\\n.git\\n.gitignore\\n.vscode\\n.idea\\n.DS_Store\\n.lock\\n.pyc\\n.env\"\n```\n\n----------------------------------------\n\nTITLE: Installing Gradio Package\nDESCRIPTION: Command to install the Gradio package in the conda environment.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/mcp/stockprice.mdx#2025-04-19_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nzsh -c \"source $(conda info --base)/etc/profile.d/conda.sh && conda activate windsurf && pip install gradio\"\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for PraisonAI\nDESCRIPTION: Installs PraisonAI with CrewAI extension using pip, suppressing installation output\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/cookbooks/yaml/job_candidate_evaluation.ipynb#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n%pip install praisonai[crewai] > /dev/null\n```\n\n----------------------------------------\n\nTITLE: Running the Google Maps Agent Script\nDESCRIPTION: Executes the Python script to start the agent with Google Maps integration.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/mcp/google-maps.mdx#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npython google_maps_agent.py\n```\n\n----------------------------------------\n\nTITLE: Installing PraisonAI - TypeScript\nDESCRIPTION: This snippet provides commands for installing the PraisonAI package using npm and yarn for TypeScript projects. These commands are essential for setting up your TypeScript development environment.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/introduction.mdx#2025-04-19_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nnpm install praisonai\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add praisonai\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variable for API Key\nDESCRIPTION: This snippet sets the OpenAI API key as an environment variable which is necessary for the agents to communicate with OpenAI's services.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/js/js.mdx#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport OPENAI_API_KEY=xxxxxxxxxxxxxxxxxxxxxx\n```\n\n----------------------------------------\n\nTITLE: Install PraisonAI Agents Package\nDESCRIPTION: Package installation command for PraisonAI Agents with required dependencies for synthetic data generation\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/generate-reasoning.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install \"praisonaiagents[llm]\" datasets huggingface-hub pandas\n```\n\n----------------------------------------\n\nTITLE: Installing Required Packages for Gemini Streamlit UI\nDESCRIPTION: A bash command to install necessary packages 'praisonaiagents[llm]' and 'streamlit' for setting up the Streamlit UI. Streamlit is used for the UI, and praisonaiagents provides access to the Gemini model via Litellm.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/ui/streamlit/gemini-streamlit.mdx#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install \"praisonaiagents[llm]\" streamlit\n```\n\n----------------------------------------\n\nTITLE: Multi-Agent Configuration YAML\nDESCRIPTION: YAML configuration for multi-agent setup with specific OpenAI model designation using the langchain-openai format.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/models/openai.mdx#2025-04-19_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nframework: crewai\ntopic: create movie script about cat in mars\nroles:\n  researcher:\n    backstory: Skilled in finding and organizing information, with a focus on research\n      efficiency.\n    goal: Gather information about Mars and cats\n    role: Researcher\n    llm:  \n      model: \"openai/gpt-4o\"\n    tasks:\n      gather_research:\n        description: Research and gather information about Mars, its environment,\n          and cats, including their behavior and characteristics.\n        expected_output: Document with research findings, including interesting facts\n          and information.\n    tools:\n    - ''\n```\n\n----------------------------------------\n\nTITLE: Installing PraisonAI Agents Package with pip\nDESCRIPTION: This command installs the PraisonAI agents package using pip, which is required to run the Airbnb search agent.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/mcp/airbnb.mdx#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npip install praisonaiagents\n```\n\n----------------------------------------\n\nTITLE: Initializing Google Cloud Services\nDESCRIPTION: Enables required Google Cloud services for container registry, cloud build, and Cloud Run. Prepares the environment for deployment by authenticating Docker and creating an artifact repository.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/deploy.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngcloud init\ngcloud services enable run.googleapis.com\ngcloud services enable containerregistry.googleapis.com\ngcloud services enable cloudbuild.googleapis.com\n```\n\n----------------------------------------\n\nTITLE: Setting OpenAI API Key Environment Variable\nDESCRIPTION: Command to set the OpenAI API key as an environment variable for authentication\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/examples/predictive-maintenance.mdx#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport OPENAI_API_KEY=your_api_key_here\n```\n\n----------------------------------------\n\nTITLE: Importing PraisonAI Components\nDESCRIPTION: Import statements for core PraisonAI components and file operation tools.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/file_tools.mdx#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent, Task, PraisonAIAgents\nfrom praisonaiagents.tools import read_file, write_file, list_files, get_file_info, copy_file, move_file, delete_file\n```\n\n----------------------------------------\n\nTITLE: Setting OpenAI API Key as Environment Variable\nDESCRIPTION: Command to set up the OpenAI API key as an environment variable for authentication.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/README.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport OPENAI_API_KEY=xxxxxxxxxxxxxxxxxxxxxx\n```\n\n----------------------------------------\n\nTITLE: Installing Necessary Packages for PraisonAI\nDESCRIPTION: This Bash command installs the necessary packages including PraisonAI Agents, OpenCV, and MoviePy to support hackathon project evaluations.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/examples/hackathon-judge.mdx#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install praisonaiagents opencv-python moviepy\n```\n\n----------------------------------------\n\nTITLE: Installing PraisonAI Agents Package in Bash\nDESCRIPTION: In order to use PraisonAI Agents for adaptive learning, the first step is to install the package using pip. This command-line instruction will download and install the necessary library, enabling you to create AI-driven educational applications.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/examples/adaptive-learning.mdx#2025-04-19_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\npip install praisonaiagents\n```\n\n----------------------------------------\n\nTITLE: Installing PraisonAI Agents Package\nDESCRIPTION: Command to install the PraisonAI Agents package using pip package manager.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/agents/image.mdx#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install praisonaiagents\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Travel Planning System\nDESCRIPTION: Installation of required Python packages including langchain_community, praisonai, requests, and duckduckgo_search using pip.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/cookbooks/yaml/surprise_trip_planner_and_itinerary_agents.ipynb#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n%pip install langchain_community > /dev/null\n%pip install praisonai[crewai] > /dev/null\n%pip install requests > /dev/null\n%pip install duckduckgo_search > /dev/null\n```\n\n----------------------------------------\n\nTITLE: Executing Python Script in Terminal\nDESCRIPTION: The bash command to execute a Python script named `app.py`, which contains the agent creation and initiation logic. This step runs the program to perform the tasks defined in the agents.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/course/agents/12-adding-tools-to-agents.mdx#2025-04-19_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npython app.py\n```\n\n----------------------------------------\n\nTITLE: Installing Ollama Model\nDESCRIPTION: Command to pull the llama3.2 model from Ollama after installation.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/mcp/ollama.mdx#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Install Ollama from https://ollama.ai/\n# Pull the llama3.2 model\nollama pull llama3.2\n```\n\n----------------------------------------\n\nTITLE: Displaying Badge Images in React\nDESCRIPTION: This snippet shows the implementation of badge images for various project statistics using React. The component is styled for flexible layout and includes hover effects for visual feedback.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/index.mdx#2025-04-19_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\n<div style={{ display: 'flex', flexWrap: 'wrap', gap: '1rem' }}>\\n  <div className=\"hover:opacity-80 transition-opacity\">\\n    <img src=\"https://static.pepy.tech/badge/PraisonAI\" alt=\"Total Downloads\" />\\n  </div>\\n  <div className=\"hover:opacity-80 transition-opacity\">\\n    <img src=\"https://img.shields.io/github/v/release/MervinPraison/PraisonAI\" alt=\"Latest Stable Version\" />\\n  </div>\\n  <div className=\"hover:opacity-80 transition-opacity\">\\n    <img src=\"https://img.shields.io/badge/License-MIT-yellow.svg\" alt=\"License\" />\\n  </div>\\n  <div className=\"hover:opacity-80 transition-opacity\">\\n    <img src=\"https://img.shields.io/github/stars/MervinPraison/PraisonAI?style=social\" alt=\"GitHub Stars\" />\\n  </div>\\n  <div className=\"hover:opacity-80 transition-opacity\">\\n    <img src=\"https://img.shields.io/github/forks/MervinPraison/PraisonAI?style=social\" alt=\"GitHub Forks\" />\\n  </div>\\n</div>\n```\n\n----------------------------------------\n\nTITLE: Running the Brave Search Agent in Python\nDESCRIPTION: Command to execute the Python script containing the Brave Search agent implementation. This command runs the previously created brave_search.py file to activate the agent for web searching.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/mcp/bravesearch.mdx#2025-04-19_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npython brave_search.py\n```\n\n----------------------------------------\n\nTITLE: Running Automated Tests for PraisonAI\nDESCRIPTION: Command for running the automated test suite for PraisonAI. Noted as work in progress (WIP) in the documentation.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/src/praisonai-ts/README.md#2025-04-19_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test\n```\n\n----------------------------------------\n\nTITLE: Visualizing Everart Agent Flow with Mermaid\nDESCRIPTION: A flowchart showing the data flow between Query, AI Agent, Everart MCP tool, and final Answer.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/mcp/everart.mdx#2025-04-19_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n    In[Query] --> Agent[AI Agent]\n    Agent --> Tool[Everart MCP]\n    Tool --> Agent\n    Agent --> Out[Answer]\n    \n    style In fill:#8B0000,color:#fff\n    style Agent fill:#2E8B57,color:#fff\n    style Tool fill:#FF6B6B,color:#fff\n    style Out fill:#8B0000,color:#fff\n```\n\n----------------------------------------\n\nTITLE: Running the Application - Bash\nDESCRIPTION: This command is used to run the Python application that was created earlier.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/codeagent.mdx#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npython app.py\n```\n\n----------------------------------------\n\nTITLE: Setting OpenAI API Key Environment Variable\nDESCRIPTION: This command sets the OpenAI API key as an environment variable.  This is required for PraisonAI Code to authenticate with the OpenAI API and use the models. Replace 'xxxxxxxx' with your actual API key.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/ui/code.mdx#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n\"export OPENAI_API_KEY=xxxxxxxx\"\n```\n\n----------------------------------------\n\nTITLE: Task Initiation Flow Visualization with Mermaid\nDESCRIPTION: This Mermaid diagram outlines the steps in the task initiation process, from task definition through execution resulting in outputs. It visually organizes task components for clarity.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/concepts/tasks.mdx#2025-04-19_snippet_3\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph LR\n    %% Task Flow Steps\n    Start([▶ Start]) --> TaskDef\n    TaskDef --> AgentAssign\n    AgentAssign --> Exec\n    Exec --> Output([✓ Output])\n    \n    %% Define subgraphs for each step\n    subgraph TaskDef[\" \"]\n        TD_Icon[📋 Task Definition]\n        TD_Desc[Description & Requirements]\n        \n        TD_Icon --- TD_Desc\n        \n        style TD_Icon fill:#2D3047,stroke:#7C90A0,color:#fff\n        style TD_Desc fill:#5C80BC,stroke:#7C90A0,color:#fff\n    end\n    \n    subgraph AgentAssign[\" \"]\n        AA_Icon[🤖 Agent Assignment]\n        AA_Desc[Matching & Delegation]\n        \n        AA_Icon --- AA_Desc\n        \n        style AA_Icon fill:#2D3047,stroke:#7C90A0,color:#fff\n        style AA_Desc fill:#5C80BC,stroke:#7C90A0,color:#fff\n    end\n    \n    subgraph Exec[\" \"]\n        E_Icon[⚙️ Execution]\n        E_Desc[Processing & Tools]\n        \n        E_Icon --- E_Desc\n        \n        style E_Icon fill:#2D3047,stroke:#7C90A0,color:#fff\n        style E_Desc fill:#5C80BC,stroke:#7C90A0,color:#fff\n    end\n    \n    %% Styling for main elements\n    style Start fill:#2D3047,stroke:#7C90A0,color:#fff\n    style Output fill:#2D3047,stroke:#7C90A0,color:#fff\n    \n    %% Style for containers\n    style TaskDef fill:#1B1F3B,stroke:#7C90A0,color:#fff\n    style AgentAssign fill:#1B1F3B,stroke:#7C90A0,color:#fff\n    style Exec fill:#1B1F3B,stroke:#7C90A0,color:#fff\n    \n    %% Global styles\n    classDef default fill:#2D3047,stroke:#7C90A0,color:#fff\n    linkStyle default stroke:#7C90A0,stroke-width:2px\n```\n\n----------------------------------------\n\nTITLE: Combining Multiple Tool Registration Approaches in TypeScript\nDESCRIPTION: Shows how to combine different tool registration approaches in PraisonAI. This example mixes direct function registration with pre-defined tool definitions for a more flexible implementation.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/src/praisonai-ts/examples/README-tool-examples.md#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Agent } from 'praisonai';\n\n// Define the functions\nasync function getWeather(location: string) {\n  console.log(`Getting weather for ${location}...`);\n  return `${Math.floor(Math.random() * 30)}°C`;\n}\n\nasync function getTime(location: string) {\n  console.log(`Getting time for ${location}...`);\n  const now = new Date();\n  return `${now.getHours()}:${now.getMinutes()}`;\n}\n\n// Define a custom tool definition\nconst calculatorTool = {\n  type: \"function\",\n  function: {\n    name: \"calculate\",\n    description: \"Perform a calculation\",\n    parameters: {\n      type: \"object\",\n      properties: {\n        expression: {\n          type: \"string\",\n          description: \"The mathematical expression to calculate\"\n        }\n      },\n      required: [\"expression\"]\n    }\n  }\n};\n\n// Register the calculator function globally\nimport { registerFunction } from 'praisonai';\nregisterFunction('calculate', async (expression: string) => {\n  console.log(`Calculating ${expression}...`);\n  // Simple eval for demonstration purposes only\n  return eval(expression).toString();\n});\n\n// Create an agent with mixed tool registration approaches\nconst agent = new Agent({ \n  instructions: `You can provide weather, time, and perform calculations.`,\n  name: \"MixedToolAgent\",\n  // Register functions directly as an array\n  tools: [getWeather, getTime, calculatorTool]\n});\n\n// Start the agent with a prompt that will trigger tool usage\nagent.start(\"What's the weather in Paris, the time in Tokyo, and what is 25 * 4?\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Logging Levels\nDESCRIPTION: Bash commands for setting up different logging levels (basic and advanced) for debugging and monitoring AI agent operations. These configurations help in troubleshooting and analyzing agent behavior.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/index.mdx#2025-04-19_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\n# Basic logging\nexport LOGLEVEL=info\n\n# Advanced logging\nexport LOGLEVEL=debug\n```\n\n----------------------------------------\n\nTITLE: Installing PraisonAI Agents with LLM Dependencies\nDESCRIPTION: Command to install the PraisonAI agents package with language model support using pip.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/mcp/mistral.mdx#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npip install \"praisonaiagents[llm]\"\n```\n\n----------------------------------------\n\nTITLE: Running PraisonAI Training with Config\nDESCRIPTION: This bash command initiates the PraisonAI training process using the configurations specified in a `config.yaml` file. It simplifies the training process by utilizing predefined parameters.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/train.mdx#2025-04-19_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npraisonai train\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Google Maps MCP Integration\nDESCRIPTION: Installs the required Python packages for PraisonAI agents and MCP integration.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/mcp/google-maps.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install praisonaiagents mcp\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for PraisonAI and CrewAI\nDESCRIPTION: Silent installation of required Python packages langchain_community and praisonai with crewai extras.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/cookbooks/yaml/screenplay_writer_agents.ipynb#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n%pip install langchain_community > /dev/null\n%pip install praisonai[crewai] > /dev/null\n```\n\n----------------------------------------\n\nTITLE: Cloning Repository with Git\nDESCRIPTION: This snippet demonstrates how to clone the PraisonAI repository from GitHub and navigate to the specific project directory. Ensure Git is installed on your system to execute these commands. The repository URL and directory names must be correctly specified.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/js/development.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/MervinPraison/PraisonAI.git\ncd src/praisonai-ts\n```\n\n----------------------------------------\n\nTITLE: Installing Required Packages Using pip\nDESCRIPTION: This snippet demonstrates how to install the necessary packages for the PraisonAI Agents functionality using pip. Ensure Python and pip are properly installed in your environment.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/examples/code-analysis.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install praisonaiagents gitingest\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies - Bash Command\nDESCRIPTION: This snippet provides the command to install the required PraisonAI Agents package using pip. It is essential for setting up the environment needed to utilize XML tools effectively.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/xml_tools.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install praisonaiagents\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with Pip\nDESCRIPTION: Installs the necessary Python packages using pip. The command installs `praisonaiagents` with the `knowledge` extra for RAG capabilities, `streamlit` for the UI, and `ollama` for model hosting. The packages are required to run the Streamlit application and interact with the Ollama models.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/ui/streamlit/ollama-streamlit.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install \"praisonaiagents[knowledge]\" streamlit ollama\n```\n\n----------------------------------------\n\nTITLE: Creating a Tool Dictionary\nDESCRIPTION: This snippet demonstrates how to create a dictionary that defines the structure of the `search_tool` for the OpenAI API. It includes the tool's name, description, parameters, and a reference to the actual Python function. The 'callable' key stores a reference to the Python function.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/praisonai/ui/tools.md#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n```python\ntools_dict = {\n    'search_tool': {\n        'type': 'function',\n        'function': {\n            'name': 'search_tool',\n            'description': '...', \n            'parameters': {\n                'type': 'object',\n                'properties': {\n                    'query': {'type': 'string'}\n                }\n            }\n        },\n        'callable': search_tool  # The actual Python function\n    }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Error Masking for Security\nDESCRIPTION: Shows how to hide sensitive information in error messages to prevent information leakage. The code logs detailed errors internally but returns sanitized messages to users.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/tools.mdx#2025-04-19_snippet_21\n\nLANGUAGE: python\nCODE:\n```\ntry:\n    result = process_sensitive_data()\nexcept Exception as e:\n    # Log detailed error internally\n    logger.error(f\"Detailed error: {str(e)}\")\n    # Return sanitized error to user\n    raise PublicError(\"Processing failed\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Agent with OpenRouter Model in YAML\nDESCRIPTION: This YAML configuration defines an agent within the CrewAI framework that uses the OpenRouter API to access the Claude 3.5 Sonnet model.  It specifies the agent's role, goal, backstory, and the task it will perform.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/models/openrouter.mdx#2025-04-19_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml\nframework: crewai\ntopic: create movie script about cat in mars\nroles:\n  researcher:\n    backstory: Skilled in finding and organizing information, with a focus on research\n      efficiency.\n    goal: Gather information about Mars and cats\n    role: Researcher\n    llm:  \n      model: \"openrouter/anthropic/claude-3.5-sonnet\"\n    tasks:\n      gather_research:\n        description: Research and gather information about Mars, its environment,\n          and cats, including their behavior and characteristics.\n        expected_output: Document with research findings, including interesting facts\n          and information.\n    tools:\n    - ''\n```\n```\n\n----------------------------------------\n\nTITLE: Installing PraisonAI Additional Features\nDESCRIPTION: These commands install various additional features for PraisonAI, including UI support, chat interface, code interface, realtime voice interaction, and call functionality.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/nocode/installation.mdx#2025-04-19_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# UI support\npip install \"praisonai[ui]\"\n\n# Chat interface\npip install \"praisonai[chat]\"\n\n# Code interface\npip install \"praisonai[code]\"\n\n# Realtime voice interaction\npip install \"praisonai[realtime]\"\n\n# Call feature\npip install \"praisonai[call]\"\n```\n\n----------------------------------------\n\nTITLE: Installing PraisonAI via Bash\nDESCRIPTION: This bash command installs the core PraisonAI package using pip. It is a prerequisite for using the features of the PraisonAI framework.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/concepts/tasks.mdx#2025-04-19_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\npip install praisonaiagents\n```\n\n----------------------------------------\n\nTITLE: Setting OpenAI API Key in Bash\nDESCRIPTION: This bash command sets the OpenAI API key as an environment variable, which is necessary for authentication in applications using OpenAI services. Replace 'your_api_key_here' with your actual OpenAI API key.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/examples/adaptive-learning.mdx#2025-04-19_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\nexport OPENAI_API_KEY=your_api_key_here\n```\n\n----------------------------------------\n\nTITLE: News Sources Function Examples\nDESCRIPTION: Examples of retrieving news sources with filtering options.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/newspaper_tools.mdx#2025-04-19_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# Get all sources\nsources = get_news_sources()\n\n# Get technology news sources\ntech_sources = get_news_sources(\n    category=\"technology\",\n    language=\"en\",\n    country=\"us\"\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Langchain Anthropic Package\nDESCRIPTION: Command to install the langchain-anthropic package which provides the integration between Langchain and Anthropic's models.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/models/anthropic.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install langchain-anthropic\n```\n\n----------------------------------------\n\nTITLE: Running PraisonAI Code\nDESCRIPTION: This command initiates the PraisonAI Code application. It allows you to start interacting with your codebase using AI. Ensure that PraisonAI Code has been installed correctly and the necessary environment variables are set.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/ui/code.mdx#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n\"praisonai code\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Model Fee Extraction Tool\nDESCRIPTION: Definition of a custom tool for extracting model fees from pricing pages. Includes Pydantic models for fee structure and a web crawler implementation.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/cookbooks/yaml/model_fee_retreival_agents.ipynb#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom crawl4ai import WebCrawler\nfrom crawl4ai.extraction_strategy import LLMExtractionStrategy\nfrom pydantic import BaseModel, Field\nfrom praisonai_tools import BaseTool\n\nclass ModelFee(BaseModel):\n    llm_model_name: str = Field(..., description=\"Name of the model.\")\n    input_fee: str = Field(..., description=\"Fee for input token for the model.\")\n    output_fee: str = Field(..., description=\"Fee for output token for the model.\")\n\nclass ModelFeeTool(BaseTool):\n    name: str = \"ModelFeeTool\"\n    description: str = \"Extracts model fees for input and output tokens from the given pricing page.\"\n\n    def _run(self, url: str):\n        crawler = WebCrawler()\n        crawler.warmup()\n\n        result = crawler.run(\n            url=url,\n            word_count_threshold=1,\n            extraction_strategy= LLMExtractionStrategy(\n                provider=\"openai/gpt-4o\",\n                api_token=os.getenv('OPENAI_API_KEY'),\n                schema=ModelFee.schema(),\n                extraction_type=\"schema\",\n                instruction=\"\"\"From the crawled content, extract all mentioned model names along with their fees for input and output tokens.\n                Do not miss any models in the entire content. One extracted model JSON format should look like this:\n                {\"model_name\": \"GPT-4\", \"input_fee\": \"US$10.00 / 1M tokens\", \"output_fee\": \"US$30.00 / 1M tokens\"}.\"\"\"\n            ),\n            bypass_cache=True,\n        )\n        return result.extracted_content\n```\n\n----------------------------------------\n\nTITLE: Retrieving Specific Paper Details\nDESCRIPTION: Implementation of specific paper retrieval by ID with field selection\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/arxiv_tools.mdx#2025-04-19_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# Get paper by ID\npaper = get_arxiv_paper(\"2401.00123\")\n\n# Get specific fields\npaper = get_arxiv_paper(\n    paper_id=\"2401.00123\",\n    include_fields=[\"title\", \"authors\", \"pdf_url\"]\n)\n```\n\n----------------------------------------\n\nTITLE: Setting OpenAI API Key\nDESCRIPTION: This command sets the OpenAI API key as an environment variable. This is essential for authenticating with the OpenAI API, which is used by the PraisonAI Agents package to leverage language models.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/autonomous-workflow.mdx#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n\"export OPENAI_API_KEY=your_api_key_here\"\n```\n\n----------------------------------------\n\nTITLE: Start PraisonAI Agents\nDESCRIPTION: This command executes the Python script `app.py`, which runs the PraisonAI agents defined in the script.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/callbacks.mdx#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n\"python app.py\"\n```\n\n----------------------------------------\n\nTITLE: Development Environment Setup with uv\nDESCRIPTION: Install project dependencies and extras using the uv package manager for Python\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/README.md#2025-04-19_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\n# Install uv if you haven't already\npip install uv\n\n# Install from requirements\nuv pip install -r pyproject.toml\n\n# Install with extras\nuv pip install -r pyproject.toml --extra code\nuv pip install -r pyproject.toml --extra \"crewai,autogen\"\n```\n\n----------------------------------------\n\nTITLE: Setting OpenAI API Key\nDESCRIPTION: This bash command sets the OpenAI API key as an environment variable. The API key is required to authenticate with the OpenAI API and use its models.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/orchestrator-worker.mdx#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n```bash\nexport OPENAI_API_KEY=your_api_key_here\n```\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Tool Function - Python\nDESCRIPTION: This snippet shows how to implement a custom tool function that performs an internet search. It uses the DuckDuckGo API and returns search results in a structured format.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/tools.mdx#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef internet_search_tool(query: str):\n    results = []\n    ddgs = DDGS()\n    for result in ddgs.text(keywords=query, max_results=5):\n        results.append({\n            \"title\": result.get(\"title\", \"\"),\n            \"url\": result.get(\"href\", \"\"),\n            \"snippet\": result.get(\"body\", \"\")\n        })\n    return results\n```\n\n----------------------------------------\n\nTITLE: Install PraisonAI Agents Package\nDESCRIPTION: This command installs the praisonaiagents package using pip. This package is required to run the Python code examples.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/callbacks.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"pip install praisonaiagents\"\n```\n\n----------------------------------------\n\nTITLE: Setting up Database URL for PraisonAI Chat\nDESCRIPTION: This command sets the DATABASE_URL environment variable to connect PraisonAI Chat with a specified PostgreSQL database. Replace placeholder values with actual database credentials.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/ui/chat.mdx#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport DATABASE_URL=postgresql+asyncpg://<username>:<password>@<your-db-instance-url>/<database-name>\n```\n\n----------------------------------------\n\nTITLE: Visualizing Wikipedia Agent Workflow with Mermaid\nDESCRIPTION: A flowchart diagram showing the data flow of the Wikipedia Agent from query input to knowledge output, including search, page retrieval, and content summary steps.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/agents/wikipedia.mdx#2025-04-19_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n    In[Query] --> Search[Wiki Search]\n    Search --> Page[Page Retrieval]\n    Page --> Summary[Content Summary]\n    Summary --> Out[Knowledge Output]\n    \n    style In fill:#8B0000,color:#fff\n    style Search fill:#2E8B57,color:#fff\n    style Page fill:#2E8B57,color:#fff\n    style Summary fill:#2E8B57,color:#fff\n    style Out fill:#8B0000,color:#fff\n```\n\n----------------------------------------\n\nTITLE: Running the Google Drive Agent\nDESCRIPTION: Command to execute the Python script that runs the Google Drive agent.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/mcp/gdrive.mdx#2025-04-19_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npython gdrive_agent.py\n```\n\n----------------------------------------\n\nTITLE: Multi-Agent System Memory Graph (Mermaid)\nDESCRIPTION: This Mermaid diagram illustrates the memory architecture in a multi-agent system, depicting both private and shared memory. It visualizes how each agent possesses private memory and how they can also access a common shared memory store for collaborative tasks.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/course/agents/06-agent-memory.mdx#2025-04-19_snippet_4\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD\n    A[Agent 1] --> B[Private Memory 1]\n    C[Agent 2] --> D[Private Memory 2]\n    A -.-> E[Shared Memory]\n    C -.-> E\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Memory MCP Integration\nDESCRIPTION: Command to install the required Python packages praisonaiagents and mcp needed for memory integration with AI agents.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/mcp/memory.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install praisonaiagents mcp\n```\n\n----------------------------------------\n\nTITLE: Installing PraisonAI Dependencies\nDESCRIPTION: Command to install the required PraisonAI agent package with LLM support.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/mcp/ollama.mdx#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npip install \"praisonaiagents[llm]\"\n```\n\n----------------------------------------\n\nTITLE: Customizing JSON Options in Python\nDESCRIPTION: This snippet customizes JSON operation options such as indentation and sorting keys. The `indent` parameter specifies the number of spaces to use for indentation, while `sort_keys` determines whether the JSON keys should be sorted alphabetically. These options can be used to format JSON output according to specific requirements.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/json_tools.mdx#2025-04-19_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nindent=2, sort_keys=True\n```\n\n----------------------------------------\n\nTITLE: Instruction Display Function - Python\nDESCRIPTION: Function to display instruction messages in the console with optional console parameter.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/api/praisonaiagents/index.mdx#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndisplay_instruction(message: str, console=None)\n```\n\n----------------------------------------\n\nTITLE: Installing Required Dependencies for Redis MCP Integration\nDESCRIPTION: Shell command for installing the necessary Python packages (praisonaiagents and mcp) to enable Redis integration with PraisonAI agents.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/mcp/redis.mdx#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install praisonaiagents mcp\n```\n\n----------------------------------------\n\nTITLE: Installing PraisonAI with npm\nDESCRIPTION: Installs the PraisonAI framework using npm. This is necessary to set up the environment before writing AI agents. The command must be executed in the terminal. No input parameters are required.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/js/typescript-async.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install praisonai\n```\n\n----------------------------------------\n\nTITLE: Initializing and Running CrewAI with PraisonAI in Bash\nDESCRIPTION: These snippets demonstrate setting an API key for OpenAI, initializing a CrewAI task, and running agents using the PraisonAI interface. Prerequisites include an OpenAI API Key and PraisonAI installation with CrewAI support. It receives task descriptions for creative task generation.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/framework/crewai.mdx#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Set your OpenAI API key\nexport OPENAI_API_KEY=xxxxxxxxxx\n\n# Initialize with CrewAI\npraisonai --framework crewai --init \"Create a Movie Script About Cat in Mars\"\n\n# Run the agents\npraisonai --framework crewai\n```\n\n----------------------------------------\n\nTITLE: Installing PraisonAI Agents and Wikipedia Package\nDESCRIPTION: This command installs the PraisonAI Agents package and the Wikipedia package using pip. The PraisonAI Agents package provides the framework for creating and managing AI agents, while the Wikipedia package allows access to Wikipedia's API.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/wikipedia_tools.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install praisonaiagents wikipedia\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for PraisonAI in Terminal\nDESCRIPTION: The bash command installs the `praisonaiagents` and `duckduckgo-search` Python packages necessary for the project. These dependencies are required for creating agents with internet search capabilities.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/course/agents/12-adding-tools-to-agents.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install praisonaiagents duckduckgo-search\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for AWS KB Retrieval MCP Integration\nDESCRIPTION: Command to install the required Python packages for integrating AWS KB retrieval with PraisonAI agents using MCP.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/mcp/aws-kb-retrieval.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install praisonaiagents mcp\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Python MCP Client\nDESCRIPTION: These commands set environment variables for configuring the Python MCP client. They specify the Python interpreter path and server script path to be used by the client.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/mcp/custom-python-client.mdx#2025-04-19_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nexport PYTHON_PATH=/Users/praison/miniconda3/envs/mcp/bin/python\nexport SERVER_PATH=/Users/praison/stockprice/app.py\n```\n\n----------------------------------------\n\nTITLE: Setting OpenAI API Key Environment Variable\nDESCRIPTION: Bash command to set the OpenAI API key as an environment variable, which is required for authenticating and using AI agent services\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/examples/crypto-validator.mdx#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport OPENAI_API_KEY=your_api_key_here\n```\n\n----------------------------------------\n\nTITLE: Installing PraisonAI - Bash\nDESCRIPTION: This snippet provides instructions to install the PraisonAI package using pip. Ensure you have the proper package manager setup for Python installations.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/concepts/agents.mdx#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npip install praisonaiagents\n```\n\n----------------------------------------\n\nTITLE: Visualizing Google Gemini Integration Flow with Mermaid\nDESCRIPTION: A flowchart diagram illustrating the data flow from input through Google API and Gemini to different agent types (Basic, Multi-Agents, and No-Code) and their outputs.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/models/google.mdx#2025-04-19_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n    In[Input] --> API[(\"Google API\")]\n    API --> Gemini[(\"Gemini\")]\n    Gemini --> Basic[Basic Agent]\n    Gemini --> Multi[Multi-Agents]\n    Gemini --> YAML[No-Code]\n    Basic --> Out1[Output]\n    Multi --> Out2[Output]\n    YAML --> Out3[Output]\n    \n    style In fill:#8B0000,color:#fff\n    style API fill:#4169E1,color:#fff,shape:circle\n    style Gemini fill:#2E8B57,color:#fff,shape:circle\n    style Basic fill:#2E8B57,color:#fff\n    style Multi fill:#2E8B57,color:#fff\n    style YAML fill:#2E8B57,color:#fff\n    style Out1 fill:#8B0000,color:#fff\n    style Out2 fill:#8B0000,color:#fff\n    style Out3 fill:#8B0000,color:#fff\n```\n\n----------------------------------------\n\nTITLE: Visualizing Web Search Agent Workflow\nDESCRIPTION: A flowchart diagram showing the process flow from search query input through web search, content filtering, and summarization to final output.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/agents/websearch.mdx#2025-04-19_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n    In[Search Query] --> Search[Web Search]\n    Search --> Filter[Content Filter]\n    Filter --> Summarizer[Content Summarizer]\n    Summarizer --> Out[Search Results]\n    \n    style In fill:#8B0000,color:#fff\n    style Search fill:#2E8B57,color:#fff\n    style Filter fill:#2E8B57,color:#fff\n    style Summarizer fill:#2E8B57,color:#fff\n    style Out fill:#8B0000,color:#fff\n```\n\n----------------------------------------\n\nTITLE: Installing Bearly Code Interpreter Dependencies\nDESCRIPTION: Commands to install the required langchain-community package and set up the Bearly API key environment variable.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/external/bearly-code-interpreter.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install langchain-community\nexport BEARLY_API_KEY=your_api_key_here\n```\n\n----------------------------------------\n\nTITLE: Executing Async AI Agent with PraisonAI\nDESCRIPTION: This bash command runs a PraisonAI-managed agent using a YAML configuration file. Ensure the configuration file agents.yaml is correctly set up with required roles and tasks.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/async.mdx#2025-04-19_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npraisonai agents.yaml\n```\n\n----------------------------------------\n\nTITLE: Setting OpenAI API Key as Environment Variable\nDESCRIPTION: This bash command sets up the OpenAI API key as an environment variable named `OPENAI_API_KEY`, which is essential for authenticating requests to the OpenAI API within the PraisonAI ecosystem. This setup is required before executing the Python script that utilizes PraisonAI agents for personalized medicine protocol generation.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/examples/medicine-protocol.mdx#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport OPENAI_API_KEY=your_api_key_here\n```\n\n----------------------------------------\n\nTITLE: Run Smart City Management System\nDESCRIPTION: This bash command executes the `app.py` Python script, initiating the smart city resource management system. It assumes that the `praisonaiagents` package is installed and the OpenAI API key is set as an environment variable. The script will then simulate and optimize city resources based on the defined agents and workflow.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/examples/smart-city.mdx#2025-04-19_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npython app.py\n```\n\n----------------------------------------\n\nTITLE: Forking and Cloning the Repository\nDESCRIPTION: This code snippet shows how to fork the PraisonAI repository on GitHub and clone it locally. Forking is required to create a personal copy of the repository, and cloning allows for offline development. Ensure that Git is installed locally.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/contributing.mdx#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/yourusername/praisonAI.git\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies using pip\nDESCRIPTION: This bash command installs the necessary Python packages for using PraisonAI Agents with web scraping capabilities. It installs both the `praisonaiagents` library and the `scrapy` framework for web crawling.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/spider_tools.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n```bash\npip install praisonaiagents scrapy\n```\n```\n\n----------------------------------------\n\nTITLE: Visualizing Task States with Mermaid\nDESCRIPTION: This Mermaid diagram depicts the different states a task can go through, including pending, in progress, completed, and failed. It illustrates the lifecycle of a task in the PraisonAI framework.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/concepts/tasks.mdx#2025-04-19_snippet_4\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph LR\n    %% Task States\n    Pending([📥 Pending]) --> InProgress([⚡ In Progress])\n    InProgress --> Completed([✅ Completed])\n    InProgress --> Failed([❌ Failed])\n    \n    %% Styling\n    style Pending fill:#2D3047,stroke:#7C90A0,color:#fff\n    style InProgress fill:#5C80BC,stroke:#7C90A0,color:#fff\n    style Completed fill:#2D3047,stroke:#7C90A0,color:#fff\n    style Failed fill:#2D3047,stroke:#7C90A0,color:#fff\n    \n    %% Global styles\n    classDef default fill:#2D3047,stroke:#7C90A0,color:#fff\n    linkStyle default stroke:#7C90A0,stroke-width:2px\n```\n\n----------------------------------------\n\nTITLE: Installing PraisonAI Agents Package - Bash\nDESCRIPTION: This snippet outlines the command necessary to install the PraisonAI Agents package using pip. This is a prerequisite for utilizing the agents defined in this project.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/repetitive.mdx#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install praisonaiagents\n```\n\n----------------------------------------\n\nTITLE: Running PraisonAI Agents from terminal\nDESCRIPTION: This command executes the Python script `app.py` from the terminal, which starts the PraisonAI agents defined within the script. It assumes that the `praisonaiagents` library and other dependencies are installed, and the OpenAI API key is set as an environment variable.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/selfreflection.mdx#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npython app.py\n```\n\n----------------------------------------\n\nTITLE: Visualizing Markdown Agent Workflow with Mermaid\nDESCRIPTION: A flowchart diagram illustrating the process of content generation, formatting, and validation performed by the Markdown Agent.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/agents/markdown.mdx#2025-04-19_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n    In[Content Request] --> Generator[Content Generator]\n    Generator --> Formatter[Markdown Formatter]\n    Formatter --> Validator[Format Validator]\n    Validator --> Out[Markdown Output]\n    \n    style In fill:#8B0000,color:#fff\n    style Generator fill:#2E8B57,color:#fff\n    style Formatter fill:#2E8B57,color:#fff\n    style Validator fill:#2E8B57,color:#fff\n    style Out fill:#8B0000,color:#fff\n```\n\n----------------------------------------\n\nTITLE: Setting Up OpenAI API Key\nDESCRIPTION: This snippet demonstrates how to set the OpenAI API key as an environment variable. Replace 'your-api-key-here' with your actual API key from OpenAI's platform.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/ui/realtime.mdx#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport OPENAI_API_KEY=\"your-api-key-here\"\n```\n\n----------------------------------------\n\nTITLE: Installing PraisonAI Agents Package\nDESCRIPTION: Command to install the PraisonAI Agents package using pip.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/agents/recommendation.mdx#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install praisonaiagents\n```\n\n----------------------------------------\n\nTITLE: Installing Package with Pip\nDESCRIPTION: This command installs the necessary Python packages for the Streamlit application, including praisonaiagents with the knowledge extension, Streamlit itself for creating the user interface, and Ollama for hosting and running the Deepseek models.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/ui/streamlit/deepseek-streamlit.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install \"praisonaiagents[knowledge]\" streamlit ollama\n```\n\n----------------------------------------\n\nTITLE: Advanced Equation Solving\nDESCRIPTION: Demonstrates solving different types of equations with custom variables.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/calculator_tools.mdx#2025-04-19_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n# Linear equation\nresult = solve_equation(\"2*x + 3 = 7\")\n\n# With custom variable\nresult = solve_equation(\"y^2 = 4\", variable=\"y\")\n```\n\n----------------------------------------\n\nTITLE: Setting Ignore Files with Environment Variables\nDESCRIPTION: This command sets the `PRAISONAI_IGNORE_FILES` environment variable in the terminal, specifying a comma-separated list of files and directories to ignore. This configures the application to exclude these files during analysis. The values are glob patterns.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/ui/code.mdx#2025-04-19_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n\"export PRAISONAI_IGNORE_FILES=\\\".*,*.pyc,__pycache__,.git,.gitignore,.vscode\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Ollama Integration\nDESCRIPTION: Bash command to set the OpenAI base URL to point to a local Ollama instance. This enables integration with locally hosted Ollama models for AI agent implementations.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/index.mdx#2025-04-19_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nexport OPENAI_BASE_URL=http://localhost:11434/v1\n```\n\n----------------------------------------\n\nTITLE: Installing PraisonAI Agents Package\nDESCRIPTION: Command to install the PraisonAI Agents package using pip package manager.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/agents/image-to-text.mdx#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install praisonaiagents\n```\n\n----------------------------------------\n\nTITLE: Installing JavaScript Dependencies using NPM\nDESCRIPTION: This command installs all necessary dependencies for the PraisonAI project using npm. Ensure Node.js and npm are installed on your system. It reads the package.json file for dependency specifications.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/js/development.mdx#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: No-Code Implementation Setup with LangChain\nDESCRIPTION: Installation of the LangChain Google GenAI package and setting up the Google API key for No-Code implementation using YAML configuration.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/models/google.mdx#2025-04-19_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\npip install langchain-google-genai\nexport GOOGLE_API_KEY=xxxxxxxxxx\n```\n\n----------------------------------------\n\nTITLE: Appending Audio to Input Buffer\nDESCRIPTION: This JSON snippet demonstrates how to append audio bytes to the input audio buffer, including an optional client-generated ID and the base64-encoded audio data.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/praisonai/ui/realtimeclient/realtimedocs.txt#2025-04-19_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"event_id\": \"event_456\",\n    \"type\": \"input_audio_buffer.append\",\n    \"audio\": \"Base64EncodedAudioData\"\n}\n```\n\n----------------------------------------\n\nTITLE: Self Reflection Display - Python\nDESCRIPTION: Function to display agent self-reflection messages with optional console parameter.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/api/praisonaiagents/index.mdx#2025-04-19_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndisplay_self_reflection(message: str, console=None)\n```\n\n----------------------------------------\n\nTITLE: Defining an Analysis Task\nDESCRIPTION: This snippet defines an analysis task using the `Task` class. It specifies the task's description, expected output, the agent responsible for executing the task, and a name for the task.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/pandas_tools.mdx#2025-04-19_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n# Define analysis task\nanalysis_task = Task(\n    description=\"Analyze sales performance data.\",\n    expected_output=\"Sales analysis report.\",\n    agent=data_agent,\n    name=\"sales_analysis\"\n)\n```\n\n----------------------------------------\n\nTITLE: Creating the Finance Analysis Script - Python\nDESCRIPTION: This Python snippet demonstrates how to create a Finance Agent that uses specified tools for analyzing stock prices and historical data.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/agents/finance.mdx#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent, Tools\nfrom praisonaiagents.tools import get_stock_price, get_stock_info, get_historical_data\n\nagent = Agent(\n    instructions=\"You are a Research Agent\",\n    tools=[get_stock_price, get_stock_info, get_historical_data]\n)\nagent.start(\"Understand current stock price and historical data of Apple and Google. Tell me if I can invest in them\")\n```\n\n----------------------------------------\n\nTITLE: Installing Required Dependencies for AI Storybook Creation\nDESCRIPTION: Installs necessary Python packages including requests, praisonai, openai, and crewai extensions with output suppressed using /dev/null redirection.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/cookbooks/yaml/story_book_author_agents.ipynb#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Install dependencies without output\n!pip install requests > /dev/null\n!pip install praisonai > /dev/null\n!pip install openai > /dev/null\n!pip install praisonai[crewai] > /dev/null\n```\n\n----------------------------------------\n\nTITLE: Initializing Agent YAML\nDESCRIPTION: Initializes agents.yaml file using praisonai command.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/quickstart.mdx#2025-04-19_snippet_16\n\nLANGUAGE: Terminal\nCODE:\n```\npraisonai --init create movie script about cat in mars\n```\n\n----------------------------------------\n\nTITLE: Setting OpenAI API Key as Environment Variable\nDESCRIPTION: Command to set the OpenAI API key as an environment variable in the terminal before running the agent. This ensures secure access to OpenAI's services.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/mcp/openai.mdx#2025-04-19_snippet_1\n\nLANGUAGE: zsh\nCODE:\n```\nexport OPENAI_API_KEY=your_openai_api_key_here\n```\n\n----------------------------------------\n\nTITLE: Installing PraisonAI Agents Package via Pip\nDESCRIPTION: Command to install the PraisonAI Agents package using pip for Python\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/promptchaining.mdx#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install praisonaiagents\n```\n\n----------------------------------------\n\nTITLE: Installing PraisonAI Package Using npm\nDESCRIPTION: Installs the PraisonAI package using npm to prepare the environment for building AI Agents.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/js/nodejs.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install praisonai\n```\n\n----------------------------------------\n\nTITLE: Research Assistant Workflow Diagram\nDESCRIPTION: This diagram illustrates the flow of the research assistant workflow using Mermaid syntax. It shows the sequence of tasks: Paper Analysis, Gap Identification, Experiment Design, Methodology Validation, and Impact Prediction.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/examples/research-assistant.mdx#2025-04-19_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\n```mermaid\nflowchart LR\n    In[In] --> Analyzer[Paper Analyzer]\n    Analyzer --> Gap[Gap Identifier]\n    Gap --> Designer[Experiment Designer]\n    Designer --> Validator[Methodology Validator]\n    Validator --> Impact[Impact Predictor]\n    Impact --> Out[Out]\n    \n    style In fill:#8B0000,color:#fff\n    style Analyzer fill:#2E8B57,color:#fff\n    style Gap fill:#2E8B57,color:#fff\n    style Designer fill:#2E8B57,color:#fff\n    style Validator fill:#2E8B57,color:#fff\n    style Impact fill:#2E8B57,color:#fff\n    style Out fill:#8B0000,color:#fff\n```\n```\n\n----------------------------------------\n\nTITLE: Preparing Tools for OpenAI API Communication\nDESCRIPTION: This snippet illustrates how to prepare the tool definition for the OpenAI API. It copies the tool definition from the `tools_dict`, removes the 'callable' function (as it's not JSON serializable), and appends the modified definition to the `task_tools` list. This list will be used when creating the task for the agent.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/praisonai/ui/tools.md#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n```python\n# task_tools: What OpenAI understands\ntask_tools = []\ntool_def = tools_dict[tool_name].copy()\ncallable_func = tool_def.pop(\"callable\")  # Remove the Python function\ntask_tools.append(tool_def)  # Add clean JSON-serializable definition\n```\n```\n\n----------------------------------------\n\nTITLE: Installing PraisonAI Agents Package\nDESCRIPTION: Command to install the required PraisonAI Agents package using pip.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/file_tools.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install praisonaiagents\n```\n\n----------------------------------------\n\nTITLE: Install PraisonAI Agents Package\nDESCRIPTION: This command installs the PraisonAI Agents package using pip, which is a prerequisite for using the agentic parallelization features. It allows users to utilize the Agent, Task, and PraisonAIAgents classes to create and manage AI agents and workflows.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/parallelisation.mdx#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install praisonaiagents\n```\n\n----------------------------------------\n\nTITLE: Exporting OpenAI API Key in Bash\nDESCRIPTION: Command to export the OpenAI API key as an environment variable, which is required for using OpenAI LLMs with the WhatsApp agent.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/mcp/whatsapp.mdx#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nexport OPENAI_API_KEY=\"your_api_key\"\n```\n\n----------------------------------------\n\nTITLE: Running the Sequential Thinking Python Script\nDESCRIPTION: Command to execute the Python script that creates and runs the sequential thinking agent.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/mcp/sequential-thinking.mdx#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npython sequential_thinking.py\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Meeting Preparation Automation\nDESCRIPTION: Installs necessary Python packages including langchain_community, praisonai, duckduckgo-search, python-dotenv, and slack_sdk for the meeting preparation automation system.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/cookbooks/yaml/meeting_prep_using_slack_and_trello_agents.ipynb#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Install dependencies without output\n%pip install langchain_community > /dev/null\n%pip install praisonai[crewai] > /dev/null\n%pip install duckduckgo-search > /dev/null\n%pip install python-dotenv > /dev/null\n%pip install slack_sdk > /dev/null\n%pip install python-dotenv > /dev/null\n```\n\n----------------------------------------\n\nTITLE: Setting AWS and OpenAI API Credentials for KB Retrieval\nDESCRIPTION: Bash commands to set environment variables for AWS credentials and OpenAI API key, necessary for the AWS KB retrieval agent.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/mcp/aws-kb-retrieval.mdx#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport AWS_ACCESS_KEY_ID=your_aws_access_key_id_here\nexport AWS_SECRET_ACCESS_KEY=your_aws_secret_access_key_here\nexport AWS_REGION=your_aws_region_here\nexport OPENAI_API_KEY=your_openai_api_key_here\n```\n\n----------------------------------------\n\nTITLE: Installing PraisonAI Agents Package\nDESCRIPTION: Command to install the PraisonAI Agents package using pip package manager.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/agents/websearch.mdx#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install praisonaiagents\n```\n\n----------------------------------------\n\nTITLE: Setting OpenAI API Key\nDESCRIPTION: Command to set the OpenAI API key as an environment variable.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/agents/image.mdx#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport OPENAI_API_KEY=your_api_key_here\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenAI API Key\nDESCRIPTION: Setting the OpenAI API key as an environment variable in the terminal, crucial for authenticating requests when using language models within PraisonAI agents.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/concepts/memory.mdx#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport OPENAI_API_KEY=your_api_key_here\n```\n\n----------------------------------------\n\nTITLE: Setting OpenAI API Key\nDESCRIPTION: Command to set the OpenAI API key as an environment variable for authentication.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/agents/data-analyst.mdx#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport OPENAI_API_KEY=your_api_key_here\n```\n\n----------------------------------------\n\nTITLE: Visualizing AI Agents with Memory Architecture using Mermaid\nDESCRIPTION: Mermaid diagram showing the architecture of AI agents with memory capabilities. The diagram illustrates how short-term and long-term memory connect to a vector database, which is accessed by multiple agents.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/index.mdx#2025-04-19_snippet_5\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TB\n    subgraph Memory\n        direction TB\n        STM[Short Term]\n        LTM[Long Term]\n    end\n\n    subgraph Store\n        direction TB\n        DB[(Vector DB)]\n    end\n\n    Input[Input] ---> Agents\n    subgraph Agents\n        direction LR\n        A1[Agent 1]\n        A2[Agent 2]\n        A3[Agent 3]\n    end\n    Agents ---> Output[Output]\n\n    Memory <--> Store\n    Store <--> A1\n    Store <--> A2\n    Store <--> A3\n\n    style Memory fill:#189AB4,color:#fff\n    style Store fill:#2E8B57,color:#fff\n    style Agents fill:#8B0000,color:#fff\n    style Input fill:#8B0000,color:#fff\n    style Output fill:#8B0000,color:#fff\n```\n\n----------------------------------------\n\nTITLE: Installing and Configuring SerpAPI with Bash\nDESCRIPTION: This snippet demonstrates the installation of necessary Python packages and the configuration of environment variables required for using SerpAPI and OpenAI with PraisonAI agents. The 'langchain-community' and 'google-search-results' packages are installed, and API keys are set via environment variables.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/external/serp-api.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install langchain-community google-search-results\nexport SERPAPI_API_KEY=your_api_key_here\nexport OPENAI_API_KEY=your_api_key_here\n```\n\n----------------------------------------\n\nTITLE: Customizing Search Parameters\nDESCRIPTION: This example demonstrates how to customize search parameters within the context of Wikipedia tools. The language parameter sets the language for the search, while sentences defines the number of sentences in the summary.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/wikipedia_tools.mdx#2025-04-19_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nlanguage=\"en\", sentences=3\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for PraisonAI Agents and MCP\nDESCRIPTION: This command installs the necessary Python packages for using PraisonAI agents and MCP. It requires pip and assumes Python is already installed.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/mcp/github.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install praisonaiagents mcp\n```\n\n----------------------------------------\n\nTITLE: Install Dependencies using pip\nDESCRIPTION: This command installs the necessary Python packages for the Streamlit application, including Streamlit itself, the praisonaiagents library, and the gitingest library.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/ui/streamlit/code-analysis-streamlit.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"pip install streamlit praisonaiagents gitingest\"\n```\n\n----------------------------------------\n\nTITLE: Setting Anthropic API Key in Environment (Zsh)\nDESCRIPTION: Sets the Anthropic API key as an environment variable in the terminal. This is a prerequisite for using Anthropic's services securely.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/mcp/anthropic.mdx#2025-04-19_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nexport ANTHROPIC_API_KEY=your_anthropic_api_key_here\n```\n\n----------------------------------------\n\nTITLE: Setting OpenAI API Key\nDESCRIPTION: Command to set the OpenAI API key as an environment variable.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/mcp/filesystem.mdx#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport OPENAI_API_KEY=your_openai_api_key_here\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies in Python\nDESCRIPTION: This snippet installs the necessary dependencies for the PraisonAI project without displaying the installation output. These packages are essential for the project to run seamlessly.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/cookbooks/yaml/job_profile_matching_agents.ipynb#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n%pip install langchain_community > /dev/null\n%pip install praisonai[crewai] > /dev/null\n\n```\n\n----------------------------------------\n\nTITLE: Installing Required Python Dependencies\nDESCRIPTION: Terminal command to install the PraisonAI Agents package using pip. This step is required before running the agent code.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/mcp/openai.mdx#2025-04-19_snippet_3\n\nLANGUAGE: zsh\nCODE:\n```\npip install praisonaiagents\n```\n\n----------------------------------------\n\nTITLE: Setting OpenAI API Key for YAML Configuration\nDESCRIPTION: This is similar to the previous bash snippet, illustrating how to set an OpenAI API key as an environment variable necessary for PraisonAI operations, particularly when using a YAML configuration file.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/langchain_tools.mdx#2025-04-19_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nexport OPENAI_API_KEY=your_api_key_here\n```\n\n----------------------------------------\n\nTITLE: AI Agents with Tools Diagram in Mermaid\nDESCRIPTION: Mermaid diagram illustrating how AI agents can use various tools like internet search, code execution, and formatting.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/README.md#2025-04-19_snippet_9\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TB\n    subgraph Tools\n        direction TB\n        T3[Internet Search]\n        T1[Code Execution]\n        T2[Formatting]\n    end\n\n    Input[Input] ---> Agents\n    subgraph Agents\n        direction LR\n        A1[Agent 1]\n        A2[Agent 2]\n        A3[Agent 3]\n    end\n    Agents ---> Output[Output]\n\n    T3 --> A1\n    T1 --> A2\n    T2 --> A3\n\n    style Tools fill:#189AB4,color:#fff\n    style Agents fill:#8B0000,color:#fff\n    style Input fill:#8B0000,color:#fff\n    style Output fill:#8B0000,color:#fff\n```\n\n----------------------------------------\n\nTITLE: Running a TypeScript File with ts-node\nDESCRIPTION: Demonstrates how to execute a TypeScript file using ts-node. This allows running TypeScript directly without compiling it to JavaScript first. The command is run in a terminal with the filename as a parameter.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/js/typescript-async.mdx#2025-04-19_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpx ts-node app.ts\n```\n\n----------------------------------------\n\nTITLE: Running and Printing Results from PraisonAI in Python\nDESCRIPTION: This code snippet runs the PraisonAI instance and prints the results to the console. The expected output from running the instance is referred to and is printed after completion.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/cookbooks/yaml/stock_analysis_agents.ipynb#2025-04-19_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\n# Run PraisonAI\nresult = praisonai.run()\n\n# Print the result\nprint(result) # 10/10\n```\n\n----------------------------------------\n\nTITLE: Running AI Agents\nDESCRIPTION: Run the AI agents by executing the `app.py` file. This command assumes you have a python file named `app.py` that initializes and starts the agents.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/mini.mdx#2025-04-19_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npython app.py\n```\n\n----------------------------------------\n\nTITLE: Setting Gemini API Key as Environment Variable\nDESCRIPTION: Command to set the Gemini API key as an environment variable for authentication with Google's API.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/models/google.mdx#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport GEMINI_API_KEY=xxxxxxxxxxx\n```\n\n----------------------------------------\n\nTITLE: Installing PraisonAI Agent Dependencies for Slack MCP Integration\nDESCRIPTION: Installs the necessary Python packages for PraisonAI agents and MCP (Model Context Protocol).\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/mcp/slack.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install praisonaiagents mcp\n```\n\n----------------------------------------\n\nTITLE: Installing Wikipedia and Langchain Community Libraries\nDESCRIPTION: This command installs the `wikipedia` and `langchain_community` libraries, which are necessary for interacting with the Wikipedia API and building language-based applications.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/wikipedia.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install wikipedia langchain_community\n```\n\n----------------------------------------\n\nTITLE: Mission Planning Flowchart\nDESCRIPTION: This Mermaid code defines a flowchart that illustrates the space mission planning process. It visually represents the flow of data and dependencies between key components such as the Mission Analyzer, Resource Calculator, Contingency Planner, Resource Optimizer, and Scenario Simulator.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/examples/space-mission.mdx#2025-04-19_snippet_0\n\nLANGUAGE: Mermaid\nCODE:\n```\n```mermaid\nflowchart LR\n    In[In] --> Mission[Mission Analyzer]\n    Mission --> Resources[Resource Calculator]\n    Resources --> Contingency[Contingency Planner]\n    Contingency --> Optimizer[Resource Optimizer]\n    Optimizer --> Simulator[Scenario Simulator]\n    Simulator --> Out[Out]\n    \n    style In fill:#8B0000,color:#fff\n    style Mission fill:#2E8B57,color:#fff\n    style Resources fill:#2E8B57,color:#fff\n    style Contingency fill:#2E8B57,color:#fff\n    style Optimizer fill:#2E8B57,color:#fff\n    style Simulator fill:#2E8B57,color:#fff\n    style Out fill:#8B0000,color:#fff\n```\n```\n\n----------------------------------------\n\nTITLE: Completed Text Response in OpenAI API\nDESCRIPTION: Example of a response.text.done event in the OpenAI API event stream. This event is emitted when text streaming is complete or when a response is interrupted. It contains the complete final text content.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/praisonai/ui/realtimeclient/realtimedocs.txt#2025-04-19_snippet_27\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"event_id\": \"event_4344\",\n    \"type\": \"response.text.done\",\n    \"response_id\": \"resp_001\",\n    \"item_id\": \"msg_007\",\n    \"output_index\": 0,\n    \"content_index\": 0,\n    \"text\": \"Sure, I can help with that.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Logging into Wandb\nDESCRIPTION: This bash command logs the user into Weights & Biases (Wandb). Wandb is a platform for tracking and visualizing machine learning experiments.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/train.mdx#2025-04-19_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nwandb login\n```\n\n----------------------------------------\n\nTITLE: Setting OpenAI API Key - Bash\nDESCRIPTION: This snippet shows how to set the OpenAI API key as an environment variable, which is necessary for using OpenAI services.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/structured.mdx#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport OPENAI_API_KEY=your_api_key_here\n```\n\n----------------------------------------\n\nTITLE: Setting OpenAI API Key\nDESCRIPTION: Command to set the OpenAI API key as an environment variable, crucial for accessing AI functionalities through OpenAI services within PraisonAI.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/examples/defi-market-maker.mdx#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport OPENAI_API_KEY=your_api_key_here\n```\n\n----------------------------------------\n\nTITLE: Running the Everart Agent\nDESCRIPTION: Command to execute the Python script that runs the Everart agent implementation.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/mcp/everart.mdx#2025-04-19_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npython everart_agent.py\n```\n\n----------------------------------------\n\nTITLE: Installing the PraisonAI Agents Package\nDESCRIPTION: This Bash command installs the required PraisonAI Agents package along with the DuckDuckGo search tool for interaction with AI agents. It is a prerequisite to utilizing the code examples provided in this documentation.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/autoagents.mdx#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install praisonaiagents duckduckgo_search\n```\n\n----------------------------------------\n\nTITLE: Installing PraisonAI Agents Package with Gemini Dependencies\nDESCRIPTION: Command to install the PraisonAI Agents package with the LLM dependencies needed for Google Gemini integration.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/models/google.mdx#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install \"praisonaiagents[llm]\"\n```\n\n----------------------------------------\n\nTITLE: Response Output Item Added Event in JSON\nDESCRIPTION: Example of an event object returned when a new Item is created during response generation. It includes the event ID, event type, response ID, output index, and details about the newly added item.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/praisonai/ui/realtimeclient/realtimedocs.txt#2025-04-19_snippet_22\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"event_id\": \"event_3334\",\n    \"type\": \"response.output_item.added\",\n    \"response_id\": \"resp_001\",\n    \"output_index\": 0,\n    \"item\": {\n        \"id\": \"msg_007\",\n        \"object\": \"realtime.item\",\n        \"type\": \"message\",\n        \"status\": \"in_progress\",\n        \"role\": \"assistant\",\n        \"content\": []\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Unit Conversions\nDESCRIPTION: Shows various unit conversion examples including length, temperature, and time.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/calculator_tools.mdx#2025-04-19_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n# Length conversion\nresult = convert_units(100, \"meters\", \"kilometers\")\n\n# Temperature conversion\nresult = convert_units(32, \"fahrenheit\", \"celsius\")\n\n# Time conversion\nresult = convert_units(2.5, \"hours\", \"minutes\")\n```\n\n----------------------------------------\n\nTITLE: Installing PraisonAI Agents Package\nDESCRIPTION: Command to install the PraisonAI Agents package using pip package manager.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/agents/research.mdx#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install praisonaiagents\n```\n\n----------------------------------------\n\nTITLE: Setting SERPAPI Environment Variable\nDESCRIPTION: Sets up the SERPAPI API key as an environment variable for authentication.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/external/google-trends.mdx#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport SERPAPI_API_KEY=your_api_key_here\n```\n\n----------------------------------------\n\nTITLE: Run a simple PraisonAI command\nDESCRIPTION: Runs a simple PraisonAI command directly from the terminal. This example prompts the AI to write a movie script in 3 lines.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/cli.mdx#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n\"praisonai \\\"write a movie script in 3 lines\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests with Python Unittest\nDESCRIPTION: This command executes unit tests defined in the 'tests.test' module of the PraisonAI project using Python's built-in unittest framework. It's essential for validating the functionality of individual components and ensuring the integrity of the application. The command can be run in a terminal where the Python environment is set up correctly.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/developers/test.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython -m unittest tests.test\n```\n\n----------------------------------------\n\nTITLE: Setting OpenAI API Key\nDESCRIPTION: Command to set the OpenAI API key as an environment variable.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/agents/recommendation.mdx#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport OPENAI_API_KEY=your_api_key_here\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Game Development Agents\nDESCRIPTION: Installs the required Python packages silently using pip, including langchain_community and praisonai with the crewai extension.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/cookbooks/yaml/game_development_agents.ipynb#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Install dependencies without output\n%pip install langchain_community > /dev/null\n%pip install praisonai[crewai] > /dev/null\n```\n\n----------------------------------------\n\nTITLE: Defining a Wiki Task\nDESCRIPTION: This code shows how to define a research task using the `Task` constructor. The `description` parameter specifies the query or objective for the agent to accomplish.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/wikipedia_tools.mdx#2025-04-19_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nTask(description=\"wiki_query\")\n```\n\n----------------------------------------\n\nTITLE: Setting OpenAI API Key as Environment Variable\nDESCRIPTION: Bash command to set the OpenAI API key for authentication\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/promptchaining.mdx#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport OPENAI_API_KEY=your_api_key_here\n```\n\n----------------------------------------\n\nTITLE: Set OpenAI API key as an environment variable\nDESCRIPTION: Sets the OpenAI API key as an environment variable.  The API key is required to authenticate requests to the OpenAI API. Replace \"your_api_key_here\" with the actual API key.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/cli.mdx#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n\"export OPENAI_API_KEY=your_api_key_here\"\n```\n\n----------------------------------------\n\nTITLE: Using PraisonAI with AG2 Framework\nDESCRIPTION: Command to run PraisonAI specifically using the AG2 (AutoGen) framework for task execution.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/nocode/auto.mdx#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npraisonai --framework autogen --auto \"create a movie script about Dog in Moon\"\n```\n\n----------------------------------------\n\nTITLE: Installing arXiv Dependencies\nDESCRIPTION: Installation of required packages for arXiv tools integration\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/arxiv_tools.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install praisonaiagents arxiv\n```\n\n----------------------------------------\n\nTITLE: Installing PraisonAI Agents and MCP Dependencies\nDESCRIPTION: Command to install the required Python packages for using PraisonAI agents with MCP. This needs to be run after ensuring Node.js is installed on the system.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/mcp/puppeteer.mdx#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install praisonaiagents mcp\n```\n\n----------------------------------------\n\nTITLE: Installing Required Python Dependencies\nDESCRIPTION: Bash command to install necessary Python packages for the implementation, including praisonaiagents with LLM support, yfinance for stock data, and mcp for method calling protocol.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/mcp/ollama-python.mdx#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npip install \"praisonaiagents[llm]\" yfinance mcp\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for API Keys\nDESCRIPTION: Sets the necessary environment variables for Google Maps API key and OpenAI API key in the terminal.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/mcp/google-maps.mdx#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport GOOGLE_MAPS_API_KEY=your_google_maps_api_key_here\nexport OPENAI_API_KEY=your_openai_api_key_here\n```\n\n----------------------------------------\n\nTITLE: Running Math Agent YAML Configuration\nDESCRIPTION: Executes the PraisonAI agents using a YAML configuration file. Ensure that agents.yaml is correctly set up and saved.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/mathagent.mdx#2025-04-19_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npraisonai agents.yaml\n```\n\n----------------------------------------\n\nTITLE: Modeling PDF Processing with Mermaid\nDESCRIPTION: Illustrates in a flowchart the process of indexing and retrieving PDF documents for chat agent interaction through a vector store.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/chat-with-pdf.mdx#2025-04-19_snippet_4\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n    subgraph In[Input]\n        PDF[PDF Documents]\n    end\n\n    subgraph Router[Vector Store]\n        DB[(Vector DB)]\n    end\n    \n    subgraph Out[Chat Agents]\n        A1[Chat Agent 1]\n        A2[Chat Agent 2]\n        A3[Chat Agent 3]\n    end\n\n    In --> Router\n    Router --> A1\n    Router --> A2\n    Router --> A3\n\n    style In fill:#8B0000,color:#fff\n    style Router fill:#2E8B57,color:#fff\n    style Out fill:#8B0000,color:#fff\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for OpenAI\nDESCRIPTION: This code sets the OpenAI API key as an environment variable required before running any scripts that utilize the PraisonAI framework to ensure the agents can access the OpenAI API.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/js/js.mdx#2025-04-19_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nexport OPENAI_API_KEY='your-api-key'\n```\n\n----------------------------------------\n\nTITLE: Renaming Metadata Column in Multiple Tables\nDESCRIPTION: Modification of column names across users, threads, steps, and elements tables, converting snake_case to camelCase and PascalCase\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/praisonai/ui/README.md#2025-04-19_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n-- Users Table Changes\nALTER TABLE users\n    RENAME COLUMN metadata TO meta;\n    RENAME COLUMN created_at TO createdAt;\n\n-- Threads Table Changes\nALTER TABLE threads\n    RENAME COLUMN metadata TO meta;\n    RENAME COLUMN created_at TO createdAt;\n\n-- Steps Table Changes\nALTER TABLE steps\n    RENAME COLUMN metadata TO meta;\n    RENAME COLUMN start_time TO startTime;\n    RENAME COLUMN end_time TO endTime;\n\n-- Elements Table Changes\nALTER TABLE elements\n    DROP COLUMN metadata;\n```\n\n----------------------------------------\n\nTITLE: Configuring Ollama Base URL\nDESCRIPTION: Sets up the OpenAI base URL environment variable to point to the local Ollama server endpoint.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/models/ollama.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport OPENAI_BASE_URL=http://localhost:11434/v1\n```\n\n----------------------------------------\n\nTITLE: Setting Google Drive Environment Variables\nDESCRIPTION: Commands to set up the necessary environment variables for Google Drive credentials and OpenAI API key.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/mcp/gdrive.mdx#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport GDRIVE_CREDENTIALS_PATH=path/to/your/gcp-oauth.keys.json\nexport OPENAI_API_KEY=your_openai_api_key_here\n```\n\n----------------------------------------\n\nTITLE: Run the Streamlit App\nDESCRIPTION: This command starts the Streamlit application, making it accessible in a web browser. The application will typically be available at `http://localhost:8501`.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/ui/streamlit/code-analysis-streamlit.mdx#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n\"streamlit run code_analysis_app.py\"\n```\n\n----------------------------------------\n\nTITLE: Visualizing AI Agent Flow with Mermaid\nDESCRIPTION: A flowchart diagram showing the data flow between Input, AI Agent, Airbnb MCP Tool, and Output components.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/mcp/ollama.mdx#2025-04-19_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n    In[In] --> Agent[AI Agent]\n    Agent --> Tool[Airbnb MCP]\n    Tool --> Agent\n    Agent --> Out[Out]\n    \n    style In fill:#8B0000,color:#fff\n    style Agent fill:#2E8B57,color:#fff\n    style Tool fill:#FF5A5F,color:#fff\n    style Out fill:#8B0000,color:#fff\n```\n\n----------------------------------------\n\nTITLE: Visualizing Puppeteer Integration Flow with Mermaid\nDESCRIPTION: A flowchart that illustrates how a user query flows through the AI Agent to the Puppeteer MCP tool and back to produce an answer. The diagram shows the data flow and relationship between components.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/mcp/puppeteer.mdx#2025-04-19_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n    In[Query] --> Agent[AI Agent]\n    Agent --> Tool[Puppeteer MCP]\n    Tool --> Agent\n    Agent --> Out[Answer]\n    \n    style In fill:#8B0000,color:#fff\n    style Agent fill:#2E8B57,color:#fff\n    style Tool fill:#00B4FF,color:#fff\n    style Out fill:#8B0000,color:#fff\n```\n\n----------------------------------------\n\nTITLE: Error Display Function - Python\nDESCRIPTION: Function to display error messages in the console with optional console parameter.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/api/praisonaiagents/index.mdx#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndisplay_error(message: str, console=None)\n```\n\n----------------------------------------\n\nTITLE: Installing PraisonAI with npm (JavaScript/TypeScript)\nDESCRIPTION: Install the PraisonAI package for JavaScript and TypeScript environments using the npm package manager.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/installation.mdx#2025-04-19_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm install praisonai\n```\n\n----------------------------------------\n\nTITLE: Setting OpenAI API Key in Bash\nDESCRIPTION: This command exports the OpenAI API key as an environment variable, which is a prerequisite for utilizing the PraisonAI Agents capabilities in the Python application.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/examples/customer-service.mdx#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport OPENAI_API_KEY=your_api_key_here\n```\n\n----------------------------------------\n\nTITLE: Truncating Conversation Item Audio\nDESCRIPTION: This JSON snippet provides the structure for truncating audio from a conversation item, specifying the content index and the duration to truncate.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/praisonai/ui/realtimeclient/realtimedocs.txt#2025-04-19_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"event_id\": \"event_678\",\n    \"type\": \"conversation.item.truncate\",\n    \"item_id\": \"msg_002\",\n    \"content_index\": 0,\n    \"audio_end_ms\": 1500\n}\n```\n\n----------------------------------------\n\nTITLE: Installing PraisonAI Agents Package\nDESCRIPTION: Command to install the required PraisonAI Agents package using pip.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/agents/video.mdx#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install praisonaiagents\n```\n\n----------------------------------------\n\nTITLE: Installing PraisonAI Agents Package\nDESCRIPTION: This command installs the PraisonAI Agents package, which provides the necessary tools and classes for creating and managing AI agents within an autonomous workflow. It is a prerequisite for using the provided code examples.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/autonomous-workflow.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"pip install praisonaiagents\"\n```\n\n----------------------------------------\n\nTITLE: Defining Agent Response Format (Text)\nDESCRIPTION: This text snippet shows a good example of defining the agent's response format. It specifies the structure and sections to be included in the analysis, ensuring consistent and organized output. The analysis should be presented with Summary, Key Findings, Risk Assessment, and Recommendations.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/course/agents/04-agent-instructions.mdx#2025-04-19_snippet_6\n\nLANGUAGE: text\nCODE:\n```\nPresent your analysis in a structured format with: Summary, Key Findings, Risk Assessment, and Recommendations.\n```\n\n----------------------------------------\n\nTITLE: Installing Required Dependencies\nDESCRIPTION: Command to install the necessary Python packages for PraisonAI agents and MCP integration.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/mcp/everart.mdx#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install praisonaiagents mcp\n```\n\n----------------------------------------\n\nTITLE: Installing PraisonAI via npm\nDESCRIPTION: Command to install the PraisonAI package using npm. This is the primary installation method for incorporating the framework into your project.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/src/praisonai-ts/README.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install praisonai\n```\n\n----------------------------------------\n\nTITLE: Installing PraisonAI Agents Package with pip (Multi-Agent)\nDESCRIPTION: This command installs the PraisonAI Agents package using pip, necessary for using the agent-based functionalities described in the multi-agent documentation.  It ensures that all required dependencies for multi-agent execution are available.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/selfreflection.mdx#2025-04-19_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npip install praisonaiagents\n```\n\n----------------------------------------\n\nTITLE: Running AWS KB Retrieval Agent Script\nDESCRIPTION: Command to execute the Python script that implements the AWS KB retrieval agent.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/mcp/aws-kb-retrieval.mdx#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npython aws_kb_retrieval.py\n```\n\n----------------------------------------\n\nTITLE: Set OpenAI API Key\nDESCRIPTION: This command sets the OpenAI API key as an environment variable.  This key is essential for authenticating and accessing the OpenAI API, which is used by the PraisonAI agents.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/examples/multilingual-content.mdx#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n\"export OPENAI_API_KEY=your_api_key_here\"\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Email Responder\nDESCRIPTION: Installs required Python packages langchain_community and praisonai with crewai extras silently.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/cookbooks/yaml/auto_email_responder_agents.ipynb#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n%pip install langchain_community > /dev/null\n%pip install praisonai[crewai] > /dev/null\n```\n\n----------------------------------------\n\nTITLE: Running the Airbnb Search Agent\nDESCRIPTION: Command to execute the Python script containing the Airbnb search agent.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/mcp/ollama.mdx#2025-04-19_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npython ollama_airbnb.py\n```\n\n----------------------------------------\n\nTITLE: Set OpenAI API Key\nDESCRIPTION: This command sets the OpenAI API key as an environment variable.  An OpenAI API key is required to interact with the praisonaiagents package.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/examples/vulnerability-detection.mdx#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport OPENAI_API_KEY=your_api_key_here\n```\n\n----------------------------------------\n\nTITLE: Setting Wandb Environment Variables\nDESCRIPTION: These bash commands set environment variables for Weights & Biases (Wandb) integration. They configure Wandb to log models as checkpoints, set the project name, and specify the run name for the training process.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/train.mdx#2025-04-19_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nexport PRAISON_WANDB=True\nexport WANDB_LOG_MODEL=checkpoint\nexport WANDB_PROJECT=praisonai-test\nexport PRAISON_WANDB_RUN_NAME=praisonai-train  \n```\n\n----------------------------------------\n\nTITLE: Smart City Workflow Diagram\nDESCRIPTION: This Mermaid diagram visualizes the workflow of the smart city resource management system, showing the flow of data between different components like Utility Monitor, Pattern Analyzer, Resource Optimizer, Implementation Agent, and Feedback Monitor. It illustrates the cyclical nature of the system with feedback loops for continuous improvement.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/examples/smart-city.mdx#2025-04-19_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n    In[In] --> Monitor[Utility Monitor]\n    Monitor --> Analyzer[Pattern Analyzer]\n    Analyzer --> Optimizer[Resource Optimizer]\n    Optimizer --> Implementation[Implementation Agent]\n    Implementation --> Feedback[Feedback Monitor]\n    Feedback --> Monitor\n    Feedback --> Optimizer\n    Feedback --> Out[Out]\n    \n    style In fill:#8B0000,color:#fff\n    style Monitor fill:#2E8B57,color:#fff\n    style Analyzer fill:#2E8B57,color:#fff\n    style Optimizer fill:#2E8B57,color:#fff\n    style Implementation fill:#2E8B57,color:#fff\n    style Feedback fill:#2E8B57,color:#fff\n    style Out fill:#8B0000,color:#fff\n```\n\n----------------------------------------\n\nTITLE: Running News Agent\nDESCRIPTION: Initialize and execute the news agent with defined tasks.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/newspaper_tools.mdx#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nagents = PraisonAIAgents(\n    agents=[news_agent],\n    tasks=[news_task],\n    process=\"sequential\"\n)\nagents.start()\n```\n\n----------------------------------------\n\nTITLE: Importing RedditSearchRun in Python\nDESCRIPTION: This Python snippet shows how to import the `RedditSearchRun` tool from the `langchain_community` library. This tool is used to perform Reddit searches within PraisonAI agents.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/reddit.mdx#2025-04-19_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n\"from langchain_community.tools.reddit_search.tool import RedditSearchRun\"\n```\n\n----------------------------------------\n\nTITLE: Setting Google API Key in Terminal\nDESCRIPTION: Sets the Google API key as an environment variable in the terminal to authenticate with Google's API services for Gemini models.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/mcp/gemini.mdx#2025-04-19_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nexport GOOGLE_API_KEY=your_google_api_key_here\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenAI API Key Environment Variable in Bash\nDESCRIPTION: This snippet shows how to set the `OPENAI_API_KEY` environment variable in bash. This is necessary to authenticate with the OpenAI API when using models that require an API key. Replace `your_openai_key` with your actual OpenAI API key.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/concepts/tools.mdx#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nexport OPENAI_API_KEY=your_openai_key\n```\n\n----------------------------------------\n\nTITLE: Conversation Item Created Event in JSON\nDESCRIPTION: Example of an event object returned when a conversation item is created. It includes the event ID, event type, the ID of the preceding item, and details about the newly created item.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/praisonai/ui/realtimeclient/realtimedocs.txt#2025-04-19_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"event_id\": \"event_1920\",\n    \"type\": \"conversation.item.created\",\n    \"previous_item_id\": \"msg_002\",\n    \"item\": {\n        \"id\": \"msg_003\",\n        \"object\": \"realtime.item\",\n        \"type\": \"message\",\n        \"status\": \"completed\",\n        \"role\": \"user\",\n        \"content\": [\n            {\n                \"type\": \"input_audio\",\n                \"transcript\": null\n            }\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running the Memory Agent Script\nDESCRIPTION: Command to execute the Python script that runs the memory-enabled AI agent.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/mcp/memory.mdx#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npython memory_agent.py\n```\n\n----------------------------------------\n\nTITLE: Installing the PraisonAI Agents Package\nDESCRIPTION: This Bash snippet provides the command for users to install the PraisonAI Agents package using pip, which is required to create and manage reasoning agents in Python.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/reasoning.mdx#2025-04-19_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\npip install praisonaiagents\n```\n\n----------------------------------------\n\nTITLE: Running the PostgreSQL Agent\nDESCRIPTION: Command to execute the Python script that implements the PostgreSQL agent.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/mcp/postgres.mdx#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npython postgres_agent.py\n```\n\n----------------------------------------\n\nTITLE: Pushing Changes\nDESCRIPTION: This code snippet shows how to push the local branch named 'new-feature' to the forked repository on GitHub. This enables submitting a pull request using GitHub's web interface. Authentication with GitHub may be required.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/contributing.mdx#2025-04-19_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngit push origin new-feature\n```\n\n----------------------------------------\n\nTITLE: Running Adaptive Learning System in Bash\nDESCRIPTION: This bash command executes the Python script that initializes and runs the adaptive learning system, assuming the setup in 'app.py' is correctly implemented and prerequisites are met. The output will display the stepwise results of the workflow.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/examples/adaptive-learning.mdx#2025-04-19_snippet_4\n\nLANGUAGE: Bash\nCODE:\n```\npython app.py\n```\n\n----------------------------------------\n\nTITLE: Committing Changes\nDESCRIPTION: This snippet provides the command for committing changes to the local repository with a message 'Add some feature'. Ensure all intended modifications are staged before committing.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/contributing.mdx#2025-04-19_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngit commit -am \"Add some feature\"\n```\n\n----------------------------------------\n\nTITLE: Install PraisonAI Agents Package\nDESCRIPTION: This bash command installs the `praisonaiagents` package using pip. This is a prerequisite for using the PraisonAI Agents framework in a Python environment.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/examples/space-mission.mdx#2025-04-19_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\n```bash\npip install praisonaiagents\n```\n```\n\n----------------------------------------\n\nTITLE: Running the Agent with Custom MCP Tool\nDESCRIPTION: Command to execute the Python script that creates and starts the agent with the custom MCP integration.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/mcp/custom.mdx#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npython stock_agent.py\n```\n\n----------------------------------------\n\nTITLE: Creating Conversation Item\nDESCRIPTION: This JSON snippet details how to add an item to the conversation along with a preceding item ID and the new item data.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/praisonai/ui/realtimeclient/realtimedocs.txt#2025-04-19_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"event_id\": \"event_345\",\n    \"type\": \"conversation.item.create\",\n    \"previous_item_id\": null,\n    \"item\": {\n        \"id\": \"msg_001\",\n        \"type\": \"message\",\n        \"status\": \"completed\",\n        \"role\": \"user\",\n        \"content\": [\n            {\n                \"type\": \"input_text\",\n                \"text\": \"Hello, how are you?\"\n            }\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Setting API Key\nDESCRIPTION: Instructions for installing the required langchain-community package and setting up the YouSearchAPI key as an environment variable\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/external/you-search.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install langchain-community\nexport YDC_API_KEY=your_api_key_here\n```\n\n----------------------------------------\n\nTITLE: Installing PraisonAI Dependencies\nDESCRIPTION: Command to install the required Python packages for PraisonAI agents and MCP.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/mcp/filesystem.mdx#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install praisonaiagents mcp\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for YouTube Search Analysis Agent\nDESCRIPTION: Installs required Python packages silently using pip. The dependencies include langchain_community, praisonai with crewai option, and duckduckgo_search.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/cookbooks/yaml/youtube_search_analysis_agents.ipynb#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n%pip install langchain_community > /dev/null\n%pip install praisonai[crewai] > /dev/null\n%pip install duckduckgo_search > /dev/null\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Running PraisonAI\nDESCRIPTION: Command-line instructions for installing required Python packages and setting up the environment variables needed to run the Google Calendar integration with PraisonAI.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/googlecalendar.mdx#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install google-auth-oauthlib google-auth-httplib2 google-api-python-client\npip install \"praisonai[call]\"\nexport OPENAI_API_KEY=\"enter your openai api key here\"\nexport NGROK_AUTH_TOKEN=\"enter your ngrok auth token here\"\npraisonai call --public\n```\n\n----------------------------------------\n\nTITLE: Quick Start Commands\nDESCRIPTION: Commands for quick setup including package installation and API key configuration\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/custom.mdx#2025-04-19_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npip install praisonai duckduckgo-search\nexport OPENAI_API_KEY=\"Enter your API key\"\npraisonai --init research about the latest AI News and prepare a detailed report\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for PraisonAI Book Writing\nDESCRIPTION: Installation of required Python packages including langchain_community, praisonai, and duckduckgo-search using pip.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/cookbooks/yaml/book_writing_agents.ipynb#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n%pip install langchain_community > /dev/null\n%pip install praisonai[crewai] > /dev/null\n%pip install duckduckgo-search > /dev/null\n```\n\n----------------------------------------\n\nTITLE: Set Environment Variables for API Access\nDESCRIPTION: Configuration of API keys for OpenAI and Hugging Face to enable authentication and access to AI services\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/generate-reasoning.mdx#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport OPENAI_API_KEY=your_api_key_here\nexport HF_TOKEN=your_huggingface_token_here\n```\n\n----------------------------------------\n\nTITLE: Installing Cohere Integration Package for PraisonAI\nDESCRIPTION: Command to install the langchain-cohere package which enables integration between LangChain and Cohere language models for use in PraisonAI.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/models/cohere.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install langchain-cohere\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Trip Planner\nDESCRIPTION: Installation of required Python packages including langchain_community, praisonai, requests, and duckduckgo_search using pip.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/cookbooks/yaml/trip_planner_agents.ipynb#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n%pip install langchain_community > /dev/null\n%pip install praisonai[crewai] > /dev/null\n%pip install requests > /dev/null\n%pip install duckduckgo_search > /dev/null\n```\n\n----------------------------------------\n\nTITLE: Set OpenAI API Key\nDESCRIPTION: This bash command sets the OpenAI API key as an environment variable.  This allows the PraisonAI agents to authenticate with OpenAI services.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/examples/space-mission.mdx#2025-04-19_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\n```bash\nexport OPENAI_API_KEY=your_api_key_here\n```\n```\n\n----------------------------------------\n\nTITLE: Setting OpenAI API Key for PDF Agents\nDESCRIPTION: Exports the OpenAI API key as an environment variable, which is required to enable API-driven functionalities within the `PraisonAI` agent ecosystem.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/chat-with-pdf.mdx#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport OPENAI_API_KEY=xxxxx\n```\n\n----------------------------------------\n\nTITLE: Launching Realtime Voice Interface\nDESCRIPTION: This command starts the Realtime Voice Interface provided by PraisonAI. Ensure that the necessary prerequisites are met and configurations have been set up before running this command.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/ui/realtime.mdx#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npraisonai realtime\n```\n\n----------------------------------------\n\nTITLE: Running the Example with ts-node\nDESCRIPTION: Describes how to execute the TypeScript examples using ts-node for immediate runtime without compilation.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/js/nodejs.mdx#2025-04-19_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nnpx ts-node app.ts\n```\n\n----------------------------------------\n\nTITLE: Installing TavilySearch Dependencies\nDESCRIPTION: Commands to install required packages and set up the Tavily API key for web searching functionality.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/external/tavily-search.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install \"langchain-community>=0.2.11\" tavily-python\nexport TAVILY_API_KEY=your_api_key_here\n```\n\n----------------------------------------\n\nTITLE: Tool Call Display Function - Python\nDESCRIPTION: Function to display tool call messages with optional console parameter.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/api/praisonaiagents/index.mdx#2025-04-19_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndisplay_tool_call(message: str, console=None)\n```\n\n----------------------------------------\n\nTITLE: Creating Dockerfile for Local Development\nDESCRIPTION: This Dockerfile sets up an environment for local PraisonAI Code development with live reloading.  It installs necessary dependencies and configures Flask to run in development mode. The image is based on a slim Python 3.11 image.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/ui/code.mdx#2025-04-19_snippet_11\n\nLANGUAGE: dockerfile\nCODE:\n```\n\"FROM python:3.11-slim\\n\\nWORKDIR /app\\n\\nCOPY . .\\n\\nRUN pip install flask praisonai==2.0.18 watchdog\\n\\nEXPOSE 5555\\n\\nENV FLASK_ENV=development\\n\\nCMD [\\\"flask\\\", \\\"run\\\", \\\"--host=0.0.0.0\\\"]\"\n```\n\n----------------------------------------\n\nTITLE: Running the Agent - Python\nDESCRIPTION: Initializes and starts the agent to process the assigned tasks sequentially, facilitating the execution of Python code through the defined agent.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/python_tools.mdx#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nagents = PraisonAIAgents(\n    agents=[python_agent],\n    tasks=[python_task],\n    process=\"sequential\"\n) \nagents.start()\n```\n\n----------------------------------------\n\nTITLE: PraisonAI Agent Initialization (Python) - Simple Example\nDESCRIPTION: This Python snippet demonstrates a simple example of initializing an agent in PraisonAI. It initializes an agent, sets its instructions, and starts the agent. This minimal example focuses on specifying instructions related to climate science research.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/course/agents/04-agent-instructions.mdx#2025-04-19_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent\n\nresearch_agent = Agent(\n    instructions=\"You are a research assistant specializing in climate science. Your goal is to find the latest research on rising sea levels and summarize key findings in bullet points.\"\n)\n\nresearch_agent.start()\n```\n\n----------------------------------------\n\nTITLE: Installing DuckDuckGo Search Dependency\nDESCRIPTION: Command to install the required DuckDuckGo search package\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/custom.mdx#2025-04-19_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npip install duckduckgo_search\n```\n\n----------------------------------------\n\nTITLE: Response Content Part Added Event in JSON\nDESCRIPTION: Example of an event object returned when a new content part is added to an assistant message item during response generation. It includes the event ID, event type, response and item IDs, indexes, and the newly added content part.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/praisonai/ui/realtimeclient/realtimedocs.txt#2025-04-19_snippet_24\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"event_id\": \"event_3738\",\n    \"type\": \"response.content_part.added\",\n    \"response_id\": \"resp_001\",\n    \"item_id\": \"msg_007\",\n    \"output_index\": 0,\n    \"content_index\": 0,\n    \"part\": {\n        \"type\": \"text\",\n        \"text\": \"\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running PraisonAI Commands\nDESCRIPTION: Terminal commands for running PraisonAI with different framework options\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/custom.mdx#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npraisonai\n```\n\nLANGUAGE: bash\nCODE:\n```\npraisonai --framework autogen\n```\n\n----------------------------------------\n\nTITLE: Set OpenAI API Key as Environment Variable\nDESCRIPTION: This command sets the OpenAI API key as an environment variable, which is required for the AI-powered code analysis to function. Replace `your_api_key_here` with your actual OpenAI API key.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/ui/streamlit/code-analysis-streamlit.mdx#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n\"export OPENAI_API_KEY=your_api_key_here\"\n```\n\n----------------------------------------\n\nTITLE: Setting OpenAI API Key\nDESCRIPTION: Command to set the OpenAI API key as an environment variable for authentication.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/agents/shopping.mdx#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport OPENAI_API_KEY=your_api_key_here\n```\n\n----------------------------------------\n\nTITLE: Audio Transcription Completed Event in JSON\nDESCRIPTION: Example of an event object returned when audio transcription is successfully completed. It includes the event ID, event type, item ID, content index, and the transcribed text.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/praisonai/ui/realtimeclient/realtimedocs.txt#2025-04-19_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"event_id\": \"event_2122\",\n    \"type\": \"conversation.item.input_audio_transcription.completed\",\n    \"item_id\": \"msg_003\",\n    \"content_index\": 0,\n    \"transcript\": \"Hello, how are you?\"\n}\n```\n\n----------------------------------------\n\nTITLE: Basic PraisonAI Execution\nDESCRIPTION: Shows the two main ways to launch PraisonAI - either directly using the praisonai command or through Python module execution\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/nocode/run.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npraisonai\n```\n\nLANGUAGE: bash\nCODE:\n```\npython -m praisonai\n```\n\n----------------------------------------\n\nTITLE: Installing PraisonAI Package\nDESCRIPTION: Command to install the PraisonAI package using pip package manager\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/custom.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install praisonai\n```\n\n----------------------------------------\n\nTITLE: Installing PraisonAI in Google Colab\nDESCRIPTION: This snippet demonstrates how to install the PraisonAI library within a Google Colab notebook using pip.  The `-Uq` flags ensure an upgrade if the library is already installed and suppresses output for cleaner execution.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/developers/googlecolab.mdx#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n\"!pip install -Uq praisonai\"\n```\n\n----------------------------------------\n\nTITLE: Setting API Key for PraisonAI - Python\nDESCRIPTION: This snippet demonstrates how to set the OpenAI API key as an environment variable in a Unix-like terminal for use within the PraisonAI framework.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/introduction.mdx#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport OPENAI_API_KEY=your_openai_key\n```\n\n----------------------------------------\n\nTITLE: Clearing Audio Buffer\nDESCRIPTION: This JSON snippet shows how to clear the audio bytes from the input buffer, requiring only an event type and an optional client-generated ID.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/praisonai/ui/realtimeclient/realtimedocs.txt#2025-04-19_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"event_id\": \"event_012\",\n    \"type\": \"input_audio_buffer.clear\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing PraisonAI Agents\nDESCRIPTION: Command for installing the PraisonAI Agents package via pip, necessary for the implementation of AI agents in DeFi market making.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/examples/defi-market-maker.mdx#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install praisonaiagents\n```\n\n----------------------------------------\n\nTITLE: Installing PraisonAI Package using pip\nDESCRIPTION: This bash snippet demonstrates how to install the PraisonAI package, which is necessary for building the AI agent. Ensure Python and pip are installed on your system to execute this command.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/course/agents/11-creating-your-first-agent.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install praisonaiagents\n```\n\n----------------------------------------\n\nTITLE: Installing Wikipedia Integration Packages\nDESCRIPTION: Install required packages for Wikipedia integration with Langchain.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/langchain.mdx#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npip install wikipedia langchain_community\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with pip\nDESCRIPTION: Installation of required Python packages praisonai[crewai] and duckduckgo_search using pip in a silent mode\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/cookbooks/yaml/landing_page_generator_agents.ipynb#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n%pip install praisonai[crewai] > /dev/null\n%pip install duckduckgo_search > /dev/null\n```\n\n----------------------------------------\n\nTITLE: Docker Deployment for PraisonAI\nDESCRIPTION: This Dockerfile snippet outlines the process to create a Docker image for deploying the PraisonAI application. It sets environment variables, installs system dependencies, and ensures the correct installation of PraisonAI for the voice interaction feature.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/call.mdx#2025-04-19_snippet_2\n\nLANGUAGE: dockerfile\nCODE:\n```\n# Use an official Python runtime as a parent image\nFROM python:3.11-slim\n\n# Set environment variables\nENV PYTHONDONTWRITEBYTECODE 1\nENV PYTHONUNBUFFERED 1\n\n# Set work directory\nWORKDIR /app\n\n# Install system dependencies\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n    build-essential \\\n    && rm -rf /var/lib/apt/lists/*\n\n# Install PraisonAI with the 'call' extra and ensure it's the latest version\nRUN pip install --no-cache-dir --upgrade \"praisonai[call]\"\n\n# Expose the port the app runs on\nEXPOSE 8090\n\n# Run the application\nCMD [\"praisonai\", \"call\"]\n```\n\n----------------------------------------\n\nTITLE: Initializing PraisonAI in Python\nDESCRIPTION: This snippet gets ready to initialize an instance of `PraisonAI`, importing necessary modules and setting up the environment. The `PraisonAI` library is presumably used for enhanced AI functionalities, but specific implementation after importing is not shown in this snippet.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/cookbooks/yaml/stock_analysis_agents.ipynb#2025-04-19_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"\nimport os\nfrom praisonai import PraisonAI\nfrom google.colab import userdata\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Installing and Pulling Ollama Model with Bash\nDESCRIPTION: Commands to install Ollama and pull the llama3.2 model. This sets up the local language model that will be used by the Python agent.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/mcp/ollama-python.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Install Ollama from https://ollama.ai/\n# Pull the llama3.2 model\nollama pull llama3.2\n```\n\n----------------------------------------\n\nTITLE: Setting OpenAI API Key for Memory Agent\nDESCRIPTION: Command to set the OpenAI API key as an environment variable for use with the memory-enabled agent.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/mcp/memory.mdx#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport OPENAI_API_KEY=your_openai_api_key_here\n```\n\n----------------------------------------\n\nTITLE: Cloning and Setting Up WhatsApp MCP Server in Bash\nDESCRIPTION: Commands to clone the WhatsApp MCP repository from GitHub and run the WhatsApp bridge using Go. This is the first step in setting up WhatsApp integration with PraisonAI agents.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/mcp/whatsapp.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/lharries/whatsapp-mcp.git\ncd whatsapp-mcp\ncd whatsapp-bridge\ngo run main.go\n```\n\n----------------------------------------\n\nTITLE: Setting Groq API Key Directly\nDESCRIPTION: Configures the direct Groq API key as an environment variable for authentication with Groq's services.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/models/groq.mdx#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport GROQ_API_KEY=xxxxxxxxxx\n```\n\n----------------------------------------\n\nTITLE: Installing Required Packages - Bash\nDESCRIPTION: This Bash command installs the necessary Python packages for the PraisonAI framework and DuckDuckGo search functionalities.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/tools.mdx#2025-04-19_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npip install praisonaiagents duckduckgo-search\n```\n\n----------------------------------------\n\nTITLE: Running the AI Agents Script in Bash\nDESCRIPTION: This command executes the Python script 'app.py' to start the emergency response AI agents and run the workflow. Ensure all configurations and dependencies are met before execution.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/examples/emergency-response.mdx#2025-04-19_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npython app.py\n```\n\n----------------------------------------\n\nTITLE: Setting XAI API Key in Bash Environment\nDESCRIPTION: A shell command to set the XAI API key as an environment variable in the terminal. This is required for authenticating with the XAI services to use the Grok model.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/mcp/xai.mdx#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport XAI_API_KEY=your_xai_api_key_here\n```\n\n----------------------------------------\n\nTITLE: Installing PraisonAI Agents Package\nDESCRIPTION: This Bash command installs the PraisonAI Agents package with knowledge support, necessary for creating knowledge-able AI agents.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/rag.mdx#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install \"praisonaiagents[knowledge]\"\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Markdown Validation\nDESCRIPTION: Sets up required Python packages and npm tools for markdown validation using pip and npm\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/cookbooks/yaml/markdown_validator_agents.ipynb#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n%pip install langchain_community > /dev/null\n%pip install praisonai[crewai] > /dev/null\n%pip install pymarkdown > /dev/null\n!npm install -g markdownlint-cli2\n```\n\n----------------------------------------\n\nTITLE: Setting OpenAI API Key\nDESCRIPTION: Command to set the OpenAI API key as an environment variable.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/agents/research.mdx#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport OPENAI_API_KEY=your_api_key_here\n```\n\n----------------------------------------\n\nTITLE: Running AutoAgents from Command Line\nDESCRIPTION: This Bash command allows users to execute the AutoAgents script by running the `app.py` file, which starts the agent process as defined in the script. This is the final step after the setup and configuration.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/autoagents.mdx#2025-04-19_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npython app.py\n```\n\n----------------------------------------\n\nTITLE: Rate Limits Update in OpenAI API\nDESCRIPTION: Example of a rate_limits.updated event in the OpenAI API event stream. This event is emitted after every response.done event to provide information about the current rate limits and remaining quota.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/praisonai/ui/realtimeclient/realtimedocs.txt#2025-04-19_snippet_34\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"event_id\": \"event_5758\",\n    \"type\": \"rate_limits.updated\",\n    \"rate_limits\": [\n        {\n            \"name\": \"requests\",\n            \"limit\": 1000,\n            \"remaining\": 999,\n            \"reset_seconds\": 60\n        },\n        {\n            \"name\": \"tokens\",\n            \"limit\": 50000,\n            \"remaining\": 49950,\n            \"reset_seconds\": 60\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Python Virtual Environment on Windows\nDESCRIPTION: Steps to create and activate a virtual environment for Python development on Windows systems. Ensures isolated project dependencies.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/installation.mdx#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npython -m venv praisonai-env\n.\\praisonai-env\\Scripts\\activate\n```\n\n----------------------------------------\n\nTITLE: Setting OpenAI API Key\nDESCRIPTION: This command sets the OpenAI API key in your environment variables, which is required for using the OpenAI LLM features in PraisonAI Chat.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/ui/chat.mdx#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport OPENAI_API_KEY=xxxxxxxx\n```\n\n----------------------------------------\n\nTITLE: Importing Reddit Search Tool\nDESCRIPTION: Import of RedditSearchRun tool from langchain_community.tools package for Reddit data searching functionality.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/cookbooks/yaml/reddit_search_analysis_agents.ipynb#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom langchain_community.tools import RedditSearchRun\n```\n\n----------------------------------------\n\nTITLE: Speech Detection Event in JSON\nDESCRIPTION: Example of an event object returned when speech is detected in server turn detection mode. It includes the event ID, event type, timing information, and the ID of the user message item that will be created.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/praisonai/ui/realtimeclient/realtimedocs.txt#2025-04-19_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"event_id\": \"event_1516\",\n    \"type\": \"input_audio_buffer.speech_started\",\n    \"audio_start_ms\": 1000,\n    \"item_id\": \"msg_003\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing PraisonAI Agents with Knowledge\nDESCRIPTION: Installs the PraisonAI package with knowledge support using pip. This command is necessary to utilize PraisonAI’s functionalities.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/concepts/knowledge.mdx#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install \"praisonaiagents[knowledge]\"\n```\n\n----------------------------------------\n\nTITLE: Setting Ignore Files with .env File\nDESCRIPTION: This command sets the `PRAISONAI_IGNORE_FILES` environment variable in a .env file, specifying a comma-separated list of files and directories to ignore. This is another way to configure file exclusion. The values are glob patterns.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/ui/code.mdx#2025-04-19_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n\"PRAISONAI_IGNORE_FILES=\\\".*,*.pyc,__pycache__,.git,.gitignore,.vscode\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Setting Mistral API Key in the Terminal\nDESCRIPTION: Sets the Mistral API key as an environment variable in the terminal for secure access in applications.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/mcp/mistral.mdx#2025-04-19_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nexport MISTRAL_API_KEY=your_mistral_api_key_here\n```\n\n----------------------------------------\n\nTITLE: Setting API Keys - Bash\nDESCRIPTION: This snippet sets the OpenAI and E2B API keys as environment variables for use in the application.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/codeagent.mdx#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport OPENAI_API_KEY=your_api_key_here\nexport E2B_API_KEY=your_e2b_api_key_here\n```\n\n----------------------------------------\n\nTITLE: Defining Agent Goal (Text) - Weak Example\nDESCRIPTION: This text snippet shows a weak example of defining an agent's goal. It is too vague and lacks a specific objective, which may lead to unfocused efforts. The instruction is simply to \"Help with finance stuff.\"\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/course/agents/04-agent-instructions.mdx#2025-04-19_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nHelp with finance stuff.\n```\n\n----------------------------------------\n\nTITLE: Running Praison AI Call Container\nDESCRIPTION: Command to run the Docker container with port mapping and OpenAI API key configuration. Maps port 8090 and requires OpenAI API key as an environment variable.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docker/call/README.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d -p 8090:8090 praisonai-call -e OPENAI_API_KEY=your_api_key_here\n```\n\n----------------------------------------\n\nTITLE: Installing Required Packages with Bash\nDESCRIPTION: This code snippet installs the necessary packages for integrating YouTube search functionalities within PraisonAI using pip. Dependencies include youtube_search, praisonai, and langchain libraries.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/youtube.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install youtube_search praisonai langchain_community langchain\n```\n\n----------------------------------------\n\nTITLE: Installing PraisonAI Package with pip\nDESCRIPTION: This command installs the PraisonAI package using pip, which is necessary for using the PraisonAI framework. This command also includes \"duckduckgo_search\" in the multi-agent example, to enable the researcher to use duckduckgo search tool\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/selfreflection.mdx#2025-04-19_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npip install praisonai\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with pip\nDESCRIPTION: Sets up required Python packages langchain_community and praisonai with crewai extras using pip install commands.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/cookbooks/yaml/research_report_generation_agents.ipynb#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n%pip install langchain_community > /dev/null\n%pip install praisonai[crewai] > /dev/null\n```\n\n----------------------------------------\n\nTITLE: OpenAI Chat Completion Example - Python\nDESCRIPTION: Basic example demonstrating how to use OpenAI's chat completion API with GPT-3.5-turbo model. Creates a simple chat interaction with 'Hello World' prompt.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/playground.mdx#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport openai\n\nclient = openai.OpenAI()\nresult = client.chat.completions.create(\n    model=\"gpt-3.5-turbo\",\n    messages=[\n        {\"role\": \"user\", \"content\": \"Hello World\"}\n    ]\n)\n\nprint(result.choices[0].message.content)\n```\n\n----------------------------------------\n\nTITLE: Installing PraisonAI Agents Package\nDESCRIPTION: Instructs on using bash to install the PraisonAI Agents Python package, which is integral for running the AI agents for climate impact analysis.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/examples/climate-impact.mdx#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install praisonaiagents\n```\n\n----------------------------------------\n\nTITLE: Installing PraisonAI Agents Package\nDESCRIPTION: Installation command for the PraisonAI Agents package using pip\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/examples/fraud-detection.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install praisonaiagents\n```\n\n----------------------------------------\n\nTITLE: Creating a Single Agent - Python\nDESCRIPTION: This Python snippet demonstrates how to create a single agent that summarizes a given task using the PraisonAI framework. It illustrates the necessary imports and agent initialization.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/introduction.mdx#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent, PraisonAIAgents\n\n# Create a simple agent\nsummarise_agent = Agent(instructions=\"Summarise Photosynthesis\")\n\n# Run the agent\nagents = PraisonAIAgents(agents=[summarise_agent])\nagents.start()\n```\n\n----------------------------------------\n\nTITLE: Installing PraisonAI and DuckDuckGo Search (No Code Version)\nDESCRIPTION: This snippet demonstrates how to install the `praisonai` and `duckduckgo_search` packages using pip for the 'No Code' approach.  These packages are required to use the PraisonAI framework and the DuckDuckGo search tool.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/concepts/tools.mdx#2025-04-19_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npip install praisonai duckduckgo_search\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment for PraisonAI\nDESCRIPTION: This bash command sets the `OPENAI_API_KEY` environment variable, which is required for accessing OpenAI API services. An API key must be obtained from OpenAI's platform.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/course/agents/12-adding-tools-to-agents.mdx#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport OPENAI_API_KEY=your_openai_key\n```\n\n----------------------------------------\n\nTITLE: Installing PraisonAI Agents Package\nDESCRIPTION: Command to install the required Python package for using Wikipedia Agent functionality.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/agents/wikipedia.mdx#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install praisonaiagents\n```\n\n----------------------------------------\n\nTITLE: Installing Langchain and Setting RIZA API Key\nDESCRIPTION: This snippet provides the installation command for langchain-community and rizaio packages, required for using the Jina Code Interpreter tool with PraisonAI agents. It also includes the export command to set the RIZA API key, which is necessary for authenticating API requests.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/external/jina-code-interpreter.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install langchain-community rizaio\nexport RIZA_API_KEY=your_api_key_here\n```\n\n----------------------------------------\n\nTITLE: Running Manual Tests for PraisonAI Development\nDESCRIPTION: Commands for running manual test scripts during PraisonAI development, including setting the OpenAI API key and executing various test scenarios.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/src/praisonai-ts/README.md#2025-04-19_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nexport OPENAI_API_KEY='your-api-key'\nnpx ts-node tests/development/simple/single-agent.ts\nnpx ts-node tests/development/simple/multi-agent.ts\nnpx ts-node tests/development/simple/multi-agents-simple.js\n```\n\n----------------------------------------\n\nTITLE: Setting OpenAI API Key\nDESCRIPTION: Command to set the OpenAI API key as an environment variable.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/agents/image-to-text.mdx#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport OPENAI_API_KEY=your_api_key_here\n```\n\n----------------------------------------\n\nTITLE: Writing Comprehensive Documentation with Docstrings\nDESCRIPTION: Illustrates proper documentation practices using detailed docstrings with type hints, parameter descriptions, and return value information. Well-documented code is easier for others to use and maintain.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/tools.mdx#2025-04-19_snippet_13\n\nLANGUAGE: python\nCODE:\n```\ndef analyze_text(\n    text: str,\n    language: str = \"en\"\n) -> Dict[str, float]:\n    \"\"\"\n    Analyze text sentiment and emotions.\n    \n    Args:\n        text: Input text to analyze\n        language: ISO language code\n        \n    Returns:\n        Dict with sentiment scores\n    \"\"\"\n    pass\n```\n\n----------------------------------------\n\nTITLE: Defining a JSON Processing Task\nDESCRIPTION: Create a task for the JSON processing agent with specific goals and expectations\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/json_tools.mdx#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\njson_task = Task(\n    description=\"Parse and validate API response data.\",\n    expected_output=\"Validated and processed JSON data.\",\n    agent=json_agent,\n    name=\"json_processing\"\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Logging Level in Bash\nDESCRIPTION: Sets the logging level environment variable. This can be adjusted based on the desired verbosity of the application's logs.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/developers/local-development.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport LOGLEVEL=info\n```\n\n----------------------------------------\n\nTITLE: Running Docker Compose\nDESCRIPTION: This command starts up the Docker environment defined in the docker-compose.yml file, enabling your local development environment with live reload.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/ui/chat.mdx#2025-04-19_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose up\n```\n\n----------------------------------------\n\nTITLE: Installing Required Dependencies for PostgreSQL MCP Integration\nDESCRIPTION: Command to install the necessary Python packages for using PraisonAI agents with MCP.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/mcp/postgres.mdx#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install praisonaiagents mcp\n```\n\n----------------------------------------\n\nTITLE: Conversation Created Event\nDESCRIPTION: This JSON snippet is emitted after a session is created to signal that a conversation has been created.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/praisonai/ui/realtimeclient/realtimedocs.txt#2025-04-19_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"event_id\": \"event_9101\",\n    \"type\": \"conversation.created\",\n    \"conversation\": {\n        \"id\": \"conv_001\",\n        \"object\": \"realtime.conversation\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Empty Tools Declaration\nDESCRIPTION: Placeholder indicating no tools are used in this workflow.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/cookbooks/yaml/screenplay_writer_agents.ipynb#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# This workflow does not utilize any tool\n```\n\n----------------------------------------\n\nTITLE: Installing PraisonAI Agents and Setting API Key\nDESCRIPTION: Instructions for installing the PraisonAI agents package and configuring the OpenAI API key as an environment variable.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/external/duckduckgo-search.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install praisonaiagents\nexport OPENAI_API_KEY=your_api_key_here\n```\n\n----------------------------------------\n\nTITLE: Short-Term Memory Graph (Mermaid)\nDESCRIPTION: This Mermaid diagram visualizes the flow of short-term memory, also known as conversation memory. It shows how user inputs and agent responses are linked sequentially within a session, enabling the agent to refer back to earlier messages in the same conversation.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/course/agents/06-agent-memory.mdx#2025-04-19_snippet_2\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph LR\n    A[User Input 1] --> B[Agent Response 1]\n    B --> C[User Input 2]\n    C --> D[Agent Response 2]\n    D --> E[User Input 3]\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Sequential Thinking MCP Integration\nDESCRIPTION: Command to install the required Python packages for using PraisonAI agents with MCP integration.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/mcp/sequential-thinking.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install praisonaiagents mcp\n```\n\n----------------------------------------\n\nTITLE: Installing PraisonAI and DuckDuckGo Search in Terminal\nDESCRIPTION: The bash command installs necessary packages, `praisonai` and `duckduckgo_search`, to support agent operations and internet search functionalities. This installation is crucial to run the tools within the agent system.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/course/agents/12-adding-tools-to-agents.mdx#2025-04-19_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npip install praisonai duckduckgo_search\n```\n\n----------------------------------------\n\nTITLE: Setting OpenAI Environment Variables\nDESCRIPTION: Configures environment variables for OpenAI API authentication and model selection. Required for configuring the application's AI model settings during deployment.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/deploy.mdx#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport OPENAI_MODEL_NAME=\"gpt-4o\"\nexport OPENAI_API_KEY=\"Enter your API key\"\nexport OPENAI_API_BASE=\"https://api.openai.com/v1\"\n```\n\n----------------------------------------\n\nTITLE: Installing Required Dependencies\nDESCRIPTION: Installation command for required Python packages langchain-community and google-search-results.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/external/google-trends.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install langchain-community google-search-results\n```\n\n----------------------------------------\n\nTITLE: Running Docker Compose for Live Reload\nDESCRIPTION: Executes Docker Compose to start the services defined in docker-compose.yml. This command sets up the environment to support live reloading of development changes.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/developers/local-development.mdx#2025-04-19_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose up\n```\n\n----------------------------------------\n\nTITLE: Setting API Keys for Brave Search and OpenAI\nDESCRIPTION: Commands to set the required API keys as environment variables in the terminal. These include the Brave Search API key for web search functionality and the OpenAI API key for the language model.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/mcp/bravesearch.mdx#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport BRAVE_API_KEY=your_brave_api_key_here\nexport OPENAI_API_KEY=your_openai_api_key_here\n```\n\n----------------------------------------\n\nTITLE: Example Document Processing Task\nDESCRIPTION: Python code example showing how to process a document image using a single task configuration.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/agents/image-to-text.mdx#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# Example: Processing a document image\ndocument_task = Task(\n    name=\"process_document\",\n    description=\"Extract text and analyze document layout\",\n    expected_output=\"Extracted text with layout information\",\n    agent=image_text_agent,\n    images=[\"business_document.jpg\"]\n)\n\n# Run single task\nagents = PraisonAIAgents(\n    agents=[image_text_agent],\n    tasks=[document_task],\n    process=\"sequential\"\n)\nagents.start()\n```\n\n----------------------------------------\n\nTITLE: Setting OpenAI API Key\nDESCRIPTION: Command to set the OpenAI API key as an environment variable.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/agents/websearch.mdx#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport OPENAI_API_KEY=your_api_key_here\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables\nDESCRIPTION: Commands to set up the required API keys for Everart and OpenAI as environment variables.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/mcp/everart.mdx#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport EVERART_API_KEY=your_everart_api_key_here\nexport OPENAI_API_KEY=your_openai_api_key_here\n```\n\n----------------------------------------\n\nTITLE: Agentic Routing Workflow Diagram in Mermaid\nDESCRIPTION: Mermaid diagram illustrating how AI agents can dynamically route tasks to specialized LLM instances.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/README.md#2025-04-19_snippet_14\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n    In[In] --> Router[LLM Call Router]\n    Router --> LLM1[LLM Call 1]\n    Router --> LLM2[LLM Call 2]\n    Router --> LLM3[LLM Call 3]\n    LLM1 --> Out[Out]\n    LLM2 --> Out\n    LLM3 --> Out\n    \n    style In fill:#8B0000,color:#fff\n    style Router fill:#2E8B57,color:#fff\n    style LLM1 fill:#2E8B57,color:#fff\n    style LLM2 fill:#2E8B57,color:#fff\n    style LLM3 fill:#2E8B57,color:#fff\n    style Out fill:#8B0000,color:#fff\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for API Authentication\nDESCRIPTION: Terminal commands to set up environment variables for GitLab authentication token, API URL, and OpenAI API key required by the agent.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/mcp/gitlab.mdx#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport GITLAB_PERSONAL_ACCESS_TOKEN=your_gitlab_token_here\nexport GITLAB_API_URL=https://gitlab.com/api/v4\nexport OPENAI_API_KEY=your_openai_api_key_here\n```\n\n----------------------------------------\n\nTITLE: Installing Composio PraisonAI Package\nDESCRIPTION: Command to install the Composio PraisonAI integration package using pip package manager.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/composio.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install composio-praisonai\n```\n\n----------------------------------------\n\nTITLE: Setting OpenAI API Key Environment Variable\nDESCRIPTION: Command to set OpenAI API key as an environment variable for authentication\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/examples/fraud-detection.mdx#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport OPENAI_API_KEY=your_api_key_here\n```\n\n----------------------------------------\n\nTITLE: Unit Conversion Example\nDESCRIPTION: Demonstrates basic unit conversion functionality.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/calculator_tools.mdx#2025-04-19_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nresult = convert_units(100, \"meters\", \"kilometers\")\n```\n\n----------------------------------------\n\nTITLE: Sequential Process Flow in Mermaid\nDESCRIPTION: This snippet illustrates a sequential process flow using Mermaid syntax, showing a linear progression where each step follows the previous one. It is best suited for tasks with clear linear stages.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/course/agents/08-agent-process.mdx#2025-04-19_snippet_2\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph LR\n    A[Agent 1] --> B[Agent 2]\n    B --> C[Agent 3]\n    C --> D[Complete]\n```\n\n----------------------------------------\n\nTITLE: Implementing Async Task Execution in Python\nDESCRIPTION: Demonstrates how to create and configure an asynchronous task with a callback function using the Task class. Shows type hints and async callback definition.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/api/praisonaiagents/task/task.mdx#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Coroutine\nfrom praisonaiagents import Task, TaskOutput\n\n# Define an async callback\nasync def async_callback(output: TaskOutput):\n    await some_async_operation()\n    print(f\"Processed: {output.raw}\")\n\n# Create task with async execution\ntask = Task(\n    description=\"Async task example\",\n    expected_output=\"Async result\",\n    async_execution=True,  # Enable async execution\n    callback=async_callback  # Async callback\n)\n```\n\n----------------------------------------\n\nTITLE: Importing YouTube Search Tool\nDESCRIPTION: Import the YouTube search tool from langchain community tools package.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/langchain.mdx#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom langchain_community.tools import YouTubeSearchTool\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for PraisonAI Instagram Agents\nDESCRIPTION: Installs required Python packages including praisonai, crewai, duckduckgo_search and python-dotenv using pip without displaying output.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/cookbooks/yaml/instagram_post_agents.ipynb#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n%pip install praisonai > /dev/null\n%pip install praisonai[crewai] > /dev/null\n%pip install duckduckgo_search > /dev/null\n%pip install python-dotenv > /dev/null\n```\n\n----------------------------------------\n\nTITLE: Creating Flow Diagram for Image Analysis Process using Mermaid\nDESCRIPTION: A flowchart showing the image analysis workflow from input to output, including analysis, detection, and description generation steps.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/agents/image.mdx#2025-04-19_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n    In[Image Input] --> Analyzer[Image Analyzer]\n    Analyzer --> Detector[Object Detector]\n    Detector --> Generator[Description Generator]\n    Generator --> Out[Analysis Output]\n    \n    style In fill:#8B0000,color:#fff\n    style Analyzer fill:#2E8B57,color:#fff\n    style Detector fill:#2E8B57,color:#fff\n    style Generator fill:#2E8B57,color:#fff\n    style Out fill:#8B0000,color:#fff\n```\n\n----------------------------------------\n\nTITLE: Mermaid Workflow Visualization for Synthetic Data Generation\nDESCRIPTION: Flowchart depicting the step-by-step process of generating chain-of-thought reasoning data using AI agents\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/generate-reasoning.mdx#2025-04-19_snippet_3\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\n    Start[Start] --> Generator[Question Answer Generator Agent]\n    Generator --> Evaluator[Evaluator Agent]\n    Evaluator --> COT[Reasoning Steps / COT Generator Agent]\n    COT --> COT\n    COT --> Upload[HuggingFace Uploader Agent]\n    Upload --> End[End]\n    \n    style Start fill:#8B0000,color:#fff\n    style Generator fill:#2E8B57,color:#fff\n    style Evaluator fill:#2E8B57,color:#fff\n    style COT fill:#2E8B57,color:#fff\n    style Upload fill:#2E8B57,color:#fff\n    style End fill:#8B0000,color:#fff\n```\n\n----------------------------------------\n\nTITLE: Installing PraisonAI Agents Package via Bash\nDESCRIPTION: A bash command to install the PraisonAI Agents Python package, which is required for creating AI agents and executing dynamic routing workflows as described in subsequent code snippets.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/routing.mdx#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install praisonaiagents\n```\n\n----------------------------------------\n\nTITLE: Importing Deploy Module\nDESCRIPTION: Import for deployment utilities\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/api.mdx#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonai.deploy import CloudDeployer\n```\n\n----------------------------------------\n\nTITLE: Example settings.yaml File\nDESCRIPTION: This is an example of a `settings.yaml` file, which configures ignore files for PraisonAI Code.  The `ignore_files` list contains glob patterns that match files and directories to exclude from analysis.  Ensure proper YAML syntax is used.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/ui/code.mdx#2025-04-19_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n\"code:\\n  ignore_files:\\n  - \\\".*\\\"\\n  - \\\"*.pyc\\\"\\n  - \\\"pycache\\\"\\n  - \\\".git\\\"\\n  - \\\".gitignore\\\"\\n  - \\\".vscode\\\"\\n  - \\\".idea\\\"\\n  - \\\".DS_Store\\\"\\n  - \\\".lock\\\"\\n  - \\\".pyc\\\"\\n  - \\\".env\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Development Setup for PraisonAI\nDESCRIPTION: Steps to set up a development environment for working on the PraisonAI framework itself, including cloning the repository, installing dependencies, and building the package.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/src/praisonai-ts/README.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/MervinPraison/PraisonAI.git\ncd src/praisonai-ts\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Running Docker Compose for Local Development\nDESCRIPTION: This command starts the Docker Compose services defined in `docker-compose.yml`.  This will build and run the development environment with live reload capabilities. Ensure Docker and Docker Compose are installed.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/ui/code.mdx#2025-04-19_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n\"docker-compose up\"\n```\n\n----------------------------------------\n\nTITLE: Package Installation for PraisonAI Agents\nDESCRIPTION: Command to install the PraisonAI Agents package using pip, which is the first step in setting up the cryptographic validation environment\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/examples/crypto-validator.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install praisonaiagents\n```\n\n----------------------------------------\n\nTITLE: Creating a Memory-Enabled AI Agent in Python\nDESCRIPTION: Python code for creating an AI agent with memory storage capabilities using PraisonAI agents and MCP. The code configures a memory file path, initializes an agent with specific instructions, and connects it to the MCP memory server.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/mcp/memory.mdx#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent, MCP\nimport os\n\n# Get the memory file path from environment\nmemory_file_path = os.getenv(\"MEMORY_FILE_PATH\", \"/path/to/custom/memory.json\")\n\n# Use a single string command with Memory configuration\nmemory_agent = Agent(\n    instructions=\"\"\"You are a helpful assistant that can store and retrieve information.\n    Use the available tools when relevant to manage memory operations.\"\"\",\n    llm=\"gpt-4o-mini\",\n    tools=MCP(\"npx -y @modelcontextprotocol/server-memory\",\n            env={\"MEMORY_FILE_PATH\": memory_file_path})\n)\n\nmemory_agent.start(\"Store this conversation in memory\")\n```\n\n----------------------------------------\n\nTITLE: Setting Groq API Key in Bash Environment\nDESCRIPTION: Sets the Groq API key as an environment variable in the terminal for authentication with Groq's services.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/mcp/groq.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport GROQ_API_KEY=your_groq_api_key_here\n```\n\n----------------------------------------\n\nTITLE: Set OpenAI API Key\nDESCRIPTION: This command sets the OpenAI API key as an environment variable. Replace `your_api_key_here` with your actual OpenAI API key to authenticate API requests.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/callbacks.mdx#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n\"export OPENAI_API_KEY=your_api_key_here\"\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Calculator Agent\nDESCRIPTION: Installs required Python packages including praisonaiagents, sympy, and pint.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/calculator_tools.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install praisonaiagents sympy pint\n```\n\n----------------------------------------\n\nTITLE: Building Docker Image for Praison AI Call\nDESCRIPTION: Command to build the Docker image tagged as praisonai-call\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docker/call/README.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker build -t praisonai-call .\n```\n\n----------------------------------------\n\nTITLE: Running Python AI Agent Application\nDESCRIPTION: Command to execute the Python script containing AI agent code.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/README.md#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npython app.py\n```\n\n----------------------------------------\n\nTITLE: Advanced News Analysis Setup\nDESCRIPTION: Configure multiple agents for news collection and analysis.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/newspaper_tools.mdx#2025-04-19_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# Create news collection agent\ncollector_agent = Agent(\n    name=\"Collector\",\n    role=\"News Collector\",\n    goal=\"Gather comprehensive news coverage.\",\n    tools=[get_article, get_news_sources, get_articles_from_source, get_trending_topics],\n    self_reflect=False\n)\n\n# Create analysis agent\nanalysis_agent = Agent(\n    name=\"Analyzer\",\n    role=\"Content Analyst\",\n    goal=\"Analyze news content and identify trends.\",\n    backstory=\"Expert in news analysis and trend identification.\",\n    self_reflect=False\n)\n```\n\n----------------------------------------\n\nTITLE: Creating News Agent\nDESCRIPTION: Initialize a news agent with specified role and tools for news analysis.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/newspaper_tools.mdx#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nnews_agent = Agent(\n    name=\"NewsAgent\",\n    role=\"News Analyst\",\n    goal=\"Collect and analyze news articles from various sources.\",\n    backstory=\"Expert in news gathering and content analysis.\",\n    tools=[get_article, get_news_sources, get_articles_from_source, get_trending_topics],\n    self_reflect=False\n)\n```\n\n----------------------------------------\n\nTITLE: Displaying Ollama Public Key (Linux)\nDESCRIPTION: This bash command retrieves the public key used by Ollama on a Linux system. This key is needed to link your Ollama account for model deployment.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/train.mdx#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo cat /usr/share/ollama/.ollama/id_ed25519.pub\n```\n\n----------------------------------------\n\nTITLE: Installing Required Python Dependencies\nDESCRIPTION: Sets up necessary Python packages including praisonai, crewai, duckduckgo_search, and python-dotenv using pip install commands.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/cookbooks/yaml/job_posting_agents.ipynb#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n%pip install praisonai > /dev/null\n%pip install praisonai[crewai] > /dev/null\n%pip install duckduckgo_search > /dev/null\n%pip install python-dotenv > /dev/null\n```\n\n----------------------------------------\n\nTITLE: Visualizing Data Analysis Workflow with Mermaid\nDESCRIPTION: A flowchart showing the data analysis pipeline from data source through reading, analysis, and insights generation to output.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/agents/data-analyst.mdx#2025-04-19_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n    In[Data Source] --> Reader[Data Reader]\n    Reader --> Analyzer[Data Analyzer]\n    Analyzer --> Generator[Insights Generator]\n    Generator --> Out[Output]\n    \n    style In fill:#8B0000,color:#fff\n    style Reader fill:#2E8B57,color:#fff\n    style Analyzer fill:#2E8B57,color:#fff\n    style Generator fill:#2E8B57,color:#fff\n    style Out fill:#8B0000,color:#fff\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for PraisonAI and DuckDuckGo Search\nDESCRIPTION: Installs required Python packages silently using pip install commands in a Jupyter/Colab environment.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/cookbooks/yaml/marketing_campaign_development_agents.ipynb#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n%pip install praisonai[crewai] > /dev/null\n%pip install duckduckgo_search > /dev/null\n```\n\n----------------------------------------\n\nTITLE: Install PraisonAI package\nDESCRIPTION: Installs the PraisonAI package using pip. This is a necessary first step to use the PraisonAI CLI.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/cli.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"pip install praisonai\"\n```\n\n----------------------------------------\n\nTITLE: Ollama Integration Configuration\nDESCRIPTION: Configure Ollama local model server base URL for API requests\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/README.md#2025-04-19_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nexport OPENAI_BASE_URL=http://localhost:11434/v1\n```\n\n----------------------------------------\n\nTITLE: Setting OpenRouter API Key in Bash\nDESCRIPTION: Sets the OpenRouter API key as an environment variable in the terminal for authentication with OpenRouter services.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/mcp/openrouter.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport OPENROUTER_API_KEY=your_openrouter_api_key_here\n```\n\n----------------------------------------\n\nTITLE: Precision Control Example\nDESCRIPTION: Shows how to control calculation precision in mathematical operations.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/calculator_tools.mdx#2025-04-19_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nevaluate(\n    \"pi\",\n    precision=5\n)\n```\n\n----------------------------------------\n\nTITLE: Installing CrewAI with PraisonAI in Bash\nDESCRIPTION: This snippet installs PraisonAI with CrewAI framework support via pip. Dependencies include PraisonAI tools, task delegation capabilities, and support for both sequential and parallel task execution.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/framework/crewai.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Install with CrewAI support\npip install \"praisonai[crewai]\"\n```\n\n----------------------------------------\n\nTITLE: Installing PraisonAI Agents Package\nDESCRIPTION: Command to install the PraisonAI Agents package using pip. This is a prerequisite for using the Markdown Agent.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/agents/markdown.mdx#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install praisonaiagents\n```\n\n----------------------------------------\n\nTITLE: Using Internet Search Tool in PraisonAI - Python\nDESCRIPTION: This snippet demonstrates how to import and use the internet search function. It showcases a query for the latest in AI news.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/src/praisonai-agents/praisonaiagents/tools/README.md#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents.tools import internet_search\n\nresults = internet_search(\"AI news\")\n```\n\n----------------------------------------\n\nTITLE: Tools Configuration (Empty) for Game Development Agents\nDESCRIPTION: A placeholder comment indicating that no specific tools are required for this task, but mentioning that additional sophisticated functionalities could be added using tools.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/cookbooks/yaml/game_development_agents.ipynb#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n#No Tools are required for this specific task, Alternatively it may be given addition sophosticated functionalities using tools\n```\n\n----------------------------------------\n\nTITLE: Basic arXiv Search Implementation\nDESCRIPTION: Examples of basic and advanced paper search functionality\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/arxiv_tools.mdx#2025-04-19_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# Basic search\npapers = search_arxiv(\"quantum computing\")\n\n# Advanced search\npapers = search_arxiv(\n    query=\"quantum computing\",\n    max_results=5,\n    sort_by=\"submittedDate\",\n    sort_order=\"descending\",\n    include_fields=[\"title\", \"authors\", \"summary\"]\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Agent Response Format (Text) - Weak Example\nDESCRIPTION: This text snippet presents a weak example of defining the agent's response format. The instruction is too basic and lacks specific requirements, resulting in unstructured or incomplete information. Simply asking to \"Tell me what you find\" provides no direction.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/course/agents/04-agent-instructions.mdx#2025-04-19_snippet_7\n\nLANGUAGE: text\nCODE:\n```\nTell me what you find.\n```\n\n----------------------------------------\n\nTITLE: Visualizing Repetitive Agents using Mermaid\nDESCRIPTION: Mermaid diagram showing a looping agent pattern for handling repetitive tasks. This pattern enables efficient execution of recurring tasks through automated loops.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/index.mdx#2025-04-19_snippet_15\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n    In[Input] --> LoopAgent[(\"Looping Agent\")]\n    LoopAgent --> Task[Task]\n    Task --> |Next iteration| LoopAgent\n    Task --> |Done| Out[Output]\n    \n    style In fill:#8B0000,color:#fff\n    style LoopAgent fill:#2E8B57,color:#fff,shape:circle\n    style Task fill:#2E8B57,color:#fff\n    style Out fill:#8B0000,color:#fff\n```\n\n----------------------------------------\n\nTITLE: Executing the Agent Script\nDESCRIPTION: Executes the Python script containing the agent definitions and tasks. This command starts the agent execution process.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/quickstart.mdx#2025-04-19_snippet_13\n\nLANGUAGE: Terminal\nCODE:\n```\npython app.py\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variable for API Key\nDESCRIPTION: Sets the OpenAI API key as an environment variable, which is required for using the OpenAI services with the agents. Replace 'xxxxxxxxxxxxxxxxxxxxxx' with your actual API key.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/multimodal.mdx#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport OPENAI_API_KEY=xxxxxxxxxxxxxxxxxxxxxx\n```\n\n----------------------------------------\n\nTITLE: Importing DuckDB Components\nDESCRIPTION: Import necessary components from praisonaiagents package including Agent, Task, and database tools.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/duckdb_tools.mdx#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent, Task, PraisonAIAgents\nfrom praisonaiagents.tools import execute_query, load_csv, export_csv\n```\n\n----------------------------------------\n\nTITLE: Response Output Item Completed Event in JSON\nDESCRIPTION: Example of an event object returned when an Item is done streaming. It includes the event ID, event type, response ID, output index, and details about the completed item.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/praisonai/ui/realtimeclient/realtimedocs.txt#2025-04-19_snippet_23\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"event_id\": \"event_3536\",\n    \"type\": \"response.output_item.done\",\n    \"response_id\": \"resp_001\",\n    \"output_index\": 0,\n    \"item\": {\n        \"id\": \"msg_007\",\n        \"object\": \"realtime.item\",\n        \"type\": \"message\",\n        \"status\": \"completed\",\n        \"role\": \"assistant\",\n        \"content\": [\n            {\n                \"type\": \"text\",\n                \"text\": \"Sure, I can help with that.\"\n            }\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Langchain Community Package\nDESCRIPTION: Installation command for the required langchain-community package using pip.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/external/jina-search.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install langchain-community\n```\n\n----------------------------------------\n\nTITLE: Setting Up the API Key Environment Variable\nDESCRIPTION: This snippet outlines the command to set the OpenAI API key as an environment variable, which is required for authenticating API calls in the code analysis agent.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/examples/code-analysis.mdx#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport OPENAI_API_KEY=your_api_key_here\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Configuration for AI Article Writing and Translation in Python\nDESCRIPTION: This snippet contains a YAML configuration string that defines the roles, tasks, and tools for writing an AI article and translating it into French and German using the CrewAI framework.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/cookbooks/yaml/language_translator_agents.ipynb#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nagent_yaml = \"\"\"\nframework: \"crewai\"\ntopic: \"Writing an article about AI\"\nroles:\n  article_writer:\n    role: \"Article Writer\"\n    backstory: \"Experienced writer with a deep understanding of artificial intelligence and technology trends.\"\n    goal: \"Write an informative and engaging article about AI.\"\n    tasks:\n      write_article:\n        description: \"Write a comprehensive article about the latest developments and implications of AI.\"\n        expected_output: \"A well-written article on AI in English.\"\n  french_translator:\n    role: \"Translator\"\n    backstory: \"Fluent in French with expertise in translating technical and non-technical content accurately.\"\n    goal: \"Translate the AI article into French.\"\n    tasks:\n      translate_to_french:\n        description: \"Translate the English article on AI into French.\"\n        expected_output: \"The AI article translated into French.\"\n    tools:\n      - \"TranslatorTool\"\n  german_translator:\n    role: \"Translator\"\n    backstory: \"Proficient in German with a strong background in technical translation.\"\n    goal: \"Translate the AI article into German.\"\n    tasks:\n      translate_to_german:\n        description: \"Translate the English article on AI into German.\"\n        expected_output: \"The AI article translated into German.\"\n    tools:\n      - \"TranslatorTool\"\ndependencies: []\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Installing Required Dependencies for Job Hunt Agents\nDESCRIPTION: Installs the necessary Python packages required for the job hunt agents to function, including langchain_community, praisonai with crewai extension, and requests library. Output is suppressed.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/cookbooks/yaml/job_hunt_agents.ipynb#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Install dependencies without output\n%pip install langchain_community > /dev/null\n%pip install praisonai[crewai] > /dev/null\n%pip install requests > /dev/null\n```\n\n----------------------------------------\n\nTITLE: Loading CSV Data into DuckDB\nDESCRIPTION: Examples of loading CSV files into DuckDB tables with schema definition and existence handling.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/duckdb_tools.mdx#2025-04-19_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# Basic usage - auto schema inference\nsuccess = load_csv(\"employees\", \"employees.csv\")\n\n# With custom schema\nschema = {\n    \"id\": \"INTEGER PRIMARY KEY\",\n    \"name\": \"VARCHAR\",\n    \"salary\": \"DECIMAL(10,2)\",\n    \"hire_date\": \"DATE\"\n}\nsuccess = load_csv(\n    \"employees\",\n    \"employees.csv\",\n    schema=schema,\n    if_exists='replace'\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker-Compose for Flask and Watch Services\nDESCRIPTION: Provides a docker-compose configuration to set up services for a Flask app and file watching using inotify-tools. Defines service configurations, such as volumes for code mounting, port bindings, and commands for both app and watch services.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/developers/local-development.mdx#2025-04-19_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3.8'\n\nservices:\n  app:\n    build:\n      context: .\n      dockerfile: Dockerfile.dev\n    volumes:\n      - .:/app\n    ports:\n      - \"5555:5555\"\n    environment:\n      FLASK_ENV: development\n    command: flask run --host=0.0.0.0\n\n  watch:\n    image: alpine:latest\n    volumes:\n      - .:/app\n    command: sh -c \"apk add --no-cache inotify-tools && while inotifywait -r -e modify,create,delete /app; do kill -HUP 1; done\"\n```\n\n----------------------------------------\n\nTITLE: Defining Agent Role (Text) - Weak Example\nDESCRIPTION: This text snippet demonstrates a weak example of defining an agent's role. It is too general and lacks specific details about the agent's expertise.  The agent is simply defined as a helper which is not descriptive enough.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/course/agents/04-agent-instructions.mdx#2025-04-19_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nYou are a helper.\n```\n\n----------------------------------------\n\nTITLE: Video Tutorials Table in Markdown\nDESCRIPTION: This snippet formats a table in Markdown highlighting various video tutorials available for PraisonAI. Each entry includes a topic and a thumbnail linked to a YouTube video for additional resources.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/index.mdx#2025-04-19_snippet_21\n\nLANGUAGE: markdown\nCODE:\n```\n| Topic | Video |\\n|-------|--------|\\n| AI Agents with Self Reflection | [![Self Reflection](https://img.youtube.com/vi/vLXobEN2Vc8/0.jpg)](https://www.youtube.com/watch?v=vLXobEN2Vc8) |\\n| Reasoning Data Generating Agent | [![Reasoning Data](https://img.youtube.com/vi/fUT332Y2zA8/0.jpg)](https://www.youtube.com/watch?v=fUT332Y2zA8) |\\n| AI Agents with Reasoning | [![Reasoning](https://img.youtube.com/vi/KNDVWGN3TpM/0.jpg)](https://www.youtube.com/watch?v=KNDVWGN3TpM) |\\n| Multimodal AI Agents | [![Multimodal](https://img.youtube.com/vi/hjAWmUT1qqY/0.jpg)](https://www.youtube.com/watch?v=hjAWmUT1qqY) |\\n| AI Agents Workflow | [![Workflow](https://img.youtube.com/vi/yWTH44QPl2A/0.jpg)](https://www.youtube.com/watch?v=yWTH44QPl2A) |\\n| Async AI Agents | [![Async](https://img.youtube.com/vi/VhVQfgo00LE/0.jpg)](https://www.youtube.com/watch?v=VhVQfgo00LE) |\\n| Mini AI Agents | [![Mini](https://img.youtube.com/vi/OkvYp5aAGSg/0.jpg)](https://www.youtube.com/watch?v=OkvYp5aAGSg) |\\n| AI Agents with Memory | [![Memory](https://img.youtube.com/vi/1hVfVxvPnnQ/0.jpg)](https://www.youtube.com/watch?v=1hVfVxvPnnQ) |\\n| Repetitive Agents | [![Repetitive](https://img.youtube.com/vi/dAYGxsjDOPg/0.jpg)](https://www.youtube.com/watch?v=dAYGxsjDOPg) |\\n| Introduction | [![Introduction](https://img.youtube.com/vi/Fn1lQjC0GO0/0.jpg)](https://www.youtube.com/watch?v=Fn1lQjC0GO0) |\\n| Tools Overview | [![Tools Overview](https://img.youtube.com/vi/XaQRgRpV7jo/0.jpg)](https://www.youtube.com/watch?v=XaQRgRpV7jo) |\\n| Custom Tools | [![Custom Tools](https://img.youtube.com/vi/JSU2Rndh06c/0.jpg)](https://www.youtube.com/watch?v=JSU2Rndh06c) |\\n| Firecrawl Integration | [![Firecrawl](https://img.youtube.com/vi/UoqUDcLcOYo/0.jpg)](https://www.youtube.com/watch?v=UoqUDcLcOYo) |\\n| User Interface | [![UI](https://img.youtube.com/vi/tg-ZjNl3OCg/0.jpg)](https://www.youtube.com/watch?v=tg-ZjNl3OCg) |\\n| Crawl4AI Integration | [![Crawl4AI](https://img.youtube.com/vi/KAvuVUh0XU8/0.jpg)](https://www.youtube.com/watch?v=KAvuVUh0XU8) |\\n| Chat Interface | [![Chat](https://img.youtube.com/vi/sw3uDqn2h1Y/0.jpg)](https://www.youtube.com/watch?v=sw3uDqn2h1Y) |\\n| Code Interface | [![Code](https://img.youtube.com/vi/_5jQayO-MQY/0.jpg)](https://www.youtube.com/watch?v=_5jQayO-MQY) |\\n| Mem0 Integration | [![Mem0](https://img.youtube.com/vi/KIGSgRxf1cY/0.jpg)](https://www.youtube.com/watch?v=KIGSgRxf1cY) |\\n| Training | [![Training](https://img.youtube.com/vi/aLawE8kwCrI/0.jpg)](https://www.youtube.com/watch?v=aLawE8kwCrI) |\\n| Realtime Voice Interface | [![Realtime](https://img.youtube.com/vi/frRHfevTCSw/0.jpg)](https://www.youtube.com/watch?v=frRHfevTCSw) |\\n| Call Interface | [![Call](https://img.youtube.com/vi/m1cwrUG2iAk/0.jpg)](https://www.youtube.com/watch?v=m1cwrUG2iAk) |\\n| Reasoning Extract Agents | [![Reasoning Extract](https://img.youtube.com/vi/2PPamsADjJA/0.jpg)](https://www.youtube.com/watch?v=2PPamsADjJA) |\n```\n\n----------------------------------------\n\nTITLE: Installing PraisonAI Agents Package with pip\nDESCRIPTION: Command to install the PraisonAI Agents package which is required for using the Planning Agent functionality.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/agents/planning.mdx#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install praisonaiagents\n```\n\n----------------------------------------\n\nTITLE: Importing AutoGenerator Module\nDESCRIPTION: Import for automated agent generation functionality\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/api.mdx#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonai.auto import AutoGenerator\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Research Report Agents\nDESCRIPTION: Installs required Python packages including langchain_community, praisonai, and requests using pip without displaying output.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/cookbooks/yaml/comprehensive_research_report_agents.ipynb#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n%pip install langchain_community > /dev/null\n%pip install praisonai[crewai] > /dev/null\n%pip install requests > /dev/null\n```\n\n----------------------------------------\n\nTITLE: Running PraisonAI Concept Examples with ts-node\nDESCRIPTION: Commands to run different example files (single-agent, multi-agent, and task-based-agent) using ts-node. These examples demonstrate the core concepts of the PraisonAI package.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/src/praisonai-ts/examples/concepts/README.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Run single agent example\nnpx ts-node examples/concepts/single-agent.ts\n\n# Run multi-agent example\nnpx ts-node examples/concepts/multi-agent.ts\n\n# Run task-based agent example\nnpx ts-node examples/concepts/task-based-agent.ts\n```\n\n----------------------------------------\n\nTITLE: Setting Process Type\nDESCRIPTION: This snippet illustrates how to set the processing type to sequential within the PraisonAIAgents environment. This setting determines whether tasks are executed one after another.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/wikipedia_tools.mdx#2025-04-19_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nprocess=\"sequential\"\n```\n\n----------------------------------------\n\nTITLE: Installing Required Packages using pip\nDESCRIPTION: Installs the PraisonAI Agents package along with OpenCV and MoviePy for media processing. Requires Python and pip to be installed on the system.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/multimodal.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install praisonaiagents opencv-python moviepy\n```\n\n----------------------------------------\n\nTITLE: Running the OpenRouter-Airbnb Agent Script\nDESCRIPTION: Executes the Python script that initializes and runs the AI agent with OpenRouter model and Airbnb MCP integration.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/mcp/openrouter.mdx#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npython openrouter_airbnb.py\n```\n\n----------------------------------------\n\nTITLE: Deleting Conversation Item\nDESCRIPTION: This JSON snippet demonstrates how to delete an item from the conversation history using its item ID and an optional client-generated ID.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/praisonai/ui/realtimeclient/realtimedocs.txt#2025-04-19_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"event_id\": \"event_901\",\n    \"type\": \"conversation.item.delete\",\n    \"item_id\": \"msg_003\"\n}\n```\n\n----------------------------------------\n\nTITLE: Running Streamlit Application\nDESCRIPTION: This command starts the Streamlit application using the `app.py` file, making the interactive chat interface accessible in a web browser. The application will be served at a local address, typically `http://localhost:8501`.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/ui/streamlit/deepseek-streamlit.mdx#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nstreamlit run app.py\n```\n\n----------------------------------------\n\nTITLE: Initializing PraisonAI Training\nDESCRIPTION: This bash command initializes the PraisonAI training process. It sets up the necessary configurations and prepares the environment for training a model.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/train.mdx#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npraisonai train init\n```\n\n----------------------------------------\n\nTITLE: Managing Agents\nDESCRIPTION: Example of how to manage multiple agents. The `Agents` class takes a list of agent objects and facilitates their coordination.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/mini.mdx#2025-04-19_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nAgents(agents=[agent1, agent2])\n```\n\n----------------------------------------\n\nTITLE: Executing Agents from YAML\nDESCRIPTION: Executes the PraisonAI agents defined in the `agents.yaml` file. This command triggers the execution of the agents based on the YAML configuration.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/quickstart.mdx#2025-04-19_snippet_17\n\nLANGUAGE: Terminal\nCODE:\n```\npraisonai agents.yaml\n```\n\n----------------------------------------\n\nTITLE: Response Content Part Completed Event in JSON\nDESCRIPTION: Example of an event object returned when a content part is done streaming in an assistant message item. It includes the event ID, event type, response and item IDs, indexes, and the completed content part.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/praisonai/ui/realtimeclient/realtimedocs.txt#2025-04-19_snippet_25\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"event_id\": \"event_3940\",\n    \"type\": \"response.content_part.done\",\n    \"response_id\": \"resp_001\",\n    \"item_id\": \"msg_007\",\n    \"output_index\": 0,\n    \"content_index\": 0,\n    \"part\": {\n        \"type\": \"text\",\n        \"text\": \"Sure, I can help with that.\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Memory Management Python\nDESCRIPTION: This snippet installs the required Python packages for memory management, including langchain_community, praisonai, duckduckgo_search, and mem0ai. It suppresses output to keep logs clean.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/cookbooks/yaml/memory_management_and_knowledge_retreival_agents.ipynb#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n%pip install langchain_community > /dev/null\n%pip install praisonai[crewai] > /dev/null\n%pip install duckduckgo_search > /dev/null\n%pip install mem0ai > /dev/null\n```\n\n----------------------------------------\n\nTITLE: Implementing Internet Search Tool in Python (No Code Version)\nDESCRIPTION: This snippet defines a function `internet_search_tool` that uses the DuckDuckGo search engine to perform internet searches based on a given query.  This is the same function as defined earlier but included for completeness in the 'No Code' section.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/concepts/tools.mdx#2025-04-19_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom duckduckgo_search import DDGS\nfrom typing import List, Dict\n\n# 1. Tool\ndef internet_search_tool(query: str) -> List[Dict]:\n    \"\"\"\n    Perform Internet Search\n    \"\"\"\n    results = []\n    ddgs = DDGS()\n    for result in ddgs.text(keywords=query, max_results=5):\n        results.append({\n            \"title\": result.get(\"title\", \"\"),\n            \"url\": result.get(\"href\", \"\"),\n            \"snippet\": result.get(\"body\", \"\")\n        })\n    return results  \n```\n\n----------------------------------------\n\nTITLE: Basic Expression Evaluation\nDESCRIPTION: Demonstrates simple mathematical expression evaluation.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/calculator_tools.mdx#2025-04-19_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nresult = evaluate(\"2 + 2 * 3\")\n```\n\n----------------------------------------\n\nTITLE: Listing Processes with List Processes Function\nDESCRIPTION: Shows how to use list_processes from praisonaiagents.tools to list running processes with details such as CPU and memory usage, providing insights into system performance.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/shell_tools.mdx#2025-04-19_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# Get list of running processes\nprocesses = list_processes()\n\n# Sort by CPU usage\ncpu_intensive = sorted(\n    processes,\n    key=lambda x: x['cpu_percent'],\n    reverse=True\n)[:5]\n\n# Returns: List[Dict[str, Union[int, str, float]]]\n# Example output:\n# [\n#     {\n#         'pid': 1234,\n#         'name': 'python',\n#         'username': 'user',\n#         'memory_percent': 2.5,\n#         'cpu_percent': 15.3\n#     },\n#     ...\n# ]\n```\n\n----------------------------------------\n\nTITLE: Creating Config File for Single Agent - YAML\nDESCRIPTION: This YAML snippet describes how to create a configuration file for a single agent in PraisonAI. It includes role definitions and instructions for the agent.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/introduction.mdx#2025-04-19_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nroles:\n  summarise_agent:\n    instructions: Summarise Photosynthesis\n```\n\n----------------------------------------\n\nTITLE: Audio Data Delta in OpenAI API\nDESCRIPTION: Example of a response.audio.delta event in the OpenAI API event stream. This event provides updates to the model-generated audio data as Base64-encoded chunks for streaming playback.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/praisonai/ui/realtimeclient/realtimedocs.txt#2025-04-19_snippet_30\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"event_id\": \"event_4950\",\n    \"type\": \"response.audio.delta\",\n    \"response_id\": \"resp_001\",\n    \"item_id\": \"msg_008\",\n    \"output_index\": 0,\n    \"content_index\": 0,\n    \"delta\": \"Base64EncodedAudioDelta\"\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Session Update Event\nDESCRIPTION: This JSON snippet describes how to send a session update event, which contains the session configuration to be updated and an optional client-generated ID.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/praisonai/ui/realtimeclient/realtimedocs.txt#2025-04-19_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"event_id\": \"event_123\",\n    \"type\": \"session.update\",\n    \"session\": {\n        \"modalities\": [\"text\", \"audio\"],\n        \"instructions\": \"Your knowledge cutoff is 2023-10. You are a helpful assistant.\",\n        \"voice\": \"alloy\",\n        \"input_audio_format\": \"pcm16\",\n        \"output_audio_format\": \"pcm16\",\n        \"input_audio_transcription\": {\n            \"enabled\": true,\n            \"model\": \"whisper-1\"\n        },\n        \"turn_detection\": {\n            \"type\": \"server_vad\",\n            \"threshold\": 0.5,\n            \"prefix_padding_ms\": 300,\n            \"silence_duration_ms\": 200\n        },\n        \"tools\": [\n            {\n                \"type\": \"function\",\n                \"name\": \"get_weather\",\n                \"description\": \"Get the current weather for a location.\",\n                \"parameters\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"location\": { \"type\": \"string\" }\n                    },\n                    \"required\": [\"location\"]\n                }\n            }\n        ],\n        \"tool_choice\": \"auto\",\n        \"temperature\": 0.8,\n        \"max_output_tokens\": null\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Data Grouping Operations\nDESCRIPTION: Functions for grouping and aggregating data with multiple columns and custom functions.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/pandas_tools.mdx#2025-04-19_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n# Basic grouping\ngrouped_df = group_by(\n    df,\n    columns=\"city\",\n    agg_dict={\"salary\": \"mean\"}\n)\n\n# Complex grouping\ngrouped_df = group_by(\n    df,\n    columns=[\"city\", \"department\"],\n    agg_dict={\n        \"salary\": [\"mean\", \"sum\", \"count\"],\n        \"age\": [\"min\", \"max\", \"mean\"]\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Defining a Research Task\nDESCRIPTION: This snippet defines a research `Task` using the `praisonaiagents` library. It specifies the task's description, expected output, the agent assigned to the task (`wiki_agent`), and a name for the task. The `agent` parameter links the task to the agent defined earlier.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/wikipedia_tools.mdx#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nresearch_task = Task(\n        description=\"Research historical events and gather information.\",\n        expected_output=\"Comprehensive research summary with citations.\",\n        agent=wiki_agent,\n        name=\"historical_research\"\n    )\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenAI API Key\nDESCRIPTION: Details the process of setting up the OpenAI API key in the environment variables, necessary for authenticating requests to the OpenAI services.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/examples/climate-impact.mdx#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport OPENAI_API_KEY=your_api_key_here\n```\n\n----------------------------------------\n\nTITLE: Conversation Item Truncated Event in JSON\nDESCRIPTION: Example of an event object returned when an earlier assistant audio message item is truncated by the client. It includes the event ID, event type, item ID, content index, and the duration to which the audio was truncated.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/praisonai/ui/realtimeclient/realtimedocs.txt#2025-04-19_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"event_id\": \"event_2526\",\n    \"type\": \"conversation.item.truncated\",\n    \"item_id\": \"msg_004\",\n    \"content_index\": 0,\n    \"audio_end_ms\": 1500\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing and Running PraisonAI for Storybook Creation\nDESCRIPTION: Sets up the PraisonAI instance with the defined YAML configuration and tools, configures the OpenAI API key from Google Colab user data, sets the model to gpt-4o-mini, and executes the storybook creation process.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/cookbooks/yaml/story_book_author_agents.ipynb#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom praisonai import PraisonAI\nfrom google.colab import userdata\n\n# Create a PraisonAI instance with the agent_yaml content\npraisonai = PraisonAI(agent_yaml=agent_yaml, tools=[GenerateImageTool, FileReadTool, MarkdownToPDFTool])\n\n# Add OPENAI_API_KEY Secrets to Google Colab on the Left Hand Side 🔑 or Enter Manually Below\nos.environ[\"OPENAI_API_KEY\"] = userdata.get('OPENAI_API_KEY') or \"ENTER OPENAI_API_KEY HERE\"\nos.environ[\"OPENAI_MODEL_NAME\"] = \"gpt-4o-mini\"\n\n# Run PraisonAI\nresult = praisonai.run()\n\n# Print the result\nprint(result) # 2/10\n```\n\n----------------------------------------\n\nTITLE: Configuring CrewAI Agent with YAML\nDESCRIPTION: Defines the YAML configuration for setting up a markdown validation agent using the CrewAI framework, including role definitions and task specifications\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/cookbooks/yaml/markdown_validator_agents.ipynb#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nagent_yaml = \"\"\"\nframework: \"crewai\"\ntopic: \"Markdown Document Validation and Syntax Review\"\nroles:\n  requirements_manager:\n    role: \"Requirements Manager\"\n    backstory: |\n      You are an expert business analyst and software QA specialist, providing high-quality, thorough, insightful, and actionable feedback.\n    goal: |\n      Provide a detailed list of the markdown linting results. Summarize actionable tasks to address the validation results, as if you were handing them to a developer to fix. Avoid examples or alternative tool suggestions.\n    verbose: true\n    allow_delegation: false\n    tools:\n      - \"MarkdownValidationTool\"\n    tasks:\n      syntax_review:\n        description: |\n          Use the MarkdownValidationTool to review the file(s) at the specified path.\n\n          Process the markdown file by calling the MarkdownValidationTool with the path:\n\n          /content/sample_text.txt\"\n\n          Summarize the validation results into a list of changes the developer should make to the document. Avoid suggesting ways to fix issues or modifying content; focus only on a list of changes.\n        expected_output: \"List of markdown changes required for document validation.\"\ndependencies: []\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Defining Research Task\nDESCRIPTION: Creation of a specific research task for the agent to execute\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/arxiv_tools.mdx#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nresearch_task = Task(\n    description=\"Search for recent papers on 'quantum machine learning' and summarize key findings.\",\n    expected_output=\"List of relevant papers with summaries.\",\n    agent=research_agent,\n    name=\"quantum_research\"\n)\n```\n\n----------------------------------------\n\nTITLE: Using Stock Tools in PraisonAI - Python\nDESCRIPTION: This snippet demonstrates how to import and use the stock tool class to retrieve stock price and information for a specified symbol.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/src/praisonai-agents/praisonaiagents/tools/README.md#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents.tools import get_stock_price, get_stock_info\n\nprice = get_stock_price(\"AAPL\")\ninfo = get_stock_info(\"AAPL\")\n```\n\n----------------------------------------\n\nTITLE: Data Analysis Agent\nDESCRIPTION: This snippet creates an agent specifically for data analysis.  This agent doesn't have tools specified, which suggests it might use the default set or have them assigned dynamically.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/pandas_tools.mdx#2025-04-19_snippet_19\n\nLANGUAGE: python\nCODE:\n```\n# Analysis agent\nanalyst = Agent(\n    name=\"Analyst\",\n    role=\"Data Analyst\"\n)\n```\n\n----------------------------------------\n\nTITLE: Installing PraisonAI with CrewAI Support\nDESCRIPTION: This command installs PraisonAI with CrewAI framework support, including tools integration, task delegation, and execution capabilities.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/nocode/installation.mdx#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install \"praisonai[crewai]\"\n```\n\n----------------------------------------\n\nTITLE: Installing Required Python Dependencies\nDESCRIPTION: Sets up necessary Python packages including langchain_community, praisonai, duckduckgo-search, and exa_py using pip install commands.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/cookbooks/yaml/meeting_prep_and_strategy_agents.ipynb#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n%pip install langchain_community > /dev/null\n%pip install praisonai[crewai] > /dev/null\n%pip install duckduckgo-search > /dev/null\n%pip install exa_py > /dev/null\n```\n\n----------------------------------------\n\nTITLE: Importing CLI Module\nDESCRIPTION: Import for command-line interface with framework-specific handling\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/api.mdx#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonai.cli import PraisonAI\n```\n\n----------------------------------------\n\nTITLE: Creating a Workflow Diagram Using Mermaid\nDESCRIPTION: This snippet demonstrates a workflow of how the AI agent and tool interact in the system, visually represented using Mermaid.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/tools_class.mdx#2025-04-19_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n    In[In] --> Agent[AI Agent]\n    Agent --> Tool[Tool Call]\n    Tool --> Agent\n    Agent --> Out[Out]\n    \n    style In fill:#8B0000,color:#fff\n    style Agent fill:#2E8B57,color:#fff\n    style Tool fill:#2E8B57,color:#fff\n    style Out fill:#8B0000,color:#fff\n```\n\n----------------------------------------\n\nTITLE: Running PraisonAI Agents App\nDESCRIPTION: This bash command executes the Python application `app.py`, which contains the PraisonAI Agents workflow definition.  It initiates the agent orchestration process.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/orchestrator-worker.mdx#2025-04-19_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n```bash\npython app.py\n```\n```\n\n----------------------------------------\n\nTITLE: Installing PraisonAI Agents Package\nDESCRIPTION: Command to install the PraisonAI Agents package using pip package manager.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/agents/shopping.mdx#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install praisonaiagents\n```\n\n----------------------------------------\n\nTITLE: Installing PraisonAI Package\nDESCRIPTION: This command installs the PraisonAI package using pip, which is a prerequisite for setting up agent configurations using the praisonai framework. This is mentioned as an upcoming feature.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/langchain_tools.mdx#2025-04-19_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\npip install \\\"praisonai\\\"\n```\n\n----------------------------------------\n\nTITLE: Starting the Agent Script - Bash\nDESCRIPTION: This Bash snippet shows how to execute the Python script file containing the AI agents and their configurations.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/tools.mdx#2025-04-19_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npython app.py\n```\n\n----------------------------------------\n\nTITLE: Running an Async AI Agent in Python\nDESCRIPTION: This bash command runs the Python script app.py that contains the async AI agent configuration and execution logic. Ensure the script is properly set up with the necessary dependencies and API key before executing.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/async.mdx#2025-04-19_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npython app.py\n```\n\n----------------------------------------\n\nTITLE: Installing PraisonAI Agents in Bash\nDESCRIPTION: Command to install the PraisonAI Agents package via pip to enable AI workflows for emergency response handling using Python scripts. This package is crucial for implementing the presented workflows.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/examples/emergency-response.mdx#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install praisonaiagents\n```\n\n----------------------------------------\n\nTITLE: Installing PraisonAI Package with npm\nDESCRIPTION: This snippet shows how to install the PraisonAI package using npm. The package is required to utilize the features provided by the framework for creating AI agents.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/js/js.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install praisonai\n```\n\n----------------------------------------\n\nTITLE: Installing PraisonAI Package with Yarn\nDESCRIPTION: A snippet for installing the PraisonAI package using Yarn, another package manager for JavaScript, which provides the same functionalities as npm.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/js/js.mdx#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add praisonai\n```\n\n----------------------------------------\n\nTITLE: Importing PraisonAI Core Module\nDESCRIPTION: Main import for the core PraisonAI functionality\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/api.mdx#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonai import PraisonAI\n```\n\n----------------------------------------\n\nTITLE: Configuring PraisonAI Agent with Azure Dynamic Sessions\nDESCRIPTION: Sets up a PraisonAI agent with Azure dynamic sessions Python REPL tool. The example includes a simple string manipulation task to count occurrences of 'r' in 'strawberry'.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/external/azure-code-interpreter.mdx#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent, PraisonAIAgents\nimport getpass\nfrom langchain_azure_dynamic_sessions import SessionsPythonREPLTool\n\nPOOL_MANAGEMENT_ENDPOINT = getpass.getpass()\n\ncoder_agent = Agent(instructions=\"\"\"word = \"strawberry\"\n                                    count = word.count(\"r\")\n                                    print(f\"There are {count}'R's in the word 'Strawberry'\")\"\"\", tools=[SessionsPythonREPLTool])\n\nagents = PraisonAIAgents(agents=[coder_agent])\nagents.start()\n```\n\n----------------------------------------\n\nTITLE: Installing PraisonAI with Call Feature Using Bash\nDESCRIPTION: This snippet includes commands for installing the PraisonAI package with the 'call' feature, setting environment variables for OpenAI API and Ngrok, and launching the PraisonAI call service publicly.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/call.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install \"praisonai[call]\"\nexport OPENAI_API_KEY=\"enter your openai api key here\"\nexport NGROK_AUTH_TOKEN=\"enter your ngrok auth token here\"\npraisonai call --public\n```\n\n----------------------------------------\n\nTITLE: Defining Agent Process (Text) - Weak Example\nDESCRIPTION: This text snippet presents a weak example of defining an agent's process. It lacks specific steps and provides only a general instruction to \"Just do a good analysis,\" which is not sufficient guidance. It's too ambiguous.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/course/agents/04-agent-instructions.mdx#2025-04-19_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nJust do a good analysis.\n```\n\n----------------------------------------\n\nTITLE: Author-Based Paper Search\nDESCRIPTION: Implementation of paper search functionality by author name\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/arxiv_tools.mdx#2025-04-19_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# Get author's papers\npapers = get_papers_by_author(\"Yoshua Bengio\")\n\n# Recent papers first\npapers = get_papers_by_author(\n    author=\"Yoshua Bengio\",\n    max_results=5,\n    sort_by=\"submittedDate\",\n    sort_order=\"descending\"\n)\n```\n\n----------------------------------------\n\nTITLE: Audio Transcription Failed Event in JSON\nDESCRIPTION: Example of an event object returned when audio transcription fails. It includes the event ID, event type, item ID, content index, and details about the transcription error.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/praisonai/ui/realtimeclient/realtimedocs.txt#2025-04-19_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"event_id\": \"event_2324\",\n    \"type\": \"conversation.item.input_audio_transcription.failed\",\n    \"item_id\": \"msg_003\",\n    \"content_index\": 0,\n    \"error\": {\n        \"type\": \"transcription_error\",\n        \"code\": \"audio_unintelligible\",\n        \"message\": \"The audio could not be transcribed.\",\n        \"param\": null\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Speech Stopped Event in JSON\nDESCRIPTION: Example of an event object returned when speech stops in server turn detection mode. It includes the event ID, event type, timing information, and the ID of the user message item that will be created.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/praisonai/ui/realtimeclient/realtimedocs.txt#2025-04-19_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"event_id\": \"event_1718\",\n    \"type\": \"input_audio_buffer.speech_stopped\",\n    \"audio_end_ms\": 2000,\n    \"item_id\": \"msg_003\"\n}\n```\n\n----------------------------------------\n\nTITLE: Completed Audio Transcript in OpenAI API\nDESCRIPTION: Example of a response.audio_transcript.done event in the OpenAI API event stream. This event indicates that the model-generated transcription of audio output is complete and contains the final transcript.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/praisonai/ui/realtimeclient/realtimedocs.txt#2025-04-19_snippet_29\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"event_id\": \"event_4748\",\n    \"type\": \"response.audio_transcript.done\",\n    \"response_id\": \"resp_001\",\n    \"item_id\": \"msg_008\",\n    \"output_index\": 0,\n    \"content_index\": 0,\n    \"transcript\": \"Hello, how can I assist you today?\"\n}\n```\n\n----------------------------------------\n\nTITLE: Workflow Process Diagram in Mermaid\nDESCRIPTION: Mermaid diagram showing an advanced workflow process with conditional execution paths between agents.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/README.md#2025-04-19_snippet_13\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph LR\n    Input[Input] --> Start\n    \n    subgraph Workflow\n        direction LR\n        Start[Start] --> C1{Condition}\n        C1 --> |Yes| A1[Agent 1]\n        C1 --> |No| A2[Agent 2]\n        A1 --> Join\n        A2 --> Join\n        Join --> A3[Agent 3]\n    end\n    \n    A3 --> Output[Output]\n\n    classDef input fill:#8B0000,stroke:#7C90A0,color:#fff\n    classDef process fill:#189AB4,stroke:#7C90A0,color:#fff\n    classDef decision fill:#2E8B57,stroke:#7C90A0,color:#fff\n    classDef transparent fill:none,stroke:none\n\n    class Input,Output input\n    class Start,A1,A2,A3,Join process\n    class C1 decision\n    class Workflow transparent\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for CLI Operations Agent\nDESCRIPTION: Installs the required Python packages silently using pip: langchain_community, praisonai with crewai extra, and open-interpreter.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/cookbooks/yaml/cli_operation_agents.ipynb#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Install dependencies without output\n%pip install langchain_community > /dev/null\n%pip install praisonai[crewai] > /dev/null\n%pip install open-interpreter > /dev/null\n```\n\n----------------------------------------\n\nTITLE: Executing Agent from YAML Configuration in Terminal\nDESCRIPTION: The bash command runs the PraisonAI agent system using the `agents.yaml` configuration file. This execution initiates the agents as defined in the YAML, allowing the system to perform the specified tasks.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/course/agents/12-adding-tools-to-agents.mdx#2025-04-19_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\npraisonai agents.yaml\n```\n\n----------------------------------------\n\nTITLE: Visualizing Research Agent Workflow with Mermaid\nDESCRIPTION: A flowchart diagram showing the research process flow from query input through search, analysis, and synthesis to final report generation.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/agents/research.mdx#2025-04-19_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n    In[Research Query] --> Search[Web Search]\n    Search --> Analyzer[Content Analyzer]\n    Analyzer --> Synthesizer[Information Synthesizer]\n    Synthesizer --> Out[Research Report]\n    \n    style In fill:#8B0000,color:#fff\n    style Search fill:#2E8B57,color:#fff\n    style Analyzer fill:#2E8B57,color:#fff\n    style Synthesizer fill:#2E8B57,color:#fff\n    style Out fill:#8B0000,color:#fff\n```\n\n----------------------------------------\n\nTITLE: Audio Transcript Delta in OpenAI API\nDESCRIPTION: Example of a response.audio_transcript.delta event in the OpenAI API event stream. This event provides updates to the model-generated transcription of audio output as it's being created.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/praisonai/ui/realtimeclient/realtimedocs.txt#2025-04-19_snippet_28\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"event_id\": \"event_4546\",\n    \"type\": \"response.audio_transcript.delta\",\n    \"response_id\": \"resp_001\",\n    \"item_id\": \"msg_008\",\n    \"output_index\": 0,\n    \"content_index\": 0,\n    \"delta\": \"Hello, how can I a\"\n}\n```\n\n----------------------------------------\n\nTITLE: Install PraisonAI Agents Package\nDESCRIPTION: This command installs the `praisonaiagents` package using pip, which is required to run the AI agents for supply chain risk management. Ensure that Python and pip are installed on your system before running this command.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/examples/supply-chain.mdx#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n```bash\npip install praisonaiagents\n```\n```\n\n----------------------------------------\n\nTITLE: Install PraisonAI Agents Package\nDESCRIPTION: This bash command installs the `praisonaiagents` package using pip. This package provides the necessary classes and functions for creating and managing AI agents within the smart city resource management system. It is a prerequisite for running the provided Python code.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/examples/smart-city.mdx#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install praisonaiagents\n```\n\n----------------------------------------\n\nTITLE: Setting API Keys as Environment Variables\nDESCRIPTION: Set your OpenAI and EXA API keys as environment variables in your terminal to allow secure access to required services.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/tools_class.mdx#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport OPENAI_API_KEY=your_api_key_here\nexport EXA_API_KEY=your_exa_api_key_here\n```\n\n----------------------------------------\n\nTITLE: Installing PraisonAI Agents Dependencies (Bash)\nDESCRIPTION: Installs the required Python package 'praisonaiagents' with LLM support using pip. This step is necessary to run the PraisonAI agent script.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/mcp/anthropic.mdx#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npip install \"praisonaiagents[llm]\"\n```\n\n----------------------------------------\n\nTITLE: Install PraisonAI Agents Package\nDESCRIPTION: This command installs the PraisonAI Agents package using pip, which is necessary for using the provided code and creating multilingual content generation systems.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/examples/multilingual-content.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"pip install praisonaiagents\"\n```\n\n----------------------------------------\n\nTITLE: Configuring SearchApi API Key\nDESCRIPTION: Sets up the required API key environment variable for SearchApi authentication.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/external/searchapi-search.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport SEARCHAPI_API_KEY=your_api_key_here\n```\n\n----------------------------------------\n\nTITLE: Installing PraisonAI Agents Package - Bash\nDESCRIPTION: This Bash command installs the PraisonAI Agents package, which is required to create Finance Agents for stock analysis.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/agents/finance.mdx#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install praisonaiagents\n```\n\n----------------------------------------\n\nTITLE: Setting OpenAI API Key in Bash\nDESCRIPTION: This command sets the OpenAI API key as an environment variable, enabling the Python script to authenticate and interact with OpenAI services. Replace 'your_api_key_here' with your actual API key.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/examples/emergency-response.mdx#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport OPENAI_API_KEY=your_api_key_here\n```\n\n----------------------------------------\n\nTITLE: Visualizing AI Agent Flow with Mermaid Diagram\nDESCRIPTION: A flowchart diagram showing the data flow between the input, AI Agent, Airbnb MCP tool, and output. The diagram visualizes how the agent interacts with the MCP tool to process requests.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/mcp/openai.mdx#2025-04-19_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n    In[In] --> Agent[AI Agent]\n    Agent --> Tool[Airbnb MCP]\n    Tool --> Agent\n    Agent --> Out[Out]\n    \n    style In fill:#8B0000,color:#fff\n    style Agent fill:#2E8B57,color:#fff\n    style Tool fill:#FF5A5F,color:#fff\n    style Out fill:#8B0000,color:#fff\n```\n\n----------------------------------------\n\nTITLE: Visualizing Redis MCP Integration Flow\nDESCRIPTION: A mermaid flowchart illustrating the interaction between a query, an AI agent, the Redis MCP tool, and the final answer output.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/mcp/redis.mdx#2025-04-19_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n    In[Query] --> Agent[AI Agent]\n    Agent --> Tool[Redis MCP]\n    Tool --> Agent\n    Agent --> Out[Answer]\n    \n    style In fill:#8B0000,color:#fff\n    style Agent fill:#2E8B57,color:#fff\n    style Tool fill:#DC382D,color:#fff\n    style Out fill:#8B0000,color:#fff\n```\n\n----------------------------------------\n\nTITLE: Run Multilingual Content Generation System\nDESCRIPTION: This command executes the Python script 'app.py', which sets up and runs the multilingual content generation system defined in the previous code snippet. It requires Python to be installed and configured correctly.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/examples/multilingual-content.mdx#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n\"python app.py\"\n```\n\n----------------------------------------\n\nTITLE: Groq API Integration Configuration\nDESCRIPTION: Set up Groq API credentials and base URL for model access\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/README.md#2025-04-19_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nexport OPENAI_API_KEY=xxxxxxxxxxx\nexport OPENAI_BASE_URL=https://api.groq.com/openai/v1\n```\n\n----------------------------------------\n\nTITLE: Setting up Environment Variables and Running PraisonAI Examples\nDESCRIPTION: Instructions for setting up the required environment variables (specifically the OpenAI API key) and running the TypeScript examples using ts-node.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/src/praisonai-ts/README.md#2025-04-19_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nexport OPENAI_API_KEY='your-api-key'\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx ts-node example.ts\n```\n\n----------------------------------------\n\nTITLE: Linting Code Function - Python\nDESCRIPTION: Lints Python code to detect issues related to code quality, stylistic violations, and potential bugs by providing detailed feedback on warnings and errors present in the code.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/python_tools.mdx#2025-04-19_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nresults = lint_code(\"\"\"\ndef bad_function():\n    unused_var = 42\n    return 'result'\n\"\"\")\n```\n\n----------------------------------------\n\nTITLE: Example .praisoninclude File\nDESCRIPTION: This is an example `.praisoninclude` file, which specifies files and directories to explicitly include in the context for analysis, in addition to the default context.  List files/folders you wish to include.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/ui/code.mdx#2025-04-19_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n\"projectfiles\\ndocs\"\n```\n\n----------------------------------------\n\nTITLE: Conversation Item Deleted Event in JSON\nDESCRIPTION: Example of an event object returned when an item in the conversation is deleted. It includes the event ID, event type, and the ID of the deleted item.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/praisonai/ui/realtimeclient/realtimedocs.txt#2025-04-19_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"event_id\": \"event_2728\",\n    \"type\": \"conversation.item.deleted\",\n    \"item_id\": \"msg_005\"\n}\n```\n\n----------------------------------------\n\nTITLE: Committing Audio Buffer\nDESCRIPTION: This JSON snippet illustrates how to commit audio bytes to a user message with an optional client-generated ID.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/praisonai/ui/realtimeclient/realtimedocs.txt#2025-04-19_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"event_id\": \"event_789\",\n    \"type\": \"input_audio_buffer.commit\"\n}\n```\n\n----------------------------------------\n\nTITLE: Printing the Result in Python\nDESCRIPTION: This code snippet prints the value of the variable 'result' to the standard output. It's a standard way to display the outcome of a computation or process in Python.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/developers/googlecolab-tools.mdx#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Recruitment Flow Agents in Python\nDESCRIPTION: Installs required Python packages silently using pip. Includes langchain_community, praisonai with crewai extension, and duckduckgo-search.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/cookbooks/yaml/recruitment_flow_agents.ipynb#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Install dependencies without output\n%pip install langchain_community > /dev/null\n%pip install praisonai[crewai] > /dev/null\n%pip install duckduckgo-search > /dev/null\n```\n\n----------------------------------------\n\nTITLE: Tools Placeholder Implementation\nDESCRIPTION: Empty code block indicating that no tools are being leveraged in this implementation.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/cookbooks/yaml/movie_script_writer_agents.ipynb#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# This specific code does not leverage any of the tools\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for DuckDuckGo Search Agent\nDESCRIPTION: Install required Python packages for using DuckDuckGo search with AI agents\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/duckduckgo_tools.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install praisonaiagents duckduckgo-search\n```\n\n----------------------------------------\n\nTITLE: Setting OpenAI API Key\nDESCRIPTION: Set the OpenAI API key as an environment variable. This is required for the agents to interact with the OpenAI API. Replace `your_api_key_here` with your actual API key.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/mini.mdx#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport OPENAI_API_KEY=your_api_key_here\n```\n\n----------------------------------------\n\nTITLE: Setting Streamlit App Title and Description\nDESCRIPTION: This Python code sets the title and description of the Streamlit app using `st.title` and `st.markdown`. The title is \"Hackathon Judge Agent\" and the description provides a brief overview of the app's functionality.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/ui/streamlit/hackathon-judge-streamlit.mdx#2025-04-19_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n\"# Title and description\nst.title(\\\"🏆 Hackathon Judge Agent\\\")\nst.markdown(\\\"\\\"\\\"\nUpload your hackathon project demonstration video for an AI-powered evaluation.\nGet comprehensive feedback on various aspects of your project.\n\\\"\\\"\\\"\")\n```\n\n----------------------------------------\n\nTITLE: Mermaid Flow Diagram for Fraud Detection Process\nDESCRIPTION: Visual representation of the fraud detection workflow showing key stages from input to output\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/examples/fraud-detection.mdx#2025-04-19_snippet_3\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n    In[In] --> Analyzer[Transaction Analyzer]\n    Analyzer -->|high risk| Verifier[Identity Verifier]\n    Analyzer -->|all risks| Checker[Pattern Checker]\n    Checker --> Generator[Alert Generator]\n    Verifier --> Generator\n    Generator --> Out[Out]\n```\n\n----------------------------------------\n\nTITLE: Installing PraisonAI Agents Package\nDESCRIPTION: Command to install the PraisonAI Agents package using pip, which is required before setting up the Programming Agent.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/agents/programming.mdx#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install praisonaiagents\n```\n\n----------------------------------------\n\nTITLE: Installing PraisonAI Agents Python Package\nDESCRIPTION: Command to install the lightweight Python package dedicated for coding with PraisonAI agents.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/README.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install praisonaiagents\n```\n\n----------------------------------------\n\nTITLE: Setting Perplexity API Key in Environment Variable\nDESCRIPTION: Configures the Perplexity API key as an environment variable for secure authentication and access to search services\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/mcp/perplexity.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport PERPLEXITY_API_KEY=your_perplexity_api_key_here\n```\n\n----------------------------------------\n\nTITLE: Set OpenAI API Key\nDESCRIPTION: This command sets the OpenAI API key as an environment variable, which is necessary for authenticating with the OpenAI API and using its services. Replace `your_api_key_here` with your actual API key obtained from the OpenAI platform.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/examples/supply-chain.mdx#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n```bash\nexport OPENAI_API_KEY=your_api_key_here\n```\n```\n\n----------------------------------------\n\nTITLE: Running the WhatsApp Agent in Bash\nDESCRIPTION: Command to execute the Python script that runs the WhatsApp agent, allowing it to send messages via WhatsApp MCP.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/mcp/whatsapp.mdx#2025-04-19_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npython whatsapp_message.py\n```\n\n----------------------------------------\n\nTITLE: Installing PraisonAI Dependencies\nDESCRIPTION: Installs the required PraisonAI package and its CrewAI extension silently using pip.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/cookbooks/yaml/movie_script_writer_agents.ipynb#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n%pip install praisonai > /dev/null\n%pip install praisonai[crewai] > /dev/null\n```\n\n----------------------------------------\n\nTITLE: Creating Example File\nDESCRIPTION: Instructs the user to create a new TypeScript file in order to implement one of the previous examples provided.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/js/nodejs.mdx#2025-04-19_snippet_9\n\nLANGUAGE: text\nCODE:\n```\nCreate a new TypeScript file (e.g., `app.ts`) with any of the above examples.\n```\n\n----------------------------------------\n\nTITLE: Setting OpenAI API Key\nDESCRIPTION: Sets the OpenAI API key as an environment variable. This is required for agents to access OpenAI's LLMs.  The user needs to generate their own API Key.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/quickstart.mdx#2025-04-19_snippet_10\n\nLANGUAGE: Terminal\nCODE:\n```\nexport OPENAI_API_KEY=your_openai_key\n```\n\n----------------------------------------\n\nTITLE: Setting OpenAI API Key Environment Variable\nDESCRIPTION: Command to set the OpenAI API key as an environment variable in the terminal. This is required for the AI agent to communicate with OpenAI's models.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/mcp/puppeteer.mdx#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport OPENAI_API_KEY=your_openai_api_key_here\n```\n\n----------------------------------------\n\nTITLE: Pulling Deepseek Models with Ollama\nDESCRIPTION: These commands pull the specified Deepseek large language model (deepseek-r1) and the nomic embedding model from Ollama. These models are used for generating responses and creating embeddings for knowledge retrieval.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/ui/streamlit/deepseek-streamlit.mdx#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Large Language Model\nollama pull deepseek-r1\n\n# Embedding Model\nollama pull nomic-embed-text\n```\n\n----------------------------------------\n\nTITLE: Category-Based Paper Search\nDESCRIPTION: Implementation of paper search functionality by arXiv category\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/arxiv_tools.mdx#2025-04-19_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n# Get papers in category\npapers = get_papers_by_category(\"cs.AI\")\n\n# Recent machine learning papers\npapers = get_papers_by_category(\n    category=\"cs.LG\",\n    max_results=5,\n    sort_by=\"submittedDate\",\n    sort_order=\"descending\"\n)\n```\n\n----------------------------------------\n\nTITLE: Importing DuckDuckGo Search Components\nDESCRIPTION: Import necessary classes and tools for creating search agents\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/duckduckgo_tools.mdx#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent, Task, PraisonAIAgents\nfrom praisonaiagents.tools import duckduckgo\n```\n\n----------------------------------------\n\nTITLE: Install PraisonAI Package\nDESCRIPTION: This command installs the praisonai package using pip. This package is required to run the YAML configuration.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/callbacks.mdx#2025-04-19_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n\"pip install praisonai\"\n```\n\n----------------------------------------\n\nTITLE: Setting Jina API Environment Variable\nDESCRIPTION: Configuration of the JINA_API_KEY environment variable required for authentication.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/external/jina-search.mdx#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nos.environ[\"JINA_API_KEY\"]= \"YOUR_API_KEY\"\n```\n\n----------------------------------------\n\nTITLE: Installing Required Dependencies for GoogleSearch\nDESCRIPTION: Command to install the necessary langchain packages for Google Search integration.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/external/google-search.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install langchain-community langchain-google-community\n```\n\n----------------------------------------\n\nTITLE: Setting OpenAI API Key Environment Variable\nDESCRIPTION: This bash command sets the OpenAI API key as an environment variable. This key is required to authenticate with the OpenAI API and use its services within PraisonAI.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/concepts/process.mdx#2025-04-19_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nexport OPENAI_API_KEY=your_openai_key\n```\n\n----------------------------------------\n\nTITLE: Running the Script - TypeScript\nDESCRIPTION: This command demonstrates how to run a TypeScript file using PraisonAI in a Node.js environment. This would execute the defined logic in 'app.ts'.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/introduction.mdx#2025-04-19_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nnpx ts-node app.ts\n```\n\n----------------------------------------\n\nTITLE: Installing PraisonAI Agents Package\nDESCRIPTION: Command to install the PraisonAI Agents package using pip package manager.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/agents/data-analyst.mdx#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install praisonaiagents\n```\n\n----------------------------------------\n\nTITLE: Adding Serpapi Tool to Composio\nDESCRIPTION: Command to add the Serpapi search tool to the Composio toolset.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/composio.mdx#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncomposio add serpapi\n```\n\n----------------------------------------\n\nTITLE: Importing arXiv Components\nDESCRIPTION: Import statements for required arXiv tools and agent components\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/arxiv_tools.mdx#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent, Task, PraisonAIAgents\nfrom praisonaiagents.tools import search_arxiv, get_arxiv_paper, get_papers_by_author, get_papers_by_category\n```\n\n----------------------------------------\n\nTITLE: Exporting API Key for You.com Search Integration - Bash\nDESCRIPTION: This snippet exports the You.com API key as an environment variable, which is required for using the You.com Search API within the PraisonAI application. It is essential for authentication and access to the API functions. The key must be provided before running the main application.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/you.com.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport YDC_API_KEY=xxxxxxxxxxxx\n```\n\n----------------------------------------\n\nTITLE: Install PraisonAI Agents Package\nDESCRIPTION: This command installs the PraisonAI Agents package using pip. This package is required to run the vulnerability detection workflow.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/examples/vulnerability-detection.mdx#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install praisonaiagents\n```\n\n----------------------------------------\n\nTITLE: Importing Excel Processing Components\nDESCRIPTION: Import statements for required PraisonAI agent components and Excel tools\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/excel_tools.mdx#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonaiagents import Agent, Task, PraisonAIAgents\nfrom praisonaiagents.tools import read_excel, write_excel, merge_excel\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables\nDESCRIPTION: Sets up the required API keys as environment variables for BraveSearch and OpenAI.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/external/brave-search.mdx#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport BRAVE_SEARCH_API=your_api_key_here\nexport OPENAI_API_KEY=your_api_key_here\n```\n\n----------------------------------------\n\nTITLE: Run PraisonAI Agents with YAML\nDESCRIPTION: This command starts the PraisonAI agents using the configuration defined in the `agents.yaml` file.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/callbacks.mdx#2025-04-19_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n\"praisonai agents.yaml\"\n```\n\n----------------------------------------\n\nTITLE: Running the Python Script from Terminal\nDESCRIPTION: This bash command allows you to run your Python script containing the AI agent. Ensure that your terminal's current directory is where `first_agent.py` is located and that Python is installed on your system.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/course/agents/11-creating-your-first-agent.mdx#2025-04-19_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npython first_agent.py\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with Python\nDESCRIPTION: This snippet installs necessary packages 'langchain_community' and 'praisonai[crewai]' with Python's pip, suppressing output. These packages are required for the rest of the code to function correctly.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/cookbooks/yaml/shakespearean_tweets_generation_agents.ipynb#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Install dependencies without output\n%pip install langchain_community > /dev/null\n%pip install praisonai[crewai] > /dev/null\n\n```\n\n----------------------------------------\n\nTITLE: Creating docker-compose.yml for Development\nDESCRIPTION: This docker-compose.yml defines services for the app and a file watcher, enabling live reloading during local development. It mounts the current directory into the container and forwards port 5555. It uses the Dockerfile defined above and also sets up the watch service.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/ui/code.mdx#2025-04-19_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\n\"version: '3.8'\\n\\nservices:\\n  app:\\n    build:\\n      context: .\\n      dockerfile: Dockerfile.dev\\n    volumes:\\n      - .:/app\\n    ports:\\n      - \\\"5555:5555\\\"\\n    environment:\\n      FLASK_ENV: development\\n    command: flask run --host=0.0.0.0\\n\\n  watch:\\n    image: alpine:latest\\n    volumes:\\n      - .:/app\\n    command: sh -c \\\"apk add --no-cache inotify-tools && while inotifywait -r -e modify,create,delete /app; do kill -HUP 1; done\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Language Translator Agents in Python\nDESCRIPTION: This snippet installs the required libraries for the language translator agents project, including langchain_community, praisonai with crewai extension, and requests.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/cookbooks/yaml/language_translator_agents.ipynb#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Install dependencies without output\n%pip install langchain_community > /dev/null\n%pip install praisonai[crewai] > /dev/null\n%pip install requests > /dev/null\n```\n\n----------------------------------------\n\nTITLE: Creating a New Branch\nDESCRIPTION: This snippet demonstrates how to create a new branch named 'new-feature' in your local repository. Branches are used to develop features independently from the main codebase. This requires a forked and cloned repository.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/contributing.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngit checkout -b new-feature\n```\n\n----------------------------------------\n\nTITLE: AI Agents with Memory Diagram in Mermaid\nDESCRIPTION: Mermaid diagram showing how AI agents can use short-term and long-term memory with vector database storage.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/README.md#2025-04-19_snippet_10\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TB\n    subgraph Memory\n        direction TB\n        STM[Short Term]\n        LTM[Long Term]\n    end\n\n    subgraph Store\n        direction TB\n        DB[(Vector DB)]\n    end\n\n    Input[Input] ---> Agents\n    subgraph Agents\n        direction LR\n        A1[Agent 1]\n        A2[Agent 2]\n        A3[Agent 3]\n    end\n    Agents ---> Output[Output]\n\n    Memory <--> Store\n    Store <--> A1\n    Store <--> A2\n    Store <--> A3\n\n    style Memory fill:#189AB4,color:#fff\n    style Store fill:#2E8B57,color:#fff\n    style Agents fill:#8B0000,color:#fff\n    style Input fill:#8B0000,color:#fff\n    style Output fill:#8B0000,color:#fff\n```\n\n----------------------------------------\n\nTITLE: Running the Slack-Enabled AI Agent\nDESCRIPTION: Executes the Python script that contains the Slack-enabled AI agent.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/mcp/slack.mdx#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npython slack_agent.py\n```\n\n----------------------------------------\n\nTITLE: Response Created Event in JSON\nDESCRIPTION: Example of an event object returned when a new Response is created. It includes the event ID, event type, and details about the newly created response in its initial 'in_progress' state.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/praisonai/ui/realtimeclient/realtimedocs.txt#2025-04-19_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"event_id\": \"event_2930\",\n    \"type\": \"response.created\",\n    \"response\": {\n        \"id\": \"resp_001\",\n        \"object\": \"realtime.response\",\n        \"status\": \"in_progress\",\n        \"status_details\": null,\n        \"output\": [],\n        \"usage\": null\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing AgentQL Dependencies\nDESCRIPTION: Command to install the required Python packages for AgentQL and LangChain integration\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/tools/external/agentql-toolkit.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install langchain_agentql langchain-community\n```\n\n----------------------------------------\n\nTITLE: Defining Agent Configuration in YAML\nDESCRIPTION: YAML configuration defining the roles, tasks, and tools for web scraping, data cleaning, and analysis agents using the CrewAI framework.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/cookbooks/yaml/model_fee_retreival_agents.ipynb#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nagent_yaml = \"\"\"\nframework: \"crewai\"\ntopic: \"extract model pricing from websites\"\nroles:\n  web_scraper:\n    role: \"Web Scraper\"\n    backstory: |\n      An expert in web scraping with a deep understanding of extracting structured\n      data from online sources.\n\n      https://openai.com/api/pricing/\n      https://www.anthropic.com/pricing\n      https://cohere.com/pricing\n    goal: \"Gather model pricing data from various websites\"\n    tasks:\n      scrape_model_pricing:\n        description: \"Scrape model pricing information from the provided list of websites.\"\n        expected_output: \"Raw HTML or JSON containing model pricing data.\"\n    tools:\n      - \"ModelFeeTool\"\n  data_cleaner:\n    role: \"Data Cleaner\"\n    backstory: \"Specialist in data cleaning, ensuring that all collected data is accurate and properly formatted.\"\n    goal: \"Clean and organize the scraped pricing data\"\n    tasks:\n      clean_pricing_data:\n        description: \"Process the raw scraped data to remove any duplicates and inconsistencies, and convert it into a structured format.\"\n        expected_output: \"Cleaned and organized JSON or CSV file with model pricing data.\"\n    tools: []\n  data_analyzer:\n    role: \"Data Analyzer\"\n    backstory: \"Data analysis expert focused on deriving actionable insights from structured data.\"\n    goal: \"Analyze the cleaned pricing data to extract insights\"\n    tasks:\n      analyze_pricing_data:\n        description: \"Analyze the cleaned data to extract trends, patterns, and insights on model pricing.\"\n        expected_output: \"Detailed report summarizing model pricing trends and insights.\"\n    tools: []\ndependencies: []\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Installing Required Python Dependencies\nDESCRIPTION: A bash command to install the PraisonAI agents package with LLM support. This is necessary for running the Python script that integrates XAI Grok with Airbnb MCP.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/mcp/xai.mdx#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npip install \"praisonaiagents[llm]\"\n```\n\n----------------------------------------\n\nTITLE: Running AG2 Multi-Agent Conversation\nDESCRIPTION: Command to execute PraisonAI's AG2 framework for initiating multi-agent interaction and task completion\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/framework/autogen.mdx#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npraisonai --framework autogen\n```\n\n----------------------------------------\n\nTITLE: Defining a Character Counter Tool in Python\nDESCRIPTION: Defines a 'CharacterCounterTool' class that checks if text characters are within specified limits and scans for emojis using regular expressions. It requires 're' and 'BaseTool' from 'praisonai_tools', and returns a dictionary with the results.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/cookbooks/yaml/shakespearean_tweets_generation_agents.ipynb#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom praisonai_tools import BaseTool\nimport re\n\nclass CharacterCounterTool(BaseTool):\n    name: str = \"CharacterCounterTool\"\n    description: str = \"Counts characters in a text and checks if it meets specific character limits.\"\n\n    def _run(self, text: str, min_length: int = 200, max_length: int = 280) -> dict:\n        \"\"\"\n        Analyzes the provided text to check if it meets the specified character limits and\n        whether it contains any forbidden emojis.\n\n        Parameters:\n        - text (str): The text to analyze.\n        - min_length (int): The minimum allowed character count. Default is 200.\n        - max_length (int): The maximum allowed character count. Default is 280.\n\n        Returns:\n        - dict: A dictionary with validation results, including character count, emoji presence,\n                and compliance with the specified character range.\n        \"\"\"\n        char_count = len(text)\n        within_limits = min_length <= char_count <= max_length\n        emoji_pattern = re.compile(\n            r\"[\\U0001F600-\\U0001F64F\\U0001F300-\\U0001F5FF\\U0001F680-\\U0001F6FF\\U0001F700-\\U0001F77F]\"\n        )\n        contains_emoji = bool(emoji_pattern.search(text))\n\n        return {\n            \"character_count\": char_count,\n            \"within_limits\": within_limits,\n            \"contains_emoji\": contains_emoji,\n        }\n\n```\n\n----------------------------------------\n\nTITLE: Installing PraisonAI Dependencies\nDESCRIPTION: Command to install the required Python packages for PraisonAI agents and MCP functionality.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/mcp/gdrive.mdx#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install praisonaiagents mcp\n```\n\n----------------------------------------\n\nTITLE: Running the GitHub-Enabled AI Agent Script\nDESCRIPTION: This command executes the Python script that creates and runs the GitHub-enabled AI agent. It assumes the script is named 'github_agent.py' and is in the current directory.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/mcp/github.mdx#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npython github_agent.py\n```\n\n----------------------------------------\n\nTITLE: Setting OpenAI API Key as environment variable\nDESCRIPTION: This command sets the OpenAI API key as an environment variable.  This is required to authenticate with the OpenAI API when using PraisonAI agents that depend on OpenAI's models. The key is used to authorize requests to the OpenAI API.\nSOURCE: https://github.com/mervinpraison/praisonai/blob/main/docs/features/selfreflection.mdx#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport OPENAI_API_KEY=your_api_key_here\n```"
  }
]